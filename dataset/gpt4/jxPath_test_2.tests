public void testFormatNumberFunction() { [EOL]     DecimalFormatSymbols symbols = new DecimalFormatSymbols(); [EOL]     symbols.setDigit('D'); [EOL]     context.setDecimalFormatSymbols("test", symbols); [EOL]     assertXPathValue(context, "format-number(123456789, '#.000000000')", "123456789.000000000"); [EOL]     assertXPathValue(context, "format-number(123456789, '#.0')", "123456789.0"); [EOL]     assertXPathValue(context, "format-number(0.123456789, '##%')", "12%"); [EOL]     assertXPathValue(context, "format-number(123456789, '################')", "123456789"); [EOL]     assertXPathValue(context, "format-number(123456789, 'D.0', 'test')", "123456789.0"); [EOL]     assertXPathValue(context, "format-number(123456789, '$DDD,DDD,DDD.DD', 'test')", "$123,456,789"); [EOL] }
public void testFormatNumberFunction() { [EOL]     DecimalFormatSymbols symbols = new DecimalFormatSymbols(); [EOL]     symbols.setDigit('D'); [EOL]     context.setDecimalFormatSymbols("test", symbols); [EOL]     assertXPathValue(context, "format-number(123456789, '#.000000000')", "123456789.000000000"); [EOL]     assertXPathValue(context, "format-number(123456789, '#.0')", "123456789.0"); [EOL]     assertXPathValue(context, "format-number(0.123456789, '##%')", "12%"); [EOL]     assertXPathValue(context, "format-number(123456789, '################')", "123456789"); [EOL]     assertXPathValue(context, "format-number(123456789, 'D.0', 'test')", "123456789.0"); [EOL]     assertXPathValue(context, "format-number(123456789, '$DDD,DDD,DDD.DD', 'test')", "$123,456,789"); [EOL] }
public void testFormatNumberFunction() { [EOL]     DecimalFormatSymbols symbols = new DecimalFormatSymbols(); [EOL]     symbols.setDigit('D'); [EOL]     context.setDecimalFormatSymbols("test", symbols); [EOL]     assertXPathValue(context, "format-number(123456789, '#.000000000')", "123456789.000000000"); [EOL]     assertXPathValue(context, "format-number(123456789, '#.0')", "123456789.0"); [EOL]     assertXPathValue(context, "format-number(0.123456789, '##%')", "12%"); [EOL]     assertXPathValue(context, "format-number(123456789, '################')", "123456789"); [EOL]     assertXPathValue(context, "format-number(123456789, 'D.0', 'test')", "123456789.0"); [EOL]     assertXPathValue(context, "format-number(123456789, '$DDD,DDD,DDD.DD', 'test')", "$123,456,789"); [EOL] }
public void testFormatNumberFunction() { [EOL]     DecimalFormatSymbols symbols = new DecimalFormatSymbols(); [EOL]     symbols.setDigit('D'); [EOL]     context.setDecimalFormatSymbols("test", symbols); [EOL]     assertXPathValue(context, "format-number(123456789, '#.000000000')", "123456789.000000000"); [EOL]     assertXPathValue(context, "format-number(123456789, '#.0')", "123456789.0"); [EOL]     assertXPathValue(context, "format-number(0.123456789, '##%')", "12%"); [EOL]     assertXPathValue(context, "format-number(123456789, '################')", "123456789"); [EOL]     assertXPathValue(context, "format-number(123456789, 'D.0', 'test')", "123456789.0"); [EOL]     assertXPathValue(context, "format-number(123456789, '$DDD,DDD,DDD.DD', 'test')", "$123,456,789"); [EOL] }
public void testFormatNumberFunction() { [EOL]     DecimalFormatSymbols symbols = new DecimalFormatSymbols(); [EOL]     symbols.setDigit('D'); [EOL]     context.setDecimalFormatSymbols("test", symbols); [EOL]     assertXPathValue(context, "format-number(123456789, '#.000000000')", "123456789.000000000"); [EOL]     assertXPathValue(context, "format-number(123456789, '#.0')", "123456789.0"); [EOL]     assertXPathValue(context, "format-number(0.123456789, '##%')", "12%"); [EOL]     assertXPathValue(context, "format-number(123456789, '################')", "123456789"); [EOL]     assertXPathValue(context, "format-number(123456789, 'D.0', 'test')", "123456789.0"); [EOL]     assertXPathValue(context, "format-number(123456789, '$DDD,DDD,DDD.DD', 'test')", "$123,456,789"); [EOL] }
public void testFormatNumberFunction() { [EOL]     DecimalFormatSymbols symbols = new DecimalFormatSymbols(); [EOL]     symbols.setDigit('D'); [EOL]     context.setDecimalFormatSymbols("test", symbols); [EOL]     assertXPathValue(context, "format-number(123456789, '#.000000000')", "123456789.000000000"); [EOL]     assertXPathValue(context, "format-number(123456789, '#.0')", "123456789.0"); [EOL]     assertXPathValue(context, "format-number(0.123456789, '##%')", "12%"); [EOL]     assertXPathValue(context, "format-number(123456789, '################')", "123456789"); [EOL]     assertXPathValue(context, "format-number(123456789, 'D.0', 'test')", "123456789.0"); [EOL]     assertXPathValue(context, "format-number(123456789, '$DDD,DDD,DDD.DD', 'test')", "$123,456,789"); [EOL] }
public void testFormatNumberFunction() { [EOL]     DecimalFormatSymbols symbols = new DecimalFormatSymbols(); [EOL]     symbols.setDigit('D'); [EOL]     context.setDecimalFormatSymbols("test", symbols); [EOL]     assertXPathValue(context, "format-number(123456789, '#.000000000')", "123456789.000000000"); [EOL]     assertXPathValue(context, "format-number(123456789, '#.0')", "123456789.0"); [EOL]     assertXPathValue(context, "format-number(0.123456789, '##%')", "12%"); [EOL]     assertXPathValue(context, "format-number(123456789, '################')", "123456789"); [EOL]     assertXPathValue(context, "format-number(123456789, 'D.0', 'test')", "123456789.0"); [EOL]     assertXPathValue(context, "format-number(123456789, '$DDD,DDD,DDD.DD', 'test')", "$123,456,789"); [EOL] }
public void testFormatNumberFunction() { [EOL]     DecimalFormatSymbols symbols = new DecimalFormatSymbols(); [EOL]     symbols.setDigit('D'); [EOL]     context.setDecimalFormatSymbols("test", symbols); [EOL]     assertXPathValue(context, "format-number(123456789, '#.000000000')", "123456789.000000000"); [EOL]     assertXPathValue(context, "format-number(123456789, '#.0')", "123456789.0"); [EOL]     assertXPathValue(context, "format-number(0.123456789, '##%')", "12%"); [EOL]     assertXPathValue(context, "format-number(123456789, '################')", "123456789"); [EOL]     assertXPathValue(context, "format-number(123456789, 'D.0', 'test')", "123456789.0"); [EOL]     assertXPathValue(context, "format-number(123456789, '$DDD,DDD,DDD.DD', 'test')", "$123,456,789"); [EOL] }
public void testFormatNumberFunction() { [EOL]     DecimalFormatSymbols symbols = new DecimalFormatSymbols(); [EOL]     symbols.setDigit('D'); [EOL]     context.setDecimalFormatSymbols("test", symbols); [EOL]     assertXPathValue(context, "format-number(123456789, '#.000000000')", "123456789.000000000"); [EOL]     assertXPathValue(context, "format-number(123456789, '#.0')", "123456789.0"); [EOL]     assertXPathValue(context, "format-number(0.123456789, '##%')", "12%"); [EOL]     assertXPathValue(context, "format-number(123456789, '################')", "123456789"); [EOL]     assertXPathValue(context, "format-number(123456789, 'D.0', 'test')", "123456789.0"); [EOL]     assertXPathValue(context, "format-number(123456789, '$DDD,DDD,DDD.DD', 'test')", "$123,456,789"); [EOL] }
public void testFormatNumberFunction() { [EOL]     DecimalFormatSymbols symbols = new DecimalFormatSymbols(); [EOL]     symbols.setDigit('D'); [EOL]     context.setDecimalFormatSymbols("test", symbols); [EOL]     assertXPathValue(context, "format-number(123456789, '#.000000000')", "123456789.000000000"); [EOL]     assertXPathValue(context, "format-number(123456789, '#.0')", "123456789.0"); [EOL]     assertXPathValue(context, "format-number(0.123456789, '##%')", "12%"); [EOL]     assertXPathValue(context, "format-number(123456789, '################')", "123456789"); [EOL]     assertXPathValue(context, "format-number(123456789, 'D.0', 'test')", "123456789.0"); [EOL]     assertXPathValue(context, "format-number(123456789, '$DDD,DDD,DDD.DD', 'test')", "$123,456,789"); [EOL] }
public void testFormatNumberFunction() { [EOL]     DecimalFormatSymbols symbols = new DecimalFormatSymbols(); [EOL]     symbols.setDigit('D'); [EOL]     context.setDecimalFormatSymbols("test", symbols); [EOL]     assertXPathValue(context, "format-number(123456789, '#.000000000')", "123456789.000000000"); [EOL]     assertXPathValue(context, "format-number(123456789, '#.0')", "123456789.0"); [EOL]     assertXPathValue(context, "format-number(0.123456789, '##%')", "12%"); [EOL]     assertXPathValue(context, "format-number(123456789, '################')", "123456789"); [EOL]     assertXPathValue(context, "format-number(123456789, 'D.0', 'test')", "123456789.0"); [EOL]     assertXPathValue(context, "format-number(123456789, '$DDD,DDD,DDD.DD', 'test')", "$123,456,789"); [EOL] }
public void testFormatNumberFunction() { [EOL]     DecimalFormatSymbols symbols = new DecimalFormatSymbols(); [EOL]     symbols.setDigit('D'); [EOL]     context.setDecimalFormatSymbols("test", symbols); [EOL]     assertXPathValue(context, "format-number(123456789, '#.000000000')", "123456789.000000000"); [EOL]     assertXPathValue(context, "format-number(123456789, '#.0')", "123456789.0"); [EOL]     assertXPathValue(context, "format-number(0.123456789, '##%')", "12%"); [EOL]     assertXPathValue(context, "format-number(123456789, '################')", "123456789"); [EOL]     assertXPathValue(context, "format-number(123456789, 'D.0', 'test')", "123456789.0"); [EOL]     assertXPathValue(context, "format-number(123456789, '$DDD,DDD,DDD.DD', 'test')", "$123,456,789"); [EOL] }
public void testFormatNumberFunction() { [EOL]     DecimalFormatSymbols symbols = new DecimalFormatSymbols(); [EOL]     symbols.setDigit('D'); [EOL]     context.setDecimalFormatSymbols("test", symbols); [EOL]     assertXPathValue(context, "format-number(123456789, '#.000000000')", "123456789.000000000"); [EOL]     assertXPathValue(context, "format-number(123456789, '#.0')", "123456789.0"); [EOL]     assertXPathValue(context, "format-number(0.123456789, '##%')", "12%"); [EOL]     assertXPathValue(context, "format-number(123456789, '################')", "123456789"); [EOL]     assertXPathValue(context, "format-number(123456789, 'D.0', 'test')", "123456789.0"); [EOL]     assertXPathValue(context, "format-number(123456789, '$DDD,DDD,DDD.DD', 'test')", "$123,456,789"); [EOL] }
public void testFormatNumberFunction() { [EOL]     DecimalFormatSymbols symbols = new DecimalFormatSymbols(); [EOL]     symbols.setDigit('D'); [EOL]     context.setDecimalFormatSymbols("test", symbols); [EOL]     assertXPathValue(context, "format-number(123456789, '#.000000000')", "123456789.000000000"); [EOL]     assertXPathValue(context, "format-number(123456789, '#.0')", "123456789.0"); [EOL]     assertXPathValue(context, "format-number(0.123456789, '##%')", "12%"); [EOL]     assertXPathValue(context, "format-number(123456789, '################')", "123456789"); [EOL]     assertXPathValue(context, "format-number(123456789, 'D.0', 'test')", "123456789.0"); [EOL]     assertXPathValue(context, "format-number(123456789, '$DDD,DDD,DDD.DD', 'test')", "$123,456,789"); [EOL] }
public void testFormatNumberFunction() { [EOL]     DecimalFormatSymbols symbols = new DecimalFormatSymbols(); [EOL]     symbols.setDigit('D'); [EOL]     context.setDecimalFormatSymbols("test", symbols); [EOL]     assertXPathValue(context, "format-number(123456789, '#.000000000')", "123456789.000000000"); [EOL]     assertXPathValue(context, "format-number(123456789, '#.0')", "123456789.0"); [EOL]     assertXPathValue(context, "format-number(0.123456789, '##%')", "12%"); [EOL]     assertXPathValue(context, "format-number(123456789, '################')", "123456789"); [EOL]     assertXPathValue(context, "format-number(123456789, 'D.0', 'test')", "123456789.0"); [EOL]     assertXPathValue(context, "format-number(123456789, '$DDD,DDD,DDD.DD', 'test')", "$123,456,789"); [EOL] }
public void testAxisAttribute() { [EOL]     assertXPathValue(context, "vendor/location/@id", "100"); [EOL]     assertXPathPointer(context, "vendor/location/@id", "/vendor[1]/location[1]/@id"); [EOL]     assertXPathValueIterator(context, "vendor/location/@id", list("100", "101")); [EOL]     assertXPathValue(context, "vendor/product/price:amount/@price:discount", "10%"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount/@price:discount)", "priceNS"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount/@price:discount)", "discount"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount/@price:discount)", "price:discount"); [EOL]     assertXPathValue(context, "vendor/product/price:amount/@discount", "20%"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount/@discount)", ""); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount/@discount)", "discount"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount/@discount)", "discount"); [EOL]     assertXPathValueIterator(context, "vendor/product/price:amount/@price:*", list("10%")); [EOL]     assertXPathValueIterator(context, "vendor/location[1]/@*", set("100", "", "local")); [EOL]     assertXPathValueIterator(context, "vendor/product/price:amount/@*", list("20%")); [EOL]     assertXPathValue(context, "vendor/location/@manager", ""); [EOL]     assertXPathValueLenient(context, "vendor/location/@missing", null); [EOL]     assertXPathValueLenient(context, "vendor/location/@miss:missing", null); [EOL]     assertXPathValue(context, "vendor/location[@id='101']//street", "Tangerine Drive"); [EOL]     assertXPathValueIterator(context, "/vendor/location[1]/@*[name()!= 'manager']", list("100", "local")); [EOL] }
public void testAxisAttribute() { [EOL]     assertXPathValue(context, "vendor/location/@id", "100"); [EOL]     assertXPathPointer(context, "vendor/location/@id", "/vendor[1]/location[1]/@id"); [EOL]     assertXPathValueIterator(context, "vendor/location/@id", list("100", "101")); [EOL]     assertXPathValue(context, "vendor/product/price:amount/@price:discount", "10%"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount/@price:discount)", "priceNS"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount/@price:discount)", "discount"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount/@price:discount)", "price:discount"); [EOL]     assertXPathValue(context, "vendor/product/price:amount/@discount", "20%"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount/@discount)", ""); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount/@discount)", "discount"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount/@discount)", "discount"); [EOL]     assertXPathValueIterator(context, "vendor/product/price:amount/@price:*", list("10%")); [EOL]     assertXPathValueIterator(context, "vendor/location[1]/@*", set("100", "", "local")); [EOL]     assertXPathValueIterator(context, "vendor/product/price:amount/@*", list("20%")); [EOL]     assertXPathValue(context, "vendor/location/@manager", ""); [EOL]     assertXPathValueLenient(context, "vendor/location/@missing", null); [EOL]     assertXPathValueLenient(context, "vendor/location/@miss:missing", null); [EOL]     assertXPathValue(context, "vendor/location[@id='101']//street", "Tangerine Drive"); [EOL]     assertXPathValueIterator(context, "/vendor/location[1]/@*[name()!= 'manager']", list("100", "local")); [EOL] }
public void testAxisAttribute() { [EOL]     assertXPathValue(context, "vendor/location/@id", "100"); [EOL]     assertXPathPointer(context, "vendor/location/@id", "/vendor[1]/location[1]/@id"); [EOL]     assertXPathValueIterator(context, "vendor/location/@id", list("100", "101")); [EOL]     assertXPathValue(context, "vendor/product/price:amount/@price:discount", "10%"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount/@price:discount)", "priceNS"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount/@price:discount)", "discount"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount/@price:discount)", "price:discount"); [EOL]     assertXPathValue(context, "vendor/product/price:amount/@discount", "20%"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount/@discount)", ""); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount/@discount)", "discount"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount/@discount)", "discount"); [EOL]     assertXPathValueIterator(context, "vendor/product/price:amount/@price:*", list("10%")); [EOL]     assertXPathValueIterator(context, "vendor/location[1]/@*", set("100", "", "local")); [EOL]     assertXPathValueIterator(context, "vendor/product/price:amount/@*", list("20%")); [EOL]     assertXPathValue(context, "vendor/location/@manager", ""); [EOL]     assertXPathValueLenient(context, "vendor/location/@missing", null); [EOL]     assertXPathValueLenient(context, "vendor/location/@miss:missing", null); [EOL]     assertXPathValue(context, "vendor/location[@id='101']//street", "Tangerine Drive"); [EOL]     assertXPathValueIterator(context, "/vendor/location[1]/@*[name()!= 'manager']", list("100", "local")); [EOL] }
public void testFormatNumberFunction() { [EOL]     DecimalFormatSymbols symbols = new DecimalFormatSymbols(); [EOL]     symbols.setDigit('D'); [EOL]     context.setDecimalFormatSymbols("test", symbols); [EOL]     assertXPathValue(context, "format-number(123456789, '#.000000000')", "123456789.000000000"); [EOL]     assertXPathValue(context, "format-number(123456789, '#.0')", "123456789.0"); [EOL]     assertXPathValue(context, "format-number(0.123456789, '##%')", "12%"); [EOL]     assertXPathValue(context, "format-number(123456789, '################')", "123456789"); [EOL]     assertXPathValue(context, "format-number(123456789, 'D.0', 'test')", "123456789.0"); [EOL]     assertXPathValue(context, "format-number(123456789, '$DDD,DDD,DDD.DD', 'test')", "$123,456,789"); [EOL] }
public void testFormatNumberFunction() { [EOL]     DecimalFormatSymbols symbols = new DecimalFormatSymbols(); [EOL]     symbols.setDigit('D'); [EOL]     context.setDecimalFormatSymbols("test", symbols); [EOL]     assertXPathValue(context, "format-number(123456789, '#.000000000')", "123456789.000000000"); [EOL]     assertXPathValue(context, "format-number(123456789, '#.0')", "123456789.0"); [EOL]     assertXPathValue(context, "format-number(0.123456789, '##%')", "12%"); [EOL]     assertXPathValue(context, "format-number(123456789, '################')", "123456789"); [EOL]     assertXPathValue(context, "format-number(123456789, 'D.0', 'test')", "123456789.0"); [EOL]     assertXPathValue(context, "format-number(123456789, '$DDD,DDD,DDD.DD', 'test')", "$123,456,789"); [EOL] }
public void testFormatNumberFunction() { [EOL]     DecimalFormatSymbols symbols = new DecimalFormatSymbols(); [EOL]     symbols.setDigit('D'); [EOL]     context.setDecimalFormatSymbols("test", symbols); [EOL]     assertXPathValue(context, "format-number(123456789, '#.000000000')", "123456789.000000000"); [EOL]     assertXPathValue(context, "format-number(123456789, '#.0')", "123456789.0"); [EOL]     assertXPathValue(context, "format-number(0.123456789, '##%')", "12%"); [EOL]     assertXPathValue(context, "format-number(123456789, '################')", "123456789"); [EOL]     assertXPathValue(context, "format-number(123456789, 'D.0', 'test')", "123456789.0"); [EOL]     assertXPathValue(context, "format-number(123456789, '$DDD,DDD,DDD.DD', 'test')", "$123,456,789"); [EOL] }
public void testFormatNumberFunction() { [EOL]     DecimalFormatSymbols symbols = new DecimalFormatSymbols(); [EOL]     symbols.setDigit('D'); [EOL]     context.setDecimalFormatSymbols("test", symbols); [EOL]     assertXPathValue(context, "format-number(123456789, '#.000000000')", "123456789.000000000"); [EOL]     assertXPathValue(context, "format-number(123456789, '#.0')", "123456789.0"); [EOL]     assertXPathValue(context, "format-number(0.123456789, '##%')", "12%"); [EOL]     assertXPathValue(context, "format-number(123456789, '################')", "123456789"); [EOL]     assertXPathValue(context, "format-number(123456789, 'D.0', 'test')", "123456789.0"); [EOL]     assertXPathValue(context, "format-number(123456789, '$DDD,DDD,DDD.DD', 'test')", "$123,456,789"); [EOL] }
public void testNamespaceMapping() { [EOL]     context.registerNamespace("rate", "priceNS"); [EOL]     context.registerNamespace("goods", "productNS"); [EOL]     assertEquals("Context node namespace resolution", "priceNS", context.getNamespaceURI("price")); [EOL]     assertEquals("Registered namespace resolution", "priceNS", context.getNamespaceURI("rate")); [EOL]     assertXPathValue(context, "count(vendor/product/rate:*)", new Double(2)); [EOL]     assertXPathValueAndPointer(context, "//product:name", "Box of oranges", "/vendor[1]/product[1]/goods:name[1]"); [EOL]     JXPathContext childCtx = JXPathContext.newContext(context, context.getContextBean()); [EOL]     assertXPathValueAndPointer(childCtx, "//product:name", "Box of oranges", "/vendor[1]/product[1]/goods:name[1]"); [EOL]     JXPathContext relativeCtx = context.getRelativeContext(context.getPointer("/vendor")); [EOL]     assertXPathValueAndPointer(relativeCtx, "product/product:name", "Box of oranges", "/vendor[1]/product[1]/goods:name[1]"); [EOL] }
public void testNamespaceMapping() { [EOL]     context.registerNamespace("rate", "priceNS"); [EOL]     context.registerNamespace("goods", "productNS"); [EOL]     assertEquals("Context node namespace resolution", "priceNS", context.getNamespaceURI("price")); [EOL]     assertEquals("Registered namespace resolution", "priceNS", context.getNamespaceURI("rate")); [EOL]     assertXPathValue(context, "count(vendor/product/rate:*)", new Double(2)); [EOL]     assertXPathValueAndPointer(context, "//product:name", "Box of oranges", "/vendor[1]/product[1]/goods:name[1]"); [EOL]     JXPathContext childCtx = JXPathContext.newContext(context, context.getContextBean()); [EOL]     assertXPathValueAndPointer(childCtx, "//product:name", "Box of oranges", "/vendor[1]/product[1]/goods:name[1]"); [EOL]     JXPathContext relativeCtx = context.getRelativeContext(context.getPointer("/vendor")); [EOL]     assertXPathValueAndPointer(relativeCtx, "product/product:name", "Box of oranges", "/vendor[1]/product[1]/goods:name[1]"); [EOL] }
public void testNamespaceMapping() { [EOL]     context.registerNamespace("rate", "priceNS"); [EOL]     context.registerNamespace("goods", "productNS"); [EOL]     assertEquals("Context node namespace resolution", "priceNS", context.getNamespaceURI("price")); [EOL]     assertEquals("Registered namespace resolution", "priceNS", context.getNamespaceURI("rate")); [EOL]     assertXPathValue(context, "count(vendor/product/rate:*)", new Double(2)); [EOL]     assertXPathValueAndPointer(context, "//product:name", "Box of oranges", "/vendor[1]/product[1]/goods:name[1]"); [EOL]     JXPathContext childCtx = JXPathContext.newContext(context, context.getContextBean()); [EOL]     assertXPathValueAndPointer(childCtx, "//product:name", "Box of oranges", "/vendor[1]/product[1]/goods:name[1]"); [EOL]     JXPathContext relativeCtx = context.getRelativeContext(context.getPointer("/vendor")); [EOL]     assertXPathValueAndPointer(relativeCtx, "product/product:name", "Box of oranges", "/vendor[1]/product[1]/goods:name[1]"); [EOL] }
public void testNamespaceMapping() { [EOL]     context.registerNamespace("rate", "priceNS"); [EOL]     context.registerNamespace("goods", "productNS"); [EOL]     assertEquals("Context node namespace resolution", "priceNS", context.getNamespaceURI("price")); [EOL]     assertEquals("Registered namespace resolution", "priceNS", context.getNamespaceURI("rate")); [EOL]     assertXPathValue(context, "count(vendor/product/rate:*)", new Double(2)); [EOL]     assertXPathValueAndPointer(context, "//product:name", "Box of oranges", "/vendor[1]/product[1]/goods:name[1]"); [EOL]     JXPathContext childCtx = JXPathContext.newContext(context, context.getContextBean()); [EOL]     assertXPathValueAndPointer(childCtx, "//product:name", "Box of oranges", "/vendor[1]/product[1]/goods:name[1]"); [EOL]     JXPathContext relativeCtx = context.getRelativeContext(context.getPointer("/vendor")); [EOL]     assertXPathValueAndPointer(relativeCtx, "product/product:name", "Box of oranges", "/vendor[1]/product[1]/goods:name[1]"); [EOL] }
public void testNamespaceMapping() { [EOL]     context.registerNamespace("rate", "priceNS"); [EOL]     context.registerNamespace("goods", "productNS"); [EOL]     assertEquals("Context node namespace resolution", "priceNS", context.getNamespaceURI("price")); [EOL]     assertEquals("Registered namespace resolution", "priceNS", context.getNamespaceURI("rate")); [EOL]     assertXPathValue(context, "count(vendor/product/rate:*)", new Double(2)); [EOL]     assertXPathValueAndPointer(context, "//product:name", "Box of oranges", "/vendor[1]/product[1]/goods:name[1]"); [EOL]     JXPathContext childCtx = JXPathContext.newContext(context, context.getContextBean()); [EOL]     assertXPathValueAndPointer(childCtx, "//product:name", "Box of oranges", "/vendor[1]/product[1]/goods:name[1]"); [EOL]     JXPathContext relativeCtx = context.getRelativeContext(context.getPointer("/vendor")); [EOL]     assertXPathValueAndPointer(relativeCtx, "product/product:name", "Box of oranges", "/vendor[1]/product[1]/goods:name[1]"); [EOL] }
public void testNamespaceMapping() { [EOL]     context.registerNamespace("rate", "priceNS"); [EOL]     context.registerNamespace("goods", "productNS"); [EOL]     assertEquals("Context node namespace resolution", "priceNS", context.getNamespaceURI("price")); [EOL]     assertEquals("Registered namespace resolution", "priceNS", context.getNamespaceURI("rate")); [EOL]     assertXPathValue(context, "count(vendor/product/rate:*)", new Double(2)); [EOL]     assertXPathValueAndPointer(context, "//product:name", "Box of oranges", "/vendor[1]/product[1]/goods:name[1]"); [EOL]     JXPathContext childCtx = JXPathContext.newContext(context, context.getContextBean()); [EOL]     assertXPathValueAndPointer(childCtx, "//product:name", "Box of oranges", "/vendor[1]/product[1]/goods:name[1]"); [EOL]     JXPathContext relativeCtx = context.getRelativeContext(context.getPointer("/vendor")); [EOL]     assertXPathValueAndPointer(relativeCtx, "product/product:name", "Box of oranges", "/vendor[1]/product[1]/goods:name[1]"); [EOL] }
public void testNamespaceMapping() { [EOL]     context.registerNamespace("rate", "priceNS"); [EOL]     context.registerNamespace("goods", "productNS"); [EOL]     assertEquals("Context node namespace resolution", "priceNS", context.getNamespaceURI("price")); [EOL]     assertEquals("Registered namespace resolution", "priceNS", context.getNamespaceURI("rate")); [EOL]     assertXPathValue(context, "count(vendor/product/rate:*)", new Double(2)); [EOL]     assertXPathValueAndPointer(context, "//product:name", "Box of oranges", "/vendor[1]/product[1]/goods:name[1]"); [EOL]     JXPathContext childCtx = JXPathContext.newContext(context, context.getContextBean()); [EOL]     assertXPathValueAndPointer(childCtx, "//product:name", "Box of oranges", "/vendor[1]/product[1]/goods:name[1]"); [EOL]     JXPathContext relativeCtx = context.getRelativeContext(context.getPointer("/vendor")); [EOL]     assertXPathValueAndPointer(relativeCtx, "product/product:name", "Box of oranges", "/vendor[1]/product[1]/goods:name[1]"); [EOL] }
public void testAxisParent() { [EOL]     assertXPathPointer(context, "//street/..", "/vendor[1]/location[1]/address[1]"); [EOL]     assertXPathPointerIterator(context, "//street/..", list("/vendor[1]/location[2]/address[1]", "/vendor[1]/location[1]/address[1]")); [EOL]     assertXPathValue(context, "vendor/product/price:sale/saleEnds/parent::price:*" + "/saleEnds", "never"); [EOL] }
public void testAxisParent() { [EOL]     assertXPathPointer(context, "//street/..", "/vendor[1]/location[1]/address[1]"); [EOL]     assertXPathPointerIterator(context, "//street/..", list("/vendor[1]/location[2]/address[1]", "/vendor[1]/location[1]/address[1]")); [EOL]     assertXPathValue(context, "vendor/product/price:sale/saleEnds/parent::price:*" + "/saleEnds", "never"); [EOL] }
public void testNodeTypeComment() { [EOL]     assertXPathValue(context, "//product/comment()", "We are not buying this product, ever"); [EOL] }
public void testNodeTypeComment() { [EOL]     assertXPathValue(context, "//product/comment()", "We are not buying this product, ever"); [EOL] }
public void testNodeTypeComment() { [EOL]     assertXPathValue(context, "//product/comment()", "We are not buying this product, ever"); [EOL] }
public void testNodeTypeComment() { [EOL]     assertXPathValue(context, "//product/comment()", "We are not buying this product, ever"); [EOL] }
public void testNodeTypeComment() { [EOL]     assertXPathValue(context, "//product/comment()", "We are not buying this product, ever"); [EOL] }
public void testNodeTypeComment() { [EOL]     assertXPathValue(context, "//product/comment()", "We are not buying this product, ever"); [EOL] }
public void testNodeTypeComment() { [EOL]     assertXPathValue(context, "//product/comment()", "We are not buying this product, ever"); [EOL] }
public void testNodeTypeComment() { [EOL]     assertXPathValue(context, "//product/comment()", "We are not buying this product, ever"); [EOL] }
public void testNodeTypeComment() { [EOL]     assertXPathValue(context, "//product/comment()", "We are not buying this product, ever"); [EOL] }
public void testNodeTypeComment() { [EOL]     assertXPathValue(context, "//product/comment()", "We are not buying this product, ever"); [EOL] }
public void testNodeTypeComment() { [EOL]     assertXPathValue(context, "//product/comment()", "We are not buying this product, ever"); [EOL] }
public void testNodeTypeComment() { [EOL]     assertXPathValue(context, "//product/comment()", "We are not buying this product, ever"); [EOL] }
public void testNodeTypeComment() { [EOL]     assertXPathValue(context, "//product/comment()", "We are not buying this product, ever"); [EOL] }
public void testNodeTypeComment() { [EOL]     assertXPathValue(context, "//product/comment()", "We are not buying this product, ever"); [EOL] }
public void testNodeTypeComment() { [EOL]     assertXPathValue(context, "//product/comment()", "We are not buying this product, ever"); [EOL] }
public void testNodeTypeComment() { [EOL]     assertXPathValue(context, "//product/comment()", "We are not buying this product, ever"); [EOL] }
public void testNodeTypeComment() { [EOL]     assertXPathValue(context, "//product/comment()", "We are not buying this product, ever"); [EOL] }
public void testNodeTypeComment() { [EOL]     assertXPathValue(context, "//product/comment()", "We are not buying this product, ever"); [EOL] }
public void testAxisParent() { [EOL]     assertXPathPointer(context, "//street/..", "/vendor[1]/location[1]/address[1]"); [EOL]     assertXPathPointerIterator(context, "//street/..", list("/vendor[1]/location[2]/address[1]", "/vendor[1]/location[1]/address[1]")); [EOL]     assertXPathValue(context, "vendor/product/price:sale/saleEnds/parent::price:*" + "/saleEnds", "never"); [EOL] }
public void testAxisParent() { [EOL]     assertXPathPointer(context, "//street/..", "/vendor[1]/location[1]/address[1]"); [EOL]     assertXPathPointerIterator(context, "//street/..", list("/vendor[1]/location[2]/address[1]", "/vendor[1]/location[1]/address[1]")); [EOL]     assertXPathValue(context, "vendor/product/price:sale/saleEnds/parent::price:*" + "/saleEnds", "never"); [EOL] }
public void testInvalidConversion() { [EOL]     boolean exception = false; [EOL]     try { [EOL]         TypeUtils.convert("'foo'", Date.class); [EOL]     } catch (Throwable ex) { [EOL]         exception = true; [EOL]     } [EOL]     assertTrue("Type conversion exception", exception); [EOL] }
public void testAttributeName() { [EOL]     assertXPathValue(context, "map[@name = 'Key1']", "Value 1"); [EOL]     assertXPathPointer(context, "map[@name = 'Key1']", "/map[@name='Key1']"); [EOL]     assertXPathPointerLenient(context, "map[@name = 'Key&quot;&apos;&quot;&apos;1']", "/map[@name='Key&quot;&apos;&quot;&apos;1']"); [EOL]     assertXPathValue(context, "/.[@name='map']/Key2/name", "Name 6"); [EOL]     assertXPathPointer(context, "/.[@name='map']/Key2/name", "/map[@name='Key2']/name"); [EOL]     assertXPathValue(context, "/map[@name='Key2'][@name='name']", "Name 6"); [EOL]     assertXPathPointer(context, "/map[@name='Key2'][@name='name']", "/map[@name='Key2']/name"); [EOL]     assertXPathValue(context, "/.[@name='map'][@name='Key2'][@name='name']", "Name 6"); [EOL]     assertXPathPointer(context, "/.[@name='map'][@name='Key2'][@name='name']", "/map[@name='Key2']/name"); [EOL]     ((Map) context.getValue("map")).put("Key:3", "value3"); [EOL]     assertXPathValueAndPointer(context, "/map[@name='Key:3']", "value3", "/map[@name='Key:3']"); [EOL]     assertXPathValueAndPointer(context, "/map[@name='Key:4:5']", null, "/map[@name='Key:4:5']"); [EOL] }
public void testAttributeName() { [EOL]     assertXPathValue(context, "map[@name = 'Key1']", "Value 1"); [EOL]     assertXPathPointer(context, "map[@name = 'Key1']", "/map[@name='Key1']"); [EOL]     assertXPathPointerLenient(context, "map[@name = 'Key&quot;&apos;&quot;&apos;1']", "/map[@name='Key&quot;&apos;&quot;&apos;1']"); [EOL]     assertXPathValue(context, "/.[@name='map']/Key2/name", "Name 6"); [EOL]     assertXPathPointer(context, "/.[@name='map']/Key2/name", "/map[@name='Key2']/name"); [EOL]     assertXPathValue(context, "/map[@name='Key2'][@name='name']", "Name 6"); [EOL]     assertXPathPointer(context, "/map[@name='Key2'][@name='name']", "/map[@name='Key2']/name"); [EOL]     assertXPathValue(context, "/.[@name='map'][@name='Key2'][@name='name']", "Name 6"); [EOL]     assertXPathPointer(context, "/.[@name='map'][@name='Key2'][@name='name']", "/map[@name='Key2']/name"); [EOL]     ((Map) context.getValue("map")).put("Key:3", "value3"); [EOL]     assertXPathValueAndPointer(context, "/map[@name='Key:3']", "value3", "/map[@name='Key:3']"); [EOL]     assertXPathValueAndPointer(context, "/map[@name='Key:4:5']", null, "/map[@name='Key:4:5']"); [EOL] }
public void testAttributeName() { [EOL]     assertXPathValue(context, "map[@name = 'Key1']", "Value 1"); [EOL]     assertXPathPointer(context, "map[@name = 'Key1']", "/map[@name='Key1']"); [EOL]     assertXPathPointerLenient(context, "map[@name = 'Key&quot;&apos;&quot;&apos;1']", "/map[@name='Key&quot;&apos;&quot;&apos;1']"); [EOL]     assertXPathValue(context, "/.[@name='map']/Key2/name", "Name 6"); [EOL]     assertXPathPointer(context, "/.[@name='map']/Key2/name", "/map[@name='Key2']/name"); [EOL]     assertXPathValue(context, "/map[@name='Key2'][@name='name']", "Name 6"); [EOL]     assertXPathPointer(context, "/map[@name='Key2'][@name='name']", "/map[@name='Key2']/name"); [EOL]     assertXPathValue(context, "/.[@name='map'][@name='Key2'][@name='name']", "Name 6"); [EOL]     assertXPathPointer(context, "/.[@name='map'][@name='Key2'][@name='name']", "/map[@name='Key2']/name"); [EOL]     ((Map) context.getValue("map")).put("Key:3", "value3"); [EOL]     assertXPathValueAndPointer(context, "/map[@name='Key:3']", "value3", "/map[@name='Key:3']"); [EOL]     assertXPathValueAndPointer(context, "/map[@name='Key:4:5']", null, "/map[@name='Key:4:5']"); [EOL] }
public void testAttributeName() { [EOL]     assertXPathValue(context, "map[@name = 'Key1']", "Value 1"); [EOL]     assertXPathPointer(context, "map[@name = 'Key1']", "/map[@name='Key1']"); [EOL]     assertXPathPointerLenient(context, "map[@name = 'Key&quot;&apos;&quot;&apos;1']", "/map[@name='Key&quot;&apos;&quot;&apos;1']"); [EOL]     assertXPathValue(context, "/.[@name='map']/Key2/name", "Name 6"); [EOL]     assertXPathPointer(context, "/.[@name='map']/Key2/name", "/map[@name='Key2']/name"); [EOL]     assertXPathValue(context, "/map[@name='Key2'][@name='name']", "Name 6"); [EOL]     assertXPathPointer(context, "/map[@name='Key2'][@name='name']", "/map[@name='Key2']/name"); [EOL]     assertXPathValue(context, "/.[@name='map'][@name='Key2'][@name='name']", "Name 6"); [EOL]     assertXPathPointer(context, "/.[@name='map'][@name='Key2'][@name='name']", "/map[@name='Key2']/name"); [EOL]     ((Map) context.getValue("map")).put("Key:3", "value3"); [EOL]     assertXPathValueAndPointer(context, "/map[@name='Key:3']", "value3", "/map[@name='Key:3']"); [EOL]     assertXPathValueAndPointer(context, "/map[@name='Key:4:5']", null, "/map[@name='Key:4:5']"); [EOL] }
public void testAttributeName() { [EOL]     assertXPathValue(context, "map[@name = 'Key1']", "Value 1"); [EOL]     assertXPathPointer(context, "map[@name = 'Key1']", "/map[@name='Key1']"); [EOL]     assertXPathPointerLenient(context, "map[@name = 'Key&quot;&apos;&quot;&apos;1']", "/map[@name='Key&quot;&apos;&quot;&apos;1']"); [EOL]     assertXPathValue(context, "/.[@name='map']/Key2/name", "Name 6"); [EOL]     assertXPathPointer(context, "/.[@name='map']/Key2/name", "/map[@name='Key2']/name"); [EOL]     assertXPathValue(context, "/map[@name='Key2'][@name='name']", "Name 6"); [EOL]     assertXPathPointer(context, "/map[@name='Key2'][@name='name']", "/map[@name='Key2']/name"); [EOL]     assertXPathValue(context, "/.[@name='map'][@name='Key2'][@name='name']", "Name 6"); [EOL]     assertXPathPointer(context, "/.[@name='map'][@name='Key2'][@name='name']", "/map[@name='Key2']/name"); [EOL]     ((Map) context.getValue("map")).put("Key:3", "value3"); [EOL]     assertXPathValueAndPointer(context, "/map[@name='Key:3']", "value3", "/map[@name='Key:3']"); [EOL]     assertXPathValueAndPointer(context, "/map[@name='Key:4:5']", null, "/map[@name='Key:4:5']"); [EOL] }
public void testAttributeName() { [EOL]     assertXPathValue(context, "map[@name = 'Key1']", "Value 1"); [EOL]     assertXPathPointer(context, "map[@name = 'Key1']", "/map[@name='Key1']"); [EOL]     assertXPathPointerLenient(context, "map[@name = 'Key&quot;&apos;&quot;&apos;1']", "/map[@name='Key&quot;&apos;&quot;&apos;1']"); [EOL]     assertXPathValue(context, "/.[@name='map']/Key2/name", "Name 6"); [EOL]     assertXPathPointer(context, "/.[@name='map']/Key2/name", "/map[@name='Key2']/name"); [EOL]     assertXPathValue(context, "/map[@name='Key2'][@name='name']", "Name 6"); [EOL]     assertXPathPointer(context, "/map[@name='Key2'][@name='name']", "/map[@name='Key2']/name"); [EOL]     assertXPathValue(context, "/.[@name='map'][@name='Key2'][@name='name']", "Name 6"); [EOL]     assertXPathPointer(context, "/.[@name='map'][@name='Key2'][@name='name']", "/map[@name='Key2']/name"); [EOL]     ((Map) context.getValue("map")).put("Key:3", "value3"); [EOL]     assertXPathValueAndPointer(context, "/map[@name='Key:3']", "value3", "/map[@name='Key:3']"); [EOL]     assertXPathValueAndPointer(context, "/map[@name='Key:4:5']", null, "/map[@name='Key:4:5']"); [EOL] }
public void testDocumentOrder() { [EOL]     assertDocumentOrder(context, "vendor/location", "vendor/location/address/street", -1); [EOL]     assertDocumentOrder(context, "vendor/location[@id = '100']", "vendor/location[@id = '101']", -1); [EOL]     assertDocumentOrder(context, "vendor//price:amount", "vendor/location", 1); [EOL] }
public void testDocumentOrder() { [EOL]     assertDocumentOrder(context, "vendor/location", "vendor/location/address/street", -1); [EOL]     assertDocumentOrder(context, "vendor/location[@id = '100']", "vendor/location[@id = '101']", -1); [EOL]     assertDocumentOrder(context, "vendor//price:amount", "vendor/location", 1); [EOL] }
public void testDocumentOrder() { [EOL]     assertDocumentOrder(context, "vendor/location", "vendor/location/address/street", -1); [EOL]     assertDocumentOrder(context, "vendor/location[@id = '100']", "vendor/location[@id = '101']", -1); [EOL]     assertDocumentOrder(context, "vendor//price:amount", "vendor/location", 1); [EOL] }
public void testDocumentOrder() { [EOL]     assertDocumentOrder(context, "vendor/location", "vendor/location/address/street", -1); [EOL]     assertDocumentOrder(context, "vendor/location[@id = '100']", "vendor/location[@id = '101']", -1); [EOL]     assertDocumentOrder(context, "vendor//price:amount", "vendor/location", 1); [EOL] }
public void testDocumentOrder() { [EOL]     assertDocumentOrder(context, "vendor/location", "vendor/location/address/street", -1); [EOL]     assertDocumentOrder(context, "vendor/location[@id = '100']", "vendor/location[@id = '101']", -1); [EOL]     assertDocumentOrder(context, "vendor//price:amount", "vendor/location", 1); [EOL] }
public void testDocumentOrder() { [EOL]     assertDocumentOrder(context, "vendor/location", "vendor/location/address/street", -1); [EOL]     assertDocumentOrder(context, "vendor/location[@id = '100']", "vendor/location[@id = '101']", -1); [EOL]     assertDocumentOrder(context, "vendor//price:amount", "vendor/location", 1); [EOL] }
public void testDocumentOrder() { [EOL]     assertDocumentOrder(context, "vendor/location", "vendor/location/address/street", -1); [EOL]     assertDocumentOrder(context, "vendor/location[@id = '100']", "vendor/location[@id = '101']", -1); [EOL]     assertDocumentOrder(context, "vendor//price:amount", "vendor/location", 1); [EOL] }
public void testStaticMethodCall() { [EOL]     assertXPathValue(context, "string(test:build(8, 'goober'))", "foo=8; bar=goober"); [EOL]     assertXPathValue(context, "string(jxpathtest:TestFunctions.build(8, 'goober'))", "foo=8; bar=goober"); [EOL]     assertXPathValue(context, "string(" + TestFunctions.class.getName() + ".build(8, 'goober'))", "foo=8; bar=goober"); [EOL]     assertXPathValue(context, "string(test:increment(8))", "9"); [EOL]     assertXPathValue(context, "test:string(/beans/name)", "Name 1"); [EOL] }
public void testStaticMethodCall() { [EOL]     assertXPathValue(context, "string(test:build(8, 'goober'))", "foo=8; bar=goober"); [EOL]     assertXPathValue(context, "string(jxpathtest:TestFunctions.build(8, 'goober'))", "foo=8; bar=goober"); [EOL]     assertXPathValue(context, "string(" + TestFunctions.class.getName() + ".build(8, 'goober'))", "foo=8; bar=goober"); [EOL]     assertXPathValue(context, "string(test:increment(8))", "9"); [EOL]     assertXPathValue(context, "test:string(/beans/name)", "Name 1"); [EOL] }
public void testStaticMethodCall() { [EOL]     assertXPathValue(context, "string(test:build(8, 'goober'))", "foo=8; bar=goober"); [EOL]     assertXPathValue(context, "string(jxpathtest:TestFunctions.build(8, 'goober'))", "foo=8; bar=goober"); [EOL]     assertXPathValue(context, "string(" + TestFunctions.class.getName() + ".build(8, 'goober'))", "foo=8; bar=goober"); [EOL]     assertXPathValue(context, "string(test:increment(8))", "9"); [EOL]     assertXPathValue(context, "test:string(/beans/name)", "Name 1"); [EOL] }
public void testStaticMethodCall() { [EOL]     assertXPathValue(context, "string(test:build(8, 'goober'))", "foo=8; bar=goober"); [EOL]     assertXPathValue(context, "string(jxpathtest:TestFunctions.build(8, 'goober'))", "foo=8; bar=goober"); [EOL]     assertXPathValue(context, "string(" + TestFunctions.class.getName() + ".build(8, 'goober'))", "foo=8; bar=goober"); [EOL]     assertXPathValue(context, "string(test:increment(8))", "9"); [EOL]     assertXPathValue(context, "test:string(/beans/name)", "Name 1"); [EOL] }
public void testStaticMethodCall() { [EOL]     assertXPathValue(context, "string(test:build(8, 'goober'))", "foo=8; bar=goober"); [EOL]     assertXPathValue(context, "string(jxpathtest:TestFunctions.build(8, 'goober'))", "foo=8; bar=goober"); [EOL]     assertXPathValue(context, "string(" + TestFunctions.class.getName() + ".build(8, 'goober'))", "foo=8; bar=goober"); [EOL]     assertXPathValue(context, "string(test:increment(8))", "9"); [EOL]     assertXPathValue(context, "test:string(/beans/name)", "Name 1"); [EOL] }
public void testStaticMethodCall() { [EOL]     assertXPathValue(context, "string(test:build(8, 'goober'))", "foo=8; bar=goober"); [EOL]     assertXPathValue(context, "string(jxpathtest:TestFunctions.build(8, 'goober'))", "foo=8; bar=goober"); [EOL]     assertXPathValue(context, "string(" + TestFunctions.class.getName() + ".build(8, 'goober'))", "foo=8; bar=goober"); [EOL]     assertXPathValue(context, "string(test:increment(8))", "9"); [EOL]     assertXPathValue(context, "test:string(/beans/name)", "Name 1"); [EOL] }
public void testStaticMethodCall() { [EOL]     assertXPathValue(context, "string(test:build(8, 'goober'))", "foo=8; bar=goober"); [EOL]     assertXPathValue(context, "string(jxpathtest:TestFunctions.build(8, 'goober'))", "foo=8; bar=goober"); [EOL]     assertXPathValue(context, "string(" + TestFunctions.class.getName() + ".build(8, 'goober'))", "foo=8; bar=goober"); [EOL]     assertXPathValue(context, "string(test:increment(8))", "9"); [EOL]     assertXPathValue(context, "test:string(/beans/name)", "Name 1"); [EOL] }
public void testStaticMethodCall() { [EOL]     assertXPathValue(context, "string(test:build(8, 'goober'))", "foo=8; bar=goober"); [EOL]     assertXPathValue(context, "string(jxpathtest:TestFunctions.build(8, 'goober'))", "foo=8; bar=goober"); [EOL]     assertXPathValue(context, "string(" + TestFunctions.class.getName() + ".build(8, 'goober'))", "foo=8; bar=goober"); [EOL]     assertXPathValue(context, "string(test:increment(8))", "9"); [EOL]     assertXPathValue(context, "test:string(/beans/name)", "Name 1"); [EOL] }
public void testStaticMethodCall() { [EOL]     assertXPathValue(context, "string(test:build(8, 'goober'))", "foo=8; bar=goober"); [EOL]     assertXPathValue(context, "string(jxpathtest:TestFunctions.build(8, 'goober'))", "foo=8; bar=goober"); [EOL]     assertXPathValue(context, "string(" + TestFunctions.class.getName() + ".build(8, 'goober'))", "foo=8; bar=goober"); [EOL]     assertXPathValue(context, "string(test:increment(8))", "9"); [EOL]     assertXPathValue(context, "test:string(/beans/name)", "Name 1"); [EOL] }
public void testStaticMethodCall() { [EOL]     assertXPathValue(context, "string(test:build(8, 'goober'))", "foo=8; bar=goober"); [EOL]     assertXPathValue(context, "string(jxpathtest:TestFunctions.build(8, 'goober'))", "foo=8; bar=goober"); [EOL]     assertXPathValue(context, "string(" + TestFunctions.class.getName() + ".build(8, 'goober'))", "foo=8; bar=goober"); [EOL]     assertXPathValue(context, "string(test:increment(8))", "9"); [EOL]     assertXPathValue(context, "test:string(/beans/name)", "Name 1"); [EOL] }
public void testStaticMethodCall() { [EOL]     assertXPathValue(context, "string(test:build(8, 'goober'))", "foo=8; bar=goober"); [EOL]     assertXPathValue(context, "string(jxpathtest:TestFunctions.build(8, 'goober'))", "foo=8; bar=goober"); [EOL]     assertXPathValue(context, "string(" + TestFunctions.class.getName() + ".build(8, 'goober'))", "foo=8; bar=goober"); [EOL]     assertXPathValue(context, "string(test:increment(8))", "9"); [EOL]     assertXPathValue(context, "test:string(/beans/name)", "Name 1"); [EOL] }
public void testStaticMethodCall() { [EOL]     assertXPathValue(context, "string(test:build(8, 'goober'))", "foo=8; bar=goober"); [EOL]     assertXPathValue(context, "string(jxpathtest:TestFunctions.build(8, 'goober'))", "foo=8; bar=goober"); [EOL]     assertXPathValue(context, "string(" + TestFunctions.class.getName() + ".build(8, 'goober'))", "foo=8; bar=goober"); [EOL]     assertXPathValue(context, "string(test:increment(8))", "9"); [EOL]     assertXPathValue(context, "test:string(/beans/name)", "Name 1"); [EOL] }
public void testStaticMethodCall() { [EOL]     assertXPathValue(context, "string(test:build(8, 'goober'))", "foo=8; bar=goober"); [EOL]     assertXPathValue(context, "string(jxpathtest:TestFunctions.build(8, 'goober'))", "foo=8; bar=goober"); [EOL]     assertXPathValue(context, "string(" + TestFunctions.class.getName() + ".build(8, 'goober'))", "foo=8; bar=goober"); [EOL]     assertXPathValue(context, "string(test:increment(8))", "9"); [EOL]     assertXPathValue(context, "test:string(/beans/name)", "Name 1"); [EOL] }
public void testStaticMethodCall() { [EOL]     assertXPathValue(context, "string(test:build(8, 'goober'))", "foo=8; bar=goober"); [EOL]     assertXPathValue(context, "string(jxpathtest:TestFunctions.build(8, 'goober'))", "foo=8; bar=goober"); [EOL]     assertXPathValue(context, "string(" + TestFunctions.class.getName() + ".build(8, 'goober'))", "foo=8; bar=goober"); [EOL]     assertXPathValue(context, "string(test:increment(8))", "9"); [EOL]     assertXPathValue(context, "test:string(/beans/name)", "Name 1"); [EOL] }
public void testStaticMethodCall() { [EOL]     assertXPathValue(context, "string(test:build(8, 'goober'))", "foo=8; bar=goober"); [EOL]     assertXPathValue(context, "string(jxpathtest:TestFunctions.build(8, 'goober'))", "foo=8; bar=goober"); [EOL]     assertXPathValue(context, "string(" + TestFunctions.class.getName() + ".build(8, 'goober'))", "foo=8; bar=goober"); [EOL]     assertXPathValue(context, "string(test:increment(8))", "9"); [EOL]     assertXPathValue(context, "test:string(/beans/name)", "Name 1"); [EOL] }
public void testStaticMethodCall() { [EOL]     assertXPathValue(context, "string(test:build(8, 'goober'))", "foo=8; bar=goober"); [EOL]     assertXPathValue(context, "string(jxpathtest:TestFunctions.build(8, 'goober'))", "foo=8; bar=goober"); [EOL]     assertXPathValue(context, "string(" + TestFunctions.class.getName() + ".build(8, 'goober'))", "foo=8; bar=goober"); [EOL]     assertXPathValue(context, "string(test:increment(8))", "9"); [EOL]     assertXPathValue(context, "test:string(/beans/name)", "Name 1"); [EOL] }
public void testStaticMethodCall() { [EOL]     assertXPathValue(context, "string(test:build(8, 'goober'))", "foo=8; bar=goober"); [EOL]     assertXPathValue(context, "string(jxpathtest:TestFunctions.build(8, 'goober'))", "foo=8; bar=goober"); [EOL]     assertXPathValue(context, "string(" + TestFunctions.class.getName() + ".build(8, 'goober'))", "foo=8; bar=goober"); [EOL]     assertXPathValue(context, "string(test:increment(8))", "9"); [EOL]     assertXPathValue(context, "test:string(/beans/name)", "Name 1"); [EOL] }
public void testStaticMethodCall() { [EOL]     assertXPathValue(context, "string(test:build(8, 'goober'))", "foo=8; bar=goober"); [EOL]     assertXPathValue(context, "string(jxpathtest:TestFunctions.build(8, 'goober'))", "foo=8; bar=goober"); [EOL]     assertXPathValue(context, "string(" + TestFunctions.class.getName() + ".build(8, 'goober'))", "foo=8; bar=goober"); [EOL]     assertXPathValue(context, "string(test:increment(8))", "9"); [EOL]     assertXPathValue(context, "test:string(/beans/name)", "Name 1"); [EOL] }
public void testStaticMethodCall() { [EOL]     assertXPathValue(context, "string(test:build(8, 'goober'))", "foo=8; bar=goober"); [EOL]     assertXPathValue(context, "string(jxpathtest:TestFunctions.build(8, 'goober'))", "foo=8; bar=goober"); [EOL]     assertXPathValue(context, "string(" + TestFunctions.class.getName() + ".build(8, 'goober'))", "foo=8; bar=goober"); [EOL]     assertXPathValue(context, "string(test:increment(8))", "9"); [EOL]     assertXPathValue(context, "test:string(/beans/name)", "Name 1"); [EOL] }
public void testStaticMethodCall() { [EOL]     assertXPathValue(context, "string(test:build(8, 'goober'))", "foo=8; bar=goober"); [EOL]     assertXPathValue(context, "string(jxpathtest:TestFunctions.build(8, 'goober'))", "foo=8; bar=goober"); [EOL]     assertXPathValue(context, "string(" + TestFunctions.class.getName() + ".build(8, 'goober'))", "foo=8; bar=goober"); [EOL]     assertXPathValue(context, "string(test:increment(8))", "9"); [EOL]     assertXPathValue(context, "test:string(/beans/name)", "Name 1"); [EOL] }
public void testStaticMethodCall() { [EOL]     assertXPathValue(context, "string(test:build(8, 'goober'))", "foo=8; bar=goober"); [EOL]     assertXPathValue(context, "string(jxpathtest:TestFunctions.build(8, 'goober'))", "foo=8; bar=goober"); [EOL]     assertXPathValue(context, "string(" + TestFunctions.class.getName() + ".build(8, 'goober'))", "foo=8; bar=goober"); [EOL]     assertXPathValue(context, "string(test:increment(8))", "9"); [EOL]     assertXPathValue(context, "test:string(/beans/name)", "Name 1"); [EOL] }
public void testStaticMethodCall() { [EOL]     assertXPathValue(context, "string(test:build(8, 'goober'))", "foo=8; bar=goober"); [EOL]     assertXPathValue(context, "string(jxpathtest:TestFunctions.build(8, 'goober'))", "foo=8; bar=goober"); [EOL]     assertXPathValue(context, "string(" + TestFunctions.class.getName() + ".build(8, 'goober'))", "foo=8; bar=goober"); [EOL]     assertXPathValue(context, "string(test:increment(8))", "9"); [EOL]     assertXPathValue(context, "test:string(/beans/name)", "Name 1"); [EOL] }
public void testStaticMethodCall() { [EOL]     assertXPathValue(context, "string(test:build(8, 'goober'))", "foo=8; bar=goober"); [EOL]     assertXPathValue(context, "string(jxpathtest:TestFunctions.build(8, 'goober'))", "foo=8; bar=goober"); [EOL]     assertXPathValue(context, "string(" + TestFunctions.class.getName() + ".build(8, 'goober'))", "foo=8; bar=goober"); [EOL]     assertXPathValue(context, "string(test:increment(8))", "9"); [EOL]     assertXPathValue(context, "test:string(/beans/name)", "Name 1"); [EOL] }
public void testStaticMethodCall() { [EOL]     assertXPathValue(context, "string(test:build(8, 'goober'))", "foo=8; bar=goober"); [EOL]     assertXPathValue(context, "string(jxpathtest:TestFunctions.build(8, 'goober'))", "foo=8; bar=goober"); [EOL]     assertXPathValue(context, "string(" + TestFunctions.class.getName() + ".build(8, 'goober'))", "foo=8; bar=goober"); [EOL]     assertXPathValue(context, "string(test:increment(8))", "9"); [EOL]     assertXPathValue(context, "test:string(/beans/name)", "Name 1"); [EOL] }
public void testStaticMethodCall() { [EOL]     assertXPathValue(context, "string(test:build(8, 'goober'))", "foo=8; bar=goober"); [EOL]     assertXPathValue(context, "string(jxpathtest:TestFunctions.build(8, 'goober'))", "foo=8; bar=goober"); [EOL]     assertXPathValue(context, "string(" + TestFunctions.class.getName() + ".build(8, 'goober'))", "foo=8; bar=goober"); [EOL]     assertXPathValue(context, "string(test:increment(8))", "9"); [EOL]     assertXPathValue(context, "test:string(/beans/name)", "Name 1"); [EOL] }
public void testStaticMethodCall() { [EOL]     assertXPathValue(context, "string(test:build(8, 'goober'))", "foo=8; bar=goober"); [EOL]     assertXPathValue(context, "string(jxpathtest:TestFunctions.build(8, 'goober'))", "foo=8; bar=goober"); [EOL]     assertXPathValue(context, "string(" + TestFunctions.class.getName() + ".build(8, 'goober'))", "foo=8; bar=goober"); [EOL]     assertXPathValue(context, "string(test:increment(8))", "9"); [EOL]     assertXPathValue(context, "test:string(/beans/name)", "Name 1"); [EOL] }
public void testStaticMethodCall() { [EOL]     assertXPathValue(context, "string(test:build(8, 'goober'))", "foo=8; bar=goober"); [EOL]     assertXPathValue(context, "string(jxpathtest:TestFunctions.build(8, 'goober'))", "foo=8; bar=goober"); [EOL]     assertXPathValue(context, "string(" + TestFunctions.class.getName() + ".build(8, 'goober'))", "foo=8; bar=goober"); [EOL]     assertXPathValue(context, "string(test:increment(8))", "9"); [EOL]     assertXPathValue(context, "test:string(/beans/name)", "Name 1"); [EOL] }
public void testStaticMethodCall() { [EOL]     assertXPathValue(context, "string(test:build(8, 'goober'))", "foo=8; bar=goober"); [EOL]     assertXPathValue(context, "string(jxpathtest:TestFunctions.build(8, 'goober'))", "foo=8; bar=goober"); [EOL]     assertXPathValue(context, "string(" + TestFunctions.class.getName() + ".build(8, 'goober'))", "foo=8; bar=goober"); [EOL]     assertXPathValue(context, "string(test:increment(8))", "9"); [EOL]     assertXPathValue(context, "test:string(/beans/name)", "Name 1"); [EOL] }
public void testStaticMethodCall() { [EOL]     assertXPathValue(context, "string(test:build(8, 'goober'))", "foo=8; bar=goober"); [EOL]     assertXPathValue(context, "string(jxpathtest:TestFunctions.build(8, 'goober'))", "foo=8; bar=goober"); [EOL]     assertXPathValue(context, "string(" + TestFunctions.class.getName() + ".build(8, 'goober'))", "foo=8; bar=goober"); [EOL]     assertXPathValue(context, "string(test:increment(8))", "9"); [EOL]     assertXPathValue(context, "test:string(/beans/name)", "Name 1"); [EOL] }
public void testStaticMethodCall() { [EOL]     assertXPathValue(context, "string(test:build(8, 'goober'))", "foo=8; bar=goober"); [EOL]     assertXPathValue(context, "string(jxpathtest:TestFunctions.build(8, 'goober'))", "foo=8; bar=goober"); [EOL]     assertXPathValue(context, "string(" + TestFunctions.class.getName() + ".build(8, 'goober'))", "foo=8; bar=goober"); [EOL]     assertXPathValue(context, "string(test:increment(8))", "9"); [EOL]     assertXPathValue(context, "test:string(/beans/name)", "Name 1"); [EOL] }
public void testStaticMethodCall() { [EOL]     assertXPathValue(context, "string(test:build(8, 'goober'))", "foo=8; bar=goober"); [EOL]     assertXPathValue(context, "string(jxpathtest:TestFunctions.build(8, 'goober'))", "foo=8; bar=goober"); [EOL]     assertXPathValue(context, "string(" + TestFunctions.class.getName() + ".build(8, 'goober'))", "foo=8; bar=goober"); [EOL]     assertXPathValue(context, "string(test:increment(8))", "9"); [EOL]     assertXPathValue(context, "test:string(/beans/name)", "Name 1"); [EOL] }
public void testStaticMethodCall() { [EOL]     assertXPathValue(context, "string(test:build(8, 'goober'))", "foo=8; bar=goober"); [EOL]     assertXPathValue(context, "string(jxpathtest:TestFunctions.build(8, 'goober'))", "foo=8; bar=goober"); [EOL]     assertXPathValue(context, "string(" + TestFunctions.class.getName() + ".build(8, 'goober'))", "foo=8; bar=goober"); [EOL]     assertXPathValue(context, "string(test:increment(8))", "9"); [EOL]     assertXPathValue(context, "test:string(/beans/name)", "Name 1"); [EOL] }
public void testStaticMethodCall() { [EOL]     assertXPathValue(context, "string(test:build(8, 'goober'))", "foo=8; bar=goober"); [EOL]     assertXPathValue(context, "string(jxpathtest:TestFunctions.build(8, 'goober'))", "foo=8; bar=goober"); [EOL]     assertXPathValue(context, "string(" + TestFunctions.class.getName() + ".build(8, 'goober'))", "foo=8; bar=goober"); [EOL]     assertXPathValue(context, "string(test:increment(8))", "9"); [EOL]     assertXPathValue(context, "test:string(/beans/name)", "Name 1"); [EOL] }
public void testStaticMethodCall() { [EOL]     assertXPathValue(context, "string(test:build(8, 'goober'))", "foo=8; bar=goober"); [EOL]     assertXPathValue(context, "string(jxpathtest:TestFunctions.build(8, 'goober'))", "foo=8; bar=goober"); [EOL]     assertXPathValue(context, "string(" + TestFunctions.class.getName() + ".build(8, 'goober'))", "foo=8; bar=goober"); [EOL]     assertXPathValue(context, "string(test:increment(8))", "9"); [EOL]     assertXPathValue(context, "test:string(/beans/name)", "Name 1"); [EOL] }
public void testStaticMethodCall() { [EOL]     assertXPathValue(context, "string(test:build(8, 'goober'))", "foo=8; bar=goober"); [EOL]     assertXPathValue(context, "string(jxpathtest:TestFunctions.build(8, 'goober'))", "foo=8; bar=goober"); [EOL]     assertXPathValue(context, "string(" + TestFunctions.class.getName() + ".build(8, 'goober'))", "foo=8; bar=goober"); [EOL]     assertXPathValue(context, "string(test:increment(8))", "9"); [EOL]     assertXPathValue(context, "test:string(/beans/name)", "Name 1"); [EOL] }
public void testAllocation() { [EOL]     assertXPathValue(context, "string(test:new())", "foo=0; bar=null"); [EOL]     assertXPathValue(context, "string(jxpathtest:TestFunctions.new())", "foo=0; bar=null"); [EOL]     assertXPathValue(context, "string(" + TestFunctions.class.getName() + ".new())", "foo=0; bar=null"); [EOL]     assertXPathValue(context, "string(test:new(3, 'baz'))", "foo=3; bar=baz"); [EOL]     assertXPathValue(context, "string(test:new('3', 4))", "foo=3; bar=4.0"); [EOL]     context.getVariables().declareVariable("A", "baz"); [EOL]     assertXPathValue(context, "string(test:new(2, $A, false))", "foo=2; bar=baz"); [EOL] }
public void testAllocation() { [EOL]     assertXPathValue(context, "string(test:new())", "foo=0; bar=null"); [EOL]     assertXPathValue(context, "string(jxpathtest:TestFunctions.new())", "foo=0; bar=null"); [EOL]     assertXPathValue(context, "string(" + TestFunctions.class.getName() + ".new())", "foo=0; bar=null"); [EOL]     assertXPathValue(context, "string(test:new(3, 'baz'))", "foo=3; bar=baz"); [EOL]     assertXPathValue(context, "string(test:new('3', 4))", "foo=3; bar=4.0"); [EOL]     context.getVariables().declareVariable("A", "baz"); [EOL]     assertXPathValue(context, "string(test:new(2, $A, false))", "foo=2; bar=baz"); [EOL] }
public void testAllocation() { [EOL]     assertXPathValue(context, "string(test:new())", "foo=0; bar=null"); [EOL]     assertXPathValue(context, "string(jxpathtest:TestFunctions.new())", "foo=0; bar=null"); [EOL]     assertXPathValue(context, "string(" + TestFunctions.class.getName() + ".new())", "foo=0; bar=null"); [EOL]     assertXPathValue(context, "string(test:new(3, 'baz'))", "foo=3; bar=baz"); [EOL]     assertXPathValue(context, "string(test:new('3', 4))", "foo=3; bar=4.0"); [EOL]     context.getVariables().declareVariable("A", "baz"); [EOL]     assertXPathValue(context, "string(test:new(2, $A, false))", "foo=2; bar=baz"); [EOL] }
public void testCollectionMethodCall() { [EOL]     List list = new ArrayList(); [EOL]     list.add("foo"); [EOL]     context.getVariables().declareVariable("myList", list); [EOL]     assertXPathValue(context, "size($myList)", new Integer(1)); [EOL]     assertXPathValue(context, "size(beans)", new Integer(2)); [EOL]     context.getValue("add($myList, 'hello')"); [EOL]     assertEquals("After adding an element", 2, list.size()); [EOL]     JXPathContext context = JXPathContext.newContext(new ArrayList()); [EOL]     assertEquals("Extension function on root collection", "0", String.valueOf(context.getValue("size(/)"))); [EOL] }
public void testCollectionMethodCall() { [EOL]     List list = new ArrayList(); [EOL]     list.add("foo"); [EOL]     context.getVariables().declareVariable("myList", list); [EOL]     assertXPathValue(context, "size($myList)", new Integer(1)); [EOL]     assertXPathValue(context, "size(beans)", new Integer(2)); [EOL]     context.getValue("add($myList, 'hello')"); [EOL]     assertEquals("After adding an element", 2, list.size()); [EOL]     JXPathContext context = JXPathContext.newContext(new ArrayList()); [EOL]     assertEquals("Extension function on root collection", "0", String.valueOf(context.getValue("size(/)"))); [EOL] }
public void testCollectionMethodCall() { [EOL]     List list = new ArrayList(); [EOL]     list.add("foo"); [EOL]     context.getVariables().declareVariable("myList", list); [EOL]     assertXPathValue(context, "size($myList)", new Integer(1)); [EOL]     assertXPathValue(context, "size(beans)", new Integer(2)); [EOL]     context.getValue("add($myList, 'hello')"); [EOL]     assertEquals("After adding an element", 2, list.size()); [EOL]     JXPathContext context = JXPathContext.newContext(new ArrayList()); [EOL]     assertEquals("Extension function on root collection", "0", String.valueOf(context.getValue("size(/)"))); [EOL] }
public void testAxisParent() { [EOL]     assertXPathValue(context, "count(/beans/..)", new Double(1)); [EOL]     assertXPathValue(context, "count(//..)", new Double(9)); [EOL]     assertXPathValue(context, "count(//../..)", new Double(2)); [EOL]     assertXPathValueIterator(context, "//parent::beans/name", list("Name 1", "Name 2")); [EOL] }
public void testAxisParent() { [EOL]     assertXPathValue(context, "count(/beans/..)", new Double(1)); [EOL]     assertXPathValue(context, "count(//..)", new Double(9)); [EOL]     assertXPathValue(context, "count(//../..)", new Double(2)); [EOL]     assertXPathValueIterator(context, "//parent::beans/name", list("Name 1", "Name 2")); [EOL] }
public void testAxisParent() { [EOL]     assertXPathValue(context, "count(/beans/..)", new Double(1)); [EOL]     assertXPathValue(context, "count(//..)", new Double(9)); [EOL]     assertXPathValue(context, "count(//../..)", new Double(2)); [EOL]     assertXPathValueIterator(context, "//parent::beans/name", list("Name 1", "Name 2")); [EOL] }
public void testAxisParent() { [EOL]     assertXPathValue(context, "count(/beans/..)", new Double(1)); [EOL]     assertXPathValue(context, "count(//..)", new Double(9)); [EOL]     assertXPathValue(context, "count(//../..)", new Double(2)); [EOL]     assertXPathValueIterator(context, "//parent::beans/name", list("Name 1", "Name 2")); [EOL] }
public void testAxisParent() { [EOL]     assertXPathValue(context, "count(/beans/..)", new Double(1)); [EOL]     assertXPathValue(context, "count(//..)", new Double(9)); [EOL]     assertXPathValue(context, "count(//../..)", new Double(2)); [EOL]     assertXPathValueIterator(context, "//parent::beans/name", list("Name 1", "Name 2")); [EOL] }
public void testAxisParent() { [EOL]     assertXPathValue(context, "count(/beans/..)", new Double(1)); [EOL]     assertXPathValue(context, "count(//..)", new Double(9)); [EOL]     assertXPathValue(context, "count(//../..)", new Double(2)); [EOL]     assertXPathValueIterator(context, "//parent::beans/name", list("Name 1", "Name 2")); [EOL] }
public void testAxisParent() { [EOL]     assertXPathValue(context, "count(/beans/..)", new Double(1)); [EOL]     assertXPathValue(context, "count(//..)", new Double(9)); [EOL]     assertXPathValue(context, "count(//../..)", new Double(2)); [EOL]     assertXPathValueIterator(context, "//parent::beans/name", list("Name 1", "Name 2")); [EOL] }
public void testAxisParent() { [EOL]     assertXPathValue(context, "count(/beans/..)", new Double(1)); [EOL]     assertXPathValue(context, "count(//..)", new Double(9)); [EOL]     assertXPathValue(context, "count(//../..)", new Double(2)); [EOL]     assertXPathValueIterator(context, "//parent::beans/name", list("Name 1", "Name 2")); [EOL] }
public void testAxisParent() { [EOL]     assertXPathValue(context, "count(/beans/..)", new Double(1)); [EOL]     assertXPathValue(context, "count(//..)", new Double(9)); [EOL]     assertXPathValue(context, "count(//../..)", new Double(2)); [EOL]     assertXPathValueIterator(context, "//parent::beans/name", list("Name 1", "Name 2")); [EOL] }
public void testAxisParent() { [EOL]     assertXPathValue(context, "count(/beans/..)", new Double(1)); [EOL]     assertXPathValue(context, "count(//..)", new Double(9)); [EOL]     assertXPathValue(context, "count(//../..)", new Double(2)); [EOL]     assertXPathValueIterator(context, "//parent::beans/name", list("Name 1", "Name 2")); [EOL] }
public void testAxisParent() { [EOL]     assertXPathValue(context, "count(/beans/..)", new Double(1)); [EOL]     assertXPathValue(context, "count(//..)", new Double(9)); [EOL]     assertXPathValue(context, "count(//../..)", new Double(2)); [EOL]     assertXPathValueIterator(context, "//parent::beans/name", list("Name 1", "Name 2")); [EOL] }
public void testAxisParent() { [EOL]     assertXPathValue(context, "count(/beans/..)", new Double(1)); [EOL]     assertXPathValue(context, "count(//..)", new Double(9)); [EOL]     assertXPathValue(context, "count(//../..)", new Double(2)); [EOL]     assertXPathValueIterator(context, "//parent::beans/name", list("Name 1", "Name 2")); [EOL] }
public void testAxisParent() { [EOL]     assertXPathValue(context, "count(/beans/..)", new Double(1)); [EOL]     assertXPathValue(context, "count(//..)", new Double(9)); [EOL]     assertXPathValue(context, "count(//../..)", new Double(2)); [EOL]     assertXPathValueIterator(context, "//parent::beans/name", list("Name 1", "Name 2")); [EOL] }
public void testAxisParent() { [EOL]     assertXPathValue(context, "count(/beans/..)", new Double(1)); [EOL]     assertXPathValue(context, "count(//..)", new Double(9)); [EOL]     assertXPathValue(context, "count(//../..)", new Double(2)); [EOL]     assertXPathValueIterator(context, "//parent::beans/name", list("Name 1", "Name 2")); [EOL] }
public void testAxisParent() { [EOL]     assertXPathValue(context, "count(/beans/..)", new Double(1)); [EOL]     assertXPathValue(context, "count(//..)", new Double(9)); [EOL]     assertXPathValue(context, "count(//../..)", new Double(2)); [EOL]     assertXPathValueIterator(context, "//parent::beans/name", list("Name 1", "Name 2")); [EOL] }
public void testAxisParent() { [EOL]     assertXPathValue(context, "count(/beans/..)", new Double(1)); [EOL]     assertXPathValue(context, "count(//..)", new Double(9)); [EOL]     assertXPathValue(context, "count(//../..)", new Double(2)); [EOL]     assertXPathValueIterator(context, "//parent::beans/name", list("Name 1", "Name 2")); [EOL] }
public void testAxisParent() { [EOL]     assertXPathValue(context, "count(/beans/..)", new Double(1)); [EOL]     assertXPathValue(context, "count(//..)", new Double(9)); [EOL]     assertXPathValue(context, "count(//../..)", new Double(2)); [EOL]     assertXPathValueIterator(context, "//parent::beans/name", list("Name 1", "Name 2")); [EOL] }
public void testAxisParent() { [EOL]     assertXPathValue(context, "count(/beans/..)", new Double(1)); [EOL]     assertXPathValue(context, "count(//..)", new Double(9)); [EOL]     assertXPathValue(context, "count(//../..)", new Double(2)); [EOL]     assertXPathValueIterator(context, "//parent::beans/name", list("Name 1", "Name 2")); [EOL] }
public void testAxisParent() { [EOL]     assertXPathValue(context, "count(/beans/..)", new Double(1)); [EOL]     assertXPathValue(context, "count(//..)", new Double(9)); [EOL]     assertXPathValue(context, "count(//../..)", new Double(2)); [EOL]     assertXPathValueIterator(context, "//parent::beans/name", list("Name 1", "Name 2")); [EOL] }
public void testAllocation() { [EOL]     assertXPathValue(context, "string(test:new())", "foo=0; bar=null"); [EOL]     assertXPathValue(context, "string(jxpathtest:TestFunctions.new())", "foo=0; bar=null"); [EOL]     assertXPathValue(context, "string(" + TestFunctions.class.getName() + ".new())", "foo=0; bar=null"); [EOL]     assertXPathValue(context, "string(test:new(3, 'baz'))", "foo=3; bar=baz"); [EOL]     assertXPathValue(context, "string(test:new('3', 4))", "foo=3; bar=4.0"); [EOL]     context.getVariables().declareVariable("A", "baz"); [EOL]     assertXPathValue(context, "string(test:new(2, $A, false))", "foo=2; bar=baz"); [EOL] }
public void testAllocation() { [EOL]     assertXPathValue(context, "string(test:new())", "foo=0; bar=null"); [EOL]     assertXPathValue(context, "string(jxpathtest:TestFunctions.new())", "foo=0; bar=null"); [EOL]     assertXPathValue(context, "string(" + TestFunctions.class.getName() + ".new())", "foo=0; bar=null"); [EOL]     assertXPathValue(context, "string(test:new(3, 'baz'))", "foo=3; bar=baz"); [EOL]     assertXPathValue(context, "string(test:new('3', 4))", "foo=3; bar=4.0"); [EOL]     context.getVariables().declareVariable("A", "baz"); [EOL]     assertXPathValue(context, "string(test:new(2, $A, false))", "foo=2; bar=baz"); [EOL] }
public void testAllocation() { [EOL]     assertXPathValue(context, "string(test:new())", "foo=0; bar=null"); [EOL]     assertXPathValue(context, "string(jxpathtest:TestFunctions.new())", "foo=0; bar=null"); [EOL]     assertXPathValue(context, "string(" + TestFunctions.class.getName() + ".new())", "foo=0; bar=null"); [EOL]     assertXPathValue(context, "string(test:new(3, 'baz'))", "foo=3; bar=baz"); [EOL]     assertXPathValue(context, "string(test:new('3', 4))", "foo=3; bar=4.0"); [EOL]     context.getVariables().declareVariable("A", "baz"); [EOL]     assertXPathValue(context, "string(test:new(2, $A, false))", "foo=2; bar=baz"); [EOL] }
public void testCoreOperationMod() { [EOL]     assertXPathExpression("2 mod 4", CoreOperationMod.class); [EOL]     assertXPathExpression("2|3 mod -3", CoreOperationMod.class, "2 | 3 mod -3"); [EOL] }
public void testRelativeContextParent() { [EOL]     JXPathContext relative = context.getRelativeContext(context.getPointer("nestedBean")); [EOL]     assertXPathValueAndPointer(relative, "../integers[2]", new Integer(2), "/integers[2]"); [EOL] }
public void testRelativeContextParent() { [EOL]     JXPathContext relative = context.getRelativeContext(context.getPointer("nestedBean")); [EOL]     assertXPathValueAndPointer(relative, "../integers[2]", new Integer(2), "/integers[2]"); [EOL] }
public void testRelativeContextParent() { [EOL]     JXPathContext relative = context.getRelativeContext(context.getPointer("nestedBean")); [EOL]     assertXPathValueAndPointer(relative, "../integers[2]", new Integer(2), "/integers[2]"); [EOL] }
public void testRelativeContextParent() { [EOL]     JXPathContext relative = context.getRelativeContext(context.getPointer("nestedBean")); [EOL]     assertXPathValueAndPointer(relative, "../integers[2]", new Integer(2), "/integers[2]"); [EOL] }
public void testRelativeContextParent() { [EOL]     JXPathContext relative = context.getRelativeContext(context.getPointer("nestedBean")); [EOL]     assertXPathValueAndPointer(relative, "../integers[2]", new Integer(2), "/integers[2]"); [EOL] }
public void testDocumentOrder() { [EOL]     assertDocumentOrder(context, "vendor/location", "vendor/location/address/street", -1); [EOL]     assertDocumentOrder(context, "vendor/location[@id = '100']", "vendor/location[@id = '101']", -1); [EOL]     assertDocumentOrder(context, "vendor//price:amount", "vendor/location", 1); [EOL] }
public void testAllocation() { [EOL]     assertXPathValue(context, "string(test:new())", "foo=0; bar=null"); [EOL]     assertXPathValue(context, "string(jxpathtest:TestFunctions.new())", "foo=0; bar=null"); [EOL]     assertXPathValue(context, "string(" + TestFunctions.class.getName() + ".new())", "foo=0; bar=null"); [EOL]     assertXPathValue(context, "string(test:new(3, 'baz'))", "foo=3; bar=baz"); [EOL]     assertXPathValue(context, "string(test:new('3', 4))", "foo=3; bar=4.0"); [EOL]     context.getVariables().declareVariable("A", "baz"); [EOL]     assertXPathValue(context, "string(test:new(2, $A, false))", "foo=2; bar=baz"); [EOL] }
public void testAllocation() { [EOL]     assertXPathValue(context, "string(test:new())", "foo=0; bar=null"); [EOL]     assertXPathValue(context, "string(jxpathtest:TestFunctions.new())", "foo=0; bar=null"); [EOL]     assertXPathValue(context, "string(" + TestFunctions.class.getName() + ".new())", "foo=0; bar=null"); [EOL]     assertXPathValue(context, "string(test:new(3, 'baz'))", "foo=3; bar=baz"); [EOL]     assertXPathValue(context, "string(test:new('3', 4))", "foo=3; bar=4.0"); [EOL]     context.getVariables().declareVariable("A", "baz"); [EOL]     assertXPathValue(context, "string(test:new(2, $A, false))", "foo=2; bar=baz"); [EOL] }
public void testAllocation() { [EOL]     assertXPathValue(context, "string(test:new())", "foo=0; bar=null"); [EOL]     assertXPathValue(context, "string(jxpathtest:TestFunctions.new())", "foo=0; bar=null"); [EOL]     assertXPathValue(context, "string(" + TestFunctions.class.getName() + ".new())", "foo=0; bar=null"); [EOL]     assertXPathValue(context, "string(test:new(3, 'baz'))", "foo=3; bar=baz"); [EOL]     assertXPathValue(context, "string(test:new('3', 4))", "foo=3; bar=4.0"); [EOL]     context.getVariables().declareVariable("A", "baz"); [EOL]     assertXPathValue(context, "string(test:new(2, $A, false))", "foo=2; bar=baz"); [EOL] }
public void testAxisParent() { [EOL]     assertXPathValue(context, "count(/beans/..)", new Double(1)); [EOL]     assertXPathValue(context, "count(//..)", new Double(9)); [EOL]     assertXPathValue(context, "count(//../..)", new Double(2)); [EOL]     assertXPathValueIterator(context, "//parent::beans/name", list("Name 1", "Name 2")); [EOL] }
public void testAxisParent() { [EOL]     assertXPathValue(context, "count(/beans/..)", new Double(1)); [EOL]     assertXPathValue(context, "count(//..)", new Double(9)); [EOL]     assertXPathValue(context, "count(//../..)", new Double(2)); [EOL]     assertXPathValueIterator(context, "//parent::beans/name", list("Name 1", "Name 2")); [EOL] }
public void testAxisParent() { [EOL]     assertXPathValue(context, "count(/beans/..)", new Double(1)); [EOL]     assertXPathValue(context, "count(//..)", new Double(9)); [EOL]     assertXPathValue(context, "count(//../..)", new Double(2)); [EOL]     assertXPathValueIterator(context, "//parent::beans/name", list("Name 1", "Name 2")); [EOL] }
public void testAllocation() { [EOL]     assertXPathValue(context, "string(test:new())", "foo=0; bar=null"); [EOL]     assertXPathValue(context, "string(jxpathtest:TestFunctions.new())", "foo=0; bar=null"); [EOL]     assertXPathValue(context, "string(" + TestFunctions.class.getName() + ".new())", "foo=0; bar=null"); [EOL]     assertXPathValue(context, "string(test:new(3, 'baz'))", "foo=3; bar=baz"); [EOL]     assertXPathValue(context, "string(test:new('3', 4))", "foo=3; bar=4.0"); [EOL]     context.getVariables().declareVariable("A", "baz"); [EOL]     assertXPathValue(context, "string(test:new(2, $A, false))", "foo=2; bar=baz"); [EOL] }
public void testAllocation() { [EOL]     assertXPathValue(context, "string(test:new())", "foo=0; bar=null"); [EOL]     assertXPathValue(context, "string(jxpathtest:TestFunctions.new())", "foo=0; bar=null"); [EOL]     assertXPathValue(context, "string(" + TestFunctions.class.getName() + ".new())", "foo=0; bar=null"); [EOL]     assertXPathValue(context, "string(test:new(3, 'baz'))", "foo=3; bar=baz"); [EOL]     assertXPathValue(context, "string(test:new('3', 4))", "foo=3; bar=4.0"); [EOL]     context.getVariables().declareVariable("A", "baz"); [EOL]     assertXPathValue(context, "string(test:new(2, $A, false))", "foo=2; bar=baz"); [EOL] }
public void testAllocation() { [EOL]     assertXPathValue(context, "string(test:new())", "foo=0; bar=null"); [EOL]     assertXPathValue(context, "string(jxpathtest:TestFunctions.new())", "foo=0; bar=null"); [EOL]     assertXPathValue(context, "string(" + TestFunctions.class.getName() + ".new())", "foo=0; bar=null"); [EOL]     assertXPathValue(context, "string(test:new(3, 'baz'))", "foo=3; bar=baz"); [EOL]     assertXPathValue(context, "string(test:new('3', 4))", "foo=3; bar=4.0"); [EOL]     context.getVariables().declareVariable("A", "baz"); [EOL]     assertXPathValue(context, "string(test:new(2, $A, false))", "foo=2; bar=baz"); [EOL] }
public void testAllocation() { [EOL]     assertXPathValue(context, "string(test:new())", "foo=0; bar=null"); [EOL]     assertXPathValue(context, "string(jxpathtest:TestFunctions.new())", "foo=0; bar=null"); [EOL]     assertXPathValue(context, "string(" + TestFunctions.class.getName() + ".new())", "foo=0; bar=null"); [EOL]     assertXPathValue(context, "string(test:new(3, 'baz'))", "foo=3; bar=baz"); [EOL]     assertXPathValue(context, "string(test:new('3', 4))", "foo=3; bar=4.0"); [EOL]     context.getVariables().declareVariable("A", "baz"); [EOL]     assertXPathValue(context, "string(test:new(2, $A, false))", "foo=2; bar=baz"); [EOL] }
public void testAxisParent() { [EOL]     assertXPathValue(context, "count(/beans/..)", new Double(1)); [EOL]     assertXPathValue(context, "count(//..)", new Double(9)); [EOL]     assertXPathValue(context, "count(//../..)", new Double(2)); [EOL]     assertXPathValueIterator(context, "//parent::beans/name", list("Name 1", "Name 2")); [EOL] }
public void testAxisParent() { [EOL]     assertXPathValue(context, "count(/beans/..)", new Double(1)); [EOL]     assertXPathValue(context, "count(//..)", new Double(9)); [EOL]     assertXPathValue(context, "count(//../..)", new Double(2)); [EOL]     assertXPathValueIterator(context, "//parent::beans/name", list("Name 1", "Name 2")); [EOL] }
public void testAxisParent() { [EOL]     assertXPathValue(context, "count(/beans/..)", new Double(1)); [EOL]     assertXPathValue(context, "count(//..)", new Double(9)); [EOL]     assertXPathValue(context, "count(//../..)", new Double(2)); [EOL]     assertXPathValueIterator(context, "//parent::beans/name", list("Name 1", "Name 2")); [EOL] }
public void testAxisParent() { [EOL]     assertXPathValue(context, "count(/beans/..)", new Double(1)); [EOL]     assertXPathValue(context, "count(//..)", new Double(9)); [EOL]     assertXPathValue(context, "count(//../..)", new Double(2)); [EOL]     assertXPathValueIterator(context, "//parent::beans/name", list("Name 1", "Name 2")); [EOL] }
public void testCollectionMethodCall() { [EOL]     List list = new ArrayList(); [EOL]     list.add("foo"); [EOL]     context.getVariables().declareVariable("myList", list); [EOL]     assertXPathValue(context, "size($myList)", new Integer(1)); [EOL]     assertXPathValue(context, "size(beans)", new Integer(2)); [EOL]     context.getValue("add($myList, 'hello')"); [EOL]     assertEquals("After adding an element", 2, list.size()); [EOL]     JXPathContext context = JXPathContext.newContext(new ArrayList()); [EOL]     assertEquals("Extension function on root collection", "0", String.valueOf(context.getValue("size(/)"))); [EOL] }
public void testCollectionMethodCall() { [EOL]     List list = new ArrayList(); [EOL]     list.add("foo"); [EOL]     context.getVariables().declareVariable("myList", list); [EOL]     assertXPathValue(context, "size($myList)", new Integer(1)); [EOL]     assertXPathValue(context, "size(beans)", new Integer(2)); [EOL]     context.getValue("add($myList, 'hello')"); [EOL]     assertEquals("After adding an element", 2, list.size()); [EOL]     JXPathContext context = JXPathContext.newContext(new ArrayList()); [EOL]     assertEquals("Extension function on root collection", "0", String.valueOf(context.getValue("size(/)"))); [EOL] }
public void testCollectionMethodCall() { [EOL]     List list = new ArrayList(); [EOL]     list.add("foo"); [EOL]     context.getVariables().declareVariable("myList", list); [EOL]     assertXPathValue(context, "size($myList)", new Integer(1)); [EOL]     assertXPathValue(context, "size(beans)", new Integer(2)); [EOL]     context.getValue("add($myList, 'hello')"); [EOL]     assertEquals("After adding an element", 2, list.size()); [EOL]     JXPathContext context = JXPathContext.newContext(new ArrayList()); [EOL]     assertEquals("Extension function on root collection", "0", String.valueOf(context.getValue("size(/)"))); [EOL] }
public void testCollectionMethodCall() { [EOL]     List list = new ArrayList(); [EOL]     list.add("foo"); [EOL]     context.getVariables().declareVariable("myList", list); [EOL]     assertXPathValue(context, "size($myList)", new Integer(1)); [EOL]     assertXPathValue(context, "size(beans)", new Integer(2)); [EOL]     context.getValue("add($myList, 'hello')"); [EOL]     assertEquals("After adding an element", 2, list.size()); [EOL]     JXPathContext context = JXPathContext.newContext(new ArrayList()); [EOL]     assertEquals("Extension function on root collection", "0", String.valueOf(context.getValue("size(/)"))); [EOL] }
public void testCollectionMethodCall() { [EOL]     List list = new ArrayList(); [EOL]     list.add("foo"); [EOL]     context.getVariables().declareVariable("myList", list); [EOL]     assertXPathValue(context, "size($myList)", new Integer(1)); [EOL]     assertXPathValue(context, "size(beans)", new Integer(2)); [EOL]     context.getValue("add($myList, 'hello')"); [EOL]     assertEquals("After adding an element", 2, list.size()); [EOL]     JXPathContext context = JXPathContext.newContext(new ArrayList()); [EOL]     assertEquals("Extension function on root collection", "0", String.valueOf(context.getValue("size(/)"))); [EOL] }
public void testCollectionMethodCall() { [EOL]     List list = new ArrayList(); [EOL]     list.add("foo"); [EOL]     context.getVariables().declareVariable("myList", list); [EOL]     assertXPathValue(context, "size($myList)", new Integer(1)); [EOL]     assertXPathValue(context, "size(beans)", new Integer(2)); [EOL]     context.getValue("add($myList, 'hello')"); [EOL]     assertEquals("After adding an element", 2, list.size()); [EOL]     JXPathContext context = JXPathContext.newContext(new ArrayList()); [EOL]     assertEquals("Extension function on root collection", "0", String.valueOf(context.getValue("size(/)"))); [EOL] }
public void testCollectionMethodCall() { [EOL]     List list = new ArrayList(); [EOL]     list.add("foo"); [EOL]     context.getVariables().declareVariable("myList", list); [EOL]     assertXPathValue(context, "size($myList)", new Integer(1)); [EOL]     assertXPathValue(context, "size(beans)", new Integer(2)); [EOL]     context.getValue("add($myList, 'hello')"); [EOL]     assertEquals("After adding an element", 2, list.size()); [EOL]     JXPathContext context = JXPathContext.newContext(new ArrayList()); [EOL]     assertEquals("Extension function on root collection", "0", String.valueOf(context.getValue("size(/)"))); [EOL] }
public void testCreatePathDeclareVariable() { [EOL]     assertXPathCreatePath(context, "$string", null, "$string"); [EOL] }
public void testCreatePathDeclareVariable() { [EOL]     assertXPathCreatePath(context, "$string", null, "$string"); [EOL] }
public void testCreatePathDeclareVariable() { [EOL]     assertXPathCreatePath(context, "$string", null, "$string"); [EOL] }
public void testCreatePathDeclareVariable() { [EOL]     assertXPathCreatePath(context, "$string", null, "$string"); [EOL] }
public void testCoreOperationGreaterThanOrEqual() { [EOL]     assertXPathExpression("3>=4", CoreOperationGreaterThanOrEqual.class, "3 >= 4"); [EOL]     assertXPathExpression("3>=(2>=1)", CoreOperationGreaterThanOrEqual.class, "3 >= (2 >= 1)"); [EOL] }
public void testCoreOperationGreaterThanOrEqual() { [EOL]     assertXPathExpression("3>=4", CoreOperationGreaterThanOrEqual.class, "3 >= 4"); [EOL]     assertXPathExpression("3>=(2>=1)", CoreOperationGreaterThanOrEqual.class, "3 >= (2 >= 1)"); [EOL] }
public void testCoreOperationGreaterThanOrEqual() { [EOL]     assertXPathExpression("3>=4", CoreOperationGreaterThanOrEqual.class, "3 >= 4"); [EOL]     assertXPathExpression("3>=(2>=1)", CoreOperationGreaterThanOrEqual.class, "3 >= (2 >= 1)"); [EOL] }
public void testCoreOperationGreaterThanOrEqual() { [EOL]     assertXPathExpression("3>=4", CoreOperationGreaterThanOrEqual.class, "3 >= 4"); [EOL]     assertXPathExpression("3>=(2>=1)", CoreOperationGreaterThanOrEqual.class, "3 >= (2 >= 1)"); [EOL] }
public void testCoreOperationGreaterThanOrEqual() { [EOL]     assertXPathExpression("3>=4", CoreOperationGreaterThanOrEqual.class, "3 >= 4"); [EOL]     assertXPathExpression("3>=(2>=1)", CoreOperationGreaterThanOrEqual.class, "3 >= (2 >= 1)"); [EOL] }
public void testCoreOperationGreaterThanOrEqual() { [EOL]     assertXPathExpression("3>=4", CoreOperationGreaterThanOrEqual.class, "3 >= 4"); [EOL]     assertXPathExpression("3>=(2>=1)", CoreOperationGreaterThanOrEqual.class, "3 >= (2 >= 1)"); [EOL] }
public void testDocumentOrder() { [EOL]     assertDocumentOrder(context, "vendor/location", "vendor/location/address/street", -1); [EOL]     assertDocumentOrder(context, "vendor/location[@id = '100']", "vendor/location[@id = '101']", -1); [EOL]     assertDocumentOrder(context, "vendor//price:amount", "vendor/location", 1); [EOL] }
public void testDocumentOrder() { [EOL]     assertDocumentOrder(context, "vendor/location", "vendor/location/address/street", -1); [EOL]     assertDocumentOrder(context, "vendor/location[@id = '100']", "vendor/location[@id = '101']", -1); [EOL]     assertDocumentOrder(context, "vendor//price:amount", "vendor/location", 1); [EOL] }
public void testDocumentOrder() { [EOL]     assertDocumentOrder(context, "vendor/location", "vendor/location/address/street", -1); [EOL]     assertDocumentOrder(context, "vendor/location[@id = '100']", "vendor/location[@id = '101']", -1); [EOL]     assertDocumentOrder(context, "vendor//price:amount", "vendor/location", 1); [EOL] }
public void testDocumentOrder() { [EOL]     assertDocumentOrder(context, "vendor/location", "vendor/location/address/street", -1); [EOL]     assertDocumentOrder(context, "vendor/location[@id = '100']", "vendor/location[@id = '101']", -1); [EOL]     assertDocumentOrder(context, "vendor//price:amount", "vendor/location", 1); [EOL] }
public void testDocumentOrder() { [EOL]     assertDocumentOrder(context, "vendor/location", "vendor/location/address/street", -1); [EOL]     assertDocumentOrder(context, "vendor/location[@id = '100']", "vendor/location[@id = '101']", -1); [EOL]     assertDocumentOrder(context, "vendor//price:amount", "vendor/location", 1); [EOL] }
public void testDocumentOrder() { [EOL]     assertDocumentOrder(context, "vendor/location", "vendor/location/address/street", -1); [EOL]     assertDocumentOrder(context, "vendor/location[@id = '100']", "vendor/location[@id = '101']", -1); [EOL]     assertDocumentOrder(context, "vendor//price:amount", "vendor/location", 1); [EOL] }
public void testDocumentOrder() { [EOL]     assertDocumentOrder(context, "vendor/location", "vendor/location/address/street", -1); [EOL]     assertDocumentOrder(context, "vendor/location[@id = '100']", "vendor/location[@id = '101']", -1); [EOL]     assertDocumentOrder(context, "vendor//price:amount", "vendor/location", 1); [EOL] }
public void testDoStepNoPredicatesPropertyOwner() { [EOL]     assertValueAndPointer("/int", new Integer(1), "/int", "Bb", "BbB"); [EOL]     assertValueAndPointer("/./int", new Integer(1), "/int", "Bb", "BbB"); [EOL]     assertNullPointer("/foo", "/foo", "Bn"); [EOL]     assertValueAndPointer("/nestedBean/int", new Integer(1), "/nestedBean/int", "BbBb", "BbBbB"); [EOL]     assertValueAndPointer("/nestedBean/strings", bean.getNestedBean().getStrings(), "/nestedBean/strings", "BbBb", "BbBbC"); [EOL]     assertNullPointer("/nestedBean/foo", "/nestedBean/foo", "BbBn"); [EOL]     assertNullPointer("/map/foo", "/map[@name='foo']", "BbDd"); [EOL]     assertValueAndPointer("/list/int", new Integer(1), "/list[3]/int", "BbBb", "BbBbB"); [EOL]     assertNullPointer("/list/foo", "/list[1]/foo", "BbBn"); [EOL]     assertNullPointer("/nestedBean/foo/bar", "/nestedBean/foo/bar", "BbBnNn"); [EOL]     assertNullPointer("/list/int/bar", "/list[3]/int/bar", "BbBbBn"); [EOL]     assertNullPointer("/list/foo/bar", "/list[1]/foo/bar", "BbBnNn"); [EOL]     assertNullPointer("/map/foo/bar", "/map[@name='foo']/bar", "BbDdNn"); [EOL]     assertValueAndPointer("/map/Key1", "Value 1", "/map[@name='Key1']", "BbDd", "BbDdB"); [EOL]     assertValueAndPointer("/integers", bean.getIntegers(), "/integers", "Bb", "BbC"); [EOL] }
public void testDoStepNoPredicatesPropertyOwner() { [EOL]     assertValueAndPointer("/int", new Integer(1), "/int", "Bb", "BbB"); [EOL]     assertValueAndPointer("/./int", new Integer(1), "/int", "Bb", "BbB"); [EOL]     assertNullPointer("/foo", "/foo", "Bn"); [EOL]     assertValueAndPointer("/nestedBean/int", new Integer(1), "/nestedBean/int", "BbBb", "BbBbB"); [EOL]     assertValueAndPointer("/nestedBean/strings", bean.getNestedBean().getStrings(), "/nestedBean/strings", "BbBb", "BbBbC"); [EOL]     assertNullPointer("/nestedBean/foo", "/nestedBean/foo", "BbBn"); [EOL]     assertNullPointer("/map/foo", "/map[@name='foo']", "BbDd"); [EOL]     assertValueAndPointer("/list/int", new Integer(1), "/list[3]/int", "BbBb", "BbBbB"); [EOL]     assertNullPointer("/list/foo", "/list[1]/foo", "BbBn"); [EOL]     assertNullPointer("/nestedBean/foo/bar", "/nestedBean/foo/bar", "BbBnNn"); [EOL]     assertNullPointer("/list/int/bar", "/list[3]/int/bar", "BbBbBn"); [EOL]     assertNullPointer("/list/foo/bar", "/list[1]/foo/bar", "BbBnNn"); [EOL]     assertNullPointer("/map/foo/bar", "/map[@name='foo']/bar", "BbDdNn"); [EOL]     assertValueAndPointer("/map/Key1", "Value 1", "/map[@name='Key1']", "BbDd", "BbDdB"); [EOL]     assertValueAndPointer("/integers", bean.getIntegers(), "/integers", "Bb", "BbC"); [EOL] }
public void testDoStepNoPredicatesPropertyOwner() { [EOL]     assertValueAndPointer("/int", new Integer(1), "/int", "Bb", "BbB"); [EOL]     assertValueAndPointer("/./int", new Integer(1), "/int", "Bb", "BbB"); [EOL]     assertNullPointer("/foo", "/foo", "Bn"); [EOL]     assertValueAndPointer("/nestedBean/int", new Integer(1), "/nestedBean/int", "BbBb", "BbBbB"); [EOL]     assertValueAndPointer("/nestedBean/strings", bean.getNestedBean().getStrings(), "/nestedBean/strings", "BbBb", "BbBbC"); [EOL]     assertNullPointer("/nestedBean/foo", "/nestedBean/foo", "BbBn"); [EOL]     assertNullPointer("/map/foo", "/map[@name='foo']", "BbDd"); [EOL]     assertValueAndPointer("/list/int", new Integer(1), "/list[3]/int", "BbBb", "BbBbB"); [EOL]     assertNullPointer("/list/foo", "/list[1]/foo", "BbBn"); [EOL]     assertNullPointer("/nestedBean/foo/bar", "/nestedBean/foo/bar", "BbBnNn"); [EOL]     assertNullPointer("/list/int/bar", "/list[3]/int/bar", "BbBbBn"); [EOL]     assertNullPointer("/list/foo/bar", "/list[1]/foo/bar", "BbBnNn"); [EOL]     assertNullPointer("/map/foo/bar", "/map[@name='foo']/bar", "BbDdNn"); [EOL]     assertValueAndPointer("/map/Key1", "Value 1", "/map[@name='Key1']", "BbDd", "BbDdB"); [EOL]     assertValueAndPointer("/integers", bean.getIntegers(), "/integers", "Bb", "BbC"); [EOL] }
public void testDoStepNoPredicatesPropertyOwner() { [EOL]     assertValueAndPointer("/int", new Integer(1), "/int", "Bb", "BbB"); [EOL]     assertValueAndPointer("/./int", new Integer(1), "/int", "Bb", "BbB"); [EOL]     assertNullPointer("/foo", "/foo", "Bn"); [EOL]     assertValueAndPointer("/nestedBean/int", new Integer(1), "/nestedBean/int", "BbBb", "BbBbB"); [EOL]     assertValueAndPointer("/nestedBean/strings", bean.getNestedBean().getStrings(), "/nestedBean/strings", "BbBb", "BbBbC"); [EOL]     assertNullPointer("/nestedBean/foo", "/nestedBean/foo", "BbBn"); [EOL]     assertNullPointer("/map/foo", "/map[@name='foo']", "BbDd"); [EOL]     assertValueAndPointer("/list/int", new Integer(1), "/list[3]/int", "BbBb", "BbBbB"); [EOL]     assertNullPointer("/list/foo", "/list[1]/foo", "BbBn"); [EOL]     assertNullPointer("/nestedBean/foo/bar", "/nestedBean/foo/bar", "BbBnNn"); [EOL]     assertNullPointer("/list/int/bar", "/list[3]/int/bar", "BbBbBn"); [EOL]     assertNullPointer("/list/foo/bar", "/list[1]/foo/bar", "BbBnNn"); [EOL]     assertNullPointer("/map/foo/bar", "/map[@name='foo']/bar", "BbDdNn"); [EOL]     assertValueAndPointer("/map/Key1", "Value 1", "/map[@name='Key1']", "BbDd", "BbDdB"); [EOL]     assertValueAndPointer("/integers", bean.getIntegers(), "/integers", "Bb", "BbC"); [EOL] }
public void testDoStepNoPredicatesPropertyOwner() { [EOL]     assertValueAndPointer("/int", new Integer(1), "/int", "Bb", "BbB"); [EOL]     assertValueAndPointer("/./int", new Integer(1), "/int", "Bb", "BbB"); [EOL]     assertNullPointer("/foo", "/foo", "Bn"); [EOL]     assertValueAndPointer("/nestedBean/int", new Integer(1), "/nestedBean/int", "BbBb", "BbBbB"); [EOL]     assertValueAndPointer("/nestedBean/strings", bean.getNestedBean().getStrings(), "/nestedBean/strings", "BbBb", "BbBbC"); [EOL]     assertNullPointer("/nestedBean/foo", "/nestedBean/foo", "BbBn"); [EOL]     assertNullPointer("/map/foo", "/map[@name='foo']", "BbDd"); [EOL]     assertValueAndPointer("/list/int", new Integer(1), "/list[3]/int", "BbBb", "BbBbB"); [EOL]     assertNullPointer("/list/foo", "/list[1]/foo", "BbBn"); [EOL]     assertNullPointer("/nestedBean/foo/bar", "/nestedBean/foo/bar", "BbBnNn"); [EOL]     assertNullPointer("/list/int/bar", "/list[3]/int/bar", "BbBbBn"); [EOL]     assertNullPointer("/list/foo/bar", "/list[1]/foo/bar", "BbBnNn"); [EOL]     assertNullPointer("/map/foo/bar", "/map[@name='foo']/bar", "BbDdNn"); [EOL]     assertValueAndPointer("/map/Key1", "Value 1", "/map[@name='Key1']", "BbDd", "BbDdB"); [EOL]     assertValueAndPointer("/integers", bean.getIntegers(), "/integers", "Bb", "BbC"); [EOL] }
public void testDoPredicateName() { [EOL]     assertValueAndPointer("/nestedBean[@name='int']", new Integer(1), "/nestedBean/int", "BbBb", "BbBbB"); [EOL]     assertValueAndPointer("/.[@name='int']", new Integer(1), "/int", "Bb", "BbB"); [EOL]     assertValueAndPointer("/map[@name='Key1']", "Value 1", "/map[@name='Key1']", "BbDd", "BbDdB"); [EOL]     assertValueAndPointer("/nestedBean[@name='strings']", bean.getNestedBean().getStrings(), "/nestedBean/strings", "BbBb", "BbBbC"); [EOL]     assertNullPointer("/nestedBean[@name='foo']", "/nestedBean[@name='foo']", "BbBn"); [EOL]     assertValueAndPointer("/map[@name='Key3']", bean.getMap().get("Key3"), "/map[@name='Key3']", "BbDd", "BbDdC"); [EOL]     assertNullPointer("/map[@name='foo']", "/map[@name='foo']", "BbDd"); [EOL]     assertValueAndPointer("/list[@name='fruitco']", context.getValue("/vendor"), "/list[5]", "BbCM"); [EOL]     assertValueAndPointer("/map/Key3[@name='key']/name", "Name 9", "/map[@name='Key3'][4][@name='key']/name", "BbDdCDdBb", "BbDdCDdBbB"); [EOL]     assertValueAndPointer("map/Key3[@name='fruitco']", context.getValue("/vendor"), "/map[@name='Key3'][3]", "BbDdCM"); [EOL]     assertValueAndPointer("/vendor[@name='fruitco']", context.getValue("/vendor"), "/vendor", "BbM"); [EOL]     assertNullPointer("/vendor[@name='foo']", "/vendor[@name='foo']", "BbMn"); [EOL]     assertNullPointer("/vendor[@name='foo'][3]", "/vendor[@name='foo'][3]", "BbMn"); [EOL]     assertNullPointer("/nestedBean[@name='foo']/bar", "/nestedBean[@name='foo']/bar", "BbBnNn"); [EOL]     assertNullPointer("/map[@name='foo']/bar", "/map[@name='foo']/bar", "BbDdNn"); [EOL]     assertNullPointer("/vendor[@name='foo']/bar", "/vendor[@name='foo']/bar", "BbMnNn"); [EOL]     assertNullPointer("/vendor[@name='foo'][3]/bar", "/vendor[@name='foo'][3]/bar", "BbMnNn"); [EOL]     assertValueAndPointer("/map[@name='Key2'][@name='name']", "Name 6", "/map[@name='Key2']/name", "BbDdBb", "BbDdBbB"); [EOL]     assertValueAndPointer("/map[@name='Key2'][@name='strings'][2]", "String 2", "/map[@name='Key2']/strings[2]", "BbDdBb", "BbDdBbB"); [EOL]     assertValueAndPointer("map[@name='Key5'][@name='key']/name", "Name 9", "/map[@name='Key5'][@name='key']/name", "BbDdDdBb", "BbDdDdBbB"); [EOL]     assertNullPointer("map[@name='Key2'][@name='foo']", "/map[@name='Key2'][@name='foo']", "BbDdBn"); [EOL]     assertNullPointer("map[@name='Key2'][@name='foo'][@name='bar']", "/map[@name='Key2'][@name='foo'][@name='bar']", "BbDdBnNn"); [EOL]     assertValueAndPointer("map[@name='Key4'][@name='fruitco']", context.getValue("/vendor"), "/map[@name='Key4']", "BbDdM"); [EOL] }
public void testDoPredicateName() { [EOL]     assertValueAndPointer("/nestedBean[@name='int']", new Integer(1), "/nestedBean/int", "BbBb", "BbBbB"); [EOL]     assertValueAndPointer("/.[@name='int']", new Integer(1), "/int", "Bb", "BbB"); [EOL]     assertValueAndPointer("/map[@name='Key1']", "Value 1", "/map[@name='Key1']", "BbDd", "BbDdB"); [EOL]     assertValueAndPointer("/nestedBean[@name='strings']", bean.getNestedBean().getStrings(), "/nestedBean/strings", "BbBb", "BbBbC"); [EOL]     assertNullPointer("/nestedBean[@name='foo']", "/nestedBean[@name='foo']", "BbBn"); [EOL]     assertValueAndPointer("/map[@name='Key3']", bean.getMap().get("Key3"), "/map[@name='Key3']", "BbDd", "BbDdC"); [EOL]     assertNullPointer("/map[@name='foo']", "/map[@name='foo']", "BbDd"); [EOL]     assertValueAndPointer("/list[@name='fruitco']", context.getValue("/vendor"), "/list[5]", "BbCM"); [EOL]     assertValueAndPointer("/map/Key3[@name='key']/name", "Name 9", "/map[@name='Key3'][4][@name='key']/name", "BbDdCDdBb", "BbDdCDdBbB"); [EOL]     assertValueAndPointer("map/Key3[@name='fruitco']", context.getValue("/vendor"), "/map[@name='Key3'][3]", "BbDdCM"); [EOL]     assertValueAndPointer("/vendor[@name='fruitco']", context.getValue("/vendor"), "/vendor", "BbM"); [EOL]     assertNullPointer("/vendor[@name='foo']", "/vendor[@name='foo']", "BbMn"); [EOL]     assertNullPointer("/vendor[@name='foo'][3]", "/vendor[@name='foo'][3]", "BbMn"); [EOL]     assertNullPointer("/nestedBean[@name='foo']/bar", "/nestedBean[@name='foo']/bar", "BbBnNn"); [EOL]     assertNullPointer("/map[@name='foo']/bar", "/map[@name='foo']/bar", "BbDdNn"); [EOL]     assertNullPointer("/vendor[@name='foo']/bar", "/vendor[@name='foo']/bar", "BbMnNn"); [EOL]     assertNullPointer("/vendor[@name='foo'][3]/bar", "/vendor[@name='foo'][3]/bar", "BbMnNn"); [EOL]     assertValueAndPointer("/map[@name='Key2'][@name='name']", "Name 6", "/map[@name='Key2']/name", "BbDdBb", "BbDdBbB"); [EOL]     assertValueAndPointer("/map[@name='Key2'][@name='strings'][2]", "String 2", "/map[@name='Key2']/strings[2]", "BbDdBb", "BbDdBbB"); [EOL]     assertValueAndPointer("map[@name='Key5'][@name='key']/name", "Name 9", "/map[@name='Key5'][@name='key']/name", "BbDdDdBb", "BbDdDdBbB"); [EOL]     assertNullPointer("map[@name='Key2'][@name='foo']", "/map[@name='Key2'][@name='foo']", "BbDdBn"); [EOL]     assertNullPointer("map[@name='Key2'][@name='foo'][@name='bar']", "/map[@name='Key2'][@name='foo'][@name='bar']", "BbDdBnNn"); [EOL]     assertValueAndPointer("map[@name='Key4'][@name='fruitco']", context.getValue("/vendor"), "/map[@name='Key4']", "BbDdM"); [EOL] }
public void testDoStepNoPredicatesPropertyOwner() { [EOL]     assertValueAndPointer("/int", new Integer(1), "/int", "Bb", "BbB"); [EOL]     assertValueAndPointer("/./int", new Integer(1), "/int", "Bb", "BbB"); [EOL]     assertNullPointer("/foo", "/foo", "Bn"); [EOL]     assertValueAndPointer("/nestedBean/int", new Integer(1), "/nestedBean/int", "BbBb", "BbBbB"); [EOL]     assertValueAndPointer("/nestedBean/strings", bean.getNestedBean().getStrings(), "/nestedBean/strings", "BbBb", "BbBbC"); [EOL]     assertNullPointer("/nestedBean/foo", "/nestedBean/foo", "BbBn"); [EOL]     assertNullPointer("/map/foo", "/map[@name='foo']", "BbDd"); [EOL]     assertValueAndPointer("/list/int", new Integer(1), "/list[3]/int", "BbBb", "BbBbB"); [EOL]     assertNullPointer("/list/foo", "/list[1]/foo", "BbBn"); [EOL]     assertNullPointer("/nestedBean/foo/bar", "/nestedBean/foo/bar", "BbBnNn"); [EOL]     assertNullPointer("/list/int/bar", "/list[3]/int/bar", "BbBbBn"); [EOL]     assertNullPointer("/list/foo/bar", "/list[1]/foo/bar", "BbBnNn"); [EOL]     assertNullPointer("/map/foo/bar", "/map[@name='foo']/bar", "BbDdNn"); [EOL]     assertValueAndPointer("/map/Key1", "Value 1", "/map[@name='Key1']", "BbDd", "BbDdB"); [EOL]     assertValueAndPointer("/integers", bean.getIntegers(), "/integers", "Bb", "BbC"); [EOL] }
public void testDoStepNoPredicatesPropertyOwner() { [EOL]     assertValueAndPointer("/int", new Integer(1), "/int", "Bb", "BbB"); [EOL]     assertValueAndPointer("/./int", new Integer(1), "/int", "Bb", "BbB"); [EOL]     assertNullPointer("/foo", "/foo", "Bn"); [EOL]     assertValueAndPointer("/nestedBean/int", new Integer(1), "/nestedBean/int", "BbBb", "BbBbB"); [EOL]     assertValueAndPointer("/nestedBean/strings", bean.getNestedBean().getStrings(), "/nestedBean/strings", "BbBb", "BbBbC"); [EOL]     assertNullPointer("/nestedBean/foo", "/nestedBean/foo", "BbBn"); [EOL]     assertNullPointer("/map/foo", "/map[@name='foo']", "BbDd"); [EOL]     assertValueAndPointer("/list/int", new Integer(1), "/list[3]/int", "BbBb", "BbBbB"); [EOL]     assertNullPointer("/list/foo", "/list[1]/foo", "BbBn"); [EOL]     assertNullPointer("/nestedBean/foo/bar", "/nestedBean/foo/bar", "BbBnNn"); [EOL]     assertNullPointer("/list/int/bar", "/list[3]/int/bar", "BbBbBn"); [EOL]     assertNullPointer("/list/foo/bar", "/list[1]/foo/bar", "BbBnNn"); [EOL]     assertNullPointer("/map/foo/bar", "/map[@name='foo']/bar", "BbDdNn"); [EOL]     assertValueAndPointer("/map/Key1", "Value 1", "/map[@name='Key1']", "BbDd", "BbDdB"); [EOL]     assertValueAndPointer("/integers", bean.getIntegers(), "/integers", "Bb", "BbC"); [EOL] }
public void testDoStepNoPredicatesPropertyOwner() { [EOL]     assertValueAndPointer("/int", new Integer(1), "/int", "Bb", "BbB"); [EOL]     assertValueAndPointer("/./int", new Integer(1), "/int", "Bb", "BbB"); [EOL]     assertNullPointer("/foo", "/foo", "Bn"); [EOL]     assertValueAndPointer("/nestedBean/int", new Integer(1), "/nestedBean/int", "BbBb", "BbBbB"); [EOL]     assertValueAndPointer("/nestedBean/strings", bean.getNestedBean().getStrings(), "/nestedBean/strings", "BbBb", "BbBbC"); [EOL]     assertNullPointer("/nestedBean/foo", "/nestedBean/foo", "BbBn"); [EOL]     assertNullPointer("/map/foo", "/map[@name='foo']", "BbDd"); [EOL]     assertValueAndPointer("/list/int", new Integer(1), "/list[3]/int", "BbBb", "BbBbB"); [EOL]     assertNullPointer("/list/foo", "/list[1]/foo", "BbBn"); [EOL]     assertNullPointer("/nestedBean/foo/bar", "/nestedBean/foo/bar", "BbBnNn"); [EOL]     assertNullPointer("/list/int/bar", "/list[3]/int/bar", "BbBbBn"); [EOL]     assertNullPointer("/list/foo/bar", "/list[1]/foo/bar", "BbBnNn"); [EOL]     assertNullPointer("/map/foo/bar", "/map[@name='foo']/bar", "BbDdNn"); [EOL]     assertValueAndPointer("/map/Key1", "Value 1", "/map[@name='Key1']", "BbDd", "BbDdB"); [EOL]     assertValueAndPointer("/integers", bean.getIntegers(), "/integers", "Bb", "BbC"); [EOL] }
public void testDoStepNoPredicatesPropertyOwner() { [EOL]     assertValueAndPointer("/int", new Integer(1), "/int", "Bb", "BbB"); [EOL]     assertValueAndPointer("/./int", new Integer(1), "/int", "Bb", "BbB"); [EOL]     assertNullPointer("/foo", "/foo", "Bn"); [EOL]     assertValueAndPointer("/nestedBean/int", new Integer(1), "/nestedBean/int", "BbBb", "BbBbB"); [EOL]     assertValueAndPointer("/nestedBean/strings", bean.getNestedBean().getStrings(), "/nestedBean/strings", "BbBb", "BbBbC"); [EOL]     assertNullPointer("/nestedBean/foo", "/nestedBean/foo", "BbBn"); [EOL]     assertNullPointer("/map/foo", "/map[@name='foo']", "BbDd"); [EOL]     assertValueAndPointer("/list/int", new Integer(1), "/list[3]/int", "BbBb", "BbBbB"); [EOL]     assertNullPointer("/list/foo", "/list[1]/foo", "BbBn"); [EOL]     assertNullPointer("/nestedBean/foo/bar", "/nestedBean/foo/bar", "BbBnNn"); [EOL]     assertNullPointer("/list/int/bar", "/list[3]/int/bar", "BbBbBn"); [EOL]     assertNullPointer("/list/foo/bar", "/list[1]/foo/bar", "BbBnNn"); [EOL]     assertNullPointer("/map/foo/bar", "/map[@name='foo']/bar", "BbDdNn"); [EOL]     assertValueAndPointer("/map/Key1", "Value 1", "/map[@name='Key1']", "BbDd", "BbDdB"); [EOL]     assertValueAndPointer("/integers", bean.getIntegers(), "/integers", "Bb", "BbC"); [EOL] }
public void testDoPredicateName() { [EOL]     assertValueAndPointer("/nestedBean[@name='int']", new Integer(1), "/nestedBean/int", "BbBb", "BbBbB"); [EOL]     assertValueAndPointer("/.[@name='int']", new Integer(1), "/int", "Bb", "BbB"); [EOL]     assertValueAndPointer("/map[@name='Key1']", "Value 1", "/map[@name='Key1']", "BbDd", "BbDdB"); [EOL]     assertValueAndPointer("/nestedBean[@name='strings']", bean.getNestedBean().getStrings(), "/nestedBean/strings", "BbBb", "BbBbC"); [EOL]     assertNullPointer("/nestedBean[@name='foo']", "/nestedBean[@name='foo']", "BbBn"); [EOL]     assertValueAndPointer("/map[@name='Key3']", bean.getMap().get("Key3"), "/map[@name='Key3']", "BbDd", "BbDdC"); [EOL]     assertNullPointer("/map[@name='foo']", "/map[@name='foo']", "BbDd"); [EOL]     assertValueAndPointer("/list[@name='fruitco']", context.getValue("/vendor"), "/list[5]", "BbCM"); [EOL]     assertValueAndPointer("/map/Key3[@name='key']/name", "Name 9", "/map[@name='Key3'][4][@name='key']/name", "BbDdCDdBb", "BbDdCDdBbB"); [EOL]     assertValueAndPointer("map/Key3[@name='fruitco']", context.getValue("/vendor"), "/map[@name='Key3'][3]", "BbDdCM"); [EOL]     assertValueAndPointer("/vendor[@name='fruitco']", context.getValue("/vendor"), "/vendor", "BbM"); [EOL]     assertNullPointer("/vendor[@name='foo']", "/vendor[@name='foo']", "BbMn"); [EOL]     assertNullPointer("/vendor[@name='foo'][3]", "/vendor[@name='foo'][3]", "BbMn"); [EOL]     assertNullPointer("/nestedBean[@name='foo']/bar", "/nestedBean[@name='foo']/bar", "BbBnNn"); [EOL]     assertNullPointer("/map[@name='foo']/bar", "/map[@name='foo']/bar", "BbDdNn"); [EOL]     assertNullPointer("/vendor[@name='foo']/bar", "/vendor[@name='foo']/bar", "BbMnNn"); [EOL]     assertNullPointer("/vendor[@name='foo'][3]/bar", "/vendor[@name='foo'][3]/bar", "BbMnNn"); [EOL]     assertValueAndPointer("/map[@name='Key2'][@name='name']", "Name 6", "/map[@name='Key2']/name", "BbDdBb", "BbDdBbB"); [EOL]     assertValueAndPointer("/map[@name='Key2'][@name='strings'][2]", "String 2", "/map[@name='Key2']/strings[2]", "BbDdBb", "BbDdBbB"); [EOL]     assertValueAndPointer("map[@name='Key5'][@name='key']/name", "Name 9", "/map[@name='Key5'][@name='key']/name", "BbDdDdBb", "BbDdDdBbB"); [EOL]     assertNullPointer("map[@name='Key2'][@name='foo']", "/map[@name='Key2'][@name='foo']", "BbDdBn"); [EOL]     assertNullPointer("map[@name='Key2'][@name='foo'][@name='bar']", "/map[@name='Key2'][@name='foo'][@name='bar']", "BbDdBnNn"); [EOL]     assertValueAndPointer("map[@name='Key4'][@name='fruitco']", context.getValue("/vendor"), "/map[@name='Key4']", "BbDdM"); [EOL] }
public void testDoPredicateName() { [EOL]     assertValueAndPointer("/nestedBean[@name='int']", new Integer(1), "/nestedBean/int", "BbBb", "BbBbB"); [EOL]     assertValueAndPointer("/.[@name='int']", new Integer(1), "/int", "Bb", "BbB"); [EOL]     assertValueAndPointer("/map[@name='Key1']", "Value 1", "/map[@name='Key1']", "BbDd", "BbDdB"); [EOL]     assertValueAndPointer("/nestedBean[@name='strings']", bean.getNestedBean().getStrings(), "/nestedBean/strings", "BbBb", "BbBbC"); [EOL]     assertNullPointer("/nestedBean[@name='foo']", "/nestedBean[@name='foo']", "BbBn"); [EOL]     assertValueAndPointer("/map[@name='Key3']", bean.getMap().get("Key3"), "/map[@name='Key3']", "BbDd", "BbDdC"); [EOL]     assertNullPointer("/map[@name='foo']", "/map[@name='foo']", "BbDd"); [EOL]     assertValueAndPointer("/list[@name='fruitco']", context.getValue("/vendor"), "/list[5]", "BbCM"); [EOL]     assertValueAndPointer("/map/Key3[@name='key']/name", "Name 9", "/map[@name='Key3'][4][@name='key']/name", "BbDdCDdBb", "BbDdCDdBbB"); [EOL]     assertValueAndPointer("map/Key3[@name='fruitco']", context.getValue("/vendor"), "/map[@name='Key3'][3]", "BbDdCM"); [EOL]     assertValueAndPointer("/vendor[@name='fruitco']", context.getValue("/vendor"), "/vendor", "BbM"); [EOL]     assertNullPointer("/vendor[@name='foo']", "/vendor[@name='foo']", "BbMn"); [EOL]     assertNullPointer("/vendor[@name='foo'][3]", "/vendor[@name='foo'][3]", "BbMn"); [EOL]     assertNullPointer("/nestedBean[@name='foo']/bar", "/nestedBean[@name='foo']/bar", "BbBnNn"); [EOL]     assertNullPointer("/map[@name='foo']/bar", "/map[@name='foo']/bar", "BbDdNn"); [EOL]     assertNullPointer("/vendor[@name='foo']/bar", "/vendor[@name='foo']/bar", "BbMnNn"); [EOL]     assertNullPointer("/vendor[@name='foo'][3]/bar", "/vendor[@name='foo'][3]/bar", "BbMnNn"); [EOL]     assertValueAndPointer("/map[@name='Key2'][@name='name']", "Name 6", "/map[@name='Key2']/name", "BbDdBb", "BbDdBbB"); [EOL]     assertValueAndPointer("/map[@name='Key2'][@name='strings'][2]", "String 2", "/map[@name='Key2']/strings[2]", "BbDdBb", "BbDdBbB"); [EOL]     assertValueAndPointer("map[@name='Key5'][@name='key']/name", "Name 9", "/map[@name='Key5'][@name='key']/name", "BbDdDdBb", "BbDdDdBbB"); [EOL]     assertNullPointer("map[@name='Key2'][@name='foo']", "/map[@name='Key2'][@name='foo']", "BbDdBn"); [EOL]     assertNullPointer("map[@name='Key2'][@name='foo'][@name='bar']", "/map[@name='Key2'][@name='foo'][@name='bar']", "BbDdBnNn"); [EOL]     assertValueAndPointer("map[@name='Key4'][@name='fruitco']", context.getValue("/vendor"), "/map[@name='Key4']", "BbDdM"); [EOL] }
public void testDoPredicateName() { [EOL]     assertValueAndPointer("/nestedBean[@name='int']", new Integer(1), "/nestedBean/int", "BbBb", "BbBbB"); [EOL]     assertValueAndPointer("/.[@name='int']", new Integer(1), "/int", "Bb", "BbB"); [EOL]     assertValueAndPointer("/map[@name='Key1']", "Value 1", "/map[@name='Key1']", "BbDd", "BbDdB"); [EOL]     assertValueAndPointer("/nestedBean[@name='strings']", bean.getNestedBean().getStrings(), "/nestedBean/strings", "BbBb", "BbBbC"); [EOL]     assertNullPointer("/nestedBean[@name='foo']", "/nestedBean[@name='foo']", "BbBn"); [EOL]     assertValueAndPointer("/map[@name='Key3']", bean.getMap().get("Key3"), "/map[@name='Key3']", "BbDd", "BbDdC"); [EOL]     assertNullPointer("/map[@name='foo']", "/map[@name='foo']", "BbDd"); [EOL]     assertValueAndPointer("/list[@name='fruitco']", context.getValue("/vendor"), "/list[5]", "BbCM"); [EOL]     assertValueAndPointer("/map/Key3[@name='key']/name", "Name 9", "/map[@name='Key3'][4][@name='key']/name", "BbDdCDdBb", "BbDdCDdBbB"); [EOL]     assertValueAndPointer("map/Key3[@name='fruitco']", context.getValue("/vendor"), "/map[@name='Key3'][3]", "BbDdCM"); [EOL]     assertValueAndPointer("/vendor[@name='fruitco']", context.getValue("/vendor"), "/vendor", "BbM"); [EOL]     assertNullPointer("/vendor[@name='foo']", "/vendor[@name='foo']", "BbMn"); [EOL]     assertNullPointer("/vendor[@name='foo'][3]", "/vendor[@name='foo'][3]", "BbMn"); [EOL]     assertNullPointer("/nestedBean[@name='foo']/bar", "/nestedBean[@name='foo']/bar", "BbBnNn"); [EOL]     assertNullPointer("/map[@name='foo']/bar", "/map[@name='foo']/bar", "BbDdNn"); [EOL]     assertNullPointer("/vendor[@name='foo']/bar", "/vendor[@name='foo']/bar", "BbMnNn"); [EOL]     assertNullPointer("/vendor[@name='foo'][3]/bar", "/vendor[@name='foo'][3]/bar", "BbMnNn"); [EOL]     assertValueAndPointer("/map[@name='Key2'][@name='name']", "Name 6", "/map[@name='Key2']/name", "BbDdBb", "BbDdBbB"); [EOL]     assertValueAndPointer("/map[@name='Key2'][@name='strings'][2]", "String 2", "/map[@name='Key2']/strings[2]", "BbDdBb", "BbDdBbB"); [EOL]     assertValueAndPointer("map[@name='Key5'][@name='key']/name", "Name 9", "/map[@name='Key5'][@name='key']/name", "BbDdDdBb", "BbDdDdBbB"); [EOL]     assertNullPointer("map[@name='Key2'][@name='foo']", "/map[@name='Key2'][@name='foo']", "BbDdBn"); [EOL]     assertNullPointer("map[@name='Key2'][@name='foo'][@name='bar']", "/map[@name='Key2'][@name='foo'][@name='bar']", "BbDdBnNn"); [EOL]     assertValueAndPointer("map[@name='Key4'][@name='fruitco']", context.getValue("/vendor"), "/map[@name='Key4']", "BbDdM"); [EOL] }
public void testDoPredicateName() { [EOL]     assertValueAndPointer("/nestedBean[@name='int']", new Integer(1), "/nestedBean/int", "BbBb", "BbBbB"); [EOL]     assertValueAndPointer("/.[@name='int']", new Integer(1), "/int", "Bb", "BbB"); [EOL]     assertValueAndPointer("/map[@name='Key1']", "Value 1", "/map[@name='Key1']", "BbDd", "BbDdB"); [EOL]     assertValueAndPointer("/nestedBean[@name='strings']", bean.getNestedBean().getStrings(), "/nestedBean/strings", "BbBb", "BbBbC"); [EOL]     assertNullPointer("/nestedBean[@name='foo']", "/nestedBean[@name='foo']", "BbBn"); [EOL]     assertValueAndPointer("/map[@name='Key3']", bean.getMap().get("Key3"), "/map[@name='Key3']", "BbDd", "BbDdC"); [EOL]     assertNullPointer("/map[@name='foo']", "/map[@name='foo']", "BbDd"); [EOL]     assertValueAndPointer("/list[@name='fruitco']", context.getValue("/vendor"), "/list[5]", "BbCM"); [EOL]     assertValueAndPointer("/map/Key3[@name='key']/name", "Name 9", "/map[@name='Key3'][4][@name='key']/name", "BbDdCDdBb", "BbDdCDdBbB"); [EOL]     assertValueAndPointer("map/Key3[@name='fruitco']", context.getValue("/vendor"), "/map[@name='Key3'][3]", "BbDdCM"); [EOL]     assertValueAndPointer("/vendor[@name='fruitco']", context.getValue("/vendor"), "/vendor", "BbM"); [EOL]     assertNullPointer("/vendor[@name='foo']", "/vendor[@name='foo']", "BbMn"); [EOL]     assertNullPointer("/vendor[@name='foo'][3]", "/vendor[@name='foo'][3]", "BbMn"); [EOL]     assertNullPointer("/nestedBean[@name='foo']/bar", "/nestedBean[@name='foo']/bar", "BbBnNn"); [EOL]     assertNullPointer("/map[@name='foo']/bar", "/map[@name='foo']/bar", "BbDdNn"); [EOL]     assertNullPointer("/vendor[@name='foo']/bar", "/vendor[@name='foo']/bar", "BbMnNn"); [EOL]     assertNullPointer("/vendor[@name='foo'][3]/bar", "/vendor[@name='foo'][3]/bar", "BbMnNn"); [EOL]     assertValueAndPointer("/map[@name='Key2'][@name='name']", "Name 6", "/map[@name='Key2']/name", "BbDdBb", "BbDdBbB"); [EOL]     assertValueAndPointer("/map[@name='Key2'][@name='strings'][2]", "String 2", "/map[@name='Key2']/strings[2]", "BbDdBb", "BbDdBbB"); [EOL]     assertValueAndPointer("map[@name='Key5'][@name='key']/name", "Name 9", "/map[@name='Key5'][@name='key']/name", "BbDdDdBb", "BbDdDdBbB"); [EOL]     assertNullPointer("map[@name='Key2'][@name='foo']", "/map[@name='Key2'][@name='foo']", "BbDdBn"); [EOL]     assertNullPointer("map[@name='Key2'][@name='foo'][@name='bar']", "/map[@name='Key2'][@name='foo'][@name='bar']", "BbDdBnNn"); [EOL]     assertValueAndPointer("map[@name='Key4'][@name='fruitco']", context.getValue("/vendor"), "/map[@name='Key4']", "BbDdM"); [EOL] }
public void testDoPredicateName() { [EOL]     assertValueAndPointer("/nestedBean[@name='int']", new Integer(1), "/nestedBean/int", "BbBb", "BbBbB"); [EOL]     assertValueAndPointer("/.[@name='int']", new Integer(1), "/int", "Bb", "BbB"); [EOL]     assertValueAndPointer("/map[@name='Key1']", "Value 1", "/map[@name='Key1']", "BbDd", "BbDdB"); [EOL]     assertValueAndPointer("/nestedBean[@name='strings']", bean.getNestedBean().getStrings(), "/nestedBean/strings", "BbBb", "BbBbC"); [EOL]     assertNullPointer("/nestedBean[@name='foo']", "/nestedBean[@name='foo']", "BbBn"); [EOL]     assertValueAndPointer("/map[@name='Key3']", bean.getMap().get("Key3"), "/map[@name='Key3']", "BbDd", "BbDdC"); [EOL]     assertNullPointer("/map[@name='foo']", "/map[@name='foo']", "BbDd"); [EOL]     assertValueAndPointer("/list[@name='fruitco']", context.getValue("/vendor"), "/list[5]", "BbCM"); [EOL]     assertValueAndPointer("/map/Key3[@name='key']/name", "Name 9", "/map[@name='Key3'][4][@name='key']/name", "BbDdCDdBb", "BbDdCDdBbB"); [EOL]     assertValueAndPointer("map/Key3[@name='fruitco']", context.getValue("/vendor"), "/map[@name='Key3'][3]", "BbDdCM"); [EOL]     assertValueAndPointer("/vendor[@name='fruitco']", context.getValue("/vendor"), "/vendor", "BbM"); [EOL]     assertNullPointer("/vendor[@name='foo']", "/vendor[@name='foo']", "BbMn"); [EOL]     assertNullPointer("/vendor[@name='foo'][3]", "/vendor[@name='foo'][3]", "BbMn"); [EOL]     assertNullPointer("/nestedBean[@name='foo']/bar", "/nestedBean[@name='foo']/bar", "BbBnNn"); [EOL]     assertNullPointer("/map[@name='foo']/bar", "/map[@name='foo']/bar", "BbDdNn"); [EOL]     assertNullPointer("/vendor[@name='foo']/bar", "/vendor[@name='foo']/bar", "BbMnNn"); [EOL]     assertNullPointer("/vendor[@name='foo'][3]/bar", "/vendor[@name='foo'][3]/bar", "BbMnNn"); [EOL]     assertValueAndPointer("/map[@name='Key2'][@name='name']", "Name 6", "/map[@name='Key2']/name", "BbDdBb", "BbDdBbB"); [EOL]     assertValueAndPointer("/map[@name='Key2'][@name='strings'][2]", "String 2", "/map[@name='Key2']/strings[2]", "BbDdBb", "BbDdBbB"); [EOL]     assertValueAndPointer("map[@name='Key5'][@name='key']/name", "Name 9", "/map[@name='Key5'][@name='key']/name", "BbDdDdBb", "BbDdDdBbB"); [EOL]     assertNullPointer("map[@name='Key2'][@name='foo']", "/map[@name='Key2'][@name='foo']", "BbDdBn"); [EOL]     assertNullPointer("map[@name='Key2'][@name='foo'][@name='bar']", "/map[@name='Key2'][@name='foo'][@name='bar']", "BbDdBnNn"); [EOL]     assertValueAndPointer("map[@name='Key4'][@name='fruitco']", context.getValue("/vendor"), "/map[@name='Key4']", "BbDdM"); [EOL] }
public void testDoPredicateName() { [EOL]     assertValueAndPointer("/nestedBean[@name='int']", new Integer(1), "/nestedBean/int", "BbBb", "BbBbB"); [EOL]     assertValueAndPointer("/.[@name='int']", new Integer(1), "/int", "Bb", "BbB"); [EOL]     assertValueAndPointer("/map[@name='Key1']", "Value 1", "/map[@name='Key1']", "BbDd", "BbDdB"); [EOL]     assertValueAndPointer("/nestedBean[@name='strings']", bean.getNestedBean().getStrings(), "/nestedBean/strings", "BbBb", "BbBbC"); [EOL]     assertNullPointer("/nestedBean[@name='foo']", "/nestedBean[@name='foo']", "BbBn"); [EOL]     assertValueAndPointer("/map[@name='Key3']", bean.getMap().get("Key3"), "/map[@name='Key3']", "BbDd", "BbDdC"); [EOL]     assertNullPointer("/map[@name='foo']", "/map[@name='foo']", "BbDd"); [EOL]     assertValueAndPointer("/list[@name='fruitco']", context.getValue("/vendor"), "/list[5]", "BbCM"); [EOL]     assertValueAndPointer("/map/Key3[@name='key']/name", "Name 9", "/map[@name='Key3'][4][@name='key']/name", "BbDdCDdBb", "BbDdCDdBbB"); [EOL]     assertValueAndPointer("map/Key3[@name='fruitco']", context.getValue("/vendor"), "/map[@name='Key3'][3]", "BbDdCM"); [EOL]     assertValueAndPointer("/vendor[@name='fruitco']", context.getValue("/vendor"), "/vendor", "BbM"); [EOL]     assertNullPointer("/vendor[@name='foo']", "/vendor[@name='foo']", "BbMn"); [EOL]     assertNullPointer("/vendor[@name='foo'][3]", "/vendor[@name='foo'][3]", "BbMn"); [EOL]     assertNullPointer("/nestedBean[@name='foo']/bar", "/nestedBean[@name='foo']/bar", "BbBnNn"); [EOL]     assertNullPointer("/map[@name='foo']/bar", "/map[@name='foo']/bar", "BbDdNn"); [EOL]     assertNullPointer("/vendor[@name='foo']/bar", "/vendor[@name='foo']/bar", "BbMnNn"); [EOL]     assertNullPointer("/vendor[@name='foo'][3]/bar", "/vendor[@name='foo'][3]/bar", "BbMnNn"); [EOL]     assertValueAndPointer("/map[@name='Key2'][@name='name']", "Name 6", "/map[@name='Key2']/name", "BbDdBb", "BbDdBbB"); [EOL]     assertValueAndPointer("/map[@name='Key2'][@name='strings'][2]", "String 2", "/map[@name='Key2']/strings[2]", "BbDdBb", "BbDdBbB"); [EOL]     assertValueAndPointer("map[@name='Key5'][@name='key']/name", "Name 9", "/map[@name='Key5'][@name='key']/name", "BbDdDdBb", "BbDdDdBbB"); [EOL]     assertNullPointer("map[@name='Key2'][@name='foo']", "/map[@name='Key2'][@name='foo']", "BbDdBn"); [EOL]     assertNullPointer("map[@name='Key2'][@name='foo'][@name='bar']", "/map[@name='Key2'][@name='foo'][@name='bar']", "BbDdBnNn"); [EOL]     assertValueAndPointer("map[@name='Key4'][@name='fruitco']", context.getValue("/vendor"), "/map[@name='Key4']", "BbDdM"); [EOL] }
public void testDoPredicateName() { [EOL]     assertValueAndPointer("/nestedBean[@name='int']", new Integer(1), "/nestedBean/int", "BbBb", "BbBbB"); [EOL]     assertValueAndPointer("/.[@name='int']", new Integer(1), "/int", "Bb", "BbB"); [EOL]     assertValueAndPointer("/map[@name='Key1']", "Value 1", "/map[@name='Key1']", "BbDd", "BbDdB"); [EOL]     assertValueAndPointer("/nestedBean[@name='strings']", bean.getNestedBean().getStrings(), "/nestedBean/strings", "BbBb", "BbBbC"); [EOL]     assertNullPointer("/nestedBean[@name='foo']", "/nestedBean[@name='foo']", "BbBn"); [EOL]     assertValueAndPointer("/map[@name='Key3']", bean.getMap().get("Key3"), "/map[@name='Key3']", "BbDd", "BbDdC"); [EOL]     assertNullPointer("/map[@name='foo']", "/map[@name='foo']", "BbDd"); [EOL]     assertValueAndPointer("/list[@name='fruitco']", context.getValue("/vendor"), "/list[5]", "BbCM"); [EOL]     assertValueAndPointer("/map/Key3[@name='key']/name", "Name 9", "/map[@name='Key3'][4][@name='key']/name", "BbDdCDdBb", "BbDdCDdBbB"); [EOL]     assertValueAndPointer("map/Key3[@name='fruitco']", context.getValue("/vendor"), "/map[@name='Key3'][3]", "BbDdCM"); [EOL]     assertValueAndPointer("/vendor[@name='fruitco']", context.getValue("/vendor"), "/vendor", "BbM"); [EOL]     assertNullPointer("/vendor[@name='foo']", "/vendor[@name='foo']", "BbMn"); [EOL]     assertNullPointer("/vendor[@name='foo'][3]", "/vendor[@name='foo'][3]", "BbMn"); [EOL]     assertNullPointer("/nestedBean[@name='foo']/bar", "/nestedBean[@name='foo']/bar", "BbBnNn"); [EOL]     assertNullPointer("/map[@name='foo']/bar", "/map[@name='foo']/bar", "BbDdNn"); [EOL]     assertNullPointer("/vendor[@name='foo']/bar", "/vendor[@name='foo']/bar", "BbMnNn"); [EOL]     assertNullPointer("/vendor[@name='foo'][3]/bar", "/vendor[@name='foo'][3]/bar", "BbMnNn"); [EOL]     assertValueAndPointer("/map[@name='Key2'][@name='name']", "Name 6", "/map[@name='Key2']/name", "BbDdBb", "BbDdBbB"); [EOL]     assertValueAndPointer("/map[@name='Key2'][@name='strings'][2]", "String 2", "/map[@name='Key2']/strings[2]", "BbDdBb", "BbDdBbB"); [EOL]     assertValueAndPointer("map[@name='Key5'][@name='key']/name", "Name 9", "/map[@name='Key5'][@name='key']/name", "BbDdDdBb", "BbDdDdBbB"); [EOL]     assertNullPointer("map[@name='Key2'][@name='foo']", "/map[@name='Key2'][@name='foo']", "BbDdBn"); [EOL]     assertNullPointer("map[@name='Key2'][@name='foo'][@name='bar']", "/map[@name='Key2'][@name='foo'][@name='bar']", "BbDdBnNn"); [EOL]     assertValueAndPointer("map[@name='Key4'][@name='fruitco']", context.getValue("/vendor"), "/map[@name='Key4']", "BbDdM"); [EOL] }
public void testDoPredicateName() { [EOL]     assertValueAndPointer("/nestedBean[@name='int']", new Integer(1), "/nestedBean/int", "BbBb", "BbBbB"); [EOL]     assertValueAndPointer("/.[@name='int']", new Integer(1), "/int", "Bb", "BbB"); [EOL]     assertValueAndPointer("/map[@name='Key1']", "Value 1", "/map[@name='Key1']", "BbDd", "BbDdB"); [EOL]     assertValueAndPointer("/nestedBean[@name='strings']", bean.getNestedBean().getStrings(), "/nestedBean/strings", "BbBb", "BbBbC"); [EOL]     assertNullPointer("/nestedBean[@name='foo']", "/nestedBean[@name='foo']", "BbBn"); [EOL]     assertValueAndPointer("/map[@name='Key3']", bean.getMap().get("Key3"), "/map[@name='Key3']", "BbDd", "BbDdC"); [EOL]     assertNullPointer("/map[@name='foo']", "/map[@name='foo']", "BbDd"); [EOL]     assertValueAndPointer("/list[@name='fruitco']", context.getValue("/vendor"), "/list[5]", "BbCM"); [EOL]     assertValueAndPointer("/map/Key3[@name='key']/name", "Name 9", "/map[@name='Key3'][4][@name='key']/name", "BbDdCDdBb", "BbDdCDdBbB"); [EOL]     assertValueAndPointer("map/Key3[@name='fruitco']", context.getValue("/vendor"), "/map[@name='Key3'][3]", "BbDdCM"); [EOL]     assertValueAndPointer("/vendor[@name='fruitco']", context.getValue("/vendor"), "/vendor", "BbM"); [EOL]     assertNullPointer("/vendor[@name='foo']", "/vendor[@name='foo']", "BbMn"); [EOL]     assertNullPointer("/vendor[@name='foo'][3]", "/vendor[@name='foo'][3]", "BbMn"); [EOL]     assertNullPointer("/nestedBean[@name='foo']/bar", "/nestedBean[@name='foo']/bar", "BbBnNn"); [EOL]     assertNullPointer("/map[@name='foo']/bar", "/map[@name='foo']/bar", "BbDdNn"); [EOL]     assertNullPointer("/vendor[@name='foo']/bar", "/vendor[@name='foo']/bar", "BbMnNn"); [EOL]     assertNullPointer("/vendor[@name='foo'][3]/bar", "/vendor[@name='foo'][3]/bar", "BbMnNn"); [EOL]     assertValueAndPointer("/map[@name='Key2'][@name='name']", "Name 6", "/map[@name='Key2']/name", "BbDdBb", "BbDdBbB"); [EOL]     assertValueAndPointer("/map[@name='Key2'][@name='strings'][2]", "String 2", "/map[@name='Key2']/strings[2]", "BbDdBb", "BbDdBbB"); [EOL]     assertValueAndPointer("map[@name='Key5'][@name='key']/name", "Name 9", "/map[@name='Key5'][@name='key']/name", "BbDdDdBb", "BbDdDdBbB"); [EOL]     assertNullPointer("map[@name='Key2'][@name='foo']", "/map[@name='Key2'][@name='foo']", "BbDdBn"); [EOL]     assertNullPointer("map[@name='Key2'][@name='foo'][@name='bar']", "/map[@name='Key2'][@name='foo'][@name='bar']", "BbDdBnNn"); [EOL]     assertValueAndPointer("map[@name='Key4'][@name='fruitco']", context.getValue("/vendor"), "/map[@name='Key4']", "BbDdM"); [EOL] }
public void testDoPredicateName() { [EOL]     assertValueAndPointer("/nestedBean[@name='int']", new Integer(1), "/nestedBean/int", "BbBb", "BbBbB"); [EOL]     assertValueAndPointer("/.[@name='int']", new Integer(1), "/int", "Bb", "BbB"); [EOL]     assertValueAndPointer("/map[@name='Key1']", "Value 1", "/map[@name='Key1']", "BbDd", "BbDdB"); [EOL]     assertValueAndPointer("/nestedBean[@name='strings']", bean.getNestedBean().getStrings(), "/nestedBean/strings", "BbBb", "BbBbC"); [EOL]     assertNullPointer("/nestedBean[@name='foo']", "/nestedBean[@name='foo']", "BbBn"); [EOL]     assertValueAndPointer("/map[@name='Key3']", bean.getMap().get("Key3"), "/map[@name='Key3']", "BbDd", "BbDdC"); [EOL]     assertNullPointer("/map[@name='foo']", "/map[@name='foo']", "BbDd"); [EOL]     assertValueAndPointer("/list[@name='fruitco']", context.getValue("/vendor"), "/list[5]", "BbCM"); [EOL]     assertValueAndPointer("/map/Key3[@name='key']/name", "Name 9", "/map[@name='Key3'][4][@name='key']/name", "BbDdCDdBb", "BbDdCDdBbB"); [EOL]     assertValueAndPointer("map/Key3[@name='fruitco']", context.getValue("/vendor"), "/map[@name='Key3'][3]", "BbDdCM"); [EOL]     assertValueAndPointer("/vendor[@name='fruitco']", context.getValue("/vendor"), "/vendor", "BbM"); [EOL]     assertNullPointer("/vendor[@name='foo']", "/vendor[@name='foo']", "BbMn"); [EOL]     assertNullPointer("/vendor[@name='foo'][3]", "/vendor[@name='foo'][3]", "BbMn"); [EOL]     assertNullPointer("/nestedBean[@name='foo']/bar", "/nestedBean[@name='foo']/bar", "BbBnNn"); [EOL]     assertNullPointer("/map[@name='foo']/bar", "/map[@name='foo']/bar", "BbDdNn"); [EOL]     assertNullPointer("/vendor[@name='foo']/bar", "/vendor[@name='foo']/bar", "BbMnNn"); [EOL]     assertNullPointer("/vendor[@name='foo'][3]/bar", "/vendor[@name='foo'][3]/bar", "BbMnNn"); [EOL]     assertValueAndPointer("/map[@name='Key2'][@name='name']", "Name 6", "/map[@name='Key2']/name", "BbDdBb", "BbDdBbB"); [EOL]     assertValueAndPointer("/map[@name='Key2'][@name='strings'][2]", "String 2", "/map[@name='Key2']/strings[2]", "BbDdBb", "BbDdBbB"); [EOL]     assertValueAndPointer("map[@name='Key5'][@name='key']/name", "Name 9", "/map[@name='Key5'][@name='key']/name", "BbDdDdBb", "BbDdDdBbB"); [EOL]     assertNullPointer("map[@name='Key2'][@name='foo']", "/map[@name='Key2'][@name='foo']", "BbDdBn"); [EOL]     assertNullPointer("map[@name='Key2'][@name='foo'][@name='bar']", "/map[@name='Key2'][@name='foo'][@name='bar']", "BbDdBnNn"); [EOL]     assertValueAndPointer("map[@name='Key4'][@name='fruitco']", context.getValue("/vendor"), "/map[@name='Key4']", "BbDdM"); [EOL] }
public void testDoPredicateName() { [EOL]     assertValueAndPointer("/nestedBean[@name='int']", new Integer(1), "/nestedBean/int", "BbBb", "BbBbB"); [EOL]     assertValueAndPointer("/.[@name='int']", new Integer(1), "/int", "Bb", "BbB"); [EOL]     assertValueAndPointer("/map[@name='Key1']", "Value 1", "/map[@name='Key1']", "BbDd", "BbDdB"); [EOL]     assertValueAndPointer("/nestedBean[@name='strings']", bean.getNestedBean().getStrings(), "/nestedBean/strings", "BbBb", "BbBbC"); [EOL]     assertNullPointer("/nestedBean[@name='foo']", "/nestedBean[@name='foo']", "BbBn"); [EOL]     assertValueAndPointer("/map[@name='Key3']", bean.getMap().get("Key3"), "/map[@name='Key3']", "BbDd", "BbDdC"); [EOL]     assertNullPointer("/map[@name='foo']", "/map[@name='foo']", "BbDd"); [EOL]     assertValueAndPointer("/list[@name='fruitco']", context.getValue("/vendor"), "/list[5]", "BbCM"); [EOL]     assertValueAndPointer("/map/Key3[@name='key']/name", "Name 9", "/map[@name='Key3'][4][@name='key']/name", "BbDdCDdBb", "BbDdCDdBbB"); [EOL]     assertValueAndPointer("map/Key3[@name='fruitco']", context.getValue("/vendor"), "/map[@name='Key3'][3]", "BbDdCM"); [EOL]     assertValueAndPointer("/vendor[@name='fruitco']", context.getValue("/vendor"), "/vendor", "BbM"); [EOL]     assertNullPointer("/vendor[@name='foo']", "/vendor[@name='foo']", "BbMn"); [EOL]     assertNullPointer("/vendor[@name='foo'][3]", "/vendor[@name='foo'][3]", "BbMn"); [EOL]     assertNullPointer("/nestedBean[@name='foo']/bar", "/nestedBean[@name='foo']/bar", "BbBnNn"); [EOL]     assertNullPointer("/map[@name='foo']/bar", "/map[@name='foo']/bar", "BbDdNn"); [EOL]     assertNullPointer("/vendor[@name='foo']/bar", "/vendor[@name='foo']/bar", "BbMnNn"); [EOL]     assertNullPointer("/vendor[@name='foo'][3]/bar", "/vendor[@name='foo'][3]/bar", "BbMnNn"); [EOL]     assertValueAndPointer("/map[@name='Key2'][@name='name']", "Name 6", "/map[@name='Key2']/name", "BbDdBb", "BbDdBbB"); [EOL]     assertValueAndPointer("/map[@name='Key2'][@name='strings'][2]", "String 2", "/map[@name='Key2']/strings[2]", "BbDdBb", "BbDdBbB"); [EOL]     assertValueAndPointer("map[@name='Key5'][@name='key']/name", "Name 9", "/map[@name='Key5'][@name='key']/name", "BbDdDdBb", "BbDdDdBbB"); [EOL]     assertNullPointer("map[@name='Key2'][@name='foo']", "/map[@name='Key2'][@name='foo']", "BbDdBn"); [EOL]     assertNullPointer("map[@name='Key2'][@name='foo'][@name='bar']", "/map[@name='Key2'][@name='foo'][@name='bar']", "BbDdBnNn"); [EOL]     assertValueAndPointer("map[@name='Key4'][@name='fruitco']", context.getValue("/vendor"), "/map[@name='Key4']", "BbDdM"); [EOL] }
public void testDoPredicateName() { [EOL]     assertValueAndPointer("/nestedBean[@name='int']", new Integer(1), "/nestedBean/int", "BbBb", "BbBbB"); [EOL]     assertValueAndPointer("/.[@name='int']", new Integer(1), "/int", "Bb", "BbB"); [EOL]     assertValueAndPointer("/map[@name='Key1']", "Value 1", "/map[@name='Key1']", "BbDd", "BbDdB"); [EOL]     assertValueAndPointer("/nestedBean[@name='strings']", bean.getNestedBean().getStrings(), "/nestedBean/strings", "BbBb", "BbBbC"); [EOL]     assertNullPointer("/nestedBean[@name='foo']", "/nestedBean[@name='foo']", "BbBn"); [EOL]     assertValueAndPointer("/map[@name='Key3']", bean.getMap().get("Key3"), "/map[@name='Key3']", "BbDd", "BbDdC"); [EOL]     assertNullPointer("/map[@name='foo']", "/map[@name='foo']", "BbDd"); [EOL]     assertValueAndPointer("/list[@name='fruitco']", context.getValue("/vendor"), "/list[5]", "BbCM"); [EOL]     assertValueAndPointer("/map/Key3[@name='key']/name", "Name 9", "/map[@name='Key3'][4][@name='key']/name", "BbDdCDdBb", "BbDdCDdBbB"); [EOL]     assertValueAndPointer("map/Key3[@name='fruitco']", context.getValue("/vendor"), "/map[@name='Key3'][3]", "BbDdCM"); [EOL]     assertValueAndPointer("/vendor[@name='fruitco']", context.getValue("/vendor"), "/vendor", "BbM"); [EOL]     assertNullPointer("/vendor[@name='foo']", "/vendor[@name='foo']", "BbMn"); [EOL]     assertNullPointer("/vendor[@name='foo'][3]", "/vendor[@name='foo'][3]", "BbMn"); [EOL]     assertNullPointer("/nestedBean[@name='foo']/bar", "/nestedBean[@name='foo']/bar", "BbBnNn"); [EOL]     assertNullPointer("/map[@name='foo']/bar", "/map[@name='foo']/bar", "BbDdNn"); [EOL]     assertNullPointer("/vendor[@name='foo']/bar", "/vendor[@name='foo']/bar", "BbMnNn"); [EOL]     assertNullPointer("/vendor[@name='foo'][3]/bar", "/vendor[@name='foo'][3]/bar", "BbMnNn"); [EOL]     assertValueAndPointer("/map[@name='Key2'][@name='name']", "Name 6", "/map[@name='Key2']/name", "BbDdBb", "BbDdBbB"); [EOL]     assertValueAndPointer("/map[@name='Key2'][@name='strings'][2]", "String 2", "/map[@name='Key2']/strings[2]", "BbDdBb", "BbDdBbB"); [EOL]     assertValueAndPointer("map[@name='Key5'][@name='key']/name", "Name 9", "/map[@name='Key5'][@name='key']/name", "BbDdDdBb", "BbDdDdBbB"); [EOL]     assertNullPointer("map[@name='Key2'][@name='foo']", "/map[@name='Key2'][@name='foo']", "BbDdBn"); [EOL]     assertNullPointer("map[@name='Key2'][@name='foo'][@name='bar']", "/map[@name='Key2'][@name='foo'][@name='bar']", "BbDdBnNn"); [EOL]     assertValueAndPointer("map[@name='Key4'][@name='fruitco']", context.getValue("/vendor"), "/map[@name='Key4']", "BbDdM"); [EOL] }
public void testDoPredicateName() { [EOL]     assertValueAndPointer("/nestedBean[@name='int']", new Integer(1), "/nestedBean/int", "BbBb", "BbBbB"); [EOL]     assertValueAndPointer("/.[@name='int']", new Integer(1), "/int", "Bb", "BbB"); [EOL]     assertValueAndPointer("/map[@name='Key1']", "Value 1", "/map[@name='Key1']", "BbDd", "BbDdB"); [EOL]     assertValueAndPointer("/nestedBean[@name='strings']", bean.getNestedBean().getStrings(), "/nestedBean/strings", "BbBb", "BbBbC"); [EOL]     assertNullPointer("/nestedBean[@name='foo']", "/nestedBean[@name='foo']", "BbBn"); [EOL]     assertValueAndPointer("/map[@name='Key3']", bean.getMap().get("Key3"), "/map[@name='Key3']", "BbDd", "BbDdC"); [EOL]     assertNullPointer("/map[@name='foo']", "/map[@name='foo']", "BbDd"); [EOL]     assertValueAndPointer("/list[@name='fruitco']", context.getValue("/vendor"), "/list[5]", "BbCM"); [EOL]     assertValueAndPointer("/map/Key3[@name='key']/name", "Name 9", "/map[@name='Key3'][4][@name='key']/name", "BbDdCDdBb", "BbDdCDdBbB"); [EOL]     assertValueAndPointer("map/Key3[@name='fruitco']", context.getValue("/vendor"), "/map[@name='Key3'][3]", "BbDdCM"); [EOL]     assertValueAndPointer("/vendor[@name='fruitco']", context.getValue("/vendor"), "/vendor", "BbM"); [EOL]     assertNullPointer("/vendor[@name='foo']", "/vendor[@name='foo']", "BbMn"); [EOL]     assertNullPointer("/vendor[@name='foo'][3]", "/vendor[@name='foo'][3]", "BbMn"); [EOL]     assertNullPointer("/nestedBean[@name='foo']/bar", "/nestedBean[@name='foo']/bar", "BbBnNn"); [EOL]     assertNullPointer("/map[@name='foo']/bar", "/map[@name='foo']/bar", "BbDdNn"); [EOL]     assertNullPointer("/vendor[@name='foo']/bar", "/vendor[@name='foo']/bar", "BbMnNn"); [EOL]     assertNullPointer("/vendor[@name='foo'][3]/bar", "/vendor[@name='foo'][3]/bar", "BbMnNn"); [EOL]     assertValueAndPointer("/map[@name='Key2'][@name='name']", "Name 6", "/map[@name='Key2']/name", "BbDdBb", "BbDdBbB"); [EOL]     assertValueAndPointer("/map[@name='Key2'][@name='strings'][2]", "String 2", "/map[@name='Key2']/strings[2]", "BbDdBb", "BbDdBbB"); [EOL]     assertValueAndPointer("map[@name='Key5'][@name='key']/name", "Name 9", "/map[@name='Key5'][@name='key']/name", "BbDdDdBb", "BbDdDdBbB"); [EOL]     assertNullPointer("map[@name='Key2'][@name='foo']", "/map[@name='Key2'][@name='foo']", "BbDdBn"); [EOL]     assertNullPointer("map[@name='Key2'][@name='foo'][@name='bar']", "/map[@name='Key2'][@name='foo'][@name='bar']", "BbDdBnNn"); [EOL]     assertValueAndPointer("map[@name='Key4'][@name='fruitco']", context.getValue("/vendor"), "/map[@name='Key4']", "BbDdM"); [EOL] }
public void testDoPredicateName() { [EOL]     assertValueAndPointer("/nestedBean[@name='int']", new Integer(1), "/nestedBean/int", "BbBb", "BbBbB"); [EOL]     assertValueAndPointer("/.[@name='int']", new Integer(1), "/int", "Bb", "BbB"); [EOL]     assertValueAndPointer("/map[@name='Key1']", "Value 1", "/map[@name='Key1']", "BbDd", "BbDdB"); [EOL]     assertValueAndPointer("/nestedBean[@name='strings']", bean.getNestedBean().getStrings(), "/nestedBean/strings", "BbBb", "BbBbC"); [EOL]     assertNullPointer("/nestedBean[@name='foo']", "/nestedBean[@name='foo']", "BbBn"); [EOL]     assertValueAndPointer("/map[@name='Key3']", bean.getMap().get("Key3"), "/map[@name='Key3']", "BbDd", "BbDdC"); [EOL]     assertNullPointer("/map[@name='foo']", "/map[@name='foo']", "BbDd"); [EOL]     assertValueAndPointer("/list[@name='fruitco']", context.getValue("/vendor"), "/list[5]", "BbCM"); [EOL]     assertValueAndPointer("/map/Key3[@name='key']/name", "Name 9", "/map[@name='Key3'][4][@name='key']/name", "BbDdCDdBb", "BbDdCDdBbB"); [EOL]     assertValueAndPointer("map/Key3[@name='fruitco']", context.getValue("/vendor"), "/map[@name='Key3'][3]", "BbDdCM"); [EOL]     assertValueAndPointer("/vendor[@name='fruitco']", context.getValue("/vendor"), "/vendor", "BbM"); [EOL]     assertNullPointer("/vendor[@name='foo']", "/vendor[@name='foo']", "BbMn"); [EOL]     assertNullPointer("/vendor[@name='foo'][3]", "/vendor[@name='foo'][3]", "BbMn"); [EOL]     assertNullPointer("/nestedBean[@name='foo']/bar", "/nestedBean[@name='foo']/bar", "BbBnNn"); [EOL]     assertNullPointer("/map[@name='foo']/bar", "/map[@name='foo']/bar", "BbDdNn"); [EOL]     assertNullPointer("/vendor[@name='foo']/bar", "/vendor[@name='foo']/bar", "BbMnNn"); [EOL]     assertNullPointer("/vendor[@name='foo'][3]/bar", "/vendor[@name='foo'][3]/bar", "BbMnNn"); [EOL]     assertValueAndPointer("/map[@name='Key2'][@name='name']", "Name 6", "/map[@name='Key2']/name", "BbDdBb", "BbDdBbB"); [EOL]     assertValueAndPointer("/map[@name='Key2'][@name='strings'][2]", "String 2", "/map[@name='Key2']/strings[2]", "BbDdBb", "BbDdBbB"); [EOL]     assertValueAndPointer("map[@name='Key5'][@name='key']/name", "Name 9", "/map[@name='Key5'][@name='key']/name", "BbDdDdBb", "BbDdDdBbB"); [EOL]     assertNullPointer("map[@name='Key2'][@name='foo']", "/map[@name='Key2'][@name='foo']", "BbDdBn"); [EOL]     assertNullPointer("map[@name='Key2'][@name='foo'][@name='bar']", "/map[@name='Key2'][@name='foo'][@name='bar']", "BbDdBnNn"); [EOL]     assertValueAndPointer("map[@name='Key4'][@name='fruitco']", context.getValue("/vendor"), "/map[@name='Key4']", "BbDdM"); [EOL] }
public void testDoPredicateName() { [EOL]     assertValueAndPointer("/nestedBean[@name='int']", new Integer(1), "/nestedBean/int", "BbBb", "BbBbB"); [EOL]     assertValueAndPointer("/.[@name='int']", new Integer(1), "/int", "Bb", "BbB"); [EOL]     assertValueAndPointer("/map[@name='Key1']", "Value 1", "/map[@name='Key1']", "BbDd", "BbDdB"); [EOL]     assertValueAndPointer("/nestedBean[@name='strings']", bean.getNestedBean().getStrings(), "/nestedBean/strings", "BbBb", "BbBbC"); [EOL]     assertNullPointer("/nestedBean[@name='foo']", "/nestedBean[@name='foo']", "BbBn"); [EOL]     assertValueAndPointer("/map[@name='Key3']", bean.getMap().get("Key3"), "/map[@name='Key3']", "BbDd", "BbDdC"); [EOL]     assertNullPointer("/map[@name='foo']", "/map[@name='foo']", "BbDd"); [EOL]     assertValueAndPointer("/list[@name='fruitco']", context.getValue("/vendor"), "/list[5]", "BbCM"); [EOL]     assertValueAndPointer("/map/Key3[@name='key']/name", "Name 9", "/map[@name='Key3'][4][@name='key']/name", "BbDdCDdBb", "BbDdCDdBbB"); [EOL]     assertValueAndPointer("map/Key3[@name='fruitco']", context.getValue("/vendor"), "/map[@name='Key3'][3]", "BbDdCM"); [EOL]     assertValueAndPointer("/vendor[@name='fruitco']", context.getValue("/vendor"), "/vendor", "BbM"); [EOL]     assertNullPointer("/vendor[@name='foo']", "/vendor[@name='foo']", "BbMn"); [EOL]     assertNullPointer("/vendor[@name='foo'][3]", "/vendor[@name='foo'][3]", "BbMn"); [EOL]     assertNullPointer("/nestedBean[@name='foo']/bar", "/nestedBean[@name='foo']/bar", "BbBnNn"); [EOL]     assertNullPointer("/map[@name='foo']/bar", "/map[@name='foo']/bar", "BbDdNn"); [EOL]     assertNullPointer("/vendor[@name='foo']/bar", "/vendor[@name='foo']/bar", "BbMnNn"); [EOL]     assertNullPointer("/vendor[@name='foo'][3]/bar", "/vendor[@name='foo'][3]/bar", "BbMnNn"); [EOL]     assertValueAndPointer("/map[@name='Key2'][@name='name']", "Name 6", "/map[@name='Key2']/name", "BbDdBb", "BbDdBbB"); [EOL]     assertValueAndPointer("/map[@name='Key2'][@name='strings'][2]", "String 2", "/map[@name='Key2']/strings[2]", "BbDdBb", "BbDdBbB"); [EOL]     assertValueAndPointer("map[@name='Key5'][@name='key']/name", "Name 9", "/map[@name='Key5'][@name='key']/name", "BbDdDdBb", "BbDdDdBbB"); [EOL]     assertNullPointer("map[@name='Key2'][@name='foo']", "/map[@name='Key2'][@name='foo']", "BbDdBn"); [EOL]     assertNullPointer("map[@name='Key2'][@name='foo'][@name='bar']", "/map[@name='Key2'][@name='foo'][@name='bar']", "BbDdBnNn"); [EOL]     assertValueAndPointer("map[@name='Key4'][@name='fruitco']", context.getValue("/vendor"), "/map[@name='Key4']", "BbDdM"); [EOL] }
public void testDoPredicateName() { [EOL]     assertValueAndPointer("/nestedBean[@name='int']", new Integer(1), "/nestedBean/int", "BbBb", "BbBbB"); [EOL]     assertValueAndPointer("/.[@name='int']", new Integer(1), "/int", "Bb", "BbB"); [EOL]     assertValueAndPointer("/map[@name='Key1']", "Value 1", "/map[@name='Key1']", "BbDd", "BbDdB"); [EOL]     assertValueAndPointer("/nestedBean[@name='strings']", bean.getNestedBean().getStrings(), "/nestedBean/strings", "BbBb", "BbBbC"); [EOL]     assertNullPointer("/nestedBean[@name='foo']", "/nestedBean[@name='foo']", "BbBn"); [EOL]     assertValueAndPointer("/map[@name='Key3']", bean.getMap().get("Key3"), "/map[@name='Key3']", "BbDd", "BbDdC"); [EOL]     assertNullPointer("/map[@name='foo']", "/map[@name='foo']", "BbDd"); [EOL]     assertValueAndPointer("/list[@name='fruitco']", context.getValue("/vendor"), "/list[5]", "BbCM"); [EOL]     assertValueAndPointer("/map/Key3[@name='key']/name", "Name 9", "/map[@name='Key3'][4][@name='key']/name", "BbDdCDdBb", "BbDdCDdBbB"); [EOL]     assertValueAndPointer("map/Key3[@name='fruitco']", context.getValue("/vendor"), "/map[@name='Key3'][3]", "BbDdCM"); [EOL]     assertValueAndPointer("/vendor[@name='fruitco']", context.getValue("/vendor"), "/vendor", "BbM"); [EOL]     assertNullPointer("/vendor[@name='foo']", "/vendor[@name='foo']", "BbMn"); [EOL]     assertNullPointer("/vendor[@name='foo'][3]", "/vendor[@name='foo'][3]", "BbMn"); [EOL]     assertNullPointer("/nestedBean[@name='foo']/bar", "/nestedBean[@name='foo']/bar", "BbBnNn"); [EOL]     assertNullPointer("/map[@name='foo']/bar", "/map[@name='foo']/bar", "BbDdNn"); [EOL]     assertNullPointer("/vendor[@name='foo']/bar", "/vendor[@name='foo']/bar", "BbMnNn"); [EOL]     assertNullPointer("/vendor[@name='foo'][3]/bar", "/vendor[@name='foo'][3]/bar", "BbMnNn"); [EOL]     assertValueAndPointer("/map[@name='Key2'][@name='name']", "Name 6", "/map[@name='Key2']/name", "BbDdBb", "BbDdBbB"); [EOL]     assertValueAndPointer("/map[@name='Key2'][@name='strings'][2]", "String 2", "/map[@name='Key2']/strings[2]", "BbDdBb", "BbDdBbB"); [EOL]     assertValueAndPointer("map[@name='Key5'][@name='key']/name", "Name 9", "/map[@name='Key5'][@name='key']/name", "BbDdDdBb", "BbDdDdBbB"); [EOL]     assertNullPointer("map[@name='Key2'][@name='foo']", "/map[@name='Key2'][@name='foo']", "BbDdBn"); [EOL]     assertNullPointer("map[@name='Key2'][@name='foo'][@name='bar']", "/map[@name='Key2'][@name='foo'][@name='bar']", "BbDdBnNn"); [EOL]     assertValueAndPointer("map[@name='Key4'][@name='fruitco']", context.getValue("/vendor"), "/map[@name='Key4']", "BbDdM"); [EOL] }
public void testDoPredicateName() { [EOL]     assertValueAndPointer("/nestedBean[@name='int']", new Integer(1), "/nestedBean/int", "BbBb", "BbBbB"); [EOL]     assertValueAndPointer("/.[@name='int']", new Integer(1), "/int", "Bb", "BbB"); [EOL]     assertValueAndPointer("/map[@name='Key1']", "Value 1", "/map[@name='Key1']", "BbDd", "BbDdB"); [EOL]     assertValueAndPointer("/nestedBean[@name='strings']", bean.getNestedBean().getStrings(), "/nestedBean/strings", "BbBb", "BbBbC"); [EOL]     assertNullPointer("/nestedBean[@name='foo']", "/nestedBean[@name='foo']", "BbBn"); [EOL]     assertValueAndPointer("/map[@name='Key3']", bean.getMap().get("Key3"), "/map[@name='Key3']", "BbDd", "BbDdC"); [EOL]     assertNullPointer("/map[@name='foo']", "/map[@name='foo']", "BbDd"); [EOL]     assertValueAndPointer("/list[@name='fruitco']", context.getValue("/vendor"), "/list[5]", "BbCM"); [EOL]     assertValueAndPointer("/map/Key3[@name='key']/name", "Name 9", "/map[@name='Key3'][4][@name='key']/name", "BbDdCDdBb", "BbDdCDdBbB"); [EOL]     assertValueAndPointer("map/Key3[@name='fruitco']", context.getValue("/vendor"), "/map[@name='Key3'][3]", "BbDdCM"); [EOL]     assertValueAndPointer("/vendor[@name='fruitco']", context.getValue("/vendor"), "/vendor", "BbM"); [EOL]     assertNullPointer("/vendor[@name='foo']", "/vendor[@name='foo']", "BbMn"); [EOL]     assertNullPointer("/vendor[@name='foo'][3]", "/vendor[@name='foo'][3]", "BbMn"); [EOL]     assertNullPointer("/nestedBean[@name='foo']/bar", "/nestedBean[@name='foo']/bar", "BbBnNn"); [EOL]     assertNullPointer("/map[@name='foo']/bar", "/map[@name='foo']/bar", "BbDdNn"); [EOL]     assertNullPointer("/vendor[@name='foo']/bar", "/vendor[@name='foo']/bar", "BbMnNn"); [EOL]     assertNullPointer("/vendor[@name='foo'][3]/bar", "/vendor[@name='foo'][3]/bar", "BbMnNn"); [EOL]     assertValueAndPointer("/map[@name='Key2'][@name='name']", "Name 6", "/map[@name='Key2']/name", "BbDdBb", "BbDdBbB"); [EOL]     assertValueAndPointer("/map[@name='Key2'][@name='strings'][2]", "String 2", "/map[@name='Key2']/strings[2]", "BbDdBb", "BbDdBbB"); [EOL]     assertValueAndPointer("map[@name='Key5'][@name='key']/name", "Name 9", "/map[@name='Key5'][@name='key']/name", "BbDdDdBb", "BbDdDdBbB"); [EOL]     assertNullPointer("map[@name='Key2'][@name='foo']", "/map[@name='Key2'][@name='foo']", "BbDdBn"); [EOL]     assertNullPointer("map[@name='Key2'][@name='foo'][@name='bar']", "/map[@name='Key2'][@name='foo'][@name='bar']", "BbDdBnNn"); [EOL]     assertValueAndPointer("map[@name='Key4'][@name='fruitco']", context.getValue("/vendor"), "/map[@name='Key4']", "BbDdM"); [EOL] }
public void testDoPredicateName() { [EOL]     assertValueAndPointer("/nestedBean[@name='int']", new Integer(1), "/nestedBean/int", "BbBb", "BbBbB"); [EOL]     assertValueAndPointer("/.[@name='int']", new Integer(1), "/int", "Bb", "BbB"); [EOL]     assertValueAndPointer("/map[@name='Key1']", "Value 1", "/map[@name='Key1']", "BbDd", "BbDdB"); [EOL]     assertValueAndPointer("/nestedBean[@name='strings']", bean.getNestedBean().getStrings(), "/nestedBean/strings", "BbBb", "BbBbC"); [EOL]     assertNullPointer("/nestedBean[@name='foo']", "/nestedBean[@name='foo']", "BbBn"); [EOL]     assertValueAndPointer("/map[@name='Key3']", bean.getMap().get("Key3"), "/map[@name='Key3']", "BbDd", "BbDdC"); [EOL]     assertNullPointer("/map[@name='foo']", "/map[@name='foo']", "BbDd"); [EOL]     assertValueAndPointer("/list[@name='fruitco']", context.getValue("/vendor"), "/list[5]", "BbCM"); [EOL]     assertValueAndPointer("/map/Key3[@name='key']/name", "Name 9", "/map[@name='Key3'][4][@name='key']/name", "BbDdCDdBb", "BbDdCDdBbB"); [EOL]     assertValueAndPointer("map/Key3[@name='fruitco']", context.getValue("/vendor"), "/map[@name='Key3'][3]", "BbDdCM"); [EOL]     assertValueAndPointer("/vendor[@name='fruitco']", context.getValue("/vendor"), "/vendor", "BbM"); [EOL]     assertNullPointer("/vendor[@name='foo']", "/vendor[@name='foo']", "BbMn"); [EOL]     assertNullPointer("/vendor[@name='foo'][3]", "/vendor[@name='foo'][3]", "BbMn"); [EOL]     assertNullPointer("/nestedBean[@name='foo']/bar", "/nestedBean[@name='foo']/bar", "BbBnNn"); [EOL]     assertNullPointer("/map[@name='foo']/bar", "/map[@name='foo']/bar", "BbDdNn"); [EOL]     assertNullPointer("/vendor[@name='foo']/bar", "/vendor[@name='foo']/bar", "BbMnNn"); [EOL]     assertNullPointer("/vendor[@name='foo'][3]/bar", "/vendor[@name='foo'][3]/bar", "BbMnNn"); [EOL]     assertValueAndPointer("/map[@name='Key2'][@name='name']", "Name 6", "/map[@name='Key2']/name", "BbDdBb", "BbDdBbB"); [EOL]     assertValueAndPointer("/map[@name='Key2'][@name='strings'][2]", "String 2", "/map[@name='Key2']/strings[2]", "BbDdBb", "BbDdBbB"); [EOL]     assertValueAndPointer("map[@name='Key5'][@name='key']/name", "Name 9", "/map[@name='Key5'][@name='key']/name", "BbDdDdBb", "BbDdDdBbB"); [EOL]     assertNullPointer("map[@name='Key2'][@name='foo']", "/map[@name='Key2'][@name='foo']", "BbDdBn"); [EOL]     assertNullPointer("map[@name='Key2'][@name='foo'][@name='bar']", "/map[@name='Key2'][@name='foo'][@name='bar']", "BbDdBnNn"); [EOL]     assertValueAndPointer("map[@name='Key4'][@name='fruitco']", context.getValue("/vendor"), "/map[@name='Key4']", "BbDdM"); [EOL] }
public void testDoPredicateName() { [EOL]     assertValueAndPointer("/nestedBean[@name='int']", new Integer(1), "/nestedBean/int", "BbBb", "BbBbB"); [EOL]     assertValueAndPointer("/.[@name='int']", new Integer(1), "/int", "Bb", "BbB"); [EOL]     assertValueAndPointer("/map[@name='Key1']", "Value 1", "/map[@name='Key1']", "BbDd", "BbDdB"); [EOL]     assertValueAndPointer("/nestedBean[@name='strings']", bean.getNestedBean().getStrings(), "/nestedBean/strings", "BbBb", "BbBbC"); [EOL]     assertNullPointer("/nestedBean[@name='foo']", "/nestedBean[@name='foo']", "BbBn"); [EOL]     assertValueAndPointer("/map[@name='Key3']", bean.getMap().get("Key3"), "/map[@name='Key3']", "BbDd", "BbDdC"); [EOL]     assertNullPointer("/map[@name='foo']", "/map[@name='foo']", "BbDd"); [EOL]     assertValueAndPointer("/list[@name='fruitco']", context.getValue("/vendor"), "/list[5]", "BbCM"); [EOL]     assertValueAndPointer("/map/Key3[@name='key']/name", "Name 9", "/map[@name='Key3'][4][@name='key']/name", "BbDdCDdBb", "BbDdCDdBbB"); [EOL]     assertValueAndPointer("map/Key3[@name='fruitco']", context.getValue("/vendor"), "/map[@name='Key3'][3]", "BbDdCM"); [EOL]     assertValueAndPointer("/vendor[@name='fruitco']", context.getValue("/vendor"), "/vendor", "BbM"); [EOL]     assertNullPointer("/vendor[@name='foo']", "/vendor[@name='foo']", "BbMn"); [EOL]     assertNullPointer("/vendor[@name='foo'][3]", "/vendor[@name='foo'][3]", "BbMn"); [EOL]     assertNullPointer("/nestedBean[@name='foo']/bar", "/nestedBean[@name='foo']/bar", "BbBnNn"); [EOL]     assertNullPointer("/map[@name='foo']/bar", "/map[@name='foo']/bar", "BbDdNn"); [EOL]     assertNullPointer("/vendor[@name='foo']/bar", "/vendor[@name='foo']/bar", "BbMnNn"); [EOL]     assertNullPointer("/vendor[@name='foo'][3]/bar", "/vendor[@name='foo'][3]/bar", "BbMnNn"); [EOL]     assertValueAndPointer("/map[@name='Key2'][@name='name']", "Name 6", "/map[@name='Key2']/name", "BbDdBb", "BbDdBbB"); [EOL]     assertValueAndPointer("/map[@name='Key2'][@name='strings'][2]", "String 2", "/map[@name='Key2']/strings[2]", "BbDdBb", "BbDdBbB"); [EOL]     assertValueAndPointer("map[@name='Key5'][@name='key']/name", "Name 9", "/map[@name='Key5'][@name='key']/name", "BbDdDdBb", "BbDdDdBbB"); [EOL]     assertNullPointer("map[@name='Key2'][@name='foo']", "/map[@name='Key2'][@name='foo']", "BbDdBn"); [EOL]     assertNullPointer("map[@name='Key2'][@name='foo'][@name='bar']", "/map[@name='Key2'][@name='foo'][@name='bar']", "BbDdBnNn"); [EOL]     assertValueAndPointer("map[@name='Key4'][@name='fruitco']", context.getValue("/vendor"), "/map[@name='Key4']", "BbDdM"); [EOL] }
public void testDoPredicateName() { [EOL]     assertValueAndPointer("/nestedBean[@name='int']", new Integer(1), "/nestedBean/int", "BbBb", "BbBbB"); [EOL]     assertValueAndPointer("/.[@name='int']", new Integer(1), "/int", "Bb", "BbB"); [EOL]     assertValueAndPointer("/map[@name='Key1']", "Value 1", "/map[@name='Key1']", "BbDd", "BbDdB"); [EOL]     assertValueAndPointer("/nestedBean[@name='strings']", bean.getNestedBean().getStrings(), "/nestedBean/strings", "BbBb", "BbBbC"); [EOL]     assertNullPointer("/nestedBean[@name='foo']", "/nestedBean[@name='foo']", "BbBn"); [EOL]     assertValueAndPointer("/map[@name='Key3']", bean.getMap().get("Key3"), "/map[@name='Key3']", "BbDd", "BbDdC"); [EOL]     assertNullPointer("/map[@name='foo']", "/map[@name='foo']", "BbDd"); [EOL]     assertValueAndPointer("/list[@name='fruitco']", context.getValue("/vendor"), "/list[5]", "BbCM"); [EOL]     assertValueAndPointer("/map/Key3[@name='key']/name", "Name 9", "/map[@name='Key3'][4][@name='key']/name", "BbDdCDdBb", "BbDdCDdBbB"); [EOL]     assertValueAndPointer("map/Key3[@name='fruitco']", context.getValue("/vendor"), "/map[@name='Key3'][3]", "BbDdCM"); [EOL]     assertValueAndPointer("/vendor[@name='fruitco']", context.getValue("/vendor"), "/vendor", "BbM"); [EOL]     assertNullPointer("/vendor[@name='foo']", "/vendor[@name='foo']", "BbMn"); [EOL]     assertNullPointer("/vendor[@name='foo'][3]", "/vendor[@name='foo'][3]", "BbMn"); [EOL]     assertNullPointer("/nestedBean[@name='foo']/bar", "/nestedBean[@name='foo']/bar", "BbBnNn"); [EOL]     assertNullPointer("/map[@name='foo']/bar", "/map[@name='foo']/bar", "BbDdNn"); [EOL]     assertNullPointer("/vendor[@name='foo']/bar", "/vendor[@name='foo']/bar", "BbMnNn"); [EOL]     assertNullPointer("/vendor[@name='foo'][3]/bar", "/vendor[@name='foo'][3]/bar", "BbMnNn"); [EOL]     assertValueAndPointer("/map[@name='Key2'][@name='name']", "Name 6", "/map[@name='Key2']/name", "BbDdBb", "BbDdBbB"); [EOL]     assertValueAndPointer("/map[@name='Key2'][@name='strings'][2]", "String 2", "/map[@name='Key2']/strings[2]", "BbDdBb", "BbDdBbB"); [EOL]     assertValueAndPointer("map[@name='Key5'][@name='key']/name", "Name 9", "/map[@name='Key5'][@name='key']/name", "BbDdDdBb", "BbDdDdBbB"); [EOL]     assertNullPointer("map[@name='Key2'][@name='foo']", "/map[@name='Key2'][@name='foo']", "BbDdBn"); [EOL]     assertNullPointer("map[@name='Key2'][@name='foo'][@name='bar']", "/map[@name='Key2'][@name='foo'][@name='bar']", "BbDdBnNn"); [EOL]     assertValueAndPointer("map[@name='Key4'][@name='fruitco']", context.getValue("/vendor"), "/map[@name='Key4']", "BbDdM"); [EOL] }
public void testDoStepNoPredicatesPropertyOwner() { [EOL]     assertValueAndPointer("/int", new Integer(1), "/int", "Bb", "BbB"); [EOL]     assertValueAndPointer("/./int", new Integer(1), "/int", "Bb", "BbB"); [EOL]     assertNullPointer("/foo", "/foo", "Bn"); [EOL]     assertValueAndPointer("/nestedBean/int", new Integer(1), "/nestedBean/int", "BbBb", "BbBbB"); [EOL]     assertValueAndPointer("/nestedBean/strings", bean.getNestedBean().getStrings(), "/nestedBean/strings", "BbBb", "BbBbC"); [EOL]     assertNullPointer("/nestedBean/foo", "/nestedBean/foo", "BbBn"); [EOL]     assertNullPointer("/map/foo", "/map[@name='foo']", "BbDd"); [EOL]     assertValueAndPointer("/list/int", new Integer(1), "/list[3]/int", "BbBb", "BbBbB"); [EOL]     assertNullPointer("/list/foo", "/list[1]/foo", "BbBn"); [EOL]     assertNullPointer("/nestedBean/foo/bar", "/nestedBean/foo/bar", "BbBnNn"); [EOL]     assertNullPointer("/list/int/bar", "/list[3]/int/bar", "BbBbBn"); [EOL]     assertNullPointer("/list/foo/bar", "/list[1]/foo/bar", "BbBnNn"); [EOL]     assertNullPointer("/map/foo/bar", "/map[@name='foo']/bar", "BbDdNn"); [EOL]     assertValueAndPointer("/map/Key1", "Value 1", "/map[@name='Key1']", "BbDd", "BbDdB"); [EOL]     assertValueAndPointer("/integers", bean.getIntegers(), "/integers", "Bb", "BbC"); [EOL] }
public void testDoStepNoPredicatesPropertyOwner() { [EOL]     assertValueAndPointer("/int", new Integer(1), "/int", "Bb", "BbB"); [EOL]     assertValueAndPointer("/./int", new Integer(1), "/int", "Bb", "BbB"); [EOL]     assertNullPointer("/foo", "/foo", "Bn"); [EOL]     assertValueAndPointer("/nestedBean/int", new Integer(1), "/nestedBean/int", "BbBb", "BbBbB"); [EOL]     assertValueAndPointer("/nestedBean/strings", bean.getNestedBean().getStrings(), "/nestedBean/strings", "BbBb", "BbBbC"); [EOL]     assertNullPointer("/nestedBean/foo", "/nestedBean/foo", "BbBn"); [EOL]     assertNullPointer("/map/foo", "/map[@name='foo']", "BbDd"); [EOL]     assertValueAndPointer("/list/int", new Integer(1), "/list[3]/int", "BbBb", "BbBbB"); [EOL]     assertNullPointer("/list/foo", "/list[1]/foo", "BbBn"); [EOL]     assertNullPointer("/nestedBean/foo/bar", "/nestedBean/foo/bar", "BbBnNn"); [EOL]     assertNullPointer("/list/int/bar", "/list[3]/int/bar", "BbBbBn"); [EOL]     assertNullPointer("/list/foo/bar", "/list[1]/foo/bar", "BbBnNn"); [EOL]     assertNullPointer("/map/foo/bar", "/map[@name='foo']/bar", "BbDdNn"); [EOL]     assertValueAndPointer("/map/Key1", "Value 1", "/map[@name='Key1']", "BbDd", "BbDdB"); [EOL]     assertValueAndPointer("/integers", bean.getIntegers(), "/integers", "Bb", "BbC"); [EOL] }
public void testDoStepNoPredicatesPropertyOwner() { [EOL]     assertValueAndPointer("/int", new Integer(1), "/int", "Bb", "BbB"); [EOL]     assertValueAndPointer("/./int", new Integer(1), "/int", "Bb", "BbB"); [EOL]     assertNullPointer("/foo", "/foo", "Bn"); [EOL]     assertValueAndPointer("/nestedBean/int", new Integer(1), "/nestedBean/int", "BbBb", "BbBbB"); [EOL]     assertValueAndPointer("/nestedBean/strings", bean.getNestedBean().getStrings(), "/nestedBean/strings", "BbBb", "BbBbC"); [EOL]     assertNullPointer("/nestedBean/foo", "/nestedBean/foo", "BbBn"); [EOL]     assertNullPointer("/map/foo", "/map[@name='foo']", "BbDd"); [EOL]     assertValueAndPointer("/list/int", new Integer(1), "/list[3]/int", "BbBb", "BbBbB"); [EOL]     assertNullPointer("/list/foo", "/list[1]/foo", "BbBn"); [EOL]     assertNullPointer("/nestedBean/foo/bar", "/nestedBean/foo/bar", "BbBnNn"); [EOL]     assertNullPointer("/list/int/bar", "/list[3]/int/bar", "BbBbBn"); [EOL]     assertNullPointer("/list/foo/bar", "/list[1]/foo/bar", "BbBnNn"); [EOL]     assertNullPointer("/map/foo/bar", "/map[@name='foo']/bar", "BbDdNn"); [EOL]     assertValueAndPointer("/map/Key1", "Value 1", "/map[@name='Key1']", "BbDd", "BbDdB"); [EOL]     assertValueAndPointer("/integers", bean.getIntegers(), "/integers", "Bb", "BbC"); [EOL] }
public void testDoStepNoPredicatesPropertyOwner() { [EOL]     assertValueAndPointer("/int", new Integer(1), "/int", "Bb", "BbB"); [EOL]     assertValueAndPointer("/./int", new Integer(1), "/int", "Bb", "BbB"); [EOL]     assertNullPointer("/foo", "/foo", "Bn"); [EOL]     assertValueAndPointer("/nestedBean/int", new Integer(1), "/nestedBean/int", "BbBb", "BbBbB"); [EOL]     assertValueAndPointer("/nestedBean/strings", bean.getNestedBean().getStrings(), "/nestedBean/strings", "BbBb", "BbBbC"); [EOL]     assertNullPointer("/nestedBean/foo", "/nestedBean/foo", "BbBn"); [EOL]     assertNullPointer("/map/foo", "/map[@name='foo']", "BbDd"); [EOL]     assertValueAndPointer("/list/int", new Integer(1), "/list[3]/int", "BbBb", "BbBbB"); [EOL]     assertNullPointer("/list/foo", "/list[1]/foo", "BbBn"); [EOL]     assertNullPointer("/nestedBean/foo/bar", "/nestedBean/foo/bar", "BbBnNn"); [EOL]     assertNullPointer("/list/int/bar", "/list[3]/int/bar", "BbBbBn"); [EOL]     assertNullPointer("/list/foo/bar", "/list[1]/foo/bar", "BbBnNn"); [EOL]     assertNullPointer("/map/foo/bar", "/map[@name='foo']/bar", "BbDdNn"); [EOL]     assertValueAndPointer("/map/Key1", "Value 1", "/map[@name='Key1']", "BbDd", "BbDdB"); [EOL]     assertValueAndPointer("/integers", bean.getIntegers(), "/integers", "Bb", "BbC"); [EOL] }
public void testDoPredicateName() { [EOL]     assertValueAndPointer("/nestedBean[@name='int']", new Integer(1), "/nestedBean/int", "BbBb", "BbBbB"); [EOL]     assertValueAndPointer("/.[@name='int']", new Integer(1), "/int", "Bb", "BbB"); [EOL]     assertValueAndPointer("/map[@name='Key1']", "Value 1", "/map[@name='Key1']", "BbDd", "BbDdB"); [EOL]     assertValueAndPointer("/nestedBean[@name='strings']", bean.getNestedBean().getStrings(), "/nestedBean/strings", "BbBb", "BbBbC"); [EOL]     assertNullPointer("/nestedBean[@name='foo']", "/nestedBean[@name='foo']", "BbBn"); [EOL]     assertValueAndPointer("/map[@name='Key3']", bean.getMap().get("Key3"), "/map[@name='Key3']", "BbDd", "BbDdC"); [EOL]     assertNullPointer("/map[@name='foo']", "/map[@name='foo']", "BbDd"); [EOL]     assertValueAndPointer("/list[@name='fruitco']", context.getValue("/vendor"), "/list[5]", "BbCM"); [EOL]     assertValueAndPointer("/map/Key3[@name='key']/name", "Name 9", "/map[@name='Key3'][4][@name='key']/name", "BbDdCDdBb", "BbDdCDdBbB"); [EOL]     assertValueAndPointer("map/Key3[@name='fruitco']", context.getValue("/vendor"), "/map[@name='Key3'][3]", "BbDdCM"); [EOL]     assertValueAndPointer("/vendor[@name='fruitco']", context.getValue("/vendor"), "/vendor", "BbM"); [EOL]     assertNullPointer("/vendor[@name='foo']", "/vendor[@name='foo']", "BbMn"); [EOL]     assertNullPointer("/vendor[@name='foo'][3]", "/vendor[@name='foo'][3]", "BbMn"); [EOL]     assertNullPointer("/nestedBean[@name='foo']/bar", "/nestedBean[@name='foo']/bar", "BbBnNn"); [EOL]     assertNullPointer("/map[@name='foo']/bar", "/map[@name='foo']/bar", "BbDdNn"); [EOL]     assertNullPointer("/vendor[@name='foo']/bar", "/vendor[@name='foo']/bar", "BbMnNn"); [EOL]     assertNullPointer("/vendor[@name='foo'][3]/bar", "/vendor[@name='foo'][3]/bar", "BbMnNn"); [EOL]     assertValueAndPointer("/map[@name='Key2'][@name='name']", "Name 6", "/map[@name='Key2']/name", "BbDdBb", "BbDdBbB"); [EOL]     assertValueAndPointer("/map[@name='Key2'][@name='strings'][2]", "String 2", "/map[@name='Key2']/strings[2]", "BbDdBb", "BbDdBbB"); [EOL]     assertValueAndPointer("map[@name='Key5'][@name='key']/name", "Name 9", "/map[@name='Key5'][@name='key']/name", "BbDdDdBb", "BbDdDdBbB"); [EOL]     assertNullPointer("map[@name='Key2'][@name='foo']", "/map[@name='Key2'][@name='foo']", "BbDdBn"); [EOL]     assertNullPointer("map[@name='Key2'][@name='foo'][@name='bar']", "/map[@name='Key2'][@name='foo'][@name='bar']", "BbDdBnNn"); [EOL]     assertValueAndPointer("map[@name='Key4'][@name='fruitco']", context.getValue("/vendor"), "/map[@name='Key4']", "BbDdM"); [EOL] }
public void testDoPredicateName() { [EOL]     assertValueAndPointer("/nestedBean[@name='int']", new Integer(1), "/nestedBean/int", "BbBb", "BbBbB"); [EOL]     assertValueAndPointer("/.[@name='int']", new Integer(1), "/int", "Bb", "BbB"); [EOL]     assertValueAndPointer("/map[@name='Key1']", "Value 1", "/map[@name='Key1']", "BbDd", "BbDdB"); [EOL]     assertValueAndPointer("/nestedBean[@name='strings']", bean.getNestedBean().getStrings(), "/nestedBean/strings", "BbBb", "BbBbC"); [EOL]     assertNullPointer("/nestedBean[@name='foo']", "/nestedBean[@name='foo']", "BbBn"); [EOL]     assertValueAndPointer("/map[@name='Key3']", bean.getMap().get("Key3"), "/map[@name='Key3']", "BbDd", "BbDdC"); [EOL]     assertNullPointer("/map[@name='foo']", "/map[@name='foo']", "BbDd"); [EOL]     assertValueAndPointer("/list[@name='fruitco']", context.getValue("/vendor"), "/list[5]", "BbCM"); [EOL]     assertValueAndPointer("/map/Key3[@name='key']/name", "Name 9", "/map[@name='Key3'][4][@name='key']/name", "BbDdCDdBb", "BbDdCDdBbB"); [EOL]     assertValueAndPointer("map/Key3[@name='fruitco']", context.getValue("/vendor"), "/map[@name='Key3'][3]", "BbDdCM"); [EOL]     assertValueAndPointer("/vendor[@name='fruitco']", context.getValue("/vendor"), "/vendor", "BbM"); [EOL]     assertNullPointer("/vendor[@name='foo']", "/vendor[@name='foo']", "BbMn"); [EOL]     assertNullPointer("/vendor[@name='foo'][3]", "/vendor[@name='foo'][3]", "BbMn"); [EOL]     assertNullPointer("/nestedBean[@name='foo']/bar", "/nestedBean[@name='foo']/bar", "BbBnNn"); [EOL]     assertNullPointer("/map[@name='foo']/bar", "/map[@name='foo']/bar", "BbDdNn"); [EOL]     assertNullPointer("/vendor[@name='foo']/bar", "/vendor[@name='foo']/bar", "BbMnNn"); [EOL]     assertNullPointer("/vendor[@name='foo'][3]/bar", "/vendor[@name='foo'][3]/bar", "BbMnNn"); [EOL]     assertValueAndPointer("/map[@name='Key2'][@name='name']", "Name 6", "/map[@name='Key2']/name", "BbDdBb", "BbDdBbB"); [EOL]     assertValueAndPointer("/map[@name='Key2'][@name='strings'][2]", "String 2", "/map[@name='Key2']/strings[2]", "BbDdBb", "BbDdBbB"); [EOL]     assertValueAndPointer("map[@name='Key5'][@name='key']/name", "Name 9", "/map[@name='Key5'][@name='key']/name", "BbDdDdBb", "BbDdDdBbB"); [EOL]     assertNullPointer("map[@name='Key2'][@name='foo']", "/map[@name='Key2'][@name='foo']", "BbDdBn"); [EOL]     assertNullPointer("map[@name='Key2'][@name='foo'][@name='bar']", "/map[@name='Key2'][@name='foo'][@name='bar']", "BbDdBnNn"); [EOL]     assertValueAndPointer("map[@name='Key4'][@name='fruitco']", context.getValue("/vendor"), "/map[@name='Key4']", "BbDdM"); [EOL] }
public void testDoPredicateName() { [EOL]     assertValueAndPointer("/nestedBean[@name='int']", new Integer(1), "/nestedBean/int", "BbBb", "BbBbB"); [EOL]     assertValueAndPointer("/.[@name='int']", new Integer(1), "/int", "Bb", "BbB"); [EOL]     assertValueAndPointer("/map[@name='Key1']", "Value 1", "/map[@name='Key1']", "BbDd", "BbDdB"); [EOL]     assertValueAndPointer("/nestedBean[@name='strings']", bean.getNestedBean().getStrings(), "/nestedBean/strings", "BbBb", "BbBbC"); [EOL]     assertNullPointer("/nestedBean[@name='foo']", "/nestedBean[@name='foo']", "BbBn"); [EOL]     assertValueAndPointer("/map[@name='Key3']", bean.getMap().get("Key3"), "/map[@name='Key3']", "BbDd", "BbDdC"); [EOL]     assertNullPointer("/map[@name='foo']", "/map[@name='foo']", "BbDd"); [EOL]     assertValueAndPointer("/list[@name='fruitco']", context.getValue("/vendor"), "/list[5]", "BbCM"); [EOL]     assertValueAndPointer("/map/Key3[@name='key']/name", "Name 9", "/map[@name='Key3'][4][@name='key']/name", "BbDdCDdBb", "BbDdCDdBbB"); [EOL]     assertValueAndPointer("map/Key3[@name='fruitco']", context.getValue("/vendor"), "/map[@name='Key3'][3]", "BbDdCM"); [EOL]     assertValueAndPointer("/vendor[@name='fruitco']", context.getValue("/vendor"), "/vendor", "BbM"); [EOL]     assertNullPointer("/vendor[@name='foo']", "/vendor[@name='foo']", "BbMn"); [EOL]     assertNullPointer("/vendor[@name='foo'][3]", "/vendor[@name='foo'][3]", "BbMn"); [EOL]     assertNullPointer("/nestedBean[@name='foo']/bar", "/nestedBean[@name='foo']/bar", "BbBnNn"); [EOL]     assertNullPointer("/map[@name='foo']/bar", "/map[@name='foo']/bar", "BbDdNn"); [EOL]     assertNullPointer("/vendor[@name='foo']/bar", "/vendor[@name='foo']/bar", "BbMnNn"); [EOL]     assertNullPointer("/vendor[@name='foo'][3]/bar", "/vendor[@name='foo'][3]/bar", "BbMnNn"); [EOL]     assertValueAndPointer("/map[@name='Key2'][@name='name']", "Name 6", "/map[@name='Key2']/name", "BbDdBb", "BbDdBbB"); [EOL]     assertValueAndPointer("/map[@name='Key2'][@name='strings'][2]", "String 2", "/map[@name='Key2']/strings[2]", "BbDdBb", "BbDdBbB"); [EOL]     assertValueAndPointer("map[@name='Key5'][@name='key']/name", "Name 9", "/map[@name='Key5'][@name='key']/name", "BbDdDdBb", "BbDdDdBbB"); [EOL]     assertNullPointer("map[@name='Key2'][@name='foo']", "/map[@name='Key2'][@name='foo']", "BbDdBn"); [EOL]     assertNullPointer("map[@name='Key2'][@name='foo'][@name='bar']", "/map[@name='Key2'][@name='foo'][@name='bar']", "BbDdBnNn"); [EOL]     assertValueAndPointer("map[@name='Key4'][@name='fruitco']", context.getValue("/vendor"), "/map[@name='Key4']", "BbDdM"); [EOL] }
public void testDoPredicateName() { [EOL]     assertValueAndPointer("/nestedBean[@name='int']", new Integer(1), "/nestedBean/int", "BbBb", "BbBbB"); [EOL]     assertValueAndPointer("/.[@name='int']", new Integer(1), "/int", "Bb", "BbB"); [EOL]     assertValueAndPointer("/map[@name='Key1']", "Value 1", "/map[@name='Key1']", "BbDd", "BbDdB"); [EOL]     assertValueAndPointer("/nestedBean[@name='strings']", bean.getNestedBean().getStrings(), "/nestedBean/strings", "BbBb", "BbBbC"); [EOL]     assertNullPointer("/nestedBean[@name='foo']", "/nestedBean[@name='foo']", "BbBn"); [EOL]     assertValueAndPointer("/map[@name='Key3']", bean.getMap().get("Key3"), "/map[@name='Key3']", "BbDd", "BbDdC"); [EOL]     assertNullPointer("/map[@name='foo']", "/map[@name='foo']", "BbDd"); [EOL]     assertValueAndPointer("/list[@name='fruitco']", context.getValue("/vendor"), "/list[5]", "BbCM"); [EOL]     assertValueAndPointer("/map/Key3[@name='key']/name", "Name 9", "/map[@name='Key3'][4][@name='key']/name", "BbDdCDdBb", "BbDdCDdBbB"); [EOL]     assertValueAndPointer("map/Key3[@name='fruitco']", context.getValue("/vendor"), "/map[@name='Key3'][3]", "BbDdCM"); [EOL]     assertValueAndPointer("/vendor[@name='fruitco']", context.getValue("/vendor"), "/vendor", "BbM"); [EOL]     assertNullPointer("/vendor[@name='foo']", "/vendor[@name='foo']", "BbMn"); [EOL]     assertNullPointer("/vendor[@name='foo'][3]", "/vendor[@name='foo'][3]", "BbMn"); [EOL]     assertNullPointer("/nestedBean[@name='foo']/bar", "/nestedBean[@name='foo']/bar", "BbBnNn"); [EOL]     assertNullPointer("/map[@name='foo']/bar", "/map[@name='foo']/bar", "BbDdNn"); [EOL]     assertNullPointer("/vendor[@name='foo']/bar", "/vendor[@name='foo']/bar", "BbMnNn"); [EOL]     assertNullPointer("/vendor[@name='foo'][3]/bar", "/vendor[@name='foo'][3]/bar", "BbMnNn"); [EOL]     assertValueAndPointer("/map[@name='Key2'][@name='name']", "Name 6", "/map[@name='Key2']/name", "BbDdBb", "BbDdBbB"); [EOL]     assertValueAndPointer("/map[@name='Key2'][@name='strings'][2]", "String 2", "/map[@name='Key2']/strings[2]", "BbDdBb", "BbDdBbB"); [EOL]     assertValueAndPointer("map[@name='Key5'][@name='key']/name", "Name 9", "/map[@name='Key5'][@name='key']/name", "BbDdDdBb", "BbDdDdBbB"); [EOL]     assertNullPointer("map[@name='Key2'][@name='foo']", "/map[@name='Key2'][@name='foo']", "BbDdBn"); [EOL]     assertNullPointer("map[@name='Key2'][@name='foo'][@name='bar']", "/map[@name='Key2'][@name='foo'][@name='bar']", "BbDdBnNn"); [EOL]     assertValueAndPointer("map[@name='Key4'][@name='fruitco']", context.getValue("/vendor"), "/map[@name='Key4']", "BbDdM"); [EOL] }
public void testDoPredicateName() { [EOL]     assertValueAndPointer("/nestedBean[@name='int']", new Integer(1), "/nestedBean/int", "BbBb", "BbBbB"); [EOL]     assertValueAndPointer("/.[@name='int']", new Integer(1), "/int", "Bb", "BbB"); [EOL]     assertValueAndPointer("/map[@name='Key1']", "Value 1", "/map[@name='Key1']", "BbDd", "BbDdB"); [EOL]     assertValueAndPointer("/nestedBean[@name='strings']", bean.getNestedBean().getStrings(), "/nestedBean/strings", "BbBb", "BbBbC"); [EOL]     assertNullPointer("/nestedBean[@name='foo']", "/nestedBean[@name='foo']", "BbBn"); [EOL]     assertValueAndPointer("/map[@name='Key3']", bean.getMap().get("Key3"), "/map[@name='Key3']", "BbDd", "BbDdC"); [EOL]     assertNullPointer("/map[@name='foo']", "/map[@name='foo']", "BbDd"); [EOL]     assertValueAndPointer("/list[@name='fruitco']", context.getValue("/vendor"), "/list[5]", "BbCM"); [EOL]     assertValueAndPointer("/map/Key3[@name='key']/name", "Name 9", "/map[@name='Key3'][4][@name='key']/name", "BbDdCDdBb", "BbDdCDdBbB"); [EOL]     assertValueAndPointer("map/Key3[@name='fruitco']", context.getValue("/vendor"), "/map[@name='Key3'][3]", "BbDdCM"); [EOL]     assertValueAndPointer("/vendor[@name='fruitco']", context.getValue("/vendor"), "/vendor", "BbM"); [EOL]     assertNullPointer("/vendor[@name='foo']", "/vendor[@name='foo']", "BbMn"); [EOL]     assertNullPointer("/vendor[@name='foo'][3]", "/vendor[@name='foo'][3]", "BbMn"); [EOL]     assertNullPointer("/nestedBean[@name='foo']/bar", "/nestedBean[@name='foo']/bar", "BbBnNn"); [EOL]     assertNullPointer("/map[@name='foo']/bar", "/map[@name='foo']/bar", "BbDdNn"); [EOL]     assertNullPointer("/vendor[@name='foo']/bar", "/vendor[@name='foo']/bar", "BbMnNn"); [EOL]     assertNullPointer("/vendor[@name='foo'][3]/bar", "/vendor[@name='foo'][3]/bar", "BbMnNn"); [EOL]     assertValueAndPointer("/map[@name='Key2'][@name='name']", "Name 6", "/map[@name='Key2']/name", "BbDdBb", "BbDdBbB"); [EOL]     assertValueAndPointer("/map[@name='Key2'][@name='strings'][2]", "String 2", "/map[@name='Key2']/strings[2]", "BbDdBb", "BbDdBbB"); [EOL]     assertValueAndPointer("map[@name='Key5'][@name='key']/name", "Name 9", "/map[@name='Key5'][@name='key']/name", "BbDdDdBb", "BbDdDdBbB"); [EOL]     assertNullPointer("map[@name='Key2'][@name='foo']", "/map[@name='Key2'][@name='foo']", "BbDdBn"); [EOL]     assertNullPointer("map[@name='Key2'][@name='foo'][@name='bar']", "/map[@name='Key2'][@name='foo'][@name='bar']", "BbDdBnNn"); [EOL]     assertValueAndPointer("map[@name='Key4'][@name='fruitco']", context.getValue("/vendor"), "/map[@name='Key4']", "BbDdM"); [EOL] }
public void testDoPredicateName() { [EOL]     assertValueAndPointer("/nestedBean[@name='int']", new Integer(1), "/nestedBean/int", "BbBb", "BbBbB"); [EOL]     assertValueAndPointer("/.[@name='int']", new Integer(1), "/int", "Bb", "BbB"); [EOL]     assertValueAndPointer("/map[@name='Key1']", "Value 1", "/map[@name='Key1']", "BbDd", "BbDdB"); [EOL]     assertValueAndPointer("/nestedBean[@name='strings']", bean.getNestedBean().getStrings(), "/nestedBean/strings", "BbBb", "BbBbC"); [EOL]     assertNullPointer("/nestedBean[@name='foo']", "/nestedBean[@name='foo']", "BbBn"); [EOL]     assertValueAndPointer("/map[@name='Key3']", bean.getMap().get("Key3"), "/map[@name='Key3']", "BbDd", "BbDdC"); [EOL]     assertNullPointer("/map[@name='foo']", "/map[@name='foo']", "BbDd"); [EOL]     assertValueAndPointer("/list[@name='fruitco']", context.getValue("/vendor"), "/list[5]", "BbCM"); [EOL]     assertValueAndPointer("/map/Key3[@name='key']/name", "Name 9", "/map[@name='Key3'][4][@name='key']/name", "BbDdCDdBb", "BbDdCDdBbB"); [EOL]     assertValueAndPointer("map/Key3[@name='fruitco']", context.getValue("/vendor"), "/map[@name='Key3'][3]", "BbDdCM"); [EOL]     assertValueAndPointer("/vendor[@name='fruitco']", context.getValue("/vendor"), "/vendor", "BbM"); [EOL]     assertNullPointer("/vendor[@name='foo']", "/vendor[@name='foo']", "BbMn"); [EOL]     assertNullPointer("/vendor[@name='foo'][3]", "/vendor[@name='foo'][3]", "BbMn"); [EOL]     assertNullPointer("/nestedBean[@name='foo']/bar", "/nestedBean[@name='foo']/bar", "BbBnNn"); [EOL]     assertNullPointer("/map[@name='foo']/bar", "/map[@name='foo']/bar", "BbDdNn"); [EOL]     assertNullPointer("/vendor[@name='foo']/bar", "/vendor[@name='foo']/bar", "BbMnNn"); [EOL]     assertNullPointer("/vendor[@name='foo'][3]/bar", "/vendor[@name='foo'][3]/bar", "BbMnNn"); [EOL]     assertValueAndPointer("/map[@name='Key2'][@name='name']", "Name 6", "/map[@name='Key2']/name", "BbDdBb", "BbDdBbB"); [EOL]     assertValueAndPointer("/map[@name='Key2'][@name='strings'][2]", "String 2", "/map[@name='Key2']/strings[2]", "BbDdBb", "BbDdBbB"); [EOL]     assertValueAndPointer("map[@name='Key5'][@name='key']/name", "Name 9", "/map[@name='Key5'][@name='key']/name", "BbDdDdBb", "BbDdDdBbB"); [EOL]     assertNullPointer("map[@name='Key2'][@name='foo']", "/map[@name='Key2'][@name='foo']", "BbDdBn"); [EOL]     assertNullPointer("map[@name='Key2'][@name='foo'][@name='bar']", "/map[@name='Key2'][@name='foo'][@name='bar']", "BbDdBnNn"); [EOL]     assertValueAndPointer("map[@name='Key4'][@name='fruitco']", context.getValue("/vendor"), "/map[@name='Key4']", "BbDdM"); [EOL] }
public void testDoPredicateName() { [EOL]     assertValueAndPointer("/nestedBean[@name='int']", new Integer(1), "/nestedBean/int", "BbBb", "BbBbB"); [EOL]     assertValueAndPointer("/.[@name='int']", new Integer(1), "/int", "Bb", "BbB"); [EOL]     assertValueAndPointer("/map[@name='Key1']", "Value 1", "/map[@name='Key1']", "BbDd", "BbDdB"); [EOL]     assertValueAndPointer("/nestedBean[@name='strings']", bean.getNestedBean().getStrings(), "/nestedBean/strings", "BbBb", "BbBbC"); [EOL]     assertNullPointer("/nestedBean[@name='foo']", "/nestedBean[@name='foo']", "BbBn"); [EOL]     assertValueAndPointer("/map[@name='Key3']", bean.getMap().get("Key3"), "/map[@name='Key3']", "BbDd", "BbDdC"); [EOL]     assertNullPointer("/map[@name='foo']", "/map[@name='foo']", "BbDd"); [EOL]     assertValueAndPointer("/list[@name='fruitco']", context.getValue("/vendor"), "/list[5]", "BbCM"); [EOL]     assertValueAndPointer("/map/Key3[@name='key']/name", "Name 9", "/map[@name='Key3'][4][@name='key']/name", "BbDdCDdBb", "BbDdCDdBbB"); [EOL]     assertValueAndPointer("map/Key3[@name='fruitco']", context.getValue("/vendor"), "/map[@name='Key3'][3]", "BbDdCM"); [EOL]     assertValueAndPointer("/vendor[@name='fruitco']", context.getValue("/vendor"), "/vendor", "BbM"); [EOL]     assertNullPointer("/vendor[@name='foo']", "/vendor[@name='foo']", "BbMn"); [EOL]     assertNullPointer("/vendor[@name='foo'][3]", "/vendor[@name='foo'][3]", "BbMn"); [EOL]     assertNullPointer("/nestedBean[@name='foo']/bar", "/nestedBean[@name='foo']/bar", "BbBnNn"); [EOL]     assertNullPointer("/map[@name='foo']/bar", "/map[@name='foo']/bar", "BbDdNn"); [EOL]     assertNullPointer("/vendor[@name='foo']/bar", "/vendor[@name='foo']/bar", "BbMnNn"); [EOL]     assertNullPointer("/vendor[@name='foo'][3]/bar", "/vendor[@name='foo'][3]/bar", "BbMnNn"); [EOL]     assertValueAndPointer("/map[@name='Key2'][@name='name']", "Name 6", "/map[@name='Key2']/name", "BbDdBb", "BbDdBbB"); [EOL]     assertValueAndPointer("/map[@name='Key2'][@name='strings'][2]", "String 2", "/map[@name='Key2']/strings[2]", "BbDdBb", "BbDdBbB"); [EOL]     assertValueAndPointer("map[@name='Key5'][@name='key']/name", "Name 9", "/map[@name='Key5'][@name='key']/name", "BbDdDdBb", "BbDdDdBbB"); [EOL]     assertNullPointer("map[@name='Key2'][@name='foo']", "/map[@name='Key2'][@name='foo']", "BbDdBn"); [EOL]     assertNullPointer("map[@name='Key2'][@name='foo'][@name='bar']", "/map[@name='Key2'][@name='foo'][@name='bar']", "BbDdBnNn"); [EOL]     assertValueAndPointer("map[@name='Key4'][@name='fruitco']", context.getValue("/vendor"), "/map[@name='Key4']", "BbDdM"); [EOL] }
public void testDoPredicateName() { [EOL]     assertValueAndPointer("/nestedBean[@name='int']", new Integer(1), "/nestedBean/int", "BbBb", "BbBbB"); [EOL]     assertValueAndPointer("/.[@name='int']", new Integer(1), "/int", "Bb", "BbB"); [EOL]     assertValueAndPointer("/map[@name='Key1']", "Value 1", "/map[@name='Key1']", "BbDd", "BbDdB"); [EOL]     assertValueAndPointer("/nestedBean[@name='strings']", bean.getNestedBean().getStrings(), "/nestedBean/strings", "BbBb", "BbBbC"); [EOL]     assertNullPointer("/nestedBean[@name='foo']", "/nestedBean[@name='foo']", "BbBn"); [EOL]     assertValueAndPointer("/map[@name='Key3']", bean.getMap().get("Key3"), "/map[@name='Key3']", "BbDd", "BbDdC"); [EOL]     assertNullPointer("/map[@name='foo']", "/map[@name='foo']", "BbDd"); [EOL]     assertValueAndPointer("/list[@name='fruitco']", context.getValue("/vendor"), "/list[5]", "BbCM"); [EOL]     assertValueAndPointer("/map/Key3[@name='key']/name", "Name 9", "/map[@name='Key3'][4][@name='key']/name", "BbDdCDdBb", "BbDdCDdBbB"); [EOL]     assertValueAndPointer("map/Key3[@name='fruitco']", context.getValue("/vendor"), "/map[@name='Key3'][3]", "BbDdCM"); [EOL]     assertValueAndPointer("/vendor[@name='fruitco']", context.getValue("/vendor"), "/vendor", "BbM"); [EOL]     assertNullPointer("/vendor[@name='foo']", "/vendor[@name='foo']", "BbMn"); [EOL]     assertNullPointer("/vendor[@name='foo'][3]", "/vendor[@name='foo'][3]", "BbMn"); [EOL]     assertNullPointer("/nestedBean[@name='foo']/bar", "/nestedBean[@name='foo']/bar", "BbBnNn"); [EOL]     assertNullPointer("/map[@name='foo']/bar", "/map[@name='foo']/bar", "BbDdNn"); [EOL]     assertNullPointer("/vendor[@name='foo']/bar", "/vendor[@name='foo']/bar", "BbMnNn"); [EOL]     assertNullPointer("/vendor[@name='foo'][3]/bar", "/vendor[@name='foo'][3]/bar", "BbMnNn"); [EOL]     assertValueAndPointer("/map[@name='Key2'][@name='name']", "Name 6", "/map[@name='Key2']/name", "BbDdBb", "BbDdBbB"); [EOL]     assertValueAndPointer("/map[@name='Key2'][@name='strings'][2]", "String 2", "/map[@name='Key2']/strings[2]", "BbDdBb", "BbDdBbB"); [EOL]     assertValueAndPointer("map[@name='Key5'][@name='key']/name", "Name 9", "/map[@name='Key5'][@name='key']/name", "BbDdDdBb", "BbDdDdBbB"); [EOL]     assertNullPointer("map[@name='Key2'][@name='foo']", "/map[@name='Key2'][@name='foo']", "BbDdBn"); [EOL]     assertNullPointer("map[@name='Key2'][@name='foo'][@name='bar']", "/map[@name='Key2'][@name='foo'][@name='bar']", "BbDdBnNn"); [EOL]     assertValueAndPointer("map[@name='Key4'][@name='fruitco']", context.getValue("/vendor"), "/map[@name='Key4']", "BbDdM"); [EOL] }
public void testDoPredicateName() { [EOL]     assertValueAndPointer("/nestedBean[@name='int']", new Integer(1), "/nestedBean/int", "BbBb", "BbBbB"); [EOL]     assertValueAndPointer("/.[@name='int']", new Integer(1), "/int", "Bb", "BbB"); [EOL]     assertValueAndPointer("/map[@name='Key1']", "Value 1", "/map[@name='Key1']", "BbDd", "BbDdB"); [EOL]     assertValueAndPointer("/nestedBean[@name='strings']", bean.getNestedBean().getStrings(), "/nestedBean/strings", "BbBb", "BbBbC"); [EOL]     assertNullPointer("/nestedBean[@name='foo']", "/nestedBean[@name='foo']", "BbBn"); [EOL]     assertValueAndPointer("/map[@name='Key3']", bean.getMap().get("Key3"), "/map[@name='Key3']", "BbDd", "BbDdC"); [EOL]     assertNullPointer("/map[@name='foo']", "/map[@name='foo']", "BbDd"); [EOL]     assertValueAndPointer("/list[@name='fruitco']", context.getValue("/vendor"), "/list[5]", "BbCM"); [EOL]     assertValueAndPointer("/map/Key3[@name='key']/name", "Name 9", "/map[@name='Key3'][4][@name='key']/name", "BbDdCDdBb", "BbDdCDdBbB"); [EOL]     assertValueAndPointer("map/Key3[@name='fruitco']", context.getValue("/vendor"), "/map[@name='Key3'][3]", "BbDdCM"); [EOL]     assertValueAndPointer("/vendor[@name='fruitco']", context.getValue("/vendor"), "/vendor", "BbM"); [EOL]     assertNullPointer("/vendor[@name='foo']", "/vendor[@name='foo']", "BbMn"); [EOL]     assertNullPointer("/vendor[@name='foo'][3]", "/vendor[@name='foo'][3]", "BbMn"); [EOL]     assertNullPointer("/nestedBean[@name='foo']/bar", "/nestedBean[@name='foo']/bar", "BbBnNn"); [EOL]     assertNullPointer("/map[@name='foo']/bar", "/map[@name='foo']/bar", "BbDdNn"); [EOL]     assertNullPointer("/vendor[@name='foo']/bar", "/vendor[@name='foo']/bar", "BbMnNn"); [EOL]     assertNullPointer("/vendor[@name='foo'][3]/bar", "/vendor[@name='foo'][3]/bar", "BbMnNn"); [EOL]     assertValueAndPointer("/map[@name='Key2'][@name='name']", "Name 6", "/map[@name='Key2']/name", "BbDdBb", "BbDdBbB"); [EOL]     assertValueAndPointer("/map[@name='Key2'][@name='strings'][2]", "String 2", "/map[@name='Key2']/strings[2]", "BbDdBb", "BbDdBbB"); [EOL]     assertValueAndPointer("map[@name='Key5'][@name='key']/name", "Name 9", "/map[@name='Key5'][@name='key']/name", "BbDdDdBb", "BbDdDdBbB"); [EOL]     assertNullPointer("map[@name='Key2'][@name='foo']", "/map[@name='Key2'][@name='foo']", "BbDdBn"); [EOL]     assertNullPointer("map[@name='Key2'][@name='foo'][@name='bar']", "/map[@name='Key2'][@name='foo'][@name='bar']", "BbDdBnNn"); [EOL]     assertValueAndPointer("map[@name='Key4'][@name='fruitco']", context.getValue("/vendor"), "/map[@name='Key4']", "BbDdM"); [EOL] }
public void testDoStepNoPredicatesPropertyOwner() { [EOL]     assertValueAndPointer("/int", new Integer(1), "/int", "Bb", "BbB"); [EOL]     assertValueAndPointer("/./int", new Integer(1), "/int", "Bb", "BbB"); [EOL]     assertNullPointer("/foo", "/foo", "Bn"); [EOL]     assertValueAndPointer("/nestedBean/int", new Integer(1), "/nestedBean/int", "BbBb", "BbBbB"); [EOL]     assertValueAndPointer("/nestedBean/strings", bean.getNestedBean().getStrings(), "/nestedBean/strings", "BbBb", "BbBbC"); [EOL]     assertNullPointer("/nestedBean/foo", "/nestedBean/foo", "BbBn"); [EOL]     assertNullPointer("/map/foo", "/map[@name='foo']", "BbDd"); [EOL]     assertValueAndPointer("/list/int", new Integer(1), "/list[3]/int", "BbBb", "BbBbB"); [EOL]     assertNullPointer("/list/foo", "/list[1]/foo", "BbBn"); [EOL]     assertNullPointer("/nestedBean/foo/bar", "/nestedBean/foo/bar", "BbBnNn"); [EOL]     assertNullPointer("/list/int/bar", "/list[3]/int/bar", "BbBbBn"); [EOL]     assertNullPointer("/list/foo/bar", "/list[1]/foo/bar", "BbBnNn"); [EOL]     assertNullPointer("/map/foo/bar", "/map[@name='foo']/bar", "BbDdNn"); [EOL]     assertValueAndPointer("/map/Key1", "Value 1", "/map[@name='Key1']", "BbDd", "BbDdB"); [EOL]     assertValueAndPointer("/integers", bean.getIntegers(), "/integers", "Bb", "BbC"); [EOL] }
public void testDoStepNoPredicatesPropertyOwner() { [EOL]     assertValueAndPointer("/int", new Integer(1), "/int", "Bb", "BbB"); [EOL]     assertValueAndPointer("/./int", new Integer(1), "/int", "Bb", "BbB"); [EOL]     assertNullPointer("/foo", "/foo", "Bn"); [EOL]     assertValueAndPointer("/nestedBean/int", new Integer(1), "/nestedBean/int", "BbBb", "BbBbB"); [EOL]     assertValueAndPointer("/nestedBean/strings", bean.getNestedBean().getStrings(), "/nestedBean/strings", "BbBb", "BbBbC"); [EOL]     assertNullPointer("/nestedBean/foo", "/nestedBean/foo", "BbBn"); [EOL]     assertNullPointer("/map/foo", "/map[@name='foo']", "BbDd"); [EOL]     assertValueAndPointer("/list/int", new Integer(1), "/list[3]/int", "BbBb", "BbBbB"); [EOL]     assertNullPointer("/list/foo", "/list[1]/foo", "BbBn"); [EOL]     assertNullPointer("/nestedBean/foo/bar", "/nestedBean/foo/bar", "BbBnNn"); [EOL]     assertNullPointer("/list/int/bar", "/list[3]/int/bar", "BbBbBn"); [EOL]     assertNullPointer("/list/foo/bar", "/list[1]/foo/bar", "BbBnNn"); [EOL]     assertNullPointer("/map/foo/bar", "/map[@name='foo']/bar", "BbDdNn"); [EOL]     assertValueAndPointer("/map/Key1", "Value 1", "/map[@name='Key1']", "BbDd", "BbDdB"); [EOL]     assertValueAndPointer("/integers", bean.getIntegers(), "/integers", "Bb", "BbC"); [EOL] }
public void testDoStepNoPredicatesPropertyOwner() { [EOL]     assertValueAndPointer("/int", new Integer(1), "/int", "Bb", "BbB"); [EOL]     assertValueAndPointer("/./int", new Integer(1), "/int", "Bb", "BbB"); [EOL]     assertNullPointer("/foo", "/foo", "Bn"); [EOL]     assertValueAndPointer("/nestedBean/int", new Integer(1), "/nestedBean/int", "BbBb", "BbBbB"); [EOL]     assertValueAndPointer("/nestedBean/strings", bean.getNestedBean().getStrings(), "/nestedBean/strings", "BbBb", "BbBbC"); [EOL]     assertNullPointer("/nestedBean/foo", "/nestedBean/foo", "BbBn"); [EOL]     assertNullPointer("/map/foo", "/map[@name='foo']", "BbDd"); [EOL]     assertValueAndPointer("/list/int", new Integer(1), "/list[3]/int", "BbBb", "BbBbB"); [EOL]     assertNullPointer("/list/foo", "/list[1]/foo", "BbBn"); [EOL]     assertNullPointer("/nestedBean/foo/bar", "/nestedBean/foo/bar", "BbBnNn"); [EOL]     assertNullPointer("/list/int/bar", "/list[3]/int/bar", "BbBbBn"); [EOL]     assertNullPointer("/list/foo/bar", "/list[1]/foo/bar", "BbBnNn"); [EOL]     assertNullPointer("/map/foo/bar", "/map[@name='foo']/bar", "BbDdNn"); [EOL]     assertValueAndPointer("/map/Key1", "Value 1", "/map[@name='Key1']", "BbDd", "BbDdB"); [EOL]     assertValueAndPointer("/integers", bean.getIntegers(), "/integers", "Bb", "BbC"); [EOL] }
public void testDoStepNoPredicatesPropertyOwner() { [EOL]     assertValueAndPointer("/int", new Integer(1), "/int", "Bb", "BbB"); [EOL]     assertValueAndPointer("/./int", new Integer(1), "/int", "Bb", "BbB"); [EOL]     assertNullPointer("/foo", "/foo", "Bn"); [EOL]     assertValueAndPointer("/nestedBean/int", new Integer(1), "/nestedBean/int", "BbBb", "BbBbB"); [EOL]     assertValueAndPointer("/nestedBean/strings", bean.getNestedBean().getStrings(), "/nestedBean/strings", "BbBb", "BbBbC"); [EOL]     assertNullPointer("/nestedBean/foo", "/nestedBean/foo", "BbBn"); [EOL]     assertNullPointer("/map/foo", "/map[@name='foo']", "BbDd"); [EOL]     assertValueAndPointer("/list/int", new Integer(1), "/list[3]/int", "BbBb", "BbBbB"); [EOL]     assertNullPointer("/list/foo", "/list[1]/foo", "BbBn"); [EOL]     assertNullPointer("/nestedBean/foo/bar", "/nestedBean/foo/bar", "BbBnNn"); [EOL]     assertNullPointer("/list/int/bar", "/list[3]/int/bar", "BbBbBn"); [EOL]     assertNullPointer("/list/foo/bar", "/list[1]/foo/bar", "BbBnNn"); [EOL]     assertNullPointer("/map/foo/bar", "/map[@name='foo']/bar", "BbDdNn"); [EOL]     assertValueAndPointer("/map/Key1", "Value 1", "/map[@name='Key1']", "BbDd", "BbDdB"); [EOL]     assertValueAndPointer("/integers", bean.getIntegers(), "/integers", "Bb", "BbC"); [EOL] }
public void testDoStepNoPredicatesPropertyOwner() { [EOL]     assertValueAndPointer("/int", new Integer(1), "/int", "Bb", "BbB"); [EOL]     assertValueAndPointer("/./int", new Integer(1), "/int", "Bb", "BbB"); [EOL]     assertNullPointer("/foo", "/foo", "Bn"); [EOL]     assertValueAndPointer("/nestedBean/int", new Integer(1), "/nestedBean/int", "BbBb", "BbBbB"); [EOL]     assertValueAndPointer("/nestedBean/strings", bean.getNestedBean().getStrings(), "/nestedBean/strings", "BbBb", "BbBbC"); [EOL]     assertNullPointer("/nestedBean/foo", "/nestedBean/foo", "BbBn"); [EOL]     assertNullPointer("/map/foo", "/map[@name='foo']", "BbDd"); [EOL]     assertValueAndPointer("/list/int", new Integer(1), "/list[3]/int", "BbBb", "BbBbB"); [EOL]     assertNullPointer("/list/foo", "/list[1]/foo", "BbBn"); [EOL]     assertNullPointer("/nestedBean/foo/bar", "/nestedBean/foo/bar", "BbBnNn"); [EOL]     assertNullPointer("/list/int/bar", "/list[3]/int/bar", "BbBbBn"); [EOL]     assertNullPointer("/list/foo/bar", "/list[1]/foo/bar", "BbBnNn"); [EOL]     assertNullPointer("/map/foo/bar", "/map[@name='foo']/bar", "BbDdNn"); [EOL]     assertValueAndPointer("/map/Key1", "Value 1", "/map[@name='Key1']", "BbDd", "BbDdB"); [EOL]     assertValueAndPointer("/integers", bean.getIntegers(), "/integers", "Bb", "BbC"); [EOL] }
public void testDoStepNoPredicatesPropertyOwner() { [EOL]     assertValueAndPointer("/int", new Integer(1), "/int", "Bb", "BbB"); [EOL]     assertValueAndPointer("/./int", new Integer(1), "/int", "Bb", "BbB"); [EOL]     assertNullPointer("/foo", "/foo", "Bn"); [EOL]     assertValueAndPointer("/nestedBean/int", new Integer(1), "/nestedBean/int", "BbBb", "BbBbB"); [EOL]     assertValueAndPointer("/nestedBean/strings", bean.getNestedBean().getStrings(), "/nestedBean/strings", "BbBb", "BbBbC"); [EOL]     assertNullPointer("/nestedBean/foo", "/nestedBean/foo", "BbBn"); [EOL]     assertNullPointer("/map/foo", "/map[@name='foo']", "BbDd"); [EOL]     assertValueAndPointer("/list/int", new Integer(1), "/list[3]/int", "BbBb", "BbBbB"); [EOL]     assertNullPointer("/list/foo", "/list[1]/foo", "BbBn"); [EOL]     assertNullPointer("/nestedBean/foo/bar", "/nestedBean/foo/bar", "BbBnNn"); [EOL]     assertNullPointer("/list/int/bar", "/list[3]/int/bar", "BbBbBn"); [EOL]     assertNullPointer("/list/foo/bar", "/list[1]/foo/bar", "BbBnNn"); [EOL]     assertNullPointer("/map/foo/bar", "/map[@name='foo']/bar", "BbDdNn"); [EOL]     assertValueAndPointer("/map/Key1", "Value 1", "/map[@name='Key1']", "BbDd", "BbDdB"); [EOL]     assertValueAndPointer("/integers", bean.getIntegers(), "/integers", "Bb", "BbC"); [EOL] }
public void testDoStepNoPredicatesPropertyOwner() { [EOL]     assertValueAndPointer("/int", new Integer(1), "/int", "Bb", "BbB"); [EOL]     assertValueAndPointer("/./int", new Integer(1), "/int", "Bb", "BbB"); [EOL]     assertNullPointer("/foo", "/foo", "Bn"); [EOL]     assertValueAndPointer("/nestedBean/int", new Integer(1), "/nestedBean/int", "BbBb", "BbBbB"); [EOL]     assertValueAndPointer("/nestedBean/strings", bean.getNestedBean().getStrings(), "/nestedBean/strings", "BbBb", "BbBbC"); [EOL]     assertNullPointer("/nestedBean/foo", "/nestedBean/foo", "BbBn"); [EOL]     assertNullPointer("/map/foo", "/map[@name='foo']", "BbDd"); [EOL]     assertValueAndPointer("/list/int", new Integer(1), "/list[3]/int", "BbBb", "BbBbB"); [EOL]     assertNullPointer("/list/foo", "/list[1]/foo", "BbBn"); [EOL]     assertNullPointer("/nestedBean/foo/bar", "/nestedBean/foo/bar", "BbBnNn"); [EOL]     assertNullPointer("/list/int/bar", "/list[3]/int/bar", "BbBbBn"); [EOL]     assertNullPointer("/list/foo/bar", "/list[1]/foo/bar", "BbBnNn"); [EOL]     assertNullPointer("/map/foo/bar", "/map[@name='foo']/bar", "BbDdNn"); [EOL]     assertValueAndPointer("/map/Key1", "Value 1", "/map[@name='Key1']", "BbDd", "BbDdB"); [EOL]     assertValueAndPointer("/integers", bean.getIntegers(), "/integers", "Bb", "BbC"); [EOL] }
public void testDoStepNoPredicatesPropertyOwner() { [EOL]     assertValueAndPointer("/int", new Integer(1), "/int", "Bb", "BbB"); [EOL]     assertValueAndPointer("/./int", new Integer(1), "/int", "Bb", "BbB"); [EOL]     assertNullPointer("/foo", "/foo", "Bn"); [EOL]     assertValueAndPointer("/nestedBean/int", new Integer(1), "/nestedBean/int", "BbBb", "BbBbB"); [EOL]     assertValueAndPointer("/nestedBean/strings", bean.getNestedBean().getStrings(), "/nestedBean/strings", "BbBb", "BbBbC"); [EOL]     assertNullPointer("/nestedBean/foo", "/nestedBean/foo", "BbBn"); [EOL]     assertNullPointer("/map/foo", "/map[@name='foo']", "BbDd"); [EOL]     assertValueAndPointer("/list/int", new Integer(1), "/list[3]/int", "BbBb", "BbBbB"); [EOL]     assertNullPointer("/list/foo", "/list[1]/foo", "BbBn"); [EOL]     assertNullPointer("/nestedBean/foo/bar", "/nestedBean/foo/bar", "BbBnNn"); [EOL]     assertNullPointer("/list/int/bar", "/list[3]/int/bar", "BbBbBn"); [EOL]     assertNullPointer("/list/foo/bar", "/list[1]/foo/bar", "BbBnNn"); [EOL]     assertNullPointer("/map/foo/bar", "/map[@name='foo']/bar", "BbDdNn"); [EOL]     assertValueAndPointer("/map/Key1", "Value 1", "/map[@name='Key1']", "BbDd", "BbDdB"); [EOL]     assertValueAndPointer("/integers", bean.getIntegers(), "/integers", "Bb", "BbC"); [EOL] }
public void testDoStepNoPredicatesPropertyOwner() { [EOL]     assertValueAndPointer("/int", new Integer(1), "/int", "Bb", "BbB"); [EOL]     assertValueAndPointer("/./int", new Integer(1), "/int", "Bb", "BbB"); [EOL]     assertNullPointer("/foo", "/foo", "Bn"); [EOL]     assertValueAndPointer("/nestedBean/int", new Integer(1), "/nestedBean/int", "BbBb", "BbBbB"); [EOL]     assertValueAndPointer("/nestedBean/strings", bean.getNestedBean().getStrings(), "/nestedBean/strings", "BbBb", "BbBbC"); [EOL]     assertNullPointer("/nestedBean/foo", "/nestedBean/foo", "BbBn"); [EOL]     assertNullPointer("/map/foo", "/map[@name='foo']", "BbDd"); [EOL]     assertValueAndPointer("/list/int", new Integer(1), "/list[3]/int", "BbBb", "BbBbB"); [EOL]     assertNullPointer("/list/foo", "/list[1]/foo", "BbBn"); [EOL]     assertNullPointer("/nestedBean/foo/bar", "/nestedBean/foo/bar", "BbBnNn"); [EOL]     assertNullPointer("/list/int/bar", "/list[3]/int/bar", "BbBbBn"); [EOL]     assertNullPointer("/list/foo/bar", "/list[1]/foo/bar", "BbBnNn"); [EOL]     assertNullPointer("/map/foo/bar", "/map[@name='foo']/bar", "BbDdNn"); [EOL]     assertValueAndPointer("/map/Key1", "Value 1", "/map[@name='Key1']", "BbDd", "BbDdB"); [EOL]     assertValueAndPointer("/integers", bean.getIntegers(), "/integers", "Bb", "BbC"); [EOL] }
public void testDoStepNoPredicatesPropertyOwner() { [EOL]     assertValueAndPointer("/int", new Integer(1), "/int", "Bb", "BbB"); [EOL]     assertValueAndPointer("/./int", new Integer(1), "/int", "Bb", "BbB"); [EOL]     assertNullPointer("/foo", "/foo", "Bn"); [EOL]     assertValueAndPointer("/nestedBean/int", new Integer(1), "/nestedBean/int", "BbBb", "BbBbB"); [EOL]     assertValueAndPointer("/nestedBean/strings", bean.getNestedBean().getStrings(), "/nestedBean/strings", "BbBb", "BbBbC"); [EOL]     assertNullPointer("/nestedBean/foo", "/nestedBean/foo", "BbBn"); [EOL]     assertNullPointer("/map/foo", "/map[@name='foo']", "BbDd"); [EOL]     assertValueAndPointer("/list/int", new Integer(1), "/list[3]/int", "BbBb", "BbBbB"); [EOL]     assertNullPointer("/list/foo", "/list[1]/foo", "BbBn"); [EOL]     assertNullPointer("/nestedBean/foo/bar", "/nestedBean/foo/bar", "BbBnNn"); [EOL]     assertNullPointer("/list/int/bar", "/list[3]/int/bar", "BbBbBn"); [EOL]     assertNullPointer("/list/foo/bar", "/list[1]/foo/bar", "BbBnNn"); [EOL]     assertNullPointer("/map/foo/bar", "/map[@name='foo']/bar", "BbDdNn"); [EOL]     assertValueAndPointer("/map/Key1", "Value 1", "/map[@name='Key1']", "BbDd", "BbDdB"); [EOL]     assertValueAndPointer("/integers", bean.getIntegers(), "/integers", "Bb", "BbC"); [EOL] }
public void testDoStepNoPredicatesPropertyOwner() { [EOL]     assertValueAndPointer("/int", new Integer(1), "/int", "Bb", "BbB"); [EOL]     assertValueAndPointer("/./int", new Integer(1), "/int", "Bb", "BbB"); [EOL]     assertNullPointer("/foo", "/foo", "Bn"); [EOL]     assertValueAndPointer("/nestedBean/int", new Integer(1), "/nestedBean/int", "BbBb", "BbBbB"); [EOL]     assertValueAndPointer("/nestedBean/strings", bean.getNestedBean().getStrings(), "/nestedBean/strings", "BbBb", "BbBbC"); [EOL]     assertNullPointer("/nestedBean/foo", "/nestedBean/foo", "BbBn"); [EOL]     assertNullPointer("/map/foo", "/map[@name='foo']", "BbDd"); [EOL]     assertValueAndPointer("/list/int", new Integer(1), "/list[3]/int", "BbBb", "BbBbB"); [EOL]     assertNullPointer("/list/foo", "/list[1]/foo", "BbBn"); [EOL]     assertNullPointer("/nestedBean/foo/bar", "/nestedBean/foo/bar", "BbBnNn"); [EOL]     assertNullPointer("/list/int/bar", "/list[3]/int/bar", "BbBbBn"); [EOL]     assertNullPointer("/list/foo/bar", "/list[1]/foo/bar", "BbBnNn"); [EOL]     assertNullPointer("/map/foo/bar", "/map[@name='foo']/bar", "BbDdNn"); [EOL]     assertValueAndPointer("/map/Key1", "Value 1", "/map[@name='Key1']", "BbDd", "BbDdB"); [EOL]     assertValueAndPointer("/integers", bean.getIntegers(), "/integers", "Bb", "BbC"); [EOL] }
public void testSetNewKey() { [EOL]     assertXPathSetValue(context, "map/Key4", new Integer(7)); [EOL]     assertXPathPointerLenient(context, "//map/Key5", "/map/Key5"); [EOL]     assertXPathSetValue(context, "//map/Key5", new Integer(8)); [EOL] }
public void testSetNewKey() { [EOL]     assertXPathSetValue(context, "map/Key4", new Integer(7)); [EOL]     assertXPathPointerLenient(context, "//map/Key5", "/map/Key5"); [EOL]     assertXPathSetValue(context, "//map/Key5", new Integer(8)); [EOL] }
public void testSetNewKey() { [EOL]     assertXPathSetValue(context, "map/Key4", new Integer(7)); [EOL]     assertXPathPointerLenient(context, "//map/Key5", "/map/Key5"); [EOL]     assertXPathSetValue(context, "//map/Key5", new Integer(8)); [EOL] }
public void testErrorProperty() { [EOL]     context.getVariables().declareVariable("e", new ExceptionPropertyTestBean()); [EOL]     boolean ex = false; [EOL]     try { [EOL]         assertXPathValue(context, "$e/errorString", null); [EOL]     } catch (Throwable t) { [EOL]         ex = true; [EOL]     } [EOL]     assertTrue("Legitimate exception accessing property", ex); [EOL]     assertXPathPointer(context, "$e/errorString", "$e/errorString"); [EOL]     assertXPathPointerLenient(context, "$e/errorStringArray[1]", "$e/errorStringArray[1]"); [EOL]     assertXPathPointerIterator(context, "$e/errorString", list("$e/errorString")); [EOL]     assertXPathPointerIterator(context, "$e//error", Collections.EMPTY_LIST); [EOL] }
public void testDoPredicateName() { [EOL]     assertValueAndPointer("/nestedBean[@name='int']", new Integer(1), "/nestedBean/int", "BbBb", "BbBbB"); [EOL]     assertValueAndPointer("/.[@name='int']", new Integer(1), "/int", "Bb", "BbB"); [EOL]     assertValueAndPointer("/map[@name='Key1']", "Value 1", "/map[@name='Key1']", "BbDd", "BbDdB"); [EOL]     assertValueAndPointer("/nestedBean[@name='strings']", bean.getNestedBean().getStrings(), "/nestedBean/strings", "BbBb", "BbBbC"); [EOL]     assertNullPointer("/nestedBean[@name='foo']", "/nestedBean[@name='foo']", "BbBn"); [EOL]     assertValueAndPointer("/map[@name='Key3']", bean.getMap().get("Key3"), "/map[@name='Key3']", "BbDd", "BbDdC"); [EOL]     assertNullPointer("/map[@name='foo']", "/map[@name='foo']", "BbDd"); [EOL]     assertValueAndPointer("/list[@name='fruitco']", context.getValue("/vendor"), "/list[5]", "BbCM"); [EOL]     assertValueAndPointer("/map/Key3[@name='key']/name", "Name 9", "/map[@name='Key3'][4][@name='key']/name", "BbDdCDdBb", "BbDdCDdBbB"); [EOL]     assertValueAndPointer("map/Key3[@name='fruitco']", context.getValue("/vendor"), "/map[@name='Key3'][3]", "BbDdCM"); [EOL]     assertValueAndPointer("/vendor[@name='fruitco']", context.getValue("/vendor"), "/vendor", "BbM"); [EOL]     assertNullPointer("/vendor[@name='foo']", "/vendor[@name='foo']", "BbMn"); [EOL]     assertNullPointer("/vendor[@name='foo'][3]", "/vendor[@name='foo'][3]", "BbMn"); [EOL]     assertNullPointer("/nestedBean[@name='foo']/bar", "/nestedBean[@name='foo']/bar", "BbBnNn"); [EOL]     assertNullPointer("/map[@name='foo']/bar", "/map[@name='foo']/bar", "BbDdNn"); [EOL]     assertNullPointer("/vendor[@name='foo']/bar", "/vendor[@name='foo']/bar", "BbMnNn"); [EOL]     assertNullPointer("/vendor[@name='foo'][3]/bar", "/vendor[@name='foo'][3]/bar", "BbMnNn"); [EOL]     assertValueAndPointer("/map[@name='Key2'][@name='name']", "Name 6", "/map[@name='Key2']/name", "BbDdBb", "BbDdBbB"); [EOL]     assertValueAndPointer("/map[@name='Key2'][@name='strings'][2]", "String 2", "/map[@name='Key2']/strings[2]", "BbDdBb", "BbDdBbB"); [EOL]     assertValueAndPointer("map[@name='Key5'][@name='key']/name", "Name 9", "/map[@name='Key5'][@name='key']/name", "BbDdDdBb", "BbDdDdBbB"); [EOL]     assertNullPointer("map[@name='Key2'][@name='foo']", "/map[@name='Key2'][@name='foo']", "BbDdBn"); [EOL]     assertNullPointer("map[@name='Key2'][@name='foo'][@name='bar']", "/map[@name='Key2'][@name='foo'][@name='bar']", "BbDdBnNn"); [EOL]     assertValueAndPointer("map[@name='Key4'][@name='fruitco']", context.getValue("/vendor"), "/map[@name='Key4']", "BbDdM"); [EOL] }
public void testDoPredicateName() { [EOL]     assertValueAndPointer("/nestedBean[@name='int']", new Integer(1), "/nestedBean/int", "BbBb", "BbBbB"); [EOL]     assertValueAndPointer("/.[@name='int']", new Integer(1), "/int", "Bb", "BbB"); [EOL]     assertValueAndPointer("/map[@name='Key1']", "Value 1", "/map[@name='Key1']", "BbDd", "BbDdB"); [EOL]     assertValueAndPointer("/nestedBean[@name='strings']", bean.getNestedBean().getStrings(), "/nestedBean/strings", "BbBb", "BbBbC"); [EOL]     assertNullPointer("/nestedBean[@name='foo']", "/nestedBean[@name='foo']", "BbBn"); [EOL]     assertValueAndPointer("/map[@name='Key3']", bean.getMap().get("Key3"), "/map[@name='Key3']", "BbDd", "BbDdC"); [EOL]     assertNullPointer("/map[@name='foo']", "/map[@name='foo']", "BbDd"); [EOL]     assertValueAndPointer("/list[@name='fruitco']", context.getValue("/vendor"), "/list[5]", "BbCM"); [EOL]     assertValueAndPointer("/map/Key3[@name='key']/name", "Name 9", "/map[@name='Key3'][4][@name='key']/name", "BbDdCDdBb", "BbDdCDdBbB"); [EOL]     assertValueAndPointer("map/Key3[@name='fruitco']", context.getValue("/vendor"), "/map[@name='Key3'][3]", "BbDdCM"); [EOL]     assertValueAndPointer("/vendor[@name='fruitco']", context.getValue("/vendor"), "/vendor", "BbM"); [EOL]     assertNullPointer("/vendor[@name='foo']", "/vendor[@name='foo']", "BbMn"); [EOL]     assertNullPointer("/vendor[@name='foo'][3]", "/vendor[@name='foo'][3]", "BbMn"); [EOL]     assertNullPointer("/nestedBean[@name='foo']/bar", "/nestedBean[@name='foo']/bar", "BbBnNn"); [EOL]     assertNullPointer("/map[@name='foo']/bar", "/map[@name='foo']/bar", "BbDdNn"); [EOL]     assertNullPointer("/vendor[@name='foo']/bar", "/vendor[@name='foo']/bar", "BbMnNn"); [EOL]     assertNullPointer("/vendor[@name='foo'][3]/bar", "/vendor[@name='foo'][3]/bar", "BbMnNn"); [EOL]     assertValueAndPointer("/map[@name='Key2'][@name='name']", "Name 6", "/map[@name='Key2']/name", "BbDdBb", "BbDdBbB"); [EOL]     assertValueAndPointer("/map[@name='Key2'][@name='strings'][2]", "String 2", "/map[@name='Key2']/strings[2]", "BbDdBb", "BbDdBbB"); [EOL]     assertValueAndPointer("map[@name='Key5'][@name='key']/name", "Name 9", "/map[@name='Key5'][@name='key']/name", "BbDdDdBb", "BbDdDdBbB"); [EOL]     assertNullPointer("map[@name='Key2'][@name='foo']", "/map[@name='Key2'][@name='foo']", "BbDdBn"); [EOL]     assertNullPointer("map[@name='Key2'][@name='foo'][@name='bar']", "/map[@name='Key2'][@name='foo'][@name='bar']", "BbDdBnNn"); [EOL]     assertValueAndPointer("map[@name='Key4'][@name='fruitco']", context.getValue("/vendor"), "/map[@name='Key4']", "BbDdM"); [EOL] }
public void testDoPredicateName() { [EOL]     assertValueAndPointer("/nestedBean[@name='int']", new Integer(1), "/nestedBean/int", "BbBb", "BbBbB"); [EOL]     assertValueAndPointer("/.[@name='int']", new Integer(1), "/int", "Bb", "BbB"); [EOL]     assertValueAndPointer("/map[@name='Key1']", "Value 1", "/map[@name='Key1']", "BbDd", "BbDdB"); [EOL]     assertValueAndPointer("/nestedBean[@name='strings']", bean.getNestedBean().getStrings(), "/nestedBean/strings", "BbBb", "BbBbC"); [EOL]     assertNullPointer("/nestedBean[@name='foo']", "/nestedBean[@name='foo']", "BbBn"); [EOL]     assertValueAndPointer("/map[@name='Key3']", bean.getMap().get("Key3"), "/map[@name='Key3']", "BbDd", "BbDdC"); [EOL]     assertNullPointer("/map[@name='foo']", "/map[@name='foo']", "BbDd"); [EOL]     assertValueAndPointer("/list[@name='fruitco']", context.getValue("/vendor"), "/list[5]", "BbCM"); [EOL]     assertValueAndPointer("/map/Key3[@name='key']/name", "Name 9", "/map[@name='Key3'][4][@name='key']/name", "BbDdCDdBb", "BbDdCDdBbB"); [EOL]     assertValueAndPointer("map/Key3[@name='fruitco']", context.getValue("/vendor"), "/map[@name='Key3'][3]", "BbDdCM"); [EOL]     assertValueAndPointer("/vendor[@name='fruitco']", context.getValue("/vendor"), "/vendor", "BbM"); [EOL]     assertNullPointer("/vendor[@name='foo']", "/vendor[@name='foo']", "BbMn"); [EOL]     assertNullPointer("/vendor[@name='foo'][3]", "/vendor[@name='foo'][3]", "BbMn"); [EOL]     assertNullPointer("/nestedBean[@name='foo']/bar", "/nestedBean[@name='foo']/bar", "BbBnNn"); [EOL]     assertNullPointer("/map[@name='foo']/bar", "/map[@name='foo']/bar", "BbDdNn"); [EOL]     assertNullPointer("/vendor[@name='foo']/bar", "/vendor[@name='foo']/bar", "BbMnNn"); [EOL]     assertNullPointer("/vendor[@name='foo'][3]/bar", "/vendor[@name='foo'][3]/bar", "BbMnNn"); [EOL]     assertValueAndPointer("/map[@name='Key2'][@name='name']", "Name 6", "/map[@name='Key2']/name", "BbDdBb", "BbDdBbB"); [EOL]     assertValueAndPointer("/map[@name='Key2'][@name='strings'][2]", "String 2", "/map[@name='Key2']/strings[2]", "BbDdBb", "BbDdBbB"); [EOL]     assertValueAndPointer("map[@name='Key5'][@name='key']/name", "Name 9", "/map[@name='Key5'][@name='key']/name", "BbDdDdBb", "BbDdDdBbB"); [EOL]     assertNullPointer("map[@name='Key2'][@name='foo']", "/map[@name='Key2'][@name='foo']", "BbDdBn"); [EOL]     assertNullPointer("map[@name='Key2'][@name='foo'][@name='bar']", "/map[@name='Key2'][@name='foo'][@name='bar']", "BbDdBnNn"); [EOL]     assertValueAndPointer("map[@name='Key4'][@name='fruitco']", context.getValue("/vendor"), "/map[@name='Key4']", "BbDdM"); [EOL] }
public void testDoPredicateName() { [EOL]     assertValueAndPointer("/nestedBean[@name='int']", new Integer(1), "/nestedBean/int", "BbBb", "BbBbB"); [EOL]     assertValueAndPointer("/.[@name='int']", new Integer(1), "/int", "Bb", "BbB"); [EOL]     assertValueAndPointer("/map[@name='Key1']", "Value 1", "/map[@name='Key1']", "BbDd", "BbDdB"); [EOL]     assertValueAndPointer("/nestedBean[@name='strings']", bean.getNestedBean().getStrings(), "/nestedBean/strings", "BbBb", "BbBbC"); [EOL]     assertNullPointer("/nestedBean[@name='foo']", "/nestedBean[@name='foo']", "BbBn"); [EOL]     assertValueAndPointer("/map[@name='Key3']", bean.getMap().get("Key3"), "/map[@name='Key3']", "BbDd", "BbDdC"); [EOL]     assertNullPointer("/map[@name='foo']", "/map[@name='foo']", "BbDd"); [EOL]     assertValueAndPointer("/list[@name='fruitco']", context.getValue("/vendor"), "/list[5]", "BbCM"); [EOL]     assertValueAndPointer("/map/Key3[@name='key']/name", "Name 9", "/map[@name='Key3'][4][@name='key']/name", "BbDdCDdBb", "BbDdCDdBbB"); [EOL]     assertValueAndPointer("map/Key3[@name='fruitco']", context.getValue("/vendor"), "/map[@name='Key3'][3]", "BbDdCM"); [EOL]     assertValueAndPointer("/vendor[@name='fruitco']", context.getValue("/vendor"), "/vendor", "BbM"); [EOL]     assertNullPointer("/vendor[@name='foo']", "/vendor[@name='foo']", "BbMn"); [EOL]     assertNullPointer("/vendor[@name='foo'][3]", "/vendor[@name='foo'][3]", "BbMn"); [EOL]     assertNullPointer("/nestedBean[@name='foo']/bar", "/nestedBean[@name='foo']/bar", "BbBnNn"); [EOL]     assertNullPointer("/map[@name='foo']/bar", "/map[@name='foo']/bar", "BbDdNn"); [EOL]     assertNullPointer("/vendor[@name='foo']/bar", "/vendor[@name='foo']/bar", "BbMnNn"); [EOL]     assertNullPointer("/vendor[@name='foo'][3]/bar", "/vendor[@name='foo'][3]/bar", "BbMnNn"); [EOL]     assertValueAndPointer("/map[@name='Key2'][@name='name']", "Name 6", "/map[@name='Key2']/name", "BbDdBb", "BbDdBbB"); [EOL]     assertValueAndPointer("/map[@name='Key2'][@name='strings'][2]", "String 2", "/map[@name='Key2']/strings[2]", "BbDdBb", "BbDdBbB"); [EOL]     assertValueAndPointer("map[@name='Key5'][@name='key']/name", "Name 9", "/map[@name='Key5'][@name='key']/name", "BbDdDdBb", "BbDdDdBbB"); [EOL]     assertNullPointer("map[@name='Key2'][@name='foo']", "/map[@name='Key2'][@name='foo']", "BbDdBn"); [EOL]     assertNullPointer("map[@name='Key2'][@name='foo'][@name='bar']", "/map[@name='Key2'][@name='foo'][@name='bar']", "BbDdBnNn"); [EOL]     assertValueAndPointer("map[@name='Key4'][@name='fruitco']", context.getValue("/vendor"), "/map[@name='Key4']", "BbDdM"); [EOL] }
public void testDoPredicateName() { [EOL]     assertValueAndPointer("/nestedBean[@name='int']", new Integer(1), "/nestedBean/int", "BbBb", "BbBbB"); [EOL]     assertValueAndPointer("/.[@name='int']", new Integer(1), "/int", "Bb", "BbB"); [EOL]     assertValueAndPointer("/map[@name='Key1']", "Value 1", "/map[@name='Key1']", "BbDd", "BbDdB"); [EOL]     assertValueAndPointer("/nestedBean[@name='strings']", bean.getNestedBean().getStrings(), "/nestedBean/strings", "BbBb", "BbBbC"); [EOL]     assertNullPointer("/nestedBean[@name='foo']", "/nestedBean[@name='foo']", "BbBn"); [EOL]     assertValueAndPointer("/map[@name='Key3']", bean.getMap().get("Key3"), "/map[@name='Key3']", "BbDd", "BbDdC"); [EOL]     assertNullPointer("/map[@name='foo']", "/map[@name='foo']", "BbDd"); [EOL]     assertValueAndPointer("/list[@name='fruitco']", context.getValue("/vendor"), "/list[5]", "BbCM"); [EOL]     assertValueAndPointer("/map/Key3[@name='key']/name", "Name 9", "/map[@name='Key3'][4][@name='key']/name", "BbDdCDdBb", "BbDdCDdBbB"); [EOL]     assertValueAndPointer("map/Key3[@name='fruitco']", context.getValue("/vendor"), "/map[@name='Key3'][3]", "BbDdCM"); [EOL]     assertValueAndPointer("/vendor[@name='fruitco']", context.getValue("/vendor"), "/vendor", "BbM"); [EOL]     assertNullPointer("/vendor[@name='foo']", "/vendor[@name='foo']", "BbMn"); [EOL]     assertNullPointer("/vendor[@name='foo'][3]", "/vendor[@name='foo'][3]", "BbMn"); [EOL]     assertNullPointer("/nestedBean[@name='foo']/bar", "/nestedBean[@name='foo']/bar", "BbBnNn"); [EOL]     assertNullPointer("/map[@name='foo']/bar", "/map[@name='foo']/bar", "BbDdNn"); [EOL]     assertNullPointer("/vendor[@name='foo']/bar", "/vendor[@name='foo']/bar", "BbMnNn"); [EOL]     assertNullPointer("/vendor[@name='foo'][3]/bar", "/vendor[@name='foo'][3]/bar", "BbMnNn"); [EOL]     assertValueAndPointer("/map[@name='Key2'][@name='name']", "Name 6", "/map[@name='Key2']/name", "BbDdBb", "BbDdBbB"); [EOL]     assertValueAndPointer("/map[@name='Key2'][@name='strings'][2]", "String 2", "/map[@name='Key2']/strings[2]", "BbDdBb", "BbDdBbB"); [EOL]     assertValueAndPointer("map[@name='Key5'][@name='key']/name", "Name 9", "/map[@name='Key5'][@name='key']/name", "BbDdDdBb", "BbDdDdBbB"); [EOL]     assertNullPointer("map[@name='Key2'][@name='foo']", "/map[@name='Key2'][@name='foo']", "BbDdBn"); [EOL]     assertNullPointer("map[@name='Key2'][@name='foo'][@name='bar']", "/map[@name='Key2'][@name='foo'][@name='bar']", "BbDdBnNn"); [EOL]     assertValueAndPointer("map[@name='Key4'][@name='fruitco']", context.getValue("/vendor"), "/map[@name='Key4']", "BbDdM"); [EOL] }
public void testDoPredicateName() { [EOL]     assertValueAndPointer("/nestedBean[@name='int']", new Integer(1), "/nestedBean/int", "BbBb", "BbBbB"); [EOL]     assertValueAndPointer("/.[@name='int']", new Integer(1), "/int", "Bb", "BbB"); [EOL]     assertValueAndPointer("/map[@name='Key1']", "Value 1", "/map[@name='Key1']", "BbDd", "BbDdB"); [EOL]     assertValueAndPointer("/nestedBean[@name='strings']", bean.getNestedBean().getStrings(), "/nestedBean/strings", "BbBb", "BbBbC"); [EOL]     assertNullPointer("/nestedBean[@name='foo']", "/nestedBean[@name='foo']", "BbBn"); [EOL]     assertValueAndPointer("/map[@name='Key3']", bean.getMap().get("Key3"), "/map[@name='Key3']", "BbDd", "BbDdC"); [EOL]     assertNullPointer("/map[@name='foo']", "/map[@name='foo']", "BbDd"); [EOL]     assertValueAndPointer("/list[@name='fruitco']", context.getValue("/vendor"), "/list[5]", "BbCM"); [EOL]     assertValueAndPointer("/map/Key3[@name='key']/name", "Name 9", "/map[@name='Key3'][4][@name='key']/name", "BbDdCDdBb", "BbDdCDdBbB"); [EOL]     assertValueAndPointer("map/Key3[@name='fruitco']", context.getValue("/vendor"), "/map[@name='Key3'][3]", "BbDdCM"); [EOL]     assertValueAndPointer("/vendor[@name='fruitco']", context.getValue("/vendor"), "/vendor", "BbM"); [EOL]     assertNullPointer("/vendor[@name='foo']", "/vendor[@name='foo']", "BbMn"); [EOL]     assertNullPointer("/vendor[@name='foo'][3]", "/vendor[@name='foo'][3]", "BbMn"); [EOL]     assertNullPointer("/nestedBean[@name='foo']/bar", "/nestedBean[@name='foo']/bar", "BbBnNn"); [EOL]     assertNullPointer("/map[@name='foo']/bar", "/map[@name='foo']/bar", "BbDdNn"); [EOL]     assertNullPointer("/vendor[@name='foo']/bar", "/vendor[@name='foo']/bar", "BbMnNn"); [EOL]     assertNullPointer("/vendor[@name='foo'][3]/bar", "/vendor[@name='foo'][3]/bar", "BbMnNn"); [EOL]     assertValueAndPointer("/map[@name='Key2'][@name='name']", "Name 6", "/map[@name='Key2']/name", "BbDdBb", "BbDdBbB"); [EOL]     assertValueAndPointer("/map[@name='Key2'][@name='strings'][2]", "String 2", "/map[@name='Key2']/strings[2]", "BbDdBb", "BbDdBbB"); [EOL]     assertValueAndPointer("map[@name='Key5'][@name='key']/name", "Name 9", "/map[@name='Key5'][@name='key']/name", "BbDdDdBb", "BbDdDdBbB"); [EOL]     assertNullPointer("map[@name='Key2'][@name='foo']", "/map[@name='Key2'][@name='foo']", "BbDdBn"); [EOL]     assertNullPointer("map[@name='Key2'][@name='foo'][@name='bar']", "/map[@name='Key2'][@name='foo'][@name='bar']", "BbDdBnNn"); [EOL]     assertValueAndPointer("map[@name='Key4'][@name='fruitco']", context.getValue("/vendor"), "/map[@name='Key4']", "BbDdM"); [EOL] }
public void testDoPredicateName() { [EOL]     assertValueAndPointer("/nestedBean[@name='int']", new Integer(1), "/nestedBean/int", "BbBb", "BbBbB"); [EOL]     assertValueAndPointer("/.[@name='int']", new Integer(1), "/int", "Bb", "BbB"); [EOL]     assertValueAndPointer("/map[@name='Key1']", "Value 1", "/map[@name='Key1']", "BbDd", "BbDdB"); [EOL]     assertValueAndPointer("/nestedBean[@name='strings']", bean.getNestedBean().getStrings(), "/nestedBean/strings", "BbBb", "BbBbC"); [EOL]     assertNullPointer("/nestedBean[@name='foo']", "/nestedBean[@name='foo']", "BbBn"); [EOL]     assertValueAndPointer("/map[@name='Key3']", bean.getMap().get("Key3"), "/map[@name='Key3']", "BbDd", "BbDdC"); [EOL]     assertNullPointer("/map[@name='foo']", "/map[@name='foo']", "BbDd"); [EOL]     assertValueAndPointer("/list[@name='fruitco']", context.getValue("/vendor"), "/list[5]", "BbCM"); [EOL]     assertValueAndPointer("/map/Key3[@name='key']/name", "Name 9", "/map[@name='Key3'][4][@name='key']/name", "BbDdCDdBb", "BbDdCDdBbB"); [EOL]     assertValueAndPointer("map/Key3[@name='fruitco']", context.getValue("/vendor"), "/map[@name='Key3'][3]", "BbDdCM"); [EOL]     assertValueAndPointer("/vendor[@name='fruitco']", context.getValue("/vendor"), "/vendor", "BbM"); [EOL]     assertNullPointer("/vendor[@name='foo']", "/vendor[@name='foo']", "BbMn"); [EOL]     assertNullPointer("/vendor[@name='foo'][3]", "/vendor[@name='foo'][3]", "BbMn"); [EOL]     assertNullPointer("/nestedBean[@name='foo']/bar", "/nestedBean[@name='foo']/bar", "BbBnNn"); [EOL]     assertNullPointer("/map[@name='foo']/bar", "/map[@name='foo']/bar", "BbDdNn"); [EOL]     assertNullPointer("/vendor[@name='foo']/bar", "/vendor[@name='foo']/bar", "BbMnNn"); [EOL]     assertNullPointer("/vendor[@name='foo'][3]/bar", "/vendor[@name='foo'][3]/bar", "BbMnNn"); [EOL]     assertValueAndPointer("/map[@name='Key2'][@name='name']", "Name 6", "/map[@name='Key2']/name", "BbDdBb", "BbDdBbB"); [EOL]     assertValueAndPointer("/map[@name='Key2'][@name='strings'][2]", "String 2", "/map[@name='Key2']/strings[2]", "BbDdBb", "BbDdBbB"); [EOL]     assertValueAndPointer("map[@name='Key5'][@name='key']/name", "Name 9", "/map[@name='Key5'][@name='key']/name", "BbDdDdBb", "BbDdDdBbB"); [EOL]     assertNullPointer("map[@name='Key2'][@name='foo']", "/map[@name='Key2'][@name='foo']", "BbDdBn"); [EOL]     assertNullPointer("map[@name='Key2'][@name='foo'][@name='bar']", "/map[@name='Key2'][@name='foo'][@name='bar']", "BbDdBnNn"); [EOL]     assertValueAndPointer("map[@name='Key4'][@name='fruitco']", context.getValue("/vendor"), "/map[@name='Key4']", "BbDdM"); [EOL] }
public void testErrorProperty() { [EOL]     context.getVariables().declareVariable("e", new ExceptionPropertyTestBean()); [EOL]     boolean ex = false; [EOL]     try { [EOL]         assertXPathValue(context, "$e/errorString", null); [EOL]     } catch (Throwable t) { [EOL]         ex = true; [EOL]     } [EOL]     assertTrue("Legitimate exception accessing property", ex); [EOL]     assertXPathPointer(context, "$e/errorString", "$e/errorString"); [EOL]     assertXPathPointerLenient(context, "$e/errorStringArray[1]", "$e/errorStringArray[1]"); [EOL]     assertXPathPointerIterator(context, "$e/errorString", list("$e/errorString")); [EOL]     assertXPathPointerIterator(context, "$e//error", Collections.EMPTY_LIST); [EOL] }
public void testCoreOperationGreaterThanOrEqual() { [EOL]     assertXPathExpression("3>=4", CoreOperationGreaterThanOrEqual.class, "3 >= 4"); [EOL]     assertXPathExpression("3>=(2>=1)", CoreOperationGreaterThanOrEqual.class, "3 >= (2 >= 1)"); [EOL] }
public void testCoreOperationGreaterThanOrEqual() { [EOL]     assertXPathExpression("3>=4", CoreOperationGreaterThanOrEqual.class, "3 >= 4"); [EOL]     assertXPathExpression("3>=(2>=1)", CoreOperationGreaterThanOrEqual.class, "3 >= (2 >= 1)"); [EOL] }
public void testCoreOperationGreaterThanOrEqual() { [EOL]     assertXPathExpression("3>=4", CoreOperationGreaterThanOrEqual.class, "3 >= 4"); [EOL]     assertXPathExpression("3>=(2>=1)", CoreOperationGreaterThanOrEqual.class, "3 >= (2 >= 1)"); [EOL] }
public void testCoreOperationGreaterThanOrEqual() { [EOL]     assertXPathExpression("3>=4", CoreOperationGreaterThanOrEqual.class, "3 >= 4"); [EOL]     assertXPathExpression("3>=(2>=1)", CoreOperationGreaterThanOrEqual.class, "3 >= (2 >= 1)"); [EOL] }
public void testCoreOperationGreaterThanOrEqual() { [EOL]     assertXPathExpression("3>=4", CoreOperationGreaterThanOrEqual.class, "3 >= 4"); [EOL]     assertXPathExpression("3>=(2>=1)", CoreOperationGreaterThanOrEqual.class, "3 >= (2 >= 1)"); [EOL] }
public void testFormatNumberFunction() { [EOL]     DecimalFormatSymbols symbols = new DecimalFormatSymbols(); [EOL]     symbols.setDigit('D'); [EOL]     context.setDecimalFormatSymbols("test", symbols); [EOL]     assertXPathValue(context, "format-number(123456789, '#.000000000')", "123456789.000000000"); [EOL]     assertXPathValue(context, "format-number(123456789, '#.0')", "123456789.0"); [EOL]     assertXPathValue(context, "format-number(0.123456789, '##%')", "12%"); [EOL]     assertXPathValue(context, "format-number(123456789, '################')", "123456789"); [EOL]     assertXPathValue(context, "format-number(123456789, 'D.0', 'test')", "123456789.0"); [EOL]     assertXPathValue(context, "format-number(123456789, '$DDD,DDD,DDD.DD', 'test')", "$123,456,789"); [EOL] }
public void testFormatNumberFunction() { [EOL]     DecimalFormatSymbols symbols = new DecimalFormatSymbols(); [EOL]     symbols.setDigit('D'); [EOL]     context.setDecimalFormatSymbols("test", symbols); [EOL]     assertXPathValue(context, "format-number(123456789, '#.000000000')", "123456789.000000000"); [EOL]     assertXPathValue(context, "format-number(123456789, '#.0')", "123456789.0"); [EOL]     assertXPathValue(context, "format-number(0.123456789, '##%')", "12%"); [EOL]     assertXPathValue(context, "format-number(123456789, '################')", "123456789"); [EOL]     assertXPathValue(context, "format-number(123456789, 'D.0', 'test')", "123456789.0"); [EOL]     assertXPathValue(context, "format-number(123456789, '$DDD,DDD,DDD.DD', 'test')", "$123,456,789"); [EOL] }
public void testFormatNumberFunction() { [EOL]     DecimalFormatSymbols symbols = new DecimalFormatSymbols(); [EOL]     symbols.setDigit('D'); [EOL]     context.setDecimalFormatSymbols("test", symbols); [EOL]     assertXPathValue(context, "format-number(123456789, '#.000000000')", "123456789.000000000"); [EOL]     assertXPathValue(context, "format-number(123456789, '#.0')", "123456789.0"); [EOL]     assertXPathValue(context, "format-number(0.123456789, '##%')", "12%"); [EOL]     assertXPathValue(context, "format-number(123456789, '################')", "123456789"); [EOL]     assertXPathValue(context, "format-number(123456789, 'D.0', 'test')", "123456789.0"); [EOL]     assertXPathValue(context, "format-number(123456789, '$DDD,DDD,DDD.DD', 'test')", "$123,456,789"); [EOL] }
public void testFormatNumberFunction() { [EOL]     DecimalFormatSymbols symbols = new DecimalFormatSymbols(); [EOL]     symbols.setDigit('D'); [EOL]     context.setDecimalFormatSymbols("test", symbols); [EOL]     assertXPathValue(context, "format-number(123456789, '#.000000000')", "123456789.000000000"); [EOL]     assertXPathValue(context, "format-number(123456789, '#.0')", "123456789.0"); [EOL]     assertXPathValue(context, "format-number(0.123456789, '##%')", "12%"); [EOL]     assertXPathValue(context, "format-number(123456789, '################')", "123456789"); [EOL]     assertXPathValue(context, "format-number(123456789, 'D.0', 'test')", "123456789.0"); [EOL]     assertXPathValue(context, "format-number(123456789, '$DDD,DDD,DDD.DD', 'test')", "$123,456,789"); [EOL] }
public void testFormatNumberFunction() { [EOL]     DecimalFormatSymbols symbols = new DecimalFormatSymbols(); [EOL]     symbols.setDigit('D'); [EOL]     context.setDecimalFormatSymbols("test", symbols); [EOL]     assertXPathValue(context, "format-number(123456789, '#.000000000')", "123456789.000000000"); [EOL]     assertXPathValue(context, "format-number(123456789, '#.0')", "123456789.0"); [EOL]     assertXPathValue(context, "format-number(0.123456789, '##%')", "12%"); [EOL]     assertXPathValue(context, "format-number(123456789, '################')", "123456789"); [EOL]     assertXPathValue(context, "format-number(123456789, 'D.0', 'test')", "123456789.0"); [EOL]     assertXPathValue(context, "format-number(123456789, '$DDD,DDD,DDD.DD', 'test')", "$123,456,789"); [EOL] }
public void testFormatNumberFunction() { [EOL]     DecimalFormatSymbols symbols = new DecimalFormatSymbols(); [EOL]     symbols.setDigit('D'); [EOL]     context.setDecimalFormatSymbols("test", symbols); [EOL]     assertXPathValue(context, "format-number(123456789, '#.000000000')", "123456789.000000000"); [EOL]     assertXPathValue(context, "format-number(123456789, '#.0')", "123456789.0"); [EOL]     assertXPathValue(context, "format-number(0.123456789, '##%')", "12%"); [EOL]     assertXPathValue(context, "format-number(123456789, '################')", "123456789"); [EOL]     assertXPathValue(context, "format-number(123456789, 'D.0', 'test')", "123456789.0"); [EOL]     assertXPathValue(context, "format-number(123456789, '$DDD,DDD,DDD.DD', 'test')", "$123,456,789"); [EOL] }
public void testFormatNumberFunction() { [EOL]     DecimalFormatSymbols symbols = new DecimalFormatSymbols(); [EOL]     symbols.setDigit('D'); [EOL]     context.setDecimalFormatSymbols("test", symbols); [EOL]     assertXPathValue(context, "format-number(123456789, '#.000000000')", "123456789.000000000"); [EOL]     assertXPathValue(context, "format-number(123456789, '#.0')", "123456789.0"); [EOL]     assertXPathValue(context, "format-number(0.123456789, '##%')", "12%"); [EOL]     assertXPathValue(context, "format-number(123456789, '################')", "123456789"); [EOL]     assertXPathValue(context, "format-number(123456789, 'D.0', 'test')", "123456789.0"); [EOL]     assertXPathValue(context, "format-number(123456789, '$DDD,DDD,DDD.DD', 'test')", "$123,456,789"); [EOL] }
public void testFormatNumberFunction() { [EOL]     DecimalFormatSymbols symbols = new DecimalFormatSymbols(); [EOL]     symbols.setDigit('D'); [EOL]     context.setDecimalFormatSymbols("test", symbols); [EOL]     assertXPathValue(context, "format-number(123456789, '#.000000000')", "123456789.000000000"); [EOL]     assertXPathValue(context, "format-number(123456789, '#.0')", "123456789.0"); [EOL]     assertXPathValue(context, "format-number(0.123456789, '##%')", "12%"); [EOL]     assertXPathValue(context, "format-number(123456789, '################')", "123456789"); [EOL]     assertXPathValue(context, "format-number(123456789, 'D.0', 'test')", "123456789.0"); [EOL]     assertXPathValue(context, "format-number(123456789, '$DDD,DDD,DDD.DD', 'test')", "$123,456,789"); [EOL] }
public void testFormatNumberFunction() { [EOL]     DecimalFormatSymbols symbols = new DecimalFormatSymbols(); [EOL]     symbols.setDigit('D'); [EOL]     context.setDecimalFormatSymbols("test", symbols); [EOL]     assertXPathValue(context, "format-number(123456789, '#.000000000')", "123456789.000000000"); [EOL]     assertXPathValue(context, "format-number(123456789, '#.0')", "123456789.0"); [EOL]     assertXPathValue(context, "format-number(0.123456789, '##%')", "12%"); [EOL]     assertXPathValue(context, "format-number(123456789, '################')", "123456789"); [EOL]     assertXPathValue(context, "format-number(123456789, 'D.0', 'test')", "123456789.0"); [EOL]     assertXPathValue(context, "format-number(123456789, '$DDD,DDD,DDD.DD', 'test')", "$123,456,789"); [EOL] }
public void testFormatNumberFunction() { [EOL]     DecimalFormatSymbols symbols = new DecimalFormatSymbols(); [EOL]     symbols.setDigit('D'); [EOL]     context.setDecimalFormatSymbols("test", symbols); [EOL]     assertXPathValue(context, "format-number(123456789, '#.000000000')", "123456789.000000000"); [EOL]     assertXPathValue(context, "format-number(123456789, '#.0')", "123456789.0"); [EOL]     assertXPathValue(context, "format-number(0.123456789, '##%')", "12%"); [EOL]     assertXPathValue(context, "format-number(123456789, '################')", "123456789"); [EOL]     assertXPathValue(context, "format-number(123456789, 'D.0', 'test')", "123456789.0"); [EOL]     assertXPathValue(context, "format-number(123456789, '$DDD,DDD,DDD.DD', 'test')", "$123,456,789"); [EOL] }
public void testTypeConversions() { [EOL]     assertXPathValue(context, "vendor/location/employeeCount + 1", new Double(11)); [EOL]     assertXPathValue(context, "vendor/location/employeeCount and true()", Boolean.TRUE); [EOL] }
public void testTypeConversions() { [EOL]     assertXPathValue(context, "vendor/location/employeeCount + 1", new Double(11)); [EOL]     assertXPathValue(context, "vendor/location/employeeCount and true()", Boolean.TRUE); [EOL] }
public void testTypeConversions() { [EOL]     assertXPathValue(context, "vendor/location/employeeCount + 1", new Double(11)); [EOL]     assertXPathValue(context, "vendor/location/employeeCount and true()", Boolean.TRUE); [EOL] }
public void testTypeConversions() { [EOL]     assertXPathValue(context, "vendor/location/employeeCount + 1", new Double(11)); [EOL]     assertXPathValue(context, "vendor/location/employeeCount and true()", Boolean.TRUE); [EOL] }
public void testTypeConversions() { [EOL]     assertXPathValue(context, "vendor/location/employeeCount + 1", new Double(11)); [EOL]     assertXPathValue(context, "vendor/location/employeeCount and true()", Boolean.TRUE); [EOL] }
public void testTypeConversions() { [EOL]     assertXPathValue(context, "vendor/location/employeeCount + 1", new Double(11)); [EOL]     assertXPathValue(context, "vendor/location/employeeCount and true()", Boolean.TRUE); [EOL] }
public void testTypeConversions() { [EOL]     assertXPathValue(context, "vendor/location/employeeCount + 1", new Double(11)); [EOL]     assertXPathValue(context, "vendor/location/employeeCount and true()", Boolean.TRUE); [EOL] }
public void testTypeConversions() { [EOL]     assertXPathValue(context, "vendor/location/employeeCount + 1", new Double(11)); [EOL]     assertXPathValue(context, "vendor/location/employeeCount and true()", Boolean.TRUE); [EOL] }
public void testTypeConversions() { [EOL]     assertXPathValue(context, "vendor/location/employeeCount + 1", new Double(11)); [EOL]     assertXPathValue(context, "vendor/location/employeeCount and true()", Boolean.TRUE); [EOL] }
public void testTypeConversions() { [EOL]     assertXPathValue(context, "vendor/location/employeeCount + 1", new Double(11)); [EOL]     assertXPathValue(context, "vendor/location/employeeCount and true()", Boolean.TRUE); [EOL] }
public void testDoStepNoPredicatesPropertyOwner() { [EOL]     assertValueAndPointer("/int", new Integer(1), "/int", "Bb", "BbB"); [EOL]     assertValueAndPointer("/./int", new Integer(1), "/int", "Bb", "BbB"); [EOL]     assertNullPointer("/foo", "/foo", "Bn"); [EOL]     assertValueAndPointer("/nestedBean/int", new Integer(1), "/nestedBean/int", "BbBb", "BbBbB"); [EOL]     assertValueAndPointer("/nestedBean/strings", bean.getNestedBean().getStrings(), "/nestedBean/strings", "BbBb", "BbBbC"); [EOL]     assertNullPointer("/nestedBean/foo", "/nestedBean/foo", "BbBn"); [EOL]     assertNullPointer("/map/foo", "/map[@name='foo']", "BbDd"); [EOL]     assertValueAndPointer("/list/int", new Integer(1), "/list[3]/int", "BbBb", "BbBbB"); [EOL]     assertNullPointer("/list/foo", "/list[1]/foo", "BbBn"); [EOL]     assertNullPointer("/nestedBean/foo/bar", "/nestedBean/foo/bar", "BbBnNn"); [EOL]     assertNullPointer("/list/int/bar", "/list[3]/int/bar", "BbBbBn"); [EOL]     assertNullPointer("/list/foo/bar", "/list[1]/foo/bar", "BbBnNn"); [EOL]     assertNullPointer("/map/foo/bar", "/map[@name='foo']/bar", "BbDdNn"); [EOL]     assertValueAndPointer("/map/Key1", "Value 1", "/map[@name='Key1']", "BbDd", "BbDdB"); [EOL]     assertValueAndPointer("/integers", bean.getIntegers(), "/integers", "Bb", "BbC"); [EOL] }
public void testAxisParent() { [EOL]     assertXPathValue(context, "count(/beans/..)", new Double(1)); [EOL]     assertXPathValue(context, "count(//..)", new Double(9)); [EOL]     assertXPathValue(context, "count(//../..)", new Double(2)); [EOL]     assertXPathValueIterator(context, "//parent::beans/name", list("Name 1", "Name 2")); [EOL] }
public void testAxisParent() { [EOL]     assertXPathValue(context, "count(/beans/..)", new Double(1)); [EOL]     assertXPathValue(context, "count(//..)", new Double(9)); [EOL]     assertXPathValue(context, "count(//../..)", new Double(2)); [EOL]     assertXPathValueIterator(context, "//parent::beans/name", list("Name 1", "Name 2")); [EOL] }
public void testSetNewKey() { [EOL]     assertXPathSetValue(context, "map/Key4", new Integer(7)); [EOL]     assertXPathPointerLenient(context, "//map/Key5", "/map/Key5"); [EOL]     assertXPathSetValue(context, "//map/Key5", new Integer(8)); [EOL] }
public void testSetNewKey() { [EOL]     assertXPathSetValue(context, "map/Key4", new Integer(7)); [EOL]     assertXPathPointerLenient(context, "//map/Key5", "/map/Key5"); [EOL]     assertXPathSetValue(context, "//map/Key5", new Integer(8)); [EOL] }
public void testAxisParent() { [EOL]     assertXPathValue(context, "count(/beans/..)", new Double(1)); [EOL]     assertXPathValue(context, "count(//..)", new Double(9)); [EOL]     assertXPathValue(context, "count(//../..)", new Double(2)); [EOL]     assertXPathValueIterator(context, "//parent::beans/name", list("Name 1", "Name 2")); [EOL] }
public void testAxisParent() { [EOL]     assertXPathValue(context, "count(/beans/..)", new Double(1)); [EOL]     assertXPathValue(context, "count(//..)", new Double(9)); [EOL]     assertXPathValue(context, "count(//../..)", new Double(2)); [EOL]     assertXPathValueIterator(context, "//parent::beans/name", list("Name 1", "Name 2")); [EOL] }
public void testStaticMethodCall() { [EOL]     assertXPathValue(context, "string(test:build(8, 'goober'))", "foo=8; bar=goober"); [EOL]     assertXPathValue(context, "string(jxpathtest:TestFunctions.build(8, 'goober'))", "foo=8; bar=goober"); [EOL]     assertXPathValue(context, "string(" + TestFunctions.class.getName() + ".build(8, 'goober'))", "foo=8; bar=goober"); [EOL]     assertXPathValue(context, "string(test:increment(8))", "9"); [EOL]     assertXPathValue(context, "test:string(/beans/name)", "Name 1"); [EOL] }
public void testStaticMethodCall() { [EOL]     assertXPathValue(context, "string(test:build(8, 'goober'))", "foo=8; bar=goober"); [EOL]     assertXPathValue(context, "string(jxpathtest:TestFunctions.build(8, 'goober'))", "foo=8; bar=goober"); [EOL]     assertXPathValue(context, "string(" + TestFunctions.class.getName() + ".build(8, 'goober'))", "foo=8; bar=goober"); [EOL]     assertXPathValue(context, "string(test:increment(8))", "9"); [EOL]     assertXPathValue(context, "test:string(/beans/name)", "Name 1"); [EOL] }
public void testStaticMethodCall() { [EOL]     assertXPathValue(context, "string(test:build(8, 'goober'))", "foo=8; bar=goober"); [EOL]     assertXPathValue(context, "string(jxpathtest:TestFunctions.build(8, 'goober'))", "foo=8; bar=goober"); [EOL]     assertXPathValue(context, "string(" + TestFunctions.class.getName() + ".build(8, 'goober'))", "foo=8; bar=goober"); [EOL]     assertXPathValue(context, "string(test:increment(8))", "9"); [EOL]     assertXPathValue(context, "test:string(/beans/name)", "Name 1"); [EOL] }
public void testStaticMethodCall() { [EOL]     assertXPathValue(context, "string(test:build(8, 'goober'))", "foo=8; bar=goober"); [EOL]     assertXPathValue(context, "string(jxpathtest:TestFunctions.build(8, 'goober'))", "foo=8; bar=goober"); [EOL]     assertXPathValue(context, "string(" + TestFunctions.class.getName() + ".build(8, 'goober'))", "foo=8; bar=goober"); [EOL]     assertXPathValue(context, "string(test:increment(8))", "9"); [EOL]     assertXPathValue(context, "test:string(/beans/name)", "Name 1"); [EOL] }
public void testStaticMethodCall() { [EOL]     assertXPathValue(context, "string(test:build(8, 'goober'))", "foo=8; bar=goober"); [EOL]     assertXPathValue(context, "string(jxpathtest:TestFunctions.build(8, 'goober'))", "foo=8; bar=goober"); [EOL]     assertXPathValue(context, "string(" + TestFunctions.class.getName() + ".build(8, 'goober'))", "foo=8; bar=goober"); [EOL]     assertXPathValue(context, "string(test:increment(8))", "9"); [EOL]     assertXPathValue(context, "test:string(/beans/name)", "Name 1"); [EOL] }
public void testStaticMethodCall() { [EOL]     assertXPathValue(context, "string(test:build(8, 'goober'))", "foo=8; bar=goober"); [EOL]     assertXPathValue(context, "string(jxpathtest:TestFunctions.build(8, 'goober'))", "foo=8; bar=goober"); [EOL]     assertXPathValue(context, "string(" + TestFunctions.class.getName() + ".build(8, 'goober'))", "foo=8; bar=goober"); [EOL]     assertXPathValue(context, "string(test:increment(8))", "9"); [EOL]     assertXPathValue(context, "test:string(/beans/name)", "Name 1"); [EOL] }
public void testStaticMethodCall() { [EOL]     assertXPathValue(context, "string(test:build(8, 'goober'))", "foo=8; bar=goober"); [EOL]     assertXPathValue(context, "string(jxpathtest:TestFunctions.build(8, 'goober'))", "foo=8; bar=goober"); [EOL]     assertXPathValue(context, "string(" + TestFunctions.class.getName() + ".build(8, 'goober'))", "foo=8; bar=goober"); [EOL]     assertXPathValue(context, "string(test:increment(8))", "9"); [EOL]     assertXPathValue(context, "test:string(/beans/name)", "Name 1"); [EOL] }
public void testStaticMethodCall() { [EOL]     assertXPathValue(context, "string(test:build(8, 'goober'))", "foo=8; bar=goober"); [EOL]     assertXPathValue(context, "string(jxpathtest:TestFunctions.build(8, 'goober'))", "foo=8; bar=goober"); [EOL]     assertXPathValue(context, "string(" + TestFunctions.class.getName() + ".build(8, 'goober'))", "foo=8; bar=goober"); [EOL]     assertXPathValue(context, "string(test:increment(8))", "9"); [EOL]     assertXPathValue(context, "test:string(/beans/name)", "Name 1"); [EOL] }
public void testStaticMethodCall() { [EOL]     assertXPathValue(context, "string(test:build(8, 'goober'))", "foo=8; bar=goober"); [EOL]     assertXPathValue(context, "string(jxpathtest:TestFunctions.build(8, 'goober'))", "foo=8; bar=goober"); [EOL]     assertXPathValue(context, "string(" + TestFunctions.class.getName() + ".build(8, 'goober'))", "foo=8; bar=goober"); [EOL]     assertXPathValue(context, "string(test:increment(8))", "9"); [EOL]     assertXPathValue(context, "test:string(/beans/name)", "Name 1"); [EOL] }
public void testStaticMethodCall() { [EOL]     assertXPathValue(context, "string(test:build(8, 'goober'))", "foo=8; bar=goober"); [EOL]     assertXPathValue(context, "string(jxpathtest:TestFunctions.build(8, 'goober'))", "foo=8; bar=goober"); [EOL]     assertXPathValue(context, "string(" + TestFunctions.class.getName() + ".build(8, 'goober'))", "foo=8; bar=goober"); [EOL]     assertXPathValue(context, "string(test:increment(8))", "9"); [EOL]     assertXPathValue(context, "test:string(/beans/name)", "Name 1"); [EOL] }
public void testStaticMethodCall() { [EOL]     assertXPathValue(context, "string(test:build(8, 'goober'))", "foo=8; bar=goober"); [EOL]     assertXPathValue(context, "string(jxpathtest:TestFunctions.build(8, 'goober'))", "foo=8; bar=goober"); [EOL]     assertXPathValue(context, "string(" + TestFunctions.class.getName() + ".build(8, 'goober'))", "foo=8; bar=goober"); [EOL]     assertXPathValue(context, "string(test:increment(8))", "9"); [EOL]     assertXPathValue(context, "test:string(/beans/name)", "Name 1"); [EOL] }
public void testStaticMethodCall() { [EOL]     assertXPathValue(context, "string(test:build(8, 'goober'))", "foo=8; bar=goober"); [EOL]     assertXPathValue(context, "string(jxpathtest:TestFunctions.build(8, 'goober'))", "foo=8; bar=goober"); [EOL]     assertXPathValue(context, "string(" + TestFunctions.class.getName() + ".build(8, 'goober'))", "foo=8; bar=goober"); [EOL]     assertXPathValue(context, "string(test:increment(8))", "9"); [EOL]     assertXPathValue(context, "test:string(/beans/name)", "Name 1"); [EOL] }
public void testStaticMethodCall() { [EOL]     assertXPathValue(context, "string(test:build(8, 'goober'))", "foo=8; bar=goober"); [EOL]     assertXPathValue(context, "string(jxpathtest:TestFunctions.build(8, 'goober'))", "foo=8; bar=goober"); [EOL]     assertXPathValue(context, "string(" + TestFunctions.class.getName() + ".build(8, 'goober'))", "foo=8; bar=goober"); [EOL]     assertXPathValue(context, "string(test:increment(8))", "9"); [EOL]     assertXPathValue(context, "test:string(/beans/name)", "Name 1"); [EOL] }
public void testStaticMethodCall() { [EOL]     assertXPathValue(context, "string(test:build(8, 'goober'))", "foo=8; bar=goober"); [EOL]     assertXPathValue(context, "string(jxpathtest:TestFunctions.build(8, 'goober'))", "foo=8; bar=goober"); [EOL]     assertXPathValue(context, "string(" + TestFunctions.class.getName() + ".build(8, 'goober'))", "foo=8; bar=goober"); [EOL]     assertXPathValue(context, "string(test:increment(8))", "9"); [EOL]     assertXPathValue(context, "test:string(/beans/name)", "Name 1"); [EOL] }
public void testStaticMethodCall() { [EOL]     assertXPathValue(context, "string(test:build(8, 'goober'))", "foo=8; bar=goober"); [EOL]     assertXPathValue(context, "string(jxpathtest:TestFunctions.build(8, 'goober'))", "foo=8; bar=goober"); [EOL]     assertXPathValue(context, "string(" + TestFunctions.class.getName() + ".build(8, 'goober'))", "foo=8; bar=goober"); [EOL]     assertXPathValue(context, "string(test:increment(8))", "9"); [EOL]     assertXPathValue(context, "test:string(/beans/name)", "Name 1"); [EOL] }
public void testStaticMethodCall() { [EOL]     assertXPathValue(context, "string(test:build(8, 'goober'))", "foo=8; bar=goober"); [EOL]     assertXPathValue(context, "string(jxpathtest:TestFunctions.build(8, 'goober'))", "foo=8; bar=goober"); [EOL]     assertXPathValue(context, "string(" + TestFunctions.class.getName() + ".build(8, 'goober'))", "foo=8; bar=goober"); [EOL]     assertXPathValue(context, "string(test:increment(8))", "9"); [EOL]     assertXPathValue(context, "test:string(/beans/name)", "Name 1"); [EOL] }
public void testStaticMethodCall() { [EOL]     assertXPathValue(context, "string(test:build(8, 'goober'))", "foo=8; bar=goober"); [EOL]     assertXPathValue(context, "string(jxpathtest:TestFunctions.build(8, 'goober'))", "foo=8; bar=goober"); [EOL]     assertXPathValue(context, "string(" + TestFunctions.class.getName() + ".build(8, 'goober'))", "foo=8; bar=goober"); [EOL]     assertXPathValue(context, "string(test:increment(8))", "9"); [EOL]     assertXPathValue(context, "test:string(/beans/name)", "Name 1"); [EOL] }
public void testStaticMethodCall() { [EOL]     assertXPathValue(context, "string(test:build(8, 'goober'))", "foo=8; bar=goober"); [EOL]     assertXPathValue(context, "string(jxpathtest:TestFunctions.build(8, 'goober'))", "foo=8; bar=goober"); [EOL]     assertXPathValue(context, "string(" + TestFunctions.class.getName() + ".build(8, 'goober'))", "foo=8; bar=goober"); [EOL]     assertXPathValue(context, "string(test:increment(8))", "9"); [EOL]     assertXPathValue(context, "test:string(/beans/name)", "Name 1"); [EOL] }
public void testStaticMethodCall() { [EOL]     assertXPathValue(context, "string(test:build(8, 'goober'))", "foo=8; bar=goober"); [EOL]     assertXPathValue(context, "string(jxpathtest:TestFunctions.build(8, 'goober'))", "foo=8; bar=goober"); [EOL]     assertXPathValue(context, "string(" + TestFunctions.class.getName() + ".build(8, 'goober'))", "foo=8; bar=goober"); [EOL]     assertXPathValue(context, "string(test:increment(8))", "9"); [EOL]     assertXPathValue(context, "test:string(/beans/name)", "Name 1"); [EOL] }
public void testStaticMethodCall() { [EOL]     assertXPathValue(context, "string(test:build(8, 'goober'))", "foo=8; bar=goober"); [EOL]     assertXPathValue(context, "string(jxpathtest:TestFunctions.build(8, 'goober'))", "foo=8; bar=goober"); [EOL]     assertXPathValue(context, "string(" + TestFunctions.class.getName() + ".build(8, 'goober'))", "foo=8; bar=goober"); [EOL]     assertXPathValue(context, "string(test:increment(8))", "9"); [EOL]     assertXPathValue(context, "test:string(/beans/name)", "Name 1"); [EOL] }
public void testStaticMethodCall() { [EOL]     assertXPathValue(context, "string(test:build(8, 'goober'))", "foo=8; bar=goober"); [EOL]     assertXPathValue(context, "string(jxpathtest:TestFunctions.build(8, 'goober'))", "foo=8; bar=goober"); [EOL]     assertXPathValue(context, "string(" + TestFunctions.class.getName() + ".build(8, 'goober'))", "foo=8; bar=goober"); [EOL]     assertXPathValue(context, "string(test:increment(8))", "9"); [EOL]     assertXPathValue(context, "test:string(/beans/name)", "Name 1"); [EOL] }
public void testStaticMethodCall() { [EOL]     assertXPathValue(context, "string(test:build(8, 'goober'))", "foo=8; bar=goober"); [EOL]     assertXPathValue(context, "string(jxpathtest:TestFunctions.build(8, 'goober'))", "foo=8; bar=goober"); [EOL]     assertXPathValue(context, "string(" + TestFunctions.class.getName() + ".build(8, 'goober'))", "foo=8; bar=goober"); [EOL]     assertXPathValue(context, "string(test:increment(8))", "9"); [EOL]     assertXPathValue(context, "test:string(/beans/name)", "Name 1"); [EOL] }
public void testCoreOperationLessThanOrEqual() { [EOL]     assertXPathExpression("3<=4", CoreOperationLessThanOrEqual.class, "3 <= 4"); [EOL]     assertXPathExpression("3<=(2>=1)", CoreOperationLessThanOrEqual.class, "3 <= (2 >= 1)"); [EOL] }
public void testCoreOperationLessThanOrEqual() { [EOL]     assertXPathExpression("3<=4", CoreOperationLessThanOrEqual.class, "3 <= 4"); [EOL]     assertXPathExpression("3<=(2>=1)", CoreOperationLessThanOrEqual.class, "3 <= (2 >= 1)"); [EOL] }
public void testCoreOperationLessThanOrEqual() { [EOL]     assertXPathExpression("3<=4", CoreOperationLessThanOrEqual.class, "3 <= 4"); [EOL]     assertXPathExpression("3<=(2>=1)", CoreOperationLessThanOrEqual.class, "3 <= (2 >= 1)"); [EOL] }
public void testAllocation() { [EOL]     assertXPathValue(context, "string(test:new())", "foo=0; bar=null"); [EOL]     assertXPathValue(context, "string(jxpathtest:TestFunctions.new())", "foo=0; bar=null"); [EOL]     assertXPathValue(context, "string(" + TestFunctions.class.getName() + ".new())", "foo=0; bar=null"); [EOL]     assertXPathValue(context, "string(test:new(3, 'baz'))", "foo=3; bar=baz"); [EOL]     assertXPathValue(context, "string(test:new('3', 4))", "foo=3; bar=4.0"); [EOL]     context.getVariables().declareVariable("A", "baz"); [EOL]     assertXPathValue(context, "string(test:new(2, $A, false))", "foo=2; bar=baz"); [EOL] }
public void testAxisAttribute() { [EOL]     assertXPathValue(context, "vendor/location/@id", "100"); [EOL]     assertXPathPointer(context, "vendor/location/@id", "/vendor[1]/location[1]/@id"); [EOL]     assertXPathValueIterator(context, "vendor/location/@id", list("100", "101")); [EOL]     assertXPathValue(context, "vendor/product/price:amount/@price:discount", "10%"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount/@price:discount)", "priceNS"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount/@price:discount)", "discount"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount/@price:discount)", "price:discount"); [EOL]     assertXPathValue(context, "vendor/product/price:amount/@discount", "20%"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount/@discount)", ""); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount/@discount)", "discount"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount/@discount)", "discount"); [EOL]     assertXPathValueIterator(context, "vendor/product/price:amount/@price:*", list("10%")); [EOL]     assertXPathValueIterator(context, "vendor/location[1]/@*", set("100", "", "local")); [EOL]     assertXPathValueIterator(context, "vendor/product/price:amount/@*", list("20%")); [EOL]     assertXPathValue(context, "vendor/location/@manager", ""); [EOL]     assertXPathValueLenient(context, "vendor/location/@missing", null); [EOL]     assertXPathValueLenient(context, "vendor/location/@miss:missing", null); [EOL]     assertXPathValue(context, "vendor/location[@id='101']//street", "Tangerine Drive"); [EOL]     assertXPathValueIterator(context, "/vendor/location[1]/@*[name()!= 'manager']", list("100", "local")); [EOL] }
public void testAxisAttribute() { [EOL]     assertXPathValue(context, "vendor/location/@id", "100"); [EOL]     assertXPathPointer(context, "vendor/location/@id", "/vendor[1]/location[1]/@id"); [EOL]     assertXPathValueIterator(context, "vendor/location/@id", list("100", "101")); [EOL]     assertXPathValue(context, "vendor/product/price:amount/@price:discount", "10%"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount/@price:discount)", "priceNS"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount/@price:discount)", "discount"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount/@price:discount)", "price:discount"); [EOL]     assertXPathValue(context, "vendor/product/price:amount/@discount", "20%"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount/@discount)", ""); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount/@discount)", "discount"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount/@discount)", "discount"); [EOL]     assertXPathValueIterator(context, "vendor/product/price:amount/@price:*", list("10%")); [EOL]     assertXPathValueIterator(context, "vendor/location[1]/@*", set("100", "", "local")); [EOL]     assertXPathValueIterator(context, "vendor/product/price:amount/@*", list("20%")); [EOL]     assertXPathValue(context, "vendor/location/@manager", ""); [EOL]     assertXPathValueLenient(context, "vendor/location/@missing", null); [EOL]     assertXPathValueLenient(context, "vendor/location/@miss:missing", null); [EOL]     assertXPathValue(context, "vendor/location[@id='101']//street", "Tangerine Drive"); [EOL]     assertXPathValueIterator(context, "/vendor/location[1]/@*[name()!= 'manager']", list("100", "local")); [EOL] }
public void testAxisAttribute() { [EOL]     assertXPathValue(context, "vendor/location/@id", "100"); [EOL]     assertXPathPointer(context, "vendor/location/@id", "/vendor[1]/location[1]/@id"); [EOL]     assertXPathValueIterator(context, "vendor/location/@id", list("100", "101")); [EOL]     assertXPathValue(context, "vendor/product/price:amount/@price:discount", "10%"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount/@price:discount)", "priceNS"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount/@price:discount)", "discount"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount/@price:discount)", "price:discount"); [EOL]     assertXPathValue(context, "vendor/product/price:amount/@discount", "20%"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount/@discount)", ""); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount/@discount)", "discount"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount/@discount)", "discount"); [EOL]     assertXPathValueIterator(context, "vendor/product/price:amount/@price:*", list("10%")); [EOL]     assertXPathValueIterator(context, "vendor/location[1]/@*", set("100", "", "local")); [EOL]     assertXPathValueIterator(context, "vendor/product/price:amount/@*", list("20%")); [EOL]     assertXPathValue(context, "vendor/location/@manager", ""); [EOL]     assertXPathValueLenient(context, "vendor/location/@missing", null); [EOL]     assertXPathValueLenient(context, "vendor/location/@miss:missing", null); [EOL]     assertXPathValue(context, "vendor/location[@id='101']//street", "Tangerine Drive"); [EOL]     assertXPathValueIterator(context, "/vendor/location[1]/@*[name()!= 'manager']", list("100", "local")); [EOL] }
public void testAxisAttribute() { [EOL]     assertXPathValue(context, "vendor/location/@id", "100"); [EOL]     assertXPathPointer(context, "vendor/location/@id", "/vendor[1]/location[1]/@id"); [EOL]     assertXPathValueIterator(context, "vendor/location/@id", list("100", "101")); [EOL]     assertXPathValue(context, "vendor/product/price:amount/@price:discount", "10%"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount/@price:discount)", "priceNS"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount/@price:discount)", "discount"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount/@price:discount)", "price:discount"); [EOL]     assertXPathValue(context, "vendor/product/price:amount/@discount", "20%"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount/@discount)", ""); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount/@discount)", "discount"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount/@discount)", "discount"); [EOL]     assertXPathValueIterator(context, "vendor/product/price:amount/@price:*", list("10%")); [EOL]     assertXPathValueIterator(context, "vendor/location[1]/@*", set("100", "", "local")); [EOL]     assertXPathValueIterator(context, "vendor/product/price:amount/@*", list("20%")); [EOL]     assertXPathValue(context, "vendor/location/@manager", ""); [EOL]     assertXPathValueLenient(context, "vendor/location/@missing", null); [EOL]     assertXPathValueLenient(context, "vendor/location/@miss:missing", null); [EOL]     assertXPathValue(context, "vendor/location[@id='101']//street", "Tangerine Drive"); [EOL]     assertXPathValueIterator(context, "/vendor/location[1]/@*[name()!= 'manager']", list("100", "local")); [EOL] }
public void testAxisAttribute() { [EOL]     assertXPathValue(context, "vendor/location/@id", "100"); [EOL]     assertXPathPointer(context, "vendor/location/@id", "/vendor[1]/location[1]/@id"); [EOL]     assertXPathValueIterator(context, "vendor/location/@id", list("100", "101")); [EOL]     assertXPathValue(context, "vendor/product/price:amount/@price:discount", "10%"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount/@price:discount)", "priceNS"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount/@price:discount)", "discount"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount/@price:discount)", "price:discount"); [EOL]     assertXPathValue(context, "vendor/product/price:amount/@discount", "20%"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount/@discount)", ""); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount/@discount)", "discount"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount/@discount)", "discount"); [EOL]     assertXPathValueIterator(context, "vendor/product/price:amount/@price:*", list("10%")); [EOL]     assertXPathValueIterator(context, "vendor/location[1]/@*", set("100", "", "local")); [EOL]     assertXPathValueIterator(context, "vendor/product/price:amount/@*", list("20%")); [EOL]     assertXPathValue(context, "vendor/location/@manager", ""); [EOL]     assertXPathValueLenient(context, "vendor/location/@missing", null); [EOL]     assertXPathValueLenient(context, "vendor/location/@miss:missing", null); [EOL]     assertXPathValue(context, "vendor/location[@id='101']//street", "Tangerine Drive"); [EOL]     assertXPathValueIterator(context, "/vendor/location[1]/@*[name()!= 'manager']", list("100", "local")); [EOL] }
public void testAxisAttribute() { [EOL]     assertXPathValue(context, "vendor/location/@id", "100"); [EOL]     assertXPathPointer(context, "vendor/location/@id", "/vendor[1]/location[1]/@id"); [EOL]     assertXPathValueIterator(context, "vendor/location/@id", list("100", "101")); [EOL]     assertXPathValue(context, "vendor/product/price:amount/@price:discount", "10%"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount/@price:discount)", "priceNS"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount/@price:discount)", "discount"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount/@price:discount)", "price:discount"); [EOL]     assertXPathValue(context, "vendor/product/price:amount/@discount", "20%"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount/@discount)", ""); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount/@discount)", "discount"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount/@discount)", "discount"); [EOL]     assertXPathValueIterator(context, "vendor/product/price:amount/@price:*", list("10%")); [EOL]     assertXPathValueIterator(context, "vendor/location[1]/@*", set("100", "", "local")); [EOL]     assertXPathValueIterator(context, "vendor/product/price:amount/@*", list("20%")); [EOL]     assertXPathValue(context, "vendor/location/@manager", ""); [EOL]     assertXPathValueLenient(context, "vendor/location/@missing", null); [EOL]     assertXPathValueLenient(context, "vendor/location/@miss:missing", null); [EOL]     assertXPathValue(context, "vendor/location[@id='101']//street", "Tangerine Drive"); [EOL]     assertXPathValueIterator(context, "/vendor/location[1]/@*[name()!= 'manager']", list("100", "local")); [EOL] }
public void testCollectionMethodCall() { [EOL]     List list = new ArrayList(); [EOL]     list.add("foo"); [EOL]     context.getVariables().declareVariable("myList", list); [EOL]     assertXPathValue(context, "size($myList)", new Integer(1)); [EOL]     assertXPathValue(context, "size(beans)", new Integer(2)); [EOL]     context.getValue("add($myList, 'hello')"); [EOL]     assertEquals("After adding an element", 2, list.size()); [EOL]     JXPathContext context = JXPathContext.newContext(new ArrayList()); [EOL]     assertEquals("Extension function on root collection", "0", String.valueOf(context.getValue("size(/)"))); [EOL] }
public void testRemovePathPropertyValue() { [EOL]     context.removePath("nestedBean/int"); [EOL]     assertEquals("Remove property value", new Integer(0), context.getValue("nestedBean/int")); [EOL] }
public void testRemovePathPropertyValue() { [EOL]     context.removePath("nestedBean/int"); [EOL]     assertEquals("Remove property value", new Integer(0), context.getValue("nestedBean/int")); [EOL] }
public void testRemovePathPropertyValue() { [EOL]     context.removePath("nestedBean/int"); [EOL]     assertEquals("Remove property value", new Integer(0), context.getValue("nestedBean/int")); [EOL] }
public void testRemovePathPropertyValue() { [EOL]     context.removePath("nestedBean/int"); [EOL]     assertEquals("Remove property value", new Integer(0), context.getValue("nestedBean/int")); [EOL] }
public void testRemovePathPropertyValue() { [EOL]     context.removePath("nestedBean/int"); [EOL]     assertEquals("Remove property value", new Integer(0), context.getValue("nestedBean/int")); [EOL] }
public void testRemovePathPropertyValue() { [EOL]     context.removePath("nestedBean/int"); [EOL]     assertEquals("Remove property value", new Integer(0), context.getValue("nestedBean/int")); [EOL] }
public void testRemovePathPropertyValue() { [EOL]     context.removePath("nestedBean/int"); [EOL]     assertEquals("Remove property value", new Integer(0), context.getValue("nestedBean/int")); [EOL] }
public void testRemovePathPropertyValue() { [EOL]     context.removePath("nestedBean/int"); [EOL]     assertEquals("Remove property value", new Integer(0), context.getValue("nestedBean/int")); [EOL] }
public void testRemovePathPropertyValue() { [EOL]     context.removePath("nestedBean/int"); [EOL]     assertEquals("Remove property value", new Integer(0), context.getValue("nestedBean/int")); [EOL] }
public void testRemovePathPropertyValue() { [EOL]     context.removePath("nestedBean/int"); [EOL]     assertEquals("Remove property value", new Integer(0), context.getValue("nestedBean/int")); [EOL] }
public void testNodeSetToInteger() { [EOL]     assertConversion(new NodeSet() { [EOL]  [EOL]         public List getNodes() { [EOL]             return null; [EOL]         } [EOL]  [EOL]         public List getPointers() { [EOL]             return null; [EOL]         } [EOL]  [EOL]         public List getValues() { [EOL]             return Collections.singletonList("9"); [EOL]         } [EOL]     }, Integer.class, new Integer(9)); [EOL] }
public void testNodeSetToInteger() { [EOL]     assertConversion(new NodeSet() { [EOL]  [EOL]         public List getNodes() { [EOL]             return null; [EOL]         } [EOL]  [EOL]         public List getPointers() { [EOL]             return null; [EOL]         } [EOL]  [EOL]         public List getValues() { [EOL]             return Collections.singletonList("9"); [EOL]         } [EOL]     }, Integer.class, new Integer(9)); [EOL] }
public void testNodeSetToInteger() { [EOL]     assertConversion(new NodeSet() { [EOL]  [EOL]         public List getNodes() { [EOL]             return null; [EOL]         } [EOL]  [EOL]         public List getPointers() { [EOL]             return null; [EOL]         } [EOL]  [EOL]         public List getValues() { [EOL]             return Collections.singletonList("9"); [EOL]         } [EOL]     }, Integer.class, new Integer(9)); [EOL] }
public void testNodeSetToInteger() { [EOL]     assertConversion(new NodeSet() { [EOL]  [EOL]         public List getNodes() { [EOL]             return null; [EOL]         } [EOL]  [EOL]         public List getPointers() { [EOL]             return null; [EOL]         } [EOL]  [EOL]         public List getValues() { [EOL]             return Collections.singletonList("9"); [EOL]         } [EOL]     }, Integer.class, new Integer(9)); [EOL] }
public void testNodeSetToInteger() { [EOL]     assertConversion(new NodeSet() { [EOL]  [EOL]         public List getNodes() { [EOL]             return null; [EOL]         } [EOL]  [EOL]         public List getPointers() { [EOL]             return null; [EOL]         } [EOL]  [EOL]         public List getValues() { [EOL]             return Collections.singletonList("9"); [EOL]         } [EOL]     }, Integer.class, new Integer(9)); [EOL] }
public void testNodeSetToInteger() { [EOL]     assertConversion(new NodeSet() { [EOL]  [EOL]         public List getNodes() { [EOL]             return null; [EOL]         } [EOL]  [EOL]         public List getPointers() { [EOL]             return null; [EOL]         } [EOL]  [EOL]         public List getValues() { [EOL]             return Collections.singletonList("9"); [EOL]         } [EOL]     }, Integer.class, new Integer(9)); [EOL] }
public void testNodeSetToInteger() { [EOL]     assertConversion(new NodeSet() { [EOL]  [EOL]         public List getNodes() { [EOL]             return null; [EOL]         } [EOL]  [EOL]         public List getPointers() { [EOL]             return null; [EOL]         } [EOL]  [EOL]         public List getValues() { [EOL]             return Collections.singletonList("9"); [EOL]         } [EOL]     }, Integer.class, new Integer(9)); [EOL] }
public void testNodeSetToInteger() { [EOL]     assertConversion(new NodeSet() { [EOL]  [EOL]         public List getNodes() { [EOL]             return null; [EOL]         } [EOL]  [EOL]         public List getPointers() { [EOL]             return null; [EOL]         } [EOL]  [EOL]         public List getValues() { [EOL]             return Collections.singletonList("9"); [EOL]         } [EOL]     }, Integer.class, new Integer(9)); [EOL] }
public void testNodeSetToInteger() { [EOL]     assertConversion(new NodeSet() { [EOL]  [EOL]         public List getNodes() { [EOL]             return null; [EOL]         } [EOL]  [EOL]         public List getPointers() { [EOL]             return null; [EOL]         } [EOL]  [EOL]         public List getValues() { [EOL]             return Collections.singletonList("9"); [EOL]         } [EOL]     }, Integer.class, new Integer(9)); [EOL] }
public void testNodeSetToInteger() { [EOL]     assertConversion(new NodeSet() { [EOL]  [EOL]         public List getNodes() { [EOL]             return null; [EOL]         } [EOL]  [EOL]         public List getPointers() { [EOL]             return null; [EOL]         } [EOL]  [EOL]         public List getValues() { [EOL]             return Collections.singletonList("9"); [EOL]         } [EOL]     }, Integer.class, new Integer(9)); [EOL] }
public void testRemovePathCollectionElement() { [EOL]     context.getVariables().declareVariable("temp", list("temp1", "temp2")); [EOL]     context.removePath("$temp[1]"); [EOL]     assertEquals("Remove collection element", "temp2", context.getValue("$temp[1]")); [EOL] }
public void testRemovePathUndeclareVariable() { [EOL]     context.getVariables().declareVariable("temp", "temp"); [EOL]     context.removePath("$temp"); [EOL]     assertTrue("Undeclare variable", !context.getVariables().isDeclaredVariable("temp")); [EOL] }
public void testRemovePathUndeclareVariable() { [EOL]     context.getVariables().declareVariable("temp", "temp"); [EOL]     context.removePath("$temp"); [EOL]     assertTrue("Undeclare variable", !context.getVariables().isDeclaredVariable("temp")); [EOL] }
public void testCoreOperationLessThanOrEqual() { [EOL]     assertXPathExpression("3<=4", CoreOperationLessThanOrEqual.class, "3 <= 4"); [EOL]     assertXPathExpression("3<=(2>=1)", CoreOperationLessThanOrEqual.class, "3 <= (2 >= 1)"); [EOL] }
public void testCoreOperationLessThanOrEqual() { [EOL]     assertXPathExpression("3<=4", CoreOperationLessThanOrEqual.class, "3 <= 4"); [EOL]     assertXPathExpression("3<=(2>=1)", CoreOperationLessThanOrEqual.class, "3 <= (2 >= 1)"); [EOL] }
public void testCreatePathDeclareVariable() { [EOL]     assertXPathCreatePath(context, "$string", null, "$string"); [EOL] }
public void testCreatePathDeclareVariable() { [EOL]     assertXPathCreatePath(context, "$string", null, "$string"); [EOL] }
public void testCreatePathDeclareVariable() { [EOL]     assertXPathCreatePath(context, "$string", null, "$string"); [EOL] }
public void testCreatePathDeclareVariable() { [EOL]     assertXPathCreatePath(context, "$string", null, "$string"); [EOL] }
public void testSetNewKey() { [EOL]     assertXPathSetValue(context, "map/Key4", new Integer(7)); [EOL]     assertXPathPointerLenient(context, "//map/Key5", "/map/Key5"); [EOL]     assertXPathSetValue(context, "//map/Key5", new Integer(8)); [EOL] }
public void testAxisAttribute() { [EOL]     assertXPathValue(context, "vendor/location/@id", "100"); [EOL]     assertXPathPointer(context, "vendor/location/@id", "/vendor[1]/location[1]/@id"); [EOL]     assertXPathValueIterator(context, "vendor/location/@id", list("100", "101")); [EOL]     assertXPathValue(context, "vendor/product/price:amount/@price:discount", "10%"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount/@price:discount)", "priceNS"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount/@price:discount)", "discount"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount/@price:discount)", "price:discount"); [EOL]     assertXPathValue(context, "vendor/product/price:amount/@discount", "20%"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount/@discount)", ""); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount/@discount)", "discount"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount/@discount)", "discount"); [EOL]     assertXPathValueIterator(context, "vendor/product/price:amount/@price:*", list("10%")); [EOL]     assertXPathValueIterator(context, "vendor/location[1]/@*", set("100", "", "local")); [EOL]     assertXPathValueIterator(context, "vendor/product/price:amount/@*", list("20%")); [EOL]     assertXPathValue(context, "vendor/location/@manager", ""); [EOL]     assertXPathValueLenient(context, "vendor/location/@missing", null); [EOL]     assertXPathValueLenient(context, "vendor/location/@miss:missing", null); [EOL]     assertXPathValue(context, "vendor/location[@id='101']//street", "Tangerine Drive"); [EOL]     assertXPathValueIterator(context, "/vendor/location[1]/@*[name()!= 'manager']", list("100", "local")); [EOL] }
public void testAxisAttribute() { [EOL]     assertXPathValue(context, "vendor/location/@id", "100"); [EOL]     assertXPathPointer(context, "vendor/location/@id", "/vendor[1]/location[1]/@id"); [EOL]     assertXPathValueIterator(context, "vendor/location/@id", list("100", "101")); [EOL]     assertXPathValue(context, "vendor/product/price:amount/@price:discount", "10%"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount/@price:discount)", "priceNS"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount/@price:discount)", "discount"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount/@price:discount)", "price:discount"); [EOL]     assertXPathValue(context, "vendor/product/price:amount/@discount", "20%"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount/@discount)", ""); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount/@discount)", "discount"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount/@discount)", "discount"); [EOL]     assertXPathValueIterator(context, "vendor/product/price:amount/@price:*", list("10%")); [EOL]     assertXPathValueIterator(context, "vendor/location[1]/@*", set("100", "", "local")); [EOL]     assertXPathValueIterator(context, "vendor/product/price:amount/@*", list("20%")); [EOL]     assertXPathValue(context, "vendor/location/@manager", ""); [EOL]     assertXPathValueLenient(context, "vendor/location/@missing", null); [EOL]     assertXPathValueLenient(context, "vendor/location/@miss:missing", null); [EOL]     assertXPathValue(context, "vendor/location[@id='101']//street", "Tangerine Drive"); [EOL]     assertXPathValueIterator(context, "/vendor/location[1]/@*[name()!= 'manager']", list("100", "local")); [EOL] }
public void testErrorProperty() { [EOL]     context.getVariables().declareVariable("e", new ExceptionPropertyTestBean()); [EOL]     boolean ex = false; [EOL]     try { [EOL]         assertXPathValue(context, "$e/errorString", null); [EOL]     } catch (Throwable t) { [EOL]         ex = true; [EOL]     } [EOL]     assertTrue("Legitimate exception accessing property", ex); [EOL]     assertXPathPointer(context, "$e/errorString", "$e/errorString"); [EOL]     assertXPathPointerLenient(context, "$e/errorStringArray[1]", "$e/errorStringArray[1]"); [EOL]     assertXPathPointerIterator(context, "$e/errorString", list("$e/errorString")); [EOL]     assertXPathPointerIterator(context, "$e//error", Collections.EMPTY_LIST); [EOL] }
public void testErrorProperty() { [EOL]     context.getVariables().declareVariable("e", new ExceptionPropertyTestBean()); [EOL]     boolean ex = false; [EOL]     try { [EOL]         assertXPathValue(context, "$e/errorString", null); [EOL]     } catch (Throwable t) { [EOL]         ex = true; [EOL]     } [EOL]     assertTrue("Legitimate exception accessing property", ex); [EOL]     assertXPathPointer(context, "$e/errorString", "$e/errorString"); [EOL]     assertXPathPointerLenient(context, "$e/errorStringArray[1]", "$e/errorStringArray[1]"); [EOL]     assertXPathPointerIterator(context, "$e/errorString", list("$e/errorString")); [EOL]     assertXPathPointerIterator(context, "$e//error", Collections.EMPTY_LIST); [EOL] }
public void testErrorProperty() { [EOL]     context.getVariables().declareVariable("e", new ExceptionPropertyTestBean()); [EOL]     boolean ex = false; [EOL]     try { [EOL]         assertXPathValue(context, "$e/errorString", null); [EOL]     } catch (Throwable t) { [EOL]         ex = true; [EOL]     } [EOL]     assertTrue("Legitimate exception accessing property", ex); [EOL]     assertXPathPointer(context, "$e/errorString", "$e/errorString"); [EOL]     assertXPathPointerLenient(context, "$e/errorStringArray[1]", "$e/errorStringArray[1]"); [EOL]     assertXPathPointerIterator(context, "$e/errorString", list("$e/errorString")); [EOL]     assertXPathPointerIterator(context, "$e//error", Collections.EMPTY_LIST); [EOL] }
public void testErrorProperty() { [EOL]     context.getVariables().declareVariable("e", new ExceptionPropertyTestBean()); [EOL]     boolean ex = false; [EOL]     try { [EOL]         assertXPathValue(context, "$e/errorString", null); [EOL]     } catch (Throwable t) { [EOL]         ex = true; [EOL]     } [EOL]     assertTrue("Legitimate exception accessing property", ex); [EOL]     assertXPathPointer(context, "$e/errorString", "$e/errorString"); [EOL]     assertXPathPointerLenient(context, "$e/errorStringArray[1]", "$e/errorStringArray[1]"); [EOL]     assertXPathPointerIterator(context, "$e/errorString", list("$e/errorString")); [EOL]     assertXPathPointerIterator(context, "$e//error", Collections.EMPTY_LIST); [EOL] }
public void testErrorProperty() { [EOL]     context.getVariables().declareVariable("e", new ExceptionPropertyTestBean()); [EOL]     boolean ex = false; [EOL]     try { [EOL]         assertXPathValue(context, "$e/errorString", null); [EOL]     } catch (Throwable t) { [EOL]         ex = true; [EOL]     } [EOL]     assertTrue("Legitimate exception accessing property", ex); [EOL]     assertXPathPointer(context, "$e/errorString", "$e/errorString"); [EOL]     assertXPathPointerLenient(context, "$e/errorStringArray[1]", "$e/errorStringArray[1]"); [EOL]     assertXPathPointerIterator(context, "$e/errorString", list("$e/errorString")); [EOL]     assertXPathPointerIterator(context, "$e//error", Collections.EMPTY_LIST); [EOL] }
public void testErrorProperty() { [EOL]     context.getVariables().declareVariable("e", new ExceptionPropertyTestBean()); [EOL]     boolean ex = false; [EOL]     try { [EOL]         assertXPathValue(context, "$e/errorString", null); [EOL]     } catch (Throwable t) { [EOL]         ex = true; [EOL]     } [EOL]     assertTrue("Legitimate exception accessing property", ex); [EOL]     assertXPathPointer(context, "$e/errorString", "$e/errorString"); [EOL]     assertXPathPointerLenient(context, "$e/errorStringArray[1]", "$e/errorStringArray[1]"); [EOL]     assertXPathPointerIterator(context, "$e/errorString", list("$e/errorString")); [EOL]     assertXPathPointerIterator(context, "$e//error", Collections.EMPTY_LIST); [EOL] }
public void testErrorProperty() { [EOL]     context.getVariables().declareVariable("e", new ExceptionPropertyTestBean()); [EOL]     boolean ex = false; [EOL]     try { [EOL]         assertXPathValue(context, "$e/errorString", null); [EOL]     } catch (Throwable t) { [EOL]         ex = true; [EOL]     } [EOL]     assertTrue("Legitimate exception accessing property", ex); [EOL]     assertXPathPointer(context, "$e/errorString", "$e/errorString"); [EOL]     assertXPathPointerLenient(context, "$e/errorStringArray[1]", "$e/errorStringArray[1]"); [EOL]     assertXPathPointerIterator(context, "$e/errorString", list("$e/errorString")); [EOL]     assertXPathPointerIterator(context, "$e//error", Collections.EMPTY_LIST); [EOL] }
public void testCollectionMethodCall() { [EOL]     List list = new ArrayList(); [EOL]     list.add("foo"); [EOL]     context.getVariables().declareVariable("myList", list); [EOL]     assertXPathValue(context, "size($myList)", new Integer(1)); [EOL]     assertXPathValue(context, "size(beans)", new Integer(2)); [EOL]     context.getValue("add($myList, 'hello')"); [EOL]     assertEquals("After adding an element", 2, list.size()); [EOL]     JXPathContext context = JXPathContext.newContext(new ArrayList()); [EOL]     assertEquals("Extension function on root collection", "0", String.valueOf(context.getValue("size(/)"))); [EOL] }
public void testCollectionMethodCall() { [EOL]     List list = new ArrayList(); [EOL]     list.add("foo"); [EOL]     context.getVariables().declareVariable("myList", list); [EOL]     assertXPathValue(context, "size($myList)", new Integer(1)); [EOL]     assertXPathValue(context, "size(beans)", new Integer(2)); [EOL]     context.getValue("add($myList, 'hello')"); [EOL]     assertEquals("After adding an element", 2, list.size()); [EOL]     JXPathContext context = JXPathContext.newContext(new ArrayList()); [EOL]     assertEquals("Extension function on root collection", "0", String.valueOf(context.getValue("size(/)"))); [EOL] }
public void testCollectionMethodCall() { [EOL]     List list = new ArrayList(); [EOL]     list.add("foo"); [EOL]     context.getVariables().declareVariable("myList", list); [EOL]     assertXPathValue(context, "size($myList)", new Integer(1)); [EOL]     assertXPathValue(context, "size(beans)", new Integer(2)); [EOL]     context.getValue("add($myList, 'hello')"); [EOL]     assertEquals("After adding an element", 2, list.size()); [EOL]     JXPathContext context = JXPathContext.newContext(new ArrayList()); [EOL]     assertEquals("Extension function on root collection", "0", String.valueOf(context.getValue("size(/)"))); [EOL] }
public void testCollectionMethodCall() { [EOL]     List list = new ArrayList(); [EOL]     list.add("foo"); [EOL]     context.getVariables().declareVariable("myList", list); [EOL]     assertXPathValue(context, "size($myList)", new Integer(1)); [EOL]     assertXPathValue(context, "size(beans)", new Integer(2)); [EOL]     context.getValue("add($myList, 'hello')"); [EOL]     assertEquals("After adding an element", 2, list.size()); [EOL]     JXPathContext context = JXPathContext.newContext(new ArrayList()); [EOL]     assertEquals("Extension function on root collection", "0", String.valueOf(context.getValue("size(/)"))); [EOL] }
public void testCollectionMethodCall() { [EOL]     List list = new ArrayList(); [EOL]     list.add("foo"); [EOL]     context.getVariables().declareVariable("myList", list); [EOL]     assertXPathValue(context, "size($myList)", new Integer(1)); [EOL]     assertXPathValue(context, "size(beans)", new Integer(2)); [EOL]     context.getValue("add($myList, 'hello')"); [EOL]     assertEquals("After adding an element", 2, list.size()); [EOL]     JXPathContext context = JXPathContext.newContext(new ArrayList()); [EOL]     assertEquals("Extension function on root collection", "0", String.valueOf(context.getValue("size(/)"))); [EOL] }
public void testCollectionMethodCall() { [EOL]     List list = new ArrayList(); [EOL]     list.add("foo"); [EOL]     context.getVariables().declareVariable("myList", list); [EOL]     assertXPathValue(context, "size($myList)", new Integer(1)); [EOL]     assertXPathValue(context, "size(beans)", new Integer(2)); [EOL]     context.getValue("add($myList, 'hello')"); [EOL]     assertEquals("After adding an element", 2, list.size()); [EOL]     JXPathContext context = JXPathContext.newContext(new ArrayList()); [EOL]     assertEquals("Extension function on root collection", "0", String.valueOf(context.getValue("size(/)"))); [EOL] }
public void testCollectionMethodCall() { [EOL]     List list = new ArrayList(); [EOL]     list.add("foo"); [EOL]     context.getVariables().declareVariable("myList", list); [EOL]     assertXPathValue(context, "size($myList)", new Integer(1)); [EOL]     assertXPathValue(context, "size(beans)", new Integer(2)); [EOL]     context.getValue("add($myList, 'hello')"); [EOL]     assertEquals("After adding an element", 2, list.size()); [EOL]     JXPathContext context = JXPathContext.newContext(new ArrayList()); [EOL]     assertEquals("Extension function on root collection", "0", String.valueOf(context.getValue("size(/)"))); [EOL] }
public void testCollectionMethodCall() { [EOL]     List list = new ArrayList(); [EOL]     list.add("foo"); [EOL]     context.getVariables().declareVariable("myList", list); [EOL]     assertXPathValue(context, "size($myList)", new Integer(1)); [EOL]     assertXPathValue(context, "size(beans)", new Integer(2)); [EOL]     context.getValue("add($myList, 'hello')"); [EOL]     assertEquals("After adding an element", 2, list.size()); [EOL]     JXPathContext context = JXPathContext.newContext(new ArrayList()); [EOL]     assertEquals("Extension function on root collection", "0", String.valueOf(context.getValue("size(/)"))); [EOL] }
public void testCollectionMethodCall() { [EOL]     List list = new ArrayList(); [EOL]     list.add("foo"); [EOL]     context.getVariables().declareVariable("myList", list); [EOL]     assertXPathValue(context, "size($myList)", new Integer(1)); [EOL]     assertXPathValue(context, "size(beans)", new Integer(2)); [EOL]     context.getValue("add($myList, 'hello')"); [EOL]     assertEquals("After adding an element", 2, list.size()); [EOL]     JXPathContext context = JXPathContext.newContext(new ArrayList()); [EOL]     assertEquals("Extension function on root collection", "0", String.valueOf(context.getValue("size(/)"))); [EOL] }
public void testCoreOperationMod() { [EOL]     assertXPathExpression("2 mod 4", CoreOperationMod.class); [EOL]     assertXPathExpression("2|3 mod -3", CoreOperationMod.class, "2 | 3 mod -3"); [EOL] }
public void testDocumentOrder() { [EOL]     assertDocumentOrder(context, "vendor/location", "vendor/location/address/street", -1); [EOL]     assertDocumentOrder(context, "vendor/location[@id = '100']", "vendor/location[@id = '101']", -1); [EOL]     assertDocumentOrder(context, "vendor//price:amount", "vendor/location", 1); [EOL] }
public void testDocumentOrder() { [EOL]     assertDocumentOrder(context, "vendor/location", "vendor/location/address/street", -1); [EOL]     assertDocumentOrder(context, "vendor/location[@id = '100']", "vendor/location[@id = '101']", -1); [EOL]     assertDocumentOrder(context, "vendor//price:amount", "vendor/location", 1); [EOL] }
public void testDocumentOrder() { [EOL]     assertDocumentOrder(context, "vendor/location", "vendor/location/address/street", -1); [EOL]     assertDocumentOrder(context, "vendor/location[@id = '100']", "vendor/location[@id = '101']", -1); [EOL]     assertDocumentOrder(context, "vendor//price:amount", "vendor/location", 1); [EOL] }
public void testDocumentOrder() { [EOL]     assertDocumentOrder(context, "vendor/location", "vendor/location/address/street", -1); [EOL]     assertDocumentOrder(context, "vendor/location[@id = '100']", "vendor/location[@id = '101']", -1); [EOL]     assertDocumentOrder(context, "vendor//price:amount", "vendor/location", 1); [EOL] }
public void testDocumentOrder() { [EOL]     assertDocumentOrder(context, "vendor/location", "vendor/location/address/street", -1); [EOL]     assertDocumentOrder(context, "vendor/location[@id = '100']", "vendor/location[@id = '101']", -1); [EOL]     assertDocumentOrder(context, "vendor//price:amount", "vendor/location", 1); [EOL] }
public void testDocumentOrder() { [EOL]     assertDocumentOrder(context, "vendor/location", "vendor/location/address/street", -1); [EOL]     assertDocumentOrder(context, "vendor/location[@id = '100']", "vendor/location[@id = '101']", -1); [EOL]     assertDocumentOrder(context, "vendor//price:amount", "vendor/location", 1); [EOL] }
public void testDocumentOrder() { [EOL]     assertDocumentOrder(context, "boolean", "int", -1); [EOL]     assertDocumentOrder(context, "integers[1]", "integers[2]", -1); [EOL]     assertDocumentOrder(context, "integers[1]", "integers[1]", 0); [EOL]     assertDocumentOrder(context, "nestedBean/int", "nestedBean", 1); [EOL]     assertDocumentOrder(context, "nestedBean/int", "nestedBean/strings", -1); [EOL]     assertDocumentOrder(context, "nestedBean/int", "object/int", -1); [EOL] }
public void testDocumentOrder() { [EOL]     assertDocumentOrder(context, "boolean", "int", -1); [EOL]     assertDocumentOrder(context, "integers[1]", "integers[2]", -1); [EOL]     assertDocumentOrder(context, "integers[1]", "integers[1]", 0); [EOL]     assertDocumentOrder(context, "nestedBean/int", "nestedBean", 1); [EOL]     assertDocumentOrder(context, "nestedBean/int", "nestedBean/strings", -1); [EOL]     assertDocumentOrder(context, "nestedBean/int", "object/int", -1); [EOL] }
public void testCoreOperationMultiply() { [EOL]     assertXPathExpression("2*4", CoreOperationMultiply.class, "2 * 4"); [EOL]     assertXPathExpression("2*(3 + 1)", CoreOperationMultiply.class, "2 * (3 + 1)"); [EOL] }
public void testCoreOperationMultiply() { [EOL]     assertXPathExpression("2*4", CoreOperationMultiply.class, "2 * 4"); [EOL]     assertXPathExpression("2*(3 + 1)", CoreOperationMultiply.class, "2 * (3 + 1)"); [EOL] }
public void testCoreOperationMultiply() { [EOL]     assertXPathExpression("2*4", CoreOperationMultiply.class, "2 * 4"); [EOL]     assertXPathExpression("2*(3 + 1)", CoreOperationMultiply.class, "2 * (3 + 1)"); [EOL] }
public void testCoreOperationMod() { [EOL]     assertXPathExpression("2 mod 4", CoreOperationMod.class); [EOL]     assertXPathExpression("2|3 mod -3", CoreOperationMod.class, "2 | 3 mod -3"); [EOL] }
public void testCoreOperationMod() { [EOL]     assertXPathExpression("2 mod 4", CoreOperationMod.class); [EOL]     assertXPathExpression("2|3 mod -3", CoreOperationMod.class, "2 | 3 mod -3"); [EOL] }
public void testDoStepNoPredicatesPropertyOwner() { [EOL]     assertValueAndPointer("/int", new Integer(1), "/int", "Bb", "BbB"); [EOL]     assertValueAndPointer("/./int", new Integer(1), "/int", "Bb", "BbB"); [EOL]     assertNullPointer("/foo", "/foo", "Bn"); [EOL]     assertValueAndPointer("/nestedBean/int", new Integer(1), "/nestedBean/int", "BbBb", "BbBbB"); [EOL]     assertValueAndPointer("/nestedBean/strings", bean.getNestedBean().getStrings(), "/nestedBean/strings", "BbBb", "BbBbC"); [EOL]     assertNullPointer("/nestedBean/foo", "/nestedBean/foo", "BbBn"); [EOL]     assertNullPointer("/map/foo", "/map[@name='foo']", "BbDd"); [EOL]     assertValueAndPointer("/list/int", new Integer(1), "/list[3]/int", "BbBb", "BbBbB"); [EOL]     assertNullPointer("/list/foo", "/list[1]/foo", "BbBn"); [EOL]     assertNullPointer("/nestedBean/foo/bar", "/nestedBean/foo/bar", "BbBnNn"); [EOL]     assertNullPointer("/list/int/bar", "/list[3]/int/bar", "BbBbBn"); [EOL]     assertNullPointer("/list/foo/bar", "/list[1]/foo/bar", "BbBnNn"); [EOL]     assertNullPointer("/map/foo/bar", "/map[@name='foo']/bar", "BbDdNn"); [EOL]     assertValueAndPointer("/map/Key1", "Value 1", "/map[@name='Key1']", "BbDd", "BbDdB"); [EOL]     assertValueAndPointer("/integers", bean.getIntegers(), "/integers", "Bb", "BbC"); [EOL] }
public void testDoStepNoPredicatesPropertyOwner() { [EOL]     assertValueAndPointer("/int", new Integer(1), "/int", "Bb", "BbB"); [EOL]     assertValueAndPointer("/./int", new Integer(1), "/int", "Bb", "BbB"); [EOL]     assertNullPointer("/foo", "/foo", "Bn"); [EOL]     assertValueAndPointer("/nestedBean/int", new Integer(1), "/nestedBean/int", "BbBb", "BbBbB"); [EOL]     assertValueAndPointer("/nestedBean/strings", bean.getNestedBean().getStrings(), "/nestedBean/strings", "BbBb", "BbBbC"); [EOL]     assertNullPointer("/nestedBean/foo", "/nestedBean/foo", "BbBn"); [EOL]     assertNullPointer("/map/foo", "/map[@name='foo']", "BbDd"); [EOL]     assertValueAndPointer("/list/int", new Integer(1), "/list[3]/int", "BbBb", "BbBbB"); [EOL]     assertNullPointer("/list/foo", "/list[1]/foo", "BbBn"); [EOL]     assertNullPointer("/nestedBean/foo/bar", "/nestedBean/foo/bar", "BbBnNn"); [EOL]     assertNullPointer("/list/int/bar", "/list[3]/int/bar", "BbBbBn"); [EOL]     assertNullPointer("/list/foo/bar", "/list[1]/foo/bar", "BbBnNn"); [EOL]     assertNullPointer("/map/foo/bar", "/map[@name='foo']/bar", "BbDdNn"); [EOL]     assertValueAndPointer("/map/Key1", "Value 1", "/map[@name='Key1']", "BbDd", "BbDdB"); [EOL]     assertValueAndPointer("/integers", bean.getIntegers(), "/integers", "Bb", "BbC"); [EOL] }
public void testDoStepNoPredicatesPropertyOwner() { [EOL]     assertValueAndPointer("/int", new Integer(1), "/int", "Bb", "BbB"); [EOL]     assertValueAndPointer("/./int", new Integer(1), "/int", "Bb", "BbB"); [EOL]     assertNullPointer("/foo", "/foo", "Bn"); [EOL]     assertValueAndPointer("/nestedBean/int", new Integer(1), "/nestedBean/int", "BbBb", "BbBbB"); [EOL]     assertValueAndPointer("/nestedBean/strings", bean.getNestedBean().getStrings(), "/nestedBean/strings", "BbBb", "BbBbC"); [EOL]     assertNullPointer("/nestedBean/foo", "/nestedBean/foo", "BbBn"); [EOL]     assertNullPointer("/map/foo", "/map[@name='foo']", "BbDd"); [EOL]     assertValueAndPointer("/list/int", new Integer(1), "/list[3]/int", "BbBb", "BbBbB"); [EOL]     assertNullPointer("/list/foo", "/list[1]/foo", "BbBn"); [EOL]     assertNullPointer("/nestedBean/foo/bar", "/nestedBean/foo/bar", "BbBnNn"); [EOL]     assertNullPointer("/list/int/bar", "/list[3]/int/bar", "BbBbBn"); [EOL]     assertNullPointer("/list/foo/bar", "/list[1]/foo/bar", "BbBnNn"); [EOL]     assertNullPointer("/map/foo/bar", "/map[@name='foo']/bar", "BbDdNn"); [EOL]     assertValueAndPointer("/map/Key1", "Value 1", "/map[@name='Key1']", "BbDd", "BbDdB"); [EOL]     assertValueAndPointer("/integers", bean.getIntegers(), "/integers", "Bb", "BbC"); [EOL] }
public void testDoStepNoPredicatesPropertyOwner() { [EOL]     assertValueAndPointer("/int", new Integer(1), "/int", "Bb", "BbB"); [EOL]     assertValueAndPointer("/./int", new Integer(1), "/int", "Bb", "BbB"); [EOL]     assertNullPointer("/foo", "/foo", "Bn"); [EOL]     assertValueAndPointer("/nestedBean/int", new Integer(1), "/nestedBean/int", "BbBb", "BbBbB"); [EOL]     assertValueAndPointer("/nestedBean/strings", bean.getNestedBean().getStrings(), "/nestedBean/strings", "BbBb", "BbBbC"); [EOL]     assertNullPointer("/nestedBean/foo", "/nestedBean/foo", "BbBn"); [EOL]     assertNullPointer("/map/foo", "/map[@name='foo']", "BbDd"); [EOL]     assertValueAndPointer("/list/int", new Integer(1), "/list[3]/int", "BbBb", "BbBbB"); [EOL]     assertNullPointer("/list/foo", "/list[1]/foo", "BbBn"); [EOL]     assertNullPointer("/nestedBean/foo/bar", "/nestedBean/foo/bar", "BbBnNn"); [EOL]     assertNullPointer("/list/int/bar", "/list[3]/int/bar", "BbBbBn"); [EOL]     assertNullPointer("/list/foo/bar", "/list[1]/foo/bar", "BbBnNn"); [EOL]     assertNullPointer("/map/foo/bar", "/map[@name='foo']/bar", "BbDdNn"); [EOL]     assertValueAndPointer("/map/Key1", "Value 1", "/map[@name='Key1']", "BbDd", "BbDdB"); [EOL]     assertValueAndPointer("/integers", bean.getIntegers(), "/integers", "Bb", "BbC"); [EOL] }
public void testNamespaceMapping() { [EOL]     context.registerNamespace("rate", "priceNS"); [EOL]     context.registerNamespace("goods", "productNS"); [EOL]     assertEquals("Context node namespace resolution", "priceNS", context.getNamespaceURI("price")); [EOL]     assertEquals("Registered namespace resolution", "priceNS", context.getNamespaceURI("rate")); [EOL]     assertXPathValue(context, "count(vendor/product/rate:*)", new Double(2)); [EOL]     assertXPathValueAndPointer(context, "//product:name", "Box of oranges", "/vendor[1]/product[1]/goods:name[1]"); [EOL]     JXPathContext childCtx = JXPathContext.newContext(context, context.getContextBean()); [EOL]     assertXPathValueAndPointer(childCtx, "//product:name", "Box of oranges", "/vendor[1]/product[1]/goods:name[1]"); [EOL]     JXPathContext relativeCtx = context.getRelativeContext(context.getPointer("/vendor")); [EOL]     assertXPathValueAndPointer(relativeCtx, "product/product:name", "Box of oranges", "/vendor[1]/product[1]/goods:name[1]"); [EOL] }
public void testNamespaceMapping() { [EOL]     context.registerNamespace("rate", "priceNS"); [EOL]     context.registerNamespace("goods", "productNS"); [EOL]     assertEquals("Context node namespace resolution", "priceNS", context.getNamespaceURI("price")); [EOL]     assertEquals("Registered namespace resolution", "priceNS", context.getNamespaceURI("rate")); [EOL]     assertXPathValue(context, "count(vendor/product/rate:*)", new Double(2)); [EOL]     assertXPathValueAndPointer(context, "//product:name", "Box of oranges", "/vendor[1]/product[1]/goods:name[1]"); [EOL]     JXPathContext childCtx = JXPathContext.newContext(context, context.getContextBean()); [EOL]     assertXPathValueAndPointer(childCtx, "//product:name", "Box of oranges", "/vendor[1]/product[1]/goods:name[1]"); [EOL]     JXPathContext relativeCtx = context.getRelativeContext(context.getPointer("/vendor")); [EOL]     assertXPathValueAndPointer(relativeCtx, "product/product:name", "Box of oranges", "/vendor[1]/product[1]/goods:name[1]"); [EOL] }
public void testNamespaceMapping() { [EOL]     context.registerNamespace("rate", "priceNS"); [EOL]     context.registerNamespace("goods", "productNS"); [EOL]     assertEquals("Context node namespace resolution", "priceNS", context.getNamespaceURI("price")); [EOL]     assertEquals("Registered namespace resolution", "priceNS", context.getNamespaceURI("rate")); [EOL]     assertXPathValue(context, "count(vendor/product/rate:*)", new Double(2)); [EOL]     assertXPathValueAndPointer(context, "//product:name", "Box of oranges", "/vendor[1]/product[1]/goods:name[1]"); [EOL]     JXPathContext childCtx = JXPathContext.newContext(context, context.getContextBean()); [EOL]     assertXPathValueAndPointer(childCtx, "//product:name", "Box of oranges", "/vendor[1]/product[1]/goods:name[1]"); [EOL]     JXPathContext relativeCtx = context.getRelativeContext(context.getPointer("/vendor")); [EOL]     assertXPathValueAndPointer(relativeCtx, "product/product:name", "Box of oranges", "/vendor[1]/product[1]/goods:name[1]"); [EOL] }
public void testNamespaceMapping() { [EOL]     context.registerNamespace("rate", "priceNS"); [EOL]     context.registerNamespace("goods", "productNS"); [EOL]     assertEquals("Context node namespace resolution", "priceNS", context.getNamespaceURI("price")); [EOL]     assertEquals("Registered namespace resolution", "priceNS", context.getNamespaceURI("rate")); [EOL]     assertXPathValue(context, "count(vendor/product/rate:*)", new Double(2)); [EOL]     assertXPathValueAndPointer(context, "//product:name", "Box of oranges", "/vendor[1]/product[1]/goods:name[1]"); [EOL]     JXPathContext childCtx = JXPathContext.newContext(context, context.getContextBean()); [EOL]     assertXPathValueAndPointer(childCtx, "//product:name", "Box of oranges", "/vendor[1]/product[1]/goods:name[1]"); [EOL]     JXPathContext relativeCtx = context.getRelativeContext(context.getPointer("/vendor")); [EOL]     assertXPathValueAndPointer(relativeCtx, "product/product:name", "Box of oranges", "/vendor[1]/product[1]/goods:name[1]"); [EOL] }
public void testNamespaceMapping() { [EOL]     context.registerNamespace("rate", "priceNS"); [EOL]     context.registerNamespace("goods", "productNS"); [EOL]     assertEquals("Context node namespace resolution", "priceNS", context.getNamespaceURI("price")); [EOL]     assertEquals("Registered namespace resolution", "priceNS", context.getNamespaceURI("rate")); [EOL]     assertXPathValue(context, "count(vendor/product/rate:*)", new Double(2)); [EOL]     assertXPathValueAndPointer(context, "//product:name", "Box of oranges", "/vendor[1]/product[1]/goods:name[1]"); [EOL]     JXPathContext childCtx = JXPathContext.newContext(context, context.getContextBean()); [EOL]     assertXPathValueAndPointer(childCtx, "//product:name", "Box of oranges", "/vendor[1]/product[1]/goods:name[1]"); [EOL]     JXPathContext relativeCtx = context.getRelativeContext(context.getPointer("/vendor")); [EOL]     assertXPathValueAndPointer(relativeCtx, "product/product:name", "Box of oranges", "/vendor[1]/product[1]/goods:name[1]"); [EOL] }
public void testNamespaceMapping() { [EOL]     context.registerNamespace("rate", "priceNS"); [EOL]     context.registerNamespace("goods", "productNS"); [EOL]     assertEquals("Context node namespace resolution", "priceNS", context.getNamespaceURI("price")); [EOL]     assertEquals("Registered namespace resolution", "priceNS", context.getNamespaceURI("rate")); [EOL]     assertXPathValue(context, "count(vendor/product/rate:*)", new Double(2)); [EOL]     assertXPathValueAndPointer(context, "//product:name", "Box of oranges", "/vendor[1]/product[1]/goods:name[1]"); [EOL]     JXPathContext childCtx = JXPathContext.newContext(context, context.getContextBean()); [EOL]     assertXPathValueAndPointer(childCtx, "//product:name", "Box of oranges", "/vendor[1]/product[1]/goods:name[1]"); [EOL]     JXPathContext relativeCtx = context.getRelativeContext(context.getPointer("/vendor")); [EOL]     assertXPathValueAndPointer(relativeCtx, "product/product:name", "Box of oranges", "/vendor[1]/product[1]/goods:name[1]"); [EOL] }
public void testNamespaceMapping() { [EOL]     context.registerNamespace("rate", "priceNS"); [EOL]     context.registerNamespace("goods", "productNS"); [EOL]     assertEquals("Context node namespace resolution", "priceNS", context.getNamespaceURI("price")); [EOL]     assertEquals("Registered namespace resolution", "priceNS", context.getNamespaceURI("rate")); [EOL]     assertXPathValue(context, "count(vendor/product/rate:*)", new Double(2)); [EOL]     assertXPathValueAndPointer(context, "//product:name", "Box of oranges", "/vendor[1]/product[1]/goods:name[1]"); [EOL]     JXPathContext childCtx = JXPathContext.newContext(context, context.getContextBean()); [EOL]     assertXPathValueAndPointer(childCtx, "//product:name", "Box of oranges", "/vendor[1]/product[1]/goods:name[1]"); [EOL]     JXPathContext relativeCtx = context.getRelativeContext(context.getPointer("/vendor")); [EOL]     assertXPathValueAndPointer(relativeCtx, "product/product:name", "Box of oranges", "/vendor[1]/product[1]/goods:name[1]"); [EOL] }
public void testNamespaceMapping() { [EOL]     context.registerNamespace("rate", "priceNS"); [EOL]     context.registerNamespace("goods", "productNS"); [EOL]     assertEquals("Context node namespace resolution", "priceNS", context.getNamespaceURI("price")); [EOL]     assertEquals("Registered namespace resolution", "priceNS", context.getNamespaceURI("rate")); [EOL]     assertXPathValue(context, "count(vendor/product/rate:*)", new Double(2)); [EOL]     assertXPathValueAndPointer(context, "//product:name", "Box of oranges", "/vendor[1]/product[1]/goods:name[1]"); [EOL]     JXPathContext childCtx = JXPathContext.newContext(context, context.getContextBean()); [EOL]     assertXPathValueAndPointer(childCtx, "//product:name", "Box of oranges", "/vendor[1]/product[1]/goods:name[1]"); [EOL]     JXPathContext relativeCtx = context.getRelativeContext(context.getPointer("/vendor")); [EOL]     assertXPathValueAndPointer(relativeCtx, "product/product:name", "Box of oranges", "/vendor[1]/product[1]/goods:name[1]"); [EOL] }
public void testIterateAndSet() { [EOL]     JXPathContext context = JXPathContext.newContext(createContextBean()); [EOL]     Iterator it = context.iteratePointers("beans/int"); [EOL]     int i = 5; [EOL]     while (it.hasNext()) { [EOL]         NodePointer pointer = (NodePointer) it.next(); [EOL]         pointer.setValue(new Integer(i++)); [EOL]     } [EOL]     it = context.iteratePointers("beans/int"); [EOL]     List actual = new ArrayList(); [EOL]     while (it.hasNext()) { [EOL]         actual.add(((Pointer) it.next()).getValue()); [EOL]     } [EOL]     assertEquals("Iterating <" + "beans/int" + ">", list(new Integer(5), new Integer(6)), actual); [EOL] }
public void testIterateAndSet() { [EOL]     JXPathContext context = JXPathContext.newContext(createContextBean()); [EOL]     Iterator it = context.iteratePointers("beans/int"); [EOL]     int i = 5; [EOL]     while (it.hasNext()) { [EOL]         NodePointer pointer = (NodePointer) it.next(); [EOL]         pointer.setValue(new Integer(i++)); [EOL]     } [EOL]     it = context.iteratePointers("beans/int"); [EOL]     List actual = new ArrayList(); [EOL]     while (it.hasNext()) { [EOL]         actual.add(((Pointer) it.next()).getValue()); [EOL]     } [EOL]     assertEquals("Iterating <" + "beans/int" + ">", list(new Integer(5), new Integer(6)), actual); [EOL] }
public void testNamespaceMapping() { [EOL]     context.registerNamespace("rate", "priceNS"); [EOL]     context.registerNamespace("goods", "productNS"); [EOL]     assertEquals("Context node namespace resolution", "priceNS", context.getNamespaceURI("price")); [EOL]     assertEquals("Registered namespace resolution", "priceNS", context.getNamespaceURI("rate")); [EOL]     assertXPathValue(context, "count(vendor/product/rate:*)", new Double(2)); [EOL]     assertXPathValueAndPointer(context, "//product:name", "Box of oranges", "/vendor[1]/product[1]/goods:name[1]"); [EOL]     JXPathContext childCtx = JXPathContext.newContext(context, context.getContextBean()); [EOL]     assertXPathValueAndPointer(childCtx, "//product:name", "Box of oranges", "/vendor[1]/product[1]/goods:name[1]"); [EOL]     JXPathContext relativeCtx = context.getRelativeContext(context.getPointer("/vendor")); [EOL]     assertXPathValueAndPointer(relativeCtx, "product/product:name", "Box of oranges", "/vendor[1]/product[1]/goods:name[1]"); [EOL] }
public void testNamespaceMapping() { [EOL]     context.registerNamespace("rate", "priceNS"); [EOL]     context.registerNamespace("goods", "productNS"); [EOL]     assertEquals("Context node namespace resolution", "priceNS", context.getNamespaceURI("price")); [EOL]     assertEquals("Registered namespace resolution", "priceNS", context.getNamespaceURI("rate")); [EOL]     assertXPathValue(context, "count(vendor/product/rate:*)", new Double(2)); [EOL]     assertXPathValueAndPointer(context, "//product:name", "Box of oranges", "/vendor[1]/product[1]/goods:name[1]"); [EOL]     JXPathContext childCtx = JXPathContext.newContext(context, context.getContextBean()); [EOL]     assertXPathValueAndPointer(childCtx, "//product:name", "Box of oranges", "/vendor[1]/product[1]/goods:name[1]"); [EOL]     JXPathContext relativeCtx = context.getRelativeContext(context.getPointer("/vendor")); [EOL]     assertXPathValueAndPointer(relativeCtx, "product/product:name", "Box of oranges", "/vendor[1]/product[1]/goods:name[1]"); [EOL] }
public void testNamespaceMapping() { [EOL]     context.registerNamespace("rate", "priceNS"); [EOL]     context.registerNamespace("goods", "productNS"); [EOL]     assertEquals("Context node namespace resolution", "priceNS", context.getNamespaceURI("price")); [EOL]     assertEquals("Registered namespace resolution", "priceNS", context.getNamespaceURI("rate")); [EOL]     assertXPathValue(context, "count(vendor/product/rate:*)", new Double(2)); [EOL]     assertXPathValueAndPointer(context, "//product:name", "Box of oranges", "/vendor[1]/product[1]/goods:name[1]"); [EOL]     JXPathContext childCtx = JXPathContext.newContext(context, context.getContextBean()); [EOL]     assertXPathValueAndPointer(childCtx, "//product:name", "Box of oranges", "/vendor[1]/product[1]/goods:name[1]"); [EOL]     JXPathContext relativeCtx = context.getRelativeContext(context.getPointer("/vendor")); [EOL]     assertXPathValueAndPointer(relativeCtx, "product/product:name", "Box of oranges", "/vendor[1]/product[1]/goods:name[1]"); [EOL] }
public void testIterateAndSet() { [EOL]     JXPathContext context = JXPathContext.newContext(createContextBean()); [EOL]     Iterator it = context.iteratePointers("beans/int"); [EOL]     int i = 5; [EOL]     while (it.hasNext()) { [EOL]         NodePointer pointer = (NodePointer) it.next(); [EOL]         pointer.setValue(new Integer(i++)); [EOL]     } [EOL]     it = context.iteratePointers("beans/int"); [EOL]     List actual = new ArrayList(); [EOL]     while (it.hasNext()) { [EOL]         actual.add(((Pointer) it.next()).getValue()); [EOL]     } [EOL]     assertEquals("Iterating <" + "beans/int" + ">", list(new Integer(5), new Integer(6)), actual); [EOL] }
public void testIterateAndSet() { [EOL]     JXPathContext context = JXPathContext.newContext(createContextBean()); [EOL]     Iterator it = context.iteratePointers("beans/int"); [EOL]     int i = 5; [EOL]     while (it.hasNext()) { [EOL]         NodePointer pointer = (NodePointer) it.next(); [EOL]         pointer.setValue(new Integer(i++)); [EOL]     } [EOL]     it = context.iteratePointers("beans/int"); [EOL]     List actual = new ArrayList(); [EOL]     while (it.hasNext()) { [EOL]         actual.add(((Pointer) it.next()).getValue()); [EOL]     } [EOL]     assertEquals("Iterating <" + "beans/int" + ">", list(new Integer(5), new Integer(6)), actual); [EOL] }
public void testCollectionMethodCall() { [EOL]     List list = new ArrayList(); [EOL]     list.add("foo"); [EOL]     context.getVariables().declareVariable("myList", list); [EOL]     assertXPathValue(context, "size($myList)", new Integer(1)); [EOL]     assertXPathValue(context, "size(beans)", new Integer(2)); [EOL]     context.getValue("add($myList, 'hello')"); [EOL]     assertEquals("After adding an element", 2, list.size()); [EOL]     JXPathContext context = JXPathContext.newContext(new ArrayList()); [EOL]     assertEquals("Extension function on root collection", "0", String.valueOf(context.getValue("size(/)"))); [EOL] }
public void testCollectionMethodCall() { [EOL]     List list = new ArrayList(); [EOL]     list.add("foo"); [EOL]     context.getVariables().declareVariable("myList", list); [EOL]     assertXPathValue(context, "size($myList)", new Integer(1)); [EOL]     assertXPathValue(context, "size(beans)", new Integer(2)); [EOL]     context.getValue("add($myList, 'hello')"); [EOL]     assertEquals("After adding an element", 2, list.size()); [EOL]     JXPathContext context = JXPathContext.newContext(new ArrayList()); [EOL]     assertEquals("Extension function on root collection", "0", String.valueOf(context.getValue("size(/)"))); [EOL] }
public void testCollectionMethodCall() { [EOL]     List list = new ArrayList(); [EOL]     list.add("foo"); [EOL]     context.getVariables().declareVariable("myList", list); [EOL]     assertXPathValue(context, "size($myList)", new Integer(1)); [EOL]     assertXPathValue(context, "size(beans)", new Integer(2)); [EOL]     context.getValue("add($myList, 'hello')"); [EOL]     assertEquals("After adding an element", 2, list.size()); [EOL]     JXPathContext context = JXPathContext.newContext(new ArrayList()); [EOL]     assertEquals("Extension function on root collection", "0", String.valueOf(context.getValue("size(/)"))); [EOL] }
public void testIterateAndSet() { [EOL]     JXPathContext context = JXPathContext.newContext(createContextBean()); [EOL]     Iterator it = context.iteratePointers("beans/int"); [EOL]     int i = 5; [EOL]     while (it.hasNext()) { [EOL]         NodePointer pointer = (NodePointer) it.next(); [EOL]         pointer.setValue(new Integer(i++)); [EOL]     } [EOL]     it = context.iteratePointers("beans/int"); [EOL]     List actual = new ArrayList(); [EOL]     while (it.hasNext()) { [EOL]         actual.add(((Pointer) it.next()).getValue()); [EOL]     } [EOL]     assertEquals("Iterating <" + "beans/int" + ">", list(new Integer(5), new Integer(6)), actual); [EOL] }
public void testIterateAndSet() { [EOL]     JXPathContext context = JXPathContext.newContext(createContextBean()); [EOL]     Iterator it = context.iteratePointers("beans/int"); [EOL]     int i = 5; [EOL]     while (it.hasNext()) { [EOL]         NodePointer pointer = (NodePointer) it.next(); [EOL]         pointer.setValue(new Integer(i++)); [EOL]     } [EOL]     it = context.iteratePointers("beans/int"); [EOL]     List actual = new ArrayList(); [EOL]     while (it.hasNext()) { [EOL]         actual.add(((Pointer) it.next()).getValue()); [EOL]     } [EOL]     assertEquals("Iterating <" + "beans/int" + ">", list(new Integer(5), new Integer(6)), actual); [EOL] }
public void testIterateAndSet() { [EOL]     JXPathContext context = JXPathContext.newContext(createContextBean()); [EOL]     Iterator it = context.iteratePointers("beans/int"); [EOL]     int i = 5; [EOL]     while (it.hasNext()) { [EOL]         NodePointer pointer = (NodePointer) it.next(); [EOL]         pointer.setValue(new Integer(i++)); [EOL]     } [EOL]     it = context.iteratePointers("beans/int"); [EOL]     List actual = new ArrayList(); [EOL]     while (it.hasNext()) { [EOL]         actual.add(((Pointer) it.next()).getValue()); [EOL]     } [EOL]     assertEquals("Iterating <" + "beans/int" + ">", list(new Integer(5), new Integer(6)), actual); [EOL] }
public void testFormatNumberFunction() { [EOL]     DecimalFormatSymbols symbols = new DecimalFormatSymbols(); [EOL]     symbols.setDigit('D'); [EOL]     context.setDecimalFormatSymbols("test", symbols); [EOL]     assertXPathValue(context, "format-number(123456789, '#.000000000')", "123456789.000000000"); [EOL]     assertXPathValue(context, "format-number(123456789, '#.0')", "123456789.0"); [EOL]     assertXPathValue(context, "format-number(0.123456789, '##%')", "12%"); [EOL]     assertXPathValue(context, "format-number(123456789, '################')", "123456789"); [EOL]     assertXPathValue(context, "format-number(123456789, 'D.0', 'test')", "123456789.0"); [EOL]     assertXPathValue(context, "format-number(123456789, '$DDD,DDD,DDD.DD', 'test')", "$123,456,789"); [EOL] }
public void testFormatNumberFunction() { [EOL]     DecimalFormatSymbols symbols = new DecimalFormatSymbols(); [EOL]     symbols.setDigit('D'); [EOL]     context.setDecimalFormatSymbols("test", symbols); [EOL]     assertXPathValue(context, "format-number(123456789, '#.000000000')", "123456789.000000000"); [EOL]     assertXPathValue(context, "format-number(123456789, '#.0')", "123456789.0"); [EOL]     assertXPathValue(context, "format-number(0.123456789, '##%')", "12%"); [EOL]     assertXPathValue(context, "format-number(123456789, '################')", "123456789"); [EOL]     assertXPathValue(context, "format-number(123456789, 'D.0', 'test')", "123456789.0"); [EOL]     assertXPathValue(context, "format-number(123456789, '$DDD,DDD,DDD.DD', 'test')", "$123,456,789"); [EOL] }
public void testFormatNumberFunction() { [EOL]     DecimalFormatSymbols symbols = new DecimalFormatSymbols(); [EOL]     symbols.setDigit('D'); [EOL]     context.setDecimalFormatSymbols("test", symbols); [EOL]     assertXPathValue(context, "format-number(123456789, '#.000000000')", "123456789.000000000"); [EOL]     assertXPathValue(context, "format-number(123456789, '#.0')", "123456789.0"); [EOL]     assertXPathValue(context, "format-number(0.123456789, '##%')", "12%"); [EOL]     assertXPathValue(context, "format-number(123456789, '################')", "123456789"); [EOL]     assertXPathValue(context, "format-number(123456789, 'D.0', 'test')", "123456789.0"); [EOL]     assertXPathValue(context, "format-number(123456789, '$DDD,DDD,DDD.DD', 'test')", "$123,456,789"); [EOL] }
public void testFormatNumberFunction() { [EOL]     DecimalFormatSymbols symbols = new DecimalFormatSymbols(); [EOL]     symbols.setDigit('D'); [EOL]     context.setDecimalFormatSymbols("test", symbols); [EOL]     assertXPathValue(context, "format-number(123456789, '#.000000000')", "123456789.000000000"); [EOL]     assertXPathValue(context, "format-number(123456789, '#.0')", "123456789.0"); [EOL]     assertXPathValue(context, "format-number(0.123456789, '##%')", "12%"); [EOL]     assertXPathValue(context, "format-number(123456789, '################')", "123456789"); [EOL]     assertXPathValue(context, "format-number(123456789, 'D.0', 'test')", "123456789.0"); [EOL]     assertXPathValue(context, "format-number(123456789, '$DDD,DDD,DDD.DD', 'test')", "$123,456,789"); [EOL] }
public void testFormatNumberFunction() { [EOL]     DecimalFormatSymbols symbols = new DecimalFormatSymbols(); [EOL]     symbols.setDigit('D'); [EOL]     context.setDecimalFormatSymbols("test", symbols); [EOL]     assertXPathValue(context, "format-number(123456789, '#.000000000')", "123456789.000000000"); [EOL]     assertXPathValue(context, "format-number(123456789, '#.0')", "123456789.0"); [EOL]     assertXPathValue(context, "format-number(0.123456789, '##%')", "12%"); [EOL]     assertXPathValue(context, "format-number(123456789, '################')", "123456789"); [EOL]     assertXPathValue(context, "format-number(123456789, 'D.0', 'test')", "123456789.0"); [EOL]     assertXPathValue(context, "format-number(123456789, '$DDD,DDD,DDD.DD', 'test')", "$123,456,789"); [EOL] }
public void testCollectionMethodCall() { [EOL]     List list = new ArrayList(); [EOL]     list.add("foo"); [EOL]     context.getVariables().declareVariable("myList", list); [EOL]     assertXPathValue(context, "size($myList)", new Integer(1)); [EOL]     assertXPathValue(context, "size(beans)", new Integer(2)); [EOL]     context.getValue("add($myList, 'hello')"); [EOL]     assertEquals("After adding an element", 2, list.size()); [EOL]     JXPathContext context = JXPathContext.newContext(new ArrayList()); [EOL]     assertEquals("Extension function on root collection", "0", String.valueOf(context.getValue("size(/)"))); [EOL] }
public void testIterateAndSet() { [EOL]     JXPathContext context = JXPathContext.newContext(createContextBean()); [EOL]     Iterator it = context.iteratePointers("beans/int"); [EOL]     int i = 5; [EOL]     while (it.hasNext()) { [EOL]         NodePointer pointer = (NodePointer) it.next(); [EOL]         pointer.setValue(new Integer(i++)); [EOL]     } [EOL]     it = context.iteratePointers("beans/int"); [EOL]     List actual = new ArrayList(); [EOL]     while (it.hasNext()) { [EOL]         actual.add(((Pointer) it.next()).getValue()); [EOL]     } [EOL]     assertEquals("Iterating <" + "beans/int" + ">", list(new Integer(5), new Integer(6)), actual); [EOL] }
public void testIterateAndSet() { [EOL]     JXPathContext context = JXPathContext.newContext(createContextBean()); [EOL]     Iterator it = context.iteratePointers("beans/int"); [EOL]     int i = 5; [EOL]     while (it.hasNext()) { [EOL]         NodePointer pointer = (NodePointer) it.next(); [EOL]         pointer.setValue(new Integer(i++)); [EOL]     } [EOL]     it = context.iteratePointers("beans/int"); [EOL]     List actual = new ArrayList(); [EOL]     while (it.hasNext()) { [EOL]         actual.add(((Pointer) it.next()).getValue()); [EOL]     } [EOL]     assertEquals("Iterating <" + "beans/int" + ">", list(new Integer(5), new Integer(6)), actual); [EOL] }
public void testIterateAndSet() { [EOL]     JXPathContext context = JXPathContext.newContext(createContextBean()); [EOL]     Iterator it = context.iteratePointers("beans/int"); [EOL]     int i = 5; [EOL]     while (it.hasNext()) { [EOL]         NodePointer pointer = (NodePointer) it.next(); [EOL]         pointer.setValue(new Integer(i++)); [EOL]     } [EOL]     it = context.iteratePointers("beans/int"); [EOL]     List actual = new ArrayList(); [EOL]     while (it.hasNext()) { [EOL]         actual.add(((Pointer) it.next()).getValue()); [EOL]     } [EOL]     assertEquals("Iterating <" + "beans/int" + ">", list(new Integer(5), new Integer(6)), actual); [EOL] }
public void testIterateAndSet() { [EOL]     JXPathContext context = JXPathContext.newContext(createContextBean()); [EOL]     Iterator it = context.iteratePointers("beans/int"); [EOL]     int i = 5; [EOL]     while (it.hasNext()) { [EOL]         NodePointer pointer = (NodePointer) it.next(); [EOL]         pointer.setValue(new Integer(i++)); [EOL]     } [EOL]     it = context.iteratePointers("beans/int"); [EOL]     List actual = new ArrayList(); [EOL]     while (it.hasNext()) { [EOL]         actual.add(((Pointer) it.next()).getValue()); [EOL]     } [EOL]     assertEquals("Iterating <" + "beans/int" + ">", list(new Integer(5), new Integer(6)), actual); [EOL] }
public void testDoStepNoPredicatesPropertyOwner() { [EOL]     assertValueAndPointer("/int", new Integer(1), "/int", "Bb", "BbB"); [EOL]     assertValueAndPointer("/./int", new Integer(1), "/int", "Bb", "BbB"); [EOL]     assertNullPointer("/foo", "/foo", "Bn"); [EOL]     assertValueAndPointer("/nestedBean/int", new Integer(1), "/nestedBean/int", "BbBb", "BbBbB"); [EOL]     assertValueAndPointer("/nestedBean/strings", bean.getNestedBean().getStrings(), "/nestedBean/strings", "BbBb", "BbBbC"); [EOL]     assertNullPointer("/nestedBean/foo", "/nestedBean/foo", "BbBn"); [EOL]     assertNullPointer("/map/foo", "/map[@name='foo']", "BbDd"); [EOL]     assertValueAndPointer("/list/int", new Integer(1), "/list[3]/int", "BbBb", "BbBbB"); [EOL]     assertNullPointer("/list/foo", "/list[1]/foo", "BbBn"); [EOL]     assertNullPointer("/nestedBean/foo/bar", "/nestedBean/foo/bar", "BbBnNn"); [EOL]     assertNullPointer("/list/int/bar", "/list[3]/int/bar", "BbBbBn"); [EOL]     assertNullPointer("/list/foo/bar", "/list[1]/foo/bar", "BbBnNn"); [EOL]     assertNullPointer("/map/foo/bar", "/map[@name='foo']/bar", "BbDdNn"); [EOL]     assertValueAndPointer("/map/Key1", "Value 1", "/map[@name='Key1']", "BbDd", "BbDdB"); [EOL]     assertValueAndPointer("/integers", bean.getIntegers(), "/integers", "Bb", "BbC"); [EOL] }
public void testSetNewKey() { [EOL]     assertXPathSetValue(context, "map/Key4", new Integer(7)); [EOL]     assertXPathPointerLenient(context, "//map/Key5", "/map/Key5"); [EOL]     assertXPathSetValue(context, "//map/Key5", new Integer(8)); [EOL] }
public void testSetNewKey() { [EOL]     assertXPathSetValue(context, "map/Key4", new Integer(7)); [EOL]     assertXPathPointerLenient(context, "//map/Key5", "/map/Key5"); [EOL]     assertXPathSetValue(context, "//map/Key5", new Integer(8)); [EOL] }
public void testSetNewKey() { [EOL]     assertXPathSetValue(context, "map/Key4", new Integer(7)); [EOL]     assertXPathPointerLenient(context, "//map/Key5", "/map/Key5"); [EOL]     assertXPathSetValue(context, "//map/Key5", new Integer(8)); [EOL] }
public void testSetNewKey() { [EOL]     assertXPathSetValue(context, "map/Key4", new Integer(7)); [EOL]     assertXPathPointerLenient(context, "//map/Key5", "/map/Key5"); [EOL]     assertXPathSetValue(context, "//map/Key5", new Integer(8)); [EOL] }
public void testSetNewKey() { [EOL]     assertXPathSetValue(context, "map/Key4", new Integer(7)); [EOL]     assertXPathPointerLenient(context, "//map/Key5", "/map/Key5"); [EOL]     assertXPathSetValue(context, "//map/Key5", new Integer(8)); [EOL] }
public void testRemovePathCollectionElement() { [EOL]     context.getVariables().declareVariable("temp", list("temp1", "temp2")); [EOL]     context.removePath("$temp[1]"); [EOL]     assertEquals("Remove collection element", "temp2", context.getValue("$temp[1]")); [EOL] }
public void testRemovePathCollectionElement() { [EOL]     context.getVariables().declareVariable("temp", list("temp1", "temp2")); [EOL]     context.removePath("$temp[1]"); [EOL]     assertEquals("Remove collection element", "temp2", context.getValue("$temp[1]")); [EOL] }
public void testRemovePathCollectionElement() { [EOL]     context.getVariables().declareVariable("temp", list("temp1", "temp2")); [EOL]     context.removePath("$temp[1]"); [EOL]     assertEquals("Remove collection element", "temp2", context.getValue("$temp[1]")); [EOL] }
public void testRemovePathCollectionElement() { [EOL]     context.getVariables().declareVariable("temp", list("temp1", "temp2")); [EOL]     context.removePath("$temp[1]"); [EOL]     assertEquals("Remove collection element", "temp2", context.getValue("$temp[1]")); [EOL] }
public void testRemovePathCollectionElement() { [EOL]     context.getVariables().declareVariable("temp", list("temp1", "temp2")); [EOL]     context.removePath("$temp[1]"); [EOL]     assertEquals("Remove collection element", "temp2", context.getValue("$temp[1]")); [EOL] }
public void testAxisDescendant() { [EOL]     assertXPathValue(context, "//street", "Orchard Road"); [EOL]     assertXPathValue(context, "count(//price:*)", new Double(2)); [EOL]     assertXPathValueIterator(context, "vendor//saleEnds", list("never")); [EOL]     assertXPathValueIterator(context, "vendor//promotion", list("")); [EOL]     assertXPathValueIterator(context, "vendor//saleEnds[../@stores = 'all']", list("never")); [EOL]     assertXPathValueIterator(context, "vendor//promotion[../@stores = 'all']", list("")); [EOL] }
public void testAxisDescendant() { [EOL]     assertXPathValue(context, "//street", "Orchard Road"); [EOL]     assertXPathValue(context, "count(//price:*)", new Double(2)); [EOL]     assertXPathValueIterator(context, "vendor//saleEnds", list("never")); [EOL]     assertXPathValueIterator(context, "vendor//promotion", list("")); [EOL]     assertXPathValueIterator(context, "vendor//saleEnds[../@stores = 'all']", list("never")); [EOL]     assertXPathValueIterator(context, "vendor//promotion[../@stores = 'all']", list("")); [EOL] }
public void testAxisDescendant() { [EOL]     assertXPathValue(context, "//street", "Orchard Road"); [EOL]     assertXPathValue(context, "count(//price:*)", new Double(2)); [EOL]     assertXPathValueIterator(context, "vendor//saleEnds", list("never")); [EOL]     assertXPathValueIterator(context, "vendor//promotion", list("")); [EOL]     assertXPathValueIterator(context, "vendor//saleEnds[../@stores = 'all']", list("never")); [EOL]     assertXPathValueIterator(context, "vendor//promotion[../@stores = 'all']", list("")); [EOL] }
public void testAxisDescendant() { [EOL]     assertXPathValue(context, "//street", "Orchard Road"); [EOL]     assertXPathValue(context, "count(//price:*)", new Double(2)); [EOL]     assertXPathValueIterator(context, "vendor//saleEnds", list("never")); [EOL]     assertXPathValueIterator(context, "vendor//promotion", list("")); [EOL]     assertXPathValueIterator(context, "vendor//saleEnds[../@stores = 'all']", list("never")); [EOL]     assertXPathValueIterator(context, "vendor//promotion[../@stores = 'all']", list("")); [EOL] }
public void testAxisAttribute() { [EOL]     assertXPathValue(context, "vendor/location/@id", "100"); [EOL]     assertXPathPointer(context, "vendor/location/@id", "/vendor[1]/location[1]/@id"); [EOL]     assertXPathValueIterator(context, "vendor/location/@id", list("100", "101")); [EOL]     assertXPathValue(context, "vendor/product/price:amount/@price:discount", "10%"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount/@price:discount)", "priceNS"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount/@price:discount)", "discount"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount/@price:discount)", "price:discount"); [EOL]     assertXPathValue(context, "vendor/product/price:amount/@discount", "20%"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount/@discount)", ""); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount/@discount)", "discount"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount/@discount)", "discount"); [EOL]     assertXPathValueIterator(context, "vendor/product/price:amount/@price:*", list("10%")); [EOL]     assertXPathValueIterator(context, "vendor/location[1]/@*", set("100", "", "local")); [EOL]     assertXPathValueIterator(context, "vendor/product/price:amount/@*", list("20%")); [EOL]     assertXPathValue(context, "vendor/location/@manager", ""); [EOL]     assertXPathValueLenient(context, "vendor/location/@missing", null); [EOL]     assertXPathValueLenient(context, "vendor/location/@miss:missing", null); [EOL]     assertXPathValue(context, "vendor/location[@id='101']//street", "Tangerine Drive"); [EOL]     assertXPathValueIterator(context, "/vendor/location[1]/@*[name()!= 'manager']", list("100", "local")); [EOL] }
public void testAxisAttribute() { [EOL]     assertXPathValue(context, "vendor/location/@id", "100"); [EOL]     assertXPathPointer(context, "vendor/location/@id", "/vendor[1]/location[1]/@id"); [EOL]     assertXPathValueIterator(context, "vendor/location/@id", list("100", "101")); [EOL]     assertXPathValue(context, "vendor/product/price:amount/@price:discount", "10%"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount/@price:discount)", "priceNS"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount/@price:discount)", "discount"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount/@price:discount)", "price:discount"); [EOL]     assertXPathValue(context, "vendor/product/price:amount/@discount", "20%"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount/@discount)", ""); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount/@discount)", "discount"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount/@discount)", "discount"); [EOL]     assertXPathValueIterator(context, "vendor/product/price:amount/@price:*", list("10%")); [EOL]     assertXPathValueIterator(context, "vendor/location[1]/@*", set("100", "", "local")); [EOL]     assertXPathValueIterator(context, "vendor/product/price:amount/@*", list("20%")); [EOL]     assertXPathValue(context, "vendor/location/@manager", ""); [EOL]     assertXPathValueLenient(context, "vendor/location/@missing", null); [EOL]     assertXPathValueLenient(context, "vendor/location/@miss:missing", null); [EOL]     assertXPathValue(context, "vendor/location[@id='101']//street", "Tangerine Drive"); [EOL]     assertXPathValueIterator(context, "/vendor/location[1]/@*[name()!= 'manager']", list("100", "local")); [EOL] }
public void testAxisAttribute() { [EOL]     assertXPathValue(context, "vendor/location/@id", "100"); [EOL]     assertXPathPointer(context, "vendor/location/@id", "/vendor[1]/location[1]/@id"); [EOL]     assertXPathValueIterator(context, "vendor/location/@id", list("100", "101")); [EOL]     assertXPathValue(context, "vendor/product/price:amount/@price:discount", "10%"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount/@price:discount)", "priceNS"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount/@price:discount)", "discount"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount/@price:discount)", "price:discount"); [EOL]     assertXPathValue(context, "vendor/product/price:amount/@discount", "20%"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount/@discount)", ""); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount/@discount)", "discount"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount/@discount)", "discount"); [EOL]     assertXPathValueIterator(context, "vendor/product/price:amount/@price:*", list("10%")); [EOL]     assertXPathValueIterator(context, "vendor/location[1]/@*", set("100", "", "local")); [EOL]     assertXPathValueIterator(context, "vendor/product/price:amount/@*", list("20%")); [EOL]     assertXPathValue(context, "vendor/location/@manager", ""); [EOL]     assertXPathValueLenient(context, "vendor/location/@missing", null); [EOL]     assertXPathValueLenient(context, "vendor/location/@miss:missing", null); [EOL]     assertXPathValue(context, "vendor/location[@id='101']//street", "Tangerine Drive"); [EOL]     assertXPathValueIterator(context, "/vendor/location[1]/@*[name()!= 'manager']", list("100", "local")); [EOL] }
public void testAxisAttribute() { [EOL]     assertXPathValue(context, "vendor/location/@id", "100"); [EOL]     assertXPathPointer(context, "vendor/location/@id", "/vendor[1]/location[1]/@id"); [EOL]     assertXPathValueIterator(context, "vendor/location/@id", list("100", "101")); [EOL]     assertXPathValue(context, "vendor/product/price:amount/@price:discount", "10%"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount/@price:discount)", "priceNS"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount/@price:discount)", "discount"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount/@price:discount)", "price:discount"); [EOL]     assertXPathValue(context, "vendor/product/price:amount/@discount", "20%"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount/@discount)", ""); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount/@discount)", "discount"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount/@discount)", "discount"); [EOL]     assertXPathValueIterator(context, "vendor/product/price:amount/@price:*", list("10%")); [EOL]     assertXPathValueIterator(context, "vendor/location[1]/@*", set("100", "", "local")); [EOL]     assertXPathValueIterator(context, "vendor/product/price:amount/@*", list("20%")); [EOL]     assertXPathValue(context, "vendor/location/@manager", ""); [EOL]     assertXPathValueLenient(context, "vendor/location/@missing", null); [EOL]     assertXPathValueLenient(context, "vendor/location/@miss:missing", null); [EOL]     assertXPathValue(context, "vendor/location[@id='101']//street", "Tangerine Drive"); [EOL]     assertXPathValueIterator(context, "/vendor/location[1]/@*[name()!= 'manager']", list("100", "local")); [EOL] }
public void testAxisAttribute() { [EOL]     assertXPathValue(context, "vendor/location/@id", "100"); [EOL]     assertXPathPointer(context, "vendor/location/@id", "/vendor[1]/location[1]/@id"); [EOL]     assertXPathValueIterator(context, "vendor/location/@id", list("100", "101")); [EOL]     assertXPathValue(context, "vendor/product/price:amount/@price:discount", "10%"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount/@price:discount)", "priceNS"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount/@price:discount)", "discount"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount/@price:discount)", "price:discount"); [EOL]     assertXPathValue(context, "vendor/product/price:amount/@discount", "20%"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount/@discount)", ""); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount/@discount)", "discount"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount/@discount)", "discount"); [EOL]     assertXPathValueIterator(context, "vendor/product/price:amount/@price:*", list("10%")); [EOL]     assertXPathValueIterator(context, "vendor/location[1]/@*", set("100", "", "local")); [EOL]     assertXPathValueIterator(context, "vendor/product/price:amount/@*", list("20%")); [EOL]     assertXPathValue(context, "vendor/location/@manager", ""); [EOL]     assertXPathValueLenient(context, "vendor/location/@missing", null); [EOL]     assertXPathValueLenient(context, "vendor/location/@miss:missing", null); [EOL]     assertXPathValue(context, "vendor/location[@id='101']//street", "Tangerine Drive"); [EOL]     assertXPathValueIterator(context, "/vendor/location[1]/@*[name()!= 'manager']", list("100", "local")); [EOL] }
public void testAxisAttribute() { [EOL]     assertXPathValue(context, "vendor/location/@id", "100"); [EOL]     assertXPathPointer(context, "vendor/location/@id", "/vendor[1]/location[1]/@id"); [EOL]     assertXPathValueIterator(context, "vendor/location/@id", list("100", "101")); [EOL]     assertXPathValue(context, "vendor/product/price:amount/@price:discount", "10%"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount/@price:discount)", "priceNS"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount/@price:discount)", "discount"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount/@price:discount)", "price:discount"); [EOL]     assertXPathValue(context, "vendor/product/price:amount/@discount", "20%"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount/@discount)", ""); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount/@discount)", "discount"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount/@discount)", "discount"); [EOL]     assertXPathValueIterator(context, "vendor/product/price:amount/@price:*", list("10%")); [EOL]     assertXPathValueIterator(context, "vendor/location[1]/@*", set("100", "", "local")); [EOL]     assertXPathValueIterator(context, "vendor/product/price:amount/@*", list("20%")); [EOL]     assertXPathValue(context, "vendor/location/@manager", ""); [EOL]     assertXPathValueLenient(context, "vendor/location/@missing", null); [EOL]     assertXPathValueLenient(context, "vendor/location/@miss:missing", null); [EOL]     assertXPathValue(context, "vendor/location[@id='101']//street", "Tangerine Drive"); [EOL]     assertXPathValueIterator(context, "/vendor/location[1]/@*[name()!= 'manager']", list("100", "local")); [EOL] }
public void testAxisAttribute() { [EOL]     assertXPathValue(context, "vendor/location/@id", "100"); [EOL]     assertXPathPointer(context, "vendor/location/@id", "/vendor[1]/location[1]/@id"); [EOL]     assertXPathValueIterator(context, "vendor/location/@id", list("100", "101")); [EOL]     assertXPathValue(context, "vendor/product/price:amount/@price:discount", "10%"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount/@price:discount)", "priceNS"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount/@price:discount)", "discount"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount/@price:discount)", "price:discount"); [EOL]     assertXPathValue(context, "vendor/product/price:amount/@discount", "20%"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount/@discount)", ""); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount/@discount)", "discount"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount/@discount)", "discount"); [EOL]     assertXPathValueIterator(context, "vendor/product/price:amount/@price:*", list("10%")); [EOL]     assertXPathValueIterator(context, "vendor/location[1]/@*", set("100", "", "local")); [EOL]     assertXPathValueIterator(context, "vendor/product/price:amount/@*", list("20%")); [EOL]     assertXPathValue(context, "vendor/location/@manager", ""); [EOL]     assertXPathValueLenient(context, "vendor/location/@missing", null); [EOL]     assertXPathValueLenient(context, "vendor/location/@miss:missing", null); [EOL]     assertXPathValue(context, "vendor/location[@id='101']//street", "Tangerine Drive"); [EOL]     assertXPathValueIterator(context, "/vendor/location[1]/@*[name()!= 'manager']", list("100", "local")); [EOL] }
public void testAxisAttribute() { [EOL]     assertXPathValue(context, "vendor/location/@id", "100"); [EOL]     assertXPathPointer(context, "vendor/location/@id", "/vendor[1]/location[1]/@id"); [EOL]     assertXPathValueIterator(context, "vendor/location/@id", list("100", "101")); [EOL]     assertXPathValue(context, "vendor/product/price:amount/@price:discount", "10%"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount/@price:discount)", "priceNS"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount/@price:discount)", "discount"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount/@price:discount)", "price:discount"); [EOL]     assertXPathValue(context, "vendor/product/price:amount/@discount", "20%"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount/@discount)", ""); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount/@discount)", "discount"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount/@discount)", "discount"); [EOL]     assertXPathValueIterator(context, "vendor/product/price:amount/@price:*", list("10%")); [EOL]     assertXPathValueIterator(context, "vendor/location[1]/@*", set("100", "", "local")); [EOL]     assertXPathValueIterator(context, "vendor/product/price:amount/@*", list("20%")); [EOL]     assertXPathValue(context, "vendor/location/@manager", ""); [EOL]     assertXPathValueLenient(context, "vendor/location/@missing", null); [EOL]     assertXPathValueLenient(context, "vendor/location/@miss:missing", null); [EOL]     assertXPathValue(context, "vendor/location[@id='101']//street", "Tangerine Drive"); [EOL]     assertXPathValueIterator(context, "/vendor/location[1]/@*[name()!= 'manager']", list("100", "local")); [EOL] }
public void testRemovePathCollectionElement() { [EOL]     context.getVariables().declareVariable("temp", list("temp1", "temp2")); [EOL]     context.removePath("$temp[1]"); [EOL]     assertEquals("Remove collection element", "temp2", context.getValue("$temp[1]")); [EOL] }
public void testRemovePathCollectionElement() { [EOL]     context.getVariables().declareVariable("temp", list("temp1", "temp2")); [EOL]     context.removePath("$temp[1]"); [EOL]     assertEquals("Remove collection element", "temp2", context.getValue("$temp[1]")); [EOL] }
public void testRemovePathCollectionElement() { [EOL]     context.getVariables().declareVariable("temp", list("temp1", "temp2")); [EOL]     context.removePath("$temp[1]"); [EOL]     assertEquals("Remove collection element", "temp2", context.getValue("$temp[1]")); [EOL] }
public void testRemovePathCollectionElement() { [EOL]     context.getVariables().declareVariable("temp", list("temp1", "temp2")); [EOL]     context.removePath("$temp[1]"); [EOL]     assertEquals("Remove collection element", "temp2", context.getValue("$temp[1]")); [EOL] }
public void testErrorProperty() { [EOL]     context.getVariables().declareVariable("e", new ExceptionPropertyTestBean()); [EOL]     boolean ex = false; [EOL]     try { [EOL]         assertXPathValue(context, "$e/errorString", null); [EOL]     } catch (Throwable t) { [EOL]         ex = true; [EOL]     } [EOL]     assertTrue("Legitimate exception accessing property", ex); [EOL]     assertXPathPointer(context, "$e/errorString", "$e/errorString"); [EOL]     assertXPathPointerLenient(context, "$e/errorStringArray[1]", "$e/errorStringArray[1]"); [EOL]     assertXPathPointerIterator(context, "$e/errorString", list("$e/errorString")); [EOL]     assertXPathPointerIterator(context, "$e//error", Collections.EMPTY_LIST); [EOL] }
public void testCollectionMethodCall() { [EOL]     List list = new ArrayList(); [EOL]     list.add("foo"); [EOL]     context.getVariables().declareVariable("myList", list); [EOL]     assertXPathValue(context, "size($myList)", new Integer(1)); [EOL]     assertXPathValue(context, "size(beans)", new Integer(2)); [EOL]     context.getValue("add($myList, 'hello')"); [EOL]     assertEquals("After adding an element", 2, list.size()); [EOL]     JXPathContext context = JXPathContext.newContext(new ArrayList()); [EOL]     assertEquals("Extension function on root collection", "0", String.valueOf(context.getValue("size(/)"))); [EOL] }
public void testCollectionMethodCall() { [EOL]     List list = new ArrayList(); [EOL]     list.add("foo"); [EOL]     context.getVariables().declareVariable("myList", list); [EOL]     assertXPathValue(context, "size($myList)", new Integer(1)); [EOL]     assertXPathValue(context, "size(beans)", new Integer(2)); [EOL]     context.getValue("add($myList, 'hello')"); [EOL]     assertEquals("After adding an element", 2, list.size()); [EOL]     JXPathContext context = JXPathContext.newContext(new ArrayList()); [EOL]     assertEquals("Extension function on root collection", "0", String.valueOf(context.getValue("size(/)"))); [EOL] }
public void testCollectionMethodCall() { [EOL]     List list = new ArrayList(); [EOL]     list.add("foo"); [EOL]     context.getVariables().declareVariable("myList", list); [EOL]     assertXPathValue(context, "size($myList)", new Integer(1)); [EOL]     assertXPathValue(context, "size(beans)", new Integer(2)); [EOL]     context.getValue("add($myList, 'hello')"); [EOL]     assertEquals("After adding an element", 2, list.size()); [EOL]     JXPathContext context = JXPathContext.newContext(new ArrayList()); [EOL]     assertEquals("Extension function on root collection", "0", String.valueOf(context.getValue("size(/)"))); [EOL] }
public void testCollectionMethodCall() { [EOL]     List list = new ArrayList(); [EOL]     list.add("foo"); [EOL]     context.getVariables().declareVariable("myList", list); [EOL]     assertXPathValue(context, "size($myList)", new Integer(1)); [EOL]     assertXPathValue(context, "size(beans)", new Integer(2)); [EOL]     context.getValue("add($myList, 'hello')"); [EOL]     assertEquals("After adding an element", 2, list.size()); [EOL]     JXPathContext context = JXPathContext.newContext(new ArrayList()); [EOL]     assertEquals("Extension function on root collection", "0", String.valueOf(context.getValue("size(/)"))); [EOL] }
public void testCollectionMethodCall() { [EOL]     List list = new ArrayList(); [EOL]     list.add("foo"); [EOL]     context.getVariables().declareVariable("myList", list); [EOL]     assertXPathValue(context, "size($myList)", new Integer(1)); [EOL]     assertXPathValue(context, "size(beans)", new Integer(2)); [EOL]     context.getValue("add($myList, 'hello')"); [EOL]     assertEquals("After adding an element", 2, list.size()); [EOL]     JXPathContext context = JXPathContext.newContext(new ArrayList()); [EOL]     assertEquals("Extension function on root collection", "0", String.valueOf(context.getValue("size(/)"))); [EOL] }
public void testCollectionMethodCall() { [EOL]     List list = new ArrayList(); [EOL]     list.add("foo"); [EOL]     context.getVariables().declareVariable("myList", list); [EOL]     assertXPathValue(context, "size($myList)", new Integer(1)); [EOL]     assertXPathValue(context, "size(beans)", new Integer(2)); [EOL]     context.getValue("add($myList, 'hello')"); [EOL]     assertEquals("After adding an element", 2, list.size()); [EOL]     JXPathContext context = JXPathContext.newContext(new ArrayList()); [EOL]     assertEquals("Extension function on root collection", "0", String.valueOf(context.getValue("size(/)"))); [EOL] }
public void testNamespaceMapping() { [EOL]     context.registerNamespace("rate", "priceNS"); [EOL]     context.registerNamespace("goods", "productNS"); [EOL]     assertEquals("Context node namespace resolution", "priceNS", context.getNamespaceURI("price")); [EOL]     assertEquals("Registered namespace resolution", "priceNS", context.getNamespaceURI("rate")); [EOL]     assertXPathValue(context, "count(vendor/product/rate:*)", new Double(2)); [EOL]     assertXPathValueAndPointer(context, "//product:name", "Box of oranges", "/vendor[1]/product[1]/goods:name[1]"); [EOL]     JXPathContext childCtx = JXPathContext.newContext(context, context.getContextBean()); [EOL]     assertXPathValueAndPointer(childCtx, "//product:name", "Box of oranges", "/vendor[1]/product[1]/goods:name[1]"); [EOL]     JXPathContext relativeCtx = context.getRelativeContext(context.getPointer("/vendor")); [EOL]     assertXPathValueAndPointer(relativeCtx, "product/product:name", "Box of oranges", "/vendor[1]/product[1]/goods:name[1]"); [EOL] }
public void testNamespaceMapping() { [EOL]     context.registerNamespace("rate", "priceNS"); [EOL]     context.registerNamespace("goods", "productNS"); [EOL]     assertEquals("Context node namespace resolution", "priceNS", context.getNamespaceURI("price")); [EOL]     assertEquals("Registered namespace resolution", "priceNS", context.getNamespaceURI("rate")); [EOL]     assertXPathValue(context, "count(vendor/product/rate:*)", new Double(2)); [EOL]     assertXPathValueAndPointer(context, "//product:name", "Box of oranges", "/vendor[1]/product[1]/goods:name[1]"); [EOL]     JXPathContext childCtx = JXPathContext.newContext(context, context.getContextBean()); [EOL]     assertXPathValueAndPointer(childCtx, "//product:name", "Box of oranges", "/vendor[1]/product[1]/goods:name[1]"); [EOL]     JXPathContext relativeCtx = context.getRelativeContext(context.getPointer("/vendor")); [EOL]     assertXPathValueAndPointer(relativeCtx, "product/product:name", "Box of oranges", "/vendor[1]/product[1]/goods:name[1]"); [EOL] }
public void testNamespaceMapping() { [EOL]     context.registerNamespace("rate", "priceNS"); [EOL]     context.registerNamespace("goods", "productNS"); [EOL]     assertEquals("Context node namespace resolution", "priceNS", context.getNamespaceURI("price")); [EOL]     assertEquals("Registered namespace resolution", "priceNS", context.getNamespaceURI("rate")); [EOL]     assertXPathValue(context, "count(vendor/product/rate:*)", new Double(2)); [EOL]     assertXPathValueAndPointer(context, "//product:name", "Box of oranges", "/vendor[1]/product[1]/goods:name[1]"); [EOL]     JXPathContext childCtx = JXPathContext.newContext(context, context.getContextBean()); [EOL]     assertXPathValueAndPointer(childCtx, "//product:name", "Box of oranges", "/vendor[1]/product[1]/goods:name[1]"); [EOL]     JXPathContext relativeCtx = context.getRelativeContext(context.getPointer("/vendor")); [EOL]     assertXPathValueAndPointer(relativeCtx, "product/product:name", "Box of oranges", "/vendor[1]/product[1]/goods:name[1]"); [EOL] }
public void testRelativeContextParent() { [EOL]     JXPathContext relative = context.getRelativeContext(context.getPointer("nestedBean")); [EOL]     assertXPathValueAndPointer(relative, "../integers[2]", new Integer(2), "/integers[2]"); [EOL] }
public void testRelativeContextParent() { [EOL]     JXPathContext relative = context.getRelativeContext(context.getPointer("nestedBean")); [EOL]     assertXPathValueAndPointer(relative, "../integers[2]", new Integer(2), "/integers[2]"); [EOL] }
public void testRelativeContextParent() { [EOL]     JXPathContext relative = context.getRelativeContext(context.getPointer("nestedBean")); [EOL]     assertXPathValueAndPointer(relative, "../integers[2]", new Integer(2), "/integers[2]"); [EOL] }
public void testRelativeContextParent() { [EOL]     JXPathContext relative = context.getRelativeContext(context.getPointer("nestedBean")); [EOL]     assertXPathValueAndPointer(relative, "../integers[2]", new Integer(2), "/integers[2]"); [EOL] }
public void testRelativeContextParent() { [EOL]     JXPathContext relative = context.getRelativeContext(context.getPointer("nestedBean")); [EOL]     assertXPathValueAndPointer(relative, "../integers[2]", new Integer(2), "/integers[2]"); [EOL] }
public void testRelativeContextParent() { [EOL]     JXPathContext relative = context.getRelativeContext(context.getPointer("nestedBean")); [EOL]     assertXPathValueAndPointer(relative, "../integers[2]", new Integer(2), "/integers[2]"); [EOL] }
public void testRelativeContextParent() { [EOL]     JXPathContext relative = context.getRelativeContext(context.getPointer("nestedBean")); [EOL]     assertXPathValueAndPointer(relative, "../integers[2]", new Integer(2), "/integers[2]"); [EOL] }
public void testNamespaceMapping() { [EOL]     context.registerNamespace("rate", "priceNS"); [EOL]     context.registerNamespace("goods", "productNS"); [EOL]     assertEquals("Context node namespace resolution", "priceNS", context.getNamespaceURI("price")); [EOL]     assertEquals("Registered namespace resolution", "priceNS", context.getNamespaceURI("rate")); [EOL]     assertXPathValue(context, "count(vendor/product/rate:*)", new Double(2)); [EOL]     assertXPathValueAndPointer(context, "//product:name", "Box of oranges", "/vendor[1]/product[1]/goods:name[1]"); [EOL]     JXPathContext childCtx = JXPathContext.newContext(context, context.getContextBean()); [EOL]     assertXPathValueAndPointer(childCtx, "//product:name", "Box of oranges", "/vendor[1]/product[1]/goods:name[1]"); [EOL]     JXPathContext relativeCtx = context.getRelativeContext(context.getPointer("/vendor")); [EOL]     assertXPathValueAndPointer(relativeCtx, "product/product:name", "Box of oranges", "/vendor[1]/product[1]/goods:name[1]"); [EOL] }
public void testNamespaceMapping() { [EOL]     context.registerNamespace("rate", "priceNS"); [EOL]     context.registerNamespace("goods", "productNS"); [EOL]     assertEquals("Context node namespace resolution", "priceNS", context.getNamespaceURI("price")); [EOL]     assertEquals("Registered namespace resolution", "priceNS", context.getNamespaceURI("rate")); [EOL]     assertXPathValue(context, "count(vendor/product/rate:*)", new Double(2)); [EOL]     assertXPathValueAndPointer(context, "//product:name", "Box of oranges", "/vendor[1]/product[1]/goods:name[1]"); [EOL]     JXPathContext childCtx = JXPathContext.newContext(context, context.getContextBean()); [EOL]     assertXPathValueAndPointer(childCtx, "//product:name", "Box of oranges", "/vendor[1]/product[1]/goods:name[1]"); [EOL]     JXPathContext relativeCtx = context.getRelativeContext(context.getPointer("/vendor")); [EOL]     assertXPathValueAndPointer(relativeCtx, "product/product:name", "Box of oranges", "/vendor[1]/product[1]/goods:name[1]"); [EOL] }
public void testListContainer() { [EOL]     assertXPathValueAndPointer(context, "list[7]/vendor/location/address/city", "Fruit Market", "/list[7]/vendor[1]/location[2]/address[1]/city[1]"); [EOL] }
public void testListContainer() { [EOL]     assertXPathValueAndPointer(context, "list[7]/vendor/location/address/city", "Fruit Market", "/list[7]/vendor[1]/location[2]/address[1]/city[1]"); [EOL] }
public void testListContainer() { [EOL]     assertXPathValueAndPointer(context, "list[7]/vendor/location/address/city", "Fruit Market", "/list[7]/vendor[1]/location[2]/address[1]/city[1]"); [EOL] }
public void testListContainer() { [EOL]     assertXPathValueAndPointer(context, "list[7]/vendor/location/address/city", "Fruit Market", "/list[7]/vendor[1]/location[2]/address[1]/city[1]"); [EOL] }
public void testListContainer() { [EOL]     assertXPathValueAndPointer(context, "list[7]/vendor/location/address/city", "Fruit Market", "/list[7]/vendor[1]/location[2]/address[1]/city[1]"); [EOL] }
public void testListContainer() { [EOL]     assertXPathValueAndPointer(context, "list[7]/vendor/location/address/city", "Fruit Market", "/list[7]/vendor[1]/location[2]/address[1]/city[1]"); [EOL] }
public void testDocumentOrder() { [EOL]     assertDocumentOrder(context, "vendor/location", "vendor/location/address/street", -1); [EOL]     assertDocumentOrder(context, "vendor/location[@id = '100']", "vendor/location[@id = '101']", -1); [EOL]     assertDocumentOrder(context, "vendor//price:amount", "vendor/location", 1); [EOL] }
public void testCoreOperationMod() { [EOL]     assertXPathExpression("2 mod 4", CoreOperationMod.class); [EOL]     assertXPathExpression("2|3 mod -3", CoreOperationMod.class, "2 | 3 mod -3"); [EOL] }
public void testAxisParent() { [EOL]     assertXPathValue(context, "count(/beans/..)", new Double(1)); [EOL]     assertXPathValue(context, "count(//..)", new Double(9)); [EOL]     assertXPathValue(context, "count(//../..)", new Double(2)); [EOL]     assertXPathValueIterator(context, "//parent::beans/name", list("Name 1", "Name 2")); [EOL] }
public void testAxisParent() { [EOL]     assertXPathValue(context, "count(/beans/..)", new Double(1)); [EOL]     assertXPathValue(context, "count(//..)", new Double(9)); [EOL]     assertXPathValue(context, "count(//../..)", new Double(2)); [EOL]     assertXPathValueIterator(context, "//parent::beans/name", list("Name 1", "Name 2")); [EOL] }
public void testCreatePathDeclareVariable() { [EOL]     assertXPathCreatePath(context, "$string", null, "$string"); [EOL] }
public void testCreatePathDeclareVariable() { [EOL]     assertXPathCreatePath(context, "$string", null, "$string"); [EOL] }
public void testNamespaceMapping() { [EOL]     context.registerNamespace("rate", "priceNS"); [EOL]     context.registerNamespace("goods", "productNS"); [EOL]     assertEquals("Context node namespace resolution", "priceNS", context.getNamespaceURI("price")); [EOL]     assertEquals("Registered namespace resolution", "priceNS", context.getNamespaceURI("rate")); [EOL]     assertXPathValue(context, "count(vendor/product/rate:*)", new Double(2)); [EOL]     assertXPathValueAndPointer(context, "//product:name", "Box of oranges", "/vendor[1]/product[1]/goods:name[1]"); [EOL]     JXPathContext childCtx = JXPathContext.newContext(context, context.getContextBean()); [EOL]     assertXPathValueAndPointer(childCtx, "//product:name", "Box of oranges", "/vendor[1]/product[1]/goods:name[1]"); [EOL]     JXPathContext relativeCtx = context.getRelativeContext(context.getPointer("/vendor")); [EOL]     assertXPathValueAndPointer(relativeCtx, "product/product:name", "Box of oranges", "/vendor[1]/product[1]/goods:name[1]"); [EOL] }
public void testNamespaceMapping() { [EOL]     context.registerNamespace("rate", "priceNS"); [EOL]     context.registerNamespace("goods", "productNS"); [EOL]     assertEquals("Context node namespace resolution", "priceNS", context.getNamespaceURI("price")); [EOL]     assertEquals("Registered namespace resolution", "priceNS", context.getNamespaceURI("rate")); [EOL]     assertXPathValue(context, "count(vendor/product/rate:*)", new Double(2)); [EOL]     assertXPathValueAndPointer(context, "//product:name", "Box of oranges", "/vendor[1]/product[1]/goods:name[1]"); [EOL]     JXPathContext childCtx = JXPathContext.newContext(context, context.getContextBean()); [EOL]     assertXPathValueAndPointer(childCtx, "//product:name", "Box of oranges", "/vendor[1]/product[1]/goods:name[1]"); [EOL]     JXPathContext relativeCtx = context.getRelativeContext(context.getPointer("/vendor")); [EOL]     assertXPathValueAndPointer(relativeCtx, "product/product:name", "Box of oranges", "/vendor[1]/product[1]/goods:name[1]"); [EOL] }
public void testNodeTypeComment() { [EOL]     assertXPathValue(context, "//product/comment()", "We are not buying this product, ever"); [EOL] }
public void testNodeTypeComment() { [EOL]     assertXPathValue(context, "//product/comment()", "We are not buying this product, ever"); [EOL] }
public void testNodeTypeComment() { [EOL]     assertXPathValue(context, "//product/comment()", "We are not buying this product, ever"); [EOL] }
public void testNodeTypeComment() { [EOL]     assertXPathValue(context, "//product/comment()", "We are not buying this product, ever"); [EOL] }
public void testNodeTypeComment() { [EOL]     assertXPathValue(context, "//product/comment()", "We are not buying this product, ever"); [EOL] }
public void testNodeTypeComment() { [EOL]     assertXPathValue(context, "//product/comment()", "We are not buying this product, ever"); [EOL] }
public void testNodeTypeComment() { [EOL]     assertXPathValue(context, "//product/comment()", "We are not buying this product, ever"); [EOL] }
public void testNodeTypeComment() { [EOL]     assertXPathValue(context, "//product/comment()", "We are not buying this product, ever"); [EOL] }
public void testNodeTypeComment() { [EOL]     assertXPathValue(context, "//product/comment()", "We are not buying this product, ever"); [EOL] }
public void testNodeTypeComment() { [EOL]     assertXPathValue(context, "//product/comment()", "We are not buying this product, ever"); [EOL] }
public void testNamespaceMapping() { [EOL]     context.registerNamespace("rate", "priceNS"); [EOL]     context.registerNamespace("goods", "productNS"); [EOL]     assertEquals("Context node namespace resolution", "priceNS", context.getNamespaceURI("price")); [EOL]     assertEquals("Registered namespace resolution", "priceNS", context.getNamespaceURI("rate")); [EOL]     assertXPathValue(context, "count(vendor/product/rate:*)", new Double(2)); [EOL]     assertXPathValueAndPointer(context, "//product:name", "Box of oranges", "/vendor[1]/product[1]/goods:name[1]"); [EOL]     JXPathContext childCtx = JXPathContext.newContext(context, context.getContextBean()); [EOL]     assertXPathValueAndPointer(childCtx, "//product:name", "Box of oranges", "/vendor[1]/product[1]/goods:name[1]"); [EOL]     JXPathContext relativeCtx = context.getRelativeContext(context.getPointer("/vendor")); [EOL]     assertXPathValueAndPointer(relativeCtx, "product/product:name", "Box of oranges", "/vendor[1]/product[1]/goods:name[1]"); [EOL] }
public void testNamespaceMapping() { [EOL]     context.registerNamespace("rate", "priceNS"); [EOL]     context.registerNamespace("goods", "productNS"); [EOL]     assertEquals("Context node namespace resolution", "priceNS", context.getNamespaceURI("price")); [EOL]     assertEquals("Registered namespace resolution", "priceNS", context.getNamespaceURI("rate")); [EOL]     assertXPathValue(context, "count(vendor/product/rate:*)", new Double(2)); [EOL]     assertXPathValueAndPointer(context, "//product:name", "Box of oranges", "/vendor[1]/product[1]/goods:name[1]"); [EOL]     JXPathContext childCtx = JXPathContext.newContext(context, context.getContextBean()); [EOL]     assertXPathValueAndPointer(childCtx, "//product:name", "Box of oranges", "/vendor[1]/product[1]/goods:name[1]"); [EOL]     JXPathContext relativeCtx = context.getRelativeContext(context.getPointer("/vendor")); [EOL]     assertXPathValueAndPointer(relativeCtx, "product/product:name", "Box of oranges", "/vendor[1]/product[1]/goods:name[1]"); [EOL] }
public void testNamespaceMapping() { [EOL]     context.registerNamespace("rate", "priceNS"); [EOL]     context.registerNamespace("goods", "productNS"); [EOL]     assertEquals("Context node namespace resolution", "priceNS", context.getNamespaceURI("price")); [EOL]     assertEquals("Registered namespace resolution", "priceNS", context.getNamespaceURI("rate")); [EOL]     assertXPathValue(context, "count(vendor/product/rate:*)", new Double(2)); [EOL]     assertXPathValueAndPointer(context, "//product:name", "Box of oranges", "/vendor[1]/product[1]/goods:name[1]"); [EOL]     JXPathContext childCtx = JXPathContext.newContext(context, context.getContextBean()); [EOL]     assertXPathValueAndPointer(childCtx, "//product:name", "Box of oranges", "/vendor[1]/product[1]/goods:name[1]"); [EOL]     JXPathContext relativeCtx = context.getRelativeContext(context.getPointer("/vendor")); [EOL]     assertXPathValueAndPointer(relativeCtx, "product/product:name", "Box of oranges", "/vendor[1]/product[1]/goods:name[1]"); [EOL] }
public void testNamespaceMapping() { [EOL]     context.registerNamespace("rate", "priceNS"); [EOL]     context.registerNamespace("goods", "productNS"); [EOL]     assertEquals("Context node namespace resolution", "priceNS", context.getNamespaceURI("price")); [EOL]     assertEquals("Registered namespace resolution", "priceNS", context.getNamespaceURI("rate")); [EOL]     assertXPathValue(context, "count(vendor/product/rate:*)", new Double(2)); [EOL]     assertXPathValueAndPointer(context, "//product:name", "Box of oranges", "/vendor[1]/product[1]/goods:name[1]"); [EOL]     JXPathContext childCtx = JXPathContext.newContext(context, context.getContextBean()); [EOL]     assertXPathValueAndPointer(childCtx, "//product:name", "Box of oranges", "/vendor[1]/product[1]/goods:name[1]"); [EOL]     JXPathContext relativeCtx = context.getRelativeContext(context.getPointer("/vendor")); [EOL]     assertXPathValueAndPointer(relativeCtx, "product/product:name", "Box of oranges", "/vendor[1]/product[1]/goods:name[1]"); [EOL] }
public void testNamespaceMapping() { [EOL]     context.registerNamespace("rate", "priceNS"); [EOL]     context.registerNamespace("goods", "productNS"); [EOL]     assertEquals("Context node namespace resolution", "priceNS", context.getNamespaceURI("price")); [EOL]     assertEquals("Registered namespace resolution", "priceNS", context.getNamespaceURI("rate")); [EOL]     assertXPathValue(context, "count(vendor/product/rate:*)", new Double(2)); [EOL]     assertXPathValueAndPointer(context, "//product:name", "Box of oranges", "/vendor[1]/product[1]/goods:name[1]"); [EOL]     JXPathContext childCtx = JXPathContext.newContext(context, context.getContextBean()); [EOL]     assertXPathValueAndPointer(childCtx, "//product:name", "Box of oranges", "/vendor[1]/product[1]/goods:name[1]"); [EOL]     JXPathContext relativeCtx = context.getRelativeContext(context.getPointer("/vendor")); [EOL]     assertXPathValueAndPointer(relativeCtx, "product/product:name", "Box of oranges", "/vendor[1]/product[1]/goods:name[1]"); [EOL] }
public void testNamespaceMapping() { [EOL]     context.registerNamespace("rate", "priceNS"); [EOL]     context.registerNamespace("goods", "productNS"); [EOL]     assertEquals("Context node namespace resolution", "priceNS", context.getNamespaceURI("price")); [EOL]     assertEquals("Registered namespace resolution", "priceNS", context.getNamespaceURI("rate")); [EOL]     assertXPathValue(context, "count(vendor/product/rate:*)", new Double(2)); [EOL]     assertXPathValueAndPointer(context, "//product:name", "Box of oranges", "/vendor[1]/product[1]/goods:name[1]"); [EOL]     JXPathContext childCtx = JXPathContext.newContext(context, context.getContextBean()); [EOL]     assertXPathValueAndPointer(childCtx, "//product:name", "Box of oranges", "/vendor[1]/product[1]/goods:name[1]"); [EOL]     JXPathContext relativeCtx = context.getRelativeContext(context.getPointer("/vendor")); [EOL]     assertXPathValueAndPointer(relativeCtx, "product/product:name", "Box of oranges", "/vendor[1]/product[1]/goods:name[1]"); [EOL] }
public void testNamespaceMapping() { [EOL]     context.registerNamespace("rate", "priceNS"); [EOL]     context.registerNamespace("goods", "productNS"); [EOL]     assertEquals("Context node namespace resolution", "priceNS", context.getNamespaceURI("price")); [EOL]     assertEquals("Registered namespace resolution", "priceNS", context.getNamespaceURI("rate")); [EOL]     assertXPathValue(context, "count(vendor/product/rate:*)", new Double(2)); [EOL]     assertXPathValueAndPointer(context, "//product:name", "Box of oranges", "/vendor[1]/product[1]/goods:name[1]"); [EOL]     JXPathContext childCtx = JXPathContext.newContext(context, context.getContextBean()); [EOL]     assertXPathValueAndPointer(childCtx, "//product:name", "Box of oranges", "/vendor[1]/product[1]/goods:name[1]"); [EOL]     JXPathContext relativeCtx = context.getRelativeContext(context.getPointer("/vendor")); [EOL]     assertXPathValueAndPointer(relativeCtx, "product/product:name", "Box of oranges", "/vendor[1]/product[1]/goods:name[1]"); [EOL] }
public void testDocumentOrder() { [EOL]     assertDocumentOrder(context, "vendor/location", "vendor/location/address/street", -1); [EOL]     assertDocumentOrder(context, "vendor/location[@id = '100']", "vendor/location[@id = '101']", -1); [EOL]     assertDocumentOrder(context, "vendor//price:amount", "vendor/location", 1); [EOL] }
public void testDoPredicateName() { [EOL]     assertValueAndPointer("/nestedBean[@name='int']", new Integer(1), "/nestedBean/int", "BbBb", "BbBbB"); [EOL]     assertValueAndPointer("/.[@name='int']", new Integer(1), "/int", "Bb", "BbB"); [EOL]     assertValueAndPointer("/map[@name='Key1']", "Value 1", "/map[@name='Key1']", "BbDd", "BbDdB"); [EOL]     assertValueAndPointer("/nestedBean[@name='strings']", bean.getNestedBean().getStrings(), "/nestedBean/strings", "BbBb", "BbBbC"); [EOL]     assertNullPointer("/nestedBean[@name='foo']", "/nestedBean[@name='foo']", "BbBn"); [EOL]     assertValueAndPointer("/map[@name='Key3']", bean.getMap().get("Key3"), "/map[@name='Key3']", "BbDd", "BbDdC"); [EOL]     assertNullPointer("/map[@name='foo']", "/map[@name='foo']", "BbDd"); [EOL]     assertValueAndPointer("/list[@name='fruitco']", context.getValue("/vendor"), "/list[5]", "BbCM"); [EOL]     assertValueAndPointer("/map/Key3[@name='key']/name", "Name 9", "/map[@name='Key3'][4][@name='key']/name", "BbDdCDdBb", "BbDdCDdBbB"); [EOL]     assertValueAndPointer("map/Key3[@name='fruitco']", context.getValue("/vendor"), "/map[@name='Key3'][3]", "BbDdCM"); [EOL]     assertValueAndPointer("/vendor[@name='fruitco']", context.getValue("/vendor"), "/vendor", "BbM"); [EOL]     assertNullPointer("/vendor[@name='foo']", "/vendor[@name='foo']", "BbMn"); [EOL]     assertNullPointer("/vendor[@name='foo'][3]", "/vendor[@name='foo'][3]", "BbMn"); [EOL]     assertNullPointer("/nestedBean[@name='foo']/bar", "/nestedBean[@name='foo']/bar", "BbBnNn"); [EOL]     assertNullPointer("/map[@name='foo']/bar", "/map[@name='foo']/bar", "BbDdNn"); [EOL]     assertNullPointer("/vendor[@name='foo']/bar", "/vendor[@name='foo']/bar", "BbMnNn"); [EOL]     assertNullPointer("/vendor[@name='foo'][3]/bar", "/vendor[@name='foo'][3]/bar", "BbMnNn"); [EOL]     assertValueAndPointer("/map[@name='Key2'][@name='name']", "Name 6", "/map[@name='Key2']/name", "BbDdBb", "BbDdBbB"); [EOL]     assertValueAndPointer("/map[@name='Key2'][@name='strings'][2]", "String 2", "/map[@name='Key2']/strings[2]", "BbDdBb", "BbDdBbB"); [EOL]     assertValueAndPointer("map[@name='Key5'][@name='key']/name", "Name 9", "/map[@name='Key5'][@name='key']/name", "BbDdDdBb", "BbDdDdBbB"); [EOL]     assertNullPointer("map[@name='Key2'][@name='foo']", "/map[@name='Key2'][@name='foo']", "BbDdBn"); [EOL]     assertNullPointer("map[@name='Key2'][@name='foo'][@name='bar']", "/map[@name='Key2'][@name='foo'][@name='bar']", "BbDdBnNn"); [EOL]     assertValueAndPointer("map[@name='Key4'][@name='fruitco']", context.getValue("/vendor"), "/map[@name='Key4']", "BbDdM"); [EOL] }
public void testDoPredicateName() { [EOL]     assertValueAndPointer("/nestedBean[@name='int']", new Integer(1), "/nestedBean/int", "BbBb", "BbBbB"); [EOL]     assertValueAndPointer("/.[@name='int']", new Integer(1), "/int", "Bb", "BbB"); [EOL]     assertValueAndPointer("/map[@name='Key1']", "Value 1", "/map[@name='Key1']", "BbDd", "BbDdB"); [EOL]     assertValueAndPointer("/nestedBean[@name='strings']", bean.getNestedBean().getStrings(), "/nestedBean/strings", "BbBb", "BbBbC"); [EOL]     assertNullPointer("/nestedBean[@name='foo']", "/nestedBean[@name='foo']", "BbBn"); [EOL]     assertValueAndPointer("/map[@name='Key3']", bean.getMap().get("Key3"), "/map[@name='Key3']", "BbDd", "BbDdC"); [EOL]     assertNullPointer("/map[@name='foo']", "/map[@name='foo']", "BbDd"); [EOL]     assertValueAndPointer("/list[@name='fruitco']", context.getValue("/vendor"), "/list[5]", "BbCM"); [EOL]     assertValueAndPointer("/map/Key3[@name='key']/name", "Name 9", "/map[@name='Key3'][4][@name='key']/name", "BbDdCDdBb", "BbDdCDdBbB"); [EOL]     assertValueAndPointer("map/Key3[@name='fruitco']", context.getValue("/vendor"), "/map[@name='Key3'][3]", "BbDdCM"); [EOL]     assertValueAndPointer("/vendor[@name='fruitco']", context.getValue("/vendor"), "/vendor", "BbM"); [EOL]     assertNullPointer("/vendor[@name='foo']", "/vendor[@name='foo']", "BbMn"); [EOL]     assertNullPointer("/vendor[@name='foo'][3]", "/vendor[@name='foo'][3]", "BbMn"); [EOL]     assertNullPointer("/nestedBean[@name='foo']/bar", "/nestedBean[@name='foo']/bar", "BbBnNn"); [EOL]     assertNullPointer("/map[@name='foo']/bar", "/map[@name='foo']/bar", "BbDdNn"); [EOL]     assertNullPointer("/vendor[@name='foo']/bar", "/vendor[@name='foo']/bar", "BbMnNn"); [EOL]     assertNullPointer("/vendor[@name='foo'][3]/bar", "/vendor[@name='foo'][3]/bar", "BbMnNn"); [EOL]     assertValueAndPointer("/map[@name='Key2'][@name='name']", "Name 6", "/map[@name='Key2']/name", "BbDdBb", "BbDdBbB"); [EOL]     assertValueAndPointer("/map[@name='Key2'][@name='strings'][2]", "String 2", "/map[@name='Key2']/strings[2]", "BbDdBb", "BbDdBbB"); [EOL]     assertValueAndPointer("map[@name='Key5'][@name='key']/name", "Name 9", "/map[@name='Key5'][@name='key']/name", "BbDdDdBb", "BbDdDdBbB"); [EOL]     assertNullPointer("map[@name='Key2'][@name='foo']", "/map[@name='Key2'][@name='foo']", "BbDdBn"); [EOL]     assertNullPointer("map[@name='Key2'][@name='foo'][@name='bar']", "/map[@name='Key2'][@name='foo'][@name='bar']", "BbDdBnNn"); [EOL]     assertValueAndPointer("map[@name='Key4'][@name='fruitco']", context.getValue("/vendor"), "/map[@name='Key4']", "BbDdM"); [EOL] }
public void testDoPredicateName() { [EOL]     assertValueAndPointer("/nestedBean[@name='int']", new Integer(1), "/nestedBean/int", "BbBb", "BbBbB"); [EOL]     assertValueAndPointer("/.[@name='int']", new Integer(1), "/int", "Bb", "BbB"); [EOL]     assertValueAndPointer("/map[@name='Key1']", "Value 1", "/map[@name='Key1']", "BbDd", "BbDdB"); [EOL]     assertValueAndPointer("/nestedBean[@name='strings']", bean.getNestedBean().getStrings(), "/nestedBean/strings", "BbBb", "BbBbC"); [EOL]     assertNullPointer("/nestedBean[@name='foo']", "/nestedBean[@name='foo']", "BbBn"); [EOL]     assertValueAndPointer("/map[@name='Key3']", bean.getMap().get("Key3"), "/map[@name='Key3']", "BbDd", "BbDdC"); [EOL]     assertNullPointer("/map[@name='foo']", "/map[@name='foo']", "BbDd"); [EOL]     assertValueAndPointer("/list[@name='fruitco']", context.getValue("/vendor"), "/list[5]", "BbCM"); [EOL]     assertValueAndPointer("/map/Key3[@name='key']/name", "Name 9", "/map[@name='Key3'][4][@name='key']/name", "BbDdCDdBb", "BbDdCDdBbB"); [EOL]     assertValueAndPointer("map/Key3[@name='fruitco']", context.getValue("/vendor"), "/map[@name='Key3'][3]", "BbDdCM"); [EOL]     assertValueAndPointer("/vendor[@name='fruitco']", context.getValue("/vendor"), "/vendor", "BbM"); [EOL]     assertNullPointer("/vendor[@name='foo']", "/vendor[@name='foo']", "BbMn"); [EOL]     assertNullPointer("/vendor[@name='foo'][3]", "/vendor[@name='foo'][3]", "BbMn"); [EOL]     assertNullPointer("/nestedBean[@name='foo']/bar", "/nestedBean[@name='foo']/bar", "BbBnNn"); [EOL]     assertNullPointer("/map[@name='foo']/bar", "/map[@name='foo']/bar", "BbDdNn"); [EOL]     assertNullPointer("/vendor[@name='foo']/bar", "/vendor[@name='foo']/bar", "BbMnNn"); [EOL]     assertNullPointer("/vendor[@name='foo'][3]/bar", "/vendor[@name='foo'][3]/bar", "BbMnNn"); [EOL]     assertValueAndPointer("/map[@name='Key2'][@name='name']", "Name 6", "/map[@name='Key2']/name", "BbDdBb", "BbDdBbB"); [EOL]     assertValueAndPointer("/map[@name='Key2'][@name='strings'][2]", "String 2", "/map[@name='Key2']/strings[2]", "BbDdBb", "BbDdBbB"); [EOL]     assertValueAndPointer("map[@name='Key5'][@name='key']/name", "Name 9", "/map[@name='Key5'][@name='key']/name", "BbDdDdBb", "BbDdDdBbB"); [EOL]     assertNullPointer("map[@name='Key2'][@name='foo']", "/map[@name='Key2'][@name='foo']", "BbDdBn"); [EOL]     assertNullPointer("map[@name='Key2'][@name='foo'][@name='bar']", "/map[@name='Key2'][@name='foo'][@name='bar']", "BbDdBnNn"); [EOL]     assertValueAndPointer("map[@name='Key4'][@name='fruitco']", context.getValue("/vendor"), "/map[@name='Key4']", "BbDdM"); [EOL] }
public void testDoPredicateName() { [EOL]     assertValueAndPointer("/nestedBean[@name='int']", new Integer(1), "/nestedBean/int", "BbBb", "BbBbB"); [EOL]     assertValueAndPointer("/.[@name='int']", new Integer(1), "/int", "Bb", "BbB"); [EOL]     assertValueAndPointer("/map[@name='Key1']", "Value 1", "/map[@name='Key1']", "BbDd", "BbDdB"); [EOL]     assertValueAndPointer("/nestedBean[@name='strings']", bean.getNestedBean().getStrings(), "/nestedBean/strings", "BbBb", "BbBbC"); [EOL]     assertNullPointer("/nestedBean[@name='foo']", "/nestedBean[@name='foo']", "BbBn"); [EOL]     assertValueAndPointer("/map[@name='Key3']", bean.getMap().get("Key3"), "/map[@name='Key3']", "BbDd", "BbDdC"); [EOL]     assertNullPointer("/map[@name='foo']", "/map[@name='foo']", "BbDd"); [EOL]     assertValueAndPointer("/list[@name='fruitco']", context.getValue("/vendor"), "/list[5]", "BbCM"); [EOL]     assertValueAndPointer("/map/Key3[@name='key']/name", "Name 9", "/map[@name='Key3'][4][@name='key']/name", "BbDdCDdBb", "BbDdCDdBbB"); [EOL]     assertValueAndPointer("map/Key3[@name='fruitco']", context.getValue("/vendor"), "/map[@name='Key3'][3]", "BbDdCM"); [EOL]     assertValueAndPointer("/vendor[@name='fruitco']", context.getValue("/vendor"), "/vendor", "BbM"); [EOL]     assertNullPointer("/vendor[@name='foo']", "/vendor[@name='foo']", "BbMn"); [EOL]     assertNullPointer("/vendor[@name='foo'][3]", "/vendor[@name='foo'][3]", "BbMn"); [EOL]     assertNullPointer("/nestedBean[@name='foo']/bar", "/nestedBean[@name='foo']/bar", "BbBnNn"); [EOL]     assertNullPointer("/map[@name='foo']/bar", "/map[@name='foo']/bar", "BbDdNn"); [EOL]     assertNullPointer("/vendor[@name='foo']/bar", "/vendor[@name='foo']/bar", "BbMnNn"); [EOL]     assertNullPointer("/vendor[@name='foo'][3]/bar", "/vendor[@name='foo'][3]/bar", "BbMnNn"); [EOL]     assertValueAndPointer("/map[@name='Key2'][@name='name']", "Name 6", "/map[@name='Key2']/name", "BbDdBb", "BbDdBbB"); [EOL]     assertValueAndPointer("/map[@name='Key2'][@name='strings'][2]", "String 2", "/map[@name='Key2']/strings[2]", "BbDdBb", "BbDdBbB"); [EOL]     assertValueAndPointer("map[@name='Key5'][@name='key']/name", "Name 9", "/map[@name='Key5'][@name='key']/name", "BbDdDdBb", "BbDdDdBbB"); [EOL]     assertNullPointer("map[@name='Key2'][@name='foo']", "/map[@name='Key2'][@name='foo']", "BbDdBn"); [EOL]     assertNullPointer("map[@name='Key2'][@name='foo'][@name='bar']", "/map[@name='Key2'][@name='foo'][@name='bar']", "BbDdBnNn"); [EOL]     assertValueAndPointer("map[@name='Key4'][@name='fruitco']", context.getValue("/vendor"), "/map[@name='Key4']", "BbDdM"); [EOL] }
public void testDoPredicateName() { [EOL]     assertValueAndPointer("/nestedBean[@name='int']", new Integer(1), "/nestedBean/int", "BbBb", "BbBbB"); [EOL]     assertValueAndPointer("/.[@name='int']", new Integer(1), "/int", "Bb", "BbB"); [EOL]     assertValueAndPointer("/map[@name='Key1']", "Value 1", "/map[@name='Key1']", "BbDd", "BbDdB"); [EOL]     assertValueAndPointer("/nestedBean[@name='strings']", bean.getNestedBean().getStrings(), "/nestedBean/strings", "BbBb", "BbBbC"); [EOL]     assertNullPointer("/nestedBean[@name='foo']", "/nestedBean[@name='foo']", "BbBn"); [EOL]     assertValueAndPointer("/map[@name='Key3']", bean.getMap().get("Key3"), "/map[@name='Key3']", "BbDd", "BbDdC"); [EOL]     assertNullPointer("/map[@name='foo']", "/map[@name='foo']", "BbDd"); [EOL]     assertValueAndPointer("/list[@name='fruitco']", context.getValue("/vendor"), "/list[5]", "BbCM"); [EOL]     assertValueAndPointer("/map/Key3[@name='key']/name", "Name 9", "/map[@name='Key3'][4][@name='key']/name", "BbDdCDdBb", "BbDdCDdBbB"); [EOL]     assertValueAndPointer("map/Key3[@name='fruitco']", context.getValue("/vendor"), "/map[@name='Key3'][3]", "BbDdCM"); [EOL]     assertValueAndPointer("/vendor[@name='fruitco']", context.getValue("/vendor"), "/vendor", "BbM"); [EOL]     assertNullPointer("/vendor[@name='foo']", "/vendor[@name='foo']", "BbMn"); [EOL]     assertNullPointer("/vendor[@name='foo'][3]", "/vendor[@name='foo'][3]", "BbMn"); [EOL]     assertNullPointer("/nestedBean[@name='foo']/bar", "/nestedBean[@name='foo']/bar", "BbBnNn"); [EOL]     assertNullPointer("/map[@name='foo']/bar", "/map[@name='foo']/bar", "BbDdNn"); [EOL]     assertNullPointer("/vendor[@name='foo']/bar", "/vendor[@name='foo']/bar", "BbMnNn"); [EOL]     assertNullPointer("/vendor[@name='foo'][3]/bar", "/vendor[@name='foo'][3]/bar", "BbMnNn"); [EOL]     assertValueAndPointer("/map[@name='Key2'][@name='name']", "Name 6", "/map[@name='Key2']/name", "BbDdBb", "BbDdBbB"); [EOL]     assertValueAndPointer("/map[@name='Key2'][@name='strings'][2]", "String 2", "/map[@name='Key2']/strings[2]", "BbDdBb", "BbDdBbB"); [EOL]     assertValueAndPointer("map[@name='Key5'][@name='key']/name", "Name 9", "/map[@name='Key5'][@name='key']/name", "BbDdDdBb", "BbDdDdBbB"); [EOL]     assertNullPointer("map[@name='Key2'][@name='foo']", "/map[@name='Key2'][@name='foo']", "BbDdBn"); [EOL]     assertNullPointer("map[@name='Key2'][@name='foo'][@name='bar']", "/map[@name='Key2'][@name='foo'][@name='bar']", "BbDdBnNn"); [EOL]     assertValueAndPointer("map[@name='Key4'][@name='fruitco']", context.getValue("/vendor"), "/map[@name='Key4']", "BbDdM"); [EOL] }
public void testDoPredicateName() { [EOL]     assertValueAndPointer("/nestedBean[@name='int']", new Integer(1), "/nestedBean/int", "BbBb", "BbBbB"); [EOL]     assertValueAndPointer("/.[@name='int']", new Integer(1), "/int", "Bb", "BbB"); [EOL]     assertValueAndPointer("/map[@name='Key1']", "Value 1", "/map[@name='Key1']", "BbDd", "BbDdB"); [EOL]     assertValueAndPointer("/nestedBean[@name='strings']", bean.getNestedBean().getStrings(), "/nestedBean/strings", "BbBb", "BbBbC"); [EOL]     assertNullPointer("/nestedBean[@name='foo']", "/nestedBean[@name='foo']", "BbBn"); [EOL]     assertValueAndPointer("/map[@name='Key3']", bean.getMap().get("Key3"), "/map[@name='Key3']", "BbDd", "BbDdC"); [EOL]     assertNullPointer("/map[@name='foo']", "/map[@name='foo']", "BbDd"); [EOL]     assertValueAndPointer("/list[@name='fruitco']", context.getValue("/vendor"), "/list[5]", "BbCM"); [EOL]     assertValueAndPointer("/map/Key3[@name='key']/name", "Name 9", "/map[@name='Key3'][4][@name='key']/name", "BbDdCDdBb", "BbDdCDdBbB"); [EOL]     assertValueAndPointer("map/Key3[@name='fruitco']", context.getValue("/vendor"), "/map[@name='Key3'][3]", "BbDdCM"); [EOL]     assertValueAndPointer("/vendor[@name='fruitco']", context.getValue("/vendor"), "/vendor", "BbM"); [EOL]     assertNullPointer("/vendor[@name='foo']", "/vendor[@name='foo']", "BbMn"); [EOL]     assertNullPointer("/vendor[@name='foo'][3]", "/vendor[@name='foo'][3]", "BbMn"); [EOL]     assertNullPointer("/nestedBean[@name='foo']/bar", "/nestedBean[@name='foo']/bar", "BbBnNn"); [EOL]     assertNullPointer("/map[@name='foo']/bar", "/map[@name='foo']/bar", "BbDdNn"); [EOL]     assertNullPointer("/vendor[@name='foo']/bar", "/vendor[@name='foo']/bar", "BbMnNn"); [EOL]     assertNullPointer("/vendor[@name='foo'][3]/bar", "/vendor[@name='foo'][3]/bar", "BbMnNn"); [EOL]     assertValueAndPointer("/map[@name='Key2'][@name='name']", "Name 6", "/map[@name='Key2']/name", "BbDdBb", "BbDdBbB"); [EOL]     assertValueAndPointer("/map[@name='Key2'][@name='strings'][2]", "String 2", "/map[@name='Key2']/strings[2]", "BbDdBb", "BbDdBbB"); [EOL]     assertValueAndPointer("map[@name='Key5'][@name='key']/name", "Name 9", "/map[@name='Key5'][@name='key']/name", "BbDdDdBb", "BbDdDdBbB"); [EOL]     assertNullPointer("map[@name='Key2'][@name='foo']", "/map[@name='Key2'][@name='foo']", "BbDdBn"); [EOL]     assertNullPointer("map[@name='Key2'][@name='foo'][@name='bar']", "/map[@name='Key2'][@name='foo'][@name='bar']", "BbDdBnNn"); [EOL]     assertValueAndPointer("map[@name='Key4'][@name='fruitco']", context.getValue("/vendor"), "/map[@name='Key4']", "BbDdM"); [EOL] }
public void testAxisDescendant() { [EOL]     assertXPathValue(context, "//street", "Orchard Road"); [EOL]     assertXPathValue(context, "count(//price:*)", new Double(2)); [EOL]     assertXPathValueIterator(context, "vendor//saleEnds", list("never")); [EOL]     assertXPathValueIterator(context, "vendor//promotion", list("")); [EOL]     assertXPathValueIterator(context, "vendor//saleEnds[../@stores = 'all']", list("never")); [EOL]     assertXPathValueIterator(context, "vendor//promotion[../@stores = 'all']", list("")); [EOL] }
public void testStaticMethodCall() { [EOL]     assertXPathValue(context, "string(test:build(8, 'goober'))", "foo=8; bar=goober"); [EOL]     assertXPathValue(context, "string(jxpathtest:TestFunctions.build(8, 'goober'))", "foo=8; bar=goober"); [EOL]     assertXPathValue(context, "string(" + TestFunctions.class.getName() + ".build(8, 'goober'))", "foo=8; bar=goober"); [EOL]     assertXPathValue(context, "string(test:increment(8))", "9"); [EOL]     assertXPathValue(context, "test:string(/beans/name)", "Name 1"); [EOL] }
public void testStaticMethodCall() { [EOL]     assertXPathValue(context, "string(test:build(8, 'goober'))", "foo=8; bar=goober"); [EOL]     assertXPathValue(context, "string(jxpathtest:TestFunctions.build(8, 'goober'))", "foo=8; bar=goober"); [EOL]     assertXPathValue(context, "string(" + TestFunctions.class.getName() + ".build(8, 'goober'))", "foo=8; bar=goober"); [EOL]     assertXPathValue(context, "string(test:increment(8))", "9"); [EOL]     assertXPathValue(context, "test:string(/beans/name)", "Name 1"); [EOL] }
public void testStaticMethodCall() { [EOL]     assertXPathValue(context, "string(test:build(8, 'goober'))", "foo=8; bar=goober"); [EOL]     assertXPathValue(context, "string(jxpathtest:TestFunctions.build(8, 'goober'))", "foo=8; bar=goober"); [EOL]     assertXPathValue(context, "string(" + TestFunctions.class.getName() + ".build(8, 'goober'))", "foo=8; bar=goober"); [EOL]     assertXPathValue(context, "string(test:increment(8))", "9"); [EOL]     assertXPathValue(context, "test:string(/beans/name)", "Name 1"); [EOL] }
public void testStaticMethodCall() { [EOL]     assertXPathValue(context, "string(test:build(8, 'goober'))", "foo=8; bar=goober"); [EOL]     assertXPathValue(context, "string(jxpathtest:TestFunctions.build(8, 'goober'))", "foo=8; bar=goober"); [EOL]     assertXPathValue(context, "string(" + TestFunctions.class.getName() + ".build(8, 'goober'))", "foo=8; bar=goober"); [EOL]     assertXPathValue(context, "string(test:increment(8))", "9"); [EOL]     assertXPathValue(context, "test:string(/beans/name)", "Name 1"); [EOL] }
public void testStaticMethodCall() { [EOL]     assertXPathValue(context, "string(test:build(8, 'goober'))", "foo=8; bar=goober"); [EOL]     assertXPathValue(context, "string(jxpathtest:TestFunctions.build(8, 'goober'))", "foo=8; bar=goober"); [EOL]     assertXPathValue(context, "string(" + TestFunctions.class.getName() + ".build(8, 'goober'))", "foo=8; bar=goober"); [EOL]     assertXPathValue(context, "string(test:increment(8))", "9"); [EOL]     assertXPathValue(context, "test:string(/beans/name)", "Name 1"); [EOL] }
public void testStaticMethodCall() { [EOL]     assertXPathValue(context, "string(test:build(8, 'goober'))", "foo=8; bar=goober"); [EOL]     assertXPathValue(context, "string(jxpathtest:TestFunctions.build(8, 'goober'))", "foo=8; bar=goober"); [EOL]     assertXPathValue(context, "string(" + TestFunctions.class.getName() + ".build(8, 'goober'))", "foo=8; bar=goober"); [EOL]     assertXPathValue(context, "string(test:increment(8))", "9"); [EOL]     assertXPathValue(context, "test:string(/beans/name)", "Name 1"); [EOL] }
public void testCollectionMethodCall() { [EOL]     List list = new ArrayList(); [EOL]     list.add("foo"); [EOL]     context.getVariables().declareVariable("myList", list); [EOL]     assertXPathValue(context, "size($myList)", new Integer(1)); [EOL]     assertXPathValue(context, "size(beans)", new Integer(2)); [EOL]     context.getValue("add($myList, 'hello')"); [EOL]     assertEquals("After adding an element", 2, list.size()); [EOL]     JXPathContext context = JXPathContext.newContext(new ArrayList()); [EOL]     assertEquals("Extension function on root collection", "0", String.valueOf(context.getValue("size(/)"))); [EOL] }
public void testCollectionMethodCall() { [EOL]     List list = new ArrayList(); [EOL]     list.add("foo"); [EOL]     context.getVariables().declareVariable("myList", list); [EOL]     assertXPathValue(context, "size($myList)", new Integer(1)); [EOL]     assertXPathValue(context, "size(beans)", new Integer(2)); [EOL]     context.getValue("add($myList, 'hello')"); [EOL]     assertEquals("After adding an element", 2, list.size()); [EOL]     JXPathContext context = JXPathContext.newContext(new ArrayList()); [EOL]     assertEquals("Extension function on root collection", "0", String.valueOf(context.getValue("size(/)"))); [EOL] }
public void testCollectionMethodCall() { [EOL]     List list = new ArrayList(); [EOL]     list.add("foo"); [EOL]     context.getVariables().declareVariable("myList", list); [EOL]     assertXPathValue(context, "size($myList)", new Integer(1)); [EOL]     assertXPathValue(context, "size(beans)", new Integer(2)); [EOL]     context.getValue("add($myList, 'hello')"); [EOL]     assertEquals("After adding an element", 2, list.size()); [EOL]     JXPathContext context = JXPathContext.newContext(new ArrayList()); [EOL]     assertEquals("Extension function on root collection", "0", String.valueOf(context.getValue("size(/)"))); [EOL] }
public void testCollectionMethodCall() { [EOL]     List list = new ArrayList(); [EOL]     list.add("foo"); [EOL]     context.getVariables().declareVariable("myList", list); [EOL]     assertXPathValue(context, "size($myList)", new Integer(1)); [EOL]     assertXPathValue(context, "size(beans)", new Integer(2)); [EOL]     context.getValue("add($myList, 'hello')"); [EOL]     assertEquals("After adding an element", 2, list.size()); [EOL]     JXPathContext context = JXPathContext.newContext(new ArrayList()); [EOL]     assertEquals("Extension function on root collection", "0", String.valueOf(context.getValue("size(/)"))); [EOL] }
public void testCollectionMethodCall() { [EOL]     List list = new ArrayList(); [EOL]     list.add("foo"); [EOL]     context.getVariables().declareVariable("myList", list); [EOL]     assertXPathValue(context, "size($myList)", new Integer(1)); [EOL]     assertXPathValue(context, "size(beans)", new Integer(2)); [EOL]     context.getValue("add($myList, 'hello')"); [EOL]     assertEquals("After adding an element", 2, list.size()); [EOL]     JXPathContext context = JXPathContext.newContext(new ArrayList()); [EOL]     assertEquals("Extension function on root collection", "0", String.valueOf(context.getValue("size(/)"))); [EOL] }
public void testFunctionsLastAndPosition() { [EOL]     assertXPathPointer(context, "vendor//location[last()]", "/vendor[1]/location[2]"); [EOL] }
public void testFunctionsLastAndPosition() { [EOL]     assertXPathPointer(context, "vendor//location[last()]", "/vendor[1]/location[2]"); [EOL] }
public void testFunctionsLastAndPosition() { [EOL]     assertXPathPointer(context, "vendor//location[last()]", "/vendor[1]/location[2]"); [EOL] }
public void testFunctionsLastAndPosition() { [EOL]     assertXPathPointer(context, "vendor//location[last()]", "/vendor[1]/location[2]"); [EOL] }
public void testFunctionsLastAndPosition() { [EOL]     assertXPathPointer(context, "vendor//location[last()]", "/vendor[1]/location[2]"); [EOL] }
public void testFunctionsLastAndPosition() { [EOL]     assertXPathPointer(context, "vendor//location[last()]", "/vendor[1]/location[2]"); [EOL] }
public void testFunctionsLastAndPosition() { [EOL]     assertXPathPointer(context, "vendor//location[last()]", "/vendor[1]/location[2]"); [EOL] }
public void testFunctionsLastAndPosition() { [EOL]     assertXPathPointer(context, "vendor//location[last()]", "/vendor[1]/location[2]"); [EOL] }
public void testFunctionsLastAndPosition() { [EOL]     assertXPathPointer(context, "vendor//location[last()]", "/vendor[1]/location[2]"); [EOL] }
public void testFunctionsLastAndPosition() { [EOL]     assertXPathPointer(context, "vendor//location[last()]", "/vendor[1]/location[2]"); [EOL] }
public void testFunctionsLastAndPosition() { [EOL]     assertXPathPointer(context, "vendor//location[last()]", "/vendor[1]/location[2]"); [EOL] }
public void testAllocation() { [EOL]     assertXPathValue(context, "string(test:new())", "foo=0; bar=null"); [EOL]     assertXPathValue(context, "string(jxpathtest:TestFunctions.new())", "foo=0; bar=null"); [EOL]     assertXPathValue(context, "string(" + TestFunctions.class.getName() + ".new())", "foo=0; bar=null"); [EOL]     assertXPathValue(context, "string(test:new(3, 'baz'))", "foo=3; bar=baz"); [EOL]     assertXPathValue(context, "string(test:new('3', 4))", "foo=3; bar=4.0"); [EOL]     context.getVariables().declareVariable("A", "baz"); [EOL]     assertXPathValue(context, "string(test:new(2, $A, false))", "foo=2; bar=baz"); [EOL] }
public void testAllocation() { [EOL]     assertXPathValue(context, "string(test:new())", "foo=0; bar=null"); [EOL]     assertXPathValue(context, "string(jxpathtest:TestFunctions.new())", "foo=0; bar=null"); [EOL]     assertXPathValue(context, "string(" + TestFunctions.class.getName() + ".new())", "foo=0; bar=null"); [EOL]     assertXPathValue(context, "string(test:new(3, 'baz'))", "foo=3; bar=baz"); [EOL]     assertXPathValue(context, "string(test:new('3', 4))", "foo=3; bar=4.0"); [EOL]     context.getVariables().declareVariable("A", "baz"); [EOL]     assertXPathValue(context, "string(test:new(2, $A, false))", "foo=2; bar=baz"); [EOL] }
public void testAllocation() { [EOL]     assertXPathValue(context, "string(test:new())", "foo=0; bar=null"); [EOL]     assertXPathValue(context, "string(jxpathtest:TestFunctions.new())", "foo=0; bar=null"); [EOL]     assertXPathValue(context, "string(" + TestFunctions.class.getName() + ".new())", "foo=0; bar=null"); [EOL]     assertXPathValue(context, "string(test:new(3, 'baz'))", "foo=3; bar=baz"); [EOL]     assertXPathValue(context, "string(test:new('3', 4))", "foo=3; bar=4.0"); [EOL]     context.getVariables().declareVariable("A", "baz"); [EOL]     assertXPathValue(context, "string(test:new(2, $A, false))", "foo=2; bar=baz"); [EOL] }
public void testAllocation() { [EOL]     assertXPathValue(context, "string(test:new())", "foo=0; bar=null"); [EOL]     assertXPathValue(context, "string(jxpathtest:TestFunctions.new())", "foo=0; bar=null"); [EOL]     assertXPathValue(context, "string(" + TestFunctions.class.getName() + ".new())", "foo=0; bar=null"); [EOL]     assertXPathValue(context, "string(test:new(3, 'baz'))", "foo=3; bar=baz"); [EOL]     assertXPathValue(context, "string(test:new('3', 4))", "foo=3; bar=4.0"); [EOL]     context.getVariables().declareVariable("A", "baz"); [EOL]     assertXPathValue(context, "string(test:new(2, $A, false))", "foo=2; bar=baz"); [EOL] }
public void testAllocation() { [EOL]     assertXPathValue(context, "string(test:new())", "foo=0; bar=null"); [EOL]     assertXPathValue(context, "string(jxpathtest:TestFunctions.new())", "foo=0; bar=null"); [EOL]     assertXPathValue(context, "string(" + TestFunctions.class.getName() + ".new())", "foo=0; bar=null"); [EOL]     assertXPathValue(context, "string(test:new(3, 'baz'))", "foo=3; bar=baz"); [EOL]     assertXPathValue(context, "string(test:new('3', 4))", "foo=3; bar=4.0"); [EOL]     context.getVariables().declareVariable("A", "baz"); [EOL]     assertXPathValue(context, "string(test:new(2, $A, false))", "foo=2; bar=baz"); [EOL] }
public void testStaticMethodCall() { [EOL]     assertXPathValue(context, "string(test:build(8, 'goober'))", "foo=8; bar=goober"); [EOL]     assertXPathValue(context, "string(jxpathtest:TestFunctions.build(8, 'goober'))", "foo=8; bar=goober"); [EOL]     assertXPathValue(context, "string(" + TestFunctions.class.getName() + ".build(8, 'goober'))", "foo=8; bar=goober"); [EOL]     assertXPathValue(context, "string(test:increment(8))", "9"); [EOL]     assertXPathValue(context, "test:string(/beans/name)", "Name 1"); [EOL] }
public void testStaticMethodCall() { [EOL]     assertXPathValue(context, "string(test:build(8, 'goober'))", "foo=8; bar=goober"); [EOL]     assertXPathValue(context, "string(jxpathtest:TestFunctions.build(8, 'goober'))", "foo=8; bar=goober"); [EOL]     assertXPathValue(context, "string(" + TestFunctions.class.getName() + ".build(8, 'goober'))", "foo=8; bar=goober"); [EOL]     assertXPathValue(context, "string(test:increment(8))", "9"); [EOL]     assertXPathValue(context, "test:string(/beans/name)", "Name 1"); [EOL] }
public void testStaticMethodCall() { [EOL]     assertXPathValue(context, "string(test:build(8, 'goober'))", "foo=8; bar=goober"); [EOL]     assertXPathValue(context, "string(jxpathtest:TestFunctions.build(8, 'goober'))", "foo=8; bar=goober"); [EOL]     assertXPathValue(context, "string(" + TestFunctions.class.getName() + ".build(8, 'goober'))", "foo=8; bar=goober"); [EOL]     assertXPathValue(context, "string(test:increment(8))", "9"); [EOL]     assertXPathValue(context, "test:string(/beans/name)", "Name 1"); [EOL] }
public void testStaticMethodCall() { [EOL]     assertXPathValue(context, "string(test:build(8, 'goober'))", "foo=8; bar=goober"); [EOL]     assertXPathValue(context, "string(jxpathtest:TestFunctions.build(8, 'goober'))", "foo=8; bar=goober"); [EOL]     assertXPathValue(context, "string(" + TestFunctions.class.getName() + ".build(8, 'goober'))", "foo=8; bar=goober"); [EOL]     assertXPathValue(context, "string(test:increment(8))", "9"); [EOL]     assertXPathValue(context, "test:string(/beans/name)", "Name 1"); [EOL] }
public void testStaticMethodCall() { [EOL]     assertXPathValue(context, "string(test:build(8, 'goober'))", "foo=8; bar=goober"); [EOL]     assertXPathValue(context, "string(jxpathtest:TestFunctions.build(8, 'goober'))", "foo=8; bar=goober"); [EOL]     assertXPathValue(context, "string(" + TestFunctions.class.getName() + ".build(8, 'goober'))", "foo=8; bar=goober"); [EOL]     assertXPathValue(context, "string(test:increment(8))", "9"); [EOL]     assertXPathValue(context, "test:string(/beans/name)", "Name 1"); [EOL] }
public void testStaticMethodCall() { [EOL]     assertXPathValue(context, "string(test:build(8, 'goober'))", "foo=8; bar=goober"); [EOL]     assertXPathValue(context, "string(jxpathtest:TestFunctions.build(8, 'goober'))", "foo=8; bar=goober"); [EOL]     assertXPathValue(context, "string(" + TestFunctions.class.getName() + ".build(8, 'goober'))", "foo=8; bar=goober"); [EOL]     assertXPathValue(context, "string(test:increment(8))", "9"); [EOL]     assertXPathValue(context, "test:string(/beans/name)", "Name 1"); [EOL] }
public void testStaticMethodCall() { [EOL]     assertXPathValue(context, "string(test:build(8, 'goober'))", "foo=8; bar=goober"); [EOL]     assertXPathValue(context, "string(jxpathtest:TestFunctions.build(8, 'goober'))", "foo=8; bar=goober"); [EOL]     assertXPathValue(context, "string(" + TestFunctions.class.getName() + ".build(8, 'goober'))", "foo=8; bar=goober"); [EOL]     assertXPathValue(context, "string(test:increment(8))", "9"); [EOL]     assertXPathValue(context, "test:string(/beans/name)", "Name 1"); [EOL] }
public void testCollectionMethodCall() { [EOL]     List list = new ArrayList(); [EOL]     list.add("foo"); [EOL]     context.getVariables().declareVariable("myList", list); [EOL]     assertXPathValue(context, "size($myList)", new Integer(1)); [EOL]     assertXPathValue(context, "size(beans)", new Integer(2)); [EOL]     context.getValue("add($myList, 'hello')"); [EOL]     assertEquals("After adding an element", 2, list.size()); [EOL]     JXPathContext context = JXPathContext.newContext(new ArrayList()); [EOL]     assertEquals("Extension function on root collection", "0", String.valueOf(context.getValue("size(/)"))); [EOL] }
public void testCollectionMethodCall() { [EOL]     List list = new ArrayList(); [EOL]     list.add("foo"); [EOL]     context.getVariables().declareVariable("myList", list); [EOL]     assertXPathValue(context, "size($myList)", new Integer(1)); [EOL]     assertXPathValue(context, "size(beans)", new Integer(2)); [EOL]     context.getValue("add($myList, 'hello')"); [EOL]     assertEquals("After adding an element", 2, list.size()); [EOL]     JXPathContext context = JXPathContext.newContext(new ArrayList()); [EOL]     assertEquals("Extension function on root collection", "0", String.valueOf(context.getValue("size(/)"))); [EOL] }
public void testCollectionMethodCall() { [EOL]     List list = new ArrayList(); [EOL]     list.add("foo"); [EOL]     context.getVariables().declareVariable("myList", list); [EOL]     assertXPathValue(context, "size($myList)", new Integer(1)); [EOL]     assertXPathValue(context, "size(beans)", new Integer(2)); [EOL]     context.getValue("add($myList, 'hello')"); [EOL]     assertEquals("After adding an element", 2, list.size()); [EOL]     JXPathContext context = JXPathContext.newContext(new ArrayList()); [EOL]     assertEquals("Extension function on root collection", "0", String.valueOf(context.getValue("size(/)"))); [EOL] }
public void testCollectionMethodCall() { [EOL]     List list = new ArrayList(); [EOL]     list.add("foo"); [EOL]     context.getVariables().declareVariable("myList", list); [EOL]     assertXPathValue(context, "size($myList)", new Integer(1)); [EOL]     assertXPathValue(context, "size(beans)", new Integer(2)); [EOL]     context.getValue("add($myList, 'hello')"); [EOL]     assertEquals("After adding an element", 2, list.size()); [EOL]     JXPathContext context = JXPathContext.newContext(new ArrayList()); [EOL]     assertEquals("Extension function on root collection", "0", String.valueOf(context.getValue("size(/)"))); [EOL] }
public void testCollectionMethodCall() { [EOL]     List list = new ArrayList(); [EOL]     list.add("foo"); [EOL]     context.getVariables().declareVariable("myList", list); [EOL]     assertXPathValue(context, "size($myList)", new Integer(1)); [EOL]     assertXPathValue(context, "size(beans)", new Integer(2)); [EOL]     context.getValue("add($myList, 'hello')"); [EOL]     assertEquals("After adding an element", 2, list.size()); [EOL]     JXPathContext context = JXPathContext.newContext(new ArrayList()); [EOL]     assertEquals("Extension function on root collection", "0", String.valueOf(context.getValue("size(/)"))); [EOL] }
public void testAxisAttribute() { [EOL]     assertXPathValue(context, "vendor/location/@id", "100"); [EOL]     assertXPathPointer(context, "vendor/location/@id", "/vendor[1]/location[1]/@id"); [EOL]     assertXPathValueIterator(context, "vendor/location/@id", list("100", "101")); [EOL]     assertXPathValue(context, "vendor/product/price:amount/@price:discount", "10%"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount/@price:discount)", "priceNS"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount/@price:discount)", "discount"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount/@price:discount)", "price:discount"); [EOL]     assertXPathValue(context, "vendor/product/price:amount/@discount", "20%"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount/@discount)", ""); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount/@discount)", "discount"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount/@discount)", "discount"); [EOL]     assertXPathValueIterator(context, "vendor/product/price:amount/@price:*", list("10%")); [EOL]     assertXPathValueIterator(context, "vendor/location[1]/@*", set("100", "", "local")); [EOL]     assertXPathValueIterator(context, "vendor/product/price:amount/@*", list("20%")); [EOL]     assertXPathValue(context, "vendor/location/@manager", ""); [EOL]     assertXPathValueLenient(context, "vendor/location/@missing", null); [EOL]     assertXPathValueLenient(context, "vendor/location/@miss:missing", null); [EOL]     assertXPathValue(context, "vendor/location[@id='101']//street", "Tangerine Drive"); [EOL]     assertXPathValueIterator(context, "/vendor/location[1]/@*[name()!= 'manager']", list("100", "local")); [EOL] }
public void testAxisAttribute() { [EOL]     assertXPathValue(context, "vendor/location/@id", "100"); [EOL]     assertXPathPointer(context, "vendor/location/@id", "/vendor[1]/location[1]/@id"); [EOL]     assertXPathValueIterator(context, "vendor/location/@id", list("100", "101")); [EOL]     assertXPathValue(context, "vendor/product/price:amount/@price:discount", "10%"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount/@price:discount)", "priceNS"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount/@price:discount)", "discount"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount/@price:discount)", "price:discount"); [EOL]     assertXPathValue(context, "vendor/product/price:amount/@discount", "20%"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount/@discount)", ""); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount/@discount)", "discount"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount/@discount)", "discount"); [EOL]     assertXPathValueIterator(context, "vendor/product/price:amount/@price:*", list("10%")); [EOL]     assertXPathValueIterator(context, "vendor/location[1]/@*", set("100", "", "local")); [EOL]     assertXPathValueIterator(context, "vendor/product/price:amount/@*", list("20%")); [EOL]     assertXPathValue(context, "vendor/location/@manager", ""); [EOL]     assertXPathValueLenient(context, "vendor/location/@missing", null); [EOL]     assertXPathValueLenient(context, "vendor/location/@miss:missing", null); [EOL]     assertXPathValue(context, "vendor/location[@id='101']//street", "Tangerine Drive"); [EOL]     assertXPathValueIterator(context, "/vendor/location[1]/@*[name()!= 'manager']", list("100", "local")); [EOL] }
public void testAxisDescendant() { [EOL]     assertXPathValue(context, "//street", "Orchard Road"); [EOL]     assertXPathValue(context, "count(//price:*)", new Double(2)); [EOL]     assertXPathValueIterator(context, "vendor//saleEnds", list("never")); [EOL]     assertXPathValueIterator(context, "vendor//promotion", list("")); [EOL]     assertXPathValueIterator(context, "vendor//saleEnds[../@stores = 'all']", list("never")); [EOL]     assertXPathValueIterator(context, "vendor//promotion[../@stores = 'all']", list("")); [EOL] }
public void testNamespaceMapping() { [EOL]     context.registerNamespace("rate", "priceNS"); [EOL]     context.registerNamespace("goods", "productNS"); [EOL]     assertEquals("Context node namespace resolution", "priceNS", context.getNamespaceURI("price")); [EOL]     assertEquals("Registered namespace resolution", "priceNS", context.getNamespaceURI("rate")); [EOL]     assertXPathValue(context, "count(vendor/product/rate:*)", new Double(2)); [EOL]     assertXPathValueAndPointer(context, "//product:name", "Box of oranges", "/vendor[1]/product[1]/goods:name[1]"); [EOL]     JXPathContext childCtx = JXPathContext.newContext(context, context.getContextBean()); [EOL]     assertXPathValueAndPointer(childCtx, "//product:name", "Box of oranges", "/vendor[1]/product[1]/goods:name[1]"); [EOL]     JXPathContext relativeCtx = context.getRelativeContext(context.getPointer("/vendor")); [EOL]     assertXPathValueAndPointer(relativeCtx, "product/product:name", "Box of oranges", "/vendor[1]/product[1]/goods:name[1]"); [EOL] }
public void testNamespaceMapping() { [EOL]     context.registerNamespace("rate", "priceNS"); [EOL]     context.registerNamespace("goods", "productNS"); [EOL]     assertEquals("Context node namespace resolution", "priceNS", context.getNamespaceURI("price")); [EOL]     assertEquals("Registered namespace resolution", "priceNS", context.getNamespaceURI("rate")); [EOL]     assertXPathValue(context, "count(vendor/product/rate:*)", new Double(2)); [EOL]     assertXPathValueAndPointer(context, "//product:name", "Box of oranges", "/vendor[1]/product[1]/goods:name[1]"); [EOL]     JXPathContext childCtx = JXPathContext.newContext(context, context.getContextBean()); [EOL]     assertXPathValueAndPointer(childCtx, "//product:name", "Box of oranges", "/vendor[1]/product[1]/goods:name[1]"); [EOL]     JXPathContext relativeCtx = context.getRelativeContext(context.getPointer("/vendor")); [EOL]     assertXPathValueAndPointer(relativeCtx, "product/product:name", "Box of oranges", "/vendor[1]/product[1]/goods:name[1]"); [EOL] }
public void testDoPredicateName() { [EOL]     assertValueAndPointer("/nestedBean[@name='int']", new Integer(1), "/nestedBean/int", "BbBb", "BbBbB"); [EOL]     assertValueAndPointer("/.[@name='int']", new Integer(1), "/int", "Bb", "BbB"); [EOL]     assertValueAndPointer("/map[@name='Key1']", "Value 1", "/map[@name='Key1']", "BbDd", "BbDdB"); [EOL]     assertValueAndPointer("/nestedBean[@name='strings']", bean.getNestedBean().getStrings(), "/nestedBean/strings", "BbBb", "BbBbC"); [EOL]     assertNullPointer("/nestedBean[@name='foo']", "/nestedBean[@name='foo']", "BbBn"); [EOL]     assertValueAndPointer("/map[@name='Key3']", bean.getMap().get("Key3"), "/map[@name='Key3']", "BbDd", "BbDdC"); [EOL]     assertNullPointer("/map[@name='foo']", "/map[@name='foo']", "BbDd"); [EOL]     assertValueAndPointer("/list[@name='fruitco']", context.getValue("/vendor"), "/list[5]", "BbCM"); [EOL]     assertValueAndPointer("/map/Key3[@name='key']/name", "Name 9", "/map[@name='Key3'][4][@name='key']/name", "BbDdCDdBb", "BbDdCDdBbB"); [EOL]     assertValueAndPointer("map/Key3[@name='fruitco']", context.getValue("/vendor"), "/map[@name='Key3'][3]", "BbDdCM"); [EOL]     assertValueAndPointer("/vendor[@name='fruitco']", context.getValue("/vendor"), "/vendor", "BbM"); [EOL]     assertNullPointer("/vendor[@name='foo']", "/vendor[@name='foo']", "BbMn"); [EOL]     assertNullPointer("/vendor[@name='foo'][3]", "/vendor[@name='foo'][3]", "BbMn"); [EOL]     assertNullPointer("/nestedBean[@name='foo']/bar", "/nestedBean[@name='foo']/bar", "BbBnNn"); [EOL]     assertNullPointer("/map[@name='foo']/bar", "/map[@name='foo']/bar", "BbDdNn"); [EOL]     assertNullPointer("/vendor[@name='foo']/bar", "/vendor[@name='foo']/bar", "BbMnNn"); [EOL]     assertNullPointer("/vendor[@name='foo'][3]/bar", "/vendor[@name='foo'][3]/bar", "BbMnNn"); [EOL]     assertValueAndPointer("/map[@name='Key2'][@name='name']", "Name 6", "/map[@name='Key2']/name", "BbDdBb", "BbDdBbB"); [EOL]     assertValueAndPointer("/map[@name='Key2'][@name='strings'][2]", "String 2", "/map[@name='Key2']/strings[2]", "BbDdBb", "BbDdBbB"); [EOL]     assertValueAndPointer("map[@name='Key5'][@name='key']/name", "Name 9", "/map[@name='Key5'][@name='key']/name", "BbDdDdBb", "BbDdDdBbB"); [EOL]     assertNullPointer("map[@name='Key2'][@name='foo']", "/map[@name='Key2'][@name='foo']", "BbDdBn"); [EOL]     assertNullPointer("map[@name='Key2'][@name='foo'][@name='bar']", "/map[@name='Key2'][@name='foo'][@name='bar']", "BbDdBnNn"); [EOL]     assertValueAndPointer("map[@name='Key4'][@name='fruitco']", context.getValue("/vendor"), "/map[@name='Key4']", "BbDdM"); [EOL] }
public void testDoPredicateName() { [EOL]     assertValueAndPointer("/nestedBean[@name='int']", new Integer(1), "/nestedBean/int", "BbBb", "BbBbB"); [EOL]     assertValueAndPointer("/.[@name='int']", new Integer(1), "/int", "Bb", "BbB"); [EOL]     assertValueAndPointer("/map[@name='Key1']", "Value 1", "/map[@name='Key1']", "BbDd", "BbDdB"); [EOL]     assertValueAndPointer("/nestedBean[@name='strings']", bean.getNestedBean().getStrings(), "/nestedBean/strings", "BbBb", "BbBbC"); [EOL]     assertNullPointer("/nestedBean[@name='foo']", "/nestedBean[@name='foo']", "BbBn"); [EOL]     assertValueAndPointer("/map[@name='Key3']", bean.getMap().get("Key3"), "/map[@name='Key3']", "BbDd", "BbDdC"); [EOL]     assertNullPointer("/map[@name='foo']", "/map[@name='foo']", "BbDd"); [EOL]     assertValueAndPointer("/list[@name='fruitco']", context.getValue("/vendor"), "/list[5]", "BbCM"); [EOL]     assertValueAndPointer("/map/Key3[@name='key']/name", "Name 9", "/map[@name='Key3'][4][@name='key']/name", "BbDdCDdBb", "BbDdCDdBbB"); [EOL]     assertValueAndPointer("map/Key3[@name='fruitco']", context.getValue("/vendor"), "/map[@name='Key3'][3]", "BbDdCM"); [EOL]     assertValueAndPointer("/vendor[@name='fruitco']", context.getValue("/vendor"), "/vendor", "BbM"); [EOL]     assertNullPointer("/vendor[@name='foo']", "/vendor[@name='foo']", "BbMn"); [EOL]     assertNullPointer("/vendor[@name='foo'][3]", "/vendor[@name='foo'][3]", "BbMn"); [EOL]     assertNullPointer("/nestedBean[@name='foo']/bar", "/nestedBean[@name='foo']/bar", "BbBnNn"); [EOL]     assertNullPointer("/map[@name='foo']/bar", "/map[@name='foo']/bar", "BbDdNn"); [EOL]     assertNullPointer("/vendor[@name='foo']/bar", "/vendor[@name='foo']/bar", "BbMnNn"); [EOL]     assertNullPointer("/vendor[@name='foo'][3]/bar", "/vendor[@name='foo'][3]/bar", "BbMnNn"); [EOL]     assertValueAndPointer("/map[@name='Key2'][@name='name']", "Name 6", "/map[@name='Key2']/name", "BbDdBb", "BbDdBbB"); [EOL]     assertValueAndPointer("/map[@name='Key2'][@name='strings'][2]", "String 2", "/map[@name='Key2']/strings[2]", "BbDdBb", "BbDdBbB"); [EOL]     assertValueAndPointer("map[@name='Key5'][@name='key']/name", "Name 9", "/map[@name='Key5'][@name='key']/name", "BbDdDdBb", "BbDdDdBbB"); [EOL]     assertNullPointer("map[@name='Key2'][@name='foo']", "/map[@name='Key2'][@name='foo']", "BbDdBn"); [EOL]     assertNullPointer("map[@name='Key2'][@name='foo'][@name='bar']", "/map[@name='Key2'][@name='foo'][@name='bar']", "BbDdBnNn"); [EOL]     assertValueAndPointer("map[@name='Key4'][@name='fruitco']", context.getValue("/vendor"), "/map[@name='Key4']", "BbDdM"); [EOL] }
public void testDoPredicateName() { [EOL]     assertValueAndPointer("/nestedBean[@name='int']", new Integer(1), "/nestedBean/int", "BbBb", "BbBbB"); [EOL]     assertValueAndPointer("/.[@name='int']", new Integer(1), "/int", "Bb", "BbB"); [EOL]     assertValueAndPointer("/map[@name='Key1']", "Value 1", "/map[@name='Key1']", "BbDd", "BbDdB"); [EOL]     assertValueAndPointer("/nestedBean[@name='strings']", bean.getNestedBean().getStrings(), "/nestedBean/strings", "BbBb", "BbBbC"); [EOL]     assertNullPointer("/nestedBean[@name='foo']", "/nestedBean[@name='foo']", "BbBn"); [EOL]     assertValueAndPointer("/map[@name='Key3']", bean.getMap().get("Key3"), "/map[@name='Key3']", "BbDd", "BbDdC"); [EOL]     assertNullPointer("/map[@name='foo']", "/map[@name='foo']", "BbDd"); [EOL]     assertValueAndPointer("/list[@name='fruitco']", context.getValue("/vendor"), "/list[5]", "BbCM"); [EOL]     assertValueAndPointer("/map/Key3[@name='key']/name", "Name 9", "/map[@name='Key3'][4][@name='key']/name", "BbDdCDdBb", "BbDdCDdBbB"); [EOL]     assertValueAndPointer("map/Key3[@name='fruitco']", context.getValue("/vendor"), "/map[@name='Key3'][3]", "BbDdCM"); [EOL]     assertValueAndPointer("/vendor[@name='fruitco']", context.getValue("/vendor"), "/vendor", "BbM"); [EOL]     assertNullPointer("/vendor[@name='foo']", "/vendor[@name='foo']", "BbMn"); [EOL]     assertNullPointer("/vendor[@name='foo'][3]", "/vendor[@name='foo'][3]", "BbMn"); [EOL]     assertNullPointer("/nestedBean[@name='foo']/bar", "/nestedBean[@name='foo']/bar", "BbBnNn"); [EOL]     assertNullPointer("/map[@name='foo']/bar", "/map[@name='foo']/bar", "BbDdNn"); [EOL]     assertNullPointer("/vendor[@name='foo']/bar", "/vendor[@name='foo']/bar", "BbMnNn"); [EOL]     assertNullPointer("/vendor[@name='foo'][3]/bar", "/vendor[@name='foo'][3]/bar", "BbMnNn"); [EOL]     assertValueAndPointer("/map[@name='Key2'][@name='name']", "Name 6", "/map[@name='Key2']/name", "BbDdBb", "BbDdBbB"); [EOL]     assertValueAndPointer("/map[@name='Key2'][@name='strings'][2]", "String 2", "/map[@name='Key2']/strings[2]", "BbDdBb", "BbDdBbB"); [EOL]     assertValueAndPointer("map[@name='Key5'][@name='key']/name", "Name 9", "/map[@name='Key5'][@name='key']/name", "BbDdDdBb", "BbDdDdBbB"); [EOL]     assertNullPointer("map[@name='Key2'][@name='foo']", "/map[@name='Key2'][@name='foo']", "BbDdBn"); [EOL]     assertNullPointer("map[@name='Key2'][@name='foo'][@name='bar']", "/map[@name='Key2'][@name='foo'][@name='bar']", "BbDdBnNn"); [EOL]     assertValueAndPointer("map[@name='Key4'][@name='fruitco']", context.getValue("/vendor"), "/map[@name='Key4']", "BbDdM"); [EOL] }
public void testDoPredicateName() { [EOL]     assertValueAndPointer("/nestedBean[@name='int']", new Integer(1), "/nestedBean/int", "BbBb", "BbBbB"); [EOL]     assertValueAndPointer("/.[@name='int']", new Integer(1), "/int", "Bb", "BbB"); [EOL]     assertValueAndPointer("/map[@name='Key1']", "Value 1", "/map[@name='Key1']", "BbDd", "BbDdB"); [EOL]     assertValueAndPointer("/nestedBean[@name='strings']", bean.getNestedBean().getStrings(), "/nestedBean/strings", "BbBb", "BbBbC"); [EOL]     assertNullPointer("/nestedBean[@name='foo']", "/nestedBean[@name='foo']", "BbBn"); [EOL]     assertValueAndPointer("/map[@name='Key3']", bean.getMap().get("Key3"), "/map[@name='Key3']", "BbDd", "BbDdC"); [EOL]     assertNullPointer("/map[@name='foo']", "/map[@name='foo']", "BbDd"); [EOL]     assertValueAndPointer("/list[@name='fruitco']", context.getValue("/vendor"), "/list[5]", "BbCM"); [EOL]     assertValueAndPointer("/map/Key3[@name='key']/name", "Name 9", "/map[@name='Key3'][4][@name='key']/name", "BbDdCDdBb", "BbDdCDdBbB"); [EOL]     assertValueAndPointer("map/Key3[@name='fruitco']", context.getValue("/vendor"), "/map[@name='Key3'][3]", "BbDdCM"); [EOL]     assertValueAndPointer("/vendor[@name='fruitco']", context.getValue("/vendor"), "/vendor", "BbM"); [EOL]     assertNullPointer("/vendor[@name='foo']", "/vendor[@name='foo']", "BbMn"); [EOL]     assertNullPointer("/vendor[@name='foo'][3]", "/vendor[@name='foo'][3]", "BbMn"); [EOL]     assertNullPointer("/nestedBean[@name='foo']/bar", "/nestedBean[@name='foo']/bar", "BbBnNn"); [EOL]     assertNullPointer("/map[@name='foo']/bar", "/map[@name='foo']/bar", "BbDdNn"); [EOL]     assertNullPointer("/vendor[@name='foo']/bar", "/vendor[@name='foo']/bar", "BbMnNn"); [EOL]     assertNullPointer("/vendor[@name='foo'][3]/bar", "/vendor[@name='foo'][3]/bar", "BbMnNn"); [EOL]     assertValueAndPointer("/map[@name='Key2'][@name='name']", "Name 6", "/map[@name='Key2']/name", "BbDdBb", "BbDdBbB"); [EOL]     assertValueAndPointer("/map[@name='Key2'][@name='strings'][2]", "String 2", "/map[@name='Key2']/strings[2]", "BbDdBb", "BbDdBbB"); [EOL]     assertValueAndPointer("map[@name='Key5'][@name='key']/name", "Name 9", "/map[@name='Key5'][@name='key']/name", "BbDdDdBb", "BbDdDdBbB"); [EOL]     assertNullPointer("map[@name='Key2'][@name='foo']", "/map[@name='Key2'][@name='foo']", "BbDdBn"); [EOL]     assertNullPointer("map[@name='Key2'][@name='foo'][@name='bar']", "/map[@name='Key2'][@name='foo'][@name='bar']", "BbDdBnNn"); [EOL]     assertValueAndPointer("map[@name='Key4'][@name='fruitco']", context.getValue("/vendor"), "/map[@name='Key4']", "BbDdM"); [EOL] }
public void testDoPredicateName() { [EOL]     assertValueAndPointer("/nestedBean[@name='int']", new Integer(1), "/nestedBean/int", "BbBb", "BbBbB"); [EOL]     assertValueAndPointer("/.[@name='int']", new Integer(1), "/int", "Bb", "BbB"); [EOL]     assertValueAndPointer("/map[@name='Key1']", "Value 1", "/map[@name='Key1']", "BbDd", "BbDdB"); [EOL]     assertValueAndPointer("/nestedBean[@name='strings']", bean.getNestedBean().getStrings(), "/nestedBean/strings", "BbBb", "BbBbC"); [EOL]     assertNullPointer("/nestedBean[@name='foo']", "/nestedBean[@name='foo']", "BbBn"); [EOL]     assertValueAndPointer("/map[@name='Key3']", bean.getMap().get("Key3"), "/map[@name='Key3']", "BbDd", "BbDdC"); [EOL]     assertNullPointer("/map[@name='foo']", "/map[@name='foo']", "BbDd"); [EOL]     assertValueAndPointer("/list[@name='fruitco']", context.getValue("/vendor"), "/list[5]", "BbCM"); [EOL]     assertValueAndPointer("/map/Key3[@name='key']/name", "Name 9", "/map[@name='Key3'][4][@name='key']/name", "BbDdCDdBb", "BbDdCDdBbB"); [EOL]     assertValueAndPointer("map/Key3[@name='fruitco']", context.getValue("/vendor"), "/map[@name='Key3'][3]", "BbDdCM"); [EOL]     assertValueAndPointer("/vendor[@name='fruitco']", context.getValue("/vendor"), "/vendor", "BbM"); [EOL]     assertNullPointer("/vendor[@name='foo']", "/vendor[@name='foo']", "BbMn"); [EOL]     assertNullPointer("/vendor[@name='foo'][3]", "/vendor[@name='foo'][3]", "BbMn"); [EOL]     assertNullPointer("/nestedBean[@name='foo']/bar", "/nestedBean[@name='foo']/bar", "BbBnNn"); [EOL]     assertNullPointer("/map[@name='foo']/bar", "/map[@name='foo']/bar", "BbDdNn"); [EOL]     assertNullPointer("/vendor[@name='foo']/bar", "/vendor[@name='foo']/bar", "BbMnNn"); [EOL]     assertNullPointer("/vendor[@name='foo'][3]/bar", "/vendor[@name='foo'][3]/bar", "BbMnNn"); [EOL]     assertValueAndPointer("/map[@name='Key2'][@name='name']", "Name 6", "/map[@name='Key2']/name", "BbDdBb", "BbDdBbB"); [EOL]     assertValueAndPointer("/map[@name='Key2'][@name='strings'][2]", "String 2", "/map[@name='Key2']/strings[2]", "BbDdBb", "BbDdBbB"); [EOL]     assertValueAndPointer("map[@name='Key5'][@name='key']/name", "Name 9", "/map[@name='Key5'][@name='key']/name", "BbDdDdBb", "BbDdDdBbB"); [EOL]     assertNullPointer("map[@name='Key2'][@name='foo']", "/map[@name='Key2'][@name='foo']", "BbDdBn"); [EOL]     assertNullPointer("map[@name='Key2'][@name='foo'][@name='bar']", "/map[@name='Key2'][@name='foo'][@name='bar']", "BbDdBnNn"); [EOL]     assertValueAndPointer("map[@name='Key4'][@name='fruitco']", context.getValue("/vendor"), "/map[@name='Key4']", "BbDdM"); [EOL] }
public void testAllocation() { [EOL]     assertXPathValue(context, "string(test:new())", "foo=0; bar=null"); [EOL]     assertXPathValue(context, "string(jxpathtest:TestFunctions.new())", "foo=0; bar=null"); [EOL]     assertXPathValue(context, "string(" + TestFunctions.class.getName() + ".new())", "foo=0; bar=null"); [EOL]     assertXPathValue(context, "string(test:new(3, 'baz'))", "foo=3; bar=baz"); [EOL]     assertXPathValue(context, "string(test:new('3', 4))", "foo=3; bar=4.0"); [EOL]     context.getVariables().declareVariable("A", "baz"); [EOL]     assertXPathValue(context, "string(test:new(2, $A, false))", "foo=2; bar=baz"); [EOL] }
public void testAllocation() { [EOL]     assertXPathValue(context, "string(test:new())", "foo=0; bar=null"); [EOL]     assertXPathValue(context, "string(jxpathtest:TestFunctions.new())", "foo=0; bar=null"); [EOL]     assertXPathValue(context, "string(" + TestFunctions.class.getName() + ".new())", "foo=0; bar=null"); [EOL]     assertXPathValue(context, "string(test:new(3, 'baz'))", "foo=3; bar=baz"); [EOL]     assertXPathValue(context, "string(test:new('3', 4))", "foo=3; bar=4.0"); [EOL]     context.getVariables().declareVariable("A", "baz"); [EOL]     assertXPathValue(context, "string(test:new(2, $A, false))", "foo=2; bar=baz"); [EOL] }
public void testAllocation() { [EOL]     assertXPathValue(context, "string(test:new())", "foo=0; bar=null"); [EOL]     assertXPathValue(context, "string(jxpathtest:TestFunctions.new())", "foo=0; bar=null"); [EOL]     assertXPathValue(context, "string(" + TestFunctions.class.getName() + ".new())", "foo=0; bar=null"); [EOL]     assertXPathValue(context, "string(test:new(3, 'baz'))", "foo=3; bar=baz"); [EOL]     assertXPathValue(context, "string(test:new('3', 4))", "foo=3; bar=4.0"); [EOL]     context.getVariables().declareVariable("A", "baz"); [EOL]     assertXPathValue(context, "string(test:new(2, $A, false))", "foo=2; bar=baz"); [EOL] }
public void testAllocation() { [EOL]     assertXPathValue(context, "string(test:new())", "foo=0; bar=null"); [EOL]     assertXPathValue(context, "string(jxpathtest:TestFunctions.new())", "foo=0; bar=null"); [EOL]     assertXPathValue(context, "string(" + TestFunctions.class.getName() + ".new())", "foo=0; bar=null"); [EOL]     assertXPathValue(context, "string(test:new(3, 'baz'))", "foo=3; bar=baz"); [EOL]     assertXPathValue(context, "string(test:new('3', 4))", "foo=3; bar=4.0"); [EOL]     context.getVariables().declareVariable("A", "baz"); [EOL]     assertXPathValue(context, "string(test:new(2, $A, false))", "foo=2; bar=baz"); [EOL] }
public void testAllocation() { [EOL]     assertXPathValue(context, "string(test:new())", "foo=0; bar=null"); [EOL]     assertXPathValue(context, "string(jxpathtest:TestFunctions.new())", "foo=0; bar=null"); [EOL]     assertXPathValue(context, "string(" + TestFunctions.class.getName() + ".new())", "foo=0; bar=null"); [EOL]     assertXPathValue(context, "string(test:new(3, 'baz'))", "foo=3; bar=baz"); [EOL]     assertXPathValue(context, "string(test:new('3', 4))", "foo=3; bar=4.0"); [EOL]     context.getVariables().declareVariable("A", "baz"); [EOL]     assertXPathValue(context, "string(test:new(2, $A, false))", "foo=2; bar=baz"); [EOL] }
public void testAxisAttribute() { [EOL]     assertXPathValue(context, "vendor/location/@id", "100"); [EOL]     assertXPathPointer(context, "vendor/location/@id", "/vendor[1]/location[1]/@id"); [EOL]     assertXPathValueIterator(context, "vendor/location/@id", list("100", "101")); [EOL]     assertXPathValue(context, "vendor/product/price:amount/@price:discount", "10%"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount/@price:discount)", "priceNS"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount/@price:discount)", "discount"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount/@price:discount)", "price:discount"); [EOL]     assertXPathValue(context, "vendor/product/price:amount/@discount", "20%"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount/@discount)", ""); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount/@discount)", "discount"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount/@discount)", "discount"); [EOL]     assertXPathValueIterator(context, "vendor/product/price:amount/@price:*", list("10%")); [EOL]     assertXPathValueIterator(context, "vendor/location[1]/@*", set("100", "", "local")); [EOL]     assertXPathValueIterator(context, "vendor/product/price:amount/@*", list("20%")); [EOL]     assertXPathValue(context, "vendor/location/@manager", ""); [EOL]     assertXPathValueLenient(context, "vendor/location/@missing", null); [EOL]     assertXPathValueLenient(context, "vendor/location/@miss:missing", null); [EOL]     assertXPathValue(context, "vendor/location[@id='101']//street", "Tangerine Drive"); [EOL]     assertXPathValueIterator(context, "/vendor/location[1]/@*[name()!= 'manager']", list("100", "local")); [EOL] }
public void testAxisAttribute() { [EOL]     assertXPathValue(context, "vendor/location/@id", "100"); [EOL]     assertXPathPointer(context, "vendor/location/@id", "/vendor[1]/location[1]/@id"); [EOL]     assertXPathValueIterator(context, "vendor/location/@id", list("100", "101")); [EOL]     assertXPathValue(context, "vendor/product/price:amount/@price:discount", "10%"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount/@price:discount)", "priceNS"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount/@price:discount)", "discount"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount/@price:discount)", "price:discount"); [EOL]     assertXPathValue(context, "vendor/product/price:amount/@discount", "20%"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount/@discount)", ""); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount/@discount)", "discount"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount/@discount)", "discount"); [EOL]     assertXPathValueIterator(context, "vendor/product/price:amount/@price:*", list("10%")); [EOL]     assertXPathValueIterator(context, "vendor/location[1]/@*", set("100", "", "local")); [EOL]     assertXPathValueIterator(context, "vendor/product/price:amount/@*", list("20%")); [EOL]     assertXPathValue(context, "vendor/location/@manager", ""); [EOL]     assertXPathValueLenient(context, "vendor/location/@missing", null); [EOL]     assertXPathValueLenient(context, "vendor/location/@miss:missing", null); [EOL]     assertXPathValue(context, "vendor/location[@id='101']//street", "Tangerine Drive"); [EOL]     assertXPathValueIterator(context, "/vendor/location[1]/@*[name()!= 'manager']", list("100", "local")); [EOL] }
public void testAxisAttribute() { [EOL]     assertXPathValue(context, "vendor/location/@id", "100"); [EOL]     assertXPathPointer(context, "vendor/location/@id", "/vendor[1]/location[1]/@id"); [EOL]     assertXPathValueIterator(context, "vendor/location/@id", list("100", "101")); [EOL]     assertXPathValue(context, "vendor/product/price:amount/@price:discount", "10%"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount/@price:discount)", "priceNS"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount/@price:discount)", "discount"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount/@price:discount)", "price:discount"); [EOL]     assertXPathValue(context, "vendor/product/price:amount/@discount", "20%"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount/@discount)", ""); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount/@discount)", "discount"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount/@discount)", "discount"); [EOL]     assertXPathValueIterator(context, "vendor/product/price:amount/@price:*", list("10%")); [EOL]     assertXPathValueIterator(context, "vendor/location[1]/@*", set("100", "", "local")); [EOL]     assertXPathValueIterator(context, "vendor/product/price:amount/@*", list("20%")); [EOL]     assertXPathValue(context, "vendor/location/@manager", ""); [EOL]     assertXPathValueLenient(context, "vendor/location/@missing", null); [EOL]     assertXPathValueLenient(context, "vendor/location/@miss:missing", null); [EOL]     assertXPathValue(context, "vendor/location[@id='101']//street", "Tangerine Drive"); [EOL]     assertXPathValueIterator(context, "/vendor/location[1]/@*[name()!= 'manager']", list("100", "local")); [EOL] }
public void testAxisAttribute() { [EOL]     assertXPathValue(context, "vendor/location/@id", "100"); [EOL]     assertXPathPointer(context, "vendor/location/@id", "/vendor[1]/location[1]/@id"); [EOL]     assertXPathValueIterator(context, "vendor/location/@id", list("100", "101")); [EOL]     assertXPathValue(context, "vendor/product/price:amount/@price:discount", "10%"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount/@price:discount)", "priceNS"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount/@price:discount)", "discount"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount/@price:discount)", "price:discount"); [EOL]     assertXPathValue(context, "vendor/product/price:amount/@discount", "20%"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount/@discount)", ""); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount/@discount)", "discount"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount/@discount)", "discount"); [EOL]     assertXPathValueIterator(context, "vendor/product/price:amount/@price:*", list("10%")); [EOL]     assertXPathValueIterator(context, "vendor/location[1]/@*", set("100", "", "local")); [EOL]     assertXPathValueIterator(context, "vendor/product/price:amount/@*", list("20%")); [EOL]     assertXPathValue(context, "vendor/location/@manager", ""); [EOL]     assertXPathValueLenient(context, "vendor/location/@missing", null); [EOL]     assertXPathValueLenient(context, "vendor/location/@miss:missing", null); [EOL]     assertXPathValue(context, "vendor/location[@id='101']//street", "Tangerine Drive"); [EOL]     assertXPathValueIterator(context, "/vendor/location[1]/@*[name()!= 'manager']", list("100", "local")); [EOL] }
public void testAxisAttribute() { [EOL]     assertXPathValue(context, "vendor/location/@id", "100"); [EOL]     assertXPathPointer(context, "vendor/location/@id", "/vendor[1]/location[1]/@id"); [EOL]     assertXPathValueIterator(context, "vendor/location/@id", list("100", "101")); [EOL]     assertXPathValue(context, "vendor/product/price:amount/@price:discount", "10%"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount/@price:discount)", "priceNS"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount/@price:discount)", "discount"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount/@price:discount)", "price:discount"); [EOL]     assertXPathValue(context, "vendor/product/price:amount/@discount", "20%"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount/@discount)", ""); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount/@discount)", "discount"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount/@discount)", "discount"); [EOL]     assertXPathValueIterator(context, "vendor/product/price:amount/@price:*", list("10%")); [EOL]     assertXPathValueIterator(context, "vendor/location[1]/@*", set("100", "", "local")); [EOL]     assertXPathValueIterator(context, "vendor/product/price:amount/@*", list("20%")); [EOL]     assertXPathValue(context, "vendor/location/@manager", ""); [EOL]     assertXPathValueLenient(context, "vendor/location/@missing", null); [EOL]     assertXPathValueLenient(context, "vendor/location/@miss:missing", null); [EOL]     assertXPathValue(context, "vendor/location[@id='101']//street", "Tangerine Drive"); [EOL]     assertXPathValueIterator(context, "/vendor/location[1]/@*[name()!= 'manager']", list("100", "local")); [EOL] }
public void testAxisAttribute() { [EOL]     assertXPathValue(context, "vendor/location/@id", "100"); [EOL]     assertXPathPointer(context, "vendor/location/@id", "/vendor[1]/location[1]/@id"); [EOL]     assertXPathValueIterator(context, "vendor/location/@id", list("100", "101")); [EOL]     assertXPathValue(context, "vendor/product/price:amount/@price:discount", "10%"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount/@price:discount)", "priceNS"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount/@price:discount)", "discount"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount/@price:discount)", "price:discount"); [EOL]     assertXPathValue(context, "vendor/product/price:amount/@discount", "20%"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount/@discount)", ""); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount/@discount)", "discount"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount/@discount)", "discount"); [EOL]     assertXPathValueIterator(context, "vendor/product/price:amount/@price:*", list("10%")); [EOL]     assertXPathValueIterator(context, "vendor/location[1]/@*", set("100", "", "local")); [EOL]     assertXPathValueIterator(context, "vendor/product/price:amount/@*", list("20%")); [EOL]     assertXPathValue(context, "vendor/location/@manager", ""); [EOL]     assertXPathValueLenient(context, "vendor/location/@missing", null); [EOL]     assertXPathValueLenient(context, "vendor/location/@miss:missing", null); [EOL]     assertXPathValue(context, "vendor/location[@id='101']//street", "Tangerine Drive"); [EOL]     assertXPathValueIterator(context, "/vendor/location[1]/@*[name()!= 'manager']", list("100", "local")); [EOL] }
public void testAxisAttribute() { [EOL]     assertXPathValue(context, "vendor/location/@id", "100"); [EOL]     assertXPathPointer(context, "vendor/location/@id", "/vendor[1]/location[1]/@id"); [EOL]     assertXPathValueIterator(context, "vendor/location/@id", list("100", "101")); [EOL]     assertXPathValue(context, "vendor/product/price:amount/@price:discount", "10%"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount/@price:discount)", "priceNS"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount/@price:discount)", "discount"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount/@price:discount)", "price:discount"); [EOL]     assertXPathValue(context, "vendor/product/price:amount/@discount", "20%"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount/@discount)", ""); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount/@discount)", "discount"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount/@discount)", "discount"); [EOL]     assertXPathValueIterator(context, "vendor/product/price:amount/@price:*", list("10%")); [EOL]     assertXPathValueIterator(context, "vendor/location[1]/@*", set("100", "", "local")); [EOL]     assertXPathValueIterator(context, "vendor/product/price:amount/@*", list("20%")); [EOL]     assertXPathValue(context, "vendor/location/@manager", ""); [EOL]     assertXPathValueLenient(context, "vendor/location/@missing", null); [EOL]     assertXPathValueLenient(context, "vendor/location/@miss:missing", null); [EOL]     assertXPathValue(context, "vendor/location[@id='101']//street", "Tangerine Drive"); [EOL]     assertXPathValueIterator(context, "/vendor/location[1]/@*[name()!= 'manager']", list("100", "local")); [EOL] }
public void testAxisAttribute() { [EOL]     assertXPathValue(context, "vendor/location/@id", "100"); [EOL]     assertXPathPointer(context, "vendor/location/@id", "/vendor[1]/location[1]/@id"); [EOL]     assertXPathValueIterator(context, "vendor/location/@id", list("100", "101")); [EOL]     assertXPathValue(context, "vendor/product/price:amount/@price:discount", "10%"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount/@price:discount)", "priceNS"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount/@price:discount)", "discount"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount/@price:discount)", "price:discount"); [EOL]     assertXPathValue(context, "vendor/product/price:amount/@discount", "20%"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount/@discount)", ""); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount/@discount)", "discount"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount/@discount)", "discount"); [EOL]     assertXPathValueIterator(context, "vendor/product/price:amount/@price:*", list("10%")); [EOL]     assertXPathValueIterator(context, "vendor/location[1]/@*", set("100", "", "local")); [EOL]     assertXPathValueIterator(context, "vendor/product/price:amount/@*", list("20%")); [EOL]     assertXPathValue(context, "vendor/location/@manager", ""); [EOL]     assertXPathValueLenient(context, "vendor/location/@missing", null); [EOL]     assertXPathValueLenient(context, "vendor/location/@miss:missing", null); [EOL]     assertXPathValue(context, "vendor/location[@id='101']//street", "Tangerine Drive"); [EOL]     assertXPathValueIterator(context, "/vendor/location[1]/@*[name()!= 'manager']", list("100", "local")); [EOL] }
public void testAxisAttribute() { [EOL]     assertXPathValue(context, "vendor/location/@id", "100"); [EOL]     assertXPathPointer(context, "vendor/location/@id", "/vendor[1]/location[1]/@id"); [EOL]     assertXPathValueIterator(context, "vendor/location/@id", list("100", "101")); [EOL]     assertXPathValue(context, "vendor/product/price:amount/@price:discount", "10%"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount/@price:discount)", "priceNS"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount/@price:discount)", "discount"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount/@price:discount)", "price:discount"); [EOL]     assertXPathValue(context, "vendor/product/price:amount/@discount", "20%"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount/@discount)", ""); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount/@discount)", "discount"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount/@discount)", "discount"); [EOL]     assertXPathValueIterator(context, "vendor/product/price:amount/@price:*", list("10%")); [EOL]     assertXPathValueIterator(context, "vendor/location[1]/@*", set("100", "", "local")); [EOL]     assertXPathValueIterator(context, "vendor/product/price:amount/@*", list("20%")); [EOL]     assertXPathValue(context, "vendor/location/@manager", ""); [EOL]     assertXPathValueLenient(context, "vendor/location/@missing", null); [EOL]     assertXPathValueLenient(context, "vendor/location/@miss:missing", null); [EOL]     assertXPathValue(context, "vendor/location[@id='101']//street", "Tangerine Drive"); [EOL]     assertXPathValueIterator(context, "/vendor/location[1]/@*[name()!= 'manager']", list("100", "local")); [EOL] }
public void testAxisAttribute() { [EOL]     assertXPathValue(context, "vendor/location/@id", "100"); [EOL]     assertXPathPointer(context, "vendor/location/@id", "/vendor[1]/location[1]/@id"); [EOL]     assertXPathValueIterator(context, "vendor/location/@id", list("100", "101")); [EOL]     assertXPathValue(context, "vendor/product/price:amount/@price:discount", "10%"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount/@price:discount)", "priceNS"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount/@price:discount)", "discount"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount/@price:discount)", "price:discount"); [EOL]     assertXPathValue(context, "vendor/product/price:amount/@discount", "20%"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount/@discount)", ""); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount/@discount)", "discount"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount/@discount)", "discount"); [EOL]     assertXPathValueIterator(context, "vendor/product/price:amount/@price:*", list("10%")); [EOL]     assertXPathValueIterator(context, "vendor/location[1]/@*", set("100", "", "local")); [EOL]     assertXPathValueIterator(context, "vendor/product/price:amount/@*", list("20%")); [EOL]     assertXPathValue(context, "vendor/location/@manager", ""); [EOL]     assertXPathValueLenient(context, "vendor/location/@missing", null); [EOL]     assertXPathValueLenient(context, "vendor/location/@miss:missing", null); [EOL]     assertXPathValue(context, "vendor/location[@id='101']//street", "Tangerine Drive"); [EOL]     assertXPathValueIterator(context, "/vendor/location[1]/@*[name()!= 'manager']", list("100", "local")); [EOL] }
public void testAxisAttribute() { [EOL]     assertXPathValue(context, "vendor/location/@id", "100"); [EOL]     assertXPathPointer(context, "vendor/location/@id", "/vendor[1]/location[1]/@id"); [EOL]     assertXPathValueIterator(context, "vendor/location/@id", list("100", "101")); [EOL]     assertXPathValue(context, "vendor/product/price:amount/@price:discount", "10%"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount/@price:discount)", "priceNS"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount/@price:discount)", "discount"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount/@price:discount)", "price:discount"); [EOL]     assertXPathValue(context, "vendor/product/price:amount/@discount", "20%"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount/@discount)", ""); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount/@discount)", "discount"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount/@discount)", "discount"); [EOL]     assertXPathValueIterator(context, "vendor/product/price:amount/@price:*", list("10%")); [EOL]     assertXPathValueIterator(context, "vendor/location[1]/@*", set("100", "", "local")); [EOL]     assertXPathValueIterator(context, "vendor/product/price:amount/@*", list("20%")); [EOL]     assertXPathValue(context, "vendor/location/@manager", ""); [EOL]     assertXPathValueLenient(context, "vendor/location/@missing", null); [EOL]     assertXPathValueLenient(context, "vendor/location/@miss:missing", null); [EOL]     assertXPathValue(context, "vendor/location[@id='101']//street", "Tangerine Drive"); [EOL]     assertXPathValueIterator(context, "/vendor/location[1]/@*[name()!= 'manager']", list("100", "local")); [EOL] }
public void testAxisAttribute() { [EOL]     assertXPathValue(context, "vendor/location/@id", "100"); [EOL]     assertXPathPointer(context, "vendor/location/@id", "/vendor[1]/location[1]/@id"); [EOL]     assertXPathValueIterator(context, "vendor/location/@id", list("100", "101")); [EOL]     assertXPathValue(context, "vendor/product/price:amount/@price:discount", "10%"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount/@price:discount)", "priceNS"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount/@price:discount)", "discount"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount/@price:discount)", "price:discount"); [EOL]     assertXPathValue(context, "vendor/product/price:amount/@discount", "20%"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount/@discount)", ""); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount/@discount)", "discount"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount/@discount)", "discount"); [EOL]     assertXPathValueIterator(context, "vendor/product/price:amount/@price:*", list("10%")); [EOL]     assertXPathValueIterator(context, "vendor/location[1]/@*", set("100", "", "local")); [EOL]     assertXPathValueIterator(context, "vendor/product/price:amount/@*", list("20%")); [EOL]     assertXPathValue(context, "vendor/location/@manager", ""); [EOL]     assertXPathValueLenient(context, "vendor/location/@missing", null); [EOL]     assertXPathValueLenient(context, "vendor/location/@miss:missing", null); [EOL]     assertXPathValue(context, "vendor/location[@id='101']//street", "Tangerine Drive"); [EOL]     assertXPathValueIterator(context, "/vendor/location[1]/@*[name()!= 'manager']", list("100", "local")); [EOL] }
public void testAxisAttribute() { [EOL]     assertXPathValue(context, "vendor/location/@id", "100"); [EOL]     assertXPathPointer(context, "vendor/location/@id", "/vendor[1]/location[1]/@id"); [EOL]     assertXPathValueIterator(context, "vendor/location/@id", list("100", "101")); [EOL]     assertXPathValue(context, "vendor/product/price:amount/@price:discount", "10%"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount/@price:discount)", "priceNS"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount/@price:discount)", "discount"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount/@price:discount)", "price:discount"); [EOL]     assertXPathValue(context, "vendor/product/price:amount/@discount", "20%"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount/@discount)", ""); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount/@discount)", "discount"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount/@discount)", "discount"); [EOL]     assertXPathValueIterator(context, "vendor/product/price:amount/@price:*", list("10%")); [EOL]     assertXPathValueIterator(context, "vendor/location[1]/@*", set("100", "", "local")); [EOL]     assertXPathValueIterator(context, "vendor/product/price:amount/@*", list("20%")); [EOL]     assertXPathValue(context, "vendor/location/@manager", ""); [EOL]     assertXPathValueLenient(context, "vendor/location/@missing", null); [EOL]     assertXPathValueLenient(context, "vendor/location/@miss:missing", null); [EOL]     assertXPathValue(context, "vendor/location[@id='101']//street", "Tangerine Drive"); [EOL]     assertXPathValueIterator(context, "/vendor/location[1]/@*[name()!= 'manager']", list("100", "local")); [EOL] }
public void testAxisAttribute() { [EOL]     assertXPathValue(context, "vendor/location/@id", "100"); [EOL]     assertXPathPointer(context, "vendor/location/@id", "/vendor[1]/location[1]/@id"); [EOL]     assertXPathValueIterator(context, "vendor/location/@id", list("100", "101")); [EOL]     assertXPathValue(context, "vendor/product/price:amount/@price:discount", "10%"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount/@price:discount)", "priceNS"); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount/@price:discount)", "discount"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount/@price:discount)", "price:discount"); [EOL]     assertXPathValue(context, "vendor/product/price:amount/@discount", "20%"); [EOL]     assertXPathValue(context, "namespace-uri(vendor/product/price:amount/@discount)", ""); [EOL]     assertXPathValue(context, "local-name(vendor/product/price:amount/@discount)", "discount"); [EOL]     assertXPathValue(context, "name(vendor/product/price:amount/@discount)", "discount"); [EOL]     assertXPathValueIterator(context, "vendor/product/price:amount/@price:*", list("10%")); [EOL]     assertXPathValueIterator(context, "vendor/location[1]/@*", set("100", "", "local")); [EOL]     assertXPathValueIterator(context, "vendor/product/price:amount/@*", list("20%")); [EOL]     assertXPathValue(context, "vendor/location/@manager", ""); [EOL]     assertXPathValueLenient(context, "vendor/location/@missing", null); [EOL]     assertXPathValueLenient(context, "vendor/location/@miss:missing", null); [EOL]     assertXPathValue(context, "vendor/location[@id='101']//street", "Tangerine Drive"); [EOL]     assertXPathValueIterator(context, "/vendor/location[1]/@*[name()!= 'manager']", list("100", "local")); [EOL] }
public void testDoStepNoPredicatesPropertyOwner() { [EOL]     assertValueAndPointer("/int", new Integer(1), "/int", "Bb", "BbB"); [EOL]     assertValueAndPointer("/./int", new Integer(1), "/int", "Bb", "BbB"); [EOL]     assertNullPointer("/foo", "/foo", "Bn"); [EOL]     assertValueAndPointer("/nestedBean/int", new Integer(1), "/nestedBean/int", "BbBb", "BbBbB"); [EOL]     assertValueAndPointer("/nestedBean/strings", bean.getNestedBean().getStrings(), "/nestedBean/strings", "BbBb", "BbBbC"); [EOL]     assertNullPointer("/nestedBean/foo", "/nestedBean/foo", "BbBn"); [EOL]     assertNullPointer("/map/foo", "/map[@name='foo']", "BbDd"); [EOL]     assertValueAndPointer("/list/int", new Integer(1), "/list[3]/int", "BbBb", "BbBbB"); [EOL]     assertNullPointer("/list/foo", "/list[1]/foo", "BbBn"); [EOL]     assertNullPointer("/nestedBean/foo/bar", "/nestedBean/foo/bar", "BbBnNn"); [EOL]     assertNullPointer("/list/int/bar", "/list[3]/int/bar", "BbBbBn"); [EOL]     assertNullPointer("/list/foo/bar", "/list[1]/foo/bar", "BbBnNn"); [EOL]     assertNullPointer("/map/foo/bar", "/map[@name='foo']/bar", "BbDdNn"); [EOL]     assertValueAndPointer("/map/Key1", "Value 1", "/map[@name='Key1']", "BbDd", "BbDdB"); [EOL]     assertValueAndPointer("/integers", bean.getIntegers(), "/integers", "Bb", "BbC"); [EOL] }
public void testDoStepNoPredicatesPropertyOwner() { [EOL]     assertValueAndPointer("/int", new Integer(1), "/int", "Bb", "BbB"); [EOL]     assertValueAndPointer("/./int", new Integer(1), "/int", "Bb", "BbB"); [EOL]     assertNullPointer("/foo", "/foo", "Bn"); [EOL]     assertValueAndPointer("/nestedBean/int", new Integer(1), "/nestedBean/int", "BbBb", "BbBbB"); [EOL]     assertValueAndPointer("/nestedBean/strings", bean.getNestedBean().getStrings(), "/nestedBean/strings", "BbBb", "BbBbC"); [EOL]     assertNullPointer("/nestedBean/foo", "/nestedBean/foo", "BbBn"); [EOL]     assertNullPointer("/map/foo", "/map[@name='foo']", "BbDd"); [EOL]     assertValueAndPointer("/list/int", new Integer(1), "/list[3]/int", "BbBb", "BbBbB"); [EOL]     assertNullPointer("/list/foo", "/list[1]/foo", "BbBn"); [EOL]     assertNullPointer("/nestedBean/foo/bar", "/nestedBean/foo/bar", "BbBnNn"); [EOL]     assertNullPointer("/list/int/bar", "/list[3]/int/bar", "BbBbBn"); [EOL]     assertNullPointer("/list/foo/bar", "/list[1]/foo/bar", "BbBnNn"); [EOL]     assertNullPointer("/map/foo/bar", "/map[@name='foo']/bar", "BbDdNn"); [EOL]     assertValueAndPointer("/map/Key1", "Value 1", "/map[@name='Key1']", "BbDd", "BbDdB"); [EOL]     assertValueAndPointer("/integers", bean.getIntegers(), "/integers", "Bb", "BbC"); [EOL] }
public void testNamespaceMapping() { [EOL]     context.registerNamespace("rate", "priceNS"); [EOL]     context.registerNamespace("goods", "productNS"); [EOL]     assertEquals("Context node namespace resolution", "priceNS", context.getNamespaceURI("price")); [EOL]     assertEquals("Registered namespace resolution", "priceNS", context.getNamespaceURI("rate")); [EOL]     assertXPathValue(context, "count(vendor/product/rate:*)", new Double(2)); [EOL]     assertXPathValueAndPointer(context, "//product:name", "Box of oranges", "/vendor[1]/product[1]/goods:name[1]"); [EOL]     JXPathContext childCtx = JXPathContext.newContext(context, context.getContextBean()); [EOL]     assertXPathValueAndPointer(childCtx, "//product:name", "Box of oranges", "/vendor[1]/product[1]/goods:name[1]"); [EOL]     JXPathContext relativeCtx = context.getRelativeContext(context.getPointer("/vendor")); [EOL]     assertXPathValueAndPointer(relativeCtx, "product/product:name", "Box of oranges", "/vendor[1]/product[1]/goods:name[1]"); [EOL] }
public void testNamespaceMapping() { [EOL]     context.registerNamespace("rate", "priceNS"); [EOL]     context.registerNamespace("goods", "productNS"); [EOL]     assertEquals("Context node namespace resolution", "priceNS", context.getNamespaceURI("price")); [EOL]     assertEquals("Registered namespace resolution", "priceNS", context.getNamespaceURI("rate")); [EOL]     assertXPathValue(context, "count(vendor/product/rate:*)", new Double(2)); [EOL]     assertXPathValueAndPointer(context, "//product:name", "Box of oranges", "/vendor[1]/product[1]/goods:name[1]"); [EOL]     JXPathContext childCtx = JXPathContext.newContext(context, context.getContextBean()); [EOL]     assertXPathValueAndPointer(childCtx, "//product:name", "Box of oranges", "/vendor[1]/product[1]/goods:name[1]"); [EOL]     JXPathContext relativeCtx = context.getRelativeContext(context.getPointer("/vendor")); [EOL]     assertXPathValueAndPointer(relativeCtx, "product/product:name", "Box of oranges", "/vendor[1]/product[1]/goods:name[1]"); [EOL] }
public void testListContainer() { [EOL]     assertXPathValueAndPointer(context, "list[7]/vendor/location/address/city", "Fruit Market", "/list[7]/vendor[1]/location[2]/address[1]/city[1]"); [EOL] }
public void testListContainer() { [EOL]     assertXPathValueAndPointer(context, "list[7]/vendor/location/address/city", "Fruit Market", "/list[7]/vendor[1]/location[2]/address[1]/city[1]"); [EOL] }
public void testIterateAndSet() { [EOL]     JXPathContext context = JXPathContext.newContext(createContextBean()); [EOL]     Iterator it = context.iteratePointers("beans/int"); [EOL]     int i = 5; [EOL]     while (it.hasNext()) { [EOL]         NodePointer pointer = (NodePointer) it.next(); [EOL]         pointer.setValue(new Integer(i++)); [EOL]     } [EOL]     it = context.iteratePointers("beans/int"); [EOL]     List actual = new ArrayList(); [EOL]     while (it.hasNext()) { [EOL]         actual.add(((Pointer) it.next()).getValue()); [EOL]     } [EOL]     assertEquals("Iterating <" + "beans/int" + ">", list(new Integer(5), new Integer(6)), actual); [EOL] }
public void testIterateAndSet() { [EOL]     JXPathContext context = JXPathContext.newContext(createContextBean()); [EOL]     Iterator it = context.iteratePointers("beans/int"); [EOL]     int i = 5; [EOL]     while (it.hasNext()) { [EOL]         NodePointer pointer = (NodePointer) it.next(); [EOL]         pointer.setValue(new Integer(i++)); [EOL]     } [EOL]     it = context.iteratePointers("beans/int"); [EOL]     List actual = new ArrayList(); [EOL]     while (it.hasNext()) { [EOL]         actual.add(((Pointer) it.next()).getValue()); [EOL]     } [EOL]     assertEquals("Iterating <" + "beans/int" + ">", list(new Integer(5), new Integer(6)), actual); [EOL] }
public void testIterateAndSet() { [EOL]     JXPathContext context = JXPathContext.newContext(createContextBean()); [EOL]     Iterator it = context.iteratePointers("beans/int"); [EOL]     int i = 5; [EOL]     while (it.hasNext()) { [EOL]         NodePointer pointer = (NodePointer) it.next(); [EOL]         pointer.setValue(new Integer(i++)); [EOL]     } [EOL]     it = context.iteratePointers("beans/int"); [EOL]     List actual = new ArrayList(); [EOL]     while (it.hasNext()) { [EOL]         actual.add(((Pointer) it.next()).getValue()); [EOL]     } [EOL]     assertEquals("Iterating <" + "beans/int" + ">", list(new Integer(5), new Integer(6)), actual); [EOL] }
public void testIterateAndSet() { [EOL]     JXPathContext context = JXPathContext.newContext(createContextBean()); [EOL]     Iterator it = context.iteratePointers("beans/int"); [EOL]     int i = 5; [EOL]     while (it.hasNext()) { [EOL]         NodePointer pointer = (NodePointer) it.next(); [EOL]         pointer.setValue(new Integer(i++)); [EOL]     } [EOL]     it = context.iteratePointers("beans/int"); [EOL]     List actual = new ArrayList(); [EOL]     while (it.hasNext()) { [EOL]         actual.add(((Pointer) it.next()).getValue()); [EOL]     } [EOL]     assertEquals("Iterating <" + "beans/int" + ">", list(new Integer(5), new Integer(6)), actual); [EOL] }
public void testIterateAndSet() { [EOL]     JXPathContext context = JXPathContext.newContext(createContextBean()); [EOL]     Iterator it = context.iteratePointers("beans/int"); [EOL]     int i = 5; [EOL]     while (it.hasNext()) { [EOL]         NodePointer pointer = (NodePointer) it.next(); [EOL]         pointer.setValue(new Integer(i++)); [EOL]     } [EOL]     it = context.iteratePointers("beans/int"); [EOL]     List actual = new ArrayList(); [EOL]     while (it.hasNext()) { [EOL]         actual.add(((Pointer) it.next()).getValue()); [EOL]     } [EOL]     assertEquals("Iterating <" + "beans/int" + ">", list(new Integer(5), new Integer(6)), actual); [EOL] }
public void testIterateAndSet() { [EOL]     JXPathContext context = JXPathContext.newContext(createContextBean()); [EOL]     Iterator it = context.iteratePointers("beans/int"); [EOL]     int i = 5; [EOL]     while (it.hasNext()) { [EOL]         NodePointer pointer = (NodePointer) it.next(); [EOL]         pointer.setValue(new Integer(i++)); [EOL]     } [EOL]     it = context.iteratePointers("beans/int"); [EOL]     List actual = new ArrayList(); [EOL]     while (it.hasNext()) { [EOL]         actual.add(((Pointer) it.next()).getValue()); [EOL]     } [EOL]     assertEquals("Iterating <" + "beans/int" + ">", list(new Integer(5), new Integer(6)), actual); [EOL] }
public void testIterateAndSet() { [EOL]     JXPathContext context = JXPathContext.newContext(createContextBean()); [EOL]     Iterator it = context.iteratePointers("beans/int"); [EOL]     int i = 5; [EOL]     while (it.hasNext()) { [EOL]         NodePointer pointer = (NodePointer) it.next(); [EOL]         pointer.setValue(new Integer(i++)); [EOL]     } [EOL]     it = context.iteratePointers("beans/int"); [EOL]     List actual = new ArrayList(); [EOL]     while (it.hasNext()) { [EOL]         actual.add(((Pointer) it.next()).getValue()); [EOL]     } [EOL]     assertEquals("Iterating <" + "beans/int" + ">", list(new Integer(5), new Integer(6)), actual); [EOL] }
public void testCreatePathDeclareVariable() { [EOL]     assertXPathCreatePath(context, "$string", null, "$string"); [EOL] }
public void testCreatePathDeclareVariable() { [EOL]     assertXPathCreatePath(context, "$string", null, "$string"); [EOL] }
public void testCreatePathDeclareVariable() { [EOL]     assertXPathCreatePath(context, "$string", null, "$string"); [EOL] }
public void testCreatePathDeclareVariable() { [EOL]     assertXPathCreatePath(context, "$string", null, "$string"); [EOL] }
public void testCreatePathDeclareVariable() { [EOL]     assertXPathCreatePath(context, "$string", null, "$string"); [EOL] }
public void testCreatePathDeclareVariable() { [EOL]     assertXPathCreatePath(context, "$string", null, "$string"); [EOL] }
public void testCreatePathDeclareVariable() { [EOL]     assertXPathCreatePath(context, "$string", null, "$string"); [EOL] }
public void testCreatePathDeclareVariable() { [EOL]     assertXPathCreatePath(context, "$string", null, "$string"); [EOL] }
public void testCreatePathDeclareVariable() { [EOL]     assertXPathCreatePath(context, "$string", null, "$string"); [EOL] }
public void testCoreOperationMod() { [EOL]     assertXPathExpression("2 mod 4", CoreOperationMod.class); [EOL]     assertXPathExpression("2|3 mod -3", CoreOperationMod.class, "2 | 3 mod -3"); [EOL] }
public void testCoreOperationMod() { [EOL]     assertXPathExpression("2 mod 4", CoreOperationMod.class); [EOL]     assertXPathExpression("2|3 mod -3", CoreOperationMod.class, "2 | 3 mod -3"); [EOL] }
public void testCoreOperationMod() { [EOL]     assertXPathExpression("2 mod 4", CoreOperationMod.class); [EOL]     assertXPathExpression("2|3 mod -3", CoreOperationMod.class, "2 | 3 mod -3"); [EOL] }
public void testCoreOperationMod() { [EOL]     assertXPathExpression("2 mod 4", CoreOperationMod.class); [EOL]     assertXPathExpression("2|3 mod -3", CoreOperationMod.class, "2 | 3 mod -3"); [EOL] }
public void testFunctionsLastAndPosition() { [EOL]     assertXPathPointer(context, "vendor//location[last()]", "/vendor[1]/location[2]"); [EOL] }
public void testFunctionsLastAndPosition() { [EOL]     assertXPathPointer(context, "vendor//location[last()]", "/vendor[1]/location[2]"); [EOL] }
