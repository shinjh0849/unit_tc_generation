public void testAttributesNotNull() { [EOL] Element element = new Element(Tag.valueOf("div"), ""); [EOL] Attributes attrs = element.attributes(); [EOL] assertNotNull(attrs); [EOL] }
public void testAttributesEmptyByDefault() { [EOL] Element element = new Element(Tag.valueOf("div"), ""); [EOL] Attributes attrs = element.attributes(); [EOL] assertEquals(0, attrs.size()); [EOL] }
public void testBaseUriNotNull() { [EOL] Document doc = Jsoup.parse("<p>Hello</p>", "http://example.com"); [EOL] String baseUri = doc.baseUri(); [EOL] assertNotNull(baseUri); [EOL] assertEquals("http://example.com", baseUri); [EOL] }
public void testBaseUriEmpty() { [EOL] Document doc = Jsoup.parse("<p>Hello</p>"); [EOL] String baseUri = doc.baseUri(); [EOL] assertNotNull(baseUri); [EOL] assertEquals("", baseUri); [EOL] }
public void setBaseUri_NullBaseUri_ThrowsException() { [EOL] Element element = new Element(Tag.valueOf("div"), ""); [EOL] try { [EOL] element.setBaseUri(null); [EOL] fail("Should have thrown IllegalArgumentException"); [EOL] } catch (IllegalArgumentException e) { [EOL] assertEquals("Base URI must not be null", e.getMessage()); [EOL] } [EOL] }
public void setBaseUri_ValidBaseUri_SetsBaseUri() { [EOL] Element element = new Element(Tag.valueOf("div"), ""); [EOL] String validBaseUri = "http://example.com"; [EOL] element.setBaseUri(validBaseUri); [EOL] assertEquals(validBaseUri, element.baseUri()); [EOL] }
public void testChildNodes_NonEmptyList() { [EOL] Element element = new Element(Tag.valueOf("div"), ""); [EOL] element.appendChild(new TextNode("text")); [EOL] element.appendChild(new Element(Tag.valueOf("span"), "")); [EOL] List<Node> childNodes = element.childNodes(); [EOL] assertNotNull(childNodes); [EOL] assertEquals(2, childNodes.size()); [EOL] assertTrue(childNodes.get(0) instanceof TextNode); [EOL] assertTrue(childNodes.get(1) instanceof Element); [EOL] }
public void testChildNodes_EmptyList() { [EOL] Element element = new Element(Tag.valueOf("div"), ""); [EOL] List<Node> childNodes = element.childNodes(); [EOL] assertNotNull(childNodes); [EOL] assertTrue(childNodes.isEmpty()); [EOL] }
public void replaceWith_ThrowsException_IfNewNodeIsNull() { [EOL] Node oldNode = new Element(Tag.valueOf("div"), ""); [EOL] try { [EOL] oldNode.replaceWith(null); [EOL] fail("replaceWith should throw IllegalArgumentException when new node is null"); [EOL] } catch (IllegalArgumentException e) { [EOL] } [EOL] } [EOL] public void replaceWith_ThrowsException_IfOldNodeHasNoParent() { [EOL] Node oldNode = new Element(Tag.valueOf("div"), ""); [EOL] Node newNode = new Element(Tag.valueOf("p"), ""); [EOL] try { [EOL] oldNode.replaceWith(newNode); [EOL] fail("replaceWith should throw IllegalStateException when old node has no parent"); [EOL] } catch (IllegalStateException e) { [EOL] } [EOL] } [EOL] public void replaceWith_ReplacesOldNodeWithNewNode_WhenOldNodeHasParent() { [EOL] Element parent = new Element(Tag.valueOf("div"), ""); [EOL] Node oldNode = new Element(Tag.valueOf("span"), ""); [EOL] Node newNode = new Element(Tag.valueOf("p"), ""); [EOL] parent.appendChild(oldNode); [EOL] oldNode.replaceWith(newNode); [EOL] assertFalse(parent.childNodes().contains(oldNode)); [EOL] assertTrue(parent.childNodes().contains(newNode)); [EOL] }

public void testReplaceChildWithValidNode() { [EOL] Element parent = new Element(Tag.valueOf("div"), ""); [EOL] Element child1 = new Element(Tag.valueOf("p"), ""); [EOL] Element child2 = new Element(Tag.valueOf("span"), ""); [EOL] parent.appendChild(child1); [EOL] parent.replaceChild(child1, child2); [EOL] assertEquals(child2, parent.child(0)); [EOL] assertNull(child1.parentNode()); [EOL] assertEquals(parent, child2.parentNode()); [EOL] }
public void testReplaceChildWithNull() { [EOL] Element parent = new Element(Tag.valueOf("div"), ""); [EOL] Element child = new Element(Tag.valueOf("p"), ""); [EOL] parent.appendChild(child); [EOL] try { [EOL] parent.replaceChild(child, null); [EOL] fail("Should throw IllegalArgumentException for null child"); [EOL] } catch (IllegalArgumentException e) { [EOL] } [EOL] }
public void testReplaceChildNotInParent() { [EOL] Element parent = new Element(Tag.valueOf("div"), ""); [EOL] Element child1 = new Element(Tag.valueOf("p"), ""); [EOL] Element child2 = new Element(Tag.valueOf("span"), ""); [EOL] Element notChild = new Element(Tag.valueOf("div"), ""); [EOL] parent.appendChild(child1); [EOL] try { [EOL] parent.replaceChild(notChild, child2); [EOL] fail("Should throw IllegalArgumentException for child not in parent"); [EOL] } catch (IllegalArgumentException e) { [EOL] } [EOL] }
public void testReplaceChildWithNodeHavingDifferentParent() { [EOL] Element parent1 = new Element(Tag.valueOf("div"), ""); [EOL] Element parent2 = new Element(Tag.valueOf("div"), ""); [EOL] Element child1 = new Element(Tag.valueOf("p"), ""); [EOL] Element child2 = new Element(Tag.valueOf("span"), ""); [EOL] parent1.appendChild(child1); [EOL] parent2.appendChild(child2); [EOL] parent1.replaceChild(child1, child2); [EOL] assertEquals(child2, parent1.child(0)); [EOL] assertNull(child1.parentNode()); [EOL] assertEquals(parent1, child2.parentNode()); [EOL] assertFalse(parent2.children().contains(child2)); [EOL] }
public void testNodeDepth_rootNode() { [EOL] Node root = new Node(); // Assuming Node is the class where nodeDepth() is defined [EOL] int depth = root.nodeDepth(); [EOL] assertEquals(0, depth); [EOL] }
public void testNodeDepth_childNode() { [EOL] Node root = new Node(); [EOL] Node child = new Node(); [EOL] child.parentNode = root; // Assuming parentNode is accessible or has a setter method [EOL] int depth = child.nodeDepth(); [EOL] assertEquals(1, depth); [EOL] }
public void testNodeDepth_grandchildNode() { [EOL] Node root = new Node(); [EOL] Node child = new Node(); [EOL] Node grandChild = new Node(); [EOL] child.parentNode = root; [EOL] grandChild.parentNode = child; [EOL] int depth = grandChild.nodeDepth(); [EOL] assertEquals(2, depth); [EOL] }
public void testIndexInListWithNonNullSearchAndNodes() { [EOL] Node search = new Element("search"); [EOL] List<Node> nodes = new ArrayList<>(); [EOL] nodes.add(new Element("first")); [EOL] nodes.add(search); [EOL] nodes.add(new Element("third")); [EOL] Integer index = NodeUtils.indexInList(search, nodes); [EOL] assertEquals(Integer.valueOf(1), index); [EOL] }
public void testIndexInListWithNonNullSearchNotInNodes() { [EOL] Node search = new Element("search"); [EOL] List<Node> nodes = new ArrayList<>(); [EOL] nodes.add(new Element("first")); [EOL] nodes.add(new Element("second")); [EOL] Integer index = NodeUtils.indexInList(search, nodes); [EOL] assertNull(index); [EOL] }
public void testIndexInListWithNullSearch() { [EOL] Node search = null; [EOL] List<Node> nodes = new ArrayList<>(); [EOL] nodes.add(new Element("first")); [EOL] try { [EOL] NodeUtils.indexInList(search, nodes); [EOL] fail("Should have thrown IllegalArgumentException"); [EOL] } catch (IllegalArgumentException e) { [EOL] } [EOL] }
public void testIndexInListWithNullNodes() { [EOL] Node search = new Element("search"); [EOL] List<Node> nodes = null; [EOL] try { [EOL] NodeUtils.indexInList(search, nodes); [EOL] fail("Should have thrown IllegalArgumentException"); [EOL] } catch (IllegalArgumentException e) { [EOL] } [EOL] }
public void testIndentWithZeroDepth() { [EOL] Element element = new Element(Tag.valueOf("div"), ""); [EOL] element.indent(new StringBuilder()); [EOL] }
public void testIndentWithNonZeroDepth() { [EOL] Element element = new Element(Tag.valueOf("div"), ""); [EOL] element.appendChild(new Element(Tag.valueOf("p"), "")); [EOL] StringBuilder accum = new StringBuilder(); [EOL] element.indent(accum); [EOL] assertTrue(accum.toString().startsWith("\n  ")); [EOL] }
public void testEquals_SameObject() { [EOL] Object obj = new Object(); [EOL] assertTrue(obj.equals(obj)); [EOL] }
public void testEquals_DifferentObject() { [EOL] Object obj1 = new Object(); [EOL] Object obj2 = new Object(); [EOL] assertFalse(obj1.equals(obj2)); [EOL] }
public void testElementsConstructor() { [EOL] Elements elements = new Elements(); [EOL] assertNotNull(elements); [EOL] assertTrue(elements.isEmpty()); [EOL] }
public void testElementsConstructorWithEmptyCollection() { [EOL] Collection<Element> elements = new ArrayList<>(); [EOL] Elements els = new Elements(elements); [EOL] assertTrue(els.size() == 0); [EOL] }
public void testElementsConstructorWithNonNullCollection() { [EOL] Collection<Element> elements = new ArrayList<>(); [EOL] elements.add(new Element(Tag.valueOf("div"), "")); [EOL] Elements els = new Elements(elements); [EOL] assertTrue(els.size() == 1); [EOL] assertNotNull(els.get(0)); [EOL] assertEquals("div", els.get(0).tagName()); [EOL] }
public void testElementsConstructorWithEmptyList() { [EOL] List<Element> elementList = new ArrayList<>(); [EOL] Elements elements = new Elements(elementList); [EOL] assertNotNull(elements); [EOL] assertTrue(elements.isEmpty()); [EOL] }
public void testElementsConstructorWithNonEmptyList() { [EOL] List<Element> elementList = new ArrayList<>(); [EOL] elementList.add(new Element(Tag.valueOf("div"), "")); [EOL] Elements elements = new Elements(elementList); [EOL] assertNotNull(elements); [EOL] assertFalse(elements.isEmpty()); [EOL] assertEquals(1, elements.size()); [EOL] assertEquals("div", elements.get(0).tagName()); [EOL] }
public void testElementsConstructorWithNoElements() { [EOL] Elements elements = new Elements(); [EOL] assertNotNull(elements); [EOL] assertEquals(0, elements.size()); [EOL] }
public void testElementsConstructorWithOneElement() { [EOL] Element element = new Element(Tag.valueOf("div"), ""); [EOL] Elements elements = new Elements(element); [EOL] assertNotNull(elements); [EOL] assertEquals(1, elements.size()); [EOL] assertSame(element, elements.get(0)); [EOL] }
public void testElementsConstructorWithMultipleElements() { [EOL] Element element1 = new Element(Tag.valueOf("div"), ""); [EOL] Element element2 = new Element(Tag.valueOf("p"), ""); [EOL] Elements elements = new Elements(element1, element2); [EOL] assertNotNull(elements); [EOL] assertEquals(2, elements.size()); [EOL] assertSame(element1, elements.get(0)); [EOL] assertSame(element2, elements.get(1)); [EOL] }
public void testTextWithNoElements() { [EOL] Element parent = new Element(Tag.valueOf("div"), ""); [EOL] String result = parent.text(); [EOL] assertTrue(result.isEmpty()); [EOL] } [EOL] public void testTextWithOneElement() { [EOL] Element parent = new Element(Tag.valueOf("div"), ""); [EOL] parent.appendChild(new Element(Tag.valueOf("p"), "").text("First")); [EOL] String result = parent.text(); [EOL] assertEquals("First", result); [EOL] } [EOL] public void testTextWithMultipleElements() { [EOL] Element parent = new Element(Tag.valueOf("div"), ""); [EOL] parent.appendChild(new Element(Tag.valueOf("p"), "").text("First")); [EOL] parent.appendChild(new Element(Tag.valueOf("span"), "").text("Second")); [EOL] String result = parent.text(); [EOL] assertEquals("First Second", result); [EOL] } [EOL] public void testTextWithNestedElements() { [EOL] Element parent = new Element(Tag.valueOf("div"), ""); [EOL] Element child = new Element(Tag.valueOf("p"), "").text("First"); [EOL] child.appendChild(new Element(Tag.valueOf("span"), "").text("Second")); [EOL] parent.appendChild(child); [EOL] String result = parent.text(); [EOL] assertEquals("First Second", result); [EOL] }
public void testHtml_EmptyContents() { [EOL] Element parent = new Element(Tag.valueOf("div"), ""); [EOL] String result = parent.html(); [EOL] assertEquals("", result); [EOL] }
public void testHtml_SingleElement() { [EOL] Element parent = new Element(Tag.valueOf("div"), ""); [EOL] parent.appendChild(new Element(Tag.valueOf("p"), "").text("Hello")); [EOL] String result = parent.html(); [EOL] assertEquals("<p>Hello</p>", result); [EOL] }
public void testHtml_MultipleElements() { [EOL] Element parent = new Element(Tag.valueOf("div"), ""); [EOL] parent.appendChild(new Element(Tag.valueOf("p"), "").text("Hello")); [EOL] parent.appendChild(new Element(Tag.valueOf("span"), "").text("World")); [EOL] String result = parent.html(); [EOL] assertEquals("<p>Hello</p> [EOL] <span>World</span>", result); [EOL] }
public void testHtmlWithEmptyElements() { [EOL] Elements elements = new Elements(); [EOL] Elements result = elements.html("<p>New HTML</p>"); [EOL] assertTrue(result.isEmpty()); [EOL] }
public void testHtmlWithSingleElement() { [EOL] Element element = new Element(Tag.valueOf("div"), ""); [EOL] Elements elements = new Elements(element); [EOL] Elements result = elements.html("<p>New HTML</p>"); [EOL] assertEquals("<p>New HTML</p>", element.html()); [EOL] assertSame(elements, result); [EOL] }
public void testHtmlWithMultipleElements() { [EOL] Element element1 = new Element(Tag.valueOf("div"), ""); [EOL] Element element2 = new Element(Tag.valueOf("span"), ""); [EOL] Elements elements = new Elements(); [EOL] elements.add(element1); [EOL] elements.add(element2); [EOL] Elements result = elements.html("<p>New HTML</p>"); [EOL] assertEquals("<p>New HTML</p>", element1.html()); [EOL] assertEquals("<p>New HTML</p>", element2.html()); [EOL] assertSame(elements, result); [EOL] }
public void testPrependWithEmptyHtml() { [EOL] Elements elements = new Elements(); [EOL] elements.add(new Element(Tag.valueOf("div"), "")); [EOL] elements.add(new Element(Tag.valueOf("p"), "")); [EOL] Elements result = elements.prepend(""); [EOL] for (Element element : result) { [EOL] assertEquals("", element.html()); [EOL] } [EOL] }
public void testPrependWithNonEmptyHtml() { [EOL] Elements elements = new Elements(); [EOL] elements.add(new Element(Tag.valueOf("div"), "")); [EOL] elements.add(new Element(Tag.valueOf("p"), "")); [EOL] String htmlToPrepend = "<span>Prepended</span>"; [EOL] Elements result = elements.prepend(htmlToPrepend); [EOL] for (Element element : result) { [EOL] assertEquals(htmlToPrepend, element.child(0).outerHtml()); [EOL] } [EOL] }
public void testPrependToEmptyElements() { [EOL] Elements elements = new Elements(); [EOL] String htmlToPrepend = "<span>Prepended</span>"; [EOL] Elements result = elements.prepend(htmlToPrepend); [EOL] assertTrue(result.isEmpty()); [EOL] }
public void testAppendWithEmptyElements() { [EOL] Elements elements = new Elements(); [EOL] Elements result = elements.append("<p>New paragraph</p>"); [EOL] assertTrue(result.isEmpty()); [EOL] }
public void testAppendWithSingleElement() { [EOL] Element element = new Element(Tag.valueOf("div"), ""); [EOL] Elements elements = new Elements(); [EOL] elements.add(element); [EOL] Elements result = elements.append("<p>New paragraph</p>"); [EOL] assertEquals(1, result.size()); [EOL] assertEquals("<div><p>New paragraph</p></div>", result.get(0).outerHtml()); [EOL] }
public void testAppendWithMultipleElements() { [EOL] Elements elements = new Elements(); [EOL] elements.add(new Element(Tag.valueOf("div"), "")); [EOL] elements.add(new Element(Tag.valueOf("span"), "")); [EOL] Elements result = elements.append("<p>New paragraph</p>"); [EOL] assertEquals(2, result.size()); [EOL] assertEquals("<div><p>New paragraph</p></div>", result.get(0).outerHtml()); [EOL] assertEquals("<span><p>New paragraph</p></span>", result.get(1).outerHtml()); [EOL] }
public void testEq_ValidIndex() { [EOL] Elements elements = new Elements(); [EOL] Element element = new Element(Tag.valueOf("div"), ""); [EOL] elements.add(element); [EOL] Elements result = elements.eq(0); [EOL] assertNotNull(result); [EOL] assertEquals(1, result.size()); [EOL] assertEquals(element, result.get(0)); [EOL] }
public void testEq_InvalidIndex() { [EOL] Elements elements = new Elements(); [EOL] Element element = new Element(Tag.valueOf("div"), ""); [EOL] elements.add(element); [EOL] Elements result = elements.eq(1); [EOL] assertNotNull(result); [EOL] assertTrue(result.isEmpty()); [EOL] }
public void testEq_NegativeIndex() { [EOL] Elements elements = new Elements(); [EOL] Element element = new Element(Tag.valueOf("div"), ""); [EOL] elements.add(element); [EOL] Elements result = elements.eq(-1); [EOL] assertNotNull(result); [EOL] assertTrue(result.isEmpty()); [EOL] }
public void testFirst_WhenContentsNotEmpty_ShouldReturnFirstElement() { [EOL] Elements contents = new Elements(); [EOL] Element element = new Element(Tag.valueOf("div"), ""); [EOL] contents.add(element); [EOL] Element result = contents.first(); [EOL] assertSame(element, result); [EOL] }
public void testFirst_WhenContentsEmpty_ShouldReturnNull() { [EOL] Elements contents = new Elements(); [EOL] Element result = contents.first(); [EOL] assertNull(result); [EOL] }
public void testIsEmpty_WhenContentsAreEmpty() { [EOL] Element element = new Element(Tag.valueOf("div"), ""); [EOL] boolean result = element.isEmpty(); [EOL] assertTrue(result); [EOL] }
public void testIsEmpty_WhenContentsAreNotEmpty() { [EOL] Element element = new Element(Tag.valueOf("div"), ""); [EOL] element.append("Some content"); [EOL] boolean result = element.isEmpty(); [EOL] assertFalse(result); [EOL] }
public void testIterator_NonEmptyContents() { [EOL] Elements contents = new Elements(); [EOL] contents.add(new Element(Tag.valueOf("div"), "")); [EOL] Iterator<Element> iterator = contents.iterator(); [EOL] assertTrue(iterator.hasNext()); [EOL] assertEquals("div", iterator.next().tagName()); [EOL] }
public void testIterator_EmptyContents() { [EOL] Elements contents = new Elements(); [EOL] Iterator<Element> iterator = contents.iterator(); [EOL] assertFalse(iterator.hasNext()); [EOL] }
public void testAdd_NullElement() { [EOL] ElementList list = new ElementList(); [EOL] boolean result = list.add(null); [EOL] assertFalse(result); [EOL] assertTrue(list.contents.isEmpty()); [EOL] }
public void testAdd_ValidElement() { [EOL] ElementList list = new ElementList(); [EOL] Element element = new Element("div"); [EOL] boolean result = list.add(element); [EOL] assertTrue(result); [EOL] assertEquals(1, list.contents.size()); [EOL] assertTrue(list.contents.contains(element)); [EOL] }
public void testGet_ValidIndex() { [EOL] Element parent = new Element(Tag.valueOf("div"), ""); [EOL] Element child1 = new Element(Tag.valueOf("p"), ""); [EOL] Element child2 = new Element(Tag.valueOf("span"), ""); [EOL] parent.appendChild(child1); [EOL] parent.appendChild(child2); [EOL] Element result = parent.get(0); [EOL] assertSame(child1, result); [EOL] }
public void testGet_InvalidIndex() { [EOL] Element parent = new Element(Tag.valueOf("div"), ""); [EOL] Element child = new Element(Tag.valueOf("p"), ""); [EOL] parent.appendChild(child); [EOL] try { [EOL] parent.get(1); [EOL] fail("Expected IndexOutOfBoundsException for index greater than size"); [EOL] } catch (IndexOutOfBoundsException e) { [EOL] } [EOL] }
public void testGet_NegativeIndex() { [EOL] Element parent = new Element(Tag.valueOf("div"), ""); [EOL] Element child = new Element(Tag.valueOf("p"), ""); [EOL] parent.appendChild(child); [EOL] try { [EOL] parent.get(-1); [EOL] fail("Expected IndexOutOfBoundsException for negative index"); [EOL] } catch (IndexOutOfBoundsException e) { [EOL] } [EOL] }
public void setId_withValidId_shouldSetId() { [EOL] Element element = new Element(Tag.valueOf("div"), ""); [EOL] String testId = "testId"; [EOL] element.setId(testId); [EOL] assertEquals(testId, element.id()); [EOL] }
public void testMatches_WithMatchingId() { [EOL] Element element = new Element(Tag.valueOf("div"), ""); [EOL] element.id("testId"); [EOL] Attributes attributes = new Attributes(); [EOL] attributes.put("id", "testId"); [EOL] Evaluator evaluator = new Evaluator.Id("testId"); [EOL] boolean result = evaluator.matches(element); [EOL] assertTrue(result); [EOL] }
public void testMatches_WithNonMatchingId() { [EOL] Element element = new Element(Tag.valueOf("div"), ""); [EOL] element.id("testId"); [EOL] Attributes attributes = new Attributes(); [EOL] attributes.put("id", "differentId"); [EOL] Evaluator evaluator = new Evaluator.Id("differentId"); [EOL] boolean result = evaluator.matches(element); [EOL] assertFalse(result); [EOL] }
public void testIsValidWithNullDocument() { [EOL] try { [EOL] Cleaner cleaner = new Cleaner(Whitelist.basic()); [EOL] cleaner.isValid(null); [EOL] fail("Should throw IllegalArgumentException for null document"); [EOL] } catch (IllegalArgumentException e) { [EOL] } [EOL] }
public void testIsValidWithCleanDocument() { [EOL] Cleaner cleaner = new Cleaner(Whitelist.basic()); [EOL] Document cleanDocument = Jsoup.parse("<p>Some clean text</p>"); [EOL] boolean result = cleaner.isValid(cleanDocument); [EOL] assertTrue("Expected the document to be valid", result); [EOL] }
public void testIsValidWithDirtyDocument() { [EOL] Cleaner cleaner = new Cleaner(Whitelist.basic()); [EOL] Document dirtyDocument = Jsoup.parse("<script>alert('xss')</script><p>Some text</p>"); [EOL] boolean result = cleaner.isValid(dirtyDocument); [EOL] assertFalse("Expected the document to be invalid", result); [EOL] }
public void testDocumentConstructorWithValidBaseUri() { [EOL] String baseUri = "http://example.com"; [EOL] Document doc = new Document(baseUri); [EOL] assertEquals("#root", doc.tagName()); [EOL] assertEquals(baseUri, doc.baseUri()); [EOL] }
public void testDocumentConstructorWithEmptyBaseUri() { [EOL] String baseUri = "";// Empty base URI [EOL] Document doc = new Document(baseUri); [EOL] assertEquals("#root", doc.tagName()); [EOL] assertEquals(baseUri, doc.baseUri()); [EOL] }
public void testDocumentConstructorWithNullBaseUri() { [EOL] String baseUri = null;// Null base URI [EOL] Document doc = new Document(baseUri); [EOL] assertEquals("#root", doc.tagName()); [EOL] assertNull(doc.baseUri()); [EOL] }
public void testCreateShellWithNonNullBaseUri() { [EOL] String baseUri = "http://example.com"; [EOL] Document doc = Document.createShell(baseUri); [EOL] assertNotNull(doc); [EOL] assertEquals(baseUri, doc.baseUri()); [EOL] assertNotNull(doc.select("html").first()); [EOL] assertNotNull(doc.select("head").first()); [EOL] assertNotNull(doc.select("body").first()); [EOL] } [EOL] public void testCreateShellWithNullBaseUri() { [EOL] try { [EOL] Document.createShell(null); [EOL] fail("Should throw IllegalArgumentException for null baseUri"); [EOL] } catch (IllegalArgumentException e) { [EOL] } [EOL] }
public void testHead_noHeadElement() { [EOL] Document doc = Jsoup.parse("<html><body>Content</body></html>"); [EOL] Element head = doc.head(); [EOL] assertNull(head); [EOL] }
public void testHead_withHeadElement() { [EOL] Document doc = Jsoup.parse("<html><head><title>Test</title></head><body>Content</body></html>"); [EOL] Element head = doc.head(); [EOL] assertNotNull(head); [EOL] assertEquals("head", head.tagName()); [EOL] assertEquals("Test", head.getElementsByTag("title").first().text()); [EOL] }
public void testBodyElementExists() { [EOL] Document doc = Jsoup.parse("<html><head></head><body><p>Hello</p></body></html>"); [EOL] Element body = doc.body(); [EOL] assertNotNull(body); [EOL] assertEquals("body", body.tagName()); [EOL] assertEquals("Hello", body.text()); [EOL] }
public void testBodyElementNotExists() { [EOL] Document doc = Jsoup.parse("<html><head></head></html>"); [EOL] Element body = doc.body(); [EOL] assertNull(body); [EOL] }
public void testCreateElementWithValidTagName() { [EOL] Document doc = new Document(""); [EOL] Element element = doc.createElement("div"); [EOL] assertNotNull(element); [EOL] assertEquals("div", element.tagName()); [EOL] }
public void testCreateElementWithEmptyTagName() { [EOL] Document doc = new Document(""); [EOL] try { [EOL] doc.createElement(""); [EOL] fail("Should throw IllegalArgumentException for empty tag name"); [EOL] } catch (IllegalArgumentException e) { [EOL] } [EOL] }
public void testCreateElementWithNullTagName() { [EOL] Document doc = new Document(""); [EOL] try { [EOL] doc.createElement(null); [EOL] fail("Should throw IllegalArgumentException for null tag name"); [EOL] } catch (IllegalArgumentException e) { [EOL] } [EOL] }
public void testNormaliseWithEmptyDocument() { [EOL] Document doc = new Document(""); [EOL] Document normalised = doc.normalise(); [EOL] assertNotNull(normalised.select("html").first()); [EOL] assertNotNull(normalised.head()); [EOL] assertNotNull(normalised.body()); [EOL] }
public void testNormaliseWithOnlyHtml() { [EOL] Document doc = new Document(""); [EOL] doc.appendElement("html"); [EOL] Document normalised = doc.normalise(); [EOL] assertNotNull(normalised.head()); [EOL] assertNotNull(normalised.body()); [EOL] }
public void testNormaliseWithHtmlAndHead() { [EOL] Document doc = new Document(""); [EOL] Element html = doc.appendElement("html"); [EOL] html.prependElement("head"); [EOL] Document normalised = doc.normalise(); [EOL] assertNotNull(normalised.body()); [EOL] }
public void testNormaliseWithCompleteStructure() { [EOL] Document doc = new Document(""); [EOL] Element html = doc.appendElement("html"); [EOL] html.prependElement("head"); [EOL] html.appendElement("body"); [EOL] Document normalised = doc.normalise(); [EOL] assertEquals(1, normalised.select("html").size()); [EOL] assertEquals(1, normalised.select("head").size()); [EOL] assertEquals(1, normalised.select("body").size()); [EOL] }
public void testNormaliseWithNonBlankTextNode() { [EOL] Element element = new Element(Tag.valueOf("div"), ""); [EOL] TextNode nonBlankTextNode = new TextNode("non-blank", ""); [EOL] element.appendChild(nonBlankTextNode); [EOL] normalise(element); [EOL] assertFalse(element.childNodes().contains(nonBlankTextNode)); [EOL] assertTrue(element.ownerDocument().body().childNodes().contains(nonBlankTextNode)); [EOL] }
public void testNormaliseWithBlankTextNode() { [EOL] Element element = new Element(Tag.valueOf("div"), ""); [EOL] TextNode blankTextNode = new TextNode(" ", ""); [EOL] element.appendChild(blankTextNode); [EOL] normalise(element); [EOL] assertTrue(element.childNodes().contains(blankTextNode)); [EOL] assertFalse(element.ownerDocument().body().childNodes().contains(blankTextNode)); [EOL] }
public void testNormaliseWithNoTextNodes() { [EOL] Element element = new Element(Tag.valueOf("div"), ""); [EOL] normalise(element); [EOL] assertTrue(element.childNodes().isEmpty()); [EOL] }
private Elements select() { [EOL] tq.consumeWhitespace(); [EOL] if (tq.matchesAny(combinators)) { [EOL] elements.add(root); [EOL] combinator(tq.consume().toString()); [EOL] } else { [EOL] addElements(findElements()); [EOL] } [EOL] while (!tq.isEmpty()) { [EOL] boolean seenWhite = tq.consumeWhitespace(); [EOL] if (tq.matchChomp(",")) { [EOL] while (!tq.isEmpty()) { [EOL] String subQuery = tq.chompTo(","); [EOL] elements.addAll(select(subQuery, root)); [EOL] } [EOL] } else if (tq.matchesAny(combinators)) { [EOL] combinator(tq.consume().toString()); [EOL] } else if (seenWhite) { [EOL] combinator(" "); [EOL] } else { [EOL] Elements candidates = findElements(); [EOL] intersectElements(filterForSelf(elements, candidates)); [EOL] } [EOL] } [EOL] return new Elements(elements); [EOL] } [EOL] private Selector(String query, Element root); [EOL] public SelectorParseException(String s); [EOL] public static Elements select(String query, Element root); [EOL] public static Elements select(String query, Iterable<Element> roots); [EOL] private Elements select(); [EOL] private void combinator(String combinator); [EOL] private Elements findElements(); [EOL] private void addElements(Collection<Element> add); [EOL] private void intersectElements(Collection<Element> intersect); [EOL] private Elements byId(); [EOL] private Elements byClass(); [EOL] private Elements byTag(); [EOL] private Elements byAttribute(); [EOL] private Elements allElements(); [EOL] private Elements indexLessThan(); [EOL] private Elements indexGreaterThan(); [EOL] private Elements indexEquals(); [EOL] private int consumeIndex(); [EOL] private static Elements filterForChildren(Collection<Element> parents, Collection<Element> candidates); [EOL] private static Elements filterForDescendants(Collection<Element> parents, Collection<Element> candidates); [EOL] private static Elements filterForAdjacentSiblings(Collection<Element> elements, Collection<Element> candidates); [EOL] private static Elements filterForGeneralSiblings(Collection<Element> elements, Collection<Element> candidates); [EOL] private static Elements filterForSelf(Collection<Element> parents, Collection<Element> candidates); [EOL] String[] combinators = Optional[{ ",", ">", "+", "~", " " }];
public void testCombinatorGreaterThan() { [EOL] Element root = new Element(Tag.valueOf("div"), ""); [EOL] Element child = new Element(Tag.valueOf("span"), ""); [EOL] root.appendChild(child); [EOL] Selector selector = new Selector("div > span", root); [EOL] Elements elements = selector.select(); [EOL] selector.combinator(">"); [EOL] assertEquals(1, elements.size()); [EOL] assertTrue(elements.contains(child)); [EOL] }
public void testCombinatorSpace() { [EOL] Element root = new Element(Tag.valueOf("div"), ""); [EOL] Element child = new Element(Tag.valueOf("span"), ""); [EOL] Element grandChild = new Element(Tag.valueOf("a"), ""); [EOL] child.appendChild(grandChild); [EOL] root.appendChild(child); [EOL] Selector selector = new Selector("div span a", root); [EOL] Elements elements = selector.select(); [EOL] selector.combinator(" "); [EOL] assertEquals(1, elements.size()); [EOL] assertTrue(elements.contains(grandChild)); [EOL] }
public void testCombinatorPlus() { [EOL] Element root = new Element(Tag.valueOf("div"), ""); [EOL] Element sibling1 = new Element(Tag.valueOf("p"), ""); [EOL] Element sibling2 = new Element(Tag.valueOf("span"), ""); [EOL] root.appendChild(sibling1); [EOL] root.appendChild(sibling2); [EOL] Selector selector = new Selector("div + span", root); [EOL] Elements elements = selector.select(); [EOL] selector.combinator("+"); [EOL] assertEquals(1, elements.size()); [EOL] assertTrue(elements.contains(sibling2)); [EOL] }
public void testCombinatorTilde() { [EOL] Element root = new Element(Tag.valueOf("div"), ""); [EOL] Element sibling1 = new Element(Tag.valueOf("p"), ""); [EOL] Element sibling2 = new Element(Tag.valueOf("span"), ""); [EOL] Element sibling3 = new Element(Tag.valueOf("a"), ""); [EOL] root.appendChild(sibling1); [EOL] root.appendChild(sibling2); [EOL] root.appendChild(sibling3); [EOL] Selector selector = new Selector("div ~ a", root); [EOL] Elements elements = selector.select(); [EOL] selector.combinator("~"); [EOL] assertEquals(1, elements.size()); [EOL] assertTrue(elements.contains(sibling3)); [EOL] }
public void testCombinatorIllegalStateException() { [EOL] Element root = new Element(Tag.valueOf("div"), ""); [EOL] Selector selector = new Selector("div ! span", root); [EOL] try { [EOL] selector.combinator("!"); [EOL] fail("IllegalStateException expected"); [EOL] } catch (IllegalStateException e) { [EOL] assertEquals("Unknown combinator: !", e.getMessage()); [EOL] } [EOL] }
private Elements findElements() { [EOL] if (tq.matchChomp("#")) { [EOL] return byId(); [EOL] } else if (tq.matchChomp(".")) { [EOL] return byClass(); [EOL] } else if (tq.matchesWord()) { [EOL] return byTag(); [EOL] } else if (tq.matchChomp("[")) { [EOL] return byAttribute(); [EOL] } else if (tq.matchChomp("*")) { [EOL] return allElements(); [EOL] } else if (tq.matchChomp(":lt(")) { [EOL] return indexLessThan(); [EOL] } else if (tq.matchChomp(":gt(")) { [EOL] return indexGreaterThan(); [EOL] } else if (tq.matchChomp(":eq(")) { [EOL] return indexEquals(); [EOL] } else { [EOL] throw new SelectorParseException("Could not parse query " + query); [EOL] } [EOL] } [EOL] private Selector(String query, Element root); [EOL] public SelectorParseException(String s); [EOL] public static Elements select(String query, Element root); [EOL] public static Elements select(String query, Iterable<Element> roots); [EOL] private Elements select(); [EOL] private void combinator(String combinator); [EOL] private Elements findElements(); [EOL] private void addElements(Collection<Element> add); [EOL] private void intersectElements(Collection<Element> intersect); [EOL] private Elements byId(); [EOL] private Elements byClass(); [EOL] private Elements byTag(); [EOL] private Elements byAttribute(); [EOL] private Elements allElements(); [EOL] private Elements indexLessThan(); [EOL] private Elements indexGreaterThan(); [EOL] private Elements indexEquals(); [EOL] private int consumeIndex(); [EOL] private static Elements filterForChildren(Collection<Element> parents, Collection<Element> candidates); [EOL] private static Elements filterForDescendants(Collection<Element> parents, Collection<Element> candidates); [EOL] private static Elements filterForAdjacentSiblings(Collection<Element> elements, Collection<Element> candidates); [EOL] private static Elements filterForGeneralSiblings(Collection<Element> elements, Collection<Element> candidates); [EOL] private static Elements filterForSelf(Collection<Element> parents, Collection<Element> candidates); [EOL] String[] combinators = {" ",",",">","+","~"};
public void testIntersectElements_EmptyCollections() { [EOL] Elements elements = new Elements(); [EOL] Collection<Element> intersect = Collections.emptyList(); [EOL] elements.intersectElements(intersect); [EOL] assertTrue(elements.isEmpty()); [EOL] }
public void testIntersectElements_NonEmptyCollections() { [EOL] Elements elements = new Elements(); [EOL] elements.add(new Element(Tag.valueOf("div"), "")); [EOL] Collection<Element> intersect = new ArrayList<>(); [EOL] intersect.add(new Element(Tag.valueOf("div"), "")); [EOL] elements.intersectElements(intersect); [EOL] assertFalse(elements.isEmpty()); [EOL] assertEquals(1, elements.size()); [EOL] }
public void testIntersectElements_NoCommonElements() { [EOL] Elements elements = new Elements(); [EOL] elements.add(new Element(Tag.valueOf("div"), "")); [EOL] Collection<Element> intersect = new ArrayList<>(); [EOL] intersect.add(new Element(Tag.valueOf("p"), "")); [EOL] elements.intersectElements(intersect); [EOL] assertTrue(elements.isEmpty()); [EOL] }
public void testByIdWithNonEmptyId() { [EOL] TokenQueue tq = new TokenQueue("#validId"); [EOL] Element root = new Element(Tag.valueOf("div"), ""); [EOL] root.appendChild(new Element(Tag.valueOf("span"), "").attr("id", "validId")); [EOL] Selector selector = new Selector(tq, root); [EOL] Elements result = selector.byId(); [EOL] assertNotNull(result); [EOL] assertEquals(1, result.size()); [EOL] assertEquals("validId", result.get(0).id()); [EOL] }
public void testByIdWithEmptyId() { [EOL] TokenQueue tq = new TokenQueue("#"); [EOL] Element root = new Element(Tag.valueOf("div"), ""); [EOL] Selector selector = new Selector(tq, root); [EOL] try { [EOL] Elements result = selector.byId(); [EOL] fail("Expected an IllegalArgumentException to be thrown"); [EOL] } catch (IllegalArgumentException e) { [EOL] assertEquals("String must not be empty", e.getMessage()); [EOL] } [EOL] }
public void testByIdWithNonExistentId() { [EOL] TokenQueue tq = new TokenQueue("#nonExistentId"); [EOL] Element root = new Element(Tag.valueOf("div"), ""); [EOL] Selector selector = new Selector(tq, root); [EOL] Elements result = selector.byId(); [EOL] assertNotNull(result); [EOL] assertTrue(result.isEmpty()); [EOL] }
private Elements byClass() { [EOL] String className = tq.consumeCssIdentifier(); [EOL] Validate.notEmpty(className); [EOL] return root.getElementsByClass(className); [EOL] } [EOL] private Selector(String query, Element root); [EOL] public SelectorParseException(String s); [EOL] public static Elements select(String query, Element root); [EOL] public static Elements select(String query, Iterable<Element> roots); [EOL] private Elements select(); [EOL] private void combinator(String combinator); [EOL] private Elements findElements(); [EOL] private void addElements(Collection<Element> add); [EOL] private void intersectElements(Collection<Element> intersect); [EOL] private Elements byId(); [EOL] private Elements byClass(); [EOL] private Elements byTag(); [EOL] private Elements byAttribute(); [EOL] private Elements allElements(); [EOL] private Elements indexLessThan(); [EOL] private Elements indexGreaterThan(); [EOL] private Elements indexEquals(); [EOL] private int consumeIndex(); [EOL] private static Elements filterForChildren(Collection<Element> parents, Collection<Element> candidates); [EOL] private static Elements filterForDescendants(Collection<Element> parents, Collection<Element> candidates); [EOL] private static Elements filterForAdjacentSiblings(Collection<Element> elements, Collection<Element> candidates); [EOL] private static Elements filterForGeneralSiblings(Collection<Element> elements, Collection<Element> candidates); [EOL] private static Elements filterForSelf(Collection<Element> parents, Collection<Element> candidates); [EOL] String[] combinators = { ",", ">", "+", "~", " " };
public void testByAttributeWithEmptyKey() { [EOL] Selector selector = new Selector("[ ]", new Element("root")); [EOL] try { [EOL] selector.byAttribute(); [EOL] fail("Should have thrown an exception for empty key"); [EOL] } catch (IllegalArgumentException e) { [EOL] } [EOL] }
public void testByAttributeWithEquals() { [EOL] Selector selector = new Selector("[key=value]", new Element("root")); [EOL] Elements result = selector.byAttribute(); [EOL] assertNotNull(result); [EOL] }
public void testByAttributeWithNotEquals() { [EOL] Selector selector = new Selector("[key!=value]", new Element("root")); [EOL] Elements result = selector.byAttribute(); [EOL] assertNotNull(result); [EOL] }
public void testByAttributeWithStartsWith() { [EOL] Selector selector = new Selector("[key^=value]", new Element("root")); [EOL] Elements result = selector.byAttribute(); [EOL] assertNotNull(result); [EOL] }
public void testByAttributeWithEndsWith() { [EOL] Selector selector = new Selector("[key$=value]", new Element("root")); [EOL] Elements result = selector.byAttribute(); [EOL] assertNotNull(result); [EOL] }
public void testByAttributeWithContains() { [EOL] Selector selector = new Selector("[key*=value]", new Element("root")); [EOL] Elements result = selector.byAttribute(); [EOL] assertNotNull(result); [EOL] }
public void testByAttributeWithInvalidQuery() { [EOL] Selector selector = new Selector("[key", new Element("root")); [EOL] try { [EOL] selector.byAttribute(); [EOL] fail("Should have thrown SelectorParseException for invalid query"); [EOL] } catch (SelectorParseException e) { [EOL] } [EOL] }
public void testFilterForDescendants_WithNonMatchingCandidates() { [EOL] Collection<Element> parents = Arrays.asList(new Element("parent")); [EOL] Collection<Element> candidates = Arrays.asList(new Element("child1"), new Element("child2")); [EOL] Elements result = filterForDescendants(parents, candidates); [EOL] assertEquals(2, result.size()); [EOL] assertTrue(result.containsAll(candidates)); [EOL] }
public void testFilterForDescendants_WithMatchingCandidates() { [EOL] Element parent = new Element("parent"); [EOL] Element child = new Element("child"); [EOL] Collection<Element> parents = Arrays.asList(parent); [EOL] Collection<Element> candidates = Arrays.asList(parent, child); [EOL] Elements result = filterForDescendants(parents, candidates); [EOL] assertEquals(1, result.size()); [EOL] assertTrue(result.contains(child)); [EOL] }
public void testFilterForDescendants_WithEmptyCandidates() { [EOL] Collection<Element> parents = Arrays.asList(new Element("parent")); [EOL] Collection<Element> candidates = Collections.emptyList(); [EOL] Elements result = filterForDescendants(parents, candidates); [EOL] assertTrue(result.isEmpty()); [EOL] }
public void testFilterForDescendants_WithEmptyParents() { [EOL] Collection<Element> parents = Collections.emptyList(); [EOL] Collection<Element> candidates = Arrays.asList(new Element("child1"), new Element("child2")); [EOL] Elements result = filterForDescendants(parents, candidates); [EOL] assertEquals(2, result.size()); [EOL] assertTrue(result.containsAll(candidates)); [EOL] }
public void testFilterForSelfWithEmptyParents() { [EOL] Collection<Element> parents = Collections.emptyList(); [EOL] Collection<Element> candidates = Arrays.asList(new Element("div")); [EOL] Elements result = filterForSelf(parents, candidates); [EOL] assertTrue(result.isEmpty()); [EOL] } [EOL] public void testFilterForSelfWithEmptyCandidates() { [EOL] Collection<Element> parents = Arrays.asList(new Element("div")); [EOL] Collection<Element> candidates = Collections.emptyList(); [EOL] Elements result = filterForSelf(parents, candidates); [EOL] assertTrue(result.isEmpty()); [EOL] } [EOL] public void testFilterForSelfWithNonMatchingCandidates() { [EOL] Element parent = new Element("div"); [EOL] Collection<Element> parents = Arrays.asList(parent); [EOL] Collection<Element> candidates = Arrays.asList(new Element("span"), new Element("p")); [EOL] Elements result = filterForSelf(parents, candidates); [EOL] assertTrue(result.isEmpty()); [EOL] } [EOL] public void testFilterForSelfWithMatchingCandidates() { [EOL] Element parent = new Element("div"); [EOL] Collection<Element> parents = Arrays.asList(parent); [EOL] Collection<Element> candidates = Arrays.asList(new Element("div"), new Element("p")); [EOL] Elements result = filterForSelf(parents, candidates); [EOL] assertEquals(1, result.size()); [EOL] assertEquals(parent, result.get(0)); [EOL] }
public void testElementConstructorWithValidArguments() { [EOL] Tag tag = Tag.valueOf("div"); [EOL] String baseUri = "http://example.com"; [EOL] Attributes attributes = new Attributes(); [EOL] attributes.put("id", "test"); [EOL] Element element = new Element(tag, baseUri, attributes); [EOL] assertNotNull(element); [EOL] assertEquals(tag, element.tag()); [EOL] assertEquals(baseUri, element.baseUri()); [EOL] assertEquals("test", element.attr("id")); [EOL] }
public void testElementConstructorWithNullTag() { [EOL] String baseUri = "http://example.com"; [EOL] Attributes attributes = new Attributes(); [EOL] try { [EOL] Element element = new Element(null, baseUri, attributes); [EOL] fail("Element constructor should throw NullPointerException for null tag"); [EOL] } catch (NullPointerException e) { [EOL] } [EOL] }
public void testElementConstructorWithValidTagAndBaseUri() { [EOL] Tag tag = Tag.valueOf("div"); [EOL] String baseUri = "http://example.com"; [EOL] Element element = new Element(tag, baseUri); [EOL] assertNotNull(element); [EOL] assertEquals(tag, element.tag()); [EOL] assertEquals(baseUri, element.baseUri()); [EOL] assertNotNull(element.attributes()); [EOL] }
public void testElementConstructorWithNullTag() { [EOL] String baseUri = "http://example.com"; [EOL] try { [EOL] Element element = new Element(null, baseUri); [EOL] fail("Element constructor should throw NullPointerException when tag is null"); [EOL] } catch (NullPointerException e) { [EOL] } [EOL] }
public void testElementConstructorWithEmptyBaseUri() { [EOL] Tag tag = Tag.valueOf("div"); [EOL] Element element = new Element(tag, ""); [EOL] assertNotNull(element); [EOL] assertEquals(tag, element.tag()); [EOL] assertEquals("", element.baseUri()); [EOL] assertNotNull(element.attributes()); [EOL] }
public void testTagNameNonNull() { [EOL] Element element = new Element(Tag.valueOf("p"), ""); [EOL] String tagName = element.tagName(); [EOL] assertNotNull(tagName); [EOL] assertEquals("p", tagName); [EOL] }
public void testTagNameCaseSensitivity() { [EOL] Element element = new Element(Tag.valueOf("DIV"), ""); [EOL] String tagName = element.tagName(); [EOL] assertNotNull(tagName); [EOL] assertEquals("div", tagName); [EOL] }
public void testTag() { [EOL] Tag expectedTag = new Tag("p"); [EOL] Element element = new Element(expectedTag); [EOL] Tag actualTag = element.tag(); [EOL] assertEquals(expectedTag, actualTag); [EOL] }
public void testIsBlock_True() { [EOL] Element element = new Element(Tag.valueOf("div"), ""); [EOL] assertTrue(element.isBlock()); [EOL] }
public void testIsBlock_False() { [EOL] Element element = new Element(Tag.valueOf("span"), ""); [EOL] assertFalse(element.isBlock()); [EOL] }
public void testParent() { [EOL] Element child = new Element(Tag.valueOf("div"), ""); [EOL] Element parent = new Element(Tag.valueOf("span"), ""); [EOL] child.appendTo(parent); [EOL] Element result = child.parent(); [EOL] assertNotNull(result); [EOL] assertEquals("span", result.tagName()); [EOL] }
public void testParent_NullParent() { [EOL] Element child = new Element(Tag.valueOf("div"), ""); [EOL] Element result = child.parent(); [EOL] assertNull(result); [EOL] }
public void testChildren_emptyNode() { [EOL] Element element = new Element(Tag.valueOf("div"), ""); [EOL] Elements children = element.children(); [EOL] assertTrue(children.isEmpty()); [EOL] }
public void testChildren_withChildElements() { [EOL] Element parent = new Element(Tag.valueOf("div"), ""); [EOL] parent.appendChild(new Element(Tag.valueOf("p"), "")); [EOL] parent.appendChild(new TextNode("Some text")); [EOL] parent.appendChild(new Element(Tag.valueOf("span"), "")); [EOL] Elements children = parent.children(); [EOL] assertEquals(2, children.size()); [EOL] assertEquals("p", children.get(0).tagName()); [EOL] assertEquals("span", children.get(1).tagName()); [EOL] }
public void testSelectWithValidQuery() { [EOL] Document doc = Jsoup.parse("<div><p>Hello</p></div>"); [EOL] Elements elements = doc.select("p"); [EOL] assertNotNull(elements); [EOL] assertEquals(1, elements.size()); [EOL] assertEquals("Hello", elements.first().text()); [EOL] }
public void testSelectWithInvalidQuery() { [EOL] Document doc = Jsoup.parse("<div><p>Hello</p></div>"); [EOL] try { [EOL] Elements elements = doc.select("><"); [EOL] fail("Selector.select should throw an exception for invalid query"); [EOL] } catch (Selector.SelectorParseException e) { [EOL] } [EOL] }
public void testSelectWithEmptyQuery() { [EOL] Document doc = Jsoup.parse("<div><p>Hello</p></div>"); [EOL] Elements elements = doc.select(""); [EOL] assertNotNull(elements); [EOL] assertTrue(elements.isEmpty()); [EOL] }
public void testAppendChildWithNonNull() { [EOL] Element parent = new Element(Tag.valueOf("div"), ""); [EOL] Node child = new TextNode("child", ""); [EOL] Element result = parent.appendChild(child); [EOL] assertNotNull(result); [EOL] assertEquals("div", result.tagName()); [EOL] assertEquals(1, result.childNodeSize()); [EOL] assertEquals(child, result.childNode(0)); [EOL] assertEquals(parent, child.parentNode()); [EOL] }
public void testAppendChildWithNull() { [EOL] Element parent = new Element(Tag.valueOf("div"), ""); [EOL] try { [EOL] parent.appendChild(null); [EOL] fail("Should throw IllegalArgumentException for null child"); [EOL] } catch (IllegalArgumentException e) { [EOL] } [EOL] }
public void testPrependChildWithNonNull() { [EOL] Element parent = new Element(Tag.valueOf("div"), ""); [EOL] Node child = new Element(Tag.valueOf("p"), ""); [EOL] Element result = parent.prependChild(child); [EOL] assertEquals(child, parent.childNode(0)); [EOL] assertSame(parent, result); [EOL] }
public void testPrependChildWithNull() { [EOL] Element parent = new Element(Tag.valueOf("div"), ""); [EOL] try { [EOL] parent.prependChild(null); [EOL] fail("prependChild should throw IllegalArgumentException for null child"); [EOL] } catch (IllegalArgumentException e) { [EOL] } [EOL] }
public void testAppendElementWithValidTagName() { [EOL] Document doc = Jsoup.parse("<div></div>"); [EOL] Element div = doc.select("div").first(); [EOL] Element appended = div.appendElement("span"); [EOL] assertNotNull(appended); [EOL] assertEquals("span", appended.tagName()); [EOL] assertTrue(div.children().contains(appended)); [EOL] }
public void testAppendElementWithEmptyTagName() { [EOL] Document doc = Jsoup.parse("<div></div>"); [EOL] Element div = doc.select("div").first(); [EOL] try { [EOL] div.appendElement(""); [EOL] fail("Should throw IllegalArgumentException for empty tag name"); [EOL] } catch (IllegalArgumentException e) { [EOL] } [EOL] }
public void testAppendElementWithNullTagName() { [EOL] Document doc = Jsoup.parse("<div></div>"); [EOL] Element div = doc.select("div").first(); [EOL] try { [EOL] div.appendElement(null); [EOL] fail("Should throw IllegalArgumentException for null tag name"); [EOL] } catch (IllegalArgumentException e) { [EOL] } [EOL] }
public void testAppendTextWithEmptyString() { [EOL] Element element = new Element(Tag.valueOf("div"), ""); [EOL] Element result = element.appendText(""); [EOL] assertEquals("", result.text()); [EOL] assertEquals("div", result.tagName()); [EOL] }
public void testAppendTextWithNonEmptyString() { [EOL] Element element = new Element(Tag.valueOf("p"), ""); [EOL] Element result = element.appendText("Some text"); [EOL] assertEquals("Some text", result.text()); [EOL] assertEquals("p", result.tagName()); [EOL] }
public void testAppendTextToExistingText() { [EOL] Element element = new Element(Tag.valueOf("span"), "").text("Initial text. "); [EOL] Element result = element.appendText("Appended text"); [EOL] assertEquals("Initial text. Appended text", result.text()); [EOL] assertEquals("span", result.tagName()); [EOL] }
public void testAppendWithValidHtml() { [EOL] Element element = new Element(Tag.valueOf("div"), ""); [EOL] String htmlToAppend = "<p>Paragraph</p>"; [EOL] Element result = element.append(htmlToAppend); [EOL] assertNotNull(result); [EOL] assertEquals("div", result.tagName()); [EOL] assertEquals(1, result.children().size()); [EOL] assertEquals("p", result.child(0).tagName()); [EOL] assertEquals("Paragraph", result.child(0).text()); [EOL] }
public void testAppendWithEmptyString() { [EOL] Element element = new Element(Tag.valueOf("div"), ""); [EOL] String htmlToAppend = ""; [EOL] Element result = element.append(htmlToAppend); [EOL] assertNotNull(result); [EOL] assertEquals("div", result.tagName()); [EOL] assertEquals(0, result.children().size()); [EOL] }
public void testAppendWithNull() { [EOL] Element element = new Element(Tag.valueOf("div"), ""); [EOL] try { [EOL] element.append(null); [EOL] fail("append should throw NullPointerException when html is null"); [EOL] } catch (NullPointerException e) { [EOL] } [EOL] }
public void testPrependWithValidHtml() { [EOL] Element element = new Element(Tag.valueOf("div"), ""); [EOL] String htmlToPrepend = "<p>Prepended</p>"; [EOL] element.prepend(htmlToPrepend); [EOL] assertEquals("<div><p>Prepended</p></div>", element.outerHtml()); [EOL] }
public void testPrependWithEmptyString() { [EOL] Element element = new Element(Tag.valueOf("div"), ""); [EOL] String htmlToPrepend = ""; [EOL] element.prepend(htmlToPrepend); [EOL] assertEquals("<div></div>", element.outerHtml()); [EOL] }
public void testPrependWithNull() { [EOL] Element element = new Element(Tag.valueOf("div"), ""); [EOL] try { [EOL] element.prepend(null); [EOL] fail("prepend(null) should throw IllegalArgumentException"); [EOL] } catch (IllegalArgumentException expected) { [EOL] } [EOL] }
public void testEmpty() { [EOL] Element element = new Element(Tag.valueOf("div"), ""); [EOL] element.appendChild(new Element(Tag.valueOf("span"), "")); [EOL] element.appendChild(new TextNode("Some text", "")); [EOL] Element result = element.empty(); [EOL] assertTrue(element.childNodes().isEmpty()); [EOL] assertSame(element, result); [EOL] }
public void testNextElementSibling_withSibling() { [EOL] Element parent = new Element(Tag.valueOf("div"), ""); [EOL] Element firstChild = new Element(Tag.valueOf("p"), ""); [EOL] Element secondChild = new Element(Tag.valueOf("span"), ""); [EOL] parent.appendChild(firstChild); [EOL] parent.appendChild(secondChild); [EOL] Element result = firstChild.nextElementSibling(); [EOL] assertNotNull(result); [EOL] assertEquals("span", result.tagName()); [EOL] }
public void testNextElementSibling_noSibling() { [EOL] Element parent = new Element(Tag.valueOf("div"), ""); [EOL] Element onlyChild = new Element(Tag.valueOf("p"), ""); [EOL] parent.appendChild(onlyChild); [EOL] Element result = onlyChild.nextElementSibling(); [EOL] assertNull(result); [EOL] }
public void testNextElementSibling_nullParent() { [EOL] Element orphan = new Element(Tag.valueOf("p"), ""); [EOL] try { [EOL] orphan.nextElementSibling(); [EOL] fail("Should throw NullPointerException because the parent is null"); [EOL] } catch (NullPointerException e) { [EOL] } [EOL] }
public void testFirstElementSibling_WithSiblings() { [EOL] Element parent = new Element(Tag.valueOf("div"), ""); [EOL] Element firstChild = new Element(Tag.valueOf("p"), ""); [EOL] Element secondChild = new Element(Tag.valueOf("span"), ""); [EOL] parent.appendChild(firstChild); [EOL] parent.appendChild(secondChild); [EOL] Element result = firstChild.firstElementSibling(); [EOL] assertNotNull(result); [EOL] assertEquals(secondChild, result); [EOL] }
public void testFirstElementSibling_WithoutSiblings() { [EOL] Element parent = new Element(Tag.valueOf("div"), ""); [EOL] Element child = new Element(Tag.valueOf("p"), ""); [EOL] parent.appendChild(child); [EOL] Element result = child.firstElementSibling(); [EOL] assertNull(result); [EOL] }
public void testFirstElementSibling_WithNullParent() { [EOL] Element child = new Element(Tag.valueOf("p"), ""); [EOL] Element result = child.firstElementSibling(); [EOL] assertNull(result); [EOL] }
public void testLastElementSibling_WithMultipleSiblings() { [EOL] Element parent = new Element(Tag.valueOf("div"), ""); [EOL] Element firstChild = new Element(Tag.valueOf("p"), ""); [EOL] Element lastChild = new Element(Tag.valueOf("span"), ""); [EOL] parent.appendChild(firstChild); [EOL] parent.appendChild(lastChild); [EOL] Element result = lastChild.lastElementSibling(); [EOL] assertSame(lastChild, result); [EOL] }
public void testLastElementSibling_WithSingleChild() { [EOL] Element parent = new Element(Tag.valueOf("div"), ""); [EOL] Element onlyChild = new Element(Tag.valueOf("p"), ""); [EOL] parent.appendChild(onlyChild); [EOL] Element result = onlyChild.lastElementSibling(); [EOL] assertNull(result); [EOL] }
public void testLastElementSibling_WithNoSiblings() { [EOL] Element parent = new Element(Tag.valueOf("div"), ""); [EOL] Element child = new Element(Tag.valueOf("p"), ""); [EOL] Element result = child.lastElementSibling(); [EOL] assertNull(result); [EOL] }
public void testGetElementsByTag_withValidTag() { [EOL] Document doc = Jsoup.parse("<div><p>Hello</p><p>World</p></div>"); [EOL] Elements elements = doc.getElementsByTag("p"); [EOL] assertNotNull(elements); [EOL] assertEquals(2, elements.size()); [EOL] assertEquals("Hello", elements.get(0).text()); [EOL] assertEquals("World", elements.get(1).text()); [EOL] }
public void testGetElementsByTag_withEmptyTag() { [EOL] Document doc = Jsoup.parse("<div><p>Hello</p><p>World</p></div>"); [EOL] try { [EOL] doc.getElementsByTag(""); [EOL] fail("Should have thrown IllegalArgumentException for empty tag name"); [EOL] } catch (IllegalArgumentException e) { [EOL] } [EOL] }
public void testGetElementsByTag_withWhitespaceTag() { [EOL] Document doc = Jsoup.parse("<div><p>Hello</p><p>World</p></div>"); [EOL] Elements elements = doc.getElementsByTag(" p "); [EOL] assertNotNull(elements); [EOL] assertEquals(2, elements.size()); [EOL] assertEquals("Hello", elements.get(0).text()); [EOL] assertEquals("World", elements.get(1).text()); [EOL] }
public void testGetElementsByTag_withCaseInsensitiveTag() { [EOL] Document doc = Jsoup.parse("<div><P>Hello</P><p>World</p></div>"); [EOL] Elements elements = doc.getElementsByTag("P"); [EOL] assertNotNull(elements); [EOL] assertEquals(2, elements.size()); [EOL] assertEquals("Hello", elements.get(0).text()); [EOL] assertEquals("World", elements.get(1).text()); [EOL] }
public void testGetElementsByClassWithNonEmptyClassName() { [EOL] Document doc = Jsoup.parse("<div class='class1'></div><div class='class2'></div>"); [EOL] Elements elements = doc.getElementsByClass("class1"); [EOL] assertNotNull(elements); [EOL] assertEquals(1, elements.size()); [EOL] assertEquals("class1", elements.first().className()); [EOL] }
public void testGetElementsByClassWithEmptyClassName() { [EOL] Document doc = Jsoup.parse("<div class=''></div>"); [EOL] try { [EOL] doc.getElementsByClass(""); [EOL] fail("Should have thrown IllegalArgumentException for empty class name"); [EOL] } catch (IllegalArgumentException e) { [EOL] } [EOL] }
public void testGetElementsByClassWithNonExistingClassName() { [EOL] Document doc = Jsoup.parse("<div class='class1'></div>"); [EOL] Elements elements = doc.getElementsByClass("class2"); [EOL] assertNotNull(elements); [EOL] assertTrue(elements.isEmpty()); [EOL] }
public void testPreserveWhitespace_trueForTag() { [EOL] Element element = new Element(Tag.valueOf("pre"), ""); [EOL] assertTrue(element.preserveWhitespace()); [EOL] }
public void testPreserveWhitespace_falseForTag() { [EOL] Element element = new Element(Tag.valueOf("div"), ""); [EOL] assertFalse(element.preserveWhitespace()); [EOL] }
public void testPreserveWhitespace_trueForParent() { [EOL] Element parent = new Element(Tag.valueOf("pre"), ""); [EOL] Element child = new Element(Tag.valueOf("div"), ""); [EOL] parent.appendChild(child); [EOL] assertTrue(child.preserveWhitespace()); [EOL] }
public void testPreserveWhitespace_falseForParent() { [EOL] Element parent = new Element(Tag.valueOf("div"), ""); [EOL] Element child = new Element(Tag.valueOf("div"), ""); [EOL] parent.appendChild(child); [EOL] assertFalse(child.preserveWhitespace()); [EOL] }
public void testOuterHtmlWithBlockElement() { [EOL] Element blockElement = new Element(Tag.valueOf("div"), ""); [EOL] StringBuilder accum = new StringBuilder(); [EOL] blockElement.outerHtml(accum); [EOL] String result = accum.toString(); [EOL] assertTrue(result.startsWith("<div")); [EOL] assertTrue(result.endsWith("</div>")); [EOL] }
public void testOuterHtmlWithNonBlockElement() { [EOL] Element inlineElement = new Element(Tag.valueOf("span"), ""); [EOL] StringBuilder accum = new StringBuilder(); [EOL] inlineElement.outerHtml(accum); [EOL] String result = accum.toString(); [EOL] assertTrue(result.startsWith("<span")); [EOL] assertTrue(result.endsWith("</span>")); [EOL] }
public void testOuterHtmlWithSelfClosingTag() { [EOL] Element selfClosingElement = new Element(Tag.valueOf("img"), ""); [EOL] StringBuilder accum = new StringBuilder(); [EOL] selfClosingElement.outerHtml(accum); [EOL] String result = accum.toString(); [EOL] assertTrue(result.startsWith("<img")); [EOL] assertTrue(result.endsWith(" />")); [EOL] }
public void testOuterHtmlWithFirstChildBlockElement() { [EOL] Element parentElement = new Element(Tag.valueOf("div"), ""); [EOL] Element firstChildBlockElement = parentElement.appendElement("p"); [EOL] StringBuilder accum = new StringBuilder(); [EOL] firstChildBlockElement.outerHtml(accum); [EOL] String result = accum.toString(); [EOL] assertTrue(result.startsWith("    <p")); [EOL] assertTrue(result.endsWith("</p>")); [EOL] }
public void testOuterHtmlWithNonFirstChildBlockElement() { [EOL] Element parentElement = new Element(Tag.valueOf("div"), ""); [EOL] parentElement.appendElement("p"); // first child [EOL] Element secondChildBlockElement = parentElement.appendElement("p"); [EOL] StringBuilder accum = new StringBuilder(); [EOL] secondChildBlockElement.outerHtml(accum); [EOL] String result = accum.toString(); [EOL] assertFalse(result.startsWith("    <p")); [EOL] assertTrue(result.endsWith("</p>")); [EOL] }
public void testHtmlWithNoChildren() { [EOL] Element element = new Element(Tag.valueOf("div"), ""); [EOL] StringBuilder accum = new StringBuilder(); [EOL] element.html(accum); [EOL] assertEquals("", accum.toString()); [EOL] }
public void testHtmlWithOneChild() { [EOL] Element element = new Element(Tag.valueOf("div"), ""); [EOL] element.appendChild(new TextNode("Hello", "")); [EOL] StringBuilder accum = new StringBuilder(); [EOL] element.html(accum); [EOL] assertEquals("Hello", accum.toString()); [EOL] }
public void testHtmlWithMultipleChildren() { [EOL] Element element = new Element(Tag.valueOf("div"), ""); [EOL] element.appendChild(new TextNode("Hello", "")); [EOL] element.appendChild(new Element(Tag.valueOf("p"), "").text("World")); [EOL] StringBuilder accum = new StringBuilder(); [EOL] element.html(accum); [EOL] assertEquals("Hello<p>World</p>", accum.toString()); [EOL] }
public void testHtmlWithEmptyString() { [EOL] Element element = new Element(Tag.valueOf("div"), ""); [EOL] Element result = element.html(""); [EOL] assertEquals("", result.html()); [EOL] assertSame(element, result); [EOL] }
public void testHtmlWithNonEmptyString() { [EOL] Element element = new Element(Tag.valueOf("div"), ""); [EOL] String testHtml = "<p>Test</p>"; [EOL] Element result = element.html(testHtml); [EOL] assertEquals(testHtml, result.html()); [EOL] assertSame(element, result); [EOL] }
public void testElementEquals_SameObject() { [EOL] Element element = new Element(Tag.valueOf("div"), ""); [EOL] boolean result = element.equals(element); [EOL] assertTrue(result); [EOL] }
public void testElementEquals_DifferentClass() { [EOL] Element element = new Element(Tag.valueOf("div"), ""); [EOL] Object o = new Object(); [EOL] boolean result = element.equals(o); [EOL] assertFalse(result); [EOL] }
public void testElementEquals_SuperNotEquals() { [EOL] Element element1 = new Element(Tag.valueOf("div"), ""); [EOL] Element element2 = new Element(Tag.valueOf("p"), "") { [EOL] @Override [EOL] public int hashCode() { [EOL] return 1; // Different hash code to ensure super.equals returns false [EOL] } [EOL] }; [EOL] boolean result = element1.equals(element2); [EOL] assertFalse(result); [EOL] }
public void testElementEquals_DifferentTags() { [EOL] Element element1 = new Element(Tag.valueOf("div"), ""); [EOL] Element element2 = new Element(Tag.valueOf("p"), ""); [EOL] boolean result = element1.equals(element2); [EOL] assertFalse(result); [EOL] }
public void testElementEquals_EqualElements() { [EOL] Element element1 = new Element(Tag.valueOf("div"), ""); [EOL] Element element2 = new Element(Tag.valueOf("div"), ""); [EOL] boolean result = element1.equals(element2); [EOL] assertTrue(result); [EOL] }
public void testHashCodeWithNonNullTag() { [EOL] Element element = new Element(Tag.valueOf("p"), ""); [EOL] int result = element.hashCode(); [EOL] int expected = 31 * super.hashCode() + "p".hashCode(); [EOL] assertEquals(expected, result); [EOL] }
public void testHashCodeWithNullTag() { [EOL] Element element = new Element(null, ""); [EOL] int result = element.hashCode(); [EOL] int expected = 31 * super.hashCode(); [EOL] assertEquals(expected, result); [EOL] }
public void testParseStartTag_EmptyTagName() { [EOL] TokenQueue tq = new TokenQueue("<"); [EOL] parseStartTag(); [EOL] }
public void testParseStartTag_NonEmptyTagNameNoAttributes() { [EOL] TokenQueue tq = new TokenQueue("<div"); [EOL] parseStartTag(); [EOL] }
public void testParseStartTag_NonEmptyTagNameWithAttributes() { [EOL] TokenQueue tq = new TokenQueue("<div id='test'"); [EOL] parseStartTag(); [EOL] }
public void testParseStartTag_SelfClosingTag() { [EOL] TokenQueue tq = new TokenQueue("<img/>"); [EOL] parseStartTag(); [EOL] }
public void testParseStartTag_NonSelfClosingTag() { [EOL] TokenQueue tq = new TokenQueue("<div>"); [EOL] parseStartTag(); [EOL] }
public void testParseStartTag_DataTag() { [EOL] TokenQueue tq = new TokenQueue("<script>var a = 1;</script>"); [EOL] parseStartTag(); [EOL] }
public void testParseStartTag_BaseTagWithHref() { [EOL] TokenQueue tq = new TokenQueue("<base href='http://example.com/'>"); [EOL] parseStartTag(); [EOL] }
public void testParseAttributeWithNoKeyAndNoValue() { [EOL] TokenQueue tq = new TokenQueue(""); [EOL] Attribute result = parseAttribute(tq); [EOL] assertNull(result); [EOL] } [EOL] public void testParseAttributeWithKeyAndNoValue() { [EOL] TokenQueue tq = new TokenQueue("key"); [EOL] Attribute result = parseAttribute(tq); [EOL] assertNotNull(result); [EOL] assertEquals("key", result.getKey()); [EOL] assertEquals("", result.getValue()); [EOL] } [EOL] public void testParseAttributeWithKeyAndValueNoQuotes() { [EOL] TokenQueue tq = new TokenQueue("key=value"); [EOL] Attribute result = parseAttribute(tq); [EOL] assertNotNull(result); [EOL] assertEquals("key", result.getKey()); [EOL] assertEquals("value", result.getValue()); [EOL] } [EOL] public void testParseAttributeWithKeyAndValueSingleQuotes() { [EOL] TokenQueue tq = new TokenQueue("key='value'"); [EOL] Attribute result = parseAttribute(tq); [EOL] assertNotNull(result); [EOL] assertEquals("key", result.getKey()); [EOL] assertEquals("value", result.getValue()); [EOL] } [EOL] public void testParseAttributeWithKeyAndValueDoubleQuotes() { [EOL] TokenQueue tq = new TokenQueue("key=\"value\""); [EOL] Attribute result = parseAttribute(tq); [EOL] assertNotNull(result); [EOL] assertEquals("key", result.getKey()); [EOL] assertEquals("value", result.getValue()); [EOL] }
public void testParseAttributeWithKeyAndComplexValue() { [EOL] TokenQueue tq = new TokenQueue("key=value>something"); [EOL] Attribute result = parseAttribute(tq); [EOL] assertNotNull(result); [EOL] assertEquals("key", result.getKey()); [EOL] assertEquals("value", result.getValue()); [EOL] } [EOL] public void testParseAttributeWithKeyAndValueWithSpaces() { [EOL] TokenQueue tq = new TokenQueue("key = value"); [EOL] Attribute result = parseAttribute(tq); [EOL] assertNotNull(result); [EOL] assertEquals("key", result.getKey()); [EOL] assertEquals("value", result.getValue()); [EOL] }
public void testParseAttributeWithEmptyQueue() { [EOL] TokenQueue tq = new TokenQueue(""); [EOL] Attribute result = parseAttribute(tq); [EOL] assertNull(result); [EOL] } [EOL] public void testParseAttributeWithWhitespaceOnly() { [EOL] TokenQueue tq = new TokenQueue("   "); [EOL] Attribute result = parseAttribute(tq); [EOL] assertNull(result); [EOL] }
public void testAttributeConstructorWithValidArguments() { [EOL] String key = "href"; [EOL] String value = "https://example.com"; [EOL] Attribute attribute = new Attribute(key, value); [EOL] assertEquals("href", attribute.getKey()); [EOL] assertEquals("https://example.com", attribute.getValue()); [EOL] } [EOL] public void testAttributeConstructorWithEmptyKey() { [EOL] try { [EOL] String key = ""; [EOL] String value = "https://example.com"; [EOL] new Attribute(key, value); [EOL] fail("Should have thrown IllegalArgumentException for empty key"); [EOL] } catch (IllegalArgumentException e) { [EOL] } [EOL] } [EOL] public void testAttributeConstructorWithNullValue() { [EOL] try { [EOL] String key = "href"; [EOL] String value = null; [EOL] new Attribute(key, value); [EOL] fail("Should have thrown IllegalArgumentException for null value"); [EOL] } catch (IllegalArgumentException e) { [EOL] } [EOL] } [EOL] public void testAttributeConstructorWithKeyNeedingTrim() { [EOL] String key = " href "; [EOL] String value = "https://example.com"; [EOL] Attribute attribute = new Attribute(key, value); [EOL] assertEquals("href", attribute.getKey()); [EOL] assertEquals("https://example.com", attribute.getValue()); [EOL] } [EOL] public void testAttributeConstructorWithUpperCaseKey() { [EOL] String key = "HREF"; [EOL] String value = "https://example.com"; [EOL] Attribute attribute = new Attribute(key, value); [EOL] assertEquals("href", attribute.getKey()); [EOL] assertEquals("https://example.com", attribute.getValue()); [EOL] }
public void testGetKey() { [EOL] Element element = new Element(Tag.valueOf("div"), ""); [EOL] element.attr("key", "value"); [EOL] String key = element.attr("key"); [EOL] assertEquals("value", key); [EOL] }
public void testGetValue() { [EOL] MyClass instance = new MyClass("someValue"); [EOL] String result = instance.getValue(); [EOL] assertEquals("someValue", result); [EOL] }
public void testCreateFromEncoded_withEncodedValue() { [EOL] String unencodedKey = "data-key"; [EOL] String encodedValue = "Some &quot;encoded&quot; value"; [EOL] Attribute result = Attribute.createFromEncoded(unencodedKey, encodedValue); [EOL] assertEquals("data-key", result.getKey()); [EOL] assertEquals("Some \"encoded\" value", result.getValue()); [EOL] }
public void testCreateFromEncoded_withUnencodedValue() { [EOL] String unencodedKey = "data-key"; [EOL] String encodedValue = "Some unencoded value"; [EOL] Attribute result = Attribute.createFromEncoded(unencodedKey, encodedValue); [EOL] assertEquals("data-key", result.getKey()); [EOL] assertEquals("Some unencoded value", result.getValue()); [EOL] }
public void testIsSafeAttribute_TagInAttributesKeyNotInProtocols() { [EOL] String tagName = "a"; [EOL] Element el = new Element(Tag.valueOf(tagName), ""); [EOL] Attribute attr = new Attribute("href", "http://example.com"); [EOL] CleanerProperties props = new CleanerProperties(); [EOL] assertTrue(props.isSafeAttribute(tagName, el, attr)); [EOL] } [EOL] public void testIsSafeAttribute_TagAndKeyInAttributesAndProtocolsValidProtocol() { [EOL] String tagName = "a"; [EOL] Element el = new Element(Tag.valueOf(tagName), ""); [EOL] Attribute attr = new Attribute("href", "javascript:alert(1)"); [EOL] CleanerProperties props = new CleanerProperties(); [EOL] props.addProtocols(tagName, "href", "http", "https"); [EOL] assertTrue(props.isSafeAttribute(tagName, el, attr)); [EOL] } [EOL] public void testIsSafeAttribute_TagAndKeyInAttributesAndProtocolsInvalidProtocol() { [EOL] String tagName = "a"; [EOL] Element el = new Element(Tag.valueOf(tagName), ""); [EOL] Attribute attr = new Attribute("href", "javascript:alert(1)"); [EOL] CleanerProperties props = new CleanerProperties(); [EOL] props.addProtocols(tagName, "href", "http", "https"); [EOL] assertFalse(props.isSafeAttribute(tagName, el, attr)); [EOL] } [EOL] public void testIsSafeAttribute_TagNotInAttributes() { [EOL] String tagName = "b"; [EOL] Element el = new Element(Tag.valueOf(tagName), ""); [EOL] Attribute attr = new Attribute("onclick", "alert(1)"); [EOL] CleanerProperties props = new CleanerProperties(); [EOL] assertFalse(props.isSafeAttribute(tagName, el, attr)); [EOL] } [EOL] public void testIsSafeAttribute_AllTag() { [EOL] String tagName = ":all"; [EOL] Element el = new Element(Tag.valueOf("div"), ""); [EOL] Attribute attr = new Attribute("class", "example"); [EOL] CleanerProperties props = new CleanerProperties(); [EOL] assertTrue(props.isSafeAttribute(tagName, el, attr)); [EOL] } [EOL] public void testIsSafeAttribute_RecursiveCallForAllTag() { [EOL] String tagName = "b"; [EOL] Element el = new Element(Tag.valueOf(tagName), ""); [EOL] Attribute attr = new Attribute("class", "example"); [EOL] CleanerProperties props = new CleanerProperties(); [EOL] props.addAttributes(":all", "class"); [EOL] assertTrue(props.isSafeAttribute(tagName, el, attr)); [EOL] }
public void testParseWithEmptyString() { [EOL] Document doc = Jsoup.parse(""); [EOL] assertNotNull(doc); [EOL] assertEquals("", doc.body().text()); [EOL] }
public void testParseWithSimpleHtml() { [EOL] String html = "<html><head><title>First parse</title></head>" [EOL] + "<body><p>Parsed HTML into a doc.</p></body></html>"; [EOL] Document doc = Jsoup.parse(html); [EOL] assertNotNull(doc); [EOL] assertEquals("First parse", doc.title()); [EOL] assertEquals("Parsed HTML into a doc.", doc.body().text()); [EOL] }
public void testParseWithNullInput() { [EOL] assertThrows(IllegalArgumentException.class, () -> { [EOL] Jsoup.parse(null); [EOL] }); [EOL] }
public void testParseBodyFragmentWithNullBodyHtml() { [EOL] Document result = Jsoup.parseBodyFragment(null, "http://example.com"); [EOL] assertNotNull(result); [EOL] assertTrue(result.body().childNodes().isEmpty()); [EOL] }
public void testParseBodyFragmentWithEmptyBodyHtml() { [EOL] Document result = Jsoup.parseBodyFragment("", "http://example.com"); [EOL] assertNotNull(result); [EOL] assertTrue(result.body().childNodes().isEmpty()); [EOL] }
public void testParseBodyFragmentWithValidBodyHtml() { [EOL] String bodyHtml = "<div><p>Hello, World!</p></div>"; [EOL] Document result = Jsoup.parseBodyFragment(bodyHtml, "http://example.com"); [EOL] assertNotNull(result); [EOL] assertEquals("Hello, World!", result.body().text()); [EOL] }
public void testParseBodyFragmentWithBaseUriNull() { [EOL] String bodyHtml = "<div><p>Hello, World!</p></div>"; [EOL] Document result = Jsoup.parseBodyFragment(bodyHtml, null); [EOL] assertNotNull(result); [EOL] assertEquals("", result.baseUri()); [EOL] }
public void testIsValidWithValidHtml() { [EOL] String bodyHtml = "<p>Valid paragraph</p>"; [EOL] Whitelist whitelist = Whitelist.simpleText(); [EOL] boolean isValid = Jsoup.isValid(bodyHtml, whitelist); [EOL] assertTrue(isValid); [EOL] } [EOL] public void testIsValidWithInvalidHtml() { [EOL] String bodyHtml = "<script>alert('xss');</script>"; [EOL] Whitelist whitelist = Whitelist.simpleText(); [EOL] boolean isValid = Jsoup.isValid(bodyHtml, whitelist); [EOL] assertFalse(isValid); [EOL] } [EOL] public void testIsValidWithEmptyString() { [EOL] String bodyHtml = ""; [EOL] Whitelist whitelist = Whitelist.simpleText(); [EOL] boolean isValid = Jsoup.isValid(bodyHtml, whitelist); [EOL] assertTrue(isValid); [EOL] } [EOL] public void testIsValidWithNullWhitelist() { [EOL] String bodyHtml = "<p>Valid paragraph</p>"; [EOL] Whitelist whitelist = null; [EOL] try { [EOL] Jsoup.isValid(bodyHtml, whitelist); [EOL] fail("Should have thrown NullPointerException"); [EOL] } catch (NullPointerException e) { [EOL] } [EOL] } [EOL] public void testIsValidWithNullBodyHtml() { [EOL] String bodyHtml = null; [EOL] Whitelist whitelist = Whitelist.simpleText(); [EOL] try { [EOL] Jsoup.isValid(bodyHtml, whitelist); [EOL] fail("Should have thrown IllegalArgumentException"); [EOL] } catch (IllegalArgumentException e) { [EOL] } [EOL] }
public void testCanContain_BlockChildCannotContainBlock() { [EOL] Tag parent = new Tag("div"); [EOL] parent.canContainBlock = false; [EOL] Tag child = new Tag("p"); [EOL] child.isBlock = true; [EOL] assertFalse(parent.canContain(child)); [EOL] }
public void testCanContain_InlineChildCannotContainInline() { [EOL] Tag parent = new Tag("span"); [EOL] parent.canContainInline = false; [EOL] Tag child = new Tag("span"); [EOL] child.isBlock = false; [EOL] assertFalse(parent.canContain(child)); [EOL] }
public void testCanContain_OptionalClosingSameTag() { [EOL] Tag parent = new Tag("div"); [EOL] parent.optionalClosing = true; [EOL] Tag child = new Tag("div"); [EOL] assertTrue(parent.equals(child)); [EOL] assertFalse(parent.canContain(child)); [EOL] }
public void testCanContain_EmptyTag() { [EOL] Tag parent = new Tag("br"); [EOL] parent.empty = true; [EOL] Tag child = new Tag("span"); [EOL] assertFalse(parent.canContain(child)); [EOL] }
public void testCanContain_IsDataTag() { [EOL] Tag parent = new Tag("script"); [EOL] parent.isData = true; [EOL] Tag child = new Tag("div"); [EOL] assertFalse(parent.canContain(child)); [EOL] }
public void testCanContain_HeadTagWithValidChild() { [EOL] Tag parent = new Tag("head"); [EOL] Tag child = new Tag("meta"); [EOL] assertTrue(parent.canContain(child)); [EOL] }
public void testCanContain_HeadTagWithInvalidChild() { [EOL] Tag parent = new Tag("head"); [EOL] Tag child = new Tag("div"); [EOL] assertFalse(parent.canContain(child)); [EOL] }
public void testCanContain_DtTagWithDdChild() { [EOL] Tag parent = new Tag("dt"); [EOL] Tag child = new Tag("dd"); [EOL] assertFalse(parent.canContain(child)); [EOL] }
public void testCanContain_DdTagWithDtChild() { [EOL] Tag parent = new Tag("dd"); [EOL] Tag child = new Tag("dt"); [EOL] assertFalse(parent.canContain(child)); [EOL] }
public void testCanContain_ValidParentChildCombination() { [EOL] Tag parent = new Tag("body"); [EOL] Tag child = new Tag("div"); [EOL] assertTrue(parent.canContain(child)); [EOL] }
