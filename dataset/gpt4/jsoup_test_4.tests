@Test [EOL] public void handlesAbsPrefix() { [EOL]     Document doc = Jsoup.parse("<a href=/foo>Hello</a>", "http://jsoup.org/"); [EOL]     Element a = doc.select("a").first(); [EOL]     assertEquals("/foo", a.attr("href")); [EOL]     assertEquals("http://jsoup.org/foo", a.attr("abs:href")); [EOL]     assertFalse(a.hasAttr("abs:href")); [EOL] }
@Test [EOL] public void handlesAbsPrefix() { [EOL]     Document doc = Jsoup.parse("<a href=/foo>Hello</a>", "http://jsoup.org/"); [EOL]     Element a = doc.select("a").first(); [EOL]     assertEquals("/foo", a.attr("href")); [EOL]     assertEquals("http://jsoup.org/foo", a.attr("abs:href")); [EOL]     assertFalse(a.hasAttr("abs:href")); [EOL] }
@Test [EOL] public void handlesAbsPrefix() { [EOL]     Document doc = Jsoup.parse("<a href=/foo>Hello</a>", "http://jsoup.org/"); [EOL]     Element a = doc.select("a").first(); [EOL]     assertEquals("/foo", a.attr("href")); [EOL]     assertEquals("http://jsoup.org/foo", a.attr("abs:href")); [EOL]     assertFalse(a.hasAttr("abs:href")); [EOL] }
@Test [EOL] public void handlesAbsPrefix() { [EOL]     Document doc = Jsoup.parse("<a href=/foo>Hello</a>", "http://jsoup.org/"); [EOL]     Element a = doc.select("a").first(); [EOL]     assertEquals("/foo", a.attr("href")); [EOL]     assertEquals("http://jsoup.org/foo", a.attr("abs:href")); [EOL]     assertFalse(a.hasAttr("abs:href")); [EOL] }
@Test [EOL] public void handlesAbsPrefix() { [EOL]     Document doc = Jsoup.parse("<a href=/foo>Hello</a>", "http://jsoup.org/"); [EOL]     Element a = doc.select("a").first(); [EOL]     assertEquals("/foo", a.attr("href")); [EOL]     assertEquals("http://jsoup.org/foo", a.attr("abs:href")); [EOL]     assertFalse(a.hasAttr("abs:href")); [EOL] }
@Test [EOL] public void handlesAbsPrefix() { [EOL]     Document doc = Jsoup.parse("<a href=/foo>Hello</a>", "http://jsoup.org/"); [EOL]     Element a = doc.select("a").first(); [EOL]     assertEquals("/foo", a.attr("href")); [EOL]     assertEquals("http://jsoup.org/foo", a.attr("abs:href")); [EOL]     assertFalse(a.hasAttr("abs:href")); [EOL] }
@Test [EOL] public void handlesAbsPrefix() { [EOL]     Document doc = Jsoup.parse("<a href=/foo>Hello</a>", "http://jsoup.org/"); [EOL]     Element a = doc.select("a").first(); [EOL]     assertEquals("/foo", a.attr("href")); [EOL]     assertEquals("http://jsoup.org/foo", a.attr("abs:href")); [EOL]     assertFalse(a.hasAttr("abs:href")); [EOL] }
@Test [EOL] public void handlesAbsPrefix() { [EOL]     Document doc = Jsoup.parse("<a href=/foo>Hello</a>", "http://jsoup.org/"); [EOL]     Element a = doc.select("a").first(); [EOL]     assertEquals("/foo", a.attr("href")); [EOL]     assertEquals("http://jsoup.org/foo", a.attr("abs:href")); [EOL]     assertFalse(a.hasAttr("abs:href")); [EOL] }
@Test [EOL] public void handlesAbsPrefix() { [EOL]     Document doc = Jsoup.parse("<a href=/foo>Hello</a>", "http://jsoup.org/"); [EOL]     Element a = doc.select("a").first(); [EOL]     assertEquals("/foo", a.attr("href")); [EOL]     assertEquals("http://jsoup.org/foo", a.attr("abs:href")); [EOL]     assertFalse(a.hasAttr("abs:href")); [EOL] }
@Test [EOL] public void handlesAbsPrefix() { [EOL]     Document doc = Jsoup.parse("<a href=/foo>Hello</a>", "http://jsoup.org/"); [EOL]     Element a = doc.select("a").first(); [EOL]     assertEquals("/foo", a.attr("href")); [EOL]     assertEquals("http://jsoup.org/foo", a.attr("abs:href")); [EOL]     assertFalse(a.hasAttr("abs:href")); [EOL] }
@Test [EOL] public void attr() { [EOL]     Document doc = Jsoup.parse("<p title=foo><p title=bar><p class=foo><p class=bar>"); [EOL]     String classVal = doc.select("p").attr("class"); [EOL]     assertEquals("foo", classVal); [EOL] }
@Test [EOL] public void attr() { [EOL]     Document doc = Jsoup.parse("<p title=foo><p title=bar><p class=foo><p class=bar>"); [EOL]     String classVal = doc.select("p").attr("class"); [EOL]     assertEquals("foo", classVal); [EOL] }
@Test [EOL] public void outerHtml() { [EOL]     Document doc = Jsoup.parse("<div><p>Hello</p></div><div><p>There</p></div>"); [EOL]     Elements divs = doc.select("div"); [EOL]     assertEquals("<div><p>Hello</p></div><div><p>There</p></div>", TextUtil.stripNewlines(divs.outerHtml())); [EOL] }
@Test [EOL] public void outerHtml() { [EOL]     Document doc = Jsoup.parse("<div><p>Hello</p></div><div><p>There</p></div>"); [EOL]     Elements divs = doc.select("div"); [EOL]     assertEquals("<div><p>Hello</p></div><div><p>There</p></div>", TextUtil.stripNewlines(divs.outerHtml())); [EOL] }
@Test [EOL] public void outerHtml() { [EOL]     Document doc = Jsoup.parse("<div><p>Hello</p></div><div><p>There</p></div>"); [EOL]     Elements divs = doc.select("div"); [EOL]     assertEquals("<div><p>Hello</p></div><div><p>There</p></div>", TextUtil.stripNewlines(divs.outerHtml())); [EOL] }
@Test [EOL] public void wrap() { [EOL]     String h = "<p><b>This</b> is <b>jsoup</b></p>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     doc.select("b").wrap("<i></i>"); [EOL]     assertEquals("<p><i><b>This</b></i> is <i><b>jsoup</b></i></p>", doc.body().html()); [EOL] }
@Test [EOL] public void wrap() { [EOL]     String h = "<p><b>This</b> is <b>jsoup</b></p>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     doc.select("b").wrap("<i></i>"); [EOL]     assertEquals("<p><i><b>This</b></i> is <i><b>jsoup</b></i></p>", doc.body().html()); [EOL] }
@Test [EOL] public void wrap() { [EOL]     String h = "<p><b>This</b> is <b>jsoup</b></p>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     doc.select("b").wrap("<i></i>"); [EOL]     assertEquals("<p><i><b>This</b></i> is <i><b>jsoup</b></i></p>", doc.body().html()); [EOL] }
@Test [EOL] public void wrap() { [EOL]     String h = "<p><b>This</b> is <b>jsoup</b></p>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     doc.select("b").wrap("<i></i>"); [EOL]     assertEquals("<p><i><b>This</b></i> is <i><b>jsoup</b></i></p>", doc.body().html()); [EOL] }
@Test [EOL] public void wrap() { [EOL]     String h = "<p><b>This</b> is <b>jsoup</b></p>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     doc.select("b").wrap("<i></i>"); [EOL]     assertEquals("<p><i><b>This</b></i> is <i><b>jsoup</b></i></p>", doc.body().html()); [EOL] }
@Test [EOL] public void getElementsByTagName() { [EOL]     Document doc = Jsoup.parse(reference); [EOL]     List<Element> divs = doc.getElementsByTag("div"); [EOL]     assertEquals(2, divs.size()); [EOL]     assertEquals("div1", divs.get(0).id()); [EOL]     assertEquals("div2", divs.get(1).id()); [EOL]     List<Element> ps = doc.getElementsByTag("p"); [EOL]     assertEquals(2, ps.size()); [EOL]     assertEquals("Hello", ((TextNode) ps.get(0).childNode(0)).getWholeText()); [EOL]     assertEquals("Another ", ((TextNode) ps.get(1).childNode(0)).getWholeText()); [EOL]     List<Element> ps2 = doc.getElementsByTag("P"); [EOL]     assertEquals(ps, ps2); [EOL]     List<Element> imgs = doc.getElementsByTag("img"); [EOL]     assertEquals("foo.png", imgs.get(0).attr("src")); [EOL]     List<Element> empty = doc.getElementsByTag("wtf"); [EOL]     assertEquals(0, empty.size()); [EOL] }
@Test [EOL] public void getElementsByTagName() { [EOL]     Document doc = Jsoup.parse(reference); [EOL]     List<Element> divs = doc.getElementsByTag("div"); [EOL]     assertEquals(2, divs.size()); [EOL]     assertEquals("div1", divs.get(0).id()); [EOL]     assertEquals("div2", divs.get(1).id()); [EOL]     List<Element> ps = doc.getElementsByTag("p"); [EOL]     assertEquals(2, ps.size()); [EOL]     assertEquals("Hello", ((TextNode) ps.get(0).childNode(0)).getWholeText()); [EOL]     assertEquals("Another ", ((TextNode) ps.get(1).childNode(0)).getWholeText()); [EOL]     List<Element> ps2 = doc.getElementsByTag("P"); [EOL]     assertEquals(ps, ps2); [EOL]     List<Element> imgs = doc.getElementsByTag("img"); [EOL]     assertEquals("foo.png", imgs.get(0).attr("src")); [EOL]     List<Element> empty = doc.getElementsByTag("wtf"); [EOL]     assertEquals(0, empty.size()); [EOL] }
@Test [EOL] public void getElementsByTagName() { [EOL]     Document doc = Jsoup.parse(reference); [EOL]     List<Element> divs = doc.getElementsByTag("div"); [EOL]     assertEquals(2, divs.size()); [EOL]     assertEquals("div1", divs.get(0).id()); [EOL]     assertEquals("div2", divs.get(1).id()); [EOL]     List<Element> ps = doc.getElementsByTag("p"); [EOL]     assertEquals(2, ps.size()); [EOL]     assertEquals("Hello", ((TextNode) ps.get(0).childNode(0)).getWholeText()); [EOL]     assertEquals("Another ", ((TextNode) ps.get(1).childNode(0)).getWholeText()); [EOL]     List<Element> ps2 = doc.getElementsByTag("P"); [EOL]     assertEquals(ps, ps2); [EOL]     List<Element> imgs = doc.getElementsByTag("img"); [EOL]     assertEquals("foo.png", imgs.get(0).attr("src")); [EOL]     List<Element> empty = doc.getElementsByTag("wtf"); [EOL]     assertEquals(0, empty.size()); [EOL] }
@Test [EOL] public void getElementsByTagName() { [EOL]     Document doc = Jsoup.parse(reference); [EOL]     List<Element> divs = doc.getElementsByTag("div"); [EOL]     assertEquals(2, divs.size()); [EOL]     assertEquals("div1", divs.get(0).id()); [EOL]     assertEquals("div2", divs.get(1).id()); [EOL]     List<Element> ps = doc.getElementsByTag("p"); [EOL]     assertEquals(2, ps.size()); [EOL]     assertEquals("Hello", ((TextNode) ps.get(0).childNode(0)).getWholeText()); [EOL]     assertEquals("Another ", ((TextNode) ps.get(1).childNode(0)).getWholeText()); [EOL]     List<Element> ps2 = doc.getElementsByTag("P"); [EOL]     assertEquals(ps, ps2); [EOL]     List<Element> imgs = doc.getElementsByTag("img"); [EOL]     assertEquals("foo.png", imgs.get(0).attr("src")); [EOL]     List<Element> empty = doc.getElementsByTag("wtf"); [EOL]     assertEquals(0, empty.size()); [EOL] }
@Test [EOL] public void getElementsByTagName() { [EOL]     Document doc = Jsoup.parse(reference); [EOL]     List<Element> divs = doc.getElementsByTag("div"); [EOL]     assertEquals(2, divs.size()); [EOL]     assertEquals("div1", divs.get(0).id()); [EOL]     assertEquals("div2", divs.get(1).id()); [EOL]     List<Element> ps = doc.getElementsByTag("p"); [EOL]     assertEquals(2, ps.size()); [EOL]     assertEquals("Hello", ((TextNode) ps.get(0).childNode(0)).getWholeText()); [EOL]     assertEquals("Another ", ((TextNode) ps.get(1).childNode(0)).getWholeText()); [EOL]     List<Element> ps2 = doc.getElementsByTag("P"); [EOL]     assertEquals(ps, ps2); [EOL]     List<Element> imgs = doc.getElementsByTag("img"); [EOL]     assertEquals("foo.png", imgs.get(0).attr("src")); [EOL]     List<Element> empty = doc.getElementsByTag("wtf"); [EOL]     assertEquals(0, empty.size()); [EOL] }
@Test [EOL] public void getElementsByTagName() { [EOL]     Document doc = Jsoup.parse(reference); [EOL]     List<Element> divs = doc.getElementsByTag("div"); [EOL]     assertEquals(2, divs.size()); [EOL]     assertEquals("div1", divs.get(0).id()); [EOL]     assertEquals("div2", divs.get(1).id()); [EOL]     List<Element> ps = doc.getElementsByTag("p"); [EOL]     assertEquals(2, ps.size()); [EOL]     assertEquals("Hello", ((TextNode) ps.get(0).childNode(0)).getWholeText()); [EOL]     assertEquals("Another ", ((TextNode) ps.get(1).childNode(0)).getWholeText()); [EOL]     List<Element> ps2 = doc.getElementsByTag("P"); [EOL]     assertEquals(ps, ps2); [EOL]     List<Element> imgs = doc.getElementsByTag("img"); [EOL]     assertEquals("foo.png", imgs.get(0).attr("src")); [EOL]     List<Element> empty = doc.getElementsByTag("wtf"); [EOL]     assertEquals(0, empty.size()); [EOL] }
@Test [EOL] public void parentChildStar() { [EOL]     String h = "<div id=1><p>Hello<p><b>there</b></p></div><div id=2><span>Hi</span></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements divChilds = doc.select("div > *"); [EOL]     assertEquals(3, divChilds.size()); [EOL]     assertEquals("p", divChilds.get(0).tagName()); [EOL]     assertEquals("p", divChilds.get(1).tagName()); [EOL]     assertEquals("span", divChilds.get(2).tagName()); [EOL] }
@Test [EOL] public void testTitles() { [EOL]     Document noTitle = Jsoup.parse("<p>Hello</p>"); [EOL]     Document withTitle = Jsoup.parse("<title>First</title><title>Ignore</title><p>Hello</p>"); [EOL]     assertEquals("", noTitle.title()); [EOL]     noTitle.title("Hello"); [EOL]     assertEquals("Hello", noTitle.title()); [EOL]     assertEquals("Hello", noTitle.select("title").first().text()); [EOL]     assertEquals("First", withTitle.title()); [EOL]     withTitle.title("Hello"); [EOL]     assertEquals("Hello", withTitle.title()); [EOL]     assertEquals("Hello", withTitle.select("title").first().text()); [EOL] }
@Test [EOL] public void testTitles() { [EOL]     Document noTitle = Jsoup.parse("<p>Hello</p>"); [EOL]     Document withTitle = Jsoup.parse("<title>First</title><title>Ignore</title><p>Hello</p>"); [EOL]     assertEquals("", noTitle.title()); [EOL]     noTitle.title("Hello"); [EOL]     assertEquals("Hello", noTitle.title()); [EOL]     assertEquals("Hello", noTitle.select("title").first().text()); [EOL]     assertEquals("First", withTitle.title()); [EOL]     withTitle.title("Hello"); [EOL]     assertEquals("Hello", withTitle.title()); [EOL]     assertEquals("Hello", withTitle.select("title").first().text()); [EOL] }
@Test [EOL] public void testTitles() { [EOL]     Document noTitle = Jsoup.parse("<p>Hello</p>"); [EOL]     Document withTitle = Jsoup.parse("<title>First</title><title>Ignore</title><p>Hello</p>"); [EOL]     assertEquals("", noTitle.title()); [EOL]     noTitle.title("Hello"); [EOL]     assertEquals("Hello", noTitle.title()); [EOL]     assertEquals("Hello", noTitle.select("title").first().text()); [EOL]     assertEquals("First", withTitle.title()); [EOL]     withTitle.title("Hello"); [EOL]     assertEquals("Hello", withTitle.title()); [EOL]     assertEquals("Hello", withTitle.select("title").first().text()); [EOL] }
@Test [EOL] public void testTitles() { [EOL]     Document noTitle = Jsoup.parse("<p>Hello</p>"); [EOL]     Document withTitle = Jsoup.parse("<title>First</title><title>Ignore</title><p>Hello</p>"); [EOL]     assertEquals("", noTitle.title()); [EOL]     noTitle.title("Hello"); [EOL]     assertEquals("Hello", noTitle.title()); [EOL]     assertEquals("Hello", noTitle.select("title").first().text()); [EOL]     assertEquals("First", withTitle.title()); [EOL]     withTitle.title("Hello"); [EOL]     assertEquals("Hello", withTitle.title()); [EOL]     assertEquals("Hello", withTitle.select("title").first().text()); [EOL] }
@Test [EOL] public void testTitles() { [EOL]     Document noTitle = Jsoup.parse("<p>Hello</p>"); [EOL]     Document withTitle = Jsoup.parse("<title>First</title><title>Ignore</title><p>Hello</p>"); [EOL]     assertEquals("", noTitle.title()); [EOL]     noTitle.title("Hello"); [EOL]     assertEquals("Hello", noTitle.title()); [EOL]     assertEquals("Hello", noTitle.select("title").first().text()); [EOL]     assertEquals("First", withTitle.title()); [EOL]     withTitle.title("Hello"); [EOL]     assertEquals("Hello", withTitle.title()); [EOL]     assertEquals("Hello", withTitle.select("title").first().text()); [EOL] }
@Test [EOL] public void testTitles() { [EOL]     Document noTitle = Jsoup.parse("<p>Hello</p>"); [EOL]     Document withTitle = Jsoup.parse("<title>First</title><title>Ignore</title><p>Hello</p>"); [EOL]     assertEquals("", noTitle.title()); [EOL]     noTitle.title("Hello"); [EOL]     assertEquals("Hello", noTitle.title()); [EOL]     assertEquals("Hello", noTitle.select("title").first().text()); [EOL]     assertEquals("First", withTitle.title()); [EOL]     withTitle.title("Hello"); [EOL]     assertEquals("Hello", withTitle.title()); [EOL]     assertEquals("Hello", withTitle.select("title").first().text()); [EOL] }
@Test [EOL] public void testTitles() { [EOL]     Document noTitle = Jsoup.parse("<p>Hello</p>"); [EOL]     Document withTitle = Jsoup.parse("<title>First</title><title>Ignore</title><p>Hello</p>"); [EOL]     assertEquals("", noTitle.title()); [EOL]     noTitle.title("Hello"); [EOL]     assertEquals("Hello", noTitle.title()); [EOL]     assertEquals("Hello", noTitle.select("title").first().text()); [EOL]     assertEquals("First", withTitle.title()); [EOL]     withTitle.title("Hello"); [EOL]     assertEquals("Hello", withTitle.title()); [EOL]     assertEquals("Hello", withTitle.select("title").first().text()); [EOL] }
@Test [EOL] public void parentChildStar() { [EOL]     String h = "<div id=1><p>Hello<p><b>there</b></p></div><div id=2><span>Hi</span></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements divChilds = doc.select("div > *"); [EOL]     assertEquals(3, divChilds.size()); [EOL]     assertEquals("p", divChilds.get(0).tagName()); [EOL]     assertEquals("p", divChilds.get(1).tagName()); [EOL]     assertEquals("span", divChilds.get(2).tagName()); [EOL] }
@Test [EOL] public void parentChildStar() { [EOL]     String h = "<div id=1><p>Hello<p><b>there</b></p></div><div id=2><span>Hi</span></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements divChilds = doc.select("div > *"); [EOL]     assertEquals(3, divChilds.size()); [EOL]     assertEquals("p", divChilds.get(0).tagName()); [EOL]     assertEquals("p", divChilds.get(1).tagName()); [EOL]     assertEquals("span", divChilds.get(2).tagName()); [EOL] }
@Test [EOL] public void parentChildStar() { [EOL]     String h = "<div id=1><p>Hello<p><b>there</b></p></div><div id=2><span>Hi</span></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements divChilds = doc.select("div > *"); [EOL]     assertEquals(3, divChilds.size()); [EOL]     assertEquals("p", divChilds.get(0).tagName()); [EOL]     assertEquals("p", divChilds.get(1).tagName()); [EOL]     assertEquals("span", divChilds.get(2).tagName()); [EOL] }
@Test [EOL] public void parentChildStar() { [EOL]     String h = "<div id=1><p>Hello<p><b>there</b></p></div><div id=2><span>Hi</span></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements divChilds = doc.select("div > *"); [EOL]     assertEquals(3, divChilds.size()); [EOL]     assertEquals("p", divChilds.get(0).tagName()); [EOL]     assertEquals("p", divChilds.get(1).tagName()); [EOL]     assertEquals("span", divChilds.get(2).tagName()); [EOL] }
@Test [EOL] public void parentChildStar() { [EOL]     String h = "<div id=1><p>Hello<p><b>there</b></p></div><div id=2><span>Hi</span></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements divChilds = doc.select("div > *"); [EOL]     assertEquals(3, divChilds.size()); [EOL]     assertEquals("p", divChilds.get(0).tagName()); [EOL]     assertEquals("p", divChilds.get(1).tagName()); [EOL]     assertEquals("span", divChilds.get(2).tagName()); [EOL] }
@Test [EOL] public void parentChildStar() { [EOL]     String h = "<div id=1><p>Hello<p><b>there</b></p></div><div id=2><span>Hi</span></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements divChilds = doc.select("div > *"); [EOL]     assertEquals(3, divChilds.size()); [EOL]     assertEquals("p", divChilds.get(0).tagName()); [EOL]     assertEquals("p", divChilds.get(1).tagName()); [EOL]     assertEquals("span", divChilds.get(2).tagName()); [EOL] }
@Test [EOL] public void parentChildStar() { [EOL]     String h = "<div id=1><p>Hello<p><b>there</b></p></div><div id=2><span>Hi</span></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements divChilds = doc.select("div > *"); [EOL]     assertEquals(3, divChilds.size()); [EOL]     assertEquals("p", divChilds.get(0).tagName()); [EOL]     assertEquals("p", divChilds.get(1).tagName()); [EOL]     assertEquals("span", divChilds.get(2).tagName()); [EOL] }
@Test [EOL] public void parentChildStar() { [EOL]     String h = "<div id=1><p>Hello<p><b>there</b></p></div><div id=2><span>Hi</span></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements divChilds = doc.select("div > *"); [EOL]     assertEquals(3, divChilds.size()); [EOL]     assertEquals("p", divChilds.get(0).tagName()); [EOL]     assertEquals("p", divChilds.get(1).tagName()); [EOL]     assertEquals("span", divChilds.get(2).tagName()); [EOL] }
@Test [EOL] public void parentChildStar() { [EOL]     String h = "<div id=1><p>Hello<p><b>there</b></p></div><div id=2><span>Hi</span></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements divChilds = doc.select("div > *"); [EOL]     assertEquals(3, divChilds.size()); [EOL]     assertEquals("p", divChilds.get(0).tagName()); [EOL]     assertEquals("p", divChilds.get(1).tagName()); [EOL]     assertEquals("span", divChilds.get(2).tagName()); [EOL] }
@Test [EOL] public void parentChildStar() { [EOL]     String h = "<div id=1><p>Hello<p><b>there</b></p></div><div id=2><span>Hi</span></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements divChilds = doc.select("div > *"); [EOL]     assertEquals(3, divChilds.size()); [EOL]     assertEquals("p", divChilds.get(0).tagName()); [EOL]     assertEquals("p", divChilds.get(1).tagName()); [EOL]     assertEquals("span", divChilds.get(2).tagName()); [EOL] }
@Test [EOL] public void parentChildStar() { [EOL]     String h = "<div id=1><p>Hello<p><b>there</b></p></div><div id=2><span>Hi</span></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements divChilds = doc.select("div > *"); [EOL]     assertEquals(3, divChilds.size()); [EOL]     assertEquals("p", divChilds.get(0).tagName()); [EOL]     assertEquals("p", divChilds.get(1).tagName()); [EOL]     assertEquals("span", divChilds.get(2).tagName()); [EOL] }
@Test [EOL] public void parentChildStar() { [EOL]     String h = "<div id=1><p>Hello<p><b>there</b></p></div><div id=2><span>Hi</span></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements divChilds = doc.select("div > *"); [EOL]     assertEquals(3, divChilds.size()); [EOL]     assertEquals("p", divChilds.get(0).tagName()); [EOL]     assertEquals("p", divChilds.get(1).tagName()); [EOL]     assertEquals("span", divChilds.get(2).tagName()); [EOL] }
@Test [EOL] public void parentChildStar() { [EOL]     String h = "<div id=1><p>Hello<p><b>there</b></p></div><div id=2><span>Hi</span></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements divChilds = doc.select("div > *"); [EOL]     assertEquals(3, divChilds.size()); [EOL]     assertEquals("p", divChilds.get(0).tagName()); [EOL]     assertEquals("p", divChilds.get(1).tagName()); [EOL]     assertEquals("span", divChilds.get(2).tagName()); [EOL] }
@Test [EOL] public void parentChildStar() { [EOL]     String h = "<div id=1><p>Hello<p><b>there</b></p></div><div id=2><span>Hi</span></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements divChilds = doc.select("div > *"); [EOL]     assertEquals(3, divChilds.size()); [EOL]     assertEquals("p", divChilds.get(0).tagName()); [EOL]     assertEquals("p", divChilds.get(1).tagName()); [EOL]     assertEquals("span", divChilds.get(2).tagName()); [EOL] }
@Test [EOL] public void parentChildStar() { [EOL]     String h = "<div id=1><p>Hello<p><b>there</b></p></div><div id=2><span>Hi</span></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements divChilds = doc.select("div > *"); [EOL]     assertEquals(3, divChilds.size()); [EOL]     assertEquals("p", divChilds.get(0).tagName()); [EOL]     assertEquals("p", divChilds.get(1).tagName()); [EOL]     assertEquals("span", divChilds.get(2).tagName()); [EOL] }
@Test [EOL] public void parentChildStar() { [EOL]     String h = "<div id=1><p>Hello<p><b>there</b></p></div><div id=2><span>Hi</span></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements divChilds = doc.select("div > *"); [EOL]     assertEquals(3, divChilds.size()); [EOL]     assertEquals("p", divChilds.get(0).tagName()); [EOL]     assertEquals("p", divChilds.get(1).tagName()); [EOL]     assertEquals("span", divChilds.get(2).tagName()); [EOL] }
@Test [EOL] public void parentChildStar() { [EOL]     String h = "<div id=1><p>Hello<p><b>there</b></p></div><div id=2><span>Hi</span></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements divChilds = doc.select("div > *"); [EOL]     assertEquals(3, divChilds.size()); [EOL]     assertEquals("p", divChilds.get(0).tagName()); [EOL]     assertEquals("p", divChilds.get(1).tagName()); [EOL]     assertEquals("span", divChilds.get(2).tagName()); [EOL] }
@Test [EOL] public void parentChildStar() { [EOL]     String h = "<div id=1><p>Hello<p><b>there</b></p></div><div id=2><span>Hi</span></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements divChilds = doc.select("div > *"); [EOL]     assertEquals(3, divChilds.size()); [EOL]     assertEquals("p", divChilds.get(0).tagName()); [EOL]     assertEquals("p", divChilds.get(1).tagName()); [EOL]     assertEquals("span", divChilds.get(2).tagName()); [EOL] }
@Test [EOL] public void parentChildStar() { [EOL]     String h = "<div id=1><p>Hello<p><b>there</b></p></div><div id=2><span>Hi</span></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements divChilds = doc.select("div > *"); [EOL]     assertEquals(3, divChilds.size()); [EOL]     assertEquals("p", divChilds.get(0).tagName()); [EOL]     assertEquals("p", divChilds.get(1).tagName()); [EOL]     assertEquals("span", divChilds.get(2).tagName()); [EOL] }
@Test [EOL] public void parentChildStar() { [EOL]     String h = "<div id=1><p>Hello<p><b>there</b></p></div><div id=2><span>Hi</span></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements divChilds = doc.select("div > *"); [EOL]     assertEquals(3, divChilds.size()); [EOL]     assertEquals("p", divChilds.get(0).tagName()); [EOL]     assertEquals("p", divChilds.get(1).tagName()); [EOL]     assertEquals("span", divChilds.get(2).tagName()); [EOL] }
@Test [EOL] public void parentChildStar() { [EOL]     String h = "<div id=1><p>Hello<p><b>there</b></p></div><div id=2><span>Hi</span></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements divChilds = doc.select("div > *"); [EOL]     assertEquals(3, divChilds.size()); [EOL]     assertEquals("p", divChilds.get(0).tagName()); [EOL]     assertEquals("p", divChilds.get(1).tagName()); [EOL]     assertEquals("span", divChilds.get(2).tagName()); [EOL] }
@Test [EOL] public void parentChildStar() { [EOL]     String h = "<div id=1><p>Hello<p><b>there</b></p></div><div id=2><span>Hi</span></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements divChilds = doc.select("div > *"); [EOL]     assertEquals(3, divChilds.size()); [EOL]     assertEquals("p", divChilds.get(0).tagName()); [EOL]     assertEquals("p", divChilds.get(1).tagName()); [EOL]     assertEquals("span", divChilds.get(2).tagName()); [EOL] }
@Test [EOL] public void parentChildStar() { [EOL]     String h = "<div id=1><p>Hello<p><b>there</b></p></div><div id=2><span>Hi</span></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements divChilds = doc.select("div > *"); [EOL]     assertEquals(3, divChilds.size()); [EOL]     assertEquals("p", divChilds.get(0).tagName()); [EOL]     assertEquals("p", divChilds.get(1).tagName()); [EOL]     assertEquals("span", divChilds.get(2).tagName()); [EOL] }
@Test [EOL] public void parentChildStar() { [EOL]     String h = "<div id=1><p>Hello<p><b>there</b></p></div><div id=2><span>Hi</span></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements divChilds = doc.select("div > *"); [EOL]     assertEquals(3, divChilds.size()); [EOL]     assertEquals("p", divChilds.get(0).tagName()); [EOL]     assertEquals("p", divChilds.get(1).tagName()); [EOL]     assertEquals("span", divChilds.get(2).tagName()); [EOL] }
@Test [EOL] public void parentChildStar() { [EOL]     String h = "<div id=1><p>Hello<p><b>there</b></p></div><div id=2><span>Hi</span></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements divChilds = doc.select("div > *"); [EOL]     assertEquals(3, divChilds.size()); [EOL]     assertEquals("p", divChilds.get(0).tagName()); [EOL]     assertEquals("p", divChilds.get(1).tagName()); [EOL]     assertEquals("span", divChilds.get(2).tagName()); [EOL] }
@Test [EOL] public void parentChildStar() { [EOL]     String h = "<div id=1><p>Hello<p><b>there</b></p></div><div id=2><span>Hi</span></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements divChilds = doc.select("div > *"); [EOL]     assertEquals(3, divChilds.size()); [EOL]     assertEquals("p", divChilds.get(0).tagName()); [EOL]     assertEquals("p", divChilds.get(1).tagName()); [EOL]     assertEquals("span", divChilds.get(2).tagName()); [EOL] }
@Test [EOL] public void parentChildStar() { [EOL]     String h = "<div id=1><p>Hello<p><b>there</b></p></div><div id=2><span>Hi</span></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements divChilds = doc.select("div > *"); [EOL]     assertEquals(3, divChilds.size()); [EOL]     assertEquals("p", divChilds.get(0).tagName()); [EOL]     assertEquals("p", divChilds.get(1).tagName()); [EOL]     assertEquals("span", divChilds.get(2).tagName()); [EOL] }
@Test [EOL] public void parentChildStar() { [EOL]     String h = "<div id=1><p>Hello<p><b>there</b></p></div><div id=2><span>Hi</span></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements divChilds = doc.select("div > *"); [EOL]     assertEquals(3, divChilds.size()); [EOL]     assertEquals("p", divChilds.get(0).tagName()); [EOL]     assertEquals("p", divChilds.get(1).tagName()); [EOL]     assertEquals("span", divChilds.get(2).tagName()); [EOL] }
@Test [EOL] public void parentChildStar() { [EOL]     String h = "<div id=1><p>Hello<p><b>there</b></p></div><div id=2><span>Hi</span></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements divChilds = doc.select("div > *"); [EOL]     assertEquals(3, divChilds.size()); [EOL]     assertEquals("p", divChilds.get(0).tagName()); [EOL]     assertEquals("p", divChilds.get(1).tagName()); [EOL]     assertEquals("span", divChilds.get(2).tagName()); [EOL] }
@Test [EOL] public void parentChildStar() { [EOL]     String h = "<div id=1><p>Hello<p><b>there</b></p></div><div id=2><span>Hi</span></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements divChilds = doc.select("div > *"); [EOL]     assertEquals(3, divChilds.size()); [EOL]     assertEquals("p", divChilds.get(0).tagName()); [EOL]     assertEquals("p", divChilds.get(1).tagName()); [EOL]     assertEquals("span", divChilds.get(2).tagName()); [EOL] }
@Test [EOL] public void parentChildStar() { [EOL]     String h = "<div id=1><p>Hello<p><b>there</b></p></div><div id=2><span>Hi</span></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements divChilds = doc.select("div > *"); [EOL]     assertEquals(3, divChilds.size()); [EOL]     assertEquals("p", divChilds.get(0).tagName()); [EOL]     assertEquals("p", divChilds.get(1).tagName()); [EOL]     assertEquals("span", divChilds.get(2).tagName()); [EOL] }
@Test [EOL] public void parentChildStar() { [EOL]     String h = "<div id=1><p>Hello<p><b>there</b></p></div><div id=2><span>Hi</span></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements divChilds = doc.select("div > *"); [EOL]     assertEquals(3, divChilds.size()); [EOL]     assertEquals("p", divChilds.get(0).tagName()); [EOL]     assertEquals("p", divChilds.get(1).tagName()); [EOL]     assertEquals("span", divChilds.get(2).tagName()); [EOL] }
@Test [EOL] public void parentChildStar() { [EOL]     String h = "<div id=1><p>Hello<p><b>there</b></p></div><div id=2><span>Hi</span></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements divChilds = doc.select("div > *"); [EOL]     assertEquals(3, divChilds.size()); [EOL]     assertEquals("p", divChilds.get(0).tagName()); [EOL]     assertEquals("p", divChilds.get(1).tagName()); [EOL]     assertEquals("span", divChilds.get(2).tagName()); [EOL] }
@Test [EOL] public void parentChildStar() { [EOL]     String h = "<div id=1><p>Hello<p><b>there</b></p></div><div id=2><span>Hi</span></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements divChilds = doc.select("div > *"); [EOL]     assertEquals(3, divChilds.size()); [EOL]     assertEquals("p", divChilds.get(0).tagName()); [EOL]     assertEquals("p", divChilds.get(1).tagName()); [EOL]     assertEquals("span", divChilds.get(2).tagName()); [EOL] }
@Test [EOL] public void parentChildStar() { [EOL]     String h = "<div id=1><p>Hello<p><b>there</b></p></div><div id=2><span>Hi</span></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements divChilds = doc.select("div > *"); [EOL]     assertEquals(3, divChilds.size()); [EOL]     assertEquals("p", divChilds.get(0).tagName()); [EOL]     assertEquals("p", divChilds.get(1).tagName()); [EOL]     assertEquals("span", divChilds.get(2).tagName()); [EOL] }
@Test [EOL] public void parentChildStar() { [EOL]     String h = "<div id=1><p>Hello<p><b>there</b></p></div><div id=2><span>Hi</span></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements divChilds = doc.select("div > *"); [EOL]     assertEquals(3, divChilds.size()); [EOL]     assertEquals("p", divChilds.get(0).tagName()); [EOL]     assertEquals("p", divChilds.get(1).tagName()); [EOL]     assertEquals("span", divChilds.get(2).tagName()); [EOL] }
@Test [EOL] public void parentChildStar() { [EOL]     String h = "<div id=1><p>Hello<p><b>there</b></p></div><div id=2><span>Hi</span></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements divChilds = doc.select("div > *"); [EOL]     assertEquals(3, divChilds.size()); [EOL]     assertEquals("p", divChilds.get(0).tagName()); [EOL]     assertEquals("p", divChilds.get(1).tagName()); [EOL]     assertEquals("span", divChilds.get(2).tagName()); [EOL] }
@Test [EOL] public void parentChildStar() { [EOL]     String h = "<div id=1><p>Hello<p><b>there</b></p></div><div id=2><span>Hi</span></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements divChilds = doc.select("div > *"); [EOL]     assertEquals(3, divChilds.size()); [EOL]     assertEquals("p", divChilds.get(0).tagName()); [EOL]     assertEquals("p", divChilds.get(1).tagName()); [EOL]     assertEquals("span", divChilds.get(2).tagName()); [EOL] }
@Test [EOL] public void testPrependText() { [EOL]     Document doc = Jsoup.parse("<div id=1><p>Hello</p></div>"); [EOL]     Element div = doc.getElementById("1"); [EOL]     div.prependText("there & now > "); [EOL]     assertEquals("there & now > Hello", div.text()); [EOL]     assertEquals("there &amp; now &gt; <p>Hello</p>", TextUtil.stripNewlines(div.html())); [EOL] }
@Test [EOL] public void testPrependText() { [EOL]     Document doc = Jsoup.parse("<div id=1><p>Hello</p></div>"); [EOL]     Element div = doc.getElementById("1"); [EOL]     div.prependText("there & now > "); [EOL]     assertEquals("there & now > Hello", div.text()); [EOL]     assertEquals("there &amp; now &gt; <p>Hello</p>", TextUtil.stripNewlines(div.html())); [EOL] }
@Test [EOL] public void testPrependText() { [EOL]     Document doc = Jsoup.parse("<div id=1><p>Hello</p></div>"); [EOL]     Element div = doc.getElementById("1"); [EOL]     div.prependText("there & now > "); [EOL]     assertEquals("there & now > Hello", div.text()); [EOL]     assertEquals("there &amp; now &gt; <p>Hello</p>", TextUtil.stripNewlines(div.html())); [EOL] }
@Test [EOL] public void testWrap() { [EOL]     Document doc = Jsoup.parse("<div><p>Hello</p><p>There</p></div>"); [EOL]     Element p = doc.select("p").first(); [EOL]     p.wrap("<div class='head'></div>"); [EOL]     assertEquals("<div><div class=\"head\"><p>Hello</p></div><p>There</p></div>", TextUtil.stripNewlines(doc.body().html())); [EOL]     Element ret = p.wrap("<div><div class=foo></div><p>What?</p></div>"); [EOL]     assertEquals("<div><div class=\"head\"><div><div class=\"foo\"><p>Hello</p></div><p>What?</p></div></div><p>There</p></div>", TextUtil.stripNewlines(doc.body().html())); [EOL]     assertEquals(ret, p); [EOL] }
@Test [EOL] public void handlesDataOnlyTags() { [EOL]     String t = "<style>font-family: bold</style>"; [EOL]     List<Element> tels = Jsoup.parse(t).getElementsByTag("style"); [EOL]     assertEquals("font-family: bold", tels.get(0).data()); [EOL]     assertEquals("", tels.get(0).text()); [EOL]     String s = "<p>Hello</p><script>Nope</script><p>There</p>"; [EOL]     Document doc = Jsoup.parse(s); [EOL]     assertEquals("Hello There", doc.text()); [EOL]     assertEquals("Nope", doc.data()); [EOL] }
@Test [EOL] public void handlesDataOnlyTags() { [EOL]     String t = "<style>font-family: bold</style>"; [EOL]     List<Element> tels = Jsoup.parse(t).getElementsByTag("style"); [EOL]     assertEquals("font-family: bold", tels.get(0).data()); [EOL]     assertEquals("", tels.get(0).text()); [EOL]     String s = "<p>Hello</p><script>Nope</script><p>There</p>"; [EOL]     Document doc = Jsoup.parse(s); [EOL]     assertEquals("Hello There", doc.text()); [EOL]     assertEquals("Nope", doc.data()); [EOL] }
@Test [EOL] public void handlesDataOnlyTags() { [EOL]     String t = "<style>font-family: bold</style>"; [EOL]     List<Element> tels = Jsoup.parse(t).getElementsByTag("style"); [EOL]     assertEquals("font-family: bold", tels.get(0).data()); [EOL]     assertEquals("", tels.get(0).text()); [EOL]     String s = "<p>Hello</p><script>Nope</script><p>There</p>"; [EOL]     Document doc = Jsoup.parse(s); [EOL]     assertEquals("Hello There", doc.text()); [EOL]     assertEquals("Nope", doc.data()); [EOL] }
@Test [EOL] public void testInnerHtml() { [EOL]     Document doc = Jsoup.parse("<div><p>Hello</p></div>"); [EOL]     assertEquals("<p>Hello</p>", doc.getElementsByTag("div").get(0).html()); [EOL] }
@Test [EOL] public void testInnerHtml() { [EOL]     Document doc = Jsoup.parse("<div><p>Hello</p></div>"); [EOL]     assertEquals("<p>Hello</p>", doc.getElementsByTag("div").get(0).html()); [EOL] }
@Test [EOL] public void testInnerHtml() { [EOL]     Document doc = Jsoup.parse("<div><p>Hello</p></div>"); [EOL]     assertEquals("<p>Hello</p>", doc.getElementsByTag("div").get(0).html()); [EOL] }
@Test [EOL] public void parsesComments() { [EOL]     String html = "<html><head></head><body><img src=foo><!-- <table><tr><td></table> --><p>Hello</p></body></html>"; [EOL]     Document doc = Jsoup.parse(html); [EOL]     Element body = doc.body(); [EOL]     Comment comment = (Comment) body.childNode(1); [EOL]     assertEquals(" <table><tr><td></table> ", comment.getData()); [EOL]     Element p = body.child(1); [EOL]     TextNode text = (TextNode) p.childNode(0); [EOL]     assertEquals("Hello", text.getWholeText()); [EOL] }
@Test [EOL] public void parsesComments() { [EOL]     String html = "<html><head></head><body><img src=foo><!-- <table><tr><td></table> --><p>Hello</p></body></html>"; [EOL]     Document doc = Jsoup.parse(html); [EOL]     Element body = doc.body(); [EOL]     Comment comment = (Comment) body.childNode(1); [EOL]     assertEquals(" <table><tr><td></table> ", comment.getData()); [EOL]     Element p = body.child(1); [EOL]     TextNode text = (TextNode) p.childNode(0); [EOL]     assertEquals("Hello", text.getWholeText()); [EOL] }
@Test [EOL] public void testHandlesEmptyAttributes() { [EOL]     String h = "<img alt=\"\" src= unknown=''>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basicWithImages()); [EOL]     assertEquals("<img alt=\"\" />", cleanHtml); [EOL] }
@Test [EOL] public void testHandlesEmptyAttributes() { [EOL]     String h = "<img alt=\"\" src= unknown=''>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basicWithImages()); [EOL]     assertEquals("<img alt=\"\" />", cleanHtml); [EOL] }
@Test [EOL] public void testHandlesEmptyAttributes() { [EOL]     String h = "<img alt=\"\" src= unknown=''>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basicWithImages()); [EOL]     assertEquals("<img alt=\"\" />", cleanHtml); [EOL] }
@Test [EOL] public void testHandlesEmptyAttributes() { [EOL]     String h = "<img alt=\"\" src= unknown=''>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basicWithImages()); [EOL]     assertEquals("<img alt=\"\" />", cleanHtml); [EOL] }
@Test [EOL] public void testHandlesEmptyAttributes() { [EOL]     String h = "<img alt=\"\" src= unknown=''>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basicWithImages()); [EOL]     assertEquals("<img alt=\"\" />", cleanHtml); [EOL] }
@Test [EOL] public void basicWithImagesTest() { [EOL]     String h = "<div><p><img src='http://example.com/' alt=Image></p><p><img src='ftp://ftp.example.com'></p></div>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basicWithImages()); [EOL]     assertEquals("<p><img src=\"http://example.com/\" alt=\"Image\" /></p><p><img /></p>", TextUtil.stripNewlines(cleanHtml)); [EOL] }
@Test [EOL] public void testHandlesEmptyAttributes() { [EOL]     String h = "<img alt=\"\" src= unknown=''>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basicWithImages()); [EOL]     assertEquals("<img alt=\"\" />", cleanHtml); [EOL] }
@Test [EOL] public void testHandlesEmptyAttributes() { [EOL]     String h = "<img alt=\"\" src= unknown=''>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basicWithImages()); [EOL]     assertEquals("<img alt=\"\" />", cleanHtml); [EOL] }
@Test [EOL] public void testHandlesEmptyAttributes() { [EOL]     String h = "<img alt=\"\" src= unknown=''>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basicWithImages()); [EOL]     assertEquals("<img alt=\"\" />", cleanHtml); [EOL] }
@Test [EOL] public void testHandlesEmptyAttributes() { [EOL]     String h = "<img alt=\"\" src= unknown=''>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basicWithImages()); [EOL]     assertEquals("<img alt=\"\" />", cleanHtml); [EOL] }
@Test [EOL] public void testHandlesEmptyAttributes() { [EOL]     String h = "<img alt=\"\" src= unknown=''>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basicWithImages()); [EOL]     assertEquals("<img alt=\"\" />", cleanHtml); [EOL] }
@Test [EOL] public void testHandlesEmptyAttributes() { [EOL]     String h = "<img alt=\"\" src= unknown=''>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basicWithImages()); [EOL]     assertEquals("<img alt=\"\" />", cleanHtml); [EOL] }
@Test [EOL] public void testHandlesEmptyAttributes() { [EOL]     String h = "<img alt=\"\" src= unknown=''>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basicWithImages()); [EOL]     assertEquals("<img alt=\"\" />", cleanHtml); [EOL] }
@Test [EOL] public void testHandlesEmptyAttributes() { [EOL]     String h = "<img alt=\"\" src= unknown=''>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basicWithImages()); [EOL]     assertEquals("<img alt=\"\" />", cleanHtml); [EOL] }
@Test [EOL] public void testHandlesEmptyAttributes() { [EOL]     String h = "<img alt=\"\" src= unknown=''>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basicWithImages()); [EOL]     assertEquals("<img alt=\"\" />", cleanHtml); [EOL] }
@Test [EOL] public void testHandlesEmptyAttributes() { [EOL]     String h = "<img alt=\"\" src= unknown=''>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basicWithImages()); [EOL]     assertEquals("<img alt=\"\" />", cleanHtml); [EOL] }
@Test [EOL] public void testHandlesEmptyAttributes() { [EOL]     String h = "<img alt=\"\" src= unknown=''>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basicWithImages()); [EOL]     assertEquals("<img alt=\"\" />", cleanHtml); [EOL] }
@Test [EOL] public void testHandlesEmptyAttributes() { [EOL]     String h = "<img alt=\"\" src= unknown=''>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basicWithImages()); [EOL]     assertEquals("<img alt=\"\" />", cleanHtml); [EOL] }
@Test [EOL] public void testHandlesEmptyAttributes() { [EOL]     String h = "<img alt=\"\" src= unknown=''>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basicWithImages()); [EOL]     assertEquals("<img alt=\"\" />", cleanHtml); [EOL] }
@Test [EOL] public void testHandlesEmptyAttributes() { [EOL]     String h = "<img alt=\"\" src= unknown=''>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basicWithImages()); [EOL]     assertEquals("<img alt=\"\" />", cleanHtml); [EOL] }
@Test [EOL] public void testHandlesEmptyAttributes() { [EOL]     String h = "<img alt=\"\" src= unknown=''>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basicWithImages()); [EOL]     assertEquals("<img alt=\"\" />", cleanHtml); [EOL] }
@Test [EOL] public void testHandlesEmptyAttributes() { [EOL]     String h = "<img alt=\"\" src= unknown=''>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basicWithImages()); [EOL]     assertEquals("<img alt=\"\" />", cleanHtml); [EOL] }
@Test [EOL] public void testHandlesEmptyAttributes() { [EOL]     String h = "<img alt=\"\" src= unknown=''>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basicWithImages()); [EOL]     assertEquals("<img alt=\"\" />", cleanHtml); [EOL] }
@Test [EOL] public void testHandlesEmptyAttributes() { [EOL]     String h = "<img alt=\"\" src= unknown=''>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basicWithImages()); [EOL]     assertEquals("<img alt=\"\" />", cleanHtml); [EOL] }
@Test [EOL] public void testHandlesEmptyAttributes() { [EOL]     String h = "<img alt=\"\" src= unknown=''>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basicWithImages()); [EOL]     assertEquals("<img alt=\"\" />", cleanHtml); [EOL] }
@Test [EOL] public void testHandlesEmptyAttributes() { [EOL]     String h = "<img alt=\"\" src= unknown=''>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basicWithImages()); [EOL]     assertEquals("<img alt=\"\" />", cleanHtml); [EOL] }
@Test [EOL] public void testHandlesEmptyAttributes() { [EOL]     String h = "<img alt=\"\" src= unknown=''>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basicWithImages()); [EOL]     assertEquals("<img alt=\"\" />", cleanHtml); [EOL] }
@Test [EOL] public void testHandlesEmptyAttributes() { [EOL]     String h = "<img alt=\"\" src= unknown=''>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basicWithImages()); [EOL]     assertEquals("<img alt=\"\" />", cleanHtml); [EOL] }
@Test [EOL] public void testSmhBizArticle() throws IOException { [EOL]     File in = getFile("/htmltests/smh-biz-article-1.html"); [EOL]     Document doc = Jsoup.parse(in, "UTF-8", "http://www.smh.com.au/business/the-boards-next-fear-the-female-quota-20100106-lteq.html"); [EOL]     assertEquals("The board’s next fear: the female quota", doc.title()); [EOL]     assertEquals("en", doc.select("html").attr("xml:lang")); [EOL]     Elements articleBody = doc.select(".articleBody > *"); [EOL]     assertEquals(17, articleBody.size()); [EOL] }
@Test [EOL] public void testSmhBizArticle() throws IOException { [EOL]     File in = getFile("/htmltests/smh-biz-article-1.html"); [EOL]     Document doc = Jsoup.parse(in, "UTF-8", "http://www.smh.com.au/business/the-boards-next-fear-the-female-quota-20100106-lteq.html"); [EOL]     assertEquals("The board’s next fear: the female quota", doc.title()); [EOL]     assertEquals("en", doc.select("html").attr("xml:lang")); [EOL]     Elements articleBody = doc.select(".articleBody > *"); [EOL]     assertEquals(17, articleBody.size()); [EOL] }
@Test [EOL] public void testSmhBizArticle() throws IOException { [EOL]     File in = getFile("/htmltests/smh-biz-article-1.html"); [EOL]     Document doc = Jsoup.parse(in, "UTF-8", "http://www.smh.com.au/business/the-boards-next-fear-the-female-quota-20100106-lteq.html"); [EOL]     assertEquals("The board’s next fear: the female quota", doc.title()); [EOL]     assertEquals("en", doc.select("html").attr("xml:lang")); [EOL]     Elements articleBody = doc.select(".articleBody > *"); [EOL]     assertEquals(17, articleBody.size()); [EOL] }
@Test [EOL] public void testTitles() { [EOL]     Document noTitle = Jsoup.parse("<p>Hello</p>"); [EOL]     Document withTitle = Jsoup.parse("<title>First</title><title>Ignore</title><p>Hello</p>"); [EOL]     assertEquals("", noTitle.title()); [EOL]     noTitle.title("Hello"); [EOL]     assertEquals("Hello", noTitle.title()); [EOL]     assertEquals("Hello", noTitle.select("title").first().text()); [EOL]     assertEquals("First", withTitle.title()); [EOL]     withTitle.title("Hello"); [EOL]     assertEquals("Hello", withTitle.title()); [EOL]     assertEquals("Hello", withTitle.select("title").first().text()); [EOL] }
@Test [EOL] public void testTitles() { [EOL]     Document noTitle = Jsoup.parse("<p>Hello</p>"); [EOL]     Document withTitle = Jsoup.parse("<title>First</title><title>Ignore</title><p>Hello</p>"); [EOL]     assertEquals("", noTitle.title()); [EOL]     noTitle.title("Hello"); [EOL]     assertEquals("Hello", noTitle.title()); [EOL]     assertEquals("Hello", noTitle.select("title").first().text()); [EOL]     assertEquals("First", withTitle.title()); [EOL]     withTitle.title("Hello"); [EOL]     assertEquals("Hello", withTitle.title()); [EOL]     assertEquals("Hello", withTitle.select("title").first().text()); [EOL] }
@Test [EOL] public void testTitles() { [EOL]     Document noTitle = Jsoup.parse("<p>Hello</p>"); [EOL]     Document withTitle = Jsoup.parse("<title>First</title><title>Ignore</title><p>Hello</p>"); [EOL]     assertEquals("", noTitle.title()); [EOL]     noTitle.title("Hello"); [EOL]     assertEquals("Hello", noTitle.title()); [EOL]     assertEquals("Hello", noTitle.select("title").first().text()); [EOL]     assertEquals("First", withTitle.title()); [EOL]     withTitle.title("Hello"); [EOL]     assertEquals("Hello", withTitle.title()); [EOL]     assertEquals("Hello", withTitle.select("title").first().text()); [EOL] }
@Test [EOL] public void testTitles() { [EOL]     Document noTitle = Jsoup.parse("<p>Hello</p>"); [EOL]     Document withTitle = Jsoup.parse("<title>First</title><title>Ignore</title><p>Hello</p>"); [EOL]     assertEquals("", noTitle.title()); [EOL]     noTitle.title("Hello"); [EOL]     assertEquals("Hello", noTitle.title()); [EOL]     assertEquals("Hello", noTitle.select("title").first().text()); [EOL]     assertEquals("First", withTitle.title()); [EOL]     withTitle.title("Hello"); [EOL]     assertEquals("Hello", withTitle.title()); [EOL]     assertEquals("Hello", withTitle.select("title").first().text()); [EOL] }
@Test [EOL] public void testTitles() { [EOL]     Document noTitle = Jsoup.parse("<p>Hello</p>"); [EOL]     Document withTitle = Jsoup.parse("<title>First</title><title>Ignore</title><p>Hello</p>"); [EOL]     assertEquals("", noTitle.title()); [EOL]     noTitle.title("Hello"); [EOL]     assertEquals("Hello", noTitle.title()); [EOL]     assertEquals("Hello", noTitle.select("title").first().text()); [EOL]     assertEquals("First", withTitle.title()); [EOL]     withTitle.title("Hello"); [EOL]     assertEquals("Hello", withTitle.title()); [EOL]     assertEquals("Hello", withTitle.select("title").first().text()); [EOL] }
@Test [EOL] public void testTitles() { [EOL]     Document noTitle = Jsoup.parse("<p>Hello</p>"); [EOL]     Document withTitle = Jsoup.parse("<title>First</title><title>Ignore</title><p>Hello</p>"); [EOL]     assertEquals("", noTitle.title()); [EOL]     noTitle.title("Hello"); [EOL]     assertEquals("Hello", noTitle.title()); [EOL]     assertEquals("Hello", noTitle.select("title").first().text()); [EOL]     assertEquals("First", withTitle.title()); [EOL]     withTitle.title("Hello"); [EOL]     assertEquals("Hello", withTitle.title()); [EOL]     assertEquals("Hello", withTitle.select("title").first().text()); [EOL] }
@Test [EOL] public void testTitles() { [EOL]     Document noTitle = Jsoup.parse("<p>Hello</p>"); [EOL]     Document withTitle = Jsoup.parse("<title>First</title><title>Ignore</title><p>Hello</p>"); [EOL]     assertEquals("", noTitle.title()); [EOL]     noTitle.title("Hello"); [EOL]     assertEquals("Hello", noTitle.title()); [EOL]     assertEquals("Hello", noTitle.select("title").first().text()); [EOL]     assertEquals("First", withTitle.title()); [EOL]     withTitle.title("Hello"); [EOL]     assertEquals("Hello", withTitle.title()); [EOL]     assertEquals("Hello", withTitle.select("title").first().text()); [EOL] }
@Test [EOL] public void testTitles() { [EOL]     Document noTitle = Jsoup.parse("<p>Hello</p>"); [EOL]     Document withTitle = Jsoup.parse("<title>First</title><title>Ignore</title><p>Hello</p>"); [EOL]     assertEquals("", noTitle.title()); [EOL]     noTitle.title("Hello"); [EOL]     assertEquals("Hello", noTitle.title()); [EOL]     assertEquals("Hello", noTitle.select("title").first().text()); [EOL]     assertEquals("First", withTitle.title()); [EOL]     withTitle.title("Hello"); [EOL]     assertEquals("Hello", withTitle.title()); [EOL]     assertEquals("Hello", withTitle.select("title").first().text()); [EOL] }
@Test [EOL] public void testTitles() { [EOL]     Document noTitle = Jsoup.parse("<p>Hello</p>"); [EOL]     Document withTitle = Jsoup.parse("<title>First</title><title>Ignore</title><p>Hello</p>"); [EOL]     assertEquals("", noTitle.title()); [EOL]     noTitle.title("Hello"); [EOL]     assertEquals("Hello", noTitle.title()); [EOL]     assertEquals("Hello", noTitle.select("title").first().text()); [EOL]     assertEquals("First", withTitle.title()); [EOL]     withTitle.title("Hello"); [EOL]     assertEquals("Hello", withTitle.title()); [EOL]     assertEquals("Hello", withTitle.select("title").first().text()); [EOL] }
@Test [EOL] public void testTitles() { [EOL]     Document noTitle = Jsoup.parse("<p>Hello</p>"); [EOL]     Document withTitle = Jsoup.parse("<title>First</title><title>Ignore</title><p>Hello</p>"); [EOL]     assertEquals("", noTitle.title()); [EOL]     noTitle.title("Hello"); [EOL]     assertEquals("Hello", noTitle.title()); [EOL]     assertEquals("Hello", noTitle.select("title").first().text()); [EOL]     assertEquals("First", withTitle.title()); [EOL]     withTitle.title("Hello"); [EOL]     assertEquals("Hello", withTitle.title()); [EOL]     assertEquals("Hello", withTitle.select("title").first().text()); [EOL] }
