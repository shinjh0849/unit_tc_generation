@Test [EOL] public void test_negate_Boolean() { [EOL]     assertSame(null, BooleanUtils.negate(null)); [EOL]     assertSame(Boolean.TRUE, BooleanUtils.negate(Boolean.FALSE)); [EOL]     assertSame(Boolean.FALSE, BooleanUtils.negate(Boolean.TRUE)); [EOL] }
@Test [EOL] public void test_negate_Boolean() { [EOL]     assertSame(null, BooleanUtils.negate(null)); [EOL]     assertSame(Boolean.TRUE, BooleanUtils.negate(Boolean.FALSE)); [EOL]     assertSame(Boolean.FALSE, BooleanUtils.negate(Boolean.TRUE)); [EOL] }
@Test [EOL] public void test_negate_Boolean() { [EOL]     assertSame(null, BooleanUtils.negate(null)); [EOL]     assertSame(Boolean.TRUE, BooleanUtils.negate(Boolean.FALSE)); [EOL]     assertSame(Boolean.FALSE, BooleanUtils.negate(Boolean.TRUE)); [EOL] }
@Test [EOL] public void test_toBooleanObject_int() { [EOL]     assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(1)); [EOL]     assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(-1)); [EOL]     assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(0)); [EOL] }
@Test(expected = IllegalArgumentException.class) [EOL] public void test_toBoolean_Integer_Integer_Integer_nullValue() { [EOL]     BooleanUtils.toBoolean(null, Integer.valueOf(6), Integer.valueOf(7)); [EOL] }
@Test(expected = IllegalArgumentException.class) [EOL] public void test_toBooleanObject_int_int_int_noMatch() { [EOL]     BooleanUtils.toBooleanObject(9, 6, 7, 8); [EOL] }
@Test(expected = IllegalArgumentException.class) [EOL] public void test_toBooleanObject_int_int_int_noMatch() { [EOL]     BooleanUtils.toBooleanObject(9, 6, 7, 8); [EOL] }
@Test(expected = IllegalArgumentException.class) [EOL] public void test_toBooleanObject_int_int_int_noMatch() { [EOL]     BooleanUtils.toBooleanObject(9, 6, 7, 8); [EOL] }
@Test(expected = IllegalArgumentException.class) [EOL] public void test_toBooleanObject_int_int_int_noMatch() { [EOL]     BooleanUtils.toBooleanObject(9, 6, 7, 8); [EOL] }
@Test [EOL] public void test_toIntegerObject_Boolean() { [EOL]     assertEquals(Integer.valueOf(1), BooleanUtils.toIntegerObject(Boolean.TRUE)); [EOL]     assertEquals(Integer.valueOf(0), BooleanUtils.toIntegerObject(Boolean.FALSE)); [EOL]     assertEquals(null, BooleanUtils.toIntegerObject((Boolean) null)); [EOL] }
@Test [EOL] public void test_toInteger_boolean_int_int() { [EOL]     assertEquals(6, BooleanUtils.toInteger(true, 6, 7)); [EOL]     assertEquals(7, BooleanUtils.toInteger(false, 6, 7)); [EOL] }
@Test [EOL] public void test_toBoolean_String() { [EOL]     assertFalse(BooleanUtils.toBoolean((String) null)); [EOL]     assertFalse(BooleanUtils.toBoolean("")); [EOL]     assertFalse(BooleanUtils.toBoolean("off")); [EOL]     assertFalse(BooleanUtils.toBoolean("oof")); [EOL]     assertFalse(BooleanUtils.toBoolean("yep")); [EOL]     assertFalse(BooleanUtils.toBoolean("trux")); [EOL]     assertFalse(BooleanUtils.toBoolean("false")); [EOL]     assertFalse(BooleanUtils.toBoolean("a")); [EOL]     assertTrue(BooleanUtils.toBoolean("true")); [EOL]     assertTrue(BooleanUtils.toBoolean(new StringBuffer("tr").append("ue").toString())); [EOL]     assertTrue(BooleanUtils.toBoolean("truE")); [EOL]     assertTrue(BooleanUtils.toBoolean("trUe")); [EOL]     assertTrue(BooleanUtils.toBoolean("trUE")); [EOL]     assertTrue(BooleanUtils.toBoolean("tRue")); [EOL]     assertTrue(BooleanUtils.toBoolean("tRuE")); [EOL]     assertTrue(BooleanUtils.toBoolean("tRUe")); [EOL]     assertTrue(BooleanUtils.toBoolean("tRUE")); [EOL]     assertTrue(BooleanUtils.toBoolean("TRUE")); [EOL]     assertTrue(BooleanUtils.toBoolean("TRUe")); [EOL]     assertTrue(BooleanUtils.toBoolean("TRuE")); [EOL]     assertTrue(BooleanUtils.toBoolean("TRue")); [EOL]     assertTrue(BooleanUtils.toBoolean("TrUE")); [EOL]     assertTrue(BooleanUtils.toBoolean("TrUe")); [EOL]     assertTrue(BooleanUtils.toBoolean("TruE")); [EOL]     assertTrue(BooleanUtils.toBoolean("True")); [EOL]     assertTrue(BooleanUtils.toBoolean("on")); [EOL]     assertTrue(BooleanUtils.toBoolean("oN")); [EOL]     assertTrue(BooleanUtils.toBoolean("On")); [EOL]     assertTrue(BooleanUtils.toBoolean("ON")); [EOL]     assertTrue(BooleanUtils.toBoolean("yes")); [EOL]     assertTrue(BooleanUtils.toBoolean("yeS")); [EOL]     assertTrue(BooleanUtils.toBoolean("yEs")); [EOL]     assertTrue(BooleanUtils.toBoolean("yES")); [EOL]     assertTrue(BooleanUtils.toBoolean("Yes")); [EOL]     assertTrue(BooleanUtils.toBoolean("YeS")); [EOL]     assertTrue(BooleanUtils.toBoolean("YEs")); [EOL]     assertTrue(BooleanUtils.toBoolean("YES")); [EOL]     assertFalse(BooleanUtils.toBoolean("yes?")); [EOL]     assertFalse(BooleanUtils.toBoolean("tru")); [EOL]     assertFalse(BooleanUtils.toBoolean("no")); [EOL]     assertFalse(BooleanUtils.toBoolean("off")); [EOL]     assertFalse(BooleanUtils.toBoolean("yoo")); [EOL] }
@Test [EOL] public void test_toBoolean_String() { [EOL]     assertFalse(BooleanUtils.toBoolean((String) null)); [EOL]     assertFalse(BooleanUtils.toBoolean("")); [EOL]     assertFalse(BooleanUtils.toBoolean("off")); [EOL]     assertFalse(BooleanUtils.toBoolean("oof")); [EOL]     assertFalse(BooleanUtils.toBoolean("yep")); [EOL]     assertFalse(BooleanUtils.toBoolean("trux")); [EOL]     assertFalse(BooleanUtils.toBoolean("false")); [EOL]     assertFalse(BooleanUtils.toBoolean("a")); [EOL]     assertTrue(BooleanUtils.toBoolean("true")); [EOL]     assertTrue(BooleanUtils.toBoolean(new StringBuffer("tr").append("ue").toString())); [EOL]     assertTrue(BooleanUtils.toBoolean("truE")); [EOL]     assertTrue(BooleanUtils.toBoolean("trUe")); [EOL]     assertTrue(BooleanUtils.toBoolean("trUE")); [EOL]     assertTrue(BooleanUtils.toBoolean("tRue")); [EOL]     assertTrue(BooleanUtils.toBoolean("tRuE")); [EOL]     assertTrue(BooleanUtils.toBoolean("tRUe")); [EOL]     assertTrue(BooleanUtils.toBoolean("tRUE")); [EOL]     assertTrue(BooleanUtils.toBoolean("TRUE")); [EOL]     assertTrue(BooleanUtils.toBoolean("TRUe")); [EOL]     assertTrue(BooleanUtils.toBoolean("TRuE")); [EOL]     assertTrue(BooleanUtils.toBoolean("TRue")); [EOL]     assertTrue(BooleanUtils.toBoolean("TrUE")); [EOL]     assertTrue(BooleanUtils.toBoolean("TrUe")); [EOL]     assertTrue(BooleanUtils.toBoolean("TruE")); [EOL]     assertTrue(BooleanUtils.toBoolean("True")); [EOL]     assertTrue(BooleanUtils.toBoolean("on")); [EOL]     assertTrue(BooleanUtils.toBoolean("oN")); [EOL]     assertTrue(BooleanUtils.toBoolean("On")); [EOL]     assertTrue(BooleanUtils.toBoolean("ON")); [EOL]     assertTrue(BooleanUtils.toBoolean("yes")); [EOL]     assertTrue(BooleanUtils.toBoolean("yeS")); [EOL]     assertTrue(BooleanUtils.toBoolean("yEs")); [EOL]     assertTrue(BooleanUtils.toBoolean("yES")); [EOL]     assertTrue(BooleanUtils.toBoolean("Yes")); [EOL]     assertTrue(BooleanUtils.toBoolean("YeS")); [EOL]     assertTrue(BooleanUtils.toBoolean("YEs")); [EOL]     assertTrue(BooleanUtils.toBoolean("YES")); [EOL]     assertFalse(BooleanUtils.toBoolean("yes?")); [EOL]     assertFalse(BooleanUtils.toBoolean("tru")); [EOL]     assertFalse(BooleanUtils.toBoolean("no")); [EOL]     assertFalse(BooleanUtils.toBoolean("off")); [EOL]     assertFalse(BooleanUtils.toBoolean("yoo")); [EOL] }
@Test [EOL] public void test_toBoolean_String() { [EOL]     assertFalse(BooleanUtils.toBoolean((String) null)); [EOL]     assertFalse(BooleanUtils.toBoolean("")); [EOL]     assertFalse(BooleanUtils.toBoolean("off")); [EOL]     assertFalse(BooleanUtils.toBoolean("oof")); [EOL]     assertFalse(BooleanUtils.toBoolean("yep")); [EOL]     assertFalse(BooleanUtils.toBoolean("trux")); [EOL]     assertFalse(BooleanUtils.toBoolean("false")); [EOL]     assertFalse(BooleanUtils.toBoolean("a")); [EOL]     assertTrue(BooleanUtils.toBoolean("true")); [EOL]     assertTrue(BooleanUtils.toBoolean(new StringBuffer("tr").append("ue").toString())); [EOL]     assertTrue(BooleanUtils.toBoolean("truE")); [EOL]     assertTrue(BooleanUtils.toBoolean("trUe")); [EOL]     assertTrue(BooleanUtils.toBoolean("trUE")); [EOL]     assertTrue(BooleanUtils.toBoolean("tRue")); [EOL]     assertTrue(BooleanUtils.toBoolean("tRuE")); [EOL]     assertTrue(BooleanUtils.toBoolean("tRUe")); [EOL]     assertTrue(BooleanUtils.toBoolean("tRUE")); [EOL]     assertTrue(BooleanUtils.toBoolean("TRUE")); [EOL]     assertTrue(BooleanUtils.toBoolean("TRUe")); [EOL]     assertTrue(BooleanUtils.toBoolean("TRuE")); [EOL]     assertTrue(BooleanUtils.toBoolean("TRue")); [EOL]     assertTrue(BooleanUtils.toBoolean("TrUE")); [EOL]     assertTrue(BooleanUtils.toBoolean("TrUe")); [EOL]     assertTrue(BooleanUtils.toBoolean("TruE")); [EOL]     assertTrue(BooleanUtils.toBoolean("True")); [EOL]     assertTrue(BooleanUtils.toBoolean("on")); [EOL]     assertTrue(BooleanUtils.toBoolean("oN")); [EOL]     assertTrue(BooleanUtils.toBoolean("On")); [EOL]     assertTrue(BooleanUtils.toBoolean("ON")); [EOL]     assertTrue(BooleanUtils.toBoolean("yes")); [EOL]     assertTrue(BooleanUtils.toBoolean("yeS")); [EOL]     assertTrue(BooleanUtils.toBoolean("yEs")); [EOL]     assertTrue(BooleanUtils.toBoolean("yES")); [EOL]     assertTrue(BooleanUtils.toBoolean("Yes")); [EOL]     assertTrue(BooleanUtils.toBoolean("YeS")); [EOL]     assertTrue(BooleanUtils.toBoolean("YEs")); [EOL]     assertTrue(BooleanUtils.toBoolean("YES")); [EOL]     assertFalse(BooleanUtils.toBoolean("yes?")); [EOL]     assertFalse(BooleanUtils.toBoolean("tru")); [EOL]     assertFalse(BooleanUtils.toBoolean("no")); [EOL]     assertFalse(BooleanUtils.toBoolean("off")); [EOL]     assertFalse(BooleanUtils.toBoolean("yoo")); [EOL] }
@Test [EOL] public void test_toBoolean_String() { [EOL]     assertFalse(BooleanUtils.toBoolean((String) null)); [EOL]     assertFalse(BooleanUtils.toBoolean("")); [EOL]     assertFalse(BooleanUtils.toBoolean("off")); [EOL]     assertFalse(BooleanUtils.toBoolean("oof")); [EOL]     assertFalse(BooleanUtils.toBoolean("yep")); [EOL]     assertFalse(BooleanUtils.toBoolean("trux")); [EOL]     assertFalse(BooleanUtils.toBoolean("false")); [EOL]     assertFalse(BooleanUtils.toBoolean("a")); [EOL]     assertTrue(BooleanUtils.toBoolean("true")); [EOL]     assertTrue(BooleanUtils.toBoolean(new StringBuffer("tr").append("ue").toString())); [EOL]     assertTrue(BooleanUtils.toBoolean("truE")); [EOL]     assertTrue(BooleanUtils.toBoolean("trUe")); [EOL]     assertTrue(BooleanUtils.toBoolean("trUE")); [EOL]     assertTrue(BooleanUtils.toBoolean("tRue")); [EOL]     assertTrue(BooleanUtils.toBoolean("tRuE")); [EOL]     assertTrue(BooleanUtils.toBoolean("tRUe")); [EOL]     assertTrue(BooleanUtils.toBoolean("tRUE")); [EOL]     assertTrue(BooleanUtils.toBoolean("TRUE")); [EOL]     assertTrue(BooleanUtils.toBoolean("TRUe")); [EOL]     assertTrue(BooleanUtils.toBoolean("TRuE")); [EOL]     assertTrue(BooleanUtils.toBoolean("TRue")); [EOL]     assertTrue(BooleanUtils.toBoolean("TrUE")); [EOL]     assertTrue(BooleanUtils.toBoolean("TrUe")); [EOL]     assertTrue(BooleanUtils.toBoolean("TruE")); [EOL]     assertTrue(BooleanUtils.toBoolean("True")); [EOL]     assertTrue(BooleanUtils.toBoolean("on")); [EOL]     assertTrue(BooleanUtils.toBoolean("oN")); [EOL]     assertTrue(BooleanUtils.toBoolean("On")); [EOL]     assertTrue(BooleanUtils.toBoolean("ON")); [EOL]     assertTrue(BooleanUtils.toBoolean("yes")); [EOL]     assertTrue(BooleanUtils.toBoolean("yeS")); [EOL]     assertTrue(BooleanUtils.toBoolean("yEs")); [EOL]     assertTrue(BooleanUtils.toBoolean("yES")); [EOL]     assertTrue(BooleanUtils.toBoolean("Yes")); [EOL]     assertTrue(BooleanUtils.toBoolean("YeS")); [EOL]     assertTrue(BooleanUtils.toBoolean("YEs")); [EOL]     assertTrue(BooleanUtils.toBoolean("YES")); [EOL]     assertFalse(BooleanUtils.toBoolean("yes?")); [EOL]     assertFalse(BooleanUtils.toBoolean("tru")); [EOL]     assertFalse(BooleanUtils.toBoolean("no")); [EOL]     assertFalse(BooleanUtils.toBoolean("off")); [EOL]     assertFalse(BooleanUtils.toBoolean("yoo")); [EOL] }
@Test [EOL] public void test_toBoolean_String() { [EOL]     assertFalse(BooleanUtils.toBoolean((String) null)); [EOL]     assertFalse(BooleanUtils.toBoolean("")); [EOL]     assertFalse(BooleanUtils.toBoolean("off")); [EOL]     assertFalse(BooleanUtils.toBoolean("oof")); [EOL]     assertFalse(BooleanUtils.toBoolean("yep")); [EOL]     assertFalse(BooleanUtils.toBoolean("trux")); [EOL]     assertFalse(BooleanUtils.toBoolean("false")); [EOL]     assertFalse(BooleanUtils.toBoolean("a")); [EOL]     assertTrue(BooleanUtils.toBoolean("true")); [EOL]     assertTrue(BooleanUtils.toBoolean(new StringBuffer("tr").append("ue").toString())); [EOL]     assertTrue(BooleanUtils.toBoolean("truE")); [EOL]     assertTrue(BooleanUtils.toBoolean("trUe")); [EOL]     assertTrue(BooleanUtils.toBoolean("trUE")); [EOL]     assertTrue(BooleanUtils.toBoolean("tRue")); [EOL]     assertTrue(BooleanUtils.toBoolean("tRuE")); [EOL]     assertTrue(BooleanUtils.toBoolean("tRUe")); [EOL]     assertTrue(BooleanUtils.toBoolean("tRUE")); [EOL]     assertTrue(BooleanUtils.toBoolean("TRUE")); [EOL]     assertTrue(BooleanUtils.toBoolean("TRUe")); [EOL]     assertTrue(BooleanUtils.toBoolean("TRuE")); [EOL]     assertTrue(BooleanUtils.toBoolean("TRue")); [EOL]     assertTrue(BooleanUtils.toBoolean("TrUE")); [EOL]     assertTrue(BooleanUtils.toBoolean("TrUe")); [EOL]     assertTrue(BooleanUtils.toBoolean("TruE")); [EOL]     assertTrue(BooleanUtils.toBoolean("True")); [EOL]     assertTrue(BooleanUtils.toBoolean("on")); [EOL]     assertTrue(BooleanUtils.toBoolean("oN")); [EOL]     assertTrue(BooleanUtils.toBoolean("On")); [EOL]     assertTrue(BooleanUtils.toBoolean("ON")); [EOL]     assertTrue(BooleanUtils.toBoolean("yes")); [EOL]     assertTrue(BooleanUtils.toBoolean("yeS")); [EOL]     assertTrue(BooleanUtils.toBoolean("yEs")); [EOL]     assertTrue(BooleanUtils.toBoolean("yES")); [EOL]     assertTrue(BooleanUtils.toBoolean("Yes")); [EOL]     assertTrue(BooleanUtils.toBoolean("YeS")); [EOL]     assertTrue(BooleanUtils.toBoolean("YEs")); [EOL]     assertTrue(BooleanUtils.toBoolean("YES")); [EOL]     assertFalse(BooleanUtils.toBoolean("yes?")); [EOL]     assertFalse(BooleanUtils.toBoolean("tru")); [EOL]     assertFalse(BooleanUtils.toBoolean("no")); [EOL]     assertFalse(BooleanUtils.toBoolean("off")); [EOL]     assertFalse(BooleanUtils.toBoolean("yoo")); [EOL] }
@Test [EOL] public void test_toBoolean_String() { [EOL]     assertFalse(BooleanUtils.toBoolean((String) null)); [EOL]     assertFalse(BooleanUtils.toBoolean("")); [EOL]     assertFalse(BooleanUtils.toBoolean("off")); [EOL]     assertFalse(BooleanUtils.toBoolean("oof")); [EOL]     assertFalse(BooleanUtils.toBoolean("yep")); [EOL]     assertFalse(BooleanUtils.toBoolean("trux")); [EOL]     assertFalse(BooleanUtils.toBoolean("false")); [EOL]     assertFalse(BooleanUtils.toBoolean("a")); [EOL]     assertTrue(BooleanUtils.toBoolean("true")); [EOL]     assertTrue(BooleanUtils.toBoolean(new StringBuffer("tr").append("ue").toString())); [EOL]     assertTrue(BooleanUtils.toBoolean("truE")); [EOL]     assertTrue(BooleanUtils.toBoolean("trUe")); [EOL]     assertTrue(BooleanUtils.toBoolean("trUE")); [EOL]     assertTrue(BooleanUtils.toBoolean("tRue")); [EOL]     assertTrue(BooleanUtils.toBoolean("tRuE")); [EOL]     assertTrue(BooleanUtils.toBoolean("tRUe")); [EOL]     assertTrue(BooleanUtils.toBoolean("tRUE")); [EOL]     assertTrue(BooleanUtils.toBoolean("TRUE")); [EOL]     assertTrue(BooleanUtils.toBoolean("TRUe")); [EOL]     assertTrue(BooleanUtils.toBoolean("TRuE")); [EOL]     assertTrue(BooleanUtils.toBoolean("TRue")); [EOL]     assertTrue(BooleanUtils.toBoolean("TrUE")); [EOL]     assertTrue(BooleanUtils.toBoolean("TrUe")); [EOL]     assertTrue(BooleanUtils.toBoolean("TruE")); [EOL]     assertTrue(BooleanUtils.toBoolean("True")); [EOL]     assertTrue(BooleanUtils.toBoolean("on")); [EOL]     assertTrue(BooleanUtils.toBoolean("oN")); [EOL]     assertTrue(BooleanUtils.toBoolean("On")); [EOL]     assertTrue(BooleanUtils.toBoolean("ON")); [EOL]     assertTrue(BooleanUtils.toBoolean("yes")); [EOL]     assertTrue(BooleanUtils.toBoolean("yeS")); [EOL]     assertTrue(BooleanUtils.toBoolean("yEs")); [EOL]     assertTrue(BooleanUtils.toBoolean("yES")); [EOL]     assertTrue(BooleanUtils.toBoolean("Yes")); [EOL]     assertTrue(BooleanUtils.toBoolean("YeS")); [EOL]     assertTrue(BooleanUtils.toBoolean("YEs")); [EOL]     assertTrue(BooleanUtils.toBoolean("YES")); [EOL]     assertFalse(BooleanUtils.toBoolean("yes?")); [EOL]     assertFalse(BooleanUtils.toBoolean("tru")); [EOL]     assertFalse(BooleanUtils.toBoolean("no")); [EOL]     assertFalse(BooleanUtils.toBoolean("off")); [EOL]     assertFalse(BooleanUtils.toBoolean("yoo")); [EOL] }
@Test [EOL] public void test_toBoolean_String() { [EOL]     assertFalse(BooleanUtils.toBoolean((String) null)); [EOL]     assertFalse(BooleanUtils.toBoolean("")); [EOL]     assertFalse(BooleanUtils.toBoolean("off")); [EOL]     assertFalse(BooleanUtils.toBoolean("oof")); [EOL]     assertFalse(BooleanUtils.toBoolean("yep")); [EOL]     assertFalse(BooleanUtils.toBoolean("trux")); [EOL]     assertFalse(BooleanUtils.toBoolean("false")); [EOL]     assertFalse(BooleanUtils.toBoolean("a")); [EOL]     assertTrue(BooleanUtils.toBoolean("true")); [EOL]     assertTrue(BooleanUtils.toBoolean(new StringBuffer("tr").append("ue").toString())); [EOL]     assertTrue(BooleanUtils.toBoolean("truE")); [EOL]     assertTrue(BooleanUtils.toBoolean("trUe")); [EOL]     assertTrue(BooleanUtils.toBoolean("trUE")); [EOL]     assertTrue(BooleanUtils.toBoolean("tRue")); [EOL]     assertTrue(BooleanUtils.toBoolean("tRuE")); [EOL]     assertTrue(BooleanUtils.toBoolean("tRUe")); [EOL]     assertTrue(BooleanUtils.toBoolean("tRUE")); [EOL]     assertTrue(BooleanUtils.toBoolean("TRUE")); [EOL]     assertTrue(BooleanUtils.toBoolean("TRUe")); [EOL]     assertTrue(BooleanUtils.toBoolean("TRuE")); [EOL]     assertTrue(BooleanUtils.toBoolean("TRue")); [EOL]     assertTrue(BooleanUtils.toBoolean("TrUE")); [EOL]     assertTrue(BooleanUtils.toBoolean("TrUe")); [EOL]     assertTrue(BooleanUtils.toBoolean("TruE")); [EOL]     assertTrue(BooleanUtils.toBoolean("True")); [EOL]     assertTrue(BooleanUtils.toBoolean("on")); [EOL]     assertTrue(BooleanUtils.toBoolean("oN")); [EOL]     assertTrue(BooleanUtils.toBoolean("On")); [EOL]     assertTrue(BooleanUtils.toBoolean("ON")); [EOL]     assertTrue(BooleanUtils.toBoolean("yes")); [EOL]     assertTrue(BooleanUtils.toBoolean("yeS")); [EOL]     assertTrue(BooleanUtils.toBoolean("yEs")); [EOL]     assertTrue(BooleanUtils.toBoolean("yES")); [EOL]     assertTrue(BooleanUtils.toBoolean("Yes")); [EOL]     assertTrue(BooleanUtils.toBoolean("YeS")); [EOL]     assertTrue(BooleanUtils.toBoolean("YEs")); [EOL]     assertTrue(BooleanUtils.toBoolean("YES")); [EOL]     assertFalse(BooleanUtils.toBoolean("yes?")); [EOL]     assertFalse(BooleanUtils.toBoolean("tru")); [EOL]     assertFalse(BooleanUtils.toBoolean("no")); [EOL]     assertFalse(BooleanUtils.toBoolean("off")); [EOL]     assertFalse(BooleanUtils.toBoolean("yoo")); [EOL] }
@Test [EOL] public void test_toStringTrueFalse_boolean() { [EOL]     assertEquals("true", BooleanUtils.toStringTrueFalse(true)); [EOL]     assertEquals("false", BooleanUtils.toStringTrueFalse(false)); [EOL] }
@Test [EOL] public void testAnd_primitive_validInput_2items() { [EOL]     assertTrue("False result for (true, true)", BooleanUtils.and(new boolean[] { true, true })); [EOL]     assertTrue("True result for (false, false)", !BooleanUtils.and(new boolean[] { false, false })); [EOL]     assertTrue("True result for (true, false)", !BooleanUtils.and(new boolean[] { true, false })); [EOL]     assertTrue("True result for (false, true)", !BooleanUtils.and(new boolean[] { false, true })); [EOL] }
@Test [EOL] public void testAnd_primitive_validInput_2items() { [EOL]     assertTrue("False result for (true, true)", BooleanUtils.and(new boolean[] { true, true })); [EOL]     assertTrue("True result for (false, false)", !BooleanUtils.and(new boolean[] { false, false })); [EOL]     assertTrue("True result for (true, false)", !BooleanUtils.and(new boolean[] { true, false })); [EOL]     assertTrue("True result for (false, true)", !BooleanUtils.and(new boolean[] { false, true })); [EOL] }
@Test [EOL] public void testAnd_primitive_validInput_2items() { [EOL]     assertTrue("False result for (true, true)", BooleanUtils.and(new boolean[] { true, true })); [EOL]     assertTrue("True result for (false, false)", !BooleanUtils.and(new boolean[] { false, false })); [EOL]     assertTrue("True result for (true, false)", !BooleanUtils.and(new boolean[] { true, false })); [EOL]     assertTrue("True result for (false, true)", !BooleanUtils.and(new boolean[] { false, true })); [EOL] }
@Test [EOL] public void testAnd_primitive_validInput_2items() { [EOL]     assertTrue("False result for (true, true)", BooleanUtils.and(new boolean[] { true, true })); [EOL]     assertTrue("True result for (false, false)", !BooleanUtils.and(new boolean[] { false, false })); [EOL]     assertTrue("True result for (true, false)", !BooleanUtils.and(new boolean[] { true, false })); [EOL]     assertTrue("True result for (false, true)", !BooleanUtils.and(new boolean[] { false, true })); [EOL] }
@Test [EOL] public void testAnd_primitive_validInput_2items() { [EOL]     assertTrue("False result for (true, true)", BooleanUtils.and(new boolean[] { true, true })); [EOL]     assertTrue("True result for (false, false)", !BooleanUtils.and(new boolean[] { false, false })); [EOL]     assertTrue("True result for (true, false)", !BooleanUtils.and(new boolean[] { true, false })); [EOL]     assertTrue("True result for (false, true)", !BooleanUtils.and(new boolean[] { false, true })); [EOL] }
@Test [EOL] public void testAnd_object_validInput_3items() { [EOL]     assertTrue("True result for (false, false, true)", !BooleanUtils.and(new Boolean[] { Boolean.FALSE, Boolean.FALSE, Boolean.TRUE }).booleanValue()); [EOL]     assertTrue("True result for (false, true, false)", !BooleanUtils.and(new Boolean[] { Boolean.FALSE, Boolean.TRUE, Boolean.FALSE }).booleanValue()); [EOL]     assertTrue("True result for (true, false, false)", !BooleanUtils.and(new Boolean[] { Boolean.TRUE, Boolean.FALSE, Boolean.FALSE }).booleanValue()); [EOL]     assertTrue("False result for (true, true, true)", BooleanUtils.and(new Boolean[] { Boolean.TRUE, Boolean.TRUE, Boolean.TRUE }).booleanValue()); [EOL]     assertTrue("True result for (false, false)", !BooleanUtils.and(new Boolean[] { Boolean.FALSE, Boolean.FALSE, Boolean.FALSE }).booleanValue()); [EOL]     assertTrue("True result for (true, true, false)", !BooleanUtils.and(new Boolean[] { Boolean.TRUE, Boolean.TRUE, Boolean.FALSE }).booleanValue()); [EOL]     assertTrue("True result for (true, false, true)", !BooleanUtils.and(new Boolean[] { Boolean.TRUE, Boolean.FALSE, Boolean.TRUE }).booleanValue()); [EOL]     assertTrue("True result for (false, true, true)", !BooleanUtils.and(new Boolean[] { Boolean.FALSE, Boolean.TRUE, Boolean.TRUE }).booleanValue()); [EOL] }
@Test [EOL] public void testAnd_object_validInput_3items() { [EOL]     assertTrue("True result for (false, false, true)", !BooleanUtils.and(new Boolean[] { Boolean.FALSE, Boolean.FALSE, Boolean.TRUE }).booleanValue()); [EOL]     assertTrue("True result for (false, true, false)", !BooleanUtils.and(new Boolean[] { Boolean.FALSE, Boolean.TRUE, Boolean.FALSE }).booleanValue()); [EOL]     assertTrue("True result for (true, false, false)", !BooleanUtils.and(new Boolean[] { Boolean.TRUE, Boolean.FALSE, Boolean.FALSE }).booleanValue()); [EOL]     assertTrue("False result for (true, true, true)", BooleanUtils.and(new Boolean[] { Boolean.TRUE, Boolean.TRUE, Boolean.TRUE }).booleanValue()); [EOL]     assertTrue("True result for (false, false)", !BooleanUtils.and(new Boolean[] { Boolean.FALSE, Boolean.FALSE, Boolean.FALSE }).booleanValue()); [EOL]     assertTrue("True result for (true, true, false)", !BooleanUtils.and(new Boolean[] { Boolean.TRUE, Boolean.TRUE, Boolean.FALSE }).booleanValue()); [EOL]     assertTrue("True result for (true, false, true)", !BooleanUtils.and(new Boolean[] { Boolean.TRUE, Boolean.FALSE, Boolean.TRUE }).booleanValue()); [EOL]     assertTrue("True result for (false, true, true)", !BooleanUtils.and(new Boolean[] { Boolean.FALSE, Boolean.TRUE, Boolean.TRUE }).booleanValue()); [EOL] }
@Test [EOL] public void testAnd_object_validInput_3items() { [EOL]     assertTrue("True result for (false, false, true)", !BooleanUtils.and(new Boolean[] { Boolean.FALSE, Boolean.FALSE, Boolean.TRUE }).booleanValue()); [EOL]     assertTrue("True result for (false, true, false)", !BooleanUtils.and(new Boolean[] { Boolean.FALSE, Boolean.TRUE, Boolean.FALSE }).booleanValue()); [EOL]     assertTrue("True result for (true, false, false)", !BooleanUtils.and(new Boolean[] { Boolean.TRUE, Boolean.FALSE, Boolean.FALSE }).booleanValue()); [EOL]     assertTrue("False result for (true, true, true)", BooleanUtils.and(new Boolean[] { Boolean.TRUE, Boolean.TRUE, Boolean.TRUE }).booleanValue()); [EOL]     assertTrue("True result for (false, false)", !BooleanUtils.and(new Boolean[] { Boolean.FALSE, Boolean.FALSE, Boolean.FALSE }).booleanValue()); [EOL]     assertTrue("True result for (true, true, false)", !BooleanUtils.and(new Boolean[] { Boolean.TRUE, Boolean.TRUE, Boolean.FALSE }).booleanValue()); [EOL]     assertTrue("True result for (true, false, true)", !BooleanUtils.and(new Boolean[] { Boolean.TRUE, Boolean.FALSE, Boolean.TRUE }).booleanValue()); [EOL]     assertTrue("True result for (false, true, true)", !BooleanUtils.and(new Boolean[] { Boolean.FALSE, Boolean.TRUE, Boolean.TRUE }).booleanValue()); [EOL] }
@Test [EOL] public void testAnd_object_validInput_3items() { [EOL]     assertTrue("True result for (false, false, true)", !BooleanUtils.and(new Boolean[] { Boolean.FALSE, Boolean.FALSE, Boolean.TRUE }).booleanValue()); [EOL]     assertTrue("True result for (false, true, false)", !BooleanUtils.and(new Boolean[] { Boolean.FALSE, Boolean.TRUE, Boolean.FALSE }).booleanValue()); [EOL]     assertTrue("True result for (true, false, false)", !BooleanUtils.and(new Boolean[] { Boolean.TRUE, Boolean.FALSE, Boolean.FALSE }).booleanValue()); [EOL]     assertTrue("False result for (true, true, true)", BooleanUtils.and(new Boolean[] { Boolean.TRUE, Boolean.TRUE, Boolean.TRUE }).booleanValue()); [EOL]     assertTrue("True result for (false, false)", !BooleanUtils.and(new Boolean[] { Boolean.FALSE, Boolean.FALSE, Boolean.FALSE }).booleanValue()); [EOL]     assertTrue("True result for (true, true, false)", !BooleanUtils.and(new Boolean[] { Boolean.TRUE, Boolean.TRUE, Boolean.FALSE }).booleanValue()); [EOL]     assertTrue("True result for (true, false, true)", !BooleanUtils.and(new Boolean[] { Boolean.TRUE, Boolean.FALSE, Boolean.TRUE }).booleanValue()); [EOL]     assertTrue("True result for (false, true, true)", !BooleanUtils.and(new Boolean[] { Boolean.FALSE, Boolean.TRUE, Boolean.TRUE }).booleanValue()); [EOL] }
@Test [EOL] public void testAnd_object_validInput_3items() { [EOL]     assertTrue("True result for (false, false, true)", !BooleanUtils.and(new Boolean[] { Boolean.FALSE, Boolean.FALSE, Boolean.TRUE }).booleanValue()); [EOL]     assertTrue("True result for (false, true, false)", !BooleanUtils.and(new Boolean[] { Boolean.FALSE, Boolean.TRUE, Boolean.FALSE }).booleanValue()); [EOL]     assertTrue("True result for (true, false, false)", !BooleanUtils.and(new Boolean[] { Boolean.TRUE, Boolean.FALSE, Boolean.FALSE }).booleanValue()); [EOL]     assertTrue("False result for (true, true, true)", BooleanUtils.and(new Boolean[] { Boolean.TRUE, Boolean.TRUE, Boolean.TRUE }).booleanValue()); [EOL]     assertTrue("True result for (false, false)", !BooleanUtils.and(new Boolean[] { Boolean.FALSE, Boolean.FALSE, Boolean.FALSE }).booleanValue()); [EOL]     assertTrue("True result for (true, true, false)", !BooleanUtils.and(new Boolean[] { Boolean.TRUE, Boolean.TRUE, Boolean.FALSE }).booleanValue()); [EOL]     assertTrue("True result for (true, false, true)", !BooleanUtils.and(new Boolean[] { Boolean.TRUE, Boolean.FALSE, Boolean.TRUE }).booleanValue()); [EOL]     assertTrue("True result for (false, true, true)", !BooleanUtils.and(new Boolean[] { Boolean.FALSE, Boolean.TRUE, Boolean.TRUE }).booleanValue()); [EOL] }
@Test [EOL] public void testAnd_object_validInput_3items() { [EOL]     assertTrue("True result for (false, false, true)", !BooleanUtils.and(new Boolean[] { Boolean.FALSE, Boolean.FALSE, Boolean.TRUE }).booleanValue()); [EOL]     assertTrue("True result for (false, true, false)", !BooleanUtils.and(new Boolean[] { Boolean.FALSE, Boolean.TRUE, Boolean.FALSE }).booleanValue()); [EOL]     assertTrue("True result for (true, false, false)", !BooleanUtils.and(new Boolean[] { Boolean.TRUE, Boolean.FALSE, Boolean.FALSE }).booleanValue()); [EOL]     assertTrue("False result for (true, true, true)", BooleanUtils.and(new Boolean[] { Boolean.TRUE, Boolean.TRUE, Boolean.TRUE }).booleanValue()); [EOL]     assertTrue("True result for (false, false)", !BooleanUtils.and(new Boolean[] { Boolean.FALSE, Boolean.FALSE, Boolean.FALSE }).booleanValue()); [EOL]     assertTrue("True result for (true, true, false)", !BooleanUtils.and(new Boolean[] { Boolean.TRUE, Boolean.TRUE, Boolean.FALSE }).booleanValue()); [EOL]     assertTrue("True result for (true, false, true)", !BooleanUtils.and(new Boolean[] { Boolean.TRUE, Boolean.FALSE, Boolean.TRUE }).booleanValue()); [EOL]     assertTrue("True result for (false, true, true)", !BooleanUtils.and(new Boolean[] { Boolean.FALSE, Boolean.TRUE, Boolean.TRUE }).booleanValue()); [EOL] }
@Test(expected = IllegalArgumentException.class) [EOL] public void testXor_primitive_emptyInput() { [EOL]     BooleanUtils.xor(new boolean[] {}); [EOL] }
@Test(expected = IllegalArgumentException.class) [EOL] public void testXor_primitive_emptyInput() { [EOL]     BooleanUtils.xor(new boolean[] {}); [EOL] }
@Test(expected = IllegalArgumentException.class) [EOL] public void testXor_primitive_emptyInput() { [EOL]     BooleanUtils.xor(new boolean[] {}); [EOL] }
@Test(expected = IllegalArgumentException.class) [EOL] public void testXor_primitive_emptyInput() { [EOL]     BooleanUtils.xor(new boolean[] {}); [EOL] }
@Test(expected = IllegalArgumentException.class) [EOL] public void testXor_primitive_emptyInput() { [EOL]     BooleanUtils.xor(new boolean[] {}); [EOL] }
@Test(expected = IllegalArgumentException.class) [EOL] public void testXor_primitive_emptyInput() { [EOL]     BooleanUtils.xor(new boolean[] {}); [EOL] }
@Test(expected = IllegalArgumentException.class) [EOL] public void testXor_primitive_emptyInput() { [EOL]     BooleanUtils.xor(new boolean[] {}); [EOL] }
@Test [EOL] public void testInvokeExactMethod() throws Exception { [EOL]     assertEquals("foo()", MethodUtils.invokeExactMethod(testBean, "foo", (Object[]) ArrayUtils.EMPTY_CLASS_ARRAY)); [EOL]     assertEquals("foo()", MethodUtils.invokeExactMethod(testBean, "foo", (Object[]) null)); [EOL]     assertEquals("foo()", MethodUtils.invokeExactMethod(testBean, "foo", (Object[]) null, (Class<?>[]) null)); [EOL]     assertEquals("foo(String)", MethodUtils.invokeExactMethod(testBean, "foo", "")); [EOL]     assertEquals("foo(Object)", MethodUtils.invokeExactMethod(testBean, "foo", new Object())); [EOL]     assertEquals("foo(Integer)", MethodUtils.invokeExactMethod(testBean, "foo", NumberUtils.INTEGER_ONE)); [EOL]     assertEquals("foo(double)", MethodUtils.invokeExactMethod(testBean, "foo", new Object[] { NumberUtils.DOUBLE_ONE }, new Class[] { Double.TYPE })); [EOL]     try { [EOL]         MethodUtils.invokeExactMethod(testBean, "foo", NumberUtils.BYTE_ONE); [EOL]         fail("should throw NoSuchMethodException"); [EOL]     } catch (final NoSuchMethodException e) { [EOL]     } [EOL]     try { [EOL]         MethodUtils.invokeExactMethod(testBean, "foo", NumberUtils.LONG_ONE); [EOL]         fail("should throw NoSuchMethodException"); [EOL]     } catch (final NoSuchMethodException e) { [EOL]     } [EOL]     try { [EOL]         MethodUtils.invokeExactMethod(testBean, "foo", Boolean.TRUE); [EOL]         fail("should throw NoSuchMethodException"); [EOL]     } catch (final NoSuchMethodException e) { [EOL]     } [EOL] }
@Test [EOL] public void testInvokeExactMethod() throws Exception { [EOL]     assertEquals("foo()", MethodUtils.invokeExactMethod(testBean, "foo", (Object[]) ArrayUtils.EMPTY_CLASS_ARRAY)); [EOL]     assertEquals("foo()", MethodUtils.invokeExactMethod(testBean, "foo", (Object[]) null)); [EOL]     assertEquals("foo()", MethodUtils.invokeExactMethod(testBean, "foo", (Object[]) null, (Class<?>[]) null)); [EOL]     assertEquals("foo(String)", MethodUtils.invokeExactMethod(testBean, "foo", "")); [EOL]     assertEquals("foo(Object)", MethodUtils.invokeExactMethod(testBean, "foo", new Object())); [EOL]     assertEquals("foo(Integer)", MethodUtils.invokeExactMethod(testBean, "foo", NumberUtils.INTEGER_ONE)); [EOL]     assertEquals("foo(double)", MethodUtils.invokeExactMethod(testBean, "foo", new Object[] { NumberUtils.DOUBLE_ONE }, new Class[] { Double.TYPE })); [EOL]     try { [EOL]         MethodUtils.invokeExactMethod(testBean, "foo", NumberUtils.BYTE_ONE); [EOL]         fail("should throw NoSuchMethodException"); [EOL]     } catch (final NoSuchMethodException e) { [EOL]     } [EOL]     try { [EOL]         MethodUtils.invokeExactMethod(testBean, "foo", NumberUtils.LONG_ONE); [EOL]         fail("should throw NoSuchMethodException"); [EOL]     } catch (final NoSuchMethodException e) { [EOL]     } [EOL]     try { [EOL]         MethodUtils.invokeExactMethod(testBean, "foo", Boolean.TRUE); [EOL]         fail("should throw NoSuchMethodException"); [EOL]     } catch (final NoSuchMethodException e) { [EOL]     } [EOL] }
@Test [EOL] public void testInvokeExactMethod() throws Exception { [EOL]     assertEquals("foo()", MethodUtils.invokeExactMethod(testBean, "foo", (Object[]) ArrayUtils.EMPTY_CLASS_ARRAY)); [EOL]     assertEquals("foo()", MethodUtils.invokeExactMethod(testBean, "foo", (Object[]) null)); [EOL]     assertEquals("foo()", MethodUtils.invokeExactMethod(testBean, "foo", (Object[]) null, (Class<?>[]) null)); [EOL]     assertEquals("foo(String)", MethodUtils.invokeExactMethod(testBean, "foo", "")); [EOL]     assertEquals("foo(Object)", MethodUtils.invokeExactMethod(testBean, "foo", new Object())); [EOL]     assertEquals("foo(Integer)", MethodUtils.invokeExactMethod(testBean, "foo", NumberUtils.INTEGER_ONE)); [EOL]     assertEquals("foo(double)", MethodUtils.invokeExactMethod(testBean, "foo", new Object[] { NumberUtils.DOUBLE_ONE }, new Class[] { Double.TYPE })); [EOL]     try { [EOL]         MethodUtils.invokeExactMethod(testBean, "foo", NumberUtils.BYTE_ONE); [EOL]         fail("should throw NoSuchMethodException"); [EOL]     } catch (final NoSuchMethodException e) { [EOL]     } [EOL]     try { [EOL]         MethodUtils.invokeExactMethod(testBean, "foo", NumberUtils.LONG_ONE); [EOL]         fail("should throw NoSuchMethodException"); [EOL]     } catch (final NoSuchMethodException e) { [EOL]     } [EOL]     try { [EOL]         MethodUtils.invokeExactMethod(testBean, "foo", Boolean.TRUE); [EOL]         fail("should throw NoSuchMethodException"); [EOL]     } catch (final NoSuchMethodException e) { [EOL]     } [EOL] }
@Test [EOL] public void testInvokeExactMethod() throws Exception { [EOL]     assertEquals("foo()", MethodUtils.invokeExactMethod(testBean, "foo", (Object[]) ArrayUtils.EMPTY_CLASS_ARRAY)); [EOL]     assertEquals("foo()", MethodUtils.invokeExactMethod(testBean, "foo", (Object[]) null)); [EOL]     assertEquals("foo()", MethodUtils.invokeExactMethod(testBean, "foo", (Object[]) null, (Class<?>[]) null)); [EOL]     assertEquals("foo(String)", MethodUtils.invokeExactMethod(testBean, "foo", "")); [EOL]     assertEquals("foo(Object)", MethodUtils.invokeExactMethod(testBean, "foo", new Object())); [EOL]     assertEquals("foo(Integer)", MethodUtils.invokeExactMethod(testBean, "foo", NumberUtils.INTEGER_ONE)); [EOL]     assertEquals("foo(double)", MethodUtils.invokeExactMethod(testBean, "foo", new Object[] { NumberUtils.DOUBLE_ONE }, new Class[] { Double.TYPE })); [EOL]     try { [EOL]         MethodUtils.invokeExactMethod(testBean, "foo", NumberUtils.BYTE_ONE); [EOL]         fail("should throw NoSuchMethodException"); [EOL]     } catch (final NoSuchMethodException e) { [EOL]     } [EOL]     try { [EOL]         MethodUtils.invokeExactMethod(testBean, "foo", NumberUtils.LONG_ONE); [EOL]         fail("should throw NoSuchMethodException"); [EOL]     } catch (final NoSuchMethodException e) { [EOL]     } [EOL]     try { [EOL]         MethodUtils.invokeExactMethod(testBean, "foo", Boolean.TRUE); [EOL]         fail("should throw NoSuchMethodException"); [EOL]     } catch (final NoSuchMethodException e) { [EOL]     } [EOL] }
@Test [EOL] public void testInvokeExactMethod() throws Exception { [EOL]     assertEquals("foo()", MethodUtils.invokeExactMethod(testBean, "foo", (Object[]) ArrayUtils.EMPTY_CLASS_ARRAY)); [EOL]     assertEquals("foo()", MethodUtils.invokeExactMethod(testBean, "foo", (Object[]) null)); [EOL]     assertEquals("foo()", MethodUtils.invokeExactMethod(testBean, "foo", (Object[]) null, (Class<?>[]) null)); [EOL]     assertEquals("foo(String)", MethodUtils.invokeExactMethod(testBean, "foo", "")); [EOL]     assertEquals("foo(Object)", MethodUtils.invokeExactMethod(testBean, "foo", new Object())); [EOL]     assertEquals("foo(Integer)", MethodUtils.invokeExactMethod(testBean, "foo", NumberUtils.INTEGER_ONE)); [EOL]     assertEquals("foo(double)", MethodUtils.invokeExactMethod(testBean, "foo", new Object[] { NumberUtils.DOUBLE_ONE }, new Class[] { Double.TYPE })); [EOL]     try { [EOL]         MethodUtils.invokeExactMethod(testBean, "foo", NumberUtils.BYTE_ONE); [EOL]         fail("should throw NoSuchMethodException"); [EOL]     } catch (final NoSuchMethodException e) { [EOL]     } [EOL]     try { [EOL]         MethodUtils.invokeExactMethod(testBean, "foo", NumberUtils.LONG_ONE); [EOL]         fail("should throw NoSuchMethodException"); [EOL]     } catch (final NoSuchMethodException e) { [EOL]     } [EOL]     try { [EOL]         MethodUtils.invokeExactMethod(testBean, "foo", Boolean.TRUE); [EOL]         fail("should throw NoSuchMethodException"); [EOL]     } catch (final NoSuchMethodException e) { [EOL]     } [EOL] }
@Test [EOL] public void testInvokeExactMethod() throws Exception { [EOL]     assertEquals("foo()", MethodUtils.invokeExactMethod(testBean, "foo", (Object[]) ArrayUtils.EMPTY_CLASS_ARRAY)); [EOL]     assertEquals("foo()", MethodUtils.invokeExactMethod(testBean, "foo", (Object[]) null)); [EOL]     assertEquals("foo()", MethodUtils.invokeExactMethod(testBean, "foo", (Object[]) null, (Class<?>[]) null)); [EOL]     assertEquals("foo(String)", MethodUtils.invokeExactMethod(testBean, "foo", "")); [EOL]     assertEquals("foo(Object)", MethodUtils.invokeExactMethod(testBean, "foo", new Object())); [EOL]     assertEquals("foo(Integer)", MethodUtils.invokeExactMethod(testBean, "foo", NumberUtils.INTEGER_ONE)); [EOL]     assertEquals("foo(double)", MethodUtils.invokeExactMethod(testBean, "foo", new Object[] { NumberUtils.DOUBLE_ONE }, new Class[] { Double.TYPE })); [EOL]     try { [EOL]         MethodUtils.invokeExactMethod(testBean, "foo", NumberUtils.BYTE_ONE); [EOL]         fail("should throw NoSuchMethodException"); [EOL]     } catch (final NoSuchMethodException e) { [EOL]     } [EOL]     try { [EOL]         MethodUtils.invokeExactMethod(testBean, "foo", NumberUtils.LONG_ONE); [EOL]         fail("should throw NoSuchMethodException"); [EOL]     } catch (final NoSuchMethodException e) { [EOL]     } [EOL]     try { [EOL]         MethodUtils.invokeExactMethod(testBean, "foo", Boolean.TRUE); [EOL]         fail("should throw NoSuchMethodException"); [EOL]     } catch (final NoSuchMethodException e) { [EOL]     } [EOL] }
@Test [EOL] public void testInvokeExactMethod() throws Exception { [EOL]     assertEquals("foo()", MethodUtils.invokeExactMethod(testBean, "foo", (Object[]) ArrayUtils.EMPTY_CLASS_ARRAY)); [EOL]     assertEquals("foo()", MethodUtils.invokeExactMethod(testBean, "foo", (Object[]) null)); [EOL]     assertEquals("foo()", MethodUtils.invokeExactMethod(testBean, "foo", (Object[]) null, (Class<?>[]) null)); [EOL]     assertEquals("foo(String)", MethodUtils.invokeExactMethod(testBean, "foo", "")); [EOL]     assertEquals("foo(Object)", MethodUtils.invokeExactMethod(testBean, "foo", new Object())); [EOL]     assertEquals("foo(Integer)", MethodUtils.invokeExactMethod(testBean, "foo", NumberUtils.INTEGER_ONE)); [EOL]     assertEquals("foo(double)", MethodUtils.invokeExactMethod(testBean, "foo", new Object[] { NumberUtils.DOUBLE_ONE }, new Class[] { Double.TYPE })); [EOL]     try { [EOL]         MethodUtils.invokeExactMethod(testBean, "foo", NumberUtils.BYTE_ONE); [EOL]         fail("should throw NoSuchMethodException"); [EOL]     } catch (final NoSuchMethodException e) { [EOL]     } [EOL]     try { [EOL]         MethodUtils.invokeExactMethod(testBean, "foo", NumberUtils.LONG_ONE); [EOL]         fail("should throw NoSuchMethodException"); [EOL]     } catch (final NoSuchMethodException e) { [EOL]     } [EOL]     try { [EOL]         MethodUtils.invokeExactMethod(testBean, "foo", Boolean.TRUE); [EOL]         fail("should throw NoSuchMethodException"); [EOL]     } catch (final NoSuchMethodException e) { [EOL]     } [EOL] }
@Test [EOL] public void testInvokeExactMethod() throws Exception { [EOL]     assertEquals("foo()", MethodUtils.invokeExactMethod(testBean, "foo", (Object[]) ArrayUtils.EMPTY_CLASS_ARRAY)); [EOL]     assertEquals("foo()", MethodUtils.invokeExactMethod(testBean, "foo", (Object[]) null)); [EOL]     assertEquals("foo()", MethodUtils.invokeExactMethod(testBean, "foo", (Object[]) null, (Class<?>[]) null)); [EOL]     assertEquals("foo(String)", MethodUtils.invokeExactMethod(testBean, "foo", "")); [EOL]     assertEquals("foo(Object)", MethodUtils.invokeExactMethod(testBean, "foo", new Object())); [EOL]     assertEquals("foo(Integer)", MethodUtils.invokeExactMethod(testBean, "foo", NumberUtils.INTEGER_ONE)); [EOL]     assertEquals("foo(double)", MethodUtils.invokeExactMethod(testBean, "foo", new Object[] { NumberUtils.DOUBLE_ONE }, new Class[] { Double.TYPE })); [EOL]     try { [EOL]         MethodUtils.invokeExactMethod(testBean, "foo", NumberUtils.BYTE_ONE); [EOL]         fail("should throw NoSuchMethodException"); [EOL]     } catch (final NoSuchMethodException e) { [EOL]     } [EOL]     try { [EOL]         MethodUtils.invokeExactMethod(testBean, "foo", NumberUtils.LONG_ONE); [EOL]         fail("should throw NoSuchMethodException"); [EOL]     } catch (final NoSuchMethodException e) { [EOL]     } [EOL]     try { [EOL]         MethodUtils.invokeExactMethod(testBean, "foo", Boolean.TRUE); [EOL]         fail("should throw NoSuchMethodException"); [EOL]     } catch (final NoSuchMethodException e) { [EOL]     } [EOL] }
@Test [EOL] public void testInvokeExactMethod() throws Exception { [EOL]     assertEquals("foo()", MethodUtils.invokeExactMethod(testBean, "foo", (Object[]) ArrayUtils.EMPTY_CLASS_ARRAY)); [EOL]     assertEquals("foo()", MethodUtils.invokeExactMethod(testBean, "foo", (Object[]) null)); [EOL]     assertEquals("foo()", MethodUtils.invokeExactMethod(testBean, "foo", (Object[]) null, (Class<?>[]) null)); [EOL]     assertEquals("foo(String)", MethodUtils.invokeExactMethod(testBean, "foo", "")); [EOL]     assertEquals("foo(Object)", MethodUtils.invokeExactMethod(testBean, "foo", new Object())); [EOL]     assertEquals("foo(Integer)", MethodUtils.invokeExactMethod(testBean, "foo", NumberUtils.INTEGER_ONE)); [EOL]     assertEquals("foo(double)", MethodUtils.invokeExactMethod(testBean, "foo", new Object[] { NumberUtils.DOUBLE_ONE }, new Class[] { Double.TYPE })); [EOL]     try { [EOL]         MethodUtils.invokeExactMethod(testBean, "foo", NumberUtils.BYTE_ONE); [EOL]         fail("should throw NoSuchMethodException"); [EOL]     } catch (final NoSuchMethodException e) { [EOL]     } [EOL]     try { [EOL]         MethodUtils.invokeExactMethod(testBean, "foo", NumberUtils.LONG_ONE); [EOL]         fail("should throw NoSuchMethodException"); [EOL]     } catch (final NoSuchMethodException e) { [EOL]     } [EOL]     try { [EOL]         MethodUtils.invokeExactMethod(testBean, "foo", Boolean.TRUE); [EOL]         fail("should throw NoSuchMethodException"); [EOL]     } catch (final NoSuchMethodException e) { [EOL]     } [EOL] }
@Test [EOL] public void testInvokeExactMethod() throws Exception { [EOL]     assertEquals("foo()", MethodUtils.invokeExactMethod(testBean, "foo", (Object[]) ArrayUtils.EMPTY_CLASS_ARRAY)); [EOL]     assertEquals("foo()", MethodUtils.invokeExactMethod(testBean, "foo", (Object[]) null)); [EOL]     assertEquals("foo()", MethodUtils.invokeExactMethod(testBean, "foo", (Object[]) null, (Class<?>[]) null)); [EOL]     assertEquals("foo(String)", MethodUtils.invokeExactMethod(testBean, "foo", "")); [EOL]     assertEquals("foo(Object)", MethodUtils.invokeExactMethod(testBean, "foo", new Object())); [EOL]     assertEquals("foo(Integer)", MethodUtils.invokeExactMethod(testBean, "foo", NumberUtils.INTEGER_ONE)); [EOL]     assertEquals("foo(double)", MethodUtils.invokeExactMethod(testBean, "foo", new Object[] { NumberUtils.DOUBLE_ONE }, new Class[] { Double.TYPE })); [EOL]     try { [EOL]         MethodUtils.invokeExactMethod(testBean, "foo", NumberUtils.BYTE_ONE); [EOL]         fail("should throw NoSuchMethodException"); [EOL]     } catch (final NoSuchMethodException e) { [EOL]     } [EOL]     try { [EOL]         MethodUtils.invokeExactMethod(testBean, "foo", NumberUtils.LONG_ONE); [EOL]         fail("should throw NoSuchMethodException"); [EOL]     } catch (final NoSuchMethodException e) { [EOL]     } [EOL]     try { [EOL]         MethodUtils.invokeExactMethod(testBean, "foo", Boolean.TRUE); [EOL]         fail("should throw NoSuchMethodException"); [EOL]     } catch (final NoSuchMethodException e) { [EOL]     } [EOL] }
@Test [EOL] public void testCreateNumber() { [EOL]     assertEquals("createNumber(String) 1 failed", Float.valueOf("1234.5"), NumberUtils.createNumber("1234.5")); [EOL]     assertEquals("createNumber(String) 2 failed", Integer.valueOf("12345"), NumberUtils.createNumber("12345")); [EOL]     assertEquals("createNumber(String) 3 failed", Double.valueOf("1234.5"), NumberUtils.createNumber("1234.5D")); [EOL]     assertEquals("createNumber(String) 3 failed", Double.valueOf("1234.5"), NumberUtils.createNumber("1234.5d")); [EOL]     assertEquals("createNumber(String) 4 failed", Float.valueOf("1234.5"), NumberUtils.createNumber("1234.5F")); [EOL]     assertEquals("createNumber(String) 4 failed", Float.valueOf("1234.5"), NumberUtils.createNumber("1234.5f")); [EOL]     assertEquals("createNumber(String) 5 failed", Long.valueOf(Integer.MAX_VALUE + 1L), NumberUtils.createNumber("" + (Integer.MAX_VALUE + 1L))); [EOL]     assertEquals("createNumber(String) 6 failed", Long.valueOf(12345), NumberUtils.createNumber("12345L")); [EOL]     assertEquals("createNumber(String) 6 failed", Long.valueOf(12345), NumberUtils.createNumber("12345l")); [EOL]     assertEquals("createNumber(String) 7 failed", Float.valueOf("-1234.5"), NumberUtils.createNumber("-1234.5")); [EOL]     assertEquals("createNumber(String) 8 failed", Integer.valueOf("-12345"), NumberUtils.createNumber("-12345")); [EOL]     assertTrue("createNumber(String) 9a failed", 0xFADE == NumberUtils.createNumber("0xFADE").intValue()); [EOL]     assertTrue("createNumber(String) 9b failed", 0xFADE == NumberUtils.createNumber("0Xfade").intValue()); [EOL]     assertTrue("createNumber(String) 10a failed", -0xFADE == NumberUtils.createNumber("-0xFADE").intValue()); [EOL]     assertTrue("createNumber(String) 10b failed", -0xFADE == NumberUtils.createNumber("-0Xfade").intValue()); [EOL]     assertEquals("createNumber(String) 11 failed", Double.valueOf("1.1E200"), NumberUtils.createNumber("1.1E200")); [EOL]     assertEquals("createNumber(String) 12 failed", Float.valueOf("1.1E20"), NumberUtils.createNumber("1.1E20")); [EOL]     assertEquals("createNumber(String) 13 failed", Double.valueOf("-1.1E200"), NumberUtils.createNumber("-1.1E200")); [EOL]     assertEquals("createNumber(String) 14 failed", Double.valueOf("1.1E-200"), NumberUtils.createNumber("1.1E-200")); [EOL]     assertEquals("createNumber(null) failed", null, NumberUtils.createNumber(null)); [EOL]     assertEquals("createNumber(String) failed", new BigInteger("12345678901234567890"), NumberUtils.createNumber("12345678901234567890L")); [EOL]     assertEquals("createNumber(String) 15 failed", new BigDecimal("1.1E-700"), NumberUtils.createNumber("1.1E-700F")); [EOL]     assertEquals("createNumber(String) 16 failed", Long.valueOf("10" + Integer.MAX_VALUE), NumberUtils.createNumber("10" + Integer.MAX_VALUE + "L")); [EOL]     assertEquals("createNumber(String) 17 failed", Long.valueOf("10" + Integer.MAX_VALUE), NumberUtils.createNumber("10" + Integer.MAX_VALUE)); [EOL]     assertEquals("createNumber(String) 18 failed", new BigInteger("10" + Long.MAX_VALUE), NumberUtils.createNumber("10" + Long.MAX_VALUE)); [EOL]     assertEquals("createNumber(String) LANG-521 failed", Float.valueOf("2."), NumberUtils.createNumber("2.")); [EOL]     assertFalse("createNumber(String) succeeded", checkCreateNumber("1eE")); [EOL]     assertEquals("createNumber(String) LANG-693 failed", Double.valueOf(Double.MAX_VALUE), NumberUtils.createNumber("" + Double.MAX_VALUE)); [EOL]     final Number bigNum = NumberUtils.createNumber("-1.1E-700F"); [EOL]     assertNotNull(bigNum); [EOL]     assertEquals(BigDecimal.class, bigNum.getClass()); [EOL] }
@Test [EOL] public void testCreateLong() { [EOL]     assertEquals("createLong(String) failed", Long.valueOf("12345"), NumberUtils.createLong("12345")); [EOL]     assertEquals("createLong(null) failed", null, NumberUtils.createLong(null)); [EOL]     this.testCreateLongFailure(""); [EOL]     this.testCreateLongFailure(" "); [EOL]     this.testCreateLongFailure("\b\t\n\f\r"); [EOL]     this.testCreateLongFailure("\u00A0\uFEFF\u000B\u000C\u001C\u001D\u001E\u001F"); [EOL] }
@Test [EOL] public void testCreateLong() { [EOL]     assertEquals("createLong(String) failed", Long.valueOf("12345"), NumberUtils.createLong("12345")); [EOL]     assertEquals("createLong(null) failed", null, NumberUtils.createLong(null)); [EOL]     this.testCreateLongFailure(""); [EOL]     this.testCreateLongFailure(" "); [EOL]     this.testCreateLongFailure("\b\t\n\f\r"); [EOL]     this.testCreateLongFailure("\u00A0\uFEFF\u000B\u000C\u001C\u001D\u001E\u001F"); [EOL] }
@Test [EOL] public void testCreateLong() { [EOL]     assertEquals("createLong(String) failed", Long.valueOf("12345"), NumberUtils.createLong("12345")); [EOL]     assertEquals("createLong(null) failed", null, NumberUtils.createLong(null)); [EOL]     this.testCreateLongFailure(""); [EOL]     this.testCreateLongFailure(" "); [EOL]     this.testCreateLongFailure("\b\t\n\f\r"); [EOL]     this.testCreateLongFailure("\u00A0\uFEFF\u000B\u000C\u001C\u001D\u001E\u001F"); [EOL] }
@Test [EOL] public void testCreateLong() { [EOL]     assertEquals("createLong(String) failed", Long.valueOf("12345"), NumberUtils.createLong("12345")); [EOL]     assertEquals("createLong(null) failed", null, NumberUtils.createLong(null)); [EOL]     this.testCreateLongFailure(""); [EOL]     this.testCreateLongFailure(" "); [EOL]     this.testCreateLongFailure("\b\t\n\f\r"); [EOL]     this.testCreateLongFailure("\u00A0\uFEFF\u000B\u000C\u001C\u001D\u001E\u001F"); [EOL] }
@Test [EOL] public void testCreateLong() { [EOL]     assertEquals("createLong(String) failed", Long.valueOf("12345"), NumberUtils.createLong("12345")); [EOL]     assertEquals("createLong(null) failed", null, NumberUtils.createLong(null)); [EOL]     this.testCreateLongFailure(""); [EOL]     this.testCreateLongFailure(" "); [EOL]     this.testCreateLongFailure("\b\t\n\f\r"); [EOL]     this.testCreateLongFailure("\u00A0\uFEFF\u000B\u000C\u001C\u001D\u001E\u001F"); [EOL] }
@Test [EOL] public void testMinLong() { [EOL]     assertEquals("min(long[]) failed for array length 1", 5, NumberUtils.min(new long[] { 5 })); [EOL]     assertEquals("min(long[]) failed for array length 2", 6, NumberUtils.min(new long[] { 6, 9 })); [EOL]     assertEquals(-10, NumberUtils.min(new long[] { -10, -5, 0, 5, 10 })); [EOL]     assertEquals(-10, NumberUtils.min(new long[] { -5, 0, -10, 5, 10 })); [EOL] }
@Test [EOL] public void testMinLong() { [EOL]     assertEquals("min(long[]) failed for array length 1", 5, NumberUtils.min(new long[] { 5 })); [EOL]     assertEquals("min(long[]) failed for array length 2", 6, NumberUtils.min(new long[] { 6, 9 })); [EOL]     assertEquals(-10, NumberUtils.min(new long[] { -10, -5, 0, 5, 10 })); [EOL]     assertEquals(-10, NumberUtils.min(new long[] { -5, 0, -10, 5, 10 })); [EOL] }
@Test [EOL] public void testMinLong() { [EOL]     assertEquals("min(long[]) failed for array length 1", 5, NumberUtils.min(new long[] { 5 })); [EOL]     assertEquals("min(long[]) failed for array length 2", 6, NumberUtils.min(new long[] { 6, 9 })); [EOL]     assertEquals(-10, NumberUtils.min(new long[] { -10, -5, 0, 5, 10 })); [EOL]     assertEquals(-10, NumberUtils.min(new long[] { -5, 0, -10, 5, 10 })); [EOL] }
@Test [EOL] public void testMinLong() { [EOL]     assertEquals("min(long[]) failed for array length 1", 5, NumberUtils.min(new long[] { 5 })); [EOL]     assertEquals("min(long[]) failed for array length 2", 6, NumberUtils.min(new long[] { 6, 9 })); [EOL]     assertEquals(-10, NumberUtils.min(new long[] { -10, -5, 0, 5, 10 })); [EOL]     assertEquals(-10, NumberUtils.min(new long[] { -5, 0, -10, 5, 10 })); [EOL] }
@Test [EOL] public void testMinShort() { [EOL]     assertEquals("min(short[]) failed for array length 1", 5, NumberUtils.min(new short[] { 5 })); [EOL]     assertEquals("min(short[]) failed for array length 2", 6, NumberUtils.min(new short[] { 6, 9 })); [EOL]     assertEquals(-10, NumberUtils.min(new short[] { -10, -5, 0, 5, 10 })); [EOL]     assertEquals(-10, NumberUtils.min(new short[] { -5, 0, -10, 5, 10 })); [EOL] }
@Test [EOL] public void testMinShort() { [EOL]     assertEquals("min(short[]) failed for array length 1", 5, NumberUtils.min(new short[] { 5 })); [EOL]     assertEquals("min(short[]) failed for array length 2", 6, NumberUtils.min(new short[] { 6, 9 })); [EOL]     assertEquals(-10, NumberUtils.min(new short[] { -10, -5, 0, 5, 10 })); [EOL]     assertEquals(-10, NumberUtils.min(new short[] { -5, 0, -10, 5, 10 })); [EOL] }
@Test [EOL] public void testMinShort() { [EOL]     assertEquals("min(short[]) failed for array length 1", 5, NumberUtils.min(new short[] { 5 })); [EOL]     assertEquals("min(short[]) failed for array length 2", 6, NumberUtils.min(new short[] { 6, 9 })); [EOL]     assertEquals(-10, NumberUtils.min(new short[] { -10, -5, 0, 5, 10 })); [EOL]     assertEquals(-10, NumberUtils.min(new short[] { -5, 0, -10, 5, 10 })); [EOL] }
@Test [EOL] public void testLang381() { [EOL]     assertTrue(Double.isNaN(NumberUtils.min(1.2, 2.5, Double.NaN))); [EOL]     assertTrue(Double.isNaN(NumberUtils.max(1.2, 2.5, Double.NaN))); [EOL]     assertTrue(Float.isNaN(NumberUtils.min(1.2f, 2.5f, Float.NaN))); [EOL]     assertTrue(Float.isNaN(NumberUtils.max(1.2f, 2.5f, Float.NaN))); [EOL]     final double[] a = new double[] { 1.2, Double.NaN, 3.7, 27.0, 42.0, Double.NaN }; [EOL]     assertTrue(Double.isNaN(NumberUtils.max(a))); [EOL]     assertTrue(Double.isNaN(NumberUtils.min(a))); [EOL]     final double[] b = new double[] { Double.NaN, 1.2, Double.NaN, 3.7, 27.0, 42.0, Double.NaN }; [EOL]     assertTrue(Double.isNaN(NumberUtils.max(b))); [EOL]     assertTrue(Double.isNaN(NumberUtils.min(b))); [EOL]     final float[] aF = new float[] { 1.2f, Float.NaN, 3.7f, 27.0f, 42.0f, Float.NaN }; [EOL]     assertTrue(Float.isNaN(NumberUtils.max(aF))); [EOL]     final float[] bF = new float[] { Float.NaN, 1.2f, Float.NaN, 3.7f, 27.0f, 42.0f, Float.NaN }; [EOL]     assertTrue(Float.isNaN(NumberUtils.max(bF))); [EOL] }
@Test [EOL] public void testLang381() { [EOL]     assertTrue(Double.isNaN(NumberUtils.min(1.2, 2.5, Double.NaN))); [EOL]     assertTrue(Double.isNaN(NumberUtils.max(1.2, 2.5, Double.NaN))); [EOL]     assertTrue(Float.isNaN(NumberUtils.min(1.2f, 2.5f, Float.NaN))); [EOL]     assertTrue(Float.isNaN(NumberUtils.max(1.2f, 2.5f, Float.NaN))); [EOL]     final double[] a = new double[] { 1.2, Double.NaN, 3.7, 27.0, 42.0, Double.NaN }; [EOL]     assertTrue(Double.isNaN(NumberUtils.max(a))); [EOL]     assertTrue(Double.isNaN(NumberUtils.min(a))); [EOL]     final double[] b = new double[] { Double.NaN, 1.2, Double.NaN, 3.7, 27.0, 42.0, Double.NaN }; [EOL]     assertTrue(Double.isNaN(NumberUtils.max(b))); [EOL]     assertTrue(Double.isNaN(NumberUtils.min(b))); [EOL]     final float[] aF = new float[] { 1.2f, Float.NaN, 3.7f, 27.0f, 42.0f, Float.NaN }; [EOL]     assertTrue(Float.isNaN(NumberUtils.max(aF))); [EOL]     final float[] bF = new float[] { Float.NaN, 1.2f, Float.NaN, 3.7f, 27.0f, 42.0f, Float.NaN }; [EOL]     assertTrue(Float.isNaN(NumberUtils.max(bF))); [EOL] }
@Test [EOL] public void testLang381() { [EOL]     assertTrue(Double.isNaN(NumberUtils.min(1.2, 2.5, Double.NaN))); [EOL]     assertTrue(Double.isNaN(NumberUtils.max(1.2, 2.5, Double.NaN))); [EOL]     assertTrue(Float.isNaN(NumberUtils.min(1.2f, 2.5f, Float.NaN))); [EOL]     assertTrue(Float.isNaN(NumberUtils.max(1.2f, 2.5f, Float.NaN))); [EOL]     final double[] a = new double[] { 1.2, Double.NaN, 3.7, 27.0, 42.0, Double.NaN }; [EOL]     assertTrue(Double.isNaN(NumberUtils.max(a))); [EOL]     assertTrue(Double.isNaN(NumberUtils.min(a))); [EOL]     final double[] b = new double[] { Double.NaN, 1.2, Double.NaN, 3.7, 27.0, 42.0, Double.NaN }; [EOL]     assertTrue(Double.isNaN(NumberUtils.max(b))); [EOL]     assertTrue(Double.isNaN(NumberUtils.min(b))); [EOL]     final float[] aF = new float[] { 1.2f, Float.NaN, 3.7f, 27.0f, 42.0f, Float.NaN }; [EOL]     assertTrue(Float.isNaN(NumberUtils.max(aF))); [EOL]     final float[] bF = new float[] { Float.NaN, 1.2f, Float.NaN, 3.7f, 27.0f, 42.0f, Float.NaN }; [EOL]     assertTrue(Float.isNaN(NumberUtils.max(bF))); [EOL] }
@Test [EOL] public void testLang381() { [EOL]     assertTrue(Double.isNaN(NumberUtils.min(1.2, 2.5, Double.NaN))); [EOL]     assertTrue(Double.isNaN(NumberUtils.max(1.2, 2.5, Double.NaN))); [EOL]     assertTrue(Float.isNaN(NumberUtils.min(1.2f, 2.5f, Float.NaN))); [EOL]     assertTrue(Float.isNaN(NumberUtils.max(1.2f, 2.5f, Float.NaN))); [EOL]     final double[] a = new double[] { 1.2, Double.NaN, 3.7, 27.0, 42.0, Double.NaN }; [EOL]     assertTrue(Double.isNaN(NumberUtils.max(a))); [EOL]     assertTrue(Double.isNaN(NumberUtils.min(a))); [EOL]     final double[] b = new double[] { Double.NaN, 1.2, Double.NaN, 3.7, 27.0, 42.0, Double.NaN }; [EOL]     assertTrue(Double.isNaN(NumberUtils.max(b))); [EOL]     assertTrue(Double.isNaN(NumberUtils.min(b))); [EOL]     final float[] aF = new float[] { 1.2f, Float.NaN, 3.7f, 27.0f, 42.0f, Float.NaN }; [EOL]     assertTrue(Float.isNaN(NumberUtils.max(aF))); [EOL]     final float[] bF = new float[] { Float.NaN, 1.2f, Float.NaN, 3.7f, 27.0f, 42.0f, Float.NaN }; [EOL]     assertTrue(Float.isNaN(NumberUtils.max(bF))); [EOL] }
@Test [EOL] public void testMaxByte() { [EOL]     assertEquals("max(byte[]) failed for array length 1", 5, NumberUtils.max(new byte[] { 5 })); [EOL]     assertEquals("max(byte[]) failed for array length 2", 9, NumberUtils.max(new byte[] { 6, 9 })); [EOL]     assertEquals("max(byte[]) failed for array length 5", 10, NumberUtils.max(new byte[] { -10, -5, 0, 5, 10 })); [EOL]     assertEquals(10, NumberUtils.max(new byte[] { -10, -5, 0, 5, 10 })); [EOL]     assertEquals(10, NumberUtils.max(new byte[] { -5, 0, 10, 5, -10 })); [EOL] }
@Test [EOL] public void testMaxByte() { [EOL]     assertEquals("max(byte[]) failed for array length 1", 5, NumberUtils.max(new byte[] { 5 })); [EOL]     assertEquals("max(byte[]) failed for array length 2", 9, NumberUtils.max(new byte[] { 6, 9 })); [EOL]     assertEquals("max(byte[]) failed for array length 5", 10, NumberUtils.max(new byte[] { -10, -5, 0, 5, 10 })); [EOL]     assertEquals(10, NumberUtils.max(new byte[] { -10, -5, 0, 5, 10 })); [EOL]     assertEquals(10, NumberUtils.max(new byte[] { -5, 0, 10, 5, -10 })); [EOL] }
@Test [EOL] public void testMaxByte() { [EOL]     assertEquals("max(byte[]) failed for array length 1", 5, NumberUtils.max(new byte[] { 5 })); [EOL]     assertEquals("max(byte[]) failed for array length 2", 9, NumberUtils.max(new byte[] { 6, 9 })); [EOL]     assertEquals("max(byte[]) failed for array length 5", 10, NumberUtils.max(new byte[] { -10, -5, 0, 5, 10 })); [EOL]     assertEquals(10, NumberUtils.max(new byte[] { -10, -5, 0, 5, 10 })); [EOL]     assertEquals(10, NumberUtils.max(new byte[] { -5, 0, 10, 5, -10 })); [EOL] }
@Test [EOL] public void testMaxByte() { [EOL]     assertEquals("max(byte[]) failed for array length 1", 5, NumberUtils.max(new byte[] { 5 })); [EOL]     assertEquals("max(byte[]) failed for array length 2", 9, NumberUtils.max(new byte[] { 6, 9 })); [EOL]     assertEquals("max(byte[]) failed for array length 5", 10, NumberUtils.max(new byte[] { -10, -5, 0, 5, 10 })); [EOL]     assertEquals(10, NumberUtils.max(new byte[] { -10, -5, 0, 5, 10 })); [EOL]     assertEquals(10, NumberUtils.max(new byte[] { -5, 0, 10, 5, -10 })); [EOL] }
@Test [EOL] public void testMaxByte() { [EOL]     assertEquals("max(byte[]) failed for array length 1", 5, NumberUtils.max(new byte[] { 5 })); [EOL]     assertEquals("max(byte[]) failed for array length 2", 9, NumberUtils.max(new byte[] { 6, 9 })); [EOL]     assertEquals("max(byte[]) failed for array length 5", 10, NumberUtils.max(new byte[] { -10, -5, 0, 5, 10 })); [EOL]     assertEquals(10, NumberUtils.max(new byte[] { -10, -5, 0, 5, 10 })); [EOL]     assertEquals(10, NumberUtils.max(new byte[] { -5, 0, 10, 5, -10 })); [EOL] }
@Test [EOL] public void testLang381() { [EOL]     assertTrue(Double.isNaN(NumberUtils.min(1.2, 2.5, Double.NaN))); [EOL]     assertTrue(Double.isNaN(NumberUtils.max(1.2, 2.5, Double.NaN))); [EOL]     assertTrue(Float.isNaN(NumberUtils.min(1.2f, 2.5f, Float.NaN))); [EOL]     assertTrue(Float.isNaN(NumberUtils.max(1.2f, 2.5f, Float.NaN))); [EOL]     final double[] a = new double[] { 1.2, Double.NaN, 3.7, 27.0, 42.0, Double.NaN }; [EOL]     assertTrue(Double.isNaN(NumberUtils.max(a))); [EOL]     assertTrue(Double.isNaN(NumberUtils.min(a))); [EOL]     final double[] b = new double[] { Double.NaN, 1.2, Double.NaN, 3.7, 27.0, 42.0, Double.NaN }; [EOL]     assertTrue(Double.isNaN(NumberUtils.max(b))); [EOL]     assertTrue(Double.isNaN(NumberUtils.min(b))); [EOL]     final float[] aF = new float[] { 1.2f, Float.NaN, 3.7f, 27.0f, 42.0f, Float.NaN }; [EOL]     assertTrue(Float.isNaN(NumberUtils.max(aF))); [EOL]     final float[] bF = new float[] { Float.NaN, 1.2f, Float.NaN, 3.7f, 27.0f, 42.0f, Float.NaN }; [EOL]     assertTrue(Float.isNaN(NumberUtils.max(bF))); [EOL] }
@Test [EOL] public void testLang381() { [EOL]     assertTrue(Double.isNaN(NumberUtils.min(1.2, 2.5, Double.NaN))); [EOL]     assertTrue(Double.isNaN(NumberUtils.max(1.2, 2.5, Double.NaN))); [EOL]     assertTrue(Float.isNaN(NumberUtils.min(1.2f, 2.5f, Float.NaN))); [EOL]     assertTrue(Float.isNaN(NumberUtils.max(1.2f, 2.5f, Float.NaN))); [EOL]     final double[] a = new double[] { 1.2, Double.NaN, 3.7, 27.0, 42.0, Double.NaN }; [EOL]     assertTrue(Double.isNaN(NumberUtils.max(a))); [EOL]     assertTrue(Double.isNaN(NumberUtils.min(a))); [EOL]     final double[] b = new double[] { Double.NaN, 1.2, Double.NaN, 3.7, 27.0, 42.0, Double.NaN }; [EOL]     assertTrue(Double.isNaN(NumberUtils.max(b))); [EOL]     assertTrue(Double.isNaN(NumberUtils.min(b))); [EOL]     final float[] aF = new float[] { 1.2f, Float.NaN, 3.7f, 27.0f, 42.0f, Float.NaN }; [EOL]     assertTrue(Float.isNaN(NumberUtils.max(aF))); [EOL]     final float[] bF = new float[] { Float.NaN, 1.2f, Float.NaN, 3.7f, 27.0f, 42.0f, Float.NaN }; [EOL]     assertTrue(Float.isNaN(NumberUtils.max(bF))); [EOL] }
@Test [EOL] public void testLang381() { [EOL]     assertTrue(Double.isNaN(NumberUtils.min(1.2, 2.5, Double.NaN))); [EOL]     assertTrue(Double.isNaN(NumberUtils.max(1.2, 2.5, Double.NaN))); [EOL]     assertTrue(Float.isNaN(NumberUtils.min(1.2f, 2.5f, Float.NaN))); [EOL]     assertTrue(Float.isNaN(NumberUtils.max(1.2f, 2.5f, Float.NaN))); [EOL]     final double[] a = new double[] { 1.2, Double.NaN, 3.7, 27.0, 42.0, Double.NaN }; [EOL]     assertTrue(Double.isNaN(NumberUtils.max(a))); [EOL]     assertTrue(Double.isNaN(NumberUtils.min(a))); [EOL]     final double[] b = new double[] { Double.NaN, 1.2, Double.NaN, 3.7, 27.0, 42.0, Double.NaN }; [EOL]     assertTrue(Double.isNaN(NumberUtils.max(b))); [EOL]     assertTrue(Double.isNaN(NumberUtils.min(b))); [EOL]     final float[] aF = new float[] { 1.2f, Float.NaN, 3.7f, 27.0f, 42.0f, Float.NaN }; [EOL]     assertTrue(Float.isNaN(NumberUtils.max(aF))); [EOL]     final float[] bF = new float[] { Float.NaN, 1.2f, Float.NaN, 3.7f, 27.0f, 42.0f, Float.NaN }; [EOL]     assertTrue(Float.isNaN(NumberUtils.max(bF))); [EOL] }
@Test [EOL] public void testLang381() { [EOL]     assertTrue(Double.isNaN(NumberUtils.min(1.2, 2.5, Double.NaN))); [EOL]     assertTrue(Double.isNaN(NumberUtils.max(1.2, 2.5, Double.NaN))); [EOL]     assertTrue(Float.isNaN(NumberUtils.min(1.2f, 2.5f, Float.NaN))); [EOL]     assertTrue(Float.isNaN(NumberUtils.max(1.2f, 2.5f, Float.NaN))); [EOL]     final double[] a = new double[] { 1.2, Double.NaN, 3.7, 27.0, 42.0, Double.NaN }; [EOL]     assertTrue(Double.isNaN(NumberUtils.max(a))); [EOL]     assertTrue(Double.isNaN(NumberUtils.min(a))); [EOL]     final double[] b = new double[] { Double.NaN, 1.2, Double.NaN, 3.7, 27.0, 42.0, Double.NaN }; [EOL]     assertTrue(Double.isNaN(NumberUtils.max(b))); [EOL]     assertTrue(Double.isNaN(NumberUtils.min(b))); [EOL]     final float[] aF = new float[] { 1.2f, Float.NaN, 3.7f, 27.0f, 42.0f, Float.NaN }; [EOL]     assertTrue(Float.isNaN(NumberUtils.max(aF))); [EOL]     final float[] bF = new float[] { Float.NaN, 1.2f, Float.NaN, 3.7f, 27.0f, 42.0f, Float.NaN }; [EOL]     assertTrue(Float.isNaN(NumberUtils.max(bF))); [EOL] }
@Test [EOL] public void testLang381() { [EOL]     assertTrue(Double.isNaN(NumberUtils.min(1.2, 2.5, Double.NaN))); [EOL]     assertTrue(Double.isNaN(NumberUtils.max(1.2, 2.5, Double.NaN))); [EOL]     assertTrue(Float.isNaN(NumberUtils.min(1.2f, 2.5f, Float.NaN))); [EOL]     assertTrue(Float.isNaN(NumberUtils.max(1.2f, 2.5f, Float.NaN))); [EOL]     final double[] a = new double[] { 1.2, Double.NaN, 3.7, 27.0, 42.0, Double.NaN }; [EOL]     assertTrue(Double.isNaN(NumberUtils.max(a))); [EOL]     assertTrue(Double.isNaN(NumberUtils.min(a))); [EOL]     final double[] b = new double[] { Double.NaN, 1.2, Double.NaN, 3.7, 27.0, 42.0, Double.NaN }; [EOL]     assertTrue(Double.isNaN(NumberUtils.max(b))); [EOL]     assertTrue(Double.isNaN(NumberUtils.min(b))); [EOL]     final float[] aF = new float[] { 1.2f, Float.NaN, 3.7f, 27.0f, 42.0f, Float.NaN }; [EOL]     assertTrue(Float.isNaN(NumberUtils.max(aF))); [EOL]     final float[] bF = new float[] { Float.NaN, 1.2f, Float.NaN, 3.7f, 27.0f, 42.0f, Float.NaN }; [EOL]     assertTrue(Float.isNaN(NumberUtils.max(bF))); [EOL] }
@Test [EOL] public void testLang381() { [EOL]     assertTrue(Double.isNaN(NumberUtils.min(1.2, 2.5, Double.NaN))); [EOL]     assertTrue(Double.isNaN(NumberUtils.max(1.2, 2.5, Double.NaN))); [EOL]     assertTrue(Float.isNaN(NumberUtils.min(1.2f, 2.5f, Float.NaN))); [EOL]     assertTrue(Float.isNaN(NumberUtils.max(1.2f, 2.5f, Float.NaN))); [EOL]     final double[] a = new double[] { 1.2, Double.NaN, 3.7, 27.0, 42.0, Double.NaN }; [EOL]     assertTrue(Double.isNaN(NumberUtils.max(a))); [EOL]     assertTrue(Double.isNaN(NumberUtils.min(a))); [EOL]     final double[] b = new double[] { Double.NaN, 1.2, Double.NaN, 3.7, 27.0, 42.0, Double.NaN }; [EOL]     assertTrue(Double.isNaN(NumberUtils.max(b))); [EOL]     assertTrue(Double.isNaN(NumberUtils.min(b))); [EOL]     final float[] aF = new float[] { 1.2f, Float.NaN, 3.7f, 27.0f, 42.0f, Float.NaN }; [EOL]     assertTrue(Float.isNaN(NumberUtils.max(aF))); [EOL]     final float[] bF = new float[] { Float.NaN, 1.2f, Float.NaN, 3.7f, 27.0f, 42.0f, Float.NaN }; [EOL]     assertTrue(Float.isNaN(NumberUtils.max(bF))); [EOL] }
@Test [EOL] public void testLang381() { [EOL]     assertTrue(Double.isNaN(NumberUtils.min(1.2, 2.5, Double.NaN))); [EOL]     assertTrue(Double.isNaN(NumberUtils.max(1.2, 2.5, Double.NaN))); [EOL]     assertTrue(Float.isNaN(NumberUtils.min(1.2f, 2.5f, Float.NaN))); [EOL]     assertTrue(Float.isNaN(NumberUtils.max(1.2f, 2.5f, Float.NaN))); [EOL]     final double[] a = new double[] { 1.2, Double.NaN, 3.7, 27.0, 42.0, Double.NaN }; [EOL]     assertTrue(Double.isNaN(NumberUtils.max(a))); [EOL]     assertTrue(Double.isNaN(NumberUtils.min(a))); [EOL]     final double[] b = new double[] { Double.NaN, 1.2, Double.NaN, 3.7, 27.0, 42.0, Double.NaN }; [EOL]     assertTrue(Double.isNaN(NumberUtils.max(b))); [EOL]     assertTrue(Double.isNaN(NumberUtils.min(b))); [EOL]     final float[] aF = new float[] { 1.2f, Float.NaN, 3.7f, 27.0f, 42.0f, Float.NaN }; [EOL]     assertTrue(Float.isNaN(NumberUtils.max(aF))); [EOL]     final float[] bF = new float[] { Float.NaN, 1.2f, Float.NaN, 3.7f, 27.0f, 42.0f, Float.NaN }; [EOL]     assertTrue(Float.isNaN(NumberUtils.max(bF))); [EOL] }
@Test [EOL] public void testLang381() { [EOL]     assertTrue(Double.isNaN(NumberUtils.min(1.2, 2.5, Double.NaN))); [EOL]     assertTrue(Double.isNaN(NumberUtils.max(1.2, 2.5, Double.NaN))); [EOL]     assertTrue(Float.isNaN(NumberUtils.min(1.2f, 2.5f, Float.NaN))); [EOL]     assertTrue(Float.isNaN(NumberUtils.max(1.2f, 2.5f, Float.NaN))); [EOL]     final double[] a = new double[] { 1.2, Double.NaN, 3.7, 27.0, 42.0, Double.NaN }; [EOL]     assertTrue(Double.isNaN(NumberUtils.max(a))); [EOL]     assertTrue(Double.isNaN(NumberUtils.min(a))); [EOL]     final double[] b = new double[] { Double.NaN, 1.2, Double.NaN, 3.7, 27.0, 42.0, Double.NaN }; [EOL]     assertTrue(Double.isNaN(NumberUtils.max(b))); [EOL]     assertTrue(Double.isNaN(NumberUtils.min(b))); [EOL]     final float[] aF = new float[] { 1.2f, Float.NaN, 3.7f, 27.0f, 42.0f, Float.NaN }; [EOL]     assertTrue(Float.isNaN(NumberUtils.max(aF))); [EOL]     final float[] bF = new float[] { Float.NaN, 1.2f, Float.NaN, 3.7f, 27.0f, 42.0f, Float.NaN }; [EOL]     assertTrue(Float.isNaN(NumberUtils.max(bF))); [EOL] }
@Test [EOL] public void testLang381() { [EOL]     assertTrue(Double.isNaN(NumberUtils.min(1.2, 2.5, Double.NaN))); [EOL]     assertTrue(Double.isNaN(NumberUtils.max(1.2, 2.5, Double.NaN))); [EOL]     assertTrue(Float.isNaN(NumberUtils.min(1.2f, 2.5f, Float.NaN))); [EOL]     assertTrue(Float.isNaN(NumberUtils.max(1.2f, 2.5f, Float.NaN))); [EOL]     final double[] a = new double[] { 1.2, Double.NaN, 3.7, 27.0, 42.0, Double.NaN }; [EOL]     assertTrue(Double.isNaN(NumberUtils.max(a))); [EOL]     assertTrue(Double.isNaN(NumberUtils.min(a))); [EOL]     final double[] b = new double[] { Double.NaN, 1.2, Double.NaN, 3.7, 27.0, 42.0, Double.NaN }; [EOL]     assertTrue(Double.isNaN(NumberUtils.max(b))); [EOL]     assertTrue(Double.isNaN(NumberUtils.min(b))); [EOL]     final float[] aF = new float[] { 1.2f, Float.NaN, 3.7f, 27.0f, 42.0f, Float.NaN }; [EOL]     assertTrue(Float.isNaN(NumberUtils.max(aF))); [EOL]     final float[] bF = new float[] { Float.NaN, 1.2f, Float.NaN, 3.7f, 27.0f, 42.0f, Float.NaN }; [EOL]     assertTrue(Float.isNaN(NumberUtils.max(bF))); [EOL] }
@Test [EOL] public void testLang381() { [EOL]     assertTrue(Double.isNaN(NumberUtils.min(1.2, 2.5, Double.NaN))); [EOL]     assertTrue(Double.isNaN(NumberUtils.max(1.2, 2.5, Double.NaN))); [EOL]     assertTrue(Float.isNaN(NumberUtils.min(1.2f, 2.5f, Float.NaN))); [EOL]     assertTrue(Float.isNaN(NumberUtils.max(1.2f, 2.5f, Float.NaN))); [EOL]     final double[] a = new double[] { 1.2, Double.NaN, 3.7, 27.0, 42.0, Double.NaN }; [EOL]     assertTrue(Double.isNaN(NumberUtils.max(a))); [EOL]     assertTrue(Double.isNaN(NumberUtils.min(a))); [EOL]     final double[] b = new double[] { Double.NaN, 1.2, Double.NaN, 3.7, 27.0, 42.0, Double.NaN }; [EOL]     assertTrue(Double.isNaN(NumberUtils.max(b))); [EOL]     assertTrue(Double.isNaN(NumberUtils.min(b))); [EOL]     final float[] aF = new float[] { 1.2f, Float.NaN, 3.7f, 27.0f, 42.0f, Float.NaN }; [EOL]     assertTrue(Float.isNaN(NumberUtils.max(aF))); [EOL]     final float[] bF = new float[] { Float.NaN, 1.2f, Float.NaN, 3.7f, 27.0f, 42.0f, Float.NaN }; [EOL]     assertTrue(Float.isNaN(NumberUtils.max(bF))); [EOL] }
@Test [EOL] public void testLang381() { [EOL]     assertTrue(Double.isNaN(NumberUtils.min(1.2, 2.5, Double.NaN))); [EOL]     assertTrue(Double.isNaN(NumberUtils.max(1.2, 2.5, Double.NaN))); [EOL]     assertTrue(Float.isNaN(NumberUtils.min(1.2f, 2.5f, Float.NaN))); [EOL]     assertTrue(Float.isNaN(NumberUtils.max(1.2f, 2.5f, Float.NaN))); [EOL]     final double[] a = new double[] { 1.2, Double.NaN, 3.7, 27.0, 42.0, Double.NaN }; [EOL]     assertTrue(Double.isNaN(NumberUtils.max(a))); [EOL]     assertTrue(Double.isNaN(NumberUtils.min(a))); [EOL]     final double[] b = new double[] { Double.NaN, 1.2, Double.NaN, 3.7, 27.0, 42.0, Double.NaN }; [EOL]     assertTrue(Double.isNaN(NumberUtils.max(b))); [EOL]     assertTrue(Double.isNaN(NumberUtils.min(b))); [EOL]     final float[] aF = new float[] { 1.2f, Float.NaN, 3.7f, 27.0f, 42.0f, Float.NaN }; [EOL]     assertTrue(Float.isNaN(NumberUtils.max(aF))); [EOL]     final float[] bF = new float[] { Float.NaN, 1.2f, Float.NaN, 3.7f, 27.0f, 42.0f, Float.NaN }; [EOL]     assertTrue(Float.isNaN(NumberUtils.max(bF))); [EOL] }
@Test [EOL] public void testMinimumDouble() { [EOL]     final double low = 12.3; [EOL]     final double mid = 12.3 + 1; [EOL]     final double high = 12.3 + 2; [EOL]     assertEquals(low, NumberUtils.min(low, mid, high), 0.0001); [EOL]     assertEquals(low, NumberUtils.min(mid, low, high), 0.0001); [EOL]     assertEquals(low, NumberUtils.min(mid, high, low), 0.0001); [EOL]     assertEquals(low, NumberUtils.min(low, mid, low), 0.0001); [EOL]     assertEquals(mid, NumberUtils.min(high, mid, high), 0.0001); [EOL] }
@Test [EOL] public void testMinimumDouble() { [EOL]     final double low = 12.3; [EOL]     final double mid = 12.3 + 1; [EOL]     final double high = 12.3 + 2; [EOL]     assertEquals(low, NumberUtils.min(low, mid, high), 0.0001); [EOL]     assertEquals(low, NumberUtils.min(mid, low, high), 0.0001); [EOL]     assertEquals(low, NumberUtils.min(mid, high, low), 0.0001); [EOL]     assertEquals(low, NumberUtils.min(low, mid, low), 0.0001); [EOL]     assertEquals(mid, NumberUtils.min(high, mid, high), 0.0001); [EOL] }
@Test [EOL] public void testMinimumDouble() { [EOL]     final double low = 12.3; [EOL]     final double mid = 12.3 + 1; [EOL]     final double high = 12.3 + 2; [EOL]     assertEquals(low, NumberUtils.min(low, mid, high), 0.0001); [EOL]     assertEquals(low, NumberUtils.min(mid, low, high), 0.0001); [EOL]     assertEquals(low, NumberUtils.min(mid, high, low), 0.0001); [EOL]     assertEquals(low, NumberUtils.min(low, mid, low), 0.0001); [EOL]     assertEquals(mid, NumberUtils.min(high, mid, high), 0.0001); [EOL] }
@Test [EOL] public void testMinimumDouble() { [EOL]     final double low = 12.3; [EOL]     final double mid = 12.3 + 1; [EOL]     final double high = 12.3 + 2; [EOL]     assertEquals(low, NumberUtils.min(low, mid, high), 0.0001); [EOL]     assertEquals(low, NumberUtils.min(mid, low, high), 0.0001); [EOL]     assertEquals(low, NumberUtils.min(mid, high, low), 0.0001); [EOL]     assertEquals(low, NumberUtils.min(low, mid, low), 0.0001); [EOL]     assertEquals(mid, NumberUtils.min(high, mid, high), 0.0001); [EOL] }
@Test [EOL] public void testMinimumDouble() { [EOL]     final double low = 12.3; [EOL]     final double mid = 12.3 + 1; [EOL]     final double high = 12.3 + 2; [EOL]     assertEquals(low, NumberUtils.min(low, mid, high), 0.0001); [EOL]     assertEquals(low, NumberUtils.min(mid, low, high), 0.0001); [EOL]     assertEquals(low, NumberUtils.min(mid, high, low), 0.0001); [EOL]     assertEquals(low, NumberUtils.min(low, mid, low), 0.0001); [EOL]     assertEquals(mid, NumberUtils.min(high, mid, high), 0.0001); [EOL] }
@Test [EOL] public void testMinimumFloat() { [EOL]     final float low = 12.3f; [EOL]     final float mid = 12.3f + 1; [EOL]     final float high = 12.3f + 2; [EOL]     assertEquals(low, NumberUtils.min(low, mid, high), 0.0001f); [EOL]     assertEquals(low, NumberUtils.min(mid, low, high), 0.0001f); [EOL]     assertEquals(low, NumberUtils.min(mid, high, low), 0.0001f); [EOL]     assertEquals(low, NumberUtils.min(low, mid, low), 0.0001f); [EOL]     assertEquals(mid, NumberUtils.min(high, mid, high), 0.0001f); [EOL] }
@Test [EOL] public void testMinimumFloat() { [EOL]     final float low = 12.3f; [EOL]     final float mid = 12.3f + 1; [EOL]     final float high = 12.3f + 2; [EOL]     assertEquals(low, NumberUtils.min(low, mid, high), 0.0001f); [EOL]     assertEquals(low, NumberUtils.min(mid, low, high), 0.0001f); [EOL]     assertEquals(low, NumberUtils.min(mid, high, low), 0.0001f); [EOL]     assertEquals(low, NumberUtils.min(low, mid, low), 0.0001f); [EOL]     assertEquals(mid, NumberUtils.min(high, mid, high), 0.0001f); [EOL] }
@Test [EOL] public void testMinimumFloat() { [EOL]     final float low = 12.3f; [EOL]     final float mid = 12.3f + 1; [EOL]     final float high = 12.3f + 2; [EOL]     assertEquals(low, NumberUtils.min(low, mid, high), 0.0001f); [EOL]     assertEquals(low, NumberUtils.min(mid, low, high), 0.0001f); [EOL]     assertEquals(low, NumberUtils.min(mid, high, low), 0.0001f); [EOL]     assertEquals(low, NumberUtils.min(low, mid, low), 0.0001f); [EOL]     assertEquals(mid, NumberUtils.min(high, mid, high), 0.0001f); [EOL] }
@Test [EOL] public void testMinimumFloat() { [EOL]     final float low = 12.3f; [EOL]     final float mid = 12.3f + 1; [EOL]     final float high = 12.3f + 2; [EOL]     assertEquals(low, NumberUtils.min(low, mid, high), 0.0001f); [EOL]     assertEquals(low, NumberUtils.min(mid, low, high), 0.0001f); [EOL]     assertEquals(low, NumberUtils.min(mid, high, low), 0.0001f); [EOL]     assertEquals(low, NumberUtils.min(low, mid, low), 0.0001f); [EOL]     assertEquals(mid, NumberUtils.min(high, mid, high), 0.0001f); [EOL] }
@Test [EOL] public void testMinimumFloat() { [EOL]     final float low = 12.3f; [EOL]     final float mid = 12.3f + 1; [EOL]     final float high = 12.3f + 2; [EOL]     assertEquals(low, NumberUtils.min(low, mid, high), 0.0001f); [EOL]     assertEquals(low, NumberUtils.min(mid, low, high), 0.0001f); [EOL]     assertEquals(low, NumberUtils.min(mid, high, low), 0.0001f); [EOL]     assertEquals(low, NumberUtils.min(low, mid, low), 0.0001f); [EOL]     assertEquals(mid, NumberUtils.min(high, mid, high), 0.0001f); [EOL] }
@Test [EOL] public void testBetween() { [EOL]     final OctalUnescaper oue = new OctalUnescaper(); [EOL]     String input = "\\45"; [EOL]     String result = oue.translate(input); [EOL]     assertEquals("Failed to unescape octal characters via the between method", "\45", result); [EOL]     input = "\\377"; [EOL]     result = oue.translate(input); [EOL]     assertEquals("Failed to unescape octal characters via the between method", "\377", result); [EOL]     input = "\\377 and"; [EOL]     result = oue.translate(input); [EOL]     assertEquals("Failed to unescape octal characters via the between method", "\377 and", result); [EOL]     input = "\\378 and"; [EOL]     result = oue.translate(input); [EOL]     assertEquals("Failed to unescape octal characters via the between method", "\378 and", result); [EOL]     input = "\\378"; [EOL]     result = oue.translate(input); [EOL]     assertEquals("Failed to unescape octal characters via the between method", "\378", result); [EOL]     input = "\\1"; [EOL]     result = oue.translate(input); [EOL]     assertEquals("Failed to unescape octal characters via the between method", "\1", result); [EOL] }
@Test [EOL] public void testBetween() { [EOL]     final OctalUnescaper oue = new OctalUnescaper(); [EOL]     String input = "\\45"; [EOL]     String result = oue.translate(input); [EOL]     assertEquals("Failed to unescape octal characters via the between method", "\45", result); [EOL]     input = "\\377"; [EOL]     result = oue.translate(input); [EOL]     assertEquals("Failed to unescape octal characters via the between method", "\377", result); [EOL]     input = "\\377 and"; [EOL]     result = oue.translate(input); [EOL]     assertEquals("Failed to unescape octal characters via the between method", "\377 and", result); [EOL]     input = "\\378 and"; [EOL]     result = oue.translate(input); [EOL]     assertEquals("Failed to unescape octal characters via the between method", "\378 and", result); [EOL]     input = "\\378"; [EOL]     result = oue.translate(input); [EOL]     assertEquals("Failed to unescape octal characters via the between method", "\378", result); [EOL]     input = "\\1"; [EOL]     result = oue.translate(input); [EOL]     assertEquals("Failed to unescape octal characters via the between method", "\1", result); [EOL] }
@Test [EOL] public void testBetween() { [EOL]     final OctalUnescaper oue = new OctalUnescaper(); [EOL]     String input = "\\45"; [EOL]     String result = oue.translate(input); [EOL]     assertEquals("Failed to unescape octal characters via the between method", "\45", result); [EOL]     input = "\\377"; [EOL]     result = oue.translate(input); [EOL]     assertEquals("Failed to unescape octal characters via the between method", "\377", result); [EOL]     input = "\\377 and"; [EOL]     result = oue.translate(input); [EOL]     assertEquals("Failed to unescape octal characters via the between method", "\377 and", result); [EOL]     input = "\\378 and"; [EOL]     result = oue.translate(input); [EOL]     assertEquals("Failed to unescape octal characters via the between method", "\378 and", result); [EOL]     input = "\\378"; [EOL]     result = oue.translate(input); [EOL]     assertEquals("Failed to unescape octal characters via the between method", "\378", result); [EOL]     input = "\\1"; [EOL]     result = oue.translate(input); [EOL]     assertEquals("Failed to unescape octal characters via the between method", "\1", result); [EOL] }
@Test [EOL] public void testBetween() { [EOL]     final OctalUnescaper oue = new OctalUnescaper(); [EOL]     String input = "\\45"; [EOL]     String result = oue.translate(input); [EOL]     assertEquals("Failed to unescape octal characters via the between method", "\45", result); [EOL]     input = "\\377"; [EOL]     result = oue.translate(input); [EOL]     assertEquals("Failed to unescape octal characters via the between method", "\377", result); [EOL]     input = "\\377 and"; [EOL]     result = oue.translate(input); [EOL]     assertEquals("Failed to unescape octal characters via the between method", "\377 and", result); [EOL]     input = "\\378 and"; [EOL]     result = oue.translate(input); [EOL]     assertEquals("Failed to unescape octal characters via the between method", "\378 and", result); [EOL]     input = "\\378"; [EOL]     result = oue.translate(input); [EOL]     assertEquals("Failed to unescape octal characters via the between method", "\378", result); [EOL]     input = "\\1"; [EOL]     result = oue.translate(input); [EOL]     assertEquals("Failed to unescape octal characters via the between method", "\1", result); [EOL] }
@Test [EOL] public void testBetween() { [EOL]     final OctalUnescaper oue = new OctalUnescaper(); [EOL]     String input = "\\45"; [EOL]     String result = oue.translate(input); [EOL]     assertEquals("Failed to unescape octal characters via the between method", "\45", result); [EOL]     input = "\\377"; [EOL]     result = oue.translate(input); [EOL]     assertEquals("Failed to unescape octal characters via the between method", "\377", result); [EOL]     input = "\\377 and"; [EOL]     result = oue.translate(input); [EOL]     assertEquals("Failed to unescape octal characters via the between method", "\377 and", result); [EOL]     input = "\\378 and"; [EOL]     result = oue.translate(input); [EOL]     assertEquals("Failed to unescape octal characters via the between method", "\378 and", result); [EOL]     input = "\\378"; [EOL]     result = oue.translate(input); [EOL]     assertEquals("Failed to unescape octal characters via the between method", "\378", result); [EOL]     input = "\\1"; [EOL]     result = oue.translate(input); [EOL]     assertEquals("Failed to unescape octal characters via the between method", "\1", result); [EOL] }
@Test [EOL] public void testSetValue() { [EOL]     for (int j = 0; j < 128; j++) { [EOL]         assertEquals(bf_multi.getValue(bf_multi.setValue(0, j)), j); [EOL]         assertEquals(bf_multi.setValue(0, j), j << 7); [EOL]     } [EOL]     for (int j = 0; j < 128; j++) { [EOL]         assertEquals(bf_zero.getValue(bf_zero.setValue(0, j)), 0); [EOL]         assertEquals(bf_zero.setValue(0, j), 0); [EOL]     } [EOL]     assertEquals(bf_multi.setValue(0x3f80, 128), 0); [EOL]     for (int j = 0; j < 2; j++) { [EOL]         assertEquals(bf_single.getValue(bf_single.setValue(0, j)), j); [EOL]         assertEquals(bf_single.setValue(0, j), j << 14); [EOL]     } [EOL]     assertEquals(bf_single.setValue(0x4000, 2), 0); [EOL] }
@Test [EOL] public void testSetValue() { [EOL]     for (int j = 0; j < 128; j++) { [EOL]         assertEquals(bf_multi.getValue(bf_multi.setValue(0, j)), j); [EOL]         assertEquals(bf_multi.setValue(0, j), j << 7); [EOL]     } [EOL]     for (int j = 0; j < 128; j++) { [EOL]         assertEquals(bf_zero.getValue(bf_zero.setValue(0, j)), 0); [EOL]         assertEquals(bf_zero.setValue(0, j), 0); [EOL]     } [EOL]     assertEquals(bf_multi.setValue(0x3f80, 128), 0); [EOL]     for (int j = 0; j < 2; j++) { [EOL]         assertEquals(bf_single.getValue(bf_single.setValue(0, j)), j); [EOL]         assertEquals(bf_single.setValue(0, j), j << 14); [EOL]     } [EOL]     assertEquals(bf_single.setValue(0x4000, 2), 0); [EOL] }
@Test [EOL] public void testSetValue() { [EOL]     for (int j = 0; j < 128; j++) { [EOL]         assertEquals(bf_multi.getValue(bf_multi.setValue(0, j)), j); [EOL]         assertEquals(bf_multi.setValue(0, j), j << 7); [EOL]     } [EOL]     for (int j = 0; j < 128; j++) { [EOL]         assertEquals(bf_zero.getValue(bf_zero.setValue(0, j)), 0); [EOL]         assertEquals(bf_zero.setValue(0, j), 0); [EOL]     } [EOL]     assertEquals(bf_multi.setValue(0x3f80, 128), 0); [EOL]     for (int j = 0; j < 2; j++) { [EOL]         assertEquals(bf_single.getValue(bf_single.setValue(0, j)), j); [EOL]         assertEquals(bf_single.setValue(0, j), j << 14); [EOL]     } [EOL]     assertEquals(bf_single.setValue(0x4000, 2), 0); [EOL] }
@Test [EOL] public void testSetValue() { [EOL]     for (int j = 0; j < 128; j++) { [EOL]         assertEquals(bf_multi.getValue(bf_multi.setValue(0, j)), j); [EOL]         assertEquals(bf_multi.setValue(0, j), j << 7); [EOL]     } [EOL]     for (int j = 0; j < 128; j++) { [EOL]         assertEquals(bf_zero.getValue(bf_zero.setValue(0, j)), 0); [EOL]         assertEquals(bf_zero.setValue(0, j), 0); [EOL]     } [EOL]     assertEquals(bf_multi.setValue(0x3f80, 128), 0); [EOL]     for (int j = 0; j < 2; j++) { [EOL]         assertEquals(bf_single.getValue(bf_single.setValue(0, j)), j); [EOL]         assertEquals(bf_single.setValue(0, j), j << 14); [EOL]     } [EOL]     assertEquals(bf_single.setValue(0x4000, 2), 0); [EOL] }
@Test [EOL] public void testSetValue() { [EOL]     for (int j = 0; j < 128; j++) { [EOL]         assertEquals(bf_multi.getValue(bf_multi.setValue(0, j)), j); [EOL]         assertEquals(bf_multi.setValue(0, j), j << 7); [EOL]     } [EOL]     for (int j = 0; j < 128; j++) { [EOL]         assertEquals(bf_zero.getValue(bf_zero.setValue(0, j)), 0); [EOL]         assertEquals(bf_zero.setValue(0, j), 0); [EOL]     } [EOL]     assertEquals(bf_multi.setValue(0x3f80, 128), 0); [EOL]     for (int j = 0; j < 2; j++) { [EOL]         assertEquals(bf_single.getValue(bf_single.setValue(0, j)), j); [EOL]         assertEquals(bf_single.setValue(0, j), j << 14); [EOL]     } [EOL]     assertEquals(bf_single.setValue(0x4000, 2), 0); [EOL] }
@Test [EOL] public void testAddEventListenerWithNoAddMethod() { [EOL]     final PropertyChangeSource src = new PropertyChangeSource(); [EOL]     final EventCountingInvociationHandler handler = new EventCountingInvociationHandler(); [EOL]     final ObjectChangeListener listener = handler.createListener(ObjectChangeListener.class); [EOL]     try { [EOL]         EventUtils.addEventListener(src, ObjectChangeListener.class, listener); [EOL]         fail("Should not be allowed to add a listener to an object that doesn't support it."); [EOL]     } catch (final IllegalArgumentException e) { [EOL]         assertEquals("Class " + src.getClass().getName() + " does not have a public add" + ObjectChangeListener.class.getSimpleName() + " method which takes a parameter of type " + ObjectChangeListener.class.getName() + ".", e.getMessage()); [EOL]     } [EOL] }
@Test [EOL] public void testAddEventListenerWithNoAddMethod() { [EOL]     final PropertyChangeSource src = new PropertyChangeSource(); [EOL]     final EventCountingInvociationHandler handler = new EventCountingInvociationHandler(); [EOL]     final ObjectChangeListener listener = handler.createListener(ObjectChangeListener.class); [EOL]     try { [EOL]         EventUtils.addEventListener(src, ObjectChangeListener.class, listener); [EOL]         fail("Should not be allowed to add a listener to an object that doesn't support it."); [EOL]     } catch (final IllegalArgumentException e) { [EOL]         assertEquals("Class " + src.getClass().getName() + " does not have a public add" + ObjectChangeListener.class.getSimpleName() + " method which takes a parameter of type " + ObjectChangeListener.class.getName() + ".", e.getMessage()); [EOL]     } [EOL] }
@Test [EOL] public void testBindFilteredEventsToMethod() { [EOL]     final MultipleEventSource src = new MultipleEventSource(); [EOL]     final EventCounter counter = new EventCounter(); [EOL]     EventUtils.bindEventsToMethod(counter, "eventOccurred", src, MultipleEventListener.class, "event1"); [EOL]     assertEquals(0, counter.getCount()); [EOL]     src.listeners.fire().event1(new PropertyChangeEvent(new Date(), "Day", Integer.valueOf(0), Integer.valueOf(1))); [EOL]     assertEquals(1, counter.getCount()); [EOL]     src.listeners.fire().event2(new PropertyChangeEvent(new Date(), "Day", Integer.valueOf(1), Integer.valueOf(2))); [EOL]     assertEquals(1, counter.getCount()); [EOL] }
@Test [EOL] public void testBindFilteredEventsToMethod() { [EOL]     final MultipleEventSource src = new MultipleEventSource(); [EOL]     final EventCounter counter = new EventCounter(); [EOL]     EventUtils.bindEventsToMethod(counter, "eventOccurred", src, MultipleEventListener.class, "event1"); [EOL]     assertEquals(0, counter.getCount()); [EOL]     src.listeners.fire().event1(new PropertyChangeEvent(new Date(), "Day", Integer.valueOf(0), Integer.valueOf(1))); [EOL]     assertEquals(1, counter.getCount()); [EOL]     src.listeners.fire().event2(new PropertyChangeEvent(new Date(), "Day", Integer.valueOf(1), Integer.valueOf(2))); [EOL]     assertEquals(1, counter.getCount()); [EOL] }
@Test [EOL] public void testBindFilteredEventsToMethod() { [EOL]     final MultipleEventSource src = new MultipleEventSource(); [EOL]     final EventCounter counter = new EventCounter(); [EOL]     EventUtils.bindEventsToMethod(counter, "eventOccurred", src, MultipleEventListener.class, "event1"); [EOL]     assertEquals(0, counter.getCount()); [EOL]     src.listeners.fire().event1(new PropertyChangeEvent(new Date(), "Day", Integer.valueOf(0), Integer.valueOf(1))); [EOL]     assertEquals(1, counter.getCount()); [EOL]     src.listeners.fire().event2(new PropertyChangeEvent(new Date(), "Day", Integer.valueOf(1), Integer.valueOf(2))); [EOL]     assertEquals(1, counter.getCount()); [EOL] }
@Test [EOL] public void testBindFilteredEventsToMethod() { [EOL]     final MultipleEventSource src = new MultipleEventSource(); [EOL]     final EventCounter counter = new EventCounter(); [EOL]     EventUtils.bindEventsToMethod(counter, "eventOccurred", src, MultipleEventListener.class, "event1"); [EOL]     assertEquals(0, counter.getCount()); [EOL]     src.listeners.fire().event1(new PropertyChangeEvent(new Date(), "Day", Integer.valueOf(0), Integer.valueOf(1))); [EOL]     assertEquals(1, counter.getCount()); [EOL]     src.listeners.fire().event2(new PropertyChangeEvent(new Date(), "Day", Integer.valueOf(1), Integer.valueOf(2))); [EOL]     assertEquals(1, counter.getCount()); [EOL] }
@Test [EOL] public void testEscapedQuote_LANG_477() { [EOL]     final String pattern = "it''s a {0,lower} 'test'!"; [EOL]     final ExtendedMessageFormat emf = new ExtendedMessageFormat(pattern, registry); [EOL]     assertEquals("it's a dummy test!", emf.format(new Object[] { "DUMMY" })); [EOL] }
@Test [EOL] public void testExtendedAndBuiltInFormats() { [EOL]     final Calendar cal = Calendar.getInstance(); [EOL]     cal.set(2007, Calendar.JANUARY, 23, 18, 33, 05); [EOL]     final Object[] args = new Object[] { "John Doe", cal.getTime(), Double.valueOf("12345.67") }; [EOL]     final String builtinsPattern = "DOB: {1,date,short} Salary: {2,number,currency}"; [EOL]     final String extendedPattern = "Name: {0,upper} "; [EOL]     final String pattern = extendedPattern + builtinsPattern; [EOL]     final HashSet<Locale> testLocales = new HashSet<Locale>(); [EOL]     testLocales.addAll(Arrays.asList(DateFormat.getAvailableLocales())); [EOL]     testLocales.retainAll(Arrays.asList(NumberFormat.getAvailableLocales())); [EOL]     testLocales.add(null); [EOL]     for (final Locale locale : testLocales) { [EOL]         final MessageFormat builtins = createMessageFormat(builtinsPattern, locale); [EOL]         final String expectedPattern = extendedPattern + builtins.toPattern(); [EOL]         DateFormat df = null; [EOL]         NumberFormat nf = null; [EOL]         ExtendedMessageFormat emf = null; [EOL]         if (locale == null) { [EOL]             df = DateFormat.getDateInstance(DateFormat.SHORT); [EOL]             nf = NumberFormat.getCurrencyInstance(); [EOL]             emf = new ExtendedMessageFormat(pattern, registry); [EOL]         } else { [EOL]             df = DateFormat.getDateInstance(DateFormat.SHORT, locale); [EOL]             nf = NumberFormat.getCurrencyInstance(locale); [EOL]             emf = new ExtendedMessageFormat(pattern, locale, registry); [EOL]         } [EOL]         final StringBuilder expected = new StringBuilder(); [EOL]         expected.append("Name: "); [EOL]         expected.append(args[0].toString().toUpperCase()); [EOL]         expected.append(" DOB: "); [EOL]         expected.append(df.format(args[1])); [EOL]         expected.append(" Salary: "); [EOL]         expected.append(nf.format(args[2])); [EOL]         assertPatternsEqual("pattern comparison for locale " + locale, expectedPattern, emf.toPattern()); [EOL]         assertEquals(String.valueOf(locale), expected.toString(), emf.format(args)); [EOL]     } [EOL] }
@Test [EOL] public void testEscapedQuote_LANG_477() { [EOL]     final String pattern = "it''s a {0,lower} 'test'!"; [EOL]     final ExtendedMessageFormat emf = new ExtendedMessageFormat(pattern, registry); [EOL]     assertEquals("it's a dummy test!", emf.format(new Object[] { "DUMMY" })); [EOL] }
@Test [EOL] public void testEscapedQuote_LANG_477() { [EOL]     final String pattern = "it''s a {0,lower} 'test'!"; [EOL]     final ExtendedMessageFormat emf = new ExtendedMessageFormat(pattern, registry); [EOL]     assertEquals("it's a dummy test!", emf.format(new Object[] { "DUMMY" })); [EOL] }
@Test [EOL] public void testComparable1() throws Exception { [EOL]     final Pair<String, String> pair1 = Pair.of("A", "D"); [EOL]     final Pair<String, String> pair2 = Pair.of("B", "C"); [EOL]     assertTrue(pair1.compareTo(pair1) == 0); [EOL]     assertTrue(pair1.compareTo(pair2) < 0); [EOL]     assertTrue(pair2.compareTo(pair2) == 0); [EOL]     assertTrue(pair2.compareTo(pair1) > 0); [EOL] }
@Test [EOL] public void testComparable1() throws Exception { [EOL]     final Pair<String, String> pair1 = Pair.of("A", "D"); [EOL]     final Pair<String, String> pair2 = Pair.of("B", "C"); [EOL]     assertTrue(pair1.compareTo(pair1) == 0); [EOL]     assertTrue(pair1.compareTo(pair2) < 0); [EOL]     assertTrue(pair2.compareTo(pair2) == 0); [EOL]     assertTrue(pair2.compareTo(pair1) > 0); [EOL] }
@Test [EOL] public void testComparable1() throws Exception { [EOL]     final Pair<String, String> pair1 = Pair.of("A", "D"); [EOL]     final Pair<String, String> pair2 = Pair.of("B", "C"); [EOL]     assertTrue(pair1.compareTo(pair1) == 0); [EOL]     assertTrue(pair1.compareTo(pair2) < 0); [EOL]     assertTrue(pair2.compareTo(pair2) == 0); [EOL]     assertTrue(pair2.compareTo(pair1) > 0); [EOL] }
@Test [EOL] public void testComparable1() throws Exception { [EOL]     final Pair<String, String> pair1 = Pair.of("A", "D"); [EOL]     final Pair<String, String> pair2 = Pair.of("B", "C"); [EOL]     assertTrue(pair1.compareTo(pair1) == 0); [EOL]     assertTrue(pair1.compareTo(pair2) < 0); [EOL]     assertTrue(pair2.compareTo(pair2) == 0); [EOL]     assertTrue(pair2.compareTo(pair1) > 0); [EOL] }
@Test [EOL] public void testComparable1() throws Exception { [EOL]     final Pair<String, String> pair1 = Pair.of("A", "D"); [EOL]     final Pair<String, String> pair2 = Pair.of("B", "C"); [EOL]     assertTrue(pair1.compareTo(pair1) == 0); [EOL]     assertTrue(pair1.compareTo(pair2) < 0); [EOL]     assertTrue(pair2.compareTo(pair2) == 0); [EOL]     assertTrue(pair2.compareTo(pair1) > 0); [EOL] }
@Test [EOL] public void testComparable1() throws Exception { [EOL]     final Pair<String, String> pair1 = Pair.of("A", "D"); [EOL]     final Pair<String, String> pair2 = Pair.of("B", "C"); [EOL]     assertTrue(pair1.compareTo(pair1) == 0); [EOL]     assertTrue(pair1.compareTo(pair2) < 0); [EOL]     assertTrue(pair2.compareTo(pair2) == 0); [EOL]     assertTrue(pair2.compareTo(pair1) > 0); [EOL] }
@Test [EOL] public void testEqualsWithOtherObjects() { [EOL]     checkEquals(null, false); [EOL]     checkEquals(this, false); [EOL]     checkEquals(new ConstantInitializer<String>("Test"), false); [EOL] }
@Test [EOL] public void testEqualsWithOtherObjects() { [EOL]     checkEquals(null, false); [EOL]     checkEquals(this, false); [EOL]     checkEquals(new ConstantInitializer<String>("Test"), false); [EOL] }
@Test [EOL] public void testException() { [EOL]     SerializationException serEx; [EOL]     final Exception ex = new Exception(); [EOL]     serEx = new SerializationException(); [EOL]     assertSame(null, serEx.getMessage()); [EOL]     assertSame(null, serEx.getCause()); [EOL]     serEx = new SerializationException("Message"); [EOL]     assertSame("Message", serEx.getMessage()); [EOL]     assertSame(null, serEx.getCause()); [EOL]     serEx = new SerializationException(ex); [EOL]     assertEquals("java.lang.Exception", serEx.getMessage()); [EOL]     assertSame(ex, serEx.getCause()); [EOL]     serEx = new SerializationException("Message", ex); [EOL]     assertSame("Message", serEx.getMessage()); [EOL]     assertSame(ex, serEx.getCause()); [EOL] }
@Test [EOL] public void testException() { [EOL]     SerializationException serEx; [EOL]     final Exception ex = new Exception(); [EOL]     serEx = new SerializationException(); [EOL]     assertSame(null, serEx.getMessage()); [EOL]     assertSame(null, serEx.getCause()); [EOL]     serEx = new SerializationException("Message"); [EOL]     assertSame("Message", serEx.getMessage()); [EOL]     assertSame(null, serEx.getCause()); [EOL]     serEx = new SerializationException(ex); [EOL]     assertEquals("java.lang.Exception", serEx.getMessage()); [EOL]     assertSame(ex, serEx.getCause()); [EOL]     serEx = new SerializationException("Message", ex); [EOL]     assertSame("Message", serEx.getMessage()); [EOL]     assertSame(ex, serEx.getCause()); [EOL] }
@Test [EOL] public void testException() { [EOL]     SerializationException serEx; [EOL]     final Exception ex = new Exception(); [EOL]     serEx = new SerializationException(); [EOL]     assertSame(null, serEx.getMessage()); [EOL]     assertSame(null, serEx.getCause()); [EOL]     serEx = new SerializationException("Message"); [EOL]     assertSame("Message", serEx.getMessage()); [EOL]     assertSame(null, serEx.getCause()); [EOL]     serEx = new SerializationException(ex); [EOL]     assertEquals("java.lang.Exception", serEx.getMessage()); [EOL]     assertSame(ex, serEx.getCause()); [EOL]     serEx = new SerializationException("Message", ex); [EOL]     assertSame("Message", serEx.getMessage()); [EOL]     assertSame(ex, serEx.getCause()); [EOL] }
@Test [EOL] public void testNewThreadExHandler() { [EOL]     final ThreadFactory wrapped = EasyMock.createMock(ThreadFactory.class); [EOL]     final Runnable r = EasyMock.createMock(Runnable.class); [EOL]     final Thread.UncaughtExceptionHandler handler = EasyMock.createMock(Thread.UncaughtExceptionHandler.class); [EOL]     final Thread t = new Thread(); [EOL]     EasyMock.expect(wrapped.newThread(r)).andReturn(t); [EOL]     EasyMock.replay(wrapped, r, handler); [EOL]     final BasicThreadFactory factory = builder.wrappedFactory(wrapped).uncaughtExceptionHandler(handler).build(); [EOL]     assertSame("Wrong thread", t, factory.newThread(r)); [EOL]     assertEquals("Wrong exception handler", handler, t.getUncaughtExceptionHandler()); [EOL]     EasyMock.verify(wrapped, r, handler); [EOL] }
@Test [EOL] public void testNewThreadExHandler() { [EOL]     final ThreadFactory wrapped = EasyMock.createMock(ThreadFactory.class); [EOL]     final Runnable r = EasyMock.createMock(Runnable.class); [EOL]     final Thread.UncaughtExceptionHandler handler = EasyMock.createMock(Thread.UncaughtExceptionHandler.class); [EOL]     final Thread t = new Thread(); [EOL]     EasyMock.expect(wrapped.newThread(r)).andReturn(t); [EOL]     EasyMock.replay(wrapped, r, handler); [EOL]     final BasicThreadFactory factory = builder.wrappedFactory(wrapped).uncaughtExceptionHandler(handler).build(); [EOL]     assertSame("Wrong thread", t, factory.newThread(r)); [EOL]     assertEquals("Wrong exception handler", handler, t.getUncaughtExceptionHandler()); [EOL]     EasyMock.verify(wrapped, r, handler); [EOL] }
@Test [EOL] public void testNewThreadExHandler() { [EOL]     final ThreadFactory wrapped = EasyMock.createMock(ThreadFactory.class); [EOL]     final Runnable r = EasyMock.createMock(Runnable.class); [EOL]     final Thread.UncaughtExceptionHandler handler = EasyMock.createMock(Thread.UncaughtExceptionHandler.class); [EOL]     final Thread t = new Thread(); [EOL]     EasyMock.expect(wrapped.newThread(r)).andReturn(t); [EOL]     EasyMock.replay(wrapped, r, handler); [EOL]     final BasicThreadFactory factory = builder.wrappedFactory(wrapped).uncaughtExceptionHandler(handler).build(); [EOL]     assertSame("Wrong thread", t, factory.newThread(r)); [EOL]     assertEquals("Wrong exception handler", handler, t.getUncaughtExceptionHandler()); [EOL]     EasyMock.verify(wrapped, r, handler); [EOL] }
@Test [EOL] public void testNewThreadExHandler() { [EOL]     final ThreadFactory wrapped = EasyMock.createMock(ThreadFactory.class); [EOL]     final Runnable r = EasyMock.createMock(Runnable.class); [EOL]     final Thread.UncaughtExceptionHandler handler = EasyMock.createMock(Thread.UncaughtExceptionHandler.class); [EOL]     final Thread t = new Thread(); [EOL]     EasyMock.expect(wrapped.newThread(r)).andReturn(t); [EOL]     EasyMock.replay(wrapped, r, handler); [EOL]     final BasicThreadFactory factory = builder.wrappedFactory(wrapped).uncaughtExceptionHandler(handler).build(); [EOL]     assertSame("Wrong thread", t, factory.newThread(r)); [EOL]     assertEquals("Wrong exception handler", handler, t.getUncaughtExceptionHandler()); [EOL]     EasyMock.verify(wrapped, r, handler); [EOL] }
@Test [EOL] public void testNewThreadExHandler() { [EOL]     final ThreadFactory wrapped = EasyMock.createMock(ThreadFactory.class); [EOL]     final Runnable r = EasyMock.createMock(Runnable.class); [EOL]     final Thread.UncaughtExceptionHandler handler = EasyMock.createMock(Thread.UncaughtExceptionHandler.class); [EOL]     final Thread t = new Thread(); [EOL]     EasyMock.expect(wrapped.newThread(r)).andReturn(t); [EOL]     EasyMock.replay(wrapped, r, handler); [EOL]     final BasicThreadFactory factory = builder.wrappedFactory(wrapped).uncaughtExceptionHandler(handler).build(); [EOL]     assertSame("Wrong thread", t, factory.newThread(r)); [EOL]     assertEquals("Wrong exception handler", handler, t.getUncaughtExceptionHandler()); [EOL]     EasyMock.verify(wrapped, r, handler); [EOL] }
@Test [EOL] public void testNewThreadExHandler() { [EOL]     final ThreadFactory wrapped = EasyMock.createMock(ThreadFactory.class); [EOL]     final Runnable r = EasyMock.createMock(Runnable.class); [EOL]     final Thread.UncaughtExceptionHandler handler = EasyMock.createMock(Thread.UncaughtExceptionHandler.class); [EOL]     final Thread t = new Thread(); [EOL]     EasyMock.expect(wrapped.newThread(r)).andReturn(t); [EOL]     EasyMock.replay(wrapped, r, handler); [EOL]     final BasicThreadFactory factory = builder.wrappedFactory(wrapped).uncaughtExceptionHandler(handler).build(); [EOL]     assertSame("Wrong thread", t, factory.newThread(r)); [EOL]     assertEquals("Wrong exception handler", handler, t.getUncaughtExceptionHandler()); [EOL]     EasyMock.verify(wrapped, r, handler); [EOL] }
@Test [EOL] public void testNewThreadExHandler() { [EOL]     final ThreadFactory wrapped = EasyMock.createMock(ThreadFactory.class); [EOL]     final Runnable r = EasyMock.createMock(Runnable.class); [EOL]     final Thread.UncaughtExceptionHandler handler = EasyMock.createMock(Thread.UncaughtExceptionHandler.class); [EOL]     final Thread t = new Thread(); [EOL]     EasyMock.expect(wrapped.newThread(r)).andReturn(t); [EOL]     EasyMock.replay(wrapped, r, handler); [EOL]     final BasicThreadFactory factory = builder.wrappedFactory(wrapped).uncaughtExceptionHandler(handler).build(); [EOL]     assertSame("Wrong thread", t, factory.newThread(r)); [EOL]     assertEquals("Wrong exception handler", handler, t.getUncaughtExceptionHandler()); [EOL]     EasyMock.verify(wrapped, r, handler); [EOL] }
@Test [EOL] public void testSetContextValue() { [EOL]     exceptionContext.addContextValue("test2", "different value"); [EOL]     exceptionContext.setContextValue("test3", "3"); [EOL]     final String message = exceptionContext.getFormattedExceptionMessage(TEST_MESSAGE); [EOL]     assertTrue(message.indexOf(TEST_MESSAGE) >= 0); [EOL]     assertTrue(message.indexOf("test Poorly written obj") >= 0); [EOL]     assertTrue(message.indexOf("Crap") >= 0); [EOL]     assertTrue(exceptionContext.getFirstContextValue("crap") == null); [EOL]     assertTrue(exceptionContext.getFirstContextValue("test Poorly written obj") instanceof ObjectWithFaultyToString); [EOL]     assertEquals(7, exceptionContext.getContextEntries().size()); [EOL]     assertEquals(6, exceptionContext.getContextLabels().size()); [EOL]     assertTrue(exceptionContext.getContextLabels().contains("test Poorly written obj")); [EOL]     assertTrue(!exceptionContext.getContextLabels().contains("crap")); [EOL]     exceptionContext.setContextValue("test Poorly written obj", "replacement"); [EOL]     assertEquals(7, exceptionContext.getContextEntries().size()); [EOL]     assertEquals(6, exceptionContext.getContextLabels().size()); [EOL]     exceptionContext.setContextValue("test2", "another"); [EOL]     assertEquals(6, exceptionContext.getContextEntries().size()); [EOL]     assertEquals(6, exceptionContext.getContextLabels().size()); [EOL]     final String contextMessage = exceptionContext.getFormattedExceptionMessage(null); [EOL]     assertTrue(contextMessage.indexOf(TEST_MESSAGE) == -1); [EOL] }
@Test [EOL] public void testSetContextValue() { [EOL]     exceptionContext.addContextValue("test2", "different value"); [EOL]     exceptionContext.setContextValue("test3", "3"); [EOL]     final String message = exceptionContext.getFormattedExceptionMessage(TEST_MESSAGE); [EOL]     assertTrue(message.indexOf(TEST_MESSAGE) >= 0); [EOL]     assertTrue(message.indexOf("test Poorly written obj") >= 0); [EOL]     assertTrue(message.indexOf("Crap") >= 0); [EOL]     assertTrue(exceptionContext.getFirstContextValue("crap") == null); [EOL]     assertTrue(exceptionContext.getFirstContextValue("test Poorly written obj") instanceof ObjectWithFaultyToString); [EOL]     assertEquals(7, exceptionContext.getContextEntries().size()); [EOL]     assertEquals(6, exceptionContext.getContextLabels().size()); [EOL]     assertTrue(exceptionContext.getContextLabels().contains("test Poorly written obj")); [EOL]     assertTrue(!exceptionContext.getContextLabels().contains("crap")); [EOL]     exceptionContext.setContextValue("test Poorly written obj", "replacement"); [EOL]     assertEquals(7, exceptionContext.getContextEntries().size()); [EOL]     assertEquals(6, exceptionContext.getContextLabels().size()); [EOL]     exceptionContext.setContextValue("test2", "another"); [EOL]     assertEquals(6, exceptionContext.getContextEntries().size()); [EOL]     assertEquals(6, exceptionContext.getContextLabels().size()); [EOL]     final String contextMessage = exceptionContext.getFormattedExceptionMessage(null); [EOL]     assertTrue(contextMessage.indexOf(TEST_MESSAGE) == -1); [EOL] }
@Test [EOL] public void testSetContextValue() { [EOL]     exceptionContext.addContextValue("test2", "different value"); [EOL]     exceptionContext.setContextValue("test3", "3"); [EOL]     final String message = exceptionContext.getFormattedExceptionMessage(TEST_MESSAGE); [EOL]     assertTrue(message.indexOf(TEST_MESSAGE) >= 0); [EOL]     assertTrue(message.indexOf("test Poorly written obj") >= 0); [EOL]     assertTrue(message.indexOf("Crap") >= 0); [EOL]     assertTrue(exceptionContext.getFirstContextValue("crap") == null); [EOL]     assertTrue(exceptionContext.getFirstContextValue("test Poorly written obj") instanceof ObjectWithFaultyToString); [EOL]     assertEquals(7, exceptionContext.getContextEntries().size()); [EOL]     assertEquals(6, exceptionContext.getContextLabels().size()); [EOL]     assertTrue(exceptionContext.getContextLabels().contains("test Poorly written obj")); [EOL]     assertTrue(!exceptionContext.getContextLabels().contains("crap")); [EOL]     exceptionContext.setContextValue("test Poorly written obj", "replacement"); [EOL]     assertEquals(7, exceptionContext.getContextEntries().size()); [EOL]     assertEquals(6, exceptionContext.getContextLabels().size()); [EOL]     exceptionContext.setContextValue("test2", "another"); [EOL]     assertEquals(6, exceptionContext.getContextEntries().size()); [EOL]     assertEquals(6, exceptionContext.getContextLabels().size()); [EOL]     final String contextMessage = exceptionContext.getFormattedExceptionMessage(null); [EOL]     assertTrue(contextMessage.indexOf(TEST_MESSAGE) == -1); [EOL] }
@Test [EOL] public void testSetContextValue() { [EOL]     exceptionContext.addContextValue("test2", "different value"); [EOL]     exceptionContext.setContextValue("test3", "3"); [EOL]     final String message = exceptionContext.getFormattedExceptionMessage(TEST_MESSAGE); [EOL]     assertTrue(message.indexOf(TEST_MESSAGE) >= 0); [EOL]     assertTrue(message.indexOf("test Poorly written obj") >= 0); [EOL]     assertTrue(message.indexOf("Crap") >= 0); [EOL]     assertTrue(exceptionContext.getFirstContextValue("crap") == null); [EOL]     assertTrue(exceptionContext.getFirstContextValue("test Poorly written obj") instanceof ObjectWithFaultyToString); [EOL]     assertEquals(7, exceptionContext.getContextEntries().size()); [EOL]     assertEquals(6, exceptionContext.getContextLabels().size()); [EOL]     assertTrue(exceptionContext.getContextLabels().contains("test Poorly written obj")); [EOL]     assertTrue(!exceptionContext.getContextLabels().contains("crap")); [EOL]     exceptionContext.setContextValue("test Poorly written obj", "replacement"); [EOL]     assertEquals(7, exceptionContext.getContextEntries().size()); [EOL]     assertEquals(6, exceptionContext.getContextLabels().size()); [EOL]     exceptionContext.setContextValue("test2", "another"); [EOL]     assertEquals(6, exceptionContext.getContextEntries().size()); [EOL]     assertEquals(6, exceptionContext.getContextLabels().size()); [EOL]     final String contextMessage = exceptionContext.getFormattedExceptionMessage(null); [EOL]     assertTrue(contextMessage.indexOf(TEST_MESSAGE) == -1); [EOL] }
@Test [EOL] public void testRawMessage() { [EOL]     assertEquals(Exception.class.getName() + ": " + TEST_MESSAGE, exceptionContext.getRawMessage()); [EOL]     exceptionContext = new ContextedRuntimeException(TEST_MESSAGE_2, new Exception(TEST_MESSAGE), new DefaultExceptionContext()); [EOL]     assertEquals(TEST_MESSAGE_2, exceptionContext.getRawMessage()); [EOL]     exceptionContext = new ContextedRuntimeException(null, new Exception(TEST_MESSAGE), new DefaultExceptionContext()); [EOL]     assertNull(exceptionContext.getRawMessage()); [EOL] }
@Test [EOL] public void testRawMessage() { [EOL]     assertEquals(Exception.class.getName() + ": " + TEST_MESSAGE, exceptionContext.getRawMessage()); [EOL]     exceptionContext = new ContextedRuntimeException(TEST_MESSAGE_2, new Exception(TEST_MESSAGE), new DefaultExceptionContext()); [EOL]     assertEquals(TEST_MESSAGE_2, exceptionContext.getRawMessage()); [EOL]     exceptionContext = new ContextedRuntimeException(null, new Exception(TEST_MESSAGE), new DefaultExceptionContext()); [EOL]     assertNull(exceptionContext.getRawMessage()); [EOL] }
@Test [EOL] public void testRemoveListenerDuringEvent() throws PropertyVetoException { [EOL]     final EventListenerSupport<VetoableChangeListener> listenerSupport = EventListenerSupport.create(VetoableChangeListener.class); [EOL]     for (int i = 0; i < 10; ++i) { [EOL]         addDeregisterListener(listenerSupport); [EOL]     } [EOL]     assertEquals(listenerSupport.getListenerCount(), 10); [EOL]     listenerSupport.fire().vetoableChange(new PropertyChangeEvent(new Date(), "Day", 4, 5)); [EOL]     assertEquals(listenerSupport.getListenerCount(), 0); [EOL] }
@Test [EOL] public void testRemoveListenerDuringEvent() throws PropertyVetoException { [EOL]     final EventListenerSupport<VetoableChangeListener> listenerSupport = EventListenerSupport.create(VetoableChangeListener.class); [EOL]     for (int i = 0; i < 10; ++i) { [EOL]         addDeregisterListener(listenerSupport); [EOL]     } [EOL]     assertEquals(listenerSupport.getListenerCount(), 10); [EOL]     listenerSupport.fire().vetoableChange(new PropertyChangeEvent(new Date(), "Day", 4, 5)); [EOL]     assertEquals(listenerSupport.getListenerCount(), 0); [EOL] }
@Test [EOL] public void testRemoveListenerDuringEvent() throws PropertyVetoException { [EOL]     final EventListenerSupport<VetoableChangeListener> listenerSupport = EventListenerSupport.create(VetoableChangeListener.class); [EOL]     for (int i = 0; i < 10; ++i) { [EOL]         addDeregisterListener(listenerSupport); [EOL]     } [EOL]     assertEquals(listenerSupport.getListenerCount(), 10); [EOL]     listenerSupport.fire().vetoableChange(new PropertyChangeEvent(new Date(), "Day", 4, 5)); [EOL]     assertEquals(listenerSupport.getListenerCount(), 0); [EOL] }
@Test [EOL] public void testRemoveListenerDuringEvent() throws PropertyVetoException { [EOL]     final EventListenerSupport<VetoableChangeListener> listenerSupport = EventListenerSupport.create(VetoableChangeListener.class); [EOL]     for (int i = 0; i < 10; ++i) { [EOL]         addDeregisterListener(listenerSupport); [EOL]     } [EOL]     assertEquals(listenerSupport.getListenerCount(), 10); [EOL]     listenerSupport.fire().vetoableChange(new PropertyChangeEvent(new Date(), "Day", 4, 5)); [EOL]     assertEquals(listenerSupport.getListenerCount(), 0); [EOL] }
@Test [EOL] public void testRemoveListenerDuringEvent() throws PropertyVetoException { [EOL]     final EventListenerSupport<VetoableChangeListener> listenerSupport = EventListenerSupport.create(VetoableChangeListener.class); [EOL]     for (int i = 0; i < 10; ++i) { [EOL]         addDeregisterListener(listenerSupport); [EOL]     } [EOL]     assertEquals(listenerSupport.getListenerCount(), 10); [EOL]     listenerSupport.fire().vetoableChange(new PropertyChangeEvent(new Date(), "Day", 4, 5)); [EOL]     assertEquals(listenerSupport.getListenerCount(), 0); [EOL] }
@Test [EOL] public void testRemoveListenerDuringEvent() throws PropertyVetoException { [EOL]     final EventListenerSupport<VetoableChangeListener> listenerSupport = EventListenerSupport.create(VetoableChangeListener.class); [EOL]     for (int i = 0; i < 10; ++i) { [EOL]         addDeregisterListener(listenerSupport); [EOL]     } [EOL]     assertEquals(listenerSupport.getListenerCount(), 10); [EOL]     listenerSupport.fire().vetoableChange(new PropertyChangeEvent(new Date(), "Day", 4, 5)); [EOL]     assertEquals(listenerSupport.getListenerCount(), 0); [EOL] }
@Test [EOL] public void testRemoveListenerDuringEvent() throws PropertyVetoException { [EOL]     final EventListenerSupport<VetoableChangeListener> listenerSupport = EventListenerSupport.create(VetoableChangeListener.class); [EOL]     for (int i = 0; i < 10; ++i) { [EOL]         addDeregisterListener(listenerSupport); [EOL]     } [EOL]     assertEquals(listenerSupport.getListenerCount(), 10); [EOL]     listenerSupport.fire().vetoableChange(new PropertyChangeEvent(new Date(), "Day", 4, 5)); [EOL]     assertEquals(listenerSupport.getListenerCount(), 0); [EOL] }
@Test [EOL] public void testRemoveListenerDuringEvent() throws PropertyVetoException { [EOL]     final EventListenerSupport<VetoableChangeListener> listenerSupport = EventListenerSupport.create(VetoableChangeListener.class); [EOL]     for (int i = 0; i < 10; ++i) { [EOL]         addDeregisterListener(listenerSupport); [EOL]     } [EOL]     assertEquals(listenerSupport.getListenerCount(), 10); [EOL]     listenerSupport.fire().vetoableChange(new PropertyChangeEvent(new Date(), "Day", 4, 5)); [EOL]     assertEquals(listenerSupport.getListenerCount(), 0); [EOL] }
@Test [EOL] public void testGetSet() { [EOL]     final MutableFloat mutNum = new MutableFloat(0f); [EOL]     assertEquals(0f, new MutableFloat().floatValue(), 0.0001f); [EOL]     assertEquals(Float.valueOf(0), new MutableFloat().getValue()); [EOL]     mutNum.setValue(1); [EOL]     assertEquals(1f, mutNum.floatValue(), 0.0001f); [EOL]     assertEquals(Float.valueOf(1f), mutNum.getValue()); [EOL]     mutNum.setValue(Float.valueOf(2f)); [EOL]     assertEquals(2f, mutNum.floatValue(), 0.0001f); [EOL]     assertEquals(Float.valueOf(2f), mutNum.getValue()); [EOL]     mutNum.setValue(new MutableFloat(3f)); [EOL]     assertEquals(3f, mutNum.floatValue(), 0.0001f); [EOL]     assertEquals(Float.valueOf(3f), mutNum.getValue()); [EOL] }
@Test [EOL] public void testGetSet() { [EOL]     final MutableFloat mutNum = new MutableFloat(0f); [EOL]     assertEquals(0f, new MutableFloat().floatValue(), 0.0001f); [EOL]     assertEquals(Float.valueOf(0), new MutableFloat().getValue()); [EOL]     mutNum.setValue(1); [EOL]     assertEquals(1f, mutNum.floatValue(), 0.0001f); [EOL]     assertEquals(Float.valueOf(1f), mutNum.getValue()); [EOL]     mutNum.setValue(Float.valueOf(2f)); [EOL]     assertEquals(2f, mutNum.floatValue(), 0.0001f); [EOL]     assertEquals(Float.valueOf(2f), mutNum.getValue()); [EOL]     mutNum.setValue(new MutableFloat(3f)); [EOL]     assertEquals(3f, mutNum.floatValue(), 0.0001f); [EOL]     assertEquals(Float.valueOf(3f), mutNum.getValue()); [EOL] }
@Test [EOL] public void testGetSet() { [EOL]     final MutableFloat mutNum = new MutableFloat(0f); [EOL]     assertEquals(0f, new MutableFloat().floatValue(), 0.0001f); [EOL]     assertEquals(Float.valueOf(0), new MutableFloat().getValue()); [EOL]     mutNum.setValue(1); [EOL]     assertEquals(1f, mutNum.floatValue(), 0.0001f); [EOL]     assertEquals(Float.valueOf(1f), mutNum.getValue()); [EOL]     mutNum.setValue(Float.valueOf(2f)); [EOL]     assertEquals(2f, mutNum.floatValue(), 0.0001f); [EOL]     assertEquals(Float.valueOf(2f), mutNum.getValue()); [EOL]     mutNum.setValue(new MutableFloat(3f)); [EOL]     assertEquals(3f, mutNum.floatValue(), 0.0001f); [EOL]     assertEquals(Float.valueOf(3f), mutNum.getValue()); [EOL] }
@Test [EOL] public void testGetSet() { [EOL]     final MutableFloat mutNum = new MutableFloat(0f); [EOL]     assertEquals(0f, new MutableFloat().floatValue(), 0.0001f); [EOL]     assertEquals(Float.valueOf(0), new MutableFloat().getValue()); [EOL]     mutNum.setValue(1); [EOL]     assertEquals(1f, mutNum.floatValue(), 0.0001f); [EOL]     assertEquals(Float.valueOf(1f), mutNum.getValue()); [EOL]     mutNum.setValue(Float.valueOf(2f)); [EOL]     assertEquals(2f, mutNum.floatValue(), 0.0001f); [EOL]     assertEquals(Float.valueOf(2f), mutNum.getValue()); [EOL]     mutNum.setValue(new MutableFloat(3f)); [EOL]     assertEquals(3f, mutNum.floatValue(), 0.0001f); [EOL]     assertEquals(Float.valueOf(3f), mutNum.getValue()); [EOL] }
@Test [EOL] public void testGetSet() { [EOL]     final MutableFloat mutNum = new MutableFloat(0f); [EOL]     assertEquals(0f, new MutableFloat().floatValue(), 0.0001f); [EOL]     assertEquals(Float.valueOf(0), new MutableFloat().getValue()); [EOL]     mutNum.setValue(1); [EOL]     assertEquals(1f, mutNum.floatValue(), 0.0001f); [EOL]     assertEquals(Float.valueOf(1f), mutNum.getValue()); [EOL]     mutNum.setValue(Float.valueOf(2f)); [EOL]     assertEquals(2f, mutNum.floatValue(), 0.0001f); [EOL]     assertEquals(Float.valueOf(2f), mutNum.getValue()); [EOL]     mutNum.setValue(new MutableFloat(3f)); [EOL]     assertEquals(3f, mutNum.floatValue(), 0.0001f); [EOL]     assertEquals(Float.valueOf(3f), mutNum.getValue()); [EOL] }
@Test [EOL] public void testGetSet() { [EOL]     final MutableFloat mutNum = new MutableFloat(0f); [EOL]     assertEquals(0f, new MutableFloat().floatValue(), 0.0001f); [EOL]     assertEquals(Float.valueOf(0), new MutableFloat().getValue()); [EOL]     mutNum.setValue(1); [EOL]     assertEquals(1f, mutNum.floatValue(), 0.0001f); [EOL]     assertEquals(Float.valueOf(1f), mutNum.getValue()); [EOL]     mutNum.setValue(Float.valueOf(2f)); [EOL]     assertEquals(2f, mutNum.floatValue(), 0.0001f); [EOL]     assertEquals(Float.valueOf(2f), mutNum.getValue()); [EOL]     mutNum.setValue(new MutableFloat(3f)); [EOL]     assertEquals(3f, mutNum.floatValue(), 0.0001f); [EOL]     assertEquals(Float.valueOf(3f), mutNum.getValue()); [EOL] }
@Test [EOL] public void testGetSet() { [EOL]     final MutableFloat mutNum = new MutableFloat(0f); [EOL]     assertEquals(0f, new MutableFloat().floatValue(), 0.0001f); [EOL]     assertEquals(Float.valueOf(0), new MutableFloat().getValue()); [EOL]     mutNum.setValue(1); [EOL]     assertEquals(1f, mutNum.floatValue(), 0.0001f); [EOL]     assertEquals(Float.valueOf(1f), mutNum.getValue()); [EOL]     mutNum.setValue(Float.valueOf(2f)); [EOL]     assertEquals(2f, mutNum.floatValue(), 0.0001f); [EOL]     assertEquals(Float.valueOf(2f), mutNum.getValue()); [EOL]     mutNum.setValue(new MutableFloat(3f)); [EOL]     assertEquals(3f, mutNum.floatValue(), 0.0001f); [EOL]     assertEquals(Float.valueOf(3f), mutNum.getValue()); [EOL] }
@Test [EOL] public void testNanInfinite() { [EOL]     MutableFloat mutNum = new MutableFloat(Float.NaN); [EOL]     assertTrue(mutNum.isNaN()); [EOL]     mutNum = new MutableFloat(Float.POSITIVE_INFINITY); [EOL]     assertTrue(mutNum.isInfinite()); [EOL]     mutNum = new MutableFloat(Float.NEGATIVE_INFINITY); [EOL]     assertTrue(mutNum.isInfinite()); [EOL] }
@Test [EOL] public void testNanInfinite() { [EOL]     MutableFloat mutNum = new MutableFloat(Float.NaN); [EOL]     assertTrue(mutNum.isNaN()); [EOL]     mutNum = new MutableFloat(Float.POSITIVE_INFINITY); [EOL]     assertTrue(mutNum.isInfinite()); [EOL]     mutNum = new MutableFloat(Float.NEGATIVE_INFINITY); [EOL]     assertTrue(mutNum.isInfinite()); [EOL] }
@Test [EOL] public void testNanInfinite() { [EOL]     MutableFloat mutNum = new MutableFloat(Float.NaN); [EOL]     assertTrue(mutNum.isNaN()); [EOL]     mutNum = new MutableFloat(Float.POSITIVE_INFINITY); [EOL]     assertTrue(mutNum.isInfinite()); [EOL]     mutNum = new MutableFloat(Float.NEGATIVE_INFINITY); [EOL]     assertTrue(mutNum.isInfinite()); [EOL] }
@Test [EOL] public void testIncrement() { [EOL]     final MutableFloat mutNum = new MutableFloat(1); [EOL]     mutNum.increment(); [EOL]     assertEquals(2, mutNum.intValue()); [EOL]     assertEquals(2L, mutNum.longValue()); [EOL] }
@Test [EOL] public void testDecrement() { [EOL]     final MutableFloat mutNum = new MutableFloat(1); [EOL]     mutNum.decrement(); [EOL]     assertEquals(0, mutNum.intValue()); [EOL]     assertEquals(0L, mutNum.longValue()); [EOL] }
@Test [EOL] public void testDecrement() { [EOL]     final MutableFloat mutNum = new MutableFloat(1); [EOL]     mutNum.decrement(); [EOL]     assertEquals(0, mutNum.intValue()); [EOL]     assertEquals(0L, mutNum.longValue()); [EOL] }
@Test [EOL] public void testDecrement() { [EOL]     final MutableFloat mutNum = new MutableFloat(1); [EOL]     mutNum.decrement(); [EOL]     assertEquals(0, mutNum.intValue()); [EOL]     assertEquals(0L, mutNum.longValue()); [EOL] }
@Test [EOL] public void testSubtractValuePrimitive() { [EOL]     final MutableFloat mutNum = new MutableFloat(1); [EOL]     mutNum.subtract(0.9f); [EOL]     assertEquals(0.1f, mutNum.floatValue(), 0.01f); [EOL] }
@Test [EOL] public void testSubtractValuePrimitive() { [EOL]     final MutableFloat mutNum = new MutableFloat(1); [EOL]     mutNum.subtract(0.9f); [EOL]     assertEquals(0.1f, mutNum.floatValue(), 0.01f); [EOL] }
@Test [EOL] public void testSubtractValuePrimitive() { [EOL]     final MutableFloat mutNum = new MutableFloat(1); [EOL]     mutNum.subtract(0.9f); [EOL]     assertEquals(0.1f, mutNum.floatValue(), 0.01f); [EOL] }
@Test [EOL] public void testSubtractValueObject() { [EOL]     final MutableFloat mutNum = new MutableFloat(1); [EOL]     mutNum.subtract(Float.valueOf(0.9f)); [EOL]     assertEquals(0.1f, mutNum.floatValue(), 0.01f); [EOL] }
@Test [EOL] public void testSubtractValueObject() { [EOL]     final MutableFloat mutNum = new MutableFloat(1); [EOL]     mutNum.subtract(Float.valueOf(0.9f)); [EOL]     assertEquals(0.1f, mutNum.floatValue(), 0.01f); [EOL] }
@Test [EOL] public void testDecrement() { [EOL]     final MutableFloat mutNum = new MutableFloat(1); [EOL]     mutNum.decrement(); [EOL]     assertEquals(0, mutNum.intValue()); [EOL]     assertEquals(0L, mutNum.longValue()); [EOL] }
@Test [EOL] public void testDecrement() { [EOL]     final MutableFloat mutNum = new MutableFloat(1); [EOL]     mutNum.decrement(); [EOL]     assertEquals(0, mutNum.intValue()); [EOL]     assertEquals(0L, mutNum.longValue()); [EOL] }
@Test [EOL] public void testDecrement() { [EOL]     final MutableFloat mutNum = new MutableFloat(1); [EOL]     mutNum.decrement(); [EOL]     assertEquals(0, mutNum.intValue()); [EOL]     assertEquals(0L, mutNum.longValue()); [EOL] }
@Test [EOL] public void testDecrement() { [EOL]     final MutableFloat mutNum = new MutableFloat(1); [EOL]     mutNum.decrement(); [EOL]     assertEquals(0, mutNum.intValue()); [EOL]     assertEquals(0L, mutNum.longValue()); [EOL] }
@Test [EOL] public void testDecrement() { [EOL]     final MutableFloat mutNum = new MutableFloat(1); [EOL]     mutNum.decrement(); [EOL]     assertEquals(0, mutNum.intValue()); [EOL]     assertEquals(0L, mutNum.longValue()); [EOL] }
@Test [EOL] public void testDecrement() { [EOL]     final MutableFloat mutNum = new MutableFloat(1); [EOL]     mutNum.decrement(); [EOL]     assertEquals(0, mutNum.intValue()); [EOL]     assertEquals(0L, mutNum.longValue()); [EOL] }
@Test [EOL] public void testGetSet() { [EOL]     final MutableFloat mutNum = new MutableFloat(0f); [EOL]     assertEquals(0f, new MutableFloat().floatValue(), 0.0001f); [EOL]     assertEquals(Float.valueOf(0), new MutableFloat().getValue()); [EOL]     mutNum.setValue(1); [EOL]     assertEquals(1f, mutNum.floatValue(), 0.0001f); [EOL]     assertEquals(Float.valueOf(1f), mutNum.getValue()); [EOL]     mutNum.setValue(Float.valueOf(2f)); [EOL]     assertEquals(2f, mutNum.floatValue(), 0.0001f); [EOL]     assertEquals(Float.valueOf(2f), mutNum.getValue()); [EOL]     mutNum.setValue(new MutableFloat(3f)); [EOL]     assertEquals(3f, mutNum.floatValue(), 0.0001f); [EOL]     assertEquals(Float.valueOf(3f), mutNum.getValue()); [EOL] }
@Test [EOL] public void testGetSet() { [EOL]     final MutableFloat mutNum = new MutableFloat(0f); [EOL]     assertEquals(0f, new MutableFloat().floatValue(), 0.0001f); [EOL]     assertEquals(Float.valueOf(0), new MutableFloat().getValue()); [EOL]     mutNum.setValue(1); [EOL]     assertEquals(1f, mutNum.floatValue(), 0.0001f); [EOL]     assertEquals(Float.valueOf(1f), mutNum.getValue()); [EOL]     mutNum.setValue(Float.valueOf(2f)); [EOL]     assertEquals(2f, mutNum.floatValue(), 0.0001f); [EOL]     assertEquals(Float.valueOf(2f), mutNum.getValue()); [EOL]     mutNum.setValue(new MutableFloat(3f)); [EOL]     assertEquals(3f, mutNum.floatValue(), 0.0001f); [EOL]     assertEquals(Float.valueOf(3f), mutNum.getValue()); [EOL] }
@Test [EOL] public void testGetSet() { [EOL]     final MutableFloat mutNum = new MutableFloat(0f); [EOL]     assertEquals(0f, new MutableFloat().floatValue(), 0.0001f); [EOL]     assertEquals(Float.valueOf(0), new MutableFloat().getValue()); [EOL]     mutNum.setValue(1); [EOL]     assertEquals(1f, mutNum.floatValue(), 0.0001f); [EOL]     assertEquals(Float.valueOf(1f), mutNum.getValue()); [EOL]     mutNum.setValue(Float.valueOf(2f)); [EOL]     assertEquals(2f, mutNum.floatValue(), 0.0001f); [EOL]     assertEquals(Float.valueOf(2f), mutNum.getValue()); [EOL]     mutNum.setValue(new MutableFloat(3f)); [EOL]     assertEquals(3f, mutNum.floatValue(), 0.0001f); [EOL]     assertEquals(Float.valueOf(3f), mutNum.getValue()); [EOL] }
@Test [EOL] public void testPrimitiveValues() { [EOL]     final MutableFloat mutNum = new MutableFloat(1.7F); [EOL]     assertEquals(1, mutNum.intValue()); [EOL]     assertEquals(1.7, mutNum.doubleValue(), 0.00001); [EOL]     assertEquals((byte) 1, mutNum.byteValue()); [EOL]     assertEquals((short) 1, mutNum.shortValue()); [EOL]     assertEquals(1, mutNum.intValue()); [EOL]     assertEquals(1L, mutNum.longValue()); [EOL] }
@Test [EOL] public void testPrimitiveValues() { [EOL]     final MutableFloat mutNum = new MutableFloat(1.7F); [EOL]     assertEquals(1, mutNum.intValue()); [EOL]     assertEquals(1.7, mutNum.doubleValue(), 0.00001); [EOL]     assertEquals((byte) 1, mutNum.byteValue()); [EOL]     assertEquals((short) 1, mutNum.shortValue()); [EOL]     assertEquals(1, mutNum.intValue()); [EOL]     assertEquals(1L, mutNum.longValue()); [EOL] }
@Test [EOL] public void testPrimitiveValues() { [EOL]     final MutableFloat mutNum = new MutableFloat(1.7F); [EOL]     assertEquals(1, mutNum.intValue()); [EOL]     assertEquals(1.7, mutNum.doubleValue(), 0.00001); [EOL]     assertEquals((byte) 1, mutNum.byteValue()); [EOL]     assertEquals((short) 1, mutNum.shortValue()); [EOL]     assertEquals(1, mutNum.intValue()); [EOL]     assertEquals(1L, mutNum.longValue()); [EOL] }
@Test [EOL] public void testAddEventListenerWithNoAddMethod() { [EOL]     final PropertyChangeSource src = new PropertyChangeSource(); [EOL]     final EventCountingInvociationHandler handler = new EventCountingInvociationHandler(); [EOL]     final ObjectChangeListener listener = handler.createListener(ObjectChangeListener.class); [EOL]     try { [EOL]         EventUtils.addEventListener(src, ObjectChangeListener.class, listener); [EOL]         fail("Should not be allowed to add a listener to an object that doesn't support it."); [EOL]     } catch (final IllegalArgumentException e) { [EOL]         assertEquals("Class " + src.getClass().getName() + " does not have a public add" + ObjectChangeListener.class.getSimpleName() + " method which takes a parameter of type " + ObjectChangeListener.class.getName() + ".", e.getMessage()); [EOL]     } [EOL] }
@Test [EOL] public void test_getShortCanonicalName_String() { [EOL]     assertEquals("ClassUtils", ClassUtils.getShortCanonicalName("org.apache.commons.lang3.ClassUtils")); [EOL]     assertEquals("ClassUtils[]", ClassUtils.getShortCanonicalName("[Lorg.apache.commons.lang3.ClassUtils;")); [EOL]     assertEquals("ClassUtils[][]", ClassUtils.getShortCanonicalName("[[Lorg.apache.commons.lang3.ClassUtils;")); [EOL]     assertEquals("ClassUtils[]", ClassUtils.getShortCanonicalName("org.apache.commons.lang3.ClassUtils[]")); [EOL]     assertEquals("ClassUtils[][]", ClassUtils.getShortCanonicalName("org.apache.commons.lang3.ClassUtils[][]")); [EOL]     assertEquals("int[]", ClassUtils.getShortCanonicalName("[I")); [EOL]     assertEquals("int[][]", ClassUtils.getShortCanonicalName("[[I")); [EOL]     assertEquals("int[]", ClassUtils.getShortCanonicalName("int[]")); [EOL]     assertEquals("int[][]", ClassUtils.getShortCanonicalName("int[][]")); [EOL]     assertEquals("ClassUtilsTest.6", ClassUtils.getShortCanonicalName("org.apache.commons.lang3.ClassUtilsTest$6")); [EOL]     assertEquals("ClassUtilsTest.5Named", ClassUtils.getShortCanonicalName("org.apache.commons.lang3.ClassUtilsTest$5Named")); [EOL]     assertEquals("ClassUtilsTest.Inner", ClassUtils.getShortCanonicalName("org.apache.commons.lang3.ClassUtilsTest$Inner")); [EOL] }
@Test [EOL] public void test_getSimpleName_Class() { [EOL]     assertEquals("ClassUtils", ClassUtils.getSimpleName(ClassUtils.class)); [EOL]     assertEquals("Entry", ClassUtils.getSimpleName(Map.Entry.class)); [EOL]     assertEquals("", ClassUtils.getSimpleName((Class<?>) null)); [EOL]     assertEquals("String[]", ClassUtils.getSimpleName(String[].class)); [EOL]     assertEquals("Entry[]", ClassUtils.getSimpleName(Map.Entry[].class)); [EOL]     assertEquals("boolean", ClassUtils.getSimpleName(boolean.class)); [EOL]     assertEquals("byte", ClassUtils.getSimpleName(byte.class)); [EOL]     assertEquals("char", ClassUtils.getSimpleName(char.class)); [EOL]     assertEquals("short", ClassUtils.getSimpleName(short.class)); [EOL]     assertEquals("int", ClassUtils.getSimpleName(int.class)); [EOL]     assertEquals("long", ClassUtils.getSimpleName(long.class)); [EOL]     assertEquals("float", ClassUtils.getSimpleName(float.class)); [EOL]     assertEquals("double", ClassUtils.getSimpleName(double.class)); [EOL]     assertEquals("boolean[]", ClassUtils.getSimpleName(boolean[].class)); [EOL]     assertEquals("byte[]", ClassUtils.getSimpleName(byte[].class)); [EOL]     assertEquals("char[]", ClassUtils.getSimpleName(char[].class)); [EOL]     assertEquals("short[]", ClassUtils.getSimpleName(short[].class)); [EOL]     assertEquals("int[]", ClassUtils.getSimpleName(int[].class)); [EOL]     assertEquals("long[]", ClassUtils.getSimpleName(long[].class)); [EOL]     assertEquals("float[]", ClassUtils.getSimpleName(float[].class)); [EOL]     assertEquals("double[]", ClassUtils.getSimpleName(double[].class)); [EOL]     assertEquals("String[][]", ClassUtils.getSimpleName(String[][].class)); [EOL]     assertEquals("String[][][]", ClassUtils.getSimpleName(String[][][].class)); [EOL]     assertEquals("String[][][][]", ClassUtils.getSimpleName(String[][][][].class)); [EOL]     class Named extends Object { [EOL]     } [EOL]     assertEquals("", ClassUtils.getSimpleName(new Object() { [EOL]     }.getClass())); [EOL]     assertEquals("Named", ClassUtils.getSimpleName(Named.class)); [EOL] }
@Test [EOL] public void test_getSimpleName_Class() { [EOL]     assertEquals("ClassUtils", ClassUtils.getSimpleName(ClassUtils.class)); [EOL]     assertEquals("Entry", ClassUtils.getSimpleName(Map.Entry.class)); [EOL]     assertEquals("", ClassUtils.getSimpleName((Class<?>) null)); [EOL]     assertEquals("String[]", ClassUtils.getSimpleName(String[].class)); [EOL]     assertEquals("Entry[]", ClassUtils.getSimpleName(Map.Entry[].class)); [EOL]     assertEquals("boolean", ClassUtils.getSimpleName(boolean.class)); [EOL]     assertEquals("byte", ClassUtils.getSimpleName(byte.class)); [EOL]     assertEquals("char", ClassUtils.getSimpleName(char.class)); [EOL]     assertEquals("short", ClassUtils.getSimpleName(short.class)); [EOL]     assertEquals("int", ClassUtils.getSimpleName(int.class)); [EOL]     assertEquals("long", ClassUtils.getSimpleName(long.class)); [EOL]     assertEquals("float", ClassUtils.getSimpleName(float.class)); [EOL]     assertEquals("double", ClassUtils.getSimpleName(double.class)); [EOL]     assertEquals("boolean[]", ClassUtils.getSimpleName(boolean[].class)); [EOL]     assertEquals("byte[]", ClassUtils.getSimpleName(byte[].class)); [EOL]     assertEquals("char[]", ClassUtils.getSimpleName(char[].class)); [EOL]     assertEquals("short[]", ClassUtils.getSimpleName(short[].class)); [EOL]     assertEquals("int[]", ClassUtils.getSimpleName(int[].class)); [EOL]     assertEquals("long[]", ClassUtils.getSimpleName(long[].class)); [EOL]     assertEquals("float[]", ClassUtils.getSimpleName(float[].class)); [EOL]     assertEquals("double[]", ClassUtils.getSimpleName(double[].class)); [EOL]     assertEquals("String[][]", ClassUtils.getSimpleName(String[][].class)); [EOL]     assertEquals("String[][][]", ClassUtils.getSimpleName(String[][][].class)); [EOL]     assertEquals("String[][][][]", ClassUtils.getSimpleName(String[][][][].class)); [EOL]     class Named extends Object { [EOL]     } [EOL]     assertEquals("", ClassUtils.getSimpleName(new Object() { [EOL]     }.getClass())); [EOL]     assertEquals("Named", ClassUtils.getSimpleName(Named.class)); [EOL] }
@Test [EOL] public void test_convertClassNamesToClasses_List() { [EOL]     final List<String> list = new ArrayList<String>(); [EOL]     List<Class<?>> result = ClassUtils.convertClassNamesToClasses(list); [EOL]     assertEquals(0, result.size()); [EOL]     list.add("java.lang.String"); [EOL]     list.add("java.lang.xxx"); [EOL]     list.add("java.lang.Object"); [EOL]     result = ClassUtils.convertClassNamesToClasses(list); [EOL]     assertEquals(3, result.size()); [EOL]     assertEquals(String.class, result.get(0)); [EOL]     assertEquals(null, result.get(1)); [EOL]     assertEquals(Object.class, result.get(2)); [EOL]     @SuppressWarnings("unchecked") [EOL]     final List<Object> olist = (List<Object>) (List<?>) list; [EOL]     olist.add(new Object()); [EOL]     try { [EOL]         ClassUtils.convertClassNamesToClasses(list); [EOL]         fail("Should not have been able to convert list"); [EOL]     } catch (final ClassCastException expected) { [EOL]     } [EOL]     assertEquals(null, ClassUtils.convertClassNamesToClasses(null)); [EOL] }
@Test [EOL] public void test_convertClassNamesToClasses_List() { [EOL]     final List<String> list = new ArrayList<String>(); [EOL]     List<Class<?>> result = ClassUtils.convertClassNamesToClasses(list); [EOL]     assertEquals(0, result.size()); [EOL]     list.add("java.lang.String"); [EOL]     list.add("java.lang.xxx"); [EOL]     list.add("java.lang.Object"); [EOL]     result = ClassUtils.convertClassNamesToClasses(list); [EOL]     assertEquals(3, result.size()); [EOL]     assertEquals(String.class, result.get(0)); [EOL]     assertEquals(null, result.get(1)); [EOL]     assertEquals(Object.class, result.get(2)); [EOL]     @SuppressWarnings("unchecked") [EOL]     final List<Object> olist = (List<Object>) (List<?>) list; [EOL]     olist.add(new Object()); [EOL]     try { [EOL]         ClassUtils.convertClassNamesToClasses(list); [EOL]         fail("Should not have been able to convert list"); [EOL]     } catch (final ClassCastException expected) { [EOL]     } [EOL]     assertEquals(null, ClassUtils.convertClassNamesToClasses(null)); [EOL] }
@Test [EOL] public void test_convertClassNamesToClasses_List() { [EOL]     final List<String> list = new ArrayList<String>(); [EOL]     List<Class<?>> result = ClassUtils.convertClassNamesToClasses(list); [EOL]     assertEquals(0, result.size()); [EOL]     list.add("java.lang.String"); [EOL]     list.add("java.lang.xxx"); [EOL]     list.add("java.lang.Object"); [EOL]     result = ClassUtils.convertClassNamesToClasses(list); [EOL]     assertEquals(3, result.size()); [EOL]     assertEquals(String.class, result.get(0)); [EOL]     assertEquals(null, result.get(1)); [EOL]     assertEquals(Object.class, result.get(2)); [EOL]     @SuppressWarnings("unchecked") [EOL]     final List<Object> olist = (List<Object>) (List<?>) list; [EOL]     olist.add(new Object()); [EOL]     try { [EOL]         ClassUtils.convertClassNamesToClasses(list); [EOL]         fail("Should not have been able to convert list"); [EOL]     } catch (final ClassCastException expected) { [EOL]     } [EOL]     assertEquals(null, ClassUtils.convertClassNamesToClasses(null)); [EOL] }
@Test [EOL] public void test_convertClassNamesToClasses_List() { [EOL]     final List<String> list = new ArrayList<String>(); [EOL]     List<Class<?>> result = ClassUtils.convertClassNamesToClasses(list); [EOL]     assertEquals(0, result.size()); [EOL]     list.add("java.lang.String"); [EOL]     list.add("java.lang.xxx"); [EOL]     list.add("java.lang.Object"); [EOL]     result = ClassUtils.convertClassNamesToClasses(list); [EOL]     assertEquals(3, result.size()); [EOL]     assertEquals(String.class, result.get(0)); [EOL]     assertEquals(null, result.get(1)); [EOL]     assertEquals(Object.class, result.get(2)); [EOL]     @SuppressWarnings("unchecked") [EOL]     final List<Object> olist = (List<Object>) (List<?>) list; [EOL]     olist.add(new Object()); [EOL]     try { [EOL]         ClassUtils.convertClassNamesToClasses(list); [EOL]         fail("Should not have been able to convert list"); [EOL]     } catch (final ClassCastException expected) { [EOL]     } [EOL]     assertEquals(null, ClassUtils.convertClassNamesToClasses(null)); [EOL] }
@Test [EOL] public void test_convertClassNamesToClasses_List() { [EOL]     final List<String> list = new ArrayList<String>(); [EOL]     List<Class<?>> result = ClassUtils.convertClassNamesToClasses(list); [EOL]     assertEquals(0, result.size()); [EOL]     list.add("java.lang.String"); [EOL]     list.add("java.lang.xxx"); [EOL]     list.add("java.lang.Object"); [EOL]     result = ClassUtils.convertClassNamesToClasses(list); [EOL]     assertEquals(3, result.size()); [EOL]     assertEquals(String.class, result.get(0)); [EOL]     assertEquals(null, result.get(1)); [EOL]     assertEquals(Object.class, result.get(2)); [EOL]     @SuppressWarnings("unchecked") [EOL]     final List<Object> olist = (List<Object>) (List<?>) list; [EOL]     olist.add(new Object()); [EOL]     try { [EOL]         ClassUtils.convertClassNamesToClasses(list); [EOL]         fail("Should not have been able to convert list"); [EOL]     } catch (final ClassCastException expected) { [EOL]     } [EOL]     assertEquals(null, ClassUtils.convertClassNamesToClasses(null)); [EOL] }
@Test [EOL] public void testIsPrimitiveOrWrapper() { [EOL]     assertTrue("Boolean.class", ClassUtils.isPrimitiveOrWrapper(Boolean.class)); [EOL]     assertTrue("Byte.class", ClassUtils.isPrimitiveOrWrapper(Byte.class)); [EOL]     assertTrue("Character.class", ClassUtils.isPrimitiveOrWrapper(Character.class)); [EOL]     assertTrue("Short.class", ClassUtils.isPrimitiveOrWrapper(Short.class)); [EOL]     assertTrue("Integer.class", ClassUtils.isPrimitiveOrWrapper(Integer.class)); [EOL]     assertTrue("Long.class", ClassUtils.isPrimitiveOrWrapper(Long.class)); [EOL]     assertTrue("Double.class", ClassUtils.isPrimitiveOrWrapper(Double.class)); [EOL]     assertTrue("Float.class", ClassUtils.isPrimitiveOrWrapper(Float.class)); [EOL]     assertTrue("boolean", ClassUtils.isPrimitiveOrWrapper(Boolean.TYPE)); [EOL]     assertTrue("byte", ClassUtils.isPrimitiveOrWrapper(Byte.TYPE)); [EOL]     assertTrue("char", ClassUtils.isPrimitiveOrWrapper(Character.TYPE)); [EOL]     assertTrue("short", ClassUtils.isPrimitiveOrWrapper(Short.TYPE)); [EOL]     assertTrue("int", ClassUtils.isPrimitiveOrWrapper(Integer.TYPE)); [EOL]     assertTrue("long", ClassUtils.isPrimitiveOrWrapper(Long.TYPE)); [EOL]     assertTrue("double", ClassUtils.isPrimitiveOrWrapper(Double.TYPE)); [EOL]     assertTrue("float", ClassUtils.isPrimitiveOrWrapper(Float.TYPE)); [EOL]     assertTrue("Void.TYPE", ClassUtils.isPrimitiveOrWrapper(Void.TYPE)); [EOL]     assertFalse("null", ClassUtils.isPrimitiveOrWrapper(null)); [EOL]     assertFalse("Void.class", ClassUtils.isPrimitiveOrWrapper(Void.class)); [EOL]     assertFalse("String.class", ClassUtils.isPrimitiveOrWrapper(String.class)); [EOL]     assertFalse("this.getClass()", ClassUtils.isPrimitiveOrWrapper(this.getClass())); [EOL] }
@Test [EOL] public void testIsPrimitiveOrWrapper() { [EOL]     assertTrue("Boolean.class", ClassUtils.isPrimitiveOrWrapper(Boolean.class)); [EOL]     assertTrue("Byte.class", ClassUtils.isPrimitiveOrWrapper(Byte.class)); [EOL]     assertTrue("Character.class", ClassUtils.isPrimitiveOrWrapper(Character.class)); [EOL]     assertTrue("Short.class", ClassUtils.isPrimitiveOrWrapper(Short.class)); [EOL]     assertTrue("Integer.class", ClassUtils.isPrimitiveOrWrapper(Integer.class)); [EOL]     assertTrue("Long.class", ClassUtils.isPrimitiveOrWrapper(Long.class)); [EOL]     assertTrue("Double.class", ClassUtils.isPrimitiveOrWrapper(Double.class)); [EOL]     assertTrue("Float.class", ClassUtils.isPrimitiveOrWrapper(Float.class)); [EOL]     assertTrue("boolean", ClassUtils.isPrimitiveOrWrapper(Boolean.TYPE)); [EOL]     assertTrue("byte", ClassUtils.isPrimitiveOrWrapper(Byte.TYPE)); [EOL]     assertTrue("char", ClassUtils.isPrimitiveOrWrapper(Character.TYPE)); [EOL]     assertTrue("short", ClassUtils.isPrimitiveOrWrapper(Short.TYPE)); [EOL]     assertTrue("int", ClassUtils.isPrimitiveOrWrapper(Integer.TYPE)); [EOL]     assertTrue("long", ClassUtils.isPrimitiveOrWrapper(Long.TYPE)); [EOL]     assertTrue("double", ClassUtils.isPrimitiveOrWrapper(Double.TYPE)); [EOL]     assertTrue("float", ClassUtils.isPrimitiveOrWrapper(Float.TYPE)); [EOL]     assertTrue("Void.TYPE", ClassUtils.isPrimitiveOrWrapper(Void.TYPE)); [EOL]     assertFalse("null", ClassUtils.isPrimitiveOrWrapper(null)); [EOL]     assertFalse("Void.class", ClassUtils.isPrimitiveOrWrapper(Void.class)); [EOL]     assertFalse("String.class", ClassUtils.isPrimitiveOrWrapper(String.class)); [EOL]     assertFalse("this.getClass()", ClassUtils.isPrimitiveOrWrapper(this.getClass())); [EOL] }
@Test [EOL] public void testIsPrimitiveOrWrapper() { [EOL]     assertTrue("Boolean.class", ClassUtils.isPrimitiveOrWrapper(Boolean.class)); [EOL]     assertTrue("Byte.class", ClassUtils.isPrimitiveOrWrapper(Byte.class)); [EOL]     assertTrue("Character.class", ClassUtils.isPrimitiveOrWrapper(Character.class)); [EOL]     assertTrue("Short.class", ClassUtils.isPrimitiveOrWrapper(Short.class)); [EOL]     assertTrue("Integer.class", ClassUtils.isPrimitiveOrWrapper(Integer.class)); [EOL]     assertTrue("Long.class", ClassUtils.isPrimitiveOrWrapper(Long.class)); [EOL]     assertTrue("Double.class", ClassUtils.isPrimitiveOrWrapper(Double.class)); [EOL]     assertTrue("Float.class", ClassUtils.isPrimitiveOrWrapper(Float.class)); [EOL]     assertTrue("boolean", ClassUtils.isPrimitiveOrWrapper(Boolean.TYPE)); [EOL]     assertTrue("byte", ClassUtils.isPrimitiveOrWrapper(Byte.TYPE)); [EOL]     assertTrue("char", ClassUtils.isPrimitiveOrWrapper(Character.TYPE)); [EOL]     assertTrue("short", ClassUtils.isPrimitiveOrWrapper(Short.TYPE)); [EOL]     assertTrue("int", ClassUtils.isPrimitiveOrWrapper(Integer.TYPE)); [EOL]     assertTrue("long", ClassUtils.isPrimitiveOrWrapper(Long.TYPE)); [EOL]     assertTrue("double", ClassUtils.isPrimitiveOrWrapper(Double.TYPE)); [EOL]     assertTrue("float", ClassUtils.isPrimitiveOrWrapper(Float.TYPE)); [EOL]     assertTrue("Void.TYPE", ClassUtils.isPrimitiveOrWrapper(Void.TYPE)); [EOL]     assertFalse("null", ClassUtils.isPrimitiveOrWrapper(null)); [EOL]     assertFalse("Void.class", ClassUtils.isPrimitiveOrWrapper(Void.class)); [EOL]     assertFalse("String.class", ClassUtils.isPrimitiveOrWrapper(String.class)); [EOL]     assertFalse("this.getClass()", ClassUtils.isPrimitiveOrWrapper(this.getClass())); [EOL] }
@Test [EOL] public void testIsPrimitiveOrWrapper() { [EOL]     assertTrue("Boolean.class", ClassUtils.isPrimitiveOrWrapper(Boolean.class)); [EOL]     assertTrue("Byte.class", ClassUtils.isPrimitiveOrWrapper(Byte.class)); [EOL]     assertTrue("Character.class", ClassUtils.isPrimitiveOrWrapper(Character.class)); [EOL]     assertTrue("Short.class", ClassUtils.isPrimitiveOrWrapper(Short.class)); [EOL]     assertTrue("Integer.class", ClassUtils.isPrimitiveOrWrapper(Integer.class)); [EOL]     assertTrue("Long.class", ClassUtils.isPrimitiveOrWrapper(Long.class)); [EOL]     assertTrue("Double.class", ClassUtils.isPrimitiveOrWrapper(Double.class)); [EOL]     assertTrue("Float.class", ClassUtils.isPrimitiveOrWrapper(Float.class)); [EOL]     assertTrue("boolean", ClassUtils.isPrimitiveOrWrapper(Boolean.TYPE)); [EOL]     assertTrue("byte", ClassUtils.isPrimitiveOrWrapper(Byte.TYPE)); [EOL]     assertTrue("char", ClassUtils.isPrimitiveOrWrapper(Character.TYPE)); [EOL]     assertTrue("short", ClassUtils.isPrimitiveOrWrapper(Short.TYPE)); [EOL]     assertTrue("int", ClassUtils.isPrimitiveOrWrapper(Integer.TYPE)); [EOL]     assertTrue("long", ClassUtils.isPrimitiveOrWrapper(Long.TYPE)); [EOL]     assertTrue("double", ClassUtils.isPrimitiveOrWrapper(Double.TYPE)); [EOL]     assertTrue("float", ClassUtils.isPrimitiveOrWrapper(Float.TYPE)); [EOL]     assertTrue("Void.TYPE", ClassUtils.isPrimitiveOrWrapper(Void.TYPE)); [EOL]     assertFalse("null", ClassUtils.isPrimitiveOrWrapper(null)); [EOL]     assertFalse("Void.class", ClassUtils.isPrimitiveOrWrapper(Void.class)); [EOL]     assertFalse("String.class", ClassUtils.isPrimitiveOrWrapper(String.class)); [EOL]     assertFalse("this.getClass()", ClassUtils.isPrimitiveOrWrapper(this.getClass())); [EOL] }
@Test [EOL] public void test_isAssignable() throws Exception { [EOL]     assertFalse(ClassUtils.isAssignable((Class<?>) null, null)); [EOL]     assertFalse(ClassUtils.isAssignable(String.class, null)); [EOL]     assertTrue(ClassUtils.isAssignable(null, Object.class)); [EOL]     assertTrue(ClassUtils.isAssignable(null, Integer.class)); [EOL]     assertFalse(ClassUtils.isAssignable(null, Integer.TYPE)); [EOL]     assertTrue(ClassUtils.isAssignable(String.class, Object.class)); [EOL]     assertTrue(ClassUtils.isAssignable(String.class, String.class)); [EOL]     assertFalse(ClassUtils.isAssignable(Object.class, String.class)); [EOL]     final boolean autoboxing = SystemUtils.isJavaVersionAtLeast(JAVA_1_5); [EOL]     assertEquals(autoboxing, ClassUtils.isAssignable(Integer.TYPE, Integer.class)); [EOL]     assertEquals(autoboxing, ClassUtils.isAssignable(Integer.TYPE, Object.class)); [EOL]     assertEquals(autoboxing, ClassUtils.isAssignable(Integer.class, Integer.TYPE)); [EOL]     assertEquals(autoboxing, ClassUtils.isAssignable(Integer.class, Object.class)); [EOL]     assertTrue(ClassUtils.isAssignable(Integer.TYPE, Integer.TYPE)); [EOL]     assertTrue(ClassUtils.isAssignable(Integer.class, Integer.class)); [EOL]     assertEquals(autoboxing, ClassUtils.isAssignable(Boolean.TYPE, Boolean.class)); [EOL]     assertEquals(autoboxing, ClassUtils.isAssignable(Boolean.TYPE, Object.class)); [EOL]     assertEquals(autoboxing, ClassUtils.isAssignable(Boolean.class, Boolean.TYPE)); [EOL]     assertEquals(autoboxing, ClassUtils.isAssignable(Boolean.class, Object.class)); [EOL]     assertTrue(ClassUtils.isAssignable(Boolean.TYPE, Boolean.TYPE)); [EOL]     assertTrue(ClassUtils.isAssignable(Boolean.class, Boolean.class)); [EOL] }
@Test [EOL] public void test_isAssignable() throws Exception { [EOL]     assertFalse(ClassUtils.isAssignable((Class<?>) null, null)); [EOL]     assertFalse(ClassUtils.isAssignable(String.class, null)); [EOL]     assertTrue(ClassUtils.isAssignable(null, Object.class)); [EOL]     assertTrue(ClassUtils.isAssignable(null, Integer.class)); [EOL]     assertFalse(ClassUtils.isAssignable(null, Integer.TYPE)); [EOL]     assertTrue(ClassUtils.isAssignable(String.class, Object.class)); [EOL]     assertTrue(ClassUtils.isAssignable(String.class, String.class)); [EOL]     assertFalse(ClassUtils.isAssignable(Object.class, String.class)); [EOL]     final boolean autoboxing = SystemUtils.isJavaVersionAtLeast(JAVA_1_5); [EOL]     assertEquals(autoboxing, ClassUtils.isAssignable(Integer.TYPE, Integer.class)); [EOL]     assertEquals(autoboxing, ClassUtils.isAssignable(Integer.TYPE, Object.class)); [EOL]     assertEquals(autoboxing, ClassUtils.isAssignable(Integer.class, Integer.TYPE)); [EOL]     assertEquals(autoboxing, ClassUtils.isAssignable(Integer.class, Object.class)); [EOL]     assertTrue(ClassUtils.isAssignable(Integer.TYPE, Integer.TYPE)); [EOL]     assertTrue(ClassUtils.isAssignable(Integer.class, Integer.class)); [EOL]     assertEquals(autoboxing, ClassUtils.isAssignable(Boolean.TYPE, Boolean.class)); [EOL]     assertEquals(autoboxing, ClassUtils.isAssignable(Boolean.TYPE, Object.class)); [EOL]     assertEquals(autoboxing, ClassUtils.isAssignable(Boolean.class, Boolean.TYPE)); [EOL]     assertEquals(autoboxing, ClassUtils.isAssignable(Boolean.class, Object.class)); [EOL]     assertTrue(ClassUtils.isAssignable(Boolean.TYPE, Boolean.TYPE)); [EOL]     assertTrue(ClassUtils.isAssignable(Boolean.class, Boolean.class)); [EOL] }
@Test [EOL] public void test_isAssignable() throws Exception { [EOL]     assertFalse(ClassUtils.isAssignable((Class<?>) null, null)); [EOL]     assertFalse(ClassUtils.isAssignable(String.class, null)); [EOL]     assertTrue(ClassUtils.isAssignable(null, Object.class)); [EOL]     assertTrue(ClassUtils.isAssignable(null, Integer.class)); [EOL]     assertFalse(ClassUtils.isAssignable(null, Integer.TYPE)); [EOL]     assertTrue(ClassUtils.isAssignable(String.class, Object.class)); [EOL]     assertTrue(ClassUtils.isAssignable(String.class, String.class)); [EOL]     assertFalse(ClassUtils.isAssignable(Object.class, String.class)); [EOL]     final boolean autoboxing = SystemUtils.isJavaVersionAtLeast(JAVA_1_5); [EOL]     assertEquals(autoboxing, ClassUtils.isAssignable(Integer.TYPE, Integer.class)); [EOL]     assertEquals(autoboxing, ClassUtils.isAssignable(Integer.TYPE, Object.class)); [EOL]     assertEquals(autoboxing, ClassUtils.isAssignable(Integer.class, Integer.TYPE)); [EOL]     assertEquals(autoboxing, ClassUtils.isAssignable(Integer.class, Object.class)); [EOL]     assertTrue(ClassUtils.isAssignable(Integer.TYPE, Integer.TYPE)); [EOL]     assertTrue(ClassUtils.isAssignable(Integer.class, Integer.class)); [EOL]     assertEquals(autoboxing, ClassUtils.isAssignable(Boolean.TYPE, Boolean.class)); [EOL]     assertEquals(autoboxing, ClassUtils.isAssignable(Boolean.TYPE, Object.class)); [EOL]     assertEquals(autoboxing, ClassUtils.isAssignable(Boolean.class, Boolean.TYPE)); [EOL]     assertEquals(autoboxing, ClassUtils.isAssignable(Boolean.class, Object.class)); [EOL]     assertTrue(ClassUtils.isAssignable(Boolean.TYPE, Boolean.TYPE)); [EOL]     assertTrue(ClassUtils.isAssignable(Boolean.class, Boolean.class)); [EOL] }
@Test [EOL] public void test_isAssignable() throws Exception { [EOL]     assertFalse(ClassUtils.isAssignable((Class<?>) null, null)); [EOL]     assertFalse(ClassUtils.isAssignable(String.class, null)); [EOL]     assertTrue(ClassUtils.isAssignable(null, Object.class)); [EOL]     assertTrue(ClassUtils.isAssignable(null, Integer.class)); [EOL]     assertFalse(ClassUtils.isAssignable(null, Integer.TYPE)); [EOL]     assertTrue(ClassUtils.isAssignable(String.class, Object.class)); [EOL]     assertTrue(ClassUtils.isAssignable(String.class, String.class)); [EOL]     assertFalse(ClassUtils.isAssignable(Object.class, String.class)); [EOL]     final boolean autoboxing = SystemUtils.isJavaVersionAtLeast(JAVA_1_5); [EOL]     assertEquals(autoboxing, ClassUtils.isAssignable(Integer.TYPE, Integer.class)); [EOL]     assertEquals(autoboxing, ClassUtils.isAssignable(Integer.TYPE, Object.class)); [EOL]     assertEquals(autoboxing, ClassUtils.isAssignable(Integer.class, Integer.TYPE)); [EOL]     assertEquals(autoboxing, ClassUtils.isAssignable(Integer.class, Object.class)); [EOL]     assertTrue(ClassUtils.isAssignable(Integer.TYPE, Integer.TYPE)); [EOL]     assertTrue(ClassUtils.isAssignable(Integer.class, Integer.class)); [EOL]     assertEquals(autoboxing, ClassUtils.isAssignable(Boolean.TYPE, Boolean.class)); [EOL]     assertEquals(autoboxing, ClassUtils.isAssignable(Boolean.TYPE, Object.class)); [EOL]     assertEquals(autoboxing, ClassUtils.isAssignable(Boolean.class, Boolean.TYPE)); [EOL]     assertEquals(autoboxing, ClassUtils.isAssignable(Boolean.class, Object.class)); [EOL]     assertTrue(ClassUtils.isAssignable(Boolean.TYPE, Boolean.TYPE)); [EOL]     assertTrue(ClassUtils.isAssignable(Boolean.class, Boolean.class)); [EOL] }
@Test [EOL] public void test_isAssignable() throws Exception { [EOL]     assertFalse(ClassUtils.isAssignable((Class<?>) null, null)); [EOL]     assertFalse(ClassUtils.isAssignable(String.class, null)); [EOL]     assertTrue(ClassUtils.isAssignable(null, Object.class)); [EOL]     assertTrue(ClassUtils.isAssignable(null, Integer.class)); [EOL]     assertFalse(ClassUtils.isAssignable(null, Integer.TYPE)); [EOL]     assertTrue(ClassUtils.isAssignable(String.class, Object.class)); [EOL]     assertTrue(ClassUtils.isAssignable(String.class, String.class)); [EOL]     assertFalse(ClassUtils.isAssignable(Object.class, String.class)); [EOL]     final boolean autoboxing = SystemUtils.isJavaVersionAtLeast(JAVA_1_5); [EOL]     assertEquals(autoboxing, ClassUtils.isAssignable(Integer.TYPE, Integer.class)); [EOL]     assertEquals(autoboxing, ClassUtils.isAssignable(Integer.TYPE, Object.class)); [EOL]     assertEquals(autoboxing, ClassUtils.isAssignable(Integer.class, Integer.TYPE)); [EOL]     assertEquals(autoboxing, ClassUtils.isAssignable(Integer.class, Object.class)); [EOL]     assertTrue(ClassUtils.isAssignable(Integer.TYPE, Integer.TYPE)); [EOL]     assertTrue(ClassUtils.isAssignable(Integer.class, Integer.class)); [EOL]     assertEquals(autoboxing, ClassUtils.isAssignable(Boolean.TYPE, Boolean.class)); [EOL]     assertEquals(autoboxing, ClassUtils.isAssignable(Boolean.TYPE, Object.class)); [EOL]     assertEquals(autoboxing, ClassUtils.isAssignable(Boolean.class, Boolean.TYPE)); [EOL]     assertEquals(autoboxing, ClassUtils.isAssignable(Boolean.class, Object.class)); [EOL]     assertTrue(ClassUtils.isAssignable(Boolean.TYPE, Boolean.TYPE)); [EOL]     assertTrue(ClassUtils.isAssignable(Boolean.class, Boolean.class)); [EOL] }
@Test [EOL] public void test_isAssignable() throws Exception { [EOL]     assertFalse(ClassUtils.isAssignable((Class<?>) null, null)); [EOL]     assertFalse(ClassUtils.isAssignable(String.class, null)); [EOL]     assertTrue(ClassUtils.isAssignable(null, Object.class)); [EOL]     assertTrue(ClassUtils.isAssignable(null, Integer.class)); [EOL]     assertFalse(ClassUtils.isAssignable(null, Integer.TYPE)); [EOL]     assertTrue(ClassUtils.isAssignable(String.class, Object.class)); [EOL]     assertTrue(ClassUtils.isAssignable(String.class, String.class)); [EOL]     assertFalse(ClassUtils.isAssignable(Object.class, String.class)); [EOL]     final boolean autoboxing = SystemUtils.isJavaVersionAtLeast(JAVA_1_5); [EOL]     assertEquals(autoboxing, ClassUtils.isAssignable(Integer.TYPE, Integer.class)); [EOL]     assertEquals(autoboxing, ClassUtils.isAssignable(Integer.TYPE, Object.class)); [EOL]     assertEquals(autoboxing, ClassUtils.isAssignable(Integer.class, Integer.TYPE)); [EOL]     assertEquals(autoboxing, ClassUtils.isAssignable(Integer.class, Object.class)); [EOL]     assertTrue(ClassUtils.isAssignable(Integer.TYPE, Integer.TYPE)); [EOL]     assertTrue(ClassUtils.isAssignable(Integer.class, Integer.class)); [EOL]     assertEquals(autoboxing, ClassUtils.isAssignable(Boolean.TYPE, Boolean.class)); [EOL]     assertEquals(autoboxing, ClassUtils.isAssignable(Boolean.TYPE, Object.class)); [EOL]     assertEquals(autoboxing, ClassUtils.isAssignable(Boolean.class, Boolean.TYPE)); [EOL]     assertEquals(autoboxing, ClassUtils.isAssignable(Boolean.class, Object.class)); [EOL]     assertTrue(ClassUtils.isAssignable(Boolean.TYPE, Boolean.TYPE)); [EOL]     assertTrue(ClassUtils.isAssignable(Boolean.class, Boolean.class)); [EOL] }
@Test [EOL] public void test_isAssignable() throws Exception { [EOL]     assertFalse(ClassUtils.isAssignable((Class<?>) null, null)); [EOL]     assertFalse(ClassUtils.isAssignable(String.class, null)); [EOL]     assertTrue(ClassUtils.isAssignable(null, Object.class)); [EOL]     assertTrue(ClassUtils.isAssignable(null, Integer.class)); [EOL]     assertFalse(ClassUtils.isAssignable(null, Integer.TYPE)); [EOL]     assertTrue(ClassUtils.isAssignable(String.class, Object.class)); [EOL]     assertTrue(ClassUtils.isAssignable(String.class, String.class)); [EOL]     assertFalse(ClassUtils.isAssignable(Object.class, String.class)); [EOL]     final boolean autoboxing = SystemUtils.isJavaVersionAtLeast(JAVA_1_5); [EOL]     assertEquals(autoboxing, ClassUtils.isAssignable(Integer.TYPE, Integer.class)); [EOL]     assertEquals(autoboxing, ClassUtils.isAssignable(Integer.TYPE, Object.class)); [EOL]     assertEquals(autoboxing, ClassUtils.isAssignable(Integer.class, Integer.TYPE)); [EOL]     assertEquals(autoboxing, ClassUtils.isAssignable(Integer.class, Object.class)); [EOL]     assertTrue(ClassUtils.isAssignable(Integer.TYPE, Integer.TYPE)); [EOL]     assertTrue(ClassUtils.isAssignable(Integer.class, Integer.class)); [EOL]     assertEquals(autoboxing, ClassUtils.isAssignable(Boolean.TYPE, Boolean.class)); [EOL]     assertEquals(autoboxing, ClassUtils.isAssignable(Boolean.TYPE, Object.class)); [EOL]     assertEquals(autoboxing, ClassUtils.isAssignable(Boolean.class, Boolean.TYPE)); [EOL]     assertEquals(autoboxing, ClassUtils.isAssignable(Boolean.class, Object.class)); [EOL]     assertTrue(ClassUtils.isAssignable(Boolean.TYPE, Boolean.TYPE)); [EOL]     assertTrue(ClassUtils.isAssignable(Boolean.class, Boolean.class)); [EOL] }
@Test [EOL] public void test_isAssignable() throws Exception { [EOL]     assertFalse(ClassUtils.isAssignable((Class<?>) null, null)); [EOL]     assertFalse(ClassUtils.isAssignable(String.class, null)); [EOL]     assertTrue(ClassUtils.isAssignable(null, Object.class)); [EOL]     assertTrue(ClassUtils.isAssignable(null, Integer.class)); [EOL]     assertFalse(ClassUtils.isAssignable(null, Integer.TYPE)); [EOL]     assertTrue(ClassUtils.isAssignable(String.class, Object.class)); [EOL]     assertTrue(ClassUtils.isAssignable(String.class, String.class)); [EOL]     assertFalse(ClassUtils.isAssignable(Object.class, String.class)); [EOL]     final boolean autoboxing = SystemUtils.isJavaVersionAtLeast(JAVA_1_5); [EOL]     assertEquals(autoboxing, ClassUtils.isAssignable(Integer.TYPE, Integer.class)); [EOL]     assertEquals(autoboxing, ClassUtils.isAssignable(Integer.TYPE, Object.class)); [EOL]     assertEquals(autoboxing, ClassUtils.isAssignable(Integer.class, Integer.TYPE)); [EOL]     assertEquals(autoboxing, ClassUtils.isAssignable(Integer.class, Object.class)); [EOL]     assertTrue(ClassUtils.isAssignable(Integer.TYPE, Integer.TYPE)); [EOL]     assertTrue(ClassUtils.isAssignable(Integer.class, Integer.class)); [EOL]     assertEquals(autoboxing, ClassUtils.isAssignable(Boolean.TYPE, Boolean.class)); [EOL]     assertEquals(autoboxing, ClassUtils.isAssignable(Boolean.TYPE, Object.class)); [EOL]     assertEquals(autoboxing, ClassUtils.isAssignable(Boolean.class, Boolean.TYPE)); [EOL]     assertEquals(autoboxing, ClassUtils.isAssignable(Boolean.class, Object.class)); [EOL]     assertTrue(ClassUtils.isAssignable(Boolean.TYPE, Boolean.TYPE)); [EOL]     assertTrue(ClassUtils.isAssignable(Boolean.class, Boolean.class)); [EOL] }
@Test [EOL] public void test_isAssignable() throws Exception { [EOL]     assertFalse(ClassUtils.isAssignable((Class<?>) null, null)); [EOL]     assertFalse(ClassUtils.isAssignable(String.class, null)); [EOL]     assertTrue(ClassUtils.isAssignable(null, Object.class)); [EOL]     assertTrue(ClassUtils.isAssignable(null, Integer.class)); [EOL]     assertFalse(ClassUtils.isAssignable(null, Integer.TYPE)); [EOL]     assertTrue(ClassUtils.isAssignable(String.class, Object.class)); [EOL]     assertTrue(ClassUtils.isAssignable(String.class, String.class)); [EOL]     assertFalse(ClassUtils.isAssignable(Object.class, String.class)); [EOL]     final boolean autoboxing = SystemUtils.isJavaVersionAtLeast(JAVA_1_5); [EOL]     assertEquals(autoboxing, ClassUtils.isAssignable(Integer.TYPE, Integer.class)); [EOL]     assertEquals(autoboxing, ClassUtils.isAssignable(Integer.TYPE, Object.class)); [EOL]     assertEquals(autoboxing, ClassUtils.isAssignable(Integer.class, Integer.TYPE)); [EOL]     assertEquals(autoboxing, ClassUtils.isAssignable(Integer.class, Object.class)); [EOL]     assertTrue(ClassUtils.isAssignable(Integer.TYPE, Integer.TYPE)); [EOL]     assertTrue(ClassUtils.isAssignable(Integer.class, Integer.class)); [EOL]     assertEquals(autoboxing, ClassUtils.isAssignable(Boolean.TYPE, Boolean.class)); [EOL]     assertEquals(autoboxing, ClassUtils.isAssignable(Boolean.TYPE, Object.class)); [EOL]     assertEquals(autoboxing, ClassUtils.isAssignable(Boolean.class, Boolean.TYPE)); [EOL]     assertEquals(autoboxing, ClassUtils.isAssignable(Boolean.class, Object.class)); [EOL]     assertTrue(ClassUtils.isAssignable(Boolean.TYPE, Boolean.TYPE)); [EOL]     assertTrue(ClassUtils.isAssignable(Boolean.class, Boolean.class)); [EOL] }
@Test [EOL] public void testToClass_object() { [EOL]     assertNull(ClassUtils.toClass((Object[]) null)); [EOL]     assertTrue("empty -> empty", Arrays.equals(ArrayUtils.EMPTY_CLASS_ARRAY, ClassUtils.toClass())); [EOL]     final Class<?>[] castNull = ClassUtils.toClass((Object) null); [EOL]     assertTrue("(Object)null -> [null]", Arrays.equals(new Object[] { null }, castNull)); [EOL]     assertSame(ArrayUtils.EMPTY_CLASS_ARRAY, ClassUtils.toClass(ArrayUtils.EMPTY_OBJECT_ARRAY)); [EOL]     assertTrue(Arrays.equals(new Class[] { String.class, Integer.class, Double.class }, ClassUtils.toClass(new Object[] { "Test", Integer.valueOf(1), Double.valueOf(99d) }))); [EOL]     assertTrue(Arrays.equals(new Class[] { String.class, null, Double.class }, ClassUtils.toClass(new Object[] { "Test", null, Double.valueOf(99d) }))); [EOL] }
@Test [EOL] public void testToClass_object() { [EOL]     assertNull(ClassUtils.toClass((Object[]) null)); [EOL]     assertTrue("empty -> empty", Arrays.equals(ArrayUtils.EMPTY_CLASS_ARRAY, ClassUtils.toClass())); [EOL]     final Class<?>[] castNull = ClassUtils.toClass((Object) null); [EOL]     assertTrue("(Object)null -> [null]", Arrays.equals(new Object[] { null }, castNull)); [EOL]     assertSame(ArrayUtils.EMPTY_CLASS_ARRAY, ClassUtils.toClass(ArrayUtils.EMPTY_OBJECT_ARRAY)); [EOL]     assertTrue(Arrays.equals(new Class[] { String.class, Integer.class, Double.class }, ClassUtils.toClass(new Object[] { "Test", Integer.valueOf(1), Double.valueOf(99d) }))); [EOL]     assertTrue(Arrays.equals(new Class[] { String.class, null, Double.class }, ClassUtils.toClass(new Object[] { "Test", null, Double.valueOf(99d) }))); [EOL] }
@Test [EOL] public void testToClass_object() { [EOL]     assertNull(ClassUtils.toClass((Object[]) null)); [EOL]     assertTrue("empty -> empty", Arrays.equals(ArrayUtils.EMPTY_CLASS_ARRAY, ClassUtils.toClass())); [EOL]     final Class<?>[] castNull = ClassUtils.toClass((Object) null); [EOL]     assertTrue("(Object)null -> [null]", Arrays.equals(new Object[] { null }, castNull)); [EOL]     assertSame(ArrayUtils.EMPTY_CLASS_ARRAY, ClassUtils.toClass(ArrayUtils.EMPTY_OBJECT_ARRAY)); [EOL]     assertTrue(Arrays.equals(new Class[] { String.class, Integer.class, Double.class }, ClassUtils.toClass(new Object[] { "Test", Integer.valueOf(1), Double.valueOf(99d) }))); [EOL]     assertTrue(Arrays.equals(new Class[] { String.class, null, Double.class }, ClassUtils.toClass(new Object[] { "Test", null, Double.valueOf(99d) }))); [EOL] }
@Test [EOL] public void testToClass_object() { [EOL]     assertNull(ClassUtils.toClass((Object[]) null)); [EOL]     assertTrue("empty -> empty", Arrays.equals(ArrayUtils.EMPTY_CLASS_ARRAY, ClassUtils.toClass())); [EOL]     final Class<?>[] castNull = ClassUtils.toClass((Object) null); [EOL]     assertTrue("(Object)null -> [null]", Arrays.equals(new Object[] { null }, castNull)); [EOL]     assertSame(ArrayUtils.EMPTY_CLASS_ARRAY, ClassUtils.toClass(ArrayUtils.EMPTY_OBJECT_ARRAY)); [EOL]     assertTrue(Arrays.equals(new Class[] { String.class, Integer.class, Double.class }, ClassUtils.toClass(new Object[] { "Test", Integer.valueOf(1), Double.valueOf(99d) }))); [EOL]     assertTrue(Arrays.equals(new Class[] { String.class, null, Double.class }, ClassUtils.toClass(new Object[] { "Test", null, Double.valueOf(99d) }))); [EOL] }
@Test [EOL] public void test_getShortCanonicalName_String() { [EOL]     assertEquals("ClassUtils", ClassUtils.getShortCanonicalName("org.apache.commons.lang3.ClassUtils")); [EOL]     assertEquals("ClassUtils[]", ClassUtils.getShortCanonicalName("[Lorg.apache.commons.lang3.ClassUtils;")); [EOL]     assertEquals("ClassUtils[][]", ClassUtils.getShortCanonicalName("[[Lorg.apache.commons.lang3.ClassUtils;")); [EOL]     assertEquals("ClassUtils[]", ClassUtils.getShortCanonicalName("org.apache.commons.lang3.ClassUtils[]")); [EOL]     assertEquals("ClassUtils[][]", ClassUtils.getShortCanonicalName("org.apache.commons.lang3.ClassUtils[][]")); [EOL]     assertEquals("int[]", ClassUtils.getShortCanonicalName("[I")); [EOL]     assertEquals("int[][]", ClassUtils.getShortCanonicalName("[[I")); [EOL]     assertEquals("int[]", ClassUtils.getShortCanonicalName("int[]")); [EOL]     assertEquals("int[][]", ClassUtils.getShortCanonicalName("int[][]")); [EOL]     assertEquals("ClassUtilsTest.6", ClassUtils.getShortCanonicalName("org.apache.commons.lang3.ClassUtilsTest$6")); [EOL]     assertEquals("ClassUtilsTest.5Named", ClassUtils.getShortCanonicalName("org.apache.commons.lang3.ClassUtilsTest$5Named")); [EOL]     assertEquals("ClassUtilsTest.Inner", ClassUtils.getShortCanonicalName("org.apache.commons.lang3.ClassUtilsTest$Inner")); [EOL] }
@Test [EOL] public void test_getShortCanonicalName_String() { [EOL]     assertEquals("ClassUtils", ClassUtils.getShortCanonicalName("org.apache.commons.lang3.ClassUtils")); [EOL]     assertEquals("ClassUtils[]", ClassUtils.getShortCanonicalName("[Lorg.apache.commons.lang3.ClassUtils;")); [EOL]     assertEquals("ClassUtils[][]", ClassUtils.getShortCanonicalName("[[Lorg.apache.commons.lang3.ClassUtils;")); [EOL]     assertEquals("ClassUtils[]", ClassUtils.getShortCanonicalName("org.apache.commons.lang3.ClassUtils[]")); [EOL]     assertEquals("ClassUtils[][]", ClassUtils.getShortCanonicalName("org.apache.commons.lang3.ClassUtils[][]")); [EOL]     assertEquals("int[]", ClassUtils.getShortCanonicalName("[I")); [EOL]     assertEquals("int[][]", ClassUtils.getShortCanonicalName("[[I")); [EOL]     assertEquals("int[]", ClassUtils.getShortCanonicalName("int[]")); [EOL]     assertEquals("int[][]", ClassUtils.getShortCanonicalName("int[][]")); [EOL]     assertEquals("ClassUtilsTest.6", ClassUtils.getShortCanonicalName("org.apache.commons.lang3.ClassUtilsTest$6")); [EOL]     assertEquals("ClassUtilsTest.5Named", ClassUtils.getShortCanonicalName("org.apache.commons.lang3.ClassUtilsTest$5Named")); [EOL]     assertEquals("ClassUtilsTest.Inner", ClassUtils.getShortCanonicalName("org.apache.commons.lang3.ClassUtilsTest$Inner")); [EOL] }
@Test [EOL] public void test_getShortCanonicalName_String() { [EOL]     assertEquals("ClassUtils", ClassUtils.getShortCanonicalName("org.apache.commons.lang3.ClassUtils")); [EOL]     assertEquals("ClassUtils[]", ClassUtils.getShortCanonicalName("[Lorg.apache.commons.lang3.ClassUtils;")); [EOL]     assertEquals("ClassUtils[][]", ClassUtils.getShortCanonicalName("[[Lorg.apache.commons.lang3.ClassUtils;")); [EOL]     assertEquals("ClassUtils[]", ClassUtils.getShortCanonicalName("org.apache.commons.lang3.ClassUtils[]")); [EOL]     assertEquals("ClassUtils[][]", ClassUtils.getShortCanonicalName("org.apache.commons.lang3.ClassUtils[][]")); [EOL]     assertEquals("int[]", ClassUtils.getShortCanonicalName("[I")); [EOL]     assertEquals("int[][]", ClassUtils.getShortCanonicalName("[[I")); [EOL]     assertEquals("int[]", ClassUtils.getShortCanonicalName("int[]")); [EOL]     assertEquals("int[][]", ClassUtils.getShortCanonicalName("int[][]")); [EOL]     assertEquals("ClassUtilsTest.6", ClassUtils.getShortCanonicalName("org.apache.commons.lang3.ClassUtilsTest$6")); [EOL]     assertEquals("ClassUtilsTest.5Named", ClassUtils.getShortCanonicalName("org.apache.commons.lang3.ClassUtilsTest$5Named")); [EOL]     assertEquals("ClassUtilsTest.Inner", ClassUtils.getShortCanonicalName("org.apache.commons.lang3.ClassUtilsTest$Inner")); [EOL] }
@Test [EOL] public void test_getShortCanonicalName_String() { [EOL]     assertEquals("ClassUtils", ClassUtils.getShortCanonicalName("org.apache.commons.lang3.ClassUtils")); [EOL]     assertEquals("ClassUtils[]", ClassUtils.getShortCanonicalName("[Lorg.apache.commons.lang3.ClassUtils;")); [EOL]     assertEquals("ClassUtils[][]", ClassUtils.getShortCanonicalName("[[Lorg.apache.commons.lang3.ClassUtils;")); [EOL]     assertEquals("ClassUtils[]", ClassUtils.getShortCanonicalName("org.apache.commons.lang3.ClassUtils[]")); [EOL]     assertEquals("ClassUtils[][]", ClassUtils.getShortCanonicalName("org.apache.commons.lang3.ClassUtils[][]")); [EOL]     assertEquals("int[]", ClassUtils.getShortCanonicalName("[I")); [EOL]     assertEquals("int[][]", ClassUtils.getShortCanonicalName("[[I")); [EOL]     assertEquals("int[]", ClassUtils.getShortCanonicalName("int[]")); [EOL]     assertEquals("int[][]", ClassUtils.getShortCanonicalName("int[][]")); [EOL]     assertEquals("ClassUtilsTest.6", ClassUtils.getShortCanonicalName("org.apache.commons.lang3.ClassUtilsTest$6")); [EOL]     assertEquals("ClassUtilsTest.5Named", ClassUtils.getShortCanonicalName("org.apache.commons.lang3.ClassUtilsTest$5Named")); [EOL]     assertEquals("ClassUtilsTest.Inner", ClassUtils.getShortCanonicalName("org.apache.commons.lang3.ClassUtilsTest$Inner")); [EOL] }
@Test [EOL] public void test_getShortCanonicalName_String() { [EOL]     assertEquals("ClassUtils", ClassUtils.getShortCanonicalName("org.apache.commons.lang3.ClassUtils")); [EOL]     assertEquals("ClassUtils[]", ClassUtils.getShortCanonicalName("[Lorg.apache.commons.lang3.ClassUtils;")); [EOL]     assertEquals("ClassUtils[][]", ClassUtils.getShortCanonicalName("[[Lorg.apache.commons.lang3.ClassUtils;")); [EOL]     assertEquals("ClassUtils[]", ClassUtils.getShortCanonicalName("org.apache.commons.lang3.ClassUtils[]")); [EOL]     assertEquals("ClassUtils[][]", ClassUtils.getShortCanonicalName("org.apache.commons.lang3.ClassUtils[][]")); [EOL]     assertEquals("int[]", ClassUtils.getShortCanonicalName("[I")); [EOL]     assertEquals("int[][]", ClassUtils.getShortCanonicalName("[[I")); [EOL]     assertEquals("int[]", ClassUtils.getShortCanonicalName("int[]")); [EOL]     assertEquals("int[][]", ClassUtils.getShortCanonicalName("int[][]")); [EOL]     assertEquals("ClassUtilsTest.6", ClassUtils.getShortCanonicalName("org.apache.commons.lang3.ClassUtilsTest$6")); [EOL]     assertEquals("ClassUtilsTest.5Named", ClassUtils.getShortCanonicalName("org.apache.commons.lang3.ClassUtilsTest$5Named")); [EOL]     assertEquals("ClassUtilsTest.Inner", ClassUtils.getShortCanonicalName("org.apache.commons.lang3.ClassUtilsTest$Inner")); [EOL] }
@Test [EOL] public void test_getShortCanonicalName_String() { [EOL]     assertEquals("ClassUtils", ClassUtils.getShortCanonicalName("org.apache.commons.lang3.ClassUtils")); [EOL]     assertEquals("ClassUtils[]", ClassUtils.getShortCanonicalName("[Lorg.apache.commons.lang3.ClassUtils;")); [EOL]     assertEquals("ClassUtils[][]", ClassUtils.getShortCanonicalName("[[Lorg.apache.commons.lang3.ClassUtils;")); [EOL]     assertEquals("ClassUtils[]", ClassUtils.getShortCanonicalName("org.apache.commons.lang3.ClassUtils[]")); [EOL]     assertEquals("ClassUtils[][]", ClassUtils.getShortCanonicalName("org.apache.commons.lang3.ClassUtils[][]")); [EOL]     assertEquals("int[]", ClassUtils.getShortCanonicalName("[I")); [EOL]     assertEquals("int[][]", ClassUtils.getShortCanonicalName("[[I")); [EOL]     assertEquals("int[]", ClassUtils.getShortCanonicalName("int[]")); [EOL]     assertEquals("int[][]", ClassUtils.getShortCanonicalName("int[][]")); [EOL]     assertEquals("ClassUtilsTest.6", ClassUtils.getShortCanonicalName("org.apache.commons.lang3.ClassUtilsTest$6")); [EOL]     assertEquals("ClassUtilsTest.5Named", ClassUtils.getShortCanonicalName("org.apache.commons.lang3.ClassUtilsTest$5Named")); [EOL]     assertEquals("ClassUtilsTest.Inner", ClassUtils.getShortCanonicalName("org.apache.commons.lang3.ClassUtilsTest$Inner")); [EOL] }
@Test [EOL] public void test_getShortCanonicalName_String() { [EOL]     assertEquals("ClassUtils", ClassUtils.getShortCanonicalName("org.apache.commons.lang3.ClassUtils")); [EOL]     assertEquals("ClassUtils[]", ClassUtils.getShortCanonicalName("[Lorg.apache.commons.lang3.ClassUtils;")); [EOL]     assertEquals("ClassUtils[][]", ClassUtils.getShortCanonicalName("[[Lorg.apache.commons.lang3.ClassUtils;")); [EOL]     assertEquals("ClassUtils[]", ClassUtils.getShortCanonicalName("org.apache.commons.lang3.ClassUtils[]")); [EOL]     assertEquals("ClassUtils[][]", ClassUtils.getShortCanonicalName("org.apache.commons.lang3.ClassUtils[][]")); [EOL]     assertEquals("int[]", ClassUtils.getShortCanonicalName("[I")); [EOL]     assertEquals("int[][]", ClassUtils.getShortCanonicalName("[[I")); [EOL]     assertEquals("int[]", ClassUtils.getShortCanonicalName("int[]")); [EOL]     assertEquals("int[][]", ClassUtils.getShortCanonicalName("int[][]")); [EOL]     assertEquals("ClassUtilsTest.6", ClassUtils.getShortCanonicalName("org.apache.commons.lang3.ClassUtilsTest$6")); [EOL]     assertEquals("ClassUtilsTest.5Named", ClassUtils.getShortCanonicalName("org.apache.commons.lang3.ClassUtilsTest$5Named")); [EOL]     assertEquals("ClassUtilsTest.Inner", ClassUtils.getShortCanonicalName("org.apache.commons.lang3.ClassUtilsTest$Inner")); [EOL] }
@Test [EOL] public void testSetExternalExecutorAfterStart() throws ConcurrentException { [EOL]     final BackgroundInitializerTestImpl init = new BackgroundInitializerTestImpl(); [EOL]     init.start(); [EOL]     try { [EOL]         init.setExternalExecutor(Executors.newSingleThreadExecutor()); [EOL]         fail("Could set executor after start()!"); [EOL]     } catch (final IllegalStateException istex) { [EOL]         init.get(); [EOL]     } [EOL] }
@Test [EOL] public void testSetExternalExecutorAfterStart() throws ConcurrentException { [EOL]     final BackgroundInitializerTestImpl init = new BackgroundInitializerTestImpl(); [EOL]     init.start(); [EOL]     try { [EOL]         init.setExternalExecutor(Executors.newSingleThreadExecutor()); [EOL]         fail("Could set executor after start()!"); [EOL]     } catch (final IllegalStateException istex) { [EOL]         init.get(); [EOL]     } [EOL] }
@Test [EOL] public void testISO8859_1_ESCAPE() { [EOL]     final Set<String> col0 = new HashSet<String>(); [EOL]     final Set<String> col1 = new HashSet<String>(); [EOL]     final String[][] sa = EntityArrays.ISO8859_1_ESCAPE(); [EOL]     boolean success = true; [EOL]     for (int i = 0; i < sa.length; i++) { [EOL]         final boolean add0 = col0.add(sa[i][0]); [EOL]         final boolean add1 = col1.add(sa[i][1]); [EOL]         if (!add0) { [EOL]             success = false; [EOL]             System.out.println("Already added entry 0: " + i + " " + sa[i][0] + " " + sa[i][1]); [EOL]         } [EOL]         if (!add1) { [EOL]             success = false; [EOL]             System.out.println("Already added entry 1: " + i + " " + sa[i][0] + " " + sa[i][1]); [EOL]         } [EOL]     } [EOL]     assertTrue("One or more errors detected", success); [EOL] }
@Test [EOL] public void testEscapeSurrogatePairs() throws Exception { [EOL]     assertEquals("\uD83D\uDE30", StringEscapeUtils.escapeCsv("\uD83D\uDE30")); [EOL]     assertEquals("\uD800\uDC00", StringEscapeUtils.escapeCsv("\uD800\uDC00")); [EOL]     assertEquals("\uD834\uDD1E", StringEscapeUtils.escapeCsv("\uD834\uDD1E")); [EOL]     assertEquals("\uDBFF\uDFFD", StringEscapeUtils.escapeCsv("\uDBFF\uDFFD")); [EOL]     assertEquals("\uDBFF\uDFFD", StringEscapeUtils.escapeHtml3("\uDBFF\uDFFD")); [EOL]     assertEquals("\uDBFF\uDFFD", StringEscapeUtils.escapeHtml4("\uDBFF\uDFFD")); [EOL]     assertEquals("\uDBFF\uDFFD", StringEscapeUtils.escapeXml("\uDBFF\uDFFD")); [EOL] }
@Test [EOL] public void testEscapeSurrogatePairs() throws Exception { [EOL]     assertEquals("\uD83D\uDE30", StringEscapeUtils.escapeCsv("\uD83D\uDE30")); [EOL]     assertEquals("\uD800\uDC00", StringEscapeUtils.escapeCsv("\uD800\uDC00")); [EOL]     assertEquals("\uD834\uDD1E", StringEscapeUtils.escapeCsv("\uD834\uDD1E")); [EOL]     assertEquals("\uDBFF\uDFFD", StringEscapeUtils.escapeCsv("\uDBFF\uDFFD")); [EOL]     assertEquals("\uDBFF\uDFFD", StringEscapeUtils.escapeHtml3("\uDBFF\uDFFD")); [EOL]     assertEquals("\uDBFF\uDFFD", StringEscapeUtils.escapeHtml4("\uDBFF\uDFFD")); [EOL]     assertEquals("\uDBFF\uDFFD", StringEscapeUtils.escapeXml("\uDBFF\uDFFD")); [EOL] }
@Test [EOL] public void testEscapeSurrogatePairs() throws Exception { [EOL]     assertEquals("\uD83D\uDE30", StringEscapeUtils.escapeCsv("\uD83D\uDE30")); [EOL]     assertEquals("\uD800\uDC00", StringEscapeUtils.escapeCsv("\uD800\uDC00")); [EOL]     assertEquals("\uD834\uDD1E", StringEscapeUtils.escapeCsv("\uD834\uDD1E")); [EOL]     assertEquals("\uDBFF\uDFFD", StringEscapeUtils.escapeCsv("\uDBFF\uDFFD")); [EOL]     assertEquals("\uDBFF\uDFFD", StringEscapeUtils.escapeHtml3("\uDBFF\uDFFD")); [EOL]     assertEquals("\uDBFF\uDFFD", StringEscapeUtils.escapeHtml4("\uDBFF\uDFFD")); [EOL]     assertEquals("\uDBFF\uDFFD", StringEscapeUtils.escapeXml("\uDBFF\uDFFD")); [EOL] }
@Test [EOL] public void testEscapeSurrogatePairs() throws Exception { [EOL]     assertEquals("\uD83D\uDE30", StringEscapeUtils.escapeCsv("\uD83D\uDE30")); [EOL]     assertEquals("\uD800\uDC00", StringEscapeUtils.escapeCsv("\uD800\uDC00")); [EOL]     assertEquals("\uD834\uDD1E", StringEscapeUtils.escapeCsv("\uD834\uDD1E")); [EOL]     assertEquals("\uDBFF\uDFFD", StringEscapeUtils.escapeCsv("\uDBFF\uDFFD")); [EOL]     assertEquals("\uDBFF\uDFFD", StringEscapeUtils.escapeHtml3("\uDBFF\uDFFD")); [EOL]     assertEquals("\uDBFF\uDFFD", StringEscapeUtils.escapeHtml4("\uDBFF\uDFFD")); [EOL]     assertEquals("\uDBFF\uDFFD", StringEscapeUtils.escapeXml("\uDBFF\uDFFD")); [EOL] }
@Test [EOL] public void testEscapeSurrogatePairs() throws Exception { [EOL]     assertEquals("\uD83D\uDE30", StringEscapeUtils.escapeCsv("\uD83D\uDE30")); [EOL]     assertEquals("\uD800\uDC00", StringEscapeUtils.escapeCsv("\uD800\uDC00")); [EOL]     assertEquals("\uD834\uDD1E", StringEscapeUtils.escapeCsv("\uD834\uDD1E")); [EOL]     assertEquals("\uDBFF\uDFFD", StringEscapeUtils.escapeCsv("\uDBFF\uDFFD")); [EOL]     assertEquals("\uDBFF\uDFFD", StringEscapeUtils.escapeHtml3("\uDBFF\uDFFD")); [EOL]     assertEquals("\uDBFF\uDFFD", StringEscapeUtils.escapeHtml4("\uDBFF\uDFFD")); [EOL]     assertEquals("\uDBFF\uDFFD", StringEscapeUtils.escapeXml("\uDBFF\uDFFD")); [EOL] }
@Test [EOL] public void testEscapeSurrogatePairs() throws Exception { [EOL]     assertEquals("\uD83D\uDE30", StringEscapeUtils.escapeCsv("\uD83D\uDE30")); [EOL]     assertEquals("\uD800\uDC00", StringEscapeUtils.escapeCsv("\uD800\uDC00")); [EOL]     assertEquals("\uD834\uDD1E", StringEscapeUtils.escapeCsv("\uD834\uDD1E")); [EOL]     assertEquals("\uDBFF\uDFFD", StringEscapeUtils.escapeCsv("\uDBFF\uDFFD")); [EOL]     assertEquals("\uDBFF\uDFFD", StringEscapeUtils.escapeHtml3("\uDBFF\uDFFD")); [EOL]     assertEquals("\uDBFF\uDFFD", StringEscapeUtils.escapeHtml4("\uDBFF\uDFFD")); [EOL]     assertEquals("\uDBFF\uDFFD", StringEscapeUtils.escapeXml("\uDBFF\uDFFD")); [EOL] }
@Test [EOL] public void testEscapeSurrogatePairs() throws Exception { [EOL]     assertEquals("\uD83D\uDE30", StringEscapeUtils.escapeCsv("\uD83D\uDE30")); [EOL]     assertEquals("\uD800\uDC00", StringEscapeUtils.escapeCsv("\uD800\uDC00")); [EOL]     assertEquals("\uD834\uDD1E", StringEscapeUtils.escapeCsv("\uD834\uDD1E")); [EOL]     assertEquals("\uDBFF\uDFFD", StringEscapeUtils.escapeCsv("\uDBFF\uDFFD")); [EOL]     assertEquals("\uDBFF\uDFFD", StringEscapeUtils.escapeHtml3("\uDBFF\uDFFD")); [EOL]     assertEquals("\uDBFF\uDFFD", StringEscapeUtils.escapeHtml4("\uDBFF\uDFFD")); [EOL]     assertEquals("\uDBFF\uDFFD", StringEscapeUtils.escapeXml("\uDBFF\uDFFD")); [EOL] }
@Test [EOL] public void testEscapeSurrogatePairs() throws Exception { [EOL]     assertEquals("\uD83D\uDE30", StringEscapeUtils.escapeCsv("\uD83D\uDE30")); [EOL]     assertEquals("\uD800\uDC00", StringEscapeUtils.escapeCsv("\uD800\uDC00")); [EOL]     assertEquals("\uD834\uDD1E", StringEscapeUtils.escapeCsv("\uD834\uDD1E")); [EOL]     assertEquals("\uDBFF\uDFFD", StringEscapeUtils.escapeCsv("\uDBFF\uDFFD")); [EOL]     assertEquals("\uDBFF\uDFFD", StringEscapeUtils.escapeHtml3("\uDBFF\uDFFD")); [EOL]     assertEquals("\uDBFF\uDFFD", StringEscapeUtils.escapeHtml4("\uDBFF\uDFFD")); [EOL]     assertEquals("\uDBFF\uDFFD", StringEscapeUtils.escapeXml("\uDBFF\uDFFD")); [EOL] }
@Test [EOL] public void testEscapeSurrogatePairs() throws Exception { [EOL]     assertEquals("\uD83D\uDE30", StringEscapeUtils.escapeCsv("\uD83D\uDE30")); [EOL]     assertEquals("\uD800\uDC00", StringEscapeUtils.escapeCsv("\uD800\uDC00")); [EOL]     assertEquals("\uD834\uDD1E", StringEscapeUtils.escapeCsv("\uD834\uDD1E")); [EOL]     assertEquals("\uDBFF\uDFFD", StringEscapeUtils.escapeCsv("\uDBFF\uDFFD")); [EOL]     assertEquals("\uDBFF\uDFFD", StringEscapeUtils.escapeHtml3("\uDBFF\uDFFD")); [EOL]     assertEquals("\uDBFF\uDFFD", StringEscapeUtils.escapeHtml4("\uDBFF\uDFFD")); [EOL]     assertEquals("\uDBFF\uDFFD", StringEscapeUtils.escapeXml("\uDBFF\uDFFD")); [EOL] }
@Test [EOL] public void testBetween() { [EOL]     final NumericEntityEscaper nee = NumericEntityEscaper.between('F', 'L'); [EOL]     final String input = "ADFGZ"; [EOL]     final String result = nee.translate(input); [EOL]     assertEquals("Failed to escape numeric entities via the between method", "AD&#70;&#71;Z", result); [EOL] }
@Test [EOL] public void testBetween() { [EOL]     final NumericEntityEscaper nee = NumericEntityEscaper.between('F', 'L'); [EOL]     final String input = "ADFGZ"; [EOL]     final String result = nee.translate(input); [EOL]     assertEquals("Failed to escape numeric entities via the between method", "AD&#70;&#71;Z", result); [EOL] }
@Test [EOL] public void testBetween() { [EOL]     final NumericEntityEscaper nee = NumericEntityEscaper.between('F', 'L'); [EOL]     final String input = "ADFGZ"; [EOL]     final String result = nee.translate(input); [EOL]     assertEquals("Failed to escape numeric entities via the between method", "AD&#70;&#71;Z", result); [EOL] }
@Test [EOL] public void testBetween() { [EOL]     final NumericEntityEscaper nee = NumericEntityEscaper.between('F', 'L'); [EOL]     final String input = "ADFGZ"; [EOL]     final String result = nee.translate(input); [EOL]     assertEquals("Failed to escape numeric entities via the between method", "AD&#70;&#71;Z", result); [EOL] }
@Test [EOL] public void testBetween() { [EOL]     final NumericEntityEscaper nee = NumericEntityEscaper.between('F', 'L'); [EOL]     final String input = "ADFGZ"; [EOL]     final String result = nee.translate(input); [EOL]     assertEquals("Failed to escape numeric entities via the between method", "AD&#70;&#71;Z", result); [EOL] }
@Test [EOL] public void testBetween() { [EOL]     final NumericEntityEscaper nee = NumericEntityEscaper.between('F', 'L'); [EOL]     final String input = "ADFGZ"; [EOL]     final String result = nee.translate(input); [EOL]     assertEquals("Failed to escape numeric entities via the between method", "AD&#70;&#71;Z", result); [EOL] }
@Test [EOL] public void testBetween() { [EOL]     final NumericEntityEscaper nee = NumericEntityEscaper.between('F', 'L'); [EOL]     final String input = "ADFGZ"; [EOL]     final String result = nee.translate(input); [EOL]     assertEquals("Failed to escape numeric entities via the between method", "AD&#70;&#71;Z", result); [EOL] }
@Test [EOL] public void testBetween() { [EOL]     final NumericEntityEscaper nee = NumericEntityEscaper.between('F', 'L'); [EOL]     final String input = "ADFGZ"; [EOL]     final String result = nee.translate(input); [EOL]     assertEquals("Failed to escape numeric entities via the between method", "AD&#70;&#71;Z", result); [EOL] }
@Test [EOL] public void testInitialize() throws ConcurrentException { [EOL]     @SuppressWarnings("unchecked") [EOL]     final ConcurrentInitializer<Object> init = EasyMock.createMock(ConcurrentInitializer.class); [EOL]     final Object result = new Object(); [EOL]     EasyMock.expect(init.get()).andReturn(result); [EOL]     EasyMock.replay(init); [EOL]     assertSame("Wrong result object", result, ConcurrentUtils.initialize(init)); [EOL]     EasyMock.verify(init); [EOL] }
@Test [EOL] public void testInitialize() throws ConcurrentException { [EOL]     @SuppressWarnings("unchecked") [EOL]     final ConcurrentInitializer<Object> init = EasyMock.createMock(ConcurrentInitializer.class); [EOL]     final Object result = new Object(); [EOL]     EasyMock.expect(init.get()).andReturn(result); [EOL]     EasyMock.replay(init); [EOL]     assertSame("Wrong result object", result, ConcurrentUtils.initialize(init)); [EOL]     EasyMock.verify(init); [EOL] }
@Test [EOL] public void testCreateIfAbsentUncheckedException() throws ConcurrentException { [EOL]     @SuppressWarnings("unchecked") [EOL]     final ConcurrentInitializer<Integer> init = EasyMock.createMock(ConcurrentInitializer.class); [EOL]     final Exception ex = new Exception(); [EOL]     EasyMock.expect(init.get()).andThrow(new ConcurrentException(ex)); [EOL]     EasyMock.replay(init); [EOL]     try { [EOL]         ConcurrentUtils.createIfAbsentUnchecked(new ConcurrentHashMap<String, Integer>(), "test", init); [EOL]         fail("Exception not thrown!"); [EOL]     } catch (final ConcurrentRuntimeException crex) { [EOL]         assertEquals("Wrong cause", ex, crex.getCause()); [EOL]     } [EOL]     EasyMock.verify(init); [EOL] }
@Test [EOL] public void testCreateIfAbsentUncheckedException() throws ConcurrentException { [EOL]     @SuppressWarnings("unchecked") [EOL]     final ConcurrentInitializer<Integer> init = EasyMock.createMock(ConcurrentInitializer.class); [EOL]     final Exception ex = new Exception(); [EOL]     EasyMock.expect(init.get()).andThrow(new ConcurrentException(ex)); [EOL]     EasyMock.replay(init); [EOL]     try { [EOL]         ConcurrentUtils.createIfAbsentUnchecked(new ConcurrentHashMap<String, Integer>(), "test", init); [EOL]         fail("Exception not thrown!"); [EOL]     } catch (final ConcurrentRuntimeException crex) { [EOL]         assertEquals("Wrong cause", ex, crex.getCause()); [EOL]     } [EOL]     EasyMock.verify(init); [EOL] }
@Test [EOL] public void testCreateIfAbsentUncheckedException() throws ConcurrentException { [EOL]     @SuppressWarnings("unchecked") [EOL]     final ConcurrentInitializer<Integer> init = EasyMock.createMock(ConcurrentInitializer.class); [EOL]     final Exception ex = new Exception(); [EOL]     EasyMock.expect(init.get()).andThrow(new ConcurrentException(ex)); [EOL]     EasyMock.replay(init); [EOL]     try { [EOL]         ConcurrentUtils.createIfAbsentUnchecked(new ConcurrentHashMap<String, Integer>(), "test", init); [EOL]         fail("Exception not thrown!"); [EOL]     } catch (final ConcurrentRuntimeException crex) { [EOL]         assertEquals("Wrong cause", ex, crex.getCause()); [EOL]     } [EOL]     EasyMock.verify(init); [EOL] }
@Test [EOL] public void testSpecialCharacters() throws Exception { [EOL]     testSdfAndFdp("q", "", true); [EOL]     testSdfAndFdp("Q", "", true); [EOL]     testSdfAndFdp("$", "$", false); [EOL]     testSdfAndFdp("?.d", "?.12", false); [EOL]     testSdfAndFdp("''yyyyMMdd'A''B'HHmmssSSS''", "'20030210A'B153320989'", false); [EOL]     testSdfAndFdp("''''yyyyMMdd'A''B'HHmmssSSS''", "''20030210A'B153320989'", false); [EOL]     testSdfAndFdp("'$\\Ed'", "$\\Ed", false); [EOL] }
@Test [EOL] public void testSpecialCharacters() throws Exception { [EOL]     testSdfAndFdp("q", "", true); [EOL]     testSdfAndFdp("Q", "", true); [EOL]     testSdfAndFdp("$", "$", false); [EOL]     testSdfAndFdp("?.d", "?.12", false); [EOL]     testSdfAndFdp("''yyyyMMdd'A''B'HHmmssSSS''", "'20030210A'B153320989'", false); [EOL]     testSdfAndFdp("''''yyyyMMdd'A''B'HHmmssSSS''", "''20030210A'B153320989'", false); [EOL]     testSdfAndFdp("'$\\Ed'", "$\\Ed", false); [EOL] }
@Test [EOL] public void testSpecialCharacters() throws Exception { [EOL]     testSdfAndFdp("q", "", true); [EOL]     testSdfAndFdp("Q", "", true); [EOL]     testSdfAndFdp("$", "$", false); [EOL]     testSdfAndFdp("?.d", "?.12", false); [EOL]     testSdfAndFdp("''yyyyMMdd'A''B'HHmmssSSS''", "'20030210A'B153320989'", false); [EOL]     testSdfAndFdp("''''yyyyMMdd'A''B'HHmmssSSS''", "''20030210A'B153320989'", false); [EOL]     testSdfAndFdp("'$\\Ed'", "$\\Ed", false); [EOL] }
@Test [EOL] public void testSpecialCharacters() throws Exception { [EOL]     testSdfAndFdp("q", "", true); [EOL]     testSdfAndFdp("Q", "", true); [EOL]     testSdfAndFdp("$", "$", false); [EOL]     testSdfAndFdp("?.d", "?.12", false); [EOL]     testSdfAndFdp("''yyyyMMdd'A''B'HHmmssSSS''", "'20030210A'B153320989'", false); [EOL]     testSdfAndFdp("''''yyyyMMdd'A''B'HHmmssSSS''", "''20030210A'B153320989'", false); [EOL]     testSdfAndFdp("'$\\Ed'", "$\\Ed", false); [EOL] }
@Test [EOL] public void testSpecialCharacters() throws Exception { [EOL]     testSdfAndFdp("q", "", true); [EOL]     testSdfAndFdp("Q", "", true); [EOL]     testSdfAndFdp("$", "$", false); [EOL]     testSdfAndFdp("?.d", "?.12", false); [EOL]     testSdfAndFdp("''yyyyMMdd'A''B'HHmmssSSS''", "'20030210A'B153320989'", false); [EOL]     testSdfAndFdp("''''yyyyMMdd'A''B'HHmmssSSS''", "''20030210A'B153320989'", false); [EOL]     testSdfAndFdp("'$\\Ed'", "$\\Ed", false); [EOL] }
@Test [EOL] public void testSpecialCharacters() throws Exception { [EOL]     testSdfAndFdp("q", "", true); [EOL]     testSdfAndFdp("Q", "", true); [EOL]     testSdfAndFdp("$", "$", false); [EOL]     testSdfAndFdp("?.d", "?.12", false); [EOL]     testSdfAndFdp("''yyyyMMdd'A''B'HHmmssSSS''", "'20030210A'B153320989'", false); [EOL]     testSdfAndFdp("''''yyyyMMdd'A''B'HHmmssSSS''", "''20030210A'B153320989'", false); [EOL]     testSdfAndFdp("'$\\Ed'", "$\\Ed", false); [EOL] }
@Test [EOL] public void testLocaleMatches() { [EOL]     final DateParser parser = getInstance(yMdHmsSZ, SWEDEN); [EOL]     assertEquals(SWEDEN, parser.getLocale()); [EOL] }
@Test [EOL] public void testLANG_831() throws Exception { [EOL]     testSdfAndFdp("M E", "3  Tue", true); [EOL] }
@Test [EOL] public void testLANG_831() throws Exception { [EOL]     testSdfAndFdp("M E", "3  Tue", true); [EOL] }
@Test [EOL] public void testLANG_831() throws Exception { [EOL]     testSdfAndFdp("M E", "3  Tue", true); [EOL] }
@Test [EOL] public void testSpecialCharacters() throws Exception { [EOL]     testSdfAndFdp("q", "", true); [EOL]     testSdfAndFdp("Q", "", true); [EOL]     testSdfAndFdp("$", "$", false); [EOL]     testSdfAndFdp("?.d", "?.12", false); [EOL]     testSdfAndFdp("''yyyyMMdd'A''B'HHmmssSSS''", "'20030210A'B153320989'", false); [EOL]     testSdfAndFdp("''''yyyyMMdd'A''B'HHmmssSSS''", "''20030210A'B153320989'", false); [EOL]     testSdfAndFdp("'$\\Ed'", "$\\Ed", false); [EOL] }
@Test [EOL] public void testSpecialCharacters() throws Exception { [EOL]     testSdfAndFdp("q", "", true); [EOL]     testSdfAndFdp("Q", "", true); [EOL]     testSdfAndFdp("$", "$", false); [EOL]     testSdfAndFdp("?.d", "?.12", false); [EOL]     testSdfAndFdp("''yyyyMMdd'A''B'HHmmssSSS''", "'20030210A'B153320989'", false); [EOL]     testSdfAndFdp("''''yyyyMMdd'A''B'HHmmssSSS''", "''20030210A'B153320989'", false); [EOL]     testSdfAndFdp("'$\\Ed'", "$\\Ed", false); [EOL] }
@Test [EOL] public void testLocaleMatches() { [EOL]     final DateParser parser = getInstance(yMdHmsSZ, SWEDEN); [EOL]     assertEquals(SWEDEN, parser.getLocale()); [EOL] }
@Test [EOL] public void testLocaleMatches() { [EOL]     final DateParser parser = getInstance(yMdHmsSZ, SWEDEN); [EOL]     assertEquals(SWEDEN, parser.getLocale()); [EOL] }
@Test [EOL] public void testSpecialCharacters() throws Exception { [EOL]     testSdfAndFdp("q", "", true); [EOL]     testSdfAndFdp("Q", "", true); [EOL]     testSdfAndFdp("$", "$", false); [EOL]     testSdfAndFdp("?.d", "?.12", false); [EOL]     testSdfAndFdp("''yyyyMMdd'A''B'HHmmssSSS''", "'20030210A'B153320989'", false); [EOL]     testSdfAndFdp("''''yyyyMMdd'A''B'HHmmssSSS''", "''20030210A'B153320989'", false); [EOL]     testSdfAndFdp("'$\\Ed'", "$\\Ed", false); [EOL] }
@Test [EOL] public void testSpecialCharacters() throws Exception { [EOL]     testSdfAndFdp("q", "", true); [EOL]     testSdfAndFdp("Q", "", true); [EOL]     testSdfAndFdp("$", "$", false); [EOL]     testSdfAndFdp("?.d", "?.12", false); [EOL]     testSdfAndFdp("''yyyyMMdd'A''B'HHmmssSSS''", "'20030210A'B153320989'", false); [EOL]     testSdfAndFdp("''''yyyyMMdd'A''B'HHmmssSSS''", "''20030210A'B153320989'", false); [EOL]     testSdfAndFdp("'$\\Ed'", "$\\Ed", false); [EOL] }
@Test [EOL] public void testSpecialCharacters() throws Exception { [EOL]     testSdfAndFdp("q", "", true); [EOL]     testSdfAndFdp("Q", "", true); [EOL]     testSdfAndFdp("$", "$", false); [EOL]     testSdfAndFdp("?.d", "?.12", false); [EOL]     testSdfAndFdp("''yyyyMMdd'A''B'HHmmssSSS''", "'20030210A'B153320989'", false); [EOL]     testSdfAndFdp("''''yyyyMMdd'A''B'HHmmssSSS''", "''20030210A'B153320989'", false); [EOL]     testSdfAndFdp("'$\\Ed'", "$\\Ed", false); [EOL] }
@Test [EOL] public void testSpecialCharacters() throws Exception { [EOL]     testSdfAndFdp("q", "", true); [EOL]     testSdfAndFdp("Q", "", true); [EOL]     testSdfAndFdp("$", "$", false); [EOL]     testSdfAndFdp("?.d", "?.12", false); [EOL]     testSdfAndFdp("''yyyyMMdd'A''B'HHmmssSSS''", "'20030210A'B153320989'", false); [EOL]     testSdfAndFdp("''''yyyyMMdd'A''B'HHmmssSSS''", "''20030210A'B153320989'", false); [EOL]     testSdfAndFdp("'$\\Ed'", "$\\Ed", false); [EOL] }
@Test [EOL] public void testSpecialCharacters() throws Exception { [EOL]     testSdfAndFdp("q", "", true); [EOL]     testSdfAndFdp("Q", "", true); [EOL]     testSdfAndFdp("$", "$", false); [EOL]     testSdfAndFdp("?.d", "?.12", false); [EOL]     testSdfAndFdp("''yyyyMMdd'A''B'HHmmssSSS''", "'20030210A'B153320989'", false); [EOL]     testSdfAndFdp("''''yyyyMMdd'A''B'HHmmssSSS''", "''20030210A'B153320989'", false); [EOL]     testSdfAndFdp("'$\\Ed'", "$\\Ed", false); [EOL] }
@Test [EOL] public void testSpecialCharacters() throws Exception { [EOL]     testSdfAndFdp("q", "", true); [EOL]     testSdfAndFdp("Q", "", true); [EOL]     testSdfAndFdp("$", "$", false); [EOL]     testSdfAndFdp("?.d", "?.12", false); [EOL]     testSdfAndFdp("''yyyyMMdd'A''B'HHmmssSSS''", "'20030210A'B153320989'", false); [EOL]     testSdfAndFdp("''''yyyyMMdd'A''B'HHmmssSSS''", "''20030210A'B153320989'", false); [EOL]     testSdfAndFdp("'$\\Ed'", "$\\Ed", false); [EOL] }
@Test [EOL] public void testSpecialCharacters() throws Exception { [EOL]     testSdfAndFdp("q", "", true); [EOL]     testSdfAndFdp("Q", "", true); [EOL]     testSdfAndFdp("$", "$", false); [EOL]     testSdfAndFdp("?.d", "?.12", false); [EOL]     testSdfAndFdp("''yyyyMMdd'A''B'HHmmssSSS''", "'20030210A'B153320989'", false); [EOL]     testSdfAndFdp("''''yyyyMMdd'A''B'HHmmssSSS''", "''20030210A'B153320989'", false); [EOL]     testSdfAndFdp("'$\\Ed'", "$\\Ed", false); [EOL] }
@Test [EOL] public void testSpecialCharacters() throws Exception { [EOL]     testSdfAndFdp("q", "", true); [EOL]     testSdfAndFdp("Q", "", true); [EOL]     testSdfAndFdp("$", "$", false); [EOL]     testSdfAndFdp("?.d", "?.12", false); [EOL]     testSdfAndFdp("''yyyyMMdd'A''B'HHmmssSSS''", "'20030210A'B153320989'", false); [EOL]     testSdfAndFdp("''''yyyyMMdd'A''B'HHmmssSSS''", "''20030210A'B153320989'", false); [EOL]     testSdfAndFdp("'$\\Ed'", "$\\Ed", false); [EOL] }
@Test [EOL] public void testSpecialCharacters() throws Exception { [EOL]     testSdfAndFdp("q", "", true); [EOL]     testSdfAndFdp("Q", "", true); [EOL]     testSdfAndFdp("$", "$", false); [EOL]     testSdfAndFdp("?.d", "?.12", false); [EOL]     testSdfAndFdp("''yyyyMMdd'A''B'HHmmssSSS''", "'20030210A'B153320989'", false); [EOL]     testSdfAndFdp("''''yyyyMMdd'A''B'HHmmssSSS''", "''20030210A'B153320989'", false); [EOL]     testSdfAndFdp("'$\\Ed'", "$\\Ed", false); [EOL] }
@Test [EOL] public void testSpecialCharacters() throws Exception { [EOL]     testSdfAndFdp("q", "", true); [EOL]     testSdfAndFdp("Q", "", true); [EOL]     testSdfAndFdp("$", "$", false); [EOL]     testSdfAndFdp("?.d", "?.12", false); [EOL]     testSdfAndFdp("''yyyyMMdd'A''B'HHmmssSSS''", "'20030210A'B153320989'", false); [EOL]     testSdfAndFdp("''''yyyyMMdd'A''B'HHmmssSSS''", "''20030210A'B153320989'", false); [EOL]     testSdfAndFdp("'$\\Ed'", "$\\Ed", false); [EOL] }
@Test [EOL] public void testSpecialCharacters() throws Exception { [EOL]     testSdfAndFdp("q", "", true); [EOL]     testSdfAndFdp("Q", "", true); [EOL]     testSdfAndFdp("$", "$", false); [EOL]     testSdfAndFdp("?.d", "?.12", false); [EOL]     testSdfAndFdp("''yyyyMMdd'A''B'HHmmssSSS''", "'20030210A'B153320989'", false); [EOL]     testSdfAndFdp("''''yyyyMMdd'A''B'HHmmssSSS''", "''20030210A'B153320989'", false); [EOL]     testSdfAndFdp("'$\\Ed'", "$\\Ed", false); [EOL] }
@Test [EOL] public void testLocaleMatches() { [EOL]     final DateParser parser = getInstance(yMdHmsSZ, SWEDEN); [EOL]     assertEquals(SWEDEN, parser.getLocale()); [EOL] }
@Test [EOL] public void testLocaleMatches() { [EOL]     final DateParser parser = getInstance(yMdHmsSZ, SWEDEN); [EOL]     assertEquals(SWEDEN, parser.getLocale()); [EOL] }
@Test [EOL] public void testLocaleMatches() { [EOL]     final DateParser parser = getInstance(yMdHmsSZ, SWEDEN); [EOL]     assertEquals(SWEDEN, parser.getLocale()); [EOL] }
@Test [EOL] public void testLocaleMatches() { [EOL]     final DateParser parser = getInstance(yMdHmsSZ, SWEDEN); [EOL]     assertEquals(SWEDEN, parser.getLocale()); [EOL] }
@Test [EOL] public void testAbs() { [EOL]     Fraction f = null; [EOL]     f = Fraction.getFraction(50, 75); [EOL]     f = f.abs(); [EOL]     assertEquals(50, f.getNumerator()); [EOL]     assertEquals(75, f.getDenominator()); [EOL]     f = Fraction.getFraction(-50, 75); [EOL]     f = f.abs(); [EOL]     assertEquals(50, f.getNumerator()); [EOL]     assertEquals(75, f.getDenominator()); [EOL]     f = Fraction.getFraction(Integer.MAX_VALUE, 1); [EOL]     f = f.abs(); [EOL]     assertEquals(Integer.MAX_VALUE, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL]     f = Fraction.getFraction(Integer.MAX_VALUE, -1); [EOL]     f = f.abs(); [EOL]     assertEquals(Integer.MAX_VALUE, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL]     f = Fraction.getFraction(Integer.MIN_VALUE, 1); [EOL]     try { [EOL]         f = f.abs(); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL] }
@Test [EOL] public void testAbs() { [EOL]     Fraction f = null; [EOL]     f = Fraction.getFraction(50, 75); [EOL]     f = f.abs(); [EOL]     assertEquals(50, f.getNumerator()); [EOL]     assertEquals(75, f.getDenominator()); [EOL]     f = Fraction.getFraction(-50, 75); [EOL]     f = f.abs(); [EOL]     assertEquals(50, f.getNumerator()); [EOL]     assertEquals(75, f.getDenominator()); [EOL]     f = Fraction.getFraction(Integer.MAX_VALUE, 1); [EOL]     f = f.abs(); [EOL]     assertEquals(Integer.MAX_VALUE, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL]     f = Fraction.getFraction(Integer.MAX_VALUE, -1); [EOL]     f = f.abs(); [EOL]     assertEquals(Integer.MAX_VALUE, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL]     f = Fraction.getFraction(Integer.MIN_VALUE, 1); [EOL]     try { [EOL]         f = f.abs(); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL] }
@Test [EOL] public void testAbs() { [EOL]     Fraction f = null; [EOL]     f = Fraction.getFraction(50, 75); [EOL]     f = f.abs(); [EOL]     assertEquals(50, f.getNumerator()); [EOL]     assertEquals(75, f.getDenominator()); [EOL]     f = Fraction.getFraction(-50, 75); [EOL]     f = f.abs(); [EOL]     assertEquals(50, f.getNumerator()); [EOL]     assertEquals(75, f.getDenominator()); [EOL]     f = Fraction.getFraction(Integer.MAX_VALUE, 1); [EOL]     f = f.abs(); [EOL]     assertEquals(Integer.MAX_VALUE, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL]     f = Fraction.getFraction(Integer.MAX_VALUE, -1); [EOL]     f = f.abs(); [EOL]     assertEquals(Integer.MAX_VALUE, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL]     f = Fraction.getFraction(Integer.MIN_VALUE, 1); [EOL]     try { [EOL]         f = f.abs(); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL] }
@Test [EOL] public void testAbs() { [EOL]     Fraction f = null; [EOL]     f = Fraction.getFraction(50, 75); [EOL]     f = f.abs(); [EOL]     assertEquals(50, f.getNumerator()); [EOL]     assertEquals(75, f.getDenominator()); [EOL]     f = Fraction.getFraction(-50, 75); [EOL]     f = f.abs(); [EOL]     assertEquals(50, f.getNumerator()); [EOL]     assertEquals(75, f.getDenominator()); [EOL]     f = Fraction.getFraction(Integer.MAX_VALUE, 1); [EOL]     f = f.abs(); [EOL]     assertEquals(Integer.MAX_VALUE, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL]     f = Fraction.getFraction(Integer.MAX_VALUE, -1); [EOL]     f = f.abs(); [EOL]     assertEquals(Integer.MAX_VALUE, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL]     f = Fraction.getFraction(Integer.MIN_VALUE, 1); [EOL]     try { [EOL]         f = f.abs(); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL] }
@Test [EOL] public void testAbs() { [EOL]     Fraction f = null; [EOL]     f = Fraction.getFraction(50, 75); [EOL]     f = f.abs(); [EOL]     assertEquals(50, f.getNumerator()); [EOL]     assertEquals(75, f.getDenominator()); [EOL]     f = Fraction.getFraction(-50, 75); [EOL]     f = f.abs(); [EOL]     assertEquals(50, f.getNumerator()); [EOL]     assertEquals(75, f.getDenominator()); [EOL]     f = Fraction.getFraction(Integer.MAX_VALUE, 1); [EOL]     f = f.abs(); [EOL]     assertEquals(Integer.MAX_VALUE, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL]     f = Fraction.getFraction(Integer.MAX_VALUE, -1); [EOL]     f = f.abs(); [EOL]     assertEquals(Integer.MAX_VALUE, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL]     f = Fraction.getFraction(Integer.MIN_VALUE, 1); [EOL]     try { [EOL]         f = f.abs(); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL] }
@Test [EOL] public void testFactory_int_int_int() { [EOL]     Fraction f = null; [EOL]     f = Fraction.getFraction(0, 0, 2); [EOL]     assertEquals(0, f.getNumerator()); [EOL]     assertEquals(2, f.getDenominator()); [EOL]     f = Fraction.getFraction(2, 0, 2); [EOL]     assertEquals(4, f.getNumerator()); [EOL]     assertEquals(2, f.getDenominator()); [EOL]     f = Fraction.getFraction(0, 1, 2); [EOL]     assertEquals(1, f.getNumerator()); [EOL]     assertEquals(2, f.getDenominator()); [EOL]     f = Fraction.getFraction(1, 1, 2); [EOL]     assertEquals(3, f.getNumerator()); [EOL]     assertEquals(2, f.getDenominator()); [EOL]     try { [EOL]         f = Fraction.getFraction(1, -6, -10); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     try { [EOL]         f = Fraction.getFraction(1, -6, -10); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     try { [EOL]         f = Fraction.getFraction(1, -6, -10); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     f = Fraction.getFraction(-1, 6, 10); [EOL]     assertEquals(-16, f.getNumerator()); [EOL]     assertEquals(10, f.getDenominator()); [EOL]     try { [EOL]         f = Fraction.getFraction(-1, -6, 10); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     try { [EOL]         f = Fraction.getFraction(-1, 6, -10); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     try { [EOL]         f = Fraction.getFraction(-1, -6, -10); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     try { [EOL]         f = Fraction.getFraction(0, 1, 0); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     try { [EOL]         f = Fraction.getFraction(1, 2, 0); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     try { [EOL]         f = Fraction.getFraction(-1, -3, 0); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     try { [EOL]         f = Fraction.getFraction(Integer.MAX_VALUE, 1, 2); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     try { [EOL]         f = Fraction.getFraction(-Integer.MAX_VALUE, 1, 2); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     f = Fraction.getFraction(-1, 0, Integer.MAX_VALUE); [EOL]     assertEquals(-Integer.MAX_VALUE, f.getNumerator()); [EOL]     assertEquals(Integer.MAX_VALUE, f.getDenominator()); [EOL]     try { [EOL]         f = Fraction.getFraction(0, 4, Integer.MIN_VALUE); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     try { [EOL]         f = Fraction.getFraction(1, 1, Integer.MAX_VALUE); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     try { [EOL]         f = Fraction.getFraction(-1, 2, Integer.MAX_VALUE); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL] }
@Test [EOL] public void testAbs() { [EOL]     Fraction f = null; [EOL]     f = Fraction.getFraction(50, 75); [EOL]     f = f.abs(); [EOL]     assertEquals(50, f.getNumerator()); [EOL]     assertEquals(75, f.getDenominator()); [EOL]     f = Fraction.getFraction(-50, 75); [EOL]     f = f.abs(); [EOL]     assertEquals(50, f.getNumerator()); [EOL]     assertEquals(75, f.getDenominator()); [EOL]     f = Fraction.getFraction(Integer.MAX_VALUE, 1); [EOL]     f = f.abs(); [EOL]     assertEquals(Integer.MAX_VALUE, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL]     f = Fraction.getFraction(Integer.MAX_VALUE, -1); [EOL]     f = f.abs(); [EOL]     assertEquals(Integer.MAX_VALUE, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL]     f = Fraction.getFraction(Integer.MIN_VALUE, 1); [EOL]     try { [EOL]         f = f.abs(); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL] }
@Test [EOL] public void testAbs() { [EOL]     Fraction f = null; [EOL]     f = Fraction.getFraction(50, 75); [EOL]     f = f.abs(); [EOL]     assertEquals(50, f.getNumerator()); [EOL]     assertEquals(75, f.getDenominator()); [EOL]     f = Fraction.getFraction(-50, 75); [EOL]     f = f.abs(); [EOL]     assertEquals(50, f.getNumerator()); [EOL]     assertEquals(75, f.getDenominator()); [EOL]     f = Fraction.getFraction(Integer.MAX_VALUE, 1); [EOL]     f = f.abs(); [EOL]     assertEquals(Integer.MAX_VALUE, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL]     f = Fraction.getFraction(Integer.MAX_VALUE, -1); [EOL]     f = f.abs(); [EOL]     assertEquals(Integer.MAX_VALUE, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL]     f = Fraction.getFraction(Integer.MIN_VALUE, 1); [EOL]     try { [EOL]         f = f.abs(); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL] }
@Test [EOL] public void testAbs() { [EOL]     Fraction f = null; [EOL]     f = Fraction.getFraction(50, 75); [EOL]     f = f.abs(); [EOL]     assertEquals(50, f.getNumerator()); [EOL]     assertEquals(75, f.getDenominator()); [EOL]     f = Fraction.getFraction(-50, 75); [EOL]     f = f.abs(); [EOL]     assertEquals(50, f.getNumerator()); [EOL]     assertEquals(75, f.getDenominator()); [EOL]     f = Fraction.getFraction(Integer.MAX_VALUE, 1); [EOL]     f = f.abs(); [EOL]     assertEquals(Integer.MAX_VALUE, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL]     f = Fraction.getFraction(Integer.MAX_VALUE, -1); [EOL]     f = f.abs(); [EOL]     assertEquals(Integer.MAX_VALUE, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL]     f = Fraction.getFraction(Integer.MIN_VALUE, 1); [EOL]     try { [EOL]         f = f.abs(); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL] }
@Test [EOL] public void testAbs() { [EOL]     Fraction f = null; [EOL]     f = Fraction.getFraction(50, 75); [EOL]     f = f.abs(); [EOL]     assertEquals(50, f.getNumerator()); [EOL]     assertEquals(75, f.getDenominator()); [EOL]     f = Fraction.getFraction(-50, 75); [EOL]     f = f.abs(); [EOL]     assertEquals(50, f.getNumerator()); [EOL]     assertEquals(75, f.getDenominator()); [EOL]     f = Fraction.getFraction(Integer.MAX_VALUE, 1); [EOL]     f = f.abs(); [EOL]     assertEquals(Integer.MAX_VALUE, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL]     f = Fraction.getFraction(Integer.MAX_VALUE, -1); [EOL]     f = f.abs(); [EOL]     assertEquals(Integer.MAX_VALUE, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL]     f = Fraction.getFraction(Integer.MIN_VALUE, 1); [EOL]     try { [EOL]         f = f.abs(); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL] }
@Test [EOL] public void testAbs() { [EOL]     Fraction f = null; [EOL]     f = Fraction.getFraction(50, 75); [EOL]     f = f.abs(); [EOL]     assertEquals(50, f.getNumerator()); [EOL]     assertEquals(75, f.getDenominator()); [EOL]     f = Fraction.getFraction(-50, 75); [EOL]     f = f.abs(); [EOL]     assertEquals(50, f.getNumerator()); [EOL]     assertEquals(75, f.getDenominator()); [EOL]     f = Fraction.getFraction(Integer.MAX_VALUE, 1); [EOL]     f = f.abs(); [EOL]     assertEquals(Integer.MAX_VALUE, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL]     f = Fraction.getFraction(Integer.MAX_VALUE, -1); [EOL]     f = f.abs(); [EOL]     assertEquals(Integer.MAX_VALUE, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL]     f = Fraction.getFraction(Integer.MIN_VALUE, 1); [EOL]     try { [EOL]         f = f.abs(); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL] }
@Test [EOL] public void testSubtract() { [EOL]     Fraction f = null; [EOL]     Fraction f1 = null; [EOL]     Fraction f2 = null; [EOL]     f1 = Fraction.getFraction(3, 5); [EOL]     f2 = Fraction.getFraction(1, 5); [EOL]     f = f1.subtract(f2); [EOL]     assertEquals(2, f.getNumerator()); [EOL]     assertEquals(5, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(7, 5); [EOL]     f2 = Fraction.getFraction(2, 5); [EOL]     f = f1.subtract(f2); [EOL]     assertEquals(1, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(3, 5); [EOL]     f2 = Fraction.getFraction(3, 5); [EOL]     f = f1.subtract(f2); [EOL]     assertEquals(0, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(3, 5); [EOL]     f2 = Fraction.getFraction(-4, 5); [EOL]     f = f1.subtract(f2); [EOL]     assertEquals(7, f.getNumerator()); [EOL]     assertEquals(5, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(0, 5); [EOL]     f2 = Fraction.getFraction(4, 5); [EOL]     f = f1.subtract(f2); [EOL]     assertEquals(-4, f.getNumerator()); [EOL]     assertEquals(5, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(0, 5); [EOL]     f2 = Fraction.getFraction(-4, 5); [EOL]     f = f1.subtract(f2); [EOL]     assertEquals(4, f.getNumerator()); [EOL]     assertEquals(5, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(3, 5); [EOL]     f2 = Fraction.getFraction(1, 2); [EOL]     f = f1.subtract(f2); [EOL]     assertEquals(1, f.getNumerator()); [EOL]     assertEquals(10, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(0, 5); [EOL]     f2 = Fraction.getFraction(1, 5); [EOL]     f = f2.subtract(f1); [EOL]     assertSame(f2, f); [EOL]     try { [EOL]         f.subtract(null); [EOL]         fail("expecting IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     f1 = Fraction.getFraction(1, 32768 * 3); [EOL]     f2 = Fraction.getFraction(1, 59049); [EOL]     f = f1.subtract(f2); [EOL]     assertEquals(-13085, f.getNumerator()); [EOL]     assertEquals(1934917632, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(Integer.MIN_VALUE, 3); [EOL]     f2 = Fraction.ONE_THIRD.negate(); [EOL]     f = f1.subtract(f2); [EOL]     assertEquals(Integer.MIN_VALUE + 1, f.getNumerator()); [EOL]     assertEquals(3, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(Integer.MAX_VALUE, 1); [EOL]     f2 = Fraction.ONE; [EOL]     f = f1.subtract(f2); [EOL]     assertEquals(Integer.MAX_VALUE - 1, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL]     try { [EOL]         f1 = Fraction.getFraction(1, Integer.MAX_VALUE); [EOL]         f2 = Fraction.getFraction(1, Integer.MAX_VALUE - 1); [EOL]         f = f1.subtract(f2); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     f1 = Fraction.getFraction(Integer.MIN_VALUE, 5); [EOL]     f2 = Fraction.getFraction(1, 5); [EOL]     try { [EOL]         f = f1.subtract(f2); [EOL]         fail("expecting ArithmeticException but got: " + f.toString()); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     try { [EOL]         f = Fraction.getFraction(Integer.MIN_VALUE, 1); [EOL]         f = f.subtract(Fraction.ONE); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     try { [EOL]         f = Fraction.getFraction(Integer.MAX_VALUE, 1); [EOL]         f = f.subtract(Fraction.ONE.negate()); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     f1 = Fraction.getFraction(3, 327680); [EOL]     f2 = Fraction.getFraction(2, 59049); [EOL]     try { [EOL]         f = f1.subtract(f2); [EOL]         fail("expecting ArithmeticException but got: " + f.toString()); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL] }
@Test [EOL] public void testSubtract() { [EOL]     Fraction f = null; [EOL]     Fraction f1 = null; [EOL]     Fraction f2 = null; [EOL]     f1 = Fraction.getFraction(3, 5); [EOL]     f2 = Fraction.getFraction(1, 5); [EOL]     f = f1.subtract(f2); [EOL]     assertEquals(2, f.getNumerator()); [EOL]     assertEquals(5, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(7, 5); [EOL]     f2 = Fraction.getFraction(2, 5); [EOL]     f = f1.subtract(f2); [EOL]     assertEquals(1, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(3, 5); [EOL]     f2 = Fraction.getFraction(3, 5); [EOL]     f = f1.subtract(f2); [EOL]     assertEquals(0, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(3, 5); [EOL]     f2 = Fraction.getFraction(-4, 5); [EOL]     f = f1.subtract(f2); [EOL]     assertEquals(7, f.getNumerator()); [EOL]     assertEquals(5, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(0, 5); [EOL]     f2 = Fraction.getFraction(4, 5); [EOL]     f = f1.subtract(f2); [EOL]     assertEquals(-4, f.getNumerator()); [EOL]     assertEquals(5, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(0, 5); [EOL]     f2 = Fraction.getFraction(-4, 5); [EOL]     f = f1.subtract(f2); [EOL]     assertEquals(4, f.getNumerator()); [EOL]     assertEquals(5, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(3, 5); [EOL]     f2 = Fraction.getFraction(1, 2); [EOL]     f = f1.subtract(f2); [EOL]     assertEquals(1, f.getNumerator()); [EOL]     assertEquals(10, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(0, 5); [EOL]     f2 = Fraction.getFraction(1, 5); [EOL]     f = f2.subtract(f1); [EOL]     assertSame(f2, f); [EOL]     try { [EOL]         f.subtract(null); [EOL]         fail("expecting IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     f1 = Fraction.getFraction(1, 32768 * 3); [EOL]     f2 = Fraction.getFraction(1, 59049); [EOL]     f = f1.subtract(f2); [EOL]     assertEquals(-13085, f.getNumerator()); [EOL]     assertEquals(1934917632, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(Integer.MIN_VALUE, 3); [EOL]     f2 = Fraction.ONE_THIRD.negate(); [EOL]     f = f1.subtract(f2); [EOL]     assertEquals(Integer.MIN_VALUE + 1, f.getNumerator()); [EOL]     assertEquals(3, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(Integer.MAX_VALUE, 1); [EOL]     f2 = Fraction.ONE; [EOL]     f = f1.subtract(f2); [EOL]     assertEquals(Integer.MAX_VALUE - 1, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL]     try { [EOL]         f1 = Fraction.getFraction(1, Integer.MAX_VALUE); [EOL]         f2 = Fraction.getFraction(1, Integer.MAX_VALUE - 1); [EOL]         f = f1.subtract(f2); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     f1 = Fraction.getFraction(Integer.MIN_VALUE, 5); [EOL]     f2 = Fraction.getFraction(1, 5); [EOL]     try { [EOL]         f = f1.subtract(f2); [EOL]         fail("expecting ArithmeticException but got: " + f.toString()); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     try { [EOL]         f = Fraction.getFraction(Integer.MIN_VALUE, 1); [EOL]         f = f.subtract(Fraction.ONE); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     try { [EOL]         f = Fraction.getFraction(Integer.MAX_VALUE, 1); [EOL]         f = f.subtract(Fraction.ONE.negate()); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     f1 = Fraction.getFraction(3, 327680); [EOL]     f2 = Fraction.getFraction(2, 59049); [EOL]     try { [EOL]         f = f1.subtract(f2); [EOL]         fail("expecting ArithmeticException but got: " + f.toString()); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL] }
@Test [EOL] public void testSubtract() { [EOL]     Fraction f = null; [EOL]     Fraction f1 = null; [EOL]     Fraction f2 = null; [EOL]     f1 = Fraction.getFraction(3, 5); [EOL]     f2 = Fraction.getFraction(1, 5); [EOL]     f = f1.subtract(f2); [EOL]     assertEquals(2, f.getNumerator()); [EOL]     assertEquals(5, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(7, 5); [EOL]     f2 = Fraction.getFraction(2, 5); [EOL]     f = f1.subtract(f2); [EOL]     assertEquals(1, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(3, 5); [EOL]     f2 = Fraction.getFraction(3, 5); [EOL]     f = f1.subtract(f2); [EOL]     assertEquals(0, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(3, 5); [EOL]     f2 = Fraction.getFraction(-4, 5); [EOL]     f = f1.subtract(f2); [EOL]     assertEquals(7, f.getNumerator()); [EOL]     assertEquals(5, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(0, 5); [EOL]     f2 = Fraction.getFraction(4, 5); [EOL]     f = f1.subtract(f2); [EOL]     assertEquals(-4, f.getNumerator()); [EOL]     assertEquals(5, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(0, 5); [EOL]     f2 = Fraction.getFraction(-4, 5); [EOL]     f = f1.subtract(f2); [EOL]     assertEquals(4, f.getNumerator()); [EOL]     assertEquals(5, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(3, 5); [EOL]     f2 = Fraction.getFraction(1, 2); [EOL]     f = f1.subtract(f2); [EOL]     assertEquals(1, f.getNumerator()); [EOL]     assertEquals(10, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(0, 5); [EOL]     f2 = Fraction.getFraction(1, 5); [EOL]     f = f2.subtract(f1); [EOL]     assertSame(f2, f); [EOL]     try { [EOL]         f.subtract(null); [EOL]         fail("expecting IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     f1 = Fraction.getFraction(1, 32768 * 3); [EOL]     f2 = Fraction.getFraction(1, 59049); [EOL]     f = f1.subtract(f2); [EOL]     assertEquals(-13085, f.getNumerator()); [EOL]     assertEquals(1934917632, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(Integer.MIN_VALUE, 3); [EOL]     f2 = Fraction.ONE_THIRD.negate(); [EOL]     f = f1.subtract(f2); [EOL]     assertEquals(Integer.MIN_VALUE + 1, f.getNumerator()); [EOL]     assertEquals(3, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(Integer.MAX_VALUE, 1); [EOL]     f2 = Fraction.ONE; [EOL]     f = f1.subtract(f2); [EOL]     assertEquals(Integer.MAX_VALUE - 1, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL]     try { [EOL]         f1 = Fraction.getFraction(1, Integer.MAX_VALUE); [EOL]         f2 = Fraction.getFraction(1, Integer.MAX_VALUE - 1); [EOL]         f = f1.subtract(f2); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     f1 = Fraction.getFraction(Integer.MIN_VALUE, 5); [EOL]     f2 = Fraction.getFraction(1, 5); [EOL]     try { [EOL]         f = f1.subtract(f2); [EOL]         fail("expecting ArithmeticException but got: " + f.toString()); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     try { [EOL]         f = Fraction.getFraction(Integer.MIN_VALUE, 1); [EOL]         f = f.subtract(Fraction.ONE); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     try { [EOL]         f = Fraction.getFraction(Integer.MAX_VALUE, 1); [EOL]         f = f.subtract(Fraction.ONE.negate()); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     f1 = Fraction.getFraction(3, 327680); [EOL]     f2 = Fraction.getFraction(2, 59049); [EOL]     try { [EOL]         f = f1.subtract(f2); [EOL]         fail("expecting ArithmeticException but got: " + f.toString()); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL] }
@Test [EOL] public void testSubtract() { [EOL]     Fraction f = null; [EOL]     Fraction f1 = null; [EOL]     Fraction f2 = null; [EOL]     f1 = Fraction.getFraction(3, 5); [EOL]     f2 = Fraction.getFraction(1, 5); [EOL]     f = f1.subtract(f2); [EOL]     assertEquals(2, f.getNumerator()); [EOL]     assertEquals(5, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(7, 5); [EOL]     f2 = Fraction.getFraction(2, 5); [EOL]     f = f1.subtract(f2); [EOL]     assertEquals(1, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(3, 5); [EOL]     f2 = Fraction.getFraction(3, 5); [EOL]     f = f1.subtract(f2); [EOL]     assertEquals(0, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(3, 5); [EOL]     f2 = Fraction.getFraction(-4, 5); [EOL]     f = f1.subtract(f2); [EOL]     assertEquals(7, f.getNumerator()); [EOL]     assertEquals(5, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(0, 5); [EOL]     f2 = Fraction.getFraction(4, 5); [EOL]     f = f1.subtract(f2); [EOL]     assertEquals(-4, f.getNumerator()); [EOL]     assertEquals(5, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(0, 5); [EOL]     f2 = Fraction.getFraction(-4, 5); [EOL]     f = f1.subtract(f2); [EOL]     assertEquals(4, f.getNumerator()); [EOL]     assertEquals(5, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(3, 5); [EOL]     f2 = Fraction.getFraction(1, 2); [EOL]     f = f1.subtract(f2); [EOL]     assertEquals(1, f.getNumerator()); [EOL]     assertEquals(10, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(0, 5); [EOL]     f2 = Fraction.getFraction(1, 5); [EOL]     f = f2.subtract(f1); [EOL]     assertSame(f2, f); [EOL]     try { [EOL]         f.subtract(null); [EOL]         fail("expecting IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     f1 = Fraction.getFraction(1, 32768 * 3); [EOL]     f2 = Fraction.getFraction(1, 59049); [EOL]     f = f1.subtract(f2); [EOL]     assertEquals(-13085, f.getNumerator()); [EOL]     assertEquals(1934917632, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(Integer.MIN_VALUE, 3); [EOL]     f2 = Fraction.ONE_THIRD.negate(); [EOL]     f = f1.subtract(f2); [EOL]     assertEquals(Integer.MIN_VALUE + 1, f.getNumerator()); [EOL]     assertEquals(3, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(Integer.MAX_VALUE, 1); [EOL]     f2 = Fraction.ONE; [EOL]     f = f1.subtract(f2); [EOL]     assertEquals(Integer.MAX_VALUE - 1, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL]     try { [EOL]         f1 = Fraction.getFraction(1, Integer.MAX_VALUE); [EOL]         f2 = Fraction.getFraction(1, Integer.MAX_VALUE - 1); [EOL]         f = f1.subtract(f2); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     f1 = Fraction.getFraction(Integer.MIN_VALUE, 5); [EOL]     f2 = Fraction.getFraction(1, 5); [EOL]     try { [EOL]         f = f1.subtract(f2); [EOL]         fail("expecting ArithmeticException but got: " + f.toString()); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     try { [EOL]         f = Fraction.getFraction(Integer.MIN_VALUE, 1); [EOL]         f = f.subtract(Fraction.ONE); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     try { [EOL]         f = Fraction.getFraction(Integer.MAX_VALUE, 1); [EOL]         f = f.subtract(Fraction.ONE.negate()); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     f1 = Fraction.getFraction(3, 327680); [EOL]     f2 = Fraction.getFraction(2, 59049); [EOL]     try { [EOL]         f = f1.subtract(f2); [EOL]         fail("expecting ArithmeticException but got: " + f.toString()); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL] }
@Test [EOL] public void testSubtract() { [EOL]     Fraction f = null; [EOL]     Fraction f1 = null; [EOL]     Fraction f2 = null; [EOL]     f1 = Fraction.getFraction(3, 5); [EOL]     f2 = Fraction.getFraction(1, 5); [EOL]     f = f1.subtract(f2); [EOL]     assertEquals(2, f.getNumerator()); [EOL]     assertEquals(5, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(7, 5); [EOL]     f2 = Fraction.getFraction(2, 5); [EOL]     f = f1.subtract(f2); [EOL]     assertEquals(1, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(3, 5); [EOL]     f2 = Fraction.getFraction(3, 5); [EOL]     f = f1.subtract(f2); [EOL]     assertEquals(0, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(3, 5); [EOL]     f2 = Fraction.getFraction(-4, 5); [EOL]     f = f1.subtract(f2); [EOL]     assertEquals(7, f.getNumerator()); [EOL]     assertEquals(5, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(0, 5); [EOL]     f2 = Fraction.getFraction(4, 5); [EOL]     f = f1.subtract(f2); [EOL]     assertEquals(-4, f.getNumerator()); [EOL]     assertEquals(5, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(0, 5); [EOL]     f2 = Fraction.getFraction(-4, 5); [EOL]     f = f1.subtract(f2); [EOL]     assertEquals(4, f.getNumerator()); [EOL]     assertEquals(5, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(3, 5); [EOL]     f2 = Fraction.getFraction(1, 2); [EOL]     f = f1.subtract(f2); [EOL]     assertEquals(1, f.getNumerator()); [EOL]     assertEquals(10, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(0, 5); [EOL]     f2 = Fraction.getFraction(1, 5); [EOL]     f = f2.subtract(f1); [EOL]     assertSame(f2, f); [EOL]     try { [EOL]         f.subtract(null); [EOL]         fail("expecting IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     f1 = Fraction.getFraction(1, 32768 * 3); [EOL]     f2 = Fraction.getFraction(1, 59049); [EOL]     f = f1.subtract(f2); [EOL]     assertEquals(-13085, f.getNumerator()); [EOL]     assertEquals(1934917632, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(Integer.MIN_VALUE, 3); [EOL]     f2 = Fraction.ONE_THIRD.negate(); [EOL]     f = f1.subtract(f2); [EOL]     assertEquals(Integer.MIN_VALUE + 1, f.getNumerator()); [EOL]     assertEquals(3, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(Integer.MAX_VALUE, 1); [EOL]     f2 = Fraction.ONE; [EOL]     f = f1.subtract(f2); [EOL]     assertEquals(Integer.MAX_VALUE - 1, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL]     try { [EOL]         f1 = Fraction.getFraction(1, Integer.MAX_VALUE); [EOL]         f2 = Fraction.getFraction(1, Integer.MAX_VALUE - 1); [EOL]         f = f1.subtract(f2); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     f1 = Fraction.getFraction(Integer.MIN_VALUE, 5); [EOL]     f2 = Fraction.getFraction(1, 5); [EOL]     try { [EOL]         f = f1.subtract(f2); [EOL]         fail("expecting ArithmeticException but got: " + f.toString()); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     try { [EOL]         f = Fraction.getFraction(Integer.MIN_VALUE, 1); [EOL]         f = f.subtract(Fraction.ONE); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     try { [EOL]         f = Fraction.getFraction(Integer.MAX_VALUE, 1); [EOL]         f = f.subtract(Fraction.ONE.negate()); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     f1 = Fraction.getFraction(3, 327680); [EOL]     f2 = Fraction.getFraction(2, 59049); [EOL]     try { [EOL]         f = f1.subtract(f2); [EOL]         fail("expecting ArithmeticException but got: " + f.toString()); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL] }
@Test [EOL] public void testSubtract() { [EOL]     Fraction f = null; [EOL]     Fraction f1 = null; [EOL]     Fraction f2 = null; [EOL]     f1 = Fraction.getFraction(3, 5); [EOL]     f2 = Fraction.getFraction(1, 5); [EOL]     f = f1.subtract(f2); [EOL]     assertEquals(2, f.getNumerator()); [EOL]     assertEquals(5, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(7, 5); [EOL]     f2 = Fraction.getFraction(2, 5); [EOL]     f = f1.subtract(f2); [EOL]     assertEquals(1, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(3, 5); [EOL]     f2 = Fraction.getFraction(3, 5); [EOL]     f = f1.subtract(f2); [EOL]     assertEquals(0, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(3, 5); [EOL]     f2 = Fraction.getFraction(-4, 5); [EOL]     f = f1.subtract(f2); [EOL]     assertEquals(7, f.getNumerator()); [EOL]     assertEquals(5, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(0, 5); [EOL]     f2 = Fraction.getFraction(4, 5); [EOL]     f = f1.subtract(f2); [EOL]     assertEquals(-4, f.getNumerator()); [EOL]     assertEquals(5, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(0, 5); [EOL]     f2 = Fraction.getFraction(-4, 5); [EOL]     f = f1.subtract(f2); [EOL]     assertEquals(4, f.getNumerator()); [EOL]     assertEquals(5, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(3, 5); [EOL]     f2 = Fraction.getFraction(1, 2); [EOL]     f = f1.subtract(f2); [EOL]     assertEquals(1, f.getNumerator()); [EOL]     assertEquals(10, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(0, 5); [EOL]     f2 = Fraction.getFraction(1, 5); [EOL]     f = f2.subtract(f1); [EOL]     assertSame(f2, f); [EOL]     try { [EOL]         f.subtract(null); [EOL]         fail("expecting IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     f1 = Fraction.getFraction(1, 32768 * 3); [EOL]     f2 = Fraction.getFraction(1, 59049); [EOL]     f = f1.subtract(f2); [EOL]     assertEquals(-13085, f.getNumerator()); [EOL]     assertEquals(1934917632, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(Integer.MIN_VALUE, 3); [EOL]     f2 = Fraction.ONE_THIRD.negate(); [EOL]     f = f1.subtract(f2); [EOL]     assertEquals(Integer.MIN_VALUE + 1, f.getNumerator()); [EOL]     assertEquals(3, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(Integer.MAX_VALUE, 1); [EOL]     f2 = Fraction.ONE; [EOL]     f = f1.subtract(f2); [EOL]     assertEquals(Integer.MAX_VALUE - 1, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL]     try { [EOL]         f1 = Fraction.getFraction(1, Integer.MAX_VALUE); [EOL]         f2 = Fraction.getFraction(1, Integer.MAX_VALUE - 1); [EOL]         f = f1.subtract(f2); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     f1 = Fraction.getFraction(Integer.MIN_VALUE, 5); [EOL]     f2 = Fraction.getFraction(1, 5); [EOL]     try { [EOL]         f = f1.subtract(f2); [EOL]         fail("expecting ArithmeticException but got: " + f.toString()); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     try { [EOL]         f = Fraction.getFraction(Integer.MIN_VALUE, 1); [EOL]         f = f.subtract(Fraction.ONE); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     try { [EOL]         f = Fraction.getFraction(Integer.MAX_VALUE, 1); [EOL]         f = f.subtract(Fraction.ONE.negate()); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     f1 = Fraction.getFraction(3, 327680); [EOL]     f2 = Fraction.getFraction(2, 59049); [EOL]     try { [EOL]         f = f1.subtract(f2); [EOL]         fail("expecting ArithmeticException but got: " + f.toString()); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL] }
@Test [EOL] public void testSubtract() { [EOL]     Fraction f = null; [EOL]     Fraction f1 = null; [EOL]     Fraction f2 = null; [EOL]     f1 = Fraction.getFraction(3, 5); [EOL]     f2 = Fraction.getFraction(1, 5); [EOL]     f = f1.subtract(f2); [EOL]     assertEquals(2, f.getNumerator()); [EOL]     assertEquals(5, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(7, 5); [EOL]     f2 = Fraction.getFraction(2, 5); [EOL]     f = f1.subtract(f2); [EOL]     assertEquals(1, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(3, 5); [EOL]     f2 = Fraction.getFraction(3, 5); [EOL]     f = f1.subtract(f2); [EOL]     assertEquals(0, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(3, 5); [EOL]     f2 = Fraction.getFraction(-4, 5); [EOL]     f = f1.subtract(f2); [EOL]     assertEquals(7, f.getNumerator()); [EOL]     assertEquals(5, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(0, 5); [EOL]     f2 = Fraction.getFraction(4, 5); [EOL]     f = f1.subtract(f2); [EOL]     assertEquals(-4, f.getNumerator()); [EOL]     assertEquals(5, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(0, 5); [EOL]     f2 = Fraction.getFraction(-4, 5); [EOL]     f = f1.subtract(f2); [EOL]     assertEquals(4, f.getNumerator()); [EOL]     assertEquals(5, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(3, 5); [EOL]     f2 = Fraction.getFraction(1, 2); [EOL]     f = f1.subtract(f2); [EOL]     assertEquals(1, f.getNumerator()); [EOL]     assertEquals(10, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(0, 5); [EOL]     f2 = Fraction.getFraction(1, 5); [EOL]     f = f2.subtract(f1); [EOL]     assertSame(f2, f); [EOL]     try { [EOL]         f.subtract(null); [EOL]         fail("expecting IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     f1 = Fraction.getFraction(1, 32768 * 3); [EOL]     f2 = Fraction.getFraction(1, 59049); [EOL]     f = f1.subtract(f2); [EOL]     assertEquals(-13085, f.getNumerator()); [EOL]     assertEquals(1934917632, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(Integer.MIN_VALUE, 3); [EOL]     f2 = Fraction.ONE_THIRD.negate(); [EOL]     f = f1.subtract(f2); [EOL]     assertEquals(Integer.MIN_VALUE + 1, f.getNumerator()); [EOL]     assertEquals(3, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(Integer.MAX_VALUE, 1); [EOL]     f2 = Fraction.ONE; [EOL]     f = f1.subtract(f2); [EOL]     assertEquals(Integer.MAX_VALUE - 1, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL]     try { [EOL]         f1 = Fraction.getFraction(1, Integer.MAX_VALUE); [EOL]         f2 = Fraction.getFraction(1, Integer.MAX_VALUE - 1); [EOL]         f = f1.subtract(f2); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     f1 = Fraction.getFraction(Integer.MIN_VALUE, 5); [EOL]     f2 = Fraction.getFraction(1, 5); [EOL]     try { [EOL]         f = f1.subtract(f2); [EOL]         fail("expecting ArithmeticException but got: " + f.toString()); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     try { [EOL]         f = Fraction.getFraction(Integer.MIN_VALUE, 1); [EOL]         f = f.subtract(Fraction.ONE); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     try { [EOL]         f = Fraction.getFraction(Integer.MAX_VALUE, 1); [EOL]         f = f.subtract(Fraction.ONE.negate()); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     f1 = Fraction.getFraction(3, 327680); [EOL]     f2 = Fraction.getFraction(2, 59049); [EOL]     try { [EOL]         f = f1.subtract(f2); [EOL]         fail("expecting ArithmeticException but got: " + f.toString()); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL] }
@Test [EOL] public void testSubtract() { [EOL]     Fraction f = null; [EOL]     Fraction f1 = null; [EOL]     Fraction f2 = null; [EOL]     f1 = Fraction.getFraction(3, 5); [EOL]     f2 = Fraction.getFraction(1, 5); [EOL]     f = f1.subtract(f2); [EOL]     assertEquals(2, f.getNumerator()); [EOL]     assertEquals(5, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(7, 5); [EOL]     f2 = Fraction.getFraction(2, 5); [EOL]     f = f1.subtract(f2); [EOL]     assertEquals(1, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(3, 5); [EOL]     f2 = Fraction.getFraction(3, 5); [EOL]     f = f1.subtract(f2); [EOL]     assertEquals(0, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(3, 5); [EOL]     f2 = Fraction.getFraction(-4, 5); [EOL]     f = f1.subtract(f2); [EOL]     assertEquals(7, f.getNumerator()); [EOL]     assertEquals(5, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(0, 5); [EOL]     f2 = Fraction.getFraction(4, 5); [EOL]     f = f1.subtract(f2); [EOL]     assertEquals(-4, f.getNumerator()); [EOL]     assertEquals(5, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(0, 5); [EOL]     f2 = Fraction.getFraction(-4, 5); [EOL]     f = f1.subtract(f2); [EOL]     assertEquals(4, f.getNumerator()); [EOL]     assertEquals(5, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(3, 5); [EOL]     f2 = Fraction.getFraction(1, 2); [EOL]     f = f1.subtract(f2); [EOL]     assertEquals(1, f.getNumerator()); [EOL]     assertEquals(10, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(0, 5); [EOL]     f2 = Fraction.getFraction(1, 5); [EOL]     f = f2.subtract(f1); [EOL]     assertSame(f2, f); [EOL]     try { [EOL]         f.subtract(null); [EOL]         fail("expecting IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     f1 = Fraction.getFraction(1, 32768 * 3); [EOL]     f2 = Fraction.getFraction(1, 59049); [EOL]     f = f1.subtract(f2); [EOL]     assertEquals(-13085, f.getNumerator()); [EOL]     assertEquals(1934917632, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(Integer.MIN_VALUE, 3); [EOL]     f2 = Fraction.ONE_THIRD.negate(); [EOL]     f = f1.subtract(f2); [EOL]     assertEquals(Integer.MIN_VALUE + 1, f.getNumerator()); [EOL]     assertEquals(3, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(Integer.MAX_VALUE, 1); [EOL]     f2 = Fraction.ONE; [EOL]     f = f1.subtract(f2); [EOL]     assertEquals(Integer.MAX_VALUE - 1, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL]     try { [EOL]         f1 = Fraction.getFraction(1, Integer.MAX_VALUE); [EOL]         f2 = Fraction.getFraction(1, Integer.MAX_VALUE - 1); [EOL]         f = f1.subtract(f2); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     f1 = Fraction.getFraction(Integer.MIN_VALUE, 5); [EOL]     f2 = Fraction.getFraction(1, 5); [EOL]     try { [EOL]         f = f1.subtract(f2); [EOL]         fail("expecting ArithmeticException but got: " + f.toString()); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     try { [EOL]         f = Fraction.getFraction(Integer.MIN_VALUE, 1); [EOL]         f = f.subtract(Fraction.ONE); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     try { [EOL]         f = Fraction.getFraction(Integer.MAX_VALUE, 1); [EOL]         f = f.subtract(Fraction.ONE.negate()); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     f1 = Fraction.getFraction(3, 327680); [EOL]     f2 = Fraction.getFraction(2, 59049); [EOL]     try { [EOL]         f = f1.subtract(f2); [EOL]         fail("expecting ArithmeticException but got: " + f.toString()); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL] }
@Test [EOL] public void testSubtract() { [EOL]     Fraction f = null; [EOL]     Fraction f1 = null; [EOL]     Fraction f2 = null; [EOL]     f1 = Fraction.getFraction(3, 5); [EOL]     f2 = Fraction.getFraction(1, 5); [EOL]     f = f1.subtract(f2); [EOL]     assertEquals(2, f.getNumerator()); [EOL]     assertEquals(5, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(7, 5); [EOL]     f2 = Fraction.getFraction(2, 5); [EOL]     f = f1.subtract(f2); [EOL]     assertEquals(1, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(3, 5); [EOL]     f2 = Fraction.getFraction(3, 5); [EOL]     f = f1.subtract(f2); [EOL]     assertEquals(0, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(3, 5); [EOL]     f2 = Fraction.getFraction(-4, 5); [EOL]     f = f1.subtract(f2); [EOL]     assertEquals(7, f.getNumerator()); [EOL]     assertEquals(5, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(0, 5); [EOL]     f2 = Fraction.getFraction(4, 5); [EOL]     f = f1.subtract(f2); [EOL]     assertEquals(-4, f.getNumerator()); [EOL]     assertEquals(5, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(0, 5); [EOL]     f2 = Fraction.getFraction(-4, 5); [EOL]     f = f1.subtract(f2); [EOL]     assertEquals(4, f.getNumerator()); [EOL]     assertEquals(5, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(3, 5); [EOL]     f2 = Fraction.getFraction(1, 2); [EOL]     f = f1.subtract(f2); [EOL]     assertEquals(1, f.getNumerator()); [EOL]     assertEquals(10, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(0, 5); [EOL]     f2 = Fraction.getFraction(1, 5); [EOL]     f = f2.subtract(f1); [EOL]     assertSame(f2, f); [EOL]     try { [EOL]         f.subtract(null); [EOL]         fail("expecting IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     f1 = Fraction.getFraction(1, 32768 * 3); [EOL]     f2 = Fraction.getFraction(1, 59049); [EOL]     f = f1.subtract(f2); [EOL]     assertEquals(-13085, f.getNumerator()); [EOL]     assertEquals(1934917632, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(Integer.MIN_VALUE, 3); [EOL]     f2 = Fraction.ONE_THIRD.negate(); [EOL]     f = f1.subtract(f2); [EOL]     assertEquals(Integer.MIN_VALUE + 1, f.getNumerator()); [EOL]     assertEquals(3, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(Integer.MAX_VALUE, 1); [EOL]     f2 = Fraction.ONE; [EOL]     f = f1.subtract(f2); [EOL]     assertEquals(Integer.MAX_VALUE - 1, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL]     try { [EOL]         f1 = Fraction.getFraction(1, Integer.MAX_VALUE); [EOL]         f2 = Fraction.getFraction(1, Integer.MAX_VALUE - 1); [EOL]         f = f1.subtract(f2); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     f1 = Fraction.getFraction(Integer.MIN_VALUE, 5); [EOL]     f2 = Fraction.getFraction(1, 5); [EOL]     try { [EOL]         f = f1.subtract(f2); [EOL]         fail("expecting ArithmeticException but got: " + f.toString()); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     try { [EOL]         f = Fraction.getFraction(Integer.MIN_VALUE, 1); [EOL]         f = f.subtract(Fraction.ONE); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     try { [EOL]         f = Fraction.getFraction(Integer.MAX_VALUE, 1); [EOL]         f = f.subtract(Fraction.ONE.negate()); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     f1 = Fraction.getFraction(3, 327680); [EOL]     f2 = Fraction.getFraction(2, 59049); [EOL]     try { [EOL]         f = f1.subtract(f2); [EOL]         fail("expecting ArithmeticException but got: " + f.toString()); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL] }
@Test [EOL] public void testSubtract() { [EOL]     Fraction f = null; [EOL]     Fraction f1 = null; [EOL]     Fraction f2 = null; [EOL]     f1 = Fraction.getFraction(3, 5); [EOL]     f2 = Fraction.getFraction(1, 5); [EOL]     f = f1.subtract(f2); [EOL]     assertEquals(2, f.getNumerator()); [EOL]     assertEquals(5, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(7, 5); [EOL]     f2 = Fraction.getFraction(2, 5); [EOL]     f = f1.subtract(f2); [EOL]     assertEquals(1, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(3, 5); [EOL]     f2 = Fraction.getFraction(3, 5); [EOL]     f = f1.subtract(f2); [EOL]     assertEquals(0, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(3, 5); [EOL]     f2 = Fraction.getFraction(-4, 5); [EOL]     f = f1.subtract(f2); [EOL]     assertEquals(7, f.getNumerator()); [EOL]     assertEquals(5, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(0, 5); [EOL]     f2 = Fraction.getFraction(4, 5); [EOL]     f = f1.subtract(f2); [EOL]     assertEquals(-4, f.getNumerator()); [EOL]     assertEquals(5, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(0, 5); [EOL]     f2 = Fraction.getFraction(-4, 5); [EOL]     f = f1.subtract(f2); [EOL]     assertEquals(4, f.getNumerator()); [EOL]     assertEquals(5, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(3, 5); [EOL]     f2 = Fraction.getFraction(1, 2); [EOL]     f = f1.subtract(f2); [EOL]     assertEquals(1, f.getNumerator()); [EOL]     assertEquals(10, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(0, 5); [EOL]     f2 = Fraction.getFraction(1, 5); [EOL]     f = f2.subtract(f1); [EOL]     assertSame(f2, f); [EOL]     try { [EOL]         f.subtract(null); [EOL]         fail("expecting IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     f1 = Fraction.getFraction(1, 32768 * 3); [EOL]     f2 = Fraction.getFraction(1, 59049); [EOL]     f = f1.subtract(f2); [EOL]     assertEquals(-13085, f.getNumerator()); [EOL]     assertEquals(1934917632, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(Integer.MIN_VALUE, 3); [EOL]     f2 = Fraction.ONE_THIRD.negate(); [EOL]     f = f1.subtract(f2); [EOL]     assertEquals(Integer.MIN_VALUE + 1, f.getNumerator()); [EOL]     assertEquals(3, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(Integer.MAX_VALUE, 1); [EOL]     f2 = Fraction.ONE; [EOL]     f = f1.subtract(f2); [EOL]     assertEquals(Integer.MAX_VALUE - 1, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL]     try { [EOL]         f1 = Fraction.getFraction(1, Integer.MAX_VALUE); [EOL]         f2 = Fraction.getFraction(1, Integer.MAX_VALUE - 1); [EOL]         f = f1.subtract(f2); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     f1 = Fraction.getFraction(Integer.MIN_VALUE, 5); [EOL]     f2 = Fraction.getFraction(1, 5); [EOL]     try { [EOL]         f = f1.subtract(f2); [EOL]         fail("expecting ArithmeticException but got: " + f.toString()); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     try { [EOL]         f = Fraction.getFraction(Integer.MIN_VALUE, 1); [EOL]         f = f.subtract(Fraction.ONE); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     try { [EOL]         f = Fraction.getFraction(Integer.MAX_VALUE, 1); [EOL]         f = f.subtract(Fraction.ONE.negate()); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     f1 = Fraction.getFraction(3, 327680); [EOL]     f2 = Fraction.getFraction(2, 59049); [EOL]     try { [EOL]         f = f1.subtract(f2); [EOL]         fail("expecting ArithmeticException but got: " + f.toString()); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL] }
@Test [EOL] public void testIndexOf_charInt() { [EOL]     assertEquals(-1, StringUtils.indexOf(null, ' ', 0)); [EOL]     assertEquals(-1, StringUtils.indexOf(null, ' ', -1)); [EOL]     assertEquals(-1, StringUtils.indexOf("", ' ', 0)); [EOL]     assertEquals(-1, StringUtils.indexOf("", ' ', -1)); [EOL]     assertEquals(0, StringUtils.indexOf("aabaabaa", 'a', 0)); [EOL]     assertEquals(2, StringUtils.indexOf("aabaabaa", 'b', 0)); [EOL]     assertEquals(5, StringUtils.indexOf("aabaabaa", 'b', 3)); [EOL]     assertEquals(-1, StringUtils.indexOf("aabaabaa", 'b', 9)); [EOL]     assertEquals(2, StringUtils.indexOf("aabaabaa", 'b', -1)); [EOL]     assertEquals(5, StringUtils.indexOf(new StringBuilder("aabaabaa"), 'b', 3)); [EOL] }
@Test [EOL] public void testIndexOf_charInt() { [EOL]     assertEquals(-1, StringUtils.indexOf(null, ' ', 0)); [EOL]     assertEquals(-1, StringUtils.indexOf(null, ' ', -1)); [EOL]     assertEquals(-1, StringUtils.indexOf("", ' ', 0)); [EOL]     assertEquals(-1, StringUtils.indexOf("", ' ', -1)); [EOL]     assertEquals(0, StringUtils.indexOf("aabaabaa", 'a', 0)); [EOL]     assertEquals(2, StringUtils.indexOf("aabaabaa", 'b', 0)); [EOL]     assertEquals(5, StringUtils.indexOf("aabaabaa", 'b', 3)); [EOL]     assertEquals(-1, StringUtils.indexOf("aabaabaa", 'b', 9)); [EOL]     assertEquals(2, StringUtils.indexOf("aabaabaa", 'b', -1)); [EOL]     assertEquals(5, StringUtils.indexOf(new StringBuilder("aabaabaa"), 'b', 3)); [EOL] }
@Test [EOL] public void testIndexOf_charInt() { [EOL]     assertEquals(-1, StringUtils.indexOf(null, ' ', 0)); [EOL]     assertEquals(-1, StringUtils.indexOf(null, ' ', -1)); [EOL]     assertEquals(-1, StringUtils.indexOf("", ' ', 0)); [EOL]     assertEquals(-1, StringUtils.indexOf("", ' ', -1)); [EOL]     assertEquals(0, StringUtils.indexOf("aabaabaa", 'a', 0)); [EOL]     assertEquals(2, StringUtils.indexOf("aabaabaa", 'b', 0)); [EOL]     assertEquals(5, StringUtils.indexOf("aabaabaa", 'b', 3)); [EOL]     assertEquals(-1, StringUtils.indexOf("aabaabaa", 'b', 9)); [EOL]     assertEquals(2, StringUtils.indexOf("aabaabaa", 'b', -1)); [EOL]     assertEquals(5, StringUtils.indexOf(new StringBuilder("aabaabaa"), 'b', 3)); [EOL] }
@Test [EOL] public void testIndexOf_charInt() { [EOL]     assertEquals(-1, StringUtils.indexOf(null, ' ', 0)); [EOL]     assertEquals(-1, StringUtils.indexOf(null, ' ', -1)); [EOL]     assertEquals(-1, StringUtils.indexOf("", ' ', 0)); [EOL]     assertEquals(-1, StringUtils.indexOf("", ' ', -1)); [EOL]     assertEquals(0, StringUtils.indexOf("aabaabaa", 'a', 0)); [EOL]     assertEquals(2, StringUtils.indexOf("aabaabaa", 'b', 0)); [EOL]     assertEquals(5, StringUtils.indexOf("aabaabaa", 'b', 3)); [EOL]     assertEquals(-1, StringUtils.indexOf("aabaabaa", 'b', 9)); [EOL]     assertEquals(2, StringUtils.indexOf("aabaabaa", 'b', -1)); [EOL]     assertEquals(5, StringUtils.indexOf(new StringBuilder("aabaabaa"), 'b', 3)); [EOL] }
@Test [EOL] public void testIndexOf_charInt() { [EOL]     assertEquals(-1, StringUtils.indexOf(null, ' ', 0)); [EOL]     assertEquals(-1, StringUtils.indexOf(null, ' ', -1)); [EOL]     assertEquals(-1, StringUtils.indexOf("", ' ', 0)); [EOL]     assertEquals(-1, StringUtils.indexOf("", ' ', -1)); [EOL]     assertEquals(0, StringUtils.indexOf("aabaabaa", 'a', 0)); [EOL]     assertEquals(2, StringUtils.indexOf("aabaabaa", 'b', 0)); [EOL]     assertEquals(5, StringUtils.indexOf("aabaabaa", 'b', 3)); [EOL]     assertEquals(-1, StringUtils.indexOf("aabaabaa", 'b', 9)); [EOL]     assertEquals(2, StringUtils.indexOf("aabaabaa", 'b', -1)); [EOL]     assertEquals(5, StringUtils.indexOf(new StringBuilder("aabaabaa"), 'b', 3)); [EOL] }
@Test [EOL] public void testIndexOf_charInt() { [EOL]     assertEquals(-1, StringUtils.indexOf(null, ' ', 0)); [EOL]     assertEquals(-1, StringUtils.indexOf(null, ' ', -1)); [EOL]     assertEquals(-1, StringUtils.indexOf("", ' ', 0)); [EOL]     assertEquals(-1, StringUtils.indexOf("", ' ', -1)); [EOL]     assertEquals(0, StringUtils.indexOf("aabaabaa", 'a', 0)); [EOL]     assertEquals(2, StringUtils.indexOf("aabaabaa", 'b', 0)); [EOL]     assertEquals(5, StringUtils.indexOf("aabaabaa", 'b', 3)); [EOL]     assertEquals(-1, StringUtils.indexOf("aabaabaa", 'b', 9)); [EOL]     assertEquals(2, StringUtils.indexOf("aabaabaa", 'b', -1)); [EOL]     assertEquals(5, StringUtils.indexOf(new StringBuilder("aabaabaa"), 'b', 3)); [EOL] }
@Test [EOL] public void testIndexOf_charInt() { [EOL]     assertEquals(-1, StringUtils.indexOf(null, ' ', 0)); [EOL]     assertEquals(-1, StringUtils.indexOf(null, ' ', -1)); [EOL]     assertEquals(-1, StringUtils.indexOf("", ' ', 0)); [EOL]     assertEquals(-1, StringUtils.indexOf("", ' ', -1)); [EOL]     assertEquals(0, StringUtils.indexOf("aabaabaa", 'a', 0)); [EOL]     assertEquals(2, StringUtils.indexOf("aabaabaa", 'b', 0)); [EOL]     assertEquals(5, StringUtils.indexOf("aabaabaa", 'b', 3)); [EOL]     assertEquals(-1, StringUtils.indexOf("aabaabaa", 'b', 9)); [EOL]     assertEquals(2, StringUtils.indexOf("aabaabaa", 'b', -1)); [EOL]     assertEquals(5, StringUtils.indexOf(new StringBuilder("aabaabaa"), 'b', 3)); [EOL] }
@Test [EOL] public void testIndexOf_charInt() { [EOL]     assertEquals(-1, StringUtils.indexOf(null, ' ', 0)); [EOL]     assertEquals(-1, StringUtils.indexOf(null, ' ', -1)); [EOL]     assertEquals(-1, StringUtils.indexOf("", ' ', 0)); [EOL]     assertEquals(-1, StringUtils.indexOf("", ' ', -1)); [EOL]     assertEquals(0, StringUtils.indexOf("aabaabaa", 'a', 0)); [EOL]     assertEquals(2, StringUtils.indexOf("aabaabaa", 'b', 0)); [EOL]     assertEquals(5, StringUtils.indexOf("aabaabaa", 'b', 3)); [EOL]     assertEquals(-1, StringUtils.indexOf("aabaabaa", 'b', 9)); [EOL]     assertEquals(2, StringUtils.indexOf("aabaabaa", 'b', -1)); [EOL]     assertEquals(5, StringUtils.indexOf(new StringBuilder("aabaabaa"), 'b', 3)); [EOL] }
@Test [EOL] public void testStartsWithAny() { [EOL]     assertFalse(StringUtils.startsWithAny(null, (String[]) null)); [EOL]     assertFalse(StringUtils.startsWithAny(null, "abc")); [EOL]     assertFalse(StringUtils.startsWithAny("abcxyz", (String[]) null)); [EOL]     assertFalse(StringUtils.startsWithAny("abcxyz")); [EOL]     assertTrue(StringUtils.startsWithAny("abcxyz", "abc")); [EOL]     assertTrue(StringUtils.startsWithAny("abcxyz", null, "xyz", "abc")); [EOL]     assertFalse(StringUtils.startsWithAny("abcxyz", null, "xyz", "abcd")); [EOL]     assertTrue("StringUtils.startsWithAny(abcxyz, StringBuilder(xyz), StringBuffer(abc))", StringUtils.startsWithAny("abcxyz", new StringBuilder("xyz"), new StringBuffer("abc"))); [EOL]     assertTrue("StringUtils.startsWithAny( StrBuilder(abcxyz), StringBuilder(xyz), StringBuffer(abc))", StringUtils.startsWithAny(new StrBuilder("abcxyz"), new StringBuilder("xyz"), new StringBuffer("abc"))); [EOL] }
@Test [EOL] public void testCSVSimple() { [EOL]     this.testCSV(CSV_SIMPLE_FIXTURE); [EOL] }
@Test [EOL] public void testCSVSimple() { [EOL]     this.testCSV(CSV_SIMPLE_FIXTURE); [EOL] }
@Test [EOL] public void testCSVSimple() { [EOL]     this.testCSV(CSV_SIMPLE_FIXTURE); [EOL] }
@Test [EOL] public void testEscapeSurrogatePairs() throws Exception { [EOL]     assertEquals("\uD83D\uDE30", StringEscapeUtils.escapeCsv("\uD83D\uDE30")); [EOL]     assertEquals("\uD800\uDC00", StringEscapeUtils.escapeCsv("\uD800\uDC00")); [EOL]     assertEquals("\uD834\uDD1E", StringEscapeUtils.escapeCsv("\uD834\uDD1E")); [EOL]     assertEquals("\uDBFF\uDFFD", StringEscapeUtils.escapeCsv("\uDBFF\uDFFD")); [EOL]     assertEquals("\uDBFF\uDFFD", StringEscapeUtils.escapeHtml3("\uDBFF\uDFFD")); [EOL]     assertEquals("\uDBFF\uDFFD", StringEscapeUtils.escapeHtml4("\uDBFF\uDFFD")); [EOL]     assertEquals("\uDBFF\uDFFD", StringEscapeUtils.escapeXml("\uDBFF\uDFFD")); [EOL] }
@Test [EOL] public void testEscapeSurrogatePairs() throws Exception { [EOL]     assertEquals("\uD83D\uDE30", StringEscapeUtils.escapeCsv("\uD83D\uDE30")); [EOL]     assertEquals("\uD800\uDC00", StringEscapeUtils.escapeCsv("\uD800\uDC00")); [EOL]     assertEquals("\uD834\uDD1E", StringEscapeUtils.escapeCsv("\uD834\uDD1E")); [EOL]     assertEquals("\uDBFF\uDFFD", StringEscapeUtils.escapeCsv("\uDBFF\uDFFD")); [EOL]     assertEquals("\uDBFF\uDFFD", StringEscapeUtils.escapeHtml3("\uDBFF\uDFFD")); [EOL]     assertEquals("\uDBFF\uDFFD", StringEscapeUtils.escapeHtml4("\uDBFF\uDFFD")); [EOL]     assertEquals("\uDBFF\uDFFD", StringEscapeUtils.escapeXml("\uDBFF\uDFFD")); [EOL] }
@Test [EOL] public void testEscapeSurrogatePairs() throws Exception { [EOL]     assertEquals("\uD83D\uDE30", StringEscapeUtils.escapeCsv("\uD83D\uDE30")); [EOL]     assertEquals("\uD800\uDC00", StringEscapeUtils.escapeCsv("\uD800\uDC00")); [EOL]     assertEquals("\uD834\uDD1E", StringEscapeUtils.escapeCsv("\uD834\uDD1E")); [EOL]     assertEquals("\uDBFF\uDFFD", StringEscapeUtils.escapeCsv("\uDBFF\uDFFD")); [EOL]     assertEquals("\uDBFF\uDFFD", StringEscapeUtils.escapeHtml3("\uDBFF\uDFFD")); [EOL]     assertEquals("\uDBFF\uDFFD", StringEscapeUtils.escapeHtml4("\uDBFF\uDFFD")); [EOL]     assertEquals("\uDBFF\uDFFD", StringEscapeUtils.escapeXml("\uDBFF\uDFFD")); [EOL] }
@Test [EOL] public void testEscapeSurrogatePairs() throws Exception { [EOL]     assertEquals("\uD83D\uDE30", StringEscapeUtils.escapeCsv("\uD83D\uDE30")); [EOL]     assertEquals("\uD800\uDC00", StringEscapeUtils.escapeCsv("\uD800\uDC00")); [EOL]     assertEquals("\uD834\uDD1E", StringEscapeUtils.escapeCsv("\uD834\uDD1E")); [EOL]     assertEquals("\uDBFF\uDFFD", StringEscapeUtils.escapeCsv("\uDBFF\uDFFD")); [EOL]     assertEquals("\uDBFF\uDFFD", StringEscapeUtils.escapeHtml3("\uDBFF\uDFFD")); [EOL]     assertEquals("\uDBFF\uDFFD", StringEscapeUtils.escapeHtml4("\uDBFF\uDFFD")); [EOL]     assertEquals("\uDBFF\uDFFD", StringEscapeUtils.escapeXml("\uDBFF\uDFFD")); [EOL] }
@Test [EOL] public void testEscapeSurrogatePairs() throws Exception { [EOL]     assertEquals("\uD83D\uDE30", StringEscapeUtils.escapeCsv("\uD83D\uDE30")); [EOL]     assertEquals("\uD800\uDC00", StringEscapeUtils.escapeCsv("\uD800\uDC00")); [EOL]     assertEquals("\uD834\uDD1E", StringEscapeUtils.escapeCsv("\uD834\uDD1E")); [EOL]     assertEquals("\uDBFF\uDFFD", StringEscapeUtils.escapeCsv("\uDBFF\uDFFD")); [EOL]     assertEquals("\uDBFF\uDFFD", StringEscapeUtils.escapeHtml3("\uDBFF\uDFFD")); [EOL]     assertEquals("\uDBFF\uDFFD", StringEscapeUtils.escapeHtml4("\uDBFF\uDFFD")); [EOL]     assertEquals("\uDBFF\uDFFD", StringEscapeUtils.escapeXml("\uDBFF\uDFFD")); [EOL] }
@Test [EOL] public void testEscapeSurrogatePairs() throws Exception { [EOL]     assertEquals("\uD83D\uDE30", StringEscapeUtils.escapeCsv("\uD83D\uDE30")); [EOL]     assertEquals("\uD800\uDC00", StringEscapeUtils.escapeCsv("\uD800\uDC00")); [EOL]     assertEquals("\uD834\uDD1E", StringEscapeUtils.escapeCsv("\uD834\uDD1E")); [EOL]     assertEquals("\uDBFF\uDFFD", StringEscapeUtils.escapeCsv("\uDBFF\uDFFD")); [EOL]     assertEquals("\uDBFF\uDFFD", StringEscapeUtils.escapeHtml3("\uDBFF\uDFFD")); [EOL]     assertEquals("\uDBFF\uDFFD", StringEscapeUtils.escapeHtml4("\uDBFF\uDFFD")); [EOL]     assertEquals("\uDBFF\uDFFD", StringEscapeUtils.escapeXml("\uDBFF\uDFFD")); [EOL] }
@Test [EOL] public void testLocales_Short_AD() throws Exception { [EOL]     testLocales(SHORT_FORMAT, false); [EOL] }
@Test [EOL] public void testLang538() { [EOL]     final GregorianCalendar cal = new GregorianCalendar(TimeZone.getTimeZone("GMT-8")); [EOL]     cal.clear(); [EOL]     cal.set(2009, 9, 16, 8, 42, 16); [EOL]     final DatePrinter format = getInstance("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", TimeZone.getTimeZone("GMT")); [EOL]     assertEquals("dateTime", "2009-10-16T16:42:16.000Z", format.format(cal.getTime())); [EOL]     assertEquals("dateTime", "2009-10-16T08:42:16.000Z", format.format(cal)); [EOL] }
@Test [EOL] public void testLang538() { [EOL]     final GregorianCalendar cal = new GregorianCalendar(TimeZone.getTimeZone("GMT-8")); [EOL]     cal.clear(); [EOL]     cal.set(2009, 9, 16, 8, 42, 16); [EOL]     final DatePrinter format = getInstance("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", TimeZone.getTimeZone("GMT")); [EOL]     assertEquals("dateTime", "2009-10-16T16:42:16.000Z", format.format(cal.getTime())); [EOL]     assertEquals("dateTime", "2009-10-16T08:42:16.000Z", format.format(cal)); [EOL] }
@Test [EOL] public void testLang538() { [EOL]     final GregorianCalendar cal = new GregorianCalendar(TimeZone.getTimeZone("GMT-8")); [EOL]     cal.clear(); [EOL]     cal.set(2009, 9, 16, 8, 42, 16); [EOL]     final DatePrinter format = getInstance("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", TimeZone.getTimeZone("GMT")); [EOL]     assertEquals("dateTime", "2009-10-16T16:42:16.000Z", format.format(cal.getTime())); [EOL]     assertEquals("dateTime", "2009-10-16T08:42:16.000Z", format.format(cal)); [EOL] }
@Test [EOL] public void testLang538() { [EOL]     final GregorianCalendar cal = new GregorianCalendar(TimeZone.getTimeZone("GMT-8")); [EOL]     cal.clear(); [EOL]     cal.set(2009, 9, 16, 8, 42, 16); [EOL]     final DatePrinter format = getInstance("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", TimeZone.getTimeZone("GMT")); [EOL]     assertEquals("dateTime", "2009-10-16T16:42:16.000Z", format.format(cal.getTime())); [EOL]     assertEquals("dateTime", "2009-10-16T08:42:16.000Z", format.format(cal)); [EOL] }
@Test [EOL] public void testLang538() { [EOL]     final GregorianCalendar cal = new GregorianCalendar(TimeZone.getTimeZone("GMT-8")); [EOL]     cal.clear(); [EOL]     cal.set(2009, 9, 16, 8, 42, 16); [EOL]     final DatePrinter format = getInstance("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", TimeZone.getTimeZone("GMT")); [EOL]     assertEquals("dateTime", "2009-10-16T16:42:16.000Z", format.format(cal.getTime())); [EOL]     assertEquals("dateTime", "2009-10-16T08:42:16.000Z", format.format(cal)); [EOL] }
@Test [EOL] public void testLang538() { [EOL]     final GregorianCalendar cal = new GregorianCalendar(TimeZone.getTimeZone("GMT-8")); [EOL]     cal.clear(); [EOL]     cal.set(2009, 9, 16, 8, 42, 16); [EOL]     final DatePrinter format = getInstance("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", TimeZone.getTimeZone("GMT")); [EOL]     assertEquals("dateTime", "2009-10-16T16:42:16.000Z", format.format(cal.getTime())); [EOL]     assertEquals("dateTime", "2009-10-16T08:42:16.000Z", format.format(cal)); [EOL] }
@Test [EOL] public void testLang303() { [EOL]     final Calendar cal = Calendar.getInstance(); [EOL]     cal.set(2004, 11, 31); [EOL]     DatePrinter format = getInstance(YYYY_MM_DD); [EOL]     final String output = format.format(cal); [EOL]     format = SerializationUtils.deserialize(SerializationUtils.serialize((Serializable) format)); [EOL]     assertEquals(output, format.format(cal)); [EOL] }
@Test [EOL] public void testLang645() { [EOL]     final Locale locale = new Locale("sv", "SE"); [EOL]     final Calendar cal = Calendar.getInstance(); [EOL]     cal.set(2010, 0, 1, 12, 0, 0); [EOL]     final Date d = cal.getTime(); [EOL]     final DatePrinter fdf = getInstance("EEEE', week 'ww", locale); [EOL]     assertEquals("fredag, week 53", fdf.format(d)); [EOL] }
@Test [EOL] public void testLang645() { [EOL]     final Locale locale = new Locale("sv", "SE"); [EOL]     final Calendar cal = Calendar.getInstance(); [EOL]     cal.set(2010, 0, 1, 12, 0, 0); [EOL]     final Date d = cal.getTime(); [EOL]     final DatePrinter fdf = getInstance("EEEE', week 'ww", locale); [EOL]     assertEquals("fredag, week 53", fdf.format(d)); [EOL] }
@Test [EOL] public void testLang645() { [EOL]     final Locale locale = new Locale("sv", "SE"); [EOL]     final Calendar cal = Calendar.getInstance(); [EOL]     cal.set(2010, 0, 1, 12, 0, 0); [EOL]     final Date d = cal.getTime(); [EOL]     final DatePrinter fdf = getInstance("EEEE', week 'ww", locale); [EOL]     assertEquals("fredag, week 53", fdf.format(d)); [EOL] }
@Test [EOL] public void testLang645() { [EOL]     final Locale locale = new Locale("sv", "SE"); [EOL]     final Calendar cal = Calendar.getInstance(); [EOL]     cal.set(2010, 0, 1, 12, 0, 0); [EOL]     final Date d = cal.getTime(); [EOL]     final DatePrinter fdf = getInstance("EEEE', week 'ww", locale); [EOL]     assertEquals("fredag, week 53", fdf.format(d)); [EOL] }
@Test [EOL] public void testLang645() { [EOL]     final Locale locale = new Locale("sv", "SE"); [EOL]     final Calendar cal = Calendar.getInstance(); [EOL]     cal.set(2010, 0, 1, 12, 0, 0); [EOL]     final Date d = cal.getTime(); [EOL]     final DatePrinter fdf = getInstance("EEEE', week 'ww", locale); [EOL]     assertEquals("fredag, week 53", fdf.format(d)); [EOL] }
@Test [EOL] public void testLang645() { [EOL]     final Locale locale = new Locale("sv", "SE"); [EOL]     final Calendar cal = Calendar.getInstance(); [EOL]     cal.set(2010, 0, 1, 12, 0, 0); [EOL]     final Date d = cal.getTime(); [EOL]     final DatePrinter fdf = getInstance("EEEE', week 'ww", locale); [EOL]     assertEquals("fredag, week 53", fdf.format(d)); [EOL] }
@Test [EOL] public void testShortDateStyleWithLocales() { [EOL]     final Locale usLocale = Locale.US; [EOL]     final Locale swedishLocale = new Locale("sv", "SE"); [EOL]     final Calendar cal = Calendar.getInstance(); [EOL]     cal.set(2004, 1, 3); [EOL]     DatePrinter fdf = getDateInstance(FastDateFormat.SHORT, usLocale); [EOL]     assertEquals("2/3/04", fdf.format(cal)); [EOL]     fdf = getDateInstance(FastDateFormat.SHORT, swedishLocale); [EOL]     assertEquals("2004-02-03", fdf.format(cal)); [EOL] }
@Test [EOL] public void testShortDateStyleWithLocales() { [EOL]     final Locale usLocale = Locale.US; [EOL]     final Locale swedishLocale = new Locale("sv", "SE"); [EOL]     final Calendar cal = Calendar.getInstance(); [EOL]     cal.set(2004, 1, 3); [EOL]     DatePrinter fdf = getDateInstance(FastDateFormat.SHORT, usLocale); [EOL]     assertEquals("2/3/04", fdf.format(cal)); [EOL]     fdf = getDateInstance(FastDateFormat.SHORT, swedishLocale); [EOL]     assertEquals("2004-02-03", fdf.format(cal)); [EOL] }
@Test [EOL] public void testShortDateStyleWithLocales() { [EOL]     final Locale usLocale = Locale.US; [EOL]     final Locale swedishLocale = new Locale("sv", "SE"); [EOL]     final Calendar cal = Calendar.getInstance(); [EOL]     cal.set(2004, 1, 3); [EOL]     DatePrinter fdf = getDateInstance(FastDateFormat.SHORT, usLocale); [EOL]     assertEquals("2/3/04", fdf.format(cal)); [EOL]     fdf = getDateInstance(FastDateFormat.SHORT, swedishLocale); [EOL]     assertEquals("2004-02-03", fdf.format(cal)); [EOL] }
@Test [EOL] public void testLocales_Short_AD() throws Exception { [EOL]     testLocales(SHORT_FORMAT, false); [EOL] }
@Test [EOL] public void testLocales_Short_AD() throws Exception { [EOL]     testLocales(SHORT_FORMAT, false); [EOL] }
@Test [EOL] public void testAmPm() throws ParseException { [EOL]     final Calendar cal = Calendar.getInstance(NEW_YORK, Locale.US); [EOL]     cal.clear(); [EOL]     final DateParser h = getInstance("yyyy-MM-dd hh a mm:ss", NEW_YORK, Locale.US); [EOL]     final DateParser K = getInstance("yyyy-MM-dd KK a mm:ss", NEW_YORK, Locale.US); [EOL]     final DateParser k = getInstance("yyyy-MM-dd kk:mm:ss", NEW_YORK, Locale.US); [EOL]     final DateParser H = getInstance("yyyy-MM-dd HH:mm:ss", NEW_YORK, Locale.US); [EOL]     cal.set(2010, 7, 1, 0, 33, 20); [EOL]     assertEquals(cal.getTime(), h.parse("2010-08-01 12 AM 33:20")); [EOL]     assertEquals(cal.getTime(), K.parse("2010-08-01 0 AM 33:20")); [EOL]     assertEquals(cal.getTime(), k.parse("2010-08-01 00:33:20")); [EOL]     assertEquals(cal.getTime(), H.parse("2010-08-01 00:33:20")); [EOL]     cal.set(2010, 7, 1, 3, 33, 20); [EOL]     assertEquals(cal.getTime(), h.parse("2010-08-01 3 AM 33:20")); [EOL]     assertEquals(cal.getTime(), K.parse("2010-08-01 3 AM 33:20")); [EOL]     assertEquals(cal.getTime(), k.parse("2010-08-01 03:33:20")); [EOL]     assertEquals(cal.getTime(), H.parse("2010-08-01 03:33:20")); [EOL]     cal.set(2010, 7, 1, 15, 33, 20); [EOL]     assertEquals(cal.getTime(), h.parse("2010-08-01 3 PM 33:20")); [EOL]     assertEquals(cal.getTime(), K.parse("2010-08-01 3 PM 33:20")); [EOL]     assertEquals(cal.getTime(), k.parse("2010-08-01 15:33:20")); [EOL]     assertEquals(cal.getTime(), H.parse("2010-08-01 15:33:20")); [EOL]     cal.set(2010, 7, 1, 12, 33, 20); [EOL]     assertEquals(cal.getTime(), h.parse("2010-08-01 12 PM 33:20")); [EOL]     assertEquals(cal.getTime(), K.parse("2010-08-01 0 PM 33:20")); [EOL]     assertEquals(cal.getTime(), k.parse("2010-08-01 12:33:20")); [EOL]     assertEquals(cal.getTime(), H.parse("2010-08-01 12:33:20")); [EOL] }
@Test [EOL] public void testAmPm() throws ParseException { [EOL]     final Calendar cal = Calendar.getInstance(NEW_YORK, Locale.US); [EOL]     cal.clear(); [EOL]     final DateParser h = getInstance("yyyy-MM-dd hh a mm:ss", NEW_YORK, Locale.US); [EOL]     final DateParser K = getInstance("yyyy-MM-dd KK a mm:ss", NEW_YORK, Locale.US); [EOL]     final DateParser k = getInstance("yyyy-MM-dd kk:mm:ss", NEW_YORK, Locale.US); [EOL]     final DateParser H = getInstance("yyyy-MM-dd HH:mm:ss", NEW_YORK, Locale.US); [EOL]     cal.set(2010, 7, 1, 0, 33, 20); [EOL]     assertEquals(cal.getTime(), h.parse("2010-08-01 12 AM 33:20")); [EOL]     assertEquals(cal.getTime(), K.parse("2010-08-01 0 AM 33:20")); [EOL]     assertEquals(cal.getTime(), k.parse("2010-08-01 00:33:20")); [EOL]     assertEquals(cal.getTime(), H.parse("2010-08-01 00:33:20")); [EOL]     cal.set(2010, 7, 1, 3, 33, 20); [EOL]     assertEquals(cal.getTime(), h.parse("2010-08-01 3 AM 33:20")); [EOL]     assertEquals(cal.getTime(), K.parse("2010-08-01 3 AM 33:20")); [EOL]     assertEquals(cal.getTime(), k.parse("2010-08-01 03:33:20")); [EOL]     assertEquals(cal.getTime(), H.parse("2010-08-01 03:33:20")); [EOL]     cal.set(2010, 7, 1, 15, 33, 20); [EOL]     assertEquals(cal.getTime(), h.parse("2010-08-01 3 PM 33:20")); [EOL]     assertEquals(cal.getTime(), K.parse("2010-08-01 3 PM 33:20")); [EOL]     assertEquals(cal.getTime(), k.parse("2010-08-01 15:33:20")); [EOL]     assertEquals(cal.getTime(), H.parse("2010-08-01 15:33:20")); [EOL]     cal.set(2010, 7, 1, 12, 33, 20); [EOL]     assertEquals(cal.getTime(), h.parse("2010-08-01 12 PM 33:20")); [EOL]     assertEquals(cal.getTime(), K.parse("2010-08-01 0 PM 33:20")); [EOL]     assertEquals(cal.getTime(), k.parse("2010-08-01 12:33:20")); [EOL]     assertEquals(cal.getTime(), H.parse("2010-08-01 12:33:20")); [EOL] }
@Test [EOL] public void testAmPm() throws ParseException { [EOL]     final Calendar cal = Calendar.getInstance(NEW_YORK, Locale.US); [EOL]     cal.clear(); [EOL]     final DateParser h = getInstance("yyyy-MM-dd hh a mm:ss", NEW_YORK, Locale.US); [EOL]     final DateParser K = getInstance("yyyy-MM-dd KK a mm:ss", NEW_YORK, Locale.US); [EOL]     final DateParser k = getInstance("yyyy-MM-dd kk:mm:ss", NEW_YORK, Locale.US); [EOL]     final DateParser H = getInstance("yyyy-MM-dd HH:mm:ss", NEW_YORK, Locale.US); [EOL]     cal.set(2010, 7, 1, 0, 33, 20); [EOL]     assertEquals(cal.getTime(), h.parse("2010-08-01 12 AM 33:20")); [EOL]     assertEquals(cal.getTime(), K.parse("2010-08-01 0 AM 33:20")); [EOL]     assertEquals(cal.getTime(), k.parse("2010-08-01 00:33:20")); [EOL]     assertEquals(cal.getTime(), H.parse("2010-08-01 00:33:20")); [EOL]     cal.set(2010, 7, 1, 3, 33, 20); [EOL]     assertEquals(cal.getTime(), h.parse("2010-08-01 3 AM 33:20")); [EOL]     assertEquals(cal.getTime(), K.parse("2010-08-01 3 AM 33:20")); [EOL]     assertEquals(cal.getTime(), k.parse("2010-08-01 03:33:20")); [EOL]     assertEquals(cal.getTime(), H.parse("2010-08-01 03:33:20")); [EOL]     cal.set(2010, 7, 1, 15, 33, 20); [EOL]     assertEquals(cal.getTime(), h.parse("2010-08-01 3 PM 33:20")); [EOL]     assertEquals(cal.getTime(), K.parse("2010-08-01 3 PM 33:20")); [EOL]     assertEquals(cal.getTime(), k.parse("2010-08-01 15:33:20")); [EOL]     assertEquals(cal.getTime(), H.parse("2010-08-01 15:33:20")); [EOL]     cal.set(2010, 7, 1, 12, 33, 20); [EOL]     assertEquals(cal.getTime(), h.parse("2010-08-01 12 PM 33:20")); [EOL]     assertEquals(cal.getTime(), K.parse("2010-08-01 0 PM 33:20")); [EOL]     assertEquals(cal.getTime(), k.parse("2010-08-01 12:33:20")); [EOL]     assertEquals(cal.getTime(), H.parse("2010-08-01 12:33:20")); [EOL] }
@Test [EOL] public void testIntegerWithTransients() { [EOL]     testInteger(true); [EOL] }
@Test [EOL] public void testIntegerWithTransients() { [EOL]     testInteger(true); [EOL] }
@Test [EOL] public void testIntegerWithTransients() { [EOL]     testInteger(true); [EOL] }
@Test [EOL] public void testIntegerWithTransients() { [EOL]     testInteger(true); [EOL] }
@Test [EOL] public void testIntegerWithTransients() { [EOL]     testInteger(true); [EOL] }
@Test [EOL] public void testIntegerWithTransients() { [EOL]     testInteger(true); [EOL] }
@Test [EOL] public void testIntegerWithTransients() { [EOL]     testInteger(true); [EOL] }
@Test [EOL] public void testIntegerWithTransients() { [EOL]     testInteger(true); [EOL] }
@Test [EOL] public void testIntegerWithTransients() { [EOL]     testInteger(true); [EOL] }
@Test [EOL] public void testIntegerWithTransients() { [EOL]     testInteger(true); [EOL] }
@Test [EOL] public void testIntegerWithTransients() { [EOL]     testInteger(true); [EOL] }
@Test [EOL] public void testIntegerWithTransients() { [EOL]     testInteger(true); [EOL] }
@Test [EOL] public void testIntegerWithTransients() { [EOL]     testInteger(true); [EOL] }
@Test [EOL] public void testIntegerWithTransients() { [EOL]     testInteger(true); [EOL] }
@Test [EOL] public void testIntegerWithTransients() { [EOL]     testInteger(true); [EOL] }
@Test [EOL] public void testIntegerWithTransients() { [EOL]     testInteger(true); [EOL] }
@Test [EOL] public void testIntegerWithTransients() { [EOL]     testInteger(true); [EOL] }
@Test [EOL] public void testIntegerWithTransients() { [EOL]     testInteger(true); [EOL] }
@Test [EOL] public void testMultiCharArray() { [EOL]     final char[][] array1 = new char[2][2]; [EOL]     final char[][] array2 = new char[2][2]; [EOL]     for (char i = 0; i < array1.length; ++i) { [EOL]         for (char j = 0; j < array1[0].length; j++) { [EOL]             array1[i][j] = i; [EOL]             array2[i][j] = i; [EOL]         } [EOL]     } [EOL]     assertTrue(new EqualsBuilder().append(array1, array1).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(array1, array2).isEquals()); [EOL]     array1[1][1] = 0; [EOL]     assertTrue(!new EqualsBuilder().append(array1, array2).isEquals()); [EOL] }
@Test [EOL] public void testMultiCharArray() { [EOL]     final char[][] array1 = new char[2][2]; [EOL]     final char[][] array2 = new char[2][2]; [EOL]     for (char i = 0; i < array1.length; ++i) { [EOL]         for (char j = 0; j < array1[0].length; j++) { [EOL]             array1[i][j] = i; [EOL]             array2[i][j] = i; [EOL]         } [EOL]     } [EOL]     assertTrue(new EqualsBuilder().append(array1, array1).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(array1, array2).isEquals()); [EOL]     array1[1][1] = 0; [EOL]     assertTrue(!new EqualsBuilder().append(array1, array2).isEquals()); [EOL] }
@Test [EOL] public void testMultiCharArray() { [EOL]     final char[][] array1 = new char[2][2]; [EOL]     final char[][] array2 = new char[2][2]; [EOL]     for (char i = 0; i < array1.length; ++i) { [EOL]         for (char j = 0; j < array1[0].length; j++) { [EOL]             array1[i][j] = i; [EOL]             array2[i][j] = i; [EOL]         } [EOL]     } [EOL]     assertTrue(new EqualsBuilder().append(array1, array1).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(array1, array2).isEquals()); [EOL]     array1[1][1] = 0; [EOL]     assertTrue(!new EqualsBuilder().append(array1, array2).isEquals()); [EOL] }
@Test [EOL] public void testMultiCharArray() { [EOL]     final char[][] array1 = new char[2][2]; [EOL]     final char[][] array2 = new char[2][2]; [EOL]     for (char i = 0; i < array1.length; ++i) { [EOL]         for (char j = 0; j < array1[0].length; j++) { [EOL]             array1[i][j] = i; [EOL]             array2[i][j] = i; [EOL]         } [EOL]     } [EOL]     assertTrue(new EqualsBuilder().append(array1, array1).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(array1, array2).isEquals()); [EOL]     array1[1][1] = 0; [EOL]     assertTrue(!new EqualsBuilder().append(array1, array2).isEquals()); [EOL] }
@Test [EOL] public void testMultiCharArray() { [EOL]     final char[][] array1 = new char[2][2]; [EOL]     final char[][] array2 = new char[2][2]; [EOL]     for (char i = 0; i < array1.length; ++i) { [EOL]         for (char j = 0; j < array1[0].length; j++) { [EOL]             array1[i][j] = i; [EOL]             array2[i][j] = i; [EOL]         } [EOL]     } [EOL]     assertTrue(new EqualsBuilder().append(array1, array1).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(array1, array2).isEquals()); [EOL]     array1[1][1] = 0; [EOL]     assertTrue(!new EqualsBuilder().append(array1, array2).isEquals()); [EOL] }
@Test [EOL] public void testMultiCharArray() { [EOL]     final char[][] array1 = new char[2][2]; [EOL]     final char[][] array2 = new char[2][2]; [EOL]     for (char i = 0; i < array1.length; ++i) { [EOL]         for (char j = 0; j < array1[0].length; j++) { [EOL]             array1[i][j] = i; [EOL]             array2[i][j] = i; [EOL]         } [EOL]     } [EOL]     assertTrue(new EqualsBuilder().append(array1, array1).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(array1, array2).isEquals()); [EOL]     array1[1][1] = 0; [EOL]     assertTrue(!new EqualsBuilder().append(array1, array2).isEquals()); [EOL] }
@Test [EOL] public void testMultiCharArray() { [EOL]     final char[][] array1 = new char[2][2]; [EOL]     final char[][] array2 = new char[2][2]; [EOL]     for (char i = 0; i < array1.length; ++i) { [EOL]         for (char j = 0; j < array1[0].length; j++) { [EOL]             array1[i][j] = i; [EOL]             array2[i][j] = i; [EOL]         } [EOL]     } [EOL]     assertTrue(new EqualsBuilder().append(array1, array1).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(array1, array2).isEquals()); [EOL]     array1[1][1] = 0; [EOL]     assertTrue(!new EqualsBuilder().append(array1, array2).isEquals()); [EOL] }
@Test [EOL] public void testMultiCharArray() { [EOL]     final char[][] array1 = new char[2][2]; [EOL]     final char[][] array2 = new char[2][2]; [EOL]     for (char i = 0; i < array1.length; ++i) { [EOL]         for (char j = 0; j < array1[0].length; j++) { [EOL]             array1[i][j] = i; [EOL]             array2[i][j] = i; [EOL]         } [EOL]     } [EOL]     assertTrue(new EqualsBuilder().append(array1, array1).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(array1, array2).isEquals()); [EOL]     array1[1][1] = 0; [EOL]     assertTrue(!new EqualsBuilder().append(array1, array2).isEquals()); [EOL] }
@Test [EOL] public void testMultiCharArray() { [EOL]     final char[][] array1 = new char[2][2]; [EOL]     final char[][] array2 = new char[2][2]; [EOL]     for (char i = 0; i < array1.length; ++i) { [EOL]         for (char j = 0; j < array1[0].length; j++) { [EOL]             array1[i][j] = i; [EOL]             array2[i][j] = i; [EOL]         } [EOL]     } [EOL]     assertTrue(new EqualsBuilder().append(array1, array1).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(array1, array2).isEquals()); [EOL]     array1[1][1] = 0; [EOL]     assertTrue(!new EqualsBuilder().append(array1, array2).isEquals()); [EOL] }
@Test [EOL] public void testMultiCharArray() { [EOL]     final char[][] array1 = new char[2][2]; [EOL]     final char[][] array2 = new char[2][2]; [EOL]     for (char i = 0; i < array1.length; ++i) { [EOL]         for (char j = 0; j < array1[0].length; j++) { [EOL]             array1[i][j] = i; [EOL]             array2[i][j] = i; [EOL]         } [EOL]     } [EOL]     assertTrue(new EqualsBuilder().append(array1, array1).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(array1, array2).isEquals()); [EOL]     array1[1][1] = 0; [EOL]     assertTrue(!new EqualsBuilder().append(array1, array2).isEquals()); [EOL] }
@Test [EOL] public void testMultiCharArray() { [EOL]     final char[][] array1 = new char[2][2]; [EOL]     final char[][] array2 = new char[2][2]; [EOL]     for (char i = 0; i < array1.length; ++i) { [EOL]         for (char j = 0; j < array1[0].length; j++) { [EOL]             array1[i][j] = i; [EOL]             array2[i][j] = i; [EOL]         } [EOL]     } [EOL]     assertTrue(new EqualsBuilder().append(array1, array1).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(array1, array2).isEquals()); [EOL]     array1[1][1] = 0; [EOL]     assertTrue(!new EqualsBuilder().append(array1, array2).isEquals()); [EOL] }
@Test [EOL] public void testMultiCharArray() { [EOL]     final char[][] array1 = new char[2][2]; [EOL]     final char[][] array2 = new char[2][2]; [EOL]     for (char i = 0; i < array1.length; ++i) { [EOL]         for (char j = 0; j < array1[0].length; j++) { [EOL]             array1[i][j] = i; [EOL]             array2[i][j] = i; [EOL]         } [EOL]     } [EOL]     assertTrue(new EqualsBuilder().append(array1, array1).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(array1, array2).isEquals()); [EOL]     array1[1][1] = 0; [EOL]     assertTrue(!new EqualsBuilder().append(array1, array2).isEquals()); [EOL] }
@Test [EOL] public void testMultiCharArray() { [EOL]     final char[][] array1 = new char[2][2]; [EOL]     final char[][] array2 = new char[2][2]; [EOL]     for (char i = 0; i < array1.length; ++i) { [EOL]         for (char j = 0; j < array1[0].length; j++) { [EOL]             array1[i][j] = i; [EOL]             array2[i][j] = i; [EOL]         } [EOL]     } [EOL]     assertTrue(new EqualsBuilder().append(array1, array1).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(array1, array2).isEquals()); [EOL]     array1[1][1] = 0; [EOL]     assertTrue(!new EqualsBuilder().append(array1, array2).isEquals()); [EOL] }
@Test [EOL] public void testMultiCharArray() { [EOL]     final char[][] array1 = new char[2][2]; [EOL]     final char[][] array2 = new char[2][2]; [EOL]     for (char i = 0; i < array1.length; ++i) { [EOL]         for (char j = 0; j < array1[0].length; j++) { [EOL]             array1[i][j] = i; [EOL]             array2[i][j] = i; [EOL]         } [EOL]     } [EOL]     assertTrue(new EqualsBuilder().append(array1, array1).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(array1, array2).isEquals()); [EOL]     array1[1][1] = 0; [EOL]     assertTrue(!new EqualsBuilder().append(array1, array2).isEquals()); [EOL] }
@Test [EOL] public void testInt() { [EOL]     final int o1 = 1; [EOL]     final int o2 = 2; [EOL]     assertTrue(new EqualsBuilder().append(o1, o1).isEquals()); [EOL]     assertTrue(!new EqualsBuilder().append(o1, o2).isEquals()); [EOL] }
@Test [EOL] public void testInt() { [EOL]     final int o1 = 1; [EOL]     final int o2 = 2; [EOL]     assertTrue(new EqualsBuilder().append(o1, o1).isEquals()); [EOL]     assertTrue(!new EqualsBuilder().append(o1, o2).isEquals()); [EOL] }
@Test [EOL] public void testInt() { [EOL]     final int o1 = 1; [EOL]     final int o2 = 2; [EOL]     assertTrue(new EqualsBuilder().append(o1, o1).isEquals()); [EOL]     assertTrue(!new EqualsBuilder().append(o1, o2).isEquals()); [EOL] }
@Test [EOL] public void testMultiCharArray() { [EOL]     final char[][] array1 = new char[2][2]; [EOL]     final char[][] array2 = new char[2][2]; [EOL]     for (char i = 0; i < array1.length; ++i) { [EOL]         for (char j = 0; j < array1[0].length; j++) { [EOL]             array1[i][j] = i; [EOL]             array2[i][j] = i; [EOL]         } [EOL]     } [EOL]     assertTrue(new EqualsBuilder().append(array1, array1).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(array1, array2).isEquals()); [EOL]     array1[1][1] = 0; [EOL]     assertTrue(!new EqualsBuilder().append(array1, array2).isEquals()); [EOL] }
@Test [EOL] public void testMultiCharArray() { [EOL]     final char[][] array1 = new char[2][2]; [EOL]     final char[][] array2 = new char[2][2]; [EOL]     for (char i = 0; i < array1.length; ++i) { [EOL]         for (char j = 0; j < array1[0].length; j++) { [EOL]             array1[i][j] = i; [EOL]             array2[i][j] = i; [EOL]         } [EOL]     } [EOL]     assertTrue(new EqualsBuilder().append(array1, array1).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(array1, array2).isEquals()); [EOL]     array1[1][1] = 0; [EOL]     assertTrue(!new EqualsBuilder().append(array1, array2).isEquals()); [EOL] }
@Test [EOL] public void testMultiCharArray() { [EOL]     final char[][] array1 = new char[2][2]; [EOL]     final char[][] array2 = new char[2][2]; [EOL]     for (char i = 0; i < array1.length; ++i) { [EOL]         for (char j = 0; j < array1[0].length; j++) { [EOL]             array1[i][j] = i; [EOL]             array2[i][j] = i; [EOL]         } [EOL]     } [EOL]     assertTrue(new EqualsBuilder().append(array1, array1).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(array1, array2).isEquals()); [EOL]     array1[1][1] = 0; [EOL]     assertTrue(!new EqualsBuilder().append(array1, array2).isEquals()); [EOL] }
@Test [EOL] public void testByteArrayHiddenByObject() { [EOL]     final byte[] array1 = new byte[2]; [EOL]     array1[0] = 5; [EOL]     array1[1] = 6; [EOL]     final byte[] array2 = new byte[2]; [EOL]     array2[0] = 5; [EOL]     array2[1] = 6; [EOL]     final Object obj1 = array1; [EOL]     final Object obj2 = array2; [EOL]     assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(obj1, array1).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(obj1, array2).isEquals()); [EOL]     array1[1] = 7; [EOL]     assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL] }
@Test [EOL] public void testByteArrayHiddenByObject() { [EOL]     final byte[] array1 = new byte[2]; [EOL]     array1[0] = 5; [EOL]     array1[1] = 6; [EOL]     final byte[] array2 = new byte[2]; [EOL]     array2[0] = 5; [EOL]     array2[1] = 6; [EOL]     final Object obj1 = array1; [EOL]     final Object obj2 = array2; [EOL]     assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(obj1, array1).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(obj1, array2).isEquals()); [EOL]     array1[1] = 7; [EOL]     assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL] }
@Test [EOL] public void testByteArrayHiddenByObject() { [EOL]     final byte[] array1 = new byte[2]; [EOL]     array1[0] = 5; [EOL]     array1[1] = 6; [EOL]     final byte[] array2 = new byte[2]; [EOL]     array2[0] = 5; [EOL]     array2[1] = 6; [EOL]     final Object obj1 = array1; [EOL]     final Object obj2 = array2; [EOL]     assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(obj1, array1).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(obj1, array2).isEquals()); [EOL]     array1[1] = 7; [EOL]     assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL] }
@Test [EOL] public void testMultiIntArray() { [EOL]     final int[][] array1 = new int[2][2]; [EOL]     final int[][] array2 = new int[2][2]; [EOL]     for (int i = 0; i < array1.length; ++i) { [EOL]         for (int j = 0; j < array1[0].length; j++) { [EOL]             array1[i][j] = (i + 1) * (j + 1); [EOL]             array2[i][j] = (i + 1) * (j + 1); [EOL]         } [EOL]     } [EOL]     assertTrue(new EqualsBuilder().append(array1, array1).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(array1, array2).isEquals()); [EOL]     array1[1][1] = 0; [EOL]     assertTrue(!new EqualsBuilder().append(array1, array2).isEquals()); [EOL] }
@Test [EOL] public void testMultiCharArray() { [EOL]     final char[][] array1 = new char[2][2]; [EOL]     final char[][] array2 = new char[2][2]; [EOL]     for (char i = 0; i < array1.length; ++i) { [EOL]         for (char j = 0; j < array1[0].length; j++) { [EOL]             array1[i][j] = i; [EOL]             array2[i][j] = i; [EOL]         } [EOL]     } [EOL]     assertTrue(new EqualsBuilder().append(array1, array1).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(array1, array2).isEquals()); [EOL]     array1[1][1] = 0; [EOL]     assertTrue(!new EqualsBuilder().append(array1, array2).isEquals()); [EOL] }
@Test [EOL] public void testByteArrayHiddenByObject() { [EOL]     final byte[] array1 = new byte[2]; [EOL]     array1[0] = 5; [EOL]     array1[1] = 6; [EOL]     final byte[] array2 = new byte[2]; [EOL]     array2[0] = 5; [EOL]     array2[1] = 6; [EOL]     final Object obj1 = array1; [EOL]     final Object obj2 = array2; [EOL]     assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(obj1, array1).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(obj1, array2).isEquals()); [EOL]     array1[1] = 7; [EOL]     assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL] }
@Test [EOL] public void testByteArrayHiddenByObject() { [EOL]     final byte[] array1 = new byte[2]; [EOL]     array1[0] = 5; [EOL]     array1[1] = 6; [EOL]     final byte[] array2 = new byte[2]; [EOL]     array2[0] = 5; [EOL]     array2[1] = 6; [EOL]     final Object obj1 = array1; [EOL]     final Object obj2 = array2; [EOL]     assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(obj1, array1).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(obj1, array2).isEquals()); [EOL]     array1[1] = 7; [EOL]     assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL] }
@Test [EOL] public void testByteArrayHiddenByObject() { [EOL]     final byte[] array1 = new byte[2]; [EOL]     array1[0] = 5; [EOL]     array1[1] = 6; [EOL]     final byte[] array2 = new byte[2]; [EOL]     array2[0] = 5; [EOL]     array2[1] = 6; [EOL]     final Object obj1 = array1; [EOL]     final Object obj2 = array2; [EOL]     assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(obj1, array1).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(obj1, array2).isEquals()); [EOL]     array1[1] = 7; [EOL]     assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL] }
@Test [EOL] public void testByteArrayHiddenByObject() { [EOL]     final byte[] array1 = new byte[2]; [EOL]     array1[0] = 5; [EOL]     array1[1] = 6; [EOL]     final byte[] array2 = new byte[2]; [EOL]     array2[0] = 5; [EOL]     array2[1] = 6; [EOL]     final Object obj1 = array1; [EOL]     final Object obj2 = array2; [EOL]     assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(obj1, array1).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(obj1, array2).isEquals()); [EOL]     array1[1] = 7; [EOL]     assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL] }
@Test [EOL] public void testByteArrayHiddenByObject() { [EOL]     final byte[] array1 = new byte[2]; [EOL]     array1[0] = 5; [EOL]     array1[1] = 6; [EOL]     final byte[] array2 = new byte[2]; [EOL]     array2[0] = 5; [EOL]     array2[1] = 6; [EOL]     final Object obj1 = array1; [EOL]     final Object obj2 = array2; [EOL]     assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(obj1, array1).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(obj1, array2).isEquals()); [EOL]     array1[1] = 7; [EOL]     assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL] }
@Test [EOL] public void testByteArrayHiddenByObject() { [EOL]     final byte[] array1 = new byte[2]; [EOL]     array1[0] = 5; [EOL]     array1[1] = 6; [EOL]     final byte[] array2 = new byte[2]; [EOL]     array2[0] = 5; [EOL]     array2[1] = 6; [EOL]     final Object obj1 = array1; [EOL]     final Object obj2 = array2; [EOL]     assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(obj1, array1).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(obj1, array2).isEquals()); [EOL]     array1[1] = 7; [EOL]     assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL] }
@Test [EOL] public void testByteArrayHiddenByObject() { [EOL]     final byte[] array1 = new byte[2]; [EOL]     array1[0] = 5; [EOL]     array1[1] = 6; [EOL]     final byte[] array2 = new byte[2]; [EOL]     array2[0] = 5; [EOL]     array2[1] = 6; [EOL]     final Object obj1 = array1; [EOL]     final Object obj2 = array2; [EOL]     assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(obj1, array1).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(obj1, array2).isEquals()); [EOL]     array1[1] = 7; [EOL]     assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL] }
@Test [EOL] public void testReset() { [EOL]     final EqualsBuilder equalsBuilder = new EqualsBuilder(); [EOL]     assertTrue(equalsBuilder.isEquals()); [EOL]     equalsBuilder.setEquals(false); [EOL]     assertFalse(equalsBuilder.isEquals()); [EOL]     equalsBuilder.reset(); [EOL]     assertTrue(equalsBuilder.isEquals()); [EOL] }
@Test [EOL] public void testCSVSimple() { [EOL]     this.testCSV(CSV_SIMPLE_FIXTURE); [EOL] }
@Test [EOL] public void testCSVSimple() { [EOL]     this.testCSV(CSV_SIMPLE_FIXTURE); [EOL] }
@Test [EOL] public void testLANG807() { [EOL]     try { [EOL]         RandomStringUtils.random(3, 5, 5, false, false); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]         final String msg = ex.getMessage(); [EOL]         assertTrue("Message (" + msg + ") must contain 'start'", msg.contains("start")); [EOL]         assertTrue("Message (" + msg + ") must contain 'end'", msg.contains("end")); [EOL]     } [EOL] }
@Test [EOL] public void testLANG807() { [EOL]     try { [EOL]         RandomStringUtils.random(3, 5, 5, false, false); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]         final String msg = ex.getMessage(); [EOL]         assertTrue("Message (" + msg + ") must contain 'start'", msg.contains("start")); [EOL]         assertTrue("Message (" + msg + ") must contain 'end'", msg.contains("end")); [EOL]     } [EOL] }
@Test [EOL] public void testLANG807() { [EOL]     try { [EOL]         RandomStringUtils.random(3, 5, 5, false, false); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]         final String msg = ex.getMessage(); [EOL]         assertTrue("Message (" + msg + ") must contain 'start'", msg.contains("start")); [EOL]         assertTrue("Message (" + msg + ") must contain 'end'", msg.contains("end")); [EOL]     } [EOL] }
@Test [EOL] public void testLANG807() { [EOL]     try { [EOL]         RandomStringUtils.random(3, 5, 5, false, false); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]         final String msg = ex.getMessage(); [EOL]         assertTrue("Message (" + msg + ") must contain 'start'", msg.contains("start")); [EOL]         assertTrue("Message (" + msg + ") must contain 'end'", msg.contains("end")); [EOL]     } [EOL] }
@Test [EOL] public void testLANG807() { [EOL]     try { [EOL]         RandomStringUtils.random(3, 5, 5, false, false); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]         final String msg = ex.getMessage(); [EOL]         assertTrue("Message (" + msg + ") must contain 'start'", msg.contains("start")); [EOL]         assertTrue("Message (" + msg + ") must contain 'end'", msg.contains("end")); [EOL]     } [EOL] }
@Test [EOL] public void testLANG807() { [EOL]     try { [EOL]         RandomStringUtils.random(3, 5, 5, false, false); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]         final String msg = ex.getMessage(); [EOL]         assertTrue("Message (" + msg + ") must contain 'start'", msg.contains("start")); [EOL]         assertTrue("Message (" + msg + ") must contain 'end'", msg.contains("end")); [EOL]     } [EOL] }
@Test [EOL] public void testLANG807() { [EOL]     try { [EOL]         RandomStringUtils.random(3, 5, 5, false, false); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]         final String msg = ex.getMessage(); [EOL]         assertTrue("Message (" + msg + ") must contain 'start'", msg.contains("start")); [EOL]         assertTrue("Message (" + msg + ") must contain 'end'", msg.contains("end")); [EOL]     } [EOL] }
@Test [EOL] public void testLANG807() { [EOL]     try { [EOL]         RandomStringUtils.random(3, 5, 5, false, false); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]         final String msg = ex.getMessage(); [EOL]         assertTrue("Message (" + msg + ") must contain 'start'", msg.contains("start")); [EOL]         assertTrue("Message (" + msg + ") must contain 'end'", msg.contains("end")); [EOL]     } [EOL] }
@Test [EOL] public void testLANG807() { [EOL]     try { [EOL]         RandomStringUtils.random(3, 5, 5, false, false); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]         final String msg = ex.getMessage(); [EOL]         assertTrue("Message (" + msg + ") must contain 'start'", msg.contains("start")); [EOL]         assertTrue("Message (" + msg + ") must contain 'end'", msg.contains("end")); [EOL]     } [EOL] }
@Test [EOL] public void testLANG807() { [EOL]     try { [EOL]         RandomStringUtils.random(3, 5, 5, false, false); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]         final String msg = ex.getMessage(); [EOL]         assertTrue("Message (" + msg + ") must contain 'start'", msg.contains("start")); [EOL]         assertTrue("Message (" + msg + ") must contain 'end'", msg.contains("end")); [EOL]     } [EOL] }
@Test [EOL] public void testConstructors() { [EOL]     assertEquals((byte) 0, new MutableByte().byteValue()); [EOL]     assertEquals((byte) 1, new MutableByte((byte) 1).byteValue()); [EOL]     assertEquals((byte) 2, new MutableByte(Byte.valueOf((byte) 2)).byteValue()); [EOL]     assertEquals((byte) 3, new MutableByte(new MutableByte((byte) 3)).byteValue()); [EOL]     assertEquals((byte) 2, new MutableByte("2").byteValue()); [EOL] }
@Test [EOL] public void testConstructors() { [EOL]     assertEquals((byte) 0, new MutableByte().byteValue()); [EOL]     assertEquals((byte) 1, new MutableByte((byte) 1).byteValue()); [EOL]     assertEquals((byte) 2, new MutableByte(Byte.valueOf((byte) 2)).byteValue()); [EOL]     assertEquals((byte) 3, new MutableByte(new MutableByte((byte) 3)).byteValue()); [EOL]     assertEquals((byte) 2, new MutableByte("2").byteValue()); [EOL] }
@Test [EOL] public void testConstructors() { [EOL]     assertEquals((byte) 0, new MutableByte().byteValue()); [EOL]     assertEquals((byte) 1, new MutableByte((byte) 1).byteValue()); [EOL]     assertEquals((byte) 2, new MutableByte(Byte.valueOf((byte) 2)).byteValue()); [EOL]     assertEquals((byte) 3, new MutableByte(new MutableByte((byte) 3)).byteValue()); [EOL]     assertEquals((byte) 2, new MutableByte("2").byteValue()); [EOL] }
@Test(expected = NullPointerException.class) [EOL] public void testCompareToNull() { [EOL]     final MutableByte mutNum = new MutableByte((byte) 0); [EOL]     mutNum.compareTo(null); [EOL] }
@Test(expected = NullPointerException.class) [EOL] public void testCompareToNull() { [EOL]     final MutableByte mutNum = new MutableByte((byte) 0); [EOL]     mutNum.compareTo(null); [EOL] }
@Test(expected = NullPointerException.class) [EOL] public void testCompareToNull() { [EOL]     final MutableByte mutNum = new MutableByte((byte) 0); [EOL]     mutNum.compareTo(null); [EOL] }
@Test [EOL] public void testEscapeXmlAllCharacters() { [EOL]     final CharSequenceTranslator escapeXml = StringEscapeUtils.ESCAPE_XML.with(NumericEntityEscaper.below(9), NumericEntityEscaper.between(0xB, 0xC), NumericEntityEscaper.between(0xE, 0x19), NumericEntityEscaper.between(0xD800, 0xDFFF), NumericEntityEscaper.between(0xFFFE, 0xFFFF), NumericEntityEscaper.above(0x110000)); [EOL]     assertEquals("&#0;&#1;&#2;&#3;&#4;&#5;&#6;&#7;&#8;", escapeXml.translate("\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\u0008")); [EOL]     assertEquals("\t", escapeXml.translate("\t")); [EOL]     assertEquals("\n", escapeXml.translate("\n")); [EOL]     assertEquals("&#11;&#12;", escapeXml.translate("\u000B\u000C")); [EOL]     assertEquals("\r", escapeXml.translate("\r")); [EOL]     assertEquals("Hello World! Ain&apos;t this great?", escapeXml.translate("Hello World! Ain't this great?")); [EOL]     assertEquals("&#14;&#15;&#24;&#25;", escapeXml.translate("\u000E\u000F\u0018\u0019")); [EOL] }
@Test [EOL] public void testEscapeXmlAllCharacters() { [EOL]     final CharSequenceTranslator escapeXml = StringEscapeUtils.ESCAPE_XML.with(NumericEntityEscaper.below(9), NumericEntityEscaper.between(0xB, 0xC), NumericEntityEscaper.between(0xE, 0x19), NumericEntityEscaper.between(0xD800, 0xDFFF), NumericEntityEscaper.between(0xFFFE, 0xFFFF), NumericEntityEscaper.above(0x110000)); [EOL]     assertEquals("&#0;&#1;&#2;&#3;&#4;&#5;&#6;&#7;&#8;", escapeXml.translate("\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\u0008")); [EOL]     assertEquals("\t", escapeXml.translate("\t")); [EOL]     assertEquals("\n", escapeXml.translate("\n")); [EOL]     assertEquals("&#11;&#12;", escapeXml.translate("\u000B\u000C")); [EOL]     assertEquals("\r", escapeXml.translate("\r")); [EOL]     assertEquals("Hello World! Ain&apos;t this great?", escapeXml.translate("Hello World! Ain't this great?")); [EOL]     assertEquals("&#14;&#15;&#24;&#25;", escapeXml.translate("\u000E\u000F\u0018\u0019")); [EOL] }
@Test [EOL] public void testEllipsis() { [EOL]     assertEquals("foo", FormattableUtils.append("foo", new Formatter(), 0, -1, -1, "*").toString()); [EOL]     assertEquals("f*", FormattableUtils.append("foo", new Formatter(), 0, -1, 2, "*").toString()); [EOL]     assertEquals(" foo", FormattableUtils.append("foo", new Formatter(), 0, 4, -1, "*").toString()); [EOL]     assertEquals("   foo", FormattableUtils.append("foo", new Formatter(), 0, 6, -1, "*").toString()); [EOL]     assertEquals(" f*", FormattableUtils.append("foo", new Formatter(), 0, 3, 2, "*").toString()); [EOL]     assertEquals("   f*", FormattableUtils.append("foo", new Formatter(), 0, 5, 2, "*").toString()); [EOL]     assertEquals("foo ", FormattableUtils.append("foo", new Formatter(), LEFT_JUSTIFY, 4, -1, "*").toString()); [EOL]     assertEquals("foo   ", FormattableUtils.append("foo", new Formatter(), LEFT_JUSTIFY, 6, -1, "*").toString()); [EOL]     assertEquals("f* ", FormattableUtils.append("foo", new Formatter(), LEFT_JUSTIFY, 3, 2, "*").toString()); [EOL]     assertEquals("f*   ", FormattableUtils.append("foo", new Formatter(), LEFT_JUSTIFY, 5, 2, "*").toString()); [EOL]     assertEquals("foo", FormattableUtils.append("foo", new Formatter(), 0, -1, -1, "+*").toString()); [EOL]     assertEquals("+*", FormattableUtils.append("foo", new Formatter(), 0, -1, 2, "+*").toString()); [EOL]     assertEquals(" foo", FormattableUtils.append("foo", new Formatter(), 0, 4, -1, "+*").toString()); [EOL]     assertEquals("   foo", FormattableUtils.append("foo", new Formatter(), 0, 6, -1, "+*").toString()); [EOL]     assertEquals(" +*", FormattableUtils.append("foo", new Formatter(), 0, 3, 2, "+*").toString()); [EOL]     assertEquals("   +*", FormattableUtils.append("foo", new Formatter(), 0, 5, 2, "+*").toString()); [EOL]     assertEquals("foo ", FormattableUtils.append("foo", new Formatter(), LEFT_JUSTIFY, 4, -1, "+*").toString()); [EOL]     assertEquals("foo   ", FormattableUtils.append("foo", new Formatter(), LEFT_JUSTIFY, 6, -1, "+*").toString()); [EOL]     assertEquals("+* ", FormattableUtils.append("foo", new Formatter(), LEFT_JUSTIFY, 3, 2, "+*").toString()); [EOL]     assertEquals("+*   ", FormattableUtils.append("foo", new Formatter(), LEFT_JUSTIFY, 5, 2, "+*").toString()); [EOL] }
@Test [EOL] public void testEllipsis() { [EOL]     assertEquals("foo", FormattableUtils.append("foo", new Formatter(), 0, -1, -1, "*").toString()); [EOL]     assertEquals("f*", FormattableUtils.append("foo", new Formatter(), 0, -1, 2, "*").toString()); [EOL]     assertEquals(" foo", FormattableUtils.append("foo", new Formatter(), 0, 4, -1, "*").toString()); [EOL]     assertEquals("   foo", FormattableUtils.append("foo", new Formatter(), 0, 6, -1, "*").toString()); [EOL]     assertEquals(" f*", FormattableUtils.append("foo", new Formatter(), 0, 3, 2, "*").toString()); [EOL]     assertEquals("   f*", FormattableUtils.append("foo", new Formatter(), 0, 5, 2, "*").toString()); [EOL]     assertEquals("foo ", FormattableUtils.append("foo", new Formatter(), LEFT_JUSTIFY, 4, -1, "*").toString()); [EOL]     assertEquals("foo   ", FormattableUtils.append("foo", new Formatter(), LEFT_JUSTIFY, 6, -1, "*").toString()); [EOL]     assertEquals("f* ", FormattableUtils.append("foo", new Formatter(), LEFT_JUSTIFY, 3, 2, "*").toString()); [EOL]     assertEquals("f*   ", FormattableUtils.append("foo", new Formatter(), LEFT_JUSTIFY, 5, 2, "*").toString()); [EOL]     assertEquals("foo", FormattableUtils.append("foo", new Formatter(), 0, -1, -1, "+*").toString()); [EOL]     assertEquals("+*", FormattableUtils.append("foo", new Formatter(), 0, -1, 2, "+*").toString()); [EOL]     assertEquals(" foo", FormattableUtils.append("foo", new Formatter(), 0, 4, -1, "+*").toString()); [EOL]     assertEquals("   foo", FormattableUtils.append("foo", new Formatter(), 0, 6, -1, "+*").toString()); [EOL]     assertEquals(" +*", FormattableUtils.append("foo", new Formatter(), 0, 3, 2, "+*").toString()); [EOL]     assertEquals("   +*", FormattableUtils.append("foo", new Formatter(), 0, 5, 2, "+*").toString()); [EOL]     assertEquals("foo ", FormattableUtils.append("foo", new Formatter(), LEFT_JUSTIFY, 4, -1, "+*").toString()); [EOL]     assertEquals("foo   ", FormattableUtils.append("foo", new Formatter(), LEFT_JUSTIFY, 6, -1, "+*").toString()); [EOL]     assertEquals("+* ", FormattableUtils.append("foo", new Formatter(), LEFT_JUSTIFY, 3, 2, "+*").toString()); [EOL]     assertEquals("+*   ", FormattableUtils.append("foo", new Formatter(), LEFT_JUSTIFY, 5, 2, "+*").toString()); [EOL] }
@Test [EOL] public void testEllipsis() { [EOL]     assertEquals("foo", FormattableUtils.append("foo", new Formatter(), 0, -1, -1, "*").toString()); [EOL]     assertEquals("f*", FormattableUtils.append("foo", new Formatter(), 0, -1, 2, "*").toString()); [EOL]     assertEquals(" foo", FormattableUtils.append("foo", new Formatter(), 0, 4, -1, "*").toString()); [EOL]     assertEquals("   foo", FormattableUtils.append("foo", new Formatter(), 0, 6, -1, "*").toString()); [EOL]     assertEquals(" f*", FormattableUtils.append("foo", new Formatter(), 0, 3, 2, "*").toString()); [EOL]     assertEquals("   f*", FormattableUtils.append("foo", new Formatter(), 0, 5, 2, "*").toString()); [EOL]     assertEquals("foo ", FormattableUtils.append("foo", new Formatter(), LEFT_JUSTIFY, 4, -1, "*").toString()); [EOL]     assertEquals("foo   ", FormattableUtils.append("foo", new Formatter(), LEFT_JUSTIFY, 6, -1, "*").toString()); [EOL]     assertEquals("f* ", FormattableUtils.append("foo", new Formatter(), LEFT_JUSTIFY, 3, 2, "*").toString()); [EOL]     assertEquals("f*   ", FormattableUtils.append("foo", new Formatter(), LEFT_JUSTIFY, 5, 2, "*").toString()); [EOL]     assertEquals("foo", FormattableUtils.append("foo", new Formatter(), 0, -1, -1, "+*").toString()); [EOL]     assertEquals("+*", FormattableUtils.append("foo", new Formatter(), 0, -1, 2, "+*").toString()); [EOL]     assertEquals(" foo", FormattableUtils.append("foo", new Formatter(), 0, 4, -1, "+*").toString()); [EOL]     assertEquals("   foo", FormattableUtils.append("foo", new Formatter(), 0, 6, -1, "+*").toString()); [EOL]     assertEquals(" +*", FormattableUtils.append("foo", new Formatter(), 0, 3, 2, "+*").toString()); [EOL]     assertEquals("   +*", FormattableUtils.append("foo", new Formatter(), 0, 5, 2, "+*").toString()); [EOL]     assertEquals("foo ", FormattableUtils.append("foo", new Formatter(), LEFT_JUSTIFY, 4, -1, "+*").toString()); [EOL]     assertEquals("foo   ", FormattableUtils.append("foo", new Formatter(), LEFT_JUSTIFY, 6, -1, "+*").toString()); [EOL]     assertEquals("+* ", FormattableUtils.append("foo", new Formatter(), LEFT_JUSTIFY, 3, 2, "+*").toString()); [EOL]     assertEquals("+*   ", FormattableUtils.append("foo", new Formatter(), LEFT_JUSTIFY, 5, 2, "+*").toString()); [EOL] }
@Test [EOL] public void test_getEnumList() { [EOL]     final List<Traffic> test = EnumUtils.getEnumList(Traffic.class); [EOL]     assertEquals(3, test.size()); [EOL]     assertEquals(Traffic.RED, test.get(0)); [EOL]     assertEquals(Traffic.AMBER, test.get(1)); [EOL]     assertEquals(Traffic.GREEN, test.get(2)); [EOL] }
@Test [EOL] public void test_getEnumList() { [EOL]     final List<Traffic> test = EnumUtils.getEnumList(Traffic.class); [EOL]     assertEquals(3, test.size()); [EOL]     assertEquals(Traffic.RED, test.get(0)); [EOL]     assertEquals(Traffic.AMBER, test.get(1)); [EOL]     assertEquals(Traffic.GREEN, test.get(2)); [EOL] }
@Test(expected = NullPointerException.class) [EOL] public void test_generateBitVector_nullIterable() { [EOL]     EnumUtils.generateBitVector(Traffic.class, (Iterable<Traffic>) null); [EOL] }
@Test(expected = NullPointerException.class) [EOL] public void test_generateBitVector_nullClassWithArray() { [EOL]     EnumUtils.generateBitVector(null, Traffic.RED); [EOL] }
@Test(expected = NullPointerException.class) [EOL] public void test_generateBitVector_nullClassWithArray() { [EOL]     EnumUtils.generateBitVector(null, Traffic.RED); [EOL] }
@Test(expected = NullPointerException.class) [EOL] public void test_generateBitVector_nullClassWithArray() { [EOL]     EnumUtils.generateBitVector(null, Traffic.RED); [EOL] }
@Test [EOL] public void test_generateBitVectorsFromArray() { [EOL]     assertArrayEquals(EnumUtils.generateBitVectors(Traffic.class), 0L); [EOL]     assertArrayEquals(EnumUtils.generateBitVectors(Traffic.class, Traffic.RED), 1L); [EOL]     assertArrayEquals(EnumUtils.generateBitVectors(Traffic.class, Traffic.AMBER), 2L); [EOL]     assertArrayEquals(EnumUtils.generateBitVectors(Traffic.class, Traffic.GREEN), 4L); [EOL]     assertArrayEquals(EnumUtils.generateBitVectors(Traffic.class, Traffic.RED, Traffic.AMBER), 3L); [EOL]     assertArrayEquals(EnumUtils.generateBitVectors(Traffic.class, Traffic.RED, Traffic.GREEN), 5L); [EOL]     assertArrayEquals(EnumUtils.generateBitVectors(Traffic.class, Traffic.AMBER, Traffic.GREEN), 6L); [EOL]     assertArrayEquals(EnumUtils.generateBitVectors(Traffic.class, Traffic.RED, Traffic.AMBER, Traffic.GREEN), 7L); [EOL]     assertArrayEquals(EnumUtils.generateBitVectors(Traffic.class, Traffic.RED, Traffic.AMBER, Traffic.GREEN, Traffic.GREEN), 7L); [EOL] }
@Test(expected = NullPointerException.class) [EOL] public void test_generateBitVector_nullIterable() { [EOL]     EnumUtils.generateBitVector(Traffic.class, (Iterable<Traffic>) null); [EOL] }
@Test(expected = NullPointerException.class) [EOL] public void test_generateBitVector_nullIterable() { [EOL]     EnumUtils.generateBitVector(Traffic.class, (Iterable<Traffic>) null); [EOL] }
@Test(expected = NullPointerException.class) [EOL] public void test_generateBitVector_nullIterable() { [EOL]     EnumUtils.generateBitVector(Traffic.class, (Iterable<Traffic>) null); [EOL] }
@Test(expected = NullPointerException.class) [EOL] public void test_generateBitVector_nullIterable() { [EOL]     EnumUtils.generateBitVector(Traffic.class, (Iterable<Traffic>) null); [EOL] }
@Test(expected = NullPointerException.class) [EOL] public void test_generateBitVector_nullIterable() { [EOL]     EnumUtils.generateBitVector(Traffic.class, (Iterable<Traffic>) null); [EOL] }
@Test [EOL] public void test_getInstance() { [EOL]     final FastDateFormat format1 = FastDateFormat.getInstance(); [EOL]     final FastDateFormat format2 = FastDateFormat.getInstance(); [EOL]     assertSame(format1, format2); [EOL] }
@Test [EOL] public void testGetSetDefault() { [EOL]     try { [EOL]         ToStringBuilder.setDefaultStyle(ToStringStyle.NO_FIELD_NAMES_STYLE); [EOL]         assertSame(ToStringStyle.NO_FIELD_NAMES_STYLE, ToStringBuilder.getDefaultStyle()); [EOL]     } finally { [EOL]         ToStringBuilder.setDefaultStyle(ToStringStyle.DEFAULT_STYLE); [EOL]     } [EOL] }
@Test [EOL] public void testAppendToStringUsingMultiLineStyle() { [EOL]     final MultiLineTestObject obj = new MultiLineTestObject(); [EOL]     final ToStringBuilder testBuilder = new ToStringBuilder(this, ToStringStyle.MULTI_LINE_STYLE).appendToString(obj.toString()); [EOL]     assertEquals(testBuilder.toString().indexOf("testInt=31337"), -1); [EOL] }
@Test [EOL] public void testAppendToStringUsingMultiLineStyle() { [EOL]     final MultiLineTestObject obj = new MultiLineTestObject(); [EOL]     final ToStringBuilder testBuilder = new ToStringBuilder(this, ToStringStyle.MULTI_LINE_STYLE).appendToString(obj.toString()); [EOL]     assertEquals(testBuilder.toString().indexOf("testInt=31337"), -1); [EOL] }
@Test [EOL] public void testByteArray() { [EOL]     byte[] array = new byte[] { 1, 2, -3, 4 }; [EOL]     assertEquals(baseStr + "[{1,2,-3,4}]", new ToStringBuilder(base).append(array).toString()); [EOL]     assertEquals(baseStr + "[{1,2,-3,4}]", new ToStringBuilder(base).append((Object) array).toString()); [EOL]     array = null; [EOL]     assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); [EOL]     assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); [EOL] }
@Test [EOL] public void testByteArray() { [EOL]     byte[] array = new byte[] { 1, 2, -3, 4 }; [EOL]     assertEquals(baseStr + "[{1,2,-3,4}]", new ToStringBuilder(base).append(array).toString()); [EOL]     assertEquals(baseStr + "[{1,2,-3,4}]", new ToStringBuilder(base).append((Object) array).toString()); [EOL]     array = null; [EOL]     assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); [EOL]     assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); [EOL] }
@Test [EOL] public void testShort() { [EOL]     assertEquals(baseStr + "[3]", new ToStringBuilder(base).append((short) 3).toString()); [EOL]     assertEquals(baseStr + "[a=3]", new ToStringBuilder(base).append("a", (short) 3).toString()); [EOL]     assertEquals(baseStr + "[a=3,b=4]", new ToStringBuilder(base).append("a", (short) 3).append("b", (short) 4).toString()); [EOL] }
@Test [EOL] public void testShort() { [EOL]     assertEquals(baseStr + "[3]", new ToStringBuilder(base).append((short) 3).toString()); [EOL]     assertEquals(baseStr + "[a=3]", new ToStringBuilder(base).append("a", (short) 3).toString()); [EOL]     assertEquals(baseStr + "[a=3,b=4]", new ToStringBuilder(base).append("a", (short) 3).append("b", (short) 4).toString()); [EOL] }
@Test [EOL] public void testShort() { [EOL]     assertEquals(baseStr + "[3]", new ToStringBuilder(base).append((short) 3).toString()); [EOL]     assertEquals(baseStr + "[a=3]", new ToStringBuilder(base).append("a", (short) 3).toString()); [EOL]     assertEquals(baseStr + "[a=3,b=4]", new ToStringBuilder(base).append("a", (short) 3).append("b", (short) 4).toString()); [EOL] }
@Test [EOL] public void testAppendToStringUsingMultiLineStyle() { [EOL]     final MultiLineTestObject obj = new MultiLineTestObject(); [EOL]     final ToStringBuilder testBuilder = new ToStringBuilder(this, ToStringStyle.MULTI_LINE_STYLE).appendToString(obj.toString()); [EOL]     assertEquals(testBuilder.toString().indexOf("testInt=31337"), -1); [EOL] }
@Test [EOL] public void testAppendToStringUsingMultiLineStyle() { [EOL]     final MultiLineTestObject obj = new MultiLineTestObject(); [EOL]     final ToStringBuilder testBuilder = new ToStringBuilder(this, ToStringStyle.MULTI_LINE_STYLE).appendToString(obj.toString()); [EOL]     assertEquals(testBuilder.toString().indexOf("testInt=31337"), -1); [EOL] }
@Test [EOL] public void testObjectBuild() { [EOL]     final Integer i3 = Integer.valueOf(3); [EOL]     final Integer i4 = Integer.valueOf(4); [EOL]     assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) null).build()); [EOL]     assertEquals(baseStr + "[3]", new ToStringBuilder(base).append(i3).build()); [EOL]     assertEquals(baseStr + "[a=<null>]", new ToStringBuilder(base).append("a", (Object) null).build()); [EOL]     assertEquals(baseStr + "[a=3]", new ToStringBuilder(base).append("a", i3).build()); [EOL]     assertEquals(baseStr + "[a=3,b=4]", new ToStringBuilder(base).append("a", i3).append("b", i4).build()); [EOL]     assertEquals(baseStr + "[a=<Integer>]", new ToStringBuilder(base).append("a", i3, false).build()); [EOL]     assertEquals(baseStr + "[a=<size=0>]", new ToStringBuilder(base).append("a", new ArrayList<Object>(), false).build()); [EOL]     assertEquals(baseStr + "[a=[]]", new ToStringBuilder(base).append("a", new ArrayList<Object>(), true).build()); [EOL]     assertEquals(baseStr + "[a=<size=0>]", new ToStringBuilder(base).append("a", new HashMap<Object, Object>(), false).build()); [EOL]     assertEquals(baseStr + "[a={}]", new ToStringBuilder(base).append("a", new HashMap<Object, Object>(), true).build()); [EOL]     assertEquals(baseStr + "[a=<size=0>]", new ToStringBuilder(base).append("a", (Object) new String[0], false).build()); [EOL]     assertEquals(baseStr + "[a={}]", new ToStringBuilder(base).append("a", (Object) new String[0], true).build()); [EOL] }
@Test [EOL] public void testConstructors() { [EOL]     assertEquals(null, new MutableObject<String>().getValue()); [EOL]     final Integer i = Integer.valueOf(6); [EOL]     assertSame(i, new MutableObject<Integer>(i).getValue()); [EOL]     assertSame("HI", new MutableObject<String>("HI").getValue()); [EOL]     assertSame(null, new MutableObject<Object>(null).getValue()); [EOL] }
@Test [EOL] public void testEquals() { [EOL]     final MutableObject<String> mutNumA = new MutableObject<String>("ALPHA"); [EOL]     final MutableObject<String> mutNumB = new MutableObject<String>("ALPHA"); [EOL]     final MutableObject<String> mutNumC = new MutableObject<String>("BETA"); [EOL]     final MutableObject<String> mutNumD = new MutableObject<String>(null); [EOL]     assertTrue(mutNumA.equals(mutNumA)); [EOL]     assertTrue(mutNumA.equals(mutNumB)); [EOL]     assertTrue(mutNumB.equals(mutNumA)); [EOL]     assertTrue(mutNumB.equals(mutNumB)); [EOL]     assertFalse(mutNumA.equals(mutNumC)); [EOL]     assertFalse(mutNumB.equals(mutNumC)); [EOL]     assertTrue(mutNumC.equals(mutNumC)); [EOL]     assertFalse(mutNumA.equals(mutNumD)); [EOL]     assertTrue(mutNumD.equals(mutNumD)); [EOL]     assertFalse(mutNumA.equals(null)); [EOL]     assertFalse(mutNumA.equals(new Object())); [EOL]     assertFalse(mutNumA.equals("0")); [EOL] }
@Test [EOL] public void testEquals() { [EOL]     final MutableObject<String> mutNumA = new MutableObject<String>("ALPHA"); [EOL]     final MutableObject<String> mutNumB = new MutableObject<String>("ALPHA"); [EOL]     final MutableObject<String> mutNumC = new MutableObject<String>("BETA"); [EOL]     final MutableObject<String> mutNumD = new MutableObject<String>(null); [EOL]     assertTrue(mutNumA.equals(mutNumA)); [EOL]     assertTrue(mutNumA.equals(mutNumB)); [EOL]     assertTrue(mutNumB.equals(mutNumA)); [EOL]     assertTrue(mutNumB.equals(mutNumB)); [EOL]     assertFalse(mutNumA.equals(mutNumC)); [EOL]     assertFalse(mutNumB.equals(mutNumC)); [EOL]     assertTrue(mutNumC.equals(mutNumC)); [EOL]     assertFalse(mutNumA.equals(mutNumD)); [EOL]     assertTrue(mutNumD.equals(mutNumD)); [EOL]     assertFalse(mutNumA.equals(null)); [EOL]     assertFalse(mutNumA.equals(new Object())); [EOL]     assertFalse(mutNumA.equals("0")); [EOL] }
@Test [EOL] public void testConstructors() { [EOL]     assertEquals(null, new MutableObject<String>().getValue()); [EOL]     final Integer i = Integer.valueOf(6); [EOL]     assertSame(i, new MutableObject<Integer>(i).getValue()); [EOL]     assertSame("HI", new MutableObject<String>("HI").getValue()); [EOL]     assertSame(null, new MutableObject<Object>(null).getValue()); [EOL] }
@Test [EOL] public void testEquals() { [EOL]     final MutableObject<String> mutNumA = new MutableObject<String>("ALPHA"); [EOL]     final MutableObject<String> mutNumB = new MutableObject<String>("ALPHA"); [EOL]     final MutableObject<String> mutNumC = new MutableObject<String>("BETA"); [EOL]     final MutableObject<String> mutNumD = new MutableObject<String>(null); [EOL]     assertTrue(mutNumA.equals(mutNumA)); [EOL]     assertTrue(mutNumA.equals(mutNumB)); [EOL]     assertTrue(mutNumB.equals(mutNumA)); [EOL]     assertTrue(mutNumB.equals(mutNumB)); [EOL]     assertFalse(mutNumA.equals(mutNumC)); [EOL]     assertFalse(mutNumB.equals(mutNumC)); [EOL]     assertTrue(mutNumC.equals(mutNumC)); [EOL]     assertFalse(mutNumA.equals(mutNumD)); [EOL]     assertTrue(mutNumD.equals(mutNumD)); [EOL]     assertFalse(mutNumA.equals(null)); [EOL]     assertFalse(mutNumA.equals(new Object())); [EOL]     assertFalse(mutNumA.equals("0")); [EOL] }
@Test [EOL] public void testEquals() { [EOL]     final MutableObject<String> mutNumA = new MutableObject<String>("ALPHA"); [EOL]     final MutableObject<String> mutNumB = new MutableObject<String>("ALPHA"); [EOL]     final MutableObject<String> mutNumC = new MutableObject<String>("BETA"); [EOL]     final MutableObject<String> mutNumD = new MutableObject<String>(null); [EOL]     assertTrue(mutNumA.equals(mutNumA)); [EOL]     assertTrue(mutNumA.equals(mutNumB)); [EOL]     assertTrue(mutNumB.equals(mutNumA)); [EOL]     assertTrue(mutNumB.equals(mutNumB)); [EOL]     assertFalse(mutNumA.equals(mutNumC)); [EOL]     assertFalse(mutNumB.equals(mutNumC)); [EOL]     assertTrue(mutNumC.equals(mutNumC)); [EOL]     assertFalse(mutNumA.equals(mutNumD)); [EOL]     assertTrue(mutNumD.equals(mutNumD)); [EOL]     assertFalse(mutNumA.equals(null)); [EOL]     assertFalse(mutNumA.equals(new Object())); [EOL]     assertFalse(mutNumA.equals("0")); [EOL] }
@Test [EOL] public void testEquals() { [EOL]     final MutableObject<String> mutNumA = new MutableObject<String>("ALPHA"); [EOL]     final MutableObject<String> mutNumB = new MutableObject<String>("ALPHA"); [EOL]     final MutableObject<String> mutNumC = new MutableObject<String>("BETA"); [EOL]     final MutableObject<String> mutNumD = new MutableObject<String>(null); [EOL]     assertTrue(mutNumA.equals(mutNumA)); [EOL]     assertTrue(mutNumA.equals(mutNumB)); [EOL]     assertTrue(mutNumB.equals(mutNumA)); [EOL]     assertTrue(mutNumB.equals(mutNumB)); [EOL]     assertFalse(mutNumA.equals(mutNumC)); [EOL]     assertFalse(mutNumB.equals(mutNumC)); [EOL]     assertTrue(mutNumC.equals(mutNumC)); [EOL]     assertFalse(mutNumA.equals(mutNumD)); [EOL]     assertTrue(mutNumD.equals(mutNumD)); [EOL]     assertFalse(mutNumA.equals(null)); [EOL]     assertFalse(mutNumA.equals(new Object())); [EOL]     assertFalse(mutNumA.equals("0")); [EOL] }
@Test [EOL] public void testEquals() { [EOL]     final MutableObject<String> mutNumA = new MutableObject<String>("ALPHA"); [EOL]     final MutableObject<String> mutNumB = new MutableObject<String>("ALPHA"); [EOL]     final MutableObject<String> mutNumC = new MutableObject<String>("BETA"); [EOL]     final MutableObject<String> mutNumD = new MutableObject<String>(null); [EOL]     assertTrue(mutNumA.equals(mutNumA)); [EOL]     assertTrue(mutNumA.equals(mutNumB)); [EOL]     assertTrue(mutNumB.equals(mutNumA)); [EOL]     assertTrue(mutNumB.equals(mutNumB)); [EOL]     assertFalse(mutNumA.equals(mutNumC)); [EOL]     assertFalse(mutNumB.equals(mutNumC)); [EOL]     assertTrue(mutNumC.equals(mutNumC)); [EOL]     assertFalse(mutNumA.equals(mutNumD)); [EOL]     assertTrue(mutNumD.equals(mutNumD)); [EOL]     assertFalse(mutNumA.equals(null)); [EOL]     assertFalse(mutNumA.equals(new Object())); [EOL]     assertFalse(mutNumA.equals("0")); [EOL] }
@Test [EOL] public void testEquals() { [EOL]     final MutableObject<String> mutNumA = new MutableObject<String>("ALPHA"); [EOL]     final MutableObject<String> mutNumB = new MutableObject<String>("ALPHA"); [EOL]     final MutableObject<String> mutNumC = new MutableObject<String>("BETA"); [EOL]     final MutableObject<String> mutNumD = new MutableObject<String>(null); [EOL]     assertTrue(mutNumA.equals(mutNumA)); [EOL]     assertTrue(mutNumA.equals(mutNumB)); [EOL]     assertTrue(mutNumB.equals(mutNumA)); [EOL]     assertTrue(mutNumB.equals(mutNumB)); [EOL]     assertFalse(mutNumA.equals(mutNumC)); [EOL]     assertFalse(mutNumB.equals(mutNumC)); [EOL]     assertTrue(mutNumC.equals(mutNumC)); [EOL]     assertFalse(mutNumA.equals(mutNumD)); [EOL]     assertTrue(mutNumD.equals(mutNumD)); [EOL]     assertFalse(mutNumA.equals(null)); [EOL]     assertFalse(mutNumA.equals(new Object())); [EOL]     assertFalse(mutNumA.equals("0")); [EOL] }
@Test [EOL] public void testLANG799_DE_OK() throws ParseException { [EOL]     final Locale dflt = Locale.getDefault(); [EOL]     Locale.setDefault(Locale.GERMAN); [EOL]     try { [EOL]         DateUtils.parseDate("Mi, 09 Apr 2008 23:55:38 GMT", "EEE, dd MMM yyyy HH:mm:ss zzz"); [EOL]         DateUtils.parseDateStrictly("Mi, 09 Apr 2008 23:55:38 GMT", "EEE, dd MMM yyyy HH:mm:ss zzz"); [EOL]     } finally { [EOL]         Locale.setDefault(dflt); [EOL]     } [EOL] }
@Test [EOL] public void testLANG799_DE_OK() throws ParseException { [EOL]     final Locale dflt = Locale.getDefault(); [EOL]     Locale.setDefault(Locale.GERMAN); [EOL]     try { [EOL]         DateUtils.parseDate("Mi, 09 Apr 2008 23:55:38 GMT", "EEE, dd MMM yyyy HH:mm:ss zzz"); [EOL]         DateUtils.parseDateStrictly("Mi, 09 Apr 2008 23:55:38 GMT", "EEE, dd MMM yyyy HH:mm:ss zzz"); [EOL]     } finally { [EOL]         Locale.setDefault(dflt); [EOL]     } [EOL] }
@Test [EOL] public void testLANG799_DE_OK() throws ParseException { [EOL]     final Locale dflt = Locale.getDefault(); [EOL]     Locale.setDefault(Locale.GERMAN); [EOL]     try { [EOL]         DateUtils.parseDate("Mi, 09 Apr 2008 23:55:38 GMT", "EEE, dd MMM yyyy HH:mm:ss zzz"); [EOL]         DateUtils.parseDateStrictly("Mi, 09 Apr 2008 23:55:38 GMT", "EEE, dd MMM yyyy HH:mm:ss zzz"); [EOL]     } finally { [EOL]         Locale.setDefault(dflt); [EOL]     } [EOL] }
@Test [EOL] public void testLANG799_DE_OK() throws ParseException { [EOL]     final Locale dflt = Locale.getDefault(); [EOL]     Locale.setDefault(Locale.GERMAN); [EOL]     try { [EOL]         DateUtils.parseDate("Mi, 09 Apr 2008 23:55:38 GMT", "EEE, dd MMM yyyy HH:mm:ss zzz"); [EOL]         DateUtils.parseDateStrictly("Mi, 09 Apr 2008 23:55:38 GMT", "EEE, dd MMM yyyy HH:mm:ss zzz"); [EOL]     } finally { [EOL]         Locale.setDefault(dflt); [EOL]     } [EOL] }
@Test [EOL] public void testToCalendar() { [EOL]     assertEquals("Failed to convert to a Calendar and back", date1, DateUtils.toCalendar(date1).getTime()); [EOL]     try { [EOL]         DateUtils.toCalendar(null); [EOL]         fail("Expected NullPointerException to be thrown"); [EOL]     } catch (final NullPointerException npe) { [EOL]     } [EOL] }
@Test [EOL] public void testRoundAmPm() throws Exception { [EOL]     final int calendarField = Calendar.AM_PM; [EOL]     Date roundedUpDate, roundedDownDate, lastRoundedDownDate; [EOL]     Date minDate, maxDate; [EOL]     roundedUpDate = dateTimeParser.parse("June 1, 2008 12:00:00.000"); [EOL]     roundedDownDate = targetAmDate; [EOL]     lastRoundedDownDate = dateTimeParser.parse("June 1, 2008 5:59:59.999"); [EOL]     baseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate, calendarField); [EOL]     roundedUpDate = dateTimeParser.parse("June 2, 2008 0:00:00.000"); [EOL]     roundedDownDate = targetPmDate; [EOL]     lastRoundedDownDate = dateTimeParser.parse("June 1, 2008 17:59:59.999"); [EOL]     baseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate, calendarField); [EOL]     minDate = dateTimeParser.parse("December 31, 2007 18:00:00.000"); [EOL]     maxDate = dateTimeParser.parse("January 1, 2008 5:59:59.999"); [EOL]     roundToJanuaryFirst(minDate, maxDate, calendarField); [EOL] }
@Test [EOL] public void testWeekIterator() throws Exception { [EOL]     final Calendar now = Calendar.getInstance(); [EOL]     for (int i = 0; i < 7; i++) { [EOL]         final Calendar today = DateUtils.truncate(now, Calendar.DATE); [EOL]         final Calendar sunday = DateUtils.truncate(now, Calendar.DATE); [EOL]         sunday.add(Calendar.DATE, 1 - sunday.get(Calendar.DAY_OF_WEEK)); [EOL]         final Calendar monday = DateUtils.truncate(now, Calendar.DATE); [EOL]         if (monday.get(Calendar.DAY_OF_WEEK) == 1) { [EOL]             monday.add(Calendar.DATE, -6); [EOL]         } else { [EOL]             monday.add(Calendar.DATE, 2 - monday.get(Calendar.DAY_OF_WEEK)); [EOL]         } [EOL]         final Calendar centered = DateUtils.truncate(now, Calendar.DATE); [EOL]         centered.add(Calendar.DATE, -3); [EOL]         Iterator<?> it = DateUtils.iterator(now, DateUtils.RANGE_WEEK_SUNDAY); [EOL]         assertWeekIterator(it, sunday); [EOL]         it = DateUtils.iterator(now, DateUtils.RANGE_WEEK_MONDAY); [EOL]         assertWeekIterator(it, monday); [EOL]         it = DateUtils.iterator(now, DateUtils.RANGE_WEEK_RELATIVE); [EOL]         assertWeekIterator(it, today); [EOL]         it = DateUtils.iterator(now, DateUtils.RANGE_WEEK_CENTER); [EOL]         assertWeekIterator(it, centered); [EOL]         it = DateUtils.iterator((Object) now, DateUtils.RANGE_WEEK_CENTER); [EOL]         assertWeekIterator(it, centered); [EOL]         it = DateUtils.iterator((Object) now.getTime(), DateUtils.RANGE_WEEK_CENTER); [EOL]         assertWeekIterator(it, centered); [EOL]         try { [EOL]             it.next(); [EOL]             fail(); [EOL]         } catch (final NoSuchElementException ex) { [EOL]         } [EOL]         it = DateUtils.iterator(now, DateUtils.RANGE_WEEK_CENTER); [EOL]         it.next(); [EOL]         try { [EOL]             it.remove(); [EOL]         } catch (final UnsupportedOperationException ex) { [EOL]         } [EOL]         now.add(Calendar.DATE, 1); [EOL]     } [EOL] }
@Test [EOL] public void testWeekIterator() throws Exception { [EOL]     final Calendar now = Calendar.getInstance(); [EOL]     for (int i = 0; i < 7; i++) { [EOL]         final Calendar today = DateUtils.truncate(now, Calendar.DATE); [EOL]         final Calendar sunday = DateUtils.truncate(now, Calendar.DATE); [EOL]         sunday.add(Calendar.DATE, 1 - sunday.get(Calendar.DAY_OF_WEEK)); [EOL]         final Calendar monday = DateUtils.truncate(now, Calendar.DATE); [EOL]         if (monday.get(Calendar.DAY_OF_WEEK) == 1) { [EOL]             monday.add(Calendar.DATE, -6); [EOL]         } else { [EOL]             monday.add(Calendar.DATE, 2 - monday.get(Calendar.DAY_OF_WEEK)); [EOL]         } [EOL]         final Calendar centered = DateUtils.truncate(now, Calendar.DATE); [EOL]         centered.add(Calendar.DATE, -3); [EOL]         Iterator<?> it = DateUtils.iterator(now, DateUtils.RANGE_WEEK_SUNDAY); [EOL]         assertWeekIterator(it, sunday); [EOL]         it = DateUtils.iterator(now, DateUtils.RANGE_WEEK_MONDAY); [EOL]         assertWeekIterator(it, monday); [EOL]         it = DateUtils.iterator(now, DateUtils.RANGE_WEEK_RELATIVE); [EOL]         assertWeekIterator(it, today); [EOL]         it = DateUtils.iterator(now, DateUtils.RANGE_WEEK_CENTER); [EOL]         assertWeekIterator(it, centered); [EOL]         it = DateUtils.iterator((Object) now, DateUtils.RANGE_WEEK_CENTER); [EOL]         assertWeekIterator(it, centered); [EOL]         it = DateUtils.iterator((Object) now.getTime(), DateUtils.RANGE_WEEK_CENTER); [EOL]         assertWeekIterator(it, centered); [EOL]         try { [EOL]             it.next(); [EOL]             fail(); [EOL]         } catch (final NoSuchElementException ex) { [EOL]         } [EOL]         it = DateUtils.iterator(now, DateUtils.RANGE_WEEK_CENTER); [EOL]         it.next(); [EOL]         try { [EOL]             it.remove(); [EOL]         } catch (final UnsupportedOperationException ex) { [EOL]         } [EOL]         now.add(Calendar.DATE, 1); [EOL]     } [EOL] }
@Test [EOL] public void testHoursOfDayWithCalendar() { [EOL]     long testResult = DateUtils.getFragmentInHours(aCalendar, Calendar.DATE); [EOL]     final long expectedValue = hours; [EOL]     assertEquals(expectedValue, testResult); [EOL]     testResult = DateUtils.getFragmentInHours(aCalendar, Calendar.DAY_OF_YEAR); [EOL]     assertEquals(expectedValue, testResult); [EOL] }
@Test [EOL] public void testHoursOfDayWithCalendar() { [EOL]     long testResult = DateUtils.getFragmentInHours(aCalendar, Calendar.DATE); [EOL]     final long expectedValue = hours; [EOL]     assertEquals(expectedValue, testResult); [EOL]     testResult = DateUtils.getFragmentInHours(aCalendar, Calendar.DAY_OF_YEAR); [EOL]     assertEquals(expectedValue, testResult); [EOL] }
@Test [EOL] public void testWeekIterator() throws Exception { [EOL]     final Calendar now = Calendar.getInstance(); [EOL]     for (int i = 0; i < 7; i++) { [EOL]         final Calendar today = DateUtils.truncate(now, Calendar.DATE); [EOL]         final Calendar sunday = DateUtils.truncate(now, Calendar.DATE); [EOL]         sunday.add(Calendar.DATE, 1 - sunday.get(Calendar.DAY_OF_WEEK)); [EOL]         final Calendar monday = DateUtils.truncate(now, Calendar.DATE); [EOL]         if (monday.get(Calendar.DAY_OF_WEEK) == 1) { [EOL]             monday.add(Calendar.DATE, -6); [EOL]         } else { [EOL]             monday.add(Calendar.DATE, 2 - monday.get(Calendar.DAY_OF_WEEK)); [EOL]         } [EOL]         final Calendar centered = DateUtils.truncate(now, Calendar.DATE); [EOL]         centered.add(Calendar.DATE, -3); [EOL]         Iterator<?> it = DateUtils.iterator(now, DateUtils.RANGE_WEEK_SUNDAY); [EOL]         assertWeekIterator(it, sunday); [EOL]         it = DateUtils.iterator(now, DateUtils.RANGE_WEEK_MONDAY); [EOL]         assertWeekIterator(it, monday); [EOL]         it = DateUtils.iterator(now, DateUtils.RANGE_WEEK_RELATIVE); [EOL]         assertWeekIterator(it, today); [EOL]         it = DateUtils.iterator(now, DateUtils.RANGE_WEEK_CENTER); [EOL]         assertWeekIterator(it, centered); [EOL]         it = DateUtils.iterator((Object) now, DateUtils.RANGE_WEEK_CENTER); [EOL]         assertWeekIterator(it, centered); [EOL]         it = DateUtils.iterator((Object) now.getTime(), DateUtils.RANGE_WEEK_CENTER); [EOL]         assertWeekIterator(it, centered); [EOL]         try { [EOL]             it.next(); [EOL]             fail(); [EOL]         } catch (final NoSuchElementException ex) { [EOL]         } [EOL]         it = DateUtils.iterator(now, DateUtils.RANGE_WEEK_CENTER); [EOL]         it.next(); [EOL]         try { [EOL]             it.remove(); [EOL]         } catch (final UnsupportedOperationException ex) { [EOL]         } [EOL]         now.add(Calendar.DATE, 1); [EOL]     } [EOL] }
@Test [EOL] public void testWeekIterator() throws Exception { [EOL]     final Calendar now = Calendar.getInstance(); [EOL]     for (int i = 0; i < 7; i++) { [EOL]         final Calendar today = DateUtils.truncate(now, Calendar.DATE); [EOL]         final Calendar sunday = DateUtils.truncate(now, Calendar.DATE); [EOL]         sunday.add(Calendar.DATE, 1 - sunday.get(Calendar.DAY_OF_WEEK)); [EOL]         final Calendar monday = DateUtils.truncate(now, Calendar.DATE); [EOL]         if (monday.get(Calendar.DAY_OF_WEEK) == 1) { [EOL]             monday.add(Calendar.DATE, -6); [EOL]         } else { [EOL]             monday.add(Calendar.DATE, 2 - monday.get(Calendar.DAY_OF_WEEK)); [EOL]         } [EOL]         final Calendar centered = DateUtils.truncate(now, Calendar.DATE); [EOL]         centered.add(Calendar.DATE, -3); [EOL]         Iterator<?> it = DateUtils.iterator(now, DateUtils.RANGE_WEEK_SUNDAY); [EOL]         assertWeekIterator(it, sunday); [EOL]         it = DateUtils.iterator(now, DateUtils.RANGE_WEEK_MONDAY); [EOL]         assertWeekIterator(it, monday); [EOL]         it = DateUtils.iterator(now, DateUtils.RANGE_WEEK_RELATIVE); [EOL]         assertWeekIterator(it, today); [EOL]         it = DateUtils.iterator(now, DateUtils.RANGE_WEEK_CENTER); [EOL]         assertWeekIterator(it, centered); [EOL]         it = DateUtils.iterator((Object) now, DateUtils.RANGE_WEEK_CENTER); [EOL]         assertWeekIterator(it, centered); [EOL]         it = DateUtils.iterator((Object) now.getTime(), DateUtils.RANGE_WEEK_CENTER); [EOL]         assertWeekIterator(it, centered); [EOL]         try { [EOL]             it.next(); [EOL]             fail(); [EOL]         } catch (final NoSuchElementException ex) { [EOL]         } [EOL]         it = DateUtils.iterator(now, DateUtils.RANGE_WEEK_CENTER); [EOL]         it.next(); [EOL]         try { [EOL]             it.remove(); [EOL]         } catch (final UnsupportedOperationException ex) { [EOL]         } [EOL]         now.add(Calendar.DATE, 1); [EOL]     } [EOL] }
@Test [EOL] public void testConstructor() { [EOL]     assertNotNull(new WordUtils()); [EOL]     final Constructor<?>[] cons = WordUtils.class.getDeclaredConstructors(); [EOL]     assertEquals(1, cons.length); [EOL]     assertTrue(Modifier.isPublic(cons[0].getModifiers())); [EOL]     assertTrue(Modifier.isPublic(WordUtils.class.getModifiers())); [EOL]     assertFalse(Modifier.isFinal(WordUtils.class.getModifiers())); [EOL] }
@Test [EOL] public void testWrap_StringInt() { [EOL]     assertEquals(null, WordUtils.wrap(null, 20)); [EOL]     assertEquals(null, WordUtils.wrap(null, -1)); [EOL]     assertEquals("", WordUtils.wrap("", 20)); [EOL]     assertEquals("", WordUtils.wrap("", -1)); [EOL]     final String systemNewLine = System.getProperty("line.separator"); [EOL]     String input = "Here is one line of text that is going to be wrapped after 20 columns."; [EOL]     String expected = "Here is one line of" + systemNewLine + "text that is going" + systemNewLine + "to be wrapped after" + systemNewLine + "20 columns."; [EOL]     assertEquals(expected, WordUtils.wrap(input, 20)); [EOL]     input = "Click here to jump to the jakarta website - http://jakarta.apache.org"; [EOL]     expected = "Click here to jump" + systemNewLine + "to the jakarta" + systemNewLine + "website -" + systemNewLine + "http://jakarta.apache.org"; [EOL]     assertEquals(expected, WordUtils.wrap(input, 20)); [EOL]     input = "Click here, http://jakarta.apache.org, to jump to the jakarta website"; [EOL]     expected = "Click here," + systemNewLine + "http://jakarta.apache.org," + systemNewLine + "to jump to the" + systemNewLine + "jakarta website"; [EOL]     assertEquals(expected, WordUtils.wrap(input, 20)); [EOL] }
@Test [EOL] public void testWrap_StringInt() { [EOL]     assertEquals(null, WordUtils.wrap(null, 20)); [EOL]     assertEquals(null, WordUtils.wrap(null, -1)); [EOL]     assertEquals("", WordUtils.wrap("", 20)); [EOL]     assertEquals("", WordUtils.wrap("", -1)); [EOL]     final String systemNewLine = System.getProperty("line.separator"); [EOL]     String input = "Here is one line of text that is going to be wrapped after 20 columns."; [EOL]     String expected = "Here is one line of" + systemNewLine + "text that is going" + systemNewLine + "to be wrapped after" + systemNewLine + "20 columns."; [EOL]     assertEquals(expected, WordUtils.wrap(input, 20)); [EOL]     input = "Click here to jump to the jakarta website - http://jakarta.apache.org"; [EOL]     expected = "Click here to jump" + systemNewLine + "to the jakarta" + systemNewLine + "website -" + systemNewLine + "http://jakarta.apache.org"; [EOL]     assertEquals(expected, WordUtils.wrap(input, 20)); [EOL]     input = "Click here, http://jakarta.apache.org, to jump to the jakarta website"; [EOL]     expected = "Click here," + systemNewLine + "http://jakarta.apache.org," + systemNewLine + "to jump to the" + systemNewLine + "jakarta website"; [EOL]     assertEquals(expected, WordUtils.wrap(input, 20)); [EOL] }
@Test [EOL] public void testWrap_StringInt() { [EOL]     assertEquals(null, WordUtils.wrap(null, 20)); [EOL]     assertEquals(null, WordUtils.wrap(null, -1)); [EOL]     assertEquals("", WordUtils.wrap("", 20)); [EOL]     assertEquals("", WordUtils.wrap("", -1)); [EOL]     final String systemNewLine = System.getProperty("line.separator"); [EOL]     String input = "Here is one line of text that is going to be wrapped after 20 columns."; [EOL]     String expected = "Here is one line of" + systemNewLine + "text that is going" + systemNewLine + "to be wrapped after" + systemNewLine + "20 columns."; [EOL]     assertEquals(expected, WordUtils.wrap(input, 20)); [EOL]     input = "Click here to jump to the jakarta website - http://jakarta.apache.org"; [EOL]     expected = "Click here to jump" + systemNewLine + "to the jakarta" + systemNewLine + "website -" + systemNewLine + "http://jakarta.apache.org"; [EOL]     assertEquals(expected, WordUtils.wrap(input, 20)); [EOL]     input = "Click here, http://jakarta.apache.org, to jump to the jakarta website"; [EOL]     expected = "Click here," + systemNewLine + "http://jakarta.apache.org," + systemNewLine + "to jump to the" + systemNewLine + "jakarta website"; [EOL]     assertEquals(expected, WordUtils.wrap(input, 20)); [EOL] }
@Test [EOL] public void testWrap_StringInt() { [EOL]     assertEquals(null, WordUtils.wrap(null, 20)); [EOL]     assertEquals(null, WordUtils.wrap(null, -1)); [EOL]     assertEquals("", WordUtils.wrap("", 20)); [EOL]     assertEquals("", WordUtils.wrap("", -1)); [EOL]     final String systemNewLine = System.getProperty("line.separator"); [EOL]     String input = "Here is one line of text that is going to be wrapped after 20 columns."; [EOL]     String expected = "Here is one line of" + systemNewLine + "text that is going" + systemNewLine + "to be wrapped after" + systemNewLine + "20 columns."; [EOL]     assertEquals(expected, WordUtils.wrap(input, 20)); [EOL]     input = "Click here to jump to the jakarta website - http://jakarta.apache.org"; [EOL]     expected = "Click here to jump" + systemNewLine + "to the jakarta" + systemNewLine + "website -" + systemNewLine + "http://jakarta.apache.org"; [EOL]     assertEquals(expected, WordUtils.wrap(input, 20)); [EOL]     input = "Click here, http://jakarta.apache.org, to jump to the jakarta website"; [EOL]     expected = "Click here," + systemNewLine + "http://jakarta.apache.org," + systemNewLine + "to jump to the" + systemNewLine + "jakarta website"; [EOL]     assertEquals(expected, WordUtils.wrap(input, 20)); [EOL] }
@Test [EOL] public void testWrap_StringInt() { [EOL]     assertEquals(null, WordUtils.wrap(null, 20)); [EOL]     assertEquals(null, WordUtils.wrap(null, -1)); [EOL]     assertEquals("", WordUtils.wrap("", 20)); [EOL]     assertEquals("", WordUtils.wrap("", -1)); [EOL]     final String systemNewLine = System.getProperty("line.separator"); [EOL]     String input = "Here is one line of text that is going to be wrapped after 20 columns."; [EOL]     String expected = "Here is one line of" + systemNewLine + "text that is going" + systemNewLine + "to be wrapped after" + systemNewLine + "20 columns."; [EOL]     assertEquals(expected, WordUtils.wrap(input, 20)); [EOL]     input = "Click here to jump to the jakarta website - http://jakarta.apache.org"; [EOL]     expected = "Click here to jump" + systemNewLine + "to the jakarta" + systemNewLine + "website -" + systemNewLine + "http://jakarta.apache.org"; [EOL]     assertEquals(expected, WordUtils.wrap(input, 20)); [EOL]     input = "Click here, http://jakarta.apache.org, to jump to the jakarta website"; [EOL]     expected = "Click here," + systemNewLine + "http://jakarta.apache.org," + systemNewLine + "to jump to the" + systemNewLine + "jakarta website"; [EOL]     assertEquals(expected, WordUtils.wrap(input, 20)); [EOL] }
@Test [EOL] public void testWrap_StringInt() { [EOL]     assertEquals(null, WordUtils.wrap(null, 20)); [EOL]     assertEquals(null, WordUtils.wrap(null, -1)); [EOL]     assertEquals("", WordUtils.wrap("", 20)); [EOL]     assertEquals("", WordUtils.wrap("", -1)); [EOL]     final String systemNewLine = System.getProperty("line.separator"); [EOL]     String input = "Here is one line of text that is going to be wrapped after 20 columns."; [EOL]     String expected = "Here is one line of" + systemNewLine + "text that is going" + systemNewLine + "to be wrapped after" + systemNewLine + "20 columns."; [EOL]     assertEquals(expected, WordUtils.wrap(input, 20)); [EOL]     input = "Click here to jump to the jakarta website - http://jakarta.apache.org"; [EOL]     expected = "Click here to jump" + systemNewLine + "to the jakarta" + systemNewLine + "website -" + systemNewLine + "http://jakarta.apache.org"; [EOL]     assertEquals(expected, WordUtils.wrap(input, 20)); [EOL]     input = "Click here, http://jakarta.apache.org, to jump to the jakarta website"; [EOL]     expected = "Click here," + systemNewLine + "http://jakarta.apache.org," + systemNewLine + "to jump to the" + systemNewLine + "jakarta website"; [EOL]     assertEquals(expected, WordUtils.wrap(input, 20)); [EOL] }
@Test [EOL] public void testWrap_StringInt() { [EOL]     assertEquals(null, WordUtils.wrap(null, 20)); [EOL]     assertEquals(null, WordUtils.wrap(null, -1)); [EOL]     assertEquals("", WordUtils.wrap("", 20)); [EOL]     assertEquals("", WordUtils.wrap("", -1)); [EOL]     final String systemNewLine = System.getProperty("line.separator"); [EOL]     String input = "Here is one line of text that is going to be wrapped after 20 columns."; [EOL]     String expected = "Here is one line of" + systemNewLine + "text that is going" + systemNewLine + "to be wrapped after" + systemNewLine + "20 columns."; [EOL]     assertEquals(expected, WordUtils.wrap(input, 20)); [EOL]     input = "Click here to jump to the jakarta website - http://jakarta.apache.org"; [EOL]     expected = "Click here to jump" + systemNewLine + "to the jakarta" + systemNewLine + "website -" + systemNewLine + "http://jakarta.apache.org"; [EOL]     assertEquals(expected, WordUtils.wrap(input, 20)); [EOL]     input = "Click here, http://jakarta.apache.org, to jump to the jakarta website"; [EOL]     expected = "Click here," + systemNewLine + "http://jakarta.apache.org," + systemNewLine + "to jump to the" + systemNewLine + "jakarta website"; [EOL]     assertEquals(expected, WordUtils.wrap(input, 20)); [EOL] }
@Test [EOL] public void testWrap_StringInt() { [EOL]     assertEquals(null, WordUtils.wrap(null, 20)); [EOL]     assertEquals(null, WordUtils.wrap(null, -1)); [EOL]     assertEquals("", WordUtils.wrap("", 20)); [EOL]     assertEquals("", WordUtils.wrap("", -1)); [EOL]     final String systemNewLine = System.getProperty("line.separator"); [EOL]     String input = "Here is one line of text that is going to be wrapped after 20 columns."; [EOL]     String expected = "Here is one line of" + systemNewLine + "text that is going" + systemNewLine + "to be wrapped after" + systemNewLine + "20 columns."; [EOL]     assertEquals(expected, WordUtils.wrap(input, 20)); [EOL]     input = "Click here to jump to the jakarta website - http://jakarta.apache.org"; [EOL]     expected = "Click here to jump" + systemNewLine + "to the jakarta" + systemNewLine + "website -" + systemNewLine + "http://jakarta.apache.org"; [EOL]     assertEquals(expected, WordUtils.wrap(input, 20)); [EOL]     input = "Click here, http://jakarta.apache.org, to jump to the jakarta website"; [EOL]     expected = "Click here," + systemNewLine + "http://jakarta.apache.org," + systemNewLine + "to jump to the" + systemNewLine + "jakarta website"; [EOL]     assertEquals(expected, WordUtils.wrap(input, 20)); [EOL] }
@Test [EOL] public void testWrap_StringInt() { [EOL]     assertEquals(null, WordUtils.wrap(null, 20)); [EOL]     assertEquals(null, WordUtils.wrap(null, -1)); [EOL]     assertEquals("", WordUtils.wrap("", 20)); [EOL]     assertEquals("", WordUtils.wrap("", -1)); [EOL]     final String systemNewLine = System.getProperty("line.separator"); [EOL]     String input = "Here is one line of text that is going to be wrapped after 20 columns."; [EOL]     String expected = "Here is one line of" + systemNewLine + "text that is going" + systemNewLine + "to be wrapped after" + systemNewLine + "20 columns."; [EOL]     assertEquals(expected, WordUtils.wrap(input, 20)); [EOL]     input = "Click here to jump to the jakarta website - http://jakarta.apache.org"; [EOL]     expected = "Click here to jump" + systemNewLine + "to the jakarta" + systemNewLine + "website -" + systemNewLine + "http://jakarta.apache.org"; [EOL]     assertEquals(expected, WordUtils.wrap(input, 20)); [EOL]     input = "Click here, http://jakarta.apache.org, to jump to the jakarta website"; [EOL]     expected = "Click here," + systemNewLine + "http://jakarta.apache.org," + systemNewLine + "to jump to the" + systemNewLine + "jakarta website"; [EOL]     assertEquals(expected, WordUtils.wrap(input, 20)); [EOL] }
@Test [EOL] public void testWrap_StringInt() { [EOL]     assertEquals(null, WordUtils.wrap(null, 20)); [EOL]     assertEquals(null, WordUtils.wrap(null, -1)); [EOL]     assertEquals("", WordUtils.wrap("", 20)); [EOL]     assertEquals("", WordUtils.wrap("", -1)); [EOL]     final String systemNewLine = System.getProperty("line.separator"); [EOL]     String input = "Here is one line of text that is going to be wrapped after 20 columns."; [EOL]     String expected = "Here is one line of" + systemNewLine + "text that is going" + systemNewLine + "to be wrapped after" + systemNewLine + "20 columns."; [EOL]     assertEquals(expected, WordUtils.wrap(input, 20)); [EOL]     input = "Click here to jump to the jakarta website - http://jakarta.apache.org"; [EOL]     expected = "Click here to jump" + systemNewLine + "to the jakarta" + systemNewLine + "website -" + systemNewLine + "http://jakarta.apache.org"; [EOL]     assertEquals(expected, WordUtils.wrap(input, 20)); [EOL]     input = "Click here, http://jakarta.apache.org, to jump to the jakarta website"; [EOL]     expected = "Click here," + systemNewLine + "http://jakarta.apache.org," + systemNewLine + "to jump to the" + systemNewLine + "jakarta website"; [EOL]     assertEquals(expected, WordUtils.wrap(input, 20)); [EOL] }
@Test [EOL] public void testWrap_StringInt() { [EOL]     assertEquals(null, WordUtils.wrap(null, 20)); [EOL]     assertEquals(null, WordUtils.wrap(null, -1)); [EOL]     assertEquals("", WordUtils.wrap("", 20)); [EOL]     assertEquals("", WordUtils.wrap("", -1)); [EOL]     final String systemNewLine = System.getProperty("line.separator"); [EOL]     String input = "Here is one line of text that is going to be wrapped after 20 columns."; [EOL]     String expected = "Here is one line of" + systemNewLine + "text that is going" + systemNewLine + "to be wrapped after" + systemNewLine + "20 columns."; [EOL]     assertEquals(expected, WordUtils.wrap(input, 20)); [EOL]     input = "Click here to jump to the jakarta website - http://jakarta.apache.org"; [EOL]     expected = "Click here to jump" + systemNewLine + "to the jakarta" + systemNewLine + "website -" + systemNewLine + "http://jakarta.apache.org"; [EOL]     assertEquals(expected, WordUtils.wrap(input, 20)); [EOL]     input = "Click here, http://jakarta.apache.org, to jump to the jakarta website"; [EOL]     expected = "Click here," + systemNewLine + "http://jakarta.apache.org," + systemNewLine + "to jump to the" + systemNewLine + "jakarta website"; [EOL]     assertEquals(expected, WordUtils.wrap(input, 20)); [EOL] }
@Test [EOL] public void testWrap_StringInt() { [EOL]     assertEquals(null, WordUtils.wrap(null, 20)); [EOL]     assertEquals(null, WordUtils.wrap(null, -1)); [EOL]     assertEquals("", WordUtils.wrap("", 20)); [EOL]     assertEquals("", WordUtils.wrap("", -1)); [EOL]     final String systemNewLine = System.getProperty("line.separator"); [EOL]     String input = "Here is one line of text that is going to be wrapped after 20 columns."; [EOL]     String expected = "Here is one line of" + systemNewLine + "text that is going" + systemNewLine + "to be wrapped after" + systemNewLine + "20 columns."; [EOL]     assertEquals(expected, WordUtils.wrap(input, 20)); [EOL]     input = "Click here to jump to the jakarta website - http://jakarta.apache.org"; [EOL]     expected = "Click here to jump" + systemNewLine + "to the jakarta" + systemNewLine + "website -" + systemNewLine + "http://jakarta.apache.org"; [EOL]     assertEquals(expected, WordUtils.wrap(input, 20)); [EOL]     input = "Click here, http://jakarta.apache.org, to jump to the jakarta website"; [EOL]     expected = "Click here," + systemNewLine + "http://jakarta.apache.org," + systemNewLine + "to jump to the" + systemNewLine + "jakarta website"; [EOL]     assertEquals(expected, WordUtils.wrap(input, 20)); [EOL] }
@Test [EOL] public void testWrap_StringInt() { [EOL]     assertEquals(null, WordUtils.wrap(null, 20)); [EOL]     assertEquals(null, WordUtils.wrap(null, -1)); [EOL]     assertEquals("", WordUtils.wrap("", 20)); [EOL]     assertEquals("", WordUtils.wrap("", -1)); [EOL]     final String systemNewLine = System.getProperty("line.separator"); [EOL]     String input = "Here is one line of text that is going to be wrapped after 20 columns."; [EOL]     String expected = "Here is one line of" + systemNewLine + "text that is going" + systemNewLine + "to be wrapped after" + systemNewLine + "20 columns."; [EOL]     assertEquals(expected, WordUtils.wrap(input, 20)); [EOL]     input = "Click here to jump to the jakarta website - http://jakarta.apache.org"; [EOL]     expected = "Click here to jump" + systemNewLine + "to the jakarta" + systemNewLine + "website -" + systemNewLine + "http://jakarta.apache.org"; [EOL]     assertEquals(expected, WordUtils.wrap(input, 20)); [EOL]     input = "Click here, http://jakarta.apache.org, to jump to the jakarta website"; [EOL]     expected = "Click here," + systemNewLine + "http://jakarta.apache.org," + systemNewLine + "to jump to the" + systemNewLine + "jakarta website"; [EOL]     assertEquals(expected, WordUtils.wrap(input, 20)); [EOL] }
@Test [EOL] public void testWrap_StringInt() { [EOL]     assertEquals(null, WordUtils.wrap(null, 20)); [EOL]     assertEquals(null, WordUtils.wrap(null, -1)); [EOL]     assertEquals("", WordUtils.wrap("", 20)); [EOL]     assertEquals("", WordUtils.wrap("", -1)); [EOL]     final String systemNewLine = System.getProperty("line.separator"); [EOL]     String input = "Here is one line of text that is going to be wrapped after 20 columns."; [EOL]     String expected = "Here is one line of" + systemNewLine + "text that is going" + systemNewLine + "to be wrapped after" + systemNewLine + "20 columns."; [EOL]     assertEquals(expected, WordUtils.wrap(input, 20)); [EOL]     input = "Click here to jump to the jakarta website - http://jakarta.apache.org"; [EOL]     expected = "Click here to jump" + systemNewLine + "to the jakarta" + systemNewLine + "website -" + systemNewLine + "http://jakarta.apache.org"; [EOL]     assertEquals(expected, WordUtils.wrap(input, 20)); [EOL]     input = "Click here, http://jakarta.apache.org, to jump to the jakarta website"; [EOL]     expected = "Click here," + systemNewLine + "http://jakarta.apache.org," + systemNewLine + "to jump to the" + systemNewLine + "jakarta website"; [EOL]     assertEquals(expected, WordUtils.wrap(input, 20)); [EOL] }
@Test [EOL] public void testEscapeSurrogatePairs() throws Exception { [EOL]     assertEquals("\uD83D\uDE30", StringEscapeUtils.escapeCsv("\uD83D\uDE30")); [EOL]     assertEquals("\uD800\uDC00", StringEscapeUtils.escapeCsv("\uD800\uDC00")); [EOL]     assertEquals("\uD834\uDD1E", StringEscapeUtils.escapeCsv("\uD834\uDD1E")); [EOL]     assertEquals("\uDBFF\uDFFD", StringEscapeUtils.escapeCsv("\uDBFF\uDFFD")); [EOL]     assertEquals("\uDBFF\uDFFD", StringEscapeUtils.escapeHtml3("\uDBFF\uDFFD")); [EOL]     assertEquals("\uDBFF\uDFFD", StringEscapeUtils.escapeHtml4("\uDBFF\uDFFD")); [EOL]     assertEquals("\uDBFF\uDFFD", StringEscapeUtils.escapeXml("\uDBFF\uDFFD")); [EOL] }
@Test [EOL] public void testEscapeSurrogatePairs() throws Exception { [EOL]     assertEquals("\uD83D\uDE30", StringEscapeUtils.escapeCsv("\uD83D\uDE30")); [EOL]     assertEquals("\uD800\uDC00", StringEscapeUtils.escapeCsv("\uD800\uDC00")); [EOL]     assertEquals("\uD834\uDD1E", StringEscapeUtils.escapeCsv("\uD834\uDD1E")); [EOL]     assertEquals("\uDBFF\uDFFD", StringEscapeUtils.escapeCsv("\uDBFF\uDFFD")); [EOL]     assertEquals("\uDBFF\uDFFD", StringEscapeUtils.escapeHtml3("\uDBFF\uDFFD")); [EOL]     assertEquals("\uDBFF\uDFFD", StringEscapeUtils.escapeHtml4("\uDBFF\uDFFD")); [EOL]     assertEquals("\uDBFF\uDFFD", StringEscapeUtils.escapeXml("\uDBFF\uDFFD")); [EOL] }
@Test [EOL] public void testEscapeSurrogatePairs() throws Exception { [EOL]     assertEquals("\uD83D\uDE30", StringEscapeUtils.escapeCsv("\uD83D\uDE30")); [EOL]     assertEquals("\uD800\uDC00", StringEscapeUtils.escapeCsv("\uD800\uDC00")); [EOL]     assertEquals("\uD834\uDD1E", StringEscapeUtils.escapeCsv("\uD834\uDD1E")); [EOL]     assertEquals("\uDBFF\uDFFD", StringEscapeUtils.escapeCsv("\uDBFF\uDFFD")); [EOL]     assertEquals("\uDBFF\uDFFD", StringEscapeUtils.escapeHtml3("\uDBFF\uDFFD")); [EOL]     assertEquals("\uDBFF\uDFFD", StringEscapeUtils.escapeHtml4("\uDBFF\uDFFD")); [EOL]     assertEquals("\uDBFF\uDFFD", StringEscapeUtils.escapeXml("\uDBFF\uDFFD")); [EOL] }
@Test [EOL] public void testEscapeSurrogatePairs() throws Exception { [EOL]     assertEquals("\uD83D\uDE30", StringEscapeUtils.escapeCsv("\uD83D\uDE30")); [EOL]     assertEquals("\uD800\uDC00", StringEscapeUtils.escapeCsv("\uD800\uDC00")); [EOL]     assertEquals("\uD834\uDD1E", StringEscapeUtils.escapeCsv("\uD834\uDD1E")); [EOL]     assertEquals("\uDBFF\uDFFD", StringEscapeUtils.escapeCsv("\uDBFF\uDFFD")); [EOL]     assertEquals("\uDBFF\uDFFD", StringEscapeUtils.escapeHtml3("\uDBFF\uDFFD")); [EOL]     assertEquals("\uDBFF\uDFFD", StringEscapeUtils.escapeHtml4("\uDBFF\uDFFD")); [EOL]     assertEquals("\uDBFF\uDFFD", StringEscapeUtils.escapeXml("\uDBFF\uDFFD")); [EOL] }
@Test [EOL] public void testAddInitializerAfterStart() throws ConcurrentException { [EOL]     initializer.start(); [EOL]     try { [EOL]         initializer.addInitializer(CHILD_INIT, new ChildBackgroundInitializer()); [EOL]         fail("Could add initializer after start()!"); [EOL]     } catch (final IllegalStateException istex) { [EOL]         initializer.get(); [EOL]     } [EOL] }
@Test [EOL] public void testAddInitializerAfterStart() throws ConcurrentException { [EOL]     initializer.start(); [EOL]     try { [EOL]         initializer.addInitializer(CHILD_INIT, new ChildBackgroundInitializer()); [EOL]         fail("Could add initializer after start()!"); [EOL]     } catch (final IllegalStateException istex) { [EOL]         initializer.get(); [EOL]     } [EOL] }
@Test [EOL] public void testAddInitializerAfterStart() throws ConcurrentException { [EOL]     initializer.start(); [EOL]     try { [EOL]         initializer.addInitializer(CHILD_INIT, new ChildBackgroundInitializer()); [EOL]         fail("Could add initializer after start()!"); [EOL]     } catch (final IllegalStateException istex) { [EOL]         initializer.get(); [EOL]     } [EOL] }
@Test [EOL] public void testAddInitializerAfterStart() throws ConcurrentException { [EOL]     initializer.start(); [EOL]     try { [EOL]         initializer.addInitializer(CHILD_INIT, new ChildBackgroundInitializer()); [EOL]         fail("Could add initializer after start()!"); [EOL]     } catch (final IllegalStateException istex) { [EOL]         initializer.get(); [EOL]     } [EOL] }
@Test [EOL] public void testCountriesByLanguage() { [EOL]     assertCountriesByLanguage(null, new String[0]); [EOL]     assertCountriesByLanguage("de", new String[] { "DE", "CH", "AT", "LU" }); [EOL]     assertCountriesByLanguage("zz", new String[0]); [EOL]     assertCountriesByLanguage("it", new String[] { "IT", "CH" }); [EOL] }
@Test [EOL] public void testCountriesByLanguage() { [EOL]     assertCountriesByLanguage(null, new String[0]); [EOL]     assertCountriesByLanguage("de", new String[] { "DE", "CH", "AT", "LU" }); [EOL]     assertCountriesByLanguage("zz", new String[0]); [EOL]     assertCountriesByLanguage("it", new String[] { "IT", "CH" }); [EOL] }
@Test [EOL] public void testCountriesByLanguage() { [EOL]     assertCountriesByLanguage(null, new String[0]); [EOL]     assertCountriesByLanguage("de", new String[] { "DE", "CH", "AT", "LU" }); [EOL]     assertCountriesByLanguage("zz", new String[0]); [EOL]     assertCountriesByLanguage("it", new String[] { "IT", "CH" }); [EOL] }
@Test [EOL] public void testCountriesByLanguage() { [EOL]     assertCountriesByLanguage(null, new String[0]); [EOL]     assertCountriesByLanguage("de", new String[] { "DE", "CH", "AT", "LU" }); [EOL]     assertCountriesByLanguage("zz", new String[0]); [EOL]     assertCountriesByLanguage("it", new String[] { "IT", "CH" }); [EOL] }
@Test [EOL] public void testSubarrayBoolean() { [EOL]     final boolean[] nullArray = null; [EOL]     final boolean[] array = { true, true, false, true, false, true }; [EOL]     final boolean[] leftSubarray = { true, true, false, true }; [EOL]     final boolean[] midSubarray = { true, false, true, false }; [EOL]     final boolean[] rightSubarray = { false, true, false, true }; [EOL]     assertTrue("0 start, mid end", ArrayUtils.isEquals(leftSubarray, ArrayUtils.subarray(array, 0, 4))); [EOL]     assertTrue("0 start, length end", ArrayUtils.isEquals(array, ArrayUtils.subarray(array, 0, array.length))); [EOL]     assertTrue("mid start, mid end", ArrayUtils.isEquals(midSubarray, ArrayUtils.subarray(array, 1, 5))); [EOL]     assertTrue("mid start, length end", ArrayUtils.isEquals(rightSubarray, ArrayUtils.subarray(array, 2, array.length))); [EOL]     assertNull("null input", ArrayUtils.subarray(nullArray, 0, 3)); [EOL]     assertEquals("empty array", ArrayUtils.EMPTY_BOOLEAN_ARRAY, ArrayUtils.subarray(ArrayUtils.EMPTY_BOOLEAN_ARRAY, 1, 2)); [EOL]     assertEquals("start > end", ArrayUtils.EMPTY_BOOLEAN_ARRAY, ArrayUtils.subarray(array, 4, 2)); [EOL]     assertEquals("start == end", ArrayUtils.EMPTY_BOOLEAN_ARRAY, ArrayUtils.subarray(array, 3, 3)); [EOL]     assertTrue("start undershoot, normal end", ArrayUtils.isEquals(leftSubarray, ArrayUtils.subarray(array, -2, 4))); [EOL]     assertEquals("start overshoot, any end", ArrayUtils.EMPTY_BOOLEAN_ARRAY, ArrayUtils.subarray(array, 33, 4)); [EOL]     assertTrue("normal start, end overshoot", ArrayUtils.isEquals(rightSubarray, ArrayUtils.subarray(array, 2, 33))); [EOL]     assertTrue("start undershoot, end overshoot", ArrayUtils.isEquals(array, ArrayUtils.subarray(array, -2, 12))); [EOL]     assertSame("empty array, object test", ArrayUtils.EMPTY_BOOLEAN_ARRAY, ArrayUtils.subarray(ArrayUtils.EMPTY_BOOLEAN_ARRAY, 1, 2)); [EOL]     assertSame("start > end, object test", ArrayUtils.EMPTY_BOOLEAN_ARRAY, ArrayUtils.subarray(array, 4, 1)); [EOL]     assertSame("start == end, object test", ArrayUtils.EMPTY_BOOLEAN_ARRAY, ArrayUtils.subarray(array, 3, 3)); [EOL]     assertSame("start overshoot, any end, object test", ArrayUtils.EMPTY_BOOLEAN_ARRAY, ArrayUtils.subarray(array, 8733, 4)); [EOL]     assertSame("boolean type", boolean.class, ArrayUtils.subarray(array, 2, 4).getClass().getComponentType()); [EOL] }
@Test [EOL] public void testCloneChar() { [EOL]     assertEquals(null, ArrayUtils.clone((char[]) null)); [EOL]     final char[] original = new char[] { 'a', '4' }; [EOL]     final char[] cloned = ArrayUtils.clone(original); [EOL]     assertTrue(Arrays.equals(original, cloned)); [EOL]     assertTrue(original != cloned); [EOL] }
@Test [EOL] public void testCloneChar() { [EOL]     assertEquals(null, ArrayUtils.clone((char[]) null)); [EOL]     final char[] original = new char[] { 'a', '4' }; [EOL]     final char[] cloned = ArrayUtils.clone(original); [EOL]     assertTrue(Arrays.equals(original, cloned)); [EOL]     assertTrue(original != cloned); [EOL] }
@Test [EOL] public void testCloneChar() { [EOL]     assertEquals(null, ArrayUtils.clone((char[]) null)); [EOL]     final char[] original = new char[] { 'a', '4' }; [EOL]     final char[] cloned = ArrayUtils.clone(original); [EOL]     assertTrue(Arrays.equals(original, cloned)); [EOL]     assertTrue(original != cloned); [EOL] }
@Test [EOL] public void testNullToEmptyInt() { [EOL]     assertEquals(ArrayUtils.EMPTY_INT_ARRAY, ArrayUtils.nullToEmpty((int[]) null)); [EOL]     final int[] original = new int[] { 1, 2 }; [EOL]     assertEquals(original, ArrayUtils.nullToEmpty(original)); [EOL]     final int[] empty = new int[] {}; [EOL]     final int[] result = ArrayUtils.nullToEmpty(empty); [EOL]     assertEquals(ArrayUtils.EMPTY_INT_ARRAY, result); [EOL]     assertTrue(empty != result); [EOL] }
@Test [EOL] public void testNullToEmptyInt() { [EOL]     assertEquals(ArrayUtils.EMPTY_INT_ARRAY, ArrayUtils.nullToEmpty((int[]) null)); [EOL]     final int[] original = new int[] { 1, 2 }; [EOL]     assertEquals(original, ArrayUtils.nullToEmpty(original)); [EOL]     final int[] empty = new int[] {}; [EOL]     final int[] result = ArrayUtils.nullToEmpty(empty); [EOL]     assertEquals(ArrayUtils.EMPTY_INT_ARRAY, result); [EOL]     assertTrue(empty != result); [EOL] }
@Test [EOL] public void testNullToEmptyInt() { [EOL]     assertEquals(ArrayUtils.EMPTY_INT_ARRAY, ArrayUtils.nullToEmpty((int[]) null)); [EOL]     final int[] original = new int[] { 1, 2 }; [EOL]     assertEquals(original, ArrayUtils.nullToEmpty(original)); [EOL]     final int[] empty = new int[] {}; [EOL]     final int[] result = ArrayUtils.nullToEmpty(empty); [EOL]     assertEquals(ArrayUtils.EMPTY_INT_ARRAY, result); [EOL]     assertTrue(empty != result); [EOL] }
@Test [EOL] public void testNullToEmptyDouble() { [EOL]     assertEquals(ArrayUtils.EMPTY_DOUBLE_ARRAY, ArrayUtils.nullToEmpty((double[]) null)); [EOL]     final double[] original = new double[] { 1L, 2L }; [EOL]     assertEquals(original, ArrayUtils.nullToEmpty(original)); [EOL]     final double[] empty = new double[] {}; [EOL]     final double[] result = ArrayUtils.nullToEmpty(empty); [EOL]     assertEquals(ArrayUtils.EMPTY_DOUBLE_ARRAY, result); [EOL]     assertTrue(empty != result); [EOL] }
@Test [EOL] public void testNullToEmptyDouble() { [EOL]     assertEquals(ArrayUtils.EMPTY_DOUBLE_ARRAY, ArrayUtils.nullToEmpty((double[]) null)); [EOL]     final double[] original = new double[] { 1L, 2L }; [EOL]     assertEquals(original, ArrayUtils.nullToEmpty(original)); [EOL]     final double[] empty = new double[] {}; [EOL]     final double[] result = ArrayUtils.nullToEmpty(empty); [EOL]     assertEquals(ArrayUtils.EMPTY_DOUBLE_ARRAY, result); [EOL]     assertTrue(empty != result); [EOL] }
@Test [EOL] public void testNullToEmptyDouble() { [EOL]     assertEquals(ArrayUtils.EMPTY_DOUBLE_ARRAY, ArrayUtils.nullToEmpty((double[]) null)); [EOL]     final double[] original = new double[] { 1L, 2L }; [EOL]     assertEquals(original, ArrayUtils.nullToEmpty(original)); [EOL]     final double[] empty = new double[] {}; [EOL]     final double[] result = ArrayUtils.nullToEmpty(empty); [EOL]     assertEquals(ArrayUtils.EMPTY_DOUBLE_ARRAY, result); [EOL]     assertTrue(empty != result); [EOL] }
@Test [EOL] public void testSubarrayObject() { [EOL]     final Object[] nullArray = null; [EOL]     final Object[] objectArray = { "a", "b", "c", "d", "e", "f" }; [EOL]     assertEquals("0 start, mid end", "abcd", StringUtils.join(ArrayUtils.subarray(objectArray, 0, 4))); [EOL]     assertEquals("0 start, length end", "abcdef", StringUtils.join(ArrayUtils.subarray(objectArray, 0, objectArray.length))); [EOL]     assertEquals("mid start, mid end", "bcd", StringUtils.join(ArrayUtils.subarray(objectArray, 1, 4))); [EOL]     assertEquals("mid start, length end", "bcdef", StringUtils.join(ArrayUtils.subarray(objectArray, 1, objectArray.length))); [EOL]     assertNull("null input", ArrayUtils.subarray(nullArray, 0, 3)); [EOL]     assertEquals("empty array", "", StringUtils.join(ArrayUtils.subarray(ArrayUtils.EMPTY_OBJECT_ARRAY, 1, 2))); [EOL]     assertEquals("start > end", "", StringUtils.join(ArrayUtils.subarray(objectArray, 4, 2))); [EOL]     assertEquals("start == end", "", StringUtils.join(ArrayUtils.subarray(objectArray, 3, 3))); [EOL]     assertEquals("start undershoot, normal end", "abcd", StringUtils.join(ArrayUtils.subarray(objectArray, -2, 4))); [EOL]     assertEquals("start overshoot, any end", "", StringUtils.join(ArrayUtils.subarray(objectArray, 33, 4))); [EOL]     assertEquals("normal start, end overshoot", "cdef", StringUtils.join(ArrayUtils.subarray(objectArray, 2, 33))); [EOL]     assertEquals("start undershoot, end overshoot", "abcdef", StringUtils.join(ArrayUtils.subarray(objectArray, -2, 12))); [EOL]     final Date[] dateArray = { new java.sql.Date(new Date().getTime()), new Date(), new Date(), new Date(), new Date() }; [EOL]     assertSame("Object type", Object.class, ArrayUtils.subarray(objectArray, 2, 4).getClass().getComponentType()); [EOL]     assertSame("java.util.Date type", java.util.Date.class, ArrayUtils.subarray(dateArray, 1, 4).getClass().getComponentType()); [EOL]     assertNotSame("java.sql.Date type", java.sql.Date.class, ArrayUtils.subarray(dateArray, 1, 4).getClass().getComponentType()); [EOL]     try { [EOL]         @SuppressWarnings("unused") [EOL]         final java.sql.Date[] dummy = (java.sql.Date[]) ArrayUtils.subarray(dateArray, 1, 3); [EOL]         fail("Invalid downcast"); [EOL]     } catch (final ClassCastException e) { [EOL]     } [EOL] }
@Test [EOL] public void testSubarrChar() { [EOL]     final char[] nullArray = null; [EOL]     final char[] array = { 'a', 'b', 'c', 'd', 'e', 'f' }; [EOL]     final char[] leftSubarray = { 'a', 'b', 'c', 'd' }; [EOL]     final char[] midSubarray = { 'b', 'c', 'd', 'e' }; [EOL]     final char[] rightSubarray = { 'c', 'd', 'e', 'f' }; [EOL]     assertTrue("0 start, mid end", ArrayUtils.isEquals(leftSubarray, ArrayUtils.subarray(array, 0, 4))); [EOL]     assertTrue("0 start, length end", ArrayUtils.isEquals(array, ArrayUtils.subarray(array, 0, array.length))); [EOL]     assertTrue("mid start, mid end", ArrayUtils.isEquals(midSubarray, ArrayUtils.subarray(array, 1, 5))); [EOL]     assertTrue("mid start, length end", ArrayUtils.isEquals(rightSubarray, ArrayUtils.subarray(array, 2, array.length))); [EOL]     assertNull("null input", ArrayUtils.subarray(nullArray, 0, 3)); [EOL]     assertEquals("empty array", ArrayUtils.EMPTY_CHAR_ARRAY, ArrayUtils.subarray(ArrayUtils.EMPTY_CHAR_ARRAY, 1, 2)); [EOL]     assertEquals("start > end", ArrayUtils.EMPTY_CHAR_ARRAY, ArrayUtils.subarray(array, 4, 2)); [EOL]     assertEquals("start == end", ArrayUtils.EMPTY_CHAR_ARRAY, ArrayUtils.subarray(array, 3, 3)); [EOL]     assertTrue("start undershoot, normal end", ArrayUtils.isEquals(leftSubarray, ArrayUtils.subarray(array, -2, 4))); [EOL]     assertEquals("start overshoot, any end", ArrayUtils.EMPTY_CHAR_ARRAY, ArrayUtils.subarray(array, 33, 4)); [EOL]     assertTrue("normal start, end overshoot", ArrayUtils.isEquals(rightSubarray, ArrayUtils.subarray(array, 2, 33))); [EOL]     assertTrue("start undershoot, end overshoot", ArrayUtils.isEquals(array, ArrayUtils.subarray(array, -2, 12))); [EOL]     assertSame("empty array, object test", ArrayUtils.EMPTY_CHAR_ARRAY, ArrayUtils.subarray(ArrayUtils.EMPTY_CHAR_ARRAY, 1, 2)); [EOL]     assertSame("start > end, object test", ArrayUtils.EMPTY_CHAR_ARRAY, ArrayUtils.subarray(array, 4, 1)); [EOL]     assertSame("start == end, object test", ArrayUtils.EMPTY_CHAR_ARRAY, ArrayUtils.subarray(array, 3, 3)); [EOL]     assertSame("start overshoot, any end, object test", ArrayUtils.EMPTY_CHAR_ARRAY, ArrayUtils.subarray(array, 8733, 4)); [EOL]     assertSame("char type", char.class, ArrayUtils.subarray(array, 2, 4).getClass().getComponentType()); [EOL] }
@Test [EOL] public void testSubarrayBoolean() { [EOL]     final boolean[] nullArray = null; [EOL]     final boolean[] array = { true, true, false, true, false, true }; [EOL]     final boolean[] leftSubarray = { true, true, false, true }; [EOL]     final boolean[] midSubarray = { true, false, true, false }; [EOL]     final boolean[] rightSubarray = { false, true, false, true }; [EOL]     assertTrue("0 start, mid end", ArrayUtils.isEquals(leftSubarray, ArrayUtils.subarray(array, 0, 4))); [EOL]     assertTrue("0 start, length end", ArrayUtils.isEquals(array, ArrayUtils.subarray(array, 0, array.length))); [EOL]     assertTrue("mid start, mid end", ArrayUtils.isEquals(midSubarray, ArrayUtils.subarray(array, 1, 5))); [EOL]     assertTrue("mid start, length end", ArrayUtils.isEquals(rightSubarray, ArrayUtils.subarray(array, 2, array.length))); [EOL]     assertNull("null input", ArrayUtils.subarray(nullArray, 0, 3)); [EOL]     assertEquals("empty array", ArrayUtils.EMPTY_BOOLEAN_ARRAY, ArrayUtils.subarray(ArrayUtils.EMPTY_BOOLEAN_ARRAY, 1, 2)); [EOL]     assertEquals("start > end", ArrayUtils.EMPTY_BOOLEAN_ARRAY, ArrayUtils.subarray(array, 4, 2)); [EOL]     assertEquals("start == end", ArrayUtils.EMPTY_BOOLEAN_ARRAY, ArrayUtils.subarray(array, 3, 3)); [EOL]     assertTrue("start undershoot, normal end", ArrayUtils.isEquals(leftSubarray, ArrayUtils.subarray(array, -2, 4))); [EOL]     assertEquals("start overshoot, any end", ArrayUtils.EMPTY_BOOLEAN_ARRAY, ArrayUtils.subarray(array, 33, 4)); [EOL]     assertTrue("normal start, end overshoot", ArrayUtils.isEquals(rightSubarray, ArrayUtils.subarray(array, 2, 33))); [EOL]     assertTrue("start undershoot, end overshoot", ArrayUtils.isEquals(array, ArrayUtils.subarray(array, -2, 12))); [EOL]     assertSame("empty array, object test", ArrayUtils.EMPTY_BOOLEAN_ARRAY, ArrayUtils.subarray(ArrayUtils.EMPTY_BOOLEAN_ARRAY, 1, 2)); [EOL]     assertSame("start > end, object test", ArrayUtils.EMPTY_BOOLEAN_ARRAY, ArrayUtils.subarray(array, 4, 1)); [EOL]     assertSame("start == end, object test", ArrayUtils.EMPTY_BOOLEAN_ARRAY, ArrayUtils.subarray(array, 3, 3)); [EOL]     assertSame("start overshoot, any end, object test", ArrayUtils.EMPTY_BOOLEAN_ARRAY, ArrayUtils.subarray(array, 8733, 4)); [EOL]     assertSame("boolean type", boolean.class, ArrayUtils.subarray(array, 2, 4).getClass().getComponentType()); [EOL] }
@Test [EOL] public void testSameLengthLong() { [EOL]     final long[] nullArray = null; [EOL]     final long[] emptyArray = new long[0]; [EOL]     final long[] oneArray = new long[] { 0L }; [EOL]     final long[] twoArray = new long[] { 0L, 76L }; [EOL]     assertTrue(ArrayUtils.isSameLength(nullArray, nullArray)); [EOL]     assertTrue(ArrayUtils.isSameLength(nullArray, emptyArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(nullArray, oneArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(nullArray, twoArray)); [EOL]     assertTrue(ArrayUtils.isSameLength(emptyArray, nullArray)); [EOL]     assertTrue(ArrayUtils.isSameLength(emptyArray, emptyArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(emptyArray, oneArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(emptyArray, twoArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(oneArray, nullArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(oneArray, emptyArray)); [EOL]     assertTrue(ArrayUtils.isSameLength(oneArray, oneArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(oneArray, twoArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(twoArray, nullArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(twoArray, emptyArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(twoArray, oneArray)); [EOL]     assertTrue(ArrayUtils.isSameLength(twoArray, twoArray)); [EOL] }
@Test [EOL] public void testSameLengthLong() { [EOL]     final long[] nullArray = null; [EOL]     final long[] emptyArray = new long[0]; [EOL]     final long[] oneArray = new long[] { 0L }; [EOL]     final long[] twoArray = new long[] { 0L, 76L }; [EOL]     assertTrue(ArrayUtils.isSameLength(nullArray, nullArray)); [EOL]     assertTrue(ArrayUtils.isSameLength(nullArray, emptyArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(nullArray, oneArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(nullArray, twoArray)); [EOL]     assertTrue(ArrayUtils.isSameLength(emptyArray, nullArray)); [EOL]     assertTrue(ArrayUtils.isSameLength(emptyArray, emptyArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(emptyArray, oneArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(emptyArray, twoArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(oneArray, nullArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(oneArray, emptyArray)); [EOL]     assertTrue(ArrayUtils.isSameLength(oneArray, oneArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(oneArray, twoArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(twoArray, nullArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(twoArray, emptyArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(twoArray, oneArray)); [EOL]     assertTrue(ArrayUtils.isSameLength(twoArray, twoArray)); [EOL] }
@Test [EOL] public void testSameLengthLong() { [EOL]     final long[] nullArray = null; [EOL]     final long[] emptyArray = new long[0]; [EOL]     final long[] oneArray = new long[] { 0L }; [EOL]     final long[] twoArray = new long[] { 0L, 76L }; [EOL]     assertTrue(ArrayUtils.isSameLength(nullArray, nullArray)); [EOL]     assertTrue(ArrayUtils.isSameLength(nullArray, emptyArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(nullArray, oneArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(nullArray, twoArray)); [EOL]     assertTrue(ArrayUtils.isSameLength(emptyArray, nullArray)); [EOL]     assertTrue(ArrayUtils.isSameLength(emptyArray, emptyArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(emptyArray, oneArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(emptyArray, twoArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(oneArray, nullArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(oneArray, emptyArray)); [EOL]     assertTrue(ArrayUtils.isSameLength(oneArray, oneArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(oneArray, twoArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(twoArray, nullArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(twoArray, emptyArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(twoArray, oneArray)); [EOL]     assertTrue(ArrayUtils.isSameLength(twoArray, twoArray)); [EOL] }
@Test [EOL] public void testSameLengthLong() { [EOL]     final long[] nullArray = null; [EOL]     final long[] emptyArray = new long[0]; [EOL]     final long[] oneArray = new long[] { 0L }; [EOL]     final long[] twoArray = new long[] { 0L, 76L }; [EOL]     assertTrue(ArrayUtils.isSameLength(nullArray, nullArray)); [EOL]     assertTrue(ArrayUtils.isSameLength(nullArray, emptyArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(nullArray, oneArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(nullArray, twoArray)); [EOL]     assertTrue(ArrayUtils.isSameLength(emptyArray, nullArray)); [EOL]     assertTrue(ArrayUtils.isSameLength(emptyArray, emptyArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(emptyArray, oneArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(emptyArray, twoArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(oneArray, nullArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(oneArray, emptyArray)); [EOL]     assertTrue(ArrayUtils.isSameLength(oneArray, oneArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(oneArray, twoArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(twoArray, nullArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(twoArray, emptyArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(twoArray, oneArray)); [EOL]     assertTrue(ArrayUtils.isSameLength(twoArray, twoArray)); [EOL] }
@Test [EOL] public void testSameLengthLong() { [EOL]     final long[] nullArray = null; [EOL]     final long[] emptyArray = new long[0]; [EOL]     final long[] oneArray = new long[] { 0L }; [EOL]     final long[] twoArray = new long[] { 0L, 76L }; [EOL]     assertTrue(ArrayUtils.isSameLength(nullArray, nullArray)); [EOL]     assertTrue(ArrayUtils.isSameLength(nullArray, emptyArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(nullArray, oneArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(nullArray, twoArray)); [EOL]     assertTrue(ArrayUtils.isSameLength(emptyArray, nullArray)); [EOL]     assertTrue(ArrayUtils.isSameLength(emptyArray, emptyArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(emptyArray, oneArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(emptyArray, twoArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(oneArray, nullArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(oneArray, emptyArray)); [EOL]     assertTrue(ArrayUtils.isSameLength(oneArray, oneArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(oneArray, twoArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(twoArray, nullArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(twoArray, emptyArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(twoArray, oneArray)); [EOL]     assertTrue(ArrayUtils.isSameLength(twoArray, twoArray)); [EOL] }
@Test [EOL] public void testSameLengthBoolean() { [EOL]     final boolean[] nullArray = null; [EOL]     final boolean[] emptyArray = new boolean[0]; [EOL]     final boolean[] oneArray = new boolean[] { true }; [EOL]     final boolean[] twoArray = new boolean[] { true, false }; [EOL]     assertTrue(ArrayUtils.isSameLength(nullArray, nullArray)); [EOL]     assertTrue(ArrayUtils.isSameLength(nullArray, emptyArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(nullArray, oneArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(nullArray, twoArray)); [EOL]     assertTrue(ArrayUtils.isSameLength(emptyArray, nullArray)); [EOL]     assertTrue(ArrayUtils.isSameLength(emptyArray, emptyArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(emptyArray, oneArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(emptyArray, twoArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(oneArray, nullArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(oneArray, emptyArray)); [EOL]     assertTrue(ArrayUtils.isSameLength(oneArray, oneArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(oneArray, twoArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(twoArray, nullArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(twoArray, emptyArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(twoArray, oneArray)); [EOL]     assertTrue(ArrayUtils.isSameLength(twoArray, twoArray)); [EOL] }
@Test [EOL] public void testSameLengthBoolean() { [EOL]     final boolean[] nullArray = null; [EOL]     final boolean[] emptyArray = new boolean[0]; [EOL]     final boolean[] oneArray = new boolean[] { true }; [EOL]     final boolean[] twoArray = new boolean[] { true, false }; [EOL]     assertTrue(ArrayUtils.isSameLength(nullArray, nullArray)); [EOL]     assertTrue(ArrayUtils.isSameLength(nullArray, emptyArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(nullArray, oneArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(nullArray, twoArray)); [EOL]     assertTrue(ArrayUtils.isSameLength(emptyArray, nullArray)); [EOL]     assertTrue(ArrayUtils.isSameLength(emptyArray, emptyArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(emptyArray, oneArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(emptyArray, twoArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(oneArray, nullArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(oneArray, emptyArray)); [EOL]     assertTrue(ArrayUtils.isSameLength(oneArray, oneArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(oneArray, twoArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(twoArray, nullArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(twoArray, emptyArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(twoArray, oneArray)); [EOL]     assertTrue(ArrayUtils.isSameLength(twoArray, twoArray)); [EOL] }
@Test [EOL] public void testSameLengthBoolean() { [EOL]     final boolean[] nullArray = null; [EOL]     final boolean[] emptyArray = new boolean[0]; [EOL]     final boolean[] oneArray = new boolean[] { true }; [EOL]     final boolean[] twoArray = new boolean[] { true, false }; [EOL]     assertTrue(ArrayUtils.isSameLength(nullArray, nullArray)); [EOL]     assertTrue(ArrayUtils.isSameLength(nullArray, emptyArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(nullArray, oneArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(nullArray, twoArray)); [EOL]     assertTrue(ArrayUtils.isSameLength(emptyArray, nullArray)); [EOL]     assertTrue(ArrayUtils.isSameLength(emptyArray, emptyArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(emptyArray, oneArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(emptyArray, twoArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(oneArray, nullArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(oneArray, emptyArray)); [EOL]     assertTrue(ArrayUtils.isSameLength(oneArray, oneArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(oneArray, twoArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(twoArray, nullArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(twoArray, emptyArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(twoArray, oneArray)); [EOL]     assertTrue(ArrayUtils.isSameLength(twoArray, twoArray)); [EOL] }
@Test [EOL] public void testSameLengthBoolean() { [EOL]     final boolean[] nullArray = null; [EOL]     final boolean[] emptyArray = new boolean[0]; [EOL]     final boolean[] oneArray = new boolean[] { true }; [EOL]     final boolean[] twoArray = new boolean[] { true, false }; [EOL]     assertTrue(ArrayUtils.isSameLength(nullArray, nullArray)); [EOL]     assertTrue(ArrayUtils.isSameLength(nullArray, emptyArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(nullArray, oneArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(nullArray, twoArray)); [EOL]     assertTrue(ArrayUtils.isSameLength(emptyArray, nullArray)); [EOL]     assertTrue(ArrayUtils.isSameLength(emptyArray, emptyArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(emptyArray, oneArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(emptyArray, twoArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(oneArray, nullArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(oneArray, emptyArray)); [EOL]     assertTrue(ArrayUtils.isSameLength(oneArray, oneArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(oneArray, twoArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(twoArray, nullArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(twoArray, emptyArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(twoArray, oneArray)); [EOL]     assertTrue(ArrayUtils.isSameLength(twoArray, twoArray)); [EOL] }
@Test [EOL] public void testSameLengthBoolean() { [EOL]     final boolean[] nullArray = null; [EOL]     final boolean[] emptyArray = new boolean[0]; [EOL]     final boolean[] oneArray = new boolean[] { true }; [EOL]     final boolean[] twoArray = new boolean[] { true, false }; [EOL]     assertTrue(ArrayUtils.isSameLength(nullArray, nullArray)); [EOL]     assertTrue(ArrayUtils.isSameLength(nullArray, emptyArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(nullArray, oneArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(nullArray, twoArray)); [EOL]     assertTrue(ArrayUtils.isSameLength(emptyArray, nullArray)); [EOL]     assertTrue(ArrayUtils.isSameLength(emptyArray, emptyArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(emptyArray, oneArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(emptyArray, twoArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(oneArray, nullArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(oneArray, emptyArray)); [EOL]     assertTrue(ArrayUtils.isSameLength(oneArray, oneArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(oneArray, twoArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(twoArray, nullArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(twoArray, emptyArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(twoArray, oneArray)); [EOL]     assertTrue(ArrayUtils.isSameLength(twoArray, twoArray)); [EOL] }
@Test [EOL] public void testRemoveDoubleArray() { [EOL]     double[] array; [EOL]     array = ArrayUtils.remove(new double[] { 1 }, 0); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_DOUBLE_ARRAY, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.remove(new double[] { 1, 2 }, 0); [EOL]     assertTrue(Arrays.equals(new double[] { 2 }, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.remove(new double[] { 1, 2 }, 1); [EOL]     assertTrue(Arrays.equals(new double[] { 1 }, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.remove(new double[] { 1, 2, 1 }, 1); [EOL]     assertTrue(Arrays.equals(new double[] { 1, 1 }, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     try { [EOL]         ArrayUtils.remove(new double[] { 1, 2 }, -1); [EOL]         fail("IndexOutOfBoundsException expected"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         ArrayUtils.remove(new double[] { 1, 2 }, 2); [EOL]         fail("IndexOutOfBoundsException expected"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         ArrayUtils.remove((double[]) null, 0); [EOL]         fail("IndexOutOfBoundsException expected"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL] }
@Test [EOL] public void testRemoveDoubleArray() { [EOL]     double[] array; [EOL]     array = ArrayUtils.remove(new double[] { 1 }, 0); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_DOUBLE_ARRAY, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.remove(new double[] { 1, 2 }, 0); [EOL]     assertTrue(Arrays.equals(new double[] { 2 }, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.remove(new double[] { 1, 2 }, 1); [EOL]     assertTrue(Arrays.equals(new double[] { 1 }, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.remove(new double[] { 1, 2, 1 }, 1); [EOL]     assertTrue(Arrays.equals(new double[] { 1, 1 }, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     try { [EOL]         ArrayUtils.remove(new double[] { 1, 2 }, -1); [EOL]         fail("IndexOutOfBoundsException expected"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         ArrayUtils.remove(new double[] { 1, 2 }, 2); [EOL]         fail("IndexOutOfBoundsException expected"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         ArrayUtils.remove((double[]) null, 0); [EOL]         fail("IndexOutOfBoundsException expected"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL] }
@Test [EOL] public void testRemoveDoubleArray() { [EOL]     double[] array; [EOL]     array = ArrayUtils.remove(new double[] { 1 }, 0); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_DOUBLE_ARRAY, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.remove(new double[] { 1, 2 }, 0); [EOL]     assertTrue(Arrays.equals(new double[] { 2 }, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.remove(new double[] { 1, 2 }, 1); [EOL]     assertTrue(Arrays.equals(new double[] { 1 }, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.remove(new double[] { 1, 2, 1 }, 1); [EOL]     assertTrue(Arrays.equals(new double[] { 1, 1 }, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     try { [EOL]         ArrayUtils.remove(new double[] { 1, 2 }, -1); [EOL]         fail("IndexOutOfBoundsException expected"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         ArrayUtils.remove(new double[] { 1, 2 }, 2); [EOL]         fail("IndexOutOfBoundsException expected"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         ArrayUtils.remove((double[]) null, 0); [EOL]         fail("IndexOutOfBoundsException expected"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL] }
@Test [EOL] public void testRemoveDoubleArray() { [EOL]     double[] array; [EOL]     array = ArrayUtils.remove(new double[] { 1 }, 0); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_DOUBLE_ARRAY, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.remove(new double[] { 1, 2 }, 0); [EOL]     assertTrue(Arrays.equals(new double[] { 2 }, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.remove(new double[] { 1, 2 }, 1); [EOL]     assertTrue(Arrays.equals(new double[] { 1 }, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.remove(new double[] { 1, 2, 1 }, 1); [EOL]     assertTrue(Arrays.equals(new double[] { 1, 1 }, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     try { [EOL]         ArrayUtils.remove(new double[] { 1, 2 }, -1); [EOL]         fail("IndexOutOfBoundsException expected"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         ArrayUtils.remove(new double[] { 1, 2 }, 2); [EOL]         fail("IndexOutOfBoundsException expected"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         ArrayUtils.remove((double[]) null, 0); [EOL]         fail("IndexOutOfBoundsException expected"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL] }
@Test [EOL] public void testSameType() { [EOL]     try { [EOL]         ArrayUtils.isSameType(null, null); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         ArrayUtils.isSameType(null, new Object[0]); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         ArrayUtils.isSameType(new Object[0], null); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     assertTrue(ArrayUtils.isSameType(new Object[0], new Object[0])); [EOL]     assertFalse(ArrayUtils.isSameType(new String[0], new Object[0])); [EOL]     assertTrue(ArrayUtils.isSameType(new String[0][0], new String[0][0])); [EOL]     assertFalse(ArrayUtils.isSameType(new String[0], new String[0][0])); [EOL]     assertFalse(ArrayUtils.isSameType(new String[0][0], new String[0])); [EOL] }
@Test [EOL] public void testSameType() { [EOL]     try { [EOL]         ArrayUtils.isSameType(null, null); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         ArrayUtils.isSameType(null, new Object[0]); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         ArrayUtils.isSameType(new Object[0], null); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     assertTrue(ArrayUtils.isSameType(new Object[0], new Object[0])); [EOL]     assertFalse(ArrayUtils.isSameType(new String[0], new Object[0])); [EOL]     assertTrue(ArrayUtils.isSameType(new String[0][0], new String[0][0])); [EOL]     assertFalse(ArrayUtils.isSameType(new String[0], new String[0][0])); [EOL]     assertFalse(ArrayUtils.isSameType(new String[0][0], new String[0])); [EOL] }
@Test [EOL] public void testSameType() { [EOL]     try { [EOL]         ArrayUtils.isSameType(null, null); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         ArrayUtils.isSameType(null, new Object[0]); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         ArrayUtils.isSameType(new Object[0], null); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     assertTrue(ArrayUtils.isSameType(new Object[0], new Object[0])); [EOL]     assertFalse(ArrayUtils.isSameType(new String[0], new Object[0])); [EOL]     assertTrue(ArrayUtils.isSameType(new String[0][0], new String[0][0])); [EOL]     assertFalse(ArrayUtils.isSameType(new String[0], new String[0][0])); [EOL]     assertFalse(ArrayUtils.isSameType(new String[0][0], new String[0])); [EOL] }
@Test [EOL] public void testSameType() { [EOL]     try { [EOL]         ArrayUtils.isSameType(null, null); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         ArrayUtils.isSameType(null, new Object[0]); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         ArrayUtils.isSameType(new Object[0], null); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     assertTrue(ArrayUtils.isSameType(new Object[0], new Object[0])); [EOL]     assertFalse(ArrayUtils.isSameType(new String[0], new Object[0])); [EOL]     assertTrue(ArrayUtils.isSameType(new String[0][0], new String[0][0])); [EOL]     assertFalse(ArrayUtils.isSameType(new String[0], new String[0][0])); [EOL]     assertFalse(ArrayUtils.isSameType(new String[0][0], new String[0])); [EOL] }
@Test [EOL] public void testSameType() { [EOL]     try { [EOL]         ArrayUtils.isSameType(null, null); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         ArrayUtils.isSameType(null, new Object[0]); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         ArrayUtils.isSameType(new Object[0], null); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     assertTrue(ArrayUtils.isSameType(new Object[0], new Object[0])); [EOL]     assertFalse(ArrayUtils.isSameType(new String[0], new Object[0])); [EOL]     assertTrue(ArrayUtils.isSameType(new String[0][0], new String[0][0])); [EOL]     assertFalse(ArrayUtils.isSameType(new String[0], new String[0][0])); [EOL]     assertFalse(ArrayUtils.isSameType(new String[0][0], new String[0])); [EOL] }
@Test [EOL] public void testReverse() { [EOL]     final StringBuffer str1 = new StringBuffer("pick"); [EOL]     final String str2 = "a"; [EOL]     final String[] str3 = new String[] { "stick" }; [EOL]     final String str4 = "up"; [EOL]     Object[] array = new Object[] { str1, str2, str3 }; [EOL]     ArrayUtils.reverse(array); [EOL]     assertEquals(array[0], str3); [EOL]     assertEquals(array[1], str2); [EOL]     assertEquals(array[2], str1); [EOL]     array = new Object[] { str1, str2, str3, str4 }; [EOL]     ArrayUtils.reverse(array); [EOL]     assertEquals(array[0], str4); [EOL]     assertEquals(array[1], str3); [EOL]     assertEquals(array[2], str2); [EOL]     assertEquals(array[3], str1); [EOL]     array = null; [EOL]     ArrayUtils.reverse(array); [EOL]     assertArrayEquals(null, array); [EOL] }
@Test [EOL] public void testReverse() { [EOL]     final StringBuffer str1 = new StringBuffer("pick"); [EOL]     final String str2 = "a"; [EOL]     final String[] str3 = new String[] { "stick" }; [EOL]     final String str4 = "up"; [EOL]     Object[] array = new Object[] { str1, str2, str3 }; [EOL]     ArrayUtils.reverse(array); [EOL]     assertEquals(array[0], str3); [EOL]     assertEquals(array[1], str2); [EOL]     assertEquals(array[2], str1); [EOL]     array = new Object[] { str1, str2, str3, str4 }; [EOL]     ArrayUtils.reverse(array); [EOL]     assertEquals(array[0], str4); [EOL]     assertEquals(array[1], str3); [EOL]     assertEquals(array[2], str2); [EOL]     assertEquals(array[3], str1); [EOL]     array = null; [EOL]     ArrayUtils.reverse(array); [EOL]     assertArrayEquals(null, array); [EOL] }
@Test [EOL] public void testReverse() { [EOL]     final StringBuffer str1 = new StringBuffer("pick"); [EOL]     final String str2 = "a"; [EOL]     final String[] str3 = new String[] { "stick" }; [EOL]     final String str4 = "up"; [EOL]     Object[] array = new Object[] { str1, str2, str3 }; [EOL]     ArrayUtils.reverse(array); [EOL]     assertEquals(array[0], str3); [EOL]     assertEquals(array[1], str2); [EOL]     assertEquals(array[2], str1); [EOL]     array = new Object[] { str1, str2, str3, str4 }; [EOL]     ArrayUtils.reverse(array); [EOL]     assertEquals(array[0], str4); [EOL]     assertEquals(array[1], str3); [EOL]     assertEquals(array[2], str2); [EOL]     assertEquals(array[3], str1); [EOL]     array = null; [EOL]     ArrayUtils.reverse(array); [EOL]     assertArrayEquals(null, array); [EOL] }
@Test [EOL] public void testReverseShort() { [EOL]     short[] array = new short[] { 1, 2, 3 }; [EOL]     ArrayUtils.reverse(array); [EOL]     assertEquals(array[0], 3); [EOL]     assertEquals(array[1], 2); [EOL]     assertEquals(array[2], 1); [EOL]     array = null; [EOL]     ArrayUtils.reverse(array); [EOL]     assertEquals(null, array); [EOL] }
@Test [EOL] public void testReverseShort() { [EOL]     short[] array = new short[] { 1, 2, 3 }; [EOL]     ArrayUtils.reverse(array); [EOL]     assertEquals(array[0], 3); [EOL]     assertEquals(array[1], 2); [EOL]     assertEquals(array[2], 1); [EOL]     array = null; [EOL]     ArrayUtils.reverse(array); [EOL]     assertEquals(null, array); [EOL] }
@Test [EOL] public void testReverseShort() { [EOL]     short[] array = new short[] { 1, 2, 3 }; [EOL]     ArrayUtils.reverse(array); [EOL]     assertEquals(array[0], 3); [EOL]     assertEquals(array[1], 2); [EOL]     assertEquals(array[2], 1); [EOL]     array = null; [EOL]     ArrayUtils.reverse(array); [EOL]     assertEquals(null, array); [EOL] }
@Test [EOL] public void testReverseShort() { [EOL]     short[] array = new short[] { 1, 2, 3 }; [EOL]     ArrayUtils.reverse(array); [EOL]     assertEquals(array[0], 3); [EOL]     assertEquals(array[1], 2); [EOL]     assertEquals(array[2], 1); [EOL]     array = null; [EOL]     ArrayUtils.reverse(array); [EOL]     assertEquals(null, array); [EOL] }
@Test [EOL] public void testReverseChar() { [EOL]     char[] array = new char[] { 'a', 'f', 'C' }; [EOL]     ArrayUtils.reverse(array); [EOL]     assertEquals(array[0], 'C'); [EOL]     assertEquals(array[1], 'f'); [EOL]     assertEquals(array[2], 'a'); [EOL]     array = null; [EOL]     ArrayUtils.reverse(array); [EOL]     assertEquals(null, array); [EOL] }
@Test [EOL] public void testReverseChar() { [EOL]     char[] array = new char[] { 'a', 'f', 'C' }; [EOL]     ArrayUtils.reverse(array); [EOL]     assertEquals(array[0], 'C'); [EOL]     assertEquals(array[1], 'f'); [EOL]     assertEquals(array[2], 'a'); [EOL]     array = null; [EOL]     ArrayUtils.reverse(array); [EOL]     assertEquals(null, array); [EOL] }
@Test [EOL] public void testReverseChar() { [EOL]     char[] array = new char[] { 'a', 'f', 'C' }; [EOL]     ArrayUtils.reverse(array); [EOL]     assertEquals(array[0], 'C'); [EOL]     assertEquals(array[1], 'f'); [EOL]     assertEquals(array[2], 'a'); [EOL]     array = null; [EOL]     ArrayUtils.reverse(array); [EOL]     assertEquals(null, array); [EOL] }
@Test [EOL] public void testReverseChar() { [EOL]     char[] array = new char[] { 'a', 'f', 'C' }; [EOL]     ArrayUtils.reverse(array); [EOL]     assertEquals(array[0], 'C'); [EOL]     assertEquals(array[1], 'f'); [EOL]     assertEquals(array[2], 'a'); [EOL]     array = null; [EOL]     ArrayUtils.reverse(array); [EOL]     assertEquals(null, array); [EOL] }
@Test [EOL] public void testReverseByte() { [EOL]     byte[] array = new byte[] { 2, 3, 4 }; [EOL]     ArrayUtils.reverse(array); [EOL]     assertEquals(array[0], 4); [EOL]     assertEquals(array[1], 3); [EOL]     assertEquals(array[2], 2); [EOL]     array = null; [EOL]     ArrayUtils.reverse(array); [EOL]     assertEquals(null, array); [EOL] }
@Test [EOL] public void testReverseByte() { [EOL]     byte[] array = new byte[] { 2, 3, 4 }; [EOL]     ArrayUtils.reverse(array); [EOL]     assertEquals(array[0], 4); [EOL]     assertEquals(array[1], 3); [EOL]     assertEquals(array[2], 2); [EOL]     array = null; [EOL]     ArrayUtils.reverse(array); [EOL]     assertEquals(null, array); [EOL] }
@Test [EOL] public void testReverseByte() { [EOL]     byte[] array = new byte[] { 2, 3, 4 }; [EOL]     ArrayUtils.reverse(array); [EOL]     assertEquals(array[0], 4); [EOL]     assertEquals(array[1], 3); [EOL]     assertEquals(array[2], 2); [EOL]     array = null; [EOL]     ArrayUtils.reverse(array); [EOL]     assertEquals(null, array); [EOL] }
@Test [EOL] public void testReverseDouble() { [EOL]     double[] array = new double[] { 0.3d, 0.4d, 0.5d }; [EOL]     ArrayUtils.reverse(array); [EOL]     assertEquals(array[0], 0.5d, 0.0d); [EOL]     assertEquals(array[1], 0.4d, 0.0d); [EOL]     assertEquals(array[2], 0.3d, 0.0d); [EOL]     array = null; [EOL]     ArrayUtils.reverse(array); [EOL]     assertEquals(null, array); [EOL] }
@Test [EOL] public void testReverseDouble() { [EOL]     double[] array = new double[] { 0.3d, 0.4d, 0.5d }; [EOL]     ArrayUtils.reverse(array); [EOL]     assertEquals(array[0], 0.5d, 0.0d); [EOL]     assertEquals(array[1], 0.4d, 0.0d); [EOL]     assertEquals(array[2], 0.3d, 0.0d); [EOL]     array = null; [EOL]     ArrayUtils.reverse(array); [EOL]     assertEquals(null, array); [EOL] }
@Test [EOL] public void testReverseDouble() { [EOL]     double[] array = new double[] { 0.3d, 0.4d, 0.5d }; [EOL]     ArrayUtils.reverse(array); [EOL]     assertEquals(array[0], 0.5d, 0.0d); [EOL]     assertEquals(array[1], 0.4d, 0.0d); [EOL]     assertEquals(array[2], 0.3d, 0.0d); [EOL]     array = null; [EOL]     ArrayUtils.reverse(array); [EOL]     assertEquals(null, array); [EOL] }
@Test [EOL] public void testReverseDouble() { [EOL]     double[] array = new double[] { 0.3d, 0.4d, 0.5d }; [EOL]     ArrayUtils.reverse(array); [EOL]     assertEquals(array[0], 0.5d, 0.0d); [EOL]     assertEquals(array[1], 0.4d, 0.0d); [EOL]     assertEquals(array[2], 0.3d, 0.0d); [EOL]     array = null; [EOL]     ArrayUtils.reverse(array); [EOL]     assertEquals(null, array); [EOL] }
@Test [EOL] public void testLastIndexOfLongWithStartIndex() { [EOL]     long[] array = null; [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, 0, 2)); [EOL]     array = new long[] { 0, 1, 2, 3, 0 }; [EOL]     assertEquals(0, ArrayUtils.lastIndexOf(array, 0, 2)); [EOL]     assertEquals(1, ArrayUtils.lastIndexOf(array, 1, 2)); [EOL]     assertEquals(2, ArrayUtils.lastIndexOf(array, 2, 2)); [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, 3, 2)); [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, 3, -1)); [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, 99, 4)); [EOL]     assertEquals(4, ArrayUtils.lastIndexOf(array, 0, 88)); [EOL] }
@Test [EOL] public void testLastIndexOfLongWithStartIndex() { [EOL]     long[] array = null; [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, 0, 2)); [EOL]     array = new long[] { 0, 1, 2, 3, 0 }; [EOL]     assertEquals(0, ArrayUtils.lastIndexOf(array, 0, 2)); [EOL]     assertEquals(1, ArrayUtils.lastIndexOf(array, 1, 2)); [EOL]     assertEquals(2, ArrayUtils.lastIndexOf(array, 2, 2)); [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, 3, 2)); [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, 3, -1)); [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, 99, 4)); [EOL]     assertEquals(4, ArrayUtils.lastIndexOf(array, 0, 88)); [EOL] }
@Test [EOL] public void testLastIndexOfLongWithStartIndex() { [EOL]     long[] array = null; [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, 0, 2)); [EOL]     array = new long[] { 0, 1, 2, 3, 0 }; [EOL]     assertEquals(0, ArrayUtils.lastIndexOf(array, 0, 2)); [EOL]     assertEquals(1, ArrayUtils.lastIndexOf(array, 1, 2)); [EOL]     assertEquals(2, ArrayUtils.lastIndexOf(array, 2, 2)); [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, 3, 2)); [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, 3, -1)); [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, 99, 4)); [EOL]     assertEquals(4, ArrayUtils.lastIndexOf(array, 0, 88)); [EOL] }
@Test [EOL] public void testLastIndexOfLongWithStartIndex() { [EOL]     long[] array = null; [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, 0, 2)); [EOL]     array = new long[] { 0, 1, 2, 3, 0 }; [EOL]     assertEquals(0, ArrayUtils.lastIndexOf(array, 0, 2)); [EOL]     assertEquals(1, ArrayUtils.lastIndexOf(array, 1, 2)); [EOL]     assertEquals(2, ArrayUtils.lastIndexOf(array, 2, 2)); [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, 3, 2)); [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, 3, -1)); [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, 99, 4)); [EOL]     assertEquals(4, ArrayUtils.lastIndexOf(array, 0, 88)); [EOL] }
@Test [EOL] public void testLastIndexOfLongWithStartIndex() { [EOL]     long[] array = null; [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, 0, 2)); [EOL]     array = new long[] { 0, 1, 2, 3, 0 }; [EOL]     assertEquals(0, ArrayUtils.lastIndexOf(array, 0, 2)); [EOL]     assertEquals(1, ArrayUtils.lastIndexOf(array, 1, 2)); [EOL]     assertEquals(2, ArrayUtils.lastIndexOf(array, 2, 2)); [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, 3, 2)); [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, 3, -1)); [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, 99, 4)); [EOL]     assertEquals(4, ArrayUtils.lastIndexOf(array, 0, 88)); [EOL] }
@Test [EOL] public void testContainsLong() { [EOL]     long[] array = null; [EOL]     assertFalse(ArrayUtils.contains(array, 1)); [EOL]     array = new long[] { 0, 1, 2, 3, 0 }; [EOL]     assertTrue(ArrayUtils.contains(array, 0)); [EOL]     assertTrue(ArrayUtils.contains(array, 1)); [EOL]     assertTrue(ArrayUtils.contains(array, 2)); [EOL]     assertTrue(ArrayUtils.contains(array, 3)); [EOL]     assertFalse(ArrayUtils.contains(array, 99)); [EOL] }
@Test [EOL] public void testContainsLong() { [EOL]     long[] array = null; [EOL]     assertFalse(ArrayUtils.contains(array, 1)); [EOL]     array = new long[] { 0, 1, 2, 3, 0 }; [EOL]     assertTrue(ArrayUtils.contains(array, 0)); [EOL]     assertTrue(ArrayUtils.contains(array, 1)); [EOL]     assertTrue(ArrayUtils.contains(array, 2)); [EOL]     assertTrue(ArrayUtils.contains(array, 3)); [EOL]     assertFalse(ArrayUtils.contains(array, 99)); [EOL] }
@Test [EOL] public void testContainsLong() { [EOL]     long[] array = null; [EOL]     assertFalse(ArrayUtils.contains(array, 1)); [EOL]     array = new long[] { 0, 1, 2, 3, 0 }; [EOL]     assertTrue(ArrayUtils.contains(array, 0)); [EOL]     assertTrue(ArrayUtils.contains(array, 1)); [EOL]     assertTrue(ArrayUtils.contains(array, 2)); [EOL]     assertTrue(ArrayUtils.contains(array, 3)); [EOL]     assertFalse(ArrayUtils.contains(array, 99)); [EOL] }
@Test [EOL] public void testContainsLong() { [EOL]     long[] array = null; [EOL]     assertFalse(ArrayUtils.contains(array, 1)); [EOL]     array = new long[] { 0, 1, 2, 3, 0 }; [EOL]     assertTrue(ArrayUtils.contains(array, 0)); [EOL]     assertTrue(ArrayUtils.contains(array, 1)); [EOL]     assertTrue(ArrayUtils.contains(array, 2)); [EOL]     assertTrue(ArrayUtils.contains(array, 3)); [EOL]     assertFalse(ArrayUtils.contains(array, 99)); [EOL] }
@Test [EOL] public void testContainsInt() { [EOL]     int[] array = null; [EOL]     assertFalse(ArrayUtils.contains(array, 1)); [EOL]     array = new int[] { 0, 1, 2, 3, 0 }; [EOL]     assertTrue(ArrayUtils.contains(array, 0)); [EOL]     assertTrue(ArrayUtils.contains(array, 1)); [EOL]     assertTrue(ArrayUtils.contains(array, 2)); [EOL]     assertTrue(ArrayUtils.contains(array, 3)); [EOL]     assertFalse(ArrayUtils.contains(array, 99)); [EOL] }
@Test [EOL] public void testContainsInt() { [EOL]     int[] array = null; [EOL]     assertFalse(ArrayUtils.contains(array, 1)); [EOL]     array = new int[] { 0, 1, 2, 3, 0 }; [EOL]     assertTrue(ArrayUtils.contains(array, 0)); [EOL]     assertTrue(ArrayUtils.contains(array, 1)); [EOL]     assertTrue(ArrayUtils.contains(array, 2)); [EOL]     assertTrue(ArrayUtils.contains(array, 3)); [EOL]     assertFalse(ArrayUtils.contains(array, 99)); [EOL] }
@Test [EOL] public void testContainsInt() { [EOL]     int[] array = null; [EOL]     assertFalse(ArrayUtils.contains(array, 1)); [EOL]     array = new int[] { 0, 1, 2, 3, 0 }; [EOL]     assertTrue(ArrayUtils.contains(array, 0)); [EOL]     assertTrue(ArrayUtils.contains(array, 1)); [EOL]     assertTrue(ArrayUtils.contains(array, 2)); [EOL]     assertTrue(ArrayUtils.contains(array, 3)); [EOL]     assertFalse(ArrayUtils.contains(array, 99)); [EOL] }
@Test [EOL] public void testContainsInt() { [EOL]     int[] array = null; [EOL]     assertFalse(ArrayUtils.contains(array, 1)); [EOL]     array = new int[] { 0, 1, 2, 3, 0 }; [EOL]     assertTrue(ArrayUtils.contains(array, 0)); [EOL]     assertTrue(ArrayUtils.contains(array, 1)); [EOL]     assertTrue(ArrayUtils.contains(array, 2)); [EOL]     assertTrue(ArrayUtils.contains(array, 3)); [EOL]     assertFalse(ArrayUtils.contains(array, 99)); [EOL] }
@SuppressWarnings("cast") [EOL] @Test [EOL] public void testLastIndexOfDoubleTolerance() { [EOL]     double[] array = null; [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 0, (double) 0)); [EOL]     array = new double[0]; [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 0, (double) 0)); [EOL]     array = new double[] { 0, 1, 2, 3, 0 }; [EOL]     assertEquals(4, ArrayUtils.lastIndexOf(array, (double) 0, (double) 0.3)); [EOL]     assertEquals(2, ArrayUtils.lastIndexOf(array, (double) 2.2, (double) 0.35)); [EOL]     assertEquals(3, ArrayUtils.lastIndexOf(array, (double) 4.15, (double) 2.0)); [EOL]     assertEquals(1, ArrayUtils.lastIndexOf(array, (double) 1.00001324, (double) 0.0001)); [EOL] }
@SuppressWarnings("cast") [EOL] @Test [EOL] public void testLastIndexOfDoubleTolerance() { [EOL]     double[] array = null; [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 0, (double) 0)); [EOL]     array = new double[0]; [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 0, (double) 0)); [EOL]     array = new double[] { 0, 1, 2, 3, 0 }; [EOL]     assertEquals(4, ArrayUtils.lastIndexOf(array, (double) 0, (double) 0.3)); [EOL]     assertEquals(2, ArrayUtils.lastIndexOf(array, (double) 2.2, (double) 0.35)); [EOL]     assertEquals(3, ArrayUtils.lastIndexOf(array, (double) 4.15, (double) 2.0)); [EOL]     assertEquals(1, ArrayUtils.lastIndexOf(array, (double) 1.00001324, (double) 0.0001)); [EOL] }
@SuppressWarnings("cast") [EOL] @Test [EOL] public void testLastIndexOfDoubleTolerance() { [EOL]     double[] array = null; [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 0, (double) 0)); [EOL]     array = new double[0]; [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 0, (double) 0)); [EOL]     array = new double[] { 0, 1, 2, 3, 0 }; [EOL]     assertEquals(4, ArrayUtils.lastIndexOf(array, (double) 0, (double) 0.3)); [EOL]     assertEquals(2, ArrayUtils.lastIndexOf(array, (double) 2.2, (double) 0.35)); [EOL]     assertEquals(3, ArrayUtils.lastIndexOf(array, (double) 4.15, (double) 2.0)); [EOL]     assertEquals(1, ArrayUtils.lastIndexOf(array, (double) 1.00001324, (double) 0.0001)); [EOL] }
@SuppressWarnings("cast") [EOL] @Test [EOL] public void testLastIndexOfDoubleTolerance() { [EOL]     double[] array = null; [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 0, (double) 0)); [EOL]     array = new double[0]; [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 0, (double) 0)); [EOL]     array = new double[] { 0, 1, 2, 3, 0 }; [EOL]     assertEquals(4, ArrayUtils.lastIndexOf(array, (double) 0, (double) 0.3)); [EOL]     assertEquals(2, ArrayUtils.lastIndexOf(array, (double) 2.2, (double) 0.35)); [EOL]     assertEquals(3, ArrayUtils.lastIndexOf(array, (double) 4.15, (double) 2.0)); [EOL]     assertEquals(1, ArrayUtils.lastIndexOf(array, (double) 1.00001324, (double) 0.0001)); [EOL] }
@SuppressWarnings("cast") [EOL] @Test [EOL] public void testLastIndexOfDoubleTolerance() { [EOL]     double[] array = null; [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 0, (double) 0)); [EOL]     array = new double[0]; [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 0, (double) 0)); [EOL]     array = new double[] { 0, 1, 2, 3, 0 }; [EOL]     assertEquals(4, ArrayUtils.lastIndexOf(array, (double) 0, (double) 0.3)); [EOL]     assertEquals(2, ArrayUtils.lastIndexOf(array, (double) 2.2, (double) 0.35)); [EOL]     assertEquals(3, ArrayUtils.lastIndexOf(array, (double) 4.15, (double) 2.0)); [EOL]     assertEquals(1, ArrayUtils.lastIndexOf(array, (double) 1.00001324, (double) 0.0001)); [EOL] }
@SuppressWarnings("cast") [EOL] @Test [EOL] public void testLastIndexOfDoubleTolerance() { [EOL]     double[] array = null; [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 0, (double) 0)); [EOL]     array = new double[0]; [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 0, (double) 0)); [EOL]     array = new double[] { 0, 1, 2, 3, 0 }; [EOL]     assertEquals(4, ArrayUtils.lastIndexOf(array, (double) 0, (double) 0.3)); [EOL]     assertEquals(2, ArrayUtils.lastIndexOf(array, (double) 2.2, (double) 0.35)); [EOL]     assertEquals(3, ArrayUtils.lastIndexOf(array, (double) 4.15, (double) 2.0)); [EOL]     assertEquals(1, ArrayUtils.lastIndexOf(array, (double) 1.00001324, (double) 0.0001)); [EOL] }
@SuppressWarnings("cast") [EOL] @Test [EOL] public void testLastIndexOfDoubleWithStartIndexTolerance() { [EOL]     double[] array = null; [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 0, 2, (double) 0)); [EOL]     array = new double[0]; [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 0, 2, (double) 0)); [EOL]     array = new double[] { (double) 3 }; [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 1, 0, (double) 0)); [EOL]     array = new double[] { 0, 1, 2, 3, 0 }; [EOL]     assertEquals(4, ArrayUtils.lastIndexOf(array, (double) 0, 99, (double) 0.3)); [EOL]     assertEquals(0, ArrayUtils.lastIndexOf(array, (double) 0, 3, (double) 0.3)); [EOL]     assertEquals(2, ArrayUtils.lastIndexOf(array, (double) 2.2, 3, (double) 0.35)); [EOL]     assertEquals(3, ArrayUtils.lastIndexOf(array, (double) 4.15, array.length, (double) 2.0)); [EOL]     assertEquals(1, ArrayUtils.lastIndexOf(array, (double) 1.00001324, array.length, (double) 0.0001)); [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 4.15, -200, (double) 2.0)); [EOL] }
@SuppressWarnings("cast") [EOL] @Test [EOL] public void testLastIndexOfDoubleWithStartIndexTolerance() { [EOL]     double[] array = null; [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 0, 2, (double) 0)); [EOL]     array = new double[0]; [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 0, 2, (double) 0)); [EOL]     array = new double[] { (double) 3 }; [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 1, 0, (double) 0)); [EOL]     array = new double[] { 0, 1, 2, 3, 0 }; [EOL]     assertEquals(4, ArrayUtils.lastIndexOf(array, (double) 0, 99, (double) 0.3)); [EOL]     assertEquals(0, ArrayUtils.lastIndexOf(array, (double) 0, 3, (double) 0.3)); [EOL]     assertEquals(2, ArrayUtils.lastIndexOf(array, (double) 2.2, 3, (double) 0.35)); [EOL]     assertEquals(3, ArrayUtils.lastIndexOf(array, (double) 4.15, array.length, (double) 2.0)); [EOL]     assertEquals(1, ArrayUtils.lastIndexOf(array, (double) 1.00001324, array.length, (double) 0.0001)); [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 4.15, -200, (double) 2.0)); [EOL] }
@SuppressWarnings("cast") [EOL] @Test [EOL] public void testLastIndexOfDoubleWithStartIndexTolerance() { [EOL]     double[] array = null; [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 0, 2, (double) 0)); [EOL]     array = new double[0]; [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 0, 2, (double) 0)); [EOL]     array = new double[] { (double) 3 }; [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 1, 0, (double) 0)); [EOL]     array = new double[] { 0, 1, 2, 3, 0 }; [EOL]     assertEquals(4, ArrayUtils.lastIndexOf(array, (double) 0, 99, (double) 0.3)); [EOL]     assertEquals(0, ArrayUtils.lastIndexOf(array, (double) 0, 3, (double) 0.3)); [EOL]     assertEquals(2, ArrayUtils.lastIndexOf(array, (double) 2.2, 3, (double) 0.35)); [EOL]     assertEquals(3, ArrayUtils.lastIndexOf(array, (double) 4.15, array.length, (double) 2.0)); [EOL]     assertEquals(1, ArrayUtils.lastIndexOf(array, (double) 1.00001324, array.length, (double) 0.0001)); [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 4.15, -200, (double) 2.0)); [EOL] }
@SuppressWarnings("cast") [EOL] @Test [EOL] public void testLastIndexOfDoubleWithStartIndexTolerance() { [EOL]     double[] array = null; [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 0, 2, (double) 0)); [EOL]     array = new double[0]; [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 0, 2, (double) 0)); [EOL]     array = new double[] { (double) 3 }; [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 1, 0, (double) 0)); [EOL]     array = new double[] { 0, 1, 2, 3, 0 }; [EOL]     assertEquals(4, ArrayUtils.lastIndexOf(array, (double) 0, 99, (double) 0.3)); [EOL]     assertEquals(0, ArrayUtils.lastIndexOf(array, (double) 0, 3, (double) 0.3)); [EOL]     assertEquals(2, ArrayUtils.lastIndexOf(array, (double) 2.2, 3, (double) 0.35)); [EOL]     assertEquals(3, ArrayUtils.lastIndexOf(array, (double) 4.15, array.length, (double) 2.0)); [EOL]     assertEquals(1, ArrayUtils.lastIndexOf(array, (double) 1.00001324, array.length, (double) 0.0001)); [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 4.15, -200, (double) 2.0)); [EOL] }
@SuppressWarnings("cast") [EOL] @Test [EOL] public void testLastIndexOfDoubleWithStartIndexTolerance() { [EOL]     double[] array = null; [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 0, 2, (double) 0)); [EOL]     array = new double[0]; [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 0, 2, (double) 0)); [EOL]     array = new double[] { (double) 3 }; [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 1, 0, (double) 0)); [EOL]     array = new double[] { 0, 1, 2, 3, 0 }; [EOL]     assertEquals(4, ArrayUtils.lastIndexOf(array, (double) 0, 99, (double) 0.3)); [EOL]     assertEquals(0, ArrayUtils.lastIndexOf(array, (double) 0, 3, (double) 0.3)); [EOL]     assertEquals(2, ArrayUtils.lastIndexOf(array, (double) 2.2, 3, (double) 0.35)); [EOL]     assertEquals(3, ArrayUtils.lastIndexOf(array, (double) 4.15, array.length, (double) 2.0)); [EOL]     assertEquals(1, ArrayUtils.lastIndexOf(array, (double) 1.00001324, array.length, (double) 0.0001)); [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 4.15, -200, (double) 2.0)); [EOL] }
@SuppressWarnings("cast") [EOL] @Test [EOL] public void testLastIndexOfDoubleWithStartIndexTolerance() { [EOL]     double[] array = null; [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 0, 2, (double) 0)); [EOL]     array = new double[0]; [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 0, 2, (double) 0)); [EOL]     array = new double[] { (double) 3 }; [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 1, 0, (double) 0)); [EOL]     array = new double[] { 0, 1, 2, 3, 0 }; [EOL]     assertEquals(4, ArrayUtils.lastIndexOf(array, (double) 0, 99, (double) 0.3)); [EOL]     assertEquals(0, ArrayUtils.lastIndexOf(array, (double) 0, 3, (double) 0.3)); [EOL]     assertEquals(2, ArrayUtils.lastIndexOf(array, (double) 2.2, 3, (double) 0.35)); [EOL]     assertEquals(3, ArrayUtils.lastIndexOf(array, (double) 4.15, array.length, (double) 2.0)); [EOL]     assertEquals(1, ArrayUtils.lastIndexOf(array, (double) 1.00001324, array.length, (double) 0.0001)); [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 4.15, -200, (double) 2.0)); [EOL] }
@SuppressWarnings("cast") [EOL] @Test [EOL] public void testLastIndexOfDoubleWithStartIndexTolerance() { [EOL]     double[] array = null; [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 0, 2, (double) 0)); [EOL]     array = new double[0]; [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 0, 2, (double) 0)); [EOL]     array = new double[] { (double) 3 }; [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 1, 0, (double) 0)); [EOL]     array = new double[] { 0, 1, 2, 3, 0 }; [EOL]     assertEquals(4, ArrayUtils.lastIndexOf(array, (double) 0, 99, (double) 0.3)); [EOL]     assertEquals(0, ArrayUtils.lastIndexOf(array, (double) 0, 3, (double) 0.3)); [EOL]     assertEquals(2, ArrayUtils.lastIndexOf(array, (double) 2.2, 3, (double) 0.35)); [EOL]     assertEquals(3, ArrayUtils.lastIndexOf(array, (double) 4.15, array.length, (double) 2.0)); [EOL]     assertEquals(1, ArrayUtils.lastIndexOf(array, (double) 1.00001324, array.length, (double) 0.0001)); [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 4.15, -200, (double) 2.0)); [EOL] }
@SuppressWarnings("cast") [EOL] @Test [EOL] public void testIndexOfFloat() { [EOL]     float[] array = null; [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, (float) 0)); [EOL]     array = new float[0]; [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, (float) 0)); [EOL]     array = new float[] { 0, 1, 2, 3, 0 }; [EOL]     assertEquals(0, ArrayUtils.indexOf(array, (float) 0)); [EOL]     assertEquals(1, ArrayUtils.indexOf(array, (float) 1)); [EOL]     assertEquals(2, ArrayUtils.indexOf(array, (float) 2)); [EOL]     assertEquals(3, ArrayUtils.indexOf(array, (float) 3)); [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, (float) 99)); [EOL] }
@SuppressWarnings("cast") [EOL] @Test [EOL] public void testIndexOfFloat() { [EOL]     float[] array = null; [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, (float) 0)); [EOL]     array = new float[0]; [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, (float) 0)); [EOL]     array = new float[] { 0, 1, 2, 3, 0 }; [EOL]     assertEquals(0, ArrayUtils.indexOf(array, (float) 0)); [EOL]     assertEquals(1, ArrayUtils.indexOf(array, (float) 1)); [EOL]     assertEquals(2, ArrayUtils.indexOf(array, (float) 2)); [EOL]     assertEquals(3, ArrayUtils.indexOf(array, (float) 3)); [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, (float) 99)); [EOL] }
@SuppressWarnings("cast") [EOL] @Test [EOL] public void testIndexOfFloat() { [EOL]     float[] array = null; [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, (float) 0)); [EOL]     array = new float[0]; [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, (float) 0)); [EOL]     array = new float[] { 0, 1, 2, 3, 0 }; [EOL]     assertEquals(0, ArrayUtils.indexOf(array, (float) 0)); [EOL]     assertEquals(1, ArrayUtils.indexOf(array, (float) 1)); [EOL]     assertEquals(2, ArrayUtils.indexOf(array, (float) 2)); [EOL]     assertEquals(3, ArrayUtils.indexOf(array, (float) 3)); [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, (float) 99)); [EOL] }
@SuppressWarnings("cast") [EOL] @Test [EOL] public void testIndexOfFloat() { [EOL]     float[] array = null; [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, (float) 0)); [EOL]     array = new float[0]; [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, (float) 0)); [EOL]     array = new float[] { 0, 1, 2, 3, 0 }; [EOL]     assertEquals(0, ArrayUtils.indexOf(array, (float) 0)); [EOL]     assertEquals(1, ArrayUtils.indexOf(array, (float) 1)); [EOL]     assertEquals(2, ArrayUtils.indexOf(array, (float) 2)); [EOL]     assertEquals(3, ArrayUtils.indexOf(array, (float) 3)); [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, (float) 99)); [EOL] }
@SuppressWarnings("cast") [EOL] @Test [EOL] public void testIndexOfFloatWithStartIndex() { [EOL]     float[] array = null; [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, (float) 0, 2)); [EOL]     array = new float[0]; [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, (float) 0, 2)); [EOL]     array = new float[] { 0, 1, 2, 3, 0 }; [EOL]     assertEquals(4, ArrayUtils.indexOf(array, (float) 0, 2)); [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, (float) 1, 2)); [EOL]     assertEquals(2, ArrayUtils.indexOf(array, (float) 2, 2)); [EOL]     assertEquals(3, ArrayUtils.indexOf(array, (float) 3, 2)); [EOL]     assertEquals(3, ArrayUtils.indexOf(array, (float) 3, -1)); [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, (float) 99, 0)); [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, (float) 0, 6)); [EOL] }
@SuppressWarnings("cast") [EOL] @Test [EOL] public void testIndexOfFloatWithStartIndex() { [EOL]     float[] array = null; [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, (float) 0, 2)); [EOL]     array = new float[0]; [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, (float) 0, 2)); [EOL]     array = new float[] { 0, 1, 2, 3, 0 }; [EOL]     assertEquals(4, ArrayUtils.indexOf(array, (float) 0, 2)); [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, (float) 1, 2)); [EOL]     assertEquals(2, ArrayUtils.indexOf(array, (float) 2, 2)); [EOL]     assertEquals(3, ArrayUtils.indexOf(array, (float) 3, 2)); [EOL]     assertEquals(3, ArrayUtils.indexOf(array, (float) 3, -1)); [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, (float) 99, 0)); [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, (float) 0, 6)); [EOL] }
@SuppressWarnings("cast") [EOL] @Test [EOL] public void testIndexOfFloatWithStartIndex() { [EOL]     float[] array = null; [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, (float) 0, 2)); [EOL]     array = new float[0]; [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, (float) 0, 2)); [EOL]     array = new float[] { 0, 1, 2, 3, 0 }; [EOL]     assertEquals(4, ArrayUtils.indexOf(array, (float) 0, 2)); [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, (float) 1, 2)); [EOL]     assertEquals(2, ArrayUtils.indexOf(array, (float) 2, 2)); [EOL]     assertEquals(3, ArrayUtils.indexOf(array, (float) 3, 2)); [EOL]     assertEquals(3, ArrayUtils.indexOf(array, (float) 3, -1)); [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, (float) 99, 0)); [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, (float) 0, 6)); [EOL] }
@SuppressWarnings("cast") [EOL] @Test [EOL] public void testIndexOfFloatWithStartIndex() { [EOL]     float[] array = null; [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, (float) 0, 2)); [EOL]     array = new float[0]; [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, (float) 0, 2)); [EOL]     array = new float[] { 0, 1, 2, 3, 0 }; [EOL]     assertEquals(4, ArrayUtils.indexOf(array, (float) 0, 2)); [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, (float) 1, 2)); [EOL]     assertEquals(2, ArrayUtils.indexOf(array, (float) 2, 2)); [EOL]     assertEquals(3, ArrayUtils.indexOf(array, (float) 3, 2)); [EOL]     assertEquals(3, ArrayUtils.indexOf(array, (float) 3, -1)); [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, (float) 99, 0)); [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, (float) 0, 6)); [EOL] }
@SuppressWarnings("cast") [EOL] @Test [EOL] public void testIndexOfFloatWithStartIndex() { [EOL]     float[] array = null; [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, (float) 0, 2)); [EOL]     array = new float[0]; [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, (float) 0, 2)); [EOL]     array = new float[] { 0, 1, 2, 3, 0 }; [EOL]     assertEquals(4, ArrayUtils.indexOf(array, (float) 0, 2)); [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, (float) 1, 2)); [EOL]     assertEquals(2, ArrayUtils.indexOf(array, (float) 2, 2)); [EOL]     assertEquals(3, ArrayUtils.indexOf(array, (float) 3, 2)); [EOL]     assertEquals(3, ArrayUtils.indexOf(array, (float) 3, -1)); [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, (float) 99, 0)); [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, (float) 0, 6)); [EOL] }
@Test [EOL] public void testToPrimitive_long() { [EOL]     final Long[] b = null; [EOL]     assertEquals(null, ArrayUtils.toPrimitive(b)); [EOL]     assertSame(ArrayUtils.EMPTY_LONG_ARRAY, ArrayUtils.toPrimitive(new Long[0])); [EOL]     assertTrue(Arrays.equals(new long[] { Long.MIN_VALUE, Long.MAX_VALUE, 9999999 }, ArrayUtils.toPrimitive(new Long[] { Long.valueOf(Long.MIN_VALUE), Long.valueOf(Long.MAX_VALUE), Long.valueOf(9999999) }))); [EOL]     try { [EOL]         ArrayUtils.toPrimitive(new Long[] { Long.valueOf(Long.MIN_VALUE), null }); [EOL]         fail(); [EOL]     } catch (final NullPointerException ex) { [EOL]     } [EOL] }
@Test [EOL] public void testToPrimitive_long() { [EOL]     final Long[] b = null; [EOL]     assertEquals(null, ArrayUtils.toPrimitive(b)); [EOL]     assertSame(ArrayUtils.EMPTY_LONG_ARRAY, ArrayUtils.toPrimitive(new Long[0])); [EOL]     assertTrue(Arrays.equals(new long[] { Long.MIN_VALUE, Long.MAX_VALUE, 9999999 }, ArrayUtils.toPrimitive(new Long[] { Long.valueOf(Long.MIN_VALUE), Long.valueOf(Long.MAX_VALUE), Long.valueOf(9999999) }))); [EOL]     try { [EOL]         ArrayUtils.toPrimitive(new Long[] { Long.valueOf(Long.MIN_VALUE), null }); [EOL]         fail(); [EOL]     } catch (final NullPointerException ex) { [EOL]     } [EOL] }
@Test [EOL] public void testToPrimitive_long() { [EOL]     final Long[] b = null; [EOL]     assertEquals(null, ArrayUtils.toPrimitive(b)); [EOL]     assertSame(ArrayUtils.EMPTY_LONG_ARRAY, ArrayUtils.toPrimitive(new Long[0])); [EOL]     assertTrue(Arrays.equals(new long[] { Long.MIN_VALUE, Long.MAX_VALUE, 9999999 }, ArrayUtils.toPrimitive(new Long[] { Long.valueOf(Long.MIN_VALUE), Long.valueOf(Long.MAX_VALUE), Long.valueOf(9999999) }))); [EOL]     try { [EOL]         ArrayUtils.toPrimitive(new Long[] { Long.valueOf(Long.MIN_VALUE), null }); [EOL]         fail(); [EOL]     } catch (final NullPointerException ex) { [EOL]     } [EOL] }
@Test [EOL] public void testToPrimitive_long_long() { [EOL]     final Long[] l = null; [EOL]     assertEquals(null, ArrayUtils.toPrimitive(l, Long.MIN_VALUE)); [EOL]     assertSame(ArrayUtils.EMPTY_LONG_ARRAY, ArrayUtils.toPrimitive(new Long[0], 1)); [EOL]     assertTrue(Arrays.equals(new long[] { Long.MIN_VALUE, Long.MAX_VALUE, 9999999 }, ArrayUtils.toPrimitive(new Long[] { Long.valueOf(Long.MIN_VALUE), Long.valueOf(Long.MAX_VALUE), Long.valueOf(9999999) }, 1))); [EOL]     assertTrue(Arrays.equals(new long[] { Long.MIN_VALUE, Long.MAX_VALUE, 9999999 }, ArrayUtils.toPrimitive(new Long[] { Long.valueOf(Long.MIN_VALUE), null, Long.valueOf(9999999) }, Long.MAX_VALUE))); [EOL] }
@Test [EOL] public void testToPrimitive_long_long() { [EOL]     final Long[] l = null; [EOL]     assertEquals(null, ArrayUtils.toPrimitive(l, Long.MIN_VALUE)); [EOL]     assertSame(ArrayUtils.EMPTY_LONG_ARRAY, ArrayUtils.toPrimitive(new Long[0], 1)); [EOL]     assertTrue(Arrays.equals(new long[] { Long.MIN_VALUE, Long.MAX_VALUE, 9999999 }, ArrayUtils.toPrimitive(new Long[] { Long.valueOf(Long.MIN_VALUE), Long.valueOf(Long.MAX_VALUE), Long.valueOf(9999999) }, 1))); [EOL]     assertTrue(Arrays.equals(new long[] { Long.MIN_VALUE, Long.MAX_VALUE, 9999999 }, ArrayUtils.toPrimitive(new Long[] { Long.valueOf(Long.MIN_VALUE), null, Long.valueOf(9999999) }, Long.MAX_VALUE))); [EOL] }
@Test [EOL] public void testToPrimitive_long_long() { [EOL]     final Long[] l = null; [EOL]     assertEquals(null, ArrayUtils.toPrimitive(l, Long.MIN_VALUE)); [EOL]     assertSame(ArrayUtils.EMPTY_LONG_ARRAY, ArrayUtils.toPrimitive(new Long[0], 1)); [EOL]     assertTrue(Arrays.equals(new long[] { Long.MIN_VALUE, Long.MAX_VALUE, 9999999 }, ArrayUtils.toPrimitive(new Long[] { Long.valueOf(Long.MIN_VALUE), Long.valueOf(Long.MAX_VALUE), Long.valueOf(9999999) }, 1))); [EOL]     assertTrue(Arrays.equals(new long[] { Long.MIN_VALUE, Long.MAX_VALUE, 9999999 }, ArrayUtils.toPrimitive(new Long[] { Long.valueOf(Long.MIN_VALUE), null, Long.valueOf(9999999) }, Long.MAX_VALUE))); [EOL] }
@Test [EOL] public void testToPrimitive_long_long() { [EOL]     final Long[] l = null; [EOL]     assertEquals(null, ArrayUtils.toPrimitive(l, Long.MIN_VALUE)); [EOL]     assertSame(ArrayUtils.EMPTY_LONG_ARRAY, ArrayUtils.toPrimitive(new Long[0], 1)); [EOL]     assertTrue(Arrays.equals(new long[] { Long.MIN_VALUE, Long.MAX_VALUE, 9999999 }, ArrayUtils.toPrimitive(new Long[] { Long.valueOf(Long.MIN_VALUE), Long.valueOf(Long.MAX_VALUE), Long.valueOf(9999999) }, 1))); [EOL]     assertTrue(Arrays.equals(new long[] { Long.MIN_VALUE, Long.MAX_VALUE, 9999999 }, ArrayUtils.toPrimitive(new Long[] { Long.valueOf(Long.MIN_VALUE), null, Long.valueOf(9999999) }, Long.MAX_VALUE))); [EOL] }
@Test [EOL] public void testToPrimitive_long_long() { [EOL]     final Long[] l = null; [EOL]     assertEquals(null, ArrayUtils.toPrimitive(l, Long.MIN_VALUE)); [EOL]     assertSame(ArrayUtils.EMPTY_LONG_ARRAY, ArrayUtils.toPrimitive(new Long[0], 1)); [EOL]     assertTrue(Arrays.equals(new long[] { Long.MIN_VALUE, Long.MAX_VALUE, 9999999 }, ArrayUtils.toPrimitive(new Long[] { Long.valueOf(Long.MIN_VALUE), Long.valueOf(Long.MAX_VALUE), Long.valueOf(9999999) }, 1))); [EOL]     assertTrue(Arrays.equals(new long[] { Long.MIN_VALUE, Long.MAX_VALUE, 9999999 }, ArrayUtils.toPrimitive(new Long[] { Long.valueOf(Long.MIN_VALUE), null, Long.valueOf(9999999) }, Long.MAX_VALUE))); [EOL] }
@Test [EOL] public void testToPrimitive_int_int() { [EOL]     final Long[] l = null; [EOL]     assertEquals(null, ArrayUtils.toPrimitive(l, Integer.MIN_VALUE)); [EOL]     assertSame(ArrayUtils.EMPTY_INT_ARRAY, ArrayUtils.toPrimitive(new Integer[0], 1)); [EOL]     assertTrue(Arrays.equals(new int[] { Integer.MIN_VALUE, Integer.MAX_VALUE, 9999999 }, ArrayUtils.toPrimitive(new Integer[] { Integer.valueOf(Integer.MIN_VALUE), Integer.valueOf(Integer.MAX_VALUE), Integer.valueOf(9999999) }, 1))); [EOL]     assertTrue(Arrays.equals(new int[] { Integer.MIN_VALUE, Integer.MAX_VALUE, 9999999 }, ArrayUtils.toPrimitive(new Integer[] { Integer.valueOf(Integer.MIN_VALUE), null, Integer.valueOf(9999999) }, Integer.MAX_VALUE))); [EOL] }
@Test [EOL] public void testToPrimitive_int_int() { [EOL]     final Long[] l = null; [EOL]     assertEquals(null, ArrayUtils.toPrimitive(l, Integer.MIN_VALUE)); [EOL]     assertSame(ArrayUtils.EMPTY_INT_ARRAY, ArrayUtils.toPrimitive(new Integer[0], 1)); [EOL]     assertTrue(Arrays.equals(new int[] { Integer.MIN_VALUE, Integer.MAX_VALUE, 9999999 }, ArrayUtils.toPrimitive(new Integer[] { Integer.valueOf(Integer.MIN_VALUE), Integer.valueOf(Integer.MAX_VALUE), Integer.valueOf(9999999) }, 1))); [EOL]     assertTrue(Arrays.equals(new int[] { Integer.MIN_VALUE, Integer.MAX_VALUE, 9999999 }, ArrayUtils.toPrimitive(new Integer[] { Integer.valueOf(Integer.MIN_VALUE), null, Integer.valueOf(9999999) }, Integer.MAX_VALUE))); [EOL] }
@Test [EOL] public void testToPrimitive_int_int() { [EOL]     final Long[] l = null; [EOL]     assertEquals(null, ArrayUtils.toPrimitive(l, Integer.MIN_VALUE)); [EOL]     assertSame(ArrayUtils.EMPTY_INT_ARRAY, ArrayUtils.toPrimitive(new Integer[0], 1)); [EOL]     assertTrue(Arrays.equals(new int[] { Integer.MIN_VALUE, Integer.MAX_VALUE, 9999999 }, ArrayUtils.toPrimitive(new Integer[] { Integer.valueOf(Integer.MIN_VALUE), Integer.valueOf(Integer.MAX_VALUE), Integer.valueOf(9999999) }, 1))); [EOL]     assertTrue(Arrays.equals(new int[] { Integer.MIN_VALUE, Integer.MAX_VALUE, 9999999 }, ArrayUtils.toPrimitive(new Integer[] { Integer.valueOf(Integer.MIN_VALUE), null, Integer.valueOf(9999999) }, Integer.MAX_VALUE))); [EOL] }
@Test [EOL] public void testToPrimitive_int_int() { [EOL]     final Long[] l = null; [EOL]     assertEquals(null, ArrayUtils.toPrimitive(l, Integer.MIN_VALUE)); [EOL]     assertSame(ArrayUtils.EMPTY_INT_ARRAY, ArrayUtils.toPrimitive(new Integer[0], 1)); [EOL]     assertTrue(Arrays.equals(new int[] { Integer.MIN_VALUE, Integer.MAX_VALUE, 9999999 }, ArrayUtils.toPrimitive(new Integer[] { Integer.valueOf(Integer.MIN_VALUE), Integer.valueOf(Integer.MAX_VALUE), Integer.valueOf(9999999) }, 1))); [EOL]     assertTrue(Arrays.equals(new int[] { Integer.MIN_VALUE, Integer.MAX_VALUE, 9999999 }, ArrayUtils.toPrimitive(new Integer[] { Integer.valueOf(Integer.MIN_VALUE), null, Integer.valueOf(9999999) }, Integer.MAX_VALUE))); [EOL] }
@Test [EOL] public void testToPrimitive_int_int() { [EOL]     final Long[] l = null; [EOL]     assertEquals(null, ArrayUtils.toPrimitive(l, Integer.MIN_VALUE)); [EOL]     assertSame(ArrayUtils.EMPTY_INT_ARRAY, ArrayUtils.toPrimitive(new Integer[0], 1)); [EOL]     assertTrue(Arrays.equals(new int[] { Integer.MIN_VALUE, Integer.MAX_VALUE, 9999999 }, ArrayUtils.toPrimitive(new Integer[] { Integer.valueOf(Integer.MIN_VALUE), Integer.valueOf(Integer.MAX_VALUE), Integer.valueOf(9999999) }, 1))); [EOL]     assertTrue(Arrays.equals(new int[] { Integer.MIN_VALUE, Integer.MAX_VALUE, 9999999 }, ArrayUtils.toPrimitive(new Integer[] { Integer.valueOf(Integer.MIN_VALUE), null, Integer.valueOf(9999999) }, Integer.MAX_VALUE))); [EOL] }
@Test [EOL] public void testToPrimitive_byte_byte() { [EOL]     final Byte[] b = null; [EOL]     assertEquals(null, ArrayUtils.toPrimitive(b, Byte.MIN_VALUE)); [EOL]     assertSame(ArrayUtils.EMPTY_BYTE_ARRAY, ArrayUtils.toPrimitive(new Byte[0], (byte) 1)); [EOL]     assertTrue(Arrays.equals(new byte[] { Byte.MIN_VALUE, Byte.MAX_VALUE, (byte) 9999999 }, ArrayUtils.toPrimitive(new Byte[] { Byte.valueOf(Byte.MIN_VALUE), Byte.valueOf(Byte.MAX_VALUE), Byte.valueOf((byte) 9999999) }, Byte.MIN_VALUE))); [EOL]     assertTrue(Arrays.equals(new byte[] { Byte.MIN_VALUE, Byte.MAX_VALUE, (byte) 9999999 }, ArrayUtils.toPrimitive(new Byte[] { Byte.valueOf(Byte.MIN_VALUE), null, Byte.valueOf((byte) 9999999) }, Byte.MAX_VALUE))); [EOL] }
@Test [EOL] public void testToPrimitive_byte_byte() { [EOL]     final Byte[] b = null; [EOL]     assertEquals(null, ArrayUtils.toPrimitive(b, Byte.MIN_VALUE)); [EOL]     assertSame(ArrayUtils.EMPTY_BYTE_ARRAY, ArrayUtils.toPrimitive(new Byte[0], (byte) 1)); [EOL]     assertTrue(Arrays.equals(new byte[] { Byte.MIN_VALUE, Byte.MAX_VALUE, (byte) 9999999 }, ArrayUtils.toPrimitive(new Byte[] { Byte.valueOf(Byte.MIN_VALUE), Byte.valueOf(Byte.MAX_VALUE), Byte.valueOf((byte) 9999999) }, Byte.MIN_VALUE))); [EOL]     assertTrue(Arrays.equals(new byte[] { Byte.MIN_VALUE, Byte.MAX_VALUE, (byte) 9999999 }, ArrayUtils.toPrimitive(new Byte[] { Byte.valueOf(Byte.MIN_VALUE), null, Byte.valueOf((byte) 9999999) }, Byte.MAX_VALUE))); [EOL] }
@Test [EOL] public void testToPrimitive_byte_byte() { [EOL]     final Byte[] b = null; [EOL]     assertEquals(null, ArrayUtils.toPrimitive(b, Byte.MIN_VALUE)); [EOL]     assertSame(ArrayUtils.EMPTY_BYTE_ARRAY, ArrayUtils.toPrimitive(new Byte[0], (byte) 1)); [EOL]     assertTrue(Arrays.equals(new byte[] { Byte.MIN_VALUE, Byte.MAX_VALUE, (byte) 9999999 }, ArrayUtils.toPrimitive(new Byte[] { Byte.valueOf(Byte.MIN_VALUE), Byte.valueOf(Byte.MAX_VALUE), Byte.valueOf((byte) 9999999) }, Byte.MIN_VALUE))); [EOL]     assertTrue(Arrays.equals(new byte[] { Byte.MIN_VALUE, Byte.MAX_VALUE, (byte) 9999999 }, ArrayUtils.toPrimitive(new Byte[] { Byte.valueOf(Byte.MIN_VALUE), null, Byte.valueOf((byte) 9999999) }, Byte.MAX_VALUE))); [EOL] }
@Test [EOL] public void testToPrimitive_byte_byte() { [EOL]     final Byte[] b = null; [EOL]     assertEquals(null, ArrayUtils.toPrimitive(b, Byte.MIN_VALUE)); [EOL]     assertSame(ArrayUtils.EMPTY_BYTE_ARRAY, ArrayUtils.toPrimitive(new Byte[0], (byte) 1)); [EOL]     assertTrue(Arrays.equals(new byte[] { Byte.MIN_VALUE, Byte.MAX_VALUE, (byte) 9999999 }, ArrayUtils.toPrimitive(new Byte[] { Byte.valueOf(Byte.MIN_VALUE), Byte.valueOf(Byte.MAX_VALUE), Byte.valueOf((byte) 9999999) }, Byte.MIN_VALUE))); [EOL]     assertTrue(Arrays.equals(new byte[] { Byte.MIN_VALUE, Byte.MAX_VALUE, (byte) 9999999 }, ArrayUtils.toPrimitive(new Byte[] { Byte.valueOf(Byte.MIN_VALUE), null, Byte.valueOf((byte) 9999999) }, Byte.MAX_VALUE))); [EOL] }
@Test [EOL] public void testToPrimitive_byte_byte() { [EOL]     final Byte[] b = null; [EOL]     assertEquals(null, ArrayUtils.toPrimitive(b, Byte.MIN_VALUE)); [EOL]     assertSame(ArrayUtils.EMPTY_BYTE_ARRAY, ArrayUtils.toPrimitive(new Byte[0], (byte) 1)); [EOL]     assertTrue(Arrays.equals(new byte[] { Byte.MIN_VALUE, Byte.MAX_VALUE, (byte) 9999999 }, ArrayUtils.toPrimitive(new Byte[] { Byte.valueOf(Byte.MIN_VALUE), Byte.valueOf(Byte.MAX_VALUE), Byte.valueOf((byte) 9999999) }, Byte.MIN_VALUE))); [EOL]     assertTrue(Arrays.equals(new byte[] { Byte.MIN_VALUE, Byte.MAX_VALUE, (byte) 9999999 }, ArrayUtils.toPrimitive(new Byte[] { Byte.valueOf(Byte.MIN_VALUE), null, Byte.valueOf((byte) 9999999) }, Byte.MAX_VALUE))); [EOL] }
@Test [EOL] public void testToObject_boolean() { [EOL]     final boolean[] b = null; [EOL]     assertArrayEquals(null, ArrayUtils.toObject(b)); [EOL]     assertSame(ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY, ArrayUtils.toObject(new boolean[0])); [EOL]     assertTrue(Arrays.equals(new Boolean[] { Boolean.TRUE, Boolean.FALSE, Boolean.TRUE }, ArrayUtils.toObject(new boolean[] { true, false, true }))); [EOL] }
@Test [EOL] public void testToObject_boolean() { [EOL]     final boolean[] b = null; [EOL]     assertArrayEquals(null, ArrayUtils.toObject(b)); [EOL]     assertSame(ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY, ArrayUtils.toObject(new boolean[0])); [EOL]     assertTrue(Arrays.equals(new Boolean[] { Boolean.TRUE, Boolean.FALSE, Boolean.TRUE }, ArrayUtils.toObject(new boolean[] { true, false, true }))); [EOL] }
@Test [EOL] public void testToObject_boolean() { [EOL]     final boolean[] b = null; [EOL]     assertArrayEquals(null, ArrayUtils.toObject(b)); [EOL]     assertSame(ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY, ArrayUtils.toObject(new boolean[0])); [EOL]     assertTrue(Arrays.equals(new Boolean[] { Boolean.TRUE, Boolean.FALSE, Boolean.TRUE }, ArrayUtils.toObject(new boolean[] { true, false, true }))); [EOL] }
@Test [EOL] public void testAddObjectArrayToObjectArray() { [EOL]     assertNull(ArrayUtils.addAll((Object[]) null, (Object[]) null)); [EOL]     Object[] newArray; [EOL]     final String[] stringArray1 = new String[] { "a", "b", "c" }; [EOL]     final String[] stringArray2 = new String[] { "1", "2", "3" }; [EOL]     newArray = ArrayUtils.addAll(stringArray1, (String[]) null); [EOL]     assertNotSame(stringArray1, newArray); [EOL]     assertTrue(Arrays.equals(stringArray1, newArray)); [EOL]     assertTrue(Arrays.equals(new String[] { "a", "b", "c" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.addAll(null, stringArray2); [EOL]     assertNotSame(stringArray2, newArray); [EOL]     assertTrue(Arrays.equals(stringArray2, newArray)); [EOL]     assertTrue(Arrays.equals(new String[] { "1", "2", "3" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.addAll(stringArray1, stringArray2); [EOL]     assertTrue(Arrays.equals(new String[] { "a", "b", "c", "1", "2", "3" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.addAll(ArrayUtils.EMPTY_STRING_ARRAY, (String[]) null); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_STRING_ARRAY, newArray)); [EOL]     assertTrue(Arrays.equals(new String[] {}, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.addAll(null, ArrayUtils.EMPTY_STRING_ARRAY); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_STRING_ARRAY, newArray)); [EOL]     assertTrue(Arrays.equals(new String[] {}, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.addAll(ArrayUtils.EMPTY_STRING_ARRAY, ArrayUtils.EMPTY_STRING_ARRAY); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_STRING_ARRAY, newArray)); [EOL]     assertTrue(Arrays.equals(new String[] {}, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     final String[] stringArrayNull = new String[] { null }; [EOL]     newArray = ArrayUtils.addAll(stringArrayNull, stringArrayNull); [EOL]     assertTrue(Arrays.equals(new String[] { null, null }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     assertTrue(Arrays.equals(new boolean[] { true, false, false, true }, ArrayUtils.addAll(new boolean[] { true, false }, new boolean[] { false, true }))); [EOL]     assertTrue(Arrays.equals(new boolean[] { false, true }, ArrayUtils.addAll(null, new boolean[] { false, true }))); [EOL]     assertTrue(Arrays.equals(new boolean[] { true, false }, ArrayUtils.addAll(new boolean[] { true, false }, null))); [EOL]     assertTrue(Arrays.equals(new char[] { 'a', 'b', 'c', 'd' }, ArrayUtils.addAll(new char[] { 'a', 'b' }, new char[] { 'c', 'd' }))); [EOL]     assertTrue(Arrays.equals(new char[] { 'c', 'd' }, ArrayUtils.addAll(null, new char[] { 'c', 'd' }))); [EOL]     assertTrue(Arrays.equals(new char[] { 'a', 'b' }, ArrayUtils.addAll(new char[] { 'a', 'b' }, null))); [EOL]     assertTrue(Arrays.equals(new byte[] { (byte) 0, (byte) 1, (byte) 2, (byte) 3 }, ArrayUtils.addAll(new byte[] { (byte) 0, (byte) 1 }, new byte[] { (byte) 2, (byte) 3 }))); [EOL]     assertTrue(Arrays.equals(new byte[] { (byte) 2, (byte) 3 }, ArrayUtils.addAll(null, new byte[] { (byte) 2, (byte) 3 }))); [EOL]     assertTrue(Arrays.equals(new byte[] { (byte) 0, (byte) 1 }, ArrayUtils.addAll(new byte[] { (byte) 0, (byte) 1 }, null))); [EOL]     assertTrue(Arrays.equals(new short[] { (short) 10, (short) 20, (short) 30, (short) 40 }, ArrayUtils.addAll(new short[] { (short) 10, (short) 20 }, new short[] { (short) 30, (short) 40 }))); [EOL]     assertTrue(Arrays.equals(new short[] { (short) 30, (short) 40 }, ArrayUtils.addAll(null, new short[] { (short) 30, (short) 40 }))); [EOL]     assertTrue(Arrays.equals(new short[] { (short) 10, (short) 20 }, ArrayUtils.addAll(new short[] { (short) 10, (short) 20 }, null))); [EOL]     assertTrue(Arrays.equals(new int[] { 1, 1000, -1000, -1 }, ArrayUtils.addAll(new int[] { 1, 1000 }, new int[] { -1000, -1 }))); [EOL]     assertTrue(Arrays.equals(new int[] { -1000, -1 }, ArrayUtils.addAll(null, new int[] { -1000, -1 }))); [EOL]     assertTrue(Arrays.equals(new int[] { 1, 1000 }, ArrayUtils.addAll(new int[] { 1, 1000 }, null))); [EOL]     assertTrue(Arrays.equals(new long[] { 1L, -1L, 1000L, -1000L }, ArrayUtils.addAll(new long[] { 1L, -1L }, new long[] { 1000L, -1000L }))); [EOL]     assertTrue(Arrays.equals(new long[] { 1000L, -1000L }, ArrayUtils.addAll(null, new long[] { 1000L, -1000L }))); [EOL]     assertTrue(Arrays.equals(new long[] { 1L, -1L }, ArrayUtils.addAll(new long[] { 1L, -1L }, null))); [EOL]     assertTrue(Arrays.equals(new float[] { 10.5f, 10.1f, 1.6f, 0.01f }, ArrayUtils.addAll(new float[] { 10.5f, 10.1f }, new float[] { 1.6f, 0.01f }))); [EOL]     assertTrue(Arrays.equals(new float[] { 1.6f, 0.01f }, ArrayUtils.addAll(null, new float[] { 1.6f, 0.01f }))); [EOL]     assertTrue(Arrays.equals(new float[] { 10.5f, 10.1f }, ArrayUtils.addAll(new float[] { 10.5f, 10.1f }, null))); [EOL]     assertTrue(Arrays.equals(new double[] { Math.PI, -Math.PI, 0, 9.99 }, ArrayUtils.addAll(new double[] { Math.PI, -Math.PI }, new double[] { 0, 9.99 }))); [EOL]     assertTrue(Arrays.equals(new double[] { 0, 9.99 }, ArrayUtils.addAll(null, new double[] { 0, 9.99 }))); [EOL]     assertTrue(Arrays.equals(new double[] { Math.PI, -Math.PI }, ArrayUtils.addAll(new double[] { Math.PI, -Math.PI }, null))); [EOL] }
@Test [EOL] public void testAddObjectArrayToObjectArray() { [EOL]     assertNull(ArrayUtils.addAll((Object[]) null, (Object[]) null)); [EOL]     Object[] newArray; [EOL]     final String[] stringArray1 = new String[] { "a", "b", "c" }; [EOL]     final String[] stringArray2 = new String[] { "1", "2", "3" }; [EOL]     newArray = ArrayUtils.addAll(stringArray1, (String[]) null); [EOL]     assertNotSame(stringArray1, newArray); [EOL]     assertTrue(Arrays.equals(stringArray1, newArray)); [EOL]     assertTrue(Arrays.equals(new String[] { "a", "b", "c" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.addAll(null, stringArray2); [EOL]     assertNotSame(stringArray2, newArray); [EOL]     assertTrue(Arrays.equals(stringArray2, newArray)); [EOL]     assertTrue(Arrays.equals(new String[] { "1", "2", "3" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.addAll(stringArray1, stringArray2); [EOL]     assertTrue(Arrays.equals(new String[] { "a", "b", "c", "1", "2", "3" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.addAll(ArrayUtils.EMPTY_STRING_ARRAY, (String[]) null); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_STRING_ARRAY, newArray)); [EOL]     assertTrue(Arrays.equals(new String[] {}, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.addAll(null, ArrayUtils.EMPTY_STRING_ARRAY); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_STRING_ARRAY, newArray)); [EOL]     assertTrue(Arrays.equals(new String[] {}, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.addAll(ArrayUtils.EMPTY_STRING_ARRAY, ArrayUtils.EMPTY_STRING_ARRAY); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_STRING_ARRAY, newArray)); [EOL]     assertTrue(Arrays.equals(new String[] {}, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     final String[] stringArrayNull = new String[] { null }; [EOL]     newArray = ArrayUtils.addAll(stringArrayNull, stringArrayNull); [EOL]     assertTrue(Arrays.equals(new String[] { null, null }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     assertTrue(Arrays.equals(new boolean[] { true, false, false, true }, ArrayUtils.addAll(new boolean[] { true, false }, new boolean[] { false, true }))); [EOL]     assertTrue(Arrays.equals(new boolean[] { false, true }, ArrayUtils.addAll(null, new boolean[] { false, true }))); [EOL]     assertTrue(Arrays.equals(new boolean[] { true, false }, ArrayUtils.addAll(new boolean[] { true, false }, null))); [EOL]     assertTrue(Arrays.equals(new char[] { 'a', 'b', 'c', 'd' }, ArrayUtils.addAll(new char[] { 'a', 'b' }, new char[] { 'c', 'd' }))); [EOL]     assertTrue(Arrays.equals(new char[] { 'c', 'd' }, ArrayUtils.addAll(null, new char[] { 'c', 'd' }))); [EOL]     assertTrue(Arrays.equals(new char[] { 'a', 'b' }, ArrayUtils.addAll(new char[] { 'a', 'b' }, null))); [EOL]     assertTrue(Arrays.equals(new byte[] { (byte) 0, (byte) 1, (byte) 2, (byte) 3 }, ArrayUtils.addAll(new byte[] { (byte) 0, (byte) 1 }, new byte[] { (byte) 2, (byte) 3 }))); [EOL]     assertTrue(Arrays.equals(new byte[] { (byte) 2, (byte) 3 }, ArrayUtils.addAll(null, new byte[] { (byte) 2, (byte) 3 }))); [EOL]     assertTrue(Arrays.equals(new byte[] { (byte) 0, (byte) 1 }, ArrayUtils.addAll(new byte[] { (byte) 0, (byte) 1 }, null))); [EOL]     assertTrue(Arrays.equals(new short[] { (short) 10, (short) 20, (short) 30, (short) 40 }, ArrayUtils.addAll(new short[] { (short) 10, (short) 20 }, new short[] { (short) 30, (short) 40 }))); [EOL]     assertTrue(Arrays.equals(new short[] { (short) 30, (short) 40 }, ArrayUtils.addAll(null, new short[] { (short) 30, (short) 40 }))); [EOL]     assertTrue(Arrays.equals(new short[] { (short) 10, (short) 20 }, ArrayUtils.addAll(new short[] { (short) 10, (short) 20 }, null))); [EOL]     assertTrue(Arrays.equals(new int[] { 1, 1000, -1000, -1 }, ArrayUtils.addAll(new int[] { 1, 1000 }, new int[] { -1000, -1 }))); [EOL]     assertTrue(Arrays.equals(new int[] { -1000, -1 }, ArrayUtils.addAll(null, new int[] { -1000, -1 }))); [EOL]     assertTrue(Arrays.equals(new int[] { 1, 1000 }, ArrayUtils.addAll(new int[] { 1, 1000 }, null))); [EOL]     assertTrue(Arrays.equals(new long[] { 1L, -1L, 1000L, -1000L }, ArrayUtils.addAll(new long[] { 1L, -1L }, new long[] { 1000L, -1000L }))); [EOL]     assertTrue(Arrays.equals(new long[] { 1000L, -1000L }, ArrayUtils.addAll(null, new long[] { 1000L, -1000L }))); [EOL]     assertTrue(Arrays.equals(new long[] { 1L, -1L }, ArrayUtils.addAll(new long[] { 1L, -1L }, null))); [EOL]     assertTrue(Arrays.equals(new float[] { 10.5f, 10.1f, 1.6f, 0.01f }, ArrayUtils.addAll(new float[] { 10.5f, 10.1f }, new float[] { 1.6f, 0.01f }))); [EOL]     assertTrue(Arrays.equals(new float[] { 1.6f, 0.01f }, ArrayUtils.addAll(null, new float[] { 1.6f, 0.01f }))); [EOL]     assertTrue(Arrays.equals(new float[] { 10.5f, 10.1f }, ArrayUtils.addAll(new float[] { 10.5f, 10.1f }, null))); [EOL]     assertTrue(Arrays.equals(new double[] { Math.PI, -Math.PI, 0, 9.99 }, ArrayUtils.addAll(new double[] { Math.PI, -Math.PI }, new double[] { 0, 9.99 }))); [EOL]     assertTrue(Arrays.equals(new double[] { 0, 9.99 }, ArrayUtils.addAll(null, new double[] { 0, 9.99 }))); [EOL]     assertTrue(Arrays.equals(new double[] { Math.PI, -Math.PI }, ArrayUtils.addAll(new double[] { Math.PI, -Math.PI }, null))); [EOL] }
@Test [EOL] public void testAddObjectArrayToObjectArray() { [EOL]     assertNull(ArrayUtils.addAll((Object[]) null, (Object[]) null)); [EOL]     Object[] newArray; [EOL]     final String[] stringArray1 = new String[] { "a", "b", "c" }; [EOL]     final String[] stringArray2 = new String[] { "1", "2", "3" }; [EOL]     newArray = ArrayUtils.addAll(stringArray1, (String[]) null); [EOL]     assertNotSame(stringArray1, newArray); [EOL]     assertTrue(Arrays.equals(stringArray1, newArray)); [EOL]     assertTrue(Arrays.equals(new String[] { "a", "b", "c" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.addAll(null, stringArray2); [EOL]     assertNotSame(stringArray2, newArray); [EOL]     assertTrue(Arrays.equals(stringArray2, newArray)); [EOL]     assertTrue(Arrays.equals(new String[] { "1", "2", "3" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.addAll(stringArray1, stringArray2); [EOL]     assertTrue(Arrays.equals(new String[] { "a", "b", "c", "1", "2", "3" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.addAll(ArrayUtils.EMPTY_STRING_ARRAY, (String[]) null); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_STRING_ARRAY, newArray)); [EOL]     assertTrue(Arrays.equals(new String[] {}, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.addAll(null, ArrayUtils.EMPTY_STRING_ARRAY); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_STRING_ARRAY, newArray)); [EOL]     assertTrue(Arrays.equals(new String[] {}, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.addAll(ArrayUtils.EMPTY_STRING_ARRAY, ArrayUtils.EMPTY_STRING_ARRAY); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_STRING_ARRAY, newArray)); [EOL]     assertTrue(Arrays.equals(new String[] {}, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     final String[] stringArrayNull = new String[] { null }; [EOL]     newArray = ArrayUtils.addAll(stringArrayNull, stringArrayNull); [EOL]     assertTrue(Arrays.equals(new String[] { null, null }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     assertTrue(Arrays.equals(new boolean[] { true, false, false, true }, ArrayUtils.addAll(new boolean[] { true, false }, new boolean[] { false, true }))); [EOL]     assertTrue(Arrays.equals(new boolean[] { false, true }, ArrayUtils.addAll(null, new boolean[] { false, true }))); [EOL]     assertTrue(Arrays.equals(new boolean[] { true, false }, ArrayUtils.addAll(new boolean[] { true, false }, null))); [EOL]     assertTrue(Arrays.equals(new char[] { 'a', 'b', 'c', 'd' }, ArrayUtils.addAll(new char[] { 'a', 'b' }, new char[] { 'c', 'd' }))); [EOL]     assertTrue(Arrays.equals(new char[] { 'c', 'd' }, ArrayUtils.addAll(null, new char[] { 'c', 'd' }))); [EOL]     assertTrue(Arrays.equals(new char[] { 'a', 'b' }, ArrayUtils.addAll(new char[] { 'a', 'b' }, null))); [EOL]     assertTrue(Arrays.equals(new byte[] { (byte) 0, (byte) 1, (byte) 2, (byte) 3 }, ArrayUtils.addAll(new byte[] { (byte) 0, (byte) 1 }, new byte[] { (byte) 2, (byte) 3 }))); [EOL]     assertTrue(Arrays.equals(new byte[] { (byte) 2, (byte) 3 }, ArrayUtils.addAll(null, new byte[] { (byte) 2, (byte) 3 }))); [EOL]     assertTrue(Arrays.equals(new byte[] { (byte) 0, (byte) 1 }, ArrayUtils.addAll(new byte[] { (byte) 0, (byte) 1 }, null))); [EOL]     assertTrue(Arrays.equals(new short[] { (short) 10, (short) 20, (short) 30, (short) 40 }, ArrayUtils.addAll(new short[] { (short) 10, (short) 20 }, new short[] { (short) 30, (short) 40 }))); [EOL]     assertTrue(Arrays.equals(new short[] { (short) 30, (short) 40 }, ArrayUtils.addAll(null, new short[] { (short) 30, (short) 40 }))); [EOL]     assertTrue(Arrays.equals(new short[] { (short) 10, (short) 20 }, ArrayUtils.addAll(new short[] { (short) 10, (short) 20 }, null))); [EOL]     assertTrue(Arrays.equals(new int[] { 1, 1000, -1000, -1 }, ArrayUtils.addAll(new int[] { 1, 1000 }, new int[] { -1000, -1 }))); [EOL]     assertTrue(Arrays.equals(new int[] { -1000, -1 }, ArrayUtils.addAll(null, new int[] { -1000, -1 }))); [EOL]     assertTrue(Arrays.equals(new int[] { 1, 1000 }, ArrayUtils.addAll(new int[] { 1, 1000 }, null))); [EOL]     assertTrue(Arrays.equals(new long[] { 1L, -1L, 1000L, -1000L }, ArrayUtils.addAll(new long[] { 1L, -1L }, new long[] { 1000L, -1000L }))); [EOL]     assertTrue(Arrays.equals(new long[] { 1000L, -1000L }, ArrayUtils.addAll(null, new long[] { 1000L, -1000L }))); [EOL]     assertTrue(Arrays.equals(new long[] { 1L, -1L }, ArrayUtils.addAll(new long[] { 1L, -1L }, null))); [EOL]     assertTrue(Arrays.equals(new float[] { 10.5f, 10.1f, 1.6f, 0.01f }, ArrayUtils.addAll(new float[] { 10.5f, 10.1f }, new float[] { 1.6f, 0.01f }))); [EOL]     assertTrue(Arrays.equals(new float[] { 1.6f, 0.01f }, ArrayUtils.addAll(null, new float[] { 1.6f, 0.01f }))); [EOL]     assertTrue(Arrays.equals(new float[] { 10.5f, 10.1f }, ArrayUtils.addAll(new float[] { 10.5f, 10.1f }, null))); [EOL]     assertTrue(Arrays.equals(new double[] { Math.PI, -Math.PI, 0, 9.99 }, ArrayUtils.addAll(new double[] { Math.PI, -Math.PI }, new double[] { 0, 9.99 }))); [EOL]     assertTrue(Arrays.equals(new double[] { 0, 9.99 }, ArrayUtils.addAll(null, new double[] { 0, 9.99 }))); [EOL]     assertTrue(Arrays.equals(new double[] { Math.PI, -Math.PI }, ArrayUtils.addAll(new double[] { Math.PI, -Math.PI }, null))); [EOL] }
@Test [EOL] public void testAddObjectArrayToObjectArray() { [EOL]     assertNull(ArrayUtils.addAll((Object[]) null, (Object[]) null)); [EOL]     Object[] newArray; [EOL]     final String[] stringArray1 = new String[] { "a", "b", "c" }; [EOL]     final String[] stringArray2 = new String[] { "1", "2", "3" }; [EOL]     newArray = ArrayUtils.addAll(stringArray1, (String[]) null); [EOL]     assertNotSame(stringArray1, newArray); [EOL]     assertTrue(Arrays.equals(stringArray1, newArray)); [EOL]     assertTrue(Arrays.equals(new String[] { "a", "b", "c" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.addAll(null, stringArray2); [EOL]     assertNotSame(stringArray2, newArray); [EOL]     assertTrue(Arrays.equals(stringArray2, newArray)); [EOL]     assertTrue(Arrays.equals(new String[] { "1", "2", "3" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.addAll(stringArray1, stringArray2); [EOL]     assertTrue(Arrays.equals(new String[] { "a", "b", "c", "1", "2", "3" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.addAll(ArrayUtils.EMPTY_STRING_ARRAY, (String[]) null); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_STRING_ARRAY, newArray)); [EOL]     assertTrue(Arrays.equals(new String[] {}, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.addAll(null, ArrayUtils.EMPTY_STRING_ARRAY); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_STRING_ARRAY, newArray)); [EOL]     assertTrue(Arrays.equals(new String[] {}, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.addAll(ArrayUtils.EMPTY_STRING_ARRAY, ArrayUtils.EMPTY_STRING_ARRAY); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_STRING_ARRAY, newArray)); [EOL]     assertTrue(Arrays.equals(new String[] {}, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     final String[] stringArrayNull = new String[] { null }; [EOL]     newArray = ArrayUtils.addAll(stringArrayNull, stringArrayNull); [EOL]     assertTrue(Arrays.equals(new String[] { null, null }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     assertTrue(Arrays.equals(new boolean[] { true, false, false, true }, ArrayUtils.addAll(new boolean[] { true, false }, new boolean[] { false, true }))); [EOL]     assertTrue(Arrays.equals(new boolean[] { false, true }, ArrayUtils.addAll(null, new boolean[] { false, true }))); [EOL]     assertTrue(Arrays.equals(new boolean[] { true, false }, ArrayUtils.addAll(new boolean[] { true, false }, null))); [EOL]     assertTrue(Arrays.equals(new char[] { 'a', 'b', 'c', 'd' }, ArrayUtils.addAll(new char[] { 'a', 'b' }, new char[] { 'c', 'd' }))); [EOL]     assertTrue(Arrays.equals(new char[] { 'c', 'd' }, ArrayUtils.addAll(null, new char[] { 'c', 'd' }))); [EOL]     assertTrue(Arrays.equals(new char[] { 'a', 'b' }, ArrayUtils.addAll(new char[] { 'a', 'b' }, null))); [EOL]     assertTrue(Arrays.equals(new byte[] { (byte) 0, (byte) 1, (byte) 2, (byte) 3 }, ArrayUtils.addAll(new byte[] { (byte) 0, (byte) 1 }, new byte[] { (byte) 2, (byte) 3 }))); [EOL]     assertTrue(Arrays.equals(new byte[] { (byte) 2, (byte) 3 }, ArrayUtils.addAll(null, new byte[] { (byte) 2, (byte) 3 }))); [EOL]     assertTrue(Arrays.equals(new byte[] { (byte) 0, (byte) 1 }, ArrayUtils.addAll(new byte[] { (byte) 0, (byte) 1 }, null))); [EOL]     assertTrue(Arrays.equals(new short[] { (short) 10, (short) 20, (short) 30, (short) 40 }, ArrayUtils.addAll(new short[] { (short) 10, (short) 20 }, new short[] { (short) 30, (short) 40 }))); [EOL]     assertTrue(Arrays.equals(new short[] { (short) 30, (short) 40 }, ArrayUtils.addAll(null, new short[] { (short) 30, (short) 40 }))); [EOL]     assertTrue(Arrays.equals(new short[] { (short) 10, (short) 20 }, ArrayUtils.addAll(new short[] { (short) 10, (short) 20 }, null))); [EOL]     assertTrue(Arrays.equals(new int[] { 1, 1000, -1000, -1 }, ArrayUtils.addAll(new int[] { 1, 1000 }, new int[] { -1000, -1 }))); [EOL]     assertTrue(Arrays.equals(new int[] { -1000, -1 }, ArrayUtils.addAll(null, new int[] { -1000, -1 }))); [EOL]     assertTrue(Arrays.equals(new int[] { 1, 1000 }, ArrayUtils.addAll(new int[] { 1, 1000 }, null))); [EOL]     assertTrue(Arrays.equals(new long[] { 1L, -1L, 1000L, -1000L }, ArrayUtils.addAll(new long[] { 1L, -1L }, new long[] { 1000L, -1000L }))); [EOL]     assertTrue(Arrays.equals(new long[] { 1000L, -1000L }, ArrayUtils.addAll(null, new long[] { 1000L, -1000L }))); [EOL]     assertTrue(Arrays.equals(new long[] { 1L, -1L }, ArrayUtils.addAll(new long[] { 1L, -1L }, null))); [EOL]     assertTrue(Arrays.equals(new float[] { 10.5f, 10.1f, 1.6f, 0.01f }, ArrayUtils.addAll(new float[] { 10.5f, 10.1f }, new float[] { 1.6f, 0.01f }))); [EOL]     assertTrue(Arrays.equals(new float[] { 1.6f, 0.01f }, ArrayUtils.addAll(null, new float[] { 1.6f, 0.01f }))); [EOL]     assertTrue(Arrays.equals(new float[] { 10.5f, 10.1f }, ArrayUtils.addAll(new float[] { 10.5f, 10.1f }, null))); [EOL]     assertTrue(Arrays.equals(new double[] { Math.PI, -Math.PI, 0, 9.99 }, ArrayUtils.addAll(new double[] { Math.PI, -Math.PI }, new double[] { 0, 9.99 }))); [EOL]     assertTrue(Arrays.equals(new double[] { 0, 9.99 }, ArrayUtils.addAll(null, new double[] { 0, 9.99 }))); [EOL]     assertTrue(Arrays.equals(new double[] { Math.PI, -Math.PI }, ArrayUtils.addAll(new double[] { Math.PI, -Math.PI }, null))); [EOL] }
@Test [EOL] public void testAddObjectArrayToObjectArray() { [EOL]     assertNull(ArrayUtils.addAll((Object[]) null, (Object[]) null)); [EOL]     Object[] newArray; [EOL]     final String[] stringArray1 = new String[] { "a", "b", "c" }; [EOL]     final String[] stringArray2 = new String[] { "1", "2", "3" }; [EOL]     newArray = ArrayUtils.addAll(stringArray1, (String[]) null); [EOL]     assertNotSame(stringArray1, newArray); [EOL]     assertTrue(Arrays.equals(stringArray1, newArray)); [EOL]     assertTrue(Arrays.equals(new String[] { "a", "b", "c" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.addAll(null, stringArray2); [EOL]     assertNotSame(stringArray2, newArray); [EOL]     assertTrue(Arrays.equals(stringArray2, newArray)); [EOL]     assertTrue(Arrays.equals(new String[] { "1", "2", "3" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.addAll(stringArray1, stringArray2); [EOL]     assertTrue(Arrays.equals(new String[] { "a", "b", "c", "1", "2", "3" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.addAll(ArrayUtils.EMPTY_STRING_ARRAY, (String[]) null); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_STRING_ARRAY, newArray)); [EOL]     assertTrue(Arrays.equals(new String[] {}, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.addAll(null, ArrayUtils.EMPTY_STRING_ARRAY); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_STRING_ARRAY, newArray)); [EOL]     assertTrue(Arrays.equals(new String[] {}, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.addAll(ArrayUtils.EMPTY_STRING_ARRAY, ArrayUtils.EMPTY_STRING_ARRAY); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_STRING_ARRAY, newArray)); [EOL]     assertTrue(Arrays.equals(new String[] {}, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     final String[] stringArrayNull = new String[] { null }; [EOL]     newArray = ArrayUtils.addAll(stringArrayNull, stringArrayNull); [EOL]     assertTrue(Arrays.equals(new String[] { null, null }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     assertTrue(Arrays.equals(new boolean[] { true, false, false, true }, ArrayUtils.addAll(new boolean[] { true, false }, new boolean[] { false, true }))); [EOL]     assertTrue(Arrays.equals(new boolean[] { false, true }, ArrayUtils.addAll(null, new boolean[] { false, true }))); [EOL]     assertTrue(Arrays.equals(new boolean[] { true, false }, ArrayUtils.addAll(new boolean[] { true, false }, null))); [EOL]     assertTrue(Arrays.equals(new char[] { 'a', 'b', 'c', 'd' }, ArrayUtils.addAll(new char[] { 'a', 'b' }, new char[] { 'c', 'd' }))); [EOL]     assertTrue(Arrays.equals(new char[] { 'c', 'd' }, ArrayUtils.addAll(null, new char[] { 'c', 'd' }))); [EOL]     assertTrue(Arrays.equals(new char[] { 'a', 'b' }, ArrayUtils.addAll(new char[] { 'a', 'b' }, null))); [EOL]     assertTrue(Arrays.equals(new byte[] { (byte) 0, (byte) 1, (byte) 2, (byte) 3 }, ArrayUtils.addAll(new byte[] { (byte) 0, (byte) 1 }, new byte[] { (byte) 2, (byte) 3 }))); [EOL]     assertTrue(Arrays.equals(new byte[] { (byte) 2, (byte) 3 }, ArrayUtils.addAll(null, new byte[] { (byte) 2, (byte) 3 }))); [EOL]     assertTrue(Arrays.equals(new byte[] { (byte) 0, (byte) 1 }, ArrayUtils.addAll(new byte[] { (byte) 0, (byte) 1 }, null))); [EOL]     assertTrue(Arrays.equals(new short[] { (short) 10, (short) 20, (short) 30, (short) 40 }, ArrayUtils.addAll(new short[] { (short) 10, (short) 20 }, new short[] { (short) 30, (short) 40 }))); [EOL]     assertTrue(Arrays.equals(new short[] { (short) 30, (short) 40 }, ArrayUtils.addAll(null, new short[] { (short) 30, (short) 40 }))); [EOL]     assertTrue(Arrays.equals(new short[] { (short) 10, (short) 20 }, ArrayUtils.addAll(new short[] { (short) 10, (short) 20 }, null))); [EOL]     assertTrue(Arrays.equals(new int[] { 1, 1000, -1000, -1 }, ArrayUtils.addAll(new int[] { 1, 1000 }, new int[] { -1000, -1 }))); [EOL]     assertTrue(Arrays.equals(new int[] { -1000, -1 }, ArrayUtils.addAll(null, new int[] { -1000, -1 }))); [EOL]     assertTrue(Arrays.equals(new int[] { 1, 1000 }, ArrayUtils.addAll(new int[] { 1, 1000 }, null))); [EOL]     assertTrue(Arrays.equals(new long[] { 1L, -1L, 1000L, -1000L }, ArrayUtils.addAll(new long[] { 1L, -1L }, new long[] { 1000L, -1000L }))); [EOL]     assertTrue(Arrays.equals(new long[] { 1000L, -1000L }, ArrayUtils.addAll(null, new long[] { 1000L, -1000L }))); [EOL]     assertTrue(Arrays.equals(new long[] { 1L, -1L }, ArrayUtils.addAll(new long[] { 1L, -1L }, null))); [EOL]     assertTrue(Arrays.equals(new float[] { 10.5f, 10.1f, 1.6f, 0.01f }, ArrayUtils.addAll(new float[] { 10.5f, 10.1f }, new float[] { 1.6f, 0.01f }))); [EOL]     assertTrue(Arrays.equals(new float[] { 1.6f, 0.01f }, ArrayUtils.addAll(null, new float[] { 1.6f, 0.01f }))); [EOL]     assertTrue(Arrays.equals(new float[] { 10.5f, 10.1f }, ArrayUtils.addAll(new float[] { 10.5f, 10.1f }, null))); [EOL]     assertTrue(Arrays.equals(new double[] { Math.PI, -Math.PI, 0, 9.99 }, ArrayUtils.addAll(new double[] { Math.PI, -Math.PI }, new double[] { 0, 9.99 }))); [EOL]     assertTrue(Arrays.equals(new double[] { 0, 9.99 }, ArrayUtils.addAll(null, new double[] { 0, 9.99 }))); [EOL]     assertTrue(Arrays.equals(new double[] { Math.PI, -Math.PI }, ArrayUtils.addAll(new double[] { Math.PI, -Math.PI }, null))); [EOL] }
@Test [EOL] public void testAddObjectArrayToObjectArray() { [EOL]     assertNull(ArrayUtils.addAll((Object[]) null, (Object[]) null)); [EOL]     Object[] newArray; [EOL]     final String[] stringArray1 = new String[] { "a", "b", "c" }; [EOL]     final String[] stringArray2 = new String[] { "1", "2", "3" }; [EOL]     newArray = ArrayUtils.addAll(stringArray1, (String[]) null); [EOL]     assertNotSame(stringArray1, newArray); [EOL]     assertTrue(Arrays.equals(stringArray1, newArray)); [EOL]     assertTrue(Arrays.equals(new String[] { "a", "b", "c" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.addAll(null, stringArray2); [EOL]     assertNotSame(stringArray2, newArray); [EOL]     assertTrue(Arrays.equals(stringArray2, newArray)); [EOL]     assertTrue(Arrays.equals(new String[] { "1", "2", "3" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.addAll(stringArray1, stringArray2); [EOL]     assertTrue(Arrays.equals(new String[] { "a", "b", "c", "1", "2", "3" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.addAll(ArrayUtils.EMPTY_STRING_ARRAY, (String[]) null); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_STRING_ARRAY, newArray)); [EOL]     assertTrue(Arrays.equals(new String[] {}, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.addAll(null, ArrayUtils.EMPTY_STRING_ARRAY); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_STRING_ARRAY, newArray)); [EOL]     assertTrue(Arrays.equals(new String[] {}, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.addAll(ArrayUtils.EMPTY_STRING_ARRAY, ArrayUtils.EMPTY_STRING_ARRAY); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_STRING_ARRAY, newArray)); [EOL]     assertTrue(Arrays.equals(new String[] {}, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     final String[] stringArrayNull = new String[] { null }; [EOL]     newArray = ArrayUtils.addAll(stringArrayNull, stringArrayNull); [EOL]     assertTrue(Arrays.equals(new String[] { null, null }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     assertTrue(Arrays.equals(new boolean[] { true, false, false, true }, ArrayUtils.addAll(new boolean[] { true, false }, new boolean[] { false, true }))); [EOL]     assertTrue(Arrays.equals(new boolean[] { false, true }, ArrayUtils.addAll(null, new boolean[] { false, true }))); [EOL]     assertTrue(Arrays.equals(new boolean[] { true, false }, ArrayUtils.addAll(new boolean[] { true, false }, null))); [EOL]     assertTrue(Arrays.equals(new char[] { 'a', 'b', 'c', 'd' }, ArrayUtils.addAll(new char[] { 'a', 'b' }, new char[] { 'c', 'd' }))); [EOL]     assertTrue(Arrays.equals(new char[] { 'c', 'd' }, ArrayUtils.addAll(null, new char[] { 'c', 'd' }))); [EOL]     assertTrue(Arrays.equals(new char[] { 'a', 'b' }, ArrayUtils.addAll(new char[] { 'a', 'b' }, null))); [EOL]     assertTrue(Arrays.equals(new byte[] { (byte) 0, (byte) 1, (byte) 2, (byte) 3 }, ArrayUtils.addAll(new byte[] { (byte) 0, (byte) 1 }, new byte[] { (byte) 2, (byte) 3 }))); [EOL]     assertTrue(Arrays.equals(new byte[] { (byte) 2, (byte) 3 }, ArrayUtils.addAll(null, new byte[] { (byte) 2, (byte) 3 }))); [EOL]     assertTrue(Arrays.equals(new byte[] { (byte) 0, (byte) 1 }, ArrayUtils.addAll(new byte[] { (byte) 0, (byte) 1 }, null))); [EOL]     assertTrue(Arrays.equals(new short[] { (short) 10, (short) 20, (short) 30, (short) 40 }, ArrayUtils.addAll(new short[] { (short) 10, (short) 20 }, new short[] { (short) 30, (short) 40 }))); [EOL]     assertTrue(Arrays.equals(new short[] { (short) 30, (short) 40 }, ArrayUtils.addAll(null, new short[] { (short) 30, (short) 40 }))); [EOL]     assertTrue(Arrays.equals(new short[] { (short) 10, (short) 20 }, ArrayUtils.addAll(new short[] { (short) 10, (short) 20 }, null))); [EOL]     assertTrue(Arrays.equals(new int[] { 1, 1000, -1000, -1 }, ArrayUtils.addAll(new int[] { 1, 1000 }, new int[] { -1000, -1 }))); [EOL]     assertTrue(Arrays.equals(new int[] { -1000, -1 }, ArrayUtils.addAll(null, new int[] { -1000, -1 }))); [EOL]     assertTrue(Arrays.equals(new int[] { 1, 1000 }, ArrayUtils.addAll(new int[] { 1, 1000 }, null))); [EOL]     assertTrue(Arrays.equals(new long[] { 1L, -1L, 1000L, -1000L }, ArrayUtils.addAll(new long[] { 1L, -1L }, new long[] { 1000L, -1000L }))); [EOL]     assertTrue(Arrays.equals(new long[] { 1000L, -1000L }, ArrayUtils.addAll(null, new long[] { 1000L, -1000L }))); [EOL]     assertTrue(Arrays.equals(new long[] { 1L, -1L }, ArrayUtils.addAll(new long[] { 1L, -1L }, null))); [EOL]     assertTrue(Arrays.equals(new float[] { 10.5f, 10.1f, 1.6f, 0.01f }, ArrayUtils.addAll(new float[] { 10.5f, 10.1f }, new float[] { 1.6f, 0.01f }))); [EOL]     assertTrue(Arrays.equals(new float[] { 1.6f, 0.01f }, ArrayUtils.addAll(null, new float[] { 1.6f, 0.01f }))); [EOL]     assertTrue(Arrays.equals(new float[] { 10.5f, 10.1f }, ArrayUtils.addAll(new float[] { 10.5f, 10.1f }, null))); [EOL]     assertTrue(Arrays.equals(new double[] { Math.PI, -Math.PI, 0, 9.99 }, ArrayUtils.addAll(new double[] { Math.PI, -Math.PI }, new double[] { 0, 9.99 }))); [EOL]     assertTrue(Arrays.equals(new double[] { 0, 9.99 }, ArrayUtils.addAll(null, new double[] { 0, 9.99 }))); [EOL]     assertTrue(Arrays.equals(new double[] { Math.PI, -Math.PI }, ArrayUtils.addAll(new double[] { Math.PI, -Math.PI }, null))); [EOL] }
@Test [EOL] public void testAddObjectArrayToObjectArray() { [EOL]     assertNull(ArrayUtils.addAll((Object[]) null, (Object[]) null)); [EOL]     Object[] newArray; [EOL]     final String[] stringArray1 = new String[] { "a", "b", "c" }; [EOL]     final String[] stringArray2 = new String[] { "1", "2", "3" }; [EOL]     newArray = ArrayUtils.addAll(stringArray1, (String[]) null); [EOL]     assertNotSame(stringArray1, newArray); [EOL]     assertTrue(Arrays.equals(stringArray1, newArray)); [EOL]     assertTrue(Arrays.equals(new String[] { "a", "b", "c" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.addAll(null, stringArray2); [EOL]     assertNotSame(stringArray2, newArray); [EOL]     assertTrue(Arrays.equals(stringArray2, newArray)); [EOL]     assertTrue(Arrays.equals(new String[] { "1", "2", "3" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.addAll(stringArray1, stringArray2); [EOL]     assertTrue(Arrays.equals(new String[] { "a", "b", "c", "1", "2", "3" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.addAll(ArrayUtils.EMPTY_STRING_ARRAY, (String[]) null); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_STRING_ARRAY, newArray)); [EOL]     assertTrue(Arrays.equals(new String[] {}, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.addAll(null, ArrayUtils.EMPTY_STRING_ARRAY); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_STRING_ARRAY, newArray)); [EOL]     assertTrue(Arrays.equals(new String[] {}, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.addAll(ArrayUtils.EMPTY_STRING_ARRAY, ArrayUtils.EMPTY_STRING_ARRAY); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_STRING_ARRAY, newArray)); [EOL]     assertTrue(Arrays.equals(new String[] {}, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     final String[] stringArrayNull = new String[] { null }; [EOL]     newArray = ArrayUtils.addAll(stringArrayNull, stringArrayNull); [EOL]     assertTrue(Arrays.equals(new String[] { null, null }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     assertTrue(Arrays.equals(new boolean[] { true, false, false, true }, ArrayUtils.addAll(new boolean[] { true, false }, new boolean[] { false, true }))); [EOL]     assertTrue(Arrays.equals(new boolean[] { false, true }, ArrayUtils.addAll(null, new boolean[] { false, true }))); [EOL]     assertTrue(Arrays.equals(new boolean[] { true, false }, ArrayUtils.addAll(new boolean[] { true, false }, null))); [EOL]     assertTrue(Arrays.equals(new char[] { 'a', 'b', 'c', 'd' }, ArrayUtils.addAll(new char[] { 'a', 'b' }, new char[] { 'c', 'd' }))); [EOL]     assertTrue(Arrays.equals(new char[] { 'c', 'd' }, ArrayUtils.addAll(null, new char[] { 'c', 'd' }))); [EOL]     assertTrue(Arrays.equals(new char[] { 'a', 'b' }, ArrayUtils.addAll(new char[] { 'a', 'b' }, null))); [EOL]     assertTrue(Arrays.equals(new byte[] { (byte) 0, (byte) 1, (byte) 2, (byte) 3 }, ArrayUtils.addAll(new byte[] { (byte) 0, (byte) 1 }, new byte[] { (byte) 2, (byte) 3 }))); [EOL]     assertTrue(Arrays.equals(new byte[] { (byte) 2, (byte) 3 }, ArrayUtils.addAll(null, new byte[] { (byte) 2, (byte) 3 }))); [EOL]     assertTrue(Arrays.equals(new byte[] { (byte) 0, (byte) 1 }, ArrayUtils.addAll(new byte[] { (byte) 0, (byte) 1 }, null))); [EOL]     assertTrue(Arrays.equals(new short[] { (short) 10, (short) 20, (short) 30, (short) 40 }, ArrayUtils.addAll(new short[] { (short) 10, (short) 20 }, new short[] { (short) 30, (short) 40 }))); [EOL]     assertTrue(Arrays.equals(new short[] { (short) 30, (short) 40 }, ArrayUtils.addAll(null, new short[] { (short) 30, (short) 40 }))); [EOL]     assertTrue(Arrays.equals(new short[] { (short) 10, (short) 20 }, ArrayUtils.addAll(new short[] { (short) 10, (short) 20 }, null))); [EOL]     assertTrue(Arrays.equals(new int[] { 1, 1000, -1000, -1 }, ArrayUtils.addAll(new int[] { 1, 1000 }, new int[] { -1000, -1 }))); [EOL]     assertTrue(Arrays.equals(new int[] { -1000, -1 }, ArrayUtils.addAll(null, new int[] { -1000, -1 }))); [EOL]     assertTrue(Arrays.equals(new int[] { 1, 1000 }, ArrayUtils.addAll(new int[] { 1, 1000 }, null))); [EOL]     assertTrue(Arrays.equals(new long[] { 1L, -1L, 1000L, -1000L }, ArrayUtils.addAll(new long[] { 1L, -1L }, new long[] { 1000L, -1000L }))); [EOL]     assertTrue(Arrays.equals(new long[] { 1000L, -1000L }, ArrayUtils.addAll(null, new long[] { 1000L, -1000L }))); [EOL]     assertTrue(Arrays.equals(new long[] { 1L, -1L }, ArrayUtils.addAll(new long[] { 1L, -1L }, null))); [EOL]     assertTrue(Arrays.equals(new float[] { 10.5f, 10.1f, 1.6f, 0.01f }, ArrayUtils.addAll(new float[] { 10.5f, 10.1f }, new float[] { 1.6f, 0.01f }))); [EOL]     assertTrue(Arrays.equals(new float[] { 1.6f, 0.01f }, ArrayUtils.addAll(null, new float[] { 1.6f, 0.01f }))); [EOL]     assertTrue(Arrays.equals(new float[] { 10.5f, 10.1f }, ArrayUtils.addAll(new float[] { 10.5f, 10.1f }, null))); [EOL]     assertTrue(Arrays.equals(new double[] { Math.PI, -Math.PI, 0, 9.99 }, ArrayUtils.addAll(new double[] { Math.PI, -Math.PI }, new double[] { 0, 9.99 }))); [EOL]     assertTrue(Arrays.equals(new double[] { 0, 9.99 }, ArrayUtils.addAll(null, new double[] { 0, 9.99 }))); [EOL]     assertTrue(Arrays.equals(new double[] { Math.PI, -Math.PI }, ArrayUtils.addAll(new double[] { Math.PI, -Math.PI }, null))); [EOL] }
@Test [EOL] public void testAddObjectArrayToObjectArray() { [EOL]     assertNull(ArrayUtils.addAll((Object[]) null, (Object[]) null)); [EOL]     Object[] newArray; [EOL]     final String[] stringArray1 = new String[] { "a", "b", "c" }; [EOL]     final String[] stringArray2 = new String[] { "1", "2", "3" }; [EOL]     newArray = ArrayUtils.addAll(stringArray1, (String[]) null); [EOL]     assertNotSame(stringArray1, newArray); [EOL]     assertTrue(Arrays.equals(stringArray1, newArray)); [EOL]     assertTrue(Arrays.equals(new String[] { "a", "b", "c" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.addAll(null, stringArray2); [EOL]     assertNotSame(stringArray2, newArray); [EOL]     assertTrue(Arrays.equals(stringArray2, newArray)); [EOL]     assertTrue(Arrays.equals(new String[] { "1", "2", "3" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.addAll(stringArray1, stringArray2); [EOL]     assertTrue(Arrays.equals(new String[] { "a", "b", "c", "1", "2", "3" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.addAll(ArrayUtils.EMPTY_STRING_ARRAY, (String[]) null); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_STRING_ARRAY, newArray)); [EOL]     assertTrue(Arrays.equals(new String[] {}, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.addAll(null, ArrayUtils.EMPTY_STRING_ARRAY); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_STRING_ARRAY, newArray)); [EOL]     assertTrue(Arrays.equals(new String[] {}, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.addAll(ArrayUtils.EMPTY_STRING_ARRAY, ArrayUtils.EMPTY_STRING_ARRAY); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_STRING_ARRAY, newArray)); [EOL]     assertTrue(Arrays.equals(new String[] {}, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     final String[] stringArrayNull = new String[] { null }; [EOL]     newArray = ArrayUtils.addAll(stringArrayNull, stringArrayNull); [EOL]     assertTrue(Arrays.equals(new String[] { null, null }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     assertTrue(Arrays.equals(new boolean[] { true, false, false, true }, ArrayUtils.addAll(new boolean[] { true, false }, new boolean[] { false, true }))); [EOL]     assertTrue(Arrays.equals(new boolean[] { false, true }, ArrayUtils.addAll(null, new boolean[] { false, true }))); [EOL]     assertTrue(Arrays.equals(new boolean[] { true, false }, ArrayUtils.addAll(new boolean[] { true, false }, null))); [EOL]     assertTrue(Arrays.equals(new char[] { 'a', 'b', 'c', 'd' }, ArrayUtils.addAll(new char[] { 'a', 'b' }, new char[] { 'c', 'd' }))); [EOL]     assertTrue(Arrays.equals(new char[] { 'c', 'd' }, ArrayUtils.addAll(null, new char[] { 'c', 'd' }))); [EOL]     assertTrue(Arrays.equals(new char[] { 'a', 'b' }, ArrayUtils.addAll(new char[] { 'a', 'b' }, null))); [EOL]     assertTrue(Arrays.equals(new byte[] { (byte) 0, (byte) 1, (byte) 2, (byte) 3 }, ArrayUtils.addAll(new byte[] { (byte) 0, (byte) 1 }, new byte[] { (byte) 2, (byte) 3 }))); [EOL]     assertTrue(Arrays.equals(new byte[] { (byte) 2, (byte) 3 }, ArrayUtils.addAll(null, new byte[] { (byte) 2, (byte) 3 }))); [EOL]     assertTrue(Arrays.equals(new byte[] { (byte) 0, (byte) 1 }, ArrayUtils.addAll(new byte[] { (byte) 0, (byte) 1 }, null))); [EOL]     assertTrue(Arrays.equals(new short[] { (short) 10, (short) 20, (short) 30, (short) 40 }, ArrayUtils.addAll(new short[] { (short) 10, (short) 20 }, new short[] { (short) 30, (short) 40 }))); [EOL]     assertTrue(Arrays.equals(new short[] { (short) 30, (short) 40 }, ArrayUtils.addAll(null, new short[] { (short) 30, (short) 40 }))); [EOL]     assertTrue(Arrays.equals(new short[] { (short) 10, (short) 20 }, ArrayUtils.addAll(new short[] { (short) 10, (short) 20 }, null))); [EOL]     assertTrue(Arrays.equals(new int[] { 1, 1000, -1000, -1 }, ArrayUtils.addAll(new int[] { 1, 1000 }, new int[] { -1000, -1 }))); [EOL]     assertTrue(Arrays.equals(new int[] { -1000, -1 }, ArrayUtils.addAll(null, new int[] { -1000, -1 }))); [EOL]     assertTrue(Arrays.equals(new int[] { 1, 1000 }, ArrayUtils.addAll(new int[] { 1, 1000 }, null))); [EOL]     assertTrue(Arrays.equals(new long[] { 1L, -1L, 1000L, -1000L }, ArrayUtils.addAll(new long[] { 1L, -1L }, new long[] { 1000L, -1000L }))); [EOL]     assertTrue(Arrays.equals(new long[] { 1000L, -1000L }, ArrayUtils.addAll(null, new long[] { 1000L, -1000L }))); [EOL]     assertTrue(Arrays.equals(new long[] { 1L, -1L }, ArrayUtils.addAll(new long[] { 1L, -1L }, null))); [EOL]     assertTrue(Arrays.equals(new float[] { 10.5f, 10.1f, 1.6f, 0.01f }, ArrayUtils.addAll(new float[] { 10.5f, 10.1f }, new float[] { 1.6f, 0.01f }))); [EOL]     assertTrue(Arrays.equals(new float[] { 1.6f, 0.01f }, ArrayUtils.addAll(null, new float[] { 1.6f, 0.01f }))); [EOL]     assertTrue(Arrays.equals(new float[] { 10.5f, 10.1f }, ArrayUtils.addAll(new float[] { 10.5f, 10.1f }, null))); [EOL]     assertTrue(Arrays.equals(new double[] { Math.PI, -Math.PI, 0, 9.99 }, ArrayUtils.addAll(new double[] { Math.PI, -Math.PI }, new double[] { 0, 9.99 }))); [EOL]     assertTrue(Arrays.equals(new double[] { 0, 9.99 }, ArrayUtils.addAll(null, new double[] { 0, 9.99 }))); [EOL]     assertTrue(Arrays.equals(new double[] { Math.PI, -Math.PI }, ArrayUtils.addAll(new double[] { Math.PI, -Math.PI }, null))); [EOL] }
@Test [EOL] public void testAddObjectArrayToObjectArray() { [EOL]     assertNull(ArrayUtils.addAll((Object[]) null, (Object[]) null)); [EOL]     Object[] newArray; [EOL]     final String[] stringArray1 = new String[] { "a", "b", "c" }; [EOL]     final String[] stringArray2 = new String[] { "1", "2", "3" }; [EOL]     newArray = ArrayUtils.addAll(stringArray1, (String[]) null); [EOL]     assertNotSame(stringArray1, newArray); [EOL]     assertTrue(Arrays.equals(stringArray1, newArray)); [EOL]     assertTrue(Arrays.equals(new String[] { "a", "b", "c" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.addAll(null, stringArray2); [EOL]     assertNotSame(stringArray2, newArray); [EOL]     assertTrue(Arrays.equals(stringArray2, newArray)); [EOL]     assertTrue(Arrays.equals(new String[] { "1", "2", "3" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.addAll(stringArray1, stringArray2); [EOL]     assertTrue(Arrays.equals(new String[] { "a", "b", "c", "1", "2", "3" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.addAll(ArrayUtils.EMPTY_STRING_ARRAY, (String[]) null); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_STRING_ARRAY, newArray)); [EOL]     assertTrue(Arrays.equals(new String[] {}, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.addAll(null, ArrayUtils.EMPTY_STRING_ARRAY); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_STRING_ARRAY, newArray)); [EOL]     assertTrue(Arrays.equals(new String[] {}, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.addAll(ArrayUtils.EMPTY_STRING_ARRAY, ArrayUtils.EMPTY_STRING_ARRAY); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_STRING_ARRAY, newArray)); [EOL]     assertTrue(Arrays.equals(new String[] {}, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     final String[] stringArrayNull = new String[] { null }; [EOL]     newArray = ArrayUtils.addAll(stringArrayNull, stringArrayNull); [EOL]     assertTrue(Arrays.equals(new String[] { null, null }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     assertTrue(Arrays.equals(new boolean[] { true, false, false, true }, ArrayUtils.addAll(new boolean[] { true, false }, new boolean[] { false, true }))); [EOL]     assertTrue(Arrays.equals(new boolean[] { false, true }, ArrayUtils.addAll(null, new boolean[] { false, true }))); [EOL]     assertTrue(Arrays.equals(new boolean[] { true, false }, ArrayUtils.addAll(new boolean[] { true, false }, null))); [EOL]     assertTrue(Arrays.equals(new char[] { 'a', 'b', 'c', 'd' }, ArrayUtils.addAll(new char[] { 'a', 'b' }, new char[] { 'c', 'd' }))); [EOL]     assertTrue(Arrays.equals(new char[] { 'c', 'd' }, ArrayUtils.addAll(null, new char[] { 'c', 'd' }))); [EOL]     assertTrue(Arrays.equals(new char[] { 'a', 'b' }, ArrayUtils.addAll(new char[] { 'a', 'b' }, null))); [EOL]     assertTrue(Arrays.equals(new byte[] { (byte) 0, (byte) 1, (byte) 2, (byte) 3 }, ArrayUtils.addAll(new byte[] { (byte) 0, (byte) 1 }, new byte[] { (byte) 2, (byte) 3 }))); [EOL]     assertTrue(Arrays.equals(new byte[] { (byte) 2, (byte) 3 }, ArrayUtils.addAll(null, new byte[] { (byte) 2, (byte) 3 }))); [EOL]     assertTrue(Arrays.equals(new byte[] { (byte) 0, (byte) 1 }, ArrayUtils.addAll(new byte[] { (byte) 0, (byte) 1 }, null))); [EOL]     assertTrue(Arrays.equals(new short[] { (short) 10, (short) 20, (short) 30, (short) 40 }, ArrayUtils.addAll(new short[] { (short) 10, (short) 20 }, new short[] { (short) 30, (short) 40 }))); [EOL]     assertTrue(Arrays.equals(new short[] { (short) 30, (short) 40 }, ArrayUtils.addAll(null, new short[] { (short) 30, (short) 40 }))); [EOL]     assertTrue(Arrays.equals(new short[] { (short) 10, (short) 20 }, ArrayUtils.addAll(new short[] { (short) 10, (short) 20 }, null))); [EOL]     assertTrue(Arrays.equals(new int[] { 1, 1000, -1000, -1 }, ArrayUtils.addAll(new int[] { 1, 1000 }, new int[] { -1000, -1 }))); [EOL]     assertTrue(Arrays.equals(new int[] { -1000, -1 }, ArrayUtils.addAll(null, new int[] { -1000, -1 }))); [EOL]     assertTrue(Arrays.equals(new int[] { 1, 1000 }, ArrayUtils.addAll(new int[] { 1, 1000 }, null))); [EOL]     assertTrue(Arrays.equals(new long[] { 1L, -1L, 1000L, -1000L }, ArrayUtils.addAll(new long[] { 1L, -1L }, new long[] { 1000L, -1000L }))); [EOL]     assertTrue(Arrays.equals(new long[] { 1000L, -1000L }, ArrayUtils.addAll(null, new long[] { 1000L, -1000L }))); [EOL]     assertTrue(Arrays.equals(new long[] { 1L, -1L }, ArrayUtils.addAll(new long[] { 1L, -1L }, null))); [EOL]     assertTrue(Arrays.equals(new float[] { 10.5f, 10.1f, 1.6f, 0.01f }, ArrayUtils.addAll(new float[] { 10.5f, 10.1f }, new float[] { 1.6f, 0.01f }))); [EOL]     assertTrue(Arrays.equals(new float[] { 1.6f, 0.01f }, ArrayUtils.addAll(null, new float[] { 1.6f, 0.01f }))); [EOL]     assertTrue(Arrays.equals(new float[] { 10.5f, 10.1f }, ArrayUtils.addAll(new float[] { 10.5f, 10.1f }, null))); [EOL]     assertTrue(Arrays.equals(new double[] { Math.PI, -Math.PI, 0, 9.99 }, ArrayUtils.addAll(new double[] { Math.PI, -Math.PI }, new double[] { 0, 9.99 }))); [EOL]     assertTrue(Arrays.equals(new double[] { 0, 9.99 }, ArrayUtils.addAll(null, new double[] { 0, 9.99 }))); [EOL]     assertTrue(Arrays.equals(new double[] { Math.PI, -Math.PI }, ArrayUtils.addAll(new double[] { Math.PI, -Math.PI }, null))); [EOL] }
@Test [EOL] public void testAddObjectArrayToObjectArray() { [EOL]     assertNull(ArrayUtils.addAll((Object[]) null, (Object[]) null)); [EOL]     Object[] newArray; [EOL]     final String[] stringArray1 = new String[] { "a", "b", "c" }; [EOL]     final String[] stringArray2 = new String[] { "1", "2", "3" }; [EOL]     newArray = ArrayUtils.addAll(stringArray1, (String[]) null); [EOL]     assertNotSame(stringArray1, newArray); [EOL]     assertTrue(Arrays.equals(stringArray1, newArray)); [EOL]     assertTrue(Arrays.equals(new String[] { "a", "b", "c" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.addAll(null, stringArray2); [EOL]     assertNotSame(stringArray2, newArray); [EOL]     assertTrue(Arrays.equals(stringArray2, newArray)); [EOL]     assertTrue(Arrays.equals(new String[] { "1", "2", "3" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.addAll(stringArray1, stringArray2); [EOL]     assertTrue(Arrays.equals(new String[] { "a", "b", "c", "1", "2", "3" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.addAll(ArrayUtils.EMPTY_STRING_ARRAY, (String[]) null); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_STRING_ARRAY, newArray)); [EOL]     assertTrue(Arrays.equals(new String[] {}, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.addAll(null, ArrayUtils.EMPTY_STRING_ARRAY); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_STRING_ARRAY, newArray)); [EOL]     assertTrue(Arrays.equals(new String[] {}, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.addAll(ArrayUtils.EMPTY_STRING_ARRAY, ArrayUtils.EMPTY_STRING_ARRAY); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_STRING_ARRAY, newArray)); [EOL]     assertTrue(Arrays.equals(new String[] {}, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     final String[] stringArrayNull = new String[] { null }; [EOL]     newArray = ArrayUtils.addAll(stringArrayNull, stringArrayNull); [EOL]     assertTrue(Arrays.equals(new String[] { null, null }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     assertTrue(Arrays.equals(new boolean[] { true, false, false, true }, ArrayUtils.addAll(new boolean[] { true, false }, new boolean[] { false, true }))); [EOL]     assertTrue(Arrays.equals(new boolean[] { false, true }, ArrayUtils.addAll(null, new boolean[] { false, true }))); [EOL]     assertTrue(Arrays.equals(new boolean[] { true, false }, ArrayUtils.addAll(new boolean[] { true, false }, null))); [EOL]     assertTrue(Arrays.equals(new char[] { 'a', 'b', 'c', 'd' }, ArrayUtils.addAll(new char[] { 'a', 'b' }, new char[] { 'c', 'd' }))); [EOL]     assertTrue(Arrays.equals(new char[] { 'c', 'd' }, ArrayUtils.addAll(null, new char[] { 'c', 'd' }))); [EOL]     assertTrue(Arrays.equals(new char[] { 'a', 'b' }, ArrayUtils.addAll(new char[] { 'a', 'b' }, null))); [EOL]     assertTrue(Arrays.equals(new byte[] { (byte) 0, (byte) 1, (byte) 2, (byte) 3 }, ArrayUtils.addAll(new byte[] { (byte) 0, (byte) 1 }, new byte[] { (byte) 2, (byte) 3 }))); [EOL]     assertTrue(Arrays.equals(new byte[] { (byte) 2, (byte) 3 }, ArrayUtils.addAll(null, new byte[] { (byte) 2, (byte) 3 }))); [EOL]     assertTrue(Arrays.equals(new byte[] { (byte) 0, (byte) 1 }, ArrayUtils.addAll(new byte[] { (byte) 0, (byte) 1 }, null))); [EOL]     assertTrue(Arrays.equals(new short[] { (short) 10, (short) 20, (short) 30, (short) 40 }, ArrayUtils.addAll(new short[] { (short) 10, (short) 20 }, new short[] { (short) 30, (short) 40 }))); [EOL]     assertTrue(Arrays.equals(new short[] { (short) 30, (short) 40 }, ArrayUtils.addAll(null, new short[] { (short) 30, (short) 40 }))); [EOL]     assertTrue(Arrays.equals(new short[] { (short) 10, (short) 20 }, ArrayUtils.addAll(new short[] { (short) 10, (short) 20 }, null))); [EOL]     assertTrue(Arrays.equals(new int[] { 1, 1000, -1000, -1 }, ArrayUtils.addAll(new int[] { 1, 1000 }, new int[] { -1000, -1 }))); [EOL]     assertTrue(Arrays.equals(new int[] { -1000, -1 }, ArrayUtils.addAll(null, new int[] { -1000, -1 }))); [EOL]     assertTrue(Arrays.equals(new int[] { 1, 1000 }, ArrayUtils.addAll(new int[] { 1, 1000 }, null))); [EOL]     assertTrue(Arrays.equals(new long[] { 1L, -1L, 1000L, -1000L }, ArrayUtils.addAll(new long[] { 1L, -1L }, new long[] { 1000L, -1000L }))); [EOL]     assertTrue(Arrays.equals(new long[] { 1000L, -1000L }, ArrayUtils.addAll(null, new long[] { 1000L, -1000L }))); [EOL]     assertTrue(Arrays.equals(new long[] { 1L, -1L }, ArrayUtils.addAll(new long[] { 1L, -1L }, null))); [EOL]     assertTrue(Arrays.equals(new float[] { 10.5f, 10.1f, 1.6f, 0.01f }, ArrayUtils.addAll(new float[] { 10.5f, 10.1f }, new float[] { 1.6f, 0.01f }))); [EOL]     assertTrue(Arrays.equals(new float[] { 1.6f, 0.01f }, ArrayUtils.addAll(null, new float[] { 1.6f, 0.01f }))); [EOL]     assertTrue(Arrays.equals(new float[] { 10.5f, 10.1f }, ArrayUtils.addAll(new float[] { 10.5f, 10.1f }, null))); [EOL]     assertTrue(Arrays.equals(new double[] { Math.PI, -Math.PI, 0, 9.99 }, ArrayUtils.addAll(new double[] { Math.PI, -Math.PI }, new double[] { 0, 9.99 }))); [EOL]     assertTrue(Arrays.equals(new double[] { 0, 9.99 }, ArrayUtils.addAll(null, new double[] { 0, 9.99 }))); [EOL]     assertTrue(Arrays.equals(new double[] { Math.PI, -Math.PI }, ArrayUtils.addAll(new double[] { Math.PI, -Math.PI }, null))); [EOL] }
@Test [EOL] public void testAddObjectArrayToObjectArray() { [EOL]     assertNull(ArrayUtils.addAll((Object[]) null, (Object[]) null)); [EOL]     Object[] newArray; [EOL]     final String[] stringArray1 = new String[] { "a", "b", "c" }; [EOL]     final String[] stringArray2 = new String[] { "1", "2", "3" }; [EOL]     newArray = ArrayUtils.addAll(stringArray1, (String[]) null); [EOL]     assertNotSame(stringArray1, newArray); [EOL]     assertTrue(Arrays.equals(stringArray1, newArray)); [EOL]     assertTrue(Arrays.equals(new String[] { "a", "b", "c" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.addAll(null, stringArray2); [EOL]     assertNotSame(stringArray2, newArray); [EOL]     assertTrue(Arrays.equals(stringArray2, newArray)); [EOL]     assertTrue(Arrays.equals(new String[] { "1", "2", "3" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.addAll(stringArray1, stringArray2); [EOL]     assertTrue(Arrays.equals(new String[] { "a", "b", "c", "1", "2", "3" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.addAll(ArrayUtils.EMPTY_STRING_ARRAY, (String[]) null); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_STRING_ARRAY, newArray)); [EOL]     assertTrue(Arrays.equals(new String[] {}, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.addAll(null, ArrayUtils.EMPTY_STRING_ARRAY); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_STRING_ARRAY, newArray)); [EOL]     assertTrue(Arrays.equals(new String[] {}, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.addAll(ArrayUtils.EMPTY_STRING_ARRAY, ArrayUtils.EMPTY_STRING_ARRAY); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_STRING_ARRAY, newArray)); [EOL]     assertTrue(Arrays.equals(new String[] {}, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     final String[] stringArrayNull = new String[] { null }; [EOL]     newArray = ArrayUtils.addAll(stringArrayNull, stringArrayNull); [EOL]     assertTrue(Arrays.equals(new String[] { null, null }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     assertTrue(Arrays.equals(new boolean[] { true, false, false, true }, ArrayUtils.addAll(new boolean[] { true, false }, new boolean[] { false, true }))); [EOL]     assertTrue(Arrays.equals(new boolean[] { false, true }, ArrayUtils.addAll(null, new boolean[] { false, true }))); [EOL]     assertTrue(Arrays.equals(new boolean[] { true, false }, ArrayUtils.addAll(new boolean[] { true, false }, null))); [EOL]     assertTrue(Arrays.equals(new char[] { 'a', 'b', 'c', 'd' }, ArrayUtils.addAll(new char[] { 'a', 'b' }, new char[] { 'c', 'd' }))); [EOL]     assertTrue(Arrays.equals(new char[] { 'c', 'd' }, ArrayUtils.addAll(null, new char[] { 'c', 'd' }))); [EOL]     assertTrue(Arrays.equals(new char[] { 'a', 'b' }, ArrayUtils.addAll(new char[] { 'a', 'b' }, null))); [EOL]     assertTrue(Arrays.equals(new byte[] { (byte) 0, (byte) 1, (byte) 2, (byte) 3 }, ArrayUtils.addAll(new byte[] { (byte) 0, (byte) 1 }, new byte[] { (byte) 2, (byte) 3 }))); [EOL]     assertTrue(Arrays.equals(new byte[] { (byte) 2, (byte) 3 }, ArrayUtils.addAll(null, new byte[] { (byte) 2, (byte) 3 }))); [EOL]     assertTrue(Arrays.equals(new byte[] { (byte) 0, (byte) 1 }, ArrayUtils.addAll(new byte[] { (byte) 0, (byte) 1 }, null))); [EOL]     assertTrue(Arrays.equals(new short[] { (short) 10, (short) 20, (short) 30, (short) 40 }, ArrayUtils.addAll(new short[] { (short) 10, (short) 20 }, new short[] { (short) 30, (short) 40 }))); [EOL]     assertTrue(Arrays.equals(new short[] { (short) 30, (short) 40 }, ArrayUtils.addAll(null, new short[] { (short) 30, (short) 40 }))); [EOL]     assertTrue(Arrays.equals(new short[] { (short) 10, (short) 20 }, ArrayUtils.addAll(new short[] { (short) 10, (short) 20 }, null))); [EOL]     assertTrue(Arrays.equals(new int[] { 1, 1000, -1000, -1 }, ArrayUtils.addAll(new int[] { 1, 1000 }, new int[] { -1000, -1 }))); [EOL]     assertTrue(Arrays.equals(new int[] { -1000, -1 }, ArrayUtils.addAll(null, new int[] { -1000, -1 }))); [EOL]     assertTrue(Arrays.equals(new int[] { 1, 1000 }, ArrayUtils.addAll(new int[] { 1, 1000 }, null))); [EOL]     assertTrue(Arrays.equals(new long[] { 1L, -1L, 1000L, -1000L }, ArrayUtils.addAll(new long[] { 1L, -1L }, new long[] { 1000L, -1000L }))); [EOL]     assertTrue(Arrays.equals(new long[] { 1000L, -1000L }, ArrayUtils.addAll(null, new long[] { 1000L, -1000L }))); [EOL]     assertTrue(Arrays.equals(new long[] { 1L, -1L }, ArrayUtils.addAll(new long[] { 1L, -1L }, null))); [EOL]     assertTrue(Arrays.equals(new float[] { 10.5f, 10.1f, 1.6f, 0.01f }, ArrayUtils.addAll(new float[] { 10.5f, 10.1f }, new float[] { 1.6f, 0.01f }))); [EOL]     assertTrue(Arrays.equals(new float[] { 1.6f, 0.01f }, ArrayUtils.addAll(null, new float[] { 1.6f, 0.01f }))); [EOL]     assertTrue(Arrays.equals(new float[] { 10.5f, 10.1f }, ArrayUtils.addAll(new float[] { 10.5f, 10.1f }, null))); [EOL]     assertTrue(Arrays.equals(new double[] { Math.PI, -Math.PI, 0, 9.99 }, ArrayUtils.addAll(new double[] { Math.PI, -Math.PI }, new double[] { 0, 9.99 }))); [EOL]     assertTrue(Arrays.equals(new double[] { 0, 9.99 }, ArrayUtils.addAll(null, new double[] { 0, 9.99 }))); [EOL]     assertTrue(Arrays.equals(new double[] { Math.PI, -Math.PI }, ArrayUtils.addAll(new double[] { Math.PI, -Math.PI }, null))); [EOL] }
@Test [EOL] public void testAddObjectArrayToObjectArray() { [EOL]     assertNull(ArrayUtils.addAll((Object[]) null, (Object[]) null)); [EOL]     Object[] newArray; [EOL]     final String[] stringArray1 = new String[] { "a", "b", "c" }; [EOL]     final String[] stringArray2 = new String[] { "1", "2", "3" }; [EOL]     newArray = ArrayUtils.addAll(stringArray1, (String[]) null); [EOL]     assertNotSame(stringArray1, newArray); [EOL]     assertTrue(Arrays.equals(stringArray1, newArray)); [EOL]     assertTrue(Arrays.equals(new String[] { "a", "b", "c" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.addAll(null, stringArray2); [EOL]     assertNotSame(stringArray2, newArray); [EOL]     assertTrue(Arrays.equals(stringArray2, newArray)); [EOL]     assertTrue(Arrays.equals(new String[] { "1", "2", "3" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.addAll(stringArray1, stringArray2); [EOL]     assertTrue(Arrays.equals(new String[] { "a", "b", "c", "1", "2", "3" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.addAll(ArrayUtils.EMPTY_STRING_ARRAY, (String[]) null); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_STRING_ARRAY, newArray)); [EOL]     assertTrue(Arrays.equals(new String[] {}, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.addAll(null, ArrayUtils.EMPTY_STRING_ARRAY); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_STRING_ARRAY, newArray)); [EOL]     assertTrue(Arrays.equals(new String[] {}, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.addAll(ArrayUtils.EMPTY_STRING_ARRAY, ArrayUtils.EMPTY_STRING_ARRAY); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_STRING_ARRAY, newArray)); [EOL]     assertTrue(Arrays.equals(new String[] {}, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     final String[] stringArrayNull = new String[] { null }; [EOL]     newArray = ArrayUtils.addAll(stringArrayNull, stringArrayNull); [EOL]     assertTrue(Arrays.equals(new String[] { null, null }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     assertTrue(Arrays.equals(new boolean[] { true, false, false, true }, ArrayUtils.addAll(new boolean[] { true, false }, new boolean[] { false, true }))); [EOL]     assertTrue(Arrays.equals(new boolean[] { false, true }, ArrayUtils.addAll(null, new boolean[] { false, true }))); [EOL]     assertTrue(Arrays.equals(new boolean[] { true, false }, ArrayUtils.addAll(new boolean[] { true, false }, null))); [EOL]     assertTrue(Arrays.equals(new char[] { 'a', 'b', 'c', 'd' }, ArrayUtils.addAll(new char[] { 'a', 'b' }, new char[] { 'c', 'd' }))); [EOL]     assertTrue(Arrays.equals(new char[] { 'c', 'd' }, ArrayUtils.addAll(null, new char[] { 'c', 'd' }))); [EOL]     assertTrue(Arrays.equals(new char[] { 'a', 'b' }, ArrayUtils.addAll(new char[] { 'a', 'b' }, null))); [EOL]     assertTrue(Arrays.equals(new byte[] { (byte) 0, (byte) 1, (byte) 2, (byte) 3 }, ArrayUtils.addAll(new byte[] { (byte) 0, (byte) 1 }, new byte[] { (byte) 2, (byte) 3 }))); [EOL]     assertTrue(Arrays.equals(new byte[] { (byte) 2, (byte) 3 }, ArrayUtils.addAll(null, new byte[] { (byte) 2, (byte) 3 }))); [EOL]     assertTrue(Arrays.equals(new byte[] { (byte) 0, (byte) 1 }, ArrayUtils.addAll(new byte[] { (byte) 0, (byte) 1 }, null))); [EOL]     assertTrue(Arrays.equals(new short[] { (short) 10, (short) 20, (short) 30, (short) 40 }, ArrayUtils.addAll(new short[] { (short) 10, (short) 20 }, new short[] { (short) 30, (short) 40 }))); [EOL]     assertTrue(Arrays.equals(new short[] { (short) 30, (short) 40 }, ArrayUtils.addAll(null, new short[] { (short) 30, (short) 40 }))); [EOL]     assertTrue(Arrays.equals(new short[] { (short) 10, (short) 20 }, ArrayUtils.addAll(new short[] { (short) 10, (short) 20 }, null))); [EOL]     assertTrue(Arrays.equals(new int[] { 1, 1000, -1000, -1 }, ArrayUtils.addAll(new int[] { 1, 1000 }, new int[] { -1000, -1 }))); [EOL]     assertTrue(Arrays.equals(new int[] { -1000, -1 }, ArrayUtils.addAll(null, new int[] { -1000, -1 }))); [EOL]     assertTrue(Arrays.equals(new int[] { 1, 1000 }, ArrayUtils.addAll(new int[] { 1, 1000 }, null))); [EOL]     assertTrue(Arrays.equals(new long[] { 1L, -1L, 1000L, -1000L }, ArrayUtils.addAll(new long[] { 1L, -1L }, new long[] { 1000L, -1000L }))); [EOL]     assertTrue(Arrays.equals(new long[] { 1000L, -1000L }, ArrayUtils.addAll(null, new long[] { 1000L, -1000L }))); [EOL]     assertTrue(Arrays.equals(new long[] { 1L, -1L }, ArrayUtils.addAll(new long[] { 1L, -1L }, null))); [EOL]     assertTrue(Arrays.equals(new float[] { 10.5f, 10.1f, 1.6f, 0.01f }, ArrayUtils.addAll(new float[] { 10.5f, 10.1f }, new float[] { 1.6f, 0.01f }))); [EOL]     assertTrue(Arrays.equals(new float[] { 1.6f, 0.01f }, ArrayUtils.addAll(null, new float[] { 1.6f, 0.01f }))); [EOL]     assertTrue(Arrays.equals(new float[] { 10.5f, 10.1f }, ArrayUtils.addAll(new float[] { 10.5f, 10.1f }, null))); [EOL]     assertTrue(Arrays.equals(new double[] { Math.PI, -Math.PI, 0, 9.99 }, ArrayUtils.addAll(new double[] { Math.PI, -Math.PI }, new double[] { 0, 9.99 }))); [EOL]     assertTrue(Arrays.equals(new double[] { 0, 9.99 }, ArrayUtils.addAll(null, new double[] { 0, 9.99 }))); [EOL]     assertTrue(Arrays.equals(new double[] { Math.PI, -Math.PI }, ArrayUtils.addAll(new double[] { Math.PI, -Math.PI }, null))); [EOL] }
@Test [EOL] public void testAddObjectArrayToObjectArray() { [EOL]     assertNull(ArrayUtils.addAll((Object[]) null, (Object[]) null)); [EOL]     Object[] newArray; [EOL]     final String[] stringArray1 = new String[] { "a", "b", "c" }; [EOL]     final String[] stringArray2 = new String[] { "1", "2", "3" }; [EOL]     newArray = ArrayUtils.addAll(stringArray1, (String[]) null); [EOL]     assertNotSame(stringArray1, newArray); [EOL]     assertTrue(Arrays.equals(stringArray1, newArray)); [EOL]     assertTrue(Arrays.equals(new String[] { "a", "b", "c" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.addAll(null, stringArray2); [EOL]     assertNotSame(stringArray2, newArray); [EOL]     assertTrue(Arrays.equals(stringArray2, newArray)); [EOL]     assertTrue(Arrays.equals(new String[] { "1", "2", "3" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.addAll(stringArray1, stringArray2); [EOL]     assertTrue(Arrays.equals(new String[] { "a", "b", "c", "1", "2", "3" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.addAll(ArrayUtils.EMPTY_STRING_ARRAY, (String[]) null); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_STRING_ARRAY, newArray)); [EOL]     assertTrue(Arrays.equals(new String[] {}, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.addAll(null, ArrayUtils.EMPTY_STRING_ARRAY); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_STRING_ARRAY, newArray)); [EOL]     assertTrue(Arrays.equals(new String[] {}, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.addAll(ArrayUtils.EMPTY_STRING_ARRAY, ArrayUtils.EMPTY_STRING_ARRAY); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_STRING_ARRAY, newArray)); [EOL]     assertTrue(Arrays.equals(new String[] {}, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     final String[] stringArrayNull = new String[] { null }; [EOL]     newArray = ArrayUtils.addAll(stringArrayNull, stringArrayNull); [EOL]     assertTrue(Arrays.equals(new String[] { null, null }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     assertTrue(Arrays.equals(new boolean[] { true, false, false, true }, ArrayUtils.addAll(new boolean[] { true, false }, new boolean[] { false, true }))); [EOL]     assertTrue(Arrays.equals(new boolean[] { false, true }, ArrayUtils.addAll(null, new boolean[] { false, true }))); [EOL]     assertTrue(Arrays.equals(new boolean[] { true, false }, ArrayUtils.addAll(new boolean[] { true, false }, null))); [EOL]     assertTrue(Arrays.equals(new char[] { 'a', 'b', 'c', 'd' }, ArrayUtils.addAll(new char[] { 'a', 'b' }, new char[] { 'c', 'd' }))); [EOL]     assertTrue(Arrays.equals(new char[] { 'c', 'd' }, ArrayUtils.addAll(null, new char[] { 'c', 'd' }))); [EOL]     assertTrue(Arrays.equals(new char[] { 'a', 'b' }, ArrayUtils.addAll(new char[] { 'a', 'b' }, null))); [EOL]     assertTrue(Arrays.equals(new byte[] { (byte) 0, (byte) 1, (byte) 2, (byte) 3 }, ArrayUtils.addAll(new byte[] { (byte) 0, (byte) 1 }, new byte[] { (byte) 2, (byte) 3 }))); [EOL]     assertTrue(Arrays.equals(new byte[] { (byte) 2, (byte) 3 }, ArrayUtils.addAll(null, new byte[] { (byte) 2, (byte) 3 }))); [EOL]     assertTrue(Arrays.equals(new byte[] { (byte) 0, (byte) 1 }, ArrayUtils.addAll(new byte[] { (byte) 0, (byte) 1 }, null))); [EOL]     assertTrue(Arrays.equals(new short[] { (short) 10, (short) 20, (short) 30, (short) 40 }, ArrayUtils.addAll(new short[] { (short) 10, (short) 20 }, new short[] { (short) 30, (short) 40 }))); [EOL]     assertTrue(Arrays.equals(new short[] { (short) 30, (short) 40 }, ArrayUtils.addAll(null, new short[] { (short) 30, (short) 40 }))); [EOL]     assertTrue(Arrays.equals(new short[] { (short) 10, (short) 20 }, ArrayUtils.addAll(new short[] { (short) 10, (short) 20 }, null))); [EOL]     assertTrue(Arrays.equals(new int[] { 1, 1000, -1000, -1 }, ArrayUtils.addAll(new int[] { 1, 1000 }, new int[] { -1000, -1 }))); [EOL]     assertTrue(Arrays.equals(new int[] { -1000, -1 }, ArrayUtils.addAll(null, new int[] { -1000, -1 }))); [EOL]     assertTrue(Arrays.equals(new int[] { 1, 1000 }, ArrayUtils.addAll(new int[] { 1, 1000 }, null))); [EOL]     assertTrue(Arrays.equals(new long[] { 1L, -1L, 1000L, -1000L }, ArrayUtils.addAll(new long[] { 1L, -1L }, new long[] { 1000L, -1000L }))); [EOL]     assertTrue(Arrays.equals(new long[] { 1000L, -1000L }, ArrayUtils.addAll(null, new long[] { 1000L, -1000L }))); [EOL]     assertTrue(Arrays.equals(new long[] { 1L, -1L }, ArrayUtils.addAll(new long[] { 1L, -1L }, null))); [EOL]     assertTrue(Arrays.equals(new float[] { 10.5f, 10.1f, 1.6f, 0.01f }, ArrayUtils.addAll(new float[] { 10.5f, 10.1f }, new float[] { 1.6f, 0.01f }))); [EOL]     assertTrue(Arrays.equals(new float[] { 1.6f, 0.01f }, ArrayUtils.addAll(null, new float[] { 1.6f, 0.01f }))); [EOL]     assertTrue(Arrays.equals(new float[] { 10.5f, 10.1f }, ArrayUtils.addAll(new float[] { 10.5f, 10.1f }, null))); [EOL]     assertTrue(Arrays.equals(new double[] { Math.PI, -Math.PI, 0, 9.99 }, ArrayUtils.addAll(new double[] { Math.PI, -Math.PI }, new double[] { 0, 9.99 }))); [EOL]     assertTrue(Arrays.equals(new double[] { 0, 9.99 }, ArrayUtils.addAll(null, new double[] { 0, 9.99 }))); [EOL]     assertTrue(Arrays.equals(new double[] { Math.PI, -Math.PI }, ArrayUtils.addAll(new double[] { Math.PI, -Math.PI }, null))); [EOL] }
@Test [EOL] public void testAddObjectArrayToObjectArray() { [EOL]     assertNull(ArrayUtils.addAll((Object[]) null, (Object[]) null)); [EOL]     Object[] newArray; [EOL]     final String[] stringArray1 = new String[] { "a", "b", "c" }; [EOL]     final String[] stringArray2 = new String[] { "1", "2", "3" }; [EOL]     newArray = ArrayUtils.addAll(stringArray1, (String[]) null); [EOL]     assertNotSame(stringArray1, newArray); [EOL]     assertTrue(Arrays.equals(stringArray1, newArray)); [EOL]     assertTrue(Arrays.equals(new String[] { "a", "b", "c" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.addAll(null, stringArray2); [EOL]     assertNotSame(stringArray2, newArray); [EOL]     assertTrue(Arrays.equals(stringArray2, newArray)); [EOL]     assertTrue(Arrays.equals(new String[] { "1", "2", "3" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.addAll(stringArray1, stringArray2); [EOL]     assertTrue(Arrays.equals(new String[] { "a", "b", "c", "1", "2", "3" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.addAll(ArrayUtils.EMPTY_STRING_ARRAY, (String[]) null); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_STRING_ARRAY, newArray)); [EOL]     assertTrue(Arrays.equals(new String[] {}, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.addAll(null, ArrayUtils.EMPTY_STRING_ARRAY); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_STRING_ARRAY, newArray)); [EOL]     assertTrue(Arrays.equals(new String[] {}, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.addAll(ArrayUtils.EMPTY_STRING_ARRAY, ArrayUtils.EMPTY_STRING_ARRAY); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_STRING_ARRAY, newArray)); [EOL]     assertTrue(Arrays.equals(new String[] {}, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     final String[] stringArrayNull = new String[] { null }; [EOL]     newArray = ArrayUtils.addAll(stringArrayNull, stringArrayNull); [EOL]     assertTrue(Arrays.equals(new String[] { null, null }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     assertTrue(Arrays.equals(new boolean[] { true, false, false, true }, ArrayUtils.addAll(new boolean[] { true, false }, new boolean[] { false, true }))); [EOL]     assertTrue(Arrays.equals(new boolean[] { false, true }, ArrayUtils.addAll(null, new boolean[] { false, true }))); [EOL]     assertTrue(Arrays.equals(new boolean[] { true, false }, ArrayUtils.addAll(new boolean[] { true, false }, null))); [EOL]     assertTrue(Arrays.equals(new char[] { 'a', 'b', 'c', 'd' }, ArrayUtils.addAll(new char[] { 'a', 'b' }, new char[] { 'c', 'd' }))); [EOL]     assertTrue(Arrays.equals(new char[] { 'c', 'd' }, ArrayUtils.addAll(null, new char[] { 'c', 'd' }))); [EOL]     assertTrue(Arrays.equals(new char[] { 'a', 'b' }, ArrayUtils.addAll(new char[] { 'a', 'b' }, null))); [EOL]     assertTrue(Arrays.equals(new byte[] { (byte) 0, (byte) 1, (byte) 2, (byte) 3 }, ArrayUtils.addAll(new byte[] { (byte) 0, (byte) 1 }, new byte[] { (byte) 2, (byte) 3 }))); [EOL]     assertTrue(Arrays.equals(new byte[] { (byte) 2, (byte) 3 }, ArrayUtils.addAll(null, new byte[] { (byte) 2, (byte) 3 }))); [EOL]     assertTrue(Arrays.equals(new byte[] { (byte) 0, (byte) 1 }, ArrayUtils.addAll(new byte[] { (byte) 0, (byte) 1 }, null))); [EOL]     assertTrue(Arrays.equals(new short[] { (short) 10, (short) 20, (short) 30, (short) 40 }, ArrayUtils.addAll(new short[] { (short) 10, (short) 20 }, new short[] { (short) 30, (short) 40 }))); [EOL]     assertTrue(Arrays.equals(new short[] { (short) 30, (short) 40 }, ArrayUtils.addAll(null, new short[] { (short) 30, (short) 40 }))); [EOL]     assertTrue(Arrays.equals(new short[] { (short) 10, (short) 20 }, ArrayUtils.addAll(new short[] { (short) 10, (short) 20 }, null))); [EOL]     assertTrue(Arrays.equals(new int[] { 1, 1000, -1000, -1 }, ArrayUtils.addAll(new int[] { 1, 1000 }, new int[] { -1000, -1 }))); [EOL]     assertTrue(Arrays.equals(new int[] { -1000, -1 }, ArrayUtils.addAll(null, new int[] { -1000, -1 }))); [EOL]     assertTrue(Arrays.equals(new int[] { 1, 1000 }, ArrayUtils.addAll(new int[] { 1, 1000 }, null))); [EOL]     assertTrue(Arrays.equals(new long[] { 1L, -1L, 1000L, -1000L }, ArrayUtils.addAll(new long[] { 1L, -1L }, new long[] { 1000L, -1000L }))); [EOL]     assertTrue(Arrays.equals(new long[] { 1000L, -1000L }, ArrayUtils.addAll(null, new long[] { 1000L, -1000L }))); [EOL]     assertTrue(Arrays.equals(new long[] { 1L, -1L }, ArrayUtils.addAll(new long[] { 1L, -1L }, null))); [EOL]     assertTrue(Arrays.equals(new float[] { 10.5f, 10.1f, 1.6f, 0.01f }, ArrayUtils.addAll(new float[] { 10.5f, 10.1f }, new float[] { 1.6f, 0.01f }))); [EOL]     assertTrue(Arrays.equals(new float[] { 1.6f, 0.01f }, ArrayUtils.addAll(null, new float[] { 1.6f, 0.01f }))); [EOL]     assertTrue(Arrays.equals(new float[] { 10.5f, 10.1f }, ArrayUtils.addAll(new float[] { 10.5f, 10.1f }, null))); [EOL]     assertTrue(Arrays.equals(new double[] { Math.PI, -Math.PI, 0, 9.99 }, ArrayUtils.addAll(new double[] { Math.PI, -Math.PI }, new double[] { 0, 9.99 }))); [EOL]     assertTrue(Arrays.equals(new double[] { 0, 9.99 }, ArrayUtils.addAll(null, new double[] { 0, 9.99 }))); [EOL]     assertTrue(Arrays.equals(new double[] { Math.PI, -Math.PI }, ArrayUtils.addAll(new double[] { Math.PI, -Math.PI }, null))); [EOL] }
@Test [EOL] public void testAddObjectArrayToObjectArray() { [EOL]     assertNull(ArrayUtils.addAll((Object[]) null, (Object[]) null)); [EOL]     Object[] newArray; [EOL]     final String[] stringArray1 = new String[] { "a", "b", "c" }; [EOL]     final String[] stringArray2 = new String[] { "1", "2", "3" }; [EOL]     newArray = ArrayUtils.addAll(stringArray1, (String[]) null); [EOL]     assertNotSame(stringArray1, newArray); [EOL]     assertTrue(Arrays.equals(stringArray1, newArray)); [EOL]     assertTrue(Arrays.equals(new String[] { "a", "b", "c" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.addAll(null, stringArray2); [EOL]     assertNotSame(stringArray2, newArray); [EOL]     assertTrue(Arrays.equals(stringArray2, newArray)); [EOL]     assertTrue(Arrays.equals(new String[] { "1", "2", "3" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.addAll(stringArray1, stringArray2); [EOL]     assertTrue(Arrays.equals(new String[] { "a", "b", "c", "1", "2", "3" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.addAll(ArrayUtils.EMPTY_STRING_ARRAY, (String[]) null); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_STRING_ARRAY, newArray)); [EOL]     assertTrue(Arrays.equals(new String[] {}, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.addAll(null, ArrayUtils.EMPTY_STRING_ARRAY); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_STRING_ARRAY, newArray)); [EOL]     assertTrue(Arrays.equals(new String[] {}, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.addAll(ArrayUtils.EMPTY_STRING_ARRAY, ArrayUtils.EMPTY_STRING_ARRAY); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_STRING_ARRAY, newArray)); [EOL]     assertTrue(Arrays.equals(new String[] {}, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     final String[] stringArrayNull = new String[] { null }; [EOL]     newArray = ArrayUtils.addAll(stringArrayNull, stringArrayNull); [EOL]     assertTrue(Arrays.equals(new String[] { null, null }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     assertTrue(Arrays.equals(new boolean[] { true, false, false, true }, ArrayUtils.addAll(new boolean[] { true, false }, new boolean[] { false, true }))); [EOL]     assertTrue(Arrays.equals(new boolean[] { false, true }, ArrayUtils.addAll(null, new boolean[] { false, true }))); [EOL]     assertTrue(Arrays.equals(new boolean[] { true, false }, ArrayUtils.addAll(new boolean[] { true, false }, null))); [EOL]     assertTrue(Arrays.equals(new char[] { 'a', 'b', 'c', 'd' }, ArrayUtils.addAll(new char[] { 'a', 'b' }, new char[] { 'c', 'd' }))); [EOL]     assertTrue(Arrays.equals(new char[] { 'c', 'd' }, ArrayUtils.addAll(null, new char[] { 'c', 'd' }))); [EOL]     assertTrue(Arrays.equals(new char[] { 'a', 'b' }, ArrayUtils.addAll(new char[] { 'a', 'b' }, null))); [EOL]     assertTrue(Arrays.equals(new byte[] { (byte) 0, (byte) 1, (byte) 2, (byte) 3 }, ArrayUtils.addAll(new byte[] { (byte) 0, (byte) 1 }, new byte[] { (byte) 2, (byte) 3 }))); [EOL]     assertTrue(Arrays.equals(new byte[] { (byte) 2, (byte) 3 }, ArrayUtils.addAll(null, new byte[] { (byte) 2, (byte) 3 }))); [EOL]     assertTrue(Arrays.equals(new byte[] { (byte) 0, (byte) 1 }, ArrayUtils.addAll(new byte[] { (byte) 0, (byte) 1 }, null))); [EOL]     assertTrue(Arrays.equals(new short[] { (short) 10, (short) 20, (short) 30, (short) 40 }, ArrayUtils.addAll(new short[] { (short) 10, (short) 20 }, new short[] { (short) 30, (short) 40 }))); [EOL]     assertTrue(Arrays.equals(new short[] { (short) 30, (short) 40 }, ArrayUtils.addAll(null, new short[] { (short) 30, (short) 40 }))); [EOL]     assertTrue(Arrays.equals(new short[] { (short) 10, (short) 20 }, ArrayUtils.addAll(new short[] { (short) 10, (short) 20 }, null))); [EOL]     assertTrue(Arrays.equals(new int[] { 1, 1000, -1000, -1 }, ArrayUtils.addAll(new int[] { 1, 1000 }, new int[] { -1000, -1 }))); [EOL]     assertTrue(Arrays.equals(new int[] { -1000, -1 }, ArrayUtils.addAll(null, new int[] { -1000, -1 }))); [EOL]     assertTrue(Arrays.equals(new int[] { 1, 1000 }, ArrayUtils.addAll(new int[] { 1, 1000 }, null))); [EOL]     assertTrue(Arrays.equals(new long[] { 1L, -1L, 1000L, -1000L }, ArrayUtils.addAll(new long[] { 1L, -1L }, new long[] { 1000L, -1000L }))); [EOL]     assertTrue(Arrays.equals(new long[] { 1000L, -1000L }, ArrayUtils.addAll(null, new long[] { 1000L, -1000L }))); [EOL]     assertTrue(Arrays.equals(new long[] { 1L, -1L }, ArrayUtils.addAll(new long[] { 1L, -1L }, null))); [EOL]     assertTrue(Arrays.equals(new float[] { 10.5f, 10.1f, 1.6f, 0.01f }, ArrayUtils.addAll(new float[] { 10.5f, 10.1f }, new float[] { 1.6f, 0.01f }))); [EOL]     assertTrue(Arrays.equals(new float[] { 1.6f, 0.01f }, ArrayUtils.addAll(null, new float[] { 1.6f, 0.01f }))); [EOL]     assertTrue(Arrays.equals(new float[] { 10.5f, 10.1f }, ArrayUtils.addAll(new float[] { 10.5f, 10.1f }, null))); [EOL]     assertTrue(Arrays.equals(new double[] { Math.PI, -Math.PI, 0, 9.99 }, ArrayUtils.addAll(new double[] { Math.PI, -Math.PI }, new double[] { 0, 9.99 }))); [EOL]     assertTrue(Arrays.equals(new double[] { 0, 9.99 }, ArrayUtils.addAll(null, new double[] { 0, 9.99 }))); [EOL]     assertTrue(Arrays.equals(new double[] { Math.PI, -Math.PI }, ArrayUtils.addAll(new double[] { Math.PI, -Math.PI }, null))); [EOL] }
@Test [EOL] public void testAddObjectArrayToObjectArray() { [EOL]     assertNull(ArrayUtils.addAll((Object[]) null, (Object[]) null)); [EOL]     Object[] newArray; [EOL]     final String[] stringArray1 = new String[] { "a", "b", "c" }; [EOL]     final String[] stringArray2 = new String[] { "1", "2", "3" }; [EOL]     newArray = ArrayUtils.addAll(stringArray1, (String[]) null); [EOL]     assertNotSame(stringArray1, newArray); [EOL]     assertTrue(Arrays.equals(stringArray1, newArray)); [EOL]     assertTrue(Arrays.equals(new String[] { "a", "b", "c" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.addAll(null, stringArray2); [EOL]     assertNotSame(stringArray2, newArray); [EOL]     assertTrue(Arrays.equals(stringArray2, newArray)); [EOL]     assertTrue(Arrays.equals(new String[] { "1", "2", "3" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.addAll(stringArray1, stringArray2); [EOL]     assertTrue(Arrays.equals(new String[] { "a", "b", "c", "1", "2", "3" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.addAll(ArrayUtils.EMPTY_STRING_ARRAY, (String[]) null); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_STRING_ARRAY, newArray)); [EOL]     assertTrue(Arrays.equals(new String[] {}, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.addAll(null, ArrayUtils.EMPTY_STRING_ARRAY); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_STRING_ARRAY, newArray)); [EOL]     assertTrue(Arrays.equals(new String[] {}, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.addAll(ArrayUtils.EMPTY_STRING_ARRAY, ArrayUtils.EMPTY_STRING_ARRAY); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_STRING_ARRAY, newArray)); [EOL]     assertTrue(Arrays.equals(new String[] {}, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     final String[] stringArrayNull = new String[] { null }; [EOL]     newArray = ArrayUtils.addAll(stringArrayNull, stringArrayNull); [EOL]     assertTrue(Arrays.equals(new String[] { null, null }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     assertTrue(Arrays.equals(new boolean[] { true, false, false, true }, ArrayUtils.addAll(new boolean[] { true, false }, new boolean[] { false, true }))); [EOL]     assertTrue(Arrays.equals(new boolean[] { false, true }, ArrayUtils.addAll(null, new boolean[] { false, true }))); [EOL]     assertTrue(Arrays.equals(new boolean[] { true, false }, ArrayUtils.addAll(new boolean[] { true, false }, null))); [EOL]     assertTrue(Arrays.equals(new char[] { 'a', 'b', 'c', 'd' }, ArrayUtils.addAll(new char[] { 'a', 'b' }, new char[] { 'c', 'd' }))); [EOL]     assertTrue(Arrays.equals(new char[] { 'c', 'd' }, ArrayUtils.addAll(null, new char[] { 'c', 'd' }))); [EOL]     assertTrue(Arrays.equals(new char[] { 'a', 'b' }, ArrayUtils.addAll(new char[] { 'a', 'b' }, null))); [EOL]     assertTrue(Arrays.equals(new byte[] { (byte) 0, (byte) 1, (byte) 2, (byte) 3 }, ArrayUtils.addAll(new byte[] { (byte) 0, (byte) 1 }, new byte[] { (byte) 2, (byte) 3 }))); [EOL]     assertTrue(Arrays.equals(new byte[] { (byte) 2, (byte) 3 }, ArrayUtils.addAll(null, new byte[] { (byte) 2, (byte) 3 }))); [EOL]     assertTrue(Arrays.equals(new byte[] { (byte) 0, (byte) 1 }, ArrayUtils.addAll(new byte[] { (byte) 0, (byte) 1 }, null))); [EOL]     assertTrue(Arrays.equals(new short[] { (short) 10, (short) 20, (short) 30, (short) 40 }, ArrayUtils.addAll(new short[] { (short) 10, (short) 20 }, new short[] { (short) 30, (short) 40 }))); [EOL]     assertTrue(Arrays.equals(new short[] { (short) 30, (short) 40 }, ArrayUtils.addAll(null, new short[] { (short) 30, (short) 40 }))); [EOL]     assertTrue(Arrays.equals(new short[] { (short) 10, (short) 20 }, ArrayUtils.addAll(new short[] { (short) 10, (short) 20 }, null))); [EOL]     assertTrue(Arrays.equals(new int[] { 1, 1000, -1000, -1 }, ArrayUtils.addAll(new int[] { 1, 1000 }, new int[] { -1000, -1 }))); [EOL]     assertTrue(Arrays.equals(new int[] { -1000, -1 }, ArrayUtils.addAll(null, new int[] { -1000, -1 }))); [EOL]     assertTrue(Arrays.equals(new int[] { 1, 1000 }, ArrayUtils.addAll(new int[] { 1, 1000 }, null))); [EOL]     assertTrue(Arrays.equals(new long[] { 1L, -1L, 1000L, -1000L }, ArrayUtils.addAll(new long[] { 1L, -1L }, new long[] { 1000L, -1000L }))); [EOL]     assertTrue(Arrays.equals(new long[] { 1000L, -1000L }, ArrayUtils.addAll(null, new long[] { 1000L, -1000L }))); [EOL]     assertTrue(Arrays.equals(new long[] { 1L, -1L }, ArrayUtils.addAll(new long[] { 1L, -1L }, null))); [EOL]     assertTrue(Arrays.equals(new float[] { 10.5f, 10.1f, 1.6f, 0.01f }, ArrayUtils.addAll(new float[] { 10.5f, 10.1f }, new float[] { 1.6f, 0.01f }))); [EOL]     assertTrue(Arrays.equals(new float[] { 1.6f, 0.01f }, ArrayUtils.addAll(null, new float[] { 1.6f, 0.01f }))); [EOL]     assertTrue(Arrays.equals(new float[] { 10.5f, 10.1f }, ArrayUtils.addAll(new float[] { 10.5f, 10.1f }, null))); [EOL]     assertTrue(Arrays.equals(new double[] { Math.PI, -Math.PI, 0, 9.99 }, ArrayUtils.addAll(new double[] { Math.PI, -Math.PI }, new double[] { 0, 9.99 }))); [EOL]     assertTrue(Arrays.equals(new double[] { 0, 9.99 }, ArrayUtils.addAll(null, new double[] { 0, 9.99 }))); [EOL]     assertTrue(Arrays.equals(new double[] { Math.PI, -Math.PI }, ArrayUtils.addAll(new double[] { Math.PI, -Math.PI }, null))); [EOL] }
@Test [EOL] public void testAddObjectArrayToObjectArray() { [EOL]     assertNull(ArrayUtils.addAll((Object[]) null, (Object[]) null)); [EOL]     Object[] newArray; [EOL]     final String[] stringArray1 = new String[] { "a", "b", "c" }; [EOL]     final String[] stringArray2 = new String[] { "1", "2", "3" }; [EOL]     newArray = ArrayUtils.addAll(stringArray1, (String[]) null); [EOL]     assertNotSame(stringArray1, newArray); [EOL]     assertTrue(Arrays.equals(stringArray1, newArray)); [EOL]     assertTrue(Arrays.equals(new String[] { "a", "b", "c" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.addAll(null, stringArray2); [EOL]     assertNotSame(stringArray2, newArray); [EOL]     assertTrue(Arrays.equals(stringArray2, newArray)); [EOL]     assertTrue(Arrays.equals(new String[] { "1", "2", "3" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.addAll(stringArray1, stringArray2); [EOL]     assertTrue(Arrays.equals(new String[] { "a", "b", "c", "1", "2", "3" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.addAll(ArrayUtils.EMPTY_STRING_ARRAY, (String[]) null); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_STRING_ARRAY, newArray)); [EOL]     assertTrue(Arrays.equals(new String[] {}, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.addAll(null, ArrayUtils.EMPTY_STRING_ARRAY); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_STRING_ARRAY, newArray)); [EOL]     assertTrue(Arrays.equals(new String[] {}, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.addAll(ArrayUtils.EMPTY_STRING_ARRAY, ArrayUtils.EMPTY_STRING_ARRAY); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_STRING_ARRAY, newArray)); [EOL]     assertTrue(Arrays.equals(new String[] {}, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     final String[] stringArrayNull = new String[] { null }; [EOL]     newArray = ArrayUtils.addAll(stringArrayNull, stringArrayNull); [EOL]     assertTrue(Arrays.equals(new String[] { null, null }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     assertTrue(Arrays.equals(new boolean[] { true, false, false, true }, ArrayUtils.addAll(new boolean[] { true, false }, new boolean[] { false, true }))); [EOL]     assertTrue(Arrays.equals(new boolean[] { false, true }, ArrayUtils.addAll(null, new boolean[] { false, true }))); [EOL]     assertTrue(Arrays.equals(new boolean[] { true, false }, ArrayUtils.addAll(new boolean[] { true, false }, null))); [EOL]     assertTrue(Arrays.equals(new char[] { 'a', 'b', 'c', 'd' }, ArrayUtils.addAll(new char[] { 'a', 'b' }, new char[] { 'c', 'd' }))); [EOL]     assertTrue(Arrays.equals(new char[] { 'c', 'd' }, ArrayUtils.addAll(null, new char[] { 'c', 'd' }))); [EOL]     assertTrue(Arrays.equals(new char[] { 'a', 'b' }, ArrayUtils.addAll(new char[] { 'a', 'b' }, null))); [EOL]     assertTrue(Arrays.equals(new byte[] { (byte) 0, (byte) 1, (byte) 2, (byte) 3 }, ArrayUtils.addAll(new byte[] { (byte) 0, (byte) 1 }, new byte[] { (byte) 2, (byte) 3 }))); [EOL]     assertTrue(Arrays.equals(new byte[] { (byte) 2, (byte) 3 }, ArrayUtils.addAll(null, new byte[] { (byte) 2, (byte) 3 }))); [EOL]     assertTrue(Arrays.equals(new byte[] { (byte) 0, (byte) 1 }, ArrayUtils.addAll(new byte[] { (byte) 0, (byte) 1 }, null))); [EOL]     assertTrue(Arrays.equals(new short[] { (short) 10, (short) 20, (short) 30, (short) 40 }, ArrayUtils.addAll(new short[] { (short) 10, (short) 20 }, new short[] { (short) 30, (short) 40 }))); [EOL]     assertTrue(Arrays.equals(new short[] { (short) 30, (short) 40 }, ArrayUtils.addAll(null, new short[] { (short) 30, (short) 40 }))); [EOL]     assertTrue(Arrays.equals(new short[] { (short) 10, (short) 20 }, ArrayUtils.addAll(new short[] { (short) 10, (short) 20 }, null))); [EOL]     assertTrue(Arrays.equals(new int[] { 1, 1000, -1000, -1 }, ArrayUtils.addAll(new int[] { 1, 1000 }, new int[] { -1000, -1 }))); [EOL]     assertTrue(Arrays.equals(new int[] { -1000, -1 }, ArrayUtils.addAll(null, new int[] { -1000, -1 }))); [EOL]     assertTrue(Arrays.equals(new int[] { 1, 1000 }, ArrayUtils.addAll(new int[] { 1, 1000 }, null))); [EOL]     assertTrue(Arrays.equals(new long[] { 1L, -1L, 1000L, -1000L }, ArrayUtils.addAll(new long[] { 1L, -1L }, new long[] { 1000L, -1000L }))); [EOL]     assertTrue(Arrays.equals(new long[] { 1000L, -1000L }, ArrayUtils.addAll(null, new long[] { 1000L, -1000L }))); [EOL]     assertTrue(Arrays.equals(new long[] { 1L, -1L }, ArrayUtils.addAll(new long[] { 1L, -1L }, null))); [EOL]     assertTrue(Arrays.equals(new float[] { 10.5f, 10.1f, 1.6f, 0.01f }, ArrayUtils.addAll(new float[] { 10.5f, 10.1f }, new float[] { 1.6f, 0.01f }))); [EOL]     assertTrue(Arrays.equals(new float[] { 1.6f, 0.01f }, ArrayUtils.addAll(null, new float[] { 1.6f, 0.01f }))); [EOL]     assertTrue(Arrays.equals(new float[] { 10.5f, 10.1f }, ArrayUtils.addAll(new float[] { 10.5f, 10.1f }, null))); [EOL]     assertTrue(Arrays.equals(new double[] { Math.PI, -Math.PI, 0, 9.99 }, ArrayUtils.addAll(new double[] { Math.PI, -Math.PI }, new double[] { 0, 9.99 }))); [EOL]     assertTrue(Arrays.equals(new double[] { 0, 9.99 }, ArrayUtils.addAll(null, new double[] { 0, 9.99 }))); [EOL]     assertTrue(Arrays.equals(new double[] { Math.PI, -Math.PI }, ArrayUtils.addAll(new double[] { Math.PI, -Math.PI }, null))); [EOL] }
@Test [EOL] public void testAddObjectArrayToObjectArray() { [EOL]     assertNull(ArrayUtils.addAll((Object[]) null, (Object[]) null)); [EOL]     Object[] newArray; [EOL]     final String[] stringArray1 = new String[] { "a", "b", "c" }; [EOL]     final String[] stringArray2 = new String[] { "1", "2", "3" }; [EOL]     newArray = ArrayUtils.addAll(stringArray1, (String[]) null); [EOL]     assertNotSame(stringArray1, newArray); [EOL]     assertTrue(Arrays.equals(stringArray1, newArray)); [EOL]     assertTrue(Arrays.equals(new String[] { "a", "b", "c" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.addAll(null, stringArray2); [EOL]     assertNotSame(stringArray2, newArray); [EOL]     assertTrue(Arrays.equals(stringArray2, newArray)); [EOL]     assertTrue(Arrays.equals(new String[] { "1", "2", "3" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.addAll(stringArray1, stringArray2); [EOL]     assertTrue(Arrays.equals(new String[] { "a", "b", "c", "1", "2", "3" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.addAll(ArrayUtils.EMPTY_STRING_ARRAY, (String[]) null); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_STRING_ARRAY, newArray)); [EOL]     assertTrue(Arrays.equals(new String[] {}, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.addAll(null, ArrayUtils.EMPTY_STRING_ARRAY); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_STRING_ARRAY, newArray)); [EOL]     assertTrue(Arrays.equals(new String[] {}, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.addAll(ArrayUtils.EMPTY_STRING_ARRAY, ArrayUtils.EMPTY_STRING_ARRAY); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_STRING_ARRAY, newArray)); [EOL]     assertTrue(Arrays.equals(new String[] {}, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     final String[] stringArrayNull = new String[] { null }; [EOL]     newArray = ArrayUtils.addAll(stringArrayNull, stringArrayNull); [EOL]     assertTrue(Arrays.equals(new String[] { null, null }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     assertTrue(Arrays.equals(new boolean[] { true, false, false, true }, ArrayUtils.addAll(new boolean[] { true, false }, new boolean[] { false, true }))); [EOL]     assertTrue(Arrays.equals(new boolean[] { false, true }, ArrayUtils.addAll(null, new boolean[] { false, true }))); [EOL]     assertTrue(Arrays.equals(new boolean[] { true, false }, ArrayUtils.addAll(new boolean[] { true, false }, null))); [EOL]     assertTrue(Arrays.equals(new char[] { 'a', 'b', 'c', 'd' }, ArrayUtils.addAll(new char[] { 'a', 'b' }, new char[] { 'c', 'd' }))); [EOL]     assertTrue(Arrays.equals(new char[] { 'c', 'd' }, ArrayUtils.addAll(null, new char[] { 'c', 'd' }))); [EOL]     assertTrue(Arrays.equals(new char[] { 'a', 'b' }, ArrayUtils.addAll(new char[] { 'a', 'b' }, null))); [EOL]     assertTrue(Arrays.equals(new byte[] { (byte) 0, (byte) 1, (byte) 2, (byte) 3 }, ArrayUtils.addAll(new byte[] { (byte) 0, (byte) 1 }, new byte[] { (byte) 2, (byte) 3 }))); [EOL]     assertTrue(Arrays.equals(new byte[] { (byte) 2, (byte) 3 }, ArrayUtils.addAll(null, new byte[] { (byte) 2, (byte) 3 }))); [EOL]     assertTrue(Arrays.equals(new byte[] { (byte) 0, (byte) 1 }, ArrayUtils.addAll(new byte[] { (byte) 0, (byte) 1 }, null))); [EOL]     assertTrue(Arrays.equals(new short[] { (short) 10, (short) 20, (short) 30, (short) 40 }, ArrayUtils.addAll(new short[] { (short) 10, (short) 20 }, new short[] { (short) 30, (short) 40 }))); [EOL]     assertTrue(Arrays.equals(new short[] { (short) 30, (short) 40 }, ArrayUtils.addAll(null, new short[] { (short) 30, (short) 40 }))); [EOL]     assertTrue(Arrays.equals(new short[] { (short) 10, (short) 20 }, ArrayUtils.addAll(new short[] { (short) 10, (short) 20 }, null))); [EOL]     assertTrue(Arrays.equals(new int[] { 1, 1000, -1000, -1 }, ArrayUtils.addAll(new int[] { 1, 1000 }, new int[] { -1000, -1 }))); [EOL]     assertTrue(Arrays.equals(new int[] { -1000, -1 }, ArrayUtils.addAll(null, new int[] { -1000, -1 }))); [EOL]     assertTrue(Arrays.equals(new int[] { 1, 1000 }, ArrayUtils.addAll(new int[] { 1, 1000 }, null))); [EOL]     assertTrue(Arrays.equals(new long[] { 1L, -1L, 1000L, -1000L }, ArrayUtils.addAll(new long[] { 1L, -1L }, new long[] { 1000L, -1000L }))); [EOL]     assertTrue(Arrays.equals(new long[] { 1000L, -1000L }, ArrayUtils.addAll(null, new long[] { 1000L, -1000L }))); [EOL]     assertTrue(Arrays.equals(new long[] { 1L, -1L }, ArrayUtils.addAll(new long[] { 1L, -1L }, null))); [EOL]     assertTrue(Arrays.equals(new float[] { 10.5f, 10.1f, 1.6f, 0.01f }, ArrayUtils.addAll(new float[] { 10.5f, 10.1f }, new float[] { 1.6f, 0.01f }))); [EOL]     assertTrue(Arrays.equals(new float[] { 1.6f, 0.01f }, ArrayUtils.addAll(null, new float[] { 1.6f, 0.01f }))); [EOL]     assertTrue(Arrays.equals(new float[] { 10.5f, 10.1f }, ArrayUtils.addAll(new float[] { 10.5f, 10.1f }, null))); [EOL]     assertTrue(Arrays.equals(new double[] { Math.PI, -Math.PI, 0, 9.99 }, ArrayUtils.addAll(new double[] { Math.PI, -Math.PI }, new double[] { 0, 9.99 }))); [EOL]     assertTrue(Arrays.equals(new double[] { 0, 9.99 }, ArrayUtils.addAll(null, new double[] { 0, 9.99 }))); [EOL]     assertTrue(Arrays.equals(new double[] { Math.PI, -Math.PI }, ArrayUtils.addAll(new double[] { Math.PI, -Math.PI }, null))); [EOL] }
@Test [EOL] public void testAddObjectArrayToObjectArray() { [EOL]     assertNull(ArrayUtils.addAll((Object[]) null, (Object[]) null)); [EOL]     Object[] newArray; [EOL]     final String[] stringArray1 = new String[] { "a", "b", "c" }; [EOL]     final String[] stringArray2 = new String[] { "1", "2", "3" }; [EOL]     newArray = ArrayUtils.addAll(stringArray1, (String[]) null); [EOL]     assertNotSame(stringArray1, newArray); [EOL]     assertTrue(Arrays.equals(stringArray1, newArray)); [EOL]     assertTrue(Arrays.equals(new String[] { "a", "b", "c" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.addAll(null, stringArray2); [EOL]     assertNotSame(stringArray2, newArray); [EOL]     assertTrue(Arrays.equals(stringArray2, newArray)); [EOL]     assertTrue(Arrays.equals(new String[] { "1", "2", "3" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.addAll(stringArray1, stringArray2); [EOL]     assertTrue(Arrays.equals(new String[] { "a", "b", "c", "1", "2", "3" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.addAll(ArrayUtils.EMPTY_STRING_ARRAY, (String[]) null); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_STRING_ARRAY, newArray)); [EOL]     assertTrue(Arrays.equals(new String[] {}, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.addAll(null, ArrayUtils.EMPTY_STRING_ARRAY); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_STRING_ARRAY, newArray)); [EOL]     assertTrue(Arrays.equals(new String[] {}, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.addAll(ArrayUtils.EMPTY_STRING_ARRAY, ArrayUtils.EMPTY_STRING_ARRAY); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_STRING_ARRAY, newArray)); [EOL]     assertTrue(Arrays.equals(new String[] {}, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     final String[] stringArrayNull = new String[] { null }; [EOL]     newArray = ArrayUtils.addAll(stringArrayNull, stringArrayNull); [EOL]     assertTrue(Arrays.equals(new String[] { null, null }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     assertTrue(Arrays.equals(new boolean[] { true, false, false, true }, ArrayUtils.addAll(new boolean[] { true, false }, new boolean[] { false, true }))); [EOL]     assertTrue(Arrays.equals(new boolean[] { false, true }, ArrayUtils.addAll(null, new boolean[] { false, true }))); [EOL]     assertTrue(Arrays.equals(new boolean[] { true, false }, ArrayUtils.addAll(new boolean[] { true, false }, null))); [EOL]     assertTrue(Arrays.equals(new char[] { 'a', 'b', 'c', 'd' }, ArrayUtils.addAll(new char[] { 'a', 'b' }, new char[] { 'c', 'd' }))); [EOL]     assertTrue(Arrays.equals(new char[] { 'c', 'd' }, ArrayUtils.addAll(null, new char[] { 'c', 'd' }))); [EOL]     assertTrue(Arrays.equals(new char[] { 'a', 'b' }, ArrayUtils.addAll(new char[] { 'a', 'b' }, null))); [EOL]     assertTrue(Arrays.equals(new byte[] { (byte) 0, (byte) 1, (byte) 2, (byte) 3 }, ArrayUtils.addAll(new byte[] { (byte) 0, (byte) 1 }, new byte[] { (byte) 2, (byte) 3 }))); [EOL]     assertTrue(Arrays.equals(new byte[] { (byte) 2, (byte) 3 }, ArrayUtils.addAll(null, new byte[] { (byte) 2, (byte) 3 }))); [EOL]     assertTrue(Arrays.equals(new byte[] { (byte) 0, (byte) 1 }, ArrayUtils.addAll(new byte[] { (byte) 0, (byte) 1 }, null))); [EOL]     assertTrue(Arrays.equals(new short[] { (short) 10, (short) 20, (short) 30, (short) 40 }, ArrayUtils.addAll(new short[] { (short) 10, (short) 20 }, new short[] { (short) 30, (short) 40 }))); [EOL]     assertTrue(Arrays.equals(new short[] { (short) 30, (short) 40 }, ArrayUtils.addAll(null, new short[] { (short) 30, (short) 40 }))); [EOL]     assertTrue(Arrays.equals(new short[] { (short) 10, (short) 20 }, ArrayUtils.addAll(new short[] { (short) 10, (short) 20 }, null))); [EOL]     assertTrue(Arrays.equals(new int[] { 1, 1000, -1000, -1 }, ArrayUtils.addAll(new int[] { 1, 1000 }, new int[] { -1000, -1 }))); [EOL]     assertTrue(Arrays.equals(new int[] { -1000, -1 }, ArrayUtils.addAll(null, new int[] { -1000, -1 }))); [EOL]     assertTrue(Arrays.equals(new int[] { 1, 1000 }, ArrayUtils.addAll(new int[] { 1, 1000 }, null))); [EOL]     assertTrue(Arrays.equals(new long[] { 1L, -1L, 1000L, -1000L }, ArrayUtils.addAll(new long[] { 1L, -1L }, new long[] { 1000L, -1000L }))); [EOL]     assertTrue(Arrays.equals(new long[] { 1000L, -1000L }, ArrayUtils.addAll(null, new long[] { 1000L, -1000L }))); [EOL]     assertTrue(Arrays.equals(new long[] { 1L, -1L }, ArrayUtils.addAll(new long[] { 1L, -1L }, null))); [EOL]     assertTrue(Arrays.equals(new float[] { 10.5f, 10.1f, 1.6f, 0.01f }, ArrayUtils.addAll(new float[] { 10.5f, 10.1f }, new float[] { 1.6f, 0.01f }))); [EOL]     assertTrue(Arrays.equals(new float[] { 1.6f, 0.01f }, ArrayUtils.addAll(null, new float[] { 1.6f, 0.01f }))); [EOL]     assertTrue(Arrays.equals(new float[] { 10.5f, 10.1f }, ArrayUtils.addAll(new float[] { 10.5f, 10.1f }, null))); [EOL]     assertTrue(Arrays.equals(new double[] { Math.PI, -Math.PI, 0, 9.99 }, ArrayUtils.addAll(new double[] { Math.PI, -Math.PI }, new double[] { 0, 9.99 }))); [EOL]     assertTrue(Arrays.equals(new double[] { 0, 9.99 }, ArrayUtils.addAll(null, new double[] { 0, 9.99 }))); [EOL]     assertTrue(Arrays.equals(new double[] { Math.PI, -Math.PI }, ArrayUtils.addAll(new double[] { Math.PI, -Math.PI }, null))); [EOL] }
@Test [EOL] public void testAddObjectArrayToObjectArray() { [EOL]     assertNull(ArrayUtils.addAll((Object[]) null, (Object[]) null)); [EOL]     Object[] newArray; [EOL]     final String[] stringArray1 = new String[] { "a", "b", "c" }; [EOL]     final String[] stringArray2 = new String[] { "1", "2", "3" }; [EOL]     newArray = ArrayUtils.addAll(stringArray1, (String[]) null); [EOL]     assertNotSame(stringArray1, newArray); [EOL]     assertTrue(Arrays.equals(stringArray1, newArray)); [EOL]     assertTrue(Arrays.equals(new String[] { "a", "b", "c" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.addAll(null, stringArray2); [EOL]     assertNotSame(stringArray2, newArray); [EOL]     assertTrue(Arrays.equals(stringArray2, newArray)); [EOL]     assertTrue(Arrays.equals(new String[] { "1", "2", "3" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.addAll(stringArray1, stringArray2); [EOL]     assertTrue(Arrays.equals(new String[] { "a", "b", "c", "1", "2", "3" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.addAll(ArrayUtils.EMPTY_STRING_ARRAY, (String[]) null); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_STRING_ARRAY, newArray)); [EOL]     assertTrue(Arrays.equals(new String[] {}, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.addAll(null, ArrayUtils.EMPTY_STRING_ARRAY); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_STRING_ARRAY, newArray)); [EOL]     assertTrue(Arrays.equals(new String[] {}, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.addAll(ArrayUtils.EMPTY_STRING_ARRAY, ArrayUtils.EMPTY_STRING_ARRAY); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_STRING_ARRAY, newArray)); [EOL]     assertTrue(Arrays.equals(new String[] {}, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     final String[] stringArrayNull = new String[] { null }; [EOL]     newArray = ArrayUtils.addAll(stringArrayNull, stringArrayNull); [EOL]     assertTrue(Arrays.equals(new String[] { null, null }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     assertTrue(Arrays.equals(new boolean[] { true, false, false, true }, ArrayUtils.addAll(new boolean[] { true, false }, new boolean[] { false, true }))); [EOL]     assertTrue(Arrays.equals(new boolean[] { false, true }, ArrayUtils.addAll(null, new boolean[] { false, true }))); [EOL]     assertTrue(Arrays.equals(new boolean[] { true, false }, ArrayUtils.addAll(new boolean[] { true, false }, null))); [EOL]     assertTrue(Arrays.equals(new char[] { 'a', 'b', 'c', 'd' }, ArrayUtils.addAll(new char[] { 'a', 'b' }, new char[] { 'c', 'd' }))); [EOL]     assertTrue(Arrays.equals(new char[] { 'c', 'd' }, ArrayUtils.addAll(null, new char[] { 'c', 'd' }))); [EOL]     assertTrue(Arrays.equals(new char[] { 'a', 'b' }, ArrayUtils.addAll(new char[] { 'a', 'b' }, null))); [EOL]     assertTrue(Arrays.equals(new byte[] { (byte) 0, (byte) 1, (byte) 2, (byte) 3 }, ArrayUtils.addAll(new byte[] { (byte) 0, (byte) 1 }, new byte[] { (byte) 2, (byte) 3 }))); [EOL]     assertTrue(Arrays.equals(new byte[] { (byte) 2, (byte) 3 }, ArrayUtils.addAll(null, new byte[] { (byte) 2, (byte) 3 }))); [EOL]     assertTrue(Arrays.equals(new byte[] { (byte) 0, (byte) 1 }, ArrayUtils.addAll(new byte[] { (byte) 0, (byte) 1 }, null))); [EOL]     assertTrue(Arrays.equals(new short[] { (short) 10, (short) 20, (short) 30, (short) 40 }, ArrayUtils.addAll(new short[] { (short) 10, (short) 20 }, new short[] { (short) 30, (short) 40 }))); [EOL]     assertTrue(Arrays.equals(new short[] { (short) 30, (short) 40 }, ArrayUtils.addAll(null, new short[] { (short) 30, (short) 40 }))); [EOL]     assertTrue(Arrays.equals(new short[] { (short) 10, (short) 20 }, ArrayUtils.addAll(new short[] { (short) 10, (short) 20 }, null))); [EOL]     assertTrue(Arrays.equals(new int[] { 1, 1000, -1000, -1 }, ArrayUtils.addAll(new int[] { 1, 1000 }, new int[] { -1000, -1 }))); [EOL]     assertTrue(Arrays.equals(new int[] { -1000, -1 }, ArrayUtils.addAll(null, new int[] { -1000, -1 }))); [EOL]     assertTrue(Arrays.equals(new int[] { 1, 1000 }, ArrayUtils.addAll(new int[] { 1, 1000 }, null))); [EOL]     assertTrue(Arrays.equals(new long[] { 1L, -1L, 1000L, -1000L }, ArrayUtils.addAll(new long[] { 1L, -1L }, new long[] { 1000L, -1000L }))); [EOL]     assertTrue(Arrays.equals(new long[] { 1000L, -1000L }, ArrayUtils.addAll(null, new long[] { 1000L, -1000L }))); [EOL]     assertTrue(Arrays.equals(new long[] { 1L, -1L }, ArrayUtils.addAll(new long[] { 1L, -1L }, null))); [EOL]     assertTrue(Arrays.equals(new float[] { 10.5f, 10.1f, 1.6f, 0.01f }, ArrayUtils.addAll(new float[] { 10.5f, 10.1f }, new float[] { 1.6f, 0.01f }))); [EOL]     assertTrue(Arrays.equals(new float[] { 1.6f, 0.01f }, ArrayUtils.addAll(null, new float[] { 1.6f, 0.01f }))); [EOL]     assertTrue(Arrays.equals(new float[] { 10.5f, 10.1f }, ArrayUtils.addAll(new float[] { 10.5f, 10.1f }, null))); [EOL]     assertTrue(Arrays.equals(new double[] { Math.PI, -Math.PI, 0, 9.99 }, ArrayUtils.addAll(new double[] { Math.PI, -Math.PI }, new double[] { 0, 9.99 }))); [EOL]     assertTrue(Arrays.equals(new double[] { 0, 9.99 }, ArrayUtils.addAll(null, new double[] { 0, 9.99 }))); [EOL]     assertTrue(Arrays.equals(new double[] { Math.PI, -Math.PI }, ArrayUtils.addAll(new double[] { Math.PI, -Math.PI }, null))); [EOL] }
@Test [EOL] public void testAddObjectArrayToObjectArray() { [EOL]     assertNull(ArrayUtils.addAll((Object[]) null, (Object[]) null)); [EOL]     Object[] newArray; [EOL]     final String[] stringArray1 = new String[] { "a", "b", "c" }; [EOL]     final String[] stringArray2 = new String[] { "1", "2", "3" }; [EOL]     newArray = ArrayUtils.addAll(stringArray1, (String[]) null); [EOL]     assertNotSame(stringArray1, newArray); [EOL]     assertTrue(Arrays.equals(stringArray1, newArray)); [EOL]     assertTrue(Arrays.equals(new String[] { "a", "b", "c" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.addAll(null, stringArray2); [EOL]     assertNotSame(stringArray2, newArray); [EOL]     assertTrue(Arrays.equals(stringArray2, newArray)); [EOL]     assertTrue(Arrays.equals(new String[] { "1", "2", "3" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.addAll(stringArray1, stringArray2); [EOL]     assertTrue(Arrays.equals(new String[] { "a", "b", "c", "1", "2", "3" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.addAll(ArrayUtils.EMPTY_STRING_ARRAY, (String[]) null); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_STRING_ARRAY, newArray)); [EOL]     assertTrue(Arrays.equals(new String[] {}, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.addAll(null, ArrayUtils.EMPTY_STRING_ARRAY); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_STRING_ARRAY, newArray)); [EOL]     assertTrue(Arrays.equals(new String[] {}, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.addAll(ArrayUtils.EMPTY_STRING_ARRAY, ArrayUtils.EMPTY_STRING_ARRAY); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_STRING_ARRAY, newArray)); [EOL]     assertTrue(Arrays.equals(new String[] {}, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     final String[] stringArrayNull = new String[] { null }; [EOL]     newArray = ArrayUtils.addAll(stringArrayNull, stringArrayNull); [EOL]     assertTrue(Arrays.equals(new String[] { null, null }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     assertTrue(Arrays.equals(new boolean[] { true, false, false, true }, ArrayUtils.addAll(new boolean[] { true, false }, new boolean[] { false, true }))); [EOL]     assertTrue(Arrays.equals(new boolean[] { false, true }, ArrayUtils.addAll(null, new boolean[] { false, true }))); [EOL]     assertTrue(Arrays.equals(new boolean[] { true, false }, ArrayUtils.addAll(new boolean[] { true, false }, null))); [EOL]     assertTrue(Arrays.equals(new char[] { 'a', 'b', 'c', 'd' }, ArrayUtils.addAll(new char[] { 'a', 'b' }, new char[] { 'c', 'd' }))); [EOL]     assertTrue(Arrays.equals(new char[] { 'c', 'd' }, ArrayUtils.addAll(null, new char[] { 'c', 'd' }))); [EOL]     assertTrue(Arrays.equals(new char[] { 'a', 'b' }, ArrayUtils.addAll(new char[] { 'a', 'b' }, null))); [EOL]     assertTrue(Arrays.equals(new byte[] { (byte) 0, (byte) 1, (byte) 2, (byte) 3 }, ArrayUtils.addAll(new byte[] { (byte) 0, (byte) 1 }, new byte[] { (byte) 2, (byte) 3 }))); [EOL]     assertTrue(Arrays.equals(new byte[] { (byte) 2, (byte) 3 }, ArrayUtils.addAll(null, new byte[] { (byte) 2, (byte) 3 }))); [EOL]     assertTrue(Arrays.equals(new byte[] { (byte) 0, (byte) 1 }, ArrayUtils.addAll(new byte[] { (byte) 0, (byte) 1 }, null))); [EOL]     assertTrue(Arrays.equals(new short[] { (short) 10, (short) 20, (short) 30, (short) 40 }, ArrayUtils.addAll(new short[] { (short) 10, (short) 20 }, new short[] { (short) 30, (short) 40 }))); [EOL]     assertTrue(Arrays.equals(new short[] { (short) 30, (short) 40 }, ArrayUtils.addAll(null, new short[] { (short) 30, (short) 40 }))); [EOL]     assertTrue(Arrays.equals(new short[] { (short) 10, (short) 20 }, ArrayUtils.addAll(new short[] { (short) 10, (short) 20 }, null))); [EOL]     assertTrue(Arrays.equals(new int[] { 1, 1000, -1000, -1 }, ArrayUtils.addAll(new int[] { 1, 1000 }, new int[] { -1000, -1 }))); [EOL]     assertTrue(Arrays.equals(new int[] { -1000, -1 }, ArrayUtils.addAll(null, new int[] { -1000, -1 }))); [EOL]     assertTrue(Arrays.equals(new int[] { 1, 1000 }, ArrayUtils.addAll(new int[] { 1, 1000 }, null))); [EOL]     assertTrue(Arrays.equals(new long[] { 1L, -1L, 1000L, -1000L }, ArrayUtils.addAll(new long[] { 1L, -1L }, new long[] { 1000L, -1000L }))); [EOL]     assertTrue(Arrays.equals(new long[] { 1000L, -1000L }, ArrayUtils.addAll(null, new long[] { 1000L, -1000L }))); [EOL]     assertTrue(Arrays.equals(new long[] { 1L, -1L }, ArrayUtils.addAll(new long[] { 1L, -1L }, null))); [EOL]     assertTrue(Arrays.equals(new float[] { 10.5f, 10.1f, 1.6f, 0.01f }, ArrayUtils.addAll(new float[] { 10.5f, 10.1f }, new float[] { 1.6f, 0.01f }))); [EOL]     assertTrue(Arrays.equals(new float[] { 1.6f, 0.01f }, ArrayUtils.addAll(null, new float[] { 1.6f, 0.01f }))); [EOL]     assertTrue(Arrays.equals(new float[] { 10.5f, 10.1f }, ArrayUtils.addAll(new float[] { 10.5f, 10.1f }, null))); [EOL]     assertTrue(Arrays.equals(new double[] { Math.PI, -Math.PI, 0, 9.99 }, ArrayUtils.addAll(new double[] { Math.PI, -Math.PI }, new double[] { 0, 9.99 }))); [EOL]     assertTrue(Arrays.equals(new double[] { 0, 9.99 }, ArrayUtils.addAll(null, new double[] { 0, 9.99 }))); [EOL]     assertTrue(Arrays.equals(new double[] { Math.PI, -Math.PI }, ArrayUtils.addAll(new double[] { Math.PI, -Math.PI }, null))); [EOL] }
@Test [EOL] public void testAddObjectArrayToObjectArray() { [EOL]     assertNull(ArrayUtils.addAll((Object[]) null, (Object[]) null)); [EOL]     Object[] newArray; [EOL]     final String[] stringArray1 = new String[] { "a", "b", "c" }; [EOL]     final String[] stringArray2 = new String[] { "1", "2", "3" }; [EOL]     newArray = ArrayUtils.addAll(stringArray1, (String[]) null); [EOL]     assertNotSame(stringArray1, newArray); [EOL]     assertTrue(Arrays.equals(stringArray1, newArray)); [EOL]     assertTrue(Arrays.equals(new String[] { "a", "b", "c" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.addAll(null, stringArray2); [EOL]     assertNotSame(stringArray2, newArray); [EOL]     assertTrue(Arrays.equals(stringArray2, newArray)); [EOL]     assertTrue(Arrays.equals(new String[] { "1", "2", "3" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.addAll(stringArray1, stringArray2); [EOL]     assertTrue(Arrays.equals(new String[] { "a", "b", "c", "1", "2", "3" }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.addAll(ArrayUtils.EMPTY_STRING_ARRAY, (String[]) null); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_STRING_ARRAY, newArray)); [EOL]     assertTrue(Arrays.equals(new String[] {}, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.addAll(null, ArrayUtils.EMPTY_STRING_ARRAY); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_STRING_ARRAY, newArray)); [EOL]     assertTrue(Arrays.equals(new String[] {}, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.addAll(ArrayUtils.EMPTY_STRING_ARRAY, ArrayUtils.EMPTY_STRING_ARRAY); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_STRING_ARRAY, newArray)); [EOL]     assertTrue(Arrays.equals(new String[] {}, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     final String[] stringArrayNull = new String[] { null }; [EOL]     newArray = ArrayUtils.addAll(stringArrayNull, stringArrayNull); [EOL]     assertTrue(Arrays.equals(new String[] { null, null }, newArray)); [EOL]     assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]     assertTrue(Arrays.equals(new boolean[] { true, false, false, true }, ArrayUtils.addAll(new boolean[] { true, false }, new boolean[] { false, true }))); [EOL]     assertTrue(Arrays.equals(new boolean[] { false, true }, ArrayUtils.addAll(null, new boolean[] { false, true }))); [EOL]     assertTrue(Arrays.equals(new boolean[] { true, false }, ArrayUtils.addAll(new boolean[] { true, false }, null))); [EOL]     assertTrue(Arrays.equals(new char[] { 'a', 'b', 'c', 'd' }, ArrayUtils.addAll(new char[] { 'a', 'b' }, new char[] { 'c', 'd' }))); [EOL]     assertTrue(Arrays.equals(new char[] { 'c', 'd' }, ArrayUtils.addAll(null, new char[] { 'c', 'd' }))); [EOL]     assertTrue(Arrays.equals(new char[] { 'a', 'b' }, ArrayUtils.addAll(new char[] { 'a', 'b' }, null))); [EOL]     assertTrue(Arrays.equals(new byte[] { (byte) 0, (byte) 1, (byte) 2, (byte) 3 }, ArrayUtils.addAll(new byte[] { (byte) 0, (byte) 1 }, new byte[] { (byte) 2, (byte) 3 }))); [EOL]     assertTrue(Arrays.equals(new byte[] { (byte) 2, (byte) 3 }, ArrayUtils.addAll(null, new byte[] { (byte) 2, (byte) 3 }))); [EOL]     assertTrue(Arrays.equals(new byte[] { (byte) 0, (byte) 1 }, ArrayUtils.addAll(new byte[] { (byte) 0, (byte) 1 }, null))); [EOL]     assertTrue(Arrays.equals(new short[] { (short) 10, (short) 20, (short) 30, (short) 40 }, ArrayUtils.addAll(new short[] { (short) 10, (short) 20 }, new short[] { (short) 30, (short) 40 }))); [EOL]     assertTrue(Arrays.equals(new short[] { (short) 30, (short) 40 }, ArrayUtils.addAll(null, new short[] { (short) 30, (short) 40 }))); [EOL]     assertTrue(Arrays.equals(new short[] { (short) 10, (short) 20 }, ArrayUtils.addAll(new short[] { (short) 10, (short) 20 }, null))); [EOL]     assertTrue(Arrays.equals(new int[] { 1, 1000, -1000, -1 }, ArrayUtils.addAll(new int[] { 1, 1000 }, new int[] { -1000, -1 }))); [EOL]     assertTrue(Arrays.equals(new int[] { -1000, -1 }, ArrayUtils.addAll(null, new int[] { -1000, -1 }))); [EOL]     assertTrue(Arrays.equals(new int[] { 1, 1000 }, ArrayUtils.addAll(new int[] { 1, 1000 }, null))); [EOL]     assertTrue(Arrays.equals(new long[] { 1L, -1L, 1000L, -1000L }, ArrayUtils.addAll(new long[] { 1L, -1L }, new long[] { 1000L, -1000L }))); [EOL]     assertTrue(Arrays.equals(new long[] { 1000L, -1000L }, ArrayUtils.addAll(null, new long[] { 1000L, -1000L }))); [EOL]     assertTrue(Arrays.equals(new long[] { 1L, -1L }, ArrayUtils.addAll(new long[] { 1L, -1L }, null))); [EOL]     assertTrue(Arrays.equals(new float[] { 10.5f, 10.1f, 1.6f, 0.01f }, ArrayUtils.addAll(new float[] { 10.5f, 10.1f }, new float[] { 1.6f, 0.01f }))); [EOL]     assertTrue(Arrays.equals(new float[] { 1.6f, 0.01f }, ArrayUtils.addAll(null, new float[] { 1.6f, 0.01f }))); [EOL]     assertTrue(Arrays.equals(new float[] { 10.5f, 10.1f }, ArrayUtils.addAll(new float[] { 10.5f, 10.1f }, null))); [EOL]     assertTrue(Arrays.equals(new double[] { Math.PI, -Math.PI, 0, 9.99 }, ArrayUtils.addAll(new double[] { Math.PI, -Math.PI }, new double[] { 0, 9.99 }))); [EOL]     assertTrue(Arrays.equals(new double[] { 0, 9.99 }, ArrayUtils.addAll(null, new double[] { 0, 9.99 }))); [EOL]     assertTrue(Arrays.equals(new double[] { Math.PI, -Math.PI }, ArrayUtils.addAll(new double[] { Math.PI, -Math.PI }, null))); [EOL] }
@Test [EOL] public void testAddObjectArrayByte() { [EOL]     byte[] newArray; [EOL]     newArray = ArrayUtils.add((byte[]) null, (byte) 0); [EOL]     assertTrue(Arrays.equals(new byte[] { 0 }, newArray)); [EOL]     assertEquals(Byte.TYPE, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.add((byte[]) null, (byte) 1); [EOL]     assertTrue(Arrays.equals(new byte[] { 1 }, newArray)); [EOL]     assertEquals(Byte.TYPE, newArray.getClass().getComponentType()); [EOL]     final byte[] array1 = new byte[] { 1, 2, 3 }; [EOL]     newArray = ArrayUtils.add(array1, (byte) 0); [EOL]     assertTrue(Arrays.equals(new byte[] { 1, 2, 3, 0 }, newArray)); [EOL]     assertEquals(Byte.TYPE, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.add(array1, (byte) 4); [EOL]     assertTrue(Arrays.equals(new byte[] { 1, 2, 3, 4 }, newArray)); [EOL]     assertEquals(Byte.TYPE, newArray.getClass().getComponentType()); [EOL] }
@Test [EOL] public void testAddObjectArrayByte() { [EOL]     byte[] newArray; [EOL]     newArray = ArrayUtils.add((byte[]) null, (byte) 0); [EOL]     assertTrue(Arrays.equals(new byte[] { 0 }, newArray)); [EOL]     assertEquals(Byte.TYPE, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.add((byte[]) null, (byte) 1); [EOL]     assertTrue(Arrays.equals(new byte[] { 1 }, newArray)); [EOL]     assertEquals(Byte.TYPE, newArray.getClass().getComponentType()); [EOL]     final byte[] array1 = new byte[] { 1, 2, 3 }; [EOL]     newArray = ArrayUtils.add(array1, (byte) 0); [EOL]     assertTrue(Arrays.equals(new byte[] { 1, 2, 3, 0 }, newArray)); [EOL]     assertEquals(Byte.TYPE, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.add(array1, (byte) 4); [EOL]     assertTrue(Arrays.equals(new byte[] { 1, 2, 3, 4 }, newArray)); [EOL]     assertEquals(Byte.TYPE, newArray.getClass().getComponentType()); [EOL] }
@Test [EOL] public void testRemoveCharArray() { [EOL]     char[] array; [EOL]     array = ArrayUtils.remove(new char[] { 'a' }, 0); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_CHAR_ARRAY, array)); [EOL]     assertEquals(Character.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.remove(new char[] { 'a', 'b' }, 0); [EOL]     assertTrue(Arrays.equals(new char[] { 'b' }, array)); [EOL]     assertEquals(Character.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.remove(new char[] { 'a', 'b' }, 1); [EOL]     assertTrue(Arrays.equals(new char[] { 'a' }, array)); [EOL]     assertEquals(Character.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.remove(new char[] { 'a', 'b', 'c' }, 1); [EOL]     assertTrue(Arrays.equals(new char[] { 'a', 'c' }, array)); [EOL]     assertEquals(Character.TYPE, array.getClass().getComponentType()); [EOL]     try { [EOL]         ArrayUtils.remove(new char[] { 'a', 'b' }, -1); [EOL]         fail("IndexOutOfBoundsException expected"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         ArrayUtils.remove(new char[] { 'a', 'b' }, 2); [EOL]         fail("IndexOutOfBoundsException expected"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         ArrayUtils.remove((char[]) null, 0); [EOL]         fail("IndexOutOfBoundsException expected"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL] }
@Test [EOL] public void testRemoveCharArray() { [EOL]     char[] array; [EOL]     array = ArrayUtils.remove(new char[] { 'a' }, 0); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_CHAR_ARRAY, array)); [EOL]     assertEquals(Character.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.remove(new char[] { 'a', 'b' }, 0); [EOL]     assertTrue(Arrays.equals(new char[] { 'b' }, array)); [EOL]     assertEquals(Character.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.remove(new char[] { 'a', 'b' }, 1); [EOL]     assertTrue(Arrays.equals(new char[] { 'a' }, array)); [EOL]     assertEquals(Character.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.remove(new char[] { 'a', 'b', 'c' }, 1); [EOL]     assertTrue(Arrays.equals(new char[] { 'a', 'c' }, array)); [EOL]     assertEquals(Character.TYPE, array.getClass().getComponentType()); [EOL]     try { [EOL]         ArrayUtils.remove(new char[] { 'a', 'b' }, -1); [EOL]         fail("IndexOutOfBoundsException expected"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         ArrayUtils.remove(new char[] { 'a', 'b' }, 2); [EOL]         fail("IndexOutOfBoundsException expected"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         ArrayUtils.remove((char[]) null, 0); [EOL]         fail("IndexOutOfBoundsException expected"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL] }
@Test [EOL] public void testRemoveCharArray() { [EOL]     char[] array; [EOL]     array = ArrayUtils.remove(new char[] { 'a' }, 0); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_CHAR_ARRAY, array)); [EOL]     assertEquals(Character.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.remove(new char[] { 'a', 'b' }, 0); [EOL]     assertTrue(Arrays.equals(new char[] { 'b' }, array)); [EOL]     assertEquals(Character.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.remove(new char[] { 'a', 'b' }, 1); [EOL]     assertTrue(Arrays.equals(new char[] { 'a' }, array)); [EOL]     assertEquals(Character.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.remove(new char[] { 'a', 'b', 'c' }, 1); [EOL]     assertTrue(Arrays.equals(new char[] { 'a', 'c' }, array)); [EOL]     assertEquals(Character.TYPE, array.getClass().getComponentType()); [EOL]     try { [EOL]         ArrayUtils.remove(new char[] { 'a', 'b' }, -1); [EOL]         fail("IndexOutOfBoundsException expected"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         ArrayUtils.remove(new char[] { 'a', 'b' }, 2); [EOL]         fail("IndexOutOfBoundsException expected"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         ArrayUtils.remove((char[]) null, 0); [EOL]         fail("IndexOutOfBoundsException expected"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL] }
@Test [EOL] public void testRemoveCharArray() { [EOL]     char[] array; [EOL]     array = ArrayUtils.remove(new char[] { 'a' }, 0); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_CHAR_ARRAY, array)); [EOL]     assertEquals(Character.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.remove(new char[] { 'a', 'b' }, 0); [EOL]     assertTrue(Arrays.equals(new char[] { 'b' }, array)); [EOL]     assertEquals(Character.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.remove(new char[] { 'a', 'b' }, 1); [EOL]     assertTrue(Arrays.equals(new char[] { 'a' }, array)); [EOL]     assertEquals(Character.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.remove(new char[] { 'a', 'b', 'c' }, 1); [EOL]     assertTrue(Arrays.equals(new char[] { 'a', 'c' }, array)); [EOL]     assertEquals(Character.TYPE, array.getClass().getComponentType()); [EOL]     try { [EOL]         ArrayUtils.remove(new char[] { 'a', 'b' }, -1); [EOL]         fail("IndexOutOfBoundsException expected"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         ArrayUtils.remove(new char[] { 'a', 'b' }, 2); [EOL]         fail("IndexOutOfBoundsException expected"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         ArrayUtils.remove((char[]) null, 0); [EOL]         fail("IndexOutOfBoundsException expected"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL] }
@Test [EOL] public void testRemoveCharArray() { [EOL]     char[] array; [EOL]     array = ArrayUtils.remove(new char[] { 'a' }, 0); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_CHAR_ARRAY, array)); [EOL]     assertEquals(Character.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.remove(new char[] { 'a', 'b' }, 0); [EOL]     assertTrue(Arrays.equals(new char[] { 'b' }, array)); [EOL]     assertEquals(Character.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.remove(new char[] { 'a', 'b' }, 1); [EOL]     assertTrue(Arrays.equals(new char[] { 'a' }, array)); [EOL]     assertEquals(Character.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.remove(new char[] { 'a', 'b', 'c' }, 1); [EOL]     assertTrue(Arrays.equals(new char[] { 'a', 'c' }, array)); [EOL]     assertEquals(Character.TYPE, array.getClass().getComponentType()); [EOL]     try { [EOL]         ArrayUtils.remove(new char[] { 'a', 'b' }, -1); [EOL]         fail("IndexOutOfBoundsException expected"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         ArrayUtils.remove(new char[] { 'a', 'b' }, 2); [EOL]         fail("IndexOutOfBoundsException expected"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         ArrayUtils.remove((char[]) null, 0); [EOL]         fail("IndexOutOfBoundsException expected"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL] }
@Test [EOL] public void testRemoveCharArray() { [EOL]     char[] array; [EOL]     array = ArrayUtils.remove(new char[] { 'a' }, 0); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_CHAR_ARRAY, array)); [EOL]     assertEquals(Character.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.remove(new char[] { 'a', 'b' }, 0); [EOL]     assertTrue(Arrays.equals(new char[] { 'b' }, array)); [EOL]     assertEquals(Character.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.remove(new char[] { 'a', 'b' }, 1); [EOL]     assertTrue(Arrays.equals(new char[] { 'a' }, array)); [EOL]     assertEquals(Character.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.remove(new char[] { 'a', 'b', 'c' }, 1); [EOL]     assertTrue(Arrays.equals(new char[] { 'a', 'c' }, array)); [EOL]     assertEquals(Character.TYPE, array.getClass().getComponentType()); [EOL]     try { [EOL]         ArrayUtils.remove(new char[] { 'a', 'b' }, -1); [EOL]         fail("IndexOutOfBoundsException expected"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         ArrayUtils.remove(new char[] { 'a', 'b' }, 2); [EOL]         fail("IndexOutOfBoundsException expected"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         ArrayUtils.remove((char[]) null, 0); [EOL]         fail("IndexOutOfBoundsException expected"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL] }
@Test [EOL] public void testRemoveDoubleArray() { [EOL]     double[] array; [EOL]     array = ArrayUtils.remove(new double[] { 1 }, 0); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_DOUBLE_ARRAY, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.remove(new double[] { 1, 2 }, 0); [EOL]     assertTrue(Arrays.equals(new double[] { 2 }, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.remove(new double[] { 1, 2 }, 1); [EOL]     assertTrue(Arrays.equals(new double[] { 1 }, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.remove(new double[] { 1, 2, 1 }, 1); [EOL]     assertTrue(Arrays.equals(new double[] { 1, 1 }, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     try { [EOL]         ArrayUtils.remove(new double[] { 1, 2 }, -1); [EOL]         fail("IndexOutOfBoundsException expected"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         ArrayUtils.remove(new double[] { 1, 2 }, 2); [EOL]         fail("IndexOutOfBoundsException expected"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         ArrayUtils.remove((double[]) null, 0); [EOL]         fail("IndexOutOfBoundsException expected"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL] }
@Test [EOL] public void testRemoveDoubleArray() { [EOL]     double[] array; [EOL]     array = ArrayUtils.remove(new double[] { 1 }, 0); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_DOUBLE_ARRAY, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.remove(new double[] { 1, 2 }, 0); [EOL]     assertTrue(Arrays.equals(new double[] { 2 }, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.remove(new double[] { 1, 2 }, 1); [EOL]     assertTrue(Arrays.equals(new double[] { 1 }, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.remove(new double[] { 1, 2, 1 }, 1); [EOL]     assertTrue(Arrays.equals(new double[] { 1, 1 }, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     try { [EOL]         ArrayUtils.remove(new double[] { 1, 2 }, -1); [EOL]         fail("IndexOutOfBoundsException expected"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         ArrayUtils.remove(new double[] { 1, 2 }, 2); [EOL]         fail("IndexOutOfBoundsException expected"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         ArrayUtils.remove((double[]) null, 0); [EOL]         fail("IndexOutOfBoundsException expected"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL] }
@Test [EOL] public void testRemoveDoubleArray() { [EOL]     double[] array; [EOL]     array = ArrayUtils.remove(new double[] { 1 }, 0); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_DOUBLE_ARRAY, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.remove(new double[] { 1, 2 }, 0); [EOL]     assertTrue(Arrays.equals(new double[] { 2 }, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.remove(new double[] { 1, 2 }, 1); [EOL]     assertTrue(Arrays.equals(new double[] { 1 }, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.remove(new double[] { 1, 2, 1 }, 1); [EOL]     assertTrue(Arrays.equals(new double[] { 1, 1 }, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     try { [EOL]         ArrayUtils.remove(new double[] { 1, 2 }, -1); [EOL]         fail("IndexOutOfBoundsException expected"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         ArrayUtils.remove(new double[] { 1, 2 }, 2); [EOL]         fail("IndexOutOfBoundsException expected"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         ArrayUtils.remove((double[]) null, 0); [EOL]         fail("IndexOutOfBoundsException expected"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL] }
@Test [EOL] public void testRemoveDoubleArray() { [EOL]     double[] array; [EOL]     array = ArrayUtils.remove(new double[] { 1 }, 0); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_DOUBLE_ARRAY, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.remove(new double[] { 1, 2 }, 0); [EOL]     assertTrue(Arrays.equals(new double[] { 2 }, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.remove(new double[] { 1, 2 }, 1); [EOL]     assertTrue(Arrays.equals(new double[] { 1 }, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.remove(new double[] { 1, 2, 1 }, 1); [EOL]     assertTrue(Arrays.equals(new double[] { 1, 1 }, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     try { [EOL]         ArrayUtils.remove(new double[] { 1, 2 }, -1); [EOL]         fail("IndexOutOfBoundsException expected"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         ArrayUtils.remove(new double[] { 1, 2 }, 2); [EOL]         fail("IndexOutOfBoundsException expected"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         ArrayUtils.remove((double[]) null, 0); [EOL]         fail("IndexOutOfBoundsException expected"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL] }
@Test [EOL] public void testRemoveDoubleArray() { [EOL]     double[] array; [EOL]     array = ArrayUtils.remove(new double[] { 1 }, 0); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_DOUBLE_ARRAY, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.remove(new double[] { 1, 2 }, 0); [EOL]     assertTrue(Arrays.equals(new double[] { 2 }, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.remove(new double[] { 1, 2 }, 1); [EOL]     assertTrue(Arrays.equals(new double[] { 1 }, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.remove(new double[] { 1, 2, 1 }, 1); [EOL]     assertTrue(Arrays.equals(new double[] { 1, 1 }, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     try { [EOL]         ArrayUtils.remove(new double[] { 1, 2 }, -1); [EOL]         fail("IndexOutOfBoundsException expected"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         ArrayUtils.remove(new double[] { 1, 2 }, 2); [EOL]         fail("IndexOutOfBoundsException expected"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         ArrayUtils.remove((double[]) null, 0); [EOL]         fail("IndexOutOfBoundsException expected"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL] }
@Test [EOL] public void testRemoveElementShortArray() { [EOL]     short[] array; [EOL]     array = ArrayUtils.removeElement((short[]) null, (short) 1); [EOL]     assertNull(array); [EOL]     array = ArrayUtils.removeElement(ArrayUtils.EMPTY_SHORT_ARRAY, (short) 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_SHORT_ARRAY, array)); [EOL]     assertEquals(Short.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new short[] { 1 }, (short) 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_SHORT_ARRAY, array)); [EOL]     assertEquals(Short.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new short[] { 1, 2 }, (short) 1); [EOL]     assertTrue(Arrays.equals(new short[] { 2 }, array)); [EOL]     assertEquals(Short.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new short[] { 1, 2, 1 }, (short) 1); [EOL]     assertTrue(Arrays.equals(new short[] { 2, 1 }, array)); [EOL]     assertEquals(Short.TYPE, array.getClass().getComponentType()); [EOL] }
@Test [EOL] public void testRemoveElementShortArray() { [EOL]     short[] array; [EOL]     array = ArrayUtils.removeElement((short[]) null, (short) 1); [EOL]     assertNull(array); [EOL]     array = ArrayUtils.removeElement(ArrayUtils.EMPTY_SHORT_ARRAY, (short) 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_SHORT_ARRAY, array)); [EOL]     assertEquals(Short.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new short[] { 1 }, (short) 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_SHORT_ARRAY, array)); [EOL]     assertEquals(Short.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new short[] { 1, 2 }, (short) 1); [EOL]     assertTrue(Arrays.equals(new short[] { 2 }, array)); [EOL]     assertEquals(Short.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new short[] { 1, 2, 1 }, (short) 1); [EOL]     assertTrue(Arrays.equals(new short[] { 2, 1 }, array)); [EOL]     assertEquals(Short.TYPE, array.getClass().getComponentType()); [EOL] }
@Test [EOL] public void testRemoveElementShortArray() { [EOL]     short[] array; [EOL]     array = ArrayUtils.removeElement((short[]) null, (short) 1); [EOL]     assertNull(array); [EOL]     array = ArrayUtils.removeElement(ArrayUtils.EMPTY_SHORT_ARRAY, (short) 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_SHORT_ARRAY, array)); [EOL]     assertEquals(Short.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new short[] { 1 }, (short) 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_SHORT_ARRAY, array)); [EOL]     assertEquals(Short.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new short[] { 1, 2 }, (short) 1); [EOL]     assertTrue(Arrays.equals(new short[] { 2 }, array)); [EOL]     assertEquals(Short.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new short[] { 1, 2, 1 }, (short) 1); [EOL]     assertTrue(Arrays.equals(new short[] { 2, 1 }, array)); [EOL]     assertEquals(Short.TYPE, array.getClass().getComponentType()); [EOL] }
@Test [EOL] public void testRemoveElementShortArray() { [EOL]     short[] array; [EOL]     array = ArrayUtils.removeElement((short[]) null, (short) 1); [EOL]     assertNull(array); [EOL]     array = ArrayUtils.removeElement(ArrayUtils.EMPTY_SHORT_ARRAY, (short) 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_SHORT_ARRAY, array)); [EOL]     assertEquals(Short.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new short[] { 1 }, (short) 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_SHORT_ARRAY, array)); [EOL]     assertEquals(Short.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new short[] { 1, 2 }, (short) 1); [EOL]     assertTrue(Arrays.equals(new short[] { 2 }, array)); [EOL]     assertEquals(Short.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new short[] { 1, 2, 1 }, (short) 1); [EOL]     assertTrue(Arrays.equals(new short[] { 2, 1 }, array)); [EOL]     assertEquals(Short.TYPE, array.getClass().getComponentType()); [EOL] }
@Test [EOL] public void testRemoveElementShortArray() { [EOL]     short[] array; [EOL]     array = ArrayUtils.removeElement((short[]) null, (short) 1); [EOL]     assertNull(array); [EOL]     array = ArrayUtils.removeElement(ArrayUtils.EMPTY_SHORT_ARRAY, (short) 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_SHORT_ARRAY, array)); [EOL]     assertEquals(Short.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new short[] { 1 }, (short) 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_SHORT_ARRAY, array)); [EOL]     assertEquals(Short.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new short[] { 1, 2 }, (short) 1); [EOL]     assertTrue(Arrays.equals(new short[] { 2 }, array)); [EOL]     assertEquals(Short.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new short[] { 1, 2, 1 }, (short) 1); [EOL]     assertTrue(Arrays.equals(new short[] { 2, 1 }, array)); [EOL]     assertEquals(Short.TYPE, array.getClass().getComponentType()); [EOL] }
@Test [EOL] public void testRemoveElementShortArray() { [EOL]     short[] array; [EOL]     array = ArrayUtils.removeElement((short[]) null, (short) 1); [EOL]     assertNull(array); [EOL]     array = ArrayUtils.removeElement(ArrayUtils.EMPTY_SHORT_ARRAY, (short) 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_SHORT_ARRAY, array)); [EOL]     assertEquals(Short.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new short[] { 1 }, (short) 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_SHORT_ARRAY, array)); [EOL]     assertEquals(Short.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new short[] { 1, 2 }, (short) 1); [EOL]     assertTrue(Arrays.equals(new short[] { 2 }, array)); [EOL]     assertEquals(Short.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new short[] { 1, 2, 1 }, (short) 1); [EOL]     assertTrue(Arrays.equals(new short[] { 2, 1 }, array)); [EOL]     assertEquals(Short.TYPE, array.getClass().getComponentType()); [EOL] }
@Test [EOL] public void testRemoveElementShortArray() { [EOL]     short[] array; [EOL]     array = ArrayUtils.removeElement((short[]) null, (short) 1); [EOL]     assertNull(array); [EOL]     array = ArrayUtils.removeElement(ArrayUtils.EMPTY_SHORT_ARRAY, (short) 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_SHORT_ARRAY, array)); [EOL]     assertEquals(Short.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new short[] { 1 }, (short) 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_SHORT_ARRAY, array)); [EOL]     assertEquals(Short.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new short[] { 1, 2 }, (short) 1); [EOL]     assertTrue(Arrays.equals(new short[] { 2 }, array)); [EOL]     assertEquals(Short.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new short[] { 1, 2, 1 }, (short) 1); [EOL]     assertTrue(Arrays.equals(new short[] { 2, 1 }, array)); [EOL]     assertEquals(Short.TYPE, array.getClass().getComponentType()); [EOL] }
@Test [EOL] public void testRemoveElementShortArray() { [EOL]     short[] array; [EOL]     array = ArrayUtils.removeElement((short[]) null, (short) 1); [EOL]     assertNull(array); [EOL]     array = ArrayUtils.removeElement(ArrayUtils.EMPTY_SHORT_ARRAY, (short) 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_SHORT_ARRAY, array)); [EOL]     assertEquals(Short.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new short[] { 1 }, (short) 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_SHORT_ARRAY, array)); [EOL]     assertEquals(Short.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new short[] { 1, 2 }, (short) 1); [EOL]     assertTrue(Arrays.equals(new short[] { 2 }, array)); [EOL]     assertEquals(Short.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new short[] { 1, 2, 1 }, (short) 1); [EOL]     assertTrue(Arrays.equals(new short[] { 2, 1 }, array)); [EOL]     assertEquals(Short.TYPE, array.getClass().getComponentType()); [EOL] }
@Test [EOL] public void testRemoveElementShortArray() { [EOL]     short[] array; [EOL]     array = ArrayUtils.removeElement((short[]) null, (short) 1); [EOL]     assertNull(array); [EOL]     array = ArrayUtils.removeElement(ArrayUtils.EMPTY_SHORT_ARRAY, (short) 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_SHORT_ARRAY, array)); [EOL]     assertEquals(Short.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new short[] { 1 }, (short) 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_SHORT_ARRAY, array)); [EOL]     assertEquals(Short.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new short[] { 1, 2 }, (short) 1); [EOL]     assertTrue(Arrays.equals(new short[] { 2 }, array)); [EOL]     assertEquals(Short.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new short[] { 1, 2, 1 }, (short) 1); [EOL]     assertTrue(Arrays.equals(new short[] { 2, 1 }, array)); [EOL]     assertEquals(Short.TYPE, array.getClass().getComponentType()); [EOL] }
@Test [EOL] public void testRemoveElementShortArray() { [EOL]     short[] array; [EOL]     array = ArrayUtils.removeElement((short[]) null, (short) 1); [EOL]     assertNull(array); [EOL]     array = ArrayUtils.removeElement(ArrayUtils.EMPTY_SHORT_ARRAY, (short) 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_SHORT_ARRAY, array)); [EOL]     assertEquals(Short.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new short[] { 1 }, (short) 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_SHORT_ARRAY, array)); [EOL]     assertEquals(Short.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new short[] { 1, 2 }, (short) 1); [EOL]     assertTrue(Arrays.equals(new short[] { 2 }, array)); [EOL]     assertEquals(Short.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElement(new short[] { 1, 2, 1 }, (short) 1); [EOL]     assertTrue(Arrays.equals(new short[] { 2, 1 }, array)); [EOL]     assertEquals(Short.TYPE, array.getClass().getComponentType()); [EOL] }
@Test [EOL] public void testRemoveDoubleArray() { [EOL]     double[] array; [EOL]     array = ArrayUtils.remove(new double[] { 1 }, 0); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_DOUBLE_ARRAY, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.remove(new double[] { 1, 2 }, 0); [EOL]     assertTrue(Arrays.equals(new double[] { 2 }, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.remove(new double[] { 1, 2 }, 1); [EOL]     assertTrue(Arrays.equals(new double[] { 1 }, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.remove(new double[] { 1, 2, 1 }, 1); [EOL]     assertTrue(Arrays.equals(new double[] { 1, 1 }, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     try { [EOL]         ArrayUtils.remove(new double[] { 1, 2 }, -1); [EOL]         fail("IndexOutOfBoundsException expected"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         ArrayUtils.remove(new double[] { 1, 2 }, 2); [EOL]         fail("IndexOutOfBoundsException expected"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         ArrayUtils.remove((double[]) null, 0); [EOL]         fail("IndexOutOfBoundsException expected"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL] }
@Test [EOL] public void testRemoveDoubleArray() { [EOL]     double[] array; [EOL]     array = ArrayUtils.remove(new double[] { 1 }, 0); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_DOUBLE_ARRAY, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.remove(new double[] { 1, 2 }, 0); [EOL]     assertTrue(Arrays.equals(new double[] { 2 }, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.remove(new double[] { 1, 2 }, 1); [EOL]     assertTrue(Arrays.equals(new double[] { 1 }, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.remove(new double[] { 1, 2, 1 }, 1); [EOL]     assertTrue(Arrays.equals(new double[] { 1, 1 }, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     try { [EOL]         ArrayUtils.remove(new double[] { 1, 2 }, -1); [EOL]         fail("IndexOutOfBoundsException expected"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         ArrayUtils.remove(new double[] { 1, 2 }, 2); [EOL]         fail("IndexOutOfBoundsException expected"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         ArrayUtils.remove((double[]) null, 0); [EOL]         fail("IndexOutOfBoundsException expected"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL] }
@Test [EOL] public void testRemoveDoubleArray() { [EOL]     double[] array; [EOL]     array = ArrayUtils.remove(new double[] { 1 }, 0); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_DOUBLE_ARRAY, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.remove(new double[] { 1, 2 }, 0); [EOL]     assertTrue(Arrays.equals(new double[] { 2 }, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.remove(new double[] { 1, 2 }, 1); [EOL]     assertTrue(Arrays.equals(new double[] { 1 }, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.remove(new double[] { 1, 2, 1 }, 1); [EOL]     assertTrue(Arrays.equals(new double[] { 1, 1 }, array)); [EOL]     assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     try { [EOL]         ArrayUtils.remove(new double[] { 1, 2 }, -1); [EOL]         fail("IndexOutOfBoundsException expected"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         ArrayUtils.remove(new double[] { 1, 2 }, 2); [EOL]         fail("IndexOutOfBoundsException expected"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         ArrayUtils.remove((double[]) null, 0); [EOL]         fail("IndexOutOfBoundsException expected"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL] }
@Test [EOL] public void testRemoveAllNumberArray() { [EOL]     final Number[] inarray = { Integer.valueOf(1), Long.valueOf(2L), Byte.valueOf((byte) 3) }; [EOL]     assertEquals(3, inarray.length); [EOL]     Number[] outarray; [EOL]     outarray = ArrayUtils.removeAll(inarray, 1); [EOL]     assertArrayEquals(new Number[] { Integer.valueOf(1), Byte.valueOf((byte) 3) }, outarray); [EOL]     assertEquals(Number.class, outarray.getClass().getComponentType()); [EOL]     outarray = ArrayUtils.removeAll(outarray, 1); [EOL]     assertArrayEquals(new Number[] { Integer.valueOf(1) }, outarray); [EOL]     assertEquals(Number.class, outarray.getClass().getComponentType()); [EOL]     outarray = ArrayUtils.removeAll(outarray, 0); [EOL]     assertEquals(0, outarray.length); [EOL]     assertEquals(Number.class, outarray.getClass().getComponentType()); [EOL]     outarray = ArrayUtils.removeAll(inarray, 0, 1); [EOL]     assertArrayEquals(new Number[] { Byte.valueOf((byte) 3) }, outarray); [EOL]     assertEquals(Number.class, outarray.getClass().getComponentType()); [EOL]     outarray = ArrayUtils.removeAll(inarray, 0, 2); [EOL]     assertArrayEquals(new Number[] { Long.valueOf(2L) }, outarray); [EOL]     assertEquals(Number.class, outarray.getClass().getComponentType()); [EOL]     outarray = ArrayUtils.removeAll(inarray, 1, 2); [EOL]     assertArrayEquals(new Number[] { Integer.valueOf(1) }, outarray); [EOL]     assertEquals(Number.class, outarray.getClass().getComponentType()); [EOL] }
@Test [EOL] public void testRemoveAllNumberArray() { [EOL]     final Number[] inarray = { Integer.valueOf(1), Long.valueOf(2L), Byte.valueOf((byte) 3) }; [EOL]     assertEquals(3, inarray.length); [EOL]     Number[] outarray; [EOL]     outarray = ArrayUtils.removeAll(inarray, 1); [EOL]     assertArrayEquals(new Number[] { Integer.valueOf(1), Byte.valueOf((byte) 3) }, outarray); [EOL]     assertEquals(Number.class, outarray.getClass().getComponentType()); [EOL]     outarray = ArrayUtils.removeAll(outarray, 1); [EOL]     assertArrayEquals(new Number[] { Integer.valueOf(1) }, outarray); [EOL]     assertEquals(Number.class, outarray.getClass().getComponentType()); [EOL]     outarray = ArrayUtils.removeAll(outarray, 0); [EOL]     assertEquals(0, outarray.length); [EOL]     assertEquals(Number.class, outarray.getClass().getComponentType()); [EOL]     outarray = ArrayUtils.removeAll(inarray, 0, 1); [EOL]     assertArrayEquals(new Number[] { Byte.valueOf((byte) 3) }, outarray); [EOL]     assertEquals(Number.class, outarray.getClass().getComponentType()); [EOL]     outarray = ArrayUtils.removeAll(inarray, 0, 2); [EOL]     assertArrayEquals(new Number[] { Long.valueOf(2L) }, outarray); [EOL]     assertEquals(Number.class, outarray.getClass().getComponentType()); [EOL]     outarray = ArrayUtils.removeAll(inarray, 1, 2); [EOL]     assertArrayEquals(new Number[] { Integer.valueOf(1) }, outarray); [EOL]     assertEquals(Number.class, outarray.getClass().getComponentType()); [EOL] }
@Test [EOL] public void testRemoveAllNumberArray() { [EOL]     final Number[] inarray = { Integer.valueOf(1), Long.valueOf(2L), Byte.valueOf((byte) 3) }; [EOL]     assertEquals(3, inarray.length); [EOL]     Number[] outarray; [EOL]     outarray = ArrayUtils.removeAll(inarray, 1); [EOL]     assertArrayEquals(new Number[] { Integer.valueOf(1), Byte.valueOf((byte) 3) }, outarray); [EOL]     assertEquals(Number.class, outarray.getClass().getComponentType()); [EOL]     outarray = ArrayUtils.removeAll(outarray, 1); [EOL]     assertArrayEquals(new Number[] { Integer.valueOf(1) }, outarray); [EOL]     assertEquals(Number.class, outarray.getClass().getComponentType()); [EOL]     outarray = ArrayUtils.removeAll(outarray, 0); [EOL]     assertEquals(0, outarray.length); [EOL]     assertEquals(Number.class, outarray.getClass().getComponentType()); [EOL]     outarray = ArrayUtils.removeAll(inarray, 0, 1); [EOL]     assertArrayEquals(new Number[] { Byte.valueOf((byte) 3) }, outarray); [EOL]     assertEquals(Number.class, outarray.getClass().getComponentType()); [EOL]     outarray = ArrayUtils.removeAll(inarray, 0, 2); [EOL]     assertArrayEquals(new Number[] { Long.valueOf(2L) }, outarray); [EOL]     assertEquals(Number.class, outarray.getClass().getComponentType()); [EOL]     outarray = ArrayUtils.removeAll(inarray, 1, 2); [EOL]     assertArrayEquals(new Number[] { Integer.valueOf(1) }, outarray); [EOL]     assertEquals(Number.class, outarray.getClass().getComponentType()); [EOL] }
@Test [EOL] public void testRemoveAllNumberArray() { [EOL]     final Number[] inarray = { Integer.valueOf(1), Long.valueOf(2L), Byte.valueOf((byte) 3) }; [EOL]     assertEquals(3, inarray.length); [EOL]     Number[] outarray; [EOL]     outarray = ArrayUtils.removeAll(inarray, 1); [EOL]     assertArrayEquals(new Number[] { Integer.valueOf(1), Byte.valueOf((byte) 3) }, outarray); [EOL]     assertEquals(Number.class, outarray.getClass().getComponentType()); [EOL]     outarray = ArrayUtils.removeAll(outarray, 1); [EOL]     assertArrayEquals(new Number[] { Integer.valueOf(1) }, outarray); [EOL]     assertEquals(Number.class, outarray.getClass().getComponentType()); [EOL]     outarray = ArrayUtils.removeAll(outarray, 0); [EOL]     assertEquals(0, outarray.length); [EOL]     assertEquals(Number.class, outarray.getClass().getComponentType()); [EOL]     outarray = ArrayUtils.removeAll(inarray, 0, 1); [EOL]     assertArrayEquals(new Number[] { Byte.valueOf((byte) 3) }, outarray); [EOL]     assertEquals(Number.class, outarray.getClass().getComponentType()); [EOL]     outarray = ArrayUtils.removeAll(inarray, 0, 2); [EOL]     assertArrayEquals(new Number[] { Long.valueOf(2L) }, outarray); [EOL]     assertEquals(Number.class, outarray.getClass().getComponentType()); [EOL]     outarray = ArrayUtils.removeAll(inarray, 1, 2); [EOL]     assertArrayEquals(new Number[] { Integer.valueOf(1) }, outarray); [EOL]     assertEquals(Number.class, outarray.getClass().getComponentType()); [EOL] }
@Test [EOL] public void testRemoveAllNumberArray() { [EOL]     final Number[] inarray = { Integer.valueOf(1), Long.valueOf(2L), Byte.valueOf((byte) 3) }; [EOL]     assertEquals(3, inarray.length); [EOL]     Number[] outarray; [EOL]     outarray = ArrayUtils.removeAll(inarray, 1); [EOL]     assertArrayEquals(new Number[] { Integer.valueOf(1), Byte.valueOf((byte) 3) }, outarray); [EOL]     assertEquals(Number.class, outarray.getClass().getComponentType()); [EOL]     outarray = ArrayUtils.removeAll(outarray, 1); [EOL]     assertArrayEquals(new Number[] { Integer.valueOf(1) }, outarray); [EOL]     assertEquals(Number.class, outarray.getClass().getComponentType()); [EOL]     outarray = ArrayUtils.removeAll(outarray, 0); [EOL]     assertEquals(0, outarray.length); [EOL]     assertEquals(Number.class, outarray.getClass().getComponentType()); [EOL]     outarray = ArrayUtils.removeAll(inarray, 0, 1); [EOL]     assertArrayEquals(new Number[] { Byte.valueOf((byte) 3) }, outarray); [EOL]     assertEquals(Number.class, outarray.getClass().getComponentType()); [EOL]     outarray = ArrayUtils.removeAll(inarray, 0, 2); [EOL]     assertArrayEquals(new Number[] { Long.valueOf(2L) }, outarray); [EOL]     assertEquals(Number.class, outarray.getClass().getComponentType()); [EOL]     outarray = ArrayUtils.removeAll(inarray, 1, 2); [EOL]     assertArrayEquals(new Number[] { Integer.valueOf(1) }, outarray); [EOL]     assertEquals(Number.class, outarray.getClass().getComponentType()); [EOL] }
@Test [EOL] public void testRemoveAllNumberArray() { [EOL]     final Number[] inarray = { Integer.valueOf(1), Long.valueOf(2L), Byte.valueOf((byte) 3) }; [EOL]     assertEquals(3, inarray.length); [EOL]     Number[] outarray; [EOL]     outarray = ArrayUtils.removeAll(inarray, 1); [EOL]     assertArrayEquals(new Number[] { Integer.valueOf(1), Byte.valueOf((byte) 3) }, outarray); [EOL]     assertEquals(Number.class, outarray.getClass().getComponentType()); [EOL]     outarray = ArrayUtils.removeAll(outarray, 1); [EOL]     assertArrayEquals(new Number[] { Integer.valueOf(1) }, outarray); [EOL]     assertEquals(Number.class, outarray.getClass().getComponentType()); [EOL]     outarray = ArrayUtils.removeAll(outarray, 0); [EOL]     assertEquals(0, outarray.length); [EOL]     assertEquals(Number.class, outarray.getClass().getComponentType()); [EOL]     outarray = ArrayUtils.removeAll(inarray, 0, 1); [EOL]     assertArrayEquals(new Number[] { Byte.valueOf((byte) 3) }, outarray); [EOL]     assertEquals(Number.class, outarray.getClass().getComponentType()); [EOL]     outarray = ArrayUtils.removeAll(inarray, 0, 2); [EOL]     assertArrayEquals(new Number[] { Long.valueOf(2L) }, outarray); [EOL]     assertEquals(Number.class, outarray.getClass().getComponentType()); [EOL]     outarray = ArrayUtils.removeAll(inarray, 1, 2); [EOL]     assertArrayEquals(new Number[] { Integer.valueOf(1) }, outarray); [EOL]     assertEquals(Number.class, outarray.getClass().getComponentType()); [EOL] }
@Test [EOL] public void testRemoveAllNumberArray() { [EOL]     final Number[] inarray = { Integer.valueOf(1), Long.valueOf(2L), Byte.valueOf((byte) 3) }; [EOL]     assertEquals(3, inarray.length); [EOL]     Number[] outarray; [EOL]     outarray = ArrayUtils.removeAll(inarray, 1); [EOL]     assertArrayEquals(new Number[] { Integer.valueOf(1), Byte.valueOf((byte) 3) }, outarray); [EOL]     assertEquals(Number.class, outarray.getClass().getComponentType()); [EOL]     outarray = ArrayUtils.removeAll(outarray, 1); [EOL]     assertArrayEquals(new Number[] { Integer.valueOf(1) }, outarray); [EOL]     assertEquals(Number.class, outarray.getClass().getComponentType()); [EOL]     outarray = ArrayUtils.removeAll(outarray, 0); [EOL]     assertEquals(0, outarray.length); [EOL]     assertEquals(Number.class, outarray.getClass().getComponentType()); [EOL]     outarray = ArrayUtils.removeAll(inarray, 0, 1); [EOL]     assertArrayEquals(new Number[] { Byte.valueOf((byte) 3) }, outarray); [EOL]     assertEquals(Number.class, outarray.getClass().getComponentType()); [EOL]     outarray = ArrayUtils.removeAll(inarray, 0, 2); [EOL]     assertArrayEquals(new Number[] { Long.valueOf(2L) }, outarray); [EOL]     assertEquals(Number.class, outarray.getClass().getComponentType()); [EOL]     outarray = ArrayUtils.removeAll(inarray, 1, 2); [EOL]     assertArrayEquals(new Number[] { Integer.valueOf(1) }, outarray); [EOL]     assertEquals(Number.class, outarray.getClass().getComponentType()); [EOL] }
@Test [EOL] public void testRemoveAllNumberArray() { [EOL]     final Number[] inarray = { Integer.valueOf(1), Long.valueOf(2L), Byte.valueOf((byte) 3) }; [EOL]     assertEquals(3, inarray.length); [EOL]     Number[] outarray; [EOL]     outarray = ArrayUtils.removeAll(inarray, 1); [EOL]     assertArrayEquals(new Number[] { Integer.valueOf(1), Byte.valueOf((byte) 3) }, outarray); [EOL]     assertEquals(Number.class, outarray.getClass().getComponentType()); [EOL]     outarray = ArrayUtils.removeAll(outarray, 1); [EOL]     assertArrayEquals(new Number[] { Integer.valueOf(1) }, outarray); [EOL]     assertEquals(Number.class, outarray.getClass().getComponentType()); [EOL]     outarray = ArrayUtils.removeAll(outarray, 0); [EOL]     assertEquals(0, outarray.length); [EOL]     assertEquals(Number.class, outarray.getClass().getComponentType()); [EOL]     outarray = ArrayUtils.removeAll(inarray, 0, 1); [EOL]     assertArrayEquals(new Number[] { Byte.valueOf((byte) 3) }, outarray); [EOL]     assertEquals(Number.class, outarray.getClass().getComponentType()); [EOL]     outarray = ArrayUtils.removeAll(inarray, 0, 2); [EOL]     assertArrayEquals(new Number[] { Long.valueOf(2L) }, outarray); [EOL]     assertEquals(Number.class, outarray.getClass().getComponentType()); [EOL]     outarray = ArrayUtils.removeAll(inarray, 1, 2); [EOL]     assertArrayEquals(new Number[] { Integer.valueOf(1) }, outarray); [EOL]     assertEquals(Number.class, outarray.getClass().getComponentType()); [EOL] }
@Test [EOL] public void testRemoveElementsObjectArray() { [EOL]     Object[] array; [EOL]     array = ArrayUtils.removeElements((Object[]) null, "a"); [EOL]     assertNull(array); [EOL]     array = ArrayUtils.removeElements(ArrayUtils.EMPTY_OBJECT_ARRAY, "a"); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_OBJECT_ARRAY, array)); [EOL]     assertEquals(Object.class, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new Object[] { "a" }, "a"); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_OBJECT_ARRAY, array)); [EOL]     assertEquals(Object.class, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new Object[] { "a", "b" }, "a"); [EOL]     assertTrue(Arrays.equals(new Object[] { "b" }, array)); [EOL]     assertEquals(Object.class, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new Object[] { "a", "b", "a" }, "a"); [EOL]     assertTrue(Arrays.equals(new Object[] { "b", "a" }, array)); [EOL]     assertEquals(Object.class, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements((Object[]) null, "a", "b"); [EOL]     assertNull(array); [EOL]     array = ArrayUtils.removeElements(ArrayUtils.EMPTY_OBJECT_ARRAY, "a", "b"); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_OBJECT_ARRAY, array)); [EOL]     assertEquals(Object.class, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new Object[] { "a" }, "a", "b"); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_OBJECT_ARRAY, array)); [EOL]     assertEquals(Object.class, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new Object[] { "a", "b" }, "a", "c"); [EOL]     assertTrue(Arrays.equals(new Object[] { "b" }, array)); [EOL]     assertEquals(Object.class, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new Object[] { "a", "b", "a" }, "a"); [EOL]     assertTrue(Arrays.equals(new Object[] { "b", "a" }, array)); [EOL]     assertEquals(Object.class, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new Object[] { "a", "b", "a" }, "a", "b"); [EOL]     assertTrue(Arrays.equals(new Object[] { "a" }, array)); [EOL]     assertEquals(Object.class, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new Object[] { "a", "b", "a" }, "a", "a"); [EOL]     assertTrue(Arrays.equals(new Object[] { "b" }, array)); [EOL]     assertEquals(Object.class, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new Object[] { "a", "b", "a" }, "a", "a", "a", "a"); [EOL]     assertTrue(Arrays.equals(new Object[] { "b" }, array)); [EOL]     assertEquals(Object.class, array.getClass().getComponentType()); [EOL] }
@Test [EOL] public void testRemoveElementsObjectArray() { [EOL]     Object[] array; [EOL]     array = ArrayUtils.removeElements((Object[]) null, "a"); [EOL]     assertNull(array); [EOL]     array = ArrayUtils.removeElements(ArrayUtils.EMPTY_OBJECT_ARRAY, "a"); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_OBJECT_ARRAY, array)); [EOL]     assertEquals(Object.class, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new Object[] { "a" }, "a"); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_OBJECT_ARRAY, array)); [EOL]     assertEquals(Object.class, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new Object[] { "a", "b" }, "a"); [EOL]     assertTrue(Arrays.equals(new Object[] { "b" }, array)); [EOL]     assertEquals(Object.class, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new Object[] { "a", "b", "a" }, "a"); [EOL]     assertTrue(Arrays.equals(new Object[] { "b", "a" }, array)); [EOL]     assertEquals(Object.class, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements((Object[]) null, "a", "b"); [EOL]     assertNull(array); [EOL]     array = ArrayUtils.removeElements(ArrayUtils.EMPTY_OBJECT_ARRAY, "a", "b"); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_OBJECT_ARRAY, array)); [EOL]     assertEquals(Object.class, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new Object[] { "a" }, "a", "b"); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_OBJECT_ARRAY, array)); [EOL]     assertEquals(Object.class, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new Object[] { "a", "b" }, "a", "c"); [EOL]     assertTrue(Arrays.equals(new Object[] { "b" }, array)); [EOL]     assertEquals(Object.class, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new Object[] { "a", "b", "a" }, "a"); [EOL]     assertTrue(Arrays.equals(new Object[] { "b", "a" }, array)); [EOL]     assertEquals(Object.class, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new Object[] { "a", "b", "a" }, "a", "b"); [EOL]     assertTrue(Arrays.equals(new Object[] { "a" }, array)); [EOL]     assertEquals(Object.class, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new Object[] { "a", "b", "a" }, "a", "a"); [EOL]     assertTrue(Arrays.equals(new Object[] { "b" }, array)); [EOL]     assertEquals(Object.class, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new Object[] { "a", "b", "a" }, "a", "a", "a", "a"); [EOL]     assertTrue(Arrays.equals(new Object[] { "b" }, array)); [EOL]     assertEquals(Object.class, array.getClass().getComponentType()); [EOL] }
@Test [EOL] public void testRemoveElementsObjectArray() { [EOL]     Object[] array; [EOL]     array = ArrayUtils.removeElements((Object[]) null, "a"); [EOL]     assertNull(array); [EOL]     array = ArrayUtils.removeElements(ArrayUtils.EMPTY_OBJECT_ARRAY, "a"); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_OBJECT_ARRAY, array)); [EOL]     assertEquals(Object.class, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new Object[] { "a" }, "a"); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_OBJECT_ARRAY, array)); [EOL]     assertEquals(Object.class, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new Object[] { "a", "b" }, "a"); [EOL]     assertTrue(Arrays.equals(new Object[] { "b" }, array)); [EOL]     assertEquals(Object.class, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new Object[] { "a", "b", "a" }, "a"); [EOL]     assertTrue(Arrays.equals(new Object[] { "b", "a" }, array)); [EOL]     assertEquals(Object.class, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements((Object[]) null, "a", "b"); [EOL]     assertNull(array); [EOL]     array = ArrayUtils.removeElements(ArrayUtils.EMPTY_OBJECT_ARRAY, "a", "b"); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_OBJECT_ARRAY, array)); [EOL]     assertEquals(Object.class, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new Object[] { "a" }, "a", "b"); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_OBJECT_ARRAY, array)); [EOL]     assertEquals(Object.class, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new Object[] { "a", "b" }, "a", "c"); [EOL]     assertTrue(Arrays.equals(new Object[] { "b" }, array)); [EOL]     assertEquals(Object.class, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new Object[] { "a", "b", "a" }, "a"); [EOL]     assertTrue(Arrays.equals(new Object[] { "b", "a" }, array)); [EOL]     assertEquals(Object.class, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new Object[] { "a", "b", "a" }, "a", "b"); [EOL]     assertTrue(Arrays.equals(new Object[] { "a" }, array)); [EOL]     assertEquals(Object.class, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new Object[] { "a", "b", "a" }, "a", "a"); [EOL]     assertTrue(Arrays.equals(new Object[] { "b" }, array)); [EOL]     assertEquals(Object.class, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new Object[] { "a", "b", "a" }, "a", "a", "a", "a"); [EOL]     assertTrue(Arrays.equals(new Object[] { "b" }, array)); [EOL]     assertEquals(Object.class, array.getClass().getComponentType()); [EOL] }
@Test [EOL] public void testRemoveElementsObjectArray() { [EOL]     Object[] array; [EOL]     array = ArrayUtils.removeElements((Object[]) null, "a"); [EOL]     assertNull(array); [EOL]     array = ArrayUtils.removeElements(ArrayUtils.EMPTY_OBJECT_ARRAY, "a"); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_OBJECT_ARRAY, array)); [EOL]     assertEquals(Object.class, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new Object[] { "a" }, "a"); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_OBJECT_ARRAY, array)); [EOL]     assertEquals(Object.class, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new Object[] { "a", "b" }, "a"); [EOL]     assertTrue(Arrays.equals(new Object[] { "b" }, array)); [EOL]     assertEquals(Object.class, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new Object[] { "a", "b", "a" }, "a"); [EOL]     assertTrue(Arrays.equals(new Object[] { "b", "a" }, array)); [EOL]     assertEquals(Object.class, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements((Object[]) null, "a", "b"); [EOL]     assertNull(array); [EOL]     array = ArrayUtils.removeElements(ArrayUtils.EMPTY_OBJECT_ARRAY, "a", "b"); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_OBJECT_ARRAY, array)); [EOL]     assertEquals(Object.class, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new Object[] { "a" }, "a", "b"); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_OBJECT_ARRAY, array)); [EOL]     assertEquals(Object.class, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new Object[] { "a", "b" }, "a", "c"); [EOL]     assertTrue(Arrays.equals(new Object[] { "b" }, array)); [EOL]     assertEquals(Object.class, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new Object[] { "a", "b", "a" }, "a"); [EOL]     assertTrue(Arrays.equals(new Object[] { "b", "a" }, array)); [EOL]     assertEquals(Object.class, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new Object[] { "a", "b", "a" }, "a", "b"); [EOL]     assertTrue(Arrays.equals(new Object[] { "a" }, array)); [EOL]     assertEquals(Object.class, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new Object[] { "a", "b", "a" }, "a", "a"); [EOL]     assertTrue(Arrays.equals(new Object[] { "b" }, array)); [EOL]     assertEquals(Object.class, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new Object[] { "a", "b", "a" }, "a", "a", "a", "a"); [EOL]     assertTrue(Arrays.equals(new Object[] { "b" }, array)); [EOL]     assertEquals(Object.class, array.getClass().getComponentType()); [EOL] }
@Test [EOL] public void testRemoveElementsObjectArray() { [EOL]     Object[] array; [EOL]     array = ArrayUtils.removeElements((Object[]) null, "a"); [EOL]     assertNull(array); [EOL]     array = ArrayUtils.removeElements(ArrayUtils.EMPTY_OBJECT_ARRAY, "a"); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_OBJECT_ARRAY, array)); [EOL]     assertEquals(Object.class, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new Object[] { "a" }, "a"); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_OBJECT_ARRAY, array)); [EOL]     assertEquals(Object.class, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new Object[] { "a", "b" }, "a"); [EOL]     assertTrue(Arrays.equals(new Object[] { "b" }, array)); [EOL]     assertEquals(Object.class, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new Object[] { "a", "b", "a" }, "a"); [EOL]     assertTrue(Arrays.equals(new Object[] { "b", "a" }, array)); [EOL]     assertEquals(Object.class, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements((Object[]) null, "a", "b"); [EOL]     assertNull(array); [EOL]     array = ArrayUtils.removeElements(ArrayUtils.EMPTY_OBJECT_ARRAY, "a", "b"); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_OBJECT_ARRAY, array)); [EOL]     assertEquals(Object.class, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new Object[] { "a" }, "a", "b"); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_OBJECT_ARRAY, array)); [EOL]     assertEquals(Object.class, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new Object[] { "a", "b" }, "a", "c"); [EOL]     assertTrue(Arrays.equals(new Object[] { "b" }, array)); [EOL]     assertEquals(Object.class, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new Object[] { "a", "b", "a" }, "a"); [EOL]     assertTrue(Arrays.equals(new Object[] { "b", "a" }, array)); [EOL]     assertEquals(Object.class, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new Object[] { "a", "b", "a" }, "a", "b"); [EOL]     assertTrue(Arrays.equals(new Object[] { "a" }, array)); [EOL]     assertEquals(Object.class, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new Object[] { "a", "b", "a" }, "a", "a"); [EOL]     assertTrue(Arrays.equals(new Object[] { "b" }, array)); [EOL]     assertEquals(Object.class, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new Object[] { "a", "b", "a" }, "a", "a", "a", "a"); [EOL]     assertTrue(Arrays.equals(new Object[] { "b" }, array)); [EOL]     assertEquals(Object.class, array.getClass().getComponentType()); [EOL] }
@Test [EOL] public void testRemoveElementsObjectArray() { [EOL]     Object[] array; [EOL]     array = ArrayUtils.removeElements((Object[]) null, "a"); [EOL]     assertNull(array); [EOL]     array = ArrayUtils.removeElements(ArrayUtils.EMPTY_OBJECT_ARRAY, "a"); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_OBJECT_ARRAY, array)); [EOL]     assertEquals(Object.class, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new Object[] { "a" }, "a"); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_OBJECT_ARRAY, array)); [EOL]     assertEquals(Object.class, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new Object[] { "a", "b" }, "a"); [EOL]     assertTrue(Arrays.equals(new Object[] { "b" }, array)); [EOL]     assertEquals(Object.class, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new Object[] { "a", "b", "a" }, "a"); [EOL]     assertTrue(Arrays.equals(new Object[] { "b", "a" }, array)); [EOL]     assertEquals(Object.class, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements((Object[]) null, "a", "b"); [EOL]     assertNull(array); [EOL]     array = ArrayUtils.removeElements(ArrayUtils.EMPTY_OBJECT_ARRAY, "a", "b"); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_OBJECT_ARRAY, array)); [EOL]     assertEquals(Object.class, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new Object[] { "a" }, "a", "b"); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_OBJECT_ARRAY, array)); [EOL]     assertEquals(Object.class, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new Object[] { "a", "b" }, "a", "c"); [EOL]     assertTrue(Arrays.equals(new Object[] { "b" }, array)); [EOL]     assertEquals(Object.class, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new Object[] { "a", "b", "a" }, "a"); [EOL]     assertTrue(Arrays.equals(new Object[] { "b", "a" }, array)); [EOL]     assertEquals(Object.class, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new Object[] { "a", "b", "a" }, "a", "b"); [EOL]     assertTrue(Arrays.equals(new Object[] { "a" }, array)); [EOL]     assertEquals(Object.class, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new Object[] { "a", "b", "a" }, "a", "a"); [EOL]     assertTrue(Arrays.equals(new Object[] { "b" }, array)); [EOL]     assertEquals(Object.class, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new Object[] { "a", "b", "a" }, "a", "a", "a", "a"); [EOL]     assertTrue(Arrays.equals(new Object[] { "b" }, array)); [EOL]     assertEquals(Object.class, array.getClass().getComponentType()); [EOL] }
@Test [EOL] public void testRemoveElementsObjectArray() { [EOL]     Object[] array; [EOL]     array = ArrayUtils.removeElements((Object[]) null, "a"); [EOL]     assertNull(array); [EOL]     array = ArrayUtils.removeElements(ArrayUtils.EMPTY_OBJECT_ARRAY, "a"); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_OBJECT_ARRAY, array)); [EOL]     assertEquals(Object.class, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new Object[] { "a" }, "a"); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_OBJECT_ARRAY, array)); [EOL]     assertEquals(Object.class, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new Object[] { "a", "b" }, "a"); [EOL]     assertTrue(Arrays.equals(new Object[] { "b" }, array)); [EOL]     assertEquals(Object.class, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new Object[] { "a", "b", "a" }, "a"); [EOL]     assertTrue(Arrays.equals(new Object[] { "b", "a" }, array)); [EOL]     assertEquals(Object.class, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements((Object[]) null, "a", "b"); [EOL]     assertNull(array); [EOL]     array = ArrayUtils.removeElements(ArrayUtils.EMPTY_OBJECT_ARRAY, "a", "b"); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_OBJECT_ARRAY, array)); [EOL]     assertEquals(Object.class, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new Object[] { "a" }, "a", "b"); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_OBJECT_ARRAY, array)); [EOL]     assertEquals(Object.class, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new Object[] { "a", "b" }, "a", "c"); [EOL]     assertTrue(Arrays.equals(new Object[] { "b" }, array)); [EOL]     assertEquals(Object.class, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new Object[] { "a", "b", "a" }, "a"); [EOL]     assertTrue(Arrays.equals(new Object[] { "b", "a" }, array)); [EOL]     assertEquals(Object.class, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new Object[] { "a", "b", "a" }, "a", "b"); [EOL]     assertTrue(Arrays.equals(new Object[] { "a" }, array)); [EOL]     assertEquals(Object.class, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new Object[] { "a", "b", "a" }, "a", "a"); [EOL]     assertTrue(Arrays.equals(new Object[] { "b" }, array)); [EOL]     assertEquals(Object.class, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new Object[] { "a", "b", "a" }, "a", "a", "a", "a"); [EOL]     assertTrue(Arrays.equals(new Object[] { "b" }, array)); [EOL]     assertEquals(Object.class, array.getClass().getComponentType()); [EOL] }
@Test [EOL] public void testRemoveElementsObjectArray() { [EOL]     Object[] array; [EOL]     array = ArrayUtils.removeElements((Object[]) null, "a"); [EOL]     assertNull(array); [EOL]     array = ArrayUtils.removeElements(ArrayUtils.EMPTY_OBJECT_ARRAY, "a"); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_OBJECT_ARRAY, array)); [EOL]     assertEquals(Object.class, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new Object[] { "a" }, "a"); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_OBJECT_ARRAY, array)); [EOL]     assertEquals(Object.class, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new Object[] { "a", "b" }, "a"); [EOL]     assertTrue(Arrays.equals(new Object[] { "b" }, array)); [EOL]     assertEquals(Object.class, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new Object[] { "a", "b", "a" }, "a"); [EOL]     assertTrue(Arrays.equals(new Object[] { "b", "a" }, array)); [EOL]     assertEquals(Object.class, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements((Object[]) null, "a", "b"); [EOL]     assertNull(array); [EOL]     array = ArrayUtils.removeElements(ArrayUtils.EMPTY_OBJECT_ARRAY, "a", "b"); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_OBJECT_ARRAY, array)); [EOL]     assertEquals(Object.class, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new Object[] { "a" }, "a", "b"); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_OBJECT_ARRAY, array)); [EOL]     assertEquals(Object.class, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new Object[] { "a", "b" }, "a", "c"); [EOL]     assertTrue(Arrays.equals(new Object[] { "b" }, array)); [EOL]     assertEquals(Object.class, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new Object[] { "a", "b", "a" }, "a"); [EOL]     assertTrue(Arrays.equals(new Object[] { "b", "a" }, array)); [EOL]     assertEquals(Object.class, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new Object[] { "a", "b", "a" }, "a", "b"); [EOL]     assertTrue(Arrays.equals(new Object[] { "a" }, array)); [EOL]     assertEquals(Object.class, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new Object[] { "a", "b", "a" }, "a", "a"); [EOL]     assertTrue(Arrays.equals(new Object[] { "b" }, array)); [EOL]     assertEquals(Object.class, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new Object[] { "a", "b", "a" }, "a", "a", "a", "a"); [EOL]     assertTrue(Arrays.equals(new Object[] { "b" }, array)); [EOL]     assertEquals(Object.class, array.getClass().getComponentType()); [EOL] }
@Test [EOL] public void testRemoveElementByteArray() { [EOL]     byte[] array; [EOL]     array = ArrayUtils.removeElements((byte[]) null, (byte) 1); [EOL]     assertNull(array); [EOL]     array = ArrayUtils.removeElements(ArrayUtils.EMPTY_BYTE_ARRAY, (byte) 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_BYTE_ARRAY, array)); [EOL]     assertEquals(Byte.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new byte[] { 1 }, (byte) 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_BYTE_ARRAY, array)); [EOL]     assertEquals(Byte.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new byte[] { 1, 2 }, (byte) 1); [EOL]     assertTrue(Arrays.equals(new byte[] { 2 }, array)); [EOL]     assertEquals(Byte.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new byte[] { 1, 2, 1 }, (byte) 1); [EOL]     assertTrue(Arrays.equals(new byte[] { 2, 1 }, array)); [EOL]     assertEquals(Byte.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements((byte[]) null, (byte) 1, (byte) 2); [EOL]     assertNull(array); [EOL]     array = ArrayUtils.removeElements(ArrayUtils.EMPTY_BYTE_ARRAY, (byte) 1, (byte) 2); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_BYTE_ARRAY, array)); [EOL]     assertEquals(Byte.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new byte[] { 1 }, (byte) 1, (byte) 2); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_BYTE_ARRAY, array)); [EOL]     assertEquals(Byte.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new byte[] { 1, 2 }, (byte) 1, (byte) 2); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_BYTE_ARRAY, array)); [EOL]     assertEquals(Byte.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new byte[] { 1, 2 }, (byte) 1, (byte) 1); [EOL]     assertTrue(Arrays.equals(new byte[] { 2 }, array)); [EOL]     assertEquals(Byte.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new byte[] { 1, 2, 1 }, (byte) 1, (byte) 2); [EOL]     assertTrue(Arrays.equals(new byte[] { 1 }, array)); [EOL]     assertEquals(Byte.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new byte[] { 1, 2, 1 }, (byte) 1, (byte) 1); [EOL]     assertTrue(Arrays.equals(new byte[] { 2 }, array)); [EOL]     assertEquals(Byte.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new byte[] { 1, 2, 1 }, (byte) 1, (byte) 1, (byte) 1, (byte) 1); [EOL]     assertTrue(Arrays.equals(new byte[] { 2 }, array)); [EOL]     assertEquals(Byte.TYPE, array.getClass().getComponentType()); [EOL] }
@Test [EOL] public void testRemoveElementBooleanArray() { [EOL]     boolean[] array; [EOL]     array = ArrayUtils.removeElements((boolean[]) null, true); [EOL]     assertNull(array); [EOL]     array = ArrayUtils.removeElements(ArrayUtils.EMPTY_BOOLEAN_ARRAY, true); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_BOOLEAN_ARRAY, array)); [EOL]     assertEquals(Boolean.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new boolean[] { true }, true); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_BOOLEAN_ARRAY, array)); [EOL]     assertEquals(Boolean.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new boolean[] { true, false }, true); [EOL]     assertTrue(Arrays.equals(new boolean[] { false }, array)); [EOL]     assertEquals(Boolean.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new boolean[] { true, false, true }, true); [EOL]     assertTrue(Arrays.equals(new boolean[] { false, true }, array)); [EOL]     assertEquals(Boolean.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements((boolean[]) null, true, false); [EOL]     assertNull(array); [EOL]     array = ArrayUtils.removeElements(ArrayUtils.EMPTY_BOOLEAN_ARRAY, true, false); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_BOOLEAN_ARRAY, array)); [EOL]     assertEquals(Boolean.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new boolean[] { true }, true, false); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_BOOLEAN_ARRAY, array)); [EOL]     assertEquals(Boolean.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new boolean[] { true, false }, true, false); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_BOOLEAN_ARRAY, array)); [EOL]     assertEquals(Boolean.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new boolean[] { true, false }, true, true); [EOL]     assertTrue(Arrays.equals(new boolean[] { false }, array)); [EOL]     assertEquals(Boolean.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new boolean[] { true, false, true }, true, false); [EOL]     assertTrue(Arrays.equals(new boolean[] { true }, array)); [EOL]     assertEquals(Boolean.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new boolean[] { true, false, true }, true, true); [EOL]     assertTrue(Arrays.equals(new boolean[] { false }, array)); [EOL]     assertEquals(Boolean.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new boolean[] { true, false, true }, true, true, true, true); [EOL]     assertTrue(Arrays.equals(new boolean[] { false }, array)); [EOL]     assertEquals(Boolean.TYPE, array.getClass().getComponentType()); [EOL] }
@Test [EOL] public void testReadDeclaredNamedStaticFieldForceAccess() throws Exception { [EOL]     assertEquals(Foo.VALUE, FieldUtils.readDeclaredStaticField(Foo.class, "VALUE", true)); [EOL]     assertEquals("child", FieldUtils.readDeclaredStaticField(PublicChild.class, "VALUE", true)); [EOL]     try { [EOL]         assertEquals(Foo.VALUE, FieldUtils.readDeclaredStaticField(PubliclyShadowedChild.class, "VALUE", true)); [EOL]         fail("expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         assertEquals(Foo.VALUE, FieldUtils.readDeclaredStaticField(PrivatelyShadowedChild.class, "VALUE", true)); [EOL]         fail("expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL] }
@Test [EOL] public void testGetMatchingAccessibleMethod() throws Exception { [EOL]     expectMatchingAccessibleConstructorParameterTypes(TestBean.class, ArrayUtils.EMPTY_CLASS_ARRAY, ArrayUtils.EMPTY_CLASS_ARRAY); [EOL]     expectMatchingAccessibleConstructorParameterTypes(TestBean.class, null, ArrayUtils.EMPTY_CLASS_ARRAY); [EOL]     expectMatchingAccessibleConstructorParameterTypes(TestBean.class, singletonArray(String.class), singletonArray(String.class)); [EOL]     expectMatchingAccessibleConstructorParameterTypes(TestBean.class, singletonArray(Object.class), singletonArray(Object.class)); [EOL]     expectMatchingAccessibleConstructorParameterTypes(TestBean.class, singletonArray(Boolean.class), singletonArray(Object.class)); [EOL]     expectMatchingAccessibleConstructorParameterTypes(TestBean.class, singletonArray(Byte.class), singletonArray(Integer.TYPE)); [EOL]     expectMatchingAccessibleConstructorParameterTypes(TestBean.class, singletonArray(Byte.TYPE), singletonArray(Integer.TYPE)); [EOL]     expectMatchingAccessibleConstructorParameterTypes(TestBean.class, singletonArray(Short.class), singletonArray(Integer.TYPE)); [EOL]     expectMatchingAccessibleConstructorParameterTypes(TestBean.class, singletonArray(Short.TYPE), singletonArray(Integer.TYPE)); [EOL]     expectMatchingAccessibleConstructorParameterTypes(TestBean.class, singletonArray(Character.class), singletonArray(Integer.TYPE)); [EOL]     expectMatchingAccessibleConstructorParameterTypes(TestBean.class, singletonArray(Character.TYPE), singletonArray(Integer.TYPE)); [EOL]     expectMatchingAccessibleConstructorParameterTypes(TestBean.class, singletonArray(Integer.class), singletonArray(Integer.class)); [EOL]     expectMatchingAccessibleConstructorParameterTypes(TestBean.class, singletonArray(Integer.TYPE), singletonArray(Integer.TYPE)); [EOL]     expectMatchingAccessibleConstructorParameterTypes(TestBean.class, singletonArray(Long.class), singletonArray(Double.TYPE)); [EOL]     expectMatchingAccessibleConstructorParameterTypes(TestBean.class, singletonArray(Long.TYPE), singletonArray(Double.TYPE)); [EOL]     expectMatchingAccessibleConstructorParameterTypes(TestBean.class, singletonArray(Float.class), singletonArray(Double.TYPE)); [EOL]     expectMatchingAccessibleConstructorParameterTypes(TestBean.class, singletonArray(Float.TYPE), singletonArray(Double.TYPE)); [EOL]     expectMatchingAccessibleConstructorParameterTypes(TestBean.class, singletonArray(Double.class), singletonArray(Double.TYPE)); [EOL]     expectMatchingAccessibleConstructorParameterTypes(TestBean.class, singletonArray(Double.TYPE), singletonArray(Double.TYPE)); [EOL] }
@Test [EOL] public void testGetRawType() throws SecurityException, NoSuchFieldException { [EOL]     final Type stringParentFieldType = GenericTypeHolder.class.getDeclaredField("stringParent").getGenericType(); [EOL]     final Type integerParentFieldType = GenericTypeHolder.class.getDeclaredField("integerParent").getGenericType(); [EOL]     final Type foosFieldType = GenericTypeHolder.class.getDeclaredField("foos").getGenericType(); [EOL]     final Type genericParentT = GenericParent.class.getTypeParameters()[0]; [EOL]     Assert.assertEquals(GenericParent.class, TypeUtils.getRawType(stringParentFieldType, null)); [EOL]     Assert.assertEquals(GenericParent.class, TypeUtils.getRawType(integerParentFieldType, null)); [EOL]     Assert.assertEquals(List.class, TypeUtils.getRawType(foosFieldType, null)); [EOL]     Assert.assertEquals(String.class, TypeUtils.getRawType(genericParentT, StringParameterizedChild.class)); [EOL]     Assert.assertEquals(String.class, TypeUtils.getRawType(genericParentT, stringParentFieldType)); [EOL]     Assert.assertEquals(Foo.class, TypeUtils.getRawType(Iterable.class.getTypeParameters()[0], foosFieldType)); [EOL]     Assert.assertEquals(Foo.class, TypeUtils.getRawType(List.class.getTypeParameters()[0], foosFieldType)); [EOL]     Assert.assertNull(TypeUtils.getRawType(genericParentT, GenericParent.class)); [EOL]     Assert.assertEquals(GenericParent[].class, TypeUtils.getRawType(GenericTypeHolder.class.getDeclaredField("barParents").getGenericType(), null)); [EOL] }
@Test [EOL] public void testGetRawType() throws SecurityException, NoSuchFieldException { [EOL]     final Type stringParentFieldType = GenericTypeHolder.class.getDeclaredField("stringParent").getGenericType(); [EOL]     final Type integerParentFieldType = GenericTypeHolder.class.getDeclaredField("integerParent").getGenericType(); [EOL]     final Type foosFieldType = GenericTypeHolder.class.getDeclaredField("foos").getGenericType(); [EOL]     final Type genericParentT = GenericParent.class.getTypeParameters()[0]; [EOL]     Assert.assertEquals(GenericParent.class, TypeUtils.getRawType(stringParentFieldType, null)); [EOL]     Assert.assertEquals(GenericParent.class, TypeUtils.getRawType(integerParentFieldType, null)); [EOL]     Assert.assertEquals(List.class, TypeUtils.getRawType(foosFieldType, null)); [EOL]     Assert.assertEquals(String.class, TypeUtils.getRawType(genericParentT, StringParameterizedChild.class)); [EOL]     Assert.assertEquals(String.class, TypeUtils.getRawType(genericParentT, stringParentFieldType)); [EOL]     Assert.assertEquals(Foo.class, TypeUtils.getRawType(Iterable.class.getTypeParameters()[0], foosFieldType)); [EOL]     Assert.assertEquals(Foo.class, TypeUtils.getRawType(List.class.getTypeParameters()[0], foosFieldType)); [EOL]     Assert.assertNull(TypeUtils.getRawType(genericParentT, GenericParent.class)); [EOL]     Assert.assertEquals(GenericParent[].class, TypeUtils.getRawType(GenericTypeHolder.class.getDeclaredField("barParents").getGenericType(), null)); [EOL] }
@Test [EOL] public void testGetRawType() throws SecurityException, NoSuchFieldException { [EOL]     final Type stringParentFieldType = GenericTypeHolder.class.getDeclaredField("stringParent").getGenericType(); [EOL]     final Type integerParentFieldType = GenericTypeHolder.class.getDeclaredField("integerParent").getGenericType(); [EOL]     final Type foosFieldType = GenericTypeHolder.class.getDeclaredField("foos").getGenericType(); [EOL]     final Type genericParentT = GenericParent.class.getTypeParameters()[0]; [EOL]     Assert.assertEquals(GenericParent.class, TypeUtils.getRawType(stringParentFieldType, null)); [EOL]     Assert.assertEquals(GenericParent.class, TypeUtils.getRawType(integerParentFieldType, null)); [EOL]     Assert.assertEquals(List.class, TypeUtils.getRawType(foosFieldType, null)); [EOL]     Assert.assertEquals(String.class, TypeUtils.getRawType(genericParentT, StringParameterizedChild.class)); [EOL]     Assert.assertEquals(String.class, TypeUtils.getRawType(genericParentT, stringParentFieldType)); [EOL]     Assert.assertEquals(Foo.class, TypeUtils.getRawType(Iterable.class.getTypeParameters()[0], foosFieldType)); [EOL]     Assert.assertEquals(Foo.class, TypeUtils.getRawType(List.class.getTypeParameters()[0], foosFieldType)); [EOL]     Assert.assertNull(TypeUtils.getRawType(genericParentT, GenericParent.class)); [EOL]     Assert.assertEquals(GenericParent[].class, TypeUtils.getRawType(GenericTypeHolder.class.getDeclaredField("barParents").getGenericType(), null)); [EOL] }
@Test [EOL] public void testGetRawType() throws SecurityException, NoSuchFieldException { [EOL]     final Type stringParentFieldType = GenericTypeHolder.class.getDeclaredField("stringParent").getGenericType(); [EOL]     final Type integerParentFieldType = GenericTypeHolder.class.getDeclaredField("integerParent").getGenericType(); [EOL]     final Type foosFieldType = GenericTypeHolder.class.getDeclaredField("foos").getGenericType(); [EOL]     final Type genericParentT = GenericParent.class.getTypeParameters()[0]; [EOL]     Assert.assertEquals(GenericParent.class, TypeUtils.getRawType(stringParentFieldType, null)); [EOL]     Assert.assertEquals(GenericParent.class, TypeUtils.getRawType(integerParentFieldType, null)); [EOL]     Assert.assertEquals(List.class, TypeUtils.getRawType(foosFieldType, null)); [EOL]     Assert.assertEquals(String.class, TypeUtils.getRawType(genericParentT, StringParameterizedChild.class)); [EOL]     Assert.assertEquals(String.class, TypeUtils.getRawType(genericParentT, stringParentFieldType)); [EOL]     Assert.assertEquals(Foo.class, TypeUtils.getRawType(Iterable.class.getTypeParameters()[0], foosFieldType)); [EOL]     Assert.assertEquals(Foo.class, TypeUtils.getRawType(List.class.getTypeParameters()[0], foosFieldType)); [EOL]     Assert.assertNull(TypeUtils.getRawType(genericParentT, GenericParent.class)); [EOL]     Assert.assertEquals(GenericParent[].class, TypeUtils.getRawType(GenericTypeHolder.class.getDeclaredField("barParents").getGenericType(), null)); [EOL] }
@Test [EOL] public void testGetRawType() throws SecurityException, NoSuchFieldException { [EOL]     final Type stringParentFieldType = GenericTypeHolder.class.getDeclaredField("stringParent").getGenericType(); [EOL]     final Type integerParentFieldType = GenericTypeHolder.class.getDeclaredField("integerParent").getGenericType(); [EOL]     final Type foosFieldType = GenericTypeHolder.class.getDeclaredField("foos").getGenericType(); [EOL]     final Type genericParentT = GenericParent.class.getTypeParameters()[0]; [EOL]     Assert.assertEquals(GenericParent.class, TypeUtils.getRawType(stringParentFieldType, null)); [EOL]     Assert.assertEquals(GenericParent.class, TypeUtils.getRawType(integerParentFieldType, null)); [EOL]     Assert.assertEquals(List.class, TypeUtils.getRawType(foosFieldType, null)); [EOL]     Assert.assertEquals(String.class, TypeUtils.getRawType(genericParentT, StringParameterizedChild.class)); [EOL]     Assert.assertEquals(String.class, TypeUtils.getRawType(genericParentT, stringParentFieldType)); [EOL]     Assert.assertEquals(Foo.class, TypeUtils.getRawType(Iterable.class.getTypeParameters()[0], foosFieldType)); [EOL]     Assert.assertEquals(Foo.class, TypeUtils.getRawType(List.class.getTypeParameters()[0], foosFieldType)); [EOL]     Assert.assertNull(TypeUtils.getRawType(genericParentT, GenericParent.class)); [EOL]     Assert.assertEquals(GenericParent[].class, TypeUtils.getRawType(GenericTypeHolder.class.getDeclaredField("barParents").getGenericType(), null)); [EOL] }
@Test [EOL] public void testGetRawType() throws SecurityException, NoSuchFieldException { [EOL]     final Type stringParentFieldType = GenericTypeHolder.class.getDeclaredField("stringParent").getGenericType(); [EOL]     final Type integerParentFieldType = GenericTypeHolder.class.getDeclaredField("integerParent").getGenericType(); [EOL]     final Type foosFieldType = GenericTypeHolder.class.getDeclaredField("foos").getGenericType(); [EOL]     final Type genericParentT = GenericParent.class.getTypeParameters()[0]; [EOL]     Assert.assertEquals(GenericParent.class, TypeUtils.getRawType(stringParentFieldType, null)); [EOL]     Assert.assertEquals(GenericParent.class, TypeUtils.getRawType(integerParentFieldType, null)); [EOL]     Assert.assertEquals(List.class, TypeUtils.getRawType(foosFieldType, null)); [EOL]     Assert.assertEquals(String.class, TypeUtils.getRawType(genericParentT, StringParameterizedChild.class)); [EOL]     Assert.assertEquals(String.class, TypeUtils.getRawType(genericParentT, stringParentFieldType)); [EOL]     Assert.assertEquals(Foo.class, TypeUtils.getRawType(Iterable.class.getTypeParameters()[0], foosFieldType)); [EOL]     Assert.assertEquals(Foo.class, TypeUtils.getRawType(List.class.getTypeParameters()[0], foosFieldType)); [EOL]     Assert.assertNull(TypeUtils.getRawType(genericParentT, GenericParent.class)); [EOL]     Assert.assertEquals(GenericParent[].class, TypeUtils.getRawType(GenericTypeHolder.class.getDeclaredField("barParents").getGenericType(), null)); [EOL] }
@Test [EOL] public void testGetRawType() throws SecurityException, NoSuchFieldException { [EOL]     final Type stringParentFieldType = GenericTypeHolder.class.getDeclaredField("stringParent").getGenericType(); [EOL]     final Type integerParentFieldType = GenericTypeHolder.class.getDeclaredField("integerParent").getGenericType(); [EOL]     final Type foosFieldType = GenericTypeHolder.class.getDeclaredField("foos").getGenericType(); [EOL]     final Type genericParentT = GenericParent.class.getTypeParameters()[0]; [EOL]     Assert.assertEquals(GenericParent.class, TypeUtils.getRawType(stringParentFieldType, null)); [EOL]     Assert.assertEquals(GenericParent.class, TypeUtils.getRawType(integerParentFieldType, null)); [EOL]     Assert.assertEquals(List.class, TypeUtils.getRawType(foosFieldType, null)); [EOL]     Assert.assertEquals(String.class, TypeUtils.getRawType(genericParentT, StringParameterizedChild.class)); [EOL]     Assert.assertEquals(String.class, TypeUtils.getRawType(genericParentT, stringParentFieldType)); [EOL]     Assert.assertEquals(Foo.class, TypeUtils.getRawType(Iterable.class.getTypeParameters()[0], foosFieldType)); [EOL]     Assert.assertEquals(Foo.class, TypeUtils.getRawType(List.class.getTypeParameters()[0], foosFieldType)); [EOL]     Assert.assertNull(TypeUtils.getRawType(genericParentT, GenericParent.class)); [EOL]     Assert.assertEquals(GenericParent[].class, TypeUtils.getRawType(GenericTypeHolder.class.getDeclaredField("barParents").getGenericType(), null)); [EOL] }
@Test [EOL] public void testIsArrayTypeClasses() { [EOL]     Assert.assertTrue(TypeUtils.isArrayType(boolean[].class)); [EOL]     Assert.assertTrue(TypeUtils.isArrayType(byte[].class)); [EOL]     Assert.assertTrue(TypeUtils.isArrayType(short[].class)); [EOL]     Assert.assertTrue(TypeUtils.isArrayType(int[].class)); [EOL]     Assert.assertTrue(TypeUtils.isArrayType(char[].class)); [EOL]     Assert.assertTrue(TypeUtils.isArrayType(long[].class)); [EOL]     Assert.assertTrue(TypeUtils.isArrayType(float[].class)); [EOL]     Assert.assertTrue(TypeUtils.isArrayType(double[].class)); [EOL]     Assert.assertTrue(TypeUtils.isArrayType(Object[].class)); [EOL]     Assert.assertTrue(TypeUtils.isArrayType(String[].class)); [EOL]     Assert.assertFalse(TypeUtils.isArrayType(boolean.class)); [EOL]     Assert.assertFalse(TypeUtils.isArrayType(byte.class)); [EOL]     Assert.assertFalse(TypeUtils.isArrayType(short.class)); [EOL]     Assert.assertFalse(TypeUtils.isArrayType(int.class)); [EOL]     Assert.assertFalse(TypeUtils.isArrayType(char.class)); [EOL]     Assert.assertFalse(TypeUtils.isArrayType(long.class)); [EOL]     Assert.assertFalse(TypeUtils.isArrayType(float.class)); [EOL]     Assert.assertFalse(TypeUtils.isArrayType(double.class)); [EOL]     Assert.assertFalse(TypeUtils.isArrayType(Object.class)); [EOL]     Assert.assertFalse(TypeUtils.isArrayType(String.class)); [EOL] }
@Test [EOL] public void testIsArrayTypeClasses() { [EOL]     Assert.assertTrue(TypeUtils.isArrayType(boolean[].class)); [EOL]     Assert.assertTrue(TypeUtils.isArrayType(byte[].class)); [EOL]     Assert.assertTrue(TypeUtils.isArrayType(short[].class)); [EOL]     Assert.assertTrue(TypeUtils.isArrayType(int[].class)); [EOL]     Assert.assertTrue(TypeUtils.isArrayType(char[].class)); [EOL]     Assert.assertTrue(TypeUtils.isArrayType(long[].class)); [EOL]     Assert.assertTrue(TypeUtils.isArrayType(float[].class)); [EOL]     Assert.assertTrue(TypeUtils.isArrayType(double[].class)); [EOL]     Assert.assertTrue(TypeUtils.isArrayType(Object[].class)); [EOL]     Assert.assertTrue(TypeUtils.isArrayType(String[].class)); [EOL]     Assert.assertFalse(TypeUtils.isArrayType(boolean.class)); [EOL]     Assert.assertFalse(TypeUtils.isArrayType(byte.class)); [EOL]     Assert.assertFalse(TypeUtils.isArrayType(short.class)); [EOL]     Assert.assertFalse(TypeUtils.isArrayType(int.class)); [EOL]     Assert.assertFalse(TypeUtils.isArrayType(char.class)); [EOL]     Assert.assertFalse(TypeUtils.isArrayType(long.class)); [EOL]     Assert.assertFalse(TypeUtils.isArrayType(float.class)); [EOL]     Assert.assertFalse(TypeUtils.isArrayType(double.class)); [EOL]     Assert.assertFalse(TypeUtils.isArrayType(Object.class)); [EOL]     Assert.assertFalse(TypeUtils.isArrayType(String.class)); [EOL] }
@Test [EOL] public void testIsArrayTypeClasses() { [EOL]     Assert.assertTrue(TypeUtils.isArrayType(boolean[].class)); [EOL]     Assert.assertTrue(TypeUtils.isArrayType(byte[].class)); [EOL]     Assert.assertTrue(TypeUtils.isArrayType(short[].class)); [EOL]     Assert.assertTrue(TypeUtils.isArrayType(int[].class)); [EOL]     Assert.assertTrue(TypeUtils.isArrayType(char[].class)); [EOL]     Assert.assertTrue(TypeUtils.isArrayType(long[].class)); [EOL]     Assert.assertTrue(TypeUtils.isArrayType(float[].class)); [EOL]     Assert.assertTrue(TypeUtils.isArrayType(double[].class)); [EOL]     Assert.assertTrue(TypeUtils.isArrayType(Object[].class)); [EOL]     Assert.assertTrue(TypeUtils.isArrayType(String[].class)); [EOL]     Assert.assertFalse(TypeUtils.isArrayType(boolean.class)); [EOL]     Assert.assertFalse(TypeUtils.isArrayType(byte.class)); [EOL]     Assert.assertFalse(TypeUtils.isArrayType(short.class)); [EOL]     Assert.assertFalse(TypeUtils.isArrayType(int.class)); [EOL]     Assert.assertFalse(TypeUtils.isArrayType(char.class)); [EOL]     Assert.assertFalse(TypeUtils.isArrayType(long.class)); [EOL]     Assert.assertFalse(TypeUtils.isArrayType(float.class)); [EOL]     Assert.assertFalse(TypeUtils.isArrayType(double.class)); [EOL]     Assert.assertFalse(TypeUtils.isArrayType(Object.class)); [EOL]     Assert.assertFalse(TypeUtils.isArrayType(String.class)); [EOL] }
@Test [EOL] public void testIsArrayTypeClasses() { [EOL]     Assert.assertTrue(TypeUtils.isArrayType(boolean[].class)); [EOL]     Assert.assertTrue(TypeUtils.isArrayType(byte[].class)); [EOL]     Assert.assertTrue(TypeUtils.isArrayType(short[].class)); [EOL]     Assert.assertTrue(TypeUtils.isArrayType(int[].class)); [EOL]     Assert.assertTrue(TypeUtils.isArrayType(char[].class)); [EOL]     Assert.assertTrue(TypeUtils.isArrayType(long[].class)); [EOL]     Assert.assertTrue(TypeUtils.isArrayType(float[].class)); [EOL]     Assert.assertTrue(TypeUtils.isArrayType(double[].class)); [EOL]     Assert.assertTrue(TypeUtils.isArrayType(Object[].class)); [EOL]     Assert.assertTrue(TypeUtils.isArrayType(String[].class)); [EOL]     Assert.assertFalse(TypeUtils.isArrayType(boolean.class)); [EOL]     Assert.assertFalse(TypeUtils.isArrayType(byte.class)); [EOL]     Assert.assertFalse(TypeUtils.isArrayType(short.class)); [EOL]     Assert.assertFalse(TypeUtils.isArrayType(int.class)); [EOL]     Assert.assertFalse(TypeUtils.isArrayType(char.class)); [EOL]     Assert.assertFalse(TypeUtils.isArrayType(long.class)); [EOL]     Assert.assertFalse(TypeUtils.isArrayType(float.class)); [EOL]     Assert.assertFalse(TypeUtils.isArrayType(double.class)); [EOL]     Assert.assertFalse(TypeUtils.isArrayType(Object.class)); [EOL]     Assert.assertFalse(TypeUtils.isArrayType(String.class)); [EOL] }
@Test [EOL] public void testGetFirstContextValue() { [EOL]     exceptionContext.addContextValue("test2", "different value"); [EOL]     assertTrue(exceptionContext.getFirstContextValue("test1") == null); [EOL]     assertTrue(exceptionContext.getFirstContextValue("test2").equals("some value")); [EOL]     assertTrue(exceptionContext.getFirstContextValue("crap") == null); [EOL]     exceptionContext.setContextValue("test2", "another"); [EOL]     assertTrue(exceptionContext.getFirstContextValue("test2").equals("another")); [EOL] }
@Test [EOL] public void testGetFirstContextValue() { [EOL]     exceptionContext.addContextValue("test2", "different value"); [EOL]     assertTrue(exceptionContext.getFirstContextValue("test1") == null); [EOL]     assertTrue(exceptionContext.getFirstContextValue("test2").equals("some value")); [EOL]     assertTrue(exceptionContext.getFirstContextValue("crap") == null); [EOL]     exceptionContext.setContextValue("test2", "another"); [EOL]     assertTrue(exceptionContext.getFirstContextValue("test2").equals("another")); [EOL] }
@Test [EOL] public void testGetFirstContextValue() { [EOL]     exceptionContext.addContextValue("test2", "different value"); [EOL]     assertTrue(exceptionContext.getFirstContextValue("test1") == null); [EOL]     assertTrue(exceptionContext.getFirstContextValue("test2").equals("some value")); [EOL]     assertTrue(exceptionContext.getFirstContextValue("crap") == null); [EOL]     exceptionContext.setContextValue("test2", "another"); [EOL]     assertTrue(exceptionContext.getFirstContextValue("test2").equals("another")); [EOL] }
@Test [EOL] public void testGetFirstContextValue() { [EOL]     exceptionContext.addContextValue("test2", "different value"); [EOL]     assertTrue(exceptionContext.getFirstContextValue("test1") == null); [EOL]     assertTrue(exceptionContext.getFirstContextValue("test2").equals("some value")); [EOL]     assertTrue(exceptionContext.getFirstContextValue("crap") == null); [EOL]     exceptionContext.setContextValue("test2", "another"); [EOL]     assertTrue(exceptionContext.getFirstContextValue("test2").equals("another")); [EOL] }
@Test [EOL] public void testGetFirstContextValue() { [EOL]     exceptionContext.addContextValue("test2", "different value"); [EOL]     assertTrue(exceptionContext.getFirstContextValue("test1") == null); [EOL]     assertTrue(exceptionContext.getFirstContextValue("test2").equals("some value")); [EOL]     assertTrue(exceptionContext.getFirstContextValue("crap") == null); [EOL]     exceptionContext.setContextValue("test2", "another"); [EOL]     assertTrue(exceptionContext.getFirstContextValue("test2").equals("another")); [EOL] }
@Test [EOL] public void testGetFirstContextValue() { [EOL]     exceptionContext.addContextValue("test2", "different value"); [EOL]     assertTrue(exceptionContext.getFirstContextValue("test1") == null); [EOL]     assertTrue(exceptionContext.getFirstContextValue("test2").equals("some value")); [EOL]     assertTrue(exceptionContext.getFirstContextValue("crap") == null); [EOL]     exceptionContext.setContextValue("test2", "another"); [EOL]     assertTrue(exceptionContext.getFirstContextValue("test2").equals("another")); [EOL] }
@Test [EOL] public void testGetFirstContextValue() { [EOL]     exceptionContext.addContextValue("test2", "different value"); [EOL]     assertTrue(exceptionContext.getFirstContextValue("test1") == null); [EOL]     assertTrue(exceptionContext.getFirstContextValue("test2").equals("some value")); [EOL]     assertTrue(exceptionContext.getFirstContextValue("crap") == null); [EOL]     exceptionContext.setContextValue("test2", "another"); [EOL]     assertTrue(exceptionContext.getFirstContextValue("test2").equals("another")); [EOL] }
@Test [EOL] public void testGetFirstContextValue() { [EOL]     exceptionContext.addContextValue("test2", "different value"); [EOL]     assertTrue(exceptionContext.getFirstContextValue("test1") == null); [EOL]     assertTrue(exceptionContext.getFirstContextValue("test2").equals("some value")); [EOL]     assertTrue(exceptionContext.getFirstContextValue("crap") == null); [EOL]     exceptionContext.setContextValue("test2", "another"); [EOL]     assertTrue(exceptionContext.getFirstContextValue("test2").equals("another")); [EOL] }
@Test [EOL] public void testGetFirstContextValue() { [EOL]     exceptionContext.addContextValue("test2", "different value"); [EOL]     assertTrue(exceptionContext.getFirstContextValue("test1") == null); [EOL]     assertTrue(exceptionContext.getFirstContextValue("test2").equals("some value")); [EOL]     assertTrue(exceptionContext.getFirstContextValue("crap") == null); [EOL]     exceptionContext.setContextValue("test2", "another"); [EOL]     assertTrue(exceptionContext.getFirstContextValue("test2").equals("another")); [EOL] }
@Test [EOL] public void testGetFirstContextValue() { [EOL]     exceptionContext.addContextValue("test2", "different value"); [EOL]     assertTrue(exceptionContext.getFirstContextValue("test1") == null); [EOL]     assertTrue(exceptionContext.getFirstContextValue("test2").equals("some value")); [EOL]     assertTrue(exceptionContext.getFirstContextValue("crap") == null); [EOL]     exceptionContext.setContextValue("test2", "another"); [EOL]     assertTrue(exceptionContext.getFirstContextValue("test2").equals("another")); [EOL] }
@Test [EOL] public void testGetFirstContextValue() { [EOL]     exceptionContext.addContextValue("test2", "different value"); [EOL]     assertTrue(exceptionContext.getFirstContextValue("test1") == null); [EOL]     assertTrue(exceptionContext.getFirstContextValue("test2").equals("some value")); [EOL]     assertTrue(exceptionContext.getFirstContextValue("crap") == null); [EOL]     exceptionContext.setContextValue("test2", "another"); [EOL]     assertTrue(exceptionContext.getFirstContextValue("test2").equals("another")); [EOL] }
@Test [EOL] public void testGetFirstContextValue() { [EOL]     exceptionContext.addContextValue("test2", "different value"); [EOL]     assertTrue(exceptionContext.getFirstContextValue("test1") == null); [EOL]     assertTrue(exceptionContext.getFirstContextValue("test2").equals("some value")); [EOL]     assertTrue(exceptionContext.getFirstContextValue("crap") == null); [EOL]     exceptionContext.setContextValue("test2", "another"); [EOL]     assertTrue(exceptionContext.getFirstContextValue("test2").equals("another")); [EOL] }
@Test [EOL] public void testSetContextValue() { [EOL]     exceptionContext.addContextValue("test2", "different value"); [EOL]     exceptionContext.setContextValue("test3", "3"); [EOL]     final String message = exceptionContext.getFormattedExceptionMessage(TEST_MESSAGE); [EOL]     assertTrue(message.indexOf(TEST_MESSAGE) >= 0); [EOL]     assertTrue(message.indexOf("test Poorly written obj") >= 0); [EOL]     assertTrue(message.indexOf("Crap") >= 0); [EOL]     assertTrue(exceptionContext.getFirstContextValue("crap") == null); [EOL]     assertTrue(exceptionContext.getFirstContextValue("test Poorly written obj") instanceof ObjectWithFaultyToString); [EOL]     assertEquals(7, exceptionContext.getContextEntries().size()); [EOL]     assertEquals(6, exceptionContext.getContextLabels().size()); [EOL]     assertTrue(exceptionContext.getContextLabels().contains("test Poorly written obj")); [EOL]     assertTrue(!exceptionContext.getContextLabels().contains("crap")); [EOL]     exceptionContext.setContextValue("test Poorly written obj", "replacement"); [EOL]     assertEquals(7, exceptionContext.getContextEntries().size()); [EOL]     assertEquals(6, exceptionContext.getContextLabels().size()); [EOL]     exceptionContext.setContextValue("test2", "another"); [EOL]     assertEquals(6, exceptionContext.getContextEntries().size()); [EOL]     assertEquals(6, exceptionContext.getContextLabels().size()); [EOL]     final String contextMessage = exceptionContext.getFormattedExceptionMessage(null); [EOL]     assertTrue(contextMessage.indexOf(TEST_MESSAGE) == -1); [EOL] }
@Test [EOL] public void testSetContextValue() { [EOL]     exceptionContext.addContextValue("test2", "different value"); [EOL]     exceptionContext.setContextValue("test3", "3"); [EOL]     final String message = exceptionContext.getFormattedExceptionMessage(TEST_MESSAGE); [EOL]     assertTrue(message.indexOf(TEST_MESSAGE) >= 0); [EOL]     assertTrue(message.indexOf("test Poorly written obj") >= 0); [EOL]     assertTrue(message.indexOf("Crap") >= 0); [EOL]     assertTrue(exceptionContext.getFirstContextValue("crap") == null); [EOL]     assertTrue(exceptionContext.getFirstContextValue("test Poorly written obj") instanceof ObjectWithFaultyToString); [EOL]     assertEquals(7, exceptionContext.getContextEntries().size()); [EOL]     assertEquals(6, exceptionContext.getContextLabels().size()); [EOL]     assertTrue(exceptionContext.getContextLabels().contains("test Poorly written obj")); [EOL]     assertTrue(!exceptionContext.getContextLabels().contains("crap")); [EOL]     exceptionContext.setContextValue("test Poorly written obj", "replacement"); [EOL]     assertEquals(7, exceptionContext.getContextEntries().size()); [EOL]     assertEquals(6, exceptionContext.getContextLabels().size()); [EOL]     exceptionContext.setContextValue("test2", "another"); [EOL]     assertEquals(6, exceptionContext.getContextEntries().size()); [EOL]     assertEquals(6, exceptionContext.getContextLabels().size()); [EOL]     final String contextMessage = exceptionContext.getFormattedExceptionMessage(null); [EOL]     assertTrue(contextMessage.indexOf(TEST_MESSAGE) == -1); [EOL] }
@Test [EOL] public void testSetContextValue() { [EOL]     exceptionContext.addContextValue("test2", "different value"); [EOL]     exceptionContext.setContextValue("test3", "3"); [EOL]     final String message = exceptionContext.getFormattedExceptionMessage(TEST_MESSAGE); [EOL]     assertTrue(message.indexOf(TEST_MESSAGE) >= 0); [EOL]     assertTrue(message.indexOf("test Poorly written obj") >= 0); [EOL]     assertTrue(message.indexOf("Crap") >= 0); [EOL]     assertTrue(exceptionContext.getFirstContextValue("crap") == null); [EOL]     assertTrue(exceptionContext.getFirstContextValue("test Poorly written obj") instanceof ObjectWithFaultyToString); [EOL]     assertEquals(7, exceptionContext.getContextEntries().size()); [EOL]     assertEquals(6, exceptionContext.getContextLabels().size()); [EOL]     assertTrue(exceptionContext.getContextLabels().contains("test Poorly written obj")); [EOL]     assertTrue(!exceptionContext.getContextLabels().contains("crap")); [EOL]     exceptionContext.setContextValue("test Poorly written obj", "replacement"); [EOL]     assertEquals(7, exceptionContext.getContextEntries().size()); [EOL]     assertEquals(6, exceptionContext.getContextLabels().size()); [EOL]     exceptionContext.setContextValue("test2", "another"); [EOL]     assertEquals(6, exceptionContext.getContextEntries().size()); [EOL]     assertEquals(6, exceptionContext.getContextLabels().size()); [EOL]     final String contextMessage = exceptionContext.getFormattedExceptionMessage(null); [EOL]     assertTrue(contextMessage.indexOf(TEST_MESSAGE) == -1); [EOL] }
@Test [EOL] public void testSetContextValue() { [EOL]     exceptionContext.addContextValue("test2", "different value"); [EOL]     exceptionContext.setContextValue("test3", "3"); [EOL]     final String message = exceptionContext.getFormattedExceptionMessage(TEST_MESSAGE); [EOL]     assertTrue(message.indexOf(TEST_MESSAGE) >= 0); [EOL]     assertTrue(message.indexOf("test Poorly written obj") >= 0); [EOL]     assertTrue(message.indexOf("Crap") >= 0); [EOL]     assertTrue(exceptionContext.getFirstContextValue("crap") == null); [EOL]     assertTrue(exceptionContext.getFirstContextValue("test Poorly written obj") instanceof ObjectWithFaultyToString); [EOL]     assertEquals(7, exceptionContext.getContextEntries().size()); [EOL]     assertEquals(6, exceptionContext.getContextLabels().size()); [EOL]     assertTrue(exceptionContext.getContextLabels().contains("test Poorly written obj")); [EOL]     assertTrue(!exceptionContext.getContextLabels().contains("crap")); [EOL]     exceptionContext.setContextValue("test Poorly written obj", "replacement"); [EOL]     assertEquals(7, exceptionContext.getContextEntries().size()); [EOL]     assertEquals(6, exceptionContext.getContextLabels().size()); [EOL]     exceptionContext.setContextValue("test2", "another"); [EOL]     assertEquals(6, exceptionContext.getContextEntries().size()); [EOL]     assertEquals(6, exceptionContext.getContextLabels().size()); [EOL]     final String contextMessage = exceptionContext.getFormattedExceptionMessage(null); [EOL]     assertTrue(contextMessage.indexOf(TEST_MESSAGE) == -1); [EOL] }
@Test [EOL] public void testSetContextValue() { [EOL]     exceptionContext.addContextValue("test2", "different value"); [EOL]     exceptionContext.setContextValue("test3", "3"); [EOL]     final String message = exceptionContext.getFormattedExceptionMessage(TEST_MESSAGE); [EOL]     assertTrue(message.indexOf(TEST_MESSAGE) >= 0); [EOL]     assertTrue(message.indexOf("test Poorly written obj") >= 0); [EOL]     assertTrue(message.indexOf("Crap") >= 0); [EOL]     assertTrue(exceptionContext.getFirstContextValue("crap") == null); [EOL]     assertTrue(exceptionContext.getFirstContextValue("test Poorly written obj") instanceof ObjectWithFaultyToString); [EOL]     assertEquals(7, exceptionContext.getContextEntries().size()); [EOL]     assertEquals(6, exceptionContext.getContextLabels().size()); [EOL]     assertTrue(exceptionContext.getContextLabels().contains("test Poorly written obj")); [EOL]     assertTrue(!exceptionContext.getContextLabels().contains("crap")); [EOL]     exceptionContext.setContextValue("test Poorly written obj", "replacement"); [EOL]     assertEquals(7, exceptionContext.getContextEntries().size()); [EOL]     assertEquals(6, exceptionContext.getContextLabels().size()); [EOL]     exceptionContext.setContextValue("test2", "another"); [EOL]     assertEquals(6, exceptionContext.getContextEntries().size()); [EOL]     assertEquals(6, exceptionContext.getContextLabels().size()); [EOL]     final String contextMessage = exceptionContext.getFormattedExceptionMessage(null); [EOL]     assertTrue(contextMessage.indexOf(TEST_MESSAGE) == -1); [EOL] }
@Test [EOL] public void testIsEmpty() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     assertTrue(sb.isEmpty()); [EOL]     sb.append("Hello"); [EOL]     assertFalse(sb.isEmpty()); [EOL]     sb.clear(); [EOL]     assertTrue(sb.isEmpty()); [EOL] }
@Test [EOL] public void testIsEmpty() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     assertTrue(sb.isEmpty()); [EOL]     sb.append("Hello"); [EOL]     assertFalse(sb.isEmpty()); [EOL]     sb.clear(); [EOL]     assertTrue(sb.isEmpty()); [EOL] }
@Test [EOL] public void testIsEmpty() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     assertTrue(sb.isEmpty()); [EOL]     sb.append("Hello"); [EOL]     assertFalse(sb.isEmpty()); [EOL]     sb.clear(); [EOL]     assertTrue(sb.isEmpty()); [EOL] }
@Test [EOL] public void testChaining() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     assertSame(sb, sb.setNewLineText(null)); [EOL]     assertSame(sb, sb.setNullText(null)); [EOL]     assertSame(sb, sb.setLength(1)); [EOL]     assertSame(sb, sb.setCharAt(0, 'a')); [EOL]     assertSame(sb, sb.ensureCapacity(0)); [EOL]     assertSame(sb, sb.minimizeCapacity()); [EOL]     assertSame(sb, sb.clear()); [EOL]     assertSame(sb, sb.reverse()); [EOL]     assertSame(sb, sb.trim()); [EOL] }
@Test [EOL] public void testChaining() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     assertSame(sb, sb.setNewLineText(null)); [EOL]     assertSame(sb, sb.setNullText(null)); [EOL]     assertSame(sb, sb.setLength(1)); [EOL]     assertSame(sb, sb.setCharAt(0, 'a')); [EOL]     assertSame(sb, sb.ensureCapacity(0)); [EOL]     assertSame(sb, sb.minimizeCapacity()); [EOL]     assertSame(sb, sb.clear()); [EOL]     assertSame(sb, sb.reverse()); [EOL]     assertSame(sb, sb.trim()); [EOL] }
@Test [EOL] public void testChaining() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     assertSame(sb, sb.setNewLineText(null)); [EOL]     assertSame(sb, sb.setNullText(null)); [EOL]     assertSame(sb, sb.setLength(1)); [EOL]     assertSame(sb, sb.setCharAt(0, 'a')); [EOL]     assertSame(sb, sb.ensureCapacity(0)); [EOL]     assertSame(sb, sb.minimizeCapacity()); [EOL]     assertSame(sb, sb.clear()); [EOL]     assertSame(sb, sb.reverse()); [EOL]     assertSame(sb, sb.trim()); [EOL] }
@Test [EOL] public void testToCharArray() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     assertEquals(ArrayUtils.EMPTY_CHAR_ARRAY, sb.toCharArray()); [EOL]     char[] a = sb.toCharArray(); [EOL]     assertNotNull("toCharArray() result is null", a); [EOL]     assertEquals("toCharArray() result is too large", 0, a.length); [EOL]     sb.append("junit"); [EOL]     a = sb.toCharArray(); [EOL]     assertEquals("toCharArray() result incorrect length", 5, a.length); [EOL]     assertTrue("toCharArray() result does not match", Arrays.equals("junit".toCharArray(), a)); [EOL] }
@Test [EOL] public void testToCharArray() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     assertEquals(ArrayUtils.EMPTY_CHAR_ARRAY, sb.toCharArray()); [EOL]     char[] a = sb.toCharArray(); [EOL]     assertNotNull("toCharArray() result is null", a); [EOL]     assertEquals("toCharArray() result is too large", 0, a.length); [EOL]     sb.append("junit"); [EOL]     a = sb.toCharArray(); [EOL]     assertEquals("toCharArray() result incorrect length", 5, a.length); [EOL]     assertTrue("toCharArray() result does not match", Arrays.equals("junit".toCharArray(), a)); [EOL] }
@Test [EOL] public void testAppend_StrBuilder_int_int() { [EOL]     StrBuilder sb = new StrBuilder(); [EOL]     sb.setNullText("NULL").append((StrBuilder) null, 0, 1); [EOL]     assertEquals("NULL", sb.toString()); [EOL]     sb = new StrBuilder(); [EOL]     sb.append(new StrBuilder("foo"), 0, 3); [EOL]     assertEquals("foo", sb.toString()); [EOL]     try { [EOL]         sb.append(new StrBuilder("bar"), -1, 1); [EOL]         fail("append(char[], -1,) expected IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.append(new StrBuilder("bar"), 3, 1); [EOL]         fail("append(char[], 3,) expected IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.append(new StrBuilder("bar"), 1, -1); [EOL]         fail("append(char[],, -1) expected IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.append(new StrBuilder("bar"), 1, 3); [EOL]         fail("append(char[], 1, 3) expected IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.append(new StrBuilder("bar"), -1, 3); [EOL]         fail("append(char[], -1, 3) expected IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.append(new StrBuilder("bar"), 4, 0); [EOL]         fail("append(char[], 4, 0) expected IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.append(new StrBuilder("bar"), 3, 0); [EOL]     assertEquals("foo", sb.toString()); [EOL]     sb.append(new StrBuilder("abcbardef"), 3, 3); [EOL]     assertEquals("foobar", sb.toString()); [EOL] }
@Test [EOL] public void testAppendWithSeparators_Iterator() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     sb.appendWithSeparators((Iterator<?>) null, ","); [EOL]     assertEquals("", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.appendWithSeparators(Collections.EMPTY_LIST.iterator(), ","); [EOL]     assertEquals("", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.appendWithSeparators(Arrays.asList(new Object[] { "foo", "bar", "baz" }).iterator(), ","); [EOL]     assertEquals("foo,bar,baz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.appendWithSeparators(Arrays.asList(new Object[] { "foo", "bar", "baz" }).iterator(), null); [EOL]     assertEquals("foobarbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.appendWithSeparators(Arrays.asList(new Object[] { "foo", null, "baz" }).iterator(), ","); [EOL]     assertEquals("foo,,baz", sb.toString()); [EOL] }
@Test [EOL] public void testAppendWithSeparators_Iterator() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     sb.appendWithSeparators((Iterator<?>) null, ","); [EOL]     assertEquals("", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.appendWithSeparators(Collections.EMPTY_LIST.iterator(), ","); [EOL]     assertEquals("", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.appendWithSeparators(Arrays.asList(new Object[] { "foo", "bar", "baz" }).iterator(), ","); [EOL]     assertEquals("foo,bar,baz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.appendWithSeparators(Arrays.asList(new Object[] { "foo", "bar", "baz" }).iterator(), null); [EOL]     assertEquals("foobarbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.appendWithSeparators(Arrays.asList(new Object[] { "foo", null, "baz" }).iterator(), ","); [EOL]     assertEquals("foo,,baz", sb.toString()); [EOL] }
@Test [EOL] public void testAppendWithSeparators_Iterator() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     sb.appendWithSeparators((Iterator<?>) null, ","); [EOL]     assertEquals("", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.appendWithSeparators(Collections.EMPTY_LIST.iterator(), ","); [EOL]     assertEquals("", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.appendWithSeparators(Arrays.asList(new Object[] { "foo", "bar", "baz" }).iterator(), ","); [EOL]     assertEquals("foo,bar,baz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.appendWithSeparators(Arrays.asList(new Object[] { "foo", "bar", "baz" }).iterator(), null); [EOL]     assertEquals("foobarbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.appendWithSeparators(Arrays.asList(new Object[] { "foo", null, "baz" }).iterator(), ","); [EOL]     assertEquals("foo,,baz", sb.toString()); [EOL] }
@Test [EOL] public void testAppendWithSeparators_Iterator() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     sb.appendWithSeparators((Iterator<?>) null, ","); [EOL]     assertEquals("", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.appendWithSeparators(Collections.EMPTY_LIST.iterator(), ","); [EOL]     assertEquals("", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.appendWithSeparators(Arrays.asList(new Object[] { "foo", "bar", "baz" }).iterator(), ","); [EOL]     assertEquals("foo,bar,baz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.appendWithSeparators(Arrays.asList(new Object[] { "foo", "bar", "baz" }).iterator(), null); [EOL]     assertEquals("foobarbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.appendWithSeparators(Arrays.asList(new Object[] { "foo", null, "baz" }).iterator(), ","); [EOL]     assertEquals("foo,,baz", sb.toString()); [EOL] }
@Test [EOL] public void testAppend_Object() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     sb.appendNull(); [EOL]     assertEquals("", sb.toString()); [EOL]     sb.append((Object) null); [EOL]     assertEquals("", sb.toString()); [EOL]     sb.append(FOO); [EOL]     assertEquals("foo", sb.toString()); [EOL]     sb.append((StringBuffer) null); [EOL]     assertEquals("foo", sb.toString()); [EOL]     sb.append(new StringBuffer("baz")); [EOL]     assertEquals("foobaz", sb.toString()); [EOL]     sb.append(new StrBuilder("yes")); [EOL]     assertEquals("foobazyes", sb.toString()); [EOL]     sb.append((CharSequence) "Seq"); [EOL]     assertEquals("foobazyesSeq", sb.toString()); [EOL]     sb.append(new StringBuilder("bld")); [EOL]     assertEquals("foobazyesSeqbld", sb.toString()); [EOL] }
@Test [EOL] public void testAppend_Object() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     sb.appendNull(); [EOL]     assertEquals("", sb.toString()); [EOL]     sb.append((Object) null); [EOL]     assertEquals("", sb.toString()); [EOL]     sb.append(FOO); [EOL]     assertEquals("foo", sb.toString()); [EOL]     sb.append((StringBuffer) null); [EOL]     assertEquals("foo", sb.toString()); [EOL]     sb.append(new StringBuffer("baz")); [EOL]     assertEquals("foobaz", sb.toString()); [EOL]     sb.append(new StrBuilder("yes")); [EOL]     assertEquals("foobazyes", sb.toString()); [EOL]     sb.append((CharSequence) "Seq"); [EOL]     assertEquals("foobazyesSeq", sb.toString()); [EOL]     sb.append(new StringBuilder("bld")); [EOL]     assertEquals("foobazyesSeqbld", sb.toString()); [EOL] }
@Test [EOL] public void testAppend_Object() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     sb.appendNull(); [EOL]     assertEquals("", sb.toString()); [EOL]     sb.append((Object) null); [EOL]     assertEquals("", sb.toString()); [EOL]     sb.append(FOO); [EOL]     assertEquals("foo", sb.toString()); [EOL]     sb.append((StringBuffer) null); [EOL]     assertEquals("foo", sb.toString()); [EOL]     sb.append(new StringBuffer("baz")); [EOL]     assertEquals("foobaz", sb.toString()); [EOL]     sb.append(new StrBuilder("yes")); [EOL]     assertEquals("foobazyes", sb.toString()); [EOL]     sb.append((CharSequence) "Seq"); [EOL]     assertEquals("foobazyesSeq", sb.toString()); [EOL]     sb.append(new StringBuilder("bld")); [EOL]     assertEquals("foobazyesSeqbld", sb.toString()); [EOL] }
@Test [EOL] public void testAppend_Object() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     sb.appendNull(); [EOL]     assertEquals("", sb.toString()); [EOL]     sb.append((Object) null); [EOL]     assertEquals("", sb.toString()); [EOL]     sb.append(FOO); [EOL]     assertEquals("foo", sb.toString()); [EOL]     sb.append((StringBuffer) null); [EOL]     assertEquals("foo", sb.toString()); [EOL]     sb.append(new StringBuffer("baz")); [EOL]     assertEquals("foobaz", sb.toString()); [EOL]     sb.append(new StrBuilder("yes")); [EOL]     assertEquals("foobazyes", sb.toString()); [EOL]     sb.append((CharSequence) "Seq"); [EOL]     assertEquals("foobazyesSeq", sb.toString()); [EOL]     sb.append(new StringBuilder("bld")); [EOL]     assertEquals("foobazyesSeqbld", sb.toString()); [EOL] }
@Test [EOL] public void testAppend_Object() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     sb.appendNull(); [EOL]     assertEquals("", sb.toString()); [EOL]     sb.append((Object) null); [EOL]     assertEquals("", sb.toString()); [EOL]     sb.append(FOO); [EOL]     assertEquals("foo", sb.toString()); [EOL]     sb.append((StringBuffer) null); [EOL]     assertEquals("foo", sb.toString()); [EOL]     sb.append(new StringBuffer("baz")); [EOL]     assertEquals("foobaz", sb.toString()); [EOL]     sb.append(new StrBuilder("yes")); [EOL]     assertEquals("foobazyes", sb.toString()); [EOL]     sb.append((CharSequence) "Seq"); [EOL]     assertEquals("foobazyesSeq", sb.toString()); [EOL]     sb.append(new StringBuilder("bld")); [EOL]     assertEquals("foobazyesSeqbld", sb.toString()); [EOL] }
@Test [EOL] public void testAppend_StrBuilder_int_int() { [EOL]     StrBuilder sb = new StrBuilder(); [EOL]     sb.setNullText("NULL").append((StrBuilder) null, 0, 1); [EOL]     assertEquals("NULL", sb.toString()); [EOL]     sb = new StrBuilder(); [EOL]     sb.append(new StrBuilder("foo"), 0, 3); [EOL]     assertEquals("foo", sb.toString()); [EOL]     try { [EOL]         sb.append(new StrBuilder("bar"), -1, 1); [EOL]         fail("append(char[], -1,) expected IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.append(new StrBuilder("bar"), 3, 1); [EOL]         fail("append(char[], 3,) expected IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.append(new StrBuilder("bar"), 1, -1); [EOL]         fail("append(char[],, -1) expected IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.append(new StrBuilder("bar"), 1, 3); [EOL]         fail("append(char[], 1, 3) expected IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.append(new StrBuilder("bar"), -1, 3); [EOL]         fail("append(char[], -1, 3) expected IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.append(new StrBuilder("bar"), 4, 0); [EOL]         fail("append(char[], 4, 0) expected IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.append(new StrBuilder("bar"), 3, 0); [EOL]     assertEquals("foo", sb.toString()); [EOL]     sb.append(new StrBuilder("abcbardef"), 3, 3); [EOL]     assertEquals("foobar", sb.toString()); [EOL] }
@Test [EOL] public void testAppend_StrBuilder_int_int() { [EOL]     StrBuilder sb = new StrBuilder(); [EOL]     sb.setNullText("NULL").append((StrBuilder) null, 0, 1); [EOL]     assertEquals("NULL", sb.toString()); [EOL]     sb = new StrBuilder(); [EOL]     sb.append(new StrBuilder("foo"), 0, 3); [EOL]     assertEquals("foo", sb.toString()); [EOL]     try { [EOL]         sb.append(new StrBuilder("bar"), -1, 1); [EOL]         fail("append(char[], -1,) expected IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.append(new StrBuilder("bar"), 3, 1); [EOL]         fail("append(char[], 3,) expected IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.append(new StrBuilder("bar"), 1, -1); [EOL]         fail("append(char[],, -1) expected IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.append(new StrBuilder("bar"), 1, 3); [EOL]         fail("append(char[], 1, 3) expected IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.append(new StrBuilder("bar"), -1, 3); [EOL]         fail("append(char[], -1, 3) expected IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.append(new StrBuilder("bar"), 4, 0); [EOL]         fail("append(char[], 4, 0) expected IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.append(new StrBuilder("bar"), 3, 0); [EOL]     assertEquals("foo", sb.toString()); [EOL]     sb.append(new StrBuilder("abcbardef"), 3, 3); [EOL]     assertEquals("foobar", sb.toString()); [EOL] }
@Test [EOL] public void testAppend_StrBuilder_int_int() { [EOL]     StrBuilder sb = new StrBuilder(); [EOL]     sb.setNullText("NULL").append((StrBuilder) null, 0, 1); [EOL]     assertEquals("NULL", sb.toString()); [EOL]     sb = new StrBuilder(); [EOL]     sb.append(new StrBuilder("foo"), 0, 3); [EOL]     assertEquals("foo", sb.toString()); [EOL]     try { [EOL]         sb.append(new StrBuilder("bar"), -1, 1); [EOL]         fail("append(char[], -1,) expected IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.append(new StrBuilder("bar"), 3, 1); [EOL]         fail("append(char[], 3,) expected IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.append(new StrBuilder("bar"), 1, -1); [EOL]         fail("append(char[],, -1) expected IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.append(new StrBuilder("bar"), 1, 3); [EOL]         fail("append(char[], 1, 3) expected IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.append(new StrBuilder("bar"), -1, 3); [EOL]         fail("append(char[], -1, 3) expected IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.append(new StrBuilder("bar"), 4, 0); [EOL]         fail("append(char[], 4, 0) expected IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.append(new StrBuilder("bar"), 3, 0); [EOL]     assertEquals("foo", sb.toString()); [EOL]     sb.append(new StrBuilder("abcbardef"), 3, 3); [EOL]     assertEquals("foobar", sb.toString()); [EOL] }
@Test [EOL] public void testAppend_StrBuilder_int_int() { [EOL]     StrBuilder sb = new StrBuilder(); [EOL]     sb.setNullText("NULL").append((StrBuilder) null, 0, 1); [EOL]     assertEquals("NULL", sb.toString()); [EOL]     sb = new StrBuilder(); [EOL]     sb.append(new StrBuilder("foo"), 0, 3); [EOL]     assertEquals("foo", sb.toString()); [EOL]     try { [EOL]         sb.append(new StrBuilder("bar"), -1, 1); [EOL]         fail("append(char[], -1,) expected IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.append(new StrBuilder("bar"), 3, 1); [EOL]         fail("append(char[], 3,) expected IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.append(new StrBuilder("bar"), 1, -1); [EOL]         fail("append(char[],, -1) expected IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.append(new StrBuilder("bar"), 1, 3); [EOL]         fail("append(char[], 1, 3) expected IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.append(new StrBuilder("bar"), -1, 3); [EOL]         fail("append(char[], -1, 3) expected IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.append(new StrBuilder("bar"), 4, 0); [EOL]         fail("append(char[], 4, 0) expected IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.append(new StrBuilder("bar"), 3, 0); [EOL]     assertEquals("foo", sb.toString()); [EOL]     sb.append(new StrBuilder("abcbardef"), 3, 3); [EOL]     assertEquals("foobar", sb.toString()); [EOL] }
@Test [EOL] public void testAppend_StrBuilder_int_int() { [EOL]     StrBuilder sb = new StrBuilder(); [EOL]     sb.setNullText("NULL").append((StrBuilder) null, 0, 1); [EOL]     assertEquals("NULL", sb.toString()); [EOL]     sb = new StrBuilder(); [EOL]     sb.append(new StrBuilder("foo"), 0, 3); [EOL]     assertEquals("foo", sb.toString()); [EOL]     try { [EOL]         sb.append(new StrBuilder("bar"), -1, 1); [EOL]         fail("append(char[], -1,) expected IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.append(new StrBuilder("bar"), 3, 1); [EOL]         fail("append(char[], 3,) expected IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.append(new StrBuilder("bar"), 1, -1); [EOL]         fail("append(char[],, -1) expected IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.append(new StrBuilder("bar"), 1, 3); [EOL]         fail("append(char[], 1, 3) expected IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.append(new StrBuilder("bar"), -1, 3); [EOL]         fail("append(char[], -1, 3) expected IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.append(new StrBuilder("bar"), 4, 0); [EOL]         fail("append(char[], 4, 0) expected IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.append(new StrBuilder("bar"), 3, 0); [EOL]     assertEquals("foo", sb.toString()); [EOL]     sb.append(new StrBuilder("abcbardef"), 3, 3); [EOL]     assertEquals("foobar", sb.toString()); [EOL] }
@Test [EOL] public void testAppend_StrBuilder_int_int() { [EOL]     StrBuilder sb = new StrBuilder(); [EOL]     sb.setNullText("NULL").append((StrBuilder) null, 0, 1); [EOL]     assertEquals("NULL", sb.toString()); [EOL]     sb = new StrBuilder(); [EOL]     sb.append(new StrBuilder("foo"), 0, 3); [EOL]     assertEquals("foo", sb.toString()); [EOL]     try { [EOL]         sb.append(new StrBuilder("bar"), -1, 1); [EOL]         fail("append(char[], -1,) expected IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.append(new StrBuilder("bar"), 3, 1); [EOL]         fail("append(char[], 3,) expected IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.append(new StrBuilder("bar"), 1, -1); [EOL]         fail("append(char[],, -1) expected IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.append(new StrBuilder("bar"), 1, 3); [EOL]         fail("append(char[], 1, 3) expected IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.append(new StrBuilder("bar"), -1, 3); [EOL]         fail("append(char[], -1, 3) expected IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.append(new StrBuilder("bar"), 4, 0); [EOL]         fail("append(char[], 4, 0) expected IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.append(new StrBuilder("bar"), 3, 0); [EOL]     assertEquals("foo", sb.toString()); [EOL]     sb.append(new StrBuilder("abcbardef"), 3, 3); [EOL]     assertEquals("foobar", sb.toString()); [EOL] }
@Test [EOL] public void testAsWriter() throws Exception { [EOL]     final StrBuilder sb = new StrBuilder("base"); [EOL]     final Writer writer = sb.asWriter(); [EOL]     writer.write('l'); [EOL]     assertEquals("basel", sb.toString()); [EOL]     writer.write(new char[] { 'i', 'n' }); [EOL]     assertEquals("baselin", sb.toString()); [EOL]     writer.write(new char[] { 'n', 'e', 'r' }, 1, 2); [EOL]     assertEquals("baseliner", sb.toString()); [EOL]     writer.write(" rout"); [EOL]     assertEquals("baseliner rout", sb.toString()); [EOL]     writer.write("ping that server", 1, 3); [EOL]     assertEquals("baseliner routing", sb.toString()); [EOL]     writer.flush(); [EOL]     assertEquals("baseliner routing", sb.toString()); [EOL]     writer.close(); [EOL]     assertEquals("baseliner routing", sb.toString()); [EOL]     writer.write(" hi"); [EOL]     assertEquals("baseliner routing hi", sb.toString()); [EOL]     sb.setLength(4); [EOL]     writer.write('d'); [EOL]     assertEquals("based", sb.toString()); [EOL] }
@Test [EOL] public void testAsWriter() throws Exception { [EOL]     final StrBuilder sb = new StrBuilder("base"); [EOL]     final Writer writer = sb.asWriter(); [EOL]     writer.write('l'); [EOL]     assertEquals("basel", sb.toString()); [EOL]     writer.write(new char[] { 'i', 'n' }); [EOL]     assertEquals("baselin", sb.toString()); [EOL]     writer.write(new char[] { 'n', 'e', 'r' }, 1, 2); [EOL]     assertEquals("baseliner", sb.toString()); [EOL]     writer.write(" rout"); [EOL]     assertEquals("baseliner rout", sb.toString()); [EOL]     writer.write("ping that server", 1, 3); [EOL]     assertEquals("baseliner routing", sb.toString()); [EOL]     writer.flush(); [EOL]     assertEquals("baseliner routing", sb.toString()); [EOL]     writer.close(); [EOL]     assertEquals("baseliner routing", sb.toString()); [EOL]     writer.write(" hi"); [EOL]     assertEquals("baseliner routing hi", sb.toString()); [EOL]     sb.setLength(4); [EOL]     writer.write('d'); [EOL]     assertEquals("based", sb.toString()); [EOL] }
@Test [EOL] public void testAsWriter() throws Exception { [EOL]     final StrBuilder sb = new StrBuilder("base"); [EOL]     final Writer writer = sb.asWriter(); [EOL]     writer.write('l'); [EOL]     assertEquals("basel", sb.toString()); [EOL]     writer.write(new char[] { 'i', 'n' }); [EOL]     assertEquals("baselin", sb.toString()); [EOL]     writer.write(new char[] { 'n', 'e', 'r' }, 1, 2); [EOL]     assertEquals("baseliner", sb.toString()); [EOL]     writer.write(" rout"); [EOL]     assertEquals("baseliner rout", sb.toString()); [EOL]     writer.write("ping that server", 1, 3); [EOL]     assertEquals("baseliner routing", sb.toString()); [EOL]     writer.flush(); [EOL]     assertEquals("baseliner routing", sb.toString()); [EOL]     writer.close(); [EOL]     assertEquals("baseliner routing", sb.toString()); [EOL]     writer.write(" hi"); [EOL]     assertEquals("baseliner routing hi", sb.toString()); [EOL]     sb.setLength(4); [EOL]     writer.write('d'); [EOL]     assertEquals("based", sb.toString()); [EOL] }
@Test [EOL] public void testAppendln_String() { [EOL]     final int[] count = new int[2]; [EOL]     final StrBuilder sb = new StrBuilder() { [EOL]  [EOL]         @Override [EOL]         public StrBuilder append(final String str) { [EOL]             count[0]++; [EOL]             return super.append(str); [EOL]         } [EOL]  [EOL]         @Override [EOL]         public StrBuilder appendNewLine() { [EOL]             count[1]++; [EOL]             return super.appendNewLine(); [EOL]         } [EOL]     }; [EOL]     sb.appendln("foo"); [EOL]     assertEquals("foo" + SEP, sb.toString()); [EOL]     assertEquals(2, count[0]); [EOL]     assertEquals(1, count[1]); [EOL] }
@Test [EOL] public void testAppendln_String() { [EOL]     final int[] count = new int[2]; [EOL]     final StrBuilder sb = new StrBuilder() { [EOL]  [EOL]         @Override [EOL]         public StrBuilder append(final String str) { [EOL]             count[0]++; [EOL]             return super.append(str); [EOL]         } [EOL]  [EOL]         @Override [EOL]         public StrBuilder appendNewLine() { [EOL]             count[1]++; [EOL]             return super.appendNewLine(); [EOL]         } [EOL]     }; [EOL]     sb.appendln("foo"); [EOL]     assertEquals("foo" + SEP, sb.toString()); [EOL]     assertEquals(2, count[0]); [EOL]     assertEquals(1, count[1]); [EOL] }
@Test [EOL] public void testAppendln_String() { [EOL]     final int[] count = new int[2]; [EOL]     final StrBuilder sb = new StrBuilder() { [EOL]  [EOL]         @Override [EOL]         public StrBuilder append(final String str) { [EOL]             count[0]++; [EOL]             return super.append(str); [EOL]         } [EOL]  [EOL]         @Override [EOL]         public StrBuilder appendNewLine() { [EOL]             count[1]++; [EOL]             return super.appendNewLine(); [EOL]         } [EOL]     }; [EOL]     sb.appendln("foo"); [EOL]     assertEquals("foo" + SEP, sb.toString()); [EOL]     assertEquals(2, count[0]); [EOL]     assertEquals(1, count[1]); [EOL] }
@Test [EOL] public void testAppendAll_Iterator() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     sb.appendAll((Iterator<?>) null); [EOL]     assertEquals("", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.appendAll(Collections.EMPTY_LIST.iterator()); [EOL]     assertEquals("", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.appendAll(Arrays.asList(new Object[] { "foo", "bar", "baz" }).iterator()); [EOL]     assertEquals("foobarbaz", sb.toString()); [EOL] }
@Test [EOL] public void testAppendAll_Iterator() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     sb.appendAll((Iterator<?>) null); [EOL]     assertEquals("", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.appendAll(Collections.EMPTY_LIST.iterator()); [EOL]     assertEquals("", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.appendAll(Arrays.asList(new Object[] { "foo", "bar", "baz" }).iterator()); [EOL]     assertEquals("foobarbaz", sb.toString()); [EOL] }
@Test [EOL] public void testAppendWithSeparators_Iterator() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     sb.appendWithSeparators((Iterator<?>) null, ","); [EOL]     assertEquals("", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.appendWithSeparators(Collections.EMPTY_LIST.iterator(), ","); [EOL]     assertEquals("", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.appendWithSeparators(Arrays.asList(new Object[] { "foo", "bar", "baz" }).iterator(), ","); [EOL]     assertEquals("foo,bar,baz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.appendWithSeparators(Arrays.asList(new Object[] { "foo", "bar", "baz" }).iterator(), null); [EOL]     assertEquals("foobarbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.appendWithSeparators(Arrays.asList(new Object[] { "foo", null, "baz" }).iterator(), ","); [EOL]     assertEquals("foo,,baz", sb.toString()); [EOL] }
@Test [EOL] public void testAppendWithSeparators_Iterator() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     sb.appendWithSeparators((Iterator<?>) null, ","); [EOL]     assertEquals("", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.appendWithSeparators(Collections.EMPTY_LIST.iterator(), ","); [EOL]     assertEquals("", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.appendWithSeparators(Arrays.asList(new Object[] { "foo", "bar", "baz" }).iterator(), ","); [EOL]     assertEquals("foo,bar,baz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.appendWithSeparators(Arrays.asList(new Object[] { "foo", "bar", "baz" }).iterator(), null); [EOL]     assertEquals("foobarbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.appendWithSeparators(Arrays.asList(new Object[] { "foo", null, "baz" }).iterator(), ","); [EOL]     assertEquals("foo,,baz", sb.toString()); [EOL] }
@Test [EOL] public void testAppendWithSeparators_Iterator() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     sb.appendWithSeparators((Iterator<?>) null, ","); [EOL]     assertEquals("", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.appendWithSeparators(Collections.EMPTY_LIST.iterator(), ","); [EOL]     assertEquals("", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.appendWithSeparators(Arrays.asList(new Object[] { "foo", "bar", "baz" }).iterator(), ","); [EOL]     assertEquals("foo,bar,baz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.appendWithSeparators(Arrays.asList(new Object[] { "foo", "bar", "baz" }).iterator(), null); [EOL]     assertEquals("foobarbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.appendWithSeparators(Arrays.asList(new Object[] { "foo", null, "baz" }).iterator(), ","); [EOL]     assertEquals("foo,,baz", sb.toString()); [EOL] }
@Test [EOL] public void testAppendWithSeparators_Iterator() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     sb.appendWithSeparators((Iterator<?>) null, ","); [EOL]     assertEquals("", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.appendWithSeparators(Collections.EMPTY_LIST.iterator(), ","); [EOL]     assertEquals("", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.appendWithSeparators(Arrays.asList(new Object[] { "foo", "bar", "baz" }).iterator(), ","); [EOL]     assertEquals("foo,bar,baz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.appendWithSeparators(Arrays.asList(new Object[] { "foo", "bar", "baz" }).iterator(), null); [EOL]     assertEquals("foobarbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.appendWithSeparators(Arrays.asList(new Object[] { "foo", null, "baz" }).iterator(), ","); [EOL]     assertEquals("foo,,baz", sb.toString()); [EOL] }
@Test [EOL] public void testAppendWithSeparators_Iterator() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     sb.appendWithSeparators((Iterator<?>) null, ","); [EOL]     assertEquals("", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.appendWithSeparators(Collections.EMPTY_LIST.iterator(), ","); [EOL]     assertEquals("", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.appendWithSeparators(Arrays.asList(new Object[] { "foo", "bar", "baz" }).iterator(), ","); [EOL]     assertEquals("foo,bar,baz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.appendWithSeparators(Arrays.asList(new Object[] { "foo", "bar", "baz" }).iterator(), null); [EOL]     assertEquals("foobarbaz", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.appendWithSeparators(Arrays.asList(new Object[] { "foo", null, "baz" }).iterator(), ","); [EOL]     assertEquals("foo,,baz", sb.toString()); [EOL] }
@Test [EOL] public void testAppendSeparator_String_String() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     final String startSeparator = "order by "; [EOL]     final String standardSeparator = ","; [EOL]     final String foo = "foo"; [EOL]     sb.appendSeparator(null, null); [EOL]     assertEquals("", sb.toString()); [EOL]     sb.appendSeparator(standardSeparator, null); [EOL]     assertEquals("", sb.toString()); [EOL]     sb.appendSeparator(standardSeparator, startSeparator); [EOL]     assertEquals(startSeparator, sb.toString()); [EOL]     sb.appendSeparator(null, null); [EOL]     assertEquals(startSeparator, sb.toString()); [EOL]     sb.appendSeparator(null, startSeparator); [EOL]     assertEquals(startSeparator, sb.toString()); [EOL]     sb.append(foo); [EOL]     assertEquals(startSeparator + foo, sb.toString()); [EOL]     sb.appendSeparator(standardSeparator, startSeparator); [EOL]     assertEquals(startSeparator + foo + standardSeparator, sb.toString()); [EOL] }
@Test [EOL] public void testAppendSeparator_String_String() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     final String startSeparator = "order by "; [EOL]     final String standardSeparator = ","; [EOL]     final String foo = "foo"; [EOL]     sb.appendSeparator(null, null); [EOL]     assertEquals("", sb.toString()); [EOL]     sb.appendSeparator(standardSeparator, null); [EOL]     assertEquals("", sb.toString()); [EOL]     sb.appendSeparator(standardSeparator, startSeparator); [EOL]     assertEquals(startSeparator, sb.toString()); [EOL]     sb.appendSeparator(null, null); [EOL]     assertEquals(startSeparator, sb.toString()); [EOL]     sb.appendSeparator(null, startSeparator); [EOL]     assertEquals(startSeparator, sb.toString()); [EOL]     sb.append(foo); [EOL]     assertEquals(startSeparator + foo, sb.toString()); [EOL]     sb.appendSeparator(standardSeparator, startSeparator); [EOL]     assertEquals(startSeparator + foo + standardSeparator, sb.toString()); [EOL] }
@Test [EOL] public void testAppendSeparator_String_String() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     final String startSeparator = "order by "; [EOL]     final String standardSeparator = ","; [EOL]     final String foo = "foo"; [EOL]     sb.appendSeparator(null, null); [EOL]     assertEquals("", sb.toString()); [EOL]     sb.appendSeparator(standardSeparator, null); [EOL]     assertEquals("", sb.toString()); [EOL]     sb.appendSeparator(standardSeparator, startSeparator); [EOL]     assertEquals(startSeparator, sb.toString()); [EOL]     sb.appendSeparator(null, null); [EOL]     assertEquals(startSeparator, sb.toString()); [EOL]     sb.appendSeparator(null, startSeparator); [EOL]     assertEquals(startSeparator, sb.toString()); [EOL]     sb.append(foo); [EOL]     assertEquals(startSeparator + foo, sb.toString()); [EOL]     sb.appendSeparator(standardSeparator, startSeparator); [EOL]     assertEquals(startSeparator + foo + standardSeparator, sb.toString()); [EOL] }
@Test [EOL] public void testAppendSeparator_String_String() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     final String startSeparator = "order by "; [EOL]     final String standardSeparator = ","; [EOL]     final String foo = "foo"; [EOL]     sb.appendSeparator(null, null); [EOL]     assertEquals("", sb.toString()); [EOL]     sb.appendSeparator(standardSeparator, null); [EOL]     assertEquals("", sb.toString()); [EOL]     sb.appendSeparator(standardSeparator, startSeparator); [EOL]     assertEquals(startSeparator, sb.toString()); [EOL]     sb.appendSeparator(null, null); [EOL]     assertEquals(startSeparator, sb.toString()); [EOL]     sb.appendSeparator(null, startSeparator); [EOL]     assertEquals(startSeparator, sb.toString()); [EOL]     sb.append(foo); [EOL]     assertEquals(startSeparator + foo, sb.toString()); [EOL]     sb.appendSeparator(standardSeparator, startSeparator); [EOL]     assertEquals(startSeparator + foo + standardSeparator, sb.toString()); [EOL] }
@Test [EOL] public void testAppendPadding() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     sb.append("foo"); [EOL]     assertEquals("foo", sb.toString()); [EOL]     sb.appendPadding(-1, '-'); [EOL]     assertEquals("foo", sb.toString()); [EOL]     sb.appendPadding(0, '-'); [EOL]     assertEquals("foo", sb.toString()); [EOL]     sb.appendPadding(1, '-'); [EOL]     assertEquals("foo-", sb.toString()); [EOL]     sb.appendPadding(16, '-'); [EOL]     assertEquals(20, sb.length()); [EOL]     assertEquals("foo-----------------", sb.toString()); [EOL] }
@Test [EOL] public void testAppendPadding() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     sb.append("foo"); [EOL]     assertEquals("foo", sb.toString()); [EOL]     sb.appendPadding(-1, '-'); [EOL]     assertEquals("foo", sb.toString()); [EOL]     sb.appendPadding(0, '-'); [EOL]     assertEquals("foo", sb.toString()); [EOL]     sb.appendPadding(1, '-'); [EOL]     assertEquals("foo-", sb.toString()); [EOL]     sb.appendPadding(16, '-'); [EOL]     assertEquals(20, sb.length()); [EOL]     assertEquals("foo-----------------", sb.toString()); [EOL] }
@Test [EOL] public void testAppendPadding() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     sb.append("foo"); [EOL]     assertEquals("foo", sb.toString()); [EOL]     sb.appendPadding(-1, '-'); [EOL]     assertEquals("foo", sb.toString()); [EOL]     sb.appendPadding(0, '-'); [EOL]     assertEquals("foo", sb.toString()); [EOL]     sb.appendPadding(1, '-'); [EOL]     assertEquals("foo-", sb.toString()); [EOL]     sb.appendPadding(16, '-'); [EOL]     assertEquals(20, sb.length()); [EOL]     assertEquals("foo-----------------", sb.toString()); [EOL] }
@Test [EOL] public void testDeleteAll_StrMatcher() { [EOL]     StrBuilder sb = new StrBuilder("A0xA1A2yA3"); [EOL]     sb.deleteAll((StrMatcher) null); [EOL]     assertEquals("A0xA1A2yA3", sb.toString()); [EOL]     sb.deleteAll(A_NUMBER_MATCHER); [EOL]     assertEquals("xy", sb.toString()); [EOL]     sb = new StrBuilder("Ax1"); [EOL]     sb.deleteAll(A_NUMBER_MATCHER); [EOL]     assertEquals("Ax1", sb.toString()); [EOL]     sb = new StrBuilder(""); [EOL]     sb.deleteAll(A_NUMBER_MATCHER); [EOL]     assertEquals("", sb.toString()); [EOL] }
@Test [EOL] public void testDeleteAll_StrMatcher() { [EOL]     StrBuilder sb = new StrBuilder("A0xA1A2yA3"); [EOL]     sb.deleteAll((StrMatcher) null); [EOL]     assertEquals("A0xA1A2yA3", sb.toString()); [EOL]     sb.deleteAll(A_NUMBER_MATCHER); [EOL]     assertEquals("xy", sb.toString()); [EOL]     sb = new StrBuilder("Ax1"); [EOL]     sb.deleteAll(A_NUMBER_MATCHER); [EOL]     assertEquals("Ax1", sb.toString()); [EOL]     sb = new StrBuilder(""); [EOL]     sb.deleteAll(A_NUMBER_MATCHER); [EOL]     assertEquals("", sb.toString()); [EOL] }
@Test [EOL] public void testDeleteAll_StrMatcher() { [EOL]     StrBuilder sb = new StrBuilder("A0xA1A2yA3"); [EOL]     sb.deleteAll((StrMatcher) null); [EOL]     assertEquals("A0xA1A2yA3", sb.toString()); [EOL]     sb.deleteAll(A_NUMBER_MATCHER); [EOL]     assertEquals("xy", sb.toString()); [EOL]     sb = new StrBuilder("Ax1"); [EOL]     sb.deleteAll(A_NUMBER_MATCHER); [EOL]     assertEquals("Ax1", sb.toString()); [EOL]     sb = new StrBuilder(""); [EOL]     sb.deleteAll(A_NUMBER_MATCHER); [EOL]     assertEquals("", sb.toString()); [EOL] }
@Test [EOL] public void testDeleteAll_StrMatcher() { [EOL]     StrBuilder sb = new StrBuilder("A0xA1A2yA3"); [EOL]     sb.deleteAll((StrMatcher) null); [EOL]     assertEquals("A0xA1A2yA3", sb.toString()); [EOL]     sb.deleteAll(A_NUMBER_MATCHER); [EOL]     assertEquals("xy", sb.toString()); [EOL]     sb = new StrBuilder("Ax1"); [EOL]     sb.deleteAll(A_NUMBER_MATCHER); [EOL]     assertEquals("Ax1", sb.toString()); [EOL]     sb = new StrBuilder(""); [EOL]     sb.deleteAll(A_NUMBER_MATCHER); [EOL]     assertEquals("", sb.toString()); [EOL] }
@Test [EOL] public void testReplaceAll_String_String() { [EOL]     StrBuilder sb = new StrBuilder("abcbccba"); [EOL]     sb.replaceAll((String) null, null); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.replaceAll((String) null, "anything"); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.replaceAll("", null); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.replaceAll("", "anything"); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.replaceAll("x", "y"); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.replaceAll("a", "d"); [EOL]     assertEquals("dbcbccbd", sb.toString()); [EOL]     sb.replaceAll("d", null); [EOL]     assertEquals("bcbccb", sb.toString()); [EOL]     sb.replaceAll("cb", "-"); [EOL]     assertEquals("b-c-", sb.toString()); [EOL]     sb = new StrBuilder("abcba"); [EOL]     sb.replaceAll("b", "xbx"); [EOL]     assertEquals("axbxcxbxa", sb.toString()); [EOL]     sb = new StrBuilder("bb"); [EOL]     sb.replaceAll("b", "xbx"); [EOL]     assertEquals("xbxxbx", sb.toString()); [EOL] }
@Test [EOL] public void testReplaceAll_String_String() { [EOL]     StrBuilder sb = new StrBuilder("abcbccba"); [EOL]     sb.replaceAll((String) null, null); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.replaceAll((String) null, "anything"); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.replaceAll("", null); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.replaceAll("", "anything"); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.replaceAll("x", "y"); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.replaceAll("a", "d"); [EOL]     assertEquals("dbcbccbd", sb.toString()); [EOL]     sb.replaceAll("d", null); [EOL]     assertEquals("bcbccb", sb.toString()); [EOL]     sb.replaceAll("cb", "-"); [EOL]     assertEquals("b-c-", sb.toString()); [EOL]     sb = new StrBuilder("abcba"); [EOL]     sb.replaceAll("b", "xbx"); [EOL]     assertEquals("axbxcxbxa", sb.toString()); [EOL]     sb = new StrBuilder("bb"); [EOL]     sb.replaceAll("b", "xbx"); [EOL]     assertEquals("xbxxbx", sb.toString()); [EOL] }
@Test [EOL] public void testReplaceAll_String_String() { [EOL]     StrBuilder sb = new StrBuilder("abcbccba"); [EOL]     sb.replaceAll((String) null, null); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.replaceAll((String) null, "anything"); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.replaceAll("", null); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.replaceAll("", "anything"); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.replaceAll("x", "y"); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.replaceAll("a", "d"); [EOL]     assertEquals("dbcbccbd", sb.toString()); [EOL]     sb.replaceAll("d", null); [EOL]     assertEquals("bcbccb", sb.toString()); [EOL]     sb.replaceAll("cb", "-"); [EOL]     assertEquals("b-c-", sb.toString()); [EOL]     sb = new StrBuilder("abcba"); [EOL]     sb.replaceAll("b", "xbx"); [EOL]     assertEquals("axbxcxbxa", sb.toString()); [EOL]     sb = new StrBuilder("bb"); [EOL]     sb.replaceAll("b", "xbx"); [EOL]     assertEquals("xbxxbx", sb.toString()); [EOL] }
@Test [EOL] public void testReplaceAll_String_String() { [EOL]     StrBuilder sb = new StrBuilder("abcbccba"); [EOL]     sb.replaceAll((String) null, null); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.replaceAll((String) null, "anything"); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.replaceAll("", null); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.replaceAll("", "anything"); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.replaceAll("x", "y"); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.replaceAll("a", "d"); [EOL]     assertEquals("dbcbccbd", sb.toString()); [EOL]     sb.replaceAll("d", null); [EOL]     assertEquals("bcbccb", sb.toString()); [EOL]     sb.replaceAll("cb", "-"); [EOL]     assertEquals("b-c-", sb.toString()); [EOL]     sb = new StrBuilder("abcba"); [EOL]     sb.replaceAll("b", "xbx"); [EOL]     assertEquals("axbxcxbxa", sb.toString()); [EOL]     sb = new StrBuilder("bb"); [EOL]     sb.replaceAll("b", "xbx"); [EOL]     assertEquals("xbxxbx", sb.toString()); [EOL] }
@Test [EOL] public void testReplaceAll_String_String() { [EOL]     StrBuilder sb = new StrBuilder("abcbccba"); [EOL]     sb.replaceAll((String) null, null); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.replaceAll((String) null, "anything"); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.replaceAll("", null); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.replaceAll("", "anything"); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.replaceAll("x", "y"); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.replaceAll("a", "d"); [EOL]     assertEquals("dbcbccbd", sb.toString()); [EOL]     sb.replaceAll("d", null); [EOL]     assertEquals("bcbccb", sb.toString()); [EOL]     sb.replaceAll("cb", "-"); [EOL]     assertEquals("b-c-", sb.toString()); [EOL]     sb = new StrBuilder("abcba"); [EOL]     sb.replaceAll("b", "xbx"); [EOL]     assertEquals("axbxcxbxa", sb.toString()); [EOL]     sb = new StrBuilder("bb"); [EOL]     sb.replaceAll("b", "xbx"); [EOL]     assertEquals("xbxxbx", sb.toString()); [EOL] }
@Test [EOL] public void testReplaceAll_StrMatcher_String() { [EOL]     StrBuilder sb = new StrBuilder("abcbccba"); [EOL]     sb.replaceAll((StrMatcher) null, null); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.replaceAll((StrMatcher) null, "anything"); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.replaceAll(StrMatcher.noneMatcher(), null); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.replaceAll(StrMatcher.noneMatcher(), "anything"); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.replaceAll(StrMatcher.charMatcher('x'), "y"); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.replaceAll(StrMatcher.charMatcher('a'), "d"); [EOL]     assertEquals("dbcbccbd", sb.toString()); [EOL]     sb.replaceAll(StrMatcher.charMatcher('d'), null); [EOL]     assertEquals("bcbccb", sb.toString()); [EOL]     sb.replaceAll(StrMatcher.stringMatcher("cb"), "-"); [EOL]     assertEquals("b-c-", sb.toString()); [EOL]     sb = new StrBuilder("abcba"); [EOL]     sb.replaceAll(StrMatcher.charMatcher('b'), "xbx"); [EOL]     assertEquals("axbxcxbxa", sb.toString()); [EOL]     sb = new StrBuilder("bb"); [EOL]     sb.replaceAll(StrMatcher.charMatcher('b'), "xbx"); [EOL]     assertEquals("xbxxbx", sb.toString()); [EOL]     sb = new StrBuilder("A1-A2A3-A4"); [EOL]     sb.replaceAll(A_NUMBER_MATCHER, "***"); [EOL]     assertEquals("***-******-***", sb.toString()); [EOL] }
@Test [EOL] public void testReplaceAll_StrMatcher_String() { [EOL]     StrBuilder sb = new StrBuilder("abcbccba"); [EOL]     sb.replaceAll((StrMatcher) null, null); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.replaceAll((StrMatcher) null, "anything"); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.replaceAll(StrMatcher.noneMatcher(), null); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.replaceAll(StrMatcher.noneMatcher(), "anything"); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.replaceAll(StrMatcher.charMatcher('x'), "y"); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.replaceAll(StrMatcher.charMatcher('a'), "d"); [EOL]     assertEquals("dbcbccbd", sb.toString()); [EOL]     sb.replaceAll(StrMatcher.charMatcher('d'), null); [EOL]     assertEquals("bcbccb", sb.toString()); [EOL]     sb.replaceAll(StrMatcher.stringMatcher("cb"), "-"); [EOL]     assertEquals("b-c-", sb.toString()); [EOL]     sb = new StrBuilder("abcba"); [EOL]     sb.replaceAll(StrMatcher.charMatcher('b'), "xbx"); [EOL]     assertEquals("axbxcxbxa", sb.toString()); [EOL]     sb = new StrBuilder("bb"); [EOL]     sb.replaceAll(StrMatcher.charMatcher('b'), "xbx"); [EOL]     assertEquals("xbxxbx", sb.toString()); [EOL]     sb = new StrBuilder("A1-A2A3-A4"); [EOL]     sb.replaceAll(A_NUMBER_MATCHER, "***"); [EOL]     assertEquals("***-******-***", sb.toString()); [EOL] }
@Test [EOL] public void testReplaceAll_StrMatcher_String() { [EOL]     StrBuilder sb = new StrBuilder("abcbccba"); [EOL]     sb.replaceAll((StrMatcher) null, null); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.replaceAll((StrMatcher) null, "anything"); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.replaceAll(StrMatcher.noneMatcher(), null); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.replaceAll(StrMatcher.noneMatcher(), "anything"); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.replaceAll(StrMatcher.charMatcher('x'), "y"); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.replaceAll(StrMatcher.charMatcher('a'), "d"); [EOL]     assertEquals("dbcbccbd", sb.toString()); [EOL]     sb.replaceAll(StrMatcher.charMatcher('d'), null); [EOL]     assertEquals("bcbccb", sb.toString()); [EOL]     sb.replaceAll(StrMatcher.stringMatcher("cb"), "-"); [EOL]     assertEquals("b-c-", sb.toString()); [EOL]     sb = new StrBuilder("abcba"); [EOL]     sb.replaceAll(StrMatcher.charMatcher('b'), "xbx"); [EOL]     assertEquals("axbxcxbxa", sb.toString()); [EOL]     sb = new StrBuilder("bb"); [EOL]     sb.replaceAll(StrMatcher.charMatcher('b'), "xbx"); [EOL]     assertEquals("xbxxbx", sb.toString()); [EOL]     sb = new StrBuilder("A1-A2A3-A4"); [EOL]     sb.replaceAll(A_NUMBER_MATCHER, "***"); [EOL]     assertEquals("***-******-***", sb.toString()); [EOL] }
@Test [EOL] public void testReplaceAll_StrMatcher_String() { [EOL]     StrBuilder sb = new StrBuilder("abcbccba"); [EOL]     sb.replaceAll((StrMatcher) null, null); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.replaceAll((StrMatcher) null, "anything"); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.replaceAll(StrMatcher.noneMatcher(), null); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.replaceAll(StrMatcher.noneMatcher(), "anything"); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.replaceAll(StrMatcher.charMatcher('x'), "y"); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.replaceAll(StrMatcher.charMatcher('a'), "d"); [EOL]     assertEquals("dbcbccbd", sb.toString()); [EOL]     sb.replaceAll(StrMatcher.charMatcher('d'), null); [EOL]     assertEquals("bcbccb", sb.toString()); [EOL]     sb.replaceAll(StrMatcher.stringMatcher("cb"), "-"); [EOL]     assertEquals("b-c-", sb.toString()); [EOL]     sb = new StrBuilder("abcba"); [EOL]     sb.replaceAll(StrMatcher.charMatcher('b'), "xbx"); [EOL]     assertEquals("axbxcxbxa", sb.toString()); [EOL]     sb = new StrBuilder("bb"); [EOL]     sb.replaceAll(StrMatcher.charMatcher('b'), "xbx"); [EOL]     assertEquals("xbxxbx", sb.toString()); [EOL]     sb = new StrBuilder("A1-A2A3-A4"); [EOL]     sb.replaceAll(A_NUMBER_MATCHER, "***"); [EOL]     assertEquals("***-******-***", sb.toString()); [EOL] }
@Test [EOL] public void testChaining() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     assertSame(sb, sb.setNewLineText(null)); [EOL]     assertSame(sb, sb.setNullText(null)); [EOL]     assertSame(sb, sb.setLength(1)); [EOL]     assertSame(sb, sb.setCharAt(0, 'a')); [EOL]     assertSame(sb, sb.ensureCapacity(0)); [EOL]     assertSame(sb, sb.minimizeCapacity()); [EOL]     assertSame(sb, sb.clear()); [EOL]     assertSame(sb, sb.reverse()); [EOL]     assertSame(sb, sb.trim()); [EOL] }
@Test [EOL] public void testChaining() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     assertSame(sb, sb.setNewLineText(null)); [EOL]     assertSame(sb, sb.setNullText(null)); [EOL]     assertSame(sb, sb.setLength(1)); [EOL]     assertSame(sb, sb.setCharAt(0, 'a')); [EOL]     assertSame(sb, sb.ensureCapacity(0)); [EOL]     assertSame(sb, sb.minimizeCapacity()); [EOL]     assertSame(sb, sb.clear()); [EOL]     assertSame(sb, sb.reverse()); [EOL]     assertSame(sb, sb.trim()); [EOL] }
@Test [EOL] public void testChaining() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     assertSame(sb, sb.setNewLineText(null)); [EOL]     assertSame(sb, sb.setNullText(null)); [EOL]     assertSame(sb, sb.setLength(1)); [EOL]     assertSame(sb, sb.setCharAt(0, 'a')); [EOL]     assertSame(sb, sb.ensureCapacity(0)); [EOL]     assertSame(sb, sb.minimizeCapacity()); [EOL]     assertSame(sb, sb.clear()); [EOL]     assertSame(sb, sb.reverse()); [EOL]     assertSame(sb, sb.trim()); [EOL] }
@Test [EOL] public void testChaining() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     assertSame(sb, sb.setNewLineText(null)); [EOL]     assertSame(sb, sb.setNullText(null)); [EOL]     assertSame(sb, sb.setLength(1)); [EOL]     assertSame(sb, sb.setCharAt(0, 'a')); [EOL]     assertSame(sb, sb.ensureCapacity(0)); [EOL]     assertSame(sb, sb.minimizeCapacity()); [EOL]     assertSame(sb, sb.clear()); [EOL]     assertSame(sb, sb.reverse()); [EOL]     assertSame(sb, sb.trim()); [EOL] }
@Test [EOL] public void testChaining() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     assertSame(sb, sb.setNewLineText(null)); [EOL]     assertSame(sb, sb.setNullText(null)); [EOL]     assertSame(sb, sb.setLength(1)); [EOL]     assertSame(sb, sb.setCharAt(0, 'a')); [EOL]     assertSame(sb, sb.ensureCapacity(0)); [EOL]     assertSame(sb, sb.minimizeCapacity()); [EOL]     assertSame(sb, sb.clear()); [EOL]     assertSame(sb, sb.reverse()); [EOL]     assertSame(sb, sb.trim()); [EOL] }
@Test [EOL] public void testStartsWith() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     assertFalse(sb.startsWith("a")); [EOL]     assertFalse(sb.startsWith(null)); [EOL]     assertTrue(sb.startsWith("")); [EOL]     sb.append("abc"); [EOL]     assertTrue(sb.startsWith("a")); [EOL]     assertTrue(sb.startsWith("ab")); [EOL]     assertTrue(sb.startsWith("abc")); [EOL]     assertFalse(sb.startsWith("cba")); [EOL] }
@Test [EOL] public void testStartsWith() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     assertFalse(sb.startsWith("a")); [EOL]     assertFalse(sb.startsWith(null)); [EOL]     assertTrue(sb.startsWith("")); [EOL]     sb.append("abc"); [EOL]     assertTrue(sb.startsWith("a")); [EOL]     assertTrue(sb.startsWith("ab")); [EOL]     assertTrue(sb.startsWith("abc")); [EOL]     assertFalse(sb.startsWith("cba")); [EOL] }
@Test [EOL] public void testStartsWith() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     assertFalse(sb.startsWith("a")); [EOL]     assertFalse(sb.startsWith(null)); [EOL]     assertTrue(sb.startsWith("")); [EOL]     sb.append("abc"); [EOL]     assertTrue(sb.startsWith("a")); [EOL]     assertTrue(sb.startsWith("ab")); [EOL]     assertTrue(sb.startsWith("abc")); [EOL]     assertFalse(sb.startsWith("cba")); [EOL] }
@Test [EOL] public void testStartsWith() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     assertFalse(sb.startsWith("a")); [EOL]     assertFalse(sb.startsWith(null)); [EOL]     assertTrue(sb.startsWith("")); [EOL]     sb.append("abc"); [EOL]     assertTrue(sb.startsWith("a")); [EOL]     assertTrue(sb.startsWith("ab")); [EOL]     assertTrue(sb.startsWith("abc")); [EOL]     assertFalse(sb.startsWith("cba")); [EOL] }
@Test [EOL] public void testStartsWith() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     assertFalse(sb.startsWith("a")); [EOL]     assertFalse(sb.startsWith(null)); [EOL]     assertTrue(sb.startsWith("")); [EOL]     sb.append("abc"); [EOL]     assertTrue(sb.startsWith("a")); [EOL]     assertTrue(sb.startsWith("ab")); [EOL]     assertTrue(sb.startsWith("abc")); [EOL]     assertFalse(sb.startsWith("cba")); [EOL] }
@Test [EOL] public void testMidString() { [EOL]     final StrBuilder sb = new StrBuilder("hello goodbye hello"); [EOL]     assertEquals("goodbye", sb.midString(6, 7)); [EOL]     assertEquals("hello", sb.midString(0, 5)); [EOL]     assertEquals("hello", sb.midString(-5, 5)); [EOL]     assertEquals("", sb.midString(0, -1)); [EOL]     assertEquals("", sb.midString(20, 2)); [EOL]     assertEquals("hello", sb.midString(14, 22)); [EOL] }
@Test [EOL] public void testMidString() { [EOL]     final StrBuilder sb = new StrBuilder("hello goodbye hello"); [EOL]     assertEquals("goodbye", sb.midString(6, 7)); [EOL]     assertEquals("hello", sb.midString(0, 5)); [EOL]     assertEquals("hello", sb.midString(-5, 5)); [EOL]     assertEquals("", sb.midString(0, -1)); [EOL]     assertEquals("", sb.midString(20, 2)); [EOL]     assertEquals("hello", sb.midString(14, 22)); [EOL] }
@Test [EOL] public void testMidString() { [EOL]     final StrBuilder sb = new StrBuilder("hello goodbye hello"); [EOL]     assertEquals("goodbye", sb.midString(6, 7)); [EOL]     assertEquals("hello", sb.midString(0, 5)); [EOL]     assertEquals("hello", sb.midString(-5, 5)); [EOL]     assertEquals("", sb.midString(0, -1)); [EOL]     assertEquals("", sb.midString(20, 2)); [EOL]     assertEquals("hello", sb.midString(14, 22)); [EOL] }
@Test [EOL] public void testMidString() { [EOL]     final StrBuilder sb = new StrBuilder("hello goodbye hello"); [EOL]     assertEquals("goodbye", sb.midString(6, 7)); [EOL]     assertEquals("hello", sb.midString(0, 5)); [EOL]     assertEquals("hello", sb.midString(-5, 5)); [EOL]     assertEquals("", sb.midString(0, -1)); [EOL]     assertEquals("", sb.midString(20, 2)); [EOL]     assertEquals("hello", sb.midString(14, 22)); [EOL] }
@Test [EOL] public void testLang295() { [EOL]     final StrBuilder sb = new StrBuilder("onetwothree"); [EOL]     sb.deleteFirst("three"); [EOL]     assertFalse("The contains(char) method is looking beyond the end of the string", sb.contains('h')); [EOL]     assertEquals("The indexOf(char) method is looking beyond the end of the string", -1, sb.indexOf('h')); [EOL] }
@Test [EOL] public void testLang295() { [EOL]     final StrBuilder sb = new StrBuilder("onetwothree"); [EOL]     sb.deleteFirst("three"); [EOL]     assertFalse("The contains(char) method is looking beyond the end of the string", sb.contains('h')); [EOL]     assertEquals("The indexOf(char) method is looking beyond the end of the string", -1, sb.indexOf('h')); [EOL] }
@Test [EOL] public void testReplaceAll_String_String() { [EOL]     StrBuilder sb = new StrBuilder("abcbccba"); [EOL]     sb.replaceAll((String) null, null); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.replaceAll((String) null, "anything"); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.replaceAll("", null); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.replaceAll("", "anything"); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.replaceAll("x", "y"); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.replaceAll("a", "d"); [EOL]     assertEquals("dbcbccbd", sb.toString()); [EOL]     sb.replaceAll("d", null); [EOL]     assertEquals("bcbccb", sb.toString()); [EOL]     sb.replaceAll("cb", "-"); [EOL]     assertEquals("b-c-", sb.toString()); [EOL]     sb = new StrBuilder("abcba"); [EOL]     sb.replaceAll("b", "xbx"); [EOL]     assertEquals("axbxcxbxa", sb.toString()); [EOL]     sb = new StrBuilder("bb"); [EOL]     sb.replaceAll("b", "xbx"); [EOL]     assertEquals("xbxxbx", sb.toString()); [EOL] }
@Test [EOL] public void testReplaceAll_String_String() { [EOL]     StrBuilder sb = new StrBuilder("abcbccba"); [EOL]     sb.replaceAll((String) null, null); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.replaceAll((String) null, "anything"); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.replaceAll("", null); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.replaceAll("", "anything"); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.replaceAll("x", "y"); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.replaceAll("a", "d"); [EOL]     assertEquals("dbcbccbd", sb.toString()); [EOL]     sb.replaceAll("d", null); [EOL]     assertEquals("bcbccb", sb.toString()); [EOL]     sb.replaceAll("cb", "-"); [EOL]     assertEquals("b-c-", sb.toString()); [EOL]     sb = new StrBuilder("abcba"); [EOL]     sb.replaceAll("b", "xbx"); [EOL]     assertEquals("axbxcxbxa", sb.toString()); [EOL]     sb = new StrBuilder("bb"); [EOL]     sb.replaceAll("b", "xbx"); [EOL]     assertEquals("xbxxbx", sb.toString()); [EOL] }
@Test [EOL] public void testReplaceAll_String_String() { [EOL]     StrBuilder sb = new StrBuilder("abcbccba"); [EOL]     sb.replaceAll((String) null, null); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.replaceAll((String) null, "anything"); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.replaceAll("", null); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.replaceAll("", "anything"); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.replaceAll("x", "y"); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.replaceAll("a", "d"); [EOL]     assertEquals("dbcbccbd", sb.toString()); [EOL]     sb.replaceAll("d", null); [EOL]     assertEquals("bcbccb", sb.toString()); [EOL]     sb.replaceAll("cb", "-"); [EOL]     assertEquals("b-c-", sb.toString()); [EOL]     sb = new StrBuilder("abcba"); [EOL]     sb.replaceAll("b", "xbx"); [EOL]     assertEquals("axbxcxbxa", sb.toString()); [EOL]     sb = new StrBuilder("bb"); [EOL]     sb.replaceAll("b", "xbx"); [EOL]     assertEquals("xbxxbx", sb.toString()); [EOL] }
@Test [EOL] public void testReplaceAll_String_String() { [EOL]     StrBuilder sb = new StrBuilder("abcbccba"); [EOL]     sb.replaceAll((String) null, null); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.replaceAll((String) null, "anything"); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.replaceAll("", null); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.replaceAll("", "anything"); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.replaceAll("x", "y"); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.replaceAll("a", "d"); [EOL]     assertEquals("dbcbccbd", sb.toString()); [EOL]     sb.replaceAll("d", null); [EOL]     assertEquals("bcbccb", sb.toString()); [EOL]     sb.replaceAll("cb", "-"); [EOL]     assertEquals("b-c-", sb.toString()); [EOL]     sb = new StrBuilder("abcba"); [EOL]     sb.replaceAll("b", "xbx"); [EOL]     assertEquals("axbxcxbxa", sb.toString()); [EOL]     sb = new StrBuilder("bb"); [EOL]     sb.replaceAll("b", "xbx"); [EOL]     assertEquals("xbxxbx", sb.toString()); [EOL] }
@Test [EOL] public void testReplaceAll_String_String() { [EOL]     StrBuilder sb = new StrBuilder("abcbccba"); [EOL]     sb.replaceAll((String) null, null); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.replaceAll((String) null, "anything"); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.replaceAll("", null); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.replaceAll("", "anything"); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.replaceAll("x", "y"); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.replaceAll("a", "d"); [EOL]     assertEquals("dbcbccbd", sb.toString()); [EOL]     sb.replaceAll("d", null); [EOL]     assertEquals("bcbccb", sb.toString()); [EOL]     sb.replaceAll("cb", "-"); [EOL]     assertEquals("b-c-", sb.toString()); [EOL]     sb = new StrBuilder("abcba"); [EOL]     sb.replaceAll("b", "xbx"); [EOL]     assertEquals("axbxcxbxa", sb.toString()); [EOL]     sb = new StrBuilder("bb"); [EOL]     sb.replaceAll("b", "xbx"); [EOL]     assertEquals("xbxxbx", sb.toString()); [EOL] }
@Test [EOL] public void testReplaceAll_String_String() { [EOL]     StrBuilder sb = new StrBuilder("abcbccba"); [EOL]     sb.replaceAll((String) null, null); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.replaceAll((String) null, "anything"); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.replaceAll("", null); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.replaceAll("", "anything"); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.replaceAll("x", "y"); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.replaceAll("a", "d"); [EOL]     assertEquals("dbcbccbd", sb.toString()); [EOL]     sb.replaceAll("d", null); [EOL]     assertEquals("bcbccb", sb.toString()); [EOL]     sb.replaceAll("cb", "-"); [EOL]     assertEquals("b-c-", sb.toString()); [EOL]     sb = new StrBuilder("abcba"); [EOL]     sb.replaceAll("b", "xbx"); [EOL]     assertEquals("axbxcxbxa", sb.toString()); [EOL]     sb = new StrBuilder("bb"); [EOL]     sb.replaceAll("b", "xbx"); [EOL]     assertEquals("xbxxbx", sb.toString()); [EOL] }
@Test [EOL] public void testIndexOf_StrMatcher() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     assertEquals(-1, sb.indexOf((StrMatcher) null)); [EOL]     assertEquals(-1, sb.indexOf(StrMatcher.charMatcher('a'))); [EOL]     sb.append("ab bd"); [EOL]     assertEquals(0, sb.indexOf(StrMatcher.charMatcher('a'))); [EOL]     assertEquals(1, sb.indexOf(StrMatcher.charMatcher('b'))); [EOL]     assertEquals(2, sb.indexOf(StrMatcher.spaceMatcher())); [EOL]     assertEquals(4, sb.indexOf(StrMatcher.charMatcher('d'))); [EOL]     assertEquals(-1, sb.indexOf(StrMatcher.noneMatcher())); [EOL]     assertEquals(-1, sb.indexOf((StrMatcher) null)); [EOL]     sb.append(" A1 junction"); [EOL]     assertEquals(6, sb.indexOf(A_NUMBER_MATCHER)); [EOL] }
@Test [EOL] public void testLastIndexOf_char() { [EOL]     final StrBuilder sb = new StrBuilder("abab"); [EOL]     assertEquals(2, sb.lastIndexOf('a')); [EOL]     assertEquals("abab".lastIndexOf('a'), sb.lastIndexOf('a')); [EOL]     assertEquals(3, sb.lastIndexOf('b')); [EOL]     assertEquals("abab".lastIndexOf('b'), sb.lastIndexOf('b')); [EOL]     assertEquals(-1, sb.lastIndexOf('z')); [EOL] }
@Test [EOL] public void testLastIndexOf_char() { [EOL]     final StrBuilder sb = new StrBuilder("abab"); [EOL]     assertEquals(2, sb.lastIndexOf('a')); [EOL]     assertEquals("abab".lastIndexOf('a'), sb.lastIndexOf('a')); [EOL]     assertEquals(3, sb.lastIndexOf('b')); [EOL]     assertEquals("abab".lastIndexOf('b'), sb.lastIndexOf('b')); [EOL]     assertEquals(-1, sb.lastIndexOf('z')); [EOL] }
@Test [EOL] public void testLastIndexOf_char() { [EOL]     final StrBuilder sb = new StrBuilder("abab"); [EOL]     assertEquals(2, sb.lastIndexOf('a')); [EOL]     assertEquals("abab".lastIndexOf('a'), sb.lastIndexOf('a')); [EOL]     assertEquals(3, sb.lastIndexOf('b')); [EOL]     assertEquals("abab".lastIndexOf('b'), sb.lastIndexOf('b')); [EOL]     assertEquals(-1, sb.lastIndexOf('z')); [EOL] }
@Test [EOL] public void testLastIndexOf_char() { [EOL]     final StrBuilder sb = new StrBuilder("abab"); [EOL]     assertEquals(2, sb.lastIndexOf('a')); [EOL]     assertEquals("abab".lastIndexOf('a'), sb.lastIndexOf('a')); [EOL]     assertEquals(3, sb.lastIndexOf('b')); [EOL]     assertEquals("abab".lastIndexOf('b'), sb.lastIndexOf('b')); [EOL]     assertEquals(-1, sb.lastIndexOf('z')); [EOL] }
@Test [EOL] public void testLastIndexOf_char() { [EOL]     final StrBuilder sb = new StrBuilder("abab"); [EOL]     assertEquals(2, sb.lastIndexOf('a')); [EOL]     assertEquals("abab".lastIndexOf('a'), sb.lastIndexOf('a')); [EOL]     assertEquals(3, sb.lastIndexOf('b')); [EOL]     assertEquals("abab".lastIndexOf('b'), sb.lastIndexOf('b')); [EOL]     assertEquals(-1, sb.lastIndexOf('z')); [EOL] }
@Test [EOL] public void testLastIndexOf_String_int() { [EOL]     StrBuilder sb = new StrBuilder("abab"); [EOL]     assertEquals(-1, sb.lastIndexOf("a", -1)); [EOL]     assertEquals(0, sb.lastIndexOf("a", 0)); [EOL]     assertEquals(0, sb.lastIndexOf("a", 1)); [EOL]     assertEquals(2, sb.lastIndexOf("a", 2)); [EOL]     assertEquals(2, sb.lastIndexOf("a", 3)); [EOL]     assertEquals(2, sb.lastIndexOf("a", 4)); [EOL]     assertEquals(2, sb.lastIndexOf("a", 5)); [EOL]     assertEquals(-1, sb.lastIndexOf("abcdef", 3)); [EOL]     assertEquals("abab".lastIndexOf("", 3), sb.lastIndexOf("", 3)); [EOL]     assertEquals("abab".lastIndexOf("", 1), sb.lastIndexOf("", 1)); [EOL]     assertEquals("abab".lastIndexOf("a", 1), sb.lastIndexOf("a", 1)); [EOL]     assertEquals(0, sb.lastIndexOf("ab", 1)); [EOL]     assertEquals("abab".lastIndexOf("ab", 1), sb.lastIndexOf("ab", 1)); [EOL]     assertEquals(1, sb.lastIndexOf("b", 2)); [EOL]     assertEquals("abab".lastIndexOf("b", 2), sb.lastIndexOf("b", 2)); [EOL]     assertEquals(1, sb.lastIndexOf("ba", 2)); [EOL]     assertEquals("abab".lastIndexOf("ba", 2), sb.lastIndexOf("ba", 2)); [EOL]     assertEquals(-1, sb.lastIndexOf("z", 2)); [EOL]     sb = new StrBuilder("xyzabc"); [EOL]     assertEquals(2, sb.lastIndexOf("za", sb.length())); [EOL]     assertEquals(-1, sb.lastIndexOf("za", 1)); [EOL]     assertEquals(-1, sb.lastIndexOf((String) null, 2)); [EOL] }
@Test [EOL] public void testLastIndexOf_String_int() { [EOL]     StrBuilder sb = new StrBuilder("abab"); [EOL]     assertEquals(-1, sb.lastIndexOf("a", -1)); [EOL]     assertEquals(0, sb.lastIndexOf("a", 0)); [EOL]     assertEquals(0, sb.lastIndexOf("a", 1)); [EOL]     assertEquals(2, sb.lastIndexOf("a", 2)); [EOL]     assertEquals(2, sb.lastIndexOf("a", 3)); [EOL]     assertEquals(2, sb.lastIndexOf("a", 4)); [EOL]     assertEquals(2, sb.lastIndexOf("a", 5)); [EOL]     assertEquals(-1, sb.lastIndexOf("abcdef", 3)); [EOL]     assertEquals("abab".lastIndexOf("", 3), sb.lastIndexOf("", 3)); [EOL]     assertEquals("abab".lastIndexOf("", 1), sb.lastIndexOf("", 1)); [EOL]     assertEquals("abab".lastIndexOf("a", 1), sb.lastIndexOf("a", 1)); [EOL]     assertEquals(0, sb.lastIndexOf("ab", 1)); [EOL]     assertEquals("abab".lastIndexOf("ab", 1), sb.lastIndexOf("ab", 1)); [EOL]     assertEquals(1, sb.lastIndexOf("b", 2)); [EOL]     assertEquals("abab".lastIndexOf("b", 2), sb.lastIndexOf("b", 2)); [EOL]     assertEquals(1, sb.lastIndexOf("ba", 2)); [EOL]     assertEquals("abab".lastIndexOf("ba", 2), sb.lastIndexOf("ba", 2)); [EOL]     assertEquals(-1, sb.lastIndexOf("z", 2)); [EOL]     sb = new StrBuilder("xyzabc"); [EOL]     assertEquals(2, sb.lastIndexOf("za", sb.length())); [EOL]     assertEquals(-1, sb.lastIndexOf("za", 1)); [EOL]     assertEquals(-1, sb.lastIndexOf((String) null, 2)); [EOL] }
@Test [EOL] public void testLastIndexOf_String_int() { [EOL]     StrBuilder sb = new StrBuilder("abab"); [EOL]     assertEquals(-1, sb.lastIndexOf("a", -1)); [EOL]     assertEquals(0, sb.lastIndexOf("a", 0)); [EOL]     assertEquals(0, sb.lastIndexOf("a", 1)); [EOL]     assertEquals(2, sb.lastIndexOf("a", 2)); [EOL]     assertEquals(2, sb.lastIndexOf("a", 3)); [EOL]     assertEquals(2, sb.lastIndexOf("a", 4)); [EOL]     assertEquals(2, sb.lastIndexOf("a", 5)); [EOL]     assertEquals(-1, sb.lastIndexOf("abcdef", 3)); [EOL]     assertEquals("abab".lastIndexOf("", 3), sb.lastIndexOf("", 3)); [EOL]     assertEquals("abab".lastIndexOf("", 1), sb.lastIndexOf("", 1)); [EOL]     assertEquals("abab".lastIndexOf("a", 1), sb.lastIndexOf("a", 1)); [EOL]     assertEquals(0, sb.lastIndexOf("ab", 1)); [EOL]     assertEquals("abab".lastIndexOf("ab", 1), sb.lastIndexOf("ab", 1)); [EOL]     assertEquals(1, sb.lastIndexOf("b", 2)); [EOL]     assertEquals("abab".lastIndexOf("b", 2), sb.lastIndexOf("b", 2)); [EOL]     assertEquals(1, sb.lastIndexOf("ba", 2)); [EOL]     assertEquals("abab".lastIndexOf("ba", 2), sb.lastIndexOf("ba", 2)); [EOL]     assertEquals(-1, sb.lastIndexOf("z", 2)); [EOL]     sb = new StrBuilder("xyzabc"); [EOL]     assertEquals(2, sb.lastIndexOf("za", sb.length())); [EOL]     assertEquals(-1, sb.lastIndexOf("za", 1)); [EOL]     assertEquals(-1, sb.lastIndexOf((String) null, 2)); [EOL] }
@Test [EOL] public void testLastIndexOf_String_int() { [EOL]     StrBuilder sb = new StrBuilder("abab"); [EOL]     assertEquals(-1, sb.lastIndexOf("a", -1)); [EOL]     assertEquals(0, sb.lastIndexOf("a", 0)); [EOL]     assertEquals(0, sb.lastIndexOf("a", 1)); [EOL]     assertEquals(2, sb.lastIndexOf("a", 2)); [EOL]     assertEquals(2, sb.lastIndexOf("a", 3)); [EOL]     assertEquals(2, sb.lastIndexOf("a", 4)); [EOL]     assertEquals(2, sb.lastIndexOf("a", 5)); [EOL]     assertEquals(-1, sb.lastIndexOf("abcdef", 3)); [EOL]     assertEquals("abab".lastIndexOf("", 3), sb.lastIndexOf("", 3)); [EOL]     assertEquals("abab".lastIndexOf("", 1), sb.lastIndexOf("", 1)); [EOL]     assertEquals("abab".lastIndexOf("a", 1), sb.lastIndexOf("a", 1)); [EOL]     assertEquals(0, sb.lastIndexOf("ab", 1)); [EOL]     assertEquals("abab".lastIndexOf("ab", 1), sb.lastIndexOf("ab", 1)); [EOL]     assertEquals(1, sb.lastIndexOf("b", 2)); [EOL]     assertEquals("abab".lastIndexOf("b", 2), sb.lastIndexOf("b", 2)); [EOL]     assertEquals(1, sb.lastIndexOf("ba", 2)); [EOL]     assertEquals("abab".lastIndexOf("ba", 2), sb.lastIndexOf("ba", 2)); [EOL]     assertEquals(-1, sb.lastIndexOf("z", 2)); [EOL]     sb = new StrBuilder("xyzabc"); [EOL]     assertEquals(2, sb.lastIndexOf("za", sb.length())); [EOL]     assertEquals(-1, sb.lastIndexOf("za", 1)); [EOL]     assertEquals(-1, sb.lastIndexOf((String) null, 2)); [EOL] }
@Test [EOL] public void testLastIndexOf_String_int() { [EOL]     StrBuilder sb = new StrBuilder("abab"); [EOL]     assertEquals(-1, sb.lastIndexOf("a", -1)); [EOL]     assertEquals(0, sb.lastIndexOf("a", 0)); [EOL]     assertEquals(0, sb.lastIndexOf("a", 1)); [EOL]     assertEquals(2, sb.lastIndexOf("a", 2)); [EOL]     assertEquals(2, sb.lastIndexOf("a", 3)); [EOL]     assertEquals(2, sb.lastIndexOf("a", 4)); [EOL]     assertEquals(2, sb.lastIndexOf("a", 5)); [EOL]     assertEquals(-1, sb.lastIndexOf("abcdef", 3)); [EOL]     assertEquals("abab".lastIndexOf("", 3), sb.lastIndexOf("", 3)); [EOL]     assertEquals("abab".lastIndexOf("", 1), sb.lastIndexOf("", 1)); [EOL]     assertEquals("abab".lastIndexOf("a", 1), sb.lastIndexOf("a", 1)); [EOL]     assertEquals(0, sb.lastIndexOf("ab", 1)); [EOL]     assertEquals("abab".lastIndexOf("ab", 1), sb.lastIndexOf("ab", 1)); [EOL]     assertEquals(1, sb.lastIndexOf("b", 2)); [EOL]     assertEquals("abab".lastIndexOf("b", 2), sb.lastIndexOf("b", 2)); [EOL]     assertEquals(1, sb.lastIndexOf("ba", 2)); [EOL]     assertEquals("abab".lastIndexOf("ba", 2), sb.lastIndexOf("ba", 2)); [EOL]     assertEquals(-1, sb.lastIndexOf("z", 2)); [EOL]     sb = new StrBuilder("xyzabc"); [EOL]     assertEquals(2, sb.lastIndexOf("za", sb.length())); [EOL]     assertEquals(-1, sb.lastIndexOf("za", 1)); [EOL]     assertEquals(-1, sb.lastIndexOf((String) null, 2)); [EOL] }
@Test [EOL] public void testLastIndexOf_String_int() { [EOL]     StrBuilder sb = new StrBuilder("abab"); [EOL]     assertEquals(-1, sb.lastIndexOf("a", -1)); [EOL]     assertEquals(0, sb.lastIndexOf("a", 0)); [EOL]     assertEquals(0, sb.lastIndexOf("a", 1)); [EOL]     assertEquals(2, sb.lastIndexOf("a", 2)); [EOL]     assertEquals(2, sb.lastIndexOf("a", 3)); [EOL]     assertEquals(2, sb.lastIndexOf("a", 4)); [EOL]     assertEquals(2, sb.lastIndexOf("a", 5)); [EOL]     assertEquals(-1, sb.lastIndexOf("abcdef", 3)); [EOL]     assertEquals("abab".lastIndexOf("", 3), sb.lastIndexOf("", 3)); [EOL]     assertEquals("abab".lastIndexOf("", 1), sb.lastIndexOf("", 1)); [EOL]     assertEquals("abab".lastIndexOf("a", 1), sb.lastIndexOf("a", 1)); [EOL]     assertEquals(0, sb.lastIndexOf("ab", 1)); [EOL]     assertEquals("abab".lastIndexOf("ab", 1), sb.lastIndexOf("ab", 1)); [EOL]     assertEquals(1, sb.lastIndexOf("b", 2)); [EOL]     assertEquals("abab".lastIndexOf("b", 2), sb.lastIndexOf("b", 2)); [EOL]     assertEquals(1, sb.lastIndexOf("ba", 2)); [EOL]     assertEquals("abab".lastIndexOf("ba", 2), sb.lastIndexOf("ba", 2)); [EOL]     assertEquals(-1, sb.lastIndexOf("z", 2)); [EOL]     sb = new StrBuilder("xyzabc"); [EOL]     assertEquals(2, sb.lastIndexOf("za", sb.length())); [EOL]     assertEquals(-1, sb.lastIndexOf("za", 1)); [EOL]     assertEquals(-1, sb.lastIndexOf((String) null, 2)); [EOL] }
@Test [EOL] public void testLastIndexOf_String_int() { [EOL]     StrBuilder sb = new StrBuilder("abab"); [EOL]     assertEquals(-1, sb.lastIndexOf("a", -1)); [EOL]     assertEquals(0, sb.lastIndexOf("a", 0)); [EOL]     assertEquals(0, sb.lastIndexOf("a", 1)); [EOL]     assertEquals(2, sb.lastIndexOf("a", 2)); [EOL]     assertEquals(2, sb.lastIndexOf("a", 3)); [EOL]     assertEquals(2, sb.lastIndexOf("a", 4)); [EOL]     assertEquals(2, sb.lastIndexOf("a", 5)); [EOL]     assertEquals(-1, sb.lastIndexOf("abcdef", 3)); [EOL]     assertEquals("abab".lastIndexOf("", 3), sb.lastIndexOf("", 3)); [EOL]     assertEquals("abab".lastIndexOf("", 1), sb.lastIndexOf("", 1)); [EOL]     assertEquals("abab".lastIndexOf("a", 1), sb.lastIndexOf("a", 1)); [EOL]     assertEquals(0, sb.lastIndexOf("ab", 1)); [EOL]     assertEquals("abab".lastIndexOf("ab", 1), sb.lastIndexOf("ab", 1)); [EOL]     assertEquals(1, sb.lastIndexOf("b", 2)); [EOL]     assertEquals("abab".lastIndexOf("b", 2), sb.lastIndexOf("b", 2)); [EOL]     assertEquals(1, sb.lastIndexOf("ba", 2)); [EOL]     assertEquals("abab".lastIndexOf("ba", 2), sb.lastIndexOf("ba", 2)); [EOL]     assertEquals(-1, sb.lastIndexOf("z", 2)); [EOL]     sb = new StrBuilder("xyzabc"); [EOL]     assertEquals(2, sb.lastIndexOf("za", sb.length())); [EOL]     assertEquals(-1, sb.lastIndexOf("za", 1)); [EOL]     assertEquals(-1, sb.lastIndexOf((String) null, 2)); [EOL] }
@Test [EOL] public void testAsWriter() throws Exception { [EOL]     final StrBuilder sb = new StrBuilder("base"); [EOL]     final Writer writer = sb.asWriter(); [EOL]     writer.write('l'); [EOL]     assertEquals("basel", sb.toString()); [EOL]     writer.write(new char[] { 'i', 'n' }); [EOL]     assertEquals("baselin", sb.toString()); [EOL]     writer.write(new char[] { 'n', 'e', 'r' }, 1, 2); [EOL]     assertEquals("baseliner", sb.toString()); [EOL]     writer.write(" rout"); [EOL]     assertEquals("baseliner rout", sb.toString()); [EOL]     writer.write("ping that server", 1, 3); [EOL]     assertEquals("baseliner routing", sb.toString()); [EOL]     writer.flush(); [EOL]     assertEquals("baseliner routing", sb.toString()); [EOL]     writer.close(); [EOL]     assertEquals("baseliner routing", sb.toString()); [EOL]     writer.write(" hi"); [EOL]     assertEquals("baseliner routing hi", sb.toString()); [EOL]     sb.setLength(4); [EOL]     writer.write('d'); [EOL]     assertEquals("based", sb.toString()); [EOL] }
@Test [EOL] public void testAsWriter() throws Exception { [EOL]     final StrBuilder sb = new StrBuilder("base"); [EOL]     final Writer writer = sb.asWriter(); [EOL]     writer.write('l'); [EOL]     assertEquals("basel", sb.toString()); [EOL]     writer.write(new char[] { 'i', 'n' }); [EOL]     assertEquals("baselin", sb.toString()); [EOL]     writer.write(new char[] { 'n', 'e', 'r' }, 1, 2); [EOL]     assertEquals("baseliner", sb.toString()); [EOL]     writer.write(" rout"); [EOL]     assertEquals("baseliner rout", sb.toString()); [EOL]     writer.write("ping that server", 1, 3); [EOL]     assertEquals("baseliner routing", sb.toString()); [EOL]     writer.flush(); [EOL]     assertEquals("baseliner routing", sb.toString()); [EOL]     writer.close(); [EOL]     assertEquals("baseliner routing", sb.toString()); [EOL]     writer.write(" hi"); [EOL]     assertEquals("baseliner routing hi", sb.toString()); [EOL]     sb.setLength(4); [EOL]     writer.write('d'); [EOL]     assertEquals("based", sb.toString()); [EOL] }
@Test [EOL] public void testAsWriter() throws Exception { [EOL]     final StrBuilder sb = new StrBuilder("base"); [EOL]     final Writer writer = sb.asWriter(); [EOL]     writer.write('l'); [EOL]     assertEquals("basel", sb.toString()); [EOL]     writer.write(new char[] { 'i', 'n' }); [EOL]     assertEquals("baselin", sb.toString()); [EOL]     writer.write(new char[] { 'n', 'e', 'r' }, 1, 2); [EOL]     assertEquals("baseliner", sb.toString()); [EOL]     writer.write(" rout"); [EOL]     assertEquals("baseliner rout", sb.toString()); [EOL]     writer.write("ping that server", 1, 3); [EOL]     assertEquals("baseliner routing", sb.toString()); [EOL]     writer.flush(); [EOL]     assertEquals("baseliner routing", sb.toString()); [EOL]     writer.close(); [EOL]     assertEquals("baseliner routing", sb.toString()); [EOL]     writer.write(" hi"); [EOL]     assertEquals("baseliner routing hi", sb.toString()); [EOL]     sb.setLength(4); [EOL]     writer.write('d'); [EOL]     assertEquals("based", sb.toString()); [EOL] }
@Test [EOL] public void testAsWriter() throws Exception { [EOL]     final StrBuilder sb = new StrBuilder("base"); [EOL]     final Writer writer = sb.asWriter(); [EOL]     writer.write('l'); [EOL]     assertEquals("basel", sb.toString()); [EOL]     writer.write(new char[] { 'i', 'n' }); [EOL]     assertEquals("baselin", sb.toString()); [EOL]     writer.write(new char[] { 'n', 'e', 'r' }, 1, 2); [EOL]     assertEquals("baseliner", sb.toString()); [EOL]     writer.write(" rout"); [EOL]     assertEquals("baseliner rout", sb.toString()); [EOL]     writer.write("ping that server", 1, 3); [EOL]     assertEquals("baseliner routing", sb.toString()); [EOL]     writer.flush(); [EOL]     assertEquals("baseliner routing", sb.toString()); [EOL]     writer.close(); [EOL]     assertEquals("baseliner routing", sb.toString()); [EOL]     writer.write(" hi"); [EOL]     assertEquals("baseliner routing hi", sb.toString()); [EOL]     sb.setLength(4); [EOL]     writer.write('d'); [EOL]     assertEquals("based", sb.toString()); [EOL] }
@Test [EOL] public void testAsWriter() throws Exception { [EOL]     final StrBuilder sb = new StrBuilder("base"); [EOL]     final Writer writer = sb.asWriter(); [EOL]     writer.write('l'); [EOL]     assertEquals("basel", sb.toString()); [EOL]     writer.write(new char[] { 'i', 'n' }); [EOL]     assertEquals("baselin", sb.toString()); [EOL]     writer.write(new char[] { 'n', 'e', 'r' }, 1, 2); [EOL]     assertEquals("baseliner", sb.toString()); [EOL]     writer.write(" rout"); [EOL]     assertEquals("baseliner rout", sb.toString()); [EOL]     writer.write("ping that server", 1, 3); [EOL]     assertEquals("baseliner routing", sb.toString()); [EOL]     writer.flush(); [EOL]     assertEquals("baseliner routing", sb.toString()); [EOL]     writer.close(); [EOL]     assertEquals("baseliner routing", sb.toString()); [EOL]     writer.write(" hi"); [EOL]     assertEquals("baseliner routing hi", sb.toString()); [EOL]     sb.setLength(4); [EOL]     writer.write('d'); [EOL]     assertEquals("based", sb.toString()); [EOL] }
@Test [EOL] public void testAsWriter() throws Exception { [EOL]     final StrBuilder sb = new StrBuilder("base"); [EOL]     final Writer writer = sb.asWriter(); [EOL]     writer.write('l'); [EOL]     assertEquals("basel", sb.toString()); [EOL]     writer.write(new char[] { 'i', 'n' }); [EOL]     assertEquals("baselin", sb.toString()); [EOL]     writer.write(new char[] { 'n', 'e', 'r' }, 1, 2); [EOL]     assertEquals("baseliner", sb.toString()); [EOL]     writer.write(" rout"); [EOL]     assertEquals("baseliner rout", sb.toString()); [EOL]     writer.write("ping that server", 1, 3); [EOL]     assertEquals("baseliner routing", sb.toString()); [EOL]     writer.flush(); [EOL]     assertEquals("baseliner routing", sb.toString()); [EOL]     writer.close(); [EOL]     assertEquals("baseliner routing", sb.toString()); [EOL]     writer.write(" hi"); [EOL]     assertEquals("baseliner routing hi", sb.toString()); [EOL]     sb.setLength(4); [EOL]     writer.write('d'); [EOL]     assertEquals("based", sb.toString()); [EOL] }
@Test [EOL] public void testAsWriter() throws Exception { [EOL]     final StrBuilder sb = new StrBuilder("base"); [EOL]     final Writer writer = sb.asWriter(); [EOL]     writer.write('l'); [EOL]     assertEquals("basel", sb.toString()); [EOL]     writer.write(new char[] { 'i', 'n' }); [EOL]     assertEquals("baselin", sb.toString()); [EOL]     writer.write(new char[] { 'n', 'e', 'r' }, 1, 2); [EOL]     assertEquals("baseliner", sb.toString()); [EOL]     writer.write(" rout"); [EOL]     assertEquals("baseliner rout", sb.toString()); [EOL]     writer.write("ping that server", 1, 3); [EOL]     assertEquals("baseliner routing", sb.toString()); [EOL]     writer.flush(); [EOL]     assertEquals("baseliner routing", sb.toString()); [EOL]     writer.close(); [EOL]     assertEquals("baseliner routing", sb.toString()); [EOL]     writer.write(" hi"); [EOL]     assertEquals("baseliner routing hi", sb.toString()); [EOL]     sb.setLength(4); [EOL]     writer.write('d'); [EOL]     assertEquals("based", sb.toString()); [EOL] }
@Test [EOL] public void testAsWriter() throws Exception { [EOL]     final StrBuilder sb = new StrBuilder("base"); [EOL]     final Writer writer = sb.asWriter(); [EOL]     writer.write('l'); [EOL]     assertEquals("basel", sb.toString()); [EOL]     writer.write(new char[] { 'i', 'n' }); [EOL]     assertEquals("baselin", sb.toString()); [EOL]     writer.write(new char[] { 'n', 'e', 'r' }, 1, 2); [EOL]     assertEquals("baseliner", sb.toString()); [EOL]     writer.write(" rout"); [EOL]     assertEquals("baseliner rout", sb.toString()); [EOL]     writer.write("ping that server", 1, 3); [EOL]     assertEquals("baseliner routing", sb.toString()); [EOL]     writer.flush(); [EOL]     assertEquals("baseliner routing", sb.toString()); [EOL]     writer.close(); [EOL]     assertEquals("baseliner routing", sb.toString()); [EOL]     writer.write(" hi"); [EOL]     assertEquals("baseliner routing hi", sb.toString()); [EOL]     sb.setLength(4); [EOL]     writer.write('d'); [EOL]     assertEquals("based", sb.toString()); [EOL] }
@Test [EOL] public void testAsWriter() throws Exception { [EOL]     final StrBuilder sb = new StrBuilder("base"); [EOL]     final Writer writer = sb.asWriter(); [EOL]     writer.write('l'); [EOL]     assertEquals("basel", sb.toString()); [EOL]     writer.write(new char[] { 'i', 'n' }); [EOL]     assertEquals("baselin", sb.toString()); [EOL]     writer.write(new char[] { 'n', 'e', 'r' }, 1, 2); [EOL]     assertEquals("baseliner", sb.toString()); [EOL]     writer.write(" rout"); [EOL]     assertEquals("baseliner rout", sb.toString()); [EOL]     writer.write("ping that server", 1, 3); [EOL]     assertEquals("baseliner routing", sb.toString()); [EOL]     writer.flush(); [EOL]     assertEquals("baseliner routing", sb.toString()); [EOL]     writer.close(); [EOL]     assertEquals("baseliner routing", sb.toString()); [EOL]     writer.write(" hi"); [EOL]     assertEquals("baseliner routing hi", sb.toString()); [EOL]     sb.setLength(4); [EOL]     writer.write('d'); [EOL]     assertEquals("based", sb.toString()); [EOL] }
@Test [EOL] public void testAsWriter() throws Exception { [EOL]     final StrBuilder sb = new StrBuilder("base"); [EOL]     final Writer writer = sb.asWriter(); [EOL]     writer.write('l'); [EOL]     assertEquals("basel", sb.toString()); [EOL]     writer.write(new char[] { 'i', 'n' }); [EOL]     assertEquals("baselin", sb.toString()); [EOL]     writer.write(new char[] { 'n', 'e', 'r' }, 1, 2); [EOL]     assertEquals("baseliner", sb.toString()); [EOL]     writer.write(" rout"); [EOL]     assertEquals("baseliner rout", sb.toString()); [EOL]     writer.write("ping that server", 1, 3); [EOL]     assertEquals("baseliner routing", sb.toString()); [EOL]     writer.flush(); [EOL]     assertEquals("baseliner routing", sb.toString()); [EOL]     writer.close(); [EOL]     assertEquals("baseliner routing", sb.toString()); [EOL]     writer.write(" hi"); [EOL]     assertEquals("baseliner routing hi", sb.toString()); [EOL]     sb.setLength(4); [EOL]     writer.write('d'); [EOL]     assertEquals("based", sb.toString()); [EOL] }
@Test [EOL] public void testAsWriter() throws Exception { [EOL]     final StrBuilder sb = new StrBuilder("base"); [EOL]     final Writer writer = sb.asWriter(); [EOL]     writer.write('l'); [EOL]     assertEquals("basel", sb.toString()); [EOL]     writer.write(new char[] { 'i', 'n' }); [EOL]     assertEquals("baselin", sb.toString()); [EOL]     writer.write(new char[] { 'n', 'e', 'r' }, 1, 2); [EOL]     assertEquals("baseliner", sb.toString()); [EOL]     writer.write(" rout"); [EOL]     assertEquals("baseliner rout", sb.toString()); [EOL]     writer.write("ping that server", 1, 3); [EOL]     assertEquals("baseliner routing", sb.toString()); [EOL]     writer.flush(); [EOL]     assertEquals("baseliner routing", sb.toString()); [EOL]     writer.close(); [EOL]     assertEquals("baseliner routing", sb.toString()); [EOL]     writer.write(" hi"); [EOL]     assertEquals("baseliner routing hi", sb.toString()); [EOL]     sb.setLength(4); [EOL]     writer.write('d'); [EOL]     assertEquals("based", sb.toString()); [EOL] }
@Test [EOL] public void testAsWriter() throws Exception { [EOL]     final StrBuilder sb = new StrBuilder("base"); [EOL]     final Writer writer = sb.asWriter(); [EOL]     writer.write('l'); [EOL]     assertEquals("basel", sb.toString()); [EOL]     writer.write(new char[] { 'i', 'n' }); [EOL]     assertEquals("baselin", sb.toString()); [EOL]     writer.write(new char[] { 'n', 'e', 'r' }, 1, 2); [EOL]     assertEquals("baseliner", sb.toString()); [EOL]     writer.write(" rout"); [EOL]     assertEquals("baseliner rout", sb.toString()); [EOL]     writer.write("ping that server", 1, 3); [EOL]     assertEquals("baseliner routing", sb.toString()); [EOL]     writer.flush(); [EOL]     assertEquals("baseliner routing", sb.toString()); [EOL]     writer.close(); [EOL]     assertEquals("baseliner routing", sb.toString()); [EOL]     writer.write(" hi"); [EOL]     assertEquals("baseliner routing hi", sb.toString()); [EOL]     sb.setLength(4); [EOL]     writer.write('d'); [EOL]     assertEquals("based", sb.toString()); [EOL] }
@Test [EOL] public void testAsWriter() throws Exception { [EOL]     final StrBuilder sb = new StrBuilder("base"); [EOL]     final Writer writer = sb.asWriter(); [EOL]     writer.write('l'); [EOL]     assertEquals("basel", sb.toString()); [EOL]     writer.write(new char[] { 'i', 'n' }); [EOL]     assertEquals("baselin", sb.toString()); [EOL]     writer.write(new char[] { 'n', 'e', 'r' }, 1, 2); [EOL]     assertEquals("baseliner", sb.toString()); [EOL]     writer.write(" rout"); [EOL]     assertEquals("baseliner rout", sb.toString()); [EOL]     writer.write("ping that server", 1, 3); [EOL]     assertEquals("baseliner routing", sb.toString()); [EOL]     writer.flush(); [EOL]     assertEquals("baseliner routing", sb.toString()); [EOL]     writer.close(); [EOL]     assertEquals("baseliner routing", sb.toString()); [EOL]     writer.write(" hi"); [EOL]     assertEquals("baseliner routing hi", sb.toString()); [EOL]     sb.setLength(4); [EOL]     writer.write('d'); [EOL]     assertEquals("based", sb.toString()); [EOL] }
@Test [EOL] public void testAsWriter() throws Exception { [EOL]     final StrBuilder sb = new StrBuilder("base"); [EOL]     final Writer writer = sb.asWriter(); [EOL]     writer.write('l'); [EOL]     assertEquals("basel", sb.toString()); [EOL]     writer.write(new char[] { 'i', 'n' }); [EOL]     assertEquals("baselin", sb.toString()); [EOL]     writer.write(new char[] { 'n', 'e', 'r' }, 1, 2); [EOL]     assertEquals("baseliner", sb.toString()); [EOL]     writer.write(" rout"); [EOL]     assertEquals("baseliner rout", sb.toString()); [EOL]     writer.write("ping that server", 1, 3); [EOL]     assertEquals("baseliner routing", sb.toString()); [EOL]     writer.flush(); [EOL]     assertEquals("baseliner routing", sb.toString()); [EOL]     writer.close(); [EOL]     assertEquals("baseliner routing", sb.toString()); [EOL]     writer.write(" hi"); [EOL]     assertEquals("baseliner routing hi", sb.toString()); [EOL]     sb.setLength(4); [EOL]     writer.write('d'); [EOL]     assertEquals("based", sb.toString()); [EOL] }
@Test [EOL] public void testAsWriter() throws Exception { [EOL]     final StrBuilder sb = new StrBuilder("base"); [EOL]     final Writer writer = sb.asWriter(); [EOL]     writer.write('l'); [EOL]     assertEquals("basel", sb.toString()); [EOL]     writer.write(new char[] { 'i', 'n' }); [EOL]     assertEquals("baselin", sb.toString()); [EOL]     writer.write(new char[] { 'n', 'e', 'r' }, 1, 2); [EOL]     assertEquals("baseliner", sb.toString()); [EOL]     writer.write(" rout"); [EOL]     assertEquals("baseliner rout", sb.toString()); [EOL]     writer.write("ping that server", 1, 3); [EOL]     assertEquals("baseliner routing", sb.toString()); [EOL]     writer.flush(); [EOL]     assertEquals("baseliner routing", sb.toString()); [EOL]     writer.close(); [EOL]     assertEquals("baseliner routing", sb.toString()); [EOL]     writer.write(" hi"); [EOL]     assertEquals("baseliner routing hi", sb.toString()); [EOL]     sb.setLength(4); [EOL]     writer.write('d'); [EOL]     assertEquals("based", sb.toString()); [EOL] }
@Test [EOL] public void testAsWriter() throws Exception { [EOL]     final StrBuilder sb = new StrBuilder("base"); [EOL]     final Writer writer = sb.asWriter(); [EOL]     writer.write('l'); [EOL]     assertEquals("basel", sb.toString()); [EOL]     writer.write(new char[] { 'i', 'n' }); [EOL]     assertEquals("baselin", sb.toString()); [EOL]     writer.write(new char[] { 'n', 'e', 'r' }, 1, 2); [EOL]     assertEquals("baseliner", sb.toString()); [EOL]     writer.write(" rout"); [EOL]     assertEquals("baseliner rout", sb.toString()); [EOL]     writer.write("ping that server", 1, 3); [EOL]     assertEquals("baseliner routing", sb.toString()); [EOL]     writer.flush(); [EOL]     assertEquals("baseliner routing", sb.toString()); [EOL]     writer.close(); [EOL]     assertEquals("baseliner routing", sb.toString()); [EOL]     writer.write(" hi"); [EOL]     assertEquals("baseliner routing hi", sb.toString()); [EOL]     sb.setLength(4); [EOL]     writer.write('d'); [EOL]     assertEquals("based", sb.toString()); [EOL] }
@Test [EOL] public void testAsWriter() throws Exception { [EOL]     final StrBuilder sb = new StrBuilder("base"); [EOL]     final Writer writer = sb.asWriter(); [EOL]     writer.write('l'); [EOL]     assertEquals("basel", sb.toString()); [EOL]     writer.write(new char[] { 'i', 'n' }); [EOL]     assertEquals("baselin", sb.toString()); [EOL]     writer.write(new char[] { 'n', 'e', 'r' }, 1, 2); [EOL]     assertEquals("baseliner", sb.toString()); [EOL]     writer.write(" rout"); [EOL]     assertEquals("baseliner rout", sb.toString()); [EOL]     writer.write("ping that server", 1, 3); [EOL]     assertEquals("baseliner routing", sb.toString()); [EOL]     writer.flush(); [EOL]     assertEquals("baseliner routing", sb.toString()); [EOL]     writer.close(); [EOL]     assertEquals("baseliner routing", sb.toString()); [EOL]     writer.write(" hi"); [EOL]     assertEquals("baseliner routing hi", sb.toString()); [EOL]     sb.setLength(4); [EOL]     writer.write('d'); [EOL]     assertEquals("based", sb.toString()); [EOL] }
@Test [EOL] public void testAsWriter() throws Exception { [EOL]     final StrBuilder sb = new StrBuilder("base"); [EOL]     final Writer writer = sb.asWriter(); [EOL]     writer.write('l'); [EOL]     assertEquals("basel", sb.toString()); [EOL]     writer.write(new char[] { 'i', 'n' }); [EOL]     assertEquals("baselin", sb.toString()); [EOL]     writer.write(new char[] { 'n', 'e', 'r' }, 1, 2); [EOL]     assertEquals("baseliner", sb.toString()); [EOL]     writer.write(" rout"); [EOL]     assertEquals("baseliner rout", sb.toString()); [EOL]     writer.write("ping that server", 1, 3); [EOL]     assertEquals("baseliner routing", sb.toString()); [EOL]     writer.flush(); [EOL]     assertEquals("baseliner routing", sb.toString()); [EOL]     writer.close(); [EOL]     assertEquals("baseliner routing", sb.toString()); [EOL]     writer.write(" hi"); [EOL]     assertEquals("baseliner routing hi", sb.toString()); [EOL]     sb.setLength(4); [EOL]     writer.write('d'); [EOL]     assertEquals("based", sb.toString()); [EOL] }
@Test [EOL] public void testAsWriter() throws Exception { [EOL]     final StrBuilder sb = new StrBuilder("base"); [EOL]     final Writer writer = sb.asWriter(); [EOL]     writer.write('l'); [EOL]     assertEquals("basel", sb.toString()); [EOL]     writer.write(new char[] { 'i', 'n' }); [EOL]     assertEquals("baselin", sb.toString()); [EOL]     writer.write(new char[] { 'n', 'e', 'r' }, 1, 2); [EOL]     assertEquals("baseliner", sb.toString()); [EOL]     writer.write(" rout"); [EOL]     assertEquals("baseliner rout", sb.toString()); [EOL]     writer.write("ping that server", 1, 3); [EOL]     assertEquals("baseliner routing", sb.toString()); [EOL]     writer.flush(); [EOL]     assertEquals("baseliner routing", sb.toString()); [EOL]     writer.close(); [EOL]     assertEquals("baseliner routing", sb.toString()); [EOL]     writer.write(" hi"); [EOL]     assertEquals("baseliner routing hi", sb.toString()); [EOL]     sb.setLength(4); [EOL]     writer.write('d'); [EOL]     assertEquals("based", sb.toString()); [EOL] }
@Test [EOL] public void testAsWriter() throws Exception { [EOL]     final StrBuilder sb = new StrBuilder("base"); [EOL]     final Writer writer = sb.asWriter(); [EOL]     writer.write('l'); [EOL]     assertEquals("basel", sb.toString()); [EOL]     writer.write(new char[] { 'i', 'n' }); [EOL]     assertEquals("baselin", sb.toString()); [EOL]     writer.write(new char[] { 'n', 'e', 'r' }, 1, 2); [EOL]     assertEquals("baseliner", sb.toString()); [EOL]     writer.write(" rout"); [EOL]     assertEquals("baseliner rout", sb.toString()); [EOL]     writer.write("ping that server", 1, 3); [EOL]     assertEquals("baseliner routing", sb.toString()); [EOL]     writer.flush(); [EOL]     assertEquals("baseliner routing", sb.toString()); [EOL]     writer.close(); [EOL]     assertEquals("baseliner routing", sb.toString()); [EOL]     writer.write(" hi"); [EOL]     assertEquals("baseliner routing hi", sb.toString()); [EOL]     sb.setLength(4); [EOL]     writer.write('d'); [EOL]     assertEquals("based", sb.toString()); [EOL] }
@Test [EOL] public void testAsWriter() throws Exception { [EOL]     final StrBuilder sb = new StrBuilder("base"); [EOL]     final Writer writer = sb.asWriter(); [EOL]     writer.write('l'); [EOL]     assertEquals("basel", sb.toString()); [EOL]     writer.write(new char[] { 'i', 'n' }); [EOL]     assertEquals("baselin", sb.toString()); [EOL]     writer.write(new char[] { 'n', 'e', 'r' }, 1, 2); [EOL]     assertEquals("baseliner", sb.toString()); [EOL]     writer.write(" rout"); [EOL]     assertEquals("baseliner rout", sb.toString()); [EOL]     writer.write("ping that server", 1, 3); [EOL]     assertEquals("baseliner routing", sb.toString()); [EOL]     writer.flush(); [EOL]     assertEquals("baseliner routing", sb.toString()); [EOL]     writer.close(); [EOL]     assertEquals("baseliner routing", sb.toString()); [EOL]     writer.write(" hi"); [EOL]     assertEquals("baseliner routing hi", sb.toString()); [EOL]     sb.setLength(4); [EOL]     writer.write('d'); [EOL]     assertEquals("based", sb.toString()); [EOL] }
@Test [EOL] public void testAsWriter() throws Exception { [EOL]     final StrBuilder sb = new StrBuilder("base"); [EOL]     final Writer writer = sb.asWriter(); [EOL]     writer.write('l'); [EOL]     assertEquals("basel", sb.toString()); [EOL]     writer.write(new char[] { 'i', 'n' }); [EOL]     assertEquals("baselin", sb.toString()); [EOL]     writer.write(new char[] { 'n', 'e', 'r' }, 1, 2); [EOL]     assertEquals("baseliner", sb.toString()); [EOL]     writer.write(" rout"); [EOL]     assertEquals("baseliner rout", sb.toString()); [EOL]     writer.write("ping that server", 1, 3); [EOL]     assertEquals("baseliner routing", sb.toString()); [EOL]     writer.flush(); [EOL]     assertEquals("baseliner routing", sb.toString()); [EOL]     writer.close(); [EOL]     assertEquals("baseliner routing", sb.toString()); [EOL]     writer.write(" hi"); [EOL]     assertEquals("baseliner routing hi", sb.toString()); [EOL]     sb.setLength(4); [EOL]     writer.write('d'); [EOL]     assertEquals("based", sb.toString()); [EOL] }
@Test [EOL] public void testAsWriter() throws Exception { [EOL]     final StrBuilder sb = new StrBuilder("base"); [EOL]     final Writer writer = sb.asWriter(); [EOL]     writer.write('l'); [EOL]     assertEquals("basel", sb.toString()); [EOL]     writer.write(new char[] { 'i', 'n' }); [EOL]     assertEquals("baselin", sb.toString()); [EOL]     writer.write(new char[] { 'n', 'e', 'r' }, 1, 2); [EOL]     assertEquals("baseliner", sb.toString()); [EOL]     writer.write(" rout"); [EOL]     assertEquals("baseliner rout", sb.toString()); [EOL]     writer.write("ping that server", 1, 3); [EOL]     assertEquals("baseliner routing", sb.toString()); [EOL]     writer.flush(); [EOL]     assertEquals("baseliner routing", sb.toString()); [EOL]     writer.close(); [EOL]     assertEquals("baseliner routing", sb.toString()); [EOL]     writer.write(" hi"); [EOL]     assertEquals("baseliner routing hi", sb.toString()); [EOL]     sb.setLength(4); [EOL]     writer.write('d'); [EOL]     assertEquals("based", sb.toString()); [EOL] }
@Test [EOL] public void test_getInstance() { [EOL]     final FastDateFormat format1 = FastDateFormat.getInstance(); [EOL]     final FastDateFormat format2 = FastDateFormat.getInstance(); [EOL]     assertSame(format1, format2); [EOL] }
@Test [EOL] public void test_getInstance() { [EOL]     final FastDateFormat format1 = FastDateFormat.getInstance(); [EOL]     final FastDateFormat format2 = FastDateFormat.getInstance(); [EOL]     assertSame(format1, format2); [EOL] }
@Test [EOL] public void test_getInstance() { [EOL]     final FastDateFormat format1 = FastDateFormat.getInstance(); [EOL]     final FastDateFormat format2 = FastDateFormat.getInstance(); [EOL]     assertSame(format1, format2); [EOL] }
@Test [EOL] public void test_getInstance() { [EOL]     final FastDateFormat format1 = FastDateFormat.getInstance(); [EOL]     final FastDateFormat format2 = FastDateFormat.getInstance(); [EOL]     assertSame(format1, format2); [EOL] }
@Test [EOL] public void test_getInstance() { [EOL]     final FastDateFormat format1 = FastDateFormat.getInstance(); [EOL]     final FastDateFormat format2 = FastDateFormat.getInstance(); [EOL]     assertSame(format1, format2); [EOL] }
@Test [EOL] public void test_getInstance() { [EOL]     final FastDateFormat format1 = FastDateFormat.getInstance(); [EOL]     final FastDateFormat format2 = FastDateFormat.getInstance(); [EOL]     assertSame(format1, format2); [EOL] }
@Test [EOL] public void test_getInstance() { [EOL]     final FastDateFormat format1 = FastDateFormat.getInstance(); [EOL]     final FastDateFormat format2 = FastDateFormat.getInstance(); [EOL]     assertSame(format1, format2); [EOL] }
@Test [EOL] public void test_getInstance() { [EOL]     final FastDateFormat format1 = FastDateFormat.getInstance(); [EOL]     final FastDateFormat format2 = FastDateFormat.getInstance(); [EOL]     assertSame(format1, format2); [EOL] }
@Test [EOL] public void test_getInstance() { [EOL]     final FastDateFormat format1 = FastDateFormat.getInstance(); [EOL]     final FastDateFormat format2 = FastDateFormat.getInstance(); [EOL]     assertSame(format1, format2); [EOL] }
@Test [EOL] public void test_getInstance() { [EOL]     final FastDateFormat format1 = FastDateFormat.getInstance(); [EOL]     final FastDateFormat format2 = FastDateFormat.getInstance(); [EOL]     assertSame(format1, format2); [EOL] }
@Test [EOL] public void test_getInstance() { [EOL]     final FastDateFormat format1 = FastDateFormat.getInstance(); [EOL]     final FastDateFormat format2 = FastDateFormat.getInstance(); [EOL]     assertSame(format1, format2); [EOL] }
@Test [EOL] public void test_getInstance() { [EOL]     final FastDateFormat format1 = FastDateFormat.getInstance(); [EOL]     final FastDateFormat format2 = FastDateFormat.getInstance(); [EOL]     assertSame(format1, format2); [EOL] }
@Test [EOL] public void test_getInstance() { [EOL]     final FastDateFormat format1 = FastDateFormat.getInstance(); [EOL]     final FastDateFormat format2 = FastDateFormat.getInstance(); [EOL]     assertSame(format1, format2); [EOL] }
@Test [EOL] public void test_getInstance() { [EOL]     final FastDateFormat format1 = FastDateFormat.getInstance(); [EOL]     final FastDateFormat format2 = FastDateFormat.getInstance(); [EOL]     assertSame(format1, format2); [EOL] }
@Test [EOL] public void test_getInstance() { [EOL]     final FastDateFormat format1 = FastDateFormat.getInstance(); [EOL]     final FastDateFormat format2 = FastDateFormat.getInstance(); [EOL]     assertSame(format1, format2); [EOL] }
@Test [EOL] public void test_getInstance() { [EOL]     final FastDateFormat format1 = FastDateFormat.getInstance(); [EOL]     final FastDateFormat format2 = FastDateFormat.getInstance(); [EOL]     assertSame(format1, format2); [EOL] }
@Test [EOL] public void test_getInstance() { [EOL]     final FastDateFormat format1 = FastDateFormat.getInstance(); [EOL]     final FastDateFormat format2 = FastDateFormat.getInstance(); [EOL]     assertSame(format1, format2); [EOL] }
@Test [EOL] public void test_getInstance_String_TimeZone() { [EOL]     final Locale realDefaultLocale = Locale.getDefault(); [EOL]     final TimeZone realDefaultZone = TimeZone.getDefault(); [EOL]     try { [EOL]         Locale.setDefault(Locale.US); [EOL]         TimeZone.setDefault(TimeZone.getTimeZone("America/New_York")); [EOL]         final FastDateFormat format1 = FastDateFormat.getInstance("MM/DD/yyyy", TimeZone.getTimeZone("Atlantic/Reykjavik")); [EOL]         final FastDateFormat format2 = FastDateFormat.getInstance("MM/DD/yyyy"); [EOL]         final FastDateFormat format3 = FastDateFormat.getInstance("MM/DD/yyyy", TimeZone.getDefault()); [EOL]         final FastDateFormat format4 = FastDateFormat.getInstance("MM/DD/yyyy", TimeZone.getDefault()); [EOL]         final FastDateFormat format5 = FastDateFormat.getInstance("MM-DD-yyyy", TimeZone.getDefault()); [EOL]         final FastDateFormat format6 = FastDateFormat.getInstance("MM-DD-yyyy"); [EOL]         assertTrue(format1 != format2); [EOL]         assertEquals(TimeZone.getTimeZone("Atlantic/Reykjavik"), format1.getTimeZone()); [EOL]         assertEquals(TimeZone.getDefault(), format2.getTimeZone()); [EOL]         assertSame(format3, format4); [EOL]         assertTrue(format3 != format5); [EOL]         assertTrue(format4 != format6); [EOL]     } finally { [EOL]         Locale.setDefault(realDefaultLocale); [EOL]         TimeZone.setDefault(realDefaultZone); [EOL]     } [EOL] }
@Test [EOL] public void test_getInstance_String_TimeZone() { [EOL]     final Locale realDefaultLocale = Locale.getDefault(); [EOL]     final TimeZone realDefaultZone = TimeZone.getDefault(); [EOL]     try { [EOL]         Locale.setDefault(Locale.US); [EOL]         TimeZone.setDefault(TimeZone.getTimeZone("America/New_York")); [EOL]         final FastDateFormat format1 = FastDateFormat.getInstance("MM/DD/yyyy", TimeZone.getTimeZone("Atlantic/Reykjavik")); [EOL]         final FastDateFormat format2 = FastDateFormat.getInstance("MM/DD/yyyy"); [EOL]         final FastDateFormat format3 = FastDateFormat.getInstance("MM/DD/yyyy", TimeZone.getDefault()); [EOL]         final FastDateFormat format4 = FastDateFormat.getInstance("MM/DD/yyyy", TimeZone.getDefault()); [EOL]         final FastDateFormat format5 = FastDateFormat.getInstance("MM-DD-yyyy", TimeZone.getDefault()); [EOL]         final FastDateFormat format6 = FastDateFormat.getInstance("MM-DD-yyyy"); [EOL]         assertTrue(format1 != format2); [EOL]         assertEquals(TimeZone.getTimeZone("Atlantic/Reykjavik"), format1.getTimeZone()); [EOL]         assertEquals(TimeZone.getDefault(), format2.getTimeZone()); [EOL]         assertSame(format3, format4); [EOL]         assertTrue(format3 != format5); [EOL]         assertTrue(format4 != format6); [EOL]     } finally { [EOL]         Locale.setDefault(realDefaultLocale); [EOL]         TimeZone.setDefault(realDefaultZone); [EOL]     } [EOL] }
@Test [EOL] public void testLocales_Short_AD() throws Exception { [EOL]     testLocales(SHORT_FORMAT, false); [EOL] }
@Test [EOL] public void test_getInstance_String_TimeZone() { [EOL]     final Locale realDefaultLocale = Locale.getDefault(); [EOL]     final TimeZone realDefaultZone = TimeZone.getDefault(); [EOL]     try { [EOL]         Locale.setDefault(Locale.US); [EOL]         TimeZone.setDefault(TimeZone.getTimeZone("America/New_York")); [EOL]         final FastDateFormat format1 = FastDateFormat.getInstance("MM/DD/yyyy", TimeZone.getTimeZone("Atlantic/Reykjavik")); [EOL]         final FastDateFormat format2 = FastDateFormat.getInstance("MM/DD/yyyy"); [EOL]         final FastDateFormat format3 = FastDateFormat.getInstance("MM/DD/yyyy", TimeZone.getDefault()); [EOL]         final FastDateFormat format4 = FastDateFormat.getInstance("MM/DD/yyyy", TimeZone.getDefault()); [EOL]         final FastDateFormat format5 = FastDateFormat.getInstance("MM-DD-yyyy", TimeZone.getDefault()); [EOL]         final FastDateFormat format6 = FastDateFormat.getInstance("MM-DD-yyyy"); [EOL]         assertTrue(format1 != format2); [EOL]         assertEquals(TimeZone.getTimeZone("Atlantic/Reykjavik"), format1.getTimeZone()); [EOL]         assertEquals(TimeZone.getDefault(), format2.getTimeZone()); [EOL]         assertSame(format3, format4); [EOL]         assertTrue(format3 != format5); [EOL]         assertTrue(format4 != format6); [EOL]     } finally { [EOL]         Locale.setDefault(realDefaultLocale); [EOL]         TimeZone.setDefault(realDefaultZone); [EOL]     } [EOL] }
@Test [EOL] public void testGetUserDir() { [EOL]     final File dir = SystemUtils.getUserDir(); [EOL]     Assert.assertNotNull(dir); [EOL]     Assert.assertTrue(dir.exists()); [EOL] }
@Test [EOL] public void testGetUserHome() { [EOL]     final File dir = SystemUtils.getUserHome(); [EOL]     Assert.assertNotNull(dir); [EOL]     Assert.assertTrue(dir.exists()); [EOL] }
@Test(expected = IllegalArgumentException.class) [EOL] public void testAmbig() { [EOL]     FieldUtils.getField(Ambig.class, "VALUE"); [EOL] }
@Test(expected = IllegalArgumentException.class) [EOL] public void testAmbig() { [EOL]     FieldUtils.getField(Ambig.class, "VALUE"); [EOL] }
@Test [EOL] public void testReadDeclaredNamedStaticFieldForceAccess() throws Exception { [EOL]     assertEquals(Foo.VALUE, FieldUtils.readDeclaredStaticField(Foo.class, "VALUE", true)); [EOL]     assertEquals("child", FieldUtils.readDeclaredStaticField(PublicChild.class, "VALUE", true)); [EOL]     try { [EOL]         assertEquals(Foo.VALUE, FieldUtils.readDeclaredStaticField(PubliclyShadowedChild.class, "VALUE", true)); [EOL]         fail("expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         assertEquals(Foo.VALUE, FieldUtils.readDeclaredStaticField(PrivatelyShadowedChild.class, "VALUE", true)); [EOL]         fail("expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL] }
@Test [EOL] public void testReadDeclaredNamedStaticFieldForceAccess() throws Exception { [EOL]     assertEquals(Foo.VALUE, FieldUtils.readDeclaredStaticField(Foo.class, "VALUE", true)); [EOL]     assertEquals("child", FieldUtils.readDeclaredStaticField(PublicChild.class, "VALUE", true)); [EOL]     try { [EOL]         assertEquals(Foo.VALUE, FieldUtils.readDeclaredStaticField(PubliclyShadowedChild.class, "VALUE", true)); [EOL]         fail("expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         assertEquals(Foo.VALUE, FieldUtils.readDeclaredStaticField(PrivatelyShadowedChild.class, "VALUE", true)); [EOL]         fail("expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL] }
@Test [EOL] public void testReadDeclaredNamedStaticFieldForceAccess() throws Exception { [EOL]     assertEquals(Foo.VALUE, FieldUtils.readDeclaredStaticField(Foo.class, "VALUE", true)); [EOL]     assertEquals("child", FieldUtils.readDeclaredStaticField(PublicChild.class, "VALUE", true)); [EOL]     try { [EOL]         assertEquals(Foo.VALUE, FieldUtils.readDeclaredStaticField(PubliclyShadowedChild.class, "VALUE", true)); [EOL]         fail("expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         assertEquals(Foo.VALUE, FieldUtils.readDeclaredStaticField(PrivatelyShadowedChild.class, "VALUE", true)); [EOL]         fail("expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL] }
@Test [EOL] public void testWriteDeclaredNamedField() throws Exception { [EOL]     try { [EOL]         FieldUtils.writeDeclaredField(publicChild, "s", "S"); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeDeclaredField(publicChild, "b", Boolean.TRUE); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeDeclaredField(publicChild, "i", Integer.valueOf(1)); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeDeclaredField(publicChild, "d", Double.valueOf(1.0)); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     FieldUtils.writeDeclaredField(publiclyShadowedChild, "s", "S"); [EOL]     assertEquals("S", FieldUtils.readDeclaredField(publiclyShadowedChild, "s")); [EOL]     FieldUtils.writeDeclaredField(publiclyShadowedChild, "b", Boolean.FALSE); [EOL]     assertEquals(Boolean.FALSE, FieldUtils.readDeclaredField(publiclyShadowedChild, "b")); [EOL]     FieldUtils.writeDeclaredField(publiclyShadowedChild, "i", Integer.valueOf(0)); [EOL]     assertEquals(Integer.valueOf(0), FieldUtils.readDeclaredField(publiclyShadowedChild, "i")); [EOL]     FieldUtils.writeDeclaredField(publiclyShadowedChild, "d", Double.valueOf(0.0)); [EOL]     assertEquals(Double.valueOf(0.0), FieldUtils.readDeclaredField(publiclyShadowedChild, "d")); [EOL]     try { [EOL]         FieldUtils.writeDeclaredField(privatelyShadowedChild, "s", "S"); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeDeclaredField(privatelyShadowedChild, "b", Boolean.TRUE); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeDeclaredField(privatelyShadowedChild, "i", Integer.valueOf(1)); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeDeclaredField(privatelyShadowedChild, "d", Double.valueOf(1.0)); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL] }
@Test [EOL] public void testWriteDeclaredNamedField() throws Exception { [EOL]     try { [EOL]         FieldUtils.writeDeclaredField(publicChild, "s", "S"); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeDeclaredField(publicChild, "b", Boolean.TRUE); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeDeclaredField(publicChild, "i", Integer.valueOf(1)); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeDeclaredField(publicChild, "d", Double.valueOf(1.0)); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     FieldUtils.writeDeclaredField(publiclyShadowedChild, "s", "S"); [EOL]     assertEquals("S", FieldUtils.readDeclaredField(publiclyShadowedChild, "s")); [EOL]     FieldUtils.writeDeclaredField(publiclyShadowedChild, "b", Boolean.FALSE); [EOL]     assertEquals(Boolean.FALSE, FieldUtils.readDeclaredField(publiclyShadowedChild, "b")); [EOL]     FieldUtils.writeDeclaredField(publiclyShadowedChild, "i", Integer.valueOf(0)); [EOL]     assertEquals(Integer.valueOf(0), FieldUtils.readDeclaredField(publiclyShadowedChild, "i")); [EOL]     FieldUtils.writeDeclaredField(publiclyShadowedChild, "d", Double.valueOf(0.0)); [EOL]     assertEquals(Double.valueOf(0.0), FieldUtils.readDeclaredField(publiclyShadowedChild, "d")); [EOL]     try { [EOL]         FieldUtils.writeDeclaredField(privatelyShadowedChild, "s", "S"); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeDeclaredField(privatelyShadowedChild, "b", Boolean.TRUE); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeDeclaredField(privatelyShadowedChild, "i", Integer.valueOf(1)); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeDeclaredField(privatelyShadowedChild, "d", Double.valueOf(1.0)); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL] }
@Test [EOL] public void testWriteDeclaredNamedField() throws Exception { [EOL]     try { [EOL]         FieldUtils.writeDeclaredField(publicChild, "s", "S"); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeDeclaredField(publicChild, "b", Boolean.TRUE); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeDeclaredField(publicChild, "i", Integer.valueOf(1)); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeDeclaredField(publicChild, "d", Double.valueOf(1.0)); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     FieldUtils.writeDeclaredField(publiclyShadowedChild, "s", "S"); [EOL]     assertEquals("S", FieldUtils.readDeclaredField(publiclyShadowedChild, "s")); [EOL]     FieldUtils.writeDeclaredField(publiclyShadowedChild, "b", Boolean.FALSE); [EOL]     assertEquals(Boolean.FALSE, FieldUtils.readDeclaredField(publiclyShadowedChild, "b")); [EOL]     FieldUtils.writeDeclaredField(publiclyShadowedChild, "i", Integer.valueOf(0)); [EOL]     assertEquals(Integer.valueOf(0), FieldUtils.readDeclaredField(publiclyShadowedChild, "i")); [EOL]     FieldUtils.writeDeclaredField(publiclyShadowedChild, "d", Double.valueOf(0.0)); [EOL]     assertEquals(Double.valueOf(0.0), FieldUtils.readDeclaredField(publiclyShadowedChild, "d")); [EOL]     try { [EOL]         FieldUtils.writeDeclaredField(privatelyShadowedChild, "s", "S"); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeDeclaredField(privatelyShadowedChild, "b", Boolean.TRUE); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeDeclaredField(privatelyShadowedChild, "i", Integer.valueOf(1)); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeDeclaredField(privatelyShadowedChild, "d", Double.valueOf(1.0)); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL] }
@Test [EOL] public void testWriteDeclaredNamedField() throws Exception { [EOL]     try { [EOL]         FieldUtils.writeDeclaredField(publicChild, "s", "S"); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeDeclaredField(publicChild, "b", Boolean.TRUE); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeDeclaredField(publicChild, "i", Integer.valueOf(1)); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeDeclaredField(publicChild, "d", Double.valueOf(1.0)); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     FieldUtils.writeDeclaredField(publiclyShadowedChild, "s", "S"); [EOL]     assertEquals("S", FieldUtils.readDeclaredField(publiclyShadowedChild, "s")); [EOL]     FieldUtils.writeDeclaredField(publiclyShadowedChild, "b", Boolean.FALSE); [EOL]     assertEquals(Boolean.FALSE, FieldUtils.readDeclaredField(publiclyShadowedChild, "b")); [EOL]     FieldUtils.writeDeclaredField(publiclyShadowedChild, "i", Integer.valueOf(0)); [EOL]     assertEquals(Integer.valueOf(0), FieldUtils.readDeclaredField(publiclyShadowedChild, "i")); [EOL]     FieldUtils.writeDeclaredField(publiclyShadowedChild, "d", Double.valueOf(0.0)); [EOL]     assertEquals(Double.valueOf(0.0), FieldUtils.readDeclaredField(publiclyShadowedChild, "d")); [EOL]     try { [EOL]         FieldUtils.writeDeclaredField(privatelyShadowedChild, "s", "S"); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeDeclaredField(privatelyShadowedChild, "b", Boolean.TRUE); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeDeclaredField(privatelyShadowedChild, "i", Integer.valueOf(1)); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeDeclaredField(privatelyShadowedChild, "d", Double.valueOf(1.0)); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL] }
@Test [EOL] public void testWriteDeclaredNamedField() throws Exception { [EOL]     try { [EOL]         FieldUtils.writeDeclaredField(publicChild, "s", "S"); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeDeclaredField(publicChild, "b", Boolean.TRUE); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeDeclaredField(publicChild, "i", Integer.valueOf(1)); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeDeclaredField(publicChild, "d", Double.valueOf(1.0)); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     FieldUtils.writeDeclaredField(publiclyShadowedChild, "s", "S"); [EOL]     assertEquals("S", FieldUtils.readDeclaredField(publiclyShadowedChild, "s")); [EOL]     FieldUtils.writeDeclaredField(publiclyShadowedChild, "b", Boolean.FALSE); [EOL]     assertEquals(Boolean.FALSE, FieldUtils.readDeclaredField(publiclyShadowedChild, "b")); [EOL]     FieldUtils.writeDeclaredField(publiclyShadowedChild, "i", Integer.valueOf(0)); [EOL]     assertEquals(Integer.valueOf(0), FieldUtils.readDeclaredField(publiclyShadowedChild, "i")); [EOL]     FieldUtils.writeDeclaredField(publiclyShadowedChild, "d", Double.valueOf(0.0)); [EOL]     assertEquals(Double.valueOf(0.0), FieldUtils.readDeclaredField(publiclyShadowedChild, "d")); [EOL]     try { [EOL]         FieldUtils.writeDeclaredField(privatelyShadowedChild, "s", "S"); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeDeclaredField(privatelyShadowedChild, "b", Boolean.TRUE); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeDeclaredField(privatelyShadowedChild, "i", Integer.valueOf(1)); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeDeclaredField(privatelyShadowedChild, "d", Double.valueOf(1.0)); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL] }
@Test [EOL] public void testWriteDeclaredNamedField() throws Exception { [EOL]     try { [EOL]         FieldUtils.writeDeclaredField(publicChild, "s", "S"); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeDeclaredField(publicChild, "b", Boolean.TRUE); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeDeclaredField(publicChild, "i", Integer.valueOf(1)); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeDeclaredField(publicChild, "d", Double.valueOf(1.0)); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     FieldUtils.writeDeclaredField(publiclyShadowedChild, "s", "S"); [EOL]     assertEquals("S", FieldUtils.readDeclaredField(publiclyShadowedChild, "s")); [EOL]     FieldUtils.writeDeclaredField(publiclyShadowedChild, "b", Boolean.FALSE); [EOL]     assertEquals(Boolean.FALSE, FieldUtils.readDeclaredField(publiclyShadowedChild, "b")); [EOL]     FieldUtils.writeDeclaredField(publiclyShadowedChild, "i", Integer.valueOf(0)); [EOL]     assertEquals(Integer.valueOf(0), FieldUtils.readDeclaredField(publiclyShadowedChild, "i")); [EOL]     FieldUtils.writeDeclaredField(publiclyShadowedChild, "d", Double.valueOf(0.0)); [EOL]     assertEquals(Double.valueOf(0.0), FieldUtils.readDeclaredField(publiclyShadowedChild, "d")); [EOL]     try { [EOL]         FieldUtils.writeDeclaredField(privatelyShadowedChild, "s", "S"); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeDeclaredField(privatelyShadowedChild, "b", Boolean.TRUE); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeDeclaredField(privatelyShadowedChild, "i", Integer.valueOf(1)); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeDeclaredField(privatelyShadowedChild, "d", Double.valueOf(1.0)); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL] }
@Test [EOL] public void testWriteDeclaredNamedField() throws Exception { [EOL]     try { [EOL]         FieldUtils.writeDeclaredField(publicChild, "s", "S"); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeDeclaredField(publicChild, "b", Boolean.TRUE); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeDeclaredField(publicChild, "i", Integer.valueOf(1)); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeDeclaredField(publicChild, "d", Double.valueOf(1.0)); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     FieldUtils.writeDeclaredField(publiclyShadowedChild, "s", "S"); [EOL]     assertEquals("S", FieldUtils.readDeclaredField(publiclyShadowedChild, "s")); [EOL]     FieldUtils.writeDeclaredField(publiclyShadowedChild, "b", Boolean.FALSE); [EOL]     assertEquals(Boolean.FALSE, FieldUtils.readDeclaredField(publiclyShadowedChild, "b")); [EOL]     FieldUtils.writeDeclaredField(publiclyShadowedChild, "i", Integer.valueOf(0)); [EOL]     assertEquals(Integer.valueOf(0), FieldUtils.readDeclaredField(publiclyShadowedChild, "i")); [EOL]     FieldUtils.writeDeclaredField(publiclyShadowedChild, "d", Double.valueOf(0.0)); [EOL]     assertEquals(Double.valueOf(0.0), FieldUtils.readDeclaredField(publiclyShadowedChild, "d")); [EOL]     try { [EOL]         FieldUtils.writeDeclaredField(privatelyShadowedChild, "s", "S"); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeDeclaredField(privatelyShadowedChild, "b", Boolean.TRUE); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeDeclaredField(privatelyShadowedChild, "i", Integer.valueOf(1)); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeDeclaredField(privatelyShadowedChild, "d", Double.valueOf(1.0)); [EOL]         fail("Expected IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL] }
@Test [EOL] public void testDelete_StringString() { [EOL]     assertEquals(null, CharSetUtils.delete(null, (String) null)); [EOL]     assertEquals(null, CharSetUtils.delete(null, "")); [EOL]     assertEquals("", CharSetUtils.delete("", (String) null)); [EOL]     assertEquals("", CharSetUtils.delete("", "")); [EOL]     assertEquals("", CharSetUtils.delete("", "a-e")); [EOL]     assertEquals("hello", CharSetUtils.delete("hello", (String) null)); [EOL]     assertEquals("hello", CharSetUtils.delete("hello", "")); [EOL]     assertEquals("hllo", CharSetUtils.delete("hello", "a-e")); [EOL]     assertEquals("he", CharSetUtils.delete("hello", "l-p")); [EOL]     assertEquals("hello", CharSetUtils.delete("hello", "z")); [EOL] }
@Test [EOL] public void testDelete_StringString() { [EOL]     assertEquals(null, CharSetUtils.delete(null, (String) null)); [EOL]     assertEquals(null, CharSetUtils.delete(null, "")); [EOL]     assertEquals("", CharSetUtils.delete("", (String) null)); [EOL]     assertEquals("", CharSetUtils.delete("", "")); [EOL]     assertEquals("", CharSetUtils.delete("", "a-e")); [EOL]     assertEquals("hello", CharSetUtils.delete("hello", (String) null)); [EOL]     assertEquals("hello", CharSetUtils.delete("hello", "")); [EOL]     assertEquals("hllo", CharSetUtils.delete("hello", "a-e")); [EOL]     assertEquals("he", CharSetUtils.delete("hello", "l-p")); [EOL]     assertEquals("hello", CharSetUtils.delete("hello", "z")); [EOL] }
@Test [EOL] public void testDelete_StringString() { [EOL]     assertEquals(null, CharSetUtils.delete(null, (String) null)); [EOL]     assertEquals(null, CharSetUtils.delete(null, "")); [EOL]     assertEquals("", CharSetUtils.delete("", (String) null)); [EOL]     assertEquals("", CharSetUtils.delete("", "")); [EOL]     assertEquals("", CharSetUtils.delete("", "a-e")); [EOL]     assertEquals("hello", CharSetUtils.delete("hello", (String) null)); [EOL]     assertEquals("hello", CharSetUtils.delete("hello", "")); [EOL]     assertEquals("hllo", CharSetUtils.delete("hello", "a-e")); [EOL]     assertEquals("he", CharSetUtils.delete("hello", "l-p")); [EOL]     assertEquals("hello", CharSetUtils.delete("hello", "z")); [EOL] }
@Test [EOL] public void testDelete_StringString() { [EOL]     assertEquals(null, CharSetUtils.delete(null, (String) null)); [EOL]     assertEquals(null, CharSetUtils.delete(null, "")); [EOL]     assertEquals("", CharSetUtils.delete("", (String) null)); [EOL]     assertEquals("", CharSetUtils.delete("", "")); [EOL]     assertEquals("", CharSetUtils.delete("", "a-e")); [EOL]     assertEquals("hello", CharSetUtils.delete("hello", (String) null)); [EOL]     assertEquals("hello", CharSetUtils.delete("hello", "")); [EOL]     assertEquals("hllo", CharSetUtils.delete("hello", "a-e")); [EOL]     assertEquals("he", CharSetUtils.delete("hello", "l-p")); [EOL]     assertEquals("hello", CharSetUtils.delete("hello", "z")); [EOL] }
@Test [EOL] public void testDelete_StringString() { [EOL]     assertEquals(null, CharSetUtils.delete(null, (String) null)); [EOL]     assertEquals(null, CharSetUtils.delete(null, "")); [EOL]     assertEquals("", CharSetUtils.delete("", (String) null)); [EOL]     assertEquals("", CharSetUtils.delete("", "")); [EOL]     assertEquals("", CharSetUtils.delete("", "a-e")); [EOL]     assertEquals("hello", CharSetUtils.delete("hello", (String) null)); [EOL]     assertEquals("hello", CharSetUtils.delete("hello", "")); [EOL]     assertEquals("hllo", CharSetUtils.delete("hello", "a-e")); [EOL]     assertEquals("he", CharSetUtils.delete("hello", "l-p")); [EOL]     assertEquals("hello", CharSetUtils.delete("hello", "z")); [EOL] }
@Test [EOL] public void testDelete_StringString() { [EOL]     assertEquals(null, CharSetUtils.delete(null, (String) null)); [EOL]     assertEquals(null, CharSetUtils.delete(null, "")); [EOL]     assertEquals("", CharSetUtils.delete("", (String) null)); [EOL]     assertEquals("", CharSetUtils.delete("", "")); [EOL]     assertEquals("", CharSetUtils.delete("", "a-e")); [EOL]     assertEquals("hello", CharSetUtils.delete("hello", (String) null)); [EOL]     assertEquals("hello", CharSetUtils.delete("hello", "")); [EOL]     assertEquals("hllo", CharSetUtils.delete("hello", "a-e")); [EOL]     assertEquals("he", CharSetUtils.delete("hello", "l-p")); [EOL]     assertEquals("hello", CharSetUtils.delete("hello", "z")); [EOL] }
@Test [EOL] public void testDelete_StringString() { [EOL]     assertEquals(null, CharSetUtils.delete(null, (String) null)); [EOL]     assertEquals(null, CharSetUtils.delete(null, "")); [EOL]     assertEquals("", CharSetUtils.delete("", (String) null)); [EOL]     assertEquals("", CharSetUtils.delete("", "")); [EOL]     assertEquals("", CharSetUtils.delete("", "a-e")); [EOL]     assertEquals("hello", CharSetUtils.delete("hello", (String) null)); [EOL]     assertEquals("hello", CharSetUtils.delete("hello", "")); [EOL]     assertEquals("hllo", CharSetUtils.delete("hello", "a-e")); [EOL]     assertEquals("he", CharSetUtils.delete("hello", "l-p")); [EOL]     assertEquals("hello", CharSetUtils.delete("hello", "z")); [EOL] }
@Test [EOL] public void testDelete_StringString() { [EOL]     assertEquals(null, CharSetUtils.delete(null, (String) null)); [EOL]     assertEquals(null, CharSetUtils.delete(null, "")); [EOL]     assertEquals("", CharSetUtils.delete("", (String) null)); [EOL]     assertEquals("", CharSetUtils.delete("", "")); [EOL]     assertEquals("", CharSetUtils.delete("", "a-e")); [EOL]     assertEquals("hello", CharSetUtils.delete("hello", (String) null)); [EOL]     assertEquals("hello", CharSetUtils.delete("hello", "")); [EOL]     assertEquals("hllo", CharSetUtils.delete("hello", "a-e")); [EOL]     assertEquals("he", CharSetUtils.delete("hello", "l-p")); [EOL]     assertEquals("hello", CharSetUtils.delete("hello", "z")); [EOL] }
@Test [EOL] public void testDelete_StringString() { [EOL]     assertEquals(null, CharSetUtils.delete(null, (String) null)); [EOL]     assertEquals(null, CharSetUtils.delete(null, "")); [EOL]     assertEquals("", CharSetUtils.delete("", (String) null)); [EOL]     assertEquals("", CharSetUtils.delete("", "")); [EOL]     assertEquals("", CharSetUtils.delete("", "a-e")); [EOL]     assertEquals("hello", CharSetUtils.delete("hello", (String) null)); [EOL]     assertEquals("hello", CharSetUtils.delete("hello", "")); [EOL]     assertEquals("hllo", CharSetUtils.delete("hello", "a-e")); [EOL]     assertEquals("he", CharSetUtils.delete("hello", "l-p")); [EOL]     assertEquals("hello", CharSetUtils.delete("hello", "z")); [EOL] }
@Test [EOL] public void testDelete_StringString() { [EOL]     assertEquals(null, CharSetUtils.delete(null, (String) null)); [EOL]     assertEquals(null, CharSetUtils.delete(null, "")); [EOL]     assertEquals("", CharSetUtils.delete("", (String) null)); [EOL]     assertEquals("", CharSetUtils.delete("", "")); [EOL]     assertEquals("", CharSetUtils.delete("", "a-e")); [EOL]     assertEquals("hello", CharSetUtils.delete("hello", (String) null)); [EOL]     assertEquals("hello", CharSetUtils.delete("hello", "")); [EOL]     assertEquals("hllo", CharSetUtils.delete("hello", "a-e")); [EOL]     assertEquals("he", CharSetUtils.delete("hello", "l-p")); [EOL]     assertEquals("hello", CharSetUtils.delete("hello", "z")); [EOL] }
@Test [EOL] public void testDelete_StringString() { [EOL]     assertEquals(null, CharSetUtils.delete(null, (String) null)); [EOL]     assertEquals(null, CharSetUtils.delete(null, "")); [EOL]     assertEquals("", CharSetUtils.delete("", (String) null)); [EOL]     assertEquals("", CharSetUtils.delete("", "")); [EOL]     assertEquals("", CharSetUtils.delete("", "a-e")); [EOL]     assertEquals("hello", CharSetUtils.delete("hello", (String) null)); [EOL]     assertEquals("hello", CharSetUtils.delete("hello", "")); [EOL]     assertEquals("hllo", CharSetUtils.delete("hello", "a-e")); [EOL]     assertEquals("he", CharSetUtils.delete("hello", "l-p")); [EOL]     assertEquals("hello", CharSetUtils.delete("hello", "z")); [EOL] }
@Test [EOL] public void testDelete_StringString() { [EOL]     assertEquals(null, CharSetUtils.delete(null, (String) null)); [EOL]     assertEquals(null, CharSetUtils.delete(null, "")); [EOL]     assertEquals("", CharSetUtils.delete("", (String) null)); [EOL]     assertEquals("", CharSetUtils.delete("", "")); [EOL]     assertEquals("", CharSetUtils.delete("", "a-e")); [EOL]     assertEquals("hello", CharSetUtils.delete("hello", (String) null)); [EOL]     assertEquals("hello", CharSetUtils.delete("hello", "")); [EOL]     assertEquals("hllo", CharSetUtils.delete("hello", "a-e")); [EOL]     assertEquals("he", CharSetUtils.delete("hello", "l-p")); [EOL]     assertEquals("hello", CharSetUtils.delete("hello", "z")); [EOL] }
@Test [EOL] public void testDelete_StringString() { [EOL]     assertEquals(null, CharSetUtils.delete(null, (String) null)); [EOL]     assertEquals(null, CharSetUtils.delete(null, "")); [EOL]     assertEquals("", CharSetUtils.delete("", (String) null)); [EOL]     assertEquals("", CharSetUtils.delete("", "")); [EOL]     assertEquals("", CharSetUtils.delete("", "a-e")); [EOL]     assertEquals("hello", CharSetUtils.delete("hello", (String) null)); [EOL]     assertEquals("hello", CharSetUtils.delete("hello", "")); [EOL]     assertEquals("hllo", CharSetUtils.delete("hello", "a-e")); [EOL]     assertEquals("he", CharSetUtils.delete("hello", "l-p")); [EOL]     assertEquals("hello", CharSetUtils.delete("hello", "z")); [EOL] }
@Test [EOL] public void testDelete_StringString() { [EOL]     assertEquals(null, CharSetUtils.delete(null, (String) null)); [EOL]     assertEquals(null, CharSetUtils.delete(null, "")); [EOL]     assertEquals("", CharSetUtils.delete("", (String) null)); [EOL]     assertEquals("", CharSetUtils.delete("", "")); [EOL]     assertEquals("", CharSetUtils.delete("", "a-e")); [EOL]     assertEquals("hello", CharSetUtils.delete("hello", (String) null)); [EOL]     assertEquals("hello", CharSetUtils.delete("hello", "")); [EOL]     assertEquals("hllo", CharSetUtils.delete("hello", "a-e")); [EOL]     assertEquals("he", CharSetUtils.delete("hello", "l-p")); [EOL]     assertEquals("hello", CharSetUtils.delete("hello", "z")); [EOL] }
@Test [EOL] public void testDelete_StringString() { [EOL]     assertEquals(null, CharSetUtils.delete(null, (String) null)); [EOL]     assertEquals(null, CharSetUtils.delete(null, "")); [EOL]     assertEquals("", CharSetUtils.delete("", (String) null)); [EOL]     assertEquals("", CharSetUtils.delete("", "")); [EOL]     assertEquals("", CharSetUtils.delete("", "a-e")); [EOL]     assertEquals("hello", CharSetUtils.delete("hello", (String) null)); [EOL]     assertEquals("hello", CharSetUtils.delete("hello", "")); [EOL]     assertEquals("hllo", CharSetUtils.delete("hello", "a-e")); [EOL]     assertEquals("he", CharSetUtils.delete("hello", "l-p")); [EOL]     assertEquals("hello", CharSetUtils.delete("hello", "z")); [EOL] }
@Test [EOL] public void testDelete_StringString() { [EOL]     assertEquals(null, CharSetUtils.delete(null, (String) null)); [EOL]     assertEquals(null, CharSetUtils.delete(null, "")); [EOL]     assertEquals("", CharSetUtils.delete("", (String) null)); [EOL]     assertEquals("", CharSetUtils.delete("", "")); [EOL]     assertEquals("", CharSetUtils.delete("", "a-e")); [EOL]     assertEquals("hello", CharSetUtils.delete("hello", (String) null)); [EOL]     assertEquals("hello", CharSetUtils.delete("hello", "")); [EOL]     assertEquals("hllo", CharSetUtils.delete("hello", "a-e")); [EOL]     assertEquals("he", CharSetUtils.delete("hello", "l-p")); [EOL]     assertEquals("hello", CharSetUtils.delete("hello", "z")); [EOL] }
@Test [EOL] public void testDelete_StringString() { [EOL]     assertEquals(null, CharSetUtils.delete(null, (String) null)); [EOL]     assertEquals(null, CharSetUtils.delete(null, "")); [EOL]     assertEquals("", CharSetUtils.delete("", (String) null)); [EOL]     assertEquals("", CharSetUtils.delete("", "")); [EOL]     assertEquals("", CharSetUtils.delete("", "a-e")); [EOL]     assertEquals("hello", CharSetUtils.delete("hello", (String) null)); [EOL]     assertEquals("hello", CharSetUtils.delete("hello", "")); [EOL]     assertEquals("hllo", CharSetUtils.delete("hello", "a-e")); [EOL]     assertEquals("he", CharSetUtils.delete("hello", "l-p")); [EOL]     assertEquals("hello", CharSetUtils.delete("hello", "z")); [EOL] }
@Test [EOL] public void testDelete_StringString() { [EOL]     assertEquals(null, CharSetUtils.delete(null, (String) null)); [EOL]     assertEquals(null, CharSetUtils.delete(null, "")); [EOL]     assertEquals("", CharSetUtils.delete("", (String) null)); [EOL]     assertEquals("", CharSetUtils.delete("", "")); [EOL]     assertEquals("", CharSetUtils.delete("", "a-e")); [EOL]     assertEquals("hello", CharSetUtils.delete("hello", (String) null)); [EOL]     assertEquals("hello", CharSetUtils.delete("hello", "")); [EOL]     assertEquals("hllo", CharSetUtils.delete("hello", "a-e")); [EOL]     assertEquals("he", CharSetUtils.delete("hello", "l-p")); [EOL]     assertEquals("hello", CharSetUtils.delete("hello", "z")); [EOL] }
@Test [EOL] public void testGetFirstContextValue() { [EOL]     exceptionContext.addContextValue("test2", "different value"); [EOL]     assertTrue(exceptionContext.getFirstContextValue("test1") == null); [EOL]     assertTrue(exceptionContext.getFirstContextValue("test2").equals("some value")); [EOL]     assertTrue(exceptionContext.getFirstContextValue("crap") == null); [EOL]     exceptionContext.setContextValue("test2", "another"); [EOL]     assertTrue(exceptionContext.getFirstContextValue("test2").equals("another")); [EOL] }
@Test [EOL] public void testGetFirstContextValue() { [EOL]     exceptionContext.addContextValue("test2", "different value"); [EOL]     assertTrue(exceptionContext.getFirstContextValue("test1") == null); [EOL]     assertTrue(exceptionContext.getFirstContextValue("test2").equals("some value")); [EOL]     assertTrue(exceptionContext.getFirstContextValue("crap") == null); [EOL]     exceptionContext.setContextValue("test2", "another"); [EOL]     assertTrue(exceptionContext.getFirstContextValue("test2").equals("another")); [EOL] }
@Test [EOL] public void testGetMatchingAccessibleMethod() throws Exception { [EOL]     expectMatchingAccessibleConstructorParameterTypes(TestBean.class, ArrayUtils.EMPTY_CLASS_ARRAY, ArrayUtils.EMPTY_CLASS_ARRAY); [EOL]     expectMatchingAccessibleConstructorParameterTypes(TestBean.class, null, ArrayUtils.EMPTY_CLASS_ARRAY); [EOL]     expectMatchingAccessibleConstructorParameterTypes(TestBean.class, singletonArray(String.class), singletonArray(String.class)); [EOL]     expectMatchingAccessibleConstructorParameterTypes(TestBean.class, singletonArray(Object.class), singletonArray(Object.class)); [EOL]     expectMatchingAccessibleConstructorParameterTypes(TestBean.class, singletonArray(Boolean.class), singletonArray(Object.class)); [EOL]     expectMatchingAccessibleConstructorParameterTypes(TestBean.class, singletonArray(Byte.class), singletonArray(Integer.TYPE)); [EOL]     expectMatchingAccessibleConstructorParameterTypes(TestBean.class, singletonArray(Byte.TYPE), singletonArray(Integer.TYPE)); [EOL]     expectMatchingAccessibleConstructorParameterTypes(TestBean.class, singletonArray(Short.class), singletonArray(Integer.TYPE)); [EOL]     expectMatchingAccessibleConstructorParameterTypes(TestBean.class, singletonArray(Short.TYPE), singletonArray(Integer.TYPE)); [EOL]     expectMatchingAccessibleConstructorParameterTypes(TestBean.class, singletonArray(Character.class), singletonArray(Integer.TYPE)); [EOL]     expectMatchingAccessibleConstructorParameterTypes(TestBean.class, singletonArray(Character.TYPE), singletonArray(Integer.TYPE)); [EOL]     expectMatchingAccessibleConstructorParameterTypes(TestBean.class, singletonArray(Integer.class), singletonArray(Integer.class)); [EOL]     expectMatchingAccessibleConstructorParameterTypes(TestBean.class, singletonArray(Integer.TYPE), singletonArray(Integer.TYPE)); [EOL]     expectMatchingAccessibleConstructorParameterTypes(TestBean.class, singletonArray(Long.class), singletonArray(Double.TYPE)); [EOL]     expectMatchingAccessibleConstructorParameterTypes(TestBean.class, singletonArray(Long.TYPE), singletonArray(Double.TYPE)); [EOL]     expectMatchingAccessibleConstructorParameterTypes(TestBean.class, singletonArray(Float.class), singletonArray(Double.TYPE)); [EOL]     expectMatchingAccessibleConstructorParameterTypes(TestBean.class, singletonArray(Float.TYPE), singletonArray(Double.TYPE)); [EOL]     expectMatchingAccessibleConstructorParameterTypes(TestBean.class, singletonArray(Double.class), singletonArray(Double.TYPE)); [EOL]     expectMatchingAccessibleConstructorParameterTypes(TestBean.class, singletonArray(Double.TYPE), singletonArray(Double.TYPE)); [EOL] }
@Test [EOL] public void testContains_Char() { [EOL]     CharRange range = CharRange.is('c'); [EOL]     assertFalse(range.contains('b')); [EOL]     assertTrue(range.contains('c')); [EOL]     assertFalse(range.contains('d')); [EOL]     assertFalse(range.contains('e')); [EOL]     range = CharRange.isIn('c', 'd'); [EOL]     assertFalse(range.contains('b')); [EOL]     assertTrue(range.contains('c')); [EOL]     assertTrue(range.contains('d')); [EOL]     assertFalse(range.contains('e')); [EOL]     range = CharRange.isIn('d', 'c'); [EOL]     assertFalse(range.contains('b')); [EOL]     assertTrue(range.contains('c')); [EOL]     assertTrue(range.contains('d')); [EOL]     assertFalse(range.contains('e')); [EOL]     range = CharRange.isNotIn('c', 'd'); [EOL]     assertTrue(range.contains('b')); [EOL]     assertFalse(range.contains('c')); [EOL]     assertFalse(range.contains('d')); [EOL]     assertTrue(range.contains('e')); [EOL]     assertTrue(range.contains((char) 0)); [EOL]     assertTrue(range.contains(Character.MAX_VALUE)); [EOL] }
@Test [EOL] public void testContains_Char() { [EOL]     CharRange range = CharRange.is('c'); [EOL]     assertFalse(range.contains('b')); [EOL]     assertTrue(range.contains('c')); [EOL]     assertFalse(range.contains('d')); [EOL]     assertFalse(range.contains('e')); [EOL]     range = CharRange.isIn('c', 'd'); [EOL]     assertFalse(range.contains('b')); [EOL]     assertTrue(range.contains('c')); [EOL]     assertTrue(range.contains('d')); [EOL]     assertFalse(range.contains('e')); [EOL]     range = CharRange.isIn('d', 'c'); [EOL]     assertFalse(range.contains('b')); [EOL]     assertTrue(range.contains('c')); [EOL]     assertTrue(range.contains('d')); [EOL]     assertFalse(range.contains('e')); [EOL]     range = CharRange.isNotIn('c', 'd'); [EOL]     assertTrue(range.contains('b')); [EOL]     assertFalse(range.contains('c')); [EOL]     assertFalse(range.contains('d')); [EOL]     assertTrue(range.contains('e')); [EOL]     assertTrue(range.contains((char) 0)); [EOL]     assertTrue(range.contains(Character.MAX_VALUE)); [EOL] }
@Test [EOL] public void testContains_Char() { [EOL]     CharRange range = CharRange.is('c'); [EOL]     assertFalse(range.contains('b')); [EOL]     assertTrue(range.contains('c')); [EOL]     assertFalse(range.contains('d')); [EOL]     assertFalse(range.contains('e')); [EOL]     range = CharRange.isIn('c', 'd'); [EOL]     assertFalse(range.contains('b')); [EOL]     assertTrue(range.contains('c')); [EOL]     assertTrue(range.contains('d')); [EOL]     assertFalse(range.contains('e')); [EOL]     range = CharRange.isIn('d', 'c'); [EOL]     assertFalse(range.contains('b')); [EOL]     assertTrue(range.contains('c')); [EOL]     assertTrue(range.contains('d')); [EOL]     assertFalse(range.contains('e')); [EOL]     range = CharRange.isNotIn('c', 'd'); [EOL]     assertTrue(range.contains('b')); [EOL]     assertFalse(range.contains('c')); [EOL]     assertFalse(range.contains('d')); [EOL]     assertTrue(range.contains('e')); [EOL]     assertTrue(range.contains((char) 0)); [EOL]     assertTrue(range.contains(Character.MAX_VALUE)); [EOL] }
@Test [EOL] public void testContains_Char() { [EOL]     CharRange range = CharRange.is('c'); [EOL]     assertFalse(range.contains('b')); [EOL]     assertTrue(range.contains('c')); [EOL]     assertFalse(range.contains('d')); [EOL]     assertFalse(range.contains('e')); [EOL]     range = CharRange.isIn('c', 'd'); [EOL]     assertFalse(range.contains('b')); [EOL]     assertTrue(range.contains('c')); [EOL]     assertTrue(range.contains('d')); [EOL]     assertFalse(range.contains('e')); [EOL]     range = CharRange.isIn('d', 'c'); [EOL]     assertFalse(range.contains('b')); [EOL]     assertTrue(range.contains('c')); [EOL]     assertTrue(range.contains('d')); [EOL]     assertFalse(range.contains('e')); [EOL]     range = CharRange.isNotIn('c', 'd'); [EOL]     assertTrue(range.contains('b')); [EOL]     assertFalse(range.contains('c')); [EOL]     assertFalse(range.contains('d')); [EOL]     assertTrue(range.contains('e')); [EOL]     assertTrue(range.contains((char) 0)); [EOL]     assertTrue(range.contains(Character.MAX_VALUE)); [EOL] }
@Test [EOL] public void testContains_Char() { [EOL]     CharRange range = CharRange.is('c'); [EOL]     assertFalse(range.contains('b')); [EOL]     assertTrue(range.contains('c')); [EOL]     assertFalse(range.contains('d')); [EOL]     assertFalse(range.contains('e')); [EOL]     range = CharRange.isIn('c', 'd'); [EOL]     assertFalse(range.contains('b')); [EOL]     assertTrue(range.contains('c')); [EOL]     assertTrue(range.contains('d')); [EOL]     assertFalse(range.contains('e')); [EOL]     range = CharRange.isIn('d', 'c'); [EOL]     assertFalse(range.contains('b')); [EOL]     assertTrue(range.contains('c')); [EOL]     assertTrue(range.contains('d')); [EOL]     assertFalse(range.contains('e')); [EOL]     range = CharRange.isNotIn('c', 'd'); [EOL]     assertTrue(range.contains('b')); [EOL]     assertFalse(range.contains('c')); [EOL]     assertFalse(range.contains('d')); [EOL]     assertTrue(range.contains('e')); [EOL]     assertTrue(range.contains((char) 0)); [EOL]     assertTrue(range.contains(Character.MAX_VALUE)); [EOL] }
@Test [EOL] public void testContains_Char() { [EOL]     CharRange range = CharRange.is('c'); [EOL]     assertFalse(range.contains('b')); [EOL]     assertTrue(range.contains('c')); [EOL]     assertFalse(range.contains('d')); [EOL]     assertFalse(range.contains('e')); [EOL]     range = CharRange.isIn('c', 'd'); [EOL]     assertFalse(range.contains('b')); [EOL]     assertTrue(range.contains('c')); [EOL]     assertTrue(range.contains('d')); [EOL]     assertFalse(range.contains('e')); [EOL]     range = CharRange.isIn('d', 'c'); [EOL]     assertFalse(range.contains('b')); [EOL]     assertTrue(range.contains('c')); [EOL]     assertTrue(range.contains('d')); [EOL]     assertFalse(range.contains('e')); [EOL]     range = CharRange.isNotIn('c', 'd'); [EOL]     assertTrue(range.contains('b')); [EOL]     assertFalse(range.contains('c')); [EOL]     assertFalse(range.contains('d')); [EOL]     assertTrue(range.contains('e')); [EOL]     assertTrue(range.contains((char) 0)); [EOL]     assertTrue(range.contains(Character.MAX_VALUE)); [EOL] }
@Test [EOL] public void testContains_Char() { [EOL]     CharRange range = CharRange.is('c'); [EOL]     assertFalse(range.contains('b')); [EOL]     assertTrue(range.contains('c')); [EOL]     assertFalse(range.contains('d')); [EOL]     assertFalse(range.contains('e')); [EOL]     range = CharRange.isIn('c', 'd'); [EOL]     assertFalse(range.contains('b')); [EOL]     assertTrue(range.contains('c')); [EOL]     assertTrue(range.contains('d')); [EOL]     assertFalse(range.contains('e')); [EOL]     range = CharRange.isIn('d', 'c'); [EOL]     assertFalse(range.contains('b')); [EOL]     assertTrue(range.contains('c')); [EOL]     assertTrue(range.contains('d')); [EOL]     assertFalse(range.contains('e')); [EOL]     range = CharRange.isNotIn('c', 'd'); [EOL]     assertTrue(range.contains('b')); [EOL]     assertFalse(range.contains('c')); [EOL]     assertFalse(range.contains('d')); [EOL]     assertTrue(range.contains('e')); [EOL]     assertTrue(range.contains((char) 0)); [EOL]     assertTrue(range.contains(Character.MAX_VALUE)); [EOL] }
@Test [EOL] public void testSerialization() { [EOL]     CharRange range = CharRange.is('a'); [EOL]     assertEquals(range, SerializationUtils.clone(range)); [EOL]     range = CharRange.isIn('a', 'e'); [EOL]     assertEquals(range, SerializationUtils.clone(range)); [EOL]     range = CharRange.isNotIn('a', 'e'); [EOL]     assertEquals(range, SerializationUtils.clone(range)); [EOL] }
@Test [EOL] public void testSerialization() { [EOL]     CharRange range = CharRange.is('a'); [EOL]     assertEquals(range, SerializationUtils.clone(range)); [EOL]     range = CharRange.isIn('a', 'e'); [EOL]     assertEquals(range, SerializationUtils.clone(range)); [EOL]     range = CharRange.isNotIn('a', 'e'); [EOL]     assertEquals(range, SerializationUtils.clone(range)); [EOL] }
@Test [EOL] public void testSerialization() { [EOL]     CharRange range = CharRange.is('a'); [EOL]     assertEquals(range, SerializationUtils.clone(range)); [EOL]     range = CharRange.isIn('a', 'e'); [EOL]     assertEquals(range, SerializationUtils.clone(range)); [EOL]     range = CharRange.isNotIn('a', 'e'); [EOL]     assertEquals(range, SerializationUtils.clone(range)); [EOL] }
@Test [EOL] public void testSerialization() { [EOL]     CharRange range = CharRange.is('a'); [EOL]     assertEquals(range, SerializationUtils.clone(range)); [EOL]     range = CharRange.isIn('a', 'e'); [EOL]     assertEquals(range, SerializationUtils.clone(range)); [EOL]     range = CharRange.isNotIn('a', 'e'); [EOL]     assertEquals(range, SerializationUtils.clone(range)); [EOL] }
@Test [EOL] public void testSerialization() { [EOL]     CharRange range = CharRange.is('a'); [EOL]     assertEquals(range, SerializationUtils.clone(range)); [EOL]     range = CharRange.isIn('a', 'e'); [EOL]     assertEquals(range, SerializationUtils.clone(range)); [EOL]     range = CharRange.isNotIn('a', 'e'); [EOL]     assertEquals(range, SerializationUtils.clone(range)); [EOL] }
@Test [EOL] public void testHashCode() { [EOL]     final CharRange rangea = CharRange.is('a'); [EOL]     final CharRange rangeae = CharRange.isIn('a', 'e'); [EOL]     final CharRange rangenotbf = CharRange.isIn('b', 'f'); [EOL]     assertTrue(rangea.hashCode() == rangea.hashCode()); [EOL]     assertTrue(rangea.hashCode() == CharRange.is('a').hashCode()); [EOL]     assertTrue(rangeae.hashCode() == rangeae.hashCode()); [EOL]     assertTrue(rangeae.hashCode() == CharRange.isIn('a', 'e').hashCode()); [EOL]     assertTrue(rangenotbf.hashCode() == rangenotbf.hashCode()); [EOL]     assertTrue(rangenotbf.hashCode() == CharRange.isIn('b', 'f').hashCode()); [EOL]     assertFalse(rangea.hashCode() == rangeae.hashCode()); [EOL]     assertFalse(rangea.hashCode() == rangenotbf.hashCode()); [EOL]     assertFalse(rangeae.hashCode() == rangea.hashCode()); [EOL]     assertFalse(rangeae.hashCode() == rangenotbf.hashCode()); [EOL]     assertFalse(rangenotbf.hashCode() == rangea.hashCode()); [EOL]     assertFalse(rangenotbf.hashCode() == rangeae.hashCode()); [EOL] }
@Test [EOL] public void testHashCode() { [EOL]     final CharRange rangea = CharRange.is('a'); [EOL]     final CharRange rangeae = CharRange.isIn('a', 'e'); [EOL]     final CharRange rangenotbf = CharRange.isIn('b', 'f'); [EOL]     assertTrue(rangea.hashCode() == rangea.hashCode()); [EOL]     assertTrue(rangea.hashCode() == CharRange.is('a').hashCode()); [EOL]     assertTrue(rangeae.hashCode() == rangeae.hashCode()); [EOL]     assertTrue(rangeae.hashCode() == CharRange.isIn('a', 'e').hashCode()); [EOL]     assertTrue(rangenotbf.hashCode() == rangenotbf.hashCode()); [EOL]     assertTrue(rangenotbf.hashCode() == CharRange.isIn('b', 'f').hashCode()); [EOL]     assertFalse(rangea.hashCode() == rangeae.hashCode()); [EOL]     assertFalse(rangea.hashCode() == rangenotbf.hashCode()); [EOL]     assertFalse(rangeae.hashCode() == rangea.hashCode()); [EOL]     assertFalse(rangeae.hashCode() == rangenotbf.hashCode()); [EOL]     assertFalse(rangenotbf.hashCode() == rangea.hashCode()); [EOL]     assertFalse(rangenotbf.hashCode() == rangeae.hashCode()); [EOL] }
@Test [EOL] public void testHashCode() { [EOL]     final CharRange rangea = CharRange.is('a'); [EOL]     final CharRange rangeae = CharRange.isIn('a', 'e'); [EOL]     final CharRange rangenotbf = CharRange.isIn('b', 'f'); [EOL]     assertTrue(rangea.hashCode() == rangea.hashCode()); [EOL]     assertTrue(rangea.hashCode() == CharRange.is('a').hashCode()); [EOL]     assertTrue(rangeae.hashCode() == rangeae.hashCode()); [EOL]     assertTrue(rangeae.hashCode() == CharRange.isIn('a', 'e').hashCode()); [EOL]     assertTrue(rangenotbf.hashCode() == rangenotbf.hashCode()); [EOL]     assertTrue(rangenotbf.hashCode() == CharRange.isIn('b', 'f').hashCode()); [EOL]     assertFalse(rangea.hashCode() == rangeae.hashCode()); [EOL]     assertFalse(rangea.hashCode() == rangenotbf.hashCode()); [EOL]     assertFalse(rangeae.hashCode() == rangea.hashCode()); [EOL]     assertFalse(rangeae.hashCode() == rangenotbf.hashCode()); [EOL]     assertFalse(rangenotbf.hashCode() == rangea.hashCode()); [EOL]     assertFalse(rangenotbf.hashCode() == rangeae.hashCode()); [EOL] }
@Test [EOL] public void testConstructorAccessors_isNotIn_Normal() { [EOL]     final CharRange rangea = CharRange.isNotIn('a', 'e'); [EOL]     assertEquals('a', rangea.getStart()); [EOL]     assertEquals('e', rangea.getEnd()); [EOL]     assertTrue(rangea.isNegated()); [EOL]     assertEquals("^a-e", rangea.toString()); [EOL] }
@Test [EOL] public void testLang381() { [EOL]     assertEquals(1.2, IEEE754rUtils.min(1.2, 2.5, Double.NaN), 0.01); [EOL]     assertEquals(2.5, IEEE754rUtils.max(1.2, 2.5, Double.NaN), 0.01); [EOL]     assertTrue(Double.isNaN(IEEE754rUtils.max(Double.NaN, Double.NaN, Double.NaN))); [EOL]     assertEquals(1.2f, IEEE754rUtils.min(1.2f, 2.5f, Float.NaN), 0.01); [EOL]     assertEquals(2.5f, IEEE754rUtils.max(1.2f, 2.5f, Float.NaN), 0.01); [EOL]     assertTrue(Float.isNaN(IEEE754rUtils.max(Float.NaN, Float.NaN, Float.NaN))); [EOL]     final double[] a = new double[] { 1.2, Double.NaN, 3.7, 27.0, 42.0, Double.NaN }; [EOL]     assertEquals(42.0, IEEE754rUtils.max(a), 0.01); [EOL]     assertEquals(1.2, IEEE754rUtils.min(a), 0.01); [EOL]     final double[] b = new double[] { Double.NaN, 1.2, Double.NaN, 3.7, 27.0, 42.0, Double.NaN }; [EOL]     assertEquals(42.0, IEEE754rUtils.max(b), 0.01); [EOL]     assertEquals(1.2, IEEE754rUtils.min(b), 0.01); [EOL]     final float[] aF = new float[] { 1.2f, Float.NaN, 3.7f, 27.0f, 42.0f, Float.NaN }; [EOL]     assertEquals(1.2f, IEEE754rUtils.min(aF), 0.01); [EOL]     assertEquals(42.0f, IEEE754rUtils.max(aF), 0.01); [EOL]     final float[] bF = new float[] { Float.NaN, 1.2f, Float.NaN, 3.7f, 27.0f, 42.0f, Float.NaN }; [EOL]     assertEquals(1.2f, IEEE754rUtils.min(bF), 0.01); [EOL]     assertEquals(42.0f, IEEE754rUtils.max(bF), 0.01); [EOL] }
@Test [EOL] public void testLang381() { [EOL]     assertEquals(1.2, IEEE754rUtils.min(1.2, 2.5, Double.NaN), 0.01); [EOL]     assertEquals(2.5, IEEE754rUtils.max(1.2, 2.5, Double.NaN), 0.01); [EOL]     assertTrue(Double.isNaN(IEEE754rUtils.max(Double.NaN, Double.NaN, Double.NaN))); [EOL]     assertEquals(1.2f, IEEE754rUtils.min(1.2f, 2.5f, Float.NaN), 0.01); [EOL]     assertEquals(2.5f, IEEE754rUtils.max(1.2f, 2.5f, Float.NaN), 0.01); [EOL]     assertTrue(Float.isNaN(IEEE754rUtils.max(Float.NaN, Float.NaN, Float.NaN))); [EOL]     final double[] a = new double[] { 1.2, Double.NaN, 3.7, 27.0, 42.0, Double.NaN }; [EOL]     assertEquals(42.0, IEEE754rUtils.max(a), 0.01); [EOL]     assertEquals(1.2, IEEE754rUtils.min(a), 0.01); [EOL]     final double[] b = new double[] { Double.NaN, 1.2, Double.NaN, 3.7, 27.0, 42.0, Double.NaN }; [EOL]     assertEquals(42.0, IEEE754rUtils.max(b), 0.01); [EOL]     assertEquals(1.2, IEEE754rUtils.min(b), 0.01); [EOL]     final float[] aF = new float[] { 1.2f, Float.NaN, 3.7f, 27.0f, 42.0f, Float.NaN }; [EOL]     assertEquals(1.2f, IEEE754rUtils.min(aF), 0.01); [EOL]     assertEquals(42.0f, IEEE754rUtils.max(aF), 0.01); [EOL]     final float[] bF = new float[] { Float.NaN, 1.2f, Float.NaN, 3.7f, 27.0f, 42.0f, Float.NaN }; [EOL]     assertEquals(1.2f, IEEE754rUtils.min(bF), 0.01); [EOL]     assertEquals(42.0f, IEEE754rUtils.max(bF), 0.01); [EOL] }
@Test [EOL] public void testLang381() { [EOL]     assertEquals(1.2, IEEE754rUtils.min(1.2, 2.5, Double.NaN), 0.01); [EOL]     assertEquals(2.5, IEEE754rUtils.max(1.2, 2.5, Double.NaN), 0.01); [EOL]     assertTrue(Double.isNaN(IEEE754rUtils.max(Double.NaN, Double.NaN, Double.NaN))); [EOL]     assertEquals(1.2f, IEEE754rUtils.min(1.2f, 2.5f, Float.NaN), 0.01); [EOL]     assertEquals(2.5f, IEEE754rUtils.max(1.2f, 2.5f, Float.NaN), 0.01); [EOL]     assertTrue(Float.isNaN(IEEE754rUtils.max(Float.NaN, Float.NaN, Float.NaN))); [EOL]     final double[] a = new double[] { 1.2, Double.NaN, 3.7, 27.0, 42.0, Double.NaN }; [EOL]     assertEquals(42.0, IEEE754rUtils.max(a), 0.01); [EOL]     assertEquals(1.2, IEEE754rUtils.min(a), 0.01); [EOL]     final double[] b = new double[] { Double.NaN, 1.2, Double.NaN, 3.7, 27.0, 42.0, Double.NaN }; [EOL]     assertEquals(42.0, IEEE754rUtils.max(b), 0.01); [EOL]     assertEquals(1.2, IEEE754rUtils.min(b), 0.01); [EOL]     final float[] aF = new float[] { 1.2f, Float.NaN, 3.7f, 27.0f, 42.0f, Float.NaN }; [EOL]     assertEquals(1.2f, IEEE754rUtils.min(aF), 0.01); [EOL]     assertEquals(42.0f, IEEE754rUtils.max(aF), 0.01); [EOL]     final float[] bF = new float[] { Float.NaN, 1.2f, Float.NaN, 3.7f, 27.0f, 42.0f, Float.NaN }; [EOL]     assertEquals(1.2f, IEEE754rUtils.min(bF), 0.01); [EOL]     assertEquals(42.0f, IEEE754rUtils.max(bF), 0.01); [EOL] }
@Test [EOL] public void testLang381() { [EOL]     assertEquals(1.2, IEEE754rUtils.min(1.2, 2.5, Double.NaN), 0.01); [EOL]     assertEquals(2.5, IEEE754rUtils.max(1.2, 2.5, Double.NaN), 0.01); [EOL]     assertTrue(Double.isNaN(IEEE754rUtils.max(Double.NaN, Double.NaN, Double.NaN))); [EOL]     assertEquals(1.2f, IEEE754rUtils.min(1.2f, 2.5f, Float.NaN), 0.01); [EOL]     assertEquals(2.5f, IEEE754rUtils.max(1.2f, 2.5f, Float.NaN), 0.01); [EOL]     assertTrue(Float.isNaN(IEEE754rUtils.max(Float.NaN, Float.NaN, Float.NaN))); [EOL]     final double[] a = new double[] { 1.2, Double.NaN, 3.7, 27.0, 42.0, Double.NaN }; [EOL]     assertEquals(42.0, IEEE754rUtils.max(a), 0.01); [EOL]     assertEquals(1.2, IEEE754rUtils.min(a), 0.01); [EOL]     final double[] b = new double[] { Double.NaN, 1.2, Double.NaN, 3.7, 27.0, 42.0, Double.NaN }; [EOL]     assertEquals(42.0, IEEE754rUtils.max(b), 0.01); [EOL]     assertEquals(1.2, IEEE754rUtils.min(b), 0.01); [EOL]     final float[] aF = new float[] { 1.2f, Float.NaN, 3.7f, 27.0f, 42.0f, Float.NaN }; [EOL]     assertEquals(1.2f, IEEE754rUtils.min(aF), 0.01); [EOL]     assertEquals(42.0f, IEEE754rUtils.max(aF), 0.01); [EOL]     final float[] bF = new float[] { Float.NaN, 1.2f, Float.NaN, 3.7f, 27.0f, 42.0f, Float.NaN }; [EOL]     assertEquals(1.2f, IEEE754rUtils.min(bF), 0.01); [EOL]     assertEquals(42.0f, IEEE754rUtils.max(bF), 0.01); [EOL] }
@Test [EOL] public void testLang381() { [EOL]     assertEquals(1.2, IEEE754rUtils.min(1.2, 2.5, Double.NaN), 0.01); [EOL]     assertEquals(2.5, IEEE754rUtils.max(1.2, 2.5, Double.NaN), 0.01); [EOL]     assertTrue(Double.isNaN(IEEE754rUtils.max(Double.NaN, Double.NaN, Double.NaN))); [EOL]     assertEquals(1.2f, IEEE754rUtils.min(1.2f, 2.5f, Float.NaN), 0.01); [EOL]     assertEquals(2.5f, IEEE754rUtils.max(1.2f, 2.5f, Float.NaN), 0.01); [EOL]     assertTrue(Float.isNaN(IEEE754rUtils.max(Float.NaN, Float.NaN, Float.NaN))); [EOL]     final double[] a = new double[] { 1.2, Double.NaN, 3.7, 27.0, 42.0, Double.NaN }; [EOL]     assertEquals(42.0, IEEE754rUtils.max(a), 0.01); [EOL]     assertEquals(1.2, IEEE754rUtils.min(a), 0.01); [EOL]     final double[] b = new double[] { Double.NaN, 1.2, Double.NaN, 3.7, 27.0, 42.0, Double.NaN }; [EOL]     assertEquals(42.0, IEEE754rUtils.max(b), 0.01); [EOL]     assertEquals(1.2, IEEE754rUtils.min(b), 0.01); [EOL]     final float[] aF = new float[] { 1.2f, Float.NaN, 3.7f, 27.0f, 42.0f, Float.NaN }; [EOL]     assertEquals(1.2f, IEEE754rUtils.min(aF), 0.01); [EOL]     assertEquals(42.0f, IEEE754rUtils.max(aF), 0.01); [EOL]     final float[] bF = new float[] { Float.NaN, 1.2f, Float.NaN, 3.7f, 27.0f, 42.0f, Float.NaN }; [EOL]     assertEquals(1.2f, IEEE754rUtils.min(bF), 0.01); [EOL]     assertEquals(42.0f, IEEE754rUtils.max(bF), 0.01); [EOL] }
@Test [EOL] public void testLang381() { [EOL]     assertEquals(1.2, IEEE754rUtils.min(1.2, 2.5, Double.NaN), 0.01); [EOL]     assertEquals(2.5, IEEE754rUtils.max(1.2, 2.5, Double.NaN), 0.01); [EOL]     assertTrue(Double.isNaN(IEEE754rUtils.max(Double.NaN, Double.NaN, Double.NaN))); [EOL]     assertEquals(1.2f, IEEE754rUtils.min(1.2f, 2.5f, Float.NaN), 0.01); [EOL]     assertEquals(2.5f, IEEE754rUtils.max(1.2f, 2.5f, Float.NaN), 0.01); [EOL]     assertTrue(Float.isNaN(IEEE754rUtils.max(Float.NaN, Float.NaN, Float.NaN))); [EOL]     final double[] a = new double[] { 1.2, Double.NaN, 3.7, 27.0, 42.0, Double.NaN }; [EOL]     assertEquals(42.0, IEEE754rUtils.max(a), 0.01); [EOL]     assertEquals(1.2, IEEE754rUtils.min(a), 0.01); [EOL]     final double[] b = new double[] { Double.NaN, 1.2, Double.NaN, 3.7, 27.0, 42.0, Double.NaN }; [EOL]     assertEquals(42.0, IEEE754rUtils.max(b), 0.01); [EOL]     assertEquals(1.2, IEEE754rUtils.min(b), 0.01); [EOL]     final float[] aF = new float[] { 1.2f, Float.NaN, 3.7f, 27.0f, 42.0f, Float.NaN }; [EOL]     assertEquals(1.2f, IEEE754rUtils.min(aF), 0.01); [EOL]     assertEquals(42.0f, IEEE754rUtils.max(aF), 0.01); [EOL]     final float[] bF = new float[] { Float.NaN, 1.2f, Float.NaN, 3.7f, 27.0f, 42.0f, Float.NaN }; [EOL]     assertEquals(1.2f, IEEE754rUtils.min(bF), 0.01); [EOL]     assertEquals(42.0f, IEEE754rUtils.max(bF), 0.01); [EOL] }
@Test [EOL] public void testLang381() { [EOL]     assertEquals(1.2, IEEE754rUtils.min(1.2, 2.5, Double.NaN), 0.01); [EOL]     assertEquals(2.5, IEEE754rUtils.max(1.2, 2.5, Double.NaN), 0.01); [EOL]     assertTrue(Double.isNaN(IEEE754rUtils.max(Double.NaN, Double.NaN, Double.NaN))); [EOL]     assertEquals(1.2f, IEEE754rUtils.min(1.2f, 2.5f, Float.NaN), 0.01); [EOL]     assertEquals(2.5f, IEEE754rUtils.max(1.2f, 2.5f, Float.NaN), 0.01); [EOL]     assertTrue(Float.isNaN(IEEE754rUtils.max(Float.NaN, Float.NaN, Float.NaN))); [EOL]     final double[] a = new double[] { 1.2, Double.NaN, 3.7, 27.0, 42.0, Double.NaN }; [EOL]     assertEquals(42.0, IEEE754rUtils.max(a), 0.01); [EOL]     assertEquals(1.2, IEEE754rUtils.min(a), 0.01); [EOL]     final double[] b = new double[] { Double.NaN, 1.2, Double.NaN, 3.7, 27.0, 42.0, Double.NaN }; [EOL]     assertEquals(42.0, IEEE754rUtils.max(b), 0.01); [EOL]     assertEquals(1.2, IEEE754rUtils.min(b), 0.01); [EOL]     final float[] aF = new float[] { 1.2f, Float.NaN, 3.7f, 27.0f, 42.0f, Float.NaN }; [EOL]     assertEquals(1.2f, IEEE754rUtils.min(aF), 0.01); [EOL]     assertEquals(42.0f, IEEE754rUtils.max(aF), 0.01); [EOL]     final float[] bF = new float[] { Float.NaN, 1.2f, Float.NaN, 3.7f, 27.0f, 42.0f, Float.NaN }; [EOL]     assertEquals(1.2f, IEEE754rUtils.min(bF), 0.01); [EOL]     assertEquals(42.0f, IEEE754rUtils.max(bF), 0.01); [EOL] }
@Test [EOL] public void testLang381() { [EOL]     assertEquals(1.2, IEEE754rUtils.min(1.2, 2.5, Double.NaN), 0.01); [EOL]     assertEquals(2.5, IEEE754rUtils.max(1.2, 2.5, Double.NaN), 0.01); [EOL]     assertTrue(Double.isNaN(IEEE754rUtils.max(Double.NaN, Double.NaN, Double.NaN))); [EOL]     assertEquals(1.2f, IEEE754rUtils.min(1.2f, 2.5f, Float.NaN), 0.01); [EOL]     assertEquals(2.5f, IEEE754rUtils.max(1.2f, 2.5f, Float.NaN), 0.01); [EOL]     assertTrue(Float.isNaN(IEEE754rUtils.max(Float.NaN, Float.NaN, Float.NaN))); [EOL]     final double[] a = new double[] { 1.2, Double.NaN, 3.7, 27.0, 42.0, Double.NaN }; [EOL]     assertEquals(42.0, IEEE754rUtils.max(a), 0.01); [EOL]     assertEquals(1.2, IEEE754rUtils.min(a), 0.01); [EOL]     final double[] b = new double[] { Double.NaN, 1.2, Double.NaN, 3.7, 27.0, 42.0, Double.NaN }; [EOL]     assertEquals(42.0, IEEE754rUtils.max(b), 0.01); [EOL]     assertEquals(1.2, IEEE754rUtils.min(b), 0.01); [EOL]     final float[] aF = new float[] { 1.2f, Float.NaN, 3.7f, 27.0f, 42.0f, Float.NaN }; [EOL]     assertEquals(1.2f, IEEE754rUtils.min(aF), 0.01); [EOL]     assertEquals(42.0f, IEEE754rUtils.max(aF), 0.01); [EOL]     final float[] bF = new float[] { Float.NaN, 1.2f, Float.NaN, 3.7f, 27.0f, 42.0f, Float.NaN }; [EOL]     assertEquals(1.2f, IEEE754rUtils.min(bF), 0.01); [EOL]     assertEquals(42.0f, IEEE754rUtils.max(bF), 0.01); [EOL] }
@Test [EOL] public void testLang381() { [EOL]     assertEquals(1.2, IEEE754rUtils.min(1.2, 2.5, Double.NaN), 0.01); [EOL]     assertEquals(2.5, IEEE754rUtils.max(1.2, 2.5, Double.NaN), 0.01); [EOL]     assertTrue(Double.isNaN(IEEE754rUtils.max(Double.NaN, Double.NaN, Double.NaN))); [EOL]     assertEquals(1.2f, IEEE754rUtils.min(1.2f, 2.5f, Float.NaN), 0.01); [EOL]     assertEquals(2.5f, IEEE754rUtils.max(1.2f, 2.5f, Float.NaN), 0.01); [EOL]     assertTrue(Float.isNaN(IEEE754rUtils.max(Float.NaN, Float.NaN, Float.NaN))); [EOL]     final double[] a = new double[] { 1.2, Double.NaN, 3.7, 27.0, 42.0, Double.NaN }; [EOL]     assertEquals(42.0, IEEE754rUtils.max(a), 0.01); [EOL]     assertEquals(1.2, IEEE754rUtils.min(a), 0.01); [EOL]     final double[] b = new double[] { Double.NaN, 1.2, Double.NaN, 3.7, 27.0, 42.0, Double.NaN }; [EOL]     assertEquals(42.0, IEEE754rUtils.max(b), 0.01); [EOL]     assertEquals(1.2, IEEE754rUtils.min(b), 0.01); [EOL]     final float[] aF = new float[] { 1.2f, Float.NaN, 3.7f, 27.0f, 42.0f, Float.NaN }; [EOL]     assertEquals(1.2f, IEEE754rUtils.min(aF), 0.01); [EOL]     assertEquals(42.0f, IEEE754rUtils.max(aF), 0.01); [EOL]     final float[] bF = new float[] { Float.NaN, 1.2f, Float.NaN, 3.7f, 27.0f, 42.0f, Float.NaN }; [EOL]     assertEquals(1.2f, IEEE754rUtils.min(bF), 0.01); [EOL]     assertEquals(42.0f, IEEE754rUtils.max(bF), 0.01); [EOL] }
@Test [EOL] public void testLang381() { [EOL]     assertEquals(1.2, IEEE754rUtils.min(1.2, 2.5, Double.NaN), 0.01); [EOL]     assertEquals(2.5, IEEE754rUtils.max(1.2, 2.5, Double.NaN), 0.01); [EOL]     assertTrue(Double.isNaN(IEEE754rUtils.max(Double.NaN, Double.NaN, Double.NaN))); [EOL]     assertEquals(1.2f, IEEE754rUtils.min(1.2f, 2.5f, Float.NaN), 0.01); [EOL]     assertEquals(2.5f, IEEE754rUtils.max(1.2f, 2.5f, Float.NaN), 0.01); [EOL]     assertTrue(Float.isNaN(IEEE754rUtils.max(Float.NaN, Float.NaN, Float.NaN))); [EOL]     final double[] a = new double[] { 1.2, Double.NaN, 3.7, 27.0, 42.0, Double.NaN }; [EOL]     assertEquals(42.0, IEEE754rUtils.max(a), 0.01); [EOL]     assertEquals(1.2, IEEE754rUtils.min(a), 0.01); [EOL]     final double[] b = new double[] { Double.NaN, 1.2, Double.NaN, 3.7, 27.0, 42.0, Double.NaN }; [EOL]     assertEquals(42.0, IEEE754rUtils.max(b), 0.01); [EOL]     assertEquals(1.2, IEEE754rUtils.min(b), 0.01); [EOL]     final float[] aF = new float[] { 1.2f, Float.NaN, 3.7f, 27.0f, 42.0f, Float.NaN }; [EOL]     assertEquals(1.2f, IEEE754rUtils.min(aF), 0.01); [EOL]     assertEquals(42.0f, IEEE754rUtils.max(aF), 0.01); [EOL]     final float[] bF = new float[] { Float.NaN, 1.2f, Float.NaN, 3.7f, 27.0f, 42.0f, Float.NaN }; [EOL]     assertEquals(1.2f, IEEE754rUtils.min(bF), 0.01); [EOL]     assertEquals(42.0f, IEEE754rUtils.max(bF), 0.01); [EOL] }
@Test [EOL] public void testLang381() { [EOL]     assertEquals(1.2, IEEE754rUtils.min(1.2, 2.5, Double.NaN), 0.01); [EOL]     assertEquals(2.5, IEEE754rUtils.max(1.2, 2.5, Double.NaN), 0.01); [EOL]     assertTrue(Double.isNaN(IEEE754rUtils.max(Double.NaN, Double.NaN, Double.NaN))); [EOL]     assertEquals(1.2f, IEEE754rUtils.min(1.2f, 2.5f, Float.NaN), 0.01); [EOL]     assertEquals(2.5f, IEEE754rUtils.max(1.2f, 2.5f, Float.NaN), 0.01); [EOL]     assertTrue(Float.isNaN(IEEE754rUtils.max(Float.NaN, Float.NaN, Float.NaN))); [EOL]     final double[] a = new double[] { 1.2, Double.NaN, 3.7, 27.0, 42.0, Double.NaN }; [EOL]     assertEquals(42.0, IEEE754rUtils.max(a), 0.01); [EOL]     assertEquals(1.2, IEEE754rUtils.min(a), 0.01); [EOL]     final double[] b = new double[] { Double.NaN, 1.2, Double.NaN, 3.7, 27.0, 42.0, Double.NaN }; [EOL]     assertEquals(42.0, IEEE754rUtils.max(b), 0.01); [EOL]     assertEquals(1.2, IEEE754rUtils.min(b), 0.01); [EOL]     final float[] aF = new float[] { 1.2f, Float.NaN, 3.7f, 27.0f, 42.0f, Float.NaN }; [EOL]     assertEquals(1.2f, IEEE754rUtils.min(aF), 0.01); [EOL]     assertEquals(42.0f, IEEE754rUtils.max(aF), 0.01); [EOL]     final float[] bF = new float[] { Float.NaN, 1.2f, Float.NaN, 3.7f, 27.0f, 42.0f, Float.NaN }; [EOL]     assertEquals(1.2f, IEEE754rUtils.min(bF), 0.01); [EOL]     assertEquals(42.0f, IEEE754rUtils.max(bF), 0.01); [EOL] }
@Test [EOL] public void testLang381() { [EOL]     assertEquals(1.2, IEEE754rUtils.min(1.2, 2.5, Double.NaN), 0.01); [EOL]     assertEquals(2.5, IEEE754rUtils.max(1.2, 2.5, Double.NaN), 0.01); [EOL]     assertTrue(Double.isNaN(IEEE754rUtils.max(Double.NaN, Double.NaN, Double.NaN))); [EOL]     assertEquals(1.2f, IEEE754rUtils.min(1.2f, 2.5f, Float.NaN), 0.01); [EOL]     assertEquals(2.5f, IEEE754rUtils.max(1.2f, 2.5f, Float.NaN), 0.01); [EOL]     assertTrue(Float.isNaN(IEEE754rUtils.max(Float.NaN, Float.NaN, Float.NaN))); [EOL]     final double[] a = new double[] { 1.2, Double.NaN, 3.7, 27.0, 42.0, Double.NaN }; [EOL]     assertEquals(42.0, IEEE754rUtils.max(a), 0.01); [EOL]     assertEquals(1.2, IEEE754rUtils.min(a), 0.01); [EOL]     final double[] b = new double[] { Double.NaN, 1.2, Double.NaN, 3.7, 27.0, 42.0, Double.NaN }; [EOL]     assertEquals(42.0, IEEE754rUtils.max(b), 0.01); [EOL]     assertEquals(1.2, IEEE754rUtils.min(b), 0.01); [EOL]     final float[] aF = new float[] { 1.2f, Float.NaN, 3.7f, 27.0f, 42.0f, Float.NaN }; [EOL]     assertEquals(1.2f, IEEE754rUtils.min(aF), 0.01); [EOL]     assertEquals(42.0f, IEEE754rUtils.max(aF), 0.01); [EOL]     final float[] bF = new float[] { Float.NaN, 1.2f, Float.NaN, 3.7f, 27.0f, 42.0f, Float.NaN }; [EOL]     assertEquals(1.2f, IEEE754rUtils.min(bF), 0.01); [EOL]     assertEquals(42.0f, IEEE754rUtils.max(bF), 0.01); [EOL] }
@Test [EOL] public void testLang381() { [EOL]     assertEquals(1.2, IEEE754rUtils.min(1.2, 2.5, Double.NaN), 0.01); [EOL]     assertEquals(2.5, IEEE754rUtils.max(1.2, 2.5, Double.NaN), 0.01); [EOL]     assertTrue(Double.isNaN(IEEE754rUtils.max(Double.NaN, Double.NaN, Double.NaN))); [EOL]     assertEquals(1.2f, IEEE754rUtils.min(1.2f, 2.5f, Float.NaN), 0.01); [EOL]     assertEquals(2.5f, IEEE754rUtils.max(1.2f, 2.5f, Float.NaN), 0.01); [EOL]     assertTrue(Float.isNaN(IEEE754rUtils.max(Float.NaN, Float.NaN, Float.NaN))); [EOL]     final double[] a = new double[] { 1.2, Double.NaN, 3.7, 27.0, 42.0, Double.NaN }; [EOL]     assertEquals(42.0, IEEE754rUtils.max(a), 0.01); [EOL]     assertEquals(1.2, IEEE754rUtils.min(a), 0.01); [EOL]     final double[] b = new double[] { Double.NaN, 1.2, Double.NaN, 3.7, 27.0, 42.0, Double.NaN }; [EOL]     assertEquals(42.0, IEEE754rUtils.max(b), 0.01); [EOL]     assertEquals(1.2, IEEE754rUtils.min(b), 0.01); [EOL]     final float[] aF = new float[] { 1.2f, Float.NaN, 3.7f, 27.0f, 42.0f, Float.NaN }; [EOL]     assertEquals(1.2f, IEEE754rUtils.min(aF), 0.01); [EOL]     assertEquals(42.0f, IEEE754rUtils.max(aF), 0.01); [EOL]     final float[] bF = new float[] { Float.NaN, 1.2f, Float.NaN, 3.7f, 27.0f, 42.0f, Float.NaN }; [EOL]     assertEquals(1.2f, IEEE754rUtils.min(bF), 0.01); [EOL]     assertEquals(42.0f, IEEE754rUtils.max(bF), 0.01); [EOL] }
@Test [EOL] public void testLang381() { [EOL]     assertEquals(1.2, IEEE754rUtils.min(1.2, 2.5, Double.NaN), 0.01); [EOL]     assertEquals(2.5, IEEE754rUtils.max(1.2, 2.5, Double.NaN), 0.01); [EOL]     assertTrue(Double.isNaN(IEEE754rUtils.max(Double.NaN, Double.NaN, Double.NaN))); [EOL]     assertEquals(1.2f, IEEE754rUtils.min(1.2f, 2.5f, Float.NaN), 0.01); [EOL]     assertEquals(2.5f, IEEE754rUtils.max(1.2f, 2.5f, Float.NaN), 0.01); [EOL]     assertTrue(Float.isNaN(IEEE754rUtils.max(Float.NaN, Float.NaN, Float.NaN))); [EOL]     final double[] a = new double[] { 1.2, Double.NaN, 3.7, 27.0, 42.0, Double.NaN }; [EOL]     assertEquals(42.0, IEEE754rUtils.max(a), 0.01); [EOL]     assertEquals(1.2, IEEE754rUtils.min(a), 0.01); [EOL]     final double[] b = new double[] { Double.NaN, 1.2, Double.NaN, 3.7, 27.0, 42.0, Double.NaN }; [EOL]     assertEquals(42.0, IEEE754rUtils.max(b), 0.01); [EOL]     assertEquals(1.2, IEEE754rUtils.min(b), 0.01); [EOL]     final float[] aF = new float[] { 1.2f, Float.NaN, 3.7f, 27.0f, 42.0f, Float.NaN }; [EOL]     assertEquals(1.2f, IEEE754rUtils.min(aF), 0.01); [EOL]     assertEquals(42.0f, IEEE754rUtils.max(aF), 0.01); [EOL]     final float[] bF = new float[] { Float.NaN, 1.2f, Float.NaN, 3.7f, 27.0f, 42.0f, Float.NaN }; [EOL]     assertEquals(1.2f, IEEE754rUtils.min(bF), 0.01); [EOL]     assertEquals(42.0f, IEEE754rUtils.max(bF), 0.01); [EOL] }
@Test [EOL] public void testLang381() { [EOL]     assertEquals(1.2, IEEE754rUtils.min(1.2, 2.5, Double.NaN), 0.01); [EOL]     assertEquals(2.5, IEEE754rUtils.max(1.2, 2.5, Double.NaN), 0.01); [EOL]     assertTrue(Double.isNaN(IEEE754rUtils.max(Double.NaN, Double.NaN, Double.NaN))); [EOL]     assertEquals(1.2f, IEEE754rUtils.min(1.2f, 2.5f, Float.NaN), 0.01); [EOL]     assertEquals(2.5f, IEEE754rUtils.max(1.2f, 2.5f, Float.NaN), 0.01); [EOL]     assertTrue(Float.isNaN(IEEE754rUtils.max(Float.NaN, Float.NaN, Float.NaN))); [EOL]     final double[] a = new double[] { 1.2, Double.NaN, 3.7, 27.0, 42.0, Double.NaN }; [EOL]     assertEquals(42.0, IEEE754rUtils.max(a), 0.01); [EOL]     assertEquals(1.2, IEEE754rUtils.min(a), 0.01); [EOL]     final double[] b = new double[] { Double.NaN, 1.2, Double.NaN, 3.7, 27.0, 42.0, Double.NaN }; [EOL]     assertEquals(42.0, IEEE754rUtils.max(b), 0.01); [EOL]     assertEquals(1.2, IEEE754rUtils.min(b), 0.01); [EOL]     final float[] aF = new float[] { 1.2f, Float.NaN, 3.7f, 27.0f, 42.0f, Float.NaN }; [EOL]     assertEquals(1.2f, IEEE754rUtils.min(aF), 0.01); [EOL]     assertEquals(42.0f, IEEE754rUtils.max(aF), 0.01); [EOL]     final float[] bF = new float[] { Float.NaN, 1.2f, Float.NaN, 3.7f, 27.0f, 42.0f, Float.NaN }; [EOL]     assertEquals(1.2f, IEEE754rUtils.min(bF), 0.01); [EOL]     assertEquals(42.0f, IEEE754rUtils.max(bF), 0.01); [EOL] }
@Test [EOL] public void testLang381() { [EOL]     assertEquals(1.2, IEEE754rUtils.min(1.2, 2.5, Double.NaN), 0.01); [EOL]     assertEquals(2.5, IEEE754rUtils.max(1.2, 2.5, Double.NaN), 0.01); [EOL]     assertTrue(Double.isNaN(IEEE754rUtils.max(Double.NaN, Double.NaN, Double.NaN))); [EOL]     assertEquals(1.2f, IEEE754rUtils.min(1.2f, 2.5f, Float.NaN), 0.01); [EOL]     assertEquals(2.5f, IEEE754rUtils.max(1.2f, 2.5f, Float.NaN), 0.01); [EOL]     assertTrue(Float.isNaN(IEEE754rUtils.max(Float.NaN, Float.NaN, Float.NaN))); [EOL]     final double[] a = new double[] { 1.2, Double.NaN, 3.7, 27.0, 42.0, Double.NaN }; [EOL]     assertEquals(42.0, IEEE754rUtils.max(a), 0.01); [EOL]     assertEquals(1.2, IEEE754rUtils.min(a), 0.01); [EOL]     final double[] b = new double[] { Double.NaN, 1.2, Double.NaN, 3.7, 27.0, 42.0, Double.NaN }; [EOL]     assertEquals(42.0, IEEE754rUtils.max(b), 0.01); [EOL]     assertEquals(1.2, IEEE754rUtils.min(b), 0.01); [EOL]     final float[] aF = new float[] { 1.2f, Float.NaN, 3.7f, 27.0f, 42.0f, Float.NaN }; [EOL]     assertEquals(1.2f, IEEE754rUtils.min(aF), 0.01); [EOL]     assertEquals(42.0f, IEEE754rUtils.max(aF), 0.01); [EOL]     final float[] bF = new float[] { Float.NaN, 1.2f, Float.NaN, 3.7f, 27.0f, 42.0f, Float.NaN }; [EOL]     assertEquals(1.2f, IEEE754rUtils.min(bF), 0.01); [EOL]     assertEquals(42.0f, IEEE754rUtils.max(bF), 0.01); [EOL] }
@Test [EOL] public void testLang381() { [EOL]     assertEquals(1.2, IEEE754rUtils.min(1.2, 2.5, Double.NaN), 0.01); [EOL]     assertEquals(2.5, IEEE754rUtils.max(1.2, 2.5, Double.NaN), 0.01); [EOL]     assertTrue(Double.isNaN(IEEE754rUtils.max(Double.NaN, Double.NaN, Double.NaN))); [EOL]     assertEquals(1.2f, IEEE754rUtils.min(1.2f, 2.5f, Float.NaN), 0.01); [EOL]     assertEquals(2.5f, IEEE754rUtils.max(1.2f, 2.5f, Float.NaN), 0.01); [EOL]     assertTrue(Float.isNaN(IEEE754rUtils.max(Float.NaN, Float.NaN, Float.NaN))); [EOL]     final double[] a = new double[] { 1.2, Double.NaN, 3.7, 27.0, 42.0, Double.NaN }; [EOL]     assertEquals(42.0, IEEE754rUtils.max(a), 0.01); [EOL]     assertEquals(1.2, IEEE754rUtils.min(a), 0.01); [EOL]     final double[] b = new double[] { Double.NaN, 1.2, Double.NaN, 3.7, 27.0, 42.0, Double.NaN }; [EOL]     assertEquals(42.0, IEEE754rUtils.max(b), 0.01); [EOL]     assertEquals(1.2, IEEE754rUtils.min(b), 0.01); [EOL]     final float[] aF = new float[] { 1.2f, Float.NaN, 3.7f, 27.0f, 42.0f, Float.NaN }; [EOL]     assertEquals(1.2f, IEEE754rUtils.min(aF), 0.01); [EOL]     assertEquals(42.0f, IEEE754rUtils.max(aF), 0.01); [EOL]     final float[] bF = new float[] { Float.NaN, 1.2f, Float.NaN, 3.7f, 27.0f, 42.0f, Float.NaN }; [EOL]     assertEquals(1.2f, IEEE754rUtils.min(bF), 0.01); [EOL]     assertEquals(42.0f, IEEE754rUtils.max(bF), 0.01); [EOL] }
@Test [EOL] public void testLang381() { [EOL]     assertEquals(1.2, IEEE754rUtils.min(1.2, 2.5, Double.NaN), 0.01); [EOL]     assertEquals(2.5, IEEE754rUtils.max(1.2, 2.5, Double.NaN), 0.01); [EOL]     assertTrue(Double.isNaN(IEEE754rUtils.max(Double.NaN, Double.NaN, Double.NaN))); [EOL]     assertEquals(1.2f, IEEE754rUtils.min(1.2f, 2.5f, Float.NaN), 0.01); [EOL]     assertEquals(2.5f, IEEE754rUtils.max(1.2f, 2.5f, Float.NaN), 0.01); [EOL]     assertTrue(Float.isNaN(IEEE754rUtils.max(Float.NaN, Float.NaN, Float.NaN))); [EOL]     final double[] a = new double[] { 1.2, Double.NaN, 3.7, 27.0, 42.0, Double.NaN }; [EOL]     assertEquals(42.0, IEEE754rUtils.max(a), 0.01); [EOL]     assertEquals(1.2, IEEE754rUtils.min(a), 0.01); [EOL]     final double[] b = new double[] { Double.NaN, 1.2, Double.NaN, 3.7, 27.0, 42.0, Double.NaN }; [EOL]     assertEquals(42.0, IEEE754rUtils.max(b), 0.01); [EOL]     assertEquals(1.2, IEEE754rUtils.min(b), 0.01); [EOL]     final float[] aF = new float[] { 1.2f, Float.NaN, 3.7f, 27.0f, 42.0f, Float.NaN }; [EOL]     assertEquals(1.2f, IEEE754rUtils.min(aF), 0.01); [EOL]     assertEquals(42.0f, IEEE754rUtils.max(aF), 0.01); [EOL]     final float[] bF = new float[] { Float.NaN, 1.2f, Float.NaN, 3.7f, 27.0f, 42.0f, Float.NaN }; [EOL]     assertEquals(1.2f, IEEE754rUtils.min(bF), 0.01); [EOL]     assertEquals(42.0f, IEEE754rUtils.max(bF), 0.01); [EOL] }
@Test [EOL] public void testLang381() { [EOL]     assertEquals(1.2, IEEE754rUtils.min(1.2, 2.5, Double.NaN), 0.01); [EOL]     assertEquals(2.5, IEEE754rUtils.max(1.2, 2.5, Double.NaN), 0.01); [EOL]     assertTrue(Double.isNaN(IEEE754rUtils.max(Double.NaN, Double.NaN, Double.NaN))); [EOL]     assertEquals(1.2f, IEEE754rUtils.min(1.2f, 2.5f, Float.NaN), 0.01); [EOL]     assertEquals(2.5f, IEEE754rUtils.max(1.2f, 2.5f, Float.NaN), 0.01); [EOL]     assertTrue(Float.isNaN(IEEE754rUtils.max(Float.NaN, Float.NaN, Float.NaN))); [EOL]     final double[] a = new double[] { 1.2, Double.NaN, 3.7, 27.0, 42.0, Double.NaN }; [EOL]     assertEquals(42.0, IEEE754rUtils.max(a), 0.01); [EOL]     assertEquals(1.2, IEEE754rUtils.min(a), 0.01); [EOL]     final double[] b = new double[] { Double.NaN, 1.2, Double.NaN, 3.7, 27.0, 42.0, Double.NaN }; [EOL]     assertEquals(42.0, IEEE754rUtils.max(b), 0.01); [EOL]     assertEquals(1.2, IEEE754rUtils.min(b), 0.01); [EOL]     final float[] aF = new float[] { 1.2f, Float.NaN, 3.7f, 27.0f, 42.0f, Float.NaN }; [EOL]     assertEquals(1.2f, IEEE754rUtils.min(aF), 0.01); [EOL]     assertEquals(42.0f, IEEE754rUtils.max(aF), 0.01); [EOL]     final float[] bF = new float[] { Float.NaN, 1.2f, Float.NaN, 3.7f, 27.0f, 42.0f, Float.NaN }; [EOL]     assertEquals(1.2f, IEEE754rUtils.min(bF), 0.01); [EOL]     assertEquals(42.0f, IEEE754rUtils.max(bF), 0.01); [EOL] }
@Test [EOL] public void testLang381() { [EOL]     assertEquals(1.2, IEEE754rUtils.min(1.2, 2.5, Double.NaN), 0.01); [EOL]     assertEquals(2.5, IEEE754rUtils.max(1.2, 2.5, Double.NaN), 0.01); [EOL]     assertTrue(Double.isNaN(IEEE754rUtils.max(Double.NaN, Double.NaN, Double.NaN))); [EOL]     assertEquals(1.2f, IEEE754rUtils.min(1.2f, 2.5f, Float.NaN), 0.01); [EOL]     assertEquals(2.5f, IEEE754rUtils.max(1.2f, 2.5f, Float.NaN), 0.01); [EOL]     assertTrue(Float.isNaN(IEEE754rUtils.max(Float.NaN, Float.NaN, Float.NaN))); [EOL]     final double[] a = new double[] { 1.2, Double.NaN, 3.7, 27.0, 42.0, Double.NaN }; [EOL]     assertEquals(42.0, IEEE754rUtils.max(a), 0.01); [EOL]     assertEquals(1.2, IEEE754rUtils.min(a), 0.01); [EOL]     final double[] b = new double[] { Double.NaN, 1.2, Double.NaN, 3.7, 27.0, 42.0, Double.NaN }; [EOL]     assertEquals(42.0, IEEE754rUtils.max(b), 0.01); [EOL]     assertEquals(1.2, IEEE754rUtils.min(b), 0.01); [EOL]     final float[] aF = new float[] { 1.2f, Float.NaN, 3.7f, 27.0f, 42.0f, Float.NaN }; [EOL]     assertEquals(1.2f, IEEE754rUtils.min(aF), 0.01); [EOL]     assertEquals(42.0f, IEEE754rUtils.max(aF), 0.01); [EOL]     final float[] bF = new float[] { Float.NaN, 1.2f, Float.NaN, 3.7f, 27.0f, 42.0f, Float.NaN }; [EOL]     assertEquals(1.2f, IEEE754rUtils.min(bF), 0.01); [EOL]     assertEquals(42.0f, IEEE754rUtils.max(bF), 0.01); [EOL] }
@Test [EOL] public void testLang381() { [EOL]     assertEquals(1.2, IEEE754rUtils.min(1.2, 2.5, Double.NaN), 0.01); [EOL]     assertEquals(2.5, IEEE754rUtils.max(1.2, 2.5, Double.NaN), 0.01); [EOL]     assertTrue(Double.isNaN(IEEE754rUtils.max(Double.NaN, Double.NaN, Double.NaN))); [EOL]     assertEquals(1.2f, IEEE754rUtils.min(1.2f, 2.5f, Float.NaN), 0.01); [EOL]     assertEquals(2.5f, IEEE754rUtils.max(1.2f, 2.5f, Float.NaN), 0.01); [EOL]     assertTrue(Float.isNaN(IEEE754rUtils.max(Float.NaN, Float.NaN, Float.NaN))); [EOL]     final double[] a = new double[] { 1.2, Double.NaN, 3.7, 27.0, 42.0, Double.NaN }; [EOL]     assertEquals(42.0, IEEE754rUtils.max(a), 0.01); [EOL]     assertEquals(1.2, IEEE754rUtils.min(a), 0.01); [EOL]     final double[] b = new double[] { Double.NaN, 1.2, Double.NaN, 3.7, 27.0, 42.0, Double.NaN }; [EOL]     assertEquals(42.0, IEEE754rUtils.max(b), 0.01); [EOL]     assertEquals(1.2, IEEE754rUtils.min(b), 0.01); [EOL]     final float[] aF = new float[] { 1.2f, Float.NaN, 3.7f, 27.0f, 42.0f, Float.NaN }; [EOL]     assertEquals(1.2f, IEEE754rUtils.min(aF), 0.01); [EOL]     assertEquals(42.0f, IEEE754rUtils.max(aF), 0.01); [EOL]     final float[] bF = new float[] { Float.NaN, 1.2f, Float.NaN, 3.7f, 27.0f, 42.0f, Float.NaN }; [EOL]     assertEquals(1.2f, IEEE754rUtils.min(bF), 0.01); [EOL]     assertEquals(42.0f, IEEE754rUtils.max(bF), 0.01); [EOL] }
@Test [EOL] public void testLang381() { [EOL]     assertEquals(1.2, IEEE754rUtils.min(1.2, 2.5, Double.NaN), 0.01); [EOL]     assertEquals(2.5, IEEE754rUtils.max(1.2, 2.5, Double.NaN), 0.01); [EOL]     assertTrue(Double.isNaN(IEEE754rUtils.max(Double.NaN, Double.NaN, Double.NaN))); [EOL]     assertEquals(1.2f, IEEE754rUtils.min(1.2f, 2.5f, Float.NaN), 0.01); [EOL]     assertEquals(2.5f, IEEE754rUtils.max(1.2f, 2.5f, Float.NaN), 0.01); [EOL]     assertTrue(Float.isNaN(IEEE754rUtils.max(Float.NaN, Float.NaN, Float.NaN))); [EOL]     final double[] a = new double[] { 1.2, Double.NaN, 3.7, 27.0, 42.0, Double.NaN }; [EOL]     assertEquals(42.0, IEEE754rUtils.max(a), 0.01); [EOL]     assertEquals(1.2, IEEE754rUtils.min(a), 0.01); [EOL]     final double[] b = new double[] { Double.NaN, 1.2, Double.NaN, 3.7, 27.0, 42.0, Double.NaN }; [EOL]     assertEquals(42.0, IEEE754rUtils.max(b), 0.01); [EOL]     assertEquals(1.2, IEEE754rUtils.min(b), 0.01); [EOL]     final float[] aF = new float[] { 1.2f, Float.NaN, 3.7f, 27.0f, 42.0f, Float.NaN }; [EOL]     assertEquals(1.2f, IEEE754rUtils.min(aF), 0.01); [EOL]     assertEquals(42.0f, IEEE754rUtils.max(aF), 0.01); [EOL]     final float[] bF = new float[] { Float.NaN, 1.2f, Float.NaN, 3.7f, 27.0f, 42.0f, Float.NaN }; [EOL]     assertEquals(1.2f, IEEE754rUtils.min(bF), 0.01); [EOL]     assertEquals(42.0f, IEEE754rUtils.max(bF), 0.01); [EOL] }
@Test [EOL] public void testLang381() { [EOL]     assertEquals(1.2, IEEE754rUtils.min(1.2, 2.5, Double.NaN), 0.01); [EOL]     assertEquals(2.5, IEEE754rUtils.max(1.2, 2.5, Double.NaN), 0.01); [EOL]     assertTrue(Double.isNaN(IEEE754rUtils.max(Double.NaN, Double.NaN, Double.NaN))); [EOL]     assertEquals(1.2f, IEEE754rUtils.min(1.2f, 2.5f, Float.NaN), 0.01); [EOL]     assertEquals(2.5f, IEEE754rUtils.max(1.2f, 2.5f, Float.NaN), 0.01); [EOL]     assertTrue(Float.isNaN(IEEE754rUtils.max(Float.NaN, Float.NaN, Float.NaN))); [EOL]     final double[] a = new double[] { 1.2, Double.NaN, 3.7, 27.0, 42.0, Double.NaN }; [EOL]     assertEquals(42.0, IEEE754rUtils.max(a), 0.01); [EOL]     assertEquals(1.2, IEEE754rUtils.min(a), 0.01); [EOL]     final double[] b = new double[] { Double.NaN, 1.2, Double.NaN, 3.7, 27.0, 42.0, Double.NaN }; [EOL]     assertEquals(42.0, IEEE754rUtils.max(b), 0.01); [EOL]     assertEquals(1.2, IEEE754rUtils.min(b), 0.01); [EOL]     final float[] aF = new float[] { 1.2f, Float.NaN, 3.7f, 27.0f, 42.0f, Float.NaN }; [EOL]     assertEquals(1.2f, IEEE754rUtils.min(aF), 0.01); [EOL]     assertEquals(42.0f, IEEE754rUtils.max(aF), 0.01); [EOL]     final float[] bF = new float[] { Float.NaN, 1.2f, Float.NaN, 3.7f, 27.0f, 42.0f, Float.NaN }; [EOL]     assertEquals(1.2f, IEEE754rUtils.min(bF), 0.01); [EOL]     assertEquals(42.0f, IEEE754rUtils.max(bF), 0.01); [EOL] }
@Test [EOL] public void testLang381() { [EOL]     assertEquals(1.2, IEEE754rUtils.min(1.2, 2.5, Double.NaN), 0.01); [EOL]     assertEquals(2.5, IEEE754rUtils.max(1.2, 2.5, Double.NaN), 0.01); [EOL]     assertTrue(Double.isNaN(IEEE754rUtils.max(Double.NaN, Double.NaN, Double.NaN))); [EOL]     assertEquals(1.2f, IEEE754rUtils.min(1.2f, 2.5f, Float.NaN), 0.01); [EOL]     assertEquals(2.5f, IEEE754rUtils.max(1.2f, 2.5f, Float.NaN), 0.01); [EOL]     assertTrue(Float.isNaN(IEEE754rUtils.max(Float.NaN, Float.NaN, Float.NaN))); [EOL]     final double[] a = new double[] { 1.2, Double.NaN, 3.7, 27.0, 42.0, Double.NaN }; [EOL]     assertEquals(42.0, IEEE754rUtils.max(a), 0.01); [EOL]     assertEquals(1.2, IEEE754rUtils.min(a), 0.01); [EOL]     final double[] b = new double[] { Double.NaN, 1.2, Double.NaN, 3.7, 27.0, 42.0, Double.NaN }; [EOL]     assertEquals(42.0, IEEE754rUtils.max(b), 0.01); [EOL]     assertEquals(1.2, IEEE754rUtils.min(b), 0.01); [EOL]     final float[] aF = new float[] { 1.2f, Float.NaN, 3.7f, 27.0f, 42.0f, Float.NaN }; [EOL]     assertEquals(1.2f, IEEE754rUtils.min(aF), 0.01); [EOL]     assertEquals(42.0f, IEEE754rUtils.max(aF), 0.01); [EOL]     final float[] bF = new float[] { Float.NaN, 1.2f, Float.NaN, 3.7f, 27.0f, 42.0f, Float.NaN }; [EOL]     assertEquals(1.2f, IEEE754rUtils.min(bF), 0.01); [EOL]     assertEquals(42.0f, IEEE754rUtils.max(bF), 0.01); [EOL] }
@Test [EOL] public void testLang381() { [EOL]     assertEquals(1.2, IEEE754rUtils.min(1.2, 2.5, Double.NaN), 0.01); [EOL]     assertEquals(2.5, IEEE754rUtils.max(1.2, 2.5, Double.NaN), 0.01); [EOL]     assertTrue(Double.isNaN(IEEE754rUtils.max(Double.NaN, Double.NaN, Double.NaN))); [EOL]     assertEquals(1.2f, IEEE754rUtils.min(1.2f, 2.5f, Float.NaN), 0.01); [EOL]     assertEquals(2.5f, IEEE754rUtils.max(1.2f, 2.5f, Float.NaN), 0.01); [EOL]     assertTrue(Float.isNaN(IEEE754rUtils.max(Float.NaN, Float.NaN, Float.NaN))); [EOL]     final double[] a = new double[] { 1.2, Double.NaN, 3.7, 27.0, 42.0, Double.NaN }; [EOL]     assertEquals(42.0, IEEE754rUtils.max(a), 0.01); [EOL]     assertEquals(1.2, IEEE754rUtils.min(a), 0.01); [EOL]     final double[] b = new double[] { Double.NaN, 1.2, Double.NaN, 3.7, 27.0, 42.0, Double.NaN }; [EOL]     assertEquals(42.0, IEEE754rUtils.max(b), 0.01); [EOL]     assertEquals(1.2, IEEE754rUtils.min(b), 0.01); [EOL]     final float[] aF = new float[] { 1.2f, Float.NaN, 3.7f, 27.0f, 42.0f, Float.NaN }; [EOL]     assertEquals(1.2f, IEEE754rUtils.min(aF), 0.01); [EOL]     assertEquals(42.0f, IEEE754rUtils.max(aF), 0.01); [EOL]     final float[] bF = new float[] { Float.NaN, 1.2f, Float.NaN, 3.7f, 27.0f, 42.0f, Float.NaN }; [EOL]     assertEquals(1.2f, IEEE754rUtils.min(bF), 0.01); [EOL]     assertEquals(42.0f, IEEE754rUtils.max(bF), 0.01); [EOL] }
@Test [EOL] public void testLang381() { [EOL]     assertEquals(1.2, IEEE754rUtils.min(1.2, 2.5, Double.NaN), 0.01); [EOL]     assertEquals(2.5, IEEE754rUtils.max(1.2, 2.5, Double.NaN), 0.01); [EOL]     assertTrue(Double.isNaN(IEEE754rUtils.max(Double.NaN, Double.NaN, Double.NaN))); [EOL]     assertEquals(1.2f, IEEE754rUtils.min(1.2f, 2.5f, Float.NaN), 0.01); [EOL]     assertEquals(2.5f, IEEE754rUtils.max(1.2f, 2.5f, Float.NaN), 0.01); [EOL]     assertTrue(Float.isNaN(IEEE754rUtils.max(Float.NaN, Float.NaN, Float.NaN))); [EOL]     final double[] a = new double[] { 1.2, Double.NaN, 3.7, 27.0, 42.0, Double.NaN }; [EOL]     assertEquals(42.0, IEEE754rUtils.max(a), 0.01); [EOL]     assertEquals(1.2, IEEE754rUtils.min(a), 0.01); [EOL]     final double[] b = new double[] { Double.NaN, 1.2, Double.NaN, 3.7, 27.0, 42.0, Double.NaN }; [EOL]     assertEquals(42.0, IEEE754rUtils.max(b), 0.01); [EOL]     assertEquals(1.2, IEEE754rUtils.min(b), 0.01); [EOL]     final float[] aF = new float[] { 1.2f, Float.NaN, 3.7f, 27.0f, 42.0f, Float.NaN }; [EOL]     assertEquals(1.2f, IEEE754rUtils.min(aF), 0.01); [EOL]     assertEquals(42.0f, IEEE754rUtils.max(aF), 0.01); [EOL]     final float[] bF = new float[] { Float.NaN, 1.2f, Float.NaN, 3.7f, 27.0f, 42.0f, Float.NaN }; [EOL]     assertEquals(1.2f, IEEE754rUtils.min(bF), 0.01); [EOL]     assertEquals(42.0f, IEEE754rUtils.max(bF), 0.01); [EOL] }
@Test [EOL] public void testLang381() { [EOL]     assertEquals(1.2, IEEE754rUtils.min(1.2, 2.5, Double.NaN), 0.01); [EOL]     assertEquals(2.5, IEEE754rUtils.max(1.2, 2.5, Double.NaN), 0.01); [EOL]     assertTrue(Double.isNaN(IEEE754rUtils.max(Double.NaN, Double.NaN, Double.NaN))); [EOL]     assertEquals(1.2f, IEEE754rUtils.min(1.2f, 2.5f, Float.NaN), 0.01); [EOL]     assertEquals(2.5f, IEEE754rUtils.max(1.2f, 2.5f, Float.NaN), 0.01); [EOL]     assertTrue(Float.isNaN(IEEE754rUtils.max(Float.NaN, Float.NaN, Float.NaN))); [EOL]     final double[] a = new double[] { 1.2, Double.NaN, 3.7, 27.0, 42.0, Double.NaN }; [EOL]     assertEquals(42.0, IEEE754rUtils.max(a), 0.01); [EOL]     assertEquals(1.2, IEEE754rUtils.min(a), 0.01); [EOL]     final double[] b = new double[] { Double.NaN, 1.2, Double.NaN, 3.7, 27.0, 42.0, Double.NaN }; [EOL]     assertEquals(42.0, IEEE754rUtils.max(b), 0.01); [EOL]     assertEquals(1.2, IEEE754rUtils.min(b), 0.01); [EOL]     final float[] aF = new float[] { 1.2f, Float.NaN, 3.7f, 27.0f, 42.0f, Float.NaN }; [EOL]     assertEquals(1.2f, IEEE754rUtils.min(aF), 0.01); [EOL]     assertEquals(42.0f, IEEE754rUtils.max(aF), 0.01); [EOL]     final float[] bF = new float[] { Float.NaN, 1.2f, Float.NaN, 3.7f, 27.0f, 42.0f, Float.NaN }; [EOL]     assertEquals(1.2f, IEEE754rUtils.min(bF), 0.01); [EOL]     assertEquals(42.0f, IEEE754rUtils.max(bF), 0.01); [EOL] }
@Test [EOL] public void testLang381() { [EOL]     assertEquals(1.2, IEEE754rUtils.min(1.2, 2.5, Double.NaN), 0.01); [EOL]     assertEquals(2.5, IEEE754rUtils.max(1.2, 2.5, Double.NaN), 0.01); [EOL]     assertTrue(Double.isNaN(IEEE754rUtils.max(Double.NaN, Double.NaN, Double.NaN))); [EOL]     assertEquals(1.2f, IEEE754rUtils.min(1.2f, 2.5f, Float.NaN), 0.01); [EOL]     assertEquals(2.5f, IEEE754rUtils.max(1.2f, 2.5f, Float.NaN), 0.01); [EOL]     assertTrue(Float.isNaN(IEEE754rUtils.max(Float.NaN, Float.NaN, Float.NaN))); [EOL]     final double[] a = new double[] { 1.2, Double.NaN, 3.7, 27.0, 42.0, Double.NaN }; [EOL]     assertEquals(42.0, IEEE754rUtils.max(a), 0.01); [EOL]     assertEquals(1.2, IEEE754rUtils.min(a), 0.01); [EOL]     final double[] b = new double[] { Double.NaN, 1.2, Double.NaN, 3.7, 27.0, 42.0, Double.NaN }; [EOL]     assertEquals(42.0, IEEE754rUtils.max(b), 0.01); [EOL]     assertEquals(1.2, IEEE754rUtils.min(b), 0.01); [EOL]     final float[] aF = new float[] { 1.2f, Float.NaN, 3.7f, 27.0f, 42.0f, Float.NaN }; [EOL]     assertEquals(1.2f, IEEE754rUtils.min(aF), 0.01); [EOL]     assertEquals(42.0f, IEEE754rUtils.max(aF), 0.01); [EOL]     final float[] bF = new float[] { Float.NaN, 1.2f, Float.NaN, 3.7f, 27.0f, 42.0f, Float.NaN }; [EOL]     assertEquals(1.2f, IEEE754rUtils.min(bF), 0.01); [EOL]     assertEquals(42.0f, IEEE754rUtils.max(bF), 0.01); [EOL] }
@Test [EOL] public void testLang381() { [EOL]     assertEquals(1.2, IEEE754rUtils.min(1.2, 2.5, Double.NaN), 0.01); [EOL]     assertEquals(2.5, IEEE754rUtils.max(1.2, 2.5, Double.NaN), 0.01); [EOL]     assertTrue(Double.isNaN(IEEE754rUtils.max(Double.NaN, Double.NaN, Double.NaN))); [EOL]     assertEquals(1.2f, IEEE754rUtils.min(1.2f, 2.5f, Float.NaN), 0.01); [EOL]     assertEquals(2.5f, IEEE754rUtils.max(1.2f, 2.5f, Float.NaN), 0.01); [EOL]     assertTrue(Float.isNaN(IEEE754rUtils.max(Float.NaN, Float.NaN, Float.NaN))); [EOL]     final double[] a = new double[] { 1.2, Double.NaN, 3.7, 27.0, 42.0, Double.NaN }; [EOL]     assertEquals(42.0, IEEE754rUtils.max(a), 0.01); [EOL]     assertEquals(1.2, IEEE754rUtils.min(a), 0.01); [EOL]     final double[] b = new double[] { Double.NaN, 1.2, Double.NaN, 3.7, 27.0, 42.0, Double.NaN }; [EOL]     assertEquals(42.0, IEEE754rUtils.max(b), 0.01); [EOL]     assertEquals(1.2, IEEE754rUtils.min(b), 0.01); [EOL]     final float[] aF = new float[] { 1.2f, Float.NaN, 3.7f, 27.0f, 42.0f, Float.NaN }; [EOL]     assertEquals(1.2f, IEEE754rUtils.min(aF), 0.01); [EOL]     assertEquals(42.0f, IEEE754rUtils.max(aF), 0.01); [EOL]     final float[] bF = new float[] { Float.NaN, 1.2f, Float.NaN, 3.7f, 27.0f, 42.0f, Float.NaN }; [EOL]     assertEquals(1.2f, IEEE754rUtils.min(bF), 0.01); [EOL]     assertEquals(42.0f, IEEE754rUtils.max(bF), 0.01); [EOL] }
@Test [EOL] public void testLang381() { [EOL]     assertEquals(1.2, IEEE754rUtils.min(1.2, 2.5, Double.NaN), 0.01); [EOL]     assertEquals(2.5, IEEE754rUtils.max(1.2, 2.5, Double.NaN), 0.01); [EOL]     assertTrue(Double.isNaN(IEEE754rUtils.max(Double.NaN, Double.NaN, Double.NaN))); [EOL]     assertEquals(1.2f, IEEE754rUtils.min(1.2f, 2.5f, Float.NaN), 0.01); [EOL]     assertEquals(2.5f, IEEE754rUtils.max(1.2f, 2.5f, Float.NaN), 0.01); [EOL]     assertTrue(Float.isNaN(IEEE754rUtils.max(Float.NaN, Float.NaN, Float.NaN))); [EOL]     final double[] a = new double[] { 1.2, Double.NaN, 3.7, 27.0, 42.0, Double.NaN }; [EOL]     assertEquals(42.0, IEEE754rUtils.max(a), 0.01); [EOL]     assertEquals(1.2, IEEE754rUtils.min(a), 0.01); [EOL]     final double[] b = new double[] { Double.NaN, 1.2, Double.NaN, 3.7, 27.0, 42.0, Double.NaN }; [EOL]     assertEquals(42.0, IEEE754rUtils.max(b), 0.01); [EOL]     assertEquals(1.2, IEEE754rUtils.min(b), 0.01); [EOL]     final float[] aF = new float[] { 1.2f, Float.NaN, 3.7f, 27.0f, 42.0f, Float.NaN }; [EOL]     assertEquals(1.2f, IEEE754rUtils.min(aF), 0.01); [EOL]     assertEquals(42.0f, IEEE754rUtils.max(aF), 0.01); [EOL]     final float[] bF = new float[] { Float.NaN, 1.2f, Float.NaN, 3.7f, 27.0f, 42.0f, Float.NaN }; [EOL]     assertEquals(1.2f, IEEE754rUtils.min(bF), 0.01); [EOL]     assertEquals(42.0f, IEEE754rUtils.max(bF), 0.01); [EOL] }
@Test [EOL] public void testLang381() { [EOL]     assertEquals(1.2, IEEE754rUtils.min(1.2, 2.5, Double.NaN), 0.01); [EOL]     assertEquals(2.5, IEEE754rUtils.max(1.2, 2.5, Double.NaN), 0.01); [EOL]     assertTrue(Double.isNaN(IEEE754rUtils.max(Double.NaN, Double.NaN, Double.NaN))); [EOL]     assertEquals(1.2f, IEEE754rUtils.min(1.2f, 2.5f, Float.NaN), 0.01); [EOL]     assertEquals(2.5f, IEEE754rUtils.max(1.2f, 2.5f, Float.NaN), 0.01); [EOL]     assertTrue(Float.isNaN(IEEE754rUtils.max(Float.NaN, Float.NaN, Float.NaN))); [EOL]     final double[] a = new double[] { 1.2, Double.NaN, 3.7, 27.0, 42.0, Double.NaN }; [EOL]     assertEquals(42.0, IEEE754rUtils.max(a), 0.01); [EOL]     assertEquals(1.2, IEEE754rUtils.min(a), 0.01); [EOL]     final double[] b = new double[] { Double.NaN, 1.2, Double.NaN, 3.7, 27.0, 42.0, Double.NaN }; [EOL]     assertEquals(42.0, IEEE754rUtils.max(b), 0.01); [EOL]     assertEquals(1.2, IEEE754rUtils.min(b), 0.01); [EOL]     final float[] aF = new float[] { 1.2f, Float.NaN, 3.7f, 27.0f, 42.0f, Float.NaN }; [EOL]     assertEquals(1.2f, IEEE754rUtils.min(aF), 0.01); [EOL]     assertEquals(42.0f, IEEE754rUtils.max(aF), 0.01); [EOL]     final float[] bF = new float[] { Float.NaN, 1.2f, Float.NaN, 3.7f, 27.0f, 42.0f, Float.NaN }; [EOL]     assertEquals(1.2f, IEEE754rUtils.min(bF), 0.01); [EOL]     assertEquals(42.0f, IEEE754rUtils.max(bF), 0.01); [EOL] }
@Test [EOL] public void testLang381() { [EOL]     assertEquals(1.2, IEEE754rUtils.min(1.2, 2.5, Double.NaN), 0.01); [EOL]     assertEquals(2.5, IEEE754rUtils.max(1.2, 2.5, Double.NaN), 0.01); [EOL]     assertTrue(Double.isNaN(IEEE754rUtils.max(Double.NaN, Double.NaN, Double.NaN))); [EOL]     assertEquals(1.2f, IEEE754rUtils.min(1.2f, 2.5f, Float.NaN), 0.01); [EOL]     assertEquals(2.5f, IEEE754rUtils.max(1.2f, 2.5f, Float.NaN), 0.01); [EOL]     assertTrue(Float.isNaN(IEEE754rUtils.max(Float.NaN, Float.NaN, Float.NaN))); [EOL]     final double[] a = new double[] { 1.2, Double.NaN, 3.7, 27.0, 42.0, Double.NaN }; [EOL]     assertEquals(42.0, IEEE754rUtils.max(a), 0.01); [EOL]     assertEquals(1.2, IEEE754rUtils.min(a), 0.01); [EOL]     final double[] b = new double[] { Double.NaN, 1.2, Double.NaN, 3.7, 27.0, 42.0, Double.NaN }; [EOL]     assertEquals(42.0, IEEE754rUtils.max(b), 0.01); [EOL]     assertEquals(1.2, IEEE754rUtils.min(b), 0.01); [EOL]     final float[] aF = new float[] { 1.2f, Float.NaN, 3.7f, 27.0f, 42.0f, Float.NaN }; [EOL]     assertEquals(1.2f, IEEE754rUtils.min(aF), 0.01); [EOL]     assertEquals(42.0f, IEEE754rUtils.max(aF), 0.01); [EOL]     final float[] bF = new float[] { Float.NaN, 1.2f, Float.NaN, 3.7f, 27.0f, 42.0f, Float.NaN }; [EOL]     assertEquals(1.2f, IEEE754rUtils.min(bF), 0.01); [EOL]     assertEquals(42.0f, IEEE754rUtils.max(bF), 0.01); [EOL] }
@Test [EOL] public void testLang381() { [EOL]     assertEquals(1.2, IEEE754rUtils.min(1.2, 2.5, Double.NaN), 0.01); [EOL]     assertEquals(2.5, IEEE754rUtils.max(1.2, 2.5, Double.NaN), 0.01); [EOL]     assertTrue(Double.isNaN(IEEE754rUtils.max(Double.NaN, Double.NaN, Double.NaN))); [EOL]     assertEquals(1.2f, IEEE754rUtils.min(1.2f, 2.5f, Float.NaN), 0.01); [EOL]     assertEquals(2.5f, IEEE754rUtils.max(1.2f, 2.5f, Float.NaN), 0.01); [EOL]     assertTrue(Float.isNaN(IEEE754rUtils.max(Float.NaN, Float.NaN, Float.NaN))); [EOL]     final double[] a = new double[] { 1.2, Double.NaN, 3.7, 27.0, 42.0, Double.NaN }; [EOL]     assertEquals(42.0, IEEE754rUtils.max(a), 0.01); [EOL]     assertEquals(1.2, IEEE754rUtils.min(a), 0.01); [EOL]     final double[] b = new double[] { Double.NaN, 1.2, Double.NaN, 3.7, 27.0, 42.0, Double.NaN }; [EOL]     assertEquals(42.0, IEEE754rUtils.max(b), 0.01); [EOL]     assertEquals(1.2, IEEE754rUtils.min(b), 0.01); [EOL]     final float[] aF = new float[] { 1.2f, Float.NaN, 3.7f, 27.0f, 42.0f, Float.NaN }; [EOL]     assertEquals(1.2f, IEEE754rUtils.min(aF), 0.01); [EOL]     assertEquals(42.0f, IEEE754rUtils.max(aF), 0.01); [EOL]     final float[] bF = new float[] { Float.NaN, 1.2f, Float.NaN, 3.7f, 27.0f, 42.0f, Float.NaN }; [EOL]     assertEquals(1.2f, IEEE754rUtils.min(bF), 0.01); [EOL]     assertEquals(42.0f, IEEE754rUtils.max(bF), 0.01); [EOL] }
@Test [EOL] public void testByteArray() { [EOL]     assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((byte[]) null).toHashCode()); [EOL]     final byte[] obj = new byte[2]; [EOL]     assertEquals(17 * 37 * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode()); [EOL]     obj[0] = (byte) 5; [EOL]     assertEquals((17 * 37 + 5) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode()); [EOL]     obj[1] = (byte) 6; [EOL]     assertEquals((17 * 37 + 5) * 37 + 6, new HashCodeBuilder(17, 37).append(obj).toHashCode()); [EOL] }
@Test [EOL] public void testByteArray() { [EOL]     assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((byte[]) null).toHashCode()); [EOL]     final byte[] obj = new byte[2]; [EOL]     assertEquals(17 * 37 * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode()); [EOL]     obj[0] = (byte) 5; [EOL]     assertEquals((17 * 37 + 5) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode()); [EOL]     obj[1] = (byte) 6; [EOL]     assertEquals((17 * 37 + 5) * 37 + 6, new HashCodeBuilder(17, 37).append(obj).toHashCode()); [EOL] }
@Test [EOL] public void testByteArray() { [EOL]     assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((byte[]) null).toHashCode()); [EOL]     final byte[] obj = new byte[2]; [EOL]     assertEquals(17 * 37 * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode()); [EOL]     obj[0] = (byte) 5; [EOL]     assertEquals((17 * 37 + 5) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode()); [EOL]     obj[1] = (byte) 6; [EOL]     assertEquals((17 * 37 + 5) * 37 + 6, new HashCodeBuilder(17, 37).append(obj).toHashCode()); [EOL] }
@Test [EOL] public void testByteArray() { [EOL]     assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((byte[]) null).toHashCode()); [EOL]     final byte[] obj = new byte[2]; [EOL]     assertEquals(17 * 37 * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode()); [EOL]     obj[0] = (byte) 5; [EOL]     assertEquals((17 * 37 + 5) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode()); [EOL]     obj[1] = (byte) 6; [EOL]     assertEquals((17 * 37 + 5) * 37 + 6, new HashCodeBuilder(17, 37).append(obj).toHashCode()); [EOL] }
@Test [EOL] public void testByteArray() { [EOL]     assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((byte[]) null).toHashCode()); [EOL]     final byte[] obj = new byte[2]; [EOL]     assertEquals(17 * 37 * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode()); [EOL]     obj[0] = (byte) 5; [EOL]     assertEquals((17 * 37 + 5) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode()); [EOL]     obj[1] = (byte) 6; [EOL]     assertEquals((17 * 37 + 5) * 37 + 6, new HashCodeBuilder(17, 37).append(obj).toHashCode()); [EOL] }
@Test [EOL] public void testByteArray() { [EOL]     assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((byte[]) null).toHashCode()); [EOL]     final byte[] obj = new byte[2]; [EOL]     assertEquals(17 * 37 * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode()); [EOL]     obj[0] = (byte) 5; [EOL]     assertEquals((17 * 37 + 5) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode()); [EOL]     obj[1] = (byte) 6; [EOL]     assertEquals((17 * 37 + 5) * 37 + 6, new HashCodeBuilder(17, 37).append(obj).toHashCode()); [EOL] }
@Test [EOL] public void testDoubleArrayAsObject() { [EOL]     final double[] obj = new double[2]; [EOL]     assertEquals(17 * 37 * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); [EOL]     obj[0] = 5.4d; [EOL]     final long l1 = Double.doubleToLongBits(5.4d); [EOL]     final int h1 = (int) (l1 ^ l1 >> 32); [EOL]     assertEquals((17 * 37 + h1) * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); [EOL]     obj[1] = 6.3d; [EOL]     final long l2 = Double.doubleToLongBits(6.3d); [EOL]     final int h2 = (int) (l2 ^ l2 >> 32); [EOL]     assertEquals((17 * 37 + h1) * 37 + h2, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); [EOL] }
@Test [EOL] public void testDoubleArrayAsObject() { [EOL]     final double[] obj = new double[2]; [EOL]     assertEquals(17 * 37 * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); [EOL]     obj[0] = 5.4d; [EOL]     final long l1 = Double.doubleToLongBits(5.4d); [EOL]     final int h1 = (int) (l1 ^ l1 >> 32); [EOL]     assertEquals((17 * 37 + h1) * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); [EOL]     obj[1] = 6.3d; [EOL]     final long l2 = Double.doubleToLongBits(6.3d); [EOL]     final int h2 = (int) (l2 ^ l2 >> 32); [EOL]     assertEquals((17 * 37 + h1) * 37 + h2, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); [EOL] }
@Test [EOL] public void testDoubleArrayAsObject() { [EOL]     final double[] obj = new double[2]; [EOL]     assertEquals(17 * 37 * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); [EOL]     obj[0] = 5.4d; [EOL]     final long l1 = Double.doubleToLongBits(5.4d); [EOL]     final int h1 = (int) (l1 ^ l1 >> 32); [EOL]     assertEquals((17 * 37 + h1) * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); [EOL]     obj[1] = 6.3d; [EOL]     final long l2 = Double.doubleToLongBits(6.3d); [EOL]     final int h2 = (int) (l2 ^ l2 >> 32); [EOL]     assertEquals((17 * 37 + h1) * 37 + h2, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); [EOL] }
@Test [EOL] public void testDoubleArrayAsObject() { [EOL]     final double[] obj = new double[2]; [EOL]     assertEquals(17 * 37 * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); [EOL]     obj[0] = 5.4d; [EOL]     final long l1 = Double.doubleToLongBits(5.4d); [EOL]     final int h1 = (int) (l1 ^ l1 >> 32); [EOL]     assertEquals((17 * 37 + h1) * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); [EOL]     obj[1] = 6.3d; [EOL]     final long l2 = Double.doubleToLongBits(6.3d); [EOL]     final int h2 = (int) (l2 ^ l2 >> 32); [EOL]     assertEquals((17 * 37 + h1) * 37 + h2, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); [EOL] }
@Test [EOL] public void testDoubleArrayAsObject() { [EOL]     final double[] obj = new double[2]; [EOL]     assertEquals(17 * 37 * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); [EOL]     obj[0] = 5.4d; [EOL]     final long l1 = Double.doubleToLongBits(5.4d); [EOL]     final int h1 = (int) (l1 ^ l1 >> 32); [EOL]     assertEquals((17 * 37 + h1) * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); [EOL]     obj[1] = 6.3d; [EOL]     final long l2 = Double.doubleToLongBits(6.3d); [EOL]     final int h2 = (int) (l2 ^ l2 >> 32); [EOL]     assertEquals((17 * 37 + h1) * 37 + h2, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); [EOL] }
@Test [EOL] public void testDoubleArrayAsObject() { [EOL]     final double[] obj = new double[2]; [EOL]     assertEquals(17 * 37 * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); [EOL]     obj[0] = 5.4d; [EOL]     final long l1 = Double.doubleToLongBits(5.4d); [EOL]     final int h1 = (int) (l1 ^ l1 >> 32); [EOL]     assertEquals((17 * 37 + h1) * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); [EOL]     obj[1] = 6.3d; [EOL]     final long l2 = Double.doubleToLongBits(6.3d); [EOL]     final int h2 = (int) (l2 ^ l2 >> 32); [EOL]     assertEquals((17 * 37 + h1) * 37 + h2, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); [EOL] }
@Test [EOL] public void testDoubleArrayAsObject() { [EOL]     final double[] obj = new double[2]; [EOL]     assertEquals(17 * 37 * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); [EOL]     obj[0] = 5.4d; [EOL]     final long l1 = Double.doubleToLongBits(5.4d); [EOL]     final int h1 = (int) (l1 ^ l1 >> 32); [EOL]     assertEquals((17 * 37 + h1) * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); [EOL]     obj[1] = 6.3d; [EOL]     final long l2 = Double.doubleToLongBits(6.3d); [EOL]     final int h2 = (int) (l2 ^ l2 >> 32); [EOL]     assertEquals((17 * 37 + h1) * 37 + h2, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); [EOL] }
@Test [EOL] public void testDoubleArrayAsObject() { [EOL]     final double[] obj = new double[2]; [EOL]     assertEquals(17 * 37 * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); [EOL]     obj[0] = 5.4d; [EOL]     final long l1 = Double.doubleToLongBits(5.4d); [EOL]     final int h1 = (int) (l1 ^ l1 >> 32); [EOL]     assertEquals((17 * 37 + h1) * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); [EOL]     obj[1] = 6.3d; [EOL]     final long l2 = Double.doubleToLongBits(6.3d); [EOL]     final int h2 = (int) (l2 ^ l2 >> 32); [EOL]     assertEquals((17 * 37 + h1) * 37 + h2, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); [EOL] }
@Test [EOL] public void testDoubleArrayAsObject() { [EOL]     final double[] obj = new double[2]; [EOL]     assertEquals(17 * 37 * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); [EOL]     obj[0] = 5.4d; [EOL]     final long l1 = Double.doubleToLongBits(5.4d); [EOL]     final int h1 = (int) (l1 ^ l1 >> 32); [EOL]     assertEquals((17 * 37 + h1) * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); [EOL]     obj[1] = 6.3d; [EOL]     final long l2 = Double.doubleToLongBits(6.3d); [EOL]     final int h2 = (int) (l2 ^ l2 >> 32); [EOL]     assertEquals((17 * 37 + h1) * 37 + h2, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); [EOL] }
@Test [EOL] public void testDoubleArrayAsObject() { [EOL]     final double[] obj = new double[2]; [EOL]     assertEquals(17 * 37 * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); [EOL]     obj[0] = 5.4d; [EOL]     final long l1 = Double.doubleToLongBits(5.4d); [EOL]     final int h1 = (int) (l1 ^ l1 >> 32); [EOL]     assertEquals((17 * 37 + h1) * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); [EOL]     obj[1] = 6.3d; [EOL]     final long l2 = Double.doubleToLongBits(6.3d); [EOL]     final int h2 = (int) (l2 ^ l2 >> 32); [EOL]     assertEquals((17 * 37 + h1) * 37 + h2, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); [EOL] }
@Test [EOL] public void testBooleanMultiArray() { [EOL]     final boolean[][] obj = new boolean[2][]; [EOL]     assertEquals(17 * 37 * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode()); [EOL]     obj[0] = new boolean[0]; [EOL]     assertEquals(17 * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode()); [EOL]     obj[0] = new boolean[1]; [EOL]     assertEquals((17 * 37 + 1) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode()); [EOL]     obj[0] = new boolean[2]; [EOL]     assertEquals(((17 * 37 + 1) * 37 + 1) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode()); [EOL]     obj[0][0] = true; [EOL]     assertEquals(((17 * 37 + 0) * 37 + 1) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode()); [EOL]     obj[1] = new boolean[1]; [EOL]     assertEquals(((17 * 37 + 0) * 37 + 1) * 37 + 1, new HashCodeBuilder(17, 37).append(obj).toHashCode()); [EOL] }
@Test [EOL] public void testBooleanMultiArray() { [EOL]     final boolean[][] obj = new boolean[2][]; [EOL]     assertEquals(17 * 37 * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode()); [EOL]     obj[0] = new boolean[0]; [EOL]     assertEquals(17 * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode()); [EOL]     obj[0] = new boolean[1]; [EOL]     assertEquals((17 * 37 + 1) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode()); [EOL]     obj[0] = new boolean[2]; [EOL]     assertEquals(((17 * 37 + 1) * 37 + 1) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode()); [EOL]     obj[0][0] = true; [EOL]     assertEquals(((17 * 37 + 0) * 37 + 1) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode()); [EOL]     obj[1] = new boolean[1]; [EOL]     assertEquals(((17 * 37 + 0) * 37 + 1) * 37 + 1, new HashCodeBuilder(17, 37).append(obj).toHashCode()); [EOL] }
@Test [EOL] public void testBooleanMultiArray() { [EOL]     final boolean[][] obj = new boolean[2][]; [EOL]     assertEquals(17 * 37 * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode()); [EOL]     obj[0] = new boolean[0]; [EOL]     assertEquals(17 * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode()); [EOL]     obj[0] = new boolean[1]; [EOL]     assertEquals((17 * 37 + 1) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode()); [EOL]     obj[0] = new boolean[2]; [EOL]     assertEquals(((17 * 37 + 1) * 37 + 1) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode()); [EOL]     obj[0][0] = true; [EOL]     assertEquals(((17 * 37 + 0) * 37 + 1) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode()); [EOL]     obj[1] = new boolean[1]; [EOL]     assertEquals(((17 * 37 + 0) * 37 + 1) * 37 + 1, new HashCodeBuilder(17, 37).append(obj).toHashCode()); [EOL] }
@Test [EOL] public void testBooleanMultiArray() { [EOL]     final boolean[][] obj = new boolean[2][]; [EOL]     assertEquals(17 * 37 * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode()); [EOL]     obj[0] = new boolean[0]; [EOL]     assertEquals(17 * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode()); [EOL]     obj[0] = new boolean[1]; [EOL]     assertEquals((17 * 37 + 1) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode()); [EOL]     obj[0] = new boolean[2]; [EOL]     assertEquals(((17 * 37 + 1) * 37 + 1) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode()); [EOL]     obj[0][0] = true; [EOL]     assertEquals(((17 * 37 + 0) * 37 + 1) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode()); [EOL]     obj[1] = new boolean[1]; [EOL]     assertEquals(((17 * 37 + 0) * 37 + 1) * 37 + 1, new HashCodeBuilder(17, 37).append(obj).toHashCode()); [EOL] }
@Test [EOL] public void testBooleanMultiArray() { [EOL]     final boolean[][] obj = new boolean[2][]; [EOL]     assertEquals(17 * 37 * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode()); [EOL]     obj[0] = new boolean[0]; [EOL]     assertEquals(17 * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode()); [EOL]     obj[0] = new boolean[1]; [EOL]     assertEquals((17 * 37 + 1) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode()); [EOL]     obj[0] = new boolean[2]; [EOL]     assertEquals(((17 * 37 + 1) * 37 + 1) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode()); [EOL]     obj[0][0] = true; [EOL]     assertEquals(((17 * 37 + 0) * 37 + 1) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode()); [EOL]     obj[1] = new boolean[1]; [EOL]     assertEquals(((17 * 37 + 0) * 37 + 1) * 37 + 1, new HashCodeBuilder(17, 37).append(obj).toHashCode()); [EOL] }
@Test [EOL] public void testBooleanMultiArray() { [EOL]     final boolean[][] obj = new boolean[2][]; [EOL]     assertEquals(17 * 37 * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode()); [EOL]     obj[0] = new boolean[0]; [EOL]     assertEquals(17 * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode()); [EOL]     obj[0] = new boolean[1]; [EOL]     assertEquals((17 * 37 + 1) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode()); [EOL]     obj[0] = new boolean[2]; [EOL]     assertEquals(((17 * 37 + 1) * 37 + 1) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode()); [EOL]     obj[0][0] = true; [EOL]     assertEquals(((17 * 37 + 0) * 37 + 1) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode()); [EOL]     obj[1] = new boolean[1]; [EOL]     assertEquals(((17 * 37 + 0) * 37 + 1) * 37 + 1, new HashCodeBuilder(17, 37).append(obj).toHashCode()); [EOL] }
@Test [EOL] public void testBooleanMultiArray() { [EOL]     final boolean[][] obj = new boolean[2][]; [EOL]     assertEquals(17 * 37 * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode()); [EOL]     obj[0] = new boolean[0]; [EOL]     assertEquals(17 * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode()); [EOL]     obj[0] = new boolean[1]; [EOL]     assertEquals((17 * 37 + 1) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode()); [EOL]     obj[0] = new boolean[2]; [EOL]     assertEquals(((17 * 37 + 1) * 37 + 1) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode()); [EOL]     obj[0][0] = true; [EOL]     assertEquals(((17 * 37 + 0) * 37 + 1) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode()); [EOL]     obj[1] = new boolean[1]; [EOL]     assertEquals(((17 * 37 + 0) * 37 + 1) * 37 + 1, new HashCodeBuilder(17, 37).append(obj).toHashCode()); [EOL] }
@Test [EOL] public void testBooleanMultiArray() { [EOL]     final boolean[][] obj = new boolean[2][]; [EOL]     assertEquals(17 * 37 * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode()); [EOL]     obj[0] = new boolean[0]; [EOL]     assertEquals(17 * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode()); [EOL]     obj[0] = new boolean[1]; [EOL]     assertEquals((17 * 37 + 1) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode()); [EOL]     obj[0] = new boolean[2]; [EOL]     assertEquals(((17 * 37 + 1) * 37 + 1) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode()); [EOL]     obj[0][0] = true; [EOL]     assertEquals(((17 * 37 + 0) * 37 + 1) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode()); [EOL]     obj[1] = new boolean[1]; [EOL]     assertEquals(((17 * 37 + 0) * 37 + 1) * 37 + 1, new HashCodeBuilder(17, 37).append(obj).toHashCode()); [EOL] }
@Test [EOL] public void testBooleanMultiArray() { [EOL]     final boolean[][] obj = new boolean[2][]; [EOL]     assertEquals(17 * 37 * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode()); [EOL]     obj[0] = new boolean[0]; [EOL]     assertEquals(17 * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode()); [EOL]     obj[0] = new boolean[1]; [EOL]     assertEquals((17 * 37 + 1) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode()); [EOL]     obj[0] = new boolean[2]; [EOL]     assertEquals(((17 * 37 + 1) * 37 + 1) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode()); [EOL]     obj[0][0] = true; [EOL]     assertEquals(((17 * 37 + 0) * 37 + 1) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode()); [EOL]     obj[1] = new boolean[1]; [EOL]     assertEquals(((17 * 37 + 0) * 37 + 1) * 37 + 1, new HashCodeBuilder(17, 37).append(obj).toHashCode()); [EOL] }
@Test [EOL] public void testBooleanMultiArray() { [EOL]     final boolean[][] obj = new boolean[2][]; [EOL]     assertEquals(17 * 37 * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode()); [EOL]     obj[0] = new boolean[0]; [EOL]     assertEquals(17 * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode()); [EOL]     obj[0] = new boolean[1]; [EOL]     assertEquals((17 * 37 + 1) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode()); [EOL]     obj[0] = new boolean[2]; [EOL]     assertEquals(((17 * 37 + 1) * 37 + 1) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode()); [EOL]     obj[0][0] = true; [EOL]     assertEquals(((17 * 37 + 0) * 37 + 1) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode()); [EOL]     obj[1] = new boolean[1]; [EOL]     assertEquals(((17 * 37 + 0) * 37 + 1) * 37 + 1, new HashCodeBuilder(17, 37).append(obj).toHashCode()); [EOL] }
@Test [EOL] public void testBooleanMultiArray() { [EOL]     final boolean[][] obj = new boolean[2][]; [EOL]     assertEquals(17 * 37 * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode()); [EOL]     obj[0] = new boolean[0]; [EOL]     assertEquals(17 * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode()); [EOL]     obj[0] = new boolean[1]; [EOL]     assertEquals((17 * 37 + 1) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode()); [EOL]     obj[0] = new boolean[2]; [EOL]     assertEquals(((17 * 37 + 1) * 37 + 1) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode()); [EOL]     obj[0][0] = true; [EOL]     assertEquals(((17 * 37 + 0) * 37 + 1) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode()); [EOL]     obj[1] = new boolean[1]; [EOL]     assertEquals(((17 * 37 + 0) * 37 + 1) * 37 + 1, new HashCodeBuilder(17, 37).append(obj).toHashCode()); [EOL] }
@Test [EOL] public void testBooleanMultiArray() { [EOL]     final boolean[][] obj = new boolean[2][]; [EOL]     assertEquals(17 * 37 * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode()); [EOL]     obj[0] = new boolean[0]; [EOL]     assertEquals(17 * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode()); [EOL]     obj[0] = new boolean[1]; [EOL]     assertEquals((17 * 37 + 1) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode()); [EOL]     obj[0] = new boolean[2]; [EOL]     assertEquals(((17 * 37 + 1) * 37 + 1) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode()); [EOL]     obj[0][0] = true; [EOL]     assertEquals(((17 * 37 + 0) * 37 + 1) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode()); [EOL]     obj[1] = new boolean[1]; [EOL]     assertEquals(((17 * 37 + 0) * 37 + 1) * 37 + 1, new HashCodeBuilder(17, 37).append(obj).toHashCode()); [EOL] }
@Test [EOL] public void testBooleanMultiArray() { [EOL]     final boolean[][] obj = new boolean[2][]; [EOL]     assertEquals(17 * 37 * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode()); [EOL]     obj[0] = new boolean[0]; [EOL]     assertEquals(17 * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode()); [EOL]     obj[0] = new boolean[1]; [EOL]     assertEquals((17 * 37 + 1) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode()); [EOL]     obj[0] = new boolean[2]; [EOL]     assertEquals(((17 * 37 + 1) * 37 + 1) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode()); [EOL]     obj[0][0] = true; [EOL]     assertEquals(((17 * 37 + 0) * 37 + 1) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode()); [EOL]     obj[1] = new boolean[1]; [EOL]     assertEquals(((17 * 37 + 0) * 37 + 1) * 37 + 1, new HashCodeBuilder(17, 37).append(obj).toHashCode()); [EOL] }
@Test [EOL] public void testBooleanMultiArray() { [EOL]     final boolean[][] obj = new boolean[2][]; [EOL]     assertEquals(17 * 37 * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode()); [EOL]     obj[0] = new boolean[0]; [EOL]     assertEquals(17 * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode()); [EOL]     obj[0] = new boolean[1]; [EOL]     assertEquals((17 * 37 + 1) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode()); [EOL]     obj[0] = new boolean[2]; [EOL]     assertEquals(((17 * 37 + 1) * 37 + 1) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode()); [EOL]     obj[0][0] = true; [EOL]     assertEquals(((17 * 37 + 0) * 37 + 1) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode()); [EOL]     obj[1] = new boolean[1]; [EOL]     assertEquals(((17 * 37 + 0) * 37 + 1) * 37 + 1, new HashCodeBuilder(17, 37).append(obj).toHashCode()); [EOL] }
@Test [EOL] public void testCloneNull() throws Exception { [EOL]     final Object test = SerializationUtils.clone(null); [EOL]     assertNull(test); [EOL] }
@Test [EOL] public void testCloneNull() throws Exception { [EOL]     final Object test = SerializationUtils.clone(null); [EOL]     assertNull(test); [EOL] }
@Test [EOL] public void testCloneNull() throws Exception { [EOL]     final Object test = SerializationUtils.clone(null); [EOL]     assertNull(test); [EOL] }
@Test [EOL] public void testCloneNull() throws Exception { [EOL]     final Object test = SerializationUtils.clone(null); [EOL]     assertNull(test); [EOL] }
@Test [EOL] public void testToIntValue_Character_int() { [EOL]     assertEquals(0, CharUtils.toIntValue(new Character('0'), -1)); [EOL]     assertEquals(3, CharUtils.toIntValue(new Character('3'), -1)); [EOL]     assertEquals(-1, CharUtils.toIntValue(new Character('A'), -1)); [EOL]     assertEquals(-1, CharUtils.toIntValue(null, -1)); [EOL] }
@Test [EOL] public void testToIntValue_Character_int() { [EOL]     assertEquals(0, CharUtils.toIntValue(new Character('0'), -1)); [EOL]     assertEquals(3, CharUtils.toIntValue(new Character('3'), -1)); [EOL]     assertEquals(-1, CharUtils.toIntValue(new Character('A'), -1)); [EOL]     assertEquals(-1, CharUtils.toIntValue(null, -1)); [EOL] }
@Test [EOL] public void testToIntValue_Character_int() { [EOL]     assertEquals(0, CharUtils.toIntValue(new Character('0'), -1)); [EOL]     assertEquals(3, CharUtils.toIntValue(new Character('3'), -1)); [EOL]     assertEquals(-1, CharUtils.toIntValue(new Character('A'), -1)); [EOL]     assertEquals(-1, CharUtils.toIntValue(null, -1)); [EOL] }
@Test [EOL] public void testToString_char() { [EOL]     assertEquals("a", CharUtils.toString('a')); [EOL]     assertSame(CharUtils.toString('a'), CharUtils.toString('a')); [EOL]     for (int i = 0; i < 128; i++) { [EOL]         final String str = CharUtils.toString((char) i); [EOL]         final String str2 = CharUtils.toString((char) i); [EOL]         assertSame(str, str2); [EOL]         assertEquals(1, str.length()); [EOL]         assertEquals(i, str.charAt(0)); [EOL]     } [EOL]     for (int i = 128; i < 196; i++) { [EOL]         final String str = CharUtils.toString((char) i); [EOL]         final String str2 = CharUtils.toString((char) i); [EOL]         assertEquals(str, str2); [EOL]         assertTrue(str != str2); [EOL]         assertEquals(1, str.length()); [EOL]         assertEquals(i, str.charAt(0)); [EOL]         assertEquals(1, str2.length()); [EOL]         assertEquals(i, str2.charAt(0)); [EOL]     } [EOL] }
@Test [EOL] public void testToString_char() { [EOL]     assertEquals("a", CharUtils.toString('a')); [EOL]     assertSame(CharUtils.toString('a'), CharUtils.toString('a')); [EOL]     for (int i = 0; i < 128; i++) { [EOL]         final String str = CharUtils.toString((char) i); [EOL]         final String str2 = CharUtils.toString((char) i); [EOL]         assertSame(str, str2); [EOL]         assertEquals(1, str.length()); [EOL]         assertEquals(i, str.charAt(0)); [EOL]     } [EOL]     for (int i = 128; i < 196; i++) { [EOL]         final String str = CharUtils.toString((char) i); [EOL]         final String str2 = CharUtils.toString((char) i); [EOL]         assertEquals(str, str2); [EOL]         assertTrue(str != str2); [EOL]         assertEquals(1, str.length()); [EOL]         assertEquals(i, str.charAt(0)); [EOL]         assertEquals(1, str2.length()); [EOL]         assertEquals(i, str2.charAt(0)); [EOL]     } [EOL] }
@Test [EOL] public void testToUnicodeEscaped_char() { [EOL]     assertEquals("\\u0041", CharUtils.unicodeEscaped('A')); [EOL]     for (int i = 0; i < 196; i++) { [EOL]         final String str = CharUtils.unicodeEscaped((char) i); [EOL]         assertEquals(6, str.length()); [EOL]         final int val = Integer.parseInt(str.substring(2), 16); [EOL]         assertEquals(i, val); [EOL]     } [EOL]     assertEquals("\\u0999", CharUtils.unicodeEscaped((char) 0x999)); [EOL]     assertEquals("\\u1001", CharUtils.unicodeEscaped((char) 0x1001)); [EOL] }
@Test [EOL] public void testToUnicodeEscaped_char() { [EOL]     assertEquals("\\u0041", CharUtils.unicodeEscaped('A')); [EOL]     for (int i = 0; i < 196; i++) { [EOL]         final String str = CharUtils.unicodeEscaped((char) i); [EOL]         assertEquals(6, str.length()); [EOL]         final int val = Integer.parseInt(str.substring(2), 16); [EOL]         assertEquals(i, val); [EOL]     } [EOL]     assertEquals("\\u0999", CharUtils.unicodeEscaped((char) 0x999)); [EOL]     assertEquals("\\u1001", CharUtils.unicodeEscaped((char) 0x1001)); [EOL] }
@Test [EOL] public void testToUnicodeEscaped_char() { [EOL]     assertEquals("\\u0041", CharUtils.unicodeEscaped('A')); [EOL]     for (int i = 0; i < 196; i++) { [EOL]         final String str = CharUtils.unicodeEscaped((char) i); [EOL]         assertEquals(6, str.length()); [EOL]         final int val = Integer.parseInt(str.substring(2), 16); [EOL]         assertEquals(i, val); [EOL]     } [EOL]     assertEquals("\\u0999", CharUtils.unicodeEscaped((char) 0x999)); [EOL]     assertEquals("\\u1001", CharUtils.unicodeEscaped((char) 0x1001)); [EOL] }
@Test [EOL] public void testToUnicodeEscaped_char() { [EOL]     assertEquals("\\u0041", CharUtils.unicodeEscaped('A')); [EOL]     for (int i = 0; i < 196; i++) { [EOL]         final String str = CharUtils.unicodeEscaped((char) i); [EOL]         assertEquals(6, str.length()); [EOL]         final int val = Integer.parseInt(str.substring(2), 16); [EOL]         assertEquals(i, val); [EOL]     } [EOL]     assertEquals("\\u0999", CharUtils.unicodeEscaped((char) 0x999)); [EOL]     assertEquals("\\u1001", CharUtils.unicodeEscaped((char) 0x1001)); [EOL] }
@Test [EOL] public void testIsAsciiPrintable_char() { [EOL]     assertTrue(CharUtils.isAsciiPrintable('a')); [EOL]     assertTrue(CharUtils.isAsciiPrintable('A')); [EOL]     assertTrue(CharUtils.isAsciiPrintable('3')); [EOL]     assertTrue(CharUtils.isAsciiPrintable('-')); [EOL]     assertFalse(CharUtils.isAsciiPrintable('\n')); [EOL]     assertFalse(CharUtils.isAscii(CHAR_COPY)); [EOL]     for (int i = 0; i < 196; i++) { [EOL]         if (i >= 32 && i <= 126) { [EOL]             assertTrue(CharUtils.isAsciiPrintable((char) i)); [EOL]         } else { [EOL]             assertFalse(CharUtils.isAsciiPrintable((char) i)); [EOL]         } [EOL]     } [EOL] }
@Test [EOL] public void testIsAsciiPrintable_char() { [EOL]     assertTrue(CharUtils.isAsciiPrintable('a')); [EOL]     assertTrue(CharUtils.isAsciiPrintable('A')); [EOL]     assertTrue(CharUtils.isAsciiPrintable('3')); [EOL]     assertTrue(CharUtils.isAsciiPrintable('-')); [EOL]     assertFalse(CharUtils.isAsciiPrintable('\n')); [EOL]     assertFalse(CharUtils.isAscii(CHAR_COPY)); [EOL]     for (int i = 0; i < 196; i++) { [EOL]         if (i >= 32 && i <= 126) { [EOL]             assertTrue(CharUtils.isAsciiPrintable((char) i)); [EOL]         } else { [EOL]             assertFalse(CharUtils.isAsciiPrintable((char) i)); [EOL]         } [EOL]     } [EOL] }
@Test [EOL] public void testIsAsciiPrintable_char() { [EOL]     assertTrue(CharUtils.isAsciiPrintable('a')); [EOL]     assertTrue(CharUtils.isAsciiPrintable('A')); [EOL]     assertTrue(CharUtils.isAsciiPrintable('3')); [EOL]     assertTrue(CharUtils.isAsciiPrintable('-')); [EOL]     assertFalse(CharUtils.isAsciiPrintable('\n')); [EOL]     assertFalse(CharUtils.isAscii(CHAR_COPY)); [EOL]     for (int i = 0; i < 196; i++) { [EOL]         if (i >= 32 && i <= 126) { [EOL]             assertTrue(CharUtils.isAsciiPrintable((char) i)); [EOL]         } else { [EOL]             assertFalse(CharUtils.isAsciiPrintable((char) i)); [EOL]         } [EOL]     } [EOL] }
@Test [EOL] public void testIsAsciiPrintable_char() { [EOL]     assertTrue(CharUtils.isAsciiPrintable('a')); [EOL]     assertTrue(CharUtils.isAsciiPrintable('A')); [EOL]     assertTrue(CharUtils.isAsciiPrintable('3')); [EOL]     assertTrue(CharUtils.isAsciiPrintable('-')); [EOL]     assertFalse(CharUtils.isAsciiPrintable('\n')); [EOL]     assertFalse(CharUtils.isAscii(CHAR_COPY)); [EOL]     for (int i = 0; i < 196; i++) { [EOL]         if (i >= 32 && i <= 126) { [EOL]             assertTrue(CharUtils.isAsciiPrintable((char) i)); [EOL]         } else { [EOL]             assertFalse(CharUtils.isAsciiPrintable((char) i)); [EOL]         } [EOL]     } [EOL] }
@Test [EOL] public void testIsAsciiPrintable_char() { [EOL]     assertTrue(CharUtils.isAsciiPrintable('a')); [EOL]     assertTrue(CharUtils.isAsciiPrintable('A')); [EOL]     assertTrue(CharUtils.isAsciiPrintable('3')); [EOL]     assertTrue(CharUtils.isAsciiPrintable('-')); [EOL]     assertFalse(CharUtils.isAsciiPrintable('\n')); [EOL]     assertFalse(CharUtils.isAscii(CHAR_COPY)); [EOL]     for (int i = 0; i < 196; i++) { [EOL]         if (i >= 32 && i <= 126) { [EOL]             assertTrue(CharUtils.isAsciiPrintable((char) i)); [EOL]         } else { [EOL]             assertFalse(CharUtils.isAsciiPrintable((char) i)); [EOL]         } [EOL]     } [EOL] }
@Test [EOL] public void testIsAsciiAlpha_char() { [EOL]     assertTrue(CharUtils.isAsciiAlpha('a')); [EOL]     assertTrue(CharUtils.isAsciiAlpha('A')); [EOL]     assertFalse(CharUtils.isAsciiAlpha('3')); [EOL]     assertFalse(CharUtils.isAsciiAlpha('-')); [EOL]     assertFalse(CharUtils.isAsciiAlpha('\n')); [EOL]     assertFalse(CharUtils.isAsciiAlpha(CHAR_COPY)); [EOL]     for (int i = 0; i < 196; i++) { [EOL]         if ((i >= 'A' && i <= 'Z') || (i >= 'a' && i <= 'z')) { [EOL]             assertTrue(CharUtils.isAsciiAlpha((char) i)); [EOL]         } else { [EOL]             assertFalse(CharUtils.isAsciiAlpha((char) i)); [EOL]         } [EOL]     } [EOL] }
@Test [EOL] public void testIsAsciiAlphaUpper_char() { [EOL]     assertFalse(CharUtils.isAsciiAlphaUpper('a')); [EOL]     assertTrue(CharUtils.isAsciiAlphaUpper('A')); [EOL]     assertFalse(CharUtils.isAsciiAlphaUpper('3')); [EOL]     assertFalse(CharUtils.isAsciiAlphaUpper('-')); [EOL]     assertFalse(CharUtils.isAsciiAlphaUpper('\n')); [EOL]     assertFalse(CharUtils.isAsciiAlphaUpper(CHAR_COPY)); [EOL]     for (int i = 0; i < 196; i++) { [EOL]         if (i >= 'A' && i <= 'Z') { [EOL]             assertTrue(CharUtils.isAsciiAlphaUpper((char) i)); [EOL]         } else { [EOL]             assertFalse(CharUtils.isAsciiAlphaUpper((char) i)); [EOL]         } [EOL]     } [EOL] }
@Test [EOL] public void testIsAsciiAlphaUpper_char() { [EOL]     assertFalse(CharUtils.isAsciiAlphaUpper('a')); [EOL]     assertTrue(CharUtils.isAsciiAlphaUpper('A')); [EOL]     assertFalse(CharUtils.isAsciiAlphaUpper('3')); [EOL]     assertFalse(CharUtils.isAsciiAlphaUpper('-')); [EOL]     assertFalse(CharUtils.isAsciiAlphaUpper('\n')); [EOL]     assertFalse(CharUtils.isAsciiAlphaUpper(CHAR_COPY)); [EOL]     for (int i = 0; i < 196; i++) { [EOL]         if (i >= 'A' && i <= 'Z') { [EOL]             assertTrue(CharUtils.isAsciiAlphaUpper((char) i)); [EOL]         } else { [EOL]             assertFalse(CharUtils.isAsciiAlphaUpper((char) i)); [EOL]         } [EOL]     } [EOL] }
@Test [EOL] public void testIsAsciiAlphaUpper_char() { [EOL]     assertFalse(CharUtils.isAsciiAlphaUpper('a')); [EOL]     assertTrue(CharUtils.isAsciiAlphaUpper('A')); [EOL]     assertFalse(CharUtils.isAsciiAlphaUpper('3')); [EOL]     assertFalse(CharUtils.isAsciiAlphaUpper('-')); [EOL]     assertFalse(CharUtils.isAsciiAlphaUpper('\n')); [EOL]     assertFalse(CharUtils.isAsciiAlphaUpper(CHAR_COPY)); [EOL]     for (int i = 0; i < 196; i++) { [EOL]         if (i >= 'A' && i <= 'Z') { [EOL]             assertTrue(CharUtils.isAsciiAlphaUpper((char) i)); [EOL]         } else { [EOL]             assertFalse(CharUtils.isAsciiAlphaUpper((char) i)); [EOL]         } [EOL]     } [EOL] }
@Test [EOL] public void testIsAsciiAlphaUpper_char() { [EOL]     assertFalse(CharUtils.isAsciiAlphaUpper('a')); [EOL]     assertTrue(CharUtils.isAsciiAlphaUpper('A')); [EOL]     assertFalse(CharUtils.isAsciiAlphaUpper('3')); [EOL]     assertFalse(CharUtils.isAsciiAlphaUpper('-')); [EOL]     assertFalse(CharUtils.isAsciiAlphaUpper('\n')); [EOL]     assertFalse(CharUtils.isAsciiAlphaUpper(CHAR_COPY)); [EOL]     for (int i = 0; i < 196; i++) { [EOL]         if (i >= 'A' && i <= 'Z') { [EOL]             assertTrue(CharUtils.isAsciiAlphaUpper((char) i)); [EOL]         } else { [EOL]             assertFalse(CharUtils.isAsciiAlphaUpper((char) i)); [EOL]         } [EOL]     } [EOL] }
@Test [EOL] public void testIsAsciiAlphaLower_char() { [EOL]     assertTrue(CharUtils.isAsciiAlphaLower('a')); [EOL]     assertFalse(CharUtils.isAsciiAlphaLower('A')); [EOL]     assertFalse(CharUtils.isAsciiAlphaLower('3')); [EOL]     assertFalse(CharUtils.isAsciiAlphaLower('-')); [EOL]     assertFalse(CharUtils.isAsciiAlphaLower('\n')); [EOL]     assertFalse(CharUtils.isAsciiAlphaLower(CHAR_COPY)); [EOL]     for (int i = 0; i < 196; i++) { [EOL]         if (i >= 'a' && i <= 'z') { [EOL]             assertTrue(CharUtils.isAsciiAlphaLower((char) i)); [EOL]         } else { [EOL]             assertFalse(CharUtils.isAsciiAlphaLower((char) i)); [EOL]         } [EOL]     } [EOL] }
@Test [EOL] public void testIsAsciiAlphaLower_char() { [EOL]     assertTrue(CharUtils.isAsciiAlphaLower('a')); [EOL]     assertFalse(CharUtils.isAsciiAlphaLower('A')); [EOL]     assertFalse(CharUtils.isAsciiAlphaLower('3')); [EOL]     assertFalse(CharUtils.isAsciiAlphaLower('-')); [EOL]     assertFalse(CharUtils.isAsciiAlphaLower('\n')); [EOL]     assertFalse(CharUtils.isAsciiAlphaLower(CHAR_COPY)); [EOL]     for (int i = 0; i < 196; i++) { [EOL]         if (i >= 'a' && i <= 'z') { [EOL]             assertTrue(CharUtils.isAsciiAlphaLower((char) i)); [EOL]         } else { [EOL]             assertFalse(CharUtils.isAsciiAlphaLower((char) i)); [EOL]         } [EOL]     } [EOL] }
@Test [EOL] public void testIsAsciiAlphaLower_char() { [EOL]     assertTrue(CharUtils.isAsciiAlphaLower('a')); [EOL]     assertFalse(CharUtils.isAsciiAlphaLower('A')); [EOL]     assertFalse(CharUtils.isAsciiAlphaLower('3')); [EOL]     assertFalse(CharUtils.isAsciiAlphaLower('-')); [EOL]     assertFalse(CharUtils.isAsciiAlphaLower('\n')); [EOL]     assertFalse(CharUtils.isAsciiAlphaLower(CHAR_COPY)); [EOL]     for (int i = 0; i < 196; i++) { [EOL]         if (i >= 'a' && i <= 'z') { [EOL]             assertTrue(CharUtils.isAsciiAlphaLower((char) i)); [EOL]         } else { [EOL]             assertFalse(CharUtils.isAsciiAlphaLower((char) i)); [EOL]         } [EOL]     } [EOL] }
@Test [EOL] public void testToIntValue_Character_int() { [EOL]     assertEquals(0, CharUtils.toIntValue(new Character('0'), -1)); [EOL]     assertEquals(3, CharUtils.toIntValue(new Character('3'), -1)); [EOL]     assertEquals(-1, CharUtils.toIntValue(new Character('A'), -1)); [EOL]     assertEquals(-1, CharUtils.toIntValue(null, -1)); [EOL] }
@Test [EOL] public void testToIntValue_Character_int() { [EOL]     assertEquals(0, CharUtils.toIntValue(new Character('0'), -1)); [EOL]     assertEquals(3, CharUtils.toIntValue(new Character('3'), -1)); [EOL]     assertEquals(-1, CharUtils.toIntValue(new Character('A'), -1)); [EOL]     assertEquals(-1, CharUtils.toIntValue(null, -1)); [EOL] }
@SuppressWarnings({ "rawtypes", "unchecked" }) [EOL] @Test [EOL] public void testComparableConstructors() { [EOL]     final Comparable c = new Comparable() { [EOL]  [EOL]         @Override [EOL]         public int compareTo(final Object other) { [EOL]             return 1; [EOL]         } [EOL]     }; [EOL]     final Range r1 = Range.is(c); [EOL]     final Range r2 = Range.between(c, c); [EOL]     assertEquals(true, r1.isNaturalOrdering()); [EOL]     assertEquals(true, r2.isNaturalOrdering()); [EOL] }
@SuppressWarnings({ "rawtypes", "unchecked" }) [EOL] @Test [EOL] public void testComparableConstructors() { [EOL]     final Comparable c = new Comparable() { [EOL]  [EOL]         @Override [EOL]         public int compareTo(final Object other) { [EOL]             return 1; [EOL]         } [EOL]     }; [EOL]     final Range r1 = Range.is(c); [EOL]     final Range r2 = Range.between(c, c); [EOL]     assertEquals(true, r1.isNaturalOrdering()); [EOL]     assertEquals(true, r2.isNaturalOrdering()); [EOL] }
@SuppressWarnings({ "rawtypes", "unchecked" }) [EOL] @Test [EOL] public void testComparableConstructors() { [EOL]     final Comparable c = new Comparable() { [EOL]  [EOL]         @Override [EOL]         public int compareTo(final Object other) { [EOL]             return 1; [EOL]         } [EOL]     }; [EOL]     final Range r1 = Range.is(c); [EOL]     final Range r2 = Range.between(c, c); [EOL]     assertEquals(true, r1.isNaturalOrdering()); [EOL]     assertEquals(true, r2.isNaturalOrdering()); [EOL] }
@SuppressWarnings({ "rawtypes", "unchecked" }) [EOL] @Test [EOL] public void testComparableConstructors() { [EOL]     final Comparable c = new Comparable() { [EOL]  [EOL]         @Override [EOL]         public int compareTo(final Object other) { [EOL]             return 1; [EOL]         } [EOL]     }; [EOL]     final Range r1 = Range.is(c); [EOL]     final Range r2 = Range.between(c, c); [EOL]     assertEquals(true, r1.isNaturalOrdering()); [EOL]     assertEquals(true, r2.isNaturalOrdering()); [EOL] }
@Test [EOL] public void testIntersectionWith() { [EOL]     assertSame(intRange, intRange.intersectionWith(intRange)); [EOL]     assertSame(byteRange, byteRange.intersectionWith(byteRange)); [EOL]     assertSame(longRange, longRange.intersectionWith(longRange)); [EOL]     assertSame(floatRange, floatRange.intersectionWith(floatRange)); [EOL]     assertSame(doubleRange, doubleRange.intersectionWith(doubleRange)); [EOL]     assertEquals(Range.between(10, 15), intRange.intersectionWith(Range.between(5, 15))); [EOL] }
@SuppressWarnings({ "rawtypes", "unchecked" }) [EOL] @Test [EOL] public void testComparableConstructors() { [EOL]     final Comparable c = new Comparable() { [EOL]  [EOL]         @Override [EOL]         public int compareTo(final Object other) { [EOL]             return 1; [EOL]         } [EOL]     }; [EOL]     final Range r1 = Range.is(c); [EOL]     final Range r2 = Range.between(c, c); [EOL]     assertEquals(true, r1.isNaturalOrdering()); [EOL]     assertEquals(true, r2.isNaturalOrdering()); [EOL] }
@SuppressWarnings({ "rawtypes", "unchecked" }) [EOL] @Test [EOL] public void testComparableConstructors() { [EOL]     final Comparable c = new Comparable() { [EOL]  [EOL]         @Override [EOL]         public int compareTo(final Object other) { [EOL]             return 1; [EOL]         } [EOL]     }; [EOL]     final Range r1 = Range.is(c); [EOL]     final Range r2 = Range.between(c, c); [EOL]     assertEquals(true, r1.isNaturalOrdering()); [EOL]     assertEquals(true, r2.isNaturalOrdering()); [EOL] }
@Test [EOL] public void testIntersectionWith() { [EOL]     assertSame(intRange, intRange.intersectionWith(intRange)); [EOL]     assertSame(byteRange, byteRange.intersectionWith(byteRange)); [EOL]     assertSame(longRange, longRange.intersectionWith(longRange)); [EOL]     assertSame(floatRange, floatRange.intersectionWith(floatRange)); [EOL]     assertSame(doubleRange, doubleRange.intersectionWith(doubleRange)); [EOL]     assertEquals(Range.between(10, 15), intRange.intersectionWith(Range.between(5, 15))); [EOL] }
@Test [EOL] public void testIntersectionWith() { [EOL]     assertSame(intRange, intRange.intersectionWith(intRange)); [EOL]     assertSame(byteRange, byteRange.intersectionWith(byteRange)); [EOL]     assertSame(longRange, longRange.intersectionWith(longRange)); [EOL]     assertSame(floatRange, floatRange.intersectionWith(floatRange)); [EOL]     assertSame(doubleRange, doubleRange.intersectionWith(doubleRange)); [EOL]     assertEquals(Range.between(10, 15), intRange.intersectionWith(Range.between(5, 15))); [EOL] }
@Test [EOL] public void testIntersectionWith() { [EOL]     assertSame(intRange, intRange.intersectionWith(intRange)); [EOL]     assertSame(byteRange, byteRange.intersectionWith(byteRange)); [EOL]     assertSame(longRange, longRange.intersectionWith(longRange)); [EOL]     assertSame(floatRange, floatRange.intersectionWith(floatRange)); [EOL]     assertSame(doubleRange, doubleRange.intersectionWith(doubleRange)); [EOL]     assertEquals(Range.between(10, 15), intRange.intersectionWith(Range.between(5, 15))); [EOL] }
@Test [EOL] public void testIntersectionWith() { [EOL]     assertSame(intRange, intRange.intersectionWith(intRange)); [EOL]     assertSame(byteRange, byteRange.intersectionWith(byteRange)); [EOL]     assertSame(longRange, longRange.intersectionWith(longRange)); [EOL]     assertSame(floatRange, floatRange.intersectionWith(floatRange)); [EOL]     assertSame(doubleRange, doubleRange.intersectionWith(doubleRange)); [EOL]     assertEquals(Range.between(10, 15), intRange.intersectionWith(Range.between(5, 15))); [EOL] }
@Test [EOL] public void testIntersectionWith() { [EOL]     assertSame(intRange, intRange.intersectionWith(intRange)); [EOL]     assertSame(byteRange, byteRange.intersectionWith(byteRange)); [EOL]     assertSame(longRange, longRange.intersectionWith(longRange)); [EOL]     assertSame(floatRange, floatRange.intersectionWith(floatRange)); [EOL]     assertSame(doubleRange, doubleRange.intersectionWith(doubleRange)); [EOL]     assertEquals(Range.between(10, 15), intRange.intersectionWith(Range.between(5, 15))); [EOL] }
@Test [EOL] public void testIntersectionWith() { [EOL]     assertSame(intRange, intRange.intersectionWith(intRange)); [EOL]     assertSame(byteRange, byteRange.intersectionWith(byteRange)); [EOL]     assertSame(longRange, longRange.intersectionWith(longRange)); [EOL]     assertSame(floatRange, floatRange.intersectionWith(floatRange)); [EOL]     assertSame(doubleRange, doubleRange.intersectionWith(doubleRange)); [EOL]     assertEquals(Range.between(10, 15), intRange.intersectionWith(Range.between(5, 15))); [EOL] }
@Test [EOL] public void testIntersectionWith() { [EOL]     assertSame(intRange, intRange.intersectionWith(intRange)); [EOL]     assertSame(byteRange, byteRange.intersectionWith(byteRange)); [EOL]     assertSame(longRange, longRange.intersectionWith(longRange)); [EOL]     assertSame(floatRange, floatRange.intersectionWith(floatRange)); [EOL]     assertSame(doubleRange, doubleRange.intersectionWith(doubleRange)); [EOL]     assertEquals(Range.between(10, 15), intRange.intersectionWith(Range.between(5, 15))); [EOL] }
@Test [EOL] public void testIntersectionWith() { [EOL]     assertSame(intRange, intRange.intersectionWith(intRange)); [EOL]     assertSame(byteRange, byteRange.intersectionWith(byteRange)); [EOL]     assertSame(longRange, longRange.intersectionWith(longRange)); [EOL]     assertSame(floatRange, floatRange.intersectionWith(floatRange)); [EOL]     assertSame(doubleRange, doubleRange.intersectionWith(doubleRange)); [EOL]     assertEquals(Range.between(10, 15), intRange.intersectionWith(Range.between(5, 15))); [EOL] }
@Test [EOL] public void testIsBeforeRange() { [EOL]     assertFalse(intRange.isBeforeRange(null)); [EOL]     assertFalse(intRange.isBeforeRange(Range.between(5, 9))); [EOL]     assertFalse(intRange.isBeforeRange(Range.between(5, 10))); [EOL]     assertFalse(intRange.isBeforeRange(Range.between(5, 20))); [EOL]     assertFalse(intRange.isBeforeRange(Range.between(5, 25))); [EOL]     assertFalse(intRange.isBeforeRange(Range.between(15, 25))); [EOL]     assertTrue(intRange.isBeforeRange(Range.between(21, 25))); [EOL]     assertFalse(intRange.isBeforeRange(Range.between(10, 20))); [EOL] }
@Test [EOL] public void testIsBeforeRange() { [EOL]     assertFalse(intRange.isBeforeRange(null)); [EOL]     assertFalse(intRange.isBeforeRange(Range.between(5, 9))); [EOL]     assertFalse(intRange.isBeforeRange(Range.between(5, 10))); [EOL]     assertFalse(intRange.isBeforeRange(Range.between(5, 20))); [EOL]     assertFalse(intRange.isBeforeRange(Range.between(5, 25))); [EOL]     assertFalse(intRange.isBeforeRange(Range.between(15, 25))); [EOL]     assertTrue(intRange.isBeforeRange(Range.between(21, 25))); [EOL]     assertFalse(intRange.isBeforeRange(Range.between(10, 20))); [EOL] }
@Test [EOL] public void testIsBeforeRange() { [EOL]     assertFalse(intRange.isBeforeRange(null)); [EOL]     assertFalse(intRange.isBeforeRange(Range.between(5, 9))); [EOL]     assertFalse(intRange.isBeforeRange(Range.between(5, 10))); [EOL]     assertFalse(intRange.isBeforeRange(Range.between(5, 20))); [EOL]     assertFalse(intRange.isBeforeRange(Range.between(5, 25))); [EOL]     assertFalse(intRange.isBeforeRange(Range.between(15, 25))); [EOL]     assertTrue(intRange.isBeforeRange(Range.between(21, 25))); [EOL]     assertFalse(intRange.isBeforeRange(Range.between(10, 20))); [EOL] }
@Test [EOL] public void testIntersectionWith() { [EOL]     assertSame(intRange, intRange.intersectionWith(intRange)); [EOL]     assertSame(byteRange, byteRange.intersectionWith(byteRange)); [EOL]     assertSame(longRange, longRange.intersectionWith(longRange)); [EOL]     assertSame(floatRange, floatRange.intersectionWith(floatRange)); [EOL]     assertSame(doubleRange, doubleRange.intersectionWith(doubleRange)); [EOL]     assertEquals(Range.between(10, 15), intRange.intersectionWith(Range.between(5, 15))); [EOL] }
@Test [EOL] public void testIntersectionWith() { [EOL]     assertSame(intRange, intRange.intersectionWith(intRange)); [EOL]     assertSame(byteRange, byteRange.intersectionWith(byteRange)); [EOL]     assertSame(longRange, longRange.intersectionWith(longRange)); [EOL]     assertSame(floatRange, floatRange.intersectionWith(floatRange)); [EOL]     assertSame(doubleRange, doubleRange.intersectionWith(doubleRange)); [EOL]     assertEquals(Range.between(10, 15), intRange.intersectionWith(Range.between(5, 15))); [EOL] }
@Test [EOL] public void testIntersectionWith() { [EOL]     assertSame(intRange, intRange.intersectionWith(intRange)); [EOL]     assertSame(byteRange, byteRange.intersectionWith(byteRange)); [EOL]     assertSame(longRange, longRange.intersectionWith(longRange)); [EOL]     assertSame(floatRange, floatRange.intersectionWith(floatRange)); [EOL]     assertSame(doubleRange, doubleRange.intersectionWith(doubleRange)); [EOL]     assertEquals(Range.between(10, 15), intRange.intersectionWith(Range.between(5, 15))); [EOL] }
@Test [EOL] public void testIntersectionWith() { [EOL]     assertSame(intRange, intRange.intersectionWith(intRange)); [EOL]     assertSame(byteRange, byteRange.intersectionWith(byteRange)); [EOL]     assertSame(longRange, longRange.intersectionWith(longRange)); [EOL]     assertSame(floatRange, floatRange.intersectionWith(floatRange)); [EOL]     assertSame(doubleRange, doubleRange.intersectionWith(doubleRange)); [EOL]     assertEquals(Range.between(10, 15), intRange.intersectionWith(Range.between(5, 15))); [EOL] }
@Test [EOL] public void testIntersectionWith() { [EOL]     assertSame(intRange, intRange.intersectionWith(intRange)); [EOL]     assertSame(byteRange, byteRange.intersectionWith(byteRange)); [EOL]     assertSame(longRange, longRange.intersectionWith(longRange)); [EOL]     assertSame(floatRange, floatRange.intersectionWith(floatRange)); [EOL]     assertSame(doubleRange, doubleRange.intersectionWith(doubleRange)); [EOL]     assertEquals(Range.between(10, 15), intRange.intersectionWith(Range.between(5, 15))); [EOL] }
@Test [EOL] public void testIntersectionWith() { [EOL]     assertSame(intRange, intRange.intersectionWith(intRange)); [EOL]     assertSame(byteRange, byteRange.intersectionWith(byteRange)); [EOL]     assertSame(longRange, longRange.intersectionWith(longRange)); [EOL]     assertSame(floatRange, floatRange.intersectionWith(floatRange)); [EOL]     assertSame(doubleRange, doubleRange.intersectionWith(doubleRange)); [EOL]     assertEquals(Range.between(10, 15), intRange.intersectionWith(Range.between(5, 15))); [EOL] }
@Test [EOL] public void testIntersectionWith() { [EOL]     assertSame(intRange, intRange.intersectionWith(intRange)); [EOL]     assertSame(byteRange, byteRange.intersectionWith(byteRange)); [EOL]     assertSame(longRange, longRange.intersectionWith(longRange)); [EOL]     assertSame(floatRange, floatRange.intersectionWith(floatRange)); [EOL]     assertSame(doubleRange, doubleRange.intersectionWith(doubleRange)); [EOL]     assertEquals(Range.between(10, 15), intRange.intersectionWith(Range.between(5, 15))); [EOL] }
@Test [EOL] public void testIntersectionWith() { [EOL]     assertSame(intRange, intRange.intersectionWith(intRange)); [EOL]     assertSame(byteRange, byteRange.intersectionWith(byteRange)); [EOL]     assertSame(longRange, longRange.intersectionWith(longRange)); [EOL]     assertSame(floatRange, floatRange.intersectionWith(floatRange)); [EOL]     assertSame(doubleRange, doubleRange.intersectionWith(doubleRange)); [EOL]     assertEquals(Range.between(10, 15), intRange.intersectionWith(Range.between(5, 15))); [EOL] }
@Test [EOL] public void testIntersectionWith() { [EOL]     assertSame(intRange, intRange.intersectionWith(intRange)); [EOL]     assertSame(byteRange, byteRange.intersectionWith(byteRange)); [EOL]     assertSame(longRange, longRange.intersectionWith(longRange)); [EOL]     assertSame(floatRange, floatRange.intersectionWith(floatRange)); [EOL]     assertSame(doubleRange, doubleRange.intersectionWith(doubleRange)); [EOL]     assertEquals(Range.between(10, 15), intRange.intersectionWith(Range.between(5, 15))); [EOL] }
@Test [EOL] public void test_toStringExcludeCollectionWithNulls() { [EOL]     final List<String> excludeList = new ArrayList<String>(); [EOL]     excludeList.add(null); [EOL]     excludeList.add(null); [EOL]     final String toString = ReflectionToStringBuilder.toStringExclude(new TestFixture(), excludeList); [EOL]     this.validateSecretFieldPresent(toString); [EOL] }
@Test [EOL] public void test_toStringExcludeCollectionWithNulls() { [EOL]     final List<String> excludeList = new ArrayList<String>(); [EOL]     excludeList.add(null); [EOL]     excludeList.add(null); [EOL]     final String toString = ReflectionToStringBuilder.toStringExclude(new TestFixture(), excludeList); [EOL]     this.validateSecretFieldPresent(toString); [EOL] }
@Test [EOL] public void test_toStringExcludeCollectionWithNulls() { [EOL]     final List<String> excludeList = new ArrayList<String>(); [EOL]     excludeList.add(null); [EOL]     excludeList.add(null); [EOL]     final String toString = ReflectionToStringBuilder.toStringExclude(new TestFixture(), excludeList); [EOL]     this.validateSecretFieldPresent(toString); [EOL] }
@Test [EOL] public void test_toStringExcludeCollectionWithNulls() { [EOL]     final List<String> excludeList = new ArrayList<String>(); [EOL]     excludeList.add(null); [EOL]     excludeList.add(null); [EOL]     final String toString = ReflectionToStringBuilder.toStringExclude(new TestFixture(), excludeList); [EOL]     this.validateSecretFieldPresent(toString); [EOL] }
@Test [EOL] public void testReflectionByteArrayArray() { [EOL]     byte[][] array = new byte[][] { { 1, 2 }, null, { 5 } }; [EOL]     final String baseStr = this.toBaseString(array); [EOL]     assertEquals(baseStr + "[{{1,2},<null>,{5}}]", ToStringBuilder.reflectionToString(array)); [EOL]     array = null; [EOL]     assertReflectionArray("<null>", array); [EOL] }
@Test [EOL] public void testReflectionByteArrayArray() { [EOL]     byte[][] array = new byte[][] { { 1, 2 }, null, { 5 } }; [EOL]     final String baseStr = this.toBaseString(array); [EOL]     assertEquals(baseStr + "[{{1,2},<null>,{5}}]", ToStringBuilder.reflectionToString(array)); [EOL]     array = null; [EOL]     assertReflectionArray("<null>", array); [EOL] }
@Test [EOL] public void testReflectionByteArrayArray() { [EOL]     byte[][] array = new byte[][] { { 1, 2 }, null, { 5 } }; [EOL]     final String baseStr = this.toBaseString(array); [EOL]     assertEquals(baseStr + "[{{1,2},<null>,{5}}]", ToStringBuilder.reflectionToString(array)); [EOL]     array = null; [EOL]     assertReflectionArray("<null>", array); [EOL] }
@Test [EOL] public void testConstructors() { [EOL]     assertEquals(0, new MutableLong().longValue()); [EOL]     assertEquals(1, new MutableLong(1).longValue()); [EOL]     assertEquals(2, new MutableLong(Long.valueOf(2)).longValue()); [EOL]     assertEquals(3, new MutableLong(new MutableLong(3)).longValue()); [EOL]     assertEquals(2, new MutableLong("2").longValue()); [EOL] }
@Test [EOL] public void testConstructors() { [EOL]     assertEquals(0, new MutableLong().longValue()); [EOL]     assertEquals(1, new MutableLong(1).longValue()); [EOL]     assertEquals(2, new MutableLong(Long.valueOf(2)).longValue()); [EOL]     assertEquals(3, new MutableLong(new MutableLong(3)).longValue()); [EOL]     assertEquals(2, new MutableLong("2").longValue()); [EOL] }
@Test [EOL] public void testConstructors() { [EOL]     assertEquals(0, new MutableLong().longValue()); [EOL]     assertEquals(1, new MutableLong(1).longValue()); [EOL]     assertEquals(2, new MutableLong(Long.valueOf(2)).longValue()); [EOL]     assertEquals(3, new MutableLong(new MutableLong(3)).longValue()); [EOL]     assertEquals(2, new MutableLong("2").longValue()); [EOL] }
@Test [EOL] public void testConstructors() { [EOL]     assertEquals(0, new MutableLong().longValue()); [EOL]     assertEquals(1, new MutableLong(1).longValue()); [EOL]     assertEquals(2, new MutableLong(Long.valueOf(2)).longValue()); [EOL]     assertEquals(3, new MutableLong(new MutableLong(3)).longValue()); [EOL]     assertEquals(2, new MutableLong("2").longValue()); [EOL] }
@Test [EOL] public void testConstructors() { [EOL]     assertEquals(0, new MutableLong().longValue()); [EOL]     assertEquals(1, new MutableLong(1).longValue()); [EOL]     assertEquals(2, new MutableLong(Long.valueOf(2)).longValue()); [EOL]     assertEquals(3, new MutableLong(new MutableLong(3)).longValue()); [EOL]     assertEquals(2, new MutableLong("2").longValue()); [EOL] }
@Test [EOL] public void testConstructors() { [EOL]     assertEquals(0, new MutableLong().longValue()); [EOL]     assertEquals(1, new MutableLong(1).longValue()); [EOL]     assertEquals(2, new MutableLong(Long.valueOf(2)).longValue()); [EOL]     assertEquals(3, new MutableLong(new MutableLong(3)).longValue()); [EOL]     assertEquals(2, new MutableLong("2").longValue()); [EOL] }
@Test [EOL] public void testConstructors() { [EOL]     assertEquals(0, new MutableLong().longValue()); [EOL]     assertEquals(1, new MutableLong(1).longValue()); [EOL]     assertEquals(2, new MutableLong(Long.valueOf(2)).longValue()); [EOL]     assertEquals(3, new MutableLong(new MutableLong(3)).longValue()); [EOL]     assertEquals(2, new MutableLong("2").longValue()); [EOL] }
@Test [EOL] public void testConstructors() { [EOL]     assertEquals(0, new MutableLong().longValue()); [EOL]     assertEquals(1, new MutableLong(1).longValue()); [EOL]     assertEquals(2, new MutableLong(Long.valueOf(2)).longValue()); [EOL]     assertEquals(3, new MutableLong(new MutableLong(3)).longValue()); [EOL]     assertEquals(2, new MutableLong("2").longValue()); [EOL] }
@Test [EOL] public void testConstructors() { [EOL]     assertEquals(0, new MutableLong().longValue()); [EOL]     assertEquals(1, new MutableLong(1).longValue()); [EOL]     assertEquals(2, new MutableLong(Long.valueOf(2)).longValue()); [EOL]     assertEquals(3, new MutableLong(new MutableLong(3)).longValue()); [EOL]     assertEquals(2, new MutableLong("2").longValue()); [EOL] }
@Test [EOL] public void testConstructors() { [EOL]     assertEquals(0, new MutableLong().longValue()); [EOL]     assertEquals(1, new MutableLong(1).longValue()); [EOL]     assertEquals(2, new MutableLong(Long.valueOf(2)).longValue()); [EOL]     assertEquals(3, new MutableLong(new MutableLong(3)).longValue()); [EOL]     assertEquals(2, new MutableLong("2").longValue()); [EOL] }
@Test [EOL] public void testConstructors() { [EOL]     assertEquals(0, new MutableLong().longValue()); [EOL]     assertEquals(1, new MutableLong(1).longValue()); [EOL]     assertEquals(2, new MutableLong(Long.valueOf(2)).longValue()); [EOL]     assertEquals(3, new MutableLong(new MutableLong(3)).longValue()); [EOL]     assertEquals(2, new MutableLong("2").longValue()); [EOL] }
@Test [EOL] public void testConstructors() { [EOL]     assertEquals(0, new MutableLong().longValue()); [EOL]     assertEquals(1, new MutableLong(1).longValue()); [EOL]     assertEquals(2, new MutableLong(Long.valueOf(2)).longValue()); [EOL]     assertEquals(3, new MutableLong(new MutableLong(3)).longValue()); [EOL]     assertEquals(2, new MutableLong("2").longValue()); [EOL] }
@Test [EOL] public void testAddValuePrimitive() { [EOL]     final MutableLong mutNum = new MutableLong(1); [EOL]     mutNum.add(1); [EOL]     assertEquals(2, mutNum.intValue()); [EOL]     assertEquals(2L, mutNum.longValue()); [EOL] }
@Test [EOL] public void testAddValuePrimitive() { [EOL]     final MutableLong mutNum = new MutableLong(1); [EOL]     mutNum.add(1); [EOL]     assertEquals(2, mutNum.intValue()); [EOL]     assertEquals(2L, mutNum.longValue()); [EOL] }
@Test [EOL] public void testAddValuePrimitive() { [EOL]     final MutableLong mutNum = new MutableLong(1); [EOL]     mutNum.add(1); [EOL]     assertEquals(2, mutNum.intValue()); [EOL]     assertEquals(2L, mutNum.longValue()); [EOL] }
@Test [EOL] public void testConstructors() { [EOL]     assertEquals(0, new MutableLong().longValue()); [EOL]     assertEquals(1, new MutableLong(1).longValue()); [EOL]     assertEquals(2, new MutableLong(Long.valueOf(2)).longValue()); [EOL]     assertEquals(3, new MutableLong(new MutableLong(3)).longValue()); [EOL]     assertEquals(2, new MutableLong("2").longValue()); [EOL] }
@Test [EOL] public void testConstructors() { [EOL]     assertEquals(0, new MutableLong().longValue()); [EOL]     assertEquals(1, new MutableLong(1).longValue()); [EOL]     assertEquals(2, new MutableLong(Long.valueOf(2)).longValue()); [EOL]     assertEquals(3, new MutableLong(new MutableLong(3)).longValue()); [EOL]     assertEquals(2, new MutableLong("2").longValue()); [EOL] }
@Test [EOL] public void testConstructors() { [EOL]     assertEquals(0, new MutableLong().longValue()); [EOL]     assertEquals(1, new MutableLong(1).longValue()); [EOL]     assertEquals(2, new MutableLong(Long.valueOf(2)).longValue()); [EOL]     assertEquals(3, new MutableLong(new MutableLong(3)).longValue()); [EOL]     assertEquals(2, new MutableLong("2").longValue()); [EOL] }
@Test [EOL] public void testConstructors() { [EOL]     assertEquals(0, new MutableInt().intValue()); [EOL]     assertEquals(1, new MutableInt(1).intValue()); [EOL]     assertEquals(2, new MutableInt(Integer.valueOf(2)).intValue()); [EOL]     assertEquals(3, new MutableInt(new MutableLong(3)).intValue()); [EOL]     assertEquals(2, new MutableInt("2").intValue()); [EOL] }
@Test [EOL] public void testConstructors() { [EOL]     assertEquals(0, new MutableInt().intValue()); [EOL]     assertEquals(1, new MutableInt(1).intValue()); [EOL]     assertEquals(2, new MutableInt(Integer.valueOf(2)).intValue()); [EOL]     assertEquals(3, new MutableInt(new MutableLong(3)).intValue()); [EOL]     assertEquals(2, new MutableInt("2").intValue()); [EOL] }
@Test [EOL] public void testConstructors() { [EOL]     assertEquals(0, new MutableInt().intValue()); [EOL]     assertEquals(1, new MutableInt(1).intValue()); [EOL]     assertEquals(2, new MutableInt(Integer.valueOf(2)).intValue()); [EOL]     assertEquals(3, new MutableInt(new MutableLong(3)).intValue()); [EOL]     assertEquals(2, new MutableInt("2").intValue()); [EOL] }
@Test [EOL] public void testConstructors() { [EOL]     assertEquals(0, new MutableInt().intValue()); [EOL]     assertEquals(1, new MutableInt(1).intValue()); [EOL]     assertEquals(2, new MutableInt(Integer.valueOf(2)).intValue()); [EOL]     assertEquals(3, new MutableInt(new MutableLong(3)).intValue()); [EOL]     assertEquals(2, new MutableInt("2").intValue()); [EOL] }
@Test [EOL] public void testConstructors() { [EOL]     assertEquals(0, new MutableInt().intValue()); [EOL]     assertEquals(1, new MutableInt(1).intValue()); [EOL]     assertEquals(2, new MutableInt(Integer.valueOf(2)).intValue()); [EOL]     assertEquals(3, new MutableInt(new MutableLong(3)).intValue()); [EOL]     assertEquals(2, new MutableInt("2").intValue()); [EOL] }
@Test [EOL] public void testConstructors() { [EOL]     assertEquals(0, new MutableInt().intValue()); [EOL]     assertEquals(1, new MutableInt(1).intValue()); [EOL]     assertEquals(2, new MutableInt(Integer.valueOf(2)).intValue()); [EOL]     assertEquals(3, new MutableInt(new MutableLong(3)).intValue()); [EOL]     assertEquals(2, new MutableInt("2").intValue()); [EOL] }
@Test [EOL] public void testConstructors() { [EOL]     assertEquals(0, new MutableInt().intValue()); [EOL]     assertEquals(1, new MutableInt(1).intValue()); [EOL]     assertEquals(2, new MutableInt(Integer.valueOf(2)).intValue()); [EOL]     assertEquals(3, new MutableInt(new MutableLong(3)).intValue()); [EOL]     assertEquals(2, new MutableInt("2").intValue()); [EOL] }
@Test [EOL] public void testConstructors() { [EOL]     assertEquals(0, new MutableInt().intValue()); [EOL]     assertEquals(1, new MutableInt(1).intValue()); [EOL]     assertEquals(2, new MutableInt(Integer.valueOf(2)).intValue()); [EOL]     assertEquals(3, new MutableInt(new MutableLong(3)).intValue()); [EOL]     assertEquals(2, new MutableInt("2").intValue()); [EOL] }
@Test [EOL] public void testAddValuePrimitive() { [EOL]     final MutableInt mutNum = new MutableInt(1); [EOL]     mutNum.add(1); [EOL]     assertEquals(2, mutNum.intValue()); [EOL]     assertEquals(2L, mutNum.longValue()); [EOL] }
@Test [EOL] public void testAddValuePrimitive() { [EOL]     final MutableInt mutNum = new MutableInt(1); [EOL]     mutNum.add(1); [EOL]     assertEquals(2, mutNum.intValue()); [EOL]     assertEquals(2L, mutNum.longValue()); [EOL] }
@Test [EOL] public void testAddValuePrimitive() { [EOL]     final MutableInt mutNum = new MutableInt(1); [EOL]     mutNum.add(1); [EOL]     assertEquals(2, mutNum.intValue()); [EOL]     assertEquals(2L, mutNum.longValue()); [EOL] }
@Test [EOL] public void testHashCode() { [EOL]     final MutableInt mutNumA = new MutableInt(0); [EOL]     final MutableInt mutNumB = new MutableInt(0); [EOL]     final MutableInt mutNumC = new MutableInt(1); [EOL]     assertTrue(mutNumA.hashCode() == mutNumA.hashCode()); [EOL]     assertTrue(mutNumA.hashCode() == mutNumB.hashCode()); [EOL]     assertFalse(mutNumA.hashCode() == mutNumC.hashCode()); [EOL]     assertTrue(mutNumA.hashCode() == Integer.valueOf(0).hashCode()); [EOL] }
@Test [EOL] public void testConstructor() { [EOL]     assertNotNull(new ObjectUtils()); [EOL]     final Constructor<?>[] cons = ObjectUtils.class.getDeclaredConstructors(); [EOL]     assertEquals(1, cons.length); [EOL]     assertTrue(Modifier.isPublic(cons[0].getModifiers())); [EOL]     assertTrue(Modifier.isPublic(ObjectUtils.class.getModifiers())); [EOL]     assertFalse(Modifier.isFinal(ObjectUtils.class.getModifiers())); [EOL] }
@Test [EOL] public void testIdentityToStringStringBuffer() { [EOL]     final Integer i = Integer.valueOf(45); [EOL]     final String expected = "java.lang.Integer@" + Integer.toHexString(System.identityHashCode(i)); [EOL]     final StringBuffer buffer = new StringBuffer(); [EOL]     ObjectUtils.identityToString(buffer, i); [EOL]     assertEquals(expected, buffer.toString()); [EOL]     try { [EOL]         ObjectUtils.identityToString((StringBuffer) null, "tmp"); [EOL]         fail("NullPointerException expected"); [EOL]     } catch (final NullPointerException npe) { [EOL]     } [EOL]     try { [EOL]         ObjectUtils.identityToString(new StringBuffer(), null); [EOL]         fail("NullPointerException expected"); [EOL]     } catch (final NullPointerException npe) { [EOL]     } [EOL] }
@Test [EOL] public void testIdentityToStringStringBuffer() { [EOL]     final Integer i = Integer.valueOf(45); [EOL]     final String expected = "java.lang.Integer@" + Integer.toHexString(System.identityHashCode(i)); [EOL]     final StringBuffer buffer = new StringBuffer(); [EOL]     ObjectUtils.identityToString(buffer, i); [EOL]     assertEquals(expected, buffer.toString()); [EOL]     try { [EOL]         ObjectUtils.identityToString((StringBuffer) null, "tmp"); [EOL]         fail("NullPointerException expected"); [EOL]     } catch (final NullPointerException npe) { [EOL]     } [EOL]     try { [EOL]         ObjectUtils.identityToString(new StringBuffer(), null); [EOL]         fail("NullPointerException expected"); [EOL]     } catch (final NullPointerException npe) { [EOL]     } [EOL] }
@SuppressWarnings("unchecked") [EOL] @Test [EOL] public void testMode() { [EOL]     assertNull(ObjectUtils.mode((Object[]) null)); [EOL]     assertNull(ObjectUtils.mode()); [EOL]     assertNull(ObjectUtils.mode("foo", "bar", "baz")); [EOL]     assertNull(ObjectUtils.mode("foo", "bar", "baz", "foo", "bar")); [EOL]     assertEquals("foo", ObjectUtils.mode("foo", "bar", "baz", "foo")); [EOL]     assertEquals(Integer.valueOf(9), ObjectUtils.mode("foo", "bar", "baz", Integer.valueOf(9), Integer.valueOf(10), Integer.valueOf(9))); [EOL] }
@SuppressWarnings("unchecked") [EOL] @Test [EOL] public void testMode() { [EOL]     assertNull(ObjectUtils.mode((Object[]) null)); [EOL]     assertNull(ObjectUtils.mode()); [EOL]     assertNull(ObjectUtils.mode("foo", "bar", "baz")); [EOL]     assertNull(ObjectUtils.mode("foo", "bar", "baz", "foo", "bar")); [EOL]     assertEquals("foo", ObjectUtils.mode("foo", "bar", "baz", "foo")); [EOL]     assertEquals(Integer.valueOf(9), ObjectUtils.mode("foo", "bar", "baz", Integer.valueOf(9), Integer.valueOf(10), Integer.valueOf(9))); [EOL] }
@Test(expected = NoSuchMethodException.class) [EOL] public void testCloneOfUncloneable() throws Throwable { [EOL]     final UncloneableString string = new UncloneableString("apache"); [EOL]     try { [EOL]         ObjectUtils.clone(string); [EOL]         fail("Thrown " + CloneFailedException.class.getName() + " expected"); [EOL]     } catch (final CloneFailedException e) { [EOL]         throw e.getCause(); [EOL]     } [EOL] }
@Test(expected = NoSuchMethodException.class) [EOL] public void testCloneOfUncloneable() throws Throwable { [EOL]     final UncloneableString string = new UncloneableString("apache"); [EOL]     try { [EOL]         ObjectUtils.clone(string); [EOL]         fail("Thrown " + CloneFailedException.class.getName() + " expected"); [EOL]     } catch (final CloneFailedException e) { [EOL]         throw e.getCause(); [EOL]     } [EOL] }
@Test(expected = NoSuchMethodException.class) [EOL] public void testCloneOfUncloneable() throws Throwable { [EOL]     final UncloneableString string = new UncloneableString("apache"); [EOL]     try { [EOL]         ObjectUtils.clone(string); [EOL]         fail("Thrown " + CloneFailedException.class.getName() + " expected"); [EOL]     } catch (final CloneFailedException e) { [EOL]         throw e.getCause(); [EOL]     } [EOL] }
@Test(expected = NoSuchMethodException.class) [EOL] public void testCloneOfUncloneable() throws Throwable { [EOL]     final UncloneableString string = new UncloneableString("apache"); [EOL]     try { [EOL]         ObjectUtils.clone(string); [EOL]         fail("Thrown " + CloneFailedException.class.getName() + " expected"); [EOL]     } catch (final CloneFailedException e) { [EOL]         throw e.getCause(); [EOL]     } [EOL] }
@Test(expected = NoSuchMethodException.class) [EOL] public void testCloneOfUncloneable() throws Throwable { [EOL]     final UncloneableString string = new UncloneableString("apache"); [EOL]     try { [EOL]         ObjectUtils.clone(string); [EOL]         fail("Thrown " + CloneFailedException.class.getName() + " expected"); [EOL]     } catch (final CloneFailedException e) { [EOL]         throw e.getCause(); [EOL]     } [EOL] }
@Test(expected = NoSuchMethodException.class) [EOL] public void testCloneOfUncloneable() throws Throwable { [EOL]     final UncloneableString string = new UncloneableString("apache"); [EOL]     try { [EOL]         ObjectUtils.clone(string); [EOL]         fail("Thrown " + CloneFailedException.class.getName() + " expected"); [EOL]     } catch (final CloneFailedException e) { [EOL]         throw e.getCause(); [EOL]     } [EOL] }
@Test [EOL] public void testNotEmptyCollection1() { [EOL]     final Collection<Integer> coll = new ArrayList<Integer>(); [EOL]     try { [EOL]         Validate.notEmpty((Collection<?>) null); [EOL]         fail("Expecting NullPointerException"); [EOL]     } catch (final NullPointerException ex) { [EOL]         assertEquals("The validated collection is empty", ex.getMessage()); [EOL]     } [EOL]     try { [EOL]         Validate.notEmpty(coll); [EOL]         fail("Expecting IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]         assertEquals("The validated collection is empty", ex.getMessage()); [EOL]     } [EOL]     coll.add(Integer.valueOf(8)); [EOL]     Validate.notEmpty(coll); [EOL]     final Collection<Integer> test = Validate.notEmpty(coll); [EOL]     assertSame(coll, test); [EOL] }
@Test [EOL] public void testNotEmptyCollection1() { [EOL]     final Collection<Integer> coll = new ArrayList<Integer>(); [EOL]     try { [EOL]         Validate.notEmpty((Collection<?>) null); [EOL]         fail("Expecting NullPointerException"); [EOL]     } catch (final NullPointerException ex) { [EOL]         assertEquals("The validated collection is empty", ex.getMessage()); [EOL]     } [EOL]     try { [EOL]         Validate.notEmpty(coll); [EOL]         fail("Expecting IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]         assertEquals("The validated collection is empty", ex.getMessage()); [EOL]     } [EOL]     coll.add(Integer.valueOf(8)); [EOL]     Validate.notEmpty(coll); [EOL]     final Collection<Integer> test = Validate.notEmpty(coll); [EOL]     assertSame(coll, test); [EOL] }
@Test [EOL] public void testNotEmptyCollection1() { [EOL]     final Collection<Integer> coll = new ArrayList<Integer>(); [EOL]     try { [EOL]         Validate.notEmpty((Collection<?>) null); [EOL]         fail("Expecting NullPointerException"); [EOL]     } catch (final NullPointerException ex) { [EOL]         assertEquals("The validated collection is empty", ex.getMessage()); [EOL]     } [EOL]     try { [EOL]         Validate.notEmpty(coll); [EOL]         fail("Expecting IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]         assertEquals("The validated collection is empty", ex.getMessage()); [EOL]     } [EOL]     coll.add(Integer.valueOf(8)); [EOL]     Validate.notEmpty(coll); [EOL]     final Collection<Integer> test = Validate.notEmpty(coll); [EOL]     assertSame(coll, test); [EOL] }
@Test [EOL] public void testNotEmptyCollection1() { [EOL]     final Collection<Integer> coll = new ArrayList<Integer>(); [EOL]     try { [EOL]         Validate.notEmpty((Collection<?>) null); [EOL]         fail("Expecting NullPointerException"); [EOL]     } catch (final NullPointerException ex) { [EOL]         assertEquals("The validated collection is empty", ex.getMessage()); [EOL]     } [EOL]     try { [EOL]         Validate.notEmpty(coll); [EOL]         fail("Expecting IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]         assertEquals("The validated collection is empty", ex.getMessage()); [EOL]     } [EOL]     coll.add(Integer.valueOf(8)); [EOL]     Validate.notEmpty(coll); [EOL]     final Collection<Integer> test = Validate.notEmpty(coll); [EOL]     assertSame(coll, test); [EOL] }
@Test [EOL] public void testNotEmptyMap1() { [EOL]     final Map<String, Integer> map = new HashMap<String, Integer>(); [EOL]     try { [EOL]         Validate.notEmpty((Map<?, ?>) null); [EOL]         fail("Expecting NullPointerException"); [EOL]     } catch (final NullPointerException ex) { [EOL]         assertEquals("The validated map is empty", ex.getMessage()); [EOL]     } [EOL]     try { [EOL]         Validate.notEmpty(map); [EOL]         fail("Expecting IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]         assertEquals("The validated map is empty", ex.getMessage()); [EOL]     } [EOL]     map.put("ll", Integer.valueOf(8)); [EOL]     Validate.notEmpty(map); [EOL]     final Map<String, Integer> test = Validate.notEmpty(map); [EOL]     assertSame(map, test); [EOL] }
@Test [EOL] public void testNotEmptyMap1() { [EOL]     final Map<String, Integer> map = new HashMap<String, Integer>(); [EOL]     try { [EOL]         Validate.notEmpty((Map<?, ?>) null); [EOL]         fail("Expecting NullPointerException"); [EOL]     } catch (final NullPointerException ex) { [EOL]         assertEquals("The validated map is empty", ex.getMessage()); [EOL]     } [EOL]     try { [EOL]         Validate.notEmpty(map); [EOL]         fail("Expecting IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]         assertEquals("The validated map is empty", ex.getMessage()); [EOL]     } [EOL]     map.put("ll", Integer.valueOf(8)); [EOL]     Validate.notEmpty(map); [EOL]     final Map<String, Integer> test = Validate.notEmpty(map); [EOL]     assertSame(map, test); [EOL] }
@Test [EOL] public void testNotEmptyMap1() { [EOL]     final Map<String, Integer> map = new HashMap<String, Integer>(); [EOL]     try { [EOL]         Validate.notEmpty((Map<?, ?>) null); [EOL]         fail("Expecting NullPointerException"); [EOL]     } catch (final NullPointerException ex) { [EOL]         assertEquals("The validated map is empty", ex.getMessage()); [EOL]     } [EOL]     try { [EOL]         Validate.notEmpty(map); [EOL]         fail("Expecting IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]         assertEquals("The validated map is empty", ex.getMessage()); [EOL]     } [EOL]     map.put("ll", Integer.valueOf(8)); [EOL]     Validate.notEmpty(map); [EOL]     final Map<String, Integer> test = Validate.notEmpty(map); [EOL]     assertSame(map, test); [EOL] }
@Test [EOL] public void testNotEmptyMap1() { [EOL]     final Map<String, Integer> map = new HashMap<String, Integer>(); [EOL]     try { [EOL]         Validate.notEmpty((Map<?, ?>) null); [EOL]         fail("Expecting NullPointerException"); [EOL]     } catch (final NullPointerException ex) { [EOL]         assertEquals("The validated map is empty", ex.getMessage()); [EOL]     } [EOL]     try { [EOL]         Validate.notEmpty(map); [EOL]         fail("Expecting IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]         assertEquals("The validated map is empty", ex.getMessage()); [EOL]     } [EOL]     map.put("ll", Integer.valueOf(8)); [EOL]     Validate.notEmpty(map); [EOL]     final Map<String, Integer> test = Validate.notEmpty(map); [EOL]     assertSame(map, test); [EOL] }
@Test [EOL] public void testNotBlankMsgBlankStringShouldThrow() { [EOL]     final String string = " \n \t \r \n "; [EOL]     try { [EOL]         Validate.notBlank(string, "Message"); [EOL]         fail("Expecting IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]         assertEquals("Message", e.getMessage()); [EOL]     } [EOL] }
@Test [EOL] public void testNotBlankMsgBlankStringShouldThrow() { [EOL]     final String string = " \n \t \r \n "; [EOL]     try { [EOL]         Validate.notBlank(string, "Message"); [EOL]         fail("Expecting IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]         assertEquals("Message", e.getMessage()); [EOL]     } [EOL] }
@Test [EOL] public void testNotBlankMsgBlankStringShouldThrow() { [EOL]     final String string = " \n \t \r \n "; [EOL]     try { [EOL]         Validate.notBlank(string, "Message"); [EOL]         fail("Expecting IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]         assertEquals("Message", e.getMessage()); [EOL]     } [EOL] }
@Test [EOL] public void testNotBlankBlankStringWithWhitespacesShouldThrow() { [EOL]     final String string = "   "; [EOL]     try { [EOL]         Validate.notBlank(string); [EOL]         fail("Expecting IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]         assertEquals("The validated character sequence is blank", e.getMessage()); [EOL]     } [EOL] }
@Test [EOL] public void testNotBlankBlankStringWithWhitespacesShouldThrow() { [EOL]     final String string = "   "; [EOL]     try { [EOL]         Validate.notBlank(string); [EOL]         fail("Expecting IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]         assertEquals("The validated character sequence is blank", e.getMessage()); [EOL]     } [EOL] }
@Test [EOL] public void testNotBlankBlankStringWithWhitespacesShouldThrow() { [EOL]     final String string = "   "; [EOL]     try { [EOL]         Validate.notBlank(string); [EOL]         fail("Expecting IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]         assertEquals("The validated character sequence is blank", e.getMessage()); [EOL]     } [EOL] }
@Test [EOL] public void testNotBlankBlankStringWithWhitespacesShouldThrow() { [EOL]     final String string = "   "; [EOL]     try { [EOL]         Validate.notBlank(string); [EOL]         fail("Expecting IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]         assertEquals("The validated character sequence is blank", e.getMessage()); [EOL]     } [EOL] }
@Test [EOL] public void testNoNullElementsCollection1() { [EOL]     final List<String> coll = new ArrayList<String>(); [EOL]     coll.add("a"); [EOL]     coll.add("b"); [EOL]     Validate.noNullElements(coll); [EOL]     try { [EOL]         Validate.noNullElements((Collection<?>) null); [EOL]         fail("Expecting NullPointerException"); [EOL]     } catch (final NullPointerException ex) { [EOL]         assertEquals("The validated object is null", ex.getMessage()); [EOL]     } [EOL]     coll.set(1, null); [EOL]     try { [EOL]         Validate.noNullElements(coll); [EOL]         fail("Expecting IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]         assertEquals("The validated collection contains null element at index: 1", ex.getMessage()); [EOL]     } [EOL]     coll.set(1, "b"); [EOL]     final List<String> test = Validate.noNullElements(coll); [EOL]     assertSame(coll, test); [EOL] }
@Test [EOL] public void testNoNullElementsCollection1() { [EOL]     final List<String> coll = new ArrayList<String>(); [EOL]     coll.add("a"); [EOL]     coll.add("b"); [EOL]     Validate.noNullElements(coll); [EOL]     try { [EOL]         Validate.noNullElements((Collection<?>) null); [EOL]         fail("Expecting NullPointerException"); [EOL]     } catch (final NullPointerException ex) { [EOL]         assertEquals("The validated object is null", ex.getMessage()); [EOL]     } [EOL]     coll.set(1, null); [EOL]     try { [EOL]         Validate.noNullElements(coll); [EOL]         fail("Expecting IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]         assertEquals("The validated collection contains null element at index: 1", ex.getMessage()); [EOL]     } [EOL]     coll.set(1, "b"); [EOL]     final List<String> test = Validate.noNullElements(coll); [EOL]     assertSame(coll, test); [EOL] }
@Test [EOL] public void testNoNullElementsCollection1() { [EOL]     final List<String> coll = new ArrayList<String>(); [EOL]     coll.add("a"); [EOL]     coll.add("b"); [EOL]     Validate.noNullElements(coll); [EOL]     try { [EOL]         Validate.noNullElements((Collection<?>) null); [EOL]         fail("Expecting NullPointerException"); [EOL]     } catch (final NullPointerException ex) { [EOL]         assertEquals("The validated object is null", ex.getMessage()); [EOL]     } [EOL]     coll.set(1, null); [EOL]     try { [EOL]         Validate.noNullElements(coll); [EOL]         fail("Expecting IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]         assertEquals("The validated collection contains null element at index: 1", ex.getMessage()); [EOL]     } [EOL]     coll.set(1, "b"); [EOL]     final List<String> test = Validate.noNullElements(coll); [EOL]     assertSame(coll, test); [EOL] }
@Test [EOL] public void testNoNullElementsCollection1() { [EOL]     final List<String> coll = new ArrayList<String>(); [EOL]     coll.add("a"); [EOL]     coll.add("b"); [EOL]     Validate.noNullElements(coll); [EOL]     try { [EOL]         Validate.noNullElements((Collection<?>) null); [EOL]         fail("Expecting NullPointerException"); [EOL]     } catch (final NullPointerException ex) { [EOL]         assertEquals("The validated object is null", ex.getMessage()); [EOL]     } [EOL]     coll.set(1, null); [EOL]     try { [EOL]         Validate.noNullElements(coll); [EOL]         fail("Expecting IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]         assertEquals("The validated collection contains null element at index: 1", ex.getMessage()); [EOL]     } [EOL]     coll.set(1, "b"); [EOL]     final List<String> test = Validate.noNullElements(coll); [EOL]     assertSame(coll, test); [EOL] }
@Test [EOL] public void testNoNullElementsCollection1() { [EOL]     final List<String> coll = new ArrayList<String>(); [EOL]     coll.add("a"); [EOL]     coll.add("b"); [EOL]     Validate.noNullElements(coll); [EOL]     try { [EOL]         Validate.noNullElements((Collection<?>) null); [EOL]         fail("Expecting NullPointerException"); [EOL]     } catch (final NullPointerException ex) { [EOL]         assertEquals("The validated object is null", ex.getMessage()); [EOL]     } [EOL]     coll.set(1, null); [EOL]     try { [EOL]         Validate.noNullElements(coll); [EOL]         fail("Expecting IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]         assertEquals("The validated collection contains null element at index: 1", ex.getMessage()); [EOL]     } [EOL]     coll.set(1, "b"); [EOL]     final List<String> test = Validate.noNullElements(coll); [EOL]     assertSame(coll, test); [EOL] }
@Test [EOL] public void testNoNullElementsCollection1() { [EOL]     final List<String> coll = new ArrayList<String>(); [EOL]     coll.add("a"); [EOL]     coll.add("b"); [EOL]     Validate.noNullElements(coll); [EOL]     try { [EOL]         Validate.noNullElements((Collection<?>) null); [EOL]         fail("Expecting NullPointerException"); [EOL]     } catch (final NullPointerException ex) { [EOL]         assertEquals("The validated object is null", ex.getMessage()); [EOL]     } [EOL]     coll.set(1, null); [EOL]     try { [EOL]         Validate.noNullElements(coll); [EOL]         fail("Expecting IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]         assertEquals("The validated collection contains null element at index: 1", ex.getMessage()); [EOL]     } [EOL]     coll.set(1, "b"); [EOL]     final List<String> test = Validate.noNullElements(coll); [EOL]     assertSame(coll, test); [EOL] }
@Test [EOL] public void testMatchesPattern_withMessage() { [EOL]     final CharSequence str = "hi"; [EOL]     Validate.matchesPattern(str, "[a-z]*", "Does not match"); [EOL]     try { [EOL]         Validate.matchesPattern(str, "[0-9]*", "Does not match"); [EOL]         fail("Expecting IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]         assertEquals("Does not match", e.getMessage()); [EOL]     } [EOL] }
@Test [EOL] public void testMatchesPattern_withMessage() { [EOL]     final CharSequence str = "hi"; [EOL]     Validate.matchesPattern(str, "[a-z]*", "Does not match"); [EOL]     try { [EOL]         Validate.matchesPattern(str, "[0-9]*", "Does not match"); [EOL]         fail("Expecting IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]         assertEquals("Does not match", e.getMessage()); [EOL]     } [EOL] }
@Test [EOL] public void testMatchesPattern_withMessage() { [EOL]     final CharSequence str = "hi"; [EOL]     Validate.matchesPattern(str, "[a-z]*", "Does not match"); [EOL]     try { [EOL]         Validate.matchesPattern(str, "[0-9]*", "Does not match"); [EOL]         fail("Expecting IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]         assertEquals("Does not match", e.getMessage()); [EOL]     } [EOL] }
@Test [EOL] public void testMatchesPattern_withMessage() { [EOL]     final CharSequence str = "hi"; [EOL]     Validate.matchesPattern(str, "[a-z]*", "Does not match"); [EOL]     try { [EOL]         Validate.matchesPattern(str, "[0-9]*", "Does not match"); [EOL]         fail("Expecting IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]         assertEquals("Does not match", e.getMessage()); [EOL]     } [EOL] }
@Test [EOL] public void testMatchesPattern_withMessage() { [EOL]     final CharSequence str = "hi"; [EOL]     Validate.matchesPattern(str, "[a-z]*", "Does not match"); [EOL]     try { [EOL]         Validate.matchesPattern(str, "[0-9]*", "Does not match"); [EOL]         fail("Expecting IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]         assertEquals("Does not match", e.getMessage()); [EOL]     } [EOL] }
@Test [EOL] public void testInclusiveBetween() { [EOL]     Validate.inclusiveBetween("a", "c", "b"); [EOL]     Validate.inclusiveBetween(0, 2, 1); [EOL]     Validate.inclusiveBetween(0, 2, 2); [EOL]     try { [EOL]         Validate.inclusiveBetween(0, 5, 6); [EOL]         fail("Expecting IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]         assertEquals("The value 6 is not in the specified inclusive range of 0 to 5", e.getMessage()); [EOL]     } [EOL] }
@Test [EOL] public void testInclusiveBetween() { [EOL]     Validate.inclusiveBetween("a", "c", "b"); [EOL]     Validate.inclusiveBetween(0, 2, 1); [EOL]     Validate.inclusiveBetween(0, 2, 2); [EOL]     try { [EOL]         Validate.inclusiveBetween(0, 5, 6); [EOL]         fail("Expecting IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]         assertEquals("The value 6 is not in the specified inclusive range of 0 to 5", e.getMessage()); [EOL]     } [EOL] }
@Test [EOL] public void testInclusiveBetween() { [EOL]     Validate.inclusiveBetween("a", "c", "b"); [EOL]     Validate.inclusiveBetween(0, 2, 1); [EOL]     Validate.inclusiveBetween(0, 2, 2); [EOL]     try { [EOL]         Validate.inclusiveBetween(0, 5, 6); [EOL]         fail("Expecting IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]         assertEquals("The value 6 is not in the specified inclusive range of 0 to 5", e.getMessage()); [EOL]     } [EOL] }
@Test [EOL] public void testInclusiveBetween() { [EOL]     Validate.inclusiveBetween("a", "c", "b"); [EOL]     Validate.inclusiveBetween(0, 2, 1); [EOL]     Validate.inclusiveBetween(0, 2, 2); [EOL]     try { [EOL]         Validate.inclusiveBetween(0, 5, 6); [EOL]         fail("Expecting IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]         assertEquals("The value 6 is not in the specified inclusive range of 0 to 5", e.getMessage()); [EOL]     } [EOL] }
@Test [EOL] public void testInclusiveBetween() { [EOL]     Validate.inclusiveBetween("a", "c", "b"); [EOL]     Validate.inclusiveBetween(0, 2, 1); [EOL]     Validate.inclusiveBetween(0, 2, 2); [EOL]     try { [EOL]         Validate.inclusiveBetween(0, 5, 6); [EOL]         fail("Expecting IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]         assertEquals("The value 6 is not in the specified inclusive range of 0 to 5", e.getMessage()); [EOL]     } [EOL] }
@Test [EOL] public void testIsAssignable_withMessage() { [EOL]     Validate.isAssignableFrom(CharSequence.class, String.class, "Error"); [EOL]     Validate.isAssignableFrom(AbstractList.class, ArrayList.class, "Error"); [EOL]     try { [EOL]         Validate.isAssignableFrom(List.class, String.class, "Error"); [EOL]         fail("Expecting IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]         assertEquals("Error", e.getMessage()); [EOL]     } [EOL] }
@Test [EOL] public void testHashCode() { [EOL]     final MutableBoolean mutBoolA = new MutableBoolean(false); [EOL]     final MutableBoolean mutBoolB = new MutableBoolean(false); [EOL]     final MutableBoolean mutBoolC = new MutableBoolean(true); [EOL]     assertEquals(mutBoolA.hashCode(), mutBoolA.hashCode()); [EOL]     assertEquals(mutBoolA.hashCode(), mutBoolB.hashCode()); [EOL]     assertFalse(mutBoolA.hashCode() == mutBoolC.hashCode()); [EOL]     assertEquals(mutBoolA.hashCode(), Boolean.FALSE.hashCode()); [EOL]     assertEquals(mutBoolC.hashCode(), Boolean.TRUE.hashCode()); [EOL] }
@Test [EOL] public void testHashCode() { [EOL]     final MutableBoolean mutBoolA = new MutableBoolean(false); [EOL]     final MutableBoolean mutBoolB = new MutableBoolean(false); [EOL]     final MutableBoolean mutBoolC = new MutableBoolean(true); [EOL]     assertEquals(mutBoolA.hashCode(), mutBoolA.hashCode()); [EOL]     assertEquals(mutBoolA.hashCode(), mutBoolB.hashCode()); [EOL]     assertFalse(mutBoolA.hashCode() == mutBoolC.hashCode()); [EOL]     assertEquals(mutBoolA.hashCode(), Boolean.FALSE.hashCode()); [EOL]     assertEquals(mutBoolC.hashCode(), Boolean.TRUE.hashCode()); [EOL] }
@Test [EOL] public void testFormatDurationISO() { [EOL]     assertEquals("P0Y0M0DT0H0M0.000S", DurationFormatUtils.formatDurationISO(0L)); [EOL]     assertEquals("P0Y0M0DT0H0M0.001S", DurationFormatUtils.formatDurationISO(1L)); [EOL]     assertEquals("P0Y0M0DT0H0M0.010S", DurationFormatUtils.formatDurationISO(10L)); [EOL]     assertEquals("P0Y0M0DT0H0M0.100S", DurationFormatUtils.formatDurationISO(100L)); [EOL]     assertEquals("P0Y0M0DT0H1M15.321S", DurationFormatUtils.formatDurationISO(75321L)); [EOL] }
@Test [EOL] public void testFormatDurationISO() { [EOL]     assertEquals("P0Y0M0DT0H0M0.000S", DurationFormatUtils.formatDurationISO(0L)); [EOL]     assertEquals("P0Y0M0DT0H0M0.001S", DurationFormatUtils.formatDurationISO(1L)); [EOL]     assertEquals("P0Y0M0DT0H0M0.010S", DurationFormatUtils.formatDurationISO(10L)); [EOL]     assertEquals("P0Y0M0DT0H0M0.100S", DurationFormatUtils.formatDurationISO(100L)); [EOL]     assertEquals("P0Y0M0DT0H1M15.321S", DurationFormatUtils.formatDurationISO(75321L)); [EOL] }
@Test [EOL] public void testFormatDurationISO() { [EOL]     assertEquals("P0Y0M0DT0H0M0.000S", DurationFormatUtils.formatDurationISO(0L)); [EOL]     assertEquals("P0Y0M0DT0H0M0.001S", DurationFormatUtils.formatDurationISO(1L)); [EOL]     assertEquals("P0Y0M0DT0H0M0.010S", DurationFormatUtils.formatDurationISO(10L)); [EOL]     assertEquals("P0Y0M0DT0H0M0.100S", DurationFormatUtils.formatDurationISO(100L)); [EOL]     assertEquals("P0Y0M0DT0H1M15.321S", DurationFormatUtils.formatDurationISO(75321L)); [EOL] }
@Test [EOL] public void testFormatDuration() { [EOL]     long duration = 0; [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "y")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "M")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "d")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "H")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "m")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "s")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "S")); [EOL]     assertEquals("0000", DurationFormatUtils.formatDuration(duration, "SSSS")); [EOL]     assertEquals("0000", DurationFormatUtils.formatDuration(duration, "yyyy")); [EOL]     assertEquals("0000", DurationFormatUtils.formatDuration(duration, "yyMM")); [EOL]     duration = 60 * 1000; [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "y")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "M")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "d")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "H")); [EOL]     assertEquals("1", DurationFormatUtils.formatDuration(duration, "m")); [EOL]     assertEquals("60", DurationFormatUtils.formatDuration(duration, "s")); [EOL]     assertEquals("60000", DurationFormatUtils.formatDuration(duration, "S")); [EOL]     assertEquals("01:00", DurationFormatUtils.formatDuration(duration, "mm:ss")); [EOL]     final Calendar base = Calendar.getInstance(); [EOL]     base.set(2000, 0, 1, 0, 0, 0); [EOL]     base.set(Calendar.MILLISECOND, 0); [EOL]     final Calendar cal = Calendar.getInstance(); [EOL]     cal.set(2003, 1, 1, 0, 0, 0); [EOL]     cal.set(Calendar.MILLISECOND, 0); [EOL]     duration = cal.getTime().getTime() - base.getTime().getTime(); [EOL]     final int days = 366 + 365 + 365 + 31; [EOL]     assertEquals("0 0 " + days, DurationFormatUtils.formatDuration(duration, "y M d")); [EOL] }
@Test [EOL] public void testFormatDuration() { [EOL]     long duration = 0; [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "y")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "M")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "d")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "H")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "m")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "s")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "S")); [EOL]     assertEquals("0000", DurationFormatUtils.formatDuration(duration, "SSSS")); [EOL]     assertEquals("0000", DurationFormatUtils.formatDuration(duration, "yyyy")); [EOL]     assertEquals("0000", DurationFormatUtils.formatDuration(duration, "yyMM")); [EOL]     duration = 60 * 1000; [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "y")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "M")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "d")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "H")); [EOL]     assertEquals("1", DurationFormatUtils.formatDuration(duration, "m")); [EOL]     assertEquals("60", DurationFormatUtils.formatDuration(duration, "s")); [EOL]     assertEquals("60000", DurationFormatUtils.formatDuration(duration, "S")); [EOL]     assertEquals("01:00", DurationFormatUtils.formatDuration(duration, "mm:ss")); [EOL]     final Calendar base = Calendar.getInstance(); [EOL]     base.set(2000, 0, 1, 0, 0, 0); [EOL]     base.set(Calendar.MILLISECOND, 0); [EOL]     final Calendar cal = Calendar.getInstance(); [EOL]     cal.set(2003, 1, 1, 0, 0, 0); [EOL]     cal.set(Calendar.MILLISECOND, 0); [EOL]     duration = cal.getTime().getTime() - base.getTime().getTime(); [EOL]     final int days = 366 + 365 + 365 + 31; [EOL]     assertEquals("0 0 " + days, DurationFormatUtils.formatDuration(duration, "y M d")); [EOL] }
@Test [EOL] public void testFormatDuration() { [EOL]     long duration = 0; [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "y")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "M")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "d")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "H")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "m")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "s")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "S")); [EOL]     assertEquals("0000", DurationFormatUtils.formatDuration(duration, "SSSS")); [EOL]     assertEquals("0000", DurationFormatUtils.formatDuration(duration, "yyyy")); [EOL]     assertEquals("0000", DurationFormatUtils.formatDuration(duration, "yyMM")); [EOL]     duration = 60 * 1000; [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "y")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "M")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "d")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "H")); [EOL]     assertEquals("1", DurationFormatUtils.formatDuration(duration, "m")); [EOL]     assertEquals("60", DurationFormatUtils.formatDuration(duration, "s")); [EOL]     assertEquals("60000", DurationFormatUtils.formatDuration(duration, "S")); [EOL]     assertEquals("01:00", DurationFormatUtils.formatDuration(duration, "mm:ss")); [EOL]     final Calendar base = Calendar.getInstance(); [EOL]     base.set(2000, 0, 1, 0, 0, 0); [EOL]     base.set(Calendar.MILLISECOND, 0); [EOL]     final Calendar cal = Calendar.getInstance(); [EOL]     cal.set(2003, 1, 1, 0, 0, 0); [EOL]     cal.set(Calendar.MILLISECOND, 0); [EOL]     duration = cal.getTime().getTime() - base.getTime().getTime(); [EOL]     final int days = 366 + 365 + 365 + 31; [EOL]     assertEquals("0 0 " + days, DurationFormatUtils.formatDuration(duration, "y M d")); [EOL] }
@Test [EOL] public void testFormatDuration() { [EOL]     long duration = 0; [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "y")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "M")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "d")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "H")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "m")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "s")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "S")); [EOL]     assertEquals("0000", DurationFormatUtils.formatDuration(duration, "SSSS")); [EOL]     assertEquals("0000", DurationFormatUtils.formatDuration(duration, "yyyy")); [EOL]     assertEquals("0000", DurationFormatUtils.formatDuration(duration, "yyMM")); [EOL]     duration = 60 * 1000; [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "y")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "M")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "d")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "H")); [EOL]     assertEquals("1", DurationFormatUtils.formatDuration(duration, "m")); [EOL]     assertEquals("60", DurationFormatUtils.formatDuration(duration, "s")); [EOL]     assertEquals("60000", DurationFormatUtils.formatDuration(duration, "S")); [EOL]     assertEquals("01:00", DurationFormatUtils.formatDuration(duration, "mm:ss")); [EOL]     final Calendar base = Calendar.getInstance(); [EOL]     base.set(2000, 0, 1, 0, 0, 0); [EOL]     base.set(Calendar.MILLISECOND, 0); [EOL]     final Calendar cal = Calendar.getInstance(); [EOL]     cal.set(2003, 1, 1, 0, 0, 0); [EOL]     cal.set(Calendar.MILLISECOND, 0); [EOL]     duration = cal.getTime().getTime() - base.getTime().getTime(); [EOL]     final int days = 366 + 365 + 365 + 31; [EOL]     assertEquals("0 0 " + days, DurationFormatUtils.formatDuration(duration, "y M d")); [EOL] }
@Test [EOL] public void testFormatDuration() { [EOL]     long duration = 0; [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "y")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "M")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "d")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "H")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "m")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "s")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "S")); [EOL]     assertEquals("0000", DurationFormatUtils.formatDuration(duration, "SSSS")); [EOL]     assertEquals("0000", DurationFormatUtils.formatDuration(duration, "yyyy")); [EOL]     assertEquals("0000", DurationFormatUtils.formatDuration(duration, "yyMM")); [EOL]     duration = 60 * 1000; [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "y")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "M")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "d")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "H")); [EOL]     assertEquals("1", DurationFormatUtils.formatDuration(duration, "m")); [EOL]     assertEquals("60", DurationFormatUtils.formatDuration(duration, "s")); [EOL]     assertEquals("60000", DurationFormatUtils.formatDuration(duration, "S")); [EOL]     assertEquals("01:00", DurationFormatUtils.formatDuration(duration, "mm:ss")); [EOL]     final Calendar base = Calendar.getInstance(); [EOL]     base.set(2000, 0, 1, 0, 0, 0); [EOL]     base.set(Calendar.MILLISECOND, 0); [EOL]     final Calendar cal = Calendar.getInstance(); [EOL]     cal.set(2003, 1, 1, 0, 0, 0); [EOL]     cal.set(Calendar.MILLISECOND, 0); [EOL]     duration = cal.getTime().getTime() - base.getTime().getTime(); [EOL]     final int days = 366 + 365 + 365 + 31; [EOL]     assertEquals("0 0 " + days, DurationFormatUtils.formatDuration(duration, "y M d")); [EOL] }
@Test [EOL] public void testFormatDuration() { [EOL]     long duration = 0; [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "y")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "M")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "d")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "H")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "m")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "s")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "S")); [EOL]     assertEquals("0000", DurationFormatUtils.formatDuration(duration, "SSSS")); [EOL]     assertEquals("0000", DurationFormatUtils.formatDuration(duration, "yyyy")); [EOL]     assertEquals("0000", DurationFormatUtils.formatDuration(duration, "yyMM")); [EOL]     duration = 60 * 1000; [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "y")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "M")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "d")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "H")); [EOL]     assertEquals("1", DurationFormatUtils.formatDuration(duration, "m")); [EOL]     assertEquals("60", DurationFormatUtils.formatDuration(duration, "s")); [EOL]     assertEquals("60000", DurationFormatUtils.formatDuration(duration, "S")); [EOL]     assertEquals("01:00", DurationFormatUtils.formatDuration(duration, "mm:ss")); [EOL]     final Calendar base = Calendar.getInstance(); [EOL]     base.set(2000, 0, 1, 0, 0, 0); [EOL]     base.set(Calendar.MILLISECOND, 0); [EOL]     final Calendar cal = Calendar.getInstance(); [EOL]     cal.set(2003, 1, 1, 0, 0, 0); [EOL]     cal.set(Calendar.MILLISECOND, 0); [EOL]     duration = cal.getTime().getTime() - base.getTime().getTime(); [EOL]     final int days = 366 + 365 + 365 + 31; [EOL]     assertEquals("0 0 " + days, DurationFormatUtils.formatDuration(duration, "y M d")); [EOL] }
@Test [EOL] public void testFormatDuration() { [EOL]     long duration = 0; [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "y")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "M")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "d")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "H")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "m")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "s")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "S")); [EOL]     assertEquals("0000", DurationFormatUtils.formatDuration(duration, "SSSS")); [EOL]     assertEquals("0000", DurationFormatUtils.formatDuration(duration, "yyyy")); [EOL]     assertEquals("0000", DurationFormatUtils.formatDuration(duration, "yyMM")); [EOL]     duration = 60 * 1000; [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "y")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "M")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "d")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "H")); [EOL]     assertEquals("1", DurationFormatUtils.formatDuration(duration, "m")); [EOL]     assertEquals("60", DurationFormatUtils.formatDuration(duration, "s")); [EOL]     assertEquals("60000", DurationFormatUtils.formatDuration(duration, "S")); [EOL]     assertEquals("01:00", DurationFormatUtils.formatDuration(duration, "mm:ss")); [EOL]     final Calendar base = Calendar.getInstance(); [EOL]     base.set(2000, 0, 1, 0, 0, 0); [EOL]     base.set(Calendar.MILLISECOND, 0); [EOL]     final Calendar cal = Calendar.getInstance(); [EOL]     cal.set(2003, 1, 1, 0, 0, 0); [EOL]     cal.set(Calendar.MILLISECOND, 0); [EOL]     duration = cal.getTime().getTime() - base.getTime().getTime(); [EOL]     final int days = 366 + 365 + 365 + 31; [EOL]     assertEquals("0 0 " + days, DurationFormatUtils.formatDuration(duration, "y M d")); [EOL] }
@Test [EOL] public void testFormatDuration() { [EOL]     long duration = 0; [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "y")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "M")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "d")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "H")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "m")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "s")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "S")); [EOL]     assertEquals("0000", DurationFormatUtils.formatDuration(duration, "SSSS")); [EOL]     assertEquals("0000", DurationFormatUtils.formatDuration(duration, "yyyy")); [EOL]     assertEquals("0000", DurationFormatUtils.formatDuration(duration, "yyMM")); [EOL]     duration = 60 * 1000; [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "y")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "M")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "d")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "H")); [EOL]     assertEquals("1", DurationFormatUtils.formatDuration(duration, "m")); [EOL]     assertEquals("60", DurationFormatUtils.formatDuration(duration, "s")); [EOL]     assertEquals("60000", DurationFormatUtils.formatDuration(duration, "S")); [EOL]     assertEquals("01:00", DurationFormatUtils.formatDuration(duration, "mm:ss")); [EOL]     final Calendar base = Calendar.getInstance(); [EOL]     base.set(2000, 0, 1, 0, 0, 0); [EOL]     base.set(Calendar.MILLISECOND, 0); [EOL]     final Calendar cal = Calendar.getInstance(); [EOL]     cal.set(2003, 1, 1, 0, 0, 0); [EOL]     cal.set(Calendar.MILLISECOND, 0); [EOL]     duration = cal.getTime().getTime() - base.getTime().getTime(); [EOL]     final int days = 366 + 365 + 365 + 31; [EOL]     assertEquals("0 0 " + days, DurationFormatUtils.formatDuration(duration, "y M d")); [EOL] }
@Test [EOL] public void testFormatDuration() { [EOL]     long duration = 0; [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "y")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "M")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "d")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "H")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "m")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "s")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "S")); [EOL]     assertEquals("0000", DurationFormatUtils.formatDuration(duration, "SSSS")); [EOL]     assertEquals("0000", DurationFormatUtils.formatDuration(duration, "yyyy")); [EOL]     assertEquals("0000", DurationFormatUtils.formatDuration(duration, "yyMM")); [EOL]     duration = 60 * 1000; [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "y")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "M")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "d")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "H")); [EOL]     assertEquals("1", DurationFormatUtils.formatDuration(duration, "m")); [EOL]     assertEquals("60", DurationFormatUtils.formatDuration(duration, "s")); [EOL]     assertEquals("60000", DurationFormatUtils.formatDuration(duration, "S")); [EOL]     assertEquals("01:00", DurationFormatUtils.formatDuration(duration, "mm:ss")); [EOL]     final Calendar base = Calendar.getInstance(); [EOL]     base.set(2000, 0, 1, 0, 0, 0); [EOL]     base.set(Calendar.MILLISECOND, 0); [EOL]     final Calendar cal = Calendar.getInstance(); [EOL]     cal.set(2003, 1, 1, 0, 0, 0); [EOL]     cal.set(Calendar.MILLISECOND, 0); [EOL]     duration = cal.getTime().getTime() - base.getTime().getTime(); [EOL]     final int days = 366 + 365 + 365 + 31; [EOL]     assertEquals("0 0 " + days, DurationFormatUtils.formatDuration(duration, "y M d")); [EOL] }
@Test [EOL] public void testFormatDuration() { [EOL]     long duration = 0; [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "y")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "M")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "d")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "H")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "m")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "s")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "S")); [EOL]     assertEquals("0000", DurationFormatUtils.formatDuration(duration, "SSSS")); [EOL]     assertEquals("0000", DurationFormatUtils.formatDuration(duration, "yyyy")); [EOL]     assertEquals("0000", DurationFormatUtils.formatDuration(duration, "yyMM")); [EOL]     duration = 60 * 1000; [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "y")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "M")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "d")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "H")); [EOL]     assertEquals("1", DurationFormatUtils.formatDuration(duration, "m")); [EOL]     assertEquals("60", DurationFormatUtils.formatDuration(duration, "s")); [EOL]     assertEquals("60000", DurationFormatUtils.formatDuration(duration, "S")); [EOL]     assertEquals("01:00", DurationFormatUtils.formatDuration(duration, "mm:ss")); [EOL]     final Calendar base = Calendar.getInstance(); [EOL]     base.set(2000, 0, 1, 0, 0, 0); [EOL]     base.set(Calendar.MILLISECOND, 0); [EOL]     final Calendar cal = Calendar.getInstance(); [EOL]     cal.set(2003, 1, 1, 0, 0, 0); [EOL]     cal.set(Calendar.MILLISECOND, 0); [EOL]     duration = cal.getTime().getTime() - base.getTime().getTime(); [EOL]     final int days = 366 + 365 + 365 + 31; [EOL]     assertEquals("0 0 " + days, DurationFormatUtils.formatDuration(duration, "y M d")); [EOL] }
@Test [EOL] public void testFormatDuration() { [EOL]     long duration = 0; [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "y")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "M")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "d")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "H")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "m")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "s")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "S")); [EOL]     assertEquals("0000", DurationFormatUtils.formatDuration(duration, "SSSS")); [EOL]     assertEquals("0000", DurationFormatUtils.formatDuration(duration, "yyyy")); [EOL]     assertEquals("0000", DurationFormatUtils.formatDuration(duration, "yyMM")); [EOL]     duration = 60 * 1000; [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "y")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "M")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "d")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "H")); [EOL]     assertEquals("1", DurationFormatUtils.formatDuration(duration, "m")); [EOL]     assertEquals("60", DurationFormatUtils.formatDuration(duration, "s")); [EOL]     assertEquals("60000", DurationFormatUtils.formatDuration(duration, "S")); [EOL]     assertEquals("01:00", DurationFormatUtils.formatDuration(duration, "mm:ss")); [EOL]     final Calendar base = Calendar.getInstance(); [EOL]     base.set(2000, 0, 1, 0, 0, 0); [EOL]     base.set(Calendar.MILLISECOND, 0); [EOL]     final Calendar cal = Calendar.getInstance(); [EOL]     cal.set(2003, 1, 1, 0, 0, 0); [EOL]     cal.set(Calendar.MILLISECOND, 0); [EOL]     duration = cal.getTime().getTime() - base.getTime().getTime(); [EOL]     final int days = 366 + 365 + 365 + 31; [EOL]     assertEquals("0 0 " + days, DurationFormatUtils.formatDuration(duration, "y M d")); [EOL] }
@Test [EOL] public void testFormatDurationWords() { [EOL]     String text = null; [EOL]     text = DurationFormatUtils.formatDurationWords(50 * 1000, true, false); [EOL]     assertEquals("50 seconds", text); [EOL]     text = DurationFormatUtils.formatDurationWords(65 * 1000, true, false); [EOL]     assertEquals("1 minute 5 seconds", text); [EOL]     text = DurationFormatUtils.formatDurationWords(120 * 1000, true, false); [EOL]     assertEquals("2 minutes 0 seconds", text); [EOL]     text = DurationFormatUtils.formatDurationWords(121 * 1000, true, false); [EOL]     assertEquals("2 minutes 1 second", text); [EOL]     text = DurationFormatUtils.formatDurationWords(72 * 60 * 1000, true, false); [EOL]     assertEquals("1 hour 12 minutes 0 seconds", text); [EOL]     text = DurationFormatUtils.formatDurationWords(24 * 60 * 60 * 1000, true, false); [EOL]     assertEquals("1 day 0 hours 0 minutes 0 seconds", text); [EOL]     text = DurationFormatUtils.formatDurationWords(50 * 1000, true, true); [EOL]     assertEquals("50 seconds", text); [EOL]     text = DurationFormatUtils.formatDurationWords(65 * 1000, true, true); [EOL]     assertEquals("1 minute 5 seconds", text); [EOL]     text = DurationFormatUtils.formatDurationWords(120 * 1000, true, true); [EOL]     assertEquals("2 minutes", text); [EOL]     text = DurationFormatUtils.formatDurationWords(121 * 1000, true, true); [EOL]     assertEquals("2 minutes 1 second", text); [EOL]     text = DurationFormatUtils.formatDurationWords(72 * 60 * 1000, true, true); [EOL]     assertEquals("1 hour 12 minutes", text); [EOL]     text = DurationFormatUtils.formatDurationWords(24 * 60 * 60 * 1000, true, true); [EOL]     assertEquals("1 day", text); [EOL]     text = DurationFormatUtils.formatDurationWords(50 * 1000, false, true); [EOL]     assertEquals("0 days 0 hours 0 minutes 50 seconds", text); [EOL]     text = DurationFormatUtils.formatDurationWords(65 * 1000, false, true); [EOL]     assertEquals("0 days 0 hours 1 minute 5 seconds", text); [EOL]     text = DurationFormatUtils.formatDurationWords(120 * 1000, false, true); [EOL]     assertEquals("0 days 0 hours 2 minutes", text); [EOL]     text = DurationFormatUtils.formatDurationWords(121 * 1000, false, true); [EOL]     assertEquals("0 days 0 hours 2 minutes 1 second", text); [EOL]     text = DurationFormatUtils.formatDurationWords(72 * 60 * 1000, false, true); [EOL]     assertEquals("0 days 1 hour 12 minutes", text); [EOL]     text = DurationFormatUtils.formatDurationWords(24 * 60 * 60 * 1000, false, true); [EOL]     assertEquals("1 day", text); [EOL]     text = DurationFormatUtils.formatDurationWords(50 * 1000, false, false); [EOL]     assertEquals("0 days 0 hours 0 minutes 50 seconds", text); [EOL]     text = DurationFormatUtils.formatDurationWords(65 * 1000, false, false); [EOL]     assertEquals("0 days 0 hours 1 minute 5 seconds", text); [EOL]     text = DurationFormatUtils.formatDurationWords(120 * 1000, false, false); [EOL]     assertEquals("0 days 0 hours 2 minutes 0 seconds", text); [EOL]     text = DurationFormatUtils.formatDurationWords(121 * 1000, false, false); [EOL]     assertEquals("0 days 0 hours 2 minutes 1 second", text); [EOL]     text = DurationFormatUtils.formatDurationWords(72 * 60 * 1000, false, false); [EOL]     assertEquals("0 days 1 hour 12 minutes 0 seconds", text); [EOL]     text = DurationFormatUtils.formatDurationWords(24 * 60 * 60 * 1000 + 72 * 60 * 1000, false, false); [EOL]     assertEquals("1 day 1 hour 12 minutes 0 seconds", text); [EOL]     text = DurationFormatUtils.formatDurationWords(2 * 24 * 60 * 60 * 1000 + 72 * 60 * 1000, false, false); [EOL]     assertEquals("2 days 1 hour 12 minutes 0 seconds", text); [EOL]     for (int i = 2; i < 31; i++) { [EOL]         text = DurationFormatUtils.formatDurationWords(i * 24 * 60 * 60 * 1000L, false, false); [EOL]     } [EOL] }
@Test [EOL] public void testFormatDurationWords() { [EOL]     String text = null; [EOL]     text = DurationFormatUtils.formatDurationWords(50 * 1000, true, false); [EOL]     assertEquals("50 seconds", text); [EOL]     text = DurationFormatUtils.formatDurationWords(65 * 1000, true, false); [EOL]     assertEquals("1 minute 5 seconds", text); [EOL]     text = DurationFormatUtils.formatDurationWords(120 * 1000, true, false); [EOL]     assertEquals("2 minutes 0 seconds", text); [EOL]     text = DurationFormatUtils.formatDurationWords(121 * 1000, true, false); [EOL]     assertEquals("2 minutes 1 second", text); [EOL]     text = DurationFormatUtils.formatDurationWords(72 * 60 * 1000, true, false); [EOL]     assertEquals("1 hour 12 minutes 0 seconds", text); [EOL]     text = DurationFormatUtils.formatDurationWords(24 * 60 * 60 * 1000, true, false); [EOL]     assertEquals("1 day 0 hours 0 minutes 0 seconds", text); [EOL]     text = DurationFormatUtils.formatDurationWords(50 * 1000, true, true); [EOL]     assertEquals("50 seconds", text); [EOL]     text = DurationFormatUtils.formatDurationWords(65 * 1000, true, true); [EOL]     assertEquals("1 minute 5 seconds", text); [EOL]     text = DurationFormatUtils.formatDurationWords(120 * 1000, true, true); [EOL]     assertEquals("2 minutes", text); [EOL]     text = DurationFormatUtils.formatDurationWords(121 * 1000, true, true); [EOL]     assertEquals("2 minutes 1 second", text); [EOL]     text = DurationFormatUtils.formatDurationWords(72 * 60 * 1000, true, true); [EOL]     assertEquals("1 hour 12 minutes", text); [EOL]     text = DurationFormatUtils.formatDurationWords(24 * 60 * 60 * 1000, true, true); [EOL]     assertEquals("1 day", text); [EOL]     text = DurationFormatUtils.formatDurationWords(50 * 1000, false, true); [EOL]     assertEquals("0 days 0 hours 0 minutes 50 seconds", text); [EOL]     text = DurationFormatUtils.formatDurationWords(65 * 1000, false, true); [EOL]     assertEquals("0 days 0 hours 1 minute 5 seconds", text); [EOL]     text = DurationFormatUtils.formatDurationWords(120 * 1000, false, true); [EOL]     assertEquals("0 days 0 hours 2 minutes", text); [EOL]     text = DurationFormatUtils.formatDurationWords(121 * 1000, false, true); [EOL]     assertEquals("0 days 0 hours 2 minutes 1 second", text); [EOL]     text = DurationFormatUtils.formatDurationWords(72 * 60 * 1000, false, true); [EOL]     assertEquals("0 days 1 hour 12 minutes", text); [EOL]     text = DurationFormatUtils.formatDurationWords(24 * 60 * 60 * 1000, false, true); [EOL]     assertEquals("1 day", text); [EOL]     text = DurationFormatUtils.formatDurationWords(50 * 1000, false, false); [EOL]     assertEquals("0 days 0 hours 0 minutes 50 seconds", text); [EOL]     text = DurationFormatUtils.formatDurationWords(65 * 1000, false, false); [EOL]     assertEquals("0 days 0 hours 1 minute 5 seconds", text); [EOL]     text = DurationFormatUtils.formatDurationWords(120 * 1000, false, false); [EOL]     assertEquals("0 days 0 hours 2 minutes 0 seconds", text); [EOL]     text = DurationFormatUtils.formatDurationWords(121 * 1000, false, false); [EOL]     assertEquals("0 days 0 hours 2 minutes 1 second", text); [EOL]     text = DurationFormatUtils.formatDurationWords(72 * 60 * 1000, false, false); [EOL]     assertEquals("0 days 1 hour 12 minutes 0 seconds", text); [EOL]     text = DurationFormatUtils.formatDurationWords(24 * 60 * 60 * 1000 + 72 * 60 * 1000, false, false); [EOL]     assertEquals("1 day 1 hour 12 minutes 0 seconds", text); [EOL]     text = DurationFormatUtils.formatDurationWords(2 * 24 * 60 * 60 * 1000 + 72 * 60 * 1000, false, false); [EOL]     assertEquals("2 days 1 hour 12 minutes 0 seconds", text); [EOL]     for (int i = 2; i < 31; i++) { [EOL]         text = DurationFormatUtils.formatDurationWords(i * 24 * 60 * 60 * 1000L, false, false); [EOL]     } [EOL] }
@Test [EOL] public void testFormatDurationWords() { [EOL]     String text = null; [EOL]     text = DurationFormatUtils.formatDurationWords(50 * 1000, true, false); [EOL]     assertEquals("50 seconds", text); [EOL]     text = DurationFormatUtils.formatDurationWords(65 * 1000, true, false); [EOL]     assertEquals("1 minute 5 seconds", text); [EOL]     text = DurationFormatUtils.formatDurationWords(120 * 1000, true, false); [EOL]     assertEquals("2 minutes 0 seconds", text); [EOL]     text = DurationFormatUtils.formatDurationWords(121 * 1000, true, false); [EOL]     assertEquals("2 minutes 1 second", text); [EOL]     text = DurationFormatUtils.formatDurationWords(72 * 60 * 1000, true, false); [EOL]     assertEquals("1 hour 12 minutes 0 seconds", text); [EOL]     text = DurationFormatUtils.formatDurationWords(24 * 60 * 60 * 1000, true, false); [EOL]     assertEquals("1 day 0 hours 0 minutes 0 seconds", text); [EOL]     text = DurationFormatUtils.formatDurationWords(50 * 1000, true, true); [EOL]     assertEquals("50 seconds", text); [EOL]     text = DurationFormatUtils.formatDurationWords(65 * 1000, true, true); [EOL]     assertEquals("1 minute 5 seconds", text); [EOL]     text = DurationFormatUtils.formatDurationWords(120 * 1000, true, true); [EOL]     assertEquals("2 minutes", text); [EOL]     text = DurationFormatUtils.formatDurationWords(121 * 1000, true, true); [EOL]     assertEquals("2 minutes 1 second", text); [EOL]     text = DurationFormatUtils.formatDurationWords(72 * 60 * 1000, true, true); [EOL]     assertEquals("1 hour 12 minutes", text); [EOL]     text = DurationFormatUtils.formatDurationWords(24 * 60 * 60 * 1000, true, true); [EOL]     assertEquals("1 day", text); [EOL]     text = DurationFormatUtils.formatDurationWords(50 * 1000, false, true); [EOL]     assertEquals("0 days 0 hours 0 minutes 50 seconds", text); [EOL]     text = DurationFormatUtils.formatDurationWords(65 * 1000, false, true); [EOL]     assertEquals("0 days 0 hours 1 minute 5 seconds", text); [EOL]     text = DurationFormatUtils.formatDurationWords(120 * 1000, false, true); [EOL]     assertEquals("0 days 0 hours 2 minutes", text); [EOL]     text = DurationFormatUtils.formatDurationWords(121 * 1000, false, true); [EOL]     assertEquals("0 days 0 hours 2 minutes 1 second", text); [EOL]     text = DurationFormatUtils.formatDurationWords(72 * 60 * 1000, false, true); [EOL]     assertEquals("0 days 1 hour 12 minutes", text); [EOL]     text = DurationFormatUtils.formatDurationWords(24 * 60 * 60 * 1000, false, true); [EOL]     assertEquals("1 day", text); [EOL]     text = DurationFormatUtils.formatDurationWords(50 * 1000, false, false); [EOL]     assertEquals("0 days 0 hours 0 minutes 50 seconds", text); [EOL]     text = DurationFormatUtils.formatDurationWords(65 * 1000, false, false); [EOL]     assertEquals("0 days 0 hours 1 minute 5 seconds", text); [EOL]     text = DurationFormatUtils.formatDurationWords(120 * 1000, false, false); [EOL]     assertEquals("0 days 0 hours 2 minutes 0 seconds", text); [EOL]     text = DurationFormatUtils.formatDurationWords(121 * 1000, false, false); [EOL]     assertEquals("0 days 0 hours 2 minutes 1 second", text); [EOL]     text = DurationFormatUtils.formatDurationWords(72 * 60 * 1000, false, false); [EOL]     assertEquals("0 days 1 hour 12 minutes 0 seconds", text); [EOL]     text = DurationFormatUtils.formatDurationWords(24 * 60 * 60 * 1000 + 72 * 60 * 1000, false, false); [EOL]     assertEquals("1 day 1 hour 12 minutes 0 seconds", text); [EOL]     text = DurationFormatUtils.formatDurationWords(2 * 24 * 60 * 60 * 1000 + 72 * 60 * 1000, false, false); [EOL]     assertEquals("2 days 1 hour 12 minutes 0 seconds", text); [EOL]     for (int i = 2; i < 31; i++) { [EOL]         text = DurationFormatUtils.formatDurationWords(i * 24 * 60 * 60 * 1000L, false, false); [EOL]     } [EOL] }
@Test [EOL] public void testFormatDurationWords() { [EOL]     String text = null; [EOL]     text = DurationFormatUtils.formatDurationWords(50 * 1000, true, false); [EOL]     assertEquals("50 seconds", text); [EOL]     text = DurationFormatUtils.formatDurationWords(65 * 1000, true, false); [EOL]     assertEquals("1 minute 5 seconds", text); [EOL]     text = DurationFormatUtils.formatDurationWords(120 * 1000, true, false); [EOL]     assertEquals("2 minutes 0 seconds", text); [EOL]     text = DurationFormatUtils.formatDurationWords(121 * 1000, true, false); [EOL]     assertEquals("2 minutes 1 second", text); [EOL]     text = DurationFormatUtils.formatDurationWords(72 * 60 * 1000, true, false); [EOL]     assertEquals("1 hour 12 minutes 0 seconds", text); [EOL]     text = DurationFormatUtils.formatDurationWords(24 * 60 * 60 * 1000, true, false); [EOL]     assertEquals("1 day 0 hours 0 minutes 0 seconds", text); [EOL]     text = DurationFormatUtils.formatDurationWords(50 * 1000, true, true); [EOL]     assertEquals("50 seconds", text); [EOL]     text = DurationFormatUtils.formatDurationWords(65 * 1000, true, true); [EOL]     assertEquals("1 minute 5 seconds", text); [EOL]     text = DurationFormatUtils.formatDurationWords(120 * 1000, true, true); [EOL]     assertEquals("2 minutes", text); [EOL]     text = DurationFormatUtils.formatDurationWords(121 * 1000, true, true); [EOL]     assertEquals("2 minutes 1 second", text); [EOL]     text = DurationFormatUtils.formatDurationWords(72 * 60 * 1000, true, true); [EOL]     assertEquals("1 hour 12 minutes", text); [EOL]     text = DurationFormatUtils.formatDurationWords(24 * 60 * 60 * 1000, true, true); [EOL]     assertEquals("1 day", text); [EOL]     text = DurationFormatUtils.formatDurationWords(50 * 1000, false, true); [EOL]     assertEquals("0 days 0 hours 0 minutes 50 seconds", text); [EOL]     text = DurationFormatUtils.formatDurationWords(65 * 1000, false, true); [EOL]     assertEquals("0 days 0 hours 1 minute 5 seconds", text); [EOL]     text = DurationFormatUtils.formatDurationWords(120 * 1000, false, true); [EOL]     assertEquals("0 days 0 hours 2 minutes", text); [EOL]     text = DurationFormatUtils.formatDurationWords(121 * 1000, false, true); [EOL]     assertEquals("0 days 0 hours 2 minutes 1 second", text); [EOL]     text = DurationFormatUtils.formatDurationWords(72 * 60 * 1000, false, true); [EOL]     assertEquals("0 days 1 hour 12 minutes", text); [EOL]     text = DurationFormatUtils.formatDurationWords(24 * 60 * 60 * 1000, false, true); [EOL]     assertEquals("1 day", text); [EOL]     text = DurationFormatUtils.formatDurationWords(50 * 1000, false, false); [EOL]     assertEquals("0 days 0 hours 0 minutes 50 seconds", text); [EOL]     text = DurationFormatUtils.formatDurationWords(65 * 1000, false, false); [EOL]     assertEquals("0 days 0 hours 1 minute 5 seconds", text); [EOL]     text = DurationFormatUtils.formatDurationWords(120 * 1000, false, false); [EOL]     assertEquals("0 days 0 hours 2 minutes 0 seconds", text); [EOL]     text = DurationFormatUtils.formatDurationWords(121 * 1000, false, false); [EOL]     assertEquals("0 days 0 hours 2 minutes 1 second", text); [EOL]     text = DurationFormatUtils.formatDurationWords(72 * 60 * 1000, false, false); [EOL]     assertEquals("0 days 1 hour 12 minutes 0 seconds", text); [EOL]     text = DurationFormatUtils.formatDurationWords(24 * 60 * 60 * 1000 + 72 * 60 * 1000, false, false); [EOL]     assertEquals("1 day 1 hour 12 minutes 0 seconds", text); [EOL]     text = DurationFormatUtils.formatDurationWords(2 * 24 * 60 * 60 * 1000 + 72 * 60 * 1000, false, false); [EOL]     assertEquals("2 days 1 hour 12 minutes 0 seconds", text); [EOL]     for (int i = 2; i < 31; i++) { [EOL]         text = DurationFormatUtils.formatDurationWords(i * 24 * 60 * 60 * 1000L, false, false); [EOL]     } [EOL] }
@Test [EOL] public void testFormatDurationWords() { [EOL]     String text = null; [EOL]     text = DurationFormatUtils.formatDurationWords(50 * 1000, true, false); [EOL]     assertEquals("50 seconds", text); [EOL]     text = DurationFormatUtils.formatDurationWords(65 * 1000, true, false); [EOL]     assertEquals("1 minute 5 seconds", text); [EOL]     text = DurationFormatUtils.formatDurationWords(120 * 1000, true, false); [EOL]     assertEquals("2 minutes 0 seconds", text); [EOL]     text = DurationFormatUtils.formatDurationWords(121 * 1000, true, false); [EOL]     assertEquals("2 minutes 1 second", text); [EOL]     text = DurationFormatUtils.formatDurationWords(72 * 60 * 1000, true, false); [EOL]     assertEquals("1 hour 12 minutes 0 seconds", text); [EOL]     text = DurationFormatUtils.formatDurationWords(24 * 60 * 60 * 1000, true, false); [EOL]     assertEquals("1 day 0 hours 0 minutes 0 seconds", text); [EOL]     text = DurationFormatUtils.formatDurationWords(50 * 1000, true, true); [EOL]     assertEquals("50 seconds", text); [EOL]     text = DurationFormatUtils.formatDurationWords(65 * 1000, true, true); [EOL]     assertEquals("1 minute 5 seconds", text); [EOL]     text = DurationFormatUtils.formatDurationWords(120 * 1000, true, true); [EOL]     assertEquals("2 minutes", text); [EOL]     text = DurationFormatUtils.formatDurationWords(121 * 1000, true, true); [EOL]     assertEquals("2 minutes 1 second", text); [EOL]     text = DurationFormatUtils.formatDurationWords(72 * 60 * 1000, true, true); [EOL]     assertEquals("1 hour 12 minutes", text); [EOL]     text = DurationFormatUtils.formatDurationWords(24 * 60 * 60 * 1000, true, true); [EOL]     assertEquals("1 day", text); [EOL]     text = DurationFormatUtils.formatDurationWords(50 * 1000, false, true); [EOL]     assertEquals("0 days 0 hours 0 minutes 50 seconds", text); [EOL]     text = DurationFormatUtils.formatDurationWords(65 * 1000, false, true); [EOL]     assertEquals("0 days 0 hours 1 minute 5 seconds", text); [EOL]     text = DurationFormatUtils.formatDurationWords(120 * 1000, false, true); [EOL]     assertEquals("0 days 0 hours 2 minutes", text); [EOL]     text = DurationFormatUtils.formatDurationWords(121 * 1000, false, true); [EOL]     assertEquals("0 days 0 hours 2 minutes 1 second", text); [EOL]     text = DurationFormatUtils.formatDurationWords(72 * 60 * 1000, false, true); [EOL]     assertEquals("0 days 1 hour 12 minutes", text); [EOL]     text = DurationFormatUtils.formatDurationWords(24 * 60 * 60 * 1000, false, true); [EOL]     assertEquals("1 day", text); [EOL]     text = DurationFormatUtils.formatDurationWords(50 * 1000, false, false); [EOL]     assertEquals("0 days 0 hours 0 minutes 50 seconds", text); [EOL]     text = DurationFormatUtils.formatDurationWords(65 * 1000, false, false); [EOL]     assertEquals("0 days 0 hours 1 minute 5 seconds", text); [EOL]     text = DurationFormatUtils.formatDurationWords(120 * 1000, false, false); [EOL]     assertEquals("0 days 0 hours 2 minutes 0 seconds", text); [EOL]     text = DurationFormatUtils.formatDurationWords(121 * 1000, false, false); [EOL]     assertEquals("0 days 0 hours 2 minutes 1 second", text); [EOL]     text = DurationFormatUtils.formatDurationWords(72 * 60 * 1000, false, false); [EOL]     assertEquals("0 days 1 hour 12 minutes 0 seconds", text); [EOL]     text = DurationFormatUtils.formatDurationWords(24 * 60 * 60 * 1000 + 72 * 60 * 1000, false, false); [EOL]     assertEquals("1 day 1 hour 12 minutes 0 seconds", text); [EOL]     text = DurationFormatUtils.formatDurationWords(2 * 24 * 60 * 60 * 1000 + 72 * 60 * 1000, false, false); [EOL]     assertEquals("2 days 1 hour 12 minutes 0 seconds", text); [EOL]     for (int i = 2; i < 31; i++) { [EOL]         text = DurationFormatUtils.formatDurationWords(i * 24 * 60 * 60 * 1000L, false, false); [EOL]     } [EOL] }
@Test [EOL] public void testFormatDurationWords() { [EOL]     String text = null; [EOL]     text = DurationFormatUtils.formatDurationWords(50 * 1000, true, false); [EOL]     assertEquals("50 seconds", text); [EOL]     text = DurationFormatUtils.formatDurationWords(65 * 1000, true, false); [EOL]     assertEquals("1 minute 5 seconds", text); [EOL]     text = DurationFormatUtils.formatDurationWords(120 * 1000, true, false); [EOL]     assertEquals("2 minutes 0 seconds", text); [EOL]     text = DurationFormatUtils.formatDurationWords(121 * 1000, true, false); [EOL]     assertEquals("2 minutes 1 second", text); [EOL]     text = DurationFormatUtils.formatDurationWords(72 * 60 * 1000, true, false); [EOL]     assertEquals("1 hour 12 minutes 0 seconds", text); [EOL]     text = DurationFormatUtils.formatDurationWords(24 * 60 * 60 * 1000, true, false); [EOL]     assertEquals("1 day 0 hours 0 minutes 0 seconds", text); [EOL]     text = DurationFormatUtils.formatDurationWords(50 * 1000, true, true); [EOL]     assertEquals("50 seconds", text); [EOL]     text = DurationFormatUtils.formatDurationWords(65 * 1000, true, true); [EOL]     assertEquals("1 minute 5 seconds", text); [EOL]     text = DurationFormatUtils.formatDurationWords(120 * 1000, true, true); [EOL]     assertEquals("2 minutes", text); [EOL]     text = DurationFormatUtils.formatDurationWords(121 * 1000, true, true); [EOL]     assertEquals("2 minutes 1 second", text); [EOL]     text = DurationFormatUtils.formatDurationWords(72 * 60 * 1000, true, true); [EOL]     assertEquals("1 hour 12 minutes", text); [EOL]     text = DurationFormatUtils.formatDurationWords(24 * 60 * 60 * 1000, true, true); [EOL]     assertEquals("1 day", text); [EOL]     text = DurationFormatUtils.formatDurationWords(50 * 1000, false, true); [EOL]     assertEquals("0 days 0 hours 0 minutes 50 seconds", text); [EOL]     text = DurationFormatUtils.formatDurationWords(65 * 1000, false, true); [EOL]     assertEquals("0 days 0 hours 1 minute 5 seconds", text); [EOL]     text = DurationFormatUtils.formatDurationWords(120 * 1000, false, true); [EOL]     assertEquals("0 days 0 hours 2 minutes", text); [EOL]     text = DurationFormatUtils.formatDurationWords(121 * 1000, false, true); [EOL]     assertEquals("0 days 0 hours 2 minutes 1 second", text); [EOL]     text = DurationFormatUtils.formatDurationWords(72 * 60 * 1000, false, true); [EOL]     assertEquals("0 days 1 hour 12 minutes", text); [EOL]     text = DurationFormatUtils.formatDurationWords(24 * 60 * 60 * 1000, false, true); [EOL]     assertEquals("1 day", text); [EOL]     text = DurationFormatUtils.formatDurationWords(50 * 1000, false, false); [EOL]     assertEquals("0 days 0 hours 0 minutes 50 seconds", text); [EOL]     text = DurationFormatUtils.formatDurationWords(65 * 1000, false, false); [EOL]     assertEquals("0 days 0 hours 1 minute 5 seconds", text); [EOL]     text = DurationFormatUtils.formatDurationWords(120 * 1000, false, false); [EOL]     assertEquals("0 days 0 hours 2 minutes 0 seconds", text); [EOL]     text = DurationFormatUtils.formatDurationWords(121 * 1000, false, false); [EOL]     assertEquals("0 days 0 hours 2 minutes 1 second", text); [EOL]     text = DurationFormatUtils.formatDurationWords(72 * 60 * 1000, false, false); [EOL]     assertEquals("0 days 1 hour 12 minutes 0 seconds", text); [EOL]     text = DurationFormatUtils.formatDurationWords(24 * 60 * 60 * 1000 + 72 * 60 * 1000, false, false); [EOL]     assertEquals("1 day 1 hour 12 minutes 0 seconds", text); [EOL]     text = DurationFormatUtils.formatDurationWords(2 * 24 * 60 * 60 * 1000 + 72 * 60 * 1000, false, false); [EOL]     assertEquals("2 days 1 hour 12 minutes 0 seconds", text); [EOL]     for (int i = 2; i < 31; i++) { [EOL]         text = DurationFormatUtils.formatDurationWords(i * 24 * 60 * 60 * 1000L, false, false); [EOL]     } [EOL] }
@Test [EOL] public void testFormatDurationWords() { [EOL]     String text = null; [EOL]     text = DurationFormatUtils.formatDurationWords(50 * 1000, true, false); [EOL]     assertEquals("50 seconds", text); [EOL]     text = DurationFormatUtils.formatDurationWords(65 * 1000, true, false); [EOL]     assertEquals("1 minute 5 seconds", text); [EOL]     text = DurationFormatUtils.formatDurationWords(120 * 1000, true, false); [EOL]     assertEquals("2 minutes 0 seconds", text); [EOL]     text = DurationFormatUtils.formatDurationWords(121 * 1000, true, false); [EOL]     assertEquals("2 minutes 1 second", text); [EOL]     text = DurationFormatUtils.formatDurationWords(72 * 60 * 1000, true, false); [EOL]     assertEquals("1 hour 12 minutes 0 seconds", text); [EOL]     text = DurationFormatUtils.formatDurationWords(24 * 60 * 60 * 1000, true, false); [EOL]     assertEquals("1 day 0 hours 0 minutes 0 seconds", text); [EOL]     text = DurationFormatUtils.formatDurationWords(50 * 1000, true, true); [EOL]     assertEquals("50 seconds", text); [EOL]     text = DurationFormatUtils.formatDurationWords(65 * 1000, true, true); [EOL]     assertEquals("1 minute 5 seconds", text); [EOL]     text = DurationFormatUtils.formatDurationWords(120 * 1000, true, true); [EOL]     assertEquals("2 minutes", text); [EOL]     text = DurationFormatUtils.formatDurationWords(121 * 1000, true, true); [EOL]     assertEquals("2 minutes 1 second", text); [EOL]     text = DurationFormatUtils.formatDurationWords(72 * 60 * 1000, true, true); [EOL]     assertEquals("1 hour 12 minutes", text); [EOL]     text = DurationFormatUtils.formatDurationWords(24 * 60 * 60 * 1000, true, true); [EOL]     assertEquals("1 day", text); [EOL]     text = DurationFormatUtils.formatDurationWords(50 * 1000, false, true); [EOL]     assertEquals("0 days 0 hours 0 minutes 50 seconds", text); [EOL]     text = DurationFormatUtils.formatDurationWords(65 * 1000, false, true); [EOL]     assertEquals("0 days 0 hours 1 minute 5 seconds", text); [EOL]     text = DurationFormatUtils.formatDurationWords(120 * 1000, false, true); [EOL]     assertEquals("0 days 0 hours 2 minutes", text); [EOL]     text = DurationFormatUtils.formatDurationWords(121 * 1000, false, true); [EOL]     assertEquals("0 days 0 hours 2 minutes 1 second", text); [EOL]     text = DurationFormatUtils.formatDurationWords(72 * 60 * 1000, false, true); [EOL]     assertEquals("0 days 1 hour 12 minutes", text); [EOL]     text = DurationFormatUtils.formatDurationWords(24 * 60 * 60 * 1000, false, true); [EOL]     assertEquals("1 day", text); [EOL]     text = DurationFormatUtils.formatDurationWords(50 * 1000, false, false); [EOL]     assertEquals("0 days 0 hours 0 minutes 50 seconds", text); [EOL]     text = DurationFormatUtils.formatDurationWords(65 * 1000, false, false); [EOL]     assertEquals("0 days 0 hours 1 minute 5 seconds", text); [EOL]     text = DurationFormatUtils.formatDurationWords(120 * 1000, false, false); [EOL]     assertEquals("0 days 0 hours 2 minutes 0 seconds", text); [EOL]     text = DurationFormatUtils.formatDurationWords(121 * 1000, false, false); [EOL]     assertEquals("0 days 0 hours 2 minutes 1 second", text); [EOL]     text = DurationFormatUtils.formatDurationWords(72 * 60 * 1000, false, false); [EOL]     assertEquals("0 days 1 hour 12 minutes 0 seconds", text); [EOL]     text = DurationFormatUtils.formatDurationWords(24 * 60 * 60 * 1000 + 72 * 60 * 1000, false, false); [EOL]     assertEquals("1 day 1 hour 12 minutes 0 seconds", text); [EOL]     text = DurationFormatUtils.formatDurationWords(2 * 24 * 60 * 60 * 1000 + 72 * 60 * 1000, false, false); [EOL]     assertEquals("2 days 1 hour 12 minutes 0 seconds", text); [EOL]     for (int i = 2; i < 31; i++) { [EOL]         text = DurationFormatUtils.formatDurationWords(i * 24 * 60 * 60 * 1000L, false, false); [EOL]     } [EOL] }
@Test [EOL] public void testFormatDurationWords() { [EOL]     String text = null; [EOL]     text = DurationFormatUtils.formatDurationWords(50 * 1000, true, false); [EOL]     assertEquals("50 seconds", text); [EOL]     text = DurationFormatUtils.formatDurationWords(65 * 1000, true, false); [EOL]     assertEquals("1 minute 5 seconds", text); [EOL]     text = DurationFormatUtils.formatDurationWords(120 * 1000, true, false); [EOL]     assertEquals("2 minutes 0 seconds", text); [EOL]     text = DurationFormatUtils.formatDurationWords(121 * 1000, true, false); [EOL]     assertEquals("2 minutes 1 second", text); [EOL]     text = DurationFormatUtils.formatDurationWords(72 * 60 * 1000, true, false); [EOL]     assertEquals("1 hour 12 minutes 0 seconds", text); [EOL]     text = DurationFormatUtils.formatDurationWords(24 * 60 * 60 * 1000, true, false); [EOL]     assertEquals("1 day 0 hours 0 minutes 0 seconds", text); [EOL]     text = DurationFormatUtils.formatDurationWords(50 * 1000, true, true); [EOL]     assertEquals("50 seconds", text); [EOL]     text = DurationFormatUtils.formatDurationWords(65 * 1000, true, true); [EOL]     assertEquals("1 minute 5 seconds", text); [EOL]     text = DurationFormatUtils.formatDurationWords(120 * 1000, true, true); [EOL]     assertEquals("2 minutes", text); [EOL]     text = DurationFormatUtils.formatDurationWords(121 * 1000, true, true); [EOL]     assertEquals("2 minutes 1 second", text); [EOL]     text = DurationFormatUtils.formatDurationWords(72 * 60 * 1000, true, true); [EOL]     assertEquals("1 hour 12 minutes", text); [EOL]     text = DurationFormatUtils.formatDurationWords(24 * 60 * 60 * 1000, true, true); [EOL]     assertEquals("1 day", text); [EOL]     text = DurationFormatUtils.formatDurationWords(50 * 1000, false, true); [EOL]     assertEquals("0 days 0 hours 0 minutes 50 seconds", text); [EOL]     text = DurationFormatUtils.formatDurationWords(65 * 1000, false, true); [EOL]     assertEquals("0 days 0 hours 1 minute 5 seconds", text); [EOL]     text = DurationFormatUtils.formatDurationWords(120 * 1000, false, true); [EOL]     assertEquals("0 days 0 hours 2 minutes", text); [EOL]     text = DurationFormatUtils.formatDurationWords(121 * 1000, false, true); [EOL]     assertEquals("0 days 0 hours 2 minutes 1 second", text); [EOL]     text = DurationFormatUtils.formatDurationWords(72 * 60 * 1000, false, true); [EOL]     assertEquals("0 days 1 hour 12 minutes", text); [EOL]     text = DurationFormatUtils.formatDurationWords(24 * 60 * 60 * 1000, false, true); [EOL]     assertEquals("1 day", text); [EOL]     text = DurationFormatUtils.formatDurationWords(50 * 1000, false, false); [EOL]     assertEquals("0 days 0 hours 0 minutes 50 seconds", text); [EOL]     text = DurationFormatUtils.formatDurationWords(65 * 1000, false, false); [EOL]     assertEquals("0 days 0 hours 1 minute 5 seconds", text); [EOL]     text = DurationFormatUtils.formatDurationWords(120 * 1000, false, false); [EOL]     assertEquals("0 days 0 hours 2 minutes 0 seconds", text); [EOL]     text = DurationFormatUtils.formatDurationWords(121 * 1000, false, false); [EOL]     assertEquals("0 days 0 hours 2 minutes 1 second", text); [EOL]     text = DurationFormatUtils.formatDurationWords(72 * 60 * 1000, false, false); [EOL]     assertEquals("0 days 1 hour 12 minutes 0 seconds", text); [EOL]     text = DurationFormatUtils.formatDurationWords(24 * 60 * 60 * 1000 + 72 * 60 * 1000, false, false); [EOL]     assertEquals("1 day 1 hour 12 minutes 0 seconds", text); [EOL]     text = DurationFormatUtils.formatDurationWords(2 * 24 * 60 * 60 * 1000 + 72 * 60 * 1000, false, false); [EOL]     assertEquals("2 days 1 hour 12 minutes 0 seconds", text); [EOL]     for (int i = 2; i < 31; i++) { [EOL]         text = DurationFormatUtils.formatDurationWords(i * 24 * 60 * 60 * 1000L, false, false); [EOL]     } [EOL] }
@Test [EOL] public void testFormatDurationWords() { [EOL]     String text = null; [EOL]     text = DurationFormatUtils.formatDurationWords(50 * 1000, true, false); [EOL]     assertEquals("50 seconds", text); [EOL]     text = DurationFormatUtils.formatDurationWords(65 * 1000, true, false); [EOL]     assertEquals("1 minute 5 seconds", text); [EOL]     text = DurationFormatUtils.formatDurationWords(120 * 1000, true, false); [EOL]     assertEquals("2 minutes 0 seconds", text); [EOL]     text = DurationFormatUtils.formatDurationWords(121 * 1000, true, false); [EOL]     assertEquals("2 minutes 1 second", text); [EOL]     text = DurationFormatUtils.formatDurationWords(72 * 60 * 1000, true, false); [EOL]     assertEquals("1 hour 12 minutes 0 seconds", text); [EOL]     text = DurationFormatUtils.formatDurationWords(24 * 60 * 60 * 1000, true, false); [EOL]     assertEquals("1 day 0 hours 0 minutes 0 seconds", text); [EOL]     text = DurationFormatUtils.formatDurationWords(50 * 1000, true, true); [EOL]     assertEquals("50 seconds", text); [EOL]     text = DurationFormatUtils.formatDurationWords(65 * 1000, true, true); [EOL]     assertEquals("1 minute 5 seconds", text); [EOL]     text = DurationFormatUtils.formatDurationWords(120 * 1000, true, true); [EOL]     assertEquals("2 minutes", text); [EOL]     text = DurationFormatUtils.formatDurationWords(121 * 1000, true, true); [EOL]     assertEquals("2 minutes 1 second", text); [EOL]     text = DurationFormatUtils.formatDurationWords(72 * 60 * 1000, true, true); [EOL]     assertEquals("1 hour 12 minutes", text); [EOL]     text = DurationFormatUtils.formatDurationWords(24 * 60 * 60 * 1000, true, true); [EOL]     assertEquals("1 day", text); [EOL]     text = DurationFormatUtils.formatDurationWords(50 * 1000, false, true); [EOL]     assertEquals("0 days 0 hours 0 minutes 50 seconds", text); [EOL]     text = DurationFormatUtils.formatDurationWords(65 * 1000, false, true); [EOL]     assertEquals("0 days 0 hours 1 minute 5 seconds", text); [EOL]     text = DurationFormatUtils.formatDurationWords(120 * 1000, false, true); [EOL]     assertEquals("0 days 0 hours 2 minutes", text); [EOL]     text = DurationFormatUtils.formatDurationWords(121 * 1000, false, true); [EOL]     assertEquals("0 days 0 hours 2 minutes 1 second", text); [EOL]     text = DurationFormatUtils.formatDurationWords(72 * 60 * 1000, false, true); [EOL]     assertEquals("0 days 1 hour 12 minutes", text); [EOL]     text = DurationFormatUtils.formatDurationWords(24 * 60 * 60 * 1000, false, true); [EOL]     assertEquals("1 day", text); [EOL]     text = DurationFormatUtils.formatDurationWords(50 * 1000, false, false); [EOL]     assertEquals("0 days 0 hours 0 minutes 50 seconds", text); [EOL]     text = DurationFormatUtils.formatDurationWords(65 * 1000, false, false); [EOL]     assertEquals("0 days 0 hours 1 minute 5 seconds", text); [EOL]     text = DurationFormatUtils.formatDurationWords(120 * 1000, false, false); [EOL]     assertEquals("0 days 0 hours 2 minutes 0 seconds", text); [EOL]     text = DurationFormatUtils.formatDurationWords(121 * 1000, false, false); [EOL]     assertEquals("0 days 0 hours 2 minutes 1 second", text); [EOL]     text = DurationFormatUtils.formatDurationWords(72 * 60 * 1000, false, false); [EOL]     assertEquals("0 days 1 hour 12 minutes 0 seconds", text); [EOL]     text = DurationFormatUtils.formatDurationWords(24 * 60 * 60 * 1000 + 72 * 60 * 1000, false, false); [EOL]     assertEquals("1 day 1 hour 12 minutes 0 seconds", text); [EOL]     text = DurationFormatUtils.formatDurationWords(2 * 24 * 60 * 60 * 1000 + 72 * 60 * 1000, false, false); [EOL]     assertEquals("2 days 1 hour 12 minutes 0 seconds", text); [EOL]     for (int i = 2; i < 31; i++) { [EOL]         text = DurationFormatUtils.formatDurationWords(i * 24 * 60 * 60 * 1000L, false, false); [EOL]     } [EOL] }
@Test [EOL] public void testFormatDurationWords() { [EOL]     String text = null; [EOL]     text = DurationFormatUtils.formatDurationWords(50 * 1000, true, false); [EOL]     assertEquals("50 seconds", text); [EOL]     text = DurationFormatUtils.formatDurationWords(65 * 1000, true, false); [EOL]     assertEquals("1 minute 5 seconds", text); [EOL]     text = DurationFormatUtils.formatDurationWords(120 * 1000, true, false); [EOL]     assertEquals("2 minutes 0 seconds", text); [EOL]     text = DurationFormatUtils.formatDurationWords(121 * 1000, true, false); [EOL]     assertEquals("2 minutes 1 second", text); [EOL]     text = DurationFormatUtils.formatDurationWords(72 * 60 * 1000, true, false); [EOL]     assertEquals("1 hour 12 minutes 0 seconds", text); [EOL]     text = DurationFormatUtils.formatDurationWords(24 * 60 * 60 * 1000, true, false); [EOL]     assertEquals("1 day 0 hours 0 minutes 0 seconds", text); [EOL]     text = DurationFormatUtils.formatDurationWords(50 * 1000, true, true); [EOL]     assertEquals("50 seconds", text); [EOL]     text = DurationFormatUtils.formatDurationWords(65 * 1000, true, true); [EOL]     assertEquals("1 minute 5 seconds", text); [EOL]     text = DurationFormatUtils.formatDurationWords(120 * 1000, true, true); [EOL]     assertEquals("2 minutes", text); [EOL]     text = DurationFormatUtils.formatDurationWords(121 * 1000, true, true); [EOL]     assertEquals("2 minutes 1 second", text); [EOL]     text = DurationFormatUtils.formatDurationWords(72 * 60 * 1000, true, true); [EOL]     assertEquals("1 hour 12 minutes", text); [EOL]     text = DurationFormatUtils.formatDurationWords(24 * 60 * 60 * 1000, true, true); [EOL]     assertEquals("1 day", text); [EOL]     text = DurationFormatUtils.formatDurationWords(50 * 1000, false, true); [EOL]     assertEquals("0 days 0 hours 0 minutes 50 seconds", text); [EOL]     text = DurationFormatUtils.formatDurationWords(65 * 1000, false, true); [EOL]     assertEquals("0 days 0 hours 1 minute 5 seconds", text); [EOL]     text = DurationFormatUtils.formatDurationWords(120 * 1000, false, true); [EOL]     assertEquals("0 days 0 hours 2 minutes", text); [EOL]     text = DurationFormatUtils.formatDurationWords(121 * 1000, false, true); [EOL]     assertEquals("0 days 0 hours 2 minutes 1 second", text); [EOL]     text = DurationFormatUtils.formatDurationWords(72 * 60 * 1000, false, true); [EOL]     assertEquals("0 days 1 hour 12 minutes", text); [EOL]     text = DurationFormatUtils.formatDurationWords(24 * 60 * 60 * 1000, false, true); [EOL]     assertEquals("1 day", text); [EOL]     text = DurationFormatUtils.formatDurationWords(50 * 1000, false, false); [EOL]     assertEquals("0 days 0 hours 0 minutes 50 seconds", text); [EOL]     text = DurationFormatUtils.formatDurationWords(65 * 1000, false, false); [EOL]     assertEquals("0 days 0 hours 1 minute 5 seconds", text); [EOL]     text = DurationFormatUtils.formatDurationWords(120 * 1000, false, false); [EOL]     assertEquals("0 days 0 hours 2 minutes 0 seconds", text); [EOL]     text = DurationFormatUtils.formatDurationWords(121 * 1000, false, false); [EOL]     assertEquals("0 days 0 hours 2 minutes 1 second", text); [EOL]     text = DurationFormatUtils.formatDurationWords(72 * 60 * 1000, false, false); [EOL]     assertEquals("0 days 1 hour 12 minutes 0 seconds", text); [EOL]     text = DurationFormatUtils.formatDurationWords(24 * 60 * 60 * 1000 + 72 * 60 * 1000, false, false); [EOL]     assertEquals("1 day 1 hour 12 minutes 0 seconds", text); [EOL]     text = DurationFormatUtils.formatDurationWords(2 * 24 * 60 * 60 * 1000 + 72 * 60 * 1000, false, false); [EOL]     assertEquals("2 days 1 hour 12 minutes 0 seconds", text); [EOL]     for (int i = 2; i < 31; i++) { [EOL]         text = DurationFormatUtils.formatDurationWords(i * 24 * 60 * 60 * 1000L, false, false); [EOL]     } [EOL] }
@Test [EOL] public void testFormatDurationWords() { [EOL]     String text = null; [EOL]     text = DurationFormatUtils.formatDurationWords(50 * 1000, true, false); [EOL]     assertEquals("50 seconds", text); [EOL]     text = DurationFormatUtils.formatDurationWords(65 * 1000, true, false); [EOL]     assertEquals("1 minute 5 seconds", text); [EOL]     text = DurationFormatUtils.formatDurationWords(120 * 1000, true, false); [EOL]     assertEquals("2 minutes 0 seconds", text); [EOL]     text = DurationFormatUtils.formatDurationWords(121 * 1000, true, false); [EOL]     assertEquals("2 minutes 1 second", text); [EOL]     text = DurationFormatUtils.formatDurationWords(72 * 60 * 1000, true, false); [EOL]     assertEquals("1 hour 12 minutes 0 seconds", text); [EOL]     text = DurationFormatUtils.formatDurationWords(24 * 60 * 60 * 1000, true, false); [EOL]     assertEquals("1 day 0 hours 0 minutes 0 seconds", text); [EOL]     text = DurationFormatUtils.formatDurationWords(50 * 1000, true, true); [EOL]     assertEquals("50 seconds", text); [EOL]     text = DurationFormatUtils.formatDurationWords(65 * 1000, true, true); [EOL]     assertEquals("1 minute 5 seconds", text); [EOL]     text = DurationFormatUtils.formatDurationWords(120 * 1000, true, true); [EOL]     assertEquals("2 minutes", text); [EOL]     text = DurationFormatUtils.formatDurationWords(121 * 1000, true, true); [EOL]     assertEquals("2 minutes 1 second", text); [EOL]     text = DurationFormatUtils.formatDurationWords(72 * 60 * 1000, true, true); [EOL]     assertEquals("1 hour 12 minutes", text); [EOL]     text = DurationFormatUtils.formatDurationWords(24 * 60 * 60 * 1000, true, true); [EOL]     assertEquals("1 day", text); [EOL]     text = DurationFormatUtils.formatDurationWords(50 * 1000, false, true); [EOL]     assertEquals("0 days 0 hours 0 minutes 50 seconds", text); [EOL]     text = DurationFormatUtils.formatDurationWords(65 * 1000, false, true); [EOL]     assertEquals("0 days 0 hours 1 minute 5 seconds", text); [EOL]     text = DurationFormatUtils.formatDurationWords(120 * 1000, false, true); [EOL]     assertEquals("0 days 0 hours 2 minutes", text); [EOL]     text = DurationFormatUtils.formatDurationWords(121 * 1000, false, true); [EOL]     assertEquals("0 days 0 hours 2 minutes 1 second", text); [EOL]     text = DurationFormatUtils.formatDurationWords(72 * 60 * 1000, false, true); [EOL]     assertEquals("0 days 1 hour 12 minutes", text); [EOL]     text = DurationFormatUtils.formatDurationWords(24 * 60 * 60 * 1000, false, true); [EOL]     assertEquals("1 day", text); [EOL]     text = DurationFormatUtils.formatDurationWords(50 * 1000, false, false); [EOL]     assertEquals("0 days 0 hours 0 minutes 50 seconds", text); [EOL]     text = DurationFormatUtils.formatDurationWords(65 * 1000, false, false); [EOL]     assertEquals("0 days 0 hours 1 minute 5 seconds", text); [EOL]     text = DurationFormatUtils.formatDurationWords(120 * 1000, false, false); [EOL]     assertEquals("0 days 0 hours 2 minutes 0 seconds", text); [EOL]     text = DurationFormatUtils.formatDurationWords(121 * 1000, false, false); [EOL]     assertEquals("0 days 0 hours 2 minutes 1 second", text); [EOL]     text = DurationFormatUtils.formatDurationWords(72 * 60 * 1000, false, false); [EOL]     assertEquals("0 days 1 hour 12 minutes 0 seconds", text); [EOL]     text = DurationFormatUtils.formatDurationWords(24 * 60 * 60 * 1000 + 72 * 60 * 1000, false, false); [EOL]     assertEquals("1 day 1 hour 12 minutes 0 seconds", text); [EOL]     text = DurationFormatUtils.formatDurationWords(2 * 24 * 60 * 60 * 1000 + 72 * 60 * 1000, false, false); [EOL]     assertEquals("2 days 1 hour 12 minutes 0 seconds", text); [EOL]     for (int i = 2; i < 31; i++) { [EOL]         text = DurationFormatUtils.formatDurationWords(i * 24 * 60 * 60 * 1000L, false, false); [EOL]     } [EOL] }
@Test [EOL] public void testFormatDurationWords() { [EOL]     String text = null; [EOL]     text = DurationFormatUtils.formatDurationWords(50 * 1000, true, false); [EOL]     assertEquals("50 seconds", text); [EOL]     text = DurationFormatUtils.formatDurationWords(65 * 1000, true, false); [EOL]     assertEquals("1 minute 5 seconds", text); [EOL]     text = DurationFormatUtils.formatDurationWords(120 * 1000, true, false); [EOL]     assertEquals("2 minutes 0 seconds", text); [EOL]     text = DurationFormatUtils.formatDurationWords(121 * 1000, true, false); [EOL]     assertEquals("2 minutes 1 second", text); [EOL]     text = DurationFormatUtils.formatDurationWords(72 * 60 * 1000, true, false); [EOL]     assertEquals("1 hour 12 minutes 0 seconds", text); [EOL]     text = DurationFormatUtils.formatDurationWords(24 * 60 * 60 * 1000, true, false); [EOL]     assertEquals("1 day 0 hours 0 minutes 0 seconds", text); [EOL]     text = DurationFormatUtils.formatDurationWords(50 * 1000, true, true); [EOL]     assertEquals("50 seconds", text); [EOL]     text = DurationFormatUtils.formatDurationWords(65 * 1000, true, true); [EOL]     assertEquals("1 minute 5 seconds", text); [EOL]     text = DurationFormatUtils.formatDurationWords(120 * 1000, true, true); [EOL]     assertEquals("2 minutes", text); [EOL]     text = DurationFormatUtils.formatDurationWords(121 * 1000, true, true); [EOL]     assertEquals("2 minutes 1 second", text); [EOL]     text = DurationFormatUtils.formatDurationWords(72 * 60 * 1000, true, true); [EOL]     assertEquals("1 hour 12 minutes", text); [EOL]     text = DurationFormatUtils.formatDurationWords(24 * 60 * 60 * 1000, true, true); [EOL]     assertEquals("1 day", text); [EOL]     text = DurationFormatUtils.formatDurationWords(50 * 1000, false, true); [EOL]     assertEquals("0 days 0 hours 0 minutes 50 seconds", text); [EOL]     text = DurationFormatUtils.formatDurationWords(65 * 1000, false, true); [EOL]     assertEquals("0 days 0 hours 1 minute 5 seconds", text); [EOL]     text = DurationFormatUtils.formatDurationWords(120 * 1000, false, true); [EOL]     assertEquals("0 days 0 hours 2 minutes", text); [EOL]     text = DurationFormatUtils.formatDurationWords(121 * 1000, false, true); [EOL]     assertEquals("0 days 0 hours 2 minutes 1 second", text); [EOL]     text = DurationFormatUtils.formatDurationWords(72 * 60 * 1000, false, true); [EOL]     assertEquals("0 days 1 hour 12 minutes", text); [EOL]     text = DurationFormatUtils.formatDurationWords(24 * 60 * 60 * 1000, false, true); [EOL]     assertEquals("1 day", text); [EOL]     text = DurationFormatUtils.formatDurationWords(50 * 1000, false, false); [EOL]     assertEquals("0 days 0 hours 0 minutes 50 seconds", text); [EOL]     text = DurationFormatUtils.formatDurationWords(65 * 1000, false, false); [EOL]     assertEquals("0 days 0 hours 1 minute 5 seconds", text); [EOL]     text = DurationFormatUtils.formatDurationWords(120 * 1000, false, false); [EOL]     assertEquals("0 days 0 hours 2 minutes 0 seconds", text); [EOL]     text = DurationFormatUtils.formatDurationWords(121 * 1000, false, false); [EOL]     assertEquals("0 days 0 hours 2 minutes 1 second", text); [EOL]     text = DurationFormatUtils.formatDurationWords(72 * 60 * 1000, false, false); [EOL]     assertEquals("0 days 1 hour 12 minutes 0 seconds", text); [EOL]     text = DurationFormatUtils.formatDurationWords(24 * 60 * 60 * 1000 + 72 * 60 * 1000, false, false); [EOL]     assertEquals("1 day 1 hour 12 minutes 0 seconds", text); [EOL]     text = DurationFormatUtils.formatDurationWords(2 * 24 * 60 * 60 * 1000 + 72 * 60 * 1000, false, false); [EOL]     assertEquals("2 days 1 hour 12 minutes 0 seconds", text); [EOL]     for (int i = 2; i < 31; i++) { [EOL]         text = DurationFormatUtils.formatDurationWords(i * 24 * 60 * 60 * 1000L, false, false); [EOL]     } [EOL] }
@Test [EOL] public void testFormatDuration() { [EOL]     long duration = 0; [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "y")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "M")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "d")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "H")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "m")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "s")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "S")); [EOL]     assertEquals("0000", DurationFormatUtils.formatDuration(duration, "SSSS")); [EOL]     assertEquals("0000", DurationFormatUtils.formatDuration(duration, "yyyy")); [EOL]     assertEquals("0000", DurationFormatUtils.formatDuration(duration, "yyMM")); [EOL]     duration = 60 * 1000; [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "y")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "M")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "d")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "H")); [EOL]     assertEquals("1", DurationFormatUtils.formatDuration(duration, "m")); [EOL]     assertEquals("60", DurationFormatUtils.formatDuration(duration, "s")); [EOL]     assertEquals("60000", DurationFormatUtils.formatDuration(duration, "S")); [EOL]     assertEquals("01:00", DurationFormatUtils.formatDuration(duration, "mm:ss")); [EOL]     final Calendar base = Calendar.getInstance(); [EOL]     base.set(2000, 0, 1, 0, 0, 0); [EOL]     base.set(Calendar.MILLISECOND, 0); [EOL]     final Calendar cal = Calendar.getInstance(); [EOL]     cal.set(2003, 1, 1, 0, 0, 0); [EOL]     cal.set(Calendar.MILLISECOND, 0); [EOL]     duration = cal.getTime().getTime() - base.getTime().getTime(); [EOL]     final int days = 366 + 365 + 365 + 31; [EOL]     assertEquals("0 0 " + days, DurationFormatUtils.formatDuration(duration, "y M d")); [EOL] }
@Test [EOL] public void testFormatDuration() { [EOL]     long duration = 0; [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "y")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "M")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "d")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "H")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "m")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "s")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "S")); [EOL]     assertEquals("0000", DurationFormatUtils.formatDuration(duration, "SSSS")); [EOL]     assertEquals("0000", DurationFormatUtils.formatDuration(duration, "yyyy")); [EOL]     assertEquals("0000", DurationFormatUtils.formatDuration(duration, "yyMM")); [EOL]     duration = 60 * 1000; [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "y")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "M")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "d")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "H")); [EOL]     assertEquals("1", DurationFormatUtils.formatDuration(duration, "m")); [EOL]     assertEquals("60", DurationFormatUtils.formatDuration(duration, "s")); [EOL]     assertEquals("60000", DurationFormatUtils.formatDuration(duration, "S")); [EOL]     assertEquals("01:00", DurationFormatUtils.formatDuration(duration, "mm:ss")); [EOL]     final Calendar base = Calendar.getInstance(); [EOL]     base.set(2000, 0, 1, 0, 0, 0); [EOL]     base.set(Calendar.MILLISECOND, 0); [EOL]     final Calendar cal = Calendar.getInstance(); [EOL]     cal.set(2003, 1, 1, 0, 0, 0); [EOL]     cal.set(Calendar.MILLISECOND, 0); [EOL]     duration = cal.getTime().getTime() - base.getTime().getTime(); [EOL]     final int days = 366 + 365 + 365 + 31; [EOL]     assertEquals("0 0 " + days, DurationFormatUtils.formatDuration(duration, "y M d")); [EOL] }
@Test [EOL] public void testFormatDuration() { [EOL]     long duration = 0; [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "y")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "M")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "d")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "H")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "m")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "s")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "S")); [EOL]     assertEquals("0000", DurationFormatUtils.formatDuration(duration, "SSSS")); [EOL]     assertEquals("0000", DurationFormatUtils.formatDuration(duration, "yyyy")); [EOL]     assertEquals("0000", DurationFormatUtils.formatDuration(duration, "yyMM")); [EOL]     duration = 60 * 1000; [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "y")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "M")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "d")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "H")); [EOL]     assertEquals("1", DurationFormatUtils.formatDuration(duration, "m")); [EOL]     assertEquals("60", DurationFormatUtils.formatDuration(duration, "s")); [EOL]     assertEquals("60000", DurationFormatUtils.formatDuration(duration, "S")); [EOL]     assertEquals("01:00", DurationFormatUtils.formatDuration(duration, "mm:ss")); [EOL]     final Calendar base = Calendar.getInstance(); [EOL]     base.set(2000, 0, 1, 0, 0, 0); [EOL]     base.set(Calendar.MILLISECOND, 0); [EOL]     final Calendar cal = Calendar.getInstance(); [EOL]     cal.set(2003, 1, 1, 0, 0, 0); [EOL]     cal.set(Calendar.MILLISECOND, 0); [EOL]     duration = cal.getTime().getTime() - base.getTime().getTime(); [EOL]     final int days = 366 + 365 + 365 + 31; [EOL]     assertEquals("0 0 " + days, DurationFormatUtils.formatDuration(duration, "y M d")); [EOL] }
@Test [EOL] public void testFormatDuration() { [EOL]     long duration = 0; [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "y")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "M")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "d")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "H")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "m")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "s")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "S")); [EOL]     assertEquals("0000", DurationFormatUtils.formatDuration(duration, "SSSS")); [EOL]     assertEquals("0000", DurationFormatUtils.formatDuration(duration, "yyyy")); [EOL]     assertEquals("0000", DurationFormatUtils.formatDuration(duration, "yyMM")); [EOL]     duration = 60 * 1000; [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "y")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "M")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "d")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "H")); [EOL]     assertEquals("1", DurationFormatUtils.formatDuration(duration, "m")); [EOL]     assertEquals("60", DurationFormatUtils.formatDuration(duration, "s")); [EOL]     assertEquals("60000", DurationFormatUtils.formatDuration(duration, "S")); [EOL]     assertEquals("01:00", DurationFormatUtils.formatDuration(duration, "mm:ss")); [EOL]     final Calendar base = Calendar.getInstance(); [EOL]     base.set(2000, 0, 1, 0, 0, 0); [EOL]     base.set(Calendar.MILLISECOND, 0); [EOL]     final Calendar cal = Calendar.getInstance(); [EOL]     cal.set(2003, 1, 1, 0, 0, 0); [EOL]     cal.set(Calendar.MILLISECOND, 0); [EOL]     duration = cal.getTime().getTime() - base.getTime().getTime(); [EOL]     final int days = 366 + 365 + 365 + 31; [EOL]     assertEquals("0 0 " + days, DurationFormatUtils.formatDuration(duration, "y M d")); [EOL] }
@Test [EOL] public void testFormatDuration() { [EOL]     long duration = 0; [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "y")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "M")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "d")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "H")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "m")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "s")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "S")); [EOL]     assertEquals("0000", DurationFormatUtils.formatDuration(duration, "SSSS")); [EOL]     assertEquals("0000", DurationFormatUtils.formatDuration(duration, "yyyy")); [EOL]     assertEquals("0000", DurationFormatUtils.formatDuration(duration, "yyMM")); [EOL]     duration = 60 * 1000; [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "y")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "M")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "d")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "H")); [EOL]     assertEquals("1", DurationFormatUtils.formatDuration(duration, "m")); [EOL]     assertEquals("60", DurationFormatUtils.formatDuration(duration, "s")); [EOL]     assertEquals("60000", DurationFormatUtils.formatDuration(duration, "S")); [EOL]     assertEquals("01:00", DurationFormatUtils.formatDuration(duration, "mm:ss")); [EOL]     final Calendar base = Calendar.getInstance(); [EOL]     base.set(2000, 0, 1, 0, 0, 0); [EOL]     base.set(Calendar.MILLISECOND, 0); [EOL]     final Calendar cal = Calendar.getInstance(); [EOL]     cal.set(2003, 1, 1, 0, 0, 0); [EOL]     cal.set(Calendar.MILLISECOND, 0); [EOL]     duration = cal.getTime().getTime() - base.getTime().getTime(); [EOL]     final int days = 366 + 365 + 365 + 31; [EOL]     assertEquals("0 0 " + days, DurationFormatUtils.formatDuration(duration, "y M d")); [EOL] }
@Test [EOL] public void testFormatDuration() { [EOL]     long duration = 0; [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "y")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "M")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "d")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "H")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "m")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "s")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "S")); [EOL]     assertEquals("0000", DurationFormatUtils.formatDuration(duration, "SSSS")); [EOL]     assertEquals("0000", DurationFormatUtils.formatDuration(duration, "yyyy")); [EOL]     assertEquals("0000", DurationFormatUtils.formatDuration(duration, "yyMM")); [EOL]     duration = 60 * 1000; [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "y")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "M")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "d")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "H")); [EOL]     assertEquals("1", DurationFormatUtils.formatDuration(duration, "m")); [EOL]     assertEquals("60", DurationFormatUtils.formatDuration(duration, "s")); [EOL]     assertEquals("60000", DurationFormatUtils.formatDuration(duration, "S")); [EOL]     assertEquals("01:00", DurationFormatUtils.formatDuration(duration, "mm:ss")); [EOL]     final Calendar base = Calendar.getInstance(); [EOL]     base.set(2000, 0, 1, 0, 0, 0); [EOL]     base.set(Calendar.MILLISECOND, 0); [EOL]     final Calendar cal = Calendar.getInstance(); [EOL]     cal.set(2003, 1, 1, 0, 0, 0); [EOL]     cal.set(Calendar.MILLISECOND, 0); [EOL]     duration = cal.getTime().getTime() - base.getTime().getTime(); [EOL]     final int days = 366 + 365 + 365 + 31; [EOL]     assertEquals("0 0 " + days, DurationFormatUtils.formatDuration(duration, "y M d")); [EOL] }
@Test [EOL] public void testFormatDuration() { [EOL]     long duration = 0; [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "y")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "M")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "d")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "H")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "m")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "s")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "S")); [EOL]     assertEquals("0000", DurationFormatUtils.formatDuration(duration, "SSSS")); [EOL]     assertEquals("0000", DurationFormatUtils.formatDuration(duration, "yyyy")); [EOL]     assertEquals("0000", DurationFormatUtils.formatDuration(duration, "yyMM")); [EOL]     duration = 60 * 1000; [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "y")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "M")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "d")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "H")); [EOL]     assertEquals("1", DurationFormatUtils.formatDuration(duration, "m")); [EOL]     assertEquals("60", DurationFormatUtils.formatDuration(duration, "s")); [EOL]     assertEquals("60000", DurationFormatUtils.formatDuration(duration, "S")); [EOL]     assertEquals("01:00", DurationFormatUtils.formatDuration(duration, "mm:ss")); [EOL]     final Calendar base = Calendar.getInstance(); [EOL]     base.set(2000, 0, 1, 0, 0, 0); [EOL]     base.set(Calendar.MILLISECOND, 0); [EOL]     final Calendar cal = Calendar.getInstance(); [EOL]     cal.set(2003, 1, 1, 0, 0, 0); [EOL]     cal.set(Calendar.MILLISECOND, 0); [EOL]     duration = cal.getTime().getTime() - base.getTime().getTime(); [EOL]     final int days = 366 + 365 + 365 + 31; [EOL]     assertEquals("0 0 " + days, DurationFormatUtils.formatDuration(duration, "y M d")); [EOL] }
@Test [EOL] public void testFormatDuration() { [EOL]     long duration = 0; [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "y")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "M")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "d")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "H")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "m")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "s")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "S")); [EOL]     assertEquals("0000", DurationFormatUtils.formatDuration(duration, "SSSS")); [EOL]     assertEquals("0000", DurationFormatUtils.formatDuration(duration, "yyyy")); [EOL]     assertEquals("0000", DurationFormatUtils.formatDuration(duration, "yyMM")); [EOL]     duration = 60 * 1000; [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "y")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "M")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "d")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "H")); [EOL]     assertEquals("1", DurationFormatUtils.formatDuration(duration, "m")); [EOL]     assertEquals("60", DurationFormatUtils.formatDuration(duration, "s")); [EOL]     assertEquals("60000", DurationFormatUtils.formatDuration(duration, "S")); [EOL]     assertEquals("01:00", DurationFormatUtils.formatDuration(duration, "mm:ss")); [EOL]     final Calendar base = Calendar.getInstance(); [EOL]     base.set(2000, 0, 1, 0, 0, 0); [EOL]     base.set(Calendar.MILLISECOND, 0); [EOL]     final Calendar cal = Calendar.getInstance(); [EOL]     cal.set(2003, 1, 1, 0, 0, 0); [EOL]     cal.set(Calendar.MILLISECOND, 0); [EOL]     duration = cal.getTime().getTime() - base.getTime().getTime(); [EOL]     final int days = 366 + 365 + 365 + 31; [EOL]     assertEquals("0 0 " + days, DurationFormatUtils.formatDuration(duration, "y M d")); [EOL] }
@Test [EOL] public void testFormatDuration() { [EOL]     long duration = 0; [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "y")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "M")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "d")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "H")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "m")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "s")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "S")); [EOL]     assertEquals("0000", DurationFormatUtils.formatDuration(duration, "SSSS")); [EOL]     assertEquals("0000", DurationFormatUtils.formatDuration(duration, "yyyy")); [EOL]     assertEquals("0000", DurationFormatUtils.formatDuration(duration, "yyMM")); [EOL]     duration = 60 * 1000; [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "y")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "M")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "d")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "H")); [EOL]     assertEquals("1", DurationFormatUtils.formatDuration(duration, "m")); [EOL]     assertEquals("60", DurationFormatUtils.formatDuration(duration, "s")); [EOL]     assertEquals("60000", DurationFormatUtils.formatDuration(duration, "S")); [EOL]     assertEquals("01:00", DurationFormatUtils.formatDuration(duration, "mm:ss")); [EOL]     final Calendar base = Calendar.getInstance(); [EOL]     base.set(2000, 0, 1, 0, 0, 0); [EOL]     base.set(Calendar.MILLISECOND, 0); [EOL]     final Calendar cal = Calendar.getInstance(); [EOL]     cal.set(2003, 1, 1, 0, 0, 0); [EOL]     cal.set(Calendar.MILLISECOND, 0); [EOL]     duration = cal.getTime().getTime() - base.getTime().getTime(); [EOL]     final int days = 366 + 365 + 365 + 31; [EOL]     assertEquals("0 0 " + days, DurationFormatUtils.formatDuration(duration, "y M d")); [EOL] }
@Test [EOL] public void testFormatDuration() { [EOL]     long duration = 0; [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "y")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "M")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "d")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "H")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "m")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "s")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "S")); [EOL]     assertEquals("0000", DurationFormatUtils.formatDuration(duration, "SSSS")); [EOL]     assertEquals("0000", DurationFormatUtils.formatDuration(duration, "yyyy")); [EOL]     assertEquals("0000", DurationFormatUtils.formatDuration(duration, "yyMM")); [EOL]     duration = 60 * 1000; [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "y")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "M")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "d")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "H")); [EOL]     assertEquals("1", DurationFormatUtils.formatDuration(duration, "m")); [EOL]     assertEquals("60", DurationFormatUtils.formatDuration(duration, "s")); [EOL]     assertEquals("60000", DurationFormatUtils.formatDuration(duration, "S")); [EOL]     assertEquals("01:00", DurationFormatUtils.formatDuration(duration, "mm:ss")); [EOL]     final Calendar base = Calendar.getInstance(); [EOL]     base.set(2000, 0, 1, 0, 0, 0); [EOL]     base.set(Calendar.MILLISECOND, 0); [EOL]     final Calendar cal = Calendar.getInstance(); [EOL]     cal.set(2003, 1, 1, 0, 0, 0); [EOL]     cal.set(Calendar.MILLISECOND, 0); [EOL]     duration = cal.getTime().getTime() - base.getTime().getTime(); [EOL]     final int days = 366 + 365 + 365 + 31; [EOL]     assertEquals("0 0 " + days, DurationFormatUtils.formatDuration(duration, "y M d")); [EOL] }
@Test [EOL] public void testFormatDuration() { [EOL]     long duration = 0; [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "y")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "M")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "d")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "H")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "m")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "s")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "S")); [EOL]     assertEquals("0000", DurationFormatUtils.formatDuration(duration, "SSSS")); [EOL]     assertEquals("0000", DurationFormatUtils.formatDuration(duration, "yyyy")); [EOL]     assertEquals("0000", DurationFormatUtils.formatDuration(duration, "yyMM")); [EOL]     duration = 60 * 1000; [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "y")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "M")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "d")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "H")); [EOL]     assertEquals("1", DurationFormatUtils.formatDuration(duration, "m")); [EOL]     assertEquals("60", DurationFormatUtils.formatDuration(duration, "s")); [EOL]     assertEquals("60000", DurationFormatUtils.formatDuration(duration, "S")); [EOL]     assertEquals("01:00", DurationFormatUtils.formatDuration(duration, "mm:ss")); [EOL]     final Calendar base = Calendar.getInstance(); [EOL]     base.set(2000, 0, 1, 0, 0, 0); [EOL]     base.set(Calendar.MILLISECOND, 0); [EOL]     final Calendar cal = Calendar.getInstance(); [EOL]     cal.set(2003, 1, 1, 0, 0, 0); [EOL]     cal.set(Calendar.MILLISECOND, 0); [EOL]     duration = cal.getTime().getTime() - base.getTime().getTime(); [EOL]     final int days = 366 + 365 + 365 + 31; [EOL]     assertEquals("0 0 " + days, DurationFormatUtils.formatDuration(duration, "y M d")); [EOL] }
@Test [EOL] public void testFormatDuration() { [EOL]     long duration = 0; [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "y")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "M")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "d")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "H")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "m")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "s")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "S")); [EOL]     assertEquals("0000", DurationFormatUtils.formatDuration(duration, "SSSS")); [EOL]     assertEquals("0000", DurationFormatUtils.formatDuration(duration, "yyyy")); [EOL]     assertEquals("0000", DurationFormatUtils.formatDuration(duration, "yyMM")); [EOL]     duration = 60 * 1000; [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "y")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "M")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "d")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "H")); [EOL]     assertEquals("1", DurationFormatUtils.formatDuration(duration, "m")); [EOL]     assertEquals("60", DurationFormatUtils.formatDuration(duration, "s")); [EOL]     assertEquals("60000", DurationFormatUtils.formatDuration(duration, "S")); [EOL]     assertEquals("01:00", DurationFormatUtils.formatDuration(duration, "mm:ss")); [EOL]     final Calendar base = Calendar.getInstance(); [EOL]     base.set(2000, 0, 1, 0, 0, 0); [EOL]     base.set(Calendar.MILLISECOND, 0); [EOL]     final Calendar cal = Calendar.getInstance(); [EOL]     cal.set(2003, 1, 1, 0, 0, 0); [EOL]     cal.set(Calendar.MILLISECOND, 0); [EOL]     duration = cal.getTime().getTime() - base.getTime().getTime(); [EOL]     final int days = 366 + 365 + 365 + 31; [EOL]     assertEquals("0 0 " + days, DurationFormatUtils.formatDuration(duration, "y M d")); [EOL] }
@Test [EOL] public void testFormatDuration() { [EOL]     long duration = 0; [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "y")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "M")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "d")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "H")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "m")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "s")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "S")); [EOL]     assertEquals("0000", DurationFormatUtils.formatDuration(duration, "SSSS")); [EOL]     assertEquals("0000", DurationFormatUtils.formatDuration(duration, "yyyy")); [EOL]     assertEquals("0000", DurationFormatUtils.formatDuration(duration, "yyMM")); [EOL]     duration = 60 * 1000; [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "y")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "M")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "d")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "H")); [EOL]     assertEquals("1", DurationFormatUtils.formatDuration(duration, "m")); [EOL]     assertEquals("60", DurationFormatUtils.formatDuration(duration, "s")); [EOL]     assertEquals("60000", DurationFormatUtils.formatDuration(duration, "S")); [EOL]     assertEquals("01:00", DurationFormatUtils.formatDuration(duration, "mm:ss")); [EOL]     final Calendar base = Calendar.getInstance(); [EOL]     base.set(2000, 0, 1, 0, 0, 0); [EOL]     base.set(Calendar.MILLISECOND, 0); [EOL]     final Calendar cal = Calendar.getInstance(); [EOL]     cal.set(2003, 1, 1, 0, 0, 0); [EOL]     cal.set(Calendar.MILLISECOND, 0); [EOL]     duration = cal.getTime().getTime() - base.getTime().getTime(); [EOL]     final int days = 366 + 365 + 365 + 31; [EOL]     assertEquals("0 0 " + days, DurationFormatUtils.formatDuration(duration, "y M d")); [EOL] }
@Test [EOL] public void testFormatDuration() { [EOL]     long duration = 0; [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "y")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "M")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "d")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "H")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "m")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "s")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "S")); [EOL]     assertEquals("0000", DurationFormatUtils.formatDuration(duration, "SSSS")); [EOL]     assertEquals("0000", DurationFormatUtils.formatDuration(duration, "yyyy")); [EOL]     assertEquals("0000", DurationFormatUtils.formatDuration(duration, "yyMM")); [EOL]     duration = 60 * 1000; [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "y")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "M")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "d")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "H")); [EOL]     assertEquals("1", DurationFormatUtils.formatDuration(duration, "m")); [EOL]     assertEquals("60", DurationFormatUtils.formatDuration(duration, "s")); [EOL]     assertEquals("60000", DurationFormatUtils.formatDuration(duration, "S")); [EOL]     assertEquals("01:00", DurationFormatUtils.formatDuration(duration, "mm:ss")); [EOL]     final Calendar base = Calendar.getInstance(); [EOL]     base.set(2000, 0, 1, 0, 0, 0); [EOL]     base.set(Calendar.MILLISECOND, 0); [EOL]     final Calendar cal = Calendar.getInstance(); [EOL]     cal.set(2003, 1, 1, 0, 0, 0); [EOL]     cal.set(Calendar.MILLISECOND, 0); [EOL]     duration = cal.getTime().getTime() - base.getTime().getTime(); [EOL]     final int days = 366 + 365 + 365 + 31; [EOL]     assertEquals("0 0 " + days, DurationFormatUtils.formatDuration(duration, "y M d")); [EOL] }
@Test [EOL] public void testFormatDuration() { [EOL]     long duration = 0; [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "y")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "M")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "d")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "H")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "m")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "s")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "S")); [EOL]     assertEquals("0000", DurationFormatUtils.formatDuration(duration, "SSSS")); [EOL]     assertEquals("0000", DurationFormatUtils.formatDuration(duration, "yyyy")); [EOL]     assertEquals("0000", DurationFormatUtils.formatDuration(duration, "yyMM")); [EOL]     duration = 60 * 1000; [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "y")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "M")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "d")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "H")); [EOL]     assertEquals("1", DurationFormatUtils.formatDuration(duration, "m")); [EOL]     assertEquals("60", DurationFormatUtils.formatDuration(duration, "s")); [EOL]     assertEquals("60000", DurationFormatUtils.formatDuration(duration, "S")); [EOL]     assertEquals("01:00", DurationFormatUtils.formatDuration(duration, "mm:ss")); [EOL]     final Calendar base = Calendar.getInstance(); [EOL]     base.set(2000, 0, 1, 0, 0, 0); [EOL]     base.set(Calendar.MILLISECOND, 0); [EOL]     final Calendar cal = Calendar.getInstance(); [EOL]     cal.set(2003, 1, 1, 0, 0, 0); [EOL]     cal.set(Calendar.MILLISECOND, 0); [EOL]     duration = cal.getTime().getTime() - base.getTime().getTime(); [EOL]     final int days = 366 + 365 + 365 + 31; [EOL]     assertEquals("0 0 " + days, DurationFormatUtils.formatDuration(duration, "y M d")); [EOL] }
@Test [EOL] public void testFormatDuration() { [EOL]     long duration = 0; [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "y")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "M")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "d")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "H")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "m")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "s")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "S")); [EOL]     assertEquals("0000", DurationFormatUtils.formatDuration(duration, "SSSS")); [EOL]     assertEquals("0000", DurationFormatUtils.formatDuration(duration, "yyyy")); [EOL]     assertEquals("0000", DurationFormatUtils.formatDuration(duration, "yyMM")); [EOL]     duration = 60 * 1000; [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "y")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "M")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "d")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "H")); [EOL]     assertEquals("1", DurationFormatUtils.formatDuration(duration, "m")); [EOL]     assertEquals("60", DurationFormatUtils.formatDuration(duration, "s")); [EOL]     assertEquals("60000", DurationFormatUtils.formatDuration(duration, "S")); [EOL]     assertEquals("01:00", DurationFormatUtils.formatDuration(duration, "mm:ss")); [EOL]     final Calendar base = Calendar.getInstance(); [EOL]     base.set(2000, 0, 1, 0, 0, 0); [EOL]     base.set(Calendar.MILLISECOND, 0); [EOL]     final Calendar cal = Calendar.getInstance(); [EOL]     cal.set(2003, 1, 1, 0, 0, 0); [EOL]     cal.set(Calendar.MILLISECOND, 0); [EOL]     duration = cal.getTime().getTime() - base.getTime().getTime(); [EOL]     final int days = 366 + 365 + 365 + 31; [EOL]     assertEquals("0 0 " + days, DurationFormatUtils.formatDuration(duration, "y M d")); [EOL] }
@Test [EOL] public void testFormatDuration() { [EOL]     long duration = 0; [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "y")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "M")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "d")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "H")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "m")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "s")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "S")); [EOL]     assertEquals("0000", DurationFormatUtils.formatDuration(duration, "SSSS")); [EOL]     assertEquals("0000", DurationFormatUtils.formatDuration(duration, "yyyy")); [EOL]     assertEquals("0000", DurationFormatUtils.formatDuration(duration, "yyMM")); [EOL]     duration = 60 * 1000; [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "y")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "M")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "d")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "H")); [EOL]     assertEquals("1", DurationFormatUtils.formatDuration(duration, "m")); [EOL]     assertEquals("60", DurationFormatUtils.formatDuration(duration, "s")); [EOL]     assertEquals("60000", DurationFormatUtils.formatDuration(duration, "S")); [EOL]     assertEquals("01:00", DurationFormatUtils.formatDuration(duration, "mm:ss")); [EOL]     final Calendar base = Calendar.getInstance(); [EOL]     base.set(2000, 0, 1, 0, 0, 0); [EOL]     base.set(Calendar.MILLISECOND, 0); [EOL]     final Calendar cal = Calendar.getInstance(); [EOL]     cal.set(2003, 1, 1, 0, 0, 0); [EOL]     cal.set(Calendar.MILLISECOND, 0); [EOL]     duration = cal.getTime().getTime() - base.getTime().getTime(); [EOL]     final int days = 366 + 365 + 365 + 31; [EOL]     assertEquals("0 0 " + days, DurationFormatUtils.formatDuration(duration, "y M d")); [EOL] }
@Test [EOL] public void testFormatDuration() { [EOL]     long duration = 0; [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "y")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "M")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "d")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "H")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "m")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "s")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "S")); [EOL]     assertEquals("0000", DurationFormatUtils.formatDuration(duration, "SSSS")); [EOL]     assertEquals("0000", DurationFormatUtils.formatDuration(duration, "yyyy")); [EOL]     assertEquals("0000", DurationFormatUtils.formatDuration(duration, "yyMM")); [EOL]     duration = 60 * 1000; [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "y")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "M")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "d")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "H")); [EOL]     assertEquals("1", DurationFormatUtils.formatDuration(duration, "m")); [EOL]     assertEquals("60", DurationFormatUtils.formatDuration(duration, "s")); [EOL]     assertEquals("60000", DurationFormatUtils.formatDuration(duration, "S")); [EOL]     assertEquals("01:00", DurationFormatUtils.formatDuration(duration, "mm:ss")); [EOL]     final Calendar base = Calendar.getInstance(); [EOL]     base.set(2000, 0, 1, 0, 0, 0); [EOL]     base.set(Calendar.MILLISECOND, 0); [EOL]     final Calendar cal = Calendar.getInstance(); [EOL]     cal.set(2003, 1, 1, 0, 0, 0); [EOL]     cal.set(Calendar.MILLISECOND, 0); [EOL]     duration = cal.getTime().getTime() - base.getTime().getTime(); [EOL]     final int days = 366 + 365 + 365 + 31; [EOL]     assertEquals("0 0 " + days, DurationFormatUtils.formatDuration(duration, "y M d")); [EOL] }
@Test [EOL] public void testFormatDuration() { [EOL]     long duration = 0; [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "y")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "M")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "d")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "H")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "m")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "s")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "S")); [EOL]     assertEquals("0000", DurationFormatUtils.formatDuration(duration, "SSSS")); [EOL]     assertEquals("0000", DurationFormatUtils.formatDuration(duration, "yyyy")); [EOL]     assertEquals("0000", DurationFormatUtils.formatDuration(duration, "yyMM")); [EOL]     duration = 60 * 1000; [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "y")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "M")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "d")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "H")); [EOL]     assertEquals("1", DurationFormatUtils.formatDuration(duration, "m")); [EOL]     assertEquals("60", DurationFormatUtils.formatDuration(duration, "s")); [EOL]     assertEquals("60000", DurationFormatUtils.formatDuration(duration, "S")); [EOL]     assertEquals("01:00", DurationFormatUtils.formatDuration(duration, "mm:ss")); [EOL]     final Calendar base = Calendar.getInstance(); [EOL]     base.set(2000, 0, 1, 0, 0, 0); [EOL]     base.set(Calendar.MILLISECOND, 0); [EOL]     final Calendar cal = Calendar.getInstance(); [EOL]     cal.set(2003, 1, 1, 0, 0, 0); [EOL]     cal.set(Calendar.MILLISECOND, 0); [EOL]     duration = cal.getTime().getTime() - base.getTime().getTime(); [EOL]     final int days = 366 + 365 + 365 + 31; [EOL]     assertEquals("0 0 " + days, DurationFormatUtils.formatDuration(duration, "y M d")); [EOL] }
@Test [EOL] public void testFormatDuration() { [EOL]     long duration = 0; [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "y")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "M")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "d")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "H")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "m")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "s")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "S")); [EOL]     assertEquals("0000", DurationFormatUtils.formatDuration(duration, "SSSS")); [EOL]     assertEquals("0000", DurationFormatUtils.formatDuration(duration, "yyyy")); [EOL]     assertEquals("0000", DurationFormatUtils.formatDuration(duration, "yyMM")); [EOL]     duration = 60 * 1000; [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "y")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "M")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "d")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "H")); [EOL]     assertEquals("1", DurationFormatUtils.formatDuration(duration, "m")); [EOL]     assertEquals("60", DurationFormatUtils.formatDuration(duration, "s")); [EOL]     assertEquals("60000", DurationFormatUtils.formatDuration(duration, "S")); [EOL]     assertEquals("01:00", DurationFormatUtils.formatDuration(duration, "mm:ss")); [EOL]     final Calendar base = Calendar.getInstance(); [EOL]     base.set(2000, 0, 1, 0, 0, 0); [EOL]     base.set(Calendar.MILLISECOND, 0); [EOL]     final Calendar cal = Calendar.getInstance(); [EOL]     cal.set(2003, 1, 1, 0, 0, 0); [EOL]     cal.set(Calendar.MILLISECOND, 0); [EOL]     duration = cal.getTime().getTime() - base.getTime().getTime(); [EOL]     final int days = 366 + 365 + 365 + 31; [EOL]     assertEquals("0 0 " + days, DurationFormatUtils.formatDuration(duration, "y M d")); [EOL] }
@Test [EOL] public void testFormatDuration() { [EOL]     long duration = 0; [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "y")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "M")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "d")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "H")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "m")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "s")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "S")); [EOL]     assertEquals("0000", DurationFormatUtils.formatDuration(duration, "SSSS")); [EOL]     assertEquals("0000", DurationFormatUtils.formatDuration(duration, "yyyy")); [EOL]     assertEquals("0000", DurationFormatUtils.formatDuration(duration, "yyMM")); [EOL]     duration = 60 * 1000; [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "y")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "M")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "d")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "H")); [EOL]     assertEquals("1", DurationFormatUtils.formatDuration(duration, "m")); [EOL]     assertEquals("60", DurationFormatUtils.formatDuration(duration, "s")); [EOL]     assertEquals("60000", DurationFormatUtils.formatDuration(duration, "S")); [EOL]     assertEquals("01:00", DurationFormatUtils.formatDuration(duration, "mm:ss")); [EOL]     final Calendar base = Calendar.getInstance(); [EOL]     base.set(2000, 0, 1, 0, 0, 0); [EOL]     base.set(Calendar.MILLISECOND, 0); [EOL]     final Calendar cal = Calendar.getInstance(); [EOL]     cal.set(2003, 1, 1, 0, 0, 0); [EOL]     cal.set(Calendar.MILLISECOND, 0); [EOL]     duration = cal.getTime().getTime() - base.getTime().getTime(); [EOL]     final int days = 366 + 365 + 365 + 31; [EOL]     assertEquals("0 0 " + days, DurationFormatUtils.formatDuration(duration, "y M d")); [EOL] }
@Test [EOL] public void testFormatDuration() { [EOL]     long duration = 0; [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "y")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "M")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "d")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "H")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "m")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "s")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "S")); [EOL]     assertEquals("0000", DurationFormatUtils.formatDuration(duration, "SSSS")); [EOL]     assertEquals("0000", DurationFormatUtils.formatDuration(duration, "yyyy")); [EOL]     assertEquals("0000", DurationFormatUtils.formatDuration(duration, "yyMM")); [EOL]     duration = 60 * 1000; [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "y")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "M")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "d")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "H")); [EOL]     assertEquals("1", DurationFormatUtils.formatDuration(duration, "m")); [EOL]     assertEquals("60", DurationFormatUtils.formatDuration(duration, "s")); [EOL]     assertEquals("60000", DurationFormatUtils.formatDuration(duration, "S")); [EOL]     assertEquals("01:00", DurationFormatUtils.formatDuration(duration, "mm:ss")); [EOL]     final Calendar base = Calendar.getInstance(); [EOL]     base.set(2000, 0, 1, 0, 0, 0); [EOL]     base.set(Calendar.MILLISECOND, 0); [EOL]     final Calendar cal = Calendar.getInstance(); [EOL]     cal.set(2003, 1, 1, 0, 0, 0); [EOL]     cal.set(Calendar.MILLISECOND, 0); [EOL]     duration = cal.getTime().getTime() - base.getTime().getTime(); [EOL]     final int days = 366 + 365 + 365 + 31; [EOL]     assertEquals("0 0 " + days, DurationFormatUtils.formatDuration(duration, "y M d")); [EOL] }
@Test [EOL] public void testFormatDuration() { [EOL]     long duration = 0; [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "y")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "M")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "d")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "H")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "m")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "s")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "S")); [EOL]     assertEquals("0000", DurationFormatUtils.formatDuration(duration, "SSSS")); [EOL]     assertEquals("0000", DurationFormatUtils.formatDuration(duration, "yyyy")); [EOL]     assertEquals("0000", DurationFormatUtils.formatDuration(duration, "yyMM")); [EOL]     duration = 60 * 1000; [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "y")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "M")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "d")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "H")); [EOL]     assertEquals("1", DurationFormatUtils.formatDuration(duration, "m")); [EOL]     assertEquals("60", DurationFormatUtils.formatDuration(duration, "s")); [EOL]     assertEquals("60000", DurationFormatUtils.formatDuration(duration, "S")); [EOL]     assertEquals("01:00", DurationFormatUtils.formatDuration(duration, "mm:ss")); [EOL]     final Calendar base = Calendar.getInstance(); [EOL]     base.set(2000, 0, 1, 0, 0, 0); [EOL]     base.set(Calendar.MILLISECOND, 0); [EOL]     final Calendar cal = Calendar.getInstance(); [EOL]     cal.set(2003, 1, 1, 0, 0, 0); [EOL]     cal.set(Calendar.MILLISECOND, 0); [EOL]     duration = cal.getTime().getTime() - base.getTime().getTime(); [EOL]     final int days = 366 + 365 + 365 + 31; [EOL]     assertEquals("0 0 " + days, DurationFormatUtils.formatDuration(duration, "y M d")); [EOL] }
@Test [EOL] public void testFormatDuration() { [EOL]     long duration = 0; [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "y")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "M")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "d")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "H")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "m")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "s")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "S")); [EOL]     assertEquals("0000", DurationFormatUtils.formatDuration(duration, "SSSS")); [EOL]     assertEquals("0000", DurationFormatUtils.formatDuration(duration, "yyyy")); [EOL]     assertEquals("0000", DurationFormatUtils.formatDuration(duration, "yyMM")); [EOL]     duration = 60 * 1000; [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "y")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "M")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "d")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "H")); [EOL]     assertEquals("1", DurationFormatUtils.formatDuration(duration, "m")); [EOL]     assertEquals("60", DurationFormatUtils.formatDuration(duration, "s")); [EOL]     assertEquals("60000", DurationFormatUtils.formatDuration(duration, "S")); [EOL]     assertEquals("01:00", DurationFormatUtils.formatDuration(duration, "mm:ss")); [EOL]     final Calendar base = Calendar.getInstance(); [EOL]     base.set(2000, 0, 1, 0, 0, 0); [EOL]     base.set(Calendar.MILLISECOND, 0); [EOL]     final Calendar cal = Calendar.getInstance(); [EOL]     cal.set(2003, 1, 1, 0, 0, 0); [EOL]     cal.set(Calendar.MILLISECOND, 0); [EOL]     duration = cal.getTime().getTime() - base.getTime().getTime(); [EOL]     final int days = 366 + 365 + 365 + 31; [EOL]     assertEquals("0 0 " + days, DurationFormatUtils.formatDuration(duration, "y M d")); [EOL] }
@Test [EOL] public void testFormatDuration() { [EOL]     long duration = 0; [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "y")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "M")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "d")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "H")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "m")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "s")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "S")); [EOL]     assertEquals("0000", DurationFormatUtils.formatDuration(duration, "SSSS")); [EOL]     assertEquals("0000", DurationFormatUtils.formatDuration(duration, "yyyy")); [EOL]     assertEquals("0000", DurationFormatUtils.formatDuration(duration, "yyMM")); [EOL]     duration = 60 * 1000; [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "y")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "M")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "d")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "H")); [EOL]     assertEquals("1", DurationFormatUtils.formatDuration(duration, "m")); [EOL]     assertEquals("60", DurationFormatUtils.formatDuration(duration, "s")); [EOL]     assertEquals("60000", DurationFormatUtils.formatDuration(duration, "S")); [EOL]     assertEquals("01:00", DurationFormatUtils.formatDuration(duration, "mm:ss")); [EOL]     final Calendar base = Calendar.getInstance(); [EOL]     base.set(2000, 0, 1, 0, 0, 0); [EOL]     base.set(Calendar.MILLISECOND, 0); [EOL]     final Calendar cal = Calendar.getInstance(); [EOL]     cal.set(2003, 1, 1, 0, 0, 0); [EOL]     cal.set(Calendar.MILLISECOND, 0); [EOL]     duration = cal.getTime().getTime() - base.getTime().getTime(); [EOL]     final int days = 366 + 365 + 365 + 31; [EOL]     assertEquals("0 0 " + days, DurationFormatUtils.formatDuration(duration, "y M d")); [EOL] }
@Test [EOL] public void testFormatDuration() { [EOL]     long duration = 0; [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "y")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "M")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "d")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "H")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "m")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "s")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "S")); [EOL]     assertEquals("0000", DurationFormatUtils.formatDuration(duration, "SSSS")); [EOL]     assertEquals("0000", DurationFormatUtils.formatDuration(duration, "yyyy")); [EOL]     assertEquals("0000", DurationFormatUtils.formatDuration(duration, "yyMM")); [EOL]     duration = 60 * 1000; [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "y")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "M")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "d")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "H")); [EOL]     assertEquals("1", DurationFormatUtils.formatDuration(duration, "m")); [EOL]     assertEquals("60", DurationFormatUtils.formatDuration(duration, "s")); [EOL]     assertEquals("60000", DurationFormatUtils.formatDuration(duration, "S")); [EOL]     assertEquals("01:00", DurationFormatUtils.formatDuration(duration, "mm:ss")); [EOL]     final Calendar base = Calendar.getInstance(); [EOL]     base.set(2000, 0, 1, 0, 0, 0); [EOL]     base.set(Calendar.MILLISECOND, 0); [EOL]     final Calendar cal = Calendar.getInstance(); [EOL]     cal.set(2003, 1, 1, 0, 0, 0); [EOL]     cal.set(Calendar.MILLISECOND, 0); [EOL]     duration = cal.getTime().getTime() - base.getTime().getTime(); [EOL]     final int days = 366 + 365 + 365 + 31; [EOL]     assertEquals("0 0 " + days, DurationFormatUtils.formatDuration(duration, "y M d")); [EOL] }
@Test [EOL] public void testFormatDuration() { [EOL]     long duration = 0; [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "y")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "M")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "d")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "H")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "m")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "s")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "S")); [EOL]     assertEquals("0000", DurationFormatUtils.formatDuration(duration, "SSSS")); [EOL]     assertEquals("0000", DurationFormatUtils.formatDuration(duration, "yyyy")); [EOL]     assertEquals("0000", DurationFormatUtils.formatDuration(duration, "yyMM")); [EOL]     duration = 60 * 1000; [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "y")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "M")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "d")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "H")); [EOL]     assertEquals("1", DurationFormatUtils.formatDuration(duration, "m")); [EOL]     assertEquals("60", DurationFormatUtils.formatDuration(duration, "s")); [EOL]     assertEquals("60000", DurationFormatUtils.formatDuration(duration, "S")); [EOL]     assertEquals("01:00", DurationFormatUtils.formatDuration(duration, "mm:ss")); [EOL]     final Calendar base = Calendar.getInstance(); [EOL]     base.set(2000, 0, 1, 0, 0, 0); [EOL]     base.set(Calendar.MILLISECOND, 0); [EOL]     final Calendar cal = Calendar.getInstance(); [EOL]     cal.set(2003, 1, 1, 0, 0, 0); [EOL]     cal.set(Calendar.MILLISECOND, 0); [EOL]     duration = cal.getTime().getTime() - base.getTime().getTime(); [EOL]     final int days = 366 + 365 + 365 + 31; [EOL]     assertEquals("0 0 " + days, DurationFormatUtils.formatDuration(duration, "y M d")); [EOL] }
@Test [EOL] public void testFormatDuration() { [EOL]     long duration = 0; [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "y")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "M")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "d")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "H")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "m")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "s")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "S")); [EOL]     assertEquals("0000", DurationFormatUtils.formatDuration(duration, "SSSS")); [EOL]     assertEquals("0000", DurationFormatUtils.formatDuration(duration, "yyyy")); [EOL]     assertEquals("0000", DurationFormatUtils.formatDuration(duration, "yyMM")); [EOL]     duration = 60 * 1000; [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "y")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "M")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "d")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "H")); [EOL]     assertEquals("1", DurationFormatUtils.formatDuration(duration, "m")); [EOL]     assertEquals("60", DurationFormatUtils.formatDuration(duration, "s")); [EOL]     assertEquals("60000", DurationFormatUtils.formatDuration(duration, "S")); [EOL]     assertEquals("01:00", DurationFormatUtils.formatDuration(duration, "mm:ss")); [EOL]     final Calendar base = Calendar.getInstance(); [EOL]     base.set(2000, 0, 1, 0, 0, 0); [EOL]     base.set(Calendar.MILLISECOND, 0); [EOL]     final Calendar cal = Calendar.getInstance(); [EOL]     cal.set(2003, 1, 1, 0, 0, 0); [EOL]     cal.set(Calendar.MILLISECOND, 0); [EOL]     duration = cal.getTime().getTime() - base.getTime().getTime(); [EOL]     final int days = 366 + 365 + 365 + 31; [EOL]     assertEquals("0 0 " + days, DurationFormatUtils.formatDuration(duration, "y M d")); [EOL] }
@Test [EOL] public void testFormatDuration() { [EOL]     long duration = 0; [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "y")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "M")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "d")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "H")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "m")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "s")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "S")); [EOL]     assertEquals("0000", DurationFormatUtils.formatDuration(duration, "SSSS")); [EOL]     assertEquals("0000", DurationFormatUtils.formatDuration(duration, "yyyy")); [EOL]     assertEquals("0000", DurationFormatUtils.formatDuration(duration, "yyMM")); [EOL]     duration = 60 * 1000; [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "y")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "M")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "d")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "H")); [EOL]     assertEquals("1", DurationFormatUtils.formatDuration(duration, "m")); [EOL]     assertEquals("60", DurationFormatUtils.formatDuration(duration, "s")); [EOL]     assertEquals("60000", DurationFormatUtils.formatDuration(duration, "S")); [EOL]     assertEquals("01:00", DurationFormatUtils.formatDuration(duration, "mm:ss")); [EOL]     final Calendar base = Calendar.getInstance(); [EOL]     base.set(2000, 0, 1, 0, 0, 0); [EOL]     base.set(Calendar.MILLISECOND, 0); [EOL]     final Calendar cal = Calendar.getInstance(); [EOL]     cal.set(2003, 1, 1, 0, 0, 0); [EOL]     cal.set(Calendar.MILLISECOND, 0); [EOL]     duration = cal.getTime().getTime() - base.getTime().getTime(); [EOL]     final int days = 366 + 365 + 365 + 31; [EOL]     assertEquals("0 0 " + days, DurationFormatUtils.formatDuration(duration, "y M d")); [EOL] }
@Test [EOL] public void testFormatDuration() { [EOL]     long duration = 0; [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "y")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "M")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "d")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "H")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "m")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "s")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "S")); [EOL]     assertEquals("0000", DurationFormatUtils.formatDuration(duration, "SSSS")); [EOL]     assertEquals("0000", DurationFormatUtils.formatDuration(duration, "yyyy")); [EOL]     assertEquals("0000", DurationFormatUtils.formatDuration(duration, "yyMM")); [EOL]     duration = 60 * 1000; [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "y")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "M")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "d")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "H")); [EOL]     assertEquals("1", DurationFormatUtils.formatDuration(duration, "m")); [EOL]     assertEquals("60", DurationFormatUtils.formatDuration(duration, "s")); [EOL]     assertEquals("60000", DurationFormatUtils.formatDuration(duration, "S")); [EOL]     assertEquals("01:00", DurationFormatUtils.formatDuration(duration, "mm:ss")); [EOL]     final Calendar base = Calendar.getInstance(); [EOL]     base.set(2000, 0, 1, 0, 0, 0); [EOL]     base.set(Calendar.MILLISECOND, 0); [EOL]     final Calendar cal = Calendar.getInstance(); [EOL]     cal.set(2003, 1, 1, 0, 0, 0); [EOL]     cal.set(Calendar.MILLISECOND, 0); [EOL]     duration = cal.getTime().getTime() - base.getTime().getTime(); [EOL]     final int days = 366 + 365 + 365 + 31; [EOL]     assertEquals("0 0 " + days, DurationFormatUtils.formatDuration(duration, "y M d")); [EOL] }
@Test [EOL] public void testFormatDuration() { [EOL]     long duration = 0; [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "y")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "M")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "d")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "H")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "m")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "s")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "S")); [EOL]     assertEquals("0000", DurationFormatUtils.formatDuration(duration, "SSSS")); [EOL]     assertEquals("0000", DurationFormatUtils.formatDuration(duration, "yyyy")); [EOL]     assertEquals("0000", DurationFormatUtils.formatDuration(duration, "yyMM")); [EOL]     duration = 60 * 1000; [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "y")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "M")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "d")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "H")); [EOL]     assertEquals("1", DurationFormatUtils.formatDuration(duration, "m")); [EOL]     assertEquals("60", DurationFormatUtils.formatDuration(duration, "s")); [EOL]     assertEquals("60000", DurationFormatUtils.formatDuration(duration, "S")); [EOL]     assertEquals("01:00", DurationFormatUtils.formatDuration(duration, "mm:ss")); [EOL]     final Calendar base = Calendar.getInstance(); [EOL]     base.set(2000, 0, 1, 0, 0, 0); [EOL]     base.set(Calendar.MILLISECOND, 0); [EOL]     final Calendar cal = Calendar.getInstance(); [EOL]     cal.set(2003, 1, 1, 0, 0, 0); [EOL]     cal.set(Calendar.MILLISECOND, 0); [EOL]     duration = cal.getTime().getTime() - base.getTime().getTime(); [EOL]     final int days = 366 + 365 + 365 + 31; [EOL]     assertEquals("0 0 " + days, DurationFormatUtils.formatDuration(duration, "y M d")); [EOL] }
@Test [EOL] public void testFormatDuration() { [EOL]     long duration = 0; [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "y")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "M")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "d")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "H")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "m")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "s")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "S")); [EOL]     assertEquals("0000", DurationFormatUtils.formatDuration(duration, "SSSS")); [EOL]     assertEquals("0000", DurationFormatUtils.formatDuration(duration, "yyyy")); [EOL]     assertEquals("0000", DurationFormatUtils.formatDuration(duration, "yyMM")); [EOL]     duration = 60 * 1000; [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "y")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "M")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "d")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "H")); [EOL]     assertEquals("1", DurationFormatUtils.formatDuration(duration, "m")); [EOL]     assertEquals("60", DurationFormatUtils.formatDuration(duration, "s")); [EOL]     assertEquals("60000", DurationFormatUtils.formatDuration(duration, "S")); [EOL]     assertEquals("01:00", DurationFormatUtils.formatDuration(duration, "mm:ss")); [EOL]     final Calendar base = Calendar.getInstance(); [EOL]     base.set(2000, 0, 1, 0, 0, 0); [EOL]     base.set(Calendar.MILLISECOND, 0); [EOL]     final Calendar cal = Calendar.getInstance(); [EOL]     cal.set(2003, 1, 1, 0, 0, 0); [EOL]     cal.set(Calendar.MILLISECOND, 0); [EOL]     duration = cal.getTime().getTime() - base.getTime().getTime(); [EOL]     final int days = 366 + 365 + 365 + 31; [EOL]     assertEquals("0 0 " + days, DurationFormatUtils.formatDuration(duration, "y M d")); [EOL] }
@Test [EOL] public void testFormatDuration() { [EOL]     long duration = 0; [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "y")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "M")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "d")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "H")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "m")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "s")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "S")); [EOL]     assertEquals("0000", DurationFormatUtils.formatDuration(duration, "SSSS")); [EOL]     assertEquals("0000", DurationFormatUtils.formatDuration(duration, "yyyy")); [EOL]     assertEquals("0000", DurationFormatUtils.formatDuration(duration, "yyMM")); [EOL]     duration = 60 * 1000; [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "y")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "M")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "d")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "H")); [EOL]     assertEquals("1", DurationFormatUtils.formatDuration(duration, "m")); [EOL]     assertEquals("60", DurationFormatUtils.formatDuration(duration, "s")); [EOL]     assertEquals("60000", DurationFormatUtils.formatDuration(duration, "S")); [EOL]     assertEquals("01:00", DurationFormatUtils.formatDuration(duration, "mm:ss")); [EOL]     final Calendar base = Calendar.getInstance(); [EOL]     base.set(2000, 0, 1, 0, 0, 0); [EOL]     base.set(Calendar.MILLISECOND, 0); [EOL]     final Calendar cal = Calendar.getInstance(); [EOL]     cal.set(2003, 1, 1, 0, 0, 0); [EOL]     cal.set(Calendar.MILLISECOND, 0); [EOL]     duration = cal.getTime().getTime() - base.getTime().getTime(); [EOL]     final int days = 366 + 365 + 365 + 31; [EOL]     assertEquals("0 0 " + days, DurationFormatUtils.formatDuration(duration, "y M d")); [EOL] }
@Test [EOL] public void testFormatDuration() { [EOL]     long duration = 0; [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "y")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "M")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "d")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "H")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "m")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "s")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "S")); [EOL]     assertEquals("0000", DurationFormatUtils.formatDuration(duration, "SSSS")); [EOL]     assertEquals("0000", DurationFormatUtils.formatDuration(duration, "yyyy")); [EOL]     assertEquals("0000", DurationFormatUtils.formatDuration(duration, "yyMM")); [EOL]     duration = 60 * 1000; [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "y")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "M")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "d")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "H")); [EOL]     assertEquals("1", DurationFormatUtils.formatDuration(duration, "m")); [EOL]     assertEquals("60", DurationFormatUtils.formatDuration(duration, "s")); [EOL]     assertEquals("60000", DurationFormatUtils.formatDuration(duration, "S")); [EOL]     assertEquals("01:00", DurationFormatUtils.formatDuration(duration, "mm:ss")); [EOL]     final Calendar base = Calendar.getInstance(); [EOL]     base.set(2000, 0, 1, 0, 0, 0); [EOL]     base.set(Calendar.MILLISECOND, 0); [EOL]     final Calendar cal = Calendar.getInstance(); [EOL]     cal.set(2003, 1, 1, 0, 0, 0); [EOL]     cal.set(Calendar.MILLISECOND, 0); [EOL]     duration = cal.getTime().getTime() - base.getTime().getTime(); [EOL]     final int days = 366 + 365 + 365 + 31; [EOL]     assertEquals("0 0 " + days, DurationFormatUtils.formatDuration(duration, "y M d")); [EOL] }
@Test [EOL] public void testFormatDuration() { [EOL]     long duration = 0; [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "y")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "M")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "d")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "H")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "m")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "s")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "S")); [EOL]     assertEquals("0000", DurationFormatUtils.formatDuration(duration, "SSSS")); [EOL]     assertEquals("0000", DurationFormatUtils.formatDuration(duration, "yyyy")); [EOL]     assertEquals("0000", DurationFormatUtils.formatDuration(duration, "yyMM")); [EOL]     duration = 60 * 1000; [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "y")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "M")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "d")); [EOL]     assertEquals("0", DurationFormatUtils.formatDuration(duration, "H")); [EOL]     assertEquals("1", DurationFormatUtils.formatDuration(duration, "m")); [EOL]     assertEquals("60", DurationFormatUtils.formatDuration(duration, "s")); [EOL]     assertEquals("60000", DurationFormatUtils.formatDuration(duration, "S")); [EOL]     assertEquals("01:00", DurationFormatUtils.formatDuration(duration, "mm:ss")); [EOL]     final Calendar base = Calendar.getInstance(); [EOL]     base.set(2000, 0, 1, 0, 0, 0); [EOL]     base.set(Calendar.MILLISECOND, 0); [EOL]     final Calendar cal = Calendar.getInstance(); [EOL]     cal.set(2003, 1, 1, 0, 0, 0); [EOL]     cal.set(Calendar.MILLISECOND, 0); [EOL]     duration = cal.getTime().getTime() - base.getTime().getTime(); [EOL]     final int days = 366 + 365 + 365 + 31; [EOL]     assertEquals("0 0 " + days, DurationFormatUtils.formatDuration(duration, "y M d")); [EOL] }
@Test [EOL] public void testConstructor() { [EOL]     assertNotNull(new CharSetUtils()); [EOL]     final Constructor<?>[] cons = CharSetUtils.class.getDeclaredConstructors(); [EOL]     assertEquals(1, cons.length); [EOL]     assertTrue(Modifier.isPublic(cons[0].getModifiers())); [EOL]     assertTrue(Modifier.isPublic(CharSetUtils.class.getModifiers())); [EOL]     assertFalse(Modifier.isFinal(CharSetUtils.class.getModifiers())); [EOL] }
@Test [EOL] public void testCount_StringString() { [EOL]     assertEquals(0, CharSetUtils.count(null, (String) null)); [EOL]     assertEquals(0, CharSetUtils.count(null, "")); [EOL]     assertEquals(0, CharSetUtils.count("", (String) null)); [EOL]     assertEquals(0, CharSetUtils.count("", "")); [EOL]     assertEquals(0, CharSetUtils.count("", "a-e")); [EOL]     assertEquals(0, CharSetUtils.count("hello", (String) null)); [EOL]     assertEquals(0, CharSetUtils.count("hello", "")); [EOL]     assertEquals(1, CharSetUtils.count("hello", "a-e")); [EOL]     assertEquals(3, CharSetUtils.count("hello", "l-p")); [EOL] }
@Test [EOL] public void testDelete_StringString() { [EOL]     assertEquals(null, CharSetUtils.delete(null, (String) null)); [EOL]     assertEquals(null, CharSetUtils.delete(null, "")); [EOL]     assertEquals("", CharSetUtils.delete("", (String) null)); [EOL]     assertEquals("", CharSetUtils.delete("", "")); [EOL]     assertEquals("", CharSetUtils.delete("", "a-e")); [EOL]     assertEquals("hello", CharSetUtils.delete("hello", (String) null)); [EOL]     assertEquals("hello", CharSetUtils.delete("hello", "")); [EOL]     assertEquals("hllo", CharSetUtils.delete("hello", "a-e")); [EOL]     assertEquals("he", CharSetUtils.delete("hello", "l-p")); [EOL]     assertEquals("hello", CharSetUtils.delete("hello", "z")); [EOL] }
@Test [EOL] public void testDelete_StringString() { [EOL]     assertEquals(null, CharSetUtils.delete(null, (String) null)); [EOL]     assertEquals(null, CharSetUtils.delete(null, "")); [EOL]     assertEquals("", CharSetUtils.delete("", (String) null)); [EOL]     assertEquals("", CharSetUtils.delete("", "")); [EOL]     assertEquals("", CharSetUtils.delete("", "a-e")); [EOL]     assertEquals("hello", CharSetUtils.delete("hello", (String) null)); [EOL]     assertEquals("hello", CharSetUtils.delete("hello", "")); [EOL]     assertEquals("hllo", CharSetUtils.delete("hello", "a-e")); [EOL]     assertEquals("he", CharSetUtils.delete("hello", "l-p")); [EOL]     assertEquals("hello", CharSetUtils.delete("hello", "z")); [EOL] }
@Test [EOL] public void testDelete_StringString() { [EOL]     assertEquals(null, CharSetUtils.delete(null, (String) null)); [EOL]     assertEquals(null, CharSetUtils.delete(null, "")); [EOL]     assertEquals("", CharSetUtils.delete("", (String) null)); [EOL]     assertEquals("", CharSetUtils.delete("", "")); [EOL]     assertEquals("", CharSetUtils.delete("", "a-e")); [EOL]     assertEquals("hello", CharSetUtils.delete("hello", (String) null)); [EOL]     assertEquals("hello", CharSetUtils.delete("hello", "")); [EOL]     assertEquals("hllo", CharSetUtils.delete("hello", "a-e")); [EOL]     assertEquals("he", CharSetUtils.delete("hello", "l-p")); [EOL]     assertEquals("hello", CharSetUtils.delete("hello", "z")); [EOL] }
@Test [EOL] public void testIndexOfType_ThrowableClassInt() { [EOL]     assertEquals(-1, ExceptionUtils.indexOfType(null, null, 0)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfType(null, NestableException.class, 0)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfType(withoutCause, null)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfType(withoutCause, ExceptionWithCause.class, 0)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfType(withoutCause, NestableException.class, 0)); [EOL]     assertEquals(0, ExceptionUtils.indexOfType(withoutCause, ExceptionWithoutCause.class, 0)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfType(nested, null, 0)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfType(nested, ExceptionWithCause.class, 0)); [EOL]     assertEquals(0, ExceptionUtils.indexOfType(nested, NestableException.class, 0)); [EOL]     assertEquals(1, ExceptionUtils.indexOfType(nested, ExceptionWithoutCause.class, 0)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfType(withCause, null)); [EOL]     assertEquals(0, ExceptionUtils.indexOfType(withCause, ExceptionWithCause.class, 0)); [EOL]     assertEquals(1, ExceptionUtils.indexOfType(withCause, NestableException.class, 0)); [EOL]     assertEquals(2, ExceptionUtils.indexOfType(withCause, ExceptionWithoutCause.class, 0)); [EOL]     assertEquals(0, ExceptionUtils.indexOfType(withCause, ExceptionWithCause.class, -1)); [EOL]     assertEquals(0, ExceptionUtils.indexOfType(withCause, ExceptionWithCause.class, 0)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfType(withCause, ExceptionWithCause.class, 1)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfType(withCause, ExceptionWithCause.class, 9)); [EOL]     assertEquals(0, ExceptionUtils.indexOfType(withCause, Exception.class, 0)); [EOL] }
@Test [EOL] public void testIndexOfType_ThrowableClassInt() { [EOL]     assertEquals(-1, ExceptionUtils.indexOfType(null, null, 0)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfType(null, NestableException.class, 0)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfType(withoutCause, null)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfType(withoutCause, ExceptionWithCause.class, 0)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfType(withoutCause, NestableException.class, 0)); [EOL]     assertEquals(0, ExceptionUtils.indexOfType(withoutCause, ExceptionWithoutCause.class, 0)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfType(nested, null, 0)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfType(nested, ExceptionWithCause.class, 0)); [EOL]     assertEquals(0, ExceptionUtils.indexOfType(nested, NestableException.class, 0)); [EOL]     assertEquals(1, ExceptionUtils.indexOfType(nested, ExceptionWithoutCause.class, 0)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfType(withCause, null)); [EOL]     assertEquals(0, ExceptionUtils.indexOfType(withCause, ExceptionWithCause.class, 0)); [EOL]     assertEquals(1, ExceptionUtils.indexOfType(withCause, NestableException.class, 0)); [EOL]     assertEquals(2, ExceptionUtils.indexOfType(withCause, ExceptionWithoutCause.class, 0)); [EOL]     assertEquals(0, ExceptionUtils.indexOfType(withCause, ExceptionWithCause.class, -1)); [EOL]     assertEquals(0, ExceptionUtils.indexOfType(withCause, ExceptionWithCause.class, 0)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfType(withCause, ExceptionWithCause.class, 1)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfType(withCause, ExceptionWithCause.class, 9)); [EOL]     assertEquals(0, ExceptionUtils.indexOfType(withCause, Exception.class, 0)); [EOL] }
@Test [EOL] public void testIndexOfType_ThrowableClassInt() { [EOL]     assertEquals(-1, ExceptionUtils.indexOfType(null, null, 0)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfType(null, NestableException.class, 0)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfType(withoutCause, null)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfType(withoutCause, ExceptionWithCause.class, 0)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfType(withoutCause, NestableException.class, 0)); [EOL]     assertEquals(0, ExceptionUtils.indexOfType(withoutCause, ExceptionWithoutCause.class, 0)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfType(nested, null, 0)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfType(nested, ExceptionWithCause.class, 0)); [EOL]     assertEquals(0, ExceptionUtils.indexOfType(nested, NestableException.class, 0)); [EOL]     assertEquals(1, ExceptionUtils.indexOfType(nested, ExceptionWithoutCause.class, 0)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfType(withCause, null)); [EOL]     assertEquals(0, ExceptionUtils.indexOfType(withCause, ExceptionWithCause.class, 0)); [EOL]     assertEquals(1, ExceptionUtils.indexOfType(withCause, NestableException.class, 0)); [EOL]     assertEquals(2, ExceptionUtils.indexOfType(withCause, ExceptionWithoutCause.class, 0)); [EOL]     assertEquals(0, ExceptionUtils.indexOfType(withCause, ExceptionWithCause.class, -1)); [EOL]     assertEquals(0, ExceptionUtils.indexOfType(withCause, ExceptionWithCause.class, 0)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfType(withCause, ExceptionWithCause.class, 1)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfType(withCause, ExceptionWithCause.class, 9)); [EOL]     assertEquals(0, ExceptionUtils.indexOfType(withCause, Exception.class, 0)); [EOL] }
@Test [EOL] public void testIndexOfType_ThrowableClassInt() { [EOL]     assertEquals(-1, ExceptionUtils.indexOfType(null, null, 0)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfType(null, NestableException.class, 0)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfType(withoutCause, null)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfType(withoutCause, ExceptionWithCause.class, 0)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfType(withoutCause, NestableException.class, 0)); [EOL]     assertEquals(0, ExceptionUtils.indexOfType(withoutCause, ExceptionWithoutCause.class, 0)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfType(nested, null, 0)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfType(nested, ExceptionWithCause.class, 0)); [EOL]     assertEquals(0, ExceptionUtils.indexOfType(nested, NestableException.class, 0)); [EOL]     assertEquals(1, ExceptionUtils.indexOfType(nested, ExceptionWithoutCause.class, 0)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfType(withCause, null)); [EOL]     assertEquals(0, ExceptionUtils.indexOfType(withCause, ExceptionWithCause.class, 0)); [EOL]     assertEquals(1, ExceptionUtils.indexOfType(withCause, NestableException.class, 0)); [EOL]     assertEquals(2, ExceptionUtils.indexOfType(withCause, ExceptionWithoutCause.class, 0)); [EOL]     assertEquals(0, ExceptionUtils.indexOfType(withCause, ExceptionWithCause.class, -1)); [EOL]     assertEquals(0, ExceptionUtils.indexOfType(withCause, ExceptionWithCause.class, 0)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfType(withCause, ExceptionWithCause.class, 1)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfType(withCause, ExceptionWithCause.class, 9)); [EOL]     assertEquals(0, ExceptionUtils.indexOfType(withCause, Exception.class, 0)); [EOL] }
@Test [EOL] public void testIndexOfType_ThrowableClassInt() { [EOL]     assertEquals(-1, ExceptionUtils.indexOfType(null, null, 0)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfType(null, NestableException.class, 0)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfType(withoutCause, null)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfType(withoutCause, ExceptionWithCause.class, 0)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfType(withoutCause, NestableException.class, 0)); [EOL]     assertEquals(0, ExceptionUtils.indexOfType(withoutCause, ExceptionWithoutCause.class, 0)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfType(nested, null, 0)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfType(nested, ExceptionWithCause.class, 0)); [EOL]     assertEquals(0, ExceptionUtils.indexOfType(nested, NestableException.class, 0)); [EOL]     assertEquals(1, ExceptionUtils.indexOfType(nested, ExceptionWithoutCause.class, 0)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfType(withCause, null)); [EOL]     assertEquals(0, ExceptionUtils.indexOfType(withCause, ExceptionWithCause.class, 0)); [EOL]     assertEquals(1, ExceptionUtils.indexOfType(withCause, NestableException.class, 0)); [EOL]     assertEquals(2, ExceptionUtils.indexOfType(withCause, ExceptionWithoutCause.class, 0)); [EOL]     assertEquals(0, ExceptionUtils.indexOfType(withCause, ExceptionWithCause.class, -1)); [EOL]     assertEquals(0, ExceptionUtils.indexOfType(withCause, ExceptionWithCause.class, 0)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfType(withCause, ExceptionWithCause.class, 1)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfType(withCause, ExceptionWithCause.class, 9)); [EOL]     assertEquals(0, ExceptionUtils.indexOfType(withCause, Exception.class, 0)); [EOL] }
@Test [EOL] public void testIndexOfType_ThrowableClassInt() { [EOL]     assertEquals(-1, ExceptionUtils.indexOfType(null, null, 0)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfType(null, NestableException.class, 0)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfType(withoutCause, null)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfType(withoutCause, ExceptionWithCause.class, 0)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfType(withoutCause, NestableException.class, 0)); [EOL]     assertEquals(0, ExceptionUtils.indexOfType(withoutCause, ExceptionWithoutCause.class, 0)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfType(nested, null, 0)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfType(nested, ExceptionWithCause.class, 0)); [EOL]     assertEquals(0, ExceptionUtils.indexOfType(nested, NestableException.class, 0)); [EOL]     assertEquals(1, ExceptionUtils.indexOfType(nested, ExceptionWithoutCause.class, 0)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfType(withCause, null)); [EOL]     assertEquals(0, ExceptionUtils.indexOfType(withCause, ExceptionWithCause.class, 0)); [EOL]     assertEquals(1, ExceptionUtils.indexOfType(withCause, NestableException.class, 0)); [EOL]     assertEquals(2, ExceptionUtils.indexOfType(withCause, ExceptionWithoutCause.class, 0)); [EOL]     assertEquals(0, ExceptionUtils.indexOfType(withCause, ExceptionWithCause.class, -1)); [EOL]     assertEquals(0, ExceptionUtils.indexOfType(withCause, ExceptionWithCause.class, 0)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfType(withCause, ExceptionWithCause.class, 1)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfType(withCause, ExceptionWithCause.class, 9)); [EOL]     assertEquals(0, ExceptionUtils.indexOfType(withCause, Exception.class, 0)); [EOL] }
@Test [EOL] public void testIndexOfType_ThrowableClassInt() { [EOL]     assertEquals(-1, ExceptionUtils.indexOfType(null, null, 0)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfType(null, NestableException.class, 0)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfType(withoutCause, null)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfType(withoutCause, ExceptionWithCause.class, 0)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfType(withoutCause, NestableException.class, 0)); [EOL]     assertEquals(0, ExceptionUtils.indexOfType(withoutCause, ExceptionWithoutCause.class, 0)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfType(nested, null, 0)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfType(nested, ExceptionWithCause.class, 0)); [EOL]     assertEquals(0, ExceptionUtils.indexOfType(nested, NestableException.class, 0)); [EOL]     assertEquals(1, ExceptionUtils.indexOfType(nested, ExceptionWithoutCause.class, 0)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfType(withCause, null)); [EOL]     assertEquals(0, ExceptionUtils.indexOfType(withCause, ExceptionWithCause.class, 0)); [EOL]     assertEquals(1, ExceptionUtils.indexOfType(withCause, NestableException.class, 0)); [EOL]     assertEquals(2, ExceptionUtils.indexOfType(withCause, ExceptionWithoutCause.class, 0)); [EOL]     assertEquals(0, ExceptionUtils.indexOfType(withCause, ExceptionWithCause.class, -1)); [EOL]     assertEquals(0, ExceptionUtils.indexOfType(withCause, ExceptionWithCause.class, 0)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfType(withCause, ExceptionWithCause.class, 1)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfType(withCause, ExceptionWithCause.class, 9)); [EOL]     assertEquals(0, ExceptionUtils.indexOfType(withCause, Exception.class, 0)); [EOL] }
@Test [EOL] public void testIndexOfType_ThrowableClassInt() { [EOL]     assertEquals(-1, ExceptionUtils.indexOfType(null, null, 0)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfType(null, NestableException.class, 0)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfType(withoutCause, null)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfType(withoutCause, ExceptionWithCause.class, 0)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfType(withoutCause, NestableException.class, 0)); [EOL]     assertEquals(0, ExceptionUtils.indexOfType(withoutCause, ExceptionWithoutCause.class, 0)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfType(nested, null, 0)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfType(nested, ExceptionWithCause.class, 0)); [EOL]     assertEquals(0, ExceptionUtils.indexOfType(nested, NestableException.class, 0)); [EOL]     assertEquals(1, ExceptionUtils.indexOfType(nested, ExceptionWithoutCause.class, 0)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfType(withCause, null)); [EOL]     assertEquals(0, ExceptionUtils.indexOfType(withCause, ExceptionWithCause.class, 0)); [EOL]     assertEquals(1, ExceptionUtils.indexOfType(withCause, NestableException.class, 0)); [EOL]     assertEquals(2, ExceptionUtils.indexOfType(withCause, ExceptionWithoutCause.class, 0)); [EOL]     assertEquals(0, ExceptionUtils.indexOfType(withCause, ExceptionWithCause.class, -1)); [EOL]     assertEquals(0, ExceptionUtils.indexOfType(withCause, ExceptionWithCause.class, 0)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfType(withCause, ExceptionWithCause.class, 1)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfType(withCause, ExceptionWithCause.class, 9)); [EOL]     assertEquals(0, ExceptionUtils.indexOfType(withCause, Exception.class, 0)); [EOL] }
@Test [EOL] public void testIndexOfType_ThrowableClassInt() { [EOL]     assertEquals(-1, ExceptionUtils.indexOfType(null, null, 0)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfType(null, NestableException.class, 0)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfType(withoutCause, null)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfType(withoutCause, ExceptionWithCause.class, 0)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfType(withoutCause, NestableException.class, 0)); [EOL]     assertEquals(0, ExceptionUtils.indexOfType(withoutCause, ExceptionWithoutCause.class, 0)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfType(nested, null, 0)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfType(nested, ExceptionWithCause.class, 0)); [EOL]     assertEquals(0, ExceptionUtils.indexOfType(nested, NestableException.class, 0)); [EOL]     assertEquals(1, ExceptionUtils.indexOfType(nested, ExceptionWithoutCause.class, 0)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfType(withCause, null)); [EOL]     assertEquals(0, ExceptionUtils.indexOfType(withCause, ExceptionWithCause.class, 0)); [EOL]     assertEquals(1, ExceptionUtils.indexOfType(withCause, NestableException.class, 0)); [EOL]     assertEquals(2, ExceptionUtils.indexOfType(withCause, ExceptionWithoutCause.class, 0)); [EOL]     assertEquals(0, ExceptionUtils.indexOfType(withCause, ExceptionWithCause.class, -1)); [EOL]     assertEquals(0, ExceptionUtils.indexOfType(withCause, ExceptionWithCause.class, 0)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfType(withCause, ExceptionWithCause.class, 1)); [EOL]     assertEquals(-1, ExceptionUtils.indexOfType(withCause, ExceptionWithCause.class, 9)); [EOL]     assertEquals(0, ExceptionUtils.indexOfType(withCause, Exception.class, 0)); [EOL] }
@Test [EOL] public void testConstructors() { [EOL]     assertEquals((short) 0, new MutableShort().shortValue()); [EOL]     assertEquals((short) 1, new MutableShort((short) 1).shortValue()); [EOL]     assertEquals((short) 2, new MutableShort(Short.valueOf((short) 2)).shortValue()); [EOL]     assertEquals((short) 3, new MutableShort(new MutableShort((short) 3)).shortValue()); [EOL]     assertEquals((short) 2, new MutableShort("2").shortValue()); [EOL]     try { [EOL]         new MutableShort((Number) null); [EOL]         fail(); [EOL]     } catch (final NullPointerException ex) { [EOL]     } [EOL] }
@Test [EOL] public void testConstructors() { [EOL]     assertEquals((short) 0, new MutableShort().shortValue()); [EOL]     assertEquals((short) 1, new MutableShort((short) 1).shortValue()); [EOL]     assertEquals((short) 2, new MutableShort(Short.valueOf((short) 2)).shortValue()); [EOL]     assertEquals((short) 3, new MutableShort(new MutableShort((short) 3)).shortValue()); [EOL]     assertEquals((short) 2, new MutableShort("2").shortValue()); [EOL]     try { [EOL]         new MutableShort((Number) null); [EOL]         fail(); [EOL]     } catch (final NullPointerException ex) { [EOL]     } [EOL] }
@Test [EOL] public void testConstructors() { [EOL]     assertEquals((short) 0, new MutableShort().shortValue()); [EOL]     assertEquals((short) 1, new MutableShort((short) 1).shortValue()); [EOL]     assertEquals((short) 2, new MutableShort(Short.valueOf((short) 2)).shortValue()); [EOL]     assertEquals((short) 3, new MutableShort(new MutableShort((short) 3)).shortValue()); [EOL]     assertEquals((short) 2, new MutableShort("2").shortValue()); [EOL]     try { [EOL]         new MutableShort((Number) null); [EOL]         fail(); [EOL]     } catch (final NullPointerException ex) { [EOL]     } [EOL] }
@Test [EOL] public void testConstructors() { [EOL]     assertEquals((short) 0, new MutableShort().shortValue()); [EOL]     assertEquals((short) 1, new MutableShort((short) 1).shortValue()); [EOL]     assertEquals((short) 2, new MutableShort(Short.valueOf((short) 2)).shortValue()); [EOL]     assertEquals((short) 3, new MutableShort(new MutableShort((short) 3)).shortValue()); [EOL]     assertEquals((short) 2, new MutableShort("2").shortValue()); [EOL]     try { [EOL]         new MutableShort((Number) null); [EOL]         fail(); [EOL]     } catch (final NullPointerException ex) { [EOL]     } [EOL] }
@Test [EOL] public void testConstructors() { [EOL]     assertEquals((short) 0, new MutableShort().shortValue()); [EOL]     assertEquals((short) 1, new MutableShort((short) 1).shortValue()); [EOL]     assertEquals((short) 2, new MutableShort(Short.valueOf((short) 2)).shortValue()); [EOL]     assertEquals((short) 3, new MutableShort(new MutableShort((short) 3)).shortValue()); [EOL]     assertEquals((short) 2, new MutableShort("2").shortValue()); [EOL]     try { [EOL]         new MutableShort((Number) null); [EOL]         fail(); [EOL]     } catch (final NullPointerException ex) { [EOL]     } [EOL] }
@Test [EOL] public void testConstructors() { [EOL]     assertEquals((short) 0, new MutableShort().shortValue()); [EOL]     assertEquals((short) 1, new MutableShort((short) 1).shortValue()); [EOL]     assertEquals((short) 2, new MutableShort(Short.valueOf((short) 2)).shortValue()); [EOL]     assertEquals((short) 3, new MutableShort(new MutableShort((short) 3)).shortValue()); [EOL]     assertEquals((short) 2, new MutableShort("2").shortValue()); [EOL]     try { [EOL]         new MutableShort((Number) null); [EOL]         fail(); [EOL]     } catch (final NullPointerException ex) { [EOL]     } [EOL] }
@Test [EOL] public void testConstructors() { [EOL]     assertEquals((short) 0, new MutableShort().shortValue()); [EOL]     assertEquals((short) 1, new MutableShort((short) 1).shortValue()); [EOL]     assertEquals((short) 2, new MutableShort(Short.valueOf((short) 2)).shortValue()); [EOL]     assertEquals((short) 3, new MutableShort(new MutableShort((short) 3)).shortValue()); [EOL]     assertEquals((short) 2, new MutableShort("2").shortValue()); [EOL]     try { [EOL]         new MutableShort((Number) null); [EOL]         fail(); [EOL]     } catch (final NullPointerException ex) { [EOL]     } [EOL] }
@Test [EOL] public void testConstructors() { [EOL]     assertEquals((short) 0, new MutableShort().shortValue()); [EOL]     assertEquals((short) 1, new MutableShort((short) 1).shortValue()); [EOL]     assertEquals((short) 2, new MutableShort(Short.valueOf((short) 2)).shortValue()); [EOL]     assertEquals((short) 3, new MutableShort(new MutableShort((short) 3)).shortValue()); [EOL]     assertEquals((short) 2, new MutableShort("2").shortValue()); [EOL]     try { [EOL]         new MutableShort((Number) null); [EOL]         fail(); [EOL]     } catch (final NullPointerException ex) { [EOL]     } [EOL] }
@Test [EOL] public void testConstructors() { [EOL]     assertEquals((short) 0, new MutableShort().shortValue()); [EOL]     assertEquals((short) 1, new MutableShort((short) 1).shortValue()); [EOL]     assertEquals((short) 2, new MutableShort(Short.valueOf((short) 2)).shortValue()); [EOL]     assertEquals((short) 3, new MutableShort(new MutableShort((short) 3)).shortValue()); [EOL]     assertEquals((short) 2, new MutableShort("2").shortValue()); [EOL]     try { [EOL]         new MutableShort((Number) null); [EOL]         fail(); [EOL]     } catch (final NullPointerException ex) { [EOL]     } [EOL] }
@Test [EOL] public void testConstructors() { [EOL]     assertEquals((short) 0, new MutableShort().shortValue()); [EOL]     assertEquals((short) 1, new MutableShort((short) 1).shortValue()); [EOL]     assertEquals((short) 2, new MutableShort(Short.valueOf((short) 2)).shortValue()); [EOL]     assertEquals((short) 3, new MutableShort(new MutableShort((short) 3)).shortValue()); [EOL]     assertEquals((short) 2, new MutableShort("2").shortValue()); [EOL]     try { [EOL]         new MutableShort((Number) null); [EOL]         fail(); [EOL]     } catch (final NullPointerException ex) { [EOL]     } [EOL] }
@Test [EOL] public void testConstructors() { [EOL]     assertEquals((short) 0, new MutableShort().shortValue()); [EOL]     assertEquals((short) 1, new MutableShort((short) 1).shortValue()); [EOL]     assertEquals((short) 2, new MutableShort(Short.valueOf((short) 2)).shortValue()); [EOL]     assertEquals((short) 3, new MutableShort(new MutableShort((short) 3)).shortValue()); [EOL]     assertEquals((short) 2, new MutableShort("2").shortValue()); [EOL]     try { [EOL]         new MutableShort((Number) null); [EOL]         fail(); [EOL]     } catch (final NullPointerException ex) { [EOL]     } [EOL] }
@Test [EOL] public void testAddValuePrimitive() { [EOL]     final MutableShort mutNum = new MutableShort((short) 1); [EOL]     mutNum.add((short) 1); [EOL]     assertEquals((short) 2, mutNum.shortValue()); [EOL] }
@Test [EOL] public void testAddValuePrimitive() { [EOL]     final MutableShort mutNum = new MutableShort((short) 1); [EOL]     mutNum.add((short) 1); [EOL]     assertEquals((short) 2, mutNum.shortValue()); [EOL] }
@Test [EOL] public void testAddValuePrimitive() { [EOL]     final MutableShort mutNum = new MutableShort((short) 1); [EOL]     mutNum.add((short) 1); [EOL]     assertEquals((short) 2, mutNum.shortValue()); [EOL] }
@Test [EOL] public void testAddValueObject() { [EOL]     final MutableShort mutNum = new MutableShort((short) 1); [EOL]     mutNum.add(Short.valueOf((short) 1)); [EOL]     assertEquals((short) 2, mutNum.shortValue()); [EOL] }
@Test [EOL] public void testAddValueObject() { [EOL]     final MutableShort mutNum = new MutableShort((short) 1); [EOL]     mutNum.add(Short.valueOf((short) 1)); [EOL]     assertEquals((short) 2, mutNum.shortValue()); [EOL] }
@Test [EOL] public void testAddValueObject() { [EOL]     final MutableShort mutNum = new MutableShort((short) 1); [EOL]     mutNum.add(Short.valueOf((short) 1)); [EOL]     assertEquals((short) 2, mutNum.shortValue()); [EOL] }
@Test [EOL] public void testPrimitiveValues() { [EOL]     final MutableShort mutNum = new MutableShort((short) 1); [EOL]     assertEquals(1.0F, mutNum.floatValue(), 0); [EOL]     assertEquals(1.0, mutNum.doubleValue(), 0); [EOL]     assertEquals((byte) 1, mutNum.byteValue()); [EOL]     assertEquals((short) 1, mutNum.shortValue()); [EOL]     assertEquals(1, mutNum.intValue()); [EOL]     assertEquals(1L, mutNum.longValue()); [EOL] }
@Test [EOL] public void testPrimitiveValues() { [EOL]     final MutableShort mutNum = new MutableShort((short) 1); [EOL]     assertEquals(1.0F, mutNum.floatValue(), 0); [EOL]     assertEquals(1.0, mutNum.doubleValue(), 0); [EOL]     assertEquals((byte) 1, mutNum.byteValue()); [EOL]     assertEquals((short) 1, mutNum.shortValue()); [EOL]     assertEquals(1, mutNum.intValue()); [EOL]     assertEquals(1L, mutNum.longValue()); [EOL] }
@Test [EOL] public void testPrimitiveValues() { [EOL]     final MutableShort mutNum = new MutableShort((short) 1); [EOL]     assertEquals(1.0F, mutNum.floatValue(), 0); [EOL]     assertEquals(1.0, mutNum.doubleValue(), 0); [EOL]     assertEquals((byte) 1, mutNum.byteValue()); [EOL]     assertEquals((short) 1, mutNum.shortValue()); [EOL]     assertEquals(1, mutNum.intValue()); [EOL]     assertEquals(1L, mutNum.longValue()); [EOL] }
@Test [EOL] public void testStopWatchSplit() { [EOL]     final StopWatch watch = new StopWatch(); [EOL]     watch.start(); [EOL]     try { [EOL]         Thread.sleep(550); [EOL]     } catch (final InterruptedException ex) { [EOL]     } [EOL]     watch.split(); [EOL]     final long splitTime = watch.getSplitTime(); [EOL]     final String splitStr = watch.toSplitString(); [EOL]     try { [EOL]         Thread.sleep(550); [EOL]     } catch (final InterruptedException ex) { [EOL]     } [EOL]     watch.unsplit(); [EOL]     try { [EOL]         Thread.sleep(550); [EOL]     } catch (final InterruptedException ex) { [EOL]     } [EOL]     watch.stop(); [EOL]     final long totalTime = watch.getTime(); [EOL]     assertEquals("Formatted split string not the correct length", splitStr.length(), 11); [EOL]     assertTrue(splitTime >= 500); [EOL]     assertTrue(splitTime < 700); [EOL]     assertTrue(totalTime >= 1500); [EOL]     assertTrue(totalTime < 1900); [EOL] }
@Test [EOL] public void testStopWatchSplit() { [EOL]     final StopWatch watch = new StopWatch(); [EOL]     watch.start(); [EOL]     try { [EOL]         Thread.sleep(550); [EOL]     } catch (final InterruptedException ex) { [EOL]     } [EOL]     watch.split(); [EOL]     final long splitTime = watch.getSplitTime(); [EOL]     final String splitStr = watch.toSplitString(); [EOL]     try { [EOL]         Thread.sleep(550); [EOL]     } catch (final InterruptedException ex) { [EOL]     } [EOL]     watch.unsplit(); [EOL]     try { [EOL]         Thread.sleep(550); [EOL]     } catch (final InterruptedException ex) { [EOL]     } [EOL]     watch.stop(); [EOL]     final long totalTime = watch.getTime(); [EOL]     assertEquals("Formatted split string not the correct length", splitStr.length(), 11); [EOL]     assertTrue(splitTime >= 500); [EOL]     assertTrue(splitTime < 700); [EOL]     assertTrue(totalTime >= 1500); [EOL]     assertTrue(totalTime < 1900); [EOL] }
@Test [EOL] public void testStopWatchSplit() { [EOL]     final StopWatch watch = new StopWatch(); [EOL]     watch.start(); [EOL]     try { [EOL]         Thread.sleep(550); [EOL]     } catch (final InterruptedException ex) { [EOL]     } [EOL]     watch.split(); [EOL]     final long splitTime = watch.getSplitTime(); [EOL]     final String splitStr = watch.toSplitString(); [EOL]     try { [EOL]         Thread.sleep(550); [EOL]     } catch (final InterruptedException ex) { [EOL]     } [EOL]     watch.unsplit(); [EOL]     try { [EOL]         Thread.sleep(550); [EOL]     } catch (final InterruptedException ex) { [EOL]     } [EOL]     watch.stop(); [EOL]     final long totalTime = watch.getTime(); [EOL]     assertEquals("Formatted split string not the correct length", splitStr.length(), 11); [EOL]     assertTrue(splitTime >= 500); [EOL]     assertTrue(splitTime < 700); [EOL]     assertTrue(totalTime >= 1500); [EOL]     assertTrue(totalTime < 1900); [EOL] }
@Test [EOL] public void testStopWatchSplit() { [EOL]     final StopWatch watch = new StopWatch(); [EOL]     watch.start(); [EOL]     try { [EOL]         Thread.sleep(550); [EOL]     } catch (final InterruptedException ex) { [EOL]     } [EOL]     watch.split(); [EOL]     final long splitTime = watch.getSplitTime(); [EOL]     final String splitStr = watch.toSplitString(); [EOL]     try { [EOL]         Thread.sleep(550); [EOL]     } catch (final InterruptedException ex) { [EOL]     } [EOL]     watch.unsplit(); [EOL]     try { [EOL]         Thread.sleep(550); [EOL]     } catch (final InterruptedException ex) { [EOL]     } [EOL]     watch.stop(); [EOL]     final long totalTime = watch.getTime(); [EOL]     assertEquals("Formatted split string not the correct length", splitStr.length(), 11); [EOL]     assertTrue(splitTime >= 500); [EOL]     assertTrue(splitTime < 700); [EOL]     assertTrue(totalTime >= 1500); [EOL]     assertTrue(totalTime < 1900); [EOL] }
@Test [EOL] public void testStopWatchSplit() { [EOL]     final StopWatch watch = new StopWatch(); [EOL]     watch.start(); [EOL]     try { [EOL]         Thread.sleep(550); [EOL]     } catch (final InterruptedException ex) { [EOL]     } [EOL]     watch.split(); [EOL]     final long splitTime = watch.getSplitTime(); [EOL]     final String splitStr = watch.toSplitString(); [EOL]     try { [EOL]         Thread.sleep(550); [EOL]     } catch (final InterruptedException ex) { [EOL]     } [EOL]     watch.unsplit(); [EOL]     try { [EOL]         Thread.sleep(550); [EOL]     } catch (final InterruptedException ex) { [EOL]     } [EOL]     watch.stop(); [EOL]     final long totalTime = watch.getTime(); [EOL]     assertEquals("Formatted split string not the correct length", splitStr.length(), 11); [EOL]     assertTrue(splitTime >= 500); [EOL]     assertTrue(splitTime < 700); [EOL]     assertTrue(totalTime >= 1500); [EOL]     assertTrue(totalTime < 1900); [EOL] }
@Test [EOL] public void testStopWatchSplit() { [EOL]     final StopWatch watch = new StopWatch(); [EOL]     watch.start(); [EOL]     try { [EOL]         Thread.sleep(550); [EOL]     } catch (final InterruptedException ex) { [EOL]     } [EOL]     watch.split(); [EOL]     final long splitTime = watch.getSplitTime(); [EOL]     final String splitStr = watch.toSplitString(); [EOL]     try { [EOL]         Thread.sleep(550); [EOL]     } catch (final InterruptedException ex) { [EOL]     } [EOL]     watch.unsplit(); [EOL]     try { [EOL]         Thread.sleep(550); [EOL]     } catch (final InterruptedException ex) { [EOL]     } [EOL]     watch.stop(); [EOL]     final long totalTime = watch.getTime(); [EOL]     assertEquals("Formatted split string not the correct length", splitStr.length(), 11); [EOL]     assertTrue(splitTime >= 500); [EOL]     assertTrue(splitTime < 700); [EOL]     assertTrue(totalTime >= 1500); [EOL]     assertTrue(totalTime < 1900); [EOL] }
@Test [EOL] public void testStopWatchSplit() { [EOL]     final StopWatch watch = new StopWatch(); [EOL]     watch.start(); [EOL]     try { [EOL]         Thread.sleep(550); [EOL]     } catch (final InterruptedException ex) { [EOL]     } [EOL]     watch.split(); [EOL]     final long splitTime = watch.getSplitTime(); [EOL]     final String splitStr = watch.toSplitString(); [EOL]     try { [EOL]         Thread.sleep(550); [EOL]     } catch (final InterruptedException ex) { [EOL]     } [EOL]     watch.unsplit(); [EOL]     try { [EOL]         Thread.sleep(550); [EOL]     } catch (final InterruptedException ex) { [EOL]     } [EOL]     watch.stop(); [EOL]     final long totalTime = watch.getTime(); [EOL]     assertEquals("Formatted split string not the correct length", splitStr.length(), 11); [EOL]     assertTrue(splitTime >= 500); [EOL]     assertTrue(splitTime < 700); [EOL]     assertTrue(totalTime >= 1500); [EOL]     assertTrue(totalTime < 1900); [EOL] }
@Test [EOL] public void testStopWatchSplit() { [EOL]     final StopWatch watch = new StopWatch(); [EOL]     watch.start(); [EOL]     try { [EOL]         Thread.sleep(550); [EOL]     } catch (final InterruptedException ex) { [EOL]     } [EOL]     watch.split(); [EOL]     final long splitTime = watch.getSplitTime(); [EOL]     final String splitStr = watch.toSplitString(); [EOL]     try { [EOL]         Thread.sleep(550); [EOL]     } catch (final InterruptedException ex) { [EOL]     } [EOL]     watch.unsplit(); [EOL]     try { [EOL]         Thread.sleep(550); [EOL]     } catch (final InterruptedException ex) { [EOL]     } [EOL]     watch.stop(); [EOL]     final long totalTime = watch.getTime(); [EOL]     assertEquals("Formatted split string not the correct length", splitStr.length(), 11); [EOL]     assertTrue(splitTime >= 500); [EOL]     assertTrue(splitTime < 700); [EOL]     assertTrue(totalTime >= 1500); [EOL]     assertTrue(totalTime < 1900); [EOL] }
@Test [EOL] public void testStopWatchSplit() { [EOL]     final StopWatch watch = new StopWatch(); [EOL]     watch.start(); [EOL]     try { [EOL]         Thread.sleep(550); [EOL]     } catch (final InterruptedException ex) { [EOL]     } [EOL]     watch.split(); [EOL]     final long splitTime = watch.getSplitTime(); [EOL]     final String splitStr = watch.toSplitString(); [EOL]     try { [EOL]         Thread.sleep(550); [EOL]     } catch (final InterruptedException ex) { [EOL]     } [EOL]     watch.unsplit(); [EOL]     try { [EOL]         Thread.sleep(550); [EOL]     } catch (final InterruptedException ex) { [EOL]     } [EOL]     watch.stop(); [EOL]     final long totalTime = watch.getTime(); [EOL]     assertEquals("Formatted split string not the correct length", splitStr.length(), 11); [EOL]     assertTrue(splitTime >= 500); [EOL]     assertTrue(splitTime < 700); [EOL]     assertTrue(totalTime >= 1500); [EOL]     assertTrue(totalTime < 1900); [EOL] }
@Test [EOL] public void testStopWatchSplit() { [EOL]     final StopWatch watch = new StopWatch(); [EOL]     watch.start(); [EOL]     try { [EOL]         Thread.sleep(550); [EOL]     } catch (final InterruptedException ex) { [EOL]     } [EOL]     watch.split(); [EOL]     final long splitTime = watch.getSplitTime(); [EOL]     final String splitStr = watch.toSplitString(); [EOL]     try { [EOL]         Thread.sleep(550); [EOL]     } catch (final InterruptedException ex) { [EOL]     } [EOL]     watch.unsplit(); [EOL]     try { [EOL]         Thread.sleep(550); [EOL]     } catch (final InterruptedException ex) { [EOL]     } [EOL]     watch.stop(); [EOL]     final long totalTime = watch.getTime(); [EOL]     assertEquals("Formatted split string not the correct length", splitStr.length(), 11); [EOL]     assertTrue(splitTime >= 500); [EOL]     assertTrue(splitTime < 700); [EOL]     assertTrue(totalTime >= 1500); [EOL]     assertTrue(totalTime < 1900); [EOL] }
@Test [EOL] public void testStopWatchSplit() { [EOL]     final StopWatch watch = new StopWatch(); [EOL]     watch.start(); [EOL]     try { [EOL]         Thread.sleep(550); [EOL]     } catch (final InterruptedException ex) { [EOL]     } [EOL]     watch.split(); [EOL]     final long splitTime = watch.getSplitTime(); [EOL]     final String splitStr = watch.toSplitString(); [EOL]     try { [EOL]         Thread.sleep(550); [EOL]     } catch (final InterruptedException ex) { [EOL]     } [EOL]     watch.unsplit(); [EOL]     try { [EOL]         Thread.sleep(550); [EOL]     } catch (final InterruptedException ex) { [EOL]     } [EOL]     watch.stop(); [EOL]     final long totalTime = watch.getTime(); [EOL]     assertEquals("Formatted split string not the correct length", splitStr.length(), 11); [EOL]     assertTrue(splitTime >= 500); [EOL]     assertTrue(splitTime < 700); [EOL]     assertTrue(totalTime >= 1500); [EOL]     assertTrue(totalTime < 1900); [EOL] }
@Test [EOL] public void testStopWatchSplit() { [EOL]     final StopWatch watch = new StopWatch(); [EOL]     watch.start(); [EOL]     try { [EOL]         Thread.sleep(550); [EOL]     } catch (final InterruptedException ex) { [EOL]     } [EOL]     watch.split(); [EOL]     final long splitTime = watch.getSplitTime(); [EOL]     final String splitStr = watch.toSplitString(); [EOL]     try { [EOL]         Thread.sleep(550); [EOL]     } catch (final InterruptedException ex) { [EOL]     } [EOL]     watch.unsplit(); [EOL]     try { [EOL]         Thread.sleep(550); [EOL]     } catch (final InterruptedException ex) { [EOL]     } [EOL]     watch.stop(); [EOL]     final long totalTime = watch.getTime(); [EOL]     assertEquals("Formatted split string not the correct length", splitStr.length(), 11); [EOL]     assertTrue(splitTime >= 500); [EOL]     assertTrue(splitTime < 700); [EOL]     assertTrue(totalTime >= 1500); [EOL]     assertTrue(totalTime < 1900); [EOL] }
@Test [EOL] public void testReflectionCompare() { [EOL]     final TestObject o1 = new TestObject(4); [EOL]     final TestObject o2 = new TestObject(4); [EOL]     assertTrue(CompareToBuilder.reflectionCompare(o1, o1) == 0); [EOL]     assertTrue(CompareToBuilder.reflectionCompare(o1, o2) == 0); [EOL]     o2.setA(5); [EOL]     assertTrue(CompareToBuilder.reflectionCompare(o1, o2) < 0); [EOL]     assertTrue(CompareToBuilder.reflectionCompare(o2, o1) > 0); [EOL] }
@Test [EOL] public void testReflectionCompare() { [EOL]     final TestObject o1 = new TestObject(4); [EOL]     final TestObject o2 = new TestObject(4); [EOL]     assertTrue(CompareToBuilder.reflectionCompare(o1, o1) == 0); [EOL]     assertTrue(CompareToBuilder.reflectionCompare(o1, o2) == 0); [EOL]     o2.setA(5); [EOL]     assertTrue(CompareToBuilder.reflectionCompare(o1, o2) < 0); [EOL]     assertTrue(CompareToBuilder.reflectionCompare(o2, o1) > 0); [EOL] }
@Test [EOL] public void testReflectionCompare() { [EOL]     final TestObject o1 = new TestObject(4); [EOL]     final TestObject o2 = new TestObject(4); [EOL]     assertTrue(CompareToBuilder.reflectionCompare(o1, o1) == 0); [EOL]     assertTrue(CompareToBuilder.reflectionCompare(o1, o2) == 0); [EOL]     o2.setA(5); [EOL]     assertTrue(CompareToBuilder.reflectionCompare(o1, o2) < 0); [EOL]     assertTrue(CompareToBuilder.reflectionCompare(o2, o1) > 0); [EOL] }
@Test [EOL] public void testReflectionCompare() { [EOL]     final TestObject o1 = new TestObject(4); [EOL]     final TestObject o2 = new TestObject(4); [EOL]     assertTrue(CompareToBuilder.reflectionCompare(o1, o1) == 0); [EOL]     assertTrue(CompareToBuilder.reflectionCompare(o1, o2) == 0); [EOL]     o2.setA(5); [EOL]     assertTrue(CompareToBuilder.reflectionCompare(o1, o2) < 0); [EOL]     assertTrue(CompareToBuilder.reflectionCompare(o2, o1) > 0); [EOL] }
@Test [EOL] public void testReflectionCompare() { [EOL]     final TestObject o1 = new TestObject(4); [EOL]     final TestObject o2 = new TestObject(4); [EOL]     assertTrue(CompareToBuilder.reflectionCompare(o1, o1) == 0); [EOL]     assertTrue(CompareToBuilder.reflectionCompare(o1, o2) == 0); [EOL]     o2.setA(5); [EOL]     assertTrue(CompareToBuilder.reflectionCompare(o1, o2) < 0); [EOL]     assertTrue(CompareToBuilder.reflectionCompare(o2, o1) > 0); [EOL] }
@Test [EOL] public void testReflectionCompare() { [EOL]     final TestObject o1 = new TestObject(4); [EOL]     final TestObject o2 = new TestObject(4); [EOL]     assertTrue(CompareToBuilder.reflectionCompare(o1, o1) == 0); [EOL]     assertTrue(CompareToBuilder.reflectionCompare(o1, o2) == 0); [EOL]     o2.setA(5); [EOL]     assertTrue(CompareToBuilder.reflectionCompare(o1, o2) < 0); [EOL]     assertTrue(CompareToBuilder.reflectionCompare(o2, o1) > 0); [EOL] }
@Test [EOL] public void testReflectionCompare() { [EOL]     final TestObject o1 = new TestObject(4); [EOL]     final TestObject o2 = new TestObject(4); [EOL]     assertTrue(CompareToBuilder.reflectionCompare(o1, o1) == 0); [EOL]     assertTrue(CompareToBuilder.reflectionCompare(o1, o2) == 0); [EOL]     o2.setA(5); [EOL]     assertTrue(CompareToBuilder.reflectionCompare(o1, o2) < 0); [EOL]     assertTrue(CompareToBuilder.reflectionCompare(o2, o1) > 0); [EOL] }
@Test [EOL] public void testReflectionCompare() { [EOL]     final TestObject o1 = new TestObject(4); [EOL]     final TestObject o2 = new TestObject(4); [EOL]     assertTrue(CompareToBuilder.reflectionCompare(o1, o1) == 0); [EOL]     assertTrue(CompareToBuilder.reflectionCompare(o1, o2) == 0); [EOL]     o2.setA(5); [EOL]     assertTrue(CompareToBuilder.reflectionCompare(o1, o2) < 0); [EOL]     assertTrue(CompareToBuilder.reflectionCompare(o2, o1) > 0); [EOL] }
@Test [EOL] public void testReflectionCompare() { [EOL]     final TestObject o1 = new TestObject(4); [EOL]     final TestObject o2 = new TestObject(4); [EOL]     assertTrue(CompareToBuilder.reflectionCompare(o1, o1) == 0); [EOL]     assertTrue(CompareToBuilder.reflectionCompare(o1, o2) == 0); [EOL]     o2.setA(5); [EOL]     assertTrue(CompareToBuilder.reflectionCompare(o1, o2) < 0); [EOL]     assertTrue(CompareToBuilder.reflectionCompare(o2, o1) > 0); [EOL] }
@Test [EOL] public void testReflectionCompare() { [EOL]     final TestObject o1 = new TestObject(4); [EOL]     final TestObject o2 = new TestObject(4); [EOL]     assertTrue(CompareToBuilder.reflectionCompare(o1, o1) == 0); [EOL]     assertTrue(CompareToBuilder.reflectionCompare(o1, o2) == 0); [EOL]     o2.setA(5); [EOL]     assertTrue(CompareToBuilder.reflectionCompare(o1, o2) < 0); [EOL]     assertTrue(CompareToBuilder.reflectionCompare(o2, o1) > 0); [EOL] }
@Test [EOL] public void testReflectionCompare() { [EOL]     final TestObject o1 = new TestObject(4); [EOL]     final TestObject o2 = new TestObject(4); [EOL]     assertTrue(CompareToBuilder.reflectionCompare(o1, o1) == 0); [EOL]     assertTrue(CompareToBuilder.reflectionCompare(o1, o2) == 0); [EOL]     o2.setA(5); [EOL]     assertTrue(CompareToBuilder.reflectionCompare(o1, o2) < 0); [EOL]     assertTrue(CompareToBuilder.reflectionCompare(o2, o1) > 0); [EOL] }
@Test [EOL] public void testReflectionCompare() { [EOL]     final TestObject o1 = new TestObject(4); [EOL]     final TestObject o2 = new TestObject(4); [EOL]     assertTrue(CompareToBuilder.reflectionCompare(o1, o1) == 0); [EOL]     assertTrue(CompareToBuilder.reflectionCompare(o1, o2) == 0); [EOL]     o2.setA(5); [EOL]     assertTrue(CompareToBuilder.reflectionCompare(o1, o2) < 0); [EOL]     assertTrue(CompareToBuilder.reflectionCompare(o2, o1) > 0); [EOL] }
@Test [EOL] public void testReflectionCompare() { [EOL]     final TestObject o1 = new TestObject(4); [EOL]     final TestObject o2 = new TestObject(4); [EOL]     assertTrue(CompareToBuilder.reflectionCompare(o1, o1) == 0); [EOL]     assertTrue(CompareToBuilder.reflectionCompare(o1, o2) == 0); [EOL]     o2.setA(5); [EOL]     assertTrue(CompareToBuilder.reflectionCompare(o1, o2) < 0); [EOL]     assertTrue(CompareToBuilder.reflectionCompare(o2, o1) > 0); [EOL] }
@Test [EOL] public void testMultiIntArray() { [EOL]     final int[][] array1 = new int[2][2]; [EOL]     final int[][] array2 = new int[2][2]; [EOL]     final int[][] array3 = new int[2][3]; [EOL]     for (int i = 0; i < array1.length; ++i) { [EOL]         for (int j = 0; j < array1[0].length; j++) { [EOL]             array1[i][j] = (i + 1) * (j + 1); [EOL]             array2[i][j] = (i + 1) * (j + 1); [EOL]             array3[i][j] = (i + 1) * (j + 1); [EOL]         } [EOL]     } [EOL]     array3[1][2] = 100; [EOL]     array3[1][2] = 100; [EOL]     assertTrue(new CompareToBuilder().append(array1, array1).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(array1, array2).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(array1, array3).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(array3, array1).toComparison() > 0); [EOL]     array1[1][1] = 200; [EOL]     assertTrue(new CompareToBuilder().append(array1, array2).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append(array2, array1).toComparison() < 0); [EOL] }
@Test [EOL] public void testMultiIntArray() { [EOL]     final int[][] array1 = new int[2][2]; [EOL]     final int[][] array2 = new int[2][2]; [EOL]     final int[][] array3 = new int[2][3]; [EOL]     for (int i = 0; i < array1.length; ++i) { [EOL]         for (int j = 0; j < array1[0].length; j++) { [EOL]             array1[i][j] = (i + 1) * (j + 1); [EOL]             array2[i][j] = (i + 1) * (j + 1); [EOL]             array3[i][j] = (i + 1) * (j + 1); [EOL]         } [EOL]     } [EOL]     array3[1][2] = 100; [EOL]     array3[1][2] = 100; [EOL]     assertTrue(new CompareToBuilder().append(array1, array1).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(array1, array2).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(array1, array3).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(array3, array1).toComparison() > 0); [EOL]     array1[1][1] = 200; [EOL]     assertTrue(new CompareToBuilder().append(array1, array2).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append(array2, array1).toComparison() < 0); [EOL] }
@Test [EOL] public void testMultiIntArray() { [EOL]     final int[][] array1 = new int[2][2]; [EOL]     final int[][] array2 = new int[2][2]; [EOL]     final int[][] array3 = new int[2][3]; [EOL]     for (int i = 0; i < array1.length; ++i) { [EOL]         for (int j = 0; j < array1[0].length; j++) { [EOL]             array1[i][j] = (i + 1) * (j + 1); [EOL]             array2[i][j] = (i + 1) * (j + 1); [EOL]             array3[i][j] = (i + 1) * (j + 1); [EOL]         } [EOL]     } [EOL]     array3[1][2] = 100; [EOL]     array3[1][2] = 100; [EOL]     assertTrue(new CompareToBuilder().append(array1, array1).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(array1, array2).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(array1, array3).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(array3, array1).toComparison() > 0); [EOL]     array1[1][1] = 200; [EOL]     assertTrue(new CompareToBuilder().append(array1, array2).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append(array2, array1).toComparison() < 0); [EOL] }
@Test [EOL] public void testMultiIntArray() { [EOL]     final int[][] array1 = new int[2][2]; [EOL]     final int[][] array2 = new int[2][2]; [EOL]     final int[][] array3 = new int[2][3]; [EOL]     for (int i = 0; i < array1.length; ++i) { [EOL]         for (int j = 0; j < array1[0].length; j++) { [EOL]             array1[i][j] = (i + 1) * (j + 1); [EOL]             array2[i][j] = (i + 1) * (j + 1); [EOL]             array3[i][j] = (i + 1) * (j + 1); [EOL]         } [EOL]     } [EOL]     array3[1][2] = 100; [EOL]     array3[1][2] = 100; [EOL]     assertTrue(new CompareToBuilder().append(array1, array1).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(array1, array2).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(array1, array3).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(array3, array1).toComparison() > 0); [EOL]     array1[1][1] = 200; [EOL]     assertTrue(new CompareToBuilder().append(array1, array2).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append(array2, array1).toComparison() < 0); [EOL] }
@Test [EOL] public void testMultiIntArray() { [EOL]     final int[][] array1 = new int[2][2]; [EOL]     final int[][] array2 = new int[2][2]; [EOL]     final int[][] array3 = new int[2][3]; [EOL]     for (int i = 0; i < array1.length; ++i) { [EOL]         for (int j = 0; j < array1[0].length; j++) { [EOL]             array1[i][j] = (i + 1) * (j + 1); [EOL]             array2[i][j] = (i + 1) * (j + 1); [EOL]             array3[i][j] = (i + 1) * (j + 1); [EOL]         } [EOL]     } [EOL]     array3[1][2] = 100; [EOL]     array3[1][2] = 100; [EOL]     assertTrue(new CompareToBuilder().append(array1, array1).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(array1, array2).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(array1, array3).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(array3, array1).toComparison() > 0); [EOL]     array1[1][1] = 200; [EOL]     assertTrue(new CompareToBuilder().append(array1, array2).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append(array2, array1).toComparison() < 0); [EOL] }
@Test [EOL] public void testMultiIntArray() { [EOL]     final int[][] array1 = new int[2][2]; [EOL]     final int[][] array2 = new int[2][2]; [EOL]     final int[][] array3 = new int[2][3]; [EOL]     for (int i = 0; i < array1.length; ++i) { [EOL]         for (int j = 0; j < array1[0].length; j++) { [EOL]             array1[i][j] = (i + 1) * (j + 1); [EOL]             array2[i][j] = (i + 1) * (j + 1); [EOL]             array3[i][j] = (i + 1) * (j + 1); [EOL]         } [EOL]     } [EOL]     array3[1][2] = 100; [EOL]     array3[1][2] = 100; [EOL]     assertTrue(new CompareToBuilder().append(array1, array1).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(array1, array2).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(array1, array3).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(array3, array1).toComparison() > 0); [EOL]     array1[1][1] = 200; [EOL]     assertTrue(new CompareToBuilder().append(array1, array2).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append(array2, array1).toComparison() < 0); [EOL] }
@Test [EOL] public void testMultiIntArray() { [EOL]     final int[][] array1 = new int[2][2]; [EOL]     final int[][] array2 = new int[2][2]; [EOL]     final int[][] array3 = new int[2][3]; [EOL]     for (int i = 0; i < array1.length; ++i) { [EOL]         for (int j = 0; j < array1[0].length; j++) { [EOL]             array1[i][j] = (i + 1) * (j + 1); [EOL]             array2[i][j] = (i + 1) * (j + 1); [EOL]             array3[i][j] = (i + 1) * (j + 1); [EOL]         } [EOL]     } [EOL]     array3[1][2] = 100; [EOL]     array3[1][2] = 100; [EOL]     assertTrue(new CompareToBuilder().append(array1, array1).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(array1, array2).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(array1, array3).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(array3, array1).toComparison() > 0); [EOL]     array1[1][1] = 200; [EOL]     assertTrue(new CompareToBuilder().append(array1, array2).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append(array2, array1).toComparison() < 0); [EOL] }
@Test [EOL] public void testMultiIntArray() { [EOL]     final int[][] array1 = new int[2][2]; [EOL]     final int[][] array2 = new int[2][2]; [EOL]     final int[][] array3 = new int[2][3]; [EOL]     for (int i = 0; i < array1.length; ++i) { [EOL]         for (int j = 0; j < array1[0].length; j++) { [EOL]             array1[i][j] = (i + 1) * (j + 1); [EOL]             array2[i][j] = (i + 1) * (j + 1); [EOL]             array3[i][j] = (i + 1) * (j + 1); [EOL]         } [EOL]     } [EOL]     array3[1][2] = 100; [EOL]     array3[1][2] = 100; [EOL]     assertTrue(new CompareToBuilder().append(array1, array1).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(array1, array2).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(array1, array3).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(array3, array1).toComparison() > 0); [EOL]     array1[1][1] = 200; [EOL]     assertTrue(new CompareToBuilder().append(array1, array2).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append(array2, array1).toComparison() < 0); [EOL] }
@Test [EOL] public void testMultiIntArray() { [EOL]     final int[][] array1 = new int[2][2]; [EOL]     final int[][] array2 = new int[2][2]; [EOL]     final int[][] array3 = new int[2][3]; [EOL]     for (int i = 0; i < array1.length; ++i) { [EOL]         for (int j = 0; j < array1[0].length; j++) { [EOL]             array1[i][j] = (i + 1) * (j + 1); [EOL]             array2[i][j] = (i + 1) * (j + 1); [EOL]             array3[i][j] = (i + 1) * (j + 1); [EOL]         } [EOL]     } [EOL]     array3[1][2] = 100; [EOL]     array3[1][2] = 100; [EOL]     assertTrue(new CompareToBuilder().append(array1, array1).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(array1, array2).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(array1, array3).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(array3, array1).toComparison() > 0); [EOL]     array1[1][1] = 200; [EOL]     assertTrue(new CompareToBuilder().append(array1, array2).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append(array2, array1).toComparison() < 0); [EOL] }
@Test [EOL] public void testMultiIntArray() { [EOL]     final int[][] array1 = new int[2][2]; [EOL]     final int[][] array2 = new int[2][2]; [EOL]     final int[][] array3 = new int[2][3]; [EOL]     for (int i = 0; i < array1.length; ++i) { [EOL]         for (int j = 0; j < array1[0].length; j++) { [EOL]             array1[i][j] = (i + 1) * (j + 1); [EOL]             array2[i][j] = (i + 1) * (j + 1); [EOL]             array3[i][j] = (i + 1) * (j + 1); [EOL]         } [EOL]     } [EOL]     array3[1][2] = 100; [EOL]     array3[1][2] = 100; [EOL]     assertTrue(new CompareToBuilder().append(array1, array1).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(array1, array2).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(array1, array3).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(array3, array1).toComparison() > 0); [EOL]     array1[1][1] = 200; [EOL]     assertTrue(new CompareToBuilder().append(array1, array2).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append(array2, array1).toComparison() < 0); [EOL] }
@Test [EOL] public void testShortArray() { [EOL]     final short[] obj1 = new short[2]; [EOL]     obj1[0] = 5; [EOL]     obj1[1] = 6; [EOL]     final short[] obj2 = new short[2]; [EOL]     obj2[0] = 5; [EOL]     obj2[1] = 6; [EOL]     final short[] obj3 = new short[3]; [EOL]     obj3[0] = 5; [EOL]     obj3[1] = 6; [EOL]     obj3[2] = 7; [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0); [EOL]     obj1[1] = 7; [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(obj1, null).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append((short[]) null, (short[]) null).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(null, obj1).toComparison() < 0); [EOL] }
@Test [EOL] public void testShortArray() { [EOL]     final short[] obj1 = new short[2]; [EOL]     obj1[0] = 5; [EOL]     obj1[1] = 6; [EOL]     final short[] obj2 = new short[2]; [EOL]     obj2[0] = 5; [EOL]     obj2[1] = 6; [EOL]     final short[] obj3 = new short[3]; [EOL]     obj3[0] = 5; [EOL]     obj3[1] = 6; [EOL]     obj3[2] = 7; [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0); [EOL]     obj1[1] = 7; [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(obj1, null).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append((short[]) null, (short[]) null).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(null, obj1).toComparison() < 0); [EOL] }
@Test [EOL] public void testShortArray() { [EOL]     final short[] obj1 = new short[2]; [EOL]     obj1[0] = 5; [EOL]     obj1[1] = 6; [EOL]     final short[] obj2 = new short[2]; [EOL]     obj2[0] = 5; [EOL]     obj2[1] = 6; [EOL]     final short[] obj3 = new short[3]; [EOL]     obj3[0] = 5; [EOL]     obj3[1] = 6; [EOL]     obj3[2] = 7; [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0); [EOL]     obj1[1] = 7; [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(obj1, null).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append((short[]) null, (short[]) null).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(null, obj1).toComparison() < 0); [EOL] }
@Test [EOL] public void testShortArray() { [EOL]     final short[] obj1 = new short[2]; [EOL]     obj1[0] = 5; [EOL]     obj1[1] = 6; [EOL]     final short[] obj2 = new short[2]; [EOL]     obj2[0] = 5; [EOL]     obj2[1] = 6; [EOL]     final short[] obj3 = new short[3]; [EOL]     obj3[0] = 5; [EOL]     obj3[1] = 6; [EOL]     obj3[2] = 7; [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0); [EOL]     obj1[1] = 7; [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(obj1, null).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append((short[]) null, (short[]) null).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(null, obj1).toComparison() < 0); [EOL] }
@Test [EOL] public void testMultiIntArray() { [EOL]     final int[][] array1 = new int[2][2]; [EOL]     final int[][] array2 = new int[2][2]; [EOL]     final int[][] array3 = new int[2][3]; [EOL]     for (int i = 0; i < array1.length; ++i) { [EOL]         for (int j = 0; j < array1[0].length; j++) { [EOL]             array1[i][j] = (i + 1) * (j + 1); [EOL]             array2[i][j] = (i + 1) * (j + 1); [EOL]             array3[i][j] = (i + 1) * (j + 1); [EOL]         } [EOL]     } [EOL]     array3[1][2] = 100; [EOL]     array3[1][2] = 100; [EOL]     assertTrue(new CompareToBuilder().append(array1, array1).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(array1, array2).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(array1, array3).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(array3, array1).toComparison() > 0); [EOL]     array1[1][1] = 200; [EOL]     assertTrue(new CompareToBuilder().append(array1, array2).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append(array2, array1).toComparison() < 0); [EOL] }
@Test [EOL] public void testMultiIntArray() { [EOL]     final int[][] array1 = new int[2][2]; [EOL]     final int[][] array2 = new int[2][2]; [EOL]     final int[][] array3 = new int[2][3]; [EOL]     for (int i = 0; i < array1.length; ++i) { [EOL]         for (int j = 0; j < array1[0].length; j++) { [EOL]             array1[i][j] = (i + 1) * (j + 1); [EOL]             array2[i][j] = (i + 1) * (j + 1); [EOL]             array3[i][j] = (i + 1) * (j + 1); [EOL]         } [EOL]     } [EOL]     array3[1][2] = 100; [EOL]     array3[1][2] = 100; [EOL]     assertTrue(new CompareToBuilder().append(array1, array1).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(array1, array2).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(array1, array3).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(array3, array1).toComparison() > 0); [EOL]     array1[1][1] = 200; [EOL]     assertTrue(new CompareToBuilder().append(array1, array2).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append(array2, array1).toComparison() < 0); [EOL] }
@Test [EOL] public void testMultiIntArray() { [EOL]     final int[][] array1 = new int[2][2]; [EOL]     final int[][] array2 = new int[2][2]; [EOL]     final int[][] array3 = new int[2][3]; [EOL]     for (int i = 0; i < array1.length; ++i) { [EOL]         for (int j = 0; j < array1[0].length; j++) { [EOL]             array1[i][j] = (i + 1) * (j + 1); [EOL]             array2[i][j] = (i + 1) * (j + 1); [EOL]             array3[i][j] = (i + 1) * (j + 1); [EOL]         } [EOL]     } [EOL]     array3[1][2] = 100; [EOL]     array3[1][2] = 100; [EOL]     assertTrue(new CompareToBuilder().append(array1, array1).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(array1, array2).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(array1, array3).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(array3, array1).toComparison() > 0); [EOL]     array1[1][1] = 200; [EOL]     assertTrue(new CompareToBuilder().append(array1, array2).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append(array2, array1).toComparison() < 0); [EOL] }
@Test [EOL] public void testMultiIntArray() { [EOL]     final int[][] array1 = new int[2][2]; [EOL]     final int[][] array2 = new int[2][2]; [EOL]     final int[][] array3 = new int[2][3]; [EOL]     for (int i = 0; i < array1.length; ++i) { [EOL]         for (int j = 0; j < array1[0].length; j++) { [EOL]             array1[i][j] = (i + 1) * (j + 1); [EOL]             array2[i][j] = (i + 1) * (j + 1); [EOL]             array3[i][j] = (i + 1) * (j + 1); [EOL]         } [EOL]     } [EOL]     array3[1][2] = 100; [EOL]     array3[1][2] = 100; [EOL]     assertTrue(new CompareToBuilder().append(array1, array1).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(array1, array2).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(array1, array3).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(array3, array1).toComparison() > 0); [EOL]     array1[1][1] = 200; [EOL]     assertTrue(new CompareToBuilder().append(array1, array2).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append(array2, array1).toComparison() < 0); [EOL] }
@Test [EOL] public void testMultiIntArray() { [EOL]     final int[][] array1 = new int[2][2]; [EOL]     final int[][] array2 = new int[2][2]; [EOL]     final int[][] array3 = new int[2][3]; [EOL]     for (int i = 0; i < array1.length; ++i) { [EOL]         for (int j = 0; j < array1[0].length; j++) { [EOL]             array1[i][j] = (i + 1) * (j + 1); [EOL]             array2[i][j] = (i + 1) * (j + 1); [EOL]             array3[i][j] = (i + 1) * (j + 1); [EOL]         } [EOL]     } [EOL]     array3[1][2] = 100; [EOL]     array3[1][2] = 100; [EOL]     assertTrue(new CompareToBuilder().append(array1, array1).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(array1, array2).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(array1, array3).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(array3, array1).toComparison() > 0); [EOL]     array1[1][1] = 200; [EOL]     assertTrue(new CompareToBuilder().append(array1, array2).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append(array2, array1).toComparison() < 0); [EOL] }
@Test [EOL] public void testMultiIntArray() { [EOL]     final int[][] array1 = new int[2][2]; [EOL]     final int[][] array2 = new int[2][2]; [EOL]     final int[][] array3 = new int[2][3]; [EOL]     for (int i = 0; i < array1.length; ++i) { [EOL]         for (int j = 0; j < array1[0].length; j++) { [EOL]             array1[i][j] = (i + 1) * (j + 1); [EOL]             array2[i][j] = (i + 1) * (j + 1); [EOL]             array3[i][j] = (i + 1) * (j + 1); [EOL]         } [EOL]     } [EOL]     array3[1][2] = 100; [EOL]     array3[1][2] = 100; [EOL]     assertTrue(new CompareToBuilder().append(array1, array1).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(array1, array2).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(array1, array3).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(array3, array1).toComparison() > 0); [EOL]     array1[1][1] = 200; [EOL]     assertTrue(new CompareToBuilder().append(array1, array2).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append(array2, array1).toComparison() < 0); [EOL] }
@Test [EOL] public void testMultiIntArray() { [EOL]     final int[][] array1 = new int[2][2]; [EOL]     final int[][] array2 = new int[2][2]; [EOL]     final int[][] array3 = new int[2][3]; [EOL]     for (int i = 0; i < array1.length; ++i) { [EOL]         for (int j = 0; j < array1[0].length; j++) { [EOL]             array1[i][j] = (i + 1) * (j + 1); [EOL]             array2[i][j] = (i + 1) * (j + 1); [EOL]             array3[i][j] = (i + 1) * (j + 1); [EOL]         } [EOL]     } [EOL]     array3[1][2] = 100; [EOL]     array3[1][2] = 100; [EOL]     assertTrue(new CompareToBuilder().append(array1, array1).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(array1, array2).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(array1, array3).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(array3, array1).toComparison() > 0); [EOL]     array1[1][1] = 200; [EOL]     assertTrue(new CompareToBuilder().append(array1, array2).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append(array2, array1).toComparison() < 0); [EOL] }
@Test [EOL] public void testShortArray() { [EOL]     final short[] obj1 = new short[2]; [EOL]     obj1[0] = 5; [EOL]     obj1[1] = 6; [EOL]     final short[] obj2 = new short[2]; [EOL]     obj2[0] = 5; [EOL]     obj2[1] = 6; [EOL]     final short[] obj3 = new short[3]; [EOL]     obj3[0] = 5; [EOL]     obj3[1] = 6; [EOL]     obj3[2] = 7; [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0); [EOL]     obj1[1] = 7; [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(obj1, null).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append((short[]) null, (short[]) null).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(null, obj1).toComparison() < 0); [EOL] }
@Test [EOL] public void testShortArray() { [EOL]     final short[] obj1 = new short[2]; [EOL]     obj1[0] = 5; [EOL]     obj1[1] = 6; [EOL]     final short[] obj2 = new short[2]; [EOL]     obj2[0] = 5; [EOL]     obj2[1] = 6; [EOL]     final short[] obj3 = new short[3]; [EOL]     obj3[0] = 5; [EOL]     obj3[1] = 6; [EOL]     obj3[2] = 7; [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0); [EOL]     obj1[1] = 7; [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(obj1, null).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append((short[]) null, (short[]) null).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(null, obj1).toComparison() < 0); [EOL] }
@Test [EOL] public void testShortArray() { [EOL]     final short[] obj1 = new short[2]; [EOL]     obj1[0] = 5; [EOL]     obj1[1] = 6; [EOL]     final short[] obj2 = new short[2]; [EOL]     obj2[0] = 5; [EOL]     obj2[1] = 6; [EOL]     final short[] obj3 = new short[3]; [EOL]     obj3[0] = 5; [EOL]     obj3[1] = 6; [EOL]     obj3[2] = 7; [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0); [EOL]     obj1[1] = 7; [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(obj1, null).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append((short[]) null, (short[]) null).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(null, obj1).toComparison() < 0); [EOL] }
@Test [EOL] public void testShortArray() { [EOL]     final short[] obj1 = new short[2]; [EOL]     obj1[0] = 5; [EOL]     obj1[1] = 6; [EOL]     final short[] obj2 = new short[2]; [EOL]     obj2[0] = 5; [EOL]     obj2[1] = 6; [EOL]     final short[] obj3 = new short[3]; [EOL]     obj3[0] = 5; [EOL]     obj3[1] = 6; [EOL]     obj3[2] = 7; [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0); [EOL]     obj1[1] = 7; [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(obj1, null).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append((short[]) null, (short[]) null).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(null, obj1).toComparison() < 0); [EOL] }
@Test [EOL] public void testShortArray() { [EOL]     final short[] obj1 = new short[2]; [EOL]     obj1[0] = 5; [EOL]     obj1[1] = 6; [EOL]     final short[] obj2 = new short[2]; [EOL]     obj2[0] = 5; [EOL]     obj2[1] = 6; [EOL]     final short[] obj3 = new short[3]; [EOL]     obj3[0] = 5; [EOL]     obj3[1] = 6; [EOL]     obj3[2] = 7; [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0); [EOL]     obj1[1] = 7; [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(obj1, null).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append((short[]) null, (short[]) null).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(null, obj1).toComparison() < 0); [EOL] }
@Test [EOL] public void testShortArray() { [EOL]     final short[] obj1 = new short[2]; [EOL]     obj1[0] = 5; [EOL]     obj1[1] = 6; [EOL]     final short[] obj2 = new short[2]; [EOL]     obj2[0] = 5; [EOL]     obj2[1] = 6; [EOL]     final short[] obj3 = new short[3]; [EOL]     obj3[0] = 5; [EOL]     obj3[1] = 6; [EOL]     obj3[2] = 7; [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0); [EOL]     obj1[1] = 7; [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(obj1, null).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append((short[]) null, (short[]) null).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(null, obj1).toComparison() < 0); [EOL] }
@Test [EOL] public void testShortArray() { [EOL]     final short[] obj1 = new short[2]; [EOL]     obj1[0] = 5; [EOL]     obj1[1] = 6; [EOL]     final short[] obj2 = new short[2]; [EOL]     obj2[0] = 5; [EOL]     obj2[1] = 6; [EOL]     final short[] obj3 = new short[3]; [EOL]     obj3[0] = 5; [EOL]     obj3[1] = 6; [EOL]     obj3[2] = 7; [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0); [EOL]     obj1[1] = 7; [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(obj1, null).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append((short[]) null, (short[]) null).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(null, obj1).toComparison() < 0); [EOL] }
@Test [EOL] public void testObjectBuild() { [EOL]     final TestObject o1 = new TestObject(4); [EOL]     final TestObject o2 = new TestObject(4); [EOL]     assertEquals(Integer.valueOf(0), new CompareToBuilder().append(o1, o1).build()); [EOL]     assertEquals(Integer.valueOf(0), new CompareToBuilder().append(o1, o2).build()); [EOL]     o2.setA(5); [EOL]     assertTrue(new CompareToBuilder().append(o1, o2).build().intValue() < 0); [EOL]     assertTrue(new CompareToBuilder().append(o2, o1).build().intValue() > 0); [EOL]     assertTrue(new CompareToBuilder().append(o1, null).build().intValue() > 0); [EOL]     assertEquals(Integer.valueOf(0), new CompareToBuilder().append((Object) null, (Object) null).build()); [EOL]     assertTrue(new CompareToBuilder().append(null, o1).build().intValue() < 0); [EOL] }
@Test [EOL] public void testIsNotEmpty() { [EOL]     assertFalse(StringUtils.isNotEmpty(null)); [EOL]     assertFalse(StringUtils.isNotEmpty("")); [EOL]     assertTrue(StringUtils.isNotEmpty(" ")); [EOL]     assertTrue(StringUtils.isNotEmpty("foo")); [EOL]     assertTrue(StringUtils.isNotEmpty("  foo  ")); [EOL] }
@Test [EOL] public void testIsNotEmpty() { [EOL]     assertFalse(StringUtils.isNotEmpty(null)); [EOL]     assertFalse(StringUtils.isNotEmpty("")); [EOL]     assertTrue(StringUtils.isNotEmpty(" ")); [EOL]     assertTrue(StringUtils.isNotEmpty("foo")); [EOL]     assertTrue(StringUtils.isNotEmpty("  foo  ")); [EOL] }
@Test [EOL] public void testIsNotEmpty() { [EOL]     assertFalse(StringUtils.isNotEmpty(null)); [EOL]     assertFalse(StringUtils.isNotEmpty("")); [EOL]     assertTrue(StringUtils.isNotEmpty(" ")); [EOL]     assertTrue(StringUtils.isNotEmpty("foo")); [EOL]     assertTrue(StringUtils.isNotEmpty("  foo  ")); [EOL] }
@Test [EOL] public void testIsNotEmpty() { [EOL]     assertFalse(StringUtils.isNotEmpty(null)); [EOL]     assertFalse(StringUtils.isNotEmpty("")); [EOL]     assertTrue(StringUtils.isNotEmpty(" ")); [EOL]     assertTrue(StringUtils.isNotEmpty("foo")); [EOL]     assertTrue(StringUtils.isNotEmpty("  foo  ")); [EOL] }
@Test [EOL] public void testStripToNull_String() { [EOL]     assertEquals(null, StringUtils.stripToNull(null)); [EOL]     assertEquals(null, StringUtils.stripToNull("")); [EOL]     assertEquals(null, StringUtils.stripToNull("        ")); [EOL]     assertEquals(null, StringUtils.stripToNull(StringUtilsTest.WHITESPACE)); [EOL]     assertEquals("ab c", StringUtils.stripToNull("  ab c  ")); [EOL]     assertEquals(StringUtilsTest.NON_WHITESPACE, StringUtils.stripToNull(StringUtilsTest.WHITESPACE + StringUtilsTest.NON_WHITESPACE + StringUtilsTest.WHITESPACE)); [EOL] }
@Test [EOL] public void testStripToNull_String() { [EOL]     assertEquals(null, StringUtils.stripToNull(null)); [EOL]     assertEquals(null, StringUtils.stripToNull("")); [EOL]     assertEquals(null, StringUtils.stripToNull("        ")); [EOL]     assertEquals(null, StringUtils.stripToNull(StringUtilsTest.WHITESPACE)); [EOL]     assertEquals("ab c", StringUtils.stripToNull("  ab c  ")); [EOL]     assertEquals(StringUtilsTest.NON_WHITESPACE, StringUtils.stripToNull(StringUtilsTest.WHITESPACE + StringUtilsTest.NON_WHITESPACE + StringUtilsTest.WHITESPACE)); [EOL] }
@Test [EOL] public void testStripToEmpty_String() { [EOL]     assertEquals("", StringUtils.stripToEmpty(null)); [EOL]     assertEquals("", StringUtils.stripToEmpty("")); [EOL]     assertEquals("", StringUtils.stripToEmpty("        ")); [EOL]     assertEquals("", StringUtils.stripToEmpty(StringUtilsTest.WHITESPACE)); [EOL]     assertEquals("ab c", StringUtils.stripToEmpty("  ab c  ")); [EOL]     assertEquals(StringUtilsTest.NON_WHITESPACE, StringUtils.stripToEmpty(StringUtilsTest.WHITESPACE + StringUtilsTest.NON_WHITESPACE + StringUtilsTest.WHITESPACE)); [EOL] }
@Test [EOL] public void testStripToEmpty_String() { [EOL]     assertEquals("", StringUtils.stripToEmpty(null)); [EOL]     assertEquals("", StringUtils.stripToEmpty("")); [EOL]     assertEquals("", StringUtils.stripToEmpty("        ")); [EOL]     assertEquals("", StringUtils.stripToEmpty(StringUtilsTest.WHITESPACE)); [EOL]     assertEquals("ab c", StringUtils.stripToEmpty("  ab c  ")); [EOL]     assertEquals(StringUtilsTest.NON_WHITESPACE, StringUtils.stripToEmpty(StringUtilsTest.WHITESPACE + StringUtilsTest.NON_WHITESPACE + StringUtilsTest.WHITESPACE)); [EOL] }
@Test [EOL] public void testStripToEmpty_String() { [EOL]     assertEquals("", StringUtils.stripToEmpty(null)); [EOL]     assertEquals("", StringUtils.stripToEmpty("")); [EOL]     assertEquals("", StringUtils.stripToEmpty("        ")); [EOL]     assertEquals("", StringUtils.stripToEmpty(StringUtilsTest.WHITESPACE)); [EOL]     assertEquals("ab c", StringUtils.stripToEmpty("  ab c  ")); [EOL]     assertEquals(StringUtilsTest.NON_WHITESPACE, StringUtils.stripToEmpty(StringUtilsTest.WHITESPACE + StringUtilsTest.NON_WHITESPACE + StringUtilsTest.WHITESPACE)); [EOL] }
@Test [EOL] public void testStripToEmpty_String() { [EOL]     assertEquals("", StringUtils.stripToEmpty(null)); [EOL]     assertEquals("", StringUtils.stripToEmpty("")); [EOL]     assertEquals("", StringUtils.stripToEmpty("        ")); [EOL]     assertEquals("", StringUtils.stripToEmpty(StringUtilsTest.WHITESPACE)); [EOL]     assertEquals("ab c", StringUtils.stripToEmpty("  ab c  ")); [EOL]     assertEquals(StringUtilsTest.NON_WHITESPACE, StringUtils.stripToEmpty(StringUtilsTest.WHITESPACE + StringUtilsTest.NON_WHITESPACE + StringUtilsTest.WHITESPACE)); [EOL] }
@Test [EOL] public void testStripAccents() { [EOL]     final String cue = "\u00C7\u00FA\u00EA"; [EOL]     assertEquals("Failed to strip accents from " + cue, "Cue", StringUtils.stripAccents(cue)); [EOL]     final String lots = "\u00C0\u00C1\u00C2\u00C3\u00C4\u00C5\u00C7\u00C8\u00C9" + "\u00CA\u00CB\u00CC\u00CD\u00CE\u00CF\u00D1\u00D2\u00D3" + "\u00D4\u00D5\u00D6\u00D9\u00DA\u00DB\u00DC\u00DD"; [EOL]     assertEquals("Failed to strip accents from " + lots, "AAAAAACEEEEIIIINOOOOOUUUUY", StringUtils.stripAccents(lots)); [EOL]     assertNull("Failed null safety", StringUtils.stripAccents(null)); [EOL]     assertEquals("Failed empty String", "", StringUtils.stripAccents("")); [EOL]     assertEquals("Failed to handle non-accented text", "control", StringUtils.stripAccents("control")); [EOL]     assertEquals("Failed to handle easy example", "eclair", StringUtils.stripAccents("\u00E9clair")); [EOL] }
@Test [EOL] public void testStripAccents() { [EOL]     final String cue = "\u00C7\u00FA\u00EA"; [EOL]     assertEquals("Failed to strip accents from " + cue, "Cue", StringUtils.stripAccents(cue)); [EOL]     final String lots = "\u00C0\u00C1\u00C2\u00C3\u00C4\u00C5\u00C7\u00C8\u00C9" + "\u00CA\u00CB\u00CC\u00CD\u00CE\u00CF\u00D1\u00D2\u00D3" + "\u00D4\u00D5\u00D6\u00D9\u00DA\u00DB\u00DC\u00DD"; [EOL]     assertEquals("Failed to strip accents from " + lots, "AAAAAACEEEEIIIINOOOOOUUUUY", StringUtils.stripAccents(lots)); [EOL]     assertNull("Failed null safety", StringUtils.stripAccents(null)); [EOL]     assertEquals("Failed empty String", "", StringUtils.stripAccents("")); [EOL]     assertEquals("Failed to handle non-accented text", "control", StringUtils.stripAccents("control")); [EOL]     assertEquals("Failed to handle easy example", "eclair", StringUtils.stripAccents("\u00E9clair")); [EOL] }
@Test [EOL] public void testStripAccents() { [EOL]     final String cue = "\u00C7\u00FA\u00EA"; [EOL]     assertEquals("Failed to strip accents from " + cue, "Cue", StringUtils.stripAccents(cue)); [EOL]     final String lots = "\u00C0\u00C1\u00C2\u00C3\u00C4\u00C5\u00C7\u00C8\u00C9" + "\u00CA\u00CB\u00CC\u00CD\u00CE\u00CF\u00D1\u00D2\u00D3" + "\u00D4\u00D5\u00D6\u00D9\u00DA\u00DB\u00DC\u00DD"; [EOL]     assertEquals("Failed to strip accents from " + lots, "AAAAAACEEEEIIIINOOOOOUUUUY", StringUtils.stripAccents(lots)); [EOL]     assertNull("Failed null safety", StringUtils.stripAccents(null)); [EOL]     assertEquals("Failed empty String", "", StringUtils.stripAccents("")); [EOL]     assertEquals("Failed to handle non-accented text", "control", StringUtils.stripAccents("control")); [EOL]     assertEquals("Failed to handle easy example", "eclair", StringUtils.stripAccents("\u00E9clair")); [EOL] }
@Test [EOL] public void testStripAccents() { [EOL]     final String cue = "\u00C7\u00FA\u00EA"; [EOL]     assertEquals("Failed to strip accents from " + cue, "Cue", StringUtils.stripAccents(cue)); [EOL]     final String lots = "\u00C0\u00C1\u00C2\u00C3\u00C4\u00C5\u00C7\u00C8\u00C9" + "\u00CA\u00CB\u00CC\u00CD\u00CE\u00CF\u00D1\u00D2\u00D3" + "\u00D4\u00D5\u00D6\u00D9\u00DA\u00DB\u00DC\u00DD"; [EOL]     assertEquals("Failed to strip accents from " + lots, "AAAAAACEEEEIIIINOOOOOUUUUY", StringUtils.stripAccents(lots)); [EOL]     assertNull("Failed null safety", StringUtils.stripAccents(null)); [EOL]     assertEquals("Failed empty String", "", StringUtils.stripAccents("")); [EOL]     assertEquals("Failed to handle non-accented text", "control", StringUtils.stripAccents("control")); [EOL]     assertEquals("Failed to handle easy example", "eclair", StringUtils.stripAccents("\u00E9clair")); [EOL] }
@Test [EOL] public void testStripAccents() { [EOL]     final String cue = "\u00C7\u00FA\u00EA"; [EOL]     assertEquals("Failed to strip accents from " + cue, "Cue", StringUtils.stripAccents(cue)); [EOL]     final String lots = "\u00C0\u00C1\u00C2\u00C3\u00C4\u00C5\u00C7\u00C8\u00C9" + "\u00CA\u00CB\u00CC\u00CD\u00CE\u00CF\u00D1\u00D2\u00D3" + "\u00D4\u00D5\u00D6\u00D9\u00DA\u00DB\u00DC\u00DD"; [EOL]     assertEquals("Failed to strip accents from " + lots, "AAAAAACEEEEIIIINOOOOOUUUUY", StringUtils.stripAccents(lots)); [EOL]     assertNull("Failed null safety", StringUtils.stripAccents(null)); [EOL]     assertEquals("Failed empty String", "", StringUtils.stripAccents("")); [EOL]     assertEquals("Failed to handle non-accented text", "control", StringUtils.stripAccents("control")); [EOL]     assertEquals("Failed to handle easy example", "eclair", StringUtils.stripAccents("\u00E9clair")); [EOL] }
@Test [EOL] public void testEqualsIgnoreCase() { [EOL]     assertTrue(StringUtils.equalsIgnoreCase(null, null)); [EOL]     assertTrue(StringUtils.equalsIgnoreCase(FOO, FOO)); [EOL]     assertTrue(StringUtils.equalsIgnoreCase(FOO, new String(new char[] { 'f', 'o', 'o' }))); [EOL]     assertTrue(StringUtils.equalsIgnoreCase(FOO, new String(new char[] { 'f', 'O', 'O' }))); [EOL]     assertFalse(StringUtils.equalsIgnoreCase(FOO, BAR)); [EOL]     assertFalse(StringUtils.equalsIgnoreCase(FOO, null)); [EOL]     assertFalse(StringUtils.equalsIgnoreCase(null, FOO)); [EOL]     assertTrue(StringUtils.equalsIgnoreCase("", "")); [EOL]     assertFalse(StringUtils.equalsIgnoreCase("abcd", "abcd ")); [EOL] }
@Test [EOL] public void testIndexOf_charInt() { [EOL]     assertEquals(-1, StringUtils.indexOf(null, ' ', 0)); [EOL]     assertEquals(-1, StringUtils.indexOf(null, ' ', -1)); [EOL]     assertEquals(-1, StringUtils.indexOf("", ' ', 0)); [EOL]     assertEquals(-1, StringUtils.indexOf("", ' ', -1)); [EOL]     assertEquals(0, StringUtils.indexOf("aabaabaa", 'a', 0)); [EOL]     assertEquals(2, StringUtils.indexOf("aabaabaa", 'b', 0)); [EOL]     assertEquals(5, StringUtils.indexOf("aabaabaa", 'b', 3)); [EOL]     assertEquals(-1, StringUtils.indexOf("aabaabaa", 'b', 9)); [EOL]     assertEquals(2, StringUtils.indexOf("aabaabaa", 'b', -1)); [EOL]     assertEquals(5, StringUtils.indexOf(new StringBuilder("aabaabaa"), 'b', 3)); [EOL] }
@Test [EOL] public void testIndexOf_charInt() { [EOL]     assertEquals(-1, StringUtils.indexOf(null, ' ', 0)); [EOL]     assertEquals(-1, StringUtils.indexOf(null, ' ', -1)); [EOL]     assertEquals(-1, StringUtils.indexOf("", ' ', 0)); [EOL]     assertEquals(-1, StringUtils.indexOf("", ' ', -1)); [EOL]     assertEquals(0, StringUtils.indexOf("aabaabaa", 'a', 0)); [EOL]     assertEquals(2, StringUtils.indexOf("aabaabaa", 'b', 0)); [EOL]     assertEquals(5, StringUtils.indexOf("aabaabaa", 'b', 3)); [EOL]     assertEquals(-1, StringUtils.indexOf("aabaabaa", 'b', 9)); [EOL]     assertEquals(2, StringUtils.indexOf("aabaabaa", 'b', -1)); [EOL]     assertEquals(5, StringUtils.indexOf(new StringBuilder("aabaabaa"), 'b', 3)); [EOL] }
@Test [EOL] public void testIndexOfIgnoreCase_String() { [EOL]     assertEquals(-1, StringUtils.indexOfIgnoreCase(null, null)); [EOL]     assertEquals(-1, StringUtils.indexOfIgnoreCase(null, "")); [EOL]     assertEquals(-1, StringUtils.indexOfIgnoreCase("", null)); [EOL]     assertEquals(0, StringUtils.indexOfIgnoreCase("", "")); [EOL]     assertEquals(0, StringUtils.indexOfIgnoreCase("aabaabaa", "a")); [EOL]     assertEquals(0, StringUtils.indexOfIgnoreCase("aabaabaa", "A")); [EOL]     assertEquals(2, StringUtils.indexOfIgnoreCase("aabaabaa", "b")); [EOL]     assertEquals(2, StringUtils.indexOfIgnoreCase("aabaabaa", "B")); [EOL]     assertEquals(1, StringUtils.indexOfIgnoreCase("aabaabaa", "ab")); [EOL]     assertEquals(1, StringUtils.indexOfIgnoreCase("aabaabaa", "AB")); [EOL]     assertEquals(0, StringUtils.indexOfIgnoreCase("aabaabaa", "")); [EOL] }
@Test [EOL] public void testIndexOfIgnoreCase_String() { [EOL]     assertEquals(-1, StringUtils.indexOfIgnoreCase(null, null)); [EOL]     assertEquals(-1, StringUtils.indexOfIgnoreCase(null, "")); [EOL]     assertEquals(-1, StringUtils.indexOfIgnoreCase("", null)); [EOL]     assertEquals(0, StringUtils.indexOfIgnoreCase("", "")); [EOL]     assertEquals(0, StringUtils.indexOfIgnoreCase("aabaabaa", "a")); [EOL]     assertEquals(0, StringUtils.indexOfIgnoreCase("aabaabaa", "A")); [EOL]     assertEquals(2, StringUtils.indexOfIgnoreCase("aabaabaa", "b")); [EOL]     assertEquals(2, StringUtils.indexOfIgnoreCase("aabaabaa", "B")); [EOL]     assertEquals(1, StringUtils.indexOfIgnoreCase("aabaabaa", "ab")); [EOL]     assertEquals(1, StringUtils.indexOfIgnoreCase("aabaabaa", "AB")); [EOL]     assertEquals(0, StringUtils.indexOfIgnoreCase("aabaabaa", "")); [EOL] }
@Test [EOL] public void testIndexOfIgnoreCase_String() { [EOL]     assertEquals(-1, StringUtils.indexOfIgnoreCase(null, null)); [EOL]     assertEquals(-1, StringUtils.indexOfIgnoreCase(null, "")); [EOL]     assertEquals(-1, StringUtils.indexOfIgnoreCase("", null)); [EOL]     assertEquals(0, StringUtils.indexOfIgnoreCase("", "")); [EOL]     assertEquals(0, StringUtils.indexOfIgnoreCase("aabaabaa", "a")); [EOL]     assertEquals(0, StringUtils.indexOfIgnoreCase("aabaabaa", "A")); [EOL]     assertEquals(2, StringUtils.indexOfIgnoreCase("aabaabaa", "b")); [EOL]     assertEquals(2, StringUtils.indexOfIgnoreCase("aabaabaa", "B")); [EOL]     assertEquals(1, StringUtils.indexOfIgnoreCase("aabaabaa", "ab")); [EOL]     assertEquals(1, StringUtils.indexOfIgnoreCase("aabaabaa", "AB")); [EOL]     assertEquals(0, StringUtils.indexOfIgnoreCase("aabaabaa", "")); [EOL] }
@Test [EOL] public void testIndexOfIgnoreCase_String() { [EOL]     assertEquals(-1, StringUtils.indexOfIgnoreCase(null, null)); [EOL]     assertEquals(-1, StringUtils.indexOfIgnoreCase(null, "")); [EOL]     assertEquals(-1, StringUtils.indexOfIgnoreCase("", null)); [EOL]     assertEquals(0, StringUtils.indexOfIgnoreCase("", "")); [EOL]     assertEquals(0, StringUtils.indexOfIgnoreCase("aabaabaa", "a")); [EOL]     assertEquals(0, StringUtils.indexOfIgnoreCase("aabaabaa", "A")); [EOL]     assertEquals(2, StringUtils.indexOfIgnoreCase("aabaabaa", "b")); [EOL]     assertEquals(2, StringUtils.indexOfIgnoreCase("aabaabaa", "B")); [EOL]     assertEquals(1, StringUtils.indexOfIgnoreCase("aabaabaa", "ab")); [EOL]     assertEquals(1, StringUtils.indexOfIgnoreCase("aabaabaa", "AB")); [EOL]     assertEquals(0, StringUtils.indexOfIgnoreCase("aabaabaa", "")); [EOL] }
@Test [EOL] public void testIndexOfIgnoreCase_String() { [EOL]     assertEquals(-1, StringUtils.indexOfIgnoreCase(null, null)); [EOL]     assertEquals(-1, StringUtils.indexOfIgnoreCase(null, "")); [EOL]     assertEquals(-1, StringUtils.indexOfIgnoreCase("", null)); [EOL]     assertEquals(0, StringUtils.indexOfIgnoreCase("", "")); [EOL]     assertEquals(0, StringUtils.indexOfIgnoreCase("aabaabaa", "a")); [EOL]     assertEquals(0, StringUtils.indexOfIgnoreCase("aabaabaa", "A")); [EOL]     assertEquals(2, StringUtils.indexOfIgnoreCase("aabaabaa", "b")); [EOL]     assertEquals(2, StringUtils.indexOfIgnoreCase("aabaabaa", "B")); [EOL]     assertEquals(1, StringUtils.indexOfIgnoreCase("aabaabaa", "ab")); [EOL]     assertEquals(1, StringUtils.indexOfIgnoreCase("aabaabaa", "AB")); [EOL]     assertEquals(0, StringUtils.indexOfIgnoreCase("aabaabaa", "")); [EOL] }
@Test [EOL] public void testIndexOfIgnoreCase_String() { [EOL]     assertEquals(-1, StringUtils.indexOfIgnoreCase(null, null)); [EOL]     assertEquals(-1, StringUtils.indexOfIgnoreCase(null, "")); [EOL]     assertEquals(-1, StringUtils.indexOfIgnoreCase("", null)); [EOL]     assertEquals(0, StringUtils.indexOfIgnoreCase("", "")); [EOL]     assertEquals(0, StringUtils.indexOfIgnoreCase("aabaabaa", "a")); [EOL]     assertEquals(0, StringUtils.indexOfIgnoreCase("aabaabaa", "A")); [EOL]     assertEquals(2, StringUtils.indexOfIgnoreCase("aabaabaa", "b")); [EOL]     assertEquals(2, StringUtils.indexOfIgnoreCase("aabaabaa", "B")); [EOL]     assertEquals(1, StringUtils.indexOfIgnoreCase("aabaabaa", "ab")); [EOL]     assertEquals(1, StringUtils.indexOfIgnoreCase("aabaabaa", "AB")); [EOL]     assertEquals(0, StringUtils.indexOfIgnoreCase("aabaabaa", "")); [EOL] }
@Test [EOL] public void testIndexOfIgnoreCase_String() { [EOL]     assertEquals(-1, StringUtils.indexOfIgnoreCase(null, null)); [EOL]     assertEquals(-1, StringUtils.indexOfIgnoreCase(null, "")); [EOL]     assertEquals(-1, StringUtils.indexOfIgnoreCase("", null)); [EOL]     assertEquals(0, StringUtils.indexOfIgnoreCase("", "")); [EOL]     assertEquals(0, StringUtils.indexOfIgnoreCase("aabaabaa", "a")); [EOL]     assertEquals(0, StringUtils.indexOfIgnoreCase("aabaabaa", "A")); [EOL]     assertEquals(2, StringUtils.indexOfIgnoreCase("aabaabaa", "b")); [EOL]     assertEquals(2, StringUtils.indexOfIgnoreCase("aabaabaa", "B")); [EOL]     assertEquals(1, StringUtils.indexOfIgnoreCase("aabaabaa", "ab")); [EOL]     assertEquals(1, StringUtils.indexOfIgnoreCase("aabaabaa", "AB")); [EOL]     assertEquals(0, StringUtils.indexOfIgnoreCase("aabaabaa", "")); [EOL] }
@Test [EOL] public void testIndexOfIgnoreCase_String() { [EOL]     assertEquals(-1, StringUtils.indexOfIgnoreCase(null, null)); [EOL]     assertEquals(-1, StringUtils.indexOfIgnoreCase(null, "")); [EOL]     assertEquals(-1, StringUtils.indexOfIgnoreCase("", null)); [EOL]     assertEquals(0, StringUtils.indexOfIgnoreCase("", "")); [EOL]     assertEquals(0, StringUtils.indexOfIgnoreCase("aabaabaa", "a")); [EOL]     assertEquals(0, StringUtils.indexOfIgnoreCase("aabaabaa", "A")); [EOL]     assertEquals(2, StringUtils.indexOfIgnoreCase("aabaabaa", "b")); [EOL]     assertEquals(2, StringUtils.indexOfIgnoreCase("aabaabaa", "B")); [EOL]     assertEquals(1, StringUtils.indexOfIgnoreCase("aabaabaa", "ab")); [EOL]     assertEquals(1, StringUtils.indexOfIgnoreCase("aabaabaa", "AB")); [EOL]     assertEquals(0, StringUtils.indexOfIgnoreCase("aabaabaa", "")); [EOL] }
@Test [EOL] public void testIndexOfIgnoreCase_String() { [EOL]     assertEquals(-1, StringUtils.indexOfIgnoreCase(null, null)); [EOL]     assertEquals(-1, StringUtils.indexOfIgnoreCase(null, "")); [EOL]     assertEquals(-1, StringUtils.indexOfIgnoreCase("", null)); [EOL]     assertEquals(0, StringUtils.indexOfIgnoreCase("", "")); [EOL]     assertEquals(0, StringUtils.indexOfIgnoreCase("aabaabaa", "a")); [EOL]     assertEquals(0, StringUtils.indexOfIgnoreCase("aabaabaa", "A")); [EOL]     assertEquals(2, StringUtils.indexOfIgnoreCase("aabaabaa", "b")); [EOL]     assertEquals(2, StringUtils.indexOfIgnoreCase("aabaabaa", "B")); [EOL]     assertEquals(1, StringUtils.indexOfIgnoreCase("aabaabaa", "ab")); [EOL]     assertEquals(1, StringUtils.indexOfIgnoreCase("aabaabaa", "AB")); [EOL]     assertEquals(0, StringUtils.indexOfIgnoreCase("aabaabaa", "")); [EOL] }
@Test [EOL] public void testIndexOfIgnoreCase_String() { [EOL]     assertEquals(-1, StringUtils.indexOfIgnoreCase(null, null)); [EOL]     assertEquals(-1, StringUtils.indexOfIgnoreCase(null, "")); [EOL]     assertEquals(-1, StringUtils.indexOfIgnoreCase("", null)); [EOL]     assertEquals(0, StringUtils.indexOfIgnoreCase("", "")); [EOL]     assertEquals(0, StringUtils.indexOfIgnoreCase("aabaabaa", "a")); [EOL]     assertEquals(0, StringUtils.indexOfIgnoreCase("aabaabaa", "A")); [EOL]     assertEquals(2, StringUtils.indexOfIgnoreCase("aabaabaa", "b")); [EOL]     assertEquals(2, StringUtils.indexOfIgnoreCase("aabaabaa", "B")); [EOL]     assertEquals(1, StringUtils.indexOfIgnoreCase("aabaabaa", "ab")); [EOL]     assertEquals(1, StringUtils.indexOfIgnoreCase("aabaabaa", "AB")); [EOL]     assertEquals(0, StringUtils.indexOfIgnoreCase("aabaabaa", "")); [EOL] }
@Test [EOL] public void testIndexOfIgnoreCase_String() { [EOL]     assertEquals(-1, StringUtils.indexOfIgnoreCase(null, null)); [EOL]     assertEquals(-1, StringUtils.indexOfIgnoreCase(null, "")); [EOL]     assertEquals(-1, StringUtils.indexOfIgnoreCase("", null)); [EOL]     assertEquals(0, StringUtils.indexOfIgnoreCase("", "")); [EOL]     assertEquals(0, StringUtils.indexOfIgnoreCase("aabaabaa", "a")); [EOL]     assertEquals(0, StringUtils.indexOfIgnoreCase("aabaabaa", "A")); [EOL]     assertEquals(2, StringUtils.indexOfIgnoreCase("aabaabaa", "b")); [EOL]     assertEquals(2, StringUtils.indexOfIgnoreCase("aabaabaa", "B")); [EOL]     assertEquals(1, StringUtils.indexOfIgnoreCase("aabaabaa", "ab")); [EOL]     assertEquals(1, StringUtils.indexOfIgnoreCase("aabaabaa", "AB")); [EOL]     assertEquals(0, StringUtils.indexOfIgnoreCase("aabaabaa", "")); [EOL] }
@Test [EOL] public void testIndexOfIgnoreCase_String() { [EOL]     assertEquals(-1, StringUtils.indexOfIgnoreCase(null, null)); [EOL]     assertEquals(-1, StringUtils.indexOfIgnoreCase(null, "")); [EOL]     assertEquals(-1, StringUtils.indexOfIgnoreCase("", null)); [EOL]     assertEquals(0, StringUtils.indexOfIgnoreCase("", "")); [EOL]     assertEquals(0, StringUtils.indexOfIgnoreCase("aabaabaa", "a")); [EOL]     assertEquals(0, StringUtils.indexOfIgnoreCase("aabaabaa", "A")); [EOL]     assertEquals(2, StringUtils.indexOfIgnoreCase("aabaabaa", "b")); [EOL]     assertEquals(2, StringUtils.indexOfIgnoreCase("aabaabaa", "B")); [EOL]     assertEquals(1, StringUtils.indexOfIgnoreCase("aabaabaa", "ab")); [EOL]     assertEquals(1, StringUtils.indexOfIgnoreCase("aabaabaa", "AB")); [EOL]     assertEquals(0, StringUtils.indexOfIgnoreCase("aabaabaa", "")); [EOL] }
@Test [EOL] public void testIndexOfIgnoreCase_String() { [EOL]     assertEquals(-1, StringUtils.indexOfIgnoreCase(null, null)); [EOL]     assertEquals(-1, StringUtils.indexOfIgnoreCase(null, "")); [EOL]     assertEquals(-1, StringUtils.indexOfIgnoreCase("", null)); [EOL]     assertEquals(0, StringUtils.indexOfIgnoreCase("", "")); [EOL]     assertEquals(0, StringUtils.indexOfIgnoreCase("aabaabaa", "a")); [EOL]     assertEquals(0, StringUtils.indexOfIgnoreCase("aabaabaa", "A")); [EOL]     assertEquals(2, StringUtils.indexOfIgnoreCase("aabaabaa", "b")); [EOL]     assertEquals(2, StringUtils.indexOfIgnoreCase("aabaabaa", "B")); [EOL]     assertEquals(1, StringUtils.indexOfIgnoreCase("aabaabaa", "ab")); [EOL]     assertEquals(1, StringUtils.indexOfIgnoreCase("aabaabaa", "AB")); [EOL]     assertEquals(0, StringUtils.indexOfIgnoreCase("aabaabaa", "")); [EOL] }
@Test [EOL] public void testLastIndexOf_charInt() { [EOL]     assertEquals(-1, StringUtils.lastIndexOf(null, ' ', 0)); [EOL]     assertEquals(-1, StringUtils.lastIndexOf(null, ' ', -1)); [EOL]     assertEquals(-1, StringUtils.lastIndexOf("", ' ', 0)); [EOL]     assertEquals(-1, StringUtils.lastIndexOf("", ' ', -1)); [EOL]     assertEquals(7, StringUtils.lastIndexOf("aabaabaa", 'a', 8)); [EOL]     assertEquals(5, StringUtils.lastIndexOf("aabaabaa", 'b', 8)); [EOL]     assertEquals(2, StringUtils.lastIndexOf("aabaabaa", 'b', 3)); [EOL]     assertEquals(5, StringUtils.lastIndexOf("aabaabaa", 'b', 9)); [EOL]     assertEquals(-1, StringUtils.lastIndexOf("aabaabaa", 'b', -1)); [EOL]     assertEquals(0, StringUtils.lastIndexOf("aabaabaa", 'a', 0)); [EOL]     assertEquals(2, StringUtils.lastIndexOf(new StringBuilder("aabaabaa"), 'b', 2)); [EOL] }
@Test [EOL] public void testLastIndexOf_charInt() { [EOL]     assertEquals(-1, StringUtils.lastIndexOf(null, ' ', 0)); [EOL]     assertEquals(-1, StringUtils.lastIndexOf(null, ' ', -1)); [EOL]     assertEquals(-1, StringUtils.lastIndexOf("", ' ', 0)); [EOL]     assertEquals(-1, StringUtils.lastIndexOf("", ' ', -1)); [EOL]     assertEquals(7, StringUtils.lastIndexOf("aabaabaa", 'a', 8)); [EOL]     assertEquals(5, StringUtils.lastIndexOf("aabaabaa", 'b', 8)); [EOL]     assertEquals(2, StringUtils.lastIndexOf("aabaabaa", 'b', 3)); [EOL]     assertEquals(5, StringUtils.lastIndexOf("aabaabaa", 'b', 9)); [EOL]     assertEquals(-1, StringUtils.lastIndexOf("aabaabaa", 'b', -1)); [EOL]     assertEquals(0, StringUtils.lastIndexOf("aabaabaa", 'a', 0)); [EOL]     assertEquals(2, StringUtils.lastIndexOf(new StringBuilder("aabaabaa"), 'b', 2)); [EOL] }
@Test [EOL] public void testLastIndexOf_charInt() { [EOL]     assertEquals(-1, StringUtils.lastIndexOf(null, ' ', 0)); [EOL]     assertEquals(-1, StringUtils.lastIndexOf(null, ' ', -1)); [EOL]     assertEquals(-1, StringUtils.lastIndexOf("", ' ', 0)); [EOL]     assertEquals(-1, StringUtils.lastIndexOf("", ' ', -1)); [EOL]     assertEquals(7, StringUtils.lastIndexOf("aabaabaa", 'a', 8)); [EOL]     assertEquals(5, StringUtils.lastIndexOf("aabaabaa", 'b', 8)); [EOL]     assertEquals(2, StringUtils.lastIndexOf("aabaabaa", 'b', 3)); [EOL]     assertEquals(5, StringUtils.lastIndexOf("aabaabaa", 'b', 9)); [EOL]     assertEquals(-1, StringUtils.lastIndexOf("aabaabaa", 'b', -1)); [EOL]     assertEquals(0, StringUtils.lastIndexOf("aabaabaa", 'a', 0)); [EOL]     assertEquals(2, StringUtils.lastIndexOf(new StringBuilder("aabaabaa"), 'b', 2)); [EOL] }
@Test [EOL] public void testLastIndexOf_charInt() { [EOL]     assertEquals(-1, StringUtils.lastIndexOf(null, ' ', 0)); [EOL]     assertEquals(-1, StringUtils.lastIndexOf(null, ' ', -1)); [EOL]     assertEquals(-1, StringUtils.lastIndexOf("", ' ', 0)); [EOL]     assertEquals(-1, StringUtils.lastIndexOf("", ' ', -1)); [EOL]     assertEquals(7, StringUtils.lastIndexOf("aabaabaa", 'a', 8)); [EOL]     assertEquals(5, StringUtils.lastIndexOf("aabaabaa", 'b', 8)); [EOL]     assertEquals(2, StringUtils.lastIndexOf("aabaabaa", 'b', 3)); [EOL]     assertEquals(5, StringUtils.lastIndexOf("aabaabaa", 'b', 9)); [EOL]     assertEquals(-1, StringUtils.lastIndexOf("aabaabaa", 'b', -1)); [EOL]     assertEquals(0, StringUtils.lastIndexOf("aabaabaa", 'a', 0)); [EOL]     assertEquals(2, StringUtils.lastIndexOf(new StringBuilder("aabaabaa"), 'b', 2)); [EOL] }
@Test [EOL] public void testLastIndexOf_charInt() { [EOL]     assertEquals(-1, StringUtils.lastIndexOf(null, ' ', 0)); [EOL]     assertEquals(-1, StringUtils.lastIndexOf(null, ' ', -1)); [EOL]     assertEquals(-1, StringUtils.lastIndexOf("", ' ', 0)); [EOL]     assertEquals(-1, StringUtils.lastIndexOf("", ' ', -1)); [EOL]     assertEquals(7, StringUtils.lastIndexOf("aabaabaa", 'a', 8)); [EOL]     assertEquals(5, StringUtils.lastIndexOf("aabaabaa", 'b', 8)); [EOL]     assertEquals(2, StringUtils.lastIndexOf("aabaabaa", 'b', 3)); [EOL]     assertEquals(5, StringUtils.lastIndexOf("aabaabaa", 'b', 9)); [EOL]     assertEquals(-1, StringUtils.lastIndexOf("aabaabaa", 'b', -1)); [EOL]     assertEquals(0, StringUtils.lastIndexOf("aabaabaa", 'a', 0)); [EOL]     assertEquals(2, StringUtils.lastIndexOf(new StringBuilder("aabaabaa"), 'b', 2)); [EOL] }
@Test [EOL] public void testLastIndexOf_charInt() { [EOL]     assertEquals(-1, StringUtils.lastIndexOf(null, ' ', 0)); [EOL]     assertEquals(-1, StringUtils.lastIndexOf(null, ' ', -1)); [EOL]     assertEquals(-1, StringUtils.lastIndexOf("", ' ', 0)); [EOL]     assertEquals(-1, StringUtils.lastIndexOf("", ' ', -1)); [EOL]     assertEquals(7, StringUtils.lastIndexOf("aabaabaa", 'a', 8)); [EOL]     assertEquals(5, StringUtils.lastIndexOf("aabaabaa", 'b', 8)); [EOL]     assertEquals(2, StringUtils.lastIndexOf("aabaabaa", 'b', 3)); [EOL]     assertEquals(5, StringUtils.lastIndexOf("aabaabaa", 'b', 9)); [EOL]     assertEquals(-1, StringUtils.lastIndexOf("aabaabaa", 'b', -1)); [EOL]     assertEquals(0, StringUtils.lastIndexOf("aabaabaa", 'a', 0)); [EOL]     assertEquals(2, StringUtils.lastIndexOf(new StringBuilder("aabaabaa"), 'b', 2)); [EOL] }
@Test [EOL] public void testLastIndexOf_charInt() { [EOL]     assertEquals(-1, StringUtils.lastIndexOf(null, ' ', 0)); [EOL]     assertEquals(-1, StringUtils.lastIndexOf(null, ' ', -1)); [EOL]     assertEquals(-1, StringUtils.lastIndexOf("", ' ', 0)); [EOL]     assertEquals(-1, StringUtils.lastIndexOf("", ' ', -1)); [EOL]     assertEquals(7, StringUtils.lastIndexOf("aabaabaa", 'a', 8)); [EOL]     assertEquals(5, StringUtils.lastIndexOf("aabaabaa", 'b', 8)); [EOL]     assertEquals(2, StringUtils.lastIndexOf("aabaabaa", 'b', 3)); [EOL]     assertEquals(5, StringUtils.lastIndexOf("aabaabaa", 'b', 9)); [EOL]     assertEquals(-1, StringUtils.lastIndexOf("aabaabaa", 'b', -1)); [EOL]     assertEquals(0, StringUtils.lastIndexOf("aabaabaa", 'a', 0)); [EOL]     assertEquals(2, StringUtils.lastIndexOf(new StringBuilder("aabaabaa"), 'b', 2)); [EOL] }
@Test [EOL] public void testLastIndexOf_charInt() { [EOL]     assertEquals(-1, StringUtils.lastIndexOf(null, ' ', 0)); [EOL]     assertEquals(-1, StringUtils.lastIndexOf(null, ' ', -1)); [EOL]     assertEquals(-1, StringUtils.lastIndexOf("", ' ', 0)); [EOL]     assertEquals(-1, StringUtils.lastIndexOf("", ' ', -1)); [EOL]     assertEquals(7, StringUtils.lastIndexOf("aabaabaa", 'a', 8)); [EOL]     assertEquals(5, StringUtils.lastIndexOf("aabaabaa", 'b', 8)); [EOL]     assertEquals(2, StringUtils.lastIndexOf("aabaabaa", 'b', 3)); [EOL]     assertEquals(5, StringUtils.lastIndexOf("aabaabaa", 'b', 9)); [EOL]     assertEquals(-1, StringUtils.lastIndexOf("aabaabaa", 'b', -1)); [EOL]     assertEquals(0, StringUtils.lastIndexOf("aabaabaa", 'a', 0)); [EOL]     assertEquals(2, StringUtils.lastIndexOf(new StringBuilder("aabaabaa"), 'b', 2)); [EOL] }
@Test [EOL] public void testLastIndexOf_charInt() { [EOL]     assertEquals(-1, StringUtils.lastIndexOf(null, ' ', 0)); [EOL]     assertEquals(-1, StringUtils.lastIndexOf(null, ' ', -1)); [EOL]     assertEquals(-1, StringUtils.lastIndexOf("", ' ', 0)); [EOL]     assertEquals(-1, StringUtils.lastIndexOf("", ' ', -1)); [EOL]     assertEquals(7, StringUtils.lastIndexOf("aabaabaa", 'a', 8)); [EOL]     assertEquals(5, StringUtils.lastIndexOf("aabaabaa", 'b', 8)); [EOL]     assertEquals(2, StringUtils.lastIndexOf("aabaabaa", 'b', 3)); [EOL]     assertEquals(5, StringUtils.lastIndexOf("aabaabaa", 'b', 9)); [EOL]     assertEquals(-1, StringUtils.lastIndexOf("aabaabaa", 'b', -1)); [EOL]     assertEquals(0, StringUtils.lastIndexOf("aabaabaa", 'a', 0)); [EOL]     assertEquals(2, StringUtils.lastIndexOf(new StringBuilder("aabaabaa"), 'b', 2)); [EOL] }
@Test [EOL] public void testContainsIgnoreCase_StringString() { [EOL]     assertFalse(StringUtils.containsIgnoreCase(null, null)); [EOL]     assertFalse(StringUtils.containsIgnoreCase(null, "")); [EOL]     assertFalse(StringUtils.containsIgnoreCase(null, "a")); [EOL]     assertFalse(StringUtils.containsIgnoreCase(null, "abc")); [EOL]     assertFalse(StringUtils.containsIgnoreCase("", null)); [EOL]     assertFalse(StringUtils.containsIgnoreCase("a", null)); [EOL]     assertFalse(StringUtils.containsIgnoreCase("abc", null)); [EOL]     assertTrue(StringUtils.containsIgnoreCase("", "")); [EOL]     assertTrue(StringUtils.containsIgnoreCase("a", "")); [EOL]     assertTrue(StringUtils.containsIgnoreCase("abc", "")); [EOL]     assertFalse(StringUtils.containsIgnoreCase("", "a")); [EOL]     assertTrue(StringUtils.containsIgnoreCase("a", "a")); [EOL]     assertTrue(StringUtils.containsIgnoreCase("abc", "a")); [EOL]     assertFalse(StringUtils.containsIgnoreCase("", "A")); [EOL]     assertTrue(StringUtils.containsIgnoreCase("a", "A")); [EOL]     assertTrue(StringUtils.containsIgnoreCase("abc", "A")); [EOL]     assertFalse(StringUtils.containsIgnoreCase("", "abc")); [EOL]     assertFalse(StringUtils.containsIgnoreCase("a", "abc")); [EOL]     assertTrue(StringUtils.containsIgnoreCase("xabcz", "abc")); [EOL]     assertFalse(StringUtils.containsIgnoreCase("", "ABC")); [EOL]     assertFalse(StringUtils.containsIgnoreCase("a", "ABC")); [EOL]     assertTrue(StringUtils.containsIgnoreCase("xabcz", "ABC")); [EOL] }
@Test [EOL] public void testContainsIgnoreCase_StringString() { [EOL]     assertFalse(StringUtils.containsIgnoreCase(null, null)); [EOL]     assertFalse(StringUtils.containsIgnoreCase(null, "")); [EOL]     assertFalse(StringUtils.containsIgnoreCase(null, "a")); [EOL]     assertFalse(StringUtils.containsIgnoreCase(null, "abc")); [EOL]     assertFalse(StringUtils.containsIgnoreCase("", null)); [EOL]     assertFalse(StringUtils.containsIgnoreCase("a", null)); [EOL]     assertFalse(StringUtils.containsIgnoreCase("abc", null)); [EOL]     assertTrue(StringUtils.containsIgnoreCase("", "")); [EOL]     assertTrue(StringUtils.containsIgnoreCase("a", "")); [EOL]     assertTrue(StringUtils.containsIgnoreCase("abc", "")); [EOL]     assertFalse(StringUtils.containsIgnoreCase("", "a")); [EOL]     assertTrue(StringUtils.containsIgnoreCase("a", "a")); [EOL]     assertTrue(StringUtils.containsIgnoreCase("abc", "a")); [EOL]     assertFalse(StringUtils.containsIgnoreCase("", "A")); [EOL]     assertTrue(StringUtils.containsIgnoreCase("a", "A")); [EOL]     assertTrue(StringUtils.containsIgnoreCase("abc", "A")); [EOL]     assertFalse(StringUtils.containsIgnoreCase("", "abc")); [EOL]     assertFalse(StringUtils.containsIgnoreCase("a", "abc")); [EOL]     assertTrue(StringUtils.containsIgnoreCase("xabcz", "abc")); [EOL]     assertFalse(StringUtils.containsIgnoreCase("", "ABC")); [EOL]     assertFalse(StringUtils.containsIgnoreCase("a", "ABC")); [EOL]     assertTrue(StringUtils.containsIgnoreCase("xabcz", "ABC")); [EOL] }
@Test [EOL] public void testContainsIgnoreCase_StringString() { [EOL]     assertFalse(StringUtils.containsIgnoreCase(null, null)); [EOL]     assertFalse(StringUtils.containsIgnoreCase(null, "")); [EOL]     assertFalse(StringUtils.containsIgnoreCase(null, "a")); [EOL]     assertFalse(StringUtils.containsIgnoreCase(null, "abc")); [EOL]     assertFalse(StringUtils.containsIgnoreCase("", null)); [EOL]     assertFalse(StringUtils.containsIgnoreCase("a", null)); [EOL]     assertFalse(StringUtils.containsIgnoreCase("abc", null)); [EOL]     assertTrue(StringUtils.containsIgnoreCase("", "")); [EOL]     assertTrue(StringUtils.containsIgnoreCase("a", "")); [EOL]     assertTrue(StringUtils.containsIgnoreCase("abc", "")); [EOL]     assertFalse(StringUtils.containsIgnoreCase("", "a")); [EOL]     assertTrue(StringUtils.containsIgnoreCase("a", "a")); [EOL]     assertTrue(StringUtils.containsIgnoreCase("abc", "a")); [EOL]     assertFalse(StringUtils.containsIgnoreCase("", "A")); [EOL]     assertTrue(StringUtils.containsIgnoreCase("a", "A")); [EOL]     assertTrue(StringUtils.containsIgnoreCase("abc", "A")); [EOL]     assertFalse(StringUtils.containsIgnoreCase("", "abc")); [EOL]     assertFalse(StringUtils.containsIgnoreCase("a", "abc")); [EOL]     assertTrue(StringUtils.containsIgnoreCase("xabcz", "abc")); [EOL]     assertFalse(StringUtils.containsIgnoreCase("", "ABC")); [EOL]     assertFalse(StringUtils.containsIgnoreCase("a", "ABC")); [EOL]     assertTrue(StringUtils.containsIgnoreCase("xabcz", "ABC")); [EOL] }
@Test [EOL] public void testContainsIgnoreCase_StringString() { [EOL]     assertFalse(StringUtils.containsIgnoreCase(null, null)); [EOL]     assertFalse(StringUtils.containsIgnoreCase(null, "")); [EOL]     assertFalse(StringUtils.containsIgnoreCase(null, "a")); [EOL]     assertFalse(StringUtils.containsIgnoreCase(null, "abc")); [EOL]     assertFalse(StringUtils.containsIgnoreCase("", null)); [EOL]     assertFalse(StringUtils.containsIgnoreCase("a", null)); [EOL]     assertFalse(StringUtils.containsIgnoreCase("abc", null)); [EOL]     assertTrue(StringUtils.containsIgnoreCase("", "")); [EOL]     assertTrue(StringUtils.containsIgnoreCase("a", "")); [EOL]     assertTrue(StringUtils.containsIgnoreCase("abc", "")); [EOL]     assertFalse(StringUtils.containsIgnoreCase("", "a")); [EOL]     assertTrue(StringUtils.containsIgnoreCase("a", "a")); [EOL]     assertTrue(StringUtils.containsIgnoreCase("abc", "a")); [EOL]     assertFalse(StringUtils.containsIgnoreCase("", "A")); [EOL]     assertTrue(StringUtils.containsIgnoreCase("a", "A")); [EOL]     assertTrue(StringUtils.containsIgnoreCase("abc", "A")); [EOL]     assertFalse(StringUtils.containsIgnoreCase("", "abc")); [EOL]     assertFalse(StringUtils.containsIgnoreCase("a", "abc")); [EOL]     assertTrue(StringUtils.containsIgnoreCase("xabcz", "abc")); [EOL]     assertFalse(StringUtils.containsIgnoreCase("", "ABC")); [EOL]     assertFalse(StringUtils.containsIgnoreCase("a", "ABC")); [EOL]     assertTrue(StringUtils.containsIgnoreCase("xabcz", "ABC")); [EOL] }
@Test [EOL] public void testContainsIgnoreCase_StringString() { [EOL]     assertFalse(StringUtils.containsIgnoreCase(null, null)); [EOL]     assertFalse(StringUtils.containsIgnoreCase(null, "")); [EOL]     assertFalse(StringUtils.containsIgnoreCase(null, "a")); [EOL]     assertFalse(StringUtils.containsIgnoreCase(null, "abc")); [EOL]     assertFalse(StringUtils.containsIgnoreCase("", null)); [EOL]     assertFalse(StringUtils.containsIgnoreCase("a", null)); [EOL]     assertFalse(StringUtils.containsIgnoreCase("abc", null)); [EOL]     assertTrue(StringUtils.containsIgnoreCase("", "")); [EOL]     assertTrue(StringUtils.containsIgnoreCase("a", "")); [EOL]     assertTrue(StringUtils.containsIgnoreCase("abc", "")); [EOL]     assertFalse(StringUtils.containsIgnoreCase("", "a")); [EOL]     assertTrue(StringUtils.containsIgnoreCase("a", "a")); [EOL]     assertTrue(StringUtils.containsIgnoreCase("abc", "a")); [EOL]     assertFalse(StringUtils.containsIgnoreCase("", "A")); [EOL]     assertTrue(StringUtils.containsIgnoreCase("a", "A")); [EOL]     assertTrue(StringUtils.containsIgnoreCase("abc", "A")); [EOL]     assertFalse(StringUtils.containsIgnoreCase("", "abc")); [EOL]     assertFalse(StringUtils.containsIgnoreCase("a", "abc")); [EOL]     assertTrue(StringUtils.containsIgnoreCase("xabcz", "abc")); [EOL]     assertFalse(StringUtils.containsIgnoreCase("", "ABC")); [EOL]     assertFalse(StringUtils.containsIgnoreCase("a", "ABC")); [EOL]     assertTrue(StringUtils.containsIgnoreCase("xabcz", "ABC")); [EOL] }
@Test [EOL] public void testContainsIgnoreCase_StringString() { [EOL]     assertFalse(StringUtils.containsIgnoreCase(null, null)); [EOL]     assertFalse(StringUtils.containsIgnoreCase(null, "")); [EOL]     assertFalse(StringUtils.containsIgnoreCase(null, "a")); [EOL]     assertFalse(StringUtils.containsIgnoreCase(null, "abc")); [EOL]     assertFalse(StringUtils.containsIgnoreCase("", null)); [EOL]     assertFalse(StringUtils.containsIgnoreCase("a", null)); [EOL]     assertFalse(StringUtils.containsIgnoreCase("abc", null)); [EOL]     assertTrue(StringUtils.containsIgnoreCase("", "")); [EOL]     assertTrue(StringUtils.containsIgnoreCase("a", "")); [EOL]     assertTrue(StringUtils.containsIgnoreCase("abc", "")); [EOL]     assertFalse(StringUtils.containsIgnoreCase("", "a")); [EOL]     assertTrue(StringUtils.containsIgnoreCase("a", "a")); [EOL]     assertTrue(StringUtils.containsIgnoreCase("abc", "a")); [EOL]     assertFalse(StringUtils.containsIgnoreCase("", "A")); [EOL]     assertTrue(StringUtils.containsIgnoreCase("a", "A")); [EOL]     assertTrue(StringUtils.containsIgnoreCase("abc", "A")); [EOL]     assertFalse(StringUtils.containsIgnoreCase("", "abc")); [EOL]     assertFalse(StringUtils.containsIgnoreCase("a", "abc")); [EOL]     assertTrue(StringUtils.containsIgnoreCase("xabcz", "abc")); [EOL]     assertFalse(StringUtils.containsIgnoreCase("", "ABC")); [EOL]     assertFalse(StringUtils.containsIgnoreCase("a", "ABC")); [EOL]     assertTrue(StringUtils.containsIgnoreCase("xabcz", "ABC")); [EOL] }
@Test [EOL] public void testIndexOfAny_StringStringWithSupplementaryChars() { [EOL]     assertEquals(0, StringUtils.indexOfAny(CharU20000 + CharU20001, CharU20000)); [EOL]     assertEquals(2, StringUtils.indexOfAny(CharU20000 + CharU20001, CharU20001)); [EOL]     assertEquals(0, StringUtils.indexOfAny(CharU20000, CharU20000)); [EOL]     assertEquals(-1, StringUtils.indexOfAny(CharU20000, CharU20001)); [EOL] }
@Test [EOL] public void testIndexOfAny_StringStringWithSupplementaryChars() { [EOL]     assertEquals(0, StringUtils.indexOfAny(CharU20000 + CharU20001, CharU20000)); [EOL]     assertEquals(2, StringUtils.indexOfAny(CharU20000 + CharU20001, CharU20001)); [EOL]     assertEquals(0, StringUtils.indexOfAny(CharU20000, CharU20000)); [EOL]     assertEquals(-1, StringUtils.indexOfAny(CharU20000, CharU20001)); [EOL] }
@Test [EOL] public void testIndexOfAnyBut_StringCharArray() { [EOL]     assertEquals(-1, StringUtils.indexOfAnyBut(null, (char[]) null)); [EOL]     assertEquals(-1, StringUtils.indexOfAnyBut(null, new char[0])); [EOL]     assertEquals(-1, StringUtils.indexOfAnyBut(null, new char[] { 'a', 'b' })); [EOL]     assertEquals(-1, StringUtils.indexOfAnyBut("", (char[]) null)); [EOL]     assertEquals(-1, StringUtils.indexOfAnyBut("", new char[0])); [EOL]     assertEquals(-1, StringUtils.indexOfAnyBut("", new char[] { 'a', 'b' })); [EOL]     assertEquals(-1, StringUtils.indexOfAnyBut("zzabyycdxx", (char[]) null)); [EOL]     assertEquals(-1, StringUtils.indexOfAnyBut("zzabyycdxx", new char[0])); [EOL]     assertEquals(3, StringUtils.indexOfAnyBut("zzabyycdxx", new char[] { 'z', 'a' })); [EOL]     assertEquals(0, StringUtils.indexOfAnyBut("zzabyycdxx", new char[] { 'b', 'y' })); [EOL]     assertEquals(-1, StringUtils.indexOfAnyBut("aba", new char[] { 'a', 'b' })); [EOL]     assertEquals(0, StringUtils.indexOfAnyBut("aba", new char[] { 'z' })); [EOL] }
@Test [EOL] public void testIndexOfAnyBut_StringCharArray() { [EOL]     assertEquals(-1, StringUtils.indexOfAnyBut(null, (char[]) null)); [EOL]     assertEquals(-1, StringUtils.indexOfAnyBut(null, new char[0])); [EOL]     assertEquals(-1, StringUtils.indexOfAnyBut(null, new char[] { 'a', 'b' })); [EOL]     assertEquals(-1, StringUtils.indexOfAnyBut("", (char[]) null)); [EOL]     assertEquals(-1, StringUtils.indexOfAnyBut("", new char[0])); [EOL]     assertEquals(-1, StringUtils.indexOfAnyBut("", new char[] { 'a', 'b' })); [EOL]     assertEquals(-1, StringUtils.indexOfAnyBut("zzabyycdxx", (char[]) null)); [EOL]     assertEquals(-1, StringUtils.indexOfAnyBut("zzabyycdxx", new char[0])); [EOL]     assertEquals(3, StringUtils.indexOfAnyBut("zzabyycdxx", new char[] { 'z', 'a' })); [EOL]     assertEquals(0, StringUtils.indexOfAnyBut("zzabyycdxx", new char[] { 'b', 'y' })); [EOL]     assertEquals(-1, StringUtils.indexOfAnyBut("aba", new char[] { 'a', 'b' })); [EOL]     assertEquals(0, StringUtils.indexOfAnyBut("aba", new char[] { 'z' })); [EOL] }
@Test [EOL] public void testIndexOfAnyBut_StringString() { [EOL]     assertEquals(-1, StringUtils.indexOfAnyBut(null, (String) null)); [EOL]     assertEquals(-1, StringUtils.indexOfAnyBut(null, "")); [EOL]     assertEquals(-1, StringUtils.indexOfAnyBut(null, "ab")); [EOL]     assertEquals(-1, StringUtils.indexOfAnyBut("", (String) null)); [EOL]     assertEquals(-1, StringUtils.indexOfAnyBut("", "")); [EOL]     assertEquals(-1, StringUtils.indexOfAnyBut("", "ab")); [EOL]     assertEquals(-1, StringUtils.indexOfAnyBut("zzabyycdxx", (String) null)); [EOL]     assertEquals(-1, StringUtils.indexOfAnyBut("zzabyycdxx", "")); [EOL]     assertEquals(3, StringUtils.indexOfAnyBut("zzabyycdxx", "za")); [EOL]     assertEquals(0, StringUtils.indexOfAnyBut("zzabyycdxx", "by")); [EOL]     assertEquals(0, StringUtils.indexOfAnyBut("ab", "z")); [EOL] }
@Test [EOL] public void testContainsOnly_CharArray() { [EOL]     final String str1 = "a"; [EOL]     final String str2 = "b"; [EOL]     final String str3 = "ab"; [EOL]     final char[] chars1 = { 'b' }; [EOL]     final char[] chars2 = { 'a' }; [EOL]     final char[] chars3 = { 'a', 'b' }; [EOL]     final char[] emptyChars = new char[0]; [EOL]     assertFalse(StringUtils.containsOnly(null, (char[]) null)); [EOL]     assertFalse(StringUtils.containsOnly("", (char[]) null)); [EOL]     assertFalse(StringUtils.containsOnly(null, emptyChars)); [EOL]     assertFalse(StringUtils.containsOnly(str1, emptyChars)); [EOL]     assertTrue(StringUtils.containsOnly("", emptyChars)); [EOL]     assertTrue(StringUtils.containsOnly("", chars1)); [EOL]     assertFalse(StringUtils.containsOnly(str1, chars1)); [EOL]     assertTrue(StringUtils.containsOnly(str1, chars2)); [EOL]     assertTrue(StringUtils.containsOnly(str1, chars3)); [EOL]     assertTrue(StringUtils.containsOnly(str2, chars1)); [EOL]     assertFalse(StringUtils.containsOnly(str2, chars2)); [EOL]     assertTrue(StringUtils.containsOnly(str2, chars3)); [EOL]     assertFalse(StringUtils.containsOnly(str3, chars1)); [EOL]     assertFalse(StringUtils.containsOnly(str3, chars2)); [EOL]     assertTrue(StringUtils.containsOnly(str3, chars3)); [EOL] }
@Test [EOL] public void testContainsOnly_CharArray() { [EOL]     final String str1 = "a"; [EOL]     final String str2 = "b"; [EOL]     final String str3 = "ab"; [EOL]     final char[] chars1 = { 'b' }; [EOL]     final char[] chars2 = { 'a' }; [EOL]     final char[] chars3 = { 'a', 'b' }; [EOL]     final char[] emptyChars = new char[0]; [EOL]     assertFalse(StringUtils.containsOnly(null, (char[]) null)); [EOL]     assertFalse(StringUtils.containsOnly("", (char[]) null)); [EOL]     assertFalse(StringUtils.containsOnly(null, emptyChars)); [EOL]     assertFalse(StringUtils.containsOnly(str1, emptyChars)); [EOL]     assertTrue(StringUtils.containsOnly("", emptyChars)); [EOL]     assertTrue(StringUtils.containsOnly("", chars1)); [EOL]     assertFalse(StringUtils.containsOnly(str1, chars1)); [EOL]     assertTrue(StringUtils.containsOnly(str1, chars2)); [EOL]     assertTrue(StringUtils.containsOnly(str1, chars3)); [EOL]     assertTrue(StringUtils.containsOnly(str2, chars1)); [EOL]     assertFalse(StringUtils.containsOnly(str2, chars2)); [EOL]     assertTrue(StringUtils.containsOnly(str2, chars3)); [EOL]     assertFalse(StringUtils.containsOnly(str3, chars1)); [EOL]     assertFalse(StringUtils.containsOnly(str3, chars2)); [EOL]     assertTrue(StringUtils.containsOnly(str3, chars3)); [EOL] }
@Test [EOL] public void testContainsOnly_CharArray() { [EOL]     final String str1 = "a"; [EOL]     final String str2 = "b"; [EOL]     final String str3 = "ab"; [EOL]     final char[] chars1 = { 'b' }; [EOL]     final char[] chars2 = { 'a' }; [EOL]     final char[] chars3 = { 'a', 'b' }; [EOL]     final char[] emptyChars = new char[0]; [EOL]     assertFalse(StringUtils.containsOnly(null, (char[]) null)); [EOL]     assertFalse(StringUtils.containsOnly("", (char[]) null)); [EOL]     assertFalse(StringUtils.containsOnly(null, emptyChars)); [EOL]     assertFalse(StringUtils.containsOnly(str1, emptyChars)); [EOL]     assertTrue(StringUtils.containsOnly("", emptyChars)); [EOL]     assertTrue(StringUtils.containsOnly("", chars1)); [EOL]     assertFalse(StringUtils.containsOnly(str1, chars1)); [EOL]     assertTrue(StringUtils.containsOnly(str1, chars2)); [EOL]     assertTrue(StringUtils.containsOnly(str1, chars3)); [EOL]     assertTrue(StringUtils.containsOnly(str2, chars1)); [EOL]     assertFalse(StringUtils.containsOnly(str2, chars2)); [EOL]     assertTrue(StringUtils.containsOnly(str2, chars3)); [EOL]     assertFalse(StringUtils.containsOnly(str3, chars1)); [EOL]     assertFalse(StringUtils.containsOnly(str3, chars2)); [EOL]     assertTrue(StringUtils.containsOnly(str3, chars3)); [EOL] }
@Test [EOL] public void testContainsOnly_CharArray() { [EOL]     final String str1 = "a"; [EOL]     final String str2 = "b"; [EOL]     final String str3 = "ab"; [EOL]     final char[] chars1 = { 'b' }; [EOL]     final char[] chars2 = { 'a' }; [EOL]     final char[] chars3 = { 'a', 'b' }; [EOL]     final char[] emptyChars = new char[0]; [EOL]     assertFalse(StringUtils.containsOnly(null, (char[]) null)); [EOL]     assertFalse(StringUtils.containsOnly("", (char[]) null)); [EOL]     assertFalse(StringUtils.containsOnly(null, emptyChars)); [EOL]     assertFalse(StringUtils.containsOnly(str1, emptyChars)); [EOL]     assertTrue(StringUtils.containsOnly("", emptyChars)); [EOL]     assertTrue(StringUtils.containsOnly("", chars1)); [EOL]     assertFalse(StringUtils.containsOnly(str1, chars1)); [EOL]     assertTrue(StringUtils.containsOnly(str1, chars2)); [EOL]     assertTrue(StringUtils.containsOnly(str1, chars3)); [EOL]     assertTrue(StringUtils.containsOnly(str2, chars1)); [EOL]     assertFalse(StringUtils.containsOnly(str2, chars2)); [EOL]     assertTrue(StringUtils.containsOnly(str2, chars3)); [EOL]     assertFalse(StringUtils.containsOnly(str3, chars1)); [EOL]     assertFalse(StringUtils.containsOnly(str3, chars2)); [EOL]     assertTrue(StringUtils.containsOnly(str3, chars3)); [EOL] }
@Test [EOL] public void testContainsOnly_CharArray() { [EOL]     final String str1 = "a"; [EOL]     final String str2 = "b"; [EOL]     final String str3 = "ab"; [EOL]     final char[] chars1 = { 'b' }; [EOL]     final char[] chars2 = { 'a' }; [EOL]     final char[] chars3 = { 'a', 'b' }; [EOL]     final char[] emptyChars = new char[0]; [EOL]     assertFalse(StringUtils.containsOnly(null, (char[]) null)); [EOL]     assertFalse(StringUtils.containsOnly("", (char[]) null)); [EOL]     assertFalse(StringUtils.containsOnly(null, emptyChars)); [EOL]     assertFalse(StringUtils.containsOnly(str1, emptyChars)); [EOL]     assertTrue(StringUtils.containsOnly("", emptyChars)); [EOL]     assertTrue(StringUtils.containsOnly("", chars1)); [EOL]     assertFalse(StringUtils.containsOnly(str1, chars1)); [EOL]     assertTrue(StringUtils.containsOnly(str1, chars2)); [EOL]     assertTrue(StringUtils.containsOnly(str1, chars3)); [EOL]     assertTrue(StringUtils.containsOnly(str2, chars1)); [EOL]     assertFalse(StringUtils.containsOnly(str2, chars2)); [EOL]     assertTrue(StringUtils.containsOnly(str2, chars3)); [EOL]     assertFalse(StringUtils.containsOnly(str3, chars1)); [EOL]     assertFalse(StringUtils.containsOnly(str3, chars2)); [EOL]     assertTrue(StringUtils.containsOnly(str3, chars3)); [EOL] }
@Test [EOL] public void testContainsOnly_String() { [EOL]     final String str1 = "a"; [EOL]     final String str2 = "b"; [EOL]     final String str3 = "ab"; [EOL]     final String chars1 = "b"; [EOL]     final String chars2 = "a"; [EOL]     final String chars3 = "ab"; [EOL]     assertFalse(StringUtils.containsOnly(null, (String) null)); [EOL]     assertFalse(StringUtils.containsOnly("", (String) null)); [EOL]     assertFalse(StringUtils.containsOnly(null, "")); [EOL]     assertFalse(StringUtils.containsOnly(str1, "")); [EOL]     assertTrue(StringUtils.containsOnly("", "")); [EOL]     assertTrue(StringUtils.containsOnly("", chars1)); [EOL]     assertFalse(StringUtils.containsOnly(str1, chars1)); [EOL]     assertTrue(StringUtils.containsOnly(str1, chars2)); [EOL]     assertTrue(StringUtils.containsOnly(str1, chars3)); [EOL]     assertTrue(StringUtils.containsOnly(str2, chars1)); [EOL]     assertFalse(StringUtils.containsOnly(str2, chars2)); [EOL]     assertTrue(StringUtils.containsOnly(str2, chars3)); [EOL]     assertFalse(StringUtils.containsOnly(str3, chars1)); [EOL]     assertFalse(StringUtils.containsOnly(str3, chars2)); [EOL]     assertTrue(StringUtils.containsOnly(str3, chars3)); [EOL] }
@Test [EOL] public void testEscapeSurrogatePairs() throws Exception { [EOL]     assertEquals("\uD83D\uDE30", StringEscapeUtils.escapeCsv("\uD83D\uDE30")); [EOL]     assertEquals("\uD800\uDC00", StringEscapeUtils.escapeCsv("\uD800\uDC00")); [EOL]     assertEquals("\uD834\uDD1E", StringEscapeUtils.escapeCsv("\uD834\uDD1E")); [EOL]     assertEquals("\uDBFF\uDFFD", StringEscapeUtils.escapeCsv("\uDBFF\uDFFD")); [EOL]     assertEquals("\uDBFF\uDFFD", StringEscapeUtils.escapeHtml3("\uDBFF\uDFFD")); [EOL]     assertEquals("\uDBFF\uDFFD", StringEscapeUtils.escapeHtml4("\uDBFF\uDFFD")); [EOL]     assertEquals("\uDBFF\uDFFD", StringEscapeUtils.escapeXml("\uDBFF\uDFFD")); [EOL] }
@Test [EOL] public void testEscapeSurrogatePairs() throws Exception { [EOL]     assertEquals("\uD83D\uDE30", StringEscapeUtils.escapeCsv("\uD83D\uDE30")); [EOL]     assertEquals("\uD800\uDC00", StringEscapeUtils.escapeCsv("\uD800\uDC00")); [EOL]     assertEquals("\uD834\uDD1E", StringEscapeUtils.escapeCsv("\uD834\uDD1E")); [EOL]     assertEquals("\uDBFF\uDFFD", StringEscapeUtils.escapeCsv("\uDBFF\uDFFD")); [EOL]     assertEquals("\uDBFF\uDFFD", StringEscapeUtils.escapeHtml3("\uDBFF\uDFFD")); [EOL]     assertEquals("\uDBFF\uDFFD", StringEscapeUtils.escapeHtml4("\uDBFF\uDFFD")); [EOL]     assertEquals("\uDBFF\uDFFD", StringEscapeUtils.escapeXml("\uDBFF\uDFFD")); [EOL] }
@Test [EOL] public void testEscapeSurrogatePairs() throws Exception { [EOL]     assertEquals("\uD83D\uDE30", StringEscapeUtils.escapeCsv("\uD83D\uDE30")); [EOL]     assertEquals("\uD800\uDC00", StringEscapeUtils.escapeCsv("\uD800\uDC00")); [EOL]     assertEquals("\uD834\uDD1E", StringEscapeUtils.escapeCsv("\uD834\uDD1E")); [EOL]     assertEquals("\uDBFF\uDFFD", StringEscapeUtils.escapeCsv("\uDBFF\uDFFD")); [EOL]     assertEquals("\uDBFF\uDFFD", StringEscapeUtils.escapeHtml3("\uDBFF\uDFFD")); [EOL]     assertEquals("\uDBFF\uDFFD", StringEscapeUtils.escapeHtml4("\uDBFF\uDFFD")); [EOL]     assertEquals("\uDBFF\uDFFD", StringEscapeUtils.escapeXml("\uDBFF\uDFFD")); [EOL] }
@Test [EOL] public void testEscapeSurrogatePairs() throws Exception { [EOL]     assertEquals("\uD83D\uDE30", StringEscapeUtils.escapeCsv("\uD83D\uDE30")); [EOL]     assertEquals("\uD800\uDC00", StringEscapeUtils.escapeCsv("\uD800\uDC00")); [EOL]     assertEquals("\uD834\uDD1E", StringEscapeUtils.escapeCsv("\uD834\uDD1E")); [EOL]     assertEquals("\uDBFF\uDFFD", StringEscapeUtils.escapeCsv("\uDBFF\uDFFD")); [EOL]     assertEquals("\uDBFF\uDFFD", StringEscapeUtils.escapeHtml3("\uDBFF\uDFFD")); [EOL]     assertEquals("\uDBFF\uDFFD", StringEscapeUtils.escapeHtml4("\uDBFF\uDFFD")); [EOL]     assertEquals("\uDBFF\uDFFD", StringEscapeUtils.escapeXml("\uDBFF\uDFFD")); [EOL] }
@Test [EOL] public void testEscapeSurrogatePairs() throws Exception { [EOL]     assertEquals("\uD83D\uDE30", StringEscapeUtils.escapeCsv("\uD83D\uDE30")); [EOL]     assertEquals("\uD800\uDC00", StringEscapeUtils.escapeCsv("\uD800\uDC00")); [EOL]     assertEquals("\uD834\uDD1E", StringEscapeUtils.escapeCsv("\uD834\uDD1E")); [EOL]     assertEquals("\uDBFF\uDFFD", StringEscapeUtils.escapeCsv("\uDBFF\uDFFD")); [EOL]     assertEquals("\uDBFF\uDFFD", StringEscapeUtils.escapeHtml3("\uDBFF\uDFFD")); [EOL]     assertEquals("\uDBFF\uDFFD", StringEscapeUtils.escapeHtml4("\uDBFF\uDFFD")); [EOL]     assertEquals("\uDBFF\uDFFD", StringEscapeUtils.escapeXml("\uDBFF\uDFFD")); [EOL] }
@Test [EOL] public void testEscapeSurrogatePairs() throws Exception { [EOL]     assertEquals("\uD83D\uDE30", StringEscapeUtils.escapeCsv("\uD83D\uDE30")); [EOL]     assertEquals("\uD800\uDC00", StringEscapeUtils.escapeCsv("\uD800\uDC00")); [EOL]     assertEquals("\uD834\uDD1E", StringEscapeUtils.escapeCsv("\uD834\uDD1E")); [EOL]     assertEquals("\uDBFF\uDFFD", StringEscapeUtils.escapeCsv("\uDBFF\uDFFD")); [EOL]     assertEquals("\uDBFF\uDFFD", StringEscapeUtils.escapeHtml3("\uDBFF\uDFFD")); [EOL]     assertEquals("\uDBFF\uDFFD", StringEscapeUtils.escapeHtml4("\uDBFF\uDFFD")); [EOL]     assertEquals("\uDBFF\uDFFD", StringEscapeUtils.escapeXml("\uDBFF\uDFFD")); [EOL] }
@Test [EOL] public void testEscapeSurrogatePairs() throws Exception { [EOL]     assertEquals("\uD83D\uDE30", StringEscapeUtils.escapeCsv("\uD83D\uDE30")); [EOL]     assertEquals("\uD800\uDC00", StringEscapeUtils.escapeCsv("\uD800\uDC00")); [EOL]     assertEquals("\uD834\uDD1E", StringEscapeUtils.escapeCsv("\uD834\uDD1E")); [EOL]     assertEquals("\uDBFF\uDFFD", StringEscapeUtils.escapeCsv("\uDBFF\uDFFD")); [EOL]     assertEquals("\uDBFF\uDFFD", StringEscapeUtils.escapeHtml3("\uDBFF\uDFFD")); [EOL]     assertEquals("\uDBFF\uDFFD", StringEscapeUtils.escapeHtml4("\uDBFF\uDFFD")); [EOL]     assertEquals("\uDBFF\uDFFD", StringEscapeUtils.escapeXml("\uDBFF\uDFFD")); [EOL] }
@Test [EOL] public void testEscapeSurrogatePairs() throws Exception { [EOL]     assertEquals("\uD83D\uDE30", StringEscapeUtils.escapeCsv("\uD83D\uDE30")); [EOL]     assertEquals("\uD800\uDC00", StringEscapeUtils.escapeCsv("\uD800\uDC00")); [EOL]     assertEquals("\uD834\uDD1E", StringEscapeUtils.escapeCsv("\uD834\uDD1E")); [EOL]     assertEquals("\uDBFF\uDFFD", StringEscapeUtils.escapeCsv("\uDBFF\uDFFD")); [EOL]     assertEquals("\uDBFF\uDFFD", StringEscapeUtils.escapeHtml3("\uDBFF\uDFFD")); [EOL]     assertEquals("\uDBFF\uDFFD", StringEscapeUtils.escapeHtml4("\uDBFF\uDFFD")); [EOL]     assertEquals("\uDBFF\uDFFD", StringEscapeUtils.escapeXml("\uDBFF\uDFFD")); [EOL] }
@Test [EOL] public void testSubstring_StringIntInt() { [EOL]     assertEquals(null, StringUtils.substring(null, 0, 0)); [EOL]     assertEquals(null, StringUtils.substring(null, 1, 2)); [EOL]     assertEquals("", StringUtils.substring("", 0, 0)); [EOL]     assertEquals("", StringUtils.substring("", 1, 2)); [EOL]     assertEquals("", StringUtils.substring("", -2, -1)); [EOL]     assertEquals("", StringUtils.substring(SENTENCE, 8, 6)); [EOL]     assertEquals(FOO, StringUtils.substring(SENTENCE, 0, 3)); [EOL]     assertEquals("o", StringUtils.substring(SENTENCE, -9, 3)); [EOL]     assertEquals(FOO, StringUtils.substring(SENTENCE, 0, -8)); [EOL]     assertEquals("o", StringUtils.substring(SENTENCE, -9, -8)); [EOL]     assertEquals(SENTENCE, StringUtils.substring(SENTENCE, 0, 80)); [EOL]     assertEquals("", StringUtils.substring(SENTENCE, 2, 2)); [EOL]     assertEquals("b", StringUtils.substring("abc", -2, -1)); [EOL] }
@Test [EOL] public void testSubstringAfterLast_StringString() { [EOL]     assertEquals("baz", StringUtils.substringAfterLast("fooXXbarXXbaz", "XX")); [EOL]     assertEquals(null, StringUtils.substringAfterLast(null, null)); [EOL]     assertEquals(null, StringUtils.substringAfterLast(null, "")); [EOL]     assertEquals(null, StringUtils.substringAfterLast(null, "XX")); [EOL]     assertEquals("", StringUtils.substringAfterLast("", null)); [EOL]     assertEquals("", StringUtils.substringAfterLast("", "")); [EOL]     assertEquals("", StringUtils.substringAfterLast("", "a")); [EOL]     assertEquals("", StringUtils.substringAfterLast("foo", null)); [EOL]     assertEquals("", StringUtils.substringAfterLast("foo", "b")); [EOL]     assertEquals("t", StringUtils.substringAfterLast("foot", "o")); [EOL]     assertEquals("bc", StringUtils.substringAfterLast("abc", "a")); [EOL]     assertEquals("a", StringUtils.substringAfterLast("abcba", "b")); [EOL]     assertEquals("", StringUtils.substringAfterLast("abc", "c")); [EOL]     assertEquals("", StringUtils.substringAfterLast("", "d")); [EOL]     assertEquals("", StringUtils.substringAfterLast("abc", "")); [EOL] }
@Test [EOL] public void testSubstringsBetween_StringStringString() { [EOL]     String[] results = StringUtils.substringsBetween("[one], [two], [three]", "[", "]"); [EOL]     assertEquals(3, results.length); [EOL]     assertEquals("one", results[0]); [EOL]     assertEquals("two", results[1]); [EOL]     assertEquals("three", results[2]); [EOL]     results = StringUtils.substringsBetween("[one], [two], three", "[", "]"); [EOL]     assertEquals(2, results.length); [EOL]     assertEquals("one", results[0]); [EOL]     assertEquals("two", results[1]); [EOL]     results = StringUtils.substringsBetween("[one], [two], three]", "[", "]"); [EOL]     assertEquals(2, results.length); [EOL]     assertEquals("one", results[0]); [EOL]     assertEquals("two", results[1]); [EOL]     results = StringUtils.substringsBetween("[one], two], three]", "[", "]"); [EOL]     assertEquals(1, results.length); [EOL]     assertEquals("one", results[0]); [EOL]     results = StringUtils.substringsBetween("one], two], [three]", "[", "]"); [EOL]     assertEquals(1, results.length); [EOL]     assertEquals("three", results[0]); [EOL]     results = StringUtils.substringsBetween("aabhellobabnonba", "ab", "ba"); [EOL]     assertEquals(1, results.length); [EOL]     assertEquals("hello", results[0]); [EOL]     results = StringUtils.substringsBetween("one, two, three", "[", "]"); [EOL]     assertNull(results); [EOL]     results = StringUtils.substringsBetween("[one, two, three", "[", "]"); [EOL]     assertNull(results); [EOL]     results = StringUtils.substringsBetween("one, two, three]", "[", "]"); [EOL]     assertNull(results); [EOL]     results = StringUtils.substringsBetween("[one], [two], [three]", "[", null); [EOL]     assertNull(results); [EOL]     results = StringUtils.substringsBetween("[one], [two], [three]", null, "]"); [EOL]     assertNull(results); [EOL]     results = StringUtils.substringsBetween("[one], [two], [three]", "", ""); [EOL]     assertNull(results); [EOL]     results = StringUtils.substringsBetween(null, "[", "]"); [EOL]     assertNull(results); [EOL]     results = StringUtils.substringsBetween("", "[", "]"); [EOL]     assertEquals(0, results.length); [EOL] }
@Test [EOL] public void testSplitPreserveAllTokens_StringChar() { [EOL]     assertArrayEquals(null, StringUtils.splitPreserveAllTokens(null, '.')); [EOL]     assertEquals(0, StringUtils.splitPreserveAllTokens("", '.').length); [EOL]     String str = "a.b. c"; [EOL]     String[] res = StringUtils.splitPreserveAllTokens(str, '.'); [EOL]     assertEquals(3, res.length); [EOL]     assertEquals("a", res[0]); [EOL]     assertEquals("b", res[1]); [EOL]     assertEquals(" c", res[2]); [EOL]     str = "a.b.. c"; [EOL]     res = StringUtils.splitPreserveAllTokens(str, '.'); [EOL]     assertEquals(4, res.length); [EOL]     assertEquals("a", res[0]); [EOL]     assertEquals("b", res[1]); [EOL]     assertEquals("", res[2]); [EOL]     assertEquals(" c", res[3]); [EOL]     str = ".a."; [EOL]     res = StringUtils.splitPreserveAllTokens(str, '.'); [EOL]     assertEquals(3, res.length); [EOL]     assertEquals("", res[0]); [EOL]     assertEquals("a", res[1]); [EOL]     assertEquals("", res[2]); [EOL]     str = ".a.."; [EOL]     res = StringUtils.splitPreserveAllTokens(str, '.'); [EOL]     assertEquals(4, res.length); [EOL]     assertEquals("", res[0]); [EOL]     assertEquals("a", res[1]); [EOL]     assertEquals("", res[2]); [EOL]     assertEquals("", res[3]); [EOL]     str = "..a."; [EOL]     res = StringUtils.splitPreserveAllTokens(str, '.'); [EOL]     assertEquals(4, res.length); [EOL]     assertEquals("", res[0]); [EOL]     assertEquals("", res[1]); [EOL]     assertEquals("a", res[2]); [EOL]     assertEquals("", res[3]); [EOL]     str = "..a"; [EOL]     res = StringUtils.splitPreserveAllTokens(str, '.'); [EOL]     assertEquals(3, res.length); [EOL]     assertEquals("", res[0]); [EOL]     assertEquals("", res[1]); [EOL]     assertEquals("a", res[2]); [EOL]     str = "a b c"; [EOL]     res = StringUtils.splitPreserveAllTokens(str, ' '); [EOL]     assertEquals(3, res.length); [EOL]     assertEquals("a", res[0]); [EOL]     assertEquals("b", res[1]); [EOL]     assertEquals("c", res[2]); [EOL]     str = "a  b  c"; [EOL]     res = StringUtils.splitPreserveAllTokens(str, ' '); [EOL]     assertEquals(5, res.length); [EOL]     assertEquals("a", res[0]); [EOL]     assertEquals("", res[1]); [EOL]     assertEquals("b", res[2]); [EOL]     assertEquals("", res[3]); [EOL]     assertEquals("c", res[4]); [EOL]     str = " a b c"; [EOL]     res = StringUtils.splitPreserveAllTokens(str, ' '); [EOL]     assertEquals(4, res.length); [EOL]     assertEquals("", res[0]); [EOL]     assertEquals("a", res[1]); [EOL]     assertEquals("b", res[2]); [EOL]     assertEquals("c", res[3]); [EOL]     str = "  a b c"; [EOL]     res = StringUtils.splitPreserveAllTokens(str, ' '); [EOL]     assertEquals(5, res.length); [EOL]     assertEquals("", res[0]); [EOL]     assertEquals("", res[1]); [EOL]     assertEquals("a", res[2]); [EOL]     assertEquals("b", res[3]); [EOL]     assertEquals("c", res[4]); [EOL]     str = "a b c "; [EOL]     res = StringUtils.splitPreserveAllTokens(str, ' '); [EOL]     assertEquals(4, res.length); [EOL]     assertEquals("a", res[0]); [EOL]     assertEquals("b", res[1]); [EOL]     assertEquals("c", res[2]); [EOL]     assertEquals("", res[3]); [EOL]     str = "a b c  "; [EOL]     res = StringUtils.splitPreserveAllTokens(str, ' '); [EOL]     assertEquals(5, res.length); [EOL]     assertEquals("a", res[0]); [EOL]     assertEquals("b", res[1]); [EOL]     assertEquals("c", res[2]); [EOL]     assertEquals("", res[3]); [EOL]     assertEquals("", res[3]); [EOL]     { [EOL]         String[] results; [EOL]         final String[] expectedResults = { "a", "", "b", "c" }; [EOL]         results = StringUtils.splitPreserveAllTokens("a..b.c", '.'); [EOL]         assertEquals(expectedResults.length, results.length); [EOL]         for (int i = 0; i < expectedResults.length; i++) { [EOL]             assertEquals(expectedResults[i], results[i]); [EOL]         } [EOL]     } [EOL] }
@Test [EOL] public void testSplitPreserveAllTokens_StringChar() { [EOL]     assertArrayEquals(null, StringUtils.splitPreserveAllTokens(null, '.')); [EOL]     assertEquals(0, StringUtils.splitPreserveAllTokens("", '.').length); [EOL]     String str = "a.b. c"; [EOL]     String[] res = StringUtils.splitPreserveAllTokens(str, '.'); [EOL]     assertEquals(3, res.length); [EOL]     assertEquals("a", res[0]); [EOL]     assertEquals("b", res[1]); [EOL]     assertEquals(" c", res[2]); [EOL]     str = "a.b.. c"; [EOL]     res = StringUtils.splitPreserveAllTokens(str, '.'); [EOL]     assertEquals(4, res.length); [EOL]     assertEquals("a", res[0]); [EOL]     assertEquals("b", res[1]); [EOL]     assertEquals("", res[2]); [EOL]     assertEquals(" c", res[3]); [EOL]     str = ".a."; [EOL]     res = StringUtils.splitPreserveAllTokens(str, '.'); [EOL]     assertEquals(3, res.length); [EOL]     assertEquals("", res[0]); [EOL]     assertEquals("a", res[1]); [EOL]     assertEquals("", res[2]); [EOL]     str = ".a.."; [EOL]     res = StringUtils.splitPreserveAllTokens(str, '.'); [EOL]     assertEquals(4, res.length); [EOL]     assertEquals("", res[0]); [EOL]     assertEquals("a", res[1]); [EOL]     assertEquals("", res[2]); [EOL]     assertEquals("", res[3]); [EOL]     str = "..a."; [EOL]     res = StringUtils.splitPreserveAllTokens(str, '.'); [EOL]     assertEquals(4, res.length); [EOL]     assertEquals("", res[0]); [EOL]     assertEquals("", res[1]); [EOL]     assertEquals("a", res[2]); [EOL]     assertEquals("", res[3]); [EOL]     str = "..a"; [EOL]     res = StringUtils.splitPreserveAllTokens(str, '.'); [EOL]     assertEquals(3, res.length); [EOL]     assertEquals("", res[0]); [EOL]     assertEquals("", res[1]); [EOL]     assertEquals("a", res[2]); [EOL]     str = "a b c"; [EOL]     res = StringUtils.splitPreserveAllTokens(str, ' '); [EOL]     assertEquals(3, res.length); [EOL]     assertEquals("a", res[0]); [EOL]     assertEquals("b", res[1]); [EOL]     assertEquals("c", res[2]); [EOL]     str = "a  b  c"; [EOL]     res = StringUtils.splitPreserveAllTokens(str, ' '); [EOL]     assertEquals(5, res.length); [EOL]     assertEquals("a", res[0]); [EOL]     assertEquals("", res[1]); [EOL]     assertEquals("b", res[2]); [EOL]     assertEquals("", res[3]); [EOL]     assertEquals("c", res[4]); [EOL]     str = " a b c"; [EOL]     res = StringUtils.splitPreserveAllTokens(str, ' '); [EOL]     assertEquals(4, res.length); [EOL]     assertEquals("", res[0]); [EOL]     assertEquals("a", res[1]); [EOL]     assertEquals("b", res[2]); [EOL]     assertEquals("c", res[3]); [EOL]     str = "  a b c"; [EOL]     res = StringUtils.splitPreserveAllTokens(str, ' '); [EOL]     assertEquals(5, res.length); [EOL]     assertEquals("", res[0]); [EOL]     assertEquals("", res[1]); [EOL]     assertEquals("a", res[2]); [EOL]     assertEquals("b", res[3]); [EOL]     assertEquals("c", res[4]); [EOL]     str = "a b c "; [EOL]     res = StringUtils.splitPreserveAllTokens(str, ' '); [EOL]     assertEquals(4, res.length); [EOL]     assertEquals("a", res[0]); [EOL]     assertEquals("b", res[1]); [EOL]     assertEquals("c", res[2]); [EOL]     assertEquals("", res[3]); [EOL]     str = "a b c  "; [EOL]     res = StringUtils.splitPreserveAllTokens(str, ' '); [EOL]     assertEquals(5, res.length); [EOL]     assertEquals("a", res[0]); [EOL]     assertEquals("b", res[1]); [EOL]     assertEquals("c", res[2]); [EOL]     assertEquals("", res[3]); [EOL]     assertEquals("", res[3]); [EOL]     { [EOL]         String[] results; [EOL]         final String[] expectedResults = { "a", "", "b", "c" }; [EOL]         results = StringUtils.splitPreserveAllTokens("a..b.c", '.'); [EOL]         assertEquals(expectedResults.length, results.length); [EOL]         for (int i = 0; i < expectedResults.length; i++) { [EOL]             assertEquals(expectedResults[i], results[i]); [EOL]         } [EOL]     } [EOL] }
@Test [EOL] public void testSplitPreserveAllTokens_StringChar() { [EOL]     assertArrayEquals(null, StringUtils.splitPreserveAllTokens(null, '.')); [EOL]     assertEquals(0, StringUtils.splitPreserveAllTokens("", '.').length); [EOL]     String str = "a.b. c"; [EOL]     String[] res = StringUtils.splitPreserveAllTokens(str, '.'); [EOL]     assertEquals(3, res.length); [EOL]     assertEquals("a", res[0]); [EOL]     assertEquals("b", res[1]); [EOL]     assertEquals(" c", res[2]); [EOL]     str = "a.b.. c"; [EOL]     res = StringUtils.splitPreserveAllTokens(str, '.'); [EOL]     assertEquals(4, res.length); [EOL]     assertEquals("a", res[0]); [EOL]     assertEquals("b", res[1]); [EOL]     assertEquals("", res[2]); [EOL]     assertEquals(" c", res[3]); [EOL]     str = ".a."; [EOL]     res = StringUtils.splitPreserveAllTokens(str, '.'); [EOL]     assertEquals(3, res.length); [EOL]     assertEquals("", res[0]); [EOL]     assertEquals("a", res[1]); [EOL]     assertEquals("", res[2]); [EOL]     str = ".a.."; [EOL]     res = StringUtils.splitPreserveAllTokens(str, '.'); [EOL]     assertEquals(4, res.length); [EOL]     assertEquals("", res[0]); [EOL]     assertEquals("a", res[1]); [EOL]     assertEquals("", res[2]); [EOL]     assertEquals("", res[3]); [EOL]     str = "..a."; [EOL]     res = StringUtils.splitPreserveAllTokens(str, '.'); [EOL]     assertEquals(4, res.length); [EOL]     assertEquals("", res[0]); [EOL]     assertEquals("", res[1]); [EOL]     assertEquals("a", res[2]); [EOL]     assertEquals("", res[3]); [EOL]     str = "..a"; [EOL]     res = StringUtils.splitPreserveAllTokens(str, '.'); [EOL]     assertEquals(3, res.length); [EOL]     assertEquals("", res[0]); [EOL]     assertEquals("", res[1]); [EOL]     assertEquals("a", res[2]); [EOL]     str = "a b c"; [EOL]     res = StringUtils.splitPreserveAllTokens(str, ' '); [EOL]     assertEquals(3, res.length); [EOL]     assertEquals("a", res[0]); [EOL]     assertEquals("b", res[1]); [EOL]     assertEquals("c", res[2]); [EOL]     str = "a  b  c"; [EOL]     res = StringUtils.splitPreserveAllTokens(str, ' '); [EOL]     assertEquals(5, res.length); [EOL]     assertEquals("a", res[0]); [EOL]     assertEquals("", res[1]); [EOL]     assertEquals("b", res[2]); [EOL]     assertEquals("", res[3]); [EOL]     assertEquals("c", res[4]); [EOL]     str = " a b c"; [EOL]     res = StringUtils.splitPreserveAllTokens(str, ' '); [EOL]     assertEquals(4, res.length); [EOL]     assertEquals("", res[0]); [EOL]     assertEquals("a", res[1]); [EOL]     assertEquals("b", res[2]); [EOL]     assertEquals("c", res[3]); [EOL]     str = "  a b c"; [EOL]     res = StringUtils.splitPreserveAllTokens(str, ' '); [EOL]     assertEquals(5, res.length); [EOL]     assertEquals("", res[0]); [EOL]     assertEquals("", res[1]); [EOL]     assertEquals("a", res[2]); [EOL]     assertEquals("b", res[3]); [EOL]     assertEquals("c", res[4]); [EOL]     str = "a b c "; [EOL]     res = StringUtils.splitPreserveAllTokens(str, ' '); [EOL]     assertEquals(4, res.length); [EOL]     assertEquals("a", res[0]); [EOL]     assertEquals("b", res[1]); [EOL]     assertEquals("c", res[2]); [EOL]     assertEquals("", res[3]); [EOL]     str = "a b c  "; [EOL]     res = StringUtils.splitPreserveAllTokens(str, ' '); [EOL]     assertEquals(5, res.length); [EOL]     assertEquals("a", res[0]); [EOL]     assertEquals("b", res[1]); [EOL]     assertEquals("c", res[2]); [EOL]     assertEquals("", res[3]); [EOL]     assertEquals("", res[3]); [EOL]     { [EOL]         String[] results; [EOL]         final String[] expectedResults = { "a", "", "b", "c" }; [EOL]         results = StringUtils.splitPreserveAllTokens("a..b.c", '.'); [EOL]         assertEquals(expectedResults.length, results.length); [EOL]         for (int i = 0; i < expectedResults.length; i++) { [EOL]             assertEquals(expectedResults[i], results[i]); [EOL]         } [EOL]     } [EOL] }
@Test [EOL] public void testSplitPreserveAllTokens_StringChar() { [EOL]     assertArrayEquals(null, StringUtils.splitPreserveAllTokens(null, '.')); [EOL]     assertEquals(0, StringUtils.splitPreserveAllTokens("", '.').length); [EOL]     String str = "a.b. c"; [EOL]     String[] res = StringUtils.splitPreserveAllTokens(str, '.'); [EOL]     assertEquals(3, res.length); [EOL]     assertEquals("a", res[0]); [EOL]     assertEquals("b", res[1]); [EOL]     assertEquals(" c", res[2]); [EOL]     str = "a.b.. c"; [EOL]     res = StringUtils.splitPreserveAllTokens(str, '.'); [EOL]     assertEquals(4, res.length); [EOL]     assertEquals("a", res[0]); [EOL]     assertEquals("b", res[1]); [EOL]     assertEquals("", res[2]); [EOL]     assertEquals(" c", res[3]); [EOL]     str = ".a."; [EOL]     res = StringUtils.splitPreserveAllTokens(str, '.'); [EOL]     assertEquals(3, res.length); [EOL]     assertEquals("", res[0]); [EOL]     assertEquals("a", res[1]); [EOL]     assertEquals("", res[2]); [EOL]     str = ".a.."; [EOL]     res = StringUtils.splitPreserveAllTokens(str, '.'); [EOL]     assertEquals(4, res.length); [EOL]     assertEquals("", res[0]); [EOL]     assertEquals("a", res[1]); [EOL]     assertEquals("", res[2]); [EOL]     assertEquals("", res[3]); [EOL]     str = "..a."; [EOL]     res = StringUtils.splitPreserveAllTokens(str, '.'); [EOL]     assertEquals(4, res.length); [EOL]     assertEquals("", res[0]); [EOL]     assertEquals("", res[1]); [EOL]     assertEquals("a", res[2]); [EOL]     assertEquals("", res[3]); [EOL]     str = "..a"; [EOL]     res = StringUtils.splitPreserveAllTokens(str, '.'); [EOL]     assertEquals(3, res.length); [EOL]     assertEquals("", res[0]); [EOL]     assertEquals("", res[1]); [EOL]     assertEquals("a", res[2]); [EOL]     str = "a b c"; [EOL]     res = StringUtils.splitPreserveAllTokens(str, ' '); [EOL]     assertEquals(3, res.length); [EOL]     assertEquals("a", res[0]); [EOL]     assertEquals("b", res[1]); [EOL]     assertEquals("c", res[2]); [EOL]     str = "a  b  c"; [EOL]     res = StringUtils.splitPreserveAllTokens(str, ' '); [EOL]     assertEquals(5, res.length); [EOL]     assertEquals("a", res[0]); [EOL]     assertEquals("", res[1]); [EOL]     assertEquals("b", res[2]); [EOL]     assertEquals("", res[3]); [EOL]     assertEquals("c", res[4]); [EOL]     str = " a b c"; [EOL]     res = StringUtils.splitPreserveAllTokens(str, ' '); [EOL]     assertEquals(4, res.length); [EOL]     assertEquals("", res[0]); [EOL]     assertEquals("a", res[1]); [EOL]     assertEquals("b", res[2]); [EOL]     assertEquals("c", res[3]); [EOL]     str = "  a b c"; [EOL]     res = StringUtils.splitPreserveAllTokens(str, ' '); [EOL]     assertEquals(5, res.length); [EOL]     assertEquals("", res[0]); [EOL]     assertEquals("", res[1]); [EOL]     assertEquals("a", res[2]); [EOL]     assertEquals("b", res[3]); [EOL]     assertEquals("c", res[4]); [EOL]     str = "a b c "; [EOL]     res = StringUtils.splitPreserveAllTokens(str, ' '); [EOL]     assertEquals(4, res.length); [EOL]     assertEquals("a", res[0]); [EOL]     assertEquals("b", res[1]); [EOL]     assertEquals("c", res[2]); [EOL]     assertEquals("", res[3]); [EOL]     str = "a b c  "; [EOL]     res = StringUtils.splitPreserveAllTokens(str, ' '); [EOL]     assertEquals(5, res.length); [EOL]     assertEquals("a", res[0]); [EOL]     assertEquals("b", res[1]); [EOL]     assertEquals("c", res[2]); [EOL]     assertEquals("", res[3]); [EOL]     assertEquals("", res[3]); [EOL]     { [EOL]         String[] results; [EOL]         final String[] expectedResults = { "a", "", "b", "c" }; [EOL]         results = StringUtils.splitPreserveAllTokens("a..b.c", '.'); [EOL]         assertEquals(expectedResults.length, results.length); [EOL]         for (int i = 0; i < expectedResults.length; i++) { [EOL]             assertEquals(expectedResults[i], results[i]); [EOL]         } [EOL]     } [EOL] }
@Test [EOL] public void testSplitPreserveAllTokens_StringChar() { [EOL]     assertArrayEquals(null, StringUtils.splitPreserveAllTokens(null, '.')); [EOL]     assertEquals(0, StringUtils.splitPreserveAllTokens("", '.').length); [EOL]     String str = "a.b. c"; [EOL]     String[] res = StringUtils.splitPreserveAllTokens(str, '.'); [EOL]     assertEquals(3, res.length); [EOL]     assertEquals("a", res[0]); [EOL]     assertEquals("b", res[1]); [EOL]     assertEquals(" c", res[2]); [EOL]     str = "a.b.. c"; [EOL]     res = StringUtils.splitPreserveAllTokens(str, '.'); [EOL]     assertEquals(4, res.length); [EOL]     assertEquals("a", res[0]); [EOL]     assertEquals("b", res[1]); [EOL]     assertEquals("", res[2]); [EOL]     assertEquals(" c", res[3]); [EOL]     str = ".a."; [EOL]     res = StringUtils.splitPreserveAllTokens(str, '.'); [EOL]     assertEquals(3, res.length); [EOL]     assertEquals("", res[0]); [EOL]     assertEquals("a", res[1]); [EOL]     assertEquals("", res[2]); [EOL]     str = ".a.."; [EOL]     res = StringUtils.splitPreserveAllTokens(str, '.'); [EOL]     assertEquals(4, res.length); [EOL]     assertEquals("", res[0]); [EOL]     assertEquals("a", res[1]); [EOL]     assertEquals("", res[2]); [EOL]     assertEquals("", res[3]); [EOL]     str = "..a."; [EOL]     res = StringUtils.splitPreserveAllTokens(str, '.'); [EOL]     assertEquals(4, res.length); [EOL]     assertEquals("", res[0]); [EOL]     assertEquals("", res[1]); [EOL]     assertEquals("a", res[2]); [EOL]     assertEquals("", res[3]); [EOL]     str = "..a"; [EOL]     res = StringUtils.splitPreserveAllTokens(str, '.'); [EOL]     assertEquals(3, res.length); [EOL]     assertEquals("", res[0]); [EOL]     assertEquals("", res[1]); [EOL]     assertEquals("a", res[2]); [EOL]     str = "a b c"; [EOL]     res = StringUtils.splitPreserveAllTokens(str, ' '); [EOL]     assertEquals(3, res.length); [EOL]     assertEquals("a", res[0]); [EOL]     assertEquals("b", res[1]); [EOL]     assertEquals("c", res[2]); [EOL]     str = "a  b  c"; [EOL]     res = StringUtils.splitPreserveAllTokens(str, ' '); [EOL]     assertEquals(5, res.length); [EOL]     assertEquals("a", res[0]); [EOL]     assertEquals("", res[1]); [EOL]     assertEquals("b", res[2]); [EOL]     assertEquals("", res[3]); [EOL]     assertEquals("c", res[4]); [EOL]     str = " a b c"; [EOL]     res = StringUtils.splitPreserveAllTokens(str, ' '); [EOL]     assertEquals(4, res.length); [EOL]     assertEquals("", res[0]); [EOL]     assertEquals("a", res[1]); [EOL]     assertEquals("b", res[2]); [EOL]     assertEquals("c", res[3]); [EOL]     str = "  a b c"; [EOL]     res = StringUtils.splitPreserveAllTokens(str, ' '); [EOL]     assertEquals(5, res.length); [EOL]     assertEquals("", res[0]); [EOL]     assertEquals("", res[1]); [EOL]     assertEquals("a", res[2]); [EOL]     assertEquals("b", res[3]); [EOL]     assertEquals("c", res[4]); [EOL]     str = "a b c "; [EOL]     res = StringUtils.splitPreserveAllTokens(str, ' '); [EOL]     assertEquals(4, res.length); [EOL]     assertEquals("a", res[0]); [EOL]     assertEquals("b", res[1]); [EOL]     assertEquals("c", res[2]); [EOL]     assertEquals("", res[3]); [EOL]     str = "a b c  "; [EOL]     res = StringUtils.splitPreserveAllTokens(str, ' '); [EOL]     assertEquals(5, res.length); [EOL]     assertEquals("a", res[0]); [EOL]     assertEquals("b", res[1]); [EOL]     assertEquals("c", res[2]); [EOL]     assertEquals("", res[3]); [EOL]     assertEquals("", res[3]); [EOL]     { [EOL]         String[] results; [EOL]         final String[] expectedResults = { "a", "", "b", "c" }; [EOL]         results = StringUtils.splitPreserveAllTokens("a..b.c", '.'); [EOL]         assertEquals(expectedResults.length, results.length); [EOL]         for (int i = 0; i < expectedResults.length; i++) { [EOL]             assertEquals(expectedResults[i], results[i]); [EOL]         } [EOL]     } [EOL] }
@Test [EOL] public void testSplitPreserveAllTokens_StringChar() { [EOL]     assertArrayEquals(null, StringUtils.splitPreserveAllTokens(null, '.')); [EOL]     assertEquals(0, StringUtils.splitPreserveAllTokens("", '.').length); [EOL]     String str = "a.b. c"; [EOL]     String[] res = StringUtils.splitPreserveAllTokens(str, '.'); [EOL]     assertEquals(3, res.length); [EOL]     assertEquals("a", res[0]); [EOL]     assertEquals("b", res[1]); [EOL]     assertEquals(" c", res[2]); [EOL]     str = "a.b.. c"; [EOL]     res = StringUtils.splitPreserveAllTokens(str, '.'); [EOL]     assertEquals(4, res.length); [EOL]     assertEquals("a", res[0]); [EOL]     assertEquals("b", res[1]); [EOL]     assertEquals("", res[2]); [EOL]     assertEquals(" c", res[3]); [EOL]     str = ".a."; [EOL]     res = StringUtils.splitPreserveAllTokens(str, '.'); [EOL]     assertEquals(3, res.length); [EOL]     assertEquals("", res[0]); [EOL]     assertEquals("a", res[1]); [EOL]     assertEquals("", res[2]); [EOL]     str = ".a.."; [EOL]     res = StringUtils.splitPreserveAllTokens(str, '.'); [EOL]     assertEquals(4, res.length); [EOL]     assertEquals("", res[0]); [EOL]     assertEquals("a", res[1]); [EOL]     assertEquals("", res[2]); [EOL]     assertEquals("", res[3]); [EOL]     str = "..a."; [EOL]     res = StringUtils.splitPreserveAllTokens(str, '.'); [EOL]     assertEquals(4, res.length); [EOL]     assertEquals("", res[0]); [EOL]     assertEquals("", res[1]); [EOL]     assertEquals("a", res[2]); [EOL]     assertEquals("", res[3]); [EOL]     str = "..a"; [EOL]     res = StringUtils.splitPreserveAllTokens(str, '.'); [EOL]     assertEquals(3, res.length); [EOL]     assertEquals("", res[0]); [EOL]     assertEquals("", res[1]); [EOL]     assertEquals("a", res[2]); [EOL]     str = "a b c"; [EOL]     res = StringUtils.splitPreserveAllTokens(str, ' '); [EOL]     assertEquals(3, res.length); [EOL]     assertEquals("a", res[0]); [EOL]     assertEquals("b", res[1]); [EOL]     assertEquals("c", res[2]); [EOL]     str = "a  b  c"; [EOL]     res = StringUtils.splitPreserveAllTokens(str, ' '); [EOL]     assertEquals(5, res.length); [EOL]     assertEquals("a", res[0]); [EOL]     assertEquals("", res[1]); [EOL]     assertEquals("b", res[2]); [EOL]     assertEquals("", res[3]); [EOL]     assertEquals("c", res[4]); [EOL]     str = " a b c"; [EOL]     res = StringUtils.splitPreserveAllTokens(str, ' '); [EOL]     assertEquals(4, res.length); [EOL]     assertEquals("", res[0]); [EOL]     assertEquals("a", res[1]); [EOL]     assertEquals("b", res[2]); [EOL]     assertEquals("c", res[3]); [EOL]     str = "  a b c"; [EOL]     res = StringUtils.splitPreserveAllTokens(str, ' '); [EOL]     assertEquals(5, res.length); [EOL]     assertEquals("", res[0]); [EOL]     assertEquals("", res[1]); [EOL]     assertEquals("a", res[2]); [EOL]     assertEquals("b", res[3]); [EOL]     assertEquals("c", res[4]); [EOL]     str = "a b c "; [EOL]     res = StringUtils.splitPreserveAllTokens(str, ' '); [EOL]     assertEquals(4, res.length); [EOL]     assertEquals("a", res[0]); [EOL]     assertEquals("b", res[1]); [EOL]     assertEquals("c", res[2]); [EOL]     assertEquals("", res[3]); [EOL]     str = "a b c  "; [EOL]     res = StringUtils.splitPreserveAllTokens(str, ' '); [EOL]     assertEquals(5, res.length); [EOL]     assertEquals("a", res[0]); [EOL]     assertEquals("b", res[1]); [EOL]     assertEquals("c", res[2]); [EOL]     assertEquals("", res[3]); [EOL]     assertEquals("", res[3]); [EOL]     { [EOL]         String[] results; [EOL]         final String[] expectedResults = { "a", "", "b", "c" }; [EOL]         results = StringUtils.splitPreserveAllTokens("a..b.c", '.'); [EOL]         assertEquals(expectedResults.length, results.length); [EOL]         for (int i = 0; i < expectedResults.length; i++) { [EOL]             assertEquals(expectedResults[i], results[i]); [EOL]         } [EOL]     } [EOL] }
@Test [EOL] public void testSplitPreserveAllTokens_StringChar() { [EOL]     assertArrayEquals(null, StringUtils.splitPreserveAllTokens(null, '.')); [EOL]     assertEquals(0, StringUtils.splitPreserveAllTokens("", '.').length); [EOL]     String str = "a.b. c"; [EOL]     String[] res = StringUtils.splitPreserveAllTokens(str, '.'); [EOL]     assertEquals(3, res.length); [EOL]     assertEquals("a", res[0]); [EOL]     assertEquals("b", res[1]); [EOL]     assertEquals(" c", res[2]); [EOL]     str = "a.b.. c"; [EOL]     res = StringUtils.splitPreserveAllTokens(str, '.'); [EOL]     assertEquals(4, res.length); [EOL]     assertEquals("a", res[0]); [EOL]     assertEquals("b", res[1]); [EOL]     assertEquals("", res[2]); [EOL]     assertEquals(" c", res[3]); [EOL]     str = ".a."; [EOL]     res = StringUtils.splitPreserveAllTokens(str, '.'); [EOL]     assertEquals(3, res.length); [EOL]     assertEquals("", res[0]); [EOL]     assertEquals("a", res[1]); [EOL]     assertEquals("", res[2]); [EOL]     str = ".a.."; [EOL]     res = StringUtils.splitPreserveAllTokens(str, '.'); [EOL]     assertEquals(4, res.length); [EOL]     assertEquals("", res[0]); [EOL]     assertEquals("a", res[1]); [EOL]     assertEquals("", res[2]); [EOL]     assertEquals("", res[3]); [EOL]     str = "..a."; [EOL]     res = StringUtils.splitPreserveAllTokens(str, '.'); [EOL]     assertEquals(4, res.length); [EOL]     assertEquals("", res[0]); [EOL]     assertEquals("", res[1]); [EOL]     assertEquals("a", res[2]); [EOL]     assertEquals("", res[3]); [EOL]     str = "..a"; [EOL]     res = StringUtils.splitPreserveAllTokens(str, '.'); [EOL]     assertEquals(3, res.length); [EOL]     assertEquals("", res[0]); [EOL]     assertEquals("", res[1]); [EOL]     assertEquals("a", res[2]); [EOL]     str = "a b c"; [EOL]     res = StringUtils.splitPreserveAllTokens(str, ' '); [EOL]     assertEquals(3, res.length); [EOL]     assertEquals("a", res[0]); [EOL]     assertEquals("b", res[1]); [EOL]     assertEquals("c", res[2]); [EOL]     str = "a  b  c"; [EOL]     res = StringUtils.splitPreserveAllTokens(str, ' '); [EOL]     assertEquals(5, res.length); [EOL]     assertEquals("a", res[0]); [EOL]     assertEquals("", res[1]); [EOL]     assertEquals("b", res[2]); [EOL]     assertEquals("", res[3]); [EOL]     assertEquals("c", res[4]); [EOL]     str = " a b c"; [EOL]     res = StringUtils.splitPreserveAllTokens(str, ' '); [EOL]     assertEquals(4, res.length); [EOL]     assertEquals("", res[0]); [EOL]     assertEquals("a", res[1]); [EOL]     assertEquals("b", res[2]); [EOL]     assertEquals("c", res[3]); [EOL]     str = "  a b c"; [EOL]     res = StringUtils.splitPreserveAllTokens(str, ' '); [EOL]     assertEquals(5, res.length); [EOL]     assertEquals("", res[0]); [EOL]     assertEquals("", res[1]); [EOL]     assertEquals("a", res[2]); [EOL]     assertEquals("b", res[3]); [EOL]     assertEquals("c", res[4]); [EOL]     str = "a b c "; [EOL]     res = StringUtils.splitPreserveAllTokens(str, ' '); [EOL]     assertEquals(4, res.length); [EOL]     assertEquals("a", res[0]); [EOL]     assertEquals("b", res[1]); [EOL]     assertEquals("c", res[2]); [EOL]     assertEquals("", res[3]); [EOL]     str = "a b c  "; [EOL]     res = StringUtils.splitPreserveAllTokens(str, ' '); [EOL]     assertEquals(5, res.length); [EOL]     assertEquals("a", res[0]); [EOL]     assertEquals("b", res[1]); [EOL]     assertEquals("c", res[2]); [EOL]     assertEquals("", res[3]); [EOL]     assertEquals("", res[3]); [EOL]     { [EOL]         String[] results; [EOL]         final String[] expectedResults = { "a", "", "b", "c" }; [EOL]         results = StringUtils.splitPreserveAllTokens("a..b.c", '.'); [EOL]         assertEquals(expectedResults.length, results.length); [EOL]         for (int i = 0; i < expectedResults.length; i++) { [EOL]             assertEquals(expectedResults[i], results[i]); [EOL]         } [EOL]     } [EOL] }
@Test [EOL] public void testSplitPreserveAllTokens_StringChar() { [EOL]     assertArrayEquals(null, StringUtils.splitPreserveAllTokens(null, '.')); [EOL]     assertEquals(0, StringUtils.splitPreserveAllTokens("", '.').length); [EOL]     String str = "a.b. c"; [EOL]     String[] res = StringUtils.splitPreserveAllTokens(str, '.'); [EOL]     assertEquals(3, res.length); [EOL]     assertEquals("a", res[0]); [EOL]     assertEquals("b", res[1]); [EOL]     assertEquals(" c", res[2]); [EOL]     str = "a.b.. c"; [EOL]     res = StringUtils.splitPreserveAllTokens(str, '.'); [EOL]     assertEquals(4, res.length); [EOL]     assertEquals("a", res[0]); [EOL]     assertEquals("b", res[1]); [EOL]     assertEquals("", res[2]); [EOL]     assertEquals(" c", res[3]); [EOL]     str = ".a."; [EOL]     res = StringUtils.splitPreserveAllTokens(str, '.'); [EOL]     assertEquals(3, res.length); [EOL]     assertEquals("", res[0]); [EOL]     assertEquals("a", res[1]); [EOL]     assertEquals("", res[2]); [EOL]     str = ".a.."; [EOL]     res = StringUtils.splitPreserveAllTokens(str, '.'); [EOL]     assertEquals(4, res.length); [EOL]     assertEquals("", res[0]); [EOL]     assertEquals("a", res[1]); [EOL]     assertEquals("", res[2]); [EOL]     assertEquals("", res[3]); [EOL]     str = "..a."; [EOL]     res = StringUtils.splitPreserveAllTokens(str, '.'); [EOL]     assertEquals(4, res.length); [EOL]     assertEquals("", res[0]); [EOL]     assertEquals("", res[1]); [EOL]     assertEquals("a", res[2]); [EOL]     assertEquals("", res[3]); [EOL]     str = "..a"; [EOL]     res = StringUtils.splitPreserveAllTokens(str, '.'); [EOL]     assertEquals(3, res.length); [EOL]     assertEquals("", res[0]); [EOL]     assertEquals("", res[1]); [EOL]     assertEquals("a", res[2]); [EOL]     str = "a b c"; [EOL]     res = StringUtils.splitPreserveAllTokens(str, ' '); [EOL]     assertEquals(3, res.length); [EOL]     assertEquals("a", res[0]); [EOL]     assertEquals("b", res[1]); [EOL]     assertEquals("c", res[2]); [EOL]     str = "a  b  c"; [EOL]     res = StringUtils.splitPreserveAllTokens(str, ' '); [EOL]     assertEquals(5, res.length); [EOL]     assertEquals("a", res[0]); [EOL]     assertEquals("", res[1]); [EOL]     assertEquals("b", res[2]); [EOL]     assertEquals("", res[3]); [EOL]     assertEquals("c", res[4]); [EOL]     str = " a b c"; [EOL]     res = StringUtils.splitPreserveAllTokens(str, ' '); [EOL]     assertEquals(4, res.length); [EOL]     assertEquals("", res[0]); [EOL]     assertEquals("a", res[1]); [EOL]     assertEquals("b", res[2]); [EOL]     assertEquals("c", res[3]); [EOL]     str = "  a b c"; [EOL]     res = StringUtils.splitPreserveAllTokens(str, ' '); [EOL]     assertEquals(5, res.length); [EOL]     assertEquals("", res[0]); [EOL]     assertEquals("", res[1]); [EOL]     assertEquals("a", res[2]); [EOL]     assertEquals("b", res[3]); [EOL]     assertEquals("c", res[4]); [EOL]     str = "a b c "; [EOL]     res = StringUtils.splitPreserveAllTokens(str, ' '); [EOL]     assertEquals(4, res.length); [EOL]     assertEquals("a", res[0]); [EOL]     assertEquals("b", res[1]); [EOL]     assertEquals("c", res[2]); [EOL]     assertEquals("", res[3]); [EOL]     str = "a b c  "; [EOL]     res = StringUtils.splitPreserveAllTokens(str, ' '); [EOL]     assertEquals(5, res.length); [EOL]     assertEquals("a", res[0]); [EOL]     assertEquals("b", res[1]); [EOL]     assertEquals("c", res[2]); [EOL]     assertEquals("", res[3]); [EOL]     assertEquals("", res[3]); [EOL]     { [EOL]         String[] results; [EOL]         final String[] expectedResults = { "a", "", "b", "c" }; [EOL]         results = StringUtils.splitPreserveAllTokens("a..b.c", '.'); [EOL]         assertEquals(expectedResults.length, results.length); [EOL]         for (int i = 0; i < expectedResults.length; i++) { [EOL]             assertEquals(expectedResults[i], results[i]); [EOL]         } [EOL]     } [EOL] }
@Test [EOL] public void testSplitPreserveAllTokens_StringChar() { [EOL]     assertArrayEquals(null, StringUtils.splitPreserveAllTokens(null, '.')); [EOL]     assertEquals(0, StringUtils.splitPreserveAllTokens("", '.').length); [EOL]     String str = "a.b. c"; [EOL]     String[] res = StringUtils.splitPreserveAllTokens(str, '.'); [EOL]     assertEquals(3, res.length); [EOL]     assertEquals("a", res[0]); [EOL]     assertEquals("b", res[1]); [EOL]     assertEquals(" c", res[2]); [EOL]     str = "a.b.. c"; [EOL]     res = StringUtils.splitPreserveAllTokens(str, '.'); [EOL]     assertEquals(4, res.length); [EOL]     assertEquals("a", res[0]); [EOL]     assertEquals("b", res[1]); [EOL]     assertEquals("", res[2]); [EOL]     assertEquals(" c", res[3]); [EOL]     str = ".a."; [EOL]     res = StringUtils.splitPreserveAllTokens(str, '.'); [EOL]     assertEquals(3, res.length); [EOL]     assertEquals("", res[0]); [EOL]     assertEquals("a", res[1]); [EOL]     assertEquals("", res[2]); [EOL]     str = ".a.."; [EOL]     res = StringUtils.splitPreserveAllTokens(str, '.'); [EOL]     assertEquals(4, res.length); [EOL]     assertEquals("", res[0]); [EOL]     assertEquals("a", res[1]); [EOL]     assertEquals("", res[2]); [EOL]     assertEquals("", res[3]); [EOL]     str = "..a."; [EOL]     res = StringUtils.splitPreserveAllTokens(str, '.'); [EOL]     assertEquals(4, res.length); [EOL]     assertEquals("", res[0]); [EOL]     assertEquals("", res[1]); [EOL]     assertEquals("a", res[2]); [EOL]     assertEquals("", res[3]); [EOL]     str = "..a"; [EOL]     res = StringUtils.splitPreserveAllTokens(str, '.'); [EOL]     assertEquals(3, res.length); [EOL]     assertEquals("", res[0]); [EOL]     assertEquals("", res[1]); [EOL]     assertEquals("a", res[2]); [EOL]     str = "a b c"; [EOL]     res = StringUtils.splitPreserveAllTokens(str, ' '); [EOL]     assertEquals(3, res.length); [EOL]     assertEquals("a", res[0]); [EOL]     assertEquals("b", res[1]); [EOL]     assertEquals("c", res[2]); [EOL]     str = "a  b  c"; [EOL]     res = StringUtils.splitPreserveAllTokens(str, ' '); [EOL]     assertEquals(5, res.length); [EOL]     assertEquals("a", res[0]); [EOL]     assertEquals("", res[1]); [EOL]     assertEquals("b", res[2]); [EOL]     assertEquals("", res[3]); [EOL]     assertEquals("c", res[4]); [EOL]     str = " a b c"; [EOL]     res = StringUtils.splitPreserveAllTokens(str, ' '); [EOL]     assertEquals(4, res.length); [EOL]     assertEquals("", res[0]); [EOL]     assertEquals("a", res[1]); [EOL]     assertEquals("b", res[2]); [EOL]     assertEquals("c", res[3]); [EOL]     str = "  a b c"; [EOL]     res = StringUtils.splitPreserveAllTokens(str, ' '); [EOL]     assertEquals(5, res.length); [EOL]     assertEquals("", res[0]); [EOL]     assertEquals("", res[1]); [EOL]     assertEquals("a", res[2]); [EOL]     assertEquals("b", res[3]); [EOL]     assertEquals("c", res[4]); [EOL]     str = "a b c "; [EOL]     res = StringUtils.splitPreserveAllTokens(str, ' '); [EOL]     assertEquals(4, res.length); [EOL]     assertEquals("a", res[0]); [EOL]     assertEquals("b", res[1]); [EOL]     assertEquals("c", res[2]); [EOL]     assertEquals("", res[3]); [EOL]     str = "a b c  "; [EOL]     res = StringUtils.splitPreserveAllTokens(str, ' '); [EOL]     assertEquals(5, res.length); [EOL]     assertEquals("a", res[0]); [EOL]     assertEquals("b", res[1]); [EOL]     assertEquals("c", res[2]); [EOL]     assertEquals("", res[3]); [EOL]     assertEquals("", res[3]); [EOL]     { [EOL]         String[] results; [EOL]         final String[] expectedResults = { "a", "", "b", "c" }; [EOL]         results = StringUtils.splitPreserveAllTokens("a..b.c", '.'); [EOL]         assertEquals(expectedResults.length, results.length); [EOL]         for (int i = 0; i < expectedResults.length; i++) { [EOL]             assertEquals(expectedResults[i], results[i]); [EOL]         } [EOL]     } [EOL] }
@Test [EOL] public void testSplitPreserveAllTokens_StringChar() { [EOL]     assertArrayEquals(null, StringUtils.splitPreserveAllTokens(null, '.')); [EOL]     assertEquals(0, StringUtils.splitPreserveAllTokens("", '.').length); [EOL]     String str = "a.b. c"; [EOL]     String[] res = StringUtils.splitPreserveAllTokens(str, '.'); [EOL]     assertEquals(3, res.length); [EOL]     assertEquals("a", res[0]); [EOL]     assertEquals("b", res[1]); [EOL]     assertEquals(" c", res[2]); [EOL]     str = "a.b.. c"; [EOL]     res = StringUtils.splitPreserveAllTokens(str, '.'); [EOL]     assertEquals(4, res.length); [EOL]     assertEquals("a", res[0]); [EOL]     assertEquals("b", res[1]); [EOL]     assertEquals("", res[2]); [EOL]     assertEquals(" c", res[3]); [EOL]     str = ".a."; [EOL]     res = StringUtils.splitPreserveAllTokens(str, '.'); [EOL]     assertEquals(3, res.length); [EOL]     assertEquals("", res[0]); [EOL]     assertEquals("a", res[1]); [EOL]     assertEquals("", res[2]); [EOL]     str = ".a.."; [EOL]     res = StringUtils.splitPreserveAllTokens(str, '.'); [EOL]     assertEquals(4, res.length); [EOL]     assertEquals("", res[0]); [EOL]     assertEquals("a", res[1]); [EOL]     assertEquals("", res[2]); [EOL]     assertEquals("", res[3]); [EOL]     str = "..a."; [EOL]     res = StringUtils.splitPreserveAllTokens(str, '.'); [EOL]     assertEquals(4, res.length); [EOL]     assertEquals("", res[0]); [EOL]     assertEquals("", res[1]); [EOL]     assertEquals("a", res[2]); [EOL]     assertEquals("", res[3]); [EOL]     str = "..a"; [EOL]     res = StringUtils.splitPreserveAllTokens(str, '.'); [EOL]     assertEquals(3, res.length); [EOL]     assertEquals("", res[0]); [EOL]     assertEquals("", res[1]); [EOL]     assertEquals("a", res[2]); [EOL]     str = "a b c"; [EOL]     res = StringUtils.splitPreserveAllTokens(str, ' '); [EOL]     assertEquals(3, res.length); [EOL]     assertEquals("a", res[0]); [EOL]     assertEquals("b", res[1]); [EOL]     assertEquals("c", res[2]); [EOL]     str = "a  b  c"; [EOL]     res = StringUtils.splitPreserveAllTokens(str, ' '); [EOL]     assertEquals(5, res.length); [EOL]     assertEquals("a", res[0]); [EOL]     assertEquals("", res[1]); [EOL]     assertEquals("b", res[2]); [EOL]     assertEquals("", res[3]); [EOL]     assertEquals("c", res[4]); [EOL]     str = " a b c"; [EOL]     res = StringUtils.splitPreserveAllTokens(str, ' '); [EOL]     assertEquals(4, res.length); [EOL]     assertEquals("", res[0]); [EOL]     assertEquals("a", res[1]); [EOL]     assertEquals("b", res[2]); [EOL]     assertEquals("c", res[3]); [EOL]     str = "  a b c"; [EOL]     res = StringUtils.splitPreserveAllTokens(str, ' '); [EOL]     assertEquals(5, res.length); [EOL]     assertEquals("", res[0]); [EOL]     assertEquals("", res[1]); [EOL]     assertEquals("a", res[2]); [EOL]     assertEquals("b", res[3]); [EOL]     assertEquals("c", res[4]); [EOL]     str = "a b c "; [EOL]     res = StringUtils.splitPreserveAllTokens(str, ' '); [EOL]     assertEquals(4, res.length); [EOL]     assertEquals("a", res[0]); [EOL]     assertEquals("b", res[1]); [EOL]     assertEquals("c", res[2]); [EOL]     assertEquals("", res[3]); [EOL]     str = "a b c  "; [EOL]     res = StringUtils.splitPreserveAllTokens(str, ' '); [EOL]     assertEquals(5, res.length); [EOL]     assertEquals("a", res[0]); [EOL]     assertEquals("b", res[1]); [EOL]     assertEquals("c", res[2]); [EOL]     assertEquals("", res[3]); [EOL]     assertEquals("", res[3]); [EOL]     { [EOL]         String[] results; [EOL]         final String[] expectedResults = { "a", "", "b", "c" }; [EOL]         results = StringUtils.splitPreserveAllTokens("a..b.c", '.'); [EOL]         assertEquals(expectedResults.length, results.length); [EOL]         for (int i = 0; i < expectedResults.length; i++) { [EOL]             assertEquals(expectedResults[i], results[i]); [EOL]         } [EOL]     } [EOL] }
@Test [EOL] public void testSplitPreserveAllTokens_StringChar() { [EOL]     assertArrayEquals(null, StringUtils.splitPreserveAllTokens(null, '.')); [EOL]     assertEquals(0, StringUtils.splitPreserveAllTokens("", '.').length); [EOL]     String str = "a.b. c"; [EOL]     String[] res = StringUtils.splitPreserveAllTokens(str, '.'); [EOL]     assertEquals(3, res.length); [EOL]     assertEquals("a", res[0]); [EOL]     assertEquals("b", res[1]); [EOL]     assertEquals(" c", res[2]); [EOL]     str = "a.b.. c"; [EOL]     res = StringUtils.splitPreserveAllTokens(str, '.'); [EOL]     assertEquals(4, res.length); [EOL]     assertEquals("a", res[0]); [EOL]     assertEquals("b", res[1]); [EOL]     assertEquals("", res[2]); [EOL]     assertEquals(" c", res[3]); [EOL]     str = ".a."; [EOL]     res = StringUtils.splitPreserveAllTokens(str, '.'); [EOL]     assertEquals(3, res.length); [EOL]     assertEquals("", res[0]); [EOL]     assertEquals("a", res[1]); [EOL]     assertEquals("", res[2]); [EOL]     str = ".a.."; [EOL]     res = StringUtils.splitPreserveAllTokens(str, '.'); [EOL]     assertEquals(4, res.length); [EOL]     assertEquals("", res[0]); [EOL]     assertEquals("a", res[1]); [EOL]     assertEquals("", res[2]); [EOL]     assertEquals("", res[3]); [EOL]     str = "..a."; [EOL]     res = StringUtils.splitPreserveAllTokens(str, '.'); [EOL]     assertEquals(4, res.length); [EOL]     assertEquals("", res[0]); [EOL]     assertEquals("", res[1]); [EOL]     assertEquals("a", res[2]); [EOL]     assertEquals("", res[3]); [EOL]     str = "..a"; [EOL]     res = StringUtils.splitPreserveAllTokens(str, '.'); [EOL]     assertEquals(3, res.length); [EOL]     assertEquals("", res[0]); [EOL]     assertEquals("", res[1]); [EOL]     assertEquals("a", res[2]); [EOL]     str = "a b c"; [EOL]     res = StringUtils.splitPreserveAllTokens(str, ' '); [EOL]     assertEquals(3, res.length); [EOL]     assertEquals("a", res[0]); [EOL]     assertEquals("b", res[1]); [EOL]     assertEquals("c", res[2]); [EOL]     str = "a  b  c"; [EOL]     res = StringUtils.splitPreserveAllTokens(str, ' '); [EOL]     assertEquals(5, res.length); [EOL]     assertEquals("a", res[0]); [EOL]     assertEquals("", res[1]); [EOL]     assertEquals("b", res[2]); [EOL]     assertEquals("", res[3]); [EOL]     assertEquals("c", res[4]); [EOL]     str = " a b c"; [EOL]     res = StringUtils.splitPreserveAllTokens(str, ' '); [EOL]     assertEquals(4, res.length); [EOL]     assertEquals("", res[0]); [EOL]     assertEquals("a", res[1]); [EOL]     assertEquals("b", res[2]); [EOL]     assertEquals("c", res[3]); [EOL]     str = "  a b c"; [EOL]     res = StringUtils.splitPreserveAllTokens(str, ' '); [EOL]     assertEquals(5, res.length); [EOL]     assertEquals("", res[0]); [EOL]     assertEquals("", res[1]); [EOL]     assertEquals("a", res[2]); [EOL]     assertEquals("b", res[3]); [EOL]     assertEquals("c", res[4]); [EOL]     str = "a b c "; [EOL]     res = StringUtils.splitPreserveAllTokens(str, ' '); [EOL]     assertEquals(4, res.length); [EOL]     assertEquals("a", res[0]); [EOL]     assertEquals("b", res[1]); [EOL]     assertEquals("c", res[2]); [EOL]     assertEquals("", res[3]); [EOL]     str = "a b c  "; [EOL]     res = StringUtils.splitPreserveAllTokens(str, ' '); [EOL]     assertEquals(5, res.length); [EOL]     assertEquals("a", res[0]); [EOL]     assertEquals("b", res[1]); [EOL]     assertEquals("c", res[2]); [EOL]     assertEquals("", res[3]); [EOL]     assertEquals("", res[3]); [EOL]     { [EOL]         String[] results; [EOL]         final String[] expectedResults = { "a", "", "b", "c" }; [EOL]         results = StringUtils.splitPreserveAllTokens("a..b.c", '.'); [EOL]         assertEquals(expectedResults.length, results.length); [EOL]         for (int i = 0; i < expectedResults.length; i++) { [EOL]             assertEquals(expectedResults[i], results[i]); [EOL]         } [EOL]     } [EOL] }
@Test [EOL] public void testSplitPreserveAllTokens_StringChar() { [EOL]     assertArrayEquals(null, StringUtils.splitPreserveAllTokens(null, '.')); [EOL]     assertEquals(0, StringUtils.splitPreserveAllTokens("", '.').length); [EOL]     String str = "a.b. c"; [EOL]     String[] res = StringUtils.splitPreserveAllTokens(str, '.'); [EOL]     assertEquals(3, res.length); [EOL]     assertEquals("a", res[0]); [EOL]     assertEquals("b", res[1]); [EOL]     assertEquals(" c", res[2]); [EOL]     str = "a.b.. c"; [EOL]     res = StringUtils.splitPreserveAllTokens(str, '.'); [EOL]     assertEquals(4, res.length); [EOL]     assertEquals("a", res[0]); [EOL]     assertEquals("b", res[1]); [EOL]     assertEquals("", res[2]); [EOL]     assertEquals(" c", res[3]); [EOL]     str = ".a."; [EOL]     res = StringUtils.splitPreserveAllTokens(str, '.'); [EOL]     assertEquals(3, res.length); [EOL]     assertEquals("", res[0]); [EOL]     assertEquals("a", res[1]); [EOL]     assertEquals("", res[2]); [EOL]     str = ".a.."; [EOL]     res = StringUtils.splitPreserveAllTokens(str, '.'); [EOL]     assertEquals(4, res.length); [EOL]     assertEquals("", res[0]); [EOL]     assertEquals("a", res[1]); [EOL]     assertEquals("", res[2]); [EOL]     assertEquals("", res[3]); [EOL]     str = "..a."; [EOL]     res = StringUtils.splitPreserveAllTokens(str, '.'); [EOL]     assertEquals(4, res.length); [EOL]     assertEquals("", res[0]); [EOL]     assertEquals("", res[1]); [EOL]     assertEquals("a", res[2]); [EOL]     assertEquals("", res[3]); [EOL]     str = "..a"; [EOL]     res = StringUtils.splitPreserveAllTokens(str, '.'); [EOL]     assertEquals(3, res.length); [EOL]     assertEquals("", res[0]); [EOL]     assertEquals("", res[1]); [EOL]     assertEquals("a", res[2]); [EOL]     str = "a b c"; [EOL]     res = StringUtils.splitPreserveAllTokens(str, ' '); [EOL]     assertEquals(3, res.length); [EOL]     assertEquals("a", res[0]); [EOL]     assertEquals("b", res[1]); [EOL]     assertEquals("c", res[2]); [EOL]     str = "a  b  c"; [EOL]     res = StringUtils.splitPreserveAllTokens(str, ' '); [EOL]     assertEquals(5, res.length); [EOL]     assertEquals("a", res[0]); [EOL]     assertEquals("", res[1]); [EOL]     assertEquals("b", res[2]); [EOL]     assertEquals("", res[3]); [EOL]     assertEquals("c", res[4]); [EOL]     str = " a b c"; [EOL]     res = StringUtils.splitPreserveAllTokens(str, ' '); [EOL]     assertEquals(4, res.length); [EOL]     assertEquals("", res[0]); [EOL]     assertEquals("a", res[1]); [EOL]     assertEquals("b", res[2]); [EOL]     assertEquals("c", res[3]); [EOL]     str = "  a b c"; [EOL]     res = StringUtils.splitPreserveAllTokens(str, ' '); [EOL]     assertEquals(5, res.length); [EOL]     assertEquals("", res[0]); [EOL]     assertEquals("", res[1]); [EOL]     assertEquals("a", res[2]); [EOL]     assertEquals("b", res[3]); [EOL]     assertEquals("c", res[4]); [EOL]     str = "a b c "; [EOL]     res = StringUtils.splitPreserveAllTokens(str, ' '); [EOL]     assertEquals(4, res.length); [EOL]     assertEquals("a", res[0]); [EOL]     assertEquals("b", res[1]); [EOL]     assertEquals("c", res[2]); [EOL]     assertEquals("", res[3]); [EOL]     str = "a b c  "; [EOL]     res = StringUtils.splitPreserveAllTokens(str, ' '); [EOL]     assertEquals(5, res.length); [EOL]     assertEquals("a", res[0]); [EOL]     assertEquals("b", res[1]); [EOL]     assertEquals("c", res[2]); [EOL]     assertEquals("", res[3]); [EOL]     assertEquals("", res[3]); [EOL]     { [EOL]         String[] results; [EOL]         final String[] expectedResults = { "a", "", "b", "c" }; [EOL]         results = StringUtils.splitPreserveAllTokens("a..b.c", '.'); [EOL]         assertEquals(expectedResults.length, results.length); [EOL]         for (int i = 0; i < expectedResults.length; i++) { [EOL]             assertEquals(expectedResults[i], results[i]); [EOL]         } [EOL]     } [EOL] }
@Test [EOL] public void testSplitPreserveAllTokens_StringChar() { [EOL]     assertArrayEquals(null, StringUtils.splitPreserveAllTokens(null, '.')); [EOL]     assertEquals(0, StringUtils.splitPreserveAllTokens("", '.').length); [EOL]     String str = "a.b. c"; [EOL]     String[] res = StringUtils.splitPreserveAllTokens(str, '.'); [EOL]     assertEquals(3, res.length); [EOL]     assertEquals("a", res[0]); [EOL]     assertEquals("b", res[1]); [EOL]     assertEquals(" c", res[2]); [EOL]     str = "a.b.. c"; [EOL]     res = StringUtils.splitPreserveAllTokens(str, '.'); [EOL]     assertEquals(4, res.length); [EOL]     assertEquals("a", res[0]); [EOL]     assertEquals("b", res[1]); [EOL]     assertEquals("", res[2]); [EOL]     assertEquals(" c", res[3]); [EOL]     str = ".a."; [EOL]     res = StringUtils.splitPreserveAllTokens(str, '.'); [EOL]     assertEquals(3, res.length); [EOL]     assertEquals("", res[0]); [EOL]     assertEquals("a", res[1]); [EOL]     assertEquals("", res[2]); [EOL]     str = ".a.."; [EOL]     res = StringUtils.splitPreserveAllTokens(str, '.'); [EOL]     assertEquals(4, res.length); [EOL]     assertEquals("", res[0]); [EOL]     assertEquals("a", res[1]); [EOL]     assertEquals("", res[2]); [EOL]     assertEquals("", res[3]); [EOL]     str = "..a."; [EOL]     res = StringUtils.splitPreserveAllTokens(str, '.'); [EOL]     assertEquals(4, res.length); [EOL]     assertEquals("", res[0]); [EOL]     assertEquals("", res[1]); [EOL]     assertEquals("a", res[2]); [EOL]     assertEquals("", res[3]); [EOL]     str = "..a"; [EOL]     res = StringUtils.splitPreserveAllTokens(str, '.'); [EOL]     assertEquals(3, res.length); [EOL]     assertEquals("", res[0]); [EOL]     assertEquals("", res[1]); [EOL]     assertEquals("a", res[2]); [EOL]     str = "a b c"; [EOL]     res = StringUtils.splitPreserveAllTokens(str, ' '); [EOL]     assertEquals(3, res.length); [EOL]     assertEquals("a", res[0]); [EOL]     assertEquals("b", res[1]); [EOL]     assertEquals("c", res[2]); [EOL]     str = "a  b  c"; [EOL]     res = StringUtils.splitPreserveAllTokens(str, ' '); [EOL]     assertEquals(5, res.length); [EOL]     assertEquals("a", res[0]); [EOL]     assertEquals("", res[1]); [EOL]     assertEquals("b", res[2]); [EOL]     assertEquals("", res[3]); [EOL]     assertEquals("c", res[4]); [EOL]     str = " a b c"; [EOL]     res = StringUtils.splitPreserveAllTokens(str, ' '); [EOL]     assertEquals(4, res.length); [EOL]     assertEquals("", res[0]); [EOL]     assertEquals("a", res[1]); [EOL]     assertEquals("b", res[2]); [EOL]     assertEquals("c", res[3]); [EOL]     str = "  a b c"; [EOL]     res = StringUtils.splitPreserveAllTokens(str, ' '); [EOL]     assertEquals(5, res.length); [EOL]     assertEquals("", res[0]); [EOL]     assertEquals("", res[1]); [EOL]     assertEquals("a", res[2]); [EOL]     assertEquals("b", res[3]); [EOL]     assertEquals("c", res[4]); [EOL]     str = "a b c "; [EOL]     res = StringUtils.splitPreserveAllTokens(str, ' '); [EOL]     assertEquals(4, res.length); [EOL]     assertEquals("a", res[0]); [EOL]     assertEquals("b", res[1]); [EOL]     assertEquals("c", res[2]); [EOL]     assertEquals("", res[3]); [EOL]     str = "a b c  "; [EOL]     res = StringUtils.splitPreserveAllTokens(str, ' '); [EOL]     assertEquals(5, res.length); [EOL]     assertEquals("a", res[0]); [EOL]     assertEquals("b", res[1]); [EOL]     assertEquals("c", res[2]); [EOL]     assertEquals("", res[3]); [EOL]     assertEquals("", res[3]); [EOL]     { [EOL]         String[] results; [EOL]         final String[] expectedResults = { "a", "", "b", "c" }; [EOL]         results = StringUtils.splitPreserveAllTokens("a..b.c", '.'); [EOL]         assertEquals(expectedResults.length, results.length); [EOL]         for (int i = 0; i < expectedResults.length; i++) { [EOL]             assertEquals(expectedResults[i], results[i]); [EOL]         } [EOL]     } [EOL] }
@Test [EOL] public void testSplitByCharacterType() { [EOL]     assertNull(StringUtils.splitByCharacterType(null)); [EOL]     assertEquals(0, StringUtils.splitByCharacterType("").length); [EOL]     assertTrue(ArrayUtils.isEquals(new String[] { "ab", " ", "de", " ", "fg" }, StringUtils.splitByCharacterType("ab de fg"))); [EOL]     assertTrue(ArrayUtils.isEquals(new String[] { "ab", "   ", "de", " ", "fg" }, StringUtils.splitByCharacterType("ab   de fg"))); [EOL]     assertTrue(ArrayUtils.isEquals(new String[] { "ab", ":", "cd", ":", "ef" }, StringUtils.splitByCharacterType("ab:cd:ef"))); [EOL]     assertTrue(ArrayUtils.isEquals(new String[] { "number", "5" }, StringUtils.splitByCharacterType("number5"))); [EOL]     assertTrue(ArrayUtils.isEquals(new String[] { "foo", "B", "ar" }, StringUtils.splitByCharacterType("fooBar"))); [EOL]     assertTrue(ArrayUtils.isEquals(new String[] { "foo", "200", "B", "ar" }, StringUtils.splitByCharacterType("foo200Bar"))); [EOL]     assertTrue(ArrayUtils.isEquals(new String[] { "ASFR", "ules" }, StringUtils.splitByCharacterType("ASFRules"))); [EOL] }
@Test [EOL] public void testSplitByCharacterType() { [EOL]     assertNull(StringUtils.splitByCharacterType(null)); [EOL]     assertEquals(0, StringUtils.splitByCharacterType("").length); [EOL]     assertTrue(ArrayUtils.isEquals(new String[] { "ab", " ", "de", " ", "fg" }, StringUtils.splitByCharacterType("ab de fg"))); [EOL]     assertTrue(ArrayUtils.isEquals(new String[] { "ab", "   ", "de", " ", "fg" }, StringUtils.splitByCharacterType("ab   de fg"))); [EOL]     assertTrue(ArrayUtils.isEquals(new String[] { "ab", ":", "cd", ":", "ef" }, StringUtils.splitByCharacterType("ab:cd:ef"))); [EOL]     assertTrue(ArrayUtils.isEquals(new String[] { "number", "5" }, StringUtils.splitByCharacterType("number5"))); [EOL]     assertTrue(ArrayUtils.isEquals(new String[] { "foo", "B", "ar" }, StringUtils.splitByCharacterType("fooBar"))); [EOL]     assertTrue(ArrayUtils.isEquals(new String[] { "foo", "200", "B", "ar" }, StringUtils.splitByCharacterType("foo200Bar"))); [EOL]     assertTrue(ArrayUtils.isEquals(new String[] { "ASFR", "ules" }, StringUtils.splitByCharacterType("ASFRules"))); [EOL] }
@Test [EOL] public void testSplitByCharacterType() { [EOL]     assertNull(StringUtils.splitByCharacterType(null)); [EOL]     assertEquals(0, StringUtils.splitByCharacterType("").length); [EOL]     assertTrue(ArrayUtils.isEquals(new String[] { "ab", " ", "de", " ", "fg" }, StringUtils.splitByCharacterType("ab de fg"))); [EOL]     assertTrue(ArrayUtils.isEquals(new String[] { "ab", "   ", "de", " ", "fg" }, StringUtils.splitByCharacterType("ab   de fg"))); [EOL]     assertTrue(ArrayUtils.isEquals(new String[] { "ab", ":", "cd", ":", "ef" }, StringUtils.splitByCharacterType("ab:cd:ef"))); [EOL]     assertTrue(ArrayUtils.isEquals(new String[] { "number", "5" }, StringUtils.splitByCharacterType("number5"))); [EOL]     assertTrue(ArrayUtils.isEquals(new String[] { "foo", "B", "ar" }, StringUtils.splitByCharacterType("fooBar"))); [EOL]     assertTrue(ArrayUtils.isEquals(new String[] { "foo", "200", "B", "ar" }, StringUtils.splitByCharacterType("foo200Bar"))); [EOL]     assertTrue(ArrayUtils.isEquals(new String[] { "ASFR", "ules" }, StringUtils.splitByCharacterType("ASFRules"))); [EOL] }
@Test [EOL] public void testSplitByCharacterType() { [EOL]     assertNull(StringUtils.splitByCharacterType(null)); [EOL]     assertEquals(0, StringUtils.splitByCharacterType("").length); [EOL]     assertTrue(ArrayUtils.isEquals(new String[] { "ab", " ", "de", " ", "fg" }, StringUtils.splitByCharacterType("ab de fg"))); [EOL]     assertTrue(ArrayUtils.isEquals(new String[] { "ab", "   ", "de", " ", "fg" }, StringUtils.splitByCharacterType("ab   de fg"))); [EOL]     assertTrue(ArrayUtils.isEquals(new String[] { "ab", ":", "cd", ":", "ef" }, StringUtils.splitByCharacterType("ab:cd:ef"))); [EOL]     assertTrue(ArrayUtils.isEquals(new String[] { "number", "5" }, StringUtils.splitByCharacterType("number5"))); [EOL]     assertTrue(ArrayUtils.isEquals(new String[] { "foo", "B", "ar" }, StringUtils.splitByCharacterType("fooBar"))); [EOL]     assertTrue(ArrayUtils.isEquals(new String[] { "foo", "200", "B", "ar" }, StringUtils.splitByCharacterType("foo200Bar"))); [EOL]     assertTrue(ArrayUtils.isEquals(new String[] { "ASFR", "ules" }, StringUtils.splitByCharacterType("ASFRules"))); [EOL] }
@Test [EOL] public void testJoin_ArrayCharSeparator() { [EOL]     assertEquals(null, StringUtils.join((Object[]) null, ',')); [EOL]     assertEquals(TEXT_LIST_CHAR, StringUtils.join(ARRAY_LIST, SEPARATOR_CHAR)); [EOL]     assertEquals("", StringUtils.join(EMPTY_ARRAY_LIST, SEPARATOR_CHAR)); [EOL]     assertEquals(";;foo", StringUtils.join(MIXED_ARRAY_LIST, SEPARATOR_CHAR)); [EOL]     assertEquals("foo;2", StringUtils.join(MIXED_TYPE_LIST, SEPARATOR_CHAR)); [EOL]     assertEquals("/", StringUtils.join(MIXED_ARRAY_LIST, '/', 0, MIXED_ARRAY_LIST.length - 1)); [EOL]     assertEquals("foo", StringUtils.join(MIXED_TYPE_LIST, '/', 0, 1)); [EOL]     assertEquals("null", StringUtils.join(NULL_TO_STRING_LIST, '/', 0, 1)); [EOL]     assertEquals("foo/2", StringUtils.join(MIXED_TYPE_LIST, '/', 0, 2)); [EOL]     assertEquals("2", StringUtils.join(MIXED_TYPE_LIST, '/', 1, 2)); [EOL]     assertEquals("", StringUtils.join(MIXED_TYPE_LIST, '/', 2, 1)); [EOL] }
@Test [EOL] public void testJoin_ArrayCharSeparator() { [EOL]     assertEquals(null, StringUtils.join((Object[]) null, ',')); [EOL]     assertEquals(TEXT_LIST_CHAR, StringUtils.join(ARRAY_LIST, SEPARATOR_CHAR)); [EOL]     assertEquals("", StringUtils.join(EMPTY_ARRAY_LIST, SEPARATOR_CHAR)); [EOL]     assertEquals(";;foo", StringUtils.join(MIXED_ARRAY_LIST, SEPARATOR_CHAR)); [EOL]     assertEquals("foo;2", StringUtils.join(MIXED_TYPE_LIST, SEPARATOR_CHAR)); [EOL]     assertEquals("/", StringUtils.join(MIXED_ARRAY_LIST, '/', 0, MIXED_ARRAY_LIST.length - 1)); [EOL]     assertEquals("foo", StringUtils.join(MIXED_TYPE_LIST, '/', 0, 1)); [EOL]     assertEquals("null", StringUtils.join(NULL_TO_STRING_LIST, '/', 0, 1)); [EOL]     assertEquals("foo/2", StringUtils.join(MIXED_TYPE_LIST, '/', 0, 2)); [EOL]     assertEquals("2", StringUtils.join(MIXED_TYPE_LIST, '/', 1, 2)); [EOL]     assertEquals("", StringUtils.join(MIXED_TYPE_LIST, '/', 2, 1)); [EOL] }
@Test [EOL] public void testJoin_ArrayCharSeparator() { [EOL]     assertEquals(null, StringUtils.join((Object[]) null, ',')); [EOL]     assertEquals(TEXT_LIST_CHAR, StringUtils.join(ARRAY_LIST, SEPARATOR_CHAR)); [EOL]     assertEquals("", StringUtils.join(EMPTY_ARRAY_LIST, SEPARATOR_CHAR)); [EOL]     assertEquals(";;foo", StringUtils.join(MIXED_ARRAY_LIST, SEPARATOR_CHAR)); [EOL]     assertEquals("foo;2", StringUtils.join(MIXED_TYPE_LIST, SEPARATOR_CHAR)); [EOL]     assertEquals("/", StringUtils.join(MIXED_ARRAY_LIST, '/', 0, MIXED_ARRAY_LIST.length - 1)); [EOL]     assertEquals("foo", StringUtils.join(MIXED_TYPE_LIST, '/', 0, 1)); [EOL]     assertEquals("null", StringUtils.join(NULL_TO_STRING_LIST, '/', 0, 1)); [EOL]     assertEquals("foo/2", StringUtils.join(MIXED_TYPE_LIST, '/', 0, 2)); [EOL]     assertEquals("2", StringUtils.join(MIXED_TYPE_LIST, '/', 1, 2)); [EOL]     assertEquals("", StringUtils.join(MIXED_TYPE_LIST, '/', 2, 1)); [EOL] }
@Test [EOL] public void testJoin_ArrayCharSeparator() { [EOL]     assertEquals(null, StringUtils.join((Object[]) null, ',')); [EOL]     assertEquals(TEXT_LIST_CHAR, StringUtils.join(ARRAY_LIST, SEPARATOR_CHAR)); [EOL]     assertEquals("", StringUtils.join(EMPTY_ARRAY_LIST, SEPARATOR_CHAR)); [EOL]     assertEquals(";;foo", StringUtils.join(MIXED_ARRAY_LIST, SEPARATOR_CHAR)); [EOL]     assertEquals("foo;2", StringUtils.join(MIXED_TYPE_LIST, SEPARATOR_CHAR)); [EOL]     assertEquals("/", StringUtils.join(MIXED_ARRAY_LIST, '/', 0, MIXED_ARRAY_LIST.length - 1)); [EOL]     assertEquals("foo", StringUtils.join(MIXED_TYPE_LIST, '/', 0, 1)); [EOL]     assertEquals("null", StringUtils.join(NULL_TO_STRING_LIST, '/', 0, 1)); [EOL]     assertEquals("foo/2", StringUtils.join(MIXED_TYPE_LIST, '/', 0, 2)); [EOL]     assertEquals("2", StringUtils.join(MIXED_TYPE_LIST, '/', 1, 2)); [EOL]     assertEquals("", StringUtils.join(MIXED_TYPE_LIST, '/', 2, 1)); [EOL] }
@Test [EOL] public void testJoin_ArrayOfFloats() { [EOL]     assertEquals(null, StringUtils.join((float[]) null, ',')); [EOL]     assertEquals("1.0;2.0", StringUtils.join(FLOAT_PRIM_LIST, SEPARATOR_CHAR)); [EOL]     assertEquals("2.0", StringUtils.join(FLOAT_PRIM_LIST, SEPARATOR_CHAR, 1, 2)); [EOL] }
@Test [EOL] public void testJoin_ArrayOfFloats() { [EOL]     assertEquals(null, StringUtils.join((float[]) null, ',')); [EOL]     assertEquals("1.0;2.0", StringUtils.join(FLOAT_PRIM_LIST, SEPARATOR_CHAR)); [EOL]     assertEquals("2.0", StringUtils.join(FLOAT_PRIM_LIST, SEPARATOR_CHAR, 1, 2)); [EOL] }
@Test [EOL] public void testJoin_ArrayOfFloats() { [EOL]     assertEquals(null, StringUtils.join((float[]) null, ',')); [EOL]     assertEquals("1.0;2.0", StringUtils.join(FLOAT_PRIM_LIST, SEPARATOR_CHAR)); [EOL]     assertEquals("2.0", StringUtils.join(FLOAT_PRIM_LIST, SEPARATOR_CHAR, 1, 2)); [EOL] }
@Test [EOL] public void testJoin_ArrayCharSeparator() { [EOL]     assertEquals(null, StringUtils.join((Object[]) null, ',')); [EOL]     assertEquals(TEXT_LIST_CHAR, StringUtils.join(ARRAY_LIST, SEPARATOR_CHAR)); [EOL]     assertEquals("", StringUtils.join(EMPTY_ARRAY_LIST, SEPARATOR_CHAR)); [EOL]     assertEquals(";;foo", StringUtils.join(MIXED_ARRAY_LIST, SEPARATOR_CHAR)); [EOL]     assertEquals("foo;2", StringUtils.join(MIXED_TYPE_LIST, SEPARATOR_CHAR)); [EOL]     assertEquals("/", StringUtils.join(MIXED_ARRAY_LIST, '/', 0, MIXED_ARRAY_LIST.length - 1)); [EOL]     assertEquals("foo", StringUtils.join(MIXED_TYPE_LIST, '/', 0, 1)); [EOL]     assertEquals("null", StringUtils.join(NULL_TO_STRING_LIST, '/', 0, 1)); [EOL]     assertEquals("foo/2", StringUtils.join(MIXED_TYPE_LIST, '/', 0, 2)); [EOL]     assertEquals("2", StringUtils.join(MIXED_TYPE_LIST, '/', 1, 2)); [EOL]     assertEquals("", StringUtils.join(MIXED_TYPE_LIST, '/', 2, 1)); [EOL] }
@Test [EOL] public void testJoin_ArrayCharSeparator() { [EOL]     assertEquals(null, StringUtils.join((Object[]) null, ',')); [EOL]     assertEquals(TEXT_LIST_CHAR, StringUtils.join(ARRAY_LIST, SEPARATOR_CHAR)); [EOL]     assertEquals("", StringUtils.join(EMPTY_ARRAY_LIST, SEPARATOR_CHAR)); [EOL]     assertEquals(";;foo", StringUtils.join(MIXED_ARRAY_LIST, SEPARATOR_CHAR)); [EOL]     assertEquals("foo;2", StringUtils.join(MIXED_TYPE_LIST, SEPARATOR_CHAR)); [EOL]     assertEquals("/", StringUtils.join(MIXED_ARRAY_LIST, '/', 0, MIXED_ARRAY_LIST.length - 1)); [EOL]     assertEquals("foo", StringUtils.join(MIXED_TYPE_LIST, '/', 0, 1)); [EOL]     assertEquals("null", StringUtils.join(NULL_TO_STRING_LIST, '/', 0, 1)); [EOL]     assertEquals("foo/2", StringUtils.join(MIXED_TYPE_LIST, '/', 0, 2)); [EOL]     assertEquals("2", StringUtils.join(MIXED_TYPE_LIST, '/', 1, 2)); [EOL]     assertEquals("", StringUtils.join(MIXED_TYPE_LIST, '/', 2, 1)); [EOL] }
@Test [EOL] public void testJoin_ArrayCharSeparator() { [EOL]     assertEquals(null, StringUtils.join((Object[]) null, ',')); [EOL]     assertEquals(TEXT_LIST_CHAR, StringUtils.join(ARRAY_LIST, SEPARATOR_CHAR)); [EOL]     assertEquals("", StringUtils.join(EMPTY_ARRAY_LIST, SEPARATOR_CHAR)); [EOL]     assertEquals(";;foo", StringUtils.join(MIXED_ARRAY_LIST, SEPARATOR_CHAR)); [EOL]     assertEquals("foo;2", StringUtils.join(MIXED_TYPE_LIST, SEPARATOR_CHAR)); [EOL]     assertEquals("/", StringUtils.join(MIXED_ARRAY_LIST, '/', 0, MIXED_ARRAY_LIST.length - 1)); [EOL]     assertEquals("foo", StringUtils.join(MIXED_TYPE_LIST, '/', 0, 1)); [EOL]     assertEquals("null", StringUtils.join(NULL_TO_STRING_LIST, '/', 0, 1)); [EOL]     assertEquals("foo/2", StringUtils.join(MIXED_TYPE_LIST, '/', 0, 2)); [EOL]     assertEquals("2", StringUtils.join(MIXED_TYPE_LIST, '/', 1, 2)); [EOL]     assertEquals("", StringUtils.join(MIXED_TYPE_LIST, '/', 2, 1)); [EOL] }
@Test [EOL] public void testJoin_ArrayCharSeparator() { [EOL]     assertEquals(null, StringUtils.join((Object[]) null, ',')); [EOL]     assertEquals(TEXT_LIST_CHAR, StringUtils.join(ARRAY_LIST, SEPARATOR_CHAR)); [EOL]     assertEquals("", StringUtils.join(EMPTY_ARRAY_LIST, SEPARATOR_CHAR)); [EOL]     assertEquals(";;foo", StringUtils.join(MIXED_ARRAY_LIST, SEPARATOR_CHAR)); [EOL]     assertEquals("foo;2", StringUtils.join(MIXED_TYPE_LIST, SEPARATOR_CHAR)); [EOL]     assertEquals("/", StringUtils.join(MIXED_ARRAY_LIST, '/', 0, MIXED_ARRAY_LIST.length - 1)); [EOL]     assertEquals("foo", StringUtils.join(MIXED_TYPE_LIST, '/', 0, 1)); [EOL]     assertEquals("null", StringUtils.join(NULL_TO_STRING_LIST, '/', 0, 1)); [EOL]     assertEquals("foo/2", StringUtils.join(MIXED_TYPE_LIST, '/', 0, 2)); [EOL]     assertEquals("2", StringUtils.join(MIXED_TYPE_LIST, '/', 1, 2)); [EOL]     assertEquals("", StringUtils.join(MIXED_TYPE_LIST, '/', 2, 1)); [EOL] }
@Test [EOL] public void testJoin_ArrayCharSeparator() { [EOL]     assertEquals(null, StringUtils.join((Object[]) null, ',')); [EOL]     assertEquals(TEXT_LIST_CHAR, StringUtils.join(ARRAY_LIST, SEPARATOR_CHAR)); [EOL]     assertEquals("", StringUtils.join(EMPTY_ARRAY_LIST, SEPARATOR_CHAR)); [EOL]     assertEquals(";;foo", StringUtils.join(MIXED_ARRAY_LIST, SEPARATOR_CHAR)); [EOL]     assertEquals("foo;2", StringUtils.join(MIXED_TYPE_LIST, SEPARATOR_CHAR)); [EOL]     assertEquals("/", StringUtils.join(MIXED_ARRAY_LIST, '/', 0, MIXED_ARRAY_LIST.length - 1)); [EOL]     assertEquals("foo", StringUtils.join(MIXED_TYPE_LIST, '/', 0, 1)); [EOL]     assertEquals("null", StringUtils.join(NULL_TO_STRING_LIST, '/', 0, 1)); [EOL]     assertEquals("foo/2", StringUtils.join(MIXED_TYPE_LIST, '/', 0, 2)); [EOL]     assertEquals("2", StringUtils.join(MIXED_TYPE_LIST, '/', 1, 2)); [EOL]     assertEquals("", StringUtils.join(MIXED_TYPE_LIST, '/', 2, 1)); [EOL] }
@Test [EOL] public void testJoin_ArrayOfFloats() { [EOL]     assertEquals(null, StringUtils.join((float[]) null, ',')); [EOL]     assertEquals("1.0;2.0", StringUtils.join(FLOAT_PRIM_LIST, SEPARATOR_CHAR)); [EOL]     assertEquals("2.0", StringUtils.join(FLOAT_PRIM_LIST, SEPARATOR_CHAR, 1, 2)); [EOL] }
@Test [EOL] public void testJoin_ArrayOfFloats() { [EOL]     assertEquals(null, StringUtils.join((float[]) null, ',')); [EOL]     assertEquals("1.0;2.0", StringUtils.join(FLOAT_PRIM_LIST, SEPARATOR_CHAR)); [EOL]     assertEquals("2.0", StringUtils.join(FLOAT_PRIM_LIST, SEPARATOR_CHAR, 1, 2)); [EOL] }
@Test [EOL] public void testJoin_ArrayOfFloats() { [EOL]     assertEquals(null, StringUtils.join((float[]) null, ',')); [EOL]     assertEquals("1.0;2.0", StringUtils.join(FLOAT_PRIM_LIST, SEPARATOR_CHAR)); [EOL]     assertEquals("2.0", StringUtils.join(FLOAT_PRIM_LIST, SEPARATOR_CHAR, 1, 2)); [EOL] }
@Test [EOL] public void testJoin_ArrayOfFloats() { [EOL]     assertEquals(null, StringUtils.join((float[]) null, ',')); [EOL]     assertEquals("1.0;2.0", StringUtils.join(FLOAT_PRIM_LIST, SEPARATOR_CHAR)); [EOL]     assertEquals("2.0", StringUtils.join(FLOAT_PRIM_LIST, SEPARATOR_CHAR, 1, 2)); [EOL] }
@Test [EOL] public void testJoin_ArrayOfFloats() { [EOL]     assertEquals(null, StringUtils.join((float[]) null, ',')); [EOL]     assertEquals("1.0;2.0", StringUtils.join(FLOAT_PRIM_LIST, SEPARATOR_CHAR)); [EOL]     assertEquals("2.0", StringUtils.join(FLOAT_PRIM_LIST, SEPARATOR_CHAR, 1, 2)); [EOL] }
@Test [EOL] public void testJoin_ArrayOfFloats() { [EOL]     assertEquals(null, StringUtils.join((float[]) null, ',')); [EOL]     assertEquals("1.0;2.0", StringUtils.join(FLOAT_PRIM_LIST, SEPARATOR_CHAR)); [EOL]     assertEquals("2.0", StringUtils.join(FLOAT_PRIM_LIST, SEPARATOR_CHAR, 1, 2)); [EOL] }
@Test [EOL] public void testJoin_ArrayString() { [EOL]     assertEquals(null, StringUtils.join((Object[]) null, null)); [EOL]     assertEquals(TEXT_LIST_NOSEP, StringUtils.join(ARRAY_LIST, null)); [EOL]     assertEquals(TEXT_LIST_NOSEP, StringUtils.join(ARRAY_LIST, "")); [EOL]     assertEquals("", StringUtils.join(NULL_ARRAY_LIST, null)); [EOL]     assertEquals("", StringUtils.join(EMPTY_ARRAY_LIST, null)); [EOL]     assertEquals("", StringUtils.join(EMPTY_ARRAY_LIST, "")); [EOL]     assertEquals("", StringUtils.join(EMPTY_ARRAY_LIST, SEPARATOR)); [EOL]     assertEquals(TEXT_LIST, StringUtils.join(ARRAY_LIST, SEPARATOR)); [EOL]     assertEquals(",,foo", StringUtils.join(MIXED_ARRAY_LIST, SEPARATOR)); [EOL]     assertEquals("foo,2", StringUtils.join(MIXED_TYPE_LIST, SEPARATOR)); [EOL]     assertEquals("/", StringUtils.join(MIXED_ARRAY_LIST, "/", 0, MIXED_ARRAY_LIST.length - 1)); [EOL]     assertEquals("", StringUtils.join(MIXED_ARRAY_LIST, "", 0, MIXED_ARRAY_LIST.length - 1)); [EOL]     assertEquals("foo", StringUtils.join(MIXED_TYPE_LIST, "/", 0, 1)); [EOL]     assertEquals("foo/2", StringUtils.join(MIXED_TYPE_LIST, "/", 0, 2)); [EOL]     assertEquals("2", StringUtils.join(MIXED_TYPE_LIST, "/", 1, 2)); [EOL]     assertEquals("", StringUtils.join(MIXED_TYPE_LIST, "/", 2, 1)); [EOL] }
@Test [EOL] public void testJoin_ArrayString() { [EOL]     assertEquals(null, StringUtils.join((Object[]) null, null)); [EOL]     assertEquals(TEXT_LIST_NOSEP, StringUtils.join(ARRAY_LIST, null)); [EOL]     assertEquals(TEXT_LIST_NOSEP, StringUtils.join(ARRAY_LIST, "")); [EOL]     assertEquals("", StringUtils.join(NULL_ARRAY_LIST, null)); [EOL]     assertEquals("", StringUtils.join(EMPTY_ARRAY_LIST, null)); [EOL]     assertEquals("", StringUtils.join(EMPTY_ARRAY_LIST, "")); [EOL]     assertEquals("", StringUtils.join(EMPTY_ARRAY_LIST, SEPARATOR)); [EOL]     assertEquals(TEXT_LIST, StringUtils.join(ARRAY_LIST, SEPARATOR)); [EOL]     assertEquals(",,foo", StringUtils.join(MIXED_ARRAY_LIST, SEPARATOR)); [EOL]     assertEquals("foo,2", StringUtils.join(MIXED_TYPE_LIST, SEPARATOR)); [EOL]     assertEquals("/", StringUtils.join(MIXED_ARRAY_LIST, "/", 0, MIXED_ARRAY_LIST.length - 1)); [EOL]     assertEquals("", StringUtils.join(MIXED_ARRAY_LIST, "", 0, MIXED_ARRAY_LIST.length - 1)); [EOL]     assertEquals("foo", StringUtils.join(MIXED_TYPE_LIST, "/", 0, 1)); [EOL]     assertEquals("foo/2", StringUtils.join(MIXED_TYPE_LIST, "/", 0, 2)); [EOL]     assertEquals("2", StringUtils.join(MIXED_TYPE_LIST, "/", 1, 2)); [EOL]     assertEquals("", StringUtils.join(MIXED_TYPE_LIST, "/", 2, 1)); [EOL] }
@Test [EOL] public void testJoin_ArrayString() { [EOL]     assertEquals(null, StringUtils.join((Object[]) null, null)); [EOL]     assertEquals(TEXT_LIST_NOSEP, StringUtils.join(ARRAY_LIST, null)); [EOL]     assertEquals(TEXT_LIST_NOSEP, StringUtils.join(ARRAY_LIST, "")); [EOL]     assertEquals("", StringUtils.join(NULL_ARRAY_LIST, null)); [EOL]     assertEquals("", StringUtils.join(EMPTY_ARRAY_LIST, null)); [EOL]     assertEquals("", StringUtils.join(EMPTY_ARRAY_LIST, "")); [EOL]     assertEquals("", StringUtils.join(EMPTY_ARRAY_LIST, SEPARATOR)); [EOL]     assertEquals(TEXT_LIST, StringUtils.join(ARRAY_LIST, SEPARATOR)); [EOL]     assertEquals(",,foo", StringUtils.join(MIXED_ARRAY_LIST, SEPARATOR)); [EOL]     assertEquals("foo,2", StringUtils.join(MIXED_TYPE_LIST, SEPARATOR)); [EOL]     assertEquals("/", StringUtils.join(MIXED_ARRAY_LIST, "/", 0, MIXED_ARRAY_LIST.length - 1)); [EOL]     assertEquals("", StringUtils.join(MIXED_ARRAY_LIST, "", 0, MIXED_ARRAY_LIST.length - 1)); [EOL]     assertEquals("foo", StringUtils.join(MIXED_TYPE_LIST, "/", 0, 1)); [EOL]     assertEquals("foo/2", StringUtils.join(MIXED_TYPE_LIST, "/", 0, 2)); [EOL]     assertEquals("2", StringUtils.join(MIXED_TYPE_LIST, "/", 1, 2)); [EOL]     assertEquals("", StringUtils.join(MIXED_TYPE_LIST, "/", 2, 1)); [EOL] }
@Test [EOL] public void testJoin_ArrayString() { [EOL]     assertEquals(null, StringUtils.join((Object[]) null, null)); [EOL]     assertEquals(TEXT_LIST_NOSEP, StringUtils.join(ARRAY_LIST, null)); [EOL]     assertEquals(TEXT_LIST_NOSEP, StringUtils.join(ARRAY_LIST, "")); [EOL]     assertEquals("", StringUtils.join(NULL_ARRAY_LIST, null)); [EOL]     assertEquals("", StringUtils.join(EMPTY_ARRAY_LIST, null)); [EOL]     assertEquals("", StringUtils.join(EMPTY_ARRAY_LIST, "")); [EOL]     assertEquals("", StringUtils.join(EMPTY_ARRAY_LIST, SEPARATOR)); [EOL]     assertEquals(TEXT_LIST, StringUtils.join(ARRAY_LIST, SEPARATOR)); [EOL]     assertEquals(",,foo", StringUtils.join(MIXED_ARRAY_LIST, SEPARATOR)); [EOL]     assertEquals("foo,2", StringUtils.join(MIXED_TYPE_LIST, SEPARATOR)); [EOL]     assertEquals("/", StringUtils.join(MIXED_ARRAY_LIST, "/", 0, MIXED_ARRAY_LIST.length - 1)); [EOL]     assertEquals("", StringUtils.join(MIXED_ARRAY_LIST, "", 0, MIXED_ARRAY_LIST.length - 1)); [EOL]     assertEquals("foo", StringUtils.join(MIXED_TYPE_LIST, "/", 0, 1)); [EOL]     assertEquals("foo/2", StringUtils.join(MIXED_TYPE_LIST, "/", 0, 2)); [EOL]     assertEquals("2", StringUtils.join(MIXED_TYPE_LIST, "/", 1, 2)); [EOL]     assertEquals("", StringUtils.join(MIXED_TYPE_LIST, "/", 2, 1)); [EOL] }
@Test [EOL] public void testJoin_ArrayString() { [EOL]     assertEquals(null, StringUtils.join((Object[]) null, null)); [EOL]     assertEquals(TEXT_LIST_NOSEP, StringUtils.join(ARRAY_LIST, null)); [EOL]     assertEquals(TEXT_LIST_NOSEP, StringUtils.join(ARRAY_LIST, "")); [EOL]     assertEquals("", StringUtils.join(NULL_ARRAY_LIST, null)); [EOL]     assertEquals("", StringUtils.join(EMPTY_ARRAY_LIST, null)); [EOL]     assertEquals("", StringUtils.join(EMPTY_ARRAY_LIST, "")); [EOL]     assertEquals("", StringUtils.join(EMPTY_ARRAY_LIST, SEPARATOR)); [EOL]     assertEquals(TEXT_LIST, StringUtils.join(ARRAY_LIST, SEPARATOR)); [EOL]     assertEquals(",,foo", StringUtils.join(MIXED_ARRAY_LIST, SEPARATOR)); [EOL]     assertEquals("foo,2", StringUtils.join(MIXED_TYPE_LIST, SEPARATOR)); [EOL]     assertEquals("/", StringUtils.join(MIXED_ARRAY_LIST, "/", 0, MIXED_ARRAY_LIST.length - 1)); [EOL]     assertEquals("", StringUtils.join(MIXED_ARRAY_LIST, "", 0, MIXED_ARRAY_LIST.length - 1)); [EOL]     assertEquals("foo", StringUtils.join(MIXED_TYPE_LIST, "/", 0, 1)); [EOL]     assertEquals("foo/2", StringUtils.join(MIXED_TYPE_LIST, "/", 0, 2)); [EOL]     assertEquals("2", StringUtils.join(MIXED_TYPE_LIST, "/", 1, 2)); [EOL]     assertEquals("", StringUtils.join(MIXED_TYPE_LIST, "/", 2, 1)); [EOL] }
@Test [EOL] public void testJoin_ArrayString() { [EOL]     assertEquals(null, StringUtils.join((Object[]) null, null)); [EOL]     assertEquals(TEXT_LIST_NOSEP, StringUtils.join(ARRAY_LIST, null)); [EOL]     assertEquals(TEXT_LIST_NOSEP, StringUtils.join(ARRAY_LIST, "")); [EOL]     assertEquals("", StringUtils.join(NULL_ARRAY_LIST, null)); [EOL]     assertEquals("", StringUtils.join(EMPTY_ARRAY_LIST, null)); [EOL]     assertEquals("", StringUtils.join(EMPTY_ARRAY_LIST, "")); [EOL]     assertEquals("", StringUtils.join(EMPTY_ARRAY_LIST, SEPARATOR)); [EOL]     assertEquals(TEXT_LIST, StringUtils.join(ARRAY_LIST, SEPARATOR)); [EOL]     assertEquals(",,foo", StringUtils.join(MIXED_ARRAY_LIST, SEPARATOR)); [EOL]     assertEquals("foo,2", StringUtils.join(MIXED_TYPE_LIST, SEPARATOR)); [EOL]     assertEquals("/", StringUtils.join(MIXED_ARRAY_LIST, "/", 0, MIXED_ARRAY_LIST.length - 1)); [EOL]     assertEquals("", StringUtils.join(MIXED_ARRAY_LIST, "", 0, MIXED_ARRAY_LIST.length - 1)); [EOL]     assertEquals("foo", StringUtils.join(MIXED_TYPE_LIST, "/", 0, 1)); [EOL]     assertEquals("foo/2", StringUtils.join(MIXED_TYPE_LIST, "/", 0, 2)); [EOL]     assertEquals("2", StringUtils.join(MIXED_TYPE_LIST, "/", 1, 2)); [EOL]     assertEquals("", StringUtils.join(MIXED_TYPE_LIST, "/", 2, 1)); [EOL] }
@Test [EOL] public void testJoin_ArrayString() { [EOL]     assertEquals(null, StringUtils.join((Object[]) null, null)); [EOL]     assertEquals(TEXT_LIST_NOSEP, StringUtils.join(ARRAY_LIST, null)); [EOL]     assertEquals(TEXT_LIST_NOSEP, StringUtils.join(ARRAY_LIST, "")); [EOL]     assertEquals("", StringUtils.join(NULL_ARRAY_LIST, null)); [EOL]     assertEquals("", StringUtils.join(EMPTY_ARRAY_LIST, null)); [EOL]     assertEquals("", StringUtils.join(EMPTY_ARRAY_LIST, "")); [EOL]     assertEquals("", StringUtils.join(EMPTY_ARRAY_LIST, SEPARATOR)); [EOL]     assertEquals(TEXT_LIST, StringUtils.join(ARRAY_LIST, SEPARATOR)); [EOL]     assertEquals(",,foo", StringUtils.join(MIXED_ARRAY_LIST, SEPARATOR)); [EOL]     assertEquals("foo,2", StringUtils.join(MIXED_TYPE_LIST, SEPARATOR)); [EOL]     assertEquals("/", StringUtils.join(MIXED_ARRAY_LIST, "/", 0, MIXED_ARRAY_LIST.length - 1)); [EOL]     assertEquals("", StringUtils.join(MIXED_ARRAY_LIST, "", 0, MIXED_ARRAY_LIST.length - 1)); [EOL]     assertEquals("foo", StringUtils.join(MIXED_TYPE_LIST, "/", 0, 1)); [EOL]     assertEquals("foo/2", StringUtils.join(MIXED_TYPE_LIST, "/", 0, 2)); [EOL]     assertEquals("2", StringUtils.join(MIXED_TYPE_LIST, "/", 1, 2)); [EOL]     assertEquals("", StringUtils.join(MIXED_TYPE_LIST, "/", 2, 1)); [EOL] }
@Test [EOL] public void testJoin_ArrayString() { [EOL]     assertEquals(null, StringUtils.join((Object[]) null, null)); [EOL]     assertEquals(TEXT_LIST_NOSEP, StringUtils.join(ARRAY_LIST, null)); [EOL]     assertEquals(TEXT_LIST_NOSEP, StringUtils.join(ARRAY_LIST, "")); [EOL]     assertEquals("", StringUtils.join(NULL_ARRAY_LIST, null)); [EOL]     assertEquals("", StringUtils.join(EMPTY_ARRAY_LIST, null)); [EOL]     assertEquals("", StringUtils.join(EMPTY_ARRAY_LIST, "")); [EOL]     assertEquals("", StringUtils.join(EMPTY_ARRAY_LIST, SEPARATOR)); [EOL]     assertEquals(TEXT_LIST, StringUtils.join(ARRAY_LIST, SEPARATOR)); [EOL]     assertEquals(",,foo", StringUtils.join(MIXED_ARRAY_LIST, SEPARATOR)); [EOL]     assertEquals("foo,2", StringUtils.join(MIXED_TYPE_LIST, SEPARATOR)); [EOL]     assertEquals("/", StringUtils.join(MIXED_ARRAY_LIST, "/", 0, MIXED_ARRAY_LIST.length - 1)); [EOL]     assertEquals("", StringUtils.join(MIXED_ARRAY_LIST, "", 0, MIXED_ARRAY_LIST.length - 1)); [EOL]     assertEquals("foo", StringUtils.join(MIXED_TYPE_LIST, "/", 0, 1)); [EOL]     assertEquals("foo/2", StringUtils.join(MIXED_TYPE_LIST, "/", 0, 2)); [EOL]     assertEquals("2", StringUtils.join(MIXED_TYPE_LIST, "/", 1, 2)); [EOL]     assertEquals("", StringUtils.join(MIXED_TYPE_LIST, "/", 2, 1)); [EOL] }
@Test [EOL] public void testJoin_ArrayString() { [EOL]     assertEquals(null, StringUtils.join((Object[]) null, null)); [EOL]     assertEquals(TEXT_LIST_NOSEP, StringUtils.join(ARRAY_LIST, null)); [EOL]     assertEquals(TEXT_LIST_NOSEP, StringUtils.join(ARRAY_LIST, "")); [EOL]     assertEquals("", StringUtils.join(NULL_ARRAY_LIST, null)); [EOL]     assertEquals("", StringUtils.join(EMPTY_ARRAY_LIST, null)); [EOL]     assertEquals("", StringUtils.join(EMPTY_ARRAY_LIST, "")); [EOL]     assertEquals("", StringUtils.join(EMPTY_ARRAY_LIST, SEPARATOR)); [EOL]     assertEquals(TEXT_LIST, StringUtils.join(ARRAY_LIST, SEPARATOR)); [EOL]     assertEquals(",,foo", StringUtils.join(MIXED_ARRAY_LIST, SEPARATOR)); [EOL]     assertEquals("foo,2", StringUtils.join(MIXED_TYPE_LIST, SEPARATOR)); [EOL]     assertEquals("/", StringUtils.join(MIXED_ARRAY_LIST, "/", 0, MIXED_ARRAY_LIST.length - 1)); [EOL]     assertEquals("", StringUtils.join(MIXED_ARRAY_LIST, "", 0, MIXED_ARRAY_LIST.length - 1)); [EOL]     assertEquals("foo", StringUtils.join(MIXED_TYPE_LIST, "/", 0, 1)); [EOL]     assertEquals("foo/2", StringUtils.join(MIXED_TYPE_LIST, "/", 0, 2)); [EOL]     assertEquals("2", StringUtils.join(MIXED_TYPE_LIST, "/", 1, 2)); [EOL]     assertEquals("", StringUtils.join(MIXED_TYPE_LIST, "/", 2, 1)); [EOL] }
@Test [EOL] public void testJoin_IteratorString() { [EOL]     assertEquals(null, StringUtils.join((Iterator<?>) null, null)); [EOL]     assertEquals(TEXT_LIST_NOSEP, StringUtils.join(Arrays.asList(ARRAY_LIST).iterator(), null)); [EOL]     assertEquals(TEXT_LIST_NOSEP, StringUtils.join(Arrays.asList(ARRAY_LIST).iterator(), "")); [EOL]     assertEquals("foo", StringUtils.join(Collections.singleton("foo").iterator(), "x")); [EOL]     assertEquals("foo", StringUtils.join(Collections.singleton("foo").iterator(), null)); [EOL]     assertEquals("", StringUtils.join(Arrays.asList(NULL_ARRAY_LIST).iterator(), null)); [EOL]     assertEquals("", StringUtils.join(Arrays.asList(EMPTY_ARRAY_LIST).iterator(), null)); [EOL]     assertEquals("", StringUtils.join(Arrays.asList(EMPTY_ARRAY_LIST).iterator(), "")); [EOL]     assertEquals("", StringUtils.join(Arrays.asList(EMPTY_ARRAY_LIST).iterator(), SEPARATOR)); [EOL]     assertEquals(TEXT_LIST, StringUtils.join(Arrays.asList(ARRAY_LIST).iterator(), SEPARATOR)); [EOL] }
@Test [EOL] public void testReplacePattern() { [EOL]     assertEquals("X", StringUtils.replacePattern("<A>\nxy\n</A>", "<A>.*</A>", "X")); [EOL] }
@Test [EOL] public void testReplacePattern() { [EOL]     assertEquals("X", StringUtils.replacePattern("<A>\nxy\n</A>", "<A>.*</A>", "X")); [EOL] }
@Test [EOL] public void testReplacePattern() { [EOL]     assertEquals("X", StringUtils.replacePattern("<A>\nxy\n</A>", "<A>.*</A>", "X")); [EOL] }
@Test [EOL] public void testReplacePattern() { [EOL]     assertEquals("X", StringUtils.replacePattern("<A>\nxy\n</A>", "<A>.*</A>", "X")); [EOL] }
@Test [EOL] public void testReplacePattern() { [EOL]     assertEquals("X", StringUtils.replacePattern("<A>\nxy\n</A>", "<A>.*</A>", "X")); [EOL] }
@Test [EOL] public void testReplacePattern() { [EOL]     assertEquals("X", StringUtils.replacePattern("<A>\nxy\n</A>", "<A>.*</A>", "X")); [EOL] }
@Test [EOL] public void testReplacePattern() { [EOL]     assertEquals("X", StringUtils.replacePattern("<A>\nxy\n</A>", "<A>.*</A>", "X")); [EOL] }
@Test [EOL] public void testReplacePattern() { [EOL]     assertEquals("X", StringUtils.replacePattern("<A>\nxy\n</A>", "<A>.*</A>", "X")); [EOL] }
@Test [EOL] public void testChop() { [EOL]     final String[][] chopCases = { { FOO_UNCAP + "\r\n", FOO_UNCAP }, { FOO_UNCAP + "\n", FOO_UNCAP }, { FOO_UNCAP + "\r", FOO_UNCAP }, { FOO_UNCAP + " \r", FOO_UNCAP + " " }, { "foo", "fo" }, { "foo\nfoo", "foo\nfo" }, { "\n", "" }, { "\r", "" }, { "\r\n", "" }, { null, null }, { "", "" }, { "a", "" } }; [EOL]     for (final String[] chopCase : chopCases) { [EOL]         final String original = chopCase[0]; [EOL]         final String expectedResult = chopCase[1]; [EOL]         assertEquals("chop(String) failed", expectedResult, StringUtils.chop(original)); [EOL]     } [EOL] }
@Test [EOL] public void testCenter_StringInt() { [EOL]     assertEquals(null, StringUtils.center(null, -1)); [EOL]     assertEquals(null, StringUtils.center(null, 4)); [EOL]     assertEquals("    ", StringUtils.center("", 4)); [EOL]     assertEquals("ab", StringUtils.center("ab", 0)); [EOL]     assertEquals("ab", StringUtils.center("ab", -1)); [EOL]     assertEquals("ab", StringUtils.center("ab", 1)); [EOL]     assertEquals("    ", StringUtils.center("", 4)); [EOL]     assertEquals(" ab ", StringUtils.center("ab", 4)); [EOL]     assertEquals("abcd", StringUtils.center("abcd", 2)); [EOL]     assertEquals(" a  ", StringUtils.center("a", 4)); [EOL]     assertEquals("  a  ", StringUtils.center("a", 5)); [EOL] }
@Test [EOL] public void testCenter_StringInt() { [EOL]     assertEquals(null, StringUtils.center(null, -1)); [EOL]     assertEquals(null, StringUtils.center(null, 4)); [EOL]     assertEquals("    ", StringUtils.center("", 4)); [EOL]     assertEquals("ab", StringUtils.center("ab", 0)); [EOL]     assertEquals("ab", StringUtils.center("ab", -1)); [EOL]     assertEquals("ab", StringUtils.center("ab", 1)); [EOL]     assertEquals("    ", StringUtils.center("", 4)); [EOL]     assertEquals(" ab ", StringUtils.center("ab", 4)); [EOL]     assertEquals("abcd", StringUtils.center("abcd", 2)); [EOL]     assertEquals(" a  ", StringUtils.center("a", 4)); [EOL]     assertEquals("  a  ", StringUtils.center("a", 5)); [EOL] }
@Test [EOL] public void testCenter_StringInt() { [EOL]     assertEquals(null, StringUtils.center(null, -1)); [EOL]     assertEquals(null, StringUtils.center(null, 4)); [EOL]     assertEquals("    ", StringUtils.center("", 4)); [EOL]     assertEquals("ab", StringUtils.center("ab", 0)); [EOL]     assertEquals("ab", StringUtils.center("ab", -1)); [EOL]     assertEquals("ab", StringUtils.center("ab", 1)); [EOL]     assertEquals("    ", StringUtils.center("", 4)); [EOL]     assertEquals(" ab ", StringUtils.center("ab", 4)); [EOL]     assertEquals("abcd", StringUtils.center("abcd", 2)); [EOL]     assertEquals(" a  ", StringUtils.center("a", 4)); [EOL]     assertEquals("  a  ", StringUtils.center("a", 5)); [EOL] }
@Test [EOL] public void testCenter_StringInt() { [EOL]     assertEquals(null, StringUtils.center(null, -1)); [EOL]     assertEquals(null, StringUtils.center(null, 4)); [EOL]     assertEquals("    ", StringUtils.center("", 4)); [EOL]     assertEquals("ab", StringUtils.center("ab", 0)); [EOL]     assertEquals("ab", StringUtils.center("ab", -1)); [EOL]     assertEquals("ab", StringUtils.center("ab", 1)); [EOL]     assertEquals("    ", StringUtils.center("", 4)); [EOL]     assertEquals(" ab ", StringUtils.center("ab", 4)); [EOL]     assertEquals("abcd", StringUtils.center("abcd", 2)); [EOL]     assertEquals(" a  ", StringUtils.center("a", 4)); [EOL]     assertEquals("  a  ", StringUtils.center("a", 5)); [EOL] }
@Test [EOL] public void testCenter_StringInt() { [EOL]     assertEquals(null, StringUtils.center(null, -1)); [EOL]     assertEquals(null, StringUtils.center(null, 4)); [EOL]     assertEquals("    ", StringUtils.center("", 4)); [EOL]     assertEquals("ab", StringUtils.center("ab", 0)); [EOL]     assertEquals("ab", StringUtils.center("ab", -1)); [EOL]     assertEquals("ab", StringUtils.center("ab", 1)); [EOL]     assertEquals("    ", StringUtils.center("", 4)); [EOL]     assertEquals(" ab ", StringUtils.center("ab", 4)); [EOL]     assertEquals("abcd", StringUtils.center("abcd", 2)); [EOL]     assertEquals(" a  ", StringUtils.center("a", 4)); [EOL]     assertEquals("  a  ", StringUtils.center("a", 5)); [EOL] }
@Test [EOL] public void testCenter_StringInt() { [EOL]     assertEquals(null, StringUtils.center(null, -1)); [EOL]     assertEquals(null, StringUtils.center(null, 4)); [EOL]     assertEquals("    ", StringUtils.center("", 4)); [EOL]     assertEquals("ab", StringUtils.center("ab", 0)); [EOL]     assertEquals("ab", StringUtils.center("ab", -1)); [EOL]     assertEquals("ab", StringUtils.center("ab", 1)); [EOL]     assertEquals("    ", StringUtils.center("", 4)); [EOL]     assertEquals(" ab ", StringUtils.center("ab", 4)); [EOL]     assertEquals("abcd", StringUtils.center("abcd", 2)); [EOL]     assertEquals(" a  ", StringUtils.center("a", 4)); [EOL]     assertEquals("  a  ", StringUtils.center("a", 5)); [EOL] }
@Test [EOL] public void testCenter_StringInt() { [EOL]     assertEquals(null, StringUtils.center(null, -1)); [EOL]     assertEquals(null, StringUtils.center(null, 4)); [EOL]     assertEquals("    ", StringUtils.center("", 4)); [EOL]     assertEquals("ab", StringUtils.center("ab", 0)); [EOL]     assertEquals("ab", StringUtils.center("ab", -1)); [EOL]     assertEquals("ab", StringUtils.center("ab", 1)); [EOL]     assertEquals("    ", StringUtils.center("", 4)); [EOL]     assertEquals(" ab ", StringUtils.center("ab", 4)); [EOL]     assertEquals("abcd", StringUtils.center("abcd", 2)); [EOL]     assertEquals(" a  ", StringUtils.center("a", 4)); [EOL]     assertEquals("  a  ", StringUtils.center("a", 5)); [EOL] }
@Test [EOL] public void testCenter_StringInt() { [EOL]     assertEquals(null, StringUtils.center(null, -1)); [EOL]     assertEquals(null, StringUtils.center(null, 4)); [EOL]     assertEquals("    ", StringUtils.center("", 4)); [EOL]     assertEquals("ab", StringUtils.center("ab", 0)); [EOL]     assertEquals("ab", StringUtils.center("ab", -1)); [EOL]     assertEquals("ab", StringUtils.center("ab", 1)); [EOL]     assertEquals("    ", StringUtils.center("", 4)); [EOL]     assertEquals(" ab ", StringUtils.center("ab", 4)); [EOL]     assertEquals("abcd", StringUtils.center("abcd", 2)); [EOL]     assertEquals(" a  ", StringUtils.center("a", 4)); [EOL]     assertEquals("  a  ", StringUtils.center("a", 5)); [EOL] }
@Test [EOL] public void testCenter_StringInt() { [EOL]     assertEquals(null, StringUtils.center(null, -1)); [EOL]     assertEquals(null, StringUtils.center(null, 4)); [EOL]     assertEquals("    ", StringUtils.center("", 4)); [EOL]     assertEquals("ab", StringUtils.center("ab", 0)); [EOL]     assertEquals("ab", StringUtils.center("ab", -1)); [EOL]     assertEquals("ab", StringUtils.center("ab", 1)); [EOL]     assertEquals("    ", StringUtils.center("", 4)); [EOL]     assertEquals(" ab ", StringUtils.center("ab", 4)); [EOL]     assertEquals("abcd", StringUtils.center("abcd", 2)); [EOL]     assertEquals(" a  ", StringUtils.center("a", 4)); [EOL]     assertEquals("  a  ", StringUtils.center("a", 5)); [EOL] }
@Test [EOL] public void testLengthStringBuffer() { [EOL]     assertEquals(0, StringUtils.length(new StringBuffer(""))); [EOL]     assertEquals(0, StringUtils.length(new StringBuffer(StringUtils.EMPTY))); [EOL]     assertEquals(1, StringUtils.length(new StringBuffer("A"))); [EOL]     assertEquals(1, StringUtils.length(new StringBuffer(" "))); [EOL]     assertEquals(8, StringUtils.length(new StringBuffer("ABCDEFGH"))); [EOL] }
@Test [EOL] public void testLengthStringBuffer() { [EOL]     assertEquals(0, StringUtils.length(new StringBuffer(""))); [EOL]     assertEquals(0, StringUtils.length(new StringBuffer(StringUtils.EMPTY))); [EOL]     assertEquals(1, StringUtils.length(new StringBuffer("A"))); [EOL]     assertEquals(1, StringUtils.length(new StringBuffer(" "))); [EOL]     assertEquals(8, StringUtils.length(new StringBuffer("ABCDEFGH"))); [EOL] }
@Test [EOL] public void testLengthStringBuffer() { [EOL]     assertEquals(0, StringUtils.length(new StringBuffer(""))); [EOL]     assertEquals(0, StringUtils.length(new StringBuffer(StringUtils.EMPTY))); [EOL]     assertEquals(1, StringUtils.length(new StringBuffer("A"))); [EOL]     assertEquals(1, StringUtils.length(new StringBuffer(" "))); [EOL]     assertEquals(8, StringUtils.length(new StringBuffer("ABCDEFGH"))); [EOL] }
@Test [EOL] public void testCenter_StringInt() { [EOL]     assertEquals(null, StringUtils.center(null, -1)); [EOL]     assertEquals(null, StringUtils.center(null, 4)); [EOL]     assertEquals("    ", StringUtils.center("", 4)); [EOL]     assertEquals("ab", StringUtils.center("ab", 0)); [EOL]     assertEquals("ab", StringUtils.center("ab", -1)); [EOL]     assertEquals("ab", StringUtils.center("ab", 1)); [EOL]     assertEquals("    ", StringUtils.center("", 4)); [EOL]     assertEquals(" ab ", StringUtils.center("ab", 4)); [EOL]     assertEquals("abcd", StringUtils.center("abcd", 2)); [EOL]     assertEquals(" a  ", StringUtils.center("a", 4)); [EOL]     assertEquals("  a  ", StringUtils.center("a", 5)); [EOL] }
@Test [EOL] public void testCenter_StringInt() { [EOL]     assertEquals(null, StringUtils.center(null, -1)); [EOL]     assertEquals(null, StringUtils.center(null, 4)); [EOL]     assertEquals("    ", StringUtils.center("", 4)); [EOL]     assertEquals("ab", StringUtils.center("ab", 0)); [EOL]     assertEquals("ab", StringUtils.center("ab", -1)); [EOL]     assertEquals("ab", StringUtils.center("ab", 1)); [EOL]     assertEquals("    ", StringUtils.center("", 4)); [EOL]     assertEquals(" ab ", StringUtils.center("ab", 4)); [EOL]     assertEquals("abcd", StringUtils.center("abcd", 2)); [EOL]     assertEquals(" a  ", StringUtils.center("a", 4)); [EOL]     assertEquals("  a  ", StringUtils.center("a", 5)); [EOL] }
@Test [EOL] public void testCenter_StringInt() { [EOL]     assertEquals(null, StringUtils.center(null, -1)); [EOL]     assertEquals(null, StringUtils.center(null, 4)); [EOL]     assertEquals("    ", StringUtils.center("", 4)); [EOL]     assertEquals("ab", StringUtils.center("ab", 0)); [EOL]     assertEquals("ab", StringUtils.center("ab", -1)); [EOL]     assertEquals("ab", StringUtils.center("ab", 1)); [EOL]     assertEquals("    ", StringUtils.center("", 4)); [EOL]     assertEquals(" ab ", StringUtils.center("ab", 4)); [EOL]     assertEquals("abcd", StringUtils.center("abcd", 2)); [EOL]     assertEquals(" a  ", StringUtils.center("a", 4)); [EOL]     assertEquals("  a  ", StringUtils.center("a", 5)); [EOL] }
@Test [EOL] public void testCenter_StringInt() { [EOL]     assertEquals(null, StringUtils.center(null, -1)); [EOL]     assertEquals(null, StringUtils.center(null, 4)); [EOL]     assertEquals("    ", StringUtils.center("", 4)); [EOL]     assertEquals("ab", StringUtils.center("ab", 0)); [EOL]     assertEquals("ab", StringUtils.center("ab", -1)); [EOL]     assertEquals("ab", StringUtils.center("ab", 1)); [EOL]     assertEquals("    ", StringUtils.center("", 4)); [EOL]     assertEquals(" ab ", StringUtils.center("ab", 4)); [EOL]     assertEquals("abcd", StringUtils.center("abcd", 2)); [EOL]     assertEquals(" a  ", StringUtils.center("a", 4)); [EOL]     assertEquals("  a  ", StringUtils.center("a", 5)); [EOL] }
@Test [EOL] public void testCenter_StringInt() { [EOL]     assertEquals(null, StringUtils.center(null, -1)); [EOL]     assertEquals(null, StringUtils.center(null, 4)); [EOL]     assertEquals("    ", StringUtils.center("", 4)); [EOL]     assertEquals("ab", StringUtils.center("ab", 0)); [EOL]     assertEquals("ab", StringUtils.center("ab", -1)); [EOL]     assertEquals("ab", StringUtils.center("ab", 1)); [EOL]     assertEquals("    ", StringUtils.center("", 4)); [EOL]     assertEquals(" ab ", StringUtils.center("ab", 4)); [EOL]     assertEquals("abcd", StringUtils.center("abcd", 2)); [EOL]     assertEquals(" a  ", StringUtils.center("a", 4)); [EOL]     assertEquals("  a  ", StringUtils.center("a", 5)); [EOL] }
@Test [EOL] public void testCenter_StringInt() { [EOL]     assertEquals(null, StringUtils.center(null, -1)); [EOL]     assertEquals(null, StringUtils.center(null, 4)); [EOL]     assertEquals("    ", StringUtils.center("", 4)); [EOL]     assertEquals("ab", StringUtils.center("ab", 0)); [EOL]     assertEquals("ab", StringUtils.center("ab", -1)); [EOL]     assertEquals("ab", StringUtils.center("ab", 1)); [EOL]     assertEquals("    ", StringUtils.center("", 4)); [EOL]     assertEquals(" ab ", StringUtils.center("ab", 4)); [EOL]     assertEquals("abcd", StringUtils.center("abcd", 2)); [EOL]     assertEquals(" a  ", StringUtils.center("a", 4)); [EOL]     assertEquals("  a  ", StringUtils.center("a", 5)); [EOL] }
@Test [EOL] public void testCenter_StringInt() { [EOL]     assertEquals(null, StringUtils.center(null, -1)); [EOL]     assertEquals(null, StringUtils.center(null, 4)); [EOL]     assertEquals("    ", StringUtils.center("", 4)); [EOL]     assertEquals("ab", StringUtils.center("ab", 0)); [EOL]     assertEquals("ab", StringUtils.center("ab", -1)); [EOL]     assertEquals("ab", StringUtils.center("ab", 1)); [EOL]     assertEquals("    ", StringUtils.center("", 4)); [EOL]     assertEquals(" ab ", StringUtils.center("ab", 4)); [EOL]     assertEquals("abcd", StringUtils.center("abcd", 2)); [EOL]     assertEquals(" a  ", StringUtils.center("a", 4)); [EOL]     assertEquals("  a  ", StringUtils.center("a", 5)); [EOL] }
@Test [EOL] public void testCenter_StringInt() { [EOL]     assertEquals(null, StringUtils.center(null, -1)); [EOL]     assertEquals(null, StringUtils.center(null, 4)); [EOL]     assertEquals("    ", StringUtils.center("", 4)); [EOL]     assertEquals("ab", StringUtils.center("ab", 0)); [EOL]     assertEquals("ab", StringUtils.center("ab", -1)); [EOL]     assertEquals("ab", StringUtils.center("ab", 1)); [EOL]     assertEquals("    ", StringUtils.center("", 4)); [EOL]     assertEquals(" ab ", StringUtils.center("ab", 4)); [EOL]     assertEquals("abcd", StringUtils.center("abcd", 2)); [EOL]     assertEquals(" a  ", StringUtils.center("a", 4)); [EOL]     assertEquals("  a  ", StringUtils.center("a", 5)); [EOL] }
@Test [EOL] public void testCenter_StringInt() { [EOL]     assertEquals(null, StringUtils.center(null, -1)); [EOL]     assertEquals(null, StringUtils.center(null, 4)); [EOL]     assertEquals("    ", StringUtils.center("", 4)); [EOL]     assertEquals("ab", StringUtils.center("ab", 0)); [EOL]     assertEquals("ab", StringUtils.center("ab", -1)); [EOL]     assertEquals("ab", StringUtils.center("ab", 1)); [EOL]     assertEquals("    ", StringUtils.center("", 4)); [EOL]     assertEquals(" ab ", StringUtils.center("ab", 4)); [EOL]     assertEquals("abcd", StringUtils.center("abcd", 2)); [EOL]     assertEquals(" a  ", StringUtils.center("a", 4)); [EOL]     assertEquals("  a  ", StringUtils.center("a", 5)); [EOL] }
@Test [EOL] public void testCenter_StringInt() { [EOL]     assertEquals(null, StringUtils.center(null, -1)); [EOL]     assertEquals(null, StringUtils.center(null, 4)); [EOL]     assertEquals("    ", StringUtils.center("", 4)); [EOL]     assertEquals("ab", StringUtils.center("ab", 0)); [EOL]     assertEquals("ab", StringUtils.center("ab", -1)); [EOL]     assertEquals("ab", StringUtils.center("ab", 1)); [EOL]     assertEquals("    ", StringUtils.center("", 4)); [EOL]     assertEquals(" ab ", StringUtils.center("ab", 4)); [EOL]     assertEquals("abcd", StringUtils.center("abcd", 2)); [EOL]     assertEquals(" a  ", StringUtils.center("a", 4)); [EOL]     assertEquals("  a  ", StringUtils.center("a", 5)); [EOL] }
@Test [EOL] public void testCenter_StringInt() { [EOL]     assertEquals(null, StringUtils.center(null, -1)); [EOL]     assertEquals(null, StringUtils.center(null, 4)); [EOL]     assertEquals("    ", StringUtils.center("", 4)); [EOL]     assertEquals("ab", StringUtils.center("ab", 0)); [EOL]     assertEquals("ab", StringUtils.center("ab", -1)); [EOL]     assertEquals("ab", StringUtils.center("ab", 1)); [EOL]     assertEquals("    ", StringUtils.center("", 4)); [EOL]     assertEquals(" ab ", StringUtils.center("ab", 4)); [EOL]     assertEquals("abcd", StringUtils.center("abcd", 2)); [EOL]     assertEquals(" a  ", StringUtils.center("a", 4)); [EOL]     assertEquals("  a  ", StringUtils.center("a", 5)); [EOL] }
@Test [EOL] public void testCenter_StringInt() { [EOL]     assertEquals(null, StringUtils.center(null, -1)); [EOL]     assertEquals(null, StringUtils.center(null, 4)); [EOL]     assertEquals("    ", StringUtils.center("", 4)); [EOL]     assertEquals("ab", StringUtils.center("ab", 0)); [EOL]     assertEquals("ab", StringUtils.center("ab", -1)); [EOL]     assertEquals("ab", StringUtils.center("ab", 1)); [EOL]     assertEquals("    ", StringUtils.center("", 4)); [EOL]     assertEquals(" ab ", StringUtils.center("ab", 4)); [EOL]     assertEquals("abcd", StringUtils.center("abcd", 2)); [EOL]     assertEquals(" a  ", StringUtils.center("a", 4)); [EOL]     assertEquals("  a  ", StringUtils.center("a", 5)); [EOL] }
@Test [EOL] public void testCenter_StringInt() { [EOL]     assertEquals(null, StringUtils.center(null, -1)); [EOL]     assertEquals(null, StringUtils.center(null, 4)); [EOL]     assertEquals("    ", StringUtils.center("", 4)); [EOL]     assertEquals("ab", StringUtils.center("ab", 0)); [EOL]     assertEquals("ab", StringUtils.center("ab", -1)); [EOL]     assertEquals("ab", StringUtils.center("ab", 1)); [EOL]     assertEquals("    ", StringUtils.center("", 4)); [EOL]     assertEquals(" ab ", StringUtils.center("ab", 4)); [EOL]     assertEquals("abcd", StringUtils.center("abcd", 2)); [EOL]     assertEquals(" a  ", StringUtils.center("a", 4)); [EOL]     assertEquals("  a  ", StringUtils.center("a", 5)); [EOL] }
@Test [EOL] public void testCenter_StringInt() { [EOL]     assertEquals(null, StringUtils.center(null, -1)); [EOL]     assertEquals(null, StringUtils.center(null, 4)); [EOL]     assertEquals("    ", StringUtils.center("", 4)); [EOL]     assertEquals("ab", StringUtils.center("ab", 0)); [EOL]     assertEquals("ab", StringUtils.center("ab", -1)); [EOL]     assertEquals("ab", StringUtils.center("ab", 1)); [EOL]     assertEquals("    ", StringUtils.center("", 4)); [EOL]     assertEquals(" ab ", StringUtils.center("ab", 4)); [EOL]     assertEquals("abcd", StringUtils.center("abcd", 2)); [EOL]     assertEquals(" a  ", StringUtils.center("a", 4)); [EOL]     assertEquals("  a  ", StringUtils.center("a", 5)); [EOL] }
@Test [EOL] public void testCaseFunctions() { [EOL]     assertEquals(null, StringUtils.upperCase(null)); [EOL]     assertEquals(null, StringUtils.upperCase(null, Locale.ENGLISH)); [EOL]     assertEquals(null, StringUtils.lowerCase(null)); [EOL]     assertEquals(null, StringUtils.lowerCase(null, Locale.ENGLISH)); [EOL]     assertEquals(null, StringUtils.capitalize(null)); [EOL]     assertEquals(null, StringUtils.uncapitalize(null)); [EOL]     assertEquals("capitalize(empty-string) failed", "", StringUtils.capitalize("")); [EOL]     assertEquals("capitalize(single-char-string) failed", "X", StringUtils.capitalize("x")); [EOL]     assertEquals("capitalize(String) failed", FOO_CAP, StringUtils.capitalize(FOO_CAP)); [EOL]     assertEquals("capitalize(string) failed", FOO_CAP, StringUtils.capitalize(FOO_UNCAP)); [EOL]     assertEquals("uncapitalize(String) failed", FOO_UNCAP, StringUtils.uncapitalize(FOO_CAP)); [EOL]     assertEquals("uncapitalize(string) failed", FOO_UNCAP, StringUtils.uncapitalize(FOO_UNCAP)); [EOL]     assertEquals("uncapitalize(empty-string) failed", "", StringUtils.uncapitalize("")); [EOL]     assertEquals("uncapitalize(single-char-string) failed", "x", StringUtils.uncapitalize("X")); [EOL]     assertEquals("uncapitalize(capitalize(String)) failed", SENTENCE_UNCAP, StringUtils.uncapitalize(StringUtils.capitalize(SENTENCE_UNCAP))); [EOL]     assertEquals("capitalize(uncapitalize(String)) failed", SENTENCE_CAP, StringUtils.capitalize(StringUtils.uncapitalize(SENTENCE_CAP))); [EOL]     assertEquals("uncapitalize(capitalize(String)) failed", FOO_UNCAP, StringUtils.uncapitalize(StringUtils.capitalize(FOO_UNCAP))); [EOL]     assertEquals("capitalize(uncapitalize(String)) failed", FOO_CAP, StringUtils.capitalize(StringUtils.uncapitalize(FOO_CAP))); [EOL]     assertEquals("upperCase(String) failed", "FOO TEST THING", StringUtils.upperCase("fOo test THING")); [EOL]     assertEquals("upperCase(empty-string) failed", "", StringUtils.upperCase("")); [EOL]     assertEquals("lowerCase(String) failed", "foo test thing", StringUtils.lowerCase("fOo test THING")); [EOL]     assertEquals("lowerCase(empty-string) failed", "", StringUtils.lowerCase("")); [EOL]     assertEquals("upperCase(String, Locale) failed", "FOO TEST THING", StringUtils.upperCase("fOo test THING", Locale.ENGLISH)); [EOL]     assertEquals("upperCase(empty-string, Locale) failed", "", StringUtils.upperCase("", Locale.ENGLISH)); [EOL]     assertEquals("lowerCase(String, Locale) failed", "foo test thing", StringUtils.lowerCase("fOo test THING", Locale.ENGLISH)); [EOL]     assertEquals("lowerCase(empty-string, Locale) failed", "", StringUtils.lowerCase("", Locale.ENGLISH)); [EOL] }
@Test [EOL] public void testCaseFunctions() { [EOL]     assertEquals(null, StringUtils.upperCase(null)); [EOL]     assertEquals(null, StringUtils.upperCase(null, Locale.ENGLISH)); [EOL]     assertEquals(null, StringUtils.lowerCase(null)); [EOL]     assertEquals(null, StringUtils.lowerCase(null, Locale.ENGLISH)); [EOL]     assertEquals(null, StringUtils.capitalize(null)); [EOL]     assertEquals(null, StringUtils.uncapitalize(null)); [EOL]     assertEquals("capitalize(empty-string) failed", "", StringUtils.capitalize("")); [EOL]     assertEquals("capitalize(single-char-string) failed", "X", StringUtils.capitalize("x")); [EOL]     assertEquals("capitalize(String) failed", FOO_CAP, StringUtils.capitalize(FOO_CAP)); [EOL]     assertEquals("capitalize(string) failed", FOO_CAP, StringUtils.capitalize(FOO_UNCAP)); [EOL]     assertEquals("uncapitalize(String) failed", FOO_UNCAP, StringUtils.uncapitalize(FOO_CAP)); [EOL]     assertEquals("uncapitalize(string) failed", FOO_UNCAP, StringUtils.uncapitalize(FOO_UNCAP)); [EOL]     assertEquals("uncapitalize(empty-string) failed", "", StringUtils.uncapitalize("")); [EOL]     assertEquals("uncapitalize(single-char-string) failed", "x", StringUtils.uncapitalize("X")); [EOL]     assertEquals("uncapitalize(capitalize(String)) failed", SENTENCE_UNCAP, StringUtils.uncapitalize(StringUtils.capitalize(SENTENCE_UNCAP))); [EOL]     assertEquals("capitalize(uncapitalize(String)) failed", SENTENCE_CAP, StringUtils.capitalize(StringUtils.uncapitalize(SENTENCE_CAP))); [EOL]     assertEquals("uncapitalize(capitalize(String)) failed", FOO_UNCAP, StringUtils.uncapitalize(StringUtils.capitalize(FOO_UNCAP))); [EOL]     assertEquals("capitalize(uncapitalize(String)) failed", FOO_CAP, StringUtils.capitalize(StringUtils.uncapitalize(FOO_CAP))); [EOL]     assertEquals("upperCase(String) failed", "FOO TEST THING", StringUtils.upperCase("fOo test THING")); [EOL]     assertEquals("upperCase(empty-string) failed", "", StringUtils.upperCase("")); [EOL]     assertEquals("lowerCase(String) failed", "foo test thing", StringUtils.lowerCase("fOo test THING")); [EOL]     assertEquals("lowerCase(empty-string) failed", "", StringUtils.lowerCase("")); [EOL]     assertEquals("upperCase(String, Locale) failed", "FOO TEST THING", StringUtils.upperCase("fOo test THING", Locale.ENGLISH)); [EOL]     assertEquals("upperCase(empty-string, Locale) failed", "", StringUtils.upperCase("", Locale.ENGLISH)); [EOL]     assertEquals("lowerCase(String, Locale) failed", "foo test thing", StringUtils.lowerCase("fOo test THING", Locale.ENGLISH)); [EOL]     assertEquals("lowerCase(empty-string, Locale) failed", "", StringUtils.lowerCase("", Locale.ENGLISH)); [EOL] }
@Test [EOL] public void testCaseFunctions() { [EOL]     assertEquals(null, StringUtils.upperCase(null)); [EOL]     assertEquals(null, StringUtils.upperCase(null, Locale.ENGLISH)); [EOL]     assertEquals(null, StringUtils.lowerCase(null)); [EOL]     assertEquals(null, StringUtils.lowerCase(null, Locale.ENGLISH)); [EOL]     assertEquals(null, StringUtils.capitalize(null)); [EOL]     assertEquals(null, StringUtils.uncapitalize(null)); [EOL]     assertEquals("capitalize(empty-string) failed", "", StringUtils.capitalize("")); [EOL]     assertEquals("capitalize(single-char-string) failed", "X", StringUtils.capitalize("x")); [EOL]     assertEquals("capitalize(String) failed", FOO_CAP, StringUtils.capitalize(FOO_CAP)); [EOL]     assertEquals("capitalize(string) failed", FOO_CAP, StringUtils.capitalize(FOO_UNCAP)); [EOL]     assertEquals("uncapitalize(String) failed", FOO_UNCAP, StringUtils.uncapitalize(FOO_CAP)); [EOL]     assertEquals("uncapitalize(string) failed", FOO_UNCAP, StringUtils.uncapitalize(FOO_UNCAP)); [EOL]     assertEquals("uncapitalize(empty-string) failed", "", StringUtils.uncapitalize("")); [EOL]     assertEquals("uncapitalize(single-char-string) failed", "x", StringUtils.uncapitalize("X")); [EOL]     assertEquals("uncapitalize(capitalize(String)) failed", SENTENCE_UNCAP, StringUtils.uncapitalize(StringUtils.capitalize(SENTENCE_UNCAP))); [EOL]     assertEquals("capitalize(uncapitalize(String)) failed", SENTENCE_CAP, StringUtils.capitalize(StringUtils.uncapitalize(SENTENCE_CAP))); [EOL]     assertEquals("uncapitalize(capitalize(String)) failed", FOO_UNCAP, StringUtils.uncapitalize(StringUtils.capitalize(FOO_UNCAP))); [EOL]     assertEquals("capitalize(uncapitalize(String)) failed", FOO_CAP, StringUtils.capitalize(StringUtils.uncapitalize(FOO_CAP))); [EOL]     assertEquals("upperCase(String) failed", "FOO TEST THING", StringUtils.upperCase("fOo test THING")); [EOL]     assertEquals("upperCase(empty-string) failed", "", StringUtils.upperCase("")); [EOL]     assertEquals("lowerCase(String) failed", "foo test thing", StringUtils.lowerCase("fOo test THING")); [EOL]     assertEquals("lowerCase(empty-string) failed", "", StringUtils.lowerCase("")); [EOL]     assertEquals("upperCase(String, Locale) failed", "FOO TEST THING", StringUtils.upperCase("fOo test THING", Locale.ENGLISH)); [EOL]     assertEquals("upperCase(empty-string, Locale) failed", "", StringUtils.upperCase("", Locale.ENGLISH)); [EOL]     assertEquals("lowerCase(String, Locale) failed", "foo test thing", StringUtils.lowerCase("fOo test THING", Locale.ENGLISH)); [EOL]     assertEquals("lowerCase(empty-string, Locale) failed", "", StringUtils.lowerCase("", Locale.ENGLISH)); [EOL] }
@Test [EOL] public void testCaseFunctions() { [EOL]     assertEquals(null, StringUtils.upperCase(null)); [EOL]     assertEquals(null, StringUtils.upperCase(null, Locale.ENGLISH)); [EOL]     assertEquals(null, StringUtils.lowerCase(null)); [EOL]     assertEquals(null, StringUtils.lowerCase(null, Locale.ENGLISH)); [EOL]     assertEquals(null, StringUtils.capitalize(null)); [EOL]     assertEquals(null, StringUtils.uncapitalize(null)); [EOL]     assertEquals("capitalize(empty-string) failed", "", StringUtils.capitalize("")); [EOL]     assertEquals("capitalize(single-char-string) failed", "X", StringUtils.capitalize("x")); [EOL]     assertEquals("capitalize(String) failed", FOO_CAP, StringUtils.capitalize(FOO_CAP)); [EOL]     assertEquals("capitalize(string) failed", FOO_CAP, StringUtils.capitalize(FOO_UNCAP)); [EOL]     assertEquals("uncapitalize(String) failed", FOO_UNCAP, StringUtils.uncapitalize(FOO_CAP)); [EOL]     assertEquals("uncapitalize(string) failed", FOO_UNCAP, StringUtils.uncapitalize(FOO_UNCAP)); [EOL]     assertEquals("uncapitalize(empty-string) failed", "", StringUtils.uncapitalize("")); [EOL]     assertEquals("uncapitalize(single-char-string) failed", "x", StringUtils.uncapitalize("X")); [EOL]     assertEquals("uncapitalize(capitalize(String)) failed", SENTENCE_UNCAP, StringUtils.uncapitalize(StringUtils.capitalize(SENTENCE_UNCAP))); [EOL]     assertEquals("capitalize(uncapitalize(String)) failed", SENTENCE_CAP, StringUtils.capitalize(StringUtils.uncapitalize(SENTENCE_CAP))); [EOL]     assertEquals("uncapitalize(capitalize(String)) failed", FOO_UNCAP, StringUtils.uncapitalize(StringUtils.capitalize(FOO_UNCAP))); [EOL]     assertEquals("capitalize(uncapitalize(String)) failed", FOO_CAP, StringUtils.capitalize(StringUtils.uncapitalize(FOO_CAP))); [EOL]     assertEquals("upperCase(String) failed", "FOO TEST THING", StringUtils.upperCase("fOo test THING")); [EOL]     assertEquals("upperCase(empty-string) failed", "", StringUtils.upperCase("")); [EOL]     assertEquals("lowerCase(String) failed", "foo test thing", StringUtils.lowerCase("fOo test THING")); [EOL]     assertEquals("lowerCase(empty-string) failed", "", StringUtils.lowerCase("")); [EOL]     assertEquals("upperCase(String, Locale) failed", "FOO TEST THING", StringUtils.upperCase("fOo test THING", Locale.ENGLISH)); [EOL]     assertEquals("upperCase(empty-string, Locale) failed", "", StringUtils.upperCase("", Locale.ENGLISH)); [EOL]     assertEquals("lowerCase(String, Locale) failed", "foo test thing", StringUtils.lowerCase("fOo test THING", Locale.ENGLISH)); [EOL]     assertEquals("lowerCase(empty-string, Locale) failed", "", StringUtils.lowerCase("", Locale.ENGLISH)); [EOL] }
@Test [EOL] public void testCaseFunctions() { [EOL]     assertEquals(null, StringUtils.upperCase(null)); [EOL]     assertEquals(null, StringUtils.upperCase(null, Locale.ENGLISH)); [EOL]     assertEquals(null, StringUtils.lowerCase(null)); [EOL]     assertEquals(null, StringUtils.lowerCase(null, Locale.ENGLISH)); [EOL]     assertEquals(null, StringUtils.capitalize(null)); [EOL]     assertEquals(null, StringUtils.uncapitalize(null)); [EOL]     assertEquals("capitalize(empty-string) failed", "", StringUtils.capitalize("")); [EOL]     assertEquals("capitalize(single-char-string) failed", "X", StringUtils.capitalize("x")); [EOL]     assertEquals("capitalize(String) failed", FOO_CAP, StringUtils.capitalize(FOO_CAP)); [EOL]     assertEquals("capitalize(string) failed", FOO_CAP, StringUtils.capitalize(FOO_UNCAP)); [EOL]     assertEquals("uncapitalize(String) failed", FOO_UNCAP, StringUtils.uncapitalize(FOO_CAP)); [EOL]     assertEquals("uncapitalize(string) failed", FOO_UNCAP, StringUtils.uncapitalize(FOO_UNCAP)); [EOL]     assertEquals("uncapitalize(empty-string) failed", "", StringUtils.uncapitalize("")); [EOL]     assertEquals("uncapitalize(single-char-string) failed", "x", StringUtils.uncapitalize("X")); [EOL]     assertEquals("uncapitalize(capitalize(String)) failed", SENTENCE_UNCAP, StringUtils.uncapitalize(StringUtils.capitalize(SENTENCE_UNCAP))); [EOL]     assertEquals("capitalize(uncapitalize(String)) failed", SENTENCE_CAP, StringUtils.capitalize(StringUtils.uncapitalize(SENTENCE_CAP))); [EOL]     assertEquals("uncapitalize(capitalize(String)) failed", FOO_UNCAP, StringUtils.uncapitalize(StringUtils.capitalize(FOO_UNCAP))); [EOL]     assertEquals("capitalize(uncapitalize(String)) failed", FOO_CAP, StringUtils.capitalize(StringUtils.uncapitalize(FOO_CAP))); [EOL]     assertEquals("upperCase(String) failed", "FOO TEST THING", StringUtils.upperCase("fOo test THING")); [EOL]     assertEquals("upperCase(empty-string) failed", "", StringUtils.upperCase("")); [EOL]     assertEquals("lowerCase(String) failed", "foo test thing", StringUtils.lowerCase("fOo test THING")); [EOL]     assertEquals("lowerCase(empty-string) failed", "", StringUtils.lowerCase("")); [EOL]     assertEquals("upperCase(String, Locale) failed", "FOO TEST THING", StringUtils.upperCase("fOo test THING", Locale.ENGLISH)); [EOL]     assertEquals("upperCase(empty-string, Locale) failed", "", StringUtils.upperCase("", Locale.ENGLISH)); [EOL]     assertEquals("lowerCase(String, Locale) failed", "foo test thing", StringUtils.lowerCase("fOo test THING", Locale.ENGLISH)); [EOL]     assertEquals("lowerCase(empty-string, Locale) failed", "", StringUtils.lowerCase("", Locale.ENGLISH)); [EOL] }
@Test [EOL] public void testCaseFunctions() { [EOL]     assertEquals(null, StringUtils.upperCase(null)); [EOL]     assertEquals(null, StringUtils.upperCase(null, Locale.ENGLISH)); [EOL]     assertEquals(null, StringUtils.lowerCase(null)); [EOL]     assertEquals(null, StringUtils.lowerCase(null, Locale.ENGLISH)); [EOL]     assertEquals(null, StringUtils.capitalize(null)); [EOL]     assertEquals(null, StringUtils.uncapitalize(null)); [EOL]     assertEquals("capitalize(empty-string) failed", "", StringUtils.capitalize("")); [EOL]     assertEquals("capitalize(single-char-string) failed", "X", StringUtils.capitalize("x")); [EOL]     assertEquals("capitalize(String) failed", FOO_CAP, StringUtils.capitalize(FOO_CAP)); [EOL]     assertEquals("capitalize(string) failed", FOO_CAP, StringUtils.capitalize(FOO_UNCAP)); [EOL]     assertEquals("uncapitalize(String) failed", FOO_UNCAP, StringUtils.uncapitalize(FOO_CAP)); [EOL]     assertEquals("uncapitalize(string) failed", FOO_UNCAP, StringUtils.uncapitalize(FOO_UNCAP)); [EOL]     assertEquals("uncapitalize(empty-string) failed", "", StringUtils.uncapitalize("")); [EOL]     assertEquals("uncapitalize(single-char-string) failed", "x", StringUtils.uncapitalize("X")); [EOL]     assertEquals("uncapitalize(capitalize(String)) failed", SENTENCE_UNCAP, StringUtils.uncapitalize(StringUtils.capitalize(SENTENCE_UNCAP))); [EOL]     assertEquals("capitalize(uncapitalize(String)) failed", SENTENCE_CAP, StringUtils.capitalize(StringUtils.uncapitalize(SENTENCE_CAP))); [EOL]     assertEquals("uncapitalize(capitalize(String)) failed", FOO_UNCAP, StringUtils.uncapitalize(StringUtils.capitalize(FOO_UNCAP))); [EOL]     assertEquals("capitalize(uncapitalize(String)) failed", FOO_CAP, StringUtils.capitalize(StringUtils.uncapitalize(FOO_CAP))); [EOL]     assertEquals("upperCase(String) failed", "FOO TEST THING", StringUtils.upperCase("fOo test THING")); [EOL]     assertEquals("upperCase(empty-string) failed", "", StringUtils.upperCase("")); [EOL]     assertEquals("lowerCase(String) failed", "foo test thing", StringUtils.lowerCase("fOo test THING")); [EOL]     assertEquals("lowerCase(empty-string) failed", "", StringUtils.lowerCase("")); [EOL]     assertEquals("upperCase(String, Locale) failed", "FOO TEST THING", StringUtils.upperCase("fOo test THING", Locale.ENGLISH)); [EOL]     assertEquals("upperCase(empty-string, Locale) failed", "", StringUtils.upperCase("", Locale.ENGLISH)); [EOL]     assertEquals("lowerCase(String, Locale) failed", "foo test thing", StringUtils.lowerCase("fOo test THING", Locale.ENGLISH)); [EOL]     assertEquals("lowerCase(empty-string, Locale) failed", "", StringUtils.lowerCase("", Locale.ENGLISH)); [EOL] }
@Test [EOL] public void testCaseFunctions() { [EOL]     assertEquals(null, StringUtils.upperCase(null)); [EOL]     assertEquals(null, StringUtils.upperCase(null, Locale.ENGLISH)); [EOL]     assertEquals(null, StringUtils.lowerCase(null)); [EOL]     assertEquals(null, StringUtils.lowerCase(null, Locale.ENGLISH)); [EOL]     assertEquals(null, StringUtils.capitalize(null)); [EOL]     assertEquals(null, StringUtils.uncapitalize(null)); [EOL]     assertEquals("capitalize(empty-string) failed", "", StringUtils.capitalize("")); [EOL]     assertEquals("capitalize(single-char-string) failed", "X", StringUtils.capitalize("x")); [EOL]     assertEquals("capitalize(String) failed", FOO_CAP, StringUtils.capitalize(FOO_CAP)); [EOL]     assertEquals("capitalize(string) failed", FOO_CAP, StringUtils.capitalize(FOO_UNCAP)); [EOL]     assertEquals("uncapitalize(String) failed", FOO_UNCAP, StringUtils.uncapitalize(FOO_CAP)); [EOL]     assertEquals("uncapitalize(string) failed", FOO_UNCAP, StringUtils.uncapitalize(FOO_UNCAP)); [EOL]     assertEquals("uncapitalize(empty-string) failed", "", StringUtils.uncapitalize("")); [EOL]     assertEquals("uncapitalize(single-char-string) failed", "x", StringUtils.uncapitalize("X")); [EOL]     assertEquals("uncapitalize(capitalize(String)) failed", SENTENCE_UNCAP, StringUtils.uncapitalize(StringUtils.capitalize(SENTENCE_UNCAP))); [EOL]     assertEquals("capitalize(uncapitalize(String)) failed", SENTENCE_CAP, StringUtils.capitalize(StringUtils.uncapitalize(SENTENCE_CAP))); [EOL]     assertEquals("uncapitalize(capitalize(String)) failed", FOO_UNCAP, StringUtils.uncapitalize(StringUtils.capitalize(FOO_UNCAP))); [EOL]     assertEquals("capitalize(uncapitalize(String)) failed", FOO_CAP, StringUtils.capitalize(StringUtils.uncapitalize(FOO_CAP))); [EOL]     assertEquals("upperCase(String) failed", "FOO TEST THING", StringUtils.upperCase("fOo test THING")); [EOL]     assertEquals("upperCase(empty-string) failed", "", StringUtils.upperCase("")); [EOL]     assertEquals("lowerCase(String) failed", "foo test thing", StringUtils.lowerCase("fOo test THING")); [EOL]     assertEquals("lowerCase(empty-string) failed", "", StringUtils.lowerCase("")); [EOL]     assertEquals("upperCase(String, Locale) failed", "FOO TEST THING", StringUtils.upperCase("fOo test THING", Locale.ENGLISH)); [EOL]     assertEquals("upperCase(empty-string, Locale) failed", "", StringUtils.upperCase("", Locale.ENGLISH)); [EOL]     assertEquals("lowerCase(String, Locale) failed", "foo test thing", StringUtils.lowerCase("fOo test THING", Locale.ENGLISH)); [EOL]     assertEquals("lowerCase(empty-string, Locale) failed", "", StringUtils.lowerCase("", Locale.ENGLISH)); [EOL] }
@Test [EOL] public void testCaseFunctions() { [EOL]     assertEquals(null, StringUtils.upperCase(null)); [EOL]     assertEquals(null, StringUtils.upperCase(null, Locale.ENGLISH)); [EOL]     assertEquals(null, StringUtils.lowerCase(null)); [EOL]     assertEquals(null, StringUtils.lowerCase(null, Locale.ENGLISH)); [EOL]     assertEquals(null, StringUtils.capitalize(null)); [EOL]     assertEquals(null, StringUtils.uncapitalize(null)); [EOL]     assertEquals("capitalize(empty-string) failed", "", StringUtils.capitalize("")); [EOL]     assertEquals("capitalize(single-char-string) failed", "X", StringUtils.capitalize("x")); [EOL]     assertEquals("capitalize(String) failed", FOO_CAP, StringUtils.capitalize(FOO_CAP)); [EOL]     assertEquals("capitalize(string) failed", FOO_CAP, StringUtils.capitalize(FOO_UNCAP)); [EOL]     assertEquals("uncapitalize(String) failed", FOO_UNCAP, StringUtils.uncapitalize(FOO_CAP)); [EOL]     assertEquals("uncapitalize(string) failed", FOO_UNCAP, StringUtils.uncapitalize(FOO_UNCAP)); [EOL]     assertEquals("uncapitalize(empty-string) failed", "", StringUtils.uncapitalize("")); [EOL]     assertEquals("uncapitalize(single-char-string) failed", "x", StringUtils.uncapitalize("X")); [EOL]     assertEquals("uncapitalize(capitalize(String)) failed", SENTENCE_UNCAP, StringUtils.uncapitalize(StringUtils.capitalize(SENTENCE_UNCAP))); [EOL]     assertEquals("capitalize(uncapitalize(String)) failed", SENTENCE_CAP, StringUtils.capitalize(StringUtils.uncapitalize(SENTENCE_CAP))); [EOL]     assertEquals("uncapitalize(capitalize(String)) failed", FOO_UNCAP, StringUtils.uncapitalize(StringUtils.capitalize(FOO_UNCAP))); [EOL]     assertEquals("capitalize(uncapitalize(String)) failed", FOO_CAP, StringUtils.capitalize(StringUtils.uncapitalize(FOO_CAP))); [EOL]     assertEquals("upperCase(String) failed", "FOO TEST THING", StringUtils.upperCase("fOo test THING")); [EOL]     assertEquals("upperCase(empty-string) failed", "", StringUtils.upperCase("")); [EOL]     assertEquals("lowerCase(String) failed", "foo test thing", StringUtils.lowerCase("fOo test THING")); [EOL]     assertEquals("lowerCase(empty-string) failed", "", StringUtils.lowerCase("")); [EOL]     assertEquals("upperCase(String, Locale) failed", "FOO TEST THING", StringUtils.upperCase("fOo test THING", Locale.ENGLISH)); [EOL]     assertEquals("upperCase(empty-string, Locale) failed", "", StringUtils.upperCase("", Locale.ENGLISH)); [EOL]     assertEquals("lowerCase(String, Locale) failed", "foo test thing", StringUtils.lowerCase("fOo test THING", Locale.ENGLISH)); [EOL]     assertEquals("lowerCase(empty-string, Locale) failed", "", StringUtils.lowerCase("", Locale.ENGLISH)); [EOL] }
@Test [EOL] public void testCaseFunctions() { [EOL]     assertEquals(null, StringUtils.upperCase(null)); [EOL]     assertEquals(null, StringUtils.upperCase(null, Locale.ENGLISH)); [EOL]     assertEquals(null, StringUtils.lowerCase(null)); [EOL]     assertEquals(null, StringUtils.lowerCase(null, Locale.ENGLISH)); [EOL]     assertEquals(null, StringUtils.capitalize(null)); [EOL]     assertEquals(null, StringUtils.uncapitalize(null)); [EOL]     assertEquals("capitalize(empty-string) failed", "", StringUtils.capitalize("")); [EOL]     assertEquals("capitalize(single-char-string) failed", "X", StringUtils.capitalize("x")); [EOL]     assertEquals("capitalize(String) failed", FOO_CAP, StringUtils.capitalize(FOO_CAP)); [EOL]     assertEquals("capitalize(string) failed", FOO_CAP, StringUtils.capitalize(FOO_UNCAP)); [EOL]     assertEquals("uncapitalize(String) failed", FOO_UNCAP, StringUtils.uncapitalize(FOO_CAP)); [EOL]     assertEquals("uncapitalize(string) failed", FOO_UNCAP, StringUtils.uncapitalize(FOO_UNCAP)); [EOL]     assertEquals("uncapitalize(empty-string) failed", "", StringUtils.uncapitalize("")); [EOL]     assertEquals("uncapitalize(single-char-string) failed", "x", StringUtils.uncapitalize("X")); [EOL]     assertEquals("uncapitalize(capitalize(String)) failed", SENTENCE_UNCAP, StringUtils.uncapitalize(StringUtils.capitalize(SENTENCE_UNCAP))); [EOL]     assertEquals("capitalize(uncapitalize(String)) failed", SENTENCE_CAP, StringUtils.capitalize(StringUtils.uncapitalize(SENTENCE_CAP))); [EOL]     assertEquals("uncapitalize(capitalize(String)) failed", FOO_UNCAP, StringUtils.uncapitalize(StringUtils.capitalize(FOO_UNCAP))); [EOL]     assertEquals("capitalize(uncapitalize(String)) failed", FOO_CAP, StringUtils.capitalize(StringUtils.uncapitalize(FOO_CAP))); [EOL]     assertEquals("upperCase(String) failed", "FOO TEST THING", StringUtils.upperCase("fOo test THING")); [EOL]     assertEquals("upperCase(empty-string) failed", "", StringUtils.upperCase("")); [EOL]     assertEquals("lowerCase(String) failed", "foo test thing", StringUtils.lowerCase("fOo test THING")); [EOL]     assertEquals("lowerCase(empty-string) failed", "", StringUtils.lowerCase("")); [EOL]     assertEquals("upperCase(String, Locale) failed", "FOO TEST THING", StringUtils.upperCase("fOo test THING", Locale.ENGLISH)); [EOL]     assertEquals("upperCase(empty-string, Locale) failed", "", StringUtils.upperCase("", Locale.ENGLISH)); [EOL]     assertEquals("lowerCase(String, Locale) failed", "foo test thing", StringUtils.lowerCase("fOo test THING", Locale.ENGLISH)); [EOL]     assertEquals("lowerCase(empty-string, Locale) failed", "", StringUtils.lowerCase("", Locale.ENGLISH)); [EOL] }
@Test [EOL] public void testCaseFunctions() { [EOL]     assertEquals(null, StringUtils.upperCase(null)); [EOL]     assertEquals(null, StringUtils.upperCase(null, Locale.ENGLISH)); [EOL]     assertEquals(null, StringUtils.lowerCase(null)); [EOL]     assertEquals(null, StringUtils.lowerCase(null, Locale.ENGLISH)); [EOL]     assertEquals(null, StringUtils.capitalize(null)); [EOL]     assertEquals(null, StringUtils.uncapitalize(null)); [EOL]     assertEquals("capitalize(empty-string) failed", "", StringUtils.capitalize("")); [EOL]     assertEquals("capitalize(single-char-string) failed", "X", StringUtils.capitalize("x")); [EOL]     assertEquals("capitalize(String) failed", FOO_CAP, StringUtils.capitalize(FOO_CAP)); [EOL]     assertEquals("capitalize(string) failed", FOO_CAP, StringUtils.capitalize(FOO_UNCAP)); [EOL]     assertEquals("uncapitalize(String) failed", FOO_UNCAP, StringUtils.uncapitalize(FOO_CAP)); [EOL]     assertEquals("uncapitalize(string) failed", FOO_UNCAP, StringUtils.uncapitalize(FOO_UNCAP)); [EOL]     assertEquals("uncapitalize(empty-string) failed", "", StringUtils.uncapitalize("")); [EOL]     assertEquals("uncapitalize(single-char-string) failed", "x", StringUtils.uncapitalize("X")); [EOL]     assertEquals("uncapitalize(capitalize(String)) failed", SENTENCE_UNCAP, StringUtils.uncapitalize(StringUtils.capitalize(SENTENCE_UNCAP))); [EOL]     assertEquals("capitalize(uncapitalize(String)) failed", SENTENCE_CAP, StringUtils.capitalize(StringUtils.uncapitalize(SENTENCE_CAP))); [EOL]     assertEquals("uncapitalize(capitalize(String)) failed", FOO_UNCAP, StringUtils.uncapitalize(StringUtils.capitalize(FOO_UNCAP))); [EOL]     assertEquals("capitalize(uncapitalize(String)) failed", FOO_CAP, StringUtils.capitalize(StringUtils.uncapitalize(FOO_CAP))); [EOL]     assertEquals("upperCase(String) failed", "FOO TEST THING", StringUtils.upperCase("fOo test THING")); [EOL]     assertEquals("upperCase(empty-string) failed", "", StringUtils.upperCase("")); [EOL]     assertEquals("lowerCase(String) failed", "foo test thing", StringUtils.lowerCase("fOo test THING")); [EOL]     assertEquals("lowerCase(empty-string) failed", "", StringUtils.lowerCase("")); [EOL]     assertEquals("upperCase(String, Locale) failed", "FOO TEST THING", StringUtils.upperCase("fOo test THING", Locale.ENGLISH)); [EOL]     assertEquals("upperCase(empty-string, Locale) failed", "", StringUtils.upperCase("", Locale.ENGLISH)); [EOL]     assertEquals("lowerCase(String, Locale) failed", "foo test thing", StringUtils.lowerCase("fOo test THING", Locale.ENGLISH)); [EOL]     assertEquals("lowerCase(empty-string, Locale) failed", "", StringUtils.lowerCase("", Locale.ENGLISH)); [EOL] }
@Test [EOL] public void testCaseFunctions() { [EOL]     assertEquals(null, StringUtils.upperCase(null)); [EOL]     assertEquals(null, StringUtils.upperCase(null, Locale.ENGLISH)); [EOL]     assertEquals(null, StringUtils.lowerCase(null)); [EOL]     assertEquals(null, StringUtils.lowerCase(null, Locale.ENGLISH)); [EOL]     assertEquals(null, StringUtils.capitalize(null)); [EOL]     assertEquals(null, StringUtils.uncapitalize(null)); [EOL]     assertEquals("capitalize(empty-string) failed", "", StringUtils.capitalize("")); [EOL]     assertEquals("capitalize(single-char-string) failed", "X", StringUtils.capitalize("x")); [EOL]     assertEquals("capitalize(String) failed", FOO_CAP, StringUtils.capitalize(FOO_CAP)); [EOL]     assertEquals("capitalize(string) failed", FOO_CAP, StringUtils.capitalize(FOO_UNCAP)); [EOL]     assertEquals("uncapitalize(String) failed", FOO_UNCAP, StringUtils.uncapitalize(FOO_CAP)); [EOL]     assertEquals("uncapitalize(string) failed", FOO_UNCAP, StringUtils.uncapitalize(FOO_UNCAP)); [EOL]     assertEquals("uncapitalize(empty-string) failed", "", StringUtils.uncapitalize("")); [EOL]     assertEquals("uncapitalize(single-char-string) failed", "x", StringUtils.uncapitalize("X")); [EOL]     assertEquals("uncapitalize(capitalize(String)) failed", SENTENCE_UNCAP, StringUtils.uncapitalize(StringUtils.capitalize(SENTENCE_UNCAP))); [EOL]     assertEquals("capitalize(uncapitalize(String)) failed", SENTENCE_CAP, StringUtils.capitalize(StringUtils.uncapitalize(SENTENCE_CAP))); [EOL]     assertEquals("uncapitalize(capitalize(String)) failed", FOO_UNCAP, StringUtils.uncapitalize(StringUtils.capitalize(FOO_UNCAP))); [EOL]     assertEquals("capitalize(uncapitalize(String)) failed", FOO_CAP, StringUtils.capitalize(StringUtils.uncapitalize(FOO_CAP))); [EOL]     assertEquals("upperCase(String) failed", "FOO TEST THING", StringUtils.upperCase("fOo test THING")); [EOL]     assertEquals("upperCase(empty-string) failed", "", StringUtils.upperCase("")); [EOL]     assertEquals("lowerCase(String) failed", "foo test thing", StringUtils.lowerCase("fOo test THING")); [EOL]     assertEquals("lowerCase(empty-string) failed", "", StringUtils.lowerCase("")); [EOL]     assertEquals("upperCase(String, Locale) failed", "FOO TEST THING", StringUtils.upperCase("fOo test THING", Locale.ENGLISH)); [EOL]     assertEquals("upperCase(empty-string, Locale) failed", "", StringUtils.upperCase("", Locale.ENGLISH)); [EOL]     assertEquals("lowerCase(String, Locale) failed", "foo test thing", StringUtils.lowerCase("fOo test THING", Locale.ENGLISH)); [EOL]     assertEquals("lowerCase(empty-string, Locale) failed", "", StringUtils.lowerCase("", Locale.ENGLISH)); [EOL] }
@Test [EOL] public void testCaseFunctions() { [EOL]     assertEquals(null, StringUtils.upperCase(null)); [EOL]     assertEquals(null, StringUtils.upperCase(null, Locale.ENGLISH)); [EOL]     assertEquals(null, StringUtils.lowerCase(null)); [EOL]     assertEquals(null, StringUtils.lowerCase(null, Locale.ENGLISH)); [EOL]     assertEquals(null, StringUtils.capitalize(null)); [EOL]     assertEquals(null, StringUtils.uncapitalize(null)); [EOL]     assertEquals("capitalize(empty-string) failed", "", StringUtils.capitalize("")); [EOL]     assertEquals("capitalize(single-char-string) failed", "X", StringUtils.capitalize("x")); [EOL]     assertEquals("capitalize(String) failed", FOO_CAP, StringUtils.capitalize(FOO_CAP)); [EOL]     assertEquals("capitalize(string) failed", FOO_CAP, StringUtils.capitalize(FOO_UNCAP)); [EOL]     assertEquals("uncapitalize(String) failed", FOO_UNCAP, StringUtils.uncapitalize(FOO_CAP)); [EOL]     assertEquals("uncapitalize(string) failed", FOO_UNCAP, StringUtils.uncapitalize(FOO_UNCAP)); [EOL]     assertEquals("uncapitalize(empty-string) failed", "", StringUtils.uncapitalize("")); [EOL]     assertEquals("uncapitalize(single-char-string) failed", "x", StringUtils.uncapitalize("X")); [EOL]     assertEquals("uncapitalize(capitalize(String)) failed", SENTENCE_UNCAP, StringUtils.uncapitalize(StringUtils.capitalize(SENTENCE_UNCAP))); [EOL]     assertEquals("capitalize(uncapitalize(String)) failed", SENTENCE_CAP, StringUtils.capitalize(StringUtils.uncapitalize(SENTENCE_CAP))); [EOL]     assertEquals("uncapitalize(capitalize(String)) failed", FOO_UNCAP, StringUtils.uncapitalize(StringUtils.capitalize(FOO_UNCAP))); [EOL]     assertEquals("capitalize(uncapitalize(String)) failed", FOO_CAP, StringUtils.capitalize(StringUtils.uncapitalize(FOO_CAP))); [EOL]     assertEquals("upperCase(String) failed", "FOO TEST THING", StringUtils.upperCase("fOo test THING")); [EOL]     assertEquals("upperCase(empty-string) failed", "", StringUtils.upperCase("")); [EOL]     assertEquals("lowerCase(String) failed", "foo test thing", StringUtils.lowerCase("fOo test THING")); [EOL]     assertEquals("lowerCase(empty-string) failed", "", StringUtils.lowerCase("")); [EOL]     assertEquals("upperCase(String, Locale) failed", "FOO TEST THING", StringUtils.upperCase("fOo test THING", Locale.ENGLISH)); [EOL]     assertEquals("upperCase(empty-string, Locale) failed", "", StringUtils.upperCase("", Locale.ENGLISH)); [EOL]     assertEquals("lowerCase(String, Locale) failed", "foo test thing", StringUtils.lowerCase("fOo test THING", Locale.ENGLISH)); [EOL]     assertEquals("lowerCase(empty-string, Locale) failed", "", StringUtils.lowerCase("", Locale.ENGLISH)); [EOL] }
@Test [EOL] public void testCaseFunctions() { [EOL]     assertEquals(null, StringUtils.upperCase(null)); [EOL]     assertEquals(null, StringUtils.upperCase(null, Locale.ENGLISH)); [EOL]     assertEquals(null, StringUtils.lowerCase(null)); [EOL]     assertEquals(null, StringUtils.lowerCase(null, Locale.ENGLISH)); [EOL]     assertEquals(null, StringUtils.capitalize(null)); [EOL]     assertEquals(null, StringUtils.uncapitalize(null)); [EOL]     assertEquals("capitalize(empty-string) failed", "", StringUtils.capitalize("")); [EOL]     assertEquals("capitalize(single-char-string) failed", "X", StringUtils.capitalize("x")); [EOL]     assertEquals("capitalize(String) failed", FOO_CAP, StringUtils.capitalize(FOO_CAP)); [EOL]     assertEquals("capitalize(string) failed", FOO_CAP, StringUtils.capitalize(FOO_UNCAP)); [EOL]     assertEquals("uncapitalize(String) failed", FOO_UNCAP, StringUtils.uncapitalize(FOO_CAP)); [EOL]     assertEquals("uncapitalize(string) failed", FOO_UNCAP, StringUtils.uncapitalize(FOO_UNCAP)); [EOL]     assertEquals("uncapitalize(empty-string) failed", "", StringUtils.uncapitalize("")); [EOL]     assertEquals("uncapitalize(single-char-string) failed", "x", StringUtils.uncapitalize("X")); [EOL]     assertEquals("uncapitalize(capitalize(String)) failed", SENTENCE_UNCAP, StringUtils.uncapitalize(StringUtils.capitalize(SENTENCE_UNCAP))); [EOL]     assertEquals("capitalize(uncapitalize(String)) failed", SENTENCE_CAP, StringUtils.capitalize(StringUtils.uncapitalize(SENTENCE_CAP))); [EOL]     assertEquals("uncapitalize(capitalize(String)) failed", FOO_UNCAP, StringUtils.uncapitalize(StringUtils.capitalize(FOO_UNCAP))); [EOL]     assertEquals("capitalize(uncapitalize(String)) failed", FOO_CAP, StringUtils.capitalize(StringUtils.uncapitalize(FOO_CAP))); [EOL]     assertEquals("upperCase(String) failed", "FOO TEST THING", StringUtils.upperCase("fOo test THING")); [EOL]     assertEquals("upperCase(empty-string) failed", "", StringUtils.upperCase("")); [EOL]     assertEquals("lowerCase(String) failed", "foo test thing", StringUtils.lowerCase("fOo test THING")); [EOL]     assertEquals("lowerCase(empty-string) failed", "", StringUtils.lowerCase("")); [EOL]     assertEquals("upperCase(String, Locale) failed", "FOO TEST THING", StringUtils.upperCase("fOo test THING", Locale.ENGLISH)); [EOL]     assertEquals("upperCase(empty-string, Locale) failed", "", StringUtils.upperCase("", Locale.ENGLISH)); [EOL]     assertEquals("lowerCase(String, Locale) failed", "foo test thing", StringUtils.lowerCase("fOo test THING", Locale.ENGLISH)); [EOL]     assertEquals("lowerCase(empty-string, Locale) failed", "", StringUtils.lowerCase("", Locale.ENGLISH)); [EOL] }
@Test [EOL] public void testCaseFunctions() { [EOL]     assertEquals(null, StringUtils.upperCase(null)); [EOL]     assertEquals(null, StringUtils.upperCase(null, Locale.ENGLISH)); [EOL]     assertEquals(null, StringUtils.lowerCase(null)); [EOL]     assertEquals(null, StringUtils.lowerCase(null, Locale.ENGLISH)); [EOL]     assertEquals(null, StringUtils.capitalize(null)); [EOL]     assertEquals(null, StringUtils.uncapitalize(null)); [EOL]     assertEquals("capitalize(empty-string) failed", "", StringUtils.capitalize("")); [EOL]     assertEquals("capitalize(single-char-string) failed", "X", StringUtils.capitalize("x")); [EOL]     assertEquals("capitalize(String) failed", FOO_CAP, StringUtils.capitalize(FOO_CAP)); [EOL]     assertEquals("capitalize(string) failed", FOO_CAP, StringUtils.capitalize(FOO_UNCAP)); [EOL]     assertEquals("uncapitalize(String) failed", FOO_UNCAP, StringUtils.uncapitalize(FOO_CAP)); [EOL]     assertEquals("uncapitalize(string) failed", FOO_UNCAP, StringUtils.uncapitalize(FOO_UNCAP)); [EOL]     assertEquals("uncapitalize(empty-string) failed", "", StringUtils.uncapitalize("")); [EOL]     assertEquals("uncapitalize(single-char-string) failed", "x", StringUtils.uncapitalize("X")); [EOL]     assertEquals("uncapitalize(capitalize(String)) failed", SENTENCE_UNCAP, StringUtils.uncapitalize(StringUtils.capitalize(SENTENCE_UNCAP))); [EOL]     assertEquals("capitalize(uncapitalize(String)) failed", SENTENCE_CAP, StringUtils.capitalize(StringUtils.uncapitalize(SENTENCE_CAP))); [EOL]     assertEquals("uncapitalize(capitalize(String)) failed", FOO_UNCAP, StringUtils.uncapitalize(StringUtils.capitalize(FOO_UNCAP))); [EOL]     assertEquals("capitalize(uncapitalize(String)) failed", FOO_CAP, StringUtils.capitalize(StringUtils.uncapitalize(FOO_CAP))); [EOL]     assertEquals("upperCase(String) failed", "FOO TEST THING", StringUtils.upperCase("fOo test THING")); [EOL]     assertEquals("upperCase(empty-string) failed", "", StringUtils.upperCase("")); [EOL]     assertEquals("lowerCase(String) failed", "foo test thing", StringUtils.lowerCase("fOo test THING")); [EOL]     assertEquals("lowerCase(empty-string) failed", "", StringUtils.lowerCase("")); [EOL]     assertEquals("upperCase(String, Locale) failed", "FOO TEST THING", StringUtils.upperCase("fOo test THING", Locale.ENGLISH)); [EOL]     assertEquals("upperCase(empty-string, Locale) failed", "", StringUtils.upperCase("", Locale.ENGLISH)); [EOL]     assertEquals("lowerCase(String, Locale) failed", "foo test thing", StringUtils.lowerCase("fOo test THING", Locale.ENGLISH)); [EOL]     assertEquals("lowerCase(empty-string, Locale) failed", "", StringUtils.lowerCase("", Locale.ENGLISH)); [EOL] }
@Test [EOL] public void testCaseFunctions() { [EOL]     assertEquals(null, StringUtils.upperCase(null)); [EOL]     assertEquals(null, StringUtils.upperCase(null, Locale.ENGLISH)); [EOL]     assertEquals(null, StringUtils.lowerCase(null)); [EOL]     assertEquals(null, StringUtils.lowerCase(null, Locale.ENGLISH)); [EOL]     assertEquals(null, StringUtils.capitalize(null)); [EOL]     assertEquals(null, StringUtils.uncapitalize(null)); [EOL]     assertEquals("capitalize(empty-string) failed", "", StringUtils.capitalize("")); [EOL]     assertEquals("capitalize(single-char-string) failed", "X", StringUtils.capitalize("x")); [EOL]     assertEquals("capitalize(String) failed", FOO_CAP, StringUtils.capitalize(FOO_CAP)); [EOL]     assertEquals("capitalize(string) failed", FOO_CAP, StringUtils.capitalize(FOO_UNCAP)); [EOL]     assertEquals("uncapitalize(String) failed", FOO_UNCAP, StringUtils.uncapitalize(FOO_CAP)); [EOL]     assertEquals("uncapitalize(string) failed", FOO_UNCAP, StringUtils.uncapitalize(FOO_UNCAP)); [EOL]     assertEquals("uncapitalize(empty-string) failed", "", StringUtils.uncapitalize("")); [EOL]     assertEquals("uncapitalize(single-char-string) failed", "x", StringUtils.uncapitalize("X")); [EOL]     assertEquals("uncapitalize(capitalize(String)) failed", SENTENCE_UNCAP, StringUtils.uncapitalize(StringUtils.capitalize(SENTENCE_UNCAP))); [EOL]     assertEquals("capitalize(uncapitalize(String)) failed", SENTENCE_CAP, StringUtils.capitalize(StringUtils.uncapitalize(SENTENCE_CAP))); [EOL]     assertEquals("uncapitalize(capitalize(String)) failed", FOO_UNCAP, StringUtils.uncapitalize(StringUtils.capitalize(FOO_UNCAP))); [EOL]     assertEquals("capitalize(uncapitalize(String)) failed", FOO_CAP, StringUtils.capitalize(StringUtils.uncapitalize(FOO_CAP))); [EOL]     assertEquals("upperCase(String) failed", "FOO TEST THING", StringUtils.upperCase("fOo test THING")); [EOL]     assertEquals("upperCase(empty-string) failed", "", StringUtils.upperCase("")); [EOL]     assertEquals("lowerCase(String) failed", "foo test thing", StringUtils.lowerCase("fOo test THING")); [EOL]     assertEquals("lowerCase(empty-string) failed", "", StringUtils.lowerCase("")); [EOL]     assertEquals("upperCase(String, Locale) failed", "FOO TEST THING", StringUtils.upperCase("fOo test THING", Locale.ENGLISH)); [EOL]     assertEquals("upperCase(empty-string, Locale) failed", "", StringUtils.upperCase("", Locale.ENGLISH)); [EOL]     assertEquals("lowerCase(String, Locale) failed", "foo test thing", StringUtils.lowerCase("fOo test THING", Locale.ENGLISH)); [EOL]     assertEquals("lowerCase(empty-string, Locale) failed", "", StringUtils.lowerCase("", Locale.ENGLISH)); [EOL] }
@Test [EOL] public void testCaseFunctions() { [EOL]     assertEquals(null, StringUtils.upperCase(null)); [EOL]     assertEquals(null, StringUtils.upperCase(null, Locale.ENGLISH)); [EOL]     assertEquals(null, StringUtils.lowerCase(null)); [EOL]     assertEquals(null, StringUtils.lowerCase(null, Locale.ENGLISH)); [EOL]     assertEquals(null, StringUtils.capitalize(null)); [EOL]     assertEquals(null, StringUtils.uncapitalize(null)); [EOL]     assertEquals("capitalize(empty-string) failed", "", StringUtils.capitalize("")); [EOL]     assertEquals("capitalize(single-char-string) failed", "X", StringUtils.capitalize("x")); [EOL]     assertEquals("capitalize(String) failed", FOO_CAP, StringUtils.capitalize(FOO_CAP)); [EOL]     assertEquals("capitalize(string) failed", FOO_CAP, StringUtils.capitalize(FOO_UNCAP)); [EOL]     assertEquals("uncapitalize(String) failed", FOO_UNCAP, StringUtils.uncapitalize(FOO_CAP)); [EOL]     assertEquals("uncapitalize(string) failed", FOO_UNCAP, StringUtils.uncapitalize(FOO_UNCAP)); [EOL]     assertEquals("uncapitalize(empty-string) failed", "", StringUtils.uncapitalize("")); [EOL]     assertEquals("uncapitalize(single-char-string) failed", "x", StringUtils.uncapitalize("X")); [EOL]     assertEquals("uncapitalize(capitalize(String)) failed", SENTENCE_UNCAP, StringUtils.uncapitalize(StringUtils.capitalize(SENTENCE_UNCAP))); [EOL]     assertEquals("capitalize(uncapitalize(String)) failed", SENTENCE_CAP, StringUtils.capitalize(StringUtils.uncapitalize(SENTENCE_CAP))); [EOL]     assertEquals("uncapitalize(capitalize(String)) failed", FOO_UNCAP, StringUtils.uncapitalize(StringUtils.capitalize(FOO_UNCAP))); [EOL]     assertEquals("capitalize(uncapitalize(String)) failed", FOO_CAP, StringUtils.capitalize(StringUtils.uncapitalize(FOO_CAP))); [EOL]     assertEquals("upperCase(String) failed", "FOO TEST THING", StringUtils.upperCase("fOo test THING")); [EOL]     assertEquals("upperCase(empty-string) failed", "", StringUtils.upperCase("")); [EOL]     assertEquals("lowerCase(String) failed", "foo test thing", StringUtils.lowerCase("fOo test THING")); [EOL]     assertEquals("lowerCase(empty-string) failed", "", StringUtils.lowerCase("")); [EOL]     assertEquals("upperCase(String, Locale) failed", "FOO TEST THING", StringUtils.upperCase("fOo test THING", Locale.ENGLISH)); [EOL]     assertEquals("upperCase(empty-string, Locale) failed", "", StringUtils.upperCase("", Locale.ENGLISH)); [EOL]     assertEquals("lowerCase(String, Locale) failed", "foo test thing", StringUtils.lowerCase("fOo test THING", Locale.ENGLISH)); [EOL]     assertEquals("lowerCase(empty-string, Locale) failed", "", StringUtils.lowerCase("", Locale.ENGLISH)); [EOL] }
@Test [EOL] public void testCaseFunctions() { [EOL]     assertEquals(null, StringUtils.upperCase(null)); [EOL]     assertEquals(null, StringUtils.upperCase(null, Locale.ENGLISH)); [EOL]     assertEquals(null, StringUtils.lowerCase(null)); [EOL]     assertEquals(null, StringUtils.lowerCase(null, Locale.ENGLISH)); [EOL]     assertEquals(null, StringUtils.capitalize(null)); [EOL]     assertEquals(null, StringUtils.uncapitalize(null)); [EOL]     assertEquals("capitalize(empty-string) failed", "", StringUtils.capitalize("")); [EOL]     assertEquals("capitalize(single-char-string) failed", "X", StringUtils.capitalize("x")); [EOL]     assertEquals("capitalize(String) failed", FOO_CAP, StringUtils.capitalize(FOO_CAP)); [EOL]     assertEquals("capitalize(string) failed", FOO_CAP, StringUtils.capitalize(FOO_UNCAP)); [EOL]     assertEquals("uncapitalize(String) failed", FOO_UNCAP, StringUtils.uncapitalize(FOO_CAP)); [EOL]     assertEquals("uncapitalize(string) failed", FOO_UNCAP, StringUtils.uncapitalize(FOO_UNCAP)); [EOL]     assertEquals("uncapitalize(empty-string) failed", "", StringUtils.uncapitalize("")); [EOL]     assertEquals("uncapitalize(single-char-string) failed", "x", StringUtils.uncapitalize("X")); [EOL]     assertEquals("uncapitalize(capitalize(String)) failed", SENTENCE_UNCAP, StringUtils.uncapitalize(StringUtils.capitalize(SENTENCE_UNCAP))); [EOL]     assertEquals("capitalize(uncapitalize(String)) failed", SENTENCE_CAP, StringUtils.capitalize(StringUtils.uncapitalize(SENTENCE_CAP))); [EOL]     assertEquals("uncapitalize(capitalize(String)) failed", FOO_UNCAP, StringUtils.uncapitalize(StringUtils.capitalize(FOO_UNCAP))); [EOL]     assertEquals("capitalize(uncapitalize(String)) failed", FOO_CAP, StringUtils.capitalize(StringUtils.uncapitalize(FOO_CAP))); [EOL]     assertEquals("upperCase(String) failed", "FOO TEST THING", StringUtils.upperCase("fOo test THING")); [EOL]     assertEquals("upperCase(empty-string) failed", "", StringUtils.upperCase("")); [EOL]     assertEquals("lowerCase(String) failed", "foo test thing", StringUtils.lowerCase("fOo test THING")); [EOL]     assertEquals("lowerCase(empty-string) failed", "", StringUtils.lowerCase("")); [EOL]     assertEquals("upperCase(String, Locale) failed", "FOO TEST THING", StringUtils.upperCase("fOo test THING", Locale.ENGLISH)); [EOL]     assertEquals("upperCase(empty-string, Locale) failed", "", StringUtils.upperCase("", Locale.ENGLISH)); [EOL]     assertEquals("lowerCase(String, Locale) failed", "foo test thing", StringUtils.lowerCase("fOo test THING", Locale.ENGLISH)); [EOL]     assertEquals("lowerCase(empty-string, Locale) failed", "", StringUtils.lowerCase("", Locale.ENGLISH)); [EOL] }
@Test [EOL] public void testCaseFunctions() { [EOL]     assertEquals(null, StringUtils.upperCase(null)); [EOL]     assertEquals(null, StringUtils.upperCase(null, Locale.ENGLISH)); [EOL]     assertEquals(null, StringUtils.lowerCase(null)); [EOL]     assertEquals(null, StringUtils.lowerCase(null, Locale.ENGLISH)); [EOL]     assertEquals(null, StringUtils.capitalize(null)); [EOL]     assertEquals(null, StringUtils.uncapitalize(null)); [EOL]     assertEquals("capitalize(empty-string) failed", "", StringUtils.capitalize("")); [EOL]     assertEquals("capitalize(single-char-string) failed", "X", StringUtils.capitalize("x")); [EOL]     assertEquals("capitalize(String) failed", FOO_CAP, StringUtils.capitalize(FOO_CAP)); [EOL]     assertEquals("capitalize(string) failed", FOO_CAP, StringUtils.capitalize(FOO_UNCAP)); [EOL]     assertEquals("uncapitalize(String) failed", FOO_UNCAP, StringUtils.uncapitalize(FOO_CAP)); [EOL]     assertEquals("uncapitalize(string) failed", FOO_UNCAP, StringUtils.uncapitalize(FOO_UNCAP)); [EOL]     assertEquals("uncapitalize(empty-string) failed", "", StringUtils.uncapitalize("")); [EOL]     assertEquals("uncapitalize(single-char-string) failed", "x", StringUtils.uncapitalize("X")); [EOL]     assertEquals("uncapitalize(capitalize(String)) failed", SENTENCE_UNCAP, StringUtils.uncapitalize(StringUtils.capitalize(SENTENCE_UNCAP))); [EOL]     assertEquals("capitalize(uncapitalize(String)) failed", SENTENCE_CAP, StringUtils.capitalize(StringUtils.uncapitalize(SENTENCE_CAP))); [EOL]     assertEquals("uncapitalize(capitalize(String)) failed", FOO_UNCAP, StringUtils.uncapitalize(StringUtils.capitalize(FOO_UNCAP))); [EOL]     assertEquals("capitalize(uncapitalize(String)) failed", FOO_CAP, StringUtils.capitalize(StringUtils.uncapitalize(FOO_CAP))); [EOL]     assertEquals("upperCase(String) failed", "FOO TEST THING", StringUtils.upperCase("fOo test THING")); [EOL]     assertEquals("upperCase(empty-string) failed", "", StringUtils.upperCase("")); [EOL]     assertEquals("lowerCase(String) failed", "foo test thing", StringUtils.lowerCase("fOo test THING")); [EOL]     assertEquals("lowerCase(empty-string) failed", "", StringUtils.lowerCase("")); [EOL]     assertEquals("upperCase(String, Locale) failed", "FOO TEST THING", StringUtils.upperCase("fOo test THING", Locale.ENGLISH)); [EOL]     assertEquals("upperCase(empty-string, Locale) failed", "", StringUtils.upperCase("", Locale.ENGLISH)); [EOL]     assertEquals("lowerCase(String, Locale) failed", "foo test thing", StringUtils.lowerCase("fOo test THING", Locale.ENGLISH)); [EOL]     assertEquals("lowerCase(empty-string, Locale) failed", "", StringUtils.lowerCase("", Locale.ENGLISH)); [EOL] }
@Test [EOL] public void testCaseFunctions() { [EOL]     assertEquals(null, StringUtils.upperCase(null)); [EOL]     assertEquals(null, StringUtils.upperCase(null, Locale.ENGLISH)); [EOL]     assertEquals(null, StringUtils.lowerCase(null)); [EOL]     assertEquals(null, StringUtils.lowerCase(null, Locale.ENGLISH)); [EOL]     assertEquals(null, StringUtils.capitalize(null)); [EOL]     assertEquals(null, StringUtils.uncapitalize(null)); [EOL]     assertEquals("capitalize(empty-string) failed", "", StringUtils.capitalize("")); [EOL]     assertEquals("capitalize(single-char-string) failed", "X", StringUtils.capitalize("x")); [EOL]     assertEquals("capitalize(String) failed", FOO_CAP, StringUtils.capitalize(FOO_CAP)); [EOL]     assertEquals("capitalize(string) failed", FOO_CAP, StringUtils.capitalize(FOO_UNCAP)); [EOL]     assertEquals("uncapitalize(String) failed", FOO_UNCAP, StringUtils.uncapitalize(FOO_CAP)); [EOL]     assertEquals("uncapitalize(string) failed", FOO_UNCAP, StringUtils.uncapitalize(FOO_UNCAP)); [EOL]     assertEquals("uncapitalize(empty-string) failed", "", StringUtils.uncapitalize("")); [EOL]     assertEquals("uncapitalize(single-char-string) failed", "x", StringUtils.uncapitalize("X")); [EOL]     assertEquals("uncapitalize(capitalize(String)) failed", SENTENCE_UNCAP, StringUtils.uncapitalize(StringUtils.capitalize(SENTENCE_UNCAP))); [EOL]     assertEquals("capitalize(uncapitalize(String)) failed", SENTENCE_CAP, StringUtils.capitalize(StringUtils.uncapitalize(SENTENCE_CAP))); [EOL]     assertEquals("uncapitalize(capitalize(String)) failed", FOO_UNCAP, StringUtils.uncapitalize(StringUtils.capitalize(FOO_UNCAP))); [EOL]     assertEquals("capitalize(uncapitalize(String)) failed", FOO_CAP, StringUtils.capitalize(StringUtils.uncapitalize(FOO_CAP))); [EOL]     assertEquals("upperCase(String) failed", "FOO TEST THING", StringUtils.upperCase("fOo test THING")); [EOL]     assertEquals("upperCase(empty-string) failed", "", StringUtils.upperCase("")); [EOL]     assertEquals("lowerCase(String) failed", "foo test thing", StringUtils.lowerCase("fOo test THING")); [EOL]     assertEquals("lowerCase(empty-string) failed", "", StringUtils.lowerCase("")); [EOL]     assertEquals("upperCase(String, Locale) failed", "FOO TEST THING", StringUtils.upperCase("fOo test THING", Locale.ENGLISH)); [EOL]     assertEquals("upperCase(empty-string, Locale) failed", "", StringUtils.upperCase("", Locale.ENGLISH)); [EOL]     assertEquals("lowerCase(String, Locale) failed", "foo test thing", StringUtils.lowerCase("fOo test THING", Locale.ENGLISH)); [EOL]     assertEquals("lowerCase(empty-string, Locale) failed", "", StringUtils.lowerCase("", Locale.ENGLISH)); [EOL] }
@Test [EOL] public void testIsNumeric() { [EOL]     assertFalse(StringUtils.isNumeric(null)); [EOL]     assertFalse(StringUtils.isNumeric("")); [EOL]     assertFalse(StringUtils.isNumeric(" ")); [EOL]     assertFalse(StringUtils.isNumeric("a")); [EOL]     assertFalse(StringUtils.isNumeric("A")); [EOL]     assertFalse(StringUtils.isNumeric("kgKgKgKgkgkGkjkjlJlOKLgHdGdHgl")); [EOL]     assertFalse(StringUtils.isNumeric("ham kso")); [EOL]     assertTrue(StringUtils.isNumeric("1")); [EOL]     assertTrue(StringUtils.isNumeric("1000")); [EOL]     assertFalse(StringUtils.isNumeric("2.3")); [EOL]     assertFalse(StringUtils.isNumeric("10 00")); [EOL]     assertFalse(StringUtils.isNumeric("hkHKHik6iUGHKJgU7tUJgKJGI87GIkug")); [EOL]     assertFalse(StringUtils.isNumeric("_")); [EOL]     assertFalse(StringUtils.isNumeric("hkHKHik*khbkuh")); [EOL]     assertFalse(StringUtils.isNumeric("+123")); [EOL]     assertFalse(StringUtils.isNumeric("-123")); [EOL] }
@Test [EOL] public void testIsNumericSpace() { [EOL]     assertFalse(StringUtils.isNumericSpace(null)); [EOL]     assertTrue(StringUtils.isNumericSpace("")); [EOL]     assertTrue(StringUtils.isNumericSpace(" ")); [EOL]     assertFalse(StringUtils.isNumericSpace("a")); [EOL]     assertFalse(StringUtils.isNumericSpace("A")); [EOL]     assertFalse(StringUtils.isNumericSpace("kgKgKgKgkgkGkjkjlJlOKLgHdGdHgl")); [EOL]     assertFalse(StringUtils.isNumericSpace("ham kso")); [EOL]     assertTrue(StringUtils.isNumericSpace("1")); [EOL]     assertTrue(StringUtils.isNumericSpace("1000")); [EOL]     assertFalse(StringUtils.isNumericSpace("2.3")); [EOL]     assertTrue(StringUtils.isNumericSpace("10 00")); [EOL]     assertFalse(StringUtils.isNumericSpace("hkHKHik6iUGHKJgU7tUJgKJGI87GIkug")); [EOL]     assertFalse(StringUtils.isNumericSpace("_")); [EOL]     assertFalse(StringUtils.isNumericSpace("hkHKHik*khbkuh")); [EOL] }
@Test [EOL] public void testIsAllUpperCase() { [EOL]     assertFalse(StringUtils.isAllUpperCase(null)); [EOL]     assertFalse(StringUtils.isAllUpperCase(StringUtils.EMPTY)); [EOL]     assertTrue(StringUtils.isAllUpperCase("ABC")); [EOL]     assertFalse(StringUtils.isAllUpperCase("ABC ")); [EOL]     assertFalse(StringUtils.isAllUpperCase("aBC")); [EOL] }
@Test [EOL] public void testIsAllUpperCase() { [EOL]     assertFalse(StringUtils.isAllUpperCase(null)); [EOL]     assertFalse(StringUtils.isAllUpperCase(StringUtils.EMPTY)); [EOL]     assertTrue(StringUtils.isAllUpperCase("ABC")); [EOL]     assertFalse(StringUtils.isAllUpperCase("ABC ")); [EOL]     assertFalse(StringUtils.isAllUpperCase("aBC")); [EOL] }
@Test [EOL] public void testIsAllUpperCase() { [EOL]     assertFalse(StringUtils.isAllUpperCase(null)); [EOL]     assertFalse(StringUtils.isAllUpperCase(StringUtils.EMPTY)); [EOL]     assertTrue(StringUtils.isAllUpperCase("ABC")); [EOL]     assertFalse(StringUtils.isAllUpperCase("ABC ")); [EOL]     assertFalse(StringUtils.isAllUpperCase("aBC")); [EOL] }
@Test [EOL] public void testIsAllUpperCase() { [EOL]     assertFalse(StringUtils.isAllUpperCase(null)); [EOL]     assertFalse(StringUtils.isAllUpperCase(StringUtils.EMPTY)); [EOL]     assertTrue(StringUtils.isAllUpperCase("ABC")); [EOL]     assertFalse(StringUtils.isAllUpperCase("ABC ")); [EOL]     assertFalse(StringUtils.isAllUpperCase("aBC")); [EOL] }
@Test [EOL] public void testIsAllUpperCase() { [EOL]     assertFalse(StringUtils.isAllUpperCase(null)); [EOL]     assertFalse(StringUtils.isAllUpperCase(StringUtils.EMPTY)); [EOL]     assertTrue(StringUtils.isAllUpperCase("ABC")); [EOL]     assertFalse(StringUtils.isAllUpperCase("ABC ")); [EOL]     assertFalse(StringUtils.isAllUpperCase("aBC")); [EOL] }
@Test [EOL] public void testDefault_StringString() { [EOL]     assertEquals("NULL", StringUtils.defaultString(null, "NULL")); [EOL]     assertEquals("", StringUtils.defaultString("", "NULL")); [EOL]     assertEquals("abc", StringUtils.defaultString("abc", "NULL")); [EOL] }
@Test [EOL] public void testDefault_StringString() { [EOL]     assertEquals("NULL", StringUtils.defaultString(null, "NULL")); [EOL]     assertEquals("", StringUtils.defaultString("", "NULL")); [EOL]     assertEquals("abc", StringUtils.defaultString("abc", "NULL")); [EOL] }
@Test [EOL] public void testAbbreviateMiddle() { [EOL]     assertNull(StringUtils.abbreviateMiddle(null, null, 0)); [EOL]     assertEquals("abc", StringUtils.abbreviateMiddle("abc", null, 0)); [EOL]     assertEquals("abc", StringUtils.abbreviateMiddle("abc", ".", 0)); [EOL]     assertEquals("abc", StringUtils.abbreviateMiddle("abc", ".", 3)); [EOL]     assertEquals("ab.f", StringUtils.abbreviateMiddle("abcdef", ".", 4)); [EOL]     assertEquals("A very long text with un...f the text is complete.", StringUtils.abbreviateMiddle("A very long text with unimportant stuff in the middle but interesting start and " + "end to see if the text is complete.", "...", 50)); [EOL]     final String longText = "Start text" + StringUtils.repeat("x", 10000) + "Close text"; [EOL]     assertEquals("Start text->Close text", StringUtils.abbreviateMiddle(longText, "->", 22)); [EOL]     assertEquals("abc", StringUtils.abbreviateMiddle("abc", ".", -1)); [EOL]     assertEquals("abc", StringUtils.abbreviateMiddle("abc", ".", 1)); [EOL]     assertEquals("abc", StringUtils.abbreviateMiddle("abc", ".", 2)); [EOL]     assertEquals("a", StringUtils.abbreviateMiddle("a", ".", 1)); [EOL]     assertEquals("a.d", StringUtils.abbreviateMiddle("abcd", ".", 3)); [EOL]     assertEquals("a..f", StringUtils.abbreviateMiddle("abcdef", "..", 4)); [EOL]     assertEquals("ab.ef", StringUtils.abbreviateMiddle("abcdef", ".", 5)); [EOL] }
@Test [EOL] public void testDifferenceAt_StringArray() { [EOL]     assertEquals(-1, StringUtils.indexOfDifference((String[]) null)); [EOL]     assertEquals(-1, StringUtils.indexOfDifference(new String[] {})); [EOL]     assertEquals(-1, StringUtils.indexOfDifference(new String[] { "abc" })); [EOL]     assertEquals(-1, StringUtils.indexOfDifference(new String[] { null, null })); [EOL]     assertEquals(-1, StringUtils.indexOfDifference(new String[] { "", "" })); [EOL]     assertEquals(0, StringUtils.indexOfDifference(new String[] { "", null })); [EOL]     assertEquals(0, StringUtils.indexOfDifference(new String[] { "abc", null, null })); [EOL]     assertEquals(0, StringUtils.indexOfDifference(new String[] { null, null, "abc" })); [EOL]     assertEquals(0, StringUtils.indexOfDifference(new String[] { "", "abc" })); [EOL]     assertEquals(0, StringUtils.indexOfDifference(new String[] { "abc", "" })); [EOL]     assertEquals(-1, StringUtils.indexOfDifference(new String[] { "abc", "abc" })); [EOL]     assertEquals(1, StringUtils.indexOfDifference(new String[] { "abc", "a" })); [EOL]     assertEquals(2, StringUtils.indexOfDifference(new String[] { "ab", "abxyz" })); [EOL]     assertEquals(2, StringUtils.indexOfDifference(new String[] { "abcde", "abxyz" })); [EOL]     assertEquals(0, StringUtils.indexOfDifference(new String[] { "abcde", "xyz" })); [EOL]     assertEquals(0, StringUtils.indexOfDifference(new String[] { "xyz", "abcde" })); [EOL]     assertEquals(7, StringUtils.indexOfDifference(new String[] { "i am a machine", "i am a robot" })); [EOL] }
@Test [EOL] public void testDifferenceAt_StringArray() { [EOL]     assertEquals(-1, StringUtils.indexOfDifference((String[]) null)); [EOL]     assertEquals(-1, StringUtils.indexOfDifference(new String[] {})); [EOL]     assertEquals(-1, StringUtils.indexOfDifference(new String[] { "abc" })); [EOL]     assertEquals(-1, StringUtils.indexOfDifference(new String[] { null, null })); [EOL]     assertEquals(-1, StringUtils.indexOfDifference(new String[] { "", "" })); [EOL]     assertEquals(0, StringUtils.indexOfDifference(new String[] { "", null })); [EOL]     assertEquals(0, StringUtils.indexOfDifference(new String[] { "abc", null, null })); [EOL]     assertEquals(0, StringUtils.indexOfDifference(new String[] { null, null, "abc" })); [EOL]     assertEquals(0, StringUtils.indexOfDifference(new String[] { "", "abc" })); [EOL]     assertEquals(0, StringUtils.indexOfDifference(new String[] { "abc", "" })); [EOL]     assertEquals(-1, StringUtils.indexOfDifference(new String[] { "abc", "abc" })); [EOL]     assertEquals(1, StringUtils.indexOfDifference(new String[] { "abc", "a" })); [EOL]     assertEquals(2, StringUtils.indexOfDifference(new String[] { "ab", "abxyz" })); [EOL]     assertEquals(2, StringUtils.indexOfDifference(new String[] { "abcde", "abxyz" })); [EOL]     assertEquals(0, StringUtils.indexOfDifference(new String[] { "abcde", "xyz" })); [EOL]     assertEquals(0, StringUtils.indexOfDifference(new String[] { "xyz", "abcde" })); [EOL]     assertEquals(7, StringUtils.indexOfDifference(new String[] { "i am a machine", "i am a robot" })); [EOL] }
@Test [EOL] public void testDifferenceAt_StringArray() { [EOL]     assertEquals(-1, StringUtils.indexOfDifference((String[]) null)); [EOL]     assertEquals(-1, StringUtils.indexOfDifference(new String[] {})); [EOL]     assertEquals(-1, StringUtils.indexOfDifference(new String[] { "abc" })); [EOL]     assertEquals(-1, StringUtils.indexOfDifference(new String[] { null, null })); [EOL]     assertEquals(-1, StringUtils.indexOfDifference(new String[] { "", "" })); [EOL]     assertEquals(0, StringUtils.indexOfDifference(new String[] { "", null })); [EOL]     assertEquals(0, StringUtils.indexOfDifference(new String[] { "abc", null, null })); [EOL]     assertEquals(0, StringUtils.indexOfDifference(new String[] { null, null, "abc" })); [EOL]     assertEquals(0, StringUtils.indexOfDifference(new String[] { "", "abc" })); [EOL]     assertEquals(0, StringUtils.indexOfDifference(new String[] { "abc", "" })); [EOL]     assertEquals(-1, StringUtils.indexOfDifference(new String[] { "abc", "abc" })); [EOL]     assertEquals(1, StringUtils.indexOfDifference(new String[] { "abc", "a" })); [EOL]     assertEquals(2, StringUtils.indexOfDifference(new String[] { "ab", "abxyz" })); [EOL]     assertEquals(2, StringUtils.indexOfDifference(new String[] { "abcde", "abxyz" })); [EOL]     assertEquals(0, StringUtils.indexOfDifference(new String[] { "abcde", "xyz" })); [EOL]     assertEquals(0, StringUtils.indexOfDifference(new String[] { "xyz", "abcde" })); [EOL]     assertEquals(7, StringUtils.indexOfDifference(new String[] { "i am a machine", "i am a robot" })); [EOL] }
@Test [EOL] public void testDifferenceAt_StringArray() { [EOL]     assertEquals(-1, StringUtils.indexOfDifference((String[]) null)); [EOL]     assertEquals(-1, StringUtils.indexOfDifference(new String[] {})); [EOL]     assertEquals(-1, StringUtils.indexOfDifference(new String[] { "abc" })); [EOL]     assertEquals(-1, StringUtils.indexOfDifference(new String[] { null, null })); [EOL]     assertEquals(-1, StringUtils.indexOfDifference(new String[] { "", "" })); [EOL]     assertEquals(0, StringUtils.indexOfDifference(new String[] { "", null })); [EOL]     assertEquals(0, StringUtils.indexOfDifference(new String[] { "abc", null, null })); [EOL]     assertEquals(0, StringUtils.indexOfDifference(new String[] { null, null, "abc" })); [EOL]     assertEquals(0, StringUtils.indexOfDifference(new String[] { "", "abc" })); [EOL]     assertEquals(0, StringUtils.indexOfDifference(new String[] { "abc", "" })); [EOL]     assertEquals(-1, StringUtils.indexOfDifference(new String[] { "abc", "abc" })); [EOL]     assertEquals(1, StringUtils.indexOfDifference(new String[] { "abc", "a" })); [EOL]     assertEquals(2, StringUtils.indexOfDifference(new String[] { "ab", "abxyz" })); [EOL]     assertEquals(2, StringUtils.indexOfDifference(new String[] { "abcde", "abxyz" })); [EOL]     assertEquals(0, StringUtils.indexOfDifference(new String[] { "abcde", "xyz" })); [EOL]     assertEquals(0, StringUtils.indexOfDifference(new String[] { "xyz", "abcde" })); [EOL]     assertEquals(7, StringUtils.indexOfDifference(new String[] { "i am a machine", "i am a robot" })); [EOL] }
@Test [EOL] public void testDifferenceAt_StringArray() { [EOL]     assertEquals(-1, StringUtils.indexOfDifference((String[]) null)); [EOL]     assertEquals(-1, StringUtils.indexOfDifference(new String[] {})); [EOL]     assertEquals(-1, StringUtils.indexOfDifference(new String[] { "abc" })); [EOL]     assertEquals(-1, StringUtils.indexOfDifference(new String[] { null, null })); [EOL]     assertEquals(-1, StringUtils.indexOfDifference(new String[] { "", "" })); [EOL]     assertEquals(0, StringUtils.indexOfDifference(new String[] { "", null })); [EOL]     assertEquals(0, StringUtils.indexOfDifference(new String[] { "abc", null, null })); [EOL]     assertEquals(0, StringUtils.indexOfDifference(new String[] { null, null, "abc" })); [EOL]     assertEquals(0, StringUtils.indexOfDifference(new String[] { "", "abc" })); [EOL]     assertEquals(0, StringUtils.indexOfDifference(new String[] { "abc", "" })); [EOL]     assertEquals(-1, StringUtils.indexOfDifference(new String[] { "abc", "abc" })); [EOL]     assertEquals(1, StringUtils.indexOfDifference(new String[] { "abc", "a" })); [EOL]     assertEquals(2, StringUtils.indexOfDifference(new String[] { "ab", "abxyz" })); [EOL]     assertEquals(2, StringUtils.indexOfDifference(new String[] { "abcde", "abxyz" })); [EOL]     assertEquals(0, StringUtils.indexOfDifference(new String[] { "abcde", "xyz" })); [EOL]     assertEquals(0, StringUtils.indexOfDifference(new String[] { "xyz", "abcde" })); [EOL]     assertEquals(7, StringUtils.indexOfDifference(new String[] { "i am a machine", "i am a robot" })); [EOL] }
@Test [EOL] public void testDifferenceAt_StringArray() { [EOL]     assertEquals(-1, StringUtils.indexOfDifference((String[]) null)); [EOL]     assertEquals(-1, StringUtils.indexOfDifference(new String[] {})); [EOL]     assertEquals(-1, StringUtils.indexOfDifference(new String[] { "abc" })); [EOL]     assertEquals(-1, StringUtils.indexOfDifference(new String[] { null, null })); [EOL]     assertEquals(-1, StringUtils.indexOfDifference(new String[] { "", "" })); [EOL]     assertEquals(0, StringUtils.indexOfDifference(new String[] { "", null })); [EOL]     assertEquals(0, StringUtils.indexOfDifference(new String[] { "abc", null, null })); [EOL]     assertEquals(0, StringUtils.indexOfDifference(new String[] { null, null, "abc" })); [EOL]     assertEquals(0, StringUtils.indexOfDifference(new String[] { "", "abc" })); [EOL]     assertEquals(0, StringUtils.indexOfDifference(new String[] { "abc", "" })); [EOL]     assertEquals(-1, StringUtils.indexOfDifference(new String[] { "abc", "abc" })); [EOL]     assertEquals(1, StringUtils.indexOfDifference(new String[] { "abc", "a" })); [EOL]     assertEquals(2, StringUtils.indexOfDifference(new String[] { "ab", "abxyz" })); [EOL]     assertEquals(2, StringUtils.indexOfDifference(new String[] { "abcde", "abxyz" })); [EOL]     assertEquals(0, StringUtils.indexOfDifference(new String[] { "abcde", "xyz" })); [EOL]     assertEquals(0, StringUtils.indexOfDifference(new String[] { "xyz", "abcde" })); [EOL]     assertEquals(7, StringUtils.indexOfDifference(new String[] { "i am a machine", "i am a robot" })); [EOL] }
@Test [EOL] public void testDifferenceAt_StringArray() { [EOL]     assertEquals(-1, StringUtils.indexOfDifference((String[]) null)); [EOL]     assertEquals(-1, StringUtils.indexOfDifference(new String[] {})); [EOL]     assertEquals(-1, StringUtils.indexOfDifference(new String[] { "abc" })); [EOL]     assertEquals(-1, StringUtils.indexOfDifference(new String[] { null, null })); [EOL]     assertEquals(-1, StringUtils.indexOfDifference(new String[] { "", "" })); [EOL]     assertEquals(0, StringUtils.indexOfDifference(new String[] { "", null })); [EOL]     assertEquals(0, StringUtils.indexOfDifference(new String[] { "abc", null, null })); [EOL]     assertEquals(0, StringUtils.indexOfDifference(new String[] { null, null, "abc" })); [EOL]     assertEquals(0, StringUtils.indexOfDifference(new String[] { "", "abc" })); [EOL]     assertEquals(0, StringUtils.indexOfDifference(new String[] { "abc", "" })); [EOL]     assertEquals(-1, StringUtils.indexOfDifference(new String[] { "abc", "abc" })); [EOL]     assertEquals(1, StringUtils.indexOfDifference(new String[] { "abc", "a" })); [EOL]     assertEquals(2, StringUtils.indexOfDifference(new String[] { "ab", "abxyz" })); [EOL]     assertEquals(2, StringUtils.indexOfDifference(new String[] { "abcde", "abxyz" })); [EOL]     assertEquals(0, StringUtils.indexOfDifference(new String[] { "abcde", "xyz" })); [EOL]     assertEquals(0, StringUtils.indexOfDifference(new String[] { "xyz", "abcde" })); [EOL]     assertEquals(7, StringUtils.indexOfDifference(new String[] { "i am a machine", "i am a robot" })); [EOL] }
@Test [EOL] public void testGetLevenshteinDistance_StringStringInt() { [EOL]     assertEquals(0, StringUtils.getLevenshteinDistance("", "", 0)); [EOL]     assertEquals(7, StringUtils.getLevenshteinDistance("aaapppp", "", 8)); [EOL]     assertEquals(7, StringUtils.getLevenshteinDistance("aaapppp", "", 7)); [EOL]     assertEquals(-1, StringUtils.getLevenshteinDistance("aaapppp", "", 6)); [EOL]     assertEquals(-1, StringUtils.getLevenshteinDistance("b", "a", 0)); [EOL]     assertEquals(-1, StringUtils.getLevenshteinDistance("a", "b", 0)); [EOL]     assertEquals(0, StringUtils.getLevenshteinDistance("aa", "aa", 0)); [EOL]     assertEquals(0, StringUtils.getLevenshteinDistance("aa", "aa", 2)); [EOL]     assertEquals(-1, StringUtils.getLevenshteinDistance("aaa", "bbb", 2)); [EOL]     assertEquals(3, StringUtils.getLevenshteinDistance("aaa", "bbb", 3)); [EOL]     assertEquals(6, StringUtils.getLevenshteinDistance("aaaaaa", "b", 10)); [EOL]     assertEquals(7, StringUtils.getLevenshteinDistance("aaapppp", "b", 8)); [EOL]     assertEquals(3, StringUtils.getLevenshteinDistance("a", "bbb", 4)); [EOL]     assertEquals(7, StringUtils.getLevenshteinDistance("aaapppp", "b", 7)); [EOL]     assertEquals(3, StringUtils.getLevenshteinDistance("a", "bbb", 3)); [EOL]     assertEquals(-1, StringUtils.getLevenshteinDistance("a", "bbb", 2)); [EOL]     assertEquals(-1, StringUtils.getLevenshteinDistance("bbb", "a", 2)); [EOL]     assertEquals(-1, StringUtils.getLevenshteinDistance("aaapppp", "b", 6)); [EOL]     assertEquals(-1, StringUtils.getLevenshteinDistance("a", "bbb", 1)); [EOL]     assertEquals(-1, StringUtils.getLevenshteinDistance("bbb", "a", 1)); [EOL]     assertEquals(-1, StringUtils.getLevenshteinDistance("12345", "1234567", 1)); [EOL]     assertEquals(-1, StringUtils.getLevenshteinDistance("1234567", "12345", 1)); [EOL]     assertEquals(1, StringUtils.getLevenshteinDistance("frog", "fog", 1)); [EOL]     assertEquals(3, StringUtils.getLevenshteinDistance("fly", "ant", 3)); [EOL]     assertEquals(7, StringUtils.getLevenshteinDistance("elephant", "hippo", 7)); [EOL]     assertEquals(-1, StringUtils.getLevenshteinDistance("elephant", "hippo", 6)); [EOL]     assertEquals(7, StringUtils.getLevenshteinDistance("hippo", "elephant", 7)); [EOL]     assertEquals(-1, StringUtils.getLevenshteinDistance("hippo", "elephant", 6)); [EOL]     assertEquals(8, StringUtils.getLevenshteinDistance("hippo", "zzzzzzzz", 8)); [EOL]     assertEquals(8, StringUtils.getLevenshteinDistance("zzzzzzzz", "hippo", 8)); [EOL]     assertEquals(1, StringUtils.getLevenshteinDistance("hello", "hallo", 1)); [EOL]     try { [EOL]         @SuppressWarnings("unused") [EOL]         final int d = StringUtils.getLevenshteinDistance("a", null, 0); [EOL]         fail("expecting IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         @SuppressWarnings("unused") [EOL]         final int d = StringUtils.getLevenshteinDistance(null, "a", 0); [EOL]         fail("expecting IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         @SuppressWarnings("unused") [EOL]         final int d = StringUtils.getLevenshteinDistance("a", "a", -1); [EOL]         fail("expecting IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL] }
@Test [EOL] public void testStartsWithAny() { [EOL]     assertFalse(StringUtils.startsWithAny(null, (String[]) null)); [EOL]     assertFalse(StringUtils.startsWithAny(null, "abc")); [EOL]     assertFalse(StringUtils.startsWithAny("abcxyz", (String[]) null)); [EOL]     assertFalse(StringUtils.startsWithAny("abcxyz")); [EOL]     assertTrue(StringUtils.startsWithAny("abcxyz", "abc")); [EOL]     assertTrue(StringUtils.startsWithAny("abcxyz", null, "xyz", "abc")); [EOL]     assertFalse(StringUtils.startsWithAny("abcxyz", null, "xyz", "abcd")); [EOL]     assertTrue("StringUtils.startsWithAny(abcxyz, StringBuilder(xyz), StringBuffer(abc))", StringUtils.startsWithAny("abcxyz", new StringBuilder("xyz"), new StringBuffer("abc"))); [EOL]     assertTrue("StringUtils.startsWithAny( StrBuilder(abcxyz), StringBuilder(xyz), StringBuffer(abc))", StringUtils.startsWithAny(new StrBuilder("abcxyz"), new StringBuilder("xyz"), new StringBuffer("abc"))); [EOL] }
@Test [EOL] public void testStartsWithAny() { [EOL]     assertFalse(StringUtils.startsWithAny(null, (String[]) null)); [EOL]     assertFalse(StringUtils.startsWithAny(null, "abc")); [EOL]     assertFalse(StringUtils.startsWithAny("abcxyz", (String[]) null)); [EOL]     assertFalse(StringUtils.startsWithAny("abcxyz")); [EOL]     assertTrue(StringUtils.startsWithAny("abcxyz", "abc")); [EOL]     assertTrue(StringUtils.startsWithAny("abcxyz", null, "xyz", "abc")); [EOL]     assertFalse(StringUtils.startsWithAny("abcxyz", null, "xyz", "abcd")); [EOL]     assertTrue("StringUtils.startsWithAny(abcxyz, StringBuilder(xyz), StringBuffer(abc))", StringUtils.startsWithAny("abcxyz", new StringBuilder("xyz"), new StringBuffer("abc"))); [EOL]     assertTrue("StringUtils.startsWithAny( StrBuilder(abcxyz), StringBuilder(xyz), StringBuffer(abc))", StringUtils.startsWithAny(new StrBuilder("abcxyz"), new StringBuilder("xyz"), new StringBuffer("abc"))); [EOL] }
@Test [EOL] public void testStartsWithAny() { [EOL]     assertFalse(StringUtils.startsWithAny(null, (String[]) null)); [EOL]     assertFalse(StringUtils.startsWithAny(null, "abc")); [EOL]     assertFalse(StringUtils.startsWithAny("abcxyz", (String[]) null)); [EOL]     assertFalse(StringUtils.startsWithAny("abcxyz")); [EOL]     assertTrue(StringUtils.startsWithAny("abcxyz", "abc")); [EOL]     assertTrue(StringUtils.startsWithAny("abcxyz", null, "xyz", "abc")); [EOL]     assertFalse(StringUtils.startsWithAny("abcxyz", null, "xyz", "abcd")); [EOL]     assertTrue("StringUtils.startsWithAny(abcxyz, StringBuilder(xyz), StringBuffer(abc))", StringUtils.startsWithAny("abcxyz", new StringBuilder("xyz"), new StringBuffer("abc"))); [EOL]     assertTrue("StringUtils.startsWithAny( StrBuilder(abcxyz), StringBuilder(xyz), StringBuffer(abc))", StringUtils.startsWithAny(new StrBuilder("abcxyz"), new StringBuilder("xyz"), new StringBuffer("abc"))); [EOL] }
@Test [EOL] public void testStartsWithAny() { [EOL]     assertFalse(StringUtils.startsWithAny(null, (String[]) null)); [EOL]     assertFalse(StringUtils.startsWithAny(null, "abc")); [EOL]     assertFalse(StringUtils.startsWithAny("abcxyz", (String[]) null)); [EOL]     assertFalse(StringUtils.startsWithAny("abcxyz")); [EOL]     assertTrue(StringUtils.startsWithAny("abcxyz", "abc")); [EOL]     assertTrue(StringUtils.startsWithAny("abcxyz", null, "xyz", "abc")); [EOL]     assertFalse(StringUtils.startsWithAny("abcxyz", null, "xyz", "abcd")); [EOL]     assertTrue("StringUtils.startsWithAny(abcxyz, StringBuilder(xyz), StringBuffer(abc))", StringUtils.startsWithAny("abcxyz", new StringBuilder("xyz"), new StringBuffer("abc"))); [EOL]     assertTrue("StringUtils.startsWithAny( StrBuilder(abcxyz), StringBuilder(xyz), StringBuffer(abc))", StringUtils.startsWithAny(new StrBuilder("abcxyz"), new StringBuilder("xyz"), new StringBuffer("abc"))); [EOL] }
@Test [EOL] public void testStartsWithAny() { [EOL]     assertFalse(StringUtils.startsWithAny(null, (String[]) null)); [EOL]     assertFalse(StringUtils.startsWithAny(null, "abc")); [EOL]     assertFalse(StringUtils.startsWithAny("abcxyz", (String[]) null)); [EOL]     assertFalse(StringUtils.startsWithAny("abcxyz")); [EOL]     assertTrue(StringUtils.startsWithAny("abcxyz", "abc")); [EOL]     assertTrue(StringUtils.startsWithAny("abcxyz", null, "xyz", "abc")); [EOL]     assertFalse(StringUtils.startsWithAny("abcxyz", null, "xyz", "abcd")); [EOL]     assertTrue("StringUtils.startsWithAny(abcxyz, StringBuilder(xyz), StringBuffer(abc))", StringUtils.startsWithAny("abcxyz", new StringBuilder("xyz"), new StringBuffer("abc"))); [EOL]     assertTrue("StringUtils.startsWithAny( StrBuilder(abcxyz), StringBuilder(xyz), StringBuffer(abc))", StringUtils.startsWithAny(new StrBuilder("abcxyz"), new StringBuilder("xyz"), new StringBuffer("abc"))); [EOL] }
@Test [EOL] public void testStartsWithAny() { [EOL]     assertFalse(StringUtils.startsWithAny(null, (String[]) null)); [EOL]     assertFalse(StringUtils.startsWithAny(null, "abc")); [EOL]     assertFalse(StringUtils.startsWithAny("abcxyz", (String[]) null)); [EOL]     assertFalse(StringUtils.startsWithAny("abcxyz")); [EOL]     assertTrue(StringUtils.startsWithAny("abcxyz", "abc")); [EOL]     assertTrue(StringUtils.startsWithAny("abcxyz", null, "xyz", "abc")); [EOL]     assertFalse(StringUtils.startsWithAny("abcxyz", null, "xyz", "abcd")); [EOL]     assertTrue("StringUtils.startsWithAny(abcxyz, StringBuilder(xyz), StringBuffer(abc))", StringUtils.startsWithAny("abcxyz", new StringBuilder("xyz"), new StringBuffer("abc"))); [EOL]     assertTrue("StringUtils.startsWithAny( StrBuilder(abcxyz), StringBuilder(xyz), StringBuffer(abc))", StringUtils.startsWithAny(new StrBuilder("abcxyz"), new StringBuilder("xyz"), new StringBuffer("abc"))); [EOL] }
@Test [EOL] public void testStartsWithAny() { [EOL]     assertFalse(StringUtils.startsWithAny(null, (String[]) null)); [EOL]     assertFalse(StringUtils.startsWithAny(null, "abc")); [EOL]     assertFalse(StringUtils.startsWithAny("abcxyz", (String[]) null)); [EOL]     assertFalse(StringUtils.startsWithAny("abcxyz")); [EOL]     assertTrue(StringUtils.startsWithAny("abcxyz", "abc")); [EOL]     assertTrue(StringUtils.startsWithAny("abcxyz", null, "xyz", "abc")); [EOL]     assertFalse(StringUtils.startsWithAny("abcxyz", null, "xyz", "abcd")); [EOL]     assertTrue("StringUtils.startsWithAny(abcxyz, StringBuilder(xyz), StringBuffer(abc))", StringUtils.startsWithAny("abcxyz", new StringBuilder("xyz"), new StringBuffer("abc"))); [EOL]     assertTrue("StringUtils.startsWithAny( StrBuilder(abcxyz), StringBuilder(xyz), StringBuffer(abc))", StringUtils.startsWithAny(new StrBuilder("abcxyz"), new StringBuilder("xyz"), new StringBuffer("abc"))); [EOL] }
@Test [EOL] public void testStartsWithAny() { [EOL]     assertFalse(StringUtils.startsWithAny(null, (String[]) null)); [EOL]     assertFalse(StringUtils.startsWithAny(null, "abc")); [EOL]     assertFalse(StringUtils.startsWithAny("abcxyz", (String[]) null)); [EOL]     assertFalse(StringUtils.startsWithAny("abcxyz")); [EOL]     assertTrue(StringUtils.startsWithAny("abcxyz", "abc")); [EOL]     assertTrue(StringUtils.startsWithAny("abcxyz", null, "xyz", "abc")); [EOL]     assertFalse(StringUtils.startsWithAny("abcxyz", null, "xyz", "abcd")); [EOL]     assertTrue("StringUtils.startsWithAny(abcxyz, StringBuilder(xyz), StringBuffer(abc))", StringUtils.startsWithAny("abcxyz", new StringBuilder("xyz"), new StringBuffer("abc"))); [EOL]     assertTrue("StringUtils.startsWithAny( StrBuilder(abcxyz), StringBuilder(xyz), StringBuffer(abc))", StringUtils.startsWithAny(new StrBuilder("abcxyz"), new StringBuilder("xyz"), new StringBuffer("abc"))); [EOL] }
@Test [EOL] public void testStartsWithAny() { [EOL]     assertFalse(StringUtils.startsWithAny(null, (String[]) null)); [EOL]     assertFalse(StringUtils.startsWithAny(null, "abc")); [EOL]     assertFalse(StringUtils.startsWithAny("abcxyz", (String[]) null)); [EOL]     assertFalse(StringUtils.startsWithAny("abcxyz")); [EOL]     assertTrue(StringUtils.startsWithAny("abcxyz", "abc")); [EOL]     assertTrue(StringUtils.startsWithAny("abcxyz", null, "xyz", "abc")); [EOL]     assertFalse(StringUtils.startsWithAny("abcxyz", null, "xyz", "abcd")); [EOL]     assertTrue("StringUtils.startsWithAny(abcxyz, StringBuilder(xyz), StringBuffer(abc))", StringUtils.startsWithAny("abcxyz", new StringBuilder("xyz"), new StringBuffer("abc"))); [EOL]     assertTrue("StringUtils.startsWithAny( StrBuilder(abcxyz), StringBuilder(xyz), StringBuffer(abc))", StringUtils.startsWithAny(new StrBuilder("abcxyz"), new StringBuilder("xyz"), new StringBuffer("abc"))); [EOL] }
@Test [EOL] public void testStartsWithAny() { [EOL]     assertFalse(StringUtils.startsWithAny(null, (String[]) null)); [EOL]     assertFalse(StringUtils.startsWithAny(null, "abc")); [EOL]     assertFalse(StringUtils.startsWithAny("abcxyz", (String[]) null)); [EOL]     assertFalse(StringUtils.startsWithAny("abcxyz")); [EOL]     assertTrue(StringUtils.startsWithAny("abcxyz", "abc")); [EOL]     assertTrue(StringUtils.startsWithAny("abcxyz", null, "xyz", "abc")); [EOL]     assertFalse(StringUtils.startsWithAny("abcxyz", null, "xyz", "abcd")); [EOL]     assertTrue("StringUtils.startsWithAny(abcxyz, StringBuilder(xyz), StringBuffer(abc))", StringUtils.startsWithAny("abcxyz", new StringBuilder("xyz"), new StringBuffer("abc"))); [EOL]     assertTrue("StringUtils.startsWithAny( StrBuilder(abcxyz), StringBuilder(xyz), StringBuffer(abc))", StringUtils.startsWithAny(new StrBuilder("abcxyz"), new StringBuilder("xyz"), new StringBuffer("abc"))); [EOL] }
@Test [EOL] public void testEndsWithAny() { [EOL]     assertFalse("StringUtils.endsWithAny(null, null)", StringUtils.endsWithAny(null, (String) null)); [EOL]     assertFalse("StringUtils.endsWithAny(null, new String[] {abc})", StringUtils.endsWithAny(null, new String[] { "abc" })); [EOL]     assertFalse("StringUtils.endsWithAny(abcxyz, null)", StringUtils.endsWithAny("abcxyz", (String) null)); [EOL]     assertTrue("StringUtils.endsWithAny(abcxyz, new String[] {\"\"})", StringUtils.endsWithAny("abcxyz", new String[] { "" })); [EOL]     assertTrue("StringUtils.endsWithAny(abcxyz, new String[] {xyz})", StringUtils.endsWithAny("abcxyz", new String[] { "xyz" })); [EOL]     assertTrue("StringUtils.endsWithAny(abcxyz, new String[] {null, xyz, abc})", StringUtils.endsWithAny("abcxyz", new String[] { null, "xyz", "abc" })); [EOL]     assertFalse("StringUtils.endsWithAny(defg, new String[] {null, xyz, abc})", StringUtils.endsWithAny("defg", new String[] { null, "xyz", "abc" })); [EOL]     assertTrue("StringUtils.endsWithAny(abcxyz, StringBuilder(abc), StringBuffer(xyz))", StringUtils.endsWithAny("abcxyz", new StringBuilder("abc"), new StringBuffer("xyz"))); [EOL]     assertTrue("StringUtils.endsWithAny( StrBuilder(abcxyz), StringBuilder(abc), StringBuffer(xyz))", StringUtils.endsWithAny(new StrBuilder("abcxyz"), new StringBuilder("abc"), new StringBuffer("xyz"))); [EOL] }
@Test [EOL] public void testEndsWithAny() { [EOL]     assertFalse("StringUtils.endsWithAny(null, null)", StringUtils.endsWithAny(null, (String) null)); [EOL]     assertFalse("StringUtils.endsWithAny(null, new String[] {abc})", StringUtils.endsWithAny(null, new String[] { "abc" })); [EOL]     assertFalse("StringUtils.endsWithAny(abcxyz, null)", StringUtils.endsWithAny("abcxyz", (String) null)); [EOL]     assertTrue("StringUtils.endsWithAny(abcxyz, new String[] {\"\"})", StringUtils.endsWithAny("abcxyz", new String[] { "" })); [EOL]     assertTrue("StringUtils.endsWithAny(abcxyz, new String[] {xyz})", StringUtils.endsWithAny("abcxyz", new String[] { "xyz" })); [EOL]     assertTrue("StringUtils.endsWithAny(abcxyz, new String[] {null, xyz, abc})", StringUtils.endsWithAny("abcxyz", new String[] { null, "xyz", "abc" })); [EOL]     assertFalse("StringUtils.endsWithAny(defg, new String[] {null, xyz, abc})", StringUtils.endsWithAny("defg", new String[] { null, "xyz", "abc" })); [EOL]     assertTrue("StringUtils.endsWithAny(abcxyz, StringBuilder(abc), StringBuffer(xyz))", StringUtils.endsWithAny("abcxyz", new StringBuilder("abc"), new StringBuffer("xyz"))); [EOL]     assertTrue("StringUtils.endsWithAny( StrBuilder(abcxyz), StringBuilder(abc), StringBuffer(xyz))", StringUtils.endsWithAny(new StrBuilder("abcxyz"), new StringBuilder("abc"), new StringBuffer("xyz"))); [EOL] }
@Test [EOL] public void testEndsWithAny() { [EOL]     assertFalse("StringUtils.endsWithAny(null, null)", StringUtils.endsWithAny(null, (String) null)); [EOL]     assertFalse("StringUtils.endsWithAny(null, new String[] {abc})", StringUtils.endsWithAny(null, new String[] { "abc" })); [EOL]     assertFalse("StringUtils.endsWithAny(abcxyz, null)", StringUtils.endsWithAny("abcxyz", (String) null)); [EOL]     assertTrue("StringUtils.endsWithAny(abcxyz, new String[] {\"\"})", StringUtils.endsWithAny("abcxyz", new String[] { "" })); [EOL]     assertTrue("StringUtils.endsWithAny(abcxyz, new String[] {xyz})", StringUtils.endsWithAny("abcxyz", new String[] { "xyz" })); [EOL]     assertTrue("StringUtils.endsWithAny(abcxyz, new String[] {null, xyz, abc})", StringUtils.endsWithAny("abcxyz", new String[] { null, "xyz", "abc" })); [EOL]     assertFalse("StringUtils.endsWithAny(defg, new String[] {null, xyz, abc})", StringUtils.endsWithAny("defg", new String[] { null, "xyz", "abc" })); [EOL]     assertTrue("StringUtils.endsWithAny(abcxyz, StringBuilder(abc), StringBuffer(xyz))", StringUtils.endsWithAny("abcxyz", new StringBuilder("abc"), new StringBuffer("xyz"))); [EOL]     assertTrue("StringUtils.endsWithAny( StrBuilder(abcxyz), StringBuilder(abc), StringBuffer(xyz))", StringUtils.endsWithAny(new StrBuilder("abcxyz"), new StringBuilder("abc"), new StringBuffer("xyz"))); [EOL] }
@Test [EOL] public void testEndsWithAny() { [EOL]     assertFalse("StringUtils.endsWithAny(null, null)", StringUtils.endsWithAny(null, (String) null)); [EOL]     assertFalse("StringUtils.endsWithAny(null, new String[] {abc})", StringUtils.endsWithAny(null, new String[] { "abc" })); [EOL]     assertFalse("StringUtils.endsWithAny(abcxyz, null)", StringUtils.endsWithAny("abcxyz", (String) null)); [EOL]     assertTrue("StringUtils.endsWithAny(abcxyz, new String[] {\"\"})", StringUtils.endsWithAny("abcxyz", new String[] { "" })); [EOL]     assertTrue("StringUtils.endsWithAny(abcxyz, new String[] {xyz})", StringUtils.endsWithAny("abcxyz", new String[] { "xyz" })); [EOL]     assertTrue("StringUtils.endsWithAny(abcxyz, new String[] {null, xyz, abc})", StringUtils.endsWithAny("abcxyz", new String[] { null, "xyz", "abc" })); [EOL]     assertFalse("StringUtils.endsWithAny(defg, new String[] {null, xyz, abc})", StringUtils.endsWithAny("defg", new String[] { null, "xyz", "abc" })); [EOL]     assertTrue("StringUtils.endsWithAny(abcxyz, StringBuilder(abc), StringBuffer(xyz))", StringUtils.endsWithAny("abcxyz", new StringBuilder("abc"), new StringBuffer("xyz"))); [EOL]     assertTrue("StringUtils.endsWithAny( StrBuilder(abcxyz), StringBuilder(abc), StringBuffer(xyz))", StringUtils.endsWithAny(new StrBuilder("abcxyz"), new StringBuilder("abc"), new StringBuffer("xyz"))); [EOL] }
@Test [EOL] public void testEndsWithAny() { [EOL]     assertFalse("StringUtils.endsWithAny(null, null)", StringUtils.endsWithAny(null, (String) null)); [EOL]     assertFalse("StringUtils.endsWithAny(null, new String[] {abc})", StringUtils.endsWithAny(null, new String[] { "abc" })); [EOL]     assertFalse("StringUtils.endsWithAny(abcxyz, null)", StringUtils.endsWithAny("abcxyz", (String) null)); [EOL]     assertTrue("StringUtils.endsWithAny(abcxyz, new String[] {\"\"})", StringUtils.endsWithAny("abcxyz", new String[] { "" })); [EOL]     assertTrue("StringUtils.endsWithAny(abcxyz, new String[] {xyz})", StringUtils.endsWithAny("abcxyz", new String[] { "xyz" })); [EOL]     assertTrue("StringUtils.endsWithAny(abcxyz, new String[] {null, xyz, abc})", StringUtils.endsWithAny("abcxyz", new String[] { null, "xyz", "abc" })); [EOL]     assertFalse("StringUtils.endsWithAny(defg, new String[] {null, xyz, abc})", StringUtils.endsWithAny("defg", new String[] { null, "xyz", "abc" })); [EOL]     assertTrue("StringUtils.endsWithAny(abcxyz, StringBuilder(abc), StringBuffer(xyz))", StringUtils.endsWithAny("abcxyz", new StringBuilder("abc"), new StringBuffer("xyz"))); [EOL]     assertTrue("StringUtils.endsWithAny( StrBuilder(abcxyz), StringBuilder(abc), StringBuffer(xyz))", StringUtils.endsWithAny(new StrBuilder("abcxyz"), new StringBuilder("abc"), new StringBuffer("xyz"))); [EOL] }
@Test [EOL] public void testEndsWithAny() { [EOL]     assertFalse("StringUtils.endsWithAny(null, null)", StringUtils.endsWithAny(null, (String) null)); [EOL]     assertFalse("StringUtils.endsWithAny(null, new String[] {abc})", StringUtils.endsWithAny(null, new String[] { "abc" })); [EOL]     assertFalse("StringUtils.endsWithAny(abcxyz, null)", StringUtils.endsWithAny("abcxyz", (String) null)); [EOL]     assertTrue("StringUtils.endsWithAny(abcxyz, new String[] {\"\"})", StringUtils.endsWithAny("abcxyz", new String[] { "" })); [EOL]     assertTrue("StringUtils.endsWithAny(abcxyz, new String[] {xyz})", StringUtils.endsWithAny("abcxyz", new String[] { "xyz" })); [EOL]     assertTrue("StringUtils.endsWithAny(abcxyz, new String[] {null, xyz, abc})", StringUtils.endsWithAny("abcxyz", new String[] { null, "xyz", "abc" })); [EOL]     assertFalse("StringUtils.endsWithAny(defg, new String[] {null, xyz, abc})", StringUtils.endsWithAny("defg", new String[] { null, "xyz", "abc" })); [EOL]     assertTrue("StringUtils.endsWithAny(abcxyz, StringBuilder(abc), StringBuffer(xyz))", StringUtils.endsWithAny("abcxyz", new StringBuilder("abc"), new StringBuffer("xyz"))); [EOL]     assertTrue("StringUtils.endsWithAny( StrBuilder(abcxyz), StringBuilder(abc), StringBuffer(xyz))", StringUtils.endsWithAny(new StrBuilder("abcxyz"), new StringBuilder("abc"), new StringBuffer("xyz"))); [EOL] }
@Test [EOL] public void testEndsWithAny() { [EOL]     assertFalse("StringUtils.endsWithAny(null, null)", StringUtils.endsWithAny(null, (String) null)); [EOL]     assertFalse("StringUtils.endsWithAny(null, new String[] {abc})", StringUtils.endsWithAny(null, new String[] { "abc" })); [EOL]     assertFalse("StringUtils.endsWithAny(abcxyz, null)", StringUtils.endsWithAny("abcxyz", (String) null)); [EOL]     assertTrue("StringUtils.endsWithAny(abcxyz, new String[] {\"\"})", StringUtils.endsWithAny("abcxyz", new String[] { "" })); [EOL]     assertTrue("StringUtils.endsWithAny(abcxyz, new String[] {xyz})", StringUtils.endsWithAny("abcxyz", new String[] { "xyz" })); [EOL]     assertTrue("StringUtils.endsWithAny(abcxyz, new String[] {null, xyz, abc})", StringUtils.endsWithAny("abcxyz", new String[] { null, "xyz", "abc" })); [EOL]     assertFalse("StringUtils.endsWithAny(defg, new String[] {null, xyz, abc})", StringUtils.endsWithAny("defg", new String[] { null, "xyz", "abc" })); [EOL]     assertTrue("StringUtils.endsWithAny(abcxyz, StringBuilder(abc), StringBuffer(xyz))", StringUtils.endsWithAny("abcxyz", new StringBuilder("abc"), new StringBuffer("xyz"))); [EOL]     assertTrue("StringUtils.endsWithAny( StrBuilder(abcxyz), StringBuilder(abc), StringBuffer(xyz))", StringUtils.endsWithAny(new StrBuilder("abcxyz"), new StringBuilder("abc"), new StringBuffer("xyz"))); [EOL] }
@Test [EOL] public void testEndsWithAny() { [EOL]     assertFalse("StringUtils.endsWithAny(null, null)", StringUtils.endsWithAny(null, (String) null)); [EOL]     assertFalse("StringUtils.endsWithAny(null, new String[] {abc})", StringUtils.endsWithAny(null, new String[] { "abc" })); [EOL]     assertFalse("StringUtils.endsWithAny(abcxyz, null)", StringUtils.endsWithAny("abcxyz", (String) null)); [EOL]     assertTrue("StringUtils.endsWithAny(abcxyz, new String[] {\"\"})", StringUtils.endsWithAny("abcxyz", new String[] { "" })); [EOL]     assertTrue("StringUtils.endsWithAny(abcxyz, new String[] {xyz})", StringUtils.endsWithAny("abcxyz", new String[] { "xyz" })); [EOL]     assertTrue("StringUtils.endsWithAny(abcxyz, new String[] {null, xyz, abc})", StringUtils.endsWithAny("abcxyz", new String[] { null, "xyz", "abc" })); [EOL]     assertFalse("StringUtils.endsWithAny(defg, new String[] {null, xyz, abc})", StringUtils.endsWithAny("defg", new String[] { null, "xyz", "abc" })); [EOL]     assertTrue("StringUtils.endsWithAny(abcxyz, StringBuilder(abc), StringBuffer(xyz))", StringUtils.endsWithAny("abcxyz", new StringBuilder("abc"), new StringBuffer("xyz"))); [EOL]     assertTrue("StringUtils.endsWithAny( StrBuilder(abcxyz), StringBuilder(abc), StringBuffer(xyz))", StringUtils.endsWithAny(new StrBuilder("abcxyz"), new StringBuilder("abc"), new StringBuffer("xyz"))); [EOL] }
@Test [EOL] public void testPrependIfMissingIgnoreCase() { [EOL]     assertEquals("prependIfMissingIgnoreCase(null,null)", null, StringUtils.prependIfMissingIgnoreCase(null, null)); [EOL]     assertEquals("prependIfMissingIgnoreCase(abc,null)", "abc", StringUtils.prependIfMissingIgnoreCase("abc", null)); [EOL]     assertEquals("prependIfMissingIgnoreCase(\"\",xyz)", "xyz", StringUtils.prependIfMissingIgnoreCase("", "xyz")); [EOL]     assertEquals("prependIfMissingIgnoreCase(abc,xyz)", "xyzabc", StringUtils.prependIfMissingIgnoreCase("abc", "xyz")); [EOL]     assertEquals("prependIfMissingIgnoreCase(xyzabc,xyz)", "xyzabc", StringUtils.prependIfMissingIgnoreCase("xyzabc", "xyz")); [EOL]     assertEquals("prependIfMissingIgnoreCase(XYZabc,xyz)", "XYZabc", StringUtils.prependIfMissingIgnoreCase("XYZabc", "xyz")); [EOL]     assertEquals("prependIfMissingIgnoreCase(null,null null)", null, StringUtils.prependIfMissingIgnoreCase(null, null, (CharSequence[]) null)); [EOL]     assertEquals("prependIfMissingIgnoreCase(abc,null,null)", "abc", StringUtils.prependIfMissingIgnoreCase("abc", null, (CharSequence[]) null)); [EOL]     assertEquals("prependIfMissingIgnoreCase(\"\",xyz,null)", "xyz", StringUtils.prependIfMissingIgnoreCase("", "xyz", (CharSequence[]) null)); [EOL]     assertEquals("prependIfMissingIgnoreCase(abc,xyz,{null})", "xyzabc", StringUtils.prependIfMissingIgnoreCase("abc", "xyz", new CharSequence[] { null })); [EOL]     assertEquals("prependIfMissingIgnoreCase(abc,xyz,\"\")", "abc", StringUtils.prependIfMissingIgnoreCase("abc", "xyz", "")); [EOL]     assertEquals("prependIfMissingIgnoreCase(abc,xyz,mno)", "xyzabc", StringUtils.prependIfMissingIgnoreCase("abc", "xyz", "mno")); [EOL]     assertEquals("prependIfMissingIgnoreCase(xyzabc,xyz,mno)", "xyzabc", StringUtils.prependIfMissingIgnoreCase("xyzabc", "xyz", "mno")); [EOL]     assertEquals("prependIfMissingIgnoreCase(mnoabc,xyz,mno)", "mnoabc", StringUtils.prependIfMissingIgnoreCase("mnoabc", "xyz", "mno")); [EOL]     assertEquals("prependIfMissingIgnoreCase(XYZabc,xyz,mno)", "XYZabc", StringUtils.prependIfMissingIgnoreCase("XYZabc", "xyz", "mno")); [EOL]     assertEquals("prependIfMissingIgnoreCase(MNOabc,xyz,mno)", "MNOabc", StringUtils.prependIfMissingIgnoreCase("MNOabc", "xyz", "mno")); [EOL] }
@Test [EOL] public void testPrependIfMissingIgnoreCase() { [EOL]     assertEquals("prependIfMissingIgnoreCase(null,null)", null, StringUtils.prependIfMissingIgnoreCase(null, null)); [EOL]     assertEquals("prependIfMissingIgnoreCase(abc,null)", "abc", StringUtils.prependIfMissingIgnoreCase("abc", null)); [EOL]     assertEquals("prependIfMissingIgnoreCase(\"\",xyz)", "xyz", StringUtils.prependIfMissingIgnoreCase("", "xyz")); [EOL]     assertEquals("prependIfMissingIgnoreCase(abc,xyz)", "xyzabc", StringUtils.prependIfMissingIgnoreCase("abc", "xyz")); [EOL]     assertEquals("prependIfMissingIgnoreCase(xyzabc,xyz)", "xyzabc", StringUtils.prependIfMissingIgnoreCase("xyzabc", "xyz")); [EOL]     assertEquals("prependIfMissingIgnoreCase(XYZabc,xyz)", "XYZabc", StringUtils.prependIfMissingIgnoreCase("XYZabc", "xyz")); [EOL]     assertEquals("prependIfMissingIgnoreCase(null,null null)", null, StringUtils.prependIfMissingIgnoreCase(null, null, (CharSequence[]) null)); [EOL]     assertEquals("prependIfMissingIgnoreCase(abc,null,null)", "abc", StringUtils.prependIfMissingIgnoreCase("abc", null, (CharSequence[]) null)); [EOL]     assertEquals("prependIfMissingIgnoreCase(\"\",xyz,null)", "xyz", StringUtils.prependIfMissingIgnoreCase("", "xyz", (CharSequence[]) null)); [EOL]     assertEquals("prependIfMissingIgnoreCase(abc,xyz,{null})", "xyzabc", StringUtils.prependIfMissingIgnoreCase("abc", "xyz", new CharSequence[] { null })); [EOL]     assertEquals("prependIfMissingIgnoreCase(abc,xyz,\"\")", "abc", StringUtils.prependIfMissingIgnoreCase("abc", "xyz", "")); [EOL]     assertEquals("prependIfMissingIgnoreCase(abc,xyz,mno)", "xyzabc", StringUtils.prependIfMissingIgnoreCase("abc", "xyz", "mno")); [EOL]     assertEquals("prependIfMissingIgnoreCase(xyzabc,xyz,mno)", "xyzabc", StringUtils.prependIfMissingIgnoreCase("xyzabc", "xyz", "mno")); [EOL]     assertEquals("prependIfMissingIgnoreCase(mnoabc,xyz,mno)", "mnoabc", StringUtils.prependIfMissingIgnoreCase("mnoabc", "xyz", "mno")); [EOL]     assertEquals("prependIfMissingIgnoreCase(XYZabc,xyz,mno)", "XYZabc", StringUtils.prependIfMissingIgnoreCase("XYZabc", "xyz", "mno")); [EOL]     assertEquals("prependIfMissingIgnoreCase(MNOabc,xyz,mno)", "MNOabc", StringUtils.prependIfMissingIgnoreCase("MNOabc", "xyz", "mno")); [EOL] }
@Test [EOL] public void testPrependIfMissingIgnoreCase() { [EOL]     assertEquals("prependIfMissingIgnoreCase(null,null)", null, StringUtils.prependIfMissingIgnoreCase(null, null)); [EOL]     assertEquals("prependIfMissingIgnoreCase(abc,null)", "abc", StringUtils.prependIfMissingIgnoreCase("abc", null)); [EOL]     assertEquals("prependIfMissingIgnoreCase(\"\",xyz)", "xyz", StringUtils.prependIfMissingIgnoreCase("", "xyz")); [EOL]     assertEquals("prependIfMissingIgnoreCase(abc,xyz)", "xyzabc", StringUtils.prependIfMissingIgnoreCase("abc", "xyz")); [EOL]     assertEquals("prependIfMissingIgnoreCase(xyzabc,xyz)", "xyzabc", StringUtils.prependIfMissingIgnoreCase("xyzabc", "xyz")); [EOL]     assertEquals("prependIfMissingIgnoreCase(XYZabc,xyz)", "XYZabc", StringUtils.prependIfMissingIgnoreCase("XYZabc", "xyz")); [EOL]     assertEquals("prependIfMissingIgnoreCase(null,null null)", null, StringUtils.prependIfMissingIgnoreCase(null, null, (CharSequence[]) null)); [EOL]     assertEquals("prependIfMissingIgnoreCase(abc,null,null)", "abc", StringUtils.prependIfMissingIgnoreCase("abc", null, (CharSequence[]) null)); [EOL]     assertEquals("prependIfMissingIgnoreCase(\"\",xyz,null)", "xyz", StringUtils.prependIfMissingIgnoreCase("", "xyz", (CharSequence[]) null)); [EOL]     assertEquals("prependIfMissingIgnoreCase(abc,xyz,{null})", "xyzabc", StringUtils.prependIfMissingIgnoreCase("abc", "xyz", new CharSequence[] { null })); [EOL]     assertEquals("prependIfMissingIgnoreCase(abc,xyz,\"\")", "abc", StringUtils.prependIfMissingIgnoreCase("abc", "xyz", "")); [EOL]     assertEquals("prependIfMissingIgnoreCase(abc,xyz,mno)", "xyzabc", StringUtils.prependIfMissingIgnoreCase("abc", "xyz", "mno")); [EOL]     assertEquals("prependIfMissingIgnoreCase(xyzabc,xyz,mno)", "xyzabc", StringUtils.prependIfMissingIgnoreCase("xyzabc", "xyz", "mno")); [EOL]     assertEquals("prependIfMissingIgnoreCase(mnoabc,xyz,mno)", "mnoabc", StringUtils.prependIfMissingIgnoreCase("mnoabc", "xyz", "mno")); [EOL]     assertEquals("prependIfMissingIgnoreCase(XYZabc,xyz,mno)", "XYZabc", StringUtils.prependIfMissingIgnoreCase("XYZabc", "xyz", "mno")); [EOL]     assertEquals("prependIfMissingIgnoreCase(MNOabc,xyz,mno)", "MNOabc", StringUtils.prependIfMissingIgnoreCase("MNOabc", "xyz", "mno")); [EOL] }
@Test [EOL] public void testPrependIfMissingIgnoreCase() { [EOL]     assertEquals("prependIfMissingIgnoreCase(null,null)", null, StringUtils.prependIfMissingIgnoreCase(null, null)); [EOL]     assertEquals("prependIfMissingIgnoreCase(abc,null)", "abc", StringUtils.prependIfMissingIgnoreCase("abc", null)); [EOL]     assertEquals("prependIfMissingIgnoreCase(\"\",xyz)", "xyz", StringUtils.prependIfMissingIgnoreCase("", "xyz")); [EOL]     assertEquals("prependIfMissingIgnoreCase(abc,xyz)", "xyzabc", StringUtils.prependIfMissingIgnoreCase("abc", "xyz")); [EOL]     assertEquals("prependIfMissingIgnoreCase(xyzabc,xyz)", "xyzabc", StringUtils.prependIfMissingIgnoreCase("xyzabc", "xyz")); [EOL]     assertEquals("prependIfMissingIgnoreCase(XYZabc,xyz)", "XYZabc", StringUtils.prependIfMissingIgnoreCase("XYZabc", "xyz")); [EOL]     assertEquals("prependIfMissingIgnoreCase(null,null null)", null, StringUtils.prependIfMissingIgnoreCase(null, null, (CharSequence[]) null)); [EOL]     assertEquals("prependIfMissingIgnoreCase(abc,null,null)", "abc", StringUtils.prependIfMissingIgnoreCase("abc", null, (CharSequence[]) null)); [EOL]     assertEquals("prependIfMissingIgnoreCase(\"\",xyz,null)", "xyz", StringUtils.prependIfMissingIgnoreCase("", "xyz", (CharSequence[]) null)); [EOL]     assertEquals("prependIfMissingIgnoreCase(abc,xyz,{null})", "xyzabc", StringUtils.prependIfMissingIgnoreCase("abc", "xyz", new CharSequence[] { null })); [EOL]     assertEquals("prependIfMissingIgnoreCase(abc,xyz,\"\")", "abc", StringUtils.prependIfMissingIgnoreCase("abc", "xyz", "")); [EOL]     assertEquals("prependIfMissingIgnoreCase(abc,xyz,mno)", "xyzabc", StringUtils.prependIfMissingIgnoreCase("abc", "xyz", "mno")); [EOL]     assertEquals("prependIfMissingIgnoreCase(xyzabc,xyz,mno)", "xyzabc", StringUtils.prependIfMissingIgnoreCase("xyzabc", "xyz", "mno")); [EOL]     assertEquals("prependIfMissingIgnoreCase(mnoabc,xyz,mno)", "mnoabc", StringUtils.prependIfMissingIgnoreCase("mnoabc", "xyz", "mno")); [EOL]     assertEquals("prependIfMissingIgnoreCase(XYZabc,xyz,mno)", "XYZabc", StringUtils.prependIfMissingIgnoreCase("XYZabc", "xyz", "mno")); [EOL]     assertEquals("prependIfMissingIgnoreCase(MNOabc,xyz,mno)", "MNOabc", StringUtils.prependIfMissingIgnoreCase("MNOabc", "xyz", "mno")); [EOL] }
@Test [EOL] public void testPrependIfMissingIgnoreCase() { [EOL]     assertEquals("prependIfMissingIgnoreCase(null,null)", null, StringUtils.prependIfMissingIgnoreCase(null, null)); [EOL]     assertEquals("prependIfMissingIgnoreCase(abc,null)", "abc", StringUtils.prependIfMissingIgnoreCase("abc", null)); [EOL]     assertEquals("prependIfMissingIgnoreCase(\"\",xyz)", "xyz", StringUtils.prependIfMissingIgnoreCase("", "xyz")); [EOL]     assertEquals("prependIfMissingIgnoreCase(abc,xyz)", "xyzabc", StringUtils.prependIfMissingIgnoreCase("abc", "xyz")); [EOL]     assertEquals("prependIfMissingIgnoreCase(xyzabc,xyz)", "xyzabc", StringUtils.prependIfMissingIgnoreCase("xyzabc", "xyz")); [EOL]     assertEquals("prependIfMissingIgnoreCase(XYZabc,xyz)", "XYZabc", StringUtils.prependIfMissingIgnoreCase("XYZabc", "xyz")); [EOL]     assertEquals("prependIfMissingIgnoreCase(null,null null)", null, StringUtils.prependIfMissingIgnoreCase(null, null, (CharSequence[]) null)); [EOL]     assertEquals("prependIfMissingIgnoreCase(abc,null,null)", "abc", StringUtils.prependIfMissingIgnoreCase("abc", null, (CharSequence[]) null)); [EOL]     assertEquals("prependIfMissingIgnoreCase(\"\",xyz,null)", "xyz", StringUtils.prependIfMissingIgnoreCase("", "xyz", (CharSequence[]) null)); [EOL]     assertEquals("prependIfMissingIgnoreCase(abc,xyz,{null})", "xyzabc", StringUtils.prependIfMissingIgnoreCase("abc", "xyz", new CharSequence[] { null })); [EOL]     assertEquals("prependIfMissingIgnoreCase(abc,xyz,\"\")", "abc", StringUtils.prependIfMissingIgnoreCase("abc", "xyz", "")); [EOL]     assertEquals("prependIfMissingIgnoreCase(abc,xyz,mno)", "xyzabc", StringUtils.prependIfMissingIgnoreCase("abc", "xyz", "mno")); [EOL]     assertEquals("prependIfMissingIgnoreCase(xyzabc,xyz,mno)", "xyzabc", StringUtils.prependIfMissingIgnoreCase("xyzabc", "xyz", "mno")); [EOL]     assertEquals("prependIfMissingIgnoreCase(mnoabc,xyz,mno)", "mnoabc", StringUtils.prependIfMissingIgnoreCase("mnoabc", "xyz", "mno")); [EOL]     assertEquals("prependIfMissingIgnoreCase(XYZabc,xyz,mno)", "XYZabc", StringUtils.prependIfMissingIgnoreCase("XYZabc", "xyz", "mno")); [EOL]     assertEquals("prependIfMissingIgnoreCase(MNOabc,xyz,mno)", "MNOabc", StringUtils.prependIfMissingIgnoreCase("MNOabc", "xyz", "mno")); [EOL] }
@Test [EOL] public void testPrependIfMissingIgnoreCase() { [EOL]     assertEquals("prependIfMissingIgnoreCase(null,null)", null, StringUtils.prependIfMissingIgnoreCase(null, null)); [EOL]     assertEquals("prependIfMissingIgnoreCase(abc,null)", "abc", StringUtils.prependIfMissingIgnoreCase("abc", null)); [EOL]     assertEquals("prependIfMissingIgnoreCase(\"\",xyz)", "xyz", StringUtils.prependIfMissingIgnoreCase("", "xyz")); [EOL]     assertEquals("prependIfMissingIgnoreCase(abc,xyz)", "xyzabc", StringUtils.prependIfMissingIgnoreCase("abc", "xyz")); [EOL]     assertEquals("prependIfMissingIgnoreCase(xyzabc,xyz)", "xyzabc", StringUtils.prependIfMissingIgnoreCase("xyzabc", "xyz")); [EOL]     assertEquals("prependIfMissingIgnoreCase(XYZabc,xyz)", "XYZabc", StringUtils.prependIfMissingIgnoreCase("XYZabc", "xyz")); [EOL]     assertEquals("prependIfMissingIgnoreCase(null,null null)", null, StringUtils.prependIfMissingIgnoreCase(null, null, (CharSequence[]) null)); [EOL]     assertEquals("prependIfMissingIgnoreCase(abc,null,null)", "abc", StringUtils.prependIfMissingIgnoreCase("abc", null, (CharSequence[]) null)); [EOL]     assertEquals("prependIfMissingIgnoreCase(\"\",xyz,null)", "xyz", StringUtils.prependIfMissingIgnoreCase("", "xyz", (CharSequence[]) null)); [EOL]     assertEquals("prependIfMissingIgnoreCase(abc,xyz,{null})", "xyzabc", StringUtils.prependIfMissingIgnoreCase("abc", "xyz", new CharSequence[] { null })); [EOL]     assertEquals("prependIfMissingIgnoreCase(abc,xyz,\"\")", "abc", StringUtils.prependIfMissingIgnoreCase("abc", "xyz", "")); [EOL]     assertEquals("prependIfMissingIgnoreCase(abc,xyz,mno)", "xyzabc", StringUtils.prependIfMissingIgnoreCase("abc", "xyz", "mno")); [EOL]     assertEquals("prependIfMissingIgnoreCase(xyzabc,xyz,mno)", "xyzabc", StringUtils.prependIfMissingIgnoreCase("xyzabc", "xyz", "mno")); [EOL]     assertEquals("prependIfMissingIgnoreCase(mnoabc,xyz,mno)", "mnoabc", StringUtils.prependIfMissingIgnoreCase("mnoabc", "xyz", "mno")); [EOL]     assertEquals("prependIfMissingIgnoreCase(XYZabc,xyz,mno)", "XYZabc", StringUtils.prependIfMissingIgnoreCase("XYZabc", "xyz", "mno")); [EOL]     assertEquals("prependIfMissingIgnoreCase(MNOabc,xyz,mno)", "MNOabc", StringUtils.prependIfMissingIgnoreCase("MNOabc", "xyz", "mno")); [EOL] }
@Test [EOL] public void testPrependIfMissingIgnoreCase() { [EOL]     assertEquals("prependIfMissingIgnoreCase(null,null)", null, StringUtils.prependIfMissingIgnoreCase(null, null)); [EOL]     assertEquals("prependIfMissingIgnoreCase(abc,null)", "abc", StringUtils.prependIfMissingIgnoreCase("abc", null)); [EOL]     assertEquals("prependIfMissingIgnoreCase(\"\",xyz)", "xyz", StringUtils.prependIfMissingIgnoreCase("", "xyz")); [EOL]     assertEquals("prependIfMissingIgnoreCase(abc,xyz)", "xyzabc", StringUtils.prependIfMissingIgnoreCase("abc", "xyz")); [EOL]     assertEquals("prependIfMissingIgnoreCase(xyzabc,xyz)", "xyzabc", StringUtils.prependIfMissingIgnoreCase("xyzabc", "xyz")); [EOL]     assertEquals("prependIfMissingIgnoreCase(XYZabc,xyz)", "XYZabc", StringUtils.prependIfMissingIgnoreCase("XYZabc", "xyz")); [EOL]     assertEquals("prependIfMissingIgnoreCase(null,null null)", null, StringUtils.prependIfMissingIgnoreCase(null, null, (CharSequence[]) null)); [EOL]     assertEquals("prependIfMissingIgnoreCase(abc,null,null)", "abc", StringUtils.prependIfMissingIgnoreCase("abc", null, (CharSequence[]) null)); [EOL]     assertEquals("prependIfMissingIgnoreCase(\"\",xyz,null)", "xyz", StringUtils.prependIfMissingIgnoreCase("", "xyz", (CharSequence[]) null)); [EOL]     assertEquals("prependIfMissingIgnoreCase(abc,xyz,{null})", "xyzabc", StringUtils.prependIfMissingIgnoreCase("abc", "xyz", new CharSequence[] { null })); [EOL]     assertEquals("prependIfMissingIgnoreCase(abc,xyz,\"\")", "abc", StringUtils.prependIfMissingIgnoreCase("abc", "xyz", "")); [EOL]     assertEquals("prependIfMissingIgnoreCase(abc,xyz,mno)", "xyzabc", StringUtils.prependIfMissingIgnoreCase("abc", "xyz", "mno")); [EOL]     assertEquals("prependIfMissingIgnoreCase(xyzabc,xyz,mno)", "xyzabc", StringUtils.prependIfMissingIgnoreCase("xyzabc", "xyz", "mno")); [EOL]     assertEquals("prependIfMissingIgnoreCase(mnoabc,xyz,mno)", "mnoabc", StringUtils.prependIfMissingIgnoreCase("mnoabc", "xyz", "mno")); [EOL]     assertEquals("prependIfMissingIgnoreCase(XYZabc,xyz,mno)", "XYZabc", StringUtils.prependIfMissingIgnoreCase("XYZabc", "xyz", "mno")); [EOL]     assertEquals("prependIfMissingIgnoreCase(MNOabc,xyz,mno)", "MNOabc", StringUtils.prependIfMissingIgnoreCase("MNOabc", "xyz", "mno")); [EOL] }
@Test [EOL] public void testPrependIfMissingIgnoreCase() { [EOL]     assertEquals("prependIfMissingIgnoreCase(null,null)", null, StringUtils.prependIfMissingIgnoreCase(null, null)); [EOL]     assertEquals("prependIfMissingIgnoreCase(abc,null)", "abc", StringUtils.prependIfMissingIgnoreCase("abc", null)); [EOL]     assertEquals("prependIfMissingIgnoreCase(\"\",xyz)", "xyz", StringUtils.prependIfMissingIgnoreCase("", "xyz")); [EOL]     assertEquals("prependIfMissingIgnoreCase(abc,xyz)", "xyzabc", StringUtils.prependIfMissingIgnoreCase("abc", "xyz")); [EOL]     assertEquals("prependIfMissingIgnoreCase(xyzabc,xyz)", "xyzabc", StringUtils.prependIfMissingIgnoreCase("xyzabc", "xyz")); [EOL]     assertEquals("prependIfMissingIgnoreCase(XYZabc,xyz)", "XYZabc", StringUtils.prependIfMissingIgnoreCase("XYZabc", "xyz")); [EOL]     assertEquals("prependIfMissingIgnoreCase(null,null null)", null, StringUtils.prependIfMissingIgnoreCase(null, null, (CharSequence[]) null)); [EOL]     assertEquals("prependIfMissingIgnoreCase(abc,null,null)", "abc", StringUtils.prependIfMissingIgnoreCase("abc", null, (CharSequence[]) null)); [EOL]     assertEquals("prependIfMissingIgnoreCase(\"\",xyz,null)", "xyz", StringUtils.prependIfMissingIgnoreCase("", "xyz", (CharSequence[]) null)); [EOL]     assertEquals("prependIfMissingIgnoreCase(abc,xyz,{null})", "xyzabc", StringUtils.prependIfMissingIgnoreCase("abc", "xyz", new CharSequence[] { null })); [EOL]     assertEquals("prependIfMissingIgnoreCase(abc,xyz,\"\")", "abc", StringUtils.prependIfMissingIgnoreCase("abc", "xyz", "")); [EOL]     assertEquals("prependIfMissingIgnoreCase(abc,xyz,mno)", "xyzabc", StringUtils.prependIfMissingIgnoreCase("abc", "xyz", "mno")); [EOL]     assertEquals("prependIfMissingIgnoreCase(xyzabc,xyz,mno)", "xyzabc", StringUtils.prependIfMissingIgnoreCase("xyzabc", "xyz", "mno")); [EOL]     assertEquals("prependIfMissingIgnoreCase(mnoabc,xyz,mno)", "mnoabc", StringUtils.prependIfMissingIgnoreCase("mnoabc", "xyz", "mno")); [EOL]     assertEquals("prependIfMissingIgnoreCase(XYZabc,xyz,mno)", "XYZabc", StringUtils.prependIfMissingIgnoreCase("XYZabc", "xyz", "mno")); [EOL]     assertEquals("prependIfMissingIgnoreCase(MNOabc,xyz,mno)", "MNOabc", StringUtils.prependIfMissingIgnoreCase("MNOabc", "xyz", "mno")); [EOL] }
@Test [EOL] public void testPrependIfMissingIgnoreCase() { [EOL]     assertEquals("prependIfMissingIgnoreCase(null,null)", null, StringUtils.prependIfMissingIgnoreCase(null, null)); [EOL]     assertEquals("prependIfMissingIgnoreCase(abc,null)", "abc", StringUtils.prependIfMissingIgnoreCase("abc", null)); [EOL]     assertEquals("prependIfMissingIgnoreCase(\"\",xyz)", "xyz", StringUtils.prependIfMissingIgnoreCase("", "xyz")); [EOL]     assertEquals("prependIfMissingIgnoreCase(abc,xyz)", "xyzabc", StringUtils.prependIfMissingIgnoreCase("abc", "xyz")); [EOL]     assertEquals("prependIfMissingIgnoreCase(xyzabc,xyz)", "xyzabc", StringUtils.prependIfMissingIgnoreCase("xyzabc", "xyz")); [EOL]     assertEquals("prependIfMissingIgnoreCase(XYZabc,xyz)", "XYZabc", StringUtils.prependIfMissingIgnoreCase("XYZabc", "xyz")); [EOL]     assertEquals("prependIfMissingIgnoreCase(null,null null)", null, StringUtils.prependIfMissingIgnoreCase(null, null, (CharSequence[]) null)); [EOL]     assertEquals("prependIfMissingIgnoreCase(abc,null,null)", "abc", StringUtils.prependIfMissingIgnoreCase("abc", null, (CharSequence[]) null)); [EOL]     assertEquals("prependIfMissingIgnoreCase(\"\",xyz,null)", "xyz", StringUtils.prependIfMissingIgnoreCase("", "xyz", (CharSequence[]) null)); [EOL]     assertEquals("prependIfMissingIgnoreCase(abc,xyz,{null})", "xyzabc", StringUtils.prependIfMissingIgnoreCase("abc", "xyz", new CharSequence[] { null })); [EOL]     assertEquals("prependIfMissingIgnoreCase(abc,xyz,\"\")", "abc", StringUtils.prependIfMissingIgnoreCase("abc", "xyz", "")); [EOL]     assertEquals("prependIfMissingIgnoreCase(abc,xyz,mno)", "xyzabc", StringUtils.prependIfMissingIgnoreCase("abc", "xyz", "mno")); [EOL]     assertEquals("prependIfMissingIgnoreCase(xyzabc,xyz,mno)", "xyzabc", StringUtils.prependIfMissingIgnoreCase("xyzabc", "xyz", "mno")); [EOL]     assertEquals("prependIfMissingIgnoreCase(mnoabc,xyz,mno)", "mnoabc", StringUtils.prependIfMissingIgnoreCase("mnoabc", "xyz", "mno")); [EOL]     assertEquals("prependIfMissingIgnoreCase(XYZabc,xyz,mno)", "XYZabc", StringUtils.prependIfMissingIgnoreCase("XYZabc", "xyz", "mno")); [EOL]     assertEquals("prependIfMissingIgnoreCase(MNOabc,xyz,mno)", "MNOabc", StringUtils.prependIfMissingIgnoreCase("MNOabc", "xyz", "mno")); [EOL] }
@Test [EOL] public void testPrependIfMissingIgnoreCase() { [EOL]     assertEquals("prependIfMissingIgnoreCase(null,null)", null, StringUtils.prependIfMissingIgnoreCase(null, null)); [EOL]     assertEquals("prependIfMissingIgnoreCase(abc,null)", "abc", StringUtils.prependIfMissingIgnoreCase("abc", null)); [EOL]     assertEquals("prependIfMissingIgnoreCase(\"\",xyz)", "xyz", StringUtils.prependIfMissingIgnoreCase("", "xyz")); [EOL]     assertEquals("prependIfMissingIgnoreCase(abc,xyz)", "xyzabc", StringUtils.prependIfMissingIgnoreCase("abc", "xyz")); [EOL]     assertEquals("prependIfMissingIgnoreCase(xyzabc,xyz)", "xyzabc", StringUtils.prependIfMissingIgnoreCase("xyzabc", "xyz")); [EOL]     assertEquals("prependIfMissingIgnoreCase(XYZabc,xyz)", "XYZabc", StringUtils.prependIfMissingIgnoreCase("XYZabc", "xyz")); [EOL]     assertEquals("prependIfMissingIgnoreCase(null,null null)", null, StringUtils.prependIfMissingIgnoreCase(null, null, (CharSequence[]) null)); [EOL]     assertEquals("prependIfMissingIgnoreCase(abc,null,null)", "abc", StringUtils.prependIfMissingIgnoreCase("abc", null, (CharSequence[]) null)); [EOL]     assertEquals("prependIfMissingIgnoreCase(\"\",xyz,null)", "xyz", StringUtils.prependIfMissingIgnoreCase("", "xyz", (CharSequence[]) null)); [EOL]     assertEquals("prependIfMissingIgnoreCase(abc,xyz,{null})", "xyzabc", StringUtils.prependIfMissingIgnoreCase("abc", "xyz", new CharSequence[] { null })); [EOL]     assertEquals("prependIfMissingIgnoreCase(abc,xyz,\"\")", "abc", StringUtils.prependIfMissingIgnoreCase("abc", "xyz", "")); [EOL]     assertEquals("prependIfMissingIgnoreCase(abc,xyz,mno)", "xyzabc", StringUtils.prependIfMissingIgnoreCase("abc", "xyz", "mno")); [EOL]     assertEquals("prependIfMissingIgnoreCase(xyzabc,xyz,mno)", "xyzabc", StringUtils.prependIfMissingIgnoreCase("xyzabc", "xyz", "mno")); [EOL]     assertEquals("prependIfMissingIgnoreCase(mnoabc,xyz,mno)", "mnoabc", StringUtils.prependIfMissingIgnoreCase("mnoabc", "xyz", "mno")); [EOL]     assertEquals("prependIfMissingIgnoreCase(XYZabc,xyz,mno)", "XYZabc", StringUtils.prependIfMissingIgnoreCase("XYZabc", "xyz", "mno")); [EOL]     assertEquals("prependIfMissingIgnoreCase(MNOabc,xyz,mno)", "MNOabc", StringUtils.prependIfMissingIgnoreCase("MNOabc", "xyz", "mno")); [EOL] }
@Test [EOL] public void testPrependIfMissingIgnoreCase() { [EOL]     assertEquals("prependIfMissingIgnoreCase(null,null)", null, StringUtils.prependIfMissingIgnoreCase(null, null)); [EOL]     assertEquals("prependIfMissingIgnoreCase(abc,null)", "abc", StringUtils.prependIfMissingIgnoreCase("abc", null)); [EOL]     assertEquals("prependIfMissingIgnoreCase(\"\",xyz)", "xyz", StringUtils.prependIfMissingIgnoreCase("", "xyz")); [EOL]     assertEquals("prependIfMissingIgnoreCase(abc,xyz)", "xyzabc", StringUtils.prependIfMissingIgnoreCase("abc", "xyz")); [EOL]     assertEquals("prependIfMissingIgnoreCase(xyzabc,xyz)", "xyzabc", StringUtils.prependIfMissingIgnoreCase("xyzabc", "xyz")); [EOL]     assertEquals("prependIfMissingIgnoreCase(XYZabc,xyz)", "XYZabc", StringUtils.prependIfMissingIgnoreCase("XYZabc", "xyz")); [EOL]     assertEquals("prependIfMissingIgnoreCase(null,null null)", null, StringUtils.prependIfMissingIgnoreCase(null, null, (CharSequence[]) null)); [EOL]     assertEquals("prependIfMissingIgnoreCase(abc,null,null)", "abc", StringUtils.prependIfMissingIgnoreCase("abc", null, (CharSequence[]) null)); [EOL]     assertEquals("prependIfMissingIgnoreCase(\"\",xyz,null)", "xyz", StringUtils.prependIfMissingIgnoreCase("", "xyz", (CharSequence[]) null)); [EOL]     assertEquals("prependIfMissingIgnoreCase(abc,xyz,{null})", "xyzabc", StringUtils.prependIfMissingIgnoreCase("abc", "xyz", new CharSequence[] { null })); [EOL]     assertEquals("prependIfMissingIgnoreCase(abc,xyz,\"\")", "abc", StringUtils.prependIfMissingIgnoreCase("abc", "xyz", "")); [EOL]     assertEquals("prependIfMissingIgnoreCase(abc,xyz,mno)", "xyzabc", StringUtils.prependIfMissingIgnoreCase("abc", "xyz", "mno")); [EOL]     assertEquals("prependIfMissingIgnoreCase(xyzabc,xyz,mno)", "xyzabc", StringUtils.prependIfMissingIgnoreCase("xyzabc", "xyz", "mno")); [EOL]     assertEquals("prependIfMissingIgnoreCase(mnoabc,xyz,mno)", "mnoabc", StringUtils.prependIfMissingIgnoreCase("mnoabc", "xyz", "mno")); [EOL]     assertEquals("prependIfMissingIgnoreCase(XYZabc,xyz,mno)", "XYZabc", StringUtils.prependIfMissingIgnoreCase("XYZabc", "xyz", "mno")); [EOL]     assertEquals("prependIfMissingIgnoreCase(MNOabc,xyz,mno)", "MNOabc", StringUtils.prependIfMissingIgnoreCase("MNOabc", "xyz", "mno")); [EOL] }
@Test [EOL] public void testPrependIfMissingIgnoreCase() { [EOL]     assertEquals("prependIfMissingIgnoreCase(null,null)", null, StringUtils.prependIfMissingIgnoreCase(null, null)); [EOL]     assertEquals("prependIfMissingIgnoreCase(abc,null)", "abc", StringUtils.prependIfMissingIgnoreCase("abc", null)); [EOL]     assertEquals("prependIfMissingIgnoreCase(\"\",xyz)", "xyz", StringUtils.prependIfMissingIgnoreCase("", "xyz")); [EOL]     assertEquals("prependIfMissingIgnoreCase(abc,xyz)", "xyzabc", StringUtils.prependIfMissingIgnoreCase("abc", "xyz")); [EOL]     assertEquals("prependIfMissingIgnoreCase(xyzabc,xyz)", "xyzabc", StringUtils.prependIfMissingIgnoreCase("xyzabc", "xyz")); [EOL]     assertEquals("prependIfMissingIgnoreCase(XYZabc,xyz)", "XYZabc", StringUtils.prependIfMissingIgnoreCase("XYZabc", "xyz")); [EOL]     assertEquals("prependIfMissingIgnoreCase(null,null null)", null, StringUtils.prependIfMissingIgnoreCase(null, null, (CharSequence[]) null)); [EOL]     assertEquals("prependIfMissingIgnoreCase(abc,null,null)", "abc", StringUtils.prependIfMissingIgnoreCase("abc", null, (CharSequence[]) null)); [EOL]     assertEquals("prependIfMissingIgnoreCase(\"\",xyz,null)", "xyz", StringUtils.prependIfMissingIgnoreCase("", "xyz", (CharSequence[]) null)); [EOL]     assertEquals("prependIfMissingIgnoreCase(abc,xyz,{null})", "xyzabc", StringUtils.prependIfMissingIgnoreCase("abc", "xyz", new CharSequence[] { null })); [EOL]     assertEquals("prependIfMissingIgnoreCase(abc,xyz,\"\")", "abc", StringUtils.prependIfMissingIgnoreCase("abc", "xyz", "")); [EOL]     assertEquals("prependIfMissingIgnoreCase(abc,xyz,mno)", "xyzabc", StringUtils.prependIfMissingIgnoreCase("abc", "xyz", "mno")); [EOL]     assertEquals("prependIfMissingIgnoreCase(xyzabc,xyz,mno)", "xyzabc", StringUtils.prependIfMissingIgnoreCase("xyzabc", "xyz", "mno")); [EOL]     assertEquals("prependIfMissingIgnoreCase(mnoabc,xyz,mno)", "mnoabc", StringUtils.prependIfMissingIgnoreCase("mnoabc", "xyz", "mno")); [EOL]     assertEquals("prependIfMissingIgnoreCase(XYZabc,xyz,mno)", "XYZabc", StringUtils.prependIfMissingIgnoreCase("XYZabc", "xyz", "mno")); [EOL]     assertEquals("prependIfMissingIgnoreCase(MNOabc,xyz,mno)", "MNOabc", StringUtils.prependIfMissingIgnoreCase("MNOabc", "xyz", "mno")); [EOL] }
@Test [EOL] public void testPrependIfMissingIgnoreCase() { [EOL]     assertEquals("prependIfMissingIgnoreCase(null,null)", null, StringUtils.prependIfMissingIgnoreCase(null, null)); [EOL]     assertEquals("prependIfMissingIgnoreCase(abc,null)", "abc", StringUtils.prependIfMissingIgnoreCase("abc", null)); [EOL]     assertEquals("prependIfMissingIgnoreCase(\"\",xyz)", "xyz", StringUtils.prependIfMissingIgnoreCase("", "xyz")); [EOL]     assertEquals("prependIfMissingIgnoreCase(abc,xyz)", "xyzabc", StringUtils.prependIfMissingIgnoreCase("abc", "xyz")); [EOL]     assertEquals("prependIfMissingIgnoreCase(xyzabc,xyz)", "xyzabc", StringUtils.prependIfMissingIgnoreCase("xyzabc", "xyz")); [EOL]     assertEquals("prependIfMissingIgnoreCase(XYZabc,xyz)", "XYZabc", StringUtils.prependIfMissingIgnoreCase("XYZabc", "xyz")); [EOL]     assertEquals("prependIfMissingIgnoreCase(null,null null)", null, StringUtils.prependIfMissingIgnoreCase(null, null, (CharSequence[]) null)); [EOL]     assertEquals("prependIfMissingIgnoreCase(abc,null,null)", "abc", StringUtils.prependIfMissingIgnoreCase("abc", null, (CharSequence[]) null)); [EOL]     assertEquals("prependIfMissingIgnoreCase(\"\",xyz,null)", "xyz", StringUtils.prependIfMissingIgnoreCase("", "xyz", (CharSequence[]) null)); [EOL]     assertEquals("prependIfMissingIgnoreCase(abc,xyz,{null})", "xyzabc", StringUtils.prependIfMissingIgnoreCase("abc", "xyz", new CharSequence[] { null })); [EOL]     assertEquals("prependIfMissingIgnoreCase(abc,xyz,\"\")", "abc", StringUtils.prependIfMissingIgnoreCase("abc", "xyz", "")); [EOL]     assertEquals("prependIfMissingIgnoreCase(abc,xyz,mno)", "xyzabc", StringUtils.prependIfMissingIgnoreCase("abc", "xyz", "mno")); [EOL]     assertEquals("prependIfMissingIgnoreCase(xyzabc,xyz,mno)", "xyzabc", StringUtils.prependIfMissingIgnoreCase("xyzabc", "xyz", "mno")); [EOL]     assertEquals("prependIfMissingIgnoreCase(mnoabc,xyz,mno)", "mnoabc", StringUtils.prependIfMissingIgnoreCase("mnoabc", "xyz", "mno")); [EOL]     assertEquals("prependIfMissingIgnoreCase(XYZabc,xyz,mno)", "XYZabc", StringUtils.prependIfMissingIgnoreCase("XYZabc", "xyz", "mno")); [EOL]     assertEquals("prependIfMissingIgnoreCase(MNOabc,xyz,mno)", "MNOabc", StringUtils.prependIfMissingIgnoreCase("MNOabc", "xyz", "mno")); [EOL] }
@Test [EOL] public void testPrependIfMissingIgnoreCase() { [EOL]     assertEquals("prependIfMissingIgnoreCase(null,null)", null, StringUtils.prependIfMissingIgnoreCase(null, null)); [EOL]     assertEquals("prependIfMissingIgnoreCase(abc,null)", "abc", StringUtils.prependIfMissingIgnoreCase("abc", null)); [EOL]     assertEquals("prependIfMissingIgnoreCase(\"\",xyz)", "xyz", StringUtils.prependIfMissingIgnoreCase("", "xyz")); [EOL]     assertEquals("prependIfMissingIgnoreCase(abc,xyz)", "xyzabc", StringUtils.prependIfMissingIgnoreCase("abc", "xyz")); [EOL]     assertEquals("prependIfMissingIgnoreCase(xyzabc,xyz)", "xyzabc", StringUtils.prependIfMissingIgnoreCase("xyzabc", "xyz")); [EOL]     assertEquals("prependIfMissingIgnoreCase(XYZabc,xyz)", "XYZabc", StringUtils.prependIfMissingIgnoreCase("XYZabc", "xyz")); [EOL]     assertEquals("prependIfMissingIgnoreCase(null,null null)", null, StringUtils.prependIfMissingIgnoreCase(null, null, (CharSequence[]) null)); [EOL]     assertEquals("prependIfMissingIgnoreCase(abc,null,null)", "abc", StringUtils.prependIfMissingIgnoreCase("abc", null, (CharSequence[]) null)); [EOL]     assertEquals("prependIfMissingIgnoreCase(\"\",xyz,null)", "xyz", StringUtils.prependIfMissingIgnoreCase("", "xyz", (CharSequence[]) null)); [EOL]     assertEquals("prependIfMissingIgnoreCase(abc,xyz,{null})", "xyzabc", StringUtils.prependIfMissingIgnoreCase("abc", "xyz", new CharSequence[] { null })); [EOL]     assertEquals("prependIfMissingIgnoreCase(abc,xyz,\"\")", "abc", StringUtils.prependIfMissingIgnoreCase("abc", "xyz", "")); [EOL]     assertEquals("prependIfMissingIgnoreCase(abc,xyz,mno)", "xyzabc", StringUtils.prependIfMissingIgnoreCase("abc", "xyz", "mno")); [EOL]     assertEquals("prependIfMissingIgnoreCase(xyzabc,xyz,mno)", "xyzabc", StringUtils.prependIfMissingIgnoreCase("xyzabc", "xyz", "mno")); [EOL]     assertEquals("prependIfMissingIgnoreCase(mnoabc,xyz,mno)", "mnoabc", StringUtils.prependIfMissingIgnoreCase("mnoabc", "xyz", "mno")); [EOL]     assertEquals("prependIfMissingIgnoreCase(XYZabc,xyz,mno)", "XYZabc", StringUtils.prependIfMissingIgnoreCase("XYZabc", "xyz", "mno")); [EOL]     assertEquals("prependIfMissingIgnoreCase(MNOabc,xyz,mno)", "MNOabc", StringUtils.prependIfMissingIgnoreCase("MNOabc", "xyz", "mno")); [EOL] }
@Test [EOL] public void testPrependIfMissingIgnoreCase() { [EOL]     assertEquals("prependIfMissingIgnoreCase(null,null)", null, StringUtils.prependIfMissingIgnoreCase(null, null)); [EOL]     assertEquals("prependIfMissingIgnoreCase(abc,null)", "abc", StringUtils.prependIfMissingIgnoreCase("abc", null)); [EOL]     assertEquals("prependIfMissingIgnoreCase(\"\",xyz)", "xyz", StringUtils.prependIfMissingIgnoreCase("", "xyz")); [EOL]     assertEquals("prependIfMissingIgnoreCase(abc,xyz)", "xyzabc", StringUtils.prependIfMissingIgnoreCase("abc", "xyz")); [EOL]     assertEquals("prependIfMissingIgnoreCase(xyzabc,xyz)", "xyzabc", StringUtils.prependIfMissingIgnoreCase("xyzabc", "xyz")); [EOL]     assertEquals("prependIfMissingIgnoreCase(XYZabc,xyz)", "XYZabc", StringUtils.prependIfMissingIgnoreCase("XYZabc", "xyz")); [EOL]     assertEquals("prependIfMissingIgnoreCase(null,null null)", null, StringUtils.prependIfMissingIgnoreCase(null, null, (CharSequence[]) null)); [EOL]     assertEquals("prependIfMissingIgnoreCase(abc,null,null)", "abc", StringUtils.prependIfMissingIgnoreCase("abc", null, (CharSequence[]) null)); [EOL]     assertEquals("prependIfMissingIgnoreCase(\"\",xyz,null)", "xyz", StringUtils.prependIfMissingIgnoreCase("", "xyz", (CharSequence[]) null)); [EOL]     assertEquals("prependIfMissingIgnoreCase(abc,xyz,{null})", "xyzabc", StringUtils.prependIfMissingIgnoreCase("abc", "xyz", new CharSequence[] { null })); [EOL]     assertEquals("prependIfMissingIgnoreCase(abc,xyz,\"\")", "abc", StringUtils.prependIfMissingIgnoreCase("abc", "xyz", "")); [EOL]     assertEquals("prependIfMissingIgnoreCase(abc,xyz,mno)", "xyzabc", StringUtils.prependIfMissingIgnoreCase("abc", "xyz", "mno")); [EOL]     assertEquals("prependIfMissingIgnoreCase(xyzabc,xyz,mno)", "xyzabc", StringUtils.prependIfMissingIgnoreCase("xyzabc", "xyz", "mno")); [EOL]     assertEquals("prependIfMissingIgnoreCase(mnoabc,xyz,mno)", "mnoabc", StringUtils.prependIfMissingIgnoreCase("mnoabc", "xyz", "mno")); [EOL]     assertEquals("prependIfMissingIgnoreCase(XYZabc,xyz,mno)", "XYZabc", StringUtils.prependIfMissingIgnoreCase("XYZabc", "xyz", "mno")); [EOL]     assertEquals("prependIfMissingIgnoreCase(MNOabc,xyz,mno)", "MNOabc", StringUtils.prependIfMissingIgnoreCase("MNOabc", "xyz", "mno")); [EOL] }
@Test [EOL] public void testPrependIfMissingIgnoreCase() { [EOL]     assertEquals("prependIfMissingIgnoreCase(null,null)", null, StringUtils.prependIfMissingIgnoreCase(null, null)); [EOL]     assertEquals("prependIfMissingIgnoreCase(abc,null)", "abc", StringUtils.prependIfMissingIgnoreCase("abc", null)); [EOL]     assertEquals("prependIfMissingIgnoreCase(\"\",xyz)", "xyz", StringUtils.prependIfMissingIgnoreCase("", "xyz")); [EOL]     assertEquals("prependIfMissingIgnoreCase(abc,xyz)", "xyzabc", StringUtils.prependIfMissingIgnoreCase("abc", "xyz")); [EOL]     assertEquals("prependIfMissingIgnoreCase(xyzabc,xyz)", "xyzabc", StringUtils.prependIfMissingIgnoreCase("xyzabc", "xyz")); [EOL]     assertEquals("prependIfMissingIgnoreCase(XYZabc,xyz)", "XYZabc", StringUtils.prependIfMissingIgnoreCase("XYZabc", "xyz")); [EOL]     assertEquals("prependIfMissingIgnoreCase(null,null null)", null, StringUtils.prependIfMissingIgnoreCase(null, null, (CharSequence[]) null)); [EOL]     assertEquals("prependIfMissingIgnoreCase(abc,null,null)", "abc", StringUtils.prependIfMissingIgnoreCase("abc", null, (CharSequence[]) null)); [EOL]     assertEquals("prependIfMissingIgnoreCase(\"\",xyz,null)", "xyz", StringUtils.prependIfMissingIgnoreCase("", "xyz", (CharSequence[]) null)); [EOL]     assertEquals("prependIfMissingIgnoreCase(abc,xyz,{null})", "xyzabc", StringUtils.prependIfMissingIgnoreCase("abc", "xyz", new CharSequence[] { null })); [EOL]     assertEquals("prependIfMissingIgnoreCase(abc,xyz,\"\")", "abc", StringUtils.prependIfMissingIgnoreCase("abc", "xyz", "")); [EOL]     assertEquals("prependIfMissingIgnoreCase(abc,xyz,mno)", "xyzabc", StringUtils.prependIfMissingIgnoreCase("abc", "xyz", "mno")); [EOL]     assertEquals("prependIfMissingIgnoreCase(xyzabc,xyz,mno)", "xyzabc", StringUtils.prependIfMissingIgnoreCase("xyzabc", "xyz", "mno")); [EOL]     assertEquals("prependIfMissingIgnoreCase(mnoabc,xyz,mno)", "mnoabc", StringUtils.prependIfMissingIgnoreCase("mnoabc", "xyz", "mno")); [EOL]     assertEquals("prependIfMissingIgnoreCase(XYZabc,xyz,mno)", "XYZabc", StringUtils.prependIfMissingIgnoreCase("XYZabc", "xyz", "mno")); [EOL]     assertEquals("prependIfMissingIgnoreCase(MNOabc,xyz,mno)", "MNOabc", StringUtils.prependIfMissingIgnoreCase("MNOabc", "xyz", "mno")); [EOL] }
@Test [EOL] public void testAddValueObject() { [EOL]     final MutableDouble mutNum = new MutableDouble(1); [EOL]     mutNum.add(Double.valueOf(1.1d)); [EOL]     assertEquals(2.1d, mutNum.doubleValue(), 0.01d); [EOL] }
@Test [EOL] public void testAddValueObject() { [EOL]     final MutableDouble mutNum = new MutableDouble(1); [EOL]     mutNum.add(Double.valueOf(1.1d)); [EOL]     assertEquals(2.1d, mutNum.doubleValue(), 0.01d); [EOL] }
@Test [EOL] public void testAddValueObject() { [EOL]     final MutableDouble mutNum = new MutableDouble(1); [EOL]     mutNum.add(Double.valueOf(1.1d)); [EOL]     assertEquals(2.1d, mutNum.doubleValue(), 0.01d); [EOL] }
@Test [EOL] public void testAddValueObject() { [EOL]     final MutableDouble mutNum = new MutableDouble(1); [EOL]     mutNum.add(Double.valueOf(1.1d)); [EOL]     assertEquals(2.1d, mutNum.doubleValue(), 0.01d); [EOL] }
@Test [EOL] public void testPrimitiveValues() { [EOL]     final MutableDouble mutNum = new MutableDouble(1.7); [EOL]     assertEquals(1.7F, mutNum.floatValue(), 0); [EOL]     assertEquals(1.7, mutNum.doubleValue(), 0); [EOL]     assertEquals((byte) 1, mutNum.byteValue()); [EOL]     assertEquals((short) 1, mutNum.shortValue()); [EOL]     assertEquals(1, mutNum.intValue()); [EOL]     assertEquals(1L, mutNum.longValue()); [EOL] }
@Test [EOL] public void testPrimitiveValues() { [EOL]     final MutableDouble mutNum = new MutableDouble(1.7); [EOL]     assertEquals(1.7F, mutNum.floatValue(), 0); [EOL]     assertEquals(1.7, mutNum.doubleValue(), 0); [EOL]     assertEquals((byte) 1, mutNum.byteValue()); [EOL]     assertEquals((short) 1, mutNum.shortValue()); [EOL]     assertEquals(1, mutNum.intValue()); [EOL]     assertEquals(1L, mutNum.longValue()); [EOL] }
@Test [EOL] public void testPrimitiveValues() { [EOL]     final MutableDouble mutNum = new MutableDouble(1.7); [EOL]     assertEquals(1.7F, mutNum.floatValue(), 0); [EOL]     assertEquals(1.7, mutNum.doubleValue(), 0); [EOL]     assertEquals((byte) 1, mutNum.byteValue()); [EOL]     assertEquals((short) 1, mutNum.shortValue()); [EOL]     assertEquals(1, mutNum.intValue()); [EOL]     assertEquals(1L, mutNum.longValue()); [EOL] }
@Test [EOL] public void testToDouble() { [EOL]     assertEquals(Double.valueOf(0d), new MutableDouble(0d).toDouble()); [EOL]     assertEquals(Double.valueOf(12.3d), new MutableDouble(12.3d).toDouble()); [EOL] }
@Test [EOL] public void testToDouble() { [EOL]     assertEquals(Double.valueOf(0d), new MutableDouble(0d).toDouble()); [EOL]     assertEquals(Double.valueOf(12.3d), new MutableDouble(12.3d).toDouble()); [EOL] }
@Test [EOL] public void testEquals() { [EOL]     final MutableDouble mutNumA = new MutableDouble(0d); [EOL]     final MutableDouble mutNumB = new MutableDouble(0d); [EOL]     final MutableDouble mutNumC = new MutableDouble(1d); [EOL]     assertTrue(mutNumA.equals(mutNumA)); [EOL]     assertTrue(mutNumA.equals(mutNumB)); [EOL]     assertTrue(mutNumB.equals(mutNumA)); [EOL]     assertTrue(mutNumB.equals(mutNumB)); [EOL]     assertFalse(mutNumA.equals(mutNumC)); [EOL]     assertFalse(mutNumB.equals(mutNumC)); [EOL]     assertTrue(mutNumC.equals(mutNumC)); [EOL]     assertFalse(mutNumA.equals(null)); [EOL]     assertFalse(mutNumA.equals(Double.valueOf(0d))); [EOL]     assertFalse(mutNumA.equals("0")); [EOL] }
@Test [EOL] public void testEquals() { [EOL]     final MutableDouble mutNumA = new MutableDouble(0d); [EOL]     final MutableDouble mutNumB = new MutableDouble(0d); [EOL]     final MutableDouble mutNumC = new MutableDouble(1d); [EOL]     assertTrue(mutNumA.equals(mutNumA)); [EOL]     assertTrue(mutNumA.equals(mutNumB)); [EOL]     assertTrue(mutNumB.equals(mutNumA)); [EOL]     assertTrue(mutNumB.equals(mutNumB)); [EOL]     assertFalse(mutNumA.equals(mutNumC)); [EOL]     assertFalse(mutNumB.equals(mutNumC)); [EOL]     assertTrue(mutNumC.equals(mutNumC)); [EOL]     assertFalse(mutNumA.equals(null)); [EOL]     assertFalse(mutNumA.equals(Double.valueOf(0d))); [EOL]     assertFalse(mutNumA.equals("0")); [EOL] }
@Test [EOL] public void testEquals() { [EOL]     final MutableDouble mutNumA = new MutableDouble(0d); [EOL]     final MutableDouble mutNumB = new MutableDouble(0d); [EOL]     final MutableDouble mutNumC = new MutableDouble(1d); [EOL]     assertTrue(mutNumA.equals(mutNumA)); [EOL]     assertTrue(mutNumA.equals(mutNumB)); [EOL]     assertTrue(mutNumB.equals(mutNumA)); [EOL]     assertTrue(mutNumB.equals(mutNumB)); [EOL]     assertFalse(mutNumA.equals(mutNumC)); [EOL]     assertFalse(mutNumB.equals(mutNumC)); [EOL]     assertTrue(mutNumC.equals(mutNumC)); [EOL]     assertFalse(mutNumA.equals(null)); [EOL]     assertFalse(mutNumA.equals(Double.valueOf(0d))); [EOL]     assertFalse(mutNumA.equals("0")); [EOL] }
@Test [EOL] public void testEquals() { [EOL]     final MutableDouble mutNumA = new MutableDouble(0d); [EOL]     final MutableDouble mutNumB = new MutableDouble(0d); [EOL]     final MutableDouble mutNumC = new MutableDouble(1d); [EOL]     assertTrue(mutNumA.equals(mutNumA)); [EOL]     assertTrue(mutNumA.equals(mutNumB)); [EOL]     assertTrue(mutNumB.equals(mutNumA)); [EOL]     assertTrue(mutNumB.equals(mutNumB)); [EOL]     assertFalse(mutNumA.equals(mutNumC)); [EOL]     assertFalse(mutNumB.equals(mutNumC)); [EOL]     assertTrue(mutNumC.equals(mutNumC)); [EOL]     assertFalse(mutNumA.equals(null)); [EOL]     assertFalse(mutNumA.equals(Double.valueOf(0d))); [EOL]     assertFalse(mutNumA.equals("0")); [EOL] }
@Test [EOL] public void testToString() { [EOL]     assertEquals("0.0", new MutableDouble(0d).toString()); [EOL]     assertEquals("10.0", new MutableDouble(10d).toString()); [EOL]     assertEquals("-123.0", new MutableDouble(-123d).toString()); [EOL] }
@Test [EOL] public void testAppendSuper() { [EOL]     assertEquals(baseStr + "[" + SystemUtils.LINE_SEPARATOR + "]", new ToStringBuilder(base).appendSuper("Integer@8888[" + SystemUtils.LINE_SEPARATOR + "]").toString()); [EOL]     assertEquals(baseStr + "[" + SystemUtils.LINE_SEPARATOR + "  <null>" + SystemUtils.LINE_SEPARATOR + "]", new ToStringBuilder(base).appendSuper("Integer@8888[" + SystemUtils.LINE_SEPARATOR + "  <null>" + SystemUtils.LINE_SEPARATOR + "]").toString()); [EOL]     assertEquals(baseStr + "[" + SystemUtils.LINE_SEPARATOR + "  a=hello" + SystemUtils.LINE_SEPARATOR + "]", new ToStringBuilder(base).appendSuper("Integer@8888[" + SystemUtils.LINE_SEPARATOR + "]").append("a", "hello").toString()); [EOL]     assertEquals(baseStr + "[" + SystemUtils.LINE_SEPARATOR + "  <null>" + SystemUtils.LINE_SEPARATOR + "  a=hello" + SystemUtils.LINE_SEPARATOR + "]", new ToStringBuilder(base).appendSuper("Integer@8888[" + SystemUtils.LINE_SEPARATOR + "  <null>" + SystemUtils.LINE_SEPARATOR + "]").append("a", "hello").toString()); [EOL]     assertEquals(baseStr + "[" + SystemUtils.LINE_SEPARATOR + "  a=hello" + SystemUtils.LINE_SEPARATOR + "]", new ToStringBuilder(base).appendSuper(null).append("a", "hello").toString()); [EOL] }
@Test [EOL] public void testAppendSuper() { [EOL]     assertEquals(baseStr + "[" + SystemUtils.LINE_SEPARATOR + "]", new ToStringBuilder(base).appendSuper("Integer@8888[" + SystemUtils.LINE_SEPARATOR + "]").toString()); [EOL]     assertEquals(baseStr + "[" + SystemUtils.LINE_SEPARATOR + "  <null>" + SystemUtils.LINE_SEPARATOR + "]", new ToStringBuilder(base).appendSuper("Integer@8888[" + SystemUtils.LINE_SEPARATOR + "  <null>" + SystemUtils.LINE_SEPARATOR + "]").toString()); [EOL]     assertEquals(baseStr + "[" + SystemUtils.LINE_SEPARATOR + "  a=hello" + SystemUtils.LINE_SEPARATOR + "]", new ToStringBuilder(base).appendSuper("Integer@8888[" + SystemUtils.LINE_SEPARATOR + "]").append("a", "hello").toString()); [EOL]     assertEquals(baseStr + "[" + SystemUtils.LINE_SEPARATOR + "  <null>" + SystemUtils.LINE_SEPARATOR + "  a=hello" + SystemUtils.LINE_SEPARATOR + "]", new ToStringBuilder(base).appendSuper("Integer@8888[" + SystemUtils.LINE_SEPARATOR + "  <null>" + SystemUtils.LINE_SEPARATOR + "]").append("a", "hello").toString()); [EOL]     assertEquals(baseStr + "[" + SystemUtils.LINE_SEPARATOR + "  a=hello" + SystemUtils.LINE_SEPARATOR + "]", new ToStringBuilder(base).appendSuper(null).append("a", "hello").toString()); [EOL] }
@Test [EOL] public void testAppendSuper() { [EOL]     assertEquals(baseStr + "[" + SystemUtils.LINE_SEPARATOR + "]", new ToStringBuilder(base).appendSuper("Integer@8888[" + SystemUtils.LINE_SEPARATOR + "]").toString()); [EOL]     assertEquals(baseStr + "[" + SystemUtils.LINE_SEPARATOR + "  <null>" + SystemUtils.LINE_SEPARATOR + "]", new ToStringBuilder(base).appendSuper("Integer@8888[" + SystemUtils.LINE_SEPARATOR + "  <null>" + SystemUtils.LINE_SEPARATOR + "]").toString()); [EOL]     assertEquals(baseStr + "[" + SystemUtils.LINE_SEPARATOR + "  a=hello" + SystemUtils.LINE_SEPARATOR + "]", new ToStringBuilder(base).appendSuper("Integer@8888[" + SystemUtils.LINE_SEPARATOR + "]").append("a", "hello").toString()); [EOL]     assertEquals(baseStr + "[" + SystemUtils.LINE_SEPARATOR + "  <null>" + SystemUtils.LINE_SEPARATOR + "  a=hello" + SystemUtils.LINE_SEPARATOR + "]", new ToStringBuilder(base).appendSuper("Integer@8888[" + SystemUtils.LINE_SEPARATOR + "  <null>" + SystemUtils.LINE_SEPARATOR + "]").append("a", "hello").toString()); [EOL]     assertEquals(baseStr + "[" + SystemUtils.LINE_SEPARATOR + "  a=hello" + SystemUtils.LINE_SEPARATOR + "]", new ToStringBuilder(base).appendSuper(null).append("a", "hello").toString()); [EOL] }
@Test [EOL] public void testAppendSuper() { [EOL]     assertEquals(baseStr + "[" + SystemUtils.LINE_SEPARATOR + "]", new ToStringBuilder(base).appendSuper("Integer@8888[" + SystemUtils.LINE_SEPARATOR + "]").toString()); [EOL]     assertEquals(baseStr + "[" + SystemUtils.LINE_SEPARATOR + "  <null>" + SystemUtils.LINE_SEPARATOR + "]", new ToStringBuilder(base).appendSuper("Integer@8888[" + SystemUtils.LINE_SEPARATOR + "  <null>" + SystemUtils.LINE_SEPARATOR + "]").toString()); [EOL]     assertEquals(baseStr + "[" + SystemUtils.LINE_SEPARATOR + "  a=hello" + SystemUtils.LINE_SEPARATOR + "]", new ToStringBuilder(base).appendSuper("Integer@8888[" + SystemUtils.LINE_SEPARATOR + "]").append("a", "hello").toString()); [EOL]     assertEquals(baseStr + "[" + SystemUtils.LINE_SEPARATOR + "  <null>" + SystemUtils.LINE_SEPARATOR + "  a=hello" + SystemUtils.LINE_SEPARATOR + "]", new ToStringBuilder(base).appendSuper("Integer@8888[" + SystemUtils.LINE_SEPARATOR + "  <null>" + SystemUtils.LINE_SEPARATOR + "]").append("a", "hello").toString()); [EOL]     assertEquals(baseStr + "[" + SystemUtils.LINE_SEPARATOR + "  a=hello" + SystemUtils.LINE_SEPARATOR + "]", new ToStringBuilder(base).appendSuper(null).append("a", "hello").toString()); [EOL] }
@Test [EOL] public void testAppendSuper() { [EOL]     assertEquals(baseStr + "[" + SystemUtils.LINE_SEPARATOR + "]", new ToStringBuilder(base).appendSuper("Integer@8888[" + SystemUtils.LINE_SEPARATOR + "]").toString()); [EOL]     assertEquals(baseStr + "[" + SystemUtils.LINE_SEPARATOR + "  <null>" + SystemUtils.LINE_SEPARATOR + "]", new ToStringBuilder(base).appendSuper("Integer@8888[" + SystemUtils.LINE_SEPARATOR + "  <null>" + SystemUtils.LINE_SEPARATOR + "]").toString()); [EOL]     assertEquals(baseStr + "[" + SystemUtils.LINE_SEPARATOR + "  a=hello" + SystemUtils.LINE_SEPARATOR + "]", new ToStringBuilder(base).appendSuper("Integer@8888[" + SystemUtils.LINE_SEPARATOR + "]").append("a", "hello").toString()); [EOL]     assertEquals(baseStr + "[" + SystemUtils.LINE_SEPARATOR + "  <null>" + SystemUtils.LINE_SEPARATOR + "  a=hello" + SystemUtils.LINE_SEPARATOR + "]", new ToStringBuilder(base).appendSuper("Integer@8888[" + SystemUtils.LINE_SEPARATOR + "  <null>" + SystemUtils.LINE_SEPARATOR + "]").append("a", "hello").toString()); [EOL]     assertEquals(baseStr + "[" + SystemUtils.LINE_SEPARATOR + "  a=hello" + SystemUtils.LINE_SEPARATOR + "]", new ToStringBuilder(base).appendSuper(null).append("a", "hello").toString()); [EOL] }
@Test [EOL] public void testBlank() { [EOL]     assertEquals(baseStr + "[" + SystemUtils.LINE_SEPARATOR + "]", new ToStringBuilder(base).toString()); [EOL] }
@Test [EOL] public void testBlank() { [EOL]     assertEquals(baseStr + "[" + SystemUtils.LINE_SEPARATOR + "]", new ToStringBuilder(base).toString()); [EOL] }
@Test [EOL] public void testReflectionByteArrayArray() { [EOL]     byte[][] array = new byte[][] { { 1, 2 }, null, { 5 } }; [EOL]     final String baseStr = this.toBaseString(array); [EOL]     assertEquals(baseStr + "[{{1,2},<null>,{5}}]", ToStringBuilder.reflectionToString(array)); [EOL]     array = null; [EOL]     assertReflectionArray("<null>", array); [EOL] }
@Test [EOL] public void testShort() { [EOL]     assertEquals(baseStr + "[3]", new ToStringBuilder(base).append((short) 3).toString()); [EOL]     assertEquals(baseStr + "[a=3]", new ToStringBuilder(base).append("a", (short) 3).toString()); [EOL]     assertEquals(baseStr + "[a=3,b=4]", new ToStringBuilder(base).append("a", (short) 3).append("b", (short) 4).toString()); [EOL] }
@Test [EOL] public void testReflectionByteArrayArray() { [EOL]     byte[][] array = new byte[][] { { 1, 2 }, null, { 5 } }; [EOL]     final String baseStr = this.toBaseString(array); [EOL]     assertEquals(baseStr + "[{{1,2},<null>,{5}}]", ToStringBuilder.reflectionToString(array)); [EOL]     array = null; [EOL]     assertReflectionArray("<null>", array); [EOL] }
@Test [EOL] public void testByteArray() { [EOL]     byte[] array = new byte[] { 1, 2, -3, 4 }; [EOL]     assertEquals(baseStr + "[{1,2,-3,4}]", new ToStringBuilder(base).append(array).toString()); [EOL]     assertEquals(baseStr + "[{1,2,-3,4}]", new ToStringBuilder(base).append((Object) array).toString()); [EOL]     array = null; [EOL]     assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); [EOL]     assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); [EOL] }
@Test [EOL] public void testReflectionByteArrayArray() { [EOL]     byte[][] array = new byte[][] { { 1, 2 }, null, { 5 } }; [EOL]     final String baseStr = this.toBaseString(array); [EOL]     assertEquals(baseStr + "[{{1,2},<null>,{5}}]", ToStringBuilder.reflectionToString(array)); [EOL]     array = null; [EOL]     assertReflectionArray("<null>", array); [EOL] }
@Test [EOL] public void testDoubleArrayArray() { [EOL]     double[][] array = new double[][] { { 1.0, 2.29686 }, null, { Double.NaN } }; [EOL]     assertEquals(baseStr + "[{{1.0,2.29686},<null>,{NaN}}]", new ToStringBuilder(base).append(array).toString()); [EOL]     assertEquals(baseStr + "[{{1.0,2.29686},<null>,{NaN}}]", new ToStringBuilder(base).append((Object) array).toString()); [EOL]     array = null; [EOL]     assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); [EOL]     assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); [EOL] }
@Test [EOL] public void testSetArraySeparator() { [EOL]     final ToStringStyle style = new ToStringStyleImpl(); [EOL]     style.setArraySeparator(null); [EOL]     assertEquals("", style.getArraySeparator()); [EOL] }
@Test [EOL] public void testSetArraySeparator() { [EOL]     final ToStringStyle style = new ToStringStyleImpl(); [EOL]     style.setArraySeparator(null); [EOL]     assertEquals("", style.getArraySeparator()); [EOL] }
@Test [EOL] public void testBinaryToHexDigit() { [EOL]     assertEquals('0', Conversion.binaryToHexDigit(new boolean[] { false, false, false, false })); [EOL]     assertEquals('1', Conversion.binaryToHexDigit(new boolean[] { true, false, false, false })); [EOL]     assertEquals('2', Conversion.binaryToHexDigit(new boolean[] { false, true, false, false })); [EOL]     assertEquals('3', Conversion.binaryToHexDigit(new boolean[] { true, true, false, false })); [EOL]     assertEquals('4', Conversion.binaryToHexDigit(new boolean[] { false, false, true, false })); [EOL]     assertEquals('5', Conversion.binaryToHexDigit(new boolean[] { true, false, true, false })); [EOL]     assertEquals('6', Conversion.binaryToHexDigit(new boolean[] { false, true, true, false })); [EOL]     assertEquals('7', Conversion.binaryToHexDigit(new boolean[] { true, true, true, false })); [EOL]     assertEquals('8', Conversion.binaryToHexDigit(new boolean[] { false, false, false, true })); [EOL]     assertEquals('9', Conversion.binaryToHexDigit(new boolean[] { true, false, false, true })); [EOL]     assertEquals('a', Conversion.binaryToHexDigit(new boolean[] { false, true, false, true })); [EOL]     assertEquals('b', Conversion.binaryToHexDigit(new boolean[] { true, true, false, true })); [EOL]     assertEquals('c', Conversion.binaryToHexDigit(new boolean[] { false, false, true, true })); [EOL]     assertEquals('d', Conversion.binaryToHexDigit(new boolean[] { true, false, true, true })); [EOL]     assertEquals('e', Conversion.binaryToHexDigit(new boolean[] { false, true, true, true })); [EOL]     assertEquals('f', Conversion.binaryToHexDigit(new boolean[] { true, true, true, true })); [EOL]     assertEquals('1', Conversion.binaryToHexDigit(new boolean[] { true })); [EOL]     assertEquals('f', Conversion.binaryToHexDigit(new boolean[] { true, true, true, true, true })); [EOL]     try { [EOL]         Conversion.binaryToHexDigit(new boolean[] {}); [EOL]         fail("Thrown " + IllegalArgumentException.class.getName() + " expected"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL] }
@Test [EOL] public void testBinaryToHexDigit() { [EOL]     assertEquals('0', Conversion.binaryToHexDigit(new boolean[] { false, false, false, false })); [EOL]     assertEquals('1', Conversion.binaryToHexDigit(new boolean[] { true, false, false, false })); [EOL]     assertEquals('2', Conversion.binaryToHexDigit(new boolean[] { false, true, false, false })); [EOL]     assertEquals('3', Conversion.binaryToHexDigit(new boolean[] { true, true, false, false })); [EOL]     assertEquals('4', Conversion.binaryToHexDigit(new boolean[] { false, false, true, false })); [EOL]     assertEquals('5', Conversion.binaryToHexDigit(new boolean[] { true, false, true, false })); [EOL]     assertEquals('6', Conversion.binaryToHexDigit(new boolean[] { false, true, true, false })); [EOL]     assertEquals('7', Conversion.binaryToHexDigit(new boolean[] { true, true, true, false })); [EOL]     assertEquals('8', Conversion.binaryToHexDigit(new boolean[] { false, false, false, true })); [EOL]     assertEquals('9', Conversion.binaryToHexDigit(new boolean[] { true, false, false, true })); [EOL]     assertEquals('a', Conversion.binaryToHexDigit(new boolean[] { false, true, false, true })); [EOL]     assertEquals('b', Conversion.binaryToHexDigit(new boolean[] { true, true, false, true })); [EOL]     assertEquals('c', Conversion.binaryToHexDigit(new boolean[] { false, false, true, true })); [EOL]     assertEquals('d', Conversion.binaryToHexDigit(new boolean[] { true, false, true, true })); [EOL]     assertEquals('e', Conversion.binaryToHexDigit(new boolean[] { false, true, true, true })); [EOL]     assertEquals('f', Conversion.binaryToHexDigit(new boolean[] { true, true, true, true })); [EOL]     assertEquals('1', Conversion.binaryToHexDigit(new boolean[] { true })); [EOL]     assertEquals('f', Conversion.binaryToHexDigit(new boolean[] { true, true, true, true, true })); [EOL]     try { [EOL]         Conversion.binaryToHexDigit(new boolean[] {}); [EOL]         fail("Thrown " + IllegalArgumentException.class.getName() + " expected"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL] }
@Test [EOL] public void testBinaryToHexDigit() { [EOL]     assertEquals('0', Conversion.binaryToHexDigit(new boolean[] { false, false, false, false })); [EOL]     assertEquals('1', Conversion.binaryToHexDigit(new boolean[] { true, false, false, false })); [EOL]     assertEquals('2', Conversion.binaryToHexDigit(new boolean[] { false, true, false, false })); [EOL]     assertEquals('3', Conversion.binaryToHexDigit(new boolean[] { true, true, false, false })); [EOL]     assertEquals('4', Conversion.binaryToHexDigit(new boolean[] { false, false, true, false })); [EOL]     assertEquals('5', Conversion.binaryToHexDigit(new boolean[] { true, false, true, false })); [EOL]     assertEquals('6', Conversion.binaryToHexDigit(new boolean[] { false, true, true, false })); [EOL]     assertEquals('7', Conversion.binaryToHexDigit(new boolean[] { true, true, true, false })); [EOL]     assertEquals('8', Conversion.binaryToHexDigit(new boolean[] { false, false, false, true })); [EOL]     assertEquals('9', Conversion.binaryToHexDigit(new boolean[] { true, false, false, true })); [EOL]     assertEquals('a', Conversion.binaryToHexDigit(new boolean[] { false, true, false, true })); [EOL]     assertEquals('b', Conversion.binaryToHexDigit(new boolean[] { true, true, false, true })); [EOL]     assertEquals('c', Conversion.binaryToHexDigit(new boolean[] { false, false, true, true })); [EOL]     assertEquals('d', Conversion.binaryToHexDigit(new boolean[] { true, false, true, true })); [EOL]     assertEquals('e', Conversion.binaryToHexDigit(new boolean[] { false, true, true, true })); [EOL]     assertEquals('f', Conversion.binaryToHexDigit(new boolean[] { true, true, true, true })); [EOL]     assertEquals('1', Conversion.binaryToHexDigit(new boolean[] { true })); [EOL]     assertEquals('f', Conversion.binaryToHexDigit(new boolean[] { true, true, true, true, true })); [EOL]     try { [EOL]         Conversion.binaryToHexDigit(new boolean[] {}); [EOL]         fail("Thrown " + IllegalArgumentException.class.getName() + " expected"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL] }
@Test [EOL] public void testBinaryToHexDigit() { [EOL]     assertEquals('0', Conversion.binaryToHexDigit(new boolean[] { false, false, false, false })); [EOL]     assertEquals('1', Conversion.binaryToHexDigit(new boolean[] { true, false, false, false })); [EOL]     assertEquals('2', Conversion.binaryToHexDigit(new boolean[] { false, true, false, false })); [EOL]     assertEquals('3', Conversion.binaryToHexDigit(new boolean[] { true, true, false, false })); [EOL]     assertEquals('4', Conversion.binaryToHexDigit(new boolean[] { false, false, true, false })); [EOL]     assertEquals('5', Conversion.binaryToHexDigit(new boolean[] { true, false, true, false })); [EOL]     assertEquals('6', Conversion.binaryToHexDigit(new boolean[] { false, true, true, false })); [EOL]     assertEquals('7', Conversion.binaryToHexDigit(new boolean[] { true, true, true, false })); [EOL]     assertEquals('8', Conversion.binaryToHexDigit(new boolean[] { false, false, false, true })); [EOL]     assertEquals('9', Conversion.binaryToHexDigit(new boolean[] { true, false, false, true })); [EOL]     assertEquals('a', Conversion.binaryToHexDigit(new boolean[] { false, true, false, true })); [EOL]     assertEquals('b', Conversion.binaryToHexDigit(new boolean[] { true, true, false, true })); [EOL]     assertEquals('c', Conversion.binaryToHexDigit(new boolean[] { false, false, true, true })); [EOL]     assertEquals('d', Conversion.binaryToHexDigit(new boolean[] { true, false, true, true })); [EOL]     assertEquals('e', Conversion.binaryToHexDigit(new boolean[] { false, true, true, true })); [EOL]     assertEquals('f', Conversion.binaryToHexDigit(new boolean[] { true, true, true, true })); [EOL]     assertEquals('1', Conversion.binaryToHexDigit(new boolean[] { true })); [EOL]     assertEquals('f', Conversion.binaryToHexDigit(new boolean[] { true, true, true, true, true })); [EOL]     try { [EOL]         Conversion.binaryToHexDigit(new boolean[] {}); [EOL]         fail("Thrown " + IllegalArgumentException.class.getName() + " expected"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL] }
@Test [EOL] public void testBinaryToHexDigit() { [EOL]     assertEquals('0', Conversion.binaryToHexDigit(new boolean[] { false, false, false, false })); [EOL]     assertEquals('1', Conversion.binaryToHexDigit(new boolean[] { true, false, false, false })); [EOL]     assertEquals('2', Conversion.binaryToHexDigit(new boolean[] { false, true, false, false })); [EOL]     assertEquals('3', Conversion.binaryToHexDigit(new boolean[] { true, true, false, false })); [EOL]     assertEquals('4', Conversion.binaryToHexDigit(new boolean[] { false, false, true, false })); [EOL]     assertEquals('5', Conversion.binaryToHexDigit(new boolean[] { true, false, true, false })); [EOL]     assertEquals('6', Conversion.binaryToHexDigit(new boolean[] { false, true, true, false })); [EOL]     assertEquals('7', Conversion.binaryToHexDigit(new boolean[] { true, true, true, false })); [EOL]     assertEquals('8', Conversion.binaryToHexDigit(new boolean[] { false, false, false, true })); [EOL]     assertEquals('9', Conversion.binaryToHexDigit(new boolean[] { true, false, false, true })); [EOL]     assertEquals('a', Conversion.binaryToHexDigit(new boolean[] { false, true, false, true })); [EOL]     assertEquals('b', Conversion.binaryToHexDigit(new boolean[] { true, true, false, true })); [EOL]     assertEquals('c', Conversion.binaryToHexDigit(new boolean[] { false, false, true, true })); [EOL]     assertEquals('d', Conversion.binaryToHexDigit(new boolean[] { true, false, true, true })); [EOL]     assertEquals('e', Conversion.binaryToHexDigit(new boolean[] { false, true, true, true })); [EOL]     assertEquals('f', Conversion.binaryToHexDigit(new boolean[] { true, true, true, true })); [EOL]     assertEquals('1', Conversion.binaryToHexDigit(new boolean[] { true })); [EOL]     assertEquals('f', Conversion.binaryToHexDigit(new boolean[] { true, true, true, true, true })); [EOL]     try { [EOL]         Conversion.binaryToHexDigit(new boolean[] {}); [EOL]         fail("Thrown " + IllegalArgumentException.class.getName() + " expected"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL] }
@Test [EOL] public void testBinaryToHexDigit() { [EOL]     assertEquals('0', Conversion.binaryToHexDigit(new boolean[] { false, false, false, false })); [EOL]     assertEquals('1', Conversion.binaryToHexDigit(new boolean[] { true, false, false, false })); [EOL]     assertEquals('2', Conversion.binaryToHexDigit(new boolean[] { false, true, false, false })); [EOL]     assertEquals('3', Conversion.binaryToHexDigit(new boolean[] { true, true, false, false })); [EOL]     assertEquals('4', Conversion.binaryToHexDigit(new boolean[] { false, false, true, false })); [EOL]     assertEquals('5', Conversion.binaryToHexDigit(new boolean[] { true, false, true, false })); [EOL]     assertEquals('6', Conversion.binaryToHexDigit(new boolean[] { false, true, true, false })); [EOL]     assertEquals('7', Conversion.binaryToHexDigit(new boolean[] { true, true, true, false })); [EOL]     assertEquals('8', Conversion.binaryToHexDigit(new boolean[] { false, false, false, true })); [EOL]     assertEquals('9', Conversion.binaryToHexDigit(new boolean[] { true, false, false, true })); [EOL]     assertEquals('a', Conversion.binaryToHexDigit(new boolean[] { false, true, false, true })); [EOL]     assertEquals('b', Conversion.binaryToHexDigit(new boolean[] { true, true, false, true })); [EOL]     assertEquals('c', Conversion.binaryToHexDigit(new boolean[] { false, false, true, true })); [EOL]     assertEquals('d', Conversion.binaryToHexDigit(new boolean[] { true, false, true, true })); [EOL]     assertEquals('e', Conversion.binaryToHexDigit(new boolean[] { false, true, true, true })); [EOL]     assertEquals('f', Conversion.binaryToHexDigit(new boolean[] { true, true, true, true })); [EOL]     assertEquals('1', Conversion.binaryToHexDigit(new boolean[] { true })); [EOL]     assertEquals('f', Conversion.binaryToHexDigit(new boolean[] { true, true, true, true, true })); [EOL]     try { [EOL]         Conversion.binaryToHexDigit(new boolean[] {}); [EOL]         fail("Thrown " + IllegalArgumentException.class.getName() + " expected"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL] }
@Test [EOL] public void testBinaryToHexDigit() { [EOL]     assertEquals('0', Conversion.binaryToHexDigit(new boolean[] { false, false, false, false })); [EOL]     assertEquals('1', Conversion.binaryToHexDigit(new boolean[] { true, false, false, false })); [EOL]     assertEquals('2', Conversion.binaryToHexDigit(new boolean[] { false, true, false, false })); [EOL]     assertEquals('3', Conversion.binaryToHexDigit(new boolean[] { true, true, false, false })); [EOL]     assertEquals('4', Conversion.binaryToHexDigit(new boolean[] { false, false, true, false })); [EOL]     assertEquals('5', Conversion.binaryToHexDigit(new boolean[] { true, false, true, false })); [EOL]     assertEquals('6', Conversion.binaryToHexDigit(new boolean[] { false, true, true, false })); [EOL]     assertEquals('7', Conversion.binaryToHexDigit(new boolean[] { true, true, true, false })); [EOL]     assertEquals('8', Conversion.binaryToHexDigit(new boolean[] { false, false, false, true })); [EOL]     assertEquals('9', Conversion.binaryToHexDigit(new boolean[] { true, false, false, true })); [EOL]     assertEquals('a', Conversion.binaryToHexDigit(new boolean[] { false, true, false, true })); [EOL]     assertEquals('b', Conversion.binaryToHexDigit(new boolean[] { true, true, false, true })); [EOL]     assertEquals('c', Conversion.binaryToHexDigit(new boolean[] { false, false, true, true })); [EOL]     assertEquals('d', Conversion.binaryToHexDigit(new boolean[] { true, false, true, true })); [EOL]     assertEquals('e', Conversion.binaryToHexDigit(new boolean[] { false, true, true, true })); [EOL]     assertEquals('f', Conversion.binaryToHexDigit(new boolean[] { true, true, true, true })); [EOL]     assertEquals('1', Conversion.binaryToHexDigit(new boolean[] { true })); [EOL]     assertEquals('f', Conversion.binaryToHexDigit(new boolean[] { true, true, true, true, true })); [EOL]     try { [EOL]         Conversion.binaryToHexDigit(new boolean[] {}); [EOL]         fail("Thrown " + IllegalArgumentException.class.getName() + " expected"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL] }
@Test [EOL] public void testBinaryToHexDigit() { [EOL]     assertEquals('0', Conversion.binaryToHexDigit(new boolean[] { false, false, false, false })); [EOL]     assertEquals('1', Conversion.binaryToHexDigit(new boolean[] { true, false, false, false })); [EOL]     assertEquals('2', Conversion.binaryToHexDigit(new boolean[] { false, true, false, false })); [EOL]     assertEquals('3', Conversion.binaryToHexDigit(new boolean[] { true, true, false, false })); [EOL]     assertEquals('4', Conversion.binaryToHexDigit(new boolean[] { false, false, true, false })); [EOL]     assertEquals('5', Conversion.binaryToHexDigit(new boolean[] { true, false, true, false })); [EOL]     assertEquals('6', Conversion.binaryToHexDigit(new boolean[] { false, true, true, false })); [EOL]     assertEquals('7', Conversion.binaryToHexDigit(new boolean[] { true, true, true, false })); [EOL]     assertEquals('8', Conversion.binaryToHexDigit(new boolean[] { false, false, false, true })); [EOL]     assertEquals('9', Conversion.binaryToHexDigit(new boolean[] { true, false, false, true })); [EOL]     assertEquals('a', Conversion.binaryToHexDigit(new boolean[] { false, true, false, true })); [EOL]     assertEquals('b', Conversion.binaryToHexDigit(new boolean[] { true, true, false, true })); [EOL]     assertEquals('c', Conversion.binaryToHexDigit(new boolean[] { false, false, true, true })); [EOL]     assertEquals('d', Conversion.binaryToHexDigit(new boolean[] { true, false, true, true })); [EOL]     assertEquals('e', Conversion.binaryToHexDigit(new boolean[] { false, true, true, true })); [EOL]     assertEquals('f', Conversion.binaryToHexDigit(new boolean[] { true, true, true, true })); [EOL]     assertEquals('1', Conversion.binaryToHexDigit(new boolean[] { true })); [EOL]     assertEquals('f', Conversion.binaryToHexDigit(new boolean[] { true, true, true, true, true })); [EOL]     try { [EOL]         Conversion.binaryToHexDigit(new boolean[] {}); [EOL]         fail("Thrown " + IllegalArgumentException.class.getName() + " expected"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL] }
@Test [EOL] public void testBinaryToHexDigit() { [EOL]     assertEquals('0', Conversion.binaryToHexDigit(new boolean[] { false, false, false, false })); [EOL]     assertEquals('1', Conversion.binaryToHexDigit(new boolean[] { true, false, false, false })); [EOL]     assertEquals('2', Conversion.binaryToHexDigit(new boolean[] { false, true, false, false })); [EOL]     assertEquals('3', Conversion.binaryToHexDigit(new boolean[] { true, true, false, false })); [EOL]     assertEquals('4', Conversion.binaryToHexDigit(new boolean[] { false, false, true, false })); [EOL]     assertEquals('5', Conversion.binaryToHexDigit(new boolean[] { true, false, true, false })); [EOL]     assertEquals('6', Conversion.binaryToHexDigit(new boolean[] { false, true, true, false })); [EOL]     assertEquals('7', Conversion.binaryToHexDigit(new boolean[] { true, true, true, false })); [EOL]     assertEquals('8', Conversion.binaryToHexDigit(new boolean[] { false, false, false, true })); [EOL]     assertEquals('9', Conversion.binaryToHexDigit(new boolean[] { true, false, false, true })); [EOL]     assertEquals('a', Conversion.binaryToHexDigit(new boolean[] { false, true, false, true })); [EOL]     assertEquals('b', Conversion.binaryToHexDigit(new boolean[] { true, true, false, true })); [EOL]     assertEquals('c', Conversion.binaryToHexDigit(new boolean[] { false, false, true, true })); [EOL]     assertEquals('d', Conversion.binaryToHexDigit(new boolean[] { true, false, true, true })); [EOL]     assertEquals('e', Conversion.binaryToHexDigit(new boolean[] { false, true, true, true })); [EOL]     assertEquals('f', Conversion.binaryToHexDigit(new boolean[] { true, true, true, true })); [EOL]     assertEquals('1', Conversion.binaryToHexDigit(new boolean[] { true })); [EOL]     assertEquals('f', Conversion.binaryToHexDigit(new boolean[] { true, true, true, true, true })); [EOL]     try { [EOL]         Conversion.binaryToHexDigit(new boolean[] {}); [EOL]         fail("Thrown " + IllegalArgumentException.class.getName() + " expected"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL] }
@Test [EOL] public void testByteToHex() { [EOL]     assertEquals("", Conversion.byteToHex((byte) 0x00, 0, "", 0, 0)); [EOL]     assertEquals("", Conversion.byteToHex((byte) 0x00, 100, "", 0, 0)); [EOL]     assertEquals("", Conversion.byteToHex((byte) 0x00, 0, "", 100, 0)); [EOL]     assertEquals("00000", Conversion.byteToHex((byte) 0xEF, 0, "00000", 0, 0)); [EOL]     assertEquals("f0000", Conversion.byteToHex((byte) 0xEF, 0, "00000", 0, 1)); [EOL]     assertEquals("fe000", Conversion.byteToHex((byte) 0xEF, 0, "00000", 0, 2)); [EOL]     assertEquals("000f0", Conversion.byteToHex((byte) 0xEF, 0, "00000", 3, 1)); [EOL]     assertEquals("000fe", Conversion.byteToHex((byte) 0xEF, 0, "00000", 3, 2)); [EOL]     assertEquals("70000", Conversion.byteToHex((byte) 0xEF, 1, "00000", 0, 1)); [EOL]     assertEquals("b0000", Conversion.byteToHex((byte) 0xEF, 2, "00000", 0, 1)); [EOL]     assertEquals("000df", Conversion.byteToHex((byte) 0xEF, 3, "00000", 3, 2)); [EOL]     assertEquals("000e0", Conversion.byteToHex((byte) 0xEF, 4, "00000", 3, 1)); [EOL]     assertEquals("fe", Conversion.byteToHex((byte) 0xEF, 0, "", 0, 2)); [EOL]     try { [EOL]         Conversion.byteToHex((byte) 0xEF, 0, "", 1, 2); [EOL]         fail("Thrown " + StringIndexOutOfBoundsException.class.getName() + " expected"); [EOL]     } catch (final StringIndexOutOfBoundsException e) { [EOL]     } [EOL] }
@Test [EOL] public void testIntArrayToLong() { [EOL]     final int[] src = new int[] { 0xCDF1F0C1, 0x0F123456, 0x78000000 }; [EOL]     assertEquals(0x0000000000000000L, Conversion.intArrayToLong(src, 0, 0L, 0, 0)); [EOL]     assertEquals(0x0000000000000000L, Conversion.intArrayToLong(src, 1, 0L, 0, 0)); [EOL]     assertEquals(0x00000000CDF1F0C1L, Conversion.intArrayToLong(src, 0, 0L, 0, 1)); [EOL]     assertEquals(0x0F123456CDF1F0C1L, Conversion.intArrayToLong(src, 0, 0L, 0, 2)); [EOL]     assertEquals(0x000000000F123456L, Conversion.intArrayToLong(src, 1, 0L, 0, 1)); [EOL]     assertEquals(0x123456789ABCDEF0L, Conversion.intArrayToLong(src, 0, 0x123456789ABCDEF0L, 0, 0)); [EOL]     assertEquals(0x1234567878000000L, Conversion.intArrayToLong(src, 2, 0x123456789ABCDEF0L, 0, 1)); [EOL] }
@Test [EOL] public void testIntArrayToLong() { [EOL]     final int[] src = new int[] { 0xCDF1F0C1, 0x0F123456, 0x78000000 }; [EOL]     assertEquals(0x0000000000000000L, Conversion.intArrayToLong(src, 0, 0L, 0, 0)); [EOL]     assertEquals(0x0000000000000000L, Conversion.intArrayToLong(src, 1, 0L, 0, 0)); [EOL]     assertEquals(0x00000000CDF1F0C1L, Conversion.intArrayToLong(src, 0, 0L, 0, 1)); [EOL]     assertEquals(0x0F123456CDF1F0C1L, Conversion.intArrayToLong(src, 0, 0L, 0, 2)); [EOL]     assertEquals(0x000000000F123456L, Conversion.intArrayToLong(src, 1, 0L, 0, 1)); [EOL]     assertEquals(0x123456789ABCDEF0L, Conversion.intArrayToLong(src, 0, 0x123456789ABCDEF0L, 0, 0)); [EOL]     assertEquals(0x1234567878000000L, Conversion.intArrayToLong(src, 2, 0x123456789ABCDEF0L, 0, 1)); [EOL] }
@Test [EOL] public void testIntArrayToLong() { [EOL]     final int[] src = new int[] { 0xCDF1F0C1, 0x0F123456, 0x78000000 }; [EOL]     assertEquals(0x0000000000000000L, Conversion.intArrayToLong(src, 0, 0L, 0, 0)); [EOL]     assertEquals(0x0000000000000000L, Conversion.intArrayToLong(src, 1, 0L, 0, 0)); [EOL]     assertEquals(0x00000000CDF1F0C1L, Conversion.intArrayToLong(src, 0, 0L, 0, 1)); [EOL]     assertEquals(0x0F123456CDF1F0C1L, Conversion.intArrayToLong(src, 0, 0L, 0, 2)); [EOL]     assertEquals(0x000000000F123456L, Conversion.intArrayToLong(src, 1, 0L, 0, 1)); [EOL]     assertEquals(0x123456789ABCDEF0L, Conversion.intArrayToLong(src, 0, 0x123456789ABCDEF0L, 0, 0)); [EOL]     assertEquals(0x1234567878000000L, Conversion.intArrayToLong(src, 2, 0x123456789ABCDEF0L, 0, 1)); [EOL] }
@Test [EOL] public void testByteArrayToLong() { [EOL]     final byte[] src = new byte[] { (byte) 0xCD, (byte) 0xF1, (byte) 0xF0, (byte) 0xC1, (byte) 0x0F, (byte) 0x12, (byte) 0x34, (byte) 0x56, (byte) 0x78 }; [EOL]     assertEquals(0x0000000000000000L, Conversion.byteArrayToLong(src, 0, 0L, 0, 0)); [EOL]     assertEquals(0x00000000000000CDL, Conversion.byteArrayToLong(src, 0, 0L, 0, 1)); [EOL]     assertEquals(0x00000000C1F0F1CDL, Conversion.byteArrayToLong(src, 0, 0L, 0, 4)); [EOL]     assertEquals(0x000000000FC1F0F1L, Conversion.byteArrayToLong(src, 1, 0L, 0, 4)); [EOL]     assertEquals(0x123456789ABCDEF0L, Conversion.byteArrayToLong(src, 0, 0x123456789ABCDEF0L, 0, 0)); [EOL]     assertEquals(0x12345678CDBCDEF0L, Conversion.byteArrayToLong(src, 0, 0x123456789ABCDEF0L, 24, 1)); [EOL]     assertEquals(0x123456789A7856F0L, Conversion.byteArrayToLong(src, 7, 0x123456789ABCDEF0L, 8, 2)); [EOL] }
@Test [EOL] public void testByteArrayToLong() { [EOL]     final byte[] src = new byte[] { (byte) 0xCD, (byte) 0xF1, (byte) 0xF0, (byte) 0xC1, (byte) 0x0F, (byte) 0x12, (byte) 0x34, (byte) 0x56, (byte) 0x78 }; [EOL]     assertEquals(0x0000000000000000L, Conversion.byteArrayToLong(src, 0, 0L, 0, 0)); [EOL]     assertEquals(0x00000000000000CDL, Conversion.byteArrayToLong(src, 0, 0L, 0, 1)); [EOL]     assertEquals(0x00000000C1F0F1CDL, Conversion.byteArrayToLong(src, 0, 0L, 0, 4)); [EOL]     assertEquals(0x000000000FC1F0F1L, Conversion.byteArrayToLong(src, 1, 0L, 0, 4)); [EOL]     assertEquals(0x123456789ABCDEF0L, Conversion.byteArrayToLong(src, 0, 0x123456789ABCDEF0L, 0, 0)); [EOL]     assertEquals(0x12345678CDBCDEF0L, Conversion.byteArrayToLong(src, 0, 0x123456789ABCDEF0L, 24, 1)); [EOL]     assertEquals(0x123456789A7856F0L, Conversion.byteArrayToLong(src, 7, 0x123456789ABCDEF0L, 8, 2)); [EOL] }
@Test [EOL] public void testByteArrayToInt() { [EOL]     final byte[] src = new byte[] { (byte) 0xCD, (byte) 0xF1, (byte) 0xF0, (byte) 0xC1, (byte) 0x0F, (byte) 0x12, (byte) 0x34, (byte) 0x56, (byte) 0x78 }; [EOL]     assertEquals(0x00000000, Conversion.byteArrayToInt(src, 0, 0, 0, 0)); [EOL]     assertEquals(0x000000CD, Conversion.byteArrayToInt(src, 0, 0, 0, 1)); [EOL]     assertEquals(0xC1F0F1CD, Conversion.byteArrayToInt(src, 0, 0, 0, 4)); [EOL]     assertEquals(0x0FC1F0F1, Conversion.byteArrayToInt(src, 1, 0, 0, 4)); [EOL]     assertEquals(0x12345678, Conversion.byteArrayToInt(src, 0, 0x12345678, 0, 0)); [EOL]     assertEquals(0xCD345678, Conversion.byteArrayToInt(src, 0, 0x12345678, 24, 1)); [EOL] }
@Test [EOL] public void testByteArrayToInt() { [EOL]     final byte[] src = new byte[] { (byte) 0xCD, (byte) 0xF1, (byte) 0xF0, (byte) 0xC1, (byte) 0x0F, (byte) 0x12, (byte) 0x34, (byte) 0x56, (byte) 0x78 }; [EOL]     assertEquals(0x00000000, Conversion.byteArrayToInt(src, 0, 0, 0, 0)); [EOL]     assertEquals(0x000000CD, Conversion.byteArrayToInt(src, 0, 0, 0, 1)); [EOL]     assertEquals(0xC1F0F1CD, Conversion.byteArrayToInt(src, 0, 0, 0, 4)); [EOL]     assertEquals(0x0FC1F0F1, Conversion.byteArrayToInt(src, 1, 0, 0, 4)); [EOL]     assertEquals(0x12345678, Conversion.byteArrayToInt(src, 0, 0x12345678, 0, 0)); [EOL]     assertEquals(0xCD345678, Conversion.byteArrayToInt(src, 0, 0x12345678, 24, 1)); [EOL] }
@Test [EOL] public void testByteArrayToInt() { [EOL]     final byte[] src = new byte[] { (byte) 0xCD, (byte) 0xF1, (byte) 0xF0, (byte) 0xC1, (byte) 0x0F, (byte) 0x12, (byte) 0x34, (byte) 0x56, (byte) 0x78 }; [EOL]     assertEquals(0x00000000, Conversion.byteArrayToInt(src, 0, 0, 0, 0)); [EOL]     assertEquals(0x000000CD, Conversion.byteArrayToInt(src, 0, 0, 0, 1)); [EOL]     assertEquals(0xC1F0F1CD, Conversion.byteArrayToInt(src, 0, 0, 0, 4)); [EOL]     assertEquals(0x0FC1F0F1, Conversion.byteArrayToInt(src, 1, 0, 0, 4)); [EOL]     assertEquals(0x12345678, Conversion.byteArrayToInt(src, 0, 0x12345678, 0, 0)); [EOL]     assertEquals(0xCD345678, Conversion.byteArrayToInt(src, 0, 0x12345678, 24, 1)); [EOL] }
@Test [EOL] public void testHexToShort() { [EOL]     final String src = "CDF1F0C10F12345678"; [EOL]     assertEquals((short) 0x0000, Conversion.hexToShort(src, 0, (short) 0, 0, 0)); [EOL]     assertEquals((short) 0x000C, Conversion.hexToShort(src, 0, (short) 0, 0, 1)); [EOL]     assertEquals((short) 0x1FDC, Conversion.hexToShort(src, 0, (short) 0, 0, 4)); [EOL]     assertEquals((short) 0xF1FD, Conversion.hexToShort(src, 1, (short) 0, 0, 4)); [EOL]     assertEquals((short) 0x1234, Conversion.hexToShort(src, 0, (short) 0x1234, 0, 0)); [EOL]     assertEquals((short) 0x8764, Conversion.hexToShort(src, 15, (short) 0x1234, 4, 3)); [EOL] }
@Test [EOL] public void testLongToIntArray() { [EOL]     assertArrayEquals(new int[] {}, Conversion.longToIntArray(0x0000000000000000L, 0, new int[] {}, 0, 0)); [EOL]     assertArrayEquals(new int[] {}, Conversion.longToIntArray(0x0000000000000000L, 100, new int[] {}, 0, 0)); [EOL]     assertArrayEquals(new int[] {}, Conversion.longToIntArray(0x0000000000000000L, 0, new int[] {}, 100, 0)); [EOL]     assertArrayEquals(new int[] { 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF }, Conversion.longToIntArray(0x1234567890ABCDEFL, 0, new int[] { -1, -1, -1, -1 }, 0, 0)); [EOL]     assertArrayEquals(new int[] { 0x90ABCDEF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF }, Conversion.longToIntArray(0x1234567890ABCDEFL, 0, new int[] { -1, -1, -1, -1 }, 0, 1)); [EOL]     assertArrayEquals(new int[] { 0x90ABCDEF, 0x12345678, 0xFFFFFFFF, 0xFFFFFFFF }, Conversion.longToIntArray(0x1234567890ABCDEFL, 0, new int[] { -1, -1, -1, -1 }, 0, 2)); [EOL]     assertArrayEquals(new int[] { 0xFFFFFFFF, 0xFFFFFFFF, 0x90ABCDEF, 0x12345678 }, Conversion.longToIntArray(0x1234567890ABCDEFL, 0, new int[] { -1, -1, -1, -1 }, 2, 2)); [EOL]     assertArrayEquals(new int[] { 0xFFFFFFFF, 0xFFFFFFFF, 0x90ABCDEF, 0xFFFFFFFF }, Conversion.longToIntArray(0x1234567890ABCDEFL, 0, new int[] { -1, -1, -1, -1 }, 2, 1)); [EOL]     assertArrayEquals(new int[] { 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0x90ABCDEF }, Conversion.longToIntArray(0x1234567890ABCDEFL, 0, new int[] { -1, -1, -1, -1 }, 3, 1)); [EOL]     assertArrayEquals(new int[] { 0xFFFFFFFF, 0xFFFFFFFF, 0x4855E6F7, 0xFFFFFFFF }, Conversion.longToIntArray(0x1234567890ABCDEFL, 1, new int[] { -1, -1, -1, -1 }, 2, 1)); [EOL]     assertArrayEquals(new int[] { 0xFFFFFFFF, 0xFFFFFFFF, 0x242AF37B, 0xFFFFFFFF }, Conversion.longToIntArray(0x1234567890ABCDEFL, 2, new int[] { -1, -1, -1, -1 }, 2, 1)); [EOL]     assertArrayEquals(new int[] { 0xFFFFFFFF, 0xFFFFFFFF, 0x121579BD, 0xFFFFFFFF }, Conversion.longToIntArray(0x1234567890ABCDEFL, 3, new int[] { -1, -1, -1, -1 }, 2, 1)); [EOL]     assertArrayEquals(new int[] { 0xFFFFFFFF, 0xFFFFFFFF, 0x890ABCDE, 0xFFFFFFFF }, Conversion.longToIntArray(0x1234567890ABCDEFL, 4, new int[] { -1, -1, -1, -1 }, 2, 1)); [EOL]     assertArrayEquals(new int[] { 0x091A2B3C }, Conversion.longToIntArray(0x1234567890ABCDEFL, 33, new int[] { 0 }, 0, 1)); [EOL] }
@Test [EOL] public void testLongToIntArray() { [EOL]     assertArrayEquals(new int[] {}, Conversion.longToIntArray(0x0000000000000000L, 0, new int[] {}, 0, 0)); [EOL]     assertArrayEquals(new int[] {}, Conversion.longToIntArray(0x0000000000000000L, 100, new int[] {}, 0, 0)); [EOL]     assertArrayEquals(new int[] {}, Conversion.longToIntArray(0x0000000000000000L, 0, new int[] {}, 100, 0)); [EOL]     assertArrayEquals(new int[] { 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF }, Conversion.longToIntArray(0x1234567890ABCDEFL, 0, new int[] { -1, -1, -1, -1 }, 0, 0)); [EOL]     assertArrayEquals(new int[] { 0x90ABCDEF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF }, Conversion.longToIntArray(0x1234567890ABCDEFL, 0, new int[] { -1, -1, -1, -1 }, 0, 1)); [EOL]     assertArrayEquals(new int[] { 0x90ABCDEF, 0x12345678, 0xFFFFFFFF, 0xFFFFFFFF }, Conversion.longToIntArray(0x1234567890ABCDEFL, 0, new int[] { -1, -1, -1, -1 }, 0, 2)); [EOL]     assertArrayEquals(new int[] { 0xFFFFFFFF, 0xFFFFFFFF, 0x90ABCDEF, 0x12345678 }, Conversion.longToIntArray(0x1234567890ABCDEFL, 0, new int[] { -1, -1, -1, -1 }, 2, 2)); [EOL]     assertArrayEquals(new int[] { 0xFFFFFFFF, 0xFFFFFFFF, 0x90ABCDEF, 0xFFFFFFFF }, Conversion.longToIntArray(0x1234567890ABCDEFL, 0, new int[] { -1, -1, -1, -1 }, 2, 1)); [EOL]     assertArrayEquals(new int[] { 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0x90ABCDEF }, Conversion.longToIntArray(0x1234567890ABCDEFL, 0, new int[] { -1, -1, -1, -1 }, 3, 1)); [EOL]     assertArrayEquals(new int[] { 0xFFFFFFFF, 0xFFFFFFFF, 0x4855E6F7, 0xFFFFFFFF }, Conversion.longToIntArray(0x1234567890ABCDEFL, 1, new int[] { -1, -1, -1, -1 }, 2, 1)); [EOL]     assertArrayEquals(new int[] { 0xFFFFFFFF, 0xFFFFFFFF, 0x242AF37B, 0xFFFFFFFF }, Conversion.longToIntArray(0x1234567890ABCDEFL, 2, new int[] { -1, -1, -1, -1 }, 2, 1)); [EOL]     assertArrayEquals(new int[] { 0xFFFFFFFF, 0xFFFFFFFF, 0x121579BD, 0xFFFFFFFF }, Conversion.longToIntArray(0x1234567890ABCDEFL, 3, new int[] { -1, -1, -1, -1 }, 2, 1)); [EOL]     assertArrayEquals(new int[] { 0xFFFFFFFF, 0xFFFFFFFF, 0x890ABCDE, 0xFFFFFFFF }, Conversion.longToIntArray(0x1234567890ABCDEFL, 4, new int[] { -1, -1, -1, -1 }, 2, 1)); [EOL]     assertArrayEquals(new int[] { 0x091A2B3C }, Conversion.longToIntArray(0x1234567890ABCDEFL, 33, new int[] { 0 }, 0, 1)); [EOL] }
@Test [EOL] public void testLongToShortArray() { [EOL]     assertArrayEquals(new short[] {}, Conversion.longToShortArray(0x0000000000000000L, 0, new short[] {}, 0, 0)); [EOL]     assertArrayEquals(new short[] {}, Conversion.longToShortArray(0x0000000000000000L, 100, new short[] {}, 0, 0)); [EOL]     assertArrayEquals(new short[] {}, Conversion.longToShortArray(0x0000000000000000L, 0, new short[] {}, 100, 0)); [EOL]     assertArrayEquals(new short[] { (short) 0xFFFF, (short) 0xFFFF, (short) 0xFFFF, (short) 0xFFFF }, Conversion.longToShortArray(0x1234567890ABCDEFL, 0, new short[] { -1, -1, -1, -1 }, 0, 0)); [EOL]     assertArrayEquals(new short[] { (short) 0xCDEF, (short) 0xFFFF, (short) 0xFFFF, (short) 0xFFFF }, Conversion.longToShortArray(0x1234567890ABCDEFL, 0, new short[] { -1, -1, -1, -1 }, 0, 1)); [EOL]     assertArrayEquals(new short[] { (short) 0xCDEF, (short) 0x90AB, (short) 0xFFFF, (short) 0xFFFF }, Conversion.longToShortArray(0x1234567890ABCDEFL, 0, new short[] { -1, -1, -1, -1 }, 0, 2)); [EOL]     assertArrayEquals(new short[] { (short) 0xCDEF, (short) 0x90AB, (short) 0x5678, (short) 0xFFFF }, Conversion.longToShortArray(0x1234567890ABCDEFL, 0, new short[] { -1, -1, -1, -1 }, 0, 3)); [EOL]     assertArrayEquals(new short[] { (short) 0xCDEF, (short) 0x90AB, (short) 0x5678, (short) 0x1234 }, Conversion.longToShortArray(0x1234567890ABCDEFL, 0, new short[] { -1, -1, -1, -1 }, 0, 4)); [EOL]     assertArrayEquals(new short[] { (short) 0xFFFF, (short) 0xCDEF, (short) 0x90AB, (short) 0x5678 }, Conversion.longToShortArray(0x1234567890ABCDEFL, 0, new short[] { -1, -1, -1, -1 }, 1, 3)); [EOL]     assertArrayEquals(new short[] { (short) 0xFFFF, (short) 0xFFFF, (short) 0xCDEF, (short) 0x90AB }, Conversion.longToShortArray(0x1234567890ABCDEFL, 0, new short[] { -1, -1, -1, -1 }, 2, 2)); [EOL]     assertArrayEquals(new short[] { (short) 0xFFFF, (short) 0xFFFF, (short) 0xCDEF, (short) 0xFFFF }, Conversion.longToShortArray(0x1234567890ABCDEFL, 0, new short[] { -1, -1, -1, -1 }, 2, 1)); [EOL]     assertArrayEquals(new short[] { (short) 0xFFFF, (short) 0xFFFF, (short) 0xFFFF, (short) 0xCDEF }, Conversion.longToShortArray(0x1234567890ABCDEFL, 0, new short[] { -1, -1, -1, -1 }, 3, 1)); [EOL]     assertArrayEquals(new short[] { (short) 0xFFFF, (short) 0xFFFF, (short) 0xE6F7, (short) 0xFFFF }, Conversion.longToShortArray(0x1234567890ABCDEFL, 1, new short[] { -1, -1, -1, -1 }, 2, 1)); [EOL]     assertArrayEquals(new short[] { (short) 0xFFFF, (short) 0xFFFF, (short) 0xF37B, (short) 0xFFFF }, Conversion.longToShortArray(0x1234567890ABCDEFL, 2, new short[] { -1, -1, -1, -1 }, 2, 1)); [EOL]     assertArrayEquals(new short[] { (short) 0xFFFF, (short) 0xFFFF, (short) 0x79BD, (short) 0xFFFF }, Conversion.longToShortArray(0x1234567890ABCDEFL, 3, new short[] { -1, -1, -1, -1 }, 2, 1)); [EOL]     assertArrayEquals(new short[] { (short) 0xFFFF, (short) 0xFFFF, (short) 0xBCDE, (short) 0xFFFF }, Conversion.longToShortArray(0x1234567890ABCDEFL, 4, new short[] { -1, -1, -1, -1 }, 2, 1)); [EOL]     assertArrayEquals(new short[] { (short) 0xE6F7, (short) 0x4855, (short) 0x2B3C, (short) 0x091A }, Conversion.longToShortArray(0x1234567890ABCDEFL, 1, new short[] { -1, -1, -1, -1 }, 0, 4)); [EOL]     assertArrayEquals(new short[] { (short) 0x2B3C }, Conversion.longToShortArray(0x1234567890ABCDEFL, 33, new short[] { 0 }, 0, 1)); [EOL] }
@Test [EOL] public void testLongToShortArray() { [EOL]     assertArrayEquals(new short[] {}, Conversion.longToShortArray(0x0000000000000000L, 0, new short[] {}, 0, 0)); [EOL]     assertArrayEquals(new short[] {}, Conversion.longToShortArray(0x0000000000000000L, 100, new short[] {}, 0, 0)); [EOL]     assertArrayEquals(new short[] {}, Conversion.longToShortArray(0x0000000000000000L, 0, new short[] {}, 100, 0)); [EOL]     assertArrayEquals(new short[] { (short) 0xFFFF, (short) 0xFFFF, (short) 0xFFFF, (short) 0xFFFF }, Conversion.longToShortArray(0x1234567890ABCDEFL, 0, new short[] { -1, -1, -1, -1 }, 0, 0)); [EOL]     assertArrayEquals(new short[] { (short) 0xCDEF, (short) 0xFFFF, (short) 0xFFFF, (short) 0xFFFF }, Conversion.longToShortArray(0x1234567890ABCDEFL, 0, new short[] { -1, -1, -1, -1 }, 0, 1)); [EOL]     assertArrayEquals(new short[] { (short) 0xCDEF, (short) 0x90AB, (short) 0xFFFF, (short) 0xFFFF }, Conversion.longToShortArray(0x1234567890ABCDEFL, 0, new short[] { -1, -1, -1, -1 }, 0, 2)); [EOL]     assertArrayEquals(new short[] { (short) 0xCDEF, (short) 0x90AB, (short) 0x5678, (short) 0xFFFF }, Conversion.longToShortArray(0x1234567890ABCDEFL, 0, new short[] { -1, -1, -1, -1 }, 0, 3)); [EOL]     assertArrayEquals(new short[] { (short) 0xCDEF, (short) 0x90AB, (short) 0x5678, (short) 0x1234 }, Conversion.longToShortArray(0x1234567890ABCDEFL, 0, new short[] { -1, -1, -1, -1 }, 0, 4)); [EOL]     assertArrayEquals(new short[] { (short) 0xFFFF, (short) 0xCDEF, (short) 0x90AB, (short) 0x5678 }, Conversion.longToShortArray(0x1234567890ABCDEFL, 0, new short[] { -1, -1, -1, -1 }, 1, 3)); [EOL]     assertArrayEquals(new short[] { (short) 0xFFFF, (short) 0xFFFF, (short) 0xCDEF, (short) 0x90AB }, Conversion.longToShortArray(0x1234567890ABCDEFL, 0, new short[] { -1, -1, -1, -1 }, 2, 2)); [EOL]     assertArrayEquals(new short[] { (short) 0xFFFF, (short) 0xFFFF, (short) 0xCDEF, (short) 0xFFFF }, Conversion.longToShortArray(0x1234567890ABCDEFL, 0, new short[] { -1, -1, -1, -1 }, 2, 1)); [EOL]     assertArrayEquals(new short[] { (short) 0xFFFF, (short) 0xFFFF, (short) 0xFFFF, (short) 0xCDEF }, Conversion.longToShortArray(0x1234567890ABCDEFL, 0, new short[] { -1, -1, -1, -1 }, 3, 1)); [EOL]     assertArrayEquals(new short[] { (short) 0xFFFF, (short) 0xFFFF, (short) 0xE6F7, (short) 0xFFFF }, Conversion.longToShortArray(0x1234567890ABCDEFL, 1, new short[] { -1, -1, -1, -1 }, 2, 1)); [EOL]     assertArrayEquals(new short[] { (short) 0xFFFF, (short) 0xFFFF, (short) 0xF37B, (short) 0xFFFF }, Conversion.longToShortArray(0x1234567890ABCDEFL, 2, new short[] { -1, -1, -1, -1 }, 2, 1)); [EOL]     assertArrayEquals(new short[] { (short) 0xFFFF, (short) 0xFFFF, (short) 0x79BD, (short) 0xFFFF }, Conversion.longToShortArray(0x1234567890ABCDEFL, 3, new short[] { -1, -1, -1, -1 }, 2, 1)); [EOL]     assertArrayEquals(new short[] { (short) 0xFFFF, (short) 0xFFFF, (short) 0xBCDE, (short) 0xFFFF }, Conversion.longToShortArray(0x1234567890ABCDEFL, 4, new short[] { -1, -1, -1, -1 }, 2, 1)); [EOL]     assertArrayEquals(new short[] { (short) 0xE6F7, (short) 0x4855, (short) 0x2B3C, (short) 0x091A }, Conversion.longToShortArray(0x1234567890ABCDEFL, 1, new short[] { -1, -1, -1, -1 }, 0, 4)); [EOL]     assertArrayEquals(new short[] { (short) 0x2B3C }, Conversion.longToShortArray(0x1234567890ABCDEFL, 33, new short[] { 0 }, 0, 1)); [EOL] }
@Test [EOL] public void testLongToShortArray() { [EOL]     assertArrayEquals(new short[] {}, Conversion.longToShortArray(0x0000000000000000L, 0, new short[] {}, 0, 0)); [EOL]     assertArrayEquals(new short[] {}, Conversion.longToShortArray(0x0000000000000000L, 100, new short[] {}, 0, 0)); [EOL]     assertArrayEquals(new short[] {}, Conversion.longToShortArray(0x0000000000000000L, 0, new short[] {}, 100, 0)); [EOL]     assertArrayEquals(new short[] { (short) 0xFFFF, (short) 0xFFFF, (short) 0xFFFF, (short) 0xFFFF }, Conversion.longToShortArray(0x1234567890ABCDEFL, 0, new short[] { -1, -1, -1, -1 }, 0, 0)); [EOL]     assertArrayEquals(new short[] { (short) 0xCDEF, (short) 0xFFFF, (short) 0xFFFF, (short) 0xFFFF }, Conversion.longToShortArray(0x1234567890ABCDEFL, 0, new short[] { -1, -1, -1, -1 }, 0, 1)); [EOL]     assertArrayEquals(new short[] { (short) 0xCDEF, (short) 0x90AB, (short) 0xFFFF, (short) 0xFFFF }, Conversion.longToShortArray(0x1234567890ABCDEFL, 0, new short[] { -1, -1, -1, -1 }, 0, 2)); [EOL]     assertArrayEquals(new short[] { (short) 0xCDEF, (short) 0x90AB, (short) 0x5678, (short) 0xFFFF }, Conversion.longToShortArray(0x1234567890ABCDEFL, 0, new short[] { -1, -1, -1, -1 }, 0, 3)); [EOL]     assertArrayEquals(new short[] { (short) 0xCDEF, (short) 0x90AB, (short) 0x5678, (short) 0x1234 }, Conversion.longToShortArray(0x1234567890ABCDEFL, 0, new short[] { -1, -1, -1, -1 }, 0, 4)); [EOL]     assertArrayEquals(new short[] { (short) 0xFFFF, (short) 0xCDEF, (short) 0x90AB, (short) 0x5678 }, Conversion.longToShortArray(0x1234567890ABCDEFL, 0, new short[] { -1, -1, -1, -1 }, 1, 3)); [EOL]     assertArrayEquals(new short[] { (short) 0xFFFF, (short) 0xFFFF, (short) 0xCDEF, (short) 0x90AB }, Conversion.longToShortArray(0x1234567890ABCDEFL, 0, new short[] { -1, -1, -1, -1 }, 2, 2)); [EOL]     assertArrayEquals(new short[] { (short) 0xFFFF, (short) 0xFFFF, (short) 0xCDEF, (short) 0xFFFF }, Conversion.longToShortArray(0x1234567890ABCDEFL, 0, new short[] { -1, -1, -1, -1 }, 2, 1)); [EOL]     assertArrayEquals(new short[] { (short) 0xFFFF, (short) 0xFFFF, (short) 0xFFFF, (short) 0xCDEF }, Conversion.longToShortArray(0x1234567890ABCDEFL, 0, new short[] { -1, -1, -1, -1 }, 3, 1)); [EOL]     assertArrayEquals(new short[] { (short) 0xFFFF, (short) 0xFFFF, (short) 0xE6F7, (short) 0xFFFF }, Conversion.longToShortArray(0x1234567890ABCDEFL, 1, new short[] { -1, -1, -1, -1 }, 2, 1)); [EOL]     assertArrayEquals(new short[] { (short) 0xFFFF, (short) 0xFFFF, (short) 0xF37B, (short) 0xFFFF }, Conversion.longToShortArray(0x1234567890ABCDEFL, 2, new short[] { -1, -1, -1, -1 }, 2, 1)); [EOL]     assertArrayEquals(new short[] { (short) 0xFFFF, (short) 0xFFFF, (short) 0x79BD, (short) 0xFFFF }, Conversion.longToShortArray(0x1234567890ABCDEFL, 3, new short[] { -1, -1, -1, -1 }, 2, 1)); [EOL]     assertArrayEquals(new short[] { (short) 0xFFFF, (short) 0xFFFF, (short) 0xBCDE, (short) 0xFFFF }, Conversion.longToShortArray(0x1234567890ABCDEFL, 4, new short[] { -1, -1, -1, -1 }, 2, 1)); [EOL]     assertArrayEquals(new short[] { (short) 0xE6F7, (short) 0x4855, (short) 0x2B3C, (short) 0x091A }, Conversion.longToShortArray(0x1234567890ABCDEFL, 1, new short[] { -1, -1, -1, -1 }, 0, 4)); [EOL]     assertArrayEquals(new short[] { (short) 0x2B3C }, Conversion.longToShortArray(0x1234567890ABCDEFL, 33, new short[] { 0 }, 0, 1)); [EOL] }
@Test [EOL] public void testIntToByteArray() { [EOL]     assertArrayEquals(new byte[] {}, Conversion.intToByteArray(0x00000000, 0, new byte[] {}, 0, 0)); [EOL]     assertArrayEquals(new byte[] {}, Conversion.intToByteArray(0x00000000, 100, new byte[] {}, 0, 0)); [EOL]     assertArrayEquals(new byte[] {}, Conversion.intToByteArray(0x00000000, 0, new byte[] {}, 100, 0)); [EOL]     assertArrayEquals(new byte[] { (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF }, Conversion.intToByteArray(0x90ABCDEF, 0, new byte[] { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 }, 0, 0)); [EOL]     assertArrayEquals(new byte[] { (byte) 0xEF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF }, Conversion.intToByteArray(0x90ABCDEF, 0, new byte[] { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 }, 0, 1)); [EOL]     assertArrayEquals(new byte[] { (byte) 0xEF, (byte) 0xCD, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF }, Conversion.intToByteArray(0x90ABCDEF, 0, new byte[] { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 }, 0, 2)); [EOL]     assertArrayEquals(new byte[] { (byte) 0xEF, (byte) 0xCD, (byte) 0xAB, (byte) 0x90, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF }, Conversion.intToByteArray(0x90ABCDEF, 0, new byte[] { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 }, 0, 4)); [EOL]     assertArrayEquals(new byte[] { (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xEF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF }, Conversion.intToByteArray(0x90ABCDEF, 0, new byte[] { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 }, 3, 1)); [EOL]     assertArrayEquals(new byte[] { (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xEF, (byte) 0xCD, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF }, Conversion.intToByteArray(0x90ABCDEF, 0, new byte[] { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 }, 3, 2)); [EOL]     assertArrayEquals(new byte[] { (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xEF, (byte) 0xCD, (byte) 0xAB, (byte) 0x90, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF }, Conversion.intToByteArray(0x90ABCDEF, 0, new byte[] { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 }, 3, 4)); [EOL]     assertArrayEquals(new byte[] { (byte) 0xF7, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF }, Conversion.intToByteArray(0x90ABCDEF, 1, new byte[] { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 }, 0, 1)); [EOL]     assertArrayEquals(new byte[] { (byte) 0x7B, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF }, Conversion.intToByteArray(0x90ABCDEF, 2, new byte[] { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 }, 0, 1)); [EOL]     assertArrayEquals(new byte[] { (byte) 0xFF, (byte) 0x00, (byte) 0xFF, (byte) 0x6F, (byte) 0x5E, (byte) 0x85, (byte) 0xFC, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF }, Conversion.intToByteArray(0x90ABCDEF, 5, new byte[] { -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1 }, 3, 4)); [EOL]     assertArrayEquals(new byte[] { (byte) 0xFF, (byte) 0x00, (byte) 0xFF, (byte) 0x5E, (byte) 0x85, (byte) 0xFC, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF }, Conversion.intToByteArray(0x90ABCDEF, 13, new byte[] { -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1 }, 3, 3)); [EOL] }
@Test [EOL] public void testIntToByteArray() { [EOL]     assertArrayEquals(new byte[] {}, Conversion.intToByteArray(0x00000000, 0, new byte[] {}, 0, 0)); [EOL]     assertArrayEquals(new byte[] {}, Conversion.intToByteArray(0x00000000, 100, new byte[] {}, 0, 0)); [EOL]     assertArrayEquals(new byte[] {}, Conversion.intToByteArray(0x00000000, 0, new byte[] {}, 100, 0)); [EOL]     assertArrayEquals(new byte[] { (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF }, Conversion.intToByteArray(0x90ABCDEF, 0, new byte[] { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 }, 0, 0)); [EOL]     assertArrayEquals(new byte[] { (byte) 0xEF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF }, Conversion.intToByteArray(0x90ABCDEF, 0, new byte[] { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 }, 0, 1)); [EOL]     assertArrayEquals(new byte[] { (byte) 0xEF, (byte) 0xCD, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF }, Conversion.intToByteArray(0x90ABCDEF, 0, new byte[] { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 }, 0, 2)); [EOL]     assertArrayEquals(new byte[] { (byte) 0xEF, (byte) 0xCD, (byte) 0xAB, (byte) 0x90, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF }, Conversion.intToByteArray(0x90ABCDEF, 0, new byte[] { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 }, 0, 4)); [EOL]     assertArrayEquals(new byte[] { (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xEF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF }, Conversion.intToByteArray(0x90ABCDEF, 0, new byte[] { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 }, 3, 1)); [EOL]     assertArrayEquals(new byte[] { (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xEF, (byte) 0xCD, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF }, Conversion.intToByteArray(0x90ABCDEF, 0, new byte[] { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 }, 3, 2)); [EOL]     assertArrayEquals(new byte[] { (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xEF, (byte) 0xCD, (byte) 0xAB, (byte) 0x90, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF }, Conversion.intToByteArray(0x90ABCDEF, 0, new byte[] { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 }, 3, 4)); [EOL]     assertArrayEquals(new byte[] { (byte) 0xF7, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF }, Conversion.intToByteArray(0x90ABCDEF, 1, new byte[] { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 }, 0, 1)); [EOL]     assertArrayEquals(new byte[] { (byte) 0x7B, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF }, Conversion.intToByteArray(0x90ABCDEF, 2, new byte[] { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 }, 0, 1)); [EOL]     assertArrayEquals(new byte[] { (byte) 0xFF, (byte) 0x00, (byte) 0xFF, (byte) 0x6F, (byte) 0x5E, (byte) 0x85, (byte) 0xFC, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF }, Conversion.intToByteArray(0x90ABCDEF, 5, new byte[] { -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1 }, 3, 4)); [EOL]     assertArrayEquals(new byte[] { (byte) 0xFF, (byte) 0x00, (byte) 0xFF, (byte) 0x5E, (byte) 0x85, (byte) 0xFC, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF }, Conversion.intToByteArray(0x90ABCDEF, 13, new byte[] { -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1 }, 3, 3)); [EOL] }
@Test [EOL] public void testIntToByteArray() { [EOL]     assertArrayEquals(new byte[] {}, Conversion.intToByteArray(0x00000000, 0, new byte[] {}, 0, 0)); [EOL]     assertArrayEquals(new byte[] {}, Conversion.intToByteArray(0x00000000, 100, new byte[] {}, 0, 0)); [EOL]     assertArrayEquals(new byte[] {}, Conversion.intToByteArray(0x00000000, 0, new byte[] {}, 100, 0)); [EOL]     assertArrayEquals(new byte[] { (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF }, Conversion.intToByteArray(0x90ABCDEF, 0, new byte[] { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 }, 0, 0)); [EOL]     assertArrayEquals(new byte[] { (byte) 0xEF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF }, Conversion.intToByteArray(0x90ABCDEF, 0, new byte[] { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 }, 0, 1)); [EOL]     assertArrayEquals(new byte[] { (byte) 0xEF, (byte) 0xCD, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF }, Conversion.intToByteArray(0x90ABCDEF, 0, new byte[] { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 }, 0, 2)); [EOL]     assertArrayEquals(new byte[] { (byte) 0xEF, (byte) 0xCD, (byte) 0xAB, (byte) 0x90, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF }, Conversion.intToByteArray(0x90ABCDEF, 0, new byte[] { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 }, 0, 4)); [EOL]     assertArrayEquals(new byte[] { (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xEF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF }, Conversion.intToByteArray(0x90ABCDEF, 0, new byte[] { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 }, 3, 1)); [EOL]     assertArrayEquals(new byte[] { (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xEF, (byte) 0xCD, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF }, Conversion.intToByteArray(0x90ABCDEF, 0, new byte[] { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 }, 3, 2)); [EOL]     assertArrayEquals(new byte[] { (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xEF, (byte) 0xCD, (byte) 0xAB, (byte) 0x90, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF }, Conversion.intToByteArray(0x90ABCDEF, 0, new byte[] { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 }, 3, 4)); [EOL]     assertArrayEquals(new byte[] { (byte) 0xF7, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF }, Conversion.intToByteArray(0x90ABCDEF, 1, new byte[] { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 }, 0, 1)); [EOL]     assertArrayEquals(new byte[] { (byte) 0x7B, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF }, Conversion.intToByteArray(0x90ABCDEF, 2, new byte[] { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 }, 0, 1)); [EOL]     assertArrayEquals(new byte[] { (byte) 0xFF, (byte) 0x00, (byte) 0xFF, (byte) 0x6F, (byte) 0x5E, (byte) 0x85, (byte) 0xFC, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF }, Conversion.intToByteArray(0x90ABCDEF, 5, new byte[] { -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1 }, 3, 4)); [EOL]     assertArrayEquals(new byte[] { (byte) 0xFF, (byte) 0x00, (byte) 0xFF, (byte) 0x5E, (byte) 0x85, (byte) 0xFC, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF }, Conversion.intToByteArray(0x90ABCDEF, 13, new byte[] { -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1 }, 3, 3)); [EOL] }
@Test [EOL] public void testByteToHex() { [EOL]     assertEquals("", Conversion.byteToHex((byte) 0x00, 0, "", 0, 0)); [EOL]     assertEquals("", Conversion.byteToHex((byte) 0x00, 100, "", 0, 0)); [EOL]     assertEquals("", Conversion.byteToHex((byte) 0x00, 0, "", 100, 0)); [EOL]     assertEquals("00000", Conversion.byteToHex((byte) 0xEF, 0, "00000", 0, 0)); [EOL]     assertEquals("f0000", Conversion.byteToHex((byte) 0xEF, 0, "00000", 0, 1)); [EOL]     assertEquals("fe000", Conversion.byteToHex((byte) 0xEF, 0, "00000", 0, 2)); [EOL]     assertEquals("000f0", Conversion.byteToHex((byte) 0xEF, 0, "00000", 3, 1)); [EOL]     assertEquals("000fe", Conversion.byteToHex((byte) 0xEF, 0, "00000", 3, 2)); [EOL]     assertEquals("70000", Conversion.byteToHex((byte) 0xEF, 1, "00000", 0, 1)); [EOL]     assertEquals("b0000", Conversion.byteToHex((byte) 0xEF, 2, "00000", 0, 1)); [EOL]     assertEquals("000df", Conversion.byteToHex((byte) 0xEF, 3, "00000", 3, 2)); [EOL]     assertEquals("000e0", Conversion.byteToHex((byte) 0xEF, 4, "00000", 3, 1)); [EOL]     assertEquals("fe", Conversion.byteToHex((byte) 0xEF, 0, "", 0, 2)); [EOL]     try { [EOL]         Conversion.byteToHex((byte) 0xEF, 0, "", 1, 2); [EOL]         fail("Thrown " + StringIndexOutOfBoundsException.class.getName() + " expected"); [EOL]     } catch (final StringIndexOutOfBoundsException e) { [EOL]     } [EOL] }
@Test [EOL] public void testByteToHex() { [EOL]     assertEquals("", Conversion.byteToHex((byte) 0x00, 0, "", 0, 0)); [EOL]     assertEquals("", Conversion.byteToHex((byte) 0x00, 100, "", 0, 0)); [EOL]     assertEquals("", Conversion.byteToHex((byte) 0x00, 0, "", 100, 0)); [EOL]     assertEquals("00000", Conversion.byteToHex((byte) 0xEF, 0, "00000", 0, 0)); [EOL]     assertEquals("f0000", Conversion.byteToHex((byte) 0xEF, 0, "00000", 0, 1)); [EOL]     assertEquals("fe000", Conversion.byteToHex((byte) 0xEF, 0, "00000", 0, 2)); [EOL]     assertEquals("000f0", Conversion.byteToHex((byte) 0xEF, 0, "00000", 3, 1)); [EOL]     assertEquals("000fe", Conversion.byteToHex((byte) 0xEF, 0, "00000", 3, 2)); [EOL]     assertEquals("70000", Conversion.byteToHex((byte) 0xEF, 1, "00000", 0, 1)); [EOL]     assertEquals("b0000", Conversion.byteToHex((byte) 0xEF, 2, "00000", 0, 1)); [EOL]     assertEquals("000df", Conversion.byteToHex((byte) 0xEF, 3, "00000", 3, 2)); [EOL]     assertEquals("000e0", Conversion.byteToHex((byte) 0xEF, 4, "00000", 3, 1)); [EOL]     assertEquals("fe", Conversion.byteToHex((byte) 0xEF, 0, "", 0, 2)); [EOL]     try { [EOL]         Conversion.byteToHex((byte) 0xEF, 0, "", 1, 2); [EOL]         fail("Thrown " + StringIndexOutOfBoundsException.class.getName() + " expected"); [EOL]     } catch (final StringIndexOutOfBoundsException e) { [EOL]     } [EOL] }
@Test [EOL] public void testByteToHex() { [EOL]     assertEquals("", Conversion.byteToHex((byte) 0x00, 0, "", 0, 0)); [EOL]     assertEquals("", Conversion.byteToHex((byte) 0x00, 100, "", 0, 0)); [EOL]     assertEquals("", Conversion.byteToHex((byte) 0x00, 0, "", 100, 0)); [EOL]     assertEquals("00000", Conversion.byteToHex((byte) 0xEF, 0, "00000", 0, 0)); [EOL]     assertEquals("f0000", Conversion.byteToHex((byte) 0xEF, 0, "00000", 0, 1)); [EOL]     assertEquals("fe000", Conversion.byteToHex((byte) 0xEF, 0, "00000", 0, 2)); [EOL]     assertEquals("000f0", Conversion.byteToHex((byte) 0xEF, 0, "00000", 3, 1)); [EOL]     assertEquals("000fe", Conversion.byteToHex((byte) 0xEF, 0, "00000", 3, 2)); [EOL]     assertEquals("70000", Conversion.byteToHex((byte) 0xEF, 1, "00000", 0, 1)); [EOL]     assertEquals("b0000", Conversion.byteToHex((byte) 0xEF, 2, "00000", 0, 1)); [EOL]     assertEquals("000df", Conversion.byteToHex((byte) 0xEF, 3, "00000", 3, 2)); [EOL]     assertEquals("000e0", Conversion.byteToHex((byte) 0xEF, 4, "00000", 3, 1)); [EOL]     assertEquals("fe", Conversion.byteToHex((byte) 0xEF, 0, "", 0, 2)); [EOL]     try { [EOL]         Conversion.byteToHex((byte) 0xEF, 0, "", 1, 2); [EOL]         fail("Thrown " + StringIndexOutOfBoundsException.class.getName() + " expected"); [EOL]     } catch (final StringIndexOutOfBoundsException e) { [EOL]     } [EOL] }
@Test [EOL] public void testUuidToByteArray() { [EOL]     assertArrayEquals(new byte[] { (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff }, Conversion.uuidToByteArray(new UUID(0xFFFFFFFFFFFFFFFFL, 0xFFFFFFFFFFFFFFFFL), new byte[16], 0, 16)); [EOL]     assertArrayEquals(new byte[] { (byte) 0x88, (byte) 0x99, (byte) 0xaa, (byte) 0xbb, (byte) 0xcc, (byte) 0xdd, (byte) 0xee, (byte) 0xff, (byte) 0x00, (byte) 0x11, (byte) 0x22, (byte) 0x33, (byte) 0x44, (byte) 0x55, (byte) 0x66, (byte) 0x77 }, Conversion.uuidToByteArray(new UUID(0xFFEEDDCCBBAA9988L, 0x7766554433221100L), new byte[16], 0, 16)); [EOL]     assertArrayEquals(new byte[] { (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x88, (byte) 0x99, (byte) 0xaa, (byte) 0xbb, (byte) 0xcc, (byte) 0xdd, (byte) 0xee, (byte) 0xff, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00 }, Conversion.uuidToByteArray(new UUID(0xFFEEDDCCBBAA9988L, 0x7766554433221100L), new byte[16], 4, 8)); [EOL]     assertArrayEquals(new byte[] { (byte) 0x00, (byte) 0x00, (byte) 0x88, (byte) 0x99, (byte) 0xaa, (byte) 0xbb, (byte) 0xcc, (byte) 0xdd, (byte) 0xee, (byte) 0xff, (byte) 0x00, (byte) 0x11, (byte) 0x22, (byte) 0x33, (byte) 0x00, (byte) 0x00 }, Conversion.uuidToByteArray(new UUID(0xFFEEDDCCBBAA9988L, 0x7766554433221100L), new byte[16], 2, 12)); [EOL] }
@Test [EOL] public void testEscapeCsvWriter() throws Exception { [EOL]     checkCsvEscapeWriter("foo.bar", "foo.bar"); [EOL]     checkCsvEscapeWriter("\"foo,bar\"", "foo,bar"); [EOL]     checkCsvEscapeWriter("\"foo\nbar\"", "foo\nbar"); [EOL]     checkCsvEscapeWriter("\"foo\rbar\"", "foo\rbar"); [EOL]     checkCsvEscapeWriter("\"foo\"\"bar\"", "foo\"bar"); [EOL]     checkCsvEscapeWriter("", null); [EOL]     checkCsvEscapeWriter("", ""); [EOL] }
@Test [EOL] public void testUnescapeCsvWriter() throws Exception { [EOL]     checkCsvUnescapeWriter("foo.bar", "foo.bar"); [EOL]     checkCsvUnescapeWriter("foo,bar", "\"foo,bar\""); [EOL]     checkCsvUnescapeWriter("foo\nbar", "\"foo\nbar\""); [EOL]     checkCsvUnescapeWriter("foo\rbar", "\"foo\rbar\""); [EOL]     checkCsvUnescapeWriter("foo\"bar", "\"foo\"\"bar\""); [EOL]     checkCsvUnescapeWriter("", null); [EOL]     checkCsvUnescapeWriter("", ""); [EOL]     checkCsvUnescapeWriter("\"foo.bar\"", "\"foo.bar\""); [EOL] }
@Test [EOL] public void testEscapeSurrogatePairs() throws Exception { [EOL]     assertEquals("\uD83D\uDE30", StringEscapeUtils.escapeCsv("\uD83D\uDE30")); [EOL]     assertEquals("\uD800\uDC00", StringEscapeUtils.escapeCsv("\uD800\uDC00")); [EOL]     assertEquals("\uD834\uDD1E", StringEscapeUtils.escapeCsv("\uD834\uDD1E")); [EOL]     assertEquals("\uDBFF\uDFFD", StringEscapeUtils.escapeCsv("\uDBFF\uDFFD")); [EOL]     assertEquals("\uDBFF\uDFFD", StringEscapeUtils.escapeHtml3("\uDBFF\uDFFD")); [EOL]     assertEquals("\uDBFF\uDFFD", StringEscapeUtils.escapeHtml4("\uDBFF\uDFFD")); [EOL]     assertEquals("\uDBFF\uDFFD", StringEscapeUtils.escapeXml("\uDBFF\uDFFD")); [EOL] }
@Test [EOL] public void testEscapeSurrogatePairs() throws Exception { [EOL]     assertEquals("\uD83D\uDE30", StringEscapeUtils.escapeCsv("\uD83D\uDE30")); [EOL]     assertEquals("\uD800\uDC00", StringEscapeUtils.escapeCsv("\uD800\uDC00")); [EOL]     assertEquals("\uD834\uDD1E", StringEscapeUtils.escapeCsv("\uD834\uDD1E")); [EOL]     assertEquals("\uDBFF\uDFFD", StringEscapeUtils.escapeCsv("\uDBFF\uDFFD")); [EOL]     assertEquals("\uDBFF\uDFFD", StringEscapeUtils.escapeHtml3("\uDBFF\uDFFD")); [EOL]     assertEquals("\uDBFF\uDFFD", StringEscapeUtils.escapeHtml4("\uDBFF\uDFFD")); [EOL]     assertEquals("\uDBFF\uDFFD", StringEscapeUtils.escapeXml("\uDBFF\uDFFD")); [EOL] }
@Test [EOL] public void testEscapeCsvString() throws Exception { [EOL]     assertEquals("foo.bar", StringEscapeUtils.escapeCsv("foo.bar")); [EOL]     assertEquals("\"foo,bar\"", StringEscapeUtils.escapeCsv("foo,bar")); [EOL]     assertEquals("\"foo\nbar\"", StringEscapeUtils.escapeCsv("foo\nbar")); [EOL]     assertEquals("\"foo\rbar\"", StringEscapeUtils.escapeCsv("foo\rbar")); [EOL]     assertEquals("\"foo\"\"bar\"", StringEscapeUtils.escapeCsv("foo\"bar")); [EOL]     assertEquals("", StringEscapeUtils.escapeCsv("")); [EOL]     assertEquals(null, StringEscapeUtils.escapeCsv(null)); [EOL] }
