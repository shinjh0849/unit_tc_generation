@Override [EOL] public Version version() { [EOL]     return PackageVersion.VERSION; [EOL] }
@Override [EOL] public JsonReadContext getParsingContext() { [EOL]     return _parsingContext; [EOL] }
@Override [EOL] public JsonLocation getTokenLocation() { [EOL]     return new JsonLocation(_ioContext.getSourceReference(), getTokenCharacterOffset(), getTokenLineNr(), getTokenColumnNr()); [EOL] }
@Override [EOL] public Object getEmbeddedObject() throws IOException, JsonParseException { [EOL]     return null; [EOL] }
public long getTokenCharacterOffset() { [EOL]     return _tokenInputTotal; [EOL] }
public int getTokenLineNr() { [EOL]     return _tokenInputRow; [EOL] }
public int getTokenColumnNr() { [EOL]     int col = _tokenInputCol; [EOL]     return (col < 0) ? col : (col + 1); [EOL] }
public int getTokenColumnNr() { [EOL]     int col = _tokenInputCol; [EOL]     return (col < 0) ? col : (col + 1); [EOL] }
protected final void loadMoreGuaranteed() throws IOException { [EOL]     if (!loadMore()) { [EOL]         _reportInvalidEOF(); [EOL]     } [EOL] }
@Override [EOL] protected void _handleEOF() throws JsonParseException { [EOL]     if (!_parsingContext.inRoot()) { [EOL]         _reportInvalidEOF(": expected close marker for " + _parsingContext.getTypeDesc() + " (from " + _parsingContext.getStartLocation(_ioContext.getSourceReference()) + ")"); [EOL]     } [EOL] }
@Override [EOL] protected void _handleEOF() throws JsonParseException { [EOL]     if (!_parsingContext.inRoot()) { [EOL]         _reportInvalidEOF(": expected close marker for " + _parsingContext.getTypeDesc() + " (from " + _parsingContext.getStartLocation(_ioContext.getSourceReference()) + ")"); [EOL]     } [EOL] }
@Override [EOL] public Number getNumberValue() throws IOException, JsonParseException { [EOL]     if (_numTypesValid == NR_UNKNOWN) { [EOL]         _parseNumericValue(NR_UNKNOWN); [EOL]     } [EOL]     if (_currToken == JsonToken.VALUE_NUMBER_INT) { [EOL]         if ((_numTypesValid & NR_INT) != 0) { [EOL]             return _numberInt; [EOL]         } [EOL]         if ((_numTypesValid & NR_LONG) != 0) { [EOL]             return _numberLong; [EOL]         } [EOL]         if ((_numTypesValid & NR_BIGINT) != 0) { [EOL]             return _numberBigInt; [EOL]         } [EOL]         return _numberBigDecimal; [EOL]     } [EOL]     if ((_numTypesValid & NR_BIGDECIMAL) != 0) { [EOL]         return _numberBigDecimal; [EOL]     } [EOL]     if ((_numTypesValid & NR_DOUBLE) == 0) { [EOL]         _throwInternal(); [EOL]     } [EOL]     return _numberDouble; [EOL] }
@Override [EOL] public Number getNumberValue() throws IOException, JsonParseException { [EOL]     if (_numTypesValid == NR_UNKNOWN) { [EOL]         _parseNumericValue(NR_UNKNOWN); [EOL]     } [EOL]     if (_currToken == JsonToken.VALUE_NUMBER_INT) { [EOL]         if ((_numTypesValid & NR_INT) != 0) { [EOL]             return _numberInt; [EOL]         } [EOL]         if ((_numTypesValid & NR_LONG) != 0) { [EOL]             return _numberLong; [EOL]         } [EOL]         if ((_numTypesValid & NR_BIGINT) != 0) { [EOL]             return _numberBigInt; [EOL]         } [EOL]         return _numberBigDecimal; [EOL]     } [EOL]     if ((_numTypesValid & NR_BIGDECIMAL) != 0) { [EOL]         return _numberBigDecimal; [EOL]     } [EOL]     if ((_numTypesValid & NR_DOUBLE) == 0) { [EOL]         _throwInternal(); [EOL]     } [EOL]     return _numberDouble; [EOL] }
@Override [EOL] public Number getNumberValue() throws IOException, JsonParseException { [EOL]     if (_numTypesValid == NR_UNKNOWN) { [EOL]         _parseNumericValue(NR_UNKNOWN); [EOL]     } [EOL]     if (_currToken == JsonToken.VALUE_NUMBER_INT) { [EOL]         if ((_numTypesValid & NR_INT) != 0) { [EOL]             return _numberInt; [EOL]         } [EOL]         if ((_numTypesValid & NR_LONG) != 0) { [EOL]             return _numberLong; [EOL]         } [EOL]         if ((_numTypesValid & NR_BIGINT) != 0) { [EOL]             return _numberBigInt; [EOL]         } [EOL]         return _numberBigDecimal; [EOL]     } [EOL]     if ((_numTypesValid & NR_BIGDECIMAL) != 0) { [EOL]         return _numberBigDecimal; [EOL]     } [EOL]     if ((_numTypesValid & NR_DOUBLE) == 0) { [EOL]         _throwInternal(); [EOL]     } [EOL]     return _numberDouble; [EOL] }
@Override [EOL] public Number getNumberValue() throws IOException, JsonParseException { [EOL]     if (_numTypesValid == NR_UNKNOWN) { [EOL]         _parseNumericValue(NR_UNKNOWN); [EOL]     } [EOL]     if (_currToken == JsonToken.VALUE_NUMBER_INT) { [EOL]         if ((_numTypesValid & NR_INT) != 0) { [EOL]             return _numberInt; [EOL]         } [EOL]         if ((_numTypesValid & NR_LONG) != 0) { [EOL]             return _numberLong; [EOL]         } [EOL]         if ((_numTypesValid & NR_BIGINT) != 0) { [EOL]             return _numberBigInt; [EOL]         } [EOL]         return _numberBigDecimal; [EOL]     } [EOL]     if ((_numTypesValid & NR_BIGDECIMAL) != 0) { [EOL]         return _numberBigDecimal; [EOL]     } [EOL]     if ((_numTypesValid & NR_DOUBLE) == 0) { [EOL]         _throwInternal(); [EOL]     } [EOL]     return _numberDouble; [EOL] }
@Override [EOL] public Number getNumberValue() throws IOException, JsonParseException { [EOL]     if (_numTypesValid == NR_UNKNOWN) { [EOL]         _parseNumericValue(NR_UNKNOWN); [EOL]     } [EOL]     if (_currToken == JsonToken.VALUE_NUMBER_INT) { [EOL]         if ((_numTypesValid & NR_INT) != 0) { [EOL]             return _numberInt; [EOL]         } [EOL]         if ((_numTypesValid & NR_LONG) != 0) { [EOL]             return _numberLong; [EOL]         } [EOL]         if ((_numTypesValid & NR_BIGINT) != 0) { [EOL]             return _numberBigInt; [EOL]         } [EOL]         return _numberBigDecimal; [EOL]     } [EOL]     if ((_numTypesValid & NR_BIGDECIMAL) != 0) { [EOL]         return _numberBigDecimal; [EOL]     } [EOL]     if ((_numTypesValid & NR_DOUBLE) == 0) { [EOL]         _throwInternal(); [EOL]     } [EOL]     return _numberDouble; [EOL] }
@Override [EOL] public Number getNumberValue() throws IOException, JsonParseException { [EOL]     if (_numTypesValid == NR_UNKNOWN) { [EOL]         _parseNumericValue(NR_UNKNOWN); [EOL]     } [EOL]     if (_currToken == JsonToken.VALUE_NUMBER_INT) { [EOL]         if ((_numTypesValid & NR_INT) != 0) { [EOL]             return _numberInt; [EOL]         } [EOL]         if ((_numTypesValid & NR_LONG) != 0) { [EOL]             return _numberLong; [EOL]         } [EOL]         if ((_numTypesValid & NR_BIGINT) != 0) { [EOL]             return _numberBigInt; [EOL]         } [EOL]         return _numberBigDecimal; [EOL]     } [EOL]     if ((_numTypesValid & NR_BIGDECIMAL) != 0) { [EOL]         return _numberBigDecimal; [EOL]     } [EOL]     if ((_numTypesValid & NR_DOUBLE) == 0) { [EOL]         _throwInternal(); [EOL]     } [EOL]     return _numberDouble; [EOL] }
@Override [EOL] public Number getNumberValue() throws IOException, JsonParseException { [EOL]     if (_numTypesValid == NR_UNKNOWN) { [EOL]         _parseNumericValue(NR_UNKNOWN); [EOL]     } [EOL]     if (_currToken == JsonToken.VALUE_NUMBER_INT) { [EOL]         if ((_numTypesValid & NR_INT) != 0) { [EOL]             return _numberInt; [EOL]         } [EOL]         if ((_numTypesValid & NR_LONG) != 0) { [EOL]             return _numberLong; [EOL]         } [EOL]         if ((_numTypesValid & NR_BIGINT) != 0) { [EOL]             return _numberBigInt; [EOL]         } [EOL]         return _numberBigDecimal; [EOL]     } [EOL]     if ((_numTypesValid & NR_BIGDECIMAL) != 0) { [EOL]         return _numberBigDecimal; [EOL]     } [EOL]     if ((_numTypesValid & NR_DOUBLE) == 0) { [EOL]         _throwInternal(); [EOL]     } [EOL]     return _numberDouble; [EOL] }
protected void _parseNumericValue(int expType) throws IOException, JsonParseException { [EOL]     if (_currToken == JsonToken.VALUE_NUMBER_INT) { [EOL]         char[] buf = _textBuffer.getTextBuffer(); [EOL]         int offset = _textBuffer.getTextOffset(); [EOL]         int len = _intLength; [EOL]         if (_numberNegative) { [EOL]             ++offset; [EOL]         } [EOL]         if (len <= 9) { [EOL]             int i = NumberInput.parseInt(buf, offset, len); [EOL]             _numberInt = _numberNegative ? -i : i; [EOL]             _numTypesValid = NR_INT; [EOL]             return; [EOL]         } [EOL]         if (len <= 18) { [EOL]             long l = NumberInput.parseLong(buf, offset, len); [EOL]             if (_numberNegative) { [EOL]                 l = -l; [EOL]             } [EOL]             if (len == 10) { [EOL]                 if (_numberNegative) { [EOL]                     if (l >= MIN_INT_L) { [EOL]                         _numberInt = (int) l; [EOL]                         _numTypesValid = NR_INT; [EOL]                         return; [EOL]                     } [EOL]                 } else { [EOL]                     if (l <= MAX_INT_L) { [EOL]                         _numberInt = (int) l; [EOL]                         _numTypesValid = NR_INT; [EOL]                         return; [EOL]                     } [EOL]                 } [EOL]             } [EOL]             _numberLong = l; [EOL]             _numTypesValid = NR_LONG; [EOL]             return; [EOL]         } [EOL]         _parseSlowIntValue(expType, buf, offset, len); [EOL]         return; [EOL]     } [EOL]     if (_currToken == JsonToken.VALUE_NUMBER_FLOAT) { [EOL]         _parseSlowFloatValue(expType); [EOL]         return; [EOL]     } [EOL]     _reportError("Current token (" + _currToken + ") not numeric, can not use numeric value accessors"); [EOL] }
protected void _parseNumericValue(int expType) throws IOException, JsonParseException { [EOL]     if (_currToken == JsonToken.VALUE_NUMBER_INT) { [EOL]         char[] buf = _textBuffer.getTextBuffer(); [EOL]         int offset = _textBuffer.getTextOffset(); [EOL]         int len = _intLength; [EOL]         if (_numberNegative) { [EOL]             ++offset; [EOL]         } [EOL]         if (len <= 9) { [EOL]             int i = NumberInput.parseInt(buf, offset, len); [EOL]             _numberInt = _numberNegative ? -i : i; [EOL]             _numTypesValid = NR_INT; [EOL]             return; [EOL]         } [EOL]         if (len <= 18) { [EOL]             long l = NumberInput.parseLong(buf, offset, len); [EOL]             if (_numberNegative) { [EOL]                 l = -l; [EOL]             } [EOL]             if (len == 10) { [EOL]                 if (_numberNegative) { [EOL]                     if (l >= MIN_INT_L) { [EOL]                         _numberInt = (int) l; [EOL]                         _numTypesValid = NR_INT; [EOL]                         return; [EOL]                     } [EOL]                 } else { [EOL]                     if (l <= MAX_INT_L) { [EOL]                         _numberInt = (int) l; [EOL]                         _numTypesValid = NR_INT; [EOL]                         return; [EOL]                     } [EOL]                 } [EOL]             } [EOL]             _numberLong = l; [EOL]             _numTypesValid = NR_LONG; [EOL]             return; [EOL]         } [EOL]         _parseSlowIntValue(expType, buf, offset, len); [EOL]         return; [EOL]     } [EOL]     if (_currToken == JsonToken.VALUE_NUMBER_FLOAT) { [EOL]         _parseSlowFloatValue(expType); [EOL]         return; [EOL]     } [EOL]     _reportError("Current token (" + _currToken + ") not numeric, can not use numeric value accessors"); [EOL] }
protected void _parseNumericValue(int expType) throws IOException, JsonParseException { [EOL]     if (_currToken == JsonToken.VALUE_NUMBER_INT) { [EOL]         char[] buf = _textBuffer.getTextBuffer(); [EOL]         int offset = _textBuffer.getTextOffset(); [EOL]         int len = _intLength; [EOL]         if (_numberNegative) { [EOL]             ++offset; [EOL]         } [EOL]         if (len <= 9) { [EOL]             int i = NumberInput.parseInt(buf, offset, len); [EOL]             _numberInt = _numberNegative ? -i : i; [EOL]             _numTypesValid = NR_INT; [EOL]             return; [EOL]         } [EOL]         if (len <= 18) { [EOL]             long l = NumberInput.parseLong(buf, offset, len); [EOL]             if (_numberNegative) { [EOL]                 l = -l; [EOL]             } [EOL]             if (len == 10) { [EOL]                 if (_numberNegative) { [EOL]                     if (l >= MIN_INT_L) { [EOL]                         _numberInt = (int) l; [EOL]                         _numTypesValid = NR_INT; [EOL]                         return; [EOL]                     } [EOL]                 } else { [EOL]                     if (l <= MAX_INT_L) { [EOL]                         _numberInt = (int) l; [EOL]                         _numTypesValid = NR_INT; [EOL]                         return; [EOL]                     } [EOL]                 } [EOL]             } [EOL]             _numberLong = l; [EOL]             _numTypesValid = NR_LONG; [EOL]             return; [EOL]         } [EOL]         _parseSlowIntValue(expType, buf, offset, len); [EOL]         return; [EOL]     } [EOL]     if (_currToken == JsonToken.VALUE_NUMBER_FLOAT) { [EOL]         _parseSlowFloatValue(expType); [EOL]         return; [EOL]     } [EOL]     _reportError("Current token (" + _currToken + ") not numeric, can not use numeric value accessors"); [EOL] }
protected void _parseNumericValue(int expType) throws IOException, JsonParseException { [EOL]     if (_currToken == JsonToken.VALUE_NUMBER_INT) { [EOL]         char[] buf = _textBuffer.getTextBuffer(); [EOL]         int offset = _textBuffer.getTextOffset(); [EOL]         int len = _intLength; [EOL]         if (_numberNegative) { [EOL]             ++offset; [EOL]         } [EOL]         if (len <= 9) { [EOL]             int i = NumberInput.parseInt(buf, offset, len); [EOL]             _numberInt = _numberNegative ? -i : i; [EOL]             _numTypesValid = NR_INT; [EOL]             return; [EOL]         } [EOL]         if (len <= 18) { [EOL]             long l = NumberInput.parseLong(buf, offset, len); [EOL]             if (_numberNegative) { [EOL]                 l = -l; [EOL]             } [EOL]             if (len == 10) { [EOL]                 if (_numberNegative) { [EOL]                     if (l >= MIN_INT_L) { [EOL]                         _numberInt = (int) l; [EOL]                         _numTypesValid = NR_INT; [EOL]                         return; [EOL]                     } [EOL]                 } else { [EOL]                     if (l <= MAX_INT_L) { [EOL]                         _numberInt = (int) l; [EOL]                         _numTypesValid = NR_INT; [EOL]                         return; [EOL]                     } [EOL]                 } [EOL]             } [EOL]             _numberLong = l; [EOL]             _numTypesValid = NR_LONG; [EOL]             return; [EOL]         } [EOL]         _parseSlowIntValue(expType, buf, offset, len); [EOL]         return; [EOL]     } [EOL]     if (_currToken == JsonToken.VALUE_NUMBER_FLOAT) { [EOL]         _parseSlowFloatValue(expType); [EOL]         return; [EOL]     } [EOL]     _reportError("Current token (" + _currToken + ") not numeric, can not use numeric value accessors"); [EOL] }
protected void _parseNumericValue(int expType) throws IOException, JsonParseException { [EOL]     if (_currToken == JsonToken.VALUE_NUMBER_INT) { [EOL]         char[] buf = _textBuffer.getTextBuffer(); [EOL]         int offset = _textBuffer.getTextOffset(); [EOL]         int len = _intLength; [EOL]         if (_numberNegative) { [EOL]             ++offset; [EOL]         } [EOL]         if (len <= 9) { [EOL]             int i = NumberInput.parseInt(buf, offset, len); [EOL]             _numberInt = _numberNegative ? -i : i; [EOL]             _numTypesValid = NR_INT; [EOL]             return; [EOL]         } [EOL]         if (len <= 18) { [EOL]             long l = NumberInput.parseLong(buf, offset, len); [EOL]             if (_numberNegative) { [EOL]                 l = -l; [EOL]             } [EOL]             if (len == 10) { [EOL]                 if (_numberNegative) { [EOL]                     if (l >= MIN_INT_L) { [EOL]                         _numberInt = (int) l; [EOL]                         _numTypesValid = NR_INT; [EOL]                         return; [EOL]                     } [EOL]                 } else { [EOL]                     if (l <= MAX_INT_L) { [EOL]                         _numberInt = (int) l; [EOL]                         _numTypesValid = NR_INT; [EOL]                         return; [EOL]                     } [EOL]                 } [EOL]             } [EOL]             _numberLong = l; [EOL]             _numTypesValid = NR_LONG; [EOL]             return; [EOL]         } [EOL]         _parseSlowIntValue(expType, buf, offset, len); [EOL]         return; [EOL]     } [EOL]     if (_currToken == JsonToken.VALUE_NUMBER_FLOAT) { [EOL]         _parseSlowFloatValue(expType); [EOL]         return; [EOL]     } [EOL]     _reportError("Current token (" + _currToken + ") not numeric, can not use numeric value accessors"); [EOL] }
protected void _parseNumericValue(int expType) throws IOException, JsonParseException { [EOL]     if (_currToken == JsonToken.VALUE_NUMBER_INT) { [EOL]         char[] buf = _textBuffer.getTextBuffer(); [EOL]         int offset = _textBuffer.getTextOffset(); [EOL]         int len = _intLength; [EOL]         if (_numberNegative) { [EOL]             ++offset; [EOL]         } [EOL]         if (len <= 9) { [EOL]             int i = NumberInput.parseInt(buf, offset, len); [EOL]             _numberInt = _numberNegative ? -i : i; [EOL]             _numTypesValid = NR_INT; [EOL]             return; [EOL]         } [EOL]         if (len <= 18) { [EOL]             long l = NumberInput.parseLong(buf, offset, len); [EOL]             if (_numberNegative) { [EOL]                 l = -l; [EOL]             } [EOL]             if (len == 10) { [EOL]                 if (_numberNegative) { [EOL]                     if (l >= MIN_INT_L) { [EOL]                         _numberInt = (int) l; [EOL]                         _numTypesValid = NR_INT; [EOL]                         return; [EOL]                     } [EOL]                 } else { [EOL]                     if (l <= MAX_INT_L) { [EOL]                         _numberInt = (int) l; [EOL]                         _numTypesValid = NR_INT; [EOL]                         return; [EOL]                     } [EOL]                 } [EOL]             } [EOL]             _numberLong = l; [EOL]             _numTypesValid = NR_LONG; [EOL]             return; [EOL]         } [EOL]         _parseSlowIntValue(expType, buf, offset, len); [EOL]         return; [EOL]     } [EOL]     if (_currToken == JsonToken.VALUE_NUMBER_FLOAT) { [EOL]         _parseSlowFloatValue(expType); [EOL]         return; [EOL]     } [EOL]     _reportError("Current token (" + _currToken + ") not numeric, can not use numeric value accessors"); [EOL] }
protected void _parseNumericValue(int expType) throws IOException, JsonParseException { [EOL]     if (_currToken == JsonToken.VALUE_NUMBER_INT) { [EOL]         char[] buf = _textBuffer.getTextBuffer(); [EOL]         int offset = _textBuffer.getTextOffset(); [EOL]         int len = _intLength; [EOL]         if (_numberNegative) { [EOL]             ++offset; [EOL]         } [EOL]         if (len <= 9) { [EOL]             int i = NumberInput.parseInt(buf, offset, len); [EOL]             _numberInt = _numberNegative ? -i : i; [EOL]             _numTypesValid = NR_INT; [EOL]             return; [EOL]         } [EOL]         if (len <= 18) { [EOL]             long l = NumberInput.parseLong(buf, offset, len); [EOL]             if (_numberNegative) { [EOL]                 l = -l; [EOL]             } [EOL]             if (len == 10) { [EOL]                 if (_numberNegative) { [EOL]                     if (l >= MIN_INT_L) { [EOL]                         _numberInt = (int) l; [EOL]                         _numTypesValid = NR_INT; [EOL]                         return; [EOL]                     } [EOL]                 } else { [EOL]                     if (l <= MAX_INT_L) { [EOL]                         _numberInt = (int) l; [EOL]                         _numTypesValid = NR_INT; [EOL]                         return; [EOL]                     } [EOL]                 } [EOL]             } [EOL]             _numberLong = l; [EOL]             _numTypesValid = NR_LONG; [EOL]             return; [EOL]         } [EOL]         _parseSlowIntValue(expType, buf, offset, len); [EOL]         return; [EOL]     } [EOL]     if (_currToken == JsonToken.VALUE_NUMBER_FLOAT) { [EOL]         _parseSlowFloatValue(expType); [EOL]         return; [EOL]     } [EOL]     _reportError("Current token (" + _currToken + ") not numeric, can not use numeric value accessors"); [EOL] }
protected void convertNumberToInt() throws IOException, JsonParseException { [EOL]     if ((_numTypesValid & NR_LONG) != 0) { [EOL]         int result = (int) _numberLong; [EOL]         if (((long) result) != _numberLong) { [EOL]             _reportError("Numeric value (" + getText() + ") out of range of int"); [EOL]         } [EOL]         _numberInt = result; [EOL]     } else if ((_numTypesValid & NR_BIGINT) != 0) { [EOL]         if (BI_MIN_INT.compareTo(_numberBigInt) > 0 || BI_MAX_INT.compareTo(_numberBigInt) < 0) { [EOL]             reportOverflowInt(); [EOL]         } [EOL]         _numberInt = _numberBigInt.intValue(); [EOL]     } else if ((_numTypesValid & NR_DOUBLE) != 0) { [EOL]         if (_numberDouble < MIN_INT_D || _numberDouble > MAX_INT_D) { [EOL]             reportOverflowInt(); [EOL]         } [EOL]         _numberInt = (int) _numberDouble; [EOL]     } else if ((_numTypesValid & NR_BIGDECIMAL) != 0) { [EOL]         if (BD_MIN_INT.compareTo(_numberBigDecimal) > 0 || BD_MAX_INT.compareTo(_numberBigDecimal) < 0) { [EOL]             reportOverflowInt(); [EOL]         } [EOL]         _numberInt = _numberBigDecimal.intValue(); [EOL]     } else { [EOL]         _throwInternal(); [EOL]     } [EOL]     _numTypesValid |= NR_INT; [EOL] }
protected void convertNumberToInt() throws IOException, JsonParseException { [EOL]     if ((_numTypesValid & NR_LONG) != 0) { [EOL]         int result = (int) _numberLong; [EOL]         if (((long) result) != _numberLong) { [EOL]             _reportError("Numeric value (" + getText() + ") out of range of int"); [EOL]         } [EOL]         _numberInt = result; [EOL]     } else if ((_numTypesValid & NR_BIGINT) != 0) { [EOL]         if (BI_MIN_INT.compareTo(_numberBigInt) > 0 || BI_MAX_INT.compareTo(_numberBigInt) < 0) { [EOL]             reportOverflowInt(); [EOL]         } [EOL]         _numberInt = _numberBigInt.intValue(); [EOL]     } else if ((_numTypesValid & NR_DOUBLE) != 0) { [EOL]         if (_numberDouble < MIN_INT_D || _numberDouble > MAX_INT_D) { [EOL]             reportOverflowInt(); [EOL]         } [EOL]         _numberInt = (int) _numberDouble; [EOL]     } else if ((_numTypesValid & NR_BIGDECIMAL) != 0) { [EOL]         if (BD_MIN_INT.compareTo(_numberBigDecimal) > 0 || BD_MAX_INT.compareTo(_numberBigDecimal) < 0) { [EOL]             reportOverflowInt(); [EOL]         } [EOL]         _numberInt = _numberBigDecimal.intValue(); [EOL]     } else { [EOL]         _throwInternal(); [EOL]     } [EOL]     _numTypesValid |= NR_INT; [EOL] }
protected void convertNumberToInt() throws IOException, JsonParseException { [EOL]     if ((_numTypesValid & NR_LONG) != 0) { [EOL]         int result = (int) _numberLong; [EOL]         if (((long) result) != _numberLong) { [EOL]             _reportError("Numeric value (" + getText() + ") out of range of int"); [EOL]         } [EOL]         _numberInt = result; [EOL]     } else if ((_numTypesValid & NR_BIGINT) != 0) { [EOL]         if (BI_MIN_INT.compareTo(_numberBigInt) > 0 || BI_MAX_INT.compareTo(_numberBigInt) < 0) { [EOL]             reportOverflowInt(); [EOL]         } [EOL]         _numberInt = _numberBigInt.intValue(); [EOL]     } else if ((_numTypesValid & NR_DOUBLE) != 0) { [EOL]         if (_numberDouble < MIN_INT_D || _numberDouble > MAX_INT_D) { [EOL]             reportOverflowInt(); [EOL]         } [EOL]         _numberInt = (int) _numberDouble; [EOL]     } else if ((_numTypesValid & NR_BIGDECIMAL) != 0) { [EOL]         if (BD_MIN_INT.compareTo(_numberBigDecimal) > 0 || BD_MAX_INT.compareTo(_numberBigDecimal) < 0) { [EOL]             reportOverflowInt(); [EOL]         } [EOL]         _numberInt = _numberBigDecimal.intValue(); [EOL]     } else { [EOL]         _throwInternal(); [EOL]     } [EOL]     _numTypesValid |= NR_INT; [EOL] }
protected void convertNumberToInt() throws IOException, JsonParseException { [EOL]     if ((_numTypesValid & NR_LONG) != 0) { [EOL]         int result = (int) _numberLong; [EOL]         if (((long) result) != _numberLong) { [EOL]             _reportError("Numeric value (" + getText() + ") out of range of int"); [EOL]         } [EOL]         _numberInt = result; [EOL]     } else if ((_numTypesValid & NR_BIGINT) != 0) { [EOL]         if (BI_MIN_INT.compareTo(_numberBigInt) > 0 || BI_MAX_INT.compareTo(_numberBigInt) < 0) { [EOL]             reportOverflowInt(); [EOL]         } [EOL]         _numberInt = _numberBigInt.intValue(); [EOL]     } else if ((_numTypesValid & NR_DOUBLE) != 0) { [EOL]         if (_numberDouble < MIN_INT_D || _numberDouble > MAX_INT_D) { [EOL]             reportOverflowInt(); [EOL]         } [EOL]         _numberInt = (int) _numberDouble; [EOL]     } else if ((_numTypesValid & NR_BIGDECIMAL) != 0) { [EOL]         if (BD_MIN_INT.compareTo(_numberBigDecimal) > 0 || BD_MAX_INT.compareTo(_numberBigDecimal) < 0) { [EOL]             reportOverflowInt(); [EOL]         } [EOL]         _numberInt = _numberBigDecimal.intValue(); [EOL]     } else { [EOL]         _throwInternal(); [EOL]     } [EOL]     _numTypesValid |= NR_INT; [EOL] }
protected void convertNumberToInt() throws IOException, JsonParseException { [EOL]     if ((_numTypesValid & NR_LONG) != 0) { [EOL]         int result = (int) _numberLong; [EOL]         if (((long) result) != _numberLong) { [EOL]             _reportError("Numeric value (" + getText() + ") out of range of int"); [EOL]         } [EOL]         _numberInt = result; [EOL]     } else if ((_numTypesValid & NR_BIGINT) != 0) { [EOL]         if (BI_MIN_INT.compareTo(_numberBigInt) > 0 || BI_MAX_INT.compareTo(_numberBigInt) < 0) { [EOL]             reportOverflowInt(); [EOL]         } [EOL]         _numberInt = _numberBigInt.intValue(); [EOL]     } else if ((_numTypesValid & NR_DOUBLE) != 0) { [EOL]         if (_numberDouble < MIN_INT_D || _numberDouble > MAX_INT_D) { [EOL]             reportOverflowInt(); [EOL]         } [EOL]         _numberInt = (int) _numberDouble; [EOL]     } else if ((_numTypesValid & NR_BIGDECIMAL) != 0) { [EOL]         if (BD_MIN_INT.compareTo(_numberBigDecimal) > 0 || BD_MAX_INT.compareTo(_numberBigDecimal) < 0) { [EOL]             reportOverflowInt(); [EOL]         } [EOL]         _numberInt = _numberBigDecimal.intValue(); [EOL]     } else { [EOL]         _throwInternal(); [EOL]     } [EOL]     _numTypesValid |= NR_INT; [EOL] }
protected void convertNumberToInt() throws IOException, JsonParseException { [EOL]     if ((_numTypesValid & NR_LONG) != 0) { [EOL]         int result = (int) _numberLong; [EOL]         if (((long) result) != _numberLong) { [EOL]             _reportError("Numeric value (" + getText() + ") out of range of int"); [EOL]         } [EOL]         _numberInt = result; [EOL]     } else if ((_numTypesValid & NR_BIGINT) != 0) { [EOL]         if (BI_MIN_INT.compareTo(_numberBigInt) > 0 || BI_MAX_INT.compareTo(_numberBigInt) < 0) { [EOL]             reportOverflowInt(); [EOL]         } [EOL]         _numberInt = _numberBigInt.intValue(); [EOL]     } else if ((_numTypesValid & NR_DOUBLE) != 0) { [EOL]         if (_numberDouble < MIN_INT_D || _numberDouble > MAX_INT_D) { [EOL]             reportOverflowInt(); [EOL]         } [EOL]         _numberInt = (int) _numberDouble; [EOL]     } else if ((_numTypesValid & NR_BIGDECIMAL) != 0) { [EOL]         if (BD_MIN_INT.compareTo(_numberBigDecimal) > 0 || BD_MAX_INT.compareTo(_numberBigDecimal) < 0) { [EOL]             reportOverflowInt(); [EOL]         } [EOL]         _numberInt = _numberBigDecimal.intValue(); [EOL]     } else { [EOL]         _throwInternal(); [EOL]     } [EOL]     _numTypesValid |= NR_INT; [EOL] }
protected void convertNumberToInt() throws IOException, JsonParseException { [EOL]     if ((_numTypesValid & NR_LONG) != 0) { [EOL]         int result = (int) _numberLong; [EOL]         if (((long) result) != _numberLong) { [EOL]             _reportError("Numeric value (" + getText() + ") out of range of int"); [EOL]         } [EOL]         _numberInt = result; [EOL]     } else if ((_numTypesValid & NR_BIGINT) != 0) { [EOL]         if (BI_MIN_INT.compareTo(_numberBigInt) > 0 || BI_MAX_INT.compareTo(_numberBigInt) < 0) { [EOL]             reportOverflowInt(); [EOL]         } [EOL]         _numberInt = _numberBigInt.intValue(); [EOL]     } else if ((_numTypesValid & NR_DOUBLE) != 0) { [EOL]         if (_numberDouble < MIN_INT_D || _numberDouble > MAX_INT_D) { [EOL]             reportOverflowInt(); [EOL]         } [EOL]         _numberInt = (int) _numberDouble; [EOL]     } else if ((_numTypesValid & NR_BIGDECIMAL) != 0) { [EOL]         if (BD_MIN_INT.compareTo(_numberBigDecimal) > 0 || BD_MAX_INT.compareTo(_numberBigDecimal) < 0) { [EOL]             reportOverflowInt(); [EOL]         } [EOL]         _numberInt = _numberBigDecimal.intValue(); [EOL]     } else { [EOL]         _throwInternal(); [EOL]     } [EOL]     _numTypesValid |= NR_INT; [EOL] }
protected void convertNumberToInt() throws IOException, JsonParseException { [EOL]     if ((_numTypesValid & NR_LONG) != 0) { [EOL]         int result = (int) _numberLong; [EOL]         if (((long) result) != _numberLong) { [EOL]             _reportError("Numeric value (" + getText() + ") out of range of int"); [EOL]         } [EOL]         _numberInt = result; [EOL]     } else if ((_numTypesValid & NR_BIGINT) != 0) { [EOL]         if (BI_MIN_INT.compareTo(_numberBigInt) > 0 || BI_MAX_INT.compareTo(_numberBigInt) < 0) { [EOL]             reportOverflowInt(); [EOL]         } [EOL]         _numberInt = _numberBigInt.intValue(); [EOL]     } else if ((_numTypesValid & NR_DOUBLE) != 0) { [EOL]         if (_numberDouble < MIN_INT_D || _numberDouble > MAX_INT_D) { [EOL]             reportOverflowInt(); [EOL]         } [EOL]         _numberInt = (int) _numberDouble; [EOL]     } else if ((_numTypesValid & NR_BIGDECIMAL) != 0) { [EOL]         if (BD_MIN_INT.compareTo(_numberBigDecimal) > 0 || BD_MAX_INT.compareTo(_numberBigDecimal) < 0) { [EOL]             reportOverflowInt(); [EOL]         } [EOL]         _numberInt = _numberBigDecimal.intValue(); [EOL]     } else { [EOL]         _throwInternal(); [EOL]     } [EOL]     _numTypesValid |= NR_INT; [EOL] }
protected void convertNumberToInt() throws IOException, JsonParseException { [EOL]     if ((_numTypesValid & NR_LONG) != 0) { [EOL]         int result = (int) _numberLong; [EOL]         if (((long) result) != _numberLong) { [EOL]             _reportError("Numeric value (" + getText() + ") out of range of int"); [EOL]         } [EOL]         _numberInt = result; [EOL]     } else if ((_numTypesValid & NR_BIGINT) != 0) { [EOL]         if (BI_MIN_INT.compareTo(_numberBigInt) > 0 || BI_MAX_INT.compareTo(_numberBigInt) < 0) { [EOL]             reportOverflowInt(); [EOL]         } [EOL]         _numberInt = _numberBigInt.intValue(); [EOL]     } else if ((_numTypesValid & NR_DOUBLE) != 0) { [EOL]         if (_numberDouble < MIN_INT_D || _numberDouble > MAX_INT_D) { [EOL]             reportOverflowInt(); [EOL]         } [EOL]         _numberInt = (int) _numberDouble; [EOL]     } else if ((_numTypesValid & NR_BIGDECIMAL) != 0) { [EOL]         if (BD_MIN_INT.compareTo(_numberBigDecimal) > 0 || BD_MAX_INT.compareTo(_numberBigDecimal) < 0) { [EOL]             reportOverflowInt(); [EOL]         } [EOL]         _numberInt = _numberBigDecimal.intValue(); [EOL]     } else { [EOL]         _throwInternal(); [EOL]     } [EOL]     _numTypesValid |= NR_INT; [EOL] }
protected void convertNumberToLong() throws IOException, JsonParseException { [EOL]     if ((_numTypesValid & NR_INT) != 0) { [EOL]         _numberLong = (long) _numberInt; [EOL]     } else if ((_numTypesValid & NR_BIGINT) != 0) { [EOL]         if (BI_MIN_LONG.compareTo(_numberBigInt) > 0 || BI_MAX_LONG.compareTo(_numberBigInt) < 0) { [EOL]             reportOverflowLong(); [EOL]         } [EOL]         _numberLong = _numberBigInt.longValue(); [EOL]     } else if ((_numTypesValid & NR_DOUBLE) != 0) { [EOL]         if (_numberDouble < MIN_LONG_D || _numberDouble > MAX_LONG_D) { [EOL]             reportOverflowLong(); [EOL]         } [EOL]         _numberLong = (long) _numberDouble; [EOL]     } else if ((_numTypesValid & NR_BIGDECIMAL) != 0) { [EOL]         if (BD_MIN_LONG.compareTo(_numberBigDecimal) > 0 || BD_MAX_LONG.compareTo(_numberBigDecimal) < 0) { [EOL]             reportOverflowLong(); [EOL]         } [EOL]         _numberLong = _numberBigDecimal.longValue(); [EOL]     } else { [EOL]         _throwInternal(); [EOL]     } [EOL]     _numTypesValid |= NR_LONG; [EOL] }
protected void reportInvalidNumber(String msg) throws JsonParseException { [EOL]     _reportError("Invalid numeric value: " + msg); [EOL] }
protected void reportOverflowLong() throws IOException, JsonParseException { [EOL]     _reportError("Numeric value (" + getText() + ") out of range of long (" + Long.MIN_VALUE + " - " + Long.MAX_VALUE + ")"); [EOL] }
@Override [EOL] public boolean hasMoreBytes() throws IOException { [EOL]     if (_ptr < _bufferedEnd) { [EOL]         return true; [EOL]     } [EOL]     if (_in == null) { [EOL]         return false; [EOL]     } [EOL]     int amount = _buffer.length - _ptr; [EOL]     if (amount < 1) { [EOL]         return false; [EOL]     } [EOL]     int count = _in.read(_buffer, _ptr, amount); [EOL]     if (count <= 0) { [EOL]         return false; [EOL]     } [EOL]     _bufferedEnd += count; [EOL]     return true; [EOL] }
public final byte[] allocByteBuffer(ByteBufferType type) { [EOL]     int ix = type.ordinal(); [EOL]     byte[] buffer = _byteBuffers[ix]; [EOL]     if (buffer == null) { [EOL]         buffer = balloc(type.size); [EOL]     } else { [EOL]         _byteBuffers[ix] = null; [EOL]     } [EOL]     return buffer; [EOL] }
public final byte[] allocByteBuffer(ByteBufferType type) { [EOL]     int ix = type.ordinal(); [EOL]     byte[] buffer = _byteBuffers[ix]; [EOL]     if (buffer == null) { [EOL]         buffer = balloc(type.size); [EOL]     } else { [EOL]         _byteBuffers[ix] = null; [EOL]     } [EOL]     return buffer; [EOL] }
private byte[] balloc(int size) { [EOL]     return new byte[size]; [EOL] }
private byte[] balloc(int size) { [EOL]     return new byte[size]; [EOL] }
public static Base64Variant valueOf(String name) throws IllegalArgumentException { [EOL]     if (MIME._name.equals(name)) { [EOL]         return MIME; [EOL]     } [EOL]     if (MIME_NO_LINEFEEDS._name.equals(name)) { [EOL]         return MIME_NO_LINEFEEDS; [EOL]     } [EOL]     if (PEM._name.equals(name)) { [EOL]         return PEM; [EOL]     } [EOL]     if (MODIFIED_FOR_URL._name.equals(name)) { [EOL]         return MODIFIED_FOR_URL; [EOL]     } [EOL]     if (name == null) { [EOL]         name = "<null>"; [EOL]     } else { [EOL]         name = "'" + name + "'"; [EOL]     } [EOL]     throw new IllegalArgumentException("No Base64Variant with name " + name); [EOL] }
public static Base64Variant valueOf(String name) throws IllegalArgumentException { [EOL]     if (MIME._name.equals(name)) { [EOL]         return MIME; [EOL]     } [EOL]     if (MIME_NO_LINEFEEDS._name.equals(name)) { [EOL]         return MIME_NO_LINEFEEDS; [EOL]     } [EOL]     if (PEM._name.equals(name)) { [EOL]         return PEM; [EOL]     } [EOL]     if (MODIFIED_FOR_URL._name.equals(name)) { [EOL]         return MODIFIED_FOR_URL; [EOL]     } [EOL]     if (name == null) { [EOL]         name = "<null>"; [EOL]     } else { [EOL]         name = "'" + name + "'"; [EOL]     } [EOL]     throw new IllegalArgumentException("No Base64Variant with name " + name); [EOL] }
public static Base64Variant valueOf(String name) throws IllegalArgumentException { [EOL]     if (MIME._name.equals(name)) { [EOL]         return MIME; [EOL]     } [EOL]     if (MIME_NO_LINEFEEDS._name.equals(name)) { [EOL]         return MIME_NO_LINEFEEDS; [EOL]     } [EOL]     if (PEM._name.equals(name)) { [EOL]         return PEM; [EOL]     } [EOL]     if (MODIFIED_FOR_URL._name.equals(name)) { [EOL]         return MODIFIED_FOR_URL; [EOL]     } [EOL]     if (name == null) { [EOL]         name = "<null>"; [EOL]     } else { [EOL]         name = "'" + name + "'"; [EOL]     } [EOL]     throw new IllegalArgumentException("No Base64Variant with name " + name); [EOL] }
public static Base64Variant valueOf(String name) throws IllegalArgumentException { [EOL]     if (MIME._name.equals(name)) { [EOL]         return MIME; [EOL]     } [EOL]     if (MIME_NO_LINEFEEDS._name.equals(name)) { [EOL]         return MIME_NO_LINEFEEDS; [EOL]     } [EOL]     if (PEM._name.equals(name)) { [EOL]         return PEM; [EOL]     } [EOL]     if (MODIFIED_FOR_URL._name.equals(name)) { [EOL]         return MODIFIED_FOR_URL; [EOL]     } [EOL]     if (name == null) { [EOL]         name = "<null>"; [EOL]     } else { [EOL]         name = "'" + name + "'"; [EOL]     } [EOL]     throw new IllegalArgumentException("No Base64Variant with name " + name); [EOL] }
public static Base64Variant valueOf(String name) throws IllegalArgumentException { [EOL]     if (MIME._name.equals(name)) { [EOL]         return MIME; [EOL]     } [EOL]     if (MIME_NO_LINEFEEDS._name.equals(name)) { [EOL]         return MIME_NO_LINEFEEDS; [EOL]     } [EOL]     if (PEM._name.equals(name)) { [EOL]         return PEM; [EOL]     } [EOL]     if (MODIFIED_FOR_URL._name.equals(name)) { [EOL]         return MODIFIED_FOR_URL; [EOL]     } [EOL]     if (name == null) { [EOL]         name = "<null>"; [EOL]     } else { [EOL]         name = "'" + name + "'"; [EOL]     } [EOL]     throw new IllegalArgumentException("No Base64Variant with name " + name); [EOL] }
public static Base64Variant valueOf(String name) throws IllegalArgumentException { [EOL]     if (MIME._name.equals(name)) { [EOL]         return MIME; [EOL]     } [EOL]     if (MIME_NO_LINEFEEDS._name.equals(name)) { [EOL]         return MIME_NO_LINEFEEDS; [EOL]     } [EOL]     if (PEM._name.equals(name)) { [EOL]         return PEM; [EOL]     } [EOL]     if (MODIFIED_FOR_URL._name.equals(name)) { [EOL]         return MODIFIED_FOR_URL; [EOL]     } [EOL]     if (name == null) { [EOL]         name = "<null>"; [EOL]     } else { [EOL]         name = "'" + name + "'"; [EOL]     } [EOL]     throw new IllegalArgumentException("No Base64Variant with name " + name); [EOL] }
public static int outputInt(int value, char[] buffer, int offset) { [EOL]     if (value < 0) { [EOL]         if (value == Integer.MIN_VALUE) { [EOL]             return outputLong((long) value, buffer, offset); [EOL]         } [EOL]         buffer[offset++] = '-'; [EOL]         value = -value; [EOL]     } [EOL]     if (value < MILLION) { [EOL]         if (value < 1000) { [EOL]             if (value < 10) { [EOL]                 buffer[offset++] = (char) ('0' + value); [EOL]             } else { [EOL]                 offset = outputLeadingTriplet(value, buffer, offset); [EOL]             } [EOL]         } else { [EOL]             int thousands = value / 1000; [EOL]             value -= (thousands * 1000); [EOL]             offset = outputLeadingTriplet(thousands, buffer, offset); [EOL]             offset = outputFullTriplet(value, buffer, offset); [EOL]         } [EOL]         return offset; [EOL]     } [EOL]     boolean hasBillions = (value >= BILLION); [EOL]     if (hasBillions) { [EOL]         value -= BILLION; [EOL]         if (value >= BILLION) { [EOL]             value -= BILLION; [EOL]             buffer[offset++] = '2'; [EOL]         } else { [EOL]             buffer[offset++] = '1'; [EOL]         } [EOL]     } [EOL]     int newValue = value / 1000; [EOL]     int ones = (value - (newValue * 1000)); [EOL]     value = newValue; [EOL]     newValue /= 1000; [EOL]     int thousands = (value - (newValue * 1000)); [EOL]     if (hasBillions) { [EOL]         offset = outputFullTriplet(newValue, buffer, offset); [EOL]     } else { [EOL]         offset = outputLeadingTriplet(newValue, buffer, offset); [EOL]     } [EOL]     offset = outputFullTriplet(thousands, buffer, offset); [EOL]     offset = outputFullTriplet(ones, buffer, offset); [EOL]     return offset; [EOL] } public static int outputInt(int value, char[] buffer, int offset); public static int outputInt(int value, byte[] buffer, int offset); public static int outputLong(long value, char[] buffer, int offset); public static int outputLong(long value, byte[] buffer, int offset); public static String toString(int value); public static String toString(long value); public static String toString(double value); private static int outputLeadingTriplet(int triplet, char[] buffer, int offset); private static int outputLeadingTriplet(int triplet, byte[] buffer, int offset); private static int outputFullTriplet(int triplet, char[] buffer, int offset); private static int outputFullTriplet(int triplet, byte[] buffer, int offset); private static int calcLongStrLength(long posValue); char NULL_CHAR=Optional[(char) 0]; int MILLION=Optional[1000000]; int BILLION=Optional[1000000000]; long TEN_BILLION_L=Optional[10000000000L]; long THOUSAND_L=Optional[1000L]; long MIN_INT_AS_LONG=Optional[(long) Integer.MIN_VALUE]; long MAX_INT_AS_LONG=Optional[(long) Integer.MAX_VALUE]; String SMALLEST_LONG=Optional[String.valueOf(Long.MIN_VALUE)]; char[] LEADING_TRIPLETS=Optional[new char[4000]]; char[] FULL_TRIPLETS=Optional[new char[4000]]; byte[] FULL_TRIPLETS_B=Optional[new byte[4000]]; String[] sSmallIntStrs=Optional[new String[] { "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10" }]; String[] sSmallIntStrs2=Optional[new String[] { "-1", "-2", "-3", "-4", "-5", "-6", "-7", "-8", "-9", "-10" }
private static int outputLeadingTriplet(int triplet, char[] buffer, int offset) { [EOL]     int digitOffset = (triplet << 2); [EOL]     char c = LEADING_TRIPLETS[digitOffset++]; [EOL]     if (c != NULL_CHAR) { [EOL]         buffer[offset++] = c; [EOL]     } [EOL]     c = LEADING_TRIPLETS[digitOffset++]; [EOL]     if (c != NULL_CHAR) { [EOL]         buffer[offset++] = c; [EOL]     } [EOL]     buffer[offset++] = LEADING_TRIPLETS[digitOffset]; [EOL]     return offset; [EOL] } public static int outputInt(int value, char[] buffer, int offset); public static int outputInt(int value, byte[] buffer, int offset); public static int outputLong(long value, char[] buffer, int offset); public static int outputLong(long value, byte[] buffer, int offset); public static String toString(int value); public static String toString(long value); public static String toString(double value); private static int outputLeadingTriplet(int triplet, char[] buffer, int offset); private static int outputLeadingTriplet(int triplet, byte[] buffer, int offset); private static int outputFullTriplet(int triplet, char[] buffer, int offset); private static int outputFullTriplet(int triplet, byte[] buffer, int offset); private static int calcLongStrLength(long posValue); char NULL_CHAR=Optional[(char) 0]; int MILLION=Optional[1000000]; int BILLION=Optional[1000000000]; long TEN_BILLION_L=Optional[10000000000L]; long THOUSAND_L=Optional[1000L]; long MIN_INT_AS_LONG=Optional[(long) Integer.MIN_VALUE]; long MAX_INT_AS_LONG=Optional[(long) Integer.MAX_VALUE]; String SMALLEST_LONG=Optional[String.valueOf(Long.MIN_VALUE)]; char[] LEADING_TRIPLETS=Optional[new char[4000]]; char[] FULL_TRIPLETS=Optional[new char[4000]]; byte[] FULL_TRIPLETS_B=Optional[new byte[4000]]; String[] sSmallIntStrs=Optional[new String[] { "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10" }]; String[] sSmallIntStrs2=Optional[new String[] { "-1", "-2", "-3", "-4", "-5", "-6", "-7", "-8", "-9", "-10" }
public void reset() { [EOL]     _pastLen = 0; [EOL]     _currBlockPtr = 0; [EOL]     if (!_pastBlocks.isEmpty()) { [EOL]         _pastBlocks.clear(); [EOL]     } [EOL] }
public void reset() { [EOL]     _pastLen = 0; [EOL]     _currBlockPtr = 0; [EOL]     if (!_pastBlocks.isEmpty()) { [EOL]         _pastBlocks.clear(); [EOL]     } [EOL] }
public byte[] toByteArray() { [EOL]     int totalLen = _pastLen + _currBlockPtr; [EOL]     if (totalLen == 0) { [EOL]         return NO_BYTES; [EOL]     } [EOL]     byte[] result = new byte[totalLen]; [EOL]     int offset = 0; [EOL]     for (byte[] block : _pastBlocks) { [EOL]         int len = block.length; [EOL]         System.arraycopy(block, 0, result, offset, len); [EOL]         offset += len; [EOL]     } [EOL]     System.arraycopy(_currBlock, 0, result, offset, _currBlockPtr); [EOL]     offset += _currBlockPtr; [EOL]     if (offset != totalLen) { [EOL]         throw new RuntimeException("Internal error: total len assumed to be " + totalLen + ", copied " + offset + " bytes"); [EOL]     } [EOL]     if (!_pastBlocks.isEmpty()) { [EOL]         reset(); [EOL]     } [EOL]     return result; [EOL] }
public byte[] toByteArray() { [EOL]     int totalLen = _pastLen + _currBlockPtr; [EOL]     if (totalLen == 0) { [EOL]         return NO_BYTES; [EOL]     } [EOL]     byte[] result = new byte[totalLen]; [EOL]     int offset = 0; [EOL]     for (byte[] block : _pastBlocks) { [EOL]         int len = block.length; [EOL]         System.arraycopy(block, 0, result, offset, len); [EOL]         offset += len; [EOL]     } [EOL]     System.arraycopy(_currBlock, 0, result, offset, _currBlockPtr); [EOL]     offset += _currBlockPtr; [EOL]     if (offset != totalLen) { [EOL]         throw new RuntimeException("Internal error: total len assumed to be " + totalLen + ", copied " + offset + " bytes"); [EOL]     } [EOL]     if (!_pastBlocks.isEmpty()) { [EOL]         reset(); [EOL]     } [EOL]     return result; [EOL] }
public byte[] toByteArray() { [EOL]     int totalLen = _pastLen + _currBlockPtr; [EOL]     if (totalLen == 0) { [EOL]         return NO_BYTES; [EOL]     } [EOL]     byte[] result = new byte[totalLen]; [EOL]     int offset = 0; [EOL]     for (byte[] block : _pastBlocks) { [EOL]         int len = block.length; [EOL]         System.arraycopy(block, 0, result, offset, len); [EOL]         offset += len; [EOL]     } [EOL]     System.arraycopy(_currBlock, 0, result, offset, _currBlockPtr); [EOL]     offset += _currBlockPtr; [EOL]     if (offset != totalLen) { [EOL]         throw new RuntimeException("Internal error: total len assumed to be " + totalLen + ", copied " + offset + " bytes"); [EOL]     } [EOL]     if (!_pastBlocks.isEmpty()) { [EOL]         reset(); [EOL]     } [EOL]     return result; [EOL] }
public byte[] finishCurrentSegment() { [EOL]     _allocMore(); [EOL]     return _currBlock; [EOL] }
public byte[] getCurrentSegment() { [EOL]     return _currBlock; [EOL] }
public void setCurrentSegmentLength(int len) { [EOL]     _currBlockPtr = len; [EOL] }
public int getCurrentSegmentLength() { [EOL]     return _currBlockPtr; [EOL] }
private void _allocMore() { [EOL]     _pastLen += _currBlock.length; [EOL]     int newSize = Math.max((_pastLen >> 1), (INITIAL_BLOCK_SIZE + INITIAL_BLOCK_SIZE)); [EOL]     if (newSize > MAX_BLOCK_SIZE) { [EOL]         newSize = MAX_BLOCK_SIZE; [EOL]     } [EOL]     _pastBlocks.add(_currBlock); [EOL]     _currBlock = new byte[newSize]; [EOL]     _currBlockPtr = 0; [EOL] }
private void _allocMore() { [EOL]     _pastLen += _currBlock.length; [EOL]     int newSize = Math.max((_pastLen >> 1), (INITIAL_BLOCK_SIZE + INITIAL_BLOCK_SIZE)); [EOL]     if (newSize > MAX_BLOCK_SIZE) { [EOL]         newSize = MAX_BLOCK_SIZE; [EOL]     } [EOL]     _pastBlocks.add(_currBlock); [EOL]     _currBlock = new byte[newSize]; [EOL]     _currBlockPtr = 0; [EOL] }
public static int parseInt(char[] digitChars, int offset, int len) { [EOL]     int num = digitChars[offset] - '0'; [EOL]     len += offset; [EOL]     if (++offset < len) { [EOL]         num = (num * 10) + (digitChars[offset] - '0'); [EOL]         if (++offset < len) { [EOL]             num = (num * 10) + (digitChars[offset] - '0'); [EOL]             if (++offset < len) { [EOL]                 num = (num * 10) + (digitChars[offset] - '0'); [EOL]                 if (++offset < len) { [EOL]                     num = (num * 10) + (digitChars[offset] - '0'); [EOL]                     if (++offset < len) { [EOL]                         num = (num * 10) + (digitChars[offset] - '0'); [EOL]                         if (++offset < len) { [EOL]                             num = (num * 10) + (digitChars[offset] - '0'); [EOL]                             if (++offset < len) { [EOL]                                 num = (num * 10) + (digitChars[offset] - '0'); [EOL]                                 if (++offset < len) { [EOL]                                     num = (num * 10) + (digitChars[offset] - '0'); [EOL]                                 } [EOL]                             } [EOL]                         } [EOL]                     } [EOL]                 } [EOL]             } [EOL]         } [EOL]     } [EOL]     return num; [EOL] }
public static int parseInt(char[] digitChars, int offset, int len) { [EOL]     int num = digitChars[offset] - '0'; [EOL]     len += offset; [EOL]     if (++offset < len) { [EOL]         num = (num * 10) + (digitChars[offset] - '0'); [EOL]         if (++offset < len) { [EOL]             num = (num * 10) + (digitChars[offset] - '0'); [EOL]             if (++offset < len) { [EOL]                 num = (num * 10) + (digitChars[offset] - '0'); [EOL]                 if (++offset < len) { [EOL]                     num = (num * 10) + (digitChars[offset] - '0'); [EOL]                     if (++offset < len) { [EOL]                         num = (num * 10) + (digitChars[offset] - '0'); [EOL]                         if (++offset < len) { [EOL]                             num = (num * 10) + (digitChars[offset] - '0'); [EOL]                             if (++offset < len) { [EOL]                                 num = (num * 10) + (digitChars[offset] - '0'); [EOL]                                 if (++offset < len) { [EOL]                                     num = (num * 10) + (digitChars[offset] - '0'); [EOL]                                 } [EOL]                             } [EOL]                         } [EOL]                     } [EOL]                 } [EOL]             } [EOL]         } [EOL]     } [EOL]     return num; [EOL] }
public static int parseInt(char[] digitChars, int offset, int len) { [EOL]     int num = digitChars[offset] - '0'; [EOL]     len += offset; [EOL]     if (++offset < len) { [EOL]         num = (num * 10) + (digitChars[offset] - '0'); [EOL]         if (++offset < len) { [EOL]             num = (num * 10) + (digitChars[offset] - '0'); [EOL]             if (++offset < len) { [EOL]                 num = (num * 10) + (digitChars[offset] - '0'); [EOL]                 if (++offset < len) { [EOL]                     num = (num * 10) + (digitChars[offset] - '0'); [EOL]                     if (++offset < len) { [EOL]                         num = (num * 10) + (digitChars[offset] - '0'); [EOL]                         if (++offset < len) { [EOL]                             num = (num * 10) + (digitChars[offset] - '0'); [EOL]                             if (++offset < len) { [EOL]                                 num = (num * 10) + (digitChars[offset] - '0'); [EOL]                                 if (++offset < len) { [EOL]                                     num = (num * 10) + (digitChars[offset] - '0'); [EOL]                                 } [EOL]                             } [EOL]                         } [EOL]                     } [EOL]                 } [EOL]             } [EOL]         } [EOL]     } [EOL]     return num; [EOL] }
public static int parseInt(char[] digitChars, int offset, int len) { [EOL]     int num = digitChars[offset] - '0'; [EOL]     len += offset; [EOL]     if (++offset < len) { [EOL]         num = (num * 10) + (digitChars[offset] - '0'); [EOL]         if (++offset < len) { [EOL]             num = (num * 10) + (digitChars[offset] - '0'); [EOL]             if (++offset < len) { [EOL]                 num = (num * 10) + (digitChars[offset] - '0'); [EOL]                 if (++offset < len) { [EOL]                     num = (num * 10) + (digitChars[offset] - '0'); [EOL]                     if (++offset < len) { [EOL]                         num = (num * 10) + (digitChars[offset] - '0'); [EOL]                         if (++offset < len) { [EOL]                             num = (num * 10) + (digitChars[offset] - '0'); [EOL]                             if (++offset < len) { [EOL]                                 num = (num * 10) + (digitChars[offset] - '0'); [EOL]                                 if (++offset < len) { [EOL]                                     num = (num * 10) + (digitChars[offset] - '0'); [EOL]                                 } [EOL]                             } [EOL]                         } [EOL]                     } [EOL]                 } [EOL]             } [EOL]         } [EOL]     } [EOL]     return num; [EOL] }
public static int parseInt(char[] digitChars, int offset, int len) { [EOL]     int num = digitChars[offset] - '0'; [EOL]     len += offset; [EOL]     if (++offset < len) { [EOL]         num = (num * 10) + (digitChars[offset] - '0'); [EOL]         if (++offset < len) { [EOL]             num = (num * 10) + (digitChars[offset] - '0'); [EOL]             if (++offset < len) { [EOL]                 num = (num * 10) + (digitChars[offset] - '0'); [EOL]                 if (++offset < len) { [EOL]                     num = (num * 10) + (digitChars[offset] - '0'); [EOL]                     if (++offset < len) { [EOL]                         num = (num * 10) + (digitChars[offset] - '0'); [EOL]                         if (++offset < len) { [EOL]                             num = (num * 10) + (digitChars[offset] - '0'); [EOL]                             if (++offset < len) { [EOL]                                 num = (num * 10) + (digitChars[offset] - '0'); [EOL]                                 if (++offset < len) { [EOL]                                     num = (num * 10) + (digitChars[offset] - '0'); [EOL]                                 } [EOL]                             } [EOL]                         } [EOL]                     } [EOL]                 } [EOL]             } [EOL]         } [EOL]     } [EOL]     return num; [EOL] }
public static int parseInt(char[] digitChars, int offset, int len) { [EOL]     int num = digitChars[offset] - '0'; [EOL]     len += offset; [EOL]     if (++offset < len) { [EOL]         num = (num * 10) + (digitChars[offset] - '0'); [EOL]         if (++offset < len) { [EOL]             num = (num * 10) + (digitChars[offset] - '0'); [EOL]             if (++offset < len) { [EOL]                 num = (num * 10) + (digitChars[offset] - '0'); [EOL]                 if (++offset < len) { [EOL]                     num = (num * 10) + (digitChars[offset] - '0'); [EOL]                     if (++offset < len) { [EOL]                         num = (num * 10) + (digitChars[offset] - '0'); [EOL]                         if (++offset < len) { [EOL]                             num = (num * 10) + (digitChars[offset] - '0'); [EOL]                             if (++offset < len) { [EOL]                                 num = (num * 10) + (digitChars[offset] - '0'); [EOL]                                 if (++offset < len) { [EOL]                                     num = (num * 10) + (digitChars[offset] - '0'); [EOL]                                 } [EOL]                             } [EOL]                         } [EOL]                     } [EOL]                 } [EOL]             } [EOL]         } [EOL]     } [EOL]     return num; [EOL] }
public static int parseInt(String str) { [EOL]     char c = str.charAt(0); [EOL]     int length = str.length(); [EOL]     boolean negative = (c == '-'); [EOL]     int offset = 1; [EOL]     if (negative) { [EOL]         if (length == 1 || length > 10) { [EOL]             return Integer.parseInt(str); [EOL]         } [EOL]         c = str.charAt(offset++); [EOL]     } else { [EOL]         if (length > 9) { [EOL]             return Integer.parseInt(str); [EOL]         } [EOL]     } [EOL]     if (c > '9' || c < '0') { [EOL]         return Integer.parseInt(str); [EOL]     } [EOL]     int num = c - '0'; [EOL]     if (offset < length) { [EOL]         c = str.charAt(offset++); [EOL]         if (c > '9' || c < '0') { [EOL]             return Integer.parseInt(str); [EOL]         } [EOL]         num = (num * 10) + (c - '0'); [EOL]         if (offset < length) { [EOL]             c = str.charAt(offset++); [EOL]             if (c > '9' || c < '0') { [EOL]                 return Integer.parseInt(str); [EOL]             } [EOL]             num = (num * 10) + (c - '0'); [EOL]             if (offset < length) { [EOL]                 do { [EOL]                     c = str.charAt(offset++); [EOL]                     if (c > '9' || c < '0') { [EOL]                         return Integer.parseInt(str); [EOL]                     } [EOL]                     num = (num * 10) + (c - '0'); [EOL]                 } while (offset < length); [EOL]             } [EOL]         } [EOL]     } [EOL]     return negative ? -num : num; [EOL] }
public static int parseInt(String str) { [EOL]     char c = str.charAt(0); [EOL]     int length = str.length(); [EOL]     boolean negative = (c == '-'); [EOL]     int offset = 1; [EOL]     if (negative) { [EOL]         if (length == 1 || length > 10) { [EOL]             return Integer.parseInt(str); [EOL]         } [EOL]         c = str.charAt(offset++); [EOL]     } else { [EOL]         if (length > 9) { [EOL]             return Integer.parseInt(str); [EOL]         } [EOL]     } [EOL]     if (c > '9' || c < '0') { [EOL]         return Integer.parseInt(str); [EOL]     } [EOL]     int num = c - '0'; [EOL]     if (offset < length) { [EOL]         c = str.charAt(offset++); [EOL]         if (c > '9' || c < '0') { [EOL]             return Integer.parseInt(str); [EOL]         } [EOL]         num = (num * 10) + (c - '0'); [EOL]         if (offset < length) { [EOL]             c = str.charAt(offset++); [EOL]             if (c > '9' || c < '0') { [EOL]                 return Integer.parseInt(str); [EOL]             } [EOL]             num = (num * 10) + (c - '0'); [EOL]             if (offset < length) { [EOL]                 do { [EOL]                     c = str.charAt(offset++); [EOL]                     if (c > '9' || c < '0') { [EOL]                         return Integer.parseInt(str); [EOL]                     } [EOL]                     num = (num * 10) + (c - '0'); [EOL]                 } while (offset < length); [EOL]             } [EOL]         } [EOL]     } [EOL]     return negative ? -num : num; [EOL] }
public static int parseInt(String str) { [EOL]     char c = str.charAt(0); [EOL]     int length = str.length(); [EOL]     boolean negative = (c == '-'); [EOL]     int offset = 1; [EOL]     if (negative) { [EOL]         if (length == 1 || length > 10) { [EOL]             return Integer.parseInt(str); [EOL]         } [EOL]         c = str.charAt(offset++); [EOL]     } else { [EOL]         if (length > 9) { [EOL]             return Integer.parseInt(str); [EOL]         } [EOL]     } [EOL]     if (c > '9' || c < '0') { [EOL]         return Integer.parseInt(str); [EOL]     } [EOL]     int num = c - '0'; [EOL]     if (offset < length) { [EOL]         c = str.charAt(offset++); [EOL]         if (c > '9' || c < '0') { [EOL]             return Integer.parseInt(str); [EOL]         } [EOL]         num = (num * 10) + (c - '0'); [EOL]         if (offset < length) { [EOL]             c = str.charAt(offset++); [EOL]             if (c > '9' || c < '0') { [EOL]                 return Integer.parseInt(str); [EOL]             } [EOL]             num = (num * 10) + (c - '0'); [EOL]             if (offset < length) { [EOL]                 do { [EOL]                     c = str.charAt(offset++); [EOL]                     if (c > '9' || c < '0') { [EOL]                         return Integer.parseInt(str); [EOL]                     } [EOL]                     num = (num * 10) + (c - '0'); [EOL]                 } while (offset < length); [EOL]             } [EOL]         } [EOL]     } [EOL]     return negative ? -num : num; [EOL] }
public static int parseInt(String str) { [EOL]     char c = str.charAt(0); [EOL]     int length = str.length(); [EOL]     boolean negative = (c == '-'); [EOL]     int offset = 1; [EOL]     if (negative) { [EOL]         if (length == 1 || length > 10) { [EOL]             return Integer.parseInt(str); [EOL]         } [EOL]         c = str.charAt(offset++); [EOL]     } else { [EOL]         if (length > 9) { [EOL]             return Integer.parseInt(str); [EOL]         } [EOL]     } [EOL]     if (c > '9' || c < '0') { [EOL]         return Integer.parseInt(str); [EOL]     } [EOL]     int num = c - '0'; [EOL]     if (offset < length) { [EOL]         c = str.charAt(offset++); [EOL]         if (c > '9' || c < '0') { [EOL]             return Integer.parseInt(str); [EOL]         } [EOL]         num = (num * 10) + (c - '0'); [EOL]         if (offset < length) { [EOL]             c = str.charAt(offset++); [EOL]             if (c > '9' || c < '0') { [EOL]                 return Integer.parseInt(str); [EOL]             } [EOL]             num = (num * 10) + (c - '0'); [EOL]             if (offset < length) { [EOL]                 do { [EOL]                     c = str.charAt(offset++); [EOL]                     if (c > '9' || c < '0') { [EOL]                         return Integer.parseInt(str); [EOL]                     } [EOL]                     num = (num * 10) + (c - '0'); [EOL]                 } while (offset < length); [EOL]             } [EOL]         } [EOL]     } [EOL]     return negative ? -num : num; [EOL] }
public static int parseInt(String str) { [EOL]     char c = str.charAt(0); [EOL]     int length = str.length(); [EOL]     boolean negative = (c == '-'); [EOL]     int offset = 1; [EOL]     if (negative) { [EOL]         if (length == 1 || length > 10) { [EOL]             return Integer.parseInt(str); [EOL]         } [EOL]         c = str.charAt(offset++); [EOL]     } else { [EOL]         if (length > 9) { [EOL]             return Integer.parseInt(str); [EOL]         } [EOL]     } [EOL]     if (c > '9' || c < '0') { [EOL]         return Integer.parseInt(str); [EOL]     } [EOL]     int num = c - '0'; [EOL]     if (offset < length) { [EOL]         c = str.charAt(offset++); [EOL]         if (c > '9' || c < '0') { [EOL]             return Integer.parseInt(str); [EOL]         } [EOL]         num = (num * 10) + (c - '0'); [EOL]         if (offset < length) { [EOL]             c = str.charAt(offset++); [EOL]             if (c > '9' || c < '0') { [EOL]                 return Integer.parseInt(str); [EOL]             } [EOL]             num = (num * 10) + (c - '0'); [EOL]             if (offset < length) { [EOL]                 do { [EOL]                     c = str.charAt(offset++); [EOL]                     if (c > '9' || c < '0') { [EOL]                         return Integer.parseInt(str); [EOL]                     } [EOL]                     num = (num * 10) + (c - '0'); [EOL]                 } while (offset < length); [EOL]             } [EOL]         } [EOL]     } [EOL]     return negative ? -num : num; [EOL] }
public static int parseInt(String str) { [EOL]     char c = str.charAt(0); [EOL]     int length = str.length(); [EOL]     boolean negative = (c == '-'); [EOL]     int offset = 1; [EOL]     if (negative) { [EOL]         if (length == 1 || length > 10) { [EOL]             return Integer.parseInt(str); [EOL]         } [EOL]         c = str.charAt(offset++); [EOL]     } else { [EOL]         if (length > 9) { [EOL]             return Integer.parseInt(str); [EOL]         } [EOL]     } [EOL]     if (c > '9' || c < '0') { [EOL]         return Integer.parseInt(str); [EOL]     } [EOL]     int num = c - '0'; [EOL]     if (offset < length) { [EOL]         c = str.charAt(offset++); [EOL]         if (c > '9' || c < '0') { [EOL]             return Integer.parseInt(str); [EOL]         } [EOL]         num = (num * 10) + (c - '0'); [EOL]         if (offset < length) { [EOL]             c = str.charAt(offset++); [EOL]             if (c > '9' || c < '0') { [EOL]                 return Integer.parseInt(str); [EOL]             } [EOL]             num = (num * 10) + (c - '0'); [EOL]             if (offset < length) { [EOL]                 do { [EOL]                     c = str.charAt(offset++); [EOL]                     if (c > '9' || c < '0') { [EOL]                         return Integer.parseInt(str); [EOL]                     } [EOL]                     num = (num * 10) + (c - '0'); [EOL]                 } while (offset < length); [EOL]             } [EOL]         } [EOL]     } [EOL]     return negative ? -num : num; [EOL] }
public static int parseInt(String str) { [EOL]     char c = str.charAt(0); [EOL]     int length = str.length(); [EOL]     boolean negative = (c == '-'); [EOL]     int offset = 1; [EOL]     if (negative) { [EOL]         if (length == 1 || length > 10) { [EOL]             return Integer.parseInt(str); [EOL]         } [EOL]         c = str.charAt(offset++); [EOL]     } else { [EOL]         if (length > 9) { [EOL]             return Integer.parseInt(str); [EOL]         } [EOL]     } [EOL]     if (c > '9' || c < '0') { [EOL]         return Integer.parseInt(str); [EOL]     } [EOL]     int num = c - '0'; [EOL]     if (offset < length) { [EOL]         c = str.charAt(offset++); [EOL]         if (c > '9' || c < '0') { [EOL]             return Integer.parseInt(str); [EOL]         } [EOL]         num = (num * 10) + (c - '0'); [EOL]         if (offset < length) { [EOL]             c = str.charAt(offset++); [EOL]             if (c > '9' || c < '0') { [EOL]                 return Integer.parseInt(str); [EOL]             } [EOL]             num = (num * 10) + (c - '0'); [EOL]             if (offset < length) { [EOL]                 do { [EOL]                     c = str.charAt(offset++); [EOL]                     if (c > '9' || c < '0') { [EOL]                         return Integer.parseInt(str); [EOL]                     } [EOL]                     num = (num * 10) + (c - '0'); [EOL]                 } while (offset < length); [EOL]             } [EOL]         } [EOL]     } [EOL]     return negative ? -num : num; [EOL] }
public static int parseInt(String str) { [EOL]     char c = str.charAt(0); [EOL]     int length = str.length(); [EOL]     boolean negative = (c == '-'); [EOL]     int offset = 1; [EOL]     if (negative) { [EOL]         if (length == 1 || length > 10) { [EOL]             return Integer.parseInt(str); [EOL]         } [EOL]         c = str.charAt(offset++); [EOL]     } else { [EOL]         if (length > 9) { [EOL]             return Integer.parseInt(str); [EOL]         } [EOL]     } [EOL]     if (c > '9' || c < '0') { [EOL]         return Integer.parseInt(str); [EOL]     } [EOL]     int num = c - '0'; [EOL]     if (offset < length) { [EOL]         c = str.charAt(offset++); [EOL]         if (c > '9' || c < '0') { [EOL]             return Integer.parseInt(str); [EOL]         } [EOL]         num = (num * 10) + (c - '0'); [EOL]         if (offset < length) { [EOL]             c = str.charAt(offset++); [EOL]             if (c > '9' || c < '0') { [EOL]                 return Integer.parseInt(str); [EOL]             } [EOL]             num = (num * 10) + (c - '0'); [EOL]             if (offset < length) { [EOL]                 do { [EOL]                     c = str.charAt(offset++); [EOL]                     if (c > '9' || c < '0') { [EOL]                         return Integer.parseInt(str); [EOL]                     } [EOL]                     num = (num * 10) + (c - '0'); [EOL]                 } while (offset < length); [EOL]             } [EOL]         } [EOL]     } [EOL]     return negative ? -num : num; [EOL] }
public static int parseInt(String str) { [EOL]     char c = str.charAt(0); [EOL]     int length = str.length(); [EOL]     boolean negative = (c == '-'); [EOL]     int offset = 1; [EOL]     if (negative) { [EOL]         if (length == 1 || length > 10) { [EOL]             return Integer.parseInt(str); [EOL]         } [EOL]         c = str.charAt(offset++); [EOL]     } else { [EOL]         if (length > 9) { [EOL]             return Integer.parseInt(str); [EOL]         } [EOL]     } [EOL]     if (c > '9' || c < '0') { [EOL]         return Integer.parseInt(str); [EOL]     } [EOL]     int num = c - '0'; [EOL]     if (offset < length) { [EOL]         c = str.charAt(offset++); [EOL]         if (c > '9' || c < '0') { [EOL]             return Integer.parseInt(str); [EOL]         } [EOL]         num = (num * 10) + (c - '0'); [EOL]         if (offset < length) { [EOL]             c = str.charAt(offset++); [EOL]             if (c > '9' || c < '0') { [EOL]                 return Integer.parseInt(str); [EOL]             } [EOL]             num = (num * 10) + (c - '0'); [EOL]             if (offset < length) { [EOL]                 do { [EOL]                     c = str.charAt(offset++); [EOL]                     if (c > '9' || c < '0') { [EOL]                         return Integer.parseInt(str); [EOL]                     } [EOL]                     num = (num * 10) + (c - '0'); [EOL]                 } while (offset < length); [EOL]             } [EOL]         } [EOL]     } [EOL]     return negative ? -num : num; [EOL] }
public static int parseInt(String str) { [EOL]     char c = str.charAt(0); [EOL]     int length = str.length(); [EOL]     boolean negative = (c == '-'); [EOL]     int offset = 1; [EOL]     if (negative) { [EOL]         if (length == 1 || length > 10) { [EOL]             return Integer.parseInt(str); [EOL]         } [EOL]         c = str.charAt(offset++); [EOL]     } else { [EOL]         if (length > 9) { [EOL]             return Integer.parseInt(str); [EOL]         } [EOL]     } [EOL]     if (c > '9' || c < '0') { [EOL]         return Integer.parseInt(str); [EOL]     } [EOL]     int num = c - '0'; [EOL]     if (offset < length) { [EOL]         c = str.charAt(offset++); [EOL]         if (c > '9' || c < '0') { [EOL]             return Integer.parseInt(str); [EOL]         } [EOL]         num = (num * 10) + (c - '0'); [EOL]         if (offset < length) { [EOL]             c = str.charAt(offset++); [EOL]             if (c > '9' || c < '0') { [EOL]                 return Integer.parseInt(str); [EOL]             } [EOL]             num = (num * 10) + (c - '0'); [EOL]             if (offset < length) { [EOL]                 do { [EOL]                     c = str.charAt(offset++); [EOL]                     if (c > '9' || c < '0') { [EOL]                         return Integer.parseInt(str); [EOL]                     } [EOL]                     num = (num * 10) + (c - '0'); [EOL]                 } while (offset < length); [EOL]             } [EOL]         } [EOL]     } [EOL]     return negative ? -num : num; [EOL] }
public static int parseInt(String str) { [EOL]     char c = str.charAt(0); [EOL]     int length = str.length(); [EOL]     boolean negative = (c == '-'); [EOL]     int offset = 1; [EOL]     if (negative) { [EOL]         if (length == 1 || length > 10) { [EOL]             return Integer.parseInt(str); [EOL]         } [EOL]         c = str.charAt(offset++); [EOL]     } else { [EOL]         if (length > 9) { [EOL]             return Integer.parseInt(str); [EOL]         } [EOL]     } [EOL]     if (c > '9' || c < '0') { [EOL]         return Integer.parseInt(str); [EOL]     } [EOL]     int num = c - '0'; [EOL]     if (offset < length) { [EOL]         c = str.charAt(offset++); [EOL]         if (c > '9' || c < '0') { [EOL]             return Integer.parseInt(str); [EOL]         } [EOL]         num = (num * 10) + (c - '0'); [EOL]         if (offset < length) { [EOL]             c = str.charAt(offset++); [EOL]             if (c > '9' || c < '0') { [EOL]                 return Integer.parseInt(str); [EOL]             } [EOL]             num = (num * 10) + (c - '0'); [EOL]             if (offset < length) { [EOL]                 do { [EOL]                     c = str.charAt(offset++); [EOL]                     if (c > '9' || c < '0') { [EOL]                         return Integer.parseInt(str); [EOL]                     } [EOL]                     num = (num * 10) + (c - '0'); [EOL]                 } while (offset < length); [EOL]             } [EOL]         } [EOL]     } [EOL]     return negative ? -num : num; [EOL] }
public static long parseLong(char[] digitChars, int offset, int len) { [EOL]     int len1 = len - 9; [EOL]     long val = parseInt(digitChars, offset, len1) * L_BILLION; [EOL]     return val + (long) parseInt(digitChars, offset + len1, 9); [EOL] }
public static long parseLong(char[] digitChars, int offset, int len) { [EOL]     int len1 = len - 9; [EOL]     long val = parseInt(digitChars, offset, len1) * L_BILLION; [EOL]     return val + (long) parseInt(digitChars, offset + len1, 9); [EOL] }
public static long parseLong(char[] digitChars, int offset, int len) { [EOL]     int len1 = len - 9; [EOL]     long val = parseInt(digitChars, offset, len1) * L_BILLION; [EOL]     return val + (long) parseInt(digitChars, offset + len1, 9); [EOL] }
public static boolean inLongRange(char[] digitChars, int offset, int len, boolean negative) { [EOL]     String cmpStr = negative ? MIN_LONG_STR_NO_SIGN : MAX_LONG_STR; [EOL]     int cmpLen = cmpStr.length(); [EOL]     if (len < cmpLen) [EOL]         return true; [EOL]     if (len > cmpLen) [EOL]         return false; [EOL]     for (int i = 0; i < cmpLen; ++i) { [EOL]         int diff = digitChars[offset + i] - cmpStr.charAt(i); [EOL]         if (diff != 0) { [EOL]             return (diff < 0); [EOL]         } [EOL]     } [EOL]     return true; [EOL] }
public static boolean inLongRange(char[] digitChars, int offset, int len, boolean negative) { [EOL]     String cmpStr = negative ? MIN_LONG_STR_NO_SIGN : MAX_LONG_STR; [EOL]     int cmpLen = cmpStr.length(); [EOL]     if (len < cmpLen) [EOL]         return true; [EOL]     if (len > cmpLen) [EOL]         return false; [EOL]     for (int i = 0; i < cmpLen; ++i) { [EOL]         int diff = digitChars[offset + i] - cmpStr.charAt(i); [EOL]         if (diff != 0) { [EOL]             return (diff < 0); [EOL]         } [EOL]     } [EOL]     return true; [EOL] }
public static boolean inLongRange(char[] digitChars, int offset, int len, boolean negative) { [EOL]     String cmpStr = negative ? MIN_LONG_STR_NO_SIGN : MAX_LONG_STR; [EOL]     int cmpLen = cmpStr.length(); [EOL]     if (len < cmpLen) [EOL]         return true; [EOL]     if (len > cmpLen) [EOL]         return false; [EOL]     for (int i = 0; i < cmpLen; ++i) { [EOL]         int diff = digitChars[offset + i] - cmpStr.charAt(i); [EOL]         if (diff != 0) { [EOL]             return (diff < 0); [EOL]         } [EOL]     } [EOL]     return true; [EOL] }
public static boolean inLongRange(char[] digitChars, int offset, int len, boolean negative) { [EOL]     String cmpStr = negative ? MIN_LONG_STR_NO_SIGN : MAX_LONG_STR; [EOL]     int cmpLen = cmpStr.length(); [EOL]     if (len < cmpLen) [EOL]         return true; [EOL]     if (len > cmpLen) [EOL]         return false; [EOL]     for (int i = 0; i < cmpLen; ++i) { [EOL]         int diff = digitChars[offset + i] - cmpStr.charAt(i); [EOL]         if (diff != 0) { [EOL]             return (diff < 0); [EOL]         } [EOL]     } [EOL]     return true; [EOL] }
public static boolean inLongRange(char[] digitChars, int offset, int len, boolean negative) { [EOL]     String cmpStr = negative ? MIN_LONG_STR_NO_SIGN : MAX_LONG_STR; [EOL]     int cmpLen = cmpStr.length(); [EOL]     if (len < cmpLen) [EOL]         return true; [EOL]     if (len > cmpLen) [EOL]         return false; [EOL]     for (int i = 0; i < cmpLen; ++i) { [EOL]         int diff = digitChars[offset + i] - cmpStr.charAt(i); [EOL]         if (diff != 0) { [EOL]             return (diff < 0); [EOL]         } [EOL]     } [EOL]     return true; [EOL] }
public static boolean inLongRange(char[] digitChars, int offset, int len, boolean negative) { [EOL]     String cmpStr = negative ? MIN_LONG_STR_NO_SIGN : MAX_LONG_STR; [EOL]     int cmpLen = cmpStr.length(); [EOL]     if (len < cmpLen) [EOL]         return true; [EOL]     if (len > cmpLen) [EOL]         return false; [EOL]     for (int i = 0; i < cmpLen; ++i) { [EOL]         int diff = digitChars[offset + i] - cmpStr.charAt(i); [EOL]         if (diff != 0) { [EOL]             return (diff < 0); [EOL]         } [EOL]     } [EOL]     return true; [EOL] }
public static boolean inLongRange(char[] digitChars, int offset, int len, boolean negative) { [EOL]     String cmpStr = negative ? MIN_LONG_STR_NO_SIGN : MAX_LONG_STR; [EOL]     int cmpLen = cmpStr.length(); [EOL]     if (len < cmpLen) [EOL]         return true; [EOL]     if (len > cmpLen) [EOL]         return false; [EOL]     for (int i = 0; i < cmpLen; ++i) { [EOL]         int diff = digitChars[offset + i] - cmpStr.charAt(i); [EOL]         if (diff != 0) { [EOL]             return (diff < 0); [EOL]         } [EOL]     } [EOL]     return true; [EOL] }
public static boolean inLongRange(char[] digitChars, int offset, int len, boolean negative) { [EOL]     String cmpStr = negative ? MIN_LONG_STR_NO_SIGN : MAX_LONG_STR; [EOL]     int cmpLen = cmpStr.length(); [EOL]     if (len < cmpLen) [EOL]         return true; [EOL]     if (len > cmpLen) [EOL]         return false; [EOL]     for (int i = 0; i < cmpLen; ++i) { [EOL]         int diff = digitChars[offset + i] - cmpStr.charAt(i); [EOL]         if (diff != 0) { [EOL]             return (diff < 0); [EOL]         } [EOL]     } [EOL]     return true; [EOL] }
@Override [EOL] public ObjectCodec getCodec() { [EOL]     return _objectCodec; [EOL] }
@Override [EOL] public ObjectCodec getCodec() { [EOL]     return _objectCodec; [EOL] }
@Override [EOL] public int releaseBuffered(OutputStream out) throws IOException { [EOL]     int count = _inputEnd - _inputPtr; [EOL]     if (count < 1) { [EOL]         return 0; [EOL]     } [EOL]     int origPtr = _inputPtr; [EOL]     out.write(_inputBuffer, origPtr, count); [EOL]     return count; [EOL] }
@Override [EOL] public int releaseBuffered(OutputStream out) throws IOException { [EOL]     int count = _inputEnd - _inputPtr; [EOL]     if (count < 1) { [EOL]         return 0; [EOL]     } [EOL]     int origPtr = _inputPtr; [EOL]     out.write(_inputBuffer, origPtr, count); [EOL]     return count; [EOL] }
protected String _getText2(JsonToken t) { [EOL]     if (t == null) { [EOL]         return null; [EOL]     } [EOL]     switch(t) { [EOL]         case FIELD_NAME: [EOL]             return _parsingContext.getCurrentName(); [EOL]         case VALUE_STRING: [EOL]         case VALUE_NUMBER_INT: [EOL]         case VALUE_NUMBER_FLOAT: [EOL]             return _textBuffer.contentsAsString(); [EOL]         default: [EOL]             return t.asString(); [EOL]     } [EOL] }
protected String _getText2(JsonToken t) { [EOL]     if (t == null) { [EOL]         return null; [EOL]     } [EOL]     switch(t) { [EOL]         case FIELD_NAME: [EOL]             return _parsingContext.getCurrentName(); [EOL]         case VALUE_STRING: [EOL]         case VALUE_NUMBER_INT: [EOL]         case VALUE_NUMBER_FLOAT: [EOL]             return _textBuffer.contentsAsString(); [EOL]         default: [EOL]             return t.asString(); [EOL]     } [EOL] }
protected String _getText2(JsonToken t) { [EOL]     if (t == null) { [EOL]         return null; [EOL]     } [EOL]     switch(t) { [EOL]         case FIELD_NAME: [EOL]             return _parsingContext.getCurrentName(); [EOL]         case VALUE_STRING: [EOL]         case VALUE_NUMBER_INT: [EOL]         case VALUE_NUMBER_FLOAT: [EOL]             return _textBuffer.contentsAsString(); [EOL]         default: [EOL]             return t.asString(); [EOL]     } [EOL] }
protected String _getText2(JsonToken t) { [EOL]     if (t == null) { [EOL]         return null; [EOL]     } [EOL]     switch(t) { [EOL]         case FIELD_NAME: [EOL]             return _parsingContext.getCurrentName(); [EOL]         case VALUE_STRING: [EOL]         case VALUE_NUMBER_INT: [EOL]         case VALUE_NUMBER_FLOAT: [EOL]             return _textBuffer.contentsAsString(); [EOL]         default: [EOL]             return t.asString(); [EOL]     } [EOL] }
protected String _getText2(JsonToken t) { [EOL]     if (t == null) { [EOL]         return null; [EOL]     } [EOL]     switch(t) { [EOL]         case FIELD_NAME: [EOL]             return _parsingContext.getCurrentName(); [EOL]         case VALUE_STRING: [EOL]         case VALUE_NUMBER_INT: [EOL]         case VALUE_NUMBER_FLOAT: [EOL]             return _textBuffer.contentsAsString(); [EOL]         default: [EOL]             return t.asString(); [EOL]     } [EOL] }
protected String _getText2(JsonToken t) { [EOL]     if (t == null) { [EOL]         return null; [EOL]     } [EOL]     switch(t) { [EOL]         case FIELD_NAME: [EOL]             return _parsingContext.getCurrentName(); [EOL]         case VALUE_STRING: [EOL]         case VALUE_NUMBER_INT: [EOL]         case VALUE_NUMBER_FLOAT: [EOL]             return _textBuffer.contentsAsString(); [EOL]         default: [EOL]             return t.asString(); [EOL]     } [EOL] }
@Override [EOL] public char[] getTextCharacters() throws IOException, JsonParseException { [EOL]     if (_currToken != null) { [EOL]         switch(_currToken) { [EOL]             case FIELD_NAME: [EOL]                 if (!_nameCopied) { [EOL]                     String name = _parsingContext.getCurrentName(); [EOL]                     int nameLen = name.length(); [EOL]                     if (_nameCopyBuffer == null) { [EOL]                         _nameCopyBuffer = _ioContext.allocNameCopyBuffer(nameLen); [EOL]                     } else if (_nameCopyBuffer.length < nameLen) { [EOL]                         _nameCopyBuffer = new char[nameLen]; [EOL]                     } [EOL]                     name.getChars(0, nameLen, _nameCopyBuffer, 0); [EOL]                     _nameCopied = true; [EOL]                 } [EOL]                 return _nameCopyBuffer; [EOL]             case VALUE_STRING: [EOL]                 if (_tokenIncomplete) { [EOL]                     _tokenIncomplete = false; [EOL]                     _finishString(); [EOL]                 } [EOL]             case VALUE_NUMBER_INT: [EOL]             case VALUE_NUMBER_FLOAT: [EOL]                 return _textBuffer.getTextBuffer(); [EOL]             default: [EOL]                 return _currToken.asCharArray(); [EOL]         } [EOL]     } [EOL]     return null; [EOL] }
@Override [EOL] public char[] getTextCharacters() throws IOException, JsonParseException { [EOL]     if (_currToken != null) { [EOL]         switch(_currToken) { [EOL]             case FIELD_NAME: [EOL]                 if (!_nameCopied) { [EOL]                     String name = _parsingContext.getCurrentName(); [EOL]                     int nameLen = name.length(); [EOL]                     if (_nameCopyBuffer == null) { [EOL]                         _nameCopyBuffer = _ioContext.allocNameCopyBuffer(nameLen); [EOL]                     } else if (_nameCopyBuffer.length < nameLen) { [EOL]                         _nameCopyBuffer = new char[nameLen]; [EOL]                     } [EOL]                     name.getChars(0, nameLen, _nameCopyBuffer, 0); [EOL]                     _nameCopied = true; [EOL]                 } [EOL]                 return _nameCopyBuffer; [EOL]             case VALUE_STRING: [EOL]                 if (_tokenIncomplete) { [EOL]                     _tokenIncomplete = false; [EOL]                     _finishString(); [EOL]                 } [EOL]             case VALUE_NUMBER_INT: [EOL]             case VALUE_NUMBER_FLOAT: [EOL]                 return _textBuffer.getTextBuffer(); [EOL]             default: [EOL]                 return _currToken.asCharArray(); [EOL]         } [EOL]     } [EOL]     return null; [EOL] }
@Override [EOL] public char[] getTextCharacters() throws IOException, JsonParseException { [EOL]     if (_currToken != null) { [EOL]         switch(_currToken) { [EOL]             case FIELD_NAME: [EOL]                 if (!_nameCopied) { [EOL]                     String name = _parsingContext.getCurrentName(); [EOL]                     int nameLen = name.length(); [EOL]                     if (_nameCopyBuffer == null) { [EOL]                         _nameCopyBuffer = _ioContext.allocNameCopyBuffer(nameLen); [EOL]                     } else if (_nameCopyBuffer.length < nameLen) { [EOL]                         _nameCopyBuffer = new char[nameLen]; [EOL]                     } [EOL]                     name.getChars(0, nameLen, _nameCopyBuffer, 0); [EOL]                     _nameCopied = true; [EOL]                 } [EOL]                 return _nameCopyBuffer; [EOL]             case VALUE_STRING: [EOL]                 if (_tokenIncomplete) { [EOL]                     _tokenIncomplete = false; [EOL]                     _finishString(); [EOL]                 } [EOL]             case VALUE_NUMBER_INT: [EOL]             case VALUE_NUMBER_FLOAT: [EOL]                 return _textBuffer.getTextBuffer(); [EOL]             default: [EOL]                 return _currToken.asCharArray(); [EOL]         } [EOL]     } [EOL]     return null; [EOL] }
@Override [EOL] public char[] getTextCharacters() throws IOException, JsonParseException { [EOL]     if (_currToken != null) { [EOL]         switch(_currToken) { [EOL]             case FIELD_NAME: [EOL]                 if (!_nameCopied) { [EOL]                     String name = _parsingContext.getCurrentName(); [EOL]                     int nameLen = name.length(); [EOL]                     if (_nameCopyBuffer == null) { [EOL]                         _nameCopyBuffer = _ioContext.allocNameCopyBuffer(nameLen); [EOL]                     } else if (_nameCopyBuffer.length < nameLen) { [EOL]                         _nameCopyBuffer = new char[nameLen]; [EOL]                     } [EOL]                     name.getChars(0, nameLen, _nameCopyBuffer, 0); [EOL]                     _nameCopied = true; [EOL]                 } [EOL]                 return _nameCopyBuffer; [EOL]             case VALUE_STRING: [EOL]                 if (_tokenIncomplete) { [EOL]                     _tokenIncomplete = false; [EOL]                     _finishString(); [EOL]                 } [EOL]             case VALUE_NUMBER_INT: [EOL]             case VALUE_NUMBER_FLOAT: [EOL]                 return _textBuffer.getTextBuffer(); [EOL]             default: [EOL]                 return _currToken.asCharArray(); [EOL]         } [EOL]     } [EOL]     return null; [EOL] }
@Override [EOL] public char[] getTextCharacters() throws IOException, JsonParseException { [EOL]     if (_currToken != null) { [EOL]         switch(_currToken) { [EOL]             case FIELD_NAME: [EOL]                 if (!_nameCopied) { [EOL]                     String name = _parsingContext.getCurrentName(); [EOL]                     int nameLen = name.length(); [EOL]                     if (_nameCopyBuffer == null) { [EOL]                         _nameCopyBuffer = _ioContext.allocNameCopyBuffer(nameLen); [EOL]                     } else if (_nameCopyBuffer.length < nameLen) { [EOL]                         _nameCopyBuffer = new char[nameLen]; [EOL]                     } [EOL]                     name.getChars(0, nameLen, _nameCopyBuffer, 0); [EOL]                     _nameCopied = true; [EOL]                 } [EOL]                 return _nameCopyBuffer; [EOL]             case VALUE_STRING: [EOL]                 if (_tokenIncomplete) { [EOL]                     _tokenIncomplete = false; [EOL]                     _finishString(); [EOL]                 } [EOL]             case VALUE_NUMBER_INT: [EOL]             case VALUE_NUMBER_FLOAT: [EOL]                 return _textBuffer.getTextBuffer(); [EOL]             default: [EOL]                 return _currToken.asCharArray(); [EOL]         } [EOL]     } [EOL]     return null; [EOL] }
@Override [EOL] public char[] getTextCharacters() throws IOException, JsonParseException { [EOL]     if (_currToken != null) { [EOL]         switch(_currToken) { [EOL]             case FIELD_NAME: [EOL]                 if (!_nameCopied) { [EOL]                     String name = _parsingContext.getCurrentName(); [EOL]                     int nameLen = name.length(); [EOL]                     if (_nameCopyBuffer == null) { [EOL]                         _nameCopyBuffer = _ioContext.allocNameCopyBuffer(nameLen); [EOL]                     } else if (_nameCopyBuffer.length < nameLen) { [EOL]                         _nameCopyBuffer = new char[nameLen]; [EOL]                     } [EOL]                     name.getChars(0, nameLen, _nameCopyBuffer, 0); [EOL]                     _nameCopied = true; [EOL]                 } [EOL]                 return _nameCopyBuffer; [EOL]             case VALUE_STRING: [EOL]                 if (_tokenIncomplete) { [EOL]                     _tokenIncomplete = false; [EOL]                     _finishString(); [EOL]                 } [EOL]             case VALUE_NUMBER_INT: [EOL]             case VALUE_NUMBER_FLOAT: [EOL]                 return _textBuffer.getTextBuffer(); [EOL]             default: [EOL]                 return _currToken.asCharArray(); [EOL]         } [EOL]     } [EOL]     return null; [EOL] }
@Override [EOL] public int getTextLength() throws IOException, JsonParseException { [EOL]     if (_currToken != null) { [EOL]         switch(_currToken) { [EOL]             case FIELD_NAME: [EOL]                 return _parsingContext.getCurrentName().length(); [EOL]             case VALUE_STRING: [EOL]                 if (_tokenIncomplete) { [EOL]                     _tokenIncomplete = false; [EOL]                     _finishString(); [EOL]                 } [EOL]             case VALUE_NUMBER_INT: [EOL]             case VALUE_NUMBER_FLOAT: [EOL]                 return _textBuffer.size(); [EOL]             default: [EOL]                 return _currToken.asCharArray().length; [EOL]         } [EOL]     } [EOL]     return 0; [EOL] }
@Override [EOL] public int getTextLength() throws IOException, JsonParseException { [EOL]     if (_currToken != null) { [EOL]         switch(_currToken) { [EOL]             case FIELD_NAME: [EOL]                 return _parsingContext.getCurrentName().length(); [EOL]             case VALUE_STRING: [EOL]                 if (_tokenIncomplete) { [EOL]                     _tokenIncomplete = false; [EOL]                     _finishString(); [EOL]                 } [EOL]             case VALUE_NUMBER_INT: [EOL]             case VALUE_NUMBER_FLOAT: [EOL]                 return _textBuffer.size(); [EOL]             default: [EOL]                 return _currToken.asCharArray().length; [EOL]         } [EOL]     } [EOL]     return 0; [EOL] }
@Override [EOL] public int getTextLength() throws IOException, JsonParseException { [EOL]     if (_currToken != null) { [EOL]         switch(_currToken) { [EOL]             case FIELD_NAME: [EOL]                 return _parsingContext.getCurrentName().length(); [EOL]             case VALUE_STRING: [EOL]                 if (_tokenIncomplete) { [EOL]                     _tokenIncomplete = false; [EOL]                     _finishString(); [EOL]                 } [EOL]             case VALUE_NUMBER_INT: [EOL]             case VALUE_NUMBER_FLOAT: [EOL]                 return _textBuffer.size(); [EOL]             default: [EOL]                 return _currToken.asCharArray().length; [EOL]         } [EOL]     } [EOL]     return 0; [EOL] }
@Override [EOL] public int getTextLength() throws IOException, JsonParseException { [EOL]     if (_currToken != null) { [EOL]         switch(_currToken) { [EOL]             case FIELD_NAME: [EOL]                 return _parsingContext.getCurrentName().length(); [EOL]             case VALUE_STRING: [EOL]                 if (_tokenIncomplete) { [EOL]                     _tokenIncomplete = false; [EOL]                     _finishString(); [EOL]                 } [EOL]             case VALUE_NUMBER_INT: [EOL]             case VALUE_NUMBER_FLOAT: [EOL]                 return _textBuffer.size(); [EOL]             default: [EOL]                 return _currToken.asCharArray().length; [EOL]         } [EOL]     } [EOL]     return 0; [EOL] }
@Override [EOL] public int getTextLength() throws IOException, JsonParseException { [EOL]     if (_currToken != null) { [EOL]         switch(_currToken) { [EOL]             case FIELD_NAME: [EOL]                 return _parsingContext.getCurrentName().length(); [EOL]             case VALUE_STRING: [EOL]                 if (_tokenIncomplete) { [EOL]                     _tokenIncomplete = false; [EOL]                     _finishString(); [EOL]                 } [EOL]             case VALUE_NUMBER_INT: [EOL]             case VALUE_NUMBER_FLOAT: [EOL]                 return _textBuffer.size(); [EOL]             default: [EOL]                 return _currToken.asCharArray().length; [EOL]         } [EOL]     } [EOL]     return 0; [EOL] }
@Override [EOL] public int getTextLength() throws IOException, JsonParseException { [EOL]     if (_currToken != null) { [EOL]         switch(_currToken) { [EOL]             case FIELD_NAME: [EOL]                 return _parsingContext.getCurrentName().length(); [EOL]             case VALUE_STRING: [EOL]                 if (_tokenIncomplete) { [EOL]                     _tokenIncomplete = false; [EOL]                     _finishString(); [EOL]                 } [EOL]             case VALUE_NUMBER_INT: [EOL]             case VALUE_NUMBER_FLOAT: [EOL]                 return _textBuffer.size(); [EOL]             default: [EOL]                 return _currToken.asCharArray().length; [EOL]         } [EOL]     } [EOL]     return 0; [EOL] }
@Override [EOL] public int getTextLength() throws IOException, JsonParseException { [EOL]     if (_currToken != null) { [EOL]         switch(_currToken) { [EOL]             case FIELD_NAME: [EOL]                 return _parsingContext.getCurrentName().length(); [EOL]             case VALUE_STRING: [EOL]                 if (_tokenIncomplete) { [EOL]                     _tokenIncomplete = false; [EOL]                     _finishString(); [EOL]                 } [EOL]             case VALUE_NUMBER_INT: [EOL]             case VALUE_NUMBER_FLOAT: [EOL]                 return _textBuffer.size(); [EOL]             default: [EOL]                 return _currToken.asCharArray().length; [EOL]         } [EOL]     } [EOL]     return 0; [EOL] }
@Override [EOL] public int getTextOffset() throws IOException, JsonParseException { [EOL]     if (_currToken != null) { [EOL]         switch(_currToken) { [EOL]             case FIELD_NAME: [EOL]                 return 0; [EOL]             case VALUE_STRING: [EOL]                 if (_tokenIncomplete) { [EOL]                     _tokenIncomplete = false; [EOL]                     _finishString(); [EOL]                 } [EOL]             case VALUE_NUMBER_INT: [EOL]             case VALUE_NUMBER_FLOAT: [EOL]                 return _textBuffer.getTextOffset(); [EOL]             default: [EOL]         } [EOL]     } [EOL]     return 0; [EOL] }
@Override [EOL] public int getTextOffset() throws IOException, JsonParseException { [EOL]     if (_currToken != null) { [EOL]         switch(_currToken) { [EOL]             case FIELD_NAME: [EOL]                 return 0; [EOL]             case VALUE_STRING: [EOL]                 if (_tokenIncomplete) { [EOL]                     _tokenIncomplete = false; [EOL]                     _finishString(); [EOL]                 } [EOL]             case VALUE_NUMBER_INT: [EOL]             case VALUE_NUMBER_FLOAT: [EOL]                 return _textBuffer.getTextOffset(); [EOL]             default: [EOL]         } [EOL]     } [EOL]     return 0; [EOL] }
@Override [EOL] public int getTextOffset() throws IOException, JsonParseException { [EOL]     if (_currToken != null) { [EOL]         switch(_currToken) { [EOL]             case FIELD_NAME: [EOL]                 return 0; [EOL]             case VALUE_STRING: [EOL]                 if (_tokenIncomplete) { [EOL]                     _tokenIncomplete = false; [EOL]                     _finishString(); [EOL]                 } [EOL]             case VALUE_NUMBER_INT: [EOL]             case VALUE_NUMBER_FLOAT: [EOL]                 return _textBuffer.getTextOffset(); [EOL]             default: [EOL]         } [EOL]     } [EOL]     return 0; [EOL] }
@Override [EOL] public int getTextOffset() throws IOException, JsonParseException { [EOL]     if (_currToken != null) { [EOL]         switch(_currToken) { [EOL]             case FIELD_NAME: [EOL]                 return 0; [EOL]             case VALUE_STRING: [EOL]                 if (_tokenIncomplete) { [EOL]                     _tokenIncomplete = false; [EOL]                     _finishString(); [EOL]                 } [EOL]             case VALUE_NUMBER_INT: [EOL]             case VALUE_NUMBER_FLOAT: [EOL]                 return _textBuffer.getTextOffset(); [EOL]             default: [EOL]         } [EOL]     } [EOL]     return 0; [EOL] }
@Override [EOL] public int getTextOffset() throws IOException, JsonParseException { [EOL]     if (_currToken != null) { [EOL]         switch(_currToken) { [EOL]             case FIELD_NAME: [EOL]                 return 0; [EOL]             case VALUE_STRING: [EOL]                 if (_tokenIncomplete) { [EOL]                     _tokenIncomplete = false; [EOL]                     _finishString(); [EOL]                 } [EOL]             case VALUE_NUMBER_INT: [EOL]             case VALUE_NUMBER_FLOAT: [EOL]                 return _textBuffer.getTextOffset(); [EOL]             default: [EOL]         } [EOL]     } [EOL]     return 0; [EOL] }
@Override [EOL] public int getTextOffset() throws IOException, JsonParseException { [EOL]     if (_currToken != null) { [EOL]         switch(_currToken) { [EOL]             case FIELD_NAME: [EOL]                 return 0; [EOL]             case VALUE_STRING: [EOL]                 if (_tokenIncomplete) { [EOL]                     _tokenIncomplete = false; [EOL]                     _finishString(); [EOL]                 } [EOL]             case VALUE_NUMBER_INT: [EOL]             case VALUE_NUMBER_FLOAT: [EOL]                 return _textBuffer.getTextOffset(); [EOL]             default: [EOL]         } [EOL]     } [EOL]     return 0; [EOL] }
private JsonToken _nextTokenNotInObject(int i) throws IOException, JsonParseException { [EOL]     if (i == INT_QUOTE) { [EOL]         _tokenIncomplete = true; [EOL]         return (_currToken = JsonToken.VALUE_STRING); [EOL]     } [EOL]     switch(i) { [EOL]         case INT_LBRACKET: [EOL]             _parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol); [EOL]             return (_currToken = JsonToken.START_ARRAY); [EOL]         case INT_LCURLY: [EOL]             _parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol); [EOL]             return (_currToken = JsonToken.START_OBJECT); [EOL]         case INT_RBRACKET: [EOL]         case INT_RCURLY: [EOL]             _reportUnexpectedChar(i, "expected a value"); [EOL]         case INT_t: [EOL]             _matchToken("true", 1); [EOL]             return (_currToken = JsonToken.VALUE_TRUE); [EOL]         case INT_f: [EOL]             _matchToken("false", 1); [EOL]             return (_currToken = JsonToken.VALUE_FALSE); [EOL]         case INT_n: [EOL]             _matchToken("null", 1); [EOL]             return (_currToken = JsonToken.VALUE_NULL); [EOL]         case INT_MINUS: [EOL]         case INT_0: [EOL]         case INT_1: [EOL]         case INT_2: [EOL]         case INT_3: [EOL]         case INT_4: [EOL]         case INT_5: [EOL]         case INT_6: [EOL]         case INT_7: [EOL]         case INT_8: [EOL]         case INT_9: [EOL]             return (_currToken = parseNumberText(i)); [EOL]     } [EOL]     return (_currToken = _handleUnexpectedValue(i)); [EOL] }
private JsonToken _nextTokenNotInObject(int i) throws IOException, JsonParseException { [EOL]     if (i == INT_QUOTE) { [EOL]         _tokenIncomplete = true; [EOL]         return (_currToken = JsonToken.VALUE_STRING); [EOL]     } [EOL]     switch(i) { [EOL]         case INT_LBRACKET: [EOL]             _parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol); [EOL]             return (_currToken = JsonToken.START_ARRAY); [EOL]         case INT_LCURLY: [EOL]             _parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol); [EOL]             return (_currToken = JsonToken.START_OBJECT); [EOL]         case INT_RBRACKET: [EOL]         case INT_RCURLY: [EOL]             _reportUnexpectedChar(i, "expected a value"); [EOL]         case INT_t: [EOL]             _matchToken("true", 1); [EOL]             return (_currToken = JsonToken.VALUE_TRUE); [EOL]         case INT_f: [EOL]             _matchToken("false", 1); [EOL]             return (_currToken = JsonToken.VALUE_FALSE); [EOL]         case INT_n: [EOL]             _matchToken("null", 1); [EOL]             return (_currToken = JsonToken.VALUE_NULL); [EOL]         case INT_MINUS: [EOL]         case INT_0: [EOL]         case INT_1: [EOL]         case INT_2: [EOL]         case INT_3: [EOL]         case INT_4: [EOL]         case INT_5: [EOL]         case INT_6: [EOL]         case INT_7: [EOL]         case INT_8: [EOL]         case INT_9: [EOL]             return (_currToken = parseNumberText(i)); [EOL]     } [EOL]     return (_currToken = _handleUnexpectedValue(i)); [EOL] }
private JsonToken _nextTokenNotInObject(int i) throws IOException, JsonParseException { [EOL]     if (i == INT_QUOTE) { [EOL]         _tokenIncomplete = true; [EOL]         return (_currToken = JsonToken.VALUE_STRING); [EOL]     } [EOL]     switch(i) { [EOL]         case INT_LBRACKET: [EOL]             _parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol); [EOL]             return (_currToken = JsonToken.START_ARRAY); [EOL]         case INT_LCURLY: [EOL]             _parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol); [EOL]             return (_currToken = JsonToken.START_OBJECT); [EOL]         case INT_RBRACKET: [EOL]         case INT_RCURLY: [EOL]             _reportUnexpectedChar(i, "expected a value"); [EOL]         case INT_t: [EOL]             _matchToken("true", 1); [EOL]             return (_currToken = JsonToken.VALUE_TRUE); [EOL]         case INT_f: [EOL]             _matchToken("false", 1); [EOL]             return (_currToken = JsonToken.VALUE_FALSE); [EOL]         case INT_n: [EOL]             _matchToken("null", 1); [EOL]             return (_currToken = JsonToken.VALUE_NULL); [EOL]         case INT_MINUS: [EOL]         case INT_0: [EOL]         case INT_1: [EOL]         case INT_2: [EOL]         case INT_3: [EOL]         case INT_4: [EOL]         case INT_5: [EOL]         case INT_6: [EOL]         case INT_7: [EOL]         case INT_8: [EOL]         case INT_9: [EOL]             return (_currToken = parseNumberText(i)); [EOL]     } [EOL]     return (_currToken = _handleUnexpectedValue(i)); [EOL] }
private JsonToken _nextTokenNotInObject(int i) throws IOException, JsonParseException { [EOL]     if (i == INT_QUOTE) { [EOL]         _tokenIncomplete = true; [EOL]         return (_currToken = JsonToken.VALUE_STRING); [EOL]     } [EOL]     switch(i) { [EOL]         case INT_LBRACKET: [EOL]             _parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol); [EOL]             return (_currToken = JsonToken.START_ARRAY); [EOL]         case INT_LCURLY: [EOL]             _parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol); [EOL]             return (_currToken = JsonToken.START_OBJECT); [EOL]         case INT_RBRACKET: [EOL]         case INT_RCURLY: [EOL]             _reportUnexpectedChar(i, "expected a value"); [EOL]         case INT_t: [EOL]             _matchToken("true", 1); [EOL]             return (_currToken = JsonToken.VALUE_TRUE); [EOL]         case INT_f: [EOL]             _matchToken("false", 1); [EOL]             return (_currToken = JsonToken.VALUE_FALSE); [EOL]         case INT_n: [EOL]             _matchToken("null", 1); [EOL]             return (_currToken = JsonToken.VALUE_NULL); [EOL]         case INT_MINUS: [EOL]         case INT_0: [EOL]         case INT_1: [EOL]         case INT_2: [EOL]         case INT_3: [EOL]         case INT_4: [EOL]         case INT_5: [EOL]         case INT_6: [EOL]         case INT_7: [EOL]         case INT_8: [EOL]         case INT_9: [EOL]             return (_currToken = parseNumberText(i)); [EOL]     } [EOL]     return (_currToken = _handleUnexpectedValue(i)); [EOL] }
private JsonToken _nextTokenNotInObject(int i) throws IOException, JsonParseException { [EOL]     if (i == INT_QUOTE) { [EOL]         _tokenIncomplete = true; [EOL]         return (_currToken = JsonToken.VALUE_STRING); [EOL]     } [EOL]     switch(i) { [EOL]         case INT_LBRACKET: [EOL]             _parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol); [EOL]             return (_currToken = JsonToken.START_ARRAY); [EOL]         case INT_LCURLY: [EOL]             _parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol); [EOL]             return (_currToken = JsonToken.START_OBJECT); [EOL]         case INT_RBRACKET: [EOL]         case INT_RCURLY: [EOL]             _reportUnexpectedChar(i, "expected a value"); [EOL]         case INT_t: [EOL]             _matchToken("true", 1); [EOL]             return (_currToken = JsonToken.VALUE_TRUE); [EOL]         case INT_f: [EOL]             _matchToken("false", 1); [EOL]             return (_currToken = JsonToken.VALUE_FALSE); [EOL]         case INT_n: [EOL]             _matchToken("null", 1); [EOL]             return (_currToken = JsonToken.VALUE_NULL); [EOL]         case INT_MINUS: [EOL]         case INT_0: [EOL]         case INT_1: [EOL]         case INT_2: [EOL]         case INT_3: [EOL]         case INT_4: [EOL]         case INT_5: [EOL]         case INT_6: [EOL]         case INT_7: [EOL]         case INT_8: [EOL]         case INT_9: [EOL]             return (_currToken = parseNumberText(i)); [EOL]     } [EOL]     return (_currToken = _handleUnexpectedValue(i)); [EOL] }
private JsonToken _nextTokenNotInObject(int i) throws IOException, JsonParseException { [EOL]     if (i == INT_QUOTE) { [EOL]         _tokenIncomplete = true; [EOL]         return (_currToken = JsonToken.VALUE_STRING); [EOL]     } [EOL]     switch(i) { [EOL]         case INT_LBRACKET: [EOL]             _parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol); [EOL]             return (_currToken = JsonToken.START_ARRAY); [EOL]         case INT_LCURLY: [EOL]             _parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol); [EOL]             return (_currToken = JsonToken.START_OBJECT); [EOL]         case INT_RBRACKET: [EOL]         case INT_RCURLY: [EOL]             _reportUnexpectedChar(i, "expected a value"); [EOL]         case INT_t: [EOL]             _matchToken("true", 1); [EOL]             return (_currToken = JsonToken.VALUE_TRUE); [EOL]         case INT_f: [EOL]             _matchToken("false", 1); [EOL]             return (_currToken = JsonToken.VALUE_FALSE); [EOL]         case INT_n: [EOL]             _matchToken("null", 1); [EOL]             return (_currToken = JsonToken.VALUE_NULL); [EOL]         case INT_MINUS: [EOL]         case INT_0: [EOL]         case INT_1: [EOL]         case INT_2: [EOL]         case INT_3: [EOL]         case INT_4: [EOL]         case INT_5: [EOL]         case INT_6: [EOL]         case INT_7: [EOL]         case INT_8: [EOL]         case INT_9: [EOL]             return (_currToken = parseNumberText(i)); [EOL]     } [EOL]     return (_currToken = _handleUnexpectedValue(i)); [EOL] }
private JsonToken _nextTokenNotInObject(int i) throws IOException, JsonParseException { [EOL]     if (i == INT_QUOTE) { [EOL]         _tokenIncomplete = true; [EOL]         return (_currToken = JsonToken.VALUE_STRING); [EOL]     } [EOL]     switch(i) { [EOL]         case INT_LBRACKET: [EOL]             _parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol); [EOL]             return (_currToken = JsonToken.START_ARRAY); [EOL]         case INT_LCURLY: [EOL]             _parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol); [EOL]             return (_currToken = JsonToken.START_OBJECT); [EOL]         case INT_RBRACKET: [EOL]         case INT_RCURLY: [EOL]             _reportUnexpectedChar(i, "expected a value"); [EOL]         case INT_t: [EOL]             _matchToken("true", 1); [EOL]             return (_currToken = JsonToken.VALUE_TRUE); [EOL]         case INT_f: [EOL]             _matchToken("false", 1); [EOL]             return (_currToken = JsonToken.VALUE_FALSE); [EOL]         case INT_n: [EOL]             _matchToken("null", 1); [EOL]             return (_currToken = JsonToken.VALUE_NULL); [EOL]         case INT_MINUS: [EOL]         case INT_0: [EOL]         case INT_1: [EOL]         case INT_2: [EOL]         case INT_3: [EOL]         case INT_4: [EOL]         case INT_5: [EOL]         case INT_6: [EOL]         case INT_7: [EOL]         case INT_8: [EOL]         case INT_9: [EOL]             return (_currToken = parseNumberText(i)); [EOL]     } [EOL]     return (_currToken = _handleUnexpectedValue(i)); [EOL] }
private JsonToken _nextTokenNotInObject(int i) throws IOException, JsonParseException { [EOL]     if (i == INT_QUOTE) { [EOL]         _tokenIncomplete = true; [EOL]         return (_currToken = JsonToken.VALUE_STRING); [EOL]     } [EOL]     switch(i) { [EOL]         case INT_LBRACKET: [EOL]             _parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol); [EOL]             return (_currToken = JsonToken.START_ARRAY); [EOL]         case INT_LCURLY: [EOL]             _parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol); [EOL]             return (_currToken = JsonToken.START_OBJECT); [EOL]         case INT_RBRACKET: [EOL]         case INT_RCURLY: [EOL]             _reportUnexpectedChar(i, "expected a value"); [EOL]         case INT_t: [EOL]             _matchToken("true", 1); [EOL]             return (_currToken = JsonToken.VALUE_TRUE); [EOL]         case INT_f: [EOL]             _matchToken("false", 1); [EOL]             return (_currToken = JsonToken.VALUE_FALSE); [EOL]         case INT_n: [EOL]             _matchToken("null", 1); [EOL]             return (_currToken = JsonToken.VALUE_NULL); [EOL]         case INT_MINUS: [EOL]         case INT_0: [EOL]         case INT_1: [EOL]         case INT_2: [EOL]         case INT_3: [EOL]         case INT_4: [EOL]         case INT_5: [EOL]         case INT_6: [EOL]         case INT_7: [EOL]         case INT_8: [EOL]         case INT_9: [EOL]             return (_currToken = parseNumberText(i)); [EOL]     } [EOL]     return (_currToken = _handleUnexpectedValue(i)); [EOL] }
private JsonToken _nextTokenNotInObject(int i) throws IOException, JsonParseException { [EOL]     if (i == INT_QUOTE) { [EOL]         _tokenIncomplete = true; [EOL]         return (_currToken = JsonToken.VALUE_STRING); [EOL]     } [EOL]     switch(i) { [EOL]         case INT_LBRACKET: [EOL]             _parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol); [EOL]             return (_currToken = JsonToken.START_ARRAY); [EOL]         case INT_LCURLY: [EOL]             _parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol); [EOL]             return (_currToken = JsonToken.START_OBJECT); [EOL]         case INT_RBRACKET: [EOL]         case INT_RCURLY: [EOL]             _reportUnexpectedChar(i, "expected a value"); [EOL]         case INT_t: [EOL]             _matchToken("true", 1); [EOL]             return (_currToken = JsonToken.VALUE_TRUE); [EOL]         case INT_f: [EOL]             _matchToken("false", 1); [EOL]             return (_currToken = JsonToken.VALUE_FALSE); [EOL]         case INT_n: [EOL]             _matchToken("null", 1); [EOL]             return (_currToken = JsonToken.VALUE_NULL); [EOL]         case INT_MINUS: [EOL]         case INT_0: [EOL]         case INT_1: [EOL]         case INT_2: [EOL]         case INT_3: [EOL]         case INT_4: [EOL]         case INT_5: [EOL]         case INT_6: [EOL]         case INT_7: [EOL]         case INT_8: [EOL]         case INT_9: [EOL]             return (_currToken = parseNumberText(i)); [EOL]     } [EOL]     return (_currToken = _handleUnexpectedValue(i)); [EOL] }
private JsonToken _nextTokenNotInObject(int i) throws IOException, JsonParseException { [EOL]     if (i == INT_QUOTE) { [EOL]         _tokenIncomplete = true; [EOL]         return (_currToken = JsonToken.VALUE_STRING); [EOL]     } [EOL]     switch(i) { [EOL]         case INT_LBRACKET: [EOL]             _parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol); [EOL]             return (_currToken = JsonToken.START_ARRAY); [EOL]         case INT_LCURLY: [EOL]             _parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol); [EOL]             return (_currToken = JsonToken.START_OBJECT); [EOL]         case INT_RBRACKET: [EOL]         case INT_RCURLY: [EOL]             _reportUnexpectedChar(i, "expected a value"); [EOL]         case INT_t: [EOL]             _matchToken("true", 1); [EOL]             return (_currToken = JsonToken.VALUE_TRUE); [EOL]         case INT_f: [EOL]             _matchToken("false", 1); [EOL]             return (_currToken = JsonToken.VALUE_FALSE); [EOL]         case INT_n: [EOL]             _matchToken("null", 1); [EOL]             return (_currToken = JsonToken.VALUE_NULL); [EOL]         case INT_MINUS: [EOL]         case INT_0: [EOL]         case INT_1: [EOL]         case INT_2: [EOL]         case INT_3: [EOL]         case INT_4: [EOL]         case INT_5: [EOL]         case INT_6: [EOL]         case INT_7: [EOL]         case INT_8: [EOL]         case INT_9: [EOL]             return (_currToken = parseNumberText(i)); [EOL]     } [EOL]     return (_currToken = _handleUnexpectedValue(i)); [EOL] }
private int _verifyNoLeadingZeroes() throws IOException, JsonParseException { [EOL]     if (_inputPtr >= _inputEnd && !loadMore()) { [EOL]         return INT_0; [EOL]     } [EOL]     int ch = _inputBuffer[_inputPtr] & 0xFF; [EOL]     if (ch < INT_0 || ch > INT_9) { [EOL]         return INT_0; [EOL]     } [EOL]     if (!isEnabled(Feature.ALLOW_NUMERIC_LEADING_ZEROS)) { [EOL]         reportInvalidNumber("Leading zeroes not allowed"); [EOL]     } [EOL]     ++_inputPtr; [EOL]     if (ch == INT_0) { [EOL]         while (_inputPtr < _inputEnd || loadMore()) { [EOL]             ch = _inputBuffer[_inputPtr] & 0xFF; [EOL]             if (ch < INT_0 || ch > INT_9) { [EOL]                 return INT_0; [EOL]             } [EOL]             ++_inputPtr; [EOL]             if (ch != INT_0) { [EOL]                 break; [EOL]             } [EOL]         } [EOL]     } [EOL]     return ch; [EOL] }
private int _verifyNoLeadingZeroes() throws IOException, JsonParseException { [EOL]     if (_inputPtr >= _inputEnd && !loadMore()) { [EOL]         return INT_0; [EOL]     } [EOL]     int ch = _inputBuffer[_inputPtr] & 0xFF; [EOL]     if (ch < INT_0 || ch > INT_9) { [EOL]         return INT_0; [EOL]     } [EOL]     if (!isEnabled(Feature.ALLOW_NUMERIC_LEADING_ZEROS)) { [EOL]         reportInvalidNumber("Leading zeroes not allowed"); [EOL]     } [EOL]     ++_inputPtr; [EOL]     if (ch == INT_0) { [EOL]         while (_inputPtr < _inputEnd || loadMore()) { [EOL]             ch = _inputBuffer[_inputPtr] & 0xFF; [EOL]             if (ch < INT_0 || ch > INT_9) { [EOL]                 return INT_0; [EOL]             } [EOL]             ++_inputPtr; [EOL]             if (ch != INT_0) { [EOL]                 break; [EOL]             } [EOL]         } [EOL]     } [EOL]     return ch; [EOL] }
private int _verifyNoLeadingZeroes() throws IOException, JsonParseException { [EOL]     if (_inputPtr >= _inputEnd && !loadMore()) { [EOL]         return INT_0; [EOL]     } [EOL]     int ch = _inputBuffer[_inputPtr] & 0xFF; [EOL]     if (ch < INT_0 || ch > INT_9) { [EOL]         return INT_0; [EOL]     } [EOL]     if (!isEnabled(Feature.ALLOW_NUMERIC_LEADING_ZEROS)) { [EOL]         reportInvalidNumber("Leading zeroes not allowed"); [EOL]     } [EOL]     ++_inputPtr; [EOL]     if (ch == INT_0) { [EOL]         while (_inputPtr < _inputEnd || loadMore()) { [EOL]             ch = _inputBuffer[_inputPtr] & 0xFF; [EOL]             if (ch < INT_0 || ch > INT_9) { [EOL]                 return INT_0; [EOL]             } [EOL]             ++_inputPtr; [EOL]             if (ch != INT_0) { [EOL]                 break; [EOL]             } [EOL]         } [EOL]     } [EOL]     return ch; [EOL] }
private int _verifyNoLeadingZeroes() throws IOException, JsonParseException { [EOL]     if (_inputPtr >= _inputEnd && !loadMore()) { [EOL]         return INT_0; [EOL]     } [EOL]     int ch = _inputBuffer[_inputPtr] & 0xFF; [EOL]     if (ch < INT_0 || ch > INT_9) { [EOL]         return INT_0; [EOL]     } [EOL]     if (!isEnabled(Feature.ALLOW_NUMERIC_LEADING_ZEROS)) { [EOL]         reportInvalidNumber("Leading zeroes not allowed"); [EOL]     } [EOL]     ++_inputPtr; [EOL]     if (ch == INT_0) { [EOL]         while (_inputPtr < _inputEnd || loadMore()) { [EOL]             ch = _inputBuffer[_inputPtr] & 0xFF; [EOL]             if (ch < INT_0 || ch > INT_9) { [EOL]                 return INT_0; [EOL]             } [EOL]             ++_inputPtr; [EOL]             if (ch != INT_0) { [EOL]                 break; [EOL]             } [EOL]         } [EOL]     } [EOL]     return ch; [EOL] }
private int _verifyNoLeadingZeroes() throws IOException, JsonParseException { [EOL]     if (_inputPtr >= _inputEnd && !loadMore()) { [EOL]         return INT_0; [EOL]     } [EOL]     int ch = _inputBuffer[_inputPtr] & 0xFF; [EOL]     if (ch < INT_0 || ch > INT_9) { [EOL]         return INT_0; [EOL]     } [EOL]     if (!isEnabled(Feature.ALLOW_NUMERIC_LEADING_ZEROS)) { [EOL]         reportInvalidNumber("Leading zeroes not allowed"); [EOL]     } [EOL]     ++_inputPtr; [EOL]     if (ch == INT_0) { [EOL]         while (_inputPtr < _inputEnd || loadMore()) { [EOL]             ch = _inputBuffer[_inputPtr] & 0xFF; [EOL]             if (ch < INT_0 || ch > INT_9) { [EOL]                 return INT_0; [EOL]             } [EOL]             ++_inputPtr; [EOL]             if (ch != INT_0) { [EOL]                 break; [EOL]             } [EOL]         } [EOL]     } [EOL]     return ch; [EOL] }
protected Name parseMediumFieldName(int q2, final int[] codes) throws IOException, JsonParseException { [EOL]     int i = _inputBuffer[_inputPtr++] & 0xFF; [EOL]     if (codes[i] != 0) { [EOL]         if (i == INT_QUOTE) { [EOL]             return findName(_quad1, q2, 1); [EOL]         } [EOL]         return parseFieldName(_quad1, q2, i, 1); [EOL]     } [EOL]     q2 = (q2 << 8) | i; [EOL]     i = _inputBuffer[_inputPtr++] & 0xFF; [EOL]     if (codes[i] != 0) { [EOL]         if (i == INT_QUOTE) { [EOL]             return findName(_quad1, q2, 2); [EOL]         } [EOL]         return parseFieldName(_quad1, q2, i, 2); [EOL]     } [EOL]     q2 = (q2 << 8) | i; [EOL]     i = _inputBuffer[_inputPtr++] & 0xFF; [EOL]     if (codes[i] != 0) { [EOL]         if (i == INT_QUOTE) { [EOL]             return findName(_quad1, q2, 3); [EOL]         } [EOL]         return parseFieldName(_quad1, q2, i, 3); [EOL]     } [EOL]     q2 = (q2 << 8) | i; [EOL]     i = _inputBuffer[_inputPtr++] & 0xFF; [EOL]     if (codes[i] != 0) { [EOL]         if (i == INT_QUOTE) { [EOL]             return findName(_quad1, q2, 4); [EOL]         } [EOL]         return parseFieldName(_quad1, q2, i, 4); [EOL]     } [EOL]     _quadBuffer[0] = _quad1; [EOL]     _quadBuffer[1] = q2; [EOL]     return parseLongFieldName(i); [EOL] }
protected Name parseLongFieldName(int q) throws IOException, JsonParseException { [EOL]     final int[] codes = sInputCodesLatin1; [EOL]     int qlen = 2; [EOL]     while (true) { [EOL]         if ((_inputEnd - _inputPtr) < 4) { [EOL]             return parseEscapedFieldName(_quadBuffer, qlen, 0, q, 0); [EOL]         } [EOL]         int i = _inputBuffer[_inputPtr++] & 0xFF; [EOL]         if (codes[i] != 0) { [EOL]             if (i == INT_QUOTE) { [EOL]                 return findName(_quadBuffer, qlen, q, 1); [EOL]             } [EOL]             return parseEscapedFieldName(_quadBuffer, qlen, q, i, 1); [EOL]         } [EOL]         q = (q << 8) | i; [EOL]         i = _inputBuffer[_inputPtr++] & 0xFF; [EOL]         if (codes[i] != 0) { [EOL]             if (i == INT_QUOTE) { [EOL]                 return findName(_quadBuffer, qlen, q, 2); [EOL]             } [EOL]             return parseEscapedFieldName(_quadBuffer, qlen, q, i, 2); [EOL]         } [EOL]         q = (q << 8) | i; [EOL]         i = _inputBuffer[_inputPtr++] & 0xFF; [EOL]         if (codes[i] != 0) { [EOL]             if (i == INT_QUOTE) { [EOL]                 return findName(_quadBuffer, qlen, q, 3); [EOL]             } [EOL]             return parseEscapedFieldName(_quadBuffer, qlen, q, i, 3); [EOL]         } [EOL]         q = (q << 8) | i; [EOL]         i = _inputBuffer[_inputPtr++] & 0xFF; [EOL]         if (codes[i] != 0) { [EOL]             if (i == INT_QUOTE) { [EOL]                 return findName(_quadBuffer, qlen, q, 4); [EOL]             } [EOL]             return parseEscapedFieldName(_quadBuffer, qlen, q, i, 4); [EOL]         } [EOL]         if (qlen >= _quadBuffer.length) { [EOL]             _quadBuffer = growArrayBy(_quadBuffer, qlen); [EOL]         } [EOL]         _quadBuffer[qlen++] = q; [EOL]         q = i; [EOL]     } [EOL] }
private Name addName(int[] quads, int qlen, int lastQuadBytes) throws JsonParseException { [EOL]     int byteLen = (qlen << 2) - 4 + lastQuadBytes; [EOL]     int lastQuad; [EOL]     if (lastQuadBytes < 4) { [EOL]         lastQuad = quads[qlen - 1]; [EOL]         quads[qlen - 1] = (lastQuad << ((4 - lastQuadBytes) << 3)); [EOL]     } else { [EOL]         lastQuad = 0; [EOL]     } [EOL]     char[] cbuf = _textBuffer.emptyAndGetCurrentSegment(); [EOL]     int cix = 0; [EOL]     for (int ix = 0; ix < byteLen; ) { [EOL]         int ch = quads[ix >> 2]; [EOL]         int byteIx = (ix & 3); [EOL]         ch = (ch >> ((3 - byteIx) << 3)) & 0xFF; [EOL]         ++ix; [EOL]         if (ch > 127) { [EOL]             int needed; [EOL]             if ((ch & 0xE0) == 0xC0) { [EOL]                 ch &= 0x1F; [EOL]                 needed = 1; [EOL]             } else if ((ch & 0xF0) == 0xE0) { [EOL]                 ch &= 0x0F; [EOL]                 needed = 2; [EOL]             } else if ((ch & 0xF8) == 0xF0) { [EOL]                 ch &= 0x07; [EOL]                 needed = 3; [EOL]             } else { [EOL]                 _reportInvalidInitial(ch); [EOL]                 needed = ch = 1; [EOL]             } [EOL]             if ((ix + needed) > byteLen) { [EOL]                 _reportInvalidEOF(" in field name"); [EOL]             } [EOL]             int ch2 = quads[ix >> 2]; [EOL]             byteIx = (ix & 3); [EOL]             ch2 = (ch2 >> ((3 - byteIx) << 3)); [EOL]             ++ix; [EOL]             if ((ch2 & 0xC0) != 0x080) { [EOL]                 _reportInvalidOther(ch2); [EOL]             } [EOL]             ch = (ch << 6) | (ch2 & 0x3F); [EOL]             if (needed > 1) { [EOL]                 ch2 = quads[ix >> 2]; [EOL]                 byteIx = (ix & 3); [EOL]                 ch2 = (ch2 >> ((3 - byteIx) << 3)); [EOL]                 ++ix; [EOL]                 if ((ch2 & 0xC0) != 0x080) { [EOL]                     _reportInvalidOther(ch2); [EOL]                 } [EOL]                 ch = (ch << 6) | (ch2 & 0x3F); [EOL]                 if (needed > 2) { [EOL]                     ch2 = quads[ix >> 2]; [EOL]                     byteIx = (ix & 3); [EOL]                     ch2 = (ch2 >> ((3 - byteIx) << 3)); [EOL]                     ++ix; [EOL]                     if ((ch2 & 0xC0) != 0x080) { [EOL]                         _reportInvalidOther(ch2 & 0xFF); [EOL]                     } [EOL]                     ch = (ch << 6) | (ch2 & 0x3F); [EOL]                 } [EOL]             } [EOL]             if (needed > 2) { [EOL]                 ch -= 0x10000; [EOL]                 if (cix >= cbuf.length) { [EOL]                     cbuf = _textBuffer.expandCurrentSegment(); [EOL]                 } [EOL]                 cbuf[cix++] = (char) (0xD800 + (ch >> 10)); [EOL]                 ch = 0xDC00 | (ch & 0x03FF); [EOL]             } [EOL]         } [EOL]         if (cix >= cbuf.length) { [EOL]             cbuf = _textBuffer.expandCurrentSegment(); [EOL]         } [EOL]         cbuf[cix++] = (char) ch; [EOL]     } [EOL]     String baseName = new String(cbuf, 0, cix); [EOL]     if (lastQuadBytes < 4) { [EOL]         quads[qlen - 1] = lastQuad; [EOL]     } [EOL]     return _symbols.addName(baseName, quads, qlen); [EOL] }
private void _finishString2(char[] outBuf, int outPtr) throws IOException, JsonParseException { [EOL]     int c; [EOL]     final int[] codes = sInputCodesUtf8; [EOL]     final byte[] inputBuffer = _inputBuffer; [EOL]     main_loop: while (true) { [EOL]         ascii_loop: while (true) { [EOL]             int ptr = _inputPtr; [EOL]             if (ptr >= _inputEnd) { [EOL]                 loadMoreGuaranteed(); [EOL]                 ptr = _inputPtr; [EOL]             } [EOL]             if (outPtr >= outBuf.length) { [EOL]                 outBuf = _textBuffer.finishCurrentSegment(); [EOL]                 outPtr = 0; [EOL]             } [EOL]             final int max = Math.min(_inputEnd, (ptr + (outBuf.length - outPtr))); [EOL]             while (ptr < max) { [EOL]                 c = (int) inputBuffer[ptr++] & 0xFF; [EOL]                 if (codes[c] != 0) { [EOL]                     _inputPtr = ptr; [EOL]                     break ascii_loop; [EOL]                 } [EOL]                 outBuf[outPtr++] = (char) c; [EOL]             } [EOL]             _inputPtr = ptr; [EOL]         } [EOL]         if (c == INT_QUOTE) { [EOL]             break main_loop; [EOL]         } [EOL]         switch(codes[c]) { [EOL]             case 1: [EOL]                 c = _decodeEscaped(); [EOL]                 break; [EOL]             case 2: [EOL]                 c = _decodeUtf8_2(c); [EOL]                 break; [EOL]             case 3: [EOL]                 if ((_inputEnd - _inputPtr) >= 2) { [EOL]                     c = _decodeUtf8_3fast(c); [EOL]                 } else { [EOL]                     c = _decodeUtf8_3(c); [EOL]                 } [EOL]                 break; [EOL]             case 4: [EOL]                 c = _decodeUtf8_4(c); [EOL]                 outBuf[outPtr++] = (char) (0xD800 | (c >> 10)); [EOL]                 if (outPtr >= outBuf.length) { [EOL]                     outBuf = _textBuffer.finishCurrentSegment(); [EOL]                     outPtr = 0; [EOL]                 } [EOL]                 c = 0xDC00 | (c & 0x3FF); [EOL]                 break; [EOL]             default: [EOL]                 if (c < INT_SPACE) { [EOL]                     _throwUnquotedSpace(c, "string value"); [EOL]                 } else { [EOL]                     _reportInvalidChar(c); [EOL]                 } [EOL]         } [EOL]         if (outPtr >= outBuf.length) { [EOL]             outBuf = _textBuffer.finishCurrentSegment(); [EOL]             outPtr = 0; [EOL]         } [EOL]         outBuf[outPtr++] = (char) c; [EOL]     } [EOL]     _textBuffer.setCurrentLength(outPtr); [EOL] }
protected JsonToken _handleUnexpectedValue(int c) throws IOException, JsonParseException { [EOL]     switch(c) { [EOL]         case '\'': [EOL]             if (isEnabled(Feature.ALLOW_SINGLE_QUOTES)) { [EOL]                 return _handleApostropheValue(); [EOL]             } [EOL]             break; [EOL]         case 'N': [EOL]             _matchToken("NaN", 1); [EOL]             if (isEnabled(Feature.ALLOW_NON_NUMERIC_NUMBERS)) { [EOL]                 return resetAsNaN("NaN", Double.NaN); [EOL]             } [EOL]             _reportError("Non-standard token 'NaN': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow"); [EOL]             break; [EOL]         case 'I': [EOL]             _matchToken("Infinity", 1); [EOL]             if (isEnabled(Feature.ALLOW_NON_NUMERIC_NUMBERS)) { [EOL]                 return resetAsNaN("Infinity", Double.POSITIVE_INFINITY); [EOL]             } [EOL]             _reportError("Non-standard token 'Infinity': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow"); [EOL]             break; [EOL]         case '+': [EOL]             if (_inputPtr >= _inputEnd) { [EOL]                 if (!loadMore()) { [EOL]                     _reportInvalidEOFInValue(); [EOL]                 } [EOL]             } [EOL]             return _handleInvalidNumberStart(_inputBuffer[_inputPtr++] & 0xFF, false); [EOL]     } [EOL]     if (Character.isJavaIdentifierStart(c)) { [EOL]         _reportInvalidToken("" + ((char) c), "('true', 'false' or 'null')"); [EOL]     } [EOL]     _reportUnexpectedChar(c, "expected a valid value (number, String, array, object, 'true', 'false' or 'null')"); [EOL]     return null; [EOL] }
protected JsonToken _handleUnexpectedValue(int c) throws IOException, JsonParseException { [EOL]     switch(c) { [EOL]         case '\'': [EOL]             if (isEnabled(Feature.ALLOW_SINGLE_QUOTES)) { [EOL]                 return _handleApostropheValue(); [EOL]             } [EOL]             break; [EOL]         case 'N': [EOL]             _matchToken("NaN", 1); [EOL]             if (isEnabled(Feature.ALLOW_NON_NUMERIC_NUMBERS)) { [EOL]                 return resetAsNaN("NaN", Double.NaN); [EOL]             } [EOL]             _reportError("Non-standard token 'NaN': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow"); [EOL]             break; [EOL]         case 'I': [EOL]             _matchToken("Infinity", 1); [EOL]             if (isEnabled(Feature.ALLOW_NON_NUMERIC_NUMBERS)) { [EOL]                 return resetAsNaN("Infinity", Double.POSITIVE_INFINITY); [EOL]             } [EOL]             _reportError("Non-standard token 'Infinity': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow"); [EOL]             break; [EOL]         case '+': [EOL]             if (_inputPtr >= _inputEnd) { [EOL]                 if (!loadMore()) { [EOL]                     _reportInvalidEOFInValue(); [EOL]                 } [EOL]             } [EOL]             return _handleInvalidNumberStart(_inputBuffer[_inputPtr++] & 0xFF, false); [EOL]     } [EOL]     if (Character.isJavaIdentifierStart(c)) { [EOL]         _reportInvalidToken("" + ((char) c), "('true', 'false' or 'null')"); [EOL]     } [EOL]     _reportUnexpectedChar(c, "expected a valid value (number, String, array, object, 'true', 'false' or 'null')"); [EOL]     return null; [EOL] }
protected JsonToken _handleUnexpectedValue(int c) throws IOException, JsonParseException { [EOL]     switch(c) { [EOL]         case '\'': [EOL]             if (isEnabled(Feature.ALLOW_SINGLE_QUOTES)) { [EOL]                 return _handleApostropheValue(); [EOL]             } [EOL]             break; [EOL]         case 'N': [EOL]             _matchToken("NaN", 1); [EOL]             if (isEnabled(Feature.ALLOW_NON_NUMERIC_NUMBERS)) { [EOL]                 return resetAsNaN("NaN", Double.NaN); [EOL]             } [EOL]             _reportError("Non-standard token 'NaN': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow"); [EOL]             break; [EOL]         case 'I': [EOL]             _matchToken("Infinity", 1); [EOL]             if (isEnabled(Feature.ALLOW_NON_NUMERIC_NUMBERS)) { [EOL]                 return resetAsNaN("Infinity", Double.POSITIVE_INFINITY); [EOL]             } [EOL]             _reportError("Non-standard token 'Infinity': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow"); [EOL]             break; [EOL]         case '+': [EOL]             if (_inputPtr >= _inputEnd) { [EOL]                 if (!loadMore()) { [EOL]                     _reportInvalidEOFInValue(); [EOL]                 } [EOL]             } [EOL]             return _handleInvalidNumberStart(_inputBuffer[_inputPtr++] & 0xFF, false); [EOL]     } [EOL]     if (Character.isJavaIdentifierStart(c)) { [EOL]         _reportInvalidToken("" + ((char) c), "('true', 'false' or 'null')"); [EOL]     } [EOL]     _reportUnexpectedChar(c, "expected a valid value (number, String, array, object, 'true', 'false' or 'null')"); [EOL]     return null; [EOL] }
protected JsonToken _handleUnexpectedValue(int c) throws IOException, JsonParseException { [EOL]     switch(c) { [EOL]         case '\'': [EOL]             if (isEnabled(Feature.ALLOW_SINGLE_QUOTES)) { [EOL]                 return _handleApostropheValue(); [EOL]             } [EOL]             break; [EOL]         case 'N': [EOL]             _matchToken("NaN", 1); [EOL]             if (isEnabled(Feature.ALLOW_NON_NUMERIC_NUMBERS)) { [EOL]                 return resetAsNaN("NaN", Double.NaN); [EOL]             } [EOL]             _reportError("Non-standard token 'NaN': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow"); [EOL]             break; [EOL]         case 'I': [EOL]             _matchToken("Infinity", 1); [EOL]             if (isEnabled(Feature.ALLOW_NON_NUMERIC_NUMBERS)) { [EOL]                 return resetAsNaN("Infinity", Double.POSITIVE_INFINITY); [EOL]             } [EOL]             _reportError("Non-standard token 'Infinity': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow"); [EOL]             break; [EOL]         case '+': [EOL]             if (_inputPtr >= _inputEnd) { [EOL]                 if (!loadMore()) { [EOL]                     _reportInvalidEOFInValue(); [EOL]                 } [EOL]             } [EOL]             return _handleInvalidNumberStart(_inputBuffer[_inputPtr++] & 0xFF, false); [EOL]     } [EOL]     if (Character.isJavaIdentifierStart(c)) { [EOL]         _reportInvalidToken("" + ((char) c), "('true', 'false' or 'null')"); [EOL]     } [EOL]     _reportUnexpectedChar(c, "expected a valid value (number, String, array, object, 'true', 'false' or 'null')"); [EOL]     return null; [EOL] }
protected JsonToken _handleUnexpectedValue(int c) throws IOException, JsonParseException { [EOL]     switch(c) { [EOL]         case '\'': [EOL]             if (isEnabled(Feature.ALLOW_SINGLE_QUOTES)) { [EOL]                 return _handleApostropheValue(); [EOL]             } [EOL]             break; [EOL]         case 'N': [EOL]             _matchToken("NaN", 1); [EOL]             if (isEnabled(Feature.ALLOW_NON_NUMERIC_NUMBERS)) { [EOL]                 return resetAsNaN("NaN", Double.NaN); [EOL]             } [EOL]             _reportError("Non-standard token 'NaN': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow"); [EOL]             break; [EOL]         case 'I': [EOL]             _matchToken("Infinity", 1); [EOL]             if (isEnabled(Feature.ALLOW_NON_NUMERIC_NUMBERS)) { [EOL]                 return resetAsNaN("Infinity", Double.POSITIVE_INFINITY); [EOL]             } [EOL]             _reportError("Non-standard token 'Infinity': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow"); [EOL]             break; [EOL]         case '+': [EOL]             if (_inputPtr >= _inputEnd) { [EOL]                 if (!loadMore()) { [EOL]                     _reportInvalidEOFInValue(); [EOL]                 } [EOL]             } [EOL]             return _handleInvalidNumberStart(_inputBuffer[_inputPtr++] & 0xFF, false); [EOL]     } [EOL]     if (Character.isJavaIdentifierStart(c)) { [EOL]         _reportInvalidToken("" + ((char) c), "('true', 'false' or 'null')"); [EOL]     } [EOL]     _reportUnexpectedChar(c, "expected a valid value (number, String, array, object, 'true', 'false' or 'null')"); [EOL]     return null; [EOL] }
protected JsonToken _handleUnexpectedValue(int c) throws IOException, JsonParseException { [EOL]     switch(c) { [EOL]         case '\'': [EOL]             if (isEnabled(Feature.ALLOW_SINGLE_QUOTES)) { [EOL]                 return _handleApostropheValue(); [EOL]             } [EOL]             break; [EOL]         case 'N': [EOL]             _matchToken("NaN", 1); [EOL]             if (isEnabled(Feature.ALLOW_NON_NUMERIC_NUMBERS)) { [EOL]                 return resetAsNaN("NaN", Double.NaN); [EOL]             } [EOL]             _reportError("Non-standard token 'NaN': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow"); [EOL]             break; [EOL]         case 'I': [EOL]             _matchToken("Infinity", 1); [EOL]             if (isEnabled(Feature.ALLOW_NON_NUMERIC_NUMBERS)) { [EOL]                 return resetAsNaN("Infinity", Double.POSITIVE_INFINITY); [EOL]             } [EOL]             _reportError("Non-standard token 'Infinity': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow"); [EOL]             break; [EOL]         case '+': [EOL]             if (_inputPtr >= _inputEnd) { [EOL]                 if (!loadMore()) { [EOL]                     _reportInvalidEOFInValue(); [EOL]                 } [EOL]             } [EOL]             return _handleInvalidNumberStart(_inputBuffer[_inputPtr++] & 0xFF, false); [EOL]     } [EOL]     if (Character.isJavaIdentifierStart(c)) { [EOL]         _reportInvalidToken("" + ((char) c), "('true', 'false' or 'null')"); [EOL]     } [EOL]     _reportUnexpectedChar(c, "expected a valid value (number, String, array, object, 'true', 'false' or 'null')"); [EOL]     return null; [EOL] }
protected JsonToken _handleUnexpectedValue(int c) throws IOException, JsonParseException { [EOL]     switch(c) { [EOL]         case '\'': [EOL]             if (isEnabled(Feature.ALLOW_SINGLE_QUOTES)) { [EOL]                 return _handleApostropheValue(); [EOL]             } [EOL]             break; [EOL]         case 'N': [EOL]             _matchToken("NaN", 1); [EOL]             if (isEnabled(Feature.ALLOW_NON_NUMERIC_NUMBERS)) { [EOL]                 return resetAsNaN("NaN", Double.NaN); [EOL]             } [EOL]             _reportError("Non-standard token 'NaN': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow"); [EOL]             break; [EOL]         case 'I': [EOL]             _matchToken("Infinity", 1); [EOL]             if (isEnabled(Feature.ALLOW_NON_NUMERIC_NUMBERS)) { [EOL]                 return resetAsNaN("Infinity", Double.POSITIVE_INFINITY); [EOL]             } [EOL]             _reportError("Non-standard token 'Infinity': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow"); [EOL]             break; [EOL]         case '+': [EOL]             if (_inputPtr >= _inputEnd) { [EOL]                 if (!loadMore()) { [EOL]                     _reportInvalidEOFInValue(); [EOL]                 } [EOL]             } [EOL]             return _handleInvalidNumberStart(_inputBuffer[_inputPtr++] & 0xFF, false); [EOL]     } [EOL]     if (Character.isJavaIdentifierStart(c)) { [EOL]         _reportInvalidToken("" + ((char) c), "('true', 'false' or 'null')"); [EOL]     } [EOL]     _reportUnexpectedChar(c, "expected a valid value (number, String, array, object, 'true', 'false' or 'null')"); [EOL]     return null; [EOL] }
protected JsonToken _handleUnexpectedValue(int c) throws IOException, JsonParseException { [EOL]     switch(c) { [EOL]         case '\'': [EOL]             if (isEnabled(Feature.ALLOW_SINGLE_QUOTES)) { [EOL]                 return _handleApostropheValue(); [EOL]             } [EOL]             break; [EOL]         case 'N': [EOL]             _matchToken("NaN", 1); [EOL]             if (isEnabled(Feature.ALLOW_NON_NUMERIC_NUMBERS)) { [EOL]                 return resetAsNaN("NaN", Double.NaN); [EOL]             } [EOL]             _reportError("Non-standard token 'NaN': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow"); [EOL]             break; [EOL]         case 'I': [EOL]             _matchToken("Infinity", 1); [EOL]             if (isEnabled(Feature.ALLOW_NON_NUMERIC_NUMBERS)) { [EOL]                 return resetAsNaN("Infinity", Double.POSITIVE_INFINITY); [EOL]             } [EOL]             _reportError("Non-standard token 'Infinity': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow"); [EOL]             break; [EOL]         case '+': [EOL]             if (_inputPtr >= _inputEnd) { [EOL]                 if (!loadMore()) { [EOL]                     _reportInvalidEOFInValue(); [EOL]                 } [EOL]             } [EOL]             return _handleInvalidNumberStart(_inputBuffer[_inputPtr++] & 0xFF, false); [EOL]     } [EOL]     if (Character.isJavaIdentifierStart(c)) { [EOL]         _reportInvalidToken("" + ((char) c), "('true', 'false' or 'null')"); [EOL]     } [EOL]     _reportUnexpectedChar(c, "expected a valid value (number, String, array, object, 'true', 'false' or 'null')"); [EOL]     return null; [EOL] }
protected JsonToken _handleUnexpectedValue(int c) throws IOException, JsonParseException { [EOL]     switch(c) { [EOL]         case '\'': [EOL]             if (isEnabled(Feature.ALLOW_SINGLE_QUOTES)) { [EOL]                 return _handleApostropheValue(); [EOL]             } [EOL]             break; [EOL]         case 'N': [EOL]             _matchToken("NaN", 1); [EOL]             if (isEnabled(Feature.ALLOW_NON_NUMERIC_NUMBERS)) { [EOL]                 return resetAsNaN("NaN", Double.NaN); [EOL]             } [EOL]             _reportError("Non-standard token 'NaN': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow"); [EOL]             break; [EOL]         case 'I': [EOL]             _matchToken("Infinity", 1); [EOL]             if (isEnabled(Feature.ALLOW_NON_NUMERIC_NUMBERS)) { [EOL]                 return resetAsNaN("Infinity", Double.POSITIVE_INFINITY); [EOL]             } [EOL]             _reportError("Non-standard token 'Infinity': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow"); [EOL]             break; [EOL]         case '+': [EOL]             if (_inputPtr >= _inputEnd) { [EOL]                 if (!loadMore()) { [EOL]                     _reportInvalidEOFInValue(); [EOL]                 } [EOL]             } [EOL]             return _handleInvalidNumberStart(_inputBuffer[_inputPtr++] & 0xFF, false); [EOL]     } [EOL]     if (Character.isJavaIdentifierStart(c)) { [EOL]         _reportInvalidToken("" + ((char) c), "('true', 'false' or 'null')"); [EOL]     } [EOL]     _reportUnexpectedChar(c, "expected a valid value (number, String, array, object, 'true', 'false' or 'null')"); [EOL]     return null; [EOL] }
private int _skipWSOrEnd() throws IOException, JsonParseException { [EOL]     while ((_inputPtr < _inputEnd) || loadMore()) { [EOL]         int i = _inputBuffer[_inputPtr++] & 0xFF; [EOL]         if (i > INT_SPACE) { [EOL]             if (i != INT_SLASH) { [EOL]                 return i; [EOL]             } [EOL]             _skipComment(); [EOL]         } else if (i != INT_SPACE) { [EOL]             if (i == INT_LF) { [EOL]                 _skipLF(); [EOL]             } else if (i == INT_CR) { [EOL]                 _skipCR(); [EOL]             } else if (i != INT_TAB) { [EOL]                 _throwInvalidSpace(i); [EOL]             } [EOL]         } [EOL]     } [EOL]     _handleEOF(); [EOL]     return -1; [EOL] }
private int _skipWSOrEnd() throws IOException, JsonParseException { [EOL]     while ((_inputPtr < _inputEnd) || loadMore()) { [EOL]         int i = _inputBuffer[_inputPtr++] & 0xFF; [EOL]         if (i > INT_SPACE) { [EOL]             if (i != INT_SLASH) { [EOL]                 return i; [EOL]             } [EOL]             _skipComment(); [EOL]         } else if (i != INT_SPACE) { [EOL]             if (i == INT_LF) { [EOL]                 _skipLF(); [EOL]             } else if (i == INT_CR) { [EOL]                 _skipCR(); [EOL]             } else if (i != INT_TAB) { [EOL]                 _throwInvalidSpace(i); [EOL]             } [EOL]         } [EOL]     } [EOL]     _handleEOF(); [EOL]     return -1; [EOL] }
private int _skipWSOrEnd() throws IOException, JsonParseException { [EOL]     while ((_inputPtr < _inputEnd) || loadMore()) { [EOL]         int i = _inputBuffer[_inputPtr++] & 0xFF; [EOL]         if (i > INT_SPACE) { [EOL]             if (i != INT_SLASH) { [EOL]                 return i; [EOL]             } [EOL]             _skipComment(); [EOL]         } else if (i != INT_SPACE) { [EOL]             if (i == INT_LF) { [EOL]                 _skipLF(); [EOL]             } else if (i == INT_CR) { [EOL]                 _skipCR(); [EOL]             } else if (i != INT_TAB) { [EOL]                 _throwInvalidSpace(i); [EOL]             } [EOL]         } [EOL]     } [EOL]     _handleEOF(); [EOL]     return -1; [EOL] }
private int _skipWSOrEnd() throws IOException, JsonParseException { [EOL]     while ((_inputPtr < _inputEnd) || loadMore()) { [EOL]         int i = _inputBuffer[_inputPtr++] & 0xFF; [EOL]         if (i > INT_SPACE) { [EOL]             if (i != INT_SLASH) { [EOL]                 return i; [EOL]             } [EOL]             _skipComment(); [EOL]         } else if (i != INT_SPACE) { [EOL]             if (i == INT_LF) { [EOL]                 _skipLF(); [EOL]             } else if (i == INT_CR) { [EOL]                 _skipCR(); [EOL]             } else if (i != INT_TAB) { [EOL]                 _throwInvalidSpace(i); [EOL]             } [EOL]         } [EOL]     } [EOL]     _handleEOF(); [EOL]     return -1; [EOL] }
private int _skipWSOrEnd() throws IOException, JsonParseException { [EOL]     while ((_inputPtr < _inputEnd) || loadMore()) { [EOL]         int i = _inputBuffer[_inputPtr++] & 0xFF; [EOL]         if (i > INT_SPACE) { [EOL]             if (i != INT_SLASH) { [EOL]                 return i; [EOL]             } [EOL]             _skipComment(); [EOL]         } else if (i != INT_SPACE) { [EOL]             if (i == INT_LF) { [EOL]                 _skipLF(); [EOL]             } else if (i == INT_CR) { [EOL]                 _skipCR(); [EOL]             } else if (i != INT_TAB) { [EOL]                 _throwInvalidSpace(i); [EOL]             } [EOL]         } [EOL]     } [EOL]     _handleEOF(); [EOL]     return -1; [EOL] }
private int _skipWSOrEnd() throws IOException, JsonParseException { [EOL]     while ((_inputPtr < _inputEnd) || loadMore()) { [EOL]         int i = _inputBuffer[_inputPtr++] & 0xFF; [EOL]         if (i > INT_SPACE) { [EOL]             if (i != INT_SLASH) { [EOL]                 return i; [EOL]             } [EOL]             _skipComment(); [EOL]         } else if (i != INT_SPACE) { [EOL]             if (i == INT_LF) { [EOL]                 _skipLF(); [EOL]             } else if (i == INT_CR) { [EOL]                 _skipCR(); [EOL]             } else if (i != INT_TAB) { [EOL]                 _throwInvalidSpace(i); [EOL]             } [EOL]         } [EOL]     } [EOL]     _handleEOF(); [EOL]     return -1; [EOL] }
private int _skipWSOrEnd() throws IOException, JsonParseException { [EOL]     while ((_inputPtr < _inputEnd) || loadMore()) { [EOL]         int i = _inputBuffer[_inputPtr++] & 0xFF; [EOL]         if (i > INT_SPACE) { [EOL]             if (i != INT_SLASH) { [EOL]                 return i; [EOL]             } [EOL]             _skipComment(); [EOL]         } else if (i != INT_SPACE) { [EOL]             if (i == INT_LF) { [EOL]                 _skipLF(); [EOL]             } else if (i == INT_CR) { [EOL]                 _skipCR(); [EOL]             } else if (i != INT_TAB) { [EOL]                 _throwInvalidSpace(i); [EOL]             } [EOL]         } [EOL]     } [EOL]     _handleEOF(); [EOL]     return -1; [EOL] }
private int _skipWSOrEnd() throws IOException, JsonParseException { [EOL]     while ((_inputPtr < _inputEnd) || loadMore()) { [EOL]         int i = _inputBuffer[_inputPtr++] & 0xFF; [EOL]         if (i > INT_SPACE) { [EOL]             if (i != INT_SLASH) { [EOL]                 return i; [EOL]             } [EOL]             _skipComment(); [EOL]         } else if (i != INT_SPACE) { [EOL]             if (i == INT_LF) { [EOL]                 _skipLF(); [EOL]             } else if (i == INT_CR) { [EOL]                 _skipCR(); [EOL]             } else if (i != INT_TAB) { [EOL]                 _throwInvalidSpace(i); [EOL]             } [EOL]         } [EOL]     } [EOL]     _handleEOF(); [EOL]     return -1; [EOL] }
private void _skipComment() throws IOException, JsonParseException { [EOL]     if (!isEnabled(Feature.ALLOW_COMMENTS)) { [EOL]         _reportUnexpectedChar('/', "maybe a (non-standard) comment? (not recognized as one since Feature 'ALLOW_COMMENTS' not enabled for parser)"); [EOL]     } [EOL]     if (_inputPtr >= _inputEnd && !loadMore()) { [EOL]         _reportInvalidEOF(" in a comment"); [EOL]     } [EOL]     int c = _inputBuffer[_inputPtr++] & 0xFF; [EOL]     if (c == INT_SLASH) { [EOL]         _skipCppComment(); [EOL]     } else if (c == INT_ASTERISK) { [EOL]         _skipCComment(); [EOL]     } else { [EOL]         _reportUnexpectedChar(c, "was expecting either '*' or '/' for a comment"); [EOL]     } [EOL] }
private void _skipComment() throws IOException, JsonParseException { [EOL]     if (!isEnabled(Feature.ALLOW_COMMENTS)) { [EOL]         _reportUnexpectedChar('/', "maybe a (non-standard) comment? (not recognized as one since Feature 'ALLOW_COMMENTS' not enabled for parser)"); [EOL]     } [EOL]     if (_inputPtr >= _inputEnd && !loadMore()) { [EOL]         _reportInvalidEOF(" in a comment"); [EOL]     } [EOL]     int c = _inputBuffer[_inputPtr++] & 0xFF; [EOL]     if (c == INT_SLASH) { [EOL]         _skipCppComment(); [EOL]     } else if (c == INT_ASTERISK) { [EOL]         _skipCComment(); [EOL]     } else { [EOL]         _reportUnexpectedChar(c, "was expecting either '*' or '/' for a comment"); [EOL]     } [EOL] }
private void _skipComment() throws IOException, JsonParseException { [EOL]     if (!isEnabled(Feature.ALLOW_COMMENTS)) { [EOL]         _reportUnexpectedChar('/', "maybe a (non-standard) comment? (not recognized as one since Feature 'ALLOW_COMMENTS' not enabled for parser)"); [EOL]     } [EOL]     if (_inputPtr >= _inputEnd && !loadMore()) { [EOL]         _reportInvalidEOF(" in a comment"); [EOL]     } [EOL]     int c = _inputBuffer[_inputPtr++] & 0xFF; [EOL]     if (c == INT_SLASH) { [EOL]         _skipCppComment(); [EOL]     } else if (c == INT_ASTERISK) { [EOL]         _skipCComment(); [EOL]     } else { [EOL]         _reportUnexpectedChar(c, "was expecting either '*' or '/' for a comment"); [EOL]     } [EOL] }
private void _skipComment() throws IOException, JsonParseException { [EOL]     if (!isEnabled(Feature.ALLOW_COMMENTS)) { [EOL]         _reportUnexpectedChar('/', "maybe a (non-standard) comment? (not recognized as one since Feature 'ALLOW_COMMENTS' not enabled for parser)"); [EOL]     } [EOL]     if (_inputPtr >= _inputEnd && !loadMore()) { [EOL]         _reportInvalidEOF(" in a comment"); [EOL]     } [EOL]     int c = _inputBuffer[_inputPtr++] & 0xFF; [EOL]     if (c == INT_SLASH) { [EOL]         _skipCppComment(); [EOL]     } else if (c == INT_ASTERISK) { [EOL]         _skipCComment(); [EOL]     } else { [EOL]         _reportUnexpectedChar(c, "was expecting either '*' or '/' for a comment"); [EOL]     } [EOL] }
private void _skipComment() throws IOException, JsonParseException { [EOL]     if (!isEnabled(Feature.ALLOW_COMMENTS)) { [EOL]         _reportUnexpectedChar('/', "maybe a (non-standard) comment? (not recognized as one since Feature 'ALLOW_COMMENTS' not enabled for parser)"); [EOL]     } [EOL]     if (_inputPtr >= _inputEnd && !loadMore()) { [EOL]         _reportInvalidEOF(" in a comment"); [EOL]     } [EOL]     int c = _inputBuffer[_inputPtr++] & 0xFF; [EOL]     if (c == INT_SLASH) { [EOL]         _skipCppComment(); [EOL]     } else if (c == INT_ASTERISK) { [EOL]         _skipCComment(); [EOL]     } else { [EOL]         _reportUnexpectedChar(c, "was expecting either '*' or '/' for a comment"); [EOL]     } [EOL] }
private void _skipCComment() throws IOException, JsonParseException { [EOL]     final int[] codes = CharTypes.getInputCodeComment(); [EOL]     main_loop: while ((_inputPtr < _inputEnd) || loadMore()) { [EOL]         int i = (int) _inputBuffer[_inputPtr++] & 0xFF; [EOL]         int code = codes[i]; [EOL]         if (code != 0) { [EOL]             switch(code) { [EOL]                 case INT_ASTERISK: [EOL]                     if (_inputPtr >= _inputEnd && !loadMore()) { [EOL]                         break main_loop; [EOL]                     } [EOL]                     if (_inputBuffer[_inputPtr] == INT_SLASH) { [EOL]                         ++_inputPtr; [EOL]                         return; [EOL]                     } [EOL]                     break; [EOL]                 case INT_LF: [EOL]                     _skipLF(); [EOL]                     break; [EOL]                 case INT_CR: [EOL]                     _skipCR(); [EOL]                     break; [EOL]                 case 2: [EOL]                     _skipUtf8_2(i); [EOL]                     break; [EOL]                 case 3: [EOL]                     _skipUtf8_3(i); [EOL]                     break; [EOL]                 case 4: [EOL]                     _skipUtf8_4(i); [EOL]                     break; [EOL]                 default: [EOL]                     _reportInvalidChar(i); [EOL]             } [EOL]         } [EOL]     } [EOL]     _reportInvalidEOF(" in a comment"); [EOL] }
private void _skipCComment() throws IOException, JsonParseException { [EOL]     final int[] codes = CharTypes.getInputCodeComment(); [EOL]     main_loop: while ((_inputPtr < _inputEnd) || loadMore()) { [EOL]         int i = (int) _inputBuffer[_inputPtr++] & 0xFF; [EOL]         int code = codes[i]; [EOL]         if (code != 0) { [EOL]             switch(code) { [EOL]                 case INT_ASTERISK: [EOL]                     if (_inputPtr >= _inputEnd && !loadMore()) { [EOL]                         break main_loop; [EOL]                     } [EOL]                     if (_inputBuffer[_inputPtr] == INT_SLASH) { [EOL]                         ++_inputPtr; [EOL]                         return; [EOL]                     } [EOL]                     break; [EOL]                 case INT_LF: [EOL]                     _skipLF(); [EOL]                     break; [EOL]                 case INT_CR: [EOL]                     _skipCR(); [EOL]                     break; [EOL]                 case 2: [EOL]                     _skipUtf8_2(i); [EOL]                     break; [EOL]                 case 3: [EOL]                     _skipUtf8_3(i); [EOL]                     break; [EOL]                 case 4: [EOL]                     _skipUtf8_4(i); [EOL]                     break; [EOL]                 default: [EOL]                     _reportInvalidChar(i); [EOL]             } [EOL]         } [EOL]     } [EOL]     _reportInvalidEOF(" in a comment"); [EOL] }
private void _skipCComment() throws IOException, JsonParseException { [EOL]     final int[] codes = CharTypes.getInputCodeComment(); [EOL]     main_loop: while ((_inputPtr < _inputEnd) || loadMore()) { [EOL]         int i = (int) _inputBuffer[_inputPtr++] & 0xFF; [EOL]         int code = codes[i]; [EOL]         if (code != 0) { [EOL]             switch(code) { [EOL]                 case INT_ASTERISK: [EOL]                     if (_inputPtr >= _inputEnd && !loadMore()) { [EOL]                         break main_loop; [EOL]                     } [EOL]                     if (_inputBuffer[_inputPtr] == INT_SLASH) { [EOL]                         ++_inputPtr; [EOL]                         return; [EOL]                     } [EOL]                     break; [EOL]                 case INT_LF: [EOL]                     _skipLF(); [EOL]                     break; [EOL]                 case INT_CR: [EOL]                     _skipCR(); [EOL]                     break; [EOL]                 case 2: [EOL]                     _skipUtf8_2(i); [EOL]                     break; [EOL]                 case 3: [EOL]                     _skipUtf8_3(i); [EOL]                     break; [EOL]                 case 4: [EOL]                     _skipUtf8_4(i); [EOL]                     break; [EOL]                 default: [EOL]                     _reportInvalidChar(i); [EOL]             } [EOL]         } [EOL]     } [EOL]     _reportInvalidEOF(" in a comment"); [EOL] }
private void _skipCComment() throws IOException, JsonParseException { [EOL]     final int[] codes = CharTypes.getInputCodeComment(); [EOL]     main_loop: while ((_inputPtr < _inputEnd) || loadMore()) { [EOL]         int i = (int) _inputBuffer[_inputPtr++] & 0xFF; [EOL]         int code = codes[i]; [EOL]         if (code != 0) { [EOL]             switch(code) { [EOL]                 case INT_ASTERISK: [EOL]                     if (_inputPtr >= _inputEnd && !loadMore()) { [EOL]                         break main_loop; [EOL]                     } [EOL]                     if (_inputBuffer[_inputPtr] == INT_SLASH) { [EOL]                         ++_inputPtr; [EOL]                         return; [EOL]                     } [EOL]                     break; [EOL]                 case INT_LF: [EOL]                     _skipLF(); [EOL]                     break; [EOL]                 case INT_CR: [EOL]                     _skipCR(); [EOL]                     break; [EOL]                 case 2: [EOL]                     _skipUtf8_2(i); [EOL]                     break; [EOL]                 case 3: [EOL]                     _skipUtf8_3(i); [EOL]                     break; [EOL]                 case 4: [EOL]                     _skipUtf8_4(i); [EOL]                     break; [EOL]                 default: [EOL]                     _reportInvalidChar(i); [EOL]             } [EOL]         } [EOL]     } [EOL]     _reportInvalidEOF(" in a comment"); [EOL] }
private void _skipCComment() throws IOException, JsonParseException { [EOL]     final int[] codes = CharTypes.getInputCodeComment(); [EOL]     main_loop: while ((_inputPtr < _inputEnd) || loadMore()) { [EOL]         int i = (int) _inputBuffer[_inputPtr++] & 0xFF; [EOL]         int code = codes[i]; [EOL]         if (code != 0) { [EOL]             switch(code) { [EOL]                 case INT_ASTERISK: [EOL]                     if (_inputPtr >= _inputEnd && !loadMore()) { [EOL]                         break main_loop; [EOL]                     } [EOL]                     if (_inputBuffer[_inputPtr] == INT_SLASH) { [EOL]                         ++_inputPtr; [EOL]                         return; [EOL]                     } [EOL]                     break; [EOL]                 case INT_LF: [EOL]                     _skipLF(); [EOL]                     break; [EOL]                 case INT_CR: [EOL]                     _skipCR(); [EOL]                     break; [EOL]                 case 2: [EOL]                     _skipUtf8_2(i); [EOL]                     break; [EOL]                 case 3: [EOL]                     _skipUtf8_3(i); [EOL]                     break; [EOL]                 case 4: [EOL]                     _skipUtf8_4(i); [EOL]                     break; [EOL]                 default: [EOL]                     _reportInvalidChar(i); [EOL]             } [EOL]         } [EOL]     } [EOL]     _reportInvalidEOF(" in a comment"); [EOL] }
private void _skipCComment() throws IOException, JsonParseException { [EOL]     final int[] codes = CharTypes.getInputCodeComment(); [EOL]     main_loop: while ((_inputPtr < _inputEnd) || loadMore()) { [EOL]         int i = (int) _inputBuffer[_inputPtr++] & 0xFF; [EOL]         int code = codes[i]; [EOL]         if (code != 0) { [EOL]             switch(code) { [EOL]                 case INT_ASTERISK: [EOL]                     if (_inputPtr >= _inputEnd && !loadMore()) { [EOL]                         break main_loop; [EOL]                     } [EOL]                     if (_inputBuffer[_inputPtr] == INT_SLASH) { [EOL]                         ++_inputPtr; [EOL]                         return; [EOL]                     } [EOL]                     break; [EOL]                 case INT_LF: [EOL]                     _skipLF(); [EOL]                     break; [EOL]                 case INT_CR: [EOL]                     _skipCR(); [EOL]                     break; [EOL]                 case 2: [EOL]                     _skipUtf8_2(i); [EOL]                     break; [EOL]                 case 3: [EOL]                     _skipUtf8_3(i); [EOL]                     break; [EOL]                 case 4: [EOL]                     _skipUtf8_4(i); [EOL]                     break; [EOL]                 default: [EOL]                     _reportInvalidChar(i); [EOL]             } [EOL]         } [EOL]     } [EOL]     _reportInvalidEOF(" in a comment"); [EOL] }
private void _skipCComment() throws IOException, JsonParseException { [EOL]     final int[] codes = CharTypes.getInputCodeComment(); [EOL]     main_loop: while ((_inputPtr < _inputEnd) || loadMore()) { [EOL]         int i = (int) _inputBuffer[_inputPtr++] & 0xFF; [EOL]         int code = codes[i]; [EOL]         if (code != 0) { [EOL]             switch(code) { [EOL]                 case INT_ASTERISK: [EOL]                     if (_inputPtr >= _inputEnd && !loadMore()) { [EOL]                         break main_loop; [EOL]                     } [EOL]                     if (_inputBuffer[_inputPtr] == INT_SLASH) { [EOL]                         ++_inputPtr; [EOL]                         return; [EOL]                     } [EOL]                     break; [EOL]                 case INT_LF: [EOL]                     _skipLF(); [EOL]                     break; [EOL]                 case INT_CR: [EOL]                     _skipCR(); [EOL]                     break; [EOL]                 case 2: [EOL]                     _skipUtf8_2(i); [EOL]                     break; [EOL]                 case 3: [EOL]                     _skipUtf8_3(i); [EOL]                     break; [EOL]                 case 4: [EOL]                     _skipUtf8_4(i); [EOL]                     break; [EOL]                 default: [EOL]                     _reportInvalidChar(i); [EOL]             } [EOL]         } [EOL]     } [EOL]     _reportInvalidEOF(" in a comment"); [EOL] }
private void _skipCComment() throws IOException, JsonParseException { [EOL]     final int[] codes = CharTypes.getInputCodeComment(); [EOL]     main_loop: while ((_inputPtr < _inputEnd) || loadMore()) { [EOL]         int i = (int) _inputBuffer[_inputPtr++] & 0xFF; [EOL]         int code = codes[i]; [EOL]         if (code != 0) { [EOL]             switch(code) { [EOL]                 case INT_ASTERISK: [EOL]                     if (_inputPtr >= _inputEnd && !loadMore()) { [EOL]                         break main_loop; [EOL]                     } [EOL]                     if (_inputBuffer[_inputPtr] == INT_SLASH) { [EOL]                         ++_inputPtr; [EOL]                         return; [EOL]                     } [EOL]                     break; [EOL]                 case INT_LF: [EOL]                     _skipLF(); [EOL]                     break; [EOL]                 case INT_CR: [EOL]                     _skipCR(); [EOL]                     break; [EOL]                 case 2: [EOL]                     _skipUtf8_2(i); [EOL]                     break; [EOL]                 case 3: [EOL]                     _skipUtf8_3(i); [EOL]                     break; [EOL]                 case 4: [EOL]                     _skipUtf8_4(i); [EOL]                     break; [EOL]                 default: [EOL]                     _reportInvalidChar(i); [EOL]             } [EOL]         } [EOL]     } [EOL]     _reportInvalidEOF(" in a comment"); [EOL] }
private void _skipCppComment() throws IOException, JsonParseException { [EOL]     final int[] codes = CharTypes.getInputCodeComment(); [EOL]     while ((_inputPtr < _inputEnd) || loadMore()) { [EOL]         int i = (int) _inputBuffer[_inputPtr++] & 0xFF; [EOL]         int code = codes[i]; [EOL]         if (code != 0) { [EOL]             switch(code) { [EOL]                 case INT_LF: [EOL]                     _skipLF(); [EOL]                     return; [EOL]                 case INT_CR: [EOL]                     _skipCR(); [EOL]                     return; [EOL]                 case INT_ASTERISK: [EOL]                     break; [EOL]                 case 2: [EOL]                     _skipUtf8_2(i); [EOL]                     break; [EOL]                 case 3: [EOL]                     _skipUtf8_3(i); [EOL]                     break; [EOL]                 case 4: [EOL]                     _skipUtf8_4(i); [EOL]                     break; [EOL]                 default: [EOL]                     _reportInvalidChar(i); [EOL]             } [EOL]         } [EOL]     } [EOL] }
private void _skipCppComment() throws IOException, JsonParseException { [EOL]     final int[] codes = CharTypes.getInputCodeComment(); [EOL]     while ((_inputPtr < _inputEnd) || loadMore()) { [EOL]         int i = (int) _inputBuffer[_inputPtr++] & 0xFF; [EOL]         int code = codes[i]; [EOL]         if (code != 0) { [EOL]             switch(code) { [EOL]                 case INT_LF: [EOL]                     _skipLF(); [EOL]                     return; [EOL]                 case INT_CR: [EOL]                     _skipCR(); [EOL]                     return; [EOL]                 case INT_ASTERISK: [EOL]                     break; [EOL]                 case 2: [EOL]                     _skipUtf8_2(i); [EOL]                     break; [EOL]                 case 3: [EOL]                     _skipUtf8_3(i); [EOL]                     break; [EOL]                 case 4: [EOL]                     _skipUtf8_4(i); [EOL]                     break; [EOL]                 default: [EOL]                     _reportInvalidChar(i); [EOL]             } [EOL]         } [EOL]     } [EOL] }
private void _skipCppComment() throws IOException, JsonParseException { [EOL]     final int[] codes = CharTypes.getInputCodeComment(); [EOL]     while ((_inputPtr < _inputEnd) || loadMore()) { [EOL]         int i = (int) _inputBuffer[_inputPtr++] & 0xFF; [EOL]         int code = codes[i]; [EOL]         if (code != 0) { [EOL]             switch(code) { [EOL]                 case INT_LF: [EOL]                     _skipLF(); [EOL]                     return; [EOL]                 case INT_CR: [EOL]                     _skipCR(); [EOL]                     return; [EOL]                 case INT_ASTERISK: [EOL]                     break; [EOL]                 case 2: [EOL]                     _skipUtf8_2(i); [EOL]                     break; [EOL]                 case 3: [EOL]                     _skipUtf8_3(i); [EOL]                     break; [EOL]                 case 4: [EOL]                     _skipUtf8_4(i); [EOL]                     break; [EOL]                 default: [EOL]                     _reportInvalidChar(i); [EOL]             } [EOL]         } [EOL]     } [EOL] }
private void _skipCppComment() throws IOException, JsonParseException { [EOL]     final int[] codes = CharTypes.getInputCodeComment(); [EOL]     while ((_inputPtr < _inputEnd) || loadMore()) { [EOL]         int i = (int) _inputBuffer[_inputPtr++] & 0xFF; [EOL]         int code = codes[i]; [EOL]         if (code != 0) { [EOL]             switch(code) { [EOL]                 case INT_LF: [EOL]                     _skipLF(); [EOL]                     return; [EOL]                 case INT_CR: [EOL]                     _skipCR(); [EOL]                     return; [EOL]                 case INT_ASTERISK: [EOL]                     break; [EOL]                 case 2: [EOL]                     _skipUtf8_2(i); [EOL]                     break; [EOL]                 case 3: [EOL]                     _skipUtf8_3(i); [EOL]                     break; [EOL]                 case 4: [EOL]                     _skipUtf8_4(i); [EOL]                     break; [EOL]                 default: [EOL]                     _reportInvalidChar(i); [EOL]             } [EOL]         } [EOL]     } [EOL] }
private void _skipCppComment() throws IOException, JsonParseException { [EOL]     final int[] codes = CharTypes.getInputCodeComment(); [EOL]     while ((_inputPtr < _inputEnd) || loadMore()) { [EOL]         int i = (int) _inputBuffer[_inputPtr++] & 0xFF; [EOL]         int code = codes[i]; [EOL]         if (code != 0) { [EOL]             switch(code) { [EOL]                 case INT_LF: [EOL]                     _skipLF(); [EOL]                     return; [EOL]                 case INT_CR: [EOL]                     _skipCR(); [EOL]                     return; [EOL]                 case INT_ASTERISK: [EOL]                     break; [EOL]                 case 2: [EOL]                     _skipUtf8_2(i); [EOL]                     break; [EOL]                 case 3: [EOL]                     _skipUtf8_3(i); [EOL]                     break; [EOL]                 case 4: [EOL]                     _skipUtf8_4(i); [EOL]                     break; [EOL]                 default: [EOL]                     _reportInvalidChar(i); [EOL]             } [EOL]         } [EOL]     } [EOL] }
private void _skipCppComment() throws IOException, JsonParseException { [EOL]     final int[] codes = CharTypes.getInputCodeComment(); [EOL]     while ((_inputPtr < _inputEnd) || loadMore()) { [EOL]         int i = (int) _inputBuffer[_inputPtr++] & 0xFF; [EOL]         int code = codes[i]; [EOL]         if (code != 0) { [EOL]             switch(code) { [EOL]                 case INT_LF: [EOL]                     _skipLF(); [EOL]                     return; [EOL]                 case INT_CR: [EOL]                     _skipCR(); [EOL]                     return; [EOL]                 case INT_ASTERISK: [EOL]                     break; [EOL]                 case 2: [EOL]                     _skipUtf8_2(i); [EOL]                     break; [EOL]                 case 3: [EOL]                     _skipUtf8_3(i); [EOL]                     break; [EOL]                 case 4: [EOL]                     _skipUtf8_4(i); [EOL]                     break; [EOL]                 default: [EOL]                     _reportInvalidChar(i); [EOL]             } [EOL]         } [EOL]     } [EOL] }
private void _skipCppComment() throws IOException, JsonParseException { [EOL]     final int[] codes = CharTypes.getInputCodeComment(); [EOL]     while ((_inputPtr < _inputEnd) || loadMore()) { [EOL]         int i = (int) _inputBuffer[_inputPtr++] & 0xFF; [EOL]         int code = codes[i]; [EOL]         if (code != 0) { [EOL]             switch(code) { [EOL]                 case INT_LF: [EOL]                     _skipLF(); [EOL]                     return; [EOL]                 case INT_CR: [EOL]                     _skipCR(); [EOL]                     return; [EOL]                 case INT_ASTERISK: [EOL]                     break; [EOL]                 case 2: [EOL]                     _skipUtf8_2(i); [EOL]                     break; [EOL]                 case 3: [EOL]                     _skipUtf8_3(i); [EOL]                     break; [EOL]                 case 4: [EOL]                     _skipUtf8_4(i); [EOL]                     break; [EOL]                 default: [EOL]                     _reportInvalidChar(i); [EOL]             } [EOL]         } [EOL]     } [EOL] }
private void _skipCppComment() throws IOException, JsonParseException { [EOL]     final int[] codes = CharTypes.getInputCodeComment(); [EOL]     while ((_inputPtr < _inputEnd) || loadMore()) { [EOL]         int i = (int) _inputBuffer[_inputPtr++] & 0xFF; [EOL]         int code = codes[i]; [EOL]         if (code != 0) { [EOL]             switch(code) { [EOL]                 case INT_LF: [EOL]                     _skipLF(); [EOL]                     return; [EOL]                 case INT_CR: [EOL]                     _skipCR(); [EOL]                     return; [EOL]                 case INT_ASTERISK: [EOL]                     break; [EOL]                 case 2: [EOL]                     _skipUtf8_2(i); [EOL]                     break; [EOL]                 case 3: [EOL]                     _skipUtf8_3(i); [EOL]                     break; [EOL]                 case 4: [EOL]                     _skipUtf8_4(i); [EOL]                     break; [EOL]                 default: [EOL]                     _reportInvalidChar(i); [EOL]             } [EOL]         } [EOL]     } [EOL] }
@Override [EOL] protected char _decodeEscaped() throws IOException, JsonParseException { [EOL]     if (_inputPtr >= _inputEnd) { [EOL]         if (!loadMore()) { [EOL]             _reportInvalidEOF(" in character escape sequence"); [EOL]         } [EOL]     } [EOL]     int c = (int) _inputBuffer[_inputPtr++]; [EOL]     switch((int) c) { [EOL]         case INT_b: [EOL]             return '\b'; [EOL]         case INT_t: [EOL]             return '\t'; [EOL]         case INT_n: [EOL]             return '\n'; [EOL]         case INT_f: [EOL]             return '\f'; [EOL]         case INT_r: [EOL]             return '\r'; [EOL]         case INT_QUOTE: [EOL]         case INT_SLASH: [EOL]         case INT_BACKSLASH: [EOL]             return (char) c; [EOL]         case INT_u: [EOL]             break; [EOL]         default: [EOL]             return _handleUnrecognizedCharacterEscape((char) _decodeCharForError(c)); [EOL]     } [EOL]     int value = 0; [EOL]     for (int i = 0; i < 4; ++i) { [EOL]         if (_inputPtr >= _inputEnd) { [EOL]             if (!loadMore()) { [EOL]                 _reportInvalidEOF(" in character escape sequence"); [EOL]             } [EOL]         } [EOL]         int ch = (int) _inputBuffer[_inputPtr++]; [EOL]         int digit = CharTypes.charToHex(ch); [EOL]         if (digit < 0) { [EOL]             _reportUnexpectedChar(ch, "expected a hex-digit for character escape sequence"); [EOL]         } [EOL]         value = (value << 4) | digit; [EOL]     } [EOL]     return (char) value; [EOL] }
@Override [EOL] protected char _decodeEscaped() throws IOException, JsonParseException { [EOL]     if (_inputPtr >= _inputEnd) { [EOL]         if (!loadMore()) { [EOL]             _reportInvalidEOF(" in character escape sequence"); [EOL]         } [EOL]     } [EOL]     int c = (int) _inputBuffer[_inputPtr++]; [EOL]     switch((int) c) { [EOL]         case INT_b: [EOL]             return '\b'; [EOL]         case INT_t: [EOL]             return '\t'; [EOL]         case INT_n: [EOL]             return '\n'; [EOL]         case INT_f: [EOL]             return '\f'; [EOL]         case INT_r: [EOL]             return '\r'; [EOL]         case INT_QUOTE: [EOL]         case INT_SLASH: [EOL]         case INT_BACKSLASH: [EOL]             return (char) c; [EOL]         case INT_u: [EOL]             break; [EOL]         default: [EOL]             return _handleUnrecognizedCharacterEscape((char) _decodeCharForError(c)); [EOL]     } [EOL]     int value = 0; [EOL]     for (int i = 0; i < 4; ++i) { [EOL]         if (_inputPtr >= _inputEnd) { [EOL]             if (!loadMore()) { [EOL]                 _reportInvalidEOF(" in character escape sequence"); [EOL]             } [EOL]         } [EOL]         int ch = (int) _inputBuffer[_inputPtr++]; [EOL]         int digit = CharTypes.charToHex(ch); [EOL]         if (digit < 0) { [EOL]             _reportUnexpectedChar(ch, "expected a hex-digit for character escape sequence"); [EOL]         } [EOL]         value = (value << 4) | digit; [EOL]     } [EOL]     return (char) value; [EOL] }
@Override [EOL] protected char _decodeEscaped() throws IOException, JsonParseException { [EOL]     if (_inputPtr >= _inputEnd) { [EOL]         if (!loadMore()) { [EOL]             _reportInvalidEOF(" in character escape sequence"); [EOL]         } [EOL]     } [EOL]     int c = (int) _inputBuffer[_inputPtr++]; [EOL]     switch((int) c) { [EOL]         case INT_b: [EOL]             return '\b'; [EOL]         case INT_t: [EOL]             return '\t'; [EOL]         case INT_n: [EOL]             return '\n'; [EOL]         case INT_f: [EOL]             return '\f'; [EOL]         case INT_r: [EOL]             return '\r'; [EOL]         case INT_QUOTE: [EOL]         case INT_SLASH: [EOL]         case INT_BACKSLASH: [EOL]             return (char) c; [EOL]         case INT_u: [EOL]             break; [EOL]         default: [EOL]             return _handleUnrecognizedCharacterEscape((char) _decodeCharForError(c)); [EOL]     } [EOL]     int value = 0; [EOL]     for (int i = 0; i < 4; ++i) { [EOL]         if (_inputPtr >= _inputEnd) { [EOL]             if (!loadMore()) { [EOL]                 _reportInvalidEOF(" in character escape sequence"); [EOL]             } [EOL]         } [EOL]         int ch = (int) _inputBuffer[_inputPtr++]; [EOL]         int digit = CharTypes.charToHex(ch); [EOL]         if (digit < 0) { [EOL]             _reportUnexpectedChar(ch, "expected a hex-digit for character escape sequence"); [EOL]         } [EOL]         value = (value << 4) | digit; [EOL]     } [EOL]     return (char) value; [EOL] }
@Override [EOL] protected char _decodeEscaped() throws IOException, JsonParseException { [EOL]     if (_inputPtr >= _inputEnd) { [EOL]         if (!loadMore()) { [EOL]             _reportInvalidEOF(" in character escape sequence"); [EOL]         } [EOL]     } [EOL]     int c = (int) _inputBuffer[_inputPtr++]; [EOL]     switch((int) c) { [EOL]         case INT_b: [EOL]             return '\b'; [EOL]         case INT_t: [EOL]             return '\t'; [EOL]         case INT_n: [EOL]             return '\n'; [EOL]         case INT_f: [EOL]             return '\f'; [EOL]         case INT_r: [EOL]             return '\r'; [EOL]         case INT_QUOTE: [EOL]         case INT_SLASH: [EOL]         case INT_BACKSLASH: [EOL]             return (char) c; [EOL]         case INT_u: [EOL]             break; [EOL]         default: [EOL]             return _handleUnrecognizedCharacterEscape((char) _decodeCharForError(c)); [EOL]     } [EOL]     int value = 0; [EOL]     for (int i = 0; i < 4; ++i) { [EOL]         if (_inputPtr >= _inputEnd) { [EOL]             if (!loadMore()) { [EOL]                 _reportInvalidEOF(" in character escape sequence"); [EOL]             } [EOL]         } [EOL]         int ch = (int) _inputBuffer[_inputPtr++]; [EOL]         int digit = CharTypes.charToHex(ch); [EOL]         if (digit < 0) { [EOL]             _reportUnexpectedChar(ch, "expected a hex-digit for character escape sequence"); [EOL]         } [EOL]         value = (value << 4) | digit; [EOL]     } [EOL]     return (char) value; [EOL] }
@Override [EOL] protected char _decodeEscaped() throws IOException, JsonParseException { [EOL]     if (_inputPtr >= _inputEnd) { [EOL]         if (!loadMore()) { [EOL]             _reportInvalidEOF(" in character escape sequence"); [EOL]         } [EOL]     } [EOL]     int c = (int) _inputBuffer[_inputPtr++]; [EOL]     switch((int) c) { [EOL]         case INT_b: [EOL]             return '\b'; [EOL]         case INT_t: [EOL]             return '\t'; [EOL]         case INT_n: [EOL]             return '\n'; [EOL]         case INT_f: [EOL]             return '\f'; [EOL]         case INT_r: [EOL]             return '\r'; [EOL]         case INT_QUOTE: [EOL]         case INT_SLASH: [EOL]         case INT_BACKSLASH: [EOL]             return (char) c; [EOL]         case INT_u: [EOL]             break; [EOL]         default: [EOL]             return _handleUnrecognizedCharacterEscape((char) _decodeCharForError(c)); [EOL]     } [EOL]     int value = 0; [EOL]     for (int i = 0; i < 4; ++i) { [EOL]         if (_inputPtr >= _inputEnd) { [EOL]             if (!loadMore()) { [EOL]                 _reportInvalidEOF(" in character escape sequence"); [EOL]             } [EOL]         } [EOL]         int ch = (int) _inputBuffer[_inputPtr++]; [EOL]         int digit = CharTypes.charToHex(ch); [EOL]         if (digit < 0) { [EOL]             _reportUnexpectedChar(ch, "expected a hex-digit for character escape sequence"); [EOL]         } [EOL]         value = (value << 4) | digit; [EOL]     } [EOL]     return (char) value; [EOL] }
private int _decodeUtf8_2(int c) throws IOException, JsonParseException { [EOL]     if (_inputPtr >= _inputEnd) { [EOL]         loadMoreGuaranteed(); [EOL]     } [EOL]     int d = (int) _inputBuffer[_inputPtr++]; [EOL]     if ((d & 0xC0) != 0x080) { [EOL]         _reportInvalidOther(d & 0xFF, _inputPtr); [EOL]     } [EOL]     return ((c & 0x1F) << 6) | (d & 0x3F); [EOL] }
private int _decodeUtf8_2(int c) throws IOException, JsonParseException { [EOL]     if (_inputPtr >= _inputEnd) { [EOL]         loadMoreGuaranteed(); [EOL]     } [EOL]     int d = (int) _inputBuffer[_inputPtr++]; [EOL]     if ((d & 0xC0) != 0x080) { [EOL]         _reportInvalidOther(d & 0xFF, _inputPtr); [EOL]     } [EOL]     return ((c & 0x1F) << 6) | (d & 0x3F); [EOL] }
private int _decodeUtf8_2(int c) throws IOException, JsonParseException { [EOL]     if (_inputPtr >= _inputEnd) { [EOL]         loadMoreGuaranteed(); [EOL]     } [EOL]     int d = (int) _inputBuffer[_inputPtr++]; [EOL]     if ((d & 0xC0) != 0x080) { [EOL]         _reportInvalidOther(d & 0xFF, _inputPtr); [EOL]     } [EOL]     return ((c & 0x1F) << 6) | (d & 0x3F); [EOL] }
private int _decodeUtf8_3(int c1) throws IOException, JsonParseException { [EOL]     if (_inputPtr >= _inputEnd) { [EOL]         loadMoreGuaranteed(); [EOL]     } [EOL]     c1 &= 0x0F; [EOL]     int d = (int) _inputBuffer[_inputPtr++]; [EOL]     if ((d & 0xC0) != 0x080) { [EOL]         _reportInvalidOther(d & 0xFF, _inputPtr); [EOL]     } [EOL]     int c = (c1 << 6) | (d & 0x3F); [EOL]     if (_inputPtr >= _inputEnd) { [EOL]         loadMoreGuaranteed(); [EOL]     } [EOL]     d = (int) _inputBuffer[_inputPtr++]; [EOL]     if ((d & 0xC0) != 0x080) { [EOL]         _reportInvalidOther(d & 0xFF, _inputPtr); [EOL]     } [EOL]     c = (c << 6) | (d & 0x3F); [EOL]     return c; [EOL] }
private int _decodeUtf8_3(int c1) throws IOException, JsonParseException { [EOL]     if (_inputPtr >= _inputEnd) { [EOL]         loadMoreGuaranteed(); [EOL]     } [EOL]     c1 &= 0x0F; [EOL]     int d = (int) _inputBuffer[_inputPtr++]; [EOL]     if ((d & 0xC0) != 0x080) { [EOL]         _reportInvalidOther(d & 0xFF, _inputPtr); [EOL]     } [EOL]     int c = (c1 << 6) | (d & 0x3F); [EOL]     if (_inputPtr >= _inputEnd) { [EOL]         loadMoreGuaranteed(); [EOL]     } [EOL]     d = (int) _inputBuffer[_inputPtr++]; [EOL]     if ((d & 0xC0) != 0x080) { [EOL]         _reportInvalidOther(d & 0xFF, _inputPtr); [EOL]     } [EOL]     c = (c << 6) | (d & 0x3F); [EOL]     return c; [EOL] }
private int _decodeUtf8_3(int c1) throws IOException, JsonParseException { [EOL]     if (_inputPtr >= _inputEnd) { [EOL]         loadMoreGuaranteed(); [EOL]     } [EOL]     c1 &= 0x0F; [EOL]     int d = (int) _inputBuffer[_inputPtr++]; [EOL]     if ((d & 0xC0) != 0x080) { [EOL]         _reportInvalidOther(d & 0xFF, _inputPtr); [EOL]     } [EOL]     int c = (c1 << 6) | (d & 0x3F); [EOL]     if (_inputPtr >= _inputEnd) { [EOL]         loadMoreGuaranteed(); [EOL]     } [EOL]     d = (int) _inputBuffer[_inputPtr++]; [EOL]     if ((d & 0xC0) != 0x080) { [EOL]         _reportInvalidOther(d & 0xFF, _inputPtr); [EOL]     } [EOL]     c = (c << 6) | (d & 0x3F); [EOL]     return c; [EOL] }
private int _decodeUtf8_3(int c1) throws IOException, JsonParseException { [EOL]     if (_inputPtr >= _inputEnd) { [EOL]         loadMoreGuaranteed(); [EOL]     } [EOL]     c1 &= 0x0F; [EOL]     int d = (int) _inputBuffer[_inputPtr++]; [EOL]     if ((d & 0xC0) != 0x080) { [EOL]         _reportInvalidOther(d & 0xFF, _inputPtr); [EOL]     } [EOL]     int c = (c1 << 6) | (d & 0x3F); [EOL]     if (_inputPtr >= _inputEnd) { [EOL]         loadMoreGuaranteed(); [EOL]     } [EOL]     d = (int) _inputBuffer[_inputPtr++]; [EOL]     if ((d & 0xC0) != 0x080) { [EOL]         _reportInvalidOther(d & 0xFF, _inputPtr); [EOL]     } [EOL]     c = (c << 6) | (d & 0x3F); [EOL]     return c; [EOL] }
private int _decodeUtf8_3fast(int c1) throws IOException, JsonParseException { [EOL]     c1 &= 0x0F; [EOL]     int d = (int) _inputBuffer[_inputPtr++]; [EOL]     if ((d & 0xC0) != 0x080) { [EOL]         _reportInvalidOther(d & 0xFF, _inputPtr); [EOL]     } [EOL]     int c = (c1 << 6) | (d & 0x3F); [EOL]     d = (int) _inputBuffer[_inputPtr++]; [EOL]     if ((d & 0xC0) != 0x080) { [EOL]         _reportInvalidOther(d & 0xFF, _inputPtr); [EOL]     } [EOL]     c = (c << 6) | (d & 0x3F); [EOL]     return c; [EOL] }
private int _decodeUtf8_3fast(int c1) throws IOException, JsonParseException { [EOL]     c1 &= 0x0F; [EOL]     int d = (int) _inputBuffer[_inputPtr++]; [EOL]     if ((d & 0xC0) != 0x080) { [EOL]         _reportInvalidOther(d & 0xFF, _inputPtr); [EOL]     } [EOL]     int c = (c1 << 6) | (d & 0x3F); [EOL]     d = (int) _inputBuffer[_inputPtr++]; [EOL]     if ((d & 0xC0) != 0x080) { [EOL]         _reportInvalidOther(d & 0xFF, _inputPtr); [EOL]     } [EOL]     c = (c << 6) | (d & 0x3F); [EOL]     return c; [EOL] }
private int _decodeUtf8_3fast(int c1) throws IOException, JsonParseException { [EOL]     c1 &= 0x0F; [EOL]     int d = (int) _inputBuffer[_inputPtr++]; [EOL]     if ((d & 0xC0) != 0x080) { [EOL]         _reportInvalidOther(d & 0xFF, _inputPtr); [EOL]     } [EOL]     int c = (c1 << 6) | (d & 0x3F); [EOL]     d = (int) _inputBuffer[_inputPtr++]; [EOL]     if ((d & 0xC0) != 0x080) { [EOL]         _reportInvalidOther(d & 0xFF, _inputPtr); [EOL]     } [EOL]     c = (c << 6) | (d & 0x3F); [EOL]     return c; [EOL] }
protected void _skipCR() throws IOException { [EOL]     if (_inputPtr < _inputEnd || loadMore()) { [EOL]         if (_inputBuffer[_inputPtr] == BYTE_LF) { [EOL]             ++_inputPtr; [EOL]         } [EOL]     } [EOL]     ++_currInputRow; [EOL]     _currInputRowStart = _inputPtr; [EOL] }
protected void _skipCR() throws IOException { [EOL]     if (_inputPtr < _inputEnd || loadMore()) { [EOL]         if (_inputBuffer[_inputPtr] == BYTE_LF) { [EOL]             ++_inputPtr; [EOL]         } [EOL]     } [EOL]     ++_currInputRow; [EOL]     _currInputRowStart = _inputPtr; [EOL] }
public static int[] growArrayBy(int[] arr, int more) { [EOL]     if (arr == null) { [EOL]         return new int[more]; [EOL]     } [EOL]     return Arrays.copyOf(arr, arr.length + more); [EOL] }
public static int[] growArrayBy(int[] arr, int more) { [EOL]     if (arr == null) { [EOL]         return new int[more]; [EOL]     } [EOL]     return Arrays.copyOf(arr, arr.length + more); [EOL] }
public IOContext(BufferRecycler br, Object sourceRef, boolean managedResource) { [EOL]     _bufferRecycler = br; [EOL]     _sourceRef = sourceRef; [EOL]     _managedResource = managedResource; [EOL] }
public IOContext(BufferRecycler br, Object sourceRef, boolean managedResource) { [EOL]     _bufferRecycler = br; [EOL]     _sourceRef = sourceRef; [EOL]     _managedResource = managedResource; [EOL] }
public byte[] allocReadIOBuffer() { [EOL]     _verifyAlloc(_readIOBuffer); [EOL]     return (_readIOBuffer = _bufferRecycler.allocByteBuffer(BufferRecycler.ByteBufferType.READ_IO_BUFFER)); [EOL] }
public byte[] allocReadIOBuffer() { [EOL]     _verifyAlloc(_readIOBuffer); [EOL]     return (_readIOBuffer = _bufferRecycler.allocByteBuffer(BufferRecycler.ByteBufferType.READ_IO_BUFFER)); [EOL] }
public byte[] allocWriteEncodingBuffer() { [EOL]     _verifyAlloc(_writeEncodingBuffer); [EOL]     return (_writeEncodingBuffer = _bufferRecycler.allocByteBuffer(BufferRecycler.ByteBufferType.WRITE_ENCODING_BUFFER)); [EOL] }
public byte[] allocWriteEncodingBuffer() { [EOL]     _verifyAlloc(_writeEncodingBuffer); [EOL]     return (_writeEncodingBuffer = _bufferRecycler.allocByteBuffer(BufferRecycler.ByteBufferType.WRITE_ENCODING_BUFFER)); [EOL] }
public char[] allocTokenBuffer() { [EOL]     _verifyAlloc(_tokenCBuffer); [EOL]     return (_tokenCBuffer = _bufferRecycler.allocCharBuffer(BufferRecycler.CharBufferType.TOKEN_BUFFER)); [EOL] }
public char[] allocTokenBuffer() { [EOL]     _verifyAlloc(_tokenCBuffer); [EOL]     return (_tokenCBuffer = _bufferRecycler.allocCharBuffer(BufferRecycler.CharBufferType.TOKEN_BUFFER)); [EOL] }
public char[] allocConcatBuffer() { [EOL]     _verifyAlloc(_concatCBuffer); [EOL]     return (_concatCBuffer = _bufferRecycler.allocCharBuffer(BufferRecycler.CharBufferType.CONCAT_BUFFER)); [EOL] }
public char[] allocConcatBuffer() { [EOL]     _verifyAlloc(_concatCBuffer); [EOL]     return (_concatCBuffer = _bufferRecycler.allocCharBuffer(BufferRecycler.CharBufferType.CONCAT_BUFFER)); [EOL] }
public char[] allocNameCopyBuffer(int minSize) { [EOL]     _verifyAlloc(_nameCopyBuffer); [EOL]     return (_nameCopyBuffer = _bufferRecycler.allocCharBuffer(BufferRecycler.CharBufferType.NAME_COPY_BUFFER, minSize)); [EOL] }
public char[] allocNameCopyBuffer(int minSize) { [EOL]     _verifyAlloc(_nameCopyBuffer); [EOL]     return (_nameCopyBuffer = _bufferRecycler.allocCharBuffer(BufferRecycler.CharBufferType.NAME_COPY_BUFFER, minSize)); [EOL] }
public void releaseReadIOBuffer(byte[] buf) { [EOL]     if (buf != null) { [EOL]         _verifyRelease(buf, _readIOBuffer); [EOL]         _readIOBuffer = null; [EOL]         _bufferRecycler.releaseByteBuffer(BufferRecycler.ByteBufferType.READ_IO_BUFFER, buf); [EOL]     } [EOL] }
public void releaseReadIOBuffer(byte[] buf) { [EOL]     if (buf != null) { [EOL]         _verifyRelease(buf, _readIOBuffer); [EOL]         _readIOBuffer = null; [EOL]         _bufferRecycler.releaseByteBuffer(BufferRecycler.ByteBufferType.READ_IO_BUFFER, buf); [EOL]     } [EOL] }
public void releaseWriteEncodingBuffer(byte[] buf) { [EOL]     if (buf != null) { [EOL]         _verifyRelease(buf, _writeEncodingBuffer); [EOL]         _writeEncodingBuffer = null; [EOL]         _bufferRecycler.releaseByteBuffer(BufferRecycler.ByteBufferType.WRITE_ENCODING_BUFFER, buf); [EOL]     } [EOL] }
public void releaseWriteEncodingBuffer(byte[] buf) { [EOL]     if (buf != null) { [EOL]         _verifyRelease(buf, _writeEncodingBuffer); [EOL]         _writeEncodingBuffer = null; [EOL]         _bufferRecycler.releaseByteBuffer(BufferRecycler.ByteBufferType.WRITE_ENCODING_BUFFER, buf); [EOL]     } [EOL] }
public void releaseTokenBuffer(char[] buf) { [EOL]     if (buf != null) { [EOL]         _verifyRelease(buf, _tokenCBuffer); [EOL]         _tokenCBuffer = null; [EOL]         _bufferRecycler.releaseCharBuffer(BufferRecycler.CharBufferType.TOKEN_BUFFER, buf); [EOL]     } [EOL] }
public void releaseTokenBuffer(char[] buf) { [EOL]     if (buf != null) { [EOL]         _verifyRelease(buf, _tokenCBuffer); [EOL]         _tokenCBuffer = null; [EOL]         _bufferRecycler.releaseCharBuffer(BufferRecycler.CharBufferType.TOKEN_BUFFER, buf); [EOL]     } [EOL] }
public void releaseConcatBuffer(char[] buf) { [EOL]     if (buf != null) { [EOL]         _verifyRelease(buf, _concatCBuffer); [EOL]         _concatCBuffer = null; [EOL]         _bufferRecycler.releaseCharBuffer(BufferRecycler.CharBufferType.CONCAT_BUFFER, buf); [EOL]     } [EOL] }
public void releaseConcatBuffer(char[] buf) { [EOL]     if (buf != null) { [EOL]         _verifyRelease(buf, _concatCBuffer); [EOL]         _concatCBuffer = null; [EOL]         _bufferRecycler.releaseCharBuffer(BufferRecycler.CharBufferType.CONCAT_BUFFER, buf); [EOL]     } [EOL] }
public void releaseNameCopyBuffer(char[] buf) { [EOL]     if (buf != null) { [EOL]         _verifyRelease(buf, _nameCopyBuffer); [EOL]         _nameCopyBuffer = null; [EOL]         _bufferRecycler.releaseCharBuffer(BufferRecycler.CharBufferType.NAME_COPY_BUFFER, buf); [EOL]     } [EOL] }
public void releaseNameCopyBuffer(char[] buf) { [EOL]     if (buf != null) { [EOL]         _verifyRelease(buf, _nameCopyBuffer); [EOL]         _nameCopyBuffer = null; [EOL]         _bufferRecycler.releaseCharBuffer(BufferRecycler.CharBufferType.NAME_COPY_BUFFER, buf); [EOL]     } [EOL] }
private final void _verifyAlloc(Object buffer) { [EOL]     if (buffer != null) { [EOL]         throw new IllegalStateException("Trying to call same allocXxx() method second time"); [EOL]     } [EOL] }
private final void _verifyAlloc(Object buffer) { [EOL]     if (buffer != null) { [EOL]         throw new IllegalStateException("Trying to call same allocXxx() method second time"); [EOL]     } [EOL] }
private final void _verifyRelease(Object toRelease, Object src) { [EOL]     if (toRelease != src) { [EOL]         throw new IllegalArgumentException("Trying to release buffer not owned by the context"); [EOL]     } [EOL] }
private DataFormatMatcher _findFormat(InputAccessor.Std acc) throws IOException { [EOL]     JsonFactory bestMatch = null; [EOL]     MatchStrength bestMatchStrength = null; [EOL]     for (JsonFactory f : _detectors) { [EOL]         acc.reset(); [EOL]         MatchStrength strength = f.hasFormat(acc); [EOL]         if (strength == null || strength.ordinal() < _minimalMatch.ordinal()) { [EOL]             continue; [EOL]         } [EOL]         if (bestMatch != null) { [EOL]             if (bestMatchStrength.ordinal() >= strength.ordinal()) { [EOL]                 continue; [EOL]             } [EOL]         } [EOL]         bestMatch = f; [EOL]         bestMatchStrength = strength; [EOL]         if (strength.ordinal() >= _optimalMatch.ordinal()) { [EOL]             break; [EOL]         } [EOL]     } [EOL]     return acc.createMatcher(bestMatch, bestMatchStrength); [EOL] }
private DataFormatMatcher _findFormat(InputAccessor.Std acc) throws IOException { [EOL]     JsonFactory bestMatch = null; [EOL]     MatchStrength bestMatchStrength = null; [EOL]     for (JsonFactory f : _detectors) { [EOL]         acc.reset(); [EOL]         MatchStrength strength = f.hasFormat(acc); [EOL]         if (strength == null || strength.ordinal() < _minimalMatch.ordinal()) { [EOL]             continue; [EOL]         } [EOL]         if (bestMatch != null) { [EOL]             if (bestMatchStrength.ordinal() >= strength.ordinal()) { [EOL]                 continue; [EOL]             } [EOL]         } [EOL]         bestMatch = f; [EOL]         bestMatchStrength = strength; [EOL]         if (strength.ordinal() >= _optimalMatch.ordinal()) { [EOL]             break; [EOL]         } [EOL]     } [EOL]     return acc.createMatcher(bestMatch, bestMatchStrength); [EOL] }
private DataFormatMatcher _findFormat(InputAccessor.Std acc) throws IOException { [EOL]     JsonFactory bestMatch = null; [EOL]     MatchStrength bestMatchStrength = null; [EOL]     for (JsonFactory f : _detectors) { [EOL]         acc.reset(); [EOL]         MatchStrength strength = f.hasFormat(acc); [EOL]         if (strength == null || strength.ordinal() < _minimalMatch.ordinal()) { [EOL]             continue; [EOL]         } [EOL]         if (bestMatch != null) { [EOL]             if (bestMatchStrength.ordinal() >= strength.ordinal()) { [EOL]                 continue; [EOL]             } [EOL]         } [EOL]         bestMatch = f; [EOL]         bestMatchStrength = strength; [EOL]         if (strength.ordinal() >= _optimalMatch.ordinal()) { [EOL]             break; [EOL]         } [EOL]     } [EOL]     return acc.createMatcher(bestMatch, bestMatchStrength); [EOL] }
private DataFormatMatcher _findFormat(InputAccessor.Std acc) throws IOException { [EOL]     JsonFactory bestMatch = null; [EOL]     MatchStrength bestMatchStrength = null; [EOL]     for (JsonFactory f : _detectors) { [EOL]         acc.reset(); [EOL]         MatchStrength strength = f.hasFormat(acc); [EOL]         if (strength == null || strength.ordinal() < _minimalMatch.ordinal()) { [EOL]             continue; [EOL]         } [EOL]         if (bestMatch != null) { [EOL]             if (bestMatchStrength.ordinal() >= strength.ordinal()) { [EOL]                 continue; [EOL]             } [EOL]         } [EOL]         bestMatch = f; [EOL]         bestMatchStrength = strength; [EOL]         if (strength.ordinal() >= _optimalMatch.ordinal()) { [EOL]             break; [EOL]         } [EOL]     } [EOL]     return acc.createMatcher(bestMatch, bestMatchStrength); [EOL] }
private DataFormatMatcher _findFormat(InputAccessor.Std acc) throws IOException { [EOL]     JsonFactory bestMatch = null; [EOL]     MatchStrength bestMatchStrength = null; [EOL]     for (JsonFactory f : _detectors) { [EOL]         acc.reset(); [EOL]         MatchStrength strength = f.hasFormat(acc); [EOL]         if (strength == null || strength.ordinal() < _minimalMatch.ordinal()) { [EOL]             continue; [EOL]         } [EOL]         if (bestMatch != null) { [EOL]             if (bestMatchStrength.ordinal() >= strength.ordinal()) { [EOL]                 continue; [EOL]             } [EOL]         } [EOL]         bestMatch = f; [EOL]         bestMatchStrength = strength; [EOL]         if (strength.ordinal() >= _optimalMatch.ordinal()) { [EOL]             break; [EOL]         } [EOL]     } [EOL]     return acc.createMatcher(bestMatch, bestMatchStrength); [EOL] }
private DataFormatMatcher _findFormat(InputAccessor.Std acc) throws IOException { [EOL]     JsonFactory bestMatch = null; [EOL]     MatchStrength bestMatchStrength = null; [EOL]     for (JsonFactory f : _detectors) { [EOL]         acc.reset(); [EOL]         MatchStrength strength = f.hasFormat(acc); [EOL]         if (strength == null || strength.ordinal() < _minimalMatch.ordinal()) { [EOL]             continue; [EOL]         } [EOL]         if (bestMatch != null) { [EOL]             if (bestMatchStrength.ordinal() >= strength.ordinal()) { [EOL]                 continue; [EOL]             } [EOL]         } [EOL]         bestMatch = f; [EOL]         bestMatchStrength = strength; [EOL]         if (strength.ordinal() >= _optimalMatch.ordinal()) { [EOL]             break; [EOL]         } [EOL]     } [EOL]     return acc.createMatcher(bestMatch, bestMatchStrength); [EOL] }
@SuppressWarnings("unchecked") [EOL] public <T extends TreeNode> T readValueAsTree() throws IOException, JsonProcessingException { [EOL]     ObjectCodec codec = getCodec(); [EOL]     if (codec == null) { [EOL]         throw new IllegalStateException("No ObjectCodec defined for the parser, can not deserialize JSON into JsonNode tree"); [EOL]     } [EOL]     return (T) codec.readTree(this); [EOL] }
@SuppressWarnings("unchecked") [EOL] public <T extends TreeNode> T readValueAsTree() throws IOException, JsonProcessingException { [EOL]     ObjectCodec codec = getCodec(); [EOL]     if (codec == null) { [EOL]         throw new IllegalStateException("No ObjectCodec defined for the parser, can not deserialize JSON into JsonNode tree"); [EOL]     } [EOL]     return (T) codec.readTree(this); [EOL] }
public JsonGeneratorImpl(IOContext ctxt, int features, ObjectCodec codec) { [EOL]     super(features, codec); [EOL]     _ioContext = ctxt; [EOL]     if (isEnabled(Feature.ESCAPE_NON_ASCII)) { [EOL]         setHighestNonEscapedChar(127); [EOL]     } [EOL] }
public JsonGeneratorImpl(IOContext ctxt, int features, ObjectCodec codec) { [EOL]     super(features, codec); [EOL]     _ioContext = ctxt; [EOL]     if (isEnabled(Feature.ESCAPE_NON_ASCII)) { [EOL]         setHighestNonEscapedChar(127); [EOL]     } [EOL] }
@Override [EOL] public Version version() { [EOL]     return VersionUtil.versionFor(getClass()); [EOL] }
public void resetWithShared(char[] buf, int start, int len) { [EOL]     _resultString = null; [EOL]     _resultArray = null; [EOL]     _inputBuffer = buf; [EOL]     _inputStart = start; [EOL]     _inputLen = len; [EOL]     if (_hasSegments) { [EOL]         clearSegments(); [EOL]     } [EOL] }
public void resetWithShared(char[] buf, int start, int len) { [EOL]     _resultString = null; [EOL]     _resultArray = null; [EOL]     _inputBuffer = buf; [EOL]     _inputStart = start; [EOL]     _inputLen = len; [EOL]     if (_hasSegments) { [EOL]         clearSegments(); [EOL]     } [EOL] }
public void resetWithCopy(char[] buf, int start, int len) { [EOL]     _inputBuffer = null; [EOL]     _inputStart = -1; [EOL]     _inputLen = 0; [EOL]     _resultString = null; [EOL]     _resultArray = null; [EOL]     if (_hasSegments) { [EOL]         clearSegments(); [EOL]     } else if (_currentSegment == null) { [EOL]         _currentSegment = findBuffer(len); [EOL]     } [EOL]     _currentSize = _segmentSize = 0; [EOL]     append(buf, start, len); [EOL] }
public void resetWithCopy(char[] buf, int start, int len) { [EOL]     _inputBuffer = null; [EOL]     _inputStart = -1; [EOL]     _inputLen = 0; [EOL]     _resultString = null; [EOL]     _resultArray = null; [EOL]     if (_hasSegments) { [EOL]         clearSegments(); [EOL]     } else if (_currentSegment == null) { [EOL]         _currentSegment = findBuffer(len); [EOL]     } [EOL]     _currentSize = _segmentSize = 0; [EOL]     append(buf, start, len); [EOL] }
private void clearSegments() { [EOL]     _hasSegments = false; [EOL]     _segments.clear(); [EOL]     _currentSize = _segmentSize = 0; [EOL] }
public char[] getTextBuffer() { [EOL]     if (_inputStart >= 0) { [EOL]         return _inputBuffer; [EOL]     } [EOL]     if (_resultArray != null) { [EOL]         return _resultArray; [EOL]     } [EOL]     if (_resultString != null) { [EOL]         return (_resultArray = _resultString.toCharArray()); [EOL]     } [EOL]     if (!_hasSegments) { [EOL]         return _currentSegment; [EOL]     } [EOL]     return contentsAsArray(); [EOL] }
public char[] getTextBuffer() { [EOL]     if (_inputStart >= 0) { [EOL]         return _inputBuffer; [EOL]     } [EOL]     if (_resultArray != null) { [EOL]         return _resultArray; [EOL]     } [EOL]     if (_resultString != null) { [EOL]         return (_resultArray = _resultString.toCharArray()); [EOL]     } [EOL]     if (!_hasSegments) { [EOL]         return _currentSegment; [EOL]     } [EOL]     return contentsAsArray(); [EOL] }
public char[] getTextBuffer() { [EOL]     if (_inputStart >= 0) { [EOL]         return _inputBuffer; [EOL]     } [EOL]     if (_resultArray != null) { [EOL]         return _resultArray; [EOL]     } [EOL]     if (_resultString != null) { [EOL]         return (_resultArray = _resultString.toCharArray()); [EOL]     } [EOL]     if (!_hasSegments) { [EOL]         return _currentSegment; [EOL]     } [EOL]     return contentsAsArray(); [EOL] }
public char[] getTextBuffer() { [EOL]     if (_inputStart >= 0) { [EOL]         return _inputBuffer; [EOL]     } [EOL]     if (_resultArray != null) { [EOL]         return _resultArray; [EOL]     } [EOL]     if (_resultString != null) { [EOL]         return (_resultArray = _resultString.toCharArray()); [EOL]     } [EOL]     if (!_hasSegments) { [EOL]         return _currentSegment; [EOL]     } [EOL]     return contentsAsArray(); [EOL] }
public char[] getTextBuffer() { [EOL]     if (_inputStart >= 0) { [EOL]         return _inputBuffer; [EOL]     } [EOL]     if (_resultArray != null) { [EOL]         return _resultArray; [EOL]     } [EOL]     if (_resultString != null) { [EOL]         return (_resultArray = _resultString.toCharArray()); [EOL]     } [EOL]     if (!_hasSegments) { [EOL]         return _currentSegment; [EOL]     } [EOL]     return contentsAsArray(); [EOL] }
public String contentsAsString() { [EOL]     if (_resultString == null) { [EOL]         if (_resultArray != null) { [EOL]             _resultString = new String(_resultArray); [EOL]         } else { [EOL]             if (_inputStart >= 0) { [EOL]                 if (_inputLen < 1) { [EOL]                     return (_resultString = ""); [EOL]                 } [EOL]                 _resultString = new String(_inputBuffer, _inputStart, _inputLen); [EOL]             } else { [EOL]                 int segLen = _segmentSize; [EOL]                 int currLen = _currentSize; [EOL]                 if (segLen == 0) { [EOL]                     _resultString = (currLen == 0) ? "" : new String(_currentSegment, 0, currLen); [EOL]                 } else { [EOL]                     StringBuilder sb = new StringBuilder(segLen + currLen); [EOL]                     if (_segments != null) { [EOL]                         for (int i = 0, len = _segments.size(); i < len; ++i) { [EOL]                             char[] curr = _segments.get(i); [EOL]                             sb.append(curr, 0, curr.length); [EOL]                         } [EOL]                     } [EOL]                     sb.append(_currentSegment, 0, _currentSize); [EOL]                     _resultString = sb.toString(); [EOL]                 } [EOL]             } [EOL]         } [EOL]     } [EOL]     return _resultString; [EOL] }
public String contentsAsString() { [EOL]     if (_resultString == null) { [EOL]         if (_resultArray != null) { [EOL]             _resultString = new String(_resultArray); [EOL]         } else { [EOL]             if (_inputStart >= 0) { [EOL]                 if (_inputLen < 1) { [EOL]                     return (_resultString = ""); [EOL]                 } [EOL]                 _resultString = new String(_inputBuffer, _inputStart, _inputLen); [EOL]             } else { [EOL]                 int segLen = _segmentSize; [EOL]                 int currLen = _currentSize; [EOL]                 if (segLen == 0) { [EOL]                     _resultString = (currLen == 0) ? "" : new String(_currentSegment, 0, currLen); [EOL]                 } else { [EOL]                     StringBuilder sb = new StringBuilder(segLen + currLen); [EOL]                     if (_segments != null) { [EOL]                         for (int i = 0, len = _segments.size(); i < len; ++i) { [EOL]                             char[] curr = _segments.get(i); [EOL]                             sb.append(curr, 0, curr.length); [EOL]                         } [EOL]                     } [EOL]                     sb.append(_currentSegment, 0, _currentSize); [EOL]                     _resultString = sb.toString(); [EOL]                 } [EOL]             } [EOL]         } [EOL]     } [EOL]     return _resultString; [EOL] }
public String contentsAsString() { [EOL]     if (_resultString == null) { [EOL]         if (_resultArray != null) { [EOL]             _resultString = new String(_resultArray); [EOL]         } else { [EOL]             if (_inputStart >= 0) { [EOL]                 if (_inputLen < 1) { [EOL]                     return (_resultString = ""); [EOL]                 } [EOL]                 _resultString = new String(_inputBuffer, _inputStart, _inputLen); [EOL]             } else { [EOL]                 int segLen = _segmentSize; [EOL]                 int currLen = _currentSize; [EOL]                 if (segLen == 0) { [EOL]                     _resultString = (currLen == 0) ? "" : new String(_currentSegment, 0, currLen); [EOL]                 } else { [EOL]                     StringBuilder sb = new StringBuilder(segLen + currLen); [EOL]                     if (_segments != null) { [EOL]                         for (int i = 0, len = _segments.size(); i < len; ++i) { [EOL]                             char[] curr = _segments.get(i); [EOL]                             sb.append(curr, 0, curr.length); [EOL]                         } [EOL]                     } [EOL]                     sb.append(_currentSegment, 0, _currentSize); [EOL]                     _resultString = sb.toString(); [EOL]                 } [EOL]             } [EOL]         } [EOL]     } [EOL]     return _resultString; [EOL] }
public String contentsAsString() { [EOL]     if (_resultString == null) { [EOL]         if (_resultArray != null) { [EOL]             _resultString = new String(_resultArray); [EOL]         } else { [EOL]             if (_inputStart >= 0) { [EOL]                 if (_inputLen < 1) { [EOL]                     return (_resultString = ""); [EOL]                 } [EOL]                 _resultString = new String(_inputBuffer, _inputStart, _inputLen); [EOL]             } else { [EOL]                 int segLen = _segmentSize; [EOL]                 int currLen = _currentSize; [EOL]                 if (segLen == 0) { [EOL]                     _resultString = (currLen == 0) ? "" : new String(_currentSegment, 0, currLen); [EOL]                 } else { [EOL]                     StringBuilder sb = new StringBuilder(segLen + currLen); [EOL]                     if (_segments != null) { [EOL]                         for (int i = 0, len = _segments.size(); i < len; ++i) { [EOL]                             char[] curr = _segments.get(i); [EOL]                             sb.append(curr, 0, curr.length); [EOL]                         } [EOL]                     } [EOL]                     sb.append(_currentSegment, 0, _currentSize); [EOL]                     _resultString = sb.toString(); [EOL]                 } [EOL]             } [EOL]         } [EOL]     } [EOL]     return _resultString; [EOL] }
public String contentsAsString() { [EOL]     if (_resultString == null) { [EOL]         if (_resultArray != null) { [EOL]             _resultString = new String(_resultArray); [EOL]         } else { [EOL]             if (_inputStart >= 0) { [EOL]                 if (_inputLen < 1) { [EOL]                     return (_resultString = ""); [EOL]                 } [EOL]                 _resultString = new String(_inputBuffer, _inputStart, _inputLen); [EOL]             } else { [EOL]                 int segLen = _segmentSize; [EOL]                 int currLen = _currentSize; [EOL]                 if (segLen == 0) { [EOL]                     _resultString = (currLen == 0) ? "" : new String(_currentSegment, 0, currLen); [EOL]                 } else { [EOL]                     StringBuilder sb = new StringBuilder(segLen + currLen); [EOL]                     if (_segments != null) { [EOL]                         for (int i = 0, len = _segments.size(); i < len; ++i) { [EOL]                             char[] curr = _segments.get(i); [EOL]                             sb.append(curr, 0, curr.length); [EOL]                         } [EOL]                     } [EOL]                     sb.append(_currentSegment, 0, _currentSize); [EOL]                     _resultString = sb.toString(); [EOL]                 } [EOL]             } [EOL]         } [EOL]     } [EOL]     return _resultString; [EOL] }
public String contentsAsString() { [EOL]     if (_resultString == null) { [EOL]         if (_resultArray != null) { [EOL]             _resultString = new String(_resultArray); [EOL]         } else { [EOL]             if (_inputStart >= 0) { [EOL]                 if (_inputLen < 1) { [EOL]                     return (_resultString = ""); [EOL]                 } [EOL]                 _resultString = new String(_inputBuffer, _inputStart, _inputLen); [EOL]             } else { [EOL]                 int segLen = _segmentSize; [EOL]                 int currLen = _currentSize; [EOL]                 if (segLen == 0) { [EOL]                     _resultString = (currLen == 0) ? "" : new String(_currentSegment, 0, currLen); [EOL]                 } else { [EOL]                     StringBuilder sb = new StringBuilder(segLen + currLen); [EOL]                     if (_segments != null) { [EOL]                         for (int i = 0, len = _segments.size(); i < len; ++i) { [EOL]                             char[] curr = _segments.get(i); [EOL]                             sb.append(curr, 0, curr.length); [EOL]                         } [EOL]                     } [EOL]                     sb.append(_currentSegment, 0, _currentSize); [EOL]                     _resultString = sb.toString(); [EOL]                 } [EOL]             } [EOL]         } [EOL]     } [EOL]     return _resultString; [EOL] }
public String contentsAsString() { [EOL]     if (_resultString == null) { [EOL]         if (_resultArray != null) { [EOL]             _resultString = new String(_resultArray); [EOL]         } else { [EOL]             if (_inputStart >= 0) { [EOL]                 if (_inputLen < 1) { [EOL]                     return (_resultString = ""); [EOL]                 } [EOL]                 _resultString = new String(_inputBuffer, _inputStart, _inputLen); [EOL]             } else { [EOL]                 int segLen = _segmentSize; [EOL]                 int currLen = _currentSize; [EOL]                 if (segLen == 0) { [EOL]                     _resultString = (currLen == 0) ? "" : new String(_currentSegment, 0, currLen); [EOL]                 } else { [EOL]                     StringBuilder sb = new StringBuilder(segLen + currLen); [EOL]                     if (_segments != null) { [EOL]                         for (int i = 0, len = _segments.size(); i < len; ++i) { [EOL]                             char[] curr = _segments.get(i); [EOL]                             sb.append(curr, 0, curr.length); [EOL]                         } [EOL]                     } [EOL]                     sb.append(_currentSegment, 0, _currentSize); [EOL]                     _resultString = sb.toString(); [EOL]                 } [EOL]             } [EOL]         } [EOL]     } [EOL]     return _resultString; [EOL] }
public void append(char[] c, int start, int len) { [EOL]     if (_inputStart >= 0) { [EOL]         unshare(len); [EOL]     } [EOL]     _resultString = null; [EOL]     _resultArray = null; [EOL]     char[] curr = _currentSegment; [EOL]     int max = curr.length - _currentSize; [EOL]     if (max >= len) { [EOL]         System.arraycopy(c, start, curr, _currentSize, len); [EOL]         _currentSize += len; [EOL]         return; [EOL]     } [EOL]     if (max > 0) { [EOL]         System.arraycopy(c, start, curr, _currentSize, max); [EOL]         start += max; [EOL]         len -= max; [EOL]     } [EOL]     do { [EOL]         expand(len); [EOL]         int amount = Math.min(_currentSegment.length, len); [EOL]         System.arraycopy(c, start, _currentSegment, 0, amount); [EOL]         _currentSize += amount; [EOL]         start += amount; [EOL]         len -= amount; [EOL]     } while (len > 0); [EOL] }
public void append(char[] c, int start, int len) { [EOL]     if (_inputStart >= 0) { [EOL]         unshare(len); [EOL]     } [EOL]     _resultString = null; [EOL]     _resultArray = null; [EOL]     char[] curr = _currentSegment; [EOL]     int max = curr.length - _currentSize; [EOL]     if (max >= len) { [EOL]         System.arraycopy(c, start, curr, _currentSize, len); [EOL]         _currentSize += len; [EOL]         return; [EOL]     } [EOL]     if (max > 0) { [EOL]         System.arraycopy(c, start, curr, _currentSize, max); [EOL]         start += max; [EOL]         len -= max; [EOL]     } [EOL]     do { [EOL]         expand(len); [EOL]         int amount = Math.min(_currentSegment.length, len); [EOL]         System.arraycopy(c, start, _currentSegment, 0, amount); [EOL]         _currentSize += amount; [EOL]         start += amount; [EOL]         len -= amount; [EOL]     } while (len > 0); [EOL] }
public void append(char[] c, int start, int len) { [EOL]     if (_inputStart >= 0) { [EOL]         unshare(len); [EOL]     } [EOL]     _resultString = null; [EOL]     _resultArray = null; [EOL]     char[] curr = _currentSegment; [EOL]     int max = curr.length - _currentSize; [EOL]     if (max >= len) { [EOL]         System.arraycopy(c, start, curr, _currentSize, len); [EOL]         _currentSize += len; [EOL]         return; [EOL]     } [EOL]     if (max > 0) { [EOL]         System.arraycopy(c, start, curr, _currentSize, max); [EOL]         start += max; [EOL]         len -= max; [EOL]     } [EOL]     do { [EOL]         expand(len); [EOL]         int amount = Math.min(_currentSegment.length, len); [EOL]         System.arraycopy(c, start, _currentSegment, 0, amount); [EOL]         _currentSize += amount; [EOL]         start += amount; [EOL]         len -= amount; [EOL]     } while (len > 0); [EOL] }
public void append(char[] c, int start, int len) { [EOL]     if (_inputStart >= 0) { [EOL]         unshare(len); [EOL]     } [EOL]     _resultString = null; [EOL]     _resultArray = null; [EOL]     char[] curr = _currentSegment; [EOL]     int max = curr.length - _currentSize; [EOL]     if (max >= len) { [EOL]         System.arraycopy(c, start, curr, _currentSize, len); [EOL]         _currentSize += len; [EOL]         return; [EOL]     } [EOL]     if (max > 0) { [EOL]         System.arraycopy(c, start, curr, _currentSize, max); [EOL]         start += max; [EOL]         len -= max; [EOL]     } [EOL]     do { [EOL]         expand(len); [EOL]         int amount = Math.min(_currentSegment.length, len); [EOL]         System.arraycopy(c, start, _currentSegment, 0, amount); [EOL]         _currentSize += amount; [EOL]         start += amount; [EOL]         len -= amount; [EOL]     } while (len > 0); [EOL] }
public void append(String str, int offset, int len) { [EOL]     if (_inputStart >= 0) { [EOL]         unshare(len); [EOL]     } [EOL]     _resultString = null; [EOL]     _resultArray = null; [EOL]     char[] curr = _currentSegment; [EOL]     int max = curr.length - _currentSize; [EOL]     if (max >= len) { [EOL]         str.getChars(offset, offset + len, curr, _currentSize); [EOL]         _currentSize += len; [EOL]         return; [EOL]     } [EOL]     if (max > 0) { [EOL]         str.getChars(offset, offset + max, curr, _currentSize); [EOL]         len -= max; [EOL]         offset += max; [EOL]     } [EOL]     do { [EOL]         expand(len); [EOL]         int amount = Math.min(_currentSegment.length, len); [EOL]         str.getChars(offset, offset + amount, _currentSegment, 0); [EOL]         _currentSize += amount; [EOL]         offset += amount; [EOL]         len -= amount; [EOL]     } while (len > 0); [EOL] }
public void append(String str, int offset, int len) { [EOL]     if (_inputStart >= 0) { [EOL]         unshare(len); [EOL]     } [EOL]     _resultString = null; [EOL]     _resultArray = null; [EOL]     char[] curr = _currentSegment; [EOL]     int max = curr.length - _currentSize; [EOL]     if (max >= len) { [EOL]         str.getChars(offset, offset + len, curr, _currentSize); [EOL]         _currentSize += len; [EOL]         return; [EOL]     } [EOL]     if (max > 0) { [EOL]         str.getChars(offset, offset + max, curr, _currentSize); [EOL]         len -= max; [EOL]         offset += max; [EOL]     } [EOL]     do { [EOL]         expand(len); [EOL]         int amount = Math.min(_currentSegment.length, len); [EOL]         str.getChars(offset, offset + amount, _currentSegment, 0); [EOL]         _currentSize += amount; [EOL]         offset += amount; [EOL]         len -= amount; [EOL]     } while (len > 0); [EOL] }
public void append(String str, int offset, int len) { [EOL]     if (_inputStart >= 0) { [EOL]         unshare(len); [EOL]     } [EOL]     _resultString = null; [EOL]     _resultArray = null; [EOL]     char[] curr = _currentSegment; [EOL]     int max = curr.length - _currentSize; [EOL]     if (max >= len) { [EOL]         str.getChars(offset, offset + len, curr, _currentSize); [EOL]         _currentSize += len; [EOL]         return; [EOL]     } [EOL]     if (max > 0) { [EOL]         str.getChars(offset, offset + max, curr, _currentSize); [EOL]         len -= max; [EOL]         offset += max; [EOL]     } [EOL]     do { [EOL]         expand(len); [EOL]         int amount = Math.min(_currentSegment.length, len); [EOL]         str.getChars(offset, offset + amount, _currentSegment, 0); [EOL]         _currentSize += amount; [EOL]         offset += amount; [EOL]         len -= amount; [EOL]     } while (len > 0); [EOL] }
public void append(String str, int offset, int len) { [EOL]     if (_inputStart >= 0) { [EOL]         unshare(len); [EOL]     } [EOL]     _resultString = null; [EOL]     _resultArray = null; [EOL]     char[] curr = _currentSegment; [EOL]     int max = curr.length - _currentSize; [EOL]     if (max >= len) { [EOL]         str.getChars(offset, offset + len, curr, _currentSize); [EOL]         _currentSize += len; [EOL]         return; [EOL]     } [EOL]     if (max > 0) { [EOL]         str.getChars(offset, offset + max, curr, _currentSize); [EOL]         len -= max; [EOL]         offset += max; [EOL]     } [EOL]     do { [EOL]         expand(len); [EOL]         int amount = Math.min(_currentSegment.length, len); [EOL]         str.getChars(offset, offset + amount, _currentSegment, 0); [EOL]         _currentSize += amount; [EOL]         offset += amount; [EOL]         len -= amount; [EOL]     } while (len > 0); [EOL] }
public void append(String str, int offset, int len) { [EOL]     if (_inputStart >= 0) { [EOL]         unshare(len); [EOL]     } [EOL]     _resultString = null; [EOL]     _resultArray = null; [EOL]     char[] curr = _currentSegment; [EOL]     int max = curr.length - _currentSize; [EOL]     if (max >= len) { [EOL]         str.getChars(offset, offset + len, curr, _currentSize); [EOL]         _currentSize += len; [EOL]         return; [EOL]     } [EOL]     if (max > 0) { [EOL]         str.getChars(offset, offset + max, curr, _currentSize); [EOL]         len -= max; [EOL]         offset += max; [EOL]     } [EOL]     do { [EOL]         expand(len); [EOL]         int amount = Math.min(_currentSegment.length, len); [EOL]         str.getChars(offset, offset + amount, _currentSegment, 0); [EOL]         _currentSize += amount; [EOL]         offset += amount; [EOL]         len -= amount; [EOL]     } while (len > 0); [EOL] }
public char[] getCurrentSegment() { [EOL]     if (_inputStart >= 0) { [EOL]         unshare(1); [EOL]     } else { [EOL]         char[] curr = _currentSegment; [EOL]         if (curr == null) { [EOL]             _currentSegment = findBuffer(0); [EOL]         } else if (_currentSize >= curr.length) { [EOL]             expand(1); [EOL]         } [EOL]     } [EOL]     return _currentSegment; [EOL] }
public char[] getCurrentSegment() { [EOL]     if (_inputStart >= 0) { [EOL]         unshare(1); [EOL]     } else { [EOL]         char[] curr = _currentSegment; [EOL]         if (curr == null) { [EOL]             _currentSegment = findBuffer(0); [EOL]         } else if (_currentSize >= curr.length) { [EOL]             expand(1); [EOL]         } [EOL]     } [EOL]     return _currentSegment; [EOL] }
public char[] getCurrentSegment() { [EOL]     if (_inputStart >= 0) { [EOL]         unshare(1); [EOL]     } else { [EOL]         char[] curr = _currentSegment; [EOL]         if (curr == null) { [EOL]             _currentSegment = findBuffer(0); [EOL]         } else if (_currentSize >= curr.length) { [EOL]             expand(1); [EOL]         } [EOL]     } [EOL]     return _currentSegment; [EOL] }
public int getCurrentSegmentSize() { [EOL]     return _currentSize; [EOL] }
public int getCurrentSegmentSize() { [EOL]     return _currentSize; [EOL] }
private void expand(int minNewSegmentSize) { [EOL]     if (_segments == null) { [EOL]         _segments = new ArrayList<char[]>(); [EOL]     } [EOL]     char[] curr = _currentSegment; [EOL]     _hasSegments = true; [EOL]     _segments.add(curr); [EOL]     _segmentSize += curr.length; [EOL]     int oldLen = curr.length; [EOL]     int sizeAddition = oldLen >> 1; [EOL]     if (sizeAddition < minNewSegmentSize) { [EOL]         sizeAddition = minNewSegmentSize; [EOL]     } [EOL]     _currentSize = 0; [EOL]     _currentSegment = _charArray(Math.min(MAX_SEGMENT_LEN, oldLen + sizeAddition)); [EOL] }
private void expand(int minNewSegmentSize) { [EOL]     if (_segments == null) { [EOL]         _segments = new ArrayList<char[]>(); [EOL]     } [EOL]     char[] curr = _currentSegment; [EOL]     _hasSegments = true; [EOL]     _segments.add(curr); [EOL]     _segmentSize += curr.length; [EOL]     int oldLen = curr.length; [EOL]     int sizeAddition = oldLen >> 1; [EOL]     if (sizeAddition < minNewSegmentSize) { [EOL]         sizeAddition = minNewSegmentSize; [EOL]     } [EOL]     _currentSize = 0; [EOL]     _currentSegment = _charArray(Math.min(MAX_SEGMENT_LEN, oldLen + sizeAddition)); [EOL] }
private void expand(int minNewSegmentSize) { [EOL]     if (_segments == null) { [EOL]         _segments = new ArrayList<char[]>(); [EOL]     } [EOL]     char[] curr = _currentSegment; [EOL]     _hasSegments = true; [EOL]     _segments.add(curr); [EOL]     _segmentSize += curr.length; [EOL]     int oldLen = curr.length; [EOL]     int sizeAddition = oldLen >> 1; [EOL]     if (sizeAddition < minNewSegmentSize) { [EOL]         sizeAddition = minNewSegmentSize; [EOL]     } [EOL]     _currentSize = 0; [EOL]     _currentSegment = _charArray(Math.min(MAX_SEGMENT_LEN, oldLen + sizeAddition)); [EOL] }
private char[] buildResultArray() { [EOL]     if (_resultString != null) { [EOL]         return _resultString.toCharArray(); [EOL]     } [EOL]     if (_inputStart >= 0) { [EOL]         final int len = _inputLen; [EOL]         if (len < 1) { [EOL]             return NO_CHARS; [EOL]         } [EOL]         final int start = _inputStart; [EOL]         if (start == 0) { [EOL]             return Arrays.copyOf(_inputBuffer, len); [EOL]         } [EOL]         return Arrays.copyOfRange(_inputBuffer, start, start + len); [EOL]     } [EOL]     int size = size(); [EOL]     if (size < 1) { [EOL]         return NO_CHARS; [EOL]     } [EOL]     int offset = 0; [EOL]     final char[] result = _charArray(size); [EOL]     if (_segments != null) { [EOL]         for (int i = 0, len = _segments.size(); i < len; ++i) { [EOL]             char[] curr = (char[]) _segments.get(i); [EOL]             int currLen = curr.length; [EOL]             System.arraycopy(curr, 0, result, offset, currLen); [EOL]             offset += currLen; [EOL]         } [EOL]     } [EOL]     System.arraycopy(_currentSegment, 0, result, offset, _currentSize); [EOL]     return result; [EOL] }
private char[] buildResultArray() { [EOL]     if (_resultString != null) { [EOL]         return _resultString.toCharArray(); [EOL]     } [EOL]     if (_inputStart >= 0) { [EOL]         final int len = _inputLen; [EOL]         if (len < 1) { [EOL]             return NO_CHARS; [EOL]         } [EOL]         final int start = _inputStart; [EOL]         if (start == 0) { [EOL]             return Arrays.copyOf(_inputBuffer, len); [EOL]         } [EOL]         return Arrays.copyOfRange(_inputBuffer, start, start + len); [EOL]     } [EOL]     int size = size(); [EOL]     if (size < 1) { [EOL]         return NO_CHARS; [EOL]     } [EOL]     int offset = 0; [EOL]     final char[] result = _charArray(size); [EOL]     if (_segments != null) { [EOL]         for (int i = 0, len = _segments.size(); i < len; ++i) { [EOL]             char[] curr = (char[]) _segments.get(i); [EOL]             int currLen = curr.length; [EOL]             System.arraycopy(curr, 0, result, offset, currLen); [EOL]             offset += currLen; [EOL]         } [EOL]     } [EOL]     System.arraycopy(_currentSegment, 0, result, offset, _currentSize); [EOL]     return result; [EOL] }
private char[] buildResultArray() { [EOL]     if (_resultString != null) { [EOL]         return _resultString.toCharArray(); [EOL]     } [EOL]     if (_inputStart >= 0) { [EOL]         final int len = _inputLen; [EOL]         if (len < 1) { [EOL]             return NO_CHARS; [EOL]         } [EOL]         final int start = _inputStart; [EOL]         if (start == 0) { [EOL]             return Arrays.copyOf(_inputBuffer, len); [EOL]         } [EOL]         return Arrays.copyOfRange(_inputBuffer, start, start + len); [EOL]     } [EOL]     int size = size(); [EOL]     if (size < 1) { [EOL]         return NO_CHARS; [EOL]     } [EOL]     int offset = 0; [EOL]     final char[] result = _charArray(size); [EOL]     if (_segments != null) { [EOL]         for (int i = 0, len = _segments.size(); i < len; ++i) { [EOL]             char[] curr = (char[]) _segments.get(i); [EOL]             int currLen = curr.length; [EOL]             System.arraycopy(curr, 0, result, offset, currLen); [EOL]             offset += currLen; [EOL]         } [EOL]     } [EOL]     System.arraycopy(_currentSegment, 0, result, offset, _currentSize); [EOL]     return result; [EOL] }
private char[] buildResultArray() { [EOL]     if (_resultString != null) { [EOL]         return _resultString.toCharArray(); [EOL]     } [EOL]     if (_inputStart >= 0) { [EOL]         final int len = _inputLen; [EOL]         if (len < 1) { [EOL]             return NO_CHARS; [EOL]         } [EOL]         final int start = _inputStart; [EOL]         if (start == 0) { [EOL]             return Arrays.copyOf(_inputBuffer, len); [EOL]         } [EOL]         return Arrays.copyOfRange(_inputBuffer, start, start + len); [EOL]     } [EOL]     int size = size(); [EOL]     if (size < 1) { [EOL]         return NO_CHARS; [EOL]     } [EOL]     int offset = 0; [EOL]     final char[] result = _charArray(size); [EOL]     if (_segments != null) { [EOL]         for (int i = 0, len = _segments.size(); i < len; ++i) { [EOL]             char[] curr = (char[]) _segments.get(i); [EOL]             int currLen = curr.length; [EOL]             System.arraycopy(curr, 0, result, offset, currLen); [EOL]             offset += currLen; [EOL]         } [EOL]     } [EOL]     System.arraycopy(_currentSegment, 0, result, offset, _currentSize); [EOL]     return result; [EOL] }
private char[] buildResultArray() { [EOL]     if (_resultString != null) { [EOL]         return _resultString.toCharArray(); [EOL]     } [EOL]     if (_inputStart >= 0) { [EOL]         final int len = _inputLen; [EOL]         if (len < 1) { [EOL]             return NO_CHARS; [EOL]         } [EOL]         final int start = _inputStart; [EOL]         if (start == 0) { [EOL]             return Arrays.copyOf(_inputBuffer, len); [EOL]         } [EOL]         return Arrays.copyOfRange(_inputBuffer, start, start + len); [EOL]     } [EOL]     int size = size(); [EOL]     if (size < 1) { [EOL]         return NO_CHARS; [EOL]     } [EOL]     int offset = 0; [EOL]     final char[] result = _charArray(size); [EOL]     if (_segments != null) { [EOL]         for (int i = 0, len = _segments.size(); i < len; ++i) { [EOL]             char[] curr = (char[]) _segments.get(i); [EOL]             int currLen = curr.length; [EOL]             System.arraycopy(curr, 0, result, offset, currLen); [EOL]             offset += currLen; [EOL]         } [EOL]     } [EOL]     System.arraycopy(_currentSegment, 0, result, offset, _currentSize); [EOL]     return result; [EOL] }
private char[] buildResultArray() { [EOL]     if (_resultString != null) { [EOL]         return _resultString.toCharArray(); [EOL]     } [EOL]     if (_inputStart >= 0) { [EOL]         final int len = _inputLen; [EOL]         if (len < 1) { [EOL]             return NO_CHARS; [EOL]         } [EOL]         final int start = _inputStart; [EOL]         if (start == 0) { [EOL]             return Arrays.copyOf(_inputBuffer, len); [EOL]         } [EOL]         return Arrays.copyOfRange(_inputBuffer, start, start + len); [EOL]     } [EOL]     int size = size(); [EOL]     if (size < 1) { [EOL]         return NO_CHARS; [EOL]     } [EOL]     int offset = 0; [EOL]     final char[] result = _charArray(size); [EOL]     if (_segments != null) { [EOL]         for (int i = 0, len = _segments.size(); i < len; ++i) { [EOL]             char[] curr = (char[]) _segments.get(i); [EOL]             int currLen = curr.length; [EOL]             System.arraycopy(curr, 0, result, offset, currLen); [EOL]             offset += currLen; [EOL]         } [EOL]     } [EOL]     System.arraycopy(_currentSegment, 0, result, offset, _currentSize); [EOL]     return result; [EOL] }
protected GeneratorBase(int features, ObjectCodec codec) { [EOL]     super(); [EOL]     _features = features; [EOL]     _writeContext = JsonWriteContext.createRootContext(); [EOL]     _objectCodec = codec; [EOL]     _cfgNumbersAsStrings = isEnabled(Feature.WRITE_NUMBERS_AS_STRINGS); [EOL] }
protected GeneratorBase(int features, ObjectCodec codec) { [EOL]     super(); [EOL]     _features = features; [EOL]     _writeContext = JsonWriteContext.createRootContext(); [EOL]     _objectCodec = codec; [EOL]     _cfgNumbersAsStrings = isEnabled(Feature.WRITE_NUMBERS_AS_STRINGS); [EOL] }
@Override [EOL] public final boolean isEnabled(Feature f) { [EOL]     return (_features & f.getMask()) != 0; [EOL] }
@Override [EOL] public final boolean isEnabled(Feature f) { [EOL]     return (_features & f.getMask()) != 0; [EOL] }
@Override [EOL] public final JsonWriteContext getOutputContext() { [EOL]     return _writeContext; [EOL] }
@Override [EOL] public void close() throws IOException { [EOL]     _closed = true; [EOL] }
@Override [EOL] public final void writeStartArray() throws IOException, JsonGenerationException { [EOL]     _verifyValueWrite("start an array"); [EOL]     _writeContext = _writeContext.createChildArrayContext(); [EOL]     if (_cfgPrettyPrinter != null) { [EOL]         _cfgPrettyPrinter.writeStartArray(this); [EOL]     } else { [EOL]         if (_outputTail >= _outputEnd) { [EOL]             _flushBuffer(); [EOL]         } [EOL]         _outputBuffer[_outputTail++] = BYTE_LBRACKET; [EOL]     } [EOL] } public UTF8JsonGenerator(IOContext ctxt, int features, ObjectCodec codec, OutputStream out); public UTF8JsonGenerator(IOContext ctxt, int features, ObjectCodec codec, OutputStream out, byte[] outputBuffer, int outputOffset, boolean bufferRecyclable); public Object getOutputTarget(); public final void writeFieldName(String name) throws IOException, JsonGenerationException; public final void writeFieldName(SerializableString name) throws IOException, JsonGenerationException; public final void writeStartArray() throws IOException, JsonGenerationException; public final void writeEndArray() throws IOException, JsonGenerationException; public final void writeStartObject() throws IOException, JsonGenerationException; public final void writeEndObject() throws IOException, JsonGenerationException; protected final void _writeFieldName(String name) throws IOException, JsonGenerationException; protected final void _writeFieldName(SerializableString name) throws IOException, JsonGenerationException; protected final void _writePPFieldName(String name, boolean commaBefore) throws IOException, JsonGenerationException; protected final void _writePPFieldName(SerializableString name, boolean commaBefore) throws IOException, JsonGenerationException; public void writeString(String text) throws IOException, JsonGenerationException; private void _writeLongString(String text) throws IOException, JsonGenerationException; private void _writeLongString(char[] text, int offset, int len) throws IOException, JsonGenerationException; public void writeString(char[] text, int offset, int len) throws IOException, JsonGenerationException; public final void writeString(SerializableString text) throws IOException, JsonGenerationException; public void writeRawUTF8String(byte[] text, int offset, int length) throws IOException, JsonGenerationException; public void writeUTF8String(byte[] text, int offset, int len) throws IOException, JsonGenerationException; public void writeRaw(String text) throws IOException, JsonGenerationException; public void writeRaw(String text, int offset, int len) throws IOException, JsonGenerationException; public void writeRaw(SerializableString text) throws IOException, JsonGenerationException; public final void writeRaw(char[] cbuf, int offset, int len) throws IOException, JsonGenerationException; public void writeRaw(char ch) throws IOException, JsonGenerationException; private final void _writeSegmentedRaw(char[] cbuf, int offset, int len) throws IOException, JsonGenerationException; public void writeBinary(Base64Variant b64variant, byte[] data, int offset, int len) throws IOException, JsonGenerationException; public int writeBinary(Base64Variant b64variant, InputStream data, int dataLength) throws IOException, JsonGenerationException; public void writeNumber(short s) throws IOException, JsonGenerationException; private void _writeQuotedShort(short s) throws IOException; public void writeNumber(int i) throws IOException, JsonGenerationException; private void _writeQuotedInt(int i) throws IOException; public void writeNumber(long l) throws IOException, JsonGenerationException; private void _writeQuotedLong(long l) throws IOException; public void writeNumber(BigInteger value) throws IOException, JsonGenerationException; public void writeNumber(double d) throws IOException, JsonGenerationException; public void writeNumber(float f) throws IOException, JsonGenerationException; public void writeNumber(BigDecimal value) throws IOException, JsonGenerationException; public void writeNumber(String encodedValue) throws IOException, JsonGenerationException; private void _writeQuotedRaw(Object value) throws IOException; public void writeBoolean(boolean state) throws IOException, JsonGenerationException; public void writeNull() throws IOException, JsonGenerationException; protected final void _verifyValueWrite(String typeMsg) throws IOException, JsonGenerationException; protected final void _verifyPrettyValueWrite(String typeMsg, int status) throws IOException, JsonGenerationException; public final void flush() throws IOException; public void close() throws IOException; protected void _releaseBuffers(); private final void _writeBytes(byte[] bytes) throws IOException; private final void _writeBytes(byte[] bytes, int offset, int len) throws IOException; private final void _writeStringSegments(String text) throws IOException, JsonGenerationException; private final void _writeStringSegments(char[] cbuf, int offset, int totalLen) throws IOException, JsonGenerationException; private final void _writeStringSegment(char[] cbuf, int offset, int len) throws IOException, JsonGenerationException; private final void _writeStringSegment2(final char[] cbuf, int offset, final int end) throws IOException, JsonGenerationException; private final void _writeStringSegmentASCII2(final char[] cbuf, int offset, final int end) throws IOException, JsonGenerationException; private void _writeCustomStringSegment2(final char[] cbuf, int offset, final int end) throws IOException, JsonGenerationException; private int _writeCustomEscape(byte[] outputBuffer, int outputPtr, SerializableString esc, int remainingChars) throws IOException, JsonGenerationException; private int _handleLongCustomEscape(byte[] outputBuffer, int outputPtr, int outputEnd, byte[] raw, int remainingChars) throws IOException, JsonGenerationException; private void _writeUTF8Segments(byte[] utf8, int offset, int totalLen) throws IOException, JsonGenerationException; private void _writeUTF8Segment(byte[] utf8, final int offset, final int len) throws IOException, JsonGenerationException; private void _writeUTF8Segment2(final byte[] utf8, int offset, int len) throws IOException, JsonGenerationException; protected void _writeBinary(Base64Variant b64variant, byte[] input, int inputPtr, final int inputEnd) throws IOException, JsonGenerationException; protected int _writeBinary(Base64Variant b64variant, InputStream data, byte[] readBuffer, int bytesLeft) throws IOException, JsonGenerationException; protected int _writeBinary(Base64Variant b64variant, InputStream data, byte[] readBuffer) throws IOException, JsonGenerationException; private int _readMore(InputStream in, byte[] readBuffer, int inputPtr, int inputEnd, int maxRead) throws IOException; private int _outputRawMultiByteChar(int ch, char[] cbuf, int inputOffset, int inputLen) throws IOException; protected final void _outputSurrogates(int surr1, int surr2) throws IOException; private int _outputMultiByteChar(int ch, int outputPtr) throws IOException; protected final int _decodeSurrogate(int surr1, int surr2) throws IOException; private void _writeNull() throws IOException; private int _writeGenericEscape(int charToEscape, int outputPtr) throws IOException; protected final void _flushBuffer() throws IOException; byte BYTE_u=Optional[(byte) 'u']; byte BYTE_0=Optional[(byte) '0']; byte BYTE_LBRACKET=Optional[(byte) '[']; byte BYTE_RBRACKET=Optional[(byte) ']']; byte BYTE_LCURLY=Optional[(byte) '{']; byte BYTE_RCURLY=Optional[(byte) '}']; byte BYTE_BACKSLASH=Optional[(byte) '\\']; byte BYTE_COMMA=Optional[(byte) ',']; byte BYTE_COLON=Optional[(byte) ':']; byte BYTE_QUOTE=Optional[(byte) '"']; int SURR1_FIRST=Optional[0xD800]; int SURR1_LAST=Optional[0xDBFF]; int SURR2_FIRST=Optional[0xDC00]; int SURR2_LAST=Optional[0xDFFF]; int MAX_BYTES_TO_BUFFER=Optional[512]; byte[] HEX_CHARS=Optional[CharTypes.copyHexBytes()]; byte[] NULL_BYTES=Optional[{ 'n', 'u', 'l', 'l' }]; byte[] TRUE_BYTES=Optional[{ 't', 'r', 'u', 'e' }]; byte[] FALSE_BYTES=Optional[{ 'f', 'a', 'l', 's', 'e' }
@Override [EOL] public final void writeStartArray() throws IOException, JsonGenerationException { [EOL]     _verifyValueWrite("start an array"); [EOL]     _writeContext = _writeContext.createChildArrayContext(); [EOL]     if (_cfgPrettyPrinter != null) { [EOL]         _cfgPrettyPrinter.writeStartArray(this); [EOL]     } else { [EOL]         if (_outputTail >= _outputEnd) { [EOL]             _flushBuffer(); [EOL]         } [EOL]         _outputBuffer[_outputTail++] = BYTE_LBRACKET; [EOL]     } [EOL] } public UTF8JsonGenerator(IOContext ctxt, int features, ObjectCodec codec, OutputStream out); public UTF8JsonGenerator(IOContext ctxt, int features, ObjectCodec codec, OutputStream out, byte[] outputBuffer, int outputOffset, boolean bufferRecyclable); public Object getOutputTarget(); public final void writeFieldName(String name) throws IOException, JsonGenerationException; public final void writeFieldName(SerializableString name) throws IOException, JsonGenerationException; public final void writeStartArray() throws IOException, JsonGenerationException; public final void writeEndArray() throws IOException, JsonGenerationException; public final void writeStartObject() throws IOException, JsonGenerationException; public final void writeEndObject() throws IOException, JsonGenerationException; protected final void _writeFieldName(String name) throws IOException, JsonGenerationException; protected final void _writeFieldName(SerializableString name) throws IOException, JsonGenerationException; protected final void _writePPFieldName(String name, boolean commaBefore) throws IOException, JsonGenerationException; protected final void _writePPFieldName(SerializableString name, boolean commaBefore) throws IOException, JsonGenerationException; public void writeString(String text) throws IOException, JsonGenerationException; private void _writeLongString(String text) throws IOException, JsonGenerationException; private void _writeLongString(char[] text, int offset, int len) throws IOException, JsonGenerationException; public void writeString(char[] text, int offset, int len) throws IOException, JsonGenerationException; public final void writeString(SerializableString text) throws IOException, JsonGenerationException; public void writeRawUTF8String(byte[] text, int offset, int length) throws IOException, JsonGenerationException; public void writeUTF8String(byte[] text, int offset, int len) throws IOException, JsonGenerationException; public void writeRaw(String text) throws IOException, JsonGenerationException; public void writeRaw(String text, int offset, int len) throws IOException, JsonGenerationException; public void writeRaw(SerializableString text) throws IOException, JsonGenerationException; public final void writeRaw(char[] cbuf, int offset, int len) throws IOException, JsonGenerationException; public void writeRaw(char ch) throws IOException, JsonGenerationException; private final void _writeSegmentedRaw(char[] cbuf, int offset, int len) throws IOException, JsonGenerationException; public void writeBinary(Base64Variant b64variant, byte[] data, int offset, int len) throws IOException, JsonGenerationException; public int writeBinary(Base64Variant b64variant, InputStream data, int dataLength) throws IOException, JsonGenerationException; public void writeNumber(short s) throws IOException, JsonGenerationException; private void _writeQuotedShort(short s) throws IOException; public void writeNumber(int i) throws IOException, JsonGenerationException; private void _writeQuotedInt(int i) throws IOException; public void writeNumber(long l) throws IOException, JsonGenerationException; private void _writeQuotedLong(long l) throws IOException; public void writeNumber(BigInteger value) throws IOException, JsonGenerationException; public void writeNumber(double d) throws IOException, JsonGenerationException; public void writeNumber(float f) throws IOException, JsonGenerationException; public void writeNumber(BigDecimal value) throws IOException, JsonGenerationException; public void writeNumber(String encodedValue) throws IOException, JsonGenerationException; private void _writeQuotedRaw(Object value) throws IOException; public void writeBoolean(boolean state) throws IOException, JsonGenerationException; public void writeNull() throws IOException, JsonGenerationException; protected final void _verifyValueWrite(String typeMsg) throws IOException, JsonGenerationException; protected final void _verifyPrettyValueWrite(String typeMsg, int status) throws IOException, JsonGenerationException; public final void flush() throws IOException; public void close() throws IOException; protected void _releaseBuffers(); private final void _writeBytes(byte[] bytes) throws IOException; private final void _writeBytes(byte[] bytes, int offset, int len) throws IOException; private final void _writeStringSegments(String text) throws IOException, JsonGenerationException; private final void _writeStringSegments(char[] cbuf, int offset, int totalLen) throws IOException, JsonGenerationException; private final void _writeStringSegment(char[] cbuf, int offset, int len) throws IOException, JsonGenerationException; private final void _writeStringSegment2(final char[] cbuf, int offset, final int end) throws IOException, JsonGenerationException; private final void _writeStringSegmentASCII2(final char[] cbuf, int offset, final int end) throws IOException, JsonGenerationException; private void _writeCustomStringSegment2(final char[] cbuf, int offset, final int end) throws IOException, JsonGenerationException; private int _writeCustomEscape(byte[] outputBuffer, int outputPtr, SerializableString esc, int remainingChars) throws IOException, JsonGenerationException; private int _handleLongCustomEscape(byte[] outputBuffer, int outputPtr, int outputEnd, byte[] raw, int remainingChars) throws IOException, JsonGenerationException; private void _writeUTF8Segments(byte[] utf8, int offset, int totalLen) throws IOException, JsonGenerationException; private void _writeUTF8Segment(byte[] utf8, final int offset, final int len) throws IOException, JsonGenerationException; private void _writeUTF8Segment2(final byte[] utf8, int offset, int len) throws IOException, JsonGenerationException; protected void _writeBinary(Base64Variant b64variant, byte[] input, int inputPtr, final int inputEnd) throws IOException, JsonGenerationException; protected int _writeBinary(Base64Variant b64variant, InputStream data, byte[] readBuffer, int bytesLeft) throws IOException, JsonGenerationException; protected int _writeBinary(Base64Variant b64variant, InputStream data, byte[] readBuffer) throws IOException, JsonGenerationException; private int _readMore(InputStream in, byte[] readBuffer, int inputPtr, int inputEnd, int maxRead) throws IOException; private int _outputRawMultiByteChar(int ch, char[] cbuf, int inputOffset, int inputLen) throws IOException; protected final void _outputSurrogates(int surr1, int surr2) throws IOException; private int _outputMultiByteChar(int ch, int outputPtr) throws IOException; protected final int _decodeSurrogate(int surr1, int surr2) throws IOException; private void _writeNull() throws IOException; private int _writeGenericEscape(int charToEscape, int outputPtr) throws IOException; protected final void _flushBuffer() throws IOException; byte BYTE_u=Optional[(byte) 'u']; byte BYTE_0=Optional[(byte) '0']; byte BYTE_LBRACKET=Optional[(byte) '[']; byte BYTE_RBRACKET=Optional[(byte) ']']; byte BYTE_LCURLY=Optional[(byte) '{']; byte BYTE_RCURLY=Optional[(byte) '}']; byte BYTE_BACKSLASH=Optional[(byte) '\\']; byte BYTE_COMMA=Optional[(byte) ',']; byte BYTE_COLON=Optional[(byte) ':']; byte BYTE_QUOTE=Optional[(byte) '"']; int SURR1_FIRST=Optional[0xD800]; int SURR1_LAST=Optional[0xDBFF]; int SURR2_FIRST=Optional[0xDC00]; int SURR2_LAST=Optional[0xDFFF]; int MAX_BYTES_TO_BUFFER=Optional[512]; byte[] HEX_CHARS=Optional[CharTypes.copyHexBytes()]; byte[] NULL_BYTES=Optional[{ 'n', 'u', 'l', 'l' }]; byte[] TRUE_BYTES=Optional[{ 't', 'r', 'u', 'e' }]; byte[] FALSE_BYTES=Optional[{ 'f', 'a', 'l', 's', 'e' }
@Override [EOL] public final void writeStartArray() throws IOException, JsonGenerationException { [EOL]     _verifyValueWrite("start an array"); [EOL]     _writeContext = _writeContext.createChildArrayContext(); [EOL]     if (_cfgPrettyPrinter != null) { [EOL]         _cfgPrettyPrinter.writeStartArray(this); [EOL]     } else { [EOL]         if (_outputTail >= _outputEnd) { [EOL]             _flushBuffer(); [EOL]         } [EOL]         _outputBuffer[_outputTail++] = BYTE_LBRACKET; [EOL]     } [EOL] } public UTF8JsonGenerator(IOContext ctxt, int features, ObjectCodec codec, OutputStream out); public UTF8JsonGenerator(IOContext ctxt, int features, ObjectCodec codec, OutputStream out, byte[] outputBuffer, int outputOffset, boolean bufferRecyclable); public Object getOutputTarget(); public final void writeFieldName(String name) throws IOException, JsonGenerationException; public final void writeFieldName(SerializableString name) throws IOException, JsonGenerationException; public final void writeStartArray() throws IOException, JsonGenerationException; public final void writeEndArray() throws IOException, JsonGenerationException; public final void writeStartObject() throws IOException, JsonGenerationException; public final void writeEndObject() throws IOException, JsonGenerationException; protected final void _writeFieldName(String name) throws IOException, JsonGenerationException; protected final void _writeFieldName(SerializableString name) throws IOException, JsonGenerationException; protected final void _writePPFieldName(String name, boolean commaBefore) throws IOException, JsonGenerationException; protected final void _writePPFieldName(SerializableString name, boolean commaBefore) throws IOException, JsonGenerationException; public void writeString(String text) throws IOException, JsonGenerationException; private void _writeLongString(String text) throws IOException, JsonGenerationException; private void _writeLongString(char[] text, int offset, int len) throws IOException, JsonGenerationException; public void writeString(char[] text, int offset, int len) throws IOException, JsonGenerationException; public final void writeString(SerializableString text) throws IOException, JsonGenerationException; public void writeRawUTF8String(byte[] text, int offset, int length) throws IOException, JsonGenerationException; public void writeUTF8String(byte[] text, int offset, int len) throws IOException, JsonGenerationException; public void writeRaw(String text) throws IOException, JsonGenerationException; public void writeRaw(String text, int offset, int len) throws IOException, JsonGenerationException; public void writeRaw(SerializableString text) throws IOException, JsonGenerationException; public final void writeRaw(char[] cbuf, int offset, int len) throws IOException, JsonGenerationException; public void writeRaw(char ch) throws IOException, JsonGenerationException; private final void _writeSegmentedRaw(char[] cbuf, int offset, int len) throws IOException, JsonGenerationException; public void writeBinary(Base64Variant b64variant, byte[] data, int offset, int len) throws IOException, JsonGenerationException; public int writeBinary(Base64Variant b64variant, InputStream data, int dataLength) throws IOException, JsonGenerationException; public void writeNumber(short s) throws IOException, JsonGenerationException; private void _writeQuotedShort(short s) throws IOException; public void writeNumber(int i) throws IOException, JsonGenerationException; private void _writeQuotedInt(int i) throws IOException; public void writeNumber(long l) throws IOException, JsonGenerationException; private void _writeQuotedLong(long l) throws IOException; public void writeNumber(BigInteger value) throws IOException, JsonGenerationException; public void writeNumber(double d) throws IOException, JsonGenerationException; public void writeNumber(float f) throws IOException, JsonGenerationException; public void writeNumber(BigDecimal value) throws IOException, JsonGenerationException; public void writeNumber(String encodedValue) throws IOException, JsonGenerationException; private void _writeQuotedRaw(Object value) throws IOException; public void writeBoolean(boolean state) throws IOException, JsonGenerationException; public void writeNull() throws IOException, JsonGenerationException; protected final void _verifyValueWrite(String typeMsg) throws IOException, JsonGenerationException; protected final void _verifyPrettyValueWrite(String typeMsg, int status) throws IOException, JsonGenerationException; public final void flush() throws IOException; public void close() throws IOException; protected void _releaseBuffers(); private final void _writeBytes(byte[] bytes) throws IOException; private final void _writeBytes(byte[] bytes, int offset, int len) throws IOException; private final void _writeStringSegments(String text) throws IOException, JsonGenerationException; private final void _writeStringSegments(char[] cbuf, int offset, int totalLen) throws IOException, JsonGenerationException; private final void _writeStringSegment(char[] cbuf, int offset, int len) throws IOException, JsonGenerationException; private final void _writeStringSegment2(final char[] cbuf, int offset, final int end) throws IOException, JsonGenerationException; private final void _writeStringSegmentASCII2(final char[] cbuf, int offset, final int end) throws IOException, JsonGenerationException; private void _writeCustomStringSegment2(final char[] cbuf, int offset, final int end) throws IOException, JsonGenerationException; private int _writeCustomEscape(byte[] outputBuffer, int outputPtr, SerializableString esc, int remainingChars) throws IOException, JsonGenerationException; private int _handleLongCustomEscape(byte[] outputBuffer, int outputPtr, int outputEnd, byte[] raw, int remainingChars) throws IOException, JsonGenerationException; private void _writeUTF8Segments(byte[] utf8, int offset, int totalLen) throws IOException, JsonGenerationException; private void _writeUTF8Segment(byte[] utf8, final int offset, final int len) throws IOException, JsonGenerationException; private void _writeUTF8Segment2(final byte[] utf8, int offset, int len) throws IOException, JsonGenerationException; protected void _writeBinary(Base64Variant b64variant, byte[] input, int inputPtr, final int inputEnd) throws IOException, JsonGenerationException; protected int _writeBinary(Base64Variant b64variant, InputStream data, byte[] readBuffer, int bytesLeft) throws IOException, JsonGenerationException; protected int _writeBinary(Base64Variant b64variant, InputStream data, byte[] readBuffer) throws IOException, JsonGenerationException; private int _readMore(InputStream in, byte[] readBuffer, int inputPtr, int inputEnd, int maxRead) throws IOException; private int _outputRawMultiByteChar(int ch, char[] cbuf, int inputOffset, int inputLen) throws IOException; protected final void _outputSurrogates(int surr1, int surr2) throws IOException; private int _outputMultiByteChar(int ch, int outputPtr) throws IOException; protected final int _decodeSurrogate(int surr1, int surr2) throws IOException; private void _writeNull() throws IOException; private int _writeGenericEscape(int charToEscape, int outputPtr) throws IOException; protected final void _flushBuffer() throws IOException; byte BYTE_u=Optional[(byte) 'u']; byte BYTE_0=Optional[(byte) '0']; byte BYTE_LBRACKET=Optional[(byte) '[']; byte BYTE_RBRACKET=Optional[(byte) ']']; byte BYTE_LCURLY=Optional[(byte) '{']; byte BYTE_RCURLY=Optional[(byte) '}']; byte BYTE_BACKSLASH=Optional[(byte) '\\']; byte BYTE_COMMA=Optional[(byte) ',']; byte BYTE_COLON=Optional[(byte) ':']; byte BYTE_QUOTE=Optional[(byte) '"']; int SURR1_FIRST=Optional[0xD800]; int SURR1_LAST=Optional[0xDBFF]; int SURR2_FIRST=Optional[0xDC00]; int SURR2_LAST=Optional[0xDFFF]; int MAX_BYTES_TO_BUFFER=Optional[512]; byte[] HEX_CHARS=Optional[CharTypes.copyHexBytes()]; byte[] NULL_BYTES=Optional[{ 'n', 'u', 'l', 'l' }]; byte[] TRUE_BYTES=Optional[{ 't', 'r', 'u', 'e' }]; byte[] FALSE_BYTES=Optional[{ 'f', 'a', 'l', 's', 'e' }
@Override [EOL] public final void writeEndArray() throws IOException, JsonGenerationException { [EOL]     if (!_writeContext.inArray()) { [EOL]         _reportError("Current context not an ARRAY but " + _writeContext.getTypeDesc()); [EOL]     } [EOL]     if (_cfgPrettyPrinter != null) { [EOL]         _cfgPrettyPrinter.writeEndArray(this, _writeContext.getEntryCount()); [EOL]     } else { [EOL]         if (_outputTail >= _outputEnd) { [EOL]             _flushBuffer(); [EOL]         } [EOL]         _outputBuffer[_outputTail++] = BYTE_RBRACKET; [EOL]     } [EOL]     _writeContext = _writeContext.getParent(); [EOL] } public UTF8JsonGenerator(IOContext ctxt, int features, ObjectCodec codec, OutputStream out); public UTF8JsonGenerator(IOContext ctxt, int features, ObjectCodec codec, OutputStream out, byte[] outputBuffer, int outputOffset, boolean bufferRecyclable); public Object getOutputTarget(); public final void writeFieldName(String name) throws IOException, JsonGenerationException; public final void writeFieldName(SerializableString name) throws IOException, JsonGenerationException; public final void writeStartArray() throws IOException, JsonGenerationException; public final void writeEndArray() throws IOException, JsonGenerationException; public final void writeStartObject() throws IOException, JsonGenerationException; public final void writeEndObject() throws IOException, JsonGenerationException; protected final void _writeFieldName(String name) throws IOException, JsonGenerationException; protected final void _writeFieldName(SerializableString name) throws IOException, JsonGenerationException; protected final void _writePPFieldName(String name, boolean commaBefore) throws IOException, JsonGenerationException; protected final void _writePPFieldName(SerializableString name, boolean commaBefore) throws IOException, JsonGenerationException; public void writeString(String text) throws IOException, JsonGenerationException; private void _writeLongString(String text) throws IOException, JsonGenerationException; private void _writeLongString(char[] text, int offset, int len) throws IOException, JsonGenerationException; public void writeString(char[] text, int offset, int len) throws IOException, JsonGenerationException; public final void writeString(SerializableString text) throws IOException, JsonGenerationException; public void writeRawUTF8String(byte[] text, int offset, int length) throws IOException, JsonGenerationException; public void writeUTF8String(byte[] text, int offset, int len) throws IOException, JsonGenerationException; public void writeRaw(String text) throws IOException, JsonGenerationException; public void writeRaw(String text, int offset, int len) throws IOException, JsonGenerationException; public void writeRaw(SerializableString text) throws IOException, JsonGenerationException; public final void writeRaw(char[] cbuf, int offset, int len) throws IOException, JsonGenerationException; public void writeRaw(char ch) throws IOException, JsonGenerationException; private final void _writeSegmentedRaw(char[] cbuf, int offset, int len) throws IOException, JsonGenerationException; public void writeBinary(Base64Variant b64variant, byte[] data, int offset, int len) throws IOException, JsonGenerationException; public int writeBinary(Base64Variant b64variant, InputStream data, int dataLength) throws IOException, JsonGenerationException; public void writeNumber(short s) throws IOException, JsonGenerationException; private void _writeQuotedShort(short s) throws IOException; public void writeNumber(int i) throws IOException, JsonGenerationException; private void _writeQuotedInt(int i) throws IOException; public void writeNumber(long l) throws IOException, JsonGenerationException; private void _writeQuotedLong(long l) throws IOException; public void writeNumber(BigInteger value) throws IOException, JsonGenerationException; public void writeNumber(double d) throws IOException, JsonGenerationException; public void writeNumber(float f) throws IOException, JsonGenerationException; public void writeNumber(BigDecimal value) throws IOException, JsonGenerationException; public void writeNumber(String encodedValue) throws IOException, JsonGenerationException; private void _writeQuotedRaw(Object value) throws IOException; public void writeBoolean(boolean state) throws IOException, JsonGenerationException; public void writeNull() throws IOException, JsonGenerationException; protected final void _verifyValueWrite(String typeMsg) throws IOException, JsonGenerationException; protected final void _verifyPrettyValueWrite(String typeMsg, int status) throws IOException, JsonGenerationException; public final void flush() throws IOException; public void close() throws IOException; protected void _releaseBuffers(); private final void _writeBytes(byte[] bytes) throws IOException; private final void _writeBytes(byte[] bytes, int offset, int len) throws IOException; private final void _writeStringSegments(String text) throws IOException, JsonGenerationException; private final void _writeStringSegments(char[] cbuf, int offset, int totalLen) throws IOException, JsonGenerationException; private final void _writeStringSegment(char[] cbuf, int offset, int len) throws IOException, JsonGenerationException; private final void _writeStringSegment2(final char[] cbuf, int offset, final int end) throws IOException, JsonGenerationException; private final void _writeStringSegmentASCII2(final char[] cbuf, int offset, final int end) throws IOException, JsonGenerationException; private void _writeCustomStringSegment2(final char[] cbuf, int offset, final int end) throws IOException, JsonGenerationException; private int _writeCustomEscape(byte[] outputBuffer, int outputPtr, SerializableString esc, int remainingChars) throws IOException, JsonGenerationException; private int _handleLongCustomEscape(byte[] outputBuffer, int outputPtr, int outputEnd, byte[] raw, int remainingChars) throws IOException, JsonGenerationException; private void _writeUTF8Segments(byte[] utf8, int offset, int totalLen) throws IOException, JsonGenerationException; private void _writeUTF8Segment(byte[] utf8, final int offset, final int len) throws IOException, JsonGenerationException; private void _writeUTF8Segment2(final byte[] utf8, int offset, int len) throws IOException, JsonGenerationException; protected void _writeBinary(Base64Variant b64variant, byte[] input, int inputPtr, final int inputEnd) throws IOException, JsonGenerationException; protected int _writeBinary(Base64Variant b64variant, InputStream data, byte[] readBuffer, int bytesLeft) throws IOException, JsonGenerationException; protected int _writeBinary(Base64Variant b64variant, InputStream data, byte[] readBuffer) throws IOException, JsonGenerationException; private int _readMore(InputStream in, byte[] readBuffer, int inputPtr, int inputEnd, int maxRead) throws IOException; private int _outputRawMultiByteChar(int ch, char[] cbuf, int inputOffset, int inputLen) throws IOException; protected final void _outputSurrogates(int surr1, int surr2) throws IOException; private int _outputMultiByteChar(int ch, int outputPtr) throws IOException; protected final int _decodeSurrogate(int surr1, int surr2) throws IOException; private void _writeNull() throws IOException; private int _writeGenericEscape(int charToEscape, int outputPtr) throws IOException; protected final void _flushBuffer() throws IOException; byte BYTE_u=Optional[(byte) 'u']; byte BYTE_0=Optional[(byte) '0']; byte BYTE_LBRACKET=Optional[(byte) '[']; byte BYTE_RBRACKET=Optional[(byte) ']']; byte BYTE_LCURLY=Optional[(byte) '{']; byte BYTE_RCURLY=Optional[(byte) '}']; byte BYTE_BACKSLASH=Optional[(byte) '\\']; byte BYTE_COMMA=Optional[(byte) ',']; byte BYTE_COLON=Optional[(byte) ':']; byte BYTE_QUOTE=Optional[(byte) '"']; int SURR1_FIRST=Optional[0xD800]; int SURR1_LAST=Optional[0xDBFF]; int SURR2_FIRST=Optional[0xDC00]; int SURR2_LAST=Optional[0xDFFF]; int MAX_BYTES_TO_BUFFER=Optional[512]; byte[] HEX_CHARS=Optional[CharTypes.copyHexBytes()]; byte[] NULL_BYTES=Optional[{ 'n', 'u', 'l', 'l' }]; byte[] TRUE_BYTES=Optional[{ 't', 'r', 'u', 'e' }]; byte[] FALSE_BYTES=Optional[{ 'f', 'a', 'l', 's', 'e' }
@Override [EOL] public final void writeEndArray() throws IOException, JsonGenerationException { [EOL]     if (!_writeContext.inArray()) { [EOL]         _reportError("Current context not an ARRAY but " + _writeContext.getTypeDesc()); [EOL]     } [EOL]     if (_cfgPrettyPrinter != null) { [EOL]         _cfgPrettyPrinter.writeEndArray(this, _writeContext.getEntryCount()); [EOL]     } else { [EOL]         if (_outputTail >= _outputEnd) { [EOL]             _flushBuffer(); [EOL]         } [EOL]         _outputBuffer[_outputTail++] = BYTE_RBRACKET; [EOL]     } [EOL]     _writeContext = _writeContext.getParent(); [EOL] } public UTF8JsonGenerator(IOContext ctxt, int features, ObjectCodec codec, OutputStream out); public UTF8JsonGenerator(IOContext ctxt, int features, ObjectCodec codec, OutputStream out, byte[] outputBuffer, int outputOffset, boolean bufferRecyclable); public Object getOutputTarget(); public final void writeFieldName(String name) throws IOException, JsonGenerationException; public final void writeFieldName(SerializableString name) throws IOException, JsonGenerationException; public final void writeStartArray() throws IOException, JsonGenerationException; public final void writeEndArray() throws IOException, JsonGenerationException; public final void writeStartObject() throws IOException, JsonGenerationException; public final void writeEndObject() throws IOException, JsonGenerationException; protected final void _writeFieldName(String name) throws IOException, JsonGenerationException; protected final void _writeFieldName(SerializableString name) throws IOException, JsonGenerationException; protected final void _writePPFieldName(String name, boolean commaBefore) throws IOException, JsonGenerationException; protected final void _writePPFieldName(SerializableString name, boolean commaBefore) throws IOException, JsonGenerationException; public void writeString(String text) throws IOException, JsonGenerationException; private void _writeLongString(String text) throws IOException, JsonGenerationException; private void _writeLongString(char[] text, int offset, int len) throws IOException, JsonGenerationException; public void writeString(char[] text, int offset, int len) throws IOException, JsonGenerationException; public final void writeString(SerializableString text) throws IOException, JsonGenerationException; public void writeRawUTF8String(byte[] text, int offset, int length) throws IOException, JsonGenerationException; public void writeUTF8String(byte[] text, int offset, int len) throws IOException, JsonGenerationException; public void writeRaw(String text) throws IOException, JsonGenerationException; public void writeRaw(String text, int offset, int len) throws IOException, JsonGenerationException; public void writeRaw(SerializableString text) throws IOException, JsonGenerationException; public final void writeRaw(char[] cbuf, int offset, int len) throws IOException, JsonGenerationException; public void writeRaw(char ch) throws IOException, JsonGenerationException; private final void _writeSegmentedRaw(char[] cbuf, int offset, int len) throws IOException, JsonGenerationException; public void writeBinary(Base64Variant b64variant, byte[] data, int offset, int len) throws IOException, JsonGenerationException; public int writeBinary(Base64Variant b64variant, InputStream data, int dataLength) throws IOException, JsonGenerationException; public void writeNumber(short s) throws IOException, JsonGenerationException; private void _writeQuotedShort(short s) throws IOException; public void writeNumber(int i) throws IOException, JsonGenerationException; private void _writeQuotedInt(int i) throws IOException; public void writeNumber(long l) throws IOException, JsonGenerationException; private void _writeQuotedLong(long l) throws IOException; public void writeNumber(BigInteger value) throws IOException, JsonGenerationException; public void writeNumber(double d) throws IOException, JsonGenerationException; public void writeNumber(float f) throws IOException, JsonGenerationException; public void writeNumber(BigDecimal value) throws IOException, JsonGenerationException; public void writeNumber(String encodedValue) throws IOException, JsonGenerationException; private void _writeQuotedRaw(Object value) throws IOException; public void writeBoolean(boolean state) throws IOException, JsonGenerationException; public void writeNull() throws IOException, JsonGenerationException; protected final void _verifyValueWrite(String typeMsg) throws IOException, JsonGenerationException; protected final void _verifyPrettyValueWrite(String typeMsg, int status) throws IOException, JsonGenerationException; public final void flush() throws IOException; public void close() throws IOException; protected void _releaseBuffers(); private final void _writeBytes(byte[] bytes) throws IOException; private final void _writeBytes(byte[] bytes, int offset, int len) throws IOException; private final void _writeStringSegments(String text) throws IOException, JsonGenerationException; private final void _writeStringSegments(char[] cbuf, int offset, int totalLen) throws IOException, JsonGenerationException; private final void _writeStringSegment(char[] cbuf, int offset, int len) throws IOException, JsonGenerationException; private final void _writeStringSegment2(final char[] cbuf, int offset, final int end) throws IOException, JsonGenerationException; private final void _writeStringSegmentASCII2(final char[] cbuf, int offset, final int end) throws IOException, JsonGenerationException; private void _writeCustomStringSegment2(final char[] cbuf, int offset, final int end) throws IOException, JsonGenerationException; private int _writeCustomEscape(byte[] outputBuffer, int outputPtr, SerializableString esc, int remainingChars) throws IOException, JsonGenerationException; private int _handleLongCustomEscape(byte[] outputBuffer, int outputPtr, int outputEnd, byte[] raw, int remainingChars) throws IOException, JsonGenerationException; private void _writeUTF8Segments(byte[] utf8, int offset, int totalLen) throws IOException, JsonGenerationException; private void _writeUTF8Segment(byte[] utf8, final int offset, final int len) throws IOException, JsonGenerationException; private void _writeUTF8Segment2(final byte[] utf8, int offset, int len) throws IOException, JsonGenerationException; protected void _writeBinary(Base64Variant b64variant, byte[] input, int inputPtr, final int inputEnd) throws IOException, JsonGenerationException; protected int _writeBinary(Base64Variant b64variant, InputStream data, byte[] readBuffer, int bytesLeft) throws IOException, JsonGenerationException; protected int _writeBinary(Base64Variant b64variant, InputStream data, byte[] readBuffer) throws IOException, JsonGenerationException; private int _readMore(InputStream in, byte[] readBuffer, int inputPtr, int inputEnd, int maxRead) throws IOException; private int _outputRawMultiByteChar(int ch, char[] cbuf, int inputOffset, int inputLen) throws IOException; protected final void _outputSurrogates(int surr1, int surr2) throws IOException; private int _outputMultiByteChar(int ch, int outputPtr) throws IOException; protected final int _decodeSurrogate(int surr1, int surr2) throws IOException; private void _writeNull() throws IOException; private int _writeGenericEscape(int charToEscape, int outputPtr) throws IOException; protected final void _flushBuffer() throws IOException; byte BYTE_u=Optional[(byte) 'u']; byte BYTE_0=Optional[(byte) '0']; byte BYTE_LBRACKET=Optional[(byte) '[']; byte BYTE_RBRACKET=Optional[(byte) ']']; byte BYTE_LCURLY=Optional[(byte) '{']; byte BYTE_RCURLY=Optional[(byte) '}']; byte BYTE_BACKSLASH=Optional[(byte) '\\']; byte BYTE_COMMA=Optional[(byte) ',']; byte BYTE_COLON=Optional[(byte) ':']; byte BYTE_QUOTE=Optional[(byte) '"']; int SURR1_FIRST=Optional[0xD800]; int SURR1_LAST=Optional[0xDBFF]; int SURR2_FIRST=Optional[0xDC00]; int SURR2_LAST=Optional[0xDFFF]; int MAX_BYTES_TO_BUFFER=Optional[512]; byte[] HEX_CHARS=Optional[CharTypes.copyHexBytes()]; byte[] NULL_BYTES=Optional[{ 'n', 'u', 'l', 'l' }]; byte[] TRUE_BYTES=Optional[{ 't', 'r', 'u', 'e' }]; byte[] FALSE_BYTES=Optional[{ 'f', 'a', 'l', 's', 'e' }
@Override [EOL] public void writeString(String text) throws IOException, JsonGenerationException { [EOL]     _verifyValueWrite("write text value"); [EOL]     if (text == null) { [EOL]         _writeNull(); [EOL]         return; [EOL]     } [EOL]     final int len = text.length(); [EOL]     if (len > _charBufferLength) { [EOL]         _writeLongString(text); [EOL]         return; [EOL]     } [EOL]     text.getChars(0, len, _charBuffer, 0); [EOL]     if (len > _outputMaxContiguous) { [EOL]         _writeLongString(_charBuffer, 0, len); [EOL]         return; [EOL]     } [EOL]     if ((_outputTail + len) >= _outputEnd) { [EOL]         _flushBuffer(); [EOL]     } [EOL]     _outputBuffer[_outputTail++] = BYTE_QUOTE; [EOL]     _writeStringSegment(_charBuffer, 0, len); [EOL]     if (_outputTail >= _outputEnd) { [EOL]         _flushBuffer(); [EOL]     } [EOL]     _outputBuffer[_outputTail++] = BYTE_QUOTE; [EOL] } public UTF8JsonGenerator(IOContext ctxt, int features, ObjectCodec codec, OutputStream out); public UTF8JsonGenerator(IOContext ctxt, int features, ObjectCodec codec, OutputStream out, byte[] outputBuffer, int outputOffset, boolean bufferRecyclable); public Object getOutputTarget(); public final void writeFieldName(String name) throws IOException, JsonGenerationException; public final void writeFieldName(SerializableString name) throws IOException, JsonGenerationException; public final void writeStartArray() throws IOException, JsonGenerationException; public final void writeEndArray() throws IOException, JsonGenerationException; public final void writeStartObject() throws IOException, JsonGenerationException; public final void writeEndObject() throws IOException, JsonGenerationException; protected final void _writeFieldName(String name) throws IOException, JsonGenerationException; protected final void _writeFieldName(SerializableString name) throws IOException, JsonGenerationException; protected final void _writePPFieldName(String name, boolean commaBefore) throws IOException, JsonGenerationException; protected final void _writePPFieldName(SerializableString name, boolean commaBefore) throws IOException, JsonGenerationException; public void writeString(String text) throws IOException, JsonGenerationException; private void _writeLongString(String text) throws IOException, JsonGenerationException; private void _writeLongString(char[] text, int offset, int len) throws IOException, JsonGenerationException; public void writeString(char[] text, int offset, int len) throws IOException, JsonGenerationException; public final void writeString(SerializableString text) throws IOException, JsonGenerationException; public void writeRawUTF8String(byte[] text, int offset, int length) throws IOException, JsonGenerationException; public void writeUTF8String(byte[] text, int offset, int len) throws IOException, JsonGenerationException; public void writeRaw(String text) throws IOException, JsonGenerationException; public void writeRaw(String text, int offset, int len) throws IOException, JsonGenerationException; public void writeRaw(SerializableString text) throws IOException, JsonGenerationException; public final void writeRaw(char[] cbuf, int offset, int len) throws IOException, JsonGenerationException; public void writeRaw(char ch) throws IOException, JsonGenerationException; private final void _writeSegmentedRaw(char[] cbuf, int offset, int len) throws IOException, JsonGenerationException; public void writeBinary(Base64Variant b64variant, byte[] data, int offset, int len) throws IOException, JsonGenerationException; public int writeBinary(Base64Variant b64variant, InputStream data, int dataLength) throws IOException, JsonGenerationException; public void writeNumber(short s) throws IOException, JsonGenerationException; private void _writeQuotedShort(short s) throws IOException; public void writeNumber(int i) throws IOException, JsonGenerationException; private void _writeQuotedInt(int i) throws IOException; public void writeNumber(long l) throws IOException, JsonGenerationException; private void _writeQuotedLong(long l) throws IOException; public void writeNumber(BigInteger value) throws IOException, JsonGenerationException; public void writeNumber(double d) throws IOException, JsonGenerationException; public void writeNumber(float f) throws IOException, JsonGenerationException; public void writeNumber(BigDecimal value) throws IOException, JsonGenerationException; public void writeNumber(String encodedValue) throws IOException, JsonGenerationException; private void _writeQuotedRaw(Object value) throws IOException; public void writeBoolean(boolean state) throws IOException, JsonGenerationException; public void writeNull() throws IOException, JsonGenerationException; protected final void _verifyValueWrite(String typeMsg) throws IOException, JsonGenerationException; protected final void _verifyPrettyValueWrite(String typeMsg, int status) throws IOException, JsonGenerationException; public final void flush() throws IOException; public void close() throws IOException; protected void _releaseBuffers(); private final void _writeBytes(byte[] bytes) throws IOException; private final void _writeBytes(byte[] bytes, int offset, int len) throws IOException; private final void _writeStringSegments(String text) throws IOException, JsonGenerationException; private final void _writeStringSegments(char[] cbuf, int offset, int totalLen) throws IOException, JsonGenerationException; private final void _writeStringSegment(char[] cbuf, int offset, int len) throws IOException, JsonGenerationException; private final void _writeStringSegment2(final char[] cbuf, int offset, final int end) throws IOException, JsonGenerationException; private final void _writeStringSegmentASCII2(final char[] cbuf, int offset, final int end) throws IOException, JsonGenerationException; private void _writeCustomStringSegment2(final char[] cbuf, int offset, final int end) throws IOException, JsonGenerationException; private int _writeCustomEscape(byte[] outputBuffer, int outputPtr, SerializableString esc, int remainingChars) throws IOException, JsonGenerationException; private int _handleLongCustomEscape(byte[] outputBuffer, int outputPtr, int outputEnd, byte[] raw, int remainingChars) throws IOException, JsonGenerationException; private void _writeUTF8Segments(byte[] utf8, int offset, int totalLen) throws IOException, JsonGenerationException; private void _writeUTF8Segment(byte[] utf8, final int offset, final int len) throws IOException, JsonGenerationException; private void _writeUTF8Segment2(final byte[] utf8, int offset, int len) throws IOException, JsonGenerationException; protected void _writeBinary(Base64Variant b64variant, byte[] input, int inputPtr, final int inputEnd) throws IOException, JsonGenerationException; protected int _writeBinary(Base64Variant b64variant, InputStream data, byte[] readBuffer, int bytesLeft) throws IOException, JsonGenerationException; protected int _writeBinary(Base64Variant b64variant, InputStream data, byte[] readBuffer) throws IOException, JsonGenerationException; private int _readMore(InputStream in, byte[] readBuffer, int inputPtr, int inputEnd, int maxRead) throws IOException; private int _outputRawMultiByteChar(int ch, char[] cbuf, int inputOffset, int inputLen) throws IOException; protected final void _outputSurrogates(int surr1, int surr2) throws IOException; private int _outputMultiByteChar(int ch, int outputPtr) throws IOException; protected final int _decodeSurrogate(int surr1, int surr2) throws IOException; private void _writeNull() throws IOException; private int _writeGenericEscape(int charToEscape, int outputPtr) throws IOException; protected final void _flushBuffer() throws IOException; byte BYTE_u=Optional[(byte) 'u']; byte BYTE_0=Optional[(byte) '0']; byte BYTE_LBRACKET=Optional[(byte) '[']; byte BYTE_RBRACKET=Optional[(byte) ']']; byte BYTE_LCURLY=Optional[(byte) '{']; byte BYTE_RCURLY=Optional[(byte) '}']; byte BYTE_BACKSLASH=Optional[(byte) '\\']; byte BYTE_COMMA=Optional[(byte) ',']; byte BYTE_COLON=Optional[(byte) ':']; byte BYTE_QUOTE=Optional[(byte) '"']; int SURR1_FIRST=Optional[0xD800]; int SURR1_LAST=Optional[0xDBFF]; int SURR2_FIRST=Optional[0xDC00]; int SURR2_LAST=Optional[0xDFFF]; int MAX_BYTES_TO_BUFFER=Optional[512]; byte[] HEX_CHARS=Optional[CharTypes.copyHexBytes()]; byte[] NULL_BYTES=Optional[{ 'n', 'u', 'l', 'l' }]; byte[] TRUE_BYTES=Optional[{ 't', 'r', 'u', 'e' }]; byte[] FALSE_BYTES=Optional[{ 'f', 'a', 'l', 's', 'e' }
@Override [EOL] public void writeString(String text) throws IOException, JsonGenerationException { [EOL]     _verifyValueWrite("write text value"); [EOL]     if (text == null) { [EOL]         _writeNull(); [EOL]         return; [EOL]     } [EOL]     final int len = text.length(); [EOL]     if (len > _charBufferLength) { [EOL]         _writeLongString(text); [EOL]         return; [EOL]     } [EOL]     text.getChars(0, len, _charBuffer, 0); [EOL]     if (len > _outputMaxContiguous) { [EOL]         _writeLongString(_charBuffer, 0, len); [EOL]         return; [EOL]     } [EOL]     if ((_outputTail + len) >= _outputEnd) { [EOL]         _flushBuffer(); [EOL]     } [EOL]     _outputBuffer[_outputTail++] = BYTE_QUOTE; [EOL]     _writeStringSegment(_charBuffer, 0, len); [EOL]     if (_outputTail >= _outputEnd) { [EOL]         _flushBuffer(); [EOL]     } [EOL]     _outputBuffer[_outputTail++] = BYTE_QUOTE; [EOL] } public UTF8JsonGenerator(IOContext ctxt, int features, ObjectCodec codec, OutputStream out); public UTF8JsonGenerator(IOContext ctxt, int features, ObjectCodec codec, OutputStream out, byte[] outputBuffer, int outputOffset, boolean bufferRecyclable); public Object getOutputTarget(); public final void writeFieldName(String name) throws IOException, JsonGenerationException; public final void writeFieldName(SerializableString name) throws IOException, JsonGenerationException; public final void writeStartArray() throws IOException, JsonGenerationException; public final void writeEndArray() throws IOException, JsonGenerationException; public final void writeStartObject() throws IOException, JsonGenerationException; public final void writeEndObject() throws IOException, JsonGenerationException; protected final void _writeFieldName(String name) throws IOException, JsonGenerationException; protected final void _writeFieldName(SerializableString name) throws IOException, JsonGenerationException; protected final void _writePPFieldName(String name, boolean commaBefore) throws IOException, JsonGenerationException; protected final void _writePPFieldName(SerializableString name, boolean commaBefore) throws IOException, JsonGenerationException; public void writeString(String text) throws IOException, JsonGenerationException; private void _writeLongString(String text) throws IOException, JsonGenerationException; private void _writeLongString(char[] text, int offset, int len) throws IOException, JsonGenerationException; public void writeString(char[] text, int offset, int len) throws IOException, JsonGenerationException; public final void writeString(SerializableString text) throws IOException, JsonGenerationException; public void writeRawUTF8String(byte[] text, int offset, int length) throws IOException, JsonGenerationException; public void writeUTF8String(byte[] text, int offset, int len) throws IOException, JsonGenerationException; public void writeRaw(String text) throws IOException, JsonGenerationException; public void writeRaw(String text, int offset, int len) throws IOException, JsonGenerationException; public void writeRaw(SerializableString text) throws IOException, JsonGenerationException; public final void writeRaw(char[] cbuf, int offset, int len) throws IOException, JsonGenerationException; public void writeRaw(char ch) throws IOException, JsonGenerationException; private final void _writeSegmentedRaw(char[] cbuf, int offset, int len) throws IOException, JsonGenerationException; public void writeBinary(Base64Variant b64variant, byte[] data, int offset, int len) throws IOException, JsonGenerationException; public int writeBinary(Base64Variant b64variant, InputStream data, int dataLength) throws IOException, JsonGenerationException; public void writeNumber(short s) throws IOException, JsonGenerationException; private void _writeQuotedShort(short s) throws IOException; public void writeNumber(int i) throws IOException, JsonGenerationException; private void _writeQuotedInt(int i) throws IOException; public void writeNumber(long l) throws IOException, JsonGenerationException; private void _writeQuotedLong(long l) throws IOException; public void writeNumber(BigInteger value) throws IOException, JsonGenerationException; public void writeNumber(double d) throws IOException, JsonGenerationException; public void writeNumber(float f) throws IOException, JsonGenerationException; public void writeNumber(BigDecimal value) throws IOException, JsonGenerationException; public void writeNumber(String encodedValue) throws IOException, JsonGenerationException; private void _writeQuotedRaw(Object value) throws IOException; public void writeBoolean(boolean state) throws IOException, JsonGenerationException; public void writeNull() throws IOException, JsonGenerationException; protected final void _verifyValueWrite(String typeMsg) throws IOException, JsonGenerationException; protected final void _verifyPrettyValueWrite(String typeMsg, int status) throws IOException, JsonGenerationException; public final void flush() throws IOException; public void close() throws IOException; protected void _releaseBuffers(); private final void _writeBytes(byte[] bytes) throws IOException; private final void _writeBytes(byte[] bytes, int offset, int len) throws IOException; private final void _writeStringSegments(String text) throws IOException, JsonGenerationException; private final void _writeStringSegments(char[] cbuf, int offset, int totalLen) throws IOException, JsonGenerationException; private final void _writeStringSegment(char[] cbuf, int offset, int len) throws IOException, JsonGenerationException; private final void _writeStringSegment2(final char[] cbuf, int offset, final int end) throws IOException, JsonGenerationException; private final void _writeStringSegmentASCII2(final char[] cbuf, int offset, final int end) throws IOException, JsonGenerationException; private void _writeCustomStringSegment2(final char[] cbuf, int offset, final int end) throws IOException, JsonGenerationException; private int _writeCustomEscape(byte[] outputBuffer, int outputPtr, SerializableString esc, int remainingChars) throws IOException, JsonGenerationException; private int _handleLongCustomEscape(byte[] outputBuffer, int outputPtr, int outputEnd, byte[] raw, int remainingChars) throws IOException, JsonGenerationException; private void _writeUTF8Segments(byte[] utf8, int offset, int totalLen) throws IOException, JsonGenerationException; private void _writeUTF8Segment(byte[] utf8, final int offset, final int len) throws IOException, JsonGenerationException; private void _writeUTF8Segment2(final byte[] utf8, int offset, int len) throws IOException, JsonGenerationException; protected void _writeBinary(Base64Variant b64variant, byte[] input, int inputPtr, final int inputEnd) throws IOException, JsonGenerationException; protected int _writeBinary(Base64Variant b64variant, InputStream data, byte[] readBuffer, int bytesLeft) throws IOException, JsonGenerationException; protected int _writeBinary(Base64Variant b64variant, InputStream data, byte[] readBuffer) throws IOException, JsonGenerationException; private int _readMore(InputStream in, byte[] readBuffer, int inputPtr, int inputEnd, int maxRead) throws IOException; private int _outputRawMultiByteChar(int ch, char[] cbuf, int inputOffset, int inputLen) throws IOException; protected final void _outputSurrogates(int surr1, int surr2) throws IOException; private int _outputMultiByteChar(int ch, int outputPtr) throws IOException; protected final int _decodeSurrogate(int surr1, int surr2) throws IOException; private void _writeNull() throws IOException; private int _writeGenericEscape(int charToEscape, int outputPtr) throws IOException; protected final void _flushBuffer() throws IOException; byte BYTE_u=Optional[(byte) 'u']; byte BYTE_0=Optional[(byte) '0']; byte BYTE_LBRACKET=Optional[(byte) '[']; byte BYTE_RBRACKET=Optional[(byte) ']']; byte BYTE_LCURLY=Optional[(byte) '{']; byte BYTE_RCURLY=Optional[(byte) '}']; byte BYTE_BACKSLASH=Optional[(byte) '\\']; byte BYTE_COMMA=Optional[(byte) ',']; byte BYTE_COLON=Optional[(byte) ':']; byte BYTE_QUOTE=Optional[(byte) '"']; int SURR1_FIRST=Optional[0xD800]; int SURR1_LAST=Optional[0xDBFF]; int SURR2_FIRST=Optional[0xDC00]; int SURR2_LAST=Optional[0xDFFF]; int MAX_BYTES_TO_BUFFER=Optional[512]; byte[] HEX_CHARS=Optional[CharTypes.copyHexBytes()]; byte[] NULL_BYTES=Optional[{ 'n', 'u', 'l', 'l' }]; byte[] TRUE_BYTES=Optional[{ 't', 'r', 'u', 'e' }]; byte[] FALSE_BYTES=Optional[{ 'f', 'a', 'l', 's', 'e' }
@Override [EOL] public void writeString(String text) throws IOException, JsonGenerationException { [EOL]     _verifyValueWrite("write text value"); [EOL]     if (text == null) { [EOL]         _writeNull(); [EOL]         return; [EOL]     } [EOL]     final int len = text.length(); [EOL]     if (len > _charBufferLength) { [EOL]         _writeLongString(text); [EOL]         return; [EOL]     } [EOL]     text.getChars(0, len, _charBuffer, 0); [EOL]     if (len > _outputMaxContiguous) { [EOL]         _writeLongString(_charBuffer, 0, len); [EOL]         return; [EOL]     } [EOL]     if ((_outputTail + len) >= _outputEnd) { [EOL]         _flushBuffer(); [EOL]     } [EOL]     _outputBuffer[_outputTail++] = BYTE_QUOTE; [EOL]     _writeStringSegment(_charBuffer, 0, len); [EOL]     if (_outputTail >= _outputEnd) { [EOL]         _flushBuffer(); [EOL]     } [EOL]     _outputBuffer[_outputTail++] = BYTE_QUOTE; [EOL] } public UTF8JsonGenerator(IOContext ctxt, int features, ObjectCodec codec, OutputStream out); public UTF8JsonGenerator(IOContext ctxt, int features, ObjectCodec codec, OutputStream out, byte[] outputBuffer, int outputOffset, boolean bufferRecyclable); public Object getOutputTarget(); public final void writeFieldName(String name) throws IOException, JsonGenerationException; public final void writeFieldName(SerializableString name) throws IOException, JsonGenerationException; public final void writeStartArray() throws IOException, JsonGenerationException; public final void writeEndArray() throws IOException, JsonGenerationException; public final void writeStartObject() throws IOException, JsonGenerationException; public final void writeEndObject() throws IOException, JsonGenerationException; protected final void _writeFieldName(String name) throws IOException, JsonGenerationException; protected final void _writeFieldName(SerializableString name) throws IOException, JsonGenerationException; protected final void _writePPFieldName(String name, boolean commaBefore) throws IOException, JsonGenerationException; protected final void _writePPFieldName(SerializableString name, boolean commaBefore) throws IOException, JsonGenerationException; public void writeString(String text) throws IOException, JsonGenerationException; private void _writeLongString(String text) throws IOException, JsonGenerationException; private void _writeLongString(char[] text, int offset, int len) throws IOException, JsonGenerationException; public void writeString(char[] text, int offset, int len) throws IOException, JsonGenerationException; public final void writeString(SerializableString text) throws IOException, JsonGenerationException; public void writeRawUTF8String(byte[] text, int offset, int length) throws IOException, JsonGenerationException; public void writeUTF8String(byte[] text, int offset, int len) throws IOException, JsonGenerationException; public void writeRaw(String text) throws IOException, JsonGenerationException; public void writeRaw(String text, int offset, int len) throws IOException, JsonGenerationException; public void writeRaw(SerializableString text) throws IOException, JsonGenerationException; public final void writeRaw(char[] cbuf, int offset, int len) throws IOException, JsonGenerationException; public void writeRaw(char ch) throws IOException, JsonGenerationException; private final void _writeSegmentedRaw(char[] cbuf, int offset, int len) throws IOException, JsonGenerationException; public void writeBinary(Base64Variant b64variant, byte[] data, int offset, int len) throws IOException, JsonGenerationException; public int writeBinary(Base64Variant b64variant, InputStream data, int dataLength) throws IOException, JsonGenerationException; public void writeNumber(short s) throws IOException, JsonGenerationException; private void _writeQuotedShort(short s) throws IOException; public void writeNumber(int i) throws IOException, JsonGenerationException; private void _writeQuotedInt(int i) throws IOException; public void writeNumber(long l) throws IOException, JsonGenerationException; private void _writeQuotedLong(long l) throws IOException; public void writeNumber(BigInteger value) throws IOException, JsonGenerationException; public void writeNumber(double d) throws IOException, JsonGenerationException; public void writeNumber(float f) throws IOException, JsonGenerationException; public void writeNumber(BigDecimal value) throws IOException, JsonGenerationException; public void writeNumber(String encodedValue) throws IOException, JsonGenerationException; private void _writeQuotedRaw(Object value) throws IOException; public void writeBoolean(boolean state) throws IOException, JsonGenerationException; public void writeNull() throws IOException, JsonGenerationException; protected final void _verifyValueWrite(String typeMsg) throws IOException, JsonGenerationException; protected final void _verifyPrettyValueWrite(String typeMsg, int status) throws IOException, JsonGenerationException; public final void flush() throws IOException; public void close() throws IOException; protected void _releaseBuffers(); private final void _writeBytes(byte[] bytes) throws IOException; private final void _writeBytes(byte[] bytes, int offset, int len) throws IOException; private final void _writeStringSegments(String text) throws IOException, JsonGenerationException; private final void _writeStringSegments(char[] cbuf, int offset, int totalLen) throws IOException, JsonGenerationException; private final void _writeStringSegment(char[] cbuf, int offset, int len) throws IOException, JsonGenerationException; private final void _writeStringSegment2(final char[] cbuf, int offset, final int end) throws IOException, JsonGenerationException; private final void _writeStringSegmentASCII2(final char[] cbuf, int offset, final int end) throws IOException, JsonGenerationException; private void _writeCustomStringSegment2(final char[] cbuf, int offset, final int end) throws IOException, JsonGenerationException; private int _writeCustomEscape(byte[] outputBuffer, int outputPtr, SerializableString esc, int remainingChars) throws IOException, JsonGenerationException; private int _handleLongCustomEscape(byte[] outputBuffer, int outputPtr, int outputEnd, byte[] raw, int remainingChars) throws IOException, JsonGenerationException; private void _writeUTF8Segments(byte[] utf8, int offset, int totalLen) throws IOException, JsonGenerationException; private void _writeUTF8Segment(byte[] utf8, final int offset, final int len) throws IOException, JsonGenerationException; private void _writeUTF8Segment2(final byte[] utf8, int offset, int len) throws IOException, JsonGenerationException; protected void _writeBinary(Base64Variant b64variant, byte[] input, int inputPtr, final int inputEnd) throws IOException, JsonGenerationException; protected int _writeBinary(Base64Variant b64variant, InputStream data, byte[] readBuffer, int bytesLeft) throws IOException, JsonGenerationException; protected int _writeBinary(Base64Variant b64variant, InputStream data, byte[] readBuffer) throws IOException, JsonGenerationException; private int _readMore(InputStream in, byte[] readBuffer, int inputPtr, int inputEnd, int maxRead) throws IOException; private int _outputRawMultiByteChar(int ch, char[] cbuf, int inputOffset, int inputLen) throws IOException; protected final void _outputSurrogates(int surr1, int surr2) throws IOException; private int _outputMultiByteChar(int ch, int outputPtr) throws IOException; protected final int _decodeSurrogate(int surr1, int surr2) throws IOException; private void _writeNull() throws IOException; private int _writeGenericEscape(int charToEscape, int outputPtr) throws IOException; protected final void _flushBuffer() throws IOException; byte BYTE_u=Optional[(byte) 'u']; byte BYTE_0=Optional[(byte) '0']; byte BYTE_LBRACKET=Optional[(byte) '[']; byte BYTE_RBRACKET=Optional[(byte) ']']; byte BYTE_LCURLY=Optional[(byte) '{']; byte BYTE_RCURLY=Optional[(byte) '}']; byte BYTE_BACKSLASH=Optional[(byte) '\\']; byte BYTE_COMMA=Optional[(byte) ',']; byte BYTE_COLON=Optional[(byte) ':']; byte BYTE_QUOTE=Optional[(byte) '"']; int SURR1_FIRST=Optional[0xD800]; int SURR1_LAST=Optional[0xDBFF]; int SURR2_FIRST=Optional[0xDC00]; int SURR2_LAST=Optional[0xDFFF]; int MAX_BYTES_TO_BUFFER=Optional[512]; byte[] HEX_CHARS=Optional[CharTypes.copyHexBytes()]; byte[] NULL_BYTES=Optional[{ 'n', 'u', 'l', 'l' }]; byte[] TRUE_BYTES=Optional[{ 't', 'r', 'u', 'e' }]; byte[] FALSE_BYTES=Optional[{ 'f', 'a', 'l', 's', 'e' }
@Override [EOL] public void writeString(String text) throws IOException, JsonGenerationException { [EOL]     _verifyValueWrite("write text value"); [EOL]     if (text == null) { [EOL]         _writeNull(); [EOL]         return; [EOL]     } [EOL]     final int len = text.length(); [EOL]     if (len > _charBufferLength) { [EOL]         _writeLongString(text); [EOL]         return; [EOL]     } [EOL]     text.getChars(0, len, _charBuffer, 0); [EOL]     if (len > _outputMaxContiguous) { [EOL]         _writeLongString(_charBuffer, 0, len); [EOL]         return; [EOL]     } [EOL]     if ((_outputTail + len) >= _outputEnd) { [EOL]         _flushBuffer(); [EOL]     } [EOL]     _outputBuffer[_outputTail++] = BYTE_QUOTE; [EOL]     _writeStringSegment(_charBuffer, 0, len); [EOL]     if (_outputTail >= _outputEnd) { [EOL]         _flushBuffer(); [EOL]     } [EOL]     _outputBuffer[_outputTail++] = BYTE_QUOTE; [EOL] } public UTF8JsonGenerator(IOContext ctxt, int features, ObjectCodec codec, OutputStream out); public UTF8JsonGenerator(IOContext ctxt, int features, ObjectCodec codec, OutputStream out, byte[] outputBuffer, int outputOffset, boolean bufferRecyclable); public Object getOutputTarget(); public final void writeFieldName(String name) throws IOException, JsonGenerationException; public final void writeFieldName(SerializableString name) throws IOException, JsonGenerationException; public final void writeStartArray() throws IOException, JsonGenerationException; public final void writeEndArray() throws IOException, JsonGenerationException; public final void writeStartObject() throws IOException, JsonGenerationException; public final void writeEndObject() throws IOException, JsonGenerationException; protected final void _writeFieldName(String name) throws IOException, JsonGenerationException; protected final void _writeFieldName(SerializableString name) throws IOException, JsonGenerationException; protected final void _writePPFieldName(String name, boolean commaBefore) throws IOException, JsonGenerationException; protected final void _writePPFieldName(SerializableString name, boolean commaBefore) throws IOException, JsonGenerationException; public void writeString(String text) throws IOException, JsonGenerationException; private void _writeLongString(String text) throws IOException, JsonGenerationException; private void _writeLongString(char[] text, int offset, int len) throws IOException, JsonGenerationException; public void writeString(char[] text, int offset, int len) throws IOException, JsonGenerationException; public final void writeString(SerializableString text) throws IOException, JsonGenerationException; public void writeRawUTF8String(byte[] text, int offset, int length) throws IOException, JsonGenerationException; public void writeUTF8String(byte[] text, int offset, int len) throws IOException, JsonGenerationException; public void writeRaw(String text) throws IOException, JsonGenerationException; public void writeRaw(String text, int offset, int len) throws IOException, JsonGenerationException; public void writeRaw(SerializableString text) throws IOException, JsonGenerationException; public final void writeRaw(char[] cbuf, int offset, int len) throws IOException, JsonGenerationException; public void writeRaw(char ch) throws IOException, JsonGenerationException; private final void _writeSegmentedRaw(char[] cbuf, int offset, int len) throws IOException, JsonGenerationException; public void writeBinary(Base64Variant b64variant, byte[] data, int offset, int len) throws IOException, JsonGenerationException; public int writeBinary(Base64Variant b64variant, InputStream data, int dataLength) throws IOException, JsonGenerationException; public void writeNumber(short s) throws IOException, JsonGenerationException; private void _writeQuotedShort(short s) throws IOException; public void writeNumber(int i) throws IOException, JsonGenerationException; private void _writeQuotedInt(int i) throws IOException; public void writeNumber(long l) throws IOException, JsonGenerationException; private void _writeQuotedLong(long l) throws IOException; public void writeNumber(BigInteger value) throws IOException, JsonGenerationException; public void writeNumber(double d) throws IOException, JsonGenerationException; public void writeNumber(float f) throws IOException, JsonGenerationException; public void writeNumber(BigDecimal value) throws IOException, JsonGenerationException; public void writeNumber(String encodedValue) throws IOException, JsonGenerationException; private void _writeQuotedRaw(Object value) throws IOException; public void writeBoolean(boolean state) throws IOException, JsonGenerationException; public void writeNull() throws IOException, JsonGenerationException; protected final void _verifyValueWrite(String typeMsg) throws IOException, JsonGenerationException; protected final void _verifyPrettyValueWrite(String typeMsg, int status) throws IOException, JsonGenerationException; public final void flush() throws IOException; public void close() throws IOException; protected void _releaseBuffers(); private final void _writeBytes(byte[] bytes) throws IOException; private final void _writeBytes(byte[] bytes, int offset, int len) throws IOException; private final void _writeStringSegments(String text) throws IOException, JsonGenerationException; private final void _writeStringSegments(char[] cbuf, int offset, int totalLen) throws IOException, JsonGenerationException; private final void _writeStringSegment(char[] cbuf, int offset, int len) throws IOException, JsonGenerationException; private final void _writeStringSegment2(final char[] cbuf, int offset, final int end) throws IOException, JsonGenerationException; private final void _writeStringSegmentASCII2(final char[] cbuf, int offset, final int end) throws IOException, JsonGenerationException; private void _writeCustomStringSegment2(final char[] cbuf, int offset, final int end) throws IOException, JsonGenerationException; private int _writeCustomEscape(byte[] outputBuffer, int outputPtr, SerializableString esc, int remainingChars) throws IOException, JsonGenerationException; private int _handleLongCustomEscape(byte[] outputBuffer, int outputPtr, int outputEnd, byte[] raw, int remainingChars) throws IOException, JsonGenerationException; private void _writeUTF8Segments(byte[] utf8, int offset, int totalLen) throws IOException, JsonGenerationException; private void _writeUTF8Segment(byte[] utf8, final int offset, final int len) throws IOException, JsonGenerationException; private void _writeUTF8Segment2(final byte[] utf8, int offset, int len) throws IOException, JsonGenerationException; protected void _writeBinary(Base64Variant b64variant, byte[] input, int inputPtr, final int inputEnd) throws IOException, JsonGenerationException; protected int _writeBinary(Base64Variant b64variant, InputStream data, byte[] readBuffer, int bytesLeft) throws IOException, JsonGenerationException; protected int _writeBinary(Base64Variant b64variant, InputStream data, byte[] readBuffer) throws IOException, JsonGenerationException; private int _readMore(InputStream in, byte[] readBuffer, int inputPtr, int inputEnd, int maxRead) throws IOException; private int _outputRawMultiByteChar(int ch, char[] cbuf, int inputOffset, int inputLen) throws IOException; protected final void _outputSurrogates(int surr1, int surr2) throws IOException; private int _outputMultiByteChar(int ch, int outputPtr) throws IOException; protected final int _decodeSurrogate(int surr1, int surr2) throws IOException; private void _writeNull() throws IOException; private int _writeGenericEscape(int charToEscape, int outputPtr) throws IOException; protected final void _flushBuffer() throws IOException; byte BYTE_u=Optional[(byte) 'u']; byte BYTE_0=Optional[(byte) '0']; byte BYTE_LBRACKET=Optional[(byte) '[']; byte BYTE_RBRACKET=Optional[(byte) ']']; byte BYTE_LCURLY=Optional[(byte) '{']; byte BYTE_RCURLY=Optional[(byte) '}']; byte BYTE_BACKSLASH=Optional[(byte) '\\']; byte BYTE_COMMA=Optional[(byte) ',']; byte BYTE_COLON=Optional[(byte) ':']; byte BYTE_QUOTE=Optional[(byte) '"']; int SURR1_FIRST=Optional[0xD800]; int SURR1_LAST=Optional[0xDBFF]; int SURR2_FIRST=Optional[0xDC00]; int SURR2_LAST=Optional[0xDFFF]; int MAX_BYTES_TO_BUFFER=Optional[512]; byte[] HEX_CHARS=Optional[CharTypes.copyHexBytes()]; byte[] NULL_BYTES=Optional[{ 'n', 'u', 'l', 'l' }]; byte[] TRUE_BYTES=Optional[{ 't', 'r', 'u', 'e' }]; byte[] FALSE_BYTES=Optional[{ 'f', 'a', 'l', 's', 'e' }
@Override [EOL] public void writeString(String text) throws IOException, JsonGenerationException { [EOL]     _verifyValueWrite("write text value"); [EOL]     if (text == null) { [EOL]         _writeNull(); [EOL]         return; [EOL]     } [EOL]     final int len = text.length(); [EOL]     if (len > _charBufferLength) { [EOL]         _writeLongString(text); [EOL]         return; [EOL]     } [EOL]     text.getChars(0, len, _charBuffer, 0); [EOL]     if (len > _outputMaxContiguous) { [EOL]         _writeLongString(_charBuffer, 0, len); [EOL]         return; [EOL]     } [EOL]     if ((_outputTail + len) >= _outputEnd) { [EOL]         _flushBuffer(); [EOL]     } [EOL]     _outputBuffer[_outputTail++] = BYTE_QUOTE; [EOL]     _writeStringSegment(_charBuffer, 0, len); [EOL]     if (_outputTail >= _outputEnd) { [EOL]         _flushBuffer(); [EOL]     } [EOL]     _outputBuffer[_outputTail++] = BYTE_QUOTE; [EOL] } public UTF8JsonGenerator(IOContext ctxt, int features, ObjectCodec codec, OutputStream out); public UTF8JsonGenerator(IOContext ctxt, int features, ObjectCodec codec, OutputStream out, byte[] outputBuffer, int outputOffset, boolean bufferRecyclable); public Object getOutputTarget(); public final void writeFieldName(String name) throws IOException, JsonGenerationException; public final void writeFieldName(SerializableString name) throws IOException, JsonGenerationException; public final void writeStartArray() throws IOException, JsonGenerationException; public final void writeEndArray() throws IOException, JsonGenerationException; public final void writeStartObject() throws IOException, JsonGenerationException; public final void writeEndObject() throws IOException, JsonGenerationException; protected final void _writeFieldName(String name) throws IOException, JsonGenerationException; protected final void _writeFieldName(SerializableString name) throws IOException, JsonGenerationException; protected final void _writePPFieldName(String name, boolean commaBefore) throws IOException, JsonGenerationException; protected final void _writePPFieldName(SerializableString name, boolean commaBefore) throws IOException, JsonGenerationException; public void writeString(String text) throws IOException, JsonGenerationException; private void _writeLongString(String text) throws IOException, JsonGenerationException; private void _writeLongString(char[] text, int offset, int len) throws IOException, JsonGenerationException; public void writeString(char[] text, int offset, int len) throws IOException, JsonGenerationException; public final void writeString(SerializableString text) throws IOException, JsonGenerationException; public void writeRawUTF8String(byte[] text, int offset, int length) throws IOException, JsonGenerationException; public void writeUTF8String(byte[] text, int offset, int len) throws IOException, JsonGenerationException; public void writeRaw(String text) throws IOException, JsonGenerationException; public void writeRaw(String text, int offset, int len) throws IOException, JsonGenerationException; public void writeRaw(SerializableString text) throws IOException, JsonGenerationException; public final void writeRaw(char[] cbuf, int offset, int len) throws IOException, JsonGenerationException; public void writeRaw(char ch) throws IOException, JsonGenerationException; private final void _writeSegmentedRaw(char[] cbuf, int offset, int len) throws IOException, JsonGenerationException; public void writeBinary(Base64Variant b64variant, byte[] data, int offset, int len) throws IOException, JsonGenerationException; public int writeBinary(Base64Variant b64variant, InputStream data, int dataLength) throws IOException, JsonGenerationException; public void writeNumber(short s) throws IOException, JsonGenerationException; private void _writeQuotedShort(short s) throws IOException; public void writeNumber(int i) throws IOException, JsonGenerationException; private void _writeQuotedInt(int i) throws IOException; public void writeNumber(long l) throws IOException, JsonGenerationException; private void _writeQuotedLong(long l) throws IOException; public void writeNumber(BigInteger value) throws IOException, JsonGenerationException; public void writeNumber(double d) throws IOException, JsonGenerationException; public void writeNumber(float f) throws IOException, JsonGenerationException; public void writeNumber(BigDecimal value) throws IOException, JsonGenerationException; public void writeNumber(String encodedValue) throws IOException, JsonGenerationException; private void _writeQuotedRaw(Object value) throws IOException; public void writeBoolean(boolean state) throws IOException, JsonGenerationException; public void writeNull() throws IOException, JsonGenerationException; protected final void _verifyValueWrite(String typeMsg) throws IOException, JsonGenerationException; protected final void _verifyPrettyValueWrite(String typeMsg, int status) throws IOException, JsonGenerationException; public final void flush() throws IOException; public void close() throws IOException; protected void _releaseBuffers(); private final void _writeBytes(byte[] bytes) throws IOException; private final void _writeBytes(byte[] bytes, int offset, int len) throws IOException; private final void _writeStringSegments(String text) throws IOException, JsonGenerationException; private final void _writeStringSegments(char[] cbuf, int offset, int totalLen) throws IOException, JsonGenerationException; private final void _writeStringSegment(char[] cbuf, int offset, int len) throws IOException, JsonGenerationException; private final void _writeStringSegment2(final char[] cbuf, int offset, final int end) throws IOException, JsonGenerationException; private final void _writeStringSegmentASCII2(final char[] cbuf, int offset, final int end) throws IOException, JsonGenerationException; private void _writeCustomStringSegment2(final char[] cbuf, int offset, final int end) throws IOException, JsonGenerationException; private int _writeCustomEscape(byte[] outputBuffer, int outputPtr, SerializableString esc, int remainingChars) throws IOException, JsonGenerationException; private int _handleLongCustomEscape(byte[] outputBuffer, int outputPtr, int outputEnd, byte[] raw, int remainingChars) throws IOException, JsonGenerationException; private void _writeUTF8Segments(byte[] utf8, int offset, int totalLen) throws IOException, JsonGenerationException; private void _writeUTF8Segment(byte[] utf8, final int offset, final int len) throws IOException, JsonGenerationException; private void _writeUTF8Segment2(final byte[] utf8, int offset, int len) throws IOException, JsonGenerationException; protected void _writeBinary(Base64Variant b64variant, byte[] input, int inputPtr, final int inputEnd) throws IOException, JsonGenerationException; protected int _writeBinary(Base64Variant b64variant, InputStream data, byte[] readBuffer, int bytesLeft) throws IOException, JsonGenerationException; protected int _writeBinary(Base64Variant b64variant, InputStream data, byte[] readBuffer) throws IOException, JsonGenerationException; private int _readMore(InputStream in, byte[] readBuffer, int inputPtr, int inputEnd, int maxRead) throws IOException; private int _outputRawMultiByteChar(int ch, char[] cbuf, int inputOffset, int inputLen) throws IOException; protected final void _outputSurrogates(int surr1, int surr2) throws IOException; private int _outputMultiByteChar(int ch, int outputPtr) throws IOException; protected final int _decodeSurrogate(int surr1, int surr2) throws IOException; private void _writeNull() throws IOException; private int _writeGenericEscape(int charToEscape, int outputPtr) throws IOException; protected final void _flushBuffer() throws IOException; byte BYTE_u=Optional[(byte) 'u']; byte BYTE_0=Optional[(byte) '0']; byte BYTE_LBRACKET=Optional[(byte) '[']; byte BYTE_RBRACKET=Optional[(byte) ']']; byte BYTE_LCURLY=Optional[(byte) '{']; byte BYTE_RCURLY=Optional[(byte) '}']; byte BYTE_BACKSLASH=Optional[(byte) '\\']; byte BYTE_COMMA=Optional[(byte) ',']; byte BYTE_COLON=Optional[(byte) ':']; byte BYTE_QUOTE=Optional[(byte) '"']; int SURR1_FIRST=Optional[0xD800]; int SURR1_LAST=Optional[0xDBFF]; int SURR2_FIRST=Optional[0xDC00]; int SURR2_LAST=Optional[0xDFFF]; int MAX_BYTES_TO_BUFFER=Optional[512]; byte[] HEX_CHARS=Optional[CharTypes.copyHexBytes()]; byte[] NULL_BYTES=Optional[{ 'n', 'u', 'l', 'l' }]; byte[] TRUE_BYTES=Optional[{ 't', 'r', 'u', 'e' }]; byte[] FALSE_BYTES=Optional[{ 'f', 'a', 'l', 's', 'e' }
@Override [EOL] public void writeString(String text) throws IOException, JsonGenerationException { [EOL]     _verifyValueWrite("write text value"); [EOL]     if (text == null) { [EOL]         _writeNull(); [EOL]         return; [EOL]     } [EOL]     final int len = text.length(); [EOL]     if (len > _charBufferLength) { [EOL]         _writeLongString(text); [EOL]         return; [EOL]     } [EOL]     text.getChars(0, len, _charBuffer, 0); [EOL]     if (len > _outputMaxContiguous) { [EOL]         _writeLongString(_charBuffer, 0, len); [EOL]         return; [EOL]     } [EOL]     if ((_outputTail + len) >= _outputEnd) { [EOL]         _flushBuffer(); [EOL]     } [EOL]     _outputBuffer[_outputTail++] = BYTE_QUOTE; [EOL]     _writeStringSegment(_charBuffer, 0, len); [EOL]     if (_outputTail >= _outputEnd) { [EOL]         _flushBuffer(); [EOL]     } [EOL]     _outputBuffer[_outputTail++] = BYTE_QUOTE; [EOL] } public UTF8JsonGenerator(IOContext ctxt, int features, ObjectCodec codec, OutputStream out); public UTF8JsonGenerator(IOContext ctxt, int features, ObjectCodec codec, OutputStream out, byte[] outputBuffer, int outputOffset, boolean bufferRecyclable); public Object getOutputTarget(); public final void writeFieldName(String name) throws IOException, JsonGenerationException; public final void writeFieldName(SerializableString name) throws IOException, JsonGenerationException; public final void writeStartArray() throws IOException, JsonGenerationException; public final void writeEndArray() throws IOException, JsonGenerationException; public final void writeStartObject() throws IOException, JsonGenerationException; public final void writeEndObject() throws IOException, JsonGenerationException; protected final void _writeFieldName(String name) throws IOException, JsonGenerationException; protected final void _writeFieldName(SerializableString name) throws IOException, JsonGenerationException; protected final void _writePPFieldName(String name, boolean commaBefore) throws IOException, JsonGenerationException; protected final void _writePPFieldName(SerializableString name, boolean commaBefore) throws IOException, JsonGenerationException; public void writeString(String text) throws IOException, JsonGenerationException; private void _writeLongString(String text) throws IOException, JsonGenerationException; private void _writeLongString(char[] text, int offset, int len) throws IOException, JsonGenerationException; public void writeString(char[] text, int offset, int len) throws IOException, JsonGenerationException; public final void writeString(SerializableString text) throws IOException, JsonGenerationException; public void writeRawUTF8String(byte[] text, int offset, int length) throws IOException, JsonGenerationException; public void writeUTF8String(byte[] text, int offset, int len) throws IOException, JsonGenerationException; public void writeRaw(String text) throws IOException, JsonGenerationException; public void writeRaw(String text, int offset, int len) throws IOException, JsonGenerationException; public void writeRaw(SerializableString text) throws IOException, JsonGenerationException; public final void writeRaw(char[] cbuf, int offset, int len) throws IOException, JsonGenerationException; public void writeRaw(char ch) throws IOException, JsonGenerationException; private final void _writeSegmentedRaw(char[] cbuf, int offset, int len) throws IOException, JsonGenerationException; public void writeBinary(Base64Variant b64variant, byte[] data, int offset, int len) throws IOException, JsonGenerationException; public int writeBinary(Base64Variant b64variant, InputStream data, int dataLength) throws IOException, JsonGenerationException; public void writeNumber(short s) throws IOException, JsonGenerationException; private void _writeQuotedShort(short s) throws IOException; public void writeNumber(int i) throws IOException, JsonGenerationException; private void _writeQuotedInt(int i) throws IOException; public void writeNumber(long l) throws IOException, JsonGenerationException; private void _writeQuotedLong(long l) throws IOException; public void writeNumber(BigInteger value) throws IOException, JsonGenerationException; public void writeNumber(double d) throws IOException, JsonGenerationException; public void writeNumber(float f) throws IOException, JsonGenerationException; public void writeNumber(BigDecimal value) throws IOException, JsonGenerationException; public void writeNumber(String encodedValue) throws IOException, JsonGenerationException; private void _writeQuotedRaw(Object value) throws IOException; public void writeBoolean(boolean state) throws IOException, JsonGenerationException; public void writeNull() throws IOException, JsonGenerationException; protected final void _verifyValueWrite(String typeMsg) throws IOException, JsonGenerationException; protected final void _verifyPrettyValueWrite(String typeMsg, int status) throws IOException, JsonGenerationException; public final void flush() throws IOException; public void close() throws IOException; protected void _releaseBuffers(); private final void _writeBytes(byte[] bytes) throws IOException; private final void _writeBytes(byte[] bytes, int offset, int len) throws IOException; private final void _writeStringSegments(String text) throws IOException, JsonGenerationException; private final void _writeStringSegments(char[] cbuf, int offset, int totalLen) throws IOException, JsonGenerationException; private final void _writeStringSegment(char[] cbuf, int offset, int len) throws IOException, JsonGenerationException; private final void _writeStringSegment2(final char[] cbuf, int offset, final int end) throws IOException, JsonGenerationException; private final void _writeStringSegmentASCII2(final char[] cbuf, int offset, final int end) throws IOException, JsonGenerationException; private void _writeCustomStringSegment2(final char[] cbuf, int offset, final int end) throws IOException, JsonGenerationException; private int _writeCustomEscape(byte[] outputBuffer, int outputPtr, SerializableString esc, int remainingChars) throws IOException, JsonGenerationException; private int _handleLongCustomEscape(byte[] outputBuffer, int outputPtr, int outputEnd, byte[] raw, int remainingChars) throws IOException, JsonGenerationException; private void _writeUTF8Segments(byte[] utf8, int offset, int totalLen) throws IOException, JsonGenerationException; private void _writeUTF8Segment(byte[] utf8, final int offset, final int len) throws IOException, JsonGenerationException; private void _writeUTF8Segment2(final byte[] utf8, int offset, int len) throws IOException, JsonGenerationException; protected void _writeBinary(Base64Variant b64variant, byte[] input, int inputPtr, final int inputEnd) throws IOException, JsonGenerationException; protected int _writeBinary(Base64Variant b64variant, InputStream data, byte[] readBuffer, int bytesLeft) throws IOException, JsonGenerationException; protected int _writeBinary(Base64Variant b64variant, InputStream data, byte[] readBuffer) throws IOException, JsonGenerationException; private int _readMore(InputStream in, byte[] readBuffer, int inputPtr, int inputEnd, int maxRead) throws IOException; private int _outputRawMultiByteChar(int ch, char[] cbuf, int inputOffset, int inputLen) throws IOException; protected final void _outputSurrogates(int surr1, int surr2) throws IOException; private int _outputMultiByteChar(int ch, int outputPtr) throws IOException; protected final int _decodeSurrogate(int surr1, int surr2) throws IOException; private void _writeNull() throws IOException; private int _writeGenericEscape(int charToEscape, int outputPtr) throws IOException; protected final void _flushBuffer() throws IOException; byte BYTE_u=Optional[(byte) 'u']; byte BYTE_0=Optional[(byte) '0']; byte BYTE_LBRACKET=Optional[(byte) '[']; byte BYTE_RBRACKET=Optional[(byte) ']']; byte BYTE_LCURLY=Optional[(byte) '{']; byte BYTE_RCURLY=Optional[(byte) '}']; byte BYTE_BACKSLASH=Optional[(byte) '\\']; byte BYTE_COMMA=Optional[(byte) ',']; byte BYTE_COLON=Optional[(byte) ':']; byte BYTE_QUOTE=Optional[(byte) '"']; int SURR1_FIRST=Optional[0xD800]; int SURR1_LAST=Optional[0xDBFF]; int SURR2_FIRST=Optional[0xDC00]; int SURR2_LAST=Optional[0xDFFF]; int MAX_BYTES_TO_BUFFER=Optional[512]; byte[] HEX_CHARS=Optional[CharTypes.copyHexBytes()]; byte[] NULL_BYTES=Optional[{ 'n', 'u', 'l', 'l' }]; byte[] TRUE_BYTES=Optional[{ 't', 'r', 'u', 'e' }]; byte[] FALSE_BYTES=Optional[{ 'f', 'a', 'l', 's', 'e' }
private void _writeLongString(char[] text, int offset, int len) throws IOException, JsonGenerationException { [EOL]     if (_outputTail >= _outputEnd) { [EOL]         _flushBuffer(); [EOL]     } [EOL]     _outputBuffer[_outputTail++] = BYTE_QUOTE; [EOL]     _writeStringSegments(_charBuffer, 0, len); [EOL]     if (_outputTail >= _outputEnd) { [EOL]         _flushBuffer(); [EOL]     } [EOL]     _outputBuffer[_outputTail++] = BYTE_QUOTE; [EOL] } public UTF8JsonGenerator(IOContext ctxt, int features, ObjectCodec codec, OutputStream out); public UTF8JsonGenerator(IOContext ctxt, int features, ObjectCodec codec, OutputStream out, byte[] outputBuffer, int outputOffset, boolean bufferRecyclable); public Object getOutputTarget(); public final void writeFieldName(String name) throws IOException, JsonGenerationException; public final void writeFieldName(SerializableString name) throws IOException, JsonGenerationException; public final void writeStartArray() throws IOException, JsonGenerationException; public final void writeEndArray() throws IOException, JsonGenerationException; public final void writeStartObject() throws IOException, JsonGenerationException; public final void writeEndObject() throws IOException, JsonGenerationException; protected final void _writeFieldName(String name) throws IOException, JsonGenerationException; protected final void _writeFieldName(SerializableString name) throws IOException, JsonGenerationException; protected final void _writePPFieldName(String name, boolean commaBefore) throws IOException, JsonGenerationException; protected final void _writePPFieldName(SerializableString name, boolean commaBefore) throws IOException, JsonGenerationException; public void writeString(String text) throws IOException, JsonGenerationException; private void _writeLongString(String text) throws IOException, JsonGenerationException; private void _writeLongString(char[] text, int offset, int len) throws IOException, JsonGenerationException; public void writeString(char[] text, int offset, int len) throws IOException, JsonGenerationException; public final void writeString(SerializableString text) throws IOException, JsonGenerationException; public void writeRawUTF8String(byte[] text, int offset, int length) throws IOException, JsonGenerationException; public void writeUTF8String(byte[] text, int offset, int len) throws IOException, JsonGenerationException; public void writeRaw(String text) throws IOException, JsonGenerationException; public void writeRaw(String text, int offset, int len) throws IOException, JsonGenerationException; public void writeRaw(SerializableString text) throws IOException, JsonGenerationException; public final void writeRaw(char[] cbuf, int offset, int len) throws IOException, JsonGenerationException; public void writeRaw(char ch) throws IOException, JsonGenerationException; private final void _writeSegmentedRaw(char[] cbuf, int offset, int len) throws IOException, JsonGenerationException; public void writeBinary(Base64Variant b64variant, byte[] data, int offset, int len) throws IOException, JsonGenerationException; public int writeBinary(Base64Variant b64variant, InputStream data, int dataLength) throws IOException, JsonGenerationException; public void writeNumber(short s) throws IOException, JsonGenerationException; private void _writeQuotedShort(short s) throws IOException; public void writeNumber(int i) throws IOException, JsonGenerationException; private void _writeQuotedInt(int i) throws IOException; public void writeNumber(long l) throws IOException, JsonGenerationException; private void _writeQuotedLong(long l) throws IOException; public void writeNumber(BigInteger value) throws IOException, JsonGenerationException; public void writeNumber(double d) throws IOException, JsonGenerationException; public void writeNumber(float f) throws IOException, JsonGenerationException; public void writeNumber(BigDecimal value) throws IOException, JsonGenerationException; public void writeNumber(String encodedValue) throws IOException, JsonGenerationException; private void _writeQuotedRaw(Object value) throws IOException; public void writeBoolean(boolean state) throws IOException, JsonGenerationException; public void writeNull() throws IOException, JsonGenerationException; protected final void _verifyValueWrite(String typeMsg) throws IOException, JsonGenerationException; protected final void _verifyPrettyValueWrite(String typeMsg, int status) throws IOException, JsonGenerationException; public final void flush() throws IOException; public void close() throws IOException; protected void _releaseBuffers(); private final void _writeBytes(byte[] bytes) throws IOException; private final void _writeBytes(byte[] bytes, int offset, int len) throws IOException; private final void _writeStringSegments(String text) throws IOException, JsonGenerationException; private final void _writeStringSegments(char[] cbuf, int offset, int totalLen) throws IOException, JsonGenerationException; private final void _writeStringSegment(char[] cbuf, int offset, int len) throws IOException, JsonGenerationException; private final void _writeStringSegment2(final char[] cbuf, int offset, final int end) throws IOException, JsonGenerationException; private final void _writeStringSegmentASCII2(final char[] cbuf, int offset, final int end) throws IOException, JsonGenerationException; private void _writeCustomStringSegment2(final char[] cbuf, int offset, final int end) throws IOException, JsonGenerationException; private int _writeCustomEscape(byte[] outputBuffer, int outputPtr, SerializableString esc, int remainingChars) throws IOException, JsonGenerationException; private int _handleLongCustomEscape(byte[] outputBuffer, int outputPtr, int outputEnd, byte[] raw, int remainingChars) throws IOException, JsonGenerationException; private void _writeUTF8Segments(byte[] utf8, int offset, int totalLen) throws IOException, JsonGenerationException; private void _writeUTF8Segment(byte[] utf8, final int offset, final int len) throws IOException, JsonGenerationException; private void _writeUTF8Segment2(final byte[] utf8, int offset, int len) throws IOException, JsonGenerationException; protected void _writeBinary(Base64Variant b64variant, byte[] input, int inputPtr, final int inputEnd) throws IOException, JsonGenerationException; protected int _writeBinary(Base64Variant b64variant, InputStream data, byte[] readBuffer, int bytesLeft) throws IOException, JsonGenerationException; protected int _writeBinary(Base64Variant b64variant, InputStream data, byte[] readBuffer) throws IOException, JsonGenerationException; private int _readMore(InputStream in, byte[] readBuffer, int inputPtr, int inputEnd, int maxRead) throws IOException; private int _outputRawMultiByteChar(int ch, char[] cbuf, int inputOffset, int inputLen) throws IOException; protected final void _outputSurrogates(int surr1, int surr2) throws IOException; private int _outputMultiByteChar(int ch, int outputPtr) throws IOException; protected final int _decodeSurrogate(int surr1, int surr2) throws IOException; private void _writeNull() throws IOException; private int _writeGenericEscape(int charToEscape, int outputPtr) throws IOException; protected final void _flushBuffer() throws IOException; byte BYTE_u=Optional[(byte) 'u']; byte BYTE_0=Optional[(byte) '0']; byte BYTE_LBRACKET=Optional[(byte) '[']; byte BYTE_RBRACKET=Optional[(byte) ']']; byte BYTE_LCURLY=Optional[(byte) '{']; byte BYTE_RCURLY=Optional[(byte) '}']; byte BYTE_BACKSLASH=Optional[(byte) '\\']; byte BYTE_COMMA=Optional[(byte) ',']; byte BYTE_COLON=Optional[(byte) ':']; byte BYTE_QUOTE=Optional[(byte) '"']; int SURR1_FIRST=Optional[0xD800]; int SURR1_LAST=Optional[0xDBFF]; int SURR2_FIRST=Optional[0xDC00]; int SURR2_LAST=Optional[0xDFFF]; int MAX_BYTES_TO_BUFFER=Optional[512]; byte[] HEX_CHARS=Optional[CharTypes.copyHexBytes()]; byte[] NULL_BYTES=Optional[{ 'n', 'u', 'l', 'l' }]; byte[] TRUE_BYTES=Optional[{ 't', 'r', 'u', 'e' }]; byte[] FALSE_BYTES=Optional[{ 'f', 'a', 'l', 's', 'e' }
private void _writeLongString(char[] text, int offset, int len) throws IOException, JsonGenerationException { [EOL]     if (_outputTail >= _outputEnd) { [EOL]         _flushBuffer(); [EOL]     } [EOL]     _outputBuffer[_outputTail++] = BYTE_QUOTE; [EOL]     _writeStringSegments(_charBuffer, 0, len); [EOL]     if (_outputTail >= _outputEnd) { [EOL]         _flushBuffer(); [EOL]     } [EOL]     _outputBuffer[_outputTail++] = BYTE_QUOTE; [EOL] } public UTF8JsonGenerator(IOContext ctxt, int features, ObjectCodec codec, OutputStream out); public UTF8JsonGenerator(IOContext ctxt, int features, ObjectCodec codec, OutputStream out, byte[] outputBuffer, int outputOffset, boolean bufferRecyclable); public Object getOutputTarget(); public final void writeFieldName(String name) throws IOException, JsonGenerationException; public final void writeFieldName(SerializableString name) throws IOException, JsonGenerationException; public final void writeStartArray() throws IOException, JsonGenerationException; public final void writeEndArray() throws IOException, JsonGenerationException; public final void writeStartObject() throws IOException, JsonGenerationException; public final void writeEndObject() throws IOException, JsonGenerationException; protected final void _writeFieldName(String name) throws IOException, JsonGenerationException; protected final void _writeFieldName(SerializableString name) throws IOException, JsonGenerationException; protected final void _writePPFieldName(String name, boolean commaBefore) throws IOException, JsonGenerationException; protected final void _writePPFieldName(SerializableString name, boolean commaBefore) throws IOException, JsonGenerationException; public void writeString(String text) throws IOException, JsonGenerationException; private void _writeLongString(String text) throws IOException, JsonGenerationException; private void _writeLongString(char[] text, int offset, int len) throws IOException, JsonGenerationException; public void writeString(char[] text, int offset, int len) throws IOException, JsonGenerationException; public final void writeString(SerializableString text) throws IOException, JsonGenerationException; public void writeRawUTF8String(byte[] text, int offset, int length) throws IOException, JsonGenerationException; public void writeUTF8String(byte[] text, int offset, int len) throws IOException, JsonGenerationException; public void writeRaw(String text) throws IOException, JsonGenerationException; public void writeRaw(String text, int offset, int len) throws IOException, JsonGenerationException; public void writeRaw(SerializableString text) throws IOException, JsonGenerationException; public final void writeRaw(char[] cbuf, int offset, int len) throws IOException, JsonGenerationException; public void writeRaw(char ch) throws IOException, JsonGenerationException; private final void _writeSegmentedRaw(char[] cbuf, int offset, int len) throws IOException, JsonGenerationException; public void writeBinary(Base64Variant b64variant, byte[] data, int offset, int len) throws IOException, JsonGenerationException; public int writeBinary(Base64Variant b64variant, InputStream data, int dataLength) throws IOException, JsonGenerationException; public void writeNumber(short s) throws IOException, JsonGenerationException; private void _writeQuotedShort(short s) throws IOException; public void writeNumber(int i) throws IOException, JsonGenerationException; private void _writeQuotedInt(int i) throws IOException; public void writeNumber(long l) throws IOException, JsonGenerationException; private void _writeQuotedLong(long l) throws IOException; public void writeNumber(BigInteger value) throws IOException, JsonGenerationException; public void writeNumber(double d) throws IOException, JsonGenerationException; public void writeNumber(float f) throws IOException, JsonGenerationException; public void writeNumber(BigDecimal value) throws IOException, JsonGenerationException; public void writeNumber(String encodedValue) throws IOException, JsonGenerationException; private void _writeQuotedRaw(Object value) throws IOException; public void writeBoolean(boolean state) throws IOException, JsonGenerationException; public void writeNull() throws IOException, JsonGenerationException; protected final void _verifyValueWrite(String typeMsg) throws IOException, JsonGenerationException; protected final void _verifyPrettyValueWrite(String typeMsg, int status) throws IOException, JsonGenerationException; public final void flush() throws IOException; public void close() throws IOException; protected void _releaseBuffers(); private final void _writeBytes(byte[] bytes) throws IOException; private final void _writeBytes(byte[] bytes, int offset, int len) throws IOException; private final void _writeStringSegments(String text) throws IOException, JsonGenerationException; private final void _writeStringSegments(char[] cbuf, int offset, int totalLen) throws IOException, JsonGenerationException; private final void _writeStringSegment(char[] cbuf, int offset, int len) throws IOException, JsonGenerationException; private final void _writeStringSegment2(final char[] cbuf, int offset, final int end) throws IOException, JsonGenerationException; private final void _writeStringSegmentASCII2(final char[] cbuf, int offset, final int end) throws IOException, JsonGenerationException; private void _writeCustomStringSegment2(final char[] cbuf, int offset, final int end) throws IOException, JsonGenerationException; private int _writeCustomEscape(byte[] outputBuffer, int outputPtr, SerializableString esc, int remainingChars) throws IOException, JsonGenerationException; private int _handleLongCustomEscape(byte[] outputBuffer, int outputPtr, int outputEnd, byte[] raw, int remainingChars) throws IOException, JsonGenerationException; private void _writeUTF8Segments(byte[] utf8, int offset, int totalLen) throws IOException, JsonGenerationException; private void _writeUTF8Segment(byte[] utf8, final int offset, final int len) throws IOException, JsonGenerationException; private void _writeUTF8Segment2(final byte[] utf8, int offset, int len) throws IOException, JsonGenerationException; protected void _writeBinary(Base64Variant b64variant, byte[] input, int inputPtr, final int inputEnd) throws IOException, JsonGenerationException; protected int _writeBinary(Base64Variant b64variant, InputStream data, byte[] readBuffer, int bytesLeft) throws IOException, JsonGenerationException; protected int _writeBinary(Base64Variant b64variant, InputStream data, byte[] readBuffer) throws IOException, JsonGenerationException; private int _readMore(InputStream in, byte[] readBuffer, int inputPtr, int inputEnd, int maxRead) throws IOException; private int _outputRawMultiByteChar(int ch, char[] cbuf, int inputOffset, int inputLen) throws IOException; protected final void _outputSurrogates(int surr1, int surr2) throws IOException; private int _outputMultiByteChar(int ch, int outputPtr) throws IOException; protected final int _decodeSurrogate(int surr1, int surr2) throws IOException; private void _writeNull() throws IOException; private int _writeGenericEscape(int charToEscape, int outputPtr) throws IOException; protected final void _flushBuffer() throws IOException; byte BYTE_u=Optional[(byte) 'u']; byte BYTE_0=Optional[(byte) '0']; byte BYTE_LBRACKET=Optional[(byte) '[']; byte BYTE_RBRACKET=Optional[(byte) ']']; byte BYTE_LCURLY=Optional[(byte) '{']; byte BYTE_RCURLY=Optional[(byte) '}']; byte BYTE_BACKSLASH=Optional[(byte) '\\']; byte BYTE_COMMA=Optional[(byte) ',']; byte BYTE_COLON=Optional[(byte) ':']; byte BYTE_QUOTE=Optional[(byte) '"']; int SURR1_FIRST=Optional[0xD800]; int SURR1_LAST=Optional[0xDBFF]; int SURR2_FIRST=Optional[0xDC00]; int SURR2_LAST=Optional[0xDFFF]; int MAX_BYTES_TO_BUFFER=Optional[512]; byte[] HEX_CHARS=Optional[CharTypes.copyHexBytes()]; byte[] NULL_BYTES=Optional[{ 'n', 'u', 'l', 'l' }]; byte[] TRUE_BYTES=Optional[{ 't', 'r', 'u', 'e' }]; byte[] FALSE_BYTES=Optional[{ 'f', 'a', 'l', 's', 'e' }
@Override [EOL] public void writeRawUTF8String(byte[] text, int offset, int length) throws IOException, JsonGenerationException { [EOL]     _verifyValueWrite("write text value"); [EOL]     if (_outputTail >= _outputEnd) { [EOL]         _flushBuffer(); [EOL]     } [EOL]     _outputBuffer[_outputTail++] = BYTE_QUOTE; [EOL]     _writeBytes(text, offset, length); [EOL]     if (_outputTail >= _outputEnd) { [EOL]         _flushBuffer(); [EOL]     } [EOL]     _outputBuffer[_outputTail++] = BYTE_QUOTE; [EOL] } public UTF8JsonGenerator(IOContext ctxt, int features, ObjectCodec codec, OutputStream out); public UTF8JsonGenerator(IOContext ctxt, int features, ObjectCodec codec, OutputStream out, byte[] outputBuffer, int outputOffset, boolean bufferRecyclable); public Object getOutputTarget(); public final void writeFieldName(String name) throws IOException, JsonGenerationException; public final void writeFieldName(SerializableString name) throws IOException, JsonGenerationException; public final void writeStartArray() throws IOException, JsonGenerationException; public final void writeEndArray() throws IOException, JsonGenerationException; public final void writeStartObject() throws IOException, JsonGenerationException; public final void writeEndObject() throws IOException, JsonGenerationException; protected final void _writeFieldName(String name) throws IOException, JsonGenerationException; protected final void _writeFieldName(SerializableString name) throws IOException, JsonGenerationException; protected final void _writePPFieldName(String name, boolean commaBefore) throws IOException, JsonGenerationException; protected final void _writePPFieldName(SerializableString name, boolean commaBefore) throws IOException, JsonGenerationException; public void writeString(String text) throws IOException, JsonGenerationException; private void _writeLongString(String text) throws IOException, JsonGenerationException; private void _writeLongString(char[] text, int offset, int len) throws IOException, JsonGenerationException; public void writeString(char[] text, int offset, int len) throws IOException, JsonGenerationException; public final void writeString(SerializableString text) throws IOException, JsonGenerationException; public void writeRawUTF8String(byte[] text, int offset, int length) throws IOException, JsonGenerationException; public void writeUTF8String(byte[] text, int offset, int len) throws IOException, JsonGenerationException; public void writeRaw(String text) throws IOException, JsonGenerationException; public void writeRaw(String text, int offset, int len) throws IOException, JsonGenerationException; public void writeRaw(SerializableString text) throws IOException, JsonGenerationException; public final void writeRaw(char[] cbuf, int offset, int len) throws IOException, JsonGenerationException; public void writeRaw(char ch) throws IOException, JsonGenerationException; private final void _writeSegmentedRaw(char[] cbuf, int offset, int len) throws IOException, JsonGenerationException; public void writeBinary(Base64Variant b64variant, byte[] data, int offset, int len) throws IOException, JsonGenerationException; public int writeBinary(Base64Variant b64variant, InputStream data, int dataLength) throws IOException, JsonGenerationException; public void writeNumber(short s) throws IOException, JsonGenerationException; private void _writeQuotedShort(short s) throws IOException; public void writeNumber(int i) throws IOException, JsonGenerationException; private void _writeQuotedInt(int i) throws IOException; public void writeNumber(long l) throws IOException, JsonGenerationException; private void _writeQuotedLong(long l) throws IOException; public void writeNumber(BigInteger value) throws IOException, JsonGenerationException; public void writeNumber(double d) throws IOException, JsonGenerationException; public void writeNumber(float f) throws IOException, JsonGenerationException; public void writeNumber(BigDecimal value) throws IOException, JsonGenerationException; public void writeNumber(String encodedValue) throws IOException, JsonGenerationException; private void _writeQuotedRaw(Object value) throws IOException; public void writeBoolean(boolean state) throws IOException, JsonGenerationException; public void writeNull() throws IOException, JsonGenerationException; protected final void _verifyValueWrite(String typeMsg) throws IOException, JsonGenerationException; protected final void _verifyPrettyValueWrite(String typeMsg, int status) throws IOException, JsonGenerationException; public final void flush() throws IOException; public void close() throws IOException; protected void _releaseBuffers(); private final void _writeBytes(byte[] bytes) throws IOException; private final void _writeBytes(byte[] bytes, int offset, int len) throws IOException; private final void _writeStringSegments(String text) throws IOException, JsonGenerationException; private final void _writeStringSegments(char[] cbuf, int offset, int totalLen) throws IOException, JsonGenerationException; private final void _writeStringSegment(char[] cbuf, int offset, int len) throws IOException, JsonGenerationException; private final void _writeStringSegment2(final char[] cbuf, int offset, final int end) throws IOException, JsonGenerationException; private final void _writeStringSegmentASCII2(final char[] cbuf, int offset, final int end) throws IOException, JsonGenerationException; private void _writeCustomStringSegment2(final char[] cbuf, int offset, final int end) throws IOException, JsonGenerationException; private int _writeCustomEscape(byte[] outputBuffer, int outputPtr, SerializableString esc, int remainingChars) throws IOException, JsonGenerationException; private int _handleLongCustomEscape(byte[] outputBuffer, int outputPtr, int outputEnd, byte[] raw, int remainingChars) throws IOException, JsonGenerationException; private void _writeUTF8Segments(byte[] utf8, int offset, int totalLen) throws IOException, JsonGenerationException; private void _writeUTF8Segment(byte[] utf8, final int offset, final int len) throws IOException, JsonGenerationException; private void _writeUTF8Segment2(final byte[] utf8, int offset, int len) throws IOException, JsonGenerationException; protected void _writeBinary(Base64Variant b64variant, byte[] input, int inputPtr, final int inputEnd) throws IOException, JsonGenerationException; protected int _writeBinary(Base64Variant b64variant, InputStream data, byte[] readBuffer, int bytesLeft) throws IOException, JsonGenerationException; protected int _writeBinary(Base64Variant b64variant, InputStream data, byte[] readBuffer) throws IOException, JsonGenerationException; private int _readMore(InputStream in, byte[] readBuffer, int inputPtr, int inputEnd, int maxRead) throws IOException; private int _outputRawMultiByteChar(int ch, char[] cbuf, int inputOffset, int inputLen) throws IOException; protected final void _outputSurrogates(int surr1, int surr2) throws IOException; private int _outputMultiByteChar(int ch, int outputPtr) throws IOException; protected final int _decodeSurrogate(int surr1, int surr2) throws IOException; private void _writeNull() throws IOException; private int _writeGenericEscape(int charToEscape, int outputPtr) throws IOException; protected final void _flushBuffer() throws IOException; byte BYTE_u=Optional[(byte) 'u']; byte BYTE_0=Optional[(byte) '0']; byte BYTE_LBRACKET=Optional[(byte) '[']; byte BYTE_RBRACKET=Optional[(byte) ']']; byte BYTE_LCURLY=Optional[(byte) '{']; byte BYTE_RCURLY=Optional[(byte) '}']; byte BYTE_BACKSLASH=Optional[(byte) '\\']; byte BYTE_COMMA=Optional[(byte) ',']; byte BYTE_COLON=Optional[(byte) ':']; byte BYTE_QUOTE=Optional[(byte) '"']; int SURR1_FIRST=Optional[0xD800]; int SURR1_LAST=Optional[0xDBFF]; int SURR2_FIRST=Optional[0xDC00]; int SURR2_LAST=Optional[0xDFFF]; int MAX_BYTES_TO_BUFFER=Optional[512]; byte[] HEX_CHARS=Optional[CharTypes.copyHexBytes()]; byte[] NULL_BYTES=Optional[{ 'n', 'u', 'l', 'l' }]; byte[] TRUE_BYTES=Optional[{ 't', 'r', 'u', 'e' }]; byte[] FALSE_BYTES=Optional[{ 'f', 'a', 'l', 's', 'e' }
@Override [EOL] protected final void _verifyValueWrite(String typeMsg) throws IOException, JsonGenerationException { [EOL]     int status = _writeContext.writeValue(); [EOL]     if (status == JsonWriteContext.STATUS_EXPECT_NAME) { [EOL]         _reportError("Can not " + typeMsg + ", expecting field name"); [EOL]     } [EOL]     if (_cfgPrettyPrinter == null) { [EOL]         byte b; [EOL]         switch(status) { [EOL]             case JsonWriteContext.STATUS_OK_AFTER_COMMA: [EOL]                 b = BYTE_COMMA; [EOL]                 break; [EOL]             case JsonWriteContext.STATUS_OK_AFTER_COLON: [EOL]                 b = BYTE_COLON; [EOL]                 break; [EOL]             case JsonWriteContext.STATUS_OK_AFTER_SPACE: [EOL]                 if (_rootValueSeparator != null) { [EOL]                     byte[] raw = _rootValueSeparator.asUnquotedUTF8(); [EOL]                     if (raw.length > 0) { [EOL]                         _writeBytes(raw); [EOL]                     } [EOL]                 } [EOL]                 return; [EOL]             case JsonWriteContext.STATUS_OK_AS_IS: [EOL]             default: [EOL]                 return; [EOL]         } [EOL]         if (_outputTail >= _outputEnd) { [EOL]             _flushBuffer(); [EOL]         } [EOL]         _outputBuffer[_outputTail] = b; [EOL]         ++_outputTail; [EOL]         return; [EOL]     } [EOL]     _verifyPrettyValueWrite(typeMsg, status); [EOL] } public UTF8JsonGenerator(IOContext ctxt, int features, ObjectCodec codec, OutputStream out); public UTF8JsonGenerator(IOContext ctxt, int features, ObjectCodec codec, OutputStream out, byte[] outputBuffer, int outputOffset, boolean bufferRecyclable); public Object getOutputTarget(); public final void writeFieldName(String name) throws IOException, JsonGenerationException; public final void writeFieldName(SerializableString name) throws IOException, JsonGenerationException; public final void writeStartArray() throws IOException, JsonGenerationException; public final void writeEndArray() throws IOException, JsonGenerationException; public final void writeStartObject() throws IOException, JsonGenerationException; public final void writeEndObject() throws IOException, JsonGenerationException; protected final void _writeFieldName(String name) throws IOException, JsonGenerationException; protected final void _writeFieldName(SerializableString name) throws IOException, JsonGenerationException; protected final void _writePPFieldName(String name, boolean commaBefore) throws IOException, JsonGenerationException; protected final void _writePPFieldName(SerializableString name, boolean commaBefore) throws IOException, JsonGenerationException; public void writeString(String text) throws IOException, JsonGenerationException; private void _writeLongString(String text) throws IOException, JsonGenerationException; private void _writeLongString(char[] text, int offset, int len) throws IOException, JsonGenerationException; public void writeString(char[] text, int offset, int len) throws IOException, JsonGenerationException; public final void writeString(SerializableString text) throws IOException, JsonGenerationException; public void writeRawUTF8String(byte[] text, int offset, int length) throws IOException, JsonGenerationException; public void writeUTF8String(byte[] text, int offset, int len) throws IOException, JsonGenerationException; public void writeRaw(String text) throws IOException, JsonGenerationException; public void writeRaw(String text, int offset, int len) throws IOException, JsonGenerationException; public void writeRaw(SerializableString text) throws IOException, JsonGenerationException; public final void writeRaw(char[] cbuf, int offset, int len) throws IOException, JsonGenerationException; public void writeRaw(char ch) throws IOException, JsonGenerationException; private final void _writeSegmentedRaw(char[] cbuf, int offset, int len) throws IOException, JsonGenerationException; public void writeBinary(Base64Variant b64variant, byte[] data, int offset, int len) throws IOException, JsonGenerationException; public int writeBinary(Base64Variant b64variant, InputStream data, int dataLength) throws IOException, JsonGenerationException; public void writeNumber(short s) throws IOException, JsonGenerationException; private void _writeQuotedShort(short s) throws IOException; public void writeNumber(int i) throws IOException, JsonGenerationException; private void _writeQuotedInt(int i) throws IOException; public void writeNumber(long l) throws IOException, JsonGenerationException; private void _writeQuotedLong(long l) throws IOException; public void writeNumber(BigInteger value) throws IOException, JsonGenerationException; public void writeNumber(double d) throws IOException, JsonGenerationException; public void writeNumber(float f) throws IOException, JsonGenerationException; public void writeNumber(BigDecimal value) throws IOException, JsonGenerationException; public void writeNumber(String encodedValue) throws IOException, JsonGenerationException; private void _writeQuotedRaw(Object value) throws IOException; public void writeBoolean(boolean state) throws IOException, JsonGenerationException; public void writeNull() throws IOException, JsonGenerationException; protected final void _verifyValueWrite(String typeMsg) throws IOException, JsonGenerationException; protected final void _verifyPrettyValueWrite(String typeMsg, int status) throws IOException, JsonGenerationException; public final void flush() throws IOException; public void close() throws IOException; protected void _releaseBuffers(); private final void _writeBytes(byte[] bytes) throws IOException; private final void _writeBytes(byte[] bytes, int offset, int len) throws IOException; private final void _writeStringSegments(String text) throws IOException, JsonGenerationException; private final void _writeStringSegments(char[] cbuf, int offset, int totalLen) throws IOException, JsonGenerationException; private final void _writeStringSegment(char[] cbuf, int offset, int len) throws IOException, JsonGenerationException; private final void _writeStringSegment2(final char[] cbuf, int offset, final int end) throws IOException, JsonGenerationException; private final void _writeStringSegmentASCII2(final char[] cbuf, int offset, final int end) throws IOException, JsonGenerationException; private void _writeCustomStringSegment2(final char[] cbuf, int offset, final int end) throws IOException, JsonGenerationException; private int _writeCustomEscape(byte[] outputBuffer, int outputPtr, SerializableString esc, int remainingChars) throws IOException, JsonGenerationException; private int _handleLongCustomEscape(byte[] outputBuffer, int outputPtr, int outputEnd, byte[] raw, int remainingChars) throws IOException, JsonGenerationException; private void _writeUTF8Segments(byte[] utf8, int offset, int totalLen) throws IOException, JsonGenerationException; private void _writeUTF8Segment(byte[] utf8, final int offset, final int len) throws IOException, JsonGenerationException; private void _writeUTF8Segment2(final byte[] utf8, int offset, int len) throws IOException, JsonGenerationException; protected void _writeBinary(Base64Variant b64variant, byte[] input, int inputPtr, final int inputEnd) throws IOException, JsonGenerationException; protected int _writeBinary(Base64Variant b64variant, InputStream data, byte[] readBuffer, int bytesLeft) throws IOException, JsonGenerationException; protected int _writeBinary(Base64Variant b64variant, InputStream data, byte[] readBuffer) throws IOException, JsonGenerationException; private int _readMore(InputStream in, byte[] readBuffer, int inputPtr, int inputEnd, int maxRead) throws IOException; private int _outputRawMultiByteChar(int ch, char[] cbuf, int inputOffset, int inputLen) throws IOException; protected final void _outputSurrogates(int surr1, int surr2) throws IOException; private int _outputMultiByteChar(int ch, int outputPtr) throws IOException; protected final int _decodeSurrogate(int surr1, int surr2) throws IOException; private void _writeNull() throws IOException; private int _writeGenericEscape(int charToEscape, int outputPtr) throws IOException; protected final void _flushBuffer() throws IOException; byte BYTE_u=Optional[(byte) 'u']; byte BYTE_0=Optional[(byte) '0']; byte BYTE_LBRACKET=Optional[(byte) '[']; byte BYTE_RBRACKET=Optional[(byte) ']']; byte BYTE_LCURLY=Optional[(byte) '{']; byte BYTE_RCURLY=Optional[(byte) '}']; byte BYTE_BACKSLASH=Optional[(byte) '\\']; byte BYTE_COMMA=Optional[(byte) ',']; byte BYTE_COLON=Optional[(byte) ':']; byte BYTE_QUOTE=Optional[(byte) '"']; int SURR1_FIRST=Optional[0xD800]; int SURR1_LAST=Optional[0xDBFF]; int SURR2_FIRST=Optional[0xDC00]; int SURR2_LAST=Optional[0xDFFF]; int MAX_BYTES_TO_BUFFER=Optional[512]; byte[] HEX_CHARS=Optional[CharTypes.copyHexBytes()]; byte[] NULL_BYTES=Optional[{ 'n', 'u', 'l', 'l' }]; byte[] TRUE_BYTES=Optional[{ 't', 'r', 'u', 'e' }]; byte[] FALSE_BYTES=Optional[{ 'f', 'a', 'l', 's', 'e' }
@Override [EOL] public void close() throws IOException { [EOL]     super.close(); [EOL]     if (_outputBuffer != null && isEnabled(Feature.AUTO_CLOSE_JSON_CONTENT)) { [EOL]         while (true) { [EOL]             JsonStreamContext ctxt = getOutputContext(); [EOL]             if (ctxt.inArray()) { [EOL]                 writeEndArray(); [EOL]             } else if (ctxt.inObject()) { [EOL]                 writeEndObject(); [EOL]             } else { [EOL]                 break; [EOL]             } [EOL]         } [EOL]     } [EOL]     _flushBuffer(); [EOL]     if (_outputStream != null) { [EOL]         if (_ioContext.isResourceManaged() || isEnabled(Feature.AUTO_CLOSE_TARGET)) { [EOL]             _outputStream.close(); [EOL]         } else if (isEnabled(Feature.FLUSH_PASSED_TO_STREAM)) { [EOL]             _outputStream.flush(); [EOL]         } [EOL]     } [EOL]     _releaseBuffers(); [EOL] } public UTF8JsonGenerator(IOContext ctxt, int features, ObjectCodec codec, OutputStream out); public UTF8JsonGenerator(IOContext ctxt, int features, ObjectCodec codec, OutputStream out, byte[] outputBuffer, int outputOffset, boolean bufferRecyclable); public Object getOutputTarget(); public final void writeFieldName(String name) throws IOException, JsonGenerationException; public final void writeFieldName(SerializableString name) throws IOException, JsonGenerationException; public final void writeStartArray() throws IOException, JsonGenerationException; public final void writeEndArray() throws IOException, JsonGenerationException; public final void writeStartObject() throws IOException, JsonGenerationException; public final void writeEndObject() throws IOException, JsonGenerationException; protected final void _writeFieldName(String name) throws IOException, JsonGenerationException; protected final void _writeFieldName(SerializableString name) throws IOException, JsonGenerationException; protected final void _writePPFieldName(String name, boolean commaBefore) throws IOException, JsonGenerationException; protected final void _writePPFieldName(SerializableString name, boolean commaBefore) throws IOException, JsonGenerationException; public void writeString(String text) throws IOException, JsonGenerationException; private void _writeLongString(String text) throws IOException, JsonGenerationException; private void _writeLongString(char[] text, int offset, int len) throws IOException, JsonGenerationException; public void writeString(char[] text, int offset, int len) throws IOException, JsonGenerationException; public final void writeString(SerializableString text) throws IOException, JsonGenerationException; public void writeRawUTF8String(byte[] text, int offset, int length) throws IOException, JsonGenerationException; public void writeUTF8String(byte[] text, int offset, int len) throws IOException, JsonGenerationException; public void writeRaw(String text) throws IOException, JsonGenerationException; public void writeRaw(String text, int offset, int len) throws IOException, JsonGenerationException; public void writeRaw(SerializableString text) throws IOException, JsonGenerationException; public final void writeRaw(char[] cbuf, int offset, int len) throws IOException, JsonGenerationException; public void writeRaw(char ch) throws IOException, JsonGenerationException; private final void _writeSegmentedRaw(char[] cbuf, int offset, int len) throws IOException, JsonGenerationException; public void writeBinary(Base64Variant b64variant, byte[] data, int offset, int len) throws IOException, JsonGenerationException; public int writeBinary(Base64Variant b64variant, InputStream data, int dataLength) throws IOException, JsonGenerationException; public void writeNumber(short s) throws IOException, JsonGenerationException; private void _writeQuotedShort(short s) throws IOException; public void writeNumber(int i) throws IOException, JsonGenerationException; private void _writeQuotedInt(int i) throws IOException; public void writeNumber(long l) throws IOException, JsonGenerationException; private void _writeQuotedLong(long l) throws IOException; public void writeNumber(BigInteger value) throws IOException, JsonGenerationException; public void writeNumber(double d) throws IOException, JsonGenerationException; public void writeNumber(float f) throws IOException, JsonGenerationException; public void writeNumber(BigDecimal value) throws IOException, JsonGenerationException; public void writeNumber(String encodedValue) throws IOException, JsonGenerationException; private void _writeQuotedRaw(Object value) throws IOException; public void writeBoolean(boolean state) throws IOException, JsonGenerationException; public void writeNull() throws IOException, JsonGenerationException; protected final void _verifyValueWrite(String typeMsg) throws IOException, JsonGenerationException; protected final void _verifyPrettyValueWrite(String typeMsg, int status) throws IOException, JsonGenerationException; public final void flush() throws IOException; public void close() throws IOException; protected void _releaseBuffers(); private final void _writeBytes(byte[] bytes) throws IOException; private final void _writeBytes(byte[] bytes, int offset, int len) throws IOException; private final void _writeStringSegments(String text) throws IOException, JsonGenerationException; private final void _writeStringSegments(char[] cbuf, int offset, int totalLen) throws IOException, JsonGenerationException; private final void _writeStringSegment(char[] cbuf, int offset, int len) throws IOException, JsonGenerationException; private final void _writeStringSegment2(final char[] cbuf, int offset, final int end) throws IOException, JsonGenerationException; private final void _writeStringSegmentASCII2(final char[] cbuf, int offset, final int end) throws IOException, JsonGenerationException; private void _writeCustomStringSegment2(final char[] cbuf, int offset, final int end) throws IOException, JsonGenerationException; private int _writeCustomEscape(byte[] outputBuffer, int outputPtr, SerializableString esc, int remainingChars) throws IOException, JsonGenerationException; private int _handleLongCustomEscape(byte[] outputBuffer, int outputPtr, int outputEnd, byte[] raw, int remainingChars) throws IOException, JsonGenerationException; private void _writeUTF8Segments(byte[] utf8, int offset, int totalLen) throws IOException, JsonGenerationException; private void _writeUTF8Segment(byte[] utf8, final int offset, final int len) throws IOException, JsonGenerationException; private void _writeUTF8Segment2(final byte[] utf8, int offset, int len) throws IOException, JsonGenerationException; protected void _writeBinary(Base64Variant b64variant, byte[] input, int inputPtr, final int inputEnd) throws IOException, JsonGenerationException; protected int _writeBinary(Base64Variant b64variant, InputStream data, byte[] readBuffer, int bytesLeft) throws IOException, JsonGenerationException; protected int _writeBinary(Base64Variant b64variant, InputStream data, byte[] readBuffer) throws IOException, JsonGenerationException; private int _readMore(InputStream in, byte[] readBuffer, int inputPtr, int inputEnd, int maxRead) throws IOException; private int _outputRawMultiByteChar(int ch, char[] cbuf, int inputOffset, int inputLen) throws IOException; protected final void _outputSurrogates(int surr1, int surr2) throws IOException; private int _outputMultiByteChar(int ch, int outputPtr) throws IOException; protected final int _decodeSurrogate(int surr1, int surr2) throws IOException; private void _writeNull() throws IOException; private int _writeGenericEscape(int charToEscape, int outputPtr) throws IOException; protected final void _flushBuffer() throws IOException; byte BYTE_u=Optional[(byte) 'u']; byte BYTE_0=Optional[(byte) '0']; byte BYTE_LBRACKET=Optional[(byte) '[']; byte BYTE_RBRACKET=Optional[(byte) ']']; byte BYTE_LCURLY=Optional[(byte) '{']; byte BYTE_RCURLY=Optional[(byte) '}']; byte BYTE_BACKSLASH=Optional[(byte) '\\']; byte BYTE_COMMA=Optional[(byte) ',']; byte BYTE_COLON=Optional[(byte) ':']; byte BYTE_QUOTE=Optional[(byte) '"']; int SURR1_FIRST=Optional[0xD800]; int SURR1_LAST=Optional[0xDBFF]; int SURR2_FIRST=Optional[0xDC00]; int SURR2_LAST=Optional[0xDFFF]; int MAX_BYTES_TO_BUFFER=Optional[512]; byte[] HEX_CHARS=Optional[CharTypes.copyHexBytes()]; byte[] NULL_BYTES=Optional[{ 'n', 'u', 'l', 'l' }]; byte[] TRUE_BYTES=Optional[{ 't', 'r', 'u', 'e' }]; byte[] FALSE_BYTES=Optional[{ 'f', 'a', 'l', 's', 'e' }
@Override [EOL] public void close() throws IOException { [EOL]     super.close(); [EOL]     if (_outputBuffer != null && isEnabled(Feature.AUTO_CLOSE_JSON_CONTENT)) { [EOL]         while (true) { [EOL]             JsonStreamContext ctxt = getOutputContext(); [EOL]             if (ctxt.inArray()) { [EOL]                 writeEndArray(); [EOL]             } else if (ctxt.inObject()) { [EOL]                 writeEndObject(); [EOL]             } else { [EOL]                 break; [EOL]             } [EOL]         } [EOL]     } [EOL]     _flushBuffer(); [EOL]     if (_outputStream != null) { [EOL]         if (_ioContext.isResourceManaged() || isEnabled(Feature.AUTO_CLOSE_TARGET)) { [EOL]             _outputStream.close(); [EOL]         } else if (isEnabled(Feature.FLUSH_PASSED_TO_STREAM)) { [EOL]             _outputStream.flush(); [EOL]         } [EOL]     } [EOL]     _releaseBuffers(); [EOL] } public UTF8JsonGenerator(IOContext ctxt, int features, ObjectCodec codec, OutputStream out); public UTF8JsonGenerator(IOContext ctxt, int features, ObjectCodec codec, OutputStream out, byte[] outputBuffer, int outputOffset, boolean bufferRecyclable); public Object getOutputTarget(); public final void writeFieldName(String name) throws IOException, JsonGenerationException; public final void writeFieldName(SerializableString name) throws IOException, JsonGenerationException; public final void writeStartArray() throws IOException, JsonGenerationException; public final void writeEndArray() throws IOException, JsonGenerationException; public final void writeStartObject() throws IOException, JsonGenerationException; public final void writeEndObject() throws IOException, JsonGenerationException; protected final void _writeFieldName(String name) throws IOException, JsonGenerationException; protected final void _writeFieldName(SerializableString name) throws IOException, JsonGenerationException; protected final void _writePPFieldName(String name, boolean commaBefore) throws IOException, JsonGenerationException; protected final void _writePPFieldName(SerializableString name, boolean commaBefore) throws IOException, JsonGenerationException; public void writeString(String text) throws IOException, JsonGenerationException; private void _writeLongString(String text) throws IOException, JsonGenerationException; private void _writeLongString(char[] text, int offset, int len) throws IOException, JsonGenerationException; public void writeString(char[] text, int offset, int len) throws IOException, JsonGenerationException; public final void writeString(SerializableString text) throws IOException, JsonGenerationException; public void writeRawUTF8String(byte[] text, int offset, int length) throws IOException, JsonGenerationException; public void writeUTF8String(byte[] text, int offset, int len) throws IOException, JsonGenerationException; public void writeRaw(String text) throws IOException, JsonGenerationException; public void writeRaw(String text, int offset, int len) throws IOException, JsonGenerationException; public void writeRaw(SerializableString text) throws IOException, JsonGenerationException; public final void writeRaw(char[] cbuf, int offset, int len) throws IOException, JsonGenerationException; public void writeRaw(char ch) throws IOException, JsonGenerationException; private final void _writeSegmentedRaw(char[] cbuf, int offset, int len) throws IOException, JsonGenerationException; public void writeBinary(Base64Variant b64variant, byte[] data, int offset, int len) throws IOException, JsonGenerationException; public int writeBinary(Base64Variant b64variant, InputStream data, int dataLength) throws IOException, JsonGenerationException; public void writeNumber(short s) throws IOException, JsonGenerationException; private void _writeQuotedShort(short s) throws IOException; public void writeNumber(int i) throws IOException, JsonGenerationException; private void _writeQuotedInt(int i) throws IOException; public void writeNumber(long l) throws IOException, JsonGenerationException; private void _writeQuotedLong(long l) throws IOException; public void writeNumber(BigInteger value) throws IOException, JsonGenerationException; public void writeNumber(double d) throws IOException, JsonGenerationException; public void writeNumber(float f) throws IOException, JsonGenerationException; public void writeNumber(BigDecimal value) throws IOException, JsonGenerationException; public void writeNumber(String encodedValue) throws IOException, JsonGenerationException; private void _writeQuotedRaw(Object value) throws IOException; public void writeBoolean(boolean state) throws IOException, JsonGenerationException; public void writeNull() throws IOException, JsonGenerationException; protected final void _verifyValueWrite(String typeMsg) throws IOException, JsonGenerationException; protected final void _verifyPrettyValueWrite(String typeMsg, int status) throws IOException, JsonGenerationException; public final void flush() throws IOException; public void close() throws IOException; protected void _releaseBuffers(); private final void _writeBytes(byte[] bytes) throws IOException; private final void _writeBytes(byte[] bytes, int offset, int len) throws IOException; private final void _writeStringSegments(String text) throws IOException, JsonGenerationException; private final void _writeStringSegments(char[] cbuf, int offset, int totalLen) throws IOException, JsonGenerationException; private final void _writeStringSegment(char[] cbuf, int offset, int len) throws IOException, JsonGenerationException; private final void _writeStringSegment2(final char[] cbuf, int offset, final int end) throws IOException, JsonGenerationException; private final void _writeStringSegmentASCII2(final char[] cbuf, int offset, final int end) throws IOException, JsonGenerationException; private void _writeCustomStringSegment2(final char[] cbuf, int offset, final int end) throws IOException, JsonGenerationException; private int _writeCustomEscape(byte[] outputBuffer, int outputPtr, SerializableString esc, int remainingChars) throws IOException, JsonGenerationException; private int _handleLongCustomEscape(byte[] outputBuffer, int outputPtr, int outputEnd, byte[] raw, int remainingChars) throws IOException, JsonGenerationException; private void _writeUTF8Segments(byte[] utf8, int offset, int totalLen) throws IOException, JsonGenerationException; private void _writeUTF8Segment(byte[] utf8, final int offset, final int len) throws IOException, JsonGenerationException; private void _writeUTF8Segment2(final byte[] utf8, int offset, int len) throws IOException, JsonGenerationException; protected void _writeBinary(Base64Variant b64variant, byte[] input, int inputPtr, final int inputEnd) throws IOException, JsonGenerationException; protected int _writeBinary(Base64Variant b64variant, InputStream data, byte[] readBuffer, int bytesLeft) throws IOException, JsonGenerationException; protected int _writeBinary(Base64Variant b64variant, InputStream data, byte[] readBuffer) throws IOException, JsonGenerationException; private int _readMore(InputStream in, byte[] readBuffer, int inputPtr, int inputEnd, int maxRead) throws IOException; private int _outputRawMultiByteChar(int ch, char[] cbuf, int inputOffset, int inputLen) throws IOException; protected final void _outputSurrogates(int surr1, int surr2) throws IOException; private int _outputMultiByteChar(int ch, int outputPtr) throws IOException; protected final int _decodeSurrogate(int surr1, int surr2) throws IOException; private void _writeNull() throws IOException; private int _writeGenericEscape(int charToEscape, int outputPtr) throws IOException; protected final void _flushBuffer() throws IOException; byte BYTE_u=Optional[(byte) 'u']; byte BYTE_0=Optional[(byte) '0']; byte BYTE_LBRACKET=Optional[(byte) '[']; byte BYTE_RBRACKET=Optional[(byte) ']']; byte BYTE_LCURLY=Optional[(byte) '{']; byte BYTE_RCURLY=Optional[(byte) '}']; byte BYTE_BACKSLASH=Optional[(byte) '\\']; byte BYTE_COMMA=Optional[(byte) ',']; byte BYTE_COLON=Optional[(byte) ':']; byte BYTE_QUOTE=Optional[(byte) '"']; int SURR1_FIRST=Optional[0xD800]; int SURR1_LAST=Optional[0xDBFF]; int SURR2_FIRST=Optional[0xDC00]; int SURR2_LAST=Optional[0xDFFF]; int MAX_BYTES_TO_BUFFER=Optional[512]; byte[] HEX_CHARS=Optional[CharTypes.copyHexBytes()]; byte[] NULL_BYTES=Optional[{ 'n', 'u', 'l', 'l' }]; byte[] TRUE_BYTES=Optional[{ 't', 'r', 'u', 'e' }]; byte[] FALSE_BYTES=Optional[{ 'f', 'a', 'l', 's', 'e' }
private final void _writeBytes(byte[] bytes, int offset, int len) throws IOException { [EOL]     if ((_outputTail + len) > _outputEnd) { [EOL]         _flushBuffer(); [EOL]         if (len > MAX_BYTES_TO_BUFFER) { [EOL]             _outputStream.write(bytes, offset, len); [EOL]             return; [EOL]         } [EOL]     } [EOL]     System.arraycopy(bytes, offset, _outputBuffer, _outputTail, len); [EOL]     _outputTail += len; [EOL] } public UTF8JsonGenerator(IOContext ctxt, int features, ObjectCodec codec, OutputStream out); public UTF8JsonGenerator(IOContext ctxt, int features, ObjectCodec codec, OutputStream out, byte[] outputBuffer, int outputOffset, boolean bufferRecyclable); public Object getOutputTarget(); public final void writeFieldName(String name) throws IOException, JsonGenerationException; public final void writeFieldName(SerializableString name) throws IOException, JsonGenerationException; public final void writeStartArray() throws IOException, JsonGenerationException; public final void writeEndArray() throws IOException, JsonGenerationException; public final void writeStartObject() throws IOException, JsonGenerationException; public final void writeEndObject() throws IOException, JsonGenerationException; protected final void _writeFieldName(String name) throws IOException, JsonGenerationException; protected final void _writeFieldName(SerializableString name) throws IOException, JsonGenerationException; protected final void _writePPFieldName(String name, boolean commaBefore) throws IOException, JsonGenerationException; protected final void _writePPFieldName(SerializableString name, boolean commaBefore) throws IOException, JsonGenerationException; public void writeString(String text) throws IOException, JsonGenerationException; private void _writeLongString(String text) throws IOException, JsonGenerationException; private void _writeLongString(char[] text, int offset, int len) throws IOException, JsonGenerationException; public void writeString(char[] text, int offset, int len) throws IOException, JsonGenerationException; public final void writeString(SerializableString text) throws IOException, JsonGenerationException; public void writeRawUTF8String(byte[] text, int offset, int length) throws IOException, JsonGenerationException; public void writeUTF8String(byte[] text, int offset, int len) throws IOException, JsonGenerationException; public void writeRaw(String text) throws IOException, JsonGenerationException; public void writeRaw(String text, int offset, int len) throws IOException, JsonGenerationException; public void writeRaw(SerializableString text) throws IOException, JsonGenerationException; public final void writeRaw(char[] cbuf, int offset, int len) throws IOException, JsonGenerationException; public void writeRaw(char ch) throws IOException, JsonGenerationException; private final void _writeSegmentedRaw(char[] cbuf, int offset, int len) throws IOException, JsonGenerationException; public void writeBinary(Base64Variant b64variant, byte[] data, int offset, int len) throws IOException, JsonGenerationException; public int writeBinary(Base64Variant b64variant, InputStream data, int dataLength) throws IOException, JsonGenerationException; public void writeNumber(short s) throws IOException, JsonGenerationException; private void _writeQuotedShort(short s) throws IOException; public void writeNumber(int i) throws IOException, JsonGenerationException; private void _writeQuotedInt(int i) throws IOException; public void writeNumber(long l) throws IOException, JsonGenerationException; private void _writeQuotedLong(long l) throws IOException; public void writeNumber(BigInteger value) throws IOException, JsonGenerationException; public void writeNumber(double d) throws IOException, JsonGenerationException; public void writeNumber(float f) throws IOException, JsonGenerationException; public void writeNumber(BigDecimal value) throws IOException, JsonGenerationException; public void writeNumber(String encodedValue) throws IOException, JsonGenerationException; private void _writeQuotedRaw(Object value) throws IOException; public void writeBoolean(boolean state) throws IOException, JsonGenerationException; public void writeNull() throws IOException, JsonGenerationException; protected final void _verifyValueWrite(String typeMsg) throws IOException, JsonGenerationException; protected final void _verifyPrettyValueWrite(String typeMsg, int status) throws IOException, JsonGenerationException; public final void flush() throws IOException; public void close() throws IOException; protected void _releaseBuffers(); private final void _writeBytes(byte[] bytes) throws IOException; private final void _writeBytes(byte[] bytes, int offset, int len) throws IOException; private final void _writeStringSegments(String text) throws IOException, JsonGenerationException; private final void _writeStringSegments(char[] cbuf, int offset, int totalLen) throws IOException, JsonGenerationException; private final void _writeStringSegment(char[] cbuf, int offset, int len) throws IOException, JsonGenerationException; private final void _writeStringSegment2(final char[] cbuf, int offset, final int end) throws IOException, JsonGenerationException; private final void _writeStringSegmentASCII2(final char[] cbuf, int offset, final int end) throws IOException, JsonGenerationException; private void _writeCustomStringSegment2(final char[] cbuf, int offset, final int end) throws IOException, JsonGenerationException; private int _writeCustomEscape(byte[] outputBuffer, int outputPtr, SerializableString esc, int remainingChars) throws IOException, JsonGenerationException; private int _handleLongCustomEscape(byte[] outputBuffer, int outputPtr, int outputEnd, byte[] raw, int remainingChars) throws IOException, JsonGenerationException; private void _writeUTF8Segments(byte[] utf8, int offset, int totalLen) throws IOException, JsonGenerationException; private void _writeUTF8Segment(byte[] utf8, final int offset, final int len) throws IOException, JsonGenerationException; private void _writeUTF8Segment2(final byte[] utf8, int offset, int len) throws IOException, JsonGenerationException; protected void _writeBinary(Base64Variant b64variant, byte[] input, int inputPtr, final int inputEnd) throws IOException, JsonGenerationException; protected int _writeBinary(Base64Variant b64variant, InputStream data, byte[] readBuffer, int bytesLeft) throws IOException, JsonGenerationException; protected int _writeBinary(Base64Variant b64variant, InputStream data, byte[] readBuffer) throws IOException, JsonGenerationException; private int _readMore(InputStream in, byte[] readBuffer, int inputPtr, int inputEnd, int maxRead) throws IOException; private int _outputRawMultiByteChar(int ch, char[] cbuf, int inputOffset, int inputLen) throws IOException; protected final void _outputSurrogates(int surr1, int surr2) throws IOException; private int _outputMultiByteChar(int ch, int outputPtr) throws IOException; protected final int _decodeSurrogate(int surr1, int surr2) throws IOException; private void _writeNull() throws IOException; private int _writeGenericEscape(int charToEscape, int outputPtr) throws IOException; protected final void _flushBuffer() throws IOException; byte BYTE_u=Optional[(byte) 'u']; byte BYTE_0=Optional[(byte) '0']; byte BYTE_LBRACKET=Optional[(byte) '[']; byte BYTE_RBRACKET=Optional[(byte) ']']; byte BYTE_LCURLY=Optional[(byte) '{']; byte BYTE_RCURLY=Optional[(byte) '}']; byte BYTE_BACKSLASH=Optional[(byte) '\\']; byte BYTE_COMMA=Optional[(byte) ',']; byte BYTE_COLON=Optional[(byte) ':']; byte BYTE_QUOTE=Optional[(byte) '"']; int SURR1_FIRST=Optional[0xD800]; int SURR1_LAST=Optional[0xDBFF]; int SURR2_FIRST=Optional[0xDC00]; int SURR2_LAST=Optional[0xDFFF]; int MAX_BYTES_TO_BUFFER=Optional[512]; byte[] HEX_CHARS=Optional[CharTypes.copyHexBytes()]; byte[] NULL_BYTES=Optional[{ 'n', 'u', 'l', 'l' }]; byte[] TRUE_BYTES=Optional[{ 't', 'r', 'u', 'e' }]; byte[] FALSE_BYTES=Optional[{ 'f', 'a', 'l', 's', 'e' }
private final void _writeStringSegments(String text) throws IOException, JsonGenerationException { [EOL]     int left = text.length(); [EOL]     int offset = 0; [EOL]     final char[] cbuf = _charBuffer; [EOL]     while (left > 0) { [EOL]         int len = Math.min(_outputMaxContiguous, left); [EOL]         text.getChars(offset, offset + len, cbuf, 0); [EOL]         if ((_outputTail + len) > _outputEnd) { [EOL]             _flushBuffer(); [EOL]         } [EOL]         _writeStringSegment(cbuf, 0, len); [EOL]         offset += len; [EOL]         left -= len; [EOL]     } [EOL] } public UTF8JsonGenerator(IOContext ctxt, int features, ObjectCodec codec, OutputStream out); public UTF8JsonGenerator(IOContext ctxt, int features, ObjectCodec codec, OutputStream out, byte[] outputBuffer, int outputOffset, boolean bufferRecyclable); public Object getOutputTarget(); public final void writeFieldName(String name) throws IOException, JsonGenerationException; public final void writeFieldName(SerializableString name) throws IOException, JsonGenerationException; public final void writeStartArray() throws IOException, JsonGenerationException; public final void writeEndArray() throws IOException, JsonGenerationException; public final void writeStartObject() throws IOException, JsonGenerationException; public final void writeEndObject() throws IOException, JsonGenerationException; protected final void _writeFieldName(String name) throws IOException, JsonGenerationException; protected final void _writeFieldName(SerializableString name) throws IOException, JsonGenerationException; protected final void _writePPFieldName(String name, boolean commaBefore) throws IOException, JsonGenerationException; protected final void _writePPFieldName(SerializableString name, boolean commaBefore) throws IOException, JsonGenerationException; public void writeString(String text) throws IOException, JsonGenerationException; private void _writeLongString(String text) throws IOException, JsonGenerationException; private void _writeLongString(char[] text, int offset, int len) throws IOException, JsonGenerationException; public void writeString(char[] text, int offset, int len) throws IOException, JsonGenerationException; public final void writeString(SerializableString text) throws IOException, JsonGenerationException; public void writeRawUTF8String(byte[] text, int offset, int length) throws IOException, JsonGenerationException; public void writeUTF8String(byte[] text, int offset, int len) throws IOException, JsonGenerationException; public void writeRaw(String text) throws IOException, JsonGenerationException; public void writeRaw(String text, int offset, int len) throws IOException, JsonGenerationException; public void writeRaw(SerializableString text) throws IOException, JsonGenerationException; public final void writeRaw(char[] cbuf, int offset, int len) throws IOException, JsonGenerationException; public void writeRaw(char ch) throws IOException, JsonGenerationException; private final void _writeSegmentedRaw(char[] cbuf, int offset, int len) throws IOException, JsonGenerationException; public void writeBinary(Base64Variant b64variant, byte[] data, int offset, int len) throws IOException, JsonGenerationException; public int writeBinary(Base64Variant b64variant, InputStream data, int dataLength) throws IOException, JsonGenerationException; public void writeNumber(short s) throws IOException, JsonGenerationException; private void _writeQuotedShort(short s) throws IOException; public void writeNumber(int i) throws IOException, JsonGenerationException; private void _writeQuotedInt(int i) throws IOException; public void writeNumber(long l) throws IOException, JsonGenerationException; private void _writeQuotedLong(long l) throws IOException; public void writeNumber(BigInteger value) throws IOException, JsonGenerationException; public void writeNumber(double d) throws IOException, JsonGenerationException; public void writeNumber(float f) throws IOException, JsonGenerationException; public void writeNumber(BigDecimal value) throws IOException, JsonGenerationException; public void writeNumber(String encodedValue) throws IOException, JsonGenerationException; private void _writeQuotedRaw(Object value) throws IOException; public void writeBoolean(boolean state) throws IOException, JsonGenerationException; public void writeNull() throws IOException, JsonGenerationException; protected final void _verifyValueWrite(String typeMsg) throws IOException, JsonGenerationException; protected final void _verifyPrettyValueWrite(String typeMsg, int status) throws IOException, JsonGenerationException; public final void flush() throws IOException; public void close() throws IOException; protected void _releaseBuffers(); private final void _writeBytes(byte[] bytes) throws IOException; private final void _writeBytes(byte[] bytes, int offset, int len) throws IOException; private final void _writeStringSegments(String text) throws IOException, JsonGenerationException; private final void _writeStringSegments(char[] cbuf, int offset, int totalLen) throws IOException, JsonGenerationException; private final void _writeStringSegment(char[] cbuf, int offset, int len) throws IOException, JsonGenerationException; private final void _writeStringSegment2(final char[] cbuf, int offset, final int end) throws IOException, JsonGenerationException; private final void _writeStringSegmentASCII2(final char[] cbuf, int offset, final int end) throws IOException, JsonGenerationException; private void _writeCustomStringSegment2(final char[] cbuf, int offset, final int end) throws IOException, JsonGenerationException; private int _writeCustomEscape(byte[] outputBuffer, int outputPtr, SerializableString esc, int remainingChars) throws IOException, JsonGenerationException; private int _handleLongCustomEscape(byte[] outputBuffer, int outputPtr, int outputEnd, byte[] raw, int remainingChars) throws IOException, JsonGenerationException; private void _writeUTF8Segments(byte[] utf8, int offset, int totalLen) throws IOException, JsonGenerationException; private void _writeUTF8Segment(byte[] utf8, final int offset, final int len) throws IOException, JsonGenerationException; private void _writeUTF8Segment2(final byte[] utf8, int offset, int len) throws IOException, JsonGenerationException; protected void _writeBinary(Base64Variant b64variant, byte[] input, int inputPtr, final int inputEnd) throws IOException, JsonGenerationException; protected int _writeBinary(Base64Variant b64variant, InputStream data, byte[] readBuffer, int bytesLeft) throws IOException, JsonGenerationException; protected int _writeBinary(Base64Variant b64variant, InputStream data, byte[] readBuffer) throws IOException, JsonGenerationException; private int _readMore(InputStream in, byte[] readBuffer, int inputPtr, int inputEnd, int maxRead) throws IOException; private int _outputRawMultiByteChar(int ch, char[] cbuf, int inputOffset, int inputLen) throws IOException; protected final void _outputSurrogates(int surr1, int surr2) throws IOException; private int _outputMultiByteChar(int ch, int outputPtr) throws IOException; protected final int _decodeSurrogate(int surr1, int surr2) throws IOException; private void _writeNull() throws IOException; private int _writeGenericEscape(int charToEscape, int outputPtr) throws IOException; protected final void _flushBuffer() throws IOException; byte BYTE_u=Optional[(byte) 'u']; byte BYTE_0=Optional[(byte) '0']; byte BYTE_LBRACKET=Optional[(byte) '[']; byte BYTE_RBRACKET=Optional[(byte) ']']; byte BYTE_LCURLY=Optional[(byte) '{']; byte BYTE_RCURLY=Optional[(byte) '}']; byte BYTE_BACKSLASH=Optional[(byte) '\\']; byte BYTE_COMMA=Optional[(byte) ',']; byte BYTE_COLON=Optional[(byte) ':']; byte BYTE_QUOTE=Optional[(byte) '"']; int SURR1_FIRST=Optional[0xD800]; int SURR1_LAST=Optional[0xDBFF]; int SURR2_FIRST=Optional[0xDC00]; int SURR2_LAST=Optional[0xDFFF]; int MAX_BYTES_TO_BUFFER=Optional[512]; byte[] HEX_CHARS=Optional[CharTypes.copyHexBytes()]; byte[] NULL_BYTES=Optional[{ 'n', 'u', 'l', 'l' }]; byte[] TRUE_BYTES=Optional[{ 't', 'r', 'u', 'e' }]; byte[] FALSE_BYTES=Optional[{ 'f', 'a', 'l', 's', 'e' }
private final void _writeStringSegments(char[] cbuf, int offset, int totalLen) throws IOException, JsonGenerationException { [EOL]     do { [EOL]         int len = Math.min(_outputMaxContiguous, totalLen); [EOL]         if ((_outputTail + len) > _outputEnd) { [EOL]             _flushBuffer(); [EOL]         } [EOL]         _writeStringSegment(cbuf, offset, len); [EOL]         offset += len; [EOL]         totalLen -= len; [EOL]     } while (totalLen > 0); [EOL] } public UTF8JsonGenerator(IOContext ctxt, int features, ObjectCodec codec, OutputStream out); public UTF8JsonGenerator(IOContext ctxt, int features, ObjectCodec codec, OutputStream out, byte[] outputBuffer, int outputOffset, boolean bufferRecyclable); public Object getOutputTarget(); public final void writeFieldName(String name) throws IOException, JsonGenerationException; public final void writeFieldName(SerializableString name) throws IOException, JsonGenerationException; public final void writeStartArray() throws IOException, JsonGenerationException; public final void writeEndArray() throws IOException, JsonGenerationException; public final void writeStartObject() throws IOException, JsonGenerationException; public final void writeEndObject() throws IOException, JsonGenerationException; protected final void _writeFieldName(String name) throws IOException, JsonGenerationException; protected final void _writeFieldName(SerializableString name) throws IOException, JsonGenerationException; protected final void _writePPFieldName(String name, boolean commaBefore) throws IOException, JsonGenerationException; protected final void _writePPFieldName(SerializableString name, boolean commaBefore) throws IOException, JsonGenerationException; public void writeString(String text) throws IOException, JsonGenerationException; private void _writeLongString(String text) throws IOException, JsonGenerationException; private void _writeLongString(char[] text, int offset, int len) throws IOException, JsonGenerationException; public void writeString(char[] text, int offset, int len) throws IOException, JsonGenerationException; public final void writeString(SerializableString text) throws IOException, JsonGenerationException; public void writeRawUTF8String(byte[] text, int offset, int length) throws IOException, JsonGenerationException; public void writeUTF8String(byte[] text, int offset, int len) throws IOException, JsonGenerationException; public void writeRaw(String text) throws IOException, JsonGenerationException; public void writeRaw(String text, int offset, int len) throws IOException, JsonGenerationException; public void writeRaw(SerializableString text) throws IOException, JsonGenerationException; public final void writeRaw(char[] cbuf, int offset, int len) throws IOException, JsonGenerationException; public void writeRaw(char ch) throws IOException, JsonGenerationException; private final void _writeSegmentedRaw(char[] cbuf, int offset, int len) throws IOException, JsonGenerationException; public void writeBinary(Base64Variant b64variant, byte[] data, int offset, int len) throws IOException, JsonGenerationException; public int writeBinary(Base64Variant b64variant, InputStream data, int dataLength) throws IOException, JsonGenerationException; public void writeNumber(short s) throws IOException, JsonGenerationException; private void _writeQuotedShort(short s) throws IOException; public void writeNumber(int i) throws IOException, JsonGenerationException; private void _writeQuotedInt(int i) throws IOException; public void writeNumber(long l) throws IOException, JsonGenerationException; private void _writeQuotedLong(long l) throws IOException; public void writeNumber(BigInteger value) throws IOException, JsonGenerationException; public void writeNumber(double d) throws IOException, JsonGenerationException; public void writeNumber(float f) throws IOException, JsonGenerationException; public void writeNumber(BigDecimal value) throws IOException, JsonGenerationException; public void writeNumber(String encodedValue) throws IOException, JsonGenerationException; private void _writeQuotedRaw(Object value) throws IOException; public void writeBoolean(boolean state) throws IOException, JsonGenerationException; public void writeNull() throws IOException, JsonGenerationException; protected final void _verifyValueWrite(String typeMsg) throws IOException, JsonGenerationException; protected final void _verifyPrettyValueWrite(String typeMsg, int status) throws IOException, JsonGenerationException; public final void flush() throws IOException; public void close() throws IOException; protected void _releaseBuffers(); private final void _writeBytes(byte[] bytes) throws IOException; private final void _writeBytes(byte[] bytes, int offset, int len) throws IOException; private final void _writeStringSegments(String text) throws IOException, JsonGenerationException; private final void _writeStringSegments(char[] cbuf, int offset, int totalLen) throws IOException, JsonGenerationException; private final void _writeStringSegment(char[] cbuf, int offset, int len) throws IOException, JsonGenerationException; private final void _writeStringSegment2(final char[] cbuf, int offset, final int end) throws IOException, JsonGenerationException; private final void _writeStringSegmentASCII2(final char[] cbuf, int offset, final int end) throws IOException, JsonGenerationException; private void _writeCustomStringSegment2(final char[] cbuf, int offset, final int end) throws IOException, JsonGenerationException; private int _writeCustomEscape(byte[] outputBuffer, int outputPtr, SerializableString esc, int remainingChars) throws IOException, JsonGenerationException; private int _handleLongCustomEscape(byte[] outputBuffer, int outputPtr, int outputEnd, byte[] raw, int remainingChars) throws IOException, JsonGenerationException; private void _writeUTF8Segments(byte[] utf8, int offset, int totalLen) throws IOException, JsonGenerationException; private void _writeUTF8Segment(byte[] utf8, final int offset, final int len) throws IOException, JsonGenerationException; private void _writeUTF8Segment2(final byte[] utf8, int offset, int len) throws IOException, JsonGenerationException; protected void _writeBinary(Base64Variant b64variant, byte[] input, int inputPtr, final int inputEnd) throws IOException, JsonGenerationException; protected int _writeBinary(Base64Variant b64variant, InputStream data, byte[] readBuffer, int bytesLeft) throws IOException, JsonGenerationException; protected int _writeBinary(Base64Variant b64variant, InputStream data, byte[] readBuffer) throws IOException, JsonGenerationException; private int _readMore(InputStream in, byte[] readBuffer, int inputPtr, int inputEnd, int maxRead) throws IOException; private int _outputRawMultiByteChar(int ch, char[] cbuf, int inputOffset, int inputLen) throws IOException; protected final void _outputSurrogates(int surr1, int surr2) throws IOException; private int _outputMultiByteChar(int ch, int outputPtr) throws IOException; protected final int _decodeSurrogate(int surr1, int surr2) throws IOException; private void _writeNull() throws IOException; private int _writeGenericEscape(int charToEscape, int outputPtr) throws IOException; protected final void _flushBuffer() throws IOException; byte BYTE_u=Optional[(byte) 'u']; byte BYTE_0=Optional[(byte) '0']; byte BYTE_LBRACKET=Optional[(byte) '[']; byte BYTE_RBRACKET=Optional[(byte) ']']; byte BYTE_LCURLY=Optional[(byte) '{']; byte BYTE_RCURLY=Optional[(byte) '}']; byte BYTE_BACKSLASH=Optional[(byte) '\\']; byte BYTE_COMMA=Optional[(byte) ',']; byte BYTE_COLON=Optional[(byte) ':']; byte BYTE_QUOTE=Optional[(byte) '"']; int SURR1_FIRST=Optional[0xD800]; int SURR1_LAST=Optional[0xDBFF]; int SURR2_FIRST=Optional[0xDC00]; int SURR2_LAST=Optional[0xDFFF]; int MAX_BYTES_TO_BUFFER=Optional[512]; byte[] HEX_CHARS=Optional[CharTypes.copyHexBytes()]; byte[] NULL_BYTES=Optional[{ 'n', 'u', 'l', 'l' }]; byte[] TRUE_BYTES=Optional[{ 't', 'r', 'u', 'e' }]; byte[] FALSE_BYTES=Optional[{ 'f', 'a', 'l', 's', 'e' }
public final boolean inRoot() { [EOL]     return _type == TYPE_ROOT; [EOL] }
public final boolean inRoot() { [EOL]     return _type == TYPE_ROOT; [EOL] }
public final int getCurrentIndex() { [EOL]     return (_index < 0) ? 0 : _index; [EOL] }
public static MatchStrength hasJSONFormat(InputAccessor acc) throws IOException { [EOL]     if (!acc.hasMoreBytes()) { [EOL]         return MatchStrength.INCONCLUSIVE; [EOL]     } [EOL]     byte b = acc.nextByte(); [EOL]     if (b == UTF8_BOM_1) { [EOL]         if (!acc.hasMoreBytes()) { [EOL]             return MatchStrength.INCONCLUSIVE; [EOL]         } [EOL]         if (acc.nextByte() != UTF8_BOM_2) { [EOL]             return MatchStrength.NO_MATCH; [EOL]         } [EOL]         if (!acc.hasMoreBytes()) { [EOL]             return MatchStrength.INCONCLUSIVE; [EOL]         } [EOL]         if (acc.nextByte() != UTF8_BOM_3) { [EOL]             return MatchStrength.NO_MATCH; [EOL]         } [EOL]         if (!acc.hasMoreBytes()) { [EOL]             return MatchStrength.INCONCLUSIVE; [EOL]         } [EOL]         b = acc.nextByte(); [EOL]     } [EOL]     int ch = skipSpace(acc, b); [EOL]     if (ch < 0) { [EOL]         return MatchStrength.INCONCLUSIVE; [EOL]     } [EOL]     if (ch == '{') { [EOL]         ch = skipSpace(acc); [EOL]         if (ch < 0) { [EOL]             return MatchStrength.INCONCLUSIVE; [EOL]         } [EOL]         if (ch == '"' || ch == '}') { [EOL]             return MatchStrength.SOLID_MATCH; [EOL]         } [EOL]         return MatchStrength.NO_MATCH; [EOL]     } [EOL]     MatchStrength strength; [EOL]     if (ch == '[') { [EOL]         ch = skipSpace(acc); [EOL]         if (ch < 0) { [EOL]             return MatchStrength.INCONCLUSIVE; [EOL]         } [EOL]         if (ch == ']' || ch == '[') { [EOL]             return MatchStrength.SOLID_MATCH; [EOL]         } [EOL]         return MatchStrength.SOLID_MATCH; [EOL]     } else { [EOL]         strength = MatchStrength.WEAK_MATCH; [EOL]     } [EOL]     if (ch == '"') { [EOL]         return strength; [EOL]     } [EOL]     if (ch <= '9' && ch >= '0') { [EOL]         return strength; [EOL]     } [EOL]     if (ch == '-') { [EOL]         ch = skipSpace(acc); [EOL]         if (ch < 0) { [EOL]             return MatchStrength.INCONCLUSIVE; [EOL]         } [EOL]         return (ch <= '9' && ch >= '0') ? strength : MatchStrength.NO_MATCH; [EOL]     } [EOL]     if (ch == 'n') { [EOL]         return tryMatch(acc, "ull", strength); [EOL]     } [EOL]     if (ch == 't') { [EOL]         return tryMatch(acc, "rue", strength); [EOL]     } [EOL]     if (ch == 'f') { [EOL]         return tryMatch(acc, "alse", strength); [EOL]     } [EOL]     return MatchStrength.NO_MATCH; [EOL] }
public static MatchStrength hasJSONFormat(InputAccessor acc) throws IOException { [EOL]     if (!acc.hasMoreBytes()) { [EOL]         return MatchStrength.INCONCLUSIVE; [EOL]     } [EOL]     byte b = acc.nextByte(); [EOL]     if (b == UTF8_BOM_1) { [EOL]         if (!acc.hasMoreBytes()) { [EOL]             return MatchStrength.INCONCLUSIVE; [EOL]         } [EOL]         if (acc.nextByte() != UTF8_BOM_2) { [EOL]             return MatchStrength.NO_MATCH; [EOL]         } [EOL]         if (!acc.hasMoreBytes()) { [EOL]             return MatchStrength.INCONCLUSIVE; [EOL]         } [EOL]         if (acc.nextByte() != UTF8_BOM_3) { [EOL]             return MatchStrength.NO_MATCH; [EOL]         } [EOL]         if (!acc.hasMoreBytes()) { [EOL]             return MatchStrength.INCONCLUSIVE; [EOL]         } [EOL]         b = acc.nextByte(); [EOL]     } [EOL]     int ch = skipSpace(acc, b); [EOL]     if (ch < 0) { [EOL]         return MatchStrength.INCONCLUSIVE; [EOL]     } [EOL]     if (ch == '{') { [EOL]         ch = skipSpace(acc); [EOL]         if (ch < 0) { [EOL]             return MatchStrength.INCONCLUSIVE; [EOL]         } [EOL]         if (ch == '"' || ch == '}') { [EOL]             return MatchStrength.SOLID_MATCH; [EOL]         } [EOL]         return MatchStrength.NO_MATCH; [EOL]     } [EOL]     MatchStrength strength; [EOL]     if (ch == '[') { [EOL]         ch = skipSpace(acc); [EOL]         if (ch < 0) { [EOL]             return MatchStrength.INCONCLUSIVE; [EOL]         } [EOL]         if (ch == ']' || ch == '[') { [EOL]             return MatchStrength.SOLID_MATCH; [EOL]         } [EOL]         return MatchStrength.SOLID_MATCH; [EOL]     } else { [EOL]         strength = MatchStrength.WEAK_MATCH; [EOL]     } [EOL]     if (ch == '"') { [EOL]         return strength; [EOL]     } [EOL]     if (ch <= '9' && ch >= '0') { [EOL]         return strength; [EOL]     } [EOL]     if (ch == '-') { [EOL]         ch = skipSpace(acc); [EOL]         if (ch < 0) { [EOL]             return MatchStrength.INCONCLUSIVE; [EOL]         } [EOL]         return (ch <= '9' && ch >= '0') ? strength : MatchStrength.NO_MATCH; [EOL]     } [EOL]     if (ch == 'n') { [EOL]         return tryMatch(acc, "ull", strength); [EOL]     } [EOL]     if (ch == 't') { [EOL]         return tryMatch(acc, "rue", strength); [EOL]     } [EOL]     if (ch == 'f') { [EOL]         return tryMatch(acc, "alse", strength); [EOL]     } [EOL]     return MatchStrength.NO_MATCH; [EOL] }
public static MatchStrength hasJSONFormat(InputAccessor acc) throws IOException { [EOL]     if (!acc.hasMoreBytes()) { [EOL]         return MatchStrength.INCONCLUSIVE; [EOL]     } [EOL]     byte b = acc.nextByte(); [EOL]     if (b == UTF8_BOM_1) { [EOL]         if (!acc.hasMoreBytes()) { [EOL]             return MatchStrength.INCONCLUSIVE; [EOL]         } [EOL]         if (acc.nextByte() != UTF8_BOM_2) { [EOL]             return MatchStrength.NO_MATCH; [EOL]         } [EOL]         if (!acc.hasMoreBytes()) { [EOL]             return MatchStrength.INCONCLUSIVE; [EOL]         } [EOL]         if (acc.nextByte() != UTF8_BOM_3) { [EOL]             return MatchStrength.NO_MATCH; [EOL]         } [EOL]         if (!acc.hasMoreBytes()) { [EOL]             return MatchStrength.INCONCLUSIVE; [EOL]         } [EOL]         b = acc.nextByte(); [EOL]     } [EOL]     int ch = skipSpace(acc, b); [EOL]     if (ch < 0) { [EOL]         return MatchStrength.INCONCLUSIVE; [EOL]     } [EOL]     if (ch == '{') { [EOL]         ch = skipSpace(acc); [EOL]         if (ch < 0) { [EOL]             return MatchStrength.INCONCLUSIVE; [EOL]         } [EOL]         if (ch == '"' || ch == '}') { [EOL]             return MatchStrength.SOLID_MATCH; [EOL]         } [EOL]         return MatchStrength.NO_MATCH; [EOL]     } [EOL]     MatchStrength strength; [EOL]     if (ch == '[') { [EOL]         ch = skipSpace(acc); [EOL]         if (ch < 0) { [EOL]             return MatchStrength.INCONCLUSIVE; [EOL]         } [EOL]         if (ch == ']' || ch == '[') { [EOL]             return MatchStrength.SOLID_MATCH; [EOL]         } [EOL]         return MatchStrength.SOLID_MATCH; [EOL]     } else { [EOL]         strength = MatchStrength.WEAK_MATCH; [EOL]     } [EOL]     if (ch == '"') { [EOL]         return strength; [EOL]     } [EOL]     if (ch <= '9' && ch >= '0') { [EOL]         return strength; [EOL]     } [EOL]     if (ch == '-') { [EOL]         ch = skipSpace(acc); [EOL]         if (ch < 0) { [EOL]             return MatchStrength.INCONCLUSIVE; [EOL]         } [EOL]         return (ch <= '9' && ch >= '0') ? strength : MatchStrength.NO_MATCH; [EOL]     } [EOL]     if (ch == 'n') { [EOL]         return tryMatch(acc, "ull", strength); [EOL]     } [EOL]     if (ch == 't') { [EOL]         return tryMatch(acc, "rue", strength); [EOL]     } [EOL]     if (ch == 'f') { [EOL]         return tryMatch(acc, "alse", strength); [EOL]     } [EOL]     return MatchStrength.NO_MATCH; [EOL] }
public static MatchStrength hasJSONFormat(InputAccessor acc) throws IOException { [EOL]     if (!acc.hasMoreBytes()) { [EOL]         return MatchStrength.INCONCLUSIVE; [EOL]     } [EOL]     byte b = acc.nextByte(); [EOL]     if (b == UTF8_BOM_1) { [EOL]         if (!acc.hasMoreBytes()) { [EOL]             return MatchStrength.INCONCLUSIVE; [EOL]         } [EOL]         if (acc.nextByte() != UTF8_BOM_2) { [EOL]             return MatchStrength.NO_MATCH; [EOL]         } [EOL]         if (!acc.hasMoreBytes()) { [EOL]             return MatchStrength.INCONCLUSIVE; [EOL]         } [EOL]         if (acc.nextByte() != UTF8_BOM_3) { [EOL]             return MatchStrength.NO_MATCH; [EOL]         } [EOL]         if (!acc.hasMoreBytes()) { [EOL]             return MatchStrength.INCONCLUSIVE; [EOL]         } [EOL]         b = acc.nextByte(); [EOL]     } [EOL]     int ch = skipSpace(acc, b); [EOL]     if (ch < 0) { [EOL]         return MatchStrength.INCONCLUSIVE; [EOL]     } [EOL]     if (ch == '{') { [EOL]         ch = skipSpace(acc); [EOL]         if (ch < 0) { [EOL]             return MatchStrength.INCONCLUSIVE; [EOL]         } [EOL]         if (ch == '"' || ch == '}') { [EOL]             return MatchStrength.SOLID_MATCH; [EOL]         } [EOL]         return MatchStrength.NO_MATCH; [EOL]     } [EOL]     MatchStrength strength; [EOL]     if (ch == '[') { [EOL]         ch = skipSpace(acc); [EOL]         if (ch < 0) { [EOL]             return MatchStrength.INCONCLUSIVE; [EOL]         } [EOL]         if (ch == ']' || ch == '[') { [EOL]             return MatchStrength.SOLID_MATCH; [EOL]         } [EOL]         return MatchStrength.SOLID_MATCH; [EOL]     } else { [EOL]         strength = MatchStrength.WEAK_MATCH; [EOL]     } [EOL]     if (ch == '"') { [EOL]         return strength; [EOL]     } [EOL]     if (ch <= '9' && ch >= '0') { [EOL]         return strength; [EOL]     } [EOL]     if (ch == '-') { [EOL]         ch = skipSpace(acc); [EOL]         if (ch < 0) { [EOL]             return MatchStrength.INCONCLUSIVE; [EOL]         } [EOL]         return (ch <= '9' && ch >= '0') ? strength : MatchStrength.NO_MATCH; [EOL]     } [EOL]     if (ch == 'n') { [EOL]         return tryMatch(acc, "ull", strength); [EOL]     } [EOL]     if (ch == 't') { [EOL]         return tryMatch(acc, "rue", strength); [EOL]     } [EOL]     if (ch == 'f') { [EOL]         return tryMatch(acc, "alse", strength); [EOL]     } [EOL]     return MatchStrength.NO_MATCH; [EOL] }
public static MatchStrength hasJSONFormat(InputAccessor acc) throws IOException { [EOL]     if (!acc.hasMoreBytes()) { [EOL]         return MatchStrength.INCONCLUSIVE; [EOL]     } [EOL]     byte b = acc.nextByte(); [EOL]     if (b == UTF8_BOM_1) { [EOL]         if (!acc.hasMoreBytes()) { [EOL]             return MatchStrength.INCONCLUSIVE; [EOL]         } [EOL]         if (acc.nextByte() != UTF8_BOM_2) { [EOL]             return MatchStrength.NO_MATCH; [EOL]         } [EOL]         if (!acc.hasMoreBytes()) { [EOL]             return MatchStrength.INCONCLUSIVE; [EOL]         } [EOL]         if (acc.nextByte() != UTF8_BOM_3) { [EOL]             return MatchStrength.NO_MATCH; [EOL]         } [EOL]         if (!acc.hasMoreBytes()) { [EOL]             return MatchStrength.INCONCLUSIVE; [EOL]         } [EOL]         b = acc.nextByte(); [EOL]     } [EOL]     int ch = skipSpace(acc, b); [EOL]     if (ch < 0) { [EOL]         return MatchStrength.INCONCLUSIVE; [EOL]     } [EOL]     if (ch == '{') { [EOL]         ch = skipSpace(acc); [EOL]         if (ch < 0) { [EOL]             return MatchStrength.INCONCLUSIVE; [EOL]         } [EOL]         if (ch == '"' || ch == '}') { [EOL]             return MatchStrength.SOLID_MATCH; [EOL]         } [EOL]         return MatchStrength.NO_MATCH; [EOL]     } [EOL]     MatchStrength strength; [EOL]     if (ch == '[') { [EOL]         ch = skipSpace(acc); [EOL]         if (ch < 0) { [EOL]             return MatchStrength.INCONCLUSIVE; [EOL]         } [EOL]         if (ch == ']' || ch == '[') { [EOL]             return MatchStrength.SOLID_MATCH; [EOL]         } [EOL]         return MatchStrength.SOLID_MATCH; [EOL]     } else { [EOL]         strength = MatchStrength.WEAK_MATCH; [EOL]     } [EOL]     if (ch == '"') { [EOL]         return strength; [EOL]     } [EOL]     if (ch <= '9' && ch >= '0') { [EOL]         return strength; [EOL]     } [EOL]     if (ch == '-') { [EOL]         ch = skipSpace(acc); [EOL]         if (ch < 0) { [EOL]             return MatchStrength.INCONCLUSIVE; [EOL]         } [EOL]         return (ch <= '9' && ch >= '0') ? strength : MatchStrength.NO_MATCH; [EOL]     } [EOL]     if (ch == 'n') { [EOL]         return tryMatch(acc, "ull", strength); [EOL]     } [EOL]     if (ch == 't') { [EOL]         return tryMatch(acc, "rue", strength); [EOL]     } [EOL]     if (ch == 'f') { [EOL]         return tryMatch(acc, "alse", strength); [EOL]     } [EOL]     return MatchStrength.NO_MATCH; [EOL] }
public static MatchStrength hasJSONFormat(InputAccessor acc) throws IOException { [EOL]     if (!acc.hasMoreBytes()) { [EOL]         return MatchStrength.INCONCLUSIVE; [EOL]     } [EOL]     byte b = acc.nextByte(); [EOL]     if (b == UTF8_BOM_1) { [EOL]         if (!acc.hasMoreBytes()) { [EOL]             return MatchStrength.INCONCLUSIVE; [EOL]         } [EOL]         if (acc.nextByte() != UTF8_BOM_2) { [EOL]             return MatchStrength.NO_MATCH; [EOL]         } [EOL]         if (!acc.hasMoreBytes()) { [EOL]             return MatchStrength.INCONCLUSIVE; [EOL]         } [EOL]         if (acc.nextByte() != UTF8_BOM_3) { [EOL]             return MatchStrength.NO_MATCH; [EOL]         } [EOL]         if (!acc.hasMoreBytes()) { [EOL]             return MatchStrength.INCONCLUSIVE; [EOL]         } [EOL]         b = acc.nextByte(); [EOL]     } [EOL]     int ch = skipSpace(acc, b); [EOL]     if (ch < 0) { [EOL]         return MatchStrength.INCONCLUSIVE; [EOL]     } [EOL]     if (ch == '{') { [EOL]         ch = skipSpace(acc); [EOL]         if (ch < 0) { [EOL]             return MatchStrength.INCONCLUSIVE; [EOL]         } [EOL]         if (ch == '"' || ch == '}') { [EOL]             return MatchStrength.SOLID_MATCH; [EOL]         } [EOL]         return MatchStrength.NO_MATCH; [EOL]     } [EOL]     MatchStrength strength; [EOL]     if (ch == '[') { [EOL]         ch = skipSpace(acc); [EOL]         if (ch < 0) { [EOL]             return MatchStrength.INCONCLUSIVE; [EOL]         } [EOL]         if (ch == ']' || ch == '[') { [EOL]             return MatchStrength.SOLID_MATCH; [EOL]         } [EOL]         return MatchStrength.SOLID_MATCH; [EOL]     } else { [EOL]         strength = MatchStrength.WEAK_MATCH; [EOL]     } [EOL]     if (ch == '"') { [EOL]         return strength; [EOL]     } [EOL]     if (ch <= '9' && ch >= '0') { [EOL]         return strength; [EOL]     } [EOL]     if (ch == '-') { [EOL]         ch = skipSpace(acc); [EOL]         if (ch < 0) { [EOL]             return MatchStrength.INCONCLUSIVE; [EOL]         } [EOL]         return (ch <= '9' && ch >= '0') ? strength : MatchStrength.NO_MATCH; [EOL]     } [EOL]     if (ch == 'n') { [EOL]         return tryMatch(acc, "ull", strength); [EOL]     } [EOL]     if (ch == 't') { [EOL]         return tryMatch(acc, "rue", strength); [EOL]     } [EOL]     if (ch == 'f') { [EOL]         return tryMatch(acc, "alse", strength); [EOL]     } [EOL]     return MatchStrength.NO_MATCH; [EOL] }
public static MatchStrength hasJSONFormat(InputAccessor acc) throws IOException { [EOL]     if (!acc.hasMoreBytes()) { [EOL]         return MatchStrength.INCONCLUSIVE; [EOL]     } [EOL]     byte b = acc.nextByte(); [EOL]     if (b == UTF8_BOM_1) { [EOL]         if (!acc.hasMoreBytes()) { [EOL]             return MatchStrength.INCONCLUSIVE; [EOL]         } [EOL]         if (acc.nextByte() != UTF8_BOM_2) { [EOL]             return MatchStrength.NO_MATCH; [EOL]         } [EOL]         if (!acc.hasMoreBytes()) { [EOL]             return MatchStrength.INCONCLUSIVE; [EOL]         } [EOL]         if (acc.nextByte() != UTF8_BOM_3) { [EOL]             return MatchStrength.NO_MATCH; [EOL]         } [EOL]         if (!acc.hasMoreBytes()) { [EOL]             return MatchStrength.INCONCLUSIVE; [EOL]         } [EOL]         b = acc.nextByte(); [EOL]     } [EOL]     int ch = skipSpace(acc, b); [EOL]     if (ch < 0) { [EOL]         return MatchStrength.INCONCLUSIVE; [EOL]     } [EOL]     if (ch == '{') { [EOL]         ch = skipSpace(acc); [EOL]         if (ch < 0) { [EOL]             return MatchStrength.INCONCLUSIVE; [EOL]         } [EOL]         if (ch == '"' || ch == '}') { [EOL]             return MatchStrength.SOLID_MATCH; [EOL]         } [EOL]         return MatchStrength.NO_MATCH; [EOL]     } [EOL]     MatchStrength strength; [EOL]     if (ch == '[') { [EOL]         ch = skipSpace(acc); [EOL]         if (ch < 0) { [EOL]             return MatchStrength.INCONCLUSIVE; [EOL]         } [EOL]         if (ch == ']' || ch == '[') { [EOL]             return MatchStrength.SOLID_MATCH; [EOL]         } [EOL]         return MatchStrength.SOLID_MATCH; [EOL]     } else { [EOL]         strength = MatchStrength.WEAK_MATCH; [EOL]     } [EOL]     if (ch == '"') { [EOL]         return strength; [EOL]     } [EOL]     if (ch <= '9' && ch >= '0') { [EOL]         return strength; [EOL]     } [EOL]     if (ch == '-') { [EOL]         ch = skipSpace(acc); [EOL]         if (ch < 0) { [EOL]             return MatchStrength.INCONCLUSIVE; [EOL]         } [EOL]         return (ch <= '9' && ch >= '0') ? strength : MatchStrength.NO_MATCH; [EOL]     } [EOL]     if (ch == 'n') { [EOL]         return tryMatch(acc, "ull", strength); [EOL]     } [EOL]     if (ch == 't') { [EOL]         return tryMatch(acc, "rue", strength); [EOL]     } [EOL]     if (ch == 'f') { [EOL]         return tryMatch(acc, "alse", strength); [EOL]     } [EOL]     return MatchStrength.NO_MATCH; [EOL] }
public static MatchStrength hasJSONFormat(InputAccessor acc) throws IOException { [EOL]     if (!acc.hasMoreBytes()) { [EOL]         return MatchStrength.INCONCLUSIVE; [EOL]     } [EOL]     byte b = acc.nextByte(); [EOL]     if (b == UTF8_BOM_1) { [EOL]         if (!acc.hasMoreBytes()) { [EOL]             return MatchStrength.INCONCLUSIVE; [EOL]         } [EOL]         if (acc.nextByte() != UTF8_BOM_2) { [EOL]             return MatchStrength.NO_MATCH; [EOL]         } [EOL]         if (!acc.hasMoreBytes()) { [EOL]             return MatchStrength.INCONCLUSIVE; [EOL]         } [EOL]         if (acc.nextByte() != UTF8_BOM_3) { [EOL]             return MatchStrength.NO_MATCH; [EOL]         } [EOL]         if (!acc.hasMoreBytes()) { [EOL]             return MatchStrength.INCONCLUSIVE; [EOL]         } [EOL]         b = acc.nextByte(); [EOL]     } [EOL]     int ch = skipSpace(acc, b); [EOL]     if (ch < 0) { [EOL]         return MatchStrength.INCONCLUSIVE; [EOL]     } [EOL]     if (ch == '{') { [EOL]         ch = skipSpace(acc); [EOL]         if (ch < 0) { [EOL]             return MatchStrength.INCONCLUSIVE; [EOL]         } [EOL]         if (ch == '"' || ch == '}') { [EOL]             return MatchStrength.SOLID_MATCH; [EOL]         } [EOL]         return MatchStrength.NO_MATCH; [EOL]     } [EOL]     MatchStrength strength; [EOL]     if (ch == '[') { [EOL]         ch = skipSpace(acc); [EOL]         if (ch < 0) { [EOL]             return MatchStrength.INCONCLUSIVE; [EOL]         } [EOL]         if (ch == ']' || ch == '[') { [EOL]             return MatchStrength.SOLID_MATCH; [EOL]         } [EOL]         return MatchStrength.SOLID_MATCH; [EOL]     } else { [EOL]         strength = MatchStrength.WEAK_MATCH; [EOL]     } [EOL]     if (ch == '"') { [EOL]         return strength; [EOL]     } [EOL]     if (ch <= '9' && ch >= '0') { [EOL]         return strength; [EOL]     } [EOL]     if (ch == '-') { [EOL]         ch = skipSpace(acc); [EOL]         if (ch < 0) { [EOL]             return MatchStrength.INCONCLUSIVE; [EOL]         } [EOL]         return (ch <= '9' && ch >= '0') ? strength : MatchStrength.NO_MATCH; [EOL]     } [EOL]     if (ch == 'n') { [EOL]         return tryMatch(acc, "ull", strength); [EOL]     } [EOL]     if (ch == 't') { [EOL]         return tryMatch(acc, "rue", strength); [EOL]     } [EOL]     if (ch == 'f') { [EOL]         return tryMatch(acc, "alse", strength); [EOL]     } [EOL]     return MatchStrength.NO_MATCH; [EOL] }
public static MatchStrength hasJSONFormat(InputAccessor acc) throws IOException { [EOL]     if (!acc.hasMoreBytes()) { [EOL]         return MatchStrength.INCONCLUSIVE; [EOL]     } [EOL]     byte b = acc.nextByte(); [EOL]     if (b == UTF8_BOM_1) { [EOL]         if (!acc.hasMoreBytes()) { [EOL]             return MatchStrength.INCONCLUSIVE; [EOL]         } [EOL]         if (acc.nextByte() != UTF8_BOM_2) { [EOL]             return MatchStrength.NO_MATCH; [EOL]         } [EOL]         if (!acc.hasMoreBytes()) { [EOL]             return MatchStrength.INCONCLUSIVE; [EOL]         } [EOL]         if (acc.nextByte() != UTF8_BOM_3) { [EOL]             return MatchStrength.NO_MATCH; [EOL]         } [EOL]         if (!acc.hasMoreBytes()) { [EOL]             return MatchStrength.INCONCLUSIVE; [EOL]         } [EOL]         b = acc.nextByte(); [EOL]     } [EOL]     int ch = skipSpace(acc, b); [EOL]     if (ch < 0) { [EOL]         return MatchStrength.INCONCLUSIVE; [EOL]     } [EOL]     if (ch == '{') { [EOL]         ch = skipSpace(acc); [EOL]         if (ch < 0) { [EOL]             return MatchStrength.INCONCLUSIVE; [EOL]         } [EOL]         if (ch == '"' || ch == '}') { [EOL]             return MatchStrength.SOLID_MATCH; [EOL]         } [EOL]         return MatchStrength.NO_MATCH; [EOL]     } [EOL]     MatchStrength strength; [EOL]     if (ch == '[') { [EOL]         ch = skipSpace(acc); [EOL]         if (ch < 0) { [EOL]             return MatchStrength.INCONCLUSIVE; [EOL]         } [EOL]         if (ch == ']' || ch == '[') { [EOL]             return MatchStrength.SOLID_MATCH; [EOL]         } [EOL]         return MatchStrength.SOLID_MATCH; [EOL]     } else { [EOL]         strength = MatchStrength.WEAK_MATCH; [EOL]     } [EOL]     if (ch == '"') { [EOL]         return strength; [EOL]     } [EOL]     if (ch <= '9' && ch >= '0') { [EOL]         return strength; [EOL]     } [EOL]     if (ch == '-') { [EOL]         ch = skipSpace(acc); [EOL]         if (ch < 0) { [EOL]             return MatchStrength.INCONCLUSIVE; [EOL]         } [EOL]         return (ch <= '9' && ch >= '0') ? strength : MatchStrength.NO_MATCH; [EOL]     } [EOL]     if (ch == 'n') { [EOL]         return tryMatch(acc, "ull", strength); [EOL]     } [EOL]     if (ch == 't') { [EOL]         return tryMatch(acc, "rue", strength); [EOL]     } [EOL]     if (ch == 'f') { [EOL]         return tryMatch(acc, "alse", strength); [EOL]     } [EOL]     return MatchStrength.NO_MATCH; [EOL] }
public static MatchStrength hasJSONFormat(InputAccessor acc) throws IOException { [EOL]     if (!acc.hasMoreBytes()) { [EOL]         return MatchStrength.INCONCLUSIVE; [EOL]     } [EOL]     byte b = acc.nextByte(); [EOL]     if (b == UTF8_BOM_1) { [EOL]         if (!acc.hasMoreBytes()) { [EOL]             return MatchStrength.INCONCLUSIVE; [EOL]         } [EOL]         if (acc.nextByte() != UTF8_BOM_2) { [EOL]             return MatchStrength.NO_MATCH; [EOL]         } [EOL]         if (!acc.hasMoreBytes()) { [EOL]             return MatchStrength.INCONCLUSIVE; [EOL]         } [EOL]         if (acc.nextByte() != UTF8_BOM_3) { [EOL]             return MatchStrength.NO_MATCH; [EOL]         } [EOL]         if (!acc.hasMoreBytes()) { [EOL]             return MatchStrength.INCONCLUSIVE; [EOL]         } [EOL]         b = acc.nextByte(); [EOL]     } [EOL]     int ch = skipSpace(acc, b); [EOL]     if (ch < 0) { [EOL]         return MatchStrength.INCONCLUSIVE; [EOL]     } [EOL]     if (ch == '{') { [EOL]         ch = skipSpace(acc); [EOL]         if (ch < 0) { [EOL]             return MatchStrength.INCONCLUSIVE; [EOL]         } [EOL]         if (ch == '"' || ch == '}') { [EOL]             return MatchStrength.SOLID_MATCH; [EOL]         } [EOL]         return MatchStrength.NO_MATCH; [EOL]     } [EOL]     MatchStrength strength; [EOL]     if (ch == '[') { [EOL]         ch = skipSpace(acc); [EOL]         if (ch < 0) { [EOL]             return MatchStrength.INCONCLUSIVE; [EOL]         } [EOL]         if (ch == ']' || ch == '[') { [EOL]             return MatchStrength.SOLID_MATCH; [EOL]         } [EOL]         return MatchStrength.SOLID_MATCH; [EOL]     } else { [EOL]         strength = MatchStrength.WEAK_MATCH; [EOL]     } [EOL]     if (ch == '"') { [EOL]         return strength; [EOL]     } [EOL]     if (ch <= '9' && ch >= '0') { [EOL]         return strength; [EOL]     } [EOL]     if (ch == '-') { [EOL]         ch = skipSpace(acc); [EOL]         if (ch < 0) { [EOL]             return MatchStrength.INCONCLUSIVE; [EOL]         } [EOL]         return (ch <= '9' && ch >= '0') ? strength : MatchStrength.NO_MATCH; [EOL]     } [EOL]     if (ch == 'n') { [EOL]         return tryMatch(acc, "ull", strength); [EOL]     } [EOL]     if (ch == 't') { [EOL]         return tryMatch(acc, "rue", strength); [EOL]     } [EOL]     if (ch == 'f') { [EOL]         return tryMatch(acc, "alse", strength); [EOL]     } [EOL]     return MatchStrength.NO_MATCH; [EOL] }
public static MatchStrength hasJSONFormat(InputAccessor acc) throws IOException { [EOL]     if (!acc.hasMoreBytes()) { [EOL]         return MatchStrength.INCONCLUSIVE; [EOL]     } [EOL]     byte b = acc.nextByte(); [EOL]     if (b == UTF8_BOM_1) { [EOL]         if (!acc.hasMoreBytes()) { [EOL]             return MatchStrength.INCONCLUSIVE; [EOL]         } [EOL]         if (acc.nextByte() != UTF8_BOM_2) { [EOL]             return MatchStrength.NO_MATCH; [EOL]         } [EOL]         if (!acc.hasMoreBytes()) { [EOL]             return MatchStrength.INCONCLUSIVE; [EOL]         } [EOL]         if (acc.nextByte() != UTF8_BOM_3) { [EOL]             return MatchStrength.NO_MATCH; [EOL]         } [EOL]         if (!acc.hasMoreBytes()) { [EOL]             return MatchStrength.INCONCLUSIVE; [EOL]         } [EOL]         b = acc.nextByte(); [EOL]     } [EOL]     int ch = skipSpace(acc, b); [EOL]     if (ch < 0) { [EOL]         return MatchStrength.INCONCLUSIVE; [EOL]     } [EOL]     if (ch == '{') { [EOL]         ch = skipSpace(acc); [EOL]         if (ch < 0) { [EOL]             return MatchStrength.INCONCLUSIVE; [EOL]         } [EOL]         if (ch == '"' || ch == '}') { [EOL]             return MatchStrength.SOLID_MATCH; [EOL]         } [EOL]         return MatchStrength.NO_MATCH; [EOL]     } [EOL]     MatchStrength strength; [EOL]     if (ch == '[') { [EOL]         ch = skipSpace(acc); [EOL]         if (ch < 0) { [EOL]             return MatchStrength.INCONCLUSIVE; [EOL]         } [EOL]         if (ch == ']' || ch == '[') { [EOL]             return MatchStrength.SOLID_MATCH; [EOL]         } [EOL]         return MatchStrength.SOLID_MATCH; [EOL]     } else { [EOL]         strength = MatchStrength.WEAK_MATCH; [EOL]     } [EOL]     if (ch == '"') { [EOL]         return strength; [EOL]     } [EOL]     if (ch <= '9' && ch >= '0') { [EOL]         return strength; [EOL]     } [EOL]     if (ch == '-') { [EOL]         ch = skipSpace(acc); [EOL]         if (ch < 0) { [EOL]             return MatchStrength.INCONCLUSIVE; [EOL]         } [EOL]         return (ch <= '9' && ch >= '0') ? strength : MatchStrength.NO_MATCH; [EOL]     } [EOL]     if (ch == 'n') { [EOL]         return tryMatch(acc, "ull", strength); [EOL]     } [EOL]     if (ch == 't') { [EOL]         return tryMatch(acc, "rue", strength); [EOL]     } [EOL]     if (ch == 'f') { [EOL]         return tryMatch(acc, "alse", strength); [EOL]     } [EOL]     return MatchStrength.NO_MATCH; [EOL] }
public static MatchStrength hasJSONFormat(InputAccessor acc) throws IOException { [EOL]     if (!acc.hasMoreBytes()) { [EOL]         return MatchStrength.INCONCLUSIVE; [EOL]     } [EOL]     byte b = acc.nextByte(); [EOL]     if (b == UTF8_BOM_1) { [EOL]         if (!acc.hasMoreBytes()) { [EOL]             return MatchStrength.INCONCLUSIVE; [EOL]         } [EOL]         if (acc.nextByte() != UTF8_BOM_2) { [EOL]             return MatchStrength.NO_MATCH; [EOL]         } [EOL]         if (!acc.hasMoreBytes()) { [EOL]             return MatchStrength.INCONCLUSIVE; [EOL]         } [EOL]         if (acc.nextByte() != UTF8_BOM_3) { [EOL]             return MatchStrength.NO_MATCH; [EOL]         } [EOL]         if (!acc.hasMoreBytes()) { [EOL]             return MatchStrength.INCONCLUSIVE; [EOL]         } [EOL]         b = acc.nextByte(); [EOL]     } [EOL]     int ch = skipSpace(acc, b); [EOL]     if (ch < 0) { [EOL]         return MatchStrength.INCONCLUSIVE; [EOL]     } [EOL]     if (ch == '{') { [EOL]         ch = skipSpace(acc); [EOL]         if (ch < 0) { [EOL]             return MatchStrength.INCONCLUSIVE; [EOL]         } [EOL]         if (ch == '"' || ch == '}') { [EOL]             return MatchStrength.SOLID_MATCH; [EOL]         } [EOL]         return MatchStrength.NO_MATCH; [EOL]     } [EOL]     MatchStrength strength; [EOL]     if (ch == '[') { [EOL]         ch = skipSpace(acc); [EOL]         if (ch < 0) { [EOL]             return MatchStrength.INCONCLUSIVE; [EOL]         } [EOL]         if (ch == ']' || ch == '[') { [EOL]             return MatchStrength.SOLID_MATCH; [EOL]         } [EOL]         return MatchStrength.SOLID_MATCH; [EOL]     } else { [EOL]         strength = MatchStrength.WEAK_MATCH; [EOL]     } [EOL]     if (ch == '"') { [EOL]         return strength; [EOL]     } [EOL]     if (ch <= '9' && ch >= '0') { [EOL]         return strength; [EOL]     } [EOL]     if (ch == '-') { [EOL]         ch = skipSpace(acc); [EOL]         if (ch < 0) { [EOL]             return MatchStrength.INCONCLUSIVE; [EOL]         } [EOL]         return (ch <= '9' && ch >= '0') ? strength : MatchStrength.NO_MATCH; [EOL]     } [EOL]     if (ch == 'n') { [EOL]         return tryMatch(acc, "ull", strength); [EOL]     } [EOL]     if (ch == 't') { [EOL]         return tryMatch(acc, "rue", strength); [EOL]     } [EOL]     if (ch == 'f') { [EOL]         return tryMatch(acc, "alse", strength); [EOL]     } [EOL]     return MatchStrength.NO_MATCH; [EOL] }
public static MatchStrength hasJSONFormat(InputAccessor acc) throws IOException { [EOL]     if (!acc.hasMoreBytes()) { [EOL]         return MatchStrength.INCONCLUSIVE; [EOL]     } [EOL]     byte b = acc.nextByte(); [EOL]     if (b == UTF8_BOM_1) { [EOL]         if (!acc.hasMoreBytes()) { [EOL]             return MatchStrength.INCONCLUSIVE; [EOL]         } [EOL]         if (acc.nextByte() != UTF8_BOM_2) { [EOL]             return MatchStrength.NO_MATCH; [EOL]         } [EOL]         if (!acc.hasMoreBytes()) { [EOL]             return MatchStrength.INCONCLUSIVE; [EOL]         } [EOL]         if (acc.nextByte() != UTF8_BOM_3) { [EOL]             return MatchStrength.NO_MATCH; [EOL]         } [EOL]         if (!acc.hasMoreBytes()) { [EOL]             return MatchStrength.INCONCLUSIVE; [EOL]         } [EOL]         b = acc.nextByte(); [EOL]     } [EOL]     int ch = skipSpace(acc, b); [EOL]     if (ch < 0) { [EOL]         return MatchStrength.INCONCLUSIVE; [EOL]     } [EOL]     if (ch == '{') { [EOL]         ch = skipSpace(acc); [EOL]         if (ch < 0) { [EOL]             return MatchStrength.INCONCLUSIVE; [EOL]         } [EOL]         if (ch == '"' || ch == '}') { [EOL]             return MatchStrength.SOLID_MATCH; [EOL]         } [EOL]         return MatchStrength.NO_MATCH; [EOL]     } [EOL]     MatchStrength strength; [EOL]     if (ch == '[') { [EOL]         ch = skipSpace(acc); [EOL]         if (ch < 0) { [EOL]             return MatchStrength.INCONCLUSIVE; [EOL]         } [EOL]         if (ch == ']' || ch == '[') { [EOL]             return MatchStrength.SOLID_MATCH; [EOL]         } [EOL]         return MatchStrength.SOLID_MATCH; [EOL]     } else { [EOL]         strength = MatchStrength.WEAK_MATCH; [EOL]     } [EOL]     if (ch == '"') { [EOL]         return strength; [EOL]     } [EOL]     if (ch <= '9' && ch >= '0') { [EOL]         return strength; [EOL]     } [EOL]     if (ch == '-') { [EOL]         ch = skipSpace(acc); [EOL]         if (ch < 0) { [EOL]             return MatchStrength.INCONCLUSIVE; [EOL]         } [EOL]         return (ch <= '9' && ch >= '0') ? strength : MatchStrength.NO_MATCH; [EOL]     } [EOL]     if (ch == 'n') { [EOL]         return tryMatch(acc, "ull", strength); [EOL]     } [EOL]     if (ch == 't') { [EOL]         return tryMatch(acc, "rue", strength); [EOL]     } [EOL]     if (ch == 'f') { [EOL]         return tryMatch(acc, "alse", strength); [EOL]     } [EOL]     return MatchStrength.NO_MATCH; [EOL] }
private static int skipSpace(InputAccessor acc) throws IOException { [EOL]     if (!acc.hasMoreBytes()) { [EOL]         return -1; [EOL]     } [EOL]     return skipSpace(acc, acc.nextByte()); [EOL] }
private static int skipSpace(InputAccessor acc, byte b) throws IOException { [EOL]     while (true) { [EOL]         int ch = (int) b & 0xFF; [EOL]         if (!(ch == ' ' || ch == '\r' || ch == '\n' || ch == '\t')) { [EOL]             return ch; [EOL]         } [EOL]         if (!acc.hasMoreBytes()) { [EOL]             return -1; [EOL]         } [EOL]         b = acc.nextByte(); [EOL]         ch = (int) b & 0xFF; [EOL]     } [EOL] }
private static int skipSpace(InputAccessor acc, byte b) throws IOException { [EOL]     while (true) { [EOL]         int ch = (int) b & 0xFF; [EOL]         if (!(ch == ' ' || ch == '\r' || ch == '\n' || ch == '\t')) { [EOL]             return ch; [EOL]         } [EOL]         if (!acc.hasMoreBytes()) { [EOL]             return -1; [EOL]         } [EOL]         b = acc.nextByte(); [EOL]         ch = (int) b & 0xFF; [EOL]     } [EOL] }
private static int skipSpace(InputAccessor acc, byte b) throws IOException { [EOL]     while (true) { [EOL]         int ch = (int) b & 0xFF; [EOL]         if (!(ch == ' ' || ch == '\r' || ch == '\n' || ch == '\t')) { [EOL]             return ch; [EOL]         } [EOL]         if (!acc.hasMoreBytes()) { [EOL]             return -1; [EOL]         } [EOL]         b = acc.nextByte(); [EOL]         ch = (int) b & 0xFF; [EOL]     } [EOL] }
private static int skipSpace(InputAccessor acc, byte b) throws IOException { [EOL]     while (true) { [EOL]         int ch = (int) b & 0xFF; [EOL]         if (!(ch == ' ' || ch == '\r' || ch == '\n' || ch == '\t')) { [EOL]             return ch; [EOL]         } [EOL]         if (!acc.hasMoreBytes()) { [EOL]             return -1; [EOL]         } [EOL]         b = acc.nextByte(); [EOL]         ch = (int) b & 0xFF; [EOL]     } [EOL] }
private static int skipSpace(InputAccessor acc, byte b) throws IOException { [EOL]     while (true) { [EOL]         int ch = (int) b & 0xFF; [EOL]         if (!(ch == ' ' || ch == '\r' || ch == '\n' || ch == '\t')) { [EOL]             return ch; [EOL]         } [EOL]         if (!acc.hasMoreBytes()) { [EOL]             return -1; [EOL]         } [EOL]         b = acc.nextByte(); [EOL]         ch = (int) b & 0xFF; [EOL]     } [EOL] }
private static int skipSpace(InputAccessor acc, byte b) throws IOException { [EOL]     while (true) { [EOL]         int ch = (int) b & 0xFF; [EOL]         if (!(ch == ' ' || ch == '\r' || ch == '\n' || ch == '\t')) { [EOL]             return ch; [EOL]         } [EOL]         if (!acc.hasMoreBytes()) { [EOL]             return -1; [EOL]         } [EOL]         b = acc.nextByte(); [EOL]         ch = (int) b & 0xFF; [EOL]     } [EOL] }
public int getMask() { [EOL]     return _mask; [EOL] }
protected JsonGenerator() { [EOL] }
public Base64Variant(String name, String base64Alphabet, boolean usesPadding, char paddingChar, int maxLineLength) { [EOL]     _name = name; [EOL]     _usesPadding = usesPadding; [EOL]     _paddingChar = paddingChar; [EOL]     _maxLineLength = maxLineLength; [EOL]     int alphaLen = base64Alphabet.length(); [EOL]     if (alphaLen != 64) { [EOL]         throw new IllegalArgumentException("Base64Alphabet length must be exactly 64 (was " + alphaLen + ")"); [EOL]     } [EOL]     base64Alphabet.getChars(0, alphaLen, _base64ToAsciiC, 0); [EOL]     Arrays.fill(_asciiToBase64, BASE64_VALUE_INVALID); [EOL]     for (int i = 0; i < alphaLen; ++i) { [EOL]         char alpha = _base64ToAsciiC[i]; [EOL]         _base64ToAsciiB[i] = (byte) alpha; [EOL]         _asciiToBase64[alpha] = i; [EOL]     } [EOL]     if (usesPadding) { [EOL]         _asciiToBase64[(int) paddingChar] = BASE64_VALUE_PADDING; [EOL]     } [EOL] }
public Base64Variant(String name, String base64Alphabet, boolean usesPadding, char paddingChar, int maxLineLength) { [EOL]     _name = name; [EOL]     _usesPadding = usesPadding; [EOL]     _paddingChar = paddingChar; [EOL]     _maxLineLength = maxLineLength; [EOL]     int alphaLen = base64Alphabet.length(); [EOL]     if (alphaLen != 64) { [EOL]         throw new IllegalArgumentException("Base64Alphabet length must be exactly 64 (was " + alphaLen + ")"); [EOL]     } [EOL]     base64Alphabet.getChars(0, alphaLen, _base64ToAsciiC, 0); [EOL]     Arrays.fill(_asciiToBase64, BASE64_VALUE_INVALID); [EOL]     for (int i = 0; i < alphaLen; ++i) { [EOL]         char alpha = _base64ToAsciiC[i]; [EOL]         _base64ToAsciiB[i] = (byte) alpha; [EOL]         _asciiToBase64[alpha] = i; [EOL]     } [EOL]     if (usesPadding) { [EOL]         _asciiToBase64[(int) paddingChar] = BASE64_VALUE_PADDING; [EOL]     } [EOL] }
public Base64Variant(String name, String base64Alphabet, boolean usesPadding, char paddingChar, int maxLineLength) { [EOL]     _name = name; [EOL]     _usesPadding = usesPadding; [EOL]     _paddingChar = paddingChar; [EOL]     _maxLineLength = maxLineLength; [EOL]     int alphaLen = base64Alphabet.length(); [EOL]     if (alphaLen != 64) { [EOL]         throw new IllegalArgumentException("Base64Alphabet length must be exactly 64 (was " + alphaLen + ")"); [EOL]     } [EOL]     base64Alphabet.getChars(0, alphaLen, _base64ToAsciiC, 0); [EOL]     Arrays.fill(_asciiToBase64, BASE64_VALUE_INVALID); [EOL]     for (int i = 0; i < alphaLen; ++i) { [EOL]         char alpha = _base64ToAsciiC[i]; [EOL]         _base64ToAsciiB[i] = (byte) alpha; [EOL]         _asciiToBase64[alpha] = i; [EOL]     } [EOL]     if (usesPadding) { [EOL]         _asciiToBase64[(int) paddingChar] = BASE64_VALUE_PADDING; [EOL]     } [EOL] }
public Base64Variant(Base64Variant base, String name, int maxLineLength) { [EOL]     this(base, name, base._usesPadding, base._paddingChar, maxLineLength); [EOL] }
public Base64Variant(Base64Variant base, String name, int maxLineLength) { [EOL]     this(base, name, base._usesPadding, base._paddingChar, maxLineLength); [EOL] }
public Base64Variant(Base64Variant base, String name, boolean usesPadding, char paddingChar, int maxLineLength) { [EOL]     _name = name; [EOL]     byte[] srcB = base._base64ToAsciiB; [EOL]     System.arraycopy(srcB, 0, this._base64ToAsciiB, 0, srcB.length); [EOL]     char[] srcC = base._base64ToAsciiC; [EOL]     System.arraycopy(srcC, 0, this._base64ToAsciiC, 0, srcC.length); [EOL]     int[] srcV = base._asciiToBase64; [EOL]     System.arraycopy(srcV, 0, this._asciiToBase64, 0, srcV.length); [EOL]     _usesPadding = usesPadding; [EOL]     _paddingChar = paddingChar; [EOL]     _maxLineLength = maxLineLength; [EOL] }
public Base64Variant(Base64Variant base, String name, boolean usesPadding, char paddingChar, int maxLineLength) { [EOL]     _name = name; [EOL]     byte[] srcB = base._base64ToAsciiB; [EOL]     System.arraycopy(srcB, 0, this._base64ToAsciiB, 0, srcB.length); [EOL]     char[] srcC = base._base64ToAsciiC; [EOL]     System.arraycopy(srcC, 0, this._base64ToAsciiC, 0, srcC.length); [EOL]     int[] srcV = base._asciiToBase64; [EOL]     System.arraycopy(srcV, 0, this._asciiToBase64, 0, srcV.length); [EOL]     _usesPadding = usesPadding; [EOL]     _paddingChar = paddingChar; [EOL]     _maxLineLength = maxLineLength; [EOL] }
protected Object readResolve() { [EOL]     return Base64Variants.valueOf(_name); [EOL] }
public String getName() { [EOL]     return _name; [EOL] }
public String getName() { [EOL]     return _name; [EOL] }
public boolean usesPadding() { [EOL]     return _usesPadding; [EOL] }
public boolean usesPadding() { [EOL]     return _usesPadding; [EOL] }
public boolean usesPaddingChar(char c) { [EOL]     return c == _paddingChar; [EOL] }
public boolean usesPaddingChar(char c) { [EOL]     return c == _paddingChar; [EOL] }
public char getPaddingChar() { [EOL]     return _paddingChar; [EOL] }
public byte getPaddingByte() { [EOL]     return (byte) _paddingChar; [EOL] }
public int getMaxLineLength() { [EOL]     return _maxLineLength; [EOL] }
@Override [EOL] public String toString() { [EOL]     return _name; [EOL] }
private char _verifyNoLeadingZeroes() throws IOException, JsonParseException { [EOL]     if (_inputPtr >= _inputEnd && !loadMore()) { [EOL]         return '0'; [EOL]     } [EOL]     char ch = _inputBuffer[_inputPtr]; [EOL]     if (ch < '0' || ch > '9') { [EOL]         return '0'; [EOL]     } [EOL]     if (!isEnabled(Feature.ALLOW_NUMERIC_LEADING_ZEROS)) { [EOL]         reportInvalidNumber("Leading zeroes not allowed"); [EOL]     } [EOL]     ++_inputPtr; [EOL]     if (ch == INT_0) { [EOL]         while (_inputPtr < _inputEnd || loadMore()) { [EOL]             ch = _inputBuffer[_inputPtr]; [EOL]             if (ch < '0' || ch > '9') { [EOL]                 return '0'; [EOL]             } [EOL]             ++_inputPtr; [EOL]             if (ch != '0') { [EOL]                 break; [EOL]             } [EOL]         } [EOL]     } [EOL]     return ch; [EOL] }
protected String _handleUnusualFieldName(int i) throws IOException, JsonParseException { [EOL]     if (i == INT_APOSTROPHE && isEnabled(Feature.ALLOW_SINGLE_QUOTES)) { [EOL]         return _parseApostropheFieldName(); [EOL]     } [EOL]     if (!isEnabled(Feature.ALLOW_UNQUOTED_FIELD_NAMES)) { [EOL]         _reportUnexpectedChar(i, "was expecting double-quote to start field name"); [EOL]     } [EOL]     final int[] codes = CharTypes.getInputCodeLatin1JsNames(); [EOL]     final int maxCode = codes.length; [EOL]     boolean firstOk; [EOL]     if (i < maxCode) { [EOL]         firstOk = (codes[i] == 0) && (i < INT_0 || i > INT_9); [EOL]     } else { [EOL]         firstOk = Character.isJavaIdentifierPart((char) i); [EOL]     } [EOL]     if (!firstOk) { [EOL]         _reportUnexpectedChar(i, "was expecting either valid name character (for unquoted name) or double-quote (for quoted) to start field name"); [EOL]     } [EOL]     int ptr = _inputPtr; [EOL]     int hash = _hashSeed; [EOL]     final int inputLen = _inputEnd; [EOL]     if (ptr < inputLen) { [EOL]         do { [EOL]             int ch = _inputBuffer[ptr]; [EOL]             if (ch < maxCode) { [EOL]                 if (codes[ch] != 0) { [EOL]                     int start = _inputPtr - 1; [EOL]                     _inputPtr = ptr; [EOL]                     return _symbols.findSymbol(_inputBuffer, start, ptr - start, hash); [EOL]                 } [EOL]             } else if (!Character.isJavaIdentifierPart((char) ch)) { [EOL]                 int start = _inputPtr - 1; [EOL]                 _inputPtr = ptr; [EOL]                 return _symbols.findSymbol(_inputBuffer, start, ptr - start, hash); [EOL]             } [EOL]             hash = (hash * CharsToNameCanonicalizer.HASH_MULT) + ch; [EOL]             ++ptr; [EOL]         } while (ptr < inputLen); [EOL]     } [EOL]     int start = _inputPtr - 1; [EOL]     _inputPtr = ptr; [EOL]     return _parseUnusualFieldName2(start, hash, codes); [EOL] }
protected String _handleUnusualFieldName(int i) throws IOException, JsonParseException { [EOL]     if (i == INT_APOSTROPHE && isEnabled(Feature.ALLOW_SINGLE_QUOTES)) { [EOL]         return _parseApostropheFieldName(); [EOL]     } [EOL]     if (!isEnabled(Feature.ALLOW_UNQUOTED_FIELD_NAMES)) { [EOL]         _reportUnexpectedChar(i, "was expecting double-quote to start field name"); [EOL]     } [EOL]     final int[] codes = CharTypes.getInputCodeLatin1JsNames(); [EOL]     final int maxCode = codes.length; [EOL]     boolean firstOk; [EOL]     if (i < maxCode) { [EOL]         firstOk = (codes[i] == 0) && (i < INT_0 || i > INT_9); [EOL]     } else { [EOL]         firstOk = Character.isJavaIdentifierPart((char) i); [EOL]     } [EOL]     if (!firstOk) { [EOL]         _reportUnexpectedChar(i, "was expecting either valid name character (for unquoted name) or double-quote (for quoted) to start field name"); [EOL]     } [EOL]     int ptr = _inputPtr; [EOL]     int hash = _hashSeed; [EOL]     final int inputLen = _inputEnd; [EOL]     if (ptr < inputLen) { [EOL]         do { [EOL]             int ch = _inputBuffer[ptr]; [EOL]             if (ch < maxCode) { [EOL]                 if (codes[ch] != 0) { [EOL]                     int start = _inputPtr - 1; [EOL]                     _inputPtr = ptr; [EOL]                     return _symbols.findSymbol(_inputBuffer, start, ptr - start, hash); [EOL]                 } [EOL]             } else if (!Character.isJavaIdentifierPart((char) ch)) { [EOL]                 int start = _inputPtr - 1; [EOL]                 _inputPtr = ptr; [EOL]                 return _symbols.findSymbol(_inputBuffer, start, ptr - start, hash); [EOL]             } [EOL]             hash = (hash * CharsToNameCanonicalizer.HASH_MULT) + ch; [EOL]             ++ptr; [EOL]         } while (ptr < inputLen); [EOL]     } [EOL]     int start = _inputPtr - 1; [EOL]     _inputPtr = ptr; [EOL]     return _parseUnusualFieldName2(start, hash, codes); [EOL] }
protected String _handleUnusualFieldName(int i) throws IOException, JsonParseException { [EOL]     if (i == INT_APOSTROPHE && isEnabled(Feature.ALLOW_SINGLE_QUOTES)) { [EOL]         return _parseApostropheFieldName(); [EOL]     } [EOL]     if (!isEnabled(Feature.ALLOW_UNQUOTED_FIELD_NAMES)) { [EOL]         _reportUnexpectedChar(i, "was expecting double-quote to start field name"); [EOL]     } [EOL]     final int[] codes = CharTypes.getInputCodeLatin1JsNames(); [EOL]     final int maxCode = codes.length; [EOL]     boolean firstOk; [EOL]     if (i < maxCode) { [EOL]         firstOk = (codes[i] == 0) && (i < INT_0 || i > INT_9); [EOL]     } else { [EOL]         firstOk = Character.isJavaIdentifierPart((char) i); [EOL]     } [EOL]     if (!firstOk) { [EOL]         _reportUnexpectedChar(i, "was expecting either valid name character (for unquoted name) or double-quote (for quoted) to start field name"); [EOL]     } [EOL]     int ptr = _inputPtr; [EOL]     int hash = _hashSeed; [EOL]     final int inputLen = _inputEnd; [EOL]     if (ptr < inputLen) { [EOL]         do { [EOL]             int ch = _inputBuffer[ptr]; [EOL]             if (ch < maxCode) { [EOL]                 if (codes[ch] != 0) { [EOL]                     int start = _inputPtr - 1; [EOL]                     _inputPtr = ptr; [EOL]                     return _symbols.findSymbol(_inputBuffer, start, ptr - start, hash); [EOL]                 } [EOL]             } else if (!Character.isJavaIdentifierPart((char) ch)) { [EOL]                 int start = _inputPtr - 1; [EOL]                 _inputPtr = ptr; [EOL]                 return _symbols.findSymbol(_inputBuffer, start, ptr - start, hash); [EOL]             } [EOL]             hash = (hash * CharsToNameCanonicalizer.HASH_MULT) + ch; [EOL]             ++ptr; [EOL]         } while (ptr < inputLen); [EOL]     } [EOL]     int start = _inputPtr - 1; [EOL]     _inputPtr = ptr; [EOL]     return _parseUnusualFieldName2(start, hash, codes); [EOL] }
protected String _handleUnusualFieldName(int i) throws IOException, JsonParseException { [EOL]     if (i == INT_APOSTROPHE && isEnabled(Feature.ALLOW_SINGLE_QUOTES)) { [EOL]         return _parseApostropheFieldName(); [EOL]     } [EOL]     if (!isEnabled(Feature.ALLOW_UNQUOTED_FIELD_NAMES)) { [EOL]         _reportUnexpectedChar(i, "was expecting double-quote to start field name"); [EOL]     } [EOL]     final int[] codes = CharTypes.getInputCodeLatin1JsNames(); [EOL]     final int maxCode = codes.length; [EOL]     boolean firstOk; [EOL]     if (i < maxCode) { [EOL]         firstOk = (codes[i] == 0) && (i < INT_0 || i > INT_9); [EOL]     } else { [EOL]         firstOk = Character.isJavaIdentifierPart((char) i); [EOL]     } [EOL]     if (!firstOk) { [EOL]         _reportUnexpectedChar(i, "was expecting either valid name character (for unquoted name) or double-quote (for quoted) to start field name"); [EOL]     } [EOL]     int ptr = _inputPtr; [EOL]     int hash = _hashSeed; [EOL]     final int inputLen = _inputEnd; [EOL]     if (ptr < inputLen) { [EOL]         do { [EOL]             int ch = _inputBuffer[ptr]; [EOL]             if (ch < maxCode) { [EOL]                 if (codes[ch] != 0) { [EOL]                     int start = _inputPtr - 1; [EOL]                     _inputPtr = ptr; [EOL]                     return _symbols.findSymbol(_inputBuffer, start, ptr - start, hash); [EOL]                 } [EOL]             } else if (!Character.isJavaIdentifierPart((char) ch)) { [EOL]                 int start = _inputPtr - 1; [EOL]                 _inputPtr = ptr; [EOL]                 return _symbols.findSymbol(_inputBuffer, start, ptr - start, hash); [EOL]             } [EOL]             hash = (hash * CharsToNameCanonicalizer.HASH_MULT) + ch; [EOL]             ++ptr; [EOL]         } while (ptr < inputLen); [EOL]     } [EOL]     int start = _inputPtr - 1; [EOL]     _inputPtr = ptr; [EOL]     return _parseUnusualFieldName2(start, hash, codes); [EOL] }
@Override [EOL] protected void _finishString() throws IOException, JsonParseException { [EOL]     int ptr = _inputPtr; [EOL]     final int inputLen = _inputEnd; [EOL]     if (ptr < inputLen) { [EOL]         final int[] codes = CharTypes.getInputCodeLatin1(); [EOL]         final int maxCode = codes.length; [EOL]         do { [EOL]             int ch = _inputBuffer[ptr]; [EOL]             if (ch < maxCode && codes[ch] != 0) { [EOL]                 if (ch == '"') { [EOL]                     _textBuffer.resetWithShared(_inputBuffer, _inputPtr, (ptr - _inputPtr)); [EOL]                     _inputPtr = ptr + 1; [EOL]                     return; [EOL]                 } [EOL]                 break; [EOL]             } [EOL]             ++ptr; [EOL]         } while (ptr < inputLen); [EOL]     } [EOL]     _textBuffer.resetWithCopy(_inputBuffer, _inputPtr, (ptr - _inputPtr)); [EOL]     _inputPtr = ptr; [EOL]     _finishString2(); [EOL] }
@Override [EOL] protected void _finishString() throws IOException, JsonParseException { [EOL]     int ptr = _inputPtr; [EOL]     final int inputLen = _inputEnd; [EOL]     if (ptr < inputLen) { [EOL]         final int[] codes = CharTypes.getInputCodeLatin1(); [EOL]         final int maxCode = codes.length; [EOL]         do { [EOL]             int ch = _inputBuffer[ptr]; [EOL]             if (ch < maxCode && codes[ch] != 0) { [EOL]                 if (ch == '"') { [EOL]                     _textBuffer.resetWithShared(_inputBuffer, _inputPtr, (ptr - _inputPtr)); [EOL]                     _inputPtr = ptr + 1; [EOL]                     return; [EOL]                 } [EOL]                 break; [EOL]             } [EOL]             ++ptr; [EOL]         } while (ptr < inputLen); [EOL]     } [EOL]     _textBuffer.resetWithCopy(_inputBuffer, _inputPtr, (ptr - _inputPtr)); [EOL]     _inputPtr = ptr; [EOL]     _finishString2(); [EOL] }
@Override [EOL] protected void _finishString() throws IOException, JsonParseException { [EOL]     int ptr = _inputPtr; [EOL]     final int inputLen = _inputEnd; [EOL]     if (ptr < inputLen) { [EOL]         final int[] codes = CharTypes.getInputCodeLatin1(); [EOL]         final int maxCode = codes.length; [EOL]         do { [EOL]             int ch = _inputBuffer[ptr]; [EOL]             if (ch < maxCode && codes[ch] != 0) { [EOL]                 if (ch == '"') { [EOL]                     _textBuffer.resetWithShared(_inputBuffer, _inputPtr, (ptr - _inputPtr)); [EOL]                     _inputPtr = ptr + 1; [EOL]                     return; [EOL]                 } [EOL]                 break; [EOL]             } [EOL]             ++ptr; [EOL]         } while (ptr < inputLen); [EOL]     } [EOL]     _textBuffer.resetWithCopy(_inputBuffer, _inputPtr, (ptr - _inputPtr)); [EOL]     _inputPtr = ptr; [EOL]     _finishString2(); [EOL] }
protected void _finishString2() throws IOException, JsonParseException { [EOL]     char[] outBuf = _textBuffer.getCurrentSegment(); [EOL]     int outPtr = _textBuffer.getCurrentSegmentSize(); [EOL]     while (true) { [EOL]         if (_inputPtr >= _inputEnd) { [EOL]             if (!loadMore()) { [EOL]                 _reportInvalidEOF(": was expecting closing quote for a string value"); [EOL]             } [EOL]         } [EOL]         char c = _inputBuffer[_inputPtr++]; [EOL]         int i = (int) c; [EOL]         if (i <= INT_BACKSLASH) { [EOL]             if (i == INT_BACKSLASH) { [EOL]                 c = _decodeEscaped(); [EOL]             } else if (i <= INT_QUOTE) { [EOL]                 if (i == INT_QUOTE) { [EOL]                     break; [EOL]                 } [EOL]                 if (i < INT_SPACE) { [EOL]                     _throwUnquotedSpace(i, "string value"); [EOL]                 } [EOL]             } [EOL]         } [EOL]         if (outPtr >= outBuf.length) { [EOL]             outBuf = _textBuffer.finishCurrentSegment(); [EOL]             outPtr = 0; [EOL]         } [EOL]         outBuf[outPtr++] = c; [EOL]     } [EOL]     _textBuffer.setCurrentLength(outPtr); [EOL] }
private int _skipWSOrEnd() throws IOException, JsonParseException { [EOL]     while ((_inputPtr < _inputEnd) || loadMore()) { [EOL]         int i = (int) _inputBuffer[_inputPtr++]; [EOL]         if (i > INT_SPACE) { [EOL]             if (i == INT_SLASH) { [EOL]                 _skipComment(); [EOL]                 continue; [EOL]             } [EOL]             return i; [EOL]         } [EOL]         if (i != INT_SPACE) { [EOL]             if (i == INT_LF) { [EOL]                 _skipLF(); [EOL]             } else if (i == INT_CR) { [EOL]                 _skipCR(); [EOL]             } else if (i != INT_TAB) { [EOL]                 _throwInvalidSpace(i); [EOL]             } [EOL]         } [EOL]     } [EOL]     _handleEOF(); [EOL]     return -1; [EOL] }
private int _skipWSOrEnd() throws IOException, JsonParseException { [EOL]     while ((_inputPtr < _inputEnd) || loadMore()) { [EOL]         int i = (int) _inputBuffer[_inputPtr++]; [EOL]         if (i > INT_SPACE) { [EOL]             if (i == INT_SLASH) { [EOL]                 _skipComment(); [EOL]                 continue; [EOL]             } [EOL]             return i; [EOL]         } [EOL]         if (i != INT_SPACE) { [EOL]             if (i == INT_LF) { [EOL]                 _skipLF(); [EOL]             } else if (i == INT_CR) { [EOL]                 _skipCR(); [EOL]             } else if (i != INT_TAB) { [EOL]                 _throwInvalidSpace(i); [EOL]             } [EOL]         } [EOL]     } [EOL]     _handleEOF(); [EOL]     return -1; [EOL] }
private int _skipWSOrEnd() throws IOException, JsonParseException { [EOL]     while ((_inputPtr < _inputEnd) || loadMore()) { [EOL]         int i = (int) _inputBuffer[_inputPtr++]; [EOL]         if (i > INT_SPACE) { [EOL]             if (i == INT_SLASH) { [EOL]                 _skipComment(); [EOL]                 continue; [EOL]             } [EOL]             return i; [EOL]         } [EOL]         if (i != INT_SPACE) { [EOL]             if (i == INT_LF) { [EOL]                 _skipLF(); [EOL]             } else if (i == INT_CR) { [EOL]                 _skipCR(); [EOL]             } else if (i != INT_TAB) { [EOL]                 _throwInvalidSpace(i); [EOL]             } [EOL]         } [EOL]     } [EOL]     _handleEOF(); [EOL]     return -1; [EOL] }
private int _skipWSOrEnd() throws IOException, JsonParseException { [EOL]     while ((_inputPtr < _inputEnd) || loadMore()) { [EOL]         int i = (int) _inputBuffer[_inputPtr++]; [EOL]         if (i > INT_SPACE) { [EOL]             if (i == INT_SLASH) { [EOL]                 _skipComment(); [EOL]                 continue; [EOL]             } [EOL]             return i; [EOL]         } [EOL]         if (i != INT_SPACE) { [EOL]             if (i == INT_LF) { [EOL]                 _skipLF(); [EOL]             } else if (i == INT_CR) { [EOL]                 _skipCR(); [EOL]             } else if (i != INT_TAB) { [EOL]                 _throwInvalidSpace(i); [EOL]             } [EOL]         } [EOL]     } [EOL]     _handleEOF(); [EOL]     return -1; [EOL] }
private int _skipWSOrEnd() throws IOException, JsonParseException { [EOL]     while ((_inputPtr < _inputEnd) || loadMore()) { [EOL]         int i = (int) _inputBuffer[_inputPtr++]; [EOL]         if (i > INT_SPACE) { [EOL]             if (i == INT_SLASH) { [EOL]                 _skipComment(); [EOL]                 continue; [EOL]             } [EOL]             return i; [EOL]         } [EOL]         if (i != INT_SPACE) { [EOL]             if (i == INT_LF) { [EOL]                 _skipLF(); [EOL]             } else if (i == INT_CR) { [EOL]                 _skipCR(); [EOL]             } else if (i != INT_TAB) { [EOL]                 _throwInvalidSpace(i); [EOL]             } [EOL]         } [EOL]     } [EOL]     _handleEOF(); [EOL]     return -1; [EOL] }
private int _skipWSOrEnd() throws IOException, JsonParseException { [EOL]     while ((_inputPtr < _inputEnd) || loadMore()) { [EOL]         int i = (int) _inputBuffer[_inputPtr++]; [EOL]         if (i > INT_SPACE) { [EOL]             if (i == INT_SLASH) { [EOL]                 _skipComment(); [EOL]                 continue; [EOL]             } [EOL]             return i; [EOL]         } [EOL]         if (i != INT_SPACE) { [EOL]             if (i == INT_LF) { [EOL]                 _skipLF(); [EOL]             } else if (i == INT_CR) { [EOL]                 _skipCR(); [EOL]             } else if (i != INT_TAB) { [EOL]                 _throwInvalidSpace(i); [EOL]             } [EOL]         } [EOL]     } [EOL]     _handleEOF(); [EOL]     return -1; [EOL] }
private int _skipWSOrEnd() throws IOException, JsonParseException { [EOL]     while ((_inputPtr < _inputEnd) || loadMore()) { [EOL]         int i = (int) _inputBuffer[_inputPtr++]; [EOL]         if (i > INT_SPACE) { [EOL]             if (i == INT_SLASH) { [EOL]                 _skipComment(); [EOL]                 continue; [EOL]             } [EOL]             return i; [EOL]         } [EOL]         if (i != INT_SPACE) { [EOL]             if (i == INT_LF) { [EOL]                 _skipLF(); [EOL]             } else if (i == INT_CR) { [EOL]                 _skipCR(); [EOL]             } else if (i != INT_TAB) { [EOL]                 _throwInvalidSpace(i); [EOL]             } [EOL]         } [EOL]     } [EOL]     _handleEOF(); [EOL]     return -1; [EOL] }
private void _skipComment() throws IOException, JsonParseException { [EOL]     if (!isEnabled(Feature.ALLOW_COMMENTS)) { [EOL]         _reportUnexpectedChar('/', "maybe a (non-standard) comment? (not recognized as one since Feature 'ALLOW_COMMENTS' not enabled for parser)"); [EOL]     } [EOL]     if (_inputPtr >= _inputEnd && !loadMore()) { [EOL]         _reportInvalidEOF(" in a comment"); [EOL]     } [EOL]     char c = _inputBuffer[_inputPtr++]; [EOL]     if (c == '/') { [EOL]         _skipCppComment(); [EOL]     } else if (c == '*') { [EOL]         _skipCComment(); [EOL]     } else { [EOL]         _reportUnexpectedChar(c, "was expecting either '*' or '/' for a comment"); [EOL]     } [EOL] }
private void _skipComment() throws IOException, JsonParseException { [EOL]     if (!isEnabled(Feature.ALLOW_COMMENTS)) { [EOL]         _reportUnexpectedChar('/', "maybe a (non-standard) comment? (not recognized as one since Feature 'ALLOW_COMMENTS' not enabled for parser)"); [EOL]     } [EOL]     if (_inputPtr >= _inputEnd && !loadMore()) { [EOL]         _reportInvalidEOF(" in a comment"); [EOL]     } [EOL]     char c = _inputBuffer[_inputPtr++]; [EOL]     if (c == '/') { [EOL]         _skipCppComment(); [EOL]     } else if (c == '*') { [EOL]         _skipCComment(); [EOL]     } else { [EOL]         _reportUnexpectedChar(c, "was expecting either '*' or '/' for a comment"); [EOL]     } [EOL] }
private void _skipCComment() throws IOException, JsonParseException { [EOL]     main_loop: while ((_inputPtr < _inputEnd) || loadMore()) { [EOL]         int i = (int) _inputBuffer[_inputPtr++]; [EOL]         if (i <= INT_ASTERISK) { [EOL]             if (i == INT_ASTERISK) { [EOL]                 if ((_inputPtr >= _inputEnd) && !loadMore()) { [EOL]                     break main_loop; [EOL]                 } [EOL]                 if (_inputBuffer[_inputPtr] == INT_SLASH) { [EOL]                     ++_inputPtr; [EOL]                     return; [EOL]                 } [EOL]                 continue; [EOL]             } [EOL]             if (i < INT_SPACE) { [EOL]                 if (i == INT_LF) { [EOL]                     _skipLF(); [EOL]                 } else if (i == INT_CR) { [EOL]                     _skipCR(); [EOL]                 } else if (i != INT_TAB) { [EOL]                     _throwInvalidSpace(i); [EOL]                 } [EOL]             } [EOL]         } [EOL]     } [EOL]     _reportInvalidEOF(" in a comment"); [EOL] }
private void _skipCComment() throws IOException, JsonParseException { [EOL]     main_loop: while ((_inputPtr < _inputEnd) || loadMore()) { [EOL]         int i = (int) _inputBuffer[_inputPtr++]; [EOL]         if (i <= INT_ASTERISK) { [EOL]             if (i == INT_ASTERISK) { [EOL]                 if ((_inputPtr >= _inputEnd) && !loadMore()) { [EOL]                     break main_loop; [EOL]                 } [EOL]                 if (_inputBuffer[_inputPtr] == INT_SLASH) { [EOL]                     ++_inputPtr; [EOL]                     return; [EOL]                 } [EOL]                 continue; [EOL]             } [EOL]             if (i < INT_SPACE) { [EOL]                 if (i == INT_LF) { [EOL]                     _skipLF(); [EOL]                 } else if (i == INT_CR) { [EOL]                     _skipCR(); [EOL]                 } else if (i != INT_TAB) { [EOL]                     _throwInvalidSpace(i); [EOL]                 } [EOL]             } [EOL]         } [EOL]     } [EOL]     _reportInvalidEOF(" in a comment"); [EOL] }
private void _skipCComment() throws IOException, JsonParseException { [EOL]     main_loop: while ((_inputPtr < _inputEnd) || loadMore()) { [EOL]         int i = (int) _inputBuffer[_inputPtr++]; [EOL]         if (i <= INT_ASTERISK) { [EOL]             if (i == INT_ASTERISK) { [EOL]                 if ((_inputPtr >= _inputEnd) && !loadMore()) { [EOL]                     break main_loop; [EOL]                 } [EOL]                 if (_inputBuffer[_inputPtr] == INT_SLASH) { [EOL]                     ++_inputPtr; [EOL]                     return; [EOL]                 } [EOL]                 continue; [EOL]             } [EOL]             if (i < INT_SPACE) { [EOL]                 if (i == INT_LF) { [EOL]                     _skipLF(); [EOL]                 } else if (i == INT_CR) { [EOL]                     _skipCR(); [EOL]                 } else if (i != INT_TAB) { [EOL]                     _throwInvalidSpace(i); [EOL]                 } [EOL]             } [EOL]         } [EOL]     } [EOL]     _reportInvalidEOF(" in a comment"); [EOL] }
private void _skipCComment() throws IOException, JsonParseException { [EOL]     main_loop: while ((_inputPtr < _inputEnd) || loadMore()) { [EOL]         int i = (int) _inputBuffer[_inputPtr++]; [EOL]         if (i <= INT_ASTERISK) { [EOL]             if (i == INT_ASTERISK) { [EOL]                 if ((_inputPtr >= _inputEnd) && !loadMore()) { [EOL]                     break main_loop; [EOL]                 } [EOL]                 if (_inputBuffer[_inputPtr] == INT_SLASH) { [EOL]                     ++_inputPtr; [EOL]                     return; [EOL]                 } [EOL]                 continue; [EOL]             } [EOL]             if (i < INT_SPACE) { [EOL]                 if (i == INT_LF) { [EOL]                     _skipLF(); [EOL]                 } else if (i == INT_CR) { [EOL]                     _skipCR(); [EOL]                 } else if (i != INT_TAB) { [EOL]                     _throwInvalidSpace(i); [EOL]                 } [EOL]             } [EOL]         } [EOL]     } [EOL]     _reportInvalidEOF(" in a comment"); [EOL] }
private void _skipCComment() throws IOException, JsonParseException { [EOL]     main_loop: while ((_inputPtr < _inputEnd) || loadMore()) { [EOL]         int i = (int) _inputBuffer[_inputPtr++]; [EOL]         if (i <= INT_ASTERISK) { [EOL]             if (i == INT_ASTERISK) { [EOL]                 if ((_inputPtr >= _inputEnd) && !loadMore()) { [EOL]                     break main_loop; [EOL]                 } [EOL]                 if (_inputBuffer[_inputPtr] == INT_SLASH) { [EOL]                     ++_inputPtr; [EOL]                     return; [EOL]                 } [EOL]                 continue; [EOL]             } [EOL]             if (i < INT_SPACE) { [EOL]                 if (i == INT_LF) { [EOL]                     _skipLF(); [EOL]                 } else if (i == INT_CR) { [EOL]                     _skipCR(); [EOL]                 } else if (i != INT_TAB) { [EOL]                     _throwInvalidSpace(i); [EOL]                 } [EOL]             } [EOL]         } [EOL]     } [EOL]     _reportInvalidEOF(" in a comment"); [EOL] }
private void _skipCComment() throws IOException, JsonParseException { [EOL]     main_loop: while ((_inputPtr < _inputEnd) || loadMore()) { [EOL]         int i = (int) _inputBuffer[_inputPtr++]; [EOL]         if (i <= INT_ASTERISK) { [EOL]             if (i == INT_ASTERISK) { [EOL]                 if ((_inputPtr >= _inputEnd) && !loadMore()) { [EOL]                     break main_loop; [EOL]                 } [EOL]                 if (_inputBuffer[_inputPtr] == INT_SLASH) { [EOL]                     ++_inputPtr; [EOL]                     return; [EOL]                 } [EOL]                 continue; [EOL]             } [EOL]             if (i < INT_SPACE) { [EOL]                 if (i == INT_LF) { [EOL]                     _skipLF(); [EOL]                 } else if (i == INT_CR) { [EOL]                     _skipCR(); [EOL]                 } else if (i != INT_TAB) { [EOL]                     _throwInvalidSpace(i); [EOL]                 } [EOL]             } [EOL]         } [EOL]     } [EOL]     _reportInvalidEOF(" in a comment"); [EOL] }
private void _skipCppComment() throws IOException, JsonParseException { [EOL]     while ((_inputPtr < _inputEnd) || loadMore()) { [EOL]         int i = (int) _inputBuffer[_inputPtr++]; [EOL]         if (i < INT_SPACE) { [EOL]             if (i == INT_LF) { [EOL]                 _skipLF(); [EOL]                 break; [EOL]             } else if (i == INT_CR) { [EOL]                 _skipCR(); [EOL]                 break; [EOL]             } else if (i != INT_TAB) { [EOL]                 _throwInvalidSpace(i); [EOL]             } [EOL]         } [EOL]     } [EOL] }
private void _skipCppComment() throws IOException, JsonParseException { [EOL]     while ((_inputPtr < _inputEnd) || loadMore()) { [EOL]         int i = (int) _inputBuffer[_inputPtr++]; [EOL]         if (i < INT_SPACE) { [EOL]             if (i == INT_LF) { [EOL]                 _skipLF(); [EOL]                 break; [EOL]             } else if (i == INT_CR) { [EOL]                 _skipCR(); [EOL]                 break; [EOL]             } else if (i != INT_TAB) { [EOL]                 _throwInvalidSpace(i); [EOL]             } [EOL]         } [EOL]     } [EOL] }
private void _skipCppComment() throws IOException, JsonParseException { [EOL]     while ((_inputPtr < _inputEnd) || loadMore()) { [EOL]         int i = (int) _inputBuffer[_inputPtr++]; [EOL]         if (i < INT_SPACE) { [EOL]             if (i == INT_LF) { [EOL]                 _skipLF(); [EOL]                 break; [EOL]             } else if (i == INT_CR) { [EOL]                 _skipCR(); [EOL]                 break; [EOL]             } else if (i != INT_TAB) { [EOL]                 _throwInvalidSpace(i); [EOL]             } [EOL]         } [EOL]     } [EOL] }
private void _skipCppComment() throws IOException, JsonParseException { [EOL]     while ((_inputPtr < _inputEnd) || loadMore()) { [EOL]         int i = (int) _inputBuffer[_inputPtr++]; [EOL]         if (i < INT_SPACE) { [EOL]             if (i == INT_LF) { [EOL]                 _skipLF(); [EOL]                 break; [EOL]             } else if (i == INT_CR) { [EOL]                 _skipCR(); [EOL]                 break; [EOL]             } else if (i != INT_TAB) { [EOL]                 _throwInvalidSpace(i); [EOL]             } [EOL]         } [EOL]     } [EOL] }
private void _skipCppComment() throws IOException, JsonParseException { [EOL]     while ((_inputPtr < _inputEnd) || loadMore()) { [EOL]         int i = (int) _inputBuffer[_inputPtr++]; [EOL]         if (i < INT_SPACE) { [EOL]             if (i == INT_LF) { [EOL]                 _skipLF(); [EOL]                 break; [EOL]             } else if (i == INT_CR) { [EOL]                 _skipCR(); [EOL]                 break; [EOL]             } else if (i != INT_TAB) { [EOL]                 _throwInvalidSpace(i); [EOL]             } [EOL]         } [EOL]     } [EOL] }
public WriterBasedJsonGenerator(IOContext ctxt, int features, ObjectCodec codec, Writer w) { [EOL]     super(ctxt, features, codec); [EOL]     _writer = w; [EOL]     _outputBuffer = ctxt.allocConcatBuffer(); [EOL]     _outputEnd = _outputBuffer.length; [EOL] }
public WriterBasedJsonGenerator(IOContext ctxt, int features, ObjectCodec codec, Writer w) { [EOL]     super(ctxt, features, codec); [EOL]     _writer = w; [EOL]     _outputBuffer = ctxt.allocConcatBuffer(); [EOL]     _outputEnd = _outputBuffer.length; [EOL] }
@Override [EOL] public void writeEndObject() throws IOException, JsonGenerationException { [EOL]     if (!_writeContext.inObject()) { [EOL]         _reportError("Current context not an object but " + _writeContext.getTypeDesc()); [EOL]     } [EOL]     if (_cfgPrettyPrinter != null) { [EOL]         _cfgPrettyPrinter.writeEndObject(this, _writeContext.getEntryCount()); [EOL]     } else { [EOL]         if (_outputTail >= _outputEnd) { [EOL]             _flushBuffer(); [EOL]         } [EOL]         _outputBuffer[_outputTail++] = '}'; [EOL]     } [EOL]     _writeContext = _writeContext.getParent(); [EOL] }
@Override [EOL] public void writeEndObject() throws IOException, JsonGenerationException { [EOL]     if (!_writeContext.inObject()) { [EOL]         _reportError("Current context not an object but " + _writeContext.getTypeDesc()); [EOL]     } [EOL]     if (_cfgPrettyPrinter != null) { [EOL]         _cfgPrettyPrinter.writeEndObject(this, _writeContext.getEntryCount()); [EOL]     } else { [EOL]         if (_outputTail >= _outputEnd) { [EOL]             _flushBuffer(); [EOL]         } [EOL]         _outputBuffer[_outputTail++] = '}'; [EOL]     } [EOL]     _writeContext = _writeContext.getParent(); [EOL] }
@Override [EOL] public void close() throws IOException { [EOL]     super.close(); [EOL]     if (_outputBuffer != null && isEnabled(Feature.AUTO_CLOSE_JSON_CONTENT)) { [EOL]         while (true) { [EOL]             JsonStreamContext ctxt = getOutputContext(); [EOL]             if (ctxt.inArray()) { [EOL]                 writeEndArray(); [EOL]             } else if (ctxt.inObject()) { [EOL]                 writeEndObject(); [EOL]             } else { [EOL]                 break; [EOL]             } [EOL]         } [EOL]     } [EOL]     _flushBuffer(); [EOL]     if (_writer != null) { [EOL]         if (_ioContext.isResourceManaged() || isEnabled(Feature.AUTO_CLOSE_TARGET)) { [EOL]             _writer.close(); [EOL]         } else if (isEnabled(Feature.FLUSH_PASSED_TO_STREAM)) { [EOL]             _writer.flush(); [EOL]         } [EOL]     } [EOL]     _releaseBuffers(); [EOL] }
@Override [EOL] public void close() throws IOException { [EOL]     super.close(); [EOL]     if (_outputBuffer != null && isEnabled(Feature.AUTO_CLOSE_JSON_CONTENT)) { [EOL]         while (true) { [EOL]             JsonStreamContext ctxt = getOutputContext(); [EOL]             if (ctxt.inArray()) { [EOL]                 writeEndArray(); [EOL]             } else if (ctxt.inObject()) { [EOL]                 writeEndObject(); [EOL]             } else { [EOL]                 break; [EOL]             } [EOL]         } [EOL]     } [EOL]     _flushBuffer(); [EOL]     if (_writer != null) { [EOL]         if (_ioContext.isResourceManaged() || isEnabled(Feature.AUTO_CLOSE_TARGET)) { [EOL]             _writer.close(); [EOL]         } else if (isEnabled(Feature.FLUSH_PASSED_TO_STREAM)) { [EOL]             _writer.flush(); [EOL]         } [EOL]     } [EOL]     _releaseBuffers(); [EOL] }
@Override [EOL] protected void _releaseBuffers() { [EOL]     char[] buf = _outputBuffer; [EOL]     if (buf != null) { [EOL]         _outputBuffer = null; [EOL]         _ioContext.releaseConcatBuffer(buf); [EOL]     } [EOL] }
private int _prependOrWriteCharacterEscape(char[] buffer, int ptr, int end, char ch, int escCode) throws IOException, JsonGenerationException { [EOL]     if (escCode >= 0) { [EOL]         if (ptr > 1 && ptr < end) { [EOL]             ptr -= 2; [EOL]             buffer[ptr] = '\\'; [EOL]             buffer[ptr + 1] = (char) escCode; [EOL]         } else { [EOL]             char[] ent = _entityBuffer; [EOL]             if (ent == null) { [EOL]                 ent = _allocateEntityBuffer(); [EOL]             } [EOL]             ent[1] = (char) escCode; [EOL]             _writer.write(ent, 0, 2); [EOL]         } [EOL]         return ptr; [EOL]     } [EOL]     if (escCode != CharacterEscapes.ESCAPE_CUSTOM) { [EOL]         if (ptr > 5 && ptr < end) { [EOL]             ptr -= 6; [EOL]             buffer[ptr++] = '\\'; [EOL]             buffer[ptr++] = 'u'; [EOL]             if (ch > 0xFF) { [EOL]                 int hi = (ch >> 8) & 0xFF; [EOL]                 buffer[ptr++] = HEX_CHARS[hi >> 4]; [EOL]                 buffer[ptr++] = HEX_CHARS[hi & 0xF]; [EOL]                 ch &= 0xFF; [EOL]             } else { [EOL]                 buffer[ptr++] = '0'; [EOL]                 buffer[ptr++] = '0'; [EOL]             } [EOL]             buffer[ptr++] = HEX_CHARS[ch >> 4]; [EOL]             buffer[ptr] = HEX_CHARS[ch & 0xF]; [EOL]             ptr -= 5; [EOL]         } else { [EOL]             char[] ent = _entityBuffer; [EOL]             if (ent == null) { [EOL]                 ent = _allocateEntityBuffer(); [EOL]             } [EOL]             _outputHead = _outputTail; [EOL]             if (ch > 0xFF) { [EOL]                 int hi = (ch >> 8) & 0xFF; [EOL]                 int lo = ch & 0xFF; [EOL]                 ent[10] = HEX_CHARS[hi >> 4]; [EOL]                 ent[11] = HEX_CHARS[hi & 0xF]; [EOL]                 ent[12] = HEX_CHARS[lo >> 4]; [EOL]                 ent[13] = HEX_CHARS[lo & 0xF]; [EOL]                 _writer.write(ent, 8, 6); [EOL]             } else { [EOL]                 ent[6] = HEX_CHARS[ch >> 4]; [EOL]                 ent[7] = HEX_CHARS[ch & 0xF]; [EOL]                 _writer.write(ent, 2, 6); [EOL]             } [EOL]         } [EOL]         return ptr; [EOL]     } [EOL]     String escape; [EOL]     if (_currentEscape == null) { [EOL]         escape = _characterEscapes.getEscapeSequence(ch).getValue(); [EOL]     } else { [EOL]         escape = _currentEscape.getValue(); [EOL]         _currentEscape = null; [EOL]     } [EOL]     int len = escape.length(); [EOL]     if (ptr >= len && ptr < end) { [EOL]         ptr -= len; [EOL]         escape.getChars(0, len, buffer, ptr); [EOL]     } else { [EOL]         _writer.write(escape); [EOL]     } [EOL]     return ptr; [EOL] }
private int _prependOrWriteCharacterEscape(char[] buffer, int ptr, int end, char ch, int escCode) throws IOException, JsonGenerationException { [EOL]     if (escCode >= 0) { [EOL]         if (ptr > 1 && ptr < end) { [EOL]             ptr -= 2; [EOL]             buffer[ptr] = '\\'; [EOL]             buffer[ptr + 1] = (char) escCode; [EOL]         } else { [EOL]             char[] ent = _entityBuffer; [EOL]             if (ent == null) { [EOL]                 ent = _allocateEntityBuffer(); [EOL]             } [EOL]             ent[1] = (char) escCode; [EOL]             _writer.write(ent, 0, 2); [EOL]         } [EOL]         return ptr; [EOL]     } [EOL]     if (escCode != CharacterEscapes.ESCAPE_CUSTOM) { [EOL]         if (ptr > 5 && ptr < end) { [EOL]             ptr -= 6; [EOL]             buffer[ptr++] = '\\'; [EOL]             buffer[ptr++] = 'u'; [EOL]             if (ch > 0xFF) { [EOL]                 int hi = (ch >> 8) & 0xFF; [EOL]                 buffer[ptr++] = HEX_CHARS[hi >> 4]; [EOL]                 buffer[ptr++] = HEX_CHARS[hi & 0xF]; [EOL]                 ch &= 0xFF; [EOL]             } else { [EOL]                 buffer[ptr++] = '0'; [EOL]                 buffer[ptr++] = '0'; [EOL]             } [EOL]             buffer[ptr++] = HEX_CHARS[ch >> 4]; [EOL]             buffer[ptr] = HEX_CHARS[ch & 0xF]; [EOL]             ptr -= 5; [EOL]         } else { [EOL]             char[] ent = _entityBuffer; [EOL]             if (ent == null) { [EOL]                 ent = _allocateEntityBuffer(); [EOL]             } [EOL]             _outputHead = _outputTail; [EOL]             if (ch > 0xFF) { [EOL]                 int hi = (ch >> 8) & 0xFF; [EOL]                 int lo = ch & 0xFF; [EOL]                 ent[10] = HEX_CHARS[hi >> 4]; [EOL]                 ent[11] = HEX_CHARS[hi & 0xF]; [EOL]                 ent[12] = HEX_CHARS[lo >> 4]; [EOL]                 ent[13] = HEX_CHARS[lo & 0xF]; [EOL]                 _writer.write(ent, 8, 6); [EOL]             } else { [EOL]                 ent[6] = HEX_CHARS[ch >> 4]; [EOL]                 ent[7] = HEX_CHARS[ch & 0xF]; [EOL]                 _writer.write(ent, 2, 6); [EOL]             } [EOL]         } [EOL]         return ptr; [EOL]     } [EOL]     String escape; [EOL]     if (_currentEscape == null) { [EOL]         escape = _characterEscapes.getEscapeSequence(ch).getValue(); [EOL]     } else { [EOL]         escape = _currentEscape.getValue(); [EOL]         _currentEscape = null; [EOL]     } [EOL]     int len = escape.length(); [EOL]     if (ptr >= len && ptr < end) { [EOL]         ptr -= len; [EOL]         escape.getChars(0, len, buffer, ptr); [EOL]     } else { [EOL]         _writer.write(escape); [EOL]     } [EOL]     return ptr; [EOL] }
private int _prependOrWriteCharacterEscape(char[] buffer, int ptr, int end, char ch, int escCode) throws IOException, JsonGenerationException { [EOL]     if (escCode >= 0) { [EOL]         if (ptr > 1 && ptr < end) { [EOL]             ptr -= 2; [EOL]             buffer[ptr] = '\\'; [EOL]             buffer[ptr + 1] = (char) escCode; [EOL]         } else { [EOL]             char[] ent = _entityBuffer; [EOL]             if (ent == null) { [EOL]                 ent = _allocateEntityBuffer(); [EOL]             } [EOL]             ent[1] = (char) escCode; [EOL]             _writer.write(ent, 0, 2); [EOL]         } [EOL]         return ptr; [EOL]     } [EOL]     if (escCode != CharacterEscapes.ESCAPE_CUSTOM) { [EOL]         if (ptr > 5 && ptr < end) { [EOL]             ptr -= 6; [EOL]             buffer[ptr++] = '\\'; [EOL]             buffer[ptr++] = 'u'; [EOL]             if (ch > 0xFF) { [EOL]                 int hi = (ch >> 8) & 0xFF; [EOL]                 buffer[ptr++] = HEX_CHARS[hi >> 4]; [EOL]                 buffer[ptr++] = HEX_CHARS[hi & 0xF]; [EOL]                 ch &= 0xFF; [EOL]             } else { [EOL]                 buffer[ptr++] = '0'; [EOL]                 buffer[ptr++] = '0'; [EOL]             } [EOL]             buffer[ptr++] = HEX_CHARS[ch >> 4]; [EOL]             buffer[ptr] = HEX_CHARS[ch & 0xF]; [EOL]             ptr -= 5; [EOL]         } else { [EOL]             char[] ent = _entityBuffer; [EOL]             if (ent == null) { [EOL]                 ent = _allocateEntityBuffer(); [EOL]             } [EOL]             _outputHead = _outputTail; [EOL]             if (ch > 0xFF) { [EOL]                 int hi = (ch >> 8) & 0xFF; [EOL]                 int lo = ch & 0xFF; [EOL]                 ent[10] = HEX_CHARS[hi >> 4]; [EOL]                 ent[11] = HEX_CHARS[hi & 0xF]; [EOL]                 ent[12] = HEX_CHARS[lo >> 4]; [EOL]                 ent[13] = HEX_CHARS[lo & 0xF]; [EOL]                 _writer.write(ent, 8, 6); [EOL]             } else { [EOL]                 ent[6] = HEX_CHARS[ch >> 4]; [EOL]                 ent[7] = HEX_CHARS[ch & 0xF]; [EOL]                 _writer.write(ent, 2, 6); [EOL]             } [EOL]         } [EOL]         return ptr; [EOL]     } [EOL]     String escape; [EOL]     if (_currentEscape == null) { [EOL]         escape = _characterEscapes.getEscapeSequence(ch).getValue(); [EOL]     } else { [EOL]         escape = _currentEscape.getValue(); [EOL]         _currentEscape = null; [EOL]     } [EOL]     int len = escape.length(); [EOL]     if (ptr >= len && ptr < end) { [EOL]         ptr -= len; [EOL]         escape.getChars(0, len, buffer, ptr); [EOL]     } else { [EOL]         _writer.write(escape); [EOL]     } [EOL]     return ptr; [EOL] }
private int _prependOrWriteCharacterEscape(char[] buffer, int ptr, int end, char ch, int escCode) throws IOException, JsonGenerationException { [EOL]     if (escCode >= 0) { [EOL]         if (ptr > 1 && ptr < end) { [EOL]             ptr -= 2; [EOL]             buffer[ptr] = '\\'; [EOL]             buffer[ptr + 1] = (char) escCode; [EOL]         } else { [EOL]             char[] ent = _entityBuffer; [EOL]             if (ent == null) { [EOL]                 ent = _allocateEntityBuffer(); [EOL]             } [EOL]             ent[1] = (char) escCode; [EOL]             _writer.write(ent, 0, 2); [EOL]         } [EOL]         return ptr; [EOL]     } [EOL]     if (escCode != CharacterEscapes.ESCAPE_CUSTOM) { [EOL]         if (ptr > 5 && ptr < end) { [EOL]             ptr -= 6; [EOL]             buffer[ptr++] = '\\'; [EOL]             buffer[ptr++] = 'u'; [EOL]             if (ch > 0xFF) { [EOL]                 int hi = (ch >> 8) & 0xFF; [EOL]                 buffer[ptr++] = HEX_CHARS[hi >> 4]; [EOL]                 buffer[ptr++] = HEX_CHARS[hi & 0xF]; [EOL]                 ch &= 0xFF; [EOL]             } else { [EOL]                 buffer[ptr++] = '0'; [EOL]                 buffer[ptr++] = '0'; [EOL]             } [EOL]             buffer[ptr++] = HEX_CHARS[ch >> 4]; [EOL]             buffer[ptr] = HEX_CHARS[ch & 0xF]; [EOL]             ptr -= 5; [EOL]         } else { [EOL]             char[] ent = _entityBuffer; [EOL]             if (ent == null) { [EOL]                 ent = _allocateEntityBuffer(); [EOL]             } [EOL]             _outputHead = _outputTail; [EOL]             if (ch > 0xFF) { [EOL]                 int hi = (ch >> 8) & 0xFF; [EOL]                 int lo = ch & 0xFF; [EOL]                 ent[10] = HEX_CHARS[hi >> 4]; [EOL]                 ent[11] = HEX_CHARS[hi & 0xF]; [EOL]                 ent[12] = HEX_CHARS[lo >> 4]; [EOL]                 ent[13] = HEX_CHARS[lo & 0xF]; [EOL]                 _writer.write(ent, 8, 6); [EOL]             } else { [EOL]                 ent[6] = HEX_CHARS[ch >> 4]; [EOL]                 ent[7] = HEX_CHARS[ch & 0xF]; [EOL]                 _writer.write(ent, 2, 6); [EOL]             } [EOL]         } [EOL]         return ptr; [EOL]     } [EOL]     String escape; [EOL]     if (_currentEscape == null) { [EOL]         escape = _characterEscapes.getEscapeSequence(ch).getValue(); [EOL]     } else { [EOL]         escape = _currentEscape.getValue(); [EOL]         _currentEscape = null; [EOL]     } [EOL]     int len = escape.length(); [EOL]     if (ptr >= len && ptr < end) { [EOL]         ptr -= len; [EOL]         escape.getChars(0, len, buffer, ptr); [EOL]     } else { [EOL]         _writer.write(escape); [EOL]     } [EOL]     return ptr; [EOL] }
private int _prependOrWriteCharacterEscape(char[] buffer, int ptr, int end, char ch, int escCode) throws IOException, JsonGenerationException { [EOL]     if (escCode >= 0) { [EOL]         if (ptr > 1 && ptr < end) { [EOL]             ptr -= 2; [EOL]             buffer[ptr] = '\\'; [EOL]             buffer[ptr + 1] = (char) escCode; [EOL]         } else { [EOL]             char[] ent = _entityBuffer; [EOL]             if (ent == null) { [EOL]                 ent = _allocateEntityBuffer(); [EOL]             } [EOL]             ent[1] = (char) escCode; [EOL]             _writer.write(ent, 0, 2); [EOL]         } [EOL]         return ptr; [EOL]     } [EOL]     if (escCode != CharacterEscapes.ESCAPE_CUSTOM) { [EOL]         if (ptr > 5 && ptr < end) { [EOL]             ptr -= 6; [EOL]             buffer[ptr++] = '\\'; [EOL]             buffer[ptr++] = 'u'; [EOL]             if (ch > 0xFF) { [EOL]                 int hi = (ch >> 8) & 0xFF; [EOL]                 buffer[ptr++] = HEX_CHARS[hi >> 4]; [EOL]                 buffer[ptr++] = HEX_CHARS[hi & 0xF]; [EOL]                 ch &= 0xFF; [EOL]             } else { [EOL]                 buffer[ptr++] = '0'; [EOL]                 buffer[ptr++] = '0'; [EOL]             } [EOL]             buffer[ptr++] = HEX_CHARS[ch >> 4]; [EOL]             buffer[ptr] = HEX_CHARS[ch & 0xF]; [EOL]             ptr -= 5; [EOL]         } else { [EOL]             char[] ent = _entityBuffer; [EOL]             if (ent == null) { [EOL]                 ent = _allocateEntityBuffer(); [EOL]             } [EOL]             _outputHead = _outputTail; [EOL]             if (ch > 0xFF) { [EOL]                 int hi = (ch >> 8) & 0xFF; [EOL]                 int lo = ch & 0xFF; [EOL]                 ent[10] = HEX_CHARS[hi >> 4]; [EOL]                 ent[11] = HEX_CHARS[hi & 0xF]; [EOL]                 ent[12] = HEX_CHARS[lo >> 4]; [EOL]                 ent[13] = HEX_CHARS[lo & 0xF]; [EOL]                 _writer.write(ent, 8, 6); [EOL]             } else { [EOL]                 ent[6] = HEX_CHARS[ch >> 4]; [EOL]                 ent[7] = HEX_CHARS[ch & 0xF]; [EOL]                 _writer.write(ent, 2, 6); [EOL]             } [EOL]         } [EOL]         return ptr; [EOL]     } [EOL]     String escape; [EOL]     if (_currentEscape == null) { [EOL]         escape = _characterEscapes.getEscapeSequence(ch).getValue(); [EOL]     } else { [EOL]         escape = _currentEscape.getValue(); [EOL]         _currentEscape = null; [EOL]     } [EOL]     int len = escape.length(); [EOL]     if (ptr >= len && ptr < end) { [EOL]         ptr -= len; [EOL]         escape.getChars(0, len, buffer, ptr); [EOL]     } else { [EOL]         _writer.write(escape); [EOL]     } [EOL]     return ptr; [EOL] }
private int _prependOrWriteCharacterEscape(char[] buffer, int ptr, int end, char ch, int escCode) throws IOException, JsonGenerationException { [EOL]     if (escCode >= 0) { [EOL]         if (ptr > 1 && ptr < end) { [EOL]             ptr -= 2; [EOL]             buffer[ptr] = '\\'; [EOL]             buffer[ptr + 1] = (char) escCode; [EOL]         } else { [EOL]             char[] ent = _entityBuffer; [EOL]             if (ent == null) { [EOL]                 ent = _allocateEntityBuffer(); [EOL]             } [EOL]             ent[1] = (char) escCode; [EOL]             _writer.write(ent, 0, 2); [EOL]         } [EOL]         return ptr; [EOL]     } [EOL]     if (escCode != CharacterEscapes.ESCAPE_CUSTOM) { [EOL]         if (ptr > 5 && ptr < end) { [EOL]             ptr -= 6; [EOL]             buffer[ptr++] = '\\'; [EOL]             buffer[ptr++] = 'u'; [EOL]             if (ch > 0xFF) { [EOL]                 int hi = (ch >> 8) & 0xFF; [EOL]                 buffer[ptr++] = HEX_CHARS[hi >> 4]; [EOL]                 buffer[ptr++] = HEX_CHARS[hi & 0xF]; [EOL]                 ch &= 0xFF; [EOL]             } else { [EOL]                 buffer[ptr++] = '0'; [EOL]                 buffer[ptr++] = '0'; [EOL]             } [EOL]             buffer[ptr++] = HEX_CHARS[ch >> 4]; [EOL]             buffer[ptr] = HEX_CHARS[ch & 0xF]; [EOL]             ptr -= 5; [EOL]         } else { [EOL]             char[] ent = _entityBuffer; [EOL]             if (ent == null) { [EOL]                 ent = _allocateEntityBuffer(); [EOL]             } [EOL]             _outputHead = _outputTail; [EOL]             if (ch > 0xFF) { [EOL]                 int hi = (ch >> 8) & 0xFF; [EOL]                 int lo = ch & 0xFF; [EOL]                 ent[10] = HEX_CHARS[hi >> 4]; [EOL]                 ent[11] = HEX_CHARS[hi & 0xF]; [EOL]                 ent[12] = HEX_CHARS[lo >> 4]; [EOL]                 ent[13] = HEX_CHARS[lo & 0xF]; [EOL]                 _writer.write(ent, 8, 6); [EOL]             } else { [EOL]                 ent[6] = HEX_CHARS[ch >> 4]; [EOL]                 ent[7] = HEX_CHARS[ch & 0xF]; [EOL]                 _writer.write(ent, 2, 6); [EOL]             } [EOL]         } [EOL]         return ptr; [EOL]     } [EOL]     String escape; [EOL]     if (_currentEscape == null) { [EOL]         escape = _characterEscapes.getEscapeSequence(ch).getValue(); [EOL]     } else { [EOL]         escape = _currentEscape.getValue(); [EOL]         _currentEscape = null; [EOL]     } [EOL]     int len = escape.length(); [EOL]     if (ptr >= len && ptr < end) { [EOL]         ptr -= len; [EOL]         escape.getChars(0, len, buffer, ptr); [EOL]     } else { [EOL]         _writer.write(escape); [EOL]     } [EOL]     return ptr; [EOL] }
private int _prependOrWriteCharacterEscape(char[] buffer, int ptr, int end, char ch, int escCode) throws IOException, JsonGenerationException { [EOL]     if (escCode >= 0) { [EOL]         if (ptr > 1 && ptr < end) { [EOL]             ptr -= 2; [EOL]             buffer[ptr] = '\\'; [EOL]             buffer[ptr + 1] = (char) escCode; [EOL]         } else { [EOL]             char[] ent = _entityBuffer; [EOL]             if (ent == null) { [EOL]                 ent = _allocateEntityBuffer(); [EOL]             } [EOL]             ent[1] = (char) escCode; [EOL]             _writer.write(ent, 0, 2); [EOL]         } [EOL]         return ptr; [EOL]     } [EOL]     if (escCode != CharacterEscapes.ESCAPE_CUSTOM) { [EOL]         if (ptr > 5 && ptr < end) { [EOL]             ptr -= 6; [EOL]             buffer[ptr++] = '\\'; [EOL]             buffer[ptr++] = 'u'; [EOL]             if (ch > 0xFF) { [EOL]                 int hi = (ch >> 8) & 0xFF; [EOL]                 buffer[ptr++] = HEX_CHARS[hi >> 4]; [EOL]                 buffer[ptr++] = HEX_CHARS[hi & 0xF]; [EOL]                 ch &= 0xFF; [EOL]             } else { [EOL]                 buffer[ptr++] = '0'; [EOL]                 buffer[ptr++] = '0'; [EOL]             } [EOL]             buffer[ptr++] = HEX_CHARS[ch >> 4]; [EOL]             buffer[ptr] = HEX_CHARS[ch & 0xF]; [EOL]             ptr -= 5; [EOL]         } else { [EOL]             char[] ent = _entityBuffer; [EOL]             if (ent == null) { [EOL]                 ent = _allocateEntityBuffer(); [EOL]             } [EOL]             _outputHead = _outputTail; [EOL]             if (ch > 0xFF) { [EOL]                 int hi = (ch >> 8) & 0xFF; [EOL]                 int lo = ch & 0xFF; [EOL]                 ent[10] = HEX_CHARS[hi >> 4]; [EOL]                 ent[11] = HEX_CHARS[hi & 0xF]; [EOL]                 ent[12] = HEX_CHARS[lo >> 4]; [EOL]                 ent[13] = HEX_CHARS[lo & 0xF]; [EOL]                 _writer.write(ent, 8, 6); [EOL]             } else { [EOL]                 ent[6] = HEX_CHARS[ch >> 4]; [EOL]                 ent[7] = HEX_CHARS[ch & 0xF]; [EOL]                 _writer.write(ent, 2, 6); [EOL]             } [EOL]         } [EOL]         return ptr; [EOL]     } [EOL]     String escape; [EOL]     if (_currentEscape == null) { [EOL]         escape = _characterEscapes.getEscapeSequence(ch).getValue(); [EOL]     } else { [EOL]         escape = _currentEscape.getValue(); [EOL]         _currentEscape = null; [EOL]     } [EOL]     int len = escape.length(); [EOL]     if (ptr >= len && ptr < end) { [EOL]         ptr -= len; [EOL]         escape.getChars(0, len, buffer, ptr); [EOL]     } else { [EOL]         _writer.write(escape); [EOL]     } [EOL]     return ptr; [EOL] }
protected void _flushBuffer() throws IOException { [EOL]     int len = _outputTail - _outputHead; [EOL]     if (len > 0) { [EOL]         int offset = _outputHead; [EOL]         _outputTail = _outputHead = 0; [EOL]         _writer.write(_outputBuffer, offset, len); [EOL]     } [EOL] }
protected void _flushBuffer() throws IOException { [EOL]     int len = _outputTail - _outputHead; [EOL]     if (len > 0) { [EOL]         int offset = _outputHead; [EOL]         _outputTail = _outputHead = 0; [EOL]         _writer.write(_outputBuffer, offset, len); [EOL]     } [EOL] }
public static int[] getInputCodeUtf8() { [EOL]     return sInputCodesUtf8; [EOL] }
public static int[] getInputCodeComment() { [EOL]     return sInputCodesComment; [EOL] }
public static int charToHex(int ch) { [EOL]     return (ch > 127) ? -1 : sHexValues[ch]; [EOL] }
public static int charToHex(int ch) { [EOL]     return (ch > 127) ? -1 : sHexValues[ch]; [EOL] }
public char[] quoteAsString(String input) { [EOL]     TextBuffer textBuffer = _textBuffer; [EOL]     if (textBuffer == null) { [EOL]         _textBuffer = textBuffer = new TextBuffer(null); [EOL]     } [EOL]     char[] outputBuffer = textBuffer.emptyAndGetCurrentSegment(); [EOL]     final int[] escCodes = CharTypes.get7BitOutputEscapes(); [EOL]     final int escCodeCount = escCodes.length; [EOL]     int inPtr = 0; [EOL]     final int inputLen = input.length(); [EOL]     int outPtr = 0; [EOL]     outer_loop: while (inPtr < inputLen) { [EOL]         tight_loop: while (true) { [EOL]             char c = input.charAt(inPtr); [EOL]             if (c < escCodeCount && escCodes[c] != 0) { [EOL]                 break tight_loop; [EOL]             } [EOL]             if (outPtr >= outputBuffer.length) { [EOL]                 outputBuffer = textBuffer.finishCurrentSegment(); [EOL]                 outPtr = 0; [EOL]             } [EOL]             outputBuffer[outPtr++] = c; [EOL]             if (++inPtr >= inputLen) { [EOL]                 break outer_loop; [EOL]             } [EOL]         } [EOL]         char d = input.charAt(inPtr++); [EOL]         int escCode = escCodes[d]; [EOL]         int length = (escCode < 0) ? _appendNumericEscape(d, _quoteBuffer) : _appendNamedEscape(escCode, _quoteBuffer); [EOL]         ; [EOL]         if ((outPtr + length) > outputBuffer.length) { [EOL]             int first = outputBuffer.length - outPtr; [EOL]             if (first > 0) { [EOL]                 System.arraycopy(_quoteBuffer, 0, outputBuffer, outPtr, first); [EOL]             } [EOL]             outputBuffer = textBuffer.finishCurrentSegment(); [EOL]             int second = length - first; [EOL]             System.arraycopy(_quoteBuffer, first, outputBuffer, 0, second); [EOL]             outPtr = second; [EOL]         } else { [EOL]             System.arraycopy(_quoteBuffer, 0, outputBuffer, outPtr, length); [EOL]             outPtr += length; [EOL]         } [EOL]     } [EOL]     textBuffer.setCurrentLength(outPtr); [EOL]     return textBuffer.contentsAsArray(); [EOL] }
public char[] quoteAsString(String input) { [EOL]     TextBuffer textBuffer = _textBuffer; [EOL]     if (textBuffer == null) { [EOL]         _textBuffer = textBuffer = new TextBuffer(null); [EOL]     } [EOL]     char[] outputBuffer = textBuffer.emptyAndGetCurrentSegment(); [EOL]     final int[] escCodes = CharTypes.get7BitOutputEscapes(); [EOL]     final int escCodeCount = escCodes.length; [EOL]     int inPtr = 0; [EOL]     final int inputLen = input.length(); [EOL]     int outPtr = 0; [EOL]     outer_loop: while (inPtr < inputLen) { [EOL]         tight_loop: while (true) { [EOL]             char c = input.charAt(inPtr); [EOL]             if (c < escCodeCount && escCodes[c] != 0) { [EOL]                 break tight_loop; [EOL]             } [EOL]             if (outPtr >= outputBuffer.length) { [EOL]                 outputBuffer = textBuffer.finishCurrentSegment(); [EOL]                 outPtr = 0; [EOL]             } [EOL]             outputBuffer[outPtr++] = c; [EOL]             if (++inPtr >= inputLen) { [EOL]                 break outer_loop; [EOL]             } [EOL]         } [EOL]         char d = input.charAt(inPtr++); [EOL]         int escCode = escCodes[d]; [EOL]         int length = (escCode < 0) ? _appendNumericEscape(d, _quoteBuffer) : _appendNamedEscape(escCode, _quoteBuffer); [EOL]         ; [EOL]         if ((outPtr + length) > outputBuffer.length) { [EOL]             int first = outputBuffer.length - outPtr; [EOL]             if (first > 0) { [EOL]                 System.arraycopy(_quoteBuffer, 0, outputBuffer, outPtr, first); [EOL]             } [EOL]             outputBuffer = textBuffer.finishCurrentSegment(); [EOL]             int second = length - first; [EOL]             System.arraycopy(_quoteBuffer, first, outputBuffer, 0, second); [EOL]             outPtr = second; [EOL]         } else { [EOL]             System.arraycopy(_quoteBuffer, 0, outputBuffer, outPtr, length); [EOL]             outPtr += length; [EOL]         } [EOL]     } [EOL]     textBuffer.setCurrentLength(outPtr); [EOL]     return textBuffer.contentsAsArray(); [EOL] }
public char[] quoteAsString(String input) { [EOL]     TextBuffer textBuffer = _textBuffer; [EOL]     if (textBuffer == null) { [EOL]         _textBuffer = textBuffer = new TextBuffer(null); [EOL]     } [EOL]     char[] outputBuffer = textBuffer.emptyAndGetCurrentSegment(); [EOL]     final int[] escCodes = CharTypes.get7BitOutputEscapes(); [EOL]     final int escCodeCount = escCodes.length; [EOL]     int inPtr = 0; [EOL]     final int inputLen = input.length(); [EOL]     int outPtr = 0; [EOL]     outer_loop: while (inPtr < inputLen) { [EOL]         tight_loop: while (true) { [EOL]             char c = input.charAt(inPtr); [EOL]             if (c < escCodeCount && escCodes[c] != 0) { [EOL]                 break tight_loop; [EOL]             } [EOL]             if (outPtr >= outputBuffer.length) { [EOL]                 outputBuffer = textBuffer.finishCurrentSegment(); [EOL]                 outPtr = 0; [EOL]             } [EOL]             outputBuffer[outPtr++] = c; [EOL]             if (++inPtr >= inputLen) { [EOL]                 break outer_loop; [EOL]             } [EOL]         } [EOL]         char d = input.charAt(inPtr++); [EOL]         int escCode = escCodes[d]; [EOL]         int length = (escCode < 0) ? _appendNumericEscape(d, _quoteBuffer) : _appendNamedEscape(escCode, _quoteBuffer); [EOL]         ; [EOL]         if ((outPtr + length) > outputBuffer.length) { [EOL]             int first = outputBuffer.length - outPtr; [EOL]             if (first > 0) { [EOL]                 System.arraycopy(_quoteBuffer, 0, outputBuffer, outPtr, first); [EOL]             } [EOL]             outputBuffer = textBuffer.finishCurrentSegment(); [EOL]             int second = length - first; [EOL]             System.arraycopy(_quoteBuffer, first, outputBuffer, 0, second); [EOL]             outPtr = second; [EOL]         } else { [EOL]             System.arraycopy(_quoteBuffer, 0, outputBuffer, outPtr, length); [EOL]             outPtr += length; [EOL]         } [EOL]     } [EOL]     textBuffer.setCurrentLength(outPtr); [EOL]     return textBuffer.contentsAsArray(); [EOL] }
public char[] quoteAsString(String input) { [EOL]     TextBuffer textBuffer = _textBuffer; [EOL]     if (textBuffer == null) { [EOL]         _textBuffer = textBuffer = new TextBuffer(null); [EOL]     } [EOL]     char[] outputBuffer = textBuffer.emptyAndGetCurrentSegment(); [EOL]     final int[] escCodes = CharTypes.get7BitOutputEscapes(); [EOL]     final int escCodeCount = escCodes.length; [EOL]     int inPtr = 0; [EOL]     final int inputLen = input.length(); [EOL]     int outPtr = 0; [EOL]     outer_loop: while (inPtr < inputLen) { [EOL]         tight_loop: while (true) { [EOL]             char c = input.charAt(inPtr); [EOL]             if (c < escCodeCount && escCodes[c] != 0) { [EOL]                 break tight_loop; [EOL]             } [EOL]             if (outPtr >= outputBuffer.length) { [EOL]                 outputBuffer = textBuffer.finishCurrentSegment(); [EOL]                 outPtr = 0; [EOL]             } [EOL]             outputBuffer[outPtr++] = c; [EOL]             if (++inPtr >= inputLen) { [EOL]                 break outer_loop; [EOL]             } [EOL]         } [EOL]         char d = input.charAt(inPtr++); [EOL]         int escCode = escCodes[d]; [EOL]         int length = (escCode < 0) ? _appendNumericEscape(d, _quoteBuffer) : _appendNamedEscape(escCode, _quoteBuffer); [EOL]         ; [EOL]         if ((outPtr + length) > outputBuffer.length) { [EOL]             int first = outputBuffer.length - outPtr; [EOL]             if (first > 0) { [EOL]                 System.arraycopy(_quoteBuffer, 0, outputBuffer, outPtr, first); [EOL]             } [EOL]             outputBuffer = textBuffer.finishCurrentSegment(); [EOL]             int second = length - first; [EOL]             System.arraycopy(_quoteBuffer, first, outputBuffer, 0, second); [EOL]             outPtr = second; [EOL]         } else { [EOL]             System.arraycopy(_quoteBuffer, 0, outputBuffer, outPtr, length); [EOL]             outPtr += length; [EOL]         } [EOL]     } [EOL]     textBuffer.setCurrentLength(outPtr); [EOL]     return textBuffer.contentsAsArray(); [EOL] }
@SuppressWarnings("resource") [EOL] public byte[] quoteAsUTF8(String text) { [EOL]     ByteArrayBuilder byteBuilder = _byteBuilder; [EOL]     if (byteBuilder == null) { [EOL]         _byteBuilder = byteBuilder = new ByteArrayBuilder(null); [EOL]     } [EOL]     int inputPtr = 0; [EOL]     int inputEnd = text.length(); [EOL]     int outputPtr = 0; [EOL]     byte[] outputBuffer = byteBuilder.resetAndGetFirstSegment(); [EOL]     main_loop: while (inputPtr < inputEnd) { [EOL]         final int[] escCodes = CharTypes.get7BitOutputEscapes(); [EOL]         inner_loop: while (true) { [EOL]             int ch = text.charAt(inputPtr); [EOL]             if (ch > 0x7F || escCodes[ch] != 0) { [EOL]                 break inner_loop; [EOL]             } [EOL]             if (outputPtr >= outputBuffer.length) { [EOL]                 outputBuffer = byteBuilder.finishCurrentSegment(); [EOL]                 outputPtr = 0; [EOL]             } [EOL]             outputBuffer[outputPtr++] = (byte) ch; [EOL]             if (++inputPtr >= inputEnd) { [EOL]                 break main_loop; [EOL]             } [EOL]         } [EOL]         if (outputPtr >= outputBuffer.length) { [EOL]             outputBuffer = byteBuilder.finishCurrentSegment(); [EOL]             outputPtr = 0; [EOL]         } [EOL]         int ch = (int) text.charAt(inputPtr++); [EOL]         if (ch <= 0x7F) { [EOL]             int escape = escCodes[ch]; [EOL]             outputPtr = _appendByteEscape(ch, escape, byteBuilder, outputPtr); [EOL]             outputBuffer = byteBuilder.getCurrentSegment(); [EOL]             continue main_loop; [EOL]         } else if (ch <= 0x7FF) { [EOL]             outputBuffer[outputPtr++] = (byte) (0xc0 | (ch >> 6)); [EOL]             ch = (0x80 | (ch & 0x3f)); [EOL]         } else { [EOL]             if (ch < SURR1_FIRST || ch > SURR2_LAST) { [EOL]                 outputBuffer[outputPtr++] = (byte) (0xe0 | (ch >> 12)); [EOL]                 if (outputPtr >= outputBuffer.length) { [EOL]                     outputBuffer = byteBuilder.finishCurrentSegment(); [EOL]                     outputPtr = 0; [EOL]                 } [EOL]                 outputBuffer[outputPtr++] = (byte) (0x80 | ((ch >> 6) & 0x3f)); [EOL]                 ch = (0x80 | (ch & 0x3f)); [EOL]             } else { [EOL]                 if (ch > SURR1_LAST) { [EOL]                     _illegalSurrogate(ch); [EOL]                 } [EOL]                 if (inputPtr >= inputEnd) { [EOL]                     _illegalSurrogate(ch); [EOL]                 } [EOL]                 ch = _convertSurrogate(ch, text.charAt(inputPtr++)); [EOL]                 if (ch > 0x10FFFF) { [EOL]                     _illegalSurrogate(ch); [EOL]                 } [EOL]                 outputBuffer[outputPtr++] = (byte) (0xf0 | (ch >> 18)); [EOL]                 if (outputPtr >= outputBuffer.length) { [EOL]                     outputBuffer = byteBuilder.finishCurrentSegment(); [EOL]                     outputPtr = 0; [EOL]                 } [EOL]                 outputBuffer[outputPtr++] = (byte) (0x80 | ((ch >> 12) & 0x3f)); [EOL]                 if (outputPtr >= outputBuffer.length) { [EOL]                     outputBuffer = byteBuilder.finishCurrentSegment(); [EOL]                     outputPtr = 0; [EOL]                 } [EOL]                 outputBuffer[outputPtr++] = (byte) (0x80 | ((ch >> 6) & 0x3f)); [EOL]                 ch = (0x80 | (ch & 0x3f)); [EOL]             } [EOL]         } [EOL]         if (outputPtr >= outputBuffer.length) { [EOL]             outputBuffer = byteBuilder.finishCurrentSegment(); [EOL]             outputPtr = 0; [EOL]         } [EOL]         outputBuffer[outputPtr++] = (byte) ch; [EOL]     } [EOL]     return _byteBuilder.completeAndCoalesce(outputPtr); [EOL] }
@SuppressWarnings("resource") [EOL] public byte[] quoteAsUTF8(String text) { [EOL]     ByteArrayBuilder byteBuilder = _byteBuilder; [EOL]     if (byteBuilder == null) { [EOL]         _byteBuilder = byteBuilder = new ByteArrayBuilder(null); [EOL]     } [EOL]     int inputPtr = 0; [EOL]     int inputEnd = text.length(); [EOL]     int outputPtr = 0; [EOL]     byte[] outputBuffer = byteBuilder.resetAndGetFirstSegment(); [EOL]     main_loop: while (inputPtr < inputEnd) { [EOL]         final int[] escCodes = CharTypes.get7BitOutputEscapes(); [EOL]         inner_loop: while (true) { [EOL]             int ch = text.charAt(inputPtr); [EOL]             if (ch > 0x7F || escCodes[ch] != 0) { [EOL]                 break inner_loop; [EOL]             } [EOL]             if (outputPtr >= outputBuffer.length) { [EOL]                 outputBuffer = byteBuilder.finishCurrentSegment(); [EOL]                 outputPtr = 0; [EOL]             } [EOL]             outputBuffer[outputPtr++] = (byte) ch; [EOL]             if (++inputPtr >= inputEnd) { [EOL]                 break main_loop; [EOL]             } [EOL]         } [EOL]         if (outputPtr >= outputBuffer.length) { [EOL]             outputBuffer = byteBuilder.finishCurrentSegment(); [EOL]             outputPtr = 0; [EOL]         } [EOL]         int ch = (int) text.charAt(inputPtr++); [EOL]         if (ch <= 0x7F) { [EOL]             int escape = escCodes[ch]; [EOL]             outputPtr = _appendByteEscape(ch, escape, byteBuilder, outputPtr); [EOL]             outputBuffer = byteBuilder.getCurrentSegment(); [EOL]             continue main_loop; [EOL]         } else if (ch <= 0x7FF) { [EOL]             outputBuffer[outputPtr++] = (byte) (0xc0 | (ch >> 6)); [EOL]             ch = (0x80 | (ch & 0x3f)); [EOL]         } else { [EOL]             if (ch < SURR1_FIRST || ch > SURR2_LAST) { [EOL]                 outputBuffer[outputPtr++] = (byte) (0xe0 | (ch >> 12)); [EOL]                 if (outputPtr >= outputBuffer.length) { [EOL]                     outputBuffer = byteBuilder.finishCurrentSegment(); [EOL]                     outputPtr = 0; [EOL]                 } [EOL]                 outputBuffer[outputPtr++] = (byte) (0x80 | ((ch >> 6) & 0x3f)); [EOL]                 ch = (0x80 | (ch & 0x3f)); [EOL]             } else { [EOL]                 if (ch > SURR1_LAST) { [EOL]                     _illegalSurrogate(ch); [EOL]                 } [EOL]                 if (inputPtr >= inputEnd) { [EOL]                     _illegalSurrogate(ch); [EOL]                 } [EOL]                 ch = _convertSurrogate(ch, text.charAt(inputPtr++)); [EOL]                 if (ch > 0x10FFFF) { [EOL]                     _illegalSurrogate(ch); [EOL]                 } [EOL]                 outputBuffer[outputPtr++] = (byte) (0xf0 | (ch >> 18)); [EOL]                 if (outputPtr >= outputBuffer.length) { [EOL]                     outputBuffer = byteBuilder.finishCurrentSegment(); [EOL]                     outputPtr = 0; [EOL]                 } [EOL]                 outputBuffer[outputPtr++] = (byte) (0x80 | ((ch >> 12) & 0x3f)); [EOL]                 if (outputPtr >= outputBuffer.length) { [EOL]                     outputBuffer = byteBuilder.finishCurrentSegment(); [EOL]                     outputPtr = 0; [EOL]                 } [EOL]                 outputBuffer[outputPtr++] = (byte) (0x80 | ((ch >> 6) & 0x3f)); [EOL]                 ch = (0x80 | (ch & 0x3f)); [EOL]             } [EOL]         } [EOL]         if (outputPtr >= outputBuffer.length) { [EOL]             outputBuffer = byteBuilder.finishCurrentSegment(); [EOL]             outputPtr = 0; [EOL]         } [EOL]         outputBuffer[outputPtr++] = (byte) ch; [EOL]     } [EOL]     return _byteBuilder.completeAndCoalesce(outputPtr); [EOL] }
@SuppressWarnings("resource") [EOL] public byte[] quoteAsUTF8(String text) { [EOL]     ByteArrayBuilder byteBuilder = _byteBuilder; [EOL]     if (byteBuilder == null) { [EOL]         _byteBuilder = byteBuilder = new ByteArrayBuilder(null); [EOL]     } [EOL]     int inputPtr = 0; [EOL]     int inputEnd = text.length(); [EOL]     int outputPtr = 0; [EOL]     byte[] outputBuffer = byteBuilder.resetAndGetFirstSegment(); [EOL]     main_loop: while (inputPtr < inputEnd) { [EOL]         final int[] escCodes = CharTypes.get7BitOutputEscapes(); [EOL]         inner_loop: while (true) { [EOL]             int ch = text.charAt(inputPtr); [EOL]             if (ch > 0x7F || escCodes[ch] != 0) { [EOL]                 break inner_loop; [EOL]             } [EOL]             if (outputPtr >= outputBuffer.length) { [EOL]                 outputBuffer = byteBuilder.finishCurrentSegment(); [EOL]                 outputPtr = 0; [EOL]             } [EOL]             outputBuffer[outputPtr++] = (byte) ch; [EOL]             if (++inputPtr >= inputEnd) { [EOL]                 break main_loop; [EOL]             } [EOL]         } [EOL]         if (outputPtr >= outputBuffer.length) { [EOL]             outputBuffer = byteBuilder.finishCurrentSegment(); [EOL]             outputPtr = 0; [EOL]         } [EOL]         int ch = (int) text.charAt(inputPtr++); [EOL]         if (ch <= 0x7F) { [EOL]             int escape = escCodes[ch]; [EOL]             outputPtr = _appendByteEscape(ch, escape, byteBuilder, outputPtr); [EOL]             outputBuffer = byteBuilder.getCurrentSegment(); [EOL]             continue main_loop; [EOL]         } else if (ch <= 0x7FF) { [EOL]             outputBuffer[outputPtr++] = (byte) (0xc0 | (ch >> 6)); [EOL]             ch = (0x80 | (ch & 0x3f)); [EOL]         } else { [EOL]             if (ch < SURR1_FIRST || ch > SURR2_LAST) { [EOL]                 outputBuffer[outputPtr++] = (byte) (0xe0 | (ch >> 12)); [EOL]                 if (outputPtr >= outputBuffer.length) { [EOL]                     outputBuffer = byteBuilder.finishCurrentSegment(); [EOL]                     outputPtr = 0; [EOL]                 } [EOL]                 outputBuffer[outputPtr++] = (byte) (0x80 | ((ch >> 6) & 0x3f)); [EOL]                 ch = (0x80 | (ch & 0x3f)); [EOL]             } else { [EOL]                 if (ch > SURR1_LAST) { [EOL]                     _illegalSurrogate(ch); [EOL]                 } [EOL]                 if (inputPtr >= inputEnd) { [EOL]                     _illegalSurrogate(ch); [EOL]                 } [EOL]                 ch = _convertSurrogate(ch, text.charAt(inputPtr++)); [EOL]                 if (ch > 0x10FFFF) { [EOL]                     _illegalSurrogate(ch); [EOL]                 } [EOL]                 outputBuffer[outputPtr++] = (byte) (0xf0 | (ch >> 18)); [EOL]                 if (outputPtr >= outputBuffer.length) { [EOL]                     outputBuffer = byteBuilder.finishCurrentSegment(); [EOL]                     outputPtr = 0; [EOL]                 } [EOL]                 outputBuffer[outputPtr++] = (byte) (0x80 | ((ch >> 12) & 0x3f)); [EOL]                 if (outputPtr >= outputBuffer.length) { [EOL]                     outputBuffer = byteBuilder.finishCurrentSegment(); [EOL]                     outputPtr = 0; [EOL]                 } [EOL]                 outputBuffer[outputPtr++] = (byte) (0x80 | ((ch >> 6) & 0x3f)); [EOL]                 ch = (0x80 | (ch & 0x3f)); [EOL]             } [EOL]         } [EOL]         if (outputPtr >= outputBuffer.length) { [EOL]             outputBuffer = byteBuilder.finishCurrentSegment(); [EOL]             outputPtr = 0; [EOL]         } [EOL]         outputBuffer[outputPtr++] = (byte) ch; [EOL]     } [EOL]     return _byteBuilder.completeAndCoalesce(outputPtr); [EOL] }
@SuppressWarnings("resource") [EOL] public byte[] quoteAsUTF8(String text) { [EOL]     ByteArrayBuilder byteBuilder = _byteBuilder; [EOL]     if (byteBuilder == null) { [EOL]         _byteBuilder = byteBuilder = new ByteArrayBuilder(null); [EOL]     } [EOL]     int inputPtr = 0; [EOL]     int inputEnd = text.length(); [EOL]     int outputPtr = 0; [EOL]     byte[] outputBuffer = byteBuilder.resetAndGetFirstSegment(); [EOL]     main_loop: while (inputPtr < inputEnd) { [EOL]         final int[] escCodes = CharTypes.get7BitOutputEscapes(); [EOL]         inner_loop: while (true) { [EOL]             int ch = text.charAt(inputPtr); [EOL]             if (ch > 0x7F || escCodes[ch] != 0) { [EOL]                 break inner_loop; [EOL]             } [EOL]             if (outputPtr >= outputBuffer.length) { [EOL]                 outputBuffer = byteBuilder.finishCurrentSegment(); [EOL]                 outputPtr = 0; [EOL]             } [EOL]             outputBuffer[outputPtr++] = (byte) ch; [EOL]             if (++inputPtr >= inputEnd) { [EOL]                 break main_loop; [EOL]             } [EOL]         } [EOL]         if (outputPtr >= outputBuffer.length) { [EOL]             outputBuffer = byteBuilder.finishCurrentSegment(); [EOL]             outputPtr = 0; [EOL]         } [EOL]         int ch = (int) text.charAt(inputPtr++); [EOL]         if (ch <= 0x7F) { [EOL]             int escape = escCodes[ch]; [EOL]             outputPtr = _appendByteEscape(ch, escape, byteBuilder, outputPtr); [EOL]             outputBuffer = byteBuilder.getCurrentSegment(); [EOL]             continue main_loop; [EOL]         } else if (ch <= 0x7FF) { [EOL]             outputBuffer[outputPtr++] = (byte) (0xc0 | (ch >> 6)); [EOL]             ch = (0x80 | (ch & 0x3f)); [EOL]         } else { [EOL]             if (ch < SURR1_FIRST || ch > SURR2_LAST) { [EOL]                 outputBuffer[outputPtr++] = (byte) (0xe0 | (ch >> 12)); [EOL]                 if (outputPtr >= outputBuffer.length) { [EOL]                     outputBuffer = byteBuilder.finishCurrentSegment(); [EOL]                     outputPtr = 0; [EOL]                 } [EOL]                 outputBuffer[outputPtr++] = (byte) (0x80 | ((ch >> 6) & 0x3f)); [EOL]                 ch = (0x80 | (ch & 0x3f)); [EOL]             } else { [EOL]                 if (ch > SURR1_LAST) { [EOL]                     _illegalSurrogate(ch); [EOL]                 } [EOL]                 if (inputPtr >= inputEnd) { [EOL]                     _illegalSurrogate(ch); [EOL]                 } [EOL]                 ch = _convertSurrogate(ch, text.charAt(inputPtr++)); [EOL]                 if (ch > 0x10FFFF) { [EOL]                     _illegalSurrogate(ch); [EOL]                 } [EOL]                 outputBuffer[outputPtr++] = (byte) (0xf0 | (ch >> 18)); [EOL]                 if (outputPtr >= outputBuffer.length) { [EOL]                     outputBuffer = byteBuilder.finishCurrentSegment(); [EOL]                     outputPtr = 0; [EOL]                 } [EOL]                 outputBuffer[outputPtr++] = (byte) (0x80 | ((ch >> 12) & 0x3f)); [EOL]                 if (outputPtr >= outputBuffer.length) { [EOL]                     outputBuffer = byteBuilder.finishCurrentSegment(); [EOL]                     outputPtr = 0; [EOL]                 } [EOL]                 outputBuffer[outputPtr++] = (byte) (0x80 | ((ch >> 6) & 0x3f)); [EOL]                 ch = (0x80 | (ch & 0x3f)); [EOL]             } [EOL]         } [EOL]         if (outputPtr >= outputBuffer.length) { [EOL]             outputBuffer = byteBuilder.finishCurrentSegment(); [EOL]             outputPtr = 0; [EOL]         } [EOL]         outputBuffer[outputPtr++] = (byte) ch; [EOL]     } [EOL]     return _byteBuilder.completeAndCoalesce(outputPtr); [EOL] }
@SuppressWarnings("resource") [EOL] public byte[] quoteAsUTF8(String text) { [EOL]     ByteArrayBuilder byteBuilder = _byteBuilder; [EOL]     if (byteBuilder == null) { [EOL]         _byteBuilder = byteBuilder = new ByteArrayBuilder(null); [EOL]     } [EOL]     int inputPtr = 0; [EOL]     int inputEnd = text.length(); [EOL]     int outputPtr = 0; [EOL]     byte[] outputBuffer = byteBuilder.resetAndGetFirstSegment(); [EOL]     main_loop: while (inputPtr < inputEnd) { [EOL]         final int[] escCodes = CharTypes.get7BitOutputEscapes(); [EOL]         inner_loop: while (true) { [EOL]             int ch = text.charAt(inputPtr); [EOL]             if (ch > 0x7F || escCodes[ch] != 0) { [EOL]                 break inner_loop; [EOL]             } [EOL]             if (outputPtr >= outputBuffer.length) { [EOL]                 outputBuffer = byteBuilder.finishCurrentSegment(); [EOL]                 outputPtr = 0; [EOL]             } [EOL]             outputBuffer[outputPtr++] = (byte) ch; [EOL]             if (++inputPtr >= inputEnd) { [EOL]                 break main_loop; [EOL]             } [EOL]         } [EOL]         if (outputPtr >= outputBuffer.length) { [EOL]             outputBuffer = byteBuilder.finishCurrentSegment(); [EOL]             outputPtr = 0; [EOL]         } [EOL]         int ch = (int) text.charAt(inputPtr++); [EOL]         if (ch <= 0x7F) { [EOL]             int escape = escCodes[ch]; [EOL]             outputPtr = _appendByteEscape(ch, escape, byteBuilder, outputPtr); [EOL]             outputBuffer = byteBuilder.getCurrentSegment(); [EOL]             continue main_loop; [EOL]         } else if (ch <= 0x7FF) { [EOL]             outputBuffer[outputPtr++] = (byte) (0xc0 | (ch >> 6)); [EOL]             ch = (0x80 | (ch & 0x3f)); [EOL]         } else { [EOL]             if (ch < SURR1_FIRST || ch > SURR2_LAST) { [EOL]                 outputBuffer[outputPtr++] = (byte) (0xe0 | (ch >> 12)); [EOL]                 if (outputPtr >= outputBuffer.length) { [EOL]                     outputBuffer = byteBuilder.finishCurrentSegment(); [EOL]                     outputPtr = 0; [EOL]                 } [EOL]                 outputBuffer[outputPtr++] = (byte) (0x80 | ((ch >> 6) & 0x3f)); [EOL]                 ch = (0x80 | (ch & 0x3f)); [EOL]             } else { [EOL]                 if (ch > SURR1_LAST) { [EOL]                     _illegalSurrogate(ch); [EOL]                 } [EOL]                 if (inputPtr >= inputEnd) { [EOL]                     _illegalSurrogate(ch); [EOL]                 } [EOL]                 ch = _convertSurrogate(ch, text.charAt(inputPtr++)); [EOL]                 if (ch > 0x10FFFF) { [EOL]                     _illegalSurrogate(ch); [EOL]                 } [EOL]                 outputBuffer[outputPtr++] = (byte) (0xf0 | (ch >> 18)); [EOL]                 if (outputPtr >= outputBuffer.length) { [EOL]                     outputBuffer = byteBuilder.finishCurrentSegment(); [EOL]                     outputPtr = 0; [EOL]                 } [EOL]                 outputBuffer[outputPtr++] = (byte) (0x80 | ((ch >> 12) & 0x3f)); [EOL]                 if (outputPtr >= outputBuffer.length) { [EOL]                     outputBuffer = byteBuilder.finishCurrentSegment(); [EOL]                     outputPtr = 0; [EOL]                 } [EOL]                 outputBuffer[outputPtr++] = (byte) (0x80 | ((ch >> 6) & 0x3f)); [EOL]                 ch = (0x80 | (ch & 0x3f)); [EOL]             } [EOL]         } [EOL]         if (outputPtr >= outputBuffer.length) { [EOL]             outputBuffer = byteBuilder.finishCurrentSegment(); [EOL]             outputPtr = 0; [EOL]         } [EOL]         outputBuffer[outputPtr++] = (byte) ch; [EOL]     } [EOL]     return _byteBuilder.completeAndCoalesce(outputPtr); [EOL] }
@SuppressWarnings("resource") [EOL] public byte[] quoteAsUTF8(String text) { [EOL]     ByteArrayBuilder byteBuilder = _byteBuilder; [EOL]     if (byteBuilder == null) { [EOL]         _byteBuilder = byteBuilder = new ByteArrayBuilder(null); [EOL]     } [EOL]     int inputPtr = 0; [EOL]     int inputEnd = text.length(); [EOL]     int outputPtr = 0; [EOL]     byte[] outputBuffer = byteBuilder.resetAndGetFirstSegment(); [EOL]     main_loop: while (inputPtr < inputEnd) { [EOL]         final int[] escCodes = CharTypes.get7BitOutputEscapes(); [EOL]         inner_loop: while (true) { [EOL]             int ch = text.charAt(inputPtr); [EOL]             if (ch > 0x7F || escCodes[ch] != 0) { [EOL]                 break inner_loop; [EOL]             } [EOL]             if (outputPtr >= outputBuffer.length) { [EOL]                 outputBuffer = byteBuilder.finishCurrentSegment(); [EOL]                 outputPtr = 0; [EOL]             } [EOL]             outputBuffer[outputPtr++] = (byte) ch; [EOL]             if (++inputPtr >= inputEnd) { [EOL]                 break main_loop; [EOL]             } [EOL]         } [EOL]         if (outputPtr >= outputBuffer.length) { [EOL]             outputBuffer = byteBuilder.finishCurrentSegment(); [EOL]             outputPtr = 0; [EOL]         } [EOL]         int ch = (int) text.charAt(inputPtr++); [EOL]         if (ch <= 0x7F) { [EOL]             int escape = escCodes[ch]; [EOL]             outputPtr = _appendByteEscape(ch, escape, byteBuilder, outputPtr); [EOL]             outputBuffer = byteBuilder.getCurrentSegment(); [EOL]             continue main_loop; [EOL]         } else if (ch <= 0x7FF) { [EOL]             outputBuffer[outputPtr++] = (byte) (0xc0 | (ch >> 6)); [EOL]             ch = (0x80 | (ch & 0x3f)); [EOL]         } else { [EOL]             if (ch < SURR1_FIRST || ch > SURR2_LAST) { [EOL]                 outputBuffer[outputPtr++] = (byte) (0xe0 | (ch >> 12)); [EOL]                 if (outputPtr >= outputBuffer.length) { [EOL]                     outputBuffer = byteBuilder.finishCurrentSegment(); [EOL]                     outputPtr = 0; [EOL]                 } [EOL]                 outputBuffer[outputPtr++] = (byte) (0x80 | ((ch >> 6) & 0x3f)); [EOL]                 ch = (0x80 | (ch & 0x3f)); [EOL]             } else { [EOL]                 if (ch > SURR1_LAST) { [EOL]                     _illegalSurrogate(ch); [EOL]                 } [EOL]                 if (inputPtr >= inputEnd) { [EOL]                     _illegalSurrogate(ch); [EOL]                 } [EOL]                 ch = _convertSurrogate(ch, text.charAt(inputPtr++)); [EOL]                 if (ch > 0x10FFFF) { [EOL]                     _illegalSurrogate(ch); [EOL]                 } [EOL]                 outputBuffer[outputPtr++] = (byte) (0xf0 | (ch >> 18)); [EOL]                 if (outputPtr >= outputBuffer.length) { [EOL]                     outputBuffer = byteBuilder.finishCurrentSegment(); [EOL]                     outputPtr = 0; [EOL]                 } [EOL]                 outputBuffer[outputPtr++] = (byte) (0x80 | ((ch >> 12) & 0x3f)); [EOL]                 if (outputPtr >= outputBuffer.length) { [EOL]                     outputBuffer = byteBuilder.finishCurrentSegment(); [EOL]                     outputPtr = 0; [EOL]                 } [EOL]                 outputBuffer[outputPtr++] = (byte) (0x80 | ((ch >> 6) & 0x3f)); [EOL]                 ch = (0x80 | (ch & 0x3f)); [EOL]             } [EOL]         } [EOL]         if (outputPtr >= outputBuffer.length) { [EOL]             outputBuffer = byteBuilder.finishCurrentSegment(); [EOL]             outputPtr = 0; [EOL]         } [EOL]         outputBuffer[outputPtr++] = (byte) ch; [EOL]     } [EOL]     return _byteBuilder.completeAndCoalesce(outputPtr); [EOL] }
private int _appendByteEscape(int ch, int escCode, ByteArrayBuilder byteBuilder, int ptr) { [EOL]     byteBuilder.setCurrentSegmentLength(ptr); [EOL]     byteBuilder.append(INT_BACKSLASH); [EOL]     if (escCode < 0) { [EOL]         byteBuilder.append(INT_U); [EOL]         if (ch > 0xFF) { [EOL]             int hi = (ch >> 8); [EOL]             byteBuilder.append(HEX_BYTES[hi >> 4]); [EOL]             byteBuilder.append(HEX_BYTES[hi & 0xF]); [EOL]             ch &= 0xFF; [EOL]         } else { [EOL]             byteBuilder.append(INT_0); [EOL]             byteBuilder.append(INT_0); [EOL]         } [EOL]         byteBuilder.append(HEX_BYTES[ch >> 4]); [EOL]         byteBuilder.append(HEX_BYTES[ch & 0xF]); [EOL]     } else { [EOL]         byteBuilder.append((byte) escCode); [EOL]     } [EOL]     return byteBuilder.getCurrentSegmentLength(); [EOL] }
private int _appendByteEscape(int ch, int escCode, ByteArrayBuilder byteBuilder, int ptr) { [EOL]     byteBuilder.setCurrentSegmentLength(ptr); [EOL]     byteBuilder.append(INT_BACKSLASH); [EOL]     if (escCode < 0) { [EOL]         byteBuilder.append(INT_U); [EOL]         if (ch > 0xFF) { [EOL]             int hi = (ch >> 8); [EOL]             byteBuilder.append(HEX_BYTES[hi >> 4]); [EOL]             byteBuilder.append(HEX_BYTES[hi & 0xF]); [EOL]             ch &= 0xFF; [EOL]         } else { [EOL]             byteBuilder.append(INT_0); [EOL]             byteBuilder.append(INT_0); [EOL]         } [EOL]         byteBuilder.append(HEX_BYTES[ch >> 4]); [EOL]         byteBuilder.append(HEX_BYTES[ch & 0xF]); [EOL]     } else { [EOL]         byteBuilder.append((byte) escCode); [EOL]     } [EOL]     return byteBuilder.getCurrentSegmentLength(); [EOL] }
private int _appendByteEscape(int ch, int escCode, ByteArrayBuilder byteBuilder, int ptr) { [EOL]     byteBuilder.setCurrentSegmentLength(ptr); [EOL]     byteBuilder.append(INT_BACKSLASH); [EOL]     if (escCode < 0) { [EOL]         byteBuilder.append(INT_U); [EOL]         if (ch > 0xFF) { [EOL]             int hi = (ch >> 8); [EOL]             byteBuilder.append(HEX_BYTES[hi >> 4]); [EOL]             byteBuilder.append(HEX_BYTES[hi & 0xF]); [EOL]             ch &= 0xFF; [EOL]         } else { [EOL]             byteBuilder.append(INT_0); [EOL]             byteBuilder.append(INT_0); [EOL]         } [EOL]         byteBuilder.append(HEX_BYTES[ch >> 4]); [EOL]         byteBuilder.append(HEX_BYTES[ch & 0xF]); [EOL]     } else { [EOL]         byteBuilder.append((byte) escCode); [EOL]     } [EOL]     return byteBuilder.getCurrentSegmentLength(); [EOL] }
@Override [EOL] public boolean hasCurrentToken() { [EOL]     return _currToken != null; [EOL] } protected ParserMinimalBase(); protected ParserMinimalBase(int features); public Version version(); public abstract JsonToken nextToken() throws IOException, JsonParseException; public JsonToken getCurrentToken(); public boolean hasCurrentToken(); public JsonToken nextValue() throws IOException, JsonParseException; public JsonParser skipChildren() throws IOException, JsonParseException; protected abstract void _handleEOF() throws JsonParseException; public abstract String getCurrentName() throws IOException, JsonParseException; public abstract void close() throws IOException; public abstract boolean isClosed(); public abstract JsonStreamContext getParsingContext(); public void clearCurrentToken(); public JsonToken getLastClearedToken(); public abstract void overrideCurrentName(String name); public abstract String getText() throws IOException, JsonParseException; public abstract char[] getTextCharacters() throws IOException, JsonParseException; public abstract boolean hasTextCharacters(); public abstract int getTextLength() throws IOException, JsonParseException; public abstract int getTextOffset() throws IOException, JsonParseException; public abstract byte[] getBinaryValue(Base64Variant b64variant) throws IOException, JsonParseException; public boolean getValueAsBoolean(boolean defaultValue) throws IOException, JsonParseException; public int getValueAsInt(int defaultValue) throws IOException, JsonParseException; public long getValueAsLong(long defaultValue) throws IOException, JsonParseException; public double getValueAsDouble(double defaultValue) throws IOException, JsonParseException; public String getValueAsString(String defaultValue) throws IOException, JsonParseException; protected void _decodeBase64(String str, ByteArrayBuilder builder, Base64Variant b64variant) throws IOException, JsonParseException; protected void _reportInvalidBase64(Base64Variant b64variant, char ch, int bindex, String msg) throws JsonParseException; protected void _reportBase64EOF() throws JsonParseException; protected boolean _hasTextualNull(String value); protected void _reportUnexpectedChar(int ch, String comment) throws JsonParseException; protected void _reportInvalidEOF() throws JsonParseException; protected void _reportInvalidEOF(String msg) throws JsonParseException; protected void _reportInvalidEOFInValue() throws JsonParseException; protected void _throwInvalidSpace(int i) throws JsonParseException; protected void _throwUnquotedSpace(int i, String ctxtDesc) throws JsonParseException; protected char _handleUnrecognizedCharacterEscape(char ch) throws JsonProcessingException; protected static final String _getCharDesc(int ch); protected final void _reportError(String msg) throws JsonParseException; protected final void _wrapError(String msg, Throwable t) throws JsonParseException; protected final void _throwInternal(); protected final JsonParseException _constructError(String msg, Throwable t); int INT_TAB=Optional['\t']; int INT_LF=Optional['\n']; int INT_CR=Optional['\r']; int INT_SPACE=Optional[0x0020]; int INT_LBRACKET=Optional['[']; int INT_RBRACKET=Optional[']']; int INT_LCURLY=Optional['{']; int INT_RCURLY=Optional['}
@Override [EOL] public boolean hasCurrentToken() { [EOL]     return _currToken != null; [EOL] } protected ParserMinimalBase(); protected ParserMinimalBase(int features); public Version version(); public abstract JsonToken nextToken() throws IOException, JsonParseException; public JsonToken getCurrentToken(); public boolean hasCurrentToken(); public JsonToken nextValue() throws IOException, JsonParseException; public JsonParser skipChildren() throws IOException, JsonParseException; protected abstract void _handleEOF() throws JsonParseException; public abstract String getCurrentName() throws IOException, JsonParseException; public abstract void close() throws IOException; public abstract boolean isClosed(); public abstract JsonStreamContext getParsingContext(); public void clearCurrentToken(); public JsonToken getLastClearedToken(); public abstract void overrideCurrentName(String name); public abstract String getText() throws IOException, JsonParseException; public abstract char[] getTextCharacters() throws IOException, JsonParseException; public abstract boolean hasTextCharacters(); public abstract int getTextLength() throws IOException, JsonParseException; public abstract int getTextOffset() throws IOException, JsonParseException; public abstract byte[] getBinaryValue(Base64Variant b64variant) throws IOException, JsonParseException; public boolean getValueAsBoolean(boolean defaultValue) throws IOException, JsonParseException; public int getValueAsInt(int defaultValue) throws IOException, JsonParseException; public long getValueAsLong(long defaultValue) throws IOException, JsonParseException; public double getValueAsDouble(double defaultValue) throws IOException, JsonParseException; public String getValueAsString(String defaultValue) throws IOException, JsonParseException; protected void _decodeBase64(String str, ByteArrayBuilder builder, Base64Variant b64variant) throws IOException, JsonParseException; protected void _reportInvalidBase64(Base64Variant b64variant, char ch, int bindex, String msg) throws JsonParseException; protected void _reportBase64EOF() throws JsonParseException; protected boolean _hasTextualNull(String value); protected void _reportUnexpectedChar(int ch, String comment) throws JsonParseException; protected void _reportInvalidEOF() throws JsonParseException; protected void _reportInvalidEOF(String msg) throws JsonParseException; protected void _reportInvalidEOFInValue() throws JsonParseException; protected void _throwInvalidSpace(int i) throws JsonParseException; protected void _throwUnquotedSpace(int i, String ctxtDesc) throws JsonParseException; protected char _handleUnrecognizedCharacterEscape(char ch) throws JsonProcessingException; protected static final String _getCharDesc(int ch); protected final void _reportError(String msg) throws JsonParseException; protected final void _wrapError(String msg, Throwable t) throws JsonParseException; protected final void _throwInternal(); protected final JsonParseException _constructError(String msg, Throwable t); int INT_TAB=Optional['\t']; int INT_LF=Optional['\n']; int INT_CR=Optional['\r']; int INT_SPACE=Optional[0x0020]; int INT_LBRACKET=Optional['[']; int INT_RBRACKET=Optional[']']; int INT_LCURLY=Optional['{']; int INT_RCURLY=Optional['}
@Override [EOL] public void clearCurrentToken() { [EOL]     if (_currToken != null) { [EOL]         _lastClearedToken = _currToken; [EOL]         _currToken = null; [EOL]     } [EOL] } protected ParserMinimalBase(); protected ParserMinimalBase(int features); public Version version(); public abstract JsonToken nextToken() throws IOException, JsonParseException; public JsonToken getCurrentToken(); public boolean hasCurrentToken(); public JsonToken nextValue() throws IOException, JsonParseException; public JsonParser skipChildren() throws IOException, JsonParseException; protected abstract void _handleEOF() throws JsonParseException; public abstract String getCurrentName() throws IOException, JsonParseException; public abstract void close() throws IOException; public abstract boolean isClosed(); public abstract JsonStreamContext getParsingContext(); public void clearCurrentToken(); public JsonToken getLastClearedToken(); public abstract void overrideCurrentName(String name); public abstract String getText() throws IOException, JsonParseException; public abstract char[] getTextCharacters() throws IOException, JsonParseException; public abstract boolean hasTextCharacters(); public abstract int getTextLength() throws IOException, JsonParseException; public abstract int getTextOffset() throws IOException, JsonParseException; public abstract byte[] getBinaryValue(Base64Variant b64variant) throws IOException, JsonParseException; public boolean getValueAsBoolean(boolean defaultValue) throws IOException, JsonParseException; public int getValueAsInt(int defaultValue) throws IOException, JsonParseException; public long getValueAsLong(long defaultValue) throws IOException, JsonParseException; public double getValueAsDouble(double defaultValue) throws IOException, JsonParseException; public String getValueAsString(String defaultValue) throws IOException, JsonParseException; protected void _decodeBase64(String str, ByteArrayBuilder builder, Base64Variant b64variant) throws IOException, JsonParseException; protected void _reportInvalidBase64(Base64Variant b64variant, char ch, int bindex, String msg) throws JsonParseException; protected void _reportBase64EOF() throws JsonParseException; protected boolean _hasTextualNull(String value); protected void _reportUnexpectedChar(int ch, String comment) throws JsonParseException; protected void _reportInvalidEOF() throws JsonParseException; protected void _reportInvalidEOF(String msg) throws JsonParseException; protected void _reportInvalidEOFInValue() throws JsonParseException; protected void _throwInvalidSpace(int i) throws JsonParseException; protected void _throwUnquotedSpace(int i, String ctxtDesc) throws JsonParseException; protected char _handleUnrecognizedCharacterEscape(char ch) throws JsonProcessingException; protected static final String _getCharDesc(int ch); protected final void _reportError(String msg) throws JsonParseException; protected final void _wrapError(String msg, Throwable t) throws JsonParseException; protected final void _throwInternal(); protected final JsonParseException _constructError(String msg, Throwable t); int INT_TAB=Optional['\t']; int INT_LF=Optional['\n']; int INT_CR=Optional['\r']; int INT_SPACE=Optional[0x0020]; int INT_LBRACKET=Optional['[']; int INT_RBRACKET=Optional[']']; int INT_LCURLY=Optional['{']; int INT_RCURLY=Optional['}
@Override [EOL] public void clearCurrentToken() { [EOL]     if (_currToken != null) { [EOL]         _lastClearedToken = _currToken; [EOL]         _currToken = null; [EOL]     } [EOL] } protected ParserMinimalBase(); protected ParserMinimalBase(int features); public Version version(); public abstract JsonToken nextToken() throws IOException, JsonParseException; public JsonToken getCurrentToken(); public boolean hasCurrentToken(); public JsonToken nextValue() throws IOException, JsonParseException; public JsonParser skipChildren() throws IOException, JsonParseException; protected abstract void _handleEOF() throws JsonParseException; public abstract String getCurrentName() throws IOException, JsonParseException; public abstract void close() throws IOException; public abstract boolean isClosed(); public abstract JsonStreamContext getParsingContext(); public void clearCurrentToken(); public JsonToken getLastClearedToken(); public abstract void overrideCurrentName(String name); public abstract String getText() throws IOException, JsonParseException; public abstract char[] getTextCharacters() throws IOException, JsonParseException; public abstract boolean hasTextCharacters(); public abstract int getTextLength() throws IOException, JsonParseException; public abstract int getTextOffset() throws IOException, JsonParseException; public abstract byte[] getBinaryValue(Base64Variant b64variant) throws IOException, JsonParseException; public boolean getValueAsBoolean(boolean defaultValue) throws IOException, JsonParseException; public int getValueAsInt(int defaultValue) throws IOException, JsonParseException; public long getValueAsLong(long defaultValue) throws IOException, JsonParseException; public double getValueAsDouble(double defaultValue) throws IOException, JsonParseException; public String getValueAsString(String defaultValue) throws IOException, JsonParseException; protected void _decodeBase64(String str, ByteArrayBuilder builder, Base64Variant b64variant) throws IOException, JsonParseException; protected void _reportInvalidBase64(Base64Variant b64variant, char ch, int bindex, String msg) throws JsonParseException; protected void _reportBase64EOF() throws JsonParseException; protected boolean _hasTextualNull(String value); protected void _reportUnexpectedChar(int ch, String comment) throws JsonParseException; protected void _reportInvalidEOF() throws JsonParseException; protected void _reportInvalidEOF(String msg) throws JsonParseException; protected void _reportInvalidEOFInValue() throws JsonParseException; protected void _throwInvalidSpace(int i) throws JsonParseException; protected void _throwUnquotedSpace(int i, String ctxtDesc) throws JsonParseException; protected char _handleUnrecognizedCharacterEscape(char ch) throws JsonProcessingException; protected static final String _getCharDesc(int ch); protected final void _reportError(String msg) throws JsonParseException; protected final void _wrapError(String msg, Throwable t) throws JsonParseException; protected final void _throwInternal(); protected final JsonParseException _constructError(String msg, Throwable t); int INT_TAB=Optional['\t']; int INT_LF=Optional['\n']; int INT_CR=Optional['\r']; int INT_SPACE=Optional[0x0020]; int INT_LBRACKET=Optional['[']; int INT_RBRACKET=Optional[']']; int INT_LCURLY=Optional['{']; int INT_RCURLY=Optional['}
protected void _reportUnexpectedChar(int ch, String comment) throws JsonParseException { [EOL]     String msg = "Unexpected character (" + _getCharDesc(ch) + ")"; [EOL]     if (comment != null) { [EOL]         msg += ": " + comment; [EOL]     } [EOL]     _reportError(msg); [EOL] } protected ParserMinimalBase(); protected ParserMinimalBase(int features); public Version version(); public abstract JsonToken nextToken() throws IOException, JsonParseException; public JsonToken getCurrentToken(); public boolean hasCurrentToken(); public JsonToken nextValue() throws IOException, JsonParseException; public JsonParser skipChildren() throws IOException, JsonParseException; protected abstract void _handleEOF() throws JsonParseException; public abstract String getCurrentName() throws IOException, JsonParseException; public abstract void close() throws IOException; public abstract boolean isClosed(); public abstract JsonStreamContext getParsingContext(); public void clearCurrentToken(); public JsonToken getLastClearedToken(); public abstract void overrideCurrentName(String name); public abstract String getText() throws IOException, JsonParseException; public abstract char[] getTextCharacters() throws IOException, JsonParseException; public abstract boolean hasTextCharacters(); public abstract int getTextLength() throws IOException, JsonParseException; public abstract int getTextOffset() throws IOException, JsonParseException; public abstract byte[] getBinaryValue(Base64Variant b64variant) throws IOException, JsonParseException; public boolean getValueAsBoolean(boolean defaultValue) throws IOException, JsonParseException; public int getValueAsInt(int defaultValue) throws IOException, JsonParseException; public long getValueAsLong(long defaultValue) throws IOException, JsonParseException; public double getValueAsDouble(double defaultValue) throws IOException, JsonParseException; public String getValueAsString(String defaultValue) throws IOException, JsonParseException; protected void _decodeBase64(String str, ByteArrayBuilder builder, Base64Variant b64variant) throws IOException, JsonParseException; protected void _reportInvalidBase64(Base64Variant b64variant, char ch, int bindex, String msg) throws JsonParseException; protected void _reportBase64EOF() throws JsonParseException; protected boolean _hasTextualNull(String value); protected void _reportUnexpectedChar(int ch, String comment) throws JsonParseException; protected void _reportInvalidEOF() throws JsonParseException; protected void _reportInvalidEOF(String msg) throws JsonParseException; protected void _reportInvalidEOFInValue() throws JsonParseException; protected void _throwInvalidSpace(int i) throws JsonParseException; protected void _throwUnquotedSpace(int i, String ctxtDesc) throws JsonParseException; protected char _handleUnrecognizedCharacterEscape(char ch) throws JsonProcessingException; protected static final String _getCharDesc(int ch); protected final void _reportError(String msg) throws JsonParseException; protected final void _wrapError(String msg, Throwable t) throws JsonParseException; protected final void _throwInternal(); protected final JsonParseException _constructError(String msg, Throwable t); int INT_TAB=Optional['\t']; int INT_LF=Optional['\n']; int INT_CR=Optional['\r']; int INT_SPACE=Optional[0x0020]; int INT_LBRACKET=Optional['[']; int INT_RBRACKET=Optional[']']; int INT_LCURLY=Optional['{']; int INT_RCURLY=Optional['}
protected void _reportInvalidEOF(String msg) throws JsonParseException { [EOL]     _reportError("Unexpected end-of-input" + msg); [EOL] } protected ParserMinimalBase(); protected ParserMinimalBase(int features); public Version version(); public abstract JsonToken nextToken() throws IOException, JsonParseException; public JsonToken getCurrentToken(); public boolean hasCurrentToken(); public JsonToken nextValue() throws IOException, JsonParseException; public JsonParser skipChildren() throws IOException, JsonParseException; protected abstract void _handleEOF() throws JsonParseException; public abstract String getCurrentName() throws IOException, JsonParseException; public abstract void close() throws IOException; public abstract boolean isClosed(); public abstract JsonStreamContext getParsingContext(); public void clearCurrentToken(); public JsonToken getLastClearedToken(); public abstract void overrideCurrentName(String name); public abstract String getText() throws IOException, JsonParseException; public abstract char[] getTextCharacters() throws IOException, JsonParseException; public abstract boolean hasTextCharacters(); public abstract int getTextLength() throws IOException, JsonParseException; public abstract int getTextOffset() throws IOException, JsonParseException; public abstract byte[] getBinaryValue(Base64Variant b64variant) throws IOException, JsonParseException; public boolean getValueAsBoolean(boolean defaultValue) throws IOException, JsonParseException; public int getValueAsInt(int defaultValue) throws IOException, JsonParseException; public long getValueAsLong(long defaultValue) throws IOException, JsonParseException; public double getValueAsDouble(double defaultValue) throws IOException, JsonParseException; public String getValueAsString(String defaultValue) throws IOException, JsonParseException; protected void _decodeBase64(String str, ByteArrayBuilder builder, Base64Variant b64variant) throws IOException, JsonParseException; protected void _reportInvalidBase64(Base64Variant b64variant, char ch, int bindex, String msg) throws JsonParseException; protected void _reportBase64EOF() throws JsonParseException; protected boolean _hasTextualNull(String value); protected void _reportUnexpectedChar(int ch, String comment) throws JsonParseException; protected void _reportInvalidEOF() throws JsonParseException; protected void _reportInvalidEOF(String msg) throws JsonParseException; protected void _reportInvalidEOFInValue() throws JsonParseException; protected void _throwInvalidSpace(int i) throws JsonParseException; protected void _throwUnquotedSpace(int i, String ctxtDesc) throws JsonParseException; protected char _handleUnrecognizedCharacterEscape(char ch) throws JsonProcessingException; protected static final String _getCharDesc(int ch); protected final void _reportError(String msg) throws JsonParseException; protected final void _wrapError(String msg, Throwable t) throws JsonParseException; protected final void _throwInternal(); protected final JsonParseException _constructError(String msg, Throwable t); int INT_TAB=Optional['\t']; int INT_LF=Optional['\n']; int INT_CR=Optional['\r']; int INT_SPACE=Optional[0x0020]; int INT_LBRACKET=Optional['[']; int INT_RBRACKET=Optional[']']; int INT_LCURLY=Optional['{']; int INT_RCURLY=Optional['}
protected void _throwUnquotedSpace(int i, String ctxtDesc) throws JsonParseException { [EOL]     if (!isEnabled(Feature.ALLOW_UNQUOTED_CONTROL_CHARS) || i >= INT_SPACE) { [EOL]         char c = (char) i; [EOL]         String msg = "Illegal unquoted character (" + _getCharDesc(c) + "): has to be escaped using backslash to be included in " + ctxtDesc; [EOL]         _reportError(msg); [EOL]     } [EOL] } protected ParserMinimalBase(); protected ParserMinimalBase(int features); public Version version(); public abstract JsonToken nextToken() throws IOException, JsonParseException; public JsonToken getCurrentToken(); public boolean hasCurrentToken(); public JsonToken nextValue() throws IOException, JsonParseException; public JsonParser skipChildren() throws IOException, JsonParseException; protected abstract void _handleEOF() throws JsonParseException; public abstract String getCurrentName() throws IOException, JsonParseException; public abstract void close() throws IOException; public abstract boolean isClosed(); public abstract JsonStreamContext getParsingContext(); public void clearCurrentToken(); public JsonToken getLastClearedToken(); public abstract void overrideCurrentName(String name); public abstract String getText() throws IOException, JsonParseException; public abstract char[] getTextCharacters() throws IOException, JsonParseException; public abstract boolean hasTextCharacters(); public abstract int getTextLength() throws IOException, JsonParseException; public abstract int getTextOffset() throws IOException, JsonParseException; public abstract byte[] getBinaryValue(Base64Variant b64variant) throws IOException, JsonParseException; public boolean getValueAsBoolean(boolean defaultValue) throws IOException, JsonParseException; public int getValueAsInt(int defaultValue) throws IOException, JsonParseException; public long getValueAsLong(long defaultValue) throws IOException, JsonParseException; public double getValueAsDouble(double defaultValue) throws IOException, JsonParseException; public String getValueAsString(String defaultValue) throws IOException, JsonParseException; protected void _decodeBase64(String str, ByteArrayBuilder builder, Base64Variant b64variant) throws IOException, JsonParseException; protected void _reportInvalidBase64(Base64Variant b64variant, char ch, int bindex, String msg) throws JsonParseException; protected void _reportBase64EOF() throws JsonParseException; protected boolean _hasTextualNull(String value); protected void _reportUnexpectedChar(int ch, String comment) throws JsonParseException; protected void _reportInvalidEOF() throws JsonParseException; protected void _reportInvalidEOF(String msg) throws JsonParseException; protected void _reportInvalidEOFInValue() throws JsonParseException; protected void _throwInvalidSpace(int i) throws JsonParseException; protected void _throwUnquotedSpace(int i, String ctxtDesc) throws JsonParseException; protected char _handleUnrecognizedCharacterEscape(char ch) throws JsonProcessingException; protected static final String _getCharDesc(int ch); protected final void _reportError(String msg) throws JsonParseException; protected final void _wrapError(String msg, Throwable t) throws JsonParseException; protected final void _throwInternal(); protected final JsonParseException _constructError(String msg, Throwable t); int INT_TAB=Optional['\t']; int INT_LF=Optional['\n']; int INT_CR=Optional['\r']; int INT_SPACE=Optional[0x0020]; int INT_LBRACKET=Optional['[']; int INT_RBRACKET=Optional[']']; int INT_LCURLY=Optional['{']; int INT_RCURLY=Optional['}
protected final static String _getCharDesc(int ch) { [EOL]     char c = (char) ch; [EOL]     if (Character.isISOControl(c)) { [EOL]         return "(CTRL-CHAR, code " + ch + ")"; [EOL]     } [EOL]     if (ch > 255) { [EOL]         return "'" + c + "' (code " + ch + " / 0x" + Integer.toHexString(ch) + ")"; [EOL]     } [EOL]     return "'" + c + "' (code " + ch + ")"; [EOL] } protected ParserMinimalBase(); protected ParserMinimalBase(int features); public Version version(); public abstract JsonToken nextToken() throws IOException, JsonParseException; public JsonToken getCurrentToken(); public boolean hasCurrentToken(); public JsonToken nextValue() throws IOException, JsonParseException; public JsonParser skipChildren() throws IOException, JsonParseException; protected abstract void _handleEOF() throws JsonParseException; public abstract String getCurrentName() throws IOException, JsonParseException; public abstract void close() throws IOException; public abstract boolean isClosed(); public abstract JsonStreamContext getParsingContext(); public void clearCurrentToken(); public JsonToken getLastClearedToken(); public abstract void overrideCurrentName(String name); public abstract String getText() throws IOException, JsonParseException; public abstract char[] getTextCharacters() throws IOException, JsonParseException; public abstract boolean hasTextCharacters(); public abstract int getTextLength() throws IOException, JsonParseException; public abstract int getTextOffset() throws IOException, JsonParseException; public abstract byte[] getBinaryValue(Base64Variant b64variant) throws IOException, JsonParseException; public boolean getValueAsBoolean(boolean defaultValue) throws IOException, JsonParseException; public int getValueAsInt(int defaultValue) throws IOException, JsonParseException; public long getValueAsLong(long defaultValue) throws IOException, JsonParseException; public double getValueAsDouble(double defaultValue) throws IOException, JsonParseException; public String getValueAsString(String defaultValue) throws IOException, JsonParseException; protected void _decodeBase64(String str, ByteArrayBuilder builder, Base64Variant b64variant) throws IOException, JsonParseException; protected void _reportInvalidBase64(Base64Variant b64variant, char ch, int bindex, String msg) throws JsonParseException; protected void _reportBase64EOF() throws JsonParseException; protected boolean _hasTextualNull(String value); protected void _reportUnexpectedChar(int ch, String comment) throws JsonParseException; protected void _reportInvalidEOF() throws JsonParseException; protected void _reportInvalidEOF(String msg) throws JsonParseException; protected void _reportInvalidEOFInValue() throws JsonParseException; protected void _throwInvalidSpace(int i) throws JsonParseException; protected void _throwUnquotedSpace(int i, String ctxtDesc) throws JsonParseException; protected char _handleUnrecognizedCharacterEscape(char ch) throws JsonProcessingException; protected static final String _getCharDesc(int ch); protected final void _reportError(String msg) throws JsonParseException; protected final void _wrapError(String msg, Throwable t) throws JsonParseException; protected final void _throwInternal(); protected final JsonParseException _constructError(String msg, Throwable t); int INT_TAB=Optional['\t']; int INT_LF=Optional['\n']; int INT_CR=Optional['\r']; int INT_SPACE=Optional[0x0020]; int INT_LBRACKET=Optional['[']; int INT_RBRACKET=Optional[']']; int INT_LCURLY=Optional['{']; int INT_RCURLY=Optional['}
protected JsonWriteContext(int type, JsonWriteContext parent) { [EOL]     super(); [EOL]     _type = type; [EOL]     _parent = parent; [EOL]     _index = -1; [EOL] }
protected JsonWriteContext(int type, JsonWriteContext parent) { [EOL]     super(); [EOL]     _type = type; [EOL]     _parent = parent; [EOL]     _index = -1; [EOL] }
protected JsonWriteContext(int type, JsonWriteContext parent) { [EOL]     super(); [EOL]     _type = type; [EOL]     _parent = parent; [EOL]     _index = -1; [EOL] }
public static JsonWriteContext createRootContext() { [EOL]     return new JsonWriteContext(TYPE_ROOT, null); [EOL] }
public JsonFactory copy() { [EOL]     _checkInvalidCopy(JsonFactory.class); [EOL]     return new JsonFactory(this, null); [EOL] }
protected void _checkInvalidCopy(Class<?> exp) { [EOL]     if (getClass() != exp) { [EOL]         throw new IllegalStateException("Failed copy(): " + getClass().getName() + " (version: " + version() + ") does not override copy(); it has to"); [EOL]     } [EOL] }
protected void _checkInvalidCopy(Class<?> exp) { [EOL]     if (getClass() != exp) { [EOL]         throw new IllegalStateException("Failed copy(): " + getClass().getName() + " (version: " + version() + ") does not override copy(); it has to"); [EOL]     } [EOL] }
public String getFormatName() { [EOL]     if (getClass() == JsonFactory.class) { [EOL]         return FORMAT_NAME_JSON; [EOL]     } [EOL]     return null; [EOL] }
public String getFormatName() { [EOL]     if (getClass() == JsonFactory.class) { [EOL]         return FORMAT_NAME_JSON; [EOL]     } [EOL]     return null; [EOL] }
public MatchStrength hasFormat(InputAccessor acc) throws IOException { [EOL]     if (getClass() == JsonFactory.class) { [EOL]         return hasJSONFormat(acc); [EOL]     } [EOL]     return null; [EOL] }
protected MatchStrength hasJSONFormat(InputAccessor acc) throws IOException { [EOL]     return ByteSourceJsonBootstrapper.hasJSONFormat(acc); [EOL] }
protected MatchStrength hasJSONFormat(InputAccessor acc) throws IOException { [EOL]     return ByteSourceJsonBootstrapper.hasJSONFormat(acc); [EOL] }
protected MatchStrength hasJSONFormat(InputAccessor acc) throws IOException { [EOL]     return ByteSourceJsonBootstrapper.hasJSONFormat(acc); [EOL] }
public JsonFactory enable(JsonParser.Feature f) { [EOL]     _parserFeatures |= f.getMask(); [EOL]     return this; [EOL] }
public final boolean isEnabled(JsonParser.Feature f) { [EOL]     return (_parserFeatures & f.getMask()) != 0; [EOL] }
public final boolean isEnabled(JsonParser.Feature f) { [EOL]     return (_parserFeatures & f.getMask()) != 0; [EOL] }
public final JsonFactory configure(JsonGenerator.Feature f, boolean state) { [EOL]     return state ? enable(f) : disable(f); [EOL] }
public final JsonFactory configure(JsonGenerator.Feature f, boolean state) { [EOL]     return state ? enable(f) : disable(f); [EOL] }
public JsonFactory enable(JsonGenerator.Feature f) { [EOL]     _generatorFeatures |= f.getMask(); [EOL]     return this; [EOL] }
public JsonFactory disable(JsonGenerator.Feature f) { [EOL]     _generatorFeatures &= ~f.getMask(); [EOL]     return this; [EOL] }
public JsonFactory disable(JsonGenerator.Feature f) { [EOL]     _generatorFeatures &= ~f.getMask(); [EOL]     return this; [EOL] }
public final boolean isEnabled(JsonGenerator.Feature f) { [EOL]     return (_generatorFeatures & f.getMask()) != 0; [EOL] }
public final boolean isEnabled(JsonGenerator.Feature f) { [EOL]     return (_generatorFeatures & f.getMask()) != 0; [EOL] }
Name2(String name, int hash, int quad1, int quad2) { [EOL]     super(name, hash); [EOL]     mQuad1 = quad1; [EOL]     mQuad2 = quad2; [EOL] }
