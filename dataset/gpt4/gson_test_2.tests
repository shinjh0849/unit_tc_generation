public void testUsingDashesInstead() throws Exception { [EOL]     namingPolicy = new LowerCamelCaseSeparatorNamingPolicy("-"); [EOL]     String translatedName = namingPolicy.translateName("testUsingDashesInstead", CLASS, null); [EOL]     assertEquals("test-using-dashes-instead", translatedName); [EOL] }
public void testUsingDashesInstead() throws Exception { [EOL]     namingPolicy = new LowerCamelCaseSeparatorNamingPolicy("-"); [EOL]     String translatedName = namingPolicy.translateName("testUsingDashesInstead", CLASS, null); [EOL]     assertEquals("test-using-dashes-instead", translatedName); [EOL] }
public void testTypeVariableField() throws Exception { [EOL]     Field f = obj.getClass().getField("typeVariableObj"); [EOL]     TypeInfo typeInfo = TypeInfoFactory.getTypeInfoForField(f, OBJ_TYPE); [EOL]     assertFalse(typeInfo.isArray()); [EOL]     assertFalse(typeInfo.isEnum()); [EOL]     assertEquals(Integer.class, typeInfo.getActualType()); [EOL]     assertEquals(Integer.class, typeInfo.getRawClass()); [EOL] }
public void testTypeVariableField() throws Exception { [EOL]     Field f = obj.getClass().getField("typeVariableObj"); [EOL]     TypeInfo typeInfo = TypeInfoFactory.getTypeInfoForField(f, OBJ_TYPE); [EOL]     assertFalse(typeInfo.isArray()); [EOL]     assertFalse(typeInfo.isEnum()); [EOL]     assertEquals(Integer.class, typeInfo.getActualType()); [EOL]     assertEquals(Integer.class, typeInfo.getRawClass()); [EOL] }
public void testTypeVariableField() throws Exception { [EOL]     Field f = obj.getClass().getField("typeVariableObj"); [EOL]     TypeInfo typeInfo = TypeInfoFactory.getTypeInfoForField(f, OBJ_TYPE); [EOL]     assertFalse(typeInfo.isArray()); [EOL]     assertFalse(typeInfo.isEnum()); [EOL]     assertEquals(Integer.class, typeInfo.getActualType()); [EOL]     assertEquals(Integer.class, typeInfo.getRawClass()); [EOL] }
public void testTypeVariableField() throws Exception { [EOL]     Field f = obj.getClass().getField("typeVariableObj"); [EOL]     TypeInfo typeInfo = TypeInfoFactory.getTypeInfoForField(f, OBJ_TYPE); [EOL]     assertFalse(typeInfo.isArray()); [EOL]     assertFalse(typeInfo.isEnum()); [EOL]     assertEquals(Integer.class, typeInfo.getActualType()); [EOL]     assertEquals(Integer.class, typeInfo.getRawClass()); [EOL] }
public void testTypeVariableField() throws Exception { [EOL]     Field f = obj.getClass().getField("typeVariableObj"); [EOL]     TypeInfo typeInfo = TypeInfoFactory.getTypeInfoForField(f, OBJ_TYPE); [EOL]     assertFalse(typeInfo.isArray()); [EOL]     assertFalse(typeInfo.isEnum()); [EOL]     assertEquals(Integer.class, typeInfo.getActualType()); [EOL]     assertEquals(Integer.class, typeInfo.getRawClass()); [EOL] }
public void testTypeVariableField() throws Exception { [EOL]     Field f = obj.getClass().getField("typeVariableObj"); [EOL]     TypeInfo typeInfo = TypeInfoFactory.getTypeInfoForField(f, OBJ_TYPE); [EOL]     assertFalse(typeInfo.isArray()); [EOL]     assertFalse(typeInfo.isEnum()); [EOL]     assertEquals(Integer.class, typeInfo.getActualType()); [EOL]     assertEquals(Integer.class, typeInfo.getRawClass()); [EOL] }
public void testSingle() throws Exception { [EOL]     Gson gson = new Gson(); [EOL]     Bar bar1 = new Bar("someString", 1); [EOL]     ArrayList<Integer> arrayList = new ArrayList<Integer>(); [EOL]     arrayList.add(1); [EOL]     arrayList.add(2); [EOL]     bar1.map.put("key1", arrayList); [EOL]     bar1.map.put("key2", new ArrayList<Integer>()); [EOL]     String json = gson.toJson(bar1); [EOL]     System.out.println(json); [EOL]     Bar bar2 = gson.fromJson(json, Bar.class); [EOL]     assertEquals(bar1, bar2); [EOL] }
public void testSingle() throws Exception { [EOL]     Gson gson = new Gson(); [EOL]     Bar bar1 = new Bar("someString", 1); [EOL]     ArrayList<Integer> arrayList = new ArrayList<Integer>(); [EOL]     arrayList.add(1); [EOL]     arrayList.add(2); [EOL]     bar1.map.put("key1", arrayList); [EOL]     bar1.map.put("key2", new ArrayList<Integer>()); [EOL]     String json = gson.toJson(bar1); [EOL]     System.out.println(json); [EOL]     Bar bar2 = gson.fromJson(json, Bar.class); [EOL]     assertEquals(bar1, bar2); [EOL] }
public void testSingle() throws Exception { [EOL]     Gson gson = new Gson(); [EOL]     Bar bar1 = new Bar("someString", 1); [EOL]     ArrayList<Integer> arrayList = new ArrayList<Integer>(); [EOL]     arrayList.add(1); [EOL]     arrayList.add(2); [EOL]     bar1.map.put("key1", arrayList); [EOL]     bar1.map.put("key2", new ArrayList<Integer>()); [EOL]     String json = gson.toJson(bar1); [EOL]     System.out.println(json); [EOL]     Bar bar2 = gson.fromJson(json, Bar.class); [EOL]     assertEquals(bar1, bar2); [EOL] }
public void testSingle() throws Exception { [EOL]     Gson gson = new Gson(); [EOL]     Bar bar1 = new Bar("someString", 1); [EOL]     ArrayList<Integer> arrayList = new ArrayList<Integer>(); [EOL]     arrayList.add(1); [EOL]     arrayList.add(2); [EOL]     bar1.map.put("key1", arrayList); [EOL]     bar1.map.put("key2", new ArrayList<Integer>()); [EOL]     String json = gson.toJson(bar1); [EOL]     System.out.println(json); [EOL]     Bar bar2 = gson.fromJson(json, Bar.class); [EOL]     assertEquals(bar1, bar2); [EOL] }
public void testTypeVariableField() throws Exception { [EOL]     Field f = obj.getClass().getField("typeVariableObj"); [EOL]     TypeInfo typeInfo = TypeInfoFactory.getTypeInfoForField(f, OBJ_TYPE); [EOL]     assertFalse(typeInfo.isArray()); [EOL]     assertFalse(typeInfo.isEnum()); [EOL]     assertEquals(Integer.class, typeInfo.getActualType()); [EOL]     assertEquals(Integer.class, typeInfo.getRawClass()); [EOL] }
public void testSelfReferenceArrayFieldSerialization() throws Exception { [EOL]     ClassWithSelfReferenceArray objA = new ClassWithSelfReferenceArray(); [EOL]     objA.children = new ClassWithSelfReferenceArray[] { objA }; [EOL]     try { [EOL]         gson.toJson(objA); [EOL]         fail("Circular reference to self can not be serialized!"); [EOL]     } catch (IllegalStateException expected) { [EOL]         assertTrue(expected.getMessage().contains("children")); [EOL]     } [EOL] }
public void testSelfReferenceArrayFieldSerialization() throws Exception { [EOL]     ClassWithSelfReferenceArray objA = new ClassWithSelfReferenceArray(); [EOL]     objA.children = new ClassWithSelfReferenceArray[] { objA }; [EOL]     try { [EOL]         gson.toJson(objA); [EOL]         fail("Circular reference to self can not be serialized!"); [EOL]     } catch (IllegalStateException expected) { [EOL]         assertTrue(expected.getMessage().contains("children")); [EOL]     } [EOL] }
public void testSelfReferenceArrayFieldSerialization() throws Exception { [EOL]     ClassWithSelfReferenceArray objA = new ClassWithSelfReferenceArray(); [EOL]     objA.children = new ClassWithSelfReferenceArray[] { objA }; [EOL]     try { [EOL]         gson.toJson(objA); [EOL]         fail("Circular reference to self can not be serialized!"); [EOL]     } catch (IllegalStateException expected) { [EOL]         assertTrue(expected.getMessage().contains("children")); [EOL]     } [EOL] }
public void testSelfReferenceArrayFieldSerialization() throws Exception { [EOL]     ClassWithSelfReferenceArray objA = new ClassWithSelfReferenceArray(); [EOL]     objA.children = new ClassWithSelfReferenceArray[] { objA }; [EOL]     try { [EOL]         gson.toJson(objA); [EOL]         fail("Circular reference to self can not be serialized!"); [EOL]     } catch (IllegalStateException expected) { [EOL]         assertTrue(expected.getMessage().contains("children")); [EOL]     } [EOL] }
public void testSerializingInterfaceObjectField() throws Exception { [EOL]     TestObjectWrapper objWrapper = new TestObjectWrapper(obj); [EOL]     assertEquals("{\"obj\":" + OBJ_JSON + "}", gson.toJson(objWrapper)); [EOL] }
public void testSerializingInterfaceObjectField() throws Exception { [EOL]     TestObjectWrapper objWrapper = new TestObjectWrapper(obj); [EOL]     assertEquals("{\"obj\":" + OBJ_JSON + "}", gson.toJson(objWrapper)); [EOL] }
public void testSerializingInterfaceObjectField() throws Exception { [EOL]     TestObjectWrapper objWrapper = new TestObjectWrapper(obj); [EOL]     assertEquals("{\"obj\":" + OBJ_JSON + "}", gson.toJson(objWrapper)); [EOL] }
public void testSerializingInterfaceObjectField() throws Exception { [EOL]     TestObjectWrapper objWrapper = new TestObjectWrapper(obj); [EOL]     assertEquals("{\"obj\":" + OBJ_JSON + "}", gson.toJson(objWrapper)); [EOL] }
public void testSerializingInterfaceObjectField() throws Exception { [EOL]     TestObjectWrapper objWrapper = new TestObjectWrapper(obj); [EOL]     assertEquals("{\"obj\":" + OBJ_JSON + "}", gson.toJson(objWrapper)); [EOL] }
public void testSerializingInterfaceObjectField() throws Exception { [EOL]     TestObjectWrapper objWrapper = new TestObjectWrapper(obj); [EOL]     assertEquals("{\"obj\":" + OBJ_JSON + "}", gson.toJson(objWrapper)); [EOL] }
public void testSerializingInterfaceObjectField() throws Exception { [EOL]     TestObjectWrapper objWrapper = new TestObjectWrapper(obj); [EOL]     assertEquals("{\"obj\":" + OBJ_JSON + "}", gson.toJson(objWrapper)); [EOL] }
public void testSerializingInterfaceObjectField() throws Exception { [EOL]     TestObjectWrapper objWrapper = new TestObjectWrapper(obj); [EOL]     assertEquals("{\"obj\":" + OBJ_JSON + "}", gson.toJson(objWrapper)); [EOL] }
public void testSerializingInterfaceObjectField() throws Exception { [EOL]     TestObjectWrapper objWrapper = new TestObjectWrapper(obj); [EOL]     assertEquals("{\"obj\":" + OBJ_JSON + "}", gson.toJson(objWrapper)); [EOL] }
public void testSerializingInterfaceObjectField() throws Exception { [EOL]     TestObjectWrapper objWrapper = new TestObjectWrapper(obj); [EOL]     assertEquals("{\"obj\":" + OBJ_JSON + "}", gson.toJson(objWrapper)); [EOL] }
public void testSerializingInterfaceObjectField() throws Exception { [EOL]     TestObjectWrapper objWrapper = new TestObjectWrapper(obj); [EOL]     assertEquals("{\"obj\":" + OBJ_JSON + "}", gson.toJson(objWrapper)); [EOL] }
public void testSerializingInterfaceObjectField() throws Exception { [EOL]     TestObjectWrapper objWrapper = new TestObjectWrapper(obj); [EOL]     assertEquals("{\"obj\":" + OBJ_JSON + "}", gson.toJson(objWrapper)); [EOL] }
public void testSerializingInterfaceObjectField() throws Exception { [EOL]     TestObjectWrapper objWrapper = new TestObjectWrapper(obj); [EOL]     assertEquals("{\"obj\":" + OBJ_JSON + "}", gson.toJson(objWrapper)); [EOL] }
public void testSerializingInterfaceObjectField() throws Exception { [EOL]     TestObjectWrapper objWrapper = new TestObjectWrapper(obj); [EOL]     assertEquals("{\"obj\":" + OBJ_JSON + "}", gson.toJson(objWrapper)); [EOL] }
public void testSerializingInterfaceObjectField() throws Exception { [EOL]     TestObjectWrapper objWrapper = new TestObjectWrapper(obj); [EOL]     assertEquals("{\"obj\":" + OBJ_JSON + "}", gson.toJson(objWrapper)); [EOL] }
public void testNullStringValue() throws IOException { [EOL]     StringWriter stringWriter = new StringWriter(); [EOL]     JsonWriter jsonWriter = new JsonWriter(stringWriter); [EOL]     jsonWriter.beginObject(); [EOL]     jsonWriter.name("a"); [EOL]     jsonWriter.value((String) null); [EOL]     jsonWriter.endObject(); [EOL]     assertEquals("{\"a\":null}", stringWriter.toString()); [EOL] }
public void testNullStringValue() throws IOException { [EOL]     StringWriter stringWriter = new StringWriter(); [EOL]     JsonWriter jsonWriter = new JsonWriter(stringWriter); [EOL]     jsonWriter.beginObject(); [EOL]     jsonWriter.name("a"); [EOL]     jsonWriter.value((String) null); [EOL]     jsonWriter.endObject(); [EOL]     assertEquals("{\"a\":null}", stringWriter.toString()); [EOL] }
public void testNulls() throws IOException { [EOL]     StringWriter stringWriter = new StringWriter(); [EOL]     JsonWriter jsonWriter = new JsonWriter(stringWriter); [EOL]     jsonWriter.beginArray(); [EOL]     jsonWriter.nullValue(); [EOL]     jsonWriter.endArray(); [EOL]     assertEquals("[null]", stringWriter.toString()); [EOL] }
public void testObjectsInArrays() throws IOException { [EOL]     StringWriter stringWriter = new StringWriter(); [EOL]     JsonWriter jsonWriter = new JsonWriter(stringWriter); [EOL]     jsonWriter.beginArray(); [EOL]     jsonWriter.beginObject(); [EOL]     jsonWriter.name("a").value(5); [EOL]     jsonWriter.name("b").value(false); [EOL]     jsonWriter.endObject(); [EOL]     jsonWriter.beginObject(); [EOL]     jsonWriter.name("c").value(6); [EOL]     jsonWriter.name("d").value(true); [EOL]     jsonWriter.endObject(); [EOL]     jsonWriter.endArray(); [EOL]     assertEquals("[{\"a\":5,\"b\":false}," + "{\"c\":6,\"d\":true}]", stringWriter.toString()); [EOL] }
public void testObjectsInArrays() throws IOException { [EOL]     StringWriter stringWriter = new StringWriter(); [EOL]     JsonWriter jsonWriter = new JsonWriter(stringWriter); [EOL]     jsonWriter.beginArray(); [EOL]     jsonWriter.beginObject(); [EOL]     jsonWriter.name("a").value(5); [EOL]     jsonWriter.name("b").value(false); [EOL]     jsonWriter.endObject(); [EOL]     jsonWriter.beginObject(); [EOL]     jsonWriter.name("c").value(6); [EOL]     jsonWriter.name("d").value(true); [EOL]     jsonWriter.endObject(); [EOL]     jsonWriter.endArray(); [EOL]     assertEquals("[{\"a\":5,\"b\":false}," + "{\"c\":6,\"d\":true}]", stringWriter.toString()); [EOL] }
public void testNonFiniteDoubles() throws IOException { [EOL]     StringWriter stringWriter = new StringWriter(); [EOL]     JsonWriter jsonWriter = new JsonWriter(stringWriter); [EOL]     jsonWriter.beginArray(); [EOL]     try { [EOL]         jsonWriter.value(Double.NaN); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException expected) { [EOL]     } [EOL]     try { [EOL]         jsonWriter.value(Double.NEGATIVE_INFINITY); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException expected) { [EOL]     } [EOL]     try { [EOL]         jsonWriter.value(Double.POSITIVE_INFINITY); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException expected) { [EOL]     } [EOL] }
public void testNonFiniteDoubles() throws IOException { [EOL]     StringWriter stringWriter = new StringWriter(); [EOL]     JsonWriter jsonWriter = new JsonWriter(stringWriter); [EOL]     jsonWriter.beginArray(); [EOL]     try { [EOL]         jsonWriter.value(Double.NaN); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException expected) { [EOL]     } [EOL]     try { [EOL]         jsonWriter.value(Double.NEGATIVE_INFINITY); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException expected) { [EOL]     } [EOL]     try { [EOL]         jsonWriter.value(Double.POSITIVE_INFINITY); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException expected) { [EOL]     } [EOL] }
public void testNonFiniteDoubles() throws IOException { [EOL]     StringWriter stringWriter = new StringWriter(); [EOL]     JsonWriter jsonWriter = new JsonWriter(stringWriter); [EOL]     jsonWriter.beginArray(); [EOL]     try { [EOL]         jsonWriter.value(Double.NaN); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException expected) { [EOL]     } [EOL]     try { [EOL]         jsonWriter.value(Double.NEGATIVE_INFINITY); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException expected) { [EOL]     } [EOL]     try { [EOL]         jsonWriter.value(Double.POSITIVE_INFINITY); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException expected) { [EOL]     } [EOL] }
public void testNonFiniteDoubles() throws IOException { [EOL]     StringWriter stringWriter = new StringWriter(); [EOL]     JsonWriter jsonWriter = new JsonWriter(stringWriter); [EOL]     jsonWriter.beginArray(); [EOL]     try { [EOL]         jsonWriter.value(Double.NaN); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException expected) { [EOL]     } [EOL]     try { [EOL]         jsonWriter.value(Double.NEGATIVE_INFINITY); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException expected) { [EOL]     } [EOL]     try { [EOL]         jsonWriter.value(Double.POSITIVE_INFINITY); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException expected) { [EOL]     } [EOL] }
public void testObjectsInArrays() throws IOException { [EOL]     StringWriter stringWriter = new StringWriter(); [EOL]     JsonWriter jsonWriter = new JsonWriter(stringWriter); [EOL]     jsonWriter.beginArray(); [EOL]     jsonWriter.beginObject(); [EOL]     jsonWriter.name("a").value(5); [EOL]     jsonWriter.name("b").value(false); [EOL]     jsonWriter.endObject(); [EOL]     jsonWriter.beginObject(); [EOL]     jsonWriter.name("c").value(6); [EOL]     jsonWriter.name("d").value(true); [EOL]     jsonWriter.endObject(); [EOL]     jsonWriter.endArray(); [EOL]     assertEquals("[{\"a\":5,\"b\":false}," + "{\"c\":6,\"d\":true}]", stringWriter.toString()); [EOL] }
public void testObjectsInArrays() throws IOException { [EOL]     StringWriter stringWriter = new StringWriter(); [EOL]     JsonWriter jsonWriter = new JsonWriter(stringWriter); [EOL]     jsonWriter.beginArray(); [EOL]     jsonWriter.beginObject(); [EOL]     jsonWriter.name("a").value(5); [EOL]     jsonWriter.name("b").value(false); [EOL]     jsonWriter.endObject(); [EOL]     jsonWriter.beginObject(); [EOL]     jsonWriter.name("c").value(6); [EOL]     jsonWriter.name("d").value(true); [EOL]     jsonWriter.endObject(); [EOL]     jsonWriter.endArray(); [EOL]     assertEquals("[{\"a\":5,\"b\":false}," + "{\"c\":6,\"d\":true}]", stringWriter.toString()); [EOL] }
public void testObjectsInArrays() throws IOException { [EOL]     StringWriter stringWriter = new StringWriter(); [EOL]     JsonWriter jsonWriter = new JsonWriter(stringWriter); [EOL]     jsonWriter.beginArray(); [EOL]     jsonWriter.beginObject(); [EOL]     jsonWriter.name("a").value(5); [EOL]     jsonWriter.name("b").value(false); [EOL]     jsonWriter.endObject(); [EOL]     jsonWriter.beginObject(); [EOL]     jsonWriter.name("c").value(6); [EOL]     jsonWriter.name("d").value(true); [EOL]     jsonWriter.endObject(); [EOL]     jsonWriter.endArray(); [EOL]     assertEquals("[{\"a\":5,\"b\":false}," + "{\"c\":6,\"d\":true}]", stringWriter.toString()); [EOL] }
public void testNonFiniteBoxedDoubles() throws IOException { [EOL]     StringWriter stringWriter = new StringWriter(); [EOL]     JsonWriter jsonWriter = new JsonWriter(stringWriter); [EOL]     jsonWriter.beginArray(); [EOL]     try { [EOL]         jsonWriter.value(new Double(Double.NaN)); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException expected) { [EOL]     } [EOL]     try { [EOL]         jsonWriter.value(new Double(Double.NEGATIVE_INFINITY)); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException expected) { [EOL]     } [EOL]     try { [EOL]         jsonWriter.value(new Double(Double.POSITIVE_INFINITY)); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException expected) { [EOL]     } [EOL] }
public void testNonFiniteBoxedDoubles() throws IOException { [EOL]     StringWriter stringWriter = new StringWriter(); [EOL]     JsonWriter jsonWriter = new JsonWriter(stringWriter); [EOL]     jsonWriter.beginArray(); [EOL]     try { [EOL]         jsonWriter.value(new Double(Double.NaN)); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException expected) { [EOL]     } [EOL]     try { [EOL]         jsonWriter.value(new Double(Double.NEGATIVE_INFINITY)); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException expected) { [EOL]     } [EOL]     try { [EOL]         jsonWriter.value(new Double(Double.POSITIVE_INFINITY)); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException expected) { [EOL]     } [EOL] }
public void testNonFiniteBoxedDoubles() throws IOException { [EOL]     StringWriter stringWriter = new StringWriter(); [EOL]     JsonWriter jsonWriter = new JsonWriter(stringWriter); [EOL]     jsonWriter.beginArray(); [EOL]     try { [EOL]         jsonWriter.value(new Double(Double.NaN)); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException expected) { [EOL]     } [EOL]     try { [EOL]         jsonWriter.value(new Double(Double.NEGATIVE_INFINITY)); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException expected) { [EOL]     } [EOL]     try { [EOL]         jsonWriter.value(new Double(Double.POSITIVE_INFINITY)); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException expected) { [EOL]     } [EOL] }
public void testNonFiniteBoxedDoubles() throws IOException { [EOL]     StringWriter stringWriter = new StringWriter(); [EOL]     JsonWriter jsonWriter = new JsonWriter(stringWriter); [EOL]     jsonWriter.beginArray(); [EOL]     try { [EOL]         jsonWriter.value(new Double(Double.NaN)); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException expected) { [EOL]     } [EOL]     try { [EOL]         jsonWriter.value(new Double(Double.NEGATIVE_INFINITY)); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException expected) { [EOL]     } [EOL]     try { [EOL]         jsonWriter.value(new Double(Double.POSITIVE_INFINITY)); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException expected) { [EOL]     } [EOL] }
public void testNonFiniteBoxedDoubles() throws IOException { [EOL]     StringWriter stringWriter = new StringWriter(); [EOL]     JsonWriter jsonWriter = new JsonWriter(stringWriter); [EOL]     jsonWriter.beginArray(); [EOL]     try { [EOL]         jsonWriter.value(new Double(Double.NaN)); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException expected) { [EOL]     } [EOL]     try { [EOL]         jsonWriter.value(new Double(Double.NEGATIVE_INFINITY)); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException expected) { [EOL]     } [EOL]     try { [EOL]         jsonWriter.value(new Double(Double.POSITIVE_INFINITY)); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException expected) { [EOL]     } [EOL] }
public void testStrings() throws IOException { [EOL]     StringWriter stringWriter = new StringWriter(); [EOL]     JsonWriter jsonWriter = new JsonWriter(stringWriter); [EOL]     jsonWriter.beginArray(); [EOL]     jsonWriter.value("a"); [EOL]     jsonWriter.value("a\""); [EOL]     jsonWriter.value("\""); [EOL]     jsonWriter.value(":"); [EOL]     jsonWriter.value(","); [EOL]     jsonWriter.value("\b"); [EOL]     jsonWriter.value("\f"); [EOL]     jsonWriter.value("\n"); [EOL]     jsonWriter.value("\r"); [EOL]     jsonWriter.value("\t"); [EOL]     jsonWriter.value(" "); [EOL]     jsonWriter.value("\\"); [EOL]     jsonWriter.value("{"); [EOL]     jsonWriter.value("}"); [EOL]     jsonWriter.value("["); [EOL]     jsonWriter.value("]"); [EOL]     jsonWriter.value("\0"); [EOL]     jsonWriter.value("\u0019"); [EOL]     jsonWriter.endArray(); [EOL]     assertEquals("[\"a\"," + "\"a\\\"\"," + "\"\\\"\"," + "\":\"," + "\",\"," + "\"\\b\"," + "\"\\f\"," + "\"\\n\"," + "\"\\r\"," + "\"\\t\"," + "\" \"," + "\"\\\\\"," + "\"{\"," + "\"}\"," + "\"[\"," + "\"]\"," + "\"\\u0000\"," + "\"\\u0019\"]", stringWriter.toString()); [EOL] }
public void testStrings() throws IOException { [EOL]     StringWriter stringWriter = new StringWriter(); [EOL]     JsonWriter jsonWriter = new JsonWriter(stringWriter); [EOL]     jsonWriter.beginArray(); [EOL]     jsonWriter.value("a"); [EOL]     jsonWriter.value("a\""); [EOL]     jsonWriter.value("\""); [EOL]     jsonWriter.value(":"); [EOL]     jsonWriter.value(","); [EOL]     jsonWriter.value("\b"); [EOL]     jsonWriter.value("\f"); [EOL]     jsonWriter.value("\n"); [EOL]     jsonWriter.value("\r"); [EOL]     jsonWriter.value("\t"); [EOL]     jsonWriter.value(" "); [EOL]     jsonWriter.value("\\"); [EOL]     jsonWriter.value("{"); [EOL]     jsonWriter.value("}"); [EOL]     jsonWriter.value("["); [EOL]     jsonWriter.value("]"); [EOL]     jsonWriter.value("\0"); [EOL]     jsonWriter.value("\u0019"); [EOL]     jsonWriter.endArray(); [EOL]     assertEquals("[\"a\"," + "\"a\\\"\"," + "\"\\\"\"," + "\":\"," + "\",\"," + "\"\\b\"," + "\"\\f\"," + "\"\\n\"," + "\"\\r\"," + "\"\\t\"," + "\" \"," + "\"\\\\\"," + "\"{\"," + "\"}\"," + "\"[\"," + "\"]\"," + "\"\\u0000\"," + "\"\\u0019\"]", stringWriter.toString()); [EOL] }
public void testStrings() throws IOException { [EOL]     StringWriter stringWriter = new StringWriter(); [EOL]     JsonWriter jsonWriter = new JsonWriter(stringWriter); [EOL]     jsonWriter.beginArray(); [EOL]     jsonWriter.value("a"); [EOL]     jsonWriter.value("a\""); [EOL]     jsonWriter.value("\""); [EOL]     jsonWriter.value(":"); [EOL]     jsonWriter.value(","); [EOL]     jsonWriter.value("\b"); [EOL]     jsonWriter.value("\f"); [EOL]     jsonWriter.value("\n"); [EOL]     jsonWriter.value("\r"); [EOL]     jsonWriter.value("\t"); [EOL]     jsonWriter.value(" "); [EOL]     jsonWriter.value("\\"); [EOL]     jsonWriter.value("{"); [EOL]     jsonWriter.value("}"); [EOL]     jsonWriter.value("["); [EOL]     jsonWriter.value("]"); [EOL]     jsonWriter.value("\0"); [EOL]     jsonWriter.value("\u0019"); [EOL]     jsonWriter.endArray(); [EOL]     assertEquals("[\"a\"," + "\"a\\\"\"," + "\"\\\"\"," + "\":\"," + "\",\"," + "\"\\b\"," + "\"\\f\"," + "\"\\n\"," + "\"\\r\"," + "\"\\t\"," + "\" \"," + "\"\\\\\"," + "\"{\"," + "\"}\"," + "\"[\"," + "\"]\"," + "\"\\u0000\"," + "\"\\u0019\"]", stringWriter.toString()); [EOL] }
public void testStrings() throws IOException { [EOL]     StringWriter stringWriter = new StringWriter(); [EOL]     JsonWriter jsonWriter = new JsonWriter(stringWriter); [EOL]     jsonWriter.beginArray(); [EOL]     jsonWriter.value("a"); [EOL]     jsonWriter.value("a\""); [EOL]     jsonWriter.value("\""); [EOL]     jsonWriter.value(":"); [EOL]     jsonWriter.value(","); [EOL]     jsonWriter.value("\b"); [EOL]     jsonWriter.value("\f"); [EOL]     jsonWriter.value("\n"); [EOL]     jsonWriter.value("\r"); [EOL]     jsonWriter.value("\t"); [EOL]     jsonWriter.value(" "); [EOL]     jsonWriter.value("\\"); [EOL]     jsonWriter.value("{"); [EOL]     jsonWriter.value("}"); [EOL]     jsonWriter.value("["); [EOL]     jsonWriter.value("]"); [EOL]     jsonWriter.value("\0"); [EOL]     jsonWriter.value("\u0019"); [EOL]     jsonWriter.endArray(); [EOL]     assertEquals("[\"a\"," + "\"a\\\"\"," + "\"\\\"\"," + "\":\"," + "\",\"," + "\"\\b\"," + "\"\\f\"," + "\"\\n\"," + "\"\\r\"," + "\"\\t\"," + "\" \"," + "\"\\\\\"," + "\"{\"," + "\"}\"," + "\"[\"," + "\"]\"," + "\"\\u0000\"," + "\"\\u0019\"]", stringWriter.toString()); [EOL] }
public void testStrings() throws IOException { [EOL]     StringWriter stringWriter = new StringWriter(); [EOL]     JsonWriter jsonWriter = new JsonWriter(stringWriter); [EOL]     jsonWriter.beginArray(); [EOL]     jsonWriter.value("a"); [EOL]     jsonWriter.value("a\""); [EOL]     jsonWriter.value("\""); [EOL]     jsonWriter.value(":"); [EOL]     jsonWriter.value(","); [EOL]     jsonWriter.value("\b"); [EOL]     jsonWriter.value("\f"); [EOL]     jsonWriter.value("\n"); [EOL]     jsonWriter.value("\r"); [EOL]     jsonWriter.value("\t"); [EOL]     jsonWriter.value(" "); [EOL]     jsonWriter.value("\\"); [EOL]     jsonWriter.value("{"); [EOL]     jsonWriter.value("}"); [EOL]     jsonWriter.value("["); [EOL]     jsonWriter.value("]"); [EOL]     jsonWriter.value("\0"); [EOL]     jsonWriter.value("\u0019"); [EOL]     jsonWriter.endArray(); [EOL]     assertEquals("[\"a\"," + "\"a\\\"\"," + "\"\\\"\"," + "\":\"," + "\",\"," + "\"\\b\"," + "\"\\f\"," + "\"\\n\"," + "\"\\r\"," + "\"\\t\"," + "\" \"," + "\"\\\\\"," + "\"{\"," + "\"}\"," + "\"[\"," + "\"]\"," + "\"\\u0000\"," + "\"\\u0019\"]", stringWriter.toString()); [EOL] }
public void testObjectsInArrays() throws IOException { [EOL]     StringWriter stringWriter = new StringWriter(); [EOL]     JsonWriter jsonWriter = new JsonWriter(stringWriter); [EOL]     jsonWriter.beginArray(); [EOL]     jsonWriter.beginObject(); [EOL]     jsonWriter.name("a").value(5); [EOL]     jsonWriter.name("b").value(false); [EOL]     jsonWriter.endObject(); [EOL]     jsonWriter.beginObject(); [EOL]     jsonWriter.name("c").value(6); [EOL]     jsonWriter.name("d").value(true); [EOL]     jsonWriter.endObject(); [EOL]     jsonWriter.endArray(); [EOL]     assertEquals("[{\"a\":5,\"b\":false}," + "{\"c\":6,\"d\":true}]", stringWriter.toString()); [EOL] }
public void testObjectsInArrays() throws IOException { [EOL]     StringWriter stringWriter = new StringWriter(); [EOL]     JsonWriter jsonWriter = new JsonWriter(stringWriter); [EOL]     jsonWriter.beginArray(); [EOL]     jsonWriter.beginObject(); [EOL]     jsonWriter.name("a").value(5); [EOL]     jsonWriter.name("b").value(false); [EOL]     jsonWriter.endObject(); [EOL]     jsonWriter.beginObject(); [EOL]     jsonWriter.name("c").value(6); [EOL]     jsonWriter.name("d").value(true); [EOL]     jsonWriter.endObject(); [EOL]     jsonWriter.endArray(); [EOL]     assertEquals("[{\"a\":5,\"b\":false}," + "{\"c\":6,\"d\":true}]", stringWriter.toString()); [EOL] }
public void testObjectsInArrays() throws IOException { [EOL]     StringWriter stringWriter = new StringWriter(); [EOL]     JsonWriter jsonWriter = new JsonWriter(stringWriter); [EOL]     jsonWriter.beginArray(); [EOL]     jsonWriter.beginObject(); [EOL]     jsonWriter.name("a").value(5); [EOL]     jsonWriter.name("b").value(false); [EOL]     jsonWriter.endObject(); [EOL]     jsonWriter.beginObject(); [EOL]     jsonWriter.name("c").value(6); [EOL]     jsonWriter.name("d").value(true); [EOL]     jsonWriter.endObject(); [EOL]     jsonWriter.endArray(); [EOL]     assertEquals("[{\"a\":5,\"b\":false}," + "{\"c\":6,\"d\":true}]", stringWriter.toString()); [EOL] }
public void testObjectsInArrays() throws IOException { [EOL]     StringWriter stringWriter = new StringWriter(); [EOL]     JsonWriter jsonWriter = new JsonWriter(stringWriter); [EOL]     jsonWriter.beginArray(); [EOL]     jsonWriter.beginObject(); [EOL]     jsonWriter.name("a").value(5); [EOL]     jsonWriter.name("b").value(false); [EOL]     jsonWriter.endObject(); [EOL]     jsonWriter.beginObject(); [EOL]     jsonWriter.name("c").value(6); [EOL]     jsonWriter.name("d").value(true); [EOL]     jsonWriter.endObject(); [EOL]     jsonWriter.endArray(); [EOL]     assertEquals("[{\"a\":5,\"b\":false}," + "{\"c\":6,\"d\":true}]", stringWriter.toString()); [EOL] }
public void testObjectsInArrays() throws IOException { [EOL]     StringWriter stringWriter = new StringWriter(); [EOL]     JsonWriter jsonWriter = new JsonWriter(stringWriter); [EOL]     jsonWriter.beginArray(); [EOL]     jsonWriter.beginObject(); [EOL]     jsonWriter.name("a").value(5); [EOL]     jsonWriter.name("b").value(false); [EOL]     jsonWriter.endObject(); [EOL]     jsonWriter.beginObject(); [EOL]     jsonWriter.name("c").value(6); [EOL]     jsonWriter.name("d").value(true); [EOL]     jsonWriter.endObject(); [EOL]     jsonWriter.endArray(); [EOL]     assertEquals("[{\"a\":5,\"b\":false}," + "{\"c\":6,\"d\":true}]", stringWriter.toString()); [EOL] }
public void testObjectsInArrays() throws IOException { [EOL]     StringWriter stringWriter = new StringWriter(); [EOL]     JsonWriter jsonWriter = new JsonWriter(stringWriter); [EOL]     jsonWriter.beginArray(); [EOL]     jsonWriter.beginObject(); [EOL]     jsonWriter.name("a").value(5); [EOL]     jsonWriter.name("b").value(false); [EOL]     jsonWriter.endObject(); [EOL]     jsonWriter.beginObject(); [EOL]     jsonWriter.name("c").value(6); [EOL]     jsonWriter.name("d").value(true); [EOL]     jsonWriter.endObject(); [EOL]     jsonWriter.endArray(); [EOL]     assertEquals("[{\"a\":5,\"b\":false}," + "{\"c\":6,\"d\":true}]", stringWriter.toString()); [EOL] }
public void testObjectsInArrays() throws IOException { [EOL]     StringWriter stringWriter = new StringWriter(); [EOL]     JsonWriter jsonWriter = new JsonWriter(stringWriter); [EOL]     jsonWriter.beginArray(); [EOL]     jsonWriter.beginObject(); [EOL]     jsonWriter.name("a").value(5); [EOL]     jsonWriter.name("b").value(false); [EOL]     jsonWriter.endObject(); [EOL]     jsonWriter.beginObject(); [EOL]     jsonWriter.name("c").value(6); [EOL]     jsonWriter.name("d").value(true); [EOL]     jsonWriter.endObject(); [EOL]     jsonWriter.endArray(); [EOL]     assertEquals("[{\"a\":5,\"b\":false}," + "{\"c\":6,\"d\":true}]", stringWriter.toString()); [EOL] }
public void testObjectsInArrays() throws IOException { [EOL]     StringWriter stringWriter = new StringWriter(); [EOL]     JsonWriter jsonWriter = new JsonWriter(stringWriter); [EOL]     jsonWriter.beginArray(); [EOL]     jsonWriter.beginObject(); [EOL]     jsonWriter.name("a").value(5); [EOL]     jsonWriter.name("b").value(false); [EOL]     jsonWriter.endObject(); [EOL]     jsonWriter.beginObject(); [EOL]     jsonWriter.name("c").value(6); [EOL]     jsonWriter.name("d").value(true); [EOL]     jsonWriter.endObject(); [EOL]     jsonWriter.endArray(); [EOL]     assertEquals("[{\"a\":5,\"b\":false}," + "{\"c\":6,\"d\":true}]", stringWriter.toString()); [EOL] }
public void testObjectsInArrays() throws IOException { [EOL]     StringWriter stringWriter = new StringWriter(); [EOL]     JsonWriter jsonWriter = new JsonWriter(stringWriter); [EOL]     jsonWriter.beginArray(); [EOL]     jsonWriter.beginObject(); [EOL]     jsonWriter.name("a").value(5); [EOL]     jsonWriter.name("b").value(false); [EOL]     jsonWriter.endObject(); [EOL]     jsonWriter.beginObject(); [EOL]     jsonWriter.name("c").value(6); [EOL]     jsonWriter.name("d").value(true); [EOL]     jsonWriter.endObject(); [EOL]     jsonWriter.endArray(); [EOL]     assertEquals("[{\"a\":5,\"b\":false}," + "{\"c\":6,\"d\":true}]", stringWriter.toString()); [EOL] }
public void testCreatingMoreThanOnce() { [EOL]     GsonBuilder builder = new GsonBuilder(); [EOL]     builder.create(); [EOL]     builder.create(); [EOL] }
public void testCreatingMoreThanOnce() { [EOL]     GsonBuilder builder = new GsonBuilder(); [EOL]     builder.create(); [EOL]     builder.create(); [EOL] }
public void testCreatingMoreThanOnce() { [EOL]     GsonBuilder builder = new GsonBuilder(); [EOL]     builder.create(); [EOL]     builder.create(); [EOL] }
public void testCreatingMoreThanOnce() { [EOL]     GsonBuilder builder = new GsonBuilder(); [EOL]     builder.create(); [EOL]     builder.create(); [EOL] }
public void testCreatingMoreThanOnce() { [EOL]     GsonBuilder builder = new GsonBuilder(); [EOL]     builder.create(); [EOL]     builder.create(); [EOL] }
public void testCreatingMoreThanOnce() { [EOL]     GsonBuilder builder = new GsonBuilder(); [EOL]     builder.create(); [EOL]     builder.create(); [EOL] }
public void testCarrageReturnEscaping() throws Exception { [EOL]     String containsCarrageReturn = "123\r456"; [EOL]     String escapedString = escapeHtmlChar.escapeJsonString(containsCarrageReturn); [EOL]     assertEquals("123\\r456", escapedString); [EOL] }
public void testCarrageReturnEscaping() throws Exception { [EOL]     String containsCarrageReturn = "123\r456"; [EOL]     String escapedString = escapeHtmlChar.escapeJsonString(containsCarrageReturn); [EOL]     assertEquals("123\\r456", escapedString); [EOL] }
public void testCarrageReturnEscaping() throws Exception { [EOL]     String containsCarrageReturn = "123\r456"; [EOL]     String escapedString = escapeHtmlChar.escapeJsonString(containsCarrageReturn); [EOL]     assertEquals("123\\r456", escapedString); [EOL] }
public void testCarrageReturnEscaping() throws Exception { [EOL]     String containsCarrageReturn = "123\r456"; [EOL]     String escapedString = escapeHtmlChar.escapeJsonString(containsCarrageReturn); [EOL]     assertEquals("123\\r456", escapedString); [EOL] }
public void testCarrageReturnEscaping() throws Exception { [EOL]     String containsCarrageReturn = "123\r456"; [EOL]     String escapedString = escapeHtmlChar.escapeJsonString(containsCarrageReturn); [EOL]     assertEquals("123\\r456", escapedString); [EOL] }
public void testCarrageReturnEscaping() throws Exception { [EOL]     String containsCarrageReturn = "123\r456"; [EOL]     String escapedString = escapeHtmlChar.escapeJsonString(containsCarrageReturn); [EOL]     assertEquals("123\\r456", escapedString); [EOL] }
public void testCarrageReturnEscaping() throws Exception { [EOL]     String containsCarrageReturn = "123\r456"; [EOL]     String escapedString = escapeHtmlChar.escapeJsonString(containsCarrageReturn); [EOL]     assertEquals("123\\r456", escapedString); [EOL] }
public void testCarrageReturnEscaping() throws Exception { [EOL]     String containsCarrageReturn = "123\r456"; [EOL]     String escapedString = escapeHtmlChar.escapeJsonString(containsCarrageReturn); [EOL]     assertEquals("123\\r456", escapedString); [EOL] }
public void testCarrageReturnEscaping() throws Exception { [EOL]     String containsCarrageReturn = "123\r456"; [EOL]     String escapedString = escapeHtmlChar.escapeJsonString(containsCarrageReturn); [EOL]     assertEquals("123\\r456", escapedString); [EOL] }
public void testCarrageReturnEscaping() throws Exception { [EOL]     String containsCarrageReturn = "123\r456"; [EOL]     String escapedString = escapeHtmlChar.escapeJsonString(containsCarrageReturn); [EOL]     assertEquals("123\\r456", escapedString); [EOL] }
public void testCarrageReturnEscaping() throws Exception { [EOL]     String containsCarrageReturn = "123\r456"; [EOL]     String escapedString = escapeHtmlChar.escapeJsonString(containsCarrageReturn); [EOL]     assertEquals("123\\r456", escapedString); [EOL] }
public void testSubInterfacesOfCollectionDeserialization() throws Exception { [EOL]     String json = "{\"list\":[0,1,2,3],\"queue\":[0,1,2,3],\"set\":[0.1,0.2,0.3,0.4]," + "\"sortedSet\":[\"a\",\"b\",\"c\",\"d\"]" + "}"; [EOL]     ClassWithSubInterfacesOfCollection target = gson.fromJson(json, ClassWithSubInterfacesOfCollection.class); [EOL]     assertTrue(target.listContains(0, 1, 2, 3)); [EOL]     assertTrue(target.queueContains(0, 1, 2, 3)); [EOL]     assertTrue(target.setContains(0.1F, 0.2F, 0.3F, 0.4F)); [EOL]     assertTrue(target.sortedSetContains('a', 'b', 'c', 'd')); [EOL] }
public void testStrictNonExecutePrefix() { [EOL]     JsonReader reader = new JsonReader(new StringReader(")]}'\n []")); [EOL]     try { [EOL]         reader.beginArray(); [EOL]         fail(); [EOL]     } catch (IOException expected) { [EOL]     } [EOL] }
public void testStrictNonExecutePrefix() { [EOL]     JsonReader reader = new JsonReader(new StringReader(")]}'\n []")); [EOL]     try { [EOL]         reader.beginArray(); [EOL]         fail(); [EOL]     } catch (IOException expected) { [EOL]     } [EOL] }
public void testStrictNonExecutePrefix() { [EOL]     JsonReader reader = new JsonReader(new StringReader(")]}'\n []")); [EOL]     try { [EOL]         reader.beginArray(); [EOL]         fail(); [EOL]     } catch (IOException expected) { [EOL]     } [EOL] }
public void testStrictNonExecutePrefix() { [EOL]     JsonReader reader = new JsonReader(new StringReader(")]}'\n []")); [EOL]     try { [EOL]         reader.beginArray(); [EOL]         fail(); [EOL]     } catch (IOException expected) { [EOL]     } [EOL] }
public void testStrictNonExecutePrefix() { [EOL]     JsonReader reader = new JsonReader(new StringReader(")]}'\n []")); [EOL]     try { [EOL]         reader.beginArray(); [EOL]         fail(); [EOL]     } catch (IOException expected) { [EOL]     } [EOL] }
public void testStrictNonExecutePrefix() { [EOL]     JsonReader reader = new JsonReader(new StringReader(")]}'\n []")); [EOL]     try { [EOL]         reader.beginArray(); [EOL]         fail(); [EOL]     } catch (IOException expected) { [EOL]     } [EOL] }
public void testStrictNonExecutePrefix() { [EOL]     JsonReader reader = new JsonReader(new StringReader(")]}'\n []")); [EOL]     try { [EOL]         reader.beginArray(); [EOL]         fail(); [EOL]     } catch (IOException expected) { [EOL]     } [EOL] }
public void testStrictNonExecutePrefix() { [EOL]     JsonReader reader = new JsonReader(new StringReader(")]}'\n []")); [EOL]     try { [EOL]         reader.beginArray(); [EOL]         fail(); [EOL]     } catch (IOException expected) { [EOL]     } [EOL] }
public void testStrictNonExecutePrefix() { [EOL]     JsonReader reader = new JsonReader(new StringReader(")]}'\n []")); [EOL]     try { [EOL]         reader.beginArray(); [EOL]         fail(); [EOL]     } catch (IOException expected) { [EOL]     } [EOL] }
public void testStrictNonExecutePrefix() { [EOL]     JsonReader reader = new JsonReader(new StringReader(")]}'\n []")); [EOL]     try { [EOL]         reader.beginArray(); [EOL]         fail(); [EOL]     } catch (IOException expected) { [EOL]     } [EOL] }
public void testLenientComments() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("[// comment \n true]")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL]     reader = new JsonReader(new StringReader("[# comment \n true]")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL]     reader = new JsonReader(new StringReader("[/* comment */ true]")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL] }
public void testLenientComments() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("[// comment \n true]")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL]     reader = new JsonReader(new StringReader("[# comment \n true]")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL]     reader = new JsonReader(new StringReader("[/* comment */ true]")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL] }
public void testLenientComments() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("[// comment \n true]")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL]     reader = new JsonReader(new StringReader("[# comment \n true]")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL]     reader = new JsonReader(new StringReader("[/* comment */ true]")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL] }
public void testLenientComments() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("[// comment \n true]")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL]     reader = new JsonReader(new StringReader("[# comment \n true]")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL]     reader = new JsonReader(new StringReader("[/* comment */ true]")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL] }
public void testLenientComments() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("[// comment \n true]")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL]     reader = new JsonReader(new StringReader("[# comment \n true]")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL]     reader = new JsonReader(new StringReader("[/* comment */ true]")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL] }
public void testLenientComments() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("[// comment \n true]")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL]     reader = new JsonReader(new StringReader("[# comment \n true]")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL]     reader = new JsonReader(new StringReader("[/* comment */ true]")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL] }
public void testLenientComments() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("[// comment \n true]")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL]     reader = new JsonReader(new StringReader("[# comment \n true]")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL]     reader = new JsonReader(new StringReader("[/* comment */ true]")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL] }
public void testLenientComments() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("[// comment \n true]")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL]     reader = new JsonReader(new StringReader("[# comment \n true]")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL]     reader = new JsonReader(new StringReader("[/* comment */ true]")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL] }
public void testLenientComments() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("[// comment \n true]")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL]     reader = new JsonReader(new StringReader("[# comment \n true]")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL]     reader = new JsonReader(new StringReader("[/* comment */ true]")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL] }
public void testLenientComments() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("[// comment \n true]")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL]     reader = new JsonReader(new StringReader("[# comment \n true]")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL]     reader = new JsonReader(new StringReader("[/* comment */ true]")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL] }
public void testLenientComments() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("[// comment \n true]")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL]     reader = new JsonReader(new StringReader("[# comment \n true]")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL]     reader = new JsonReader(new StringReader("[/* comment */ true]")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL] }
public void testSubInterfacesOfCollectionDeserialization() throws Exception { [EOL]     String json = "{\"list\":[0,1,2,3],\"queue\":[0,1,2,3],\"set\":[0.1,0.2,0.3,0.4]," + "\"sortedSet\":[\"a\",\"b\",\"c\",\"d\"]" + "}"; [EOL]     ClassWithSubInterfacesOfCollection target = gson.fromJson(json, ClassWithSubInterfacesOfCollection.class); [EOL]     assertTrue(target.listContains(0, 1, 2, 3)); [EOL]     assertTrue(target.queueContains(0, 1, 2, 3)); [EOL]     assertTrue(target.setContains(0.1F, 0.2F, 0.3F, 0.4F)); [EOL]     assertTrue(target.sortedSetContains('a', 'b', 'c', 'd')); [EOL] }
public void testSubInterfacesOfCollectionDeserialization() throws Exception { [EOL]     String json = "{\"list\":[0,1,2,3],\"queue\":[0,1,2,3],\"set\":[0.1,0.2,0.3,0.4]," + "\"sortedSet\":[\"a\",\"b\",\"c\",\"d\"]" + "}"; [EOL]     ClassWithSubInterfacesOfCollection target = gson.fromJson(json, ClassWithSubInterfacesOfCollection.class); [EOL]     assertTrue(target.listContains(0, 1, 2, 3)); [EOL]     assertTrue(target.queueContains(0, 1, 2, 3)); [EOL]     assertTrue(target.setContains(0.1F, 0.2F, 0.3F, 0.4F)); [EOL]     assertTrue(target.sortedSetContains('a', 'b', 'c', 'd')); [EOL] }
public void testSubInterfacesOfCollectionDeserialization() throws Exception { [EOL]     String json = "{\"list\":[0,1,2,3],\"queue\":[0,1,2,3],\"set\":[0.1,0.2,0.3,0.4]," + "\"sortedSet\":[\"a\",\"b\",\"c\",\"d\"]" + "}"; [EOL]     ClassWithSubInterfacesOfCollection target = gson.fromJson(json, ClassWithSubInterfacesOfCollection.class); [EOL]     assertTrue(target.listContains(0, 1, 2, 3)); [EOL]     assertTrue(target.queueContains(0, 1, 2, 3)); [EOL]     assertTrue(target.setContains(0.1F, 0.2F, 0.3F, 0.4F)); [EOL]     assertTrue(target.sortedSetContains('a', 'b', 'c', 'd')); [EOL] }
public void testSubInterfacesOfCollectionDeserialization() throws Exception { [EOL]     String json = "{\"list\":[0,1,2,3],\"queue\":[0,1,2,3],\"set\":[0.1,0.2,0.3,0.4]," + "\"sortedSet\":[\"a\",\"b\",\"c\",\"d\"]" + "}"; [EOL]     ClassWithSubInterfacesOfCollection target = gson.fromJson(json, ClassWithSubInterfacesOfCollection.class); [EOL]     assertTrue(target.listContains(0, 1, 2, 3)); [EOL]     assertTrue(target.queueContains(0, 1, 2, 3)); [EOL]     assertTrue(target.setContains(0.1F, 0.2F, 0.3F, 0.4F)); [EOL]     assertTrue(target.sortedSetContains('a', 'b', 'c', 'd')); [EOL] }
public void testSubInterfacesOfCollectionDeserialization() throws Exception { [EOL]     String json = "{\"list\":[0,1,2,3],\"queue\":[0,1,2,3],\"set\":[0.1,0.2,0.3,0.4]," + "\"sortedSet\":[\"a\",\"b\",\"c\",\"d\"]" + "}"; [EOL]     ClassWithSubInterfacesOfCollection target = gson.fromJson(json, ClassWithSubInterfacesOfCollection.class); [EOL]     assertTrue(target.listContains(0, 1, 2, 3)); [EOL]     assertTrue(target.queueContains(0, 1, 2, 3)); [EOL]     assertTrue(target.setContains(0.1F, 0.2F, 0.3F, 0.4F)); [EOL]     assertTrue(target.sortedSetContains('a', 'b', 'c', 'd')); [EOL] }
public void testSubInterfacesOfCollectionDeserialization() throws Exception { [EOL]     String json = "{\"list\":[0,1,2,3],\"queue\":[0,1,2,3],\"set\":[0.1,0.2,0.3,0.4]," + "\"sortedSet\":[\"a\",\"b\",\"c\",\"d\"]" + "}"; [EOL]     ClassWithSubInterfacesOfCollection target = gson.fromJson(json, ClassWithSubInterfacesOfCollection.class); [EOL]     assertTrue(target.listContains(0, 1, 2, 3)); [EOL]     assertTrue(target.queueContains(0, 1, 2, 3)); [EOL]     assertTrue(target.setContains(0.1F, 0.2F, 0.3F, 0.4F)); [EOL]     assertTrue(target.sortedSetContains('a', 'b', 'c', 'd')); [EOL] }
public void testSubInterfacesOfCollectionDeserialization() throws Exception { [EOL]     String json = "{\"list\":[0,1,2,3],\"queue\":[0,1,2,3],\"set\":[0.1,0.2,0.3,0.4]," + "\"sortedSet\":[\"a\",\"b\",\"c\",\"d\"]" + "}"; [EOL]     ClassWithSubInterfacesOfCollection target = gson.fromJson(json, ClassWithSubInterfacesOfCollection.class); [EOL]     assertTrue(target.listContains(0, 1, 2, 3)); [EOL]     assertTrue(target.queueContains(0, 1, 2, 3)); [EOL]     assertTrue(target.setContains(0.1F, 0.2F, 0.3F, 0.4F)); [EOL]     assertTrue(target.sortedSetContains('a', 'b', 'c', 'd')); [EOL] }
public void testSubInterfacesOfCollectionDeserialization() throws Exception { [EOL]     String json = "{\"list\":[0,1,2,3],\"queue\":[0,1,2,3],\"set\":[0.1,0.2,0.3,0.4]," + "\"sortedSet\":[\"a\",\"b\",\"c\",\"d\"]" + "}"; [EOL]     ClassWithSubInterfacesOfCollection target = gson.fromJson(json, ClassWithSubInterfacesOfCollection.class); [EOL]     assertTrue(target.listContains(0, 1, 2, 3)); [EOL]     assertTrue(target.queueContains(0, 1, 2, 3)); [EOL]     assertTrue(target.setContains(0.1F, 0.2F, 0.3F, 0.4F)); [EOL]     assertTrue(target.sortedSetContains('a', 'b', 'c', 'd')); [EOL] }
public void testSubInterfacesOfCollectionDeserialization() throws Exception { [EOL]     String json = "{\"list\":[0,1,2,3],\"queue\":[0,1,2,3],\"set\":[0.1,0.2,0.3,0.4]," + "\"sortedSet\":[\"a\",\"b\",\"c\",\"d\"]" + "}"; [EOL]     ClassWithSubInterfacesOfCollection target = gson.fromJson(json, ClassWithSubInterfacesOfCollection.class); [EOL]     assertTrue(target.listContains(0, 1, 2, 3)); [EOL]     assertTrue(target.queueContains(0, 1, 2, 3)); [EOL]     assertTrue(target.setContains(0.1F, 0.2F, 0.3F, 0.4F)); [EOL]     assertTrue(target.sortedSetContains('a', 'b', 'c', 'd')); [EOL] }
public void testSubInterfacesOfCollectionDeserialization() throws Exception { [EOL]     String json = "{\"list\":[0,1,2,3],\"queue\":[0,1,2,3],\"set\":[0.1,0.2,0.3,0.4]," + "\"sortedSet\":[\"a\",\"b\",\"c\",\"d\"]" + "}"; [EOL]     ClassWithSubInterfacesOfCollection target = gson.fromJson(json, ClassWithSubInterfacesOfCollection.class); [EOL]     assertTrue(target.listContains(0, 1, 2, 3)); [EOL]     assertTrue(target.queueContains(0, 1, 2, 3)); [EOL]     assertTrue(target.setContains(0.1F, 0.2F, 0.3F, 0.4F)); [EOL]     assertTrue(target.sortedSetContains('a', 'b', 'c', 'd')); [EOL] }
public void testSimpleAdapter() throws Exception { [EOL]     Field field = String.class.getFields()[0]; [EOL]     String expectedFieldName = field.getName().toUpperCase(); [EOL]     FieldNamingStrategy2 adapter = new FieldNamingStrategy2Adapter(new UpperCaseNamingStrategy()); [EOL]     assertEquals(expectedFieldName, adapter.translateName(new FieldAttributes(String.class, field))); [EOL] }
public void testSimpleAdapter() throws Exception { [EOL]     Field field = String.class.getFields()[0]; [EOL]     String expectedFieldName = field.getName().toUpperCase(); [EOL]     FieldNamingStrategy2 adapter = new FieldNamingStrategy2Adapter(new UpperCaseNamingStrategy()); [EOL]     assertEquals(expectedFieldName, adapter.translateName(new FieldAttributes(String.class, field))); [EOL] }
public void testSimpleAdapter() throws Exception { [EOL]     Field field = String.class.getFields()[0]; [EOL]     String expectedFieldName = field.getName().toUpperCase(); [EOL]     FieldNamingStrategy2 adapter = new FieldNamingStrategy2Adapter(new UpperCaseNamingStrategy()); [EOL]     assertEquals(expectedFieldName, adapter.translateName(new FieldAttributes(String.class, field))); [EOL] }
public void testSimpleAdapter() throws Exception { [EOL]     Field field = String.class.getFields()[0]; [EOL]     String expectedFieldName = field.getName().toUpperCase(); [EOL]     FieldNamingStrategy2 adapter = new FieldNamingStrategy2Adapter(new UpperCaseNamingStrategy()); [EOL]     assertEquals(expectedFieldName, adapter.translateName(new FieldAttributes(String.class, field))); [EOL] }
public void testCreatingMoreThanOnce() { [EOL]     GsonBuilder builder = new GsonBuilder(); [EOL]     builder.create(); [EOL]     builder.create(); [EOL] }
public void testCreatingMoreThanOnce() { [EOL]     GsonBuilder builder = new GsonBuilder(); [EOL]     builder.create(); [EOL]     builder.create(); [EOL] }
public void testCreatingMoreThanOnce() { [EOL]     GsonBuilder builder = new GsonBuilder(); [EOL]     builder.create(); [EOL]     builder.create(); [EOL] }
public void testCreatingMoreThanOnce() { [EOL]     GsonBuilder builder = new GsonBuilder(); [EOL]     builder.create(); [EOL]     builder.create(); [EOL] }
public void testCreatingMoreThanOnce() { [EOL]     GsonBuilder builder = new GsonBuilder(); [EOL]     builder.create(); [EOL]     builder.create(); [EOL] }
public void testSetSerialization() throws Exception { [EOL]     Gson gson = new Gson(); [EOL]     HashSet<String> s = new HashSet<String>(); [EOL]     s.add("blah"); [EOL]     String json = gson.toJson(s); [EOL]     assertEquals("[\"blah\"]", json); [EOL]     json = gson.toJson(s, Set.class); [EOL]     assertEquals("[\"blah\"]", json); [EOL] }
public void testSetSerialization() throws Exception { [EOL]     Gson gson = new Gson(); [EOL]     HashSet<String> s = new HashSet<String>(); [EOL]     s.add("blah"); [EOL]     String json = gson.toJson(s); [EOL]     assertEquals("[\"blah\"]", json); [EOL]     json = gson.toJson(s, Set.class); [EOL]     assertEquals("[\"blah\"]", json); [EOL] }
public void testCreatingMoreThanOnce() { [EOL]     GsonBuilder builder = new GsonBuilder(); [EOL]     builder.create(); [EOL]     builder.create(); [EOL] }
public void testCreatingMoreThanOnce() { [EOL]     GsonBuilder builder = new GsonBuilder(); [EOL]     builder.create(); [EOL]     builder.create(); [EOL] }
public void testCreatingMoreThanOnce() { [EOL]     GsonBuilder builder = new GsonBuilder(); [EOL]     builder.create(); [EOL]     builder.create(); [EOL] }
public void testUuidDeserialization() { [EOL]     String uuidValue = "c237bec1-19ef-4858-a98e-521cf0aad4c0"; [EOL]     String json = '"' + uuidValue + '"'; [EOL]     UUID target = gson.fromJson(json, UUID.class); [EOL]     assertEquals(uuidValue, target.toString()); [EOL] }
public void testLocaleDeserializationWithLanguageCountry() { [EOL]     String json = "\"fr_CA\""; [EOL]     Locale locale = gson.fromJson(json, Locale.class); [EOL]     assertEquals(Locale.CANADA_FRENCH, locale); [EOL] }
public void testLocaleDeserializationWithLanguageCountry() { [EOL]     String json = "\"fr_CA\""; [EOL]     Locale locale = gson.fromJson(json, Locale.class); [EOL]     assertEquals(Locale.CANADA_FRENCH, locale); [EOL] }
public void testLocaleDeserializationWithLanguageCountry() { [EOL]     String json = "\"fr_CA\""; [EOL]     Locale locale = gson.fromJson(json, Locale.class); [EOL]     assertEquals(Locale.CANADA_FRENCH, locale); [EOL] }
public void testSetSerialization() throws Exception { [EOL]     Gson gson = new Gson(); [EOL]     HashSet<String> s = new HashSet<String>(); [EOL]     s.add("blah"); [EOL]     String json = gson.toJson(s); [EOL]     assertEquals("[\"blah\"]", json); [EOL]     json = gson.toJson(s, Set.class); [EOL]     assertEquals("[\"blah\"]", json); [EOL] }
public void testSetSerialization() throws Exception { [EOL]     Gson gson = new Gson(); [EOL]     HashSet<String> s = new HashSet<String>(); [EOL]     s.add("blah"); [EOL]     String json = gson.toJson(s); [EOL]     assertEquals("[\"blah\"]", json); [EOL]     json = gson.toJson(s, Set.class); [EOL]     assertEquals("[\"blah\"]", json); [EOL] }
public void testSetSerialization() throws Exception { [EOL]     Gson gson = new Gson(); [EOL]     HashSet<String> s = new HashSet<String>(); [EOL]     s.add("blah"); [EOL]     String json = gson.toJson(s); [EOL]     assertEquals("[\"blah\"]", json); [EOL]     json = gson.toJson(s, Set.class); [EOL]     assertEquals("[\"blah\"]", json); [EOL] }
public void testSetSerialization() throws Exception { [EOL]     Gson gson = new Gson(); [EOL]     HashSet<String> s = new HashSet<String>(); [EOL]     s.add("blah"); [EOL]     String json = gson.toJson(s); [EOL]     assertEquals("[\"blah\"]", json); [EOL]     json = gson.toJson(s, Set.class); [EOL]     assertEquals("[\"blah\"]", json); [EOL] }
public void testSetSerialization() throws Exception { [EOL]     Gson gson = new Gson(); [EOL]     HashSet<String> s = new HashSet<String>(); [EOL]     s.add("blah"); [EOL]     String json = gson.toJson(s); [EOL]     assertEquals("[\"blah\"]", json); [EOL]     json = gson.toJson(s, Set.class); [EOL]     assertEquals("[\"blah\"]", json); [EOL] }
public void testCollectionOfStringsDeserialization() { [EOL]     String json = "[\"Hello\",\"World\"]"; [EOL]     Type collectionType = new TypeToken<Collection<String>>() { [EOL]     }.getType(); [EOL]     Collection<String> target = gson.fromJson(json, collectionType); [EOL]     assertTrue(target.contains("Hello")); [EOL]     assertTrue(target.contains("World")); [EOL] }
public void testBigIntegerFieldDeserialization() { [EOL]     ClassWithBigInteger expected = new ClassWithBigInteger("879697697697697697697697697697697697"); [EOL]     String json = expected.getExpectedJson(); [EOL]     ClassWithBigInteger actual = gson.fromJson(json, ClassWithBigInteger.class); [EOL]     assertEquals(expected.value, actual.value); [EOL] }
public void testBigIntegerFieldDeserialization() { [EOL]     ClassWithBigInteger expected = new ClassWithBigInteger("879697697697697697697697697697697697"); [EOL]     String json = expected.getExpectedJson(); [EOL]     ClassWithBigInteger actual = gson.fromJson(json, ClassWithBigInteger.class); [EOL]     assertEquals(expected.value, actual.value); [EOL] }
public void testBigIntegerFieldDeserialization() { [EOL]     ClassWithBigInteger expected = new ClassWithBigInteger("879697697697697697697697697697697697"); [EOL]     String json = expected.getExpectedJson(); [EOL]     ClassWithBigInteger actual = gson.fromJson(json, ClassWithBigInteger.class); [EOL]     assertEquals(expected.value, actual.value); [EOL] }
public void testBadFieldTypeForCustomDeserializerCustomTree() { [EOL]     JsonArray array = new JsonArray(); [EOL]     array.add(new JsonPrimitive("blah")); [EOL]     JsonObject obj = new JsonObject(); [EOL]     obj.addProperty("stringValue", "foo"); [EOL]     obj.addProperty("intValue", 11); [EOL]     obj.add("longValue", array); [EOL]     try { [EOL]         gson.fromJson(obj, BagOfPrimitives.class); [EOL]         fail("BagOfPrimitives is not an array"); [EOL]     } catch (JsonParseException expected) { [EOL]     } [EOL] }
public void testNegativeInfinitySerialization() { [EOL]     Gson gson = new GsonBuilder().serializeSpecialFloatingPointValues().create(); [EOL]     double negativeInfinity = Double.NEGATIVE_INFINITY; [EOL]     assertEquals("-Infinity", gson.toJson(negativeInfinity)); [EOL]     assertEquals("-Infinity", gson.toJson(Double.NEGATIVE_INFINITY)); [EOL] }
public void testNegativeInfinitySerialization() { [EOL]     Gson gson = new GsonBuilder().serializeSpecialFloatingPointValues().create(); [EOL]     double negativeInfinity = Double.NEGATIVE_INFINITY; [EOL]     assertEquals("-Infinity", gson.toJson(negativeInfinity)); [EOL]     assertEquals("-Infinity", gson.toJson(Double.NEGATIVE_INFINITY)); [EOL] }
public void testNegativeInfinitySerialization() { [EOL]     Gson gson = new GsonBuilder().serializeSpecialFloatingPointValues().create(); [EOL]     double negativeInfinity = Double.NEGATIVE_INFINITY; [EOL]     assertEquals("-Infinity", gson.toJson(negativeInfinity)); [EOL]     assertEquals("-Infinity", gson.toJson(Double.NEGATIVE_INFINITY)); [EOL] }
public void testNegativeInfinitySerialization() { [EOL]     Gson gson = new GsonBuilder().serializeSpecialFloatingPointValues().create(); [EOL]     double negativeInfinity = Double.NEGATIVE_INFINITY; [EOL]     assertEquals("-Infinity", gson.toJson(negativeInfinity)); [EOL]     assertEquals("-Infinity", gson.toJson(Double.NEGATIVE_INFINITY)); [EOL] }
public void testNegativeInfinitySerialization() { [EOL]     Gson gson = new GsonBuilder().serializeSpecialFloatingPointValues().create(); [EOL]     double negativeInfinity = Double.NEGATIVE_INFINITY; [EOL]     assertEquals("-Infinity", gson.toJson(negativeInfinity)); [EOL]     assertEquals("-Infinity", gson.toJson(Double.NEGATIVE_INFINITY)); [EOL] }
public void testSubInterfacesOfCollectionDeserialization() throws Exception { [EOL]     String json = "{\"list\":[0,1,2,3],\"queue\":[0,1,2,3],\"set\":[0.1,0.2,0.3,0.4]," + "\"sortedSet\":[\"a\",\"b\",\"c\",\"d\"]" + "}"; [EOL]     ClassWithSubInterfacesOfCollection target = gson.fromJson(json, ClassWithSubInterfacesOfCollection.class); [EOL]     assertTrue(target.listContains(0, 1, 2, 3)); [EOL]     assertTrue(target.queueContains(0, 1, 2, 3)); [EOL]     assertTrue(target.setContains(0.1F, 0.2F, 0.3F, 0.4F)); [EOL]     assertTrue(target.sortedSetContains('a', 'b', 'c', 'd')); [EOL] }
public void testSubInterfacesOfCollectionDeserialization() throws Exception { [EOL]     String json = "{\"list\":[0,1,2,3],\"queue\":[0,1,2,3],\"set\":[0.1,0.2,0.3,0.4]," + "\"sortedSet\":[\"a\",\"b\",\"c\",\"d\"]" + "}"; [EOL]     ClassWithSubInterfacesOfCollection target = gson.fromJson(json, ClassWithSubInterfacesOfCollection.class); [EOL]     assertTrue(target.listContains(0, 1, 2, 3)); [EOL]     assertTrue(target.queueContains(0, 1, 2, 3)); [EOL]     assertTrue(target.setContains(0.1F, 0.2F, 0.3F, 0.4F)); [EOL]     assertTrue(target.sortedSetContains('a', 'b', 'c', 'd')); [EOL] }
public void testSubInterfacesOfCollectionDeserialization() throws Exception { [EOL]     String json = "{\"list\":[0,1,2,3],\"queue\":[0,1,2,3],\"set\":[0.1,0.2,0.3,0.4]," + "\"sortedSet\":[\"a\",\"b\",\"c\",\"d\"]" + "}"; [EOL]     ClassWithSubInterfacesOfCollection target = gson.fromJson(json, ClassWithSubInterfacesOfCollection.class); [EOL]     assertTrue(target.listContains(0, 1, 2, 3)); [EOL]     assertTrue(target.queueContains(0, 1, 2, 3)); [EOL]     assertTrue(target.setContains(0.1F, 0.2F, 0.3F, 0.4F)); [EOL]     assertTrue(target.sortedSetContains('a', 'b', 'c', 'd')); [EOL] }
public void testSetSerialization() throws Exception { [EOL]     Gson gson = new Gson(); [EOL]     HashSet<String> s = new HashSet<String>(); [EOL]     s.add("blah"); [EOL]     String json = gson.toJson(s); [EOL]     assertEquals("[\"blah\"]", json); [EOL]     json = gson.toJson(s, Set.class); [EOL]     assertEquals("[\"blah\"]", json); [EOL] }
public void testSetSerialization() throws Exception { [EOL]     Gson gson = new Gson(); [EOL]     HashSet<String> s = new HashSet<String>(); [EOL]     s.add("blah"); [EOL]     String json = gson.toJson(s); [EOL]     assertEquals("[\"blah\"]", json); [EOL]     json = gson.toJson(s, Set.class); [EOL]     assertEquals("[\"blah\"]", json); [EOL] }
public void testInvalidConstruction() throws Exception { [EOL]     try { [EOL]         new TypeInfoMap(String.class); [EOL]         fail("Must be a ParameterizedType"); [EOL]     } catch (IllegalArgumentException expected) { [EOL]     } [EOL] }
public void testInvalidConstruction() throws Exception { [EOL]     try { [EOL]         new TypeInfoMap(String.class); [EOL]         fail("Must be a ParameterizedType"); [EOL]     } catch (IllegalArgumentException expected) { [EOL]     } [EOL] }
public void testInvalidConstruction() throws Exception { [EOL]     try { [EOL]         new TypeInfoMap(String.class); [EOL]         fail("Must be a ParameterizedType"); [EOL]     } catch (IllegalArgumentException expected) { [EOL]     } [EOL] }
public void testBadTypeForDeserializingCustomTree() { [EOL]     JsonObject obj = new JsonObject(); [EOL]     obj.addProperty("stringValue", "foo"); [EOL]     obj.addProperty("intValue", 11); [EOL]     JsonArray array = new JsonArray(); [EOL]     array.add(obj); [EOL]     try { [EOL]         gson.fromJson(array, BagOfPrimitives.class); [EOL]         fail("BagOfPrimitives is not an array"); [EOL]     } catch (JsonParseException expected) { [EOL]     } [EOL] }
public void testExplicitNullSetsFieldToNullDuringDeserialization() { [EOL]     Gson gson = new Gson(); [EOL]     String json = "{value:null}"; [EOL]     ObjectWithField obj = gson.fromJson(json, ObjectWithField.class); [EOL]     assertNull(obj.value); [EOL] }
public void testExplicitNullSetsFieldToNullDuringDeserialization() { [EOL]     Gson gson = new Gson(); [EOL]     String json = "{value:null}"; [EOL]     ObjectWithField obj = gson.fromJson(json, ObjectWithField.class); [EOL]     assertNull(obj.value); [EOL] }
public void testExplicitNullSetsFieldToNullDuringDeserialization() { [EOL]     Gson gson = new Gson(); [EOL]     String json = "{value:null}"; [EOL]     ObjectWithField obj = gson.fromJson(json, ObjectWithField.class); [EOL]     assertNull(obj.value); [EOL] }
public void testExplicitNullSetsFieldToNullDuringDeserialization() { [EOL]     Gson gson = new Gson(); [EOL]     String json = "{value:null}"; [EOL]     ObjectWithField obj = gson.fromJson(json, ObjectWithField.class); [EOL]     assertNull(obj.value); [EOL] }
public void testExplicitNullSetsFieldToNullDuringDeserialization() { [EOL]     Gson gson = new Gson(); [EOL]     String json = "{value:null}"; [EOL]     ObjectWithField obj = gson.fromJson(json, ObjectWithField.class); [EOL]     assertNull(obj.value); [EOL] }
public void testExplicitNullSetsFieldToNullDuringDeserialization() { [EOL]     Gson gson = new Gson(); [EOL]     String json = "{value:null}"; [EOL]     ObjectWithField obj = gson.fromJson(json, ObjectWithField.class); [EOL]     assertNull(obj.value); [EOL] }
public void testExplicitNullSetsFieldToNullDuringDeserialization() { [EOL]     Gson gson = new Gson(); [EOL]     String json = "{value:null}"; [EOL]     ObjectWithField obj = gson.fromJson(json, ObjectWithField.class); [EOL]     assertNull(obj.value); [EOL] }
public void testExplicitNullSetsFieldToNullDuringDeserialization() { [EOL]     Gson gson = new Gson(); [EOL]     String json = "{value:null}"; [EOL]     ObjectWithField obj = gson.fromJson(json, ObjectWithField.class); [EOL]     assertNull(obj.value); [EOL] }
public void testNegativeInfinitySerialization() { [EOL]     Gson gson = new GsonBuilder().serializeSpecialFloatingPointValues().create(); [EOL]     double negativeInfinity = Double.NEGATIVE_INFINITY; [EOL]     assertEquals("-Infinity", gson.toJson(negativeInfinity)); [EOL]     assertEquals("-Infinity", gson.toJson(Double.NEGATIVE_INFINITY)); [EOL] }
public void testNegativeInfinitySerialization() { [EOL]     Gson gson = new GsonBuilder().serializeSpecialFloatingPointValues().create(); [EOL]     double negativeInfinity = Double.NEGATIVE_INFINITY; [EOL]     assertEquals("-Infinity", gson.toJson(negativeInfinity)); [EOL]     assertEquals("-Infinity", gson.toJson(Double.NEGATIVE_INFINITY)); [EOL] }
public void testNegativeInfinitySerialization() { [EOL]     Gson gson = new GsonBuilder().serializeSpecialFloatingPointValues().create(); [EOL]     double negativeInfinity = Double.NEGATIVE_INFINITY; [EOL]     assertEquals("-Infinity", gson.toJson(negativeInfinity)); [EOL]     assertEquals("-Infinity", gson.toJson(Double.NEGATIVE_INFINITY)); [EOL] }
public void testNegativeInfinitySerialization() { [EOL]     Gson gson = new GsonBuilder().serializeSpecialFloatingPointValues().create(); [EOL]     double negativeInfinity = Double.NEGATIVE_INFINITY; [EOL]     assertEquals("-Infinity", gson.toJson(negativeInfinity)); [EOL]     assertEquals("-Infinity", gson.toJson(Double.NEGATIVE_INFINITY)); [EOL] }
public void testNegativeInfinitySerialization() { [EOL]     Gson gson = new GsonBuilder().serializeSpecialFloatingPointValues().create(); [EOL]     double negativeInfinity = Double.NEGATIVE_INFINITY; [EOL]     assertEquals("-Infinity", gson.toJson(negativeInfinity)); [EOL]     assertEquals("-Infinity", gson.toJson(Double.NEGATIVE_INFINITY)); [EOL] }
public void testNegativeInfinitySerialization() { [EOL]     Gson gson = new GsonBuilder().serializeSpecialFloatingPointValues().create(); [EOL]     double negativeInfinity = Double.NEGATIVE_INFINITY; [EOL]     assertEquals("-Infinity", gson.toJson(negativeInfinity)); [EOL]     assertEquals("-Infinity", gson.toJson(Double.NEGATIVE_INFINITY)); [EOL] }
public void testNegativeInfinitySerialization() { [EOL]     Gson gson = new GsonBuilder().serializeSpecialFloatingPointValues().create(); [EOL]     double negativeInfinity = Double.NEGATIVE_INFINITY; [EOL]     assertEquals("-Infinity", gson.toJson(negativeInfinity)); [EOL]     assertEquals("-Infinity", gson.toJson(Double.NEGATIVE_INFINITY)); [EOL] }
public void testNegativeInfinitySerialization() { [EOL]     Gson gson = new GsonBuilder().serializeSpecialFloatingPointValues().create(); [EOL]     double negativeInfinity = Double.NEGATIVE_INFINITY; [EOL]     assertEquals("-Infinity", gson.toJson(negativeInfinity)); [EOL]     assertEquals("-Infinity", gson.toJson(Double.NEGATIVE_INFINITY)); [EOL] }
public void testNegativeInfinitySerialization() { [EOL]     Gson gson = new GsonBuilder().serializeSpecialFloatingPointValues().create(); [EOL]     double negativeInfinity = Double.NEGATIVE_INFINITY; [EOL]     assertEquals("-Infinity", gson.toJson(negativeInfinity)); [EOL]     assertEquals("-Infinity", gson.toJson(Double.NEGATIVE_INFINITY)); [EOL] }
public void testNegativeInfinitySerialization() { [EOL]     Gson gson = new GsonBuilder().serializeSpecialFloatingPointValues().create(); [EOL]     double negativeInfinity = Double.NEGATIVE_INFINITY; [EOL]     assertEquals("-Infinity", gson.toJson(negativeInfinity)); [EOL]     assertEquals("-Infinity", gson.toJson(Double.NEGATIVE_INFINITY)); [EOL] }
public void testSubInterfacesOfCollectionDeserialization() throws Exception { [EOL]     String json = "{\"list\":[0,1,2,3],\"queue\":[0,1,2,3],\"set\":[0.1,0.2,0.3,0.4]," + "\"sortedSet\":[\"a\",\"b\",\"c\",\"d\"]" + "}"; [EOL]     ClassWithSubInterfacesOfCollection target = gson.fromJson(json, ClassWithSubInterfacesOfCollection.class); [EOL]     assertTrue(target.listContains(0, 1, 2, 3)); [EOL]     assertTrue(target.queueContains(0, 1, 2, 3)); [EOL]     assertTrue(target.setContains(0.1F, 0.2F, 0.3F, 0.4F)); [EOL]     assertTrue(target.sortedSetContains('a', 'b', 'c', 'd')); [EOL] }
public void testSubInterfacesOfCollectionDeserialization() throws Exception { [EOL]     String json = "{\"list\":[0,1,2,3],\"queue\":[0,1,2,3],\"set\":[0.1,0.2,0.3,0.4]," + "\"sortedSet\":[\"a\",\"b\",\"c\",\"d\"]" + "}"; [EOL]     ClassWithSubInterfacesOfCollection target = gson.fromJson(json, ClassWithSubInterfacesOfCollection.class); [EOL]     assertTrue(target.listContains(0, 1, 2, 3)); [EOL]     assertTrue(target.queueContains(0, 1, 2, 3)); [EOL]     assertTrue(target.setContains(0.1F, 0.2F, 0.3F, 0.4F)); [EOL]     assertTrue(target.sortedSetContains('a', 'b', 'c', 'd')); [EOL] }
public void testSubInterfacesOfCollectionDeserialization() throws Exception { [EOL]     String json = "{\"list\":[0,1,2,3],\"queue\":[0,1,2,3],\"set\":[0.1,0.2,0.3,0.4]," + "\"sortedSet\":[\"a\",\"b\",\"c\",\"d\"]" + "}"; [EOL]     ClassWithSubInterfacesOfCollection target = gson.fromJson(json, ClassWithSubInterfacesOfCollection.class); [EOL]     assertTrue(target.listContains(0, 1, 2, 3)); [EOL]     assertTrue(target.queueContains(0, 1, 2, 3)); [EOL]     assertTrue(target.setContains(0.1F, 0.2F, 0.3F, 0.4F)); [EOL]     assertTrue(target.sortedSetContains('a', 'b', 'c', 'd')); [EOL] }
public void testSubInterfacesOfCollectionDeserialization() throws Exception { [EOL]     String json = "{\"list\":[0,1,2,3],\"queue\":[0,1,2,3],\"set\":[0.1,0.2,0.3,0.4]," + "\"sortedSet\":[\"a\",\"b\",\"c\",\"d\"]" + "}"; [EOL]     ClassWithSubInterfacesOfCollection target = gson.fromJson(json, ClassWithSubInterfacesOfCollection.class); [EOL]     assertTrue(target.listContains(0, 1, 2, 3)); [EOL]     assertTrue(target.queueContains(0, 1, 2, 3)); [EOL]     assertTrue(target.setContains(0.1F, 0.2F, 0.3F, 0.4F)); [EOL]     assertTrue(target.sortedSetContains('a', 'b', 'c', 'd')); [EOL] }
public void testPrimitiveDoubleAutoboxedInASingleElementArrayDeserialization() { [EOL]     double expected = -122.08; [EOL]     double actual = gson.fromJson("[-122.08]", double.class); [EOL]     assertEquals(expected, actual); [EOL]     actual = gson.fromJson("[-122.08]", Double.class); [EOL]     assertEquals(expected, actual); [EOL] }
public void testPrimitiveDoubleAutoboxedInASingleElementArrayDeserialization() { [EOL]     double expected = -122.08; [EOL]     double actual = gson.fromJson("[-122.08]", double.class); [EOL]     assertEquals(expected, actual); [EOL]     actual = gson.fromJson("[-122.08]", Double.class); [EOL]     assertEquals(expected, actual); [EOL] }
public void testPrimitiveDoubleAutoboxedInASingleElementArrayDeserialization() { [EOL]     double expected = -122.08; [EOL]     double actual = gson.fromJson("[-122.08]", double.class); [EOL]     assertEquals(expected, actual); [EOL]     actual = gson.fromJson("[-122.08]", Double.class); [EOL]     assertEquals(expected, actual); [EOL] }
public void testBadFieldTypeForCustomDeserializerCustomTree() { [EOL]     JsonArray array = new JsonArray(); [EOL]     array.add(new JsonPrimitive("blah")); [EOL]     JsonObject obj = new JsonObject(); [EOL]     obj.addProperty("stringValue", "foo"); [EOL]     obj.addProperty("intValue", 11); [EOL]     obj.add("longValue", array); [EOL]     try { [EOL]         gson.fromJson(obj, BagOfPrimitives.class); [EOL]         fail("BagOfPrimitives is not an array"); [EOL]     } catch (JsonParseException expected) { [EOL]     } [EOL] }
public void testBadFieldTypeForCustomDeserializerCustomTree() { [EOL]     JsonArray array = new JsonArray(); [EOL]     array.add(new JsonPrimitive("blah")); [EOL]     JsonObject obj = new JsonObject(); [EOL]     obj.addProperty("stringValue", "foo"); [EOL]     obj.addProperty("intValue", 11); [EOL]     obj.add("longValue", array); [EOL]     try { [EOL]         gson.fromJson(obj, BagOfPrimitives.class); [EOL]         fail("BagOfPrimitives is not an array"); [EOL]     } catch (JsonParseException expected) { [EOL]     } [EOL] }
public void testBadFieldTypeForCustomDeserializerCustomTree() { [EOL]     JsonArray array = new JsonArray(); [EOL]     array.add(new JsonPrimitive("blah")); [EOL]     JsonObject obj = new JsonObject(); [EOL]     obj.addProperty("stringValue", "foo"); [EOL]     obj.addProperty("intValue", 11); [EOL]     obj.add("longValue", array); [EOL]     try { [EOL]         gson.fromJson(obj, BagOfPrimitives.class); [EOL]         fail("BagOfPrimitives is not an array"); [EOL]     } catch (JsonParseException expected) { [EOL]     } [EOL] }
public void testPrimitiveIntegerAutoboxedInASingleElementArrayDeserialization() { [EOL]     int expected = 1; [EOL]     int actual = gson.fromJson("[1]", int.class); [EOL]     assertEquals(expected, actual); [EOL]     actual = gson.fromJson("[1]", Integer.class); [EOL]     assertEquals(expected, actual); [EOL] }
public void testPrimitiveIntegerAutoboxedInASingleElementArrayDeserialization() { [EOL]     int expected = 1; [EOL]     int actual = gson.fromJson("[1]", int.class); [EOL]     assertEquals(expected, actual); [EOL]     actual = gson.fromJson("[1]", Integer.class); [EOL]     assertEquals(expected, actual); [EOL] }
public void testPrimitiveIntegerAutoboxedInASingleElementArrayDeserialization() { [EOL]     int expected = 1; [EOL]     int actual = gson.fromJson("[1]", int.class); [EOL]     assertEquals(expected, actual); [EOL]     actual = gson.fromJson("[1]", Integer.class); [EOL]     assertEquals(expected, actual); [EOL] }
public void testReplaceExistingTypeHierarchyHandler() { [EOL]     paramMap.registerForTypeHierarchy(Base.class, "baseHandler"); [EOL]     paramMap.registerForTypeHierarchy(Base.class, "base2Handler"); [EOL]     String handler = paramMap.getHandlerFor(Base.class); [EOL]     assertEquals("base2Handler", handler); [EOL] }
public void testReplaceExistingTypeHierarchyHandler() { [EOL]     paramMap.registerForTypeHierarchy(Base.class, "baseHandler"); [EOL]     paramMap.registerForTypeHierarchy(Base.class, "base2Handler"); [EOL]     String handler = paramMap.getHandlerFor(Base.class); [EOL]     assertEquals("base2Handler", handler); [EOL] }
public void testReplaceExistingTypeHierarchyHandler() { [EOL]     paramMap.registerForTypeHierarchy(Base.class, "baseHandler"); [EOL]     paramMap.registerForTypeHierarchy(Base.class, "base2Handler"); [EOL]     String handler = paramMap.getHandlerFor(Base.class); [EOL]     assertEquals("base2Handler", handler); [EOL] }
public void testReplaceExistingTypeHierarchyHandler() { [EOL]     paramMap.registerForTypeHierarchy(Base.class, "baseHandler"); [EOL]     paramMap.registerForTypeHierarchy(Base.class, "base2Handler"); [EOL]     String handler = paramMap.getHandlerFor(Base.class); [EOL]     assertEquals("base2Handler", handler); [EOL] }
public void testReplaceExistingTypeHierarchyHandler() { [EOL]     paramMap.registerForTypeHierarchy(Base.class, "baseHandler"); [EOL]     paramMap.registerForTypeHierarchy(Base.class, "base2Handler"); [EOL]     String handler = paramMap.getHandlerFor(Base.class); [EOL]     assertEquals("base2Handler", handler); [EOL] }
public void testReplaceExistingTypeHierarchyHandler() { [EOL]     paramMap.registerForTypeHierarchy(Base.class, "baseHandler"); [EOL]     paramMap.registerForTypeHierarchy(Base.class, "base2Handler"); [EOL]     String handler = paramMap.getHandlerFor(Base.class); [EOL]     assertEquals("base2Handler", handler); [EOL] }
public void testReplaceExistingTypeHierarchyHandler() { [EOL]     paramMap.registerForTypeHierarchy(Base.class, "baseHandler"); [EOL]     paramMap.registerForTypeHierarchy(Base.class, "base2Handler"); [EOL]     String handler = paramMap.getHandlerFor(Base.class); [EOL]     assertEquals("base2Handler", handler); [EOL] }
public void testTypeOverridding() throws Exception { [EOL]     String handler1 = "blah1"; [EOL]     String handler2 = "blah2"; [EOL]     paramMap.register(String.class, handler1); [EOL]     paramMap.register(String.class, handler2); [EOL]     assertTrue(paramMap.hasSpecificHandlerFor(String.class)); [EOL]     assertEquals(handler2, paramMap.getHandlerFor(String.class)); [EOL] }
public void testTypeOverridding() throws Exception { [EOL]     String handler1 = "blah1"; [EOL]     String handler2 = "blah2"; [EOL]     paramMap.register(String.class, handler1); [EOL]     paramMap.register(String.class, handler2); [EOL]     assertTrue(paramMap.hasSpecificHandlerFor(String.class)); [EOL]     assertEquals(handler2, paramMap.getHandlerFor(String.class)); [EOL] }
public void testTypeOverridding() throws Exception { [EOL]     String handler1 = "blah1"; [EOL]     String handler2 = "blah2"; [EOL]     paramMap.register(String.class, handler1); [EOL]     paramMap.register(String.class, handler2); [EOL]     assertTrue(paramMap.hasSpecificHandlerFor(String.class)); [EOL]     assertEquals(handler2, paramMap.getHandlerFor(String.class)); [EOL] }
public void testTypeHierarchyRegisterIfAbsent() { [EOL]     paramMap.registerForTypeHierarchy(Base.class, "baseHandler"); [EOL]     ParameterizedTypeHandlerMap<String> otherMap = new ParameterizedTypeHandlerMap<String>(); [EOL]     otherMap.registerForTypeHierarchy(Base.class, "baseHandler2"); [EOL]     paramMap.registerIfAbsent(otherMap); [EOL]     String handler = paramMap.getHandlerFor(Base.class); [EOL]     assertEquals("baseHandler", handler); [EOL] }
public void testTypeHierarchyRegisterIfAbsent() { [EOL]     paramMap.registerForTypeHierarchy(Base.class, "baseHandler"); [EOL]     ParameterizedTypeHandlerMap<String> otherMap = new ParameterizedTypeHandlerMap<String>(); [EOL]     otherMap.registerForTypeHierarchy(Base.class, "baseHandler2"); [EOL]     paramMap.registerIfAbsent(otherMap); [EOL]     String handler = paramMap.getHandlerFor(Base.class); [EOL]     assertEquals("baseHandler", handler); [EOL] }
public void testTypeHierarchyRegisterIfAbsent() { [EOL]     paramMap.registerForTypeHierarchy(Base.class, "baseHandler"); [EOL]     ParameterizedTypeHandlerMap<String> otherMap = new ParameterizedTypeHandlerMap<String>(); [EOL]     otherMap.registerForTypeHierarchy(Base.class, "baseHandler2"); [EOL]     paramMap.registerIfAbsent(otherMap); [EOL]     String handler = paramMap.getHandlerFor(Base.class); [EOL]     assertEquals("baseHandler", handler); [EOL] }
public void testTypeHierarchyRegisterIfAbsent() { [EOL]     paramMap.registerForTypeHierarchy(Base.class, "baseHandler"); [EOL]     ParameterizedTypeHandlerMap<String> otherMap = new ParameterizedTypeHandlerMap<String>(); [EOL]     otherMap.registerForTypeHierarchy(Base.class, "baseHandler2"); [EOL]     paramMap.registerIfAbsent(otherMap); [EOL]     String handler = paramMap.getHandlerFor(Base.class); [EOL]     assertEquals("baseHandler", handler); [EOL] }
public void testTypeHierarchyRegisterIfAbsent() { [EOL]     paramMap.registerForTypeHierarchy(Base.class, "baseHandler"); [EOL]     ParameterizedTypeHandlerMap<String> otherMap = new ParameterizedTypeHandlerMap<String>(); [EOL]     otherMap.registerForTypeHierarchy(Base.class, "baseHandler2"); [EOL]     paramMap.registerIfAbsent(otherMap); [EOL]     String handler = paramMap.getHandlerFor(Base.class); [EOL]     assertEquals("baseHandler", handler); [EOL] }
public void testNegativeInfinitySerialization() { [EOL]     Gson gson = new GsonBuilder().serializeSpecialFloatingPointValues().create(); [EOL]     double negativeInfinity = Double.NEGATIVE_INFINITY; [EOL]     assertEquals("-Infinity", gson.toJson(negativeInfinity)); [EOL]     assertEquals("-Infinity", gson.toJson(Double.NEGATIVE_INFINITY)); [EOL] }
public void testNegativeInfinitySerialization() { [EOL]     Gson gson = new GsonBuilder().serializeSpecialFloatingPointValues().create(); [EOL]     double negativeInfinity = Double.NEGATIVE_INFINITY; [EOL]     assertEquals("-Infinity", gson.toJson(negativeInfinity)); [EOL]     assertEquals("-Infinity", gson.toJson(Double.NEGATIVE_INFINITY)); [EOL] }
public void testNegativeInfinitySerialization() { [EOL]     Gson gson = new GsonBuilder().serializeSpecialFloatingPointValues().create(); [EOL]     double negativeInfinity = Double.NEGATIVE_INFINITY; [EOL]     assertEquals("-Infinity", gson.toJson(negativeInfinity)); [EOL]     assertEquals("-Infinity", gson.toJson(Double.NEGATIVE_INFINITY)); [EOL] }
public void testReplaceExistingTypeHierarchyHandler() { [EOL]     paramMap.registerForTypeHierarchy(Base.class, "baseHandler"); [EOL]     paramMap.registerForTypeHierarchy(Base.class, "base2Handler"); [EOL]     String handler = paramMap.getHandlerFor(Base.class); [EOL]     assertEquals("base2Handler", handler); [EOL] }
public void testReplaceExistingTypeHierarchyHandler() { [EOL]     paramMap.registerForTypeHierarchy(Base.class, "baseHandler"); [EOL]     paramMap.registerForTypeHierarchy(Base.class, "base2Handler"); [EOL]     String handler = paramMap.getHandlerFor(Base.class); [EOL]     assertEquals("base2Handler", handler); [EOL] }
public void testReplaceExistingTypeHierarchyHandler() { [EOL]     paramMap.registerForTypeHierarchy(Base.class, "baseHandler"); [EOL]     paramMap.registerForTypeHierarchy(Base.class, "base2Handler"); [EOL]     String handler = paramMap.getHandlerFor(Base.class); [EOL]     assertEquals("base2Handler", handler); [EOL] }
public void testReplaceExistingTypeHierarchyHandler() { [EOL]     paramMap.registerForTypeHierarchy(Base.class, "baseHandler"); [EOL]     paramMap.registerForTypeHierarchy(Base.class, "base2Handler"); [EOL]     String handler = paramMap.getHandlerFor(Base.class); [EOL]     assertEquals("base2Handler", handler); [EOL] }
public void testReplaceExistingTypeHierarchyHandler() { [EOL]     paramMap.registerForTypeHierarchy(Base.class, "baseHandler"); [EOL]     paramMap.registerForTypeHierarchy(Base.class, "base2Handler"); [EOL]     String handler = paramMap.getHandlerFor(Base.class); [EOL]     assertEquals("base2Handler", handler); [EOL] }
public void testReplaceExistingTypeHierarchyHandler() { [EOL]     paramMap.registerForTypeHierarchy(Base.class, "baseHandler"); [EOL]     paramMap.registerForTypeHierarchy(Base.class, "base2Handler"); [EOL]     String handler = paramMap.getHandlerFor(Base.class); [EOL]     assertEquals("base2Handler", handler); [EOL] }
public void testTypeOverridding() throws Exception { [EOL]     String handler1 = "blah1"; [EOL]     String handler2 = "blah2"; [EOL]     paramMap.register(String.class, handler1); [EOL]     paramMap.register(String.class, handler2); [EOL]     assertTrue(paramMap.hasSpecificHandlerFor(String.class)); [EOL]     assertEquals(handler2, paramMap.getHandlerFor(String.class)); [EOL] }
public void testReplaceExistingTypeHierarchyHandler() { [EOL]     paramMap.registerForTypeHierarchy(Base.class, "baseHandler"); [EOL]     paramMap.registerForTypeHierarchy(Base.class, "base2Handler"); [EOL]     String handler = paramMap.getHandlerFor(Base.class); [EOL]     assertEquals("base2Handler", handler); [EOL] }
public void testReplaceExistingTypeHierarchyHandler() { [EOL]     paramMap.registerForTypeHierarchy(Base.class, "baseHandler"); [EOL]     paramMap.registerForTypeHierarchy(Base.class, "base2Handler"); [EOL]     String handler = paramMap.getHandlerFor(Base.class); [EOL]     assertEquals("base2Handler", handler); [EOL] }
public void testNegativeInfinitySerialization() { [EOL]     Gson gson = new GsonBuilder().serializeSpecialFloatingPointValues().create(); [EOL]     double negativeInfinity = Double.NEGATIVE_INFINITY; [EOL]     assertEquals("-Infinity", gson.toJson(negativeInfinity)); [EOL]     assertEquals("-Infinity", gson.toJson(Double.NEGATIVE_INFINITY)); [EOL] }
public void testNegativeInfinitySerialization() { [EOL]     Gson gson = new GsonBuilder().serializeSpecialFloatingPointValues().create(); [EOL]     double negativeInfinity = Double.NEGATIVE_INFINITY; [EOL]     assertEquals("-Infinity", gson.toJson(negativeInfinity)); [EOL]     assertEquals("-Infinity", gson.toJson(Double.NEGATIVE_INFINITY)); [EOL] }
public void testNegativeInfinitySerialization() { [EOL]     Gson gson = new GsonBuilder().serializeSpecialFloatingPointValues().create(); [EOL]     double negativeInfinity = Double.NEGATIVE_INFINITY; [EOL]     assertEquals("-Infinity", gson.toJson(negativeInfinity)); [EOL]     assertEquals("-Infinity", gson.toJson(Double.NEGATIVE_INFINITY)); [EOL] }
public void testParseEmptyWhitespaceInput() { [EOL]     JsonElement e = parser.parse("     "); [EOL]     assertTrue(e.isJsonNull()); [EOL] }
public void testParseEmptyWhitespaceInput() { [EOL]     JsonElement e = parser.parse("     "); [EOL]     assertTrue(e.isJsonNull()); [EOL] }
public void testParseEmptyWhitespaceInput() { [EOL]     JsonElement e = parser.parse("     "); [EOL]     assertTrue(e.isJsonNull()); [EOL] }
public void testParseEmptyWhitespaceInput() { [EOL]     JsonElement e = parser.parse("     "); [EOL]     assertTrue(e.isJsonNull()); [EOL] }
public void testParseEmptyWhitespaceInput() { [EOL]     JsonElement e = parser.parse("     "); [EOL]     assertTrue(e.isJsonNull()); [EOL] }
public void testSubInterfacesOfCollectionDeserialization() throws Exception { [EOL]     String json = "{\"list\":[0,1,2,3],\"queue\":[0,1,2,3],\"set\":[0.1,0.2,0.3,0.4]," + "\"sortedSet\":[\"a\",\"b\",\"c\",\"d\"]" + "}"; [EOL]     ClassWithSubInterfacesOfCollection target = gson.fromJson(json, ClassWithSubInterfacesOfCollection.class); [EOL]     assertTrue(target.listContains(0, 1, 2, 3)); [EOL]     assertTrue(target.queueContains(0, 1, 2, 3)); [EOL]     assertTrue(target.setContains(0.1F, 0.2F, 0.3F, 0.4F)); [EOL]     assertTrue(target.sortedSetContains('a', 'b', 'c', 'd')); [EOL] }
public void testCreatingMoreThanOnce() { [EOL]     GsonBuilder builder = new GsonBuilder(); [EOL]     builder.create(); [EOL]     builder.create(); [EOL] }
public void testCreatingMoreThanOnce() { [EOL]     GsonBuilder builder = new GsonBuilder(); [EOL]     builder.create(); [EOL]     builder.create(); [EOL] }
public void testGsonWithUpperCamelCaseSpacesPolicyDeserialiation() { [EOL]     Gson gson = builder.setFieldNamingPolicy(FieldNamingPolicy.UPPER_CAMEL_CASE_WITH_SPACES).create(); [EOL]     String target = "{\"Some Constant String Instance Field\":\"someValue\"}"; [EOL]     StringWrapper deserializedObject = gson.fromJson(target, StringWrapper.class); [EOL]     assertEquals("someValue", deserializedObject.someConstantStringInstanceField); [EOL] }
public void testCreatingMoreThanOnce() { [EOL]     GsonBuilder builder = new GsonBuilder(); [EOL]     builder.create(); [EOL]     builder.create(); [EOL] }
public void testGsonWithUpperCamelCaseSpacesPolicyDeserialiation() { [EOL]     Gson gson = builder.setFieldNamingPolicy(FieldNamingPolicy.UPPER_CAMEL_CASE_WITH_SPACES).create(); [EOL]     String target = "{\"Some Constant String Instance Field\":\"someValue\"}"; [EOL]     StringWrapper deserializedObject = gson.fromJson(target, StringWrapper.class); [EOL]     assertEquals("someValue", deserializedObject.someConstantStringInstanceField); [EOL] }
public void testGsonWithUpperCamelCaseSpacesPolicyDeserialiation() { [EOL]     Gson gson = builder.setFieldNamingPolicy(FieldNamingPolicy.UPPER_CAMEL_CASE_WITH_SPACES).create(); [EOL]     String target = "{\"Some Constant String Instance Field\":\"someValue\"}"; [EOL]     StringWrapper deserializedObject = gson.fromJson(target, StringWrapper.class); [EOL]     assertEquals("someValue", deserializedObject.someConstantStringInstanceField); [EOL] }
public void testGsonWithUpperCamelCaseSpacesPolicyDeserialiation() { [EOL]     Gson gson = builder.setFieldNamingPolicy(FieldNamingPolicy.UPPER_CAMEL_CASE_WITH_SPACES).create(); [EOL]     String target = "{\"Some Constant String Instance Field\":\"someValue\"}"; [EOL]     StringWrapper deserializedObject = gson.fromJson(target, StringWrapper.class); [EOL]     assertEquals("someValue", deserializedObject.someConstantStringInstanceField); [EOL] }
public void testGsonWithUpperCamelCaseSpacesPolicyDeserialiation() { [EOL]     Gson gson = builder.setFieldNamingPolicy(FieldNamingPolicy.UPPER_CAMEL_CASE_WITH_SPACES).create(); [EOL]     String target = "{\"Some Constant String Instance Field\":\"someValue\"}"; [EOL]     StringWrapper deserializedObject = gson.fromJson(target, StringWrapper.class); [EOL]     assertEquals("someValue", deserializedObject.someConstantStringInstanceField); [EOL] }
public void testGsonWithUpperCamelCaseSpacesPolicyDeserialiation() { [EOL]     Gson gson = builder.setFieldNamingPolicy(FieldNamingPolicy.UPPER_CAMEL_CASE_WITH_SPACES).create(); [EOL]     String target = "{\"Some Constant String Instance Field\":\"someValue\"}"; [EOL]     StringWrapper deserializedObject = gson.fromJson(target, StringWrapper.class); [EOL]     assertEquals("someValue", deserializedObject.someConstantStringInstanceField); [EOL] }
public void testGsonWithUpperCamelCaseSpacesPolicyDeserialiation() { [EOL]     Gson gson = builder.setFieldNamingPolicy(FieldNamingPolicy.UPPER_CAMEL_CASE_WITH_SPACES).create(); [EOL]     String target = "{\"Some Constant String Instance Field\":\"someValue\"}"; [EOL]     StringWrapper deserializedObject = gson.fromJson(target, StringWrapper.class); [EOL]     assertEquals("someValue", deserializedObject.someConstantStringInstanceField); [EOL] }
public void testGsonWithUpperCamelCaseSpacesPolicyDeserialiation() { [EOL]     Gson gson = builder.setFieldNamingPolicy(FieldNamingPolicy.UPPER_CAMEL_CASE_WITH_SPACES).create(); [EOL]     String target = "{\"Some Constant String Instance Field\":\"someValue\"}"; [EOL]     StringWrapper deserializedObject = gson.fromJson(target, StringWrapper.class); [EOL]     assertEquals("someValue", deserializedObject.someConstantStringInstanceField); [EOL] }
public void testGsonWithUpperCamelCaseSpacesPolicyDeserialiation() { [EOL]     Gson gson = builder.setFieldNamingPolicy(FieldNamingPolicy.UPPER_CAMEL_CASE_WITH_SPACES).create(); [EOL]     String target = "{\"Some Constant String Instance Field\":\"someValue\"}"; [EOL]     StringWrapper deserializedObject = gson.fromJson(target, StringWrapper.class); [EOL]     assertEquals("someValue", deserializedObject.someConstantStringInstanceField); [EOL] }
public void testGsonWithUpperCamelCaseSpacesPolicyDeserialiation() { [EOL]     Gson gson = builder.setFieldNamingPolicy(FieldNamingPolicy.UPPER_CAMEL_CASE_WITH_SPACES).create(); [EOL]     String target = "{\"Some Constant String Instance Field\":\"someValue\"}"; [EOL]     StringWrapper deserializedObject = gson.fromJson(target, StringWrapper.class); [EOL]     assertEquals("someValue", deserializedObject.someConstantStringInstanceField); [EOL] }
public void testGsonWithUpperCamelCaseSpacesPolicyDeserialiation() { [EOL]     Gson gson = builder.setFieldNamingPolicy(FieldNamingPolicy.UPPER_CAMEL_CASE_WITH_SPACES).create(); [EOL]     String target = "{\"Some Constant String Instance Field\":\"someValue\"}"; [EOL]     StringWrapper deserializedObject = gson.fromJson(target, StringWrapper.class); [EOL]     assertEquals("someValue", deserializedObject.someConstantStringInstanceField); [EOL] }
public void testGsonWithUpperCamelCaseSpacesPolicyDeserialiation() { [EOL]     Gson gson = builder.setFieldNamingPolicy(FieldNamingPolicy.UPPER_CAMEL_CASE_WITH_SPACES).create(); [EOL]     String target = "{\"Some Constant String Instance Field\":\"someValue\"}"; [EOL]     StringWrapper deserializedObject = gson.fromJson(target, StringWrapper.class); [EOL]     assertEquals("someValue", deserializedObject.someConstantStringInstanceField); [EOL] }
public void testGsonWithUpperCamelCaseSpacesPolicyDeserialiation() { [EOL]     Gson gson = builder.setFieldNamingPolicy(FieldNamingPolicy.UPPER_CAMEL_CASE_WITH_SPACES).create(); [EOL]     String target = "{\"Some Constant String Instance Field\":\"someValue\"}"; [EOL]     StringWrapper deserializedObject = gson.fromJson(target, StringWrapper.class); [EOL]     assertEquals("someValue", deserializedObject.someConstantStringInstanceField); [EOL] }
public void testGsonWithUpperCamelCaseSpacesPolicyDeserialiation() { [EOL]     Gson gson = builder.setFieldNamingPolicy(FieldNamingPolicy.UPPER_CAMEL_CASE_WITH_SPACES).create(); [EOL]     String target = "{\"Some Constant String Instance Field\":\"someValue\"}"; [EOL]     StringWrapper deserializedObject = gson.fromJson(target, StringWrapper.class); [EOL]     assertEquals("someValue", deserializedObject.someConstantStringInstanceField); [EOL] }
public void testGsonWithUpperCamelCaseSpacesPolicyDeserialiation() { [EOL]     Gson gson = builder.setFieldNamingPolicy(FieldNamingPolicy.UPPER_CAMEL_CASE_WITH_SPACES).create(); [EOL]     String target = "{\"Some Constant String Instance Field\":\"someValue\"}"; [EOL]     StringWrapper deserializedObject = gson.fromJson(target, StringWrapper.class); [EOL]     assertEquals("someValue", deserializedObject.someConstantStringInstanceField); [EOL] }
public void testReadWriteTwoObjects() throws Exception { [EOL]     Gson gson = new Gson(); [EOL]     CharArrayWriter writer = new CharArrayWriter(); [EOL]     BagOfPrimitives expectedOne = new BagOfPrimitives(1, 1, true, "one"); [EOL]     writer.write(gson.toJson(expectedOne).toCharArray()); [EOL]     BagOfPrimitives expectedTwo = new BagOfPrimitives(2, 2, false, "two"); [EOL]     writer.write(gson.toJson(expectedTwo).toCharArray()); [EOL]     CharArrayReader reader = new CharArrayReader(writer.toCharArray()); [EOL]     JsonReader parser = new JsonReader(reader); [EOL]     parser.setLenient(true); [EOL]     JsonElement element1 = Streams.parse(parser); [EOL]     JsonElement element2 = Streams.parse(parser); [EOL]     BagOfPrimitives actualOne = gson.fromJson(element1, BagOfPrimitives.class); [EOL]     assertEquals("one", actualOne.stringValue); [EOL]     BagOfPrimitives actualTwo = gson.fromJson(element2, BagOfPrimitives.class); [EOL]     assertEquals("two", actualTwo.stringValue); [EOL] }
public void testUsingDashesInstead() throws Exception { [EOL]     namingPolicy = new LowerCamelCaseSeparatorNamingPolicy("-"); [EOL]     String translatedName = namingPolicy.translateName("testUsingDashesInstead", CLASS, null); [EOL]     assertEquals("test-using-dashes-instead", translatedName); [EOL] }
public void testUsingDashesInstead() throws Exception { [EOL]     namingPolicy = new LowerCamelCaseSeparatorNamingPolicy("-"); [EOL]     String translatedName = namingPolicy.translateName("testUsingDashesInstead", CLASS, null); [EOL]     assertEquals("test-using-dashes-instead", translatedName); [EOL] }
public void testUsingDashesInstead() throws Exception { [EOL]     namingPolicy = new LowerCamelCaseSeparatorNamingPolicy("-"); [EOL]     String translatedName = namingPolicy.translateName("testUsingDashesInstead", CLASS, null); [EOL]     assertEquals("test-using-dashes-instead", translatedName); [EOL] }
public void testSubInterfacesOfCollectionDeserialization() throws Exception { [EOL]     String json = "{\"list\":[0,1,2,3],\"queue\":[0,1,2,3],\"set\":[0.1,0.2,0.3,0.4]," + "\"sortedSet\":[\"a\",\"b\",\"c\",\"d\"]" + "}"; [EOL]     ClassWithSubInterfacesOfCollection target = gson.fromJson(json, ClassWithSubInterfacesOfCollection.class); [EOL]     assertTrue(target.listContains(0, 1, 2, 3)); [EOL]     assertTrue(target.queueContains(0, 1, 2, 3)); [EOL]     assertTrue(target.setContains(0.1F, 0.2F, 0.3F, 0.4F)); [EOL]     assertTrue(target.sortedSetContains('a', 'b', 'c', 'd')); [EOL] }
public void testSubInterfacesOfCollectionDeserialization() throws Exception { [EOL]     String json = "{\"list\":[0,1,2,3],\"queue\":[0,1,2,3],\"set\":[0.1,0.2,0.3,0.4]," + "\"sortedSet\":[\"a\",\"b\",\"c\",\"d\"]" + "}"; [EOL]     ClassWithSubInterfacesOfCollection target = gson.fromJson(json, ClassWithSubInterfacesOfCollection.class); [EOL]     assertTrue(target.listContains(0, 1, 2, 3)); [EOL]     assertTrue(target.queueContains(0, 1, 2, 3)); [EOL]     assertTrue(target.setContains(0.1F, 0.2F, 0.3F, 0.4F)); [EOL]     assertTrue(target.sortedSetContains('a', 'b', 'c', 'd')); [EOL] }
public void testSubInterfacesOfCollectionDeserialization() throws Exception { [EOL]     String json = "{\"list\":[0,1,2,3],\"queue\":[0,1,2,3],\"set\":[0.1,0.2,0.3,0.4]," + "\"sortedSet\":[\"a\",\"b\",\"c\",\"d\"]" + "}"; [EOL]     ClassWithSubInterfacesOfCollection target = gson.fromJson(json, ClassWithSubInterfacesOfCollection.class); [EOL]     assertTrue(target.listContains(0, 1, 2, 3)); [EOL]     assertTrue(target.queueContains(0, 1, 2, 3)); [EOL]     assertTrue(target.setContains(0.1F, 0.2F, 0.3F, 0.4F)); [EOL]     assertTrue(target.sortedSetContains('a', 'b', 'c', 'd')); [EOL] }
public void testSubInterfacesOfCollectionDeserialization() throws Exception { [EOL]     String json = "{\"list\":[0,1,2,3],\"queue\":[0,1,2,3],\"set\":[0.1,0.2,0.3,0.4]," + "\"sortedSet\":[\"a\",\"b\",\"c\",\"d\"]" + "}"; [EOL]     ClassWithSubInterfacesOfCollection target = gson.fromJson(json, ClassWithSubInterfacesOfCollection.class); [EOL]     assertTrue(target.listContains(0, 1, 2, 3)); [EOL]     assertTrue(target.queueContains(0, 1, 2, 3)); [EOL]     assertTrue(target.setContains(0.1F, 0.2F, 0.3F, 0.4F)); [EOL]     assertTrue(target.sortedSetContains('a', 'b', 'c', 'd')); [EOL] }
public void testSubInterfacesOfCollectionDeserialization() throws Exception { [EOL]     String json = "{\"list\":[0,1,2,3],\"queue\":[0,1,2,3],\"set\":[0.1,0.2,0.3,0.4]," + "\"sortedSet\":[\"a\",\"b\",\"c\",\"d\"]" + "}"; [EOL]     ClassWithSubInterfacesOfCollection target = gson.fromJson(json, ClassWithSubInterfacesOfCollection.class); [EOL]     assertTrue(target.listContains(0, 1, 2, 3)); [EOL]     assertTrue(target.queueContains(0, 1, 2, 3)); [EOL]     assertTrue(target.setContains(0.1F, 0.2F, 0.3F, 0.4F)); [EOL]     assertTrue(target.sortedSetContains('a', 'b', 'c', 'd')); [EOL] }
public void testSubInterfacesOfCollectionDeserialization() throws Exception { [EOL]     String json = "{\"list\":[0,1,2,3],\"queue\":[0,1,2,3],\"set\":[0.1,0.2,0.3,0.4]," + "\"sortedSet\":[\"a\",\"b\",\"c\",\"d\"]" + "}"; [EOL]     ClassWithSubInterfacesOfCollection target = gson.fromJson(json, ClassWithSubInterfacesOfCollection.class); [EOL]     assertTrue(target.listContains(0, 1, 2, 3)); [EOL]     assertTrue(target.queueContains(0, 1, 2, 3)); [EOL]     assertTrue(target.setContains(0.1F, 0.2F, 0.3F, 0.4F)); [EOL]     assertTrue(target.sortedSetContains('a', 'b', 'c', 'd')); [EOL] }
public void testSubInterfacesOfCollectionDeserialization() throws Exception { [EOL]     String json = "{\"list\":[0,1,2,3],\"queue\":[0,1,2,3],\"set\":[0.1,0.2,0.3,0.4]," + "\"sortedSet\":[\"a\",\"b\",\"c\",\"d\"]" + "}"; [EOL]     ClassWithSubInterfacesOfCollection target = gson.fromJson(json, ClassWithSubInterfacesOfCollection.class); [EOL]     assertTrue(target.listContains(0, 1, 2, 3)); [EOL]     assertTrue(target.queueContains(0, 1, 2, 3)); [EOL]     assertTrue(target.setContains(0.1F, 0.2F, 0.3F, 0.4F)); [EOL]     assertTrue(target.sortedSetContains('a', 'b', 'c', 'd')); [EOL] }
public void testSubInterfacesOfCollectionDeserialization() throws Exception { [EOL]     String json = "{\"list\":[0,1,2,3],\"queue\":[0,1,2,3],\"set\":[0.1,0.2,0.3,0.4]," + "\"sortedSet\":[\"a\",\"b\",\"c\",\"d\"]" + "}"; [EOL]     ClassWithSubInterfacesOfCollection target = gson.fromJson(json, ClassWithSubInterfacesOfCollection.class); [EOL]     assertTrue(target.listContains(0, 1, 2, 3)); [EOL]     assertTrue(target.queueContains(0, 1, 2, 3)); [EOL]     assertTrue(target.setContains(0.1F, 0.2F, 0.3F, 0.4F)); [EOL]     assertTrue(target.sortedSetContains('a', 'b', 'c', 'd')); [EOL] }
public void testSubInterfacesOfCollectionDeserialization() throws Exception { [EOL]     String json = "{\"list\":[0,1,2,3],\"queue\":[0,1,2,3],\"set\":[0.1,0.2,0.3,0.4]," + "\"sortedSet\":[\"a\",\"b\",\"c\",\"d\"]" + "}"; [EOL]     ClassWithSubInterfacesOfCollection target = gson.fromJson(json, ClassWithSubInterfacesOfCollection.class); [EOL]     assertTrue(target.listContains(0, 1, 2, 3)); [EOL]     assertTrue(target.queueContains(0, 1, 2, 3)); [EOL]     assertTrue(target.setContains(0.1F, 0.2F, 0.3F, 0.4F)); [EOL]     assertTrue(target.sortedSetContains('a', 'b', 'c', 'd')); [EOL] }
public void testSubInterfacesOfCollectionDeserialization() throws Exception { [EOL]     String json = "{\"list\":[0,1,2,3],\"queue\":[0,1,2,3],\"set\":[0.1,0.2,0.3,0.4]," + "\"sortedSet\":[\"a\",\"b\",\"c\",\"d\"]" + "}"; [EOL]     ClassWithSubInterfacesOfCollection target = gson.fromJson(json, ClassWithSubInterfacesOfCollection.class); [EOL]     assertTrue(target.listContains(0, 1, 2, 3)); [EOL]     assertTrue(target.queueContains(0, 1, 2, 3)); [EOL]     assertTrue(target.setContains(0.1F, 0.2F, 0.3F, 0.4F)); [EOL]     assertTrue(target.sortedSetContains('a', 'b', 'c', 'd')); [EOL] }
public void testSubInterfacesOfCollectionDeserialization() throws Exception { [EOL]     String json = "{\"list\":[0,1,2,3],\"queue\":[0,1,2,3],\"set\":[0.1,0.2,0.3,0.4]," + "\"sortedSet\":[\"a\",\"b\",\"c\",\"d\"]" + "}"; [EOL]     ClassWithSubInterfacesOfCollection target = gson.fromJson(json, ClassWithSubInterfacesOfCollection.class); [EOL]     assertTrue(target.listContains(0, 1, 2, 3)); [EOL]     assertTrue(target.queueContains(0, 1, 2, 3)); [EOL]     assertTrue(target.setContains(0.1F, 0.2F, 0.3F, 0.4F)); [EOL]     assertTrue(target.sortedSetContains('a', 'b', 'c', 'd')); [EOL] }
public void testSubInterfacesOfCollectionDeserialization() throws Exception { [EOL]     String json = "{\"list\":[0,1,2,3],\"queue\":[0,1,2,3],\"set\":[0.1,0.2,0.3,0.4]," + "\"sortedSet\":[\"a\",\"b\",\"c\",\"d\"]" + "}"; [EOL]     ClassWithSubInterfacesOfCollection target = gson.fromJson(json, ClassWithSubInterfacesOfCollection.class); [EOL]     assertTrue(target.listContains(0, 1, 2, 3)); [EOL]     assertTrue(target.queueContains(0, 1, 2, 3)); [EOL]     assertTrue(target.setContains(0.1F, 0.2F, 0.3F, 0.4F)); [EOL]     assertTrue(target.sortedSetContains('a', 'b', 'c', 'd')); [EOL] }
public void testSubInterfacesOfCollectionDeserialization() throws Exception { [EOL]     String json = "{\"list\":[0,1,2,3],\"queue\":[0,1,2,3],\"set\":[0.1,0.2,0.3,0.4]," + "\"sortedSet\":[\"a\",\"b\",\"c\",\"d\"]" + "}"; [EOL]     ClassWithSubInterfacesOfCollection target = gson.fromJson(json, ClassWithSubInterfacesOfCollection.class); [EOL]     assertTrue(target.listContains(0, 1, 2, 3)); [EOL]     assertTrue(target.queueContains(0, 1, 2, 3)); [EOL]     assertTrue(target.setContains(0.1F, 0.2F, 0.3F, 0.4F)); [EOL]     assertTrue(target.sortedSetContains('a', 'b', 'c', 'd')); [EOL] }
public void testSubInterfacesOfCollectionDeserialization() throws Exception { [EOL]     String json = "{\"list\":[0,1,2,3],\"queue\":[0,1,2,3],\"set\":[0.1,0.2,0.3,0.4]," + "\"sortedSet\":[\"a\",\"b\",\"c\",\"d\"]" + "}"; [EOL]     ClassWithSubInterfacesOfCollection target = gson.fromJson(json, ClassWithSubInterfacesOfCollection.class); [EOL]     assertTrue(target.listContains(0, 1, 2, 3)); [EOL]     assertTrue(target.queueContains(0, 1, 2, 3)); [EOL]     assertTrue(target.setContains(0.1F, 0.2F, 0.3F, 0.4F)); [EOL]     assertTrue(target.sortedSetContains('a', 'b', 'c', 'd')); [EOL] }
public void testSubInterfacesOfCollectionDeserialization() throws Exception { [EOL]     String json = "{\"list\":[0,1,2,3],\"queue\":[0,1,2,3],\"set\":[0.1,0.2,0.3,0.4]," + "\"sortedSet\":[\"a\",\"b\",\"c\",\"d\"]" + "}"; [EOL]     ClassWithSubInterfacesOfCollection target = gson.fromJson(json, ClassWithSubInterfacesOfCollection.class); [EOL]     assertTrue(target.listContains(0, 1, 2, 3)); [EOL]     assertTrue(target.queueContains(0, 1, 2, 3)); [EOL]     assertTrue(target.setContains(0.1F, 0.2F, 0.3F, 0.4F)); [EOL]     assertTrue(target.sortedSetContains('a', 'b', 'c', 'd')); [EOL] }
public void testSubInterfacesOfCollectionDeserialization() throws Exception { [EOL]     String json = "{\"list\":[0,1,2,3],\"queue\":[0,1,2,3],\"set\":[0.1,0.2,0.3,0.4]," + "\"sortedSet\":[\"a\",\"b\",\"c\",\"d\"]" + "}"; [EOL]     ClassWithSubInterfacesOfCollection target = gson.fromJson(json, ClassWithSubInterfacesOfCollection.class); [EOL]     assertTrue(target.listContains(0, 1, 2, 3)); [EOL]     assertTrue(target.queueContains(0, 1, 2, 3)); [EOL]     assertTrue(target.setContains(0.1F, 0.2F, 0.3F, 0.4F)); [EOL]     assertTrue(target.sortedSetContains('a', 'b', 'c', 'd')); [EOL] }
public void testSubInterfacesOfCollectionDeserialization() throws Exception { [EOL]     String json = "{\"list\":[0,1,2,3],\"queue\":[0,1,2,3],\"set\":[0.1,0.2,0.3,0.4]," + "\"sortedSet\":[\"a\",\"b\",\"c\",\"d\"]" + "}"; [EOL]     ClassWithSubInterfacesOfCollection target = gson.fromJson(json, ClassWithSubInterfacesOfCollection.class); [EOL]     assertTrue(target.listContains(0, 1, 2, 3)); [EOL]     assertTrue(target.queueContains(0, 1, 2, 3)); [EOL]     assertTrue(target.setContains(0.1F, 0.2F, 0.3F, 0.4F)); [EOL]     assertTrue(target.sortedSetContains('a', 'b', 'c', 'd')); [EOL] }
public void testVariableTypeArrayDeserialization() throws Exception { [EOL]     Integer[] array = { 1, 2, 3 }; [EOL]     Type typeOfSrc = new TypeToken<ObjectWithTypeVariables<Integer>>() { [EOL]     }.getType(); [EOL]     ObjectWithTypeVariables<Integer> objToSerialize = new ObjectWithTypeVariables<Integer>(null, array, null, null, null, null); [EOL]     String json = gson.toJson(objToSerialize, typeOfSrc); [EOL]     ObjectWithTypeVariables<Integer> objAfterDeserialization = gson.fromJson(json, typeOfSrc); [EOL]     assertEquals(objAfterDeserialization.getExpectedJson(), json); [EOL] }
public void testVariableTypeArrayDeserialization() throws Exception { [EOL]     Integer[] array = { 1, 2, 3 }; [EOL]     Type typeOfSrc = new TypeToken<ObjectWithTypeVariables<Integer>>() { [EOL]     }.getType(); [EOL]     ObjectWithTypeVariables<Integer> objToSerialize = new ObjectWithTypeVariables<Integer>(null, array, null, null, null, null); [EOL]     String json = gson.toJson(objToSerialize, typeOfSrc); [EOL]     ObjectWithTypeVariables<Integer> objAfterDeserialization = gson.fromJson(json, typeOfSrc); [EOL]     assertEquals(objAfterDeserialization.getExpectedJson(), json); [EOL] }
public void testSubInterfacesOfCollectionDeserialization() throws Exception { [EOL]     String json = "{\"list\":[0,1,2,3],\"queue\":[0,1,2,3],\"set\":[0.1,0.2,0.3,0.4]," + "\"sortedSet\":[\"a\",\"b\",\"c\",\"d\"]" + "}"; [EOL]     ClassWithSubInterfacesOfCollection target = gson.fromJson(json, ClassWithSubInterfacesOfCollection.class); [EOL]     assertTrue(target.listContains(0, 1, 2, 3)); [EOL]     assertTrue(target.queueContains(0, 1, 2, 3)); [EOL]     assertTrue(target.setContains(0.1F, 0.2F, 0.3F, 0.4F)); [EOL]     assertTrue(target.sortedSetContains('a', 'b', 'c', 'd')); [EOL] }
public void testSubInterfacesOfCollectionDeserialization() throws Exception { [EOL]     String json = "{\"list\":[0,1,2,3],\"queue\":[0,1,2,3],\"set\":[0.1,0.2,0.3,0.4]," + "\"sortedSet\":[\"a\",\"b\",\"c\",\"d\"]" + "}"; [EOL]     ClassWithSubInterfacesOfCollection target = gson.fromJson(json, ClassWithSubInterfacesOfCollection.class); [EOL]     assertTrue(target.listContains(0, 1, 2, 3)); [EOL]     assertTrue(target.queueContains(0, 1, 2, 3)); [EOL]     assertTrue(target.setContains(0.1F, 0.2F, 0.3F, 0.4F)); [EOL]     assertTrue(target.sortedSetContains('a', 'b', 'c', 'd')); [EOL] }
public void testSubInterfacesOfCollectionDeserialization() throws Exception { [EOL]     String json = "{\"list\":[0,1,2,3],\"queue\":[0,1,2,3],\"set\":[0.1,0.2,0.3,0.4]," + "\"sortedSet\":[\"a\",\"b\",\"c\",\"d\"]" + "}"; [EOL]     ClassWithSubInterfacesOfCollection target = gson.fromJson(json, ClassWithSubInterfacesOfCollection.class); [EOL]     assertTrue(target.listContains(0, 1, 2, 3)); [EOL]     assertTrue(target.queueContains(0, 1, 2, 3)); [EOL]     assertTrue(target.setContains(0.1F, 0.2F, 0.3F, 0.4F)); [EOL]     assertTrue(target.sortedSetContains('a', 'b', 'c', 'd')); [EOL] }
public void testSubInterfacesOfCollectionDeserialization() throws Exception { [EOL]     String json = "{\"list\":[0,1,2,3],\"queue\":[0,1,2,3],\"set\":[0.1,0.2,0.3,0.4]," + "\"sortedSet\":[\"a\",\"b\",\"c\",\"d\"]" + "}"; [EOL]     ClassWithSubInterfacesOfCollection target = gson.fromJson(json, ClassWithSubInterfacesOfCollection.class); [EOL]     assertTrue(target.listContains(0, 1, 2, 3)); [EOL]     assertTrue(target.queueContains(0, 1, 2, 3)); [EOL]     assertTrue(target.setContains(0.1F, 0.2F, 0.3F, 0.4F)); [EOL]     assertTrue(target.sortedSetContains('a', 'b', 'c', 'd')); [EOL] }
public void testSubInterfacesOfCollectionDeserialization() throws Exception { [EOL]     String json = "{\"list\":[0,1,2,3],\"queue\":[0,1,2,3],\"set\":[0.1,0.2,0.3,0.4]," + "\"sortedSet\":[\"a\",\"b\",\"c\",\"d\"]" + "}"; [EOL]     ClassWithSubInterfacesOfCollection target = gson.fromJson(json, ClassWithSubInterfacesOfCollection.class); [EOL]     assertTrue(target.listContains(0, 1, 2, 3)); [EOL]     assertTrue(target.queueContains(0, 1, 2, 3)); [EOL]     assertTrue(target.setContains(0.1F, 0.2F, 0.3F, 0.4F)); [EOL]     assertTrue(target.sortedSetContains('a', 'b', 'c', 'd')); [EOL] }
public void testSubInterfacesOfCollectionDeserialization() throws Exception { [EOL]     String json = "{\"list\":[0,1,2,3],\"queue\":[0,1,2,3],\"set\":[0.1,0.2,0.3,0.4]," + "\"sortedSet\":[\"a\",\"b\",\"c\",\"d\"]" + "}"; [EOL]     ClassWithSubInterfacesOfCollection target = gson.fromJson(json, ClassWithSubInterfacesOfCollection.class); [EOL]     assertTrue(target.listContains(0, 1, 2, 3)); [EOL]     assertTrue(target.queueContains(0, 1, 2, 3)); [EOL]     assertTrue(target.setContains(0.1F, 0.2F, 0.3F, 0.4F)); [EOL]     assertTrue(target.sortedSetContains('a', 'b', 'c', 'd')); [EOL] }
public void testSubInterfacesOfCollectionDeserialization() throws Exception { [EOL]     String json = "{\"list\":[0,1,2,3],\"queue\":[0,1,2,3],\"set\":[0.1,0.2,0.3,0.4]," + "\"sortedSet\":[\"a\",\"b\",\"c\",\"d\"]" + "}"; [EOL]     ClassWithSubInterfacesOfCollection target = gson.fromJson(json, ClassWithSubInterfacesOfCollection.class); [EOL]     assertTrue(target.listContains(0, 1, 2, 3)); [EOL]     assertTrue(target.queueContains(0, 1, 2, 3)); [EOL]     assertTrue(target.setContains(0.1F, 0.2F, 0.3F, 0.4F)); [EOL]     assertTrue(target.sortedSetContains('a', 'b', 'c', 'd')); [EOL] }
public void testSubInterfacesOfCollectionDeserialization() throws Exception { [EOL]     String json = "{\"list\":[0,1,2,3],\"queue\":[0,1,2,3],\"set\":[0.1,0.2,0.3,0.4]," + "\"sortedSet\":[\"a\",\"b\",\"c\",\"d\"]" + "}"; [EOL]     ClassWithSubInterfacesOfCollection target = gson.fromJson(json, ClassWithSubInterfacesOfCollection.class); [EOL]     assertTrue(target.listContains(0, 1, 2, 3)); [EOL]     assertTrue(target.queueContains(0, 1, 2, 3)); [EOL]     assertTrue(target.setContains(0.1F, 0.2F, 0.3F, 0.4F)); [EOL]     assertTrue(target.sortedSetContains('a', 'b', 'c', 'd')); [EOL] }
public void testSubInterfacesOfCollectionDeserialization() throws Exception { [EOL]     String json = "{\"list\":[0,1,2,3],\"queue\":[0,1,2,3],\"set\":[0.1,0.2,0.3,0.4]," + "\"sortedSet\":[\"a\",\"b\",\"c\",\"d\"]" + "}"; [EOL]     ClassWithSubInterfacesOfCollection target = gson.fromJson(json, ClassWithSubInterfacesOfCollection.class); [EOL]     assertTrue(target.listContains(0, 1, 2, 3)); [EOL]     assertTrue(target.queueContains(0, 1, 2, 3)); [EOL]     assertTrue(target.setContains(0.1F, 0.2F, 0.3F, 0.4F)); [EOL]     assertTrue(target.sortedSetContains('a', 'b', 'c', 'd')); [EOL] }
public void testSubInterfacesOfCollectionDeserialization() throws Exception { [EOL]     String json = "{\"list\":[0,1,2,3],\"queue\":[0,1,2,3],\"set\":[0.1,0.2,0.3,0.4]," + "\"sortedSet\":[\"a\",\"b\",\"c\",\"d\"]" + "}"; [EOL]     ClassWithSubInterfacesOfCollection target = gson.fromJson(json, ClassWithSubInterfacesOfCollection.class); [EOL]     assertTrue(target.listContains(0, 1, 2, 3)); [EOL]     assertTrue(target.queueContains(0, 1, 2, 3)); [EOL]     assertTrue(target.setContains(0.1F, 0.2F, 0.3F, 0.4F)); [EOL]     assertTrue(target.sortedSetContains('a', 'b', 'c', 'd')); [EOL] }
public void testSubInterfacesOfCollectionDeserialization() throws Exception { [EOL]     String json = "{\"list\":[0,1,2,3],\"queue\":[0,1,2,3],\"set\":[0.1,0.2,0.3,0.4]," + "\"sortedSet\":[\"a\",\"b\",\"c\",\"d\"]" + "}"; [EOL]     ClassWithSubInterfacesOfCollection target = gson.fromJson(json, ClassWithSubInterfacesOfCollection.class); [EOL]     assertTrue(target.listContains(0, 1, 2, 3)); [EOL]     assertTrue(target.queueContains(0, 1, 2, 3)); [EOL]     assertTrue(target.setContains(0.1F, 0.2F, 0.3F, 0.4F)); [EOL]     assertTrue(target.sortedSetContains('a', 'b', 'c', 'd')); [EOL] }
public void testSubInterfacesOfCollectionDeserialization() throws Exception { [EOL]     String json = "{\"list\":[0,1,2,3],\"queue\":[0,1,2,3],\"set\":[0.1,0.2,0.3,0.4]," + "\"sortedSet\":[\"a\",\"b\",\"c\",\"d\"]" + "}"; [EOL]     ClassWithSubInterfacesOfCollection target = gson.fromJson(json, ClassWithSubInterfacesOfCollection.class); [EOL]     assertTrue(target.listContains(0, 1, 2, 3)); [EOL]     assertTrue(target.queueContains(0, 1, 2, 3)); [EOL]     assertTrue(target.setContains(0.1F, 0.2F, 0.3F, 0.4F)); [EOL]     assertTrue(target.sortedSetContains('a', 'b', 'c', 'd')); [EOL] }
public void testSubInterfacesOfCollectionDeserialization() throws Exception { [EOL]     String json = "{\"list\":[0,1,2,3],\"queue\":[0,1,2,3],\"set\":[0.1,0.2,0.3,0.4]," + "\"sortedSet\":[\"a\",\"b\",\"c\",\"d\"]" + "}"; [EOL]     ClassWithSubInterfacesOfCollection target = gson.fromJson(json, ClassWithSubInterfacesOfCollection.class); [EOL]     assertTrue(target.listContains(0, 1, 2, 3)); [EOL]     assertTrue(target.queueContains(0, 1, 2, 3)); [EOL]     assertTrue(target.setContains(0.1F, 0.2F, 0.3F, 0.4F)); [EOL]     assertTrue(target.sortedSetContains('a', 'b', 'c', 'd')); [EOL] }
public void testSubInterfacesOfCollectionDeserialization() throws Exception { [EOL]     String json = "{\"list\":[0,1,2,3],\"queue\":[0,1,2,3],\"set\":[0.1,0.2,0.3,0.4]," + "\"sortedSet\":[\"a\",\"b\",\"c\",\"d\"]" + "}"; [EOL]     ClassWithSubInterfacesOfCollection target = gson.fromJson(json, ClassWithSubInterfacesOfCollection.class); [EOL]     assertTrue(target.listContains(0, 1, 2, 3)); [EOL]     assertTrue(target.queueContains(0, 1, 2, 3)); [EOL]     assertTrue(target.setContains(0.1F, 0.2F, 0.3F, 0.4F)); [EOL]     assertTrue(target.sortedSetContains('a', 'b', 'c', 'd')); [EOL] }
public void testCreatingMoreThanOnce() { [EOL]     GsonBuilder builder = new GsonBuilder(); [EOL]     builder.create(); [EOL]     builder.create(); [EOL] }
public void testNegativeInfinitySerialization() { [EOL]     Gson gson = new GsonBuilder().serializeSpecialFloatingPointValues().create(); [EOL]     double negativeInfinity = Double.NEGATIVE_INFINITY; [EOL]     assertEquals("-Infinity", gson.toJson(negativeInfinity)); [EOL]     assertEquals("-Infinity", gson.toJson(Double.NEGATIVE_INFINITY)); [EOL] }
public void testCreatingMoreThanOnce() { [EOL]     GsonBuilder builder = new GsonBuilder(); [EOL]     builder.create(); [EOL]     builder.create(); [EOL] }
public void testCreatingMoreThanOnce() { [EOL]     GsonBuilder builder = new GsonBuilder(); [EOL]     builder.create(); [EOL]     builder.create(); [EOL] }
public void testCreatingMoreThanOnce() { [EOL]     GsonBuilder builder = new GsonBuilder(); [EOL]     builder.create(); [EOL]     builder.create(); [EOL] }
public void testCreatingMoreThanOnce() { [EOL]     GsonBuilder builder = new GsonBuilder(); [EOL]     builder.create(); [EOL]     builder.create(); [EOL] }
public void testCreatingMoreThanOnce() { [EOL]     GsonBuilder builder = new GsonBuilder(); [EOL]     builder.create(); [EOL]     builder.create(); [EOL] }
public void testCreatingMoreThanOnce() { [EOL]     GsonBuilder builder = new GsonBuilder(); [EOL]     builder.create(); [EOL]     builder.create(); [EOL] }
public void testCreatingMoreThanOnce() { [EOL]     GsonBuilder builder = new GsonBuilder(); [EOL]     builder.create(); [EOL]     builder.create(); [EOL] }
public void testAllLowerCase() throws Exception { [EOL]     assertEquals(ALL_LOWER, namingPolicy.translateName(ALL_LOWER, String.class, null)); [EOL] }
public void testClassAndFieldAreAtSameVersion() throws Exception { [EOL]     Class<MockObject> clazz = MockObject.class; [EOL]     Field f = clazz.getField("someField"); [EOL]     VersionExclusionStrategy strategy = new VersionExclusionStrategy(VERSION); [EOL]     assertFalse(strategy.shouldSkipClass(clazz)); [EOL]     assertFalse(strategy.shouldSkipField(new FieldAttributes(clazz, f))); [EOL] }
public void testClassAndFieldAreAtSameVersion() throws Exception { [EOL]     Class<MockObject> clazz = MockObject.class; [EOL]     Field f = clazz.getField("someField"); [EOL]     VersionExclusionStrategy strategy = new VersionExclusionStrategy(VERSION); [EOL]     assertFalse(strategy.shouldSkipClass(clazz)); [EOL]     assertFalse(strategy.shouldSkipField(new FieldAttributes(clazz, f))); [EOL] }
public void testClassAndFieldAreAtSameVersion() throws Exception { [EOL]     Class<MockObject> clazz = MockObject.class; [EOL]     Field f = clazz.getField("someField"); [EOL]     VersionExclusionStrategy strategy = new VersionExclusionStrategy(VERSION); [EOL]     assertFalse(strategy.shouldSkipClass(clazz)); [EOL]     assertFalse(strategy.shouldSkipField(new FieldAttributes(clazz, f))); [EOL] }
public void testClassAndFieldAreAtSameVersion() throws Exception { [EOL]     Class<MockObject> clazz = MockObject.class; [EOL]     Field f = clazz.getField("someField"); [EOL]     VersionExclusionStrategy strategy = new VersionExclusionStrategy(VERSION); [EOL]     assertFalse(strategy.shouldSkipClass(clazz)); [EOL]     assertFalse(strategy.shouldSkipField(new FieldAttributes(clazz, f))); [EOL] }
public void testClassAndFieldAreAtSameVersion() throws Exception { [EOL]     Class<MockObject> clazz = MockObject.class; [EOL]     Field f = clazz.getField("someField"); [EOL]     VersionExclusionStrategy strategy = new VersionExclusionStrategy(VERSION); [EOL]     assertFalse(strategy.shouldSkipClass(clazz)); [EOL]     assertFalse(strategy.shouldSkipField(new FieldAttributes(clazz, f))); [EOL] }
public void testClassAndFieldAreAtSameVersion() throws Exception { [EOL]     Class<MockObject> clazz = MockObject.class; [EOL]     Field f = clazz.getField("someField"); [EOL]     VersionExclusionStrategy strategy = new VersionExclusionStrategy(VERSION); [EOL]     assertFalse(strategy.shouldSkipClass(clazz)); [EOL]     assertFalse(strategy.shouldSkipField(new FieldAttributes(clazz, f))); [EOL] }
public void testClassAndFieldAreAtSameVersion() throws Exception { [EOL]     Class<MockObject> clazz = MockObject.class; [EOL]     Field f = clazz.getField("someField"); [EOL]     VersionExclusionStrategy strategy = new VersionExclusionStrategy(VERSION); [EOL]     assertFalse(strategy.shouldSkipClass(clazz)); [EOL]     assertFalse(strategy.shouldSkipField(new FieldAttributes(clazz, f))); [EOL] }
public void testClassAndFieldAreAtSameVersion() throws Exception { [EOL]     Class<MockObject> clazz = MockObject.class; [EOL]     Field f = clazz.getField("someField"); [EOL]     VersionExclusionStrategy strategy = new VersionExclusionStrategy(VERSION); [EOL]     assertFalse(strategy.shouldSkipClass(clazz)); [EOL]     assertFalse(strategy.shouldSkipField(new FieldAttributes(clazz, f))); [EOL] }
public void testClassAndFieldAreAtSameVersion() throws Exception { [EOL]     Class<MockObject> clazz = MockObject.class; [EOL]     Field f = clazz.getField("someField"); [EOL]     VersionExclusionStrategy strategy = new VersionExclusionStrategy(VERSION); [EOL]     assertFalse(strategy.shouldSkipClass(clazz)); [EOL]     assertFalse(strategy.shouldSkipField(new FieldAttributes(clazz, f))); [EOL] }
public void testClassAndFieldAreAtSameVersion() throws Exception { [EOL]     Class<MockObject> clazz = MockObject.class; [EOL]     Field f = clazz.getField("someField"); [EOL]     VersionExclusionStrategy strategy = new VersionExclusionStrategy(VERSION); [EOL]     assertFalse(strategy.shouldSkipClass(clazz)); [EOL]     assertFalse(strategy.shouldSkipField(new FieldAttributes(clazz, f))); [EOL] }
public void testClassAndFieldAreAtSameVersion() throws Exception { [EOL]     Class<MockObject> clazz = MockObject.class; [EOL]     Field f = clazz.getField("someField"); [EOL]     VersionExclusionStrategy strategy = new VersionExclusionStrategy(VERSION); [EOL]     assertFalse(strategy.shouldSkipClass(clazz)); [EOL]     assertFalse(strategy.shouldSkipField(new FieldAttributes(clazz, f))); [EOL] }
public void testClassAndFieldAreAtSameVersion() throws Exception { [EOL]     Class<MockObject> clazz = MockObject.class; [EOL]     Field f = clazz.getField("someField"); [EOL]     VersionExclusionStrategy strategy = new VersionExclusionStrategy(VERSION); [EOL]     assertFalse(strategy.shouldSkipClass(clazz)); [EOL]     assertFalse(strategy.shouldSkipField(new FieldAttributes(clazz, f))); [EOL] }
public void testClassAndFieldAreAtSameVersion() throws Exception { [EOL]     Class<MockObject> clazz = MockObject.class; [EOL]     Field f = clazz.getField("someField"); [EOL]     VersionExclusionStrategy strategy = new VersionExclusionStrategy(VERSION); [EOL]     assertFalse(strategy.shouldSkipClass(clazz)); [EOL]     assertFalse(strategy.shouldSkipField(new FieldAttributes(clazz, f))); [EOL] }
public void testClassAndFieldAreAtSameVersion() throws Exception { [EOL]     Class<MockObject> clazz = MockObject.class; [EOL]     Field f = clazz.getField("someField"); [EOL]     VersionExclusionStrategy strategy = new VersionExclusionStrategy(VERSION); [EOL]     assertFalse(strategy.shouldSkipClass(clazz)); [EOL]     assertFalse(strategy.shouldSkipField(new FieldAttributes(clazz, f))); [EOL] }
public void testClassAndFieldAreAtSameVersion() throws Exception { [EOL]     Class<MockObject> clazz = MockObject.class; [EOL]     Field f = clazz.getField("someField"); [EOL]     VersionExclusionStrategy strategy = new VersionExclusionStrategy(VERSION); [EOL]     assertFalse(strategy.shouldSkipClass(clazz)); [EOL]     assertFalse(strategy.shouldSkipField(new FieldAttributes(clazz, f))); [EOL] }
public void testClassAndFieldAreAtSameVersion() throws Exception { [EOL]     Class<MockObject> clazz = MockObject.class; [EOL]     Field f = clazz.getField("someField"); [EOL]     VersionExclusionStrategy strategy = new VersionExclusionStrategy(VERSION); [EOL]     assertFalse(strategy.shouldSkipClass(clazz)); [EOL]     assertFalse(strategy.shouldSkipField(new FieldAttributes(clazz, f))); [EOL] }
public void testClassAndFieldAreAtSameVersion() throws Exception { [EOL]     Class<MockObject> clazz = MockObject.class; [EOL]     Field f = clazz.getField("someField"); [EOL]     VersionExclusionStrategy strategy = new VersionExclusionStrategy(VERSION); [EOL]     assertFalse(strategy.shouldSkipClass(clazz)); [EOL]     assertFalse(strategy.shouldSkipField(new FieldAttributes(clazz, f))); [EOL] }
public void testClassAndFieldAreAtSameVersion() throws Exception { [EOL]     Class<MockObject> clazz = MockObject.class; [EOL]     Field f = clazz.getField("someField"); [EOL]     VersionExclusionStrategy strategy = new VersionExclusionStrategy(VERSION); [EOL]     assertFalse(strategy.shouldSkipClass(clazz)); [EOL]     assertFalse(strategy.shouldSkipField(new FieldAttributes(clazz, f))); [EOL] }
public void testClassAndFieldAreAtSameVersion() throws Exception { [EOL]     Class<MockObject> clazz = MockObject.class; [EOL]     Field f = clazz.getField("someField"); [EOL]     VersionExclusionStrategy strategy = new VersionExclusionStrategy(VERSION); [EOL]     assertFalse(strategy.shouldSkipClass(clazz)); [EOL]     assertFalse(strategy.shouldSkipField(new FieldAttributes(clazz, f))); [EOL] }
public void testClassAndFieldAreAtSameVersion() throws Exception { [EOL]     Class<MockObject> clazz = MockObject.class; [EOL]     Field f = clazz.getField("someField"); [EOL]     VersionExclusionStrategy strategy = new VersionExclusionStrategy(VERSION); [EOL]     assertFalse(strategy.shouldSkipClass(clazz)); [EOL]     assertFalse(strategy.shouldSkipField(new FieldAttributes(clazz, f))); [EOL] }
public void testClassAndFieldAreAtSameVersion() throws Exception { [EOL]     Class<MockObject> clazz = MockObject.class; [EOL]     Field f = clazz.getField("someField"); [EOL]     VersionExclusionStrategy strategy = new VersionExclusionStrategy(VERSION); [EOL]     assertFalse(strategy.shouldSkipClass(clazz)); [EOL]     assertFalse(strategy.shouldSkipField(new FieldAttributes(clazz, f))); [EOL] }
public void testClassAndFieldAreAtSameVersion() throws Exception { [EOL]     Class<MockObject> clazz = MockObject.class; [EOL]     Field f = clazz.getField("someField"); [EOL]     VersionExclusionStrategy strategy = new VersionExclusionStrategy(VERSION); [EOL]     assertFalse(strategy.shouldSkipClass(clazz)); [EOL]     assertFalse(strategy.shouldSkipField(new FieldAttributes(clazz, f))); [EOL] }
public void testUsingDashesInstead() throws Exception { [EOL]     namingPolicy = new LowerCamelCaseSeparatorNamingPolicy("-"); [EOL]     String translatedName = namingPolicy.translateName("testUsingDashesInstead", CLASS, null); [EOL]     assertEquals("test-using-dashes-instead", translatedName); [EOL] }
public void testUsingDashesInstead() throws Exception { [EOL]     namingPolicy = new LowerCamelCaseSeparatorNamingPolicy("-"); [EOL]     String translatedName = namingPolicy.translateName("testUsingDashesInstead", CLASS, null); [EOL]     assertEquals("test-using-dashes-instead", translatedName); [EOL] }
public void testUsingDashesInstead() throws Exception { [EOL]     namingPolicy = new LowerCamelCaseSeparatorNamingPolicy("-"); [EOL]     String translatedName = namingPolicy.translateName("testUsingDashesInstead", CLASS, null); [EOL]     assertEquals("test-using-dashes-instead", translatedName); [EOL] }
public void testPrimitive() throws Exception { [EOL]     TypeInfo typeInfo = new TypeInfo(boolean.class); [EOL]     assertFalse(typeInfo.isArray()); [EOL]     assertTrue(typeInfo.isPrimitive()); [EOL]     assertEquals(boolean.class, typeInfo.getRawClass()); [EOL]     assertEquals(Boolean.class, typeInfo.getWrappedClass()); [EOL] }
public void testPrimitive() throws Exception { [EOL]     TypeInfo typeInfo = new TypeInfo(boolean.class); [EOL]     assertFalse(typeInfo.isArray()); [EOL]     assertTrue(typeInfo.isPrimitive()); [EOL]     assertEquals(boolean.class, typeInfo.getRawClass()); [EOL]     assertEquals(Boolean.class, typeInfo.getWrappedClass()); [EOL] }
public void testSubInterfacesOfCollectionDeserialization() throws Exception { [EOL]     String json = "{\"list\":[0,1,2,3],\"queue\":[0,1,2,3],\"set\":[0.1,0.2,0.3,0.4]," + "\"sortedSet\":[\"a\",\"b\",\"c\",\"d\"]" + "}"; [EOL]     ClassWithSubInterfacesOfCollection target = gson.fromJson(json, ClassWithSubInterfacesOfCollection.class); [EOL]     assertTrue(target.listContains(0, 1, 2, 3)); [EOL]     assertTrue(target.queueContains(0, 1, 2, 3)); [EOL]     assertTrue(target.setContains(0.1F, 0.2F, 0.3F, 0.4F)); [EOL]     assertTrue(target.sortedSetContains('a', 'b', 'c', 'd')); [EOL] }
public void testSubInterfacesOfCollectionDeserialization() throws Exception { [EOL]     String json = "{\"list\":[0,1,2,3],\"queue\":[0,1,2,3],\"set\":[0.1,0.2,0.3,0.4]," + "\"sortedSet\":[\"a\",\"b\",\"c\",\"d\"]" + "}"; [EOL]     ClassWithSubInterfacesOfCollection target = gson.fromJson(json, ClassWithSubInterfacesOfCollection.class); [EOL]     assertTrue(target.listContains(0, 1, 2, 3)); [EOL]     assertTrue(target.queueContains(0, 1, 2, 3)); [EOL]     assertTrue(target.setContains(0.1F, 0.2F, 0.3F, 0.4F)); [EOL]     assertTrue(target.sortedSetContains('a', 'b', 'c', 'd')); [EOL] }
public void testSubInterfacesOfCollectionDeserialization() throws Exception { [EOL]     String json = "{\"list\":[0,1,2,3],\"queue\":[0,1,2,3],\"set\":[0.1,0.2,0.3,0.4]," + "\"sortedSet\":[\"a\",\"b\",\"c\",\"d\"]" + "}"; [EOL]     ClassWithSubInterfacesOfCollection target = gson.fromJson(json, ClassWithSubInterfacesOfCollection.class); [EOL]     assertTrue(target.listContains(0, 1, 2, 3)); [EOL]     assertTrue(target.queueContains(0, 1, 2, 3)); [EOL]     assertTrue(target.setContains(0.1F, 0.2F, 0.3F, 0.4F)); [EOL]     assertTrue(target.sortedSetContains('a', 'b', 'c', 'd')); [EOL] }
public void testClassAndFieldAreAtSameVersion() throws Exception { [EOL]     Class<MockObject> clazz = MockObject.class; [EOL]     Field f = clazz.getField("someField"); [EOL]     VersionExclusionStrategy strategy = new VersionExclusionStrategy(VERSION); [EOL]     assertFalse(strategy.shouldSkipClass(clazz)); [EOL]     assertFalse(strategy.shouldSkipField(new FieldAttributes(clazz, f))); [EOL] }
public void testClassAndFieldAreAtSameVersion() throws Exception { [EOL]     Class<MockObject> clazz = MockObject.class; [EOL]     Field f = clazz.getField("someField"); [EOL]     VersionExclusionStrategy strategy = new VersionExclusionStrategy(VERSION); [EOL]     assertFalse(strategy.shouldSkipClass(clazz)); [EOL]     assertFalse(strategy.shouldSkipField(new FieldAttributes(clazz, f))); [EOL] }
public void testClassAndFieldAreAtSameVersion() throws Exception { [EOL]     Class<MockObject> clazz = MockObject.class; [EOL]     Field f = clazz.getField("someField"); [EOL]     VersionExclusionStrategy strategy = new VersionExclusionStrategy(VERSION); [EOL]     assertFalse(strategy.shouldSkipClass(clazz)); [EOL]     assertFalse(strategy.shouldSkipField(new FieldAttributes(clazz, f))); [EOL] }
public void testName() throws Exception { [EOL]     assertEquals("bar", fieldAttributes.getName()); [EOL] }
public void testName() throws Exception { [EOL]     assertEquals("bar", fieldAttributes.getName()); [EOL] }
public void testSubInterfacesOfCollectionDeserialization() throws Exception { [EOL]     String json = "{\"list\":[0,1,2,3],\"queue\":[0,1,2,3],\"set\":[0.1,0.2,0.3,0.4]," + "\"sortedSet\":[\"a\",\"b\",\"c\",\"d\"]" + "}"; [EOL]     ClassWithSubInterfacesOfCollection target = gson.fromJson(json, ClassWithSubInterfacesOfCollection.class); [EOL]     assertTrue(target.listContains(0, 1, 2, 3)); [EOL]     assertTrue(target.queueContains(0, 1, 2, 3)); [EOL]     assertTrue(target.setContains(0.1F, 0.2F, 0.3F, 0.4F)); [EOL]     assertTrue(target.sortedSetContains('a', 'b', 'c', 'd')); [EOL] }
public void testSubInterfacesOfCollectionDeserialization() throws Exception { [EOL]     String json = "{\"list\":[0,1,2,3],\"queue\":[0,1,2,3],\"set\":[0.1,0.2,0.3,0.4]," + "\"sortedSet\":[\"a\",\"b\",\"c\",\"d\"]" + "}"; [EOL]     ClassWithSubInterfacesOfCollection target = gson.fromJson(json, ClassWithSubInterfacesOfCollection.class); [EOL]     assertTrue(target.listContains(0, 1, 2, 3)); [EOL]     assertTrue(target.queueContains(0, 1, 2, 3)); [EOL]     assertTrue(target.setContains(0.1F, 0.2F, 0.3F, 0.4F)); [EOL]     assertTrue(target.sortedSetContains('a', 'b', 'c', 'd')); [EOL] }
public void testSubInterfacesOfCollectionDeserialization() throws Exception { [EOL]     String json = "{\"list\":[0,1,2,3],\"queue\":[0,1,2,3],\"set\":[0.1,0.2,0.3,0.4]," + "\"sortedSet\":[\"a\",\"b\",\"c\",\"d\"]" + "}"; [EOL]     ClassWithSubInterfacesOfCollection target = gson.fromJson(json, ClassWithSubInterfacesOfCollection.class); [EOL]     assertTrue(target.listContains(0, 1, 2, 3)); [EOL]     assertTrue(target.queueContains(0, 1, 2, 3)); [EOL]     assertTrue(target.setContains(0.1F, 0.2F, 0.3F, 0.4F)); [EOL]     assertTrue(target.sortedSetContains('a', 'b', 'c', 'd')); [EOL] }
public void testSubInterfacesOfCollectionDeserialization() throws Exception { [EOL]     String json = "{\"list\":[0,1,2,3],\"queue\":[0,1,2,3],\"set\":[0.1,0.2,0.3,0.4]," + "\"sortedSet\":[\"a\",\"b\",\"c\",\"d\"]" + "}"; [EOL]     ClassWithSubInterfacesOfCollection target = gson.fromJson(json, ClassWithSubInterfacesOfCollection.class); [EOL]     assertTrue(target.listContains(0, 1, 2, 3)); [EOL]     assertTrue(target.queueContains(0, 1, 2, 3)); [EOL]     assertTrue(target.setContains(0.1F, 0.2F, 0.3F, 0.4F)); [EOL]     assertTrue(target.sortedSetContains('a', 'b', 'c', 'd')); [EOL] }
public void testSubInterfacesOfCollectionDeserialization() throws Exception { [EOL]     String json = "{\"list\":[0,1,2,3],\"queue\":[0,1,2,3],\"set\":[0.1,0.2,0.3,0.4]," + "\"sortedSet\":[\"a\",\"b\",\"c\",\"d\"]" + "}"; [EOL]     ClassWithSubInterfacesOfCollection target = gson.fromJson(json, ClassWithSubInterfacesOfCollection.class); [EOL]     assertTrue(target.listContains(0, 1, 2, 3)); [EOL]     assertTrue(target.queueContains(0, 1, 2, 3)); [EOL]     assertTrue(target.setContains(0.1F, 0.2F, 0.3F, 0.4F)); [EOL]     assertTrue(target.sortedSetContains('a', 'b', 'c', 'd')); [EOL] }
public void testSubInterfacesOfCollectionDeserialization() throws Exception { [EOL]     String json = "{\"list\":[0,1,2,3],\"queue\":[0,1,2,3],\"set\":[0.1,0.2,0.3,0.4]," + "\"sortedSet\":[\"a\",\"b\",\"c\",\"d\"]" + "}"; [EOL]     ClassWithSubInterfacesOfCollection target = gson.fromJson(json, ClassWithSubInterfacesOfCollection.class); [EOL]     assertTrue(target.listContains(0, 1, 2, 3)); [EOL]     assertTrue(target.queueContains(0, 1, 2, 3)); [EOL]     assertTrue(target.setContains(0.1F, 0.2F, 0.3F, 0.4F)); [EOL]     assertTrue(target.sortedSetContains('a', 'b', 'c', 'd')); [EOL] }
public void testSubInterfacesOfCollectionDeserialization() throws Exception { [EOL]     String json = "{\"list\":[0,1,2,3],\"queue\":[0,1,2,3],\"set\":[0.1,0.2,0.3,0.4]," + "\"sortedSet\":[\"a\",\"b\",\"c\",\"d\"]" + "}"; [EOL]     ClassWithSubInterfacesOfCollection target = gson.fromJson(json, ClassWithSubInterfacesOfCollection.class); [EOL]     assertTrue(target.listContains(0, 1, 2, 3)); [EOL]     assertTrue(target.queueContains(0, 1, 2, 3)); [EOL]     assertTrue(target.setContains(0.1F, 0.2F, 0.3F, 0.4F)); [EOL]     assertTrue(target.sortedSetContains('a', 'b', 'c', 'd')); [EOL] }
public void testSubInterfacesOfCollectionDeserialization() throws Exception { [EOL]     String json = "{\"list\":[0,1,2,3],\"queue\":[0,1,2,3],\"set\":[0.1,0.2,0.3,0.4]," + "\"sortedSet\":[\"a\",\"b\",\"c\",\"d\"]" + "}"; [EOL]     ClassWithSubInterfacesOfCollection target = gson.fromJson(json, ClassWithSubInterfacesOfCollection.class); [EOL]     assertTrue(target.listContains(0, 1, 2, 3)); [EOL]     assertTrue(target.queueContains(0, 1, 2, 3)); [EOL]     assertTrue(target.setContains(0.1F, 0.2F, 0.3F, 0.4F)); [EOL]     assertTrue(target.sortedSetContains('a', 'b', 'c', 'd')); [EOL] }
public void testIsSynthetic() throws Exception { [EOL]     assertFalse(fieldAttributes.isSynthetic()); [EOL] }
public void testIsSynthetic() throws Exception { [EOL]     assertFalse(fieldAttributes.isSynthetic()); [EOL] }
public void testSimpleAdapter() throws Exception { [EOL]     Field field = String.class.getFields()[0]; [EOL]     String expectedFieldName = field.getName().toUpperCase(); [EOL]     FieldNamingStrategy2 adapter = new FieldNamingStrategy2Adapter(new UpperCaseNamingStrategy()); [EOL]     assertEquals(expectedFieldName, adapter.translateName(new FieldAttributes(String.class, field))); [EOL] }
public void testSubInterfacesOfCollectionDeserialization() throws Exception { [EOL]     String json = "{\"list\":[0,1,2,3],\"queue\":[0,1,2,3],\"set\":[0.1,0.2,0.3,0.4]," + "\"sortedSet\":[\"a\",\"b\",\"c\",\"d\"]" + "}"; [EOL]     ClassWithSubInterfacesOfCollection target = gson.fromJson(json, ClassWithSubInterfacesOfCollection.class); [EOL]     assertTrue(target.listContains(0, 1, 2, 3)); [EOL]     assertTrue(target.queueContains(0, 1, 2, 3)); [EOL]     assertTrue(target.setContains(0.1F, 0.2F, 0.3F, 0.4F)); [EOL]     assertTrue(target.sortedSetContains('a', 'b', 'c', 'd')); [EOL] }
public void testSubInterfacesOfCollectionDeserialization() throws Exception { [EOL]     String json = "{\"list\":[0,1,2,3],\"queue\":[0,1,2,3],\"set\":[0.1,0.2,0.3,0.4]," + "\"sortedSet\":[\"a\",\"b\",\"c\",\"d\"]" + "}"; [EOL]     ClassWithSubInterfacesOfCollection target = gson.fromJson(json, ClassWithSubInterfacesOfCollection.class); [EOL]     assertTrue(target.listContains(0, 1, 2, 3)); [EOL]     assertTrue(target.queueContains(0, 1, 2, 3)); [EOL]     assertTrue(target.setContains(0.1F, 0.2F, 0.3F, 0.4F)); [EOL]     assertTrue(target.sortedSetContains('a', 'b', 'c', 'd')); [EOL] }
public void testSubInterfacesOfCollectionDeserialization() throws Exception { [EOL]     String json = "{\"list\":[0,1,2,3],\"queue\":[0,1,2,3],\"set\":[0.1,0.2,0.3,0.4]," + "\"sortedSet\":[\"a\",\"b\",\"c\",\"d\"]" + "}"; [EOL]     ClassWithSubInterfacesOfCollection target = gson.fromJson(json, ClassWithSubInterfacesOfCollection.class); [EOL]     assertTrue(target.listContains(0, 1, 2, 3)); [EOL]     assertTrue(target.queueContains(0, 1, 2, 3)); [EOL]     assertTrue(target.setContains(0.1F, 0.2F, 0.3F, 0.4F)); [EOL]     assertTrue(target.sortedSetContains('a', 'b', 'c', 'd')); [EOL] }
public void testShortEqualsInteger() { [EOL]     JsonPrimitive p1 = new JsonPrimitive(new Short((short) 10)); [EOL]     JsonPrimitive p2 = new JsonPrimitive(new Integer(10)); [EOL]     assertEquals(p1, p2); [EOL]     assertEquals(p1.hashCode(), p2.hashCode()); [EOL] }
public void testShortEqualsInteger() { [EOL]     JsonPrimitive p1 = new JsonPrimitive(new Short((short) 10)); [EOL]     JsonPrimitive p2 = new JsonPrimitive(new Integer(10)); [EOL]     assertEquals(p1, p2); [EOL]     assertEquals(p1.hashCode(), p2.hashCode()); [EOL] }
public void testShortEqualsInteger() { [EOL]     JsonPrimitive p1 = new JsonPrimitive(new Short((short) 10)); [EOL]     JsonPrimitive p2 = new JsonPrimitive(new Integer(10)); [EOL]     assertEquals(p1, p2); [EOL]     assertEquals(p1.hashCode(), p2.hashCode()); [EOL] }
public void testShortEqualsInteger() { [EOL]     JsonPrimitive p1 = new JsonPrimitive(new Short((short) 10)); [EOL]     JsonPrimitive p2 = new JsonPrimitive(new Integer(10)); [EOL]     assertEquals(p1, p2); [EOL]     assertEquals(p1.hashCode(), p2.hashCode()); [EOL] }
public void testShortEqualsInteger() { [EOL]     JsonPrimitive p1 = new JsonPrimitive(new Short((short) 10)); [EOL]     JsonPrimitive p2 = new JsonPrimitive(new Integer(10)); [EOL]     assertEquals(p1, p2); [EOL]     assertEquals(p1.hashCode(), p2.hashCode()); [EOL] }
public void testShortEqualsInteger() { [EOL]     JsonPrimitive p1 = new JsonPrimitive(new Short((short) 10)); [EOL]     JsonPrimitive p2 = new JsonPrimitive(new Integer(10)); [EOL]     assertEquals(p1, p2); [EOL]     assertEquals(p1.hashCode(), p2.hashCode()); [EOL] }
public void testShortEqualsInteger() { [EOL]     JsonPrimitive p1 = new JsonPrimitive(new Short((short) 10)); [EOL]     JsonPrimitive p2 = new JsonPrimitive(new Integer(10)); [EOL]     assertEquals(p1, p2); [EOL]     assertEquals(p1.hashCode(), p2.hashCode()); [EOL] }
public void testShortEqualsInteger() { [EOL]     JsonPrimitive p1 = new JsonPrimitive(new Short((short) 10)); [EOL]     JsonPrimitive p2 = new JsonPrimitive(new Integer(10)); [EOL]     assertEquals(p1, p2); [EOL]     assertEquals(p1.hashCode(), p2.hashCode()); [EOL] }
public void testShortEqualsInteger() { [EOL]     JsonPrimitive p1 = new JsonPrimitive(new Short((short) 10)); [EOL]     JsonPrimitive p2 = new JsonPrimitive(new Integer(10)); [EOL]     assertEquals(p1, p2); [EOL]     assertEquals(p1.hashCode(), p2.hashCode()); [EOL] }
public void testShortEqualsInteger() { [EOL]     JsonPrimitive p1 = new JsonPrimitive(new Short((short) 10)); [EOL]     JsonPrimitive p2 = new JsonPrimitive(new Integer(10)); [EOL]     assertEquals(p1, p2); [EOL]     assertEquals(p1.hashCode(), p2.hashCode()); [EOL] }
public void testShortEqualsInteger() { [EOL]     JsonPrimitive p1 = new JsonPrimitive(new Short((short) 10)); [EOL]     JsonPrimitive p2 = new JsonPrimitive(new Integer(10)); [EOL]     assertEquals(p1, p2); [EOL]     assertEquals(p1.hashCode(), p2.hashCode()); [EOL] }
public void testShortEqualsInteger() { [EOL]     JsonPrimitive p1 = new JsonPrimitive(new Short((short) 10)); [EOL]     JsonPrimitive p2 = new JsonPrimitive(new Integer(10)); [EOL]     assertEquals(p1, p2); [EOL]     assertEquals(p1.hashCode(), p2.hashCode()); [EOL] }
public void testShortEqualsInteger() { [EOL]     JsonPrimitive p1 = new JsonPrimitive(new Short((short) 10)); [EOL]     JsonPrimitive p2 = new JsonPrimitive(new Integer(10)); [EOL]     assertEquals(p1, p2); [EOL]     assertEquals(p1.hashCode(), p2.hashCode()); [EOL] }
public void testShortEqualsInteger() { [EOL]     JsonPrimitive p1 = new JsonPrimitive(new Short((short) 10)); [EOL]     JsonPrimitive p2 = new JsonPrimitive(new Integer(10)); [EOL]     assertEquals(p1, p2); [EOL]     assertEquals(p1.hashCode(), p2.hashCode()); [EOL] }
public void testShortEqualsInteger() { [EOL]     JsonPrimitive p1 = new JsonPrimitive(new Short((short) 10)); [EOL]     JsonPrimitive p2 = new JsonPrimitive(new Integer(10)); [EOL]     assertEquals(p1, p2); [EOL]     assertEquals(p1.hashCode(), p2.hashCode()); [EOL] }
public void testShortEqualsInteger() { [EOL]     JsonPrimitive p1 = new JsonPrimitive(new Short((short) 10)); [EOL]     JsonPrimitive p2 = new JsonPrimitive(new Integer(10)); [EOL]     assertEquals(p1, p2); [EOL]     assertEquals(p1.hashCode(), p2.hashCode()); [EOL] }
public void testShortEqualsInteger() { [EOL]     JsonPrimitive p1 = new JsonPrimitive(new Short((short) 10)); [EOL]     JsonPrimitive p2 = new JsonPrimitive(new Integer(10)); [EOL]     assertEquals(p1, p2); [EOL]     assertEquals(p1.hashCode(), p2.hashCode()); [EOL] }
public void testShortEqualsInteger() { [EOL]     JsonPrimitive p1 = new JsonPrimitive(new Short((short) 10)); [EOL]     JsonPrimitive p2 = new JsonPrimitive(new Integer(10)); [EOL]     assertEquals(p1, p2); [EOL]     assertEquals(p1.hashCode(), p2.hashCode()); [EOL] }
public void testShortEqualsInteger() { [EOL]     JsonPrimitive p1 = new JsonPrimitive(new Short((short) 10)); [EOL]     JsonPrimitive p2 = new JsonPrimitive(new Integer(10)); [EOL]     assertEquals(p1, p2); [EOL]     assertEquals(p1.hashCode(), p2.hashCode()); [EOL] }
public void testShortEqualsInteger() { [EOL]     JsonPrimitive p1 = new JsonPrimitive(new Short((short) 10)); [EOL]     JsonPrimitive p2 = new JsonPrimitive(new Integer(10)); [EOL]     assertEquals(p1, p2); [EOL]     assertEquals(p1.hashCode(), p2.hashCode()); [EOL] }
public void testShortEqualsInteger() { [EOL]     JsonPrimitive p1 = new JsonPrimitive(new Short((short) 10)); [EOL]     JsonPrimitive p2 = new JsonPrimitive(new Integer(10)); [EOL]     assertEquals(p1, p2); [EOL]     assertEquals(p1.hashCode(), p2.hashCode()); [EOL] }
public void testShortEqualsInteger() { [EOL]     JsonPrimitive p1 = new JsonPrimitive(new Short((short) 10)); [EOL]     JsonPrimitive p2 = new JsonPrimitive(new Integer(10)); [EOL]     assertEquals(p1, p2); [EOL]     assertEquals(p1.hashCode(), p2.hashCode()); [EOL] }
public void testShortEqualsInteger() { [EOL]     JsonPrimitive p1 = new JsonPrimitive(new Short((short) 10)); [EOL]     JsonPrimitive p2 = new JsonPrimitive(new Integer(10)); [EOL]     assertEquals(p1, p2); [EOL]     assertEquals(p1.hashCode(), p2.hashCode()); [EOL] }
public void testShortEqualsInteger() { [EOL]     JsonPrimitive p1 = new JsonPrimitive(new Short((short) 10)); [EOL]     JsonPrimitive p2 = new JsonPrimitive(new Integer(10)); [EOL]     assertEquals(p1, p2); [EOL]     assertEquals(p1.hashCode(), p2.hashCode()); [EOL] }
public void testShortEqualsInteger() { [EOL]     JsonPrimitive p1 = new JsonPrimitive(new Short((short) 10)); [EOL]     JsonPrimitive p2 = new JsonPrimitive(new Integer(10)); [EOL]     assertEquals(p1, p2); [EOL]     assertEquals(p1.hashCode(), p2.hashCode()); [EOL] }
public void testShortEqualsInteger() { [EOL]     JsonPrimitive p1 = new JsonPrimitive(new Short((short) 10)); [EOL]     JsonPrimitive p2 = new JsonPrimitive(new Integer(10)); [EOL]     assertEquals(p1, p2); [EOL]     assertEquals(p1.hashCode(), p2.hashCode()); [EOL] }
public void testShortEqualsInteger() { [EOL]     JsonPrimitive p1 = new JsonPrimitive(new Short((short) 10)); [EOL]     JsonPrimitive p2 = new JsonPrimitive(new Integer(10)); [EOL]     assertEquals(p1, p2); [EOL]     assertEquals(p1.hashCode(), p2.hashCode()); [EOL] }
public void testShortEqualsInteger() { [EOL]     JsonPrimitive p1 = new JsonPrimitive(new Short((short) 10)); [EOL]     JsonPrimitive p2 = new JsonPrimitive(new Integer(10)); [EOL]     assertEquals(p1, p2); [EOL]     assertEquals(p1.hashCode(), p2.hashCode()); [EOL] }
public void testShortEqualsInteger() { [EOL]     JsonPrimitive p1 = new JsonPrimitive(new Short((short) 10)); [EOL]     JsonPrimitive p2 = new JsonPrimitive(new Integer(10)); [EOL]     assertEquals(p1, p2); [EOL]     assertEquals(p1.hashCode(), p2.hashCode()); [EOL] }
public void testShortEqualsInteger() { [EOL]     JsonPrimitive p1 = new JsonPrimitive(new Short((short) 10)); [EOL]     JsonPrimitive p2 = new JsonPrimitive(new Integer(10)); [EOL]     assertEquals(p1, p2); [EOL]     assertEquals(p1.hashCode(), p2.hashCode()); [EOL] }
public void testShortEqualsInteger() { [EOL]     JsonPrimitive p1 = new JsonPrimitive(new Short((short) 10)); [EOL]     JsonPrimitive p2 = new JsonPrimitive(new Integer(10)); [EOL]     assertEquals(p1, p2); [EOL]     assertEquals(p1.hashCode(), p2.hashCode()); [EOL] }
public void testShortEqualsInteger() { [EOL]     JsonPrimitive p1 = new JsonPrimitive(new Short((short) 10)); [EOL]     JsonPrimitive p2 = new JsonPrimitive(new Integer(10)); [EOL]     assertEquals(p1, p2); [EOL]     assertEquals(p1.hashCode(), p2.hashCode()); [EOL] }
public void testShortEqualsInteger() { [EOL]     JsonPrimitive p1 = new JsonPrimitive(new Short((short) 10)); [EOL]     JsonPrimitive p2 = new JsonPrimitive(new Integer(10)); [EOL]     assertEquals(p1, p2); [EOL]     assertEquals(p1.hashCode(), p2.hashCode()); [EOL] }
public void testShortEqualsInteger() { [EOL]     JsonPrimitive p1 = new JsonPrimitive(new Short((short) 10)); [EOL]     JsonPrimitive p2 = new JsonPrimitive(new Integer(10)); [EOL]     assertEquals(p1, p2); [EOL]     assertEquals(p1.hashCode(), p2.hashCode()); [EOL] }
public void testShortEqualsInteger() { [EOL]     JsonPrimitive p1 = new JsonPrimitive(new Short((short) 10)); [EOL]     JsonPrimitive p2 = new JsonPrimitive(new Integer(10)); [EOL]     assertEquals(p1, p2); [EOL]     assertEquals(p1.hashCode(), p2.hashCode()); [EOL] }
public void testShortEqualsInteger() { [EOL]     JsonPrimitive p1 = new JsonPrimitive(new Short((short) 10)); [EOL]     JsonPrimitive p2 = new JsonPrimitive(new Integer(10)); [EOL]     assertEquals(p1, p2); [EOL]     assertEquals(p1.hashCode(), p2.hashCode()); [EOL] }
public void testShortEqualsInteger() { [EOL]     JsonPrimitive p1 = new JsonPrimitive(new Short((short) 10)); [EOL]     JsonPrimitive p2 = new JsonPrimitive(new Integer(10)); [EOL]     assertEquals(p1, p2); [EOL]     assertEquals(p1.hashCode(), p2.hashCode()); [EOL] }
public void testShortEqualsInteger() { [EOL]     JsonPrimitive p1 = new JsonPrimitive(new Short((short) 10)); [EOL]     JsonPrimitive p2 = new JsonPrimitive(new Integer(10)); [EOL]     assertEquals(p1, p2); [EOL]     assertEquals(p1.hashCode(), p2.hashCode()); [EOL] }
public void testShortEqualsInteger() { [EOL]     JsonPrimitive p1 = new JsonPrimitive(new Short((short) 10)); [EOL]     JsonPrimitive p2 = new JsonPrimitive(new Integer(10)); [EOL]     assertEquals(p1, p2); [EOL]     assertEquals(p1.hashCode(), p2.hashCode()); [EOL] }
public void testShortEqualsInteger() { [EOL]     JsonPrimitive p1 = new JsonPrimitive(new Short((short) 10)); [EOL]     JsonPrimitive p2 = new JsonPrimitive(new Integer(10)); [EOL]     assertEquals(p1, p2); [EOL]     assertEquals(p1.hashCode(), p2.hashCode()); [EOL] }
public void testShortEqualsInteger() { [EOL]     JsonPrimitive p1 = new JsonPrimitive(new Short((short) 10)); [EOL]     JsonPrimitive p2 = new JsonPrimitive(new Integer(10)); [EOL]     assertEquals(p1, p2); [EOL]     assertEquals(p1.hashCode(), p2.hashCode()); [EOL] }
public void testShortEqualsInteger() { [EOL]     JsonPrimitive p1 = new JsonPrimitive(new Short((short) 10)); [EOL]     JsonPrimitive p2 = new JsonPrimitive(new Integer(10)); [EOL]     assertEquals(p1, p2); [EOL]     assertEquals(p1.hashCode(), p2.hashCode()); [EOL] }
public void testShortEqualsInteger() { [EOL]     JsonPrimitive p1 = new JsonPrimitive(new Short((short) 10)); [EOL]     JsonPrimitive p2 = new JsonPrimitive(new Integer(10)); [EOL]     assertEquals(p1, p2); [EOL]     assertEquals(p1.hashCode(), p2.hashCode()); [EOL] }
public void testDefaultTypeAdapterThrowsParseException() throws Exception { [EOL]     try { [EOL]         gson.fromJson("{\"abc\":123}", BigInteger.class); [EOL]         fail("Should have thrown a JsonParseException"); [EOL]     } catch (JsonParseException expected) { [EOL]     } [EOL] }
public void testValidFieldBeginsWithDollarSign() throws Exception { [EOL]     String fieldName = "$abc"; [EOL]     assertEquals(fieldName, validator.validate(fieldName)); [EOL] }
public void testValidFieldBeginsWithDollarSign() throws Exception { [EOL]     String fieldName = "$abc"; [EOL]     assertEquals(fieldName, validator.validate(fieldName)); [EOL] }
public void testValidFieldBeginsWithDollarSign() throws Exception { [EOL]     String fieldName = "$abc"; [EOL]     assertEquals(fieldName, validator.validate(fieldName)); [EOL] }
public void testValidFieldBeginsWithDollarSign() throws Exception { [EOL]     String fieldName = "$abc"; [EOL]     assertEquals(fieldName, validator.validate(fieldName)); [EOL] }
public void testValidFieldBeginsWithDollarSign() throws Exception { [EOL]     String fieldName = "$abc"; [EOL]     assertEquals(fieldName, validator.validate(fieldName)); [EOL] }
public void testAddingAndRemovingObjectProperties() throws Exception { [EOL]     JsonObject jsonObj = new JsonObject(); [EOL]     String propertyName = "property"; [EOL]     assertFalse(jsonObj.has(propertyName)); [EOL]     assertNull(jsonObj.get(propertyName)); [EOL]     JsonPrimitive value = new JsonPrimitive("blah"); [EOL]     jsonObj.add(propertyName, value); [EOL]     assertEquals(value, jsonObj.get(propertyName)); [EOL]     JsonElement removedElement = jsonObj.remove(propertyName); [EOL]     assertEquals(value, removedElement); [EOL]     assertFalse(jsonObj.has(propertyName)); [EOL] }
public void testAddingAndRemovingObjectProperties() throws Exception { [EOL]     JsonObject jsonObj = new JsonObject(); [EOL]     String propertyName = "property"; [EOL]     assertFalse(jsonObj.has(propertyName)); [EOL]     assertNull(jsonObj.get(propertyName)); [EOL]     JsonPrimitive value = new JsonPrimitive("blah"); [EOL]     jsonObj.add(propertyName, value); [EOL]     assertEquals(value, jsonObj.get(propertyName)); [EOL]     JsonElement removedElement = jsonObj.remove(propertyName); [EOL]     assertEquals(value, removedElement); [EOL]     assertFalse(jsonObj.has(propertyName)); [EOL] }
public void testAddingAndRemovingObjectProperties() throws Exception { [EOL]     JsonObject jsonObj = new JsonObject(); [EOL]     String propertyName = "property"; [EOL]     assertFalse(jsonObj.has(propertyName)); [EOL]     assertNull(jsonObj.get(propertyName)); [EOL]     JsonPrimitive value = new JsonPrimitive("blah"); [EOL]     jsonObj.add(propertyName, value); [EOL]     assertEquals(value, jsonObj.get(propertyName)); [EOL]     JsonElement removedElement = jsonObj.remove(propertyName); [EOL]     assertEquals(value, removedElement); [EOL]     assertFalse(jsonObj.has(propertyName)); [EOL] }
public void testAddingAndRemovingObjectProperties() throws Exception { [EOL]     JsonObject jsonObj = new JsonObject(); [EOL]     String propertyName = "property"; [EOL]     assertFalse(jsonObj.has(propertyName)); [EOL]     assertNull(jsonObj.get(propertyName)); [EOL]     JsonPrimitive value = new JsonPrimitive("blah"); [EOL]     jsonObj.add(propertyName, value); [EOL]     assertEquals(value, jsonObj.get(propertyName)); [EOL]     JsonElement removedElement = jsonObj.remove(propertyName); [EOL]     assertEquals(value, removedElement); [EOL]     assertFalse(jsonObj.has(propertyName)); [EOL] }
public void testAddingAndRemovingObjectProperties() throws Exception { [EOL]     JsonObject jsonObj = new JsonObject(); [EOL]     String propertyName = "property"; [EOL]     assertFalse(jsonObj.has(propertyName)); [EOL]     assertNull(jsonObj.get(propertyName)); [EOL]     JsonPrimitive value = new JsonPrimitive("blah"); [EOL]     jsonObj.add(propertyName, value); [EOL]     assertEquals(value, jsonObj.get(propertyName)); [EOL]     JsonElement removedElement = jsonObj.remove(propertyName); [EOL]     assertEquals(value, removedElement); [EOL]     assertFalse(jsonObj.has(propertyName)); [EOL] }
public void testAddingAndRemovingObjectProperties() throws Exception { [EOL]     JsonObject jsonObj = new JsonObject(); [EOL]     String propertyName = "property"; [EOL]     assertFalse(jsonObj.has(propertyName)); [EOL]     assertNull(jsonObj.get(propertyName)); [EOL]     JsonPrimitive value = new JsonPrimitive("blah"); [EOL]     jsonObj.add(propertyName, value); [EOL]     assertEquals(value, jsonObj.get(propertyName)); [EOL]     JsonElement removedElement = jsonObj.remove(propertyName); [EOL]     assertEquals(value, removedElement); [EOL]     assertFalse(jsonObj.has(propertyName)); [EOL] }
public void testAddingAndRemovingObjectProperties() throws Exception { [EOL]     JsonObject jsonObj = new JsonObject(); [EOL]     String propertyName = "property"; [EOL]     assertFalse(jsonObj.has(propertyName)); [EOL]     assertNull(jsonObj.get(propertyName)); [EOL]     JsonPrimitive value = new JsonPrimitive("blah"); [EOL]     jsonObj.add(propertyName, value); [EOL]     assertEquals(value, jsonObj.get(propertyName)); [EOL]     JsonElement removedElement = jsonObj.remove(propertyName); [EOL]     assertEquals(value, removedElement); [EOL]     assertFalse(jsonObj.has(propertyName)); [EOL] }
public void testAddingAndRemovingObjectProperties() throws Exception { [EOL]     JsonObject jsonObj = new JsonObject(); [EOL]     String propertyName = "property"; [EOL]     assertFalse(jsonObj.has(propertyName)); [EOL]     assertNull(jsonObj.get(propertyName)); [EOL]     JsonPrimitive value = new JsonPrimitive("blah"); [EOL]     jsonObj.add(propertyName, value); [EOL]     assertEquals(value, jsonObj.get(propertyName)); [EOL]     JsonElement removedElement = jsonObj.remove(propertyName); [EOL]     assertEquals(value, removedElement); [EOL]     assertFalse(jsonObj.has(propertyName)); [EOL] }
public void testAddingAndRemovingObjectProperties() throws Exception { [EOL]     JsonObject jsonObj = new JsonObject(); [EOL]     String propertyName = "property"; [EOL]     assertFalse(jsonObj.has(propertyName)); [EOL]     assertNull(jsonObj.get(propertyName)); [EOL]     JsonPrimitive value = new JsonPrimitive("blah"); [EOL]     jsonObj.add(propertyName, value); [EOL]     assertEquals(value, jsonObj.get(propertyName)); [EOL]     JsonElement removedElement = jsonObj.remove(propertyName); [EOL]     assertEquals(value, removedElement); [EOL]     assertFalse(jsonObj.has(propertyName)); [EOL] }
public void testAddingAndRemovingObjectProperties() throws Exception { [EOL]     JsonObject jsonObj = new JsonObject(); [EOL]     String propertyName = "property"; [EOL]     assertFalse(jsonObj.has(propertyName)); [EOL]     assertNull(jsonObj.get(propertyName)); [EOL]     JsonPrimitive value = new JsonPrimitive("blah"); [EOL]     jsonObj.add(propertyName, value); [EOL]     assertEquals(value, jsonObj.get(propertyName)); [EOL]     JsonElement removedElement = jsonObj.remove(propertyName); [EOL]     assertEquals(value, removedElement); [EOL]     assertFalse(jsonObj.has(propertyName)); [EOL] }
public void testParseMixedArray() { [EOL]     String json = "[{},13,\"stringValue\"]"; [EOL]     JsonElement e = parser.parse(json); [EOL]     assertTrue(e.isJsonArray()); [EOL]     JsonArray array = e.getAsJsonArray(); [EOL]     assertEquals("{}", array.get(0).toString()); [EOL]     assertEquals(13, array.get(1).getAsInt()); [EOL]     assertEquals("stringValue", array.get(2).getAsString()); [EOL] }
public void testParseMixedArray() { [EOL]     String json = "[{},13,\"stringValue\"]"; [EOL]     JsonElement e = parser.parse(json); [EOL]     assertTrue(e.isJsonArray()); [EOL]     JsonArray array = e.getAsJsonArray(); [EOL]     assertEquals("{}", array.get(0).toString()); [EOL]     assertEquals(13, array.get(1).getAsInt()); [EOL]     assertEquals("stringValue", array.get(2).getAsString()); [EOL] }
public void testParseMixedArray() { [EOL]     String json = "[{},13,\"stringValue\"]"; [EOL]     JsonElement e = parser.parse(json); [EOL]     assertTrue(e.isJsonArray()); [EOL]     JsonArray array = e.getAsJsonArray(); [EOL]     assertEquals("{}", array.get(0).toString()); [EOL]     assertEquals(13, array.get(1).getAsInt()); [EOL]     assertEquals("stringValue", array.get(2).getAsString()); [EOL] }
