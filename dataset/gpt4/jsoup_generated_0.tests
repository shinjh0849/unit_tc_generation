public void testNodeConstructorWithValidArguments() { [EOL] String baseUri = "http://example.com"; [EOL] Attributes attributes = new Attributes(); [EOL] Node node = new Node(baseUri, attributes); [EOL] assertNotNull(node.childNodes); [EOL] assertEquals(baseUri.trim(), node.baseUri); [EOL] assertEquals(attributes, node.attributes); [EOL] }
public void testNodeConstructorWithNullBaseUri() { [EOL] Attributes attributes = new Attributes(); [EOL] try { [EOL] new Node(null, attributes); [EOL] fail("Node constructor should throw IllegalArgumentException for null baseUri"); [EOL] } catch (IllegalArgumentException e) { [EOL] } [EOL] }
public void testNodeConstructorWithNullAttributes() { [EOL] String baseUri = "http://example.com"; [EOL] try { [EOL] new Node(baseUri, null); [EOL] fail("Node constructor should throw IllegalArgumentException for null attributes"); [EOL] } catch (IllegalArgumentException e) { [EOL] } [EOL] }
protected Node(String baseUri) { [EOL] this(baseUri, new Attributes()); [EOL] }
public void testAttrWithValidKeyAndValue() { [EOL] Node node = new Element("div"); [EOL] String attributeKey = "key"; [EOL] String attributeValue = "value"; [EOL] Node result = node.attr(attributeKey, attributeValue); [EOL] assertEquals("Attribute value should be set to 'value'", attributeValue, node.attr(attributeKey)); [EOL] assertSame("The returned node should be the same as the original node", node, result); [EOL] }
public void testChildNode_ValidIndex() { [EOL] Element parent = new Element(Tag.valueOf("div"), ""); [EOL] Element child1 = new Element(Tag.valueOf("p"), ""); [EOL] Element child2 = new Element(Tag.valueOf("span"), ""); [EOL] parent.appendChild(child1); [EOL] parent.appendChild(child2); [EOL] Node result = parent.childNode(0); [EOL] assertEquals(child1, result); [EOL] }
public void testChildNode_InvalidIndex() { [EOL] Element parent = new Element(Tag.valueOf("div"), ""); [EOL] Element child = new Element(Tag.valueOf("p"), ""); [EOL] parent.appendChild(child); [EOL] try { [EOL] parent.childNode(1); [EOL] fail("IndexOutOfBoundsException expected"); [EOL] } catch (IndexOutOfBoundsException e) { [EOL] } [EOL] }
public void testParentNodeIsNull() { [EOL] Node node = new Node(); [EOL] assertNull(node.parent()); [EOL] }
public void testParentNodeIsNotNull() { [EOL] Node parentNode = new Node(); [EOL] Node childNode = new Node(); [EOL] childNode.parentNode = parentNode; [EOL] assertEquals(parentNode, childNode.parent()); [EOL] }
public void testSetParentNode_WithNullParent() { [EOL] Node childNode = new Element("child"); [EOL] Node parentNode = null; [EOL] childNode.setParentNode(parentNode); [EOL] assertNull(childNode.parentNode); [EOL] }
public void testSetParentNode_WithNonNullParent() { [EOL] Node childNode = new Element("child"); [EOL] Node parentNode = new Element("parent"); [EOL] childNode.setParentNode(parentNode); [EOL] assertEquals(parentNode, childNode.parentNode); [EOL] }
public void testSetParentNode_WhenAlreadyHasParent() { [EOL] Node childNode = new Element("child"); [EOL] Node firstParent = new Element("parent1"); [EOL] Node secondParent = new Element("parent2"); [EOL] childNode.setParentNode(firstParent); [EOL] try { [EOL] childNode.setParentNode(secondParent); [EOL] fail("NotImplementedException expected"); [EOL] } catch (NotImplementedException e) { [EOL] } [EOL] }
public void testReplaceChildWithValidNode() { [EOL] Element parent = new Element(Tag.valueOf("div"), ""); [EOL] Element child1 = new Element(Tag.valueOf("p"), ""); [EOL] Element child2 = new Element(Tag.valueOf("span"), ""); [EOL] parent.appendChild(child1); [EOL] parent.replaceChild(child1, child2); [EOL] assertEquals(child2, parent.child(0)); [EOL] assertNull(child1.parentNode()); [EOL] assertEquals(parent, child2.parentNode()); [EOL] }
public void testReplaceChildWithNullNewNode() { [EOL] Element parent = new Element(Tag.valueOf("div"), ""); [EOL] Element child = new Element(Tag.valueOf("p"), ""); [EOL] parent.appendChild(child); [EOL] try { [EOL] parent.replaceChild(child, null); [EOL] fail("Should throw IllegalArgumentException for null new node"); [EOL] } catch (IllegalArgumentException e) { [EOL] } [EOL] }
public void testReplaceChildWithNodeHavingExistingParent() { [EOL] Element parent1 = new Element(Tag.valueOf("div"), ""); [EOL] Element parent2 = new Element(Tag.valueOf("div"), ""); [EOL] Element child1 = new Element(Tag.valueOf("p"), ""); [EOL] Element child2 = new Element(Tag.valueOf("span"), ""); [EOL] parent1.appendChild(child1); [EOL] parent2.appendChild(child2); [EOL] parent1.replaceChild(child1, child2); [EOL] assertEquals(child2, parent1.child(0)); [EOL] assertNull(child1.parentNode()); [EOL] assertEquals(parent1, child2.parentNode()); [EOL] assertFalse(parent2.children().contains(child2)); [EOL] }
public void addChild_NodeIsNull_ThrowsException() { [EOL] Node parent = new Element(Tag.valueOf("div"), ""); [EOL] try { [EOL] parent.addChild(null); [EOL] fail("addChild should throw NullPointerException when adding null node."); [EOL] } catch (NullPointerException e) { [EOL] } [EOL] } [EOL] public void addChild_NodeHasParent_RemovesFromOldParentAndAddsToNewParent() { [EOL] Node parent1 = new Element(Tag.valueOf("div"), ""); [EOL] Node parent2 = new Element(Tag.valueOf("div"), ""); [EOL] Node child = new Element(Tag.valueOf("p"), ""); [EOL] parent1.appendChild(child); // Add to parent1 to set parentNode [EOL] parent2.addChild(child); // Now add to parent2 [EOL] assertFalse(parent1.childNodes().contains(child)); [EOL] assertTrue(parent2.childNodes().contains(child)); [EOL] assertEquals(parent2, child.parentNode()); [EOL] } [EOL] public void addChild_NodeHasNoParent_AddsToParent() { [EOL] Node parent = new Element(Tag.valueOf("div"), ""); [EOL] Node child = new Element(Tag.valueOf("p"), ""); [EOL] parent.addChild(child); [EOL] assertTrue(parent.childNodes().contains(child)); [EOL] assertEquals(parent, child.parentNode()); [EOL] }
public void testOuterHtml_EmptyDocument() { [EOL] Document doc = new Document(""); [EOL] String result = doc.outerHtml(); [EOL] assertEquals("", result); [EOL] }
public void testOuterHtml_SimpleDocument() { [EOL] Document doc = Jsoup.parse("<p>Hello</p>"); [EOL] String result = doc.outerHtml(); [EOL] assertEquals("<html>\n <head></head>\n <body>\n  <p>Hello</p>\n </body>\n</html>", result.trim()); [EOL] }
public void testHashCode_nullParentNodeAndAttributes() { [EOL] Node node = new Node() { [EOL] }; [EOL] node.attributes = null; [EOL] int result = node.hashCode(); [EOL] assertEquals(0, result); [EOL] }
public void testHashCode_withParentNodeAndNullAttributes() { [EOL] Node parentNode = new Node() { [EOL] }; [EOL] Node node = new Node() { [EOL] }; [EOL] node.parentNode = parentNode; [EOL] node.attributes = null; [EOL] int expected = 31 * parentNode.hashCode(); [EOL] int result = node.hashCode(); [EOL] assertEquals(expected, result); [EOL] }
public void testHashCode_withParentNodeAndAttributes() { [EOL] Node parentNode = new Node() { [EOL] }; [EOL] Attributes attributes = new Attributes(); [EOL] attributes.put("key", "value"); [EOL] Node node = new Node() { [EOL] }; [EOL] node.parentNode = parentNode; [EOL] node.attributes = attributes; [EOL] int expected = 31 * parentNode.hashCode() + attributes.hashCode(); [EOL] int result = node.hashCode(); [EOL] assertEquals(expected, result); [EOL] }
public void testXmlDeclarationWithProcessingInstruction() { [EOL] String data = "version=\"1.0\""; [EOL] String baseUri = "http://example.com"; [EOL] boolean isProcessingInstruction = true; [EOL] XmlDeclaration decl = new XmlDeclaration(data, baseUri, isProcessingInstruction); [EOL] assertEquals("version=\"1.0\"", decl.attr("declaration")); [EOL] assertTrue(decl.isProcessingInstruction()); [EOL] }
public void testXmlDeclarationWithoutProcessingInstruction() { [EOL] String data = "encoding=\"UTF-8\""; [EOL] String baseUri = "http://example.com"; [EOL] boolean isProcessingInstruction = false; [EOL] XmlDeclaration decl = new XmlDeclaration(data, baseUri, isProcessingInstruction); [EOL] assertEquals("encoding=\"UTF-8\"", decl.attr("declaration")); [EOL] assertFalse(decl.isProcessingInstruction()); [EOL] }
public void testValWithNonEmptyElement() { [EOL] Elements elements = new Elements(); [EOL] Element element = new Element(Tag.valueOf("div"), ""); [EOL] element.val("someValue"); [EOL] elements.add(element); [EOL] String result = elements.val(); [EOL] assertEquals("someValue", result); [EOL] }
public void testValWithEmptyElement() { [EOL] Elements elements = new Elements(); [EOL] String result = elements.val(); [EOL] assertEquals("", result); [EOL] }
public void testValWithEmptyElements() { [EOL] Elements elements = new Elements(); [EOL] Elements result = elements.val("someValue"); [EOL] assertTrue(result.isEmpty()); [EOL] }
public void testValWithSingleElement() { [EOL] Elements elements = new Elements(); [EOL] elements.add(new Element(Tag.valueOf("input"), "")); [EOL] Elements result = elements.val("someValue"); [EOL] assertEquals(1, result.size()); [EOL] assertEquals("someValue", result.get(0).val()); [EOL] }
public void testValWithMultipleElements() { [EOL] Elements elements = new Elements(); [EOL] elements.add(new Element(Tag.valueOf("input"), "")); [EOL] elements.add(new Element(Tag.valueOf("textarea"), "")); [EOL] Elements result = elements.val("newValue"); [EOL] assertEquals(2, result.size()); [EOL] for (Element element : result) { [EOL] assertEquals("newValue", element.val()); [EOL] } [EOL] }
public void testHasText_WithText() { [EOL] Element parent = new Element(Tag.valueOf("div"), ""); [EOL] parent.appendChild(new TextNode("Some text")); [EOL] boolean result = parent.hasText(); [EOL] assertTrue(result); [EOL] }
public void testHasText_WithoutText() { [EOL] Element parent = new Element(Tag.valueOf("div"), ""); [EOL] boolean result = parent.hasText(); [EOL] assertFalse(result); [EOL] }
public void testHasText_WithNestedText() { [EOL] Element parent = new Element(Tag.valueOf("div"), ""); [EOL] Element child = new Element(Tag.valueOf("p"), ""); [EOL] child.appendChild(new TextNode("Nested text")); [EOL] parent.appendChild(child); [EOL] boolean result = parent.hasText(); [EOL] assertTrue(result); [EOL] }
public void testHasText_WithNestedElementWithoutText() { [EOL] Element parent = new Element(Tag.valueOf("div"), ""); [EOL] Element child = new Element(Tag.valueOf("p"), ""); [EOL] parent.appendChild(child); [EOL] boolean result = parent.hasText(); [EOL] assertFalse(result); [EOL] }
public void testSelectWithValidQuery() { [EOL] Document doc = Jsoup.parse("<div><p>Hello</p></div>"); [EOL] Elements elements = doc.select("p"); [EOL] assertNotNull(elements); [EOL] assertEquals(1, elements.size()); [EOL] assertEquals("Hello", elements.first().text()); [EOL] }
public void testSelectWithInvalidQuery() { [EOL] Document doc = Jsoup.parse("<div><p>Hello</p></div>"); [EOL] try { [EOL] Elements elements = doc.select("><"); [EOL] fail("Selector.select should throw an exception for invalid query"); [EOL] } catch (Selector.SelectorParseException e) { [EOL] } [EOL] }
public void testSelectWithEmptyQuery() { [EOL] Document doc = Jsoup.parse("<div><p>Hello</p></div>"); [EOL] Elements elements = doc.select(""); [EOL] assertNotNull(elements); [EOL] assertEquals(0, elements.size()); [EOL] }
public void testIsWithEmptyQuery() { [EOL] Element element = new Element(Tag.valueOf("div"), ""); [EOL] boolean result = element.is(""); [EOL] assertFalse(result); [EOL] } [EOL] public void testIsWithMatchingQuery() { [EOL] Element element = new Element(Tag.valueOf("div"), ""); [EOL] element.addClass("test-class"); [EOL] boolean result = element.is(".test-class"); [EOL] assertTrue(result); [EOL] } [EOL] public void testIsWithNonMatchingQuery() { [EOL] Element element = new Element(Tag.valueOf("div"), ""); [EOL] boolean result = element.is(".nonexistent-class"); [EOL] assertFalse(result); [EOL] } [EOL] public void testIsWithDirectChildQuery() { [EOL] Element parent = new Element(Tag.valueOf("div"), ""); [EOL] Element child = new Element(Tag.valueOf("p"), ""); [EOL] parent.appendChild(child); [EOL] boolean result = parent.is("> p"); [EOL] assertFalse(result); [EOL] result = child.is("> p"); [EOL] assertTrue(result); [EOL] }
public void testLastWithEmptyContents() { [EOL] Element element = new Element(Tag.valueOf("div"), ""); [EOL] Element result = element.last(); [EOL] assertNull(result); [EOL] }
public void testLastWithNonEmptyContents() { [EOL] Element element = new Element(Tag.valueOf("div"), ""); [EOL] element.appendChild(new Element(Tag.valueOf("p"), "")); [EOL] Element result = element.last(); [EOL] assertNotNull(result); [EOL] assertEquals("p", result.tagName()); [EOL] }
public void testAttributeWithValueNotWithEmptyKey() { [EOL] AttributeWithValueNot awvn = new AttributeWithValueNot("", "value"); [EOL] assertNotNull(awvn); [EOL] }
public void testAttributeWithValueNotWithEmptyValue() { [EOL] AttributeWithValueNot awvn = new AttributeWithValueNot("key", ""); [EOL] assertNotNull(awvn); [EOL] }
public void testAttributeWithValueNotWithNonEmptyKeyAndValue() { [EOL] AttributeWithValueNot awvn = new AttributeWithValueNot("key", "value"); [EOL] assertNotNull(awvn); [EOL] }
public void testMatches_WithMatchingElement() { [EOL] Element element = new Element(Tag.valueOf("div"), ""); [EOL] element.attr("key", "value"); [EOL] AttributeWithValueMatcher matcher = new AttributeWithValueMatcher("key", "Value"); [EOL] boolean result = matcher.matches(element); [EOL] assertFalse(result); [EOL] } [EOL] public void testMatches_WithNonMatchingElement() { [EOL] Element element = new Element(Tag.valueOf("div"), ""); [EOL] element.attr("key", "differentValue"); [EOL] AttributeWithValueMatcher matcher = new AttributeWithValueMatcher("key", "value"); [EOL] boolean result = matcher.matches(element); [EOL] assertTrue(result); [EOL] } [EOL] public void testMatches_WithNonExistingAttribute() { [EOL] Element element = new Element(Tag.valueOf("div"), ""); [EOL] AttributeWithValueMatcher matcher = new AttributeWithValueMatcher("nonExistingKey", "value"); [EOL] boolean result = matcher.matches(element); [EOL] assertTrue(result); [EOL] } [EOL] public void testMatches_WithCaseInsensitiveMatch() { [EOL] Element element = new Element(Tag.valueOf("div"), ""); [EOL] element.attr("key", "VALUE"); [EOL] AttributeWithValueMatcher matcher = new AttributeWithValueMatcher("key", "value"); [EOL] boolean result = matcher.matches(element); [EOL] assertFalse(result); [EOL] }
public void testAttributeWithValueStarting_EmptyValue() { [EOL] AttributeWithValueStarting attr = new AttributeWithValueStarting("key", ""); [EOL] assertNotNull(attr); [EOL] assertEquals("key", attr.getKey()); [EOL] assertEquals("", attr.getValue()); [EOL] }
public void testAttributeWithValueStarting_NonEmptyValue() { [EOL] AttributeWithValueStarting attr = new AttributeWithValueStarting("key", "value"); [EOL] assertNotNull(attr); [EOL] assertEquals("key", attr.getKey()); [EOL] assertEquals("value", attr.getValue()); [EOL] }
public void testMatchesWithMatchingElement() { [EOL] Element element = new Element(Tag.valueOf("div"), ""); [EOL] element.attr("key", "ValueMatch"); [EOL] String key = "key"; [EOL] String value = "valuematch"; [EOL] boolean result = element.matches(key, value); [EOL] assertTrue(result); [EOL] }
public void testMatchesWithNonMatchingElement() { [EOL] Element element = new Element(Tag.valueOf("div"), ""); [EOL] element.attr("key", "NonMatchingValue"); [EOL] String key = "key"; [EOL] String value = "valuematch"; [EOL] boolean result = element.matches(key, value); [EOL] assertFalse(result); [EOL] }
public void testMatchesWithCaseInsensitiveMatchingElement() { [EOL] Element element = new Element(Tag.valueOf("div"), ""); [EOL] element.attr("key", "ValueMatch"); [EOL] String key = "key"; [EOL] String value = "valuematch".toUpperCase(); [EOL] boolean result = element.matches(key, value); [EOL] assertTrue(result); [EOL] }
public void testAttributeWithValueEndingInstantiation() { [EOL] String key = "href"; [EOL] String value = "example.com"; [EOL] AttributeWithValueEnding attribute = new AttributeWithValueEnding(key, value); [EOL] assertNotNull(attribute); [EOL] }
public void testMatchesWithMatchingElement() { [EOL] Element element = new Element(Tag.valueOf("div"), ""); [EOL] element.attr("key", "SomeValue"); [EOL] AttributesKeyMatcher matcher = new AttributesKeyMatcher("key", "value"); [EOL] boolean result = matcher.matches(element); [EOL] assertTrue(result); [EOL] }
public void testMatchesWithNonMatchingElement() { [EOL] Element element = new Element(Tag.valueOf("div"), ""); [EOL] element.attr("key", "NonMatchingValue"); [EOL] AttributesKeyMatcher matcher = new AttributesKeyMatcher("key", "value"); [EOL] boolean result = matcher.matches(element); [EOL] assertFalse(result); [EOL] }
public void testMatchesWithCaseInsensitiveMatchingElement() { [EOL] Element element = new Element(Tag.valueOf("div"), ""); [EOL] element.attr("key", "SomeVALUE"); [EOL] AttributesKeyMatcher matcher = new AttributesKeyMatcher("key", "value"); [EOL] boolean result = matcher.matches(element); [EOL] assertTrue(result); [EOL] }
public void testMatchesWithEmptyAttributeValue() { [EOL] Element element = new Element(Tag.valueOf("div"), ""); [EOL] element.attr("key", ""); [EOL] AttributesKeyMatcher matcher = new AttributesKeyMatcher("key", "value"); [EOL] boolean result = matcher.matches(element); [EOL] assertFalse(result); [EOL] }
public void testMatchesWithNullElement() { [EOL] AttributesKeyMatcher matcher = new AttributesKeyMatcher("key", "value"); [EOL] boolean result = matcher.matches(null); [EOL] assertFalse(result); [EOL] }
public void testIndexLessThanWithNegativeIndex() { [EOL] int index = -1; [EOL] IndexLessThan exception = new IndexLessThan(index); [EOL] assertNotNull(exception); [EOL] }
public void testMatchesWithElementSiblingIndexLessThanIndex() { [EOL] Element element = mock(Element.class); [EOL] when(element.elementSiblingIndex()).thenReturn(5); [EOL] IndexLessThanMatcher matcher = new IndexLessThanMatcher(10); [EOL] boolean result = matcher.matches(element); [EOL] assertTrue(result); [EOL] }
public void testMatchesWithElementSiblingIndexEqualToIndex() { [EOL] Element element = mock(Element.class); [EOL] when(element.elementSiblingIndex()).thenReturn(10); [EOL] IndexLessThanMatcher matcher = new IndexLessThanMatcher(10); [EOL] boolean result = matcher.matches(element); [EOL] assertFalse(result); [EOL] }
public void testMatchesWithElementSiblingIndexGreaterThanIndex() { [EOL] Element element = mock(Element.class); [EOL] when(element.elementSiblingIndex()).thenReturn(15); [EOL] IndexLessThanMatcher matcher = new IndexLessThanMatcher(10); [EOL] boolean result = matcher.matches(element); [EOL] assertFalse(result); [EOL] }
public void testIndexGreaterThan() { [EOL] int index = 5; // Example index greater than a certain threshold if needed [EOL] ExampleClass example = new ExampleClass(index); [EOL] }
public void testMatchesWithElementHavingGreaterSiblingIndex() { [EOL] Element element = new Element(Tag.valueOf("div"), ""); [EOL] element.setSiblingIndex(10); [EOL] IndexGreaterThanMatcher matcher = new IndexGreaterThanMatcher(5); [EOL] boolean result = matcher.matches(element); [EOL] assertTrue(result); [EOL] }
public void testMatchesWithElementHavingLowerSiblingIndex() { [EOL] Element element = new Element(Tag.valueOf("div"), ""); [EOL] element.setSiblingIndex(3); [EOL] IndexGreaterThanMatcher matcher = new IndexGreaterThanMatcher(5); [EOL] boolean result = matcher.matches(element); [EOL] assertFalse(result); [EOL] }
public void testMatchesWithElementHavingEqualSiblingIndex() { [EOL] Element element = new Element(Tag.valueOf("div"), ""); [EOL] element.setSiblingIndex(5); [EOL] IndexGreaterThanMatcher matcher = new IndexGreaterThanMatcher(5); [EOL] boolean result = matcher.matches(element); [EOL] assertFalse(result); [EOL] }
public void testIndexEvaluatorConstructor() { [EOL] int testIndex = 5; [EOL] IndexEvaluator evaluator = new IndexEvaluator(testIndex); [EOL] assertEquals(testIndex, evaluator.getIndex()); [EOL] }
public void testCleanerConstructorWithValidWhitelist() { [EOL] Whitelist validWhitelist = new Whitelist(); [EOL] Cleaner cleaner = new Cleaner(validWhitelist); [EOL] assertNotNull(cleaner); [EOL] }
public void testCleanerConstructorWithNullWhitelist() { [EOL] try { [EOL] new Cleaner(null); [EOL] fail("Should have thrown IllegalArgumentException for null whitelist"); [EOL] } catch (IllegalArgumentException e) { [EOL] } [EOL] }
public void testCleanWithNullDocument() { [EOL] try { [EOL] clean(null); [EOL] fail("Should throw IllegalArgumentException for null input"); [EOL] } catch (IllegalArgumentException e) { [EOL] } [EOL] }
public void testCleanWithEmptyDocument() { [EOL] Document dirtyDocument = new Document(""); [EOL] Document result = clean(dirtyDocument); [EOL] assertNotNull("Clean document should not be null", result); [EOL] assertEquals("Clean document should have the same base URI as dirty document", dirtyDocument.baseUri(), result.baseUri()); [EOL] assertTrue("Clean document body should be empty", result.body().childNodeSize() == 0); [EOL] }
public void testCleanWithNonEmptyDocument() { [EOL] Document dirtyDocument = Jsoup.parse("<p>Some <a href='http://example.com'>link</a> with <script>evil()</script> stuff.</p>"); [EOL] Document result = clean(dirtyDocument); [EOL] assertNotNull("Clean document should not be null", result); [EOL] assertEquals("Clean document should have the same base URI as dirty document", dirtyDocument.baseUri(), result.baseUri()); [EOL] assertTrue("Clean document should not contain script tags", result.select("script").isEmpty()); [EOL] assertTrue("Clean document should contain anchor tags", !result.select("a").isEmpty()); [EOL] }
public void testCopySafeNodes_withSafeElement() { [EOL] Element source = new Element(Tag.valueOf("div"), ""); [EOL] Element dest = new Element(Tag.valueOf("p"), ""); [EOL] Element child = new Element(Tag.valueOf("span"), ""); [EOL] source.appendChild(child); [EOL] Cleaner cleaner = new Cleaner(Whitelist.simpleText()); [EOL] cleaner.whitelist.addTags("span"); [EOL] int numDiscarded = cleaner.copySafeNodes(source, dest); [EOL] assertEquals(0, numDiscarded); [EOL] assertEquals(1, dest.childNodeSize()); [EOL] assertTrue(dest.child(0) instanceof Element); [EOL] assertEquals("span", dest.child(0).tagName()); [EOL] }
public void testCopySafeNodes_withUnsafeElement() { [EOL] Element source = new Element(Tag.valueOf("div"), ""); [EOL] Element dest = new Element(Tag.valueOf("p"), ""); [EOL] Element child = new Element(Tag.valueOf("script"), ""); [EOL] source.appendChild(child); [EOL] Cleaner cleaner = new Cleaner(Whitelist.simpleText()); [EOL] int numDiscarded = cleaner.copySafeNodes(source, dest); [EOL] assertEquals(1, numDiscarded); [EOL] assertEquals(0, dest.childNodeSize()); [EOL] }
public void testCopySafeNodes_withTextNode() { [EOL] Element source = new Element(Tag.valueOf("div"), ""); [EOL] Element dest = new Element(Tag.valueOf("p"), ""); [EOL] TextNode textNode = new TextNode("Hello, World!", ""); [EOL] source.appendChild(textNode); [EOL] Cleaner cleaner = new Cleaner(Whitelist.simpleText()); [EOL] int numDiscarded = cleaner.copySafeNodes(source, dest); [EOL] assertEquals(0, numDiscarded); [EOL] assertEquals(1, dest.childNodeSize()); [EOL] assertTrue(dest.child(0) instanceof TextNode); [EOL] assertEquals("Hello, World!", ((TextNode) dest.child(0)).getWholeText()); [EOL] }
public void testCopySafeNodes_withNestedElements() { [EOL] Element source = new Element(Tag.valueOf("div"), ""); [EOL] Element dest = new Element(Tag.valueOf("p"), ""); [EOL] Element safeChild = new Element(Tag.valueOf("span"), ""); [EOL] Element unsafeChild = new Element(Tag.valueOf("script"), ""); [EOL] source.appendChild(safeChild); [EOL] safeChild.appendChild(unsafeChild); [EOL] Cleaner cleaner = new Cleaner(Whitelist.simpleText()); [EOL] cleaner.whitelist.addTags("span"); [EOL] int numDiscarded = cleaner.copySafeNodes(source, dest); [EOL] assertEquals(1, numDiscarded); [EOL] assertEquals(1, dest.childNodeSize()); [EOL] assertTrue(dest.child(0) instanceof Element); [EOL] assertEquals("span", dest.child(0).tagName()); [EOL] assertEquals(0, ((Element) dest.child(0)).childNodeSize()); [EOL] }
public void testCreateSafeElement_AllAttributesSafe() { [EOL] Element sourceEl = new Element(Tag.valueOf("div"), ""); [EOL] sourceEl.attr("safe1", "value1"); [EOL] sourceEl.attr("safe2", "value2"); [EOL] Whitelist whitelist = new Whitelist(); [EOL] whitelist.addTags("div"); [EOL] whitelist.addAttributes("div", "safe1", "safe2"); [EOL] Cleaner cleaner = new Cleaner(whitelist); [EOL] ElementMeta result = cleaner.createSafeElement(sourceEl); [EOL] Element dest = result.getElement(); [EOL] int numDiscarded = result.getNumDiscarded(); [EOL] assertEquals("div", dest.tagName()); [EOL] assertEquals("value1", dest.attr("safe1")); [EOL] assertEquals("value2", dest.attr("safe2")); [EOL] assertEquals(0, numDiscarded); [EOL] }
public void testCreateSafeElement_SomeAttributesUnsafe() { [EOL] Element sourceEl = new Element(Tag.valueOf("div"), ""); [EOL] sourceEl.attr("safe", "value1"); [EOL] sourceEl.attr("unsafe", "value2"); [EOL] Whitelist whitelist = new Whitelist(); [EOL] whitelist.addTags("div"); [EOL] whitelist.addAttributes("div", "safe"); [EOL] Cleaner cleaner = new Cleaner(whitelist); [EOL] ElementMeta result = cleaner.createSafeElement(sourceEl); [EOL] Element dest = result.getElement(); [EOL] int numDiscarded = result.getNumDiscarded(); [EOL] assertEquals("div", dest.tagName()); [EOL] assertEquals("value1", dest.attr("safe")); [EOL] assertFalse(dest.hasAttr("unsafe")); [EOL] assertEquals(1, numDiscarded); [EOL] }
public void testCreateSafeElement_NoAttributes() { [EOL] Element sourceEl = new Element(Tag.valueOf("div"), ""); [EOL] Whitelist whitelist = new Whitelist(); [EOL] whitelist.addTags("div"); [EOL] Cleaner cleaner = new Cleaner(whitelist); [EOL] ElementMeta result = cleaner.createSafeElement(sourceEl); [EOL] Element dest = result.getElement(); [EOL] int numDiscarded = result.getNumDiscarded(); [EOL] assertEquals("div", dest.tagName()); [EOL] assertEquals(0, dest.attributes().size()); [EOL] assertEquals(0, numDiscarded); [EOL] }
public void testCreateSafeElement_WithEnforcedAttributes() { [EOL] Element sourceEl = new Element(Tag.valueOf("div"), ""); [EOL] sourceEl.attr("safe", "value1"); [EOL] Whitelist whitelist = new Whitelist(); [EOL] whitelist.addTags("div"); [EOL] whitelist.addAttributes("div", "safe"); [EOL] whitelist.addEnforcedAttribute("div", "enforced", "enforcedValue"); [EOL] Cleaner cleaner = new Cleaner(whitelist); [EOL] ElementMeta result = cleaner.createSafeElement(sourceEl); [EOL] Element dest = result.getElement(); [EOL] int numDiscarded = result.getNumDiscarded(); [EOL] assertEquals("div", dest.tagName()); [EOL] assertEquals("value1", dest.attr("safe")); [EOL] assertEquals("enforcedValue", dest.attr("enforced")); [EOL] assertEquals(0, numDiscarded); [EOL] }
public void testElementMetaWithValidElement() { [EOL] Element element = new Element(Tag.valueOf("div"), ""); [EOL] int numAttribsDiscarded = 5; [EOL] ElementMeta meta = new ElementMeta(element, numAttribsDiscarded); [EOL] assertEquals(element, meta.el); [EOL] assertEquals(numAttribsDiscarded, meta.numAttribsDiscarded); [EOL] }
public void testAddFirst() { [EOL] Deque<Character> queue = new LinkedList<>(); [EOL] MyClass myClass = new MyClass(queue); [EOL] myClass.addFirst('a'); [EOL] Character first = queue.peekFirst(); [EOL] assert first.equals('a'); [EOL] }
public void addFirst_withEmptyString() { [EOL] String input = ""; [EOL] addFirst(input); [EOL] }
public void addFirst_withSingleCharacter() { [EOL] String input = "a"; [EOL] addFirst(input); [EOL] }
public void addFirst_withMultipleCharacters() { [EOL] String input = "abc"; [EOL] addFirst(input); [EOL] }
public void testCombinatorGreaterThan() { [EOL] Element root = new Element(Tag.valueOf("div"), ""); [EOL] Element child = new Element(Tag.valueOf("span"), ""); [EOL] root.appendChild(child); [EOL] Selector selector = new Selector("div > span", root); [EOL] Elements elements = selector.select(); [EOL] selector.combinator(">"); [EOL] assertEquals(1, elements.size()); [EOL] assertTrue(elements.contains(child)); [EOL] }
public void testCombinatorSpace() { [EOL] Element root = new Element(Tag.valueOf("div"), ""); [EOL] Element child = new Element(Tag.valueOf("span"), ""); [EOL] Element grandChild = new Element(Tag.valueOf("a"), ""); [EOL] child.appendChild(grandChild); [EOL] root.appendChild(child); [EOL] Selector selector = new Selector("div span a", root); [EOL] Elements elements = selector.select(); [EOL] selector.combinator(" "); [EOL] assertEquals(1, elements.size()); [EOL] assertTrue(elements.contains(grandChild)); [EOL] }
public void testCombinatorPlus() { [EOL] Element root = new Element(Tag.valueOf("div"), ""); [EOL] Element sibling1 = new Element(Tag.valueOf("span"), ""); [EOL] Element sibling2 = new Element(Tag.valueOf("a"), ""); [EOL] root.appendChild(sibling1); [EOL] root.appendChild(sibling2); [EOL] Selector selector = new Selector("div + a", root); [EOL] Elements elements = selector.select(); [EOL] selector.combinator("+"); [EOL] assertEquals(1, elements.size()); [EOL] assertTrue(elements.contains(sibling2)); [EOL] }
public void testCombinatorTilde() { [EOL] Element root = new Element(Tag.valueOf("div"), ""); [EOL] Element sibling1 = new Element(Tag.valueOf("span"), ""); [EOL] Element sibling2 = new Element(Tag.valueOf("a"), ""); [EOL] Element sibling3 = new Element(Tag.valueOf("p"), ""); [EOL] root.appendChild(sibling1); [EOL] root.appendChild(sibling2); [EOL] root.appendChild(sibling3); [EOL] Selector selector = new Selector("div ~ p", root); [EOL] Elements elements = selector.select(); [EOL] selector.combinator("~"); [EOL] assertEquals(1, elements.size()); [EOL] assertTrue(elements.contains(sibling3)); [EOL] }
public void testCombinatorIllegalStateException() { [EOL] Element root = new Element(Tag.valueOf("div"), ""); [EOL] Selector selector = new Selector("div ! p", root); [EOL] try { [EOL] selector.combinator("!"); [EOL] fail("IllegalStateException expected"); [EOL] } catch (IllegalStateException e) { [EOL] assertEquals("Unknown combinator: !", e.getMessage()); [EOL] } [EOL] }
public void testFindElementsById() { [EOL] Selector selector = new Selector("#someId", rootElement); [EOL] Elements result = selector.findElements(); [EOL] assertNotNull(result); [EOL] assertFalse(result.isEmpty()); [EOL] assertEquals("Expected ID", "someId", result.first().id()); [EOL] }
public void testFindElementsByClass() { [EOL] Selector selector = new Selector(".someClass", rootElement); [EOL] Elements result = selector.findElements(); [EOL] assertNotNull(result); [EOL] assertFalse(result.isEmpty()); [EOL] assertTrue("Expected class", result.first().classNames().contains("someClass")); [EOL] }
public void testFindElementsByTagName() { [EOL] Selector selector = new Selector("div", rootElement); [EOL] Elements result = selector.findElements(); [EOL] assertNotNull(result); [EOL] assertFalse(result.isEmpty()); [EOL] assertEquals("Expected tag", "div", result.first().tagName()); [EOL] }
public void testFindElementsByAttribute() { [EOL] Selector selector = new Selector("[href]", rootElement); [EOL] Elements result = selector.findElements(); [EOL] assertNotNull(result); [EOL] assertFalse(result.isEmpty()); [EOL] assertTrue("Expected attribute", result.first().hasAttr("href")); [EOL] }
public void testFindAllElements() { [EOL] Selector selector = new Selector("*", rootElement); [EOL] Elements result = selector.findElements(); [EOL] assertNotNull(result); [EOL] assertFalse(result.isEmpty()); [EOL] assertTrue("Expected all elements", result.size() > 0); [EOL] }
public void testFindElementsByIndexLessThan() { [EOL] Selector selector = new Selector(":lt(3)", rootElement); [EOL] Elements result = selector.findElements(); [EOL] assertNotNull(result); [EOL] assertFalse(result.isEmpty()); [EOL] assertTrue("Expected index less than", result.size() < 3); [EOL] }
public void testFindElementsByIndexGreaterThan() { [EOL] Selector selector = new Selector(":gt(1)", rootElement); [EOL] Elements result = selector.findElements(); [EOL] assertNotNull(result); [EOL] assertFalse(result.isEmpty()); [EOL] assertTrue("Expected index greater than", result.size() > 1); [EOL] }
public void testFindElementsByIndexEquals() { [EOL] Selector selector = new Selector(":eq(2)", rootElement); [EOL] Elements result = selector.findElements(); [EOL] assertNotNull(result); [EOL] assertFalse(result.isEmpty()); [EOL] assertEquals("Expected index equals", 2, result.size()); [EOL] }
public void testFindElementsParseException() { [EOL] Selector selector = new Selector("invalid:selector", rootElement); [EOL] try { [EOL] selector.findElements(); [EOL] fail("SelectorParseException expected"); [EOL] } catch (SelectorParseException e) { [EOL] assertEquals("Could not parse query invalid:selector", e.getMessage()); [EOL] } [EOL] }
public void testByAttributeWithEmptyKey() { [EOL] TokenQueue tq = new TokenQueue("]"); [EOL] Element root = new Element(Tag.valueOf("div"), ""); [EOL] Selector selector = new Selector("", root); [EOL] try { [EOL] selector.byAttribute(); [EOL] fail("Expected IllegalArgumentException for empty key"); [EOL] } catch (IllegalArgumentException e) { [EOL] } [EOL] }
public void testByAttributeWithAttributePresenceQuery() { [EOL] TokenQueue tq = new TokenQueue("key]"); [EOL] Element root = new Element(Tag.valueOf("div"), ""); [EOL] root.attr("key", "value"); [EOL] Selector selector = new Selector("key]", root); [EOL] Elements result = selector.byAttribute(); [EOL] assertEquals(1, result.size()); [EOL] assertTrue(result.hasAttr("key")); [EOL] }
public void testByAttributeWithEqualsQuery() { [EOL] TokenQueue tq = new TokenQueue("key=value]"); [EOL] Element root = new Element(Tag.valueOf("div"), ""); [EOL] root.attr("key", "value"); [EOL] Selector selector = new Selector("key=value]", root); [EOL] Elements result = selector.byAttribute(); [EOL] assertEquals(1, result.size()); [EOL] assertEquals("value", result.attr("key")); [EOL] }
public void testByAttributeWithNotEqualsQuery() { [EOL] TokenQueue tq = new TokenQueue("key!=value]"); [EOL] Element root = new Element(Tag.valueOf("div"), ""); [EOL] root.attr("key", "other"); [EOL] Selector selector = new Selector("key!=value]", root); [EOL] Elements result = selector.byAttribute(); [EOL] assertEquals(1, result.size()); [EOL] assertNotEquals("value", result.attr("key")); [EOL] }
public void testByAttributeWithStartsWithQuery() { [EOL] TokenQueue tq = new TokenQueue("key^=val]"); [EOL] Element root = new Element(Tag.valueOf("div"), ""); [EOL] root.attr("key", "value"); [EOL] Selector selector = new Selector("key^=val]", root); [EOL] Elements result = selector.byAttribute(); [EOL] assertEquals(1, result.size()); [EOL] assertTrue(result.attr("key").startsWith("val")); [EOL] }
public void testByAttributeWithEndsWithQuery() { [EOL] TokenQueue tq = new TokenQueue("key$=ue]"); [EOL] Element root = new Element(Tag.valueOf("div"), ""); [EOL] root.attr("key", "value"); [EOL] Selector selector = new Selector("key$=ue]", root); [EOL] Elements result = selector.byAttribute(); [EOL] assertEquals(1, result.size()); [EOL] assertTrue(result.attr("key").endsWith("ue")); [EOL] }
public void testByAttributeWithContainsQuery() { [EOL] TokenQueue tq = new TokenQueue("key*=alu]"); [EOL] Element root = new Element(Tag.valueOf("div"), ""); [EOL] root.attr("key", "value"); [EOL] Selector selector = new Selector("key*=alu]", root); [EOL] Elements result = selector.byAttribute(); [EOL] assertEquals(1, result.size()); [EOL] assertTrue(result.attr("key").contains("alu")); [EOL] }
public void testByAttributeWithInvalidQuery() { [EOL] TokenQueue tq = new TokenQueue("key?=value]"); [EOL] Element root = new Element(Tag.valueOf("div"), ""); [EOL] Selector selector = new Selector("key?=value]", root); [EOL] try { [EOL] selector.byAttribute(); [EOL] fail("Expected SelectorParseException for invalid query"); [EOL] } catch (SelectorParseException e) { [EOL] } [EOL] }
private Elements indexLessThan() { [EOL] return root.getElementsByIndexLessThan(consumeIndex()); [EOL] } [EOL] private Selector(String query, Element root); [EOL] public SelectorParseException(String s); [EOL] public static Elements select(String query, Element root); [EOL] public static Elements select(String query, Iterable<Element> roots); [EOL] private Elements select(); [EOL] private void combinator(String combinator); [EOL] private Elements findElements(); [EOL] private void addElements(Collection<Element> add); [EOL] private void intersectElements(Collection<Element> intersect); [EOL] private Elements byId(); [EOL] private Elements byClass(); [EOL] private Elements byTag(); [EOL] private Elements byAttribute(); [EOL] private Elements allElements(); [EOL] private Elements indexLessThan(); [EOL] private Elements indexGreaterThan(); [EOL] private Elements indexEquals(); [EOL] private int consumeIndex(); [EOL] private static Elements filterForChildren(Collection<Element> parents, Collection<Element> candidates); [EOL] private static Elements filterForDescendants(Collection<Element> parents, Collection<Element> candidates); [EOL] private static Elements filterForAdjacentSiblings(Collection<Element> elements, Collection<Element> candidates); [EOL] private static Elements filterForGeneralSiblings(Collection<Element> elements, Collection<Element> candidates); [EOL] private static Elements filterForSelf(Collection<Element> parents, Collection<Element> candidates); [EOL] String[] combinators=Optional[{ ",", ">", "+", "~", " " }];
public void testIndexGreaterThan() { [EOL] Element root = new Element(Tag.valueOf("div"), ""); [EOL] root.appendElement("span").text("1"); [EOL] root.appendElement("span").text("2").attr("index", "3"); [EOL] root.appendElement("span").text("3").attr("index", "5"); [EOL] Selector selector = new Selector(":gt(2)", root); [EOL] Elements result = selector.indexGreaterThan(); [EOL] assertEquals(1, result.size()); [EOL] assertEquals("3", result.first().text()); [EOL] }
public void testIndexGreaterThan_noMatch() { [EOL] Element root = new Element(Tag.valueOf("div"), ""); [EOL] root.appendElement("span").text("1"); [EOL] root.appendElement("span").text("2").attr("index", "1"); [EOL] Selector selector = new Selector(":gt(2)", root); [EOL] Elements result = selector.indexGreaterThan(); [EOL] assertTrue(result.isEmpty()); [EOL] }
public void testIndexGreaterThan_invalidIndex() { [EOL] Element root = new Element(Tag.valueOf("div"), ""); [EOL] root.appendElement("span").text("1"); [EOL] root.appendElement("span").text("2").attr("index", "not-a-number"); [EOL] Selector selector = new Selector(":gt(2)", root); [EOL] try { [EOL] Elements result = selector.indexGreaterThan(); [EOL] fail("Expected SelectorParseException"); [EOL] } catch (SelectorParseException e) { [EOL] } [EOL] }
public void testConsumeIndexWithNumericInput() { [EOL] TokenQueue tq = new TokenQueue("123)"); [EOL] int result = tq.consumeIndex(); [EOL] assertEquals(123, result); [EOL] }
public void testConsumeIndexWithNonNumericInput() { [EOL] TokenQueue tq = new TokenQueue("abc)"); [EOL] try { [EOL] tq.consumeIndex(); [EOL] fail("Should have thrown an exception for non-numeric input"); [EOL] } catch (SelectorParseException e) { [EOL] } [EOL] }
public void testConsumeIndexWithEmptyInput() { [EOL] TokenQueue tq = new TokenQueue(")"); [EOL] try { [EOL] tq.consumeIndex(); [EOL] fail("Should have thrown an exception for empty input"); [EOL] } catch (SelectorParseException e) { [EOL] } [EOL] }
public void testFilterForAdjacentSiblings_noSiblings() { [EOL] Elements elements = new Elements(); [EOL] Elements candidates = new Elements(); [EOL] Elements result = filterForAdjacentSiblings(elements, candidates); [EOL] assertTrue(result.isEmpty()); [EOL] }
public void testFilterForAdjacentSiblings_withNonAdjacentSiblings() { [EOL] Element parent = new Element(Tag.valueOf("div"), ""); [EOL] Element e1 = new Element(Tag.valueOf("p"), "").appendTo(parent); [EOL] Element e2 = new Element(Tag.valueOf("span"), "").appendTo(parent); [EOL] Element candidate = new Element(Tag.valueOf("a"), "").appendTo(parent); [EOL] Elements elements = new Elements(); [EOL] elements.add(e1); [EOL] Elements candidates = new Elements(); [EOL] candidates.add(candidate); [EOL] Elements result = filterForAdjacentSiblings(elements, candidates); [EOL] assertTrue(result.isEmpty()); [EOL] }
public void testFilterForAdjacentSiblings_withAdjacentSiblings() { [EOL] Element parent = new Element(Tag.valueOf("div"), ""); [EOL] Element e1 = new Element(Tag.valueOf("p"), "").appendTo(parent); [EOL] Element candidate = new Element(Tag.valueOf("a"), "").appendTo(parent); [EOL] Elements elements = new Elements(); [EOL] elements.add(e1); [EOL] Elements candidates = new Elements(); [EOL] candidates.add(candidate); [EOL] Elements result = filterForAdjacentSiblings(elements, candidates); [EOL] assertEquals(1, result.size()); [EOL] assertTrue(result.contains(candidate)); [EOL] }
public void testFilterForAdjacentSiblings_withMixedSiblings() { [EOL] Element parent = new Element(Tag.valueOf("div"), ""); [EOL] Element e1 = new Element(Tag.valueOf("p"), "").appendTo(parent); [EOL] Element nonAdjacent = new Element(Tag.valueOf("span"), "").appendTo(parent); [EOL] Element candidate = new Element(Tag.valueOf("a"), "").appendTo(parent); [EOL] Elements elements = new Elements(); [EOL] elements.add(e1); [EOL] Elements candidates = new Elements(); [EOL] candidates.add(nonAdjacent); [EOL] candidates.add(candidate); [EOL] Elements result = filterForAdjacentSiblings(elements, candidates); [EOL] assertEquals(1, result.size()); [EOL] assertTrue(result.contains(candidate)); [EOL] assertFalse(result.contains(nonAdjacent)); [EOL] }
public void testTextNodeCreationWithNonNullTextAndBaseUri() { [EOL] String text = "Sample text"; [EOL] String baseUri = "http://example.com"; [EOL] TextNode textNode = new TextNode(text, baseUri); [EOL] assertEquals(text, textNode.attributes.get("text")); [EOL] assertEquals(baseUri, textNode.getBaseUri()); [EOL] }
public void testTextNodeCreationWithNullTextAndBaseUri() { [EOL] String text = null; [EOL] String baseUri = "http://example.com"; [EOL] TextNode textNode = new TextNode(text, baseUri); [EOL] assertNull(textNode.attributes.get("text")); [EOL] assertEquals(baseUri, textNode.getBaseUri()); [EOL] }
public void testTextNodeCreationWithNonNullTextAndNullBaseUri() { [EOL] String text = "Sample text"; [EOL] String baseUri = null; [EOL] TextNode textNode = new TextNode(text, baseUri); [EOL] assertEquals(text, textNode.attributes.get("text")); [EOL] assertNull(textNode.getBaseUri()); [EOL] }
public void testTextNodeCreationWithEmptyTextAndBaseUri() { [EOL] String text = ""; [EOL] String baseUri = "http://example.com"; [EOL] TextNode textNode = new TextNode(text, baseUri); [EOL] assertEquals(text, textNode.attributes.get("text")); [EOL] assertEquals(baseUri, textNode.getBaseUri()); [EOL] }
public void testTextReturnsOuterHtml() { [EOL] Document doc = Jsoup.parse("<div>Hello world</div>"); [EOL] Element div = doc.select("div").first(); [EOL] String text = div.text(); [EOL] assertEquals("Hello world", text); [EOL] }
public void testTextNodeWithEmptyString() { [EOL] TextNode node = new TextNode(""); [EOL] TextNode result = node.text(""); [EOL] assertEquals("", result.attributes.get("text")); [EOL] }
public void testTextNodeWithNonEmptyString() { [EOL] TextNode node = new TextNode(""); [EOL] TextNode result = node.text("some text"); [EOL] assertEquals("some text", result.attributes.get("text")); [EOL] }
public void testGetWholeText_WhenTextKeyPresent() { [EOL] Attributes attributes = new Attributes(); [EOL] attributes.put(TEXT_KEY, "Sample Text"); [EOL] String wholeText = attributes.getWholeText(); [EOL] assertEquals("Sample Text", wholeText); [EOL] }
public void testGetWholeText_WhenTextKeyAbsent() { [EOL] Attributes attributes = new Attributes(); [EOL] String wholeText = attributes.getWholeText(); [EOL] assertNull(wholeText); [EOL] }
public void testIsBlankWithEmptyString() { [EOL] TextNode textNode = new TextNode(""); [EOL] boolean result = textNode.isBlank(); [EOL] assert result; [EOL] } [EOL] public void testIsBlankWithWhitespace() { [EOL] TextNode textNode = new TextNode("   "); [EOL] boolean result = textNode.isBlank(); [EOL] assert result; [EOL] } [EOL] public void testIsBlankWithNonWhitespaceCharacters() { [EOL] TextNode textNode = new TextNode("text"); [EOL] boolean result = textNode.isBlank(); [EOL] assert !result; [EOL] }
public void testOuterHtmlWithNonElementParent() { [EOL] TextNode textNode = new TextNode("Some text", ""); [EOL] StringBuilder accum = new StringBuilder(); [EOL] textNode.outerHtml(accum); [EOL] String result = accum.toString(); [EOL] assertEquals("Some text", result); [EOL] }
public void testOuterHtmlWithElementParentPreserveWhitespace() { [EOL] Element parent = new Element(Tag.valueOf("div"), ""); [EOL] parent.attr("preserveWhitespace", "true"); [EOL] TextNode textNode = new TextNode("Some text", ""); [EOL] textNode.setParentNode(parent); [EOL] StringBuilder accum = new StringBuilder(); [EOL] textNode.outerHtml(accum); [EOL] String result = accum.toString(); [EOL] assertEquals("Some text", result); [EOL] }
public void testOuterHtmlWithElementParentNormaliseWhitespace() { [EOL] Element parent = new Element(Tag.valueOf("div"), ""); [EOL] TextNode textNode = new TextNode(" Some   text ", ""); [EOL] textNode.setParentNode(parent); [EOL] StringBuilder accum = new StringBuilder(); [EOL] textNode.outerHtml(accum); [EOL] String result = accum.toString(); [EOL] assertEquals("Some text", result); [EOL] }
public void testOuterHtmlWithElementParentAndSibling() { [EOL] Element parent = new Element(Tag.valueOf("div"), ""); [EOL] parent.appendChild(new Element(Tag.valueOf("p"), "")); [EOL] TextNode textNode = new TextNode("Some text", ""); [EOL] textNode.setParentNode(parent); [EOL] StringBuilder accum = new StringBuilder(); [EOL] textNode.outerHtml(accum); [EOL] String result = accum.toString(); [EOL] assertTrue(result.startsWith("    Some text")); [EOL] }
public void testCreateFromEncodedWithRegularString() { [EOL] String encodedText = "Hello World"; [EOL] String baseUri = "http://example.com"; [EOL] TextNode result = TextNode.createFromEncoded(encodedText, baseUri); [EOL] assertEquals("Hello World", result.text()); [EOL] assertEquals(baseUri, result.baseUri()); [EOL] }
public void testCreateFromEncodedWithEncodedString() { [EOL] String encodedText = "Hello &amp; World"; [EOL] String baseUri = "http://example.com"; [EOL] TextNode result = TextNode.createFromEncoded(encodedText, baseUri); [EOL] assertEquals("Hello & World", result.text()); [EOL] assertEquals(baseUri, result.baseUri()); [EOL] }
public void testCreateFromEncodedWithNullBaseUri() { [EOL] String encodedText = "Hello World"; [EOL] String baseUri = null; [EOL] TextNode result = TextNode.createFromEncoded(encodedText, baseUri); [EOL] assertEquals("Hello World", result.text()); [EOL] assertNull(result.baseUri()); [EOL] }
public void testCreateFromEncodedWithEmptyString() { [EOL] String encodedText = ""; [EOL] String baseUri = "http://example.com"; [EOL] TextNode result = TextNode.createFromEncoded(encodedText, baseUri); [EOL] assertEquals("", result.text()); [EOL] assertEquals(baseUri, result.baseUri()); [EOL] }
public void testNormaliseWhitespace_SingleSpace() { [EOL] String input = "This is a test."; [EOL] String expected = "This is a test."; [EOL] String result = normaliseWhitespace(input); [EOL] assertEquals(expected, result); [EOL] }
public void testNormaliseWhitespace_MultipleSpaces() { [EOL] String input = "This  is  a  test."; [EOL] String expected = "This is a test."; [EOL] String result = normaliseWhitespace(input); [EOL] assertEquals(expected, result); [EOL] }
public void testNormaliseWhitespace_NewLines() { [EOL] String input = "This is a [EOL] test."; [EOL] String expected = "This is a test."; [EOL] String result = normaliseWhitespace(input); [EOL] assertEquals(expected, result); [EOL] }
public void testNormaliseWhitespace_CarriageReturnNewLine() { [EOL] String input = "This is a\r\ntest."; [EOL] String expected = "This is a test."; [EOL] String result = normaliseWhitespace(input); [EOL] assertEquals(expected, result); [EOL] }
public void testNormaliseWhitespace_CarriageReturn() { [EOL] String input = "This is a\rsingle line."; [EOL] String expected = "This is a single line."; [EOL] String result = normaliseWhitespace(input); [EOL] assertEquals(expected, result); [EOL] }
public void testNormaliseWhitespace_NewLine() { [EOL] String input = "This is a\ntest."; [EOL] String expected = "This is a test."; [EOL] String result = normaliseWhitespace(input); [EOL] assertEquals(expected, result); [EOL] }
public void testNormaliseWhitespace_Tab() { [EOL] String input = "This\tis\ta\ttest."; [EOL] String expected = "This is a test."; [EOL] String result = normaliseWhitespace(input); [EOL] assertEquals(expected, result); [EOL] }
public void testNormaliseWhitespace_MixedWhitespace() { [EOL] String input = "This  is\ta\r\nmixed\t \rtest."; [EOL] String expected = "This is a mixed test."; [EOL] String result = normaliseWhitespace(input); [EOL] assertEquals(expected, result); [EOL] }
public void testAttrWithValidArguments() { [EOL] Element element = new Element(Tag.valueOf("div"), ""); [EOL] String attributeKey = "key"; [EOL] String attributeValue = "value"; [EOL] Element result = element.attr(attributeKey, attributeValue); [EOL] assertEquals(element, result); [EOL] assertEquals(attributeValue, element.attr(attributeKey)); [EOL] }
public void testChildWithValidIndex() { [EOL] Document doc = Jsoup.parse("<div><p>Hello</p><p>World</p></div>"); [EOL] Element div = doc.select("div").first(); [EOL] Element firstChild = div.child(0); [EOL] Element secondChild = div.child(1); [EOL] assertEquals("p", firstChild.tagName()); [EOL] assertEquals("Hello", firstChild.text()); [EOL] assertEquals("p", secondChild.tagName()); [EOL] assertEquals("World", secondChild.text()); [EOL] }
public void testChildWithInvalidIndex() { [EOL] Document doc = Jsoup.parse("<div><p>Hello</p><p>World</p></div>"); [EOL] Element div = doc.select("div").first(); [EOL] try { [EOL] div.child(2); [EOL] fail("IndexOutOfBoundsException should have been thrown"); [EOL] } catch (IndexOutOfBoundsException e) { [EOL] } [EOL] }
public void testChildWithNegativeIndex() { [EOL] Document doc = Jsoup.parse("<div><p>Hello</p><p>World</p></div>"); [EOL] Element div = doc.select("div").first(); [EOL] try { [EOL] div.child(-1); [EOL] fail("IndexOutOfBoundsException should have been thrown"); [EOL] } catch (IndexOutOfBoundsException e) { [EOL] } [EOL] }
public void testPrependElementWithValidTag() { [EOL] Document doc = Jsoup.parse("<div></div>"); [EOL] Element div = doc.select("div").first(); [EOL] Element prepended = div.prependElement("span"); [EOL] assertNotNull(prepended); [EOL] assertEquals("span", prepended.tagName()); [EOL] assertEquals("<span></span><div></div>", doc.body().html()); [EOL] }
public void testPrependElementWithEmptyTag() { [EOL] Document doc = Jsoup.parse("<div></div>"); [EOL] Element div = doc.select("div").first(); [EOL] try { [EOL] div.prependElement(""); [EOL] fail("Should throw IllegalArgumentException for empty tag name"); [EOL] } catch (IllegalArgumentException e) { [EOL] } [EOL] }
public void testPrependElementToEmptyDoc() { [EOL] Document doc = new Document(""); [EOL] Element prepended = doc.prependElement("p"); [EOL] assertNotNull(prepended); [EOL] assertEquals("p", prepended.tagName()); [EOL] assertEquals("<p></p>", doc.html()); [EOL] }
public void testWrapWithEmptyHtml() { [EOL] Element element = new Element(Tag.valueOf("div"), ""); [EOL] try { [EOL] element.wrap(""); [EOL] fail("Should have thrown IllegalArgumentException for empty html"); [EOL] } catch (IllegalArgumentException e) { [EOL] } [EOL] }
public void testWrapWithValidHtml() { [EOL] Element element = new Element(Tag.valueOf("p"), ""); [EOL] Element wrappedElement = element.wrap("<div></div>"); [EOL] assertNotNull("Wrapped element should not be null", wrappedElement); [EOL] assertEquals("Wrapped element should be the original element", element, wrappedElement); [EOL] assertEquals("The new parent should be a div", "div", wrappedElement.parent().tagName()); [EOL] }
public void testWrapWithNoChildrenInHtml() { [EOL] Element element = new Element(Tag.valueOf("p"), ""); [EOL] Element wrappedElement = element.wrap("<div></div>"); [EOL] assertNull("Wrapped element should be null when there are no children in the html", wrappedElement.parent()); [EOL] }
public void testWrapWithMultipleChildrenInHtml() { [EOL] Element element = new Element(Tag.valueOf("p"), ""); [EOL] Element wrappedElement = element.wrap("<div><span></span><em></em></div>"); [EOL] assertNotNull("Wrapped element should not be null", wrappedElement); [EOL] assertEquals("Wrapped element should be the original element", element, wrappedElement); [EOL] assertEquals("The new parent should be a div", "div", wrappedElement.parent().tagName()); [EOL] assertEquals("The new parent should have two children", 2, wrappedElement.siblingElements().size()); [EOL] }
public void testGetDeepChildWithNoChildren() { [EOL] Element parent = new Element(Tag.valueOf("div"), ""); [EOL] Element result = getDeepChild(parent); [EOL] assertSame("The method should return the same element when there are no children", parent, result); [EOL] } [EOL] public void testGetDeepChildWithNestedChildren() { [EOL] Element parent = new Element(Tag.valueOf("div"), ""); [EOL] Element child1 = parent.appendElement("span"); [EOL] Element child2 = child1.appendElement("a"); [EOL] Element result = getDeepChild(parent); [EOL] assertSame("The method should return the deepest child", child2, result); [EOL] }
public void testPreviousElementSibling_withPreviousSibling() { [EOL] Document doc = Jsoup.parse("<div><p>First</p><p>Second</p><div>"); [EOL] Element secondElement = doc.select("p").get(1); [EOL] Element result = secondElement.previousElementSibling(); [EOL] assertNotNull(result); [EOL] assertEquals("First", result.text()); [EOL] }
public void testPreviousElementSibling_withNoPreviousSibling() { [EOL] Document doc = Jsoup.parse("<div><p>Only</p><div>"); [EOL] Element onlyElement = doc.select("p").get(0); [EOL] Element result = onlyElement.previousElementSibling(); [EOL] assertNull(result); [EOL] }
public void testPreviousElementSibling_withNullParent() { [EOL] Element orphanElement = new Element(Tag.valueOf("p"), ""); [EOL] try { [EOL] orphanElement.previousElementSibling(); [EOL] fail("Should have thrown an exception due to null parent"); [EOL] } catch (NullPointerException e) { [EOL] } [EOL] }
public void testGetElementsByAttributeValue_WithExistingAttributeAndValue() { [EOL] Document doc = Jsoup.parse("<div id='1' class='foo'></div><div id='2'></div>"); [EOL] Elements elements = doc.getElementsByAttributeValue("class", "foo"); [EOL] assertEquals(1, elements.size()); [EOL] assertEquals("1", elements.first().id()); [EOL] }
public void testGetElementsByAttributeValue_WithNonExistingAttribute() { [EOL] Document doc = Jsoup.parse("<div id='1' class='foo'></div><div id='2'></div>"); [EOL] Elements elements = doc.getElementsByAttributeValue("nonexistent", "foo"); [EOL] assertTrue(elements.isEmpty()); [EOL] }
public void testGetElementsByAttributeValue_WithEmptyValue() { [EOL] Document doc = Jsoup.parse("<div id='1' class=''></div><div id='2' class='foo'></div>"); [EOL] Elements elements = doc.getElementsByAttributeValue("class", ""); [EOL] assertEquals(1, elements.size()); [EOL] assertEquals("1", elements.first().id()); [EOL] }
public void testGetElementsByAttributeValue_WithNullKey() { [EOL] Document doc = Jsoup.parse("<div id='1' class='foo'></div><div id='2'></div>"); [EOL] try { [EOL] doc.getElementsByAttributeValue(null, "foo"); [EOL] fail("Should throw IllegalArgumentException for null key"); [EOL] } catch (IllegalArgumentException e) { [EOL] } [EOL] }
public void testGetElementsByAttributeValue_WithNullValue() { [EOL] Document doc = Jsoup.parse("<div id='1' class='foo'></div><div id='2'></div>"); [EOL] try { [EOL] doc.getElementsByAttributeValue("class", null); [EOL] fail("Should throw IllegalArgumentException for null value"); [EOL] } catch (IllegalArgumentException e) { [EOL] } [EOL] }
public void testGetElementsByAttributeValueNot_WithExistingAttributeAndValue() { [EOL] Document doc = Jsoup.parse("<div id='1' class='one'><div id='2' class='two'></div></div>"); [EOL] Elements elements = doc.getElementsByAttributeValueNot("class", "one"); [EOL] assertEquals(1, elements.size()); [EOL] assertEquals("2", elements.first().id()); [EOL] }
public void testGetElementsByAttributeValueNot_WithNonExistingAttribute() { [EOL] Document doc = Jsoup.parse("<div id='1' class='one'></div>"); [EOL] Elements elements = doc.getElementsByAttributeValueNot("nonexistent", "value"); [EOL] assertEquals(1, elements.size()); [EOL] assertEquals("1", elements.first().id()); [EOL] }
public void testGetElementsByAttributeValueNot_WithEmptyValue() { [EOL] Document doc = Jsoup.parse("<div id='1' class=''></div><div id='2'></div>"); [EOL] Elements elements = doc.getElementsByAttributeValueNot("class", ""); [EOL] assertEquals(1, elements.size()); [EOL] assertEquals("2", elements.first().id()); [EOL] }
public void testGetElementsByAttributeValueNot_WithAttributeValueAsEmpty() { [EOL] Document doc = Jsoup.parse("<div id='1' class='one'></div><div id='2' class=''></div>"); [EOL] Elements elements = doc.getElementsByAttributeValueNot("class", "one"); [EOL] assertEquals(1, elements.size()); [EOL] assertEquals("2", elements.first().id()); [EOL] }
public void testGetElementsByAttributeValueStarting_EmptyDocument() { [EOL] Document doc = Jsoup.parse(""); [EOL] Elements elements = doc.getElementsByAttributeValueStarting("key", "valuePrefix"); [EOL] assertTrue(elements.isEmpty()); [EOL] } [EOL] public void testGetElementsByAttributeValueStarting_NoMatching() { [EOL] Document doc = Jsoup.parse("<div key='value'></div>"); [EOL] Elements elements = doc.getElementsByAttributeValueStarting("key", "valuePrefix"); [EOL] assertTrue(elements.isEmpty()); [EOL] } [EOL] public void testGetElementsByAttributeValueStarting_ExactMatch() { [EOL] Document doc = Jsoup.parse("<div key='valuePrefix'></div>"); [EOL] Elements elements = doc.getElementsByAttributeValueStarting("key", "valuePrefix"); [EOL] assertEquals(1, elements.size()); [EOL] assertEquals("div", elements.first().tagName()); [EOL] } [EOL] public void testGetElementsByAttributeValueStarting_PrefixMatch() { [EOL] Document doc = Jsoup.parse("<div key='valuePrefixExtra'></div>"); [EOL] Elements elements = doc.getElementsByAttributeValueStarting("key", "valuePrefix"); [EOL] assertEquals(1, elements.size()); [EOL] assertEquals("div", elements.first().tagName()); [EOL] } [EOL] public void testGetElementsByAttributeValueStarting_MultipleMatches() { [EOL] Document doc = Jsoup.parse("<div key='valuePrefix'></div><span key='valuePrefixExtra'></span>"); [EOL] Elements elements = doc.getElementsByAttributeValueStarting("key", "valuePrefix"); [EOL] assertEquals(2, elements.size()); [EOL] } [EOL] public void testGetElementsByAttributeValueStarting_CaseSensitive() { [EOL] Document doc = Jsoup.parse("<div key='valueprefix'></div>"); [EOL] Elements elements = doc.getElementsByAttributeValueStarting("key", "valuePrefix"); [EOL] assertTrue(elements.isEmpty()); [EOL] } [EOL] public void testGetElementsByAttributeValueStarting_DifferentKey() { [EOL] Document doc = Jsoup.parse("<div key='valuePrefix'></div>"); [EOL] Elements elements = doc.getElementsByAttributeValueStarting("differentKey", "valuePrefix"); [EOL] assertTrue(elements.isEmpty()); [EOL] }
public void testGetElementsByAttributeValueStarting_SpecialCharacters() { [EOL] Document doc = Jsoup.parse("<div key='value:Prefix;'></div>"); [EOL] Elements elements = doc.getElementsByAttributeValueStarting("key", "value:"); [EOL] assertEquals(1, elements.size()); [EOL] assertEquals("div", elements.first().tagName()); [EOL] }
public void testGetElementsByAttributeValueStarting_EmptyValuePrefix() { [EOL] Document doc = Jsoup.parse("<div key=''></div>"); [EOL] Elements elements = doc.getElementsByAttributeValueStarting("key", ""); [EOL] assertEquals(1, elements.size()); [EOL] assertEquals("div", elements.first().tagName()); [EOL] }
public void testGetElementsByAttributeValueStarting_NullValuePrefix() { [EOL] Document doc = Jsoup.parse("<div key='value'></div>"); [EOL] try { [EOL] doc.getElementsByAttributeValueStarting("key", null); [EOL] fail("Should throw IllegalArgumentException"); [EOL] } catch (IllegalArgumentException e) { [EOL] } [EOL] }
public void testGetElementsByAttributeValueStarting_NullKey() { [EOL] Document doc = Jsoup.parse("<div key='valuePrefix'></div>"); [EOL] try { [EOL] doc.getElementsByAttributeValueStarting(null, "valuePrefix"); [EOL] fail("Should throw IllegalArgumentException"); [EOL] } catch (IllegalArgumentException e) { [EOL] } [EOL] }
public void testGetElementsByAttributeValueEnding_WithExistingSuffix() { [EOL] Document doc = Jsoup.parse("<div id='1' class='one' title='the end'></div>" + [EOL] "<div id='2' class='two' title='end'></div>"); [EOL] Elements elements = doc.getElementsByAttributeValueEnding("title", "end"); [EOL] assertEquals(2, elements.size()); [EOL] assertEquals("1", elements.get(0).id()); [EOL] assertEquals("2", elements.get(1).id()); [EOL] }
public void testGetElementsByAttributeValueEnding_WithNonExistingSuffix() { [EOL] Document doc = Jsoup.parse("<div id='1' class='one' title='the end'></div>" + [EOL] "<div id='2' class='two' title='end'></div>"); [EOL] Elements elements = doc.getElementsByAttributeValueEnding("title", "start"); [EOL] assertEquals(0, elements.size()); [EOL] }
public void testGetElementsByAttributeValueEnding_WithEmptyDocument() { [EOL] Document doc = Jsoup.parse(""); [EOL] Elements elements = doc.getElementsByAttributeValueEnding("title", "end"); [EOL] assertEquals(0, elements.size()); [EOL] }
public void testGetElementsByIndexLessThan_Zero() { [EOL] Document doc = Jsoup.parse("<div><p>Hello</p><p>World</p></div>"); [EOL] Elements elements = doc.getElementsByIndexLessThan(0); [EOL] assertTrue(elements.isEmpty()); [EOL] }
public void testGetElementsByIndexLessThan_PositiveIndex() { [EOL] Document doc = Jsoup.parse("<div><p>Hello</p><p>World</p></div>"); [EOL] Elements elements = doc.getElementsByIndexLessThan(2); [EOL] assertEquals(1, elements.size()); [EOL] assertEquals("Hello", elements.get(0).text()); [EOL] }
public void testGetElementsByIndexLessThan_NegativeIndex() { [EOL] Document doc = Jsoup.parse("<div><p>Hello</p><p>World</p></div>"); [EOL] Elements elements = doc.getElementsByIndexLessThan(-1); [EOL] assertTrue(elements.isEmpty()); [EOL] }
public void testGetElementsByIndexGreaterThan_ValidIndex() { [EOL] Document doc = Jsoup.parse("<div><p>First</p><p>Second</p><div>Third</div></div>"); [EOL] Elements elements = doc.getElementsByIndexGreaterThan(0); [EOL] assertEquals(2, elements.size()); [EOL] assertEquals("Second", elements.get(0).text()); [EOL] assertEquals("Third", elements.get(1).text()); [EOL] }
public void testGetElementsByIndexGreaterThan_NegativeIndex() { [EOL] Document doc = Jsoup.parse("<div><p>First</p><p>Second</p><div>Third</div></div>"); [EOL] Elements elements = doc.getElementsByIndexGreaterThan(-1); [EOL] assertEquals(3, elements.size()); [EOL] assertEquals("First", elements.get(0).text()); [EOL] assertEquals("Second", elements.get(1).text()); [EOL] assertEquals("Third", elements.get(2).text()); [EOL] }
public void testGetElementsByIndexGreaterThan_IndexEqualToSize() { [EOL] Document doc = Jsoup.parse("<div><p>First</p><p>Second</p><div>Third</div></div>"); [EOL] Elements elements = doc.getElementsByIndexGreaterThan(2); [EOL] assertTrue(elements.isEmpty()); [EOL] }
public void testGetElementsByIndexGreaterThan_IndexGreaterThanSize() { [EOL] Document doc = Jsoup.parse("<div><p>First</p><p>Second</p><div>Third</div></div>"); [EOL] Elements elements = doc.getElementsByIndexGreaterThan(3); [EOL] assertTrue(elements.isEmpty()); [EOL] }
public void testGetAllElements_EmptyDocument() { [EOL] Document doc = Jsoup.parse(""); [EOL] Elements allElements = doc.getAllElements(); [EOL] assertNotNull(allElements); [EOL] assertEquals(1, allElements.size()); // Only the document itself should be present [EOL] }
public void testGetAllElements_SingleElementDocument() { [EOL] Document doc = Jsoup.parse("<div></div>"); [EOL] Elements allElements = doc.getAllElements(); [EOL] assertNotNull(allElements); [EOL] assertEquals(2, allElements.size()); // Document and the div [EOL] }
public void testGetAllElements_MultipleElementsDocument() { [EOL] Document doc = Jsoup.parse("<div><p></p></div><span></span>"); [EOL] Elements allElements = doc.getAllElements(); [EOL] assertNotNull(allElements); [EOL] assertEquals(4, allElements.size()); // Document, div, p, and span [EOL] }
public void testValForTextarea() { [EOL] Document doc = Jsoup.parse("<textarea>Hello</textarea>"); [EOL] Element textarea = doc.select("textarea").first(); [EOL] String result = textarea.val(); [EOL] assertEquals("Hello", result); [EOL] }
public void testValForInput() { [EOL] Document doc = Jsoup.parse("<input value='Hello'/>"); [EOL] Element input = doc.select("input").first(); [EOL] String result = input.val(); [EOL] assertEquals("Hello", result); [EOL] }
public void testValOnTextarea() { [EOL] Element textarea = new Element(Tag.valueOf("textarea"), ""); [EOL] textarea.val("Some text"); [EOL] assertEquals("Some text", textarea.text()); [EOL] }
public void testValOnNonTextarea() { [EOL] Element input = new Element(Tag.valueOf("input"), ""); [EOL] input.val("Some value"); [EOL] assertEquals("Some value", input.attr("value")); [EOL] }
public void testParserWithNonNullHtmlAndBaseUriForDocument() { [EOL] String html = "<html><head><title>Test</title></head><body><p>Hello</p></body></html>"; [EOL] String baseUri = "http://example.com/"; [EOL] Parser parser = new Parser(html, baseUri, false); [EOL] assertNotNull(parser.getDocument()); [EOL] assertEquals(baseUri, parser.getDocument().baseUri()); [EOL] assertFalse(parser.getStack().isEmpty()); [EOL] assertEquals(parser.getStack().getFirst().nodeName(), "html"); [EOL] }
public void testParserWithNonNullHtmlAndBaseUriForBodyFragment() { [EOL] String htmlFragment = "<div><p>Hello</p></div>"; [EOL] String baseUri = "http://example.com/"; [EOL] Parser parser = new Parser(htmlFragment, baseUri, true); [EOL] assertNotNull(parser.getDocument()); [EOL] assertEquals(baseUri, parser.getDocument().baseUri()); [EOL] assertFalse(parser.getStack().isEmpty()); [EOL] assertEquals(parser.getStack().getFirst().nodeName(), "body"); [EOL] }
public void testParserWithNullHtmlShouldThrowException() { [EOL] String baseUri = "http://example.com/"; [EOL] try { [EOL] new Parser(null, baseUri, false); [EOL] fail("Should have thrown IllegalArgumentException"); [EOL] } catch (IllegalArgumentException e) { [EOL] } [EOL] }
public void testParserWithNullBaseUriShouldThrowException() { [EOL] String html = "<html><head><title>Test</title></head><body><p>Hello</p></body></html>"; [EOL] try { [EOL] new Parser(html, null, false); [EOL] fail("Should have thrown IllegalArgumentException"); [EOL] } catch (IllegalArgumentException e) { [EOL] } [EOL] }
public void testParseWithEmptyString() { [EOL] Document result = Jsoup.parse("", "http://example.com"); [EOL] assertNotNull(result); [EOL] assertEquals("http://example.com", result.baseUri()); [EOL] assertTrue(result.children().isEmpty()); [EOL] } [EOL] public void testParseWithSimpleHtml() { [EOL] String html = "<p>Hello, World!</p>"; [EOL] Document result = Jsoup.parse(html, "http://example.com"); [EOL] assertNotNull(result); [EOL] assertEquals("http://example.com", result.baseUri()); [EOL] assertEquals("Hello, World!", result.select("p").first().text()); [EOL] } [EOL] public void testParseWithComplexHtml() { [EOL] String html = "<div><p>Hello, World!</p><a href='http://example.net'>Example</a></div>"; [EOL] Document result = Jsoup.parse(html, "http://example.com"); [EOL] assertNotNull(result); [EOL] assertEquals("http://example.com", result.baseUri()); [EOL] assertEquals("Hello, World!", result.select("p").first().text()); [EOL] assertEquals("http://example.net", result.select("a").first().attr("href")); [EOL] } [EOL] public void testParseWithBaseUri() { [EOL] String html = "<a href='/relative'>Relative Link</a>"; [EOL] Document result = Jsoup.parse(html, "http://example.com"); [EOL] assertNotNull(result); [EOL] assertEquals("http://example.com/relative", result.select("a").first().absUrl("href")); [EOL] }
public void testParseWithComment() { [EOL] TokenQueue tq = new TokenQueue("<!-- Comment -->"); [EOL] Parser parser = new Parser(tq); [EOL] Document doc = parser.parse(); [EOL] }
public void testParseWithCdata() { [EOL] TokenQueue tq = new TokenQueue("<![CDATA[data]]>"); [EOL] Parser parser = new Parser(tq); [EOL] Document doc = parser.parse(); [EOL] }
public void testParseWithXmlDecl() { [EOL] TokenQueue tq = new TokenQueue("<?xml version=\"1.0\"?>"); [EOL] Parser parser = new Parser(tq); [EOL] Document doc = parser.parse(); [EOL] }
public void testParseWithDocType() { [EOL] TokenQueue tq = new TokenQueue("<!DOCTYPE html>"); [EOL] Parser parser = new Parser(tq); [EOL] Document doc = parser.parse(); [EOL] }
public void testParseWithEndTag() { [EOL] TokenQueue tq = new TokenQueue("</div>"); [EOL] Parser parser = new Parser(tq); [EOL] Document doc = parser.parse(); [EOL] }
public void testParseWithStartTag() { [EOL] TokenQueue tq = new TokenQueue("<div>"); [EOL] Parser parser = new Parser(tq); [EOL] Document doc = parser.parse(); [EOL] }
public void testParseWithTextNode() { [EOL] TokenQueue tq = new TokenQueue("Some text node"); [EOL] Parser parser = new Parser(tq); [EOL] Document doc = parser.parse(); [EOL] }
public void testParseEndTagWithValidTag() { [EOL] TokenQueue tq = new TokenQueue("</validTag>"); [EOL] parseEndTag(tq); [EOL] } [EOL] public void testParseEndTagWithEmptyTag() { [EOL] TokenQueue tq = new TokenQueue("</>"); [EOL] parseEndTag(tq); [EOL] } [EOL] public void testParseEndTagWithWhitespace() { [EOL] TokenQueue tq = new TokenQueue("</   >"); [EOL] parseEndTag(tq); [EOL] }

public void testParseStartTag_EmptyTagName() { [EOL] TokenQueue tq = new TokenQueue("<"); [EOL] parseStartTag(); [EOL] } [EOL] public void testParseStartTag_NonEmptyTagName() { [EOL] TokenQueue tq = new TokenQueue("<div"); [EOL] parseStartTag(); [EOL] } [EOL] public void testParseStartTag_WithAttributes() { [EOL] TokenQueue tq = new TokenQueue("<div id='test'>"); [EOL] parseStartTag(); [EOL] } [EOL] public void testParseStartTag_SelfClosing() { [EOL] TokenQueue tq = new TokenQueue("<img src='test.png'/>"); [EOL] parseStartTag(); [EOL] } [EOL] public void testParseStartTag_NonSelfClosing() { [EOL] TokenQueue tq = new TokenQueue("<div></div>"); [EOL] parseStartTag(); [EOL] } [EOL] public void testParseStartTag_DataTag() { [EOL] TokenQueue tq = new TokenQueue("<script>var a = 1;</script>"); [EOL] parseStartTag(); [EOL] } [EOL] public void testParseStartTag_BaseTag() { [EOL] TokenQueue tq = new TokenQueue("<base href='http://example.com/'>"); [EOL] parseStartTag(); [EOL] }
public void testParseAttributeWithNoKeyAndNoValue() { [EOL] TokenQueue tq = new TokenQueue(""); [EOL] Attribute result = parseAttribute(tq); [EOL] assertNull(result); [EOL] } [EOL] public void testParseAttributeWithKeyAndNoValue() { [EOL] TokenQueue tq = new TokenQueue("key"); [EOL] Attribute result = parseAttribute(tq); [EOL] assertNotNull(result); [EOL] assertEquals("key", result.getKey()); [EOL] assertEquals("", result.getValue()); [EOL] } [EOL] public void testParseAttributeWithKeyAndValueNoQuotes() { [EOL] TokenQueue tq = new TokenQueue("key=value"); [EOL] Attribute result = parseAttribute(tq); [EOL] assertNotNull(result); [EOL] assertEquals("key", result.getKey()); [EOL] assertEquals("value", result.getValue()); [EOL] } [EOL] public void testParseAttributeWithKeyAndValueSingleQuotes() { [EOL] TokenQueue tq = new TokenQueue("key='value'"); [EOL] Attribute result = parseAttribute(tq); [EOL] assertNotNull(result); [EOL] assertEquals("key", result.getKey()); [EOL] assertEquals("value", result.getValue()); [EOL] } [EOL] public void testParseAttributeWithKeyAndValueDoubleQuotes() { [EOL] TokenQueue tq = new TokenQueue("key=\"value\""); [EOL] Attribute result = parseAttribute(tq); [EOL] assertNotNull(result); [EOL] assertEquals("key", result.getKey()); [EOL] assertEquals("value", result.getValue()); [EOL] } [EOL] public void testParseAttributeWithKeyAndComplexValue() { [EOL] TokenQueue tq = new TokenQueue("key=value>something"); [EOL] Attribute result = parseAttribute(tq); [EOL] assertNotNull(result); [EOL] assertEquals("key", result.getKey()); [EOL] assertEquals("value", result.getValue()); [EOL] } [EOL] public void testParseAttributeWithWhitespaceAroundEquals() { [EOL] TokenQueue tq = new TokenQueue("key = value"); [EOL] Attribute result = parseAttribute(tq); [EOL] assertNotNull(result); [EOL] assertEquals("key", result.getKey()); [EOL] assertEquals("value", result.getValue()); [EOL] } [EOL] public void testParseAttributeWithWhitespaceAroundKeyAndValue() { [EOL] TokenQueue tq = new TokenQueue(" key = value "); [EOL] Attribute result = parseAttribute(tq); [EOL] assertNotNull(result); [EOL] assertEquals("key", result.getKey()); [EOL] assertEquals("value", result.getValue()); [EOL] }
private Attribute parseAttribute(TokenQueue tq) { [EOL] tq.consumeWhitespace(); [EOL] String key = tq.consumeAttributeKey(); [EOL] String value = ""; [EOL] tq.consumeWhitespace(); [EOL] if (tq.matchChomp("=")) { [EOL] tq.consumeWhitespace(); [EOL] if (tq.matchChomp(SQ)) { [EOL] value = tq.chompTo(SQ); [EOL] } else if (tq.matchChomp(DQ)) { [EOL] value = tq.chompTo(DQ); [EOL] } else { [EOL] StringBuilder valueAccum = new StringBuilder(); [EOL] while (!tq.matchesAny("<", "/>", ">") && !tq.matchesWhitespace() && !tq.isEmpty()) { [EOL] valueAccum.append(tq.consume()); [EOL] } [EOL] value = valueAccum.toString(); [EOL] } [EOL] tq.consumeWhitespace(); [EOL] } [EOL] if (key.length() != 0) [EOL] return Attribute.createFromEncoded(key, value); [EOL] else { [EOL] tq.consume(); [EOL] return null; [EOL] } [EOL] }
public void testParseTextNodeWithSimpleText() { [EOL] TokenQueue tq = new TokenQueue("Some simple text<EOL>"); [EOL] Node node = new Element(Tag.valueOf("div"), ""); [EOL] Parser parser = new Parser(new TreeBuilder() { [EOL] @Override [EOL] protected void initialiseParse(String input, String baseUri, ParseErrorList errors) { [EOL] super.initialiseParse(input, baseUri, errors); [EOL] this.stack.add(node); [EOL] } [EOL] }); [EOL] parser.parse(tq); [EOL] assertTrue(node.childNode(0) instanceof TextNode); [EOL] assertEquals("Some simple text", ((TextNode) node.childNode(0)).getWholeText()); [EOL] }
public void testParseTextNodeWithEmptyText() { [EOL] TokenQueue tq = new TokenQueue("<EOL>"); [EOL] Node node = new Element(Tag.valueOf("div"), ""); [EOL] Parser parser = new Parser(new TreeBuilder() { [EOL] @Override [EOL] protected void initialiseParse(String input, String baseUri, ParseErrorList errors) { [EOL] super.initialiseParse(input, baseUri, errors); [EOL] this.stack.add(node); [EOL] } [EOL] }); [EOL] parser.parse(tq); [EOL] assertEquals(0, node.childNodeSize()); [EOL] }
public void testAddChildToParentWithValidAncestorAndNotEmptyElement() { [EOL] Element child = new Element(Tag.valueOf("div"), ""); [EOL] Element parent = new Element(Tag.valueOf("p"), ""); [EOL] stack.add(parent); // Assuming stack is a field of the class [EOL] Element result = addChildToParent(child, false); [EOL] assertEquals(parent, result); [EOL] assertTrue(stack.contains(child)); [EOL] }
public void testAddChildToParentWithValidAncestorAndEmptyElement() { [EOL] Element child = new Element(Tag.valueOf("div"), ""); [EOL] Element parent = new Element(Tag.valueOf("p"), ""); [EOL] stack.add(parent); // Assuming stack is a field of the class [EOL] Element result = addChildToParent(child, true); [EOL] assertEquals(parent, result); [EOL] assertFalse(stack.contains(child)); [EOL] }
public void testAddChildToParentWithInvalidAncestor() { [EOL] Element child = new Element(Tag.valueOf("table"), ""); [EOL] Element result = addChildToParent(child, false); [EOL] Element expectedParent = new Element(child.tag().getImplicitParent(), ""); [EOL] expectedParent.appendChild(new Element(headTag, "")); [EOL] expectedParent.appendChild(child); [EOL] assertEquals(expectedParent.tagName(), result.tagName()); [EOL] assertTrue(stack.contains(child)); [EOL] }
public void testAddChildToParentWithInvalidAncestorAndEmptyElement() { [EOL] Element child = new Element(Tag.valueOf("table"), ""); [EOL] Element result = addChildToParent(child, true); [EOL] Element expectedParent = new Element(child.tag().getImplicitParent(), ""); [EOL] expectedParent.appendChild(new Element(headTag, "")); [EOL] expectedParent.appendChild(child); [EOL] assertEquals(expectedParent.tagName(), result.tagName()); [EOL] assertFalse(stack.contains(child)); [EOL] }
public void testStackHasValidParent_StackSizeOneHtmlTag() { [EOL] Tag childTag = Tag.valueOf("html"); [EOL] stack.add(new Element(Tag.valueOf("html"), "")); [EOL] boolean result = stackHasValidParent(childTag); [EOL] assertTrue(result); [EOL] }
public void testStackHasValidParent_ValidParentInStack() { [EOL] Tag childTag = Tag.valueOf("div"); [EOL] stack.add(new Element(Tag.valueOf("body"), "")); [EOL] stack.add(new Element(Tag.valueOf("div"), "")); // Assuming div is a valid parent for div [EOL] boolean result = stackHasValidParent(childTag); [EOL] assertTrue(result); [EOL] }
public void testStackHasValidParent_NoValidParentInStack() { [EOL] Tag childTag = Tag.valueOf("div"); [EOL] stack.add(new Element(Tag.valueOf("span"), "")); // Assuming span is not a valid parent for div [EOL] boolean result = stackHasValidParent(childTag); [EOL] assertFalse(result); [EOL] }
public void testPopStackToSuitableContainer_WithEmptyStack() { [EOL] Parser parser = new Parser(new TreeBuilder()); [EOL] Tag tag = Tag.valueOf("p"); [EOL] Element result = parser.popStackToSuitableContainer(tag); [EOL] assertNull(result); [EOL] }
public void testPopStackToSuitableContainer_WithNonEmptyStackContainingTag() { [EOL] Parser parser = new Parser(new TreeBuilder()); [EOL] Tag tag = Tag.valueOf("div"); [EOL] Element divElement = new Element(Tag.valueOf("div"), ""); [EOL] parser.getStack().add(divElement); [EOL] Element result = parser.popStackToSuitableContainer(tag); [EOL] assertNotNull(result); [EOL] assertEquals(divElement, result); [EOL] }
public void testPopStackToSuitableContainer_WithNonEmptyStackNotContainingTag() { [EOL] Parser parser = new Parser(new TreeBuilder()); [EOL] Tag tag = Tag.valueOf("span"); [EOL] Element divElement = new Element(Tag.valueOf("div"), ""); [EOL] parser.getStack().add(divElement); [EOL] Element result = parser.popStackToSuitableContainer(tag); [EOL] assertNull(result); [EOL] }
public void testPopStackToCloseWithBodyTag() { [EOL] Parser parser = new Parser(new TreeBuilder()); [EOL] Element body = new Element(Tag.valueOf("body"), ""); [EOL] parser.getStack().add(body); [EOL] Tag bodyTag = Tag.valueOf("body"); [EOL] Element result = parser.popStackToClose(bodyTag); [EOL] assertNull(result); [EOL] assertTrue(parser.getStack().isEmpty()); [EOL] }
public void testPopStackToCloseWithMatchingTag() { [EOL] Parser parser = new Parser(new TreeBuilder()); [EOL] Element div = new Element(Tag.valueOf("div"), ""); [EOL] parser.getStack().add(new Element(Tag.valueOf("html"), "")); [EOL] parser.getStack().add(div); [EOL] Tag divTag = Tag.valueOf("div"); [EOL] Element result = parser.popStackToClose(divTag); [EOL] assertNotNull(result); [EOL] assertEquals("div", result.tagName()); [EOL] assertEquals(1, parser.getStack().size()); // Only html should be left [EOL] }
public void testPopStackToCloseWithHtmlTag() { [EOL] Parser parser = new Parser(new TreeBuilder()); [EOL] Element html = new Element(Tag.valueOf("html"), ""); [EOL] parser.getStack().add(html); [EOL] parser.getStack().add(new Element(Tag.valueOf("div"), "")); [EOL] Tag htmlTag = Tag.valueOf("html"); [EOL] Element result = parser.popStackToClose(htmlTag); [EOL] assertNull(result); [EOL] assertEquals(1, parser.getStack().size()); // Only html should be left [EOL] }
public void testLast_withEmptyStack() { [EOL] Elements stack = new Elements(); [EOL] try { [EOL] stack.last(); [EOL] fail("Should have thrown NoSuchElementException for empty stack"); [EOL] } catch (NoSuchElementException e) { [EOL] } [EOL] }
public void testLast_withNonEmptyStack() { [EOL] Elements stack = new Elements(); [EOL] Element element = new Element(Tag.valueOf("div"), ""); [EOL] stack.add(element); [EOL] Element last = stack.last(); [EOL] assertEquals("Last element should be the one added", element, last); [EOL] }
public void testHashCodeWithNonNullKeyAndValue() { [EOL] Attribute attr = new Attribute("key", "value"); [EOL] int result = attr.hashCode(); [EOL] int expected = 31 * "key".hashCode() + "value".hashCode(); [EOL] assert result == expected; [EOL] }
public void testHashCodeWithNullKey() { [EOL] Attribute attr = new Attribute(null, "value"); [EOL] int result = attr.hashCode(); [EOL] int expected = 31 * 0 + "value".hashCode(); [EOL] assert result == expected; [EOL] }
public void testHashCodeWithNullValue() { [EOL] Attribute attr = new Attribute("key", null); [EOL] int result = attr.hashCode(); [EOL] int expected = 31 * "key".hashCode() + 0; [EOL] assert result == expected; [EOL] }
public void testHashCodeWithNullKeyAndValue() { [EOL] Attribute attr = new Attribute(null, null); [EOL] int result = attr.hashCode(); [EOL] int expected = 31 * 0 + 0; [EOL] assert result == expected; [EOL] }
public void testSimpleTextWhitelist() { [EOL] Whitelist whitelist = Whitelist.simpleText(); [EOL] assertTrue(whitelist.isSafeTag("b")); [EOL] assertTrue(whitelist.isSafeTag("em")); [EOL] assertTrue(whitelist.isSafeTag("i")); [EOL] assertTrue(whitelist.isSafeTag("strong")); [EOL] assertTrue(whitelist.isSafeTag("u")); [EOL] assertFalse(whitelist.isSafeTag("p")); [EOL] }
public void testRelaxedWhitelist() { [EOL] Whitelist whitelist = Whitelist.relaxed(); [EOL] assertNotNull(whitelist); [EOL] assertTrue(whitelist.isTagAllowed("a")); [EOL] assertTrue(whitelist.isTagAllowed("b")); [EOL] assertTrue(whitelist.isTagAllowed("blockquote")); [EOL] assertTrue(whitelist.isTagAllowed("ul")); [EOL] assertTrue(whitelist.isAttributeAllowed("a", "href")); [EOL] assertTrue(whitelist.isAttributeAllowed("a", "title")); [EOL] assertTrue(whitelist.isAttributeAllowed("ul", "type")); [EOL] assertTrue(whitelist.isProtocolAllowed("a", "href", "http")); [EOL] assertTrue(whitelist.isProtocolAllowed("a", "href", "https")); [EOL] assertTrue(whitelist.isProtocolAllowed("q", "cite", "https")); [EOL] }
public void testWhitelistConstructor() { [EOL] Whitelist whitelist = new Whitelist(); [EOL] assertNotNull(whitelist); [EOL] assertTrue(whitelist.tagNames.isEmpty()); [EOL] assertTrue(whitelist.attributes.isEmpty()); [EOL] assertTrue(whitelist.enforcedAttributes.isEmpty()); [EOL] assertTrue(whitelist.protocols.isEmpty()); [EOL] }
public void testAddTagsWithValidTags() { [EOL] Whitelist whitelist = new Whitelist(); [EOL] String[] tagsToAdd = {"tag1", "tag2", "tag3"}; [EOL] Whitelist result = whitelist.addTags(tagsToAdd); [EOL] assertTrue(result == whitelist); // Check if the method returns 'this' [EOL] assertTrue(whitelist.tagNames.contains(TagName.valueOf("tag1"))); // Check if tag1 was added [EOL] assertTrue(whitelist.tagNames.contains(TagName.valueOf("tag2"))); // Check if tag2 was added [EOL] assertTrue(whitelist.tagNames.contains(TagName.valueOf("tag3"))); // Check if tag3 was added [EOL] }
public void testAddTagsWithNull() { [EOL] Whitelist whitelist = new Whitelist(); [EOL] try { [EOL] whitelist.addTags((String[]) null); [EOL] fail("Should throw NullPointerException for null tags"); [EOL] } catch (NullPointerException e) { [EOL] } [EOL] }
public void testAddTagsWithEmptyTagName() { [EOL] Whitelist whitelist = new Whitelist(); [EOL] try { [EOL] whitelist.addTags(""); [EOL] fail("Should throw IllegalArgumentException for empty tag name"); [EOL] } catch (IllegalArgumentException e) { [EOL] } [EOL] }
public void testAddTagsWithNullTagName() { [EOL] Whitelist whitelist = new Whitelist(); [EOL] try { [EOL] whitelist.addTags(new String[]{null}); [EOL] fail("Should throw IllegalArgumentException for null tag name"); [EOL] } catch (IllegalArgumentException e) { [EOL] } [EOL] }
public void testAddAttributesWithValidData() { [EOL] Whitelist whitelist = new Whitelist(); [EOL] String tag = "a"; [EOL] String[] keys = new String[]{"href", "title"}; [EOL] Whitelist result = whitelist.addAttributes(tag, keys); [EOL] assertTrue(result == whitelist); // Check if the method returns 'this' [EOL] assertTrue(whitelist.isSafeTag(tag)); // Check if the tag is now safe [EOL] assertTrue(whitelist.isSafeAttribute(tag, "href")); // Check if 'href' was added [EOL] assertTrue(whitelist.isSafeAttribute(tag, "title")); // Check if 'title' was added [EOL] }
public void testAddAttributesWithExistingTag() { [EOL] Whitelist whitelist = new Whitelist(); [EOL] String tag = "a"; [EOL] String[] keys1 = new String[]{"href"}; [EOL] String[] keys2 = new String[]{"title"}; [EOL] whitelist.addAttributes(tag, keys1); // Add initial attribute [EOL] Whitelist result = whitelist.addAttributes(tag, keys2); // Add another attribute to the same tag [EOL] assertTrue(result == whitelist); // Check if the method returns 'this' [EOL] assertTrue(whitelist.isSafeTag(tag)); // Check if the tag is still safe [EOL] assertTrue(whitelist.isSafeAttribute(tag, "href")); // Check if 'href' is still there [EOL] assertTrue(whitelist.isSafeAttribute(tag, "title")); // Check if 'title' was added [EOL] }
public void testAddAttributesWithEmptyTag() { [EOL] Whitelist whitelist = new Whitelist(); [EOL] String tag = ""; [EOL] String[] keys = new String[]{"href"}; [EOL] try { [EOL] whitelist.addAttributes(tag, keys); [EOL] fail("Should have thrown IllegalArgumentException for empty tag"); [EOL] } catch (IllegalArgumentException e) { [EOL] } [EOL] }
public void testAddAttributesWithNullKeys() { [EOL] Whitelist whitelist = new Whitelist(); [EOL] String tag = "a"; [EOL] String[] keys = null; [EOL] try { [EOL] whitelist.addAttributes(tag, keys); [EOL] fail("Should have thrown IllegalArgumentException for null keys"); [EOL] } catch (IllegalArgumentException e) { [EOL] } [EOL] }
public void testAddAttributesWithEmptyKey() { [EOL] Whitelist whitelist = new Whitelist(); [EOL] String tag = "a"; [EOL] String[] keys = new String[]{""}; [EOL] try { [EOL] whitelist.addAttributes(tag, keys); [EOL] fail("Should have thrown IllegalArgumentException for empty key"); [EOL] } catch (IllegalArgumentException e) { [EOL] } [EOL] }
public void testAddProtocolsWithValidData() { [EOL] Whitelist whitelist = new Whitelist(); [EOL] String tag = "a"; [EOL] String key = "href"; [EOL] String[] protocols = new String[]{"http", "https"}; [EOL] whitelist.addProtocols(tag, key, protocols); [EOL] assertTrue(whitelist.isSafeTag(tag)); [EOL] assertTrue(whitelist.isSafeAttribute(tag, key, "http://example.com")); [EOL] assertTrue(whitelist.isSafeAttribute(tag, key, "https://example.com")); [EOL] }
public void testAddProtocolsWithNewTagAndKey() { [EOL] Whitelist whitelist = new Whitelist(); [EOL] String tag = "img"; [EOL] String key = "src"; [EOL] String[] protocols = new String[]{"data"}; [EOL] whitelist.addProtocols(tag, key, protocols); [EOL] assertTrue(whitelist.isSafeTag(tag)); [EOL] assertTrue(whitelist.isSafeAttribute(tag, key, "data:image/png;base64,")); [EOL] }
public void testAddProtocolsWithExistingTagNewKey() { [EOL] Whitelist whitelist = new Whitelist(); [EOL] whitelist.addProtocols("a", "href", "http"); [EOL] String tag = "a"; [EOL] String key = "title"; [EOL] String[] protocols = new String[]{"http", "https"}; [EOL] whitelist.addProtocols(tag, key, protocols); [EOL] assertTrue(whitelist.isSafeTag(tag)); [EOL] assertTrue(whitelist.isSafeAttribute(tag, "href", "http://example.com")); [EOL] assertTrue(whitelist.isSafeAttribute(tag, key, "http://example.com")); [EOL] }
public void testAddProtocolsWithEmptyProtocol() { [EOL] Whitelist whitelist = new Whitelist(); [EOL] String tag = "a"; [EOL] String key = "href"; [EOL] String[] protocols = new String[]{""}; [EOL] try { [EOL] whitelist.addProtocols(tag, key, protocols); [EOL] fail("Should throw IllegalArgumentException for empty protocol"); [EOL] } catch (IllegalArgumentException e) { [EOL] } [EOL] }
public void testAddProtocolsWithNullProtocols() { [EOL] Whitelist whitelist = new Whitelist(); [EOL] String tag = "a"; [EOL] String key = "href"; [EOL] try { [EOL] whitelist.addProtocols(tag, key, (String[]) null); [EOL] fail("Should throw IllegalArgumentException for null protocols"); [EOL] } catch (IllegalArgumentException e) { [EOL] } [EOL] }
public void testAddProtocolsWithEmptyTag() { [EOL] Whitelist whitelist = new Whitelist(); [EOL] String tag = ""; [EOL] String key = "href"; [EOL] String[] protocols = new String[]{"http"}; [EOL] try { [EOL] whitelist.addProtocols(tag, key, protocols); [EOL] fail("Should throw IllegalArgumentException for empty tag"); [EOL] } catch (IllegalArgumentException e) { [EOL] } [EOL] }
public void testAddProtocolsWithEmptyKey() { [EOL] Whitelist whitelist = new Whitelist(); [EOL] String tag = "a"; [EOL] String key = ""; [EOL] String[] protocols = new String[]{"http"}; [EOL] try { [EOL] whitelist.addProtocols(tag, key, protocols); [EOL] fail("Should throw IllegalArgumentException for empty key"); [EOL] } catch (IllegalArgumentException e) { [EOL] } [EOL] }
public void testIsSafeTagWithSafeTag() { [EOL] assertTrue(isSafeTag("a")); // Assuming "a" is a safe tag in the context of the jsoup project [EOL] }
public void testIsSafeTagWithUnsafeTag() { [EOL] assertFalse(isSafeTag("script")); // Assuming "script" is not a safe tag in the context of the jsoup project [EOL] }
public void testIsSafeTagWithNull() { [EOL] assertThrows(NullPointerException.class, () -> isSafeTag(null)); // Assuming TagName.valueOf(null) throws NullPointerException [EOL] }
public void testIsSafeTagWithEmptyString() { [EOL] assertFalse(isSafeTag("")); // Assuming an empty string is not a valid tag and therefore not safe [EOL] }
public void testIsSafeAttribute_TagInAttributesKeyNotInProtocols() { [EOL] String tagName = "a"; [EOL] Element el = new Element(Tag.valueOf(tagName), ""); [EOL] Attribute attr = new Attribute("href", "http://example.com"); [EOL] CleanerProperties props = new CleanerProperties(); [EOL] assertTrue(props.isSafeAttribute(tagName, el, attr)); [EOL] } [EOL] public void testIsSafeAttribute_TagAndKeyInAttributesAndProtocolsValidProtocol() { [EOL] String tagName = "a"; [EOL] Element el = new Element(Tag.valueOf(tagName), ""); [EOL] Attribute attr = new Attribute("href", "javascript:alert(1)"); [EOL] CleanerProperties props = new CleanerProperties(); [EOL] props.addProtocols(tagName, "href", "http", "https"); [EOL] assertTrue(props.isSafeAttribute(tagName, el, attr)); [EOL] } [EOL] public void testIsSafeAttribute_TagAndKeyInAttributesAndProtocolsInvalidProtocol() { [EOL] String tagName = "a"; [EOL] Element el = new Element(Tag.valueOf(tagName), ""); [EOL] Attribute attr = new Attribute("href", "javascript:alert(1)"); [EOL] CleanerProperties props = new CleanerProperties(); [EOL] props.addProtocols(tagName, "href", "http", "https"); [EOL] assertFalse(props.isSafeAttribute(tagName, el, attr)); [EOL] } [EOL] public void testIsSafeAttribute_TagNotInAttributesButAllIs() { [EOL] String tagName = "b"; [EOL] Element el = new Element(Tag.valueOf(tagName), ""); [EOL] Attribute attr = new Attribute("class", "example"); [EOL] CleanerProperties props = new CleanerProperties(); [EOL] props.addAttributes(":all", "class"); [EOL] assertTrue(props.isSafeAttribute(tagName, el, attr)); [EOL] } [EOL] public void testIsSafeAttribute_TagAndKeyNotInAttributes() { [EOL] String tagName = "b"; [EOL] Element el = new Element(Tag.valueOf(tagName), ""); [EOL] Attribute attr = new Attribute("style", "color:red"); [EOL] CleanerProperties props = new CleanerProperties(); [EOL] assertFalse(props.isSafeAttribute(tagName, el, attr)); [EOL] } [EOL] public void testIsSafeAttribute_AllTagWithInvalidAttribute() { [EOL] String tagName = ":all"; [EOL] Element el = new Element(Tag.valueOf("div"), ""); [EOL] Attribute attr = new Attribute("onload", "alert(1)"); [EOL] CleanerProperties props = new CleanerProperties(); [EOL] assertFalse(props.isSafeAttribute(tagName, el, attr)); [EOL] }
public void testValidProtocolWithEmptyProtocols() { [EOL] Element el = new Element(Tag.valueOf("a"), ""); [EOL] Attribute attr = new Attribute("href", "http://example.com"); [EOL] Set<Protocol> protocols = new HashSet<>(); [EOL] boolean result = testValidProtocol(el, attr, protocols); [EOL] assertFalse(result); [EOL] }
public void testValidProtocolWithMatchingProtocol() { [EOL] Element el = new Element(Tag.valueOf("a"), ""); [EOL] Attribute attr = new Attribute("href", "http://example.com"); [EOL] Set<Protocol> protocols = new HashSet<>(); [EOL] protocols.add(Protocol.HTTP); [EOL] boolean result = testValidProtocol(el, attr, protocols); [EOL] assertTrue(result); [EOL] }
public void testValidProtocolWithNonMatchingProtocol() { [EOL] Element el = new Element(Tag.valueOf("a"), ""); [EOL] Attribute attr = new Attribute("href", "ftp://example.com"); [EOL] Set<Protocol> protocols = new HashSet<>(); [EOL] protocols.add(Protocol.HTTP); [EOL] boolean result = testValidProtocol(el, attr, protocols); [EOL] assertFalse(result); [EOL] }
public void testValidProtocolWithUpperCaseProtocol() { [EOL] Element el = new Element(Tag.valueOf("a"), ""); [EOL] Attribute attr = new Attribute("href", "HTTP://EXAMPLE.COM"); [EOL] Set<Protocol> protocols = new HashSet<>(); [EOL] protocols.add(Protocol.HTTP); [EOL] boolean result = testValidProtocol(el, attr, protocols); [EOL] assertTrue(result); [EOL] }
public void testGetEnforcedAttributes_WithExistingTag() { [EOL] String tagName = "existingTag"; [EOL] Attributes enforcedAttrs = new Attributes(); [EOL] enforcedAttrs.put("key1", "value1"); [EOL] enforcedAttrs.put("key2", "value2"); [EOL] Map<TagName, Map<AttributeKey, AttributeValue>> enforcedAttributes = new HashMap<>(); [EOL] Map<AttributeKey, AttributeValue> attrMap = new HashMap<>(); [EOL] attrMap.put(new AttributeKey("key1"), new AttributeValue("value1")); [EOL] attrMap.put(new AttributeKey("key2"), new AttributeValue("value2")); [EOL] enforcedAttributes.put(TagName.valueOf(tagName), attrMap); [EOL] MyClass instance = new MyClass(enforcedAttributes); [EOL] Attributes result = instance.getEnforcedAttributes(tagName); [EOL] assertEquals("value1", result.get("key1")); [EOL] assertEquals("value2", result.get("key2")); [EOL] assertEquals(2, result.size()); [EOL] }
public void testGetEnforcedAttributes_WithNonExistingTag() { [EOL] String tagName = "nonExistingTag"; [EOL] Map<TagName, Map<AttributeKey, AttributeValue>> enforcedAttributes = new HashMap<>(); [EOL] MyClass instance = new MyClass(enforcedAttributes); [EOL] Attributes result = instance.getEnforcedAttributes(tagName); [EOL] assertTrue(result.isEmpty()); [EOL] }
public void testTagNameWithNonNullValue() { [EOL] String value = "someValue"; [EOL] TagName tagName = new TagName(value); [EOL] assertNotNull(tagName); [EOL] }
public void testValueOf_withValidValue() { [EOL] String validValue = "p"; [EOL] TagName result = TagName.valueOf(validValue); [EOL] assertNotNull(result); [EOL] assertEquals(validValue, result.getName()); [EOL] }
public void testValueOf_withNullValue() { [EOL] try { [EOL] TagName.valueOf(null); [EOL] fail("Should have thrown NullPointerException"); [EOL] } catch (NullPointerException expected) { [EOL] } [EOL] }
public void testAttributeKeyWithValue() { [EOL] String expectedValue = "testValue"; [EOL] AttributeKey attributeKey = new AttributeKey(expectedValue); [EOL] assertEquals(expectedValue, attributeKey.getValue()); [EOL] }
public void testValueOfWithNonNullValue() { [EOL] String attributeName = "href"; [EOL] AttributeKey result = AttributeKey.valueOf(attributeName); [EOL] assertNotNull(result); [EOL] assertEquals(attributeName, result.toString()); [EOL] }
public void testValueOfWithEmptyString() { [EOL] String attributeName = "" ; [EOL] AttributeKey result = AttributeKey.valueOf(attributeName); [EOL] assertNotNull(result); [EOL] assertEquals(attributeName, result.toString()); [EOL] }
public void testValueOfWithNull() { [EOL] try { [EOL] AttributeKey.valueOf(null); [EOL] fail("Should throw NullPointerException for null input"); [EOL] } catch (NullPointerException e) { [EOL] } [EOL] }
public void testProtocolConstructorWithValidValue() { [EOL] String validProtocolValue = "http"; [EOL] Protocol protocol = new Protocol(validProtocolValue); [EOL] assertNotNull(protocol); [EOL] assertEquals(validProtocolValue, protocol.toString()); [EOL] }
public void testValueOfWithValidProtocol() { [EOL] String validProtocol = "http"; [EOL] Protocol result = Protocol.valueOf(validProtocol); [EOL] assertNotNull(result); [EOL] assertEquals(validProtocol, result.toString()); [EOL] }
public void testValueOfWithInvalidProtocol() { [EOL] String invalidProtocol = "invalid-protocol"; [EOL] try { [EOL] Protocol.valueOf(invalidProtocol); [EOL] fail("Should have thrown an exception for invalid protocol"); [EOL] } catch (IllegalArgumentException e) { [EOL] } [EOL] }
public void testValueOfWithNull() { [EOL] try { [EOL] Protocol.valueOf(null); [EOL] fail("Should have thrown an exception for null input"); [EOL] } catch (NullPointerException e) { [EOL] } [EOL] }
public void testTypedValueWithNonNull() { [EOL] String testValue = "testValue"; [EOL] TypedValue typedValue = new TypedValue(testValue); [EOL] assertEquals(testValue, typedValue.value); [EOL] }
public void testTypedValueWithNull() { [EOL] try { [EOL] new TypedValue(null); [EOL] fail("Should have thrown IllegalArgumentException for null value"); [EOL] } catch (IllegalArgumentException e) { [EOL] } [EOL] }
public void testHashCodeWithNonNullValue() { [EOL] Attribute attr = new Attribute("key", "value"); [EOL] int expected = 31 + "value".hashCode(); [EOL] int actual = attr.hashCode(); [EOL] assertEquals(expected, actual); [EOL] }
public void testHashCodeWithNullValue() { [EOL] Attribute attr = new Attribute("key", null); [EOL] int expected = 31; [EOL] int actual = attr.hashCode(); [EOL] assertEquals(expected, actual); [EOL] }
public void testEquals_Reflexive() { [EOL] TypedValue value1 = new TypedValue("test"); [EOL] assertTrue(value1.equals(value1)); [EOL] }
public void testEquals_Null() { [EOL] TypedValue value1 = new TypedValue("test"); [EOL] assertFalse(value1.equals(null)); [EOL] }
public void testEquals_DifferentClass() { [EOL] TypedValue value1 = new TypedValue("test"); [EOL] Object differentClassObj = new Object(); [EOL] assertFalse(value1.equals(differentClassObj)); [EOL] }
public void testEquals_ValueNull_OtherValueNotNull() { [EOL] TypedValue value1 = new TypedValue(null); [EOL] TypedValue value2 = new TypedValue("test"); [EOL] assertFalse(value1.equals(value2)); [EOL] }
public void testEquals_ValueNotNull_OtherValueNull() { [EOL] TypedValue value1 = new TypedValue("test"); [EOL] TypedValue value2 = new TypedValue(null); [EOL] assertFalse(value1.equals(value2)); [EOL] }
public void testEquals_BothValuesNull() { [EOL] TypedValue value1 = new TypedValue(null); [EOL] TypedValue value2 = new TypedValue(null); [EOL] assertTrue(value1.equals(value2)); [EOL] }
public void testEquals_BothValuesEqual() { [EOL] TypedValue value1 = new TypedValue("test"); [EOL] TypedValue value2 = new TypedValue("test"); [EOL] assertTrue(value1.equals(value2)); [EOL] }
public void testEquals_ValuesNotEqual() { [EOL] TypedValue value1 = new TypedValue("test1"); [EOL] TypedValue value2 = new TypedValue("test2"); [EOL] assertFalse(value1.equals(value2)); [EOL] }
public void testToStringReturnsValue() { [EOL] Attribute attr = new Attribute("key", "value"); [EOL] String result = attr.toString(); [EOL] assertEquals("value", result); [EOL] }
public void testGetWholeData_WhenDataKeyExists() { [EOL] Attributes attributes = new Attributes(); [EOL] attributes.put("data-key", "someData"); [EOL] Element element = new Element(Tag.valueOf("div"), "", attributes); [EOL] String result = element.getWholeData(); [EOL] assertEquals("someData", result); [EOL] }
public void testGetWholeData_WhenDataKeyDoesNotExist() { [EOL] Attributes attributes = new Attributes(); [EOL] Element element = new Element(Tag.valueOf("div"), "", attributes); [EOL] String result = element.getWholeData(); [EOL] assertNull(result); [EOL] }
public void testOuterHtmlWithEmptyStringBuilder() { [EOL] StringBuilder accum = new StringBuilder(); [EOL] Node node = new DataNode("data"); [EOL] node.outerHtml(accum); [EOL] assertEquals("data", accum.toString()); [EOL] }
public void testOuterHtmlWithNonEmptyStringBuilder() { [EOL] StringBuilder accum = new StringBuilder("existing"); [EOL] Node node = new DataNode("data"); [EOL] node.outerHtml(accum); [EOL] assertEquals("existingdata", accum.toString()); [EOL] }
public void testCleanWithEmptyString() { [EOL] String bodyHtml = ""; [EOL] String baseUri = "http://example.com"; [EOL] Whitelist whitelist = Whitelist.none(); [EOL] String result = Jsoup.clean(bodyHtml, baseUri, whitelist); [EOL] assertEquals("", result); [EOL] }
public void testCleanWithBasicWhitelist() { [EOL] String bodyHtml = "<p>Some <a href='http://example.com'>link</a> with <script>evil()</script> content.</p>"; [EOL] String baseUri = "http://example.com"; [EOL] Whitelist whitelist = Whitelist.basic(); [EOL] String result = Jsoup.clean(bodyHtml, baseUri, whitelist); [EOL] assertEquals("<p>Some <a href=\"http://example.com\" rel=\"nofollow\">link</a> with  content.</p>", result); [EOL] }
public void testCleanWithFullWhitelist() { [EOL] String bodyHtml = "<div><p>Valid content</p><script>alert('Invalid content');</script></div>"; [EOL] String baseUri = "http://example.com"; [EOL] Whitelist whitelist = Whitelist.relaxed(); [EOL] String result = Jsoup.clean(bodyHtml, baseUri, whitelist); [EOL] assertTrue(result.contains("<p>Valid content</p>")); [EOL] assertFalse(result.contains("<script>")); [EOL] }
public void testCleanWithEmptyBaseUri() { [EOL] String bodyHtml = "<p>Hello, <a href='http://example.com'>world</a>!</p>"; [EOL] Whitelist whitelist = Whitelist.simpleText(); [EOL] String result = Jsoup.clean(bodyHtml, whitelist); [EOL] assertEquals("Hello, world!", result); [EOL] }
public void testCleanWithComplexHtml() { [EOL] String bodyHtml = "<div><p><a href='http://example.com' onclick='stealCookies()'>Click me</a></p></div>"; [EOL] Whitelist whitelist = Whitelist.basic(); [EOL] String result = Jsoup.clean(bodyHtml, whitelist); [EOL] assertEquals("<p><a href=\"http://example.com\" rel=\"nofollow\">Click me</a></p>", result); [EOL] }
public void testCleanWithEmptyString() { [EOL] String bodyHtml = ""; [EOL] Whitelist whitelist = Whitelist.none(); [EOL] String result = Jsoup.clean(bodyHtml, whitelist); [EOL] assertEquals("", result); [EOL] }
public void testTagCreationWithMixedCase() { [EOL] String mixedCaseTagName = "TaG"; [EOL] Tag tag = new Tag(mixedCaseTagName); [EOL] assertEquals("tag", tag.tagName); [EOL] }
public void testTagCreationWithUpperCase() { [EOL] String upperCaseTagName = "TAG"; [EOL] Tag tag = new Tag(upperCaseTagName); [EOL] assertEquals("tag", tag.tagName); [EOL] }
public void testTagCreationWithLowerCase() { [EOL] String lowerCaseTagName = "tag"; [EOL] Tag tag = new Tag(lowerCaseTagName); [EOL] assertEquals("tag", tag.tagName); [EOL] }
public void testGetName() { [EOL] Element element = new Element(Tag.valueOf("p"), ""); [EOL] String name = element.getName(); [EOL] assertEquals("p", name); [EOL] }
public void testValueOfWithNullTagName() { [EOL] try { [EOL] Tag.valueOf(null); [EOL] fail("Should throw NullPointerException for null tagName"); [EOL] } catch (NullPointerException e) { [EOL] } [EOL] }
public void testValueOfWithEmptyTagName() { [EOL] try { [EOL] Tag.valueOf(" "); [EOL] fail("Should throw IllegalArgumentException for empty tagName"); [EOL] } catch (IllegalArgumentException e) { [EOL] } [EOL] }
public void testValueOfWithNewTagName() { [EOL] String tagName = "newtag"; [EOL] Tag result = Tag.valueOf(tagName); [EOL] assertNotNull("Tag should not be null", result); [EOL] assertEquals("Tag name should be same as input", tagName, result.getName()); [EOL] assertFalse("New tag should not be a block by default", result.isBlock()); [EOL] assertTrue("New tag should be able to contain block by default", result.canContainBlock()); [EOL] }
public void testValueOfWithExistingTagName() { [EOL] String tagName = "p"; // assuming "p" is an existing tag in the tags map [EOL] Tag firstCall = Tag.valueOf(tagName); [EOL] Tag secondCall = Tag.valueOf(tagName); [EOL] assertSame("Should return the same instance for the same tagName", firstCall, secondCall); [EOL] }
public void testCanContainWithNullChild() { [EOL] Tag parentTag = Tag.valueOf("div"); [EOL] try { [EOL] parentTag.canContain(null); [EOL] fail("Should throw IllegalArgumentException for null child"); [EOL] } catch (IllegalArgumentException e) { [EOL] } [EOL] }
public void testCanContainWithBlockChildNotAllowed() { [EOL] Tag parentTag = Tag.valueOf("span"); [EOL] parentTag.canContainBlock = false; [EOL] Tag childTag = Tag.valueOf("div"); [EOL] childTag.isBlock = true; [EOL] assertFalse(parentTag.canContain(childTag)); [EOL] }
public void testCanContainWithInlineChildNotAllowed() { [EOL] Tag parentTag = Tag.valueOf("div"); [EOL] parentTag.canContainInline = false; [EOL] Tag childTag = Tag.valueOf("span"); [EOL] childTag.isBlock = false; [EOL] assertFalse(parentTag.canContain(childTag)); [EOL] }
public void testCanContainWithOptionalClosingAndSameTag() { [EOL] Tag parentTag = Tag.valueOf("div"); [EOL] parentTag.optionalClosing = true; [EOL] Tag childTag = Tag.valueOf("div"); [EOL] assertFalse(parentTag.canContain(childTag)); [EOL] }
public void testCanContainWithEmptyParent() { [EOL] Tag parentTag = Tag.valueOf("input"); [EOL] parentTag.empty = true; [EOL] Tag childTag = Tag.valueOf("span"); [EOL] assertFalse(parentTag.canContain(childTag)); [EOL] }
public void testCanContainWithDataParent() { [EOL] Tag parentTag = Tag.valueOf("script"); [EOL] parentTag.isData = true; [EOL] Tag childTag = Tag.valueOf("div"); [EOL] assertFalse(parentTag.canContain(childTag)); [EOL] }
public void testCanContainInHeadTag() { [EOL] Tag parentTag = Tag.valueOf("head"); [EOL] String[] allowedChildren = {"base", "script", "noscript", "link", "meta", "title", "style", "object"}; [EOL] for (String childName : allowedChildren) { [EOL] Tag childTag = Tag.valueOf(childName); [EOL] assertTrue(parentTag.canContain(childTag)); [EOL] } [EOL] Tag notAllowedChildTag = Tag.valueOf("div"); [EOL] assertFalse(parentTag.canContain(notAllowedChildTag)); [EOL] }
public void testCanContainDtWithDdChild() { [EOL] Tag parentTag = Tag.valueOf("dt"); [EOL] Tag childTag = Tag.valueOf("dd"); [EOL] assertFalse(parentTag.canContain(childTag)); [EOL] }
public void testCanContainDdWithDtChild() { [EOL] Tag parentTag = Tag.valueOf("dd"); [EOL] Tag childTag = Tag.valueOf("dt"); [EOL] assertFalse(parentTag.canContain(childTag)); [EOL] }
public void testCanContainWithGenericParentAndChild() { [EOL] Tag parentTag = Tag.valueOf("div"); [EOL] Tag childTag = Tag.valueOf("span"); [EOL] assertTrue(parentTag.canContain(childTag)); [EOL] }
public void testIsData_CanContainInlineAndNotEmpty() { [EOL] Tag tag = new Tag("tag"); [EOL] tag.setCanContainInline(true); [EOL] tag.setEmpty(false); [EOL] assertFalse(tag.isData()); [EOL] }
public void testIsData_CanContainInlineAndEmpty() { [EOL] Tag tag = new Tag("tag"); [EOL] tag.setCanContainInline(true); [EOL] tag.setEmpty(true); [EOL] assertFalse(tag.isData()); [EOL] }
public void testIsData_CannotContainInlineAndNotEmpty() { [EOL] Tag tag = new Tag("tag"); [EOL] tag.setCanContainInline(false); [EOL] tag.setEmpty(false); [EOL] assertTrue(tag.isData()); [EOL] }
public void testIsData_CannotContainInlineAndEmpty() { [EOL] Tag tag = new Tag("tag"); [EOL] tag.setCanContainInline(false); [EOL] tag.setEmpty(true); [EOL] assertTrue(tag.isData()); [EOL] }
public void testIsEmptyWhenEmptyIsTrue() { [EOL] ClassName instance = new ClassName(true); [EOL] assertTrue(instance.isEmpty()); [EOL] }
public void testIsEmptyWhenEmptyIsFalse() { [EOL] ClassName instance = new ClassName(false); [EOL] assertFalse(instance.isEmpty()); [EOL] }
public void testPreserveWhitespaceTrue() { [EOL] Element element = new Element(Tag.valueOf("pre"), ""); [EOL] element.preserveWhitespace = true; [EOL] assertTrue(element.preserveWhitespace()); [EOL] }
public void testPreserveWhitespaceFalse() { [EOL] Element element = new Element(Tag.valueOf("p"), ""); [EOL] element.preserveWhitespace = false; [EOL] assertFalse(element.preserveWhitespace()); [EOL] }
public void testGetImplicitParentWithNonEmptyAncestors() { [EOL] Tag tag = new Tag(); [EOL] tag.ancestors.add(new Tag()); // Assuming there's a way to add to ancestors [EOL] Tag result = tag.getImplicitParent(); [EOL] assertNotNull(result); [EOL] }
public void testGetImplicitParentWithEmptyAncestors() { [EOL] Tag tag = new Tag(); [EOL] Tag result = tag.getImplicitParent(); [EOL] assertNull(result); [EOL] }
public void testIsValidParentWithEmptyAncestors() { [EOL] Tag child = new Tag("child"); [EOL] Tag parent = new Tag("parent"); [EOL] assertTrue(parent.isValidParent(child)); [EOL] }
public void testIsValidParentWithValidAncestor() { [EOL] Tag child = new Tag("child"); [EOL] Tag parent = new Tag("parent"); [EOL] child.ancestors.add(parent); [EOL] assertTrue(parent.isValidParent(child)); [EOL] }
public void testIsValidParentWithInvalidAncestor() { [EOL] Tag child = new Tag("child"); [EOL] Tag parent = new Tag("parent"); [EOL] Tag anotherTag = new Tag("another"); [EOL] child.ancestors.add(anotherTag); [EOL] assertFalse(parent.isValidParent(child)); [EOL] }
public void testEquals_Reflexive() { [EOL] Tag tag1 = new Tag("p"); [EOL] assertTrue(tag1.equals(tag1)); [EOL] }
public void testEquals_Symmetric() { [EOL] Tag tag1 = new Tag("p"); [EOL] Tag tag2 = new Tag("p"); [EOL] assertTrue(tag1.equals(tag2)); [EOL] assertTrue(tag2.equals(tag1)); [EOL] }
public void testEquals_Null() { [EOL] Tag tag1 = new Tag("p"); [EOL] assertFalse(tag1.equals(null)); [EOL] }
public void testEquals_DifferentClass() { [EOL] Tag tag1 = new Tag("p"); [EOL] Object tag2 = new Object(); [EOL] assertFalse(tag1.equals(tag2)); [EOL] }
public void testEquals_DifferentTagName() { [EOL] Tag tag1 = new Tag("p"); [EOL] Tag tag2 = new Tag("div"); [EOL] assertFalse(tag1.equals(tag2)); [EOL] }
public void testEquals_DifferentCanContainBlock() { [EOL] Tag tag1 = new Tag("p"); [EOL] tag1.setCanContainBlock(true); [EOL] Tag tag2 = new Tag("p"); [EOL] tag2.setCanContainBlock(false); [EOL] assertFalse(tag1.equals(tag2)); [EOL] }
public void testEquals_DifferentCanContainInline() { [EOL] Tag tag1 = new Tag("p"); [EOL] tag1.setCanContainInline(true); [EOL] Tag tag2 = new Tag("p"); [EOL] tag2.setCanContainInline(false); [EOL] assertFalse(tag1.equals(tag2)); [EOL] }
public void testEquals_DifferentEmpty() { [EOL] Tag tag1 = new Tag("p"); [EOL] tag1.setEmpty(true); [EOL] Tag tag2 = new Tag("p"); [EOL] tag2.setEmpty(false); [EOL] assertFalse(tag1.equals(tag2)); [EOL] }
public void testEquals_DifferentIsBlock() { [EOL] Tag tag1 = new Tag("p"); [EOL] tag1.setIsBlock(true); [EOL] Tag tag2 = new Tag("p"); [EOL] tag2.setIsBlock(false); [EOL] assertFalse(tag1.equals(tag2)); [EOL] }
public void testEquals_DifferentOptionalClosing() { [EOL] Tag tag1 = new Tag("p"); [EOL] tag1.setOptionalClosing(true); [EOL] Tag tag2 = new Tag("p"); [EOL] tag2.setOptionalClosing(false); [EOL] assertFalse(tag1.equals(tag2)); [EOL] }
public void testHashCode_WithNonNullTagName() { [EOL] Tag tag = new Tag("p"); [EOL] tag.setBlock(true); [EOL] tag.setCanContainBlock(true); [EOL] tag.setCanContainInline(true); [EOL] tag.setOptionalClosing(true); [EOL] tag.setEmpty(true); [EOL] int result = tag.hashCode(); [EOL] }
public void testHashCode_WithNullTagName() { [EOL] Tag tag = new Tag(null); [EOL] tag.setBlock(false); [EOL] tag.setCanContainBlock(false); [EOL] tag.setCanContainInline(false); [EOL] tag.setOptionalClosing(false); [EOL] tag.setEmpty(false); [EOL] int result = tag.hashCode(); [EOL] }
public void testSetAncestorWithNull() { [EOL] Tag tag = new Tag("test"); [EOL] tag = tag.setAncestor((String[]) null); [EOL] assertTrue(tag.getAncestors().isEmpty()); [EOL] }
public void testSetAncestorWithEmptyArray() { [EOL] Tag tag = new Tag("test"); [EOL] tag = tag.setAncestor(new String[]{}); [EOL] assertTrue(tag.getAncestors().isEmpty()); [EOL] }
public void testSetAncestorWithSingleElement() { [EOL] Tag tag = new Tag("test"); [EOL] tag = tag.setAncestor("parent"); [EOL] assertEquals(1, tag.getAncestors().size()); [EOL] assertEquals("parent", tag.getAncestors().get(0).getName()); [EOL] }
public void testSetAncestorWithMultipleElements() { [EOL] Tag tag = new Tag("test"); [EOL] tag = tag.setAncestor("parent1", "parent2"); [EOL] assertEquals(2, tag.getAncestors().size()); [EOL] assertEquals("parent1", tag.getAncestors().get(0).getName()); [EOL] assertEquals("parent2", tag.getAncestors().get(1).getName()); [EOL] }
