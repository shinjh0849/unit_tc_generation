@Test [EOL] public void testConstructor() { [EOL]     assertNotNull(new BooleanUtils()); [EOL]     final Constructor<?>[] cons = BooleanUtils.class.getDeclaredConstructors(); [EOL]     assertEquals(1, cons.length); [EOL]     assertTrue(Modifier.isPublic(cons[0].getModifiers())); [EOL]     assertTrue(Modifier.isPublic(BooleanUtils.class.getModifiers())); [EOL]     assertFalse(Modifier.isFinal(BooleanUtils.class.getModifiers())); [EOL] }
@Test [EOL] public void test_isTrue_Boolean() { [EOL]     assertTrue(BooleanUtils.isTrue(Boolean.TRUE)); [EOL]     assertFalse(BooleanUtils.isTrue(Boolean.FALSE)); [EOL]     assertFalse(BooleanUtils.isTrue((Boolean) null)); [EOL] }
@Test [EOL] public void test_isTrue_Boolean() { [EOL]     assertTrue(BooleanUtils.isTrue(Boolean.TRUE)); [EOL]     assertFalse(BooleanUtils.isTrue(Boolean.FALSE)); [EOL]     assertFalse(BooleanUtils.isTrue((Boolean) null)); [EOL] }
@Test [EOL] public void test_isTrue_Boolean() { [EOL]     assertTrue(BooleanUtils.isTrue(Boolean.TRUE)); [EOL]     assertFalse(BooleanUtils.isTrue(Boolean.FALSE)); [EOL]     assertFalse(BooleanUtils.isTrue((Boolean) null)); [EOL] }
@Test [EOL] public void test_toBooleanDefaultIfNull_Boolean_boolean() { [EOL]     assertTrue(BooleanUtils.toBooleanDefaultIfNull(Boolean.TRUE, true)); [EOL]     assertTrue(BooleanUtils.toBooleanDefaultIfNull(Boolean.TRUE, false)); [EOL]     assertFalse(BooleanUtils.toBooleanDefaultIfNull(Boolean.FALSE, true)); [EOL]     assertFalse(BooleanUtils.toBooleanDefaultIfNull(Boolean.FALSE, false)); [EOL]     assertTrue(BooleanUtils.toBooleanDefaultIfNull((Boolean) null, true)); [EOL]     assertFalse(BooleanUtils.toBooleanDefaultIfNull((Boolean) null, false)); [EOL] }
@Test [EOL] public void test_toBoolean_int() { [EOL]     assertTrue(BooleanUtils.toBoolean(1)); [EOL]     assertTrue(BooleanUtils.toBoolean(-1)); [EOL]     assertFalse(BooleanUtils.toBoolean(0)); [EOL] }
@Test [EOL] public void test_toBoolean_int() { [EOL]     assertTrue(BooleanUtils.toBoolean(1)); [EOL]     assertTrue(BooleanUtils.toBoolean(-1)); [EOL]     assertFalse(BooleanUtils.toBoolean(0)); [EOL] }
@Test [EOL] public void test_toBooleanObject_Integer() { [EOL]     assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(Integer.valueOf(1))); [EOL]     assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(Integer.valueOf(-1))); [EOL]     assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(Integer.valueOf(0))); [EOL]     assertEquals(null, BooleanUtils.toBooleanObject((Integer) null)); [EOL] }
@Test [EOL] public void test_toBooleanObject_String() { [EOL]     assertEquals(null, BooleanUtils.toBooleanObject((String) null)); [EOL]     assertEquals(null, BooleanUtils.toBooleanObject("")); [EOL]     assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject("false")); [EOL]     assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject("no")); [EOL]     assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject("off")); [EOL]     assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject("FALSE")); [EOL]     assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject("NO")); [EOL]     assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject("OFF")); [EOL]     assertEquals(null, BooleanUtils.toBooleanObject("oof")); [EOL]     assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject("true")); [EOL]     assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject("yes")); [EOL]     assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject("on")); [EOL]     assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject("TRUE")); [EOL]     assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject("ON")); [EOL]     assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject("YES")); [EOL]     assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject("TruE")); [EOL]     assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject("TruE")); [EOL]     assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject("y")); [EOL]     assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject("Y")); [EOL]     assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject("t")); [EOL]     assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject("T")); [EOL]     assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject("f")); [EOL]     assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject("F")); [EOL]     assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject("n")); [EOL]     assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject("N")); [EOL]     assertEquals(null, BooleanUtils.toBooleanObject("z")); [EOL]     assertEquals(null, BooleanUtils.toBooleanObject("ab")); [EOL]     assertEquals(null, BooleanUtils.toBooleanObject("yoo")); [EOL] }
@Test [EOL] public void test_toBooleanObject_String() { [EOL]     assertEquals(null, BooleanUtils.toBooleanObject((String) null)); [EOL]     assertEquals(null, BooleanUtils.toBooleanObject("")); [EOL]     assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject("false")); [EOL]     assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject("no")); [EOL]     assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject("off")); [EOL]     assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject("FALSE")); [EOL]     assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject("NO")); [EOL]     assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject("OFF")); [EOL]     assertEquals(null, BooleanUtils.toBooleanObject("oof")); [EOL]     assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject("true")); [EOL]     assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject("yes")); [EOL]     assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject("on")); [EOL]     assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject("TRUE")); [EOL]     assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject("ON")); [EOL]     assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject("YES")); [EOL]     assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject("TruE")); [EOL]     assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject("TruE")); [EOL]     assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject("y")); [EOL]     assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject("Y")); [EOL]     assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject("t")); [EOL]     assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject("T")); [EOL]     assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject("f")); [EOL]     assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject("F")); [EOL]     assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject("n")); [EOL]     assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject("N")); [EOL]     assertEquals(null, BooleanUtils.toBooleanObject("z")); [EOL]     assertEquals(null, BooleanUtils.toBooleanObject("ab")); [EOL]     assertEquals(null, BooleanUtils.toBooleanObject("yoo")); [EOL] }
@Test [EOL] public void test_toBooleanObject_String() { [EOL]     assertEquals(null, BooleanUtils.toBooleanObject((String) null)); [EOL]     assertEquals(null, BooleanUtils.toBooleanObject("")); [EOL]     assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject("false")); [EOL]     assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject("no")); [EOL]     assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject("off")); [EOL]     assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject("FALSE")); [EOL]     assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject("NO")); [EOL]     assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject("OFF")); [EOL]     assertEquals(null, BooleanUtils.toBooleanObject("oof")); [EOL]     assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject("true")); [EOL]     assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject("yes")); [EOL]     assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject("on")); [EOL]     assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject("TRUE")); [EOL]     assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject("ON")); [EOL]     assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject("YES")); [EOL]     assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject("TruE")); [EOL]     assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject("TruE")); [EOL]     assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject("y")); [EOL]     assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject("Y")); [EOL]     assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject("t")); [EOL]     assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject("T")); [EOL]     assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject("f")); [EOL]     assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject("F")); [EOL]     assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject("n")); [EOL]     assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject("N")); [EOL]     assertEquals(null, BooleanUtils.toBooleanObject("z")); [EOL]     assertEquals(null, BooleanUtils.toBooleanObject("ab")); [EOL]     assertEquals(null, BooleanUtils.toBooleanObject("yoo")); [EOL] }
@Test [EOL] public void test_toBooleanObject_String() { [EOL]     assertEquals(null, BooleanUtils.toBooleanObject((String) null)); [EOL]     assertEquals(null, BooleanUtils.toBooleanObject("")); [EOL]     assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject("false")); [EOL]     assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject("no")); [EOL]     assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject("off")); [EOL]     assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject("FALSE")); [EOL]     assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject("NO")); [EOL]     assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject("OFF")); [EOL]     assertEquals(null, BooleanUtils.toBooleanObject("oof")); [EOL]     assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject("true")); [EOL]     assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject("yes")); [EOL]     assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject("on")); [EOL]     assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject("TRUE")); [EOL]     assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject("ON")); [EOL]     assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject("YES")); [EOL]     assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject("TruE")); [EOL]     assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject("TruE")); [EOL]     assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject("y")); [EOL]     assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject("Y")); [EOL]     assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject("t")); [EOL]     assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject("T")); [EOL]     assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject("f")); [EOL]     assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject("F")); [EOL]     assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject("n")); [EOL]     assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject("N")); [EOL]     assertEquals(null, BooleanUtils.toBooleanObject("z")); [EOL]     assertEquals(null, BooleanUtils.toBooleanObject("ab")); [EOL]     assertEquals(null, BooleanUtils.toBooleanObject("yoo")); [EOL] }
@Test [EOL] public void test_toBooleanObject_String() { [EOL]     assertEquals(null, BooleanUtils.toBooleanObject((String) null)); [EOL]     assertEquals(null, BooleanUtils.toBooleanObject("")); [EOL]     assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject("false")); [EOL]     assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject("no")); [EOL]     assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject("off")); [EOL]     assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject("FALSE")); [EOL]     assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject("NO")); [EOL]     assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject("OFF")); [EOL]     assertEquals(null, BooleanUtils.toBooleanObject("oof")); [EOL]     assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject("true")); [EOL]     assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject("yes")); [EOL]     assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject("on")); [EOL]     assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject("TRUE")); [EOL]     assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject("ON")); [EOL]     assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject("YES")); [EOL]     assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject("TruE")); [EOL]     assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject("TruE")); [EOL]     assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject("y")); [EOL]     assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject("Y")); [EOL]     assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject("t")); [EOL]     assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject("T")); [EOL]     assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject("f")); [EOL]     assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject("F")); [EOL]     assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject("n")); [EOL]     assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject("N")); [EOL]     assertEquals(null, BooleanUtils.toBooleanObject("z")); [EOL]     assertEquals(null, BooleanUtils.toBooleanObject("ab")); [EOL]     assertEquals(null, BooleanUtils.toBooleanObject("yoo")); [EOL] }
@Test [EOL] public void test_toBooleanObject_String() { [EOL]     assertEquals(null, BooleanUtils.toBooleanObject((String) null)); [EOL]     assertEquals(null, BooleanUtils.toBooleanObject("")); [EOL]     assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject("false")); [EOL]     assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject("no")); [EOL]     assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject("off")); [EOL]     assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject("FALSE")); [EOL]     assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject("NO")); [EOL]     assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject("OFF")); [EOL]     assertEquals(null, BooleanUtils.toBooleanObject("oof")); [EOL]     assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject("true")); [EOL]     assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject("yes")); [EOL]     assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject("on")); [EOL]     assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject("TRUE")); [EOL]     assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject("ON")); [EOL]     assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject("YES")); [EOL]     assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject("TruE")); [EOL]     assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject("TruE")); [EOL]     assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject("y")); [EOL]     assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject("Y")); [EOL]     assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject("t")); [EOL]     assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject("T")); [EOL]     assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject("f")); [EOL]     assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject("F")); [EOL]     assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject("n")); [EOL]     assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject("N")); [EOL]     assertEquals(null, BooleanUtils.toBooleanObject("z")); [EOL]     assertEquals(null, BooleanUtils.toBooleanObject("ab")); [EOL]     assertEquals(null, BooleanUtils.toBooleanObject("yoo")); [EOL] }
@Test [EOL] public void test_toBooleanObject_String() { [EOL]     assertEquals(null, BooleanUtils.toBooleanObject((String) null)); [EOL]     assertEquals(null, BooleanUtils.toBooleanObject("")); [EOL]     assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject("false")); [EOL]     assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject("no")); [EOL]     assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject("off")); [EOL]     assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject("FALSE")); [EOL]     assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject("NO")); [EOL]     assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject("OFF")); [EOL]     assertEquals(null, BooleanUtils.toBooleanObject("oof")); [EOL]     assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject("true")); [EOL]     assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject("yes")); [EOL]     assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject("on")); [EOL]     assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject("TRUE")); [EOL]     assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject("ON")); [EOL]     assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject("YES")); [EOL]     assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject("TruE")); [EOL]     assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject("TruE")); [EOL]     assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject("y")); [EOL]     assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject("Y")); [EOL]     assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject("t")); [EOL]     assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject("T")); [EOL]     assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject("f")); [EOL]     assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject("F")); [EOL]     assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject("n")); [EOL]     assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject("N")); [EOL]     assertEquals(null, BooleanUtils.toBooleanObject("z")); [EOL]     assertEquals(null, BooleanUtils.toBooleanObject("ab")); [EOL]     assertEquals(null, BooleanUtils.toBooleanObject("yoo")); [EOL] }
@Test [EOL] public void test_toBooleanObject_String() { [EOL]     assertEquals(null, BooleanUtils.toBooleanObject((String) null)); [EOL]     assertEquals(null, BooleanUtils.toBooleanObject("")); [EOL]     assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject("false")); [EOL]     assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject("no")); [EOL]     assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject("off")); [EOL]     assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject("FALSE")); [EOL]     assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject("NO")); [EOL]     assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject("OFF")); [EOL]     assertEquals(null, BooleanUtils.toBooleanObject("oof")); [EOL]     assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject("true")); [EOL]     assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject("yes")); [EOL]     assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject("on")); [EOL]     assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject("TRUE")); [EOL]     assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject("ON")); [EOL]     assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject("YES")); [EOL]     assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject("TruE")); [EOL]     assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject("TruE")); [EOL]     assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject("y")); [EOL]     assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject("Y")); [EOL]     assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject("t")); [EOL]     assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject("T")); [EOL]     assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject("f")); [EOL]     assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject("F")); [EOL]     assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject("n")); [EOL]     assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject("N")); [EOL]     assertEquals(null, BooleanUtils.toBooleanObject("z")); [EOL]     assertEquals(null, BooleanUtils.toBooleanObject("ab")); [EOL]     assertEquals(null, BooleanUtils.toBooleanObject("yoo")); [EOL] }
@Test [EOL] public void test_toBooleanObject_String() { [EOL]     assertEquals(null, BooleanUtils.toBooleanObject((String) null)); [EOL]     assertEquals(null, BooleanUtils.toBooleanObject("")); [EOL]     assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject("false")); [EOL]     assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject("no")); [EOL]     assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject("off")); [EOL]     assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject("FALSE")); [EOL]     assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject("NO")); [EOL]     assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject("OFF")); [EOL]     assertEquals(null, BooleanUtils.toBooleanObject("oof")); [EOL]     assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject("true")); [EOL]     assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject("yes")); [EOL]     assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject("on")); [EOL]     assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject("TRUE")); [EOL]     assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject("ON")); [EOL]     assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject("YES")); [EOL]     assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject("TruE")); [EOL]     assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject("TruE")); [EOL]     assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject("y")); [EOL]     assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject("Y")); [EOL]     assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject("t")); [EOL]     assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject("T")); [EOL]     assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject("f")); [EOL]     assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject("F")); [EOL]     assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject("n")); [EOL]     assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject("N")); [EOL]     assertEquals(null, BooleanUtils.toBooleanObject("z")); [EOL]     assertEquals(null, BooleanUtils.toBooleanObject("ab")); [EOL]     assertEquals(null, BooleanUtils.toBooleanObject("yoo")); [EOL] }
@Test [EOL] public void test_toBooleanObject_String() { [EOL]     assertEquals(null, BooleanUtils.toBooleanObject((String) null)); [EOL]     assertEquals(null, BooleanUtils.toBooleanObject("")); [EOL]     assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject("false")); [EOL]     assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject("no")); [EOL]     assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject("off")); [EOL]     assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject("FALSE")); [EOL]     assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject("NO")); [EOL]     assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject("OFF")); [EOL]     assertEquals(null, BooleanUtils.toBooleanObject("oof")); [EOL]     assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject("true")); [EOL]     assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject("yes")); [EOL]     assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject("on")); [EOL]     assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject("TRUE")); [EOL]     assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject("ON")); [EOL]     assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject("YES")); [EOL]     assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject("TruE")); [EOL]     assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject("TruE")); [EOL]     assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject("y")); [EOL]     assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject("Y")); [EOL]     assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject("t")); [EOL]     assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject("T")); [EOL]     assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject("f")); [EOL]     assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject("F")); [EOL]     assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject("n")); [EOL]     assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject("N")); [EOL]     assertEquals(null, BooleanUtils.toBooleanObject("z")); [EOL]     assertEquals(null, BooleanUtils.toBooleanObject("ab")); [EOL]     assertEquals(null, BooleanUtils.toBooleanObject("yoo")); [EOL] }
@Test [EOL] public void test_toBooleanObject_String() { [EOL]     assertEquals(null, BooleanUtils.toBooleanObject((String) null)); [EOL]     assertEquals(null, BooleanUtils.toBooleanObject("")); [EOL]     assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject("false")); [EOL]     assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject("no")); [EOL]     assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject("off")); [EOL]     assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject("FALSE")); [EOL]     assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject("NO")); [EOL]     assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject("OFF")); [EOL]     assertEquals(null, BooleanUtils.toBooleanObject("oof")); [EOL]     assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject("true")); [EOL]     assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject("yes")); [EOL]     assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject("on")); [EOL]     assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject("TRUE")); [EOL]     assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject("ON")); [EOL]     assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject("YES")); [EOL]     assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject("TruE")); [EOL]     assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject("TruE")); [EOL]     assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject("y")); [EOL]     assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject("Y")); [EOL]     assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject("t")); [EOL]     assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject("T")); [EOL]     assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject("f")); [EOL]     assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject("F")); [EOL]     assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject("n")); [EOL]     assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject("N")); [EOL]     assertEquals(null, BooleanUtils.toBooleanObject("z")); [EOL]     assertEquals(null, BooleanUtils.toBooleanObject("ab")); [EOL]     assertEquals(null, BooleanUtils.toBooleanObject("yoo")); [EOL] }
@Test [EOL] public void test_toBooleanObject_String() { [EOL]     assertEquals(null, BooleanUtils.toBooleanObject((String) null)); [EOL]     assertEquals(null, BooleanUtils.toBooleanObject("")); [EOL]     assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject("false")); [EOL]     assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject("no")); [EOL]     assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject("off")); [EOL]     assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject("FALSE")); [EOL]     assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject("NO")); [EOL]     assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject("OFF")); [EOL]     assertEquals(null, BooleanUtils.toBooleanObject("oof")); [EOL]     assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject("true")); [EOL]     assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject("yes")); [EOL]     assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject("on")); [EOL]     assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject("TRUE")); [EOL]     assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject("ON")); [EOL]     assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject("YES")); [EOL]     assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject("TruE")); [EOL]     assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject("TruE")); [EOL]     assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject("y")); [EOL]     assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject("Y")); [EOL]     assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject("t")); [EOL]     assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject("T")); [EOL]     assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject("f")); [EOL]     assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject("F")); [EOL]     assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject("n")); [EOL]     assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject("N")); [EOL]     assertEquals(null, BooleanUtils.toBooleanObject("z")); [EOL]     assertEquals(null, BooleanUtils.toBooleanObject("ab")); [EOL]     assertEquals(null, BooleanUtils.toBooleanObject("yoo")); [EOL] }
@Test [EOL] public void test_toBooleanObject_String() { [EOL]     assertEquals(null, BooleanUtils.toBooleanObject((String) null)); [EOL]     assertEquals(null, BooleanUtils.toBooleanObject("")); [EOL]     assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject("false")); [EOL]     assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject("no")); [EOL]     assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject("off")); [EOL]     assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject("FALSE")); [EOL]     assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject("NO")); [EOL]     assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject("OFF")); [EOL]     assertEquals(null, BooleanUtils.toBooleanObject("oof")); [EOL]     assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject("true")); [EOL]     assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject("yes")); [EOL]     assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject("on")); [EOL]     assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject("TRUE")); [EOL]     assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject("ON")); [EOL]     assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject("YES")); [EOL]     assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject("TruE")); [EOL]     assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject("TruE")); [EOL]     assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject("y")); [EOL]     assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject("Y")); [EOL]     assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject("t")); [EOL]     assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject("T")); [EOL]     assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject("f")); [EOL]     assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject("F")); [EOL]     assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject("n")); [EOL]     assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject("N")); [EOL]     assertEquals(null, BooleanUtils.toBooleanObject("z")); [EOL]     assertEquals(null, BooleanUtils.toBooleanObject("ab")); [EOL]     assertEquals(null, BooleanUtils.toBooleanObject("yoo")); [EOL] }
@Test(expected = IllegalArgumentException.class) [EOL] public void test_toBooleanObject_String_String_String_String_nullValue() { [EOL]     BooleanUtils.toBooleanObject((String) null, "Y", "N", "U"); [EOL] }
@Test(expected = IllegalArgumentException.class) [EOL] public void test_toBooleanObject_String_String_String_String_nullValue() { [EOL]     BooleanUtils.toBooleanObject((String) null, "Y", "N", "U"); [EOL] }
@Test [EOL] public void test_toStringYesNo_Boolean() { [EOL]     assertEquals(null, BooleanUtils.toStringYesNo((Boolean) null)); [EOL]     assertEquals("yes", BooleanUtils.toStringYesNo(Boolean.TRUE)); [EOL]     assertEquals("no", BooleanUtils.toStringYesNo(Boolean.FALSE)); [EOL] }
@Test(expected = IllegalArgumentException.class) [EOL] public void testAnd_object_emptyInput() { [EOL]     BooleanUtils.and(new Boolean[] {}); [EOL] }
@Test(expected = IllegalArgumentException.class) [EOL] public void testAnd_object_emptyInput() { [EOL]     BooleanUtils.and(new Boolean[] {}); [EOL] }
@Test(expected = IllegalArgumentException.class) [EOL] public void testAnd_object_emptyInput() { [EOL]     BooleanUtils.and(new Boolean[] {}); [EOL] }
@Test(expected = IllegalArgumentException.class) [EOL] public void testAnd_object_emptyInput() { [EOL]     BooleanUtils.and(new Boolean[] {}); [EOL] }
@Test(expected = IllegalArgumentException.class) [EOL] public void testAnd_object_emptyInput() { [EOL]     BooleanUtils.and(new Boolean[] {}); [EOL] }
@Test(expected = IllegalArgumentException.class) [EOL] public void testOr_primitive_nullInput() { [EOL]     BooleanUtils.or((boolean[]) null); [EOL] }
@Test(expected = IllegalArgumentException.class) [EOL] public void testOr_primitive_nullInput() { [EOL]     BooleanUtils.or((boolean[]) null); [EOL] }
@Test(expected = IllegalArgumentException.class) [EOL] public void testOr_primitive_nullInput() { [EOL]     BooleanUtils.or((boolean[]) null); [EOL] }
@Test(expected = IllegalArgumentException.class) [EOL] public void testOr_primitive_nullInput() { [EOL]     BooleanUtils.or((boolean[]) null); [EOL] }
@Test(expected = IllegalArgumentException.class) [EOL] public void testOr_object_nullInput() { [EOL]     BooleanUtils.or((Boolean[]) null); [EOL] }
@Test(expected = IllegalArgumentException.class) [EOL] public void testOr_object_nullInput() { [EOL]     BooleanUtils.or((Boolean[]) null); [EOL] }
@Test(expected = IllegalArgumentException.class) [EOL] public void testOr_object_nullInput() { [EOL]     BooleanUtils.or((Boolean[]) null); [EOL] }
@Test(expected = IllegalArgumentException.class) [EOL] public void testOr_object_nullInput() { [EOL]     BooleanUtils.or((Boolean[]) null); [EOL] }
@Test(expected = IllegalArgumentException.class) [EOL] public void testOr_object_nullInput() { [EOL]     BooleanUtils.or((Boolean[]) null); [EOL] }
@Test(expected = IllegalArgumentException.class) [EOL] public void testOr_object_nullInput() { [EOL]     BooleanUtils.or((Boolean[]) null); [EOL] }
@Test(expected = IllegalArgumentException.class) [EOL] public void testXor_primitive_nullInput() { [EOL]     BooleanUtils.xor((boolean[]) null); [EOL] }
@Test(expected = IllegalArgumentException.class) [EOL] public void testXor_primitive_nullInput() { [EOL]     BooleanUtils.xor((boolean[]) null); [EOL] }
@Test(expected = IllegalArgumentException.class) [EOL] public void testXor_primitive_nullInput() { [EOL]     BooleanUtils.xor((boolean[]) null); [EOL] }
@Test(expected = IllegalArgumentException.class) [EOL] public void testXor_primitive_nullInput() { [EOL]     BooleanUtils.xor((boolean[]) null); [EOL] }
@Test(expected = IllegalArgumentException.class) [EOL] public void testXor_primitive_nullInput() { [EOL]     BooleanUtils.xor((boolean[]) null); [EOL] }
@Test(expected = IllegalArgumentException.class) [EOL] public void testXor_primitive_nullInput() { [EOL]     BooleanUtils.xor((boolean[]) null); [EOL] }
@Test(expected = IllegalArgumentException.class) [EOL] public void testXor_primitive_nullInput() { [EOL]     BooleanUtils.xor((boolean[]) null); [EOL] }
@Test(expected = IllegalArgumentException.class) [EOL] public void testXor_object_emptyInput() { [EOL]     BooleanUtils.xor(new Boolean[] {}); [EOL] }
@Test(expected = IllegalArgumentException.class) [EOL] public void testXor_object_emptyInput() { [EOL]     BooleanUtils.xor(new Boolean[] {}); [EOL] }
@Test(expected = IllegalArgumentException.class) [EOL] public void testXor_object_emptyInput() { [EOL]     BooleanUtils.xor(new Boolean[] {}); [EOL] }
@Test(expected = IllegalArgumentException.class) [EOL] public void testXor_object_emptyInput() { [EOL]     BooleanUtils.xor(new Boolean[] {}); [EOL] }
@Test(expected = IllegalArgumentException.class) [EOL] public void testXor_object_emptyInput() { [EOL]     BooleanUtils.xor(new Boolean[] {}); [EOL] }
@Test(expected = IllegalArgumentException.class) [EOL] public void testXor_object_emptyInput() { [EOL]     BooleanUtils.xor(new Boolean[] {}); [EOL] }
@Test [EOL] public void testSupplementaryUnescaping() { [EOL]     final NumericEntityUnescaper neu = new NumericEntityUnescaper(); [EOL]     final String input = "&#68642;"; [EOL]     final String expected = "\uD803\uDC22"; [EOL]     final String result = neu.translate(input); [EOL]     assertEquals("Failed to unescape numeric entities supplementary characters", expected, result); [EOL] }
@Test [EOL] public void testSupplementaryUnescaping() { [EOL]     final NumericEntityUnescaper neu = new NumericEntityUnescaper(); [EOL]     final String input = "&#68642;"; [EOL]     final String expected = "\uD803\uDC22"; [EOL]     final String result = neu.translate(input); [EOL]     assertEquals("Failed to unescape numeric entities supplementary characters", expected, result); [EOL] }
@Test [EOL] public void testSupplementaryUnescaping() { [EOL]     final NumericEntityUnescaper neu = new NumericEntityUnescaper(); [EOL]     final String input = "&#68642;"; [EOL]     final String expected = "\uD803\uDC22"; [EOL]     final String result = neu.translate(input); [EOL]     assertEquals("Failed to unescape numeric entities supplementary characters", expected, result); [EOL] }
@Test [EOL] public void testSupplementaryUnescaping() { [EOL]     final NumericEntityUnescaper neu = new NumericEntityUnescaper(); [EOL]     final String input = "&#68642;"; [EOL]     final String expected = "\uD803\uDC22"; [EOL]     final String result = neu.translate(input); [EOL]     assertEquals("Failed to unescape numeric entities supplementary characters", expected, result); [EOL] }
@Test [EOL] public void testSupplementaryUnescaping() { [EOL]     final NumericEntityUnescaper neu = new NumericEntityUnescaper(); [EOL]     final String input = "&#68642;"; [EOL]     final String expected = "\uD803\uDC22"; [EOL]     final String result = neu.translate(input); [EOL]     assertEquals("Failed to unescape numeric entities supplementary characters", expected, result); [EOL] }
@Test [EOL] public void testSupplementaryUnescaping() { [EOL]     final NumericEntityUnescaper neu = new NumericEntityUnescaper(); [EOL]     final String input = "&#68642;"; [EOL]     final String expected = "\uD803\uDC22"; [EOL]     final String result = neu.translate(input); [EOL]     assertEquals("Failed to unescape numeric entities supplementary characters", expected, result); [EOL] }
@Test [EOL] public void testSupplementaryUnescaping() { [EOL]     final NumericEntityUnescaper neu = new NumericEntityUnescaper(); [EOL]     final String input = "&#68642;"; [EOL]     final String expected = "\uD803\uDC22"; [EOL]     final String result = neu.translate(input); [EOL]     assertEquals("Failed to unescape numeric entities supplementary characters", expected, result); [EOL] }
@Test [EOL] public void testSupplementaryUnescaping() { [EOL]     final NumericEntityUnescaper neu = new NumericEntityUnescaper(); [EOL]     final String input = "&#68642;"; [EOL]     final String expected = "\uD803\uDC22"; [EOL]     final String result = neu.translate(input); [EOL]     assertEquals("Failed to unescape numeric entities supplementary characters", expected, result); [EOL] }
@Test [EOL] public void testSupplementaryUnescaping() { [EOL]     final NumericEntityUnescaper neu = new NumericEntityUnescaper(); [EOL]     final String input = "&#68642;"; [EOL]     final String expected = "\uD803\uDC22"; [EOL]     final String result = neu.translate(input); [EOL]     assertEquals("Failed to unescape numeric entities supplementary characters", expected, result); [EOL] }
@Test [EOL] public void testInvokeMethod() throws Exception { [EOL]     assertEquals("foo()", MethodUtils.invokeMethod(testBean, "foo", (Object[]) ArrayUtils.EMPTY_CLASS_ARRAY)); [EOL]     assertEquals("foo()", MethodUtils.invokeMethod(testBean, "foo", (Object[]) null)); [EOL]     assertEquals("foo()", MethodUtils.invokeMethod(testBean, "foo", (Object[]) null, (Class<?>[]) null)); [EOL]     assertEquals("foo(String)", MethodUtils.invokeMethod(testBean, "foo", "")); [EOL]     assertEquals("foo(Object)", MethodUtils.invokeMethod(testBean, "foo", new Object())); [EOL]     assertEquals("foo(Object)", MethodUtils.invokeMethod(testBean, "foo", Boolean.TRUE)); [EOL]     assertEquals("foo(Integer)", MethodUtils.invokeMethod(testBean, "foo", NumberUtils.INTEGER_ONE)); [EOL]     assertEquals("foo(int)", MethodUtils.invokeMethod(testBean, "foo", NumberUtils.BYTE_ONE)); [EOL]     assertEquals("foo(double)", MethodUtils.invokeMethod(testBean, "foo", NumberUtils.LONG_ONE)); [EOL]     assertEquals("foo(double)", MethodUtils.invokeMethod(testBean, "foo", NumberUtils.DOUBLE_ONE)); [EOL] }
@Test [EOL] public void testInvokeMethod() throws Exception { [EOL]     assertEquals("foo()", MethodUtils.invokeMethod(testBean, "foo", (Object[]) ArrayUtils.EMPTY_CLASS_ARRAY)); [EOL]     assertEquals("foo()", MethodUtils.invokeMethod(testBean, "foo", (Object[]) null)); [EOL]     assertEquals("foo()", MethodUtils.invokeMethod(testBean, "foo", (Object[]) null, (Class<?>[]) null)); [EOL]     assertEquals("foo(String)", MethodUtils.invokeMethod(testBean, "foo", "")); [EOL]     assertEquals("foo(Object)", MethodUtils.invokeMethod(testBean, "foo", new Object())); [EOL]     assertEquals("foo(Object)", MethodUtils.invokeMethod(testBean, "foo", Boolean.TRUE)); [EOL]     assertEquals("foo(Integer)", MethodUtils.invokeMethod(testBean, "foo", NumberUtils.INTEGER_ONE)); [EOL]     assertEquals("foo(int)", MethodUtils.invokeMethod(testBean, "foo", NumberUtils.BYTE_ONE)); [EOL]     assertEquals("foo(double)", MethodUtils.invokeMethod(testBean, "foo", NumberUtils.LONG_ONE)); [EOL]     assertEquals("foo(double)", MethodUtils.invokeMethod(testBean, "foo", NumberUtils.DOUBLE_ONE)); [EOL] }
@Test [EOL] public void testInvokeMethod() throws Exception { [EOL]     assertEquals("foo()", MethodUtils.invokeMethod(testBean, "foo", (Object[]) ArrayUtils.EMPTY_CLASS_ARRAY)); [EOL]     assertEquals("foo()", MethodUtils.invokeMethod(testBean, "foo", (Object[]) null)); [EOL]     assertEquals("foo()", MethodUtils.invokeMethod(testBean, "foo", (Object[]) null, (Class<?>[]) null)); [EOL]     assertEquals("foo(String)", MethodUtils.invokeMethod(testBean, "foo", "")); [EOL]     assertEquals("foo(Object)", MethodUtils.invokeMethod(testBean, "foo", new Object())); [EOL]     assertEquals("foo(Object)", MethodUtils.invokeMethod(testBean, "foo", Boolean.TRUE)); [EOL]     assertEquals("foo(Integer)", MethodUtils.invokeMethod(testBean, "foo", NumberUtils.INTEGER_ONE)); [EOL]     assertEquals("foo(int)", MethodUtils.invokeMethod(testBean, "foo", NumberUtils.BYTE_ONE)); [EOL]     assertEquals("foo(double)", MethodUtils.invokeMethod(testBean, "foo", NumberUtils.LONG_ONE)); [EOL]     assertEquals("foo(double)", MethodUtils.invokeMethod(testBean, "foo", NumberUtils.DOUBLE_ONE)); [EOL] }
@Test [EOL] public void testInvokeMethod() throws Exception { [EOL]     assertEquals("foo()", MethodUtils.invokeMethod(testBean, "foo", (Object[]) ArrayUtils.EMPTY_CLASS_ARRAY)); [EOL]     assertEquals("foo()", MethodUtils.invokeMethod(testBean, "foo", (Object[]) null)); [EOL]     assertEquals("foo()", MethodUtils.invokeMethod(testBean, "foo", (Object[]) null, (Class<?>[]) null)); [EOL]     assertEquals("foo(String)", MethodUtils.invokeMethod(testBean, "foo", "")); [EOL]     assertEquals("foo(Object)", MethodUtils.invokeMethod(testBean, "foo", new Object())); [EOL]     assertEquals("foo(Object)", MethodUtils.invokeMethod(testBean, "foo", Boolean.TRUE)); [EOL]     assertEquals("foo(Integer)", MethodUtils.invokeMethod(testBean, "foo", NumberUtils.INTEGER_ONE)); [EOL]     assertEquals("foo(int)", MethodUtils.invokeMethod(testBean, "foo", NumberUtils.BYTE_ONE)); [EOL]     assertEquals("foo(double)", MethodUtils.invokeMethod(testBean, "foo", NumberUtils.LONG_ONE)); [EOL]     assertEquals("foo(double)", MethodUtils.invokeMethod(testBean, "foo", NumberUtils.DOUBLE_ONE)); [EOL] }
@Test [EOL] public void testInvokeMethod() throws Exception { [EOL]     assertEquals("foo()", MethodUtils.invokeMethod(testBean, "foo", (Object[]) ArrayUtils.EMPTY_CLASS_ARRAY)); [EOL]     assertEquals("foo()", MethodUtils.invokeMethod(testBean, "foo", (Object[]) null)); [EOL]     assertEquals("foo()", MethodUtils.invokeMethod(testBean, "foo", (Object[]) null, (Class<?>[]) null)); [EOL]     assertEquals("foo(String)", MethodUtils.invokeMethod(testBean, "foo", "")); [EOL]     assertEquals("foo(Object)", MethodUtils.invokeMethod(testBean, "foo", new Object())); [EOL]     assertEquals("foo(Object)", MethodUtils.invokeMethod(testBean, "foo", Boolean.TRUE)); [EOL]     assertEquals("foo(Integer)", MethodUtils.invokeMethod(testBean, "foo", NumberUtils.INTEGER_ONE)); [EOL]     assertEquals("foo(int)", MethodUtils.invokeMethod(testBean, "foo", NumberUtils.BYTE_ONE)); [EOL]     assertEquals("foo(double)", MethodUtils.invokeMethod(testBean, "foo", NumberUtils.LONG_ONE)); [EOL]     assertEquals("foo(double)", MethodUtils.invokeMethod(testBean, "foo", NumberUtils.DOUBLE_ONE)); [EOL] }
@Test [EOL] public void testInvokeStaticMethod() throws Exception { [EOL]     assertEquals("bar()", MethodUtils.invokeStaticMethod(TestBean.class, "bar", (Object[]) ArrayUtils.EMPTY_CLASS_ARRAY)); [EOL]     assertEquals("bar()", MethodUtils.invokeStaticMethod(TestBean.class, "bar", (Object[]) null)); [EOL]     assertEquals("bar()", MethodUtils.invokeStaticMethod(TestBean.class, "bar", (Object[]) null, (Class<?>[]) null)); [EOL]     assertEquals("bar(String)", MethodUtils.invokeStaticMethod(TestBean.class, "bar", "")); [EOL]     assertEquals("bar(Object)", MethodUtils.invokeStaticMethod(TestBean.class, "bar", new Object())); [EOL]     assertEquals("bar(Object)", MethodUtils.invokeStaticMethod(TestBean.class, "bar", Boolean.TRUE)); [EOL]     assertEquals("bar(Integer)", MethodUtils.invokeStaticMethod(TestBean.class, "bar", NumberUtils.INTEGER_ONE)); [EOL]     assertEquals("bar(int)", MethodUtils.invokeStaticMethod(TestBean.class, "bar", NumberUtils.BYTE_ONE)); [EOL]     assertEquals("bar(double)", MethodUtils.invokeStaticMethod(TestBean.class, "bar", NumberUtils.LONG_ONE)); [EOL]     assertEquals("bar(double)", MethodUtils.invokeStaticMethod(TestBean.class, "bar", NumberUtils.DOUBLE_ONE)); [EOL]     try { [EOL]         MethodUtils.invokeStaticMethod(TestBean.class, "does_not_exist"); [EOL]         fail("should throw NoSuchMethodException"); [EOL]     } catch (final NoSuchMethodException e) { [EOL]     } [EOL] }
@Test [EOL] public void testInvokeStaticMethod() throws Exception { [EOL]     assertEquals("bar()", MethodUtils.invokeStaticMethod(TestBean.class, "bar", (Object[]) ArrayUtils.EMPTY_CLASS_ARRAY)); [EOL]     assertEquals("bar()", MethodUtils.invokeStaticMethod(TestBean.class, "bar", (Object[]) null)); [EOL]     assertEquals("bar()", MethodUtils.invokeStaticMethod(TestBean.class, "bar", (Object[]) null, (Class<?>[]) null)); [EOL]     assertEquals("bar(String)", MethodUtils.invokeStaticMethod(TestBean.class, "bar", "")); [EOL]     assertEquals("bar(Object)", MethodUtils.invokeStaticMethod(TestBean.class, "bar", new Object())); [EOL]     assertEquals("bar(Object)", MethodUtils.invokeStaticMethod(TestBean.class, "bar", Boolean.TRUE)); [EOL]     assertEquals("bar(Integer)", MethodUtils.invokeStaticMethod(TestBean.class, "bar", NumberUtils.INTEGER_ONE)); [EOL]     assertEquals("bar(int)", MethodUtils.invokeStaticMethod(TestBean.class, "bar", NumberUtils.BYTE_ONE)); [EOL]     assertEquals("bar(double)", MethodUtils.invokeStaticMethod(TestBean.class, "bar", NumberUtils.LONG_ONE)); [EOL]     assertEquals("bar(double)", MethodUtils.invokeStaticMethod(TestBean.class, "bar", NumberUtils.DOUBLE_ONE)); [EOL]     try { [EOL]         MethodUtils.invokeStaticMethod(TestBean.class, "does_not_exist"); [EOL]         fail("should throw NoSuchMethodException"); [EOL]     } catch (final NoSuchMethodException e) { [EOL]     } [EOL] }
@Test [EOL] public void testInvokeStaticMethod() throws Exception { [EOL]     assertEquals("bar()", MethodUtils.invokeStaticMethod(TestBean.class, "bar", (Object[]) ArrayUtils.EMPTY_CLASS_ARRAY)); [EOL]     assertEquals("bar()", MethodUtils.invokeStaticMethod(TestBean.class, "bar", (Object[]) null)); [EOL]     assertEquals("bar()", MethodUtils.invokeStaticMethod(TestBean.class, "bar", (Object[]) null, (Class<?>[]) null)); [EOL]     assertEquals("bar(String)", MethodUtils.invokeStaticMethod(TestBean.class, "bar", "")); [EOL]     assertEquals("bar(Object)", MethodUtils.invokeStaticMethod(TestBean.class, "bar", new Object())); [EOL]     assertEquals("bar(Object)", MethodUtils.invokeStaticMethod(TestBean.class, "bar", Boolean.TRUE)); [EOL]     assertEquals("bar(Integer)", MethodUtils.invokeStaticMethod(TestBean.class, "bar", NumberUtils.INTEGER_ONE)); [EOL]     assertEquals("bar(int)", MethodUtils.invokeStaticMethod(TestBean.class, "bar", NumberUtils.BYTE_ONE)); [EOL]     assertEquals("bar(double)", MethodUtils.invokeStaticMethod(TestBean.class, "bar", NumberUtils.LONG_ONE)); [EOL]     assertEquals("bar(double)", MethodUtils.invokeStaticMethod(TestBean.class, "bar", NumberUtils.DOUBLE_ONE)); [EOL]     try { [EOL]         MethodUtils.invokeStaticMethod(TestBean.class, "does_not_exist"); [EOL]         fail("should throw NoSuchMethodException"); [EOL]     } catch (final NoSuchMethodException e) { [EOL]     } [EOL] }
@Test [EOL] public void testInvokeStaticMethod() throws Exception { [EOL]     assertEquals("bar()", MethodUtils.invokeStaticMethod(TestBean.class, "bar", (Object[]) ArrayUtils.EMPTY_CLASS_ARRAY)); [EOL]     assertEquals("bar()", MethodUtils.invokeStaticMethod(TestBean.class, "bar", (Object[]) null)); [EOL]     assertEquals("bar()", MethodUtils.invokeStaticMethod(TestBean.class, "bar", (Object[]) null, (Class<?>[]) null)); [EOL]     assertEquals("bar(String)", MethodUtils.invokeStaticMethod(TestBean.class, "bar", "")); [EOL]     assertEquals("bar(Object)", MethodUtils.invokeStaticMethod(TestBean.class, "bar", new Object())); [EOL]     assertEquals("bar(Object)", MethodUtils.invokeStaticMethod(TestBean.class, "bar", Boolean.TRUE)); [EOL]     assertEquals("bar(Integer)", MethodUtils.invokeStaticMethod(TestBean.class, "bar", NumberUtils.INTEGER_ONE)); [EOL]     assertEquals("bar(int)", MethodUtils.invokeStaticMethod(TestBean.class, "bar", NumberUtils.BYTE_ONE)); [EOL]     assertEquals("bar(double)", MethodUtils.invokeStaticMethod(TestBean.class, "bar", NumberUtils.LONG_ONE)); [EOL]     assertEquals("bar(double)", MethodUtils.invokeStaticMethod(TestBean.class, "bar", NumberUtils.DOUBLE_ONE)); [EOL]     try { [EOL]         MethodUtils.invokeStaticMethod(TestBean.class, "does_not_exist"); [EOL]         fail("should throw NoSuchMethodException"); [EOL]     } catch (final NoSuchMethodException e) { [EOL]     } [EOL] }
@Test [EOL] public void testInvokeStaticMethod() throws Exception { [EOL]     assertEquals("bar()", MethodUtils.invokeStaticMethod(TestBean.class, "bar", (Object[]) ArrayUtils.EMPTY_CLASS_ARRAY)); [EOL]     assertEquals("bar()", MethodUtils.invokeStaticMethod(TestBean.class, "bar", (Object[]) null)); [EOL]     assertEquals("bar()", MethodUtils.invokeStaticMethod(TestBean.class, "bar", (Object[]) null, (Class<?>[]) null)); [EOL]     assertEquals("bar(String)", MethodUtils.invokeStaticMethod(TestBean.class, "bar", "")); [EOL]     assertEquals("bar(Object)", MethodUtils.invokeStaticMethod(TestBean.class, "bar", new Object())); [EOL]     assertEquals("bar(Object)", MethodUtils.invokeStaticMethod(TestBean.class, "bar", Boolean.TRUE)); [EOL]     assertEquals("bar(Integer)", MethodUtils.invokeStaticMethod(TestBean.class, "bar", NumberUtils.INTEGER_ONE)); [EOL]     assertEquals("bar(int)", MethodUtils.invokeStaticMethod(TestBean.class, "bar", NumberUtils.BYTE_ONE)); [EOL]     assertEquals("bar(double)", MethodUtils.invokeStaticMethod(TestBean.class, "bar", NumberUtils.LONG_ONE)); [EOL]     assertEquals("bar(double)", MethodUtils.invokeStaticMethod(TestBean.class, "bar", NumberUtils.DOUBLE_ONE)); [EOL]     try { [EOL]         MethodUtils.invokeStaticMethod(TestBean.class, "does_not_exist"); [EOL]         fail("should throw NoSuchMethodException"); [EOL]     } catch (final NoSuchMethodException e) { [EOL]     } [EOL] }
@Test [EOL] public void testInvokeStaticMethod() throws Exception { [EOL]     assertEquals("bar()", MethodUtils.invokeStaticMethod(TestBean.class, "bar", (Object[]) ArrayUtils.EMPTY_CLASS_ARRAY)); [EOL]     assertEquals("bar()", MethodUtils.invokeStaticMethod(TestBean.class, "bar", (Object[]) null)); [EOL]     assertEquals("bar()", MethodUtils.invokeStaticMethod(TestBean.class, "bar", (Object[]) null, (Class<?>[]) null)); [EOL]     assertEquals("bar(String)", MethodUtils.invokeStaticMethod(TestBean.class, "bar", "")); [EOL]     assertEquals("bar(Object)", MethodUtils.invokeStaticMethod(TestBean.class, "bar", new Object())); [EOL]     assertEquals("bar(Object)", MethodUtils.invokeStaticMethod(TestBean.class, "bar", Boolean.TRUE)); [EOL]     assertEquals("bar(Integer)", MethodUtils.invokeStaticMethod(TestBean.class, "bar", NumberUtils.INTEGER_ONE)); [EOL]     assertEquals("bar(int)", MethodUtils.invokeStaticMethod(TestBean.class, "bar", NumberUtils.BYTE_ONE)); [EOL]     assertEquals("bar(double)", MethodUtils.invokeStaticMethod(TestBean.class, "bar", NumberUtils.LONG_ONE)); [EOL]     assertEquals("bar(double)", MethodUtils.invokeStaticMethod(TestBean.class, "bar", NumberUtils.DOUBLE_ONE)); [EOL]     try { [EOL]         MethodUtils.invokeStaticMethod(TestBean.class, "does_not_exist"); [EOL]         fail("should throw NoSuchMethodException"); [EOL]     } catch (final NoSuchMethodException e) { [EOL]     } [EOL] }
@Test [EOL] public void testInvokeStaticMethod() throws Exception { [EOL]     assertEquals("bar()", MethodUtils.invokeStaticMethod(TestBean.class, "bar", (Object[]) ArrayUtils.EMPTY_CLASS_ARRAY)); [EOL]     assertEquals("bar()", MethodUtils.invokeStaticMethod(TestBean.class, "bar", (Object[]) null)); [EOL]     assertEquals("bar()", MethodUtils.invokeStaticMethod(TestBean.class, "bar", (Object[]) null, (Class<?>[]) null)); [EOL]     assertEquals("bar(String)", MethodUtils.invokeStaticMethod(TestBean.class, "bar", "")); [EOL]     assertEquals("bar(Object)", MethodUtils.invokeStaticMethod(TestBean.class, "bar", new Object())); [EOL]     assertEquals("bar(Object)", MethodUtils.invokeStaticMethod(TestBean.class, "bar", Boolean.TRUE)); [EOL]     assertEquals("bar(Integer)", MethodUtils.invokeStaticMethod(TestBean.class, "bar", NumberUtils.INTEGER_ONE)); [EOL]     assertEquals("bar(int)", MethodUtils.invokeStaticMethod(TestBean.class, "bar", NumberUtils.BYTE_ONE)); [EOL]     assertEquals("bar(double)", MethodUtils.invokeStaticMethod(TestBean.class, "bar", NumberUtils.LONG_ONE)); [EOL]     assertEquals("bar(double)", MethodUtils.invokeStaticMethod(TestBean.class, "bar", NumberUtils.DOUBLE_ONE)); [EOL]     try { [EOL]         MethodUtils.invokeStaticMethod(TestBean.class, "does_not_exist"); [EOL]         fail("should throw NoSuchMethodException"); [EOL]     } catch (final NoSuchMethodException e) { [EOL]     } [EOL] }
@Test [EOL] public void testConstructor() { [EOL]     assertNotNull(new NumberUtils()); [EOL]     final Constructor<?>[] cons = NumberUtils.class.getDeclaredConstructors(); [EOL]     assertEquals(1, cons.length); [EOL]     assertTrue(Modifier.isPublic(cons[0].getModifiers())); [EOL]     assertTrue(Modifier.isPublic(NumberUtils.class.getModifiers())); [EOL]     assertFalse(Modifier.isFinal(NumberUtils.class.getModifiers())); [EOL] }
@Test [EOL] public void testToIntString() { [EOL]     assertTrue("toInt(String) 1 failed", NumberUtils.toInt("12345") == 12345); [EOL]     assertTrue("toInt(String) 2 failed", NumberUtils.toInt("abc") == 0); [EOL]     assertTrue("toInt(empty) failed", NumberUtils.toInt("") == 0); [EOL]     assertTrue("toInt(null) failed", NumberUtils.toInt(null) == 0); [EOL] }
@Test [EOL] public void testToIntString() { [EOL]     assertTrue("toInt(String) 1 failed", NumberUtils.toInt("12345") == 12345); [EOL]     assertTrue("toInt(String) 2 failed", NumberUtils.toInt("abc") == 0); [EOL]     assertTrue("toInt(empty) failed", NumberUtils.toInt("") == 0); [EOL]     assertTrue("toInt(null) failed", NumberUtils.toInt(null) == 0); [EOL] }
@Test [EOL] public void testToByteString() { [EOL]     assertTrue("toByte(String) 1 failed", NumberUtils.toByte("123") == 123); [EOL]     assertTrue("toByte(String) 2 failed", NumberUtils.toByte("abc") == 0); [EOL]     assertTrue("toByte(empty) failed", NumberUtils.toByte("") == 0); [EOL]     assertTrue("toByte(null) failed", NumberUtils.toByte(null) == 0); [EOL] }
@Test [EOL] public void testToByteString() { [EOL]     assertTrue("toByte(String) 1 failed", NumberUtils.toByte("123") == 123); [EOL]     assertTrue("toByte(String) 2 failed", NumberUtils.toByte("abc") == 0); [EOL]     assertTrue("toByte(empty) failed", NumberUtils.toByte("") == 0); [EOL]     assertTrue("toByte(null) failed", NumberUtils.toByte(null) == 0); [EOL] }
@Test [EOL] public void testToByteString() { [EOL]     assertTrue("toByte(String) 1 failed", NumberUtils.toByte("123") == 123); [EOL]     assertTrue("toByte(String) 2 failed", NumberUtils.toByte("abc") == 0); [EOL]     assertTrue("toByte(empty) failed", NumberUtils.toByte("") == 0); [EOL]     assertTrue("toByte(null) failed", NumberUtils.toByte(null) == 0); [EOL] }
@Test [EOL] public void testToByteString() { [EOL]     assertTrue("toByte(String) 1 failed", NumberUtils.toByte("123") == 123); [EOL]     assertTrue("toByte(String) 2 failed", NumberUtils.toByte("abc") == 0); [EOL]     assertTrue("toByte(empty) failed", NumberUtils.toByte("") == 0); [EOL]     assertTrue("toByte(null) failed", NumberUtils.toByte(null) == 0); [EOL] }
@Test [EOL] public void testToShortString() { [EOL]     assertTrue("toShort(String) 1 failed", NumberUtils.toShort("12345") == 12345); [EOL]     assertTrue("toShort(String) 2 failed", NumberUtils.toShort("abc") == 0); [EOL]     assertTrue("toShort(empty) failed", NumberUtils.toShort("") == 0); [EOL]     assertTrue("toShort(null) failed", NumberUtils.toShort(null) == 0); [EOL] }
@Test [EOL] public void testToShortString() { [EOL]     assertTrue("toShort(String) 1 failed", NumberUtils.toShort("12345") == 12345); [EOL]     assertTrue("toShort(String) 2 failed", NumberUtils.toShort("abc") == 0); [EOL]     assertTrue("toShort(empty) failed", NumberUtils.toShort("") == 0); [EOL]     assertTrue("toShort(null) failed", NumberUtils.toShort(null) == 0); [EOL] }
@Test [EOL] public void testToShortString() { [EOL]     assertTrue("toShort(String) 1 failed", NumberUtils.toShort("12345") == 12345); [EOL]     assertTrue("toShort(String) 2 failed", NumberUtils.toShort("abc") == 0); [EOL]     assertTrue("toShort(empty) failed", NumberUtils.toShort("") == 0); [EOL]     assertTrue("toShort(null) failed", NumberUtils.toShort(null) == 0); [EOL] }
@Test [EOL] public void testToShortStringI() { [EOL]     assertTrue("toShort(String,short) 1 failed", NumberUtils.toShort("12345", (short) 5) == 12345); [EOL]     assertTrue("toShort(String,short) 2 failed", NumberUtils.toShort("1234.5", (short) 5) == 5); [EOL] }
@Test [EOL] public void testToShortStringI() { [EOL]     assertTrue("toShort(String,short) 1 failed", NumberUtils.toShort("12345", (short) 5) == 12345); [EOL]     assertTrue("toShort(String,short) 2 failed", NumberUtils.toShort("1234.5", (short) 5) == 5); [EOL] }
@Test [EOL] public void testToShortStringI() { [EOL]     assertTrue("toShort(String,short) 1 failed", NumberUtils.toShort("12345", (short) 5) == 12345); [EOL]     assertTrue("toShort(String,short) 2 failed", NumberUtils.toShort("1234.5", (short) 5) == 5); [EOL] }
@Test [EOL] public void testToShortStringI() { [EOL]     assertTrue("toShort(String,short) 1 failed", NumberUtils.toShort("12345", (short) 5) == 12345); [EOL]     assertTrue("toShort(String,short) 2 failed", NumberUtils.toShort("1234.5", (short) 5) == 5); [EOL] }
@Test [EOL] public void testIsNumber() { [EOL]     String val = "12345"; [EOL]     assertTrue("isNumber(String) 1 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 1 failed", checkCreateNumber(val)); [EOL]     val = "1234.5"; [EOL]     assertTrue("isNumber(String) 2 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 2 failed", checkCreateNumber(val)); [EOL]     val = ".12345"; [EOL]     assertTrue("isNumber(String) 3 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 3 failed", checkCreateNumber(val)); [EOL]     val = "1234E5"; [EOL]     assertTrue("isNumber(String) 4 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 4 failed", checkCreateNumber(val)); [EOL]     val = "1234E+5"; [EOL]     assertTrue("isNumber(String) 5 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 5 failed", checkCreateNumber(val)); [EOL]     val = "1234E-5"; [EOL]     assertTrue("isNumber(String) 6 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 6 failed", checkCreateNumber(val)); [EOL]     val = "123.4E5"; [EOL]     assertTrue("isNumber(String) 7 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 7 failed", checkCreateNumber(val)); [EOL]     val = "-1234"; [EOL]     assertTrue("isNumber(String) 8 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 8 failed", checkCreateNumber(val)); [EOL]     val = "-1234.5"; [EOL]     assertTrue("isNumber(String) 9 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 9 failed", checkCreateNumber(val)); [EOL]     val = "-.12345"; [EOL]     assertTrue("isNumber(String) 10 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 10 failed", checkCreateNumber(val)); [EOL]     val = "-1234E5"; [EOL]     assertTrue("isNumber(String) 11 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 11 failed", checkCreateNumber(val)); [EOL]     val = "0"; [EOL]     assertTrue("isNumber(String) 12 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 12 failed", checkCreateNumber(val)); [EOL]     val = "-0"; [EOL]     assertTrue("isNumber(String) 13 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 13 failed", checkCreateNumber(val)); [EOL]     val = "01234"; [EOL]     assertTrue("isNumber(String) 14 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 14 failed", checkCreateNumber(val)); [EOL]     val = "-01234"; [EOL]     assertTrue("isNumber(String) 15 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 15 failed", checkCreateNumber(val)); [EOL]     val = "0xABC123"; [EOL]     assertTrue("isNumber(String) 16 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 16 failed", checkCreateNumber(val)); [EOL]     val = "0x0"; [EOL]     assertTrue("isNumber(String) 17 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 17 failed", checkCreateNumber(val)); [EOL]     val = "123.4E21D"; [EOL]     assertTrue("isNumber(String) 19 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 19 failed", checkCreateNumber(val)); [EOL]     val = "-221.23F"; [EOL]     assertTrue("isNumber(String) 20 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 20 failed", checkCreateNumber(val)); [EOL]     val = "22338L"; [EOL]     assertTrue("isNumber(String) 21 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 21 failed", checkCreateNumber(val)); [EOL]     val = null; [EOL]     assertTrue("isNumber(String) 1 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 1 Neg failed", !checkCreateNumber(val)); [EOL]     val = ""; [EOL]     assertTrue("isNumber(String) 2 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 2 Neg failed", !checkCreateNumber(val)); [EOL]     val = "--2.3"; [EOL]     assertTrue("isNumber(String) 3 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 3 Neg failed", !checkCreateNumber(val)); [EOL]     val = ".12.3"; [EOL]     assertTrue("isNumber(String) 4 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 4 Neg failed", !checkCreateNumber(val)); [EOL]     val = "-123E"; [EOL]     assertTrue("isNumber(String) 5 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 5 Neg failed", !checkCreateNumber(val)); [EOL]     val = "-123E+-212"; [EOL]     assertTrue("isNumber(String) 6 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 6 Neg failed", !checkCreateNumber(val)); [EOL]     val = "-123E2.12"; [EOL]     assertTrue("isNumber(String) 7 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 7 Neg failed", !checkCreateNumber(val)); [EOL]     val = "0xGF"; [EOL]     assertTrue("isNumber(String) 8 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 8 Neg failed", !checkCreateNumber(val)); [EOL]     val = "0xFAE-1"; [EOL]     assertTrue("isNumber(String) 9 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 9 Neg failed", !checkCreateNumber(val)); [EOL]     val = "."; [EOL]     assertTrue("isNumber(String) 10 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 10 Neg failed", !checkCreateNumber(val)); [EOL]     val = "-0ABC123"; [EOL]     assertTrue("isNumber(String) 11 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 11 Neg failed", !checkCreateNumber(val)); [EOL]     val = "123.4E-D"; [EOL]     assertTrue("isNumber(String) 12 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 12 Neg failed", !checkCreateNumber(val)); [EOL]     val = "123.4ED"; [EOL]     assertTrue("isNumber(String) 13 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 13 Neg failed", !checkCreateNumber(val)); [EOL]     val = "1234E5l"; [EOL]     assertTrue("isNumber(String) 14 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 14 Neg failed", !checkCreateNumber(val)); [EOL]     val = "11a"; [EOL]     assertTrue("isNumber(String) 15 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 15 Neg failed", !checkCreateNumber(val)); [EOL]     val = "1a"; [EOL]     assertTrue("isNumber(String) 16 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 16 Neg failed", !checkCreateNumber(val)); [EOL]     val = "a"; [EOL]     assertTrue("isNumber(String) 17 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 17 Neg failed", !checkCreateNumber(val)); [EOL]     val = "11g"; [EOL]     assertTrue("isNumber(String) 18 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 18 Neg failed", !checkCreateNumber(val)); [EOL]     val = "11z"; [EOL]     assertTrue("isNumber(String) 19 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 19 Neg failed", !checkCreateNumber(val)); [EOL]     val = "11def"; [EOL]     assertTrue("isNumber(String) 20 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 20 Neg failed", !checkCreateNumber(val)); [EOL]     val = "11d11"; [EOL]     assertTrue("isNumber(String) 21 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 21 Neg failed", !checkCreateNumber(val)); [EOL]     val = "11 11"; [EOL]     assertTrue("isNumber(String) 22 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 22 Neg failed", !checkCreateNumber(val)); [EOL]     val = " 1111"; [EOL]     assertTrue("isNumber(String) 23 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 23 Neg failed", !checkCreateNumber(val)); [EOL]     val = "1111 "; [EOL]     assertTrue("isNumber(String) 24 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 24 Neg failed", !checkCreateNumber(val)); [EOL]     val = "2."; [EOL]     assertTrue("isNumber(String) LANG-521 failed", NumberUtils.isNumber(val)); [EOL]     val = "1.1L"; [EOL]     assertFalse("isNumber(String) LANG-664 failed", NumberUtils.isNumber(val)); [EOL] }
@Test [EOL] public void testIsNumber() { [EOL]     String val = "12345"; [EOL]     assertTrue("isNumber(String) 1 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 1 failed", checkCreateNumber(val)); [EOL]     val = "1234.5"; [EOL]     assertTrue("isNumber(String) 2 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 2 failed", checkCreateNumber(val)); [EOL]     val = ".12345"; [EOL]     assertTrue("isNumber(String) 3 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 3 failed", checkCreateNumber(val)); [EOL]     val = "1234E5"; [EOL]     assertTrue("isNumber(String) 4 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 4 failed", checkCreateNumber(val)); [EOL]     val = "1234E+5"; [EOL]     assertTrue("isNumber(String) 5 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 5 failed", checkCreateNumber(val)); [EOL]     val = "1234E-5"; [EOL]     assertTrue("isNumber(String) 6 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 6 failed", checkCreateNumber(val)); [EOL]     val = "123.4E5"; [EOL]     assertTrue("isNumber(String) 7 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 7 failed", checkCreateNumber(val)); [EOL]     val = "-1234"; [EOL]     assertTrue("isNumber(String) 8 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 8 failed", checkCreateNumber(val)); [EOL]     val = "-1234.5"; [EOL]     assertTrue("isNumber(String) 9 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 9 failed", checkCreateNumber(val)); [EOL]     val = "-.12345"; [EOL]     assertTrue("isNumber(String) 10 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 10 failed", checkCreateNumber(val)); [EOL]     val = "-1234E5"; [EOL]     assertTrue("isNumber(String) 11 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 11 failed", checkCreateNumber(val)); [EOL]     val = "0"; [EOL]     assertTrue("isNumber(String) 12 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 12 failed", checkCreateNumber(val)); [EOL]     val = "-0"; [EOL]     assertTrue("isNumber(String) 13 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 13 failed", checkCreateNumber(val)); [EOL]     val = "01234"; [EOL]     assertTrue("isNumber(String) 14 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 14 failed", checkCreateNumber(val)); [EOL]     val = "-01234"; [EOL]     assertTrue("isNumber(String) 15 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 15 failed", checkCreateNumber(val)); [EOL]     val = "0xABC123"; [EOL]     assertTrue("isNumber(String) 16 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 16 failed", checkCreateNumber(val)); [EOL]     val = "0x0"; [EOL]     assertTrue("isNumber(String) 17 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 17 failed", checkCreateNumber(val)); [EOL]     val = "123.4E21D"; [EOL]     assertTrue("isNumber(String) 19 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 19 failed", checkCreateNumber(val)); [EOL]     val = "-221.23F"; [EOL]     assertTrue("isNumber(String) 20 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 20 failed", checkCreateNumber(val)); [EOL]     val = "22338L"; [EOL]     assertTrue("isNumber(String) 21 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 21 failed", checkCreateNumber(val)); [EOL]     val = null; [EOL]     assertTrue("isNumber(String) 1 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 1 Neg failed", !checkCreateNumber(val)); [EOL]     val = ""; [EOL]     assertTrue("isNumber(String) 2 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 2 Neg failed", !checkCreateNumber(val)); [EOL]     val = "--2.3"; [EOL]     assertTrue("isNumber(String) 3 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 3 Neg failed", !checkCreateNumber(val)); [EOL]     val = ".12.3"; [EOL]     assertTrue("isNumber(String) 4 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 4 Neg failed", !checkCreateNumber(val)); [EOL]     val = "-123E"; [EOL]     assertTrue("isNumber(String) 5 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 5 Neg failed", !checkCreateNumber(val)); [EOL]     val = "-123E+-212"; [EOL]     assertTrue("isNumber(String) 6 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 6 Neg failed", !checkCreateNumber(val)); [EOL]     val = "-123E2.12"; [EOL]     assertTrue("isNumber(String) 7 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 7 Neg failed", !checkCreateNumber(val)); [EOL]     val = "0xGF"; [EOL]     assertTrue("isNumber(String) 8 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 8 Neg failed", !checkCreateNumber(val)); [EOL]     val = "0xFAE-1"; [EOL]     assertTrue("isNumber(String) 9 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 9 Neg failed", !checkCreateNumber(val)); [EOL]     val = "."; [EOL]     assertTrue("isNumber(String) 10 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 10 Neg failed", !checkCreateNumber(val)); [EOL]     val = "-0ABC123"; [EOL]     assertTrue("isNumber(String) 11 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 11 Neg failed", !checkCreateNumber(val)); [EOL]     val = "123.4E-D"; [EOL]     assertTrue("isNumber(String) 12 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 12 Neg failed", !checkCreateNumber(val)); [EOL]     val = "123.4ED"; [EOL]     assertTrue("isNumber(String) 13 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 13 Neg failed", !checkCreateNumber(val)); [EOL]     val = "1234E5l"; [EOL]     assertTrue("isNumber(String) 14 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 14 Neg failed", !checkCreateNumber(val)); [EOL]     val = "11a"; [EOL]     assertTrue("isNumber(String) 15 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 15 Neg failed", !checkCreateNumber(val)); [EOL]     val = "1a"; [EOL]     assertTrue("isNumber(String) 16 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 16 Neg failed", !checkCreateNumber(val)); [EOL]     val = "a"; [EOL]     assertTrue("isNumber(String) 17 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 17 Neg failed", !checkCreateNumber(val)); [EOL]     val = "11g"; [EOL]     assertTrue("isNumber(String) 18 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 18 Neg failed", !checkCreateNumber(val)); [EOL]     val = "11z"; [EOL]     assertTrue("isNumber(String) 19 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 19 Neg failed", !checkCreateNumber(val)); [EOL]     val = "11def"; [EOL]     assertTrue("isNumber(String) 20 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 20 Neg failed", !checkCreateNumber(val)); [EOL]     val = "11d11"; [EOL]     assertTrue("isNumber(String) 21 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 21 Neg failed", !checkCreateNumber(val)); [EOL]     val = "11 11"; [EOL]     assertTrue("isNumber(String) 22 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 22 Neg failed", !checkCreateNumber(val)); [EOL]     val = " 1111"; [EOL]     assertTrue("isNumber(String) 23 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 23 Neg failed", !checkCreateNumber(val)); [EOL]     val = "1111 "; [EOL]     assertTrue("isNumber(String) 24 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 24 Neg failed", !checkCreateNumber(val)); [EOL]     val = "2."; [EOL]     assertTrue("isNumber(String) LANG-521 failed", NumberUtils.isNumber(val)); [EOL]     val = "1.1L"; [EOL]     assertFalse("isNumber(String) LANG-664 failed", NumberUtils.isNumber(val)); [EOL] }
@Test [EOL] public void testIsNumber() { [EOL]     String val = "12345"; [EOL]     assertTrue("isNumber(String) 1 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 1 failed", checkCreateNumber(val)); [EOL]     val = "1234.5"; [EOL]     assertTrue("isNumber(String) 2 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 2 failed", checkCreateNumber(val)); [EOL]     val = ".12345"; [EOL]     assertTrue("isNumber(String) 3 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 3 failed", checkCreateNumber(val)); [EOL]     val = "1234E5"; [EOL]     assertTrue("isNumber(String) 4 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 4 failed", checkCreateNumber(val)); [EOL]     val = "1234E+5"; [EOL]     assertTrue("isNumber(String) 5 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 5 failed", checkCreateNumber(val)); [EOL]     val = "1234E-5"; [EOL]     assertTrue("isNumber(String) 6 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 6 failed", checkCreateNumber(val)); [EOL]     val = "123.4E5"; [EOL]     assertTrue("isNumber(String) 7 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 7 failed", checkCreateNumber(val)); [EOL]     val = "-1234"; [EOL]     assertTrue("isNumber(String) 8 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 8 failed", checkCreateNumber(val)); [EOL]     val = "-1234.5"; [EOL]     assertTrue("isNumber(String) 9 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 9 failed", checkCreateNumber(val)); [EOL]     val = "-.12345"; [EOL]     assertTrue("isNumber(String) 10 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 10 failed", checkCreateNumber(val)); [EOL]     val = "-1234E5"; [EOL]     assertTrue("isNumber(String) 11 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 11 failed", checkCreateNumber(val)); [EOL]     val = "0"; [EOL]     assertTrue("isNumber(String) 12 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 12 failed", checkCreateNumber(val)); [EOL]     val = "-0"; [EOL]     assertTrue("isNumber(String) 13 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 13 failed", checkCreateNumber(val)); [EOL]     val = "01234"; [EOL]     assertTrue("isNumber(String) 14 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 14 failed", checkCreateNumber(val)); [EOL]     val = "-01234"; [EOL]     assertTrue("isNumber(String) 15 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 15 failed", checkCreateNumber(val)); [EOL]     val = "0xABC123"; [EOL]     assertTrue("isNumber(String) 16 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 16 failed", checkCreateNumber(val)); [EOL]     val = "0x0"; [EOL]     assertTrue("isNumber(String) 17 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 17 failed", checkCreateNumber(val)); [EOL]     val = "123.4E21D"; [EOL]     assertTrue("isNumber(String) 19 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 19 failed", checkCreateNumber(val)); [EOL]     val = "-221.23F"; [EOL]     assertTrue("isNumber(String) 20 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 20 failed", checkCreateNumber(val)); [EOL]     val = "22338L"; [EOL]     assertTrue("isNumber(String) 21 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 21 failed", checkCreateNumber(val)); [EOL]     val = null; [EOL]     assertTrue("isNumber(String) 1 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 1 Neg failed", !checkCreateNumber(val)); [EOL]     val = ""; [EOL]     assertTrue("isNumber(String) 2 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 2 Neg failed", !checkCreateNumber(val)); [EOL]     val = "--2.3"; [EOL]     assertTrue("isNumber(String) 3 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 3 Neg failed", !checkCreateNumber(val)); [EOL]     val = ".12.3"; [EOL]     assertTrue("isNumber(String) 4 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 4 Neg failed", !checkCreateNumber(val)); [EOL]     val = "-123E"; [EOL]     assertTrue("isNumber(String) 5 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 5 Neg failed", !checkCreateNumber(val)); [EOL]     val = "-123E+-212"; [EOL]     assertTrue("isNumber(String) 6 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 6 Neg failed", !checkCreateNumber(val)); [EOL]     val = "-123E2.12"; [EOL]     assertTrue("isNumber(String) 7 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 7 Neg failed", !checkCreateNumber(val)); [EOL]     val = "0xGF"; [EOL]     assertTrue("isNumber(String) 8 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 8 Neg failed", !checkCreateNumber(val)); [EOL]     val = "0xFAE-1"; [EOL]     assertTrue("isNumber(String) 9 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 9 Neg failed", !checkCreateNumber(val)); [EOL]     val = "."; [EOL]     assertTrue("isNumber(String) 10 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 10 Neg failed", !checkCreateNumber(val)); [EOL]     val = "-0ABC123"; [EOL]     assertTrue("isNumber(String) 11 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 11 Neg failed", !checkCreateNumber(val)); [EOL]     val = "123.4E-D"; [EOL]     assertTrue("isNumber(String) 12 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 12 Neg failed", !checkCreateNumber(val)); [EOL]     val = "123.4ED"; [EOL]     assertTrue("isNumber(String) 13 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 13 Neg failed", !checkCreateNumber(val)); [EOL]     val = "1234E5l"; [EOL]     assertTrue("isNumber(String) 14 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 14 Neg failed", !checkCreateNumber(val)); [EOL]     val = "11a"; [EOL]     assertTrue("isNumber(String) 15 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 15 Neg failed", !checkCreateNumber(val)); [EOL]     val = "1a"; [EOL]     assertTrue("isNumber(String) 16 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 16 Neg failed", !checkCreateNumber(val)); [EOL]     val = "a"; [EOL]     assertTrue("isNumber(String) 17 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 17 Neg failed", !checkCreateNumber(val)); [EOL]     val = "11g"; [EOL]     assertTrue("isNumber(String) 18 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 18 Neg failed", !checkCreateNumber(val)); [EOL]     val = "11z"; [EOL]     assertTrue("isNumber(String) 19 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 19 Neg failed", !checkCreateNumber(val)); [EOL]     val = "11def"; [EOL]     assertTrue("isNumber(String) 20 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 20 Neg failed", !checkCreateNumber(val)); [EOL]     val = "11d11"; [EOL]     assertTrue("isNumber(String) 21 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 21 Neg failed", !checkCreateNumber(val)); [EOL]     val = "11 11"; [EOL]     assertTrue("isNumber(String) 22 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 22 Neg failed", !checkCreateNumber(val)); [EOL]     val = " 1111"; [EOL]     assertTrue("isNumber(String) 23 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 23 Neg failed", !checkCreateNumber(val)); [EOL]     val = "1111 "; [EOL]     assertTrue("isNumber(String) 24 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 24 Neg failed", !checkCreateNumber(val)); [EOL]     val = "2."; [EOL]     assertTrue("isNumber(String) LANG-521 failed", NumberUtils.isNumber(val)); [EOL]     val = "1.1L"; [EOL]     assertFalse("isNumber(String) LANG-664 failed", NumberUtils.isNumber(val)); [EOL] }
@Test [EOL] public void testIsNumber() { [EOL]     String val = "12345"; [EOL]     assertTrue("isNumber(String) 1 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 1 failed", checkCreateNumber(val)); [EOL]     val = "1234.5"; [EOL]     assertTrue("isNumber(String) 2 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 2 failed", checkCreateNumber(val)); [EOL]     val = ".12345"; [EOL]     assertTrue("isNumber(String) 3 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 3 failed", checkCreateNumber(val)); [EOL]     val = "1234E5"; [EOL]     assertTrue("isNumber(String) 4 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 4 failed", checkCreateNumber(val)); [EOL]     val = "1234E+5"; [EOL]     assertTrue("isNumber(String) 5 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 5 failed", checkCreateNumber(val)); [EOL]     val = "1234E-5"; [EOL]     assertTrue("isNumber(String) 6 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 6 failed", checkCreateNumber(val)); [EOL]     val = "123.4E5"; [EOL]     assertTrue("isNumber(String) 7 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 7 failed", checkCreateNumber(val)); [EOL]     val = "-1234"; [EOL]     assertTrue("isNumber(String) 8 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 8 failed", checkCreateNumber(val)); [EOL]     val = "-1234.5"; [EOL]     assertTrue("isNumber(String) 9 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 9 failed", checkCreateNumber(val)); [EOL]     val = "-.12345"; [EOL]     assertTrue("isNumber(String) 10 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 10 failed", checkCreateNumber(val)); [EOL]     val = "-1234E5"; [EOL]     assertTrue("isNumber(String) 11 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 11 failed", checkCreateNumber(val)); [EOL]     val = "0"; [EOL]     assertTrue("isNumber(String) 12 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 12 failed", checkCreateNumber(val)); [EOL]     val = "-0"; [EOL]     assertTrue("isNumber(String) 13 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 13 failed", checkCreateNumber(val)); [EOL]     val = "01234"; [EOL]     assertTrue("isNumber(String) 14 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 14 failed", checkCreateNumber(val)); [EOL]     val = "-01234"; [EOL]     assertTrue("isNumber(String) 15 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 15 failed", checkCreateNumber(val)); [EOL]     val = "0xABC123"; [EOL]     assertTrue("isNumber(String) 16 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 16 failed", checkCreateNumber(val)); [EOL]     val = "0x0"; [EOL]     assertTrue("isNumber(String) 17 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 17 failed", checkCreateNumber(val)); [EOL]     val = "123.4E21D"; [EOL]     assertTrue("isNumber(String) 19 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 19 failed", checkCreateNumber(val)); [EOL]     val = "-221.23F"; [EOL]     assertTrue("isNumber(String) 20 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 20 failed", checkCreateNumber(val)); [EOL]     val = "22338L"; [EOL]     assertTrue("isNumber(String) 21 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 21 failed", checkCreateNumber(val)); [EOL]     val = null; [EOL]     assertTrue("isNumber(String) 1 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 1 Neg failed", !checkCreateNumber(val)); [EOL]     val = ""; [EOL]     assertTrue("isNumber(String) 2 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 2 Neg failed", !checkCreateNumber(val)); [EOL]     val = "--2.3"; [EOL]     assertTrue("isNumber(String) 3 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 3 Neg failed", !checkCreateNumber(val)); [EOL]     val = ".12.3"; [EOL]     assertTrue("isNumber(String) 4 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 4 Neg failed", !checkCreateNumber(val)); [EOL]     val = "-123E"; [EOL]     assertTrue("isNumber(String) 5 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 5 Neg failed", !checkCreateNumber(val)); [EOL]     val = "-123E+-212"; [EOL]     assertTrue("isNumber(String) 6 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 6 Neg failed", !checkCreateNumber(val)); [EOL]     val = "-123E2.12"; [EOL]     assertTrue("isNumber(String) 7 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 7 Neg failed", !checkCreateNumber(val)); [EOL]     val = "0xGF"; [EOL]     assertTrue("isNumber(String) 8 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 8 Neg failed", !checkCreateNumber(val)); [EOL]     val = "0xFAE-1"; [EOL]     assertTrue("isNumber(String) 9 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 9 Neg failed", !checkCreateNumber(val)); [EOL]     val = "."; [EOL]     assertTrue("isNumber(String) 10 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 10 Neg failed", !checkCreateNumber(val)); [EOL]     val = "-0ABC123"; [EOL]     assertTrue("isNumber(String) 11 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 11 Neg failed", !checkCreateNumber(val)); [EOL]     val = "123.4E-D"; [EOL]     assertTrue("isNumber(String) 12 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 12 Neg failed", !checkCreateNumber(val)); [EOL]     val = "123.4ED"; [EOL]     assertTrue("isNumber(String) 13 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 13 Neg failed", !checkCreateNumber(val)); [EOL]     val = "1234E5l"; [EOL]     assertTrue("isNumber(String) 14 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 14 Neg failed", !checkCreateNumber(val)); [EOL]     val = "11a"; [EOL]     assertTrue("isNumber(String) 15 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 15 Neg failed", !checkCreateNumber(val)); [EOL]     val = "1a"; [EOL]     assertTrue("isNumber(String) 16 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 16 Neg failed", !checkCreateNumber(val)); [EOL]     val = "a"; [EOL]     assertTrue("isNumber(String) 17 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 17 Neg failed", !checkCreateNumber(val)); [EOL]     val = "11g"; [EOL]     assertTrue("isNumber(String) 18 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 18 Neg failed", !checkCreateNumber(val)); [EOL]     val = "11z"; [EOL]     assertTrue("isNumber(String) 19 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 19 Neg failed", !checkCreateNumber(val)); [EOL]     val = "11def"; [EOL]     assertTrue("isNumber(String) 20 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 20 Neg failed", !checkCreateNumber(val)); [EOL]     val = "11d11"; [EOL]     assertTrue("isNumber(String) 21 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 21 Neg failed", !checkCreateNumber(val)); [EOL]     val = "11 11"; [EOL]     assertTrue("isNumber(String) 22 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 22 Neg failed", !checkCreateNumber(val)); [EOL]     val = " 1111"; [EOL]     assertTrue("isNumber(String) 23 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 23 Neg failed", !checkCreateNumber(val)); [EOL]     val = "1111 "; [EOL]     assertTrue("isNumber(String) 24 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 24 Neg failed", !checkCreateNumber(val)); [EOL]     val = "2."; [EOL]     assertTrue("isNumber(String) LANG-521 failed", NumberUtils.isNumber(val)); [EOL]     val = "1.1L"; [EOL]     assertFalse("isNumber(String) LANG-664 failed", NumberUtils.isNumber(val)); [EOL] }
@Test [EOL] public void testIsNumber() { [EOL]     String val = "12345"; [EOL]     assertTrue("isNumber(String) 1 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 1 failed", checkCreateNumber(val)); [EOL]     val = "1234.5"; [EOL]     assertTrue("isNumber(String) 2 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 2 failed", checkCreateNumber(val)); [EOL]     val = ".12345"; [EOL]     assertTrue("isNumber(String) 3 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 3 failed", checkCreateNumber(val)); [EOL]     val = "1234E5"; [EOL]     assertTrue("isNumber(String) 4 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 4 failed", checkCreateNumber(val)); [EOL]     val = "1234E+5"; [EOL]     assertTrue("isNumber(String) 5 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 5 failed", checkCreateNumber(val)); [EOL]     val = "1234E-5"; [EOL]     assertTrue("isNumber(String) 6 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 6 failed", checkCreateNumber(val)); [EOL]     val = "123.4E5"; [EOL]     assertTrue("isNumber(String) 7 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 7 failed", checkCreateNumber(val)); [EOL]     val = "-1234"; [EOL]     assertTrue("isNumber(String) 8 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 8 failed", checkCreateNumber(val)); [EOL]     val = "-1234.5"; [EOL]     assertTrue("isNumber(String) 9 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 9 failed", checkCreateNumber(val)); [EOL]     val = "-.12345"; [EOL]     assertTrue("isNumber(String) 10 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 10 failed", checkCreateNumber(val)); [EOL]     val = "-1234E5"; [EOL]     assertTrue("isNumber(String) 11 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 11 failed", checkCreateNumber(val)); [EOL]     val = "0"; [EOL]     assertTrue("isNumber(String) 12 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 12 failed", checkCreateNumber(val)); [EOL]     val = "-0"; [EOL]     assertTrue("isNumber(String) 13 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 13 failed", checkCreateNumber(val)); [EOL]     val = "01234"; [EOL]     assertTrue("isNumber(String) 14 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 14 failed", checkCreateNumber(val)); [EOL]     val = "-01234"; [EOL]     assertTrue("isNumber(String) 15 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 15 failed", checkCreateNumber(val)); [EOL]     val = "0xABC123"; [EOL]     assertTrue("isNumber(String) 16 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 16 failed", checkCreateNumber(val)); [EOL]     val = "0x0"; [EOL]     assertTrue("isNumber(String) 17 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 17 failed", checkCreateNumber(val)); [EOL]     val = "123.4E21D"; [EOL]     assertTrue("isNumber(String) 19 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 19 failed", checkCreateNumber(val)); [EOL]     val = "-221.23F"; [EOL]     assertTrue("isNumber(String) 20 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 20 failed", checkCreateNumber(val)); [EOL]     val = "22338L"; [EOL]     assertTrue("isNumber(String) 21 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 21 failed", checkCreateNumber(val)); [EOL]     val = null; [EOL]     assertTrue("isNumber(String) 1 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 1 Neg failed", !checkCreateNumber(val)); [EOL]     val = ""; [EOL]     assertTrue("isNumber(String) 2 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 2 Neg failed", !checkCreateNumber(val)); [EOL]     val = "--2.3"; [EOL]     assertTrue("isNumber(String) 3 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 3 Neg failed", !checkCreateNumber(val)); [EOL]     val = ".12.3"; [EOL]     assertTrue("isNumber(String) 4 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 4 Neg failed", !checkCreateNumber(val)); [EOL]     val = "-123E"; [EOL]     assertTrue("isNumber(String) 5 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 5 Neg failed", !checkCreateNumber(val)); [EOL]     val = "-123E+-212"; [EOL]     assertTrue("isNumber(String) 6 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 6 Neg failed", !checkCreateNumber(val)); [EOL]     val = "-123E2.12"; [EOL]     assertTrue("isNumber(String) 7 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 7 Neg failed", !checkCreateNumber(val)); [EOL]     val = "0xGF"; [EOL]     assertTrue("isNumber(String) 8 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 8 Neg failed", !checkCreateNumber(val)); [EOL]     val = "0xFAE-1"; [EOL]     assertTrue("isNumber(String) 9 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 9 Neg failed", !checkCreateNumber(val)); [EOL]     val = "."; [EOL]     assertTrue("isNumber(String) 10 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 10 Neg failed", !checkCreateNumber(val)); [EOL]     val = "-0ABC123"; [EOL]     assertTrue("isNumber(String) 11 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 11 Neg failed", !checkCreateNumber(val)); [EOL]     val = "123.4E-D"; [EOL]     assertTrue("isNumber(String) 12 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 12 Neg failed", !checkCreateNumber(val)); [EOL]     val = "123.4ED"; [EOL]     assertTrue("isNumber(String) 13 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 13 Neg failed", !checkCreateNumber(val)); [EOL]     val = "1234E5l"; [EOL]     assertTrue("isNumber(String) 14 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 14 Neg failed", !checkCreateNumber(val)); [EOL]     val = "11a"; [EOL]     assertTrue("isNumber(String) 15 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 15 Neg failed", !checkCreateNumber(val)); [EOL]     val = "1a"; [EOL]     assertTrue("isNumber(String) 16 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 16 Neg failed", !checkCreateNumber(val)); [EOL]     val = "a"; [EOL]     assertTrue("isNumber(String) 17 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 17 Neg failed", !checkCreateNumber(val)); [EOL]     val = "11g"; [EOL]     assertTrue("isNumber(String) 18 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 18 Neg failed", !checkCreateNumber(val)); [EOL]     val = "11z"; [EOL]     assertTrue("isNumber(String) 19 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 19 Neg failed", !checkCreateNumber(val)); [EOL]     val = "11def"; [EOL]     assertTrue("isNumber(String) 20 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 20 Neg failed", !checkCreateNumber(val)); [EOL]     val = "11d11"; [EOL]     assertTrue("isNumber(String) 21 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 21 Neg failed", !checkCreateNumber(val)); [EOL]     val = "11 11"; [EOL]     assertTrue("isNumber(String) 22 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 22 Neg failed", !checkCreateNumber(val)); [EOL]     val = " 1111"; [EOL]     assertTrue("isNumber(String) 23 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 23 Neg failed", !checkCreateNumber(val)); [EOL]     val = "1111 "; [EOL]     assertTrue("isNumber(String) 24 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 24 Neg failed", !checkCreateNumber(val)); [EOL]     val = "2."; [EOL]     assertTrue("isNumber(String) LANG-521 failed", NumberUtils.isNumber(val)); [EOL]     val = "1.1L"; [EOL]     assertFalse("isNumber(String) LANG-664 failed", NumberUtils.isNumber(val)); [EOL] }
@Test [EOL] public void testIsNumber() { [EOL]     String val = "12345"; [EOL]     assertTrue("isNumber(String) 1 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 1 failed", checkCreateNumber(val)); [EOL]     val = "1234.5"; [EOL]     assertTrue("isNumber(String) 2 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 2 failed", checkCreateNumber(val)); [EOL]     val = ".12345"; [EOL]     assertTrue("isNumber(String) 3 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 3 failed", checkCreateNumber(val)); [EOL]     val = "1234E5"; [EOL]     assertTrue("isNumber(String) 4 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 4 failed", checkCreateNumber(val)); [EOL]     val = "1234E+5"; [EOL]     assertTrue("isNumber(String) 5 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 5 failed", checkCreateNumber(val)); [EOL]     val = "1234E-5"; [EOL]     assertTrue("isNumber(String) 6 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 6 failed", checkCreateNumber(val)); [EOL]     val = "123.4E5"; [EOL]     assertTrue("isNumber(String) 7 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 7 failed", checkCreateNumber(val)); [EOL]     val = "-1234"; [EOL]     assertTrue("isNumber(String) 8 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 8 failed", checkCreateNumber(val)); [EOL]     val = "-1234.5"; [EOL]     assertTrue("isNumber(String) 9 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 9 failed", checkCreateNumber(val)); [EOL]     val = "-.12345"; [EOL]     assertTrue("isNumber(String) 10 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 10 failed", checkCreateNumber(val)); [EOL]     val = "-1234E5"; [EOL]     assertTrue("isNumber(String) 11 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 11 failed", checkCreateNumber(val)); [EOL]     val = "0"; [EOL]     assertTrue("isNumber(String) 12 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 12 failed", checkCreateNumber(val)); [EOL]     val = "-0"; [EOL]     assertTrue("isNumber(String) 13 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 13 failed", checkCreateNumber(val)); [EOL]     val = "01234"; [EOL]     assertTrue("isNumber(String) 14 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 14 failed", checkCreateNumber(val)); [EOL]     val = "-01234"; [EOL]     assertTrue("isNumber(String) 15 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 15 failed", checkCreateNumber(val)); [EOL]     val = "0xABC123"; [EOL]     assertTrue("isNumber(String) 16 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 16 failed", checkCreateNumber(val)); [EOL]     val = "0x0"; [EOL]     assertTrue("isNumber(String) 17 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 17 failed", checkCreateNumber(val)); [EOL]     val = "123.4E21D"; [EOL]     assertTrue("isNumber(String) 19 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 19 failed", checkCreateNumber(val)); [EOL]     val = "-221.23F"; [EOL]     assertTrue("isNumber(String) 20 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 20 failed", checkCreateNumber(val)); [EOL]     val = "22338L"; [EOL]     assertTrue("isNumber(String) 21 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 21 failed", checkCreateNumber(val)); [EOL]     val = null; [EOL]     assertTrue("isNumber(String) 1 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 1 Neg failed", !checkCreateNumber(val)); [EOL]     val = ""; [EOL]     assertTrue("isNumber(String) 2 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 2 Neg failed", !checkCreateNumber(val)); [EOL]     val = "--2.3"; [EOL]     assertTrue("isNumber(String) 3 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 3 Neg failed", !checkCreateNumber(val)); [EOL]     val = ".12.3"; [EOL]     assertTrue("isNumber(String) 4 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 4 Neg failed", !checkCreateNumber(val)); [EOL]     val = "-123E"; [EOL]     assertTrue("isNumber(String) 5 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 5 Neg failed", !checkCreateNumber(val)); [EOL]     val = "-123E+-212"; [EOL]     assertTrue("isNumber(String) 6 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 6 Neg failed", !checkCreateNumber(val)); [EOL]     val = "-123E2.12"; [EOL]     assertTrue("isNumber(String) 7 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 7 Neg failed", !checkCreateNumber(val)); [EOL]     val = "0xGF"; [EOL]     assertTrue("isNumber(String) 8 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 8 Neg failed", !checkCreateNumber(val)); [EOL]     val = "0xFAE-1"; [EOL]     assertTrue("isNumber(String) 9 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 9 Neg failed", !checkCreateNumber(val)); [EOL]     val = "."; [EOL]     assertTrue("isNumber(String) 10 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 10 Neg failed", !checkCreateNumber(val)); [EOL]     val = "-0ABC123"; [EOL]     assertTrue("isNumber(String) 11 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 11 Neg failed", !checkCreateNumber(val)); [EOL]     val = "123.4E-D"; [EOL]     assertTrue("isNumber(String) 12 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 12 Neg failed", !checkCreateNumber(val)); [EOL]     val = "123.4ED"; [EOL]     assertTrue("isNumber(String) 13 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 13 Neg failed", !checkCreateNumber(val)); [EOL]     val = "1234E5l"; [EOL]     assertTrue("isNumber(String) 14 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 14 Neg failed", !checkCreateNumber(val)); [EOL]     val = "11a"; [EOL]     assertTrue("isNumber(String) 15 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 15 Neg failed", !checkCreateNumber(val)); [EOL]     val = "1a"; [EOL]     assertTrue("isNumber(String) 16 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 16 Neg failed", !checkCreateNumber(val)); [EOL]     val = "a"; [EOL]     assertTrue("isNumber(String) 17 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 17 Neg failed", !checkCreateNumber(val)); [EOL]     val = "11g"; [EOL]     assertTrue("isNumber(String) 18 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 18 Neg failed", !checkCreateNumber(val)); [EOL]     val = "11z"; [EOL]     assertTrue("isNumber(String) 19 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 19 Neg failed", !checkCreateNumber(val)); [EOL]     val = "11def"; [EOL]     assertTrue("isNumber(String) 20 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 20 Neg failed", !checkCreateNumber(val)); [EOL]     val = "11d11"; [EOL]     assertTrue("isNumber(String) 21 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 21 Neg failed", !checkCreateNumber(val)); [EOL]     val = "11 11"; [EOL]     assertTrue("isNumber(String) 22 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 22 Neg failed", !checkCreateNumber(val)); [EOL]     val = " 1111"; [EOL]     assertTrue("isNumber(String) 23 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 23 Neg failed", !checkCreateNumber(val)); [EOL]     val = "1111 "; [EOL]     assertTrue("isNumber(String) 24 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 24 Neg failed", !checkCreateNumber(val)); [EOL]     val = "2."; [EOL]     assertTrue("isNumber(String) LANG-521 failed", NumberUtils.isNumber(val)); [EOL]     val = "1.1L"; [EOL]     assertFalse("isNumber(String) LANG-664 failed", NumberUtils.isNumber(val)); [EOL] }
@Test [EOL] public void testIsNumber() { [EOL]     String val = "12345"; [EOL]     assertTrue("isNumber(String) 1 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 1 failed", checkCreateNumber(val)); [EOL]     val = "1234.5"; [EOL]     assertTrue("isNumber(String) 2 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 2 failed", checkCreateNumber(val)); [EOL]     val = ".12345"; [EOL]     assertTrue("isNumber(String) 3 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 3 failed", checkCreateNumber(val)); [EOL]     val = "1234E5"; [EOL]     assertTrue("isNumber(String) 4 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 4 failed", checkCreateNumber(val)); [EOL]     val = "1234E+5"; [EOL]     assertTrue("isNumber(String) 5 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 5 failed", checkCreateNumber(val)); [EOL]     val = "1234E-5"; [EOL]     assertTrue("isNumber(String) 6 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 6 failed", checkCreateNumber(val)); [EOL]     val = "123.4E5"; [EOL]     assertTrue("isNumber(String) 7 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 7 failed", checkCreateNumber(val)); [EOL]     val = "-1234"; [EOL]     assertTrue("isNumber(String) 8 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 8 failed", checkCreateNumber(val)); [EOL]     val = "-1234.5"; [EOL]     assertTrue("isNumber(String) 9 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 9 failed", checkCreateNumber(val)); [EOL]     val = "-.12345"; [EOL]     assertTrue("isNumber(String) 10 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 10 failed", checkCreateNumber(val)); [EOL]     val = "-1234E5"; [EOL]     assertTrue("isNumber(String) 11 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 11 failed", checkCreateNumber(val)); [EOL]     val = "0"; [EOL]     assertTrue("isNumber(String) 12 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 12 failed", checkCreateNumber(val)); [EOL]     val = "-0"; [EOL]     assertTrue("isNumber(String) 13 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 13 failed", checkCreateNumber(val)); [EOL]     val = "01234"; [EOL]     assertTrue("isNumber(String) 14 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 14 failed", checkCreateNumber(val)); [EOL]     val = "-01234"; [EOL]     assertTrue("isNumber(String) 15 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 15 failed", checkCreateNumber(val)); [EOL]     val = "0xABC123"; [EOL]     assertTrue("isNumber(String) 16 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 16 failed", checkCreateNumber(val)); [EOL]     val = "0x0"; [EOL]     assertTrue("isNumber(String) 17 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 17 failed", checkCreateNumber(val)); [EOL]     val = "123.4E21D"; [EOL]     assertTrue("isNumber(String) 19 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 19 failed", checkCreateNumber(val)); [EOL]     val = "-221.23F"; [EOL]     assertTrue("isNumber(String) 20 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 20 failed", checkCreateNumber(val)); [EOL]     val = "22338L"; [EOL]     assertTrue("isNumber(String) 21 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 21 failed", checkCreateNumber(val)); [EOL]     val = null; [EOL]     assertTrue("isNumber(String) 1 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 1 Neg failed", !checkCreateNumber(val)); [EOL]     val = ""; [EOL]     assertTrue("isNumber(String) 2 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 2 Neg failed", !checkCreateNumber(val)); [EOL]     val = "--2.3"; [EOL]     assertTrue("isNumber(String) 3 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 3 Neg failed", !checkCreateNumber(val)); [EOL]     val = ".12.3"; [EOL]     assertTrue("isNumber(String) 4 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 4 Neg failed", !checkCreateNumber(val)); [EOL]     val = "-123E"; [EOL]     assertTrue("isNumber(String) 5 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 5 Neg failed", !checkCreateNumber(val)); [EOL]     val = "-123E+-212"; [EOL]     assertTrue("isNumber(String) 6 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 6 Neg failed", !checkCreateNumber(val)); [EOL]     val = "-123E2.12"; [EOL]     assertTrue("isNumber(String) 7 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 7 Neg failed", !checkCreateNumber(val)); [EOL]     val = "0xGF"; [EOL]     assertTrue("isNumber(String) 8 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 8 Neg failed", !checkCreateNumber(val)); [EOL]     val = "0xFAE-1"; [EOL]     assertTrue("isNumber(String) 9 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 9 Neg failed", !checkCreateNumber(val)); [EOL]     val = "."; [EOL]     assertTrue("isNumber(String) 10 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 10 Neg failed", !checkCreateNumber(val)); [EOL]     val = "-0ABC123"; [EOL]     assertTrue("isNumber(String) 11 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 11 Neg failed", !checkCreateNumber(val)); [EOL]     val = "123.4E-D"; [EOL]     assertTrue("isNumber(String) 12 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 12 Neg failed", !checkCreateNumber(val)); [EOL]     val = "123.4ED"; [EOL]     assertTrue("isNumber(String) 13 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 13 Neg failed", !checkCreateNumber(val)); [EOL]     val = "1234E5l"; [EOL]     assertTrue("isNumber(String) 14 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 14 Neg failed", !checkCreateNumber(val)); [EOL]     val = "11a"; [EOL]     assertTrue("isNumber(String) 15 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 15 Neg failed", !checkCreateNumber(val)); [EOL]     val = "1a"; [EOL]     assertTrue("isNumber(String) 16 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 16 Neg failed", !checkCreateNumber(val)); [EOL]     val = "a"; [EOL]     assertTrue("isNumber(String) 17 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 17 Neg failed", !checkCreateNumber(val)); [EOL]     val = "11g"; [EOL]     assertTrue("isNumber(String) 18 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 18 Neg failed", !checkCreateNumber(val)); [EOL]     val = "11z"; [EOL]     assertTrue("isNumber(String) 19 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 19 Neg failed", !checkCreateNumber(val)); [EOL]     val = "11def"; [EOL]     assertTrue("isNumber(String) 20 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 20 Neg failed", !checkCreateNumber(val)); [EOL]     val = "11d11"; [EOL]     assertTrue("isNumber(String) 21 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 21 Neg failed", !checkCreateNumber(val)); [EOL]     val = "11 11"; [EOL]     assertTrue("isNumber(String) 22 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 22 Neg failed", !checkCreateNumber(val)); [EOL]     val = " 1111"; [EOL]     assertTrue("isNumber(String) 23 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 23 Neg failed", !checkCreateNumber(val)); [EOL]     val = "1111 "; [EOL]     assertTrue("isNumber(String) 24 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 24 Neg failed", !checkCreateNumber(val)); [EOL]     val = "2."; [EOL]     assertTrue("isNumber(String) LANG-521 failed", NumberUtils.isNumber(val)); [EOL]     val = "1.1L"; [EOL]     assertFalse("isNumber(String) LANG-664 failed", NumberUtils.isNumber(val)); [EOL] }
@Test [EOL] public void testIsNumber() { [EOL]     String val = "12345"; [EOL]     assertTrue("isNumber(String) 1 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 1 failed", checkCreateNumber(val)); [EOL]     val = "1234.5"; [EOL]     assertTrue("isNumber(String) 2 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 2 failed", checkCreateNumber(val)); [EOL]     val = ".12345"; [EOL]     assertTrue("isNumber(String) 3 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 3 failed", checkCreateNumber(val)); [EOL]     val = "1234E5"; [EOL]     assertTrue("isNumber(String) 4 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 4 failed", checkCreateNumber(val)); [EOL]     val = "1234E+5"; [EOL]     assertTrue("isNumber(String) 5 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 5 failed", checkCreateNumber(val)); [EOL]     val = "1234E-5"; [EOL]     assertTrue("isNumber(String) 6 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 6 failed", checkCreateNumber(val)); [EOL]     val = "123.4E5"; [EOL]     assertTrue("isNumber(String) 7 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 7 failed", checkCreateNumber(val)); [EOL]     val = "-1234"; [EOL]     assertTrue("isNumber(String) 8 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 8 failed", checkCreateNumber(val)); [EOL]     val = "-1234.5"; [EOL]     assertTrue("isNumber(String) 9 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 9 failed", checkCreateNumber(val)); [EOL]     val = "-.12345"; [EOL]     assertTrue("isNumber(String) 10 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 10 failed", checkCreateNumber(val)); [EOL]     val = "-1234E5"; [EOL]     assertTrue("isNumber(String) 11 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 11 failed", checkCreateNumber(val)); [EOL]     val = "0"; [EOL]     assertTrue("isNumber(String) 12 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 12 failed", checkCreateNumber(val)); [EOL]     val = "-0"; [EOL]     assertTrue("isNumber(String) 13 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 13 failed", checkCreateNumber(val)); [EOL]     val = "01234"; [EOL]     assertTrue("isNumber(String) 14 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 14 failed", checkCreateNumber(val)); [EOL]     val = "-01234"; [EOL]     assertTrue("isNumber(String) 15 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 15 failed", checkCreateNumber(val)); [EOL]     val = "0xABC123"; [EOL]     assertTrue("isNumber(String) 16 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 16 failed", checkCreateNumber(val)); [EOL]     val = "0x0"; [EOL]     assertTrue("isNumber(String) 17 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 17 failed", checkCreateNumber(val)); [EOL]     val = "123.4E21D"; [EOL]     assertTrue("isNumber(String) 19 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 19 failed", checkCreateNumber(val)); [EOL]     val = "-221.23F"; [EOL]     assertTrue("isNumber(String) 20 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 20 failed", checkCreateNumber(val)); [EOL]     val = "22338L"; [EOL]     assertTrue("isNumber(String) 21 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 21 failed", checkCreateNumber(val)); [EOL]     val = null; [EOL]     assertTrue("isNumber(String) 1 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 1 Neg failed", !checkCreateNumber(val)); [EOL]     val = ""; [EOL]     assertTrue("isNumber(String) 2 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 2 Neg failed", !checkCreateNumber(val)); [EOL]     val = "--2.3"; [EOL]     assertTrue("isNumber(String) 3 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 3 Neg failed", !checkCreateNumber(val)); [EOL]     val = ".12.3"; [EOL]     assertTrue("isNumber(String) 4 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 4 Neg failed", !checkCreateNumber(val)); [EOL]     val = "-123E"; [EOL]     assertTrue("isNumber(String) 5 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 5 Neg failed", !checkCreateNumber(val)); [EOL]     val = "-123E+-212"; [EOL]     assertTrue("isNumber(String) 6 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 6 Neg failed", !checkCreateNumber(val)); [EOL]     val = "-123E2.12"; [EOL]     assertTrue("isNumber(String) 7 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 7 Neg failed", !checkCreateNumber(val)); [EOL]     val = "0xGF"; [EOL]     assertTrue("isNumber(String) 8 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 8 Neg failed", !checkCreateNumber(val)); [EOL]     val = "0xFAE-1"; [EOL]     assertTrue("isNumber(String) 9 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 9 Neg failed", !checkCreateNumber(val)); [EOL]     val = "."; [EOL]     assertTrue("isNumber(String) 10 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 10 Neg failed", !checkCreateNumber(val)); [EOL]     val = "-0ABC123"; [EOL]     assertTrue("isNumber(String) 11 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 11 Neg failed", !checkCreateNumber(val)); [EOL]     val = "123.4E-D"; [EOL]     assertTrue("isNumber(String) 12 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 12 Neg failed", !checkCreateNumber(val)); [EOL]     val = "123.4ED"; [EOL]     assertTrue("isNumber(String) 13 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 13 Neg failed", !checkCreateNumber(val)); [EOL]     val = "1234E5l"; [EOL]     assertTrue("isNumber(String) 14 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 14 Neg failed", !checkCreateNumber(val)); [EOL]     val = "11a"; [EOL]     assertTrue("isNumber(String) 15 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 15 Neg failed", !checkCreateNumber(val)); [EOL]     val = "1a"; [EOL]     assertTrue("isNumber(String) 16 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 16 Neg failed", !checkCreateNumber(val)); [EOL]     val = "a"; [EOL]     assertTrue("isNumber(String) 17 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 17 Neg failed", !checkCreateNumber(val)); [EOL]     val = "11g"; [EOL]     assertTrue("isNumber(String) 18 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 18 Neg failed", !checkCreateNumber(val)); [EOL]     val = "11z"; [EOL]     assertTrue("isNumber(String) 19 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 19 Neg failed", !checkCreateNumber(val)); [EOL]     val = "11def"; [EOL]     assertTrue("isNumber(String) 20 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 20 Neg failed", !checkCreateNumber(val)); [EOL]     val = "11d11"; [EOL]     assertTrue("isNumber(String) 21 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 21 Neg failed", !checkCreateNumber(val)); [EOL]     val = "11 11"; [EOL]     assertTrue("isNumber(String) 22 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 22 Neg failed", !checkCreateNumber(val)); [EOL]     val = " 1111"; [EOL]     assertTrue("isNumber(String) 23 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 23 Neg failed", !checkCreateNumber(val)); [EOL]     val = "1111 "; [EOL]     assertTrue("isNumber(String) 24 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 24 Neg failed", !checkCreateNumber(val)); [EOL]     val = "2."; [EOL]     assertTrue("isNumber(String) LANG-521 failed", NumberUtils.isNumber(val)); [EOL]     val = "1.1L"; [EOL]     assertFalse("isNumber(String) LANG-664 failed", NumberUtils.isNumber(val)); [EOL] }
@Test [EOL] public void testIsNumber() { [EOL]     String val = "12345"; [EOL]     assertTrue("isNumber(String) 1 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 1 failed", checkCreateNumber(val)); [EOL]     val = "1234.5"; [EOL]     assertTrue("isNumber(String) 2 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 2 failed", checkCreateNumber(val)); [EOL]     val = ".12345"; [EOL]     assertTrue("isNumber(String) 3 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 3 failed", checkCreateNumber(val)); [EOL]     val = "1234E5"; [EOL]     assertTrue("isNumber(String) 4 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 4 failed", checkCreateNumber(val)); [EOL]     val = "1234E+5"; [EOL]     assertTrue("isNumber(String) 5 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 5 failed", checkCreateNumber(val)); [EOL]     val = "1234E-5"; [EOL]     assertTrue("isNumber(String) 6 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 6 failed", checkCreateNumber(val)); [EOL]     val = "123.4E5"; [EOL]     assertTrue("isNumber(String) 7 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 7 failed", checkCreateNumber(val)); [EOL]     val = "-1234"; [EOL]     assertTrue("isNumber(String) 8 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 8 failed", checkCreateNumber(val)); [EOL]     val = "-1234.5"; [EOL]     assertTrue("isNumber(String) 9 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 9 failed", checkCreateNumber(val)); [EOL]     val = "-.12345"; [EOL]     assertTrue("isNumber(String) 10 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 10 failed", checkCreateNumber(val)); [EOL]     val = "-1234E5"; [EOL]     assertTrue("isNumber(String) 11 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 11 failed", checkCreateNumber(val)); [EOL]     val = "0"; [EOL]     assertTrue("isNumber(String) 12 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 12 failed", checkCreateNumber(val)); [EOL]     val = "-0"; [EOL]     assertTrue("isNumber(String) 13 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 13 failed", checkCreateNumber(val)); [EOL]     val = "01234"; [EOL]     assertTrue("isNumber(String) 14 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 14 failed", checkCreateNumber(val)); [EOL]     val = "-01234"; [EOL]     assertTrue("isNumber(String) 15 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 15 failed", checkCreateNumber(val)); [EOL]     val = "0xABC123"; [EOL]     assertTrue("isNumber(String) 16 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 16 failed", checkCreateNumber(val)); [EOL]     val = "0x0"; [EOL]     assertTrue("isNumber(String) 17 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 17 failed", checkCreateNumber(val)); [EOL]     val = "123.4E21D"; [EOL]     assertTrue("isNumber(String) 19 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 19 failed", checkCreateNumber(val)); [EOL]     val = "-221.23F"; [EOL]     assertTrue("isNumber(String) 20 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 20 failed", checkCreateNumber(val)); [EOL]     val = "22338L"; [EOL]     assertTrue("isNumber(String) 21 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 21 failed", checkCreateNumber(val)); [EOL]     val = null; [EOL]     assertTrue("isNumber(String) 1 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 1 Neg failed", !checkCreateNumber(val)); [EOL]     val = ""; [EOL]     assertTrue("isNumber(String) 2 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 2 Neg failed", !checkCreateNumber(val)); [EOL]     val = "--2.3"; [EOL]     assertTrue("isNumber(String) 3 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 3 Neg failed", !checkCreateNumber(val)); [EOL]     val = ".12.3"; [EOL]     assertTrue("isNumber(String) 4 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 4 Neg failed", !checkCreateNumber(val)); [EOL]     val = "-123E"; [EOL]     assertTrue("isNumber(String) 5 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 5 Neg failed", !checkCreateNumber(val)); [EOL]     val = "-123E+-212"; [EOL]     assertTrue("isNumber(String) 6 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 6 Neg failed", !checkCreateNumber(val)); [EOL]     val = "-123E2.12"; [EOL]     assertTrue("isNumber(String) 7 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 7 Neg failed", !checkCreateNumber(val)); [EOL]     val = "0xGF"; [EOL]     assertTrue("isNumber(String) 8 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 8 Neg failed", !checkCreateNumber(val)); [EOL]     val = "0xFAE-1"; [EOL]     assertTrue("isNumber(String) 9 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 9 Neg failed", !checkCreateNumber(val)); [EOL]     val = "."; [EOL]     assertTrue("isNumber(String) 10 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 10 Neg failed", !checkCreateNumber(val)); [EOL]     val = "-0ABC123"; [EOL]     assertTrue("isNumber(String) 11 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 11 Neg failed", !checkCreateNumber(val)); [EOL]     val = "123.4E-D"; [EOL]     assertTrue("isNumber(String) 12 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 12 Neg failed", !checkCreateNumber(val)); [EOL]     val = "123.4ED"; [EOL]     assertTrue("isNumber(String) 13 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 13 Neg failed", !checkCreateNumber(val)); [EOL]     val = "1234E5l"; [EOL]     assertTrue("isNumber(String) 14 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 14 Neg failed", !checkCreateNumber(val)); [EOL]     val = "11a"; [EOL]     assertTrue("isNumber(String) 15 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 15 Neg failed", !checkCreateNumber(val)); [EOL]     val = "1a"; [EOL]     assertTrue("isNumber(String) 16 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 16 Neg failed", !checkCreateNumber(val)); [EOL]     val = "a"; [EOL]     assertTrue("isNumber(String) 17 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 17 Neg failed", !checkCreateNumber(val)); [EOL]     val = "11g"; [EOL]     assertTrue("isNumber(String) 18 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 18 Neg failed", !checkCreateNumber(val)); [EOL]     val = "11z"; [EOL]     assertTrue("isNumber(String) 19 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 19 Neg failed", !checkCreateNumber(val)); [EOL]     val = "11def"; [EOL]     assertTrue("isNumber(String) 20 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 20 Neg failed", !checkCreateNumber(val)); [EOL]     val = "11d11"; [EOL]     assertTrue("isNumber(String) 21 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 21 Neg failed", !checkCreateNumber(val)); [EOL]     val = "11 11"; [EOL]     assertTrue("isNumber(String) 22 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 22 Neg failed", !checkCreateNumber(val)); [EOL]     val = " 1111"; [EOL]     assertTrue("isNumber(String) 23 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 23 Neg failed", !checkCreateNumber(val)); [EOL]     val = "1111 "; [EOL]     assertTrue("isNumber(String) 24 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 24 Neg failed", !checkCreateNumber(val)); [EOL]     val = "2."; [EOL]     assertTrue("isNumber(String) LANG-521 failed", NumberUtils.isNumber(val)); [EOL]     val = "1.1L"; [EOL]     assertFalse("isNumber(String) LANG-664 failed", NumberUtils.isNumber(val)); [EOL] }
@Test [EOL] public void testIsNumber() { [EOL]     String val = "12345"; [EOL]     assertTrue("isNumber(String) 1 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 1 failed", checkCreateNumber(val)); [EOL]     val = "1234.5"; [EOL]     assertTrue("isNumber(String) 2 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 2 failed", checkCreateNumber(val)); [EOL]     val = ".12345"; [EOL]     assertTrue("isNumber(String) 3 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 3 failed", checkCreateNumber(val)); [EOL]     val = "1234E5"; [EOL]     assertTrue("isNumber(String) 4 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 4 failed", checkCreateNumber(val)); [EOL]     val = "1234E+5"; [EOL]     assertTrue("isNumber(String) 5 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 5 failed", checkCreateNumber(val)); [EOL]     val = "1234E-5"; [EOL]     assertTrue("isNumber(String) 6 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 6 failed", checkCreateNumber(val)); [EOL]     val = "123.4E5"; [EOL]     assertTrue("isNumber(String) 7 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 7 failed", checkCreateNumber(val)); [EOL]     val = "-1234"; [EOL]     assertTrue("isNumber(String) 8 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 8 failed", checkCreateNumber(val)); [EOL]     val = "-1234.5"; [EOL]     assertTrue("isNumber(String) 9 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 9 failed", checkCreateNumber(val)); [EOL]     val = "-.12345"; [EOL]     assertTrue("isNumber(String) 10 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 10 failed", checkCreateNumber(val)); [EOL]     val = "-1234E5"; [EOL]     assertTrue("isNumber(String) 11 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 11 failed", checkCreateNumber(val)); [EOL]     val = "0"; [EOL]     assertTrue("isNumber(String) 12 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 12 failed", checkCreateNumber(val)); [EOL]     val = "-0"; [EOL]     assertTrue("isNumber(String) 13 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 13 failed", checkCreateNumber(val)); [EOL]     val = "01234"; [EOL]     assertTrue("isNumber(String) 14 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 14 failed", checkCreateNumber(val)); [EOL]     val = "-01234"; [EOL]     assertTrue("isNumber(String) 15 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 15 failed", checkCreateNumber(val)); [EOL]     val = "0xABC123"; [EOL]     assertTrue("isNumber(String) 16 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 16 failed", checkCreateNumber(val)); [EOL]     val = "0x0"; [EOL]     assertTrue("isNumber(String) 17 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 17 failed", checkCreateNumber(val)); [EOL]     val = "123.4E21D"; [EOL]     assertTrue("isNumber(String) 19 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 19 failed", checkCreateNumber(val)); [EOL]     val = "-221.23F"; [EOL]     assertTrue("isNumber(String) 20 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 20 failed", checkCreateNumber(val)); [EOL]     val = "22338L"; [EOL]     assertTrue("isNumber(String) 21 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 21 failed", checkCreateNumber(val)); [EOL]     val = null; [EOL]     assertTrue("isNumber(String) 1 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 1 Neg failed", !checkCreateNumber(val)); [EOL]     val = ""; [EOL]     assertTrue("isNumber(String) 2 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 2 Neg failed", !checkCreateNumber(val)); [EOL]     val = "--2.3"; [EOL]     assertTrue("isNumber(String) 3 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 3 Neg failed", !checkCreateNumber(val)); [EOL]     val = ".12.3"; [EOL]     assertTrue("isNumber(String) 4 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 4 Neg failed", !checkCreateNumber(val)); [EOL]     val = "-123E"; [EOL]     assertTrue("isNumber(String) 5 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 5 Neg failed", !checkCreateNumber(val)); [EOL]     val = "-123E+-212"; [EOL]     assertTrue("isNumber(String) 6 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 6 Neg failed", !checkCreateNumber(val)); [EOL]     val = "-123E2.12"; [EOL]     assertTrue("isNumber(String) 7 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 7 Neg failed", !checkCreateNumber(val)); [EOL]     val = "0xGF"; [EOL]     assertTrue("isNumber(String) 8 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 8 Neg failed", !checkCreateNumber(val)); [EOL]     val = "0xFAE-1"; [EOL]     assertTrue("isNumber(String) 9 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 9 Neg failed", !checkCreateNumber(val)); [EOL]     val = "."; [EOL]     assertTrue("isNumber(String) 10 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 10 Neg failed", !checkCreateNumber(val)); [EOL]     val = "-0ABC123"; [EOL]     assertTrue("isNumber(String) 11 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 11 Neg failed", !checkCreateNumber(val)); [EOL]     val = "123.4E-D"; [EOL]     assertTrue("isNumber(String) 12 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 12 Neg failed", !checkCreateNumber(val)); [EOL]     val = "123.4ED"; [EOL]     assertTrue("isNumber(String) 13 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 13 Neg failed", !checkCreateNumber(val)); [EOL]     val = "1234E5l"; [EOL]     assertTrue("isNumber(String) 14 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 14 Neg failed", !checkCreateNumber(val)); [EOL]     val = "11a"; [EOL]     assertTrue("isNumber(String) 15 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 15 Neg failed", !checkCreateNumber(val)); [EOL]     val = "1a"; [EOL]     assertTrue("isNumber(String) 16 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 16 Neg failed", !checkCreateNumber(val)); [EOL]     val = "a"; [EOL]     assertTrue("isNumber(String) 17 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 17 Neg failed", !checkCreateNumber(val)); [EOL]     val = "11g"; [EOL]     assertTrue("isNumber(String) 18 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 18 Neg failed", !checkCreateNumber(val)); [EOL]     val = "11z"; [EOL]     assertTrue("isNumber(String) 19 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 19 Neg failed", !checkCreateNumber(val)); [EOL]     val = "11def"; [EOL]     assertTrue("isNumber(String) 20 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 20 Neg failed", !checkCreateNumber(val)); [EOL]     val = "11d11"; [EOL]     assertTrue("isNumber(String) 21 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 21 Neg failed", !checkCreateNumber(val)); [EOL]     val = "11 11"; [EOL]     assertTrue("isNumber(String) 22 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 22 Neg failed", !checkCreateNumber(val)); [EOL]     val = " 1111"; [EOL]     assertTrue("isNumber(String) 23 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 23 Neg failed", !checkCreateNumber(val)); [EOL]     val = "1111 "; [EOL]     assertTrue("isNumber(String) 24 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 24 Neg failed", !checkCreateNumber(val)); [EOL]     val = "2."; [EOL]     assertTrue("isNumber(String) LANG-521 failed", NumberUtils.isNumber(val)); [EOL]     val = "1.1L"; [EOL]     assertFalse("isNumber(String) LANG-664 failed", NumberUtils.isNumber(val)); [EOL] }
@Test [EOL] public void testIsNumber() { [EOL]     String val = "12345"; [EOL]     assertTrue("isNumber(String) 1 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 1 failed", checkCreateNumber(val)); [EOL]     val = "1234.5"; [EOL]     assertTrue("isNumber(String) 2 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 2 failed", checkCreateNumber(val)); [EOL]     val = ".12345"; [EOL]     assertTrue("isNumber(String) 3 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 3 failed", checkCreateNumber(val)); [EOL]     val = "1234E5"; [EOL]     assertTrue("isNumber(String) 4 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 4 failed", checkCreateNumber(val)); [EOL]     val = "1234E+5"; [EOL]     assertTrue("isNumber(String) 5 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 5 failed", checkCreateNumber(val)); [EOL]     val = "1234E-5"; [EOL]     assertTrue("isNumber(String) 6 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 6 failed", checkCreateNumber(val)); [EOL]     val = "123.4E5"; [EOL]     assertTrue("isNumber(String) 7 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 7 failed", checkCreateNumber(val)); [EOL]     val = "-1234"; [EOL]     assertTrue("isNumber(String) 8 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 8 failed", checkCreateNumber(val)); [EOL]     val = "-1234.5"; [EOL]     assertTrue("isNumber(String) 9 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 9 failed", checkCreateNumber(val)); [EOL]     val = "-.12345"; [EOL]     assertTrue("isNumber(String) 10 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 10 failed", checkCreateNumber(val)); [EOL]     val = "-1234E5"; [EOL]     assertTrue("isNumber(String) 11 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 11 failed", checkCreateNumber(val)); [EOL]     val = "0"; [EOL]     assertTrue("isNumber(String) 12 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 12 failed", checkCreateNumber(val)); [EOL]     val = "-0"; [EOL]     assertTrue("isNumber(String) 13 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 13 failed", checkCreateNumber(val)); [EOL]     val = "01234"; [EOL]     assertTrue("isNumber(String) 14 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 14 failed", checkCreateNumber(val)); [EOL]     val = "-01234"; [EOL]     assertTrue("isNumber(String) 15 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 15 failed", checkCreateNumber(val)); [EOL]     val = "0xABC123"; [EOL]     assertTrue("isNumber(String) 16 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 16 failed", checkCreateNumber(val)); [EOL]     val = "0x0"; [EOL]     assertTrue("isNumber(String) 17 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 17 failed", checkCreateNumber(val)); [EOL]     val = "123.4E21D"; [EOL]     assertTrue("isNumber(String) 19 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 19 failed", checkCreateNumber(val)); [EOL]     val = "-221.23F"; [EOL]     assertTrue("isNumber(String) 20 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 20 failed", checkCreateNumber(val)); [EOL]     val = "22338L"; [EOL]     assertTrue("isNumber(String) 21 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 21 failed", checkCreateNumber(val)); [EOL]     val = null; [EOL]     assertTrue("isNumber(String) 1 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 1 Neg failed", !checkCreateNumber(val)); [EOL]     val = ""; [EOL]     assertTrue("isNumber(String) 2 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 2 Neg failed", !checkCreateNumber(val)); [EOL]     val = "--2.3"; [EOL]     assertTrue("isNumber(String) 3 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 3 Neg failed", !checkCreateNumber(val)); [EOL]     val = ".12.3"; [EOL]     assertTrue("isNumber(String) 4 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 4 Neg failed", !checkCreateNumber(val)); [EOL]     val = "-123E"; [EOL]     assertTrue("isNumber(String) 5 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 5 Neg failed", !checkCreateNumber(val)); [EOL]     val = "-123E+-212"; [EOL]     assertTrue("isNumber(String) 6 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 6 Neg failed", !checkCreateNumber(val)); [EOL]     val = "-123E2.12"; [EOL]     assertTrue("isNumber(String) 7 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 7 Neg failed", !checkCreateNumber(val)); [EOL]     val = "0xGF"; [EOL]     assertTrue("isNumber(String) 8 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 8 Neg failed", !checkCreateNumber(val)); [EOL]     val = "0xFAE-1"; [EOL]     assertTrue("isNumber(String) 9 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 9 Neg failed", !checkCreateNumber(val)); [EOL]     val = "."; [EOL]     assertTrue("isNumber(String) 10 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 10 Neg failed", !checkCreateNumber(val)); [EOL]     val = "-0ABC123"; [EOL]     assertTrue("isNumber(String) 11 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 11 Neg failed", !checkCreateNumber(val)); [EOL]     val = "123.4E-D"; [EOL]     assertTrue("isNumber(String) 12 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 12 Neg failed", !checkCreateNumber(val)); [EOL]     val = "123.4ED"; [EOL]     assertTrue("isNumber(String) 13 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 13 Neg failed", !checkCreateNumber(val)); [EOL]     val = "1234E5l"; [EOL]     assertTrue("isNumber(String) 14 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 14 Neg failed", !checkCreateNumber(val)); [EOL]     val = "11a"; [EOL]     assertTrue("isNumber(String) 15 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 15 Neg failed", !checkCreateNumber(val)); [EOL]     val = "1a"; [EOL]     assertTrue("isNumber(String) 16 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 16 Neg failed", !checkCreateNumber(val)); [EOL]     val = "a"; [EOL]     assertTrue("isNumber(String) 17 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 17 Neg failed", !checkCreateNumber(val)); [EOL]     val = "11g"; [EOL]     assertTrue("isNumber(String) 18 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 18 Neg failed", !checkCreateNumber(val)); [EOL]     val = "11z"; [EOL]     assertTrue("isNumber(String) 19 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 19 Neg failed", !checkCreateNumber(val)); [EOL]     val = "11def"; [EOL]     assertTrue("isNumber(String) 20 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 20 Neg failed", !checkCreateNumber(val)); [EOL]     val = "11d11"; [EOL]     assertTrue("isNumber(String) 21 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 21 Neg failed", !checkCreateNumber(val)); [EOL]     val = "11 11"; [EOL]     assertTrue("isNumber(String) 22 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 22 Neg failed", !checkCreateNumber(val)); [EOL]     val = " 1111"; [EOL]     assertTrue("isNumber(String) 23 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 23 Neg failed", !checkCreateNumber(val)); [EOL]     val = "1111 "; [EOL]     assertTrue("isNumber(String) 24 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 24 Neg failed", !checkCreateNumber(val)); [EOL]     val = "2."; [EOL]     assertTrue("isNumber(String) LANG-521 failed", NumberUtils.isNumber(val)); [EOL]     val = "1.1L"; [EOL]     assertFalse("isNumber(String) LANG-664 failed", NumberUtils.isNumber(val)); [EOL] }
@Test [EOL] public void testIsNumber() { [EOL]     String val = "12345"; [EOL]     assertTrue("isNumber(String) 1 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 1 failed", checkCreateNumber(val)); [EOL]     val = "1234.5"; [EOL]     assertTrue("isNumber(String) 2 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 2 failed", checkCreateNumber(val)); [EOL]     val = ".12345"; [EOL]     assertTrue("isNumber(String) 3 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 3 failed", checkCreateNumber(val)); [EOL]     val = "1234E5"; [EOL]     assertTrue("isNumber(String) 4 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 4 failed", checkCreateNumber(val)); [EOL]     val = "1234E+5"; [EOL]     assertTrue("isNumber(String) 5 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 5 failed", checkCreateNumber(val)); [EOL]     val = "1234E-5"; [EOL]     assertTrue("isNumber(String) 6 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 6 failed", checkCreateNumber(val)); [EOL]     val = "123.4E5"; [EOL]     assertTrue("isNumber(String) 7 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 7 failed", checkCreateNumber(val)); [EOL]     val = "-1234"; [EOL]     assertTrue("isNumber(String) 8 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 8 failed", checkCreateNumber(val)); [EOL]     val = "-1234.5"; [EOL]     assertTrue("isNumber(String) 9 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 9 failed", checkCreateNumber(val)); [EOL]     val = "-.12345"; [EOL]     assertTrue("isNumber(String) 10 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 10 failed", checkCreateNumber(val)); [EOL]     val = "-1234E5"; [EOL]     assertTrue("isNumber(String) 11 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 11 failed", checkCreateNumber(val)); [EOL]     val = "0"; [EOL]     assertTrue("isNumber(String) 12 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 12 failed", checkCreateNumber(val)); [EOL]     val = "-0"; [EOL]     assertTrue("isNumber(String) 13 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 13 failed", checkCreateNumber(val)); [EOL]     val = "01234"; [EOL]     assertTrue("isNumber(String) 14 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 14 failed", checkCreateNumber(val)); [EOL]     val = "-01234"; [EOL]     assertTrue("isNumber(String) 15 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 15 failed", checkCreateNumber(val)); [EOL]     val = "0xABC123"; [EOL]     assertTrue("isNumber(String) 16 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 16 failed", checkCreateNumber(val)); [EOL]     val = "0x0"; [EOL]     assertTrue("isNumber(String) 17 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 17 failed", checkCreateNumber(val)); [EOL]     val = "123.4E21D"; [EOL]     assertTrue("isNumber(String) 19 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 19 failed", checkCreateNumber(val)); [EOL]     val = "-221.23F"; [EOL]     assertTrue("isNumber(String) 20 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 20 failed", checkCreateNumber(val)); [EOL]     val = "22338L"; [EOL]     assertTrue("isNumber(String) 21 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 21 failed", checkCreateNumber(val)); [EOL]     val = null; [EOL]     assertTrue("isNumber(String) 1 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 1 Neg failed", !checkCreateNumber(val)); [EOL]     val = ""; [EOL]     assertTrue("isNumber(String) 2 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 2 Neg failed", !checkCreateNumber(val)); [EOL]     val = "--2.3"; [EOL]     assertTrue("isNumber(String) 3 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 3 Neg failed", !checkCreateNumber(val)); [EOL]     val = ".12.3"; [EOL]     assertTrue("isNumber(String) 4 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 4 Neg failed", !checkCreateNumber(val)); [EOL]     val = "-123E"; [EOL]     assertTrue("isNumber(String) 5 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 5 Neg failed", !checkCreateNumber(val)); [EOL]     val = "-123E+-212"; [EOL]     assertTrue("isNumber(String) 6 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 6 Neg failed", !checkCreateNumber(val)); [EOL]     val = "-123E2.12"; [EOL]     assertTrue("isNumber(String) 7 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 7 Neg failed", !checkCreateNumber(val)); [EOL]     val = "0xGF"; [EOL]     assertTrue("isNumber(String) 8 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 8 Neg failed", !checkCreateNumber(val)); [EOL]     val = "0xFAE-1"; [EOL]     assertTrue("isNumber(String) 9 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 9 Neg failed", !checkCreateNumber(val)); [EOL]     val = "."; [EOL]     assertTrue("isNumber(String) 10 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 10 Neg failed", !checkCreateNumber(val)); [EOL]     val = "-0ABC123"; [EOL]     assertTrue("isNumber(String) 11 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 11 Neg failed", !checkCreateNumber(val)); [EOL]     val = "123.4E-D"; [EOL]     assertTrue("isNumber(String) 12 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 12 Neg failed", !checkCreateNumber(val)); [EOL]     val = "123.4ED"; [EOL]     assertTrue("isNumber(String) 13 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 13 Neg failed", !checkCreateNumber(val)); [EOL]     val = "1234E5l"; [EOL]     assertTrue("isNumber(String) 14 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 14 Neg failed", !checkCreateNumber(val)); [EOL]     val = "11a"; [EOL]     assertTrue("isNumber(String) 15 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 15 Neg failed", !checkCreateNumber(val)); [EOL]     val = "1a"; [EOL]     assertTrue("isNumber(String) 16 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 16 Neg failed", !checkCreateNumber(val)); [EOL]     val = "a"; [EOL]     assertTrue("isNumber(String) 17 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 17 Neg failed", !checkCreateNumber(val)); [EOL]     val = "11g"; [EOL]     assertTrue("isNumber(String) 18 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 18 Neg failed", !checkCreateNumber(val)); [EOL]     val = "11z"; [EOL]     assertTrue("isNumber(String) 19 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 19 Neg failed", !checkCreateNumber(val)); [EOL]     val = "11def"; [EOL]     assertTrue("isNumber(String) 20 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 20 Neg failed", !checkCreateNumber(val)); [EOL]     val = "11d11"; [EOL]     assertTrue("isNumber(String) 21 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 21 Neg failed", !checkCreateNumber(val)); [EOL]     val = "11 11"; [EOL]     assertTrue("isNumber(String) 22 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 22 Neg failed", !checkCreateNumber(val)); [EOL]     val = " 1111"; [EOL]     assertTrue("isNumber(String) 23 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 23 Neg failed", !checkCreateNumber(val)); [EOL]     val = "1111 "; [EOL]     assertTrue("isNumber(String) 24 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 24 Neg failed", !checkCreateNumber(val)); [EOL]     val = "2."; [EOL]     assertTrue("isNumber(String) LANG-521 failed", NumberUtils.isNumber(val)); [EOL]     val = "1.1L"; [EOL]     assertFalse("isNumber(String) LANG-664 failed", NumberUtils.isNumber(val)); [EOL] }
@Test [EOL] public void testIsNumber() { [EOL]     String val = "12345"; [EOL]     assertTrue("isNumber(String) 1 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 1 failed", checkCreateNumber(val)); [EOL]     val = "1234.5"; [EOL]     assertTrue("isNumber(String) 2 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 2 failed", checkCreateNumber(val)); [EOL]     val = ".12345"; [EOL]     assertTrue("isNumber(String) 3 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 3 failed", checkCreateNumber(val)); [EOL]     val = "1234E5"; [EOL]     assertTrue("isNumber(String) 4 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 4 failed", checkCreateNumber(val)); [EOL]     val = "1234E+5"; [EOL]     assertTrue("isNumber(String) 5 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 5 failed", checkCreateNumber(val)); [EOL]     val = "1234E-5"; [EOL]     assertTrue("isNumber(String) 6 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 6 failed", checkCreateNumber(val)); [EOL]     val = "123.4E5"; [EOL]     assertTrue("isNumber(String) 7 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 7 failed", checkCreateNumber(val)); [EOL]     val = "-1234"; [EOL]     assertTrue("isNumber(String) 8 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 8 failed", checkCreateNumber(val)); [EOL]     val = "-1234.5"; [EOL]     assertTrue("isNumber(String) 9 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 9 failed", checkCreateNumber(val)); [EOL]     val = "-.12345"; [EOL]     assertTrue("isNumber(String) 10 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 10 failed", checkCreateNumber(val)); [EOL]     val = "-1234E5"; [EOL]     assertTrue("isNumber(String) 11 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 11 failed", checkCreateNumber(val)); [EOL]     val = "0"; [EOL]     assertTrue("isNumber(String) 12 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 12 failed", checkCreateNumber(val)); [EOL]     val = "-0"; [EOL]     assertTrue("isNumber(String) 13 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 13 failed", checkCreateNumber(val)); [EOL]     val = "01234"; [EOL]     assertTrue("isNumber(String) 14 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 14 failed", checkCreateNumber(val)); [EOL]     val = "-01234"; [EOL]     assertTrue("isNumber(String) 15 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 15 failed", checkCreateNumber(val)); [EOL]     val = "0xABC123"; [EOL]     assertTrue("isNumber(String) 16 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 16 failed", checkCreateNumber(val)); [EOL]     val = "0x0"; [EOL]     assertTrue("isNumber(String) 17 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 17 failed", checkCreateNumber(val)); [EOL]     val = "123.4E21D"; [EOL]     assertTrue("isNumber(String) 19 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 19 failed", checkCreateNumber(val)); [EOL]     val = "-221.23F"; [EOL]     assertTrue("isNumber(String) 20 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 20 failed", checkCreateNumber(val)); [EOL]     val = "22338L"; [EOL]     assertTrue("isNumber(String) 21 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 21 failed", checkCreateNumber(val)); [EOL]     val = null; [EOL]     assertTrue("isNumber(String) 1 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 1 Neg failed", !checkCreateNumber(val)); [EOL]     val = ""; [EOL]     assertTrue("isNumber(String) 2 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 2 Neg failed", !checkCreateNumber(val)); [EOL]     val = "--2.3"; [EOL]     assertTrue("isNumber(String) 3 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 3 Neg failed", !checkCreateNumber(val)); [EOL]     val = ".12.3"; [EOL]     assertTrue("isNumber(String) 4 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 4 Neg failed", !checkCreateNumber(val)); [EOL]     val = "-123E"; [EOL]     assertTrue("isNumber(String) 5 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 5 Neg failed", !checkCreateNumber(val)); [EOL]     val = "-123E+-212"; [EOL]     assertTrue("isNumber(String) 6 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 6 Neg failed", !checkCreateNumber(val)); [EOL]     val = "-123E2.12"; [EOL]     assertTrue("isNumber(String) 7 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 7 Neg failed", !checkCreateNumber(val)); [EOL]     val = "0xGF"; [EOL]     assertTrue("isNumber(String) 8 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 8 Neg failed", !checkCreateNumber(val)); [EOL]     val = "0xFAE-1"; [EOL]     assertTrue("isNumber(String) 9 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 9 Neg failed", !checkCreateNumber(val)); [EOL]     val = "."; [EOL]     assertTrue("isNumber(String) 10 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 10 Neg failed", !checkCreateNumber(val)); [EOL]     val = "-0ABC123"; [EOL]     assertTrue("isNumber(String) 11 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 11 Neg failed", !checkCreateNumber(val)); [EOL]     val = "123.4E-D"; [EOL]     assertTrue("isNumber(String) 12 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 12 Neg failed", !checkCreateNumber(val)); [EOL]     val = "123.4ED"; [EOL]     assertTrue("isNumber(String) 13 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 13 Neg failed", !checkCreateNumber(val)); [EOL]     val = "1234E5l"; [EOL]     assertTrue("isNumber(String) 14 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 14 Neg failed", !checkCreateNumber(val)); [EOL]     val = "11a"; [EOL]     assertTrue("isNumber(String) 15 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 15 Neg failed", !checkCreateNumber(val)); [EOL]     val = "1a"; [EOL]     assertTrue("isNumber(String) 16 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 16 Neg failed", !checkCreateNumber(val)); [EOL]     val = "a"; [EOL]     assertTrue("isNumber(String) 17 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 17 Neg failed", !checkCreateNumber(val)); [EOL]     val = "11g"; [EOL]     assertTrue("isNumber(String) 18 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 18 Neg failed", !checkCreateNumber(val)); [EOL]     val = "11z"; [EOL]     assertTrue("isNumber(String) 19 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 19 Neg failed", !checkCreateNumber(val)); [EOL]     val = "11def"; [EOL]     assertTrue("isNumber(String) 20 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 20 Neg failed", !checkCreateNumber(val)); [EOL]     val = "11d11"; [EOL]     assertTrue("isNumber(String) 21 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 21 Neg failed", !checkCreateNumber(val)); [EOL]     val = "11 11"; [EOL]     assertTrue("isNumber(String) 22 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 22 Neg failed", !checkCreateNumber(val)); [EOL]     val = " 1111"; [EOL]     assertTrue("isNumber(String) 23 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 23 Neg failed", !checkCreateNumber(val)); [EOL]     val = "1111 "; [EOL]     assertTrue("isNumber(String) 24 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 24 Neg failed", !checkCreateNumber(val)); [EOL]     val = "2."; [EOL]     assertTrue("isNumber(String) LANG-521 failed", NumberUtils.isNumber(val)); [EOL]     val = "1.1L"; [EOL]     assertFalse("isNumber(String) LANG-664 failed", NumberUtils.isNumber(val)); [EOL] }
@Test [EOL] public void testIsNumber() { [EOL]     String val = "12345"; [EOL]     assertTrue("isNumber(String) 1 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 1 failed", checkCreateNumber(val)); [EOL]     val = "1234.5"; [EOL]     assertTrue("isNumber(String) 2 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 2 failed", checkCreateNumber(val)); [EOL]     val = ".12345"; [EOL]     assertTrue("isNumber(String) 3 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 3 failed", checkCreateNumber(val)); [EOL]     val = "1234E5"; [EOL]     assertTrue("isNumber(String) 4 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 4 failed", checkCreateNumber(val)); [EOL]     val = "1234E+5"; [EOL]     assertTrue("isNumber(String) 5 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 5 failed", checkCreateNumber(val)); [EOL]     val = "1234E-5"; [EOL]     assertTrue("isNumber(String) 6 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 6 failed", checkCreateNumber(val)); [EOL]     val = "123.4E5"; [EOL]     assertTrue("isNumber(String) 7 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 7 failed", checkCreateNumber(val)); [EOL]     val = "-1234"; [EOL]     assertTrue("isNumber(String) 8 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 8 failed", checkCreateNumber(val)); [EOL]     val = "-1234.5"; [EOL]     assertTrue("isNumber(String) 9 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 9 failed", checkCreateNumber(val)); [EOL]     val = "-.12345"; [EOL]     assertTrue("isNumber(String) 10 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 10 failed", checkCreateNumber(val)); [EOL]     val = "-1234E5"; [EOL]     assertTrue("isNumber(String) 11 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 11 failed", checkCreateNumber(val)); [EOL]     val = "0"; [EOL]     assertTrue("isNumber(String) 12 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 12 failed", checkCreateNumber(val)); [EOL]     val = "-0"; [EOL]     assertTrue("isNumber(String) 13 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 13 failed", checkCreateNumber(val)); [EOL]     val = "01234"; [EOL]     assertTrue("isNumber(String) 14 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 14 failed", checkCreateNumber(val)); [EOL]     val = "-01234"; [EOL]     assertTrue("isNumber(String) 15 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 15 failed", checkCreateNumber(val)); [EOL]     val = "0xABC123"; [EOL]     assertTrue("isNumber(String) 16 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 16 failed", checkCreateNumber(val)); [EOL]     val = "0x0"; [EOL]     assertTrue("isNumber(String) 17 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 17 failed", checkCreateNumber(val)); [EOL]     val = "123.4E21D"; [EOL]     assertTrue("isNumber(String) 19 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 19 failed", checkCreateNumber(val)); [EOL]     val = "-221.23F"; [EOL]     assertTrue("isNumber(String) 20 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 20 failed", checkCreateNumber(val)); [EOL]     val = "22338L"; [EOL]     assertTrue("isNumber(String) 21 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 21 failed", checkCreateNumber(val)); [EOL]     val = null; [EOL]     assertTrue("isNumber(String) 1 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 1 Neg failed", !checkCreateNumber(val)); [EOL]     val = ""; [EOL]     assertTrue("isNumber(String) 2 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 2 Neg failed", !checkCreateNumber(val)); [EOL]     val = "--2.3"; [EOL]     assertTrue("isNumber(String) 3 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 3 Neg failed", !checkCreateNumber(val)); [EOL]     val = ".12.3"; [EOL]     assertTrue("isNumber(String) 4 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 4 Neg failed", !checkCreateNumber(val)); [EOL]     val = "-123E"; [EOL]     assertTrue("isNumber(String) 5 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 5 Neg failed", !checkCreateNumber(val)); [EOL]     val = "-123E+-212"; [EOL]     assertTrue("isNumber(String) 6 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 6 Neg failed", !checkCreateNumber(val)); [EOL]     val = "-123E2.12"; [EOL]     assertTrue("isNumber(String) 7 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 7 Neg failed", !checkCreateNumber(val)); [EOL]     val = "0xGF"; [EOL]     assertTrue("isNumber(String) 8 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 8 Neg failed", !checkCreateNumber(val)); [EOL]     val = "0xFAE-1"; [EOL]     assertTrue("isNumber(String) 9 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 9 Neg failed", !checkCreateNumber(val)); [EOL]     val = "."; [EOL]     assertTrue("isNumber(String) 10 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 10 Neg failed", !checkCreateNumber(val)); [EOL]     val = "-0ABC123"; [EOL]     assertTrue("isNumber(String) 11 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 11 Neg failed", !checkCreateNumber(val)); [EOL]     val = "123.4E-D"; [EOL]     assertTrue("isNumber(String) 12 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 12 Neg failed", !checkCreateNumber(val)); [EOL]     val = "123.4ED"; [EOL]     assertTrue("isNumber(String) 13 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 13 Neg failed", !checkCreateNumber(val)); [EOL]     val = "1234E5l"; [EOL]     assertTrue("isNumber(String) 14 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 14 Neg failed", !checkCreateNumber(val)); [EOL]     val = "11a"; [EOL]     assertTrue("isNumber(String) 15 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 15 Neg failed", !checkCreateNumber(val)); [EOL]     val = "1a"; [EOL]     assertTrue("isNumber(String) 16 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 16 Neg failed", !checkCreateNumber(val)); [EOL]     val = "a"; [EOL]     assertTrue("isNumber(String) 17 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 17 Neg failed", !checkCreateNumber(val)); [EOL]     val = "11g"; [EOL]     assertTrue("isNumber(String) 18 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 18 Neg failed", !checkCreateNumber(val)); [EOL]     val = "11z"; [EOL]     assertTrue("isNumber(String) 19 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 19 Neg failed", !checkCreateNumber(val)); [EOL]     val = "11def"; [EOL]     assertTrue("isNumber(String) 20 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 20 Neg failed", !checkCreateNumber(val)); [EOL]     val = "11d11"; [EOL]     assertTrue("isNumber(String) 21 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 21 Neg failed", !checkCreateNumber(val)); [EOL]     val = "11 11"; [EOL]     assertTrue("isNumber(String) 22 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 22 Neg failed", !checkCreateNumber(val)); [EOL]     val = " 1111"; [EOL]     assertTrue("isNumber(String) 23 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 23 Neg failed", !checkCreateNumber(val)); [EOL]     val = "1111 "; [EOL]     assertTrue("isNumber(String) 24 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 24 Neg failed", !checkCreateNumber(val)); [EOL]     val = "2."; [EOL]     assertTrue("isNumber(String) LANG-521 failed", NumberUtils.isNumber(val)); [EOL]     val = "1.1L"; [EOL]     assertFalse("isNumber(String) LANG-664 failed", NumberUtils.isNumber(val)); [EOL] }
@Test [EOL] public void testIsNumber() { [EOL]     String val = "12345"; [EOL]     assertTrue("isNumber(String) 1 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 1 failed", checkCreateNumber(val)); [EOL]     val = "1234.5"; [EOL]     assertTrue("isNumber(String) 2 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 2 failed", checkCreateNumber(val)); [EOL]     val = ".12345"; [EOL]     assertTrue("isNumber(String) 3 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 3 failed", checkCreateNumber(val)); [EOL]     val = "1234E5"; [EOL]     assertTrue("isNumber(String) 4 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 4 failed", checkCreateNumber(val)); [EOL]     val = "1234E+5"; [EOL]     assertTrue("isNumber(String) 5 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 5 failed", checkCreateNumber(val)); [EOL]     val = "1234E-5"; [EOL]     assertTrue("isNumber(String) 6 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 6 failed", checkCreateNumber(val)); [EOL]     val = "123.4E5"; [EOL]     assertTrue("isNumber(String) 7 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 7 failed", checkCreateNumber(val)); [EOL]     val = "-1234"; [EOL]     assertTrue("isNumber(String) 8 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 8 failed", checkCreateNumber(val)); [EOL]     val = "-1234.5"; [EOL]     assertTrue("isNumber(String) 9 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 9 failed", checkCreateNumber(val)); [EOL]     val = "-.12345"; [EOL]     assertTrue("isNumber(String) 10 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 10 failed", checkCreateNumber(val)); [EOL]     val = "-1234E5"; [EOL]     assertTrue("isNumber(String) 11 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 11 failed", checkCreateNumber(val)); [EOL]     val = "0"; [EOL]     assertTrue("isNumber(String) 12 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 12 failed", checkCreateNumber(val)); [EOL]     val = "-0"; [EOL]     assertTrue("isNumber(String) 13 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 13 failed", checkCreateNumber(val)); [EOL]     val = "01234"; [EOL]     assertTrue("isNumber(String) 14 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 14 failed", checkCreateNumber(val)); [EOL]     val = "-01234"; [EOL]     assertTrue("isNumber(String) 15 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 15 failed", checkCreateNumber(val)); [EOL]     val = "0xABC123"; [EOL]     assertTrue("isNumber(String) 16 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 16 failed", checkCreateNumber(val)); [EOL]     val = "0x0"; [EOL]     assertTrue("isNumber(String) 17 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 17 failed", checkCreateNumber(val)); [EOL]     val = "123.4E21D"; [EOL]     assertTrue("isNumber(String) 19 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 19 failed", checkCreateNumber(val)); [EOL]     val = "-221.23F"; [EOL]     assertTrue("isNumber(String) 20 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 20 failed", checkCreateNumber(val)); [EOL]     val = "22338L"; [EOL]     assertTrue("isNumber(String) 21 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 21 failed", checkCreateNumber(val)); [EOL]     val = null; [EOL]     assertTrue("isNumber(String) 1 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 1 Neg failed", !checkCreateNumber(val)); [EOL]     val = ""; [EOL]     assertTrue("isNumber(String) 2 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 2 Neg failed", !checkCreateNumber(val)); [EOL]     val = "--2.3"; [EOL]     assertTrue("isNumber(String) 3 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 3 Neg failed", !checkCreateNumber(val)); [EOL]     val = ".12.3"; [EOL]     assertTrue("isNumber(String) 4 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 4 Neg failed", !checkCreateNumber(val)); [EOL]     val = "-123E"; [EOL]     assertTrue("isNumber(String) 5 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 5 Neg failed", !checkCreateNumber(val)); [EOL]     val = "-123E+-212"; [EOL]     assertTrue("isNumber(String) 6 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 6 Neg failed", !checkCreateNumber(val)); [EOL]     val = "-123E2.12"; [EOL]     assertTrue("isNumber(String) 7 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 7 Neg failed", !checkCreateNumber(val)); [EOL]     val = "0xGF"; [EOL]     assertTrue("isNumber(String) 8 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 8 Neg failed", !checkCreateNumber(val)); [EOL]     val = "0xFAE-1"; [EOL]     assertTrue("isNumber(String) 9 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 9 Neg failed", !checkCreateNumber(val)); [EOL]     val = "."; [EOL]     assertTrue("isNumber(String) 10 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 10 Neg failed", !checkCreateNumber(val)); [EOL]     val = "-0ABC123"; [EOL]     assertTrue("isNumber(String) 11 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 11 Neg failed", !checkCreateNumber(val)); [EOL]     val = "123.4E-D"; [EOL]     assertTrue("isNumber(String) 12 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 12 Neg failed", !checkCreateNumber(val)); [EOL]     val = "123.4ED"; [EOL]     assertTrue("isNumber(String) 13 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 13 Neg failed", !checkCreateNumber(val)); [EOL]     val = "1234E5l"; [EOL]     assertTrue("isNumber(String) 14 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 14 Neg failed", !checkCreateNumber(val)); [EOL]     val = "11a"; [EOL]     assertTrue("isNumber(String) 15 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 15 Neg failed", !checkCreateNumber(val)); [EOL]     val = "1a"; [EOL]     assertTrue("isNumber(String) 16 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 16 Neg failed", !checkCreateNumber(val)); [EOL]     val = "a"; [EOL]     assertTrue("isNumber(String) 17 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 17 Neg failed", !checkCreateNumber(val)); [EOL]     val = "11g"; [EOL]     assertTrue("isNumber(String) 18 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 18 Neg failed", !checkCreateNumber(val)); [EOL]     val = "11z"; [EOL]     assertTrue("isNumber(String) 19 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 19 Neg failed", !checkCreateNumber(val)); [EOL]     val = "11def"; [EOL]     assertTrue("isNumber(String) 20 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 20 Neg failed", !checkCreateNumber(val)); [EOL]     val = "11d11"; [EOL]     assertTrue("isNumber(String) 21 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 21 Neg failed", !checkCreateNumber(val)); [EOL]     val = "11 11"; [EOL]     assertTrue("isNumber(String) 22 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 22 Neg failed", !checkCreateNumber(val)); [EOL]     val = " 1111"; [EOL]     assertTrue("isNumber(String) 23 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 23 Neg failed", !checkCreateNumber(val)); [EOL]     val = "1111 "; [EOL]     assertTrue("isNumber(String) 24 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 24 Neg failed", !checkCreateNumber(val)); [EOL]     val = "2."; [EOL]     assertTrue("isNumber(String) LANG-521 failed", NumberUtils.isNumber(val)); [EOL]     val = "1.1L"; [EOL]     assertFalse("isNumber(String) LANG-664 failed", NumberUtils.isNumber(val)); [EOL] }
@Test [EOL] public void testIsNumber() { [EOL]     String val = "12345"; [EOL]     assertTrue("isNumber(String) 1 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 1 failed", checkCreateNumber(val)); [EOL]     val = "1234.5"; [EOL]     assertTrue("isNumber(String) 2 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 2 failed", checkCreateNumber(val)); [EOL]     val = ".12345"; [EOL]     assertTrue("isNumber(String) 3 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 3 failed", checkCreateNumber(val)); [EOL]     val = "1234E5"; [EOL]     assertTrue("isNumber(String) 4 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 4 failed", checkCreateNumber(val)); [EOL]     val = "1234E+5"; [EOL]     assertTrue("isNumber(String) 5 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 5 failed", checkCreateNumber(val)); [EOL]     val = "1234E-5"; [EOL]     assertTrue("isNumber(String) 6 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 6 failed", checkCreateNumber(val)); [EOL]     val = "123.4E5"; [EOL]     assertTrue("isNumber(String) 7 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 7 failed", checkCreateNumber(val)); [EOL]     val = "-1234"; [EOL]     assertTrue("isNumber(String) 8 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 8 failed", checkCreateNumber(val)); [EOL]     val = "-1234.5"; [EOL]     assertTrue("isNumber(String) 9 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 9 failed", checkCreateNumber(val)); [EOL]     val = "-.12345"; [EOL]     assertTrue("isNumber(String) 10 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 10 failed", checkCreateNumber(val)); [EOL]     val = "-1234E5"; [EOL]     assertTrue("isNumber(String) 11 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 11 failed", checkCreateNumber(val)); [EOL]     val = "0"; [EOL]     assertTrue("isNumber(String) 12 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 12 failed", checkCreateNumber(val)); [EOL]     val = "-0"; [EOL]     assertTrue("isNumber(String) 13 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 13 failed", checkCreateNumber(val)); [EOL]     val = "01234"; [EOL]     assertTrue("isNumber(String) 14 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 14 failed", checkCreateNumber(val)); [EOL]     val = "-01234"; [EOL]     assertTrue("isNumber(String) 15 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 15 failed", checkCreateNumber(val)); [EOL]     val = "0xABC123"; [EOL]     assertTrue("isNumber(String) 16 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 16 failed", checkCreateNumber(val)); [EOL]     val = "0x0"; [EOL]     assertTrue("isNumber(String) 17 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 17 failed", checkCreateNumber(val)); [EOL]     val = "123.4E21D"; [EOL]     assertTrue("isNumber(String) 19 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 19 failed", checkCreateNumber(val)); [EOL]     val = "-221.23F"; [EOL]     assertTrue("isNumber(String) 20 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 20 failed", checkCreateNumber(val)); [EOL]     val = "22338L"; [EOL]     assertTrue("isNumber(String) 21 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 21 failed", checkCreateNumber(val)); [EOL]     val = null; [EOL]     assertTrue("isNumber(String) 1 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 1 Neg failed", !checkCreateNumber(val)); [EOL]     val = ""; [EOL]     assertTrue("isNumber(String) 2 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 2 Neg failed", !checkCreateNumber(val)); [EOL]     val = "--2.3"; [EOL]     assertTrue("isNumber(String) 3 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 3 Neg failed", !checkCreateNumber(val)); [EOL]     val = ".12.3"; [EOL]     assertTrue("isNumber(String) 4 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 4 Neg failed", !checkCreateNumber(val)); [EOL]     val = "-123E"; [EOL]     assertTrue("isNumber(String) 5 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 5 Neg failed", !checkCreateNumber(val)); [EOL]     val = "-123E+-212"; [EOL]     assertTrue("isNumber(String) 6 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 6 Neg failed", !checkCreateNumber(val)); [EOL]     val = "-123E2.12"; [EOL]     assertTrue("isNumber(String) 7 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 7 Neg failed", !checkCreateNumber(val)); [EOL]     val = "0xGF"; [EOL]     assertTrue("isNumber(String) 8 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 8 Neg failed", !checkCreateNumber(val)); [EOL]     val = "0xFAE-1"; [EOL]     assertTrue("isNumber(String) 9 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 9 Neg failed", !checkCreateNumber(val)); [EOL]     val = "."; [EOL]     assertTrue("isNumber(String) 10 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 10 Neg failed", !checkCreateNumber(val)); [EOL]     val = "-0ABC123"; [EOL]     assertTrue("isNumber(String) 11 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 11 Neg failed", !checkCreateNumber(val)); [EOL]     val = "123.4E-D"; [EOL]     assertTrue("isNumber(String) 12 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 12 Neg failed", !checkCreateNumber(val)); [EOL]     val = "123.4ED"; [EOL]     assertTrue("isNumber(String) 13 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 13 Neg failed", !checkCreateNumber(val)); [EOL]     val = "1234E5l"; [EOL]     assertTrue("isNumber(String) 14 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 14 Neg failed", !checkCreateNumber(val)); [EOL]     val = "11a"; [EOL]     assertTrue("isNumber(String) 15 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 15 Neg failed", !checkCreateNumber(val)); [EOL]     val = "1a"; [EOL]     assertTrue("isNumber(String) 16 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 16 Neg failed", !checkCreateNumber(val)); [EOL]     val = "a"; [EOL]     assertTrue("isNumber(String) 17 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 17 Neg failed", !checkCreateNumber(val)); [EOL]     val = "11g"; [EOL]     assertTrue("isNumber(String) 18 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 18 Neg failed", !checkCreateNumber(val)); [EOL]     val = "11z"; [EOL]     assertTrue("isNumber(String) 19 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 19 Neg failed", !checkCreateNumber(val)); [EOL]     val = "11def"; [EOL]     assertTrue("isNumber(String) 20 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 20 Neg failed", !checkCreateNumber(val)); [EOL]     val = "11d11"; [EOL]     assertTrue("isNumber(String) 21 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 21 Neg failed", !checkCreateNumber(val)); [EOL]     val = "11 11"; [EOL]     assertTrue("isNumber(String) 22 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 22 Neg failed", !checkCreateNumber(val)); [EOL]     val = " 1111"; [EOL]     assertTrue("isNumber(String) 23 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 23 Neg failed", !checkCreateNumber(val)); [EOL]     val = "1111 "; [EOL]     assertTrue("isNumber(String) 24 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 24 Neg failed", !checkCreateNumber(val)); [EOL]     val = "2."; [EOL]     assertTrue("isNumber(String) LANG-521 failed", NumberUtils.isNumber(val)); [EOL]     val = "1.1L"; [EOL]     assertFalse("isNumber(String) LANG-664 failed", NumberUtils.isNumber(val)); [EOL] }
@Test [EOL] public void testIsNumber() { [EOL]     String val = "12345"; [EOL]     assertTrue("isNumber(String) 1 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 1 failed", checkCreateNumber(val)); [EOL]     val = "1234.5"; [EOL]     assertTrue("isNumber(String) 2 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 2 failed", checkCreateNumber(val)); [EOL]     val = ".12345"; [EOL]     assertTrue("isNumber(String) 3 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 3 failed", checkCreateNumber(val)); [EOL]     val = "1234E5"; [EOL]     assertTrue("isNumber(String) 4 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 4 failed", checkCreateNumber(val)); [EOL]     val = "1234E+5"; [EOL]     assertTrue("isNumber(String) 5 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 5 failed", checkCreateNumber(val)); [EOL]     val = "1234E-5"; [EOL]     assertTrue("isNumber(String) 6 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 6 failed", checkCreateNumber(val)); [EOL]     val = "123.4E5"; [EOL]     assertTrue("isNumber(String) 7 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 7 failed", checkCreateNumber(val)); [EOL]     val = "-1234"; [EOL]     assertTrue("isNumber(String) 8 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 8 failed", checkCreateNumber(val)); [EOL]     val = "-1234.5"; [EOL]     assertTrue("isNumber(String) 9 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 9 failed", checkCreateNumber(val)); [EOL]     val = "-.12345"; [EOL]     assertTrue("isNumber(String) 10 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 10 failed", checkCreateNumber(val)); [EOL]     val = "-1234E5"; [EOL]     assertTrue("isNumber(String) 11 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 11 failed", checkCreateNumber(val)); [EOL]     val = "0"; [EOL]     assertTrue("isNumber(String) 12 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 12 failed", checkCreateNumber(val)); [EOL]     val = "-0"; [EOL]     assertTrue("isNumber(String) 13 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 13 failed", checkCreateNumber(val)); [EOL]     val = "01234"; [EOL]     assertTrue("isNumber(String) 14 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 14 failed", checkCreateNumber(val)); [EOL]     val = "-01234"; [EOL]     assertTrue("isNumber(String) 15 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 15 failed", checkCreateNumber(val)); [EOL]     val = "0xABC123"; [EOL]     assertTrue("isNumber(String) 16 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 16 failed", checkCreateNumber(val)); [EOL]     val = "0x0"; [EOL]     assertTrue("isNumber(String) 17 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 17 failed", checkCreateNumber(val)); [EOL]     val = "123.4E21D"; [EOL]     assertTrue("isNumber(String) 19 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 19 failed", checkCreateNumber(val)); [EOL]     val = "-221.23F"; [EOL]     assertTrue("isNumber(String) 20 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 20 failed", checkCreateNumber(val)); [EOL]     val = "22338L"; [EOL]     assertTrue("isNumber(String) 21 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 21 failed", checkCreateNumber(val)); [EOL]     val = null; [EOL]     assertTrue("isNumber(String) 1 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 1 Neg failed", !checkCreateNumber(val)); [EOL]     val = ""; [EOL]     assertTrue("isNumber(String) 2 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 2 Neg failed", !checkCreateNumber(val)); [EOL]     val = "--2.3"; [EOL]     assertTrue("isNumber(String) 3 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 3 Neg failed", !checkCreateNumber(val)); [EOL]     val = ".12.3"; [EOL]     assertTrue("isNumber(String) 4 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 4 Neg failed", !checkCreateNumber(val)); [EOL]     val = "-123E"; [EOL]     assertTrue("isNumber(String) 5 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 5 Neg failed", !checkCreateNumber(val)); [EOL]     val = "-123E+-212"; [EOL]     assertTrue("isNumber(String) 6 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 6 Neg failed", !checkCreateNumber(val)); [EOL]     val = "-123E2.12"; [EOL]     assertTrue("isNumber(String) 7 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 7 Neg failed", !checkCreateNumber(val)); [EOL]     val = "0xGF"; [EOL]     assertTrue("isNumber(String) 8 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 8 Neg failed", !checkCreateNumber(val)); [EOL]     val = "0xFAE-1"; [EOL]     assertTrue("isNumber(String) 9 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 9 Neg failed", !checkCreateNumber(val)); [EOL]     val = "."; [EOL]     assertTrue("isNumber(String) 10 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 10 Neg failed", !checkCreateNumber(val)); [EOL]     val = "-0ABC123"; [EOL]     assertTrue("isNumber(String) 11 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 11 Neg failed", !checkCreateNumber(val)); [EOL]     val = "123.4E-D"; [EOL]     assertTrue("isNumber(String) 12 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 12 Neg failed", !checkCreateNumber(val)); [EOL]     val = "123.4ED"; [EOL]     assertTrue("isNumber(String) 13 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 13 Neg failed", !checkCreateNumber(val)); [EOL]     val = "1234E5l"; [EOL]     assertTrue("isNumber(String) 14 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 14 Neg failed", !checkCreateNumber(val)); [EOL]     val = "11a"; [EOL]     assertTrue("isNumber(String) 15 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 15 Neg failed", !checkCreateNumber(val)); [EOL]     val = "1a"; [EOL]     assertTrue("isNumber(String) 16 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 16 Neg failed", !checkCreateNumber(val)); [EOL]     val = "a"; [EOL]     assertTrue("isNumber(String) 17 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 17 Neg failed", !checkCreateNumber(val)); [EOL]     val = "11g"; [EOL]     assertTrue("isNumber(String) 18 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 18 Neg failed", !checkCreateNumber(val)); [EOL]     val = "11z"; [EOL]     assertTrue("isNumber(String) 19 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 19 Neg failed", !checkCreateNumber(val)); [EOL]     val = "11def"; [EOL]     assertTrue("isNumber(String) 20 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 20 Neg failed", !checkCreateNumber(val)); [EOL]     val = "11d11"; [EOL]     assertTrue("isNumber(String) 21 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 21 Neg failed", !checkCreateNumber(val)); [EOL]     val = "11 11"; [EOL]     assertTrue("isNumber(String) 22 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 22 Neg failed", !checkCreateNumber(val)); [EOL]     val = " 1111"; [EOL]     assertTrue("isNumber(String) 23 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 23 Neg failed", !checkCreateNumber(val)); [EOL]     val = "1111 "; [EOL]     assertTrue("isNumber(String) 24 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 24 Neg failed", !checkCreateNumber(val)); [EOL]     val = "2."; [EOL]     assertTrue("isNumber(String) LANG-521 failed", NumberUtils.isNumber(val)); [EOL]     val = "1.1L"; [EOL]     assertFalse("isNumber(String) LANG-664 failed", NumberUtils.isNumber(val)); [EOL] }
@Test [EOL] public void testIsNumber() { [EOL]     String val = "12345"; [EOL]     assertTrue("isNumber(String) 1 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 1 failed", checkCreateNumber(val)); [EOL]     val = "1234.5"; [EOL]     assertTrue("isNumber(String) 2 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 2 failed", checkCreateNumber(val)); [EOL]     val = ".12345"; [EOL]     assertTrue("isNumber(String) 3 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 3 failed", checkCreateNumber(val)); [EOL]     val = "1234E5"; [EOL]     assertTrue("isNumber(String) 4 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 4 failed", checkCreateNumber(val)); [EOL]     val = "1234E+5"; [EOL]     assertTrue("isNumber(String) 5 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 5 failed", checkCreateNumber(val)); [EOL]     val = "1234E-5"; [EOL]     assertTrue("isNumber(String) 6 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 6 failed", checkCreateNumber(val)); [EOL]     val = "123.4E5"; [EOL]     assertTrue("isNumber(String) 7 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 7 failed", checkCreateNumber(val)); [EOL]     val = "-1234"; [EOL]     assertTrue("isNumber(String) 8 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 8 failed", checkCreateNumber(val)); [EOL]     val = "-1234.5"; [EOL]     assertTrue("isNumber(String) 9 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 9 failed", checkCreateNumber(val)); [EOL]     val = "-.12345"; [EOL]     assertTrue("isNumber(String) 10 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 10 failed", checkCreateNumber(val)); [EOL]     val = "-1234E5"; [EOL]     assertTrue("isNumber(String) 11 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 11 failed", checkCreateNumber(val)); [EOL]     val = "0"; [EOL]     assertTrue("isNumber(String) 12 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 12 failed", checkCreateNumber(val)); [EOL]     val = "-0"; [EOL]     assertTrue("isNumber(String) 13 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 13 failed", checkCreateNumber(val)); [EOL]     val = "01234"; [EOL]     assertTrue("isNumber(String) 14 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 14 failed", checkCreateNumber(val)); [EOL]     val = "-01234"; [EOL]     assertTrue("isNumber(String) 15 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 15 failed", checkCreateNumber(val)); [EOL]     val = "0xABC123"; [EOL]     assertTrue("isNumber(String) 16 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 16 failed", checkCreateNumber(val)); [EOL]     val = "0x0"; [EOL]     assertTrue("isNumber(String) 17 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 17 failed", checkCreateNumber(val)); [EOL]     val = "123.4E21D"; [EOL]     assertTrue("isNumber(String) 19 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 19 failed", checkCreateNumber(val)); [EOL]     val = "-221.23F"; [EOL]     assertTrue("isNumber(String) 20 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 20 failed", checkCreateNumber(val)); [EOL]     val = "22338L"; [EOL]     assertTrue("isNumber(String) 21 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 21 failed", checkCreateNumber(val)); [EOL]     val = null; [EOL]     assertTrue("isNumber(String) 1 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 1 Neg failed", !checkCreateNumber(val)); [EOL]     val = ""; [EOL]     assertTrue("isNumber(String) 2 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 2 Neg failed", !checkCreateNumber(val)); [EOL]     val = "--2.3"; [EOL]     assertTrue("isNumber(String) 3 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 3 Neg failed", !checkCreateNumber(val)); [EOL]     val = ".12.3"; [EOL]     assertTrue("isNumber(String) 4 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 4 Neg failed", !checkCreateNumber(val)); [EOL]     val = "-123E"; [EOL]     assertTrue("isNumber(String) 5 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 5 Neg failed", !checkCreateNumber(val)); [EOL]     val = "-123E+-212"; [EOL]     assertTrue("isNumber(String) 6 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 6 Neg failed", !checkCreateNumber(val)); [EOL]     val = "-123E2.12"; [EOL]     assertTrue("isNumber(String) 7 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 7 Neg failed", !checkCreateNumber(val)); [EOL]     val = "0xGF"; [EOL]     assertTrue("isNumber(String) 8 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 8 Neg failed", !checkCreateNumber(val)); [EOL]     val = "0xFAE-1"; [EOL]     assertTrue("isNumber(String) 9 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 9 Neg failed", !checkCreateNumber(val)); [EOL]     val = "."; [EOL]     assertTrue("isNumber(String) 10 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 10 Neg failed", !checkCreateNumber(val)); [EOL]     val = "-0ABC123"; [EOL]     assertTrue("isNumber(String) 11 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 11 Neg failed", !checkCreateNumber(val)); [EOL]     val = "123.4E-D"; [EOL]     assertTrue("isNumber(String) 12 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 12 Neg failed", !checkCreateNumber(val)); [EOL]     val = "123.4ED"; [EOL]     assertTrue("isNumber(String) 13 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 13 Neg failed", !checkCreateNumber(val)); [EOL]     val = "1234E5l"; [EOL]     assertTrue("isNumber(String) 14 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 14 Neg failed", !checkCreateNumber(val)); [EOL]     val = "11a"; [EOL]     assertTrue("isNumber(String) 15 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 15 Neg failed", !checkCreateNumber(val)); [EOL]     val = "1a"; [EOL]     assertTrue("isNumber(String) 16 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 16 Neg failed", !checkCreateNumber(val)); [EOL]     val = "a"; [EOL]     assertTrue("isNumber(String) 17 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 17 Neg failed", !checkCreateNumber(val)); [EOL]     val = "11g"; [EOL]     assertTrue("isNumber(String) 18 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 18 Neg failed", !checkCreateNumber(val)); [EOL]     val = "11z"; [EOL]     assertTrue("isNumber(String) 19 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 19 Neg failed", !checkCreateNumber(val)); [EOL]     val = "11def"; [EOL]     assertTrue("isNumber(String) 20 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 20 Neg failed", !checkCreateNumber(val)); [EOL]     val = "11d11"; [EOL]     assertTrue("isNumber(String) 21 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 21 Neg failed", !checkCreateNumber(val)); [EOL]     val = "11 11"; [EOL]     assertTrue("isNumber(String) 22 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 22 Neg failed", !checkCreateNumber(val)); [EOL]     val = " 1111"; [EOL]     assertTrue("isNumber(String) 23 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 23 Neg failed", !checkCreateNumber(val)); [EOL]     val = "1111 "; [EOL]     assertTrue("isNumber(String) 24 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 24 Neg failed", !checkCreateNumber(val)); [EOL]     val = "2."; [EOL]     assertTrue("isNumber(String) LANG-521 failed", NumberUtils.isNumber(val)); [EOL]     val = "1.1L"; [EOL]     assertFalse("isNumber(String) LANG-664 failed", NumberUtils.isNumber(val)); [EOL] }
@Test [EOL] public void testIsNumber() { [EOL]     String val = "12345"; [EOL]     assertTrue("isNumber(String) 1 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 1 failed", checkCreateNumber(val)); [EOL]     val = "1234.5"; [EOL]     assertTrue("isNumber(String) 2 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 2 failed", checkCreateNumber(val)); [EOL]     val = ".12345"; [EOL]     assertTrue("isNumber(String) 3 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 3 failed", checkCreateNumber(val)); [EOL]     val = "1234E5"; [EOL]     assertTrue("isNumber(String) 4 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 4 failed", checkCreateNumber(val)); [EOL]     val = "1234E+5"; [EOL]     assertTrue("isNumber(String) 5 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 5 failed", checkCreateNumber(val)); [EOL]     val = "1234E-5"; [EOL]     assertTrue("isNumber(String) 6 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 6 failed", checkCreateNumber(val)); [EOL]     val = "123.4E5"; [EOL]     assertTrue("isNumber(String) 7 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 7 failed", checkCreateNumber(val)); [EOL]     val = "-1234"; [EOL]     assertTrue("isNumber(String) 8 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 8 failed", checkCreateNumber(val)); [EOL]     val = "-1234.5"; [EOL]     assertTrue("isNumber(String) 9 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 9 failed", checkCreateNumber(val)); [EOL]     val = "-.12345"; [EOL]     assertTrue("isNumber(String) 10 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 10 failed", checkCreateNumber(val)); [EOL]     val = "-1234E5"; [EOL]     assertTrue("isNumber(String) 11 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 11 failed", checkCreateNumber(val)); [EOL]     val = "0"; [EOL]     assertTrue("isNumber(String) 12 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 12 failed", checkCreateNumber(val)); [EOL]     val = "-0"; [EOL]     assertTrue("isNumber(String) 13 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 13 failed", checkCreateNumber(val)); [EOL]     val = "01234"; [EOL]     assertTrue("isNumber(String) 14 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 14 failed", checkCreateNumber(val)); [EOL]     val = "-01234"; [EOL]     assertTrue("isNumber(String) 15 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 15 failed", checkCreateNumber(val)); [EOL]     val = "0xABC123"; [EOL]     assertTrue("isNumber(String) 16 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 16 failed", checkCreateNumber(val)); [EOL]     val = "0x0"; [EOL]     assertTrue("isNumber(String) 17 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 17 failed", checkCreateNumber(val)); [EOL]     val = "123.4E21D"; [EOL]     assertTrue("isNumber(String) 19 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 19 failed", checkCreateNumber(val)); [EOL]     val = "-221.23F"; [EOL]     assertTrue("isNumber(String) 20 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 20 failed", checkCreateNumber(val)); [EOL]     val = "22338L"; [EOL]     assertTrue("isNumber(String) 21 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 21 failed", checkCreateNumber(val)); [EOL]     val = null; [EOL]     assertTrue("isNumber(String) 1 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 1 Neg failed", !checkCreateNumber(val)); [EOL]     val = ""; [EOL]     assertTrue("isNumber(String) 2 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 2 Neg failed", !checkCreateNumber(val)); [EOL]     val = "--2.3"; [EOL]     assertTrue("isNumber(String) 3 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 3 Neg failed", !checkCreateNumber(val)); [EOL]     val = ".12.3"; [EOL]     assertTrue("isNumber(String) 4 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 4 Neg failed", !checkCreateNumber(val)); [EOL]     val = "-123E"; [EOL]     assertTrue("isNumber(String) 5 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 5 Neg failed", !checkCreateNumber(val)); [EOL]     val = "-123E+-212"; [EOL]     assertTrue("isNumber(String) 6 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 6 Neg failed", !checkCreateNumber(val)); [EOL]     val = "-123E2.12"; [EOL]     assertTrue("isNumber(String) 7 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 7 Neg failed", !checkCreateNumber(val)); [EOL]     val = "0xGF"; [EOL]     assertTrue("isNumber(String) 8 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 8 Neg failed", !checkCreateNumber(val)); [EOL]     val = "0xFAE-1"; [EOL]     assertTrue("isNumber(String) 9 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 9 Neg failed", !checkCreateNumber(val)); [EOL]     val = "."; [EOL]     assertTrue("isNumber(String) 10 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 10 Neg failed", !checkCreateNumber(val)); [EOL]     val = "-0ABC123"; [EOL]     assertTrue("isNumber(String) 11 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 11 Neg failed", !checkCreateNumber(val)); [EOL]     val = "123.4E-D"; [EOL]     assertTrue("isNumber(String) 12 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 12 Neg failed", !checkCreateNumber(val)); [EOL]     val = "123.4ED"; [EOL]     assertTrue("isNumber(String) 13 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 13 Neg failed", !checkCreateNumber(val)); [EOL]     val = "1234E5l"; [EOL]     assertTrue("isNumber(String) 14 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 14 Neg failed", !checkCreateNumber(val)); [EOL]     val = "11a"; [EOL]     assertTrue("isNumber(String) 15 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 15 Neg failed", !checkCreateNumber(val)); [EOL]     val = "1a"; [EOL]     assertTrue("isNumber(String) 16 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 16 Neg failed", !checkCreateNumber(val)); [EOL]     val = "a"; [EOL]     assertTrue("isNumber(String) 17 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 17 Neg failed", !checkCreateNumber(val)); [EOL]     val = "11g"; [EOL]     assertTrue("isNumber(String) 18 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 18 Neg failed", !checkCreateNumber(val)); [EOL]     val = "11z"; [EOL]     assertTrue("isNumber(String) 19 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 19 Neg failed", !checkCreateNumber(val)); [EOL]     val = "11def"; [EOL]     assertTrue("isNumber(String) 20 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 20 Neg failed", !checkCreateNumber(val)); [EOL]     val = "11d11"; [EOL]     assertTrue("isNumber(String) 21 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 21 Neg failed", !checkCreateNumber(val)); [EOL]     val = "11 11"; [EOL]     assertTrue("isNumber(String) 22 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 22 Neg failed", !checkCreateNumber(val)); [EOL]     val = " 1111"; [EOL]     assertTrue("isNumber(String) 23 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 23 Neg failed", !checkCreateNumber(val)); [EOL]     val = "1111 "; [EOL]     assertTrue("isNumber(String) 24 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 24 Neg failed", !checkCreateNumber(val)); [EOL]     val = "2."; [EOL]     assertTrue("isNumber(String) LANG-521 failed", NumberUtils.isNumber(val)); [EOL]     val = "1.1L"; [EOL]     assertFalse("isNumber(String) LANG-664 failed", NumberUtils.isNumber(val)); [EOL] }
@Test [EOL] public void testIsNumber() { [EOL]     String val = "12345"; [EOL]     assertTrue("isNumber(String) 1 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 1 failed", checkCreateNumber(val)); [EOL]     val = "1234.5"; [EOL]     assertTrue("isNumber(String) 2 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 2 failed", checkCreateNumber(val)); [EOL]     val = ".12345"; [EOL]     assertTrue("isNumber(String) 3 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 3 failed", checkCreateNumber(val)); [EOL]     val = "1234E5"; [EOL]     assertTrue("isNumber(String) 4 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 4 failed", checkCreateNumber(val)); [EOL]     val = "1234E+5"; [EOL]     assertTrue("isNumber(String) 5 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 5 failed", checkCreateNumber(val)); [EOL]     val = "1234E-5"; [EOL]     assertTrue("isNumber(String) 6 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 6 failed", checkCreateNumber(val)); [EOL]     val = "123.4E5"; [EOL]     assertTrue("isNumber(String) 7 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 7 failed", checkCreateNumber(val)); [EOL]     val = "-1234"; [EOL]     assertTrue("isNumber(String) 8 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 8 failed", checkCreateNumber(val)); [EOL]     val = "-1234.5"; [EOL]     assertTrue("isNumber(String) 9 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 9 failed", checkCreateNumber(val)); [EOL]     val = "-.12345"; [EOL]     assertTrue("isNumber(String) 10 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 10 failed", checkCreateNumber(val)); [EOL]     val = "-1234E5"; [EOL]     assertTrue("isNumber(String) 11 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 11 failed", checkCreateNumber(val)); [EOL]     val = "0"; [EOL]     assertTrue("isNumber(String) 12 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 12 failed", checkCreateNumber(val)); [EOL]     val = "-0"; [EOL]     assertTrue("isNumber(String) 13 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 13 failed", checkCreateNumber(val)); [EOL]     val = "01234"; [EOL]     assertTrue("isNumber(String) 14 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 14 failed", checkCreateNumber(val)); [EOL]     val = "-01234"; [EOL]     assertTrue("isNumber(String) 15 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 15 failed", checkCreateNumber(val)); [EOL]     val = "0xABC123"; [EOL]     assertTrue("isNumber(String) 16 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 16 failed", checkCreateNumber(val)); [EOL]     val = "0x0"; [EOL]     assertTrue("isNumber(String) 17 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 17 failed", checkCreateNumber(val)); [EOL]     val = "123.4E21D"; [EOL]     assertTrue("isNumber(String) 19 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 19 failed", checkCreateNumber(val)); [EOL]     val = "-221.23F"; [EOL]     assertTrue("isNumber(String) 20 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 20 failed", checkCreateNumber(val)); [EOL]     val = "22338L"; [EOL]     assertTrue("isNumber(String) 21 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 21 failed", checkCreateNumber(val)); [EOL]     val = null; [EOL]     assertTrue("isNumber(String) 1 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 1 Neg failed", !checkCreateNumber(val)); [EOL]     val = ""; [EOL]     assertTrue("isNumber(String) 2 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 2 Neg failed", !checkCreateNumber(val)); [EOL]     val = "--2.3"; [EOL]     assertTrue("isNumber(String) 3 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 3 Neg failed", !checkCreateNumber(val)); [EOL]     val = ".12.3"; [EOL]     assertTrue("isNumber(String) 4 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 4 Neg failed", !checkCreateNumber(val)); [EOL]     val = "-123E"; [EOL]     assertTrue("isNumber(String) 5 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 5 Neg failed", !checkCreateNumber(val)); [EOL]     val = "-123E+-212"; [EOL]     assertTrue("isNumber(String) 6 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 6 Neg failed", !checkCreateNumber(val)); [EOL]     val = "-123E2.12"; [EOL]     assertTrue("isNumber(String) 7 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 7 Neg failed", !checkCreateNumber(val)); [EOL]     val = "0xGF"; [EOL]     assertTrue("isNumber(String) 8 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 8 Neg failed", !checkCreateNumber(val)); [EOL]     val = "0xFAE-1"; [EOL]     assertTrue("isNumber(String) 9 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 9 Neg failed", !checkCreateNumber(val)); [EOL]     val = "."; [EOL]     assertTrue("isNumber(String) 10 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 10 Neg failed", !checkCreateNumber(val)); [EOL]     val = "-0ABC123"; [EOL]     assertTrue("isNumber(String) 11 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 11 Neg failed", !checkCreateNumber(val)); [EOL]     val = "123.4E-D"; [EOL]     assertTrue("isNumber(String) 12 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 12 Neg failed", !checkCreateNumber(val)); [EOL]     val = "123.4ED"; [EOL]     assertTrue("isNumber(String) 13 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 13 Neg failed", !checkCreateNumber(val)); [EOL]     val = "1234E5l"; [EOL]     assertTrue("isNumber(String) 14 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 14 Neg failed", !checkCreateNumber(val)); [EOL]     val = "11a"; [EOL]     assertTrue("isNumber(String) 15 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 15 Neg failed", !checkCreateNumber(val)); [EOL]     val = "1a"; [EOL]     assertTrue("isNumber(String) 16 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 16 Neg failed", !checkCreateNumber(val)); [EOL]     val = "a"; [EOL]     assertTrue("isNumber(String) 17 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 17 Neg failed", !checkCreateNumber(val)); [EOL]     val = "11g"; [EOL]     assertTrue("isNumber(String) 18 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 18 Neg failed", !checkCreateNumber(val)); [EOL]     val = "11z"; [EOL]     assertTrue("isNumber(String) 19 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 19 Neg failed", !checkCreateNumber(val)); [EOL]     val = "11def"; [EOL]     assertTrue("isNumber(String) 20 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 20 Neg failed", !checkCreateNumber(val)); [EOL]     val = "11d11"; [EOL]     assertTrue("isNumber(String) 21 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 21 Neg failed", !checkCreateNumber(val)); [EOL]     val = "11 11"; [EOL]     assertTrue("isNumber(String) 22 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 22 Neg failed", !checkCreateNumber(val)); [EOL]     val = " 1111"; [EOL]     assertTrue("isNumber(String) 23 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 23 Neg failed", !checkCreateNumber(val)); [EOL]     val = "1111 "; [EOL]     assertTrue("isNumber(String) 24 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 24 Neg failed", !checkCreateNumber(val)); [EOL]     val = "2."; [EOL]     assertTrue("isNumber(String) LANG-521 failed", NumberUtils.isNumber(val)); [EOL]     val = "1.1L"; [EOL]     assertFalse("isNumber(String) LANG-664 failed", NumberUtils.isNumber(val)); [EOL] }
@Test(expected = IllegalArgumentException.class) [EOL] public void testMinLong_nullArray() { [EOL]     NumberUtils.min((long[]) null); [EOL] }
@Test(expected = IllegalArgumentException.class) [EOL] public void testMinLong_nullArray() { [EOL]     NumberUtils.min((long[]) null); [EOL] }
@Test(expected = IllegalArgumentException.class) [EOL] public void testMinLong_nullArray() { [EOL]     NumberUtils.min((long[]) null); [EOL] }
@Test(expected = IllegalArgumentException.class) [EOL] public void testMinLong_nullArray() { [EOL]     NumberUtils.min((long[]) null); [EOL] }
@Test [EOL] public void testMinInt() { [EOL]     assertEquals("min(int[]) failed for array length 1", 5, NumberUtils.min(new int[] { 5 })); [EOL]     assertEquals("min(int[]) failed for array length 2", 6, NumberUtils.min(new int[] { 6, 9 })); [EOL]     assertEquals(-10, NumberUtils.min(new int[] { -10, -5, 0, 5, 10 })); [EOL]     assertEquals(-10, NumberUtils.min(new int[] { -5, 0, -10, 5, 10 })); [EOL] }
@Test [EOL] public void testMinDouble() { [EOL]     assertEquals("min(double[]) failed for array length 1", 5.12, NumberUtils.min(new double[] { 5.12 }), 0); [EOL]     assertEquals("min(double[]) failed for array length 2", 6.23, NumberUtils.min(new double[] { 6.23, 9.34 }), 0); [EOL]     assertEquals("min(double[]) failed for array length 5", -10.45, NumberUtils.min(new double[] { -10.45, -5.56, 0, 5.67, 10.78 }), 0); [EOL]     assertEquals(-10, NumberUtils.min(new double[] { -10, -5, 0, 5, 10 }), 0.0001); [EOL]     assertEquals(-10, NumberUtils.min(new double[] { -5, 0, -10, 5, 10 }), 0.0001); [EOL] }
@Test [EOL] public void testMinDouble() { [EOL]     assertEquals("min(double[]) failed for array length 1", 5.12, NumberUtils.min(new double[] { 5.12 }), 0); [EOL]     assertEquals("min(double[]) failed for array length 2", 6.23, NumberUtils.min(new double[] { 6.23, 9.34 }), 0); [EOL]     assertEquals("min(double[]) failed for array length 5", -10.45, NumberUtils.min(new double[] { -10.45, -5.56, 0, 5.67, 10.78 }), 0); [EOL]     assertEquals(-10, NumberUtils.min(new double[] { -10, -5, 0, 5, 10 }), 0.0001); [EOL]     assertEquals(-10, NumberUtils.min(new double[] { -5, 0, -10, 5, 10 }), 0.0001); [EOL] }
@Test [EOL] public void testMinDouble() { [EOL]     assertEquals("min(double[]) failed for array length 1", 5.12, NumberUtils.min(new double[] { 5.12 }), 0); [EOL]     assertEquals("min(double[]) failed for array length 2", 6.23, NumberUtils.min(new double[] { 6.23, 9.34 }), 0); [EOL]     assertEquals("min(double[]) failed for array length 5", -10.45, NumberUtils.min(new double[] { -10.45, -5.56, 0, 5.67, 10.78 }), 0); [EOL]     assertEquals(-10, NumberUtils.min(new double[] { -10, -5, 0, 5, 10 }), 0.0001); [EOL]     assertEquals(-10, NumberUtils.min(new double[] { -5, 0, -10, 5, 10 }), 0.0001); [EOL] }
@Test [EOL] public void testMinDouble() { [EOL]     assertEquals("min(double[]) failed for array length 1", 5.12, NumberUtils.min(new double[] { 5.12 }), 0); [EOL]     assertEquals("min(double[]) failed for array length 2", 6.23, NumberUtils.min(new double[] { 6.23, 9.34 }), 0); [EOL]     assertEquals("min(double[]) failed for array length 5", -10.45, NumberUtils.min(new double[] { -10.45, -5.56, 0, 5.67, 10.78 }), 0); [EOL]     assertEquals(-10, NumberUtils.min(new double[] { -10, -5, 0, 5, 10 }), 0.0001); [EOL]     assertEquals(-10, NumberUtils.min(new double[] { -5, 0, -10, 5, 10 }), 0.0001); [EOL] }
@Test(expected = IllegalArgumentException.class) [EOL] public void testMinFloat_nullArray() { [EOL]     NumberUtils.min((float[]) null); [EOL] }
@Test(expected = IllegalArgumentException.class) [EOL] public void testMinFloat_nullArray() { [EOL]     NumberUtils.min((float[]) null); [EOL] }
@Test(expected = IllegalArgumentException.class) [EOL] public void testMinFloat_nullArray() { [EOL]     NumberUtils.min((float[]) null); [EOL] }
@Test(expected = IllegalArgumentException.class) [EOL] public void testMinFloat_nullArray() { [EOL]     NumberUtils.min((float[]) null); [EOL] }
@Test(expected = IllegalArgumentException.class) [EOL] public void testMinFloat_nullArray() { [EOL]     NumberUtils.min((float[]) null); [EOL] }
@Test(expected = IllegalArgumentException.class) [EOL] public void testMaxLong_emptyArray() { [EOL]     NumberUtils.max(new long[0]); [EOL] }
@Test(expected = IllegalArgumentException.class) [EOL] public void testMaxLong_emptyArray() { [EOL]     NumberUtils.max(new long[0]); [EOL] }
@Test(expected = IllegalArgumentException.class) [EOL] public void testMaxLong_emptyArray() { [EOL]     NumberUtils.max(new long[0]); [EOL] }
@Test(expected = IllegalArgumentException.class) [EOL] public void testMaxLong_emptyArray() { [EOL]     NumberUtils.max(new long[0]); [EOL] }
@Test(expected = IllegalArgumentException.class) [EOL] public void testMaxLong_emptyArray() { [EOL]     NumberUtils.max(new long[0]); [EOL] }
@Test [EOL] public void testMaxShort() { [EOL]     assertEquals("max(short[]) failed for array length 1", 5, NumberUtils.max(new short[] { 5 })); [EOL]     assertEquals("max(short[]) failed for array length 2", 9, NumberUtils.max(new short[] { 6, 9 })); [EOL]     assertEquals("max(short[]) failed for array length 5", 10, NumberUtils.max(new short[] { -10, -5, 0, 5, 10 })); [EOL]     assertEquals(10, NumberUtils.max(new short[] { -10, -5, 0, 5, 10 })); [EOL]     assertEquals(10, NumberUtils.max(new short[] { -5, 0, 10, 5, -10 })); [EOL] }
@Test [EOL] public void testMaxShort() { [EOL]     assertEquals("max(short[]) failed for array length 1", 5, NumberUtils.max(new short[] { 5 })); [EOL]     assertEquals("max(short[]) failed for array length 2", 9, NumberUtils.max(new short[] { 6, 9 })); [EOL]     assertEquals("max(short[]) failed for array length 5", 10, NumberUtils.max(new short[] { -10, -5, 0, 5, 10 })); [EOL]     assertEquals(10, NumberUtils.max(new short[] { -10, -5, 0, 5, 10 })); [EOL]     assertEquals(10, NumberUtils.max(new short[] { -5, 0, 10, 5, -10 })); [EOL] }
@Test [EOL] public void testMaxShort() { [EOL]     assertEquals("max(short[]) failed for array length 1", 5, NumberUtils.max(new short[] { 5 })); [EOL]     assertEquals("max(short[]) failed for array length 2", 9, NumberUtils.max(new short[] { 6, 9 })); [EOL]     assertEquals("max(short[]) failed for array length 5", 10, NumberUtils.max(new short[] { -10, -5, 0, 5, 10 })); [EOL]     assertEquals(10, NumberUtils.max(new short[] { -10, -5, 0, 5, 10 })); [EOL]     assertEquals(10, NumberUtils.max(new short[] { -5, 0, 10, 5, -10 })); [EOL] }
@Test [EOL] public void testMaxShort() { [EOL]     assertEquals("max(short[]) failed for array length 1", 5, NumberUtils.max(new short[] { 5 })); [EOL]     assertEquals("max(short[]) failed for array length 2", 9, NumberUtils.max(new short[] { 6, 9 })); [EOL]     assertEquals("max(short[]) failed for array length 5", 10, NumberUtils.max(new short[] { -10, -5, 0, 5, 10 })); [EOL]     assertEquals(10, NumberUtils.max(new short[] { -10, -5, 0, 5, 10 })); [EOL]     assertEquals(10, NumberUtils.max(new short[] { -5, 0, 10, 5, -10 })); [EOL] }
@Test [EOL] public void testMaxShort() { [EOL]     assertEquals("max(short[]) failed for array length 1", 5, NumberUtils.max(new short[] { 5 })); [EOL]     assertEquals("max(short[]) failed for array length 2", 9, NumberUtils.max(new short[] { 6, 9 })); [EOL]     assertEquals("max(short[]) failed for array length 5", 10, NumberUtils.max(new short[] { -10, -5, 0, 5, 10 })); [EOL]     assertEquals(10, NumberUtils.max(new short[] { -10, -5, 0, 5, 10 })); [EOL]     assertEquals(10, NumberUtils.max(new short[] { -5, 0, 10, 5, -10 })); [EOL] }
@Test(expected = IllegalArgumentException.class) [EOL] public void testMinLong_nullArray() { [EOL]     NumberUtils.min((long[]) null); [EOL] }
@Test(expected = IllegalArgumentException.class) [EOL] public void testMinLong_nullArray() { [EOL]     NumberUtils.min((long[]) null); [EOL] }
@Test(expected = IllegalArgumentException.class) [EOL] public void testMinLong_nullArray() { [EOL]     NumberUtils.min((long[]) null); [EOL] }
@Test [EOL] public void testMinimumLong() { [EOL]     assertEquals("minimum(long,long,long) 1 failed", 12345L, NumberUtils.min(12345L, 12345L + 1L, 12345L + 2L)); [EOL]     assertEquals("minimum(long,long,long) 2 failed", 12345L, NumberUtils.min(12345L + 1L, 12345L, 12345 + 2L)); [EOL]     assertEquals("minimum(long,long,long) 3 failed", 12345L, NumberUtils.min(12345L + 1L, 12345L + 2L, 12345L)); [EOL]     assertEquals("minimum(long,long,long) 4 failed", 12345L, NumberUtils.min(12345L + 1L, 12345L, 12345L)); [EOL]     assertEquals("minimum(long,long,long) 5 failed", 12345L, NumberUtils.min(12345L, 12345L, 12345L)); [EOL] }
@Test [EOL] public void testMinimumInt() { [EOL]     assertEquals("minimum(int,int,int) 1 failed", 12345, NumberUtils.min(12345, 12345 + 1, 12345 + 2)); [EOL]     assertEquals("minimum(int,int,int) 2 failed", 12345, NumberUtils.min(12345 + 1, 12345, 12345 + 2)); [EOL]     assertEquals("minimum(int,int,int) 3 failed", 12345, NumberUtils.min(12345 + 1, 12345 + 2, 12345)); [EOL]     assertEquals("minimum(int,int,int) 4 failed", 12345, NumberUtils.min(12345 + 1, 12345, 12345)); [EOL]     assertEquals("minimum(int,int,int) 5 failed", 12345, NumberUtils.min(12345, 12345, 12345)); [EOL] }
@Test [EOL] public void testMinimumInt() { [EOL]     assertEquals("minimum(int,int,int) 1 failed", 12345, NumberUtils.min(12345, 12345 + 1, 12345 + 2)); [EOL]     assertEquals("minimum(int,int,int) 2 failed", 12345, NumberUtils.min(12345 + 1, 12345, 12345 + 2)); [EOL]     assertEquals("minimum(int,int,int) 3 failed", 12345, NumberUtils.min(12345 + 1, 12345 + 2, 12345)); [EOL]     assertEquals("minimum(int,int,int) 4 failed", 12345, NumberUtils.min(12345 + 1, 12345, 12345)); [EOL]     assertEquals("minimum(int,int,int) 5 failed", 12345, NumberUtils.min(12345, 12345, 12345)); [EOL] }
@Test [EOL] public void testMinimumByte() { [EOL]     final byte low = 123; [EOL]     final byte mid = 123 + 1; [EOL]     final byte high = 123 + 2; [EOL]     assertEquals("minimum(byte,byte,byte) 1 failed", low, NumberUtils.min(low, mid, high)); [EOL]     assertEquals("minimum(byte,byte,byte) 1 failed", low, NumberUtils.min(mid, low, high)); [EOL]     assertEquals("minimum(byte,byte,byte) 1 failed", low, NumberUtils.min(mid, high, low)); [EOL]     assertEquals("minimum(byte,byte,byte) 1 failed", low, NumberUtils.min(low, mid, low)); [EOL] }
@Test [EOL] public void testMinimumByte() { [EOL]     final byte low = 123; [EOL]     final byte mid = 123 + 1; [EOL]     final byte high = 123 + 2; [EOL]     assertEquals("minimum(byte,byte,byte) 1 failed", low, NumberUtils.min(low, mid, high)); [EOL]     assertEquals("minimum(byte,byte,byte) 1 failed", low, NumberUtils.min(mid, low, high)); [EOL]     assertEquals("minimum(byte,byte,byte) 1 failed", low, NumberUtils.min(mid, high, low)); [EOL]     assertEquals("minimum(byte,byte,byte) 1 failed", low, NumberUtils.min(low, mid, low)); [EOL] }
@Test [EOL] public void testMinimumByte() { [EOL]     final byte low = 123; [EOL]     final byte mid = 123 + 1; [EOL]     final byte high = 123 + 2; [EOL]     assertEquals("minimum(byte,byte,byte) 1 failed", low, NumberUtils.min(low, mid, high)); [EOL]     assertEquals("minimum(byte,byte,byte) 1 failed", low, NumberUtils.min(mid, low, high)); [EOL]     assertEquals("minimum(byte,byte,byte) 1 failed", low, NumberUtils.min(mid, high, low)); [EOL]     assertEquals("minimum(byte,byte,byte) 1 failed", low, NumberUtils.min(low, mid, low)); [EOL] }
@Test [EOL] public void testMaximumShort() { [EOL]     final short low = 1234; [EOL]     final short mid = 1234 + 1; [EOL]     final short high = 1234 + 2; [EOL]     assertEquals("maximum(short,short,short) 1 failed", high, NumberUtils.max(low, mid, high)); [EOL]     assertEquals("maximum(short,short,short) 1 failed", high, NumberUtils.max(mid, low, high)); [EOL]     assertEquals("maximum(short,short,short) 1 failed", high, NumberUtils.max(mid, high, low)); [EOL]     assertEquals("maximum(short,short,short) 1 failed", high, NumberUtils.max(high, mid, high)); [EOL] }
@Test [EOL] public void testMaximumShort() { [EOL]     final short low = 1234; [EOL]     final short mid = 1234 + 1; [EOL]     final short high = 1234 + 2; [EOL]     assertEquals("maximum(short,short,short) 1 failed", high, NumberUtils.max(low, mid, high)); [EOL]     assertEquals("maximum(short,short,short) 1 failed", high, NumberUtils.max(mid, low, high)); [EOL]     assertEquals("maximum(short,short,short) 1 failed", high, NumberUtils.max(mid, high, low)); [EOL]     assertEquals("maximum(short,short,short) 1 failed", high, NumberUtils.max(high, mid, high)); [EOL] }
@Test [EOL] public void testMaximumShort() { [EOL]     final short low = 1234; [EOL]     final short mid = 1234 + 1; [EOL]     final short high = 1234 + 2; [EOL]     assertEquals("maximum(short,short,short) 1 failed", high, NumberUtils.max(low, mid, high)); [EOL]     assertEquals("maximum(short,short,short) 1 failed", high, NumberUtils.max(mid, low, high)); [EOL]     assertEquals("maximum(short,short,short) 1 failed", high, NumberUtils.max(mid, high, low)); [EOL]     assertEquals("maximum(short,short,short) 1 failed", high, NumberUtils.max(high, mid, high)); [EOL] }
@Test [EOL] public void testMaximumShort() { [EOL]     final short low = 1234; [EOL]     final short mid = 1234 + 1; [EOL]     final short high = 1234 + 2; [EOL]     assertEquals("maximum(short,short,short) 1 failed", high, NumberUtils.max(low, mid, high)); [EOL]     assertEquals("maximum(short,short,short) 1 failed", high, NumberUtils.max(mid, low, high)); [EOL]     assertEquals("maximum(short,short,short) 1 failed", high, NumberUtils.max(mid, high, low)); [EOL]     assertEquals("maximum(short,short,short) 1 failed", high, NumberUtils.max(high, mid, high)); [EOL] }
@Test [EOL] public void testIsNumber() { [EOL]     String val = "12345"; [EOL]     assertTrue("isNumber(String) 1 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 1 failed", checkCreateNumber(val)); [EOL]     val = "1234.5"; [EOL]     assertTrue("isNumber(String) 2 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 2 failed", checkCreateNumber(val)); [EOL]     val = ".12345"; [EOL]     assertTrue("isNumber(String) 3 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 3 failed", checkCreateNumber(val)); [EOL]     val = "1234E5"; [EOL]     assertTrue("isNumber(String) 4 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 4 failed", checkCreateNumber(val)); [EOL]     val = "1234E+5"; [EOL]     assertTrue("isNumber(String) 5 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 5 failed", checkCreateNumber(val)); [EOL]     val = "1234E-5"; [EOL]     assertTrue("isNumber(String) 6 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 6 failed", checkCreateNumber(val)); [EOL]     val = "123.4E5"; [EOL]     assertTrue("isNumber(String) 7 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 7 failed", checkCreateNumber(val)); [EOL]     val = "-1234"; [EOL]     assertTrue("isNumber(String) 8 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 8 failed", checkCreateNumber(val)); [EOL]     val = "-1234.5"; [EOL]     assertTrue("isNumber(String) 9 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 9 failed", checkCreateNumber(val)); [EOL]     val = "-.12345"; [EOL]     assertTrue("isNumber(String) 10 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 10 failed", checkCreateNumber(val)); [EOL]     val = "-1234E5"; [EOL]     assertTrue("isNumber(String) 11 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 11 failed", checkCreateNumber(val)); [EOL]     val = "0"; [EOL]     assertTrue("isNumber(String) 12 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 12 failed", checkCreateNumber(val)); [EOL]     val = "-0"; [EOL]     assertTrue("isNumber(String) 13 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 13 failed", checkCreateNumber(val)); [EOL]     val = "01234"; [EOL]     assertTrue("isNumber(String) 14 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 14 failed", checkCreateNumber(val)); [EOL]     val = "-01234"; [EOL]     assertTrue("isNumber(String) 15 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 15 failed", checkCreateNumber(val)); [EOL]     val = "0xABC123"; [EOL]     assertTrue("isNumber(String) 16 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 16 failed", checkCreateNumber(val)); [EOL]     val = "0x0"; [EOL]     assertTrue("isNumber(String) 17 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 17 failed", checkCreateNumber(val)); [EOL]     val = "123.4E21D"; [EOL]     assertTrue("isNumber(String) 19 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 19 failed", checkCreateNumber(val)); [EOL]     val = "-221.23F"; [EOL]     assertTrue("isNumber(String) 20 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 20 failed", checkCreateNumber(val)); [EOL]     val = "22338L"; [EOL]     assertTrue("isNumber(String) 21 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 21 failed", checkCreateNumber(val)); [EOL]     val = null; [EOL]     assertTrue("isNumber(String) 1 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 1 Neg failed", !checkCreateNumber(val)); [EOL]     val = ""; [EOL]     assertTrue("isNumber(String) 2 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 2 Neg failed", !checkCreateNumber(val)); [EOL]     val = "--2.3"; [EOL]     assertTrue("isNumber(String) 3 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 3 Neg failed", !checkCreateNumber(val)); [EOL]     val = ".12.3"; [EOL]     assertTrue("isNumber(String) 4 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 4 Neg failed", !checkCreateNumber(val)); [EOL]     val = "-123E"; [EOL]     assertTrue("isNumber(String) 5 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 5 Neg failed", !checkCreateNumber(val)); [EOL]     val = "-123E+-212"; [EOL]     assertTrue("isNumber(String) 6 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 6 Neg failed", !checkCreateNumber(val)); [EOL]     val = "-123E2.12"; [EOL]     assertTrue("isNumber(String) 7 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 7 Neg failed", !checkCreateNumber(val)); [EOL]     val = "0xGF"; [EOL]     assertTrue("isNumber(String) 8 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 8 Neg failed", !checkCreateNumber(val)); [EOL]     val = "0xFAE-1"; [EOL]     assertTrue("isNumber(String) 9 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 9 Neg failed", !checkCreateNumber(val)); [EOL]     val = "."; [EOL]     assertTrue("isNumber(String) 10 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 10 Neg failed", !checkCreateNumber(val)); [EOL]     val = "-0ABC123"; [EOL]     assertTrue("isNumber(String) 11 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 11 Neg failed", !checkCreateNumber(val)); [EOL]     val = "123.4E-D"; [EOL]     assertTrue("isNumber(String) 12 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 12 Neg failed", !checkCreateNumber(val)); [EOL]     val = "123.4ED"; [EOL]     assertTrue("isNumber(String) 13 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 13 Neg failed", !checkCreateNumber(val)); [EOL]     val = "1234E5l"; [EOL]     assertTrue("isNumber(String) 14 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 14 Neg failed", !checkCreateNumber(val)); [EOL]     val = "11a"; [EOL]     assertTrue("isNumber(String) 15 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 15 Neg failed", !checkCreateNumber(val)); [EOL]     val = "1a"; [EOL]     assertTrue("isNumber(String) 16 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 16 Neg failed", !checkCreateNumber(val)); [EOL]     val = "a"; [EOL]     assertTrue("isNumber(String) 17 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 17 Neg failed", !checkCreateNumber(val)); [EOL]     val = "11g"; [EOL]     assertTrue("isNumber(String) 18 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 18 Neg failed", !checkCreateNumber(val)); [EOL]     val = "11z"; [EOL]     assertTrue("isNumber(String) 19 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 19 Neg failed", !checkCreateNumber(val)); [EOL]     val = "11def"; [EOL]     assertTrue("isNumber(String) 20 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 20 Neg failed", !checkCreateNumber(val)); [EOL]     val = "11d11"; [EOL]     assertTrue("isNumber(String) 21 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 21 Neg failed", !checkCreateNumber(val)); [EOL]     val = "11 11"; [EOL]     assertTrue("isNumber(String) 22 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 22 Neg failed", !checkCreateNumber(val)); [EOL]     val = " 1111"; [EOL]     assertTrue("isNumber(String) 23 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 23 Neg failed", !checkCreateNumber(val)); [EOL]     val = "1111 "; [EOL]     assertTrue("isNumber(String) 24 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 24 Neg failed", !checkCreateNumber(val)); [EOL]     val = "2."; [EOL]     assertTrue("isNumber(String) LANG-521 failed", NumberUtils.isNumber(val)); [EOL]     val = "1.1L"; [EOL]     assertFalse("isNumber(String) LANG-664 failed", NumberUtils.isNumber(val)); [EOL] }
@Test [EOL] public void testIsNumber() { [EOL]     String val = "12345"; [EOL]     assertTrue("isNumber(String) 1 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 1 failed", checkCreateNumber(val)); [EOL]     val = "1234.5"; [EOL]     assertTrue("isNumber(String) 2 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 2 failed", checkCreateNumber(val)); [EOL]     val = ".12345"; [EOL]     assertTrue("isNumber(String) 3 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 3 failed", checkCreateNumber(val)); [EOL]     val = "1234E5"; [EOL]     assertTrue("isNumber(String) 4 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 4 failed", checkCreateNumber(val)); [EOL]     val = "1234E+5"; [EOL]     assertTrue("isNumber(String) 5 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 5 failed", checkCreateNumber(val)); [EOL]     val = "1234E-5"; [EOL]     assertTrue("isNumber(String) 6 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 6 failed", checkCreateNumber(val)); [EOL]     val = "123.4E5"; [EOL]     assertTrue("isNumber(String) 7 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 7 failed", checkCreateNumber(val)); [EOL]     val = "-1234"; [EOL]     assertTrue("isNumber(String) 8 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 8 failed", checkCreateNumber(val)); [EOL]     val = "-1234.5"; [EOL]     assertTrue("isNumber(String) 9 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 9 failed", checkCreateNumber(val)); [EOL]     val = "-.12345"; [EOL]     assertTrue("isNumber(String) 10 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 10 failed", checkCreateNumber(val)); [EOL]     val = "-1234E5"; [EOL]     assertTrue("isNumber(String) 11 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 11 failed", checkCreateNumber(val)); [EOL]     val = "0"; [EOL]     assertTrue("isNumber(String) 12 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 12 failed", checkCreateNumber(val)); [EOL]     val = "-0"; [EOL]     assertTrue("isNumber(String) 13 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 13 failed", checkCreateNumber(val)); [EOL]     val = "01234"; [EOL]     assertTrue("isNumber(String) 14 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 14 failed", checkCreateNumber(val)); [EOL]     val = "-01234"; [EOL]     assertTrue("isNumber(String) 15 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 15 failed", checkCreateNumber(val)); [EOL]     val = "0xABC123"; [EOL]     assertTrue("isNumber(String) 16 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 16 failed", checkCreateNumber(val)); [EOL]     val = "0x0"; [EOL]     assertTrue("isNumber(String) 17 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 17 failed", checkCreateNumber(val)); [EOL]     val = "123.4E21D"; [EOL]     assertTrue("isNumber(String) 19 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 19 failed", checkCreateNumber(val)); [EOL]     val = "-221.23F"; [EOL]     assertTrue("isNumber(String) 20 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 20 failed", checkCreateNumber(val)); [EOL]     val = "22338L"; [EOL]     assertTrue("isNumber(String) 21 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 21 failed", checkCreateNumber(val)); [EOL]     val = null; [EOL]     assertTrue("isNumber(String) 1 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 1 Neg failed", !checkCreateNumber(val)); [EOL]     val = ""; [EOL]     assertTrue("isNumber(String) 2 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 2 Neg failed", !checkCreateNumber(val)); [EOL]     val = "--2.3"; [EOL]     assertTrue("isNumber(String) 3 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 3 Neg failed", !checkCreateNumber(val)); [EOL]     val = ".12.3"; [EOL]     assertTrue("isNumber(String) 4 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 4 Neg failed", !checkCreateNumber(val)); [EOL]     val = "-123E"; [EOL]     assertTrue("isNumber(String) 5 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 5 Neg failed", !checkCreateNumber(val)); [EOL]     val = "-123E+-212"; [EOL]     assertTrue("isNumber(String) 6 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 6 Neg failed", !checkCreateNumber(val)); [EOL]     val = "-123E2.12"; [EOL]     assertTrue("isNumber(String) 7 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 7 Neg failed", !checkCreateNumber(val)); [EOL]     val = "0xGF"; [EOL]     assertTrue("isNumber(String) 8 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 8 Neg failed", !checkCreateNumber(val)); [EOL]     val = "0xFAE-1"; [EOL]     assertTrue("isNumber(String) 9 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 9 Neg failed", !checkCreateNumber(val)); [EOL]     val = "."; [EOL]     assertTrue("isNumber(String) 10 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 10 Neg failed", !checkCreateNumber(val)); [EOL]     val = "-0ABC123"; [EOL]     assertTrue("isNumber(String) 11 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 11 Neg failed", !checkCreateNumber(val)); [EOL]     val = "123.4E-D"; [EOL]     assertTrue("isNumber(String) 12 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 12 Neg failed", !checkCreateNumber(val)); [EOL]     val = "123.4ED"; [EOL]     assertTrue("isNumber(String) 13 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 13 Neg failed", !checkCreateNumber(val)); [EOL]     val = "1234E5l"; [EOL]     assertTrue("isNumber(String) 14 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 14 Neg failed", !checkCreateNumber(val)); [EOL]     val = "11a"; [EOL]     assertTrue("isNumber(String) 15 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 15 Neg failed", !checkCreateNumber(val)); [EOL]     val = "1a"; [EOL]     assertTrue("isNumber(String) 16 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 16 Neg failed", !checkCreateNumber(val)); [EOL]     val = "a"; [EOL]     assertTrue("isNumber(String) 17 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 17 Neg failed", !checkCreateNumber(val)); [EOL]     val = "11g"; [EOL]     assertTrue("isNumber(String) 18 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 18 Neg failed", !checkCreateNumber(val)); [EOL]     val = "11z"; [EOL]     assertTrue("isNumber(String) 19 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 19 Neg failed", !checkCreateNumber(val)); [EOL]     val = "11def"; [EOL]     assertTrue("isNumber(String) 20 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 20 Neg failed", !checkCreateNumber(val)); [EOL]     val = "11d11"; [EOL]     assertTrue("isNumber(String) 21 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 21 Neg failed", !checkCreateNumber(val)); [EOL]     val = "11 11"; [EOL]     assertTrue("isNumber(String) 22 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 22 Neg failed", !checkCreateNumber(val)); [EOL]     val = " 1111"; [EOL]     assertTrue("isNumber(String) 23 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 23 Neg failed", !checkCreateNumber(val)); [EOL]     val = "1111 "; [EOL]     assertTrue("isNumber(String) 24 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 24 Neg failed", !checkCreateNumber(val)); [EOL]     val = "2."; [EOL]     assertTrue("isNumber(String) LANG-521 failed", NumberUtils.isNumber(val)); [EOL]     val = "1.1L"; [EOL]     assertFalse("isNumber(String) LANG-664 failed", NumberUtils.isNumber(val)); [EOL] }
@Test [EOL] public void testIsNumber() { [EOL]     String val = "12345"; [EOL]     assertTrue("isNumber(String) 1 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 1 failed", checkCreateNumber(val)); [EOL]     val = "1234.5"; [EOL]     assertTrue("isNumber(String) 2 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 2 failed", checkCreateNumber(val)); [EOL]     val = ".12345"; [EOL]     assertTrue("isNumber(String) 3 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 3 failed", checkCreateNumber(val)); [EOL]     val = "1234E5"; [EOL]     assertTrue("isNumber(String) 4 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 4 failed", checkCreateNumber(val)); [EOL]     val = "1234E+5"; [EOL]     assertTrue("isNumber(String) 5 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 5 failed", checkCreateNumber(val)); [EOL]     val = "1234E-5"; [EOL]     assertTrue("isNumber(String) 6 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 6 failed", checkCreateNumber(val)); [EOL]     val = "123.4E5"; [EOL]     assertTrue("isNumber(String) 7 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 7 failed", checkCreateNumber(val)); [EOL]     val = "-1234"; [EOL]     assertTrue("isNumber(String) 8 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 8 failed", checkCreateNumber(val)); [EOL]     val = "-1234.5"; [EOL]     assertTrue("isNumber(String) 9 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 9 failed", checkCreateNumber(val)); [EOL]     val = "-.12345"; [EOL]     assertTrue("isNumber(String) 10 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 10 failed", checkCreateNumber(val)); [EOL]     val = "-1234E5"; [EOL]     assertTrue("isNumber(String) 11 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 11 failed", checkCreateNumber(val)); [EOL]     val = "0"; [EOL]     assertTrue("isNumber(String) 12 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 12 failed", checkCreateNumber(val)); [EOL]     val = "-0"; [EOL]     assertTrue("isNumber(String) 13 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 13 failed", checkCreateNumber(val)); [EOL]     val = "01234"; [EOL]     assertTrue("isNumber(String) 14 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 14 failed", checkCreateNumber(val)); [EOL]     val = "-01234"; [EOL]     assertTrue("isNumber(String) 15 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 15 failed", checkCreateNumber(val)); [EOL]     val = "0xABC123"; [EOL]     assertTrue("isNumber(String) 16 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 16 failed", checkCreateNumber(val)); [EOL]     val = "0x0"; [EOL]     assertTrue("isNumber(String) 17 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 17 failed", checkCreateNumber(val)); [EOL]     val = "123.4E21D"; [EOL]     assertTrue("isNumber(String) 19 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 19 failed", checkCreateNumber(val)); [EOL]     val = "-221.23F"; [EOL]     assertTrue("isNumber(String) 20 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 20 failed", checkCreateNumber(val)); [EOL]     val = "22338L"; [EOL]     assertTrue("isNumber(String) 21 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 21 failed", checkCreateNumber(val)); [EOL]     val = null; [EOL]     assertTrue("isNumber(String) 1 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 1 Neg failed", !checkCreateNumber(val)); [EOL]     val = ""; [EOL]     assertTrue("isNumber(String) 2 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 2 Neg failed", !checkCreateNumber(val)); [EOL]     val = "--2.3"; [EOL]     assertTrue("isNumber(String) 3 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 3 Neg failed", !checkCreateNumber(val)); [EOL]     val = ".12.3"; [EOL]     assertTrue("isNumber(String) 4 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 4 Neg failed", !checkCreateNumber(val)); [EOL]     val = "-123E"; [EOL]     assertTrue("isNumber(String) 5 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 5 Neg failed", !checkCreateNumber(val)); [EOL]     val = "-123E+-212"; [EOL]     assertTrue("isNumber(String) 6 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 6 Neg failed", !checkCreateNumber(val)); [EOL]     val = "-123E2.12"; [EOL]     assertTrue("isNumber(String) 7 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 7 Neg failed", !checkCreateNumber(val)); [EOL]     val = "0xGF"; [EOL]     assertTrue("isNumber(String) 8 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 8 Neg failed", !checkCreateNumber(val)); [EOL]     val = "0xFAE-1"; [EOL]     assertTrue("isNumber(String) 9 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 9 Neg failed", !checkCreateNumber(val)); [EOL]     val = "."; [EOL]     assertTrue("isNumber(String) 10 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 10 Neg failed", !checkCreateNumber(val)); [EOL]     val = "-0ABC123"; [EOL]     assertTrue("isNumber(String) 11 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 11 Neg failed", !checkCreateNumber(val)); [EOL]     val = "123.4E-D"; [EOL]     assertTrue("isNumber(String) 12 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 12 Neg failed", !checkCreateNumber(val)); [EOL]     val = "123.4ED"; [EOL]     assertTrue("isNumber(String) 13 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 13 Neg failed", !checkCreateNumber(val)); [EOL]     val = "1234E5l"; [EOL]     assertTrue("isNumber(String) 14 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 14 Neg failed", !checkCreateNumber(val)); [EOL]     val = "11a"; [EOL]     assertTrue("isNumber(String) 15 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 15 Neg failed", !checkCreateNumber(val)); [EOL]     val = "1a"; [EOL]     assertTrue("isNumber(String) 16 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 16 Neg failed", !checkCreateNumber(val)); [EOL]     val = "a"; [EOL]     assertTrue("isNumber(String) 17 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 17 Neg failed", !checkCreateNumber(val)); [EOL]     val = "11g"; [EOL]     assertTrue("isNumber(String) 18 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 18 Neg failed", !checkCreateNumber(val)); [EOL]     val = "11z"; [EOL]     assertTrue("isNumber(String) 19 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 19 Neg failed", !checkCreateNumber(val)); [EOL]     val = "11def"; [EOL]     assertTrue("isNumber(String) 20 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 20 Neg failed", !checkCreateNumber(val)); [EOL]     val = "11d11"; [EOL]     assertTrue("isNumber(String) 21 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 21 Neg failed", !checkCreateNumber(val)); [EOL]     val = "11 11"; [EOL]     assertTrue("isNumber(String) 22 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 22 Neg failed", !checkCreateNumber(val)); [EOL]     val = " 1111"; [EOL]     assertTrue("isNumber(String) 23 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 23 Neg failed", !checkCreateNumber(val)); [EOL]     val = "1111 "; [EOL]     assertTrue("isNumber(String) 24 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 24 Neg failed", !checkCreateNumber(val)); [EOL]     val = "2."; [EOL]     assertTrue("isNumber(String) LANG-521 failed", NumberUtils.isNumber(val)); [EOL]     val = "1.1L"; [EOL]     assertFalse("isNumber(String) LANG-664 failed", NumberUtils.isNumber(val)); [EOL] }
@Test [EOL] public void testIsNumber() { [EOL]     String val = "12345"; [EOL]     assertTrue("isNumber(String) 1 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 1 failed", checkCreateNumber(val)); [EOL]     val = "1234.5"; [EOL]     assertTrue("isNumber(String) 2 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 2 failed", checkCreateNumber(val)); [EOL]     val = ".12345"; [EOL]     assertTrue("isNumber(String) 3 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 3 failed", checkCreateNumber(val)); [EOL]     val = "1234E5"; [EOL]     assertTrue("isNumber(String) 4 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 4 failed", checkCreateNumber(val)); [EOL]     val = "1234E+5"; [EOL]     assertTrue("isNumber(String) 5 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 5 failed", checkCreateNumber(val)); [EOL]     val = "1234E-5"; [EOL]     assertTrue("isNumber(String) 6 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 6 failed", checkCreateNumber(val)); [EOL]     val = "123.4E5"; [EOL]     assertTrue("isNumber(String) 7 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 7 failed", checkCreateNumber(val)); [EOL]     val = "-1234"; [EOL]     assertTrue("isNumber(String) 8 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 8 failed", checkCreateNumber(val)); [EOL]     val = "-1234.5"; [EOL]     assertTrue("isNumber(String) 9 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 9 failed", checkCreateNumber(val)); [EOL]     val = "-.12345"; [EOL]     assertTrue("isNumber(String) 10 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 10 failed", checkCreateNumber(val)); [EOL]     val = "-1234E5"; [EOL]     assertTrue("isNumber(String) 11 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 11 failed", checkCreateNumber(val)); [EOL]     val = "0"; [EOL]     assertTrue("isNumber(String) 12 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 12 failed", checkCreateNumber(val)); [EOL]     val = "-0"; [EOL]     assertTrue("isNumber(String) 13 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 13 failed", checkCreateNumber(val)); [EOL]     val = "01234"; [EOL]     assertTrue("isNumber(String) 14 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 14 failed", checkCreateNumber(val)); [EOL]     val = "-01234"; [EOL]     assertTrue("isNumber(String) 15 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 15 failed", checkCreateNumber(val)); [EOL]     val = "0xABC123"; [EOL]     assertTrue("isNumber(String) 16 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 16 failed", checkCreateNumber(val)); [EOL]     val = "0x0"; [EOL]     assertTrue("isNumber(String) 17 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 17 failed", checkCreateNumber(val)); [EOL]     val = "123.4E21D"; [EOL]     assertTrue("isNumber(String) 19 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 19 failed", checkCreateNumber(val)); [EOL]     val = "-221.23F"; [EOL]     assertTrue("isNumber(String) 20 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 20 failed", checkCreateNumber(val)); [EOL]     val = "22338L"; [EOL]     assertTrue("isNumber(String) 21 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 21 failed", checkCreateNumber(val)); [EOL]     val = null; [EOL]     assertTrue("isNumber(String) 1 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 1 Neg failed", !checkCreateNumber(val)); [EOL]     val = ""; [EOL]     assertTrue("isNumber(String) 2 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 2 Neg failed", !checkCreateNumber(val)); [EOL]     val = "--2.3"; [EOL]     assertTrue("isNumber(String) 3 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 3 Neg failed", !checkCreateNumber(val)); [EOL]     val = ".12.3"; [EOL]     assertTrue("isNumber(String) 4 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 4 Neg failed", !checkCreateNumber(val)); [EOL]     val = "-123E"; [EOL]     assertTrue("isNumber(String) 5 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 5 Neg failed", !checkCreateNumber(val)); [EOL]     val = "-123E+-212"; [EOL]     assertTrue("isNumber(String) 6 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 6 Neg failed", !checkCreateNumber(val)); [EOL]     val = "-123E2.12"; [EOL]     assertTrue("isNumber(String) 7 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 7 Neg failed", !checkCreateNumber(val)); [EOL]     val = "0xGF"; [EOL]     assertTrue("isNumber(String) 8 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 8 Neg failed", !checkCreateNumber(val)); [EOL]     val = "0xFAE-1"; [EOL]     assertTrue("isNumber(String) 9 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 9 Neg failed", !checkCreateNumber(val)); [EOL]     val = "."; [EOL]     assertTrue("isNumber(String) 10 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 10 Neg failed", !checkCreateNumber(val)); [EOL]     val = "-0ABC123"; [EOL]     assertTrue("isNumber(String) 11 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 11 Neg failed", !checkCreateNumber(val)); [EOL]     val = "123.4E-D"; [EOL]     assertTrue("isNumber(String) 12 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 12 Neg failed", !checkCreateNumber(val)); [EOL]     val = "123.4ED"; [EOL]     assertTrue("isNumber(String) 13 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 13 Neg failed", !checkCreateNumber(val)); [EOL]     val = "1234E5l"; [EOL]     assertTrue("isNumber(String) 14 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 14 Neg failed", !checkCreateNumber(val)); [EOL]     val = "11a"; [EOL]     assertTrue("isNumber(String) 15 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 15 Neg failed", !checkCreateNumber(val)); [EOL]     val = "1a"; [EOL]     assertTrue("isNumber(String) 16 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 16 Neg failed", !checkCreateNumber(val)); [EOL]     val = "a"; [EOL]     assertTrue("isNumber(String) 17 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 17 Neg failed", !checkCreateNumber(val)); [EOL]     val = "11g"; [EOL]     assertTrue("isNumber(String) 18 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 18 Neg failed", !checkCreateNumber(val)); [EOL]     val = "11z"; [EOL]     assertTrue("isNumber(String) 19 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 19 Neg failed", !checkCreateNumber(val)); [EOL]     val = "11def"; [EOL]     assertTrue("isNumber(String) 20 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 20 Neg failed", !checkCreateNumber(val)); [EOL]     val = "11d11"; [EOL]     assertTrue("isNumber(String) 21 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 21 Neg failed", !checkCreateNumber(val)); [EOL]     val = "11 11"; [EOL]     assertTrue("isNumber(String) 22 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 22 Neg failed", !checkCreateNumber(val)); [EOL]     val = " 1111"; [EOL]     assertTrue("isNumber(String) 23 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 23 Neg failed", !checkCreateNumber(val)); [EOL]     val = "1111 "; [EOL]     assertTrue("isNumber(String) 24 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 24 Neg failed", !checkCreateNumber(val)); [EOL]     val = "2."; [EOL]     assertTrue("isNumber(String) LANG-521 failed", NumberUtils.isNumber(val)); [EOL]     val = "1.1L"; [EOL]     assertFalse("isNumber(String) LANG-664 failed", NumberUtils.isNumber(val)); [EOL] }
@Test [EOL] public void testIsNumber() { [EOL]     String val = "12345"; [EOL]     assertTrue("isNumber(String) 1 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 1 failed", checkCreateNumber(val)); [EOL]     val = "1234.5"; [EOL]     assertTrue("isNumber(String) 2 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 2 failed", checkCreateNumber(val)); [EOL]     val = ".12345"; [EOL]     assertTrue("isNumber(String) 3 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 3 failed", checkCreateNumber(val)); [EOL]     val = "1234E5"; [EOL]     assertTrue("isNumber(String) 4 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 4 failed", checkCreateNumber(val)); [EOL]     val = "1234E+5"; [EOL]     assertTrue("isNumber(String) 5 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 5 failed", checkCreateNumber(val)); [EOL]     val = "1234E-5"; [EOL]     assertTrue("isNumber(String) 6 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 6 failed", checkCreateNumber(val)); [EOL]     val = "123.4E5"; [EOL]     assertTrue("isNumber(String) 7 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 7 failed", checkCreateNumber(val)); [EOL]     val = "-1234"; [EOL]     assertTrue("isNumber(String) 8 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 8 failed", checkCreateNumber(val)); [EOL]     val = "-1234.5"; [EOL]     assertTrue("isNumber(String) 9 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 9 failed", checkCreateNumber(val)); [EOL]     val = "-.12345"; [EOL]     assertTrue("isNumber(String) 10 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 10 failed", checkCreateNumber(val)); [EOL]     val = "-1234E5"; [EOL]     assertTrue("isNumber(String) 11 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 11 failed", checkCreateNumber(val)); [EOL]     val = "0"; [EOL]     assertTrue("isNumber(String) 12 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 12 failed", checkCreateNumber(val)); [EOL]     val = "-0"; [EOL]     assertTrue("isNumber(String) 13 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 13 failed", checkCreateNumber(val)); [EOL]     val = "01234"; [EOL]     assertTrue("isNumber(String) 14 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 14 failed", checkCreateNumber(val)); [EOL]     val = "-01234"; [EOL]     assertTrue("isNumber(String) 15 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 15 failed", checkCreateNumber(val)); [EOL]     val = "0xABC123"; [EOL]     assertTrue("isNumber(String) 16 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 16 failed", checkCreateNumber(val)); [EOL]     val = "0x0"; [EOL]     assertTrue("isNumber(String) 17 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 17 failed", checkCreateNumber(val)); [EOL]     val = "123.4E21D"; [EOL]     assertTrue("isNumber(String) 19 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 19 failed", checkCreateNumber(val)); [EOL]     val = "-221.23F"; [EOL]     assertTrue("isNumber(String) 20 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 20 failed", checkCreateNumber(val)); [EOL]     val = "22338L"; [EOL]     assertTrue("isNumber(String) 21 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 21 failed", checkCreateNumber(val)); [EOL]     val = null; [EOL]     assertTrue("isNumber(String) 1 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 1 Neg failed", !checkCreateNumber(val)); [EOL]     val = ""; [EOL]     assertTrue("isNumber(String) 2 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 2 Neg failed", !checkCreateNumber(val)); [EOL]     val = "--2.3"; [EOL]     assertTrue("isNumber(String) 3 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 3 Neg failed", !checkCreateNumber(val)); [EOL]     val = ".12.3"; [EOL]     assertTrue("isNumber(String) 4 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 4 Neg failed", !checkCreateNumber(val)); [EOL]     val = "-123E"; [EOL]     assertTrue("isNumber(String) 5 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 5 Neg failed", !checkCreateNumber(val)); [EOL]     val = "-123E+-212"; [EOL]     assertTrue("isNumber(String) 6 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 6 Neg failed", !checkCreateNumber(val)); [EOL]     val = "-123E2.12"; [EOL]     assertTrue("isNumber(String) 7 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 7 Neg failed", !checkCreateNumber(val)); [EOL]     val = "0xGF"; [EOL]     assertTrue("isNumber(String) 8 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 8 Neg failed", !checkCreateNumber(val)); [EOL]     val = "0xFAE-1"; [EOL]     assertTrue("isNumber(String) 9 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 9 Neg failed", !checkCreateNumber(val)); [EOL]     val = "."; [EOL]     assertTrue("isNumber(String) 10 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 10 Neg failed", !checkCreateNumber(val)); [EOL]     val = "-0ABC123"; [EOL]     assertTrue("isNumber(String) 11 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 11 Neg failed", !checkCreateNumber(val)); [EOL]     val = "123.4E-D"; [EOL]     assertTrue("isNumber(String) 12 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 12 Neg failed", !checkCreateNumber(val)); [EOL]     val = "123.4ED"; [EOL]     assertTrue("isNumber(String) 13 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 13 Neg failed", !checkCreateNumber(val)); [EOL]     val = "1234E5l"; [EOL]     assertTrue("isNumber(String) 14 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 14 Neg failed", !checkCreateNumber(val)); [EOL]     val = "11a"; [EOL]     assertTrue("isNumber(String) 15 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 15 Neg failed", !checkCreateNumber(val)); [EOL]     val = "1a"; [EOL]     assertTrue("isNumber(String) 16 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 16 Neg failed", !checkCreateNumber(val)); [EOL]     val = "a"; [EOL]     assertTrue("isNumber(String) 17 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 17 Neg failed", !checkCreateNumber(val)); [EOL]     val = "11g"; [EOL]     assertTrue("isNumber(String) 18 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 18 Neg failed", !checkCreateNumber(val)); [EOL]     val = "11z"; [EOL]     assertTrue("isNumber(String) 19 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 19 Neg failed", !checkCreateNumber(val)); [EOL]     val = "11def"; [EOL]     assertTrue("isNumber(String) 20 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 20 Neg failed", !checkCreateNumber(val)); [EOL]     val = "11d11"; [EOL]     assertTrue("isNumber(String) 21 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 21 Neg failed", !checkCreateNumber(val)); [EOL]     val = "11 11"; [EOL]     assertTrue("isNumber(String) 22 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 22 Neg failed", !checkCreateNumber(val)); [EOL]     val = " 1111"; [EOL]     assertTrue("isNumber(String) 23 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 23 Neg failed", !checkCreateNumber(val)); [EOL]     val = "1111 "; [EOL]     assertTrue("isNumber(String) 24 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 24 Neg failed", !checkCreateNumber(val)); [EOL]     val = "2."; [EOL]     assertTrue("isNumber(String) LANG-521 failed", NumberUtils.isNumber(val)); [EOL]     val = "1.1L"; [EOL]     assertFalse("isNumber(String) LANG-664 failed", NumberUtils.isNumber(val)); [EOL] }
@Test [EOL] public void testIsNumber() { [EOL]     String val = "12345"; [EOL]     assertTrue("isNumber(String) 1 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 1 failed", checkCreateNumber(val)); [EOL]     val = "1234.5"; [EOL]     assertTrue("isNumber(String) 2 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 2 failed", checkCreateNumber(val)); [EOL]     val = ".12345"; [EOL]     assertTrue("isNumber(String) 3 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 3 failed", checkCreateNumber(val)); [EOL]     val = "1234E5"; [EOL]     assertTrue("isNumber(String) 4 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 4 failed", checkCreateNumber(val)); [EOL]     val = "1234E+5"; [EOL]     assertTrue("isNumber(String) 5 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 5 failed", checkCreateNumber(val)); [EOL]     val = "1234E-5"; [EOL]     assertTrue("isNumber(String) 6 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 6 failed", checkCreateNumber(val)); [EOL]     val = "123.4E5"; [EOL]     assertTrue("isNumber(String) 7 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 7 failed", checkCreateNumber(val)); [EOL]     val = "-1234"; [EOL]     assertTrue("isNumber(String) 8 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 8 failed", checkCreateNumber(val)); [EOL]     val = "-1234.5"; [EOL]     assertTrue("isNumber(String) 9 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 9 failed", checkCreateNumber(val)); [EOL]     val = "-.12345"; [EOL]     assertTrue("isNumber(String) 10 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 10 failed", checkCreateNumber(val)); [EOL]     val = "-1234E5"; [EOL]     assertTrue("isNumber(String) 11 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 11 failed", checkCreateNumber(val)); [EOL]     val = "0"; [EOL]     assertTrue("isNumber(String) 12 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 12 failed", checkCreateNumber(val)); [EOL]     val = "-0"; [EOL]     assertTrue("isNumber(String) 13 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 13 failed", checkCreateNumber(val)); [EOL]     val = "01234"; [EOL]     assertTrue("isNumber(String) 14 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 14 failed", checkCreateNumber(val)); [EOL]     val = "-01234"; [EOL]     assertTrue("isNumber(String) 15 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 15 failed", checkCreateNumber(val)); [EOL]     val = "0xABC123"; [EOL]     assertTrue("isNumber(String) 16 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 16 failed", checkCreateNumber(val)); [EOL]     val = "0x0"; [EOL]     assertTrue("isNumber(String) 17 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 17 failed", checkCreateNumber(val)); [EOL]     val = "123.4E21D"; [EOL]     assertTrue("isNumber(String) 19 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 19 failed", checkCreateNumber(val)); [EOL]     val = "-221.23F"; [EOL]     assertTrue("isNumber(String) 20 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 20 failed", checkCreateNumber(val)); [EOL]     val = "22338L"; [EOL]     assertTrue("isNumber(String) 21 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 21 failed", checkCreateNumber(val)); [EOL]     val = null; [EOL]     assertTrue("isNumber(String) 1 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 1 Neg failed", !checkCreateNumber(val)); [EOL]     val = ""; [EOL]     assertTrue("isNumber(String) 2 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 2 Neg failed", !checkCreateNumber(val)); [EOL]     val = "--2.3"; [EOL]     assertTrue("isNumber(String) 3 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 3 Neg failed", !checkCreateNumber(val)); [EOL]     val = ".12.3"; [EOL]     assertTrue("isNumber(String) 4 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 4 Neg failed", !checkCreateNumber(val)); [EOL]     val = "-123E"; [EOL]     assertTrue("isNumber(String) 5 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 5 Neg failed", !checkCreateNumber(val)); [EOL]     val = "-123E+-212"; [EOL]     assertTrue("isNumber(String) 6 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 6 Neg failed", !checkCreateNumber(val)); [EOL]     val = "-123E2.12"; [EOL]     assertTrue("isNumber(String) 7 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 7 Neg failed", !checkCreateNumber(val)); [EOL]     val = "0xGF"; [EOL]     assertTrue("isNumber(String) 8 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 8 Neg failed", !checkCreateNumber(val)); [EOL]     val = "0xFAE-1"; [EOL]     assertTrue("isNumber(String) 9 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 9 Neg failed", !checkCreateNumber(val)); [EOL]     val = "."; [EOL]     assertTrue("isNumber(String) 10 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 10 Neg failed", !checkCreateNumber(val)); [EOL]     val = "-0ABC123"; [EOL]     assertTrue("isNumber(String) 11 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 11 Neg failed", !checkCreateNumber(val)); [EOL]     val = "123.4E-D"; [EOL]     assertTrue("isNumber(String) 12 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 12 Neg failed", !checkCreateNumber(val)); [EOL]     val = "123.4ED"; [EOL]     assertTrue("isNumber(String) 13 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 13 Neg failed", !checkCreateNumber(val)); [EOL]     val = "1234E5l"; [EOL]     assertTrue("isNumber(String) 14 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 14 Neg failed", !checkCreateNumber(val)); [EOL]     val = "11a"; [EOL]     assertTrue("isNumber(String) 15 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 15 Neg failed", !checkCreateNumber(val)); [EOL]     val = "1a"; [EOL]     assertTrue("isNumber(String) 16 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 16 Neg failed", !checkCreateNumber(val)); [EOL]     val = "a"; [EOL]     assertTrue("isNumber(String) 17 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 17 Neg failed", !checkCreateNumber(val)); [EOL]     val = "11g"; [EOL]     assertTrue("isNumber(String) 18 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 18 Neg failed", !checkCreateNumber(val)); [EOL]     val = "11z"; [EOL]     assertTrue("isNumber(String) 19 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 19 Neg failed", !checkCreateNumber(val)); [EOL]     val = "11def"; [EOL]     assertTrue("isNumber(String) 20 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 20 Neg failed", !checkCreateNumber(val)); [EOL]     val = "11d11"; [EOL]     assertTrue("isNumber(String) 21 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 21 Neg failed", !checkCreateNumber(val)); [EOL]     val = "11 11"; [EOL]     assertTrue("isNumber(String) 22 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 22 Neg failed", !checkCreateNumber(val)); [EOL]     val = " 1111"; [EOL]     assertTrue("isNumber(String) 23 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 23 Neg failed", !checkCreateNumber(val)); [EOL]     val = "1111 "; [EOL]     assertTrue("isNumber(String) 24 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 24 Neg failed", !checkCreateNumber(val)); [EOL]     val = "2."; [EOL]     assertTrue("isNumber(String) LANG-521 failed", NumberUtils.isNumber(val)); [EOL]     val = "1.1L"; [EOL]     assertFalse("isNumber(String) LANG-664 failed", NumberUtils.isNumber(val)); [EOL] }
@Test [EOL] public void testIsNumber() { [EOL]     String val = "12345"; [EOL]     assertTrue("isNumber(String) 1 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 1 failed", checkCreateNumber(val)); [EOL]     val = "1234.5"; [EOL]     assertTrue("isNumber(String) 2 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 2 failed", checkCreateNumber(val)); [EOL]     val = ".12345"; [EOL]     assertTrue("isNumber(String) 3 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 3 failed", checkCreateNumber(val)); [EOL]     val = "1234E5"; [EOL]     assertTrue("isNumber(String) 4 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 4 failed", checkCreateNumber(val)); [EOL]     val = "1234E+5"; [EOL]     assertTrue("isNumber(String) 5 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 5 failed", checkCreateNumber(val)); [EOL]     val = "1234E-5"; [EOL]     assertTrue("isNumber(String) 6 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 6 failed", checkCreateNumber(val)); [EOL]     val = "123.4E5"; [EOL]     assertTrue("isNumber(String) 7 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 7 failed", checkCreateNumber(val)); [EOL]     val = "-1234"; [EOL]     assertTrue("isNumber(String) 8 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 8 failed", checkCreateNumber(val)); [EOL]     val = "-1234.5"; [EOL]     assertTrue("isNumber(String) 9 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 9 failed", checkCreateNumber(val)); [EOL]     val = "-.12345"; [EOL]     assertTrue("isNumber(String) 10 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 10 failed", checkCreateNumber(val)); [EOL]     val = "-1234E5"; [EOL]     assertTrue("isNumber(String) 11 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 11 failed", checkCreateNumber(val)); [EOL]     val = "0"; [EOL]     assertTrue("isNumber(String) 12 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 12 failed", checkCreateNumber(val)); [EOL]     val = "-0"; [EOL]     assertTrue("isNumber(String) 13 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 13 failed", checkCreateNumber(val)); [EOL]     val = "01234"; [EOL]     assertTrue("isNumber(String) 14 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 14 failed", checkCreateNumber(val)); [EOL]     val = "-01234"; [EOL]     assertTrue("isNumber(String) 15 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 15 failed", checkCreateNumber(val)); [EOL]     val = "0xABC123"; [EOL]     assertTrue("isNumber(String) 16 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 16 failed", checkCreateNumber(val)); [EOL]     val = "0x0"; [EOL]     assertTrue("isNumber(String) 17 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 17 failed", checkCreateNumber(val)); [EOL]     val = "123.4E21D"; [EOL]     assertTrue("isNumber(String) 19 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 19 failed", checkCreateNumber(val)); [EOL]     val = "-221.23F"; [EOL]     assertTrue("isNumber(String) 20 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 20 failed", checkCreateNumber(val)); [EOL]     val = "22338L"; [EOL]     assertTrue("isNumber(String) 21 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 21 failed", checkCreateNumber(val)); [EOL]     val = null; [EOL]     assertTrue("isNumber(String) 1 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 1 Neg failed", !checkCreateNumber(val)); [EOL]     val = ""; [EOL]     assertTrue("isNumber(String) 2 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 2 Neg failed", !checkCreateNumber(val)); [EOL]     val = "--2.3"; [EOL]     assertTrue("isNumber(String) 3 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 3 Neg failed", !checkCreateNumber(val)); [EOL]     val = ".12.3"; [EOL]     assertTrue("isNumber(String) 4 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 4 Neg failed", !checkCreateNumber(val)); [EOL]     val = "-123E"; [EOL]     assertTrue("isNumber(String) 5 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 5 Neg failed", !checkCreateNumber(val)); [EOL]     val = "-123E+-212"; [EOL]     assertTrue("isNumber(String) 6 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 6 Neg failed", !checkCreateNumber(val)); [EOL]     val = "-123E2.12"; [EOL]     assertTrue("isNumber(String) 7 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 7 Neg failed", !checkCreateNumber(val)); [EOL]     val = "0xGF"; [EOL]     assertTrue("isNumber(String) 8 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 8 Neg failed", !checkCreateNumber(val)); [EOL]     val = "0xFAE-1"; [EOL]     assertTrue("isNumber(String) 9 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 9 Neg failed", !checkCreateNumber(val)); [EOL]     val = "."; [EOL]     assertTrue("isNumber(String) 10 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 10 Neg failed", !checkCreateNumber(val)); [EOL]     val = "-0ABC123"; [EOL]     assertTrue("isNumber(String) 11 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 11 Neg failed", !checkCreateNumber(val)); [EOL]     val = "123.4E-D"; [EOL]     assertTrue("isNumber(String) 12 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 12 Neg failed", !checkCreateNumber(val)); [EOL]     val = "123.4ED"; [EOL]     assertTrue("isNumber(String) 13 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 13 Neg failed", !checkCreateNumber(val)); [EOL]     val = "1234E5l"; [EOL]     assertTrue("isNumber(String) 14 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 14 Neg failed", !checkCreateNumber(val)); [EOL]     val = "11a"; [EOL]     assertTrue("isNumber(String) 15 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 15 Neg failed", !checkCreateNumber(val)); [EOL]     val = "1a"; [EOL]     assertTrue("isNumber(String) 16 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 16 Neg failed", !checkCreateNumber(val)); [EOL]     val = "a"; [EOL]     assertTrue("isNumber(String) 17 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 17 Neg failed", !checkCreateNumber(val)); [EOL]     val = "11g"; [EOL]     assertTrue("isNumber(String) 18 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 18 Neg failed", !checkCreateNumber(val)); [EOL]     val = "11z"; [EOL]     assertTrue("isNumber(String) 19 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 19 Neg failed", !checkCreateNumber(val)); [EOL]     val = "11def"; [EOL]     assertTrue("isNumber(String) 20 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 20 Neg failed", !checkCreateNumber(val)); [EOL]     val = "11d11"; [EOL]     assertTrue("isNumber(String) 21 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 21 Neg failed", !checkCreateNumber(val)); [EOL]     val = "11 11"; [EOL]     assertTrue("isNumber(String) 22 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 22 Neg failed", !checkCreateNumber(val)); [EOL]     val = " 1111"; [EOL]     assertTrue("isNumber(String) 23 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 23 Neg failed", !checkCreateNumber(val)); [EOL]     val = "1111 "; [EOL]     assertTrue("isNumber(String) 24 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 24 Neg failed", !checkCreateNumber(val)); [EOL]     val = "2."; [EOL]     assertTrue("isNumber(String) LANG-521 failed", NumberUtils.isNumber(val)); [EOL]     val = "1.1L"; [EOL]     assertFalse("isNumber(String) LANG-664 failed", NumberUtils.isNumber(val)); [EOL] }
@Test [EOL] public void testIsNumber() { [EOL]     String val = "12345"; [EOL]     assertTrue("isNumber(String) 1 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 1 failed", checkCreateNumber(val)); [EOL]     val = "1234.5"; [EOL]     assertTrue("isNumber(String) 2 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 2 failed", checkCreateNumber(val)); [EOL]     val = ".12345"; [EOL]     assertTrue("isNumber(String) 3 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 3 failed", checkCreateNumber(val)); [EOL]     val = "1234E5"; [EOL]     assertTrue("isNumber(String) 4 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 4 failed", checkCreateNumber(val)); [EOL]     val = "1234E+5"; [EOL]     assertTrue("isNumber(String) 5 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 5 failed", checkCreateNumber(val)); [EOL]     val = "1234E-5"; [EOL]     assertTrue("isNumber(String) 6 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 6 failed", checkCreateNumber(val)); [EOL]     val = "123.4E5"; [EOL]     assertTrue("isNumber(String) 7 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 7 failed", checkCreateNumber(val)); [EOL]     val = "-1234"; [EOL]     assertTrue("isNumber(String) 8 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 8 failed", checkCreateNumber(val)); [EOL]     val = "-1234.5"; [EOL]     assertTrue("isNumber(String) 9 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 9 failed", checkCreateNumber(val)); [EOL]     val = "-.12345"; [EOL]     assertTrue("isNumber(String) 10 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 10 failed", checkCreateNumber(val)); [EOL]     val = "-1234E5"; [EOL]     assertTrue("isNumber(String) 11 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 11 failed", checkCreateNumber(val)); [EOL]     val = "0"; [EOL]     assertTrue("isNumber(String) 12 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 12 failed", checkCreateNumber(val)); [EOL]     val = "-0"; [EOL]     assertTrue("isNumber(String) 13 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 13 failed", checkCreateNumber(val)); [EOL]     val = "01234"; [EOL]     assertTrue("isNumber(String) 14 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 14 failed", checkCreateNumber(val)); [EOL]     val = "-01234"; [EOL]     assertTrue("isNumber(String) 15 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 15 failed", checkCreateNumber(val)); [EOL]     val = "0xABC123"; [EOL]     assertTrue("isNumber(String) 16 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 16 failed", checkCreateNumber(val)); [EOL]     val = "0x0"; [EOL]     assertTrue("isNumber(String) 17 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 17 failed", checkCreateNumber(val)); [EOL]     val = "123.4E21D"; [EOL]     assertTrue("isNumber(String) 19 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 19 failed", checkCreateNumber(val)); [EOL]     val = "-221.23F"; [EOL]     assertTrue("isNumber(String) 20 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 20 failed", checkCreateNumber(val)); [EOL]     val = "22338L"; [EOL]     assertTrue("isNumber(String) 21 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 21 failed", checkCreateNumber(val)); [EOL]     val = null; [EOL]     assertTrue("isNumber(String) 1 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 1 Neg failed", !checkCreateNumber(val)); [EOL]     val = ""; [EOL]     assertTrue("isNumber(String) 2 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 2 Neg failed", !checkCreateNumber(val)); [EOL]     val = "--2.3"; [EOL]     assertTrue("isNumber(String) 3 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 3 Neg failed", !checkCreateNumber(val)); [EOL]     val = ".12.3"; [EOL]     assertTrue("isNumber(String) 4 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 4 Neg failed", !checkCreateNumber(val)); [EOL]     val = "-123E"; [EOL]     assertTrue("isNumber(String) 5 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 5 Neg failed", !checkCreateNumber(val)); [EOL]     val = "-123E+-212"; [EOL]     assertTrue("isNumber(String) 6 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 6 Neg failed", !checkCreateNumber(val)); [EOL]     val = "-123E2.12"; [EOL]     assertTrue("isNumber(String) 7 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 7 Neg failed", !checkCreateNumber(val)); [EOL]     val = "0xGF"; [EOL]     assertTrue("isNumber(String) 8 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 8 Neg failed", !checkCreateNumber(val)); [EOL]     val = "0xFAE-1"; [EOL]     assertTrue("isNumber(String) 9 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 9 Neg failed", !checkCreateNumber(val)); [EOL]     val = "."; [EOL]     assertTrue("isNumber(String) 10 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 10 Neg failed", !checkCreateNumber(val)); [EOL]     val = "-0ABC123"; [EOL]     assertTrue("isNumber(String) 11 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 11 Neg failed", !checkCreateNumber(val)); [EOL]     val = "123.4E-D"; [EOL]     assertTrue("isNumber(String) 12 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 12 Neg failed", !checkCreateNumber(val)); [EOL]     val = "123.4ED"; [EOL]     assertTrue("isNumber(String) 13 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 13 Neg failed", !checkCreateNumber(val)); [EOL]     val = "1234E5l"; [EOL]     assertTrue("isNumber(String) 14 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 14 Neg failed", !checkCreateNumber(val)); [EOL]     val = "11a"; [EOL]     assertTrue("isNumber(String) 15 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 15 Neg failed", !checkCreateNumber(val)); [EOL]     val = "1a"; [EOL]     assertTrue("isNumber(String) 16 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 16 Neg failed", !checkCreateNumber(val)); [EOL]     val = "a"; [EOL]     assertTrue("isNumber(String) 17 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 17 Neg failed", !checkCreateNumber(val)); [EOL]     val = "11g"; [EOL]     assertTrue("isNumber(String) 18 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 18 Neg failed", !checkCreateNumber(val)); [EOL]     val = "11z"; [EOL]     assertTrue("isNumber(String) 19 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 19 Neg failed", !checkCreateNumber(val)); [EOL]     val = "11def"; [EOL]     assertTrue("isNumber(String) 20 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 20 Neg failed", !checkCreateNumber(val)); [EOL]     val = "11d11"; [EOL]     assertTrue("isNumber(String) 21 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 21 Neg failed", !checkCreateNumber(val)); [EOL]     val = "11 11"; [EOL]     assertTrue("isNumber(String) 22 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 22 Neg failed", !checkCreateNumber(val)); [EOL]     val = " 1111"; [EOL]     assertTrue("isNumber(String) 23 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 23 Neg failed", !checkCreateNumber(val)); [EOL]     val = "1111 "; [EOL]     assertTrue("isNumber(String) 24 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 24 Neg failed", !checkCreateNumber(val)); [EOL]     val = "2."; [EOL]     assertTrue("isNumber(String) LANG-521 failed", NumberUtils.isNumber(val)); [EOL]     val = "1.1L"; [EOL]     assertFalse("isNumber(String) LANG-664 failed", NumberUtils.isNumber(val)); [EOL] }
@Test [EOL] public void testIsNumber() { [EOL]     String val = "12345"; [EOL]     assertTrue("isNumber(String) 1 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 1 failed", checkCreateNumber(val)); [EOL]     val = "1234.5"; [EOL]     assertTrue("isNumber(String) 2 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 2 failed", checkCreateNumber(val)); [EOL]     val = ".12345"; [EOL]     assertTrue("isNumber(String) 3 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 3 failed", checkCreateNumber(val)); [EOL]     val = "1234E5"; [EOL]     assertTrue("isNumber(String) 4 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 4 failed", checkCreateNumber(val)); [EOL]     val = "1234E+5"; [EOL]     assertTrue("isNumber(String) 5 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 5 failed", checkCreateNumber(val)); [EOL]     val = "1234E-5"; [EOL]     assertTrue("isNumber(String) 6 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 6 failed", checkCreateNumber(val)); [EOL]     val = "123.4E5"; [EOL]     assertTrue("isNumber(String) 7 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 7 failed", checkCreateNumber(val)); [EOL]     val = "-1234"; [EOL]     assertTrue("isNumber(String) 8 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 8 failed", checkCreateNumber(val)); [EOL]     val = "-1234.5"; [EOL]     assertTrue("isNumber(String) 9 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 9 failed", checkCreateNumber(val)); [EOL]     val = "-.12345"; [EOL]     assertTrue("isNumber(String) 10 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 10 failed", checkCreateNumber(val)); [EOL]     val = "-1234E5"; [EOL]     assertTrue("isNumber(String) 11 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 11 failed", checkCreateNumber(val)); [EOL]     val = "0"; [EOL]     assertTrue("isNumber(String) 12 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 12 failed", checkCreateNumber(val)); [EOL]     val = "-0"; [EOL]     assertTrue("isNumber(String) 13 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 13 failed", checkCreateNumber(val)); [EOL]     val = "01234"; [EOL]     assertTrue("isNumber(String) 14 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 14 failed", checkCreateNumber(val)); [EOL]     val = "-01234"; [EOL]     assertTrue("isNumber(String) 15 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 15 failed", checkCreateNumber(val)); [EOL]     val = "0xABC123"; [EOL]     assertTrue("isNumber(String) 16 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 16 failed", checkCreateNumber(val)); [EOL]     val = "0x0"; [EOL]     assertTrue("isNumber(String) 17 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 17 failed", checkCreateNumber(val)); [EOL]     val = "123.4E21D"; [EOL]     assertTrue("isNumber(String) 19 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 19 failed", checkCreateNumber(val)); [EOL]     val = "-221.23F"; [EOL]     assertTrue("isNumber(String) 20 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 20 failed", checkCreateNumber(val)); [EOL]     val = "22338L"; [EOL]     assertTrue("isNumber(String) 21 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 21 failed", checkCreateNumber(val)); [EOL]     val = null; [EOL]     assertTrue("isNumber(String) 1 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 1 Neg failed", !checkCreateNumber(val)); [EOL]     val = ""; [EOL]     assertTrue("isNumber(String) 2 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 2 Neg failed", !checkCreateNumber(val)); [EOL]     val = "--2.3"; [EOL]     assertTrue("isNumber(String) 3 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 3 Neg failed", !checkCreateNumber(val)); [EOL]     val = ".12.3"; [EOL]     assertTrue("isNumber(String) 4 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 4 Neg failed", !checkCreateNumber(val)); [EOL]     val = "-123E"; [EOL]     assertTrue("isNumber(String) 5 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 5 Neg failed", !checkCreateNumber(val)); [EOL]     val = "-123E+-212"; [EOL]     assertTrue("isNumber(String) 6 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 6 Neg failed", !checkCreateNumber(val)); [EOL]     val = "-123E2.12"; [EOL]     assertTrue("isNumber(String) 7 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 7 Neg failed", !checkCreateNumber(val)); [EOL]     val = "0xGF"; [EOL]     assertTrue("isNumber(String) 8 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 8 Neg failed", !checkCreateNumber(val)); [EOL]     val = "0xFAE-1"; [EOL]     assertTrue("isNumber(String) 9 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 9 Neg failed", !checkCreateNumber(val)); [EOL]     val = "."; [EOL]     assertTrue("isNumber(String) 10 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 10 Neg failed", !checkCreateNumber(val)); [EOL]     val = "-0ABC123"; [EOL]     assertTrue("isNumber(String) 11 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 11 Neg failed", !checkCreateNumber(val)); [EOL]     val = "123.4E-D"; [EOL]     assertTrue("isNumber(String) 12 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 12 Neg failed", !checkCreateNumber(val)); [EOL]     val = "123.4ED"; [EOL]     assertTrue("isNumber(String) 13 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 13 Neg failed", !checkCreateNumber(val)); [EOL]     val = "1234E5l"; [EOL]     assertTrue("isNumber(String) 14 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 14 Neg failed", !checkCreateNumber(val)); [EOL]     val = "11a"; [EOL]     assertTrue("isNumber(String) 15 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 15 Neg failed", !checkCreateNumber(val)); [EOL]     val = "1a"; [EOL]     assertTrue("isNumber(String) 16 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 16 Neg failed", !checkCreateNumber(val)); [EOL]     val = "a"; [EOL]     assertTrue("isNumber(String) 17 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 17 Neg failed", !checkCreateNumber(val)); [EOL]     val = "11g"; [EOL]     assertTrue("isNumber(String) 18 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 18 Neg failed", !checkCreateNumber(val)); [EOL]     val = "11z"; [EOL]     assertTrue("isNumber(String) 19 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 19 Neg failed", !checkCreateNumber(val)); [EOL]     val = "11def"; [EOL]     assertTrue("isNumber(String) 20 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 20 Neg failed", !checkCreateNumber(val)); [EOL]     val = "11d11"; [EOL]     assertTrue("isNumber(String) 21 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 21 Neg failed", !checkCreateNumber(val)); [EOL]     val = "11 11"; [EOL]     assertTrue("isNumber(String) 22 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 22 Neg failed", !checkCreateNumber(val)); [EOL]     val = " 1111"; [EOL]     assertTrue("isNumber(String) 23 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 23 Neg failed", !checkCreateNumber(val)); [EOL]     val = "1111 "; [EOL]     assertTrue("isNumber(String) 24 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 24 Neg failed", !checkCreateNumber(val)); [EOL]     val = "2."; [EOL]     assertTrue("isNumber(String) LANG-521 failed", NumberUtils.isNumber(val)); [EOL]     val = "1.1L"; [EOL]     assertFalse("isNumber(String) LANG-664 failed", NumberUtils.isNumber(val)); [EOL] }
@Test [EOL] public void testIsNumber() { [EOL]     String val = "12345"; [EOL]     assertTrue("isNumber(String) 1 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 1 failed", checkCreateNumber(val)); [EOL]     val = "1234.5"; [EOL]     assertTrue("isNumber(String) 2 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 2 failed", checkCreateNumber(val)); [EOL]     val = ".12345"; [EOL]     assertTrue("isNumber(String) 3 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 3 failed", checkCreateNumber(val)); [EOL]     val = "1234E5"; [EOL]     assertTrue("isNumber(String) 4 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 4 failed", checkCreateNumber(val)); [EOL]     val = "1234E+5"; [EOL]     assertTrue("isNumber(String) 5 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 5 failed", checkCreateNumber(val)); [EOL]     val = "1234E-5"; [EOL]     assertTrue("isNumber(String) 6 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 6 failed", checkCreateNumber(val)); [EOL]     val = "123.4E5"; [EOL]     assertTrue("isNumber(String) 7 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 7 failed", checkCreateNumber(val)); [EOL]     val = "-1234"; [EOL]     assertTrue("isNumber(String) 8 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 8 failed", checkCreateNumber(val)); [EOL]     val = "-1234.5"; [EOL]     assertTrue("isNumber(String) 9 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 9 failed", checkCreateNumber(val)); [EOL]     val = "-.12345"; [EOL]     assertTrue("isNumber(String) 10 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 10 failed", checkCreateNumber(val)); [EOL]     val = "-1234E5"; [EOL]     assertTrue("isNumber(String) 11 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 11 failed", checkCreateNumber(val)); [EOL]     val = "0"; [EOL]     assertTrue("isNumber(String) 12 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 12 failed", checkCreateNumber(val)); [EOL]     val = "-0"; [EOL]     assertTrue("isNumber(String) 13 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 13 failed", checkCreateNumber(val)); [EOL]     val = "01234"; [EOL]     assertTrue("isNumber(String) 14 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 14 failed", checkCreateNumber(val)); [EOL]     val = "-01234"; [EOL]     assertTrue("isNumber(String) 15 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 15 failed", checkCreateNumber(val)); [EOL]     val = "0xABC123"; [EOL]     assertTrue("isNumber(String) 16 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 16 failed", checkCreateNumber(val)); [EOL]     val = "0x0"; [EOL]     assertTrue("isNumber(String) 17 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 17 failed", checkCreateNumber(val)); [EOL]     val = "123.4E21D"; [EOL]     assertTrue("isNumber(String) 19 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 19 failed", checkCreateNumber(val)); [EOL]     val = "-221.23F"; [EOL]     assertTrue("isNumber(String) 20 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 20 failed", checkCreateNumber(val)); [EOL]     val = "22338L"; [EOL]     assertTrue("isNumber(String) 21 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 21 failed", checkCreateNumber(val)); [EOL]     val = null; [EOL]     assertTrue("isNumber(String) 1 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 1 Neg failed", !checkCreateNumber(val)); [EOL]     val = ""; [EOL]     assertTrue("isNumber(String) 2 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 2 Neg failed", !checkCreateNumber(val)); [EOL]     val = "--2.3"; [EOL]     assertTrue("isNumber(String) 3 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 3 Neg failed", !checkCreateNumber(val)); [EOL]     val = ".12.3"; [EOL]     assertTrue("isNumber(String) 4 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 4 Neg failed", !checkCreateNumber(val)); [EOL]     val = "-123E"; [EOL]     assertTrue("isNumber(String) 5 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 5 Neg failed", !checkCreateNumber(val)); [EOL]     val = "-123E+-212"; [EOL]     assertTrue("isNumber(String) 6 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 6 Neg failed", !checkCreateNumber(val)); [EOL]     val = "-123E2.12"; [EOL]     assertTrue("isNumber(String) 7 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 7 Neg failed", !checkCreateNumber(val)); [EOL]     val = "0xGF"; [EOL]     assertTrue("isNumber(String) 8 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 8 Neg failed", !checkCreateNumber(val)); [EOL]     val = "0xFAE-1"; [EOL]     assertTrue("isNumber(String) 9 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 9 Neg failed", !checkCreateNumber(val)); [EOL]     val = "."; [EOL]     assertTrue("isNumber(String) 10 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 10 Neg failed", !checkCreateNumber(val)); [EOL]     val = "-0ABC123"; [EOL]     assertTrue("isNumber(String) 11 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 11 Neg failed", !checkCreateNumber(val)); [EOL]     val = "123.4E-D"; [EOL]     assertTrue("isNumber(String) 12 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 12 Neg failed", !checkCreateNumber(val)); [EOL]     val = "123.4ED"; [EOL]     assertTrue("isNumber(String) 13 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 13 Neg failed", !checkCreateNumber(val)); [EOL]     val = "1234E5l"; [EOL]     assertTrue("isNumber(String) 14 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 14 Neg failed", !checkCreateNumber(val)); [EOL]     val = "11a"; [EOL]     assertTrue("isNumber(String) 15 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 15 Neg failed", !checkCreateNumber(val)); [EOL]     val = "1a"; [EOL]     assertTrue("isNumber(String) 16 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 16 Neg failed", !checkCreateNumber(val)); [EOL]     val = "a"; [EOL]     assertTrue("isNumber(String) 17 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 17 Neg failed", !checkCreateNumber(val)); [EOL]     val = "11g"; [EOL]     assertTrue("isNumber(String) 18 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 18 Neg failed", !checkCreateNumber(val)); [EOL]     val = "11z"; [EOL]     assertTrue("isNumber(String) 19 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 19 Neg failed", !checkCreateNumber(val)); [EOL]     val = "11def"; [EOL]     assertTrue("isNumber(String) 20 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 20 Neg failed", !checkCreateNumber(val)); [EOL]     val = "11d11"; [EOL]     assertTrue("isNumber(String) 21 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 21 Neg failed", !checkCreateNumber(val)); [EOL]     val = "11 11"; [EOL]     assertTrue("isNumber(String) 22 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 22 Neg failed", !checkCreateNumber(val)); [EOL]     val = " 1111"; [EOL]     assertTrue("isNumber(String) 23 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 23 Neg failed", !checkCreateNumber(val)); [EOL]     val = "1111 "; [EOL]     assertTrue("isNumber(String) 24 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 24 Neg failed", !checkCreateNumber(val)); [EOL]     val = "2."; [EOL]     assertTrue("isNumber(String) LANG-521 failed", NumberUtils.isNumber(val)); [EOL]     val = "1.1L"; [EOL]     assertFalse("isNumber(String) LANG-664 failed", NumberUtils.isNumber(val)); [EOL] }
@Test [EOL] public void testIsNumber() { [EOL]     String val = "12345"; [EOL]     assertTrue("isNumber(String) 1 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 1 failed", checkCreateNumber(val)); [EOL]     val = "1234.5"; [EOL]     assertTrue("isNumber(String) 2 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 2 failed", checkCreateNumber(val)); [EOL]     val = ".12345"; [EOL]     assertTrue("isNumber(String) 3 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 3 failed", checkCreateNumber(val)); [EOL]     val = "1234E5"; [EOL]     assertTrue("isNumber(String) 4 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 4 failed", checkCreateNumber(val)); [EOL]     val = "1234E+5"; [EOL]     assertTrue("isNumber(String) 5 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 5 failed", checkCreateNumber(val)); [EOL]     val = "1234E-5"; [EOL]     assertTrue("isNumber(String) 6 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 6 failed", checkCreateNumber(val)); [EOL]     val = "123.4E5"; [EOL]     assertTrue("isNumber(String) 7 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 7 failed", checkCreateNumber(val)); [EOL]     val = "-1234"; [EOL]     assertTrue("isNumber(String) 8 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 8 failed", checkCreateNumber(val)); [EOL]     val = "-1234.5"; [EOL]     assertTrue("isNumber(String) 9 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 9 failed", checkCreateNumber(val)); [EOL]     val = "-.12345"; [EOL]     assertTrue("isNumber(String) 10 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 10 failed", checkCreateNumber(val)); [EOL]     val = "-1234E5"; [EOL]     assertTrue("isNumber(String) 11 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 11 failed", checkCreateNumber(val)); [EOL]     val = "0"; [EOL]     assertTrue("isNumber(String) 12 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 12 failed", checkCreateNumber(val)); [EOL]     val = "-0"; [EOL]     assertTrue("isNumber(String) 13 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 13 failed", checkCreateNumber(val)); [EOL]     val = "01234"; [EOL]     assertTrue("isNumber(String) 14 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 14 failed", checkCreateNumber(val)); [EOL]     val = "-01234"; [EOL]     assertTrue("isNumber(String) 15 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 15 failed", checkCreateNumber(val)); [EOL]     val = "0xABC123"; [EOL]     assertTrue("isNumber(String) 16 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 16 failed", checkCreateNumber(val)); [EOL]     val = "0x0"; [EOL]     assertTrue("isNumber(String) 17 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 17 failed", checkCreateNumber(val)); [EOL]     val = "123.4E21D"; [EOL]     assertTrue("isNumber(String) 19 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 19 failed", checkCreateNumber(val)); [EOL]     val = "-221.23F"; [EOL]     assertTrue("isNumber(String) 20 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 20 failed", checkCreateNumber(val)); [EOL]     val = "22338L"; [EOL]     assertTrue("isNumber(String) 21 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 21 failed", checkCreateNumber(val)); [EOL]     val = null; [EOL]     assertTrue("isNumber(String) 1 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 1 Neg failed", !checkCreateNumber(val)); [EOL]     val = ""; [EOL]     assertTrue("isNumber(String) 2 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 2 Neg failed", !checkCreateNumber(val)); [EOL]     val = "--2.3"; [EOL]     assertTrue("isNumber(String) 3 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 3 Neg failed", !checkCreateNumber(val)); [EOL]     val = ".12.3"; [EOL]     assertTrue("isNumber(String) 4 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 4 Neg failed", !checkCreateNumber(val)); [EOL]     val = "-123E"; [EOL]     assertTrue("isNumber(String) 5 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 5 Neg failed", !checkCreateNumber(val)); [EOL]     val = "-123E+-212"; [EOL]     assertTrue("isNumber(String) 6 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 6 Neg failed", !checkCreateNumber(val)); [EOL]     val = "-123E2.12"; [EOL]     assertTrue("isNumber(String) 7 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 7 Neg failed", !checkCreateNumber(val)); [EOL]     val = "0xGF"; [EOL]     assertTrue("isNumber(String) 8 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 8 Neg failed", !checkCreateNumber(val)); [EOL]     val = "0xFAE-1"; [EOL]     assertTrue("isNumber(String) 9 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 9 Neg failed", !checkCreateNumber(val)); [EOL]     val = "."; [EOL]     assertTrue("isNumber(String) 10 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 10 Neg failed", !checkCreateNumber(val)); [EOL]     val = "-0ABC123"; [EOL]     assertTrue("isNumber(String) 11 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 11 Neg failed", !checkCreateNumber(val)); [EOL]     val = "123.4E-D"; [EOL]     assertTrue("isNumber(String) 12 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 12 Neg failed", !checkCreateNumber(val)); [EOL]     val = "123.4ED"; [EOL]     assertTrue("isNumber(String) 13 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 13 Neg failed", !checkCreateNumber(val)); [EOL]     val = "1234E5l"; [EOL]     assertTrue("isNumber(String) 14 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 14 Neg failed", !checkCreateNumber(val)); [EOL]     val = "11a"; [EOL]     assertTrue("isNumber(String) 15 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 15 Neg failed", !checkCreateNumber(val)); [EOL]     val = "1a"; [EOL]     assertTrue("isNumber(String) 16 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 16 Neg failed", !checkCreateNumber(val)); [EOL]     val = "a"; [EOL]     assertTrue("isNumber(String) 17 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 17 Neg failed", !checkCreateNumber(val)); [EOL]     val = "11g"; [EOL]     assertTrue("isNumber(String) 18 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 18 Neg failed", !checkCreateNumber(val)); [EOL]     val = "11z"; [EOL]     assertTrue("isNumber(String) 19 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 19 Neg failed", !checkCreateNumber(val)); [EOL]     val = "11def"; [EOL]     assertTrue("isNumber(String) 20 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 20 Neg failed", !checkCreateNumber(val)); [EOL]     val = "11d11"; [EOL]     assertTrue("isNumber(String) 21 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 21 Neg failed", !checkCreateNumber(val)); [EOL]     val = "11 11"; [EOL]     assertTrue("isNumber(String) 22 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 22 Neg failed", !checkCreateNumber(val)); [EOL]     val = " 1111"; [EOL]     assertTrue("isNumber(String) 23 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 23 Neg failed", !checkCreateNumber(val)); [EOL]     val = "1111 "; [EOL]     assertTrue("isNumber(String) 24 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 24 Neg failed", !checkCreateNumber(val)); [EOL]     val = "2."; [EOL]     assertTrue("isNumber(String) LANG-521 failed", NumberUtils.isNumber(val)); [EOL]     val = "1.1L"; [EOL]     assertFalse("isNumber(String) LANG-664 failed", NumberUtils.isNumber(val)); [EOL] }
@Test [EOL] public void testIsNumber() { [EOL]     String val = "12345"; [EOL]     assertTrue("isNumber(String) 1 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 1 failed", checkCreateNumber(val)); [EOL]     val = "1234.5"; [EOL]     assertTrue("isNumber(String) 2 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 2 failed", checkCreateNumber(val)); [EOL]     val = ".12345"; [EOL]     assertTrue("isNumber(String) 3 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 3 failed", checkCreateNumber(val)); [EOL]     val = "1234E5"; [EOL]     assertTrue("isNumber(String) 4 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 4 failed", checkCreateNumber(val)); [EOL]     val = "1234E+5"; [EOL]     assertTrue("isNumber(String) 5 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 5 failed", checkCreateNumber(val)); [EOL]     val = "1234E-5"; [EOL]     assertTrue("isNumber(String) 6 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 6 failed", checkCreateNumber(val)); [EOL]     val = "123.4E5"; [EOL]     assertTrue("isNumber(String) 7 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 7 failed", checkCreateNumber(val)); [EOL]     val = "-1234"; [EOL]     assertTrue("isNumber(String) 8 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 8 failed", checkCreateNumber(val)); [EOL]     val = "-1234.5"; [EOL]     assertTrue("isNumber(String) 9 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 9 failed", checkCreateNumber(val)); [EOL]     val = "-.12345"; [EOL]     assertTrue("isNumber(String) 10 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 10 failed", checkCreateNumber(val)); [EOL]     val = "-1234E5"; [EOL]     assertTrue("isNumber(String) 11 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 11 failed", checkCreateNumber(val)); [EOL]     val = "0"; [EOL]     assertTrue("isNumber(String) 12 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 12 failed", checkCreateNumber(val)); [EOL]     val = "-0"; [EOL]     assertTrue("isNumber(String) 13 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 13 failed", checkCreateNumber(val)); [EOL]     val = "01234"; [EOL]     assertTrue("isNumber(String) 14 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 14 failed", checkCreateNumber(val)); [EOL]     val = "-01234"; [EOL]     assertTrue("isNumber(String) 15 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 15 failed", checkCreateNumber(val)); [EOL]     val = "0xABC123"; [EOL]     assertTrue("isNumber(String) 16 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 16 failed", checkCreateNumber(val)); [EOL]     val = "0x0"; [EOL]     assertTrue("isNumber(String) 17 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 17 failed", checkCreateNumber(val)); [EOL]     val = "123.4E21D"; [EOL]     assertTrue("isNumber(String) 19 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 19 failed", checkCreateNumber(val)); [EOL]     val = "-221.23F"; [EOL]     assertTrue("isNumber(String) 20 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 20 failed", checkCreateNumber(val)); [EOL]     val = "22338L"; [EOL]     assertTrue("isNumber(String) 21 failed", NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 21 failed", checkCreateNumber(val)); [EOL]     val = null; [EOL]     assertTrue("isNumber(String) 1 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 1 Neg failed", !checkCreateNumber(val)); [EOL]     val = ""; [EOL]     assertTrue("isNumber(String) 2 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 2 Neg failed", !checkCreateNumber(val)); [EOL]     val = "--2.3"; [EOL]     assertTrue("isNumber(String) 3 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 3 Neg failed", !checkCreateNumber(val)); [EOL]     val = ".12.3"; [EOL]     assertTrue("isNumber(String) 4 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 4 Neg failed", !checkCreateNumber(val)); [EOL]     val = "-123E"; [EOL]     assertTrue("isNumber(String) 5 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 5 Neg failed", !checkCreateNumber(val)); [EOL]     val = "-123E+-212"; [EOL]     assertTrue("isNumber(String) 6 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 6 Neg failed", !checkCreateNumber(val)); [EOL]     val = "-123E2.12"; [EOL]     assertTrue("isNumber(String) 7 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 7 Neg failed", !checkCreateNumber(val)); [EOL]     val = "0xGF"; [EOL]     assertTrue("isNumber(String) 8 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 8 Neg failed", !checkCreateNumber(val)); [EOL]     val = "0xFAE-1"; [EOL]     assertTrue("isNumber(String) 9 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 9 Neg failed", !checkCreateNumber(val)); [EOL]     val = "."; [EOL]     assertTrue("isNumber(String) 10 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 10 Neg failed", !checkCreateNumber(val)); [EOL]     val = "-0ABC123"; [EOL]     assertTrue("isNumber(String) 11 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 11 Neg failed", !checkCreateNumber(val)); [EOL]     val = "123.4E-D"; [EOL]     assertTrue("isNumber(String) 12 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 12 Neg failed", !checkCreateNumber(val)); [EOL]     val = "123.4ED"; [EOL]     assertTrue("isNumber(String) 13 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 13 Neg failed", !checkCreateNumber(val)); [EOL]     val = "1234E5l"; [EOL]     assertTrue("isNumber(String) 14 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 14 Neg failed", !checkCreateNumber(val)); [EOL]     val = "11a"; [EOL]     assertTrue("isNumber(String) 15 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 15 Neg failed", !checkCreateNumber(val)); [EOL]     val = "1a"; [EOL]     assertTrue("isNumber(String) 16 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 16 Neg failed", !checkCreateNumber(val)); [EOL]     val = "a"; [EOL]     assertTrue("isNumber(String) 17 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 17 Neg failed", !checkCreateNumber(val)); [EOL]     val = "11g"; [EOL]     assertTrue("isNumber(String) 18 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 18 Neg failed", !checkCreateNumber(val)); [EOL]     val = "11z"; [EOL]     assertTrue("isNumber(String) 19 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 19 Neg failed", !checkCreateNumber(val)); [EOL]     val = "11def"; [EOL]     assertTrue("isNumber(String) 20 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 20 Neg failed", !checkCreateNumber(val)); [EOL]     val = "11d11"; [EOL]     assertTrue("isNumber(String) 21 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 21 Neg failed", !checkCreateNumber(val)); [EOL]     val = "11 11"; [EOL]     assertTrue("isNumber(String) 22 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 22 Neg failed", !checkCreateNumber(val)); [EOL]     val = " 1111"; [EOL]     assertTrue("isNumber(String) 23 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 23 Neg failed", !checkCreateNumber(val)); [EOL]     val = "1111 "; [EOL]     assertTrue("isNumber(String) 24 Neg failed", !NumberUtils.isNumber(val)); [EOL]     assertTrue("isNumber(String)/createNumber(String) 24 Neg failed", !checkCreateNumber(val)); [EOL]     val = "2."; [EOL]     assertTrue("isNumber(String) LANG-521 failed", NumberUtils.isNumber(val)); [EOL]     val = "1.1L"; [EOL]     assertFalse("isNumber(String) LANG-664 failed", NumberUtils.isNumber(val)); [EOL] }
@Test [EOL] public void testByte() { [EOL]     assertEquals(0, new BitField(0).setByteBoolean((byte) 0, true)); [EOL]     assertEquals(1, new BitField(1).setByteBoolean((byte) 0, true)); [EOL]     assertEquals(2, new BitField(2).setByteBoolean((byte) 0, true)); [EOL]     assertEquals(4, new BitField(4).setByteBoolean((byte) 0, true)); [EOL]     assertEquals(8, new BitField(8).setByteBoolean((byte) 0, true)); [EOL]     assertEquals(16, new BitField(16).setByteBoolean((byte) 0, true)); [EOL]     assertEquals(32, new BitField(32).setByteBoolean((byte) 0, true)); [EOL]     assertEquals(64, new BitField(64).setByteBoolean((byte) 0, true)); [EOL]     assertEquals(-128, new BitField(128).setByteBoolean((byte) 0, true)); [EOL]     assertEquals(1, new BitField(0).setByteBoolean((byte) 1, false)); [EOL]     assertEquals(0, new BitField(1).setByteBoolean((byte) 1, false)); [EOL]     assertEquals(0, new BitField(2).setByteBoolean((byte) 2, false)); [EOL]     assertEquals(0, new BitField(4).setByteBoolean((byte) 4, false)); [EOL]     assertEquals(0, new BitField(8).setByteBoolean((byte) 8, false)); [EOL]     assertEquals(0, new BitField(16).setByteBoolean((byte) 16, false)); [EOL]     assertEquals(0, new BitField(32).setByteBoolean((byte) 32, false)); [EOL]     assertEquals(0, new BitField(64).setByteBoolean((byte) 64, false)); [EOL]     assertEquals(0, new BitField(128).setByteBoolean((byte) 128, false)); [EOL]     assertEquals(-2, new BitField(1).setByteBoolean((byte) 255, false)); [EOL]     final byte clearedBit = new BitField(0x40).setByteBoolean((byte) -63, false); [EOL]     assertFalse(new BitField(0x40).isSet(clearedBit)); [EOL] }
@Test [EOL] public void testByte() { [EOL]     assertEquals(0, new BitField(0).setByteBoolean((byte) 0, true)); [EOL]     assertEquals(1, new BitField(1).setByteBoolean((byte) 0, true)); [EOL]     assertEquals(2, new BitField(2).setByteBoolean((byte) 0, true)); [EOL]     assertEquals(4, new BitField(4).setByteBoolean((byte) 0, true)); [EOL]     assertEquals(8, new BitField(8).setByteBoolean((byte) 0, true)); [EOL]     assertEquals(16, new BitField(16).setByteBoolean((byte) 0, true)); [EOL]     assertEquals(32, new BitField(32).setByteBoolean((byte) 0, true)); [EOL]     assertEquals(64, new BitField(64).setByteBoolean((byte) 0, true)); [EOL]     assertEquals(-128, new BitField(128).setByteBoolean((byte) 0, true)); [EOL]     assertEquals(1, new BitField(0).setByteBoolean((byte) 1, false)); [EOL]     assertEquals(0, new BitField(1).setByteBoolean((byte) 1, false)); [EOL]     assertEquals(0, new BitField(2).setByteBoolean((byte) 2, false)); [EOL]     assertEquals(0, new BitField(4).setByteBoolean((byte) 4, false)); [EOL]     assertEquals(0, new BitField(8).setByteBoolean((byte) 8, false)); [EOL]     assertEquals(0, new BitField(16).setByteBoolean((byte) 16, false)); [EOL]     assertEquals(0, new BitField(32).setByteBoolean((byte) 32, false)); [EOL]     assertEquals(0, new BitField(64).setByteBoolean((byte) 64, false)); [EOL]     assertEquals(0, new BitField(128).setByteBoolean((byte) 128, false)); [EOL]     assertEquals(-2, new BitField(1).setByteBoolean((byte) 255, false)); [EOL]     final byte clearedBit = new BitField(0x40).setByteBoolean((byte) -63, false); [EOL]     assertFalse(new BitField(0x40).isSet(clearedBit)); [EOL] }
@Test [EOL] public void testIsSet() { [EOL]     assertTrue(!bf_multi.isSet(0)); [EOL]     assertTrue(!bf_zero.isSet(0)); [EOL]     for (int j = 0x80; j <= 0x3F80; j += 0x80) { [EOL]         assertTrue(bf_multi.isSet(j)); [EOL]     } [EOL]     for (int j = 0x80; j <= 0x3F80; j += 0x80) { [EOL]         assertTrue(!bf_zero.isSet(j)); [EOL]     } [EOL]     assertTrue(!bf_single.isSet(0)); [EOL]     assertTrue(bf_single.isSet(0x4000)); [EOL] }
@Test [EOL] public void testIsSet() { [EOL]     assertTrue(!bf_multi.isSet(0)); [EOL]     assertTrue(!bf_zero.isSet(0)); [EOL]     for (int j = 0x80; j <= 0x3F80; j += 0x80) { [EOL]         assertTrue(bf_multi.isSet(j)); [EOL]     } [EOL]     for (int j = 0x80; j <= 0x3F80; j += 0x80) { [EOL]         assertTrue(!bf_zero.isSet(j)); [EOL]     } [EOL]     assertTrue(!bf_single.isSet(0)); [EOL]     assertTrue(bf_single.isSet(0x4000)); [EOL] }
@Test [EOL] public void testIsSet() { [EOL]     assertTrue(!bf_multi.isSet(0)); [EOL]     assertTrue(!bf_zero.isSet(0)); [EOL]     for (int j = 0x80; j <= 0x3F80; j += 0x80) { [EOL]         assertTrue(bf_multi.isSet(j)); [EOL]     } [EOL]     for (int j = 0x80; j <= 0x3F80; j += 0x80) { [EOL]         assertTrue(!bf_zero.isSet(j)); [EOL]     } [EOL]     assertTrue(!bf_single.isSet(0)); [EOL]     assertTrue(bf_single.isSet(0x4000)); [EOL] }
@Test [EOL] public void testByte() { [EOL]     assertEquals(0, new BitField(0).setByteBoolean((byte) 0, true)); [EOL]     assertEquals(1, new BitField(1).setByteBoolean((byte) 0, true)); [EOL]     assertEquals(2, new BitField(2).setByteBoolean((byte) 0, true)); [EOL]     assertEquals(4, new BitField(4).setByteBoolean((byte) 0, true)); [EOL]     assertEquals(8, new BitField(8).setByteBoolean((byte) 0, true)); [EOL]     assertEquals(16, new BitField(16).setByteBoolean((byte) 0, true)); [EOL]     assertEquals(32, new BitField(32).setByteBoolean((byte) 0, true)); [EOL]     assertEquals(64, new BitField(64).setByteBoolean((byte) 0, true)); [EOL]     assertEquals(-128, new BitField(128).setByteBoolean((byte) 0, true)); [EOL]     assertEquals(1, new BitField(0).setByteBoolean((byte) 1, false)); [EOL]     assertEquals(0, new BitField(1).setByteBoolean((byte) 1, false)); [EOL]     assertEquals(0, new BitField(2).setByteBoolean((byte) 2, false)); [EOL]     assertEquals(0, new BitField(4).setByteBoolean((byte) 4, false)); [EOL]     assertEquals(0, new BitField(8).setByteBoolean((byte) 8, false)); [EOL]     assertEquals(0, new BitField(16).setByteBoolean((byte) 16, false)); [EOL]     assertEquals(0, new BitField(32).setByteBoolean((byte) 32, false)); [EOL]     assertEquals(0, new BitField(64).setByteBoolean((byte) 64, false)); [EOL]     assertEquals(0, new BitField(128).setByteBoolean((byte) 128, false)); [EOL]     assertEquals(-2, new BitField(1).setByteBoolean((byte) 255, false)); [EOL]     final byte clearedBit = new BitField(0x40).setByteBoolean((byte) -63, false); [EOL]     assertFalse(new BitField(0x40).isSet(clearedBit)); [EOL] }
@Test [EOL] public void testByte() { [EOL]     assertEquals(0, new BitField(0).setByteBoolean((byte) 0, true)); [EOL]     assertEquals(1, new BitField(1).setByteBoolean((byte) 0, true)); [EOL]     assertEquals(2, new BitField(2).setByteBoolean((byte) 0, true)); [EOL]     assertEquals(4, new BitField(4).setByteBoolean((byte) 0, true)); [EOL]     assertEquals(8, new BitField(8).setByteBoolean((byte) 0, true)); [EOL]     assertEquals(16, new BitField(16).setByteBoolean((byte) 0, true)); [EOL]     assertEquals(32, new BitField(32).setByteBoolean((byte) 0, true)); [EOL]     assertEquals(64, new BitField(64).setByteBoolean((byte) 0, true)); [EOL]     assertEquals(-128, new BitField(128).setByteBoolean((byte) 0, true)); [EOL]     assertEquals(1, new BitField(0).setByteBoolean((byte) 1, false)); [EOL]     assertEquals(0, new BitField(1).setByteBoolean((byte) 1, false)); [EOL]     assertEquals(0, new BitField(2).setByteBoolean((byte) 2, false)); [EOL]     assertEquals(0, new BitField(4).setByteBoolean((byte) 4, false)); [EOL]     assertEquals(0, new BitField(8).setByteBoolean((byte) 8, false)); [EOL]     assertEquals(0, new BitField(16).setByteBoolean((byte) 16, false)); [EOL]     assertEquals(0, new BitField(32).setByteBoolean((byte) 32, false)); [EOL]     assertEquals(0, new BitField(64).setByteBoolean((byte) 64, false)); [EOL]     assertEquals(0, new BitField(128).setByteBoolean((byte) 128, false)); [EOL]     assertEquals(-2, new BitField(1).setByteBoolean((byte) 255, false)); [EOL]     final byte clearedBit = new BitField(0x40).setByteBoolean((byte) -63, false); [EOL]     assertFalse(new BitField(0x40).isSet(clearedBit)); [EOL] }
@Test [EOL] public void testByte() { [EOL]     assertEquals(0, new BitField(0).setByteBoolean((byte) 0, true)); [EOL]     assertEquals(1, new BitField(1).setByteBoolean((byte) 0, true)); [EOL]     assertEquals(2, new BitField(2).setByteBoolean((byte) 0, true)); [EOL]     assertEquals(4, new BitField(4).setByteBoolean((byte) 0, true)); [EOL]     assertEquals(8, new BitField(8).setByteBoolean((byte) 0, true)); [EOL]     assertEquals(16, new BitField(16).setByteBoolean((byte) 0, true)); [EOL]     assertEquals(32, new BitField(32).setByteBoolean((byte) 0, true)); [EOL]     assertEquals(64, new BitField(64).setByteBoolean((byte) 0, true)); [EOL]     assertEquals(-128, new BitField(128).setByteBoolean((byte) 0, true)); [EOL]     assertEquals(1, new BitField(0).setByteBoolean((byte) 1, false)); [EOL]     assertEquals(0, new BitField(1).setByteBoolean((byte) 1, false)); [EOL]     assertEquals(0, new BitField(2).setByteBoolean((byte) 2, false)); [EOL]     assertEquals(0, new BitField(4).setByteBoolean((byte) 4, false)); [EOL]     assertEquals(0, new BitField(8).setByteBoolean((byte) 8, false)); [EOL]     assertEquals(0, new BitField(16).setByteBoolean((byte) 16, false)); [EOL]     assertEquals(0, new BitField(32).setByteBoolean((byte) 32, false)); [EOL]     assertEquals(0, new BitField(64).setByteBoolean((byte) 64, false)); [EOL]     assertEquals(0, new BitField(128).setByteBoolean((byte) 128, false)); [EOL]     assertEquals(-2, new BitField(1).setByteBoolean((byte) 255, false)); [EOL]     final byte clearedBit = new BitField(0x40).setByteBoolean((byte) -63, false); [EOL]     assertFalse(new BitField(0x40).isSet(clearedBit)); [EOL] }
@Test [EOL] public void testByte() { [EOL]     assertEquals(0, new BitField(0).setByteBoolean((byte) 0, true)); [EOL]     assertEquals(1, new BitField(1).setByteBoolean((byte) 0, true)); [EOL]     assertEquals(2, new BitField(2).setByteBoolean((byte) 0, true)); [EOL]     assertEquals(4, new BitField(4).setByteBoolean((byte) 0, true)); [EOL]     assertEquals(8, new BitField(8).setByteBoolean((byte) 0, true)); [EOL]     assertEquals(16, new BitField(16).setByteBoolean((byte) 0, true)); [EOL]     assertEquals(32, new BitField(32).setByteBoolean((byte) 0, true)); [EOL]     assertEquals(64, new BitField(64).setByteBoolean((byte) 0, true)); [EOL]     assertEquals(-128, new BitField(128).setByteBoolean((byte) 0, true)); [EOL]     assertEquals(1, new BitField(0).setByteBoolean((byte) 1, false)); [EOL]     assertEquals(0, new BitField(1).setByteBoolean((byte) 1, false)); [EOL]     assertEquals(0, new BitField(2).setByteBoolean((byte) 2, false)); [EOL]     assertEquals(0, new BitField(4).setByteBoolean((byte) 4, false)); [EOL]     assertEquals(0, new BitField(8).setByteBoolean((byte) 8, false)); [EOL]     assertEquals(0, new BitField(16).setByteBoolean((byte) 16, false)); [EOL]     assertEquals(0, new BitField(32).setByteBoolean((byte) 32, false)); [EOL]     assertEquals(0, new BitField(64).setByteBoolean((byte) 64, false)); [EOL]     assertEquals(0, new BitField(128).setByteBoolean((byte) 128, false)); [EOL]     assertEquals(-2, new BitField(1).setByteBoolean((byte) 255, false)); [EOL]     final byte clearedBit = new BitField(0x40).setByteBoolean((byte) -63, false); [EOL]     assertFalse(new BitField(0x40).isSet(clearedBit)); [EOL] }
@Test [EOL] public void testByte() { [EOL]     assertEquals(0, new BitField(0).setByteBoolean((byte) 0, true)); [EOL]     assertEquals(1, new BitField(1).setByteBoolean((byte) 0, true)); [EOL]     assertEquals(2, new BitField(2).setByteBoolean((byte) 0, true)); [EOL]     assertEquals(4, new BitField(4).setByteBoolean((byte) 0, true)); [EOL]     assertEquals(8, new BitField(8).setByteBoolean((byte) 0, true)); [EOL]     assertEquals(16, new BitField(16).setByteBoolean((byte) 0, true)); [EOL]     assertEquals(32, new BitField(32).setByteBoolean((byte) 0, true)); [EOL]     assertEquals(64, new BitField(64).setByteBoolean((byte) 0, true)); [EOL]     assertEquals(-128, new BitField(128).setByteBoolean((byte) 0, true)); [EOL]     assertEquals(1, new BitField(0).setByteBoolean((byte) 1, false)); [EOL]     assertEquals(0, new BitField(1).setByteBoolean((byte) 1, false)); [EOL]     assertEquals(0, new BitField(2).setByteBoolean((byte) 2, false)); [EOL]     assertEquals(0, new BitField(4).setByteBoolean((byte) 4, false)); [EOL]     assertEquals(0, new BitField(8).setByteBoolean((byte) 8, false)); [EOL]     assertEquals(0, new BitField(16).setByteBoolean((byte) 16, false)); [EOL]     assertEquals(0, new BitField(32).setByteBoolean((byte) 32, false)); [EOL]     assertEquals(0, new BitField(64).setByteBoolean((byte) 64, false)); [EOL]     assertEquals(0, new BitField(128).setByteBoolean((byte) 128, false)); [EOL]     assertEquals(-2, new BitField(1).setByteBoolean((byte) 255, false)); [EOL]     final byte clearedBit = new BitField(0x40).setByteBoolean((byte) -63, false); [EOL]     assertFalse(new BitField(0x40).isSet(clearedBit)); [EOL] }
@Test [EOL] public void testByte() { [EOL]     assertEquals(0, new BitField(0).setByteBoolean((byte) 0, true)); [EOL]     assertEquals(1, new BitField(1).setByteBoolean((byte) 0, true)); [EOL]     assertEquals(2, new BitField(2).setByteBoolean((byte) 0, true)); [EOL]     assertEquals(4, new BitField(4).setByteBoolean((byte) 0, true)); [EOL]     assertEquals(8, new BitField(8).setByteBoolean((byte) 0, true)); [EOL]     assertEquals(16, new BitField(16).setByteBoolean((byte) 0, true)); [EOL]     assertEquals(32, new BitField(32).setByteBoolean((byte) 0, true)); [EOL]     assertEquals(64, new BitField(64).setByteBoolean((byte) 0, true)); [EOL]     assertEquals(-128, new BitField(128).setByteBoolean((byte) 0, true)); [EOL]     assertEquals(1, new BitField(0).setByteBoolean((byte) 1, false)); [EOL]     assertEquals(0, new BitField(1).setByteBoolean((byte) 1, false)); [EOL]     assertEquals(0, new BitField(2).setByteBoolean((byte) 2, false)); [EOL]     assertEquals(0, new BitField(4).setByteBoolean((byte) 4, false)); [EOL]     assertEquals(0, new BitField(8).setByteBoolean((byte) 8, false)); [EOL]     assertEquals(0, new BitField(16).setByteBoolean((byte) 16, false)); [EOL]     assertEquals(0, new BitField(32).setByteBoolean((byte) 32, false)); [EOL]     assertEquals(0, new BitField(64).setByteBoolean((byte) 64, false)); [EOL]     assertEquals(0, new BitField(128).setByteBoolean((byte) 128, false)); [EOL]     assertEquals(-2, new BitField(1).setByteBoolean((byte) 255, false)); [EOL]     final byte clearedBit = new BitField(0x40).setByteBoolean((byte) -63, false); [EOL]     assertFalse(new BitField(0x40).isSet(clearedBit)); [EOL] }
@Test [EOL] public void testBindEventsToMethod() { [EOL]     final PropertyChangeSource src = new PropertyChangeSource(); [EOL]     final EventCounter counter = new EventCounter(); [EOL]     EventUtils.bindEventsToMethod(counter, "eventOccurred", src, PropertyChangeListener.class); [EOL]     assertEquals(0, counter.getCount()); [EOL]     src.setProperty("newValue"); [EOL]     assertEquals(1, counter.getCount()); [EOL] }
@Test [EOL] public void testBindEventsToMethod() { [EOL]     final PropertyChangeSource src = new PropertyChangeSource(); [EOL]     final EventCounter counter = new EventCounter(); [EOL]     EventUtils.bindEventsToMethod(counter, "eventOccurred", src, PropertyChangeListener.class); [EOL]     assertEquals(0, counter.getCount()); [EOL]     src.setProperty("newValue"); [EOL]     assertEquals(1, counter.getCount()); [EOL] }
@Test [EOL] public void testBindEventsToMethod() { [EOL]     final PropertyChangeSource src = new PropertyChangeSource(); [EOL]     final EventCounter counter = new EventCounter(); [EOL]     EventUtils.bindEventsToMethod(counter, "eventOccurred", src, PropertyChangeListener.class); [EOL]     assertEquals(0, counter.getCount()); [EOL]     src.setProperty("newValue"); [EOL]     assertEquals(1, counter.getCount()); [EOL] }
@Test [EOL] public void testBindEventsToMethod() { [EOL]     final PropertyChangeSource src = new PropertyChangeSource(); [EOL]     final EventCounter counter = new EventCounter(); [EOL]     EventUtils.bindEventsToMethod(counter, "eventOccurred", src, PropertyChangeListener.class); [EOL]     assertEquals(0, counter.getCount()); [EOL]     src.setProperty("newValue"); [EOL]     assertEquals(1, counter.getCount()); [EOL] }
@Test [EOL] public void testBindEventsToMethod() { [EOL]     final PropertyChangeSource src = new PropertyChangeSource(); [EOL]     final EventCounter counter = new EventCounter(); [EOL]     EventUtils.bindEventsToMethod(counter, "eventOccurred", src, PropertyChangeListener.class); [EOL]     assertEquals(0, counter.getCount()); [EOL]     src.setProperty("newValue"); [EOL]     assertEquals(1, counter.getCount()); [EOL] }
@Test [EOL] public void testBindEventsToMethod() { [EOL]     final PropertyChangeSource src = new PropertyChangeSource(); [EOL]     final EventCounter counter = new EventCounter(); [EOL]     EventUtils.bindEventsToMethod(counter, "eventOccurred", src, PropertyChangeListener.class); [EOL]     assertEquals(0, counter.getCount()); [EOL]     src.setProperty("newValue"); [EOL]     assertEquals(1, counter.getCount()); [EOL] }
@Test [EOL] public void testBindEventsToMethod() { [EOL]     final PropertyChangeSource src = new PropertyChangeSource(); [EOL]     final EventCounter counter = new EventCounter(); [EOL]     EventUtils.bindEventsToMethod(counter, "eventOccurred", src, PropertyChangeListener.class); [EOL]     assertEquals(0, counter.getCount()); [EOL]     src.setProperty("newValue"); [EOL]     assertEquals(1, counter.getCount()); [EOL] }
@Test [EOL] public void testBindEventsToMethod() { [EOL]     final PropertyChangeSource src = new PropertyChangeSource(); [EOL]     final EventCounter counter = new EventCounter(); [EOL]     EventUtils.bindEventsToMethod(counter, "eventOccurred", src, PropertyChangeListener.class); [EOL]     assertEquals(0, counter.getCount()); [EOL]     src.setProperty("newValue"); [EOL]     assertEquals(1, counter.getCount()); [EOL] }
@Test [EOL] public void testBindEventsToMethod() { [EOL]     final PropertyChangeSource src = new PropertyChangeSource(); [EOL]     final EventCounter counter = new EventCounter(); [EOL]     EventUtils.bindEventsToMethod(counter, "eventOccurred", src, PropertyChangeListener.class); [EOL]     assertEquals(0, counter.getCount()); [EOL]     src.setProperty("newValue"); [EOL]     assertEquals(1, counter.getCount()); [EOL] }
@Test [EOL] public void testBindEventsToMethod() { [EOL]     final PropertyChangeSource src = new PropertyChangeSource(); [EOL]     final EventCounter counter = new EventCounter(); [EOL]     EventUtils.bindEventsToMethod(counter, "eventOccurred", src, PropertyChangeListener.class); [EOL]     assertEquals(0, counter.getCount()); [EOL]     src.setProperty("newValue"); [EOL]     assertEquals(1, counter.getCount()); [EOL] }
@Test [EOL] public void testBindEventsToMethod() { [EOL]     final PropertyChangeSource src = new PropertyChangeSource(); [EOL]     final EventCounter counter = new EventCounter(); [EOL]     EventUtils.bindEventsToMethod(counter, "eventOccurred", src, PropertyChangeListener.class); [EOL]     assertEquals(0, counter.getCount()); [EOL]     src.setProperty("newValue"); [EOL]     assertEquals(1, counter.getCount()); [EOL] }
@Test [EOL] public void testBindEventsToMethod() { [EOL]     final PropertyChangeSource src = new PropertyChangeSource(); [EOL]     final EventCounter counter = new EventCounter(); [EOL]     EventUtils.bindEventsToMethod(counter, "eventOccurred", src, PropertyChangeListener.class); [EOL]     assertEquals(0, counter.getCount()); [EOL]     src.setProperty("newValue"); [EOL]     assertEquals(1, counter.getCount()); [EOL] }
@Test [EOL] public void testBindEventsToMethod() { [EOL]     final PropertyChangeSource src = new PropertyChangeSource(); [EOL]     final EventCounter counter = new EventCounter(); [EOL]     EventUtils.bindEventsToMethod(counter, "eventOccurred", src, PropertyChangeListener.class); [EOL]     assertEquals(0, counter.getCount()); [EOL]     src.setProperty("newValue"); [EOL]     assertEquals(1, counter.getCount()); [EOL] }
@Test [EOL] public void testBindEventsToMethod() { [EOL]     final PropertyChangeSource src = new PropertyChangeSource(); [EOL]     final EventCounter counter = new EventCounter(); [EOL]     EventUtils.bindEventsToMethod(counter, "eventOccurred", src, PropertyChangeListener.class); [EOL]     assertEquals(0, counter.getCount()); [EOL]     src.setProperty("newValue"); [EOL]     assertEquals(1, counter.getCount()); [EOL] }
@Test [EOL] public void testBindEventsToMethod() { [EOL]     final PropertyChangeSource src = new PropertyChangeSource(); [EOL]     final EventCounter counter = new EventCounter(); [EOL]     EventUtils.bindEventsToMethod(counter, "eventOccurred", src, PropertyChangeListener.class); [EOL]     assertEquals(0, counter.getCount()); [EOL]     src.setProperty("newValue"); [EOL]     assertEquals(1, counter.getCount()); [EOL] }
@Test [EOL] public void testBindEventsToMethod() { [EOL]     final PropertyChangeSource src = new PropertyChangeSource(); [EOL]     final EventCounter counter = new EventCounter(); [EOL]     EventUtils.bindEventsToMethod(counter, "eventOccurred", src, PropertyChangeListener.class); [EOL]     assertEquals(0, counter.getCount()); [EOL]     src.setProperty("newValue"); [EOL]     assertEquals(1, counter.getCount()); [EOL] }
@Test [EOL] public void testBindEventsToMethod() { [EOL]     final PropertyChangeSource src = new PropertyChangeSource(); [EOL]     final EventCounter counter = new EventCounter(); [EOL]     EventUtils.bindEventsToMethod(counter, "eventOccurred", src, PropertyChangeListener.class); [EOL]     assertEquals(0, counter.getCount()); [EOL]     src.setProperty("newValue"); [EOL]     assertEquals(1, counter.getCount()); [EOL] }
@Test [EOL] public void testBindEventsToMethod() { [EOL]     final PropertyChangeSource src = new PropertyChangeSource(); [EOL]     final EventCounter counter = new EventCounter(); [EOL]     EventUtils.bindEventsToMethod(counter, "eventOccurred", src, PropertyChangeListener.class); [EOL]     assertEquals(0, counter.getCount()); [EOL]     src.setProperty("newValue"); [EOL]     assertEquals(1, counter.getCount()); [EOL] }
@Test [EOL] public void testBindEventsToMethod() { [EOL]     final PropertyChangeSource src = new PropertyChangeSource(); [EOL]     final EventCounter counter = new EventCounter(); [EOL]     EventUtils.bindEventsToMethod(counter, "eventOccurred", src, PropertyChangeListener.class); [EOL]     assertEquals(0, counter.getCount()); [EOL]     src.setProperty("newValue"); [EOL]     assertEquals(1, counter.getCount()); [EOL] }
@Test [EOL] public void testBindEventsToMethod() { [EOL]     final PropertyChangeSource src = new PropertyChangeSource(); [EOL]     final EventCounter counter = new EventCounter(); [EOL]     EventUtils.bindEventsToMethod(counter, "eventOccurred", src, PropertyChangeListener.class); [EOL]     assertEquals(0, counter.getCount()); [EOL]     src.setProperty("newValue"); [EOL]     assertEquals(1, counter.getCount()); [EOL] }
@Test [EOL] public void testExtendedFormats() { [EOL]     final String pattern = "Lower: {0,lower} Upper: {1,upper}"; [EOL]     final ExtendedMessageFormat emf = new ExtendedMessageFormat(pattern, registry); [EOL]     assertPatternsEqual("TOPATTERN", pattern, emf.toPattern()); [EOL]     assertEquals("Lower: foo Upper: BAR", emf.format(new Object[] { "foo", "bar" })); [EOL]     assertEquals("Lower: foo Upper: BAR", emf.format(new Object[] { "Foo", "Bar" })); [EOL]     assertEquals("Lower: foo Upper: BAR", emf.format(new Object[] { "FOO", "BAR" })); [EOL]     assertEquals("Lower: foo Upper: BAR", emf.format(new Object[] { "FOO", "bar" })); [EOL]     assertEquals("Lower: foo Upper: BAR", emf.format(new Object[] { "foo", "BAR" })); [EOL] }
@Test [EOL] public void testExtendedFormats() { [EOL]     final String pattern = "Lower: {0,lower} Upper: {1,upper}"; [EOL]     final ExtendedMessageFormat emf = new ExtendedMessageFormat(pattern, registry); [EOL]     assertPatternsEqual("TOPATTERN", pattern, emf.toPattern()); [EOL]     assertEquals("Lower: foo Upper: BAR", emf.format(new Object[] { "foo", "bar" })); [EOL]     assertEquals("Lower: foo Upper: BAR", emf.format(new Object[] { "Foo", "Bar" })); [EOL]     assertEquals("Lower: foo Upper: BAR", emf.format(new Object[] { "FOO", "BAR" })); [EOL]     assertEquals("Lower: foo Upper: BAR", emf.format(new Object[] { "FOO", "bar" })); [EOL]     assertEquals("Lower: foo Upper: BAR", emf.format(new Object[] { "foo", "BAR" })); [EOL] }
@Test [EOL] public void testExtendedFormats() { [EOL]     final String pattern = "Lower: {0,lower} Upper: {1,upper}"; [EOL]     final ExtendedMessageFormat emf = new ExtendedMessageFormat(pattern, registry); [EOL]     assertPatternsEqual("TOPATTERN", pattern, emf.toPattern()); [EOL]     assertEquals("Lower: foo Upper: BAR", emf.format(new Object[] { "foo", "bar" })); [EOL]     assertEquals("Lower: foo Upper: BAR", emf.format(new Object[] { "Foo", "Bar" })); [EOL]     assertEquals("Lower: foo Upper: BAR", emf.format(new Object[] { "FOO", "BAR" })); [EOL]     assertEquals("Lower: foo Upper: BAR", emf.format(new Object[] { "FOO", "bar" })); [EOL]     assertEquals("Lower: foo Upper: BAR", emf.format(new Object[] { "foo", "BAR" })); [EOL] }
@Test [EOL] public void testExtendedFormats() { [EOL]     final String pattern = "Lower: {0,lower} Upper: {1,upper}"; [EOL]     final ExtendedMessageFormat emf = new ExtendedMessageFormat(pattern, registry); [EOL]     assertPatternsEqual("TOPATTERN", pattern, emf.toPattern()); [EOL]     assertEquals("Lower: foo Upper: BAR", emf.format(new Object[] { "foo", "bar" })); [EOL]     assertEquals("Lower: foo Upper: BAR", emf.format(new Object[] { "Foo", "Bar" })); [EOL]     assertEquals("Lower: foo Upper: BAR", emf.format(new Object[] { "FOO", "BAR" })); [EOL]     assertEquals("Lower: foo Upper: BAR", emf.format(new Object[] { "FOO", "bar" })); [EOL]     assertEquals("Lower: foo Upper: BAR", emf.format(new Object[] { "foo", "BAR" })); [EOL] }
@Test [EOL] public void testExtendedFormats() { [EOL]     final String pattern = "Lower: {0,lower} Upper: {1,upper}"; [EOL]     final ExtendedMessageFormat emf = new ExtendedMessageFormat(pattern, registry); [EOL]     assertPatternsEqual("TOPATTERN", pattern, emf.toPattern()); [EOL]     assertEquals("Lower: foo Upper: BAR", emf.format(new Object[] { "foo", "bar" })); [EOL]     assertEquals("Lower: foo Upper: BAR", emf.format(new Object[] { "Foo", "Bar" })); [EOL]     assertEquals("Lower: foo Upper: BAR", emf.format(new Object[] { "FOO", "BAR" })); [EOL]     assertEquals("Lower: foo Upper: BAR", emf.format(new Object[] { "FOO", "bar" })); [EOL]     assertEquals("Lower: foo Upper: BAR", emf.format(new Object[] { "foo", "BAR" })); [EOL] }
@Test [EOL] public void testExtendedFormats() { [EOL]     final String pattern = "Lower: {0,lower} Upper: {1,upper}"; [EOL]     final ExtendedMessageFormat emf = new ExtendedMessageFormat(pattern, registry); [EOL]     assertPatternsEqual("TOPATTERN", pattern, emf.toPattern()); [EOL]     assertEquals("Lower: foo Upper: BAR", emf.format(new Object[] { "foo", "bar" })); [EOL]     assertEquals("Lower: foo Upper: BAR", emf.format(new Object[] { "Foo", "Bar" })); [EOL]     assertEquals("Lower: foo Upper: BAR", emf.format(new Object[] { "FOO", "BAR" })); [EOL]     assertEquals("Lower: foo Upper: BAR", emf.format(new Object[] { "FOO", "bar" })); [EOL]     assertEquals("Lower: foo Upper: BAR", emf.format(new Object[] { "foo", "BAR" })); [EOL] }
@Test [EOL] public void testExtendedFormats() { [EOL]     final String pattern = "Lower: {0,lower} Upper: {1,upper}"; [EOL]     final ExtendedMessageFormat emf = new ExtendedMessageFormat(pattern, registry); [EOL]     assertPatternsEqual("TOPATTERN", pattern, emf.toPattern()); [EOL]     assertEquals("Lower: foo Upper: BAR", emf.format(new Object[] { "foo", "bar" })); [EOL]     assertEquals("Lower: foo Upper: BAR", emf.format(new Object[] { "Foo", "Bar" })); [EOL]     assertEquals("Lower: foo Upper: BAR", emf.format(new Object[] { "FOO", "BAR" })); [EOL]     assertEquals("Lower: foo Upper: BAR", emf.format(new Object[] { "FOO", "bar" })); [EOL]     assertEquals("Lower: foo Upper: BAR", emf.format(new Object[] { "foo", "BAR" })); [EOL] }
@Test [EOL] public void testExtendedFormats() { [EOL]     final String pattern = "Lower: {0,lower} Upper: {1,upper}"; [EOL]     final ExtendedMessageFormat emf = new ExtendedMessageFormat(pattern, registry); [EOL]     assertPatternsEqual("TOPATTERN", pattern, emf.toPattern()); [EOL]     assertEquals("Lower: foo Upper: BAR", emf.format(new Object[] { "foo", "bar" })); [EOL]     assertEquals("Lower: foo Upper: BAR", emf.format(new Object[] { "Foo", "Bar" })); [EOL]     assertEquals("Lower: foo Upper: BAR", emf.format(new Object[] { "FOO", "BAR" })); [EOL]     assertEquals("Lower: foo Upper: BAR", emf.format(new Object[] { "FOO", "bar" })); [EOL]     assertEquals("Lower: foo Upper: BAR", emf.format(new Object[] { "foo", "BAR" })); [EOL] }
@Test [EOL] public void testExtendedFormats() { [EOL]     final String pattern = "Lower: {0,lower} Upper: {1,upper}"; [EOL]     final ExtendedMessageFormat emf = new ExtendedMessageFormat(pattern, registry); [EOL]     assertPatternsEqual("TOPATTERN", pattern, emf.toPattern()); [EOL]     assertEquals("Lower: foo Upper: BAR", emf.format(new Object[] { "foo", "bar" })); [EOL]     assertEquals("Lower: foo Upper: BAR", emf.format(new Object[] { "Foo", "Bar" })); [EOL]     assertEquals("Lower: foo Upper: BAR", emf.format(new Object[] { "FOO", "BAR" })); [EOL]     assertEquals("Lower: foo Upper: BAR", emf.format(new Object[] { "FOO", "bar" })); [EOL]     assertEquals("Lower: foo Upper: BAR", emf.format(new Object[] { "foo", "BAR" })); [EOL] }
@Test [EOL] public void testExtendedFormats() { [EOL]     final String pattern = "Lower: {0,lower} Upper: {1,upper}"; [EOL]     final ExtendedMessageFormat emf = new ExtendedMessageFormat(pattern, registry); [EOL]     assertPatternsEqual("TOPATTERN", pattern, emf.toPattern()); [EOL]     assertEquals("Lower: foo Upper: BAR", emf.format(new Object[] { "foo", "bar" })); [EOL]     assertEquals("Lower: foo Upper: BAR", emf.format(new Object[] { "Foo", "Bar" })); [EOL]     assertEquals("Lower: foo Upper: BAR", emf.format(new Object[] { "FOO", "BAR" })); [EOL]     assertEquals("Lower: foo Upper: BAR", emf.format(new Object[] { "FOO", "bar" })); [EOL]     assertEquals("Lower: foo Upper: BAR", emf.format(new Object[] { "foo", "BAR" })); [EOL] }
@Test [EOL] public void testExtendedFormats() { [EOL]     final String pattern = "Lower: {0,lower} Upper: {1,upper}"; [EOL]     final ExtendedMessageFormat emf = new ExtendedMessageFormat(pattern, registry); [EOL]     assertPatternsEqual("TOPATTERN", pattern, emf.toPattern()); [EOL]     assertEquals("Lower: foo Upper: BAR", emf.format(new Object[] { "foo", "bar" })); [EOL]     assertEquals("Lower: foo Upper: BAR", emf.format(new Object[] { "Foo", "Bar" })); [EOL]     assertEquals("Lower: foo Upper: BAR", emf.format(new Object[] { "FOO", "BAR" })); [EOL]     assertEquals("Lower: foo Upper: BAR", emf.format(new Object[] { "FOO", "bar" })); [EOL]     assertEquals("Lower: foo Upper: BAR", emf.format(new Object[] { "foo", "BAR" })); [EOL] }
@Test [EOL] public void testNewThreadNamingPattern() { [EOL]     final ThreadFactory wrapped = EasyMock.createMock(ThreadFactory.class); [EOL]     final Runnable r = EasyMock.createMock(Runnable.class); [EOL]     final int count = 12; [EOL]     for (int i = 0; i < count; i++) { [EOL]         EasyMock.expect(wrapped.newThread(r)).andReturn(new Thread()); [EOL]     } [EOL]     EasyMock.replay(wrapped, r); [EOL]     final BasicThreadFactory factory = builder.wrappedFactory(wrapped).namingPattern(PATTERN).build(); [EOL]     for (int i = 0; i < count; i++) { [EOL]         final Thread t = factory.newThread(r); [EOL]         assertEquals("Wrong thread name", String.format(PATTERN, Long.valueOf(i + 1)), t.getName()); [EOL]         assertEquals("Wrong thread count", i + 1, factory.getThreadCount()); [EOL]     } [EOL]     EasyMock.verify(wrapped, r); [EOL] }
@Test [EOL] public void testNewThreadNamingPattern() { [EOL]     final ThreadFactory wrapped = EasyMock.createMock(ThreadFactory.class); [EOL]     final Runnable r = EasyMock.createMock(Runnable.class); [EOL]     final int count = 12; [EOL]     for (int i = 0; i < count; i++) { [EOL]         EasyMock.expect(wrapped.newThread(r)).andReturn(new Thread()); [EOL]     } [EOL]     EasyMock.replay(wrapped, r); [EOL]     final BasicThreadFactory factory = builder.wrappedFactory(wrapped).namingPattern(PATTERN).build(); [EOL]     for (int i = 0; i < count; i++) { [EOL]         final Thread t = factory.newThread(r); [EOL]         assertEquals("Wrong thread name", String.format(PATTERN, Long.valueOf(i + 1)), t.getName()); [EOL]         assertEquals("Wrong thread count", i + 1, factory.getThreadCount()); [EOL]     } [EOL]     EasyMock.verify(wrapped, r); [EOL] }
@Test [EOL] public void testNewThreadNamingPattern() { [EOL]     final ThreadFactory wrapped = EasyMock.createMock(ThreadFactory.class); [EOL]     final Runnable r = EasyMock.createMock(Runnable.class); [EOL]     final int count = 12; [EOL]     for (int i = 0; i < count; i++) { [EOL]         EasyMock.expect(wrapped.newThread(r)).andReturn(new Thread()); [EOL]     } [EOL]     EasyMock.replay(wrapped, r); [EOL]     final BasicThreadFactory factory = builder.wrappedFactory(wrapped).namingPattern(PATTERN).build(); [EOL]     for (int i = 0; i < count; i++) { [EOL]         final Thread t = factory.newThread(r); [EOL]         assertEquals("Wrong thread name", String.format(PATTERN, Long.valueOf(i + 1)), t.getName()); [EOL]         assertEquals("Wrong thread count", i + 1, factory.getThreadCount()); [EOL]     } [EOL]     EasyMock.verify(wrapped, r); [EOL] }
@Test [EOL] public void testNewThreadNamingPattern() { [EOL]     final ThreadFactory wrapped = EasyMock.createMock(ThreadFactory.class); [EOL]     final Runnable r = EasyMock.createMock(Runnable.class); [EOL]     final int count = 12; [EOL]     for (int i = 0; i < count; i++) { [EOL]         EasyMock.expect(wrapped.newThread(r)).andReturn(new Thread()); [EOL]     } [EOL]     EasyMock.replay(wrapped, r); [EOL]     final BasicThreadFactory factory = builder.wrappedFactory(wrapped).namingPattern(PATTERN).build(); [EOL]     for (int i = 0; i < count; i++) { [EOL]         final Thread t = factory.newThread(r); [EOL]         assertEquals("Wrong thread name", String.format(PATTERN, Long.valueOf(i + 1)), t.getName()); [EOL]         assertEquals("Wrong thread count", i + 1, factory.getThreadCount()); [EOL]     } [EOL]     EasyMock.verify(wrapped, r); [EOL] }
@Test [EOL] public void testNewThreadNamingPattern() { [EOL]     final ThreadFactory wrapped = EasyMock.createMock(ThreadFactory.class); [EOL]     final Runnable r = EasyMock.createMock(Runnable.class); [EOL]     final int count = 12; [EOL]     for (int i = 0; i < count; i++) { [EOL]         EasyMock.expect(wrapped.newThread(r)).andReturn(new Thread()); [EOL]     } [EOL]     EasyMock.replay(wrapped, r); [EOL]     final BasicThreadFactory factory = builder.wrappedFactory(wrapped).namingPattern(PATTERN).build(); [EOL]     for (int i = 0; i < count; i++) { [EOL]         final Thread t = factory.newThread(r); [EOL]         assertEquals("Wrong thread name", String.format(PATTERN, Long.valueOf(i + 1)), t.getName()); [EOL]         assertEquals("Wrong thread count", i + 1, factory.getThreadCount()); [EOL]     } [EOL]     EasyMock.verify(wrapped, r); [EOL] }
@Test [EOL] public void testNewThreadNamingPattern() { [EOL]     final ThreadFactory wrapped = EasyMock.createMock(ThreadFactory.class); [EOL]     final Runnable r = EasyMock.createMock(Runnable.class); [EOL]     final int count = 12; [EOL]     for (int i = 0; i < count; i++) { [EOL]         EasyMock.expect(wrapped.newThread(r)).andReturn(new Thread()); [EOL]     } [EOL]     EasyMock.replay(wrapped, r); [EOL]     final BasicThreadFactory factory = builder.wrappedFactory(wrapped).namingPattern(PATTERN).build(); [EOL]     for (int i = 0; i < count; i++) { [EOL]         final Thread t = factory.newThread(r); [EOL]         assertEquals("Wrong thread name", String.format(PATTERN, Long.valueOf(i + 1)), t.getName()); [EOL]         assertEquals("Wrong thread count", i + 1, factory.getThreadCount()); [EOL]     } [EOL]     EasyMock.verify(wrapped, r); [EOL] }
@Test [EOL] public void testNewThreadNamingPattern() { [EOL]     final ThreadFactory wrapped = EasyMock.createMock(ThreadFactory.class); [EOL]     final Runnable r = EasyMock.createMock(Runnable.class); [EOL]     final int count = 12; [EOL]     for (int i = 0; i < count; i++) { [EOL]         EasyMock.expect(wrapped.newThread(r)).andReturn(new Thread()); [EOL]     } [EOL]     EasyMock.replay(wrapped, r); [EOL]     final BasicThreadFactory factory = builder.wrappedFactory(wrapped).namingPattern(PATTERN).build(); [EOL]     for (int i = 0; i < count; i++) { [EOL]         final Thread t = factory.newThread(r); [EOL]         assertEquals("Wrong thread name", String.format(PATTERN, Long.valueOf(i + 1)), t.getName()); [EOL]         assertEquals("Wrong thread count", i + 1, factory.getThreadCount()); [EOL]     } [EOL]     EasyMock.verify(wrapped, r); [EOL] }
@Test [EOL] public void testNewThreadNamingPattern() { [EOL]     final ThreadFactory wrapped = EasyMock.createMock(ThreadFactory.class); [EOL]     final Runnable r = EasyMock.createMock(Runnable.class); [EOL]     final int count = 12; [EOL]     for (int i = 0; i < count; i++) { [EOL]         EasyMock.expect(wrapped.newThread(r)).andReturn(new Thread()); [EOL]     } [EOL]     EasyMock.replay(wrapped, r); [EOL]     final BasicThreadFactory factory = builder.wrappedFactory(wrapped).namingPattern(PATTERN).build(); [EOL]     for (int i = 0; i < count; i++) { [EOL]         final Thread t = factory.newThread(r); [EOL]         assertEquals("Wrong thread name", String.format(PATTERN, Long.valueOf(i + 1)), t.getName()); [EOL]         assertEquals("Wrong thread count", i + 1, factory.getThreadCount()); [EOL]     } [EOL]     EasyMock.verify(wrapped, r); [EOL] }
@Test [EOL] public void testInit() { [EOL]     final ScheduledExecutorService service = EasyMock.createMock(ScheduledExecutorService.class); [EOL]     EasyMock.replay(service); [EOL]     final TimedSemaphore semaphore = new TimedSemaphore(service, PERIOD, UNIT, LIMIT); [EOL]     EasyMock.verify(service); [EOL]     assertEquals("Wrong service", service, semaphore.getExecutorService()); [EOL]     assertEquals("Wrong period", PERIOD, semaphore.getPeriod()); [EOL]     assertEquals("Wrong unit", UNIT, semaphore.getUnit()); [EOL]     assertEquals("Statistic available", 0, semaphore.getLastAcquiresPerPeriod()); [EOL]     assertEquals("Average available", 0.0, semaphore.getAverageCallsPerPeriod(), .05); [EOL]     assertFalse("Already shutdown", semaphore.isShutdown()); [EOL]     assertEquals("Wrong limit", LIMIT, semaphore.getLimit()); [EOL] }
@Test [EOL] public void testInit() { [EOL]     final ScheduledExecutorService service = EasyMock.createMock(ScheduledExecutorService.class); [EOL]     EasyMock.replay(service); [EOL]     final TimedSemaphore semaphore = new TimedSemaphore(service, PERIOD, UNIT, LIMIT); [EOL]     EasyMock.verify(service); [EOL]     assertEquals("Wrong service", service, semaphore.getExecutorService()); [EOL]     assertEquals("Wrong period", PERIOD, semaphore.getPeriod()); [EOL]     assertEquals("Wrong unit", UNIT, semaphore.getUnit()); [EOL]     assertEquals("Statistic available", 0, semaphore.getLastAcquiresPerPeriod()); [EOL]     assertEquals("Average available", 0.0, semaphore.getAverageCallsPerPeriod(), .05); [EOL]     assertFalse("Already shutdown", semaphore.isShutdown()); [EOL]     assertEquals("Wrong limit", LIMIT, semaphore.getLimit()); [EOL] }
@Test [EOL] public void testInit() { [EOL]     final ScheduledExecutorService service = EasyMock.createMock(ScheduledExecutorService.class); [EOL]     EasyMock.replay(service); [EOL]     final TimedSemaphore semaphore = new TimedSemaphore(service, PERIOD, UNIT, LIMIT); [EOL]     EasyMock.verify(service); [EOL]     assertEquals("Wrong service", service, semaphore.getExecutorService()); [EOL]     assertEquals("Wrong period", PERIOD, semaphore.getPeriod()); [EOL]     assertEquals("Wrong unit", UNIT, semaphore.getUnit()); [EOL]     assertEquals("Statistic available", 0, semaphore.getLastAcquiresPerPeriod()); [EOL]     assertEquals("Average available", 0.0, semaphore.getAverageCallsPerPeriod(), .05); [EOL]     assertFalse("Already shutdown", semaphore.isShutdown()); [EOL]     assertEquals("Wrong limit", LIMIT, semaphore.getLimit()); [EOL] }
@Test [EOL] public void testInit() { [EOL]     final ScheduledExecutorService service = EasyMock.createMock(ScheduledExecutorService.class); [EOL]     EasyMock.replay(service); [EOL]     final TimedSemaphore semaphore = new TimedSemaphore(service, PERIOD, UNIT, LIMIT); [EOL]     EasyMock.verify(service); [EOL]     assertEquals("Wrong service", service, semaphore.getExecutorService()); [EOL]     assertEquals("Wrong period", PERIOD, semaphore.getPeriod()); [EOL]     assertEquals("Wrong unit", UNIT, semaphore.getUnit()); [EOL]     assertEquals("Statistic available", 0, semaphore.getLastAcquiresPerPeriod()); [EOL]     assertEquals("Average available", 0.0, semaphore.getAverageCallsPerPeriod(), .05); [EOL]     assertFalse("Already shutdown", semaphore.isShutdown()); [EOL]     assertEquals("Wrong limit", LIMIT, semaphore.getLimit()); [EOL] }
@Test [EOL] public void testInit() { [EOL]     final ScheduledExecutorService service = EasyMock.createMock(ScheduledExecutorService.class); [EOL]     EasyMock.replay(service); [EOL]     final TimedSemaphore semaphore = new TimedSemaphore(service, PERIOD, UNIT, LIMIT); [EOL]     EasyMock.verify(service); [EOL]     assertEquals("Wrong service", service, semaphore.getExecutorService()); [EOL]     assertEquals("Wrong period", PERIOD, semaphore.getPeriod()); [EOL]     assertEquals("Wrong unit", UNIT, semaphore.getUnit()); [EOL]     assertEquals("Statistic available", 0, semaphore.getLastAcquiresPerPeriod()); [EOL]     assertEquals("Average available", 0.0, semaphore.getAverageCallsPerPeriod(), .05); [EOL]     assertFalse("Already shutdown", semaphore.isShutdown()); [EOL]     assertEquals("Wrong limit", LIMIT, semaphore.getLimit()); [EOL] }
@Test [EOL] public void testInit() { [EOL]     final ScheduledExecutorService service = EasyMock.createMock(ScheduledExecutorService.class); [EOL]     EasyMock.replay(service); [EOL]     final TimedSemaphore semaphore = new TimedSemaphore(service, PERIOD, UNIT, LIMIT); [EOL]     EasyMock.verify(service); [EOL]     assertEquals("Wrong service", service, semaphore.getExecutorService()); [EOL]     assertEquals("Wrong period", PERIOD, semaphore.getPeriod()); [EOL]     assertEquals("Wrong unit", UNIT, semaphore.getUnit()); [EOL]     assertEquals("Statistic available", 0, semaphore.getLastAcquiresPerPeriod()); [EOL]     assertEquals("Average available", 0.0, semaphore.getAverageCallsPerPeriod(), .05); [EOL]     assertFalse("Already shutdown", semaphore.isShutdown()); [EOL]     assertEquals("Wrong limit", LIMIT, semaphore.getLimit()); [EOL] }
@Test [EOL] public void testInit() { [EOL]     final ScheduledExecutorService service = EasyMock.createMock(ScheduledExecutorService.class); [EOL]     EasyMock.replay(service); [EOL]     final TimedSemaphore semaphore = new TimedSemaphore(service, PERIOD, UNIT, LIMIT); [EOL]     EasyMock.verify(service); [EOL]     assertEquals("Wrong service", service, semaphore.getExecutorService()); [EOL]     assertEquals("Wrong period", PERIOD, semaphore.getPeriod()); [EOL]     assertEquals("Wrong unit", UNIT, semaphore.getUnit()); [EOL]     assertEquals("Statistic available", 0, semaphore.getLastAcquiresPerPeriod()); [EOL]     assertEquals("Average available", 0.0, semaphore.getAverageCallsPerPeriod(), .05); [EOL]     assertFalse("Already shutdown", semaphore.isShutdown()); [EOL]     assertEquals("Wrong limit", LIMIT, semaphore.getLimit()); [EOL] }
@Test [EOL] public void testInit() { [EOL]     final ScheduledExecutorService service = EasyMock.createMock(ScheduledExecutorService.class); [EOL]     EasyMock.replay(service); [EOL]     final TimedSemaphore semaphore = new TimedSemaphore(service, PERIOD, UNIT, LIMIT); [EOL]     EasyMock.verify(service); [EOL]     assertEquals("Wrong service", service, semaphore.getExecutorService()); [EOL]     assertEquals("Wrong period", PERIOD, semaphore.getPeriod()); [EOL]     assertEquals("Wrong unit", UNIT, semaphore.getUnit()); [EOL]     assertEquals("Statistic available", 0, semaphore.getLastAcquiresPerPeriod()); [EOL]     assertEquals("Average available", 0.0, semaphore.getAverageCallsPerPeriod(), .05); [EOL]     assertFalse("Already shutdown", semaphore.isShutdown()); [EOL]     assertEquals("Wrong limit", LIMIT, semaphore.getLimit()); [EOL] }
@Test [EOL] public void testInit() { [EOL]     final ScheduledExecutorService service = EasyMock.createMock(ScheduledExecutorService.class); [EOL]     EasyMock.replay(service); [EOL]     final TimedSemaphore semaphore = new TimedSemaphore(service, PERIOD, UNIT, LIMIT); [EOL]     EasyMock.verify(service); [EOL]     assertEquals("Wrong service", service, semaphore.getExecutorService()); [EOL]     assertEquals("Wrong period", PERIOD, semaphore.getPeriod()); [EOL]     assertEquals("Wrong unit", UNIT, semaphore.getUnit()); [EOL]     assertEquals("Statistic available", 0, semaphore.getLastAcquiresPerPeriod()); [EOL]     assertEquals("Average available", 0.0, semaphore.getAverageCallsPerPeriod(), .05); [EOL]     assertFalse("Already shutdown", semaphore.isShutdown()); [EOL]     assertEquals("Wrong limit", LIMIT, semaphore.getLimit()); [EOL] }
@Test [EOL] public void testAcquireLimit() throws InterruptedException { [EOL]     final ScheduledExecutorService service = EasyMock.createMock(ScheduledExecutorService.class); [EOL]     final ScheduledFuture<?> future = EasyMock.createMock(ScheduledFuture.class); [EOL]     prepareStartTimer(service, future); [EOL]     EasyMock.replay(service, future); [EOL]     final int count = 10; [EOL]     final CountDownLatch latch = new CountDownLatch(count - 1); [EOL]     final TimedSemaphore semaphore = new TimedSemaphore(service, PERIOD, UNIT, 1); [EOL]     final SemaphoreThread t = new SemaphoreThread(semaphore, latch, count, count - 1); [EOL]     semaphore.setLimit(count - 1); [EOL]     t.start(); [EOL]     latch.await(); [EOL]     assertEquals("Wrong semaphore count", count - 1, semaphore.getAcquireCount()); [EOL]     semaphore.endOfPeriod(); [EOL]     t.join(); [EOL]     assertEquals("Wrong semaphore count (2)", 1, semaphore.getAcquireCount()); [EOL]     assertEquals("Wrong acquire() count", count - 1, semaphore.getLastAcquiresPerPeriod()); [EOL]     EasyMock.verify(service, future); [EOL] }
@Test [EOL] public void testAcquireLimit() throws InterruptedException { [EOL]     final ScheduledExecutorService service = EasyMock.createMock(ScheduledExecutorService.class); [EOL]     final ScheduledFuture<?> future = EasyMock.createMock(ScheduledFuture.class); [EOL]     prepareStartTimer(service, future); [EOL]     EasyMock.replay(service, future); [EOL]     final int count = 10; [EOL]     final CountDownLatch latch = new CountDownLatch(count - 1); [EOL]     final TimedSemaphore semaphore = new TimedSemaphore(service, PERIOD, UNIT, 1); [EOL]     final SemaphoreThread t = new SemaphoreThread(semaphore, latch, count, count - 1); [EOL]     semaphore.setLimit(count - 1); [EOL]     t.start(); [EOL]     latch.await(); [EOL]     assertEquals("Wrong semaphore count", count - 1, semaphore.getAcquireCount()); [EOL]     semaphore.endOfPeriod(); [EOL]     t.join(); [EOL]     assertEquals("Wrong semaphore count (2)", 1, semaphore.getAcquireCount()); [EOL]     assertEquals("Wrong acquire() count", count - 1, semaphore.getLastAcquiresPerPeriod()); [EOL]     EasyMock.verify(service, future); [EOL] }
@Test [EOL] public void testAcquireLimit() throws InterruptedException { [EOL]     final ScheduledExecutorService service = EasyMock.createMock(ScheduledExecutorService.class); [EOL]     final ScheduledFuture<?> future = EasyMock.createMock(ScheduledFuture.class); [EOL]     prepareStartTimer(service, future); [EOL]     EasyMock.replay(service, future); [EOL]     final int count = 10; [EOL]     final CountDownLatch latch = new CountDownLatch(count - 1); [EOL]     final TimedSemaphore semaphore = new TimedSemaphore(service, PERIOD, UNIT, 1); [EOL]     final SemaphoreThread t = new SemaphoreThread(semaphore, latch, count, count - 1); [EOL]     semaphore.setLimit(count - 1); [EOL]     t.start(); [EOL]     latch.await(); [EOL]     assertEquals("Wrong semaphore count", count - 1, semaphore.getAcquireCount()); [EOL]     semaphore.endOfPeriod(); [EOL]     t.join(); [EOL]     assertEquals("Wrong semaphore count (2)", 1, semaphore.getAcquireCount()); [EOL]     assertEquals("Wrong acquire() count", count - 1, semaphore.getLastAcquiresPerPeriod()); [EOL]     EasyMock.verify(service, future); [EOL] }
@Test [EOL] public void testAcquireLimit() throws InterruptedException { [EOL]     final ScheduledExecutorService service = EasyMock.createMock(ScheduledExecutorService.class); [EOL]     final ScheduledFuture<?> future = EasyMock.createMock(ScheduledFuture.class); [EOL]     prepareStartTimer(service, future); [EOL]     EasyMock.replay(service, future); [EOL]     final int count = 10; [EOL]     final CountDownLatch latch = new CountDownLatch(count - 1); [EOL]     final TimedSemaphore semaphore = new TimedSemaphore(service, PERIOD, UNIT, 1); [EOL]     final SemaphoreThread t = new SemaphoreThread(semaphore, latch, count, count - 1); [EOL]     semaphore.setLimit(count - 1); [EOL]     t.start(); [EOL]     latch.await(); [EOL]     assertEquals("Wrong semaphore count", count - 1, semaphore.getAcquireCount()); [EOL]     semaphore.endOfPeriod(); [EOL]     t.join(); [EOL]     assertEquals("Wrong semaphore count (2)", 1, semaphore.getAcquireCount()); [EOL]     assertEquals("Wrong acquire() count", count - 1, semaphore.getLastAcquiresPerPeriod()); [EOL]     EasyMock.verify(service, future); [EOL] }
@Test [EOL] public void testAcquireLimit() throws InterruptedException { [EOL]     final ScheduledExecutorService service = EasyMock.createMock(ScheduledExecutorService.class); [EOL]     final ScheduledFuture<?> future = EasyMock.createMock(ScheduledFuture.class); [EOL]     prepareStartTimer(service, future); [EOL]     EasyMock.replay(service, future); [EOL]     final int count = 10; [EOL]     final CountDownLatch latch = new CountDownLatch(count - 1); [EOL]     final TimedSemaphore semaphore = new TimedSemaphore(service, PERIOD, UNIT, 1); [EOL]     final SemaphoreThread t = new SemaphoreThread(semaphore, latch, count, count - 1); [EOL]     semaphore.setLimit(count - 1); [EOL]     t.start(); [EOL]     latch.await(); [EOL]     assertEquals("Wrong semaphore count", count - 1, semaphore.getAcquireCount()); [EOL]     semaphore.endOfPeriod(); [EOL]     t.join(); [EOL]     assertEquals("Wrong semaphore count (2)", 1, semaphore.getAcquireCount()); [EOL]     assertEquals("Wrong acquire() count", count - 1, semaphore.getLastAcquiresPerPeriod()); [EOL]     EasyMock.verify(service, future); [EOL] }
@Test [EOL] public void testInit() { [EOL]     final ScheduledExecutorService service = EasyMock.createMock(ScheduledExecutorService.class); [EOL]     EasyMock.replay(service); [EOL]     final TimedSemaphore semaphore = new TimedSemaphore(service, PERIOD, UNIT, LIMIT); [EOL]     EasyMock.verify(service); [EOL]     assertEquals("Wrong service", service, semaphore.getExecutorService()); [EOL]     assertEquals("Wrong period", PERIOD, semaphore.getPeriod()); [EOL]     assertEquals("Wrong unit", UNIT, semaphore.getUnit()); [EOL]     assertEquals("Statistic available", 0, semaphore.getLastAcquiresPerPeriod()); [EOL]     assertEquals("Average available", 0.0, semaphore.getAverageCallsPerPeriod(), .05); [EOL]     assertFalse("Already shutdown", semaphore.isShutdown()); [EOL]     assertEquals("Wrong limit", LIMIT, semaphore.getLimit()); [EOL] }
@Test [EOL] public void testInit() { [EOL]     final ScheduledExecutorService service = EasyMock.createMock(ScheduledExecutorService.class); [EOL]     EasyMock.replay(service); [EOL]     final TimedSemaphore semaphore = new TimedSemaphore(service, PERIOD, UNIT, LIMIT); [EOL]     EasyMock.verify(service); [EOL]     assertEquals("Wrong service", service, semaphore.getExecutorService()); [EOL]     assertEquals("Wrong period", PERIOD, semaphore.getPeriod()); [EOL]     assertEquals("Wrong unit", UNIT, semaphore.getUnit()); [EOL]     assertEquals("Statistic available", 0, semaphore.getLastAcquiresPerPeriod()); [EOL]     assertEquals("Average available", 0.0, semaphore.getAverageCallsPerPeriod(), .05); [EOL]     assertFalse("Already shutdown", semaphore.isShutdown()); [EOL]     assertEquals("Wrong limit", LIMIT, semaphore.getLimit()); [EOL] }
@Test [EOL] public void testInit() { [EOL]     final ScheduledExecutorService service = EasyMock.createMock(ScheduledExecutorService.class); [EOL]     EasyMock.replay(service); [EOL]     final TimedSemaphore semaphore = new TimedSemaphore(service, PERIOD, UNIT, LIMIT); [EOL]     EasyMock.verify(service); [EOL]     assertEquals("Wrong service", service, semaphore.getExecutorService()); [EOL]     assertEquals("Wrong period", PERIOD, semaphore.getPeriod()); [EOL]     assertEquals("Wrong unit", UNIT, semaphore.getUnit()); [EOL]     assertEquals("Statistic available", 0, semaphore.getLastAcquiresPerPeriod()); [EOL]     assertEquals("Average available", 0.0, semaphore.getAverageCallsPerPeriod(), .05); [EOL]     assertFalse("Already shutdown", semaphore.isShutdown()); [EOL]     assertEquals("Wrong limit", LIMIT, semaphore.getLimit()); [EOL] }
@Test [EOL] public void testInit() { [EOL]     final ScheduledExecutorService service = EasyMock.createMock(ScheduledExecutorService.class); [EOL]     EasyMock.replay(service); [EOL]     final TimedSemaphore semaphore = new TimedSemaphore(service, PERIOD, UNIT, LIMIT); [EOL]     EasyMock.verify(service); [EOL]     assertEquals("Wrong service", service, semaphore.getExecutorService()); [EOL]     assertEquals("Wrong period", PERIOD, semaphore.getPeriod()); [EOL]     assertEquals("Wrong unit", UNIT, semaphore.getUnit()); [EOL]     assertEquals("Statistic available", 0, semaphore.getLastAcquiresPerPeriod()); [EOL]     assertEquals("Average available", 0.0, semaphore.getAverageCallsPerPeriod(), .05); [EOL]     assertFalse("Already shutdown", semaphore.isShutdown()); [EOL]     assertEquals("Wrong limit", LIMIT, semaphore.getLimit()); [EOL] }
@Test [EOL] public void testInit() { [EOL]     final ScheduledExecutorService service = EasyMock.createMock(ScheduledExecutorService.class); [EOL]     EasyMock.replay(service); [EOL]     final TimedSemaphore semaphore = new TimedSemaphore(service, PERIOD, UNIT, LIMIT); [EOL]     EasyMock.verify(service); [EOL]     assertEquals("Wrong service", service, semaphore.getExecutorService()); [EOL]     assertEquals("Wrong period", PERIOD, semaphore.getPeriod()); [EOL]     assertEquals("Wrong unit", UNIT, semaphore.getUnit()); [EOL]     assertEquals("Statistic available", 0, semaphore.getLastAcquiresPerPeriod()); [EOL]     assertEquals("Average available", 0.0, semaphore.getAverageCallsPerPeriod(), .05); [EOL]     assertFalse("Already shutdown", semaphore.isShutdown()); [EOL]     assertEquals("Wrong limit", LIMIT, semaphore.getLimit()); [EOL] }
@Test [EOL] public void testInit() { [EOL]     final ScheduledExecutorService service = EasyMock.createMock(ScheduledExecutorService.class); [EOL]     EasyMock.replay(service); [EOL]     final TimedSemaphore semaphore = new TimedSemaphore(service, PERIOD, UNIT, LIMIT); [EOL]     EasyMock.verify(service); [EOL]     assertEquals("Wrong service", service, semaphore.getExecutorService()); [EOL]     assertEquals("Wrong period", PERIOD, semaphore.getPeriod()); [EOL]     assertEquals("Wrong unit", UNIT, semaphore.getUnit()); [EOL]     assertEquals("Statistic available", 0, semaphore.getLastAcquiresPerPeriod()); [EOL]     assertEquals("Average available", 0.0, semaphore.getAverageCallsPerPeriod(), .05); [EOL]     assertFalse("Already shutdown", semaphore.isShutdown()); [EOL]     assertEquals("Wrong limit", LIMIT, semaphore.getLimit()); [EOL] }
@Test [EOL] public void testContextedExceptionStringThrowable() { [EOL]     exceptionContext = new ContextedRuntimeException(TEST_MESSAGE_2, new Exception(TEST_MESSAGE)); [EOL]     final String message = exceptionContext.getMessage(); [EOL]     final String trace = ExceptionUtils.getStackTrace(exceptionContext); [EOL]     assertTrue(trace.indexOf("ContextedException") >= 0); [EOL]     assertTrue(trace.indexOf(TEST_MESSAGE) >= 0); [EOL]     assertTrue(trace.indexOf(TEST_MESSAGE_2) >= 0); [EOL]     assertTrue(message.indexOf(TEST_MESSAGE_2) >= 0); [EOL] }
@Test [EOL] public void testContextedExceptionStringThrowableContext() { [EOL]     exceptionContext = new ContextedRuntimeException(TEST_MESSAGE_2, new Exception(TEST_MESSAGE), new DefaultExceptionContext() { [EOL]     }); [EOL]     final String message = exceptionContext.getMessage(); [EOL]     final String trace = ExceptionUtils.getStackTrace(exceptionContext); [EOL]     assertTrue(trace.indexOf("ContextedException") >= 0); [EOL]     assertTrue(trace.indexOf(TEST_MESSAGE) >= 0); [EOL]     assertTrue(trace.indexOf(TEST_MESSAGE_2) >= 0); [EOL]     assertTrue(message.indexOf(TEST_MESSAGE_2) >= 0); [EOL] }
@Test [EOL] public void testContextedExceptionStringThrowable() { [EOL]     exceptionContext = new ContextedRuntimeException(TEST_MESSAGE_2, new Exception(TEST_MESSAGE)); [EOL]     final String message = exceptionContext.getMessage(); [EOL]     final String trace = ExceptionUtils.getStackTrace(exceptionContext); [EOL]     assertTrue(trace.indexOf("ContextedException") >= 0); [EOL]     assertTrue(trace.indexOf(TEST_MESSAGE) >= 0); [EOL]     assertTrue(trace.indexOf(TEST_MESSAGE_2) >= 0); [EOL]     assertTrue(message.indexOf(TEST_MESSAGE_2) >= 0); [EOL] }
@Test [EOL] public void testContextedExceptionStringThrowable() { [EOL]     exceptionContext = new ContextedRuntimeException(TEST_MESSAGE_2, new Exception(TEST_MESSAGE)); [EOL]     final String message = exceptionContext.getMessage(); [EOL]     final String trace = ExceptionUtils.getStackTrace(exceptionContext); [EOL]     assertTrue(trace.indexOf("ContextedException") >= 0); [EOL]     assertTrue(trace.indexOf(TEST_MESSAGE) >= 0); [EOL]     assertTrue(trace.indexOf(TEST_MESSAGE_2) >= 0); [EOL]     assertTrue(message.indexOf(TEST_MESSAGE_2) >= 0); [EOL] }
@Test [EOL] public void testContextedExceptionStringThrowable() { [EOL]     exceptionContext = new ContextedRuntimeException(TEST_MESSAGE_2, new Exception(TEST_MESSAGE)); [EOL]     final String message = exceptionContext.getMessage(); [EOL]     final String trace = ExceptionUtils.getStackTrace(exceptionContext); [EOL]     assertTrue(trace.indexOf("ContextedException") >= 0); [EOL]     assertTrue(trace.indexOf(TEST_MESSAGE) >= 0); [EOL]     assertTrue(trace.indexOf(TEST_MESSAGE_2) >= 0); [EOL]     assertTrue(message.indexOf(TEST_MESSAGE_2) >= 0); [EOL] }
@Test [EOL] public void testContextedExceptionStringThrowable() { [EOL]     exceptionContext = new ContextedRuntimeException(TEST_MESSAGE_2, new Exception(TEST_MESSAGE)); [EOL]     final String message = exceptionContext.getMessage(); [EOL]     final String trace = ExceptionUtils.getStackTrace(exceptionContext); [EOL]     assertTrue(trace.indexOf("ContextedException") >= 0); [EOL]     assertTrue(trace.indexOf(TEST_MESSAGE) >= 0); [EOL]     assertTrue(trace.indexOf(TEST_MESSAGE_2) >= 0); [EOL]     assertTrue(message.indexOf(TEST_MESSAGE_2) >= 0); [EOL] }
@Test [EOL] public void testUPlus() { [EOL]     final UnicodeUnescaper uu = new UnicodeUnescaper(); [EOL]     final String input = "\\u+0047"; [EOL]     assertEquals("Failed to unescape Unicode characters with 'u+' notation", "G", uu.translate(input)); [EOL] }
@Test [EOL] public void testUPlus() { [EOL]     final UnicodeUnescaper uu = new UnicodeUnescaper(); [EOL]     final String input = "\\u+0047"; [EOL]     assertEquals("Failed to unescape Unicode characters with 'u+' notation", "G", uu.translate(input)); [EOL] }
@Test [EOL] public void testUPlus() { [EOL]     final UnicodeUnescaper uu = new UnicodeUnescaper(); [EOL]     final String input = "\\u+0047"; [EOL]     assertEquals("Failed to unescape Unicode characters with 'u+' notation", "G", uu.translate(input)); [EOL] }
@Test [EOL] public void testUPlus() { [EOL]     final UnicodeUnescaper uu = new UnicodeUnescaper(); [EOL]     final String input = "\\u+0047"; [EOL]     assertEquals("Failed to unescape Unicode characters with 'u+' notation", "G", uu.translate(input)); [EOL] }
@Test [EOL] public void testUPlus() { [EOL]     final UnicodeUnescaper uu = new UnicodeUnescaper(); [EOL]     final String input = "\\u+0047"; [EOL]     assertEquals("Failed to unescape Unicode characters with 'u+' notation", "G", uu.translate(input)); [EOL] }
@Test [EOL] public void testUPlus() { [EOL]     final UnicodeUnescaper uu = new UnicodeUnescaper(); [EOL]     final String input = "\\u+0047"; [EOL]     assertEquals("Failed to unescape Unicode characters with 'u+' notation", "G", uu.translate(input)); [EOL] }
@Test [EOL] public void testUPlus() { [EOL]     final UnicodeUnescaper uu = new UnicodeUnescaper(); [EOL]     final String input = "\\u+0047"; [EOL]     assertEquals("Failed to unescape Unicode characters with 'u+' notation", "G", uu.translate(input)); [EOL] }
@Test [EOL] public void testUPlus() { [EOL]     final UnicodeUnescaper uu = new UnicodeUnescaper(); [EOL]     final String input = "\\u+0047"; [EOL]     assertEquals("Failed to unescape Unicode characters with 'u+' notation", "G", uu.translate(input)); [EOL] }
@Test [EOL] public void testAddValueObject() { [EOL]     final MutableFloat mutNum = new MutableFloat(1); [EOL]     mutNum.add(Float.valueOf(1.1f)); [EOL]     assertEquals(2.1f, mutNum.floatValue(), 0.01f); [EOL] }
@Test [EOL] public void testAddValueObject() { [EOL]     final MutableFloat mutNum = new MutableFloat(1); [EOL]     mutNum.add(Float.valueOf(1.1f)); [EOL]     assertEquals(2.1f, mutNum.floatValue(), 0.01f); [EOL] }
@Test [EOL] public void testAddValueObject() { [EOL]     final MutableFloat mutNum = new MutableFloat(1); [EOL]     mutNum.add(Float.valueOf(1.1f)); [EOL]     assertEquals(2.1f, mutNum.floatValue(), 0.01f); [EOL] }
@Test [EOL] public void testAddValueObject() { [EOL]     final MutableFloat mutNum = new MutableFloat(1); [EOL]     mutNum.add(Float.valueOf(1.1f)); [EOL]     assertEquals(2.1f, mutNum.floatValue(), 0.01f); [EOL] }
@Test [EOL] public void testCompareTo() { [EOL]     final MutableFloat mutNum = new MutableFloat(0f); [EOL]     assertEquals(0, mutNum.compareTo(new MutableFloat(0f))); [EOL]     assertEquals(+1, mutNum.compareTo(new MutableFloat(-1f))); [EOL]     assertEquals(-1, mutNum.compareTo(new MutableFloat(1f))); [EOL] }
@Test [EOL] public void testCompareTo() { [EOL]     final MutableFloat mutNum = new MutableFloat(0f); [EOL]     assertEquals(0, mutNum.compareTo(new MutableFloat(0f))); [EOL]     assertEquals(+1, mutNum.compareTo(new MutableFloat(-1f))); [EOL]     assertEquals(-1, mutNum.compareTo(new MutableFloat(1f))); [EOL] }
@Test [EOL] public void testCompareTo() { [EOL]     final MutableFloat mutNum = new MutableFloat(0f); [EOL]     assertEquals(0, mutNum.compareTo(new MutableFloat(0f))); [EOL]     assertEquals(+1, mutNum.compareTo(new MutableFloat(-1f))); [EOL]     assertEquals(-1, mutNum.compareTo(new MutableFloat(1f))); [EOL] }
@Test [EOL] public void testToString() { [EOL]     assertEquals("0.0", new MutableFloat(0f).toString()); [EOL]     assertEquals("10.0", new MutableFloat(10f).toString()); [EOL]     assertEquals("-123.0", new MutableFloat(-123f).toString()); [EOL] }
@Test [EOL] public void testToString() { [EOL]     assertEquals("0.0", new MutableFloat(0f).toString()); [EOL]     assertEquals("10.0", new MutableFloat(10f).toString()); [EOL]     assertEquals("-123.0", new MutableFloat(-123f).toString()); [EOL] }
@Test [EOL] public void test_getPackageCanonicalName_Object() { [EOL]     assertEquals("<null>", ClassUtils.getPackageCanonicalName(null, "<null>")); [EOL]     assertEquals("org.apache.commons.lang3", ClassUtils.getPackageCanonicalName(new ClassUtils(), "<null>")); [EOL]     assertEquals("org.apache.commons.lang3", ClassUtils.getPackageCanonicalName(new ClassUtils[0], "<null>")); [EOL]     assertEquals("org.apache.commons.lang3", ClassUtils.getPackageCanonicalName(new ClassUtils[0][0], "<null>")); [EOL]     assertEquals("", ClassUtils.getPackageCanonicalName(new int[0], "<null>")); [EOL]     assertEquals("", ClassUtils.getPackageCanonicalName(new int[0][0], "<null>")); [EOL]     class Named extends Object { [EOL]     } [EOL]     assertEquals("org.apache.commons.lang3", ClassUtils.getPackageCanonicalName(new Object() { [EOL]     }, "<null>")); [EOL]     assertEquals("org.apache.commons.lang3", ClassUtils.getPackageCanonicalName(new Named(), "<null>")); [EOL]     assertEquals("org.apache.commons.lang3", ClassUtils.getPackageCanonicalName(new Inner(), "<null>")); [EOL] }
@Test [EOL] public void test_getShortClassName_Class() { [EOL]     assertEquals("ClassUtils", ClassUtils.getShortClassName(ClassUtils.class)); [EOL]     assertEquals("Map.Entry", ClassUtils.getShortClassName(Map.Entry.class)); [EOL]     assertEquals("", ClassUtils.getShortClassName((Class<?>) null)); [EOL]     assertEquals("String[]", ClassUtils.getShortClassName(String[].class)); [EOL]     assertEquals("Map.Entry[]", ClassUtils.getShortClassName(Map.Entry[].class)); [EOL]     assertEquals("boolean", ClassUtils.getShortClassName(boolean.class)); [EOL]     assertEquals("byte", ClassUtils.getShortClassName(byte.class)); [EOL]     assertEquals("char", ClassUtils.getShortClassName(char.class)); [EOL]     assertEquals("short", ClassUtils.getShortClassName(short.class)); [EOL]     assertEquals("int", ClassUtils.getShortClassName(int.class)); [EOL]     assertEquals("long", ClassUtils.getShortClassName(long.class)); [EOL]     assertEquals("float", ClassUtils.getShortClassName(float.class)); [EOL]     assertEquals("double", ClassUtils.getShortClassName(double.class)); [EOL]     assertEquals("boolean[]", ClassUtils.getShortClassName(boolean[].class)); [EOL]     assertEquals("byte[]", ClassUtils.getShortClassName(byte[].class)); [EOL]     assertEquals("char[]", ClassUtils.getShortClassName(char[].class)); [EOL]     assertEquals("short[]", ClassUtils.getShortClassName(short[].class)); [EOL]     assertEquals("int[]", ClassUtils.getShortClassName(int[].class)); [EOL]     assertEquals("long[]", ClassUtils.getShortClassName(long[].class)); [EOL]     assertEquals("float[]", ClassUtils.getShortClassName(float[].class)); [EOL]     assertEquals("double[]", ClassUtils.getShortClassName(double[].class)); [EOL]     assertEquals("String[][]", ClassUtils.getShortClassName(String[][].class)); [EOL]     assertEquals("String[][][]", ClassUtils.getShortClassName(String[][][].class)); [EOL]     assertEquals("String[][][][]", ClassUtils.getShortClassName(String[][][][].class)); [EOL]     class Named extends Object { [EOL]     } [EOL]     assertEquals("ClassUtilsTest.2", ClassUtils.getShortClassName(new Object() { [EOL]     }.getClass())); [EOL]     assertEquals("ClassUtilsTest.2Named", ClassUtils.getShortClassName(Named.class)); [EOL]     assertEquals("ClassUtilsTest.Inner", ClassUtils.getShortClassName(Inner.class)); [EOL] }
@Test [EOL] public void test_getShortClassName_Class() { [EOL]     assertEquals("ClassUtils", ClassUtils.getShortClassName(ClassUtils.class)); [EOL]     assertEquals("Map.Entry", ClassUtils.getShortClassName(Map.Entry.class)); [EOL]     assertEquals("", ClassUtils.getShortClassName((Class<?>) null)); [EOL]     assertEquals("String[]", ClassUtils.getShortClassName(String[].class)); [EOL]     assertEquals("Map.Entry[]", ClassUtils.getShortClassName(Map.Entry[].class)); [EOL]     assertEquals("boolean", ClassUtils.getShortClassName(boolean.class)); [EOL]     assertEquals("byte", ClassUtils.getShortClassName(byte.class)); [EOL]     assertEquals("char", ClassUtils.getShortClassName(char.class)); [EOL]     assertEquals("short", ClassUtils.getShortClassName(short.class)); [EOL]     assertEquals("int", ClassUtils.getShortClassName(int.class)); [EOL]     assertEquals("long", ClassUtils.getShortClassName(long.class)); [EOL]     assertEquals("float", ClassUtils.getShortClassName(float.class)); [EOL]     assertEquals("double", ClassUtils.getShortClassName(double.class)); [EOL]     assertEquals("boolean[]", ClassUtils.getShortClassName(boolean[].class)); [EOL]     assertEquals("byte[]", ClassUtils.getShortClassName(byte[].class)); [EOL]     assertEquals("char[]", ClassUtils.getShortClassName(char[].class)); [EOL]     assertEquals("short[]", ClassUtils.getShortClassName(short[].class)); [EOL]     assertEquals("int[]", ClassUtils.getShortClassName(int[].class)); [EOL]     assertEquals("long[]", ClassUtils.getShortClassName(long[].class)); [EOL]     assertEquals("float[]", ClassUtils.getShortClassName(float[].class)); [EOL]     assertEquals("double[]", ClassUtils.getShortClassName(double[].class)); [EOL]     assertEquals("String[][]", ClassUtils.getShortClassName(String[][].class)); [EOL]     assertEquals("String[][][]", ClassUtils.getShortClassName(String[][][].class)); [EOL]     assertEquals("String[][][][]", ClassUtils.getShortClassName(String[][][][].class)); [EOL]     class Named extends Object { [EOL]     } [EOL]     assertEquals("ClassUtilsTest.2", ClassUtils.getShortClassName(new Object() { [EOL]     }.getClass())); [EOL]     assertEquals("ClassUtilsTest.2Named", ClassUtils.getShortClassName(Named.class)); [EOL]     assertEquals("ClassUtilsTest.Inner", ClassUtils.getShortClassName(Inner.class)); [EOL] }
@Test [EOL] public void test_getShortClassName_Class() { [EOL]     assertEquals("ClassUtils", ClassUtils.getShortClassName(ClassUtils.class)); [EOL]     assertEquals("Map.Entry", ClassUtils.getShortClassName(Map.Entry.class)); [EOL]     assertEquals("", ClassUtils.getShortClassName((Class<?>) null)); [EOL]     assertEquals("String[]", ClassUtils.getShortClassName(String[].class)); [EOL]     assertEquals("Map.Entry[]", ClassUtils.getShortClassName(Map.Entry[].class)); [EOL]     assertEquals("boolean", ClassUtils.getShortClassName(boolean.class)); [EOL]     assertEquals("byte", ClassUtils.getShortClassName(byte.class)); [EOL]     assertEquals("char", ClassUtils.getShortClassName(char.class)); [EOL]     assertEquals("short", ClassUtils.getShortClassName(short.class)); [EOL]     assertEquals("int", ClassUtils.getShortClassName(int.class)); [EOL]     assertEquals("long", ClassUtils.getShortClassName(long.class)); [EOL]     assertEquals("float", ClassUtils.getShortClassName(float.class)); [EOL]     assertEquals("double", ClassUtils.getShortClassName(double.class)); [EOL]     assertEquals("boolean[]", ClassUtils.getShortClassName(boolean[].class)); [EOL]     assertEquals("byte[]", ClassUtils.getShortClassName(byte[].class)); [EOL]     assertEquals("char[]", ClassUtils.getShortClassName(char[].class)); [EOL]     assertEquals("short[]", ClassUtils.getShortClassName(short[].class)); [EOL]     assertEquals("int[]", ClassUtils.getShortClassName(int[].class)); [EOL]     assertEquals("long[]", ClassUtils.getShortClassName(long[].class)); [EOL]     assertEquals("float[]", ClassUtils.getShortClassName(float[].class)); [EOL]     assertEquals("double[]", ClassUtils.getShortClassName(double[].class)); [EOL]     assertEquals("String[][]", ClassUtils.getShortClassName(String[][].class)); [EOL]     assertEquals("String[][][]", ClassUtils.getShortClassName(String[][][].class)); [EOL]     assertEquals("String[][][][]", ClassUtils.getShortClassName(String[][][][].class)); [EOL]     class Named extends Object { [EOL]     } [EOL]     assertEquals("ClassUtilsTest.2", ClassUtils.getShortClassName(new Object() { [EOL]     }.getClass())); [EOL]     assertEquals("ClassUtilsTest.2Named", ClassUtils.getShortClassName(Named.class)); [EOL]     assertEquals("ClassUtilsTest.Inner", ClassUtils.getShortClassName(Inner.class)); [EOL] }
@Test [EOL] public void test_getShortClassName_Class() { [EOL]     assertEquals("ClassUtils", ClassUtils.getShortClassName(ClassUtils.class)); [EOL]     assertEquals("Map.Entry", ClassUtils.getShortClassName(Map.Entry.class)); [EOL]     assertEquals("", ClassUtils.getShortClassName((Class<?>) null)); [EOL]     assertEquals("String[]", ClassUtils.getShortClassName(String[].class)); [EOL]     assertEquals("Map.Entry[]", ClassUtils.getShortClassName(Map.Entry[].class)); [EOL]     assertEquals("boolean", ClassUtils.getShortClassName(boolean.class)); [EOL]     assertEquals("byte", ClassUtils.getShortClassName(byte.class)); [EOL]     assertEquals("char", ClassUtils.getShortClassName(char.class)); [EOL]     assertEquals("short", ClassUtils.getShortClassName(short.class)); [EOL]     assertEquals("int", ClassUtils.getShortClassName(int.class)); [EOL]     assertEquals("long", ClassUtils.getShortClassName(long.class)); [EOL]     assertEquals("float", ClassUtils.getShortClassName(float.class)); [EOL]     assertEquals("double", ClassUtils.getShortClassName(double.class)); [EOL]     assertEquals("boolean[]", ClassUtils.getShortClassName(boolean[].class)); [EOL]     assertEquals("byte[]", ClassUtils.getShortClassName(byte[].class)); [EOL]     assertEquals("char[]", ClassUtils.getShortClassName(char[].class)); [EOL]     assertEquals("short[]", ClassUtils.getShortClassName(short[].class)); [EOL]     assertEquals("int[]", ClassUtils.getShortClassName(int[].class)); [EOL]     assertEquals("long[]", ClassUtils.getShortClassName(long[].class)); [EOL]     assertEquals("float[]", ClassUtils.getShortClassName(float[].class)); [EOL]     assertEquals("double[]", ClassUtils.getShortClassName(double[].class)); [EOL]     assertEquals("String[][]", ClassUtils.getShortClassName(String[][].class)); [EOL]     assertEquals("String[][][]", ClassUtils.getShortClassName(String[][][].class)); [EOL]     assertEquals("String[][][][]", ClassUtils.getShortClassName(String[][][][].class)); [EOL]     class Named extends Object { [EOL]     } [EOL]     assertEquals("ClassUtilsTest.2", ClassUtils.getShortClassName(new Object() { [EOL]     }.getClass())); [EOL]     assertEquals("ClassUtilsTest.2Named", ClassUtils.getShortClassName(Named.class)); [EOL]     assertEquals("ClassUtilsTest.Inner", ClassUtils.getShortClassName(Inner.class)); [EOL] }
@Test [EOL] public void test_getPackageCanonicalName_Object() { [EOL]     assertEquals("<null>", ClassUtils.getPackageCanonicalName(null, "<null>")); [EOL]     assertEquals("org.apache.commons.lang3", ClassUtils.getPackageCanonicalName(new ClassUtils(), "<null>")); [EOL]     assertEquals("org.apache.commons.lang3", ClassUtils.getPackageCanonicalName(new ClassUtils[0], "<null>")); [EOL]     assertEquals("org.apache.commons.lang3", ClassUtils.getPackageCanonicalName(new ClassUtils[0][0], "<null>")); [EOL]     assertEquals("", ClassUtils.getPackageCanonicalName(new int[0], "<null>")); [EOL]     assertEquals("", ClassUtils.getPackageCanonicalName(new int[0][0], "<null>")); [EOL]     class Named extends Object { [EOL]     } [EOL]     assertEquals("org.apache.commons.lang3", ClassUtils.getPackageCanonicalName(new Object() { [EOL]     }, "<null>")); [EOL]     assertEquals("org.apache.commons.lang3", ClassUtils.getPackageCanonicalName(new Named(), "<null>")); [EOL]     assertEquals("org.apache.commons.lang3", ClassUtils.getPackageCanonicalName(new Inner(), "<null>")); [EOL] }
@Test [EOL] public void test_getPackageCanonicalName_Object() { [EOL]     assertEquals("<null>", ClassUtils.getPackageCanonicalName(null, "<null>")); [EOL]     assertEquals("org.apache.commons.lang3", ClassUtils.getPackageCanonicalName(new ClassUtils(), "<null>")); [EOL]     assertEquals("org.apache.commons.lang3", ClassUtils.getPackageCanonicalName(new ClassUtils[0], "<null>")); [EOL]     assertEquals("org.apache.commons.lang3", ClassUtils.getPackageCanonicalName(new ClassUtils[0][0], "<null>")); [EOL]     assertEquals("", ClassUtils.getPackageCanonicalName(new int[0], "<null>")); [EOL]     assertEquals("", ClassUtils.getPackageCanonicalName(new int[0][0], "<null>")); [EOL]     class Named extends Object { [EOL]     } [EOL]     assertEquals("org.apache.commons.lang3", ClassUtils.getPackageCanonicalName(new Object() { [EOL]     }, "<null>")); [EOL]     assertEquals("org.apache.commons.lang3", ClassUtils.getPackageCanonicalName(new Named(), "<null>")); [EOL]     assertEquals("org.apache.commons.lang3", ClassUtils.getPackageCanonicalName(new Inner(), "<null>")); [EOL] }
@Test [EOL] public void test_getAllSuperclasses_Class() { [EOL]     final List<?> list = ClassUtils.getAllSuperclasses(CY.class); [EOL]     assertEquals(2, list.size()); [EOL]     assertEquals(CX.class, list.get(0)); [EOL]     assertEquals(Object.class, list.get(1)); [EOL]     assertEquals(null, ClassUtils.getAllSuperclasses(null)); [EOL] }
@Test [EOL] public void test_getAllSuperclasses_Class() { [EOL]     final List<?> list = ClassUtils.getAllSuperclasses(CY.class); [EOL]     assertEquals(2, list.size()); [EOL]     assertEquals(CX.class, list.get(0)); [EOL]     assertEquals(Object.class, list.get(1)); [EOL]     assertEquals(null, ClassUtils.getAllSuperclasses(null)); [EOL] }
@Test [EOL] public void test_getAllSuperclasses_Class() { [EOL]     final List<?> list = ClassUtils.getAllSuperclasses(CY.class); [EOL]     assertEquals(2, list.size()); [EOL]     assertEquals(CX.class, list.get(0)); [EOL]     assertEquals(Object.class, list.get(1)); [EOL]     assertEquals(null, ClassUtils.getAllSuperclasses(null)); [EOL] }
@Test [EOL] public void test_convertClassesToClassNames_List() { [EOL]     final List<Class<?>> list = new ArrayList<Class<?>>(); [EOL]     List<String> result = ClassUtils.convertClassesToClassNames(list); [EOL]     assertEquals(0, result.size()); [EOL]     list.add(String.class); [EOL]     list.add(null); [EOL]     list.add(Object.class); [EOL]     result = ClassUtils.convertClassesToClassNames(list); [EOL]     assertEquals(3, result.size()); [EOL]     assertEquals("java.lang.String", result.get(0)); [EOL]     assertEquals(null, result.get(1)); [EOL]     assertEquals("java.lang.Object", result.get(2)); [EOL]     @SuppressWarnings("unchecked") [EOL]     final List<Object> olist = (List<Object>) (List<?>) list; [EOL]     olist.add(new Object()); [EOL]     try { [EOL]         ClassUtils.convertClassesToClassNames(list); [EOL]         fail("Should not have been able to convert list"); [EOL]     } catch (final ClassCastException expected) { [EOL]     } [EOL]     assertEquals(null, ClassUtils.convertClassesToClassNames(null)); [EOL] }
@Test [EOL] public void test_isAssignable_ClassArray_ClassArray() throws Exception { [EOL]     final Class<?>[] array2 = new Class[] { Object.class, Object.class }; [EOL]     final Class<?>[] array1 = new Class[] { Object.class }; [EOL]     final Class<?>[] array1s = new Class[] { String.class }; [EOL]     final Class<?>[] array0 = new Class[] {}; [EOL]     final Class<?>[] arrayPrimitives = { Integer.TYPE, Boolean.TYPE }; [EOL]     final Class<?>[] arrayWrappers = { Integer.class, Boolean.class }; [EOL]     assertFalse(ClassUtils.isAssignable(array1, array2)); [EOL]     assertFalse(ClassUtils.isAssignable(null, array2)); [EOL]     assertTrue(ClassUtils.isAssignable(null, array0)); [EOL]     assertTrue(ClassUtils.isAssignable(array0, array0)); [EOL]     assertTrue(ClassUtils.isAssignable(array0, (Class<?>[]) null)); [EOL]     assertTrue(ClassUtils.isAssignable((Class[]) null, (Class[]) null)); [EOL]     assertFalse(ClassUtils.isAssignable(array1, array1s)); [EOL]     assertTrue(ClassUtils.isAssignable(array1s, array1s)); [EOL]     assertTrue(ClassUtils.isAssignable(array1s, array1)); [EOL]     final boolean autoboxing = SystemUtils.isJavaVersionAtLeast(JAVA_1_5); [EOL]     assertEquals(autoboxing, ClassUtils.isAssignable(arrayPrimitives, arrayWrappers)); [EOL]     assertEquals(autoboxing, ClassUtils.isAssignable(arrayWrappers, arrayPrimitives)); [EOL]     assertFalse(ClassUtils.isAssignable(arrayPrimitives, array1)); [EOL]     assertFalse(ClassUtils.isAssignable(arrayWrappers, array1)); [EOL]     assertEquals(autoboxing, ClassUtils.isAssignable(arrayPrimitives, array2)); [EOL]     assertTrue(ClassUtils.isAssignable(arrayWrappers, array2)); [EOL] }
@Test [EOL] public void test_isAssignable_ClassArray_ClassArray() throws Exception { [EOL]     final Class<?>[] array2 = new Class[] { Object.class, Object.class }; [EOL]     final Class<?>[] array1 = new Class[] { Object.class }; [EOL]     final Class<?>[] array1s = new Class[] { String.class }; [EOL]     final Class<?>[] array0 = new Class[] {}; [EOL]     final Class<?>[] arrayPrimitives = { Integer.TYPE, Boolean.TYPE }; [EOL]     final Class<?>[] arrayWrappers = { Integer.class, Boolean.class }; [EOL]     assertFalse(ClassUtils.isAssignable(array1, array2)); [EOL]     assertFalse(ClassUtils.isAssignable(null, array2)); [EOL]     assertTrue(ClassUtils.isAssignable(null, array0)); [EOL]     assertTrue(ClassUtils.isAssignable(array0, array0)); [EOL]     assertTrue(ClassUtils.isAssignable(array0, (Class<?>[]) null)); [EOL]     assertTrue(ClassUtils.isAssignable((Class[]) null, (Class[]) null)); [EOL]     assertFalse(ClassUtils.isAssignable(array1, array1s)); [EOL]     assertTrue(ClassUtils.isAssignable(array1s, array1s)); [EOL]     assertTrue(ClassUtils.isAssignable(array1s, array1)); [EOL]     final boolean autoboxing = SystemUtils.isJavaVersionAtLeast(JAVA_1_5); [EOL]     assertEquals(autoboxing, ClassUtils.isAssignable(arrayPrimitives, arrayWrappers)); [EOL]     assertEquals(autoboxing, ClassUtils.isAssignable(arrayWrappers, arrayPrimitives)); [EOL]     assertFalse(ClassUtils.isAssignable(arrayPrimitives, array1)); [EOL]     assertFalse(ClassUtils.isAssignable(arrayWrappers, array1)); [EOL]     assertEquals(autoboxing, ClassUtils.isAssignable(arrayPrimitives, array2)); [EOL]     assertTrue(ClassUtils.isAssignable(arrayWrappers, array2)); [EOL] }
@Test [EOL] public void test_isAssignable_ClassArray_ClassArray() throws Exception { [EOL]     final Class<?>[] array2 = new Class[] { Object.class, Object.class }; [EOL]     final Class<?>[] array1 = new Class[] { Object.class }; [EOL]     final Class<?>[] array1s = new Class[] { String.class }; [EOL]     final Class<?>[] array0 = new Class[] {}; [EOL]     final Class<?>[] arrayPrimitives = { Integer.TYPE, Boolean.TYPE }; [EOL]     final Class<?>[] arrayWrappers = { Integer.class, Boolean.class }; [EOL]     assertFalse(ClassUtils.isAssignable(array1, array2)); [EOL]     assertFalse(ClassUtils.isAssignable(null, array2)); [EOL]     assertTrue(ClassUtils.isAssignable(null, array0)); [EOL]     assertTrue(ClassUtils.isAssignable(array0, array0)); [EOL]     assertTrue(ClassUtils.isAssignable(array0, (Class<?>[]) null)); [EOL]     assertTrue(ClassUtils.isAssignable((Class[]) null, (Class[]) null)); [EOL]     assertFalse(ClassUtils.isAssignable(array1, array1s)); [EOL]     assertTrue(ClassUtils.isAssignable(array1s, array1s)); [EOL]     assertTrue(ClassUtils.isAssignable(array1s, array1)); [EOL]     final boolean autoboxing = SystemUtils.isJavaVersionAtLeast(JAVA_1_5); [EOL]     assertEquals(autoboxing, ClassUtils.isAssignable(arrayPrimitives, arrayWrappers)); [EOL]     assertEquals(autoboxing, ClassUtils.isAssignable(arrayWrappers, arrayPrimitives)); [EOL]     assertFalse(ClassUtils.isAssignable(arrayPrimitives, array1)); [EOL]     assertFalse(ClassUtils.isAssignable(arrayWrappers, array1)); [EOL]     assertEquals(autoboxing, ClassUtils.isAssignable(arrayPrimitives, array2)); [EOL]     assertTrue(ClassUtils.isAssignable(arrayWrappers, array2)); [EOL] }
@Test [EOL] public void test_isAssignable_ClassArray_ClassArray() throws Exception { [EOL]     final Class<?>[] array2 = new Class[] { Object.class, Object.class }; [EOL]     final Class<?>[] array1 = new Class[] { Object.class }; [EOL]     final Class<?>[] array1s = new Class[] { String.class }; [EOL]     final Class<?>[] array0 = new Class[] {}; [EOL]     final Class<?>[] arrayPrimitives = { Integer.TYPE, Boolean.TYPE }; [EOL]     final Class<?>[] arrayWrappers = { Integer.class, Boolean.class }; [EOL]     assertFalse(ClassUtils.isAssignable(array1, array2)); [EOL]     assertFalse(ClassUtils.isAssignable(null, array2)); [EOL]     assertTrue(ClassUtils.isAssignable(null, array0)); [EOL]     assertTrue(ClassUtils.isAssignable(array0, array0)); [EOL]     assertTrue(ClassUtils.isAssignable(array0, (Class<?>[]) null)); [EOL]     assertTrue(ClassUtils.isAssignable((Class[]) null, (Class[]) null)); [EOL]     assertFalse(ClassUtils.isAssignable(array1, array1s)); [EOL]     assertTrue(ClassUtils.isAssignable(array1s, array1s)); [EOL]     assertTrue(ClassUtils.isAssignable(array1s, array1)); [EOL]     final boolean autoboxing = SystemUtils.isJavaVersionAtLeast(JAVA_1_5); [EOL]     assertEquals(autoboxing, ClassUtils.isAssignable(arrayPrimitives, arrayWrappers)); [EOL]     assertEquals(autoboxing, ClassUtils.isAssignable(arrayWrappers, arrayPrimitives)); [EOL]     assertFalse(ClassUtils.isAssignable(arrayPrimitives, array1)); [EOL]     assertFalse(ClassUtils.isAssignable(arrayWrappers, array1)); [EOL]     assertEquals(autoboxing, ClassUtils.isAssignable(arrayPrimitives, array2)); [EOL]     assertTrue(ClassUtils.isAssignable(arrayWrappers, array2)); [EOL] }
@Test [EOL] public void test_isAssignable_ClassArray_ClassArray() throws Exception { [EOL]     final Class<?>[] array2 = new Class[] { Object.class, Object.class }; [EOL]     final Class<?>[] array1 = new Class[] { Object.class }; [EOL]     final Class<?>[] array1s = new Class[] { String.class }; [EOL]     final Class<?>[] array0 = new Class[] {}; [EOL]     final Class<?>[] arrayPrimitives = { Integer.TYPE, Boolean.TYPE }; [EOL]     final Class<?>[] arrayWrappers = { Integer.class, Boolean.class }; [EOL]     assertFalse(ClassUtils.isAssignable(array1, array2)); [EOL]     assertFalse(ClassUtils.isAssignable(null, array2)); [EOL]     assertTrue(ClassUtils.isAssignable(null, array0)); [EOL]     assertTrue(ClassUtils.isAssignable(array0, array0)); [EOL]     assertTrue(ClassUtils.isAssignable(array0, (Class<?>[]) null)); [EOL]     assertTrue(ClassUtils.isAssignable((Class[]) null, (Class[]) null)); [EOL]     assertFalse(ClassUtils.isAssignable(array1, array1s)); [EOL]     assertTrue(ClassUtils.isAssignable(array1s, array1s)); [EOL]     assertTrue(ClassUtils.isAssignable(array1s, array1)); [EOL]     final boolean autoboxing = SystemUtils.isJavaVersionAtLeast(JAVA_1_5); [EOL]     assertEquals(autoboxing, ClassUtils.isAssignable(arrayPrimitives, arrayWrappers)); [EOL]     assertEquals(autoboxing, ClassUtils.isAssignable(arrayWrappers, arrayPrimitives)); [EOL]     assertFalse(ClassUtils.isAssignable(arrayPrimitives, array1)); [EOL]     assertFalse(ClassUtils.isAssignable(arrayWrappers, array1)); [EOL]     assertEquals(autoboxing, ClassUtils.isAssignable(arrayPrimitives, array2)); [EOL]     assertTrue(ClassUtils.isAssignable(arrayWrappers, array2)); [EOL] }
@Test [EOL] public void test_isAssignable_ClassArray_ClassArray() throws Exception { [EOL]     final Class<?>[] array2 = new Class[] { Object.class, Object.class }; [EOL]     final Class<?>[] array1 = new Class[] { Object.class }; [EOL]     final Class<?>[] array1s = new Class[] { String.class }; [EOL]     final Class<?>[] array0 = new Class[] {}; [EOL]     final Class<?>[] arrayPrimitives = { Integer.TYPE, Boolean.TYPE }; [EOL]     final Class<?>[] arrayWrappers = { Integer.class, Boolean.class }; [EOL]     assertFalse(ClassUtils.isAssignable(array1, array2)); [EOL]     assertFalse(ClassUtils.isAssignable(null, array2)); [EOL]     assertTrue(ClassUtils.isAssignable(null, array0)); [EOL]     assertTrue(ClassUtils.isAssignable(array0, array0)); [EOL]     assertTrue(ClassUtils.isAssignable(array0, (Class<?>[]) null)); [EOL]     assertTrue(ClassUtils.isAssignable((Class[]) null, (Class[]) null)); [EOL]     assertFalse(ClassUtils.isAssignable(array1, array1s)); [EOL]     assertTrue(ClassUtils.isAssignable(array1s, array1s)); [EOL]     assertTrue(ClassUtils.isAssignable(array1s, array1)); [EOL]     final boolean autoboxing = SystemUtils.isJavaVersionAtLeast(JAVA_1_5); [EOL]     assertEquals(autoboxing, ClassUtils.isAssignable(arrayPrimitives, arrayWrappers)); [EOL]     assertEquals(autoboxing, ClassUtils.isAssignable(arrayWrappers, arrayPrimitives)); [EOL]     assertFalse(ClassUtils.isAssignable(arrayPrimitives, array1)); [EOL]     assertFalse(ClassUtils.isAssignable(arrayWrappers, array1)); [EOL]     assertEquals(autoboxing, ClassUtils.isAssignable(arrayPrimitives, array2)); [EOL]     assertTrue(ClassUtils.isAssignable(arrayWrappers, array2)); [EOL] }
@Test [EOL] public void test_isAssignable_ClassArray_ClassArray_NoAutoboxing() throws Exception { [EOL]     final Class<?>[] array2 = new Class[] { Object.class, Object.class }; [EOL]     final Class<?>[] array1 = new Class[] { Object.class }; [EOL]     final Class<?>[] array1s = new Class[] { String.class }; [EOL]     final Class<?>[] array0 = new Class[] {}; [EOL]     final Class<?>[] arrayPrimitives = { Integer.TYPE, Boolean.TYPE }; [EOL]     final Class<?>[] arrayWrappers = { Integer.class, Boolean.class }; [EOL]     assertFalse(ClassUtils.isAssignable(array1, array2, false)); [EOL]     assertFalse(ClassUtils.isAssignable(null, array2, false)); [EOL]     assertTrue(ClassUtils.isAssignable(null, array0, false)); [EOL]     assertTrue(ClassUtils.isAssignable(array0, array0, false)); [EOL]     assertTrue(ClassUtils.isAssignable(array0, null, false)); [EOL]     assertTrue(ClassUtils.isAssignable((Class[]) null, (Class[]) null, false)); [EOL]     assertFalse(ClassUtils.isAssignable(array1, array1s, false)); [EOL]     assertTrue(ClassUtils.isAssignable(array1s, array1s, false)); [EOL]     assertTrue(ClassUtils.isAssignable(array1s, array1, false)); [EOL]     assertFalse(ClassUtils.isAssignable(arrayPrimitives, arrayWrappers, false)); [EOL]     assertFalse(ClassUtils.isAssignable(arrayWrappers, arrayPrimitives, false)); [EOL]     assertFalse(ClassUtils.isAssignable(arrayPrimitives, array1, false)); [EOL]     assertFalse(ClassUtils.isAssignable(arrayWrappers, array1, false)); [EOL]     assertTrue(ClassUtils.isAssignable(arrayWrappers, array2, false)); [EOL]     assertFalse(ClassUtils.isAssignable(arrayPrimitives, array2, false)); [EOL] }
@Test [EOL] public void test_isAssignable_ClassArray_ClassArray_NoAutoboxing() throws Exception { [EOL]     final Class<?>[] array2 = new Class[] { Object.class, Object.class }; [EOL]     final Class<?>[] array1 = new Class[] { Object.class }; [EOL]     final Class<?>[] array1s = new Class[] { String.class }; [EOL]     final Class<?>[] array0 = new Class[] {}; [EOL]     final Class<?>[] arrayPrimitives = { Integer.TYPE, Boolean.TYPE }; [EOL]     final Class<?>[] arrayWrappers = { Integer.class, Boolean.class }; [EOL]     assertFalse(ClassUtils.isAssignable(array1, array2, false)); [EOL]     assertFalse(ClassUtils.isAssignable(null, array2, false)); [EOL]     assertTrue(ClassUtils.isAssignable(null, array0, false)); [EOL]     assertTrue(ClassUtils.isAssignable(array0, array0, false)); [EOL]     assertTrue(ClassUtils.isAssignable(array0, null, false)); [EOL]     assertTrue(ClassUtils.isAssignable((Class[]) null, (Class[]) null, false)); [EOL]     assertFalse(ClassUtils.isAssignable(array1, array1s, false)); [EOL]     assertTrue(ClassUtils.isAssignable(array1s, array1s, false)); [EOL]     assertTrue(ClassUtils.isAssignable(array1s, array1, false)); [EOL]     assertFalse(ClassUtils.isAssignable(arrayPrimitives, arrayWrappers, false)); [EOL]     assertFalse(ClassUtils.isAssignable(arrayWrappers, arrayPrimitives, false)); [EOL]     assertFalse(ClassUtils.isAssignable(arrayPrimitives, array1, false)); [EOL]     assertFalse(ClassUtils.isAssignable(arrayWrappers, array1, false)); [EOL]     assertTrue(ClassUtils.isAssignable(arrayWrappers, array2, false)); [EOL]     assertFalse(ClassUtils.isAssignable(arrayPrimitives, array2, false)); [EOL] }
@Test [EOL] public void test_isAssignable_ClassArray_ClassArray_NoAutoboxing() throws Exception { [EOL]     final Class<?>[] array2 = new Class[] { Object.class, Object.class }; [EOL]     final Class<?>[] array1 = new Class[] { Object.class }; [EOL]     final Class<?>[] array1s = new Class[] { String.class }; [EOL]     final Class<?>[] array0 = new Class[] {}; [EOL]     final Class<?>[] arrayPrimitives = { Integer.TYPE, Boolean.TYPE }; [EOL]     final Class<?>[] arrayWrappers = { Integer.class, Boolean.class }; [EOL]     assertFalse(ClassUtils.isAssignable(array1, array2, false)); [EOL]     assertFalse(ClassUtils.isAssignable(null, array2, false)); [EOL]     assertTrue(ClassUtils.isAssignable(null, array0, false)); [EOL]     assertTrue(ClassUtils.isAssignable(array0, array0, false)); [EOL]     assertTrue(ClassUtils.isAssignable(array0, null, false)); [EOL]     assertTrue(ClassUtils.isAssignable((Class[]) null, (Class[]) null, false)); [EOL]     assertFalse(ClassUtils.isAssignable(array1, array1s, false)); [EOL]     assertTrue(ClassUtils.isAssignable(array1s, array1s, false)); [EOL]     assertTrue(ClassUtils.isAssignable(array1s, array1, false)); [EOL]     assertFalse(ClassUtils.isAssignable(arrayPrimitives, arrayWrappers, false)); [EOL]     assertFalse(ClassUtils.isAssignable(arrayWrappers, arrayPrimitives, false)); [EOL]     assertFalse(ClassUtils.isAssignable(arrayPrimitives, array1, false)); [EOL]     assertFalse(ClassUtils.isAssignable(arrayWrappers, array1, false)); [EOL]     assertTrue(ClassUtils.isAssignable(arrayWrappers, array2, false)); [EOL]     assertFalse(ClassUtils.isAssignable(arrayPrimitives, array2, false)); [EOL] }
@Test [EOL] public void testGetClassWithArrayClasses() throws Exception { [EOL]     assertGetClassReturnsClass(String[].class); [EOL]     assertGetClassReturnsClass(int[].class); [EOL]     assertGetClassReturnsClass(long[].class); [EOL]     assertGetClassReturnsClass(short[].class); [EOL]     assertGetClassReturnsClass(byte[].class); [EOL]     assertGetClassReturnsClass(char[].class); [EOL]     assertGetClassReturnsClass(float[].class); [EOL]     assertGetClassReturnsClass(double[].class); [EOL]     assertGetClassReturnsClass(boolean[].class); [EOL] }
@Test [EOL] public void testGetClassWithArrayClasses() throws Exception { [EOL]     assertGetClassReturnsClass(String[].class); [EOL]     assertGetClassReturnsClass(int[].class); [EOL]     assertGetClassReturnsClass(long[].class); [EOL]     assertGetClassReturnsClass(short[].class); [EOL]     assertGetClassReturnsClass(byte[].class); [EOL]     assertGetClassReturnsClass(char[].class); [EOL]     assertGetClassReturnsClass(float[].class); [EOL]     assertGetClassReturnsClass(double[].class); [EOL]     assertGetClassReturnsClass(boolean[].class); [EOL] }
@Test [EOL] public void testGetClassWithArrayClasses() throws Exception { [EOL]     assertGetClassReturnsClass(String[].class); [EOL]     assertGetClassReturnsClass(int[].class); [EOL]     assertGetClassReturnsClass(long[].class); [EOL]     assertGetClassReturnsClass(short[].class); [EOL]     assertGetClassReturnsClass(byte[].class); [EOL]     assertGetClassReturnsClass(char[].class); [EOL]     assertGetClassReturnsClass(float[].class); [EOL]     assertGetClassReturnsClass(double[].class); [EOL]     assertGetClassReturnsClass(boolean[].class); [EOL] }
@Test [EOL] public void testGetClassWithArrayClasses() throws Exception { [EOL]     assertGetClassReturnsClass(String[].class); [EOL]     assertGetClassReturnsClass(int[].class); [EOL]     assertGetClassReturnsClass(long[].class); [EOL]     assertGetClassReturnsClass(short[].class); [EOL]     assertGetClassReturnsClass(byte[].class); [EOL]     assertGetClassReturnsClass(char[].class); [EOL]     assertGetClassReturnsClass(float[].class); [EOL]     assertGetClassReturnsClass(double[].class); [EOL]     assertGetClassReturnsClass(boolean[].class); [EOL] }
@Test [EOL] public void testGetClassWithArrayClasses() throws Exception { [EOL]     assertGetClassReturnsClass(String[].class); [EOL]     assertGetClassReturnsClass(int[].class); [EOL]     assertGetClassReturnsClass(long[].class); [EOL]     assertGetClassReturnsClass(short[].class); [EOL]     assertGetClassReturnsClass(byte[].class); [EOL]     assertGetClassReturnsClass(char[].class); [EOL]     assertGetClassReturnsClass(float[].class); [EOL]     assertGetClassReturnsClass(double[].class); [EOL]     assertGetClassReturnsClass(boolean[].class); [EOL] }
@Test [EOL] public void testGetClassWithArrayClasses() throws Exception { [EOL]     assertGetClassReturnsClass(String[].class); [EOL]     assertGetClassReturnsClass(int[].class); [EOL]     assertGetClassReturnsClass(long[].class); [EOL]     assertGetClassReturnsClass(short[].class); [EOL]     assertGetClassReturnsClass(byte[].class); [EOL]     assertGetClassReturnsClass(char[].class); [EOL]     assertGetClassReturnsClass(float[].class); [EOL]     assertGetClassReturnsClass(double[].class); [EOL]     assertGetClassReturnsClass(boolean[].class); [EOL] }
@Test [EOL] public void testGetClassWithArrayClasses() throws Exception { [EOL]     assertGetClassReturnsClass(String[].class); [EOL]     assertGetClassReturnsClass(int[].class); [EOL]     assertGetClassReturnsClass(long[].class); [EOL]     assertGetClassReturnsClass(short[].class); [EOL]     assertGetClassReturnsClass(byte[].class); [EOL]     assertGetClassReturnsClass(char[].class); [EOL]     assertGetClassReturnsClass(float[].class); [EOL]     assertGetClassReturnsClass(double[].class); [EOL]     assertGetClassReturnsClass(boolean[].class); [EOL] }
@Test [EOL] public void testGetClassWithArrayClasses() throws Exception { [EOL]     assertGetClassReturnsClass(String[].class); [EOL]     assertGetClassReturnsClass(int[].class); [EOL]     assertGetClassReturnsClass(long[].class); [EOL]     assertGetClassReturnsClass(short[].class); [EOL]     assertGetClassReturnsClass(byte[].class); [EOL]     assertGetClassReturnsClass(char[].class); [EOL]     assertGetClassReturnsClass(float[].class); [EOL]     assertGetClassReturnsClass(double[].class); [EOL]     assertGetClassReturnsClass(boolean[].class); [EOL] }
@Test [EOL] public void testGetClassWithArrayClasses() throws Exception { [EOL]     assertGetClassReturnsClass(String[].class); [EOL]     assertGetClassReturnsClass(int[].class); [EOL]     assertGetClassReturnsClass(long[].class); [EOL]     assertGetClassReturnsClass(short[].class); [EOL]     assertGetClassReturnsClass(byte[].class); [EOL]     assertGetClassReturnsClass(char[].class); [EOL]     assertGetClassReturnsClass(float[].class); [EOL]     assertGetClassReturnsClass(double[].class); [EOL]     assertGetClassReturnsClass(boolean[].class); [EOL] }
@Test [EOL] public void testGetClassWithArrayClasses() throws Exception { [EOL]     assertGetClassReturnsClass(String[].class); [EOL]     assertGetClassReturnsClass(int[].class); [EOL]     assertGetClassReturnsClass(long[].class); [EOL]     assertGetClassReturnsClass(short[].class); [EOL]     assertGetClassReturnsClass(byte[].class); [EOL]     assertGetClassReturnsClass(char[].class); [EOL]     assertGetClassReturnsClass(float[].class); [EOL]     assertGetClassReturnsClass(double[].class); [EOL]     assertGetClassReturnsClass(boolean[].class); [EOL] }
@Test [EOL] public void testGetClassWithArrayClasses() throws Exception { [EOL]     assertGetClassReturnsClass(String[].class); [EOL]     assertGetClassReturnsClass(int[].class); [EOL]     assertGetClassReturnsClass(long[].class); [EOL]     assertGetClassReturnsClass(short[].class); [EOL]     assertGetClassReturnsClass(byte[].class); [EOL]     assertGetClassReturnsClass(char[].class); [EOL]     assertGetClassReturnsClass(float[].class); [EOL]     assertGetClassReturnsClass(double[].class); [EOL]     assertGetClassReturnsClass(boolean[].class); [EOL] }
@Test [EOL] public void testGetClassWithArrayClasses() throws Exception { [EOL]     assertGetClassReturnsClass(String[].class); [EOL]     assertGetClassReturnsClass(int[].class); [EOL]     assertGetClassReturnsClass(long[].class); [EOL]     assertGetClassReturnsClass(short[].class); [EOL]     assertGetClassReturnsClass(byte[].class); [EOL]     assertGetClassReturnsClass(char[].class); [EOL]     assertGetClassReturnsClass(float[].class); [EOL]     assertGetClassReturnsClass(double[].class); [EOL]     assertGetClassReturnsClass(boolean[].class); [EOL] }
@Test [EOL] public void test_getPackageCanonicalName_Object() { [EOL]     assertEquals("<null>", ClassUtils.getPackageCanonicalName(null, "<null>")); [EOL]     assertEquals("org.apache.commons.lang3", ClassUtils.getPackageCanonicalName(new ClassUtils(), "<null>")); [EOL]     assertEquals("org.apache.commons.lang3", ClassUtils.getPackageCanonicalName(new ClassUtils[0], "<null>")); [EOL]     assertEquals("org.apache.commons.lang3", ClassUtils.getPackageCanonicalName(new ClassUtils[0][0], "<null>")); [EOL]     assertEquals("", ClassUtils.getPackageCanonicalName(new int[0], "<null>")); [EOL]     assertEquals("", ClassUtils.getPackageCanonicalName(new int[0][0], "<null>")); [EOL]     class Named extends Object { [EOL]     } [EOL]     assertEquals("org.apache.commons.lang3", ClassUtils.getPackageCanonicalName(new Object() { [EOL]     }, "<null>")); [EOL]     assertEquals("org.apache.commons.lang3", ClassUtils.getPackageCanonicalName(new Named(), "<null>")); [EOL]     assertEquals("org.apache.commons.lang3", ClassUtils.getPackageCanonicalName(new Inner(), "<null>")); [EOL] }
@Test [EOL] public void test_getPackageCanonicalName_Object() { [EOL]     assertEquals("<null>", ClassUtils.getPackageCanonicalName(null, "<null>")); [EOL]     assertEquals("org.apache.commons.lang3", ClassUtils.getPackageCanonicalName(new ClassUtils(), "<null>")); [EOL]     assertEquals("org.apache.commons.lang3", ClassUtils.getPackageCanonicalName(new ClassUtils[0], "<null>")); [EOL]     assertEquals("org.apache.commons.lang3", ClassUtils.getPackageCanonicalName(new ClassUtils[0][0], "<null>")); [EOL]     assertEquals("", ClassUtils.getPackageCanonicalName(new int[0], "<null>")); [EOL]     assertEquals("", ClassUtils.getPackageCanonicalName(new int[0][0], "<null>")); [EOL]     class Named extends Object { [EOL]     } [EOL]     assertEquals("org.apache.commons.lang3", ClassUtils.getPackageCanonicalName(new Object() { [EOL]     }, "<null>")); [EOL]     assertEquals("org.apache.commons.lang3", ClassUtils.getPackageCanonicalName(new Named(), "<null>")); [EOL]     assertEquals("org.apache.commons.lang3", ClassUtils.getPackageCanonicalName(new Inner(), "<null>")); [EOL] }
@Test [EOL] public void test_getPackageCanonicalName_Object() { [EOL]     assertEquals("<null>", ClassUtils.getPackageCanonicalName(null, "<null>")); [EOL]     assertEquals("org.apache.commons.lang3", ClassUtils.getPackageCanonicalName(new ClassUtils(), "<null>")); [EOL]     assertEquals("org.apache.commons.lang3", ClassUtils.getPackageCanonicalName(new ClassUtils[0], "<null>")); [EOL]     assertEquals("org.apache.commons.lang3", ClassUtils.getPackageCanonicalName(new ClassUtils[0][0], "<null>")); [EOL]     assertEquals("", ClassUtils.getPackageCanonicalName(new int[0], "<null>")); [EOL]     assertEquals("", ClassUtils.getPackageCanonicalName(new int[0][0], "<null>")); [EOL]     class Named extends Object { [EOL]     } [EOL]     assertEquals("org.apache.commons.lang3", ClassUtils.getPackageCanonicalName(new Object() { [EOL]     }, "<null>")); [EOL]     assertEquals("org.apache.commons.lang3", ClassUtils.getPackageCanonicalName(new Named(), "<null>")); [EOL]     assertEquals("org.apache.commons.lang3", ClassUtils.getPackageCanonicalName(new Inner(), "<null>")); [EOL] }
@Test [EOL] public void testStartMultipleTimes() { [EOL]     final BackgroundInitializerTestImpl init = new BackgroundInitializerTestImpl(); [EOL]     assertTrue("Wrong result for start()", init.start()); [EOL]     for (int i = 0; i < 10; i++) { [EOL]         assertFalse("Could start again", init.start()); [EOL]     } [EOL]     checkInitialize(init); [EOL] }
@Test [EOL] public void testStartMultipleTimes() { [EOL]     final BackgroundInitializerTestImpl init = new BackgroundInitializerTestImpl(); [EOL]     assertTrue("Wrong result for start()", init.start()); [EOL]     for (int i = 0; i < 10; i++) { [EOL]         assertFalse("Could start again", init.start()); [EOL]     } [EOL]     checkInitialize(init); [EOL] }
@Test [EOL] public void testStartMultipleTimes() { [EOL]     final BackgroundInitializerTestImpl init = new BackgroundInitializerTestImpl(); [EOL]     assertTrue("Wrong result for start()", init.start()); [EOL]     for (int i = 0; i < 10; i++) { [EOL]         assertFalse("Could start again", init.start()); [EOL]     } [EOL]     checkInitialize(init); [EOL] }
@Test [EOL] public void testGetRuntimeException() throws Exception { [EOL]     final BackgroundInitializerTestImpl init = new BackgroundInitializerTestImpl(); [EOL]     final RuntimeException rex = new RuntimeException(); [EOL]     init.ex = rex; [EOL]     init.start(); [EOL]     try { [EOL]         init.get(); [EOL]         fail("Exception not thrown!"); [EOL]     } catch (final Exception ex) { [EOL]         assertEquals("Runtime exception not thrown", rex, ex); [EOL]     } [EOL] }
@Test [EOL] public void testGetRuntimeException() throws Exception { [EOL]     final BackgroundInitializerTestImpl init = new BackgroundInitializerTestImpl(); [EOL]     final RuntimeException rex = new RuntimeException(); [EOL]     init.ex = rex; [EOL]     init.start(); [EOL]     try { [EOL]         init.get(); [EOL]         fail("Exception not thrown!"); [EOL]     } catch (final Exception ex) { [EOL]         assertEquals("Runtime exception not thrown", rex, ex); [EOL]     } [EOL] }
@Test [EOL] public void testGetRuntimeException() throws Exception { [EOL]     final BackgroundInitializerTestImpl init = new BackgroundInitializerTestImpl(); [EOL]     final RuntimeException rex = new RuntimeException(); [EOL]     init.ex = rex; [EOL]     init.start(); [EOL]     try { [EOL]         init.get(); [EOL]         fail("Exception not thrown!"); [EOL]     } catch (final Exception ex) { [EOL]         assertEquals("Runtime exception not thrown", rex, ex); [EOL]     } [EOL] }
@Test(expected = IllegalStateException.class) [EOL] public void testGetBeforeStart() throws ConcurrentException { [EOL]     final BackgroundInitializerTestImpl init = new BackgroundInitializerTestImpl(); [EOL]     init.get(); [EOL] }
@Test(expected = IllegalStateException.class) [EOL] public void testGetBeforeStart() throws ConcurrentException { [EOL]     final BackgroundInitializerTestImpl init = new BackgroundInitializerTestImpl(); [EOL]     init.get(); [EOL] }
@Test [EOL] public void testHandleCauseUncheckedChecked() { [EOL]     final Exception ex = new Exception("Test"); [EOL]     try { [EOL]         ConcurrentUtils.handleCauseUnchecked(new ExecutionException(ex)); [EOL]         fail("ConcurrentRuntimeException not thrown!"); [EOL]     } catch (final ConcurrentRuntimeException crex) { [EOL]         assertEquals("Wrong cause", ex, crex.getCause()); [EOL]     } [EOL] }
@Test [EOL] public void testHandleCauseUncheckedChecked() { [EOL]     final Exception ex = new Exception("Test"); [EOL]     try { [EOL]         ConcurrentUtils.handleCauseUnchecked(new ExecutionException(ex)); [EOL]         fail("ConcurrentRuntimeException not thrown!"); [EOL]     } catch (final ConcurrentRuntimeException crex) { [EOL]         assertEquals("Wrong cause", ex, crex.getCause()); [EOL]     } [EOL] }
@Test [EOL] public void testNoneLookup() { [EOL]     assertEquals(null, StrLookup.noneLookup().lookup(null)); [EOL]     assertEquals(null, StrLookup.noneLookup().lookup("")); [EOL]     assertEquals(null, StrLookup.noneLookup().lookup("any")); [EOL] }
@Test [EOL] public void testMapLookup_nullMap() { [EOL]     final Map<String, ?> map = null; [EOL]     assertEquals(null, StrLookup.mapLookup(map).lookup(null)); [EOL]     assertEquals(null, StrLookup.mapLookup(map).lookup("")); [EOL]     assertEquals(null, StrLookup.mapLookup(map).lookup("any")); [EOL] }
@Test [EOL] public void testMapLookup_nullMap() { [EOL]     final Map<String, ?> map = null; [EOL]     assertEquals(null, StrLookup.mapLookup(map).lookup(null)); [EOL]     assertEquals(null, StrLookup.mapLookup(map).lookup("")); [EOL]     assertEquals(null, StrLookup.mapLookup(map).lookup("any")); [EOL] }
@Test [EOL] public void testMapLookup_nullMap() { [EOL]     final Map<String, ?> map = null; [EOL]     assertEquals(null, StrLookup.mapLookup(map).lookup(null)); [EOL]     assertEquals(null, StrLookup.mapLookup(map).lookup("")); [EOL]     assertEquals(null, StrLookup.mapLookup(map).lookup("any")); [EOL] }
@Test [EOL] public void testMapLookup_nullMap() { [EOL]     final Map<String, ?> map = null; [EOL]     assertEquals(null, StrLookup.mapLookup(map).lookup(null)); [EOL]     assertEquals(null, StrLookup.mapLookup(map).lookup("")); [EOL]     assertEquals(null, StrLookup.mapLookup(map).lookup("any")); [EOL] }
@Test [EOL] public void testMapLookup_nullMap() { [EOL]     final Map<String, ?> map = null; [EOL]     assertEquals(null, StrLookup.mapLookup(map).lookup(null)); [EOL]     assertEquals(null, StrLookup.mapLookup(map).lookup("")); [EOL]     assertEquals(null, StrLookup.mapLookup(map).lookup("any")); [EOL] }
@Test [EOL] public void testMapLookup_nullMap() { [EOL]     final Map<String, ?> map = null; [EOL]     assertEquals(null, StrLookup.mapLookup(map).lookup(null)); [EOL]     assertEquals(null, StrLookup.mapLookup(map).lookup("")); [EOL]     assertEquals(null, StrLookup.mapLookup(map).lookup("any")); [EOL] }
@Test [EOL] public void testMapLookup_nullMap() { [EOL]     final Map<String, ?> map = null; [EOL]     assertEquals(null, StrLookup.mapLookup(map).lookup(null)); [EOL]     assertEquals(null, StrLookup.mapLookup(map).lookup("")); [EOL]     assertEquals(null, StrLookup.mapLookup(map).lookup("any")); [EOL] }
@Test [EOL] public void testHandleCauseUncheckedChecked() { [EOL]     final Exception ex = new Exception("Test"); [EOL]     try { [EOL]         ConcurrentUtils.handleCauseUnchecked(new ExecutionException(ex)); [EOL]         fail("ConcurrentRuntimeException not thrown!"); [EOL]     } catch (final ConcurrentRuntimeException crex) { [EOL]         assertEquals("Wrong cause", ex, crex.getCause()); [EOL]     } [EOL] }
@Test [EOL] public void testHandleCauseUncheckedChecked() { [EOL]     final Exception ex = new Exception("Test"); [EOL]     try { [EOL]         ConcurrentUtils.handleCauseUnchecked(new ExecutionException(ex)); [EOL]         fail("ConcurrentRuntimeException not thrown!"); [EOL]     } catch (final ConcurrentRuntimeException crex) { [EOL]         assertEquals("Wrong cause", ex, crex.getCause()); [EOL]     } [EOL] }
@Test [EOL] public void testHandleCauseUncheckedChecked() { [EOL]     final Exception ex = new Exception("Test"); [EOL]     try { [EOL]         ConcurrentUtils.handleCauseUnchecked(new ExecutionException(ex)); [EOL]         fail("ConcurrentRuntimeException not thrown!"); [EOL]     } catch (final ConcurrentRuntimeException crex) { [EOL]         assertEquals("Wrong cause", ex, crex.getCause()); [EOL]     } [EOL] }
@Test [EOL] public void testHandleCauseUncheckedChecked() { [EOL]     final Exception ex = new Exception("Test"); [EOL]     try { [EOL]         ConcurrentUtils.handleCauseUnchecked(new ExecutionException(ex)); [EOL]         fail("ConcurrentRuntimeException not thrown!"); [EOL]     } catch (final ConcurrentRuntimeException crex) { [EOL]         assertEquals("Wrong cause", ex, crex.getCause()); [EOL]     } [EOL] }
@Test [EOL] public void testHandleCauseUncheckedChecked() { [EOL]     final Exception ex = new Exception("Test"); [EOL]     try { [EOL]         ConcurrentUtils.handleCauseUnchecked(new ExecutionException(ex)); [EOL]         fail("ConcurrentRuntimeException not thrown!"); [EOL]     } catch (final ConcurrentRuntimeException crex) { [EOL]         assertEquals("Wrong cause", ex, crex.getCause()); [EOL]     } [EOL] }
@Test [EOL] public void testHandleCauseUncheckedChecked() { [EOL]     final Exception ex = new Exception("Test"); [EOL]     try { [EOL]         ConcurrentUtils.handleCauseUnchecked(new ExecutionException(ex)); [EOL]         fail("ConcurrentRuntimeException not thrown!"); [EOL]     } catch (final ConcurrentRuntimeException crex) { [EOL]         assertEquals("Wrong cause", ex, crex.getCause()); [EOL]     } [EOL] }
@Test [EOL] public void testExtractCauseUncheckedException() { [EOL]     final RuntimeException rex = new RuntimeException("Test"); [EOL]     try { [EOL]         ConcurrentUtils.extractCause(new ExecutionException(rex)); [EOL]         fail("Runtime exception not thrown!"); [EOL]     } catch (final RuntimeException r) { [EOL]         assertEquals("Wrong exception", rex, r); [EOL]     } [EOL] }
@Test [EOL] public void testExtractCauseUncheckedException() { [EOL]     final RuntimeException rex = new RuntimeException("Test"); [EOL]     try { [EOL]         ConcurrentUtils.extractCause(new ExecutionException(rex)); [EOL]         fail("Runtime exception not thrown!"); [EOL]     } catch (final RuntimeException r) { [EOL]         assertEquals("Wrong exception", rex, r); [EOL]     } [EOL] }
@Test [EOL] public void testExtractCauseUncheckedException() { [EOL]     final RuntimeException rex = new RuntimeException("Test"); [EOL]     try { [EOL]         ConcurrentUtils.extractCause(new ExecutionException(rex)); [EOL]         fail("Runtime exception not thrown!"); [EOL]     } catch (final RuntimeException r) { [EOL]         assertEquals("Wrong exception", rex, r); [EOL]     } [EOL] }
@Test [EOL] public void testCreateIfAbsentNullInit() throws ConcurrentException { [EOL]     final ConcurrentMap<String, Integer> map = new ConcurrentHashMap<String, Integer>(); [EOL]     final String key = "testKey"; [EOL]     final Integer value = 42; [EOL]     map.put(key, value); [EOL]     assertNull("Wrong result", ConcurrentUtils.createIfAbsent(map, key, null)); [EOL]     assertEquals("Map was changed", value, map.get(key)); [EOL] }
@Test [EOL] public void testCreateIfAbsentNullInit() throws ConcurrentException { [EOL]     final ConcurrentMap<String, Integer> map = new ConcurrentHashMap<String, Integer>(); [EOL]     final String key = "testKey"; [EOL]     final Integer value = 42; [EOL]     map.put(key, value); [EOL]     assertNull("Wrong result", ConcurrentUtils.createIfAbsent(map, key, null)); [EOL]     assertEquals("Map was changed", value, map.get(key)); [EOL] }
@Test [EOL] public void testCreateIfAbsentNullInit() throws ConcurrentException { [EOL]     final ConcurrentMap<String, Integer> map = new ConcurrentHashMap<String, Integer>(); [EOL]     final String key = "testKey"; [EOL]     final Integer value = 42; [EOL]     map.put(key, value); [EOL]     assertNull("Wrong result", ConcurrentUtils.createIfAbsent(map, key, null)); [EOL]     assertEquals("Map was changed", value, map.get(key)); [EOL] }
@Test [EOL] public void testCreateIfAbsentNullInit() throws ConcurrentException { [EOL]     final ConcurrentMap<String, Integer> map = new ConcurrentHashMap<String, Integer>(); [EOL]     final String key = "testKey"; [EOL]     final Integer value = 42; [EOL]     map.put(key, value); [EOL]     assertNull("Wrong result", ConcurrentUtils.createIfAbsent(map, key, null)); [EOL]     assertEquals("Map was changed", value, map.get(key)); [EOL] }
@Test [EOL] public void testLANG_832() throws Exception { [EOL]     testSdfAndFdp("'d'd", "d3", false); [EOL]     testSdfAndFdp("'d'd'", "d3", true); [EOL] }
@Test [EOL] public void testPatternMatches() { [EOL]     final DateParser parser = getInstance(yMdHmsSZ); [EOL]     assertEquals(yMdHmsSZ, parser.getPattern()); [EOL] }
@Test [EOL] public void testReplaceSolo() { [EOL]     doTestReplace("quick brown fox", "${animal}", false); [EOL] }
@Test [EOL] public void testReplaceSolo() { [EOL]     doTestReplace("quick brown fox", "${animal}", false); [EOL] }
@Test [EOL] public void testReplaceSolo() { [EOL]     doTestReplace("quick brown fox", "${animal}", false); [EOL] }
@Test [EOL] public void testReplaceSolo() { [EOL]     doTestReplace("quick brown fox", "${animal}", false); [EOL] }
@Test [EOL] public void testReplaceSolo() { [EOL]     doTestReplace("quick brown fox", "${animal}", false); [EOL] }
@Test [EOL] public void testReplaceSolo() { [EOL]     doTestReplace("quick brown fox", "${animal}", false); [EOL] }
@Test [EOL] public void testReplaceSolo() { [EOL]     doTestReplace("quick brown fox", "${animal}", false); [EOL] }
@Test [EOL] public void testReplaceSolo() { [EOL]     doTestReplace("quick brown fox", "${animal}", false); [EOL] }
@Test [EOL] public void testReplaceSolo() { [EOL]     doTestReplace("quick brown fox", "${animal}", false); [EOL] }
@Test [EOL] public void testReplacePartialString_noReplace() { [EOL]     final StrSubstitutor sub = new StrSubstitutor(); [EOL]     assertEquals("${animal} jumps", sub.replace("The ${animal} jumps over the ${target}.", 4, 15)); [EOL] }
@Test [EOL] public void testReplacePartialString_noReplace() { [EOL]     final StrSubstitutor sub = new StrSubstitutor(); [EOL]     assertEquals("${animal} jumps", sub.replace("The ${animal} jumps over the ${target}.", 4, 15)); [EOL] }
@Test [EOL] public void testReplacePartialString_noReplace() { [EOL]     final StrSubstitutor sub = new StrSubstitutor(); [EOL]     assertEquals("${animal} jumps", sub.replace("The ${animal} jumps over the ${target}.", 4, 15)); [EOL] }
@Test [EOL] public void testReplacePartialString_noReplace() { [EOL]     final StrSubstitutor sub = new StrSubstitutor(); [EOL]     assertEquals("${animal} jumps", sub.replace("The ${animal} jumps over the ${target}.", 4, 15)); [EOL] }
@Test [EOL] public void testReplacePartialString_noReplace() { [EOL]     final StrSubstitutor sub = new StrSubstitutor(); [EOL]     assertEquals("${animal} jumps", sub.replace("The ${animal} jumps over the ${target}.", 4, 15)); [EOL] }
@Test [EOL] public void testReplacePartialString_noReplace() { [EOL]     final StrSubstitutor sub = new StrSubstitutor(); [EOL]     assertEquals("${animal} jumps", sub.replace("The ${animal} jumps over the ${target}.", 4, 15)); [EOL] }
@Test [EOL] public void testReplaceSolo() { [EOL]     doTestReplace("quick brown fox", "${animal}", false); [EOL] }
@Test [EOL] public void testReplaceSolo() { [EOL]     doTestReplace("quick brown fox", "${animal}", false); [EOL] }
@Test [EOL] public void testReplaceSolo() { [EOL]     doTestReplace("quick brown fox", "${animal}", false); [EOL] }
@Test [EOL] public void testReplaceSolo() { [EOL]     doTestReplace("quick brown fox", "${animal}", false); [EOL] }
@Test [EOL] public void testReplaceSolo() { [EOL]     doTestReplace("quick brown fox", "${animal}", false); [EOL] }
@Test [EOL] public void testReplaceSolo() { [EOL]     doTestReplace("quick brown fox", "${animal}", false); [EOL] }
@Test [EOL] public void testReplaceSolo() { [EOL]     doTestReplace("quick brown fox", "${animal}", false); [EOL] }
@Test [EOL] public void testReplaceSolo() { [EOL]     doTestReplace("quick brown fox", "${animal}", false); [EOL] }
@Test [EOL] public void testReplaceSolo() { [EOL]     doTestReplace("quick brown fox", "${animal}", false); [EOL] }
@Test [EOL] public void testReplaceSolo() { [EOL]     doTestReplace("quick brown fox", "${animal}", false); [EOL] }
@Test [EOL] public void testReplaceSolo() { [EOL]     doTestReplace("quick brown fox", "${animal}", false); [EOL] }
@Test [EOL] public void testReplaceSolo() { [EOL]     doTestReplace("quick brown fox", "${animal}", false); [EOL] }
@Test [EOL] public void testReplaceSolo() { [EOL]     doTestReplace("quick brown fox", "${animal}", false); [EOL] }
@Test [EOL] public void testReplaceSolo() { [EOL]     doTestReplace("quick brown fox", "${animal}", false); [EOL] }
@Test [EOL] public void testReplaceSolo() { [EOL]     doTestReplace("quick brown fox", "${animal}", false); [EOL] }
@Test [EOL] public void testReplaceSolo() { [EOL]     doTestReplace("quick brown fox", "${animal}", false); [EOL] }
@Test [EOL] public void testReplaceSolo() { [EOL]     doTestReplace("quick brown fox", "${animal}", false); [EOL] }
@Test [EOL] public void testReplaceSolo() { [EOL]     doTestReplace("quick brown fox", "${animal}", false); [EOL] }
@Test [EOL] public void testReplaceSolo() { [EOL]     doTestReplace("quick brown fox", "${animal}", false); [EOL] }
@Test [EOL] public void testReplaceSolo() { [EOL]     doTestReplace("quick brown fox", "${animal}", false); [EOL] }
@Test [EOL] public void testReplaceSolo() { [EOL]     doTestReplace("quick brown fox", "${animal}", false); [EOL] }
@Test [EOL] public void testReplaceSolo() { [EOL]     doTestReplace("quick brown fox", "${animal}", false); [EOL] }
@Test [EOL] public void testReplaceSolo() { [EOL]     doTestReplace("quick brown fox", "${animal}", false); [EOL] }
@Test [EOL] public void testReplaceSolo() { [EOL]     doTestReplace("quick brown fox", "${animal}", false); [EOL] }
@Test [EOL] public void testReplaceSolo() { [EOL]     doTestReplace("quick brown fox", "${animal}", false); [EOL] }
@Test [EOL] public void testReplaceSolo() { [EOL]     doTestReplace("quick brown fox", "${animal}", false); [EOL] }
@Test [EOL] public void testReplaceSolo() { [EOL]     doTestReplace("quick brown fox", "${animal}", false); [EOL] }
@Test [EOL] public void testReplaceSolo() { [EOL]     doTestReplace("quick brown fox", "${animal}", false); [EOL] }
@Test [EOL] public void testReplaceSolo() { [EOL]     doTestReplace("quick brown fox", "${animal}", false); [EOL] }
@Test [EOL] public void testReplaceSolo() { [EOL]     doTestReplace("quick brown fox", "${animal}", false); [EOL] }
@Test [EOL] public void testReplaceSolo() { [EOL]     doTestReplace("quick brown fox", "${animal}", false); [EOL] }
@Test [EOL] public void testReplaceSolo() { [EOL]     doTestReplace("quick brown fox", "${animal}", false); [EOL] }
@Test [EOL] public void testReplaceSolo() { [EOL]     doTestReplace("quick brown fox", "${animal}", false); [EOL] }
@Test [EOL] public void testReplaceSolo() { [EOL]     doTestReplace("quick brown fox", "${animal}", false); [EOL] }
@Test [EOL] public void testReplaceSolo() { [EOL]     doTestReplace("quick brown fox", "${animal}", false); [EOL] }
@Test [EOL] public void testReplaceSolo() { [EOL]     doTestReplace("quick brown fox", "${animal}", false); [EOL] }
@Test [EOL] public void testReplaceSolo() { [EOL]     doTestReplace("quick brown fox", "${animal}", false); [EOL] }
@Test [EOL] public void testReplaceSolo() { [EOL]     doTestReplace("quick brown fox", "${animal}", false); [EOL] }
@Test [EOL] public void testReplaceSolo() { [EOL]     doTestReplace("quick brown fox", "${animal}", false); [EOL] }
@Test [EOL] public void testReplaceSolo() { [EOL]     doTestReplace("quick brown fox", "${animal}", false); [EOL] }
@Test [EOL] public void testReplaceSolo() { [EOL]     doTestReplace("quick brown fox", "${animal}", false); [EOL] }
@Test [EOL] public void testReplaceSolo() { [EOL]     doTestReplace("quick brown fox", "${animal}", false); [EOL] }
@Test [EOL] public void testReplaceSolo() { [EOL]     doTestReplace("quick brown fox", "${animal}", false); [EOL] }
@Test [EOL] public void testReplaceSolo() { [EOL]     doTestReplace("quick brown fox", "${animal}", false); [EOL] }
@Test [EOL] public void testReplaceSolo() { [EOL]     doTestReplace("quick brown fox", "${animal}", false); [EOL] }
@Test [EOL] public void testReplaceSolo() { [EOL]     doTestReplace("quick brown fox", "${animal}", false); [EOL] }
@Test [EOL] public void testReplaceSolo() { [EOL]     doTestReplace("quick brown fox", "${animal}", false); [EOL] }
@Test [EOL] public void testReplaceSolo() { [EOL]     doTestReplace("quick brown fox", "${animal}", false); [EOL] }
@Test [EOL] public void testReplaceSolo() { [EOL]     doTestReplace("quick brown fox", "${animal}", false); [EOL] }
@Test [EOL] public void testReplaceSolo() { [EOL]     doTestReplace("quick brown fox", "${animal}", false); [EOL] }
@Test [EOL] public void testReplaceSolo() { [EOL]     doTestReplace("quick brown fox", "${animal}", false); [EOL] }
@Test [EOL] public void testReplaceSolo() { [EOL]     doTestReplace("quick brown fox", "${animal}", false); [EOL] }
@Test [EOL] public void testReplaceSolo() { [EOL]     doTestReplace("quick brown fox", "${animal}", false); [EOL] }
@Test [EOL] public void testReplaceSolo() { [EOL]     doTestReplace("quick brown fox", "${animal}", false); [EOL] }
@Test [EOL] public void testReplaceSolo() { [EOL]     doTestReplace("quick brown fox", "${animal}", false); [EOL] }
@Test [EOL] public void testReplaceSolo() { [EOL]     doTestReplace("quick brown fox", "${animal}", false); [EOL] }
@Test [EOL] public void testReplaceSolo() { [EOL]     doTestReplace("quick brown fox", "${animal}", false); [EOL] }
@Test [EOL] public void testReplaceSolo() { [EOL]     doTestReplace("quick brown fox", "${animal}", false); [EOL] }
@Test [EOL] public void testReplaceSolo() { [EOL]     doTestReplace("quick brown fox", "${animal}", false); [EOL] }
@Test [EOL] public void testReplaceSolo() { [EOL]     doTestReplace("quick brown fox", "${animal}", false); [EOL] }
@Test [EOL] public void testReplaceSolo() { [EOL]     doTestReplace("quick brown fox", "${animal}", false); [EOL] }
@Test [EOL] public void testReplaceSolo() { [EOL]     doTestReplace("quick brown fox", "${animal}", false); [EOL] }
@Test [EOL] public void testReplaceSolo() { [EOL]     doTestReplace("quick brown fox", "${animal}", false); [EOL] }
@Test [EOL] public void testReplaceSolo() { [EOL]     doTestReplace("quick brown fox", "${animal}", false); [EOL] }
@Test [EOL] public void testReplaceSolo() { [EOL]     doTestReplace("quick brown fox", "${animal}", false); [EOL] }
@Test [EOL] public void testReplaceSolo() { [EOL]     doTestReplace("quick brown fox", "${animal}", false); [EOL] }
@Test [EOL] public void testReplaceSolo() { [EOL]     doTestReplace("quick brown fox", "${animal}", false); [EOL] }
@Test [EOL] public void testReducedFactory_int_int() { [EOL]     Fraction f = null; [EOL]     f = Fraction.getReducedFraction(0, 1); [EOL]     assertEquals(0, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL]     f = Fraction.getReducedFraction(1, 1); [EOL]     assertEquals(1, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL]     f = Fraction.getReducedFraction(2, 1); [EOL]     assertEquals(2, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL]     f = Fraction.getReducedFraction(22, 7); [EOL]     assertEquals(22, f.getNumerator()); [EOL]     assertEquals(7, f.getDenominator()); [EOL]     f = Fraction.getReducedFraction(-6, 10); [EOL]     assertEquals(-3, f.getNumerator()); [EOL]     assertEquals(5, f.getDenominator()); [EOL]     f = Fraction.getReducedFraction(6, -10); [EOL]     assertEquals(-3, f.getNumerator()); [EOL]     assertEquals(5, f.getDenominator()); [EOL]     f = Fraction.getReducedFraction(-6, -10); [EOL]     assertEquals(3, f.getNumerator()); [EOL]     assertEquals(5, f.getDenominator()); [EOL]     try { [EOL]         f = Fraction.getReducedFraction(1, 0); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     try { [EOL]         f = Fraction.getReducedFraction(2, 0); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     try { [EOL]         f = Fraction.getReducedFraction(-3, 0); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     f = Fraction.getReducedFraction(0, 2); [EOL]     assertEquals(0, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL]     f = Fraction.getReducedFraction(2, 2); [EOL]     assertEquals(1, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL]     f = Fraction.getReducedFraction(2, 4); [EOL]     assertEquals(1, f.getNumerator()); [EOL]     assertEquals(2, f.getDenominator()); [EOL]     f = Fraction.getReducedFraction(15, 10); [EOL]     assertEquals(3, f.getNumerator()); [EOL]     assertEquals(2, f.getDenominator()); [EOL]     f = Fraction.getReducedFraction(121, 22); [EOL]     assertEquals(11, f.getNumerator()); [EOL]     assertEquals(2, f.getDenominator()); [EOL]     f = Fraction.getReducedFraction(-2, Integer.MIN_VALUE); [EOL]     assertEquals(1, f.getNumerator()); [EOL]     assertEquals(-(Integer.MIN_VALUE / 2), f.getDenominator()); [EOL]     try { [EOL]         f = Fraction.getReducedFraction(-7, Integer.MIN_VALUE); [EOL]         fail("Expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     f = Fraction.getReducedFraction(Integer.MIN_VALUE, 2); [EOL]     assertEquals(Integer.MIN_VALUE / 2, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL] }
@Test [EOL] public void testReducedFactory_int_int() { [EOL]     Fraction f = null; [EOL]     f = Fraction.getReducedFraction(0, 1); [EOL]     assertEquals(0, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL]     f = Fraction.getReducedFraction(1, 1); [EOL]     assertEquals(1, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL]     f = Fraction.getReducedFraction(2, 1); [EOL]     assertEquals(2, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL]     f = Fraction.getReducedFraction(22, 7); [EOL]     assertEquals(22, f.getNumerator()); [EOL]     assertEquals(7, f.getDenominator()); [EOL]     f = Fraction.getReducedFraction(-6, 10); [EOL]     assertEquals(-3, f.getNumerator()); [EOL]     assertEquals(5, f.getDenominator()); [EOL]     f = Fraction.getReducedFraction(6, -10); [EOL]     assertEquals(-3, f.getNumerator()); [EOL]     assertEquals(5, f.getDenominator()); [EOL]     f = Fraction.getReducedFraction(-6, -10); [EOL]     assertEquals(3, f.getNumerator()); [EOL]     assertEquals(5, f.getDenominator()); [EOL]     try { [EOL]         f = Fraction.getReducedFraction(1, 0); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     try { [EOL]         f = Fraction.getReducedFraction(2, 0); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     try { [EOL]         f = Fraction.getReducedFraction(-3, 0); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     f = Fraction.getReducedFraction(0, 2); [EOL]     assertEquals(0, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL]     f = Fraction.getReducedFraction(2, 2); [EOL]     assertEquals(1, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL]     f = Fraction.getReducedFraction(2, 4); [EOL]     assertEquals(1, f.getNumerator()); [EOL]     assertEquals(2, f.getDenominator()); [EOL]     f = Fraction.getReducedFraction(15, 10); [EOL]     assertEquals(3, f.getNumerator()); [EOL]     assertEquals(2, f.getDenominator()); [EOL]     f = Fraction.getReducedFraction(121, 22); [EOL]     assertEquals(11, f.getNumerator()); [EOL]     assertEquals(2, f.getDenominator()); [EOL]     f = Fraction.getReducedFraction(-2, Integer.MIN_VALUE); [EOL]     assertEquals(1, f.getNumerator()); [EOL]     assertEquals(-(Integer.MIN_VALUE / 2), f.getDenominator()); [EOL]     try { [EOL]         f = Fraction.getReducedFraction(-7, Integer.MIN_VALUE); [EOL]         fail("Expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     f = Fraction.getReducedFraction(Integer.MIN_VALUE, 2); [EOL]     assertEquals(Integer.MIN_VALUE / 2, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL] }
@Test [EOL] public void testReducedFactory_int_int() { [EOL]     Fraction f = null; [EOL]     f = Fraction.getReducedFraction(0, 1); [EOL]     assertEquals(0, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL]     f = Fraction.getReducedFraction(1, 1); [EOL]     assertEquals(1, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL]     f = Fraction.getReducedFraction(2, 1); [EOL]     assertEquals(2, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL]     f = Fraction.getReducedFraction(22, 7); [EOL]     assertEquals(22, f.getNumerator()); [EOL]     assertEquals(7, f.getDenominator()); [EOL]     f = Fraction.getReducedFraction(-6, 10); [EOL]     assertEquals(-3, f.getNumerator()); [EOL]     assertEquals(5, f.getDenominator()); [EOL]     f = Fraction.getReducedFraction(6, -10); [EOL]     assertEquals(-3, f.getNumerator()); [EOL]     assertEquals(5, f.getDenominator()); [EOL]     f = Fraction.getReducedFraction(-6, -10); [EOL]     assertEquals(3, f.getNumerator()); [EOL]     assertEquals(5, f.getDenominator()); [EOL]     try { [EOL]         f = Fraction.getReducedFraction(1, 0); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     try { [EOL]         f = Fraction.getReducedFraction(2, 0); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     try { [EOL]         f = Fraction.getReducedFraction(-3, 0); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     f = Fraction.getReducedFraction(0, 2); [EOL]     assertEquals(0, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL]     f = Fraction.getReducedFraction(2, 2); [EOL]     assertEquals(1, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL]     f = Fraction.getReducedFraction(2, 4); [EOL]     assertEquals(1, f.getNumerator()); [EOL]     assertEquals(2, f.getDenominator()); [EOL]     f = Fraction.getReducedFraction(15, 10); [EOL]     assertEquals(3, f.getNumerator()); [EOL]     assertEquals(2, f.getDenominator()); [EOL]     f = Fraction.getReducedFraction(121, 22); [EOL]     assertEquals(11, f.getNumerator()); [EOL]     assertEquals(2, f.getDenominator()); [EOL]     f = Fraction.getReducedFraction(-2, Integer.MIN_VALUE); [EOL]     assertEquals(1, f.getNumerator()); [EOL]     assertEquals(-(Integer.MIN_VALUE / 2), f.getDenominator()); [EOL]     try { [EOL]         f = Fraction.getReducedFraction(-7, Integer.MIN_VALUE); [EOL]         fail("Expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     f = Fraction.getReducedFraction(Integer.MIN_VALUE, 2); [EOL]     assertEquals(Integer.MIN_VALUE / 2, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL] }
@Test [EOL] public void testReducedFactory_int_int() { [EOL]     Fraction f = null; [EOL]     f = Fraction.getReducedFraction(0, 1); [EOL]     assertEquals(0, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL]     f = Fraction.getReducedFraction(1, 1); [EOL]     assertEquals(1, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL]     f = Fraction.getReducedFraction(2, 1); [EOL]     assertEquals(2, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL]     f = Fraction.getReducedFraction(22, 7); [EOL]     assertEquals(22, f.getNumerator()); [EOL]     assertEquals(7, f.getDenominator()); [EOL]     f = Fraction.getReducedFraction(-6, 10); [EOL]     assertEquals(-3, f.getNumerator()); [EOL]     assertEquals(5, f.getDenominator()); [EOL]     f = Fraction.getReducedFraction(6, -10); [EOL]     assertEquals(-3, f.getNumerator()); [EOL]     assertEquals(5, f.getDenominator()); [EOL]     f = Fraction.getReducedFraction(-6, -10); [EOL]     assertEquals(3, f.getNumerator()); [EOL]     assertEquals(5, f.getDenominator()); [EOL]     try { [EOL]         f = Fraction.getReducedFraction(1, 0); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     try { [EOL]         f = Fraction.getReducedFraction(2, 0); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     try { [EOL]         f = Fraction.getReducedFraction(-3, 0); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     f = Fraction.getReducedFraction(0, 2); [EOL]     assertEquals(0, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL]     f = Fraction.getReducedFraction(2, 2); [EOL]     assertEquals(1, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL]     f = Fraction.getReducedFraction(2, 4); [EOL]     assertEquals(1, f.getNumerator()); [EOL]     assertEquals(2, f.getDenominator()); [EOL]     f = Fraction.getReducedFraction(15, 10); [EOL]     assertEquals(3, f.getNumerator()); [EOL]     assertEquals(2, f.getDenominator()); [EOL]     f = Fraction.getReducedFraction(121, 22); [EOL]     assertEquals(11, f.getNumerator()); [EOL]     assertEquals(2, f.getDenominator()); [EOL]     f = Fraction.getReducedFraction(-2, Integer.MIN_VALUE); [EOL]     assertEquals(1, f.getNumerator()); [EOL]     assertEquals(-(Integer.MIN_VALUE / 2), f.getDenominator()); [EOL]     try { [EOL]         f = Fraction.getReducedFraction(-7, Integer.MIN_VALUE); [EOL]         fail("Expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     f = Fraction.getReducedFraction(Integer.MIN_VALUE, 2); [EOL]     assertEquals(Integer.MIN_VALUE / 2, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL] }
@Test [EOL] public void testReducedFactory_int_int() { [EOL]     Fraction f = null; [EOL]     f = Fraction.getReducedFraction(0, 1); [EOL]     assertEquals(0, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL]     f = Fraction.getReducedFraction(1, 1); [EOL]     assertEquals(1, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL]     f = Fraction.getReducedFraction(2, 1); [EOL]     assertEquals(2, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL]     f = Fraction.getReducedFraction(22, 7); [EOL]     assertEquals(22, f.getNumerator()); [EOL]     assertEquals(7, f.getDenominator()); [EOL]     f = Fraction.getReducedFraction(-6, 10); [EOL]     assertEquals(-3, f.getNumerator()); [EOL]     assertEquals(5, f.getDenominator()); [EOL]     f = Fraction.getReducedFraction(6, -10); [EOL]     assertEquals(-3, f.getNumerator()); [EOL]     assertEquals(5, f.getDenominator()); [EOL]     f = Fraction.getReducedFraction(-6, -10); [EOL]     assertEquals(3, f.getNumerator()); [EOL]     assertEquals(5, f.getDenominator()); [EOL]     try { [EOL]         f = Fraction.getReducedFraction(1, 0); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     try { [EOL]         f = Fraction.getReducedFraction(2, 0); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     try { [EOL]         f = Fraction.getReducedFraction(-3, 0); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     f = Fraction.getReducedFraction(0, 2); [EOL]     assertEquals(0, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL]     f = Fraction.getReducedFraction(2, 2); [EOL]     assertEquals(1, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL]     f = Fraction.getReducedFraction(2, 4); [EOL]     assertEquals(1, f.getNumerator()); [EOL]     assertEquals(2, f.getDenominator()); [EOL]     f = Fraction.getReducedFraction(15, 10); [EOL]     assertEquals(3, f.getNumerator()); [EOL]     assertEquals(2, f.getDenominator()); [EOL]     f = Fraction.getReducedFraction(121, 22); [EOL]     assertEquals(11, f.getNumerator()); [EOL]     assertEquals(2, f.getDenominator()); [EOL]     f = Fraction.getReducedFraction(-2, Integer.MIN_VALUE); [EOL]     assertEquals(1, f.getNumerator()); [EOL]     assertEquals(-(Integer.MIN_VALUE / 2), f.getDenominator()); [EOL]     try { [EOL]         f = Fraction.getReducedFraction(-7, Integer.MIN_VALUE); [EOL]         fail("Expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     f = Fraction.getReducedFraction(Integer.MIN_VALUE, 2); [EOL]     assertEquals(Integer.MIN_VALUE / 2, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL] }
@Test [EOL] public void testReducedFactory_int_int() { [EOL]     Fraction f = null; [EOL]     f = Fraction.getReducedFraction(0, 1); [EOL]     assertEquals(0, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL]     f = Fraction.getReducedFraction(1, 1); [EOL]     assertEquals(1, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL]     f = Fraction.getReducedFraction(2, 1); [EOL]     assertEquals(2, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL]     f = Fraction.getReducedFraction(22, 7); [EOL]     assertEquals(22, f.getNumerator()); [EOL]     assertEquals(7, f.getDenominator()); [EOL]     f = Fraction.getReducedFraction(-6, 10); [EOL]     assertEquals(-3, f.getNumerator()); [EOL]     assertEquals(5, f.getDenominator()); [EOL]     f = Fraction.getReducedFraction(6, -10); [EOL]     assertEquals(-3, f.getNumerator()); [EOL]     assertEquals(5, f.getDenominator()); [EOL]     f = Fraction.getReducedFraction(-6, -10); [EOL]     assertEquals(3, f.getNumerator()); [EOL]     assertEquals(5, f.getDenominator()); [EOL]     try { [EOL]         f = Fraction.getReducedFraction(1, 0); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     try { [EOL]         f = Fraction.getReducedFraction(2, 0); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     try { [EOL]         f = Fraction.getReducedFraction(-3, 0); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     f = Fraction.getReducedFraction(0, 2); [EOL]     assertEquals(0, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL]     f = Fraction.getReducedFraction(2, 2); [EOL]     assertEquals(1, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL]     f = Fraction.getReducedFraction(2, 4); [EOL]     assertEquals(1, f.getNumerator()); [EOL]     assertEquals(2, f.getDenominator()); [EOL]     f = Fraction.getReducedFraction(15, 10); [EOL]     assertEquals(3, f.getNumerator()); [EOL]     assertEquals(2, f.getDenominator()); [EOL]     f = Fraction.getReducedFraction(121, 22); [EOL]     assertEquals(11, f.getNumerator()); [EOL]     assertEquals(2, f.getDenominator()); [EOL]     f = Fraction.getReducedFraction(-2, Integer.MIN_VALUE); [EOL]     assertEquals(1, f.getNumerator()); [EOL]     assertEquals(-(Integer.MIN_VALUE / 2), f.getDenominator()); [EOL]     try { [EOL]         f = Fraction.getReducedFraction(-7, Integer.MIN_VALUE); [EOL]         fail("Expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     f = Fraction.getReducedFraction(Integer.MIN_VALUE, 2); [EOL]     assertEquals(Integer.MIN_VALUE / 2, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL] }
@Test [EOL] public void testReducedFactory_int_int() { [EOL]     Fraction f = null; [EOL]     f = Fraction.getReducedFraction(0, 1); [EOL]     assertEquals(0, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL]     f = Fraction.getReducedFraction(1, 1); [EOL]     assertEquals(1, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL]     f = Fraction.getReducedFraction(2, 1); [EOL]     assertEquals(2, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL]     f = Fraction.getReducedFraction(22, 7); [EOL]     assertEquals(22, f.getNumerator()); [EOL]     assertEquals(7, f.getDenominator()); [EOL]     f = Fraction.getReducedFraction(-6, 10); [EOL]     assertEquals(-3, f.getNumerator()); [EOL]     assertEquals(5, f.getDenominator()); [EOL]     f = Fraction.getReducedFraction(6, -10); [EOL]     assertEquals(-3, f.getNumerator()); [EOL]     assertEquals(5, f.getDenominator()); [EOL]     f = Fraction.getReducedFraction(-6, -10); [EOL]     assertEquals(3, f.getNumerator()); [EOL]     assertEquals(5, f.getDenominator()); [EOL]     try { [EOL]         f = Fraction.getReducedFraction(1, 0); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     try { [EOL]         f = Fraction.getReducedFraction(2, 0); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     try { [EOL]         f = Fraction.getReducedFraction(-3, 0); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     f = Fraction.getReducedFraction(0, 2); [EOL]     assertEquals(0, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL]     f = Fraction.getReducedFraction(2, 2); [EOL]     assertEquals(1, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL]     f = Fraction.getReducedFraction(2, 4); [EOL]     assertEquals(1, f.getNumerator()); [EOL]     assertEquals(2, f.getDenominator()); [EOL]     f = Fraction.getReducedFraction(15, 10); [EOL]     assertEquals(3, f.getNumerator()); [EOL]     assertEquals(2, f.getDenominator()); [EOL]     f = Fraction.getReducedFraction(121, 22); [EOL]     assertEquals(11, f.getNumerator()); [EOL]     assertEquals(2, f.getDenominator()); [EOL]     f = Fraction.getReducedFraction(-2, Integer.MIN_VALUE); [EOL]     assertEquals(1, f.getNumerator()); [EOL]     assertEquals(-(Integer.MIN_VALUE / 2), f.getDenominator()); [EOL]     try { [EOL]         f = Fraction.getReducedFraction(-7, Integer.MIN_VALUE); [EOL]         fail("Expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     f = Fraction.getReducedFraction(Integer.MIN_VALUE, 2); [EOL]     assertEquals(Integer.MIN_VALUE / 2, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL] }
@Test [EOL] public void testReducedFactory_int_int() { [EOL]     Fraction f = null; [EOL]     f = Fraction.getReducedFraction(0, 1); [EOL]     assertEquals(0, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL]     f = Fraction.getReducedFraction(1, 1); [EOL]     assertEquals(1, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL]     f = Fraction.getReducedFraction(2, 1); [EOL]     assertEquals(2, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL]     f = Fraction.getReducedFraction(22, 7); [EOL]     assertEquals(22, f.getNumerator()); [EOL]     assertEquals(7, f.getDenominator()); [EOL]     f = Fraction.getReducedFraction(-6, 10); [EOL]     assertEquals(-3, f.getNumerator()); [EOL]     assertEquals(5, f.getDenominator()); [EOL]     f = Fraction.getReducedFraction(6, -10); [EOL]     assertEquals(-3, f.getNumerator()); [EOL]     assertEquals(5, f.getDenominator()); [EOL]     f = Fraction.getReducedFraction(-6, -10); [EOL]     assertEquals(3, f.getNumerator()); [EOL]     assertEquals(5, f.getDenominator()); [EOL]     try { [EOL]         f = Fraction.getReducedFraction(1, 0); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     try { [EOL]         f = Fraction.getReducedFraction(2, 0); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     try { [EOL]         f = Fraction.getReducedFraction(-3, 0); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     f = Fraction.getReducedFraction(0, 2); [EOL]     assertEquals(0, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL]     f = Fraction.getReducedFraction(2, 2); [EOL]     assertEquals(1, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL]     f = Fraction.getReducedFraction(2, 4); [EOL]     assertEquals(1, f.getNumerator()); [EOL]     assertEquals(2, f.getDenominator()); [EOL]     f = Fraction.getReducedFraction(15, 10); [EOL]     assertEquals(3, f.getNumerator()); [EOL]     assertEquals(2, f.getDenominator()); [EOL]     f = Fraction.getReducedFraction(121, 22); [EOL]     assertEquals(11, f.getNumerator()); [EOL]     assertEquals(2, f.getDenominator()); [EOL]     f = Fraction.getReducedFraction(-2, Integer.MIN_VALUE); [EOL]     assertEquals(1, f.getNumerator()); [EOL]     assertEquals(-(Integer.MIN_VALUE / 2), f.getDenominator()); [EOL]     try { [EOL]         f = Fraction.getReducedFraction(-7, Integer.MIN_VALUE); [EOL]         fail("Expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     f = Fraction.getReducedFraction(Integer.MIN_VALUE, 2); [EOL]     assertEquals(Integer.MIN_VALUE / 2, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL] }
@Test [EOL] public void testAdd() { [EOL]     Fraction f = null; [EOL]     Fraction f1 = null; [EOL]     Fraction f2 = null; [EOL]     f1 = Fraction.getFraction(3, 5); [EOL]     f2 = Fraction.getFraction(1, 5); [EOL]     f = f1.add(f2); [EOL]     assertEquals(4, f.getNumerator()); [EOL]     assertEquals(5, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(3, 5); [EOL]     f2 = Fraction.getFraction(2, 5); [EOL]     f = f1.add(f2); [EOL]     assertEquals(1, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(3, 5); [EOL]     f2 = Fraction.getFraction(3, 5); [EOL]     f = f1.add(f2); [EOL]     assertEquals(6, f.getNumerator()); [EOL]     assertEquals(5, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(3, 5); [EOL]     f2 = Fraction.getFraction(-4, 5); [EOL]     f = f1.add(f2); [EOL]     assertEquals(-1, f.getNumerator()); [EOL]     assertEquals(5, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(Integer.MAX_VALUE - 1, 1); [EOL]     f2 = Fraction.ONE; [EOL]     f = f1.add(f2); [EOL]     assertEquals(Integer.MAX_VALUE, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(3, 5); [EOL]     f2 = Fraction.getFraction(1, 2); [EOL]     f = f1.add(f2); [EOL]     assertEquals(11, f.getNumerator()); [EOL]     assertEquals(10, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(3, 8); [EOL]     f2 = Fraction.getFraction(1, 6); [EOL]     f = f1.add(f2); [EOL]     assertEquals(13, f.getNumerator()); [EOL]     assertEquals(24, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(0, 5); [EOL]     f2 = Fraction.getFraction(1, 5); [EOL]     f = f1.add(f2); [EOL]     assertSame(f2, f); [EOL]     f = f2.add(f1); [EOL]     assertSame(f2, f); [EOL]     f1 = Fraction.getFraction(-1, 13 * 13 * 2 * 2); [EOL]     f2 = Fraction.getFraction(-2, 13 * 17 * 2); [EOL]     f = f1.add(f2); [EOL]     assertEquals(13 * 13 * 17 * 2 * 2, f.getDenominator()); [EOL]     assertEquals(-17 - 2 * 13 * 2, f.getNumerator()); [EOL]     try { [EOL]         f.add(null); [EOL]         fail("expecting IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     f1 = Fraction.getFraction(1, 32768 * 3); [EOL]     f2 = Fraction.getFraction(1, 59049); [EOL]     f = f1.add(f2); [EOL]     assertEquals(52451, f.getNumerator()); [EOL]     assertEquals(1934917632, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(Integer.MIN_VALUE, 3); [EOL]     f2 = Fraction.ONE_THIRD; [EOL]     f = f1.add(f2); [EOL]     assertEquals(Integer.MIN_VALUE + 1, f.getNumerator()); [EOL]     assertEquals(3, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(Integer.MAX_VALUE - 1, 1); [EOL]     f2 = Fraction.ONE; [EOL]     f = f1.add(f2); [EOL]     assertEquals(Integer.MAX_VALUE, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL]     try { [EOL]         f = f.add(Fraction.ONE); [EOL]         fail("expecting ArithmeticException but got: " + f.toString()); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     f1 = Fraction.getFraction(Integer.MIN_VALUE, 5); [EOL]     f2 = Fraction.getFraction(-1, 5); [EOL]     try { [EOL]         f = f1.add(f2); [EOL]         fail("expecting ArithmeticException but got: " + f.toString()); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     try { [EOL]         f = Fraction.getFraction(-Integer.MAX_VALUE, 1); [EOL]         f = f.add(f); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     try { [EOL]         f = Fraction.getFraction(-Integer.MAX_VALUE, 1); [EOL]         f = f.add(f); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     f1 = Fraction.getFraction(3, 327680); [EOL]     f2 = Fraction.getFraction(2, 59049); [EOL]     try { [EOL]         f = f1.add(f2); [EOL]         fail("expecting ArithmeticException but got: " + f.toString()); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL] }
@Test [EOL] public void testAdd() { [EOL]     Fraction f = null; [EOL]     Fraction f1 = null; [EOL]     Fraction f2 = null; [EOL]     f1 = Fraction.getFraction(3, 5); [EOL]     f2 = Fraction.getFraction(1, 5); [EOL]     f = f1.add(f2); [EOL]     assertEquals(4, f.getNumerator()); [EOL]     assertEquals(5, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(3, 5); [EOL]     f2 = Fraction.getFraction(2, 5); [EOL]     f = f1.add(f2); [EOL]     assertEquals(1, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(3, 5); [EOL]     f2 = Fraction.getFraction(3, 5); [EOL]     f = f1.add(f2); [EOL]     assertEquals(6, f.getNumerator()); [EOL]     assertEquals(5, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(3, 5); [EOL]     f2 = Fraction.getFraction(-4, 5); [EOL]     f = f1.add(f2); [EOL]     assertEquals(-1, f.getNumerator()); [EOL]     assertEquals(5, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(Integer.MAX_VALUE - 1, 1); [EOL]     f2 = Fraction.ONE; [EOL]     f = f1.add(f2); [EOL]     assertEquals(Integer.MAX_VALUE, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(3, 5); [EOL]     f2 = Fraction.getFraction(1, 2); [EOL]     f = f1.add(f2); [EOL]     assertEquals(11, f.getNumerator()); [EOL]     assertEquals(10, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(3, 8); [EOL]     f2 = Fraction.getFraction(1, 6); [EOL]     f = f1.add(f2); [EOL]     assertEquals(13, f.getNumerator()); [EOL]     assertEquals(24, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(0, 5); [EOL]     f2 = Fraction.getFraction(1, 5); [EOL]     f = f1.add(f2); [EOL]     assertSame(f2, f); [EOL]     f = f2.add(f1); [EOL]     assertSame(f2, f); [EOL]     f1 = Fraction.getFraction(-1, 13 * 13 * 2 * 2); [EOL]     f2 = Fraction.getFraction(-2, 13 * 17 * 2); [EOL]     f = f1.add(f2); [EOL]     assertEquals(13 * 13 * 17 * 2 * 2, f.getDenominator()); [EOL]     assertEquals(-17 - 2 * 13 * 2, f.getNumerator()); [EOL]     try { [EOL]         f.add(null); [EOL]         fail("expecting IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     f1 = Fraction.getFraction(1, 32768 * 3); [EOL]     f2 = Fraction.getFraction(1, 59049); [EOL]     f = f1.add(f2); [EOL]     assertEquals(52451, f.getNumerator()); [EOL]     assertEquals(1934917632, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(Integer.MIN_VALUE, 3); [EOL]     f2 = Fraction.ONE_THIRD; [EOL]     f = f1.add(f2); [EOL]     assertEquals(Integer.MIN_VALUE + 1, f.getNumerator()); [EOL]     assertEquals(3, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(Integer.MAX_VALUE - 1, 1); [EOL]     f2 = Fraction.ONE; [EOL]     f = f1.add(f2); [EOL]     assertEquals(Integer.MAX_VALUE, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL]     try { [EOL]         f = f.add(Fraction.ONE); [EOL]         fail("expecting ArithmeticException but got: " + f.toString()); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     f1 = Fraction.getFraction(Integer.MIN_VALUE, 5); [EOL]     f2 = Fraction.getFraction(-1, 5); [EOL]     try { [EOL]         f = f1.add(f2); [EOL]         fail("expecting ArithmeticException but got: " + f.toString()); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     try { [EOL]         f = Fraction.getFraction(-Integer.MAX_VALUE, 1); [EOL]         f = f.add(f); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     try { [EOL]         f = Fraction.getFraction(-Integer.MAX_VALUE, 1); [EOL]         f = f.add(f); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     f1 = Fraction.getFraction(3, 327680); [EOL]     f2 = Fraction.getFraction(2, 59049); [EOL]     try { [EOL]         f = f1.add(f2); [EOL]         fail("expecting ArithmeticException but got: " + f.toString()); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL] }
@Test [EOL] public void testAdd() { [EOL]     Fraction f = null; [EOL]     Fraction f1 = null; [EOL]     Fraction f2 = null; [EOL]     f1 = Fraction.getFraction(3, 5); [EOL]     f2 = Fraction.getFraction(1, 5); [EOL]     f = f1.add(f2); [EOL]     assertEquals(4, f.getNumerator()); [EOL]     assertEquals(5, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(3, 5); [EOL]     f2 = Fraction.getFraction(2, 5); [EOL]     f = f1.add(f2); [EOL]     assertEquals(1, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(3, 5); [EOL]     f2 = Fraction.getFraction(3, 5); [EOL]     f = f1.add(f2); [EOL]     assertEquals(6, f.getNumerator()); [EOL]     assertEquals(5, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(3, 5); [EOL]     f2 = Fraction.getFraction(-4, 5); [EOL]     f = f1.add(f2); [EOL]     assertEquals(-1, f.getNumerator()); [EOL]     assertEquals(5, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(Integer.MAX_VALUE - 1, 1); [EOL]     f2 = Fraction.ONE; [EOL]     f = f1.add(f2); [EOL]     assertEquals(Integer.MAX_VALUE, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(3, 5); [EOL]     f2 = Fraction.getFraction(1, 2); [EOL]     f = f1.add(f2); [EOL]     assertEquals(11, f.getNumerator()); [EOL]     assertEquals(10, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(3, 8); [EOL]     f2 = Fraction.getFraction(1, 6); [EOL]     f = f1.add(f2); [EOL]     assertEquals(13, f.getNumerator()); [EOL]     assertEquals(24, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(0, 5); [EOL]     f2 = Fraction.getFraction(1, 5); [EOL]     f = f1.add(f2); [EOL]     assertSame(f2, f); [EOL]     f = f2.add(f1); [EOL]     assertSame(f2, f); [EOL]     f1 = Fraction.getFraction(-1, 13 * 13 * 2 * 2); [EOL]     f2 = Fraction.getFraction(-2, 13 * 17 * 2); [EOL]     f = f1.add(f2); [EOL]     assertEquals(13 * 13 * 17 * 2 * 2, f.getDenominator()); [EOL]     assertEquals(-17 - 2 * 13 * 2, f.getNumerator()); [EOL]     try { [EOL]         f.add(null); [EOL]         fail("expecting IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     f1 = Fraction.getFraction(1, 32768 * 3); [EOL]     f2 = Fraction.getFraction(1, 59049); [EOL]     f = f1.add(f2); [EOL]     assertEquals(52451, f.getNumerator()); [EOL]     assertEquals(1934917632, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(Integer.MIN_VALUE, 3); [EOL]     f2 = Fraction.ONE_THIRD; [EOL]     f = f1.add(f2); [EOL]     assertEquals(Integer.MIN_VALUE + 1, f.getNumerator()); [EOL]     assertEquals(3, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(Integer.MAX_VALUE - 1, 1); [EOL]     f2 = Fraction.ONE; [EOL]     f = f1.add(f2); [EOL]     assertEquals(Integer.MAX_VALUE, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL]     try { [EOL]         f = f.add(Fraction.ONE); [EOL]         fail("expecting ArithmeticException but got: " + f.toString()); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     f1 = Fraction.getFraction(Integer.MIN_VALUE, 5); [EOL]     f2 = Fraction.getFraction(-1, 5); [EOL]     try { [EOL]         f = f1.add(f2); [EOL]         fail("expecting ArithmeticException but got: " + f.toString()); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     try { [EOL]         f = Fraction.getFraction(-Integer.MAX_VALUE, 1); [EOL]         f = f.add(f); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     try { [EOL]         f = Fraction.getFraction(-Integer.MAX_VALUE, 1); [EOL]         f = f.add(f); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     f1 = Fraction.getFraction(3, 327680); [EOL]     f2 = Fraction.getFraction(2, 59049); [EOL]     try { [EOL]         f = f1.add(f2); [EOL]         fail("expecting ArithmeticException but got: " + f.toString()); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL] }
@Test [EOL] public void testAdd() { [EOL]     Fraction f = null; [EOL]     Fraction f1 = null; [EOL]     Fraction f2 = null; [EOL]     f1 = Fraction.getFraction(3, 5); [EOL]     f2 = Fraction.getFraction(1, 5); [EOL]     f = f1.add(f2); [EOL]     assertEquals(4, f.getNumerator()); [EOL]     assertEquals(5, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(3, 5); [EOL]     f2 = Fraction.getFraction(2, 5); [EOL]     f = f1.add(f2); [EOL]     assertEquals(1, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(3, 5); [EOL]     f2 = Fraction.getFraction(3, 5); [EOL]     f = f1.add(f2); [EOL]     assertEquals(6, f.getNumerator()); [EOL]     assertEquals(5, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(3, 5); [EOL]     f2 = Fraction.getFraction(-4, 5); [EOL]     f = f1.add(f2); [EOL]     assertEquals(-1, f.getNumerator()); [EOL]     assertEquals(5, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(Integer.MAX_VALUE - 1, 1); [EOL]     f2 = Fraction.ONE; [EOL]     f = f1.add(f2); [EOL]     assertEquals(Integer.MAX_VALUE, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(3, 5); [EOL]     f2 = Fraction.getFraction(1, 2); [EOL]     f = f1.add(f2); [EOL]     assertEquals(11, f.getNumerator()); [EOL]     assertEquals(10, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(3, 8); [EOL]     f2 = Fraction.getFraction(1, 6); [EOL]     f = f1.add(f2); [EOL]     assertEquals(13, f.getNumerator()); [EOL]     assertEquals(24, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(0, 5); [EOL]     f2 = Fraction.getFraction(1, 5); [EOL]     f = f1.add(f2); [EOL]     assertSame(f2, f); [EOL]     f = f2.add(f1); [EOL]     assertSame(f2, f); [EOL]     f1 = Fraction.getFraction(-1, 13 * 13 * 2 * 2); [EOL]     f2 = Fraction.getFraction(-2, 13 * 17 * 2); [EOL]     f = f1.add(f2); [EOL]     assertEquals(13 * 13 * 17 * 2 * 2, f.getDenominator()); [EOL]     assertEquals(-17 - 2 * 13 * 2, f.getNumerator()); [EOL]     try { [EOL]         f.add(null); [EOL]         fail("expecting IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     f1 = Fraction.getFraction(1, 32768 * 3); [EOL]     f2 = Fraction.getFraction(1, 59049); [EOL]     f = f1.add(f2); [EOL]     assertEquals(52451, f.getNumerator()); [EOL]     assertEquals(1934917632, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(Integer.MIN_VALUE, 3); [EOL]     f2 = Fraction.ONE_THIRD; [EOL]     f = f1.add(f2); [EOL]     assertEquals(Integer.MIN_VALUE + 1, f.getNumerator()); [EOL]     assertEquals(3, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(Integer.MAX_VALUE - 1, 1); [EOL]     f2 = Fraction.ONE; [EOL]     f = f1.add(f2); [EOL]     assertEquals(Integer.MAX_VALUE, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL]     try { [EOL]         f = f.add(Fraction.ONE); [EOL]         fail("expecting ArithmeticException but got: " + f.toString()); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     f1 = Fraction.getFraction(Integer.MIN_VALUE, 5); [EOL]     f2 = Fraction.getFraction(-1, 5); [EOL]     try { [EOL]         f = f1.add(f2); [EOL]         fail("expecting ArithmeticException but got: " + f.toString()); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     try { [EOL]         f = Fraction.getFraction(-Integer.MAX_VALUE, 1); [EOL]         f = f.add(f); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     try { [EOL]         f = Fraction.getFraction(-Integer.MAX_VALUE, 1); [EOL]         f = f.add(f); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     f1 = Fraction.getFraction(3, 327680); [EOL]     f2 = Fraction.getFraction(2, 59049); [EOL]     try { [EOL]         f = f1.add(f2); [EOL]         fail("expecting ArithmeticException but got: " + f.toString()); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL] }
@Test [EOL] public void testAdd() { [EOL]     Fraction f = null; [EOL]     Fraction f1 = null; [EOL]     Fraction f2 = null; [EOL]     f1 = Fraction.getFraction(3, 5); [EOL]     f2 = Fraction.getFraction(1, 5); [EOL]     f = f1.add(f2); [EOL]     assertEquals(4, f.getNumerator()); [EOL]     assertEquals(5, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(3, 5); [EOL]     f2 = Fraction.getFraction(2, 5); [EOL]     f = f1.add(f2); [EOL]     assertEquals(1, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(3, 5); [EOL]     f2 = Fraction.getFraction(3, 5); [EOL]     f = f1.add(f2); [EOL]     assertEquals(6, f.getNumerator()); [EOL]     assertEquals(5, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(3, 5); [EOL]     f2 = Fraction.getFraction(-4, 5); [EOL]     f = f1.add(f2); [EOL]     assertEquals(-1, f.getNumerator()); [EOL]     assertEquals(5, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(Integer.MAX_VALUE - 1, 1); [EOL]     f2 = Fraction.ONE; [EOL]     f = f1.add(f2); [EOL]     assertEquals(Integer.MAX_VALUE, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(3, 5); [EOL]     f2 = Fraction.getFraction(1, 2); [EOL]     f = f1.add(f2); [EOL]     assertEquals(11, f.getNumerator()); [EOL]     assertEquals(10, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(3, 8); [EOL]     f2 = Fraction.getFraction(1, 6); [EOL]     f = f1.add(f2); [EOL]     assertEquals(13, f.getNumerator()); [EOL]     assertEquals(24, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(0, 5); [EOL]     f2 = Fraction.getFraction(1, 5); [EOL]     f = f1.add(f2); [EOL]     assertSame(f2, f); [EOL]     f = f2.add(f1); [EOL]     assertSame(f2, f); [EOL]     f1 = Fraction.getFraction(-1, 13 * 13 * 2 * 2); [EOL]     f2 = Fraction.getFraction(-2, 13 * 17 * 2); [EOL]     f = f1.add(f2); [EOL]     assertEquals(13 * 13 * 17 * 2 * 2, f.getDenominator()); [EOL]     assertEquals(-17 - 2 * 13 * 2, f.getNumerator()); [EOL]     try { [EOL]         f.add(null); [EOL]         fail("expecting IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     f1 = Fraction.getFraction(1, 32768 * 3); [EOL]     f2 = Fraction.getFraction(1, 59049); [EOL]     f = f1.add(f2); [EOL]     assertEquals(52451, f.getNumerator()); [EOL]     assertEquals(1934917632, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(Integer.MIN_VALUE, 3); [EOL]     f2 = Fraction.ONE_THIRD; [EOL]     f = f1.add(f2); [EOL]     assertEquals(Integer.MIN_VALUE + 1, f.getNumerator()); [EOL]     assertEquals(3, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(Integer.MAX_VALUE - 1, 1); [EOL]     f2 = Fraction.ONE; [EOL]     f = f1.add(f2); [EOL]     assertEquals(Integer.MAX_VALUE, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL]     try { [EOL]         f = f.add(Fraction.ONE); [EOL]         fail("expecting ArithmeticException but got: " + f.toString()); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     f1 = Fraction.getFraction(Integer.MIN_VALUE, 5); [EOL]     f2 = Fraction.getFraction(-1, 5); [EOL]     try { [EOL]         f = f1.add(f2); [EOL]         fail("expecting ArithmeticException but got: " + f.toString()); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     try { [EOL]         f = Fraction.getFraction(-Integer.MAX_VALUE, 1); [EOL]         f = f.add(f); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     try { [EOL]         f = Fraction.getFraction(-Integer.MAX_VALUE, 1); [EOL]         f = f.add(f); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     f1 = Fraction.getFraction(3, 327680); [EOL]     f2 = Fraction.getFraction(2, 59049); [EOL]     try { [EOL]         f = f1.add(f2); [EOL]         fail("expecting ArithmeticException but got: " + f.toString()); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL] }
@Test [EOL] public void testAdd() { [EOL]     Fraction f = null; [EOL]     Fraction f1 = null; [EOL]     Fraction f2 = null; [EOL]     f1 = Fraction.getFraction(3, 5); [EOL]     f2 = Fraction.getFraction(1, 5); [EOL]     f = f1.add(f2); [EOL]     assertEquals(4, f.getNumerator()); [EOL]     assertEquals(5, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(3, 5); [EOL]     f2 = Fraction.getFraction(2, 5); [EOL]     f = f1.add(f2); [EOL]     assertEquals(1, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(3, 5); [EOL]     f2 = Fraction.getFraction(3, 5); [EOL]     f = f1.add(f2); [EOL]     assertEquals(6, f.getNumerator()); [EOL]     assertEquals(5, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(3, 5); [EOL]     f2 = Fraction.getFraction(-4, 5); [EOL]     f = f1.add(f2); [EOL]     assertEquals(-1, f.getNumerator()); [EOL]     assertEquals(5, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(Integer.MAX_VALUE - 1, 1); [EOL]     f2 = Fraction.ONE; [EOL]     f = f1.add(f2); [EOL]     assertEquals(Integer.MAX_VALUE, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(3, 5); [EOL]     f2 = Fraction.getFraction(1, 2); [EOL]     f = f1.add(f2); [EOL]     assertEquals(11, f.getNumerator()); [EOL]     assertEquals(10, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(3, 8); [EOL]     f2 = Fraction.getFraction(1, 6); [EOL]     f = f1.add(f2); [EOL]     assertEquals(13, f.getNumerator()); [EOL]     assertEquals(24, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(0, 5); [EOL]     f2 = Fraction.getFraction(1, 5); [EOL]     f = f1.add(f2); [EOL]     assertSame(f2, f); [EOL]     f = f2.add(f1); [EOL]     assertSame(f2, f); [EOL]     f1 = Fraction.getFraction(-1, 13 * 13 * 2 * 2); [EOL]     f2 = Fraction.getFraction(-2, 13 * 17 * 2); [EOL]     f = f1.add(f2); [EOL]     assertEquals(13 * 13 * 17 * 2 * 2, f.getDenominator()); [EOL]     assertEquals(-17 - 2 * 13 * 2, f.getNumerator()); [EOL]     try { [EOL]         f.add(null); [EOL]         fail("expecting IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     f1 = Fraction.getFraction(1, 32768 * 3); [EOL]     f2 = Fraction.getFraction(1, 59049); [EOL]     f = f1.add(f2); [EOL]     assertEquals(52451, f.getNumerator()); [EOL]     assertEquals(1934917632, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(Integer.MIN_VALUE, 3); [EOL]     f2 = Fraction.ONE_THIRD; [EOL]     f = f1.add(f2); [EOL]     assertEquals(Integer.MIN_VALUE + 1, f.getNumerator()); [EOL]     assertEquals(3, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(Integer.MAX_VALUE - 1, 1); [EOL]     f2 = Fraction.ONE; [EOL]     f = f1.add(f2); [EOL]     assertEquals(Integer.MAX_VALUE, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL]     try { [EOL]         f = f.add(Fraction.ONE); [EOL]         fail("expecting ArithmeticException but got: " + f.toString()); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     f1 = Fraction.getFraction(Integer.MIN_VALUE, 5); [EOL]     f2 = Fraction.getFraction(-1, 5); [EOL]     try { [EOL]         f = f1.add(f2); [EOL]         fail("expecting ArithmeticException but got: " + f.toString()); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     try { [EOL]         f = Fraction.getFraction(-Integer.MAX_VALUE, 1); [EOL]         f = f.add(f); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     try { [EOL]         f = Fraction.getFraction(-Integer.MAX_VALUE, 1); [EOL]         f = f.add(f); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     f1 = Fraction.getFraction(3, 327680); [EOL]     f2 = Fraction.getFraction(2, 59049); [EOL]     try { [EOL]         f = f1.add(f2); [EOL]         fail("expecting ArithmeticException but got: " + f.toString()); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL] }
@Test [EOL] public void testAdd() { [EOL]     Fraction f = null; [EOL]     Fraction f1 = null; [EOL]     Fraction f2 = null; [EOL]     f1 = Fraction.getFraction(3, 5); [EOL]     f2 = Fraction.getFraction(1, 5); [EOL]     f = f1.add(f2); [EOL]     assertEquals(4, f.getNumerator()); [EOL]     assertEquals(5, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(3, 5); [EOL]     f2 = Fraction.getFraction(2, 5); [EOL]     f = f1.add(f2); [EOL]     assertEquals(1, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(3, 5); [EOL]     f2 = Fraction.getFraction(3, 5); [EOL]     f = f1.add(f2); [EOL]     assertEquals(6, f.getNumerator()); [EOL]     assertEquals(5, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(3, 5); [EOL]     f2 = Fraction.getFraction(-4, 5); [EOL]     f = f1.add(f2); [EOL]     assertEquals(-1, f.getNumerator()); [EOL]     assertEquals(5, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(Integer.MAX_VALUE - 1, 1); [EOL]     f2 = Fraction.ONE; [EOL]     f = f1.add(f2); [EOL]     assertEquals(Integer.MAX_VALUE, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(3, 5); [EOL]     f2 = Fraction.getFraction(1, 2); [EOL]     f = f1.add(f2); [EOL]     assertEquals(11, f.getNumerator()); [EOL]     assertEquals(10, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(3, 8); [EOL]     f2 = Fraction.getFraction(1, 6); [EOL]     f = f1.add(f2); [EOL]     assertEquals(13, f.getNumerator()); [EOL]     assertEquals(24, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(0, 5); [EOL]     f2 = Fraction.getFraction(1, 5); [EOL]     f = f1.add(f2); [EOL]     assertSame(f2, f); [EOL]     f = f2.add(f1); [EOL]     assertSame(f2, f); [EOL]     f1 = Fraction.getFraction(-1, 13 * 13 * 2 * 2); [EOL]     f2 = Fraction.getFraction(-2, 13 * 17 * 2); [EOL]     f = f1.add(f2); [EOL]     assertEquals(13 * 13 * 17 * 2 * 2, f.getDenominator()); [EOL]     assertEquals(-17 - 2 * 13 * 2, f.getNumerator()); [EOL]     try { [EOL]         f.add(null); [EOL]         fail("expecting IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     f1 = Fraction.getFraction(1, 32768 * 3); [EOL]     f2 = Fraction.getFraction(1, 59049); [EOL]     f = f1.add(f2); [EOL]     assertEquals(52451, f.getNumerator()); [EOL]     assertEquals(1934917632, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(Integer.MIN_VALUE, 3); [EOL]     f2 = Fraction.ONE_THIRD; [EOL]     f = f1.add(f2); [EOL]     assertEquals(Integer.MIN_VALUE + 1, f.getNumerator()); [EOL]     assertEquals(3, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(Integer.MAX_VALUE - 1, 1); [EOL]     f2 = Fraction.ONE; [EOL]     f = f1.add(f2); [EOL]     assertEquals(Integer.MAX_VALUE, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL]     try { [EOL]         f = f.add(Fraction.ONE); [EOL]         fail("expecting ArithmeticException but got: " + f.toString()); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     f1 = Fraction.getFraction(Integer.MIN_VALUE, 5); [EOL]     f2 = Fraction.getFraction(-1, 5); [EOL]     try { [EOL]         f = f1.add(f2); [EOL]         fail("expecting ArithmeticException but got: " + f.toString()); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     try { [EOL]         f = Fraction.getFraction(-Integer.MAX_VALUE, 1); [EOL]         f = f.add(f); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     try { [EOL]         f = Fraction.getFraction(-Integer.MAX_VALUE, 1); [EOL]         f = f.add(f); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     f1 = Fraction.getFraction(3, 327680); [EOL]     f2 = Fraction.getFraction(2, 59049); [EOL]     try { [EOL]         f = f1.add(f2); [EOL]         fail("expecting ArithmeticException but got: " + f.toString()); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL] }
@Test [EOL] public void testAdd() { [EOL]     Fraction f = null; [EOL]     Fraction f1 = null; [EOL]     Fraction f2 = null; [EOL]     f1 = Fraction.getFraction(3, 5); [EOL]     f2 = Fraction.getFraction(1, 5); [EOL]     f = f1.add(f2); [EOL]     assertEquals(4, f.getNumerator()); [EOL]     assertEquals(5, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(3, 5); [EOL]     f2 = Fraction.getFraction(2, 5); [EOL]     f = f1.add(f2); [EOL]     assertEquals(1, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(3, 5); [EOL]     f2 = Fraction.getFraction(3, 5); [EOL]     f = f1.add(f2); [EOL]     assertEquals(6, f.getNumerator()); [EOL]     assertEquals(5, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(3, 5); [EOL]     f2 = Fraction.getFraction(-4, 5); [EOL]     f = f1.add(f2); [EOL]     assertEquals(-1, f.getNumerator()); [EOL]     assertEquals(5, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(Integer.MAX_VALUE - 1, 1); [EOL]     f2 = Fraction.ONE; [EOL]     f = f1.add(f2); [EOL]     assertEquals(Integer.MAX_VALUE, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(3, 5); [EOL]     f2 = Fraction.getFraction(1, 2); [EOL]     f = f1.add(f2); [EOL]     assertEquals(11, f.getNumerator()); [EOL]     assertEquals(10, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(3, 8); [EOL]     f2 = Fraction.getFraction(1, 6); [EOL]     f = f1.add(f2); [EOL]     assertEquals(13, f.getNumerator()); [EOL]     assertEquals(24, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(0, 5); [EOL]     f2 = Fraction.getFraction(1, 5); [EOL]     f = f1.add(f2); [EOL]     assertSame(f2, f); [EOL]     f = f2.add(f1); [EOL]     assertSame(f2, f); [EOL]     f1 = Fraction.getFraction(-1, 13 * 13 * 2 * 2); [EOL]     f2 = Fraction.getFraction(-2, 13 * 17 * 2); [EOL]     f = f1.add(f2); [EOL]     assertEquals(13 * 13 * 17 * 2 * 2, f.getDenominator()); [EOL]     assertEquals(-17 - 2 * 13 * 2, f.getNumerator()); [EOL]     try { [EOL]         f.add(null); [EOL]         fail("expecting IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     f1 = Fraction.getFraction(1, 32768 * 3); [EOL]     f2 = Fraction.getFraction(1, 59049); [EOL]     f = f1.add(f2); [EOL]     assertEquals(52451, f.getNumerator()); [EOL]     assertEquals(1934917632, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(Integer.MIN_VALUE, 3); [EOL]     f2 = Fraction.ONE_THIRD; [EOL]     f = f1.add(f2); [EOL]     assertEquals(Integer.MIN_VALUE + 1, f.getNumerator()); [EOL]     assertEquals(3, f.getDenominator()); [EOL]     f1 = Fraction.getFraction(Integer.MAX_VALUE - 1, 1); [EOL]     f2 = Fraction.ONE; [EOL]     f = f1.add(f2); [EOL]     assertEquals(Integer.MAX_VALUE, f.getNumerator()); [EOL]     assertEquals(1, f.getDenominator()); [EOL]     try { [EOL]         f = f.add(Fraction.ONE); [EOL]         fail("expecting ArithmeticException but got: " + f.toString()); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     f1 = Fraction.getFraction(Integer.MIN_VALUE, 5); [EOL]     f2 = Fraction.getFraction(-1, 5); [EOL]     try { [EOL]         f = f1.add(f2); [EOL]         fail("expecting ArithmeticException but got: " + f.toString()); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     try { [EOL]         f = Fraction.getFraction(-Integer.MAX_VALUE, 1); [EOL]         f = f.add(f); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     try { [EOL]         f = Fraction.getFraction(-Integer.MAX_VALUE, 1); [EOL]         f = f.add(f); [EOL]         fail("expecting ArithmeticException"); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL]     f1 = Fraction.getFraction(3, 327680); [EOL]     f2 = Fraction.getFraction(2, 59049); [EOL]     try { [EOL]         f = f1.add(f2); [EOL]         fail("expecting ArithmeticException but got: " + f.toString()); [EOL]     } catch (final ArithmeticException ex) { [EOL]     } [EOL] }
@Test [EOL] public void testToString() { [EOL]     Fraction f = null; [EOL]     f = Fraction.getFraction(3, 5); [EOL]     final String str = f.toString(); [EOL]     assertEquals("3/5", str); [EOL]     assertSame(str, f.toString()); [EOL]     f = Fraction.getFraction(7, 5); [EOL]     assertEquals("7/5", f.toString()); [EOL]     f = Fraction.getFraction(4, 2); [EOL]     assertEquals("4/2", f.toString()); [EOL]     f = Fraction.getFraction(0, 2); [EOL]     assertEquals("0/2", f.toString()); [EOL]     f = Fraction.getFraction(2, 2); [EOL]     assertEquals("2/2", f.toString()); [EOL]     f = Fraction.getFraction(Integer.MIN_VALUE, 0, 1); [EOL]     assertEquals("-2147483648/1", f.toString()); [EOL]     f = Fraction.getFraction(-1, 1, Integer.MAX_VALUE); [EOL]     assertEquals("-2147483648/2147483647", f.toString()); [EOL] }
@Test [EOL] public void testSubSequence() { [EOL]     Assert.assertEquals(null, CharSequenceUtils.subSequence(null, -1)); [EOL]     Assert.assertEquals(null, CharSequenceUtils.subSequence(null, 0)); [EOL]     Assert.assertEquals(null, CharSequenceUtils.subSequence(null, 1)); [EOL]     Assert.assertEquals(StringUtils.EMPTY, CharSequenceUtils.subSequence(StringUtils.EMPTY, 0)); [EOL]     Assert.assertEquals("012", CharSequenceUtils.subSequence("012", 0)); [EOL]     Assert.assertEquals("12", CharSequenceUtils.subSequence("012", 1)); [EOL]     Assert.assertEquals("2", CharSequenceUtils.subSequence("012", 2)); [EOL]     Assert.assertEquals(StringUtils.EMPTY, CharSequenceUtils.subSequence("012", 3)); [EOL]     try { [EOL]         Assert.assertEquals(null, CharSequenceUtils.subSequence(StringUtils.EMPTY, -1)); [EOL]         Assert.fail("Expected " + IndexOutOfBoundsException.class.getName()); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         Assert.assertEquals(null, CharSequenceUtils.subSequence(StringUtils.EMPTY, 1)); [EOL]         Assert.fail("Expected " + IndexOutOfBoundsException.class.getName()); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL] }
@Test [EOL] public void testSubSequence() { [EOL]     Assert.assertEquals(null, CharSequenceUtils.subSequence(null, -1)); [EOL]     Assert.assertEquals(null, CharSequenceUtils.subSequence(null, 0)); [EOL]     Assert.assertEquals(null, CharSequenceUtils.subSequence(null, 1)); [EOL]     Assert.assertEquals(StringUtils.EMPTY, CharSequenceUtils.subSequence(StringUtils.EMPTY, 0)); [EOL]     Assert.assertEquals("012", CharSequenceUtils.subSequence("012", 0)); [EOL]     Assert.assertEquals("12", CharSequenceUtils.subSequence("012", 1)); [EOL]     Assert.assertEquals("2", CharSequenceUtils.subSequence("012", 2)); [EOL]     Assert.assertEquals(StringUtils.EMPTY, CharSequenceUtils.subSequence("012", 3)); [EOL]     try { [EOL]         Assert.assertEquals(null, CharSequenceUtils.subSequence(StringUtils.EMPTY, -1)); [EOL]         Assert.fail("Expected " + IndexOutOfBoundsException.class.getName()); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         Assert.assertEquals(null, CharSequenceUtils.subSequence(StringUtils.EMPTY, 1)); [EOL]         Assert.fail("Expected " + IndexOutOfBoundsException.class.getName()); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL] }
@Test [EOL] public void testSubSequence() { [EOL]     Assert.assertEquals(null, CharSequenceUtils.subSequence(null, -1)); [EOL]     Assert.assertEquals(null, CharSequenceUtils.subSequence(null, 0)); [EOL]     Assert.assertEquals(null, CharSequenceUtils.subSequence(null, 1)); [EOL]     Assert.assertEquals(StringUtils.EMPTY, CharSequenceUtils.subSequence(StringUtils.EMPTY, 0)); [EOL]     Assert.assertEquals("012", CharSequenceUtils.subSequence("012", 0)); [EOL]     Assert.assertEquals("12", CharSequenceUtils.subSequence("012", 1)); [EOL]     Assert.assertEquals("2", CharSequenceUtils.subSequence("012", 2)); [EOL]     Assert.assertEquals(StringUtils.EMPTY, CharSequenceUtils.subSequence("012", 3)); [EOL]     try { [EOL]         Assert.assertEquals(null, CharSequenceUtils.subSequence(StringUtils.EMPTY, -1)); [EOL]         Assert.fail("Expected " + IndexOutOfBoundsException.class.getName()); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         Assert.assertEquals(null, CharSequenceUtils.subSequence(StringUtils.EMPTY, 1)); [EOL]         Assert.fail("Expected " + IndexOutOfBoundsException.class.getName()); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL] }
@Test [EOL] public void testSubSequence() { [EOL]     Assert.assertEquals(null, CharSequenceUtils.subSequence(null, -1)); [EOL]     Assert.assertEquals(null, CharSequenceUtils.subSequence(null, 0)); [EOL]     Assert.assertEquals(null, CharSequenceUtils.subSequence(null, 1)); [EOL]     Assert.assertEquals(StringUtils.EMPTY, CharSequenceUtils.subSequence(StringUtils.EMPTY, 0)); [EOL]     Assert.assertEquals("012", CharSequenceUtils.subSequence("012", 0)); [EOL]     Assert.assertEquals("12", CharSequenceUtils.subSequence("012", 1)); [EOL]     Assert.assertEquals("2", CharSequenceUtils.subSequence("012", 2)); [EOL]     Assert.assertEquals(StringUtils.EMPTY, CharSequenceUtils.subSequence("012", 3)); [EOL]     try { [EOL]         Assert.assertEquals(null, CharSequenceUtils.subSequence(StringUtils.EMPTY, -1)); [EOL]         Assert.fail("Expected " + IndexOutOfBoundsException.class.getName()); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         Assert.assertEquals(null, CharSequenceUtils.subSequence(StringUtils.EMPTY, 1)); [EOL]         Assert.fail("Expected " + IndexOutOfBoundsException.class.getName()); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL] }
@Test [EOL] public void testSubSequence() { [EOL]     Assert.assertEquals(null, CharSequenceUtils.subSequence(null, -1)); [EOL]     Assert.assertEquals(null, CharSequenceUtils.subSequence(null, 0)); [EOL]     Assert.assertEquals(null, CharSequenceUtils.subSequence(null, 1)); [EOL]     Assert.assertEquals(StringUtils.EMPTY, CharSequenceUtils.subSequence(StringUtils.EMPTY, 0)); [EOL]     Assert.assertEquals("012", CharSequenceUtils.subSequence("012", 0)); [EOL]     Assert.assertEquals("12", CharSequenceUtils.subSequence("012", 1)); [EOL]     Assert.assertEquals("2", CharSequenceUtils.subSequence("012", 2)); [EOL]     Assert.assertEquals(StringUtils.EMPTY, CharSequenceUtils.subSequence("012", 3)); [EOL]     try { [EOL]         Assert.assertEquals(null, CharSequenceUtils.subSequence(StringUtils.EMPTY, -1)); [EOL]         Assert.fail("Expected " + IndexOutOfBoundsException.class.getName()); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         Assert.assertEquals(null, CharSequenceUtils.subSequence(StringUtils.EMPTY, 1)); [EOL]         Assert.fail("Expected " + IndexOutOfBoundsException.class.getName()); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL] }
@Test [EOL] public void testCloneNotSupportedException() { [EOL]     final Object notCloned = new StrTokenizer() { [EOL]  [EOL]         @Override [EOL]         Object cloneReset() throws CloneNotSupportedException { [EOL]             throw new CloneNotSupportedException("test"); [EOL]         } [EOL]     }.clone(); [EOL]     assertNull(notCloned); [EOL] }
@Test [EOL] public void testConstructor_String_char_char() { [EOL]     StrTokenizer tok = new StrTokenizer("a b", ' ', '"'); [EOL]     assertEquals(1, tok.getDelimiterMatcher().isMatch(" ".toCharArray(), 0, 0, 1)); [EOL]     assertEquals(1, tok.getQuoteMatcher().isMatch("\"".toCharArray(), 0, 0, 1)); [EOL]     assertEquals("a", tok.next()); [EOL]     assertEquals("b", tok.next()); [EOL]     assertFalse(tok.hasNext()); [EOL]     tok = new StrTokenizer("", ' ', '"'); [EOL]     assertFalse(tok.hasNext()); [EOL]     tok = new StrTokenizer((String) null, ' ', '"'); [EOL]     assertFalse(tok.hasNext()); [EOL] }
@Test [EOL] public void testConstructor_String_char_char() { [EOL]     StrTokenizer tok = new StrTokenizer("a b", ' ', '"'); [EOL]     assertEquals(1, tok.getDelimiterMatcher().isMatch(" ".toCharArray(), 0, 0, 1)); [EOL]     assertEquals(1, tok.getQuoteMatcher().isMatch("\"".toCharArray(), 0, 0, 1)); [EOL]     assertEquals("a", tok.next()); [EOL]     assertEquals("b", tok.next()); [EOL]     assertFalse(tok.hasNext()); [EOL]     tok = new StrTokenizer("", ' ', '"'); [EOL]     assertFalse(tok.hasNext()); [EOL]     tok = new StrTokenizer((String) null, ' ', '"'); [EOL]     assertFalse(tok.hasNext()); [EOL] }
@Test [EOL] public void testConstructor_String_char_char() { [EOL]     StrTokenizer tok = new StrTokenizer("a b", ' ', '"'); [EOL]     assertEquals(1, tok.getDelimiterMatcher().isMatch(" ".toCharArray(), 0, 0, 1)); [EOL]     assertEquals(1, tok.getQuoteMatcher().isMatch("\"".toCharArray(), 0, 0, 1)); [EOL]     assertEquals("a", tok.next()); [EOL]     assertEquals("b", tok.next()); [EOL]     assertFalse(tok.hasNext()); [EOL]     tok = new StrTokenizer("", ' ', '"'); [EOL]     assertFalse(tok.hasNext()); [EOL]     tok = new StrTokenizer((String) null, ' ', '"'); [EOL]     assertFalse(tok.hasNext()); [EOL] }
@Test [EOL] public void testConstructor_String_char_char() { [EOL]     StrTokenizer tok = new StrTokenizer("a b", ' ', '"'); [EOL]     assertEquals(1, tok.getDelimiterMatcher().isMatch(" ".toCharArray(), 0, 0, 1)); [EOL]     assertEquals(1, tok.getQuoteMatcher().isMatch("\"".toCharArray(), 0, 0, 1)); [EOL]     assertEquals("a", tok.next()); [EOL]     assertEquals("b", tok.next()); [EOL]     assertFalse(tok.hasNext()); [EOL]     tok = new StrTokenizer("", ' ', '"'); [EOL]     assertFalse(tok.hasNext()); [EOL]     tok = new StrTokenizer((String) null, ' ', '"'); [EOL]     assertFalse(tok.hasNext()); [EOL] }
@Test [EOL] public void testConstructor_String_char_char() { [EOL]     StrTokenizer tok = new StrTokenizer("a b", ' ', '"'); [EOL]     assertEquals(1, tok.getDelimiterMatcher().isMatch(" ".toCharArray(), 0, 0, 1)); [EOL]     assertEquals(1, tok.getQuoteMatcher().isMatch("\"".toCharArray(), 0, 0, 1)); [EOL]     assertEquals("a", tok.next()); [EOL]     assertEquals("b", tok.next()); [EOL]     assertFalse(tok.hasNext()); [EOL]     tok = new StrTokenizer("", ' ', '"'); [EOL]     assertFalse(tok.hasNext()); [EOL]     tok = new StrTokenizer((String) null, ' ', '"'); [EOL]     assertFalse(tok.hasNext()); [EOL] }
@Test [EOL] public void testConstructor_String_char_char() { [EOL]     StrTokenizer tok = new StrTokenizer("a b", ' ', '"'); [EOL]     assertEquals(1, tok.getDelimiterMatcher().isMatch(" ".toCharArray(), 0, 0, 1)); [EOL]     assertEquals(1, tok.getQuoteMatcher().isMatch("\"".toCharArray(), 0, 0, 1)); [EOL]     assertEquals("a", tok.next()); [EOL]     assertEquals("b", tok.next()); [EOL]     assertFalse(tok.hasNext()); [EOL]     tok = new StrTokenizer("", ' ', '"'); [EOL]     assertFalse(tok.hasNext()); [EOL]     tok = new StrTokenizer((String) null, ' ', '"'); [EOL]     assertFalse(tok.hasNext()); [EOL] }
@Test [EOL] public void testConstructor_String_char_char() { [EOL]     StrTokenizer tok = new StrTokenizer("a b", ' ', '"'); [EOL]     assertEquals(1, tok.getDelimiterMatcher().isMatch(" ".toCharArray(), 0, 0, 1)); [EOL]     assertEquals(1, tok.getQuoteMatcher().isMatch("\"".toCharArray(), 0, 0, 1)); [EOL]     assertEquals("a", tok.next()); [EOL]     assertEquals("b", tok.next()); [EOL]     assertFalse(tok.hasNext()); [EOL]     tok = new StrTokenizer("", ' ', '"'); [EOL]     assertFalse(tok.hasNext()); [EOL]     tok = new StrTokenizer((String) null, ' ', '"'); [EOL]     assertFalse(tok.hasNext()); [EOL] }
@Test [EOL] public void testConstructor_String_char_char() { [EOL]     StrTokenizer tok = new StrTokenizer("a b", ' ', '"'); [EOL]     assertEquals(1, tok.getDelimiterMatcher().isMatch(" ".toCharArray(), 0, 0, 1)); [EOL]     assertEquals(1, tok.getQuoteMatcher().isMatch("\"".toCharArray(), 0, 0, 1)); [EOL]     assertEquals("a", tok.next()); [EOL]     assertEquals("b", tok.next()); [EOL]     assertFalse(tok.hasNext()); [EOL]     tok = new StrTokenizer("", ' ', '"'); [EOL]     assertFalse(tok.hasNext()); [EOL]     tok = new StrTokenizer((String) null, ' ', '"'); [EOL]     assertFalse(tok.hasNext()); [EOL] }
@Test [EOL] public void testBasicIgnoreTrimmed1() { [EOL]     final String input = "a: bIGNOREc : "; [EOL]     final StrTokenizer tok = new StrTokenizer(input, ':'); [EOL]     tok.setIgnoredMatcher(StrMatcher.stringMatcher("IGNORE")); [EOL]     tok.setTrimmerMatcher(StrMatcher.trimMatcher()); [EOL]     tok.setIgnoreEmptyTokens(false); [EOL]     tok.setEmptyTokenAsNull(true); [EOL]     assertEquals("a", tok.next()); [EOL]     assertEquals("bc", tok.next()); [EOL]     assertEquals(null, tok.next()); [EOL]     assertFalse(tok.hasNext()); [EOL] }
@Test [EOL] public void testBasicIgnoreTrimmed1() { [EOL]     final String input = "a: bIGNOREc : "; [EOL]     final StrTokenizer tok = new StrTokenizer(input, ':'); [EOL]     tok.setIgnoredMatcher(StrMatcher.stringMatcher("IGNORE")); [EOL]     tok.setTrimmerMatcher(StrMatcher.trimMatcher()); [EOL]     tok.setIgnoreEmptyTokens(false); [EOL]     tok.setEmptyTokenAsNull(true); [EOL]     assertEquals("a", tok.next()); [EOL]     assertEquals("bc", tok.next()); [EOL]     assertEquals(null, tok.next()); [EOL]     assertFalse(tok.hasNext()); [EOL] }
@Test [EOL] public void testBasicIgnoreTrimmed1() { [EOL]     final String input = "a: bIGNOREc : "; [EOL]     final StrTokenizer tok = new StrTokenizer(input, ':'); [EOL]     tok.setIgnoredMatcher(StrMatcher.stringMatcher("IGNORE")); [EOL]     tok.setTrimmerMatcher(StrMatcher.trimMatcher()); [EOL]     tok.setIgnoreEmptyTokens(false); [EOL]     tok.setEmptyTokenAsNull(true); [EOL]     assertEquals("a", tok.next()); [EOL]     assertEquals("bc", tok.next()); [EOL]     assertEquals(null, tok.next()); [EOL]     assertFalse(tok.hasNext()); [EOL] }
@Test [EOL] public void testBasicIgnoreTrimmed1() { [EOL]     final String input = "a: bIGNOREc : "; [EOL]     final StrTokenizer tok = new StrTokenizer(input, ':'); [EOL]     tok.setIgnoredMatcher(StrMatcher.stringMatcher("IGNORE")); [EOL]     tok.setTrimmerMatcher(StrMatcher.trimMatcher()); [EOL]     tok.setIgnoreEmptyTokens(false); [EOL]     tok.setEmptyTokenAsNull(true); [EOL]     assertEquals("a", tok.next()); [EOL]     assertEquals("bc", tok.next()); [EOL]     assertEquals(null, tok.next()); [EOL]     assertFalse(tok.hasNext()); [EOL] }
@Test [EOL] public void testBasicIgnoreTrimmed1() { [EOL]     final String input = "a: bIGNOREc : "; [EOL]     final StrTokenizer tok = new StrTokenizer(input, ':'); [EOL]     tok.setIgnoredMatcher(StrMatcher.stringMatcher("IGNORE")); [EOL]     tok.setTrimmerMatcher(StrMatcher.trimMatcher()); [EOL]     tok.setIgnoreEmptyTokens(false); [EOL]     tok.setEmptyTokenAsNull(true); [EOL]     assertEquals("a", tok.next()); [EOL]     assertEquals("bc", tok.next()); [EOL]     assertEquals(null, tok.next()); [EOL]     assertFalse(tok.hasNext()); [EOL] }
@Test [EOL] public void testBasicIgnoreTrimmed1() { [EOL]     final String input = "a: bIGNOREc : "; [EOL]     final StrTokenizer tok = new StrTokenizer(input, ':'); [EOL]     tok.setIgnoredMatcher(StrMatcher.stringMatcher("IGNORE")); [EOL]     tok.setTrimmerMatcher(StrMatcher.trimMatcher()); [EOL]     tok.setIgnoreEmptyTokens(false); [EOL]     tok.setEmptyTokenAsNull(true); [EOL]     assertEquals("a", tok.next()); [EOL]     assertEquals("bc", tok.next()); [EOL]     assertEquals(null, tok.next()); [EOL]     assertFalse(tok.hasNext()); [EOL] }
@Test [EOL] public void testBasicIgnoreTrimmed1() { [EOL]     final String input = "a: bIGNOREc : "; [EOL]     final StrTokenizer tok = new StrTokenizer(input, ':'); [EOL]     tok.setIgnoredMatcher(StrMatcher.stringMatcher("IGNORE")); [EOL]     tok.setTrimmerMatcher(StrMatcher.trimMatcher()); [EOL]     tok.setIgnoreEmptyTokens(false); [EOL]     tok.setEmptyTokenAsNull(true); [EOL]     assertEquals("a", tok.next()); [EOL]     assertEquals("bc", tok.next()); [EOL]     assertEquals(null, tok.next()); [EOL]     assertFalse(tok.hasNext()); [EOL] }
@Test [EOL] public void testBasicIgnoreTrimmed1() { [EOL]     final String input = "a: bIGNOREc : "; [EOL]     final StrTokenizer tok = new StrTokenizer(input, ':'); [EOL]     tok.setIgnoredMatcher(StrMatcher.stringMatcher("IGNORE")); [EOL]     tok.setTrimmerMatcher(StrMatcher.trimMatcher()); [EOL]     tok.setIgnoreEmptyTokens(false); [EOL]     tok.setEmptyTokenAsNull(true); [EOL]     assertEquals("a", tok.next()); [EOL]     assertEquals("bc", tok.next()); [EOL]     assertEquals(null, tok.next()); [EOL]     assertFalse(tok.hasNext()); [EOL] }
@Test [EOL] public void testBasicIgnoreTrimmed1() { [EOL]     final String input = "a: bIGNOREc : "; [EOL]     final StrTokenizer tok = new StrTokenizer(input, ':'); [EOL]     tok.setIgnoredMatcher(StrMatcher.stringMatcher("IGNORE")); [EOL]     tok.setTrimmerMatcher(StrMatcher.trimMatcher()); [EOL]     tok.setIgnoreEmptyTokens(false); [EOL]     tok.setEmptyTokenAsNull(true); [EOL]     assertEquals("a", tok.next()); [EOL]     assertEquals("bc", tok.next()); [EOL]     assertEquals(null, tok.next()); [EOL]     assertFalse(tok.hasNext()); [EOL] }
@Test [EOL] public void testBasicIgnoreTrimmed1() { [EOL]     final String input = "a: bIGNOREc : "; [EOL]     final StrTokenizer tok = new StrTokenizer(input, ':'); [EOL]     tok.setIgnoredMatcher(StrMatcher.stringMatcher("IGNORE")); [EOL]     tok.setTrimmerMatcher(StrMatcher.trimMatcher()); [EOL]     tok.setIgnoreEmptyTokens(false); [EOL]     tok.setEmptyTokenAsNull(true); [EOL]     assertEquals("a", tok.next()); [EOL]     assertEquals("bc", tok.next()); [EOL]     assertEquals(null, tok.next()); [EOL]     assertFalse(tok.hasNext()); [EOL] }
@Test [EOL] public void testBasicIgnoreTrimmed1() { [EOL]     final String input = "a: bIGNOREc : "; [EOL]     final StrTokenizer tok = new StrTokenizer(input, ':'); [EOL]     tok.setIgnoredMatcher(StrMatcher.stringMatcher("IGNORE")); [EOL]     tok.setTrimmerMatcher(StrMatcher.trimMatcher()); [EOL]     tok.setIgnoreEmptyTokens(false); [EOL]     tok.setEmptyTokenAsNull(true); [EOL]     assertEquals("a", tok.next()); [EOL]     assertEquals("bc", tok.next()); [EOL]     assertEquals(null, tok.next()); [EOL]     assertFalse(tok.hasNext()); [EOL] }
@Test [EOL] public void testChaining() { [EOL]     final StrTokenizer tok = new StrTokenizer(); [EOL]     assertEquals(tok, tok.reset()); [EOL]     assertEquals(tok, tok.reset("")); [EOL]     assertEquals(tok, tok.reset(new char[0])); [EOL]     assertEquals(tok, tok.setDelimiterChar(' ')); [EOL]     assertEquals(tok, tok.setDelimiterString(" ")); [EOL]     assertEquals(tok, tok.setDelimiterMatcher(null)); [EOL]     assertEquals(tok, tok.setQuoteChar(' ')); [EOL]     assertEquals(tok, tok.setQuoteMatcher(null)); [EOL]     assertEquals(tok, tok.setIgnoredChar(' ')); [EOL]     assertEquals(tok, tok.setIgnoredMatcher(null)); [EOL]     assertEquals(tok, tok.setTrimmerMatcher(null)); [EOL]     assertEquals(tok, tok.setEmptyTokenAsNull(false)); [EOL]     assertEquals(tok, tok.setIgnoreEmptyTokens(false)); [EOL] }
@Test [EOL] public void testChaining() { [EOL]     final StrTokenizer tok = new StrTokenizer(); [EOL]     assertEquals(tok, tok.reset()); [EOL]     assertEquals(tok, tok.reset("")); [EOL]     assertEquals(tok, tok.reset(new char[0])); [EOL]     assertEquals(tok, tok.setDelimiterChar(' ')); [EOL]     assertEquals(tok, tok.setDelimiterString(" ")); [EOL]     assertEquals(tok, tok.setDelimiterMatcher(null)); [EOL]     assertEquals(tok, tok.setQuoteChar(' ')); [EOL]     assertEquals(tok, tok.setQuoteMatcher(null)); [EOL]     assertEquals(tok, tok.setIgnoredChar(' ')); [EOL]     assertEquals(tok, tok.setIgnoredMatcher(null)); [EOL]     assertEquals(tok, tok.setTrimmerMatcher(null)); [EOL]     assertEquals(tok, tok.setEmptyTokenAsNull(false)); [EOL]     assertEquals(tok, tok.setIgnoreEmptyTokens(false)); [EOL] }
@Test [EOL] public void testChaining() { [EOL]     final StrTokenizer tok = new StrTokenizer(); [EOL]     assertEquals(tok, tok.reset()); [EOL]     assertEquals(tok, tok.reset("")); [EOL]     assertEquals(tok, tok.reset(new char[0])); [EOL]     assertEquals(tok, tok.setDelimiterChar(' ')); [EOL]     assertEquals(tok, tok.setDelimiterString(" ")); [EOL]     assertEquals(tok, tok.setDelimiterMatcher(null)); [EOL]     assertEquals(tok, tok.setQuoteChar(' ')); [EOL]     assertEquals(tok, tok.setQuoteMatcher(null)); [EOL]     assertEquals(tok, tok.setIgnoredChar(' ')); [EOL]     assertEquals(tok, tok.setIgnoredMatcher(null)); [EOL]     assertEquals(tok, tok.setTrimmerMatcher(null)); [EOL]     assertEquals(tok, tok.setEmptyTokenAsNull(false)); [EOL]     assertEquals(tok, tok.setIgnoreEmptyTokens(false)); [EOL] }
@Test [EOL] public void testChaining() { [EOL]     final StrTokenizer tok = new StrTokenizer(); [EOL]     assertEquals(tok, tok.reset()); [EOL]     assertEquals(tok, tok.reset("")); [EOL]     assertEquals(tok, tok.reset(new char[0])); [EOL]     assertEquals(tok, tok.setDelimiterChar(' ')); [EOL]     assertEquals(tok, tok.setDelimiterString(" ")); [EOL]     assertEquals(tok, tok.setDelimiterMatcher(null)); [EOL]     assertEquals(tok, tok.setQuoteChar(' ')); [EOL]     assertEquals(tok, tok.setQuoteMatcher(null)); [EOL]     assertEquals(tok, tok.setIgnoredChar(' ')); [EOL]     assertEquals(tok, tok.setIgnoredMatcher(null)); [EOL]     assertEquals(tok, tok.setTrimmerMatcher(null)); [EOL]     assertEquals(tok, tok.setEmptyTokenAsNull(false)); [EOL]     assertEquals(tok, tok.setIgnoreEmptyTokens(false)); [EOL] }
@Test [EOL] public void testChaining() { [EOL]     final StrTokenizer tok = new StrTokenizer(); [EOL]     assertEquals(tok, tok.reset()); [EOL]     assertEquals(tok, tok.reset("")); [EOL]     assertEquals(tok, tok.reset(new char[0])); [EOL]     assertEquals(tok, tok.setDelimiterChar(' ')); [EOL]     assertEquals(tok, tok.setDelimiterString(" ")); [EOL]     assertEquals(tok, tok.setDelimiterMatcher(null)); [EOL]     assertEquals(tok, tok.setQuoteChar(' ')); [EOL]     assertEquals(tok, tok.setQuoteMatcher(null)); [EOL]     assertEquals(tok, tok.setIgnoredChar(' ')); [EOL]     assertEquals(tok, tok.setIgnoredMatcher(null)); [EOL]     assertEquals(tok, tok.setTrimmerMatcher(null)); [EOL]     assertEquals(tok, tok.setEmptyTokenAsNull(false)); [EOL]     assertEquals(tok, tok.setIgnoreEmptyTokens(false)); [EOL] }
@Test [EOL] public void testBasicIgnoreTrimmed1() { [EOL]     final String input = "a: bIGNOREc : "; [EOL]     final StrTokenizer tok = new StrTokenizer(input, ':'); [EOL]     tok.setIgnoredMatcher(StrMatcher.stringMatcher("IGNORE")); [EOL]     tok.setTrimmerMatcher(StrMatcher.trimMatcher()); [EOL]     tok.setIgnoreEmptyTokens(false); [EOL]     tok.setEmptyTokenAsNull(true); [EOL]     assertEquals("a", tok.next()); [EOL]     assertEquals("bc", tok.next()); [EOL]     assertEquals(null, tok.next()); [EOL]     assertFalse(tok.hasNext()); [EOL] }
@Test [EOL] public void testChaining() { [EOL]     final StrTokenizer tok = new StrTokenizer(); [EOL]     assertEquals(tok, tok.reset()); [EOL]     assertEquals(tok, tok.reset("")); [EOL]     assertEquals(tok, tok.reset(new char[0])); [EOL]     assertEquals(tok, tok.setDelimiterChar(' ')); [EOL]     assertEquals(tok, tok.setDelimiterString(" ")); [EOL]     assertEquals(tok, tok.setDelimiterMatcher(null)); [EOL]     assertEquals(tok, tok.setQuoteChar(' ')); [EOL]     assertEquals(tok, tok.setQuoteMatcher(null)); [EOL]     assertEquals(tok, tok.setIgnoredChar(' ')); [EOL]     assertEquals(tok, tok.setIgnoredMatcher(null)); [EOL]     assertEquals(tok, tok.setTrimmerMatcher(null)); [EOL]     assertEquals(tok, tok.setEmptyTokenAsNull(false)); [EOL]     assertEquals(tok, tok.setIgnoreEmptyTokens(false)); [EOL] }
@Test [EOL] public void testChaining() { [EOL]     final StrTokenizer tok = new StrTokenizer(); [EOL]     assertEquals(tok, tok.reset()); [EOL]     assertEquals(tok, tok.reset("")); [EOL]     assertEquals(tok, tok.reset(new char[0])); [EOL]     assertEquals(tok, tok.setDelimiterChar(' ')); [EOL]     assertEquals(tok, tok.setDelimiterString(" ")); [EOL]     assertEquals(tok, tok.setDelimiterMatcher(null)); [EOL]     assertEquals(tok, tok.setQuoteChar(' ')); [EOL]     assertEquals(tok, tok.setQuoteMatcher(null)); [EOL]     assertEquals(tok, tok.setIgnoredChar(' ')); [EOL]     assertEquals(tok, tok.setIgnoredMatcher(null)); [EOL]     assertEquals(tok, tok.setTrimmerMatcher(null)); [EOL]     assertEquals(tok, tok.setEmptyTokenAsNull(false)); [EOL]     assertEquals(tok, tok.setIgnoreEmptyTokens(false)); [EOL] }
@Test [EOL] public void testGetContent() { [EOL]     final String input = "a   b c \"d e\" f "; [EOL]     StrTokenizer tok = new StrTokenizer(input); [EOL]     assertEquals(input, tok.getContent()); [EOL]     tok = new StrTokenizer(input.toCharArray()); [EOL]     assertEquals(input, tok.getContent()); [EOL]     tok = new StrTokenizer(); [EOL]     assertEquals(null, tok.getContent()); [EOL] }
@Test [EOL] public void testGetContent() { [EOL]     final String input = "a   b c \"d e\" f "; [EOL]     StrTokenizer tok = new StrTokenizer(input); [EOL]     assertEquals(input, tok.getContent()); [EOL]     tok = new StrTokenizer(input.toCharArray()); [EOL]     assertEquals(input, tok.getContent()); [EOL]     tok = new StrTokenizer(); [EOL]     assertEquals(null, tok.getContent()); [EOL] }
@Test [EOL] public void testCloneNotSupportedException() { [EOL]     final Object notCloned = new StrTokenizer() { [EOL]  [EOL]         @Override [EOL]         Object cloneReset() throws CloneNotSupportedException { [EOL]             throw new CloneNotSupportedException("test"); [EOL]         } [EOL]     }.clone(); [EOL]     assertNull(notCloned); [EOL] }
@Test [EOL] public void testToString() { [EOL]     final StrTokenizer tkn = new StrTokenizer("a b c d e"); [EOL]     assertEquals("StrTokenizer[not tokenized yet]", tkn.toString()); [EOL]     tkn.next(); [EOL]     assertEquals("StrTokenizer[a, b, c, d, e]", tkn.toString()); [EOL] }
@Test [EOL] public void testSMTP() { [EOL]     final TimeZone timeZone = TimeZone.getTimeZone("GMT-3"); [EOL]     final Calendar cal = Calendar.getInstance(timeZone); [EOL]     cal.set(2003, 5, 8, 10, 11, 12); [EOL]     String text = DateFormatUtils.format(cal.getTime(), DateFormatUtils.SMTP_DATETIME_FORMAT.getPattern(), timeZone, DateFormatUtils.SMTP_DATETIME_FORMAT.getLocale()); [EOL]     assertEquals("Sun, 08 Jun 2003 10:11:12 -0300", text); [EOL]     text = DateFormatUtils.format(cal.getTime().getTime(), DateFormatUtils.SMTP_DATETIME_FORMAT.getPattern(), timeZone, DateFormatUtils.SMTP_DATETIME_FORMAT.getLocale()); [EOL]     assertEquals("Sun, 08 Jun 2003 10:11:12 -0300", text); [EOL]     text = DateFormatUtils.SMTP_DATETIME_FORMAT.format(cal); [EOL]     assertEquals("Sun, 08 Jun 2003 10:11:12 -0300", text); [EOL]     text = DateFormatUtils.formatUTC(cal.getTime().getTime(), DateFormatUtils.SMTP_DATETIME_FORMAT.getPattern(), DateFormatUtils.SMTP_DATETIME_FORMAT.getLocale()); [EOL]     assertEquals("Sun, 08 Jun 2003 13:11:12 +0000", text); [EOL] }
@Test [EOL] public void testSMTP() { [EOL]     final TimeZone timeZone = TimeZone.getTimeZone("GMT-3"); [EOL]     final Calendar cal = Calendar.getInstance(timeZone); [EOL]     cal.set(2003, 5, 8, 10, 11, 12); [EOL]     String text = DateFormatUtils.format(cal.getTime(), DateFormatUtils.SMTP_DATETIME_FORMAT.getPattern(), timeZone, DateFormatUtils.SMTP_DATETIME_FORMAT.getLocale()); [EOL]     assertEquals("Sun, 08 Jun 2003 10:11:12 -0300", text); [EOL]     text = DateFormatUtils.format(cal.getTime().getTime(), DateFormatUtils.SMTP_DATETIME_FORMAT.getPattern(), timeZone, DateFormatUtils.SMTP_DATETIME_FORMAT.getLocale()); [EOL]     assertEquals("Sun, 08 Jun 2003 10:11:12 -0300", text); [EOL]     text = DateFormatUtils.SMTP_DATETIME_FORMAT.format(cal); [EOL]     assertEquals("Sun, 08 Jun 2003 10:11:12 -0300", text); [EOL]     text = DateFormatUtils.formatUTC(cal.getTime().getTime(), DateFormatUtils.SMTP_DATETIME_FORMAT.getPattern(), DateFormatUtils.SMTP_DATETIME_FORMAT.getLocale()); [EOL]     assertEquals("Sun, 08 Jun 2003 13:11:12 +0000", text); [EOL] }
@Test [EOL] public void testSMTP() { [EOL]     final TimeZone timeZone = TimeZone.getTimeZone("GMT-3"); [EOL]     final Calendar cal = Calendar.getInstance(timeZone); [EOL]     cal.set(2003, 5, 8, 10, 11, 12); [EOL]     String text = DateFormatUtils.format(cal.getTime(), DateFormatUtils.SMTP_DATETIME_FORMAT.getPattern(), timeZone, DateFormatUtils.SMTP_DATETIME_FORMAT.getLocale()); [EOL]     assertEquals("Sun, 08 Jun 2003 10:11:12 -0300", text); [EOL]     text = DateFormatUtils.format(cal.getTime().getTime(), DateFormatUtils.SMTP_DATETIME_FORMAT.getPattern(), timeZone, DateFormatUtils.SMTP_DATETIME_FORMAT.getLocale()); [EOL]     assertEquals("Sun, 08 Jun 2003 10:11:12 -0300", text); [EOL]     text = DateFormatUtils.SMTP_DATETIME_FORMAT.format(cal); [EOL]     assertEquals("Sun, 08 Jun 2003 10:11:12 -0300", text); [EOL]     text = DateFormatUtils.formatUTC(cal.getTime().getTime(), DateFormatUtils.SMTP_DATETIME_FORMAT.getPattern(), DateFormatUtils.SMTP_DATETIME_FORMAT.getLocale()); [EOL]     assertEquals("Sun, 08 Jun 2003 13:11:12 +0000", text); [EOL] }
@Test [EOL] public void testFormat() { [EOL]     final Calendar c = Calendar.getInstance(TimeZone.getTimeZone("UTC")); [EOL]     c.set(2005, 0, 1, 12, 0, 0); [EOL]     c.setTimeZone(TimeZone.getDefault()); [EOL]     final StringBuilder buffer = new StringBuilder(); [EOL]     final int year = c.get(Calendar.YEAR); [EOL]     final int month = c.get(Calendar.MONTH) + 1; [EOL]     final int day = c.get(Calendar.DAY_OF_MONTH); [EOL]     final int hour = c.get(Calendar.HOUR_OF_DAY); [EOL]     buffer.append(year); [EOL]     buffer.append(month); [EOL]     buffer.append(day); [EOL]     buffer.append(hour); [EOL]     assertEquals(buffer.toString(), DateFormatUtils.format(c.getTime(), "yyyyMdH")); [EOL]     assertEquals(buffer.toString(), DateFormatUtils.format(c.getTime().getTime(), "yyyyMdH")); [EOL]     assertEquals(buffer.toString(), DateFormatUtils.format(c.getTime(), "yyyyMdH", Locale.US)); [EOL]     assertEquals(buffer.toString(), DateFormatUtils.format(c.getTime().getTime(), "yyyyMdH", Locale.US)); [EOL] }
@Test [EOL] public void testFormat() { [EOL]     final Calendar c = Calendar.getInstance(TimeZone.getTimeZone("UTC")); [EOL]     c.set(2005, 0, 1, 12, 0, 0); [EOL]     c.setTimeZone(TimeZone.getDefault()); [EOL]     final StringBuilder buffer = new StringBuilder(); [EOL]     final int year = c.get(Calendar.YEAR); [EOL]     final int month = c.get(Calendar.MONTH) + 1; [EOL]     final int day = c.get(Calendar.DAY_OF_MONTH); [EOL]     final int hour = c.get(Calendar.HOUR_OF_DAY); [EOL]     buffer.append(year); [EOL]     buffer.append(month); [EOL]     buffer.append(day); [EOL]     buffer.append(hour); [EOL]     assertEquals(buffer.toString(), DateFormatUtils.format(c.getTime(), "yyyyMdH")); [EOL]     assertEquals(buffer.toString(), DateFormatUtils.format(c.getTime().getTime(), "yyyyMdH")); [EOL]     assertEquals(buffer.toString(), DateFormatUtils.format(c.getTime(), "yyyyMdH", Locale.US)); [EOL]     assertEquals(buffer.toString(), DateFormatUtils.format(c.getTime().getTime(), "yyyyMdH", Locale.US)); [EOL] }
@Test [EOL] public void testFormat() { [EOL]     final Calendar c = Calendar.getInstance(TimeZone.getTimeZone("UTC")); [EOL]     c.set(2005, 0, 1, 12, 0, 0); [EOL]     c.setTimeZone(TimeZone.getDefault()); [EOL]     final StringBuilder buffer = new StringBuilder(); [EOL]     final int year = c.get(Calendar.YEAR); [EOL]     final int month = c.get(Calendar.MONTH) + 1; [EOL]     final int day = c.get(Calendar.DAY_OF_MONTH); [EOL]     final int hour = c.get(Calendar.HOUR_OF_DAY); [EOL]     buffer.append(year); [EOL]     buffer.append(month); [EOL]     buffer.append(day); [EOL]     buffer.append(hour); [EOL]     assertEquals(buffer.toString(), DateFormatUtils.format(c.getTime(), "yyyyMdH")); [EOL]     assertEquals(buffer.toString(), DateFormatUtils.format(c.getTime().getTime(), "yyyyMdH")); [EOL]     assertEquals(buffer.toString(), DateFormatUtils.format(c.getTime(), "yyyyMdH", Locale.US)); [EOL]     assertEquals(buffer.toString(), DateFormatUtils.format(c.getTime().getTime(), "yyyyMdH", Locale.US)); [EOL] }
@Test [EOL] public void testFormat() { [EOL]     final Calendar c = Calendar.getInstance(TimeZone.getTimeZone("UTC")); [EOL]     c.set(2005, 0, 1, 12, 0, 0); [EOL]     c.setTimeZone(TimeZone.getDefault()); [EOL]     final StringBuilder buffer = new StringBuilder(); [EOL]     final int year = c.get(Calendar.YEAR); [EOL]     final int month = c.get(Calendar.MONTH) + 1; [EOL]     final int day = c.get(Calendar.DAY_OF_MONTH); [EOL]     final int hour = c.get(Calendar.HOUR_OF_DAY); [EOL]     buffer.append(year); [EOL]     buffer.append(month); [EOL]     buffer.append(day); [EOL]     buffer.append(hour); [EOL]     assertEquals(buffer.toString(), DateFormatUtils.format(c.getTime(), "yyyyMdH")); [EOL]     assertEquals(buffer.toString(), DateFormatUtils.format(c.getTime().getTime(), "yyyyMdH")); [EOL]     assertEquals(buffer.toString(), DateFormatUtils.format(c.getTime(), "yyyyMdH", Locale.US)); [EOL]     assertEquals(buffer.toString(), DateFormatUtils.format(c.getTime().getTime(), "yyyyMdH", Locale.US)); [EOL] }
@Test [EOL] public void testFormat() { [EOL]     final Calendar c = Calendar.getInstance(TimeZone.getTimeZone("UTC")); [EOL]     c.set(2005, 0, 1, 12, 0, 0); [EOL]     c.setTimeZone(TimeZone.getDefault()); [EOL]     final StringBuilder buffer = new StringBuilder(); [EOL]     final int year = c.get(Calendar.YEAR); [EOL]     final int month = c.get(Calendar.MONTH) + 1; [EOL]     final int day = c.get(Calendar.DAY_OF_MONTH); [EOL]     final int hour = c.get(Calendar.HOUR_OF_DAY); [EOL]     buffer.append(year); [EOL]     buffer.append(month); [EOL]     buffer.append(day); [EOL]     buffer.append(hour); [EOL]     assertEquals(buffer.toString(), DateFormatUtils.format(c.getTime(), "yyyyMdH")); [EOL]     assertEquals(buffer.toString(), DateFormatUtils.format(c.getTime().getTime(), "yyyyMdH")); [EOL]     assertEquals(buffer.toString(), DateFormatUtils.format(c.getTime(), "yyyyMdH", Locale.US)); [EOL]     assertEquals(buffer.toString(), DateFormatUtils.format(c.getTime().getTime(), "yyyyMdH", Locale.US)); [EOL] }
@Test [EOL] public void testSMTP() { [EOL]     final TimeZone timeZone = TimeZone.getTimeZone("GMT-3"); [EOL]     final Calendar cal = Calendar.getInstance(timeZone); [EOL]     cal.set(2003, 5, 8, 10, 11, 12); [EOL]     String text = DateFormatUtils.format(cal.getTime(), DateFormatUtils.SMTP_DATETIME_FORMAT.getPattern(), timeZone, DateFormatUtils.SMTP_DATETIME_FORMAT.getLocale()); [EOL]     assertEquals("Sun, 08 Jun 2003 10:11:12 -0300", text); [EOL]     text = DateFormatUtils.format(cal.getTime().getTime(), DateFormatUtils.SMTP_DATETIME_FORMAT.getPattern(), timeZone, DateFormatUtils.SMTP_DATETIME_FORMAT.getLocale()); [EOL]     assertEquals("Sun, 08 Jun 2003 10:11:12 -0300", text); [EOL]     text = DateFormatUtils.SMTP_DATETIME_FORMAT.format(cal); [EOL]     assertEquals("Sun, 08 Jun 2003 10:11:12 -0300", text); [EOL]     text = DateFormatUtils.formatUTC(cal.getTime().getTime(), DateFormatUtils.SMTP_DATETIME_FORMAT.getPattern(), DateFormatUtils.SMTP_DATETIME_FORMAT.getLocale()); [EOL]     assertEquals("Sun, 08 Jun 2003 13:11:12 +0000", text); [EOL] }
@Test [EOL] public void testSMTP() { [EOL]     final TimeZone timeZone = TimeZone.getTimeZone("GMT-3"); [EOL]     final Calendar cal = Calendar.getInstance(timeZone); [EOL]     cal.set(2003, 5, 8, 10, 11, 12); [EOL]     String text = DateFormatUtils.format(cal.getTime(), DateFormatUtils.SMTP_DATETIME_FORMAT.getPattern(), timeZone, DateFormatUtils.SMTP_DATETIME_FORMAT.getLocale()); [EOL]     assertEquals("Sun, 08 Jun 2003 10:11:12 -0300", text); [EOL]     text = DateFormatUtils.format(cal.getTime().getTime(), DateFormatUtils.SMTP_DATETIME_FORMAT.getPattern(), timeZone, DateFormatUtils.SMTP_DATETIME_FORMAT.getLocale()); [EOL]     assertEquals("Sun, 08 Jun 2003 10:11:12 -0300", text); [EOL]     text = DateFormatUtils.SMTP_DATETIME_FORMAT.format(cal); [EOL]     assertEquals("Sun, 08 Jun 2003 10:11:12 -0300", text); [EOL]     text = DateFormatUtils.formatUTC(cal.getTime().getTime(), DateFormatUtils.SMTP_DATETIME_FORMAT.getPattern(), DateFormatUtils.SMTP_DATETIME_FORMAT.getLocale()); [EOL]     assertEquals("Sun, 08 Jun 2003 13:11:12 +0000", text); [EOL] }
@Test [EOL] public void testSMTP() { [EOL]     final TimeZone timeZone = TimeZone.getTimeZone("GMT-3"); [EOL]     final Calendar cal = Calendar.getInstance(timeZone); [EOL]     cal.set(2003, 5, 8, 10, 11, 12); [EOL]     String text = DateFormatUtils.format(cal.getTime(), DateFormatUtils.SMTP_DATETIME_FORMAT.getPattern(), timeZone, DateFormatUtils.SMTP_DATETIME_FORMAT.getLocale()); [EOL]     assertEquals("Sun, 08 Jun 2003 10:11:12 -0300", text); [EOL]     text = DateFormatUtils.format(cal.getTime().getTime(), DateFormatUtils.SMTP_DATETIME_FORMAT.getPattern(), timeZone, DateFormatUtils.SMTP_DATETIME_FORMAT.getLocale()); [EOL]     assertEquals("Sun, 08 Jun 2003 10:11:12 -0300", text); [EOL]     text = DateFormatUtils.SMTP_DATETIME_FORMAT.format(cal); [EOL]     assertEquals("Sun, 08 Jun 2003 10:11:12 -0300", text); [EOL]     text = DateFormatUtils.formatUTC(cal.getTime().getTime(), DateFormatUtils.SMTP_DATETIME_FORMAT.getPattern(), DateFormatUtils.SMTP_DATETIME_FORMAT.getLocale()); [EOL]     assertEquals("Sun, 08 Jun 2003 13:11:12 +0000", text); [EOL] }
@Test [EOL] public void testSMTP() { [EOL]     final TimeZone timeZone = TimeZone.getTimeZone("GMT-3"); [EOL]     final Calendar cal = Calendar.getInstance(timeZone); [EOL]     cal.set(2003, 5, 8, 10, 11, 12); [EOL]     String text = DateFormatUtils.format(cal.getTime(), DateFormatUtils.SMTP_DATETIME_FORMAT.getPattern(), timeZone, DateFormatUtils.SMTP_DATETIME_FORMAT.getLocale()); [EOL]     assertEquals("Sun, 08 Jun 2003 10:11:12 -0300", text); [EOL]     text = DateFormatUtils.format(cal.getTime().getTime(), DateFormatUtils.SMTP_DATETIME_FORMAT.getPattern(), timeZone, DateFormatUtils.SMTP_DATETIME_FORMAT.getLocale()); [EOL]     assertEquals("Sun, 08 Jun 2003 10:11:12 -0300", text); [EOL]     text = DateFormatUtils.SMTP_DATETIME_FORMAT.format(cal); [EOL]     assertEquals("Sun, 08 Jun 2003 10:11:12 -0300", text); [EOL]     text = DateFormatUtils.formatUTC(cal.getTime().getTime(), DateFormatUtils.SMTP_DATETIME_FORMAT.getPattern(), DateFormatUtils.SMTP_DATETIME_FORMAT.getLocale()); [EOL]     assertEquals("Sun, 08 Jun 2003 13:11:12 +0000", text); [EOL] }
@Test [EOL] public void testMilleniumBug() { [EOL]     final Calendar cal = Calendar.getInstance(); [EOL]     final DatePrinter format = getInstance("dd.MM.yyyy"); [EOL]     cal.set(1000, 0, 1); [EOL]     assertEquals("01.01.1000", format.format(cal)); [EOL] }
@Test [EOL] public void testMilleniumBug() { [EOL]     final Calendar cal = Calendar.getInstance(); [EOL]     final DatePrinter format = getInstance("dd.MM.yyyy"); [EOL]     cal.set(1000, 0, 1); [EOL]     assertEquals("01.01.1000", format.format(cal)); [EOL] }
@Test [EOL] public void testMilleniumBug() { [EOL]     final Calendar cal = Calendar.getInstance(); [EOL]     final DatePrinter format = getInstance("dd.MM.yyyy"); [EOL]     cal.set(1000, 0, 1); [EOL]     assertEquals("01.01.1000", format.format(cal)); [EOL] }
@Test [EOL] public void testMilleniumBug() { [EOL]     final Calendar cal = Calendar.getInstance(); [EOL]     final DatePrinter format = getInstance("dd.MM.yyyy"); [EOL]     cal.set(1000, 0, 1); [EOL]     assertEquals("01.01.1000", format.format(cal)); [EOL] }
@Test [EOL] public void testSMTP() { [EOL]     final TimeZone timeZone = TimeZone.getTimeZone("GMT-3"); [EOL]     final Calendar cal = Calendar.getInstance(timeZone); [EOL]     cal.set(2003, 5, 8, 10, 11, 12); [EOL]     String text = DateFormatUtils.format(cal.getTime(), DateFormatUtils.SMTP_DATETIME_FORMAT.getPattern(), timeZone, DateFormatUtils.SMTP_DATETIME_FORMAT.getLocale()); [EOL]     assertEquals("Sun, 08 Jun 2003 10:11:12 -0300", text); [EOL]     text = DateFormatUtils.format(cal.getTime().getTime(), DateFormatUtils.SMTP_DATETIME_FORMAT.getPattern(), timeZone, DateFormatUtils.SMTP_DATETIME_FORMAT.getLocale()); [EOL]     assertEquals("Sun, 08 Jun 2003 10:11:12 -0300", text); [EOL]     text = DateFormatUtils.SMTP_DATETIME_FORMAT.format(cal); [EOL]     assertEquals("Sun, 08 Jun 2003 10:11:12 -0300", text); [EOL]     text = DateFormatUtils.formatUTC(cal.getTime().getTime(), DateFormatUtils.SMTP_DATETIME_FORMAT.getPattern(), DateFormatUtils.SMTP_DATETIME_FORMAT.getLocale()); [EOL]     assertEquals("Sun, 08 Jun 2003 13:11:12 +0000", text); [EOL] }
@Test [EOL] public void testSMTP() { [EOL]     final TimeZone timeZone = TimeZone.getTimeZone("GMT-3"); [EOL]     final Calendar cal = Calendar.getInstance(timeZone); [EOL]     cal.set(2003, 5, 8, 10, 11, 12); [EOL]     String text = DateFormatUtils.format(cal.getTime(), DateFormatUtils.SMTP_DATETIME_FORMAT.getPattern(), timeZone, DateFormatUtils.SMTP_DATETIME_FORMAT.getLocale()); [EOL]     assertEquals("Sun, 08 Jun 2003 10:11:12 -0300", text); [EOL]     text = DateFormatUtils.format(cal.getTime().getTime(), DateFormatUtils.SMTP_DATETIME_FORMAT.getPattern(), timeZone, DateFormatUtils.SMTP_DATETIME_FORMAT.getLocale()); [EOL]     assertEquals("Sun, 08 Jun 2003 10:11:12 -0300", text); [EOL]     text = DateFormatUtils.SMTP_DATETIME_FORMAT.format(cal); [EOL]     assertEquals("Sun, 08 Jun 2003 10:11:12 -0300", text); [EOL]     text = DateFormatUtils.formatUTC(cal.getTime().getTime(), DateFormatUtils.SMTP_DATETIME_FORMAT.getPattern(), DateFormatUtils.SMTP_DATETIME_FORMAT.getLocale()); [EOL]     assertEquals("Sun, 08 Jun 2003 13:11:12 +0000", text); [EOL] }
@Test [EOL] public void testSMTP() { [EOL]     final TimeZone timeZone = TimeZone.getTimeZone("GMT-3"); [EOL]     final Calendar cal = Calendar.getInstance(timeZone); [EOL]     cal.set(2003, 5, 8, 10, 11, 12); [EOL]     String text = DateFormatUtils.format(cal.getTime(), DateFormatUtils.SMTP_DATETIME_FORMAT.getPattern(), timeZone, DateFormatUtils.SMTP_DATETIME_FORMAT.getLocale()); [EOL]     assertEquals("Sun, 08 Jun 2003 10:11:12 -0300", text); [EOL]     text = DateFormatUtils.format(cal.getTime().getTime(), DateFormatUtils.SMTP_DATETIME_FORMAT.getPattern(), timeZone, DateFormatUtils.SMTP_DATETIME_FORMAT.getLocale()); [EOL]     assertEquals("Sun, 08 Jun 2003 10:11:12 -0300", text); [EOL]     text = DateFormatUtils.SMTP_DATETIME_FORMAT.format(cal); [EOL]     assertEquals("Sun, 08 Jun 2003 10:11:12 -0300", text); [EOL]     text = DateFormatUtils.formatUTC(cal.getTime().getTime(), DateFormatUtils.SMTP_DATETIME_FORMAT.getPattern(), DateFormatUtils.SMTP_DATETIME_FORMAT.getLocale()); [EOL]     assertEquals("Sun, 08 Jun 2003 13:11:12 +0000", text); [EOL] }
@Test [EOL] public void testSMTP() { [EOL]     final TimeZone timeZone = TimeZone.getTimeZone("GMT-3"); [EOL]     final Calendar cal = Calendar.getInstance(timeZone); [EOL]     cal.set(2003, 5, 8, 10, 11, 12); [EOL]     String text = DateFormatUtils.format(cal.getTime(), DateFormatUtils.SMTP_DATETIME_FORMAT.getPattern(), timeZone, DateFormatUtils.SMTP_DATETIME_FORMAT.getLocale()); [EOL]     assertEquals("Sun, 08 Jun 2003 10:11:12 -0300", text); [EOL]     text = DateFormatUtils.format(cal.getTime().getTime(), DateFormatUtils.SMTP_DATETIME_FORMAT.getPattern(), timeZone, DateFormatUtils.SMTP_DATETIME_FORMAT.getLocale()); [EOL]     assertEquals("Sun, 08 Jun 2003 10:11:12 -0300", text); [EOL]     text = DateFormatUtils.SMTP_DATETIME_FORMAT.format(cal); [EOL]     assertEquals("Sun, 08 Jun 2003 10:11:12 -0300", text); [EOL]     text = DateFormatUtils.formatUTC(cal.getTime().getTime(), DateFormatUtils.SMTP_DATETIME_FORMAT.getPattern(), DateFormatUtils.SMTP_DATETIME_FORMAT.getLocale()); [EOL]     assertEquals("Sun, 08 Jun 2003 13:11:12 +0000", text); [EOL] }
@Test [EOL] public void testDoubleArray() { [EOL]     double[] obj1 = new double[2]; [EOL]     obj1[0] = 5; [EOL]     obj1[1] = 6; [EOL]     double[] obj2 = new double[2]; [EOL]     obj2[0] = 5; [EOL]     obj2[1] = 6; [EOL]     assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]     obj1[1] = 7; [EOL]     assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]     obj2 = null; [EOL]     assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]     obj1 = null; [EOL]     assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL] }
@Test [EOL] public void testReflectionEqualsExcludeFields() throws Exception { [EOL]     final TestObjectWithMultipleFields x1 = new TestObjectWithMultipleFields(1, 2, 3); [EOL]     final TestObjectWithMultipleFields x2 = new TestObjectWithMultipleFields(1, 3, 4); [EOL]     assertTrue(!EqualsBuilder.reflectionEquals(x1, x2)); [EOL]     assertTrue(!EqualsBuilder.reflectionEquals(x1, x2, (String[]) null)); [EOL]     assertTrue(!EqualsBuilder.reflectionEquals(x1, x2, new String[] {})); [EOL]     assertTrue(!EqualsBuilder.reflectionEquals(x1, x2, new String[] { "xxx" })); [EOL]     assertTrue(!EqualsBuilder.reflectionEquals(x1, x2, new String[] { "two" })); [EOL]     assertTrue(!EqualsBuilder.reflectionEquals(x1, x2, new String[] { "three" })); [EOL]     assertTrue(EqualsBuilder.reflectionEquals(x1, x2, new String[] { "two", "three" })); [EOL]     assertTrue(EqualsBuilder.reflectionEquals(x1, x2, new String[] { "one", "two", "three" })); [EOL]     assertTrue(EqualsBuilder.reflectionEquals(x1, x2, new String[] { "one", "two", "three", "xxx" })); [EOL] }
@Test [EOL] public void testReflectionEqualsExcludeFields() throws Exception { [EOL]     final TestObjectWithMultipleFields x1 = new TestObjectWithMultipleFields(1, 2, 3); [EOL]     final TestObjectWithMultipleFields x2 = new TestObjectWithMultipleFields(1, 3, 4); [EOL]     assertTrue(!EqualsBuilder.reflectionEquals(x1, x2)); [EOL]     assertTrue(!EqualsBuilder.reflectionEquals(x1, x2, (String[]) null)); [EOL]     assertTrue(!EqualsBuilder.reflectionEquals(x1, x2, new String[] {})); [EOL]     assertTrue(!EqualsBuilder.reflectionEquals(x1, x2, new String[] { "xxx" })); [EOL]     assertTrue(!EqualsBuilder.reflectionEquals(x1, x2, new String[] { "two" })); [EOL]     assertTrue(!EqualsBuilder.reflectionEquals(x1, x2, new String[] { "three" })); [EOL]     assertTrue(EqualsBuilder.reflectionEquals(x1, x2, new String[] { "two", "three" })); [EOL]     assertTrue(EqualsBuilder.reflectionEquals(x1, x2, new String[] { "one", "two", "three" })); [EOL]     assertTrue(EqualsBuilder.reflectionEquals(x1, x2, new String[] { "one", "two", "three", "xxx" })); [EOL] }
@Test [EOL] public void testReflectionEqualsExcludeFields() throws Exception { [EOL]     final TestObjectWithMultipleFields x1 = new TestObjectWithMultipleFields(1, 2, 3); [EOL]     final TestObjectWithMultipleFields x2 = new TestObjectWithMultipleFields(1, 3, 4); [EOL]     assertTrue(!EqualsBuilder.reflectionEquals(x1, x2)); [EOL]     assertTrue(!EqualsBuilder.reflectionEquals(x1, x2, (String[]) null)); [EOL]     assertTrue(!EqualsBuilder.reflectionEquals(x1, x2, new String[] {})); [EOL]     assertTrue(!EqualsBuilder.reflectionEquals(x1, x2, new String[] { "xxx" })); [EOL]     assertTrue(!EqualsBuilder.reflectionEquals(x1, x2, new String[] { "two" })); [EOL]     assertTrue(!EqualsBuilder.reflectionEquals(x1, x2, new String[] { "three" })); [EOL]     assertTrue(EqualsBuilder.reflectionEquals(x1, x2, new String[] { "two", "three" })); [EOL]     assertTrue(EqualsBuilder.reflectionEquals(x1, x2, new String[] { "one", "two", "three" })); [EOL]     assertTrue(EqualsBuilder.reflectionEquals(x1, x2, new String[] { "one", "two", "three", "xxx" })); [EOL] }
@Test [EOL] public void testReflectionEqualsExcludeFields() throws Exception { [EOL]     final TestObjectWithMultipleFields x1 = new TestObjectWithMultipleFields(1, 2, 3); [EOL]     final TestObjectWithMultipleFields x2 = new TestObjectWithMultipleFields(1, 3, 4); [EOL]     assertTrue(!EqualsBuilder.reflectionEquals(x1, x2)); [EOL]     assertTrue(!EqualsBuilder.reflectionEquals(x1, x2, (String[]) null)); [EOL]     assertTrue(!EqualsBuilder.reflectionEquals(x1, x2, new String[] {})); [EOL]     assertTrue(!EqualsBuilder.reflectionEquals(x1, x2, new String[] { "xxx" })); [EOL]     assertTrue(!EqualsBuilder.reflectionEquals(x1, x2, new String[] { "two" })); [EOL]     assertTrue(!EqualsBuilder.reflectionEquals(x1, x2, new String[] { "three" })); [EOL]     assertTrue(EqualsBuilder.reflectionEquals(x1, x2, new String[] { "two", "three" })); [EOL]     assertTrue(EqualsBuilder.reflectionEquals(x1, x2, new String[] { "one", "two", "three" })); [EOL]     assertTrue(EqualsBuilder.reflectionEquals(x1, x2, new String[] { "one", "two", "three", "xxx" })); [EOL] }
@Test [EOL] public void testMultiFloatArray() { [EOL]     final float[][] array1 = new float[2][2]; [EOL]     final float[][] array2 = new float[2][2]; [EOL]     for (int i = 0; i < array1.length; ++i) { [EOL]         for (int j = 0; j < array1[0].length; j++) { [EOL]             array1[i][j] = (i + 1) * (j + 1); [EOL]             array2[i][j] = (i + 1) * (j + 1); [EOL]         } [EOL]     } [EOL]     assertTrue(new EqualsBuilder().append(array1, array1).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(array1, array2).isEquals()); [EOL]     array1[1][1] = 0; [EOL]     assertTrue(!new EqualsBuilder().append(array1, array2).isEquals()); [EOL] }
@Test [EOL] public void testMultiFloatArray() { [EOL]     final float[][] array1 = new float[2][2]; [EOL]     final float[][] array2 = new float[2][2]; [EOL]     for (int i = 0; i < array1.length; ++i) { [EOL]         for (int j = 0; j < array1[0].length; j++) { [EOL]             array1[i][j] = (i + 1) * (j + 1); [EOL]             array2[i][j] = (i + 1) * (j + 1); [EOL]         } [EOL]     } [EOL]     assertTrue(new EqualsBuilder().append(array1, array1).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(array1, array2).isEquals()); [EOL]     array1[1][1] = 0; [EOL]     assertTrue(!new EqualsBuilder().append(array1, array2).isEquals()); [EOL] }
@Test [EOL] public void testMultiFloatArray() { [EOL]     final float[][] array1 = new float[2][2]; [EOL]     final float[][] array2 = new float[2][2]; [EOL]     for (int i = 0; i < array1.length; ++i) { [EOL]         for (int j = 0; j < array1[0].length; j++) { [EOL]             array1[i][j] = (i + 1) * (j + 1); [EOL]             array2[i][j] = (i + 1) * (j + 1); [EOL]         } [EOL]     } [EOL]     assertTrue(new EqualsBuilder().append(array1, array1).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(array1, array2).isEquals()); [EOL]     array1[1][1] = 0; [EOL]     assertTrue(!new EqualsBuilder().append(array1, array2).isEquals()); [EOL] }
@Test [EOL] public void testMultiFloatArray() { [EOL]     final float[][] array1 = new float[2][2]; [EOL]     final float[][] array2 = new float[2][2]; [EOL]     for (int i = 0; i < array1.length; ++i) { [EOL]         for (int j = 0; j < array1[0].length; j++) { [EOL]             array1[i][j] = (i + 1) * (j + 1); [EOL]             array2[i][j] = (i + 1) * (j + 1); [EOL]         } [EOL]     } [EOL]     assertTrue(new EqualsBuilder().append(array1, array1).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(array1, array2).isEquals()); [EOL]     array1[1][1] = 0; [EOL]     assertTrue(!new EqualsBuilder().append(array1, array2).isEquals()); [EOL] }
@Test [EOL] public void testMultiFloatArray() { [EOL]     final float[][] array1 = new float[2][2]; [EOL]     final float[][] array2 = new float[2][2]; [EOL]     for (int i = 0; i < array1.length; ++i) { [EOL]         for (int j = 0; j < array1[0].length; j++) { [EOL]             array1[i][j] = (i + 1) * (j + 1); [EOL]             array2[i][j] = (i + 1) * (j + 1); [EOL]         } [EOL]     } [EOL]     assertTrue(new EqualsBuilder().append(array1, array1).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(array1, array2).isEquals()); [EOL]     array1[1][1] = 0; [EOL]     assertTrue(!new EqualsBuilder().append(array1, array2).isEquals()); [EOL] }
@Test [EOL] public void testMultiFloatArray() { [EOL]     final float[][] array1 = new float[2][2]; [EOL]     final float[][] array2 = new float[2][2]; [EOL]     for (int i = 0; i < array1.length; ++i) { [EOL]         for (int j = 0; j < array1[0].length; j++) { [EOL]             array1[i][j] = (i + 1) * (j + 1); [EOL]             array2[i][j] = (i + 1) * (j + 1); [EOL]         } [EOL]     } [EOL]     assertTrue(new EqualsBuilder().append(array1, array1).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(array1, array2).isEquals()); [EOL]     array1[1][1] = 0; [EOL]     assertTrue(!new EqualsBuilder().append(array1, array2).isEquals()); [EOL] }
@Test [EOL] public void testMultiFloatArray() { [EOL]     final float[][] array1 = new float[2][2]; [EOL]     final float[][] array2 = new float[2][2]; [EOL]     for (int i = 0; i < array1.length; ++i) { [EOL]         for (int j = 0; j < array1[0].length; j++) { [EOL]             array1[i][j] = (i + 1) * (j + 1); [EOL]             array2[i][j] = (i + 1) * (j + 1); [EOL]         } [EOL]     } [EOL]     assertTrue(new EqualsBuilder().append(array1, array1).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(array1, array2).isEquals()); [EOL]     array1[1][1] = 0; [EOL]     assertTrue(!new EqualsBuilder().append(array1, array2).isEquals()); [EOL] }
@Test [EOL] public void testMultiFloatArray() { [EOL]     final float[][] array1 = new float[2][2]; [EOL]     final float[][] array2 = new float[2][2]; [EOL]     for (int i = 0; i < array1.length; ++i) { [EOL]         for (int j = 0; j < array1[0].length; j++) { [EOL]             array1[i][j] = (i + 1) * (j + 1); [EOL]             array2[i][j] = (i + 1) * (j + 1); [EOL]         } [EOL]     } [EOL]     assertTrue(new EqualsBuilder().append(array1, array1).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(array1, array2).isEquals()); [EOL]     array1[1][1] = 0; [EOL]     assertTrue(!new EqualsBuilder().append(array1, array2).isEquals()); [EOL] }
@Test [EOL] public void testMultiFloatArray() { [EOL]     final float[][] array1 = new float[2][2]; [EOL]     final float[][] array2 = new float[2][2]; [EOL]     for (int i = 0; i < array1.length; ++i) { [EOL]         for (int j = 0; j < array1[0].length; j++) { [EOL]             array1[i][j] = (i + 1) * (j + 1); [EOL]             array2[i][j] = (i + 1) * (j + 1); [EOL]         } [EOL]     } [EOL]     assertTrue(new EqualsBuilder().append(array1, array1).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(array1, array2).isEquals()); [EOL]     array1[1][1] = 0; [EOL]     assertTrue(!new EqualsBuilder().append(array1, array2).isEquals()); [EOL] }
@Test [EOL] public void testMultiFloatArray() { [EOL]     final float[][] array1 = new float[2][2]; [EOL]     final float[][] array2 = new float[2][2]; [EOL]     for (int i = 0; i < array1.length; ++i) { [EOL]         for (int j = 0; j < array1[0].length; j++) { [EOL]             array1[i][j] = (i + 1) * (j + 1); [EOL]             array2[i][j] = (i + 1) * (j + 1); [EOL]         } [EOL]     } [EOL]     assertTrue(new EqualsBuilder().append(array1, array1).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(array1, array2).isEquals()); [EOL]     array1[1][1] = 0; [EOL]     assertTrue(!new EqualsBuilder().append(array1, array2).isEquals()); [EOL] }
@Test [EOL] public void testMultiFloatArray() { [EOL]     final float[][] array1 = new float[2][2]; [EOL]     final float[][] array2 = new float[2][2]; [EOL]     for (int i = 0; i < array1.length; ++i) { [EOL]         for (int j = 0; j < array1[0].length; j++) { [EOL]             array1[i][j] = (i + 1) * (j + 1); [EOL]             array2[i][j] = (i + 1) * (j + 1); [EOL]         } [EOL]     } [EOL]     assertTrue(new EqualsBuilder().append(array1, array1).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(array1, array2).isEquals()); [EOL]     array1[1][1] = 0; [EOL]     assertTrue(!new EqualsBuilder().append(array1, array2).isEquals()); [EOL] }
@Test [EOL] public void testMultiFloatArray() { [EOL]     final float[][] array1 = new float[2][2]; [EOL]     final float[][] array2 = new float[2][2]; [EOL]     for (int i = 0; i < array1.length; ++i) { [EOL]         for (int j = 0; j < array1[0].length; j++) { [EOL]             array1[i][j] = (i + 1) * (j + 1); [EOL]             array2[i][j] = (i + 1) * (j + 1); [EOL]         } [EOL]     } [EOL]     assertTrue(new EqualsBuilder().append(array1, array1).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(array1, array2).isEquals()); [EOL]     array1[1][1] = 0; [EOL]     assertTrue(!new EqualsBuilder().append(array1, array2).isEquals()); [EOL] }
@Test [EOL] public void testMultiFloatArray() { [EOL]     final float[][] array1 = new float[2][2]; [EOL]     final float[][] array2 = new float[2][2]; [EOL]     for (int i = 0; i < array1.length; ++i) { [EOL]         for (int j = 0; j < array1[0].length; j++) { [EOL]             array1[i][j] = (i + 1) * (j + 1); [EOL]             array2[i][j] = (i + 1) * (j + 1); [EOL]         } [EOL]     } [EOL]     assertTrue(new EqualsBuilder().append(array1, array1).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(array1, array2).isEquals()); [EOL]     array1[1][1] = 0; [EOL]     assertTrue(!new EqualsBuilder().append(array1, array2).isEquals()); [EOL] }
@Test [EOL] public void testMultiFloatArray() { [EOL]     final float[][] array1 = new float[2][2]; [EOL]     final float[][] array2 = new float[2][2]; [EOL]     for (int i = 0; i < array1.length; ++i) { [EOL]         for (int j = 0; j < array1[0].length; j++) { [EOL]             array1[i][j] = (i + 1) * (j + 1); [EOL]             array2[i][j] = (i + 1) * (j + 1); [EOL]         } [EOL]     } [EOL]     assertTrue(new EqualsBuilder().append(array1, array1).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(array1, array2).isEquals()); [EOL]     array1[1][1] = 0; [EOL]     assertTrue(!new EqualsBuilder().append(array1, array2).isEquals()); [EOL] }
@Test [EOL] public void testDoubleArray() { [EOL]     double[] obj1 = new double[2]; [EOL]     obj1[0] = 5; [EOL]     obj1[1] = 6; [EOL]     double[] obj2 = new double[2]; [EOL]     obj2[0] = 5; [EOL]     obj2[1] = 6; [EOL]     assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]     obj1[1] = 7; [EOL]     assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]     obj2 = null; [EOL]     assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]     obj1 = null; [EOL]     assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL] }
@Test [EOL] public void testDoubleArray() { [EOL]     double[] obj1 = new double[2]; [EOL]     obj1[0] = 5; [EOL]     obj1[1] = 6; [EOL]     double[] obj2 = new double[2]; [EOL]     obj2[0] = 5; [EOL]     obj2[1] = 6; [EOL]     assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]     obj1[1] = 7; [EOL]     assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]     obj2 = null; [EOL]     assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]     obj1 = null; [EOL]     assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL] }
@Test [EOL] public void testDoubleArray() { [EOL]     double[] obj1 = new double[2]; [EOL]     obj1[0] = 5; [EOL]     obj1[1] = 6; [EOL]     double[] obj2 = new double[2]; [EOL]     obj2[0] = 5; [EOL]     obj2[1] = 6; [EOL]     assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]     obj1[1] = 7; [EOL]     assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]     obj2 = null; [EOL]     assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]     obj1 = null; [EOL]     assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL] }
@Test [EOL] public void testDoubleArray() { [EOL]     double[] obj1 = new double[2]; [EOL]     obj1[0] = 5; [EOL]     obj1[1] = 6; [EOL]     double[] obj2 = new double[2]; [EOL]     obj2[0] = 5; [EOL]     obj2[1] = 6; [EOL]     assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]     obj1[1] = 7; [EOL]     assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]     obj2 = null; [EOL]     assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]     obj1 = null; [EOL]     assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL] }
@Test [EOL] public void testDoubleArray() { [EOL]     double[] obj1 = new double[2]; [EOL]     obj1[0] = 5; [EOL]     obj1[1] = 6; [EOL]     double[] obj2 = new double[2]; [EOL]     obj2[0] = 5; [EOL]     obj2[1] = 6; [EOL]     assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]     obj1[1] = 7; [EOL]     assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]     obj2 = null; [EOL]     assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]     obj1 = null; [EOL]     assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL] }
@Test [EOL] public void testFloat() { [EOL]     final float o1 = 1; [EOL]     final float o2 = 2; [EOL]     assertTrue(new EqualsBuilder().append(o1, o1).isEquals()); [EOL]     assertTrue(!new EqualsBuilder().append(o1, o2).isEquals()); [EOL]     assertTrue(!new EqualsBuilder().append(o1, Float.NaN).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(Float.NaN, Float.NaN).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(Float.POSITIVE_INFINITY, Float.POSITIVE_INFINITY).isEquals()); [EOL] }
@Test [EOL] public void testFloat() { [EOL]     final float o1 = 1; [EOL]     final float o2 = 2; [EOL]     assertTrue(new EqualsBuilder().append(o1, o1).isEquals()); [EOL]     assertTrue(!new EqualsBuilder().append(o1, o2).isEquals()); [EOL]     assertTrue(!new EqualsBuilder().append(o1, Float.NaN).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(Float.NaN, Float.NaN).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(Float.POSITIVE_INFINITY, Float.POSITIVE_INFINITY).isEquals()); [EOL] }
@Test [EOL] public void testDoubleArray() { [EOL]     double[] obj1 = new double[2]; [EOL]     obj1[0] = 5; [EOL]     obj1[1] = 6; [EOL]     double[] obj2 = new double[2]; [EOL]     obj2[0] = 5; [EOL]     obj2[1] = 6; [EOL]     assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]     obj1[1] = 7; [EOL]     assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]     obj2 = null; [EOL]     assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]     obj1 = null; [EOL]     assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL] }
@Test [EOL] public void testDoubleArray() { [EOL]     double[] obj1 = new double[2]; [EOL]     obj1[0] = 5; [EOL]     obj1[1] = 6; [EOL]     double[] obj2 = new double[2]; [EOL]     obj2[0] = 5; [EOL]     obj2[1] = 6; [EOL]     assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]     obj1[1] = 7; [EOL]     assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]     obj2 = null; [EOL]     assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]     obj1 = null; [EOL]     assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL] }
@Test [EOL] public void testDoubleArray() { [EOL]     double[] obj1 = new double[2]; [EOL]     obj1[0] = 5; [EOL]     obj1[1] = 6; [EOL]     double[] obj2 = new double[2]; [EOL]     obj2[0] = 5; [EOL]     obj2[1] = 6; [EOL]     assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]     obj1[1] = 7; [EOL]     assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]     obj2 = null; [EOL]     assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]     obj1 = null; [EOL]     assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL] }
@Test [EOL] public void testDoubleArray() { [EOL]     double[] obj1 = new double[2]; [EOL]     obj1[0] = 5; [EOL]     obj1[1] = 6; [EOL]     double[] obj2 = new double[2]; [EOL]     obj2[0] = 5; [EOL]     obj2[1] = 6; [EOL]     assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]     obj1[1] = 7; [EOL]     assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]     obj2 = null; [EOL]     assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]     obj1 = null; [EOL]     assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL] }
@Test [EOL] public void testDoubleArray() { [EOL]     double[] obj1 = new double[2]; [EOL]     obj1[0] = 5; [EOL]     obj1[1] = 6; [EOL]     double[] obj2 = new double[2]; [EOL]     obj2[0] = 5; [EOL]     obj2[1] = 6; [EOL]     assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]     obj1[1] = 7; [EOL]     assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]     obj2 = null; [EOL]     assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]     obj1 = null; [EOL]     assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL] }
@Test [EOL] public void testDoubleArray() { [EOL]     double[] obj1 = new double[2]; [EOL]     obj1[0] = 5; [EOL]     obj1[1] = 6; [EOL]     double[] obj2 = new double[2]; [EOL]     obj2[0] = 5; [EOL]     obj2[1] = 6; [EOL]     assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]     obj1[1] = 7; [EOL]     assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]     obj2 = null; [EOL]     assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]     obj1 = null; [EOL]     assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL] }
@Test [EOL] public void testDoubleArray() { [EOL]     double[] obj1 = new double[2]; [EOL]     obj1[0] = 5; [EOL]     obj1[1] = 6; [EOL]     double[] obj2 = new double[2]; [EOL]     obj2[0] = 5; [EOL]     obj2[1] = 6; [EOL]     assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]     obj1[1] = 7; [EOL]     assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]     obj2 = null; [EOL]     assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]     obj1 = null; [EOL]     assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL] }
@Test [EOL] public void testDoubleArray() { [EOL]     double[] obj1 = new double[2]; [EOL]     obj1[0] = 5; [EOL]     obj1[1] = 6; [EOL]     double[] obj2 = new double[2]; [EOL]     obj2[0] = 5; [EOL]     obj2[1] = 6; [EOL]     assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]     obj1[1] = 7; [EOL]     assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]     obj2 = null; [EOL]     assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]     obj1 = null; [EOL]     assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL] }
@Test [EOL] public void testMultiFloatArray() { [EOL]     final float[][] array1 = new float[2][2]; [EOL]     final float[][] array2 = new float[2][2]; [EOL]     for (int i = 0; i < array1.length; ++i) { [EOL]         for (int j = 0; j < array1[0].length; j++) { [EOL]             array1[i][j] = (i + 1) * (j + 1); [EOL]             array2[i][j] = (i + 1) * (j + 1); [EOL]         } [EOL]     } [EOL]     assertTrue(new EqualsBuilder().append(array1, array1).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(array1, array2).isEquals()); [EOL]     array1[1][1] = 0; [EOL]     assertTrue(!new EqualsBuilder().append(array1, array2).isEquals()); [EOL] }
@Test [EOL] public void testMultiFloatArray() { [EOL]     final float[][] array1 = new float[2][2]; [EOL]     final float[][] array2 = new float[2][2]; [EOL]     for (int i = 0; i < array1.length; ++i) { [EOL]         for (int j = 0; j < array1[0].length; j++) { [EOL]             array1[i][j] = (i + 1) * (j + 1); [EOL]             array2[i][j] = (i + 1) * (j + 1); [EOL]         } [EOL]     } [EOL]     assertTrue(new EqualsBuilder().append(array1, array1).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(array1, array2).isEquals()); [EOL]     array1[1][1] = 0; [EOL]     assertTrue(!new EqualsBuilder().append(array1, array2).isEquals()); [EOL] }
@Test [EOL] public void testMultiFloatArray() { [EOL]     final float[][] array1 = new float[2][2]; [EOL]     final float[][] array2 = new float[2][2]; [EOL]     for (int i = 0; i < array1.length; ++i) { [EOL]         for (int j = 0; j < array1[0].length; j++) { [EOL]             array1[i][j] = (i + 1) * (j + 1); [EOL]             array2[i][j] = (i + 1) * (j + 1); [EOL]         } [EOL]     } [EOL]     assertTrue(new EqualsBuilder().append(array1, array1).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(array1, array2).isEquals()); [EOL]     array1[1][1] = 0; [EOL]     assertTrue(!new EqualsBuilder().append(array1, array2).isEquals()); [EOL] }
@Test [EOL] public void testMultiFloatArray() { [EOL]     final float[][] array1 = new float[2][2]; [EOL]     final float[][] array2 = new float[2][2]; [EOL]     for (int i = 0; i < array1.length; ++i) { [EOL]         for (int j = 0; j < array1[0].length; j++) { [EOL]             array1[i][j] = (i + 1) * (j + 1); [EOL]             array2[i][j] = (i + 1) * (j + 1); [EOL]         } [EOL]     } [EOL]     assertTrue(new EqualsBuilder().append(array1, array1).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(array1, array2).isEquals()); [EOL]     array1[1][1] = 0; [EOL]     assertTrue(!new EqualsBuilder().append(array1, array2).isEquals()); [EOL] }
@Test [EOL] public void testMultiFloatArray() { [EOL]     final float[][] array1 = new float[2][2]; [EOL]     final float[][] array2 = new float[2][2]; [EOL]     for (int i = 0; i < array1.length; ++i) { [EOL]         for (int j = 0; j < array1[0].length; j++) { [EOL]             array1[i][j] = (i + 1) * (j + 1); [EOL]             array2[i][j] = (i + 1) * (j + 1); [EOL]         } [EOL]     } [EOL]     assertTrue(new EqualsBuilder().append(array1, array1).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(array1, array2).isEquals()); [EOL]     array1[1][1] = 0; [EOL]     assertTrue(!new EqualsBuilder().append(array1, array2).isEquals()); [EOL] }
@Test [EOL] public void testMultiFloatArray() { [EOL]     final float[][] array1 = new float[2][2]; [EOL]     final float[][] array2 = new float[2][2]; [EOL]     for (int i = 0; i < array1.length; ++i) { [EOL]         for (int j = 0; j < array1[0].length; j++) { [EOL]             array1[i][j] = (i + 1) * (j + 1); [EOL]             array2[i][j] = (i + 1) * (j + 1); [EOL]         } [EOL]     } [EOL]     assertTrue(new EqualsBuilder().append(array1, array1).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(array1, array2).isEquals()); [EOL]     array1[1][1] = 0; [EOL]     assertTrue(!new EqualsBuilder().append(array1, array2).isEquals()); [EOL] }
@Test [EOL] public void testDoubleArray() { [EOL]     double[] obj1 = new double[2]; [EOL]     obj1[0] = 5; [EOL]     obj1[1] = 6; [EOL]     double[] obj2 = new double[2]; [EOL]     obj2[0] = 5; [EOL]     obj2[1] = 6; [EOL]     assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]     obj1[1] = 7; [EOL]     assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]     obj2 = null; [EOL]     assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]     obj1 = null; [EOL]     assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL] }
@Test [EOL] public void testDoubleArray() { [EOL]     double[] obj1 = new double[2]; [EOL]     obj1[0] = 5; [EOL]     obj1[1] = 6; [EOL]     double[] obj2 = new double[2]; [EOL]     obj2[0] = 5; [EOL]     obj2[1] = 6; [EOL]     assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]     obj1[1] = 7; [EOL]     assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]     obj2 = null; [EOL]     assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]     obj1 = null; [EOL]     assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL] }
@Test [EOL] public void testDoubleArray() { [EOL]     double[] obj1 = new double[2]; [EOL]     obj1[0] = 5; [EOL]     obj1[1] = 6; [EOL]     double[] obj2 = new double[2]; [EOL]     obj2[0] = 5; [EOL]     obj2[1] = 6; [EOL]     assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); [EOL]     assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]     obj1[1] = 7; [EOL]     assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]     obj2 = null; [EOL]     assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]     obj1 = null; [EOL]     assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL] }
@Test [EOL] public void testSingleQuoteMatcher() { [EOL]     final StrMatcher matcher = StrMatcher.singleQuoteMatcher(); [EOL]     assertSame(matcher, StrMatcher.singleQuoteMatcher()); [EOL]     assertEquals(0, matcher.isMatch(BUFFER1, 10)); [EOL]     assertEquals(1, matcher.isMatch(BUFFER1, 11)); [EOL]     assertEquals(0, matcher.isMatch(BUFFER1, 12)); [EOL] }
@Test [EOL] public void testRandomStringUtils() { [EOL]     String r1 = RandomStringUtils.random(50); [EOL]     assertEquals("random(50) length", 50, r1.length()); [EOL]     String r2 = RandomStringUtils.random(50); [EOL]     assertEquals("random(50) length", 50, r2.length()); [EOL]     assertTrue("!r1.equals(r2)", !r1.equals(r2)); [EOL]     r1 = RandomStringUtils.randomAscii(50); [EOL]     assertEquals("randomAscii(50) length", 50, r1.length()); [EOL]     for (int i = 0; i < r1.length(); i++) { [EOL]         assertTrue("char between 32 and 127", r1.charAt(i) >= 32 && r1.charAt(i) <= 127); [EOL]     } [EOL]     r2 = RandomStringUtils.randomAscii(50); [EOL]     assertTrue("!r1.equals(r2)", !r1.equals(r2)); [EOL]     r1 = RandomStringUtils.randomAlphabetic(50); [EOL]     assertEquals("randomAlphabetic(50)", 50, r1.length()); [EOL]     for (int i = 0; i < r1.length(); i++) { [EOL]         assertTrue("r1 contains alphabetic", Character.isLetter(r1.charAt(i)) && !Character.isDigit(r1.charAt(i))); [EOL]     } [EOL]     r2 = RandomStringUtils.randomAlphabetic(50); [EOL]     assertTrue("!r1.equals(r2)", !r1.equals(r2)); [EOL]     r1 = RandomStringUtils.randomAlphanumeric(50); [EOL]     assertEquals("randomAlphanumeric(50)", 50, r1.length()); [EOL]     for (int i = 0; i < r1.length(); i++) { [EOL]         assertTrue("r1 contains alphanumeric", Character.isLetterOrDigit(r1.charAt(i))); [EOL]     } [EOL]     r2 = RandomStringUtils.randomAlphabetic(50); [EOL]     assertTrue("!r1.equals(r2)", !r1.equals(r2)); [EOL]     r1 = RandomStringUtils.randomNumeric(50); [EOL]     assertEquals("randomNumeric(50)", 50, r1.length()); [EOL]     for (int i = 0; i < r1.length(); i++) { [EOL]         assertTrue("r1 contains numeric", Character.isDigit(r1.charAt(i)) && !Character.isLetter(r1.charAt(i))); [EOL]     } [EOL]     r2 = RandomStringUtils.randomNumeric(50); [EOL]     assertTrue("!r1.equals(r2)", !r1.equals(r2)); [EOL]     String set = "abcdefg"; [EOL]     r1 = RandomStringUtils.random(50, set); [EOL]     assertEquals("random(50, \"abcdefg\")", 50, r1.length()); [EOL]     for (int i = 0; i < r1.length(); i++) { [EOL]         assertTrue("random char in set", set.indexOf(r1.charAt(i)) > -1); [EOL]     } [EOL]     r2 = RandomStringUtils.random(50, set); [EOL]     assertTrue("!r1.equals(r2)", !r1.equals(r2)); [EOL]     r1 = RandomStringUtils.random(50, (String) null); [EOL]     assertEquals("random(50) length", 50, r1.length()); [EOL]     r2 = RandomStringUtils.random(50, (String) null); [EOL]     assertEquals("random(50) length", 50, r2.length()); [EOL]     assertTrue("!r1.equals(r2)", !r1.equals(r2)); [EOL]     set = "stuvwxyz"; [EOL]     r1 = RandomStringUtils.random(50, set.toCharArray()); [EOL]     assertEquals("random(50, \"stuvwxyz\")", 50, r1.length()); [EOL]     for (int i = 0; i < r1.length(); i++) { [EOL]         assertTrue("random char in set", set.indexOf(r1.charAt(i)) > -1); [EOL]     } [EOL]     r2 = RandomStringUtils.random(50, set); [EOL]     assertTrue("!r1.equals(r2)", !r1.equals(r2)); [EOL]     r1 = RandomStringUtils.random(50, (char[]) null); [EOL]     assertEquals("random(50) length", 50, r1.length()); [EOL]     r2 = RandomStringUtils.random(50, (char[]) null); [EOL]     assertEquals("random(50) length", 50, r2.length()); [EOL]     assertTrue("!r1.equals(r2)", !r1.equals(r2)); [EOL]     final long seed = System.currentTimeMillis(); [EOL]     r1 = RandomStringUtils.random(50, 0, 0, true, true, null, new Random(seed)); [EOL]     r2 = RandomStringUtils.random(50, 0, 0, true, true, null, new Random(seed)); [EOL]     assertEquals("r1.equals(r2)", r1, r2); [EOL]     r1 = RandomStringUtils.random(0); [EOL]     assertEquals("random(0).equals(\"\")", "", r1); [EOL] }
@Test [EOL] public void testRandomStringUtils() { [EOL]     String r1 = RandomStringUtils.random(50); [EOL]     assertEquals("random(50) length", 50, r1.length()); [EOL]     String r2 = RandomStringUtils.random(50); [EOL]     assertEquals("random(50) length", 50, r2.length()); [EOL]     assertTrue("!r1.equals(r2)", !r1.equals(r2)); [EOL]     r1 = RandomStringUtils.randomAscii(50); [EOL]     assertEquals("randomAscii(50) length", 50, r1.length()); [EOL]     for (int i = 0; i < r1.length(); i++) { [EOL]         assertTrue("char between 32 and 127", r1.charAt(i) >= 32 && r1.charAt(i) <= 127); [EOL]     } [EOL]     r2 = RandomStringUtils.randomAscii(50); [EOL]     assertTrue("!r1.equals(r2)", !r1.equals(r2)); [EOL]     r1 = RandomStringUtils.randomAlphabetic(50); [EOL]     assertEquals("randomAlphabetic(50)", 50, r1.length()); [EOL]     for (int i = 0; i < r1.length(); i++) { [EOL]         assertTrue("r1 contains alphabetic", Character.isLetter(r1.charAt(i)) && !Character.isDigit(r1.charAt(i))); [EOL]     } [EOL]     r2 = RandomStringUtils.randomAlphabetic(50); [EOL]     assertTrue("!r1.equals(r2)", !r1.equals(r2)); [EOL]     r1 = RandomStringUtils.randomAlphanumeric(50); [EOL]     assertEquals("randomAlphanumeric(50)", 50, r1.length()); [EOL]     for (int i = 0; i < r1.length(); i++) { [EOL]         assertTrue("r1 contains alphanumeric", Character.isLetterOrDigit(r1.charAt(i))); [EOL]     } [EOL]     r2 = RandomStringUtils.randomAlphabetic(50); [EOL]     assertTrue("!r1.equals(r2)", !r1.equals(r2)); [EOL]     r1 = RandomStringUtils.randomNumeric(50); [EOL]     assertEquals("randomNumeric(50)", 50, r1.length()); [EOL]     for (int i = 0; i < r1.length(); i++) { [EOL]         assertTrue("r1 contains numeric", Character.isDigit(r1.charAt(i)) && !Character.isLetter(r1.charAt(i))); [EOL]     } [EOL]     r2 = RandomStringUtils.randomNumeric(50); [EOL]     assertTrue("!r1.equals(r2)", !r1.equals(r2)); [EOL]     String set = "abcdefg"; [EOL]     r1 = RandomStringUtils.random(50, set); [EOL]     assertEquals("random(50, \"abcdefg\")", 50, r1.length()); [EOL]     for (int i = 0; i < r1.length(); i++) { [EOL]         assertTrue("random char in set", set.indexOf(r1.charAt(i)) > -1); [EOL]     } [EOL]     r2 = RandomStringUtils.random(50, set); [EOL]     assertTrue("!r1.equals(r2)", !r1.equals(r2)); [EOL]     r1 = RandomStringUtils.random(50, (String) null); [EOL]     assertEquals("random(50) length", 50, r1.length()); [EOL]     r2 = RandomStringUtils.random(50, (String) null); [EOL]     assertEquals("random(50) length", 50, r2.length()); [EOL]     assertTrue("!r1.equals(r2)", !r1.equals(r2)); [EOL]     set = "stuvwxyz"; [EOL]     r1 = RandomStringUtils.random(50, set.toCharArray()); [EOL]     assertEquals("random(50, \"stuvwxyz\")", 50, r1.length()); [EOL]     for (int i = 0; i < r1.length(); i++) { [EOL]         assertTrue("random char in set", set.indexOf(r1.charAt(i)) > -1); [EOL]     } [EOL]     r2 = RandomStringUtils.random(50, set); [EOL]     assertTrue("!r1.equals(r2)", !r1.equals(r2)); [EOL]     r1 = RandomStringUtils.random(50, (char[]) null); [EOL]     assertEquals("random(50) length", 50, r1.length()); [EOL]     r2 = RandomStringUtils.random(50, (char[]) null); [EOL]     assertEquals("random(50) length", 50, r2.length()); [EOL]     assertTrue("!r1.equals(r2)", !r1.equals(r2)); [EOL]     final long seed = System.currentTimeMillis(); [EOL]     r1 = RandomStringUtils.random(50, 0, 0, true, true, null, new Random(seed)); [EOL]     r2 = RandomStringUtils.random(50, 0, 0, true, true, null, new Random(seed)); [EOL]     assertEquals("r1.equals(r2)", r1, r2); [EOL]     r1 = RandomStringUtils.random(0); [EOL]     assertEquals("random(0).equals(\"\")", "", r1); [EOL] }
@Test [EOL] public void testRandomStringUtils() { [EOL]     String r1 = RandomStringUtils.random(50); [EOL]     assertEquals("random(50) length", 50, r1.length()); [EOL]     String r2 = RandomStringUtils.random(50); [EOL]     assertEquals("random(50) length", 50, r2.length()); [EOL]     assertTrue("!r1.equals(r2)", !r1.equals(r2)); [EOL]     r1 = RandomStringUtils.randomAscii(50); [EOL]     assertEquals("randomAscii(50) length", 50, r1.length()); [EOL]     for (int i = 0; i < r1.length(); i++) { [EOL]         assertTrue("char between 32 and 127", r1.charAt(i) >= 32 && r1.charAt(i) <= 127); [EOL]     } [EOL]     r2 = RandomStringUtils.randomAscii(50); [EOL]     assertTrue("!r1.equals(r2)", !r1.equals(r2)); [EOL]     r1 = RandomStringUtils.randomAlphabetic(50); [EOL]     assertEquals("randomAlphabetic(50)", 50, r1.length()); [EOL]     for (int i = 0; i < r1.length(); i++) { [EOL]         assertTrue("r1 contains alphabetic", Character.isLetter(r1.charAt(i)) && !Character.isDigit(r1.charAt(i))); [EOL]     } [EOL]     r2 = RandomStringUtils.randomAlphabetic(50); [EOL]     assertTrue("!r1.equals(r2)", !r1.equals(r2)); [EOL]     r1 = RandomStringUtils.randomAlphanumeric(50); [EOL]     assertEquals("randomAlphanumeric(50)", 50, r1.length()); [EOL]     for (int i = 0; i < r1.length(); i++) { [EOL]         assertTrue("r1 contains alphanumeric", Character.isLetterOrDigit(r1.charAt(i))); [EOL]     } [EOL]     r2 = RandomStringUtils.randomAlphabetic(50); [EOL]     assertTrue("!r1.equals(r2)", !r1.equals(r2)); [EOL]     r1 = RandomStringUtils.randomNumeric(50); [EOL]     assertEquals("randomNumeric(50)", 50, r1.length()); [EOL]     for (int i = 0; i < r1.length(); i++) { [EOL]         assertTrue("r1 contains numeric", Character.isDigit(r1.charAt(i)) && !Character.isLetter(r1.charAt(i))); [EOL]     } [EOL]     r2 = RandomStringUtils.randomNumeric(50); [EOL]     assertTrue("!r1.equals(r2)", !r1.equals(r2)); [EOL]     String set = "abcdefg"; [EOL]     r1 = RandomStringUtils.random(50, set); [EOL]     assertEquals("random(50, \"abcdefg\")", 50, r1.length()); [EOL]     for (int i = 0; i < r1.length(); i++) { [EOL]         assertTrue("random char in set", set.indexOf(r1.charAt(i)) > -1); [EOL]     } [EOL]     r2 = RandomStringUtils.random(50, set); [EOL]     assertTrue("!r1.equals(r2)", !r1.equals(r2)); [EOL]     r1 = RandomStringUtils.random(50, (String) null); [EOL]     assertEquals("random(50) length", 50, r1.length()); [EOL]     r2 = RandomStringUtils.random(50, (String) null); [EOL]     assertEquals("random(50) length", 50, r2.length()); [EOL]     assertTrue("!r1.equals(r2)", !r1.equals(r2)); [EOL]     set = "stuvwxyz"; [EOL]     r1 = RandomStringUtils.random(50, set.toCharArray()); [EOL]     assertEquals("random(50, \"stuvwxyz\")", 50, r1.length()); [EOL]     for (int i = 0; i < r1.length(); i++) { [EOL]         assertTrue("random char in set", set.indexOf(r1.charAt(i)) > -1); [EOL]     } [EOL]     r2 = RandomStringUtils.random(50, set); [EOL]     assertTrue("!r1.equals(r2)", !r1.equals(r2)); [EOL]     r1 = RandomStringUtils.random(50, (char[]) null); [EOL]     assertEquals("random(50) length", 50, r1.length()); [EOL]     r2 = RandomStringUtils.random(50, (char[]) null); [EOL]     assertEquals("random(50) length", 50, r2.length()); [EOL]     assertTrue("!r1.equals(r2)", !r1.equals(r2)); [EOL]     final long seed = System.currentTimeMillis(); [EOL]     r1 = RandomStringUtils.random(50, 0, 0, true, true, null, new Random(seed)); [EOL]     r2 = RandomStringUtils.random(50, 0, 0, true, true, null, new Random(seed)); [EOL]     assertEquals("r1.equals(r2)", r1, r2); [EOL]     r1 = RandomStringUtils.random(0); [EOL]     assertEquals("random(0).equals(\"\")", "", r1); [EOL] }
@Test [EOL] public void testRandomStringUtils() { [EOL]     String r1 = RandomStringUtils.random(50); [EOL]     assertEquals("random(50) length", 50, r1.length()); [EOL]     String r2 = RandomStringUtils.random(50); [EOL]     assertEquals("random(50) length", 50, r2.length()); [EOL]     assertTrue("!r1.equals(r2)", !r1.equals(r2)); [EOL]     r1 = RandomStringUtils.randomAscii(50); [EOL]     assertEquals("randomAscii(50) length", 50, r1.length()); [EOL]     for (int i = 0; i < r1.length(); i++) { [EOL]         assertTrue("char between 32 and 127", r1.charAt(i) >= 32 && r1.charAt(i) <= 127); [EOL]     } [EOL]     r2 = RandomStringUtils.randomAscii(50); [EOL]     assertTrue("!r1.equals(r2)", !r1.equals(r2)); [EOL]     r1 = RandomStringUtils.randomAlphabetic(50); [EOL]     assertEquals("randomAlphabetic(50)", 50, r1.length()); [EOL]     for (int i = 0; i < r1.length(); i++) { [EOL]         assertTrue("r1 contains alphabetic", Character.isLetter(r1.charAt(i)) && !Character.isDigit(r1.charAt(i))); [EOL]     } [EOL]     r2 = RandomStringUtils.randomAlphabetic(50); [EOL]     assertTrue("!r1.equals(r2)", !r1.equals(r2)); [EOL]     r1 = RandomStringUtils.randomAlphanumeric(50); [EOL]     assertEquals("randomAlphanumeric(50)", 50, r1.length()); [EOL]     for (int i = 0; i < r1.length(); i++) { [EOL]         assertTrue("r1 contains alphanumeric", Character.isLetterOrDigit(r1.charAt(i))); [EOL]     } [EOL]     r2 = RandomStringUtils.randomAlphabetic(50); [EOL]     assertTrue("!r1.equals(r2)", !r1.equals(r2)); [EOL]     r1 = RandomStringUtils.randomNumeric(50); [EOL]     assertEquals("randomNumeric(50)", 50, r1.length()); [EOL]     for (int i = 0; i < r1.length(); i++) { [EOL]         assertTrue("r1 contains numeric", Character.isDigit(r1.charAt(i)) && !Character.isLetter(r1.charAt(i))); [EOL]     } [EOL]     r2 = RandomStringUtils.randomNumeric(50); [EOL]     assertTrue("!r1.equals(r2)", !r1.equals(r2)); [EOL]     String set = "abcdefg"; [EOL]     r1 = RandomStringUtils.random(50, set); [EOL]     assertEquals("random(50, \"abcdefg\")", 50, r1.length()); [EOL]     for (int i = 0; i < r1.length(); i++) { [EOL]         assertTrue("random char in set", set.indexOf(r1.charAt(i)) > -1); [EOL]     } [EOL]     r2 = RandomStringUtils.random(50, set); [EOL]     assertTrue("!r1.equals(r2)", !r1.equals(r2)); [EOL]     r1 = RandomStringUtils.random(50, (String) null); [EOL]     assertEquals("random(50) length", 50, r1.length()); [EOL]     r2 = RandomStringUtils.random(50, (String) null); [EOL]     assertEquals("random(50) length", 50, r2.length()); [EOL]     assertTrue("!r1.equals(r2)", !r1.equals(r2)); [EOL]     set = "stuvwxyz"; [EOL]     r1 = RandomStringUtils.random(50, set.toCharArray()); [EOL]     assertEquals("random(50, \"stuvwxyz\")", 50, r1.length()); [EOL]     for (int i = 0; i < r1.length(); i++) { [EOL]         assertTrue("random char in set", set.indexOf(r1.charAt(i)) > -1); [EOL]     } [EOL]     r2 = RandomStringUtils.random(50, set); [EOL]     assertTrue("!r1.equals(r2)", !r1.equals(r2)); [EOL]     r1 = RandomStringUtils.random(50, (char[]) null); [EOL]     assertEquals("random(50) length", 50, r1.length()); [EOL]     r2 = RandomStringUtils.random(50, (char[]) null); [EOL]     assertEquals("random(50) length", 50, r2.length()); [EOL]     assertTrue("!r1.equals(r2)", !r1.equals(r2)); [EOL]     final long seed = System.currentTimeMillis(); [EOL]     r1 = RandomStringUtils.random(50, 0, 0, true, true, null, new Random(seed)); [EOL]     r2 = RandomStringUtils.random(50, 0, 0, true, true, null, new Random(seed)); [EOL]     assertEquals("r1.equals(r2)", r1, r2); [EOL]     r1 = RandomStringUtils.random(0); [EOL]     assertEquals("random(0).equals(\"\")", "", r1); [EOL] }
@Test [EOL] public void testRandomStringUtils() { [EOL]     String r1 = RandomStringUtils.random(50); [EOL]     assertEquals("random(50) length", 50, r1.length()); [EOL]     String r2 = RandomStringUtils.random(50); [EOL]     assertEquals("random(50) length", 50, r2.length()); [EOL]     assertTrue("!r1.equals(r2)", !r1.equals(r2)); [EOL]     r1 = RandomStringUtils.randomAscii(50); [EOL]     assertEquals("randomAscii(50) length", 50, r1.length()); [EOL]     for (int i = 0; i < r1.length(); i++) { [EOL]         assertTrue("char between 32 and 127", r1.charAt(i) >= 32 && r1.charAt(i) <= 127); [EOL]     } [EOL]     r2 = RandomStringUtils.randomAscii(50); [EOL]     assertTrue("!r1.equals(r2)", !r1.equals(r2)); [EOL]     r1 = RandomStringUtils.randomAlphabetic(50); [EOL]     assertEquals("randomAlphabetic(50)", 50, r1.length()); [EOL]     for (int i = 0; i < r1.length(); i++) { [EOL]         assertTrue("r1 contains alphabetic", Character.isLetter(r1.charAt(i)) && !Character.isDigit(r1.charAt(i))); [EOL]     } [EOL]     r2 = RandomStringUtils.randomAlphabetic(50); [EOL]     assertTrue("!r1.equals(r2)", !r1.equals(r2)); [EOL]     r1 = RandomStringUtils.randomAlphanumeric(50); [EOL]     assertEquals("randomAlphanumeric(50)", 50, r1.length()); [EOL]     for (int i = 0; i < r1.length(); i++) { [EOL]         assertTrue("r1 contains alphanumeric", Character.isLetterOrDigit(r1.charAt(i))); [EOL]     } [EOL]     r2 = RandomStringUtils.randomAlphabetic(50); [EOL]     assertTrue("!r1.equals(r2)", !r1.equals(r2)); [EOL]     r1 = RandomStringUtils.randomNumeric(50); [EOL]     assertEquals("randomNumeric(50)", 50, r1.length()); [EOL]     for (int i = 0; i < r1.length(); i++) { [EOL]         assertTrue("r1 contains numeric", Character.isDigit(r1.charAt(i)) && !Character.isLetter(r1.charAt(i))); [EOL]     } [EOL]     r2 = RandomStringUtils.randomNumeric(50); [EOL]     assertTrue("!r1.equals(r2)", !r1.equals(r2)); [EOL]     String set = "abcdefg"; [EOL]     r1 = RandomStringUtils.random(50, set); [EOL]     assertEquals("random(50, \"abcdefg\")", 50, r1.length()); [EOL]     for (int i = 0; i < r1.length(); i++) { [EOL]         assertTrue("random char in set", set.indexOf(r1.charAt(i)) > -1); [EOL]     } [EOL]     r2 = RandomStringUtils.random(50, set); [EOL]     assertTrue("!r1.equals(r2)", !r1.equals(r2)); [EOL]     r1 = RandomStringUtils.random(50, (String) null); [EOL]     assertEquals("random(50) length", 50, r1.length()); [EOL]     r2 = RandomStringUtils.random(50, (String) null); [EOL]     assertEquals("random(50) length", 50, r2.length()); [EOL]     assertTrue("!r1.equals(r2)", !r1.equals(r2)); [EOL]     set = "stuvwxyz"; [EOL]     r1 = RandomStringUtils.random(50, set.toCharArray()); [EOL]     assertEquals("random(50, \"stuvwxyz\")", 50, r1.length()); [EOL]     for (int i = 0; i < r1.length(); i++) { [EOL]         assertTrue("random char in set", set.indexOf(r1.charAt(i)) > -1); [EOL]     } [EOL]     r2 = RandomStringUtils.random(50, set); [EOL]     assertTrue("!r1.equals(r2)", !r1.equals(r2)); [EOL]     r1 = RandomStringUtils.random(50, (char[]) null); [EOL]     assertEquals("random(50) length", 50, r1.length()); [EOL]     r2 = RandomStringUtils.random(50, (char[]) null); [EOL]     assertEquals("random(50) length", 50, r2.length()); [EOL]     assertTrue("!r1.equals(r2)", !r1.equals(r2)); [EOL]     final long seed = System.currentTimeMillis(); [EOL]     r1 = RandomStringUtils.random(50, 0, 0, true, true, null, new Random(seed)); [EOL]     r2 = RandomStringUtils.random(50, 0, 0, true, true, null, new Random(seed)); [EOL]     assertEquals("r1.equals(r2)", r1, r2); [EOL]     r1 = RandomStringUtils.random(0); [EOL]     assertEquals("random(0).equals(\"\")", "", r1); [EOL] }
@Test [EOL] public void testRandomStringUtils() { [EOL]     String r1 = RandomStringUtils.random(50); [EOL]     assertEquals("random(50) length", 50, r1.length()); [EOL]     String r2 = RandomStringUtils.random(50); [EOL]     assertEquals("random(50) length", 50, r2.length()); [EOL]     assertTrue("!r1.equals(r2)", !r1.equals(r2)); [EOL]     r1 = RandomStringUtils.randomAscii(50); [EOL]     assertEquals("randomAscii(50) length", 50, r1.length()); [EOL]     for (int i = 0; i < r1.length(); i++) { [EOL]         assertTrue("char between 32 and 127", r1.charAt(i) >= 32 && r1.charAt(i) <= 127); [EOL]     } [EOL]     r2 = RandomStringUtils.randomAscii(50); [EOL]     assertTrue("!r1.equals(r2)", !r1.equals(r2)); [EOL]     r1 = RandomStringUtils.randomAlphabetic(50); [EOL]     assertEquals("randomAlphabetic(50)", 50, r1.length()); [EOL]     for (int i = 0; i < r1.length(); i++) { [EOL]         assertTrue("r1 contains alphabetic", Character.isLetter(r1.charAt(i)) && !Character.isDigit(r1.charAt(i))); [EOL]     } [EOL]     r2 = RandomStringUtils.randomAlphabetic(50); [EOL]     assertTrue("!r1.equals(r2)", !r1.equals(r2)); [EOL]     r1 = RandomStringUtils.randomAlphanumeric(50); [EOL]     assertEquals("randomAlphanumeric(50)", 50, r1.length()); [EOL]     for (int i = 0; i < r1.length(); i++) { [EOL]         assertTrue("r1 contains alphanumeric", Character.isLetterOrDigit(r1.charAt(i))); [EOL]     } [EOL]     r2 = RandomStringUtils.randomAlphabetic(50); [EOL]     assertTrue("!r1.equals(r2)", !r1.equals(r2)); [EOL]     r1 = RandomStringUtils.randomNumeric(50); [EOL]     assertEquals("randomNumeric(50)", 50, r1.length()); [EOL]     for (int i = 0; i < r1.length(); i++) { [EOL]         assertTrue("r1 contains numeric", Character.isDigit(r1.charAt(i)) && !Character.isLetter(r1.charAt(i))); [EOL]     } [EOL]     r2 = RandomStringUtils.randomNumeric(50); [EOL]     assertTrue("!r1.equals(r2)", !r1.equals(r2)); [EOL]     String set = "abcdefg"; [EOL]     r1 = RandomStringUtils.random(50, set); [EOL]     assertEquals("random(50, \"abcdefg\")", 50, r1.length()); [EOL]     for (int i = 0; i < r1.length(); i++) { [EOL]         assertTrue("random char in set", set.indexOf(r1.charAt(i)) > -1); [EOL]     } [EOL]     r2 = RandomStringUtils.random(50, set); [EOL]     assertTrue("!r1.equals(r2)", !r1.equals(r2)); [EOL]     r1 = RandomStringUtils.random(50, (String) null); [EOL]     assertEquals("random(50) length", 50, r1.length()); [EOL]     r2 = RandomStringUtils.random(50, (String) null); [EOL]     assertEquals("random(50) length", 50, r2.length()); [EOL]     assertTrue("!r1.equals(r2)", !r1.equals(r2)); [EOL]     set = "stuvwxyz"; [EOL]     r1 = RandomStringUtils.random(50, set.toCharArray()); [EOL]     assertEquals("random(50, \"stuvwxyz\")", 50, r1.length()); [EOL]     for (int i = 0; i < r1.length(); i++) { [EOL]         assertTrue("random char in set", set.indexOf(r1.charAt(i)) > -1); [EOL]     } [EOL]     r2 = RandomStringUtils.random(50, set); [EOL]     assertTrue("!r1.equals(r2)", !r1.equals(r2)); [EOL]     r1 = RandomStringUtils.random(50, (char[]) null); [EOL]     assertEquals("random(50) length", 50, r1.length()); [EOL]     r2 = RandomStringUtils.random(50, (char[]) null); [EOL]     assertEquals("random(50) length", 50, r2.length()); [EOL]     assertTrue("!r1.equals(r2)", !r1.equals(r2)); [EOL]     final long seed = System.currentTimeMillis(); [EOL]     r1 = RandomStringUtils.random(50, 0, 0, true, true, null, new Random(seed)); [EOL]     r2 = RandomStringUtils.random(50, 0, 0, true, true, null, new Random(seed)); [EOL]     assertEquals("r1.equals(r2)", r1, r2); [EOL]     r1 = RandomStringUtils.random(0); [EOL]     assertEquals("random(0).equals(\"\")", "", r1); [EOL] }
@Test [EOL] public void testRandomStringUtils() { [EOL]     String r1 = RandomStringUtils.random(50); [EOL]     assertEquals("random(50) length", 50, r1.length()); [EOL]     String r2 = RandomStringUtils.random(50); [EOL]     assertEquals("random(50) length", 50, r2.length()); [EOL]     assertTrue("!r1.equals(r2)", !r1.equals(r2)); [EOL]     r1 = RandomStringUtils.randomAscii(50); [EOL]     assertEquals("randomAscii(50) length", 50, r1.length()); [EOL]     for (int i = 0; i < r1.length(); i++) { [EOL]         assertTrue("char between 32 and 127", r1.charAt(i) >= 32 && r1.charAt(i) <= 127); [EOL]     } [EOL]     r2 = RandomStringUtils.randomAscii(50); [EOL]     assertTrue("!r1.equals(r2)", !r1.equals(r2)); [EOL]     r1 = RandomStringUtils.randomAlphabetic(50); [EOL]     assertEquals("randomAlphabetic(50)", 50, r1.length()); [EOL]     for (int i = 0; i < r1.length(); i++) { [EOL]         assertTrue("r1 contains alphabetic", Character.isLetter(r1.charAt(i)) && !Character.isDigit(r1.charAt(i))); [EOL]     } [EOL]     r2 = RandomStringUtils.randomAlphabetic(50); [EOL]     assertTrue("!r1.equals(r2)", !r1.equals(r2)); [EOL]     r1 = RandomStringUtils.randomAlphanumeric(50); [EOL]     assertEquals("randomAlphanumeric(50)", 50, r1.length()); [EOL]     for (int i = 0; i < r1.length(); i++) { [EOL]         assertTrue("r1 contains alphanumeric", Character.isLetterOrDigit(r1.charAt(i))); [EOL]     } [EOL]     r2 = RandomStringUtils.randomAlphabetic(50); [EOL]     assertTrue("!r1.equals(r2)", !r1.equals(r2)); [EOL]     r1 = RandomStringUtils.randomNumeric(50); [EOL]     assertEquals("randomNumeric(50)", 50, r1.length()); [EOL]     for (int i = 0; i < r1.length(); i++) { [EOL]         assertTrue("r1 contains numeric", Character.isDigit(r1.charAt(i)) && !Character.isLetter(r1.charAt(i))); [EOL]     } [EOL]     r2 = RandomStringUtils.randomNumeric(50); [EOL]     assertTrue("!r1.equals(r2)", !r1.equals(r2)); [EOL]     String set = "abcdefg"; [EOL]     r1 = RandomStringUtils.random(50, set); [EOL]     assertEquals("random(50, \"abcdefg\")", 50, r1.length()); [EOL]     for (int i = 0; i < r1.length(); i++) { [EOL]         assertTrue("random char in set", set.indexOf(r1.charAt(i)) > -1); [EOL]     } [EOL]     r2 = RandomStringUtils.random(50, set); [EOL]     assertTrue("!r1.equals(r2)", !r1.equals(r2)); [EOL]     r1 = RandomStringUtils.random(50, (String) null); [EOL]     assertEquals("random(50) length", 50, r1.length()); [EOL]     r2 = RandomStringUtils.random(50, (String) null); [EOL]     assertEquals("random(50) length", 50, r2.length()); [EOL]     assertTrue("!r1.equals(r2)", !r1.equals(r2)); [EOL]     set = "stuvwxyz"; [EOL]     r1 = RandomStringUtils.random(50, set.toCharArray()); [EOL]     assertEquals("random(50, \"stuvwxyz\")", 50, r1.length()); [EOL]     for (int i = 0; i < r1.length(); i++) { [EOL]         assertTrue("random char in set", set.indexOf(r1.charAt(i)) > -1); [EOL]     } [EOL]     r2 = RandomStringUtils.random(50, set); [EOL]     assertTrue("!r1.equals(r2)", !r1.equals(r2)); [EOL]     r1 = RandomStringUtils.random(50, (char[]) null); [EOL]     assertEquals("random(50) length", 50, r1.length()); [EOL]     r2 = RandomStringUtils.random(50, (char[]) null); [EOL]     assertEquals("random(50) length", 50, r2.length()); [EOL]     assertTrue("!r1.equals(r2)", !r1.equals(r2)); [EOL]     final long seed = System.currentTimeMillis(); [EOL]     r1 = RandomStringUtils.random(50, 0, 0, true, true, null, new Random(seed)); [EOL]     r2 = RandomStringUtils.random(50, 0, 0, true, true, null, new Random(seed)); [EOL]     assertEquals("r1.equals(r2)", r1, r2); [EOL]     r1 = RandomStringUtils.random(0); [EOL]     assertEquals("random(0).equals(\"\")", "", r1); [EOL] }
@Test [EOL] public void testRandomStringUtils() { [EOL]     String r1 = RandomStringUtils.random(50); [EOL]     assertEquals("random(50) length", 50, r1.length()); [EOL]     String r2 = RandomStringUtils.random(50); [EOL]     assertEquals("random(50) length", 50, r2.length()); [EOL]     assertTrue("!r1.equals(r2)", !r1.equals(r2)); [EOL]     r1 = RandomStringUtils.randomAscii(50); [EOL]     assertEquals("randomAscii(50) length", 50, r1.length()); [EOL]     for (int i = 0; i < r1.length(); i++) { [EOL]         assertTrue("char between 32 and 127", r1.charAt(i) >= 32 && r1.charAt(i) <= 127); [EOL]     } [EOL]     r2 = RandomStringUtils.randomAscii(50); [EOL]     assertTrue("!r1.equals(r2)", !r1.equals(r2)); [EOL]     r1 = RandomStringUtils.randomAlphabetic(50); [EOL]     assertEquals("randomAlphabetic(50)", 50, r1.length()); [EOL]     for (int i = 0; i < r1.length(); i++) { [EOL]         assertTrue("r1 contains alphabetic", Character.isLetter(r1.charAt(i)) && !Character.isDigit(r1.charAt(i))); [EOL]     } [EOL]     r2 = RandomStringUtils.randomAlphabetic(50); [EOL]     assertTrue("!r1.equals(r2)", !r1.equals(r2)); [EOL]     r1 = RandomStringUtils.randomAlphanumeric(50); [EOL]     assertEquals("randomAlphanumeric(50)", 50, r1.length()); [EOL]     for (int i = 0; i < r1.length(); i++) { [EOL]         assertTrue("r1 contains alphanumeric", Character.isLetterOrDigit(r1.charAt(i))); [EOL]     } [EOL]     r2 = RandomStringUtils.randomAlphabetic(50); [EOL]     assertTrue("!r1.equals(r2)", !r1.equals(r2)); [EOL]     r1 = RandomStringUtils.randomNumeric(50); [EOL]     assertEquals("randomNumeric(50)", 50, r1.length()); [EOL]     for (int i = 0; i < r1.length(); i++) { [EOL]         assertTrue("r1 contains numeric", Character.isDigit(r1.charAt(i)) && !Character.isLetter(r1.charAt(i))); [EOL]     } [EOL]     r2 = RandomStringUtils.randomNumeric(50); [EOL]     assertTrue("!r1.equals(r2)", !r1.equals(r2)); [EOL]     String set = "abcdefg"; [EOL]     r1 = RandomStringUtils.random(50, set); [EOL]     assertEquals("random(50, \"abcdefg\")", 50, r1.length()); [EOL]     for (int i = 0; i < r1.length(); i++) { [EOL]         assertTrue("random char in set", set.indexOf(r1.charAt(i)) > -1); [EOL]     } [EOL]     r2 = RandomStringUtils.random(50, set); [EOL]     assertTrue("!r1.equals(r2)", !r1.equals(r2)); [EOL]     r1 = RandomStringUtils.random(50, (String) null); [EOL]     assertEquals("random(50) length", 50, r1.length()); [EOL]     r2 = RandomStringUtils.random(50, (String) null); [EOL]     assertEquals("random(50) length", 50, r2.length()); [EOL]     assertTrue("!r1.equals(r2)", !r1.equals(r2)); [EOL]     set = "stuvwxyz"; [EOL]     r1 = RandomStringUtils.random(50, set.toCharArray()); [EOL]     assertEquals("random(50, \"stuvwxyz\")", 50, r1.length()); [EOL]     for (int i = 0; i < r1.length(); i++) { [EOL]         assertTrue("random char in set", set.indexOf(r1.charAt(i)) > -1); [EOL]     } [EOL]     r2 = RandomStringUtils.random(50, set); [EOL]     assertTrue("!r1.equals(r2)", !r1.equals(r2)); [EOL]     r1 = RandomStringUtils.random(50, (char[]) null); [EOL]     assertEquals("random(50) length", 50, r1.length()); [EOL]     r2 = RandomStringUtils.random(50, (char[]) null); [EOL]     assertEquals("random(50) length", 50, r2.length()); [EOL]     assertTrue("!r1.equals(r2)", !r1.equals(r2)); [EOL]     final long seed = System.currentTimeMillis(); [EOL]     r1 = RandomStringUtils.random(50, 0, 0, true, true, null, new Random(seed)); [EOL]     r2 = RandomStringUtils.random(50, 0, 0, true, true, null, new Random(seed)); [EOL]     assertEquals("r1.equals(r2)", r1, r2); [EOL]     r1 = RandomStringUtils.random(0); [EOL]     assertEquals("random(0).equals(\"\")", "", r1); [EOL] }
@Test [EOL] public void testRandomStringUtils() { [EOL]     String r1 = RandomStringUtils.random(50); [EOL]     assertEquals("random(50) length", 50, r1.length()); [EOL]     String r2 = RandomStringUtils.random(50); [EOL]     assertEquals("random(50) length", 50, r2.length()); [EOL]     assertTrue("!r1.equals(r2)", !r1.equals(r2)); [EOL]     r1 = RandomStringUtils.randomAscii(50); [EOL]     assertEquals("randomAscii(50) length", 50, r1.length()); [EOL]     for (int i = 0; i < r1.length(); i++) { [EOL]         assertTrue("char between 32 and 127", r1.charAt(i) >= 32 && r1.charAt(i) <= 127); [EOL]     } [EOL]     r2 = RandomStringUtils.randomAscii(50); [EOL]     assertTrue("!r1.equals(r2)", !r1.equals(r2)); [EOL]     r1 = RandomStringUtils.randomAlphabetic(50); [EOL]     assertEquals("randomAlphabetic(50)", 50, r1.length()); [EOL]     for (int i = 0; i < r1.length(); i++) { [EOL]         assertTrue("r1 contains alphabetic", Character.isLetter(r1.charAt(i)) && !Character.isDigit(r1.charAt(i))); [EOL]     } [EOL]     r2 = RandomStringUtils.randomAlphabetic(50); [EOL]     assertTrue("!r1.equals(r2)", !r1.equals(r2)); [EOL]     r1 = RandomStringUtils.randomAlphanumeric(50); [EOL]     assertEquals("randomAlphanumeric(50)", 50, r1.length()); [EOL]     for (int i = 0; i < r1.length(); i++) { [EOL]         assertTrue("r1 contains alphanumeric", Character.isLetterOrDigit(r1.charAt(i))); [EOL]     } [EOL]     r2 = RandomStringUtils.randomAlphabetic(50); [EOL]     assertTrue("!r1.equals(r2)", !r1.equals(r2)); [EOL]     r1 = RandomStringUtils.randomNumeric(50); [EOL]     assertEquals("randomNumeric(50)", 50, r1.length()); [EOL]     for (int i = 0; i < r1.length(); i++) { [EOL]         assertTrue("r1 contains numeric", Character.isDigit(r1.charAt(i)) && !Character.isLetter(r1.charAt(i))); [EOL]     } [EOL]     r2 = RandomStringUtils.randomNumeric(50); [EOL]     assertTrue("!r1.equals(r2)", !r1.equals(r2)); [EOL]     String set = "abcdefg"; [EOL]     r1 = RandomStringUtils.random(50, set); [EOL]     assertEquals("random(50, \"abcdefg\")", 50, r1.length()); [EOL]     for (int i = 0; i < r1.length(); i++) { [EOL]         assertTrue("random char in set", set.indexOf(r1.charAt(i)) > -1); [EOL]     } [EOL]     r2 = RandomStringUtils.random(50, set); [EOL]     assertTrue("!r1.equals(r2)", !r1.equals(r2)); [EOL]     r1 = RandomStringUtils.random(50, (String) null); [EOL]     assertEquals("random(50) length", 50, r1.length()); [EOL]     r2 = RandomStringUtils.random(50, (String) null); [EOL]     assertEquals("random(50) length", 50, r2.length()); [EOL]     assertTrue("!r1.equals(r2)", !r1.equals(r2)); [EOL]     set = "stuvwxyz"; [EOL]     r1 = RandomStringUtils.random(50, set.toCharArray()); [EOL]     assertEquals("random(50, \"stuvwxyz\")", 50, r1.length()); [EOL]     for (int i = 0; i < r1.length(); i++) { [EOL]         assertTrue("random char in set", set.indexOf(r1.charAt(i)) > -1); [EOL]     } [EOL]     r2 = RandomStringUtils.random(50, set); [EOL]     assertTrue("!r1.equals(r2)", !r1.equals(r2)); [EOL]     r1 = RandomStringUtils.random(50, (char[]) null); [EOL]     assertEquals("random(50) length", 50, r1.length()); [EOL]     r2 = RandomStringUtils.random(50, (char[]) null); [EOL]     assertEquals("random(50) length", 50, r2.length()); [EOL]     assertTrue("!r1.equals(r2)", !r1.equals(r2)); [EOL]     final long seed = System.currentTimeMillis(); [EOL]     r1 = RandomStringUtils.random(50, 0, 0, true, true, null, new Random(seed)); [EOL]     r2 = RandomStringUtils.random(50, 0, 0, true, true, null, new Random(seed)); [EOL]     assertEquals("r1.equals(r2)", r1, r2); [EOL]     r1 = RandomStringUtils.random(0); [EOL]     assertEquals("random(0).equals(\"\")", "", r1); [EOL] }
@Test [EOL] public void testRandomStringUtils() { [EOL]     String r1 = RandomStringUtils.random(50); [EOL]     assertEquals("random(50) length", 50, r1.length()); [EOL]     String r2 = RandomStringUtils.random(50); [EOL]     assertEquals("random(50) length", 50, r2.length()); [EOL]     assertTrue("!r1.equals(r2)", !r1.equals(r2)); [EOL]     r1 = RandomStringUtils.randomAscii(50); [EOL]     assertEquals("randomAscii(50) length", 50, r1.length()); [EOL]     for (int i = 0; i < r1.length(); i++) { [EOL]         assertTrue("char between 32 and 127", r1.charAt(i) >= 32 && r1.charAt(i) <= 127); [EOL]     } [EOL]     r2 = RandomStringUtils.randomAscii(50); [EOL]     assertTrue("!r1.equals(r2)", !r1.equals(r2)); [EOL]     r1 = RandomStringUtils.randomAlphabetic(50); [EOL]     assertEquals("randomAlphabetic(50)", 50, r1.length()); [EOL]     for (int i = 0; i < r1.length(); i++) { [EOL]         assertTrue("r1 contains alphabetic", Character.isLetter(r1.charAt(i)) && !Character.isDigit(r1.charAt(i))); [EOL]     } [EOL]     r2 = RandomStringUtils.randomAlphabetic(50); [EOL]     assertTrue("!r1.equals(r2)", !r1.equals(r2)); [EOL]     r1 = RandomStringUtils.randomAlphanumeric(50); [EOL]     assertEquals("randomAlphanumeric(50)", 50, r1.length()); [EOL]     for (int i = 0; i < r1.length(); i++) { [EOL]         assertTrue("r1 contains alphanumeric", Character.isLetterOrDigit(r1.charAt(i))); [EOL]     } [EOL]     r2 = RandomStringUtils.randomAlphabetic(50); [EOL]     assertTrue("!r1.equals(r2)", !r1.equals(r2)); [EOL]     r1 = RandomStringUtils.randomNumeric(50); [EOL]     assertEquals("randomNumeric(50)", 50, r1.length()); [EOL]     for (int i = 0; i < r1.length(); i++) { [EOL]         assertTrue("r1 contains numeric", Character.isDigit(r1.charAt(i)) && !Character.isLetter(r1.charAt(i))); [EOL]     } [EOL]     r2 = RandomStringUtils.randomNumeric(50); [EOL]     assertTrue("!r1.equals(r2)", !r1.equals(r2)); [EOL]     String set = "abcdefg"; [EOL]     r1 = RandomStringUtils.random(50, set); [EOL]     assertEquals("random(50, \"abcdefg\")", 50, r1.length()); [EOL]     for (int i = 0; i < r1.length(); i++) { [EOL]         assertTrue("random char in set", set.indexOf(r1.charAt(i)) > -1); [EOL]     } [EOL]     r2 = RandomStringUtils.random(50, set); [EOL]     assertTrue("!r1.equals(r2)", !r1.equals(r2)); [EOL]     r1 = RandomStringUtils.random(50, (String) null); [EOL]     assertEquals("random(50) length", 50, r1.length()); [EOL]     r2 = RandomStringUtils.random(50, (String) null); [EOL]     assertEquals("random(50) length", 50, r2.length()); [EOL]     assertTrue("!r1.equals(r2)", !r1.equals(r2)); [EOL]     set = "stuvwxyz"; [EOL]     r1 = RandomStringUtils.random(50, set.toCharArray()); [EOL]     assertEquals("random(50, \"stuvwxyz\")", 50, r1.length()); [EOL]     for (int i = 0; i < r1.length(); i++) { [EOL]         assertTrue("random char in set", set.indexOf(r1.charAt(i)) > -1); [EOL]     } [EOL]     r2 = RandomStringUtils.random(50, set); [EOL]     assertTrue("!r1.equals(r2)", !r1.equals(r2)); [EOL]     r1 = RandomStringUtils.random(50, (char[]) null); [EOL]     assertEquals("random(50) length", 50, r1.length()); [EOL]     r2 = RandomStringUtils.random(50, (char[]) null); [EOL]     assertEquals("random(50) length", 50, r2.length()); [EOL]     assertTrue("!r1.equals(r2)", !r1.equals(r2)); [EOL]     final long seed = System.currentTimeMillis(); [EOL]     r1 = RandomStringUtils.random(50, 0, 0, true, true, null, new Random(seed)); [EOL]     r2 = RandomStringUtils.random(50, 0, 0, true, true, null, new Random(seed)); [EOL]     assertEquals("r1.equals(r2)", r1, r2); [EOL]     r1 = RandomStringUtils.random(0); [EOL]     assertEquals("random(0).equals(\"\")", "", r1); [EOL] }
@Test [EOL] public void testRandomStringUtils() { [EOL]     String r1 = RandomStringUtils.random(50); [EOL]     assertEquals("random(50) length", 50, r1.length()); [EOL]     String r2 = RandomStringUtils.random(50); [EOL]     assertEquals("random(50) length", 50, r2.length()); [EOL]     assertTrue("!r1.equals(r2)", !r1.equals(r2)); [EOL]     r1 = RandomStringUtils.randomAscii(50); [EOL]     assertEquals("randomAscii(50) length", 50, r1.length()); [EOL]     for (int i = 0; i < r1.length(); i++) { [EOL]         assertTrue("char between 32 and 127", r1.charAt(i) >= 32 && r1.charAt(i) <= 127); [EOL]     } [EOL]     r2 = RandomStringUtils.randomAscii(50); [EOL]     assertTrue("!r1.equals(r2)", !r1.equals(r2)); [EOL]     r1 = RandomStringUtils.randomAlphabetic(50); [EOL]     assertEquals("randomAlphabetic(50)", 50, r1.length()); [EOL]     for (int i = 0; i < r1.length(); i++) { [EOL]         assertTrue("r1 contains alphabetic", Character.isLetter(r1.charAt(i)) && !Character.isDigit(r1.charAt(i))); [EOL]     } [EOL]     r2 = RandomStringUtils.randomAlphabetic(50); [EOL]     assertTrue("!r1.equals(r2)", !r1.equals(r2)); [EOL]     r1 = RandomStringUtils.randomAlphanumeric(50); [EOL]     assertEquals("randomAlphanumeric(50)", 50, r1.length()); [EOL]     for (int i = 0; i < r1.length(); i++) { [EOL]         assertTrue("r1 contains alphanumeric", Character.isLetterOrDigit(r1.charAt(i))); [EOL]     } [EOL]     r2 = RandomStringUtils.randomAlphabetic(50); [EOL]     assertTrue("!r1.equals(r2)", !r1.equals(r2)); [EOL]     r1 = RandomStringUtils.randomNumeric(50); [EOL]     assertEquals("randomNumeric(50)", 50, r1.length()); [EOL]     for (int i = 0; i < r1.length(); i++) { [EOL]         assertTrue("r1 contains numeric", Character.isDigit(r1.charAt(i)) && !Character.isLetter(r1.charAt(i))); [EOL]     } [EOL]     r2 = RandomStringUtils.randomNumeric(50); [EOL]     assertTrue("!r1.equals(r2)", !r1.equals(r2)); [EOL]     String set = "abcdefg"; [EOL]     r1 = RandomStringUtils.random(50, set); [EOL]     assertEquals("random(50, \"abcdefg\")", 50, r1.length()); [EOL]     for (int i = 0; i < r1.length(); i++) { [EOL]         assertTrue("random char in set", set.indexOf(r1.charAt(i)) > -1); [EOL]     } [EOL]     r2 = RandomStringUtils.random(50, set); [EOL]     assertTrue("!r1.equals(r2)", !r1.equals(r2)); [EOL]     r1 = RandomStringUtils.random(50, (String) null); [EOL]     assertEquals("random(50) length", 50, r1.length()); [EOL]     r2 = RandomStringUtils.random(50, (String) null); [EOL]     assertEquals("random(50) length", 50, r2.length()); [EOL]     assertTrue("!r1.equals(r2)", !r1.equals(r2)); [EOL]     set = "stuvwxyz"; [EOL]     r1 = RandomStringUtils.random(50, set.toCharArray()); [EOL]     assertEquals("random(50, \"stuvwxyz\")", 50, r1.length()); [EOL]     for (int i = 0; i < r1.length(); i++) { [EOL]         assertTrue("random char in set", set.indexOf(r1.charAt(i)) > -1); [EOL]     } [EOL]     r2 = RandomStringUtils.random(50, set); [EOL]     assertTrue("!r1.equals(r2)", !r1.equals(r2)); [EOL]     r1 = RandomStringUtils.random(50, (char[]) null); [EOL]     assertEquals("random(50) length", 50, r1.length()); [EOL]     r2 = RandomStringUtils.random(50, (char[]) null); [EOL]     assertEquals("random(50) length", 50, r2.length()); [EOL]     assertTrue("!r1.equals(r2)", !r1.equals(r2)); [EOL]     final long seed = System.currentTimeMillis(); [EOL]     r1 = RandomStringUtils.random(50, 0, 0, true, true, null, new Random(seed)); [EOL]     r2 = RandomStringUtils.random(50, 0, 0, true, true, null, new Random(seed)); [EOL]     assertEquals("r1.equals(r2)", r1, r2); [EOL]     r1 = RandomStringUtils.random(0); [EOL]     assertEquals("random(0).equals(\"\")", "", r1); [EOL] }
@Test [EOL] public void testRandomStringUtils() { [EOL]     String r1 = RandomStringUtils.random(50); [EOL]     assertEquals("random(50) length", 50, r1.length()); [EOL]     String r2 = RandomStringUtils.random(50); [EOL]     assertEquals("random(50) length", 50, r2.length()); [EOL]     assertTrue("!r1.equals(r2)", !r1.equals(r2)); [EOL]     r1 = RandomStringUtils.randomAscii(50); [EOL]     assertEquals("randomAscii(50) length", 50, r1.length()); [EOL]     for (int i = 0; i < r1.length(); i++) { [EOL]         assertTrue("char between 32 and 127", r1.charAt(i) >= 32 && r1.charAt(i) <= 127); [EOL]     } [EOL]     r2 = RandomStringUtils.randomAscii(50); [EOL]     assertTrue("!r1.equals(r2)", !r1.equals(r2)); [EOL]     r1 = RandomStringUtils.randomAlphabetic(50); [EOL]     assertEquals("randomAlphabetic(50)", 50, r1.length()); [EOL]     for (int i = 0; i < r1.length(); i++) { [EOL]         assertTrue("r1 contains alphabetic", Character.isLetter(r1.charAt(i)) && !Character.isDigit(r1.charAt(i))); [EOL]     } [EOL]     r2 = RandomStringUtils.randomAlphabetic(50); [EOL]     assertTrue("!r1.equals(r2)", !r1.equals(r2)); [EOL]     r1 = RandomStringUtils.randomAlphanumeric(50); [EOL]     assertEquals("randomAlphanumeric(50)", 50, r1.length()); [EOL]     for (int i = 0; i < r1.length(); i++) { [EOL]         assertTrue("r1 contains alphanumeric", Character.isLetterOrDigit(r1.charAt(i))); [EOL]     } [EOL]     r2 = RandomStringUtils.randomAlphabetic(50); [EOL]     assertTrue("!r1.equals(r2)", !r1.equals(r2)); [EOL]     r1 = RandomStringUtils.randomNumeric(50); [EOL]     assertEquals("randomNumeric(50)", 50, r1.length()); [EOL]     for (int i = 0; i < r1.length(); i++) { [EOL]         assertTrue("r1 contains numeric", Character.isDigit(r1.charAt(i)) && !Character.isLetter(r1.charAt(i))); [EOL]     } [EOL]     r2 = RandomStringUtils.randomNumeric(50); [EOL]     assertTrue("!r1.equals(r2)", !r1.equals(r2)); [EOL]     String set = "abcdefg"; [EOL]     r1 = RandomStringUtils.random(50, set); [EOL]     assertEquals("random(50, \"abcdefg\")", 50, r1.length()); [EOL]     for (int i = 0; i < r1.length(); i++) { [EOL]         assertTrue("random char in set", set.indexOf(r1.charAt(i)) > -1); [EOL]     } [EOL]     r2 = RandomStringUtils.random(50, set); [EOL]     assertTrue("!r1.equals(r2)", !r1.equals(r2)); [EOL]     r1 = RandomStringUtils.random(50, (String) null); [EOL]     assertEquals("random(50) length", 50, r1.length()); [EOL]     r2 = RandomStringUtils.random(50, (String) null); [EOL]     assertEquals("random(50) length", 50, r2.length()); [EOL]     assertTrue("!r1.equals(r2)", !r1.equals(r2)); [EOL]     set = "stuvwxyz"; [EOL]     r1 = RandomStringUtils.random(50, set.toCharArray()); [EOL]     assertEquals("random(50, \"stuvwxyz\")", 50, r1.length()); [EOL]     for (int i = 0; i < r1.length(); i++) { [EOL]         assertTrue("random char in set", set.indexOf(r1.charAt(i)) > -1); [EOL]     } [EOL]     r2 = RandomStringUtils.random(50, set); [EOL]     assertTrue("!r1.equals(r2)", !r1.equals(r2)); [EOL]     r1 = RandomStringUtils.random(50, (char[]) null); [EOL]     assertEquals("random(50) length", 50, r1.length()); [EOL]     r2 = RandomStringUtils.random(50, (char[]) null); [EOL]     assertEquals("random(50) length", 50, r2.length()); [EOL]     assertTrue("!r1.equals(r2)", !r1.equals(r2)); [EOL]     final long seed = System.currentTimeMillis(); [EOL]     r1 = RandomStringUtils.random(50, 0, 0, true, true, null, new Random(seed)); [EOL]     r2 = RandomStringUtils.random(50, 0, 0, true, true, null, new Random(seed)); [EOL]     assertEquals("r1.equals(r2)", r1, r2); [EOL]     r1 = RandomStringUtils.random(0); [EOL]     assertEquals("random(0).equals(\"\")", "", r1); [EOL] }
@Test [EOL] public void testRandomStringUtils() { [EOL]     String r1 = RandomStringUtils.random(50); [EOL]     assertEquals("random(50) length", 50, r1.length()); [EOL]     String r2 = RandomStringUtils.random(50); [EOL]     assertEquals("random(50) length", 50, r2.length()); [EOL]     assertTrue("!r1.equals(r2)", !r1.equals(r2)); [EOL]     r1 = RandomStringUtils.randomAscii(50); [EOL]     assertEquals("randomAscii(50) length", 50, r1.length()); [EOL]     for (int i = 0; i < r1.length(); i++) { [EOL]         assertTrue("char between 32 and 127", r1.charAt(i) >= 32 && r1.charAt(i) <= 127); [EOL]     } [EOL]     r2 = RandomStringUtils.randomAscii(50); [EOL]     assertTrue("!r1.equals(r2)", !r1.equals(r2)); [EOL]     r1 = RandomStringUtils.randomAlphabetic(50); [EOL]     assertEquals("randomAlphabetic(50)", 50, r1.length()); [EOL]     for (int i = 0; i < r1.length(); i++) { [EOL]         assertTrue("r1 contains alphabetic", Character.isLetter(r1.charAt(i)) && !Character.isDigit(r1.charAt(i))); [EOL]     } [EOL]     r2 = RandomStringUtils.randomAlphabetic(50); [EOL]     assertTrue("!r1.equals(r2)", !r1.equals(r2)); [EOL]     r1 = RandomStringUtils.randomAlphanumeric(50); [EOL]     assertEquals("randomAlphanumeric(50)", 50, r1.length()); [EOL]     for (int i = 0; i < r1.length(); i++) { [EOL]         assertTrue("r1 contains alphanumeric", Character.isLetterOrDigit(r1.charAt(i))); [EOL]     } [EOL]     r2 = RandomStringUtils.randomAlphabetic(50); [EOL]     assertTrue("!r1.equals(r2)", !r1.equals(r2)); [EOL]     r1 = RandomStringUtils.randomNumeric(50); [EOL]     assertEquals("randomNumeric(50)", 50, r1.length()); [EOL]     for (int i = 0; i < r1.length(); i++) { [EOL]         assertTrue("r1 contains numeric", Character.isDigit(r1.charAt(i)) && !Character.isLetter(r1.charAt(i))); [EOL]     } [EOL]     r2 = RandomStringUtils.randomNumeric(50); [EOL]     assertTrue("!r1.equals(r2)", !r1.equals(r2)); [EOL]     String set = "abcdefg"; [EOL]     r1 = RandomStringUtils.random(50, set); [EOL]     assertEquals("random(50, \"abcdefg\")", 50, r1.length()); [EOL]     for (int i = 0; i < r1.length(); i++) { [EOL]         assertTrue("random char in set", set.indexOf(r1.charAt(i)) > -1); [EOL]     } [EOL]     r2 = RandomStringUtils.random(50, set); [EOL]     assertTrue("!r1.equals(r2)", !r1.equals(r2)); [EOL]     r1 = RandomStringUtils.random(50, (String) null); [EOL]     assertEquals("random(50) length", 50, r1.length()); [EOL]     r2 = RandomStringUtils.random(50, (String) null); [EOL]     assertEquals("random(50) length", 50, r2.length()); [EOL]     assertTrue("!r1.equals(r2)", !r1.equals(r2)); [EOL]     set = "stuvwxyz"; [EOL]     r1 = RandomStringUtils.random(50, set.toCharArray()); [EOL]     assertEquals("random(50, \"stuvwxyz\")", 50, r1.length()); [EOL]     for (int i = 0; i < r1.length(); i++) { [EOL]         assertTrue("random char in set", set.indexOf(r1.charAt(i)) > -1); [EOL]     } [EOL]     r2 = RandomStringUtils.random(50, set); [EOL]     assertTrue("!r1.equals(r2)", !r1.equals(r2)); [EOL]     r1 = RandomStringUtils.random(50, (char[]) null); [EOL]     assertEquals("random(50) length", 50, r1.length()); [EOL]     r2 = RandomStringUtils.random(50, (char[]) null); [EOL]     assertEquals("random(50) length", 50, r2.length()); [EOL]     assertTrue("!r1.equals(r2)", !r1.equals(r2)); [EOL]     final long seed = System.currentTimeMillis(); [EOL]     r1 = RandomStringUtils.random(50, 0, 0, true, true, null, new Random(seed)); [EOL]     r2 = RandomStringUtils.random(50, 0, 0, true, true, null, new Random(seed)); [EOL]     assertEquals("r1.equals(r2)", r1, r2); [EOL]     r1 = RandomStringUtils.random(0); [EOL]     assertEquals("random(0).equals(\"\")", "", r1); [EOL] }
@Test(expected = NullPointerException.class) [EOL] public void testConstructorNull() { [EOL]     new MutableByte((Number) null); [EOL] }
@Test(expected = NullPointerException.class) [EOL] public void testConstructorNull() { [EOL]     new MutableByte((Number) null); [EOL] }
@Test(expected = NullPointerException.class) [EOL] public void testConstructorNull() { [EOL]     new MutableByte((Number) null); [EOL] }
@Test(expected = NullPointerException.class) [EOL] public void testConstructorNull() { [EOL]     new MutableByte((Number) null); [EOL] }
@Test(expected = NullPointerException.class) [EOL] public void testConstructorNull() { [EOL]     new MutableByte((Number) null); [EOL] }
@Test(expected = NullPointerException.class) [EOL] public void testConstructorNull() { [EOL]     new MutableByte((Number) null); [EOL] }
@Test(expected = NullPointerException.class) [EOL] public void testConstructorNull() { [EOL]     new MutableByte((Number) null); [EOL] }
@Test [EOL] public void testAddValueObject() { [EOL]     final MutableByte mutNum = new MutableByte((byte) 1); [EOL]     mutNum.add(Integer.valueOf(1)); [EOL]     assertEquals((byte) 2, mutNum.byteValue()); [EOL] }
@Test [EOL] public void testSubtractValuePrimitive() { [EOL]     final MutableByte mutNum = new MutableByte((byte) 1); [EOL]     mutNum.subtract((byte) 1); [EOL]     assertEquals((byte) 0, mutNum.byteValue()); [EOL] }
@Test [EOL] public void testPrimitiveValues() { [EOL]     final MutableByte mutNum = new MutableByte((byte) 1); [EOL]     assertEquals(1.0F, mutNum.floatValue(), 0); [EOL]     assertEquals(1.0, mutNum.doubleValue(), 0); [EOL]     assertEquals((byte) 1, mutNum.byteValue()); [EOL]     assertEquals((short) 1, mutNum.shortValue()); [EOL]     assertEquals(1, mutNum.intValue()); [EOL]     assertEquals(1L, mutNum.longValue()); [EOL] }
@Test [EOL] public void testPrimitiveValues() { [EOL]     final MutableByte mutNum = new MutableByte((byte) 1); [EOL]     assertEquals(1.0F, mutNum.floatValue(), 0); [EOL]     assertEquals(1.0, mutNum.doubleValue(), 0); [EOL]     assertEquals((byte) 1, mutNum.byteValue()); [EOL]     assertEquals((short) 1, mutNum.shortValue()); [EOL]     assertEquals(1, mutNum.intValue()); [EOL]     assertEquals(1L, mutNum.longValue()); [EOL] }
@Test [EOL] public void testPrimitiveValues() { [EOL]     final MutableByte mutNum = new MutableByte((byte) 1); [EOL]     assertEquals(1.0F, mutNum.floatValue(), 0); [EOL]     assertEquals(1.0, mutNum.doubleValue(), 0); [EOL]     assertEquals((byte) 1, mutNum.byteValue()); [EOL]     assertEquals((short) 1, mutNum.shortValue()); [EOL]     assertEquals(1, mutNum.intValue()); [EOL]     assertEquals(1L, mutNum.longValue()); [EOL] }
@Test [EOL] public void testPrimitiveValues() { [EOL]     final MutableByte mutNum = new MutableByte((byte) 1); [EOL]     assertEquals(1.0F, mutNum.floatValue(), 0); [EOL]     assertEquals(1.0, mutNum.doubleValue(), 0); [EOL]     assertEquals((byte) 1, mutNum.byteValue()); [EOL]     assertEquals((short) 1, mutNum.shortValue()); [EOL]     assertEquals(1, mutNum.intValue()); [EOL]     assertEquals(1L, mutNum.longValue()); [EOL] }
@Test [EOL] public void testPrimitiveValues() { [EOL]     final MutableByte mutNum = new MutableByte((byte) 1); [EOL]     assertEquals(1.0F, mutNum.floatValue(), 0); [EOL]     assertEquals(1.0, mutNum.doubleValue(), 0); [EOL]     assertEquals((byte) 1, mutNum.byteValue()); [EOL]     assertEquals((short) 1, mutNum.shortValue()); [EOL]     assertEquals(1, mutNum.intValue()); [EOL]     assertEquals(1L, mutNum.longValue()); [EOL] }
@Test [EOL] public void testPrimitiveValues() { [EOL]     final MutableByte mutNum = new MutableByte((byte) 1); [EOL]     assertEquals(1.0F, mutNum.floatValue(), 0); [EOL]     assertEquals(1.0, mutNum.doubleValue(), 0); [EOL]     assertEquals((byte) 1, mutNum.byteValue()); [EOL]     assertEquals((short) 1, mutNum.shortValue()); [EOL]     assertEquals(1, mutNum.intValue()); [EOL]     assertEquals(1L, mutNum.longValue()); [EOL] }
@Test [EOL] public void testToByte() { [EOL]     assertEquals(Byte.valueOf((byte) 0), new MutableByte((byte) 0).toByte()); [EOL]     assertEquals(Byte.valueOf((byte) 123), new MutableByte((byte) 123).toByte()); [EOL] }
@Test [EOL] public void testToByte() { [EOL]     assertEquals(Byte.valueOf((byte) 0), new MutableByte((byte) 0).toByte()); [EOL]     assertEquals(Byte.valueOf((byte) 123), new MutableByte((byte) 123).toByte()); [EOL] }
@Test [EOL] public void testEquals() { [EOL]     final MutableByte mutNumA = new MutableByte((byte) 0); [EOL]     final MutableByte mutNumB = new MutableByte((byte) 0); [EOL]     final MutableByte mutNumC = new MutableByte((byte) 1); [EOL]     assertTrue(mutNumA.equals(mutNumA)); [EOL]     assertTrue(mutNumA.equals(mutNumB)); [EOL]     assertTrue(mutNumB.equals(mutNumA)); [EOL]     assertTrue(mutNumB.equals(mutNumB)); [EOL]     assertFalse(mutNumA.equals(mutNumC)); [EOL]     assertFalse(mutNumB.equals(mutNumC)); [EOL]     assertTrue(mutNumC.equals(mutNumC)); [EOL]     assertFalse(mutNumA.equals(null)); [EOL]     assertFalse(mutNumA.equals(Byte.valueOf((byte) 0))); [EOL]     assertFalse(mutNumA.equals("0")); [EOL] }
@Test [EOL] public void testEquals() { [EOL]     final MutableByte mutNumA = new MutableByte((byte) 0); [EOL]     final MutableByte mutNumB = new MutableByte((byte) 0); [EOL]     final MutableByte mutNumC = new MutableByte((byte) 1); [EOL]     assertTrue(mutNumA.equals(mutNumA)); [EOL]     assertTrue(mutNumA.equals(mutNumB)); [EOL]     assertTrue(mutNumB.equals(mutNumA)); [EOL]     assertTrue(mutNumB.equals(mutNumB)); [EOL]     assertFalse(mutNumA.equals(mutNumC)); [EOL]     assertFalse(mutNumB.equals(mutNumC)); [EOL]     assertTrue(mutNumC.equals(mutNumC)); [EOL]     assertFalse(mutNumA.equals(null)); [EOL]     assertFalse(mutNumA.equals(Byte.valueOf((byte) 0))); [EOL]     assertFalse(mutNumA.equals("0")); [EOL] }
@Test [EOL] public void testEquals() { [EOL]     final MutableByte mutNumA = new MutableByte((byte) 0); [EOL]     final MutableByte mutNumB = new MutableByte((byte) 0); [EOL]     final MutableByte mutNumC = new MutableByte((byte) 1); [EOL]     assertTrue(mutNumA.equals(mutNumA)); [EOL]     assertTrue(mutNumA.equals(mutNumB)); [EOL]     assertTrue(mutNumB.equals(mutNumA)); [EOL]     assertTrue(mutNumB.equals(mutNumB)); [EOL]     assertFalse(mutNumA.equals(mutNumC)); [EOL]     assertFalse(mutNumB.equals(mutNumC)); [EOL]     assertTrue(mutNumC.equals(mutNumC)); [EOL]     assertFalse(mutNumA.equals(null)); [EOL]     assertFalse(mutNumA.equals(Byte.valueOf((byte) 0))); [EOL]     assertFalse(mutNumA.equals("0")); [EOL] }
@Test [EOL] public void testEquals() { [EOL]     final MutableByte mutNumA = new MutableByte((byte) 0); [EOL]     final MutableByte mutNumB = new MutableByte((byte) 0); [EOL]     final MutableByte mutNumC = new MutableByte((byte) 1); [EOL]     assertTrue(mutNumA.equals(mutNumA)); [EOL]     assertTrue(mutNumA.equals(mutNumB)); [EOL]     assertTrue(mutNumB.equals(mutNumA)); [EOL]     assertTrue(mutNumB.equals(mutNumB)); [EOL]     assertFalse(mutNumA.equals(mutNumC)); [EOL]     assertFalse(mutNumB.equals(mutNumC)); [EOL]     assertTrue(mutNumC.equals(mutNumC)); [EOL]     assertFalse(mutNumA.equals(null)); [EOL]     assertFalse(mutNumA.equals(Byte.valueOf((byte) 0))); [EOL]     assertFalse(mutNumA.equals("0")); [EOL] }
@Test [EOL] public void testUnescapeHtml4() { [EOL]     for (int i = 0; i < HTML_ESCAPES.length; ++i) { [EOL]         final String message = HTML_ESCAPES[i][0]; [EOL]         final String expected = HTML_ESCAPES[i][2]; [EOL]         final String original = HTML_ESCAPES[i][1]; [EOL]         assertEquals(message, expected, StringEscapeUtils.unescapeHtml4(original)); [EOL]         final StringWriter sw = new StringWriter(); [EOL]         try { [EOL]             StringEscapeUtils.UNESCAPE_HTML4.translate(original, sw); [EOL]         } catch (final IOException e) { [EOL]         } [EOL]         final String actual = original == null ? null : sw.toString(); [EOL]         assertEquals(message, expected, actual); [EOL]     } [EOL]     assertEquals("funny chars pass through OK", "Fran\u00E7ais", StringEscapeUtils.unescapeHtml4("Fran\u00E7ais")); [EOL]     assertEquals("Hello&;World", StringEscapeUtils.unescapeHtml4("Hello&;World")); [EOL]     assertEquals("Hello&#;World", StringEscapeUtils.unescapeHtml4("Hello&#;World")); [EOL]     assertEquals("Hello&# ;World", StringEscapeUtils.unescapeHtml4("Hello&# ;World")); [EOL]     assertEquals("Hello&##;World", StringEscapeUtils.unescapeHtml4("Hello&##;World")); [EOL] }
@Test [EOL] public void testUnescapeHtml4() { [EOL]     for (int i = 0; i < HTML_ESCAPES.length; ++i) { [EOL]         final String message = HTML_ESCAPES[i][0]; [EOL]         final String expected = HTML_ESCAPES[i][2]; [EOL]         final String original = HTML_ESCAPES[i][1]; [EOL]         assertEquals(message, expected, StringEscapeUtils.unescapeHtml4(original)); [EOL]         final StringWriter sw = new StringWriter(); [EOL]         try { [EOL]             StringEscapeUtils.UNESCAPE_HTML4.translate(original, sw); [EOL]         } catch (final IOException e) { [EOL]         } [EOL]         final String actual = original == null ? null : sw.toString(); [EOL]         assertEquals(message, expected, actual); [EOL]     } [EOL]     assertEquals("funny chars pass through OK", "Fran\u00E7ais", StringEscapeUtils.unescapeHtml4("Fran\u00E7ais")); [EOL]     assertEquals("Hello&;World", StringEscapeUtils.unescapeHtml4("Hello&;World")); [EOL]     assertEquals("Hello&#;World", StringEscapeUtils.unescapeHtml4("Hello&#;World")); [EOL]     assertEquals("Hello&# ;World", StringEscapeUtils.unescapeHtml4("Hello&# ;World")); [EOL]     assertEquals("Hello&##;World", StringEscapeUtils.unescapeHtml4("Hello&##;World")); [EOL] }
@Test [EOL] public void testUnescapeHtml4() { [EOL]     for (int i = 0; i < HTML_ESCAPES.length; ++i) { [EOL]         final String message = HTML_ESCAPES[i][0]; [EOL]         final String expected = HTML_ESCAPES[i][2]; [EOL]         final String original = HTML_ESCAPES[i][1]; [EOL]         assertEquals(message, expected, StringEscapeUtils.unescapeHtml4(original)); [EOL]         final StringWriter sw = new StringWriter(); [EOL]         try { [EOL]             StringEscapeUtils.UNESCAPE_HTML4.translate(original, sw); [EOL]         } catch (final IOException e) { [EOL]         } [EOL]         final String actual = original == null ? null : sw.toString(); [EOL]         assertEquals(message, expected, actual); [EOL]     } [EOL]     assertEquals("funny chars pass through OK", "Fran\u00E7ais", StringEscapeUtils.unescapeHtml4("Fran\u00E7ais")); [EOL]     assertEquals("Hello&;World", StringEscapeUtils.unescapeHtml4("Hello&;World")); [EOL]     assertEquals("Hello&#;World", StringEscapeUtils.unescapeHtml4("Hello&#;World")); [EOL]     assertEquals("Hello&# ;World", StringEscapeUtils.unescapeHtml4("Hello&# ;World")); [EOL]     assertEquals("Hello&##;World", StringEscapeUtils.unescapeHtml4("Hello&##;World")); [EOL] }
@Test [EOL] public void testUnescapeHtml4() { [EOL]     for (int i = 0; i < HTML_ESCAPES.length; ++i) { [EOL]         final String message = HTML_ESCAPES[i][0]; [EOL]         final String expected = HTML_ESCAPES[i][2]; [EOL]         final String original = HTML_ESCAPES[i][1]; [EOL]         assertEquals(message, expected, StringEscapeUtils.unescapeHtml4(original)); [EOL]         final StringWriter sw = new StringWriter(); [EOL]         try { [EOL]             StringEscapeUtils.UNESCAPE_HTML4.translate(original, sw); [EOL]         } catch (final IOException e) { [EOL]         } [EOL]         final String actual = original == null ? null : sw.toString(); [EOL]         assertEquals(message, expected, actual); [EOL]     } [EOL]     assertEquals("funny chars pass through OK", "Fran\u00E7ais", StringEscapeUtils.unescapeHtml4("Fran\u00E7ais")); [EOL]     assertEquals("Hello&;World", StringEscapeUtils.unescapeHtml4("Hello&;World")); [EOL]     assertEquals("Hello&#;World", StringEscapeUtils.unescapeHtml4("Hello&#;World")); [EOL]     assertEquals("Hello&# ;World", StringEscapeUtils.unescapeHtml4("Hello&# ;World")); [EOL]     assertEquals("Hello&##;World", StringEscapeUtils.unescapeHtml4("Hello&##;World")); [EOL] }
@Test [EOL] public void testUnescapeHtml4() { [EOL]     for (int i = 0; i < HTML_ESCAPES.length; ++i) { [EOL]         final String message = HTML_ESCAPES[i][0]; [EOL]         final String expected = HTML_ESCAPES[i][2]; [EOL]         final String original = HTML_ESCAPES[i][1]; [EOL]         assertEquals(message, expected, StringEscapeUtils.unescapeHtml4(original)); [EOL]         final StringWriter sw = new StringWriter(); [EOL]         try { [EOL]             StringEscapeUtils.UNESCAPE_HTML4.translate(original, sw); [EOL]         } catch (final IOException e) { [EOL]         } [EOL]         final String actual = original == null ? null : sw.toString(); [EOL]         assertEquals(message, expected, actual); [EOL]     } [EOL]     assertEquals("funny chars pass through OK", "Fran\u00E7ais", StringEscapeUtils.unescapeHtml4("Fran\u00E7ais")); [EOL]     assertEquals("Hello&;World", StringEscapeUtils.unescapeHtml4("Hello&;World")); [EOL]     assertEquals("Hello&#;World", StringEscapeUtils.unescapeHtml4("Hello&#;World")); [EOL]     assertEquals("Hello&# ;World", StringEscapeUtils.unescapeHtml4("Hello&# ;World")); [EOL]     assertEquals("Hello&##;World", StringEscapeUtils.unescapeHtml4("Hello&##;World")); [EOL] }
@Test [EOL] public void testUnescapeHtml4() { [EOL]     for (int i = 0; i < HTML_ESCAPES.length; ++i) { [EOL]         final String message = HTML_ESCAPES[i][0]; [EOL]         final String expected = HTML_ESCAPES[i][2]; [EOL]         final String original = HTML_ESCAPES[i][1]; [EOL]         assertEquals(message, expected, StringEscapeUtils.unescapeHtml4(original)); [EOL]         final StringWriter sw = new StringWriter(); [EOL]         try { [EOL]             StringEscapeUtils.UNESCAPE_HTML4.translate(original, sw); [EOL]         } catch (final IOException e) { [EOL]         } [EOL]         final String actual = original == null ? null : sw.toString(); [EOL]         assertEquals(message, expected, actual); [EOL]     } [EOL]     assertEquals("funny chars pass through OK", "Fran\u00E7ais", StringEscapeUtils.unescapeHtml4("Fran\u00E7ais")); [EOL]     assertEquals("Hello&;World", StringEscapeUtils.unescapeHtml4("Hello&;World")); [EOL]     assertEquals("Hello&#;World", StringEscapeUtils.unescapeHtml4("Hello&#;World")); [EOL]     assertEquals("Hello&# ;World", StringEscapeUtils.unescapeHtml4("Hello&# ;World")); [EOL]     assertEquals("Hello&##;World", StringEscapeUtils.unescapeHtml4("Hello&##;World")); [EOL] }
@Test [EOL] public void testUnescapeHtml4() { [EOL]     for (int i = 0; i < HTML_ESCAPES.length; ++i) { [EOL]         final String message = HTML_ESCAPES[i][0]; [EOL]         final String expected = HTML_ESCAPES[i][2]; [EOL]         final String original = HTML_ESCAPES[i][1]; [EOL]         assertEquals(message, expected, StringEscapeUtils.unescapeHtml4(original)); [EOL]         final StringWriter sw = new StringWriter(); [EOL]         try { [EOL]             StringEscapeUtils.UNESCAPE_HTML4.translate(original, sw); [EOL]         } catch (final IOException e) { [EOL]         } [EOL]         final String actual = original == null ? null : sw.toString(); [EOL]         assertEquals(message, expected, actual); [EOL]     } [EOL]     assertEquals("funny chars pass through OK", "Fran\u00E7ais", StringEscapeUtils.unescapeHtml4("Fran\u00E7ais")); [EOL]     assertEquals("Hello&;World", StringEscapeUtils.unescapeHtml4("Hello&;World")); [EOL]     assertEquals("Hello&#;World", StringEscapeUtils.unescapeHtml4("Hello&#;World")); [EOL]     assertEquals("Hello&# ;World", StringEscapeUtils.unescapeHtml4("Hello&# ;World")); [EOL]     assertEquals("Hello&##;World", StringEscapeUtils.unescapeHtml4("Hello&##;World")); [EOL] }
@Test [EOL] public void testUnescapeHtml4() { [EOL]     for (int i = 0; i < HTML_ESCAPES.length; ++i) { [EOL]         final String message = HTML_ESCAPES[i][0]; [EOL]         final String expected = HTML_ESCAPES[i][2]; [EOL]         final String original = HTML_ESCAPES[i][1]; [EOL]         assertEquals(message, expected, StringEscapeUtils.unescapeHtml4(original)); [EOL]         final StringWriter sw = new StringWriter(); [EOL]         try { [EOL]             StringEscapeUtils.UNESCAPE_HTML4.translate(original, sw); [EOL]         } catch (final IOException e) { [EOL]         } [EOL]         final String actual = original == null ? null : sw.toString(); [EOL]         assertEquals(message, expected, actual); [EOL]     } [EOL]     assertEquals("funny chars pass through OK", "Fran\u00E7ais", StringEscapeUtils.unescapeHtml4("Fran\u00E7ais")); [EOL]     assertEquals("Hello&;World", StringEscapeUtils.unescapeHtml4("Hello&;World")); [EOL]     assertEquals("Hello&#;World", StringEscapeUtils.unescapeHtml4("Hello&#;World")); [EOL]     assertEquals("Hello&# ;World", StringEscapeUtils.unescapeHtml4("Hello&# ;World")); [EOL]     assertEquals("Hello&##;World", StringEscapeUtils.unescapeHtml4("Hello&##;World")); [EOL] }
@Test [EOL] public void testUnescapeHtml4() { [EOL]     for (int i = 0; i < HTML_ESCAPES.length; ++i) { [EOL]         final String message = HTML_ESCAPES[i][0]; [EOL]         final String expected = HTML_ESCAPES[i][2]; [EOL]         final String original = HTML_ESCAPES[i][1]; [EOL]         assertEquals(message, expected, StringEscapeUtils.unescapeHtml4(original)); [EOL]         final StringWriter sw = new StringWriter(); [EOL]         try { [EOL]             StringEscapeUtils.UNESCAPE_HTML4.translate(original, sw); [EOL]         } catch (final IOException e) { [EOL]         } [EOL]         final String actual = original == null ? null : sw.toString(); [EOL]         assertEquals(message, expected, actual); [EOL]     } [EOL]     assertEquals("funny chars pass through OK", "Fran\u00E7ais", StringEscapeUtils.unescapeHtml4("Fran\u00E7ais")); [EOL]     assertEquals("Hello&;World", StringEscapeUtils.unescapeHtml4("Hello&;World")); [EOL]     assertEquals("Hello&#;World", StringEscapeUtils.unescapeHtml4("Hello&#;World")); [EOL]     assertEquals("Hello&# ;World", StringEscapeUtils.unescapeHtml4("Hello&# ;World")); [EOL]     assertEquals("Hello&##;World", StringEscapeUtils.unescapeHtml4("Hello&##;World")); [EOL] }
@Test [EOL] public void testUnescapeHtml4() { [EOL]     for (int i = 0; i < HTML_ESCAPES.length; ++i) { [EOL]         final String message = HTML_ESCAPES[i][0]; [EOL]         final String expected = HTML_ESCAPES[i][2]; [EOL]         final String original = HTML_ESCAPES[i][1]; [EOL]         assertEquals(message, expected, StringEscapeUtils.unescapeHtml4(original)); [EOL]         final StringWriter sw = new StringWriter(); [EOL]         try { [EOL]             StringEscapeUtils.UNESCAPE_HTML4.translate(original, sw); [EOL]         } catch (final IOException e) { [EOL]         } [EOL]         final String actual = original == null ? null : sw.toString(); [EOL]         assertEquals(message, expected, actual); [EOL]     } [EOL]     assertEquals("funny chars pass through OK", "Fran\u00E7ais", StringEscapeUtils.unescapeHtml4("Fran\u00E7ais")); [EOL]     assertEquals("Hello&;World", StringEscapeUtils.unescapeHtml4("Hello&;World")); [EOL]     assertEquals("Hello&#;World", StringEscapeUtils.unescapeHtml4("Hello&#;World")); [EOL]     assertEquals("Hello&# ;World", StringEscapeUtils.unescapeHtml4("Hello&# ;World")); [EOL]     assertEquals("Hello&##;World", StringEscapeUtils.unescapeHtml4("Hello&##;World")); [EOL] }
@Test [EOL] public void testDefaultAppend() { [EOL]     assertEquals("foo", FormattableUtils.append("foo", new Formatter(), 0, -1, -1).toString()); [EOL]     assertEquals("fo", FormattableUtils.append("foo", new Formatter(), 0, -1, 2).toString()); [EOL]     assertEquals(" foo", FormattableUtils.append("foo", new Formatter(), 0, 4, -1).toString()); [EOL]     assertEquals("   foo", FormattableUtils.append("foo", new Formatter(), 0, 6, -1).toString()); [EOL]     assertEquals(" fo", FormattableUtils.append("foo", new Formatter(), 0, 3, 2).toString()); [EOL]     assertEquals("   fo", FormattableUtils.append("foo", new Formatter(), 0, 5, 2).toString()); [EOL]     assertEquals("foo ", FormattableUtils.append("foo", new Formatter(), LEFT_JUSTIFY, 4, -1).toString()); [EOL]     assertEquals("foo   ", FormattableUtils.append("foo", new Formatter(), LEFT_JUSTIFY, 6, -1).toString()); [EOL]     assertEquals("fo ", FormattableUtils.append("foo", new Formatter(), LEFT_JUSTIFY, 3, 2).toString()); [EOL]     assertEquals("fo   ", FormattableUtils.append("foo", new Formatter(), LEFT_JUSTIFY, 5, 2).toString()); [EOL] }
@Test [EOL] public void testAlternatePadCharAndEllipsis() { [EOL]     assertEquals("foo", FormattableUtils.append("foo", new Formatter(), 0, -1, -1, '_', "*").toString()); [EOL]     assertEquals("f*", FormattableUtils.append("foo", new Formatter(), 0, -1, 2, '_', "*").toString()); [EOL]     assertEquals("_foo", FormattableUtils.append("foo", new Formatter(), 0, 4, -1, '_', "*").toString()); [EOL]     assertEquals("___foo", FormattableUtils.append("foo", new Formatter(), 0, 6, -1, '_', "*").toString()); [EOL]     assertEquals("_f*", FormattableUtils.append("foo", new Formatter(), 0, 3, 2, '_', "*").toString()); [EOL]     assertEquals("___f*", FormattableUtils.append("foo", new Formatter(), 0, 5, 2, '_', "*").toString()); [EOL]     assertEquals("foo_", FormattableUtils.append("foo", new Formatter(), LEFT_JUSTIFY, 4, -1, '_', "*").toString()); [EOL]     assertEquals("foo___", FormattableUtils.append("foo", new Formatter(), LEFT_JUSTIFY, 6, -1, '_', "*").toString()); [EOL]     assertEquals("f*_", FormattableUtils.append("foo", new Formatter(), LEFT_JUSTIFY, 3, 2, '_', "*").toString()); [EOL]     assertEquals("f*___", FormattableUtils.append("foo", new Formatter(), LEFT_JUSTIFY, 5, 2, '_', "*").toString()); [EOL]     assertEquals("foo", FormattableUtils.append("foo", new Formatter(), 0, -1, -1, '_', "+*").toString()); [EOL]     assertEquals("+*", FormattableUtils.append("foo", new Formatter(), 0, -1, 2, '_', "+*").toString()); [EOL]     assertEquals("_foo", FormattableUtils.append("foo", new Formatter(), 0, 4, -1, '_', "+*").toString()); [EOL]     assertEquals("___foo", FormattableUtils.append("foo", new Formatter(), 0, 6, -1, '_', "+*").toString()); [EOL]     assertEquals("_+*", FormattableUtils.append("foo", new Formatter(), 0, 3, 2, '_', "+*").toString()); [EOL]     assertEquals("___+*", FormattableUtils.append("foo", new Formatter(), 0, 5, 2, '_', "+*").toString()); [EOL]     assertEquals("foo_", FormattableUtils.append("foo", new Formatter(), LEFT_JUSTIFY, 4, -1, '_', "+*").toString()); [EOL]     assertEquals("foo___", FormattableUtils.append("foo", new Formatter(), LEFT_JUSTIFY, 6, -1, '_', "+*").toString()); [EOL]     assertEquals("+*_", FormattableUtils.append("foo", new Formatter(), LEFT_JUSTIFY, 3, 2, '_', "+*").toString()); [EOL]     assertEquals("+*___", FormattableUtils.append("foo", new Formatter(), LEFT_JUSTIFY, 5, 2, '_', "+*").toString()); [EOL] }
@Test [EOL] public void testAlternatePadCharAndEllipsis() { [EOL]     assertEquals("foo", FormattableUtils.append("foo", new Formatter(), 0, -1, -1, '_', "*").toString()); [EOL]     assertEquals("f*", FormattableUtils.append("foo", new Formatter(), 0, -1, 2, '_', "*").toString()); [EOL]     assertEquals("_foo", FormattableUtils.append("foo", new Formatter(), 0, 4, -1, '_', "*").toString()); [EOL]     assertEquals("___foo", FormattableUtils.append("foo", new Formatter(), 0, 6, -1, '_', "*").toString()); [EOL]     assertEquals("_f*", FormattableUtils.append("foo", new Formatter(), 0, 3, 2, '_', "*").toString()); [EOL]     assertEquals("___f*", FormattableUtils.append("foo", new Formatter(), 0, 5, 2, '_', "*").toString()); [EOL]     assertEquals("foo_", FormattableUtils.append("foo", new Formatter(), LEFT_JUSTIFY, 4, -1, '_', "*").toString()); [EOL]     assertEquals("foo___", FormattableUtils.append("foo", new Formatter(), LEFT_JUSTIFY, 6, -1, '_', "*").toString()); [EOL]     assertEquals("f*_", FormattableUtils.append("foo", new Formatter(), LEFT_JUSTIFY, 3, 2, '_', "*").toString()); [EOL]     assertEquals("f*___", FormattableUtils.append("foo", new Formatter(), LEFT_JUSTIFY, 5, 2, '_', "*").toString()); [EOL]     assertEquals("foo", FormattableUtils.append("foo", new Formatter(), 0, -1, -1, '_', "+*").toString()); [EOL]     assertEquals("+*", FormattableUtils.append("foo", new Formatter(), 0, -1, 2, '_', "+*").toString()); [EOL]     assertEquals("_foo", FormattableUtils.append("foo", new Formatter(), 0, 4, -1, '_', "+*").toString()); [EOL]     assertEquals("___foo", FormattableUtils.append("foo", new Formatter(), 0, 6, -1, '_', "+*").toString()); [EOL]     assertEquals("_+*", FormattableUtils.append("foo", new Formatter(), 0, 3, 2, '_', "+*").toString()); [EOL]     assertEquals("___+*", FormattableUtils.append("foo", new Formatter(), 0, 5, 2, '_', "+*").toString()); [EOL]     assertEquals("foo_", FormattableUtils.append("foo", new Formatter(), LEFT_JUSTIFY, 4, -1, '_', "+*").toString()); [EOL]     assertEquals("foo___", FormattableUtils.append("foo", new Formatter(), LEFT_JUSTIFY, 6, -1, '_', "+*").toString()); [EOL]     assertEquals("+*_", FormattableUtils.append("foo", new Formatter(), LEFT_JUSTIFY, 3, 2, '_', "+*").toString()); [EOL]     assertEquals("+*___", FormattableUtils.append("foo", new Formatter(), LEFT_JUSTIFY, 5, 2, '_', "+*").toString()); [EOL] }
@Test [EOL] public void testAlternatePadCharAndEllipsis() { [EOL]     assertEquals("foo", FormattableUtils.append("foo", new Formatter(), 0, -1, -1, '_', "*").toString()); [EOL]     assertEquals("f*", FormattableUtils.append("foo", new Formatter(), 0, -1, 2, '_', "*").toString()); [EOL]     assertEquals("_foo", FormattableUtils.append("foo", new Formatter(), 0, 4, -1, '_', "*").toString()); [EOL]     assertEquals("___foo", FormattableUtils.append("foo", new Formatter(), 0, 6, -1, '_', "*").toString()); [EOL]     assertEquals("_f*", FormattableUtils.append("foo", new Formatter(), 0, 3, 2, '_', "*").toString()); [EOL]     assertEquals("___f*", FormattableUtils.append("foo", new Formatter(), 0, 5, 2, '_', "*").toString()); [EOL]     assertEquals("foo_", FormattableUtils.append("foo", new Formatter(), LEFT_JUSTIFY, 4, -1, '_', "*").toString()); [EOL]     assertEquals("foo___", FormattableUtils.append("foo", new Formatter(), LEFT_JUSTIFY, 6, -1, '_', "*").toString()); [EOL]     assertEquals("f*_", FormattableUtils.append("foo", new Formatter(), LEFT_JUSTIFY, 3, 2, '_', "*").toString()); [EOL]     assertEquals("f*___", FormattableUtils.append("foo", new Formatter(), LEFT_JUSTIFY, 5, 2, '_', "*").toString()); [EOL]     assertEquals("foo", FormattableUtils.append("foo", new Formatter(), 0, -1, -1, '_', "+*").toString()); [EOL]     assertEquals("+*", FormattableUtils.append("foo", new Formatter(), 0, -1, 2, '_', "+*").toString()); [EOL]     assertEquals("_foo", FormattableUtils.append("foo", new Formatter(), 0, 4, -1, '_', "+*").toString()); [EOL]     assertEquals("___foo", FormattableUtils.append("foo", new Formatter(), 0, 6, -1, '_', "+*").toString()); [EOL]     assertEquals("_+*", FormattableUtils.append("foo", new Formatter(), 0, 3, 2, '_', "+*").toString()); [EOL]     assertEquals("___+*", FormattableUtils.append("foo", new Formatter(), 0, 5, 2, '_', "+*").toString()); [EOL]     assertEquals("foo_", FormattableUtils.append("foo", new Formatter(), LEFT_JUSTIFY, 4, -1, '_', "+*").toString()); [EOL]     assertEquals("foo___", FormattableUtils.append("foo", new Formatter(), LEFT_JUSTIFY, 6, -1, '_', "+*").toString()); [EOL]     assertEquals("+*_", FormattableUtils.append("foo", new Formatter(), LEFT_JUSTIFY, 3, 2, '_', "+*").toString()); [EOL]     assertEquals("+*___", FormattableUtils.append("foo", new Formatter(), LEFT_JUSTIFY, 5, 2, '_', "+*").toString()); [EOL] }
@Test [EOL] public void testAlternatePadCharAndEllipsis() { [EOL]     assertEquals("foo", FormattableUtils.append("foo", new Formatter(), 0, -1, -1, '_', "*").toString()); [EOL]     assertEquals("f*", FormattableUtils.append("foo", new Formatter(), 0, -1, 2, '_', "*").toString()); [EOL]     assertEquals("_foo", FormattableUtils.append("foo", new Formatter(), 0, 4, -1, '_', "*").toString()); [EOL]     assertEquals("___foo", FormattableUtils.append("foo", new Formatter(), 0, 6, -1, '_', "*").toString()); [EOL]     assertEquals("_f*", FormattableUtils.append("foo", new Formatter(), 0, 3, 2, '_', "*").toString()); [EOL]     assertEquals("___f*", FormattableUtils.append("foo", new Formatter(), 0, 5, 2, '_', "*").toString()); [EOL]     assertEquals("foo_", FormattableUtils.append("foo", new Formatter(), LEFT_JUSTIFY, 4, -1, '_', "*").toString()); [EOL]     assertEquals("foo___", FormattableUtils.append("foo", new Formatter(), LEFT_JUSTIFY, 6, -1, '_', "*").toString()); [EOL]     assertEquals("f*_", FormattableUtils.append("foo", new Formatter(), LEFT_JUSTIFY, 3, 2, '_', "*").toString()); [EOL]     assertEquals("f*___", FormattableUtils.append("foo", new Formatter(), LEFT_JUSTIFY, 5, 2, '_', "*").toString()); [EOL]     assertEquals("foo", FormattableUtils.append("foo", new Formatter(), 0, -1, -1, '_', "+*").toString()); [EOL]     assertEquals("+*", FormattableUtils.append("foo", new Formatter(), 0, -1, 2, '_', "+*").toString()); [EOL]     assertEquals("_foo", FormattableUtils.append("foo", new Formatter(), 0, 4, -1, '_', "+*").toString()); [EOL]     assertEquals("___foo", FormattableUtils.append("foo", new Formatter(), 0, 6, -1, '_', "+*").toString()); [EOL]     assertEquals("_+*", FormattableUtils.append("foo", new Formatter(), 0, 3, 2, '_', "+*").toString()); [EOL]     assertEquals("___+*", FormattableUtils.append("foo", new Formatter(), 0, 5, 2, '_', "+*").toString()); [EOL]     assertEquals("foo_", FormattableUtils.append("foo", new Formatter(), LEFT_JUSTIFY, 4, -1, '_', "+*").toString()); [EOL]     assertEquals("foo___", FormattableUtils.append("foo", new Formatter(), LEFT_JUSTIFY, 6, -1, '_', "+*").toString()); [EOL]     assertEquals("+*_", FormattableUtils.append("foo", new Formatter(), LEFT_JUSTIFY, 3, 2, '_', "+*").toString()); [EOL]     assertEquals("+*___", FormattableUtils.append("foo", new Formatter(), LEFT_JUSTIFY, 5, 2, '_', "+*").toString()); [EOL] }
@Test [EOL] public void testAlternatePadCharAndEllipsis() { [EOL]     assertEquals("foo", FormattableUtils.append("foo", new Formatter(), 0, -1, -1, '_', "*").toString()); [EOL]     assertEquals("f*", FormattableUtils.append("foo", new Formatter(), 0, -1, 2, '_', "*").toString()); [EOL]     assertEquals("_foo", FormattableUtils.append("foo", new Formatter(), 0, 4, -1, '_', "*").toString()); [EOL]     assertEquals("___foo", FormattableUtils.append("foo", new Formatter(), 0, 6, -1, '_', "*").toString()); [EOL]     assertEquals("_f*", FormattableUtils.append("foo", new Formatter(), 0, 3, 2, '_', "*").toString()); [EOL]     assertEquals("___f*", FormattableUtils.append("foo", new Formatter(), 0, 5, 2, '_', "*").toString()); [EOL]     assertEquals("foo_", FormattableUtils.append("foo", new Formatter(), LEFT_JUSTIFY, 4, -1, '_', "*").toString()); [EOL]     assertEquals("foo___", FormattableUtils.append("foo", new Formatter(), LEFT_JUSTIFY, 6, -1, '_', "*").toString()); [EOL]     assertEquals("f*_", FormattableUtils.append("foo", new Formatter(), LEFT_JUSTIFY, 3, 2, '_', "*").toString()); [EOL]     assertEquals("f*___", FormattableUtils.append("foo", new Formatter(), LEFT_JUSTIFY, 5, 2, '_', "*").toString()); [EOL]     assertEquals("foo", FormattableUtils.append("foo", new Formatter(), 0, -1, -1, '_', "+*").toString()); [EOL]     assertEquals("+*", FormattableUtils.append("foo", new Formatter(), 0, -1, 2, '_', "+*").toString()); [EOL]     assertEquals("_foo", FormattableUtils.append("foo", new Formatter(), 0, 4, -1, '_', "+*").toString()); [EOL]     assertEquals("___foo", FormattableUtils.append("foo", new Formatter(), 0, 6, -1, '_', "+*").toString()); [EOL]     assertEquals("_+*", FormattableUtils.append("foo", new Formatter(), 0, 3, 2, '_', "+*").toString()); [EOL]     assertEquals("___+*", FormattableUtils.append("foo", new Formatter(), 0, 5, 2, '_', "+*").toString()); [EOL]     assertEquals("foo_", FormattableUtils.append("foo", new Formatter(), LEFT_JUSTIFY, 4, -1, '_', "+*").toString()); [EOL]     assertEquals("foo___", FormattableUtils.append("foo", new Formatter(), LEFT_JUSTIFY, 6, -1, '_', "+*").toString()); [EOL]     assertEquals("+*_", FormattableUtils.append("foo", new Formatter(), LEFT_JUSTIFY, 3, 2, '_', "+*").toString()); [EOL]     assertEquals("+*___", FormattableUtils.append("foo", new Formatter(), LEFT_JUSTIFY, 5, 2, '_', "+*").toString()); [EOL] }
@Test [EOL] public void test_getEnum() { [EOL]     assertEquals(Traffic.RED, EnumUtils.getEnum(Traffic.class, "RED")); [EOL]     assertEquals(Traffic.AMBER, EnumUtils.getEnum(Traffic.class, "AMBER")); [EOL]     assertEquals(Traffic.GREEN, EnumUtils.getEnum(Traffic.class, "GREEN")); [EOL]     assertEquals(null, EnumUtils.getEnum(Traffic.class, "PURPLE")); [EOL]     assertEquals(null, EnumUtils.getEnum(Traffic.class, null)); [EOL] }
@Test [EOL] public void test_getEnum() { [EOL]     assertEquals(Traffic.RED, EnumUtils.getEnum(Traffic.class, "RED")); [EOL]     assertEquals(Traffic.AMBER, EnumUtils.getEnum(Traffic.class, "AMBER")); [EOL]     assertEquals(Traffic.GREEN, EnumUtils.getEnum(Traffic.class, "GREEN")); [EOL]     assertEquals(null, EnumUtils.getEnum(Traffic.class, "PURPLE")); [EOL]     assertEquals(null, EnumUtils.getEnum(Traffic.class, null)); [EOL] }
@Test [EOL] public void test_getEnum() { [EOL]     assertEquals(Traffic.RED, EnumUtils.getEnum(Traffic.class, "RED")); [EOL]     assertEquals(Traffic.AMBER, EnumUtils.getEnum(Traffic.class, "AMBER")); [EOL]     assertEquals(Traffic.GREEN, EnumUtils.getEnum(Traffic.class, "GREEN")); [EOL]     assertEquals(null, EnumUtils.getEnum(Traffic.class, "PURPLE")); [EOL]     assertEquals(null, EnumUtils.getEnum(Traffic.class, null)); [EOL] }
@Test [EOL] public void test_getInstance_String_Locale() { [EOL]     final Locale realDefaultLocale = Locale.getDefault(); [EOL]     try { [EOL]         Locale.setDefault(Locale.US); [EOL]         final FastDateFormat format1 = FastDateFormat.getInstance("MM/DD/yyyy", Locale.GERMANY); [EOL]         final FastDateFormat format2 = FastDateFormat.getInstance("MM/DD/yyyy"); [EOL]         final FastDateFormat format3 = FastDateFormat.getInstance("MM/DD/yyyy", Locale.GERMANY); [EOL]         assertTrue(format1 != format2); [EOL]         assertSame(format1, format3); [EOL]         assertEquals(Locale.GERMANY, format1.getLocale()); [EOL]     } finally { [EOL]         Locale.setDefault(realDefaultLocale); [EOL]     } [EOL] }
@Test [EOL] public void test_getInstance_String_Locale() { [EOL]     final Locale realDefaultLocale = Locale.getDefault(); [EOL]     try { [EOL]         Locale.setDefault(Locale.US); [EOL]         final FastDateFormat format1 = FastDateFormat.getInstance("MM/DD/yyyy", Locale.GERMANY); [EOL]         final FastDateFormat format2 = FastDateFormat.getInstance("MM/DD/yyyy"); [EOL]         final FastDateFormat format3 = FastDateFormat.getInstance("MM/DD/yyyy", Locale.GERMANY); [EOL]         assertTrue(format1 != format2); [EOL]         assertSame(format1, format3); [EOL]         assertEquals(Locale.GERMANY, format1.getLocale()); [EOL]     } finally { [EOL]         Locale.setDefault(realDefaultLocale); [EOL]     } [EOL] }
@Test [EOL] public void test_getInstance_String_Locale() { [EOL]     final Locale realDefaultLocale = Locale.getDefault(); [EOL]     try { [EOL]         Locale.setDefault(Locale.US); [EOL]         final FastDateFormat format1 = FastDateFormat.getInstance("MM/DD/yyyy", Locale.GERMANY); [EOL]         final FastDateFormat format2 = FastDateFormat.getInstance("MM/DD/yyyy"); [EOL]         final FastDateFormat format3 = FastDateFormat.getInstance("MM/DD/yyyy", Locale.GERMANY); [EOL]         assertTrue(format1 != format2); [EOL]         assertSame(format1, format3); [EOL]         assertEquals(Locale.GERMANY, format1.getLocale()); [EOL]     } finally { [EOL]         Locale.setDefault(realDefaultLocale); [EOL]     } [EOL] }
@Test [EOL] public void test_getInstance_String_Locale() { [EOL]     final Locale realDefaultLocale = Locale.getDefault(); [EOL]     try { [EOL]         Locale.setDefault(Locale.US); [EOL]         final FastDateFormat format1 = FastDateFormat.getInstance("MM/DD/yyyy", Locale.GERMANY); [EOL]         final FastDateFormat format2 = FastDateFormat.getInstance("MM/DD/yyyy"); [EOL]         final FastDateFormat format3 = FastDateFormat.getInstance("MM/DD/yyyy", Locale.GERMANY); [EOL]         assertTrue(format1 != format2); [EOL]         assertSame(format1, format3); [EOL]         assertEquals(Locale.GERMANY, format1.getLocale()); [EOL]     } finally { [EOL]         Locale.setDefault(realDefaultLocale); [EOL]     } [EOL] }
@Test [EOL] public void test_getInstance_String_Locale() { [EOL]     final Locale realDefaultLocale = Locale.getDefault(); [EOL]     try { [EOL]         Locale.setDefault(Locale.US); [EOL]         final FastDateFormat format1 = FastDateFormat.getInstance("MM/DD/yyyy", Locale.GERMANY); [EOL]         final FastDateFormat format2 = FastDateFormat.getInstance("MM/DD/yyyy"); [EOL]         final FastDateFormat format3 = FastDateFormat.getInstance("MM/DD/yyyy", Locale.GERMANY); [EOL]         assertTrue(format1 != format2); [EOL]         assertSame(format1, format3); [EOL]         assertEquals(Locale.GERMANY, format1.getLocale()); [EOL]     } finally { [EOL]         Locale.setDefault(realDefaultLocale); [EOL]     } [EOL] }
@Test [EOL] public void testHashCode() throws Exception { [EOL]     assertEquals(ImmutableTriple.of(null, "foo", Boolean.TRUE).hashCode(), ImmutableTriple.of(null, "foo", Boolean.TRUE).hashCode()); [EOL] }
@Test [EOL] public void testHashCode() throws Exception { [EOL]     assertEquals(ImmutableTriple.of(null, "foo", Boolean.TRUE).hashCode(), ImmutableTriple.of(null, "foo", Boolean.TRUE).hashCode()); [EOL] }
@Test [EOL] public void testHashCode() throws Exception { [EOL]     assertEquals(ImmutableTriple.of(null, "foo", Boolean.TRUE).hashCode(), ImmutableTriple.of(null, "foo", Boolean.TRUE).hashCode()); [EOL] }
@Test [EOL] public void testHashCode() throws Exception { [EOL]     assertEquals(ImmutableTriple.of(null, "foo", Boolean.TRUE).hashCode(), ImmutableTriple.of(null, "foo", Boolean.TRUE).hashCode()); [EOL] }
@Test [EOL] public void testHashCode() throws Exception { [EOL]     assertEquals(ImmutableTriple.of(null, "foo", Boolean.TRUE).hashCode(), ImmutableTriple.of(null, "foo", Boolean.TRUE).hashCode()); [EOL] }
@Test [EOL] public void testLongArray() { [EOL]     long[] array = new long[] { 1, 2, -3, 4 }; [EOL]     assertEquals(baseStr + "[{1,2,-3,4}]", new ToStringBuilder(base).append(array).toString()); [EOL]     assertEquals(baseStr + "[{1,2,-3,4}]", new ToStringBuilder(base).append((Object) array).toString()); [EOL]     array = null; [EOL]     assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); [EOL]     assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); [EOL] }
@Test [EOL] public void testLongArray() { [EOL]     long[] array = new long[] { 1, 2, -3, 4 }; [EOL]     assertEquals(baseStr + "[{1,2,-3,4}]", new ToStringBuilder(base).append(array).toString()); [EOL]     assertEquals(baseStr + "[{1,2,-3,4}]", new ToStringBuilder(base).append((Object) array).toString()); [EOL]     array = null; [EOL]     assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); [EOL]     assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); [EOL] }
@Test [EOL] public void test_toStringExcludeNullArray() { [EOL]     final String toString = ReflectionToStringBuilder.toStringExclude(new TestFixture(), (String[]) null); [EOL]     this.validateSecretFieldPresent(toString); [EOL] }
@Test [EOL] public void test_toStringExcludeNullArray() { [EOL]     final String toString = ReflectionToStringBuilder.toStringExclude(new TestFixture(), (String[]) null); [EOL]     this.validateSecretFieldPresent(toString); [EOL] }
@Test [EOL] public void test_toStringExcludeNullArray() { [EOL]     final String toString = ReflectionToStringBuilder.toStringExclude(new TestFixture(), (String[]) null); [EOL]     this.validateSecretFieldPresent(toString); [EOL] }
@Test [EOL] public void testConstructorEx3() { [EOL]     assertEquals("<null>", new ToStringBuilder(null, null, null).toString()); [EOL]     new ToStringBuilder(this.base, null, null).toString(); [EOL]     new ToStringBuilder(this.base, ToStringStyle.DEFAULT_STYLE, null).toString(); [EOL] }
@Test [EOL] public void testConstructorEx3() { [EOL]     assertEquals("<null>", new ToStringBuilder(null, null, null).toString()); [EOL]     new ToStringBuilder(this.base, null, null).toString(); [EOL]     new ToStringBuilder(this.base, ToStringStyle.DEFAULT_STYLE, null).toString(); [EOL] }
@Test [EOL] public void testIsSameLocalTime_Cal() { [EOL]     final GregorianCalendar cal1 = new GregorianCalendar(TimeZone.getTimeZone("GMT+1")); [EOL]     final GregorianCalendar cal2 = new GregorianCalendar(TimeZone.getTimeZone("GMT-1")); [EOL]     cal1.set(2004, 6, 9, 13, 45, 0); [EOL]     cal1.set(Calendar.MILLISECOND, 0); [EOL]     cal2.set(2004, 6, 9, 13, 45, 0); [EOL]     cal2.set(Calendar.MILLISECOND, 0); [EOL]     assertTrue(DateUtils.isSameLocalTime(cal1, cal2)); [EOL]     final Calendar cal3 = Calendar.getInstance(); [EOL]     final Calendar cal4 = Calendar.getInstance(); [EOL]     cal3.set(2004, 6, 9, 4, 0, 0); [EOL]     cal4.set(2004, 6, 9, 16, 0, 0); [EOL]     cal3.set(Calendar.MILLISECOND, 0); [EOL]     cal4.set(Calendar.MILLISECOND, 0); [EOL]     assertFalse("LANG-677", DateUtils.isSameLocalTime(cal3, cal4)); [EOL]     cal2.set(2004, 6, 9, 11, 45, 0); [EOL]     assertFalse(DateUtils.isSameLocalTime(cal1, cal2)); [EOL]     try { [EOL]         DateUtils.isSameLocalTime((Calendar) null, (Calendar) null); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL] }
@Test [EOL] public void testLang530() throws ParseException { [EOL]     final Date d = new Date(); [EOL]     final String isoDateStr = DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.format(d); [EOL]     final Date d2 = DateUtils.parseDate(isoDateStr, new String[] { DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.getPattern() }); [EOL]     assertEquals("Date not equal to itself ISO formatted and parsed", d.getTime(), d2.getTime() + d.getTime() % 1000); [EOL] }
@Test [EOL] public void testAddYears() throws Exception { [EOL]     final Date base = new Date(MILLIS_TEST); [EOL]     Date result = DateUtils.addYears(base, 0); [EOL]     assertNotSame(base, result); [EOL]     assertDate(base, 2000, 6, 5, 4, 3, 2, 1); [EOL]     assertDate(result, 2000, 6, 5, 4, 3, 2, 1); [EOL]     result = DateUtils.addYears(base, 1); [EOL]     assertNotSame(base, result); [EOL]     assertDate(base, 2000, 6, 5, 4, 3, 2, 1); [EOL]     assertDate(result, 2001, 6, 5, 4, 3, 2, 1); [EOL]     result = DateUtils.addYears(base, -1); [EOL]     assertNotSame(base, result); [EOL]     assertDate(base, 2000, 6, 5, 4, 3, 2, 1); [EOL]     assertDate(result, 1999, 6, 5, 4, 3, 2, 1); [EOL] }
@Test [EOL] public void testAddMinutes() throws Exception { [EOL]     final Date base = new Date(MILLIS_TEST); [EOL]     Date result = DateUtils.addMinutes(base, 0); [EOL]     assertNotSame(base, result); [EOL]     assertDate(base, 2000, 6, 5, 4, 3, 2, 1); [EOL]     assertDate(result, 2000, 6, 5, 4, 3, 2, 1); [EOL]     result = DateUtils.addMinutes(base, 1); [EOL]     assertNotSame(base, result); [EOL]     assertDate(base, 2000, 6, 5, 4, 3, 2, 1); [EOL]     assertDate(result, 2000, 6, 5, 4, 4, 2, 1); [EOL]     result = DateUtils.addMinutes(base, -1); [EOL]     assertNotSame(base, result); [EOL]     assertDate(base, 2000, 6, 5, 4, 3, 2, 1); [EOL]     assertDate(result, 2000, 6, 5, 4, 2, 2, 1); [EOL] }
@Test [EOL] public void testAddSeconds() throws Exception { [EOL]     final Date base = new Date(MILLIS_TEST); [EOL]     Date result = DateUtils.addSeconds(base, 0); [EOL]     assertNotSame(base, result); [EOL]     assertDate(base, 2000, 6, 5, 4, 3, 2, 1); [EOL]     assertDate(result, 2000, 6, 5, 4, 3, 2, 1); [EOL]     result = DateUtils.addSeconds(base, 1); [EOL]     assertNotSame(base, result); [EOL]     assertDate(base, 2000, 6, 5, 4, 3, 2, 1); [EOL]     assertDate(result, 2000, 6, 5, 4, 3, 3, 1); [EOL]     result = DateUtils.addSeconds(base, -1); [EOL]     assertNotSame(base, result); [EOL]     assertDate(base, 2000, 6, 5, 4, 3, 2, 1); [EOL]     assertDate(result, 2000, 6, 5, 4, 3, 1, 1); [EOL] }
@Test [EOL] public void testSetYears() throws Exception { [EOL]     final Date base = new Date(MILLIS_TEST); [EOL]     Date result = DateUtils.setYears(base, 2000); [EOL]     assertNotSame(base, result); [EOL]     assertDate(base, 2000, 6, 5, 4, 3, 2, 1); [EOL]     assertDate(result, 2000, 6, 5, 4, 3, 2, 1); [EOL]     result = DateUtils.setYears(base, 2008); [EOL]     assertNotSame(base, result); [EOL]     assertDate(base, 2000, 6, 5, 4, 3, 2, 1); [EOL]     assertDate(result, 2008, 6, 5, 4, 3, 2, 1); [EOL]     result = DateUtils.setYears(base, 2005); [EOL]     assertNotSame(base, result); [EOL]     assertDate(base, 2000, 6, 5, 4, 3, 2, 1); [EOL]     assertDate(result, 2005, 6, 5, 4, 3, 2, 1); [EOL] }
@Test [EOL] public void testSetHours() throws Exception { [EOL]     final Date base = new Date(MILLIS_TEST); [EOL]     Date result = DateUtils.setHours(base, 0); [EOL]     assertNotSame(base, result); [EOL]     assertDate(base, 2000, 6, 5, 4, 3, 2, 1); [EOL]     assertDate(result, 2000, 6, 5, 0, 3, 2, 1); [EOL]     result = DateUtils.setHours(base, 23); [EOL]     assertNotSame(base, result); [EOL]     assertDate(base, 2000, 6, 5, 4, 3, 2, 1); [EOL]     assertDate(result, 2000, 6, 5, 23, 3, 2, 1); [EOL]     try { [EOL]         result = DateUtils.setHours(base, 24); [EOL]         fail("DateUtils.setHours did not throw an expected IllegalArguementException."); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL] }
@Test [EOL] public void testSetMilliseconds() throws Exception { [EOL]     final Date base = new Date(MILLIS_TEST); [EOL]     Date result = DateUtils.setMilliseconds(base, 0); [EOL]     assertNotSame(base, result); [EOL]     assertDate(base, 2000, 6, 5, 4, 3, 2, 1); [EOL]     assertDate(result, 2000, 6, 5, 4, 3, 2, 0); [EOL]     result = DateUtils.setMilliseconds(base, 999); [EOL]     assertNotSame(base, result); [EOL]     assertDate(base, 2000, 6, 5, 4, 3, 2, 1); [EOL]     assertDate(result, 2000, 6, 5, 4, 3, 2, 999); [EOL]     try { [EOL]         result = DateUtils.setMilliseconds(base, 1000); [EOL]         fail("DateUtils.setMilliseconds did not throw an expected IllegalArguementException."); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL] }
@Test [EOL] public void testRoundMinute() throws Exception { [EOL]     final int calendarField = Calendar.MINUTE; [EOL]     Date roundedUpDate, roundedDownDate, lastRoundedDownDate; [EOL]     Date minDate, maxDate; [EOL]     roundedUpDate = dateTimeParser.parse("June 1, 2008 8:16:00.000"); [EOL]     roundedDownDate = targetMinuteDate; [EOL]     lastRoundedDownDate = dateTimeParser.parse("June 1, 2008 8:15:29.999"); [EOL]     baseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate, calendarField); [EOL]     minDate = dateTimeParser.parse("December 31, 2007 23:59:30.000"); [EOL]     maxDate = dateTimeParser.parse("January 1, 2008 0:00:29.999"); [EOL]     roundToJanuaryFirst(minDate, maxDate, calendarField); [EOL] }
@Test [EOL] public void testRoundMinute() throws Exception { [EOL]     final int calendarField = Calendar.MINUTE; [EOL]     Date roundedUpDate, roundedDownDate, lastRoundedDownDate; [EOL]     Date minDate, maxDate; [EOL]     roundedUpDate = dateTimeParser.parse("June 1, 2008 8:16:00.000"); [EOL]     roundedDownDate = targetMinuteDate; [EOL]     lastRoundedDownDate = dateTimeParser.parse("June 1, 2008 8:15:29.999"); [EOL]     baseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate, calendarField); [EOL]     minDate = dateTimeParser.parse("December 31, 2007 23:59:30.000"); [EOL]     maxDate = dateTimeParser.parse("January 1, 2008 0:00:29.999"); [EOL]     roundToJanuaryFirst(minDate, maxDate, calendarField); [EOL] }
@Test [EOL] public void testRoundMinute() throws Exception { [EOL]     final int calendarField = Calendar.MINUTE; [EOL]     Date roundedUpDate, roundedDownDate, lastRoundedDownDate; [EOL]     Date minDate, maxDate; [EOL]     roundedUpDate = dateTimeParser.parse("June 1, 2008 8:16:00.000"); [EOL]     roundedDownDate = targetMinuteDate; [EOL]     lastRoundedDownDate = dateTimeParser.parse("June 1, 2008 8:15:29.999"); [EOL]     baseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate, calendarField); [EOL]     minDate = dateTimeParser.parse("December 31, 2007 23:59:30.000"); [EOL]     maxDate = dateTimeParser.parse("January 1, 2008 0:00:29.999"); [EOL]     roundToJanuaryFirst(minDate, maxDate, calendarField); [EOL] }
@Test [EOL] public void testRoundMinute() throws Exception { [EOL]     final int calendarField = Calendar.MINUTE; [EOL]     Date roundedUpDate, roundedDownDate, lastRoundedDownDate; [EOL]     Date minDate, maxDate; [EOL]     roundedUpDate = dateTimeParser.parse("June 1, 2008 8:16:00.000"); [EOL]     roundedDownDate = targetMinuteDate; [EOL]     lastRoundedDownDate = dateTimeParser.parse("June 1, 2008 8:15:29.999"); [EOL]     baseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate, calendarField); [EOL]     minDate = dateTimeParser.parse("December 31, 2007 23:59:30.000"); [EOL]     maxDate = dateTimeParser.parse("January 1, 2008 0:00:29.999"); [EOL]     roundToJanuaryFirst(minDate, maxDate, calendarField); [EOL] }
@Test [EOL] public void testRoundMinute() throws Exception { [EOL]     final int calendarField = Calendar.MINUTE; [EOL]     Date roundedUpDate, roundedDownDate, lastRoundedDownDate; [EOL]     Date minDate, maxDate; [EOL]     roundedUpDate = dateTimeParser.parse("June 1, 2008 8:16:00.000"); [EOL]     roundedDownDate = targetMinuteDate; [EOL]     lastRoundedDownDate = dateTimeParser.parse("June 1, 2008 8:15:29.999"); [EOL]     baseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate, calendarField); [EOL]     minDate = dateTimeParser.parse("December 31, 2007 23:59:30.000"); [EOL]     maxDate = dateTimeParser.parse("January 1, 2008 0:00:29.999"); [EOL]     roundToJanuaryFirst(minDate, maxDate, calendarField); [EOL] }
@Test [EOL] public void testTruncateMilliSecond() throws Exception { [EOL]     final int calendarField = Calendar.MILLISECOND; [EOL]     baseTruncateTest(targetMilliSecondDate, targetMilliSecondDate, calendarField); [EOL] }
@Test [EOL] public void testMillisecondsOfYearWithCalendar() { [EOL]     final long testResult = DateUtils.getFragmentInMilliseconds(aCalendar, Calendar.YEAR); [EOL]     assertEquals(millis + (seconds * DateUtils.MILLIS_PER_SECOND) + (minutes * DateUtils.MILLIS_PER_MINUTE) + (hours * DateUtils.MILLIS_PER_HOUR) + (aCalendar.get(Calendar.DAY_OF_YEAR) * DateUtils.MILLIS_PER_DAY), testResult); [EOL] }
@Test [EOL] public void testInvalidFragmentWithCalendar() { [EOL]     try { [EOL]         DateUtils.getFragmentInMilliseconds(aCalendar, 0); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         DateUtils.getFragmentInSeconds(aCalendar, 0); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         DateUtils.getFragmentInMinutes(aCalendar, 0); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         DateUtils.getFragmentInHours(aCalendar, 0); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         DateUtils.getFragmentInDays(aCalendar, 0); [EOL]         fail(); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL] }
@Test [EOL] public void testDateFragmentInLargerUnitWithCalendar() { [EOL]     assertEquals(0, DateUtils.getFragmentInDays(aCalendar, Calendar.DATE)); [EOL] }
@Test [EOL] public void testMillisecondsOfYearWithCalendar() { [EOL]     final long testResult = DateUtils.getFragmentInMilliseconds(aCalendar, Calendar.YEAR); [EOL]     assertEquals(millis + (seconds * DateUtils.MILLIS_PER_SECOND) + (minutes * DateUtils.MILLIS_PER_MINUTE) + (hours * DateUtils.MILLIS_PER_HOUR) + (aCalendar.get(Calendar.DAY_OF_YEAR) * DateUtils.MILLIS_PER_DAY), testResult); [EOL] }
@Test [EOL] public void testMillisecondsOfYearWithCalendar() { [EOL]     final long testResult = DateUtils.getFragmentInMilliseconds(aCalendar, Calendar.YEAR); [EOL]     assertEquals(millis + (seconds * DateUtils.MILLIS_PER_SECOND) + (minutes * DateUtils.MILLIS_PER_MINUTE) + (hours * DateUtils.MILLIS_PER_HOUR) + (aCalendar.get(Calendar.DAY_OF_YEAR) * DateUtils.MILLIS_PER_DAY), testResult); [EOL] }
@Test [EOL] public void testInitials_String_charArray() { [EOL]     char[] array = null; [EOL]     assertEquals(null, WordUtils.initials(null, array)); [EOL]     assertEquals("", WordUtils.initials("", array)); [EOL]     assertEquals("", WordUtils.initials("  ", array)); [EOL]     assertEquals("I", WordUtils.initials("I", array)); [EOL]     assertEquals("i", WordUtils.initials("i", array)); [EOL]     assertEquals("S", WordUtils.initials("SJC", array)); [EOL]     assertEquals("BJL", WordUtils.initials("Ben John Lee", array)); [EOL]     assertEquals("BJ", WordUtils.initials("Ben J.Lee", array)); [EOL]     assertEquals("BJ.L", WordUtils.initials(" Ben   John  . Lee", array)); [EOL]     assertEquals("KO", WordUtils.initials("Kay O'Murphy", array)); [EOL]     assertEquals("iah1", WordUtils.initials("i am here 123", array)); [EOL]     array = new char[0]; [EOL]     assertEquals(null, WordUtils.initials(null, array)); [EOL]     assertEquals("", WordUtils.initials("", array)); [EOL]     assertEquals("", WordUtils.initials("  ", array)); [EOL]     assertEquals("", WordUtils.initials("I", array)); [EOL]     assertEquals("", WordUtils.initials("i", array)); [EOL]     assertEquals("", WordUtils.initials("SJC", array)); [EOL]     assertEquals("", WordUtils.initials("Ben John Lee", array)); [EOL]     assertEquals("", WordUtils.initials("Ben J.Lee", array)); [EOL]     assertEquals("", WordUtils.initials(" Ben   John  . Lee", array)); [EOL]     assertEquals("", WordUtils.initials("Kay O'Murphy", array)); [EOL]     assertEquals("", WordUtils.initials("i am here 123", array)); [EOL]     array = " ".toCharArray(); [EOL]     assertEquals(null, WordUtils.initials(null, array)); [EOL]     assertEquals("", WordUtils.initials("", array)); [EOL]     assertEquals("", WordUtils.initials("  ", array)); [EOL]     assertEquals("I", WordUtils.initials("I", array)); [EOL]     assertEquals("i", WordUtils.initials("i", array)); [EOL]     assertEquals("S", WordUtils.initials("SJC", array)); [EOL]     assertEquals("BJL", WordUtils.initials("Ben John Lee", array)); [EOL]     assertEquals("BJ", WordUtils.initials("Ben J.Lee", array)); [EOL]     assertEquals("BJ.L", WordUtils.initials(" Ben   John  . Lee", array)); [EOL]     assertEquals("KO", WordUtils.initials("Kay O'Murphy", array)); [EOL]     assertEquals("iah1", WordUtils.initials("i am here 123", array)); [EOL]     array = " .".toCharArray(); [EOL]     assertEquals(null, WordUtils.initials(null, array)); [EOL]     assertEquals("", WordUtils.initials("", array)); [EOL]     assertEquals("", WordUtils.initials("  ", array)); [EOL]     assertEquals("I", WordUtils.initials("I", array)); [EOL]     assertEquals("i", WordUtils.initials("i", array)); [EOL]     assertEquals("S", WordUtils.initials("SJC", array)); [EOL]     assertEquals("BJL", WordUtils.initials("Ben John Lee", array)); [EOL]     assertEquals("BJL", WordUtils.initials("Ben J.Lee", array)); [EOL]     assertEquals("BJL", WordUtils.initials(" Ben   John  . Lee", array)); [EOL]     assertEquals("KO", WordUtils.initials("Kay O'Murphy", array)); [EOL]     assertEquals("iah1", WordUtils.initials("i am here 123", array)); [EOL]     array = " .'".toCharArray(); [EOL]     assertEquals(null, WordUtils.initials(null, array)); [EOL]     assertEquals("", WordUtils.initials("", array)); [EOL]     assertEquals("", WordUtils.initials("  ", array)); [EOL]     assertEquals("I", WordUtils.initials("I", array)); [EOL]     assertEquals("i", WordUtils.initials("i", array)); [EOL]     assertEquals("S", WordUtils.initials("SJC", array)); [EOL]     assertEquals("BJL", WordUtils.initials("Ben John Lee", array)); [EOL]     assertEquals("BJL", WordUtils.initials("Ben J.Lee", array)); [EOL]     assertEquals("BJL", WordUtils.initials(" Ben   John  . Lee", array)); [EOL]     assertEquals("KOM", WordUtils.initials("Kay O'Murphy", array)); [EOL]     assertEquals("iah1", WordUtils.initials("i am here 123", array)); [EOL]     array = "SIJo1".toCharArray(); [EOL]     assertEquals(null, WordUtils.initials(null, array)); [EOL]     assertEquals("", WordUtils.initials("", array)); [EOL]     assertEquals(" ", WordUtils.initials("  ", array)); [EOL]     assertEquals("", WordUtils.initials("I", array)); [EOL]     assertEquals("i", WordUtils.initials("i", array)); [EOL]     assertEquals("C", WordUtils.initials("SJC", array)); [EOL]     assertEquals("Bh", WordUtils.initials("Ben John Lee", array)); [EOL]     assertEquals("B.", WordUtils.initials("Ben J.Lee", array)); [EOL]     assertEquals(" h", WordUtils.initials(" Ben   John  . Lee", array)); [EOL]     assertEquals("K", WordUtils.initials("Kay O'Murphy", array)); [EOL]     assertEquals("i2", WordUtils.initials("i am here 123", array)); [EOL] }
@Test [EOL] public void testUnescapeHtml4() { [EOL]     for (int i = 0; i < HTML_ESCAPES.length; ++i) { [EOL]         final String message = HTML_ESCAPES[i][0]; [EOL]         final String expected = HTML_ESCAPES[i][2]; [EOL]         final String original = HTML_ESCAPES[i][1]; [EOL]         assertEquals(message, expected, StringEscapeUtils.unescapeHtml4(original)); [EOL]         final StringWriter sw = new StringWriter(); [EOL]         try { [EOL]             StringEscapeUtils.UNESCAPE_HTML4.translate(original, sw); [EOL]         } catch (final IOException e) { [EOL]         } [EOL]         final String actual = original == null ? null : sw.toString(); [EOL]         assertEquals(message, expected, actual); [EOL]     } [EOL]     assertEquals("funny chars pass through OK", "Fran\u00E7ais", StringEscapeUtils.unescapeHtml4("Fran\u00E7ais")); [EOL]     assertEquals("Hello&;World", StringEscapeUtils.unescapeHtml4("Hello&;World")); [EOL]     assertEquals("Hello&#;World", StringEscapeUtils.unescapeHtml4("Hello&#;World")); [EOL]     assertEquals("Hello&# ;World", StringEscapeUtils.unescapeHtml4("Hello&# ;World")); [EOL]     assertEquals("Hello&##;World", StringEscapeUtils.unescapeHtml4("Hello&##;World")); [EOL] }
@Test [EOL] public void testUnescapeHtml4() { [EOL]     for (int i = 0; i < HTML_ESCAPES.length; ++i) { [EOL]         final String message = HTML_ESCAPES[i][0]; [EOL]         final String expected = HTML_ESCAPES[i][2]; [EOL]         final String original = HTML_ESCAPES[i][1]; [EOL]         assertEquals(message, expected, StringEscapeUtils.unescapeHtml4(original)); [EOL]         final StringWriter sw = new StringWriter(); [EOL]         try { [EOL]             StringEscapeUtils.UNESCAPE_HTML4.translate(original, sw); [EOL]         } catch (final IOException e) { [EOL]         } [EOL]         final String actual = original == null ? null : sw.toString(); [EOL]         assertEquals(message, expected, actual); [EOL]     } [EOL]     assertEquals("funny chars pass through OK", "Fran\u00E7ais", StringEscapeUtils.unescapeHtml4("Fran\u00E7ais")); [EOL]     assertEquals("Hello&;World", StringEscapeUtils.unescapeHtml4("Hello&;World")); [EOL]     assertEquals("Hello&#;World", StringEscapeUtils.unescapeHtml4("Hello&#;World")); [EOL]     assertEquals("Hello&# ;World", StringEscapeUtils.unescapeHtml4("Hello&# ;World")); [EOL]     assertEquals("Hello&##;World", StringEscapeUtils.unescapeHtml4("Hello&##;World")); [EOL] }
@Test [EOL] public void testConstructor() { [EOL]     assertNotNull(new LocaleUtils()); [EOL]     final Constructor<?>[] cons = LocaleUtils.class.getDeclaredConstructors(); [EOL]     assertEquals(1, cons.length); [EOL]     assertTrue(Modifier.isPublic(cons[0].getModifiers())); [EOL]     assertTrue(Modifier.isPublic(LocaleUtils.class.getModifiers())); [EOL]     assertFalse(Modifier.isFinal(LocaleUtils.class.getModifiers())); [EOL] }
@Test [EOL] public void testToMap() { [EOL]     Map<?, ?> map = ArrayUtils.toMap(new String[][] { { "foo", "bar" }, { "hello", "world" } }); [EOL]     assertEquals("bar", map.get("foo")); [EOL]     assertEquals("world", map.get("hello")); [EOL]     assertEquals(null, ArrayUtils.toMap(null)); [EOL]     try { [EOL]         ArrayUtils.toMap(new String[][] { { "foo", "bar" }, { "short" } }); [EOL]         fail("exception expected"); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         ArrayUtils.toMap(new Object[] { new Object[] { "foo", "bar" }, "illegal type" }); [EOL]         fail("exception expected"); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         ArrayUtils.toMap(new Object[] { new Object[] { "foo", "bar" }, null }); [EOL]         fail("exception expected"); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     map = ArrayUtils.toMap(new Object[] { new Map.Entry<Object, Object>() { [EOL]  [EOL]         @Override [EOL]         public Object getKey() { [EOL]             return "foo"; [EOL]         } [EOL]  [EOL]         @Override [EOL]         public Object getValue() { [EOL]             return "bar"; [EOL]         } [EOL]  [EOL]         @Override [EOL]         public Object setValue(final Object value) { [EOL]             throw new UnsupportedOperationException(); [EOL]         } [EOL]  [EOL]         @Override [EOL]         public boolean equals(final Object o) { [EOL]             throw new UnsupportedOperationException(); [EOL]         } [EOL]  [EOL]         @Override [EOL]         public int hashCode() { [EOL]             throw new UnsupportedOperationException(); [EOL]         } [EOL]     } }); [EOL]     assertEquals("bar", map.get("foo")); [EOL] }
@Test [EOL] public void testToMap() { [EOL]     Map<?, ?> map = ArrayUtils.toMap(new String[][] { { "foo", "bar" }, { "hello", "world" } }); [EOL]     assertEquals("bar", map.get("foo")); [EOL]     assertEquals("world", map.get("hello")); [EOL]     assertEquals(null, ArrayUtils.toMap(null)); [EOL]     try { [EOL]         ArrayUtils.toMap(new String[][] { { "foo", "bar" }, { "short" } }); [EOL]         fail("exception expected"); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         ArrayUtils.toMap(new Object[] { new Object[] { "foo", "bar" }, "illegal type" }); [EOL]         fail("exception expected"); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         ArrayUtils.toMap(new Object[] { new Object[] { "foo", "bar" }, null }); [EOL]         fail("exception expected"); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     map = ArrayUtils.toMap(new Object[] { new Map.Entry<Object, Object>() { [EOL]  [EOL]         @Override [EOL]         public Object getKey() { [EOL]             return "foo"; [EOL]         } [EOL]  [EOL]         @Override [EOL]         public Object getValue() { [EOL]             return "bar"; [EOL]         } [EOL]  [EOL]         @Override [EOL]         public Object setValue(final Object value) { [EOL]             throw new UnsupportedOperationException(); [EOL]         } [EOL]  [EOL]         @Override [EOL]         public boolean equals(final Object o) { [EOL]             throw new UnsupportedOperationException(); [EOL]         } [EOL]  [EOL]         @Override [EOL]         public int hashCode() { [EOL]             throw new UnsupportedOperationException(); [EOL]         } [EOL]     } }); [EOL]     assertEquals("bar", map.get("foo")); [EOL] }
@Test [EOL] public void testToMap() { [EOL]     Map<?, ?> map = ArrayUtils.toMap(new String[][] { { "foo", "bar" }, { "hello", "world" } }); [EOL]     assertEquals("bar", map.get("foo")); [EOL]     assertEquals("world", map.get("hello")); [EOL]     assertEquals(null, ArrayUtils.toMap(null)); [EOL]     try { [EOL]         ArrayUtils.toMap(new String[][] { { "foo", "bar" }, { "short" } }); [EOL]         fail("exception expected"); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         ArrayUtils.toMap(new Object[] { new Object[] { "foo", "bar" }, "illegal type" }); [EOL]         fail("exception expected"); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         ArrayUtils.toMap(new Object[] { new Object[] { "foo", "bar" }, null }); [EOL]         fail("exception expected"); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     map = ArrayUtils.toMap(new Object[] { new Map.Entry<Object, Object>() { [EOL]  [EOL]         @Override [EOL]         public Object getKey() { [EOL]             return "foo"; [EOL]         } [EOL]  [EOL]         @Override [EOL]         public Object getValue() { [EOL]             return "bar"; [EOL]         } [EOL]  [EOL]         @Override [EOL]         public Object setValue(final Object value) { [EOL]             throw new UnsupportedOperationException(); [EOL]         } [EOL]  [EOL]         @Override [EOL]         public boolean equals(final Object o) { [EOL]             throw new UnsupportedOperationException(); [EOL]         } [EOL]  [EOL]         @Override [EOL]         public int hashCode() { [EOL]             throw new UnsupportedOperationException(); [EOL]         } [EOL]     } }); [EOL]     assertEquals("bar", map.get("foo")); [EOL] }
@Test [EOL] public void testToMap() { [EOL]     Map<?, ?> map = ArrayUtils.toMap(new String[][] { { "foo", "bar" }, { "hello", "world" } }); [EOL]     assertEquals("bar", map.get("foo")); [EOL]     assertEquals("world", map.get("hello")); [EOL]     assertEquals(null, ArrayUtils.toMap(null)); [EOL]     try { [EOL]         ArrayUtils.toMap(new String[][] { { "foo", "bar" }, { "short" } }); [EOL]         fail("exception expected"); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         ArrayUtils.toMap(new Object[] { new Object[] { "foo", "bar" }, "illegal type" }); [EOL]         fail("exception expected"); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         ArrayUtils.toMap(new Object[] { new Object[] { "foo", "bar" }, null }); [EOL]         fail("exception expected"); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     map = ArrayUtils.toMap(new Object[] { new Map.Entry<Object, Object>() { [EOL]  [EOL]         @Override [EOL]         public Object getKey() { [EOL]             return "foo"; [EOL]         } [EOL]  [EOL]         @Override [EOL]         public Object getValue() { [EOL]             return "bar"; [EOL]         } [EOL]  [EOL]         @Override [EOL]         public Object setValue(final Object value) { [EOL]             throw new UnsupportedOperationException(); [EOL]         } [EOL]  [EOL]         @Override [EOL]         public boolean equals(final Object o) { [EOL]             throw new UnsupportedOperationException(); [EOL]         } [EOL]  [EOL]         @Override [EOL]         public int hashCode() { [EOL]             throw new UnsupportedOperationException(); [EOL]         } [EOL]     } }); [EOL]     assertEquals("bar", map.get("foo")); [EOL] }
@Test [EOL] public void testToMap() { [EOL]     Map<?, ?> map = ArrayUtils.toMap(new String[][] { { "foo", "bar" }, { "hello", "world" } }); [EOL]     assertEquals("bar", map.get("foo")); [EOL]     assertEquals("world", map.get("hello")); [EOL]     assertEquals(null, ArrayUtils.toMap(null)); [EOL]     try { [EOL]         ArrayUtils.toMap(new String[][] { { "foo", "bar" }, { "short" } }); [EOL]         fail("exception expected"); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         ArrayUtils.toMap(new Object[] { new Object[] { "foo", "bar" }, "illegal type" }); [EOL]         fail("exception expected"); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         ArrayUtils.toMap(new Object[] { new Object[] { "foo", "bar" }, null }); [EOL]         fail("exception expected"); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     map = ArrayUtils.toMap(new Object[] { new Map.Entry<Object, Object>() { [EOL]  [EOL]         @Override [EOL]         public Object getKey() { [EOL]             return "foo"; [EOL]         } [EOL]  [EOL]         @Override [EOL]         public Object getValue() { [EOL]             return "bar"; [EOL]         } [EOL]  [EOL]         @Override [EOL]         public Object setValue(final Object value) { [EOL]             throw new UnsupportedOperationException(); [EOL]         } [EOL]  [EOL]         @Override [EOL]         public boolean equals(final Object o) { [EOL]             throw new UnsupportedOperationException(); [EOL]         } [EOL]  [EOL]         @Override [EOL]         public int hashCode() { [EOL]             throw new UnsupportedOperationException(); [EOL]         } [EOL]     } }); [EOL]     assertEquals("bar", map.get("foo")); [EOL] }
@Test [EOL] public void testToMap() { [EOL]     Map<?, ?> map = ArrayUtils.toMap(new String[][] { { "foo", "bar" }, { "hello", "world" } }); [EOL]     assertEquals("bar", map.get("foo")); [EOL]     assertEquals("world", map.get("hello")); [EOL]     assertEquals(null, ArrayUtils.toMap(null)); [EOL]     try { [EOL]         ArrayUtils.toMap(new String[][] { { "foo", "bar" }, { "short" } }); [EOL]         fail("exception expected"); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         ArrayUtils.toMap(new Object[] { new Object[] { "foo", "bar" }, "illegal type" }); [EOL]         fail("exception expected"); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         ArrayUtils.toMap(new Object[] { new Object[] { "foo", "bar" }, null }); [EOL]         fail("exception expected"); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     map = ArrayUtils.toMap(new Object[] { new Map.Entry<Object, Object>() { [EOL]  [EOL]         @Override [EOL]         public Object getKey() { [EOL]             return "foo"; [EOL]         } [EOL]  [EOL]         @Override [EOL]         public Object getValue() { [EOL]             return "bar"; [EOL]         } [EOL]  [EOL]         @Override [EOL]         public Object setValue(final Object value) { [EOL]             throw new UnsupportedOperationException(); [EOL]         } [EOL]  [EOL]         @Override [EOL]         public boolean equals(final Object o) { [EOL]             throw new UnsupportedOperationException(); [EOL]         } [EOL]  [EOL]         @Override [EOL]         public int hashCode() { [EOL]             throw new UnsupportedOperationException(); [EOL]         } [EOL]     } }); [EOL]     assertEquals("bar", map.get("foo")); [EOL] }
@Test [EOL] public void testIndirectArrayCreation() { [EOL]     final String[] array = toArrayPropagatingType("foo", "bar"); [EOL]     assertEquals(2, array.length); [EOL]     assertEquals("foo", array[0]); [EOL]     assertEquals("bar", array[1]); [EOL] }
@Test [EOL] public void testIndirectArrayCreation() { [EOL]     final String[] array = toArrayPropagatingType("foo", "bar"); [EOL]     assertEquals(2, array.length); [EOL]     assertEquals("foo", array[0]); [EOL]     assertEquals("bar", array[1]); [EOL] }
@Test [EOL] public void testIndirectArrayCreation() { [EOL]     final String[] array = toArrayPropagatingType("foo", "bar"); [EOL]     assertEquals(2, array.length); [EOL]     assertEquals("foo", array[0]); [EOL]     assertEquals("bar", array[1]); [EOL] }
@Test [EOL] public void testIndirectArrayCreation() { [EOL]     final String[] array = toArrayPropagatingType("foo", "bar"); [EOL]     assertEquals(2, array.length); [EOL]     assertEquals("foo", array[0]); [EOL]     assertEquals("bar", array[1]); [EOL] }
@Test [EOL] public void testCloneFloat() { [EOL]     assertEquals(null, ArrayUtils.clone((float[]) null)); [EOL]     final float[] original = new float[] { 2.6f, 6.4f }; [EOL]     final float[] cloned = ArrayUtils.clone(original); [EOL]     assertTrue(Arrays.equals(original, cloned)); [EOL]     assertTrue(original != cloned); [EOL] }
@Test [EOL] public void testCloneFloat() { [EOL]     assertEquals(null, ArrayUtils.clone((float[]) null)); [EOL]     final float[] original = new float[] { 2.6f, 6.4f }; [EOL]     final float[] cloned = ArrayUtils.clone(original); [EOL]     assertTrue(Arrays.equals(original, cloned)); [EOL]     assertTrue(original != cloned); [EOL] }
@Test [EOL] public void testCloneFloat() { [EOL]     assertEquals(null, ArrayUtils.clone((float[]) null)); [EOL]     final float[] original = new float[] { 2.6f, 6.4f }; [EOL]     final float[] cloned = ArrayUtils.clone(original); [EOL]     assertTrue(Arrays.equals(original, cloned)); [EOL]     assertTrue(original != cloned); [EOL] }
@Test [EOL] public void testNullToEmptyShort() { [EOL]     assertEquals(ArrayUtils.EMPTY_SHORT_ARRAY, ArrayUtils.nullToEmpty((short[]) null)); [EOL]     final short[] original = new short[] { 1, 2 }; [EOL]     assertEquals(original, ArrayUtils.nullToEmpty(original)); [EOL]     final short[] empty = new short[] {}; [EOL]     final short[] result = ArrayUtils.nullToEmpty(empty); [EOL]     assertEquals(ArrayUtils.EMPTY_SHORT_ARRAY, result); [EOL]     assertTrue(empty != result); [EOL] }
@Test [EOL] public void testNullToEmptyShort() { [EOL]     assertEquals(ArrayUtils.EMPTY_SHORT_ARRAY, ArrayUtils.nullToEmpty((short[]) null)); [EOL]     final short[] original = new short[] { 1, 2 }; [EOL]     assertEquals(original, ArrayUtils.nullToEmpty(original)); [EOL]     final short[] empty = new short[] {}; [EOL]     final short[] result = ArrayUtils.nullToEmpty(empty); [EOL]     assertEquals(ArrayUtils.EMPTY_SHORT_ARRAY, result); [EOL]     assertTrue(empty != result); [EOL] }
@Test [EOL] public void testNullToEmptyShort() { [EOL]     assertEquals(ArrayUtils.EMPTY_SHORT_ARRAY, ArrayUtils.nullToEmpty((short[]) null)); [EOL]     final short[] original = new short[] { 1, 2 }; [EOL]     assertEquals(original, ArrayUtils.nullToEmpty(original)); [EOL]     final short[] empty = new short[] {}; [EOL]     final short[] result = ArrayUtils.nullToEmpty(empty); [EOL]     assertEquals(ArrayUtils.EMPTY_SHORT_ARRAY, result); [EOL]     assertTrue(empty != result); [EOL] }
@Test [EOL] public void testNullToEmptyBooleanObject() { [EOL]     assertArrayEquals(ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY, ArrayUtils.nullToEmpty((Boolean[]) null)); [EOL]     final Boolean[] original = new Boolean[] { Boolean.TRUE, Boolean.FALSE }; [EOL]     assertArrayEquals(original, ArrayUtils.nullToEmpty(original)); [EOL]     final Boolean[] empty = new Boolean[] {}; [EOL]     final Boolean[] result = ArrayUtils.nullToEmpty(empty); [EOL]     assertArrayEquals(ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY, result); [EOL]     assertTrue(empty != result); [EOL] }
@Test [EOL] public void testNullToEmptyBooleanObject() { [EOL]     assertArrayEquals(ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY, ArrayUtils.nullToEmpty((Boolean[]) null)); [EOL]     final Boolean[] original = new Boolean[] { Boolean.TRUE, Boolean.FALSE }; [EOL]     assertArrayEquals(original, ArrayUtils.nullToEmpty(original)); [EOL]     final Boolean[] empty = new Boolean[] {}; [EOL]     final Boolean[] result = ArrayUtils.nullToEmpty(empty); [EOL]     assertArrayEquals(ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY, result); [EOL]     assertTrue(empty != result); [EOL] }
@Test [EOL] public void testNullToEmptyBooleanObject() { [EOL]     assertArrayEquals(ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY, ArrayUtils.nullToEmpty((Boolean[]) null)); [EOL]     final Boolean[] original = new Boolean[] { Boolean.TRUE, Boolean.FALSE }; [EOL]     assertArrayEquals(original, ArrayUtils.nullToEmpty(original)); [EOL]     final Boolean[] empty = new Boolean[] {}; [EOL]     final Boolean[] result = ArrayUtils.nullToEmpty(empty); [EOL]     assertArrayEquals(ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY, result); [EOL]     assertTrue(empty != result); [EOL] }
@Test [EOL] public void testSubarrayLong() { [EOL]     final long[] nullArray = null; [EOL]     final long[] array = { 999910, 999911, 999912, 999913, 999914, 999915 }; [EOL]     final long[] leftSubarray = { 999910, 999911, 999912, 999913 }; [EOL]     final long[] midSubarray = { 999911, 999912, 999913, 999914 }; [EOL]     final long[] rightSubarray = { 999912, 999913, 999914, 999915 }; [EOL]     assertTrue("0 start, mid end", ArrayUtils.isEquals(leftSubarray, ArrayUtils.subarray(array, 0, 4))); [EOL]     assertTrue("0 start, length end", ArrayUtils.isEquals(array, ArrayUtils.subarray(array, 0, array.length))); [EOL]     assertTrue("mid start, mid end", ArrayUtils.isEquals(midSubarray, ArrayUtils.subarray(array, 1, 5))); [EOL]     assertTrue("mid start, length end", ArrayUtils.isEquals(rightSubarray, ArrayUtils.subarray(array, 2, array.length))); [EOL]     assertNull("null input", ArrayUtils.subarray(nullArray, 0, 3)); [EOL]     assertEquals("empty array", ArrayUtils.EMPTY_LONG_ARRAY, ArrayUtils.subarray(ArrayUtils.EMPTY_LONG_ARRAY, 1, 2)); [EOL]     assertEquals("start > end", ArrayUtils.EMPTY_LONG_ARRAY, ArrayUtils.subarray(array, 4, 2)); [EOL]     assertEquals("start == end", ArrayUtils.EMPTY_LONG_ARRAY, ArrayUtils.subarray(array, 3, 3)); [EOL]     assertTrue("start undershoot, normal end", ArrayUtils.isEquals(leftSubarray, ArrayUtils.subarray(array, -2, 4))); [EOL]     assertEquals("start overshoot, any end", ArrayUtils.EMPTY_LONG_ARRAY, ArrayUtils.subarray(array, 33, 4)); [EOL]     assertTrue("normal start, end overshoot", ArrayUtils.isEquals(rightSubarray, ArrayUtils.subarray(array, 2, 33))); [EOL]     assertTrue("start undershoot, end overshoot", ArrayUtils.isEquals(array, ArrayUtils.subarray(array, -2, 12))); [EOL]     assertSame("empty array, object test", ArrayUtils.EMPTY_LONG_ARRAY, ArrayUtils.subarray(ArrayUtils.EMPTY_LONG_ARRAY, 1, 2)); [EOL]     assertSame("start > end, object test", ArrayUtils.EMPTY_LONG_ARRAY, ArrayUtils.subarray(array, 4, 1)); [EOL]     assertSame("start == end, object test", ArrayUtils.EMPTY_LONG_ARRAY, ArrayUtils.subarray(array, 3, 3)); [EOL]     assertSame("start overshoot, any end, object test", ArrayUtils.EMPTY_LONG_ARRAY, ArrayUtils.subarray(array, 8733, 4)); [EOL]     assertSame("long type", long.class, ArrayUtils.subarray(array, 2, 4).getClass().getComponentType()); [EOL] }
@Test [EOL] public void testSameLengthByte() { [EOL]     final byte[] nullArray = null; [EOL]     final byte[] emptyArray = new byte[0]; [EOL]     final byte[] oneArray = new byte[] { 3 }; [EOL]     final byte[] twoArray = new byte[] { 4, 6 }; [EOL]     assertTrue(ArrayUtils.isSameLength(nullArray, nullArray)); [EOL]     assertTrue(ArrayUtils.isSameLength(nullArray, emptyArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(nullArray, oneArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(nullArray, twoArray)); [EOL]     assertTrue(ArrayUtils.isSameLength(emptyArray, nullArray)); [EOL]     assertTrue(ArrayUtils.isSameLength(emptyArray, emptyArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(emptyArray, oneArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(emptyArray, twoArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(oneArray, nullArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(oneArray, emptyArray)); [EOL]     assertTrue(ArrayUtils.isSameLength(oneArray, oneArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(oneArray, twoArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(twoArray, nullArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(twoArray, emptyArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(twoArray, oneArray)); [EOL]     assertTrue(ArrayUtils.isSameLength(twoArray, twoArray)); [EOL] }
@Test [EOL] public void testSameLengthByte() { [EOL]     final byte[] nullArray = null; [EOL]     final byte[] emptyArray = new byte[0]; [EOL]     final byte[] oneArray = new byte[] { 3 }; [EOL]     final byte[] twoArray = new byte[] { 4, 6 }; [EOL]     assertTrue(ArrayUtils.isSameLength(nullArray, nullArray)); [EOL]     assertTrue(ArrayUtils.isSameLength(nullArray, emptyArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(nullArray, oneArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(nullArray, twoArray)); [EOL]     assertTrue(ArrayUtils.isSameLength(emptyArray, nullArray)); [EOL]     assertTrue(ArrayUtils.isSameLength(emptyArray, emptyArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(emptyArray, oneArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(emptyArray, twoArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(oneArray, nullArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(oneArray, emptyArray)); [EOL]     assertTrue(ArrayUtils.isSameLength(oneArray, oneArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(oneArray, twoArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(twoArray, nullArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(twoArray, emptyArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(twoArray, oneArray)); [EOL]     assertTrue(ArrayUtils.isSameLength(twoArray, twoArray)); [EOL] }
@Test [EOL] public void testSameLengthByte() { [EOL]     final byte[] nullArray = null; [EOL]     final byte[] emptyArray = new byte[0]; [EOL]     final byte[] oneArray = new byte[] { 3 }; [EOL]     final byte[] twoArray = new byte[] { 4, 6 }; [EOL]     assertTrue(ArrayUtils.isSameLength(nullArray, nullArray)); [EOL]     assertTrue(ArrayUtils.isSameLength(nullArray, emptyArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(nullArray, oneArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(nullArray, twoArray)); [EOL]     assertTrue(ArrayUtils.isSameLength(emptyArray, nullArray)); [EOL]     assertTrue(ArrayUtils.isSameLength(emptyArray, emptyArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(emptyArray, oneArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(emptyArray, twoArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(oneArray, nullArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(oneArray, emptyArray)); [EOL]     assertTrue(ArrayUtils.isSameLength(oneArray, oneArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(oneArray, twoArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(twoArray, nullArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(twoArray, emptyArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(twoArray, oneArray)); [EOL]     assertTrue(ArrayUtils.isSameLength(twoArray, twoArray)); [EOL] }
@Test [EOL] public void testSameLengthByte() { [EOL]     final byte[] nullArray = null; [EOL]     final byte[] emptyArray = new byte[0]; [EOL]     final byte[] oneArray = new byte[] { 3 }; [EOL]     final byte[] twoArray = new byte[] { 4, 6 }; [EOL]     assertTrue(ArrayUtils.isSameLength(nullArray, nullArray)); [EOL]     assertTrue(ArrayUtils.isSameLength(nullArray, emptyArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(nullArray, oneArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(nullArray, twoArray)); [EOL]     assertTrue(ArrayUtils.isSameLength(emptyArray, nullArray)); [EOL]     assertTrue(ArrayUtils.isSameLength(emptyArray, emptyArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(emptyArray, oneArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(emptyArray, twoArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(oneArray, nullArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(oneArray, emptyArray)); [EOL]     assertTrue(ArrayUtils.isSameLength(oneArray, oneArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(oneArray, twoArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(twoArray, nullArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(twoArray, emptyArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(twoArray, oneArray)); [EOL]     assertTrue(ArrayUtils.isSameLength(twoArray, twoArray)); [EOL] }
@Test [EOL] public void testSameLengthByte() { [EOL]     final byte[] nullArray = null; [EOL]     final byte[] emptyArray = new byte[0]; [EOL]     final byte[] oneArray = new byte[] { 3 }; [EOL]     final byte[] twoArray = new byte[] { 4, 6 }; [EOL]     assertTrue(ArrayUtils.isSameLength(nullArray, nullArray)); [EOL]     assertTrue(ArrayUtils.isSameLength(nullArray, emptyArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(nullArray, oneArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(nullArray, twoArray)); [EOL]     assertTrue(ArrayUtils.isSameLength(emptyArray, nullArray)); [EOL]     assertTrue(ArrayUtils.isSameLength(emptyArray, emptyArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(emptyArray, oneArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(emptyArray, twoArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(oneArray, nullArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(oneArray, emptyArray)); [EOL]     assertTrue(ArrayUtils.isSameLength(oneArray, oneArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(oneArray, twoArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(twoArray, nullArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(twoArray, emptyArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(twoArray, oneArray)); [EOL]     assertTrue(ArrayUtils.isSameLength(twoArray, twoArray)); [EOL] }
@Test [EOL] public void testSameLengthDouble() { [EOL]     final double[] nullArray = null; [EOL]     final double[] emptyArray = new double[0]; [EOL]     final double[] oneArray = new double[] { 1.3d }; [EOL]     final double[] twoArray = new double[] { 4.5d, 6.3d }; [EOL]     assertTrue(ArrayUtils.isSameLength(nullArray, nullArray)); [EOL]     assertTrue(ArrayUtils.isSameLength(nullArray, emptyArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(nullArray, oneArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(nullArray, twoArray)); [EOL]     assertTrue(ArrayUtils.isSameLength(emptyArray, nullArray)); [EOL]     assertTrue(ArrayUtils.isSameLength(emptyArray, emptyArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(emptyArray, oneArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(emptyArray, twoArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(oneArray, nullArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(oneArray, emptyArray)); [EOL]     assertTrue(ArrayUtils.isSameLength(oneArray, oneArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(oneArray, twoArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(twoArray, nullArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(twoArray, emptyArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(twoArray, oneArray)); [EOL]     assertTrue(ArrayUtils.isSameLength(twoArray, twoArray)); [EOL] }
@Test [EOL] public void testSameLengthDouble() { [EOL]     final double[] nullArray = null; [EOL]     final double[] emptyArray = new double[0]; [EOL]     final double[] oneArray = new double[] { 1.3d }; [EOL]     final double[] twoArray = new double[] { 4.5d, 6.3d }; [EOL]     assertTrue(ArrayUtils.isSameLength(nullArray, nullArray)); [EOL]     assertTrue(ArrayUtils.isSameLength(nullArray, emptyArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(nullArray, oneArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(nullArray, twoArray)); [EOL]     assertTrue(ArrayUtils.isSameLength(emptyArray, nullArray)); [EOL]     assertTrue(ArrayUtils.isSameLength(emptyArray, emptyArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(emptyArray, oneArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(emptyArray, twoArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(oneArray, nullArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(oneArray, emptyArray)); [EOL]     assertTrue(ArrayUtils.isSameLength(oneArray, oneArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(oneArray, twoArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(twoArray, nullArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(twoArray, emptyArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(twoArray, oneArray)); [EOL]     assertTrue(ArrayUtils.isSameLength(twoArray, twoArray)); [EOL] }
@Test [EOL] public void testSameLengthDouble() { [EOL]     final double[] nullArray = null; [EOL]     final double[] emptyArray = new double[0]; [EOL]     final double[] oneArray = new double[] { 1.3d }; [EOL]     final double[] twoArray = new double[] { 4.5d, 6.3d }; [EOL]     assertTrue(ArrayUtils.isSameLength(nullArray, nullArray)); [EOL]     assertTrue(ArrayUtils.isSameLength(nullArray, emptyArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(nullArray, oneArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(nullArray, twoArray)); [EOL]     assertTrue(ArrayUtils.isSameLength(emptyArray, nullArray)); [EOL]     assertTrue(ArrayUtils.isSameLength(emptyArray, emptyArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(emptyArray, oneArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(emptyArray, twoArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(oneArray, nullArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(oneArray, emptyArray)); [EOL]     assertTrue(ArrayUtils.isSameLength(oneArray, oneArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(oneArray, twoArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(twoArray, nullArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(twoArray, emptyArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(twoArray, oneArray)); [EOL]     assertTrue(ArrayUtils.isSameLength(twoArray, twoArray)); [EOL] }
@Test [EOL] public void testSameLengthDouble() { [EOL]     final double[] nullArray = null; [EOL]     final double[] emptyArray = new double[0]; [EOL]     final double[] oneArray = new double[] { 1.3d }; [EOL]     final double[] twoArray = new double[] { 4.5d, 6.3d }; [EOL]     assertTrue(ArrayUtils.isSameLength(nullArray, nullArray)); [EOL]     assertTrue(ArrayUtils.isSameLength(nullArray, emptyArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(nullArray, oneArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(nullArray, twoArray)); [EOL]     assertTrue(ArrayUtils.isSameLength(emptyArray, nullArray)); [EOL]     assertTrue(ArrayUtils.isSameLength(emptyArray, emptyArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(emptyArray, oneArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(emptyArray, twoArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(oneArray, nullArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(oneArray, emptyArray)); [EOL]     assertTrue(ArrayUtils.isSameLength(oneArray, oneArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(oneArray, twoArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(twoArray, nullArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(twoArray, emptyArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(twoArray, oneArray)); [EOL]     assertTrue(ArrayUtils.isSameLength(twoArray, twoArray)); [EOL] }
@Test [EOL] public void testSameLengthDouble() { [EOL]     final double[] nullArray = null; [EOL]     final double[] emptyArray = new double[0]; [EOL]     final double[] oneArray = new double[] { 1.3d }; [EOL]     final double[] twoArray = new double[] { 4.5d, 6.3d }; [EOL]     assertTrue(ArrayUtils.isSameLength(nullArray, nullArray)); [EOL]     assertTrue(ArrayUtils.isSameLength(nullArray, emptyArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(nullArray, oneArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(nullArray, twoArray)); [EOL]     assertTrue(ArrayUtils.isSameLength(emptyArray, nullArray)); [EOL]     assertTrue(ArrayUtils.isSameLength(emptyArray, emptyArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(emptyArray, oneArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(emptyArray, twoArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(oneArray, nullArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(oneArray, emptyArray)); [EOL]     assertTrue(ArrayUtils.isSameLength(oneArray, oneArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(oneArray, twoArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(twoArray, nullArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(twoArray, emptyArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(twoArray, oneArray)); [EOL]     assertTrue(ArrayUtils.isSameLength(twoArray, twoArray)); [EOL] }
@Test [EOL] public void testSameLengthFloat() { [EOL]     final float[] nullArray = null; [EOL]     final float[] emptyArray = new float[0]; [EOL]     final float[] oneArray = new float[] { 2.5f }; [EOL]     final float[] twoArray = new float[] { 6.4f, 5.8f }; [EOL]     assertTrue(ArrayUtils.isSameLength(nullArray, nullArray)); [EOL]     assertTrue(ArrayUtils.isSameLength(nullArray, emptyArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(nullArray, oneArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(nullArray, twoArray)); [EOL]     assertTrue(ArrayUtils.isSameLength(emptyArray, nullArray)); [EOL]     assertTrue(ArrayUtils.isSameLength(emptyArray, emptyArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(emptyArray, oneArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(emptyArray, twoArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(oneArray, nullArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(oneArray, emptyArray)); [EOL]     assertTrue(ArrayUtils.isSameLength(oneArray, oneArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(oneArray, twoArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(twoArray, nullArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(twoArray, emptyArray)); [EOL]     assertFalse(ArrayUtils.isSameLength(twoArray, oneArray)); [EOL]     assertTrue(ArrayUtils.isSameLength(twoArray, twoArray)); [EOL] }
@Test [EOL] public void testReverseInt() { [EOL]     int[] array = new int[] { 1, 2, 3 }; [EOL]     ArrayUtils.reverse(array); [EOL]     assertEquals(array[0], 3); [EOL]     assertEquals(array[1], 2); [EOL]     assertEquals(array[2], 1); [EOL]     array = null; [EOL]     ArrayUtils.reverse(array); [EOL]     assertEquals(null, array); [EOL] }
@Test [EOL] public void testReverseInt() { [EOL]     int[] array = new int[] { 1, 2, 3 }; [EOL]     ArrayUtils.reverse(array); [EOL]     assertEquals(array[0], 3); [EOL]     assertEquals(array[1], 2); [EOL]     assertEquals(array[2], 1); [EOL]     array = null; [EOL]     ArrayUtils.reverse(array); [EOL]     assertEquals(null, array); [EOL] }
@Test [EOL] public void testReverseInt() { [EOL]     int[] array = new int[] { 1, 2, 3 }; [EOL]     ArrayUtils.reverse(array); [EOL]     assertEquals(array[0], 3); [EOL]     assertEquals(array[1], 2); [EOL]     assertEquals(array[2], 1); [EOL]     array = null; [EOL]     ArrayUtils.reverse(array); [EOL]     assertEquals(null, array); [EOL] }
@Test [EOL] public void testReverseInt() { [EOL]     int[] array = new int[] { 1, 2, 3 }; [EOL]     ArrayUtils.reverse(array); [EOL]     assertEquals(array[0], 3); [EOL]     assertEquals(array[1], 2); [EOL]     assertEquals(array[2], 1); [EOL]     array = null; [EOL]     ArrayUtils.reverse(array); [EOL]     assertEquals(null, array); [EOL] }
@Test [EOL] public void testIndexOf() { [EOL]     final Object[] array = new Object[] { "0", "1", "2", "3", null, "0" }; [EOL]     assertEquals(-1, ArrayUtils.indexOf(null, null)); [EOL]     assertEquals(-1, ArrayUtils.indexOf(null, "0")); [EOL]     assertEquals(-1, ArrayUtils.indexOf(new Object[0], "0")); [EOL]     assertEquals(0, ArrayUtils.indexOf(array, "0")); [EOL]     assertEquals(1, ArrayUtils.indexOf(array, "1")); [EOL]     assertEquals(2, ArrayUtils.indexOf(array, "2")); [EOL]     assertEquals(3, ArrayUtils.indexOf(array, "3")); [EOL]     assertEquals(4, ArrayUtils.indexOf(array, null)); [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, "notInArray")); [EOL] }
@Test [EOL] public void testIndexOf() { [EOL]     final Object[] array = new Object[] { "0", "1", "2", "3", null, "0" }; [EOL]     assertEquals(-1, ArrayUtils.indexOf(null, null)); [EOL]     assertEquals(-1, ArrayUtils.indexOf(null, "0")); [EOL]     assertEquals(-1, ArrayUtils.indexOf(new Object[0], "0")); [EOL]     assertEquals(0, ArrayUtils.indexOf(array, "0")); [EOL]     assertEquals(1, ArrayUtils.indexOf(array, "1")); [EOL]     assertEquals(2, ArrayUtils.indexOf(array, "2")); [EOL]     assertEquals(3, ArrayUtils.indexOf(array, "3")); [EOL]     assertEquals(4, ArrayUtils.indexOf(array, null)); [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, "notInArray")); [EOL] }
@Test [EOL] public void testIndexOf() { [EOL]     final Object[] array = new Object[] { "0", "1", "2", "3", null, "0" }; [EOL]     assertEquals(-1, ArrayUtils.indexOf(null, null)); [EOL]     assertEquals(-1, ArrayUtils.indexOf(null, "0")); [EOL]     assertEquals(-1, ArrayUtils.indexOf(new Object[0], "0")); [EOL]     assertEquals(0, ArrayUtils.indexOf(array, "0")); [EOL]     assertEquals(1, ArrayUtils.indexOf(array, "1")); [EOL]     assertEquals(2, ArrayUtils.indexOf(array, "2")); [EOL]     assertEquals(3, ArrayUtils.indexOf(array, "3")); [EOL]     assertEquals(4, ArrayUtils.indexOf(array, null)); [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, "notInArray")); [EOL] }
@Test [EOL] public void testIndexOf() { [EOL]     final Object[] array = new Object[] { "0", "1", "2", "3", null, "0" }; [EOL]     assertEquals(-1, ArrayUtils.indexOf(null, null)); [EOL]     assertEquals(-1, ArrayUtils.indexOf(null, "0")); [EOL]     assertEquals(-1, ArrayUtils.indexOf(new Object[0], "0")); [EOL]     assertEquals(0, ArrayUtils.indexOf(array, "0")); [EOL]     assertEquals(1, ArrayUtils.indexOf(array, "1")); [EOL]     assertEquals(2, ArrayUtils.indexOf(array, "2")); [EOL]     assertEquals(3, ArrayUtils.indexOf(array, "3")); [EOL]     assertEquals(4, ArrayUtils.indexOf(array, null)); [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, "notInArray")); [EOL] }
@Test [EOL] public void testIndexOf() { [EOL]     final Object[] array = new Object[] { "0", "1", "2", "3", null, "0" }; [EOL]     assertEquals(-1, ArrayUtils.indexOf(null, null)); [EOL]     assertEquals(-1, ArrayUtils.indexOf(null, "0")); [EOL]     assertEquals(-1, ArrayUtils.indexOf(new Object[0], "0")); [EOL]     assertEquals(0, ArrayUtils.indexOf(array, "0")); [EOL]     assertEquals(1, ArrayUtils.indexOf(array, "1")); [EOL]     assertEquals(2, ArrayUtils.indexOf(array, "2")); [EOL]     assertEquals(3, ArrayUtils.indexOf(array, "3")); [EOL]     assertEquals(4, ArrayUtils.indexOf(array, null)); [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, "notInArray")); [EOL] }
@Test [EOL] public void testIndexOf() { [EOL]     final Object[] array = new Object[] { "0", "1", "2", "3", null, "0" }; [EOL]     assertEquals(-1, ArrayUtils.indexOf(null, null)); [EOL]     assertEquals(-1, ArrayUtils.indexOf(null, "0")); [EOL]     assertEquals(-1, ArrayUtils.indexOf(new Object[0], "0")); [EOL]     assertEquals(0, ArrayUtils.indexOf(array, "0")); [EOL]     assertEquals(1, ArrayUtils.indexOf(array, "1")); [EOL]     assertEquals(2, ArrayUtils.indexOf(array, "2")); [EOL]     assertEquals(3, ArrayUtils.indexOf(array, "3")); [EOL]     assertEquals(4, ArrayUtils.indexOf(array, null)); [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, "notInArray")); [EOL] }
@Test [EOL] public void testIndexOf() { [EOL]     final Object[] array = new Object[] { "0", "1", "2", "3", null, "0" }; [EOL]     assertEquals(-1, ArrayUtils.indexOf(null, null)); [EOL]     assertEquals(-1, ArrayUtils.indexOf(null, "0")); [EOL]     assertEquals(-1, ArrayUtils.indexOf(new Object[0], "0")); [EOL]     assertEquals(0, ArrayUtils.indexOf(array, "0")); [EOL]     assertEquals(1, ArrayUtils.indexOf(array, "1")); [EOL]     assertEquals(2, ArrayUtils.indexOf(array, "2")); [EOL]     assertEquals(3, ArrayUtils.indexOf(array, "3")); [EOL]     assertEquals(4, ArrayUtils.indexOf(array, null)); [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, "notInArray")); [EOL] }
@Test [EOL] public void testIndexOf() { [EOL]     final Object[] array = new Object[] { "0", "1", "2", "3", null, "0" }; [EOL]     assertEquals(-1, ArrayUtils.indexOf(null, null)); [EOL]     assertEquals(-1, ArrayUtils.indexOf(null, "0")); [EOL]     assertEquals(-1, ArrayUtils.indexOf(new Object[0], "0")); [EOL]     assertEquals(0, ArrayUtils.indexOf(array, "0")); [EOL]     assertEquals(1, ArrayUtils.indexOf(array, "1")); [EOL]     assertEquals(2, ArrayUtils.indexOf(array, "2")); [EOL]     assertEquals(3, ArrayUtils.indexOf(array, "3")); [EOL]     assertEquals(4, ArrayUtils.indexOf(array, null)); [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, "notInArray")); [EOL] }
@Test [EOL] public void testIndexOf() { [EOL]     final Object[] array = new Object[] { "0", "1", "2", "3", null, "0" }; [EOL]     assertEquals(-1, ArrayUtils.indexOf(null, null)); [EOL]     assertEquals(-1, ArrayUtils.indexOf(null, "0")); [EOL]     assertEquals(-1, ArrayUtils.indexOf(new Object[0], "0")); [EOL]     assertEquals(0, ArrayUtils.indexOf(array, "0")); [EOL]     assertEquals(1, ArrayUtils.indexOf(array, "1")); [EOL]     assertEquals(2, ArrayUtils.indexOf(array, "2")); [EOL]     assertEquals(3, ArrayUtils.indexOf(array, "3")); [EOL]     assertEquals(4, ArrayUtils.indexOf(array, null)); [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, "notInArray")); [EOL] }
@Test [EOL] public void testIndexOf() { [EOL]     final Object[] array = new Object[] { "0", "1", "2", "3", null, "0" }; [EOL]     assertEquals(-1, ArrayUtils.indexOf(null, null)); [EOL]     assertEquals(-1, ArrayUtils.indexOf(null, "0")); [EOL]     assertEquals(-1, ArrayUtils.indexOf(new Object[0], "0")); [EOL]     assertEquals(0, ArrayUtils.indexOf(array, "0")); [EOL]     assertEquals(1, ArrayUtils.indexOf(array, "1")); [EOL]     assertEquals(2, ArrayUtils.indexOf(array, "2")); [EOL]     assertEquals(3, ArrayUtils.indexOf(array, "3")); [EOL]     assertEquals(4, ArrayUtils.indexOf(array, null)); [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, "notInArray")); [EOL] }
@Test [EOL] public void testIndexOf() { [EOL]     final Object[] array = new Object[] { "0", "1", "2", "3", null, "0" }; [EOL]     assertEquals(-1, ArrayUtils.indexOf(null, null)); [EOL]     assertEquals(-1, ArrayUtils.indexOf(null, "0")); [EOL]     assertEquals(-1, ArrayUtils.indexOf(new Object[0], "0")); [EOL]     assertEquals(0, ArrayUtils.indexOf(array, "0")); [EOL]     assertEquals(1, ArrayUtils.indexOf(array, "1")); [EOL]     assertEquals(2, ArrayUtils.indexOf(array, "2")); [EOL]     assertEquals(3, ArrayUtils.indexOf(array, "3")); [EOL]     assertEquals(4, ArrayUtils.indexOf(array, null)); [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, "notInArray")); [EOL] }
@Test [EOL] public void testLastIndexOfShortWithStartIndex() { [EOL]     short[] array = null; [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, (short) 0, 2)); [EOL]     array = new short[] { 0, 1, 2, 3, 0 }; [EOL]     assertEquals(0, ArrayUtils.lastIndexOf(array, (short) 0, 2)); [EOL]     assertEquals(1, ArrayUtils.lastIndexOf(array, (short) 1, 2)); [EOL]     assertEquals(2, ArrayUtils.lastIndexOf(array, (short) 2, 2)); [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, (short) 3, 2)); [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, (short) 3, -1)); [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, (short) 99)); [EOL]     assertEquals(4, ArrayUtils.lastIndexOf(array, (short) 0, 88)); [EOL] }
@Test [EOL] public void testLastIndexOfShortWithStartIndex() { [EOL]     short[] array = null; [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, (short) 0, 2)); [EOL]     array = new short[] { 0, 1, 2, 3, 0 }; [EOL]     assertEquals(0, ArrayUtils.lastIndexOf(array, (short) 0, 2)); [EOL]     assertEquals(1, ArrayUtils.lastIndexOf(array, (short) 1, 2)); [EOL]     assertEquals(2, ArrayUtils.lastIndexOf(array, (short) 2, 2)); [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, (short) 3, 2)); [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, (short) 3, -1)); [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, (short) 99)); [EOL]     assertEquals(4, ArrayUtils.lastIndexOf(array, (short) 0, 88)); [EOL] }
@Test [EOL] public void testLastIndexOfShortWithStartIndex() { [EOL]     short[] array = null; [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, (short) 0, 2)); [EOL]     array = new short[] { 0, 1, 2, 3, 0 }; [EOL]     assertEquals(0, ArrayUtils.lastIndexOf(array, (short) 0, 2)); [EOL]     assertEquals(1, ArrayUtils.lastIndexOf(array, (short) 1, 2)); [EOL]     assertEquals(2, ArrayUtils.lastIndexOf(array, (short) 2, 2)); [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, (short) 3, 2)); [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, (short) 3, -1)); [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, (short) 99)); [EOL]     assertEquals(4, ArrayUtils.lastIndexOf(array, (short) 0, 88)); [EOL] }
@Test [EOL] public void testLastIndexOfShortWithStartIndex() { [EOL]     short[] array = null; [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, (short) 0, 2)); [EOL]     array = new short[] { 0, 1, 2, 3, 0 }; [EOL]     assertEquals(0, ArrayUtils.lastIndexOf(array, (short) 0, 2)); [EOL]     assertEquals(1, ArrayUtils.lastIndexOf(array, (short) 1, 2)); [EOL]     assertEquals(2, ArrayUtils.lastIndexOf(array, (short) 2, 2)); [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, (short) 3, 2)); [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, (short) 3, -1)); [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, (short) 99)); [EOL]     assertEquals(4, ArrayUtils.lastIndexOf(array, (short) 0, 88)); [EOL] }
@Test [EOL] public void testLastIndexOfShortWithStartIndex() { [EOL]     short[] array = null; [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, (short) 0, 2)); [EOL]     array = new short[] { 0, 1, 2, 3, 0 }; [EOL]     assertEquals(0, ArrayUtils.lastIndexOf(array, (short) 0, 2)); [EOL]     assertEquals(1, ArrayUtils.lastIndexOf(array, (short) 1, 2)); [EOL]     assertEquals(2, ArrayUtils.lastIndexOf(array, (short) 2, 2)); [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, (short) 3, 2)); [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, (short) 3, -1)); [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, (short) 99)); [EOL]     assertEquals(4, ArrayUtils.lastIndexOf(array, (short) 0, 88)); [EOL] }
@Test [EOL] public void testLastIndexOfShortWithStartIndex() { [EOL]     short[] array = null; [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, (short) 0, 2)); [EOL]     array = new short[] { 0, 1, 2, 3, 0 }; [EOL]     assertEquals(0, ArrayUtils.lastIndexOf(array, (short) 0, 2)); [EOL]     assertEquals(1, ArrayUtils.lastIndexOf(array, (short) 1, 2)); [EOL]     assertEquals(2, ArrayUtils.lastIndexOf(array, (short) 2, 2)); [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, (short) 3, 2)); [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, (short) 3, -1)); [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, (short) 99)); [EOL]     assertEquals(4, ArrayUtils.lastIndexOf(array, (short) 0, 88)); [EOL] }
@Test [EOL] public void testLastIndexOfShortWithStartIndex() { [EOL]     short[] array = null; [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, (short) 0, 2)); [EOL]     array = new short[] { 0, 1, 2, 3, 0 }; [EOL]     assertEquals(0, ArrayUtils.lastIndexOf(array, (short) 0, 2)); [EOL]     assertEquals(1, ArrayUtils.lastIndexOf(array, (short) 1, 2)); [EOL]     assertEquals(2, ArrayUtils.lastIndexOf(array, (short) 2, 2)); [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, (short) 3, 2)); [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, (short) 3, -1)); [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, (short) 99)); [EOL]     assertEquals(4, ArrayUtils.lastIndexOf(array, (short) 0, 88)); [EOL] }
@Test [EOL] public void testLastIndexOfShortWithStartIndex() { [EOL]     short[] array = null; [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, (short) 0, 2)); [EOL]     array = new short[] { 0, 1, 2, 3, 0 }; [EOL]     assertEquals(0, ArrayUtils.lastIndexOf(array, (short) 0, 2)); [EOL]     assertEquals(1, ArrayUtils.lastIndexOf(array, (short) 1, 2)); [EOL]     assertEquals(2, ArrayUtils.lastIndexOf(array, (short) 2, 2)); [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, (short) 3, 2)); [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, (short) 3, -1)); [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, (short) 99)); [EOL]     assertEquals(4, ArrayUtils.lastIndexOf(array, (short) 0, 88)); [EOL] }
@Test [EOL] public void testLastIndexOfShortWithStartIndex() { [EOL]     short[] array = null; [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, (short) 0, 2)); [EOL]     array = new short[] { 0, 1, 2, 3, 0 }; [EOL]     assertEquals(0, ArrayUtils.lastIndexOf(array, (short) 0, 2)); [EOL]     assertEquals(1, ArrayUtils.lastIndexOf(array, (short) 1, 2)); [EOL]     assertEquals(2, ArrayUtils.lastIndexOf(array, (short) 2, 2)); [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, (short) 3, 2)); [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, (short) 3, -1)); [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, (short) 99)); [EOL]     assertEquals(4, ArrayUtils.lastIndexOf(array, (short) 0, 88)); [EOL] }
@Test [EOL] public void testContainsShort() { [EOL]     short[] array = null; [EOL]     assertFalse(ArrayUtils.contains(array, (short) 1)); [EOL]     array = new short[] { 0, 1, 2, 3, 0 }; [EOL]     assertTrue(ArrayUtils.contains(array, (short) 0)); [EOL]     assertTrue(ArrayUtils.contains(array, (short) 1)); [EOL]     assertTrue(ArrayUtils.contains(array, (short) 2)); [EOL]     assertTrue(ArrayUtils.contains(array, (short) 3)); [EOL]     assertFalse(ArrayUtils.contains(array, (short) 99)); [EOL] }
@Test [EOL] public void testContainsShort() { [EOL]     short[] array = null; [EOL]     assertFalse(ArrayUtils.contains(array, (short) 1)); [EOL]     array = new short[] { 0, 1, 2, 3, 0 }; [EOL]     assertTrue(ArrayUtils.contains(array, (short) 0)); [EOL]     assertTrue(ArrayUtils.contains(array, (short) 1)); [EOL]     assertTrue(ArrayUtils.contains(array, (short) 2)); [EOL]     assertTrue(ArrayUtils.contains(array, (short) 3)); [EOL]     assertFalse(ArrayUtils.contains(array, (short) 99)); [EOL] }
@Test [EOL] public void testContainsShort() { [EOL]     short[] array = null; [EOL]     assertFalse(ArrayUtils.contains(array, (short) 1)); [EOL]     array = new short[] { 0, 1, 2, 3, 0 }; [EOL]     assertTrue(ArrayUtils.contains(array, (short) 0)); [EOL]     assertTrue(ArrayUtils.contains(array, (short) 1)); [EOL]     assertTrue(ArrayUtils.contains(array, (short) 2)); [EOL]     assertTrue(ArrayUtils.contains(array, (short) 3)); [EOL]     assertFalse(ArrayUtils.contains(array, (short) 99)); [EOL] }
@Test [EOL] public void testContainsShort() { [EOL]     short[] array = null; [EOL]     assertFalse(ArrayUtils.contains(array, (short) 1)); [EOL]     array = new short[] { 0, 1, 2, 3, 0 }; [EOL]     assertTrue(ArrayUtils.contains(array, (short) 0)); [EOL]     assertTrue(ArrayUtils.contains(array, (short) 1)); [EOL]     assertTrue(ArrayUtils.contains(array, (short) 2)); [EOL]     assertTrue(ArrayUtils.contains(array, (short) 3)); [EOL]     assertFalse(ArrayUtils.contains(array, (short) 99)); [EOL] }
@Test [EOL] public void testContainsChar() { [EOL]     char[] array = null; [EOL]     assertFalse(ArrayUtils.contains(array, 'b')); [EOL]     array = new char[] { 'a', 'b', 'c', 'd', 'a' }; [EOL]     assertTrue(ArrayUtils.contains(array, 'a')); [EOL]     assertTrue(ArrayUtils.contains(array, 'b')); [EOL]     assertTrue(ArrayUtils.contains(array, 'c')); [EOL]     assertTrue(ArrayUtils.contains(array, 'd')); [EOL]     assertFalse(ArrayUtils.contains(array, 'e')); [EOL] }
@Test [EOL] public void testContainsChar() { [EOL]     char[] array = null; [EOL]     assertFalse(ArrayUtils.contains(array, 'b')); [EOL]     array = new char[] { 'a', 'b', 'c', 'd', 'a' }; [EOL]     assertTrue(ArrayUtils.contains(array, 'a')); [EOL]     assertTrue(ArrayUtils.contains(array, 'b')); [EOL]     assertTrue(ArrayUtils.contains(array, 'c')); [EOL]     assertTrue(ArrayUtils.contains(array, 'd')); [EOL]     assertFalse(ArrayUtils.contains(array, 'e')); [EOL] }
@Test [EOL] public void testContainsChar() { [EOL]     char[] array = null; [EOL]     assertFalse(ArrayUtils.contains(array, 'b')); [EOL]     array = new char[] { 'a', 'b', 'c', 'd', 'a' }; [EOL]     assertTrue(ArrayUtils.contains(array, 'a')); [EOL]     assertTrue(ArrayUtils.contains(array, 'b')); [EOL]     assertTrue(ArrayUtils.contains(array, 'c')); [EOL]     assertTrue(ArrayUtils.contains(array, 'd')); [EOL]     assertFalse(ArrayUtils.contains(array, 'e')); [EOL] }
@Test [EOL] public void testContainsChar() { [EOL]     char[] array = null; [EOL]     assertFalse(ArrayUtils.contains(array, 'b')); [EOL]     array = new char[] { 'a', 'b', 'c', 'd', 'a' }; [EOL]     assertTrue(ArrayUtils.contains(array, 'a')); [EOL]     assertTrue(ArrayUtils.contains(array, 'b')); [EOL]     assertTrue(ArrayUtils.contains(array, 'c')); [EOL]     assertTrue(ArrayUtils.contains(array, 'd')); [EOL]     assertFalse(ArrayUtils.contains(array, 'e')); [EOL] }
@Test [EOL] public void testIndexOfByteWithStartIndex() { [EOL]     byte[] array = null; [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, (byte) 0, 2)); [EOL]     array = new byte[] { 0, 1, 2, 3, 0 }; [EOL]     assertEquals(4, ArrayUtils.indexOf(array, (byte) 0, 2)); [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, (byte) 1, 2)); [EOL]     assertEquals(2, ArrayUtils.indexOf(array, (byte) 2, 2)); [EOL]     assertEquals(3, ArrayUtils.indexOf(array, (byte) 3, 2)); [EOL]     assertEquals(3, ArrayUtils.indexOf(array, (byte) 3, -1)); [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, (byte) 99, 0)); [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, (byte) 0, 6)); [EOL] }
@Test [EOL] public void testIndexOfByteWithStartIndex() { [EOL]     byte[] array = null; [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, (byte) 0, 2)); [EOL]     array = new byte[] { 0, 1, 2, 3, 0 }; [EOL]     assertEquals(4, ArrayUtils.indexOf(array, (byte) 0, 2)); [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, (byte) 1, 2)); [EOL]     assertEquals(2, ArrayUtils.indexOf(array, (byte) 2, 2)); [EOL]     assertEquals(3, ArrayUtils.indexOf(array, (byte) 3, 2)); [EOL]     assertEquals(3, ArrayUtils.indexOf(array, (byte) 3, -1)); [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, (byte) 99, 0)); [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, (byte) 0, 6)); [EOL] }
@Test [EOL] public void testIndexOfByteWithStartIndex() { [EOL]     byte[] array = null; [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, (byte) 0, 2)); [EOL]     array = new byte[] { 0, 1, 2, 3, 0 }; [EOL]     assertEquals(4, ArrayUtils.indexOf(array, (byte) 0, 2)); [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, (byte) 1, 2)); [EOL]     assertEquals(2, ArrayUtils.indexOf(array, (byte) 2, 2)); [EOL]     assertEquals(3, ArrayUtils.indexOf(array, (byte) 3, 2)); [EOL]     assertEquals(3, ArrayUtils.indexOf(array, (byte) 3, -1)); [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, (byte) 99, 0)); [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, (byte) 0, 6)); [EOL] }
@Test [EOL] public void testIndexOfByteWithStartIndex() { [EOL]     byte[] array = null; [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, (byte) 0, 2)); [EOL]     array = new byte[] { 0, 1, 2, 3, 0 }; [EOL]     assertEquals(4, ArrayUtils.indexOf(array, (byte) 0, 2)); [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, (byte) 1, 2)); [EOL]     assertEquals(2, ArrayUtils.indexOf(array, (byte) 2, 2)); [EOL]     assertEquals(3, ArrayUtils.indexOf(array, (byte) 3, 2)); [EOL]     assertEquals(3, ArrayUtils.indexOf(array, (byte) 3, -1)); [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, (byte) 99, 0)); [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, (byte) 0, 6)); [EOL] }
@Test [EOL] public void testIndexOfByteWithStartIndex() { [EOL]     byte[] array = null; [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, (byte) 0, 2)); [EOL]     array = new byte[] { 0, 1, 2, 3, 0 }; [EOL]     assertEquals(4, ArrayUtils.indexOf(array, (byte) 0, 2)); [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, (byte) 1, 2)); [EOL]     assertEquals(2, ArrayUtils.indexOf(array, (byte) 2, 2)); [EOL]     assertEquals(3, ArrayUtils.indexOf(array, (byte) 3, 2)); [EOL]     assertEquals(3, ArrayUtils.indexOf(array, (byte) 3, -1)); [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, (byte) 99, 0)); [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, (byte) 0, 6)); [EOL] }
@SuppressWarnings("cast") [EOL] @Test [EOL] public void testIndexOfDoubleTolerance() { [EOL]     double[] array = null; [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, (double) 0, (double) 0)); [EOL]     array = new double[0]; [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, (double) 0, (double) 0)); [EOL]     array = new double[] { 0, 1, 2, 3, 0 }; [EOL]     assertEquals(0, ArrayUtils.indexOf(array, (double) 0, (double) 0.3)); [EOL]     assertEquals(2, ArrayUtils.indexOf(array, (double) 2.2, (double) 0.35)); [EOL]     assertEquals(3, ArrayUtils.indexOf(array, (double) 4.15, (double) 2.0)); [EOL]     assertEquals(1, ArrayUtils.indexOf(array, (double) 1.00001324, (double) 0.0001)); [EOL] }
@SuppressWarnings("cast") [EOL] @Test [EOL] public void testIndexOfDoubleTolerance() { [EOL]     double[] array = null; [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, (double) 0, (double) 0)); [EOL]     array = new double[0]; [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, (double) 0, (double) 0)); [EOL]     array = new double[] { 0, 1, 2, 3, 0 }; [EOL]     assertEquals(0, ArrayUtils.indexOf(array, (double) 0, (double) 0.3)); [EOL]     assertEquals(2, ArrayUtils.indexOf(array, (double) 2.2, (double) 0.35)); [EOL]     assertEquals(3, ArrayUtils.indexOf(array, (double) 4.15, (double) 2.0)); [EOL]     assertEquals(1, ArrayUtils.indexOf(array, (double) 1.00001324, (double) 0.0001)); [EOL] }
@SuppressWarnings("cast") [EOL] @Test [EOL] public void testIndexOfDoubleTolerance() { [EOL]     double[] array = null; [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, (double) 0, (double) 0)); [EOL]     array = new double[0]; [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, (double) 0, (double) 0)); [EOL]     array = new double[] { 0, 1, 2, 3, 0 }; [EOL]     assertEquals(0, ArrayUtils.indexOf(array, (double) 0, (double) 0.3)); [EOL]     assertEquals(2, ArrayUtils.indexOf(array, (double) 2.2, (double) 0.35)); [EOL]     assertEquals(3, ArrayUtils.indexOf(array, (double) 4.15, (double) 2.0)); [EOL]     assertEquals(1, ArrayUtils.indexOf(array, (double) 1.00001324, (double) 0.0001)); [EOL] }
@SuppressWarnings("cast") [EOL] @Test [EOL] public void testIndexOfDoubleTolerance() { [EOL]     double[] array = null; [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, (double) 0, (double) 0)); [EOL]     array = new double[0]; [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, (double) 0, (double) 0)); [EOL]     array = new double[] { 0, 1, 2, 3, 0 }; [EOL]     assertEquals(0, ArrayUtils.indexOf(array, (double) 0, (double) 0.3)); [EOL]     assertEquals(2, ArrayUtils.indexOf(array, (double) 2.2, (double) 0.35)); [EOL]     assertEquals(3, ArrayUtils.indexOf(array, (double) 4.15, (double) 2.0)); [EOL]     assertEquals(1, ArrayUtils.indexOf(array, (double) 1.00001324, (double) 0.0001)); [EOL] }
@SuppressWarnings("cast") [EOL] @Test [EOL] public void testIndexOfDoubleTolerance() { [EOL]     double[] array = null; [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, (double) 0, (double) 0)); [EOL]     array = new double[0]; [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, (double) 0, (double) 0)); [EOL]     array = new double[] { 0, 1, 2, 3, 0 }; [EOL]     assertEquals(0, ArrayUtils.indexOf(array, (double) 0, (double) 0.3)); [EOL]     assertEquals(2, ArrayUtils.indexOf(array, (double) 2.2, (double) 0.35)); [EOL]     assertEquals(3, ArrayUtils.indexOf(array, (double) 4.15, (double) 2.0)); [EOL]     assertEquals(1, ArrayUtils.indexOf(array, (double) 1.00001324, (double) 0.0001)); [EOL] }
@SuppressWarnings("cast") [EOL] @Test [EOL] public void testIndexOfDoubleTolerance() { [EOL]     double[] array = null; [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, (double) 0, (double) 0)); [EOL]     array = new double[0]; [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, (double) 0, (double) 0)); [EOL]     array = new double[] { 0, 1, 2, 3, 0 }; [EOL]     assertEquals(0, ArrayUtils.indexOf(array, (double) 0, (double) 0.3)); [EOL]     assertEquals(2, ArrayUtils.indexOf(array, (double) 2.2, (double) 0.35)); [EOL]     assertEquals(3, ArrayUtils.indexOf(array, (double) 4.15, (double) 2.0)); [EOL]     assertEquals(1, ArrayUtils.indexOf(array, (double) 1.00001324, (double) 0.0001)); [EOL] }
@SuppressWarnings("cast") [EOL] @Test [EOL] public void testIndexOfDoubleWithStartIndexTolerance() { [EOL]     double[] array = null; [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, (double) 0, 2, (double) 0)); [EOL]     array = new double[0]; [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, (double) 0, 2, (double) 0)); [EOL]     array = new double[] { 0, 1, 2, 3, 0 }; [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, (double) 0, 99, (double) 0.3)); [EOL]     assertEquals(0, ArrayUtils.indexOf(array, (double) 0, 0, (double) 0.3)); [EOL]     assertEquals(4, ArrayUtils.indexOf(array, (double) 0, 3, (double) 0.3)); [EOL]     assertEquals(2, ArrayUtils.indexOf(array, (double) 2.2, 0, (double) 0.35)); [EOL]     assertEquals(3, ArrayUtils.indexOf(array, (double) 4.15, 0, (double) 2.0)); [EOL]     assertEquals(1, ArrayUtils.indexOf(array, (double) 1.00001324, 0, (double) 0.0001)); [EOL]     assertEquals(3, ArrayUtils.indexOf(array, (double) 4.15, -1, (double) 2.0)); [EOL]     assertEquals(1, ArrayUtils.indexOf(array, (double) 1.00001324, -300, (double) 0.0001)); [EOL] }
@SuppressWarnings("cast") [EOL] @Test [EOL] public void testIndexOfDoubleWithStartIndexTolerance() { [EOL]     double[] array = null; [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, (double) 0, 2, (double) 0)); [EOL]     array = new double[0]; [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, (double) 0, 2, (double) 0)); [EOL]     array = new double[] { 0, 1, 2, 3, 0 }; [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, (double) 0, 99, (double) 0.3)); [EOL]     assertEquals(0, ArrayUtils.indexOf(array, (double) 0, 0, (double) 0.3)); [EOL]     assertEquals(4, ArrayUtils.indexOf(array, (double) 0, 3, (double) 0.3)); [EOL]     assertEquals(2, ArrayUtils.indexOf(array, (double) 2.2, 0, (double) 0.35)); [EOL]     assertEquals(3, ArrayUtils.indexOf(array, (double) 4.15, 0, (double) 2.0)); [EOL]     assertEquals(1, ArrayUtils.indexOf(array, (double) 1.00001324, 0, (double) 0.0001)); [EOL]     assertEquals(3, ArrayUtils.indexOf(array, (double) 4.15, -1, (double) 2.0)); [EOL]     assertEquals(1, ArrayUtils.indexOf(array, (double) 1.00001324, -300, (double) 0.0001)); [EOL] }
@SuppressWarnings("cast") [EOL] @Test [EOL] public void testIndexOfDoubleWithStartIndexTolerance() { [EOL]     double[] array = null; [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, (double) 0, 2, (double) 0)); [EOL]     array = new double[0]; [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, (double) 0, 2, (double) 0)); [EOL]     array = new double[] { 0, 1, 2, 3, 0 }; [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, (double) 0, 99, (double) 0.3)); [EOL]     assertEquals(0, ArrayUtils.indexOf(array, (double) 0, 0, (double) 0.3)); [EOL]     assertEquals(4, ArrayUtils.indexOf(array, (double) 0, 3, (double) 0.3)); [EOL]     assertEquals(2, ArrayUtils.indexOf(array, (double) 2.2, 0, (double) 0.35)); [EOL]     assertEquals(3, ArrayUtils.indexOf(array, (double) 4.15, 0, (double) 2.0)); [EOL]     assertEquals(1, ArrayUtils.indexOf(array, (double) 1.00001324, 0, (double) 0.0001)); [EOL]     assertEquals(3, ArrayUtils.indexOf(array, (double) 4.15, -1, (double) 2.0)); [EOL]     assertEquals(1, ArrayUtils.indexOf(array, (double) 1.00001324, -300, (double) 0.0001)); [EOL] }
@SuppressWarnings("cast") [EOL] @Test [EOL] public void testIndexOfDoubleWithStartIndexTolerance() { [EOL]     double[] array = null; [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, (double) 0, 2, (double) 0)); [EOL]     array = new double[0]; [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, (double) 0, 2, (double) 0)); [EOL]     array = new double[] { 0, 1, 2, 3, 0 }; [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, (double) 0, 99, (double) 0.3)); [EOL]     assertEquals(0, ArrayUtils.indexOf(array, (double) 0, 0, (double) 0.3)); [EOL]     assertEquals(4, ArrayUtils.indexOf(array, (double) 0, 3, (double) 0.3)); [EOL]     assertEquals(2, ArrayUtils.indexOf(array, (double) 2.2, 0, (double) 0.35)); [EOL]     assertEquals(3, ArrayUtils.indexOf(array, (double) 4.15, 0, (double) 2.0)); [EOL]     assertEquals(1, ArrayUtils.indexOf(array, (double) 1.00001324, 0, (double) 0.0001)); [EOL]     assertEquals(3, ArrayUtils.indexOf(array, (double) 4.15, -1, (double) 2.0)); [EOL]     assertEquals(1, ArrayUtils.indexOf(array, (double) 1.00001324, -300, (double) 0.0001)); [EOL] }
@SuppressWarnings("cast") [EOL] @Test [EOL] public void testIndexOfDoubleWithStartIndexTolerance() { [EOL]     double[] array = null; [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, (double) 0, 2, (double) 0)); [EOL]     array = new double[0]; [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, (double) 0, 2, (double) 0)); [EOL]     array = new double[] { 0, 1, 2, 3, 0 }; [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, (double) 0, 99, (double) 0.3)); [EOL]     assertEquals(0, ArrayUtils.indexOf(array, (double) 0, 0, (double) 0.3)); [EOL]     assertEquals(4, ArrayUtils.indexOf(array, (double) 0, 3, (double) 0.3)); [EOL]     assertEquals(2, ArrayUtils.indexOf(array, (double) 2.2, 0, (double) 0.35)); [EOL]     assertEquals(3, ArrayUtils.indexOf(array, (double) 4.15, 0, (double) 2.0)); [EOL]     assertEquals(1, ArrayUtils.indexOf(array, (double) 1.00001324, 0, (double) 0.0001)); [EOL]     assertEquals(3, ArrayUtils.indexOf(array, (double) 4.15, -1, (double) 2.0)); [EOL]     assertEquals(1, ArrayUtils.indexOf(array, (double) 1.00001324, -300, (double) 0.0001)); [EOL] }
@SuppressWarnings("cast") [EOL] @Test [EOL] public void testIndexOfDoubleWithStartIndexTolerance() { [EOL]     double[] array = null; [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, (double) 0, 2, (double) 0)); [EOL]     array = new double[0]; [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, (double) 0, 2, (double) 0)); [EOL]     array = new double[] { 0, 1, 2, 3, 0 }; [EOL]     assertEquals(-1, ArrayUtils.indexOf(array, (double) 0, 99, (double) 0.3)); [EOL]     assertEquals(0, ArrayUtils.indexOf(array, (double) 0, 0, (double) 0.3)); [EOL]     assertEquals(4, ArrayUtils.indexOf(array, (double) 0, 3, (double) 0.3)); [EOL]     assertEquals(2, ArrayUtils.indexOf(array, (double) 2.2, 0, (double) 0.35)); [EOL]     assertEquals(3, ArrayUtils.indexOf(array, (double) 4.15, 0, (double) 2.0)); [EOL]     assertEquals(1, ArrayUtils.indexOf(array, (double) 1.00001324, 0, (double) 0.0001)); [EOL]     assertEquals(3, ArrayUtils.indexOf(array, (double) 4.15, -1, (double) 2.0)); [EOL]     assertEquals(1, ArrayUtils.indexOf(array, (double) 1.00001324, -300, (double) 0.0001)); [EOL] }
@Test [EOL] public void testLastIndexOfBoolean() { [EOL]     boolean[] array = null; [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, true)); [EOL]     array = new boolean[0]; [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, true)); [EOL]     array = new boolean[] { true, false, true }; [EOL]     assertEquals(2, ArrayUtils.lastIndexOf(array, true)); [EOL]     assertEquals(1, ArrayUtils.lastIndexOf(array, false)); [EOL]     array = new boolean[] { true, true }; [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, false)); [EOL] }
@Test [EOL] public void testLastIndexOfBoolean() { [EOL]     boolean[] array = null; [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, true)); [EOL]     array = new boolean[0]; [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, true)); [EOL]     array = new boolean[] { true, false, true }; [EOL]     assertEquals(2, ArrayUtils.lastIndexOf(array, true)); [EOL]     assertEquals(1, ArrayUtils.lastIndexOf(array, false)); [EOL]     array = new boolean[] { true, true }; [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, false)); [EOL] }
@Test [EOL] public void testLastIndexOfBoolean() { [EOL]     boolean[] array = null; [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, true)); [EOL]     array = new boolean[0]; [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, true)); [EOL]     array = new boolean[] { true, false, true }; [EOL]     assertEquals(2, ArrayUtils.lastIndexOf(array, true)); [EOL]     assertEquals(1, ArrayUtils.lastIndexOf(array, false)); [EOL]     array = new boolean[] { true, true }; [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, false)); [EOL] }
@Test [EOL] public void testLastIndexOfBoolean() { [EOL]     boolean[] array = null; [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, true)); [EOL]     array = new boolean[0]; [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, true)); [EOL]     array = new boolean[] { true, false, true }; [EOL]     assertEquals(2, ArrayUtils.lastIndexOf(array, true)); [EOL]     assertEquals(1, ArrayUtils.lastIndexOf(array, false)); [EOL]     array = new boolean[] { true, true }; [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, false)); [EOL] }
@Test [EOL] public void testLastIndexOfBoolean() { [EOL]     boolean[] array = null; [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, true)); [EOL]     array = new boolean[0]; [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, true)); [EOL]     array = new boolean[] { true, false, true }; [EOL]     assertEquals(2, ArrayUtils.lastIndexOf(array, true)); [EOL]     assertEquals(1, ArrayUtils.lastIndexOf(array, false)); [EOL]     array = new boolean[] { true, true }; [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, false)); [EOL] }
@Test [EOL] public void testLastIndexOfBoolean() { [EOL]     boolean[] array = null; [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, true)); [EOL]     array = new boolean[0]; [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, true)); [EOL]     array = new boolean[] { true, false, true }; [EOL]     assertEquals(2, ArrayUtils.lastIndexOf(array, true)); [EOL]     assertEquals(1, ArrayUtils.lastIndexOf(array, false)); [EOL]     array = new boolean[] { true, true }; [EOL]     assertEquals(-1, ArrayUtils.lastIndexOf(array, false)); [EOL] }
@Test [EOL] public void testToPrimitive_char() { [EOL]     final Character[] b = null; [EOL]     assertEquals(null, ArrayUtils.toPrimitive(b)); [EOL]     assertSame(ArrayUtils.EMPTY_CHAR_ARRAY, ArrayUtils.toPrimitive(new Character[0])); [EOL]     assertTrue(Arrays.equals(new char[] { Character.MIN_VALUE, Character.MAX_VALUE, '0' }, ArrayUtils.toPrimitive(new Character[] { new Character(Character.MIN_VALUE), new Character(Character.MAX_VALUE), new Character('0') }))); [EOL]     try { [EOL]         ArrayUtils.toPrimitive(new Character[] { new Character(Character.MIN_VALUE), null }); [EOL]         fail(); [EOL]     } catch (final NullPointerException ex) { [EOL]     } [EOL] }
@Test [EOL] public void testToPrimitive_char() { [EOL]     final Character[] b = null; [EOL]     assertEquals(null, ArrayUtils.toPrimitive(b)); [EOL]     assertSame(ArrayUtils.EMPTY_CHAR_ARRAY, ArrayUtils.toPrimitive(new Character[0])); [EOL]     assertTrue(Arrays.equals(new char[] { Character.MIN_VALUE, Character.MAX_VALUE, '0' }, ArrayUtils.toPrimitive(new Character[] { new Character(Character.MIN_VALUE), new Character(Character.MAX_VALUE), new Character('0') }))); [EOL]     try { [EOL]         ArrayUtils.toPrimitive(new Character[] { new Character(Character.MIN_VALUE), null }); [EOL]         fail(); [EOL]     } catch (final NullPointerException ex) { [EOL]     } [EOL] }
@Test [EOL] public void testToPrimitive_char() { [EOL]     final Character[] b = null; [EOL]     assertEquals(null, ArrayUtils.toPrimitive(b)); [EOL]     assertSame(ArrayUtils.EMPTY_CHAR_ARRAY, ArrayUtils.toPrimitive(new Character[0])); [EOL]     assertTrue(Arrays.equals(new char[] { Character.MIN_VALUE, Character.MAX_VALUE, '0' }, ArrayUtils.toPrimitive(new Character[] { new Character(Character.MIN_VALUE), new Character(Character.MAX_VALUE), new Character('0') }))); [EOL]     try { [EOL]         ArrayUtils.toPrimitive(new Character[] { new Character(Character.MIN_VALUE), null }); [EOL]         fail(); [EOL]     } catch (final NullPointerException ex) { [EOL]     } [EOL] }
@Test [EOL] public void testToObject_char() { [EOL]     final char[] b = null; [EOL]     assertArrayEquals(null, ArrayUtils.toObject(b)); [EOL]     assertSame(ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY, ArrayUtils.toObject(new char[0])); [EOL]     assertTrue(Arrays.equals(new Character[] { new Character(Character.MIN_VALUE), new Character(Character.MAX_VALUE), new Character('0') }, ArrayUtils.toObject(new char[] { Character.MIN_VALUE, Character.MAX_VALUE, '0' }))); [EOL] }
@Test [EOL] public void testToObject_char() { [EOL]     final char[] b = null; [EOL]     assertArrayEquals(null, ArrayUtils.toObject(b)); [EOL]     assertSame(ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY, ArrayUtils.toObject(new char[0])); [EOL]     assertTrue(Arrays.equals(new Character[] { new Character(Character.MIN_VALUE), new Character(Character.MAX_VALUE), new Character('0') }, ArrayUtils.toObject(new char[] { Character.MIN_VALUE, Character.MAX_VALUE, '0' }))); [EOL] }
@Test [EOL] public void testToObject_char() { [EOL]     final char[] b = null; [EOL]     assertArrayEquals(null, ArrayUtils.toObject(b)); [EOL]     assertSame(ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY, ArrayUtils.toObject(new char[0])); [EOL]     assertTrue(Arrays.equals(new Character[] { new Character(Character.MIN_VALUE), new Character(Character.MAX_VALUE), new Character('0') }, ArrayUtils.toObject(new char[] { Character.MIN_VALUE, Character.MAX_VALUE, '0' }))); [EOL] }
@Test [EOL] public void testToPrimitive_byte() { [EOL]     final Byte[] b = null; [EOL]     assertEquals(null, ArrayUtils.toPrimitive(b)); [EOL]     assertSame(ArrayUtils.EMPTY_BYTE_ARRAY, ArrayUtils.toPrimitive(new Byte[0])); [EOL]     assertTrue(Arrays.equals(new byte[] { Byte.MIN_VALUE, Byte.MAX_VALUE, (byte) 9999999 }, ArrayUtils.toPrimitive(new Byte[] { Byte.valueOf(Byte.MIN_VALUE), Byte.valueOf(Byte.MAX_VALUE), Byte.valueOf((byte) 9999999) }))); [EOL]     try { [EOL]         ArrayUtils.toPrimitive(new Byte[] { Byte.valueOf(Byte.MIN_VALUE), null }); [EOL]         fail(); [EOL]     } catch (final NullPointerException ex) { [EOL]     } [EOL] }
@Test [EOL] public void testToPrimitive_byte() { [EOL]     final Byte[] b = null; [EOL]     assertEquals(null, ArrayUtils.toPrimitive(b)); [EOL]     assertSame(ArrayUtils.EMPTY_BYTE_ARRAY, ArrayUtils.toPrimitive(new Byte[0])); [EOL]     assertTrue(Arrays.equals(new byte[] { Byte.MIN_VALUE, Byte.MAX_VALUE, (byte) 9999999 }, ArrayUtils.toPrimitive(new Byte[] { Byte.valueOf(Byte.MIN_VALUE), Byte.valueOf(Byte.MAX_VALUE), Byte.valueOf((byte) 9999999) }))); [EOL]     try { [EOL]         ArrayUtils.toPrimitive(new Byte[] { Byte.valueOf(Byte.MIN_VALUE), null }); [EOL]         fail(); [EOL]     } catch (final NullPointerException ex) { [EOL]     } [EOL] }
@Test [EOL] public void testToPrimitive_byte() { [EOL]     final Byte[] b = null; [EOL]     assertEquals(null, ArrayUtils.toPrimitive(b)); [EOL]     assertSame(ArrayUtils.EMPTY_BYTE_ARRAY, ArrayUtils.toPrimitive(new Byte[0])); [EOL]     assertTrue(Arrays.equals(new byte[] { Byte.MIN_VALUE, Byte.MAX_VALUE, (byte) 9999999 }, ArrayUtils.toPrimitive(new Byte[] { Byte.valueOf(Byte.MIN_VALUE), Byte.valueOf(Byte.MAX_VALUE), Byte.valueOf((byte) 9999999) }))); [EOL]     try { [EOL]         ArrayUtils.toPrimitive(new Byte[] { Byte.valueOf(Byte.MIN_VALUE), null }); [EOL]         fail(); [EOL]     } catch (final NullPointerException ex) { [EOL]     } [EOL] }
@Test [EOL] public void testToPrimitive_double_double() { [EOL]     final Double[] l = null; [EOL]     assertEquals(null, ArrayUtils.toPrimitive(l, Double.MIN_VALUE)); [EOL]     assertSame(ArrayUtils.EMPTY_DOUBLE_ARRAY, ArrayUtils.toPrimitive(new Double[0], 1)); [EOL]     assertTrue(Arrays.equals(new double[] { Double.MIN_VALUE, Double.MAX_VALUE, 9999999 }, ArrayUtils.toPrimitive(new Double[] { Double.valueOf(Double.MIN_VALUE), Double.valueOf(Double.MAX_VALUE), Double.valueOf(9999999) }, 1))); [EOL]     assertTrue(Arrays.equals(new double[] { Double.MIN_VALUE, Double.MAX_VALUE, 9999999 }, ArrayUtils.toPrimitive(new Double[] { Double.valueOf(Double.MIN_VALUE), null, Double.valueOf(9999999) }, Double.MAX_VALUE))); [EOL] }
@Test [EOL] public void testToPrimitive_double_double() { [EOL]     final Double[] l = null; [EOL]     assertEquals(null, ArrayUtils.toPrimitive(l, Double.MIN_VALUE)); [EOL]     assertSame(ArrayUtils.EMPTY_DOUBLE_ARRAY, ArrayUtils.toPrimitive(new Double[0], 1)); [EOL]     assertTrue(Arrays.equals(new double[] { Double.MIN_VALUE, Double.MAX_VALUE, 9999999 }, ArrayUtils.toPrimitive(new Double[] { Double.valueOf(Double.MIN_VALUE), Double.valueOf(Double.MAX_VALUE), Double.valueOf(9999999) }, 1))); [EOL]     assertTrue(Arrays.equals(new double[] { Double.MIN_VALUE, Double.MAX_VALUE, 9999999 }, ArrayUtils.toPrimitive(new Double[] { Double.valueOf(Double.MIN_VALUE), null, Double.valueOf(9999999) }, Double.MAX_VALUE))); [EOL] }
@Test [EOL] public void testToPrimitive_double_double() { [EOL]     final Double[] l = null; [EOL]     assertEquals(null, ArrayUtils.toPrimitive(l, Double.MIN_VALUE)); [EOL]     assertSame(ArrayUtils.EMPTY_DOUBLE_ARRAY, ArrayUtils.toPrimitive(new Double[0], 1)); [EOL]     assertTrue(Arrays.equals(new double[] { Double.MIN_VALUE, Double.MAX_VALUE, 9999999 }, ArrayUtils.toPrimitive(new Double[] { Double.valueOf(Double.MIN_VALUE), Double.valueOf(Double.MAX_VALUE), Double.valueOf(9999999) }, 1))); [EOL]     assertTrue(Arrays.equals(new double[] { Double.MIN_VALUE, Double.MAX_VALUE, 9999999 }, ArrayUtils.toPrimitive(new Double[] { Double.valueOf(Double.MIN_VALUE), null, Double.valueOf(9999999) }, Double.MAX_VALUE))); [EOL] }
@Test [EOL] public void testToPrimitive_double_double() { [EOL]     final Double[] l = null; [EOL]     assertEquals(null, ArrayUtils.toPrimitive(l, Double.MIN_VALUE)); [EOL]     assertSame(ArrayUtils.EMPTY_DOUBLE_ARRAY, ArrayUtils.toPrimitive(new Double[0], 1)); [EOL]     assertTrue(Arrays.equals(new double[] { Double.MIN_VALUE, Double.MAX_VALUE, 9999999 }, ArrayUtils.toPrimitive(new Double[] { Double.valueOf(Double.MIN_VALUE), Double.valueOf(Double.MAX_VALUE), Double.valueOf(9999999) }, 1))); [EOL]     assertTrue(Arrays.equals(new double[] { Double.MIN_VALUE, Double.MAX_VALUE, 9999999 }, ArrayUtils.toPrimitive(new Double[] { Double.valueOf(Double.MIN_VALUE), null, Double.valueOf(9999999) }, Double.MAX_VALUE))); [EOL] }
@Test [EOL] public void testToObject_double() { [EOL]     final double[] b = null; [EOL]     assertArrayEquals(null, ArrayUtils.toObject(b)); [EOL]     assertSame(ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY, ArrayUtils.toObject(new double[0])); [EOL]     assertTrue(Arrays.equals(new Double[] { Double.valueOf(Double.MIN_VALUE), Double.valueOf(Double.MAX_VALUE), Double.valueOf(9999999) }, ArrayUtils.toObject(new double[] { Double.MIN_VALUE, Double.MAX_VALUE, 9999999 }))); [EOL] }
@Test [EOL] public void testToObject_double() { [EOL]     final double[] b = null; [EOL]     assertArrayEquals(null, ArrayUtils.toObject(b)); [EOL]     assertSame(ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY, ArrayUtils.toObject(new double[0])); [EOL]     assertTrue(Arrays.equals(new Double[] { Double.valueOf(Double.MIN_VALUE), Double.valueOf(Double.MAX_VALUE), Double.valueOf(9999999) }, ArrayUtils.toObject(new double[] { Double.MIN_VALUE, Double.MAX_VALUE, 9999999 }))); [EOL] }
@Test [EOL] public void testToObject_double() { [EOL]     final double[] b = null; [EOL]     assertArrayEquals(null, ArrayUtils.toObject(b)); [EOL]     assertSame(ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY, ArrayUtils.toObject(new double[0])); [EOL]     assertTrue(Arrays.equals(new Double[] { Double.valueOf(Double.MIN_VALUE), Double.valueOf(Double.MAX_VALUE), Double.valueOf(9999999) }, ArrayUtils.toObject(new double[] { Double.MIN_VALUE, Double.MAX_VALUE, 9999999 }))); [EOL] }
@Test [EOL] public void testToObject_float() { [EOL]     final float[] b = null; [EOL]     assertArrayEquals(null, ArrayUtils.toObject(b)); [EOL]     assertSame(ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY, ArrayUtils.toObject(new float[0])); [EOL]     assertTrue(Arrays.equals(new Float[] { Float.valueOf(Float.MIN_VALUE), Float.valueOf(Float.MAX_VALUE), Float.valueOf(9999999) }, ArrayUtils.toObject(new float[] { Float.MIN_VALUE, Float.MAX_VALUE, 9999999 }))); [EOL] }
@Test [EOL] public void testToObject_float() { [EOL]     final float[] b = null; [EOL]     assertArrayEquals(null, ArrayUtils.toObject(b)); [EOL]     assertSame(ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY, ArrayUtils.toObject(new float[0])); [EOL]     assertTrue(Arrays.equals(new Float[] { Float.valueOf(Float.MIN_VALUE), Float.valueOf(Float.MAX_VALUE), Float.valueOf(9999999) }, ArrayUtils.toObject(new float[] { Float.MIN_VALUE, Float.MAX_VALUE, 9999999 }))); [EOL] }
@Test [EOL] public void testToObject_float() { [EOL]     final float[] b = null; [EOL]     assertArrayEquals(null, ArrayUtils.toObject(b)); [EOL]     assertSame(ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY, ArrayUtils.toObject(new float[0])); [EOL]     assertTrue(Arrays.equals(new Float[] { Float.valueOf(Float.MIN_VALUE), Float.valueOf(Float.MAX_VALUE), Float.valueOf(9999999) }, ArrayUtils.toObject(new float[] { Float.MIN_VALUE, Float.MAX_VALUE, 9999999 }))); [EOL] }
@Test [EOL] public void testToPrimitive_boolean_boolean() { [EOL]     assertEquals(null, ArrayUtils.toPrimitive(null, false)); [EOL]     assertSame(ArrayUtils.EMPTY_BOOLEAN_ARRAY, ArrayUtils.toPrimitive(new Boolean[0], false)); [EOL]     assertTrue(Arrays.equals(new boolean[] { true, false, true }, ArrayUtils.toPrimitive(new Boolean[] { Boolean.TRUE, Boolean.FALSE, Boolean.TRUE }, false))); [EOL]     assertTrue(Arrays.equals(new boolean[] { true, false, false }, ArrayUtils.toPrimitive(new Boolean[] { Boolean.TRUE, null, Boolean.FALSE }, false))); [EOL]     assertTrue(Arrays.equals(new boolean[] { true, true, false }, ArrayUtils.toPrimitive(new Boolean[] { Boolean.TRUE, null, Boolean.FALSE }, true))); [EOL] }
@Test [EOL] public void testToPrimitive_boolean_boolean() { [EOL]     assertEquals(null, ArrayUtils.toPrimitive(null, false)); [EOL]     assertSame(ArrayUtils.EMPTY_BOOLEAN_ARRAY, ArrayUtils.toPrimitive(new Boolean[0], false)); [EOL]     assertTrue(Arrays.equals(new boolean[] { true, false, true }, ArrayUtils.toPrimitive(new Boolean[] { Boolean.TRUE, Boolean.FALSE, Boolean.TRUE }, false))); [EOL]     assertTrue(Arrays.equals(new boolean[] { true, false, false }, ArrayUtils.toPrimitive(new Boolean[] { Boolean.TRUE, null, Boolean.FALSE }, false))); [EOL]     assertTrue(Arrays.equals(new boolean[] { true, true, false }, ArrayUtils.toPrimitive(new Boolean[] { Boolean.TRUE, null, Boolean.FALSE }, true))); [EOL] }
@Test [EOL] public void testToPrimitive_boolean_boolean() { [EOL]     assertEquals(null, ArrayUtils.toPrimitive(null, false)); [EOL]     assertSame(ArrayUtils.EMPTY_BOOLEAN_ARRAY, ArrayUtils.toPrimitive(new Boolean[0], false)); [EOL]     assertTrue(Arrays.equals(new boolean[] { true, false, true }, ArrayUtils.toPrimitive(new Boolean[] { Boolean.TRUE, Boolean.FALSE, Boolean.TRUE }, false))); [EOL]     assertTrue(Arrays.equals(new boolean[] { true, false, false }, ArrayUtils.toPrimitive(new Boolean[] { Boolean.TRUE, null, Boolean.FALSE }, false))); [EOL]     assertTrue(Arrays.equals(new boolean[] { true, true, false }, ArrayUtils.toPrimitive(new Boolean[] { Boolean.TRUE, null, Boolean.FALSE }, true))); [EOL] }
@Test [EOL] public void testToPrimitive_boolean_boolean() { [EOL]     assertEquals(null, ArrayUtils.toPrimitive(null, false)); [EOL]     assertSame(ArrayUtils.EMPTY_BOOLEAN_ARRAY, ArrayUtils.toPrimitive(new Boolean[0], false)); [EOL]     assertTrue(Arrays.equals(new boolean[] { true, false, true }, ArrayUtils.toPrimitive(new Boolean[] { Boolean.TRUE, Boolean.FALSE, Boolean.TRUE }, false))); [EOL]     assertTrue(Arrays.equals(new boolean[] { true, false, false }, ArrayUtils.toPrimitive(new Boolean[] { Boolean.TRUE, null, Boolean.FALSE }, false))); [EOL]     assertTrue(Arrays.equals(new boolean[] { true, true, false }, ArrayUtils.toPrimitive(new Boolean[] { Boolean.TRUE, null, Boolean.FALSE }, true))); [EOL] }
@Test [EOL] public void testIsNotEmptyPrimitives() { [EOL]     final long[] emptyLongArray = new long[] {}; [EOL]     final long[] notEmptyLongArray = new long[] { 1L }; [EOL]     assertFalse(ArrayUtils.isNotEmpty((long[]) null)); [EOL]     assertFalse(ArrayUtils.isNotEmpty(emptyLongArray)); [EOL]     assertTrue(ArrayUtils.isNotEmpty(notEmptyLongArray)); [EOL]     final int[] emptyIntArray = new int[] {}; [EOL]     final int[] notEmptyIntArray = new int[] { 1 }; [EOL]     assertFalse(ArrayUtils.isNotEmpty((int[]) null)); [EOL]     assertFalse(ArrayUtils.isNotEmpty(emptyIntArray)); [EOL]     assertTrue(ArrayUtils.isNotEmpty(notEmptyIntArray)); [EOL]     final short[] emptyShortArray = new short[] {}; [EOL]     final short[] notEmptyShortArray = new short[] { 1 }; [EOL]     assertFalse(ArrayUtils.isNotEmpty((short[]) null)); [EOL]     assertFalse(ArrayUtils.isNotEmpty(emptyShortArray)); [EOL]     assertTrue(ArrayUtils.isNotEmpty(notEmptyShortArray)); [EOL]     final char[] emptyCharArray = new char[] {}; [EOL]     final char[] notEmptyCharArray = new char[] { 1 }; [EOL]     assertFalse(ArrayUtils.isNotEmpty((char[]) null)); [EOL]     assertFalse(ArrayUtils.isNotEmpty(emptyCharArray)); [EOL]     assertTrue(ArrayUtils.isNotEmpty(notEmptyCharArray)); [EOL]     final byte[] emptyByteArray = new byte[] {}; [EOL]     final byte[] notEmptyByteArray = new byte[] { 1 }; [EOL]     assertFalse(ArrayUtils.isNotEmpty((byte[]) null)); [EOL]     assertFalse(ArrayUtils.isNotEmpty(emptyByteArray)); [EOL]     assertTrue(ArrayUtils.isNotEmpty(notEmptyByteArray)); [EOL]     final double[] emptyDoubleArray = new double[] {}; [EOL]     final double[] notEmptyDoubleArray = new double[] { 1.0 }; [EOL]     assertFalse(ArrayUtils.isNotEmpty((double[]) null)); [EOL]     assertFalse(ArrayUtils.isNotEmpty(emptyDoubleArray)); [EOL]     assertTrue(ArrayUtils.isNotEmpty(notEmptyDoubleArray)); [EOL]     final float[] emptyFloatArray = new float[] {}; [EOL]     final float[] notEmptyFloatArray = new float[] { 1.0F }; [EOL]     assertFalse(ArrayUtils.isNotEmpty((float[]) null)); [EOL]     assertFalse(ArrayUtils.isNotEmpty(emptyFloatArray)); [EOL]     assertTrue(ArrayUtils.isNotEmpty(notEmptyFloatArray)); [EOL]     final boolean[] emptyBooleanArray = new boolean[] {}; [EOL]     final boolean[] notEmptyBooleanArray = new boolean[] { true }; [EOL]     assertFalse(ArrayUtils.isNotEmpty((boolean[]) null)); [EOL]     assertFalse(ArrayUtils.isNotEmpty(emptyBooleanArray)); [EOL]     assertTrue(ArrayUtils.isNotEmpty(notEmptyBooleanArray)); [EOL] }
@Test [EOL] public void testIsNotEmptyPrimitives() { [EOL]     final long[] emptyLongArray = new long[] {}; [EOL]     final long[] notEmptyLongArray = new long[] { 1L }; [EOL]     assertFalse(ArrayUtils.isNotEmpty((long[]) null)); [EOL]     assertFalse(ArrayUtils.isNotEmpty(emptyLongArray)); [EOL]     assertTrue(ArrayUtils.isNotEmpty(notEmptyLongArray)); [EOL]     final int[] emptyIntArray = new int[] {}; [EOL]     final int[] notEmptyIntArray = new int[] { 1 }; [EOL]     assertFalse(ArrayUtils.isNotEmpty((int[]) null)); [EOL]     assertFalse(ArrayUtils.isNotEmpty(emptyIntArray)); [EOL]     assertTrue(ArrayUtils.isNotEmpty(notEmptyIntArray)); [EOL]     final short[] emptyShortArray = new short[] {}; [EOL]     final short[] notEmptyShortArray = new short[] { 1 }; [EOL]     assertFalse(ArrayUtils.isNotEmpty((short[]) null)); [EOL]     assertFalse(ArrayUtils.isNotEmpty(emptyShortArray)); [EOL]     assertTrue(ArrayUtils.isNotEmpty(notEmptyShortArray)); [EOL]     final char[] emptyCharArray = new char[] {}; [EOL]     final char[] notEmptyCharArray = new char[] { 1 }; [EOL]     assertFalse(ArrayUtils.isNotEmpty((char[]) null)); [EOL]     assertFalse(ArrayUtils.isNotEmpty(emptyCharArray)); [EOL]     assertTrue(ArrayUtils.isNotEmpty(notEmptyCharArray)); [EOL]     final byte[] emptyByteArray = new byte[] {}; [EOL]     final byte[] notEmptyByteArray = new byte[] { 1 }; [EOL]     assertFalse(ArrayUtils.isNotEmpty((byte[]) null)); [EOL]     assertFalse(ArrayUtils.isNotEmpty(emptyByteArray)); [EOL]     assertTrue(ArrayUtils.isNotEmpty(notEmptyByteArray)); [EOL]     final double[] emptyDoubleArray = new double[] {}; [EOL]     final double[] notEmptyDoubleArray = new double[] { 1.0 }; [EOL]     assertFalse(ArrayUtils.isNotEmpty((double[]) null)); [EOL]     assertFalse(ArrayUtils.isNotEmpty(emptyDoubleArray)); [EOL]     assertTrue(ArrayUtils.isNotEmpty(notEmptyDoubleArray)); [EOL]     final float[] emptyFloatArray = new float[] {}; [EOL]     final float[] notEmptyFloatArray = new float[] { 1.0F }; [EOL]     assertFalse(ArrayUtils.isNotEmpty((float[]) null)); [EOL]     assertFalse(ArrayUtils.isNotEmpty(emptyFloatArray)); [EOL]     assertTrue(ArrayUtils.isNotEmpty(notEmptyFloatArray)); [EOL]     final boolean[] emptyBooleanArray = new boolean[] {}; [EOL]     final boolean[] notEmptyBooleanArray = new boolean[] { true }; [EOL]     assertFalse(ArrayUtils.isNotEmpty((boolean[]) null)); [EOL]     assertFalse(ArrayUtils.isNotEmpty(emptyBooleanArray)); [EOL]     assertTrue(ArrayUtils.isNotEmpty(notEmptyBooleanArray)); [EOL] }
@Test [EOL] public void testIsNotEmptyPrimitives() { [EOL]     final long[] emptyLongArray = new long[] {}; [EOL]     final long[] notEmptyLongArray = new long[] { 1L }; [EOL]     assertFalse(ArrayUtils.isNotEmpty((long[]) null)); [EOL]     assertFalse(ArrayUtils.isNotEmpty(emptyLongArray)); [EOL]     assertTrue(ArrayUtils.isNotEmpty(notEmptyLongArray)); [EOL]     final int[] emptyIntArray = new int[] {}; [EOL]     final int[] notEmptyIntArray = new int[] { 1 }; [EOL]     assertFalse(ArrayUtils.isNotEmpty((int[]) null)); [EOL]     assertFalse(ArrayUtils.isNotEmpty(emptyIntArray)); [EOL]     assertTrue(ArrayUtils.isNotEmpty(notEmptyIntArray)); [EOL]     final short[] emptyShortArray = new short[] {}; [EOL]     final short[] notEmptyShortArray = new short[] { 1 }; [EOL]     assertFalse(ArrayUtils.isNotEmpty((short[]) null)); [EOL]     assertFalse(ArrayUtils.isNotEmpty(emptyShortArray)); [EOL]     assertTrue(ArrayUtils.isNotEmpty(notEmptyShortArray)); [EOL]     final char[] emptyCharArray = new char[] {}; [EOL]     final char[] notEmptyCharArray = new char[] { 1 }; [EOL]     assertFalse(ArrayUtils.isNotEmpty((char[]) null)); [EOL]     assertFalse(ArrayUtils.isNotEmpty(emptyCharArray)); [EOL]     assertTrue(ArrayUtils.isNotEmpty(notEmptyCharArray)); [EOL]     final byte[] emptyByteArray = new byte[] {}; [EOL]     final byte[] notEmptyByteArray = new byte[] { 1 }; [EOL]     assertFalse(ArrayUtils.isNotEmpty((byte[]) null)); [EOL]     assertFalse(ArrayUtils.isNotEmpty(emptyByteArray)); [EOL]     assertTrue(ArrayUtils.isNotEmpty(notEmptyByteArray)); [EOL]     final double[] emptyDoubleArray = new double[] {}; [EOL]     final double[] notEmptyDoubleArray = new double[] { 1.0 }; [EOL]     assertFalse(ArrayUtils.isNotEmpty((double[]) null)); [EOL]     assertFalse(ArrayUtils.isNotEmpty(emptyDoubleArray)); [EOL]     assertTrue(ArrayUtils.isNotEmpty(notEmptyDoubleArray)); [EOL]     final float[] emptyFloatArray = new float[] {}; [EOL]     final float[] notEmptyFloatArray = new float[] { 1.0F }; [EOL]     assertFalse(ArrayUtils.isNotEmpty((float[]) null)); [EOL]     assertFalse(ArrayUtils.isNotEmpty(emptyFloatArray)); [EOL]     assertTrue(ArrayUtils.isNotEmpty(notEmptyFloatArray)); [EOL]     final boolean[] emptyBooleanArray = new boolean[] {}; [EOL]     final boolean[] notEmptyBooleanArray = new boolean[] { true }; [EOL]     assertFalse(ArrayUtils.isNotEmpty((boolean[]) null)); [EOL]     assertFalse(ArrayUtils.isNotEmpty(emptyBooleanArray)); [EOL]     assertTrue(ArrayUtils.isNotEmpty(notEmptyBooleanArray)); [EOL] }
@Test [EOL] public void testIsNotEmptyPrimitives() { [EOL]     final long[] emptyLongArray = new long[] {}; [EOL]     final long[] notEmptyLongArray = new long[] { 1L }; [EOL]     assertFalse(ArrayUtils.isNotEmpty((long[]) null)); [EOL]     assertFalse(ArrayUtils.isNotEmpty(emptyLongArray)); [EOL]     assertTrue(ArrayUtils.isNotEmpty(notEmptyLongArray)); [EOL]     final int[] emptyIntArray = new int[] {}; [EOL]     final int[] notEmptyIntArray = new int[] { 1 }; [EOL]     assertFalse(ArrayUtils.isNotEmpty((int[]) null)); [EOL]     assertFalse(ArrayUtils.isNotEmpty(emptyIntArray)); [EOL]     assertTrue(ArrayUtils.isNotEmpty(notEmptyIntArray)); [EOL]     final short[] emptyShortArray = new short[] {}; [EOL]     final short[] notEmptyShortArray = new short[] { 1 }; [EOL]     assertFalse(ArrayUtils.isNotEmpty((short[]) null)); [EOL]     assertFalse(ArrayUtils.isNotEmpty(emptyShortArray)); [EOL]     assertTrue(ArrayUtils.isNotEmpty(notEmptyShortArray)); [EOL]     final char[] emptyCharArray = new char[] {}; [EOL]     final char[] notEmptyCharArray = new char[] { 1 }; [EOL]     assertFalse(ArrayUtils.isNotEmpty((char[]) null)); [EOL]     assertFalse(ArrayUtils.isNotEmpty(emptyCharArray)); [EOL]     assertTrue(ArrayUtils.isNotEmpty(notEmptyCharArray)); [EOL]     final byte[] emptyByteArray = new byte[] {}; [EOL]     final byte[] notEmptyByteArray = new byte[] { 1 }; [EOL]     assertFalse(ArrayUtils.isNotEmpty((byte[]) null)); [EOL]     assertFalse(ArrayUtils.isNotEmpty(emptyByteArray)); [EOL]     assertTrue(ArrayUtils.isNotEmpty(notEmptyByteArray)); [EOL]     final double[] emptyDoubleArray = new double[] {}; [EOL]     final double[] notEmptyDoubleArray = new double[] { 1.0 }; [EOL]     assertFalse(ArrayUtils.isNotEmpty((double[]) null)); [EOL]     assertFalse(ArrayUtils.isNotEmpty(emptyDoubleArray)); [EOL]     assertTrue(ArrayUtils.isNotEmpty(notEmptyDoubleArray)); [EOL]     final float[] emptyFloatArray = new float[] {}; [EOL]     final float[] notEmptyFloatArray = new float[] { 1.0F }; [EOL]     assertFalse(ArrayUtils.isNotEmpty((float[]) null)); [EOL]     assertFalse(ArrayUtils.isNotEmpty(emptyFloatArray)); [EOL]     assertTrue(ArrayUtils.isNotEmpty(notEmptyFloatArray)); [EOL]     final boolean[] emptyBooleanArray = new boolean[] {}; [EOL]     final boolean[] notEmptyBooleanArray = new boolean[] { true }; [EOL]     assertFalse(ArrayUtils.isNotEmpty((boolean[]) null)); [EOL]     assertFalse(ArrayUtils.isNotEmpty(emptyBooleanArray)); [EOL]     assertTrue(ArrayUtils.isNotEmpty(notEmptyBooleanArray)); [EOL] }
@Test [EOL] public void testIsNotEmptyPrimitives() { [EOL]     final long[] emptyLongArray = new long[] {}; [EOL]     final long[] notEmptyLongArray = new long[] { 1L }; [EOL]     assertFalse(ArrayUtils.isNotEmpty((long[]) null)); [EOL]     assertFalse(ArrayUtils.isNotEmpty(emptyLongArray)); [EOL]     assertTrue(ArrayUtils.isNotEmpty(notEmptyLongArray)); [EOL]     final int[] emptyIntArray = new int[] {}; [EOL]     final int[] notEmptyIntArray = new int[] { 1 }; [EOL]     assertFalse(ArrayUtils.isNotEmpty((int[]) null)); [EOL]     assertFalse(ArrayUtils.isNotEmpty(emptyIntArray)); [EOL]     assertTrue(ArrayUtils.isNotEmpty(notEmptyIntArray)); [EOL]     final short[] emptyShortArray = new short[] {}; [EOL]     final short[] notEmptyShortArray = new short[] { 1 }; [EOL]     assertFalse(ArrayUtils.isNotEmpty((short[]) null)); [EOL]     assertFalse(ArrayUtils.isNotEmpty(emptyShortArray)); [EOL]     assertTrue(ArrayUtils.isNotEmpty(notEmptyShortArray)); [EOL]     final char[] emptyCharArray = new char[] {}; [EOL]     final char[] notEmptyCharArray = new char[] { 1 }; [EOL]     assertFalse(ArrayUtils.isNotEmpty((char[]) null)); [EOL]     assertFalse(ArrayUtils.isNotEmpty(emptyCharArray)); [EOL]     assertTrue(ArrayUtils.isNotEmpty(notEmptyCharArray)); [EOL]     final byte[] emptyByteArray = new byte[] {}; [EOL]     final byte[] notEmptyByteArray = new byte[] { 1 }; [EOL]     assertFalse(ArrayUtils.isNotEmpty((byte[]) null)); [EOL]     assertFalse(ArrayUtils.isNotEmpty(emptyByteArray)); [EOL]     assertTrue(ArrayUtils.isNotEmpty(notEmptyByteArray)); [EOL]     final double[] emptyDoubleArray = new double[] {}; [EOL]     final double[] notEmptyDoubleArray = new double[] { 1.0 }; [EOL]     assertFalse(ArrayUtils.isNotEmpty((double[]) null)); [EOL]     assertFalse(ArrayUtils.isNotEmpty(emptyDoubleArray)); [EOL]     assertTrue(ArrayUtils.isNotEmpty(notEmptyDoubleArray)); [EOL]     final float[] emptyFloatArray = new float[] {}; [EOL]     final float[] notEmptyFloatArray = new float[] { 1.0F }; [EOL]     assertFalse(ArrayUtils.isNotEmpty((float[]) null)); [EOL]     assertFalse(ArrayUtils.isNotEmpty(emptyFloatArray)); [EOL]     assertTrue(ArrayUtils.isNotEmpty(notEmptyFloatArray)); [EOL]     final boolean[] emptyBooleanArray = new boolean[] {}; [EOL]     final boolean[] notEmptyBooleanArray = new boolean[] { true }; [EOL]     assertFalse(ArrayUtils.isNotEmpty((boolean[]) null)); [EOL]     assertFalse(ArrayUtils.isNotEmpty(emptyBooleanArray)); [EOL]     assertTrue(ArrayUtils.isNotEmpty(notEmptyBooleanArray)); [EOL] }
@Test [EOL] public void testIsNotEmptyPrimitives() { [EOL]     final long[] emptyLongArray = new long[] {}; [EOL]     final long[] notEmptyLongArray = new long[] { 1L }; [EOL]     assertFalse(ArrayUtils.isNotEmpty((long[]) null)); [EOL]     assertFalse(ArrayUtils.isNotEmpty(emptyLongArray)); [EOL]     assertTrue(ArrayUtils.isNotEmpty(notEmptyLongArray)); [EOL]     final int[] emptyIntArray = new int[] {}; [EOL]     final int[] notEmptyIntArray = new int[] { 1 }; [EOL]     assertFalse(ArrayUtils.isNotEmpty((int[]) null)); [EOL]     assertFalse(ArrayUtils.isNotEmpty(emptyIntArray)); [EOL]     assertTrue(ArrayUtils.isNotEmpty(notEmptyIntArray)); [EOL]     final short[] emptyShortArray = new short[] {}; [EOL]     final short[] notEmptyShortArray = new short[] { 1 }; [EOL]     assertFalse(ArrayUtils.isNotEmpty((short[]) null)); [EOL]     assertFalse(ArrayUtils.isNotEmpty(emptyShortArray)); [EOL]     assertTrue(ArrayUtils.isNotEmpty(notEmptyShortArray)); [EOL]     final char[] emptyCharArray = new char[] {}; [EOL]     final char[] notEmptyCharArray = new char[] { 1 }; [EOL]     assertFalse(ArrayUtils.isNotEmpty((char[]) null)); [EOL]     assertFalse(ArrayUtils.isNotEmpty(emptyCharArray)); [EOL]     assertTrue(ArrayUtils.isNotEmpty(notEmptyCharArray)); [EOL]     final byte[] emptyByteArray = new byte[] {}; [EOL]     final byte[] notEmptyByteArray = new byte[] { 1 }; [EOL]     assertFalse(ArrayUtils.isNotEmpty((byte[]) null)); [EOL]     assertFalse(ArrayUtils.isNotEmpty(emptyByteArray)); [EOL]     assertTrue(ArrayUtils.isNotEmpty(notEmptyByteArray)); [EOL]     final double[] emptyDoubleArray = new double[] {}; [EOL]     final double[] notEmptyDoubleArray = new double[] { 1.0 }; [EOL]     assertFalse(ArrayUtils.isNotEmpty((double[]) null)); [EOL]     assertFalse(ArrayUtils.isNotEmpty(emptyDoubleArray)); [EOL]     assertTrue(ArrayUtils.isNotEmpty(notEmptyDoubleArray)); [EOL]     final float[] emptyFloatArray = new float[] {}; [EOL]     final float[] notEmptyFloatArray = new float[] { 1.0F }; [EOL]     assertFalse(ArrayUtils.isNotEmpty((float[]) null)); [EOL]     assertFalse(ArrayUtils.isNotEmpty(emptyFloatArray)); [EOL]     assertTrue(ArrayUtils.isNotEmpty(notEmptyFloatArray)); [EOL]     final boolean[] emptyBooleanArray = new boolean[] {}; [EOL]     final boolean[] notEmptyBooleanArray = new boolean[] { true }; [EOL]     assertFalse(ArrayUtils.isNotEmpty((boolean[]) null)); [EOL]     assertFalse(ArrayUtils.isNotEmpty(emptyBooleanArray)); [EOL]     assertTrue(ArrayUtils.isNotEmpty(notEmptyBooleanArray)); [EOL] }
@Test [EOL] public void testIsNotEmptyPrimitives() { [EOL]     final long[] emptyLongArray = new long[] {}; [EOL]     final long[] notEmptyLongArray = new long[] { 1L }; [EOL]     assertFalse(ArrayUtils.isNotEmpty((long[]) null)); [EOL]     assertFalse(ArrayUtils.isNotEmpty(emptyLongArray)); [EOL]     assertTrue(ArrayUtils.isNotEmpty(notEmptyLongArray)); [EOL]     final int[] emptyIntArray = new int[] {}; [EOL]     final int[] notEmptyIntArray = new int[] { 1 }; [EOL]     assertFalse(ArrayUtils.isNotEmpty((int[]) null)); [EOL]     assertFalse(ArrayUtils.isNotEmpty(emptyIntArray)); [EOL]     assertTrue(ArrayUtils.isNotEmpty(notEmptyIntArray)); [EOL]     final short[] emptyShortArray = new short[] {}; [EOL]     final short[] notEmptyShortArray = new short[] { 1 }; [EOL]     assertFalse(ArrayUtils.isNotEmpty((short[]) null)); [EOL]     assertFalse(ArrayUtils.isNotEmpty(emptyShortArray)); [EOL]     assertTrue(ArrayUtils.isNotEmpty(notEmptyShortArray)); [EOL]     final char[] emptyCharArray = new char[] {}; [EOL]     final char[] notEmptyCharArray = new char[] { 1 }; [EOL]     assertFalse(ArrayUtils.isNotEmpty((char[]) null)); [EOL]     assertFalse(ArrayUtils.isNotEmpty(emptyCharArray)); [EOL]     assertTrue(ArrayUtils.isNotEmpty(notEmptyCharArray)); [EOL]     final byte[] emptyByteArray = new byte[] {}; [EOL]     final byte[] notEmptyByteArray = new byte[] { 1 }; [EOL]     assertFalse(ArrayUtils.isNotEmpty((byte[]) null)); [EOL]     assertFalse(ArrayUtils.isNotEmpty(emptyByteArray)); [EOL]     assertTrue(ArrayUtils.isNotEmpty(notEmptyByteArray)); [EOL]     final double[] emptyDoubleArray = new double[] {}; [EOL]     final double[] notEmptyDoubleArray = new double[] { 1.0 }; [EOL]     assertFalse(ArrayUtils.isNotEmpty((double[]) null)); [EOL]     assertFalse(ArrayUtils.isNotEmpty(emptyDoubleArray)); [EOL]     assertTrue(ArrayUtils.isNotEmpty(notEmptyDoubleArray)); [EOL]     final float[] emptyFloatArray = new float[] {}; [EOL]     final float[] notEmptyFloatArray = new float[] { 1.0F }; [EOL]     assertFalse(ArrayUtils.isNotEmpty((float[]) null)); [EOL]     assertFalse(ArrayUtils.isNotEmpty(emptyFloatArray)); [EOL]     assertTrue(ArrayUtils.isNotEmpty(notEmptyFloatArray)); [EOL]     final boolean[] emptyBooleanArray = new boolean[] {}; [EOL]     final boolean[] notEmptyBooleanArray = new boolean[] { true }; [EOL]     assertFalse(ArrayUtils.isNotEmpty((boolean[]) null)); [EOL]     assertFalse(ArrayUtils.isNotEmpty(emptyBooleanArray)); [EOL]     assertTrue(ArrayUtils.isNotEmpty(notEmptyBooleanArray)); [EOL] }
@Test [EOL] public void testIsNotEmptyPrimitives() { [EOL]     final long[] emptyLongArray = new long[] {}; [EOL]     final long[] notEmptyLongArray = new long[] { 1L }; [EOL]     assertFalse(ArrayUtils.isNotEmpty((long[]) null)); [EOL]     assertFalse(ArrayUtils.isNotEmpty(emptyLongArray)); [EOL]     assertTrue(ArrayUtils.isNotEmpty(notEmptyLongArray)); [EOL]     final int[] emptyIntArray = new int[] {}; [EOL]     final int[] notEmptyIntArray = new int[] { 1 }; [EOL]     assertFalse(ArrayUtils.isNotEmpty((int[]) null)); [EOL]     assertFalse(ArrayUtils.isNotEmpty(emptyIntArray)); [EOL]     assertTrue(ArrayUtils.isNotEmpty(notEmptyIntArray)); [EOL]     final short[] emptyShortArray = new short[] {}; [EOL]     final short[] notEmptyShortArray = new short[] { 1 }; [EOL]     assertFalse(ArrayUtils.isNotEmpty((short[]) null)); [EOL]     assertFalse(ArrayUtils.isNotEmpty(emptyShortArray)); [EOL]     assertTrue(ArrayUtils.isNotEmpty(notEmptyShortArray)); [EOL]     final char[] emptyCharArray = new char[] {}; [EOL]     final char[] notEmptyCharArray = new char[] { 1 }; [EOL]     assertFalse(ArrayUtils.isNotEmpty((char[]) null)); [EOL]     assertFalse(ArrayUtils.isNotEmpty(emptyCharArray)); [EOL]     assertTrue(ArrayUtils.isNotEmpty(notEmptyCharArray)); [EOL]     final byte[] emptyByteArray = new byte[] {}; [EOL]     final byte[] notEmptyByteArray = new byte[] { 1 }; [EOL]     assertFalse(ArrayUtils.isNotEmpty((byte[]) null)); [EOL]     assertFalse(ArrayUtils.isNotEmpty(emptyByteArray)); [EOL]     assertTrue(ArrayUtils.isNotEmpty(notEmptyByteArray)); [EOL]     final double[] emptyDoubleArray = new double[] {}; [EOL]     final double[] notEmptyDoubleArray = new double[] { 1.0 }; [EOL]     assertFalse(ArrayUtils.isNotEmpty((double[]) null)); [EOL]     assertFalse(ArrayUtils.isNotEmpty(emptyDoubleArray)); [EOL]     assertTrue(ArrayUtils.isNotEmpty(notEmptyDoubleArray)); [EOL]     final float[] emptyFloatArray = new float[] {}; [EOL]     final float[] notEmptyFloatArray = new float[] { 1.0F }; [EOL]     assertFalse(ArrayUtils.isNotEmpty((float[]) null)); [EOL]     assertFalse(ArrayUtils.isNotEmpty(emptyFloatArray)); [EOL]     assertTrue(ArrayUtils.isNotEmpty(notEmptyFloatArray)); [EOL]     final boolean[] emptyBooleanArray = new boolean[] {}; [EOL]     final boolean[] notEmptyBooleanArray = new boolean[] { true }; [EOL]     assertFalse(ArrayUtils.isNotEmpty((boolean[]) null)); [EOL]     assertFalse(ArrayUtils.isNotEmpty(emptyBooleanArray)); [EOL]     assertTrue(ArrayUtils.isNotEmpty(notEmptyBooleanArray)); [EOL] }
@Test [EOL] public void testIsNotEmptyPrimitives() { [EOL]     final long[] emptyLongArray = new long[] {}; [EOL]     final long[] notEmptyLongArray = new long[] { 1L }; [EOL]     assertFalse(ArrayUtils.isNotEmpty((long[]) null)); [EOL]     assertFalse(ArrayUtils.isNotEmpty(emptyLongArray)); [EOL]     assertTrue(ArrayUtils.isNotEmpty(notEmptyLongArray)); [EOL]     final int[] emptyIntArray = new int[] {}; [EOL]     final int[] notEmptyIntArray = new int[] { 1 }; [EOL]     assertFalse(ArrayUtils.isNotEmpty((int[]) null)); [EOL]     assertFalse(ArrayUtils.isNotEmpty(emptyIntArray)); [EOL]     assertTrue(ArrayUtils.isNotEmpty(notEmptyIntArray)); [EOL]     final short[] emptyShortArray = new short[] {}; [EOL]     final short[] notEmptyShortArray = new short[] { 1 }; [EOL]     assertFalse(ArrayUtils.isNotEmpty((short[]) null)); [EOL]     assertFalse(ArrayUtils.isNotEmpty(emptyShortArray)); [EOL]     assertTrue(ArrayUtils.isNotEmpty(notEmptyShortArray)); [EOL]     final char[] emptyCharArray = new char[] {}; [EOL]     final char[] notEmptyCharArray = new char[] { 1 }; [EOL]     assertFalse(ArrayUtils.isNotEmpty((char[]) null)); [EOL]     assertFalse(ArrayUtils.isNotEmpty(emptyCharArray)); [EOL]     assertTrue(ArrayUtils.isNotEmpty(notEmptyCharArray)); [EOL]     final byte[] emptyByteArray = new byte[] {}; [EOL]     final byte[] notEmptyByteArray = new byte[] { 1 }; [EOL]     assertFalse(ArrayUtils.isNotEmpty((byte[]) null)); [EOL]     assertFalse(ArrayUtils.isNotEmpty(emptyByteArray)); [EOL]     assertTrue(ArrayUtils.isNotEmpty(notEmptyByteArray)); [EOL]     final double[] emptyDoubleArray = new double[] {}; [EOL]     final double[] notEmptyDoubleArray = new double[] { 1.0 }; [EOL]     assertFalse(ArrayUtils.isNotEmpty((double[]) null)); [EOL]     assertFalse(ArrayUtils.isNotEmpty(emptyDoubleArray)); [EOL]     assertTrue(ArrayUtils.isNotEmpty(notEmptyDoubleArray)); [EOL]     final float[] emptyFloatArray = new float[] {}; [EOL]     final float[] notEmptyFloatArray = new float[] { 1.0F }; [EOL]     assertFalse(ArrayUtils.isNotEmpty((float[]) null)); [EOL]     assertFalse(ArrayUtils.isNotEmpty(emptyFloatArray)); [EOL]     assertTrue(ArrayUtils.isNotEmpty(notEmptyFloatArray)); [EOL]     final boolean[] emptyBooleanArray = new boolean[] {}; [EOL]     final boolean[] notEmptyBooleanArray = new boolean[] { true }; [EOL]     assertFalse(ArrayUtils.isNotEmpty((boolean[]) null)); [EOL]     assertFalse(ArrayUtils.isNotEmpty(emptyBooleanArray)); [EOL]     assertTrue(ArrayUtils.isNotEmpty(notEmptyBooleanArray)); [EOL] }
@Test [EOL] public void testIsNotEmptyPrimitives() { [EOL]     final long[] emptyLongArray = new long[] {}; [EOL]     final long[] notEmptyLongArray = new long[] { 1L }; [EOL]     assertFalse(ArrayUtils.isNotEmpty((long[]) null)); [EOL]     assertFalse(ArrayUtils.isNotEmpty(emptyLongArray)); [EOL]     assertTrue(ArrayUtils.isNotEmpty(notEmptyLongArray)); [EOL]     final int[] emptyIntArray = new int[] {}; [EOL]     final int[] notEmptyIntArray = new int[] { 1 }; [EOL]     assertFalse(ArrayUtils.isNotEmpty((int[]) null)); [EOL]     assertFalse(ArrayUtils.isNotEmpty(emptyIntArray)); [EOL]     assertTrue(ArrayUtils.isNotEmpty(notEmptyIntArray)); [EOL]     final short[] emptyShortArray = new short[] {}; [EOL]     final short[] notEmptyShortArray = new short[] { 1 }; [EOL]     assertFalse(ArrayUtils.isNotEmpty((short[]) null)); [EOL]     assertFalse(ArrayUtils.isNotEmpty(emptyShortArray)); [EOL]     assertTrue(ArrayUtils.isNotEmpty(notEmptyShortArray)); [EOL]     final char[] emptyCharArray = new char[] {}; [EOL]     final char[] notEmptyCharArray = new char[] { 1 }; [EOL]     assertFalse(ArrayUtils.isNotEmpty((char[]) null)); [EOL]     assertFalse(ArrayUtils.isNotEmpty(emptyCharArray)); [EOL]     assertTrue(ArrayUtils.isNotEmpty(notEmptyCharArray)); [EOL]     final byte[] emptyByteArray = new byte[] {}; [EOL]     final byte[] notEmptyByteArray = new byte[] { 1 }; [EOL]     assertFalse(ArrayUtils.isNotEmpty((byte[]) null)); [EOL]     assertFalse(ArrayUtils.isNotEmpty(emptyByteArray)); [EOL]     assertTrue(ArrayUtils.isNotEmpty(notEmptyByteArray)); [EOL]     final double[] emptyDoubleArray = new double[] {}; [EOL]     final double[] notEmptyDoubleArray = new double[] { 1.0 }; [EOL]     assertFalse(ArrayUtils.isNotEmpty((double[]) null)); [EOL]     assertFalse(ArrayUtils.isNotEmpty(emptyDoubleArray)); [EOL]     assertTrue(ArrayUtils.isNotEmpty(notEmptyDoubleArray)); [EOL]     final float[] emptyFloatArray = new float[] {}; [EOL]     final float[] notEmptyFloatArray = new float[] { 1.0F }; [EOL]     assertFalse(ArrayUtils.isNotEmpty((float[]) null)); [EOL]     assertFalse(ArrayUtils.isNotEmpty(emptyFloatArray)); [EOL]     assertTrue(ArrayUtils.isNotEmpty(notEmptyFloatArray)); [EOL]     final boolean[] emptyBooleanArray = new boolean[] {}; [EOL]     final boolean[] notEmptyBooleanArray = new boolean[] { true }; [EOL]     assertFalse(ArrayUtils.isNotEmpty((boolean[]) null)); [EOL]     assertFalse(ArrayUtils.isNotEmpty(emptyBooleanArray)); [EOL]     assertTrue(ArrayUtils.isNotEmpty(notEmptyBooleanArray)); [EOL] }
@Test [EOL] public void testIsNotEmptyPrimitives() { [EOL]     final long[] emptyLongArray = new long[] {}; [EOL]     final long[] notEmptyLongArray = new long[] { 1L }; [EOL]     assertFalse(ArrayUtils.isNotEmpty((long[]) null)); [EOL]     assertFalse(ArrayUtils.isNotEmpty(emptyLongArray)); [EOL]     assertTrue(ArrayUtils.isNotEmpty(notEmptyLongArray)); [EOL]     final int[] emptyIntArray = new int[] {}; [EOL]     final int[] notEmptyIntArray = new int[] { 1 }; [EOL]     assertFalse(ArrayUtils.isNotEmpty((int[]) null)); [EOL]     assertFalse(ArrayUtils.isNotEmpty(emptyIntArray)); [EOL]     assertTrue(ArrayUtils.isNotEmpty(notEmptyIntArray)); [EOL]     final short[] emptyShortArray = new short[] {}; [EOL]     final short[] notEmptyShortArray = new short[] { 1 }; [EOL]     assertFalse(ArrayUtils.isNotEmpty((short[]) null)); [EOL]     assertFalse(ArrayUtils.isNotEmpty(emptyShortArray)); [EOL]     assertTrue(ArrayUtils.isNotEmpty(notEmptyShortArray)); [EOL]     final char[] emptyCharArray = new char[] {}; [EOL]     final char[] notEmptyCharArray = new char[] { 1 }; [EOL]     assertFalse(ArrayUtils.isNotEmpty((char[]) null)); [EOL]     assertFalse(ArrayUtils.isNotEmpty(emptyCharArray)); [EOL]     assertTrue(ArrayUtils.isNotEmpty(notEmptyCharArray)); [EOL]     final byte[] emptyByteArray = new byte[] {}; [EOL]     final byte[] notEmptyByteArray = new byte[] { 1 }; [EOL]     assertFalse(ArrayUtils.isNotEmpty((byte[]) null)); [EOL]     assertFalse(ArrayUtils.isNotEmpty(emptyByteArray)); [EOL]     assertTrue(ArrayUtils.isNotEmpty(notEmptyByteArray)); [EOL]     final double[] emptyDoubleArray = new double[] {}; [EOL]     final double[] notEmptyDoubleArray = new double[] { 1.0 }; [EOL]     assertFalse(ArrayUtils.isNotEmpty((double[]) null)); [EOL]     assertFalse(ArrayUtils.isNotEmpty(emptyDoubleArray)); [EOL]     assertTrue(ArrayUtils.isNotEmpty(notEmptyDoubleArray)); [EOL]     final float[] emptyFloatArray = new float[] {}; [EOL]     final float[] notEmptyFloatArray = new float[] { 1.0F }; [EOL]     assertFalse(ArrayUtils.isNotEmpty((float[]) null)); [EOL]     assertFalse(ArrayUtils.isNotEmpty(emptyFloatArray)); [EOL]     assertTrue(ArrayUtils.isNotEmpty(notEmptyFloatArray)); [EOL]     final boolean[] emptyBooleanArray = new boolean[] {}; [EOL]     final boolean[] notEmptyBooleanArray = new boolean[] { true }; [EOL]     assertFalse(ArrayUtils.isNotEmpty((boolean[]) null)); [EOL]     assertFalse(ArrayUtils.isNotEmpty(emptyBooleanArray)); [EOL]     assertTrue(ArrayUtils.isNotEmpty(notEmptyBooleanArray)); [EOL] }
@Test [EOL] public void testIsNotEmptyPrimitives() { [EOL]     final long[] emptyLongArray = new long[] {}; [EOL]     final long[] notEmptyLongArray = new long[] { 1L }; [EOL]     assertFalse(ArrayUtils.isNotEmpty((long[]) null)); [EOL]     assertFalse(ArrayUtils.isNotEmpty(emptyLongArray)); [EOL]     assertTrue(ArrayUtils.isNotEmpty(notEmptyLongArray)); [EOL]     final int[] emptyIntArray = new int[] {}; [EOL]     final int[] notEmptyIntArray = new int[] { 1 }; [EOL]     assertFalse(ArrayUtils.isNotEmpty((int[]) null)); [EOL]     assertFalse(ArrayUtils.isNotEmpty(emptyIntArray)); [EOL]     assertTrue(ArrayUtils.isNotEmpty(notEmptyIntArray)); [EOL]     final short[] emptyShortArray = new short[] {}; [EOL]     final short[] notEmptyShortArray = new short[] { 1 }; [EOL]     assertFalse(ArrayUtils.isNotEmpty((short[]) null)); [EOL]     assertFalse(ArrayUtils.isNotEmpty(emptyShortArray)); [EOL]     assertTrue(ArrayUtils.isNotEmpty(notEmptyShortArray)); [EOL]     final char[] emptyCharArray = new char[] {}; [EOL]     final char[] notEmptyCharArray = new char[] { 1 }; [EOL]     assertFalse(ArrayUtils.isNotEmpty((char[]) null)); [EOL]     assertFalse(ArrayUtils.isNotEmpty(emptyCharArray)); [EOL]     assertTrue(ArrayUtils.isNotEmpty(notEmptyCharArray)); [EOL]     final byte[] emptyByteArray = new byte[] {}; [EOL]     final byte[] notEmptyByteArray = new byte[] { 1 }; [EOL]     assertFalse(ArrayUtils.isNotEmpty((byte[]) null)); [EOL]     assertFalse(ArrayUtils.isNotEmpty(emptyByteArray)); [EOL]     assertTrue(ArrayUtils.isNotEmpty(notEmptyByteArray)); [EOL]     final double[] emptyDoubleArray = new double[] {}; [EOL]     final double[] notEmptyDoubleArray = new double[] { 1.0 }; [EOL]     assertFalse(ArrayUtils.isNotEmpty((double[]) null)); [EOL]     assertFalse(ArrayUtils.isNotEmpty(emptyDoubleArray)); [EOL]     assertTrue(ArrayUtils.isNotEmpty(notEmptyDoubleArray)); [EOL]     final float[] emptyFloatArray = new float[] {}; [EOL]     final float[] notEmptyFloatArray = new float[] { 1.0F }; [EOL]     assertFalse(ArrayUtils.isNotEmpty((float[]) null)); [EOL]     assertFalse(ArrayUtils.isNotEmpty(emptyFloatArray)); [EOL]     assertTrue(ArrayUtils.isNotEmpty(notEmptyFloatArray)); [EOL]     final boolean[] emptyBooleanArray = new boolean[] {}; [EOL]     final boolean[] notEmptyBooleanArray = new boolean[] { true }; [EOL]     assertFalse(ArrayUtils.isNotEmpty((boolean[]) null)); [EOL]     assertFalse(ArrayUtils.isNotEmpty(emptyBooleanArray)); [EOL]     assertTrue(ArrayUtils.isNotEmpty(notEmptyBooleanArray)); [EOL] }
@Test [EOL] public void testIsNotEmptyPrimitives() { [EOL]     final long[] emptyLongArray = new long[] {}; [EOL]     final long[] notEmptyLongArray = new long[] { 1L }; [EOL]     assertFalse(ArrayUtils.isNotEmpty((long[]) null)); [EOL]     assertFalse(ArrayUtils.isNotEmpty(emptyLongArray)); [EOL]     assertTrue(ArrayUtils.isNotEmpty(notEmptyLongArray)); [EOL]     final int[] emptyIntArray = new int[] {}; [EOL]     final int[] notEmptyIntArray = new int[] { 1 }; [EOL]     assertFalse(ArrayUtils.isNotEmpty((int[]) null)); [EOL]     assertFalse(ArrayUtils.isNotEmpty(emptyIntArray)); [EOL]     assertTrue(ArrayUtils.isNotEmpty(notEmptyIntArray)); [EOL]     final short[] emptyShortArray = new short[] {}; [EOL]     final short[] notEmptyShortArray = new short[] { 1 }; [EOL]     assertFalse(ArrayUtils.isNotEmpty((short[]) null)); [EOL]     assertFalse(ArrayUtils.isNotEmpty(emptyShortArray)); [EOL]     assertTrue(ArrayUtils.isNotEmpty(notEmptyShortArray)); [EOL]     final char[] emptyCharArray = new char[] {}; [EOL]     final char[] notEmptyCharArray = new char[] { 1 }; [EOL]     assertFalse(ArrayUtils.isNotEmpty((char[]) null)); [EOL]     assertFalse(ArrayUtils.isNotEmpty(emptyCharArray)); [EOL]     assertTrue(ArrayUtils.isNotEmpty(notEmptyCharArray)); [EOL]     final byte[] emptyByteArray = new byte[] {}; [EOL]     final byte[] notEmptyByteArray = new byte[] { 1 }; [EOL]     assertFalse(ArrayUtils.isNotEmpty((byte[]) null)); [EOL]     assertFalse(ArrayUtils.isNotEmpty(emptyByteArray)); [EOL]     assertTrue(ArrayUtils.isNotEmpty(notEmptyByteArray)); [EOL]     final double[] emptyDoubleArray = new double[] {}; [EOL]     final double[] notEmptyDoubleArray = new double[] { 1.0 }; [EOL]     assertFalse(ArrayUtils.isNotEmpty((double[]) null)); [EOL]     assertFalse(ArrayUtils.isNotEmpty(emptyDoubleArray)); [EOL]     assertTrue(ArrayUtils.isNotEmpty(notEmptyDoubleArray)); [EOL]     final float[] emptyFloatArray = new float[] {}; [EOL]     final float[] notEmptyFloatArray = new float[] { 1.0F }; [EOL]     assertFalse(ArrayUtils.isNotEmpty((float[]) null)); [EOL]     assertFalse(ArrayUtils.isNotEmpty(emptyFloatArray)); [EOL]     assertTrue(ArrayUtils.isNotEmpty(notEmptyFloatArray)); [EOL]     final boolean[] emptyBooleanArray = new boolean[] {}; [EOL]     final boolean[] notEmptyBooleanArray = new boolean[] { true }; [EOL]     assertFalse(ArrayUtils.isNotEmpty((boolean[]) null)); [EOL]     assertFalse(ArrayUtils.isNotEmpty(emptyBooleanArray)); [EOL]     assertTrue(ArrayUtils.isNotEmpty(notEmptyBooleanArray)); [EOL] }
@Test [EOL] public void testIsNotEmptyPrimitives() { [EOL]     final long[] emptyLongArray = new long[] {}; [EOL]     final long[] notEmptyLongArray = new long[] { 1L }; [EOL]     assertFalse(ArrayUtils.isNotEmpty((long[]) null)); [EOL]     assertFalse(ArrayUtils.isNotEmpty(emptyLongArray)); [EOL]     assertTrue(ArrayUtils.isNotEmpty(notEmptyLongArray)); [EOL]     final int[] emptyIntArray = new int[] {}; [EOL]     final int[] notEmptyIntArray = new int[] { 1 }; [EOL]     assertFalse(ArrayUtils.isNotEmpty((int[]) null)); [EOL]     assertFalse(ArrayUtils.isNotEmpty(emptyIntArray)); [EOL]     assertTrue(ArrayUtils.isNotEmpty(notEmptyIntArray)); [EOL]     final short[] emptyShortArray = new short[] {}; [EOL]     final short[] notEmptyShortArray = new short[] { 1 }; [EOL]     assertFalse(ArrayUtils.isNotEmpty((short[]) null)); [EOL]     assertFalse(ArrayUtils.isNotEmpty(emptyShortArray)); [EOL]     assertTrue(ArrayUtils.isNotEmpty(notEmptyShortArray)); [EOL]     final char[] emptyCharArray = new char[] {}; [EOL]     final char[] notEmptyCharArray = new char[] { 1 }; [EOL]     assertFalse(ArrayUtils.isNotEmpty((char[]) null)); [EOL]     assertFalse(ArrayUtils.isNotEmpty(emptyCharArray)); [EOL]     assertTrue(ArrayUtils.isNotEmpty(notEmptyCharArray)); [EOL]     final byte[] emptyByteArray = new byte[] {}; [EOL]     final byte[] notEmptyByteArray = new byte[] { 1 }; [EOL]     assertFalse(ArrayUtils.isNotEmpty((byte[]) null)); [EOL]     assertFalse(ArrayUtils.isNotEmpty(emptyByteArray)); [EOL]     assertTrue(ArrayUtils.isNotEmpty(notEmptyByteArray)); [EOL]     final double[] emptyDoubleArray = new double[] {}; [EOL]     final double[] notEmptyDoubleArray = new double[] { 1.0 }; [EOL]     assertFalse(ArrayUtils.isNotEmpty((double[]) null)); [EOL]     assertFalse(ArrayUtils.isNotEmpty(emptyDoubleArray)); [EOL]     assertTrue(ArrayUtils.isNotEmpty(notEmptyDoubleArray)); [EOL]     final float[] emptyFloatArray = new float[] {}; [EOL]     final float[] notEmptyFloatArray = new float[] { 1.0F }; [EOL]     assertFalse(ArrayUtils.isNotEmpty((float[]) null)); [EOL]     assertFalse(ArrayUtils.isNotEmpty(emptyFloatArray)); [EOL]     assertTrue(ArrayUtils.isNotEmpty(notEmptyFloatArray)); [EOL]     final boolean[] emptyBooleanArray = new boolean[] {}; [EOL]     final boolean[] notEmptyBooleanArray = new boolean[] { true }; [EOL]     assertFalse(ArrayUtils.isNotEmpty((boolean[]) null)); [EOL]     assertFalse(ArrayUtils.isNotEmpty(emptyBooleanArray)); [EOL]     assertTrue(ArrayUtils.isNotEmpty(notEmptyBooleanArray)); [EOL] }
@Test [EOL] public void testIsNotEmptyPrimitives() { [EOL]     final long[] emptyLongArray = new long[] {}; [EOL]     final long[] notEmptyLongArray = new long[] { 1L }; [EOL]     assertFalse(ArrayUtils.isNotEmpty((long[]) null)); [EOL]     assertFalse(ArrayUtils.isNotEmpty(emptyLongArray)); [EOL]     assertTrue(ArrayUtils.isNotEmpty(notEmptyLongArray)); [EOL]     final int[] emptyIntArray = new int[] {}; [EOL]     final int[] notEmptyIntArray = new int[] { 1 }; [EOL]     assertFalse(ArrayUtils.isNotEmpty((int[]) null)); [EOL]     assertFalse(ArrayUtils.isNotEmpty(emptyIntArray)); [EOL]     assertTrue(ArrayUtils.isNotEmpty(notEmptyIntArray)); [EOL]     final short[] emptyShortArray = new short[] {}; [EOL]     final short[] notEmptyShortArray = new short[] { 1 }; [EOL]     assertFalse(ArrayUtils.isNotEmpty((short[]) null)); [EOL]     assertFalse(ArrayUtils.isNotEmpty(emptyShortArray)); [EOL]     assertTrue(ArrayUtils.isNotEmpty(notEmptyShortArray)); [EOL]     final char[] emptyCharArray = new char[] {}; [EOL]     final char[] notEmptyCharArray = new char[] { 1 }; [EOL]     assertFalse(ArrayUtils.isNotEmpty((char[]) null)); [EOL]     assertFalse(ArrayUtils.isNotEmpty(emptyCharArray)); [EOL]     assertTrue(ArrayUtils.isNotEmpty(notEmptyCharArray)); [EOL]     final byte[] emptyByteArray = new byte[] {}; [EOL]     final byte[] notEmptyByteArray = new byte[] { 1 }; [EOL]     assertFalse(ArrayUtils.isNotEmpty((byte[]) null)); [EOL]     assertFalse(ArrayUtils.isNotEmpty(emptyByteArray)); [EOL]     assertTrue(ArrayUtils.isNotEmpty(notEmptyByteArray)); [EOL]     final double[] emptyDoubleArray = new double[] {}; [EOL]     final double[] notEmptyDoubleArray = new double[] { 1.0 }; [EOL]     assertFalse(ArrayUtils.isNotEmpty((double[]) null)); [EOL]     assertFalse(ArrayUtils.isNotEmpty(emptyDoubleArray)); [EOL]     assertTrue(ArrayUtils.isNotEmpty(notEmptyDoubleArray)); [EOL]     final float[] emptyFloatArray = new float[] {}; [EOL]     final float[] notEmptyFloatArray = new float[] { 1.0F }; [EOL]     assertFalse(ArrayUtils.isNotEmpty((float[]) null)); [EOL]     assertFalse(ArrayUtils.isNotEmpty(emptyFloatArray)); [EOL]     assertTrue(ArrayUtils.isNotEmpty(notEmptyFloatArray)); [EOL]     final boolean[] emptyBooleanArray = new boolean[] {}; [EOL]     final boolean[] notEmptyBooleanArray = new boolean[] { true }; [EOL]     assertFalse(ArrayUtils.isNotEmpty((boolean[]) null)); [EOL]     assertFalse(ArrayUtils.isNotEmpty(emptyBooleanArray)); [EOL]     assertTrue(ArrayUtils.isNotEmpty(notEmptyBooleanArray)); [EOL] }
@Test [EOL] public void testIsNotEmptyPrimitives() { [EOL]     final long[] emptyLongArray = new long[] {}; [EOL]     final long[] notEmptyLongArray = new long[] { 1L }; [EOL]     assertFalse(ArrayUtils.isNotEmpty((long[]) null)); [EOL]     assertFalse(ArrayUtils.isNotEmpty(emptyLongArray)); [EOL]     assertTrue(ArrayUtils.isNotEmpty(notEmptyLongArray)); [EOL]     final int[] emptyIntArray = new int[] {}; [EOL]     final int[] notEmptyIntArray = new int[] { 1 }; [EOL]     assertFalse(ArrayUtils.isNotEmpty((int[]) null)); [EOL]     assertFalse(ArrayUtils.isNotEmpty(emptyIntArray)); [EOL]     assertTrue(ArrayUtils.isNotEmpty(notEmptyIntArray)); [EOL]     final short[] emptyShortArray = new short[] {}; [EOL]     final short[] notEmptyShortArray = new short[] { 1 }; [EOL]     assertFalse(ArrayUtils.isNotEmpty((short[]) null)); [EOL]     assertFalse(ArrayUtils.isNotEmpty(emptyShortArray)); [EOL]     assertTrue(ArrayUtils.isNotEmpty(notEmptyShortArray)); [EOL]     final char[] emptyCharArray = new char[] {}; [EOL]     final char[] notEmptyCharArray = new char[] { 1 }; [EOL]     assertFalse(ArrayUtils.isNotEmpty((char[]) null)); [EOL]     assertFalse(ArrayUtils.isNotEmpty(emptyCharArray)); [EOL]     assertTrue(ArrayUtils.isNotEmpty(notEmptyCharArray)); [EOL]     final byte[] emptyByteArray = new byte[] {}; [EOL]     final byte[] notEmptyByteArray = new byte[] { 1 }; [EOL]     assertFalse(ArrayUtils.isNotEmpty((byte[]) null)); [EOL]     assertFalse(ArrayUtils.isNotEmpty(emptyByteArray)); [EOL]     assertTrue(ArrayUtils.isNotEmpty(notEmptyByteArray)); [EOL]     final double[] emptyDoubleArray = new double[] {}; [EOL]     final double[] notEmptyDoubleArray = new double[] { 1.0 }; [EOL]     assertFalse(ArrayUtils.isNotEmpty((double[]) null)); [EOL]     assertFalse(ArrayUtils.isNotEmpty(emptyDoubleArray)); [EOL]     assertTrue(ArrayUtils.isNotEmpty(notEmptyDoubleArray)); [EOL]     final float[] emptyFloatArray = new float[] {}; [EOL]     final float[] notEmptyFloatArray = new float[] { 1.0F }; [EOL]     assertFalse(ArrayUtils.isNotEmpty((float[]) null)); [EOL]     assertFalse(ArrayUtils.isNotEmpty(emptyFloatArray)); [EOL]     assertTrue(ArrayUtils.isNotEmpty(notEmptyFloatArray)); [EOL]     final boolean[] emptyBooleanArray = new boolean[] {}; [EOL]     final boolean[] notEmptyBooleanArray = new boolean[] { true }; [EOL]     assertFalse(ArrayUtils.isNotEmpty((boolean[]) null)); [EOL]     assertFalse(ArrayUtils.isNotEmpty(emptyBooleanArray)); [EOL]     assertTrue(ArrayUtils.isNotEmpty(notEmptyBooleanArray)); [EOL] }
@Test [EOL] public void testIsNotEmptyPrimitives() { [EOL]     final long[] emptyLongArray = new long[] {}; [EOL]     final long[] notEmptyLongArray = new long[] { 1L }; [EOL]     assertFalse(ArrayUtils.isNotEmpty((long[]) null)); [EOL]     assertFalse(ArrayUtils.isNotEmpty(emptyLongArray)); [EOL]     assertTrue(ArrayUtils.isNotEmpty(notEmptyLongArray)); [EOL]     final int[] emptyIntArray = new int[] {}; [EOL]     final int[] notEmptyIntArray = new int[] { 1 }; [EOL]     assertFalse(ArrayUtils.isNotEmpty((int[]) null)); [EOL]     assertFalse(ArrayUtils.isNotEmpty(emptyIntArray)); [EOL]     assertTrue(ArrayUtils.isNotEmpty(notEmptyIntArray)); [EOL]     final short[] emptyShortArray = new short[] {}; [EOL]     final short[] notEmptyShortArray = new short[] { 1 }; [EOL]     assertFalse(ArrayUtils.isNotEmpty((short[]) null)); [EOL]     assertFalse(ArrayUtils.isNotEmpty(emptyShortArray)); [EOL]     assertTrue(ArrayUtils.isNotEmpty(notEmptyShortArray)); [EOL]     final char[] emptyCharArray = new char[] {}; [EOL]     final char[] notEmptyCharArray = new char[] { 1 }; [EOL]     assertFalse(ArrayUtils.isNotEmpty((char[]) null)); [EOL]     assertFalse(ArrayUtils.isNotEmpty(emptyCharArray)); [EOL]     assertTrue(ArrayUtils.isNotEmpty(notEmptyCharArray)); [EOL]     final byte[] emptyByteArray = new byte[] {}; [EOL]     final byte[] notEmptyByteArray = new byte[] { 1 }; [EOL]     assertFalse(ArrayUtils.isNotEmpty((byte[]) null)); [EOL]     assertFalse(ArrayUtils.isNotEmpty(emptyByteArray)); [EOL]     assertTrue(ArrayUtils.isNotEmpty(notEmptyByteArray)); [EOL]     final double[] emptyDoubleArray = new double[] {}; [EOL]     final double[] notEmptyDoubleArray = new double[] { 1.0 }; [EOL]     assertFalse(ArrayUtils.isNotEmpty((double[]) null)); [EOL]     assertFalse(ArrayUtils.isNotEmpty(emptyDoubleArray)); [EOL]     assertTrue(ArrayUtils.isNotEmpty(notEmptyDoubleArray)); [EOL]     final float[] emptyFloatArray = new float[] {}; [EOL]     final float[] notEmptyFloatArray = new float[] { 1.0F }; [EOL]     assertFalse(ArrayUtils.isNotEmpty((float[]) null)); [EOL]     assertFalse(ArrayUtils.isNotEmpty(emptyFloatArray)); [EOL]     assertTrue(ArrayUtils.isNotEmpty(notEmptyFloatArray)); [EOL]     final boolean[] emptyBooleanArray = new boolean[] {}; [EOL]     final boolean[] notEmptyBooleanArray = new boolean[] { true }; [EOL]     assertFalse(ArrayUtils.isNotEmpty((boolean[]) null)); [EOL]     assertFalse(ArrayUtils.isNotEmpty(emptyBooleanArray)); [EOL]     assertTrue(ArrayUtils.isNotEmpty(notEmptyBooleanArray)); [EOL] }
@Test [EOL] public void testIsNotEmptyPrimitives() { [EOL]     final long[] emptyLongArray = new long[] {}; [EOL]     final long[] notEmptyLongArray = new long[] { 1L }; [EOL]     assertFalse(ArrayUtils.isNotEmpty((long[]) null)); [EOL]     assertFalse(ArrayUtils.isNotEmpty(emptyLongArray)); [EOL]     assertTrue(ArrayUtils.isNotEmpty(notEmptyLongArray)); [EOL]     final int[] emptyIntArray = new int[] {}; [EOL]     final int[] notEmptyIntArray = new int[] { 1 }; [EOL]     assertFalse(ArrayUtils.isNotEmpty((int[]) null)); [EOL]     assertFalse(ArrayUtils.isNotEmpty(emptyIntArray)); [EOL]     assertTrue(ArrayUtils.isNotEmpty(notEmptyIntArray)); [EOL]     final short[] emptyShortArray = new short[] {}; [EOL]     final short[] notEmptyShortArray = new short[] { 1 }; [EOL]     assertFalse(ArrayUtils.isNotEmpty((short[]) null)); [EOL]     assertFalse(ArrayUtils.isNotEmpty(emptyShortArray)); [EOL]     assertTrue(ArrayUtils.isNotEmpty(notEmptyShortArray)); [EOL]     final char[] emptyCharArray = new char[] {}; [EOL]     final char[] notEmptyCharArray = new char[] { 1 }; [EOL]     assertFalse(ArrayUtils.isNotEmpty((char[]) null)); [EOL]     assertFalse(ArrayUtils.isNotEmpty(emptyCharArray)); [EOL]     assertTrue(ArrayUtils.isNotEmpty(notEmptyCharArray)); [EOL]     final byte[] emptyByteArray = new byte[] {}; [EOL]     final byte[] notEmptyByteArray = new byte[] { 1 }; [EOL]     assertFalse(ArrayUtils.isNotEmpty((byte[]) null)); [EOL]     assertFalse(ArrayUtils.isNotEmpty(emptyByteArray)); [EOL]     assertTrue(ArrayUtils.isNotEmpty(notEmptyByteArray)); [EOL]     final double[] emptyDoubleArray = new double[] {}; [EOL]     final double[] notEmptyDoubleArray = new double[] { 1.0 }; [EOL]     assertFalse(ArrayUtils.isNotEmpty((double[]) null)); [EOL]     assertFalse(ArrayUtils.isNotEmpty(emptyDoubleArray)); [EOL]     assertTrue(ArrayUtils.isNotEmpty(notEmptyDoubleArray)); [EOL]     final float[] emptyFloatArray = new float[] {}; [EOL]     final float[] notEmptyFloatArray = new float[] { 1.0F }; [EOL]     assertFalse(ArrayUtils.isNotEmpty((float[]) null)); [EOL]     assertFalse(ArrayUtils.isNotEmpty(emptyFloatArray)); [EOL]     assertTrue(ArrayUtils.isNotEmpty(notEmptyFloatArray)); [EOL]     final boolean[] emptyBooleanArray = new boolean[] {}; [EOL]     final boolean[] notEmptyBooleanArray = new boolean[] { true }; [EOL]     assertFalse(ArrayUtils.isNotEmpty((boolean[]) null)); [EOL]     assertFalse(ArrayUtils.isNotEmpty(emptyBooleanArray)); [EOL]     assertTrue(ArrayUtils.isNotEmpty(notEmptyBooleanArray)); [EOL] }
@Test [EOL] public void testIsNotEmptyPrimitives() { [EOL]     final long[] emptyLongArray = new long[] {}; [EOL]     final long[] notEmptyLongArray = new long[] { 1L }; [EOL]     assertFalse(ArrayUtils.isNotEmpty((long[]) null)); [EOL]     assertFalse(ArrayUtils.isNotEmpty(emptyLongArray)); [EOL]     assertTrue(ArrayUtils.isNotEmpty(notEmptyLongArray)); [EOL]     final int[] emptyIntArray = new int[] {}; [EOL]     final int[] notEmptyIntArray = new int[] { 1 }; [EOL]     assertFalse(ArrayUtils.isNotEmpty((int[]) null)); [EOL]     assertFalse(ArrayUtils.isNotEmpty(emptyIntArray)); [EOL]     assertTrue(ArrayUtils.isNotEmpty(notEmptyIntArray)); [EOL]     final short[] emptyShortArray = new short[] {}; [EOL]     final short[] notEmptyShortArray = new short[] { 1 }; [EOL]     assertFalse(ArrayUtils.isNotEmpty((short[]) null)); [EOL]     assertFalse(ArrayUtils.isNotEmpty(emptyShortArray)); [EOL]     assertTrue(ArrayUtils.isNotEmpty(notEmptyShortArray)); [EOL]     final char[] emptyCharArray = new char[] {}; [EOL]     final char[] notEmptyCharArray = new char[] { 1 }; [EOL]     assertFalse(ArrayUtils.isNotEmpty((char[]) null)); [EOL]     assertFalse(ArrayUtils.isNotEmpty(emptyCharArray)); [EOL]     assertTrue(ArrayUtils.isNotEmpty(notEmptyCharArray)); [EOL]     final byte[] emptyByteArray = new byte[] {}; [EOL]     final byte[] notEmptyByteArray = new byte[] { 1 }; [EOL]     assertFalse(ArrayUtils.isNotEmpty((byte[]) null)); [EOL]     assertFalse(ArrayUtils.isNotEmpty(emptyByteArray)); [EOL]     assertTrue(ArrayUtils.isNotEmpty(notEmptyByteArray)); [EOL]     final double[] emptyDoubleArray = new double[] {}; [EOL]     final double[] notEmptyDoubleArray = new double[] { 1.0 }; [EOL]     assertFalse(ArrayUtils.isNotEmpty((double[]) null)); [EOL]     assertFalse(ArrayUtils.isNotEmpty(emptyDoubleArray)); [EOL]     assertTrue(ArrayUtils.isNotEmpty(notEmptyDoubleArray)); [EOL]     final float[] emptyFloatArray = new float[] {}; [EOL]     final float[] notEmptyFloatArray = new float[] { 1.0F }; [EOL]     assertFalse(ArrayUtils.isNotEmpty((float[]) null)); [EOL]     assertFalse(ArrayUtils.isNotEmpty(emptyFloatArray)); [EOL]     assertTrue(ArrayUtils.isNotEmpty(notEmptyFloatArray)); [EOL]     final boolean[] emptyBooleanArray = new boolean[] {}; [EOL]     final boolean[] notEmptyBooleanArray = new boolean[] { true }; [EOL]     assertFalse(ArrayUtils.isNotEmpty((boolean[]) null)); [EOL]     assertFalse(ArrayUtils.isNotEmpty(emptyBooleanArray)); [EOL]     assertTrue(ArrayUtils.isNotEmpty(notEmptyBooleanArray)); [EOL] }
@Test [EOL] public void testIsNotEmptyPrimitives() { [EOL]     final long[] emptyLongArray = new long[] {}; [EOL]     final long[] notEmptyLongArray = new long[] { 1L }; [EOL]     assertFalse(ArrayUtils.isNotEmpty((long[]) null)); [EOL]     assertFalse(ArrayUtils.isNotEmpty(emptyLongArray)); [EOL]     assertTrue(ArrayUtils.isNotEmpty(notEmptyLongArray)); [EOL]     final int[] emptyIntArray = new int[] {}; [EOL]     final int[] notEmptyIntArray = new int[] { 1 }; [EOL]     assertFalse(ArrayUtils.isNotEmpty((int[]) null)); [EOL]     assertFalse(ArrayUtils.isNotEmpty(emptyIntArray)); [EOL]     assertTrue(ArrayUtils.isNotEmpty(notEmptyIntArray)); [EOL]     final short[] emptyShortArray = new short[] {}; [EOL]     final short[] notEmptyShortArray = new short[] { 1 }; [EOL]     assertFalse(ArrayUtils.isNotEmpty((short[]) null)); [EOL]     assertFalse(ArrayUtils.isNotEmpty(emptyShortArray)); [EOL]     assertTrue(ArrayUtils.isNotEmpty(notEmptyShortArray)); [EOL]     final char[] emptyCharArray = new char[] {}; [EOL]     final char[] notEmptyCharArray = new char[] { 1 }; [EOL]     assertFalse(ArrayUtils.isNotEmpty((char[]) null)); [EOL]     assertFalse(ArrayUtils.isNotEmpty(emptyCharArray)); [EOL]     assertTrue(ArrayUtils.isNotEmpty(notEmptyCharArray)); [EOL]     final byte[] emptyByteArray = new byte[] {}; [EOL]     final byte[] notEmptyByteArray = new byte[] { 1 }; [EOL]     assertFalse(ArrayUtils.isNotEmpty((byte[]) null)); [EOL]     assertFalse(ArrayUtils.isNotEmpty(emptyByteArray)); [EOL]     assertTrue(ArrayUtils.isNotEmpty(notEmptyByteArray)); [EOL]     final double[] emptyDoubleArray = new double[] {}; [EOL]     final double[] notEmptyDoubleArray = new double[] { 1.0 }; [EOL]     assertFalse(ArrayUtils.isNotEmpty((double[]) null)); [EOL]     assertFalse(ArrayUtils.isNotEmpty(emptyDoubleArray)); [EOL]     assertTrue(ArrayUtils.isNotEmpty(notEmptyDoubleArray)); [EOL]     final float[] emptyFloatArray = new float[] {}; [EOL]     final float[] notEmptyFloatArray = new float[] { 1.0F }; [EOL]     assertFalse(ArrayUtils.isNotEmpty((float[]) null)); [EOL]     assertFalse(ArrayUtils.isNotEmpty(emptyFloatArray)); [EOL]     assertTrue(ArrayUtils.isNotEmpty(notEmptyFloatArray)); [EOL]     final boolean[] emptyBooleanArray = new boolean[] {}; [EOL]     final boolean[] notEmptyBooleanArray = new boolean[] { true }; [EOL]     assertFalse(ArrayUtils.isNotEmpty((boolean[]) null)); [EOL]     assertFalse(ArrayUtils.isNotEmpty(emptyBooleanArray)); [EOL]     assertTrue(ArrayUtils.isNotEmpty(notEmptyBooleanArray)); [EOL] }
@Test [EOL] public void testIsNotEmptyPrimitives() { [EOL]     final long[] emptyLongArray = new long[] {}; [EOL]     final long[] notEmptyLongArray = new long[] { 1L }; [EOL]     assertFalse(ArrayUtils.isNotEmpty((long[]) null)); [EOL]     assertFalse(ArrayUtils.isNotEmpty(emptyLongArray)); [EOL]     assertTrue(ArrayUtils.isNotEmpty(notEmptyLongArray)); [EOL]     final int[] emptyIntArray = new int[] {}; [EOL]     final int[] notEmptyIntArray = new int[] { 1 }; [EOL]     assertFalse(ArrayUtils.isNotEmpty((int[]) null)); [EOL]     assertFalse(ArrayUtils.isNotEmpty(emptyIntArray)); [EOL]     assertTrue(ArrayUtils.isNotEmpty(notEmptyIntArray)); [EOL]     final short[] emptyShortArray = new short[] {}; [EOL]     final short[] notEmptyShortArray = new short[] { 1 }; [EOL]     assertFalse(ArrayUtils.isNotEmpty((short[]) null)); [EOL]     assertFalse(ArrayUtils.isNotEmpty(emptyShortArray)); [EOL]     assertTrue(ArrayUtils.isNotEmpty(notEmptyShortArray)); [EOL]     final char[] emptyCharArray = new char[] {}; [EOL]     final char[] notEmptyCharArray = new char[] { 1 }; [EOL]     assertFalse(ArrayUtils.isNotEmpty((char[]) null)); [EOL]     assertFalse(ArrayUtils.isNotEmpty(emptyCharArray)); [EOL]     assertTrue(ArrayUtils.isNotEmpty(notEmptyCharArray)); [EOL]     final byte[] emptyByteArray = new byte[] {}; [EOL]     final byte[] notEmptyByteArray = new byte[] { 1 }; [EOL]     assertFalse(ArrayUtils.isNotEmpty((byte[]) null)); [EOL]     assertFalse(ArrayUtils.isNotEmpty(emptyByteArray)); [EOL]     assertTrue(ArrayUtils.isNotEmpty(notEmptyByteArray)); [EOL]     final double[] emptyDoubleArray = new double[] {}; [EOL]     final double[] notEmptyDoubleArray = new double[] { 1.0 }; [EOL]     assertFalse(ArrayUtils.isNotEmpty((double[]) null)); [EOL]     assertFalse(ArrayUtils.isNotEmpty(emptyDoubleArray)); [EOL]     assertTrue(ArrayUtils.isNotEmpty(notEmptyDoubleArray)); [EOL]     final float[] emptyFloatArray = new float[] {}; [EOL]     final float[] notEmptyFloatArray = new float[] { 1.0F }; [EOL]     assertFalse(ArrayUtils.isNotEmpty((float[]) null)); [EOL]     assertFalse(ArrayUtils.isNotEmpty(emptyFloatArray)); [EOL]     assertTrue(ArrayUtils.isNotEmpty(notEmptyFloatArray)); [EOL]     final boolean[] emptyBooleanArray = new boolean[] {}; [EOL]     final boolean[] notEmptyBooleanArray = new boolean[] { true }; [EOL]     assertFalse(ArrayUtils.isNotEmpty((boolean[]) null)); [EOL]     assertFalse(ArrayUtils.isNotEmpty(emptyBooleanArray)); [EOL]     assertTrue(ArrayUtils.isNotEmpty(notEmptyBooleanArray)); [EOL] }
@Test [EOL] public void testAddObjectArrayChar() { [EOL]     char[] newArray; [EOL]     newArray = ArrayUtils.add((char[]) null, (char) 0); [EOL]     assertTrue(Arrays.equals(new char[] { 0 }, newArray)); [EOL]     assertEquals(Character.TYPE, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.add((char[]) null, (char) 1); [EOL]     assertTrue(Arrays.equals(new char[] { 1 }, newArray)); [EOL]     assertEquals(Character.TYPE, newArray.getClass().getComponentType()); [EOL]     final char[] array1 = new char[] { 1, 2, 3 }; [EOL]     newArray = ArrayUtils.add(array1, (char) 0); [EOL]     assertTrue(Arrays.equals(new char[] { 1, 2, 3, 0 }, newArray)); [EOL]     assertEquals(Character.TYPE, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.add(array1, (char) 4); [EOL]     assertTrue(Arrays.equals(new char[] { 1, 2, 3, 4 }, newArray)); [EOL]     assertEquals(Character.TYPE, newArray.getClass().getComponentType()); [EOL] }
@Test [EOL] public void testAddObjectArrayChar() { [EOL]     char[] newArray; [EOL]     newArray = ArrayUtils.add((char[]) null, (char) 0); [EOL]     assertTrue(Arrays.equals(new char[] { 0 }, newArray)); [EOL]     assertEquals(Character.TYPE, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.add((char[]) null, (char) 1); [EOL]     assertTrue(Arrays.equals(new char[] { 1 }, newArray)); [EOL]     assertEquals(Character.TYPE, newArray.getClass().getComponentType()); [EOL]     final char[] array1 = new char[] { 1, 2, 3 }; [EOL]     newArray = ArrayUtils.add(array1, (char) 0); [EOL]     assertTrue(Arrays.equals(new char[] { 1, 2, 3, 0 }, newArray)); [EOL]     assertEquals(Character.TYPE, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.add(array1, (char) 4); [EOL]     assertTrue(Arrays.equals(new char[] { 1, 2, 3, 4 }, newArray)); [EOL]     assertEquals(Character.TYPE, newArray.getClass().getComponentType()); [EOL] }
@Test [EOL] public void testAddObjectArrayChar() { [EOL]     char[] newArray; [EOL]     newArray = ArrayUtils.add((char[]) null, (char) 0); [EOL]     assertTrue(Arrays.equals(new char[] { 0 }, newArray)); [EOL]     assertEquals(Character.TYPE, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.add((char[]) null, (char) 1); [EOL]     assertTrue(Arrays.equals(new char[] { 1 }, newArray)); [EOL]     assertEquals(Character.TYPE, newArray.getClass().getComponentType()); [EOL]     final char[] array1 = new char[] { 1, 2, 3 }; [EOL]     newArray = ArrayUtils.add(array1, (char) 0); [EOL]     assertTrue(Arrays.equals(new char[] { 1, 2, 3, 0 }, newArray)); [EOL]     assertEquals(Character.TYPE, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.add(array1, (char) 4); [EOL]     assertTrue(Arrays.equals(new char[] { 1, 2, 3, 4 }, newArray)); [EOL]     assertEquals(Character.TYPE, newArray.getClass().getComponentType()); [EOL] }
@Test [EOL] public void testAddObjectArrayDouble() { [EOL]     double[] newArray; [EOL]     newArray = ArrayUtils.add((double[]) null, 0); [EOL]     assertTrue(Arrays.equals(new double[] { 0 }, newArray)); [EOL]     assertEquals(Double.TYPE, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.add((double[]) null, 1); [EOL]     assertTrue(Arrays.equals(new double[] { 1 }, newArray)); [EOL]     assertEquals(Double.TYPE, newArray.getClass().getComponentType()); [EOL]     final double[] array1 = new double[] { 1, 2, 3 }; [EOL]     newArray = ArrayUtils.add(array1, 0); [EOL]     assertTrue(Arrays.equals(new double[] { 1, 2, 3, 0 }, newArray)); [EOL]     assertEquals(Double.TYPE, newArray.getClass().getComponentType()); [EOL]     newArray = ArrayUtils.add(array1, 4); [EOL]     assertTrue(Arrays.equals(new double[] { 1, 2, 3, 4 }, newArray)); [EOL]     assertEquals(Double.TYPE, newArray.getClass().getComponentType()); [EOL] }
@Test [EOL] public void testRemoveBooleanArray() { [EOL]     boolean[] array; [EOL]     array = ArrayUtils.remove(new boolean[] { true }, 0); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_BOOLEAN_ARRAY, array)); [EOL]     assertEquals(Boolean.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.remove(new boolean[] { true, false }, 0); [EOL]     assertTrue(Arrays.equals(new boolean[] { false }, array)); [EOL]     assertEquals(Boolean.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.remove(new boolean[] { true, false }, 1); [EOL]     assertTrue(Arrays.equals(new boolean[] { true }, array)); [EOL]     assertEquals(Boolean.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.remove(new boolean[] { true, false, true }, 1); [EOL]     assertTrue(Arrays.equals(new boolean[] { true, true }, array)); [EOL]     assertEquals(Boolean.TYPE, array.getClass().getComponentType()); [EOL]     try { [EOL]         ArrayUtils.remove(new boolean[] { true, false }, -1); [EOL]         fail("IndexOutOfBoundsException expected"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         ArrayUtils.remove(new boolean[] { true, false }, 2); [EOL]         fail("IndexOutOfBoundsException expected"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         ArrayUtils.remove((boolean[]) null, 0); [EOL]         fail("IndexOutOfBoundsException expected"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL] }
@Test [EOL] public void testRemoveBooleanArray() { [EOL]     boolean[] array; [EOL]     array = ArrayUtils.remove(new boolean[] { true }, 0); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_BOOLEAN_ARRAY, array)); [EOL]     assertEquals(Boolean.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.remove(new boolean[] { true, false }, 0); [EOL]     assertTrue(Arrays.equals(new boolean[] { false }, array)); [EOL]     assertEquals(Boolean.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.remove(new boolean[] { true, false }, 1); [EOL]     assertTrue(Arrays.equals(new boolean[] { true }, array)); [EOL]     assertEquals(Boolean.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.remove(new boolean[] { true, false, true }, 1); [EOL]     assertTrue(Arrays.equals(new boolean[] { true, true }, array)); [EOL]     assertEquals(Boolean.TYPE, array.getClass().getComponentType()); [EOL]     try { [EOL]         ArrayUtils.remove(new boolean[] { true, false }, -1); [EOL]         fail("IndexOutOfBoundsException expected"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         ArrayUtils.remove(new boolean[] { true, false }, 2); [EOL]         fail("IndexOutOfBoundsException expected"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         ArrayUtils.remove((boolean[]) null, 0); [EOL]         fail("IndexOutOfBoundsException expected"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL] }
@Test [EOL] public void testRemoveBooleanArray() { [EOL]     boolean[] array; [EOL]     array = ArrayUtils.remove(new boolean[] { true }, 0); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_BOOLEAN_ARRAY, array)); [EOL]     assertEquals(Boolean.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.remove(new boolean[] { true, false }, 0); [EOL]     assertTrue(Arrays.equals(new boolean[] { false }, array)); [EOL]     assertEquals(Boolean.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.remove(new boolean[] { true, false }, 1); [EOL]     assertTrue(Arrays.equals(new boolean[] { true }, array)); [EOL]     assertEquals(Boolean.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.remove(new boolean[] { true, false, true }, 1); [EOL]     assertTrue(Arrays.equals(new boolean[] { true, true }, array)); [EOL]     assertEquals(Boolean.TYPE, array.getClass().getComponentType()); [EOL]     try { [EOL]         ArrayUtils.remove(new boolean[] { true, false }, -1); [EOL]         fail("IndexOutOfBoundsException expected"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         ArrayUtils.remove(new boolean[] { true, false }, 2); [EOL]         fail("IndexOutOfBoundsException expected"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         ArrayUtils.remove((boolean[]) null, 0); [EOL]         fail("IndexOutOfBoundsException expected"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL] }
@Test [EOL] public void testRemoveBooleanArray() { [EOL]     boolean[] array; [EOL]     array = ArrayUtils.remove(new boolean[] { true }, 0); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_BOOLEAN_ARRAY, array)); [EOL]     assertEquals(Boolean.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.remove(new boolean[] { true, false }, 0); [EOL]     assertTrue(Arrays.equals(new boolean[] { false }, array)); [EOL]     assertEquals(Boolean.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.remove(new boolean[] { true, false }, 1); [EOL]     assertTrue(Arrays.equals(new boolean[] { true }, array)); [EOL]     assertEquals(Boolean.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.remove(new boolean[] { true, false, true }, 1); [EOL]     assertTrue(Arrays.equals(new boolean[] { true, true }, array)); [EOL]     assertEquals(Boolean.TYPE, array.getClass().getComponentType()); [EOL]     try { [EOL]         ArrayUtils.remove(new boolean[] { true, false }, -1); [EOL]         fail("IndexOutOfBoundsException expected"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         ArrayUtils.remove(new boolean[] { true, false }, 2); [EOL]         fail("IndexOutOfBoundsException expected"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         ArrayUtils.remove((boolean[]) null, 0); [EOL]         fail("IndexOutOfBoundsException expected"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL] }
@Test [EOL] public void testRemoveBooleanArray() { [EOL]     boolean[] array; [EOL]     array = ArrayUtils.remove(new boolean[] { true }, 0); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_BOOLEAN_ARRAY, array)); [EOL]     assertEquals(Boolean.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.remove(new boolean[] { true, false }, 0); [EOL]     assertTrue(Arrays.equals(new boolean[] { false }, array)); [EOL]     assertEquals(Boolean.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.remove(new boolean[] { true, false }, 1); [EOL]     assertTrue(Arrays.equals(new boolean[] { true }, array)); [EOL]     assertEquals(Boolean.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.remove(new boolean[] { true, false, true }, 1); [EOL]     assertTrue(Arrays.equals(new boolean[] { true, true }, array)); [EOL]     assertEquals(Boolean.TYPE, array.getClass().getComponentType()); [EOL]     try { [EOL]         ArrayUtils.remove(new boolean[] { true, false }, -1); [EOL]         fail("IndexOutOfBoundsException expected"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         ArrayUtils.remove(new boolean[] { true, false }, 2); [EOL]         fail("IndexOutOfBoundsException expected"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         ArrayUtils.remove((boolean[]) null, 0); [EOL]         fail("IndexOutOfBoundsException expected"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL] }
@Test [EOL] public void testRemoveBooleanArray() { [EOL]     boolean[] array; [EOL]     array = ArrayUtils.remove(new boolean[] { true }, 0); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_BOOLEAN_ARRAY, array)); [EOL]     assertEquals(Boolean.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.remove(new boolean[] { true, false }, 0); [EOL]     assertTrue(Arrays.equals(new boolean[] { false }, array)); [EOL]     assertEquals(Boolean.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.remove(new boolean[] { true, false }, 1); [EOL]     assertTrue(Arrays.equals(new boolean[] { true }, array)); [EOL]     assertEquals(Boolean.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.remove(new boolean[] { true, false, true }, 1); [EOL]     assertTrue(Arrays.equals(new boolean[] { true, true }, array)); [EOL]     assertEquals(Boolean.TYPE, array.getClass().getComponentType()); [EOL]     try { [EOL]         ArrayUtils.remove(new boolean[] { true, false }, -1); [EOL]         fail("IndexOutOfBoundsException expected"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         ArrayUtils.remove(new boolean[] { true, false }, 2); [EOL]         fail("IndexOutOfBoundsException expected"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         ArrayUtils.remove((boolean[]) null, 0); [EOL]         fail("IndexOutOfBoundsException expected"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL] }
@Test [EOL] public void testRemoveIntArray() { [EOL]     int[] array; [EOL]     array = ArrayUtils.remove(new int[] { 1 }, 0); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_INT_ARRAY, array)); [EOL]     assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.remove(new int[] { 1, 2 }, 0); [EOL]     assertTrue(Arrays.equals(new int[] { 2 }, array)); [EOL]     assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.remove(new int[] { 1, 2 }, 1); [EOL]     assertTrue(Arrays.equals(new int[] { 1 }, array)); [EOL]     assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.remove(new int[] { 1, 2, 1 }, 1); [EOL]     assertTrue(Arrays.equals(new int[] { 1, 1 }, array)); [EOL]     assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL]     try { [EOL]         ArrayUtils.remove(new int[] { 1, 2 }, -1); [EOL]         fail("IndexOutOfBoundsException expected"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         ArrayUtils.remove(new int[] { 1, 2 }, 2); [EOL]         fail("IndexOutOfBoundsException expected"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         ArrayUtils.remove((int[]) null, 0); [EOL]         fail("IndexOutOfBoundsException expected"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL] }
@Test [EOL] public void testRemoveIntArray() { [EOL]     int[] array; [EOL]     array = ArrayUtils.remove(new int[] { 1 }, 0); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_INT_ARRAY, array)); [EOL]     assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.remove(new int[] { 1, 2 }, 0); [EOL]     assertTrue(Arrays.equals(new int[] { 2 }, array)); [EOL]     assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.remove(new int[] { 1, 2 }, 1); [EOL]     assertTrue(Arrays.equals(new int[] { 1 }, array)); [EOL]     assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.remove(new int[] { 1, 2, 1 }, 1); [EOL]     assertTrue(Arrays.equals(new int[] { 1, 1 }, array)); [EOL]     assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL]     try { [EOL]         ArrayUtils.remove(new int[] { 1, 2 }, -1); [EOL]         fail("IndexOutOfBoundsException expected"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         ArrayUtils.remove(new int[] { 1, 2 }, 2); [EOL]         fail("IndexOutOfBoundsException expected"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         ArrayUtils.remove((int[]) null, 0); [EOL]         fail("IndexOutOfBoundsException expected"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL] }
@Test [EOL] public void testRemoveIntArray() { [EOL]     int[] array; [EOL]     array = ArrayUtils.remove(new int[] { 1 }, 0); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_INT_ARRAY, array)); [EOL]     assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.remove(new int[] { 1, 2 }, 0); [EOL]     assertTrue(Arrays.equals(new int[] { 2 }, array)); [EOL]     assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.remove(new int[] { 1, 2 }, 1); [EOL]     assertTrue(Arrays.equals(new int[] { 1 }, array)); [EOL]     assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.remove(new int[] { 1, 2, 1 }, 1); [EOL]     assertTrue(Arrays.equals(new int[] { 1, 1 }, array)); [EOL]     assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL]     try { [EOL]         ArrayUtils.remove(new int[] { 1, 2 }, -1); [EOL]         fail("IndexOutOfBoundsException expected"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         ArrayUtils.remove(new int[] { 1, 2 }, 2); [EOL]         fail("IndexOutOfBoundsException expected"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         ArrayUtils.remove((int[]) null, 0); [EOL]         fail("IndexOutOfBoundsException expected"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL] }
@Test [EOL] public void testRemoveIntArray() { [EOL]     int[] array; [EOL]     array = ArrayUtils.remove(new int[] { 1 }, 0); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_INT_ARRAY, array)); [EOL]     assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.remove(new int[] { 1, 2 }, 0); [EOL]     assertTrue(Arrays.equals(new int[] { 2 }, array)); [EOL]     assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.remove(new int[] { 1, 2 }, 1); [EOL]     assertTrue(Arrays.equals(new int[] { 1 }, array)); [EOL]     assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.remove(new int[] { 1, 2, 1 }, 1); [EOL]     assertTrue(Arrays.equals(new int[] { 1, 1 }, array)); [EOL]     assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL]     try { [EOL]         ArrayUtils.remove(new int[] { 1, 2 }, -1); [EOL]         fail("IndexOutOfBoundsException expected"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         ArrayUtils.remove(new int[] { 1, 2 }, 2); [EOL]         fail("IndexOutOfBoundsException expected"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         ArrayUtils.remove((int[]) null, 0); [EOL]         fail("IndexOutOfBoundsException expected"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL] }
@Test [EOL] public void testRemoveIntArray() { [EOL]     int[] array; [EOL]     array = ArrayUtils.remove(new int[] { 1 }, 0); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_INT_ARRAY, array)); [EOL]     assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.remove(new int[] { 1, 2 }, 0); [EOL]     assertTrue(Arrays.equals(new int[] { 2 }, array)); [EOL]     assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.remove(new int[] { 1, 2 }, 1); [EOL]     assertTrue(Arrays.equals(new int[] { 1 }, array)); [EOL]     assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.remove(new int[] { 1, 2, 1 }, 1); [EOL]     assertTrue(Arrays.equals(new int[] { 1, 1 }, array)); [EOL]     assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL]     try { [EOL]         ArrayUtils.remove(new int[] { 1, 2 }, -1); [EOL]         fail("IndexOutOfBoundsException expected"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         ArrayUtils.remove(new int[] { 1, 2 }, 2); [EOL]         fail("IndexOutOfBoundsException expected"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         ArrayUtils.remove((int[]) null, 0); [EOL]         fail("IndexOutOfBoundsException expected"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL] }
@Test [EOL] public void testRemoveIntArray() { [EOL]     int[] array; [EOL]     array = ArrayUtils.remove(new int[] { 1 }, 0); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_INT_ARRAY, array)); [EOL]     assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.remove(new int[] { 1, 2 }, 0); [EOL]     assertTrue(Arrays.equals(new int[] { 2 }, array)); [EOL]     assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.remove(new int[] { 1, 2 }, 1); [EOL]     assertTrue(Arrays.equals(new int[] { 1 }, array)); [EOL]     assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.remove(new int[] { 1, 2, 1 }, 1); [EOL]     assertTrue(Arrays.equals(new int[] { 1, 1 }, array)); [EOL]     assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL]     try { [EOL]         ArrayUtils.remove(new int[] { 1, 2 }, -1); [EOL]         fail("IndexOutOfBoundsException expected"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         ArrayUtils.remove(new int[] { 1, 2 }, 2); [EOL]         fail("IndexOutOfBoundsException expected"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         ArrayUtils.remove((int[]) null, 0); [EOL]         fail("IndexOutOfBoundsException expected"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL] }
@Test [EOL] @SuppressWarnings("cast") [EOL] public void testRemoveElementLongArray() { [EOL]     long[] array; [EOL]     array = ArrayUtils.removeElements((long[]) null, (long) 1); [EOL]     assertNull(array); [EOL]     array = ArrayUtils.removeElements(ArrayUtils.EMPTY_LONG_ARRAY, (long) 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_LONG_ARRAY, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new long[] { 1 }, (long) 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_LONG_ARRAY, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new long[] { 1, 2 }, (long) 1); [EOL]     assertTrue(Arrays.equals(new long[] { 2 }, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new long[] { 1, 2, 1 }, (long) 1); [EOL]     assertTrue(Arrays.equals(new long[] { 2, 1 }, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements((long[]) null, (long) 1, (long) 1); [EOL]     assertNull(array); [EOL]     array = ArrayUtils.removeElements(ArrayUtils.EMPTY_LONG_ARRAY, (long) 1, (long) 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_LONG_ARRAY, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new long[] { 1 }, (long) 1, (long) 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_LONG_ARRAY, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new long[] { 1, 2 }, (long) 1, (long) 2); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_LONG_ARRAY, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new long[] { 1, 2 }, (long) 1, (long) 1); [EOL]     assertTrue(Arrays.equals(new long[] { 2 }, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new long[] { 1, 2, 1 }, (long) 1, (long) 1); [EOL]     assertTrue(Arrays.equals(new long[] { 2 }, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new long[] { 1, 2, 1 }, (long) 1, (long) 2); [EOL]     assertTrue(Arrays.equals(new long[] { 1 }, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new long[] { 1, 2, 1 }, (long) 1, (long) 1, (long) 1, (long) 1); [EOL]     assertTrue(Arrays.equals(new long[] { 2 }, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL] }
@Test [EOL] @SuppressWarnings("cast") [EOL] public void testRemoveElementLongArray() { [EOL]     long[] array; [EOL]     array = ArrayUtils.removeElements((long[]) null, (long) 1); [EOL]     assertNull(array); [EOL]     array = ArrayUtils.removeElements(ArrayUtils.EMPTY_LONG_ARRAY, (long) 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_LONG_ARRAY, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new long[] { 1 }, (long) 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_LONG_ARRAY, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new long[] { 1, 2 }, (long) 1); [EOL]     assertTrue(Arrays.equals(new long[] { 2 }, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new long[] { 1, 2, 1 }, (long) 1); [EOL]     assertTrue(Arrays.equals(new long[] { 2, 1 }, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements((long[]) null, (long) 1, (long) 1); [EOL]     assertNull(array); [EOL]     array = ArrayUtils.removeElements(ArrayUtils.EMPTY_LONG_ARRAY, (long) 1, (long) 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_LONG_ARRAY, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new long[] { 1 }, (long) 1, (long) 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_LONG_ARRAY, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new long[] { 1, 2 }, (long) 1, (long) 2); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_LONG_ARRAY, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new long[] { 1, 2 }, (long) 1, (long) 1); [EOL]     assertTrue(Arrays.equals(new long[] { 2 }, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new long[] { 1, 2, 1 }, (long) 1, (long) 1); [EOL]     assertTrue(Arrays.equals(new long[] { 2 }, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new long[] { 1, 2, 1 }, (long) 1, (long) 2); [EOL]     assertTrue(Arrays.equals(new long[] { 1 }, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new long[] { 1, 2, 1 }, (long) 1, (long) 1, (long) 1, (long) 1); [EOL]     assertTrue(Arrays.equals(new long[] { 2 }, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL] }
@Test [EOL] @SuppressWarnings("cast") [EOL] public void testRemoveElementLongArray() { [EOL]     long[] array; [EOL]     array = ArrayUtils.removeElements((long[]) null, (long) 1); [EOL]     assertNull(array); [EOL]     array = ArrayUtils.removeElements(ArrayUtils.EMPTY_LONG_ARRAY, (long) 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_LONG_ARRAY, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new long[] { 1 }, (long) 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_LONG_ARRAY, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new long[] { 1, 2 }, (long) 1); [EOL]     assertTrue(Arrays.equals(new long[] { 2 }, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new long[] { 1, 2, 1 }, (long) 1); [EOL]     assertTrue(Arrays.equals(new long[] { 2, 1 }, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements((long[]) null, (long) 1, (long) 1); [EOL]     assertNull(array); [EOL]     array = ArrayUtils.removeElements(ArrayUtils.EMPTY_LONG_ARRAY, (long) 1, (long) 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_LONG_ARRAY, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new long[] { 1 }, (long) 1, (long) 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_LONG_ARRAY, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new long[] { 1, 2 }, (long) 1, (long) 2); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_LONG_ARRAY, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new long[] { 1, 2 }, (long) 1, (long) 1); [EOL]     assertTrue(Arrays.equals(new long[] { 2 }, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new long[] { 1, 2, 1 }, (long) 1, (long) 1); [EOL]     assertTrue(Arrays.equals(new long[] { 2 }, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new long[] { 1, 2, 1 }, (long) 1, (long) 2); [EOL]     assertTrue(Arrays.equals(new long[] { 1 }, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new long[] { 1, 2, 1 }, (long) 1, (long) 1, (long) 1, (long) 1); [EOL]     assertTrue(Arrays.equals(new long[] { 2 }, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL] }
@Test [EOL] @SuppressWarnings("cast") [EOL] public void testRemoveElementLongArray() { [EOL]     long[] array; [EOL]     array = ArrayUtils.removeElements((long[]) null, (long) 1); [EOL]     assertNull(array); [EOL]     array = ArrayUtils.removeElements(ArrayUtils.EMPTY_LONG_ARRAY, (long) 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_LONG_ARRAY, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new long[] { 1 }, (long) 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_LONG_ARRAY, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new long[] { 1, 2 }, (long) 1); [EOL]     assertTrue(Arrays.equals(new long[] { 2 }, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new long[] { 1, 2, 1 }, (long) 1); [EOL]     assertTrue(Arrays.equals(new long[] { 2, 1 }, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements((long[]) null, (long) 1, (long) 1); [EOL]     assertNull(array); [EOL]     array = ArrayUtils.removeElements(ArrayUtils.EMPTY_LONG_ARRAY, (long) 1, (long) 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_LONG_ARRAY, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new long[] { 1 }, (long) 1, (long) 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_LONG_ARRAY, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new long[] { 1, 2 }, (long) 1, (long) 2); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_LONG_ARRAY, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new long[] { 1, 2 }, (long) 1, (long) 1); [EOL]     assertTrue(Arrays.equals(new long[] { 2 }, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new long[] { 1, 2, 1 }, (long) 1, (long) 1); [EOL]     assertTrue(Arrays.equals(new long[] { 2 }, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new long[] { 1, 2, 1 }, (long) 1, (long) 2); [EOL]     assertTrue(Arrays.equals(new long[] { 1 }, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new long[] { 1, 2, 1 }, (long) 1, (long) 1, (long) 1, (long) 1); [EOL]     assertTrue(Arrays.equals(new long[] { 2 }, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL] }
@Test [EOL] @SuppressWarnings("cast") [EOL] public void testRemoveElementLongArray() { [EOL]     long[] array; [EOL]     array = ArrayUtils.removeElements((long[]) null, (long) 1); [EOL]     assertNull(array); [EOL]     array = ArrayUtils.removeElements(ArrayUtils.EMPTY_LONG_ARRAY, (long) 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_LONG_ARRAY, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new long[] { 1 }, (long) 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_LONG_ARRAY, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new long[] { 1, 2 }, (long) 1); [EOL]     assertTrue(Arrays.equals(new long[] { 2 }, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new long[] { 1, 2, 1 }, (long) 1); [EOL]     assertTrue(Arrays.equals(new long[] { 2, 1 }, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements((long[]) null, (long) 1, (long) 1); [EOL]     assertNull(array); [EOL]     array = ArrayUtils.removeElements(ArrayUtils.EMPTY_LONG_ARRAY, (long) 1, (long) 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_LONG_ARRAY, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new long[] { 1 }, (long) 1, (long) 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_LONG_ARRAY, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new long[] { 1, 2 }, (long) 1, (long) 2); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_LONG_ARRAY, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new long[] { 1, 2 }, (long) 1, (long) 1); [EOL]     assertTrue(Arrays.equals(new long[] { 2 }, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new long[] { 1, 2, 1 }, (long) 1, (long) 1); [EOL]     assertTrue(Arrays.equals(new long[] { 2 }, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new long[] { 1, 2, 1 }, (long) 1, (long) 2); [EOL]     assertTrue(Arrays.equals(new long[] { 1 }, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new long[] { 1, 2, 1 }, (long) 1, (long) 1, (long) 1, (long) 1); [EOL]     assertTrue(Arrays.equals(new long[] { 2 }, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL] }
@Test [EOL] @SuppressWarnings("cast") [EOL] public void testRemoveElementLongArray() { [EOL]     long[] array; [EOL]     array = ArrayUtils.removeElements((long[]) null, (long) 1); [EOL]     assertNull(array); [EOL]     array = ArrayUtils.removeElements(ArrayUtils.EMPTY_LONG_ARRAY, (long) 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_LONG_ARRAY, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new long[] { 1 }, (long) 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_LONG_ARRAY, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new long[] { 1, 2 }, (long) 1); [EOL]     assertTrue(Arrays.equals(new long[] { 2 }, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new long[] { 1, 2, 1 }, (long) 1); [EOL]     assertTrue(Arrays.equals(new long[] { 2, 1 }, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements((long[]) null, (long) 1, (long) 1); [EOL]     assertNull(array); [EOL]     array = ArrayUtils.removeElements(ArrayUtils.EMPTY_LONG_ARRAY, (long) 1, (long) 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_LONG_ARRAY, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new long[] { 1 }, (long) 1, (long) 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_LONG_ARRAY, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new long[] { 1, 2 }, (long) 1, (long) 2); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_LONG_ARRAY, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new long[] { 1, 2 }, (long) 1, (long) 1); [EOL]     assertTrue(Arrays.equals(new long[] { 2 }, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new long[] { 1, 2, 1 }, (long) 1, (long) 1); [EOL]     assertTrue(Arrays.equals(new long[] { 2 }, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new long[] { 1, 2, 1 }, (long) 1, (long) 2); [EOL]     assertTrue(Arrays.equals(new long[] { 1 }, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new long[] { 1, 2, 1 }, (long) 1, (long) 1, (long) 1, (long) 1); [EOL]     assertTrue(Arrays.equals(new long[] { 2 }, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL] }
@Test [EOL] @SuppressWarnings("cast") [EOL] public void testRemoveElementLongArray() { [EOL]     long[] array; [EOL]     array = ArrayUtils.removeElements((long[]) null, (long) 1); [EOL]     assertNull(array); [EOL]     array = ArrayUtils.removeElements(ArrayUtils.EMPTY_LONG_ARRAY, (long) 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_LONG_ARRAY, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new long[] { 1 }, (long) 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_LONG_ARRAY, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new long[] { 1, 2 }, (long) 1); [EOL]     assertTrue(Arrays.equals(new long[] { 2 }, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new long[] { 1, 2, 1 }, (long) 1); [EOL]     assertTrue(Arrays.equals(new long[] { 2, 1 }, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements((long[]) null, (long) 1, (long) 1); [EOL]     assertNull(array); [EOL]     array = ArrayUtils.removeElements(ArrayUtils.EMPTY_LONG_ARRAY, (long) 1, (long) 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_LONG_ARRAY, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new long[] { 1 }, (long) 1, (long) 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_LONG_ARRAY, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new long[] { 1, 2 }, (long) 1, (long) 2); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_LONG_ARRAY, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new long[] { 1, 2 }, (long) 1, (long) 1); [EOL]     assertTrue(Arrays.equals(new long[] { 2 }, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new long[] { 1, 2, 1 }, (long) 1, (long) 1); [EOL]     assertTrue(Arrays.equals(new long[] { 2 }, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new long[] { 1, 2, 1 }, (long) 1, (long) 2); [EOL]     assertTrue(Arrays.equals(new long[] { 1 }, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new long[] { 1, 2, 1 }, (long) 1, (long) 1, (long) 1, (long) 1); [EOL]     assertTrue(Arrays.equals(new long[] { 2 }, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL] }
@Test [EOL] @SuppressWarnings("cast") [EOL] public void testRemoveElementLongArray() { [EOL]     long[] array; [EOL]     array = ArrayUtils.removeElements((long[]) null, (long) 1); [EOL]     assertNull(array); [EOL]     array = ArrayUtils.removeElements(ArrayUtils.EMPTY_LONG_ARRAY, (long) 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_LONG_ARRAY, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new long[] { 1 }, (long) 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_LONG_ARRAY, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new long[] { 1, 2 }, (long) 1); [EOL]     assertTrue(Arrays.equals(new long[] { 2 }, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new long[] { 1, 2, 1 }, (long) 1); [EOL]     assertTrue(Arrays.equals(new long[] { 2, 1 }, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements((long[]) null, (long) 1, (long) 1); [EOL]     assertNull(array); [EOL]     array = ArrayUtils.removeElements(ArrayUtils.EMPTY_LONG_ARRAY, (long) 1, (long) 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_LONG_ARRAY, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new long[] { 1 }, (long) 1, (long) 1); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_LONG_ARRAY, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new long[] { 1, 2 }, (long) 1, (long) 2); [EOL]     assertTrue(Arrays.equals(ArrayUtils.EMPTY_LONG_ARRAY, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new long[] { 1, 2 }, (long) 1, (long) 1); [EOL]     assertTrue(Arrays.equals(new long[] { 2 }, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new long[] { 1, 2, 1 }, (long) 1, (long) 1); [EOL]     assertTrue(Arrays.equals(new long[] { 2 }, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new long[] { 1, 2, 1 }, (long) 1, (long) 2); [EOL]     assertTrue(Arrays.equals(new long[] { 1 }, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     array = ArrayUtils.removeElements(new long[] { 1, 2, 1 }, (long) 1, (long) 1, (long) 1, (long) 1); [EOL]     assertTrue(Arrays.equals(new long[] { 2 }, array)); [EOL]     assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL] }
@Test(expected = IndexOutOfBoundsException.class) [EOL] public void testRemoveAllNullBooleanArray() { [EOL]     ArrayUtils.removeAll((boolean[]) null, 0); [EOL] }
@Test(expected = IndexOutOfBoundsException.class) [EOL] public void testRemoveAllNullBooleanArray() { [EOL]     ArrayUtils.removeAll((boolean[]) null, 0); [EOL] }
@Test(expected = IndexOutOfBoundsException.class) [EOL] public void testRemoveAllNullBooleanArray() { [EOL]     ArrayUtils.removeAll((boolean[]) null, 0); [EOL] }
@Test(expected = IndexOutOfBoundsException.class) [EOL] public void testRemoveAllNullBooleanArray() { [EOL]     ArrayUtils.removeAll((boolean[]) null, 0); [EOL] }
@Test(expected = IndexOutOfBoundsException.class) [EOL] public void testRemoveAllNullBooleanArray() { [EOL]     ArrayUtils.removeAll((boolean[]) null, 0); [EOL] }
@Test(expected = IndexOutOfBoundsException.class) [EOL] public void testRemoveAllNullBooleanArray() { [EOL]     ArrayUtils.removeAll((boolean[]) null, 0); [EOL] }
@Test(expected = IndexOutOfBoundsException.class) [EOL] public void testRemoveAllNullBooleanArray() { [EOL]     ArrayUtils.removeAll((boolean[]) null, 0); [EOL] }
@Test(expected = IndexOutOfBoundsException.class) [EOL] public void testRemoveAllNullBooleanArray() { [EOL]     ArrayUtils.removeAll((boolean[]) null, 0); [EOL] }
@Test(expected = IndexOutOfBoundsException.class) [EOL] public void testRemoveAllNullBooleanArray() { [EOL]     ArrayUtils.removeAll((boolean[]) null, 0); [EOL] }
@Test [EOL] public void testGetPrimitiveArrayComponentType() throws Exception { [EOL]     Assert.assertEquals(boolean.class, TypeUtils.getArrayComponentType(boolean[].class)); [EOL]     Assert.assertEquals(byte.class, TypeUtils.getArrayComponentType(byte[].class)); [EOL]     Assert.assertEquals(short.class, TypeUtils.getArrayComponentType(short[].class)); [EOL]     Assert.assertEquals(int.class, TypeUtils.getArrayComponentType(int[].class)); [EOL]     Assert.assertEquals(char.class, TypeUtils.getArrayComponentType(char[].class)); [EOL]     Assert.assertEquals(long.class, TypeUtils.getArrayComponentType(long[].class)); [EOL]     Assert.assertEquals(float.class, TypeUtils.getArrayComponentType(float[].class)); [EOL]     Assert.assertEquals(double.class, TypeUtils.getArrayComponentType(double[].class)); [EOL]     Assert.assertNull(TypeUtils.getArrayComponentType(boolean.class)); [EOL]     Assert.assertNull(TypeUtils.getArrayComponentType(byte.class)); [EOL]     Assert.assertNull(TypeUtils.getArrayComponentType(short.class)); [EOL]     Assert.assertNull(TypeUtils.getArrayComponentType(int.class)); [EOL]     Assert.assertNull(TypeUtils.getArrayComponentType(char.class)); [EOL]     Assert.assertNull(TypeUtils.getArrayComponentType(long.class)); [EOL]     Assert.assertNull(TypeUtils.getArrayComponentType(float.class)); [EOL]     Assert.assertNull(TypeUtils.getArrayComponentType(double.class)); [EOL] }
@Test [EOL] public void testGetPrimitiveArrayComponentType() throws Exception { [EOL]     Assert.assertEquals(boolean.class, TypeUtils.getArrayComponentType(boolean[].class)); [EOL]     Assert.assertEquals(byte.class, TypeUtils.getArrayComponentType(byte[].class)); [EOL]     Assert.assertEquals(short.class, TypeUtils.getArrayComponentType(short[].class)); [EOL]     Assert.assertEquals(int.class, TypeUtils.getArrayComponentType(int[].class)); [EOL]     Assert.assertEquals(char.class, TypeUtils.getArrayComponentType(char[].class)); [EOL]     Assert.assertEquals(long.class, TypeUtils.getArrayComponentType(long[].class)); [EOL]     Assert.assertEquals(float.class, TypeUtils.getArrayComponentType(float[].class)); [EOL]     Assert.assertEquals(double.class, TypeUtils.getArrayComponentType(double[].class)); [EOL]     Assert.assertNull(TypeUtils.getArrayComponentType(boolean.class)); [EOL]     Assert.assertNull(TypeUtils.getArrayComponentType(byte.class)); [EOL]     Assert.assertNull(TypeUtils.getArrayComponentType(short.class)); [EOL]     Assert.assertNull(TypeUtils.getArrayComponentType(int.class)); [EOL]     Assert.assertNull(TypeUtils.getArrayComponentType(char.class)); [EOL]     Assert.assertNull(TypeUtils.getArrayComponentType(long.class)); [EOL]     Assert.assertNull(TypeUtils.getArrayComponentType(float.class)); [EOL]     Assert.assertNull(TypeUtils.getArrayComponentType(double.class)); [EOL] }
@Test [EOL] public void testGetPrimitiveArrayComponentType() throws Exception { [EOL]     Assert.assertEquals(boolean.class, TypeUtils.getArrayComponentType(boolean[].class)); [EOL]     Assert.assertEquals(byte.class, TypeUtils.getArrayComponentType(byte[].class)); [EOL]     Assert.assertEquals(short.class, TypeUtils.getArrayComponentType(short[].class)); [EOL]     Assert.assertEquals(int.class, TypeUtils.getArrayComponentType(int[].class)); [EOL]     Assert.assertEquals(char.class, TypeUtils.getArrayComponentType(char[].class)); [EOL]     Assert.assertEquals(long.class, TypeUtils.getArrayComponentType(long[].class)); [EOL]     Assert.assertEquals(float.class, TypeUtils.getArrayComponentType(float[].class)); [EOL]     Assert.assertEquals(double.class, TypeUtils.getArrayComponentType(double[].class)); [EOL]     Assert.assertNull(TypeUtils.getArrayComponentType(boolean.class)); [EOL]     Assert.assertNull(TypeUtils.getArrayComponentType(byte.class)); [EOL]     Assert.assertNull(TypeUtils.getArrayComponentType(short.class)); [EOL]     Assert.assertNull(TypeUtils.getArrayComponentType(int.class)); [EOL]     Assert.assertNull(TypeUtils.getArrayComponentType(char.class)); [EOL]     Assert.assertNull(TypeUtils.getArrayComponentType(long.class)); [EOL]     Assert.assertNull(TypeUtils.getArrayComponentType(float.class)); [EOL]     Assert.assertNull(TypeUtils.getArrayComponentType(double.class)); [EOL] }
@Test [EOL] public void testGetPrimitiveArrayComponentType() throws Exception { [EOL]     Assert.assertEquals(boolean.class, TypeUtils.getArrayComponentType(boolean[].class)); [EOL]     Assert.assertEquals(byte.class, TypeUtils.getArrayComponentType(byte[].class)); [EOL]     Assert.assertEquals(short.class, TypeUtils.getArrayComponentType(short[].class)); [EOL]     Assert.assertEquals(int.class, TypeUtils.getArrayComponentType(int[].class)); [EOL]     Assert.assertEquals(char.class, TypeUtils.getArrayComponentType(char[].class)); [EOL]     Assert.assertEquals(long.class, TypeUtils.getArrayComponentType(long[].class)); [EOL]     Assert.assertEquals(float.class, TypeUtils.getArrayComponentType(float[].class)); [EOL]     Assert.assertEquals(double.class, TypeUtils.getArrayComponentType(double[].class)); [EOL]     Assert.assertNull(TypeUtils.getArrayComponentType(boolean.class)); [EOL]     Assert.assertNull(TypeUtils.getArrayComponentType(byte.class)); [EOL]     Assert.assertNull(TypeUtils.getArrayComponentType(short.class)); [EOL]     Assert.assertNull(TypeUtils.getArrayComponentType(int.class)); [EOL]     Assert.assertNull(TypeUtils.getArrayComponentType(char.class)); [EOL]     Assert.assertNull(TypeUtils.getArrayComponentType(long.class)); [EOL]     Assert.assertNull(TypeUtils.getArrayComponentType(float.class)); [EOL]     Assert.assertNull(TypeUtils.getArrayComponentType(double.class)); [EOL] }
@Test [EOL] public void testFormattedExceptionMessageNull() { [EOL]     exceptionContext = new DefaultExceptionContext(); [EOL]     exceptionContext.getFormattedExceptionMessage(null); [EOL] }
@Test [EOL] public void testFormattedExceptionMessageNull() { [EOL]     exceptionContext = new DefaultExceptionContext(); [EOL]     exceptionContext.getFormattedExceptionMessage(null); [EOL] }
@Test [EOL] public void testFormattedExceptionMessageNull() { [EOL]     exceptionContext = new DefaultExceptionContext(); [EOL]     exceptionContext.getFormattedExceptionMessage(null); [EOL] }
@Test [EOL] public void testFormattedExceptionMessageNull() { [EOL]     exceptionContext = new DefaultExceptionContext(); [EOL]     exceptionContext.getFormattedExceptionMessage(null); [EOL] }
@Test [EOL] public void testFormattedExceptionMessageNull() { [EOL]     exceptionContext = new DefaultExceptionContext(); [EOL]     exceptionContext.getFormattedExceptionMessage(null); [EOL] }
@Test [EOL] public void testCapacity() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     assertEquals(sb.buffer.length, sb.capacity()); [EOL]     sb.append("HelloWorldHelloWorldHelloWorldHelloWorld"); [EOL]     assertEquals(sb.buffer.length, sb.capacity()); [EOL] }
@Test [EOL] public void testCapacity() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     assertEquals(sb.buffer.length, sb.capacity()); [EOL]     sb.append("HelloWorldHelloWorldHelloWorldHelloWorld"); [EOL]     assertEquals(sb.buffer.length, sb.capacity()); [EOL] }
@Test [EOL] public void testCapacity() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     assertEquals(sb.buffer.length, sb.capacity()); [EOL]     sb.append("HelloWorldHelloWorldHelloWorldHelloWorld"); [EOL]     assertEquals(sb.buffer.length, sb.capacity()); [EOL] }
@Test [EOL] public void testCapacity() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     assertEquals(sb.buffer.length, sb.capacity()); [EOL]     sb.append("HelloWorldHelloWorldHelloWorldHelloWorld"); [EOL]     assertEquals(sb.buffer.length, sb.capacity()); [EOL] }
@Test [EOL] public void testReplaceFirst_char_char() { [EOL]     final StrBuilder sb = new StrBuilder("abcbccba"); [EOL]     sb.replaceFirst('x', 'y'); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.replaceFirst('a', 'd'); [EOL]     assertEquals("dbcbccba", sb.toString()); [EOL]     sb.replaceFirst('b', 'e'); [EOL]     assertEquals("decbccba", sb.toString()); [EOL]     sb.replaceFirst('c', 'f'); [EOL]     assertEquals("defbccba", sb.toString()); [EOL]     sb.replaceFirst('d', 'd'); [EOL]     assertEquals("defbccba", sb.toString()); [EOL] }
@Test [EOL] public void testReplaceFirst_char_char() { [EOL]     final StrBuilder sb = new StrBuilder("abcbccba"); [EOL]     sb.replaceFirst('x', 'y'); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.replaceFirst('a', 'd'); [EOL]     assertEquals("dbcbccba", sb.toString()); [EOL]     sb.replaceFirst('b', 'e'); [EOL]     assertEquals("decbccba", sb.toString()); [EOL]     sb.replaceFirst('c', 'f'); [EOL]     assertEquals("defbccba", sb.toString()); [EOL]     sb.replaceFirst('d', 'd'); [EOL]     assertEquals("defbccba", sb.toString()); [EOL] }
@Test [EOL] public void testReplaceFirst_char_char() { [EOL]     final StrBuilder sb = new StrBuilder("abcbccba"); [EOL]     sb.replaceFirst('x', 'y'); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.replaceFirst('a', 'd'); [EOL]     assertEquals("dbcbccba", sb.toString()); [EOL]     sb.replaceFirst('b', 'e'); [EOL]     assertEquals("decbccba", sb.toString()); [EOL]     sb.replaceFirst('c', 'f'); [EOL]     assertEquals("defbccba", sb.toString()); [EOL]     sb.replaceFirst('d', 'd'); [EOL]     assertEquals("defbccba", sb.toString()); [EOL] }
@Test [EOL] public void testCapacity() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     assertEquals(sb.buffer.length, sb.capacity()); [EOL]     sb.append("HelloWorldHelloWorldHelloWorldHelloWorld"); [EOL]     assertEquals(sb.buffer.length, sb.capacity()); [EOL] }
@Test [EOL] public void testCapacity() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     assertEquals(sb.buffer.length, sb.capacity()); [EOL]     sb.append("HelloWorldHelloWorldHelloWorldHelloWorld"); [EOL]     assertEquals(sb.buffer.length, sb.capacity()); [EOL] }
@Test [EOL] public void testCapacity() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     assertEquals(sb.buffer.length, sb.capacity()); [EOL]     sb.append("HelloWorldHelloWorldHelloWorldHelloWorld"); [EOL]     assertEquals(sb.buffer.length, sb.capacity()); [EOL] }
@Test [EOL] public void testCapacity() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     assertEquals(sb.buffer.length, sb.capacity()); [EOL]     sb.append("HelloWorldHelloWorldHelloWorldHelloWorld"); [EOL]     assertEquals(sb.buffer.length, sb.capacity()); [EOL] }
@Test [EOL] public void testCapacity() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     assertEquals(sb.buffer.length, sb.capacity()); [EOL]     sb.append("HelloWorldHelloWorldHelloWorldHelloWorld"); [EOL]     assertEquals(sb.buffer.length, sb.capacity()); [EOL] }
@Test [EOL] public void testCharAt() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     try { [EOL]         sb.charAt(0); [EOL]         fail("charAt(0) expected IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.charAt(-1); [EOL]         fail("charAt(-1) expected IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.append("foo"); [EOL]     assertEquals('f', sb.charAt(0)); [EOL]     assertEquals('o', sb.charAt(1)); [EOL]     assertEquals('o', sb.charAt(2)); [EOL]     try { [EOL]         sb.charAt(-1); [EOL]         fail("charAt(-1) expected IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.charAt(3); [EOL]         fail("charAt(3) expected IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL] }
@Test [EOL] public void testDeleteCharAt() { [EOL]     final StrBuilder sb = new StrBuilder("abc"); [EOL]     sb.deleteCharAt(0); [EOL]     assertEquals("bc", sb.toString()); [EOL]     try { [EOL]         sb.deleteCharAt(1000); [EOL]         fail("Expected IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL] }
@Test [EOL] public void testDeleteCharAt() { [EOL]     final StrBuilder sb = new StrBuilder("abc"); [EOL]     sb.deleteCharAt(0); [EOL]     assertEquals("bc", sb.toString()); [EOL]     try { [EOL]         sb.deleteCharAt(1000); [EOL]         fail("Expected IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL] }
@Test [EOL] public void testToCharArrayIntInt() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     assertEquals(ArrayUtils.EMPTY_CHAR_ARRAY, sb.toCharArray(0, 0)); [EOL]     sb.append("junit"); [EOL]     char[] a = sb.toCharArray(0, 20); [EOL]     assertEquals("toCharArray(int,int) result incorrect length", 5, a.length); [EOL]     assertTrue("toCharArray(int,int) result does not match", Arrays.equals("junit".toCharArray(), a)); [EOL]     a = sb.toCharArray(0, 4); [EOL]     assertEquals("toCharArray(int,int) result incorrect length", 4, a.length); [EOL]     assertTrue("toCharArray(int,int) result does not match", Arrays.equals("juni".toCharArray(), a)); [EOL]     a = sb.toCharArray(0, 4); [EOL]     assertEquals("toCharArray(int,int) result incorrect length", 4, a.length); [EOL]     assertTrue("toCharArray(int,int) result does not match", Arrays.equals("juni".toCharArray(), a)); [EOL]     a = sb.toCharArray(0, 1); [EOL]     assertNotNull("toCharArray(int,int) result is null", a); [EOL]     try { [EOL]         sb.toCharArray(-1, 5); [EOL]         fail("no string index out of bound on -1"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.toCharArray(6, 5); [EOL]         fail("no string index out of bound on -1"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL] }
@Test [EOL] public void testToCharArrayIntInt() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     assertEquals(ArrayUtils.EMPTY_CHAR_ARRAY, sb.toCharArray(0, 0)); [EOL]     sb.append("junit"); [EOL]     char[] a = sb.toCharArray(0, 20); [EOL]     assertEquals("toCharArray(int,int) result incorrect length", 5, a.length); [EOL]     assertTrue("toCharArray(int,int) result does not match", Arrays.equals("junit".toCharArray(), a)); [EOL]     a = sb.toCharArray(0, 4); [EOL]     assertEquals("toCharArray(int,int) result incorrect length", 4, a.length); [EOL]     assertTrue("toCharArray(int,int) result does not match", Arrays.equals("juni".toCharArray(), a)); [EOL]     a = sb.toCharArray(0, 4); [EOL]     assertEquals("toCharArray(int,int) result incorrect length", 4, a.length); [EOL]     assertTrue("toCharArray(int,int) result does not match", Arrays.equals("juni".toCharArray(), a)); [EOL]     a = sb.toCharArray(0, 1); [EOL]     assertNotNull("toCharArray(int,int) result is null", a); [EOL]     try { [EOL]         sb.toCharArray(-1, 5); [EOL]         fail("no string index out of bound on -1"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.toCharArray(6, 5); [EOL]         fail("no string index out of bound on -1"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL] }
@Test [EOL] public void testToCharArrayIntInt() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     assertEquals(ArrayUtils.EMPTY_CHAR_ARRAY, sb.toCharArray(0, 0)); [EOL]     sb.append("junit"); [EOL]     char[] a = sb.toCharArray(0, 20); [EOL]     assertEquals("toCharArray(int,int) result incorrect length", 5, a.length); [EOL]     assertTrue("toCharArray(int,int) result does not match", Arrays.equals("junit".toCharArray(), a)); [EOL]     a = sb.toCharArray(0, 4); [EOL]     assertEquals("toCharArray(int,int) result incorrect length", 4, a.length); [EOL]     assertTrue("toCharArray(int,int) result does not match", Arrays.equals("juni".toCharArray(), a)); [EOL]     a = sb.toCharArray(0, 4); [EOL]     assertEquals("toCharArray(int,int) result incorrect length", 4, a.length); [EOL]     assertTrue("toCharArray(int,int) result does not match", Arrays.equals("juni".toCharArray(), a)); [EOL]     a = sb.toCharArray(0, 1); [EOL]     assertNotNull("toCharArray(int,int) result is null", a); [EOL]     try { [EOL]         sb.toCharArray(-1, 5); [EOL]         fail("no string index out of bound on -1"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.toCharArray(6, 5); [EOL]         fail("no string index out of bound on -1"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL] }
@Test [EOL] public void testCapacity() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     assertEquals(sb.buffer.length, sb.capacity()); [EOL]     sb.append("HelloWorldHelloWorldHelloWorldHelloWorld"); [EOL]     assertEquals(sb.buffer.length, sb.capacity()); [EOL] }
@Test [EOL] public void testCapacity() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     assertEquals(sb.buffer.length, sb.capacity()); [EOL]     sb.append("HelloWorldHelloWorldHelloWorldHelloWorld"); [EOL]     assertEquals(sb.buffer.length, sb.capacity()); [EOL] }
@Test [EOL] public void testCapacity() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     assertEquals(sb.buffer.length, sb.capacity()); [EOL]     sb.append("HelloWorldHelloWorldHelloWorldHelloWorld"); [EOL]     assertEquals(sb.buffer.length, sb.capacity()); [EOL] }
@Test [EOL] public void testAppendln_StringBuilder() { [EOL]     final int[] count = new int[2]; [EOL]     final StrBuilder sb = new StrBuilder() { [EOL]  [EOL]         @Override [EOL]         public StrBuilder append(final StringBuilder str) { [EOL]             count[0]++; [EOL]             return super.append(str); [EOL]         } [EOL]  [EOL]         @Override [EOL]         public StrBuilder appendNewLine() { [EOL]             count[1]++; [EOL]             return super.appendNewLine(); [EOL]         } [EOL]     }; [EOL]     sb.appendln(new StringBuilder("foo")); [EOL]     assertEquals("foo" + SEP, sb.toString()); [EOL]     assertEquals(1, count[0]); [EOL]     assertEquals(1, count[1]); [EOL] }
@Test [EOL] public void testAppendln_StringBuilder() { [EOL]     final int[] count = new int[2]; [EOL]     final StrBuilder sb = new StrBuilder() { [EOL]  [EOL]         @Override [EOL]         public StrBuilder append(final StringBuilder str) { [EOL]             count[0]++; [EOL]             return super.append(str); [EOL]         } [EOL]  [EOL]         @Override [EOL]         public StrBuilder appendNewLine() { [EOL]             count[1]++; [EOL]             return super.appendNewLine(); [EOL]         } [EOL]     }; [EOL]     sb.appendln(new StringBuilder("foo")); [EOL]     assertEquals("foo" + SEP, sb.toString()); [EOL]     assertEquals(1, count[0]); [EOL]     assertEquals(1, count[1]); [EOL] }
@Test [EOL] public void testAppendln_StringBuilder() { [EOL]     final int[] count = new int[2]; [EOL]     final StrBuilder sb = new StrBuilder() { [EOL]  [EOL]         @Override [EOL]         public StrBuilder append(final StringBuilder str) { [EOL]             count[0]++; [EOL]             return super.append(str); [EOL]         } [EOL]  [EOL]         @Override [EOL]         public StrBuilder appendNewLine() { [EOL]             count[1]++; [EOL]             return super.appendNewLine(); [EOL]         } [EOL]     }; [EOL]     sb.appendln(new StringBuilder("foo")); [EOL]     assertEquals("foo" + SEP, sb.toString()); [EOL]     assertEquals(1, count[0]); [EOL]     assertEquals(1, count[1]); [EOL] }
@Test [EOL] public void testAppend_StringBuilder_int_int() { [EOL]     StrBuilder sb = new StrBuilder(); [EOL]     sb.setNullText("NULL").append((String) null, 0, 1); [EOL]     assertEquals("NULL", sb.toString()); [EOL]     sb = new StrBuilder(); [EOL]     sb.append(new StringBuilder("foo"), 0, 3); [EOL]     assertEquals("foo", sb.toString()); [EOL]     try { [EOL]         sb.append(new StringBuilder("bar"), -1, 1); [EOL]         fail("append(StringBuilder, -1,) expected IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.append(new StringBuilder("bar"), 3, 1); [EOL]         fail("append(StringBuilder, 3,) expected IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.append(new StringBuilder("bar"), 1, -1); [EOL]         fail("append(StringBuilder,, -1) expected IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.append(new StringBuilder("bar"), 1, 3); [EOL]         fail("append(StringBuilder, 1, 3) expected IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.append(new StringBuilder("bar"), -1, 3); [EOL]         fail("append(StringBuilder, -1, 3) expected IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.append(new StringBuilder("bar"), 4, 0); [EOL]         fail("append(StringBuilder, 4, 0) expected IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.append(new StringBuilder("bar"), 3, 0); [EOL]     assertEquals("foo", sb.toString()); [EOL]     sb.append(new StringBuilder("abcbardef"), 3, 3); [EOL]     assertEquals("foobar", sb.toString()); [EOL]     sb.append(new StringBuilder("abcbardef"), 4, 3); [EOL]     assertEquals("foobarard", sb.toString()); [EOL] }
@Test [EOL] public void testAppend_StringBuilder_int_int() { [EOL]     StrBuilder sb = new StrBuilder(); [EOL]     sb.setNullText("NULL").append((String) null, 0, 1); [EOL]     assertEquals("NULL", sb.toString()); [EOL]     sb = new StrBuilder(); [EOL]     sb.append(new StringBuilder("foo"), 0, 3); [EOL]     assertEquals("foo", sb.toString()); [EOL]     try { [EOL]         sb.append(new StringBuilder("bar"), -1, 1); [EOL]         fail("append(StringBuilder, -1,) expected IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.append(new StringBuilder("bar"), 3, 1); [EOL]         fail("append(StringBuilder, 3,) expected IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.append(new StringBuilder("bar"), 1, -1); [EOL]         fail("append(StringBuilder,, -1) expected IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.append(new StringBuilder("bar"), 1, 3); [EOL]         fail("append(StringBuilder, 1, 3) expected IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.append(new StringBuilder("bar"), -1, 3); [EOL]         fail("append(StringBuilder, -1, 3) expected IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.append(new StringBuilder("bar"), 4, 0); [EOL]         fail("append(StringBuilder, 4, 0) expected IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.append(new StringBuilder("bar"), 3, 0); [EOL]     assertEquals("foo", sb.toString()); [EOL]     sb.append(new StringBuilder("abcbardef"), 3, 3); [EOL]     assertEquals("foobar", sb.toString()); [EOL]     sb.append(new StringBuilder("abcbardef"), 4, 3); [EOL]     assertEquals("foobarard", sb.toString()); [EOL] }
@Test [EOL] public void testAppend_StringBuilder_int_int() { [EOL]     StrBuilder sb = new StrBuilder(); [EOL]     sb.setNullText("NULL").append((String) null, 0, 1); [EOL]     assertEquals("NULL", sb.toString()); [EOL]     sb = new StrBuilder(); [EOL]     sb.append(new StringBuilder("foo"), 0, 3); [EOL]     assertEquals("foo", sb.toString()); [EOL]     try { [EOL]         sb.append(new StringBuilder("bar"), -1, 1); [EOL]         fail("append(StringBuilder, -1,) expected IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.append(new StringBuilder("bar"), 3, 1); [EOL]         fail("append(StringBuilder, 3,) expected IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.append(new StringBuilder("bar"), 1, -1); [EOL]         fail("append(StringBuilder,, -1) expected IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.append(new StringBuilder("bar"), 1, 3); [EOL]         fail("append(StringBuilder, 1, 3) expected IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.append(new StringBuilder("bar"), -1, 3); [EOL]         fail("append(StringBuilder, -1, 3) expected IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.append(new StringBuilder("bar"), 4, 0); [EOL]         fail("append(StringBuilder, 4, 0) expected IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb.append(new StringBuilder("bar"), 3, 0); [EOL]     assertEquals("foo", sb.toString()); [EOL]     sb.append(new StringBuilder("abcbardef"), 3, 3); [EOL]     assertEquals("foobar", sb.toString()); [EOL]     sb.append(new StringBuilder("abcbardef"), 4, 3); [EOL]     assertEquals("foobarard", sb.toString()); [EOL] }
@Test [EOL] public void testAppend_StrBuilder() { [EOL]     StrBuilder sb = new StrBuilder(); [EOL]     sb.setNullText("NULL").append((StrBuilder) null); [EOL]     assertEquals("NULL", sb.toString()); [EOL]     sb = new StrBuilder(); [EOL]     sb.append(new StrBuilder("foo")); [EOL]     assertEquals("foo", sb.toString()); [EOL]     sb.append(new StrBuilder("")); [EOL]     assertEquals("foo", sb.toString()); [EOL]     sb.append(new StrBuilder("bar")); [EOL]     assertEquals("foobar", sb.toString()); [EOL] }
@Test [EOL] public void testAppend_StrBuilder() { [EOL]     StrBuilder sb = new StrBuilder(); [EOL]     sb.setNullText("NULL").append((StrBuilder) null); [EOL]     assertEquals("NULL", sb.toString()); [EOL]     sb = new StrBuilder(); [EOL]     sb.append(new StrBuilder("foo")); [EOL]     assertEquals("foo", sb.toString()); [EOL]     sb.append(new StrBuilder("")); [EOL]     assertEquals("foo", sb.toString()); [EOL]     sb.append(new StrBuilder("bar")); [EOL]     assertEquals("foobar", sb.toString()); [EOL] }
@Test [EOL] public void testAppend_StrBuilder() { [EOL]     StrBuilder sb = new StrBuilder(); [EOL]     sb.setNullText("NULL").append((StrBuilder) null); [EOL]     assertEquals("NULL", sb.toString()); [EOL]     sb = new StrBuilder(); [EOL]     sb.append(new StrBuilder("foo")); [EOL]     assertEquals("foo", sb.toString()); [EOL]     sb.append(new StrBuilder("")); [EOL]     assertEquals("foo", sb.toString()); [EOL]     sb.append(new StrBuilder("bar")); [EOL]     assertEquals("foobar", sb.toString()); [EOL] }
@Test [EOL] public void testAppendln_Object() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     sb.appendln((Object) null); [EOL]     assertEquals("" + SEP, sb.toString()); [EOL]     sb.appendln(FOO); [EOL]     assertEquals(SEP + "foo" + SEP, sb.toString()); [EOL]     sb.appendln(Integer.valueOf(6)); [EOL]     assertEquals(SEP + "foo" + SEP + "6" + SEP, sb.toString()); [EOL] }
@Test [EOL] public void testAppendln_Object() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     sb.appendln((Object) null); [EOL]     assertEquals("" + SEP, sb.toString()); [EOL]     sb.appendln(FOO); [EOL]     assertEquals(SEP + "foo" + SEP, sb.toString()); [EOL]     sb.appendln(Integer.valueOf(6)); [EOL]     assertEquals(SEP + "foo" + SEP + "6" + SEP, sb.toString()); [EOL] }
@Test [EOL] public void testAppendln_StringBuilder() { [EOL]     final int[] count = new int[2]; [EOL]     final StrBuilder sb = new StrBuilder() { [EOL]  [EOL]         @Override [EOL]         public StrBuilder append(final StringBuilder str) { [EOL]             count[0]++; [EOL]             return super.append(str); [EOL]         } [EOL]  [EOL]         @Override [EOL]         public StrBuilder appendNewLine() { [EOL]             count[1]++; [EOL]             return super.appendNewLine(); [EOL]         } [EOL]     }; [EOL]     sb.appendln(new StringBuilder("foo")); [EOL]     assertEquals("foo" + SEP, sb.toString()); [EOL]     assertEquals(1, count[0]); [EOL]     assertEquals(1, count[1]); [EOL] }
@Test [EOL] public void testAppendln_StringBuilder() { [EOL]     final int[] count = new int[2]; [EOL]     final StrBuilder sb = new StrBuilder() { [EOL]  [EOL]         @Override [EOL]         public StrBuilder append(final StringBuilder str) { [EOL]             count[0]++; [EOL]             return super.append(str); [EOL]         } [EOL]  [EOL]         @Override [EOL]         public StrBuilder appendNewLine() { [EOL]             count[1]++; [EOL]             return super.appendNewLine(); [EOL]         } [EOL]     }; [EOL]     sb.appendln(new StringBuilder("foo")); [EOL]     assertEquals("foo" + SEP, sb.toString()); [EOL]     assertEquals(1, count[0]); [EOL]     assertEquals(1, count[1]); [EOL] }
@Test [EOL] public void testAppendln_StringBuilder() { [EOL]     final int[] count = new int[2]; [EOL]     final StrBuilder sb = new StrBuilder() { [EOL]  [EOL]         @Override [EOL]         public StrBuilder append(final StringBuilder str) { [EOL]             count[0]++; [EOL]             return super.append(str); [EOL]         } [EOL]  [EOL]         @Override [EOL]         public StrBuilder appendNewLine() { [EOL]             count[1]++; [EOL]             return super.appendNewLine(); [EOL]         } [EOL]     }; [EOL]     sb.appendln(new StringBuilder("foo")); [EOL]     assertEquals("foo" + SEP, sb.toString()); [EOL]     assertEquals(1, count[0]); [EOL]     assertEquals(1, count[1]); [EOL] }
@Test [EOL] public void testAppendln_StrBuilder() { [EOL]     final int[] count = new int[2]; [EOL]     final StrBuilder sb = new StrBuilder() { [EOL]  [EOL]         @Override [EOL]         public StrBuilder append(final StrBuilder str) { [EOL]             count[0]++; [EOL]             return super.append(str); [EOL]         } [EOL]  [EOL]         @Override [EOL]         public StrBuilder appendNewLine() { [EOL]             count[1]++; [EOL]             return super.appendNewLine(); [EOL]         } [EOL]     }; [EOL]     sb.appendln(new StrBuilder("foo")); [EOL]     assertEquals("foo" + SEP, sb.toString()); [EOL]     assertEquals(1, count[0]); [EOL]     assertEquals(1, count[1]); [EOL] }
@Test [EOL] public void testAppendln_StrBuilder() { [EOL]     final int[] count = new int[2]; [EOL]     final StrBuilder sb = new StrBuilder() { [EOL]  [EOL]         @Override [EOL]         public StrBuilder append(final StrBuilder str) { [EOL]             count[0]++; [EOL]             return super.append(str); [EOL]         } [EOL]  [EOL]         @Override [EOL]         public StrBuilder appendNewLine() { [EOL]             count[1]++; [EOL]             return super.appendNewLine(); [EOL]         } [EOL]     }; [EOL]     sb.appendln(new StrBuilder("foo")); [EOL]     assertEquals("foo" + SEP, sb.toString()); [EOL]     assertEquals(1, count[0]); [EOL]     assertEquals(1, count[1]); [EOL] }
@Test [EOL] public void testAppendln_CharArray_int_int() { [EOL]     final int[] count = new int[2]; [EOL]     final StrBuilder sb = new StrBuilder() { [EOL]  [EOL]         @Override [EOL]         public StrBuilder append(final char[] str, final int startIndex, final int length) { [EOL]             count[0]++; [EOL]             return super.append(str, startIndex, length); [EOL]         } [EOL]  [EOL]         @Override [EOL]         public StrBuilder appendNewLine() { [EOL]             count[1]++; [EOL]             return super.appendNewLine(); [EOL]         } [EOL]     }; [EOL]     sb.appendln("foo".toCharArray(), 0, 3); [EOL]     assertEquals("foo" + SEP, sb.toString()); [EOL]     assertEquals(1, count[0]); [EOL]     assertEquals(1, count[1]); [EOL] }
@Test [EOL] public void testAppendln_CharArray_int_int() { [EOL]     final int[] count = new int[2]; [EOL]     final StrBuilder sb = new StrBuilder() { [EOL]  [EOL]         @Override [EOL]         public StrBuilder append(final char[] str, final int startIndex, final int length) { [EOL]             count[0]++; [EOL]             return super.append(str, startIndex, length); [EOL]         } [EOL]  [EOL]         @Override [EOL]         public StrBuilder appendNewLine() { [EOL]             count[1]++; [EOL]             return super.appendNewLine(); [EOL]         } [EOL]     }; [EOL]     sb.appendln("foo".toCharArray(), 0, 3); [EOL]     assertEquals("foo" + SEP, sb.toString()); [EOL]     assertEquals(1, count[0]); [EOL]     assertEquals(1, count[1]); [EOL] }
@Test [EOL] public void testAppendln_CharArray_int_int() { [EOL]     final int[] count = new int[2]; [EOL]     final StrBuilder sb = new StrBuilder() { [EOL]  [EOL]         @Override [EOL]         public StrBuilder append(final char[] str, final int startIndex, final int length) { [EOL]             count[0]++; [EOL]             return super.append(str, startIndex, length); [EOL]         } [EOL]  [EOL]         @Override [EOL]         public StrBuilder appendNewLine() { [EOL]             count[1]++; [EOL]             return super.appendNewLine(); [EOL]         } [EOL]     }; [EOL]     sb.appendln("foo".toCharArray(), 0, 3); [EOL]     assertEquals("foo" + SEP, sb.toString()); [EOL]     assertEquals(1, count[0]); [EOL]     assertEquals(1, count[1]); [EOL] }
@Test [EOL] public void testAppendln_CharArray_int_int() { [EOL]     final int[] count = new int[2]; [EOL]     final StrBuilder sb = new StrBuilder() { [EOL]  [EOL]         @Override [EOL]         public StrBuilder append(final char[] str, final int startIndex, final int length) { [EOL]             count[0]++; [EOL]             return super.append(str, startIndex, length); [EOL]         } [EOL]  [EOL]         @Override [EOL]         public StrBuilder appendNewLine() { [EOL]             count[1]++; [EOL]             return super.appendNewLine(); [EOL]         } [EOL]     }; [EOL]     sb.appendln("foo".toCharArray(), 0, 3); [EOL]     assertEquals("foo" + SEP, sb.toString()); [EOL]     assertEquals(1, count[0]); [EOL]     assertEquals(1, count[1]); [EOL] }
@Test [EOL] public void testAppendln_PrimitiveNumber() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     sb.appendln(0); [EOL]     assertEquals("0" + SEP, sb.toString()); [EOL]     sb.clear(); [EOL]     sb.appendln(1L); [EOL]     assertEquals("1" + SEP, sb.toString()); [EOL]     sb.clear(); [EOL]     sb.appendln(2.3f); [EOL]     assertEquals("2.3" + SEP, sb.toString()); [EOL]     sb.clear(); [EOL]     sb.appendln(4.5d); [EOL]     assertEquals("4.5" + SEP, sb.toString()); [EOL] }
@Test [EOL] public void testAppendln_PrimitiveNumber() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     sb.appendln(0); [EOL]     assertEquals("0" + SEP, sb.toString()); [EOL]     sb.clear(); [EOL]     sb.appendln(1L); [EOL]     assertEquals("1" + SEP, sb.toString()); [EOL]     sb.clear(); [EOL]     sb.appendln(2.3f); [EOL]     assertEquals("2.3" + SEP, sb.toString()); [EOL]     sb.clear(); [EOL]     sb.appendln(4.5d); [EOL]     assertEquals("4.5" + SEP, sb.toString()); [EOL] }
@Test [EOL] public void testAppendln_PrimitiveNumber() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     sb.appendln(0); [EOL]     assertEquals("0" + SEP, sb.toString()); [EOL]     sb.clear(); [EOL]     sb.appendln(1L); [EOL]     assertEquals("1" + SEP, sb.toString()); [EOL]     sb.clear(); [EOL]     sb.appendln(2.3f); [EOL]     assertEquals("2.3" + SEP, sb.toString()); [EOL]     sb.clear(); [EOL]     sb.appendln(4.5d); [EOL]     assertEquals("4.5" + SEP, sb.toString()); [EOL] }
@Test [EOL] public void testAppendln_PrimitiveNumber() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     sb.appendln(0); [EOL]     assertEquals("0" + SEP, sb.toString()); [EOL]     sb.clear(); [EOL]     sb.appendln(1L); [EOL]     assertEquals("1" + SEP, sb.toString()); [EOL]     sb.clear(); [EOL]     sb.appendln(2.3f); [EOL]     assertEquals("2.3" + SEP, sb.toString()); [EOL]     sb.clear(); [EOL]     sb.appendln(4.5d); [EOL]     assertEquals("4.5" + SEP, sb.toString()); [EOL] }
@Test [EOL] public void testAppendln_PrimitiveNumber() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     sb.appendln(0); [EOL]     assertEquals("0" + SEP, sb.toString()); [EOL]     sb.clear(); [EOL]     sb.appendln(1L); [EOL]     assertEquals("1" + SEP, sb.toString()); [EOL]     sb.clear(); [EOL]     sb.appendln(2.3f); [EOL]     assertEquals("2.3" + SEP, sb.toString()); [EOL]     sb.clear(); [EOL]     sb.appendln(4.5d); [EOL]     assertEquals("4.5" + SEP, sb.toString()); [EOL] }
@Test [EOL] public void testAppendln_PrimitiveNumber() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     sb.appendln(0); [EOL]     assertEquals("0" + SEP, sb.toString()); [EOL]     sb.clear(); [EOL]     sb.appendln(1L); [EOL]     assertEquals("1" + SEP, sb.toString()); [EOL]     sb.clear(); [EOL]     sb.appendln(2.3f); [EOL]     assertEquals("2.3" + SEP, sb.toString()); [EOL]     sb.clear(); [EOL]     sb.appendln(4.5d); [EOL]     assertEquals("4.5" + SEP, sb.toString()); [EOL] }
@Test [EOL] public void testAppendln_PrimitiveNumber() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     sb.appendln(0); [EOL]     assertEquals("0" + SEP, sb.toString()); [EOL]     sb.clear(); [EOL]     sb.appendln(1L); [EOL]     assertEquals("1" + SEP, sb.toString()); [EOL]     sb.clear(); [EOL]     sb.appendln(2.3f); [EOL]     assertEquals("2.3" + SEP, sb.toString()); [EOL]     sb.clear(); [EOL]     sb.appendln(4.5d); [EOL]     assertEquals("4.5" + SEP, sb.toString()); [EOL] }
@Test [EOL] public void testAppendSeparator_char_int() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     sb.appendSeparator(',', 0); [EOL]     assertEquals("", sb.toString()); [EOL]     sb.append("foo"); [EOL]     assertEquals("foo", sb.toString()); [EOL]     sb.appendSeparator(',', 1); [EOL]     assertEquals("foo,", sb.toString()); [EOL]     sb.appendSeparator(',', -1); [EOL]     assertEquals("foo,", sb.toString()); [EOL] }
@Test [EOL] public void testAppendSeparator_char_int() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     sb.appendSeparator(',', 0); [EOL]     assertEquals("", sb.toString()); [EOL]     sb.append("foo"); [EOL]     assertEquals("foo", sb.toString()); [EOL]     sb.appendSeparator(',', 1); [EOL]     assertEquals("foo,", sb.toString()); [EOL]     sb.appendSeparator(',', -1); [EOL]     assertEquals("foo,", sb.toString()); [EOL] }
@Test [EOL] public void testAppendSeparator_char_int() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     sb.appendSeparator(',', 0); [EOL]     assertEquals("", sb.toString()); [EOL]     sb.append("foo"); [EOL]     assertEquals("foo", sb.toString()); [EOL]     sb.appendSeparator(',', 1); [EOL]     assertEquals("foo,", sb.toString()); [EOL]     sb.appendSeparator(',', -1); [EOL]     assertEquals("foo,", sb.toString()); [EOL] }
@Test [EOL] public void testAppendFixedWidthPadLeft_int() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     sb.appendFixedWidthPadLeft(123, -1, '-'); [EOL]     assertEquals("", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.appendFixedWidthPadLeft(123, 0, '-'); [EOL]     assertEquals("", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.appendFixedWidthPadLeft(123, 1, '-'); [EOL]     assertEquals("3", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.appendFixedWidthPadLeft(123, 2, '-'); [EOL]     assertEquals("23", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.appendFixedWidthPadLeft(123, 3, '-'); [EOL]     assertEquals("123", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.appendFixedWidthPadLeft(123, 4, '-'); [EOL]     assertEquals("-123", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.appendFixedWidthPadLeft(123, 10, '-'); [EOL]     assertEquals(10, sb.length()); [EOL]     assertEquals("-------123", sb.toString()); [EOL] }
@Test [EOL] public void testAppendFixedWidthPadLeft_int() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     sb.appendFixedWidthPadLeft(123, -1, '-'); [EOL]     assertEquals("", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.appendFixedWidthPadLeft(123, 0, '-'); [EOL]     assertEquals("", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.appendFixedWidthPadLeft(123, 1, '-'); [EOL]     assertEquals("3", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.appendFixedWidthPadLeft(123, 2, '-'); [EOL]     assertEquals("23", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.appendFixedWidthPadLeft(123, 3, '-'); [EOL]     assertEquals("123", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.appendFixedWidthPadLeft(123, 4, '-'); [EOL]     assertEquals("-123", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.appendFixedWidthPadLeft(123, 10, '-'); [EOL]     assertEquals(10, sb.length()); [EOL]     assertEquals("-------123", sb.toString()); [EOL] }
@Test [EOL] public void testAppendFixedWidthPadLeft_int() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     sb.appendFixedWidthPadLeft(123, -1, '-'); [EOL]     assertEquals("", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.appendFixedWidthPadLeft(123, 0, '-'); [EOL]     assertEquals("", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.appendFixedWidthPadLeft(123, 1, '-'); [EOL]     assertEquals("3", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.appendFixedWidthPadLeft(123, 2, '-'); [EOL]     assertEquals("23", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.appendFixedWidthPadLeft(123, 3, '-'); [EOL]     assertEquals("123", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.appendFixedWidthPadLeft(123, 4, '-'); [EOL]     assertEquals("-123", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.appendFixedWidthPadLeft(123, 10, '-'); [EOL]     assertEquals(10, sb.length()); [EOL]     assertEquals("-------123", sb.toString()); [EOL] }
@Test [EOL] public void testAppendFixedWidthPadLeft_int() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     sb.appendFixedWidthPadLeft(123, -1, '-'); [EOL]     assertEquals("", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.appendFixedWidthPadLeft(123, 0, '-'); [EOL]     assertEquals("", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.appendFixedWidthPadLeft(123, 1, '-'); [EOL]     assertEquals("3", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.appendFixedWidthPadLeft(123, 2, '-'); [EOL]     assertEquals("23", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.appendFixedWidthPadLeft(123, 3, '-'); [EOL]     assertEquals("123", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.appendFixedWidthPadLeft(123, 4, '-'); [EOL]     assertEquals("-123", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.appendFixedWidthPadLeft(123, 10, '-'); [EOL]     assertEquals(10, sb.length()); [EOL]     assertEquals("-------123", sb.toString()); [EOL] }
@Test [EOL] public void testAppendFixedWidthPadLeft_int() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     sb.appendFixedWidthPadLeft(123, -1, '-'); [EOL]     assertEquals("", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.appendFixedWidthPadLeft(123, 0, '-'); [EOL]     assertEquals("", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.appendFixedWidthPadLeft(123, 1, '-'); [EOL]     assertEquals("3", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.appendFixedWidthPadLeft(123, 2, '-'); [EOL]     assertEquals("23", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.appendFixedWidthPadLeft(123, 3, '-'); [EOL]     assertEquals("123", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.appendFixedWidthPadLeft(123, 4, '-'); [EOL]     assertEquals("-123", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.appendFixedWidthPadLeft(123, 10, '-'); [EOL]     assertEquals(10, sb.length()); [EOL]     assertEquals("-------123", sb.toString()); [EOL] }
@Test [EOL] public void testAppendFixedWidthPadLeft_int() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     sb.appendFixedWidthPadLeft(123, -1, '-'); [EOL]     assertEquals("", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.appendFixedWidthPadLeft(123, 0, '-'); [EOL]     assertEquals("", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.appendFixedWidthPadLeft(123, 1, '-'); [EOL]     assertEquals("3", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.appendFixedWidthPadLeft(123, 2, '-'); [EOL]     assertEquals("23", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.appendFixedWidthPadLeft(123, 3, '-'); [EOL]     assertEquals("123", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.appendFixedWidthPadLeft(123, 4, '-'); [EOL]     assertEquals("-123", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.appendFixedWidthPadLeft(123, 10, '-'); [EOL]     assertEquals(10, sb.length()); [EOL]     assertEquals("-------123", sb.toString()); [EOL] }
@Test [EOL] public void testAppendFixedWidthPadLeft_int() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     sb.appendFixedWidthPadLeft(123, -1, '-'); [EOL]     assertEquals("", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.appendFixedWidthPadLeft(123, 0, '-'); [EOL]     assertEquals("", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.appendFixedWidthPadLeft(123, 1, '-'); [EOL]     assertEquals("3", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.appendFixedWidthPadLeft(123, 2, '-'); [EOL]     assertEquals("23", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.appendFixedWidthPadLeft(123, 3, '-'); [EOL]     assertEquals("123", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.appendFixedWidthPadLeft(123, 4, '-'); [EOL]     assertEquals("-123", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.appendFixedWidthPadLeft(123, 10, '-'); [EOL]     assertEquals(10, sb.length()); [EOL]     assertEquals("-------123", sb.toString()); [EOL] }
@Test [EOL] public void testAppendFixedWidthPadLeft_int() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     sb.appendFixedWidthPadLeft(123, -1, '-'); [EOL]     assertEquals("", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.appendFixedWidthPadLeft(123, 0, '-'); [EOL]     assertEquals("", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.appendFixedWidthPadLeft(123, 1, '-'); [EOL]     assertEquals("3", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.appendFixedWidthPadLeft(123, 2, '-'); [EOL]     assertEquals("23", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.appendFixedWidthPadLeft(123, 3, '-'); [EOL]     assertEquals("123", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.appendFixedWidthPadLeft(123, 4, '-'); [EOL]     assertEquals("-123", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.appendFixedWidthPadLeft(123, 10, '-'); [EOL]     assertEquals(10, sb.length()); [EOL]     assertEquals("-------123", sb.toString()); [EOL] }
@Test [EOL] public void testAppendFixedWidthPadLeft_int() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     sb.appendFixedWidthPadLeft(123, -1, '-'); [EOL]     assertEquals("", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.appendFixedWidthPadLeft(123, 0, '-'); [EOL]     assertEquals("", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.appendFixedWidthPadLeft(123, 1, '-'); [EOL]     assertEquals("3", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.appendFixedWidthPadLeft(123, 2, '-'); [EOL]     assertEquals("23", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.appendFixedWidthPadLeft(123, 3, '-'); [EOL]     assertEquals("123", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.appendFixedWidthPadLeft(123, 4, '-'); [EOL]     assertEquals("-123", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.appendFixedWidthPadLeft(123, 10, '-'); [EOL]     assertEquals(10, sb.length()); [EOL]     assertEquals("-------123", sb.toString()); [EOL] }
@Test [EOL] public void testAppendFixedWidthPadLeft_int() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     sb.appendFixedWidthPadLeft(123, -1, '-'); [EOL]     assertEquals("", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.appendFixedWidthPadLeft(123, 0, '-'); [EOL]     assertEquals("", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.appendFixedWidthPadLeft(123, 1, '-'); [EOL]     assertEquals("3", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.appendFixedWidthPadLeft(123, 2, '-'); [EOL]     assertEquals("23", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.appendFixedWidthPadLeft(123, 3, '-'); [EOL]     assertEquals("123", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.appendFixedWidthPadLeft(123, 4, '-'); [EOL]     assertEquals("-123", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.appendFixedWidthPadLeft(123, 10, '-'); [EOL]     assertEquals(10, sb.length()); [EOL]     assertEquals("-------123", sb.toString()); [EOL] }
@Test [EOL] public void testAppendFixedWidthPadLeft_int() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     sb.appendFixedWidthPadLeft(123, -1, '-'); [EOL]     assertEquals("", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.appendFixedWidthPadLeft(123, 0, '-'); [EOL]     assertEquals("", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.appendFixedWidthPadLeft(123, 1, '-'); [EOL]     assertEquals("3", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.appendFixedWidthPadLeft(123, 2, '-'); [EOL]     assertEquals("23", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.appendFixedWidthPadLeft(123, 3, '-'); [EOL]     assertEquals("123", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.appendFixedWidthPadLeft(123, 4, '-'); [EOL]     assertEquals("-123", sb.toString()); [EOL]     sb.clear(); [EOL]     sb.appendFixedWidthPadLeft(123, 10, '-'); [EOL]     assertEquals(10, sb.length()); [EOL]     assertEquals("-------123", sb.toString()); [EOL] }
@Test [EOL] public void testLang294() { [EOL]     final StrBuilder sb = new StrBuilder("\n%BLAH%\nDo more stuff\neven more stuff\n%BLAH%\n"); [EOL]     sb.deleteAll("\n%BLAH%"); [EOL]     assertEquals("\nDo more stuff\neven more stuff\n", sb.toString()); [EOL] }
@Test [EOL] public void testLang294() { [EOL]     final StrBuilder sb = new StrBuilder("\n%BLAH%\nDo more stuff\neven more stuff\n%BLAH%\n"); [EOL]     sb.deleteAll("\n%BLAH%"); [EOL]     assertEquals("\nDo more stuff\neven more stuff\n", sb.toString()); [EOL] }
@Test [EOL] public void testLang294() { [EOL]     final StrBuilder sb = new StrBuilder("\n%BLAH%\nDo more stuff\neven more stuff\n%BLAH%\n"); [EOL]     sb.deleteAll("\n%BLAH%"); [EOL]     assertEquals("\nDo more stuff\neven more stuff\n", sb.toString()); [EOL] }
@Test [EOL] public void testLang294() { [EOL]     final StrBuilder sb = new StrBuilder("\n%BLAH%\nDo more stuff\neven more stuff\n%BLAH%\n"); [EOL]     sb.deleteAll("\n%BLAH%"); [EOL]     assertEquals("\nDo more stuff\neven more stuff\n", sb.toString()); [EOL] }
@Test [EOL] public void testLang294() { [EOL]     final StrBuilder sb = new StrBuilder("\n%BLAH%\nDo more stuff\neven more stuff\n%BLAH%\n"); [EOL]     sb.deleteAll("\n%BLAH%"); [EOL]     assertEquals("\nDo more stuff\neven more stuff\n", sb.toString()); [EOL] }
@Test [EOL] public void testLang294() { [EOL]     final StrBuilder sb = new StrBuilder("\n%BLAH%\nDo more stuff\neven more stuff\n%BLAH%\n"); [EOL]     sb.deleteAll("\n%BLAH%"); [EOL]     assertEquals("\nDo more stuff\neven more stuff\n", sb.toString()); [EOL] }
@Test [EOL] public void testLang294() { [EOL]     final StrBuilder sb = new StrBuilder("\n%BLAH%\nDo more stuff\neven more stuff\n%BLAH%\n"); [EOL]     sb.deleteAll("\n%BLAH%"); [EOL]     assertEquals("\nDo more stuff\neven more stuff\n", sb.toString()); [EOL] }
@Test [EOL] public void testLang294() { [EOL]     final StrBuilder sb = new StrBuilder("\n%BLAH%\nDo more stuff\neven more stuff\n%BLAH%\n"); [EOL]     sb.deleteAll("\n%BLAH%"); [EOL]     assertEquals("\nDo more stuff\neven more stuff\n", sb.toString()); [EOL] }
@Test [EOL] public void testReplace_int_int_String() { [EOL]     StrBuilder sb = new StrBuilder("abc"); [EOL]     sb.replace(0, 1, "d"); [EOL]     assertEquals("dbc", sb.toString()); [EOL]     sb.replace(0, 1, "aaa"); [EOL]     assertEquals("aaabc", sb.toString()); [EOL]     sb.replace(0, 3, ""); [EOL]     assertEquals("bc", sb.toString()); [EOL]     sb.replace(1, 2, (String) null); [EOL]     assertEquals("b", sb.toString()); [EOL]     sb.replace(1, 1000, "text"); [EOL]     assertEquals("btext", sb.toString()); [EOL]     sb.replace(0, 1000, "text"); [EOL]     assertEquals("text", sb.toString()); [EOL]     sb = new StrBuilder("atext"); [EOL]     sb.replace(1, 1, "ny"); [EOL]     assertEquals("anytext", sb.toString()); [EOL]     try { [EOL]         sb.replace(2, 1, "anything"); [EOL]         fail("Expected IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb = new StrBuilder(); [EOL]     try { [EOL]         sb.replace(1, 2, "anything"); [EOL]         fail("Expected IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.replace(-1, 1, "anything"); [EOL]         fail("Expected IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL] }
@Test [EOL] public void testReplace_int_int_String() { [EOL]     StrBuilder sb = new StrBuilder("abc"); [EOL]     sb.replace(0, 1, "d"); [EOL]     assertEquals("dbc", sb.toString()); [EOL]     sb.replace(0, 1, "aaa"); [EOL]     assertEquals("aaabc", sb.toString()); [EOL]     sb.replace(0, 3, ""); [EOL]     assertEquals("bc", sb.toString()); [EOL]     sb.replace(1, 2, (String) null); [EOL]     assertEquals("b", sb.toString()); [EOL]     sb.replace(1, 1000, "text"); [EOL]     assertEquals("btext", sb.toString()); [EOL]     sb.replace(0, 1000, "text"); [EOL]     assertEquals("text", sb.toString()); [EOL]     sb = new StrBuilder("atext"); [EOL]     sb.replace(1, 1, "ny"); [EOL]     assertEquals("anytext", sb.toString()); [EOL]     try { [EOL]         sb.replace(2, 1, "anything"); [EOL]         fail("Expected IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb = new StrBuilder(); [EOL]     try { [EOL]         sb.replace(1, 2, "anything"); [EOL]         fail("Expected IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.replace(-1, 1, "anything"); [EOL]         fail("Expected IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL] }
@Test [EOL] public void testReplace_int_int_String() { [EOL]     StrBuilder sb = new StrBuilder("abc"); [EOL]     sb.replace(0, 1, "d"); [EOL]     assertEquals("dbc", sb.toString()); [EOL]     sb.replace(0, 1, "aaa"); [EOL]     assertEquals("aaabc", sb.toString()); [EOL]     sb.replace(0, 3, ""); [EOL]     assertEquals("bc", sb.toString()); [EOL]     sb.replace(1, 2, (String) null); [EOL]     assertEquals("b", sb.toString()); [EOL]     sb.replace(1, 1000, "text"); [EOL]     assertEquals("btext", sb.toString()); [EOL]     sb.replace(0, 1000, "text"); [EOL]     assertEquals("text", sb.toString()); [EOL]     sb = new StrBuilder("atext"); [EOL]     sb.replace(1, 1, "ny"); [EOL]     assertEquals("anytext", sb.toString()); [EOL]     try { [EOL]         sb.replace(2, 1, "anything"); [EOL]         fail("Expected IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb = new StrBuilder(); [EOL]     try { [EOL]         sb.replace(1, 2, "anything"); [EOL]         fail("Expected IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.replace(-1, 1, "anything"); [EOL]         fail("Expected IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL] }
@Test [EOL] public void testReplace_int_int_String() { [EOL]     StrBuilder sb = new StrBuilder("abc"); [EOL]     sb.replace(0, 1, "d"); [EOL]     assertEquals("dbc", sb.toString()); [EOL]     sb.replace(0, 1, "aaa"); [EOL]     assertEquals("aaabc", sb.toString()); [EOL]     sb.replace(0, 3, ""); [EOL]     assertEquals("bc", sb.toString()); [EOL]     sb.replace(1, 2, (String) null); [EOL]     assertEquals("b", sb.toString()); [EOL]     sb.replace(1, 1000, "text"); [EOL]     assertEquals("btext", sb.toString()); [EOL]     sb.replace(0, 1000, "text"); [EOL]     assertEquals("text", sb.toString()); [EOL]     sb = new StrBuilder("atext"); [EOL]     sb.replace(1, 1, "ny"); [EOL]     assertEquals("anytext", sb.toString()); [EOL]     try { [EOL]         sb.replace(2, 1, "anything"); [EOL]         fail("Expected IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb = new StrBuilder(); [EOL]     try { [EOL]         sb.replace(1, 2, "anything"); [EOL]         fail("Expected IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.replace(-1, 1, "anything"); [EOL]         fail("Expected IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL] }
@Test [EOL] public void testReplace_int_int_String() { [EOL]     StrBuilder sb = new StrBuilder("abc"); [EOL]     sb.replace(0, 1, "d"); [EOL]     assertEquals("dbc", sb.toString()); [EOL]     sb.replace(0, 1, "aaa"); [EOL]     assertEquals("aaabc", sb.toString()); [EOL]     sb.replace(0, 3, ""); [EOL]     assertEquals("bc", sb.toString()); [EOL]     sb.replace(1, 2, (String) null); [EOL]     assertEquals("b", sb.toString()); [EOL]     sb.replace(1, 1000, "text"); [EOL]     assertEquals("btext", sb.toString()); [EOL]     sb.replace(0, 1000, "text"); [EOL]     assertEquals("text", sb.toString()); [EOL]     sb = new StrBuilder("atext"); [EOL]     sb.replace(1, 1, "ny"); [EOL]     assertEquals("anytext", sb.toString()); [EOL]     try { [EOL]         sb.replace(2, 1, "anything"); [EOL]         fail("Expected IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb = new StrBuilder(); [EOL]     try { [EOL]         sb.replace(1, 2, "anything"); [EOL]         fail("Expected IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.replace(-1, 1, "anything"); [EOL]         fail("Expected IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL] }
@Test [EOL] public void testReplace_int_int_String() { [EOL]     StrBuilder sb = new StrBuilder("abc"); [EOL]     sb.replace(0, 1, "d"); [EOL]     assertEquals("dbc", sb.toString()); [EOL]     sb.replace(0, 1, "aaa"); [EOL]     assertEquals("aaabc", sb.toString()); [EOL]     sb.replace(0, 3, ""); [EOL]     assertEquals("bc", sb.toString()); [EOL]     sb.replace(1, 2, (String) null); [EOL]     assertEquals("b", sb.toString()); [EOL]     sb.replace(1, 1000, "text"); [EOL]     assertEquals("btext", sb.toString()); [EOL]     sb.replace(0, 1000, "text"); [EOL]     assertEquals("text", sb.toString()); [EOL]     sb = new StrBuilder("atext"); [EOL]     sb.replace(1, 1, "ny"); [EOL]     assertEquals("anytext", sb.toString()); [EOL]     try { [EOL]         sb.replace(2, 1, "anything"); [EOL]         fail("Expected IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb = new StrBuilder(); [EOL]     try { [EOL]         sb.replace(1, 2, "anything"); [EOL]         fail("Expected IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.replace(-1, 1, "anything"); [EOL]         fail("Expected IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL] }
@Test [EOL] public void testReplace_int_int_String() { [EOL]     StrBuilder sb = new StrBuilder("abc"); [EOL]     sb.replace(0, 1, "d"); [EOL]     assertEquals("dbc", sb.toString()); [EOL]     sb.replace(0, 1, "aaa"); [EOL]     assertEquals("aaabc", sb.toString()); [EOL]     sb.replace(0, 3, ""); [EOL]     assertEquals("bc", sb.toString()); [EOL]     sb.replace(1, 2, (String) null); [EOL]     assertEquals("b", sb.toString()); [EOL]     sb.replace(1, 1000, "text"); [EOL]     assertEquals("btext", sb.toString()); [EOL]     sb.replace(0, 1000, "text"); [EOL]     assertEquals("text", sb.toString()); [EOL]     sb = new StrBuilder("atext"); [EOL]     sb.replace(1, 1, "ny"); [EOL]     assertEquals("anytext", sb.toString()); [EOL]     try { [EOL]         sb.replace(2, 1, "anything"); [EOL]         fail("Expected IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb = new StrBuilder(); [EOL]     try { [EOL]         sb.replace(1, 2, "anything"); [EOL]         fail("Expected IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.replace(-1, 1, "anything"); [EOL]         fail("Expected IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL] }
@Test [EOL] public void testReplace_int_int_String() { [EOL]     StrBuilder sb = new StrBuilder("abc"); [EOL]     sb.replace(0, 1, "d"); [EOL]     assertEquals("dbc", sb.toString()); [EOL]     sb.replace(0, 1, "aaa"); [EOL]     assertEquals("aaabc", sb.toString()); [EOL]     sb.replace(0, 3, ""); [EOL]     assertEquals("bc", sb.toString()); [EOL]     sb.replace(1, 2, (String) null); [EOL]     assertEquals("b", sb.toString()); [EOL]     sb.replace(1, 1000, "text"); [EOL]     assertEquals("btext", sb.toString()); [EOL]     sb.replace(0, 1000, "text"); [EOL]     assertEquals("text", sb.toString()); [EOL]     sb = new StrBuilder("atext"); [EOL]     sb.replace(1, 1, "ny"); [EOL]     assertEquals("anytext", sb.toString()); [EOL]     try { [EOL]         sb.replace(2, 1, "anything"); [EOL]         fail("Expected IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb = new StrBuilder(); [EOL]     try { [EOL]         sb.replace(1, 2, "anything"); [EOL]         fail("Expected IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.replace(-1, 1, "anything"); [EOL]         fail("Expected IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL] }
@Test [EOL] public void testReplace_int_int_String() { [EOL]     StrBuilder sb = new StrBuilder("abc"); [EOL]     sb.replace(0, 1, "d"); [EOL]     assertEquals("dbc", sb.toString()); [EOL]     sb.replace(0, 1, "aaa"); [EOL]     assertEquals("aaabc", sb.toString()); [EOL]     sb.replace(0, 3, ""); [EOL]     assertEquals("bc", sb.toString()); [EOL]     sb.replace(1, 2, (String) null); [EOL]     assertEquals("b", sb.toString()); [EOL]     sb.replace(1, 1000, "text"); [EOL]     assertEquals("btext", sb.toString()); [EOL]     sb.replace(0, 1000, "text"); [EOL]     assertEquals("text", sb.toString()); [EOL]     sb = new StrBuilder("atext"); [EOL]     sb.replace(1, 1, "ny"); [EOL]     assertEquals("anytext", sb.toString()); [EOL]     try { [EOL]         sb.replace(2, 1, "anything"); [EOL]         fail("Expected IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     sb = new StrBuilder(); [EOL]     try { [EOL]         sb.replace(1, 2, "anything"); [EOL]         fail("Expected IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL]     try { [EOL]         sb.replace(-1, 1, "anything"); [EOL]         fail("Expected IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException e) { [EOL]     } [EOL] }
@Test [EOL] public void testReplaceAll_char_char() { [EOL]     final StrBuilder sb = new StrBuilder("abcbccba"); [EOL]     sb.replaceAll('x', 'y'); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.replaceAll('a', 'd'); [EOL]     assertEquals("dbcbccbd", sb.toString()); [EOL]     sb.replaceAll('b', 'e'); [EOL]     assertEquals("dececced", sb.toString()); [EOL]     sb.replaceAll('c', 'f'); [EOL]     assertEquals("defeffed", sb.toString()); [EOL]     sb.replaceAll('d', 'd'); [EOL]     assertEquals("defeffed", sb.toString()); [EOL] }
@Test [EOL] public void testReplaceAll_char_char() { [EOL]     final StrBuilder sb = new StrBuilder("abcbccba"); [EOL]     sb.replaceAll('x', 'y'); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.replaceAll('a', 'd'); [EOL]     assertEquals("dbcbccbd", sb.toString()); [EOL]     sb.replaceAll('b', 'e'); [EOL]     assertEquals("dececced", sb.toString()); [EOL]     sb.replaceAll('c', 'f'); [EOL]     assertEquals("defeffed", sb.toString()); [EOL]     sb.replaceAll('d', 'd'); [EOL]     assertEquals("defeffed", sb.toString()); [EOL] }
@Test [EOL] public void testReplaceAll_char_char() { [EOL]     final StrBuilder sb = new StrBuilder("abcbccba"); [EOL]     sb.replaceAll('x', 'y'); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.replaceAll('a', 'd'); [EOL]     assertEquals("dbcbccbd", sb.toString()); [EOL]     sb.replaceAll('b', 'e'); [EOL]     assertEquals("dececced", sb.toString()); [EOL]     sb.replaceAll('c', 'f'); [EOL]     assertEquals("defeffed", sb.toString()); [EOL]     sb.replaceAll('d', 'd'); [EOL]     assertEquals("defeffed", sb.toString()); [EOL] }
@Test [EOL] public void testReplaceFirst_char_char() { [EOL]     final StrBuilder sb = new StrBuilder("abcbccba"); [EOL]     sb.replaceFirst('x', 'y'); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.replaceFirst('a', 'd'); [EOL]     assertEquals("dbcbccba", sb.toString()); [EOL]     sb.replaceFirst('b', 'e'); [EOL]     assertEquals("decbccba", sb.toString()); [EOL]     sb.replaceFirst('c', 'f'); [EOL]     assertEquals("defbccba", sb.toString()); [EOL]     sb.replaceFirst('d', 'd'); [EOL]     assertEquals("defbccba", sb.toString()); [EOL] }
@Test [EOL] public void testReplaceFirst_char_char() { [EOL]     final StrBuilder sb = new StrBuilder("abcbccba"); [EOL]     sb.replaceFirst('x', 'y'); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.replaceFirst('a', 'd'); [EOL]     assertEquals("dbcbccba", sb.toString()); [EOL]     sb.replaceFirst('b', 'e'); [EOL]     assertEquals("decbccba", sb.toString()); [EOL]     sb.replaceFirst('c', 'f'); [EOL]     assertEquals("defbccba", sb.toString()); [EOL]     sb.replaceFirst('d', 'd'); [EOL]     assertEquals("defbccba", sb.toString()); [EOL] }
@Test [EOL] public void testReplaceFirst_char_char() { [EOL]     final StrBuilder sb = new StrBuilder("abcbccba"); [EOL]     sb.replaceFirst('x', 'y'); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.replaceFirst('a', 'd'); [EOL]     assertEquals("dbcbccba", sb.toString()); [EOL]     sb.replaceFirst('b', 'e'); [EOL]     assertEquals("decbccba", sb.toString()); [EOL]     sb.replaceFirst('c', 'f'); [EOL]     assertEquals("defbccba", sb.toString()); [EOL]     sb.replaceFirst('d', 'd'); [EOL]     assertEquals("defbccba", sb.toString()); [EOL] }
@Test [EOL] public void testReverse() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     assertEquals("", sb.reverse().toString()); [EOL]     sb.clear().append(true); [EOL]     assertEquals("eurt", sb.reverse().toString()); [EOL]     assertEquals("true", sb.reverse().toString()); [EOL] }
@Test [EOL] public void testReverse() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     assertEquals("", sb.reverse().toString()); [EOL]     sb.clear().append(true); [EOL]     assertEquals("eurt", sb.reverse().toString()); [EOL]     assertEquals("true", sb.reverse().toString()); [EOL] }
@Test [EOL] public void testEndsWith() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     assertFalse(sb.endsWith("a")); [EOL]     assertFalse(sb.endsWith("c")); [EOL]     assertTrue(sb.endsWith("")); [EOL]     assertFalse(sb.endsWith(null)); [EOL]     sb.append("abc"); [EOL]     assertTrue(sb.endsWith("c")); [EOL]     assertTrue(sb.endsWith("bc")); [EOL]     assertTrue(sb.endsWith("abc")); [EOL]     assertFalse(sb.endsWith("cba")); [EOL]     assertFalse(sb.endsWith("abcd")); [EOL]     assertFalse(sb.endsWith(" abc")); [EOL]     assertFalse(sb.endsWith("abc ")); [EOL] }
@Test [EOL] public void testEndsWith() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     assertFalse(sb.endsWith("a")); [EOL]     assertFalse(sb.endsWith("c")); [EOL]     assertTrue(sb.endsWith("")); [EOL]     assertFalse(sb.endsWith(null)); [EOL]     sb.append("abc"); [EOL]     assertTrue(sb.endsWith("c")); [EOL]     assertTrue(sb.endsWith("bc")); [EOL]     assertTrue(sb.endsWith("abc")); [EOL]     assertFalse(sb.endsWith("cba")); [EOL]     assertFalse(sb.endsWith("abcd")); [EOL]     assertFalse(sb.endsWith(" abc")); [EOL]     assertFalse(sb.endsWith("abc ")); [EOL] }
@Test [EOL] public void testEndsWith() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     assertFalse(sb.endsWith("a")); [EOL]     assertFalse(sb.endsWith("c")); [EOL]     assertTrue(sb.endsWith("")); [EOL]     assertFalse(sb.endsWith(null)); [EOL]     sb.append("abc"); [EOL]     assertTrue(sb.endsWith("c")); [EOL]     assertTrue(sb.endsWith("bc")); [EOL]     assertTrue(sb.endsWith("abc")); [EOL]     assertFalse(sb.endsWith("cba")); [EOL]     assertFalse(sb.endsWith("abcd")); [EOL]     assertFalse(sb.endsWith(" abc")); [EOL]     assertFalse(sb.endsWith("abc ")); [EOL] }
@Test [EOL] public void testEndsWith() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     assertFalse(sb.endsWith("a")); [EOL]     assertFalse(sb.endsWith("c")); [EOL]     assertTrue(sb.endsWith("")); [EOL]     assertFalse(sb.endsWith(null)); [EOL]     sb.append("abc"); [EOL]     assertTrue(sb.endsWith("c")); [EOL]     assertTrue(sb.endsWith("bc")); [EOL]     assertTrue(sb.endsWith("abc")); [EOL]     assertFalse(sb.endsWith("cba")); [EOL]     assertFalse(sb.endsWith("abcd")); [EOL]     assertFalse(sb.endsWith(" abc")); [EOL]     assertFalse(sb.endsWith("abc ")); [EOL] }
@Test [EOL] public void testEndsWith() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     assertFalse(sb.endsWith("a")); [EOL]     assertFalse(sb.endsWith("c")); [EOL]     assertTrue(sb.endsWith("")); [EOL]     assertFalse(sb.endsWith(null)); [EOL]     sb.append("abc"); [EOL]     assertTrue(sb.endsWith("c")); [EOL]     assertTrue(sb.endsWith("bc")); [EOL]     assertTrue(sb.endsWith("abc")); [EOL]     assertFalse(sb.endsWith("cba")); [EOL]     assertFalse(sb.endsWith("abcd")); [EOL]     assertFalse(sb.endsWith(" abc")); [EOL]     assertFalse(sb.endsWith("abc ")); [EOL] }
@Test [EOL] public void testEndsWith() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     assertFalse(sb.endsWith("a")); [EOL]     assertFalse(sb.endsWith("c")); [EOL]     assertTrue(sb.endsWith("")); [EOL]     assertFalse(sb.endsWith(null)); [EOL]     sb.append("abc"); [EOL]     assertTrue(sb.endsWith("c")); [EOL]     assertTrue(sb.endsWith("bc")); [EOL]     assertTrue(sb.endsWith("abc")); [EOL]     assertFalse(sb.endsWith("cba")); [EOL]     assertFalse(sb.endsWith("abcd")); [EOL]     assertFalse(sb.endsWith(" abc")); [EOL]     assertFalse(sb.endsWith("abc ")); [EOL] }
@Test [EOL] public void testLang294() { [EOL]     final StrBuilder sb = new StrBuilder("\n%BLAH%\nDo more stuff\neven more stuff\n%BLAH%\n"); [EOL]     sb.deleteAll("\n%BLAH%"); [EOL]     assertEquals("\nDo more stuff\neven more stuff\n", sb.toString()); [EOL] }
@Test [EOL] public void testLang294() { [EOL]     final StrBuilder sb = new StrBuilder("\n%BLAH%\nDo more stuff\neven more stuff\n%BLAH%\n"); [EOL]     sb.deleteAll("\n%BLAH%"); [EOL]     assertEquals("\nDo more stuff\neven more stuff\n", sb.toString()); [EOL] }
@Test [EOL] public void testLang294() { [EOL]     final StrBuilder sb = new StrBuilder("\n%BLAH%\nDo more stuff\neven more stuff\n%BLAH%\n"); [EOL]     sb.deleteAll("\n%BLAH%"); [EOL]     assertEquals("\nDo more stuff\neven more stuff\n", sb.toString()); [EOL] }
@Test [EOL] public void testLang294() { [EOL]     final StrBuilder sb = new StrBuilder("\n%BLAH%\nDo more stuff\neven more stuff\n%BLAH%\n"); [EOL]     sb.deleteAll("\n%BLAH%"); [EOL]     assertEquals("\nDo more stuff\neven more stuff\n", sb.toString()); [EOL] }
@Test [EOL] public void testLang294() { [EOL]     final StrBuilder sb = new StrBuilder("\n%BLAH%\nDo more stuff\neven more stuff\n%BLAH%\n"); [EOL]     sb.deleteAll("\n%BLAH%"); [EOL]     assertEquals("\nDo more stuff\neven more stuff\n", sb.toString()); [EOL] }
@Test [EOL] public void testLang294() { [EOL]     final StrBuilder sb = new StrBuilder("\n%BLAH%\nDo more stuff\neven more stuff\n%BLAH%\n"); [EOL]     sb.deleteAll("\n%BLAH%"); [EOL]     assertEquals("\nDo more stuff\neven more stuff\n", sb.toString()); [EOL] }
@Test [EOL] public void testLang294() { [EOL]     final StrBuilder sb = new StrBuilder("\n%BLAH%\nDo more stuff\neven more stuff\n%BLAH%\n"); [EOL]     sb.deleteAll("\n%BLAH%"); [EOL]     assertEquals("\nDo more stuff\neven more stuff\n", sb.toString()); [EOL] }
@Test [EOL] public void testLang294() { [EOL]     final StrBuilder sb = new StrBuilder("\n%BLAH%\nDo more stuff\neven more stuff\n%BLAH%\n"); [EOL]     sb.deleteAll("\n%BLAH%"); [EOL]     assertEquals("\nDo more stuff\neven more stuff\n", sb.toString()); [EOL] }
@Test [EOL] public void testLastIndexOf_char_int() { [EOL]     StrBuilder sb = new StrBuilder("abab"); [EOL]     assertEquals(-1, sb.lastIndexOf('a', -1)); [EOL]     assertEquals(0, sb.lastIndexOf('a', 0)); [EOL]     assertEquals(0, sb.lastIndexOf('a', 1)); [EOL]     assertEquals("abab".lastIndexOf('a', 1), sb.lastIndexOf('a', 1)); [EOL]     assertEquals(1, sb.lastIndexOf('b', 2)); [EOL]     assertEquals("abab".lastIndexOf('b', 2), sb.lastIndexOf('b', 2)); [EOL]     assertEquals(-1, sb.lastIndexOf('z', 2)); [EOL]     sb = new StrBuilder("xyzabc"); [EOL]     assertEquals(2, sb.lastIndexOf('z', sb.length())); [EOL]     assertEquals(-1, sb.lastIndexOf('z', 1)); [EOL] }
@Test [EOL] public void testAsTokenizer() throws Exception { [EOL]     final StrBuilder b = new StrBuilder(); [EOL]     b.append("a b "); [EOL]     final StrTokenizer t = b.asTokenizer(); [EOL]     final String[] tokens1 = t.getTokenArray(); [EOL]     assertEquals(2, tokens1.length); [EOL]     assertEquals("a", tokens1[0]); [EOL]     assertEquals("b", tokens1[1]); [EOL]     assertEquals(2, t.size()); [EOL]     b.append("c d "); [EOL]     final String[] tokens2 = t.getTokenArray(); [EOL]     assertEquals(2, tokens2.length); [EOL]     assertEquals("a", tokens2[0]); [EOL]     assertEquals("b", tokens2[1]); [EOL]     assertEquals(2, t.size()); [EOL]     assertEquals("a", t.next()); [EOL]     assertEquals("b", t.next()); [EOL]     t.reset(); [EOL]     final String[] tokens3 = t.getTokenArray(); [EOL]     assertEquals(4, tokens3.length); [EOL]     assertEquals("a", tokens3[0]); [EOL]     assertEquals("b", tokens3[1]); [EOL]     assertEquals("c", tokens3[2]); [EOL]     assertEquals("d", tokens3[3]); [EOL]     assertEquals(4, t.size()); [EOL]     assertEquals("a", t.next()); [EOL]     assertEquals("b", t.next()); [EOL]     assertEquals("c", t.next()); [EOL]     assertEquals("d", t.next()); [EOL]     assertEquals("a b c d ", t.getContent()); [EOL] }
@Test [EOL] public void testEquals() { [EOL]     final StrBuilder sb1 = new StrBuilder(); [EOL]     final StrBuilder sb2 = new StrBuilder(); [EOL]     assertTrue(sb1.equals(sb2)); [EOL]     assertTrue(sb1.equals(sb1)); [EOL]     assertTrue(sb2.equals(sb2)); [EOL]     assertTrue(sb1.equals((Object) sb2)); [EOL]     sb1.append("abc"); [EOL]     assertFalse(sb1.equals(sb2)); [EOL]     assertFalse(sb1.equals((Object) sb2)); [EOL]     sb2.append("ABC"); [EOL]     assertFalse(sb1.equals(sb2)); [EOL]     assertFalse(sb1.equals((Object) sb2)); [EOL]     sb2.clear().append("abc"); [EOL]     assertTrue(sb1.equals(sb2)); [EOL]     assertTrue(sb1.equals((Object) sb2)); [EOL]     assertFalse(sb1.equals(Integer.valueOf(1))); [EOL]     assertFalse(sb1.equals("abc")); [EOL] }
@Test [EOL] public void testEquals() { [EOL]     final StrBuilder sb1 = new StrBuilder(); [EOL]     final StrBuilder sb2 = new StrBuilder(); [EOL]     assertTrue(sb1.equals(sb2)); [EOL]     assertTrue(sb1.equals(sb1)); [EOL]     assertTrue(sb2.equals(sb2)); [EOL]     assertTrue(sb1.equals((Object) sb2)); [EOL]     sb1.append("abc"); [EOL]     assertFalse(sb1.equals(sb2)); [EOL]     assertFalse(sb1.equals((Object) sb2)); [EOL]     sb2.append("ABC"); [EOL]     assertFalse(sb1.equals(sb2)); [EOL]     assertFalse(sb1.equals((Object) sb2)); [EOL]     sb2.clear().append("abc"); [EOL]     assertTrue(sb1.equals(sb2)); [EOL]     assertTrue(sb1.equals((Object) sb2)); [EOL]     assertFalse(sb1.equals(Integer.valueOf(1))); [EOL]     assertFalse(sb1.equals("abc")); [EOL] }
@Test [EOL] public void testEquals() { [EOL]     final StrBuilder sb1 = new StrBuilder(); [EOL]     final StrBuilder sb2 = new StrBuilder(); [EOL]     assertTrue(sb1.equals(sb2)); [EOL]     assertTrue(sb1.equals(sb1)); [EOL]     assertTrue(sb2.equals(sb2)); [EOL]     assertTrue(sb1.equals((Object) sb2)); [EOL]     sb1.append("abc"); [EOL]     assertFalse(sb1.equals(sb2)); [EOL]     assertFalse(sb1.equals((Object) sb2)); [EOL]     sb2.append("ABC"); [EOL]     assertFalse(sb1.equals(sb2)); [EOL]     assertFalse(sb1.equals((Object) sb2)); [EOL]     sb2.clear().append("abc"); [EOL]     assertTrue(sb1.equals(sb2)); [EOL]     assertTrue(sb1.equals((Object) sb2)); [EOL]     assertFalse(sb1.equals(Integer.valueOf(1))); [EOL]     assertFalse(sb1.equals("abc")); [EOL] }
@Test [EOL] public void testHashCode() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     final int hc1a = sb.hashCode(); [EOL]     final int hc1b = sb.hashCode(); [EOL]     assertEquals(0, hc1a); [EOL]     assertEquals(hc1a, hc1b); [EOL]     sb.append("abc"); [EOL]     final int hc2a = sb.hashCode(); [EOL]     final int hc2b = sb.hashCode(); [EOL]     assertTrue(hc2a != 0); [EOL]     assertEquals(hc2a, hc2b); [EOL] }
@Test [EOL] public void testHashCode() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     final int hc1a = sb.hashCode(); [EOL]     final int hc1b = sb.hashCode(); [EOL]     assertEquals(0, hc1a); [EOL]     assertEquals(hc1a, hc1b); [EOL]     sb.append("abc"); [EOL]     final int hc2a = sb.hashCode(); [EOL]     final int hc2b = sb.hashCode(); [EOL]     assertTrue(hc2a != 0); [EOL]     assertEquals(hc2a, hc2b); [EOL] }
@Test [EOL] public void testHashCode() { [EOL]     final StrBuilder sb = new StrBuilder(); [EOL]     final int hc1a = sb.hashCode(); [EOL]     final int hc1b = sb.hashCode(); [EOL]     assertEquals(0, hc1a); [EOL]     assertEquals(hc1a, hc1b); [EOL]     sb.append("abc"); [EOL]     final int hc2a = sb.hashCode(); [EOL]     final int hc2b = sb.hashCode(); [EOL]     assertTrue(hc2a != 0); [EOL]     assertEquals(hc2a, hc2b); [EOL] }
@Test [EOL] public void testReplaceFirst_char_char() { [EOL]     final StrBuilder sb = new StrBuilder("abcbccba"); [EOL]     sb.replaceFirst('x', 'y'); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.replaceFirst('a', 'd'); [EOL]     assertEquals("dbcbccba", sb.toString()); [EOL]     sb.replaceFirst('b', 'e'); [EOL]     assertEquals("decbccba", sb.toString()); [EOL]     sb.replaceFirst('c', 'f'); [EOL]     assertEquals("defbccba", sb.toString()); [EOL]     sb.replaceFirst('d', 'd'); [EOL]     assertEquals("defbccba", sb.toString()); [EOL] }
@Test [EOL] public void testReplaceFirst_char_char() { [EOL]     final StrBuilder sb = new StrBuilder("abcbccba"); [EOL]     sb.replaceFirst('x', 'y'); [EOL]     assertEquals("abcbccba", sb.toString()); [EOL]     sb.replaceFirst('a', 'd'); [EOL]     assertEquals("dbcbccba", sb.toString()); [EOL]     sb.replaceFirst('b', 'e'); [EOL]     assertEquals("decbccba", sb.toString()); [EOL]     sb.replaceFirst('c', 'f'); [EOL]     assertEquals("defbccba", sb.toString()); [EOL]     sb.replaceFirst('d', 'd'); [EOL]     assertEquals("defbccba", sb.toString()); [EOL] }
@Test [EOL] public void testAsTokenizer() throws Exception { [EOL]     final StrBuilder b = new StrBuilder(); [EOL]     b.append("a b "); [EOL]     final StrTokenizer t = b.asTokenizer(); [EOL]     final String[] tokens1 = t.getTokenArray(); [EOL]     assertEquals(2, tokens1.length); [EOL]     assertEquals("a", tokens1[0]); [EOL]     assertEquals("b", tokens1[1]); [EOL]     assertEquals(2, t.size()); [EOL]     b.append("c d "); [EOL]     final String[] tokens2 = t.getTokenArray(); [EOL]     assertEquals(2, tokens2.length); [EOL]     assertEquals("a", tokens2[0]); [EOL]     assertEquals("b", tokens2[1]); [EOL]     assertEquals(2, t.size()); [EOL]     assertEquals("a", t.next()); [EOL]     assertEquals("b", t.next()); [EOL]     t.reset(); [EOL]     final String[] tokens3 = t.getTokenArray(); [EOL]     assertEquals(4, tokens3.length); [EOL]     assertEquals("a", tokens3[0]); [EOL]     assertEquals("b", tokens3[1]); [EOL]     assertEquals("c", tokens3[2]); [EOL]     assertEquals("d", tokens3[3]); [EOL]     assertEquals(4, t.size()); [EOL]     assertEquals("a", t.next()); [EOL]     assertEquals("b", t.next()); [EOL]     assertEquals("c", t.next()); [EOL]     assertEquals("d", t.next()); [EOL]     assertEquals("a b c d ", t.getContent()); [EOL] }
@Test [EOL] public void testAsTokenizer() throws Exception { [EOL]     final StrBuilder b = new StrBuilder(); [EOL]     b.append("a b "); [EOL]     final StrTokenizer t = b.asTokenizer(); [EOL]     final String[] tokens1 = t.getTokenArray(); [EOL]     assertEquals(2, tokens1.length); [EOL]     assertEquals("a", tokens1[0]); [EOL]     assertEquals("b", tokens1[1]); [EOL]     assertEquals(2, t.size()); [EOL]     b.append("c d "); [EOL]     final String[] tokens2 = t.getTokenArray(); [EOL]     assertEquals(2, tokens2.length); [EOL]     assertEquals("a", tokens2[0]); [EOL]     assertEquals("b", tokens2[1]); [EOL]     assertEquals(2, t.size()); [EOL]     assertEquals("a", t.next()); [EOL]     assertEquals("b", t.next()); [EOL]     t.reset(); [EOL]     final String[] tokens3 = t.getTokenArray(); [EOL]     assertEquals(4, tokens3.length); [EOL]     assertEquals("a", tokens3[0]); [EOL]     assertEquals("b", tokens3[1]); [EOL]     assertEquals("c", tokens3[2]); [EOL]     assertEquals("d", tokens3[3]); [EOL]     assertEquals(4, t.size()); [EOL]     assertEquals("a", t.next()); [EOL]     assertEquals("b", t.next()); [EOL]     assertEquals("c", t.next()); [EOL]     assertEquals("d", t.next()); [EOL]     assertEquals("a b c d ", t.getContent()); [EOL] }
@Test [EOL] public void testAsTokenizer() throws Exception { [EOL]     final StrBuilder b = new StrBuilder(); [EOL]     b.append("a b "); [EOL]     final StrTokenizer t = b.asTokenizer(); [EOL]     final String[] tokens1 = t.getTokenArray(); [EOL]     assertEquals(2, tokens1.length); [EOL]     assertEquals("a", tokens1[0]); [EOL]     assertEquals("b", tokens1[1]); [EOL]     assertEquals(2, t.size()); [EOL]     b.append("c d "); [EOL]     final String[] tokens2 = t.getTokenArray(); [EOL]     assertEquals(2, tokens2.length); [EOL]     assertEquals("a", tokens2[0]); [EOL]     assertEquals("b", tokens2[1]); [EOL]     assertEquals(2, t.size()); [EOL]     assertEquals("a", t.next()); [EOL]     assertEquals("b", t.next()); [EOL]     t.reset(); [EOL]     final String[] tokens3 = t.getTokenArray(); [EOL]     assertEquals(4, tokens3.length); [EOL]     assertEquals("a", tokens3[0]); [EOL]     assertEquals("b", tokens3[1]); [EOL]     assertEquals("c", tokens3[2]); [EOL]     assertEquals("d", tokens3[3]); [EOL]     assertEquals(4, t.size()); [EOL]     assertEquals("a", t.next()); [EOL]     assertEquals("b", t.next()); [EOL]     assertEquals("c", t.next()); [EOL]     assertEquals("d", t.next()); [EOL]     assertEquals("a b c d ", t.getContent()); [EOL] }
@Test [EOL] public void testAsTokenizer() throws Exception { [EOL]     final StrBuilder b = new StrBuilder(); [EOL]     b.append("a b "); [EOL]     final StrTokenizer t = b.asTokenizer(); [EOL]     final String[] tokens1 = t.getTokenArray(); [EOL]     assertEquals(2, tokens1.length); [EOL]     assertEquals("a", tokens1[0]); [EOL]     assertEquals("b", tokens1[1]); [EOL]     assertEquals(2, t.size()); [EOL]     b.append("c d "); [EOL]     final String[] tokens2 = t.getTokenArray(); [EOL]     assertEquals(2, tokens2.length); [EOL]     assertEquals("a", tokens2[0]); [EOL]     assertEquals("b", tokens2[1]); [EOL]     assertEquals(2, t.size()); [EOL]     assertEquals("a", t.next()); [EOL]     assertEquals("b", t.next()); [EOL]     t.reset(); [EOL]     final String[] tokens3 = t.getTokenArray(); [EOL]     assertEquals(4, tokens3.length); [EOL]     assertEquals("a", tokens3[0]); [EOL]     assertEquals("b", tokens3[1]); [EOL]     assertEquals("c", tokens3[2]); [EOL]     assertEquals("d", tokens3[3]); [EOL]     assertEquals(4, t.size()); [EOL]     assertEquals("a", t.next()); [EOL]     assertEquals("b", t.next()); [EOL]     assertEquals("c", t.next()); [EOL]     assertEquals("d", t.next()); [EOL]     assertEquals("a b c d ", t.getContent()); [EOL] }
@Test [EOL] public void testAsTokenizer() throws Exception { [EOL]     final StrBuilder b = new StrBuilder(); [EOL]     b.append("a b "); [EOL]     final StrTokenizer t = b.asTokenizer(); [EOL]     final String[] tokens1 = t.getTokenArray(); [EOL]     assertEquals(2, tokens1.length); [EOL]     assertEquals("a", tokens1[0]); [EOL]     assertEquals("b", tokens1[1]); [EOL]     assertEquals(2, t.size()); [EOL]     b.append("c d "); [EOL]     final String[] tokens2 = t.getTokenArray(); [EOL]     assertEquals(2, tokens2.length); [EOL]     assertEquals("a", tokens2[0]); [EOL]     assertEquals("b", tokens2[1]); [EOL]     assertEquals(2, t.size()); [EOL]     assertEquals("a", t.next()); [EOL]     assertEquals("b", t.next()); [EOL]     t.reset(); [EOL]     final String[] tokens3 = t.getTokenArray(); [EOL]     assertEquals(4, tokens3.length); [EOL]     assertEquals("a", tokens3[0]); [EOL]     assertEquals("b", tokens3[1]); [EOL]     assertEquals("c", tokens3[2]); [EOL]     assertEquals("d", tokens3[3]); [EOL]     assertEquals(4, t.size()); [EOL]     assertEquals("a", t.next()); [EOL]     assertEquals("b", t.next()); [EOL]     assertEquals("c", t.next()); [EOL]     assertEquals("d", t.next()); [EOL]     assertEquals("a b c d ", t.getContent()); [EOL] }
@Test [EOL] public void test_getInstance_String_Locale() { [EOL]     final Locale realDefaultLocale = Locale.getDefault(); [EOL]     try { [EOL]         Locale.setDefault(Locale.US); [EOL]         final FastDateFormat format1 = FastDateFormat.getInstance("MM/DD/yyyy", Locale.GERMANY); [EOL]         final FastDateFormat format2 = FastDateFormat.getInstance("MM/DD/yyyy"); [EOL]         final FastDateFormat format3 = FastDateFormat.getInstance("MM/DD/yyyy", Locale.GERMANY); [EOL]         assertTrue(format1 != format2); [EOL]         assertSame(format1, format3); [EOL]         assertEquals(Locale.GERMANY, format1.getLocale()); [EOL]     } finally { [EOL]         Locale.setDefault(realDefaultLocale); [EOL]     } [EOL] }
@Test [EOL] public void test_getInstance_String_Locale() { [EOL]     final Locale realDefaultLocale = Locale.getDefault(); [EOL]     try { [EOL]         Locale.setDefault(Locale.US); [EOL]         final FastDateFormat format1 = FastDateFormat.getInstance("MM/DD/yyyy", Locale.GERMANY); [EOL]         final FastDateFormat format2 = FastDateFormat.getInstance("MM/DD/yyyy"); [EOL]         final FastDateFormat format3 = FastDateFormat.getInstance("MM/DD/yyyy", Locale.GERMANY); [EOL]         assertTrue(format1 != format2); [EOL]         assertSame(format1, format3); [EOL]         assertEquals(Locale.GERMANY, format1.getLocale()); [EOL]     } finally { [EOL]         Locale.setDefault(realDefaultLocale); [EOL]     } [EOL] }
@Test [EOL] public void test_getInstance_String_Locale() { [EOL]     final Locale realDefaultLocale = Locale.getDefault(); [EOL]     try { [EOL]         Locale.setDefault(Locale.US); [EOL]         final FastDateFormat format1 = FastDateFormat.getInstance("MM/DD/yyyy", Locale.GERMANY); [EOL]         final FastDateFormat format2 = FastDateFormat.getInstance("MM/DD/yyyy"); [EOL]         final FastDateFormat format3 = FastDateFormat.getInstance("MM/DD/yyyy", Locale.GERMANY); [EOL]         assertTrue(format1 != format2); [EOL]         assertSame(format1, format3); [EOL]         assertEquals(Locale.GERMANY, format1.getLocale()); [EOL]     } finally { [EOL]         Locale.setDefault(realDefaultLocale); [EOL]     } [EOL] }
@Test [EOL] public void test_getInstance_String_Locale() { [EOL]     final Locale realDefaultLocale = Locale.getDefault(); [EOL]     try { [EOL]         Locale.setDefault(Locale.US); [EOL]         final FastDateFormat format1 = FastDateFormat.getInstance("MM/DD/yyyy", Locale.GERMANY); [EOL]         final FastDateFormat format2 = FastDateFormat.getInstance("MM/DD/yyyy"); [EOL]         final FastDateFormat format3 = FastDateFormat.getInstance("MM/DD/yyyy", Locale.GERMANY); [EOL]         assertTrue(format1 != format2); [EOL]         assertSame(format1, format3); [EOL]         assertEquals(Locale.GERMANY, format1.getLocale()); [EOL]     } finally { [EOL]         Locale.setDefault(realDefaultLocale); [EOL]     } [EOL] }
@Test [EOL] public void test_getInstance_String_Locale() { [EOL]     final Locale realDefaultLocale = Locale.getDefault(); [EOL]     try { [EOL]         Locale.setDefault(Locale.US); [EOL]         final FastDateFormat format1 = FastDateFormat.getInstance("MM/DD/yyyy", Locale.GERMANY); [EOL]         final FastDateFormat format2 = FastDateFormat.getInstance("MM/DD/yyyy"); [EOL]         final FastDateFormat format3 = FastDateFormat.getInstance("MM/DD/yyyy", Locale.GERMANY); [EOL]         assertTrue(format1 != format2); [EOL]         assertSame(format1, format3); [EOL]         assertEquals(Locale.GERMANY, format1.getLocale()); [EOL]     } finally { [EOL]         Locale.setDefault(realDefaultLocale); [EOL]     } [EOL] }
@Test [EOL] public void test_getInstance_String_Locale() { [EOL]     final Locale realDefaultLocale = Locale.getDefault(); [EOL]     try { [EOL]         Locale.setDefault(Locale.US); [EOL]         final FastDateFormat format1 = FastDateFormat.getInstance("MM/DD/yyyy", Locale.GERMANY); [EOL]         final FastDateFormat format2 = FastDateFormat.getInstance("MM/DD/yyyy"); [EOL]         final FastDateFormat format3 = FastDateFormat.getInstance("MM/DD/yyyy", Locale.GERMANY); [EOL]         assertTrue(format1 != format2); [EOL]         assertSame(format1, format3); [EOL]         assertEquals(Locale.GERMANY, format1.getLocale()); [EOL]     } finally { [EOL]         Locale.setDefault(realDefaultLocale); [EOL]     } [EOL] }
@Test [EOL] public void test_getInstance_String_Locale() { [EOL]     final Locale realDefaultLocale = Locale.getDefault(); [EOL]     try { [EOL]         Locale.setDefault(Locale.US); [EOL]         final FastDateFormat format1 = FastDateFormat.getInstance("MM/DD/yyyy", Locale.GERMANY); [EOL]         final FastDateFormat format2 = FastDateFormat.getInstance("MM/DD/yyyy"); [EOL]         final FastDateFormat format3 = FastDateFormat.getInstance("MM/DD/yyyy", Locale.GERMANY); [EOL]         assertTrue(format1 != format2); [EOL]         assertSame(format1, format3); [EOL]         assertEquals(Locale.GERMANY, format1.getLocale()); [EOL]     } finally { [EOL]         Locale.setDefault(realDefaultLocale); [EOL]     } [EOL] }
@Test [EOL] public void test_getInstance_String_Locale() { [EOL]     final Locale realDefaultLocale = Locale.getDefault(); [EOL]     try { [EOL]         Locale.setDefault(Locale.US); [EOL]         final FastDateFormat format1 = FastDateFormat.getInstance("MM/DD/yyyy", Locale.GERMANY); [EOL]         final FastDateFormat format2 = FastDateFormat.getInstance("MM/DD/yyyy"); [EOL]         final FastDateFormat format3 = FastDateFormat.getInstance("MM/DD/yyyy", Locale.GERMANY); [EOL]         assertTrue(format1 != format2); [EOL]         assertSame(format1, format3); [EOL]         assertEquals(Locale.GERMANY, format1.getLocale()); [EOL]     } finally { [EOL]         Locale.setDefault(realDefaultLocale); [EOL]     } [EOL] }
@Test [EOL] public void test_getInstance_String_Locale() { [EOL]     final Locale realDefaultLocale = Locale.getDefault(); [EOL]     try { [EOL]         Locale.setDefault(Locale.US); [EOL]         final FastDateFormat format1 = FastDateFormat.getInstance("MM/DD/yyyy", Locale.GERMANY); [EOL]         final FastDateFormat format2 = FastDateFormat.getInstance("MM/DD/yyyy"); [EOL]         final FastDateFormat format3 = FastDateFormat.getInstance("MM/DD/yyyy", Locale.GERMANY); [EOL]         assertTrue(format1 != format2); [EOL]         assertSame(format1, format3); [EOL]         assertEquals(Locale.GERMANY, format1.getLocale()); [EOL]     } finally { [EOL]         Locale.setDefault(realDefaultLocale); [EOL]     } [EOL] }
@Test [EOL] public void test_getInstance_String_Locale() { [EOL]     final Locale realDefaultLocale = Locale.getDefault(); [EOL]     try { [EOL]         Locale.setDefault(Locale.US); [EOL]         final FastDateFormat format1 = FastDateFormat.getInstance("MM/DD/yyyy", Locale.GERMANY); [EOL]         final FastDateFormat format2 = FastDateFormat.getInstance("MM/DD/yyyy"); [EOL]         final FastDateFormat format3 = FastDateFormat.getInstance("MM/DD/yyyy", Locale.GERMANY); [EOL]         assertTrue(format1 != format2); [EOL]         assertSame(format1, format3); [EOL]         assertEquals(Locale.GERMANY, format1.getLocale()); [EOL]     } finally { [EOL]         Locale.setDefault(realDefaultLocale); [EOL]     } [EOL] }
@Test [EOL] public void test_getInstance_String_Locale() { [EOL]     final Locale realDefaultLocale = Locale.getDefault(); [EOL]     try { [EOL]         Locale.setDefault(Locale.US); [EOL]         final FastDateFormat format1 = FastDateFormat.getInstance("MM/DD/yyyy", Locale.GERMANY); [EOL]         final FastDateFormat format2 = FastDateFormat.getInstance("MM/DD/yyyy"); [EOL]         final FastDateFormat format3 = FastDateFormat.getInstance("MM/DD/yyyy", Locale.GERMANY); [EOL]         assertTrue(format1 != format2); [EOL]         assertSame(format1, format3); [EOL]         assertEquals(Locale.GERMANY, format1.getLocale()); [EOL]     } finally { [EOL]         Locale.setDefault(realDefaultLocale); [EOL]     } [EOL] }
@Test [EOL] public void test_getInstance_String_Locale() { [EOL]     final Locale realDefaultLocale = Locale.getDefault(); [EOL]     try { [EOL]         Locale.setDefault(Locale.US); [EOL]         final FastDateFormat format1 = FastDateFormat.getInstance("MM/DD/yyyy", Locale.GERMANY); [EOL]         final FastDateFormat format2 = FastDateFormat.getInstance("MM/DD/yyyy"); [EOL]         final FastDateFormat format3 = FastDateFormat.getInstance("MM/DD/yyyy", Locale.GERMANY); [EOL]         assertTrue(format1 != format2); [EOL]         assertSame(format1, format3); [EOL]         assertEquals(Locale.GERMANY, format1.getLocale()); [EOL]     } finally { [EOL]         Locale.setDefault(realDefaultLocale); [EOL]     } [EOL] }
@Test [EOL] public void test_getInstance_String_Locale() { [EOL]     final Locale realDefaultLocale = Locale.getDefault(); [EOL]     try { [EOL]         Locale.setDefault(Locale.US); [EOL]         final FastDateFormat format1 = FastDateFormat.getInstance("MM/DD/yyyy", Locale.GERMANY); [EOL]         final FastDateFormat format2 = FastDateFormat.getInstance("MM/DD/yyyy"); [EOL]         final FastDateFormat format3 = FastDateFormat.getInstance("MM/DD/yyyy", Locale.GERMANY); [EOL]         assertTrue(format1 != format2); [EOL]         assertSame(format1, format3); [EOL]         assertEquals(Locale.GERMANY, format1.getLocale()); [EOL]     } finally { [EOL]         Locale.setDefault(realDefaultLocale); [EOL]     } [EOL] }
@Test [EOL] public void test_getInstance_String_Locale() { [EOL]     final Locale realDefaultLocale = Locale.getDefault(); [EOL]     try { [EOL]         Locale.setDefault(Locale.US); [EOL]         final FastDateFormat format1 = FastDateFormat.getInstance("MM/DD/yyyy", Locale.GERMANY); [EOL]         final FastDateFormat format2 = FastDateFormat.getInstance("MM/DD/yyyy"); [EOL]         final FastDateFormat format3 = FastDateFormat.getInstance("MM/DD/yyyy", Locale.GERMANY); [EOL]         assertTrue(format1 != format2); [EOL]         assertSame(format1, format3); [EOL]         assertEquals(Locale.GERMANY, format1.getLocale()); [EOL]     } finally { [EOL]         Locale.setDefault(realDefaultLocale); [EOL]     } [EOL] }
@Test [EOL] public void test_getInstance_String_Locale() { [EOL]     final Locale realDefaultLocale = Locale.getDefault(); [EOL]     try { [EOL]         Locale.setDefault(Locale.US); [EOL]         final FastDateFormat format1 = FastDateFormat.getInstance("MM/DD/yyyy", Locale.GERMANY); [EOL]         final FastDateFormat format2 = FastDateFormat.getInstance("MM/DD/yyyy"); [EOL]         final FastDateFormat format3 = FastDateFormat.getInstance("MM/DD/yyyy", Locale.GERMANY); [EOL]         assertTrue(format1 != format2); [EOL]         assertSame(format1, format3); [EOL]         assertEquals(Locale.GERMANY, format1.getLocale()); [EOL]     } finally { [EOL]         Locale.setDefault(realDefaultLocale); [EOL]     } [EOL] }
@Test [EOL] public void test_getInstance_String_Locale() { [EOL]     final Locale realDefaultLocale = Locale.getDefault(); [EOL]     try { [EOL]         Locale.setDefault(Locale.US); [EOL]         final FastDateFormat format1 = FastDateFormat.getInstance("MM/DD/yyyy", Locale.GERMANY); [EOL]         final FastDateFormat format2 = FastDateFormat.getInstance("MM/DD/yyyy"); [EOL]         final FastDateFormat format3 = FastDateFormat.getInstance("MM/DD/yyyy", Locale.GERMANY); [EOL]         assertTrue(format1 != format2); [EOL]         assertSame(format1, format3); [EOL]         assertEquals(Locale.GERMANY, format1.getLocale()); [EOL]     } finally { [EOL]         Locale.setDefault(realDefaultLocale); [EOL]     } [EOL] }
@Test [EOL] public void test_getInstance_String_Locale() { [EOL]     final Locale realDefaultLocale = Locale.getDefault(); [EOL]     try { [EOL]         Locale.setDefault(Locale.US); [EOL]         final FastDateFormat format1 = FastDateFormat.getInstance("MM/DD/yyyy", Locale.GERMANY); [EOL]         final FastDateFormat format2 = FastDateFormat.getInstance("MM/DD/yyyy"); [EOL]         final FastDateFormat format3 = FastDateFormat.getInstance("MM/DD/yyyy", Locale.GERMANY); [EOL]         assertTrue(format1 != format2); [EOL]         assertSame(format1, format3); [EOL]         assertEquals(Locale.GERMANY, format1.getLocale()); [EOL]     } finally { [EOL]         Locale.setDefault(realDefaultLocale); [EOL]     } [EOL] }
@Test [EOL] public void test_getInstance_String_Locale() { [EOL]     final Locale realDefaultLocale = Locale.getDefault(); [EOL]     try { [EOL]         Locale.setDefault(Locale.US); [EOL]         final FastDateFormat format1 = FastDateFormat.getInstance("MM/DD/yyyy", Locale.GERMANY); [EOL]         final FastDateFormat format2 = FastDateFormat.getInstance("MM/DD/yyyy"); [EOL]         final FastDateFormat format3 = FastDateFormat.getInstance("MM/DD/yyyy", Locale.GERMANY); [EOL]         assertTrue(format1 != format2); [EOL]         assertSame(format1, format3); [EOL]         assertEquals(Locale.GERMANY, format1.getLocale()); [EOL]     } finally { [EOL]         Locale.setDefault(realDefaultLocale); [EOL]     } [EOL] }
@Test [EOL] public void test_getInstance_String_Locale() { [EOL]     final Locale realDefaultLocale = Locale.getDefault(); [EOL]     try { [EOL]         Locale.setDefault(Locale.US); [EOL]         final FastDateFormat format1 = FastDateFormat.getInstance("MM/DD/yyyy", Locale.GERMANY); [EOL]         final FastDateFormat format2 = FastDateFormat.getInstance("MM/DD/yyyy"); [EOL]         final FastDateFormat format3 = FastDateFormat.getInstance("MM/DD/yyyy", Locale.GERMANY); [EOL]         assertTrue(format1 != format2); [EOL]         assertSame(format1, format3); [EOL]         assertEquals(Locale.GERMANY, format1.getLocale()); [EOL]     } finally { [EOL]         Locale.setDefault(realDefaultLocale); [EOL]     } [EOL] }
@Test [EOL] public void test_getInstance_String_Locale() { [EOL]     final Locale realDefaultLocale = Locale.getDefault(); [EOL]     try { [EOL]         Locale.setDefault(Locale.US); [EOL]         final FastDateFormat format1 = FastDateFormat.getInstance("MM/DD/yyyy", Locale.GERMANY); [EOL]         final FastDateFormat format2 = FastDateFormat.getInstance("MM/DD/yyyy"); [EOL]         final FastDateFormat format3 = FastDateFormat.getInstance("MM/DD/yyyy", Locale.GERMANY); [EOL]         assertTrue(format1 != format2); [EOL]         assertSame(format1, format3); [EOL]         assertEquals(Locale.GERMANY, format1.getLocale()); [EOL]     } finally { [EOL]         Locale.setDefault(realDefaultLocale); [EOL]     } [EOL] }
@Test [EOL] public void test_getInstance_String_Locale() { [EOL]     final Locale realDefaultLocale = Locale.getDefault(); [EOL]     try { [EOL]         Locale.setDefault(Locale.US); [EOL]         final FastDateFormat format1 = FastDateFormat.getInstance("MM/DD/yyyy", Locale.GERMANY); [EOL]         final FastDateFormat format2 = FastDateFormat.getInstance("MM/DD/yyyy"); [EOL]         final FastDateFormat format3 = FastDateFormat.getInstance("MM/DD/yyyy", Locale.GERMANY); [EOL]         assertTrue(format1 != format2); [EOL]         assertSame(format1, format3); [EOL]         assertEquals(Locale.GERMANY, format1.getLocale()); [EOL]     } finally { [EOL]         Locale.setDefault(realDefaultLocale); [EOL]     } [EOL] }
@Test [EOL] public void test_getInstance_String_Locale() { [EOL]     final Locale realDefaultLocale = Locale.getDefault(); [EOL]     try { [EOL]         Locale.setDefault(Locale.US); [EOL]         final FastDateFormat format1 = FastDateFormat.getInstance("MM/DD/yyyy", Locale.GERMANY); [EOL]         final FastDateFormat format2 = FastDateFormat.getInstance("MM/DD/yyyy"); [EOL]         final FastDateFormat format3 = FastDateFormat.getInstance("MM/DD/yyyy", Locale.GERMANY); [EOL]         assertTrue(format1 != format2); [EOL]         assertSame(format1, format3); [EOL]         assertEquals(Locale.GERMANY, format1.getLocale()); [EOL]     } finally { [EOL]         Locale.setDefault(realDefaultLocale); [EOL]     } [EOL] }
@Test [EOL] public void test_getInstance_String_Locale() { [EOL]     final Locale realDefaultLocale = Locale.getDefault(); [EOL]     try { [EOL]         Locale.setDefault(Locale.US); [EOL]         final FastDateFormat format1 = FastDateFormat.getInstance("MM/DD/yyyy", Locale.GERMANY); [EOL]         final FastDateFormat format2 = FastDateFormat.getInstance("MM/DD/yyyy"); [EOL]         final FastDateFormat format3 = FastDateFormat.getInstance("MM/DD/yyyy", Locale.GERMANY); [EOL]         assertTrue(format1 != format2); [EOL]         assertSame(format1, format3); [EOL]         assertEquals(Locale.GERMANY, format1.getLocale()); [EOL]     } finally { [EOL]         Locale.setDefault(realDefaultLocale); [EOL]     } [EOL] }
@Test [EOL] public void test_getInstance_String_Locale() { [EOL]     final Locale realDefaultLocale = Locale.getDefault(); [EOL]     try { [EOL]         Locale.setDefault(Locale.US); [EOL]         final FastDateFormat format1 = FastDateFormat.getInstance("MM/DD/yyyy", Locale.GERMANY); [EOL]         final FastDateFormat format2 = FastDateFormat.getInstance("MM/DD/yyyy"); [EOL]         final FastDateFormat format3 = FastDateFormat.getInstance("MM/DD/yyyy", Locale.GERMANY); [EOL]         assertTrue(format1 != format2); [EOL]         assertSame(format1, format3); [EOL]         assertEquals(Locale.GERMANY, format1.getLocale()); [EOL]     } finally { [EOL]         Locale.setDefault(realDefaultLocale); [EOL]     } [EOL] }
@Test [EOL] public void test_getInstance_String_Locale() { [EOL]     final Locale realDefaultLocale = Locale.getDefault(); [EOL]     try { [EOL]         Locale.setDefault(Locale.US); [EOL]         final FastDateFormat format1 = FastDateFormat.getInstance("MM/DD/yyyy", Locale.GERMANY); [EOL]         final FastDateFormat format2 = FastDateFormat.getInstance("MM/DD/yyyy"); [EOL]         final FastDateFormat format3 = FastDateFormat.getInstance("MM/DD/yyyy", Locale.GERMANY); [EOL]         assertTrue(format1 != format2); [EOL]         assertSame(format1, format3); [EOL]         assertEquals(Locale.GERMANY, format1.getLocale()); [EOL]     } finally { [EOL]         Locale.setDefault(realDefaultLocale); [EOL]     } [EOL] }
@Test [EOL] public void test_getInstance_String_Locale() { [EOL]     final Locale realDefaultLocale = Locale.getDefault(); [EOL]     try { [EOL]         Locale.setDefault(Locale.US); [EOL]         final FastDateFormat format1 = FastDateFormat.getInstance("MM/DD/yyyy", Locale.GERMANY); [EOL]         final FastDateFormat format2 = FastDateFormat.getInstance("MM/DD/yyyy"); [EOL]         final FastDateFormat format3 = FastDateFormat.getInstance("MM/DD/yyyy", Locale.GERMANY); [EOL]         assertTrue(format1 != format2); [EOL]         assertSame(format1, format3); [EOL]         assertEquals(Locale.GERMANY, format1.getLocale()); [EOL]     } finally { [EOL]         Locale.setDefault(realDefaultLocale); [EOL]     } [EOL] }
@Test [EOL] public void test_getInstance_String_Locale() { [EOL]     final Locale realDefaultLocale = Locale.getDefault(); [EOL]     try { [EOL]         Locale.setDefault(Locale.US); [EOL]         final FastDateFormat format1 = FastDateFormat.getInstance("MM/DD/yyyy", Locale.GERMANY); [EOL]         final FastDateFormat format2 = FastDateFormat.getInstance("MM/DD/yyyy"); [EOL]         final FastDateFormat format3 = FastDateFormat.getInstance("MM/DD/yyyy", Locale.GERMANY); [EOL]         assertTrue(format1 != format2); [EOL]         assertSame(format1, format3); [EOL]         assertEquals(Locale.GERMANY, format1.getLocale()); [EOL]     } finally { [EOL]         Locale.setDefault(realDefaultLocale); [EOL]     } [EOL] }
@Test [EOL] public void test_getInstance_String_Locale() { [EOL]     final Locale realDefaultLocale = Locale.getDefault(); [EOL]     try { [EOL]         Locale.setDefault(Locale.US); [EOL]         final FastDateFormat format1 = FastDateFormat.getInstance("MM/DD/yyyy", Locale.GERMANY); [EOL]         final FastDateFormat format2 = FastDateFormat.getInstance("MM/DD/yyyy"); [EOL]         final FastDateFormat format3 = FastDateFormat.getInstance("MM/DD/yyyy", Locale.GERMANY); [EOL]         assertTrue(format1 != format2); [EOL]         assertSame(format1, format3); [EOL]         assertEquals(Locale.GERMANY, format1.getLocale()); [EOL]     } finally { [EOL]         Locale.setDefault(realDefaultLocale); [EOL]     } [EOL] }
@Test [EOL] public void test_getInstance_String_Locale() { [EOL]     final Locale realDefaultLocale = Locale.getDefault(); [EOL]     try { [EOL]         Locale.setDefault(Locale.US); [EOL]         final FastDateFormat format1 = FastDateFormat.getInstance("MM/DD/yyyy", Locale.GERMANY); [EOL]         final FastDateFormat format2 = FastDateFormat.getInstance("MM/DD/yyyy"); [EOL]         final FastDateFormat format3 = FastDateFormat.getInstance("MM/DD/yyyy", Locale.GERMANY); [EOL]         assertTrue(format1 != format2); [EOL]         assertSame(format1, format3); [EOL]         assertEquals(Locale.GERMANY, format1.getLocale()); [EOL]     } finally { [EOL]         Locale.setDefault(realDefaultLocale); [EOL]     } [EOL] }
@Test [EOL] public void test_getInstance_String_Locale() { [EOL]     final Locale realDefaultLocale = Locale.getDefault(); [EOL]     try { [EOL]         Locale.setDefault(Locale.US); [EOL]         final FastDateFormat format1 = FastDateFormat.getInstance("MM/DD/yyyy", Locale.GERMANY); [EOL]         final FastDateFormat format2 = FastDateFormat.getInstance("MM/DD/yyyy"); [EOL]         final FastDateFormat format3 = FastDateFormat.getInstance("MM/DD/yyyy", Locale.GERMANY); [EOL]         assertTrue(format1 != format2); [EOL]         assertSame(format1, format3); [EOL]         assertEquals(Locale.GERMANY, format1.getLocale()); [EOL]     } finally { [EOL]         Locale.setDefault(realDefaultLocale); [EOL]     } [EOL] }
@Test [EOL] public void test_getInstance_String_Locale() { [EOL]     final Locale realDefaultLocale = Locale.getDefault(); [EOL]     try { [EOL]         Locale.setDefault(Locale.US); [EOL]         final FastDateFormat format1 = FastDateFormat.getInstance("MM/DD/yyyy", Locale.GERMANY); [EOL]         final FastDateFormat format2 = FastDateFormat.getInstance("MM/DD/yyyy"); [EOL]         final FastDateFormat format3 = FastDateFormat.getInstance("MM/DD/yyyy", Locale.GERMANY); [EOL]         assertTrue(format1 != format2); [EOL]         assertSame(format1, format3); [EOL]         assertEquals(Locale.GERMANY, format1.getLocale()); [EOL]     } finally { [EOL]         Locale.setDefault(realDefaultLocale); [EOL]     } [EOL] }
@Test [EOL] public void test_getInstance_String_Locale() { [EOL]     final Locale realDefaultLocale = Locale.getDefault(); [EOL]     try { [EOL]         Locale.setDefault(Locale.US); [EOL]         final FastDateFormat format1 = FastDateFormat.getInstance("MM/DD/yyyy", Locale.GERMANY); [EOL]         final FastDateFormat format2 = FastDateFormat.getInstance("MM/DD/yyyy"); [EOL]         final FastDateFormat format3 = FastDateFormat.getInstance("MM/DD/yyyy", Locale.GERMANY); [EOL]         assertTrue(format1 != format2); [EOL]         assertSame(format1, format3); [EOL]         assertEquals(Locale.GERMANY, format1.getLocale()); [EOL]     } finally { [EOL]         Locale.setDefault(realDefaultLocale); [EOL]     } [EOL] }
@Test [EOL] public void test_getInstance_String_Locale() { [EOL]     final Locale realDefaultLocale = Locale.getDefault(); [EOL]     try { [EOL]         Locale.setDefault(Locale.US); [EOL]         final FastDateFormat format1 = FastDateFormat.getInstance("MM/DD/yyyy", Locale.GERMANY); [EOL]         final FastDateFormat format2 = FastDateFormat.getInstance("MM/DD/yyyy"); [EOL]         final FastDateFormat format3 = FastDateFormat.getInstance("MM/DD/yyyy", Locale.GERMANY); [EOL]         assertTrue(format1 != format2); [EOL]         assertSame(format1, format3); [EOL]         assertEquals(Locale.GERMANY, format1.getLocale()); [EOL]     } finally { [EOL]         Locale.setDefault(realDefaultLocale); [EOL]     } [EOL] }
@Test [EOL] public void test_getInstance_String_Locale() { [EOL]     final Locale realDefaultLocale = Locale.getDefault(); [EOL]     try { [EOL]         Locale.setDefault(Locale.US); [EOL]         final FastDateFormat format1 = FastDateFormat.getInstance("MM/DD/yyyy", Locale.GERMANY); [EOL]         final FastDateFormat format2 = FastDateFormat.getInstance("MM/DD/yyyy"); [EOL]         final FastDateFormat format3 = FastDateFormat.getInstance("MM/DD/yyyy", Locale.GERMANY); [EOL]         assertTrue(format1 != format2); [EOL]         assertSame(format1, format3); [EOL]         assertEquals(Locale.GERMANY, format1.getLocale()); [EOL]     } finally { [EOL]         Locale.setDefault(realDefaultLocale); [EOL]     } [EOL] }
@Test [EOL] public void test_getInstance_String_Locale() { [EOL]     final Locale realDefaultLocale = Locale.getDefault(); [EOL]     try { [EOL]         Locale.setDefault(Locale.US); [EOL]         final FastDateFormat format1 = FastDateFormat.getInstance("MM/DD/yyyy", Locale.GERMANY); [EOL]         final FastDateFormat format2 = FastDateFormat.getInstance("MM/DD/yyyy"); [EOL]         final FastDateFormat format3 = FastDateFormat.getInstance("MM/DD/yyyy", Locale.GERMANY); [EOL]         assertTrue(format1 != format2); [EOL]         assertSame(format1, format3); [EOL]         assertEquals(Locale.GERMANY, format1.getLocale()); [EOL]     } finally { [EOL]         Locale.setDefault(realDefaultLocale); [EOL]     } [EOL] }
@Test [EOL] public void test_getInstance_String_Locale() { [EOL]     final Locale realDefaultLocale = Locale.getDefault(); [EOL]     try { [EOL]         Locale.setDefault(Locale.US); [EOL]         final FastDateFormat format1 = FastDateFormat.getInstance("MM/DD/yyyy", Locale.GERMANY); [EOL]         final FastDateFormat format2 = FastDateFormat.getInstance("MM/DD/yyyy"); [EOL]         final FastDateFormat format3 = FastDateFormat.getInstance("MM/DD/yyyy", Locale.GERMANY); [EOL]         assertTrue(format1 != format2); [EOL]         assertSame(format1, format3); [EOL]         assertEquals(Locale.GERMANY, format1.getLocale()); [EOL]     } finally { [EOL]         Locale.setDefault(realDefaultLocale); [EOL]     } [EOL] }
@Test [EOL] public void test_getInstance_String_Locale() { [EOL]     final Locale realDefaultLocale = Locale.getDefault(); [EOL]     try { [EOL]         Locale.setDefault(Locale.US); [EOL]         final FastDateFormat format1 = FastDateFormat.getInstance("MM/DD/yyyy", Locale.GERMANY); [EOL]         final FastDateFormat format2 = FastDateFormat.getInstance("MM/DD/yyyy"); [EOL]         final FastDateFormat format3 = FastDateFormat.getInstance("MM/DD/yyyy", Locale.GERMANY); [EOL]         assertTrue(format1 != format2); [EOL]         assertSame(format1, format3); [EOL]         assertEquals(Locale.GERMANY, format1.getLocale()); [EOL]     } finally { [EOL]         Locale.setDefault(realDefaultLocale); [EOL]     } [EOL] }
@Test [EOL] public void test_getInstance_String_Locale() { [EOL]     final Locale realDefaultLocale = Locale.getDefault(); [EOL]     try { [EOL]         Locale.setDefault(Locale.US); [EOL]         final FastDateFormat format1 = FastDateFormat.getInstance("MM/DD/yyyy", Locale.GERMANY); [EOL]         final FastDateFormat format2 = FastDateFormat.getInstance("MM/DD/yyyy"); [EOL]         final FastDateFormat format3 = FastDateFormat.getInstance("MM/DD/yyyy", Locale.GERMANY); [EOL]         assertTrue(format1 != format2); [EOL]         assertSame(format1, format3); [EOL]         assertEquals(Locale.GERMANY, format1.getLocale()); [EOL]     } finally { [EOL]         Locale.setDefault(realDefaultLocale); [EOL]     } [EOL] }
@Test [EOL] public void test_getInstance_String_Locale() { [EOL]     final Locale realDefaultLocale = Locale.getDefault(); [EOL]     try { [EOL]         Locale.setDefault(Locale.US); [EOL]         final FastDateFormat format1 = FastDateFormat.getInstance("MM/DD/yyyy", Locale.GERMANY); [EOL]         final FastDateFormat format2 = FastDateFormat.getInstance("MM/DD/yyyy"); [EOL]         final FastDateFormat format3 = FastDateFormat.getInstance("MM/DD/yyyy", Locale.GERMANY); [EOL]         assertTrue(format1 != format2); [EOL]         assertSame(format1, format3); [EOL]         assertEquals(Locale.GERMANY, format1.getLocale()); [EOL]     } finally { [EOL]         Locale.setDefault(realDefaultLocale); [EOL]     } [EOL] }
@Test [EOL] public void testGetJavaHome() { [EOL]     final File dir = SystemUtils.getJavaHome(); [EOL]     Assert.assertNotNull(dir); [EOL]     Assert.assertTrue(dir.exists()); [EOL] }
@Test [EOL] public void testOSMatchesNameAndVersion() { [EOL]     String osName = null; [EOL]     String osVersion = null; [EOL]     assertFalse(SystemUtils.isOSMatch(osName, osVersion, "Windows 9", "4.1")); [EOL]     osName = ""; [EOL]     osVersion = ""; [EOL]     assertFalse(SystemUtils.isOSMatch(osName, osVersion, "Windows 9", "4.1")); [EOL]     osName = "Windows 95"; [EOL]     osVersion = "4.0"; [EOL]     assertFalse(SystemUtils.isOSMatch(osName, osVersion, "Windows 9", "4.1")); [EOL]     osName = "Windows 95"; [EOL]     osVersion = "4.1"; [EOL]     assertTrue(SystemUtils.isOSMatch(osName, osVersion, "Windows 9", "4.1")); [EOL]     osName = "Windows 98"; [EOL]     osVersion = "4.1"; [EOL]     assertTrue(SystemUtils.isOSMatch(osName, osVersion, "Windows 9", "4.1")); [EOL]     osName = "Windows NT"; [EOL]     osVersion = "4.0"; [EOL]     assertFalse(SystemUtils.isOSMatch(osName, osVersion, "Windows 9", "4.1")); [EOL]     osName = "OS/2"; [EOL]     osVersion = "4.0"; [EOL]     assertFalse(SystemUtils.isOSMatch(osName, osVersion, "Windows 9", "4.1")); [EOL] }
@Test [EOL] public void testOSMatchesNameAndVersion() { [EOL]     String osName = null; [EOL]     String osVersion = null; [EOL]     assertFalse(SystemUtils.isOSMatch(osName, osVersion, "Windows 9", "4.1")); [EOL]     osName = ""; [EOL]     osVersion = ""; [EOL]     assertFalse(SystemUtils.isOSMatch(osName, osVersion, "Windows 9", "4.1")); [EOL]     osName = "Windows 95"; [EOL]     osVersion = "4.0"; [EOL]     assertFalse(SystemUtils.isOSMatch(osName, osVersion, "Windows 9", "4.1")); [EOL]     osName = "Windows 95"; [EOL]     osVersion = "4.1"; [EOL]     assertTrue(SystemUtils.isOSMatch(osName, osVersion, "Windows 9", "4.1")); [EOL]     osName = "Windows 98"; [EOL]     osVersion = "4.1"; [EOL]     assertTrue(SystemUtils.isOSMatch(osName, osVersion, "Windows 9", "4.1")); [EOL]     osName = "Windows NT"; [EOL]     osVersion = "4.0"; [EOL]     assertFalse(SystemUtils.isOSMatch(osName, osVersion, "Windows 9", "4.1")); [EOL]     osName = "OS/2"; [EOL]     osVersion = "4.0"; [EOL]     assertFalse(SystemUtils.isOSMatch(osName, osVersion, "Windows 9", "4.1")); [EOL] }
@Test [EOL] public void testOSMatchesName() { [EOL]     String osName = null; [EOL]     assertFalse(SystemUtils.isOSNameMatch(osName, "Windows")); [EOL]     osName = ""; [EOL]     assertFalse(SystemUtils.isOSNameMatch(osName, "Windows")); [EOL]     osName = "Windows 95"; [EOL]     assertTrue(SystemUtils.isOSNameMatch(osName, "Windows")); [EOL]     osName = "Windows NT"; [EOL]     assertTrue(SystemUtils.isOSNameMatch(osName, "Windows")); [EOL]     osName = "OS/2"; [EOL]     assertFalse(SystemUtils.isOSNameMatch(osName, "Windows")); [EOL] }
@Test [EOL] public void testToString() throws Exception { [EOL]     assertEquals("(null,null,null)", MutableTriple.of(null, null, null).toString()); [EOL]     assertEquals("(null,two,null)", MutableTriple.of(null, "two", null).toString()); [EOL]     assertEquals("(one,null,null)", MutableTriple.of("one", null, null).toString()); [EOL]     assertEquals("(one,two,null)", MutableTriple.of("one", "two", null).toString()); [EOL]     assertEquals("(null,two,three)", MutableTriple.of(null, "two", "three").toString()); [EOL]     assertEquals("(one,null,three)", MutableTriple.of("one", null, "three").toString()); [EOL]     assertEquals("(one,two,three)", MutableTriple.of("one", "two", "three").toString()); [EOL] }
@Test [EOL] public void testToString() throws Exception { [EOL]     assertEquals("(null,null,null)", MutableTriple.of(null, null, null).toString()); [EOL]     assertEquals("(null,two,null)", MutableTriple.of(null, "two", null).toString()); [EOL]     assertEquals("(one,null,null)", MutableTriple.of("one", null, null).toString()); [EOL]     assertEquals("(one,two,null)", MutableTriple.of("one", "two", null).toString()); [EOL]     assertEquals("(null,two,three)", MutableTriple.of(null, "two", "three").toString()); [EOL]     assertEquals("(one,null,three)", MutableTriple.of("one", null, "three").toString()); [EOL]     assertEquals("(one,two,three)", MutableTriple.of("one", "two", "three").toString()); [EOL] }
@Test [EOL] public void testMutate() throws Exception { [EOL]     final MutableTriple<Integer, String, Boolean> triple = new MutableTriple<Integer, String, Boolean>(0, "foo", Boolean.TRUE); [EOL]     triple.setLeft(42); [EOL]     triple.setMiddle("bar"); [EOL]     triple.setRight(Boolean.FALSE); [EOL]     assertEquals(42, triple.getLeft().intValue()); [EOL]     assertEquals("bar", triple.getMiddle()); [EOL]     assertEquals(Boolean.FALSE, triple.getRight()); [EOL] }
@Test [EOL] public void testMutate() throws Exception { [EOL]     final MutableTriple<Integer, String, Boolean> triple = new MutableTriple<Integer, String, Boolean>(0, "foo", Boolean.TRUE); [EOL]     triple.setLeft(42); [EOL]     triple.setMiddle("bar"); [EOL]     triple.setRight(Boolean.FALSE); [EOL]     assertEquals(42, triple.getLeft().intValue()); [EOL]     assertEquals("bar", triple.getMiddle()); [EOL]     assertEquals(Boolean.FALSE, triple.getRight()); [EOL] }
@Test [EOL] public void testMutate() throws Exception { [EOL]     final MutableTriple<Integer, String, Boolean> triple = new MutableTriple<Integer, String, Boolean>(0, "foo", Boolean.TRUE); [EOL]     triple.setLeft(42); [EOL]     triple.setMiddle("bar"); [EOL]     triple.setRight(Boolean.FALSE); [EOL]     assertEquals(42, triple.getLeft().intValue()); [EOL]     assertEquals("bar", triple.getMiddle()); [EOL]     assertEquals(Boolean.FALSE, triple.getRight()); [EOL] }
@Test [EOL] public void testMutate() throws Exception { [EOL]     final MutableTriple<Integer, String, Boolean> triple = new MutableTriple<Integer, String, Boolean>(0, "foo", Boolean.TRUE); [EOL]     triple.setLeft(42); [EOL]     triple.setMiddle("bar"); [EOL]     triple.setRight(Boolean.FALSE); [EOL]     assertEquals(42, triple.getLeft().intValue()); [EOL]     assertEquals("bar", triple.getMiddle()); [EOL]     assertEquals(Boolean.FALSE, triple.getRight()); [EOL] }
@Test [EOL] public void testMutate() throws Exception { [EOL]     final MutableTriple<Integer, String, Boolean> triple = new MutableTriple<Integer, String, Boolean>(0, "foo", Boolean.TRUE); [EOL]     triple.setLeft(42); [EOL]     triple.setMiddle("bar"); [EOL]     triple.setRight(Boolean.FALSE); [EOL]     assertEquals(42, triple.getLeft().intValue()); [EOL]     assertEquals("bar", triple.getMiddle()); [EOL]     assertEquals(Boolean.FALSE, triple.getRight()); [EOL] }
@Test [EOL] public void testMutate() throws Exception { [EOL]     final MutableTriple<Integer, String, Boolean> triple = new MutableTriple<Integer, String, Boolean>(0, "foo", Boolean.TRUE); [EOL]     triple.setLeft(42); [EOL]     triple.setMiddle("bar"); [EOL]     triple.setRight(Boolean.FALSE); [EOL]     assertEquals(42, triple.getLeft().intValue()); [EOL]     assertEquals("bar", triple.getMiddle()); [EOL]     assertEquals(Boolean.FALSE, triple.getRight()); [EOL] }
@Test [EOL] public void testMutate() throws Exception { [EOL]     final MutableTriple<Integer, String, Boolean> triple = new MutableTriple<Integer, String, Boolean>(0, "foo", Boolean.TRUE); [EOL]     triple.setLeft(42); [EOL]     triple.setMiddle("bar"); [EOL]     triple.setRight(Boolean.FALSE); [EOL]     assertEquals(42, triple.getLeft().intValue()); [EOL]     assertEquals("bar", triple.getMiddle()); [EOL]     assertEquals(Boolean.FALSE, triple.getRight()); [EOL] }
@Test(expected = IllegalArgumentException.class) [EOL] public void testGetFieldForceAccessIllegalArgumentException2() { [EOL]     FieldUtils.getField(PublicChild.class, null, true); [EOL] }
@Test(expected = IllegalArgumentException.class) [EOL] public void testGetFieldForceAccessIllegalArgumentException2() { [EOL]     FieldUtils.getField(PublicChild.class, null, true); [EOL] }
@Test(expected = IllegalArgumentException.class) [EOL] public void testGetFieldForceAccessIllegalArgumentException2() { [EOL]     FieldUtils.getField(PublicChild.class, null, true); [EOL] }
@Test(expected = IllegalArgumentException.class) [EOL] public void testGetFieldForceAccessIllegalArgumentException2() { [EOL]     FieldUtils.getField(PublicChild.class, null, true); [EOL] }
@Test(expected = IllegalArgumentException.class) [EOL] public void testGetFieldForceAccessIllegalArgumentException2() { [EOL]     FieldUtils.getField(PublicChild.class, null, true); [EOL] }
@Test(expected = IllegalArgumentException.class) [EOL] public void testGetFieldForceAccessIllegalArgumentException2() { [EOL]     FieldUtils.getField(PublicChild.class, null, true); [EOL] }
@Test(expected = IllegalArgumentException.class) [EOL] public void testGetFieldForceAccessIllegalArgumentException2() { [EOL]     FieldUtils.getField(PublicChild.class, null, true); [EOL] }
@Test [EOL] public void testWriteDeclaredNamedStaticFieldForceAccess() throws Exception { [EOL]     FieldUtils.writeDeclaredStaticField(StaticContainer.class, "mutablePublic", "new", true); [EOL]     assertEquals("new", StaticContainer.mutablePublic); [EOL]     FieldUtils.writeDeclaredStaticField(StaticContainer.class, "mutableProtected", "new", true); [EOL]     assertEquals("new", StaticContainer.getMutableProtected()); [EOL]     FieldUtils.writeDeclaredStaticField(StaticContainer.class, "mutablePackage", "new", true); [EOL]     assertEquals("new", StaticContainer.getMutablePackage()); [EOL]     FieldUtils.writeDeclaredStaticField(StaticContainer.class, "mutablePrivate", "new", true); [EOL]     assertEquals("new", StaticContainer.getMutablePrivate()); [EOL]     try { [EOL]         FieldUtils.writeDeclaredStaticField(StaticContainer.class, "IMMUTABLE_PUBLIC", "new", true); [EOL]         fail("Expected IllegalAccessException"); [EOL]     } catch (final IllegalAccessException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeDeclaredStaticField(StaticContainer.class, "IMMUTABLE_PROTECTED", "new", true); [EOL]         fail("Expected IllegalAccessException"); [EOL]     } catch (final IllegalAccessException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeDeclaredStaticField(StaticContainer.class, "IMMUTABLE_PACKAGE", "new", true); [EOL]         fail("Expected IllegalAccessException"); [EOL]     } catch (final IllegalAccessException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeDeclaredStaticField(StaticContainer.class, "IMMUTABLE_PRIVATE", "new", true); [EOL]         fail("Expected IllegalAccessException"); [EOL]     } catch (final IllegalAccessException e) { [EOL]     } [EOL] }
@Test [EOL] public void testWriteDeclaredNamedStaticFieldForceAccess() throws Exception { [EOL]     FieldUtils.writeDeclaredStaticField(StaticContainer.class, "mutablePublic", "new", true); [EOL]     assertEquals("new", StaticContainer.mutablePublic); [EOL]     FieldUtils.writeDeclaredStaticField(StaticContainer.class, "mutableProtected", "new", true); [EOL]     assertEquals("new", StaticContainer.getMutableProtected()); [EOL]     FieldUtils.writeDeclaredStaticField(StaticContainer.class, "mutablePackage", "new", true); [EOL]     assertEquals("new", StaticContainer.getMutablePackage()); [EOL]     FieldUtils.writeDeclaredStaticField(StaticContainer.class, "mutablePrivate", "new", true); [EOL]     assertEquals("new", StaticContainer.getMutablePrivate()); [EOL]     try { [EOL]         FieldUtils.writeDeclaredStaticField(StaticContainer.class, "IMMUTABLE_PUBLIC", "new", true); [EOL]         fail("Expected IllegalAccessException"); [EOL]     } catch (final IllegalAccessException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeDeclaredStaticField(StaticContainer.class, "IMMUTABLE_PROTECTED", "new", true); [EOL]         fail("Expected IllegalAccessException"); [EOL]     } catch (final IllegalAccessException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeDeclaredStaticField(StaticContainer.class, "IMMUTABLE_PACKAGE", "new", true); [EOL]         fail("Expected IllegalAccessException"); [EOL]     } catch (final IllegalAccessException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeDeclaredStaticField(StaticContainer.class, "IMMUTABLE_PRIVATE", "new", true); [EOL]         fail("Expected IllegalAccessException"); [EOL]     } catch (final IllegalAccessException e) { [EOL]     } [EOL] }
@Test [EOL] public void testWriteDeclaredNamedStaticFieldForceAccess() throws Exception { [EOL]     FieldUtils.writeDeclaredStaticField(StaticContainer.class, "mutablePublic", "new", true); [EOL]     assertEquals("new", StaticContainer.mutablePublic); [EOL]     FieldUtils.writeDeclaredStaticField(StaticContainer.class, "mutableProtected", "new", true); [EOL]     assertEquals("new", StaticContainer.getMutableProtected()); [EOL]     FieldUtils.writeDeclaredStaticField(StaticContainer.class, "mutablePackage", "new", true); [EOL]     assertEquals("new", StaticContainer.getMutablePackage()); [EOL]     FieldUtils.writeDeclaredStaticField(StaticContainer.class, "mutablePrivate", "new", true); [EOL]     assertEquals("new", StaticContainer.getMutablePrivate()); [EOL]     try { [EOL]         FieldUtils.writeDeclaredStaticField(StaticContainer.class, "IMMUTABLE_PUBLIC", "new", true); [EOL]         fail("Expected IllegalAccessException"); [EOL]     } catch (final IllegalAccessException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeDeclaredStaticField(StaticContainer.class, "IMMUTABLE_PROTECTED", "new", true); [EOL]         fail("Expected IllegalAccessException"); [EOL]     } catch (final IllegalAccessException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeDeclaredStaticField(StaticContainer.class, "IMMUTABLE_PACKAGE", "new", true); [EOL]         fail("Expected IllegalAccessException"); [EOL]     } catch (final IllegalAccessException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeDeclaredStaticField(StaticContainer.class, "IMMUTABLE_PRIVATE", "new", true); [EOL]         fail("Expected IllegalAccessException"); [EOL]     } catch (final IllegalAccessException e) { [EOL]     } [EOL] }
@Test [EOL] public void testWriteDeclaredNamedStaticFieldForceAccess() throws Exception { [EOL]     FieldUtils.writeDeclaredStaticField(StaticContainer.class, "mutablePublic", "new", true); [EOL]     assertEquals("new", StaticContainer.mutablePublic); [EOL]     FieldUtils.writeDeclaredStaticField(StaticContainer.class, "mutableProtected", "new", true); [EOL]     assertEquals("new", StaticContainer.getMutableProtected()); [EOL]     FieldUtils.writeDeclaredStaticField(StaticContainer.class, "mutablePackage", "new", true); [EOL]     assertEquals("new", StaticContainer.getMutablePackage()); [EOL]     FieldUtils.writeDeclaredStaticField(StaticContainer.class, "mutablePrivate", "new", true); [EOL]     assertEquals("new", StaticContainer.getMutablePrivate()); [EOL]     try { [EOL]         FieldUtils.writeDeclaredStaticField(StaticContainer.class, "IMMUTABLE_PUBLIC", "new", true); [EOL]         fail("Expected IllegalAccessException"); [EOL]     } catch (final IllegalAccessException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeDeclaredStaticField(StaticContainer.class, "IMMUTABLE_PROTECTED", "new", true); [EOL]         fail("Expected IllegalAccessException"); [EOL]     } catch (final IllegalAccessException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeDeclaredStaticField(StaticContainer.class, "IMMUTABLE_PACKAGE", "new", true); [EOL]         fail("Expected IllegalAccessException"); [EOL]     } catch (final IllegalAccessException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeDeclaredStaticField(StaticContainer.class, "IMMUTABLE_PRIVATE", "new", true); [EOL]         fail("Expected IllegalAccessException"); [EOL]     } catch (final IllegalAccessException e) { [EOL]     } [EOL] }
@Test [EOL] public void testWriteDeclaredNamedStaticFieldForceAccess() throws Exception { [EOL]     FieldUtils.writeDeclaredStaticField(StaticContainer.class, "mutablePublic", "new", true); [EOL]     assertEquals("new", StaticContainer.mutablePublic); [EOL]     FieldUtils.writeDeclaredStaticField(StaticContainer.class, "mutableProtected", "new", true); [EOL]     assertEquals("new", StaticContainer.getMutableProtected()); [EOL]     FieldUtils.writeDeclaredStaticField(StaticContainer.class, "mutablePackage", "new", true); [EOL]     assertEquals("new", StaticContainer.getMutablePackage()); [EOL]     FieldUtils.writeDeclaredStaticField(StaticContainer.class, "mutablePrivate", "new", true); [EOL]     assertEquals("new", StaticContainer.getMutablePrivate()); [EOL]     try { [EOL]         FieldUtils.writeDeclaredStaticField(StaticContainer.class, "IMMUTABLE_PUBLIC", "new", true); [EOL]         fail("Expected IllegalAccessException"); [EOL]     } catch (final IllegalAccessException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeDeclaredStaticField(StaticContainer.class, "IMMUTABLE_PROTECTED", "new", true); [EOL]         fail("Expected IllegalAccessException"); [EOL]     } catch (final IllegalAccessException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeDeclaredStaticField(StaticContainer.class, "IMMUTABLE_PACKAGE", "new", true); [EOL]         fail("Expected IllegalAccessException"); [EOL]     } catch (final IllegalAccessException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeDeclaredStaticField(StaticContainer.class, "IMMUTABLE_PRIVATE", "new", true); [EOL]         fail("Expected IllegalAccessException"); [EOL]     } catch (final IllegalAccessException e) { [EOL]     } [EOL] }
@Test [EOL] public void testWriteDeclaredNamedStaticFieldForceAccess() throws Exception { [EOL]     FieldUtils.writeDeclaredStaticField(StaticContainer.class, "mutablePublic", "new", true); [EOL]     assertEquals("new", StaticContainer.mutablePublic); [EOL]     FieldUtils.writeDeclaredStaticField(StaticContainer.class, "mutableProtected", "new", true); [EOL]     assertEquals("new", StaticContainer.getMutableProtected()); [EOL]     FieldUtils.writeDeclaredStaticField(StaticContainer.class, "mutablePackage", "new", true); [EOL]     assertEquals("new", StaticContainer.getMutablePackage()); [EOL]     FieldUtils.writeDeclaredStaticField(StaticContainer.class, "mutablePrivate", "new", true); [EOL]     assertEquals("new", StaticContainer.getMutablePrivate()); [EOL]     try { [EOL]         FieldUtils.writeDeclaredStaticField(StaticContainer.class, "IMMUTABLE_PUBLIC", "new", true); [EOL]         fail("Expected IllegalAccessException"); [EOL]     } catch (final IllegalAccessException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeDeclaredStaticField(StaticContainer.class, "IMMUTABLE_PROTECTED", "new", true); [EOL]         fail("Expected IllegalAccessException"); [EOL]     } catch (final IllegalAccessException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeDeclaredStaticField(StaticContainer.class, "IMMUTABLE_PACKAGE", "new", true); [EOL]         fail("Expected IllegalAccessException"); [EOL]     } catch (final IllegalAccessException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeDeclaredStaticField(StaticContainer.class, "IMMUTABLE_PRIVATE", "new", true); [EOL]         fail("Expected IllegalAccessException"); [EOL]     } catch (final IllegalAccessException e) { [EOL]     } [EOL] }
@Test [EOL] public void testWriteDeclaredNamedStaticFieldForceAccess() throws Exception { [EOL]     FieldUtils.writeDeclaredStaticField(StaticContainer.class, "mutablePublic", "new", true); [EOL]     assertEquals("new", StaticContainer.mutablePublic); [EOL]     FieldUtils.writeDeclaredStaticField(StaticContainer.class, "mutableProtected", "new", true); [EOL]     assertEquals("new", StaticContainer.getMutableProtected()); [EOL]     FieldUtils.writeDeclaredStaticField(StaticContainer.class, "mutablePackage", "new", true); [EOL]     assertEquals("new", StaticContainer.getMutablePackage()); [EOL]     FieldUtils.writeDeclaredStaticField(StaticContainer.class, "mutablePrivate", "new", true); [EOL]     assertEquals("new", StaticContainer.getMutablePrivate()); [EOL]     try { [EOL]         FieldUtils.writeDeclaredStaticField(StaticContainer.class, "IMMUTABLE_PUBLIC", "new", true); [EOL]         fail("Expected IllegalAccessException"); [EOL]     } catch (final IllegalAccessException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeDeclaredStaticField(StaticContainer.class, "IMMUTABLE_PROTECTED", "new", true); [EOL]         fail("Expected IllegalAccessException"); [EOL]     } catch (final IllegalAccessException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeDeclaredStaticField(StaticContainer.class, "IMMUTABLE_PACKAGE", "new", true); [EOL]         fail("Expected IllegalAccessException"); [EOL]     } catch (final IllegalAccessException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeDeclaredStaticField(StaticContainer.class, "IMMUTABLE_PRIVATE", "new", true); [EOL]         fail("Expected IllegalAccessException"); [EOL]     } catch (final IllegalAccessException e) { [EOL]     } [EOL] }
@Test [EOL] public void testWriteDeclaredNamedStaticFieldForceAccess() throws Exception { [EOL]     FieldUtils.writeDeclaredStaticField(StaticContainer.class, "mutablePublic", "new", true); [EOL]     assertEquals("new", StaticContainer.mutablePublic); [EOL]     FieldUtils.writeDeclaredStaticField(StaticContainer.class, "mutableProtected", "new", true); [EOL]     assertEquals("new", StaticContainer.getMutableProtected()); [EOL]     FieldUtils.writeDeclaredStaticField(StaticContainer.class, "mutablePackage", "new", true); [EOL]     assertEquals("new", StaticContainer.getMutablePackage()); [EOL]     FieldUtils.writeDeclaredStaticField(StaticContainer.class, "mutablePrivate", "new", true); [EOL]     assertEquals("new", StaticContainer.getMutablePrivate()); [EOL]     try { [EOL]         FieldUtils.writeDeclaredStaticField(StaticContainer.class, "IMMUTABLE_PUBLIC", "new", true); [EOL]         fail("Expected IllegalAccessException"); [EOL]     } catch (final IllegalAccessException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeDeclaredStaticField(StaticContainer.class, "IMMUTABLE_PROTECTED", "new", true); [EOL]         fail("Expected IllegalAccessException"); [EOL]     } catch (final IllegalAccessException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeDeclaredStaticField(StaticContainer.class, "IMMUTABLE_PACKAGE", "new", true); [EOL]         fail("Expected IllegalAccessException"); [EOL]     } catch (final IllegalAccessException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeDeclaredStaticField(StaticContainer.class, "IMMUTABLE_PRIVATE", "new", true); [EOL]         fail("Expected IllegalAccessException"); [EOL]     } catch (final IllegalAccessException e) { [EOL]     } [EOL] }
@Test [EOL] public void testWriteDeclaredNamedStaticFieldForceAccess() throws Exception { [EOL]     FieldUtils.writeDeclaredStaticField(StaticContainer.class, "mutablePublic", "new", true); [EOL]     assertEquals("new", StaticContainer.mutablePublic); [EOL]     FieldUtils.writeDeclaredStaticField(StaticContainer.class, "mutableProtected", "new", true); [EOL]     assertEquals("new", StaticContainer.getMutableProtected()); [EOL]     FieldUtils.writeDeclaredStaticField(StaticContainer.class, "mutablePackage", "new", true); [EOL]     assertEquals("new", StaticContainer.getMutablePackage()); [EOL]     FieldUtils.writeDeclaredStaticField(StaticContainer.class, "mutablePrivate", "new", true); [EOL]     assertEquals("new", StaticContainer.getMutablePrivate()); [EOL]     try { [EOL]         FieldUtils.writeDeclaredStaticField(StaticContainer.class, "IMMUTABLE_PUBLIC", "new", true); [EOL]         fail("Expected IllegalAccessException"); [EOL]     } catch (final IllegalAccessException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeDeclaredStaticField(StaticContainer.class, "IMMUTABLE_PROTECTED", "new", true); [EOL]         fail("Expected IllegalAccessException"); [EOL]     } catch (final IllegalAccessException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeDeclaredStaticField(StaticContainer.class, "IMMUTABLE_PACKAGE", "new", true); [EOL]         fail("Expected IllegalAccessException"); [EOL]     } catch (final IllegalAccessException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeDeclaredStaticField(StaticContainer.class, "IMMUTABLE_PRIVATE", "new", true); [EOL]         fail("Expected IllegalAccessException"); [EOL]     } catch (final IllegalAccessException e) { [EOL]     } [EOL] }
@Test [EOL] public void testWriteDeclaredNamedStaticFieldForceAccess() throws Exception { [EOL]     FieldUtils.writeDeclaredStaticField(StaticContainer.class, "mutablePublic", "new", true); [EOL]     assertEquals("new", StaticContainer.mutablePublic); [EOL]     FieldUtils.writeDeclaredStaticField(StaticContainer.class, "mutableProtected", "new", true); [EOL]     assertEquals("new", StaticContainer.getMutableProtected()); [EOL]     FieldUtils.writeDeclaredStaticField(StaticContainer.class, "mutablePackage", "new", true); [EOL]     assertEquals("new", StaticContainer.getMutablePackage()); [EOL]     FieldUtils.writeDeclaredStaticField(StaticContainer.class, "mutablePrivate", "new", true); [EOL]     assertEquals("new", StaticContainer.getMutablePrivate()); [EOL]     try { [EOL]         FieldUtils.writeDeclaredStaticField(StaticContainer.class, "IMMUTABLE_PUBLIC", "new", true); [EOL]         fail("Expected IllegalAccessException"); [EOL]     } catch (final IllegalAccessException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeDeclaredStaticField(StaticContainer.class, "IMMUTABLE_PROTECTED", "new", true); [EOL]         fail("Expected IllegalAccessException"); [EOL]     } catch (final IllegalAccessException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeDeclaredStaticField(StaticContainer.class, "IMMUTABLE_PACKAGE", "new", true); [EOL]         fail("Expected IllegalAccessException"); [EOL]     } catch (final IllegalAccessException e) { [EOL]     } [EOL]     try { [EOL]         FieldUtils.writeDeclaredStaticField(StaticContainer.class, "IMMUTABLE_PRIVATE", "new", true); [EOL]         fail("Expected IllegalAccessException"); [EOL]     } catch (final IllegalAccessException e) { [EOL]     } [EOL] }
@Test [EOL] public void testConstructor_String_oddDash() { [EOL]     CharSet set; [EOL]     CharRange[] array; [EOL]     set = CharSet.getInstance("-"); [EOL]     array = set.getCharRanges(); [EOL]     assertEquals(1, array.length); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.is('-'))); [EOL]     set = CharSet.getInstance("--"); [EOL]     array = set.getCharRanges(); [EOL]     assertEquals(1, array.length); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.is('-'))); [EOL]     set = CharSet.getInstance("---"); [EOL]     array = set.getCharRanges(); [EOL]     assertEquals(1, array.length); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.is('-'))); [EOL]     set = CharSet.getInstance("----"); [EOL]     array = set.getCharRanges(); [EOL]     assertEquals(1, array.length); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.is('-'))); [EOL]     set = CharSet.getInstance("-a"); [EOL]     array = set.getCharRanges(); [EOL]     assertEquals(2, array.length); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.is('-'))); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.is('a'))); [EOL]     set = CharSet.getInstance("a-"); [EOL]     array = set.getCharRanges(); [EOL]     assertEquals(2, array.length); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.is('a'))); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.is('-'))); [EOL]     set = CharSet.getInstance("a--"); [EOL]     array = set.getCharRanges(); [EOL]     assertEquals(1, array.length); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.isIn('a', '-'))); [EOL]     set = CharSet.getInstance("--a"); [EOL]     array = set.getCharRanges(); [EOL]     assertEquals(1, array.length); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.isIn('-', 'a'))); [EOL] }
@Test [EOL] public void testConstructor_String_oddDash() { [EOL]     CharSet set; [EOL]     CharRange[] array; [EOL]     set = CharSet.getInstance("-"); [EOL]     array = set.getCharRanges(); [EOL]     assertEquals(1, array.length); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.is('-'))); [EOL]     set = CharSet.getInstance("--"); [EOL]     array = set.getCharRanges(); [EOL]     assertEquals(1, array.length); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.is('-'))); [EOL]     set = CharSet.getInstance("---"); [EOL]     array = set.getCharRanges(); [EOL]     assertEquals(1, array.length); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.is('-'))); [EOL]     set = CharSet.getInstance("----"); [EOL]     array = set.getCharRanges(); [EOL]     assertEquals(1, array.length); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.is('-'))); [EOL]     set = CharSet.getInstance("-a"); [EOL]     array = set.getCharRanges(); [EOL]     assertEquals(2, array.length); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.is('-'))); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.is('a'))); [EOL]     set = CharSet.getInstance("a-"); [EOL]     array = set.getCharRanges(); [EOL]     assertEquals(2, array.length); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.is('a'))); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.is('-'))); [EOL]     set = CharSet.getInstance("a--"); [EOL]     array = set.getCharRanges(); [EOL]     assertEquals(1, array.length); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.isIn('a', '-'))); [EOL]     set = CharSet.getInstance("--a"); [EOL]     array = set.getCharRanges(); [EOL]     assertEquals(1, array.length); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.isIn('-', 'a'))); [EOL] }
@Test [EOL] public void testConstructor_String_oddDash() { [EOL]     CharSet set; [EOL]     CharRange[] array; [EOL]     set = CharSet.getInstance("-"); [EOL]     array = set.getCharRanges(); [EOL]     assertEquals(1, array.length); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.is('-'))); [EOL]     set = CharSet.getInstance("--"); [EOL]     array = set.getCharRanges(); [EOL]     assertEquals(1, array.length); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.is('-'))); [EOL]     set = CharSet.getInstance("---"); [EOL]     array = set.getCharRanges(); [EOL]     assertEquals(1, array.length); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.is('-'))); [EOL]     set = CharSet.getInstance("----"); [EOL]     array = set.getCharRanges(); [EOL]     assertEquals(1, array.length); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.is('-'))); [EOL]     set = CharSet.getInstance("-a"); [EOL]     array = set.getCharRanges(); [EOL]     assertEquals(2, array.length); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.is('-'))); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.is('a'))); [EOL]     set = CharSet.getInstance("a-"); [EOL]     array = set.getCharRanges(); [EOL]     assertEquals(2, array.length); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.is('a'))); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.is('-'))); [EOL]     set = CharSet.getInstance("a--"); [EOL]     array = set.getCharRanges(); [EOL]     assertEquals(1, array.length); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.isIn('a', '-'))); [EOL]     set = CharSet.getInstance("--a"); [EOL]     array = set.getCharRanges(); [EOL]     assertEquals(1, array.length); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.isIn('-', 'a'))); [EOL] }
@Test [EOL] public void testConstructor_String_oddDash() { [EOL]     CharSet set; [EOL]     CharRange[] array; [EOL]     set = CharSet.getInstance("-"); [EOL]     array = set.getCharRanges(); [EOL]     assertEquals(1, array.length); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.is('-'))); [EOL]     set = CharSet.getInstance("--"); [EOL]     array = set.getCharRanges(); [EOL]     assertEquals(1, array.length); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.is('-'))); [EOL]     set = CharSet.getInstance("---"); [EOL]     array = set.getCharRanges(); [EOL]     assertEquals(1, array.length); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.is('-'))); [EOL]     set = CharSet.getInstance("----"); [EOL]     array = set.getCharRanges(); [EOL]     assertEquals(1, array.length); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.is('-'))); [EOL]     set = CharSet.getInstance("-a"); [EOL]     array = set.getCharRanges(); [EOL]     assertEquals(2, array.length); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.is('-'))); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.is('a'))); [EOL]     set = CharSet.getInstance("a-"); [EOL]     array = set.getCharRanges(); [EOL]     assertEquals(2, array.length); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.is('a'))); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.is('-'))); [EOL]     set = CharSet.getInstance("a--"); [EOL]     array = set.getCharRanges(); [EOL]     assertEquals(1, array.length); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.isIn('a', '-'))); [EOL]     set = CharSet.getInstance("--a"); [EOL]     array = set.getCharRanges(); [EOL]     assertEquals(1, array.length); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.isIn('-', 'a'))); [EOL] }
@Test [EOL] public void testConstructor_String_oddDash() { [EOL]     CharSet set; [EOL]     CharRange[] array; [EOL]     set = CharSet.getInstance("-"); [EOL]     array = set.getCharRanges(); [EOL]     assertEquals(1, array.length); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.is('-'))); [EOL]     set = CharSet.getInstance("--"); [EOL]     array = set.getCharRanges(); [EOL]     assertEquals(1, array.length); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.is('-'))); [EOL]     set = CharSet.getInstance("---"); [EOL]     array = set.getCharRanges(); [EOL]     assertEquals(1, array.length); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.is('-'))); [EOL]     set = CharSet.getInstance("----"); [EOL]     array = set.getCharRanges(); [EOL]     assertEquals(1, array.length); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.is('-'))); [EOL]     set = CharSet.getInstance("-a"); [EOL]     array = set.getCharRanges(); [EOL]     assertEquals(2, array.length); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.is('-'))); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.is('a'))); [EOL]     set = CharSet.getInstance("a-"); [EOL]     array = set.getCharRanges(); [EOL]     assertEquals(2, array.length); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.is('a'))); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.is('-'))); [EOL]     set = CharSet.getInstance("a--"); [EOL]     array = set.getCharRanges(); [EOL]     assertEquals(1, array.length); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.isIn('a', '-'))); [EOL]     set = CharSet.getInstance("--a"); [EOL]     array = set.getCharRanges(); [EOL]     assertEquals(1, array.length); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.isIn('-', 'a'))); [EOL] }
@Test [EOL] public void testConstructor_String_oddDash() { [EOL]     CharSet set; [EOL]     CharRange[] array; [EOL]     set = CharSet.getInstance("-"); [EOL]     array = set.getCharRanges(); [EOL]     assertEquals(1, array.length); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.is('-'))); [EOL]     set = CharSet.getInstance("--"); [EOL]     array = set.getCharRanges(); [EOL]     assertEquals(1, array.length); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.is('-'))); [EOL]     set = CharSet.getInstance("---"); [EOL]     array = set.getCharRanges(); [EOL]     assertEquals(1, array.length); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.is('-'))); [EOL]     set = CharSet.getInstance("----"); [EOL]     array = set.getCharRanges(); [EOL]     assertEquals(1, array.length); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.is('-'))); [EOL]     set = CharSet.getInstance("-a"); [EOL]     array = set.getCharRanges(); [EOL]     assertEquals(2, array.length); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.is('-'))); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.is('a'))); [EOL]     set = CharSet.getInstance("a-"); [EOL]     array = set.getCharRanges(); [EOL]     assertEquals(2, array.length); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.is('a'))); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.is('-'))); [EOL]     set = CharSet.getInstance("a--"); [EOL]     array = set.getCharRanges(); [EOL]     assertEquals(1, array.length); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.isIn('a', '-'))); [EOL]     set = CharSet.getInstance("--a"); [EOL]     array = set.getCharRanges(); [EOL]     assertEquals(1, array.length); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.isIn('-', 'a'))); [EOL] }
@Test [EOL] public void testConstructor_String_oddDash() { [EOL]     CharSet set; [EOL]     CharRange[] array; [EOL]     set = CharSet.getInstance("-"); [EOL]     array = set.getCharRanges(); [EOL]     assertEquals(1, array.length); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.is('-'))); [EOL]     set = CharSet.getInstance("--"); [EOL]     array = set.getCharRanges(); [EOL]     assertEquals(1, array.length); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.is('-'))); [EOL]     set = CharSet.getInstance("---"); [EOL]     array = set.getCharRanges(); [EOL]     assertEquals(1, array.length); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.is('-'))); [EOL]     set = CharSet.getInstance("----"); [EOL]     array = set.getCharRanges(); [EOL]     assertEquals(1, array.length); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.is('-'))); [EOL]     set = CharSet.getInstance("-a"); [EOL]     array = set.getCharRanges(); [EOL]     assertEquals(2, array.length); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.is('-'))); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.is('a'))); [EOL]     set = CharSet.getInstance("a-"); [EOL]     array = set.getCharRanges(); [EOL]     assertEquals(2, array.length); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.is('a'))); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.is('-'))); [EOL]     set = CharSet.getInstance("a--"); [EOL]     array = set.getCharRanges(); [EOL]     assertEquals(1, array.length); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.isIn('a', '-'))); [EOL]     set = CharSet.getInstance("--a"); [EOL]     array = set.getCharRanges(); [EOL]     assertEquals(1, array.length); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.isIn('-', 'a'))); [EOL] }
@Test [EOL] public void testConstructor_String_oddDash() { [EOL]     CharSet set; [EOL]     CharRange[] array; [EOL]     set = CharSet.getInstance("-"); [EOL]     array = set.getCharRanges(); [EOL]     assertEquals(1, array.length); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.is('-'))); [EOL]     set = CharSet.getInstance("--"); [EOL]     array = set.getCharRanges(); [EOL]     assertEquals(1, array.length); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.is('-'))); [EOL]     set = CharSet.getInstance("---"); [EOL]     array = set.getCharRanges(); [EOL]     assertEquals(1, array.length); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.is('-'))); [EOL]     set = CharSet.getInstance("----"); [EOL]     array = set.getCharRanges(); [EOL]     assertEquals(1, array.length); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.is('-'))); [EOL]     set = CharSet.getInstance("-a"); [EOL]     array = set.getCharRanges(); [EOL]     assertEquals(2, array.length); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.is('-'))); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.is('a'))); [EOL]     set = CharSet.getInstance("a-"); [EOL]     array = set.getCharRanges(); [EOL]     assertEquals(2, array.length); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.is('a'))); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.is('-'))); [EOL]     set = CharSet.getInstance("a--"); [EOL]     array = set.getCharRanges(); [EOL]     assertEquals(1, array.length); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.isIn('a', '-'))); [EOL]     set = CharSet.getInstance("--a"); [EOL]     array = set.getCharRanges(); [EOL]     assertEquals(1, array.length); [EOL]     assertTrue(ArrayUtils.contains(array, CharRange.isIn('-', 'a'))); [EOL] }
@Test [EOL] public void testContextedExceptionStringThrowable() { [EOL]     exceptionContext = new ContextedException(TEST_MESSAGE_2, new Exception(TEST_MESSAGE)); [EOL]     final String message = exceptionContext.getMessage(); [EOL]     final String trace = ExceptionUtils.getStackTrace(exceptionContext); [EOL]     assertTrue(trace.indexOf("ContextedException") >= 0); [EOL]     assertTrue(trace.indexOf(TEST_MESSAGE) >= 0); [EOL]     assertTrue(trace.indexOf(TEST_MESSAGE_2) >= 0); [EOL]     assertTrue(message.indexOf(TEST_MESSAGE_2) >= 0); [EOL] }
@Test [EOL] public void testContextedExceptionStringThrowable() { [EOL]     exceptionContext = new ContextedException(TEST_MESSAGE_2, new Exception(TEST_MESSAGE)); [EOL]     final String message = exceptionContext.getMessage(); [EOL]     final String trace = ExceptionUtils.getStackTrace(exceptionContext); [EOL]     assertTrue(trace.indexOf("ContextedException") >= 0); [EOL]     assertTrue(trace.indexOf(TEST_MESSAGE) >= 0); [EOL]     assertTrue(trace.indexOf(TEST_MESSAGE_2) >= 0); [EOL]     assertTrue(message.indexOf(TEST_MESSAGE_2) >= 0); [EOL] }
@Test [EOL] public void testNullExceptionPassing() { [EOL]     exceptionContext = new ContextedException(TEST_MESSAGE_2, new Exception(TEST_MESSAGE), null).addContextValue("test1", null).addContextValue("test2", "some value").addContextValue("test Date", new Date()).addContextValue("test Nbr", Integer.valueOf(5)).addContextValue("test Poorly written obj", new ObjectWithFaultyToString()); [EOL]     final String message = exceptionContext.getMessage(); [EOL]     assertTrue(message != null); [EOL] }
@Test [EOL] public void testNullExceptionPassing() { [EOL]     exceptionContext = new ContextedException(TEST_MESSAGE_2, new Exception(TEST_MESSAGE), null).addContextValue("test1", null).addContextValue("test2", "some value").addContextValue("test Date", new Date()).addContextValue("test Nbr", Integer.valueOf(5)).addContextValue("test Poorly written obj", new ObjectWithFaultyToString()); [EOL]     final String message = exceptionContext.getMessage(); [EOL]     assertTrue(message != null); [EOL] }
@Test [EOL] public void testNullExceptionPassing() { [EOL]     exceptionContext = new ContextedException(TEST_MESSAGE_2, new Exception(TEST_MESSAGE), null).addContextValue("test1", null).addContextValue("test2", "some value").addContextValue("test Date", new Date()).addContextValue("test Nbr", Integer.valueOf(5)).addContextValue("test Poorly written obj", new ObjectWithFaultyToString()); [EOL]     final String message = exceptionContext.getMessage(); [EOL]     assertTrue(message != null); [EOL] }
@Test [EOL] public void testNullExceptionPassing() { [EOL]     exceptionContext = new ContextedException(TEST_MESSAGE_2, new Exception(TEST_MESSAGE), null).addContextValue("test1", null).addContextValue("test2", "some value").addContextValue("test Date", new Date()).addContextValue("test Nbr", Integer.valueOf(5)).addContextValue("test Poorly written obj", new ObjectWithFaultyToString()); [EOL]     final String message = exceptionContext.getMessage(); [EOL]     assertTrue(message != null); [EOL] }
@Test [EOL] public void testNullExceptionPassing() { [EOL]     exceptionContext = new ContextedException(TEST_MESSAGE_2, new Exception(TEST_MESSAGE), null).addContextValue("test1", null).addContextValue("test2", "some value").addContextValue("test Date", new Date()).addContextValue("test Nbr", Integer.valueOf(5)).addContextValue("test Poorly written obj", new ObjectWithFaultyToString()); [EOL]     final String message = exceptionContext.getMessage(); [EOL]     assertTrue(message != null); [EOL] }
@Test [EOL] public void testDefault() throws Exception { [EOL]     final MutablePair<Integer, String> pair = new MutablePair<Integer, String>(); [EOL]     assertNull(pair.getLeft()); [EOL]     assertNull(pair.getRight()); [EOL] }
@Test [EOL] public void testConstructorAccessors_isNot() { [EOL]     final CharRange rangea = CharRange.isNot('a'); [EOL]     assertEquals('a', rangea.getStart()); [EOL]     assertEquals('a', rangea.getEnd()); [EOL]     assertTrue(rangea.isNegated()); [EOL]     assertEquals("^a", rangea.toString()); [EOL] }
@Test [EOL] public void testConstructorAccessors_isNot() { [EOL]     final CharRange rangea = CharRange.isNot('a'); [EOL]     assertEquals('a', rangea.getStart()); [EOL]     assertEquals('a', rangea.getEnd()); [EOL]     assertTrue(rangea.isNegated()); [EOL]     assertEquals("^a", rangea.toString()); [EOL] }
@Test [EOL] public void testContains_Charrange() { [EOL]     final CharRange a = CharRange.is('a'); [EOL]     final CharRange b = CharRange.is('b'); [EOL]     final CharRange c = CharRange.is('c'); [EOL]     final CharRange c2 = CharRange.is('c'); [EOL]     final CharRange d = CharRange.is('d'); [EOL]     final CharRange e = CharRange.is('e'); [EOL]     final CharRange cd = CharRange.isIn('c', 'd'); [EOL]     final CharRange bd = CharRange.isIn('b', 'd'); [EOL]     final CharRange bc = CharRange.isIn('b', 'c'); [EOL]     final CharRange ab = CharRange.isIn('a', 'b'); [EOL]     final CharRange de = CharRange.isIn('d', 'e'); [EOL]     final CharRange ef = CharRange.isIn('e', 'f'); [EOL]     final CharRange ae = CharRange.isIn('a', 'e'); [EOL]     assertFalse(c.contains(b)); [EOL]     assertTrue(c.contains(c)); [EOL]     assertTrue(c.contains(c2)); [EOL]     assertFalse(c.contains(d)); [EOL]     assertFalse(c.contains(cd)); [EOL]     assertFalse(c.contains(bd)); [EOL]     assertFalse(c.contains(bc)); [EOL]     assertFalse(c.contains(ab)); [EOL]     assertFalse(c.contains(de)); [EOL]     assertTrue(cd.contains(c)); [EOL]     assertTrue(bd.contains(c)); [EOL]     assertTrue(bc.contains(c)); [EOL]     assertFalse(ab.contains(c)); [EOL]     assertFalse(de.contains(c)); [EOL]     assertTrue(ae.contains(b)); [EOL]     assertTrue(ae.contains(ab)); [EOL]     assertTrue(ae.contains(bc)); [EOL]     assertTrue(ae.contains(cd)); [EOL]     assertTrue(ae.contains(de)); [EOL]     final CharRange notb = CharRange.isNot('b'); [EOL]     final CharRange notc = CharRange.isNot('c'); [EOL]     final CharRange notd = CharRange.isNot('d'); [EOL]     final CharRange notab = CharRange.isNotIn('a', 'b'); [EOL]     final CharRange notbc = CharRange.isNotIn('b', 'c'); [EOL]     final CharRange notbd = CharRange.isNotIn('b', 'd'); [EOL]     final CharRange notcd = CharRange.isNotIn('c', 'd'); [EOL]     final CharRange notde = CharRange.isNotIn('d', 'e'); [EOL]     final CharRange notae = CharRange.isNotIn('a', 'e'); [EOL]     final CharRange all = CharRange.isIn((char) 0, Character.MAX_VALUE); [EOL]     final CharRange allbutfirst = CharRange.isIn((char) 1, Character.MAX_VALUE); [EOL]     assertFalse(c.contains(notc)); [EOL]     assertFalse(c.contains(notbd)); [EOL]     assertTrue(all.contains(notc)); [EOL]     assertTrue(all.contains(notbd)); [EOL]     assertFalse(allbutfirst.contains(notc)); [EOL]     assertFalse(allbutfirst.contains(notbd)); [EOL]     assertTrue(notc.contains(a)); [EOL]     assertTrue(notc.contains(b)); [EOL]     assertFalse(notc.contains(c)); [EOL]     assertTrue(notc.contains(d)); [EOL]     assertTrue(notc.contains(e)); [EOL]     assertTrue(notc.contains(ab)); [EOL]     assertFalse(notc.contains(bc)); [EOL]     assertFalse(notc.contains(bd)); [EOL]     assertFalse(notc.contains(cd)); [EOL]     assertTrue(notc.contains(de)); [EOL]     assertFalse(notc.contains(ae)); [EOL]     assertFalse(notc.contains(all)); [EOL]     assertFalse(notc.contains(allbutfirst)); [EOL]     assertTrue(notbd.contains(a)); [EOL]     assertFalse(notbd.contains(b)); [EOL]     assertFalse(notbd.contains(c)); [EOL]     assertFalse(notbd.contains(d)); [EOL]     assertTrue(notbd.contains(e)); [EOL]     assertTrue(notcd.contains(ab)); [EOL]     assertFalse(notcd.contains(bc)); [EOL]     assertFalse(notcd.contains(bd)); [EOL]     assertFalse(notcd.contains(cd)); [EOL]     assertFalse(notcd.contains(de)); [EOL]     assertFalse(notcd.contains(ae)); [EOL]     assertTrue(notcd.contains(ef)); [EOL]     assertFalse(notcd.contains(all)); [EOL]     assertFalse(notcd.contains(allbutfirst)); [EOL]     assertFalse(notc.contains(notb)); [EOL]     assertTrue(notc.contains(notc)); [EOL]     assertFalse(notc.contains(notd)); [EOL]     assertFalse(notc.contains(notab)); [EOL]     assertTrue(notc.contains(notbc)); [EOL]     assertTrue(notc.contains(notbd)); [EOL]     assertTrue(notc.contains(notcd)); [EOL]     assertFalse(notc.contains(notde)); [EOL]     assertFalse(notbd.contains(notb)); [EOL]     assertFalse(notbd.contains(notc)); [EOL]     assertFalse(notbd.contains(notd)); [EOL]     assertFalse(notbd.contains(notab)); [EOL]     assertFalse(notbd.contains(notbc)); [EOL]     assertTrue(notbd.contains(notbd)); [EOL]     assertFalse(notbd.contains(notcd)); [EOL]     assertFalse(notbd.contains(notde)); [EOL]     assertTrue(notbd.contains(notae)); [EOL] }
@Test [EOL] public void testConstructorAccessors_isNot() { [EOL]     final CharRange rangea = CharRange.isNot('a'); [EOL]     assertEquals('a', rangea.getStart()); [EOL]     assertEquals('a', rangea.getEnd()); [EOL]     assertTrue(rangea.isNegated()); [EOL]     assertEquals("^a", rangea.toString()); [EOL] }
@Test [EOL] public void testConstructorAccessors_isNot() { [EOL]     final CharRange rangea = CharRange.isNot('a'); [EOL]     assertEquals('a', rangea.getStart()); [EOL]     assertEquals('a', rangea.getEnd()); [EOL]     assertTrue(rangea.isNegated()); [EOL]     assertEquals("^a", rangea.toString()); [EOL] }
@Test [EOL] public void testConstructorAccessors_isNot() { [EOL]     final CharRange rangea = CharRange.isNot('a'); [EOL]     assertEquals('a', rangea.getStart()); [EOL]     assertEquals('a', rangea.getEnd()); [EOL]     assertTrue(rangea.isNegated()); [EOL]     assertEquals("^a", rangea.toString()); [EOL] }
@Test [EOL] public void testContains_Charrange() { [EOL]     final CharRange a = CharRange.is('a'); [EOL]     final CharRange b = CharRange.is('b'); [EOL]     final CharRange c = CharRange.is('c'); [EOL]     final CharRange c2 = CharRange.is('c'); [EOL]     final CharRange d = CharRange.is('d'); [EOL]     final CharRange e = CharRange.is('e'); [EOL]     final CharRange cd = CharRange.isIn('c', 'd'); [EOL]     final CharRange bd = CharRange.isIn('b', 'd'); [EOL]     final CharRange bc = CharRange.isIn('b', 'c'); [EOL]     final CharRange ab = CharRange.isIn('a', 'b'); [EOL]     final CharRange de = CharRange.isIn('d', 'e'); [EOL]     final CharRange ef = CharRange.isIn('e', 'f'); [EOL]     final CharRange ae = CharRange.isIn('a', 'e'); [EOL]     assertFalse(c.contains(b)); [EOL]     assertTrue(c.contains(c)); [EOL]     assertTrue(c.contains(c2)); [EOL]     assertFalse(c.contains(d)); [EOL]     assertFalse(c.contains(cd)); [EOL]     assertFalse(c.contains(bd)); [EOL]     assertFalse(c.contains(bc)); [EOL]     assertFalse(c.contains(ab)); [EOL]     assertFalse(c.contains(de)); [EOL]     assertTrue(cd.contains(c)); [EOL]     assertTrue(bd.contains(c)); [EOL]     assertTrue(bc.contains(c)); [EOL]     assertFalse(ab.contains(c)); [EOL]     assertFalse(de.contains(c)); [EOL]     assertTrue(ae.contains(b)); [EOL]     assertTrue(ae.contains(ab)); [EOL]     assertTrue(ae.contains(bc)); [EOL]     assertTrue(ae.contains(cd)); [EOL]     assertTrue(ae.contains(de)); [EOL]     final CharRange notb = CharRange.isNot('b'); [EOL]     final CharRange notc = CharRange.isNot('c'); [EOL]     final CharRange notd = CharRange.isNot('d'); [EOL]     final CharRange notab = CharRange.isNotIn('a', 'b'); [EOL]     final CharRange notbc = CharRange.isNotIn('b', 'c'); [EOL]     final CharRange notbd = CharRange.isNotIn('b', 'd'); [EOL]     final CharRange notcd = CharRange.isNotIn('c', 'd'); [EOL]     final CharRange notde = CharRange.isNotIn('d', 'e'); [EOL]     final CharRange notae = CharRange.isNotIn('a', 'e'); [EOL]     final CharRange all = CharRange.isIn((char) 0, Character.MAX_VALUE); [EOL]     final CharRange allbutfirst = CharRange.isIn((char) 1, Character.MAX_VALUE); [EOL]     assertFalse(c.contains(notc)); [EOL]     assertFalse(c.contains(notbd)); [EOL]     assertTrue(all.contains(notc)); [EOL]     assertTrue(all.contains(notbd)); [EOL]     assertFalse(allbutfirst.contains(notc)); [EOL]     assertFalse(allbutfirst.contains(notbd)); [EOL]     assertTrue(notc.contains(a)); [EOL]     assertTrue(notc.contains(b)); [EOL]     assertFalse(notc.contains(c)); [EOL]     assertTrue(notc.contains(d)); [EOL]     assertTrue(notc.contains(e)); [EOL]     assertTrue(notc.contains(ab)); [EOL]     assertFalse(notc.contains(bc)); [EOL]     assertFalse(notc.contains(bd)); [EOL]     assertFalse(notc.contains(cd)); [EOL]     assertTrue(notc.contains(de)); [EOL]     assertFalse(notc.contains(ae)); [EOL]     assertFalse(notc.contains(all)); [EOL]     assertFalse(notc.contains(allbutfirst)); [EOL]     assertTrue(notbd.contains(a)); [EOL]     assertFalse(notbd.contains(b)); [EOL]     assertFalse(notbd.contains(c)); [EOL]     assertFalse(notbd.contains(d)); [EOL]     assertTrue(notbd.contains(e)); [EOL]     assertTrue(notcd.contains(ab)); [EOL]     assertFalse(notcd.contains(bc)); [EOL]     assertFalse(notcd.contains(bd)); [EOL]     assertFalse(notcd.contains(cd)); [EOL]     assertFalse(notcd.contains(de)); [EOL]     assertFalse(notcd.contains(ae)); [EOL]     assertTrue(notcd.contains(ef)); [EOL]     assertFalse(notcd.contains(all)); [EOL]     assertFalse(notcd.contains(allbutfirst)); [EOL]     assertFalse(notc.contains(notb)); [EOL]     assertTrue(notc.contains(notc)); [EOL]     assertFalse(notc.contains(notd)); [EOL]     assertFalse(notc.contains(notab)); [EOL]     assertTrue(notc.contains(notbc)); [EOL]     assertTrue(notc.contains(notbd)); [EOL]     assertTrue(notc.contains(notcd)); [EOL]     assertFalse(notc.contains(notde)); [EOL]     assertFalse(notbd.contains(notb)); [EOL]     assertFalse(notbd.contains(notc)); [EOL]     assertFalse(notbd.contains(notd)); [EOL]     assertFalse(notbd.contains(notab)); [EOL]     assertFalse(notbd.contains(notbc)); [EOL]     assertTrue(notbd.contains(notbd)); [EOL]     assertFalse(notbd.contains(notcd)); [EOL]     assertFalse(notbd.contains(notde)); [EOL]     assertTrue(notbd.contains(notae)); [EOL] }
@Test [EOL] public void testContains_Charrange() { [EOL]     final CharRange a = CharRange.is('a'); [EOL]     final CharRange b = CharRange.is('b'); [EOL]     final CharRange c = CharRange.is('c'); [EOL]     final CharRange c2 = CharRange.is('c'); [EOL]     final CharRange d = CharRange.is('d'); [EOL]     final CharRange e = CharRange.is('e'); [EOL]     final CharRange cd = CharRange.isIn('c', 'd'); [EOL]     final CharRange bd = CharRange.isIn('b', 'd'); [EOL]     final CharRange bc = CharRange.isIn('b', 'c'); [EOL]     final CharRange ab = CharRange.isIn('a', 'b'); [EOL]     final CharRange de = CharRange.isIn('d', 'e'); [EOL]     final CharRange ef = CharRange.isIn('e', 'f'); [EOL]     final CharRange ae = CharRange.isIn('a', 'e'); [EOL]     assertFalse(c.contains(b)); [EOL]     assertTrue(c.contains(c)); [EOL]     assertTrue(c.contains(c2)); [EOL]     assertFalse(c.contains(d)); [EOL]     assertFalse(c.contains(cd)); [EOL]     assertFalse(c.contains(bd)); [EOL]     assertFalse(c.contains(bc)); [EOL]     assertFalse(c.contains(ab)); [EOL]     assertFalse(c.contains(de)); [EOL]     assertTrue(cd.contains(c)); [EOL]     assertTrue(bd.contains(c)); [EOL]     assertTrue(bc.contains(c)); [EOL]     assertFalse(ab.contains(c)); [EOL]     assertFalse(de.contains(c)); [EOL]     assertTrue(ae.contains(b)); [EOL]     assertTrue(ae.contains(ab)); [EOL]     assertTrue(ae.contains(bc)); [EOL]     assertTrue(ae.contains(cd)); [EOL]     assertTrue(ae.contains(de)); [EOL]     final CharRange notb = CharRange.isNot('b'); [EOL]     final CharRange notc = CharRange.isNot('c'); [EOL]     final CharRange notd = CharRange.isNot('d'); [EOL]     final CharRange notab = CharRange.isNotIn('a', 'b'); [EOL]     final CharRange notbc = CharRange.isNotIn('b', 'c'); [EOL]     final CharRange notbd = CharRange.isNotIn('b', 'd'); [EOL]     final CharRange notcd = CharRange.isNotIn('c', 'd'); [EOL]     final CharRange notde = CharRange.isNotIn('d', 'e'); [EOL]     final CharRange notae = CharRange.isNotIn('a', 'e'); [EOL]     final CharRange all = CharRange.isIn((char) 0, Character.MAX_VALUE); [EOL]     final CharRange allbutfirst = CharRange.isIn((char) 1, Character.MAX_VALUE); [EOL]     assertFalse(c.contains(notc)); [EOL]     assertFalse(c.contains(notbd)); [EOL]     assertTrue(all.contains(notc)); [EOL]     assertTrue(all.contains(notbd)); [EOL]     assertFalse(allbutfirst.contains(notc)); [EOL]     assertFalse(allbutfirst.contains(notbd)); [EOL]     assertTrue(notc.contains(a)); [EOL]     assertTrue(notc.contains(b)); [EOL]     assertFalse(notc.contains(c)); [EOL]     assertTrue(notc.contains(d)); [EOL]     assertTrue(notc.contains(e)); [EOL]     assertTrue(notc.contains(ab)); [EOL]     assertFalse(notc.contains(bc)); [EOL]     assertFalse(notc.contains(bd)); [EOL]     assertFalse(notc.contains(cd)); [EOL]     assertTrue(notc.contains(de)); [EOL]     assertFalse(notc.contains(ae)); [EOL]     assertFalse(notc.contains(all)); [EOL]     assertFalse(notc.contains(allbutfirst)); [EOL]     assertTrue(notbd.contains(a)); [EOL]     assertFalse(notbd.contains(b)); [EOL]     assertFalse(notbd.contains(c)); [EOL]     assertFalse(notbd.contains(d)); [EOL]     assertTrue(notbd.contains(e)); [EOL]     assertTrue(notcd.contains(ab)); [EOL]     assertFalse(notcd.contains(bc)); [EOL]     assertFalse(notcd.contains(bd)); [EOL]     assertFalse(notcd.contains(cd)); [EOL]     assertFalse(notcd.contains(de)); [EOL]     assertFalse(notcd.contains(ae)); [EOL]     assertTrue(notcd.contains(ef)); [EOL]     assertFalse(notcd.contains(all)); [EOL]     assertFalse(notcd.contains(allbutfirst)); [EOL]     assertFalse(notc.contains(notb)); [EOL]     assertTrue(notc.contains(notc)); [EOL]     assertFalse(notc.contains(notd)); [EOL]     assertFalse(notc.contains(notab)); [EOL]     assertTrue(notc.contains(notbc)); [EOL]     assertTrue(notc.contains(notbd)); [EOL]     assertTrue(notc.contains(notcd)); [EOL]     assertFalse(notc.contains(notde)); [EOL]     assertFalse(notbd.contains(notb)); [EOL]     assertFalse(notbd.contains(notc)); [EOL]     assertFalse(notbd.contains(notd)); [EOL]     assertFalse(notbd.contains(notab)); [EOL]     assertFalse(notbd.contains(notbc)); [EOL]     assertTrue(notbd.contains(notbd)); [EOL]     assertFalse(notbd.contains(notcd)); [EOL]     assertFalse(notbd.contains(notde)); [EOL]     assertTrue(notbd.contains(notae)); [EOL] }
@Test [EOL] public void testContains_Charrange() { [EOL]     final CharRange a = CharRange.is('a'); [EOL]     final CharRange b = CharRange.is('b'); [EOL]     final CharRange c = CharRange.is('c'); [EOL]     final CharRange c2 = CharRange.is('c'); [EOL]     final CharRange d = CharRange.is('d'); [EOL]     final CharRange e = CharRange.is('e'); [EOL]     final CharRange cd = CharRange.isIn('c', 'd'); [EOL]     final CharRange bd = CharRange.isIn('b', 'd'); [EOL]     final CharRange bc = CharRange.isIn('b', 'c'); [EOL]     final CharRange ab = CharRange.isIn('a', 'b'); [EOL]     final CharRange de = CharRange.isIn('d', 'e'); [EOL]     final CharRange ef = CharRange.isIn('e', 'f'); [EOL]     final CharRange ae = CharRange.isIn('a', 'e'); [EOL]     assertFalse(c.contains(b)); [EOL]     assertTrue(c.contains(c)); [EOL]     assertTrue(c.contains(c2)); [EOL]     assertFalse(c.contains(d)); [EOL]     assertFalse(c.contains(cd)); [EOL]     assertFalse(c.contains(bd)); [EOL]     assertFalse(c.contains(bc)); [EOL]     assertFalse(c.contains(ab)); [EOL]     assertFalse(c.contains(de)); [EOL]     assertTrue(cd.contains(c)); [EOL]     assertTrue(bd.contains(c)); [EOL]     assertTrue(bc.contains(c)); [EOL]     assertFalse(ab.contains(c)); [EOL]     assertFalse(de.contains(c)); [EOL]     assertTrue(ae.contains(b)); [EOL]     assertTrue(ae.contains(ab)); [EOL]     assertTrue(ae.contains(bc)); [EOL]     assertTrue(ae.contains(cd)); [EOL]     assertTrue(ae.contains(de)); [EOL]     final CharRange notb = CharRange.isNot('b'); [EOL]     final CharRange notc = CharRange.isNot('c'); [EOL]     final CharRange notd = CharRange.isNot('d'); [EOL]     final CharRange notab = CharRange.isNotIn('a', 'b'); [EOL]     final CharRange notbc = CharRange.isNotIn('b', 'c'); [EOL]     final CharRange notbd = CharRange.isNotIn('b', 'd'); [EOL]     final CharRange notcd = CharRange.isNotIn('c', 'd'); [EOL]     final CharRange notde = CharRange.isNotIn('d', 'e'); [EOL]     final CharRange notae = CharRange.isNotIn('a', 'e'); [EOL]     final CharRange all = CharRange.isIn((char) 0, Character.MAX_VALUE); [EOL]     final CharRange allbutfirst = CharRange.isIn((char) 1, Character.MAX_VALUE); [EOL]     assertFalse(c.contains(notc)); [EOL]     assertFalse(c.contains(notbd)); [EOL]     assertTrue(all.contains(notc)); [EOL]     assertTrue(all.contains(notbd)); [EOL]     assertFalse(allbutfirst.contains(notc)); [EOL]     assertFalse(allbutfirst.contains(notbd)); [EOL]     assertTrue(notc.contains(a)); [EOL]     assertTrue(notc.contains(b)); [EOL]     assertFalse(notc.contains(c)); [EOL]     assertTrue(notc.contains(d)); [EOL]     assertTrue(notc.contains(e)); [EOL]     assertTrue(notc.contains(ab)); [EOL]     assertFalse(notc.contains(bc)); [EOL]     assertFalse(notc.contains(bd)); [EOL]     assertFalse(notc.contains(cd)); [EOL]     assertTrue(notc.contains(de)); [EOL]     assertFalse(notc.contains(ae)); [EOL]     assertFalse(notc.contains(all)); [EOL]     assertFalse(notc.contains(allbutfirst)); [EOL]     assertTrue(notbd.contains(a)); [EOL]     assertFalse(notbd.contains(b)); [EOL]     assertFalse(notbd.contains(c)); [EOL]     assertFalse(notbd.contains(d)); [EOL]     assertTrue(notbd.contains(e)); [EOL]     assertTrue(notcd.contains(ab)); [EOL]     assertFalse(notcd.contains(bc)); [EOL]     assertFalse(notcd.contains(bd)); [EOL]     assertFalse(notcd.contains(cd)); [EOL]     assertFalse(notcd.contains(de)); [EOL]     assertFalse(notcd.contains(ae)); [EOL]     assertTrue(notcd.contains(ef)); [EOL]     assertFalse(notcd.contains(all)); [EOL]     assertFalse(notcd.contains(allbutfirst)); [EOL]     assertFalse(notc.contains(notb)); [EOL]     assertTrue(notc.contains(notc)); [EOL]     assertFalse(notc.contains(notd)); [EOL]     assertFalse(notc.contains(notab)); [EOL]     assertTrue(notc.contains(notbc)); [EOL]     assertTrue(notc.contains(notbd)); [EOL]     assertTrue(notc.contains(notcd)); [EOL]     assertFalse(notc.contains(notde)); [EOL]     assertFalse(notbd.contains(notb)); [EOL]     assertFalse(notbd.contains(notc)); [EOL]     assertFalse(notbd.contains(notd)); [EOL]     assertFalse(notbd.contains(notab)); [EOL]     assertFalse(notbd.contains(notbc)); [EOL]     assertTrue(notbd.contains(notbd)); [EOL]     assertFalse(notbd.contains(notcd)); [EOL]     assertFalse(notbd.contains(notde)); [EOL]     assertTrue(notbd.contains(notae)); [EOL] }
@Test [EOL] public void testContains_Charrange() { [EOL]     final CharRange a = CharRange.is('a'); [EOL]     final CharRange b = CharRange.is('b'); [EOL]     final CharRange c = CharRange.is('c'); [EOL]     final CharRange c2 = CharRange.is('c'); [EOL]     final CharRange d = CharRange.is('d'); [EOL]     final CharRange e = CharRange.is('e'); [EOL]     final CharRange cd = CharRange.isIn('c', 'd'); [EOL]     final CharRange bd = CharRange.isIn('b', 'd'); [EOL]     final CharRange bc = CharRange.isIn('b', 'c'); [EOL]     final CharRange ab = CharRange.isIn('a', 'b'); [EOL]     final CharRange de = CharRange.isIn('d', 'e'); [EOL]     final CharRange ef = CharRange.isIn('e', 'f'); [EOL]     final CharRange ae = CharRange.isIn('a', 'e'); [EOL]     assertFalse(c.contains(b)); [EOL]     assertTrue(c.contains(c)); [EOL]     assertTrue(c.contains(c2)); [EOL]     assertFalse(c.contains(d)); [EOL]     assertFalse(c.contains(cd)); [EOL]     assertFalse(c.contains(bd)); [EOL]     assertFalse(c.contains(bc)); [EOL]     assertFalse(c.contains(ab)); [EOL]     assertFalse(c.contains(de)); [EOL]     assertTrue(cd.contains(c)); [EOL]     assertTrue(bd.contains(c)); [EOL]     assertTrue(bc.contains(c)); [EOL]     assertFalse(ab.contains(c)); [EOL]     assertFalse(de.contains(c)); [EOL]     assertTrue(ae.contains(b)); [EOL]     assertTrue(ae.contains(ab)); [EOL]     assertTrue(ae.contains(bc)); [EOL]     assertTrue(ae.contains(cd)); [EOL]     assertTrue(ae.contains(de)); [EOL]     final CharRange notb = CharRange.isNot('b'); [EOL]     final CharRange notc = CharRange.isNot('c'); [EOL]     final CharRange notd = CharRange.isNot('d'); [EOL]     final CharRange notab = CharRange.isNotIn('a', 'b'); [EOL]     final CharRange notbc = CharRange.isNotIn('b', 'c'); [EOL]     final CharRange notbd = CharRange.isNotIn('b', 'd'); [EOL]     final CharRange notcd = CharRange.isNotIn('c', 'd'); [EOL]     final CharRange notde = CharRange.isNotIn('d', 'e'); [EOL]     final CharRange notae = CharRange.isNotIn('a', 'e'); [EOL]     final CharRange all = CharRange.isIn((char) 0, Character.MAX_VALUE); [EOL]     final CharRange allbutfirst = CharRange.isIn((char) 1, Character.MAX_VALUE); [EOL]     assertFalse(c.contains(notc)); [EOL]     assertFalse(c.contains(notbd)); [EOL]     assertTrue(all.contains(notc)); [EOL]     assertTrue(all.contains(notbd)); [EOL]     assertFalse(allbutfirst.contains(notc)); [EOL]     assertFalse(allbutfirst.contains(notbd)); [EOL]     assertTrue(notc.contains(a)); [EOL]     assertTrue(notc.contains(b)); [EOL]     assertFalse(notc.contains(c)); [EOL]     assertTrue(notc.contains(d)); [EOL]     assertTrue(notc.contains(e)); [EOL]     assertTrue(notc.contains(ab)); [EOL]     assertFalse(notc.contains(bc)); [EOL]     assertFalse(notc.contains(bd)); [EOL]     assertFalse(notc.contains(cd)); [EOL]     assertTrue(notc.contains(de)); [EOL]     assertFalse(notc.contains(ae)); [EOL]     assertFalse(notc.contains(all)); [EOL]     assertFalse(notc.contains(allbutfirst)); [EOL]     assertTrue(notbd.contains(a)); [EOL]     assertFalse(notbd.contains(b)); [EOL]     assertFalse(notbd.contains(c)); [EOL]     assertFalse(notbd.contains(d)); [EOL]     assertTrue(notbd.contains(e)); [EOL]     assertTrue(notcd.contains(ab)); [EOL]     assertFalse(notcd.contains(bc)); [EOL]     assertFalse(notcd.contains(bd)); [EOL]     assertFalse(notcd.contains(cd)); [EOL]     assertFalse(notcd.contains(de)); [EOL]     assertFalse(notcd.contains(ae)); [EOL]     assertTrue(notcd.contains(ef)); [EOL]     assertFalse(notcd.contains(all)); [EOL]     assertFalse(notcd.contains(allbutfirst)); [EOL]     assertFalse(notc.contains(notb)); [EOL]     assertTrue(notc.contains(notc)); [EOL]     assertFalse(notc.contains(notd)); [EOL]     assertFalse(notc.contains(notab)); [EOL]     assertTrue(notc.contains(notbc)); [EOL]     assertTrue(notc.contains(notbd)); [EOL]     assertTrue(notc.contains(notcd)); [EOL]     assertFalse(notc.contains(notde)); [EOL]     assertFalse(notbd.contains(notb)); [EOL]     assertFalse(notbd.contains(notc)); [EOL]     assertFalse(notbd.contains(notd)); [EOL]     assertFalse(notbd.contains(notab)); [EOL]     assertFalse(notbd.contains(notbc)); [EOL]     assertTrue(notbd.contains(notbd)); [EOL]     assertFalse(notbd.contains(notcd)); [EOL]     assertFalse(notbd.contains(notde)); [EOL]     assertTrue(notbd.contains(notae)); [EOL] }
@Test [EOL] public void testContains_Charrange() { [EOL]     final CharRange a = CharRange.is('a'); [EOL]     final CharRange b = CharRange.is('b'); [EOL]     final CharRange c = CharRange.is('c'); [EOL]     final CharRange c2 = CharRange.is('c'); [EOL]     final CharRange d = CharRange.is('d'); [EOL]     final CharRange e = CharRange.is('e'); [EOL]     final CharRange cd = CharRange.isIn('c', 'd'); [EOL]     final CharRange bd = CharRange.isIn('b', 'd'); [EOL]     final CharRange bc = CharRange.isIn('b', 'c'); [EOL]     final CharRange ab = CharRange.isIn('a', 'b'); [EOL]     final CharRange de = CharRange.isIn('d', 'e'); [EOL]     final CharRange ef = CharRange.isIn('e', 'f'); [EOL]     final CharRange ae = CharRange.isIn('a', 'e'); [EOL]     assertFalse(c.contains(b)); [EOL]     assertTrue(c.contains(c)); [EOL]     assertTrue(c.contains(c2)); [EOL]     assertFalse(c.contains(d)); [EOL]     assertFalse(c.contains(cd)); [EOL]     assertFalse(c.contains(bd)); [EOL]     assertFalse(c.contains(bc)); [EOL]     assertFalse(c.contains(ab)); [EOL]     assertFalse(c.contains(de)); [EOL]     assertTrue(cd.contains(c)); [EOL]     assertTrue(bd.contains(c)); [EOL]     assertTrue(bc.contains(c)); [EOL]     assertFalse(ab.contains(c)); [EOL]     assertFalse(de.contains(c)); [EOL]     assertTrue(ae.contains(b)); [EOL]     assertTrue(ae.contains(ab)); [EOL]     assertTrue(ae.contains(bc)); [EOL]     assertTrue(ae.contains(cd)); [EOL]     assertTrue(ae.contains(de)); [EOL]     final CharRange notb = CharRange.isNot('b'); [EOL]     final CharRange notc = CharRange.isNot('c'); [EOL]     final CharRange notd = CharRange.isNot('d'); [EOL]     final CharRange notab = CharRange.isNotIn('a', 'b'); [EOL]     final CharRange notbc = CharRange.isNotIn('b', 'c'); [EOL]     final CharRange notbd = CharRange.isNotIn('b', 'd'); [EOL]     final CharRange notcd = CharRange.isNotIn('c', 'd'); [EOL]     final CharRange notde = CharRange.isNotIn('d', 'e'); [EOL]     final CharRange notae = CharRange.isNotIn('a', 'e'); [EOL]     final CharRange all = CharRange.isIn((char) 0, Character.MAX_VALUE); [EOL]     final CharRange allbutfirst = CharRange.isIn((char) 1, Character.MAX_VALUE); [EOL]     assertFalse(c.contains(notc)); [EOL]     assertFalse(c.contains(notbd)); [EOL]     assertTrue(all.contains(notc)); [EOL]     assertTrue(all.contains(notbd)); [EOL]     assertFalse(allbutfirst.contains(notc)); [EOL]     assertFalse(allbutfirst.contains(notbd)); [EOL]     assertTrue(notc.contains(a)); [EOL]     assertTrue(notc.contains(b)); [EOL]     assertFalse(notc.contains(c)); [EOL]     assertTrue(notc.contains(d)); [EOL]     assertTrue(notc.contains(e)); [EOL]     assertTrue(notc.contains(ab)); [EOL]     assertFalse(notc.contains(bc)); [EOL]     assertFalse(notc.contains(bd)); [EOL]     assertFalse(notc.contains(cd)); [EOL]     assertTrue(notc.contains(de)); [EOL]     assertFalse(notc.contains(ae)); [EOL]     assertFalse(notc.contains(all)); [EOL]     assertFalse(notc.contains(allbutfirst)); [EOL]     assertTrue(notbd.contains(a)); [EOL]     assertFalse(notbd.contains(b)); [EOL]     assertFalse(notbd.contains(c)); [EOL]     assertFalse(notbd.contains(d)); [EOL]     assertTrue(notbd.contains(e)); [EOL]     assertTrue(notcd.contains(ab)); [EOL]     assertFalse(notcd.contains(bc)); [EOL]     assertFalse(notcd.contains(bd)); [EOL]     assertFalse(notcd.contains(cd)); [EOL]     assertFalse(notcd.contains(de)); [EOL]     assertFalse(notcd.contains(ae)); [EOL]     assertTrue(notcd.contains(ef)); [EOL]     assertFalse(notcd.contains(all)); [EOL]     assertFalse(notcd.contains(allbutfirst)); [EOL]     assertFalse(notc.contains(notb)); [EOL]     assertTrue(notc.contains(notc)); [EOL]     assertFalse(notc.contains(notd)); [EOL]     assertFalse(notc.contains(notab)); [EOL]     assertTrue(notc.contains(notbc)); [EOL]     assertTrue(notc.contains(notbd)); [EOL]     assertTrue(notc.contains(notcd)); [EOL]     assertFalse(notc.contains(notde)); [EOL]     assertFalse(notbd.contains(notb)); [EOL]     assertFalse(notbd.contains(notc)); [EOL]     assertFalse(notbd.contains(notd)); [EOL]     assertFalse(notbd.contains(notab)); [EOL]     assertFalse(notbd.contains(notbc)); [EOL]     assertTrue(notbd.contains(notbd)); [EOL]     assertFalse(notbd.contains(notcd)); [EOL]     assertFalse(notbd.contains(notde)); [EOL]     assertTrue(notbd.contains(notae)); [EOL] }
@Test [EOL] public void testContains_Charrange() { [EOL]     final CharRange a = CharRange.is('a'); [EOL]     final CharRange b = CharRange.is('b'); [EOL]     final CharRange c = CharRange.is('c'); [EOL]     final CharRange c2 = CharRange.is('c'); [EOL]     final CharRange d = CharRange.is('d'); [EOL]     final CharRange e = CharRange.is('e'); [EOL]     final CharRange cd = CharRange.isIn('c', 'd'); [EOL]     final CharRange bd = CharRange.isIn('b', 'd'); [EOL]     final CharRange bc = CharRange.isIn('b', 'c'); [EOL]     final CharRange ab = CharRange.isIn('a', 'b'); [EOL]     final CharRange de = CharRange.isIn('d', 'e'); [EOL]     final CharRange ef = CharRange.isIn('e', 'f'); [EOL]     final CharRange ae = CharRange.isIn('a', 'e'); [EOL]     assertFalse(c.contains(b)); [EOL]     assertTrue(c.contains(c)); [EOL]     assertTrue(c.contains(c2)); [EOL]     assertFalse(c.contains(d)); [EOL]     assertFalse(c.contains(cd)); [EOL]     assertFalse(c.contains(bd)); [EOL]     assertFalse(c.contains(bc)); [EOL]     assertFalse(c.contains(ab)); [EOL]     assertFalse(c.contains(de)); [EOL]     assertTrue(cd.contains(c)); [EOL]     assertTrue(bd.contains(c)); [EOL]     assertTrue(bc.contains(c)); [EOL]     assertFalse(ab.contains(c)); [EOL]     assertFalse(de.contains(c)); [EOL]     assertTrue(ae.contains(b)); [EOL]     assertTrue(ae.contains(ab)); [EOL]     assertTrue(ae.contains(bc)); [EOL]     assertTrue(ae.contains(cd)); [EOL]     assertTrue(ae.contains(de)); [EOL]     final CharRange notb = CharRange.isNot('b'); [EOL]     final CharRange notc = CharRange.isNot('c'); [EOL]     final CharRange notd = CharRange.isNot('d'); [EOL]     final CharRange notab = CharRange.isNotIn('a', 'b'); [EOL]     final CharRange notbc = CharRange.isNotIn('b', 'c'); [EOL]     final CharRange notbd = CharRange.isNotIn('b', 'd'); [EOL]     final CharRange notcd = CharRange.isNotIn('c', 'd'); [EOL]     final CharRange notde = CharRange.isNotIn('d', 'e'); [EOL]     final CharRange notae = CharRange.isNotIn('a', 'e'); [EOL]     final CharRange all = CharRange.isIn((char) 0, Character.MAX_VALUE); [EOL]     final CharRange allbutfirst = CharRange.isIn((char) 1, Character.MAX_VALUE); [EOL]     assertFalse(c.contains(notc)); [EOL]     assertFalse(c.contains(notbd)); [EOL]     assertTrue(all.contains(notc)); [EOL]     assertTrue(all.contains(notbd)); [EOL]     assertFalse(allbutfirst.contains(notc)); [EOL]     assertFalse(allbutfirst.contains(notbd)); [EOL]     assertTrue(notc.contains(a)); [EOL]     assertTrue(notc.contains(b)); [EOL]     assertFalse(notc.contains(c)); [EOL]     assertTrue(notc.contains(d)); [EOL]     assertTrue(notc.contains(e)); [EOL]     assertTrue(notc.contains(ab)); [EOL]     assertFalse(notc.contains(bc)); [EOL]     assertFalse(notc.contains(bd)); [EOL]     assertFalse(notc.contains(cd)); [EOL]     assertTrue(notc.contains(de)); [EOL]     assertFalse(notc.contains(ae)); [EOL]     assertFalse(notc.contains(all)); [EOL]     assertFalse(notc.contains(allbutfirst)); [EOL]     assertTrue(notbd.contains(a)); [EOL]     assertFalse(notbd.contains(b)); [EOL]     assertFalse(notbd.contains(c)); [EOL]     assertFalse(notbd.contains(d)); [EOL]     assertTrue(notbd.contains(e)); [EOL]     assertTrue(notcd.contains(ab)); [EOL]     assertFalse(notcd.contains(bc)); [EOL]     assertFalse(notcd.contains(bd)); [EOL]     assertFalse(notcd.contains(cd)); [EOL]     assertFalse(notcd.contains(de)); [EOL]     assertFalse(notcd.contains(ae)); [EOL]     assertTrue(notcd.contains(ef)); [EOL]     assertFalse(notcd.contains(all)); [EOL]     assertFalse(notcd.contains(allbutfirst)); [EOL]     assertFalse(notc.contains(notb)); [EOL]     assertTrue(notc.contains(notc)); [EOL]     assertFalse(notc.contains(notd)); [EOL]     assertFalse(notc.contains(notab)); [EOL]     assertTrue(notc.contains(notbc)); [EOL]     assertTrue(notc.contains(notbd)); [EOL]     assertTrue(notc.contains(notcd)); [EOL]     assertFalse(notc.contains(notde)); [EOL]     assertFalse(notbd.contains(notb)); [EOL]     assertFalse(notbd.contains(notc)); [EOL]     assertFalse(notbd.contains(notd)); [EOL]     assertFalse(notbd.contains(notab)); [EOL]     assertFalse(notbd.contains(notbc)); [EOL]     assertTrue(notbd.contains(notbd)); [EOL]     assertFalse(notbd.contains(notcd)); [EOL]     assertFalse(notbd.contains(notde)); [EOL]     assertTrue(notbd.contains(notae)); [EOL] }
@Test [EOL] public void testConstructorAccessors_isNot() { [EOL]     final CharRange rangea = CharRange.isNot('a'); [EOL]     assertEquals('a', rangea.getStart()); [EOL]     assertEquals('a', rangea.getEnd()); [EOL]     assertTrue(rangea.isNegated()); [EOL]     assertEquals("^a", rangea.toString()); [EOL] }
@Test [EOL] public void testConstructorAccessors_isNot() { [EOL]     final CharRange rangea = CharRange.isNot('a'); [EOL]     assertEquals('a', rangea.getStart()); [EOL]     assertEquals('a', rangea.getEnd()); [EOL]     assertTrue(rangea.isNegated()); [EOL]     assertEquals("^a", rangea.toString()); [EOL] }
@Test [EOL] public void testConstructorAccessors_isNot() { [EOL]     final CharRange rangea = CharRange.isNot('a'); [EOL]     assertEquals('a', rangea.getStart()); [EOL]     assertEquals('a', rangea.getEnd()); [EOL]     assertTrue(rangea.isNegated()); [EOL]     assertEquals("^a", rangea.toString()); [EOL] }
@Test [EOL] public void testConstructorAccessors_isNot() { [EOL]     final CharRange rangea = CharRange.isNot('a'); [EOL]     assertEquals('a', rangea.getStart()); [EOL]     assertEquals('a', rangea.getEnd()); [EOL]     assertTrue(rangea.isNegated()); [EOL]     assertEquals("^a", rangea.toString()); [EOL] }
@Test [EOL] public void testContains_Charrange() { [EOL]     final CharRange a = CharRange.is('a'); [EOL]     final CharRange b = CharRange.is('b'); [EOL]     final CharRange c = CharRange.is('c'); [EOL]     final CharRange c2 = CharRange.is('c'); [EOL]     final CharRange d = CharRange.is('d'); [EOL]     final CharRange e = CharRange.is('e'); [EOL]     final CharRange cd = CharRange.isIn('c', 'd'); [EOL]     final CharRange bd = CharRange.isIn('b', 'd'); [EOL]     final CharRange bc = CharRange.isIn('b', 'c'); [EOL]     final CharRange ab = CharRange.isIn('a', 'b'); [EOL]     final CharRange de = CharRange.isIn('d', 'e'); [EOL]     final CharRange ef = CharRange.isIn('e', 'f'); [EOL]     final CharRange ae = CharRange.isIn('a', 'e'); [EOL]     assertFalse(c.contains(b)); [EOL]     assertTrue(c.contains(c)); [EOL]     assertTrue(c.contains(c2)); [EOL]     assertFalse(c.contains(d)); [EOL]     assertFalse(c.contains(cd)); [EOL]     assertFalse(c.contains(bd)); [EOL]     assertFalse(c.contains(bc)); [EOL]     assertFalse(c.contains(ab)); [EOL]     assertFalse(c.contains(de)); [EOL]     assertTrue(cd.contains(c)); [EOL]     assertTrue(bd.contains(c)); [EOL]     assertTrue(bc.contains(c)); [EOL]     assertFalse(ab.contains(c)); [EOL]     assertFalse(de.contains(c)); [EOL]     assertTrue(ae.contains(b)); [EOL]     assertTrue(ae.contains(ab)); [EOL]     assertTrue(ae.contains(bc)); [EOL]     assertTrue(ae.contains(cd)); [EOL]     assertTrue(ae.contains(de)); [EOL]     final CharRange notb = CharRange.isNot('b'); [EOL]     final CharRange notc = CharRange.isNot('c'); [EOL]     final CharRange notd = CharRange.isNot('d'); [EOL]     final CharRange notab = CharRange.isNotIn('a', 'b'); [EOL]     final CharRange notbc = CharRange.isNotIn('b', 'c'); [EOL]     final CharRange notbd = CharRange.isNotIn('b', 'd'); [EOL]     final CharRange notcd = CharRange.isNotIn('c', 'd'); [EOL]     final CharRange notde = CharRange.isNotIn('d', 'e'); [EOL]     final CharRange notae = CharRange.isNotIn('a', 'e'); [EOL]     final CharRange all = CharRange.isIn((char) 0, Character.MAX_VALUE); [EOL]     final CharRange allbutfirst = CharRange.isIn((char) 1, Character.MAX_VALUE); [EOL]     assertFalse(c.contains(notc)); [EOL]     assertFalse(c.contains(notbd)); [EOL]     assertTrue(all.contains(notc)); [EOL]     assertTrue(all.contains(notbd)); [EOL]     assertFalse(allbutfirst.contains(notc)); [EOL]     assertFalse(allbutfirst.contains(notbd)); [EOL]     assertTrue(notc.contains(a)); [EOL]     assertTrue(notc.contains(b)); [EOL]     assertFalse(notc.contains(c)); [EOL]     assertTrue(notc.contains(d)); [EOL]     assertTrue(notc.contains(e)); [EOL]     assertTrue(notc.contains(ab)); [EOL]     assertFalse(notc.contains(bc)); [EOL]     assertFalse(notc.contains(bd)); [EOL]     assertFalse(notc.contains(cd)); [EOL]     assertTrue(notc.contains(de)); [EOL]     assertFalse(notc.contains(ae)); [EOL]     assertFalse(notc.contains(all)); [EOL]     assertFalse(notc.contains(allbutfirst)); [EOL]     assertTrue(notbd.contains(a)); [EOL]     assertFalse(notbd.contains(b)); [EOL]     assertFalse(notbd.contains(c)); [EOL]     assertFalse(notbd.contains(d)); [EOL]     assertTrue(notbd.contains(e)); [EOL]     assertTrue(notcd.contains(ab)); [EOL]     assertFalse(notcd.contains(bc)); [EOL]     assertFalse(notcd.contains(bd)); [EOL]     assertFalse(notcd.contains(cd)); [EOL]     assertFalse(notcd.contains(de)); [EOL]     assertFalse(notcd.contains(ae)); [EOL]     assertTrue(notcd.contains(ef)); [EOL]     assertFalse(notcd.contains(all)); [EOL]     assertFalse(notcd.contains(allbutfirst)); [EOL]     assertFalse(notc.contains(notb)); [EOL]     assertTrue(notc.contains(notc)); [EOL]     assertFalse(notc.contains(notd)); [EOL]     assertFalse(notc.contains(notab)); [EOL]     assertTrue(notc.contains(notbc)); [EOL]     assertTrue(notc.contains(notbd)); [EOL]     assertTrue(notc.contains(notcd)); [EOL]     assertFalse(notc.contains(notde)); [EOL]     assertFalse(notbd.contains(notb)); [EOL]     assertFalse(notbd.contains(notc)); [EOL]     assertFalse(notbd.contains(notd)); [EOL]     assertFalse(notbd.contains(notab)); [EOL]     assertFalse(notbd.contains(notbc)); [EOL]     assertTrue(notbd.contains(notbd)); [EOL]     assertFalse(notbd.contains(notcd)); [EOL]     assertFalse(notbd.contains(notde)); [EOL]     assertTrue(notbd.contains(notae)); [EOL] }
@Test [EOL] public void testContains_Charrange() { [EOL]     final CharRange a = CharRange.is('a'); [EOL]     final CharRange b = CharRange.is('b'); [EOL]     final CharRange c = CharRange.is('c'); [EOL]     final CharRange c2 = CharRange.is('c'); [EOL]     final CharRange d = CharRange.is('d'); [EOL]     final CharRange e = CharRange.is('e'); [EOL]     final CharRange cd = CharRange.isIn('c', 'd'); [EOL]     final CharRange bd = CharRange.isIn('b', 'd'); [EOL]     final CharRange bc = CharRange.isIn('b', 'c'); [EOL]     final CharRange ab = CharRange.isIn('a', 'b'); [EOL]     final CharRange de = CharRange.isIn('d', 'e'); [EOL]     final CharRange ef = CharRange.isIn('e', 'f'); [EOL]     final CharRange ae = CharRange.isIn('a', 'e'); [EOL]     assertFalse(c.contains(b)); [EOL]     assertTrue(c.contains(c)); [EOL]     assertTrue(c.contains(c2)); [EOL]     assertFalse(c.contains(d)); [EOL]     assertFalse(c.contains(cd)); [EOL]     assertFalse(c.contains(bd)); [EOL]     assertFalse(c.contains(bc)); [EOL]     assertFalse(c.contains(ab)); [EOL]     assertFalse(c.contains(de)); [EOL]     assertTrue(cd.contains(c)); [EOL]     assertTrue(bd.contains(c)); [EOL]     assertTrue(bc.contains(c)); [EOL]     assertFalse(ab.contains(c)); [EOL]     assertFalse(de.contains(c)); [EOL]     assertTrue(ae.contains(b)); [EOL]     assertTrue(ae.contains(ab)); [EOL]     assertTrue(ae.contains(bc)); [EOL]     assertTrue(ae.contains(cd)); [EOL]     assertTrue(ae.contains(de)); [EOL]     final CharRange notb = CharRange.isNot('b'); [EOL]     final CharRange notc = CharRange.isNot('c'); [EOL]     final CharRange notd = CharRange.isNot('d'); [EOL]     final CharRange notab = CharRange.isNotIn('a', 'b'); [EOL]     final CharRange notbc = CharRange.isNotIn('b', 'c'); [EOL]     final CharRange notbd = CharRange.isNotIn('b', 'd'); [EOL]     final CharRange notcd = CharRange.isNotIn('c', 'd'); [EOL]     final CharRange notde = CharRange.isNotIn('d', 'e'); [EOL]     final CharRange notae = CharRange.isNotIn('a', 'e'); [EOL]     final CharRange all = CharRange.isIn((char) 0, Character.MAX_VALUE); [EOL]     final CharRange allbutfirst = CharRange.isIn((char) 1, Character.MAX_VALUE); [EOL]     assertFalse(c.contains(notc)); [EOL]     assertFalse(c.contains(notbd)); [EOL]     assertTrue(all.contains(notc)); [EOL]     assertTrue(all.contains(notbd)); [EOL]     assertFalse(allbutfirst.contains(notc)); [EOL]     assertFalse(allbutfirst.contains(notbd)); [EOL]     assertTrue(notc.contains(a)); [EOL]     assertTrue(notc.contains(b)); [EOL]     assertFalse(notc.contains(c)); [EOL]     assertTrue(notc.contains(d)); [EOL]     assertTrue(notc.contains(e)); [EOL]     assertTrue(notc.contains(ab)); [EOL]     assertFalse(notc.contains(bc)); [EOL]     assertFalse(notc.contains(bd)); [EOL]     assertFalse(notc.contains(cd)); [EOL]     assertTrue(notc.contains(de)); [EOL]     assertFalse(notc.contains(ae)); [EOL]     assertFalse(notc.contains(all)); [EOL]     assertFalse(notc.contains(allbutfirst)); [EOL]     assertTrue(notbd.contains(a)); [EOL]     assertFalse(notbd.contains(b)); [EOL]     assertFalse(notbd.contains(c)); [EOL]     assertFalse(notbd.contains(d)); [EOL]     assertTrue(notbd.contains(e)); [EOL]     assertTrue(notcd.contains(ab)); [EOL]     assertFalse(notcd.contains(bc)); [EOL]     assertFalse(notcd.contains(bd)); [EOL]     assertFalse(notcd.contains(cd)); [EOL]     assertFalse(notcd.contains(de)); [EOL]     assertFalse(notcd.contains(ae)); [EOL]     assertTrue(notcd.contains(ef)); [EOL]     assertFalse(notcd.contains(all)); [EOL]     assertFalse(notcd.contains(allbutfirst)); [EOL]     assertFalse(notc.contains(notb)); [EOL]     assertTrue(notc.contains(notc)); [EOL]     assertFalse(notc.contains(notd)); [EOL]     assertFalse(notc.contains(notab)); [EOL]     assertTrue(notc.contains(notbc)); [EOL]     assertTrue(notc.contains(notbd)); [EOL]     assertTrue(notc.contains(notcd)); [EOL]     assertFalse(notc.contains(notde)); [EOL]     assertFalse(notbd.contains(notb)); [EOL]     assertFalse(notbd.contains(notc)); [EOL]     assertFalse(notbd.contains(notd)); [EOL]     assertFalse(notbd.contains(notab)); [EOL]     assertFalse(notbd.contains(notbc)); [EOL]     assertTrue(notbd.contains(notbd)); [EOL]     assertFalse(notbd.contains(notcd)); [EOL]     assertFalse(notbd.contains(notde)); [EOL]     assertTrue(notbd.contains(notae)); [EOL] }
@Test [EOL] public void testContains_Charrange() { [EOL]     final CharRange a = CharRange.is('a'); [EOL]     final CharRange b = CharRange.is('b'); [EOL]     final CharRange c = CharRange.is('c'); [EOL]     final CharRange c2 = CharRange.is('c'); [EOL]     final CharRange d = CharRange.is('d'); [EOL]     final CharRange e = CharRange.is('e'); [EOL]     final CharRange cd = CharRange.isIn('c', 'd'); [EOL]     final CharRange bd = CharRange.isIn('b', 'd'); [EOL]     final CharRange bc = CharRange.isIn('b', 'c'); [EOL]     final CharRange ab = CharRange.isIn('a', 'b'); [EOL]     final CharRange de = CharRange.isIn('d', 'e'); [EOL]     final CharRange ef = CharRange.isIn('e', 'f'); [EOL]     final CharRange ae = CharRange.isIn('a', 'e'); [EOL]     assertFalse(c.contains(b)); [EOL]     assertTrue(c.contains(c)); [EOL]     assertTrue(c.contains(c2)); [EOL]     assertFalse(c.contains(d)); [EOL]     assertFalse(c.contains(cd)); [EOL]     assertFalse(c.contains(bd)); [EOL]     assertFalse(c.contains(bc)); [EOL]     assertFalse(c.contains(ab)); [EOL]     assertFalse(c.contains(de)); [EOL]     assertTrue(cd.contains(c)); [EOL]     assertTrue(bd.contains(c)); [EOL]     assertTrue(bc.contains(c)); [EOL]     assertFalse(ab.contains(c)); [EOL]     assertFalse(de.contains(c)); [EOL]     assertTrue(ae.contains(b)); [EOL]     assertTrue(ae.contains(ab)); [EOL]     assertTrue(ae.contains(bc)); [EOL]     assertTrue(ae.contains(cd)); [EOL]     assertTrue(ae.contains(de)); [EOL]     final CharRange notb = CharRange.isNot('b'); [EOL]     final CharRange notc = CharRange.isNot('c'); [EOL]     final CharRange notd = CharRange.isNot('d'); [EOL]     final CharRange notab = CharRange.isNotIn('a', 'b'); [EOL]     final CharRange notbc = CharRange.isNotIn('b', 'c'); [EOL]     final CharRange notbd = CharRange.isNotIn('b', 'd'); [EOL]     final CharRange notcd = CharRange.isNotIn('c', 'd'); [EOL]     final CharRange notde = CharRange.isNotIn('d', 'e'); [EOL]     final CharRange notae = CharRange.isNotIn('a', 'e'); [EOL]     final CharRange all = CharRange.isIn((char) 0, Character.MAX_VALUE); [EOL]     final CharRange allbutfirst = CharRange.isIn((char) 1, Character.MAX_VALUE); [EOL]     assertFalse(c.contains(notc)); [EOL]     assertFalse(c.contains(notbd)); [EOL]     assertTrue(all.contains(notc)); [EOL]     assertTrue(all.contains(notbd)); [EOL]     assertFalse(allbutfirst.contains(notc)); [EOL]     assertFalse(allbutfirst.contains(notbd)); [EOL]     assertTrue(notc.contains(a)); [EOL]     assertTrue(notc.contains(b)); [EOL]     assertFalse(notc.contains(c)); [EOL]     assertTrue(notc.contains(d)); [EOL]     assertTrue(notc.contains(e)); [EOL]     assertTrue(notc.contains(ab)); [EOL]     assertFalse(notc.contains(bc)); [EOL]     assertFalse(notc.contains(bd)); [EOL]     assertFalse(notc.contains(cd)); [EOL]     assertTrue(notc.contains(de)); [EOL]     assertFalse(notc.contains(ae)); [EOL]     assertFalse(notc.contains(all)); [EOL]     assertFalse(notc.contains(allbutfirst)); [EOL]     assertTrue(notbd.contains(a)); [EOL]     assertFalse(notbd.contains(b)); [EOL]     assertFalse(notbd.contains(c)); [EOL]     assertFalse(notbd.contains(d)); [EOL]     assertTrue(notbd.contains(e)); [EOL]     assertTrue(notcd.contains(ab)); [EOL]     assertFalse(notcd.contains(bc)); [EOL]     assertFalse(notcd.contains(bd)); [EOL]     assertFalse(notcd.contains(cd)); [EOL]     assertFalse(notcd.contains(de)); [EOL]     assertFalse(notcd.contains(ae)); [EOL]     assertTrue(notcd.contains(ef)); [EOL]     assertFalse(notcd.contains(all)); [EOL]     assertFalse(notcd.contains(allbutfirst)); [EOL]     assertFalse(notc.contains(notb)); [EOL]     assertTrue(notc.contains(notc)); [EOL]     assertFalse(notc.contains(notd)); [EOL]     assertFalse(notc.contains(notab)); [EOL]     assertTrue(notc.contains(notbc)); [EOL]     assertTrue(notc.contains(notbd)); [EOL]     assertTrue(notc.contains(notcd)); [EOL]     assertFalse(notc.contains(notde)); [EOL]     assertFalse(notbd.contains(notb)); [EOL]     assertFalse(notbd.contains(notc)); [EOL]     assertFalse(notbd.contains(notd)); [EOL]     assertFalse(notbd.contains(notab)); [EOL]     assertFalse(notbd.contains(notbc)); [EOL]     assertTrue(notbd.contains(notbd)); [EOL]     assertFalse(notbd.contains(notcd)); [EOL]     assertFalse(notbd.contains(notde)); [EOL]     assertTrue(notbd.contains(notae)); [EOL] }
@Test [EOL] public void testContains_Charrange() { [EOL]     final CharRange a = CharRange.is('a'); [EOL]     final CharRange b = CharRange.is('b'); [EOL]     final CharRange c = CharRange.is('c'); [EOL]     final CharRange c2 = CharRange.is('c'); [EOL]     final CharRange d = CharRange.is('d'); [EOL]     final CharRange e = CharRange.is('e'); [EOL]     final CharRange cd = CharRange.isIn('c', 'd'); [EOL]     final CharRange bd = CharRange.isIn('b', 'd'); [EOL]     final CharRange bc = CharRange.isIn('b', 'c'); [EOL]     final CharRange ab = CharRange.isIn('a', 'b'); [EOL]     final CharRange de = CharRange.isIn('d', 'e'); [EOL]     final CharRange ef = CharRange.isIn('e', 'f'); [EOL]     final CharRange ae = CharRange.isIn('a', 'e'); [EOL]     assertFalse(c.contains(b)); [EOL]     assertTrue(c.contains(c)); [EOL]     assertTrue(c.contains(c2)); [EOL]     assertFalse(c.contains(d)); [EOL]     assertFalse(c.contains(cd)); [EOL]     assertFalse(c.contains(bd)); [EOL]     assertFalse(c.contains(bc)); [EOL]     assertFalse(c.contains(ab)); [EOL]     assertFalse(c.contains(de)); [EOL]     assertTrue(cd.contains(c)); [EOL]     assertTrue(bd.contains(c)); [EOL]     assertTrue(bc.contains(c)); [EOL]     assertFalse(ab.contains(c)); [EOL]     assertFalse(de.contains(c)); [EOL]     assertTrue(ae.contains(b)); [EOL]     assertTrue(ae.contains(ab)); [EOL]     assertTrue(ae.contains(bc)); [EOL]     assertTrue(ae.contains(cd)); [EOL]     assertTrue(ae.contains(de)); [EOL]     final CharRange notb = CharRange.isNot('b'); [EOL]     final CharRange notc = CharRange.isNot('c'); [EOL]     final CharRange notd = CharRange.isNot('d'); [EOL]     final CharRange notab = CharRange.isNotIn('a', 'b'); [EOL]     final CharRange notbc = CharRange.isNotIn('b', 'c'); [EOL]     final CharRange notbd = CharRange.isNotIn('b', 'd'); [EOL]     final CharRange notcd = CharRange.isNotIn('c', 'd'); [EOL]     final CharRange notde = CharRange.isNotIn('d', 'e'); [EOL]     final CharRange notae = CharRange.isNotIn('a', 'e'); [EOL]     final CharRange all = CharRange.isIn((char) 0, Character.MAX_VALUE); [EOL]     final CharRange allbutfirst = CharRange.isIn((char) 1, Character.MAX_VALUE); [EOL]     assertFalse(c.contains(notc)); [EOL]     assertFalse(c.contains(notbd)); [EOL]     assertTrue(all.contains(notc)); [EOL]     assertTrue(all.contains(notbd)); [EOL]     assertFalse(allbutfirst.contains(notc)); [EOL]     assertFalse(allbutfirst.contains(notbd)); [EOL]     assertTrue(notc.contains(a)); [EOL]     assertTrue(notc.contains(b)); [EOL]     assertFalse(notc.contains(c)); [EOL]     assertTrue(notc.contains(d)); [EOL]     assertTrue(notc.contains(e)); [EOL]     assertTrue(notc.contains(ab)); [EOL]     assertFalse(notc.contains(bc)); [EOL]     assertFalse(notc.contains(bd)); [EOL]     assertFalse(notc.contains(cd)); [EOL]     assertTrue(notc.contains(de)); [EOL]     assertFalse(notc.contains(ae)); [EOL]     assertFalse(notc.contains(all)); [EOL]     assertFalse(notc.contains(allbutfirst)); [EOL]     assertTrue(notbd.contains(a)); [EOL]     assertFalse(notbd.contains(b)); [EOL]     assertFalse(notbd.contains(c)); [EOL]     assertFalse(notbd.contains(d)); [EOL]     assertTrue(notbd.contains(e)); [EOL]     assertTrue(notcd.contains(ab)); [EOL]     assertFalse(notcd.contains(bc)); [EOL]     assertFalse(notcd.contains(bd)); [EOL]     assertFalse(notcd.contains(cd)); [EOL]     assertFalse(notcd.contains(de)); [EOL]     assertFalse(notcd.contains(ae)); [EOL]     assertTrue(notcd.contains(ef)); [EOL]     assertFalse(notcd.contains(all)); [EOL]     assertFalse(notcd.contains(allbutfirst)); [EOL]     assertFalse(notc.contains(notb)); [EOL]     assertTrue(notc.contains(notc)); [EOL]     assertFalse(notc.contains(notd)); [EOL]     assertFalse(notc.contains(notab)); [EOL]     assertTrue(notc.contains(notbc)); [EOL]     assertTrue(notc.contains(notbd)); [EOL]     assertTrue(notc.contains(notcd)); [EOL]     assertFalse(notc.contains(notde)); [EOL]     assertFalse(notbd.contains(notb)); [EOL]     assertFalse(notbd.contains(notc)); [EOL]     assertFalse(notbd.contains(notd)); [EOL]     assertFalse(notbd.contains(notab)); [EOL]     assertFalse(notbd.contains(notbc)); [EOL]     assertTrue(notbd.contains(notbd)); [EOL]     assertFalse(notbd.contains(notcd)); [EOL]     assertFalse(notbd.contains(notde)); [EOL]     assertTrue(notbd.contains(notae)); [EOL] }
@Test [EOL] public void testContains_Charrange() { [EOL]     final CharRange a = CharRange.is('a'); [EOL]     final CharRange b = CharRange.is('b'); [EOL]     final CharRange c = CharRange.is('c'); [EOL]     final CharRange c2 = CharRange.is('c'); [EOL]     final CharRange d = CharRange.is('d'); [EOL]     final CharRange e = CharRange.is('e'); [EOL]     final CharRange cd = CharRange.isIn('c', 'd'); [EOL]     final CharRange bd = CharRange.isIn('b', 'd'); [EOL]     final CharRange bc = CharRange.isIn('b', 'c'); [EOL]     final CharRange ab = CharRange.isIn('a', 'b'); [EOL]     final CharRange de = CharRange.isIn('d', 'e'); [EOL]     final CharRange ef = CharRange.isIn('e', 'f'); [EOL]     final CharRange ae = CharRange.isIn('a', 'e'); [EOL]     assertFalse(c.contains(b)); [EOL]     assertTrue(c.contains(c)); [EOL]     assertTrue(c.contains(c2)); [EOL]     assertFalse(c.contains(d)); [EOL]     assertFalse(c.contains(cd)); [EOL]     assertFalse(c.contains(bd)); [EOL]     assertFalse(c.contains(bc)); [EOL]     assertFalse(c.contains(ab)); [EOL]     assertFalse(c.contains(de)); [EOL]     assertTrue(cd.contains(c)); [EOL]     assertTrue(bd.contains(c)); [EOL]     assertTrue(bc.contains(c)); [EOL]     assertFalse(ab.contains(c)); [EOL]     assertFalse(de.contains(c)); [EOL]     assertTrue(ae.contains(b)); [EOL]     assertTrue(ae.contains(ab)); [EOL]     assertTrue(ae.contains(bc)); [EOL]     assertTrue(ae.contains(cd)); [EOL]     assertTrue(ae.contains(de)); [EOL]     final CharRange notb = CharRange.isNot('b'); [EOL]     final CharRange notc = CharRange.isNot('c'); [EOL]     final CharRange notd = CharRange.isNot('d'); [EOL]     final CharRange notab = CharRange.isNotIn('a', 'b'); [EOL]     final CharRange notbc = CharRange.isNotIn('b', 'c'); [EOL]     final CharRange notbd = CharRange.isNotIn('b', 'd'); [EOL]     final CharRange notcd = CharRange.isNotIn('c', 'd'); [EOL]     final CharRange notde = CharRange.isNotIn('d', 'e'); [EOL]     final CharRange notae = CharRange.isNotIn('a', 'e'); [EOL]     final CharRange all = CharRange.isIn((char) 0, Character.MAX_VALUE); [EOL]     final CharRange allbutfirst = CharRange.isIn((char) 1, Character.MAX_VALUE); [EOL]     assertFalse(c.contains(notc)); [EOL]     assertFalse(c.contains(notbd)); [EOL]     assertTrue(all.contains(notc)); [EOL]     assertTrue(all.contains(notbd)); [EOL]     assertFalse(allbutfirst.contains(notc)); [EOL]     assertFalse(allbutfirst.contains(notbd)); [EOL]     assertTrue(notc.contains(a)); [EOL]     assertTrue(notc.contains(b)); [EOL]     assertFalse(notc.contains(c)); [EOL]     assertTrue(notc.contains(d)); [EOL]     assertTrue(notc.contains(e)); [EOL]     assertTrue(notc.contains(ab)); [EOL]     assertFalse(notc.contains(bc)); [EOL]     assertFalse(notc.contains(bd)); [EOL]     assertFalse(notc.contains(cd)); [EOL]     assertTrue(notc.contains(de)); [EOL]     assertFalse(notc.contains(ae)); [EOL]     assertFalse(notc.contains(all)); [EOL]     assertFalse(notc.contains(allbutfirst)); [EOL]     assertTrue(notbd.contains(a)); [EOL]     assertFalse(notbd.contains(b)); [EOL]     assertFalse(notbd.contains(c)); [EOL]     assertFalse(notbd.contains(d)); [EOL]     assertTrue(notbd.contains(e)); [EOL]     assertTrue(notcd.contains(ab)); [EOL]     assertFalse(notcd.contains(bc)); [EOL]     assertFalse(notcd.contains(bd)); [EOL]     assertFalse(notcd.contains(cd)); [EOL]     assertFalse(notcd.contains(de)); [EOL]     assertFalse(notcd.contains(ae)); [EOL]     assertTrue(notcd.contains(ef)); [EOL]     assertFalse(notcd.contains(all)); [EOL]     assertFalse(notcd.contains(allbutfirst)); [EOL]     assertFalse(notc.contains(notb)); [EOL]     assertTrue(notc.contains(notc)); [EOL]     assertFalse(notc.contains(notd)); [EOL]     assertFalse(notc.contains(notab)); [EOL]     assertTrue(notc.contains(notbc)); [EOL]     assertTrue(notc.contains(notbd)); [EOL]     assertTrue(notc.contains(notcd)); [EOL]     assertFalse(notc.contains(notde)); [EOL]     assertFalse(notbd.contains(notb)); [EOL]     assertFalse(notbd.contains(notc)); [EOL]     assertFalse(notbd.contains(notd)); [EOL]     assertFalse(notbd.contains(notab)); [EOL]     assertFalse(notbd.contains(notbc)); [EOL]     assertTrue(notbd.contains(notbd)); [EOL]     assertFalse(notbd.contains(notcd)); [EOL]     assertFalse(notbd.contains(notde)); [EOL]     assertTrue(notbd.contains(notae)); [EOL] }
@Test [EOL] public void testContains_Charrange() { [EOL]     final CharRange a = CharRange.is('a'); [EOL]     final CharRange b = CharRange.is('b'); [EOL]     final CharRange c = CharRange.is('c'); [EOL]     final CharRange c2 = CharRange.is('c'); [EOL]     final CharRange d = CharRange.is('d'); [EOL]     final CharRange e = CharRange.is('e'); [EOL]     final CharRange cd = CharRange.isIn('c', 'd'); [EOL]     final CharRange bd = CharRange.isIn('b', 'd'); [EOL]     final CharRange bc = CharRange.isIn('b', 'c'); [EOL]     final CharRange ab = CharRange.isIn('a', 'b'); [EOL]     final CharRange de = CharRange.isIn('d', 'e'); [EOL]     final CharRange ef = CharRange.isIn('e', 'f'); [EOL]     final CharRange ae = CharRange.isIn('a', 'e'); [EOL]     assertFalse(c.contains(b)); [EOL]     assertTrue(c.contains(c)); [EOL]     assertTrue(c.contains(c2)); [EOL]     assertFalse(c.contains(d)); [EOL]     assertFalse(c.contains(cd)); [EOL]     assertFalse(c.contains(bd)); [EOL]     assertFalse(c.contains(bc)); [EOL]     assertFalse(c.contains(ab)); [EOL]     assertFalse(c.contains(de)); [EOL]     assertTrue(cd.contains(c)); [EOL]     assertTrue(bd.contains(c)); [EOL]     assertTrue(bc.contains(c)); [EOL]     assertFalse(ab.contains(c)); [EOL]     assertFalse(de.contains(c)); [EOL]     assertTrue(ae.contains(b)); [EOL]     assertTrue(ae.contains(ab)); [EOL]     assertTrue(ae.contains(bc)); [EOL]     assertTrue(ae.contains(cd)); [EOL]     assertTrue(ae.contains(de)); [EOL]     final CharRange notb = CharRange.isNot('b'); [EOL]     final CharRange notc = CharRange.isNot('c'); [EOL]     final CharRange notd = CharRange.isNot('d'); [EOL]     final CharRange notab = CharRange.isNotIn('a', 'b'); [EOL]     final CharRange notbc = CharRange.isNotIn('b', 'c'); [EOL]     final CharRange notbd = CharRange.isNotIn('b', 'd'); [EOL]     final CharRange notcd = CharRange.isNotIn('c', 'd'); [EOL]     final CharRange notde = CharRange.isNotIn('d', 'e'); [EOL]     final CharRange notae = CharRange.isNotIn('a', 'e'); [EOL]     final CharRange all = CharRange.isIn((char) 0, Character.MAX_VALUE); [EOL]     final CharRange allbutfirst = CharRange.isIn((char) 1, Character.MAX_VALUE); [EOL]     assertFalse(c.contains(notc)); [EOL]     assertFalse(c.contains(notbd)); [EOL]     assertTrue(all.contains(notc)); [EOL]     assertTrue(all.contains(notbd)); [EOL]     assertFalse(allbutfirst.contains(notc)); [EOL]     assertFalse(allbutfirst.contains(notbd)); [EOL]     assertTrue(notc.contains(a)); [EOL]     assertTrue(notc.contains(b)); [EOL]     assertFalse(notc.contains(c)); [EOL]     assertTrue(notc.contains(d)); [EOL]     assertTrue(notc.contains(e)); [EOL]     assertTrue(notc.contains(ab)); [EOL]     assertFalse(notc.contains(bc)); [EOL]     assertFalse(notc.contains(bd)); [EOL]     assertFalse(notc.contains(cd)); [EOL]     assertTrue(notc.contains(de)); [EOL]     assertFalse(notc.contains(ae)); [EOL]     assertFalse(notc.contains(all)); [EOL]     assertFalse(notc.contains(allbutfirst)); [EOL]     assertTrue(notbd.contains(a)); [EOL]     assertFalse(notbd.contains(b)); [EOL]     assertFalse(notbd.contains(c)); [EOL]     assertFalse(notbd.contains(d)); [EOL]     assertTrue(notbd.contains(e)); [EOL]     assertTrue(notcd.contains(ab)); [EOL]     assertFalse(notcd.contains(bc)); [EOL]     assertFalse(notcd.contains(bd)); [EOL]     assertFalse(notcd.contains(cd)); [EOL]     assertFalse(notcd.contains(de)); [EOL]     assertFalse(notcd.contains(ae)); [EOL]     assertTrue(notcd.contains(ef)); [EOL]     assertFalse(notcd.contains(all)); [EOL]     assertFalse(notcd.contains(allbutfirst)); [EOL]     assertFalse(notc.contains(notb)); [EOL]     assertTrue(notc.contains(notc)); [EOL]     assertFalse(notc.contains(notd)); [EOL]     assertFalse(notc.contains(notab)); [EOL]     assertTrue(notc.contains(notbc)); [EOL]     assertTrue(notc.contains(notbd)); [EOL]     assertTrue(notc.contains(notcd)); [EOL]     assertFalse(notc.contains(notde)); [EOL]     assertFalse(notbd.contains(notb)); [EOL]     assertFalse(notbd.contains(notc)); [EOL]     assertFalse(notbd.contains(notd)); [EOL]     assertFalse(notbd.contains(notab)); [EOL]     assertFalse(notbd.contains(notbc)); [EOL]     assertTrue(notbd.contains(notbd)); [EOL]     assertFalse(notbd.contains(notcd)); [EOL]     assertFalse(notbd.contains(notde)); [EOL]     assertTrue(notbd.contains(notae)); [EOL] }
@Test [EOL] public void testContains_Charrange() { [EOL]     final CharRange a = CharRange.is('a'); [EOL]     final CharRange b = CharRange.is('b'); [EOL]     final CharRange c = CharRange.is('c'); [EOL]     final CharRange c2 = CharRange.is('c'); [EOL]     final CharRange d = CharRange.is('d'); [EOL]     final CharRange e = CharRange.is('e'); [EOL]     final CharRange cd = CharRange.isIn('c', 'd'); [EOL]     final CharRange bd = CharRange.isIn('b', 'd'); [EOL]     final CharRange bc = CharRange.isIn('b', 'c'); [EOL]     final CharRange ab = CharRange.isIn('a', 'b'); [EOL]     final CharRange de = CharRange.isIn('d', 'e'); [EOL]     final CharRange ef = CharRange.isIn('e', 'f'); [EOL]     final CharRange ae = CharRange.isIn('a', 'e'); [EOL]     assertFalse(c.contains(b)); [EOL]     assertTrue(c.contains(c)); [EOL]     assertTrue(c.contains(c2)); [EOL]     assertFalse(c.contains(d)); [EOL]     assertFalse(c.contains(cd)); [EOL]     assertFalse(c.contains(bd)); [EOL]     assertFalse(c.contains(bc)); [EOL]     assertFalse(c.contains(ab)); [EOL]     assertFalse(c.contains(de)); [EOL]     assertTrue(cd.contains(c)); [EOL]     assertTrue(bd.contains(c)); [EOL]     assertTrue(bc.contains(c)); [EOL]     assertFalse(ab.contains(c)); [EOL]     assertFalse(de.contains(c)); [EOL]     assertTrue(ae.contains(b)); [EOL]     assertTrue(ae.contains(ab)); [EOL]     assertTrue(ae.contains(bc)); [EOL]     assertTrue(ae.contains(cd)); [EOL]     assertTrue(ae.contains(de)); [EOL]     final CharRange notb = CharRange.isNot('b'); [EOL]     final CharRange notc = CharRange.isNot('c'); [EOL]     final CharRange notd = CharRange.isNot('d'); [EOL]     final CharRange notab = CharRange.isNotIn('a', 'b'); [EOL]     final CharRange notbc = CharRange.isNotIn('b', 'c'); [EOL]     final CharRange notbd = CharRange.isNotIn('b', 'd'); [EOL]     final CharRange notcd = CharRange.isNotIn('c', 'd'); [EOL]     final CharRange notde = CharRange.isNotIn('d', 'e'); [EOL]     final CharRange notae = CharRange.isNotIn('a', 'e'); [EOL]     final CharRange all = CharRange.isIn((char) 0, Character.MAX_VALUE); [EOL]     final CharRange allbutfirst = CharRange.isIn((char) 1, Character.MAX_VALUE); [EOL]     assertFalse(c.contains(notc)); [EOL]     assertFalse(c.contains(notbd)); [EOL]     assertTrue(all.contains(notc)); [EOL]     assertTrue(all.contains(notbd)); [EOL]     assertFalse(allbutfirst.contains(notc)); [EOL]     assertFalse(allbutfirst.contains(notbd)); [EOL]     assertTrue(notc.contains(a)); [EOL]     assertTrue(notc.contains(b)); [EOL]     assertFalse(notc.contains(c)); [EOL]     assertTrue(notc.contains(d)); [EOL]     assertTrue(notc.contains(e)); [EOL]     assertTrue(notc.contains(ab)); [EOL]     assertFalse(notc.contains(bc)); [EOL]     assertFalse(notc.contains(bd)); [EOL]     assertFalse(notc.contains(cd)); [EOL]     assertTrue(notc.contains(de)); [EOL]     assertFalse(notc.contains(ae)); [EOL]     assertFalse(notc.contains(all)); [EOL]     assertFalse(notc.contains(allbutfirst)); [EOL]     assertTrue(notbd.contains(a)); [EOL]     assertFalse(notbd.contains(b)); [EOL]     assertFalse(notbd.contains(c)); [EOL]     assertFalse(notbd.contains(d)); [EOL]     assertTrue(notbd.contains(e)); [EOL]     assertTrue(notcd.contains(ab)); [EOL]     assertFalse(notcd.contains(bc)); [EOL]     assertFalse(notcd.contains(bd)); [EOL]     assertFalse(notcd.contains(cd)); [EOL]     assertFalse(notcd.contains(de)); [EOL]     assertFalse(notcd.contains(ae)); [EOL]     assertTrue(notcd.contains(ef)); [EOL]     assertFalse(notcd.contains(all)); [EOL]     assertFalse(notcd.contains(allbutfirst)); [EOL]     assertFalse(notc.contains(notb)); [EOL]     assertTrue(notc.contains(notc)); [EOL]     assertFalse(notc.contains(notd)); [EOL]     assertFalse(notc.contains(notab)); [EOL]     assertTrue(notc.contains(notbc)); [EOL]     assertTrue(notc.contains(notbd)); [EOL]     assertTrue(notc.contains(notcd)); [EOL]     assertFalse(notc.contains(notde)); [EOL]     assertFalse(notbd.contains(notb)); [EOL]     assertFalse(notbd.contains(notc)); [EOL]     assertFalse(notbd.contains(notd)); [EOL]     assertFalse(notbd.contains(notab)); [EOL]     assertFalse(notbd.contains(notbc)); [EOL]     assertTrue(notbd.contains(notbd)); [EOL]     assertFalse(notbd.contains(notcd)); [EOL]     assertFalse(notbd.contains(notde)); [EOL]     assertTrue(notbd.contains(notae)); [EOL] }
@Test [EOL] public void testConstructorAccessors_isNot() { [EOL]     final CharRange rangea = CharRange.isNot('a'); [EOL]     assertEquals('a', rangea.getStart()); [EOL]     assertEquals('a', rangea.getEnd()); [EOL]     assertTrue(rangea.isNegated()); [EOL]     assertEquals("^a", rangea.toString()); [EOL] }
@Test [EOL] public void testConstructorAccessors_isNot() { [EOL]     final CharRange rangea = CharRange.isNot('a'); [EOL]     assertEquals('a', rangea.getStart()); [EOL]     assertEquals('a', rangea.getEnd()); [EOL]     assertTrue(rangea.isNegated()); [EOL]     assertEquals("^a", rangea.toString()); [EOL] }
@Test [EOL] public void testConstructorAccessors_isNot() { [EOL]     final CharRange rangea = CharRange.isNot('a'); [EOL]     assertEquals('a', rangea.getStart()); [EOL]     assertEquals('a', rangea.getEnd()); [EOL]     assertTrue(rangea.isNegated()); [EOL]     assertEquals("^a", rangea.toString()); [EOL] }
@Test [EOL] public void testIterator() { [EOL]     final CharRange a = CharRange.is('a'); [EOL]     final CharRange ad = CharRange.isIn('a', 'd'); [EOL]     final CharRange nota = CharRange.isNot('a'); [EOL]     final CharRange emptySet = CharRange.isNotIn((char) 0, Character.MAX_VALUE); [EOL]     final CharRange notFirst = CharRange.isNotIn((char) 1, Character.MAX_VALUE); [EOL]     final CharRange notLast = CharRange.isNotIn((char) 0, (char) (Character.MAX_VALUE - 1)); [EOL]     final Iterator<Character> aIt = a.iterator(); [EOL]     assertNotNull(aIt); [EOL]     assertTrue(aIt.hasNext()); [EOL]     assertEquals(Character.valueOf('a'), aIt.next()); [EOL]     assertFalse(aIt.hasNext()); [EOL]     final Iterator<Character> adIt = ad.iterator(); [EOL]     assertNotNull(adIt); [EOL]     assertTrue(adIt.hasNext()); [EOL]     assertEquals(Character.valueOf('a'), adIt.next()); [EOL]     assertEquals(Character.valueOf('b'), adIt.next()); [EOL]     assertEquals(Character.valueOf('c'), adIt.next()); [EOL]     assertEquals(Character.valueOf('d'), adIt.next()); [EOL]     assertFalse(adIt.hasNext()); [EOL]     final Iterator<Character> notaIt = nota.iterator(); [EOL]     assertNotNull(notaIt); [EOL]     assertTrue(notaIt.hasNext()); [EOL]     while (notaIt.hasNext()) { [EOL]         final Character c = notaIt.next(); [EOL]         assertFalse('a' == c.charValue()); [EOL]     } [EOL]     final Iterator<Character> emptySetIt = emptySet.iterator(); [EOL]     assertNotNull(emptySetIt); [EOL]     assertFalse(emptySetIt.hasNext()); [EOL]     try { [EOL]         emptySetIt.next(); [EOL]         fail("Should throw NoSuchElementException"); [EOL]     } catch (final NoSuchElementException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     final Iterator<Character> notFirstIt = notFirst.iterator(); [EOL]     assertNotNull(notFirstIt); [EOL]     assertTrue(notFirstIt.hasNext()); [EOL]     assertEquals(Character.valueOf((char) 0), notFirstIt.next()); [EOL]     assertFalse(notFirstIt.hasNext()); [EOL]     try { [EOL]         notFirstIt.next(); [EOL]         fail("Should throw NoSuchElementException"); [EOL]     } catch (final NoSuchElementException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     final Iterator<Character> notLastIt = notLast.iterator(); [EOL]     assertNotNull(notLastIt); [EOL]     assertTrue(notLastIt.hasNext()); [EOL]     assertEquals(Character.valueOf(Character.MAX_VALUE), notLastIt.next()); [EOL]     assertFalse(notLastIt.hasNext()); [EOL]     try { [EOL]         notLastIt.next(); [EOL]         fail("Should throw NoSuchElementException"); [EOL]     } catch (final NoSuchElementException e) { [EOL]         assertTrue(true); [EOL]     } [EOL] }
@Test [EOL] public void testIterator() { [EOL]     final CharRange a = CharRange.is('a'); [EOL]     final CharRange ad = CharRange.isIn('a', 'd'); [EOL]     final CharRange nota = CharRange.isNot('a'); [EOL]     final CharRange emptySet = CharRange.isNotIn((char) 0, Character.MAX_VALUE); [EOL]     final CharRange notFirst = CharRange.isNotIn((char) 1, Character.MAX_VALUE); [EOL]     final CharRange notLast = CharRange.isNotIn((char) 0, (char) (Character.MAX_VALUE - 1)); [EOL]     final Iterator<Character> aIt = a.iterator(); [EOL]     assertNotNull(aIt); [EOL]     assertTrue(aIt.hasNext()); [EOL]     assertEquals(Character.valueOf('a'), aIt.next()); [EOL]     assertFalse(aIt.hasNext()); [EOL]     final Iterator<Character> adIt = ad.iterator(); [EOL]     assertNotNull(adIt); [EOL]     assertTrue(adIt.hasNext()); [EOL]     assertEquals(Character.valueOf('a'), adIt.next()); [EOL]     assertEquals(Character.valueOf('b'), adIt.next()); [EOL]     assertEquals(Character.valueOf('c'), adIt.next()); [EOL]     assertEquals(Character.valueOf('d'), adIt.next()); [EOL]     assertFalse(adIt.hasNext()); [EOL]     final Iterator<Character> notaIt = nota.iterator(); [EOL]     assertNotNull(notaIt); [EOL]     assertTrue(notaIt.hasNext()); [EOL]     while (notaIt.hasNext()) { [EOL]         final Character c = notaIt.next(); [EOL]         assertFalse('a' == c.charValue()); [EOL]     } [EOL]     final Iterator<Character> emptySetIt = emptySet.iterator(); [EOL]     assertNotNull(emptySetIt); [EOL]     assertFalse(emptySetIt.hasNext()); [EOL]     try { [EOL]         emptySetIt.next(); [EOL]         fail("Should throw NoSuchElementException"); [EOL]     } catch (final NoSuchElementException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     final Iterator<Character> notFirstIt = notFirst.iterator(); [EOL]     assertNotNull(notFirstIt); [EOL]     assertTrue(notFirstIt.hasNext()); [EOL]     assertEquals(Character.valueOf((char) 0), notFirstIt.next()); [EOL]     assertFalse(notFirstIt.hasNext()); [EOL]     try { [EOL]         notFirstIt.next(); [EOL]         fail("Should throw NoSuchElementException"); [EOL]     } catch (final NoSuchElementException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     final Iterator<Character> notLastIt = notLast.iterator(); [EOL]     assertNotNull(notLastIt); [EOL]     assertTrue(notLastIt.hasNext()); [EOL]     assertEquals(Character.valueOf(Character.MAX_VALUE), notLastIt.next()); [EOL]     assertFalse(notLastIt.hasNext()); [EOL]     try { [EOL]         notLastIt.next(); [EOL]         fail("Should throw NoSuchElementException"); [EOL]     } catch (final NoSuchElementException e) { [EOL]         assertTrue(true); [EOL]     } [EOL] }
@Test [EOL] public void testIterator() { [EOL]     final CharRange a = CharRange.is('a'); [EOL]     final CharRange ad = CharRange.isIn('a', 'd'); [EOL]     final CharRange nota = CharRange.isNot('a'); [EOL]     final CharRange emptySet = CharRange.isNotIn((char) 0, Character.MAX_VALUE); [EOL]     final CharRange notFirst = CharRange.isNotIn((char) 1, Character.MAX_VALUE); [EOL]     final CharRange notLast = CharRange.isNotIn((char) 0, (char) (Character.MAX_VALUE - 1)); [EOL]     final Iterator<Character> aIt = a.iterator(); [EOL]     assertNotNull(aIt); [EOL]     assertTrue(aIt.hasNext()); [EOL]     assertEquals(Character.valueOf('a'), aIt.next()); [EOL]     assertFalse(aIt.hasNext()); [EOL]     final Iterator<Character> adIt = ad.iterator(); [EOL]     assertNotNull(adIt); [EOL]     assertTrue(adIt.hasNext()); [EOL]     assertEquals(Character.valueOf('a'), adIt.next()); [EOL]     assertEquals(Character.valueOf('b'), adIt.next()); [EOL]     assertEquals(Character.valueOf('c'), adIt.next()); [EOL]     assertEquals(Character.valueOf('d'), adIt.next()); [EOL]     assertFalse(adIt.hasNext()); [EOL]     final Iterator<Character> notaIt = nota.iterator(); [EOL]     assertNotNull(notaIt); [EOL]     assertTrue(notaIt.hasNext()); [EOL]     while (notaIt.hasNext()) { [EOL]         final Character c = notaIt.next(); [EOL]         assertFalse('a' == c.charValue()); [EOL]     } [EOL]     final Iterator<Character> emptySetIt = emptySet.iterator(); [EOL]     assertNotNull(emptySetIt); [EOL]     assertFalse(emptySetIt.hasNext()); [EOL]     try { [EOL]         emptySetIt.next(); [EOL]         fail("Should throw NoSuchElementException"); [EOL]     } catch (final NoSuchElementException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     final Iterator<Character> notFirstIt = notFirst.iterator(); [EOL]     assertNotNull(notFirstIt); [EOL]     assertTrue(notFirstIt.hasNext()); [EOL]     assertEquals(Character.valueOf((char) 0), notFirstIt.next()); [EOL]     assertFalse(notFirstIt.hasNext()); [EOL]     try { [EOL]         notFirstIt.next(); [EOL]         fail("Should throw NoSuchElementException"); [EOL]     } catch (final NoSuchElementException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     final Iterator<Character> notLastIt = notLast.iterator(); [EOL]     assertNotNull(notLastIt); [EOL]     assertTrue(notLastIt.hasNext()); [EOL]     assertEquals(Character.valueOf(Character.MAX_VALUE), notLastIt.next()); [EOL]     assertFalse(notLastIt.hasNext()); [EOL]     try { [EOL]         notLastIt.next(); [EOL]         fail("Should throw NoSuchElementException"); [EOL]     } catch (final NoSuchElementException e) { [EOL]         assertTrue(true); [EOL]     } [EOL] }
@Test [EOL] public void testIterator() { [EOL]     final CharRange a = CharRange.is('a'); [EOL]     final CharRange ad = CharRange.isIn('a', 'd'); [EOL]     final CharRange nota = CharRange.isNot('a'); [EOL]     final CharRange emptySet = CharRange.isNotIn((char) 0, Character.MAX_VALUE); [EOL]     final CharRange notFirst = CharRange.isNotIn((char) 1, Character.MAX_VALUE); [EOL]     final CharRange notLast = CharRange.isNotIn((char) 0, (char) (Character.MAX_VALUE - 1)); [EOL]     final Iterator<Character> aIt = a.iterator(); [EOL]     assertNotNull(aIt); [EOL]     assertTrue(aIt.hasNext()); [EOL]     assertEquals(Character.valueOf('a'), aIt.next()); [EOL]     assertFalse(aIt.hasNext()); [EOL]     final Iterator<Character> adIt = ad.iterator(); [EOL]     assertNotNull(adIt); [EOL]     assertTrue(adIt.hasNext()); [EOL]     assertEquals(Character.valueOf('a'), adIt.next()); [EOL]     assertEquals(Character.valueOf('b'), adIt.next()); [EOL]     assertEquals(Character.valueOf('c'), adIt.next()); [EOL]     assertEquals(Character.valueOf('d'), adIt.next()); [EOL]     assertFalse(adIt.hasNext()); [EOL]     final Iterator<Character> notaIt = nota.iterator(); [EOL]     assertNotNull(notaIt); [EOL]     assertTrue(notaIt.hasNext()); [EOL]     while (notaIt.hasNext()) { [EOL]         final Character c = notaIt.next(); [EOL]         assertFalse('a' == c.charValue()); [EOL]     } [EOL]     final Iterator<Character> emptySetIt = emptySet.iterator(); [EOL]     assertNotNull(emptySetIt); [EOL]     assertFalse(emptySetIt.hasNext()); [EOL]     try { [EOL]         emptySetIt.next(); [EOL]         fail("Should throw NoSuchElementException"); [EOL]     } catch (final NoSuchElementException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     final Iterator<Character> notFirstIt = notFirst.iterator(); [EOL]     assertNotNull(notFirstIt); [EOL]     assertTrue(notFirstIt.hasNext()); [EOL]     assertEquals(Character.valueOf((char) 0), notFirstIt.next()); [EOL]     assertFalse(notFirstIt.hasNext()); [EOL]     try { [EOL]         notFirstIt.next(); [EOL]         fail("Should throw NoSuchElementException"); [EOL]     } catch (final NoSuchElementException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     final Iterator<Character> notLastIt = notLast.iterator(); [EOL]     assertNotNull(notLastIt); [EOL]     assertTrue(notLastIt.hasNext()); [EOL]     assertEquals(Character.valueOf(Character.MAX_VALUE), notLastIt.next()); [EOL]     assertFalse(notLastIt.hasNext()); [EOL]     try { [EOL]         notLastIt.next(); [EOL]         fail("Should throw NoSuchElementException"); [EOL]     } catch (final NoSuchElementException e) { [EOL]         assertTrue(true); [EOL]     } [EOL] }
@Test [EOL] public void testIterator() { [EOL]     final CharRange a = CharRange.is('a'); [EOL]     final CharRange ad = CharRange.isIn('a', 'd'); [EOL]     final CharRange nota = CharRange.isNot('a'); [EOL]     final CharRange emptySet = CharRange.isNotIn((char) 0, Character.MAX_VALUE); [EOL]     final CharRange notFirst = CharRange.isNotIn((char) 1, Character.MAX_VALUE); [EOL]     final CharRange notLast = CharRange.isNotIn((char) 0, (char) (Character.MAX_VALUE - 1)); [EOL]     final Iterator<Character> aIt = a.iterator(); [EOL]     assertNotNull(aIt); [EOL]     assertTrue(aIt.hasNext()); [EOL]     assertEquals(Character.valueOf('a'), aIt.next()); [EOL]     assertFalse(aIt.hasNext()); [EOL]     final Iterator<Character> adIt = ad.iterator(); [EOL]     assertNotNull(adIt); [EOL]     assertTrue(adIt.hasNext()); [EOL]     assertEquals(Character.valueOf('a'), adIt.next()); [EOL]     assertEquals(Character.valueOf('b'), adIt.next()); [EOL]     assertEquals(Character.valueOf('c'), adIt.next()); [EOL]     assertEquals(Character.valueOf('d'), adIt.next()); [EOL]     assertFalse(adIt.hasNext()); [EOL]     final Iterator<Character> notaIt = nota.iterator(); [EOL]     assertNotNull(notaIt); [EOL]     assertTrue(notaIt.hasNext()); [EOL]     while (notaIt.hasNext()) { [EOL]         final Character c = notaIt.next(); [EOL]         assertFalse('a' == c.charValue()); [EOL]     } [EOL]     final Iterator<Character> emptySetIt = emptySet.iterator(); [EOL]     assertNotNull(emptySetIt); [EOL]     assertFalse(emptySetIt.hasNext()); [EOL]     try { [EOL]         emptySetIt.next(); [EOL]         fail("Should throw NoSuchElementException"); [EOL]     } catch (final NoSuchElementException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     final Iterator<Character> notFirstIt = notFirst.iterator(); [EOL]     assertNotNull(notFirstIt); [EOL]     assertTrue(notFirstIt.hasNext()); [EOL]     assertEquals(Character.valueOf((char) 0), notFirstIt.next()); [EOL]     assertFalse(notFirstIt.hasNext()); [EOL]     try { [EOL]         notFirstIt.next(); [EOL]         fail("Should throw NoSuchElementException"); [EOL]     } catch (final NoSuchElementException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     final Iterator<Character> notLastIt = notLast.iterator(); [EOL]     assertNotNull(notLastIt); [EOL]     assertTrue(notLastIt.hasNext()); [EOL]     assertEquals(Character.valueOf(Character.MAX_VALUE), notLastIt.next()); [EOL]     assertFalse(notLastIt.hasNext()); [EOL]     try { [EOL]         notLastIt.next(); [EOL]         fail("Should throw NoSuchElementException"); [EOL]     } catch (final NoSuchElementException e) { [EOL]         assertTrue(true); [EOL]     } [EOL] }
@Test [EOL] public void testIterator() { [EOL]     final CharRange a = CharRange.is('a'); [EOL]     final CharRange ad = CharRange.isIn('a', 'd'); [EOL]     final CharRange nota = CharRange.isNot('a'); [EOL]     final CharRange emptySet = CharRange.isNotIn((char) 0, Character.MAX_VALUE); [EOL]     final CharRange notFirst = CharRange.isNotIn((char) 1, Character.MAX_VALUE); [EOL]     final CharRange notLast = CharRange.isNotIn((char) 0, (char) (Character.MAX_VALUE - 1)); [EOL]     final Iterator<Character> aIt = a.iterator(); [EOL]     assertNotNull(aIt); [EOL]     assertTrue(aIt.hasNext()); [EOL]     assertEquals(Character.valueOf('a'), aIt.next()); [EOL]     assertFalse(aIt.hasNext()); [EOL]     final Iterator<Character> adIt = ad.iterator(); [EOL]     assertNotNull(adIt); [EOL]     assertTrue(adIt.hasNext()); [EOL]     assertEquals(Character.valueOf('a'), adIt.next()); [EOL]     assertEquals(Character.valueOf('b'), adIt.next()); [EOL]     assertEquals(Character.valueOf('c'), adIt.next()); [EOL]     assertEquals(Character.valueOf('d'), adIt.next()); [EOL]     assertFalse(adIt.hasNext()); [EOL]     final Iterator<Character> notaIt = nota.iterator(); [EOL]     assertNotNull(notaIt); [EOL]     assertTrue(notaIt.hasNext()); [EOL]     while (notaIt.hasNext()) { [EOL]         final Character c = notaIt.next(); [EOL]         assertFalse('a' == c.charValue()); [EOL]     } [EOL]     final Iterator<Character> emptySetIt = emptySet.iterator(); [EOL]     assertNotNull(emptySetIt); [EOL]     assertFalse(emptySetIt.hasNext()); [EOL]     try { [EOL]         emptySetIt.next(); [EOL]         fail("Should throw NoSuchElementException"); [EOL]     } catch (final NoSuchElementException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     final Iterator<Character> notFirstIt = notFirst.iterator(); [EOL]     assertNotNull(notFirstIt); [EOL]     assertTrue(notFirstIt.hasNext()); [EOL]     assertEquals(Character.valueOf((char) 0), notFirstIt.next()); [EOL]     assertFalse(notFirstIt.hasNext()); [EOL]     try { [EOL]         notFirstIt.next(); [EOL]         fail("Should throw NoSuchElementException"); [EOL]     } catch (final NoSuchElementException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     final Iterator<Character> notLastIt = notLast.iterator(); [EOL]     assertNotNull(notLastIt); [EOL]     assertTrue(notLastIt.hasNext()); [EOL]     assertEquals(Character.valueOf(Character.MAX_VALUE), notLastIt.next()); [EOL]     assertFalse(notLastIt.hasNext()); [EOL]     try { [EOL]         notLastIt.next(); [EOL]         fail("Should throw NoSuchElementException"); [EOL]     } catch (final NoSuchElementException e) { [EOL]         assertTrue(true); [EOL]     } [EOL] }
@Test [EOL] public void testIterator() { [EOL]     final CharRange a = CharRange.is('a'); [EOL]     final CharRange ad = CharRange.isIn('a', 'd'); [EOL]     final CharRange nota = CharRange.isNot('a'); [EOL]     final CharRange emptySet = CharRange.isNotIn((char) 0, Character.MAX_VALUE); [EOL]     final CharRange notFirst = CharRange.isNotIn((char) 1, Character.MAX_VALUE); [EOL]     final CharRange notLast = CharRange.isNotIn((char) 0, (char) (Character.MAX_VALUE - 1)); [EOL]     final Iterator<Character> aIt = a.iterator(); [EOL]     assertNotNull(aIt); [EOL]     assertTrue(aIt.hasNext()); [EOL]     assertEquals(Character.valueOf('a'), aIt.next()); [EOL]     assertFalse(aIt.hasNext()); [EOL]     final Iterator<Character> adIt = ad.iterator(); [EOL]     assertNotNull(adIt); [EOL]     assertTrue(adIt.hasNext()); [EOL]     assertEquals(Character.valueOf('a'), adIt.next()); [EOL]     assertEquals(Character.valueOf('b'), adIt.next()); [EOL]     assertEquals(Character.valueOf('c'), adIt.next()); [EOL]     assertEquals(Character.valueOf('d'), adIt.next()); [EOL]     assertFalse(adIt.hasNext()); [EOL]     final Iterator<Character> notaIt = nota.iterator(); [EOL]     assertNotNull(notaIt); [EOL]     assertTrue(notaIt.hasNext()); [EOL]     while (notaIt.hasNext()) { [EOL]         final Character c = notaIt.next(); [EOL]         assertFalse('a' == c.charValue()); [EOL]     } [EOL]     final Iterator<Character> emptySetIt = emptySet.iterator(); [EOL]     assertNotNull(emptySetIt); [EOL]     assertFalse(emptySetIt.hasNext()); [EOL]     try { [EOL]         emptySetIt.next(); [EOL]         fail("Should throw NoSuchElementException"); [EOL]     } catch (final NoSuchElementException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     final Iterator<Character> notFirstIt = notFirst.iterator(); [EOL]     assertNotNull(notFirstIt); [EOL]     assertTrue(notFirstIt.hasNext()); [EOL]     assertEquals(Character.valueOf((char) 0), notFirstIt.next()); [EOL]     assertFalse(notFirstIt.hasNext()); [EOL]     try { [EOL]         notFirstIt.next(); [EOL]         fail("Should throw NoSuchElementException"); [EOL]     } catch (final NoSuchElementException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     final Iterator<Character> notLastIt = notLast.iterator(); [EOL]     assertNotNull(notLastIt); [EOL]     assertTrue(notLastIt.hasNext()); [EOL]     assertEquals(Character.valueOf(Character.MAX_VALUE), notLastIt.next()); [EOL]     assertFalse(notLastIt.hasNext()); [EOL]     try { [EOL]         notLastIt.next(); [EOL]         fail("Should throw NoSuchElementException"); [EOL]     } catch (final NoSuchElementException e) { [EOL]         assertTrue(true); [EOL]     } [EOL] }
@Test [EOL] public void testIterator() { [EOL]     final CharRange a = CharRange.is('a'); [EOL]     final CharRange ad = CharRange.isIn('a', 'd'); [EOL]     final CharRange nota = CharRange.isNot('a'); [EOL]     final CharRange emptySet = CharRange.isNotIn((char) 0, Character.MAX_VALUE); [EOL]     final CharRange notFirst = CharRange.isNotIn((char) 1, Character.MAX_VALUE); [EOL]     final CharRange notLast = CharRange.isNotIn((char) 0, (char) (Character.MAX_VALUE - 1)); [EOL]     final Iterator<Character> aIt = a.iterator(); [EOL]     assertNotNull(aIt); [EOL]     assertTrue(aIt.hasNext()); [EOL]     assertEquals(Character.valueOf('a'), aIt.next()); [EOL]     assertFalse(aIt.hasNext()); [EOL]     final Iterator<Character> adIt = ad.iterator(); [EOL]     assertNotNull(adIt); [EOL]     assertTrue(adIt.hasNext()); [EOL]     assertEquals(Character.valueOf('a'), adIt.next()); [EOL]     assertEquals(Character.valueOf('b'), adIt.next()); [EOL]     assertEquals(Character.valueOf('c'), adIt.next()); [EOL]     assertEquals(Character.valueOf('d'), adIt.next()); [EOL]     assertFalse(adIt.hasNext()); [EOL]     final Iterator<Character> notaIt = nota.iterator(); [EOL]     assertNotNull(notaIt); [EOL]     assertTrue(notaIt.hasNext()); [EOL]     while (notaIt.hasNext()) { [EOL]         final Character c = notaIt.next(); [EOL]         assertFalse('a' == c.charValue()); [EOL]     } [EOL]     final Iterator<Character> emptySetIt = emptySet.iterator(); [EOL]     assertNotNull(emptySetIt); [EOL]     assertFalse(emptySetIt.hasNext()); [EOL]     try { [EOL]         emptySetIt.next(); [EOL]         fail("Should throw NoSuchElementException"); [EOL]     } catch (final NoSuchElementException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     final Iterator<Character> notFirstIt = notFirst.iterator(); [EOL]     assertNotNull(notFirstIt); [EOL]     assertTrue(notFirstIt.hasNext()); [EOL]     assertEquals(Character.valueOf((char) 0), notFirstIt.next()); [EOL]     assertFalse(notFirstIt.hasNext()); [EOL]     try { [EOL]         notFirstIt.next(); [EOL]         fail("Should throw NoSuchElementException"); [EOL]     } catch (final NoSuchElementException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     final Iterator<Character> notLastIt = notLast.iterator(); [EOL]     assertNotNull(notLastIt); [EOL]     assertTrue(notLastIt.hasNext()); [EOL]     assertEquals(Character.valueOf(Character.MAX_VALUE), notLastIt.next()); [EOL]     assertFalse(notLastIt.hasNext()); [EOL]     try { [EOL]         notLastIt.next(); [EOL]         fail("Should throw NoSuchElementException"); [EOL]     } catch (final NoSuchElementException e) { [EOL]         assertTrue(true); [EOL]     } [EOL] }
@Test [EOL] public void testIterator() { [EOL]     final CharRange a = CharRange.is('a'); [EOL]     final CharRange ad = CharRange.isIn('a', 'd'); [EOL]     final CharRange nota = CharRange.isNot('a'); [EOL]     final CharRange emptySet = CharRange.isNotIn((char) 0, Character.MAX_VALUE); [EOL]     final CharRange notFirst = CharRange.isNotIn((char) 1, Character.MAX_VALUE); [EOL]     final CharRange notLast = CharRange.isNotIn((char) 0, (char) (Character.MAX_VALUE - 1)); [EOL]     final Iterator<Character> aIt = a.iterator(); [EOL]     assertNotNull(aIt); [EOL]     assertTrue(aIt.hasNext()); [EOL]     assertEquals(Character.valueOf('a'), aIt.next()); [EOL]     assertFalse(aIt.hasNext()); [EOL]     final Iterator<Character> adIt = ad.iterator(); [EOL]     assertNotNull(adIt); [EOL]     assertTrue(adIt.hasNext()); [EOL]     assertEquals(Character.valueOf('a'), adIt.next()); [EOL]     assertEquals(Character.valueOf('b'), adIt.next()); [EOL]     assertEquals(Character.valueOf('c'), adIt.next()); [EOL]     assertEquals(Character.valueOf('d'), adIt.next()); [EOL]     assertFalse(adIt.hasNext()); [EOL]     final Iterator<Character> notaIt = nota.iterator(); [EOL]     assertNotNull(notaIt); [EOL]     assertTrue(notaIt.hasNext()); [EOL]     while (notaIt.hasNext()) { [EOL]         final Character c = notaIt.next(); [EOL]         assertFalse('a' == c.charValue()); [EOL]     } [EOL]     final Iterator<Character> emptySetIt = emptySet.iterator(); [EOL]     assertNotNull(emptySetIt); [EOL]     assertFalse(emptySetIt.hasNext()); [EOL]     try { [EOL]         emptySetIt.next(); [EOL]         fail("Should throw NoSuchElementException"); [EOL]     } catch (final NoSuchElementException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     final Iterator<Character> notFirstIt = notFirst.iterator(); [EOL]     assertNotNull(notFirstIt); [EOL]     assertTrue(notFirstIt.hasNext()); [EOL]     assertEquals(Character.valueOf((char) 0), notFirstIt.next()); [EOL]     assertFalse(notFirstIt.hasNext()); [EOL]     try { [EOL]         notFirstIt.next(); [EOL]         fail("Should throw NoSuchElementException"); [EOL]     } catch (final NoSuchElementException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     final Iterator<Character> notLastIt = notLast.iterator(); [EOL]     assertNotNull(notLastIt); [EOL]     assertTrue(notLastIt.hasNext()); [EOL]     assertEquals(Character.valueOf(Character.MAX_VALUE), notLastIt.next()); [EOL]     assertFalse(notLastIt.hasNext()); [EOL]     try { [EOL]         notLastIt.next(); [EOL]         fail("Should throw NoSuchElementException"); [EOL]     } catch (final NoSuchElementException e) { [EOL]         assertTrue(true); [EOL]     } [EOL] }
@Test [EOL] public void testIterator() { [EOL]     final CharRange a = CharRange.is('a'); [EOL]     final CharRange ad = CharRange.isIn('a', 'd'); [EOL]     final CharRange nota = CharRange.isNot('a'); [EOL]     final CharRange emptySet = CharRange.isNotIn((char) 0, Character.MAX_VALUE); [EOL]     final CharRange notFirst = CharRange.isNotIn((char) 1, Character.MAX_VALUE); [EOL]     final CharRange notLast = CharRange.isNotIn((char) 0, (char) (Character.MAX_VALUE - 1)); [EOL]     final Iterator<Character> aIt = a.iterator(); [EOL]     assertNotNull(aIt); [EOL]     assertTrue(aIt.hasNext()); [EOL]     assertEquals(Character.valueOf('a'), aIt.next()); [EOL]     assertFalse(aIt.hasNext()); [EOL]     final Iterator<Character> adIt = ad.iterator(); [EOL]     assertNotNull(adIt); [EOL]     assertTrue(adIt.hasNext()); [EOL]     assertEquals(Character.valueOf('a'), adIt.next()); [EOL]     assertEquals(Character.valueOf('b'), adIt.next()); [EOL]     assertEquals(Character.valueOf('c'), adIt.next()); [EOL]     assertEquals(Character.valueOf('d'), adIt.next()); [EOL]     assertFalse(adIt.hasNext()); [EOL]     final Iterator<Character> notaIt = nota.iterator(); [EOL]     assertNotNull(notaIt); [EOL]     assertTrue(notaIt.hasNext()); [EOL]     while (notaIt.hasNext()) { [EOL]         final Character c = notaIt.next(); [EOL]         assertFalse('a' == c.charValue()); [EOL]     } [EOL]     final Iterator<Character> emptySetIt = emptySet.iterator(); [EOL]     assertNotNull(emptySetIt); [EOL]     assertFalse(emptySetIt.hasNext()); [EOL]     try { [EOL]         emptySetIt.next(); [EOL]         fail("Should throw NoSuchElementException"); [EOL]     } catch (final NoSuchElementException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     final Iterator<Character> notFirstIt = notFirst.iterator(); [EOL]     assertNotNull(notFirstIt); [EOL]     assertTrue(notFirstIt.hasNext()); [EOL]     assertEquals(Character.valueOf((char) 0), notFirstIt.next()); [EOL]     assertFalse(notFirstIt.hasNext()); [EOL]     try { [EOL]         notFirstIt.next(); [EOL]         fail("Should throw NoSuchElementException"); [EOL]     } catch (final NoSuchElementException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     final Iterator<Character> notLastIt = notLast.iterator(); [EOL]     assertNotNull(notLastIt); [EOL]     assertTrue(notLastIt.hasNext()); [EOL]     assertEquals(Character.valueOf(Character.MAX_VALUE), notLastIt.next()); [EOL]     assertFalse(notLastIt.hasNext()); [EOL]     try { [EOL]         notLastIt.next(); [EOL]         fail("Should throw NoSuchElementException"); [EOL]     } catch (final NoSuchElementException e) { [EOL]         assertTrue(true); [EOL]     } [EOL] }
@Test [EOL] public void testIterator() { [EOL]     final CharRange a = CharRange.is('a'); [EOL]     final CharRange ad = CharRange.isIn('a', 'd'); [EOL]     final CharRange nota = CharRange.isNot('a'); [EOL]     final CharRange emptySet = CharRange.isNotIn((char) 0, Character.MAX_VALUE); [EOL]     final CharRange notFirst = CharRange.isNotIn((char) 1, Character.MAX_VALUE); [EOL]     final CharRange notLast = CharRange.isNotIn((char) 0, (char) (Character.MAX_VALUE - 1)); [EOL]     final Iterator<Character> aIt = a.iterator(); [EOL]     assertNotNull(aIt); [EOL]     assertTrue(aIt.hasNext()); [EOL]     assertEquals(Character.valueOf('a'), aIt.next()); [EOL]     assertFalse(aIt.hasNext()); [EOL]     final Iterator<Character> adIt = ad.iterator(); [EOL]     assertNotNull(adIt); [EOL]     assertTrue(adIt.hasNext()); [EOL]     assertEquals(Character.valueOf('a'), adIt.next()); [EOL]     assertEquals(Character.valueOf('b'), adIt.next()); [EOL]     assertEquals(Character.valueOf('c'), adIt.next()); [EOL]     assertEquals(Character.valueOf('d'), adIt.next()); [EOL]     assertFalse(adIt.hasNext()); [EOL]     final Iterator<Character> notaIt = nota.iterator(); [EOL]     assertNotNull(notaIt); [EOL]     assertTrue(notaIt.hasNext()); [EOL]     while (notaIt.hasNext()) { [EOL]         final Character c = notaIt.next(); [EOL]         assertFalse('a' == c.charValue()); [EOL]     } [EOL]     final Iterator<Character> emptySetIt = emptySet.iterator(); [EOL]     assertNotNull(emptySetIt); [EOL]     assertFalse(emptySetIt.hasNext()); [EOL]     try { [EOL]         emptySetIt.next(); [EOL]         fail("Should throw NoSuchElementException"); [EOL]     } catch (final NoSuchElementException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     final Iterator<Character> notFirstIt = notFirst.iterator(); [EOL]     assertNotNull(notFirstIt); [EOL]     assertTrue(notFirstIt.hasNext()); [EOL]     assertEquals(Character.valueOf((char) 0), notFirstIt.next()); [EOL]     assertFalse(notFirstIt.hasNext()); [EOL]     try { [EOL]         notFirstIt.next(); [EOL]         fail("Should throw NoSuchElementException"); [EOL]     } catch (final NoSuchElementException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     final Iterator<Character> notLastIt = notLast.iterator(); [EOL]     assertNotNull(notLastIt); [EOL]     assertTrue(notLastIt.hasNext()); [EOL]     assertEquals(Character.valueOf(Character.MAX_VALUE), notLastIt.next()); [EOL]     assertFalse(notLastIt.hasNext()); [EOL]     try { [EOL]         notLastIt.next(); [EOL]         fail("Should throw NoSuchElementException"); [EOL]     } catch (final NoSuchElementException e) { [EOL]         assertTrue(true); [EOL]     } [EOL] }
@Test [EOL] public void testIterator() { [EOL]     final CharRange a = CharRange.is('a'); [EOL]     final CharRange ad = CharRange.isIn('a', 'd'); [EOL]     final CharRange nota = CharRange.isNot('a'); [EOL]     final CharRange emptySet = CharRange.isNotIn((char) 0, Character.MAX_VALUE); [EOL]     final CharRange notFirst = CharRange.isNotIn((char) 1, Character.MAX_VALUE); [EOL]     final CharRange notLast = CharRange.isNotIn((char) 0, (char) (Character.MAX_VALUE - 1)); [EOL]     final Iterator<Character> aIt = a.iterator(); [EOL]     assertNotNull(aIt); [EOL]     assertTrue(aIt.hasNext()); [EOL]     assertEquals(Character.valueOf('a'), aIt.next()); [EOL]     assertFalse(aIt.hasNext()); [EOL]     final Iterator<Character> adIt = ad.iterator(); [EOL]     assertNotNull(adIt); [EOL]     assertTrue(adIt.hasNext()); [EOL]     assertEquals(Character.valueOf('a'), adIt.next()); [EOL]     assertEquals(Character.valueOf('b'), adIt.next()); [EOL]     assertEquals(Character.valueOf('c'), adIt.next()); [EOL]     assertEquals(Character.valueOf('d'), adIt.next()); [EOL]     assertFalse(adIt.hasNext()); [EOL]     final Iterator<Character> notaIt = nota.iterator(); [EOL]     assertNotNull(notaIt); [EOL]     assertTrue(notaIt.hasNext()); [EOL]     while (notaIt.hasNext()) { [EOL]         final Character c = notaIt.next(); [EOL]         assertFalse('a' == c.charValue()); [EOL]     } [EOL]     final Iterator<Character> emptySetIt = emptySet.iterator(); [EOL]     assertNotNull(emptySetIt); [EOL]     assertFalse(emptySetIt.hasNext()); [EOL]     try { [EOL]         emptySetIt.next(); [EOL]         fail("Should throw NoSuchElementException"); [EOL]     } catch (final NoSuchElementException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     final Iterator<Character> notFirstIt = notFirst.iterator(); [EOL]     assertNotNull(notFirstIt); [EOL]     assertTrue(notFirstIt.hasNext()); [EOL]     assertEquals(Character.valueOf((char) 0), notFirstIt.next()); [EOL]     assertFalse(notFirstIt.hasNext()); [EOL]     try { [EOL]         notFirstIt.next(); [EOL]         fail("Should throw NoSuchElementException"); [EOL]     } catch (final NoSuchElementException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     final Iterator<Character> notLastIt = notLast.iterator(); [EOL]     assertNotNull(notLastIt); [EOL]     assertTrue(notLastIt.hasNext()); [EOL]     assertEquals(Character.valueOf(Character.MAX_VALUE), notLastIt.next()); [EOL]     assertFalse(notLastIt.hasNext()); [EOL]     try { [EOL]         notLastIt.next(); [EOL]         fail("Should throw NoSuchElementException"); [EOL]     } catch (final NoSuchElementException e) { [EOL]         assertTrue(true); [EOL]     } [EOL] }
@Test [EOL] public void testIterator() { [EOL]     final CharRange a = CharRange.is('a'); [EOL]     final CharRange ad = CharRange.isIn('a', 'd'); [EOL]     final CharRange nota = CharRange.isNot('a'); [EOL]     final CharRange emptySet = CharRange.isNotIn((char) 0, Character.MAX_VALUE); [EOL]     final CharRange notFirst = CharRange.isNotIn((char) 1, Character.MAX_VALUE); [EOL]     final CharRange notLast = CharRange.isNotIn((char) 0, (char) (Character.MAX_VALUE - 1)); [EOL]     final Iterator<Character> aIt = a.iterator(); [EOL]     assertNotNull(aIt); [EOL]     assertTrue(aIt.hasNext()); [EOL]     assertEquals(Character.valueOf('a'), aIt.next()); [EOL]     assertFalse(aIt.hasNext()); [EOL]     final Iterator<Character> adIt = ad.iterator(); [EOL]     assertNotNull(adIt); [EOL]     assertTrue(adIt.hasNext()); [EOL]     assertEquals(Character.valueOf('a'), adIt.next()); [EOL]     assertEquals(Character.valueOf('b'), adIt.next()); [EOL]     assertEquals(Character.valueOf('c'), adIt.next()); [EOL]     assertEquals(Character.valueOf('d'), adIt.next()); [EOL]     assertFalse(adIt.hasNext()); [EOL]     final Iterator<Character> notaIt = nota.iterator(); [EOL]     assertNotNull(notaIt); [EOL]     assertTrue(notaIt.hasNext()); [EOL]     while (notaIt.hasNext()) { [EOL]         final Character c = notaIt.next(); [EOL]         assertFalse('a' == c.charValue()); [EOL]     } [EOL]     final Iterator<Character> emptySetIt = emptySet.iterator(); [EOL]     assertNotNull(emptySetIt); [EOL]     assertFalse(emptySetIt.hasNext()); [EOL]     try { [EOL]         emptySetIt.next(); [EOL]         fail("Should throw NoSuchElementException"); [EOL]     } catch (final NoSuchElementException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     final Iterator<Character> notFirstIt = notFirst.iterator(); [EOL]     assertNotNull(notFirstIt); [EOL]     assertTrue(notFirstIt.hasNext()); [EOL]     assertEquals(Character.valueOf((char) 0), notFirstIt.next()); [EOL]     assertFalse(notFirstIt.hasNext()); [EOL]     try { [EOL]         notFirstIt.next(); [EOL]         fail("Should throw NoSuchElementException"); [EOL]     } catch (final NoSuchElementException e) { [EOL]         assertTrue(true); [EOL]     } [EOL]     final Iterator<Character> notLastIt = notLast.iterator(); [EOL]     assertNotNull(notLastIt); [EOL]     assertTrue(notLastIt.hasNext()); [EOL]     assertEquals(Character.valueOf(Character.MAX_VALUE), notLastIt.next()); [EOL]     assertFalse(notLastIt.hasNext()); [EOL]     try { [EOL]         notLastIt.next(); [EOL]         fail("Should throw NoSuchElementException"); [EOL]     } catch (final NoSuchElementException e) { [EOL]         assertTrue(true); [EOL]     } [EOL] }
@Test [EOL] public void testInitialize() throws Exception { [EOL]     final TestCallable call = new TestCallable(); [EOL]     final CallableBackgroundInitializer<Integer> init = new CallableBackgroundInitializer<Integer>(call); [EOL]     assertEquals("Wrong result", RESULT, init.initialize()); [EOL]     assertEquals("Wrong number of invocations", 1, call.callCount); [EOL] }
@Test [EOL] public void testInitialize() throws Exception { [EOL]     final TestCallable call = new TestCallable(); [EOL]     final CallableBackgroundInitializer<Integer> init = new CallableBackgroundInitializer<Integer>(call); [EOL]     assertEquals("Wrong result", RESULT, init.initialize()); [EOL]     assertEquals("Wrong number of invocations", 1, call.callCount); [EOL] }
@Test [EOL] public void testInitialize() throws Exception { [EOL]     final TestCallable call = new TestCallable(); [EOL]     final CallableBackgroundInitializer<Integer> init = new CallableBackgroundInitializer<Integer>(call); [EOL]     assertEquals("Wrong result", RESULT, init.initialize()); [EOL]     assertEquals("Wrong number of invocations", 1, call.callCount); [EOL] }
@Test(expected = IllegalArgumentException.class) [EOL] public void testReflectionHashCodeEx3() { [EOL]     HashCodeBuilder.reflectionHashCode(13, 19, null, true); [EOL] }
@Test(expected = IllegalArgumentException.class) [EOL] public void testReflectionHashCodeEx3() { [EOL]     HashCodeBuilder.reflectionHashCode(13, 19, null, true); [EOL] }
@Test(expected = IllegalArgumentException.class) [EOL] public void testReflectionHashCodeEx3() { [EOL]     HashCodeBuilder.reflectionHashCode(13, 19, null, true); [EOL] }
@Test(expected = IllegalArgumentException.class) [EOL] public void testReflectionHashCodeEx3() { [EOL]     HashCodeBuilder.reflectionHashCode(13, 19, null, true); [EOL] }
@Test(expected = IllegalArgumentException.class) [EOL] public void testReflectionHashCodeEx3() { [EOL]     HashCodeBuilder.reflectionHashCode(13, 19, null, true); [EOL] }
@Test(expected = IllegalArgumentException.class) [EOL] public void testReflectionHashCodeEx3() { [EOL]     HashCodeBuilder.reflectionHashCode(13, 19, null, true); [EOL] }
@Test(expected = IllegalArgumentException.class) [EOL] public void testReflectionHashCodeEx3() { [EOL]     HashCodeBuilder.reflectionHashCode(13, 19, null, true); [EOL] }
@Test(expected = IllegalArgumentException.class) [EOL] public void testReflectionHashCodeEx3() { [EOL]     HashCodeBuilder.reflectionHashCode(13, 19, null, true); [EOL] }
@Test [EOL] public void testLongArrayAsObject() { [EOL]     final long[] obj = new long[2]; [EOL]     assertEquals(17 * 37 * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); [EOL]     obj[0] = 5L; [EOL]     final int h1 = (int) (5L ^ 5L >> 32); [EOL]     assertEquals((17 * 37 + h1) * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); [EOL]     obj[1] = 6L; [EOL]     final int h2 = (int) (6L ^ 6L >> 32); [EOL]     assertEquals((17 * 37 + h1) * 37 + h2, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); [EOL] }
@Test [EOL] public void testLongArrayAsObject() { [EOL]     final long[] obj = new long[2]; [EOL]     assertEquals(17 * 37 * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); [EOL]     obj[0] = 5L; [EOL]     final int h1 = (int) (5L ^ 5L >> 32); [EOL]     assertEquals((17 * 37 + h1) * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); [EOL]     obj[1] = 6L; [EOL]     final int h2 = (int) (6L ^ 6L >> 32); [EOL]     assertEquals((17 * 37 + h1) * 37 + h2, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); [EOL] }
@Test [EOL] public void testLongArrayAsObject() { [EOL]     final long[] obj = new long[2]; [EOL]     assertEquals(17 * 37 * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); [EOL]     obj[0] = 5L; [EOL]     final int h1 = (int) (5L ^ 5L >> 32); [EOL]     assertEquals((17 * 37 + h1) * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); [EOL]     obj[1] = 6L; [EOL]     final int h2 = (int) (6L ^ 6L >> 32); [EOL]     assertEquals((17 * 37 + h1) * 37 + h2, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); [EOL] }
@Test [EOL] public void testLongArrayAsObject() { [EOL]     final long[] obj = new long[2]; [EOL]     assertEquals(17 * 37 * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); [EOL]     obj[0] = 5L; [EOL]     final int h1 = (int) (5L ^ 5L >> 32); [EOL]     assertEquals((17 * 37 + h1) * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); [EOL]     obj[1] = 6L; [EOL]     final int h2 = (int) (6L ^ 6L >> 32); [EOL]     assertEquals((17 * 37 + h1) * 37 + h2, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); [EOL] }
@Test [EOL] public void testLongArrayAsObject() { [EOL]     final long[] obj = new long[2]; [EOL]     assertEquals(17 * 37 * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); [EOL]     obj[0] = 5L; [EOL]     final int h1 = (int) (5L ^ 5L >> 32); [EOL]     assertEquals((17 * 37 + h1) * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); [EOL]     obj[1] = 6L; [EOL]     final int h2 = (int) (6L ^ 6L >> 32); [EOL]     assertEquals((17 * 37 + h1) * 37 + h2, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); [EOL] }
@Test [EOL] public void testLongArrayAsObject() { [EOL]     final long[] obj = new long[2]; [EOL]     assertEquals(17 * 37 * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); [EOL]     obj[0] = 5L; [EOL]     final int h1 = (int) (5L ^ 5L >> 32); [EOL]     assertEquals((17 * 37 + h1) * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); [EOL]     obj[1] = 6L; [EOL]     final int h2 = (int) (6L ^ 6L >> 32); [EOL]     assertEquals((17 * 37 + h1) * 37 + h2, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); [EOL] }
@Test [EOL] public void testLongArrayAsObject() { [EOL]     final long[] obj = new long[2]; [EOL]     assertEquals(17 * 37 * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); [EOL]     obj[0] = 5L; [EOL]     final int h1 = (int) (5L ^ 5L >> 32); [EOL]     assertEquals((17 * 37 + h1) * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); [EOL]     obj[1] = 6L; [EOL]     final int h2 = (int) (6L ^ 6L >> 32); [EOL]     assertEquals((17 * 37 + h1) * 37 + h2, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); [EOL] }
@Test [EOL] public void testLongArrayAsObject() { [EOL]     final long[] obj = new long[2]; [EOL]     assertEquals(17 * 37 * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); [EOL]     obj[0] = 5L; [EOL]     final int h1 = (int) (5L ^ 5L >> 32); [EOL]     assertEquals((17 * 37 + h1) * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); [EOL]     obj[1] = 6L; [EOL]     final int h2 = (int) (6L ^ 6L >> 32); [EOL]     assertEquals((17 * 37 + h1) * 37 + h2, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); [EOL] }
@Test [EOL] public void testLongArrayAsObject() { [EOL]     final long[] obj = new long[2]; [EOL]     assertEquals(17 * 37 * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); [EOL]     obj[0] = 5L; [EOL]     final int h1 = (int) (5L ^ 5L >> 32); [EOL]     assertEquals((17 * 37 + h1) * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); [EOL]     obj[1] = 6L; [EOL]     final int h2 = (int) (6L ^ 6L >> 32); [EOL]     assertEquals((17 * 37 + h1) * 37 + h2, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); [EOL] }
@Test [EOL] public void testLongArrayAsObject() { [EOL]     final long[] obj = new long[2]; [EOL]     assertEquals(17 * 37 * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); [EOL]     obj[0] = 5L; [EOL]     final int h1 = (int) (5L ^ 5L >> 32); [EOL]     assertEquals((17 * 37 + h1) * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); [EOL]     obj[1] = 6L; [EOL]     final int h2 = (int) (6L ^ 6L >> 32); [EOL]     assertEquals((17 * 37 + h1) * 37 + h2, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); [EOL] }
@Test [EOL] public void testLongArrayAsObject() { [EOL]     final long[] obj = new long[2]; [EOL]     assertEquals(17 * 37 * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); [EOL]     obj[0] = 5L; [EOL]     final int h1 = (int) (5L ^ 5L >> 32); [EOL]     assertEquals((17 * 37 + h1) * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); [EOL]     obj[1] = 6L; [EOL]     final int h2 = (int) (6L ^ 6L >> 32); [EOL]     assertEquals((17 * 37 + h1) * 37 + h2, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); [EOL] }
@Test [EOL] public void testObjectArray() { [EOL]     assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((Object[]) null).toHashCode()); [EOL]     final Object[] obj = new Object[2]; [EOL]     assertEquals(17 * 37 * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode()); [EOL]     obj[0] = new Object(); [EOL]     assertEquals((17 * 37 + obj[0].hashCode()) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode()); [EOL]     obj[1] = new Object(); [EOL]     assertEquals((17 * 37 + obj[0].hashCode()) * 37 + obj[1].hashCode(), new HashCodeBuilder(17, 37).append(obj).toHashCode()); [EOL] }
@Test [EOL] public void testObjectArray() { [EOL]     assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((Object[]) null).toHashCode()); [EOL]     final Object[] obj = new Object[2]; [EOL]     assertEquals(17 * 37 * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode()); [EOL]     obj[0] = new Object(); [EOL]     assertEquals((17 * 37 + obj[0].hashCode()) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode()); [EOL]     obj[1] = new Object(); [EOL]     assertEquals((17 * 37 + obj[0].hashCode()) * 37 + obj[1].hashCode(), new HashCodeBuilder(17, 37).append(obj).toHashCode()); [EOL] }
@Test [EOL] public void testObjectArray() { [EOL]     assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((Object[]) null).toHashCode()); [EOL]     final Object[] obj = new Object[2]; [EOL]     assertEquals(17 * 37 * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode()); [EOL]     obj[0] = new Object(); [EOL]     assertEquals((17 * 37 + obj[0].hashCode()) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode()); [EOL]     obj[1] = new Object(); [EOL]     assertEquals((17 * 37 + obj[0].hashCode()) * 37 + obj[1].hashCode(), new HashCodeBuilder(17, 37).append(obj).toHashCode()); [EOL] }
@Test [EOL] public void testSuper() { [EOL]     final Object obj = new Object(); [EOL]     assertEquals(17 * 37 + 19 * 41 + obj.hashCode(), new HashCodeBuilder(17, 37).appendSuper(new HashCodeBuilder(19, 41).append(obj).toHashCode()).toHashCode()); [EOL] }
@Test [EOL] public void testSuper() { [EOL]     final Object obj = new Object(); [EOL]     assertEquals(17 * 37 + 19 * 41 + obj.hashCode(), new HashCodeBuilder(17, 37).appendSuper(new HashCodeBuilder(19, 41).append(obj).toHashCode()).toHashCode()); [EOL] }
@Test [EOL] public void testSuper() { [EOL]     final Object obj = new Object(); [EOL]     assertEquals(17 * 37 + 19 * 41 + obj.hashCode(), new HashCodeBuilder(17, 37).appendSuper(new HashCodeBuilder(19, 41).append(obj).toHashCode()).toHashCode()); [EOL] }
@Test [EOL] public void testConstructor() { [EOL]     assertNotNull(new SerializationUtils()); [EOL]     final Constructor<?>[] cons = SerializationUtils.class.getDeclaredConstructors(); [EOL]     assertEquals(1, cons.length); [EOL]     assertTrue(Modifier.isPublic(cons[0].getModifiers())); [EOL]     assertTrue(Modifier.isPublic(SerializationUtils.class.getModifiers())); [EOL]     assertFalse(Modifier.isFinal(SerializationUtils.class.getModifiers())); [EOL] }
@Test [EOL] public void testClone() throws Exception { [EOL]     final Object test = SerializationUtils.clone(iMap); [EOL]     assertNotNull(test); [EOL]     assertTrue(test instanceof HashMap<?, ?>); [EOL]     assertTrue(test != iMap); [EOL]     final HashMap<?, ?> testMap = (HashMap<?, ?>) test; [EOL]     assertEquals(iString, testMap.get("FOO")); [EOL]     assertTrue(iString != testMap.get("FOO")); [EOL]     assertEquals(iInteger, testMap.get("BAR")); [EOL]     assertTrue(iInteger != testMap.get("BAR")); [EOL]     assertEquals(iMap, testMap); [EOL] }
@Test [EOL] public void testClone() throws Exception { [EOL]     final Object test = SerializationUtils.clone(iMap); [EOL]     assertNotNull(test); [EOL]     assertTrue(test instanceof HashMap<?, ?>); [EOL]     assertTrue(test != iMap); [EOL]     final HashMap<?, ?> testMap = (HashMap<?, ?>) test; [EOL]     assertEquals(iString, testMap.get("FOO")); [EOL]     assertTrue(iString != testMap.get("FOO")); [EOL]     assertEquals(iInteger, testMap.get("BAR")); [EOL]     assertTrue(iInteger != testMap.get("BAR")); [EOL]     assertEquals(iMap, testMap); [EOL] }
@Test [EOL] public void testClone() throws Exception { [EOL]     final Object test = SerializationUtils.clone(iMap); [EOL]     assertNotNull(test); [EOL]     assertTrue(test instanceof HashMap<?, ?>); [EOL]     assertTrue(test != iMap); [EOL]     final HashMap<?, ?> testMap = (HashMap<?, ?>) test; [EOL]     assertEquals(iString, testMap.get("FOO")); [EOL]     assertTrue(iString != testMap.get("FOO")); [EOL]     assertEquals(iInteger, testMap.get("BAR")); [EOL]     assertTrue(iInteger != testMap.get("BAR")); [EOL]     assertEquals(iMap, testMap); [EOL] }
@Test [EOL] public void testClone() throws Exception { [EOL]     final Object test = SerializationUtils.clone(iMap); [EOL]     assertNotNull(test); [EOL]     assertTrue(test instanceof HashMap<?, ?>); [EOL]     assertTrue(test != iMap); [EOL]     final HashMap<?, ?> testMap = (HashMap<?, ?>) test; [EOL]     assertEquals(iString, testMap.get("FOO")); [EOL]     assertTrue(iString != testMap.get("FOO")); [EOL]     assertEquals(iInteger, testMap.get("BAR")); [EOL]     assertTrue(iInteger != testMap.get("BAR")); [EOL]     assertEquals(iMap, testMap); [EOL] }
@Test [EOL] public void testClone() throws Exception { [EOL]     final Object test = SerializationUtils.clone(iMap); [EOL]     assertNotNull(test); [EOL]     assertTrue(test instanceof HashMap<?, ?>); [EOL]     assertTrue(test != iMap); [EOL]     final HashMap<?, ?> testMap = (HashMap<?, ?>) test; [EOL]     assertEquals(iString, testMap.get("FOO")); [EOL]     assertTrue(iString != testMap.get("FOO")); [EOL]     assertEquals(iInteger, testMap.get("BAR")); [EOL]     assertTrue(iInteger != testMap.get("BAR")); [EOL]     assertEquals(iMap, testMap); [EOL] }
@Test [EOL] public void testClone() throws Exception { [EOL]     final Object test = SerializationUtils.clone(iMap); [EOL]     assertNotNull(test); [EOL]     assertTrue(test instanceof HashMap<?, ?>); [EOL]     assertTrue(test != iMap); [EOL]     final HashMap<?, ?> testMap = (HashMap<?, ?>) test; [EOL]     assertEquals(iString, testMap.get("FOO")); [EOL]     assertTrue(iString != testMap.get("FOO")); [EOL]     assertEquals(iInteger, testMap.get("BAR")); [EOL]     assertTrue(iInteger != testMap.get("BAR")); [EOL]     assertEquals(iMap, testMap); [EOL] }
@Test [EOL] public void testDeserializeBytes() throws Exception { [EOL]     final ByteArrayOutputStream streamReal = new ByteArrayOutputStream(); [EOL]     final ObjectOutputStream oos = new ObjectOutputStream(streamReal); [EOL]     oos.writeObject(iMap); [EOL]     oos.flush(); [EOL]     oos.close(); [EOL]     final Object test = SerializationUtils.deserialize(streamReal.toByteArray()); [EOL]     assertNotNull(test); [EOL]     assertTrue(test instanceof HashMap<?, ?>); [EOL]     assertTrue(test != iMap); [EOL]     final HashMap<?, ?> testMap = (HashMap<?, ?>) test; [EOL]     assertEquals(iString, testMap.get("FOO")); [EOL]     assertTrue(iString != testMap.get("FOO")); [EOL]     assertEquals(iInteger, testMap.get("BAR")); [EOL]     assertTrue(iInteger != testMap.get("BAR")); [EOL]     assertEquals(iMap, testMap); [EOL] }
@Test [EOL] public void testDeserializeBytes() throws Exception { [EOL]     final ByteArrayOutputStream streamReal = new ByteArrayOutputStream(); [EOL]     final ObjectOutputStream oos = new ObjectOutputStream(streamReal); [EOL]     oos.writeObject(iMap); [EOL]     oos.flush(); [EOL]     oos.close(); [EOL]     final Object test = SerializationUtils.deserialize(streamReal.toByteArray()); [EOL]     assertNotNull(test); [EOL]     assertTrue(test instanceof HashMap<?, ?>); [EOL]     assertTrue(test != iMap); [EOL]     final HashMap<?, ?> testMap = (HashMap<?, ?>) test; [EOL]     assertEquals(iString, testMap.get("FOO")); [EOL]     assertTrue(iString != testMap.get("FOO")); [EOL]     assertEquals(iInteger, testMap.get("BAR")); [EOL]     assertTrue(iInteger != testMap.get("BAR")); [EOL]     assertEquals(iMap, testMap); [EOL] }
@Test [EOL] public void testClone() throws Exception { [EOL]     final Object test = SerializationUtils.clone(iMap); [EOL]     assertNotNull(test); [EOL]     assertTrue(test instanceof HashMap<?, ?>); [EOL]     assertTrue(test != iMap); [EOL]     final HashMap<?, ?> testMap = (HashMap<?, ?>) test; [EOL]     assertEquals(iString, testMap.get("FOO")); [EOL]     assertTrue(iString != testMap.get("FOO")); [EOL]     assertEquals(iInteger, testMap.get("BAR")); [EOL]     assertTrue(iInteger != testMap.get("BAR")); [EOL]     assertEquals(iMap, testMap); [EOL] }
@Test [EOL] public void testClone() throws Exception { [EOL]     final Object test = SerializationUtils.clone(iMap); [EOL]     assertNotNull(test); [EOL]     assertTrue(test instanceof HashMap<?, ?>); [EOL]     assertTrue(test != iMap); [EOL]     final HashMap<?, ?> testMap = (HashMap<?, ?>) test; [EOL]     assertEquals(iString, testMap.get("FOO")); [EOL]     assertTrue(iString != testMap.get("FOO")); [EOL]     assertEquals(iInteger, testMap.get("BAR")); [EOL]     assertTrue(iInteger != testMap.get("BAR")); [EOL]     assertEquals(iMap, testMap); [EOL] }
@Test [EOL] public void testClone() throws Exception { [EOL]     final Object test = SerializationUtils.clone(iMap); [EOL]     assertNotNull(test); [EOL]     assertTrue(test instanceof HashMap<?, ?>); [EOL]     assertTrue(test != iMap); [EOL]     final HashMap<?, ?> testMap = (HashMap<?, ?>) test; [EOL]     assertEquals(iString, testMap.get("FOO")); [EOL]     assertTrue(iString != testMap.get("FOO")); [EOL]     assertEquals(iInteger, testMap.get("BAR")); [EOL]     assertTrue(iInteger != testMap.get("BAR")); [EOL]     assertEquals(iMap, testMap); [EOL] }
@Test [EOL] public void testConstructor() { [EOL]     assertNotNull(new CharUtils()); [EOL]     final Constructor<?>[] cons = CharUtils.class.getDeclaredConstructors(); [EOL]     assertEquals(1, cons.length); [EOL]     assertTrue(Modifier.isPublic(cons[0].getModifiers())); [EOL]     assertTrue(Modifier.isPublic(BooleanUtils.class.getModifiers())); [EOL]     assertFalse(Modifier.isFinal(BooleanUtils.class.getModifiers())); [EOL] }
@SuppressWarnings("deprecation") [EOL] @Test [EOL] public void testToCharacterObject_char() { [EOL]     assertEquals(new Character('a'), CharUtils.toCharacterObject('a')); [EOL]     assertSame(CharUtils.toCharacterObject('a'), CharUtils.toCharacterObject('a')); [EOL]     for (int i = 0; i < 128; i++) { [EOL]         final Character ch = CharUtils.toCharacterObject((char) i); [EOL]         final Character ch2 = CharUtils.toCharacterObject((char) i); [EOL]         assertSame(ch, ch2); [EOL]         assertEquals(i, ch.charValue()); [EOL]     } [EOL]     for (int i = 128; i < 196; i++) { [EOL]         final Character ch = CharUtils.toCharacterObject((char) i); [EOL]         final Character ch2 = CharUtils.toCharacterObject((char) i); [EOL]         assertEquals(ch, ch2); [EOL]         assertTrue(ch != ch2); [EOL]         assertEquals(i, ch.charValue()); [EOL]         assertEquals(i, ch2.charValue()); [EOL]     } [EOL]     assertSame(CharUtils.toCharacterObject("a"), CharUtils.toCharacterObject('a')); [EOL] }
@SuppressWarnings("deprecation") [EOL] @Test [EOL] public void testToCharacterObject_char() { [EOL]     assertEquals(new Character('a'), CharUtils.toCharacterObject('a')); [EOL]     assertSame(CharUtils.toCharacterObject('a'), CharUtils.toCharacterObject('a')); [EOL]     for (int i = 0; i < 128; i++) { [EOL]         final Character ch = CharUtils.toCharacterObject((char) i); [EOL]         final Character ch2 = CharUtils.toCharacterObject((char) i); [EOL]         assertSame(ch, ch2); [EOL]         assertEquals(i, ch.charValue()); [EOL]     } [EOL]     for (int i = 128; i < 196; i++) { [EOL]         final Character ch = CharUtils.toCharacterObject((char) i); [EOL]         final Character ch2 = CharUtils.toCharacterObject((char) i); [EOL]         assertEquals(ch, ch2); [EOL]         assertTrue(ch != ch2); [EOL]         assertEquals(i, ch.charValue()); [EOL]         assertEquals(i, ch2.charValue()); [EOL]     } [EOL]     assertSame(CharUtils.toCharacterObject("a"), CharUtils.toCharacterObject('a')); [EOL] }
@SuppressWarnings("deprecation") [EOL] @Test [EOL] public void testToCharacterObject_char() { [EOL]     assertEquals(new Character('a'), CharUtils.toCharacterObject('a')); [EOL]     assertSame(CharUtils.toCharacterObject('a'), CharUtils.toCharacterObject('a')); [EOL]     for (int i = 0; i < 128; i++) { [EOL]         final Character ch = CharUtils.toCharacterObject((char) i); [EOL]         final Character ch2 = CharUtils.toCharacterObject((char) i); [EOL]         assertSame(ch, ch2); [EOL]         assertEquals(i, ch.charValue()); [EOL]     } [EOL]     for (int i = 128; i < 196; i++) { [EOL]         final Character ch = CharUtils.toCharacterObject((char) i); [EOL]         final Character ch2 = CharUtils.toCharacterObject((char) i); [EOL]         assertEquals(ch, ch2); [EOL]         assertTrue(ch != ch2); [EOL]         assertEquals(i, ch.charValue()); [EOL]         assertEquals(i, ch2.charValue()); [EOL]     } [EOL]     assertSame(CharUtils.toCharacterObject("a"), CharUtils.toCharacterObject('a')); [EOL] }
@Test [EOL] public void testToCharacterObject_String() { [EOL]     assertEquals(null, CharUtils.toCharacterObject(null)); [EOL]     assertEquals(null, CharUtils.toCharacterObject("")); [EOL]     assertEquals(new Character('a'), CharUtils.toCharacterObject("a")); [EOL]     assertEquals(new Character('a'), CharUtils.toCharacterObject("abc")); [EOL]     assertSame(CharUtils.toCharacterObject("a"), CharUtils.toCharacterObject("a")); [EOL] }
@Test [EOL] public void testToChar_Character() { [EOL]     assertEquals('A', CharUtils.toChar(CHARACTER_A)); [EOL]     assertEquals('B', CharUtils.toChar(CHARACTER_B)); [EOL]     try { [EOL]         CharUtils.toChar((Character) null); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL] }
@Test [EOL] public void testToChar_Character() { [EOL]     assertEquals('A', CharUtils.toChar(CHARACTER_A)); [EOL]     assertEquals('B', CharUtils.toChar(CHARACTER_B)); [EOL]     try { [EOL]         CharUtils.toChar((Character) null); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL] }
@Test [EOL] public void testToChar_String() { [EOL]     assertEquals('A', CharUtils.toChar("A")); [EOL]     assertEquals('B', CharUtils.toChar("BA")); [EOL]     try { [EOL]         CharUtils.toChar((String) null); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL]     try { [EOL]         CharUtils.toChar(""); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]     } [EOL] }
@Test [EOL] public void testContains() { [EOL]     assertFalse(intRange.contains(null)); [EOL]     assertFalse(intRange.contains(5)); [EOL]     assertTrue(intRange.contains(10)); [EOL]     assertTrue(intRange.contains(15)); [EOL]     assertTrue(intRange.contains(20)); [EOL]     assertFalse(intRange.contains(25)); [EOL] }
@Test [EOL] public void testIsBefore() { [EOL]     assertFalse(intRange.isBefore(null)); [EOL]     assertFalse(intRange.isBefore(5)); [EOL]     assertFalse(intRange.isBefore(10)); [EOL]     assertFalse(intRange.isBefore(15)); [EOL]     assertFalse(intRange.isBefore(20)); [EOL]     assertTrue(intRange.isBefore(25)); [EOL] }
@Test [EOL] public void testIsBefore() { [EOL]     assertFalse(intRange.isBefore(null)); [EOL]     assertFalse(intRange.isBefore(5)); [EOL]     assertFalse(intRange.isBefore(10)); [EOL]     assertFalse(intRange.isBefore(15)); [EOL]     assertFalse(intRange.isBefore(20)); [EOL]     assertTrue(intRange.isBefore(25)); [EOL] }
@Test [EOL] public void testIsBefore() { [EOL]     assertFalse(intRange.isBefore(null)); [EOL]     assertFalse(intRange.isBefore(5)); [EOL]     assertFalse(intRange.isBefore(10)); [EOL]     assertFalse(intRange.isBefore(15)); [EOL]     assertFalse(intRange.isBefore(20)); [EOL]     assertTrue(intRange.isBefore(25)); [EOL] }
@Test [EOL] public void testContainsRange() { [EOL]     assertFalse(intRange.containsRange(null)); [EOL]     assertTrue(intRange.containsRange(Range.between(12, 18))); [EOL]     assertFalse(intRange.containsRange(Range.between(32, 45))); [EOL]     assertFalse(intRange.containsRange(Range.between(2, 8))); [EOL]     assertTrue(intRange.containsRange(Range.between(10, 20))); [EOL]     assertFalse(intRange.containsRange(Range.between(9, 14))); [EOL]     assertFalse(intRange.containsRange(Range.between(16, 21))); [EOL]     assertTrue(intRange.containsRange(Range.between(10, 19))); [EOL]     assertFalse(intRange.containsRange(Range.between(10, 21))); [EOL]     assertTrue(intRange.containsRange(Range.between(11, 20))); [EOL]     assertFalse(intRange.containsRange(Range.between(9, 20))); [EOL]     assertFalse(intRange.containsRange(Range.between(-11, -18))); [EOL] }
@Test [EOL] public void testToStringFormat() { [EOL]     final String str = intRange.toString("From %1$s to %2$s"); [EOL]     assertEquals("From 10 to 20", str); [EOL] }
@Test [EOL] public void testToStringFormat() { [EOL]     final String str = intRange.toString("From %1$s to %2$s"); [EOL]     assertEquals("From 10 to 20", str); [EOL] }
@Test [EOL] public void test_toStringExcludeNullArray() { [EOL]     final String toString = ReflectionToStringBuilder.toStringExclude(new TestFixture(), (String[]) null); [EOL]     this.validateSecretFieldPresent(toString); [EOL] }
@Test [EOL] public void test_toStringExcludeNullArray() { [EOL]     final String toString = ReflectionToStringBuilder.toStringExclude(new TestFixture(), (String[]) null); [EOL]     this.validateSecretFieldPresent(toString); [EOL] }
@Test [EOL] public void testGetSet() { [EOL]     final MutableLong mutNum = new MutableLong(0); [EOL]     assertEquals(0, new MutableLong().longValue()); [EOL]     assertEquals(Long.valueOf(0), new MutableLong().getValue()); [EOL]     mutNum.setValue(1); [EOL]     assertEquals(1, mutNum.longValue()); [EOL]     assertEquals(Long.valueOf(1), mutNum.getValue()); [EOL]     mutNum.setValue(Long.valueOf(2)); [EOL]     assertEquals(2, mutNum.longValue()); [EOL]     assertEquals(Long.valueOf(2), mutNum.getValue()); [EOL]     mutNum.setValue(new MutableLong(3)); [EOL]     assertEquals(3, mutNum.longValue()); [EOL]     assertEquals(Long.valueOf(3), mutNum.getValue()); [EOL] }
@Test [EOL] public void testGetSet() { [EOL]     final MutableLong mutNum = new MutableLong(0); [EOL]     assertEquals(0, new MutableLong().longValue()); [EOL]     assertEquals(Long.valueOf(0), new MutableLong().getValue()); [EOL]     mutNum.setValue(1); [EOL]     assertEquals(1, mutNum.longValue()); [EOL]     assertEquals(Long.valueOf(1), mutNum.getValue()); [EOL]     mutNum.setValue(Long.valueOf(2)); [EOL]     assertEquals(2, mutNum.longValue()); [EOL]     assertEquals(Long.valueOf(2), mutNum.getValue()); [EOL]     mutNum.setValue(new MutableLong(3)); [EOL]     assertEquals(3, mutNum.longValue()); [EOL]     assertEquals(Long.valueOf(3), mutNum.getValue()); [EOL] }
@Test [EOL] public void testGetSet() { [EOL]     final MutableLong mutNum = new MutableLong(0); [EOL]     assertEquals(0, new MutableLong().longValue()); [EOL]     assertEquals(Long.valueOf(0), new MutableLong().getValue()); [EOL]     mutNum.setValue(1); [EOL]     assertEquals(1, mutNum.longValue()); [EOL]     assertEquals(Long.valueOf(1), mutNum.getValue()); [EOL]     mutNum.setValue(Long.valueOf(2)); [EOL]     assertEquals(2, mutNum.longValue()); [EOL]     assertEquals(Long.valueOf(2), mutNum.getValue()); [EOL]     mutNum.setValue(new MutableLong(3)); [EOL]     assertEquals(3, mutNum.longValue()); [EOL]     assertEquals(Long.valueOf(3), mutNum.getValue()); [EOL] }
@Test [EOL] public void testGetSet() { [EOL]     final MutableLong mutNum = new MutableLong(0); [EOL]     assertEquals(0, new MutableLong().longValue()); [EOL]     assertEquals(Long.valueOf(0), new MutableLong().getValue()); [EOL]     mutNum.setValue(1); [EOL]     assertEquals(1, mutNum.longValue()); [EOL]     assertEquals(Long.valueOf(1), mutNum.getValue()); [EOL]     mutNum.setValue(Long.valueOf(2)); [EOL]     assertEquals(2, mutNum.longValue()); [EOL]     assertEquals(Long.valueOf(2), mutNum.getValue()); [EOL]     mutNum.setValue(new MutableLong(3)); [EOL]     assertEquals(3, mutNum.longValue()); [EOL]     assertEquals(Long.valueOf(3), mutNum.getValue()); [EOL] }
@Test [EOL] public void testGetSet() { [EOL]     final MutableLong mutNum = new MutableLong(0); [EOL]     assertEquals(0, new MutableLong().longValue()); [EOL]     assertEquals(Long.valueOf(0), new MutableLong().getValue()); [EOL]     mutNum.setValue(1); [EOL]     assertEquals(1, mutNum.longValue()); [EOL]     assertEquals(Long.valueOf(1), mutNum.getValue()); [EOL]     mutNum.setValue(Long.valueOf(2)); [EOL]     assertEquals(2, mutNum.longValue()); [EOL]     assertEquals(Long.valueOf(2), mutNum.getValue()); [EOL]     mutNum.setValue(new MutableLong(3)); [EOL]     assertEquals(3, mutNum.longValue()); [EOL]     assertEquals(Long.valueOf(3), mutNum.getValue()); [EOL] }
@Test [EOL] public void testGetSet() { [EOL]     final MutableLong mutNum = new MutableLong(0); [EOL]     assertEquals(0, new MutableLong().longValue()); [EOL]     assertEquals(Long.valueOf(0), new MutableLong().getValue()); [EOL]     mutNum.setValue(1); [EOL]     assertEquals(1, mutNum.longValue()); [EOL]     assertEquals(Long.valueOf(1), mutNum.getValue()); [EOL]     mutNum.setValue(Long.valueOf(2)); [EOL]     assertEquals(2, mutNum.longValue()); [EOL]     assertEquals(Long.valueOf(2), mutNum.getValue()); [EOL]     mutNum.setValue(new MutableLong(3)); [EOL]     assertEquals(3, mutNum.longValue()); [EOL]     assertEquals(Long.valueOf(3), mutNum.getValue()); [EOL] }
@Test [EOL] public void testGetSet() { [EOL]     final MutableLong mutNum = new MutableLong(0); [EOL]     assertEquals(0, new MutableLong().longValue()); [EOL]     assertEquals(Long.valueOf(0), new MutableLong().getValue()); [EOL]     mutNum.setValue(1); [EOL]     assertEquals(1, mutNum.longValue()); [EOL]     assertEquals(Long.valueOf(1), mutNum.getValue()); [EOL]     mutNum.setValue(Long.valueOf(2)); [EOL]     assertEquals(2, mutNum.longValue()); [EOL]     assertEquals(Long.valueOf(2), mutNum.getValue()); [EOL]     mutNum.setValue(new MutableLong(3)); [EOL]     assertEquals(3, mutNum.longValue()); [EOL]     assertEquals(Long.valueOf(3), mutNum.getValue()); [EOL] }
@Test [EOL] public void testHashCode() { [EOL]     final MutableLong mutNumA = new MutableLong(0); [EOL]     final MutableLong mutNumB = new MutableLong(0); [EOL]     final MutableLong mutNumC = new MutableLong(1); [EOL]     assertTrue(mutNumA.hashCode() == mutNumA.hashCode()); [EOL]     assertTrue(mutNumA.hashCode() == mutNumB.hashCode()); [EOL]     assertFalse(mutNumA.hashCode() == mutNumC.hashCode()); [EOL]     assertTrue(mutNumA.hashCode() == Long.valueOf(0).hashCode()); [EOL] }
@Test [EOL] public void testSubtractValuePrimitive() { [EOL]     final MutableInt mutNum = new MutableInt(1); [EOL]     mutNum.subtract(1); [EOL]     assertEquals(0, mutNum.intValue()); [EOL]     assertEquals(0L, mutNum.longValue()); [EOL] }
@Test [EOL] public void testSubtractValuePrimitive() { [EOL]     final MutableInt mutNum = new MutableInt(1); [EOL]     mutNum.subtract(1); [EOL]     assertEquals(0, mutNum.intValue()); [EOL]     assertEquals(0L, mutNum.longValue()); [EOL] }
@Test [EOL] public void testSubtractValuePrimitive() { [EOL]     final MutableInt mutNum = new MutableInt(1); [EOL]     mutNum.subtract(1); [EOL]     assertEquals(0, mutNum.intValue()); [EOL]     assertEquals(0L, mutNum.longValue()); [EOL] }
@Test [EOL] public void testSubtractValueObject() { [EOL]     final MutableInt mutNum = new MutableInt(1); [EOL]     mutNum.subtract(Integer.valueOf(1)); [EOL]     assertEquals(0, mutNum.intValue()); [EOL]     assertEquals(0L, mutNum.longValue()); [EOL] }
@Test [EOL] public void testSubtractValueObject() { [EOL]     final MutableInt mutNum = new MutableInt(1); [EOL]     mutNum.subtract(Integer.valueOf(1)); [EOL]     assertEquals(0, mutNum.intValue()); [EOL]     assertEquals(0L, mutNum.longValue()); [EOL] }
@Test [EOL] public void testSubtractValueObject() { [EOL]     final MutableInt mutNum = new MutableInt(1); [EOL]     mutNum.subtract(Integer.valueOf(1)); [EOL]     assertEquals(0, mutNum.intValue()); [EOL]     assertEquals(0L, mutNum.longValue()); [EOL] }
@Test [EOL] public void testIsNull() { [EOL]     final Object o = FOO; [EOL]     final Object dflt = BAR; [EOL]     assertSame("dflt was not returned when o was null", dflt, ObjectUtils.defaultIfNull(null, dflt)); [EOL]     assertSame("dflt was returned when o was not null", o, ObjectUtils.defaultIfNull(o, dflt)); [EOL] }
@Test [EOL] public void testIsNull() { [EOL]     final Object o = FOO; [EOL]     final Object dflt = BAR; [EOL]     assertSame("dflt was not returned when o was null", dflt, ObjectUtils.defaultIfNull(null, dflt)); [EOL]     assertSame("dflt was returned when o was not null", o, ObjectUtils.defaultIfNull(o, dflt)); [EOL] }
@Test [EOL] public void testFirstNonNull() { [EOL]     assertEquals(null, ObjectUtils.firstNonNull(null, null)); [EOL]     assertEquals("", ObjectUtils.firstNonNull(null, "")); [EOL]     final String firstNonNullGenerics = ObjectUtils.firstNonNull(null, null, "123", "456"); [EOL]     assertEquals("123", firstNonNullGenerics); [EOL]     assertEquals("123", ObjectUtils.firstNonNull("123", null, "456", null)); [EOL]     assertEquals(null, ObjectUtils.firstNonNull()); [EOL]     assertSame(Boolean.TRUE, ObjectUtils.firstNonNull(Boolean.TRUE)); [EOL]     assertNull(ObjectUtils.firstNonNull()); [EOL]     assertNull(ObjectUtils.firstNonNull(null, null)); [EOL]     assertNull(ObjectUtils.firstNonNull((Object) null)); [EOL]     assertNull(ObjectUtils.firstNonNull((Object[]) null)); [EOL] }
@Test [EOL] public void testFirstNonNull() { [EOL]     assertEquals(null, ObjectUtils.firstNonNull(null, null)); [EOL]     assertEquals("", ObjectUtils.firstNonNull(null, "")); [EOL]     final String firstNonNullGenerics = ObjectUtils.firstNonNull(null, null, "123", "456"); [EOL]     assertEquals("123", firstNonNullGenerics); [EOL]     assertEquals("123", ObjectUtils.firstNonNull("123", null, "456", null)); [EOL]     assertEquals(null, ObjectUtils.firstNonNull()); [EOL]     assertSame(Boolean.TRUE, ObjectUtils.firstNonNull(Boolean.TRUE)); [EOL]     assertNull(ObjectUtils.firstNonNull()); [EOL]     assertNull(ObjectUtils.firstNonNull(null, null)); [EOL]     assertNull(ObjectUtils.firstNonNull((Object) null)); [EOL]     assertNull(ObjectUtils.firstNonNull((Object[]) null)); [EOL] }
@Test [EOL] public void testFirstNonNull() { [EOL]     assertEquals(null, ObjectUtils.firstNonNull(null, null)); [EOL]     assertEquals("", ObjectUtils.firstNonNull(null, "")); [EOL]     final String firstNonNullGenerics = ObjectUtils.firstNonNull(null, null, "123", "456"); [EOL]     assertEquals("123", firstNonNullGenerics); [EOL]     assertEquals("123", ObjectUtils.firstNonNull("123", null, "456", null)); [EOL]     assertEquals(null, ObjectUtils.firstNonNull()); [EOL]     assertSame(Boolean.TRUE, ObjectUtils.firstNonNull(Boolean.TRUE)); [EOL]     assertNull(ObjectUtils.firstNonNull()); [EOL]     assertNull(ObjectUtils.firstNonNull(null, null)); [EOL]     assertNull(ObjectUtils.firstNonNull((Object) null)); [EOL]     assertNull(ObjectUtils.firstNonNull((Object[]) null)); [EOL] }
@Test [EOL] public void testFirstNonNull() { [EOL]     assertEquals(null, ObjectUtils.firstNonNull(null, null)); [EOL]     assertEquals("", ObjectUtils.firstNonNull(null, "")); [EOL]     final String firstNonNullGenerics = ObjectUtils.firstNonNull(null, null, "123", "456"); [EOL]     assertEquals("123", firstNonNullGenerics); [EOL]     assertEquals("123", ObjectUtils.firstNonNull("123", null, "456", null)); [EOL]     assertEquals(null, ObjectUtils.firstNonNull()); [EOL]     assertSame(Boolean.TRUE, ObjectUtils.firstNonNull(Boolean.TRUE)); [EOL]     assertNull(ObjectUtils.firstNonNull()); [EOL]     assertNull(ObjectUtils.firstNonNull(null, null)); [EOL]     assertNull(ObjectUtils.firstNonNull((Object) null)); [EOL]     assertNull(ObjectUtils.firstNonNull((Object[]) null)); [EOL] }
@Test [EOL] public void testFirstNonNull() { [EOL]     assertEquals(null, ObjectUtils.firstNonNull(null, null)); [EOL]     assertEquals("", ObjectUtils.firstNonNull(null, "")); [EOL]     final String firstNonNullGenerics = ObjectUtils.firstNonNull(null, null, "123", "456"); [EOL]     assertEquals("123", firstNonNullGenerics); [EOL]     assertEquals("123", ObjectUtils.firstNonNull("123", null, "456", null)); [EOL]     assertEquals(null, ObjectUtils.firstNonNull()); [EOL]     assertSame(Boolean.TRUE, ObjectUtils.firstNonNull(Boolean.TRUE)); [EOL]     assertNull(ObjectUtils.firstNonNull()); [EOL]     assertNull(ObjectUtils.firstNonNull(null, null)); [EOL]     assertNull(ObjectUtils.firstNonNull((Object) null)); [EOL]     assertNull(ObjectUtils.firstNonNull((Object[]) null)); [EOL] }
@Test [EOL] public void testFirstNonNull() { [EOL]     assertEquals(null, ObjectUtils.firstNonNull(null, null)); [EOL]     assertEquals("", ObjectUtils.firstNonNull(null, "")); [EOL]     final String firstNonNullGenerics = ObjectUtils.firstNonNull(null, null, "123", "456"); [EOL]     assertEquals("123", firstNonNullGenerics); [EOL]     assertEquals("123", ObjectUtils.firstNonNull("123", null, "456", null)); [EOL]     assertEquals(null, ObjectUtils.firstNonNull()); [EOL]     assertSame(Boolean.TRUE, ObjectUtils.firstNonNull(Boolean.TRUE)); [EOL]     assertNull(ObjectUtils.firstNonNull()); [EOL]     assertNull(ObjectUtils.firstNonNull(null, null)); [EOL]     assertNull(ObjectUtils.firstNonNull((Object) null)); [EOL]     assertNull(ObjectUtils.firstNonNull((Object[]) null)); [EOL] }
@Test [EOL] public void testFirstNonNull() { [EOL]     assertEquals(null, ObjectUtils.firstNonNull(null, null)); [EOL]     assertEquals("", ObjectUtils.firstNonNull(null, "")); [EOL]     final String firstNonNullGenerics = ObjectUtils.firstNonNull(null, null, "123", "456"); [EOL]     assertEquals("123", firstNonNullGenerics); [EOL]     assertEquals("123", ObjectUtils.firstNonNull("123", null, "456", null)); [EOL]     assertEquals(null, ObjectUtils.firstNonNull()); [EOL]     assertSame(Boolean.TRUE, ObjectUtils.firstNonNull(Boolean.TRUE)); [EOL]     assertNull(ObjectUtils.firstNonNull()); [EOL]     assertNull(ObjectUtils.firstNonNull(null, null)); [EOL]     assertNull(ObjectUtils.firstNonNull((Object) null)); [EOL]     assertNull(ObjectUtils.firstNonNull((Object[]) null)); [EOL] }
@Test [EOL] public void testNotEqual() { [EOL]     assertFalse("ObjectUtils.notEqual(null, null) returned false", ObjectUtils.notEqual(null, null)); [EOL]     assertTrue("ObjectUtils.notEqual(\"foo\", null) returned true", ObjectUtils.notEqual(FOO, null)); [EOL]     assertTrue("ObjectUtils.notEqual(null, \"bar\") returned true", ObjectUtils.notEqual(null, BAR)); [EOL]     assertTrue("ObjectUtils.notEqual(\"foo\", \"bar\") returned true", ObjectUtils.notEqual(FOO, BAR)); [EOL]     assertFalse("ObjectUtils.notEqual(\"foo\", \"foo\") returned false", ObjectUtils.notEqual(FOO, FOO)); [EOL] }
@Test [EOL] public void testIdentityToStringAppendable() { [EOL]     final Integer i = Integer.valueOf(121); [EOL]     final String expected = "java.lang.Integer@" + Integer.toHexString(System.identityHashCode(i)); [EOL]     try { [EOL]         final Appendable appendable = new StringBuilder(); [EOL]         ObjectUtils.identityToString(appendable, i); [EOL]         assertEquals(expected, appendable.toString()); [EOL]     } catch (IOException ex) { [EOL]         fail("IOException unexpected"); [EOL]     } [EOL]     try { [EOL]         ObjectUtils.identityToString((Appendable) null, "tmp"); [EOL]         fail("NullPointerException expected"); [EOL]     } catch (final NullPointerException npe) { [EOL]     } catch (IOException ex) { [EOL]     } [EOL]     try { [EOL]         ObjectUtils.identityToString((Appendable) (new StringBuilder()), null); [EOL]         fail("NullPointerException expected"); [EOL]     } catch (final NullPointerException npe) { [EOL]     } catch (IOException ex) { [EOL]     } [EOL] }
@Test [EOL] public void testToString_Object() { [EOL]     assertEquals("", ObjectUtils.toString((Object) null)); [EOL]     assertEquals(Boolean.TRUE.toString(), ObjectUtils.toString(Boolean.TRUE)); [EOL] }
@Test [EOL] public void testToString_Object() { [EOL]     assertEquals("", ObjectUtils.toString((Object) null)); [EOL]     assertEquals(Boolean.TRUE.toString(), ObjectUtils.toString(Boolean.TRUE)); [EOL] }
@Test [EOL] public void testCompare() { [EOL]     final Integer one = Integer.valueOf(1); [EOL]     final Integer two = Integer.valueOf(2); [EOL]     final Integer nullValue = null; [EOL]     assertEquals("Null Null false", 0, ObjectUtils.compare(nullValue, nullValue)); [EOL]     assertEquals("Null Null true", 0, ObjectUtils.compare(nullValue, nullValue, true)); [EOL]     assertEquals("Null one false", -1, ObjectUtils.compare(nullValue, one)); [EOL]     assertEquals("Null one true", 1, ObjectUtils.compare(nullValue, one, true)); [EOL]     assertEquals("one Null false", 1, ObjectUtils.compare(one, nullValue)); [EOL]     assertEquals("one Null true", -1, ObjectUtils.compare(one, nullValue, true)); [EOL]     assertEquals("one two false", -1, ObjectUtils.compare(one, two)); [EOL]     assertEquals("one two true", -1, ObjectUtils.compare(one, two, true)); [EOL] }
@Test [EOL] public void testCompare() { [EOL]     final Integer one = Integer.valueOf(1); [EOL]     final Integer two = Integer.valueOf(2); [EOL]     final Integer nullValue = null; [EOL]     assertEquals("Null Null false", 0, ObjectUtils.compare(nullValue, nullValue)); [EOL]     assertEquals("Null Null true", 0, ObjectUtils.compare(nullValue, nullValue, true)); [EOL]     assertEquals("Null one false", -1, ObjectUtils.compare(nullValue, one)); [EOL]     assertEquals("Null one true", 1, ObjectUtils.compare(nullValue, one, true)); [EOL]     assertEquals("one Null false", 1, ObjectUtils.compare(one, nullValue)); [EOL]     assertEquals("one Null true", -1, ObjectUtils.compare(one, nullValue, true)); [EOL]     assertEquals("one two false", -1, ObjectUtils.compare(one, two)); [EOL]     assertEquals("one two true", -1, ObjectUtils.compare(one, two, true)); [EOL] }
@Test [EOL] public void testMedian() { [EOL]     assertEquals("foo", ObjectUtils.median("foo")); [EOL]     assertEquals("bar", ObjectUtils.median("foo", "bar")); [EOL]     assertEquals("baz", ObjectUtils.median("foo", "bar", "baz")); [EOL]     assertEquals("baz", ObjectUtils.median("foo", "bar", "baz", "blah")); [EOL]     assertEquals("blah", ObjectUtils.median("foo", "bar", "baz", "blah", "wah")); [EOL]     assertEquals(Integer.valueOf(5), ObjectUtils.median(Integer.valueOf(1), Integer.valueOf(5), Integer.valueOf(10))); [EOL]     assertEquals(Integer.valueOf(7), ObjectUtils.median(Integer.valueOf(5), Integer.valueOf(6), Integer.valueOf(7), Integer.valueOf(8), Integer.valueOf(9))); [EOL]     assertEquals(Integer.valueOf(6), ObjectUtils.median(Integer.valueOf(5), Integer.valueOf(6), Integer.valueOf(7), Integer.valueOf(8))); [EOL] }
@Test [EOL] public void testMedian() { [EOL]     assertEquals("foo", ObjectUtils.median("foo")); [EOL]     assertEquals("bar", ObjectUtils.median("foo", "bar")); [EOL]     assertEquals("baz", ObjectUtils.median("foo", "bar", "baz")); [EOL]     assertEquals("baz", ObjectUtils.median("foo", "bar", "baz", "blah")); [EOL]     assertEquals("blah", ObjectUtils.median("foo", "bar", "baz", "blah", "wah")); [EOL]     assertEquals(Integer.valueOf(5), ObjectUtils.median(Integer.valueOf(1), Integer.valueOf(5), Integer.valueOf(10))); [EOL]     assertEquals(Integer.valueOf(7), ObjectUtils.median(Integer.valueOf(5), Integer.valueOf(6), Integer.valueOf(7), Integer.valueOf(8), Integer.valueOf(9))); [EOL]     assertEquals(Integer.valueOf(6), ObjectUtils.median(Integer.valueOf(5), Integer.valueOf(6), Integer.valueOf(7), Integer.valueOf(8))); [EOL] }
@Test [EOL] public void testMedian() { [EOL]     assertEquals("foo", ObjectUtils.median("foo")); [EOL]     assertEquals("bar", ObjectUtils.median("foo", "bar")); [EOL]     assertEquals("baz", ObjectUtils.median("foo", "bar", "baz")); [EOL]     assertEquals("baz", ObjectUtils.median("foo", "bar", "baz", "blah")); [EOL]     assertEquals("blah", ObjectUtils.median("foo", "bar", "baz", "blah", "wah")); [EOL]     assertEquals(Integer.valueOf(5), ObjectUtils.median(Integer.valueOf(1), Integer.valueOf(5), Integer.valueOf(10))); [EOL]     assertEquals(Integer.valueOf(7), ObjectUtils.median(Integer.valueOf(5), Integer.valueOf(6), Integer.valueOf(7), Integer.valueOf(8), Integer.valueOf(9))); [EOL]     assertEquals(Integer.valueOf(6), ObjectUtils.median(Integer.valueOf(5), Integer.valueOf(6), Integer.valueOf(7), Integer.valueOf(8))); [EOL] }
@Test [EOL] public void testMedian() { [EOL]     assertEquals("foo", ObjectUtils.median("foo")); [EOL]     assertEquals("bar", ObjectUtils.median("foo", "bar")); [EOL]     assertEquals("baz", ObjectUtils.median("foo", "bar", "baz")); [EOL]     assertEquals("baz", ObjectUtils.median("foo", "bar", "baz", "blah")); [EOL]     assertEquals("blah", ObjectUtils.median("foo", "bar", "baz", "blah", "wah")); [EOL]     assertEquals(Integer.valueOf(5), ObjectUtils.median(Integer.valueOf(1), Integer.valueOf(5), Integer.valueOf(10))); [EOL]     assertEquals(Integer.valueOf(7), ObjectUtils.median(Integer.valueOf(5), Integer.valueOf(6), Integer.valueOf(7), Integer.valueOf(8), Integer.valueOf(9))); [EOL]     assertEquals(Integer.valueOf(6), ObjectUtils.median(Integer.valueOf(5), Integer.valueOf(6), Integer.valueOf(7), Integer.valueOf(8))); [EOL] }
@Test [EOL] public void testMedian() { [EOL]     assertEquals("foo", ObjectUtils.median("foo")); [EOL]     assertEquals("bar", ObjectUtils.median("foo", "bar")); [EOL]     assertEquals("baz", ObjectUtils.median("foo", "bar", "baz")); [EOL]     assertEquals("baz", ObjectUtils.median("foo", "bar", "baz", "blah")); [EOL]     assertEquals("blah", ObjectUtils.median("foo", "bar", "baz", "blah", "wah")); [EOL]     assertEquals(Integer.valueOf(5), ObjectUtils.median(Integer.valueOf(1), Integer.valueOf(5), Integer.valueOf(10))); [EOL]     assertEquals(Integer.valueOf(7), ObjectUtils.median(Integer.valueOf(5), Integer.valueOf(6), Integer.valueOf(7), Integer.valueOf(8), Integer.valueOf(9))); [EOL]     assertEquals(Integer.valueOf(6), ObjectUtils.median(Integer.valueOf(5), Integer.valueOf(6), Integer.valueOf(7), Integer.valueOf(8))); [EOL] }
@Test [EOL] public void testMedian() { [EOL]     assertEquals("foo", ObjectUtils.median("foo")); [EOL]     assertEquals("bar", ObjectUtils.median("foo", "bar")); [EOL]     assertEquals("baz", ObjectUtils.median("foo", "bar", "baz")); [EOL]     assertEquals("baz", ObjectUtils.median("foo", "bar", "baz", "blah")); [EOL]     assertEquals("blah", ObjectUtils.median("foo", "bar", "baz", "blah", "wah")); [EOL]     assertEquals(Integer.valueOf(5), ObjectUtils.median(Integer.valueOf(1), Integer.valueOf(5), Integer.valueOf(10))); [EOL]     assertEquals(Integer.valueOf(7), ObjectUtils.median(Integer.valueOf(5), Integer.valueOf(6), Integer.valueOf(7), Integer.valueOf(8), Integer.valueOf(9))); [EOL]     assertEquals(Integer.valueOf(6), ObjectUtils.median(Integer.valueOf(5), Integer.valueOf(6), Integer.valueOf(7), Integer.valueOf(8))); [EOL] }
@Test [EOL] public void testCloneOfNotCloneable() { [EOL]     final String string = new String("apache"); [EOL]     assertNull(ObjectUtils.clone(string)); [EOL] }
@Test [EOL] public void testCloneOfNotCloneable() { [EOL]     final String string = new String("apache"); [EOL]     assertNull(ObjectUtils.clone(string)); [EOL] }
@Test [EOL] public void testCloneOfNotCloneable() { [EOL]     final String string = new String("apache"); [EOL]     assertNull(ObjectUtils.clone(string)); [EOL] }
@Test [EOL] public void testCloneOfNotCloneable() { [EOL]     final String string = new String("apache"); [EOL]     assertNull(ObjectUtils.clone(string)); [EOL] }
@Test [EOL] public void testCloneOfNotCloneable() { [EOL]     final String string = new String("apache"); [EOL]     assertNull(ObjectUtils.clone(string)); [EOL] }
@Test [EOL] public void testConstMethods() { [EOL]     assertTrue("CONST(boolean)", ObjectUtils.CONST(true)); [EOL]     assertEquals("CONST(byte)", (byte) 3, ObjectUtils.CONST((byte) 3)); [EOL]     assertEquals("CONST(char)", (char) 3, ObjectUtils.CONST((char) 3)); [EOL]     assertEquals("CONST(short)", (short) 3, ObjectUtils.CONST((short) 3)); [EOL]     assertEquals("CONST(int)", 3, ObjectUtils.CONST(3)); [EOL]     assertEquals("CONST(long)", 3l, ObjectUtils.CONST(3l)); [EOL]     assertEquals("CONST(float)", 3f, ObjectUtils.CONST(3f), 0); [EOL]     assertEquals("CONST(double)", 3.0, ObjectUtils.CONST(3.0), 0); [EOL]     assertEquals("CONST(Object)", "abc", ObjectUtils.CONST("abc")); [EOL]     final boolean MAGIC_FLAG = ObjectUtils.CONST(true); [EOL]     final byte MAGIC_BYTE1 = ObjectUtils.CONST((byte) 127); [EOL]     final byte MAGIC_BYTE2 = ObjectUtils.CONST_BYTE(127); [EOL]     final char MAGIC_CHAR = ObjectUtils.CONST('a'); [EOL]     final short MAGIC_SHORT1 = ObjectUtils.CONST((short) 123); [EOL]     final short MAGIC_SHORT2 = ObjectUtils.CONST_SHORT(127); [EOL]     final int MAGIC_INT = ObjectUtils.CONST(123); [EOL]     final long MAGIC_LONG1 = ObjectUtils.CONST(123L); [EOL]     final long MAGIC_LONG2 = ObjectUtils.CONST(3); [EOL]     final float MAGIC_FLOAT = ObjectUtils.CONST(1.0f); [EOL]     final double MAGIC_DOUBLE = ObjectUtils.CONST(1.0); [EOL]     final String MAGIC_STRING = ObjectUtils.CONST("abc"); [EOL]     assertTrue(MAGIC_FLAG); [EOL]     assertEquals(127, MAGIC_BYTE1); [EOL]     assertEquals(127, MAGIC_BYTE2); [EOL]     assertEquals('a', MAGIC_CHAR); [EOL]     assertEquals(123, MAGIC_SHORT1); [EOL]     assertEquals(127, MAGIC_SHORT2); [EOL]     assertEquals(123, MAGIC_INT); [EOL]     assertEquals(123, MAGIC_LONG1); [EOL]     assertEquals(3, MAGIC_LONG2); [EOL]     assertEquals(1.0f, MAGIC_FLOAT, 0.0f); [EOL]     assertEquals(1.0, MAGIC_DOUBLE, 0.0); [EOL]     assertEquals("abc", MAGIC_STRING); [EOL]     try { [EOL]         ObjectUtils.CONST_BYTE(-129); [EOL]         fail("CONST_BYTE(-129): IllegalArgumentException should have been thrown."); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         ObjectUtils.CONST_BYTE(128); [EOL]         fail("CONST_BYTE(128): IllegalArgumentException should have been thrown."); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         ObjectUtils.CONST_SHORT(-32769); [EOL]         fail("CONST_SHORT(-32769): IllegalArgumentException should have been thrown."); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         ObjectUtils.CONST_BYTE(32768); [EOL]         fail("CONST_SHORT(32768): IllegalArgumentException should have been thrown."); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL] }
@Test [EOL] public void testConstMethods() { [EOL]     assertTrue("CONST(boolean)", ObjectUtils.CONST(true)); [EOL]     assertEquals("CONST(byte)", (byte) 3, ObjectUtils.CONST((byte) 3)); [EOL]     assertEquals("CONST(char)", (char) 3, ObjectUtils.CONST((char) 3)); [EOL]     assertEquals("CONST(short)", (short) 3, ObjectUtils.CONST((short) 3)); [EOL]     assertEquals("CONST(int)", 3, ObjectUtils.CONST(3)); [EOL]     assertEquals("CONST(long)", 3l, ObjectUtils.CONST(3l)); [EOL]     assertEquals("CONST(float)", 3f, ObjectUtils.CONST(3f), 0); [EOL]     assertEquals("CONST(double)", 3.0, ObjectUtils.CONST(3.0), 0); [EOL]     assertEquals("CONST(Object)", "abc", ObjectUtils.CONST("abc")); [EOL]     final boolean MAGIC_FLAG = ObjectUtils.CONST(true); [EOL]     final byte MAGIC_BYTE1 = ObjectUtils.CONST((byte) 127); [EOL]     final byte MAGIC_BYTE2 = ObjectUtils.CONST_BYTE(127); [EOL]     final char MAGIC_CHAR = ObjectUtils.CONST('a'); [EOL]     final short MAGIC_SHORT1 = ObjectUtils.CONST((short) 123); [EOL]     final short MAGIC_SHORT2 = ObjectUtils.CONST_SHORT(127); [EOL]     final int MAGIC_INT = ObjectUtils.CONST(123); [EOL]     final long MAGIC_LONG1 = ObjectUtils.CONST(123L); [EOL]     final long MAGIC_LONG2 = ObjectUtils.CONST(3); [EOL]     final float MAGIC_FLOAT = ObjectUtils.CONST(1.0f); [EOL]     final double MAGIC_DOUBLE = ObjectUtils.CONST(1.0); [EOL]     final String MAGIC_STRING = ObjectUtils.CONST("abc"); [EOL]     assertTrue(MAGIC_FLAG); [EOL]     assertEquals(127, MAGIC_BYTE1); [EOL]     assertEquals(127, MAGIC_BYTE2); [EOL]     assertEquals('a', MAGIC_CHAR); [EOL]     assertEquals(123, MAGIC_SHORT1); [EOL]     assertEquals(127, MAGIC_SHORT2); [EOL]     assertEquals(123, MAGIC_INT); [EOL]     assertEquals(123, MAGIC_LONG1); [EOL]     assertEquals(3, MAGIC_LONG2); [EOL]     assertEquals(1.0f, MAGIC_FLOAT, 0.0f); [EOL]     assertEquals(1.0, MAGIC_DOUBLE, 0.0); [EOL]     assertEquals("abc", MAGIC_STRING); [EOL]     try { [EOL]         ObjectUtils.CONST_BYTE(-129); [EOL]         fail("CONST_BYTE(-129): IllegalArgumentException should have been thrown."); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         ObjectUtils.CONST_BYTE(128); [EOL]         fail("CONST_BYTE(128): IllegalArgumentException should have been thrown."); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         ObjectUtils.CONST_SHORT(-32769); [EOL]         fail("CONST_SHORT(-32769): IllegalArgumentException should have been thrown."); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         ObjectUtils.CONST_BYTE(32768); [EOL]         fail("CONST_SHORT(32768): IllegalArgumentException should have been thrown."); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL] }
@Test [EOL] public void testConstMethods() { [EOL]     assertTrue("CONST(boolean)", ObjectUtils.CONST(true)); [EOL]     assertEquals("CONST(byte)", (byte) 3, ObjectUtils.CONST((byte) 3)); [EOL]     assertEquals("CONST(char)", (char) 3, ObjectUtils.CONST((char) 3)); [EOL]     assertEquals("CONST(short)", (short) 3, ObjectUtils.CONST((short) 3)); [EOL]     assertEquals("CONST(int)", 3, ObjectUtils.CONST(3)); [EOL]     assertEquals("CONST(long)", 3l, ObjectUtils.CONST(3l)); [EOL]     assertEquals("CONST(float)", 3f, ObjectUtils.CONST(3f), 0); [EOL]     assertEquals("CONST(double)", 3.0, ObjectUtils.CONST(3.0), 0); [EOL]     assertEquals("CONST(Object)", "abc", ObjectUtils.CONST("abc")); [EOL]     final boolean MAGIC_FLAG = ObjectUtils.CONST(true); [EOL]     final byte MAGIC_BYTE1 = ObjectUtils.CONST((byte) 127); [EOL]     final byte MAGIC_BYTE2 = ObjectUtils.CONST_BYTE(127); [EOL]     final char MAGIC_CHAR = ObjectUtils.CONST('a'); [EOL]     final short MAGIC_SHORT1 = ObjectUtils.CONST((short) 123); [EOL]     final short MAGIC_SHORT2 = ObjectUtils.CONST_SHORT(127); [EOL]     final int MAGIC_INT = ObjectUtils.CONST(123); [EOL]     final long MAGIC_LONG1 = ObjectUtils.CONST(123L); [EOL]     final long MAGIC_LONG2 = ObjectUtils.CONST(3); [EOL]     final float MAGIC_FLOAT = ObjectUtils.CONST(1.0f); [EOL]     final double MAGIC_DOUBLE = ObjectUtils.CONST(1.0); [EOL]     final String MAGIC_STRING = ObjectUtils.CONST("abc"); [EOL]     assertTrue(MAGIC_FLAG); [EOL]     assertEquals(127, MAGIC_BYTE1); [EOL]     assertEquals(127, MAGIC_BYTE2); [EOL]     assertEquals('a', MAGIC_CHAR); [EOL]     assertEquals(123, MAGIC_SHORT1); [EOL]     assertEquals(127, MAGIC_SHORT2); [EOL]     assertEquals(123, MAGIC_INT); [EOL]     assertEquals(123, MAGIC_LONG1); [EOL]     assertEquals(3, MAGIC_LONG2); [EOL]     assertEquals(1.0f, MAGIC_FLOAT, 0.0f); [EOL]     assertEquals(1.0, MAGIC_DOUBLE, 0.0); [EOL]     assertEquals("abc", MAGIC_STRING); [EOL]     try { [EOL]         ObjectUtils.CONST_BYTE(-129); [EOL]         fail("CONST_BYTE(-129): IllegalArgumentException should have been thrown."); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         ObjectUtils.CONST_BYTE(128); [EOL]         fail("CONST_BYTE(128): IllegalArgumentException should have been thrown."); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         ObjectUtils.CONST_SHORT(-32769); [EOL]         fail("CONST_SHORT(-32769): IllegalArgumentException should have been thrown."); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         ObjectUtils.CONST_BYTE(32768); [EOL]         fail("CONST_SHORT(32768): IllegalArgumentException should have been thrown."); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL] }
@Test [EOL] public void testConstMethods() { [EOL]     assertTrue("CONST(boolean)", ObjectUtils.CONST(true)); [EOL]     assertEquals("CONST(byte)", (byte) 3, ObjectUtils.CONST((byte) 3)); [EOL]     assertEquals("CONST(char)", (char) 3, ObjectUtils.CONST((char) 3)); [EOL]     assertEquals("CONST(short)", (short) 3, ObjectUtils.CONST((short) 3)); [EOL]     assertEquals("CONST(int)", 3, ObjectUtils.CONST(3)); [EOL]     assertEquals("CONST(long)", 3l, ObjectUtils.CONST(3l)); [EOL]     assertEquals("CONST(float)", 3f, ObjectUtils.CONST(3f), 0); [EOL]     assertEquals("CONST(double)", 3.0, ObjectUtils.CONST(3.0), 0); [EOL]     assertEquals("CONST(Object)", "abc", ObjectUtils.CONST("abc")); [EOL]     final boolean MAGIC_FLAG = ObjectUtils.CONST(true); [EOL]     final byte MAGIC_BYTE1 = ObjectUtils.CONST((byte) 127); [EOL]     final byte MAGIC_BYTE2 = ObjectUtils.CONST_BYTE(127); [EOL]     final char MAGIC_CHAR = ObjectUtils.CONST('a'); [EOL]     final short MAGIC_SHORT1 = ObjectUtils.CONST((short) 123); [EOL]     final short MAGIC_SHORT2 = ObjectUtils.CONST_SHORT(127); [EOL]     final int MAGIC_INT = ObjectUtils.CONST(123); [EOL]     final long MAGIC_LONG1 = ObjectUtils.CONST(123L); [EOL]     final long MAGIC_LONG2 = ObjectUtils.CONST(3); [EOL]     final float MAGIC_FLOAT = ObjectUtils.CONST(1.0f); [EOL]     final double MAGIC_DOUBLE = ObjectUtils.CONST(1.0); [EOL]     final String MAGIC_STRING = ObjectUtils.CONST("abc"); [EOL]     assertTrue(MAGIC_FLAG); [EOL]     assertEquals(127, MAGIC_BYTE1); [EOL]     assertEquals(127, MAGIC_BYTE2); [EOL]     assertEquals('a', MAGIC_CHAR); [EOL]     assertEquals(123, MAGIC_SHORT1); [EOL]     assertEquals(127, MAGIC_SHORT2); [EOL]     assertEquals(123, MAGIC_INT); [EOL]     assertEquals(123, MAGIC_LONG1); [EOL]     assertEquals(3, MAGIC_LONG2); [EOL]     assertEquals(1.0f, MAGIC_FLOAT, 0.0f); [EOL]     assertEquals(1.0, MAGIC_DOUBLE, 0.0); [EOL]     assertEquals("abc", MAGIC_STRING); [EOL]     try { [EOL]         ObjectUtils.CONST_BYTE(-129); [EOL]         fail("CONST_BYTE(-129): IllegalArgumentException should have been thrown."); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         ObjectUtils.CONST_BYTE(128); [EOL]         fail("CONST_BYTE(128): IllegalArgumentException should have been thrown."); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         ObjectUtils.CONST_SHORT(-32769); [EOL]         fail("CONST_SHORT(-32769): IllegalArgumentException should have been thrown."); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         ObjectUtils.CONST_BYTE(32768); [EOL]         fail("CONST_SHORT(32768): IllegalArgumentException should have been thrown."); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL] }
@Test [EOL] public void testConstMethods() { [EOL]     assertTrue("CONST(boolean)", ObjectUtils.CONST(true)); [EOL]     assertEquals("CONST(byte)", (byte) 3, ObjectUtils.CONST((byte) 3)); [EOL]     assertEquals("CONST(char)", (char) 3, ObjectUtils.CONST((char) 3)); [EOL]     assertEquals("CONST(short)", (short) 3, ObjectUtils.CONST((short) 3)); [EOL]     assertEquals("CONST(int)", 3, ObjectUtils.CONST(3)); [EOL]     assertEquals("CONST(long)", 3l, ObjectUtils.CONST(3l)); [EOL]     assertEquals("CONST(float)", 3f, ObjectUtils.CONST(3f), 0); [EOL]     assertEquals("CONST(double)", 3.0, ObjectUtils.CONST(3.0), 0); [EOL]     assertEquals("CONST(Object)", "abc", ObjectUtils.CONST("abc")); [EOL]     final boolean MAGIC_FLAG = ObjectUtils.CONST(true); [EOL]     final byte MAGIC_BYTE1 = ObjectUtils.CONST((byte) 127); [EOL]     final byte MAGIC_BYTE2 = ObjectUtils.CONST_BYTE(127); [EOL]     final char MAGIC_CHAR = ObjectUtils.CONST('a'); [EOL]     final short MAGIC_SHORT1 = ObjectUtils.CONST((short) 123); [EOL]     final short MAGIC_SHORT2 = ObjectUtils.CONST_SHORT(127); [EOL]     final int MAGIC_INT = ObjectUtils.CONST(123); [EOL]     final long MAGIC_LONG1 = ObjectUtils.CONST(123L); [EOL]     final long MAGIC_LONG2 = ObjectUtils.CONST(3); [EOL]     final float MAGIC_FLOAT = ObjectUtils.CONST(1.0f); [EOL]     final double MAGIC_DOUBLE = ObjectUtils.CONST(1.0); [EOL]     final String MAGIC_STRING = ObjectUtils.CONST("abc"); [EOL]     assertTrue(MAGIC_FLAG); [EOL]     assertEquals(127, MAGIC_BYTE1); [EOL]     assertEquals(127, MAGIC_BYTE2); [EOL]     assertEquals('a', MAGIC_CHAR); [EOL]     assertEquals(123, MAGIC_SHORT1); [EOL]     assertEquals(127, MAGIC_SHORT2); [EOL]     assertEquals(123, MAGIC_INT); [EOL]     assertEquals(123, MAGIC_LONG1); [EOL]     assertEquals(3, MAGIC_LONG2); [EOL]     assertEquals(1.0f, MAGIC_FLOAT, 0.0f); [EOL]     assertEquals(1.0, MAGIC_DOUBLE, 0.0); [EOL]     assertEquals("abc", MAGIC_STRING); [EOL]     try { [EOL]         ObjectUtils.CONST_BYTE(-129); [EOL]         fail("CONST_BYTE(-129): IllegalArgumentException should have been thrown."); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         ObjectUtils.CONST_BYTE(128); [EOL]         fail("CONST_BYTE(128): IllegalArgumentException should have been thrown."); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         ObjectUtils.CONST_SHORT(-32769); [EOL]         fail("CONST_SHORT(-32769): IllegalArgumentException should have been thrown."); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         ObjectUtils.CONST_BYTE(32768); [EOL]         fail("CONST_SHORT(32768): IllegalArgumentException should have been thrown."); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL] }
@Test [EOL] public void testConstMethods() { [EOL]     assertTrue("CONST(boolean)", ObjectUtils.CONST(true)); [EOL]     assertEquals("CONST(byte)", (byte) 3, ObjectUtils.CONST((byte) 3)); [EOL]     assertEquals("CONST(char)", (char) 3, ObjectUtils.CONST((char) 3)); [EOL]     assertEquals("CONST(short)", (short) 3, ObjectUtils.CONST((short) 3)); [EOL]     assertEquals("CONST(int)", 3, ObjectUtils.CONST(3)); [EOL]     assertEquals("CONST(long)", 3l, ObjectUtils.CONST(3l)); [EOL]     assertEquals("CONST(float)", 3f, ObjectUtils.CONST(3f), 0); [EOL]     assertEquals("CONST(double)", 3.0, ObjectUtils.CONST(3.0), 0); [EOL]     assertEquals("CONST(Object)", "abc", ObjectUtils.CONST("abc")); [EOL]     final boolean MAGIC_FLAG = ObjectUtils.CONST(true); [EOL]     final byte MAGIC_BYTE1 = ObjectUtils.CONST((byte) 127); [EOL]     final byte MAGIC_BYTE2 = ObjectUtils.CONST_BYTE(127); [EOL]     final char MAGIC_CHAR = ObjectUtils.CONST('a'); [EOL]     final short MAGIC_SHORT1 = ObjectUtils.CONST((short) 123); [EOL]     final short MAGIC_SHORT2 = ObjectUtils.CONST_SHORT(127); [EOL]     final int MAGIC_INT = ObjectUtils.CONST(123); [EOL]     final long MAGIC_LONG1 = ObjectUtils.CONST(123L); [EOL]     final long MAGIC_LONG2 = ObjectUtils.CONST(3); [EOL]     final float MAGIC_FLOAT = ObjectUtils.CONST(1.0f); [EOL]     final double MAGIC_DOUBLE = ObjectUtils.CONST(1.0); [EOL]     final String MAGIC_STRING = ObjectUtils.CONST("abc"); [EOL]     assertTrue(MAGIC_FLAG); [EOL]     assertEquals(127, MAGIC_BYTE1); [EOL]     assertEquals(127, MAGIC_BYTE2); [EOL]     assertEquals('a', MAGIC_CHAR); [EOL]     assertEquals(123, MAGIC_SHORT1); [EOL]     assertEquals(127, MAGIC_SHORT2); [EOL]     assertEquals(123, MAGIC_INT); [EOL]     assertEquals(123, MAGIC_LONG1); [EOL]     assertEquals(3, MAGIC_LONG2); [EOL]     assertEquals(1.0f, MAGIC_FLOAT, 0.0f); [EOL]     assertEquals(1.0, MAGIC_DOUBLE, 0.0); [EOL]     assertEquals("abc", MAGIC_STRING); [EOL]     try { [EOL]         ObjectUtils.CONST_BYTE(-129); [EOL]         fail("CONST_BYTE(-129): IllegalArgumentException should have been thrown."); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         ObjectUtils.CONST_BYTE(128); [EOL]         fail("CONST_BYTE(128): IllegalArgumentException should have been thrown."); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         ObjectUtils.CONST_SHORT(-32769); [EOL]         fail("CONST_SHORT(-32769): IllegalArgumentException should have been thrown."); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         ObjectUtils.CONST_BYTE(32768); [EOL]         fail("CONST_SHORT(32768): IllegalArgumentException should have been thrown."); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL] }
@Test [EOL] public void testConstMethods() { [EOL]     assertTrue("CONST(boolean)", ObjectUtils.CONST(true)); [EOL]     assertEquals("CONST(byte)", (byte) 3, ObjectUtils.CONST((byte) 3)); [EOL]     assertEquals("CONST(char)", (char) 3, ObjectUtils.CONST((char) 3)); [EOL]     assertEquals("CONST(short)", (short) 3, ObjectUtils.CONST((short) 3)); [EOL]     assertEquals("CONST(int)", 3, ObjectUtils.CONST(3)); [EOL]     assertEquals("CONST(long)", 3l, ObjectUtils.CONST(3l)); [EOL]     assertEquals("CONST(float)", 3f, ObjectUtils.CONST(3f), 0); [EOL]     assertEquals("CONST(double)", 3.0, ObjectUtils.CONST(3.0), 0); [EOL]     assertEquals("CONST(Object)", "abc", ObjectUtils.CONST("abc")); [EOL]     final boolean MAGIC_FLAG = ObjectUtils.CONST(true); [EOL]     final byte MAGIC_BYTE1 = ObjectUtils.CONST((byte) 127); [EOL]     final byte MAGIC_BYTE2 = ObjectUtils.CONST_BYTE(127); [EOL]     final char MAGIC_CHAR = ObjectUtils.CONST('a'); [EOL]     final short MAGIC_SHORT1 = ObjectUtils.CONST((short) 123); [EOL]     final short MAGIC_SHORT2 = ObjectUtils.CONST_SHORT(127); [EOL]     final int MAGIC_INT = ObjectUtils.CONST(123); [EOL]     final long MAGIC_LONG1 = ObjectUtils.CONST(123L); [EOL]     final long MAGIC_LONG2 = ObjectUtils.CONST(3); [EOL]     final float MAGIC_FLOAT = ObjectUtils.CONST(1.0f); [EOL]     final double MAGIC_DOUBLE = ObjectUtils.CONST(1.0); [EOL]     final String MAGIC_STRING = ObjectUtils.CONST("abc"); [EOL]     assertTrue(MAGIC_FLAG); [EOL]     assertEquals(127, MAGIC_BYTE1); [EOL]     assertEquals(127, MAGIC_BYTE2); [EOL]     assertEquals('a', MAGIC_CHAR); [EOL]     assertEquals(123, MAGIC_SHORT1); [EOL]     assertEquals(127, MAGIC_SHORT2); [EOL]     assertEquals(123, MAGIC_INT); [EOL]     assertEquals(123, MAGIC_LONG1); [EOL]     assertEquals(3, MAGIC_LONG2); [EOL]     assertEquals(1.0f, MAGIC_FLOAT, 0.0f); [EOL]     assertEquals(1.0, MAGIC_DOUBLE, 0.0); [EOL]     assertEquals("abc", MAGIC_STRING); [EOL]     try { [EOL]         ObjectUtils.CONST_BYTE(-129); [EOL]         fail("CONST_BYTE(-129): IllegalArgumentException should have been thrown."); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         ObjectUtils.CONST_BYTE(128); [EOL]         fail("CONST_BYTE(128): IllegalArgumentException should have been thrown."); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         ObjectUtils.CONST_SHORT(-32769); [EOL]         fail("CONST_SHORT(-32769): IllegalArgumentException should have been thrown."); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         ObjectUtils.CONST_BYTE(32768); [EOL]         fail("CONST_SHORT(32768): IllegalArgumentException should have been thrown."); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL] }
@Test [EOL] public void testConstMethods() { [EOL]     assertTrue("CONST(boolean)", ObjectUtils.CONST(true)); [EOL]     assertEquals("CONST(byte)", (byte) 3, ObjectUtils.CONST((byte) 3)); [EOL]     assertEquals("CONST(char)", (char) 3, ObjectUtils.CONST((char) 3)); [EOL]     assertEquals("CONST(short)", (short) 3, ObjectUtils.CONST((short) 3)); [EOL]     assertEquals("CONST(int)", 3, ObjectUtils.CONST(3)); [EOL]     assertEquals("CONST(long)", 3l, ObjectUtils.CONST(3l)); [EOL]     assertEquals("CONST(float)", 3f, ObjectUtils.CONST(3f), 0); [EOL]     assertEquals("CONST(double)", 3.0, ObjectUtils.CONST(3.0), 0); [EOL]     assertEquals("CONST(Object)", "abc", ObjectUtils.CONST("abc")); [EOL]     final boolean MAGIC_FLAG = ObjectUtils.CONST(true); [EOL]     final byte MAGIC_BYTE1 = ObjectUtils.CONST((byte) 127); [EOL]     final byte MAGIC_BYTE2 = ObjectUtils.CONST_BYTE(127); [EOL]     final char MAGIC_CHAR = ObjectUtils.CONST('a'); [EOL]     final short MAGIC_SHORT1 = ObjectUtils.CONST((short) 123); [EOL]     final short MAGIC_SHORT2 = ObjectUtils.CONST_SHORT(127); [EOL]     final int MAGIC_INT = ObjectUtils.CONST(123); [EOL]     final long MAGIC_LONG1 = ObjectUtils.CONST(123L); [EOL]     final long MAGIC_LONG2 = ObjectUtils.CONST(3); [EOL]     final float MAGIC_FLOAT = ObjectUtils.CONST(1.0f); [EOL]     final double MAGIC_DOUBLE = ObjectUtils.CONST(1.0); [EOL]     final String MAGIC_STRING = ObjectUtils.CONST("abc"); [EOL]     assertTrue(MAGIC_FLAG); [EOL]     assertEquals(127, MAGIC_BYTE1); [EOL]     assertEquals(127, MAGIC_BYTE2); [EOL]     assertEquals('a', MAGIC_CHAR); [EOL]     assertEquals(123, MAGIC_SHORT1); [EOL]     assertEquals(127, MAGIC_SHORT2); [EOL]     assertEquals(123, MAGIC_INT); [EOL]     assertEquals(123, MAGIC_LONG1); [EOL]     assertEquals(3, MAGIC_LONG2); [EOL]     assertEquals(1.0f, MAGIC_FLOAT, 0.0f); [EOL]     assertEquals(1.0, MAGIC_DOUBLE, 0.0); [EOL]     assertEquals("abc", MAGIC_STRING); [EOL]     try { [EOL]         ObjectUtils.CONST_BYTE(-129); [EOL]         fail("CONST_BYTE(-129): IllegalArgumentException should have been thrown."); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         ObjectUtils.CONST_BYTE(128); [EOL]         fail("CONST_BYTE(128): IllegalArgumentException should have been thrown."); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         ObjectUtils.CONST_SHORT(-32769); [EOL]         fail("CONST_SHORT(-32769): IllegalArgumentException should have been thrown."); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         ObjectUtils.CONST_BYTE(32768); [EOL]         fail("CONST_SHORT(32768): IllegalArgumentException should have been thrown."); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL] }
@Test [EOL] public void testConstMethods() { [EOL]     assertTrue("CONST(boolean)", ObjectUtils.CONST(true)); [EOL]     assertEquals("CONST(byte)", (byte) 3, ObjectUtils.CONST((byte) 3)); [EOL]     assertEquals("CONST(char)", (char) 3, ObjectUtils.CONST((char) 3)); [EOL]     assertEquals("CONST(short)", (short) 3, ObjectUtils.CONST((short) 3)); [EOL]     assertEquals("CONST(int)", 3, ObjectUtils.CONST(3)); [EOL]     assertEquals("CONST(long)", 3l, ObjectUtils.CONST(3l)); [EOL]     assertEquals("CONST(float)", 3f, ObjectUtils.CONST(3f), 0); [EOL]     assertEquals("CONST(double)", 3.0, ObjectUtils.CONST(3.0), 0); [EOL]     assertEquals("CONST(Object)", "abc", ObjectUtils.CONST("abc")); [EOL]     final boolean MAGIC_FLAG = ObjectUtils.CONST(true); [EOL]     final byte MAGIC_BYTE1 = ObjectUtils.CONST((byte) 127); [EOL]     final byte MAGIC_BYTE2 = ObjectUtils.CONST_BYTE(127); [EOL]     final char MAGIC_CHAR = ObjectUtils.CONST('a'); [EOL]     final short MAGIC_SHORT1 = ObjectUtils.CONST((short) 123); [EOL]     final short MAGIC_SHORT2 = ObjectUtils.CONST_SHORT(127); [EOL]     final int MAGIC_INT = ObjectUtils.CONST(123); [EOL]     final long MAGIC_LONG1 = ObjectUtils.CONST(123L); [EOL]     final long MAGIC_LONG2 = ObjectUtils.CONST(3); [EOL]     final float MAGIC_FLOAT = ObjectUtils.CONST(1.0f); [EOL]     final double MAGIC_DOUBLE = ObjectUtils.CONST(1.0); [EOL]     final String MAGIC_STRING = ObjectUtils.CONST("abc"); [EOL]     assertTrue(MAGIC_FLAG); [EOL]     assertEquals(127, MAGIC_BYTE1); [EOL]     assertEquals(127, MAGIC_BYTE2); [EOL]     assertEquals('a', MAGIC_CHAR); [EOL]     assertEquals(123, MAGIC_SHORT1); [EOL]     assertEquals(127, MAGIC_SHORT2); [EOL]     assertEquals(123, MAGIC_INT); [EOL]     assertEquals(123, MAGIC_LONG1); [EOL]     assertEquals(3, MAGIC_LONG2); [EOL]     assertEquals(1.0f, MAGIC_FLOAT, 0.0f); [EOL]     assertEquals(1.0, MAGIC_DOUBLE, 0.0); [EOL]     assertEquals("abc", MAGIC_STRING); [EOL]     try { [EOL]         ObjectUtils.CONST_BYTE(-129); [EOL]         fail("CONST_BYTE(-129): IllegalArgumentException should have been thrown."); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         ObjectUtils.CONST_BYTE(128); [EOL]         fail("CONST_BYTE(128): IllegalArgumentException should have been thrown."); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         ObjectUtils.CONST_SHORT(-32769); [EOL]         fail("CONST_SHORT(-32769): IllegalArgumentException should have been thrown."); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         ObjectUtils.CONST_BYTE(32768); [EOL]         fail("CONST_SHORT(32768): IllegalArgumentException should have been thrown."); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL] }
@Test [EOL] public void testConstMethods() { [EOL]     assertTrue("CONST(boolean)", ObjectUtils.CONST(true)); [EOL]     assertEquals("CONST(byte)", (byte) 3, ObjectUtils.CONST((byte) 3)); [EOL]     assertEquals("CONST(char)", (char) 3, ObjectUtils.CONST((char) 3)); [EOL]     assertEquals("CONST(short)", (short) 3, ObjectUtils.CONST((short) 3)); [EOL]     assertEquals("CONST(int)", 3, ObjectUtils.CONST(3)); [EOL]     assertEquals("CONST(long)", 3l, ObjectUtils.CONST(3l)); [EOL]     assertEquals("CONST(float)", 3f, ObjectUtils.CONST(3f), 0); [EOL]     assertEquals("CONST(double)", 3.0, ObjectUtils.CONST(3.0), 0); [EOL]     assertEquals("CONST(Object)", "abc", ObjectUtils.CONST("abc")); [EOL]     final boolean MAGIC_FLAG = ObjectUtils.CONST(true); [EOL]     final byte MAGIC_BYTE1 = ObjectUtils.CONST((byte) 127); [EOL]     final byte MAGIC_BYTE2 = ObjectUtils.CONST_BYTE(127); [EOL]     final char MAGIC_CHAR = ObjectUtils.CONST('a'); [EOL]     final short MAGIC_SHORT1 = ObjectUtils.CONST((short) 123); [EOL]     final short MAGIC_SHORT2 = ObjectUtils.CONST_SHORT(127); [EOL]     final int MAGIC_INT = ObjectUtils.CONST(123); [EOL]     final long MAGIC_LONG1 = ObjectUtils.CONST(123L); [EOL]     final long MAGIC_LONG2 = ObjectUtils.CONST(3); [EOL]     final float MAGIC_FLOAT = ObjectUtils.CONST(1.0f); [EOL]     final double MAGIC_DOUBLE = ObjectUtils.CONST(1.0); [EOL]     final String MAGIC_STRING = ObjectUtils.CONST("abc"); [EOL]     assertTrue(MAGIC_FLAG); [EOL]     assertEquals(127, MAGIC_BYTE1); [EOL]     assertEquals(127, MAGIC_BYTE2); [EOL]     assertEquals('a', MAGIC_CHAR); [EOL]     assertEquals(123, MAGIC_SHORT1); [EOL]     assertEquals(127, MAGIC_SHORT2); [EOL]     assertEquals(123, MAGIC_INT); [EOL]     assertEquals(123, MAGIC_LONG1); [EOL]     assertEquals(3, MAGIC_LONG2); [EOL]     assertEquals(1.0f, MAGIC_FLOAT, 0.0f); [EOL]     assertEquals(1.0, MAGIC_DOUBLE, 0.0); [EOL]     assertEquals("abc", MAGIC_STRING); [EOL]     try { [EOL]         ObjectUtils.CONST_BYTE(-129); [EOL]         fail("CONST_BYTE(-129): IllegalArgumentException should have been thrown."); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         ObjectUtils.CONST_BYTE(128); [EOL]         fail("CONST_BYTE(128): IllegalArgumentException should have been thrown."); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         ObjectUtils.CONST_SHORT(-32769); [EOL]         fail("CONST_SHORT(-32769): IllegalArgumentException should have been thrown."); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         ObjectUtils.CONST_BYTE(32768); [EOL]         fail("CONST_SHORT(32768): IllegalArgumentException should have been thrown."); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL] }
@Test [EOL] public void testConstMethods() { [EOL]     assertTrue("CONST(boolean)", ObjectUtils.CONST(true)); [EOL]     assertEquals("CONST(byte)", (byte) 3, ObjectUtils.CONST((byte) 3)); [EOL]     assertEquals("CONST(char)", (char) 3, ObjectUtils.CONST((char) 3)); [EOL]     assertEquals("CONST(short)", (short) 3, ObjectUtils.CONST((short) 3)); [EOL]     assertEquals("CONST(int)", 3, ObjectUtils.CONST(3)); [EOL]     assertEquals("CONST(long)", 3l, ObjectUtils.CONST(3l)); [EOL]     assertEquals("CONST(float)", 3f, ObjectUtils.CONST(3f), 0); [EOL]     assertEquals("CONST(double)", 3.0, ObjectUtils.CONST(3.0), 0); [EOL]     assertEquals("CONST(Object)", "abc", ObjectUtils.CONST("abc")); [EOL]     final boolean MAGIC_FLAG = ObjectUtils.CONST(true); [EOL]     final byte MAGIC_BYTE1 = ObjectUtils.CONST((byte) 127); [EOL]     final byte MAGIC_BYTE2 = ObjectUtils.CONST_BYTE(127); [EOL]     final char MAGIC_CHAR = ObjectUtils.CONST('a'); [EOL]     final short MAGIC_SHORT1 = ObjectUtils.CONST((short) 123); [EOL]     final short MAGIC_SHORT2 = ObjectUtils.CONST_SHORT(127); [EOL]     final int MAGIC_INT = ObjectUtils.CONST(123); [EOL]     final long MAGIC_LONG1 = ObjectUtils.CONST(123L); [EOL]     final long MAGIC_LONG2 = ObjectUtils.CONST(3); [EOL]     final float MAGIC_FLOAT = ObjectUtils.CONST(1.0f); [EOL]     final double MAGIC_DOUBLE = ObjectUtils.CONST(1.0); [EOL]     final String MAGIC_STRING = ObjectUtils.CONST("abc"); [EOL]     assertTrue(MAGIC_FLAG); [EOL]     assertEquals(127, MAGIC_BYTE1); [EOL]     assertEquals(127, MAGIC_BYTE2); [EOL]     assertEquals('a', MAGIC_CHAR); [EOL]     assertEquals(123, MAGIC_SHORT1); [EOL]     assertEquals(127, MAGIC_SHORT2); [EOL]     assertEquals(123, MAGIC_INT); [EOL]     assertEquals(123, MAGIC_LONG1); [EOL]     assertEquals(3, MAGIC_LONG2); [EOL]     assertEquals(1.0f, MAGIC_FLOAT, 0.0f); [EOL]     assertEquals(1.0, MAGIC_DOUBLE, 0.0); [EOL]     assertEquals("abc", MAGIC_STRING); [EOL]     try { [EOL]         ObjectUtils.CONST_BYTE(-129); [EOL]         fail("CONST_BYTE(-129): IllegalArgumentException should have been thrown."); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         ObjectUtils.CONST_BYTE(128); [EOL]         fail("CONST_BYTE(128): IllegalArgumentException should have been thrown."); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         ObjectUtils.CONST_SHORT(-32769); [EOL]         fail("CONST_SHORT(-32769): IllegalArgumentException should have been thrown."); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         ObjectUtils.CONST_BYTE(32768); [EOL]         fail("CONST_SHORT(32768): IllegalArgumentException should have been thrown."); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL] }
@Test [EOL] public void testConstMethods() { [EOL]     assertTrue("CONST(boolean)", ObjectUtils.CONST(true)); [EOL]     assertEquals("CONST(byte)", (byte) 3, ObjectUtils.CONST((byte) 3)); [EOL]     assertEquals("CONST(char)", (char) 3, ObjectUtils.CONST((char) 3)); [EOL]     assertEquals("CONST(short)", (short) 3, ObjectUtils.CONST((short) 3)); [EOL]     assertEquals("CONST(int)", 3, ObjectUtils.CONST(3)); [EOL]     assertEquals("CONST(long)", 3l, ObjectUtils.CONST(3l)); [EOL]     assertEquals("CONST(float)", 3f, ObjectUtils.CONST(3f), 0); [EOL]     assertEquals("CONST(double)", 3.0, ObjectUtils.CONST(3.0), 0); [EOL]     assertEquals("CONST(Object)", "abc", ObjectUtils.CONST("abc")); [EOL]     final boolean MAGIC_FLAG = ObjectUtils.CONST(true); [EOL]     final byte MAGIC_BYTE1 = ObjectUtils.CONST((byte) 127); [EOL]     final byte MAGIC_BYTE2 = ObjectUtils.CONST_BYTE(127); [EOL]     final char MAGIC_CHAR = ObjectUtils.CONST('a'); [EOL]     final short MAGIC_SHORT1 = ObjectUtils.CONST((short) 123); [EOL]     final short MAGIC_SHORT2 = ObjectUtils.CONST_SHORT(127); [EOL]     final int MAGIC_INT = ObjectUtils.CONST(123); [EOL]     final long MAGIC_LONG1 = ObjectUtils.CONST(123L); [EOL]     final long MAGIC_LONG2 = ObjectUtils.CONST(3); [EOL]     final float MAGIC_FLOAT = ObjectUtils.CONST(1.0f); [EOL]     final double MAGIC_DOUBLE = ObjectUtils.CONST(1.0); [EOL]     final String MAGIC_STRING = ObjectUtils.CONST("abc"); [EOL]     assertTrue(MAGIC_FLAG); [EOL]     assertEquals(127, MAGIC_BYTE1); [EOL]     assertEquals(127, MAGIC_BYTE2); [EOL]     assertEquals('a', MAGIC_CHAR); [EOL]     assertEquals(123, MAGIC_SHORT1); [EOL]     assertEquals(127, MAGIC_SHORT2); [EOL]     assertEquals(123, MAGIC_INT); [EOL]     assertEquals(123, MAGIC_LONG1); [EOL]     assertEquals(3, MAGIC_LONG2); [EOL]     assertEquals(1.0f, MAGIC_FLOAT, 0.0f); [EOL]     assertEquals(1.0, MAGIC_DOUBLE, 0.0); [EOL]     assertEquals("abc", MAGIC_STRING); [EOL]     try { [EOL]         ObjectUtils.CONST_BYTE(-129); [EOL]         fail("CONST_BYTE(-129): IllegalArgumentException should have been thrown."); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         ObjectUtils.CONST_BYTE(128); [EOL]         fail("CONST_BYTE(128): IllegalArgumentException should have been thrown."); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         ObjectUtils.CONST_SHORT(-32769); [EOL]         fail("CONST_SHORT(-32769): IllegalArgumentException should have been thrown."); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         ObjectUtils.CONST_BYTE(32768); [EOL]         fail("CONST_SHORT(32768): IllegalArgumentException should have been thrown."); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL] }
@Test [EOL] public void testConstMethods() { [EOL]     assertTrue("CONST(boolean)", ObjectUtils.CONST(true)); [EOL]     assertEquals("CONST(byte)", (byte) 3, ObjectUtils.CONST((byte) 3)); [EOL]     assertEquals("CONST(char)", (char) 3, ObjectUtils.CONST((char) 3)); [EOL]     assertEquals("CONST(short)", (short) 3, ObjectUtils.CONST((short) 3)); [EOL]     assertEquals("CONST(int)", 3, ObjectUtils.CONST(3)); [EOL]     assertEquals("CONST(long)", 3l, ObjectUtils.CONST(3l)); [EOL]     assertEquals("CONST(float)", 3f, ObjectUtils.CONST(3f), 0); [EOL]     assertEquals("CONST(double)", 3.0, ObjectUtils.CONST(3.0), 0); [EOL]     assertEquals("CONST(Object)", "abc", ObjectUtils.CONST("abc")); [EOL]     final boolean MAGIC_FLAG = ObjectUtils.CONST(true); [EOL]     final byte MAGIC_BYTE1 = ObjectUtils.CONST((byte) 127); [EOL]     final byte MAGIC_BYTE2 = ObjectUtils.CONST_BYTE(127); [EOL]     final char MAGIC_CHAR = ObjectUtils.CONST('a'); [EOL]     final short MAGIC_SHORT1 = ObjectUtils.CONST((short) 123); [EOL]     final short MAGIC_SHORT2 = ObjectUtils.CONST_SHORT(127); [EOL]     final int MAGIC_INT = ObjectUtils.CONST(123); [EOL]     final long MAGIC_LONG1 = ObjectUtils.CONST(123L); [EOL]     final long MAGIC_LONG2 = ObjectUtils.CONST(3); [EOL]     final float MAGIC_FLOAT = ObjectUtils.CONST(1.0f); [EOL]     final double MAGIC_DOUBLE = ObjectUtils.CONST(1.0); [EOL]     final String MAGIC_STRING = ObjectUtils.CONST("abc"); [EOL]     assertTrue(MAGIC_FLAG); [EOL]     assertEquals(127, MAGIC_BYTE1); [EOL]     assertEquals(127, MAGIC_BYTE2); [EOL]     assertEquals('a', MAGIC_CHAR); [EOL]     assertEquals(123, MAGIC_SHORT1); [EOL]     assertEquals(127, MAGIC_SHORT2); [EOL]     assertEquals(123, MAGIC_INT); [EOL]     assertEquals(123, MAGIC_LONG1); [EOL]     assertEquals(3, MAGIC_LONG2); [EOL]     assertEquals(1.0f, MAGIC_FLOAT, 0.0f); [EOL]     assertEquals(1.0, MAGIC_DOUBLE, 0.0); [EOL]     assertEquals("abc", MAGIC_STRING); [EOL]     try { [EOL]         ObjectUtils.CONST_BYTE(-129); [EOL]         fail("CONST_BYTE(-129): IllegalArgumentException should have been thrown."); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         ObjectUtils.CONST_BYTE(128); [EOL]         fail("CONST_BYTE(128): IllegalArgumentException should have been thrown."); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         ObjectUtils.CONST_SHORT(-32769); [EOL]         fail("CONST_SHORT(-32769): IllegalArgumentException should have been thrown."); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         ObjectUtils.CONST_BYTE(32768); [EOL]         fail("CONST_SHORT(32768): IllegalArgumentException should have been thrown."); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL] }
@Test [EOL] public void testConstMethods() { [EOL]     assertTrue("CONST(boolean)", ObjectUtils.CONST(true)); [EOL]     assertEquals("CONST(byte)", (byte) 3, ObjectUtils.CONST((byte) 3)); [EOL]     assertEquals("CONST(char)", (char) 3, ObjectUtils.CONST((char) 3)); [EOL]     assertEquals("CONST(short)", (short) 3, ObjectUtils.CONST((short) 3)); [EOL]     assertEquals("CONST(int)", 3, ObjectUtils.CONST(3)); [EOL]     assertEquals("CONST(long)", 3l, ObjectUtils.CONST(3l)); [EOL]     assertEquals("CONST(float)", 3f, ObjectUtils.CONST(3f), 0); [EOL]     assertEquals("CONST(double)", 3.0, ObjectUtils.CONST(3.0), 0); [EOL]     assertEquals("CONST(Object)", "abc", ObjectUtils.CONST("abc")); [EOL]     final boolean MAGIC_FLAG = ObjectUtils.CONST(true); [EOL]     final byte MAGIC_BYTE1 = ObjectUtils.CONST((byte) 127); [EOL]     final byte MAGIC_BYTE2 = ObjectUtils.CONST_BYTE(127); [EOL]     final char MAGIC_CHAR = ObjectUtils.CONST('a'); [EOL]     final short MAGIC_SHORT1 = ObjectUtils.CONST((short) 123); [EOL]     final short MAGIC_SHORT2 = ObjectUtils.CONST_SHORT(127); [EOL]     final int MAGIC_INT = ObjectUtils.CONST(123); [EOL]     final long MAGIC_LONG1 = ObjectUtils.CONST(123L); [EOL]     final long MAGIC_LONG2 = ObjectUtils.CONST(3); [EOL]     final float MAGIC_FLOAT = ObjectUtils.CONST(1.0f); [EOL]     final double MAGIC_DOUBLE = ObjectUtils.CONST(1.0); [EOL]     final String MAGIC_STRING = ObjectUtils.CONST("abc"); [EOL]     assertTrue(MAGIC_FLAG); [EOL]     assertEquals(127, MAGIC_BYTE1); [EOL]     assertEquals(127, MAGIC_BYTE2); [EOL]     assertEquals('a', MAGIC_CHAR); [EOL]     assertEquals(123, MAGIC_SHORT1); [EOL]     assertEquals(127, MAGIC_SHORT2); [EOL]     assertEquals(123, MAGIC_INT); [EOL]     assertEquals(123, MAGIC_LONG1); [EOL]     assertEquals(3, MAGIC_LONG2); [EOL]     assertEquals(1.0f, MAGIC_FLOAT, 0.0f); [EOL]     assertEquals(1.0, MAGIC_DOUBLE, 0.0); [EOL]     assertEquals("abc", MAGIC_STRING); [EOL]     try { [EOL]         ObjectUtils.CONST_BYTE(-129); [EOL]         fail("CONST_BYTE(-129): IllegalArgumentException should have been thrown."); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         ObjectUtils.CONST_BYTE(128); [EOL]         fail("CONST_BYTE(128): IllegalArgumentException should have been thrown."); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         ObjectUtils.CONST_SHORT(-32769); [EOL]         fail("CONST_SHORT(-32769): IllegalArgumentException should have been thrown."); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         ObjectUtils.CONST_BYTE(32768); [EOL]         fail("CONST_SHORT(32768): IllegalArgumentException should have been thrown."); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL] }
@Test [EOL] public void testConstMethods() { [EOL]     assertTrue("CONST(boolean)", ObjectUtils.CONST(true)); [EOL]     assertEquals("CONST(byte)", (byte) 3, ObjectUtils.CONST((byte) 3)); [EOL]     assertEquals("CONST(char)", (char) 3, ObjectUtils.CONST((char) 3)); [EOL]     assertEquals("CONST(short)", (short) 3, ObjectUtils.CONST((short) 3)); [EOL]     assertEquals("CONST(int)", 3, ObjectUtils.CONST(3)); [EOL]     assertEquals("CONST(long)", 3l, ObjectUtils.CONST(3l)); [EOL]     assertEquals("CONST(float)", 3f, ObjectUtils.CONST(3f), 0); [EOL]     assertEquals("CONST(double)", 3.0, ObjectUtils.CONST(3.0), 0); [EOL]     assertEquals("CONST(Object)", "abc", ObjectUtils.CONST("abc")); [EOL]     final boolean MAGIC_FLAG = ObjectUtils.CONST(true); [EOL]     final byte MAGIC_BYTE1 = ObjectUtils.CONST((byte) 127); [EOL]     final byte MAGIC_BYTE2 = ObjectUtils.CONST_BYTE(127); [EOL]     final char MAGIC_CHAR = ObjectUtils.CONST('a'); [EOL]     final short MAGIC_SHORT1 = ObjectUtils.CONST((short) 123); [EOL]     final short MAGIC_SHORT2 = ObjectUtils.CONST_SHORT(127); [EOL]     final int MAGIC_INT = ObjectUtils.CONST(123); [EOL]     final long MAGIC_LONG1 = ObjectUtils.CONST(123L); [EOL]     final long MAGIC_LONG2 = ObjectUtils.CONST(3); [EOL]     final float MAGIC_FLOAT = ObjectUtils.CONST(1.0f); [EOL]     final double MAGIC_DOUBLE = ObjectUtils.CONST(1.0); [EOL]     final String MAGIC_STRING = ObjectUtils.CONST("abc"); [EOL]     assertTrue(MAGIC_FLAG); [EOL]     assertEquals(127, MAGIC_BYTE1); [EOL]     assertEquals(127, MAGIC_BYTE2); [EOL]     assertEquals('a', MAGIC_CHAR); [EOL]     assertEquals(123, MAGIC_SHORT1); [EOL]     assertEquals(127, MAGIC_SHORT2); [EOL]     assertEquals(123, MAGIC_INT); [EOL]     assertEquals(123, MAGIC_LONG1); [EOL]     assertEquals(3, MAGIC_LONG2); [EOL]     assertEquals(1.0f, MAGIC_FLOAT, 0.0f); [EOL]     assertEquals(1.0, MAGIC_DOUBLE, 0.0); [EOL]     assertEquals("abc", MAGIC_STRING); [EOL]     try { [EOL]         ObjectUtils.CONST_BYTE(-129); [EOL]         fail("CONST_BYTE(-129): IllegalArgumentException should have been thrown."); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         ObjectUtils.CONST_BYTE(128); [EOL]         fail("CONST_BYTE(128): IllegalArgumentException should have been thrown."); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         ObjectUtils.CONST_SHORT(-32769); [EOL]         fail("CONST_SHORT(-32769): IllegalArgumentException should have been thrown."); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         ObjectUtils.CONST_BYTE(32768); [EOL]         fail("CONST_SHORT(32768): IllegalArgumentException should have been thrown."); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL] }
@Test [EOL] public void testConstMethods() { [EOL]     assertTrue("CONST(boolean)", ObjectUtils.CONST(true)); [EOL]     assertEquals("CONST(byte)", (byte) 3, ObjectUtils.CONST((byte) 3)); [EOL]     assertEquals("CONST(char)", (char) 3, ObjectUtils.CONST((char) 3)); [EOL]     assertEquals("CONST(short)", (short) 3, ObjectUtils.CONST((short) 3)); [EOL]     assertEquals("CONST(int)", 3, ObjectUtils.CONST(3)); [EOL]     assertEquals("CONST(long)", 3l, ObjectUtils.CONST(3l)); [EOL]     assertEquals("CONST(float)", 3f, ObjectUtils.CONST(3f), 0); [EOL]     assertEquals("CONST(double)", 3.0, ObjectUtils.CONST(3.0), 0); [EOL]     assertEquals("CONST(Object)", "abc", ObjectUtils.CONST("abc")); [EOL]     final boolean MAGIC_FLAG = ObjectUtils.CONST(true); [EOL]     final byte MAGIC_BYTE1 = ObjectUtils.CONST((byte) 127); [EOL]     final byte MAGIC_BYTE2 = ObjectUtils.CONST_BYTE(127); [EOL]     final char MAGIC_CHAR = ObjectUtils.CONST('a'); [EOL]     final short MAGIC_SHORT1 = ObjectUtils.CONST((short) 123); [EOL]     final short MAGIC_SHORT2 = ObjectUtils.CONST_SHORT(127); [EOL]     final int MAGIC_INT = ObjectUtils.CONST(123); [EOL]     final long MAGIC_LONG1 = ObjectUtils.CONST(123L); [EOL]     final long MAGIC_LONG2 = ObjectUtils.CONST(3); [EOL]     final float MAGIC_FLOAT = ObjectUtils.CONST(1.0f); [EOL]     final double MAGIC_DOUBLE = ObjectUtils.CONST(1.0); [EOL]     final String MAGIC_STRING = ObjectUtils.CONST("abc"); [EOL]     assertTrue(MAGIC_FLAG); [EOL]     assertEquals(127, MAGIC_BYTE1); [EOL]     assertEquals(127, MAGIC_BYTE2); [EOL]     assertEquals('a', MAGIC_CHAR); [EOL]     assertEquals(123, MAGIC_SHORT1); [EOL]     assertEquals(127, MAGIC_SHORT2); [EOL]     assertEquals(123, MAGIC_INT); [EOL]     assertEquals(123, MAGIC_LONG1); [EOL]     assertEquals(3, MAGIC_LONG2); [EOL]     assertEquals(1.0f, MAGIC_FLOAT, 0.0f); [EOL]     assertEquals(1.0, MAGIC_DOUBLE, 0.0); [EOL]     assertEquals("abc", MAGIC_STRING); [EOL]     try { [EOL]         ObjectUtils.CONST_BYTE(-129); [EOL]         fail("CONST_BYTE(-129): IllegalArgumentException should have been thrown."); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         ObjectUtils.CONST_BYTE(128); [EOL]         fail("CONST_BYTE(128): IllegalArgumentException should have been thrown."); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         ObjectUtils.CONST_SHORT(-32769); [EOL]         fail("CONST_SHORT(-32769): IllegalArgumentException should have been thrown."); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL]     try { [EOL]         ObjectUtils.CONST_BYTE(32768); [EOL]         fail("CONST_SHORT(32768): IllegalArgumentException should have been thrown."); [EOL]     } catch (final IllegalArgumentException iae) { [EOL]     } [EOL] }
@Test [EOL] public void testGetConcurrent() throws ConcurrentException, InterruptedException { [EOL]     final ConcurrentInitializer<Object> initializer = createInitializer(); [EOL]     final int threadCount = 20; [EOL]     final CountDownLatch startLatch = new CountDownLatch(1); [EOL]     class GetThread extends Thread { [EOL]  [EOL]         Object object; [EOL]  [EOL]         @Override [EOL]         public void run() { [EOL]             try { [EOL]                 startLatch.await(); [EOL]                 object = initializer.get(); [EOL]             } catch (final InterruptedException iex) { [EOL]             } catch (final ConcurrentException cex) { [EOL]                 object = cex; [EOL]             } [EOL]         } [EOL]     } [EOL]     final GetThread[] threads = new GetThread[threadCount]; [EOL]     for (int i = 0; i < threadCount; i++) { [EOL]         threads[i] = new GetThread(); [EOL]         threads[i].start(); [EOL]     } [EOL]     startLatch.countDown(); [EOL]     for (final Thread t : threads) { [EOL]         t.join(); [EOL]     } [EOL]     final Object managedObject = initializer.get(); [EOL]     for (final GetThread t : threads) { [EOL]         assertEquals("Wrong object", managedObject, t.object); [EOL]     } [EOL] }
@Test [EOL] public void testGetConcurrent() throws ConcurrentException, InterruptedException { [EOL]     final ConcurrentInitializer<Object> initializer = createInitializer(); [EOL]     final int threadCount = 20; [EOL]     final CountDownLatch startLatch = new CountDownLatch(1); [EOL]     class GetThread extends Thread { [EOL]  [EOL]         Object object; [EOL]  [EOL]         @Override [EOL]         public void run() { [EOL]             try { [EOL]                 startLatch.await(); [EOL]                 object = initializer.get(); [EOL]             } catch (final InterruptedException iex) { [EOL]             } catch (final ConcurrentException cex) { [EOL]                 object = cex; [EOL]             } [EOL]         } [EOL]     } [EOL]     final GetThread[] threads = new GetThread[threadCount]; [EOL]     for (int i = 0; i < threadCount; i++) { [EOL]         threads[i] = new GetThread(); [EOL]         threads[i].start(); [EOL]     } [EOL]     startLatch.countDown(); [EOL]     for (final Thread t : threads) { [EOL]         t.join(); [EOL]     } [EOL]     final Object managedObject = initializer.get(); [EOL]     for (final GetThread t : threads) { [EOL]         assertEquals("Wrong object", managedObject, t.object); [EOL]     } [EOL] }
@Test [EOL] public void testConstructor() { [EOL]     assertNotNull(new Validate()); [EOL]     final Constructor<?>[] cons = Validate.class.getDeclaredConstructors(); [EOL]     assertEquals(1, cons.length); [EOL]     assertTrue(Modifier.isPublic(cons[0].getModifiers())); [EOL]     assertTrue(Modifier.isPublic(Validate.class.getModifiers())); [EOL]     assertFalse(Modifier.isFinal(Validate.class.getModifiers())); [EOL] }
@Test [EOL] public void testIsTrue5() { [EOL]     Validate.isTrue(true, "MSG", 7.4d); [EOL]     try { [EOL]         Validate.isTrue(false, "MSG", 7.4d); [EOL]         fail("Expecting IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]         assertEquals("MSG", ex.getMessage()); [EOL]     } [EOL] }
@Test [EOL] public void testIsTrue5() { [EOL]     Validate.isTrue(true, "MSG", 7.4d); [EOL]     try { [EOL]         Validate.isTrue(false, "MSG", 7.4d); [EOL]         fail("Expecting IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]         assertEquals("MSG", ex.getMessage()); [EOL]     } [EOL] }
@Test [EOL] public void testNotEmptyArray1() { [EOL]     Validate.notEmpty(new Object[] { null }); [EOL]     try { [EOL]         Validate.notEmpty((Object[]) null); [EOL]         fail("Expecting NullPointerException"); [EOL]     } catch (final NullPointerException ex) { [EOL]         assertEquals("The validated array is empty", ex.getMessage()); [EOL]     } [EOL]     try { [EOL]         Validate.notEmpty(new Object[0]); [EOL]         fail("Expecting IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]         assertEquals("The validated array is empty", ex.getMessage()); [EOL]     } [EOL]     final String[] array = new String[] { "hi" }; [EOL]     final String[] test = Validate.notEmpty(array); [EOL]     assertSame(array, test); [EOL] }
@Test [EOL] public void testNotEmptyArray1() { [EOL]     Validate.notEmpty(new Object[] { null }); [EOL]     try { [EOL]         Validate.notEmpty((Object[]) null); [EOL]         fail("Expecting NullPointerException"); [EOL]     } catch (final NullPointerException ex) { [EOL]         assertEquals("The validated array is empty", ex.getMessage()); [EOL]     } [EOL]     try { [EOL]         Validate.notEmpty(new Object[0]); [EOL]         fail("Expecting IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]         assertEquals("The validated array is empty", ex.getMessage()); [EOL]     } [EOL]     final String[] array = new String[] { "hi" }; [EOL]     final String[] test = Validate.notEmpty(array); [EOL]     assertSame(array, test); [EOL] }
@Test [EOL] public void testNotEmptyArray1() { [EOL]     Validate.notEmpty(new Object[] { null }); [EOL]     try { [EOL]         Validate.notEmpty((Object[]) null); [EOL]         fail("Expecting NullPointerException"); [EOL]     } catch (final NullPointerException ex) { [EOL]         assertEquals("The validated array is empty", ex.getMessage()); [EOL]     } [EOL]     try { [EOL]         Validate.notEmpty(new Object[0]); [EOL]         fail("Expecting IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]         assertEquals("The validated array is empty", ex.getMessage()); [EOL]     } [EOL]     final String[] array = new String[] { "hi" }; [EOL]     final String[] test = Validate.notEmpty(array); [EOL]     assertSame(array, test); [EOL] }
@Test [EOL] public void testNotEmptyArray1() { [EOL]     Validate.notEmpty(new Object[] { null }); [EOL]     try { [EOL]         Validate.notEmpty((Object[]) null); [EOL]         fail("Expecting NullPointerException"); [EOL]     } catch (final NullPointerException ex) { [EOL]         assertEquals("The validated array is empty", ex.getMessage()); [EOL]     } [EOL]     try { [EOL]         Validate.notEmpty(new Object[0]); [EOL]         fail("Expecting IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]         assertEquals("The validated array is empty", ex.getMessage()); [EOL]     } [EOL]     final String[] array = new String[] { "hi" }; [EOL]     final String[] test = Validate.notEmpty(array); [EOL]     assertSame(array, test); [EOL] }
@Test [EOL] public void testNotEmptyArray1() { [EOL]     Validate.notEmpty(new Object[] { null }); [EOL]     try { [EOL]         Validate.notEmpty((Object[]) null); [EOL]         fail("Expecting NullPointerException"); [EOL]     } catch (final NullPointerException ex) { [EOL]         assertEquals("The validated array is empty", ex.getMessage()); [EOL]     } [EOL]     try { [EOL]         Validate.notEmpty(new Object[0]); [EOL]         fail("Expecting IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]         assertEquals("The validated array is empty", ex.getMessage()); [EOL]     } [EOL]     final String[] array = new String[] { "hi" }; [EOL]     final String[] test = Validate.notEmpty(array); [EOL]     assertSame(array, test); [EOL] }
@Test [EOL] public void testNotEmptyArray1() { [EOL]     Validate.notEmpty(new Object[] { null }); [EOL]     try { [EOL]         Validate.notEmpty((Object[]) null); [EOL]         fail("Expecting NullPointerException"); [EOL]     } catch (final NullPointerException ex) { [EOL]         assertEquals("The validated array is empty", ex.getMessage()); [EOL]     } [EOL]     try { [EOL]         Validate.notEmpty(new Object[0]); [EOL]         fail("Expecting IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]         assertEquals("The validated array is empty", ex.getMessage()); [EOL]     } [EOL]     final String[] array = new String[] { "hi" }; [EOL]     final String[] test = Validate.notEmpty(array); [EOL]     assertSame(array, test); [EOL] }
@Test [EOL] public void testNotEmptyString2() { [EOL]     Validate.notEmpty("a", "MSG"); [EOL]     try { [EOL]         Validate.notEmpty((String) null, "MSG"); [EOL]         fail("Expecting NullPointerException"); [EOL]     } catch (final NullPointerException ex) { [EOL]         assertEquals("MSG", ex.getMessage()); [EOL]     } [EOL]     try { [EOL]         Validate.notEmpty("", "MSG"); [EOL]         fail("Expecting IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]         assertEquals("MSG", ex.getMessage()); [EOL]     } [EOL]     final String str = "Hi"; [EOL]     final String testStr = Validate.notEmpty(str, "Message"); [EOL]     assertSame(str, testStr); [EOL] }
@Test [EOL] public void testNotEmptyString2() { [EOL]     Validate.notEmpty("a", "MSG"); [EOL]     try { [EOL]         Validate.notEmpty((String) null, "MSG"); [EOL]         fail("Expecting NullPointerException"); [EOL]     } catch (final NullPointerException ex) { [EOL]         assertEquals("MSG", ex.getMessage()); [EOL]     } [EOL]     try { [EOL]         Validate.notEmpty("", "MSG"); [EOL]         fail("Expecting IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException ex) { [EOL]         assertEquals("MSG", ex.getMessage()); [EOL]     } [EOL]     final String str = "Hi"; [EOL]     final String testStr = Validate.notEmpty(str, "Message"); [EOL]     assertSame(str, testStr); [EOL] }
@Test [EOL] public void testValidIndex_charSequence() { [EOL]     final CharSequence str = "Hi"; [EOL]     Validate.validIndex(str, 0); [EOL]     Validate.validIndex(str, 1); [EOL]     try { [EOL]         Validate.validIndex(str, -1); [EOL]         fail("Expecting IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException ex) { [EOL]         assertEquals("The validated character sequence index is invalid: -1", ex.getMessage()); [EOL]     } [EOL]     try { [EOL]         Validate.validIndex(str, 2); [EOL]         fail("Expecting IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException ex) { [EOL]         assertEquals("The validated character sequence index is invalid: 2", ex.getMessage()); [EOL]     } [EOL]     final String input = "Hi"; [EOL]     final String test = Validate.validIndex(input, 0); [EOL]     assertSame(input, test); [EOL] }
@Test [EOL] public void testValidIndex_charSequence() { [EOL]     final CharSequence str = "Hi"; [EOL]     Validate.validIndex(str, 0); [EOL]     Validate.validIndex(str, 1); [EOL]     try { [EOL]         Validate.validIndex(str, -1); [EOL]         fail("Expecting IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException ex) { [EOL]         assertEquals("The validated character sequence index is invalid: -1", ex.getMessage()); [EOL]     } [EOL]     try { [EOL]         Validate.validIndex(str, 2); [EOL]         fail("Expecting IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException ex) { [EOL]         assertEquals("The validated character sequence index is invalid: 2", ex.getMessage()); [EOL]     } [EOL]     final String input = "Hi"; [EOL]     final String test = Validate.validIndex(input, 0); [EOL]     assertSame(input, test); [EOL] }
@Test [EOL] public void testValidIndex_charSequence() { [EOL]     final CharSequence str = "Hi"; [EOL]     Validate.validIndex(str, 0); [EOL]     Validate.validIndex(str, 1); [EOL]     try { [EOL]         Validate.validIndex(str, -1); [EOL]         fail("Expecting IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException ex) { [EOL]         assertEquals("The validated character sequence index is invalid: -1", ex.getMessage()); [EOL]     } [EOL]     try { [EOL]         Validate.validIndex(str, 2); [EOL]         fail("Expecting IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException ex) { [EOL]         assertEquals("The validated character sequence index is invalid: 2", ex.getMessage()); [EOL]     } [EOL]     final String input = "Hi"; [EOL]     final String test = Validate.validIndex(input, 0); [EOL]     assertSame(input, test); [EOL] }
@Test [EOL] public void testValidIndex_charSequence() { [EOL]     final CharSequence str = "Hi"; [EOL]     Validate.validIndex(str, 0); [EOL]     Validate.validIndex(str, 1); [EOL]     try { [EOL]         Validate.validIndex(str, -1); [EOL]         fail("Expecting IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException ex) { [EOL]         assertEquals("The validated character sequence index is invalid: -1", ex.getMessage()); [EOL]     } [EOL]     try { [EOL]         Validate.validIndex(str, 2); [EOL]         fail("Expecting IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException ex) { [EOL]         assertEquals("The validated character sequence index is invalid: 2", ex.getMessage()); [EOL]     } [EOL]     final String input = "Hi"; [EOL]     final String test = Validate.validIndex(input, 0); [EOL]     assertSame(input, test); [EOL] }
@Test [EOL] public void testValidIndex_charSequence() { [EOL]     final CharSequence str = "Hi"; [EOL]     Validate.validIndex(str, 0); [EOL]     Validate.validIndex(str, 1); [EOL]     try { [EOL]         Validate.validIndex(str, -1); [EOL]         fail("Expecting IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException ex) { [EOL]         assertEquals("The validated character sequence index is invalid: -1", ex.getMessage()); [EOL]     } [EOL]     try { [EOL]         Validate.validIndex(str, 2); [EOL]         fail("Expecting IndexOutOfBoundsException"); [EOL]     } catch (final IndexOutOfBoundsException ex) { [EOL]         assertEquals("The validated character sequence index is invalid: 2", ex.getMessage()); [EOL]     } [EOL]     final String input = "Hi"; [EOL]     final String test = Validate.validIndex(input, 0); [EOL]     assertSame(input, test); [EOL] }
@Test [EOL] public void testExclusiveBetween() { [EOL]     Validate.exclusiveBetween("a", "c", "b"); [EOL]     Validate.exclusiveBetween(0, 2, 1); [EOL]     try { [EOL]         Validate.exclusiveBetween(0, 5, 6); [EOL]         fail("Expecting IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]         assertEquals("The value 6 is not in the specified exclusive range of 0 to 5", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         Validate.exclusiveBetween(0, 5, 5); [EOL]         fail("Expecting IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]         assertEquals("The value 5 is not in the specified exclusive range of 0 to 5", e.getMessage()); [EOL]     } [EOL] }
@Test [EOL] public void testExclusiveBetween() { [EOL]     Validate.exclusiveBetween("a", "c", "b"); [EOL]     Validate.exclusiveBetween(0, 2, 1); [EOL]     try { [EOL]         Validate.exclusiveBetween(0, 5, 6); [EOL]         fail("Expecting IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]         assertEquals("The value 6 is not in the specified exclusive range of 0 to 5", e.getMessage()); [EOL]     } [EOL]     try { [EOL]         Validate.exclusiveBetween(0, 5, 5); [EOL]         fail("Expecting IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]         assertEquals("The value 5 is not in the specified exclusive range of 0 to 5", e.getMessage()); [EOL]     } [EOL] }
@Test [EOL] public void testIsAssignableExceptionMessage() { [EOL]     try { [EOL]         Validate.isAssignableFrom(List.class, String.class); [EOL]         fail("Expecting IllegalArgumentException"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]         assertEquals("Cannot assign a java.lang.String to a java.util.List", e.getMessage()); [EOL]     } [EOL] }
@Test [EOL] public void testSqueeze_StringString() { [EOL]     assertEquals(null, CharSetUtils.squeeze(null, (String) null)); [EOL]     assertEquals(null, CharSetUtils.squeeze(null, "")); [EOL]     assertEquals("", CharSetUtils.squeeze("", (String) null)); [EOL]     assertEquals("", CharSetUtils.squeeze("", "")); [EOL]     assertEquals("", CharSetUtils.squeeze("", "a-e")); [EOL]     assertEquals("hello", CharSetUtils.squeeze("hello", (String) null)); [EOL]     assertEquals("hello", CharSetUtils.squeeze("hello", "")); [EOL]     assertEquals("hello", CharSetUtils.squeeze("hello", "a-e")); [EOL]     assertEquals("helo", CharSetUtils.squeeze("hello", "l-p")); [EOL]     assertEquals("heloo", CharSetUtils.squeeze("helloo", "l")); [EOL]     assertEquals("hello", CharSetUtils.squeeze("helloo", "^l")); [EOL] }
@Test [EOL] public void testPrintRootCauseStackTrace_Throwable() throws Exception { [EOL]     ExceptionUtils.printRootCauseStackTrace(null); [EOL] }
@Test [EOL] public void test_getMessage_Throwable() { [EOL]     Throwable th = null; [EOL]     assertEquals("", ExceptionUtils.getMessage(th)); [EOL]     th = new IllegalArgumentException("Base"); [EOL]     assertEquals("IllegalArgumentException: Base", ExceptionUtils.getMessage(th)); [EOL]     th = new ExceptionWithCause("Wrapper", th); [EOL]     assertEquals("ExceptionUtilsTest.ExceptionWithCause: Wrapper", ExceptionUtils.getMessage(th)); [EOL] }
@Test [EOL] public void test_getMessage_Throwable() { [EOL]     Throwable th = null; [EOL]     assertEquals("", ExceptionUtils.getMessage(th)); [EOL]     th = new IllegalArgumentException("Base"); [EOL]     assertEquals("IllegalArgumentException: Base", ExceptionUtils.getMessage(th)); [EOL]     th = new ExceptionWithCause("Wrapper", th); [EOL]     assertEquals("ExceptionUtilsTest.ExceptionWithCause: Wrapper", ExceptionUtils.getMessage(th)); [EOL] }
@Test [EOL] public void test_getMessage_Throwable() { [EOL]     Throwable th = null; [EOL]     assertEquals("", ExceptionUtils.getMessage(th)); [EOL]     th = new IllegalArgumentException("Base"); [EOL]     assertEquals("IllegalArgumentException: Base", ExceptionUtils.getMessage(th)); [EOL]     th = new ExceptionWithCause("Wrapper", th); [EOL]     assertEquals("ExceptionUtilsTest.ExceptionWithCause: Wrapper", ExceptionUtils.getMessage(th)); [EOL] }
@Test [EOL] public void test_getRootCauseMessage_Throwable() { [EOL]     Throwable th = null; [EOL]     assertEquals("", ExceptionUtils.getRootCauseMessage(th)); [EOL]     th = new IllegalArgumentException("Base"); [EOL]     assertEquals("IllegalArgumentException: Base", ExceptionUtils.getRootCauseMessage(th)); [EOL]     th = new ExceptionWithCause("Wrapper", th); [EOL]     assertEquals("IllegalArgumentException: Base", ExceptionUtils.getRootCauseMessage(th)); [EOL] }
@Test [EOL] public void test_getRootCauseMessage_Throwable() { [EOL]     Throwable th = null; [EOL]     assertEquals("", ExceptionUtils.getRootCauseMessage(th)); [EOL]     th = new IllegalArgumentException("Base"); [EOL]     assertEquals("IllegalArgumentException: Base", ExceptionUtils.getRootCauseMessage(th)); [EOL]     th = new ExceptionWithCause("Wrapper", th); [EOL]     assertEquals("IllegalArgumentException: Base", ExceptionUtils.getRootCauseMessage(th)); [EOL] }
@Test [EOL] public void test_getRootCauseMessage_Throwable() { [EOL]     Throwable th = null; [EOL]     assertEquals("", ExceptionUtils.getRootCauseMessage(th)); [EOL]     th = new IllegalArgumentException("Base"); [EOL]     assertEquals("IllegalArgumentException: Base", ExceptionUtils.getRootCauseMessage(th)); [EOL]     th = new ExceptionWithCause("Wrapper", th); [EOL]     assertEquals("IllegalArgumentException: Base", ExceptionUtils.getRootCauseMessage(th)); [EOL] }
@Test [EOL] public void testGetSet() { [EOL]     final MutableShort mutNum = new MutableShort((short) 0); [EOL]     assertEquals((short) 0, new MutableShort().shortValue()); [EOL]     assertEquals(Short.valueOf((short) 0), new MutableShort().getValue()); [EOL]     mutNum.setValue((short) 1); [EOL]     assertEquals((short) 1, mutNum.shortValue()); [EOL]     assertEquals(Short.valueOf((short) 1), mutNum.getValue()); [EOL]     mutNum.setValue(Short.valueOf((short) 2)); [EOL]     assertEquals((short) 2, mutNum.shortValue()); [EOL]     assertEquals(Short.valueOf((short) 2), mutNum.getValue()); [EOL]     mutNum.setValue(new MutableShort((short) 3)); [EOL]     assertEquals((short) 3, mutNum.shortValue()); [EOL]     assertEquals(Short.valueOf((short) 3), mutNum.getValue()); [EOL]     try { [EOL]         mutNum.setValue(null); [EOL]         fail(); [EOL]     } catch (final NullPointerException ex) { [EOL]     } [EOL] }
@Test [EOL] public void testGetSet() { [EOL]     final MutableShort mutNum = new MutableShort((short) 0); [EOL]     assertEquals((short) 0, new MutableShort().shortValue()); [EOL]     assertEquals(Short.valueOf((short) 0), new MutableShort().getValue()); [EOL]     mutNum.setValue((short) 1); [EOL]     assertEquals((short) 1, mutNum.shortValue()); [EOL]     assertEquals(Short.valueOf((short) 1), mutNum.getValue()); [EOL]     mutNum.setValue(Short.valueOf((short) 2)); [EOL]     assertEquals((short) 2, mutNum.shortValue()); [EOL]     assertEquals(Short.valueOf((short) 2), mutNum.getValue()); [EOL]     mutNum.setValue(new MutableShort((short) 3)); [EOL]     assertEquals((short) 3, mutNum.shortValue()); [EOL]     assertEquals(Short.valueOf((short) 3), mutNum.getValue()); [EOL]     try { [EOL]         mutNum.setValue(null); [EOL]         fail(); [EOL]     } catch (final NullPointerException ex) { [EOL]     } [EOL] }
@Test [EOL] public void testGetSet() { [EOL]     final MutableShort mutNum = new MutableShort((short) 0); [EOL]     assertEquals((short) 0, new MutableShort().shortValue()); [EOL]     assertEquals(Short.valueOf((short) 0), new MutableShort().getValue()); [EOL]     mutNum.setValue((short) 1); [EOL]     assertEquals((short) 1, mutNum.shortValue()); [EOL]     assertEquals(Short.valueOf((short) 1), mutNum.getValue()); [EOL]     mutNum.setValue(Short.valueOf((short) 2)); [EOL]     assertEquals((short) 2, mutNum.shortValue()); [EOL]     assertEquals(Short.valueOf((short) 2), mutNum.getValue()); [EOL]     mutNum.setValue(new MutableShort((short) 3)); [EOL]     assertEquals((short) 3, mutNum.shortValue()); [EOL]     assertEquals(Short.valueOf((short) 3), mutNum.getValue()); [EOL]     try { [EOL]         mutNum.setValue(null); [EOL]         fail(); [EOL]     } catch (final NullPointerException ex) { [EOL]     } [EOL] }
@Test [EOL] public void testGetSet() { [EOL]     final MutableShort mutNum = new MutableShort((short) 0); [EOL]     assertEquals((short) 0, new MutableShort().shortValue()); [EOL]     assertEquals(Short.valueOf((short) 0), new MutableShort().getValue()); [EOL]     mutNum.setValue((short) 1); [EOL]     assertEquals((short) 1, mutNum.shortValue()); [EOL]     assertEquals(Short.valueOf((short) 1), mutNum.getValue()); [EOL]     mutNum.setValue(Short.valueOf((short) 2)); [EOL]     assertEquals((short) 2, mutNum.shortValue()); [EOL]     assertEquals(Short.valueOf((short) 2), mutNum.getValue()); [EOL]     mutNum.setValue(new MutableShort((short) 3)); [EOL]     assertEquals((short) 3, mutNum.shortValue()); [EOL]     assertEquals(Short.valueOf((short) 3), mutNum.getValue()); [EOL]     try { [EOL]         mutNum.setValue(null); [EOL]         fail(); [EOL]     } catch (final NullPointerException ex) { [EOL]     } [EOL] }
@Test [EOL] public void testGetSet() { [EOL]     final MutableShort mutNum = new MutableShort((short) 0); [EOL]     assertEquals((short) 0, new MutableShort().shortValue()); [EOL]     assertEquals(Short.valueOf((short) 0), new MutableShort().getValue()); [EOL]     mutNum.setValue((short) 1); [EOL]     assertEquals((short) 1, mutNum.shortValue()); [EOL]     assertEquals(Short.valueOf((short) 1), mutNum.getValue()); [EOL]     mutNum.setValue(Short.valueOf((short) 2)); [EOL]     assertEquals((short) 2, mutNum.shortValue()); [EOL]     assertEquals(Short.valueOf((short) 2), mutNum.getValue()); [EOL]     mutNum.setValue(new MutableShort((short) 3)); [EOL]     assertEquals((short) 3, mutNum.shortValue()); [EOL]     assertEquals(Short.valueOf((short) 3), mutNum.getValue()); [EOL]     try { [EOL]         mutNum.setValue(null); [EOL]         fail(); [EOL]     } catch (final NullPointerException ex) { [EOL]     } [EOL] }
@Test [EOL] public void testGetSet() { [EOL]     final MutableShort mutNum = new MutableShort((short) 0); [EOL]     assertEquals((short) 0, new MutableShort().shortValue()); [EOL]     assertEquals(Short.valueOf((short) 0), new MutableShort().getValue()); [EOL]     mutNum.setValue((short) 1); [EOL]     assertEquals((short) 1, mutNum.shortValue()); [EOL]     assertEquals(Short.valueOf((short) 1), mutNum.getValue()); [EOL]     mutNum.setValue(Short.valueOf((short) 2)); [EOL]     assertEquals((short) 2, mutNum.shortValue()); [EOL]     assertEquals(Short.valueOf((short) 2), mutNum.getValue()); [EOL]     mutNum.setValue(new MutableShort((short) 3)); [EOL]     assertEquals((short) 3, mutNum.shortValue()); [EOL]     assertEquals(Short.valueOf((short) 3), mutNum.getValue()); [EOL]     try { [EOL]         mutNum.setValue(null); [EOL]         fail(); [EOL]     } catch (final NullPointerException ex) { [EOL]     } [EOL] }
@Test [EOL] public void testGetSet() { [EOL]     final MutableShort mutNum = new MutableShort((short) 0); [EOL]     assertEquals((short) 0, new MutableShort().shortValue()); [EOL]     assertEquals(Short.valueOf((short) 0), new MutableShort().getValue()); [EOL]     mutNum.setValue((short) 1); [EOL]     assertEquals((short) 1, mutNum.shortValue()); [EOL]     assertEquals(Short.valueOf((short) 1), mutNum.getValue()); [EOL]     mutNum.setValue(Short.valueOf((short) 2)); [EOL]     assertEquals((short) 2, mutNum.shortValue()); [EOL]     assertEquals(Short.valueOf((short) 2), mutNum.getValue()); [EOL]     mutNum.setValue(new MutableShort((short) 3)); [EOL]     assertEquals((short) 3, mutNum.shortValue()); [EOL]     assertEquals(Short.valueOf((short) 3), mutNum.getValue()); [EOL]     try { [EOL]         mutNum.setValue(null); [EOL]         fail(); [EOL]     } catch (final NullPointerException ex) { [EOL]     } [EOL] }
@Test [EOL] public void testGetSet() { [EOL]     final MutableShort mutNum = new MutableShort((short) 0); [EOL]     assertEquals((short) 0, new MutableShort().shortValue()); [EOL]     assertEquals(Short.valueOf((short) 0), new MutableShort().getValue()); [EOL]     mutNum.setValue((short) 1); [EOL]     assertEquals((short) 1, mutNum.shortValue()); [EOL]     assertEquals(Short.valueOf((short) 1), mutNum.getValue()); [EOL]     mutNum.setValue(Short.valueOf((short) 2)); [EOL]     assertEquals((short) 2, mutNum.shortValue()); [EOL]     assertEquals(Short.valueOf((short) 2), mutNum.getValue()); [EOL]     mutNum.setValue(new MutableShort((short) 3)); [EOL]     assertEquals((short) 3, mutNum.shortValue()); [EOL]     assertEquals(Short.valueOf((short) 3), mutNum.getValue()); [EOL]     try { [EOL]         mutNum.setValue(null); [EOL]         fail(); [EOL]     } catch (final NullPointerException ex) { [EOL]     } [EOL] }
@Test [EOL] public void testGetSet() { [EOL]     final MutableShort mutNum = new MutableShort((short) 0); [EOL]     assertEquals((short) 0, new MutableShort().shortValue()); [EOL]     assertEquals(Short.valueOf((short) 0), new MutableShort().getValue()); [EOL]     mutNum.setValue((short) 1); [EOL]     assertEquals((short) 1, mutNum.shortValue()); [EOL]     assertEquals(Short.valueOf((short) 1), mutNum.getValue()); [EOL]     mutNum.setValue(Short.valueOf((short) 2)); [EOL]     assertEquals((short) 2, mutNum.shortValue()); [EOL]     assertEquals(Short.valueOf((short) 2), mutNum.getValue()); [EOL]     mutNum.setValue(new MutableShort((short) 3)); [EOL]     assertEquals((short) 3, mutNum.shortValue()); [EOL]     assertEquals(Short.valueOf((short) 3), mutNum.getValue()); [EOL]     try { [EOL]         mutNum.setValue(null); [EOL]         fail(); [EOL]     } catch (final NullPointerException ex) { [EOL]     } [EOL] }
@Test [EOL] public void testGetSet() { [EOL]     final MutableShort mutNum = new MutableShort((short) 0); [EOL]     assertEquals((short) 0, new MutableShort().shortValue()); [EOL]     assertEquals(Short.valueOf((short) 0), new MutableShort().getValue()); [EOL]     mutNum.setValue((short) 1); [EOL]     assertEquals((short) 1, mutNum.shortValue()); [EOL]     assertEquals(Short.valueOf((short) 1), mutNum.getValue()); [EOL]     mutNum.setValue(Short.valueOf((short) 2)); [EOL]     assertEquals((short) 2, mutNum.shortValue()); [EOL]     assertEquals(Short.valueOf((short) 2), mutNum.getValue()); [EOL]     mutNum.setValue(new MutableShort((short) 3)); [EOL]     assertEquals((short) 3, mutNum.shortValue()); [EOL]     assertEquals(Short.valueOf((short) 3), mutNum.getValue()); [EOL]     try { [EOL]         mutNum.setValue(null); [EOL]         fail(); [EOL]     } catch (final NullPointerException ex) { [EOL]     } [EOL] }
@Test [EOL] public void testEquals() { [EOL]     final MutableShort mutNumA = new MutableShort((short) 0); [EOL]     final MutableShort mutNumB = new MutableShort((short) 0); [EOL]     final MutableShort mutNumC = new MutableShort((short) 1); [EOL]     assertTrue(mutNumA.equals(mutNumA)); [EOL]     assertTrue(mutNumA.equals(mutNumB)); [EOL]     assertTrue(mutNumB.equals(mutNumA)); [EOL]     assertTrue(mutNumB.equals(mutNumB)); [EOL]     assertFalse(mutNumA.equals(mutNumC)); [EOL]     assertFalse(mutNumB.equals(mutNumC)); [EOL]     assertTrue(mutNumC.equals(mutNumC)); [EOL]     assertFalse(mutNumA.equals(null)); [EOL]     assertFalse(mutNumA.equals(Short.valueOf((short) 0))); [EOL]     assertFalse(mutNumA.equals("0")); [EOL] }
@Test [EOL] public void testEquals() { [EOL]     final MutableShort mutNumA = new MutableShort((short) 0); [EOL]     final MutableShort mutNumB = new MutableShort((short) 0); [EOL]     final MutableShort mutNumC = new MutableShort((short) 1); [EOL]     assertTrue(mutNumA.equals(mutNumA)); [EOL]     assertTrue(mutNumA.equals(mutNumB)); [EOL]     assertTrue(mutNumB.equals(mutNumA)); [EOL]     assertTrue(mutNumB.equals(mutNumB)); [EOL]     assertFalse(mutNumA.equals(mutNumC)); [EOL]     assertFalse(mutNumB.equals(mutNumC)); [EOL]     assertTrue(mutNumC.equals(mutNumC)); [EOL]     assertFalse(mutNumA.equals(null)); [EOL]     assertFalse(mutNumA.equals(Short.valueOf((short) 0))); [EOL]     assertFalse(mutNumA.equals("0")); [EOL] }
@Test [EOL] public void testEquals() { [EOL]     final MutableShort mutNumA = new MutableShort((short) 0); [EOL]     final MutableShort mutNumB = new MutableShort((short) 0); [EOL]     final MutableShort mutNumC = new MutableShort((short) 1); [EOL]     assertTrue(mutNumA.equals(mutNumA)); [EOL]     assertTrue(mutNumA.equals(mutNumB)); [EOL]     assertTrue(mutNumB.equals(mutNumA)); [EOL]     assertTrue(mutNumB.equals(mutNumB)); [EOL]     assertFalse(mutNumA.equals(mutNumC)); [EOL]     assertFalse(mutNumB.equals(mutNumC)); [EOL]     assertTrue(mutNumC.equals(mutNumC)); [EOL]     assertFalse(mutNumA.equals(null)); [EOL]     assertFalse(mutNumA.equals(Short.valueOf((short) 0))); [EOL]     assertFalse(mutNumA.equals("0")); [EOL] }
@Test [EOL] public void testHashCode() { [EOL]     final MutableShort mutNumA = new MutableShort((short) 0); [EOL]     final MutableShort mutNumB = new MutableShort((short) 0); [EOL]     final MutableShort mutNumC = new MutableShort((short) 1); [EOL]     assertTrue(mutNumA.hashCode() == mutNumA.hashCode()); [EOL]     assertTrue(mutNumA.hashCode() == mutNumB.hashCode()); [EOL]     assertFalse(mutNumA.hashCode() == mutNumC.hashCode()); [EOL]     assertTrue(mutNumA.hashCode() == Short.valueOf((short) 0).hashCode()); [EOL] }
@Test [EOL] public void testLang315() { [EOL]     final StopWatch watch = new StopWatch(); [EOL]     watch.start(); [EOL]     try { [EOL]         Thread.sleep(200); [EOL]     } catch (final InterruptedException ex) { [EOL]     } [EOL]     watch.suspend(); [EOL]     final long suspendTime = watch.getTime(); [EOL]     try { [EOL]         Thread.sleep(200); [EOL]     } catch (final InterruptedException ex) { [EOL]     } [EOL]     watch.stop(); [EOL]     final long totalTime = watch.getTime(); [EOL]     assertTrue(suspendTime == totalTime); [EOL] }
@Test [EOL] public void testLang315() { [EOL]     final StopWatch watch = new StopWatch(); [EOL]     watch.start(); [EOL]     try { [EOL]         Thread.sleep(200); [EOL]     } catch (final InterruptedException ex) { [EOL]     } [EOL]     watch.suspend(); [EOL]     final long suspendTime = watch.getTime(); [EOL]     try { [EOL]         Thread.sleep(200); [EOL]     } catch (final InterruptedException ex) { [EOL]     } [EOL]     watch.stop(); [EOL]     final long totalTime = watch.getTime(); [EOL]     assertTrue(suspendTime == totalTime); [EOL] }
@Test [EOL] public void testLang315() { [EOL]     final StopWatch watch = new StopWatch(); [EOL]     watch.start(); [EOL]     try { [EOL]         Thread.sleep(200); [EOL]     } catch (final InterruptedException ex) { [EOL]     } [EOL]     watch.suspend(); [EOL]     final long suspendTime = watch.getTime(); [EOL]     try { [EOL]         Thread.sleep(200); [EOL]     } catch (final InterruptedException ex) { [EOL]     } [EOL]     watch.stop(); [EOL]     final long totalTime = watch.getTime(); [EOL]     assertTrue(suspendTime == totalTime); [EOL] }
@Test [EOL] public void testLang315() { [EOL]     final StopWatch watch = new StopWatch(); [EOL]     watch.start(); [EOL]     try { [EOL]         Thread.sleep(200); [EOL]     } catch (final InterruptedException ex) { [EOL]     } [EOL]     watch.suspend(); [EOL]     final long suspendTime = watch.getTime(); [EOL]     try { [EOL]         Thread.sleep(200); [EOL]     } catch (final InterruptedException ex) { [EOL]     } [EOL]     watch.stop(); [EOL]     final long totalTime = watch.getTime(); [EOL]     assertTrue(suspendTime == totalTime); [EOL] }
@Test [EOL] public void testLang315() { [EOL]     final StopWatch watch = new StopWatch(); [EOL]     watch.start(); [EOL]     try { [EOL]         Thread.sleep(200); [EOL]     } catch (final InterruptedException ex) { [EOL]     } [EOL]     watch.suspend(); [EOL]     final long suspendTime = watch.getTime(); [EOL]     try { [EOL]         Thread.sleep(200); [EOL]     } catch (final InterruptedException ex) { [EOL]     } [EOL]     watch.stop(); [EOL]     final long totalTime = watch.getTime(); [EOL]     assertTrue(suspendTime == totalTime); [EOL] }
@Test [EOL] public void testLang315() { [EOL]     final StopWatch watch = new StopWatch(); [EOL]     watch.start(); [EOL]     try { [EOL]         Thread.sleep(200); [EOL]     } catch (final InterruptedException ex) { [EOL]     } [EOL]     watch.suspend(); [EOL]     final long suspendTime = watch.getTime(); [EOL]     try { [EOL]         Thread.sleep(200); [EOL]     } catch (final InterruptedException ex) { [EOL]     } [EOL]     watch.stop(); [EOL]     final long totalTime = watch.getTime(); [EOL]     assertTrue(suspendTime == totalTime); [EOL] }
@Test [EOL] public void testLang315() { [EOL]     final StopWatch watch = new StopWatch(); [EOL]     watch.start(); [EOL]     try { [EOL]         Thread.sleep(200); [EOL]     } catch (final InterruptedException ex) { [EOL]     } [EOL]     watch.suspend(); [EOL]     final long suspendTime = watch.getTime(); [EOL]     try { [EOL]         Thread.sleep(200); [EOL]     } catch (final InterruptedException ex) { [EOL]     } [EOL]     watch.stop(); [EOL]     final long totalTime = watch.getTime(); [EOL]     assertTrue(suspendTime == totalTime); [EOL] }
@Test [EOL] public void testLang315() { [EOL]     final StopWatch watch = new StopWatch(); [EOL]     watch.start(); [EOL]     try { [EOL]         Thread.sleep(200); [EOL]     } catch (final InterruptedException ex) { [EOL]     } [EOL]     watch.suspend(); [EOL]     final long suspendTime = watch.getTime(); [EOL]     try { [EOL]         Thread.sleep(200); [EOL]     } catch (final InterruptedException ex) { [EOL]     } [EOL]     watch.stop(); [EOL]     final long totalTime = watch.getTime(); [EOL]     assertTrue(suspendTime == totalTime); [EOL] }
@Test [EOL] public void testLang315() { [EOL]     final StopWatch watch = new StopWatch(); [EOL]     watch.start(); [EOL]     try { [EOL]         Thread.sleep(200); [EOL]     } catch (final InterruptedException ex) { [EOL]     } [EOL]     watch.suspend(); [EOL]     final long suspendTime = watch.getTime(); [EOL]     try { [EOL]         Thread.sleep(200); [EOL]     } catch (final InterruptedException ex) { [EOL]     } [EOL]     watch.stop(); [EOL]     final long totalTime = watch.getTime(); [EOL]     assertTrue(suspendTime == totalTime); [EOL] }
@Test [EOL] public void testLang315() { [EOL]     final StopWatch watch = new StopWatch(); [EOL]     watch.start(); [EOL]     try { [EOL]         Thread.sleep(200); [EOL]     } catch (final InterruptedException ex) { [EOL]     } [EOL]     watch.suspend(); [EOL]     final long suspendTime = watch.getTime(); [EOL]     try { [EOL]         Thread.sleep(200); [EOL]     } catch (final InterruptedException ex) { [EOL]     } [EOL]     watch.stop(); [EOL]     final long totalTime = watch.getTime(); [EOL]     assertTrue(suspendTime == totalTime); [EOL] }
@Test [EOL] public void testLang315() { [EOL]     final StopWatch watch = new StopWatch(); [EOL]     watch.start(); [EOL]     try { [EOL]         Thread.sleep(200); [EOL]     } catch (final InterruptedException ex) { [EOL]     } [EOL]     watch.suspend(); [EOL]     final long suspendTime = watch.getTime(); [EOL]     try { [EOL]         Thread.sleep(200); [EOL]     } catch (final InterruptedException ex) { [EOL]     } [EOL]     watch.stop(); [EOL]     final long totalTime = watch.getTime(); [EOL]     assertTrue(suspendTime == totalTime); [EOL] }
@Test [EOL] public void testLang315() { [EOL]     final StopWatch watch = new StopWatch(); [EOL]     watch.start(); [EOL]     try { [EOL]         Thread.sleep(200); [EOL]     } catch (final InterruptedException ex) { [EOL]     } [EOL]     watch.suspend(); [EOL]     final long suspendTime = watch.getTime(); [EOL]     try { [EOL]         Thread.sleep(200); [EOL]     } catch (final InterruptedException ex) { [EOL]     } [EOL]     watch.stop(); [EOL]     final long totalTime = watch.getTime(); [EOL]     assertTrue(suspendTime == totalTime); [EOL] }
@Test [EOL] public void testLang315() { [EOL]     final StopWatch watch = new StopWatch(); [EOL]     watch.start(); [EOL]     try { [EOL]         Thread.sleep(200); [EOL]     } catch (final InterruptedException ex) { [EOL]     } [EOL]     watch.suspend(); [EOL]     final long suspendTime = watch.getTime(); [EOL]     try { [EOL]         Thread.sleep(200); [EOL]     } catch (final InterruptedException ex) { [EOL]     } [EOL]     watch.stop(); [EOL]     final long totalTime = watch.getTime(); [EOL]     assertTrue(suspendTime == totalTime); [EOL] }
@Test [EOL] public void testLang315() { [EOL]     final StopWatch watch = new StopWatch(); [EOL]     watch.start(); [EOL]     try { [EOL]         Thread.sleep(200); [EOL]     } catch (final InterruptedException ex) { [EOL]     } [EOL]     watch.suspend(); [EOL]     final long suspendTime = watch.getTime(); [EOL]     try { [EOL]         Thread.sleep(200); [EOL]     } catch (final InterruptedException ex) { [EOL]     } [EOL]     watch.stop(); [EOL]     final long totalTime = watch.getTime(); [EOL]     assertTrue(suspendTime == totalTime); [EOL] }
@Test [EOL] public void testGetConcurrent() throws ConcurrentException, InterruptedException { [EOL]     final ConcurrentInitializer<Object> initializer = createInitializer(); [EOL]     final int threadCount = 20; [EOL]     final CountDownLatch startLatch = new CountDownLatch(1); [EOL]     class GetThread extends Thread { [EOL]  [EOL]         Object object; [EOL]  [EOL]         @Override [EOL]         public void run() { [EOL]             try { [EOL]                 startLatch.await(); [EOL]                 object = initializer.get(); [EOL]             } catch (final InterruptedException iex) { [EOL]             } catch (final ConcurrentException cex) { [EOL]                 object = cex; [EOL]             } [EOL]         } [EOL]     } [EOL]     final GetThread[] threads = new GetThread[threadCount]; [EOL]     for (int i = 0; i < threadCount; i++) { [EOL]         threads[i] = new GetThread(); [EOL]         threads[i].start(); [EOL]     } [EOL]     startLatch.countDown(); [EOL]     for (final Thread t : threads) { [EOL]         t.join(); [EOL]     } [EOL]     final Object managedObject = initializer.get(); [EOL]     for (final GetThread t : threads) { [EOL]         assertEquals("Wrong object", managedObject, t.object); [EOL]     } [EOL] }
@Test [EOL] public void testGetConcurrent() throws ConcurrentException, InterruptedException { [EOL]     final ConcurrentInitializer<Object> initializer = createInitializer(); [EOL]     final int threadCount = 20; [EOL]     final CountDownLatch startLatch = new CountDownLatch(1); [EOL]     class GetThread extends Thread { [EOL]  [EOL]         Object object; [EOL]  [EOL]         @Override [EOL]         public void run() { [EOL]             try { [EOL]                 startLatch.await(); [EOL]                 object = initializer.get(); [EOL]             } catch (final InterruptedException iex) { [EOL]             } catch (final ConcurrentException cex) { [EOL]                 object = cex; [EOL]             } [EOL]         } [EOL]     } [EOL]     final GetThread[] threads = new GetThread[threadCount]; [EOL]     for (int i = 0; i < threadCount; i++) { [EOL]         threads[i] = new GetThread(); [EOL]         threads[i].start(); [EOL]     } [EOL]     startLatch.countDown(); [EOL]     for (final Thread t : threads) { [EOL]         t.join(); [EOL]     } [EOL]     final Object managedObject = initializer.get(); [EOL]     for (final GetThread t : threads) { [EOL]         assertEquals("Wrong object", managedObject, t.object); [EOL]     } [EOL] }
@Test(expected = ClassCastException.class) [EOL] public void testReflectionCompareEx2() { [EOL]     final TestObject o1 = new TestObject(4); [EOL]     final Object o2 = new Object(); [EOL]     CompareToBuilder.reflectionCompare(o1, o2); [EOL] }
@Test(expected = ClassCastException.class) [EOL] public void testReflectionCompareEx2() { [EOL]     final TestObject o1 = new TestObject(4); [EOL]     final Object o2 = new Object(); [EOL]     CompareToBuilder.reflectionCompare(o1, o2); [EOL] }
@Test(expected = ClassCastException.class) [EOL] public void testReflectionCompareEx2() { [EOL]     final TestObject o1 = new TestObject(4); [EOL]     final Object o2 = new Object(); [EOL]     CompareToBuilder.reflectionCompare(o1, o2); [EOL] }
@Test(expected = ClassCastException.class) [EOL] public void testReflectionCompareEx2() { [EOL]     final TestObject o1 = new TestObject(4); [EOL]     final Object o2 = new Object(); [EOL]     CompareToBuilder.reflectionCompare(o1, o2); [EOL] }
@Test(expected = ClassCastException.class) [EOL] public void testReflectionCompareEx2() { [EOL]     final TestObject o1 = new TestObject(4); [EOL]     final Object o2 = new Object(); [EOL]     CompareToBuilder.reflectionCompare(o1, o2); [EOL] }
@Test(expected = ClassCastException.class) [EOL] public void testReflectionCompareEx2() { [EOL]     final TestObject o1 = new TestObject(4); [EOL]     final Object o2 = new Object(); [EOL]     CompareToBuilder.reflectionCompare(o1, o2); [EOL] }
@Test [EOL] public void testAppendSuper() { [EOL]     final TestObject o1 = new TestObject(4); [EOL]     final TestObject o2 = new TestObject(5); [EOL]     assertTrue(new CompareToBuilder().appendSuper(0).append(o1, o1).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().appendSuper(0).append(o1, o2).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().appendSuper(0).append(o2, o1).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().appendSuper(-1).append(o1, o1).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().appendSuper(-1).append(o1, o2).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().appendSuper(1).append(o1, o1).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().appendSuper(1).append(o1, o2).toComparison() > 0); [EOL] }
@Test [EOL] public void testAppendSuper() { [EOL]     final TestObject o1 = new TestObject(4); [EOL]     final TestObject o2 = new TestObject(5); [EOL]     assertTrue(new CompareToBuilder().appendSuper(0).append(o1, o1).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().appendSuper(0).append(o1, o2).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().appendSuper(0).append(o2, o1).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().appendSuper(-1).append(o1, o1).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().appendSuper(-1).append(o1, o2).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().appendSuper(1).append(o1, o1).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().appendSuper(1).append(o1, o2).toComparison() > 0); [EOL] }
@Test [EOL] public void testAppendSuper() { [EOL]     final TestObject o1 = new TestObject(4); [EOL]     final TestObject o2 = new TestObject(5); [EOL]     assertTrue(new CompareToBuilder().appendSuper(0).append(o1, o1).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().appendSuper(0).append(o1, o2).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().appendSuper(0).append(o2, o1).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().appendSuper(-1).append(o1, o1).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().appendSuper(-1).append(o1, o2).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().appendSuper(1).append(o1, o1).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().appendSuper(1).append(o1, o2).toComparison() > 0); [EOL] }
@Test [EOL] public void testAppendSuper() { [EOL]     final TestObject o1 = new TestObject(4); [EOL]     final TestObject o2 = new TestObject(5); [EOL]     assertTrue(new CompareToBuilder().appendSuper(0).append(o1, o1).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().appendSuper(0).append(o1, o2).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().appendSuper(0).append(o2, o1).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().appendSuper(-1).append(o1, o1).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().appendSuper(-1).append(o1, o2).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().appendSuper(1).append(o1, o1).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().appendSuper(1).append(o1, o2).toComparison() > 0); [EOL] }
@Test [EOL] public void testAppendSuper() { [EOL]     final TestObject o1 = new TestObject(4); [EOL]     final TestObject o2 = new TestObject(5); [EOL]     assertTrue(new CompareToBuilder().appendSuper(0).append(o1, o1).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().appendSuper(0).append(o1, o2).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().appendSuper(0).append(o2, o1).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().appendSuper(-1).append(o1, o1).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().appendSuper(-1).append(o1, o2).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().appendSuper(1).append(o1, o1).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().appendSuper(1).append(o1, o2).toComparison() > 0); [EOL] }
@Test [EOL] public void testAppendSuper() { [EOL]     final TestObject o1 = new TestObject(4); [EOL]     final TestObject o2 = new TestObject(5); [EOL]     assertTrue(new CompareToBuilder().appendSuper(0).append(o1, o1).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().appendSuper(0).append(o1, o2).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().appendSuper(0).append(o2, o1).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().appendSuper(-1).append(o1, o1).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().appendSuper(-1).append(o1, o2).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().appendSuper(1).append(o1, o1).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().appendSuper(1).append(o1, o2).toComparison() > 0); [EOL] }
@Test [EOL] public void testByteArrayHiddenByObject() { [EOL]     final byte[] array1 = new byte[2]; [EOL]     array1[0] = 5; [EOL]     array1[1] = 6; [EOL]     final byte[] array2 = new byte[2]; [EOL]     array2[0] = 5; [EOL]     array2[1] = 6; [EOL]     final byte[] array3 = new byte[3]; [EOL]     array3[0] = 5; [EOL]     array3[1] = 6; [EOL]     array3[2] = 7; [EOL]     final Object obj1 = array1; [EOL]     final Object obj2 = array2; [EOL]     final Object obj3 = array3; [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0); [EOL]     array1[1] = 7; [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0); [EOL] }
@Test [EOL] public void testByteArrayHiddenByObject() { [EOL]     final byte[] array1 = new byte[2]; [EOL]     array1[0] = 5; [EOL]     array1[1] = 6; [EOL]     final byte[] array2 = new byte[2]; [EOL]     array2[0] = 5; [EOL]     array2[1] = 6; [EOL]     final byte[] array3 = new byte[3]; [EOL]     array3[0] = 5; [EOL]     array3[1] = 6; [EOL]     array3[2] = 7; [EOL]     final Object obj1 = array1; [EOL]     final Object obj2 = array2; [EOL]     final Object obj3 = array3; [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0); [EOL]     array1[1] = 7; [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0); [EOL] }
@Test [EOL] public void testByteArrayHiddenByObject() { [EOL]     final byte[] array1 = new byte[2]; [EOL]     array1[0] = 5; [EOL]     array1[1] = 6; [EOL]     final byte[] array2 = new byte[2]; [EOL]     array2[0] = 5; [EOL]     array2[1] = 6; [EOL]     final byte[] array3 = new byte[3]; [EOL]     array3[0] = 5; [EOL]     array3[1] = 6; [EOL]     array3[2] = 7; [EOL]     final Object obj1 = array1; [EOL]     final Object obj2 = array2; [EOL]     final Object obj3 = array3; [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0); [EOL]     array1[1] = 7; [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0); [EOL] }
@Test [EOL] public void testByteArrayHiddenByObject() { [EOL]     final byte[] array1 = new byte[2]; [EOL]     array1[0] = 5; [EOL]     array1[1] = 6; [EOL]     final byte[] array2 = new byte[2]; [EOL]     array2[0] = 5; [EOL]     array2[1] = 6; [EOL]     final byte[] array3 = new byte[3]; [EOL]     array3[0] = 5; [EOL]     array3[1] = 6; [EOL]     array3[2] = 7; [EOL]     final Object obj1 = array1; [EOL]     final Object obj2 = array2; [EOL]     final Object obj3 = array3; [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0); [EOL]     array1[1] = 7; [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0); [EOL] }
@Test [EOL] public void testByteArrayHiddenByObject() { [EOL]     final byte[] array1 = new byte[2]; [EOL]     array1[0] = 5; [EOL]     array1[1] = 6; [EOL]     final byte[] array2 = new byte[2]; [EOL]     array2[0] = 5; [EOL]     array2[1] = 6; [EOL]     final byte[] array3 = new byte[3]; [EOL]     array3[0] = 5; [EOL]     array3[1] = 6; [EOL]     array3[2] = 7; [EOL]     final Object obj1 = array1; [EOL]     final Object obj2 = array2; [EOL]     final Object obj3 = array3; [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() == 0); [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0); [EOL]     assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0); [EOL]     array1[1] = 7; [EOL]     assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0); [EOL]     assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0); [EOL] }
@Test [EOL] public void testTrimToEmpty() { [EOL]     assertEquals(FOO, StringUtils.trimToEmpty(FOO + "  ")); [EOL]     assertEquals(FOO, StringUtils.trimToEmpty(" " + FOO + "  ")); [EOL]     assertEquals(FOO, StringUtils.trimToEmpty(" " + FOO)); [EOL]     assertEquals(FOO, StringUtils.trimToEmpty(FOO + "")); [EOL]     assertEquals("", StringUtils.trimToEmpty(" \t\r\n\b ")); [EOL]     assertEquals("", StringUtils.trimToEmpty(StringUtilsTest.TRIMMABLE)); [EOL]     assertEquals(StringUtilsTest.NON_TRIMMABLE, StringUtils.trimToEmpty(StringUtilsTest.NON_TRIMMABLE)); [EOL]     assertEquals("", StringUtils.trimToEmpty("")); [EOL]     assertEquals("", StringUtils.trimToEmpty(null)); [EOL] }
@Test [EOL] public void testTrimToEmpty() { [EOL]     assertEquals(FOO, StringUtils.trimToEmpty(FOO + "  ")); [EOL]     assertEquals(FOO, StringUtils.trimToEmpty(" " + FOO + "  ")); [EOL]     assertEquals(FOO, StringUtils.trimToEmpty(" " + FOO)); [EOL]     assertEquals(FOO, StringUtils.trimToEmpty(FOO + "")); [EOL]     assertEquals("", StringUtils.trimToEmpty(" \t\r\n\b ")); [EOL]     assertEquals("", StringUtils.trimToEmpty(StringUtilsTest.TRIMMABLE)); [EOL]     assertEquals(StringUtilsTest.NON_TRIMMABLE, StringUtils.trimToEmpty(StringUtilsTest.NON_TRIMMABLE)); [EOL]     assertEquals("", StringUtils.trimToEmpty("")); [EOL]     assertEquals("", StringUtils.trimToEmpty(null)); [EOL] }
@Test [EOL] public void testTrimToEmpty() { [EOL]     assertEquals(FOO, StringUtils.trimToEmpty(FOO + "  ")); [EOL]     assertEquals(FOO, StringUtils.trimToEmpty(" " + FOO + "  ")); [EOL]     assertEquals(FOO, StringUtils.trimToEmpty(" " + FOO)); [EOL]     assertEquals(FOO, StringUtils.trimToEmpty(FOO + "")); [EOL]     assertEquals("", StringUtils.trimToEmpty(" \t\r\n\b ")); [EOL]     assertEquals("", StringUtils.trimToEmpty(StringUtilsTest.TRIMMABLE)); [EOL]     assertEquals(StringUtilsTest.NON_TRIMMABLE, StringUtils.trimToEmpty(StringUtilsTest.NON_TRIMMABLE)); [EOL]     assertEquals("", StringUtils.trimToEmpty("")); [EOL]     assertEquals("", StringUtils.trimToEmpty(null)); [EOL] }
@Test [EOL] public void testTrimToEmpty() { [EOL]     assertEquals(FOO, StringUtils.trimToEmpty(FOO + "  ")); [EOL]     assertEquals(FOO, StringUtils.trimToEmpty(" " + FOO + "  ")); [EOL]     assertEquals(FOO, StringUtils.trimToEmpty(" " + FOO)); [EOL]     assertEquals(FOO, StringUtils.trimToEmpty(FOO + "")); [EOL]     assertEquals("", StringUtils.trimToEmpty(" \t\r\n\b ")); [EOL]     assertEquals("", StringUtils.trimToEmpty(StringUtilsTest.TRIMMABLE)); [EOL]     assertEquals(StringUtilsTest.NON_TRIMMABLE, StringUtils.trimToEmpty(StringUtilsTest.NON_TRIMMABLE)); [EOL]     assertEquals("", StringUtils.trimToEmpty("")); [EOL]     assertEquals("", StringUtils.trimToEmpty(null)); [EOL] }
@Test [EOL] public void testEqualsOnStrings() { [EOL]     assertTrue(StringUtils.equals(null, null)); [EOL]     assertTrue(StringUtils.equals(FOO, FOO)); [EOL]     assertTrue(StringUtils.equals(FOO, new String(new char[] { 'f', 'o', 'o' }))); [EOL]     assertFalse(StringUtils.equals(FOO, new String(new char[] { 'f', 'O', 'O' }))); [EOL]     assertFalse(StringUtils.equals(FOO, BAR)); [EOL]     assertFalse(StringUtils.equals(FOO, null)); [EOL]     assertFalse(StringUtils.equals(null, FOO)); [EOL]     assertFalse(StringUtils.equals(FOO, FOOBAR)); [EOL]     assertFalse(StringUtils.equals(FOOBAR, FOO)); [EOL] }
@Test [EOL] public void testEqualsOnStrings() { [EOL]     assertTrue(StringUtils.equals(null, null)); [EOL]     assertTrue(StringUtils.equals(FOO, FOO)); [EOL]     assertTrue(StringUtils.equals(FOO, new String(new char[] { 'f', 'o', 'o' }))); [EOL]     assertFalse(StringUtils.equals(FOO, new String(new char[] { 'f', 'O', 'O' }))); [EOL]     assertFalse(StringUtils.equals(FOO, BAR)); [EOL]     assertFalse(StringUtils.equals(FOO, null)); [EOL]     assertFalse(StringUtils.equals(null, FOO)); [EOL]     assertFalse(StringUtils.equals(FOO, FOOBAR)); [EOL]     assertFalse(StringUtils.equals(FOOBAR, FOO)); [EOL] }
@Test [EOL] public void testEqualsOnStrings() { [EOL]     assertTrue(StringUtils.equals(null, null)); [EOL]     assertTrue(StringUtils.equals(FOO, FOO)); [EOL]     assertTrue(StringUtils.equals(FOO, new String(new char[] { 'f', 'o', 'o' }))); [EOL]     assertFalse(StringUtils.equals(FOO, new String(new char[] { 'f', 'O', 'O' }))); [EOL]     assertFalse(StringUtils.equals(FOO, BAR)); [EOL]     assertFalse(StringUtils.equals(FOO, null)); [EOL]     assertFalse(StringUtils.equals(null, FOO)); [EOL]     assertFalse(StringUtils.equals(FOO, FOOBAR)); [EOL]     assertFalse(StringUtils.equals(FOOBAR, FOO)); [EOL] }
@Test [EOL] public void testEqualsOnStrings() { [EOL]     assertTrue(StringUtils.equals(null, null)); [EOL]     assertTrue(StringUtils.equals(FOO, FOO)); [EOL]     assertTrue(StringUtils.equals(FOO, new String(new char[] { 'f', 'o', 'o' }))); [EOL]     assertFalse(StringUtils.equals(FOO, new String(new char[] { 'f', 'O', 'O' }))); [EOL]     assertFalse(StringUtils.equals(FOO, BAR)); [EOL]     assertFalse(StringUtils.equals(FOO, null)); [EOL]     assertFalse(StringUtils.equals(null, FOO)); [EOL]     assertFalse(StringUtils.equals(FOO, FOOBAR)); [EOL]     assertFalse(StringUtils.equals(FOOBAR, FOO)); [EOL] }
@Test [EOL] public void testEqualsOnStrings() { [EOL]     assertTrue(StringUtils.equals(null, null)); [EOL]     assertTrue(StringUtils.equals(FOO, FOO)); [EOL]     assertTrue(StringUtils.equals(FOO, new String(new char[] { 'f', 'o', 'o' }))); [EOL]     assertFalse(StringUtils.equals(FOO, new String(new char[] { 'f', 'O', 'O' }))); [EOL]     assertFalse(StringUtils.equals(FOO, BAR)); [EOL]     assertFalse(StringUtils.equals(FOO, null)); [EOL]     assertFalse(StringUtils.equals(null, FOO)); [EOL]     assertFalse(StringUtils.equals(FOO, FOOBAR)); [EOL]     assertFalse(StringUtils.equals(FOOBAR, FOO)); [EOL] }
@Test [EOL] public void testEqualsOnStrings() { [EOL]     assertTrue(StringUtils.equals(null, null)); [EOL]     assertTrue(StringUtils.equals(FOO, FOO)); [EOL]     assertTrue(StringUtils.equals(FOO, new String(new char[] { 'f', 'o', 'o' }))); [EOL]     assertFalse(StringUtils.equals(FOO, new String(new char[] { 'f', 'O', 'O' }))); [EOL]     assertFalse(StringUtils.equals(FOO, BAR)); [EOL]     assertFalse(StringUtils.equals(FOO, null)); [EOL]     assertFalse(StringUtils.equals(null, FOO)); [EOL]     assertFalse(StringUtils.equals(FOO, FOOBAR)); [EOL]     assertFalse(StringUtils.equals(FOOBAR, FOO)); [EOL] }
@Test [EOL] public void testEqualsOnStrings() { [EOL]     assertTrue(StringUtils.equals(null, null)); [EOL]     assertTrue(StringUtils.equals(FOO, FOO)); [EOL]     assertTrue(StringUtils.equals(FOO, new String(new char[] { 'f', 'o', 'o' }))); [EOL]     assertFalse(StringUtils.equals(FOO, new String(new char[] { 'f', 'O', 'O' }))); [EOL]     assertFalse(StringUtils.equals(FOO, BAR)); [EOL]     assertFalse(StringUtils.equals(FOO, null)); [EOL]     assertFalse(StringUtils.equals(null, FOO)); [EOL]     assertFalse(StringUtils.equals(FOO, FOOBAR)); [EOL]     assertFalse(StringUtils.equals(FOOBAR, FOO)); [EOL] }
@Test [EOL] public void testEqualsOnStrings() { [EOL]     assertTrue(StringUtils.equals(null, null)); [EOL]     assertTrue(StringUtils.equals(FOO, FOO)); [EOL]     assertTrue(StringUtils.equals(FOO, new String(new char[] { 'f', 'o', 'o' }))); [EOL]     assertFalse(StringUtils.equals(FOO, new String(new char[] { 'f', 'O', 'O' }))); [EOL]     assertFalse(StringUtils.equals(FOO, BAR)); [EOL]     assertFalse(StringUtils.equals(FOO, null)); [EOL]     assertFalse(StringUtils.equals(null, FOO)); [EOL]     assertFalse(StringUtils.equals(FOO, FOOBAR)); [EOL]     assertFalse(StringUtils.equals(FOOBAR, FOO)); [EOL] }
@Test [EOL] public void testLastOrdinalIndexOf() { [EOL]     assertEquals(-1, StringUtils.lastOrdinalIndexOf(null, "*", 42)); [EOL]     assertEquals(-1, StringUtils.lastOrdinalIndexOf("*", null, 42)); [EOL]     assertEquals(0, StringUtils.lastOrdinalIndexOf("", "", 42)); [EOL]     assertEquals(7, StringUtils.lastOrdinalIndexOf("aabaabaa", "a", 1)); [EOL]     assertEquals(6, StringUtils.lastOrdinalIndexOf("aabaabaa", "a", 2)); [EOL]     assertEquals(5, StringUtils.lastOrdinalIndexOf("aabaabaa", "b", 1)); [EOL]     assertEquals(2, StringUtils.lastOrdinalIndexOf("aabaabaa", "b", 2)); [EOL]     assertEquals(4, StringUtils.lastOrdinalIndexOf("aabaabaa", "ab", 1)); [EOL]     assertEquals(1, StringUtils.lastOrdinalIndexOf("aabaabaa", "ab", 2)); [EOL]     assertEquals(8, StringUtils.lastOrdinalIndexOf("aabaabaa", "", 1)); [EOL]     assertEquals(8, StringUtils.lastOrdinalIndexOf("aabaabaa", "", 2)); [EOL] }
@Test [EOL] public void testLastOrdinalIndexOf() { [EOL]     assertEquals(-1, StringUtils.lastOrdinalIndexOf(null, "*", 42)); [EOL]     assertEquals(-1, StringUtils.lastOrdinalIndexOf("*", null, 42)); [EOL]     assertEquals(0, StringUtils.lastOrdinalIndexOf("", "", 42)); [EOL]     assertEquals(7, StringUtils.lastOrdinalIndexOf("aabaabaa", "a", 1)); [EOL]     assertEquals(6, StringUtils.lastOrdinalIndexOf("aabaabaa", "a", 2)); [EOL]     assertEquals(5, StringUtils.lastOrdinalIndexOf("aabaabaa", "b", 1)); [EOL]     assertEquals(2, StringUtils.lastOrdinalIndexOf("aabaabaa", "b", 2)); [EOL]     assertEquals(4, StringUtils.lastOrdinalIndexOf("aabaabaa", "ab", 1)); [EOL]     assertEquals(1, StringUtils.lastOrdinalIndexOf("aabaabaa", "ab", 2)); [EOL]     assertEquals(8, StringUtils.lastOrdinalIndexOf("aabaabaa", "", 1)); [EOL]     assertEquals(8, StringUtils.lastOrdinalIndexOf("aabaabaa", "", 2)); [EOL] }
@Test [EOL] public void testLastOrdinalIndexOf() { [EOL]     assertEquals(-1, StringUtils.lastOrdinalIndexOf(null, "*", 42)); [EOL]     assertEquals(-1, StringUtils.lastOrdinalIndexOf("*", null, 42)); [EOL]     assertEquals(0, StringUtils.lastOrdinalIndexOf("", "", 42)); [EOL]     assertEquals(7, StringUtils.lastOrdinalIndexOf("aabaabaa", "a", 1)); [EOL]     assertEquals(6, StringUtils.lastOrdinalIndexOf("aabaabaa", "a", 2)); [EOL]     assertEquals(5, StringUtils.lastOrdinalIndexOf("aabaabaa", "b", 1)); [EOL]     assertEquals(2, StringUtils.lastOrdinalIndexOf("aabaabaa", "b", 2)); [EOL]     assertEquals(4, StringUtils.lastOrdinalIndexOf("aabaabaa", "ab", 1)); [EOL]     assertEquals(1, StringUtils.lastOrdinalIndexOf("aabaabaa", "ab", 2)); [EOL]     assertEquals(8, StringUtils.lastOrdinalIndexOf("aabaabaa", "", 1)); [EOL]     assertEquals(8, StringUtils.lastOrdinalIndexOf("aabaabaa", "", 2)); [EOL] }
@Test [EOL] public void testLastOrdinalIndexOf() { [EOL]     assertEquals(-1, StringUtils.lastOrdinalIndexOf(null, "*", 42)); [EOL]     assertEquals(-1, StringUtils.lastOrdinalIndexOf("*", null, 42)); [EOL]     assertEquals(0, StringUtils.lastOrdinalIndexOf("", "", 42)); [EOL]     assertEquals(7, StringUtils.lastOrdinalIndexOf("aabaabaa", "a", 1)); [EOL]     assertEquals(6, StringUtils.lastOrdinalIndexOf("aabaabaa", "a", 2)); [EOL]     assertEquals(5, StringUtils.lastOrdinalIndexOf("aabaabaa", "b", 1)); [EOL]     assertEquals(2, StringUtils.lastOrdinalIndexOf("aabaabaa", "b", 2)); [EOL]     assertEquals(4, StringUtils.lastOrdinalIndexOf("aabaabaa", "ab", 1)); [EOL]     assertEquals(1, StringUtils.lastOrdinalIndexOf("aabaabaa", "ab", 2)); [EOL]     assertEquals(8, StringUtils.lastOrdinalIndexOf("aabaabaa", "", 1)); [EOL]     assertEquals(8, StringUtils.lastOrdinalIndexOf("aabaabaa", "", 2)); [EOL] }
@Test [EOL] public void testLastOrdinalIndexOf() { [EOL]     assertEquals(-1, StringUtils.lastOrdinalIndexOf(null, "*", 42)); [EOL]     assertEquals(-1, StringUtils.lastOrdinalIndexOf("*", null, 42)); [EOL]     assertEquals(0, StringUtils.lastOrdinalIndexOf("", "", 42)); [EOL]     assertEquals(7, StringUtils.lastOrdinalIndexOf("aabaabaa", "a", 1)); [EOL]     assertEquals(6, StringUtils.lastOrdinalIndexOf("aabaabaa", "a", 2)); [EOL]     assertEquals(5, StringUtils.lastOrdinalIndexOf("aabaabaa", "b", 1)); [EOL]     assertEquals(2, StringUtils.lastOrdinalIndexOf("aabaabaa", "b", 2)); [EOL]     assertEquals(4, StringUtils.lastOrdinalIndexOf("aabaabaa", "ab", 1)); [EOL]     assertEquals(1, StringUtils.lastOrdinalIndexOf("aabaabaa", "ab", 2)); [EOL]     assertEquals(8, StringUtils.lastOrdinalIndexOf("aabaabaa", "", 1)); [EOL]     assertEquals(8, StringUtils.lastOrdinalIndexOf("aabaabaa", "", 2)); [EOL] }
@Test [EOL] public void testLastOrdinalIndexOf() { [EOL]     assertEquals(-1, StringUtils.lastOrdinalIndexOf(null, "*", 42)); [EOL]     assertEquals(-1, StringUtils.lastOrdinalIndexOf("*", null, 42)); [EOL]     assertEquals(0, StringUtils.lastOrdinalIndexOf("", "", 42)); [EOL]     assertEquals(7, StringUtils.lastOrdinalIndexOf("aabaabaa", "a", 1)); [EOL]     assertEquals(6, StringUtils.lastOrdinalIndexOf("aabaabaa", "a", 2)); [EOL]     assertEquals(5, StringUtils.lastOrdinalIndexOf("aabaabaa", "b", 1)); [EOL]     assertEquals(2, StringUtils.lastOrdinalIndexOf("aabaabaa", "b", 2)); [EOL]     assertEquals(4, StringUtils.lastOrdinalIndexOf("aabaabaa", "ab", 1)); [EOL]     assertEquals(1, StringUtils.lastOrdinalIndexOf("aabaabaa", "ab", 2)); [EOL]     assertEquals(8, StringUtils.lastOrdinalIndexOf("aabaabaa", "", 1)); [EOL]     assertEquals(8, StringUtils.lastOrdinalIndexOf("aabaabaa", "", 2)); [EOL] }
@Test [EOL] public void testLastOrdinalIndexOf() { [EOL]     assertEquals(-1, StringUtils.lastOrdinalIndexOf(null, "*", 42)); [EOL]     assertEquals(-1, StringUtils.lastOrdinalIndexOf("*", null, 42)); [EOL]     assertEquals(0, StringUtils.lastOrdinalIndexOf("", "", 42)); [EOL]     assertEquals(7, StringUtils.lastOrdinalIndexOf("aabaabaa", "a", 1)); [EOL]     assertEquals(6, StringUtils.lastOrdinalIndexOf("aabaabaa", "a", 2)); [EOL]     assertEquals(5, StringUtils.lastOrdinalIndexOf("aabaabaa", "b", 1)); [EOL]     assertEquals(2, StringUtils.lastOrdinalIndexOf("aabaabaa", "b", 2)); [EOL]     assertEquals(4, StringUtils.lastOrdinalIndexOf("aabaabaa", "ab", 1)); [EOL]     assertEquals(1, StringUtils.lastOrdinalIndexOf("aabaabaa", "ab", 2)); [EOL]     assertEquals(8, StringUtils.lastOrdinalIndexOf("aabaabaa", "", 1)); [EOL]     assertEquals(8, StringUtils.lastOrdinalIndexOf("aabaabaa", "", 2)); [EOL] }
@Test [EOL] public void testLastOrdinalIndexOf() { [EOL]     assertEquals(-1, StringUtils.lastOrdinalIndexOf(null, "*", 42)); [EOL]     assertEquals(-1, StringUtils.lastOrdinalIndexOf("*", null, 42)); [EOL]     assertEquals(0, StringUtils.lastOrdinalIndexOf("", "", 42)); [EOL]     assertEquals(7, StringUtils.lastOrdinalIndexOf("aabaabaa", "a", 1)); [EOL]     assertEquals(6, StringUtils.lastOrdinalIndexOf("aabaabaa", "a", 2)); [EOL]     assertEquals(5, StringUtils.lastOrdinalIndexOf("aabaabaa", "b", 1)); [EOL]     assertEquals(2, StringUtils.lastOrdinalIndexOf("aabaabaa", "b", 2)); [EOL]     assertEquals(4, StringUtils.lastOrdinalIndexOf("aabaabaa", "ab", 1)); [EOL]     assertEquals(1, StringUtils.lastOrdinalIndexOf("aabaabaa", "ab", 2)); [EOL]     assertEquals(8, StringUtils.lastOrdinalIndexOf("aabaabaa", "", 1)); [EOL]     assertEquals(8, StringUtils.lastOrdinalIndexOf("aabaabaa", "", 2)); [EOL] }
@Test [EOL] public void testLastOrdinalIndexOf() { [EOL]     assertEquals(-1, StringUtils.lastOrdinalIndexOf(null, "*", 42)); [EOL]     assertEquals(-1, StringUtils.lastOrdinalIndexOf("*", null, 42)); [EOL]     assertEquals(0, StringUtils.lastOrdinalIndexOf("", "", 42)); [EOL]     assertEquals(7, StringUtils.lastOrdinalIndexOf("aabaabaa", "a", 1)); [EOL]     assertEquals(6, StringUtils.lastOrdinalIndexOf("aabaabaa", "a", 2)); [EOL]     assertEquals(5, StringUtils.lastOrdinalIndexOf("aabaabaa", "b", 1)); [EOL]     assertEquals(2, StringUtils.lastOrdinalIndexOf("aabaabaa", "b", 2)); [EOL]     assertEquals(4, StringUtils.lastOrdinalIndexOf("aabaabaa", "ab", 1)); [EOL]     assertEquals(1, StringUtils.lastOrdinalIndexOf("aabaabaa", "ab", 2)); [EOL]     assertEquals(8, StringUtils.lastOrdinalIndexOf("aabaabaa", "", 1)); [EOL]     assertEquals(8, StringUtils.lastOrdinalIndexOf("aabaabaa", "", 2)); [EOL] }
@Test [EOL] public void testLastOrdinalIndexOf() { [EOL]     assertEquals(-1, StringUtils.lastOrdinalIndexOf(null, "*", 42)); [EOL]     assertEquals(-1, StringUtils.lastOrdinalIndexOf("*", null, 42)); [EOL]     assertEquals(0, StringUtils.lastOrdinalIndexOf("", "", 42)); [EOL]     assertEquals(7, StringUtils.lastOrdinalIndexOf("aabaabaa", "a", 1)); [EOL]     assertEquals(6, StringUtils.lastOrdinalIndexOf("aabaabaa", "a", 2)); [EOL]     assertEquals(5, StringUtils.lastOrdinalIndexOf("aabaabaa", "b", 1)); [EOL]     assertEquals(2, StringUtils.lastOrdinalIndexOf("aabaabaa", "b", 2)); [EOL]     assertEquals(4, StringUtils.lastOrdinalIndexOf("aabaabaa", "ab", 1)); [EOL]     assertEquals(1, StringUtils.lastOrdinalIndexOf("aabaabaa", "ab", 2)); [EOL]     assertEquals(8, StringUtils.lastOrdinalIndexOf("aabaabaa", "", 1)); [EOL]     assertEquals(8, StringUtils.lastOrdinalIndexOf("aabaabaa", "", 2)); [EOL] }
@Test [EOL] public void testLastOrdinalIndexOf() { [EOL]     assertEquals(-1, StringUtils.lastOrdinalIndexOf(null, "*", 42)); [EOL]     assertEquals(-1, StringUtils.lastOrdinalIndexOf("*", null, 42)); [EOL]     assertEquals(0, StringUtils.lastOrdinalIndexOf("", "", 42)); [EOL]     assertEquals(7, StringUtils.lastOrdinalIndexOf("aabaabaa", "a", 1)); [EOL]     assertEquals(6, StringUtils.lastOrdinalIndexOf("aabaabaa", "a", 2)); [EOL]     assertEquals(5, StringUtils.lastOrdinalIndexOf("aabaabaa", "b", 1)); [EOL]     assertEquals(2, StringUtils.lastOrdinalIndexOf("aabaabaa", "b", 2)); [EOL]     assertEquals(4, StringUtils.lastOrdinalIndexOf("aabaabaa", "ab", 1)); [EOL]     assertEquals(1, StringUtils.lastOrdinalIndexOf("aabaabaa", "ab", 2)); [EOL]     assertEquals(8, StringUtils.lastOrdinalIndexOf("aabaabaa", "", 1)); [EOL]     assertEquals(8, StringUtils.lastOrdinalIndexOf("aabaabaa", "", 2)); [EOL] }
@Test [EOL] public void testLastOrdinalIndexOf() { [EOL]     assertEquals(-1, StringUtils.lastOrdinalIndexOf(null, "*", 42)); [EOL]     assertEquals(-1, StringUtils.lastOrdinalIndexOf("*", null, 42)); [EOL]     assertEquals(0, StringUtils.lastOrdinalIndexOf("", "", 42)); [EOL]     assertEquals(7, StringUtils.lastOrdinalIndexOf("aabaabaa", "a", 1)); [EOL]     assertEquals(6, StringUtils.lastOrdinalIndexOf("aabaabaa", "a", 2)); [EOL]     assertEquals(5, StringUtils.lastOrdinalIndexOf("aabaabaa", "b", 1)); [EOL]     assertEquals(2, StringUtils.lastOrdinalIndexOf("aabaabaa", "b", 2)); [EOL]     assertEquals(4, StringUtils.lastOrdinalIndexOf("aabaabaa", "ab", 1)); [EOL]     assertEquals(1, StringUtils.lastOrdinalIndexOf("aabaabaa", "ab", 2)); [EOL]     assertEquals(8, StringUtils.lastOrdinalIndexOf("aabaabaa", "", 1)); [EOL]     assertEquals(8, StringUtils.lastOrdinalIndexOf("aabaabaa", "", 2)); [EOL] }
@Test [EOL] public void testLastOrdinalIndexOf() { [EOL]     assertEquals(-1, StringUtils.lastOrdinalIndexOf(null, "*", 42)); [EOL]     assertEquals(-1, StringUtils.lastOrdinalIndexOf("*", null, 42)); [EOL]     assertEquals(0, StringUtils.lastOrdinalIndexOf("", "", 42)); [EOL]     assertEquals(7, StringUtils.lastOrdinalIndexOf("aabaabaa", "a", 1)); [EOL]     assertEquals(6, StringUtils.lastOrdinalIndexOf("aabaabaa", "a", 2)); [EOL]     assertEquals(5, StringUtils.lastOrdinalIndexOf("aabaabaa", "b", 1)); [EOL]     assertEquals(2, StringUtils.lastOrdinalIndexOf("aabaabaa", "b", 2)); [EOL]     assertEquals(4, StringUtils.lastOrdinalIndexOf("aabaabaa", "ab", 1)); [EOL]     assertEquals(1, StringUtils.lastOrdinalIndexOf("aabaabaa", "ab", 2)); [EOL]     assertEquals(8, StringUtils.lastOrdinalIndexOf("aabaabaa", "", 1)); [EOL]     assertEquals(8, StringUtils.lastOrdinalIndexOf("aabaabaa", "", 2)); [EOL] }
@Test [EOL] public void testLastOrdinalIndexOf() { [EOL]     assertEquals(-1, StringUtils.lastOrdinalIndexOf(null, "*", 42)); [EOL]     assertEquals(-1, StringUtils.lastOrdinalIndexOf("*", null, 42)); [EOL]     assertEquals(0, StringUtils.lastOrdinalIndexOf("", "", 42)); [EOL]     assertEquals(7, StringUtils.lastOrdinalIndexOf("aabaabaa", "a", 1)); [EOL]     assertEquals(6, StringUtils.lastOrdinalIndexOf("aabaabaa", "a", 2)); [EOL]     assertEquals(5, StringUtils.lastOrdinalIndexOf("aabaabaa", "b", 1)); [EOL]     assertEquals(2, StringUtils.lastOrdinalIndexOf("aabaabaa", "b", 2)); [EOL]     assertEquals(4, StringUtils.lastOrdinalIndexOf("aabaabaa", "ab", 1)); [EOL]     assertEquals(1, StringUtils.lastOrdinalIndexOf("aabaabaa", "ab", 2)); [EOL]     assertEquals(8, StringUtils.lastOrdinalIndexOf("aabaabaa", "", 1)); [EOL]     assertEquals(8, StringUtils.lastOrdinalIndexOf("aabaabaa", "", 2)); [EOL] }
@Test [EOL] public void testLastOrdinalIndexOf() { [EOL]     assertEquals(-1, StringUtils.lastOrdinalIndexOf(null, "*", 42)); [EOL]     assertEquals(-1, StringUtils.lastOrdinalIndexOf("*", null, 42)); [EOL]     assertEquals(0, StringUtils.lastOrdinalIndexOf("", "", 42)); [EOL]     assertEquals(7, StringUtils.lastOrdinalIndexOf("aabaabaa", "a", 1)); [EOL]     assertEquals(6, StringUtils.lastOrdinalIndexOf("aabaabaa", "a", 2)); [EOL]     assertEquals(5, StringUtils.lastOrdinalIndexOf("aabaabaa", "b", 1)); [EOL]     assertEquals(2, StringUtils.lastOrdinalIndexOf("aabaabaa", "b", 2)); [EOL]     assertEquals(4, StringUtils.lastOrdinalIndexOf("aabaabaa", "ab", 1)); [EOL]     assertEquals(1, StringUtils.lastOrdinalIndexOf("aabaabaa", "ab", 2)); [EOL]     assertEquals(8, StringUtils.lastOrdinalIndexOf("aabaabaa", "", 1)); [EOL]     assertEquals(8, StringUtils.lastOrdinalIndexOf("aabaabaa", "", 2)); [EOL] }
@Test [EOL] public void testLastOrdinalIndexOf() { [EOL]     assertEquals(-1, StringUtils.lastOrdinalIndexOf(null, "*", 42)); [EOL]     assertEquals(-1, StringUtils.lastOrdinalIndexOf("*", null, 42)); [EOL]     assertEquals(0, StringUtils.lastOrdinalIndexOf("", "", 42)); [EOL]     assertEquals(7, StringUtils.lastOrdinalIndexOf("aabaabaa", "a", 1)); [EOL]     assertEquals(6, StringUtils.lastOrdinalIndexOf("aabaabaa", "a", 2)); [EOL]     assertEquals(5, StringUtils.lastOrdinalIndexOf("aabaabaa", "b", 1)); [EOL]     assertEquals(2, StringUtils.lastOrdinalIndexOf("aabaabaa", "b", 2)); [EOL]     assertEquals(4, StringUtils.lastOrdinalIndexOf("aabaabaa", "ab", 1)); [EOL]     assertEquals(1, StringUtils.lastOrdinalIndexOf("aabaabaa", "ab", 2)); [EOL]     assertEquals(8, StringUtils.lastOrdinalIndexOf("aabaabaa", "", 1)); [EOL]     assertEquals(8, StringUtils.lastOrdinalIndexOf("aabaabaa", "", 2)); [EOL] }
@Test [EOL] public void testLastIndexOfIgnoreCase_StringInt() { [EOL]     assertEquals(-1, StringUtils.lastIndexOfIgnoreCase(null, null, 0)); [EOL]     assertEquals(-1, StringUtils.lastIndexOfIgnoreCase(null, null, -1)); [EOL]     assertEquals(-1, StringUtils.lastIndexOfIgnoreCase(null, "", 0)); [EOL]     assertEquals(-1, StringUtils.lastIndexOfIgnoreCase(null, "", -1)); [EOL]     assertEquals(-1, StringUtils.lastIndexOfIgnoreCase("", null, 0)); [EOL]     assertEquals(-1, StringUtils.lastIndexOfIgnoreCase("", null, -1)); [EOL]     assertEquals(0, StringUtils.lastIndexOfIgnoreCase("", "", 0)); [EOL]     assertEquals(-1, StringUtils.lastIndexOfIgnoreCase("", "", -1)); [EOL]     assertEquals(0, StringUtils.lastIndexOfIgnoreCase("", "", 9)); [EOL]     assertEquals(0, StringUtils.lastIndexOfIgnoreCase("abc", "", 0)); [EOL]     assertEquals(-1, StringUtils.lastIndexOfIgnoreCase("abc", "", -1)); [EOL]     assertEquals(3, StringUtils.lastIndexOfIgnoreCase("abc", "", 9)); [EOL]     assertEquals(7, StringUtils.lastIndexOfIgnoreCase("aabaabaa", "A", 8)); [EOL]     assertEquals(5, StringUtils.lastIndexOfIgnoreCase("aabaabaa", "B", 8)); [EOL]     assertEquals(4, StringUtils.lastIndexOfIgnoreCase("aabaabaa", "AB", 8)); [EOL]     assertEquals(2, StringUtils.lastIndexOfIgnoreCase("aabaabaa", "B", 3)); [EOL]     assertEquals(5, StringUtils.lastIndexOfIgnoreCase("aabaabaa", "B", 9)); [EOL]     assertEquals(-1, StringUtils.lastIndexOfIgnoreCase("aabaabaa", "B", -1)); [EOL]     assertEquals(-1, StringUtils.lastIndexOfIgnoreCase("aabaabaa", "B", 0)); [EOL]     assertEquals(0, StringUtils.lastIndexOfIgnoreCase("aabaabaa", "A", 0)); [EOL]     assertEquals(1, StringUtils.lastIndexOfIgnoreCase("aab", "AB", 1)); [EOL] }
@Test [EOL] public void testContains_String() { [EOL]     assertFalse(StringUtils.contains(null, null)); [EOL]     assertFalse(StringUtils.contains(null, "")); [EOL]     assertFalse(StringUtils.contains(null, "a")); [EOL]     assertFalse(StringUtils.contains("", null)); [EOL]     assertTrue(StringUtils.contains("", "")); [EOL]     assertFalse(StringUtils.contains("", "a")); [EOL]     assertTrue(StringUtils.contains("abc", "a")); [EOL]     assertTrue(StringUtils.contains("abc", "b")); [EOL]     assertTrue(StringUtils.contains("abc", "c")); [EOL]     assertTrue(StringUtils.contains("abc", "abc")); [EOL]     assertFalse(StringUtils.contains("abc", "z")); [EOL] }
@Test [EOL] public void testContainsWhitespace() { [EOL]     assertFalse(StringUtils.containsWhitespace("")); [EOL]     assertTrue(StringUtils.containsWhitespace(" ")); [EOL]     assertFalse(StringUtils.containsWhitespace("a")); [EOL]     assertTrue(StringUtils.containsWhitespace("a ")); [EOL]     assertTrue(StringUtils.containsWhitespace(" a")); [EOL]     assertTrue(StringUtils.containsWhitespace("a\t")); [EOL]     assertTrue(StringUtils.containsWhitespace("\n")); [EOL] }
@Test [EOL] public void testContainsWhitespace() { [EOL]     assertFalse(StringUtils.containsWhitespace("")); [EOL]     assertTrue(StringUtils.containsWhitespace(" ")); [EOL]     assertFalse(StringUtils.containsWhitespace("a")); [EOL]     assertTrue(StringUtils.containsWhitespace("a ")); [EOL]     assertTrue(StringUtils.containsWhitespace(" a")); [EOL]     assertTrue(StringUtils.containsWhitespace("a\t")); [EOL]     assertTrue(StringUtils.containsWhitespace("\n")); [EOL] }
@Test [EOL] public void testContainsWhitespace() { [EOL]     assertFalse(StringUtils.containsWhitespace("")); [EOL]     assertTrue(StringUtils.containsWhitespace(" ")); [EOL]     assertFalse(StringUtils.containsWhitespace("a")); [EOL]     assertTrue(StringUtils.containsWhitespace("a ")); [EOL]     assertTrue(StringUtils.containsWhitespace(" a")); [EOL]     assertTrue(StringUtils.containsWhitespace("a\t")); [EOL]     assertTrue(StringUtils.containsWhitespace("\n")); [EOL] }
@Test [EOL] public void testContainsWhitespace() { [EOL]     assertFalse(StringUtils.containsWhitespace("")); [EOL]     assertTrue(StringUtils.containsWhitespace(" ")); [EOL]     assertFalse(StringUtils.containsWhitespace("a")); [EOL]     assertTrue(StringUtils.containsWhitespace("a ")); [EOL]     assertTrue(StringUtils.containsWhitespace(" a")); [EOL]     assertTrue(StringUtils.containsWhitespace("a\t")); [EOL]     assertTrue(StringUtils.containsWhitespace("\n")); [EOL] }
@Test [EOL] public void testIndexOfAnyBut_StringCharArrayWithSupplementaryChars() { [EOL]     assertEquals(2, StringUtils.indexOfAnyBut(CharU20000 + CharU20001, CharU20000.toCharArray())); [EOL]     assertEquals(0, StringUtils.indexOfAnyBut(CharU20000 + CharU20001, CharU20001.toCharArray())); [EOL]     assertEquals(-1, StringUtils.indexOfAnyBut(CharU20000, CharU20000.toCharArray())); [EOL]     assertEquals(0, StringUtils.indexOfAnyBut(CharU20000, CharU20001.toCharArray())); [EOL] }
@Test [EOL] public void testIndexOfAnyBut_StringCharArrayWithSupplementaryChars() { [EOL]     assertEquals(2, StringUtils.indexOfAnyBut(CharU20000 + CharU20001, CharU20000.toCharArray())); [EOL]     assertEquals(0, StringUtils.indexOfAnyBut(CharU20000 + CharU20001, CharU20001.toCharArray())); [EOL]     assertEquals(-1, StringUtils.indexOfAnyBut(CharU20000, CharU20000.toCharArray())); [EOL]     assertEquals(0, StringUtils.indexOfAnyBut(CharU20000, CharU20001.toCharArray())); [EOL] }
@Test [EOL] public void testLastIndexOfAny_StringStringArray() { [EOL]     assertEquals(-1, StringUtils.lastIndexOfAny(null, (CharSequence) null)); [EOL]     assertEquals(-1, StringUtils.lastIndexOfAny(null, (CharSequence[]) null)); [EOL]     assertEquals(-1, StringUtils.lastIndexOfAny(null)); [EOL]     assertEquals(-1, StringUtils.lastIndexOfAny(null, FOOBAR_SUB_ARRAY)); [EOL]     assertEquals(-1, StringUtils.lastIndexOfAny(FOOBAR, (CharSequence) null)); [EOL]     assertEquals(-1, StringUtils.lastIndexOfAny(FOOBAR, (CharSequence[]) null)); [EOL]     assertEquals(-1, StringUtils.lastIndexOfAny(FOOBAR)); [EOL]     assertEquals(3, StringUtils.lastIndexOfAny(FOOBAR, FOOBAR_SUB_ARRAY)); [EOL]     assertEquals(-1, StringUtils.lastIndexOfAny(FOOBAR, new String[0])); [EOL]     assertEquals(-1, StringUtils.lastIndexOfAny(null, new String[0])); [EOL]     assertEquals(-1, StringUtils.lastIndexOfAny("", new String[0])); [EOL]     assertEquals(-1, StringUtils.lastIndexOfAny(FOOBAR, new String[] { "llll" })); [EOL]     assertEquals(6, StringUtils.lastIndexOfAny(FOOBAR, new String[] { "" })); [EOL]     assertEquals(0, StringUtils.lastIndexOfAny("", new String[] { "" })); [EOL]     assertEquals(-1, StringUtils.lastIndexOfAny("", new String[] { "a" })); [EOL]     assertEquals(-1, StringUtils.lastIndexOfAny("", new String[] { null })); [EOL]     assertEquals(-1, StringUtils.lastIndexOfAny(FOOBAR, new String[] { null })); [EOL]     assertEquals(-1, StringUtils.lastIndexOfAny(null, new String[] { null })); [EOL] }
@Test [EOL] public void testMid_String() { [EOL]     assertSame(null, StringUtils.mid(null, -1, 0)); [EOL]     assertSame(null, StringUtils.mid(null, 0, -1)); [EOL]     assertSame(null, StringUtils.mid(null, 3, 0)); [EOL]     assertSame(null, StringUtils.mid(null, 3, 2)); [EOL]     assertEquals("", StringUtils.mid("", 0, -1)); [EOL]     assertEquals("", StringUtils.mid("", 0, 0)); [EOL]     assertEquals("", StringUtils.mid("", 0, 2)); [EOL]     assertEquals("", StringUtils.mid(FOOBAR, 3, -1)); [EOL]     assertEquals("", StringUtils.mid(FOOBAR, 3, 0)); [EOL]     assertEquals("b", StringUtils.mid(FOOBAR, 3, 1)); [EOL]     assertEquals(FOO, StringUtils.mid(FOOBAR, 0, 3)); [EOL]     assertEquals(BAR, StringUtils.mid(FOOBAR, 3, 3)); [EOL]     assertEquals(FOOBAR, StringUtils.mid(FOOBAR, 0, 80)); [EOL]     assertEquals(BAR, StringUtils.mid(FOOBAR, 3, 80)); [EOL]     assertEquals("", StringUtils.mid(FOOBAR, 9, 3)); [EOL]     assertEquals(FOO, StringUtils.mid(FOOBAR, -1, 3)); [EOL] }
@Test [EOL] public void testMid_String() { [EOL]     assertSame(null, StringUtils.mid(null, -1, 0)); [EOL]     assertSame(null, StringUtils.mid(null, 0, -1)); [EOL]     assertSame(null, StringUtils.mid(null, 3, 0)); [EOL]     assertSame(null, StringUtils.mid(null, 3, 2)); [EOL]     assertEquals("", StringUtils.mid("", 0, -1)); [EOL]     assertEquals("", StringUtils.mid("", 0, 0)); [EOL]     assertEquals("", StringUtils.mid("", 0, 2)); [EOL]     assertEquals("", StringUtils.mid(FOOBAR, 3, -1)); [EOL]     assertEquals("", StringUtils.mid(FOOBAR, 3, 0)); [EOL]     assertEquals("b", StringUtils.mid(FOOBAR, 3, 1)); [EOL]     assertEquals(FOO, StringUtils.mid(FOOBAR, 0, 3)); [EOL]     assertEquals(BAR, StringUtils.mid(FOOBAR, 3, 3)); [EOL]     assertEquals(FOOBAR, StringUtils.mid(FOOBAR, 0, 80)); [EOL]     assertEquals(BAR, StringUtils.mid(FOOBAR, 3, 80)); [EOL]     assertEquals("", StringUtils.mid(FOOBAR, 9, 3)); [EOL]     assertEquals(FOO, StringUtils.mid(FOOBAR, -1, 3)); [EOL] }
@Test [EOL] public void testMid_String() { [EOL]     assertSame(null, StringUtils.mid(null, -1, 0)); [EOL]     assertSame(null, StringUtils.mid(null, 0, -1)); [EOL]     assertSame(null, StringUtils.mid(null, 3, 0)); [EOL]     assertSame(null, StringUtils.mid(null, 3, 2)); [EOL]     assertEquals("", StringUtils.mid("", 0, -1)); [EOL]     assertEquals("", StringUtils.mid("", 0, 0)); [EOL]     assertEquals("", StringUtils.mid("", 0, 2)); [EOL]     assertEquals("", StringUtils.mid(FOOBAR, 3, -1)); [EOL]     assertEquals("", StringUtils.mid(FOOBAR, 3, 0)); [EOL]     assertEquals("b", StringUtils.mid(FOOBAR, 3, 1)); [EOL]     assertEquals(FOO, StringUtils.mid(FOOBAR, 0, 3)); [EOL]     assertEquals(BAR, StringUtils.mid(FOOBAR, 3, 3)); [EOL]     assertEquals(FOOBAR, StringUtils.mid(FOOBAR, 0, 80)); [EOL]     assertEquals(BAR, StringUtils.mid(FOOBAR, 3, 80)); [EOL]     assertEquals("", StringUtils.mid(FOOBAR, 9, 3)); [EOL]     assertEquals(FOO, StringUtils.mid(FOOBAR, -1, 3)); [EOL] }
@Test [EOL] public void testMid_String() { [EOL]     assertSame(null, StringUtils.mid(null, -1, 0)); [EOL]     assertSame(null, StringUtils.mid(null, 0, -1)); [EOL]     assertSame(null, StringUtils.mid(null, 3, 0)); [EOL]     assertSame(null, StringUtils.mid(null, 3, 2)); [EOL]     assertEquals("", StringUtils.mid("", 0, -1)); [EOL]     assertEquals("", StringUtils.mid("", 0, 0)); [EOL]     assertEquals("", StringUtils.mid("", 0, 2)); [EOL]     assertEquals("", StringUtils.mid(FOOBAR, 3, -1)); [EOL]     assertEquals("", StringUtils.mid(FOOBAR, 3, 0)); [EOL]     assertEquals("b", StringUtils.mid(FOOBAR, 3, 1)); [EOL]     assertEquals(FOO, StringUtils.mid(FOOBAR, 0, 3)); [EOL]     assertEquals(BAR, StringUtils.mid(FOOBAR, 3, 3)); [EOL]     assertEquals(FOOBAR, StringUtils.mid(FOOBAR, 0, 80)); [EOL]     assertEquals(BAR, StringUtils.mid(FOOBAR, 3, 80)); [EOL]     assertEquals("", StringUtils.mid(FOOBAR, 9, 3)); [EOL]     assertEquals(FOO, StringUtils.mid(FOOBAR, -1, 3)); [EOL] }
@Test [EOL] public void testMid_String() { [EOL]     assertSame(null, StringUtils.mid(null, -1, 0)); [EOL]     assertSame(null, StringUtils.mid(null, 0, -1)); [EOL]     assertSame(null, StringUtils.mid(null, 3, 0)); [EOL]     assertSame(null, StringUtils.mid(null, 3, 2)); [EOL]     assertEquals("", StringUtils.mid("", 0, -1)); [EOL]     assertEquals("", StringUtils.mid("", 0, 0)); [EOL]     assertEquals("", StringUtils.mid("", 0, 2)); [EOL]     assertEquals("", StringUtils.mid(FOOBAR, 3, -1)); [EOL]     assertEquals("", StringUtils.mid(FOOBAR, 3, 0)); [EOL]     assertEquals("b", StringUtils.mid(FOOBAR, 3, 1)); [EOL]     assertEquals(FOO, StringUtils.mid(FOOBAR, 0, 3)); [EOL]     assertEquals(BAR, StringUtils.mid(FOOBAR, 3, 3)); [EOL]     assertEquals(FOOBAR, StringUtils.mid(FOOBAR, 0, 80)); [EOL]     assertEquals(BAR, StringUtils.mid(FOOBAR, 3, 80)); [EOL]     assertEquals("", StringUtils.mid(FOOBAR, 9, 3)); [EOL]     assertEquals(FOO, StringUtils.mid(FOOBAR, -1, 3)); [EOL] }
@Test [EOL] public void testMid_String() { [EOL]     assertSame(null, StringUtils.mid(null, -1, 0)); [EOL]     assertSame(null, StringUtils.mid(null, 0, -1)); [EOL]     assertSame(null, StringUtils.mid(null, 3, 0)); [EOL]     assertSame(null, StringUtils.mid(null, 3, 2)); [EOL]     assertEquals("", StringUtils.mid("", 0, -1)); [EOL]     assertEquals("", StringUtils.mid("", 0, 0)); [EOL]     assertEquals("", StringUtils.mid("", 0, 2)); [EOL]     assertEquals("", StringUtils.mid(FOOBAR, 3, -1)); [EOL]     assertEquals("", StringUtils.mid(FOOBAR, 3, 0)); [EOL]     assertEquals("b", StringUtils.mid(FOOBAR, 3, 1)); [EOL]     assertEquals(FOO, StringUtils.mid(FOOBAR, 0, 3)); [EOL]     assertEquals(BAR, StringUtils.mid(FOOBAR, 3, 3)); [EOL]     assertEquals(FOOBAR, StringUtils.mid(FOOBAR, 0, 80)); [EOL]     assertEquals(BAR, StringUtils.mid(FOOBAR, 3, 80)); [EOL]     assertEquals("", StringUtils.mid(FOOBAR, 9, 3)); [EOL]     assertEquals(FOO, StringUtils.mid(FOOBAR, -1, 3)); [EOL] }
@Test [EOL] public void testSubstringBefore_StringString() { [EOL]     assertEquals("foo", StringUtils.substringBefore("fooXXbarXXbaz", "XX")); [EOL]     assertEquals(null, StringUtils.substringBefore(null, null)); [EOL]     assertEquals(null, StringUtils.substringBefore(null, "")); [EOL]     assertEquals(null, StringUtils.substringBefore(null, "XX")); [EOL]     assertEquals("", StringUtils.substringBefore("", null)); [EOL]     assertEquals("", StringUtils.substringBefore("", "")); [EOL]     assertEquals("", StringUtils.substringBefore("", "XX")); [EOL]     assertEquals("foo", StringUtils.substringBefore("foo", null)); [EOL]     assertEquals("foo", StringUtils.substringBefore("foo", "b")); [EOL]     assertEquals("f", StringUtils.substringBefore("foot", "o")); [EOL]     assertEquals("", StringUtils.substringBefore("abc", "a")); [EOL]     assertEquals("a", StringUtils.substringBefore("abcba", "b")); [EOL]     assertEquals("ab", StringUtils.substringBefore("abc", "c")); [EOL]     assertEquals("", StringUtils.substringBefore("abc", "")); [EOL] }
@Test [EOL] public void testSubstringBefore_StringString() { [EOL]     assertEquals("foo", StringUtils.substringBefore("fooXXbarXXbaz", "XX")); [EOL]     assertEquals(null, StringUtils.substringBefore(null, null)); [EOL]     assertEquals(null, StringUtils.substringBefore(null, "")); [EOL]     assertEquals(null, StringUtils.substringBefore(null, "XX")); [EOL]     assertEquals("", StringUtils.substringBefore("", null)); [EOL]     assertEquals("", StringUtils.substringBefore("", "")); [EOL]     assertEquals("", StringUtils.substringBefore("", "XX")); [EOL]     assertEquals("foo", StringUtils.substringBefore("foo", null)); [EOL]     assertEquals("foo", StringUtils.substringBefore("foo", "b")); [EOL]     assertEquals("f", StringUtils.substringBefore("foot", "o")); [EOL]     assertEquals("", StringUtils.substringBefore("abc", "a")); [EOL]     assertEquals("a", StringUtils.substringBefore("abcba", "b")); [EOL]     assertEquals("ab", StringUtils.substringBefore("abc", "c")); [EOL]     assertEquals("", StringUtils.substringBefore("abc", "")); [EOL] }
@Test [EOL] public void testSubstringBefore_StringString() { [EOL]     assertEquals("foo", StringUtils.substringBefore("fooXXbarXXbaz", "XX")); [EOL]     assertEquals(null, StringUtils.substringBefore(null, null)); [EOL]     assertEquals(null, StringUtils.substringBefore(null, "")); [EOL]     assertEquals(null, StringUtils.substringBefore(null, "XX")); [EOL]     assertEquals("", StringUtils.substringBefore("", null)); [EOL]     assertEquals("", StringUtils.substringBefore("", "")); [EOL]     assertEquals("", StringUtils.substringBefore("", "XX")); [EOL]     assertEquals("foo", StringUtils.substringBefore("foo", null)); [EOL]     assertEquals("foo", StringUtils.substringBefore("foo", "b")); [EOL]     assertEquals("f", StringUtils.substringBefore("foot", "o")); [EOL]     assertEquals("", StringUtils.substringBefore("abc", "a")); [EOL]     assertEquals("a", StringUtils.substringBefore("abcba", "b")); [EOL]     assertEquals("ab", StringUtils.substringBefore("abc", "c")); [EOL]     assertEquals("", StringUtils.substringBefore("abc", "")); [EOL] }
@Test [EOL] public void testSubstringBefore_StringString() { [EOL]     assertEquals("foo", StringUtils.substringBefore("fooXXbarXXbaz", "XX")); [EOL]     assertEquals(null, StringUtils.substringBefore(null, null)); [EOL]     assertEquals(null, StringUtils.substringBefore(null, "")); [EOL]     assertEquals(null, StringUtils.substringBefore(null, "XX")); [EOL]     assertEquals("", StringUtils.substringBefore("", null)); [EOL]     assertEquals("", StringUtils.substringBefore("", "")); [EOL]     assertEquals("", StringUtils.substringBefore("", "XX")); [EOL]     assertEquals("foo", StringUtils.substringBefore("foo", null)); [EOL]     assertEquals("foo", StringUtils.substringBefore("foo", "b")); [EOL]     assertEquals("f", StringUtils.substringBefore("foot", "o")); [EOL]     assertEquals("", StringUtils.substringBefore("abc", "a")); [EOL]     assertEquals("a", StringUtils.substringBefore("abcba", "b")); [EOL]     assertEquals("ab", StringUtils.substringBefore("abc", "c")); [EOL]     assertEquals("", StringUtils.substringBefore("abc", "")); [EOL] }
@Test [EOL] public void testSubstringBefore_StringString() { [EOL]     assertEquals("foo", StringUtils.substringBefore("fooXXbarXXbaz", "XX")); [EOL]     assertEquals(null, StringUtils.substringBefore(null, null)); [EOL]     assertEquals(null, StringUtils.substringBefore(null, "")); [EOL]     assertEquals(null, StringUtils.substringBefore(null, "XX")); [EOL]     assertEquals("", StringUtils.substringBefore("", null)); [EOL]     assertEquals("", StringUtils.substringBefore("", "")); [EOL]     assertEquals("", StringUtils.substringBefore("", "XX")); [EOL]     assertEquals("foo", StringUtils.substringBefore("foo", null)); [EOL]     assertEquals("foo", StringUtils.substringBefore("foo", "b")); [EOL]     assertEquals("f", StringUtils.substringBefore("foot", "o")); [EOL]     assertEquals("", StringUtils.substringBefore("abc", "a")); [EOL]     assertEquals("a", StringUtils.substringBefore("abcba", "b")); [EOL]     assertEquals("ab", StringUtils.substringBefore("abc", "c")); [EOL]     assertEquals("", StringUtils.substringBefore("abc", "")); [EOL] }
@Test [EOL] public void testSplit_StringString_StringStringInt() { [EOL]     assertArrayEquals(null, StringUtils.split(null, ".")); [EOL]     assertArrayEquals(null, StringUtils.split(null, ".", 3)); [EOL]     assertEquals(0, StringUtils.split("", ".").length); [EOL]     assertEquals(0, StringUtils.split("", ".", 3).length); [EOL]     innerTestSplit('.', ".", ' '); [EOL]     innerTestSplit('.', ".", ','); [EOL]     innerTestSplit('.', ".,", 'x'); [EOL]     for (int i = 0; i < WHITESPACE.length(); i++) { [EOL]         for (int j = 0; j < NON_WHITESPACE.length(); j++) { [EOL]             innerTestSplit(WHITESPACE.charAt(i), null, NON_WHITESPACE.charAt(j)); [EOL]             innerTestSplit(WHITESPACE.charAt(i), String.valueOf(WHITESPACE.charAt(i)), NON_WHITESPACE.charAt(j)); [EOL]         } [EOL]     } [EOL]     String[] results; [EOL]     final String[] expectedResults = { "ab", "de fg" }; [EOL]     results = StringUtils.split("ab   de fg", null, 2); [EOL]     assertEquals(expectedResults.length, results.length); [EOL]     for (int i = 0; i < expectedResults.length; i++) { [EOL]         assertEquals(expectedResults[i], results[i]); [EOL]     } [EOL]     final String[] expectedResults2 = { "ab", "cd:ef" }; [EOL]     results = StringUtils.split("ab:cd:ef", ":", 2); [EOL]     assertEquals(expectedResults2.length, results.length); [EOL]     for (int i = 0; i < expectedResults2.length; i++) { [EOL]         assertEquals(expectedResults2[i], results[i]); [EOL]     } [EOL] }
@Test [EOL] public void testSplit_StringString_StringStringInt() { [EOL]     assertArrayEquals(null, StringUtils.split(null, ".")); [EOL]     assertArrayEquals(null, StringUtils.split(null, ".", 3)); [EOL]     assertEquals(0, StringUtils.split("", ".").length); [EOL]     assertEquals(0, StringUtils.split("", ".", 3).length); [EOL]     innerTestSplit('.', ".", ' '); [EOL]     innerTestSplit('.', ".", ','); [EOL]     innerTestSplit('.', ".,", 'x'); [EOL]     for (int i = 0; i < WHITESPACE.length(); i++) { [EOL]         for (int j = 0; j < NON_WHITESPACE.length(); j++) { [EOL]             innerTestSplit(WHITESPACE.charAt(i), null, NON_WHITESPACE.charAt(j)); [EOL]             innerTestSplit(WHITESPACE.charAt(i), String.valueOf(WHITESPACE.charAt(i)), NON_WHITESPACE.charAt(j)); [EOL]         } [EOL]     } [EOL]     String[] results; [EOL]     final String[] expectedResults = { "ab", "de fg" }; [EOL]     results = StringUtils.split("ab   de fg", null, 2); [EOL]     assertEquals(expectedResults.length, results.length); [EOL]     for (int i = 0; i < expectedResults.length; i++) { [EOL]         assertEquals(expectedResults[i], results[i]); [EOL]     } [EOL]     final String[] expectedResults2 = { "ab", "cd:ef" }; [EOL]     results = StringUtils.split("ab:cd:ef", ":", 2); [EOL]     assertEquals(expectedResults2.length, results.length); [EOL]     for (int i = 0; i < expectedResults2.length; i++) { [EOL]         assertEquals(expectedResults2[i], results[i]); [EOL]     } [EOL] }
@Test [EOL] public void testSplit_StringString_StringStringInt() { [EOL]     assertArrayEquals(null, StringUtils.split(null, ".")); [EOL]     assertArrayEquals(null, StringUtils.split(null, ".", 3)); [EOL]     assertEquals(0, StringUtils.split("", ".").length); [EOL]     assertEquals(0, StringUtils.split("", ".", 3).length); [EOL]     innerTestSplit('.', ".", ' '); [EOL]     innerTestSplit('.', ".", ','); [EOL]     innerTestSplit('.', ".,", 'x'); [EOL]     for (int i = 0; i < WHITESPACE.length(); i++) { [EOL]         for (int j = 0; j < NON_WHITESPACE.length(); j++) { [EOL]             innerTestSplit(WHITESPACE.charAt(i), null, NON_WHITESPACE.charAt(j)); [EOL]             innerTestSplit(WHITESPACE.charAt(i), String.valueOf(WHITESPACE.charAt(i)), NON_WHITESPACE.charAt(j)); [EOL]         } [EOL]     } [EOL]     String[] results; [EOL]     final String[] expectedResults = { "ab", "de fg" }; [EOL]     results = StringUtils.split("ab   de fg", null, 2); [EOL]     assertEquals(expectedResults.length, results.length); [EOL]     for (int i = 0; i < expectedResults.length; i++) { [EOL]         assertEquals(expectedResults[i], results[i]); [EOL]     } [EOL]     final String[] expectedResults2 = { "ab", "cd:ef" }; [EOL]     results = StringUtils.split("ab:cd:ef", ":", 2); [EOL]     assertEquals(expectedResults2.length, results.length); [EOL]     for (int i = 0; i < expectedResults2.length; i++) { [EOL]         assertEquals(expectedResults2[i], results[i]); [EOL]     } [EOL] }
@Test [EOL] public void testSplit_StringString_StringStringInt() { [EOL]     assertArrayEquals(null, StringUtils.split(null, ".")); [EOL]     assertArrayEquals(null, StringUtils.split(null, ".", 3)); [EOL]     assertEquals(0, StringUtils.split("", ".").length); [EOL]     assertEquals(0, StringUtils.split("", ".", 3).length); [EOL]     innerTestSplit('.', ".", ' '); [EOL]     innerTestSplit('.', ".", ','); [EOL]     innerTestSplit('.', ".,", 'x'); [EOL]     for (int i = 0; i < WHITESPACE.length(); i++) { [EOL]         for (int j = 0; j < NON_WHITESPACE.length(); j++) { [EOL]             innerTestSplit(WHITESPACE.charAt(i), null, NON_WHITESPACE.charAt(j)); [EOL]             innerTestSplit(WHITESPACE.charAt(i), String.valueOf(WHITESPACE.charAt(i)), NON_WHITESPACE.charAt(j)); [EOL]         } [EOL]     } [EOL]     String[] results; [EOL]     final String[] expectedResults = { "ab", "de fg" }; [EOL]     results = StringUtils.split("ab   de fg", null, 2); [EOL]     assertEquals(expectedResults.length, results.length); [EOL]     for (int i = 0; i < expectedResults.length; i++) { [EOL]         assertEquals(expectedResults[i], results[i]); [EOL]     } [EOL]     final String[] expectedResults2 = { "ab", "cd:ef" }; [EOL]     results = StringUtils.split("ab:cd:ef", ":", 2); [EOL]     assertEquals(expectedResults2.length, results.length); [EOL]     for (int i = 0; i < expectedResults2.length; i++) { [EOL]         assertEquals(expectedResults2[i], results[i]); [EOL]     } [EOL] }
@Test [EOL] public void testSplit_StringString_StringStringInt() { [EOL]     assertArrayEquals(null, StringUtils.split(null, ".")); [EOL]     assertArrayEquals(null, StringUtils.split(null, ".", 3)); [EOL]     assertEquals(0, StringUtils.split("", ".").length); [EOL]     assertEquals(0, StringUtils.split("", ".", 3).length); [EOL]     innerTestSplit('.', ".", ' '); [EOL]     innerTestSplit('.', ".", ','); [EOL]     innerTestSplit('.', ".,", 'x'); [EOL]     for (int i = 0; i < WHITESPACE.length(); i++) { [EOL]         for (int j = 0; j < NON_WHITESPACE.length(); j++) { [EOL]             innerTestSplit(WHITESPACE.charAt(i), null, NON_WHITESPACE.charAt(j)); [EOL]             innerTestSplit(WHITESPACE.charAt(i), String.valueOf(WHITESPACE.charAt(i)), NON_WHITESPACE.charAt(j)); [EOL]         } [EOL]     } [EOL]     String[] results; [EOL]     final String[] expectedResults = { "ab", "de fg" }; [EOL]     results = StringUtils.split("ab   de fg", null, 2); [EOL]     assertEquals(expectedResults.length, results.length); [EOL]     for (int i = 0; i < expectedResults.length; i++) { [EOL]         assertEquals(expectedResults[i], results[i]); [EOL]     } [EOL]     final String[] expectedResults2 = { "ab", "cd:ef" }; [EOL]     results = StringUtils.split("ab:cd:ef", ":", 2); [EOL]     assertEquals(expectedResults2.length, results.length); [EOL]     for (int i = 0; i < expectedResults2.length; i++) { [EOL]         assertEquals(expectedResults2[i], results[i]); [EOL]     } [EOL] }
@Test [EOL] public void testSplit_StringString_StringStringInt() { [EOL]     assertArrayEquals(null, StringUtils.split(null, ".")); [EOL]     assertArrayEquals(null, StringUtils.split(null, ".", 3)); [EOL]     assertEquals(0, StringUtils.split("", ".").length); [EOL]     assertEquals(0, StringUtils.split("", ".", 3).length); [EOL]     innerTestSplit('.', ".", ' '); [EOL]     innerTestSplit('.', ".", ','); [EOL]     innerTestSplit('.', ".,", 'x'); [EOL]     for (int i = 0; i < WHITESPACE.length(); i++) { [EOL]         for (int j = 0; j < NON_WHITESPACE.length(); j++) { [EOL]             innerTestSplit(WHITESPACE.charAt(i), null, NON_WHITESPACE.charAt(j)); [EOL]             innerTestSplit(WHITESPACE.charAt(i), String.valueOf(WHITESPACE.charAt(i)), NON_WHITESPACE.charAt(j)); [EOL]         } [EOL]     } [EOL]     String[] results; [EOL]     final String[] expectedResults = { "ab", "de fg" }; [EOL]     results = StringUtils.split("ab   de fg", null, 2); [EOL]     assertEquals(expectedResults.length, results.length); [EOL]     for (int i = 0; i < expectedResults.length; i++) { [EOL]         assertEquals(expectedResults[i], results[i]); [EOL]     } [EOL]     final String[] expectedResults2 = { "ab", "cd:ef" }; [EOL]     results = StringUtils.split("ab:cd:ef", ":", 2); [EOL]     assertEquals(expectedResults2.length, results.length); [EOL]     for (int i = 0; i < expectedResults2.length; i++) { [EOL]         assertEquals(expectedResults2[i], results[i]); [EOL]     } [EOL] }
@Test [EOL] public void testSplit_StringString_StringStringInt() { [EOL]     assertArrayEquals(null, StringUtils.split(null, ".")); [EOL]     assertArrayEquals(null, StringUtils.split(null, ".", 3)); [EOL]     assertEquals(0, StringUtils.split("", ".").length); [EOL]     assertEquals(0, StringUtils.split("", ".", 3).length); [EOL]     innerTestSplit('.', ".", ' '); [EOL]     innerTestSplit('.', ".", ','); [EOL]     innerTestSplit('.', ".,", 'x'); [EOL]     for (int i = 0; i < WHITESPACE.length(); i++) { [EOL]         for (int j = 0; j < NON_WHITESPACE.length(); j++) { [EOL]             innerTestSplit(WHITESPACE.charAt(i), null, NON_WHITESPACE.charAt(j)); [EOL]             innerTestSplit(WHITESPACE.charAt(i), String.valueOf(WHITESPACE.charAt(i)), NON_WHITESPACE.charAt(j)); [EOL]         } [EOL]     } [EOL]     String[] results; [EOL]     final String[] expectedResults = { "ab", "de fg" }; [EOL]     results = StringUtils.split("ab   de fg", null, 2); [EOL]     assertEquals(expectedResults.length, results.length); [EOL]     for (int i = 0; i < expectedResults.length; i++) { [EOL]         assertEquals(expectedResults[i], results[i]); [EOL]     } [EOL]     final String[] expectedResults2 = { "ab", "cd:ef" }; [EOL]     results = StringUtils.split("ab:cd:ef", ":", 2); [EOL]     assertEquals(expectedResults2.length, results.length); [EOL]     for (int i = 0; i < expectedResults2.length; i++) { [EOL]         assertEquals(expectedResults2[i], results[i]); [EOL]     } [EOL] }
@Test [EOL] public void testSplit_StringString_StringStringInt() { [EOL]     assertArrayEquals(null, StringUtils.split(null, ".")); [EOL]     assertArrayEquals(null, StringUtils.split(null, ".", 3)); [EOL]     assertEquals(0, StringUtils.split("", ".").length); [EOL]     assertEquals(0, StringUtils.split("", ".", 3).length); [EOL]     innerTestSplit('.', ".", ' '); [EOL]     innerTestSplit('.', ".", ','); [EOL]     innerTestSplit('.', ".,", 'x'); [EOL]     for (int i = 0; i < WHITESPACE.length(); i++) { [EOL]         for (int j = 0; j < NON_WHITESPACE.length(); j++) { [EOL]             innerTestSplit(WHITESPACE.charAt(i), null, NON_WHITESPACE.charAt(j)); [EOL]             innerTestSplit(WHITESPACE.charAt(i), String.valueOf(WHITESPACE.charAt(i)), NON_WHITESPACE.charAt(j)); [EOL]         } [EOL]     } [EOL]     String[] results; [EOL]     final String[] expectedResults = { "ab", "de fg" }; [EOL]     results = StringUtils.split("ab   de fg", null, 2); [EOL]     assertEquals(expectedResults.length, results.length); [EOL]     for (int i = 0; i < expectedResults.length; i++) { [EOL]         assertEquals(expectedResults[i], results[i]); [EOL]     } [EOL]     final String[] expectedResults2 = { "ab", "cd:ef" }; [EOL]     results = StringUtils.split("ab:cd:ef", ":", 2); [EOL]     assertEquals(expectedResults2.length, results.length); [EOL]     for (int i = 0; i < expectedResults2.length; i++) { [EOL]         assertEquals(expectedResults2[i], results[i]); [EOL]     } [EOL] }
@Test [EOL] public void testSplit_StringString_StringStringInt() { [EOL]     assertArrayEquals(null, StringUtils.split(null, ".")); [EOL]     assertArrayEquals(null, StringUtils.split(null, ".", 3)); [EOL]     assertEquals(0, StringUtils.split("", ".").length); [EOL]     assertEquals(0, StringUtils.split("", ".", 3).length); [EOL]     innerTestSplit('.', ".", ' '); [EOL]     innerTestSplit('.', ".", ','); [EOL]     innerTestSplit('.', ".,", 'x'); [EOL]     for (int i = 0; i < WHITESPACE.length(); i++) { [EOL]         for (int j = 0; j < NON_WHITESPACE.length(); j++) { [EOL]             innerTestSplit(WHITESPACE.charAt(i), null, NON_WHITESPACE.charAt(j)); [EOL]             innerTestSplit(WHITESPACE.charAt(i), String.valueOf(WHITESPACE.charAt(i)), NON_WHITESPACE.charAt(j)); [EOL]         } [EOL]     } [EOL]     String[] results; [EOL]     final String[] expectedResults = { "ab", "de fg" }; [EOL]     results = StringUtils.split("ab   de fg", null, 2); [EOL]     assertEquals(expectedResults.length, results.length); [EOL]     for (int i = 0; i < expectedResults.length; i++) { [EOL]         assertEquals(expectedResults[i], results[i]); [EOL]     } [EOL]     final String[] expectedResults2 = { "ab", "cd:ef" }; [EOL]     results = StringUtils.split("ab:cd:ef", ":", 2); [EOL]     assertEquals(expectedResults2.length, results.length); [EOL]     for (int i = 0; i < expectedResults2.length; i++) { [EOL]         assertEquals(expectedResults2[i], results[i]); [EOL]     } [EOL] }
@Test [EOL] public void testSplit_StringString_StringStringInt() { [EOL]     assertArrayEquals(null, StringUtils.split(null, ".")); [EOL]     assertArrayEquals(null, StringUtils.split(null, ".", 3)); [EOL]     assertEquals(0, StringUtils.split("", ".").length); [EOL]     assertEquals(0, StringUtils.split("", ".", 3).length); [EOL]     innerTestSplit('.', ".", ' '); [EOL]     innerTestSplit('.', ".", ','); [EOL]     innerTestSplit('.', ".,", 'x'); [EOL]     for (int i = 0; i < WHITESPACE.length(); i++) { [EOL]         for (int j = 0; j < NON_WHITESPACE.length(); j++) { [EOL]             innerTestSplit(WHITESPACE.charAt(i), null, NON_WHITESPACE.charAt(j)); [EOL]             innerTestSplit(WHITESPACE.charAt(i), String.valueOf(WHITESPACE.charAt(i)), NON_WHITESPACE.charAt(j)); [EOL]         } [EOL]     } [EOL]     String[] results; [EOL]     final String[] expectedResults = { "ab", "de fg" }; [EOL]     results = StringUtils.split("ab   de fg", null, 2); [EOL]     assertEquals(expectedResults.length, results.length); [EOL]     for (int i = 0; i < expectedResults.length; i++) { [EOL]         assertEquals(expectedResults[i], results[i]); [EOL]     } [EOL]     final String[] expectedResults2 = { "ab", "cd:ef" }; [EOL]     results = StringUtils.split("ab:cd:ef", ":", 2); [EOL]     assertEquals(expectedResults2.length, results.length); [EOL]     for (int i = 0; i < expectedResults2.length; i++) { [EOL]         assertEquals(expectedResults2[i], results[i]); [EOL]     } [EOL] }
@Test [EOL] public void testSplit_StringString_StringStringInt() { [EOL]     assertArrayEquals(null, StringUtils.split(null, ".")); [EOL]     assertArrayEquals(null, StringUtils.split(null, ".", 3)); [EOL]     assertEquals(0, StringUtils.split("", ".").length); [EOL]     assertEquals(0, StringUtils.split("", ".", 3).length); [EOL]     innerTestSplit('.', ".", ' '); [EOL]     innerTestSplit('.', ".", ','); [EOL]     innerTestSplit('.', ".,", 'x'); [EOL]     for (int i = 0; i < WHITESPACE.length(); i++) { [EOL]         for (int j = 0; j < NON_WHITESPACE.length(); j++) { [EOL]             innerTestSplit(WHITESPACE.charAt(i), null, NON_WHITESPACE.charAt(j)); [EOL]             innerTestSplit(WHITESPACE.charAt(i), String.valueOf(WHITESPACE.charAt(i)), NON_WHITESPACE.charAt(j)); [EOL]         } [EOL]     } [EOL]     String[] results; [EOL]     final String[] expectedResults = { "ab", "de fg" }; [EOL]     results = StringUtils.split("ab   de fg", null, 2); [EOL]     assertEquals(expectedResults.length, results.length); [EOL]     for (int i = 0; i < expectedResults.length; i++) { [EOL]         assertEquals(expectedResults[i], results[i]); [EOL]     } [EOL]     final String[] expectedResults2 = { "ab", "cd:ef" }; [EOL]     results = StringUtils.split("ab:cd:ef", ":", 2); [EOL]     assertEquals(expectedResults2.length, results.length); [EOL]     for (int i = 0; i < expectedResults2.length; i++) { [EOL]         assertEquals(expectedResults2[i], results[i]); [EOL]     } [EOL] }
@Test [EOL] public void testSplit_StringString_StringStringInt() { [EOL]     assertArrayEquals(null, StringUtils.split(null, ".")); [EOL]     assertArrayEquals(null, StringUtils.split(null, ".", 3)); [EOL]     assertEquals(0, StringUtils.split("", ".").length); [EOL]     assertEquals(0, StringUtils.split("", ".", 3).length); [EOL]     innerTestSplit('.', ".", ' '); [EOL]     innerTestSplit('.', ".", ','); [EOL]     innerTestSplit('.', ".,", 'x'); [EOL]     for (int i = 0; i < WHITESPACE.length(); i++) { [EOL]         for (int j = 0; j < NON_WHITESPACE.length(); j++) { [EOL]             innerTestSplit(WHITESPACE.charAt(i), null, NON_WHITESPACE.charAt(j)); [EOL]             innerTestSplit(WHITESPACE.charAt(i), String.valueOf(WHITESPACE.charAt(i)), NON_WHITESPACE.charAt(j)); [EOL]         } [EOL]     } [EOL]     String[] results; [EOL]     final String[] expectedResults = { "ab", "de fg" }; [EOL]     results = StringUtils.split("ab   de fg", null, 2); [EOL]     assertEquals(expectedResults.length, results.length); [EOL]     for (int i = 0; i < expectedResults.length; i++) { [EOL]         assertEquals(expectedResults[i], results[i]); [EOL]     } [EOL]     final String[] expectedResults2 = { "ab", "cd:ef" }; [EOL]     results = StringUtils.split("ab:cd:ef", ":", 2); [EOL]     assertEquals(expectedResults2.length, results.length); [EOL]     for (int i = 0; i < expectedResults2.length; i++) { [EOL]         assertEquals(expectedResults2[i], results[i]); [EOL]     } [EOL] }
@Test [EOL] public void testSplitByWholeString_StringStringBooleanInt() { [EOL]     assertArrayEquals(null, StringUtils.splitByWholeSeparator(null, ".", 3)); [EOL]     assertEquals(0, StringUtils.splitByWholeSeparator("", ".", 3).length); [EOL]     final String stringToSplitOnNulls = "ab   de fg"; [EOL]     final String[] splitOnNullExpectedResults = { "ab", "de fg" }; [EOL]     final String[] splitOnNullResults = StringUtils.splitByWholeSeparator(stringToSplitOnNulls, null, 2); [EOL]     assertEquals(splitOnNullExpectedResults.length, splitOnNullResults.length); [EOL]     for (int i = 0; i < splitOnNullExpectedResults.length; i += 1) { [EOL]         assertEquals(splitOnNullExpectedResults[i], splitOnNullResults[i]); [EOL]     } [EOL]     final String stringToSplitOnCharactersAndString = "abstemiouslyaeiouyabstemiouslyaeiouyabstemiously"; [EOL]     final String[] splitOnStringExpectedResults = { "abstemiously", "abstemiouslyaeiouyabstemiously" }; [EOL]     final String[] splitOnStringResults = StringUtils.splitByWholeSeparator(stringToSplitOnCharactersAndString, "aeiouy", 2); [EOL]     assertEquals(splitOnStringExpectedResults.length, splitOnStringResults.length); [EOL]     for (int i = 0; i < splitOnStringExpectedResults.length; i++) { [EOL]         assertEquals(splitOnStringExpectedResults[i], splitOnStringResults[i]); [EOL]     } [EOL] }
@Test [EOL] public void testSplitByWholeString_StringStringBooleanInt() { [EOL]     assertArrayEquals(null, StringUtils.splitByWholeSeparator(null, ".", 3)); [EOL]     assertEquals(0, StringUtils.splitByWholeSeparator("", ".", 3).length); [EOL]     final String stringToSplitOnNulls = "ab   de fg"; [EOL]     final String[] splitOnNullExpectedResults = { "ab", "de fg" }; [EOL]     final String[] splitOnNullResults = StringUtils.splitByWholeSeparator(stringToSplitOnNulls, null, 2); [EOL]     assertEquals(splitOnNullExpectedResults.length, splitOnNullResults.length); [EOL]     for (int i = 0; i < splitOnNullExpectedResults.length; i += 1) { [EOL]         assertEquals(splitOnNullExpectedResults[i], splitOnNullResults[i]); [EOL]     } [EOL]     final String stringToSplitOnCharactersAndString = "abstemiouslyaeiouyabstemiouslyaeiouyabstemiously"; [EOL]     final String[] splitOnStringExpectedResults = { "abstemiously", "abstemiouslyaeiouyabstemiously" }; [EOL]     final String[] splitOnStringResults = StringUtils.splitByWholeSeparator(stringToSplitOnCharactersAndString, "aeiouy", 2); [EOL]     assertEquals(splitOnStringExpectedResults.length, splitOnStringResults.length); [EOL]     for (int i = 0; i < splitOnStringExpectedResults.length; i++) { [EOL]         assertEquals(splitOnStringExpectedResults[i], splitOnStringResults[i]); [EOL]     } [EOL] }
@Test [EOL] public void testSplitByWholeString_StringStringBooleanInt() { [EOL]     assertArrayEquals(null, StringUtils.splitByWholeSeparator(null, ".", 3)); [EOL]     assertEquals(0, StringUtils.splitByWholeSeparator("", ".", 3).length); [EOL]     final String stringToSplitOnNulls = "ab   de fg"; [EOL]     final String[] splitOnNullExpectedResults = { "ab", "de fg" }; [EOL]     final String[] splitOnNullResults = StringUtils.splitByWholeSeparator(stringToSplitOnNulls, null, 2); [EOL]     assertEquals(splitOnNullExpectedResults.length, splitOnNullResults.length); [EOL]     for (int i = 0; i < splitOnNullExpectedResults.length; i += 1) { [EOL]         assertEquals(splitOnNullExpectedResults[i], splitOnNullResults[i]); [EOL]     } [EOL]     final String stringToSplitOnCharactersAndString = "abstemiouslyaeiouyabstemiouslyaeiouyabstemiously"; [EOL]     final String[] splitOnStringExpectedResults = { "abstemiously", "abstemiouslyaeiouyabstemiously" }; [EOL]     final String[] splitOnStringResults = StringUtils.splitByWholeSeparator(stringToSplitOnCharactersAndString, "aeiouy", 2); [EOL]     assertEquals(splitOnStringExpectedResults.length, splitOnStringResults.length); [EOL]     for (int i = 0; i < splitOnStringExpectedResults.length; i++) { [EOL]         assertEquals(splitOnStringExpectedResults[i], splitOnStringResults[i]); [EOL]     } [EOL] }
@Test [EOL] public void testSplitByWholeString_StringStringBooleanInt() { [EOL]     assertArrayEquals(null, StringUtils.splitByWholeSeparator(null, ".", 3)); [EOL]     assertEquals(0, StringUtils.splitByWholeSeparator("", ".", 3).length); [EOL]     final String stringToSplitOnNulls = "ab   de fg"; [EOL]     final String[] splitOnNullExpectedResults = { "ab", "de fg" }; [EOL]     final String[] splitOnNullResults = StringUtils.splitByWholeSeparator(stringToSplitOnNulls, null, 2); [EOL]     assertEquals(splitOnNullExpectedResults.length, splitOnNullResults.length); [EOL]     for (int i = 0; i < splitOnNullExpectedResults.length; i += 1) { [EOL]         assertEquals(splitOnNullExpectedResults[i], splitOnNullResults[i]); [EOL]     } [EOL]     final String stringToSplitOnCharactersAndString = "abstemiouslyaeiouyabstemiouslyaeiouyabstemiously"; [EOL]     final String[] splitOnStringExpectedResults = { "abstemiously", "abstemiouslyaeiouyabstemiously" }; [EOL]     final String[] splitOnStringResults = StringUtils.splitByWholeSeparator(stringToSplitOnCharactersAndString, "aeiouy", 2); [EOL]     assertEquals(splitOnStringExpectedResults.length, splitOnStringResults.length); [EOL]     for (int i = 0; i < splitOnStringExpectedResults.length; i++) { [EOL]         assertEquals(splitOnStringExpectedResults[i], splitOnStringResults[i]); [EOL]     } [EOL] }
@Test [EOL] public void testSplitByWholeString_StringStringBooleanInt() { [EOL]     assertArrayEquals(null, StringUtils.splitByWholeSeparator(null, ".", 3)); [EOL]     assertEquals(0, StringUtils.splitByWholeSeparator("", ".", 3).length); [EOL]     final String stringToSplitOnNulls = "ab   de fg"; [EOL]     final String[] splitOnNullExpectedResults = { "ab", "de fg" }; [EOL]     final String[] splitOnNullResults = StringUtils.splitByWholeSeparator(stringToSplitOnNulls, null, 2); [EOL]     assertEquals(splitOnNullExpectedResults.length, splitOnNullResults.length); [EOL]     for (int i = 0; i < splitOnNullExpectedResults.length; i += 1) { [EOL]         assertEquals(splitOnNullExpectedResults[i], splitOnNullResults[i]); [EOL]     } [EOL]     final String stringToSplitOnCharactersAndString = "abstemiouslyaeiouyabstemiouslyaeiouyabstemiously"; [EOL]     final String[] splitOnStringExpectedResults = { "abstemiously", "abstemiouslyaeiouyabstemiously" }; [EOL]     final String[] splitOnStringResults = StringUtils.splitByWholeSeparator(stringToSplitOnCharactersAndString, "aeiouy", 2); [EOL]     assertEquals(splitOnStringExpectedResults.length, splitOnStringResults.length); [EOL]     for (int i = 0; i < splitOnStringExpectedResults.length; i++) { [EOL]         assertEquals(splitOnStringExpectedResults[i], splitOnStringResults[i]); [EOL]     } [EOL] }
@Test [EOL] public void testSplitByWholeString_StringStringBooleanInt() { [EOL]     assertArrayEquals(null, StringUtils.splitByWholeSeparator(null, ".", 3)); [EOL]     assertEquals(0, StringUtils.splitByWholeSeparator("", ".", 3).length); [EOL]     final String stringToSplitOnNulls = "ab   de fg"; [EOL]     final String[] splitOnNullExpectedResults = { "ab", "de fg" }; [EOL]     final String[] splitOnNullResults = StringUtils.splitByWholeSeparator(stringToSplitOnNulls, null, 2); [EOL]     assertEquals(splitOnNullExpectedResults.length, splitOnNullResults.length); [EOL]     for (int i = 0; i < splitOnNullExpectedResults.length; i += 1) { [EOL]         assertEquals(splitOnNullExpectedResults[i], splitOnNullResults[i]); [EOL]     } [EOL]     final String stringToSplitOnCharactersAndString = "abstemiouslyaeiouyabstemiouslyaeiouyabstemiously"; [EOL]     final String[] splitOnStringExpectedResults = { "abstemiously", "abstemiouslyaeiouyabstemiously" }; [EOL]     final String[] splitOnStringResults = StringUtils.splitByWholeSeparator(stringToSplitOnCharactersAndString, "aeiouy", 2); [EOL]     assertEquals(splitOnStringExpectedResults.length, splitOnStringResults.length); [EOL]     for (int i = 0; i < splitOnStringExpectedResults.length; i++) { [EOL]         assertEquals(splitOnStringExpectedResults[i], splitOnStringResults[i]); [EOL]     } [EOL] }
@Test [EOL] public void testSplitByWholeString_StringStringBooleanInt() { [EOL]     assertArrayEquals(null, StringUtils.splitByWholeSeparator(null, ".", 3)); [EOL]     assertEquals(0, StringUtils.splitByWholeSeparator("", ".", 3).length); [EOL]     final String stringToSplitOnNulls = "ab   de fg"; [EOL]     final String[] splitOnNullExpectedResults = { "ab", "de fg" }; [EOL]     final String[] splitOnNullResults = StringUtils.splitByWholeSeparator(stringToSplitOnNulls, null, 2); [EOL]     assertEquals(splitOnNullExpectedResults.length, splitOnNullResults.length); [EOL]     for (int i = 0; i < splitOnNullExpectedResults.length; i += 1) { [EOL]         assertEquals(splitOnNullExpectedResults[i], splitOnNullResults[i]); [EOL]     } [EOL]     final String stringToSplitOnCharactersAndString = "abstemiouslyaeiouyabstemiouslyaeiouyabstemiously"; [EOL]     final String[] splitOnStringExpectedResults = { "abstemiously", "abstemiouslyaeiouyabstemiously" }; [EOL]     final String[] splitOnStringResults = StringUtils.splitByWholeSeparator(stringToSplitOnCharactersAndString, "aeiouy", 2); [EOL]     assertEquals(splitOnStringExpectedResults.length, splitOnStringResults.length); [EOL]     for (int i = 0; i < splitOnStringExpectedResults.length; i++) { [EOL]         assertEquals(splitOnStringExpectedResults[i], splitOnStringResults[i]); [EOL]     } [EOL] }
@Test [EOL] public void testSplitPreserveAllTokens_StringString_StringStringInt() { [EOL]     assertArrayEquals(null, StringUtils.splitPreserveAllTokens(null, ".")); [EOL]     assertArrayEquals(null, StringUtils.splitPreserveAllTokens(null, ".", 3)); [EOL]     assertEquals(0, StringUtils.splitPreserveAllTokens("", ".").length); [EOL]     assertEquals(0, StringUtils.splitPreserveAllTokens("", ".", 3).length); [EOL]     innerTestSplitPreserveAllTokens('.', ".", ' '); [EOL]     innerTestSplitPreserveAllTokens('.', ".", ','); [EOL]     innerTestSplitPreserveAllTokens('.', ".,", 'x'); [EOL]     for (int i = 0; i < WHITESPACE.length(); i++) { [EOL]         for (int j = 0; j < NON_WHITESPACE.length(); j++) { [EOL]             innerTestSplitPreserveAllTokens(WHITESPACE.charAt(i), null, NON_WHITESPACE.charAt(j)); [EOL]             innerTestSplitPreserveAllTokens(WHITESPACE.charAt(i), String.valueOf(WHITESPACE.charAt(i)), NON_WHITESPACE.charAt(j)); [EOL]         } [EOL]     } [EOL]     { [EOL]         String[] results; [EOL]         final String[] expectedResults = { "ab", "de fg" }; [EOL]         results = StringUtils.splitPreserveAllTokens("ab de fg", null, 2); [EOL]         assertEquals(expectedResults.length, results.length); [EOL]         for (int i = 0; i < expectedResults.length; i++) { [EOL]             assertEquals(expectedResults[i], results[i]); [EOL]         } [EOL]     } [EOL]     { [EOL]         String[] results; [EOL]         final String[] expectedResults = { "ab", "  de fg" }; [EOL]         results = StringUtils.splitPreserveAllTokens("ab   de fg", null, 2); [EOL]         assertEquals(expectedResults.length, results.length); [EOL]         for (int i = 0; i < expectedResults.length; i++) { [EOL]             assertEquals(expectedResults[i], results[i]); [EOL]         } [EOL]     } [EOL]     { [EOL]         String[] results; [EOL]         final String[] expectedResults = { "ab", "::de:fg" }; [EOL]         results = StringUtils.splitPreserveAllTokens("ab:::de:fg", ":", 2); [EOL]         assertEquals(expectedResults.length, results.length); [EOL]         for (int i = 0; i < expectedResults.length; i++) { [EOL]             assertEquals(expectedResults[i], results[i]); [EOL]         } [EOL]     } [EOL]     { [EOL]         String[] results; [EOL]         final String[] expectedResults = { "ab", "", " de fg" }; [EOL]         results = StringUtils.splitPreserveAllTokens("ab   de fg", null, 3); [EOL]         assertEquals(expectedResults.length, results.length); [EOL]         for (int i = 0; i < expectedResults.length; i++) { [EOL]             assertEquals(expectedResults[i], results[i]); [EOL]         } [EOL]     } [EOL]     { [EOL]         String[] results; [EOL]         final String[] expectedResults = { "ab", "", "", "de fg" }; [EOL]         results = StringUtils.splitPreserveAllTokens("ab   de fg", null, 4); [EOL]         assertEquals(expectedResults.length, results.length); [EOL]         for (int i = 0; i < expectedResults.length; i++) { [EOL]             assertEquals(expectedResults[i], results[i]); [EOL]         } [EOL]     } [EOL]     { [EOL]         final String[] expectedResults = { "ab", "cd:ef" }; [EOL]         String[] results; [EOL]         results = StringUtils.splitPreserveAllTokens("ab:cd:ef", ":", 2); [EOL]         assertEquals(expectedResults.length, results.length); [EOL]         for (int i = 0; i < expectedResults.length; i++) { [EOL]             assertEquals(expectedResults[i], results[i]); [EOL]         } [EOL]     } [EOL]     { [EOL]         String[] results; [EOL]         final String[] expectedResults = { "ab", ":cd:ef" }; [EOL]         results = StringUtils.splitPreserveAllTokens("ab::cd:ef", ":", 2); [EOL]         assertEquals(expectedResults.length, results.length); [EOL]         for (int i = 0; i < expectedResults.length; i++) { [EOL]             assertEquals(expectedResults[i], results[i]); [EOL]         } [EOL]     } [EOL]     { [EOL]         String[] results; [EOL]         final String[] expectedResults = { "ab", "", ":cd:ef" }; [EOL]         results = StringUtils.splitPreserveAllTokens("ab:::cd:ef", ":", 3); [EOL]         assertEquals(expectedResults.length, results.length); [EOL]         for (int i = 0; i < expectedResults.length; i++) { [EOL]             assertEquals(expectedResults[i], results[i]); [EOL]         } [EOL]     } [EOL]     { [EOL]         String[] results; [EOL]         final String[] expectedResults = { "ab", "", "", "cd:ef" }; [EOL]         results = StringUtils.splitPreserveAllTokens("ab:::cd:ef", ":", 4); [EOL]         assertEquals(expectedResults.length, results.length); [EOL]         for (int i = 0; i < expectedResults.length; i++) { [EOL]             assertEquals(expectedResults[i], results[i]); [EOL]         } [EOL]     } [EOL]     { [EOL]         String[] results; [EOL]         final String[] expectedResults = { "", "ab", "", "", "cd:ef" }; [EOL]         results = StringUtils.splitPreserveAllTokens(":ab:::cd:ef", ":", 5); [EOL]         assertEquals(expectedResults.length, results.length); [EOL]         for (int i = 0; i < expectedResults.length; i++) { [EOL]             assertEquals(expectedResults[i], results[i]); [EOL]         } [EOL]     } [EOL]     { [EOL]         String[] results; [EOL]         final String[] expectedResults = { "", "", "ab", "", "", "cd:ef" }; [EOL]         results = StringUtils.splitPreserveAllTokens("::ab:::cd:ef", ":", 6); [EOL]         assertEquals(expectedResults.length, results.length); [EOL]         for (int i = 0; i < expectedResults.length; i++) { [EOL]             assertEquals(expectedResults[i], results[i]); [EOL]         } [EOL]     } [EOL] }
@Test [EOL] public void testSplitPreserveAllTokens_StringString_StringStringInt() { [EOL]     assertArrayEquals(null, StringUtils.splitPreserveAllTokens(null, ".")); [EOL]     assertArrayEquals(null, StringUtils.splitPreserveAllTokens(null, ".", 3)); [EOL]     assertEquals(0, StringUtils.splitPreserveAllTokens("", ".").length); [EOL]     assertEquals(0, StringUtils.splitPreserveAllTokens("", ".", 3).length); [EOL]     innerTestSplitPreserveAllTokens('.', ".", ' '); [EOL]     innerTestSplitPreserveAllTokens('.', ".", ','); [EOL]     innerTestSplitPreserveAllTokens('.', ".,", 'x'); [EOL]     for (int i = 0; i < WHITESPACE.length(); i++) { [EOL]         for (int j = 0; j < NON_WHITESPACE.length(); j++) { [EOL]             innerTestSplitPreserveAllTokens(WHITESPACE.charAt(i), null, NON_WHITESPACE.charAt(j)); [EOL]             innerTestSplitPreserveAllTokens(WHITESPACE.charAt(i), String.valueOf(WHITESPACE.charAt(i)), NON_WHITESPACE.charAt(j)); [EOL]         } [EOL]     } [EOL]     { [EOL]         String[] results; [EOL]         final String[] expectedResults = { "ab", "de fg" }; [EOL]         results = StringUtils.splitPreserveAllTokens("ab de fg", null, 2); [EOL]         assertEquals(expectedResults.length, results.length); [EOL]         for (int i = 0; i < expectedResults.length; i++) { [EOL]             assertEquals(expectedResults[i], results[i]); [EOL]         } [EOL]     } [EOL]     { [EOL]         String[] results; [EOL]         final String[] expectedResults = { "ab", "  de fg" }; [EOL]         results = StringUtils.splitPreserveAllTokens("ab   de fg", null, 2); [EOL]         assertEquals(expectedResults.length, results.length); [EOL]         for (int i = 0; i < expectedResults.length; i++) { [EOL]             assertEquals(expectedResults[i], results[i]); [EOL]         } [EOL]     } [EOL]     { [EOL]         String[] results; [EOL]         final String[] expectedResults = { "ab", "::de:fg" }; [EOL]         results = StringUtils.splitPreserveAllTokens("ab:::de:fg", ":", 2); [EOL]         assertEquals(expectedResults.length, results.length); [EOL]         for (int i = 0; i < expectedResults.length; i++) { [EOL]             assertEquals(expectedResults[i], results[i]); [EOL]         } [EOL]     } [EOL]     { [EOL]         String[] results; [EOL]         final String[] expectedResults = { "ab", "", " de fg" }; [EOL]         results = StringUtils.splitPreserveAllTokens("ab   de fg", null, 3); [EOL]         assertEquals(expectedResults.length, results.length); [EOL]         for (int i = 0; i < expectedResults.length; i++) { [EOL]             assertEquals(expectedResults[i], results[i]); [EOL]         } [EOL]     } [EOL]     { [EOL]         String[] results; [EOL]         final String[] expectedResults = { "ab", "", "", "de fg" }; [EOL]         results = StringUtils.splitPreserveAllTokens("ab   de fg", null, 4); [EOL]         assertEquals(expectedResults.length, results.length); [EOL]         for (int i = 0; i < expectedResults.length; i++) { [EOL]             assertEquals(expectedResults[i], results[i]); [EOL]         } [EOL]     } [EOL]     { [EOL]         final String[] expectedResults = { "ab", "cd:ef" }; [EOL]         String[] results; [EOL]         results = StringUtils.splitPreserveAllTokens("ab:cd:ef", ":", 2); [EOL]         assertEquals(expectedResults.length, results.length); [EOL]         for (int i = 0; i < expectedResults.length; i++) { [EOL]             assertEquals(expectedResults[i], results[i]); [EOL]         } [EOL]     } [EOL]     { [EOL]         String[] results; [EOL]         final String[] expectedResults = { "ab", ":cd:ef" }; [EOL]         results = StringUtils.splitPreserveAllTokens("ab::cd:ef", ":", 2); [EOL]         assertEquals(expectedResults.length, results.length); [EOL]         for (int i = 0; i < expectedResults.length; i++) { [EOL]             assertEquals(expectedResults[i], results[i]); [EOL]         } [EOL]     } [EOL]     { [EOL]         String[] results; [EOL]         final String[] expectedResults = { "ab", "", ":cd:ef" }; [EOL]         results = StringUtils.splitPreserveAllTokens("ab:::cd:ef", ":", 3); [EOL]         assertEquals(expectedResults.length, results.length); [EOL]         for (int i = 0; i < expectedResults.length; i++) { [EOL]             assertEquals(expectedResults[i], results[i]); [EOL]         } [EOL]     } [EOL]     { [EOL]         String[] results; [EOL]         final String[] expectedResults = { "ab", "", "", "cd:ef" }; [EOL]         results = StringUtils.splitPreserveAllTokens("ab:::cd:ef", ":", 4); [EOL]         assertEquals(expectedResults.length, results.length); [EOL]         for (int i = 0; i < expectedResults.length; i++) { [EOL]             assertEquals(expectedResults[i], results[i]); [EOL]         } [EOL]     } [EOL]     { [EOL]         String[] results; [EOL]         final String[] expectedResults = { "", "ab", "", "", "cd:ef" }; [EOL]         results = StringUtils.splitPreserveAllTokens(":ab:::cd:ef", ":", 5); [EOL]         assertEquals(expectedResults.length, results.length); [EOL]         for (int i = 0; i < expectedResults.length; i++) { [EOL]             assertEquals(expectedResults[i], results[i]); [EOL]         } [EOL]     } [EOL]     { [EOL]         String[] results; [EOL]         final String[] expectedResults = { "", "", "ab", "", "", "cd:ef" }; [EOL]         results = StringUtils.splitPreserveAllTokens("::ab:::cd:ef", ":", 6); [EOL]         assertEquals(expectedResults.length, results.length); [EOL]         for (int i = 0; i < expectedResults.length; i++) { [EOL]             assertEquals(expectedResults[i], results[i]); [EOL]         } [EOL]     } [EOL] }
@Test [EOL] public void testSplitPreserveAllTokens_StringString_StringStringInt() { [EOL]     assertArrayEquals(null, StringUtils.splitPreserveAllTokens(null, ".")); [EOL]     assertArrayEquals(null, StringUtils.splitPreserveAllTokens(null, ".", 3)); [EOL]     assertEquals(0, StringUtils.splitPreserveAllTokens("", ".").length); [EOL]     assertEquals(0, StringUtils.splitPreserveAllTokens("", ".", 3).length); [EOL]     innerTestSplitPreserveAllTokens('.', ".", ' '); [EOL]     innerTestSplitPreserveAllTokens('.', ".", ','); [EOL]     innerTestSplitPreserveAllTokens('.', ".,", 'x'); [EOL]     for (int i = 0; i < WHITESPACE.length(); i++) { [EOL]         for (int j = 0; j < NON_WHITESPACE.length(); j++) { [EOL]             innerTestSplitPreserveAllTokens(WHITESPACE.charAt(i), null, NON_WHITESPACE.charAt(j)); [EOL]             innerTestSplitPreserveAllTokens(WHITESPACE.charAt(i), String.valueOf(WHITESPACE.charAt(i)), NON_WHITESPACE.charAt(j)); [EOL]         } [EOL]     } [EOL]     { [EOL]         String[] results; [EOL]         final String[] expectedResults = { "ab", "de fg" }; [EOL]         results = StringUtils.splitPreserveAllTokens("ab de fg", null, 2); [EOL]         assertEquals(expectedResults.length, results.length); [EOL]         for (int i = 0; i < expectedResults.length; i++) { [EOL]             assertEquals(expectedResults[i], results[i]); [EOL]         } [EOL]     } [EOL]     { [EOL]         String[] results; [EOL]         final String[] expectedResults = { "ab", "  de fg" }; [EOL]         results = StringUtils.splitPreserveAllTokens("ab   de fg", null, 2); [EOL]         assertEquals(expectedResults.length, results.length); [EOL]         for (int i = 0; i < expectedResults.length; i++) { [EOL]             assertEquals(expectedResults[i], results[i]); [EOL]         } [EOL]     } [EOL]     { [EOL]         String[] results; [EOL]         final String[] expectedResults = { "ab", "::de:fg" }; [EOL]         results = StringUtils.splitPreserveAllTokens("ab:::de:fg", ":", 2); [EOL]         assertEquals(expectedResults.length, results.length); [EOL]         for (int i = 0; i < expectedResults.length; i++) { [EOL]             assertEquals(expectedResults[i], results[i]); [EOL]         } [EOL]     } [EOL]     { [EOL]         String[] results; [EOL]         final String[] expectedResults = { "ab", "", " de fg" }; [EOL]         results = StringUtils.splitPreserveAllTokens("ab   de fg", null, 3); [EOL]         assertEquals(expectedResults.length, results.length); [EOL]         for (int i = 0; i < expectedResults.length; i++) { [EOL]             assertEquals(expectedResults[i], results[i]); [EOL]         } [EOL]     } [EOL]     { [EOL]         String[] results; [EOL]         final String[] expectedResults = { "ab", "", "", "de fg" }; [EOL]         results = StringUtils.splitPreserveAllTokens("ab   de fg", null, 4); [EOL]         assertEquals(expectedResults.length, results.length); [EOL]         for (int i = 0; i < expectedResults.length; i++) { [EOL]             assertEquals(expectedResults[i], results[i]); [EOL]         } [EOL]     } [EOL]     { [EOL]         final String[] expectedResults = { "ab", "cd:ef" }; [EOL]         String[] results; [EOL]         results = StringUtils.splitPreserveAllTokens("ab:cd:ef", ":", 2); [EOL]         assertEquals(expectedResults.length, results.length); [EOL]         for (int i = 0; i < expectedResults.length; i++) { [EOL]             assertEquals(expectedResults[i], results[i]); [EOL]         } [EOL]     } [EOL]     { [EOL]         String[] results; [EOL]         final String[] expectedResults = { "ab", ":cd:ef" }; [EOL]         results = StringUtils.splitPreserveAllTokens("ab::cd:ef", ":", 2); [EOL]         assertEquals(expectedResults.length, results.length); [EOL]         for (int i = 0; i < expectedResults.length; i++) { [EOL]             assertEquals(expectedResults[i], results[i]); [EOL]         } [EOL]     } [EOL]     { [EOL]         String[] results; [EOL]         final String[] expectedResults = { "ab", "", ":cd:ef" }; [EOL]         results = StringUtils.splitPreserveAllTokens("ab:::cd:ef", ":", 3); [EOL]         assertEquals(expectedResults.length, results.length); [EOL]         for (int i = 0; i < expectedResults.length; i++) { [EOL]             assertEquals(expectedResults[i], results[i]); [EOL]         } [EOL]     } [EOL]     { [EOL]         String[] results; [EOL]         final String[] expectedResults = { "ab", "", "", "cd:ef" }; [EOL]         results = StringUtils.splitPreserveAllTokens("ab:::cd:ef", ":", 4); [EOL]         assertEquals(expectedResults.length, results.length); [EOL]         for (int i = 0; i < expectedResults.length; i++) { [EOL]             assertEquals(expectedResults[i], results[i]); [EOL]         } [EOL]     } [EOL]     { [EOL]         String[] results; [EOL]         final String[] expectedResults = { "", "ab", "", "", "cd:ef" }; [EOL]         results = StringUtils.splitPreserveAllTokens(":ab:::cd:ef", ":", 5); [EOL]         assertEquals(expectedResults.length, results.length); [EOL]         for (int i = 0; i < expectedResults.length; i++) { [EOL]             assertEquals(expectedResults[i], results[i]); [EOL]         } [EOL]     } [EOL]     { [EOL]         String[] results; [EOL]         final String[] expectedResults = { "", "", "ab", "", "", "cd:ef" }; [EOL]         results = StringUtils.splitPreserveAllTokens("::ab:::cd:ef", ":", 6); [EOL]         assertEquals(expectedResults.length, results.length); [EOL]         for (int i = 0; i < expectedResults.length; i++) { [EOL]             assertEquals(expectedResults[i], results[i]); [EOL]         } [EOL]     } [EOL] }
@Test [EOL] public void testSplitPreserveAllTokens_StringString_StringStringInt() { [EOL]     assertArrayEquals(null, StringUtils.splitPreserveAllTokens(null, ".")); [EOL]     assertArrayEquals(null, StringUtils.splitPreserveAllTokens(null, ".", 3)); [EOL]     assertEquals(0, StringUtils.splitPreserveAllTokens("", ".").length); [EOL]     assertEquals(0, StringUtils.splitPreserveAllTokens("", ".", 3).length); [EOL]     innerTestSplitPreserveAllTokens('.', ".", ' '); [EOL]     innerTestSplitPreserveAllTokens('.', ".", ','); [EOL]     innerTestSplitPreserveAllTokens('.', ".,", 'x'); [EOL]     for (int i = 0; i < WHITESPACE.length(); i++) { [EOL]         for (int j = 0; j < NON_WHITESPACE.length(); j++) { [EOL]             innerTestSplitPreserveAllTokens(WHITESPACE.charAt(i), null, NON_WHITESPACE.charAt(j)); [EOL]             innerTestSplitPreserveAllTokens(WHITESPACE.charAt(i), String.valueOf(WHITESPACE.charAt(i)), NON_WHITESPACE.charAt(j)); [EOL]         } [EOL]     } [EOL]     { [EOL]         String[] results; [EOL]         final String[] expectedResults = { "ab", "de fg" }; [EOL]         results = StringUtils.splitPreserveAllTokens("ab de fg", null, 2); [EOL]         assertEquals(expectedResults.length, results.length); [EOL]         for (int i = 0; i < expectedResults.length; i++) { [EOL]             assertEquals(expectedResults[i], results[i]); [EOL]         } [EOL]     } [EOL]     { [EOL]         String[] results; [EOL]         final String[] expectedResults = { "ab", "  de fg" }; [EOL]         results = StringUtils.splitPreserveAllTokens("ab   de fg", null, 2); [EOL]         assertEquals(expectedResults.length, results.length); [EOL]         for (int i = 0; i < expectedResults.length; i++) { [EOL]             assertEquals(expectedResults[i], results[i]); [EOL]         } [EOL]     } [EOL]     { [EOL]         String[] results; [EOL]         final String[] expectedResults = { "ab", "::de:fg" }; [EOL]         results = StringUtils.splitPreserveAllTokens("ab:::de:fg", ":", 2); [EOL]         assertEquals(expectedResults.length, results.length); [EOL]         for (int i = 0; i < expectedResults.length; i++) { [EOL]             assertEquals(expectedResults[i], results[i]); [EOL]         } [EOL]     } [EOL]     { [EOL]         String[] results; [EOL]         final String[] expectedResults = { "ab", "", " de fg" }; [EOL]         results = StringUtils.splitPreserveAllTokens("ab   de fg", null, 3); [EOL]         assertEquals(expectedResults.length, results.length); [EOL]         for (int i = 0; i < expectedResults.length; i++) { [EOL]             assertEquals(expectedResults[i], results[i]); [EOL]         } [EOL]     } [EOL]     { [EOL]         String[] results; [EOL]         final String[] expectedResults = { "ab", "", "", "de fg" }; [EOL]         results = StringUtils.splitPreserveAllTokens("ab   de fg", null, 4); [EOL]         assertEquals(expectedResults.length, results.length); [EOL]         for (int i = 0; i < expectedResults.length; i++) { [EOL]             assertEquals(expectedResults[i], results[i]); [EOL]         } [EOL]     } [EOL]     { [EOL]         final String[] expectedResults = { "ab", "cd:ef" }; [EOL]         String[] results; [EOL]         results = StringUtils.splitPreserveAllTokens("ab:cd:ef", ":", 2); [EOL]         assertEquals(expectedResults.length, results.length); [EOL]         for (int i = 0; i < expectedResults.length; i++) { [EOL]             assertEquals(expectedResults[i], results[i]); [EOL]         } [EOL]     } [EOL]     { [EOL]         String[] results; [EOL]         final String[] expectedResults = { "ab", ":cd:ef" }; [EOL]         results = StringUtils.splitPreserveAllTokens("ab::cd:ef", ":", 2); [EOL]         assertEquals(expectedResults.length, results.length); [EOL]         for (int i = 0; i < expectedResults.length; i++) { [EOL]             assertEquals(expectedResults[i], results[i]); [EOL]         } [EOL]     } [EOL]     { [EOL]         String[] results; [EOL]         final String[] expectedResults = { "ab", "", ":cd:ef" }; [EOL]         results = StringUtils.splitPreserveAllTokens("ab:::cd:ef", ":", 3); [EOL]         assertEquals(expectedResults.length, results.length); [EOL]         for (int i = 0; i < expectedResults.length; i++) { [EOL]             assertEquals(expectedResults[i], results[i]); [EOL]         } [EOL]     } [EOL]     { [EOL]         String[] results; [EOL]         final String[] expectedResults = { "ab", "", "", "cd:ef" }; [EOL]         results = StringUtils.splitPreserveAllTokens("ab:::cd:ef", ":", 4); [EOL]         assertEquals(expectedResults.length, results.length); [EOL]         for (int i = 0; i < expectedResults.length; i++) { [EOL]             assertEquals(expectedResults[i], results[i]); [EOL]         } [EOL]     } [EOL]     { [EOL]         String[] results; [EOL]         final String[] expectedResults = { "", "ab", "", "", "cd:ef" }; [EOL]         results = StringUtils.splitPreserveAllTokens(":ab:::cd:ef", ":", 5); [EOL]         assertEquals(expectedResults.length, results.length); [EOL]         for (int i = 0; i < expectedResults.length; i++) { [EOL]             assertEquals(expectedResults[i], results[i]); [EOL]         } [EOL]     } [EOL]     { [EOL]         String[] results; [EOL]         final String[] expectedResults = { "", "", "ab", "", "", "cd:ef" }; [EOL]         results = StringUtils.splitPreserveAllTokens("::ab:::cd:ef", ":", 6); [EOL]         assertEquals(expectedResults.length, results.length); [EOL]         for (int i = 0; i < expectedResults.length; i++) { [EOL]             assertEquals(expectedResults[i], results[i]); [EOL]         } [EOL]     } [EOL] }
@Test [EOL] public void testSplitPreserveAllTokens_StringString_StringStringInt() { [EOL]     assertArrayEquals(null, StringUtils.splitPreserveAllTokens(null, ".")); [EOL]     assertArrayEquals(null, StringUtils.splitPreserveAllTokens(null, ".", 3)); [EOL]     assertEquals(0, StringUtils.splitPreserveAllTokens("", ".").length); [EOL]     assertEquals(0, StringUtils.splitPreserveAllTokens("", ".", 3).length); [EOL]     innerTestSplitPreserveAllTokens('.', ".", ' '); [EOL]     innerTestSplitPreserveAllTokens('.', ".", ','); [EOL]     innerTestSplitPreserveAllTokens('.', ".,", 'x'); [EOL]     for (int i = 0; i < WHITESPACE.length(); i++) { [EOL]         for (int j = 0; j < NON_WHITESPACE.length(); j++) { [EOL]             innerTestSplitPreserveAllTokens(WHITESPACE.charAt(i), null, NON_WHITESPACE.charAt(j)); [EOL]             innerTestSplitPreserveAllTokens(WHITESPACE.charAt(i), String.valueOf(WHITESPACE.charAt(i)), NON_WHITESPACE.charAt(j)); [EOL]         } [EOL]     } [EOL]     { [EOL]         String[] results; [EOL]         final String[] expectedResults = { "ab", "de fg" }; [EOL]         results = StringUtils.splitPreserveAllTokens("ab de fg", null, 2); [EOL]         assertEquals(expectedResults.length, results.length); [EOL]         for (int i = 0; i < expectedResults.length; i++) { [EOL]             assertEquals(expectedResults[i], results[i]); [EOL]         } [EOL]     } [EOL]     { [EOL]         String[] results; [EOL]         final String[] expectedResults = { "ab", "  de fg" }; [EOL]         results = StringUtils.splitPreserveAllTokens("ab   de fg", null, 2); [EOL]         assertEquals(expectedResults.length, results.length); [EOL]         for (int i = 0; i < expectedResults.length; i++) { [EOL]             assertEquals(expectedResults[i], results[i]); [EOL]         } [EOL]     } [EOL]     { [EOL]         String[] results; [EOL]         final String[] expectedResults = { "ab", "::de:fg" }; [EOL]         results = StringUtils.splitPreserveAllTokens("ab:::de:fg", ":", 2); [EOL]         assertEquals(expectedResults.length, results.length); [EOL]         for (int i = 0; i < expectedResults.length; i++) { [EOL]             assertEquals(expectedResults[i], results[i]); [EOL]         } [EOL]     } [EOL]     { [EOL]         String[] results; [EOL]         final String[] expectedResults = { "ab", "", " de fg" }; [EOL]         results = StringUtils.splitPreserveAllTokens("ab   de fg", null, 3); [EOL]         assertEquals(expectedResults.length, results.length); [EOL]         for (int i = 0; i < expectedResults.length; i++) { [EOL]             assertEquals(expectedResults[i], results[i]); [EOL]         } [EOL]     } [EOL]     { [EOL]         String[] results; [EOL]         final String[] expectedResults = { "ab", "", "", "de fg" }; [EOL]         results = StringUtils.splitPreserveAllTokens("ab   de fg", null, 4); [EOL]         assertEquals(expectedResults.length, results.length); [EOL]         for (int i = 0; i < expectedResults.length; i++) { [EOL]             assertEquals(expectedResults[i], results[i]); [EOL]         } [EOL]     } [EOL]     { [EOL]         final String[] expectedResults = { "ab", "cd:ef" }; [EOL]         String[] results; [EOL]         results = StringUtils.splitPreserveAllTokens("ab:cd:ef", ":", 2); [EOL]         assertEquals(expectedResults.length, results.length); [EOL]         for (int i = 0; i < expectedResults.length; i++) { [EOL]             assertEquals(expectedResults[i], results[i]); [EOL]         } [EOL]     } [EOL]     { [EOL]         String[] results; [EOL]         final String[] expectedResults = { "ab", ":cd:ef" }; [EOL]         results = StringUtils.splitPreserveAllTokens("ab::cd:ef", ":", 2); [EOL]         assertEquals(expectedResults.length, results.length); [EOL]         for (int i = 0; i < expectedResults.length; i++) { [EOL]             assertEquals(expectedResults[i], results[i]); [EOL]         } [EOL]     } [EOL]     { [EOL]         String[] results; [EOL]         final String[] expectedResults = { "ab", "", ":cd:ef" }; [EOL]         results = StringUtils.splitPreserveAllTokens("ab:::cd:ef", ":", 3); [EOL]         assertEquals(expectedResults.length, results.length); [EOL]         for (int i = 0; i < expectedResults.length; i++) { [EOL]             assertEquals(expectedResults[i], results[i]); [EOL]         } [EOL]     } [EOL]     { [EOL]         String[] results; [EOL]         final String[] expectedResults = { "ab", "", "", "cd:ef" }; [EOL]         results = StringUtils.splitPreserveAllTokens("ab:::cd:ef", ":", 4); [EOL]         assertEquals(expectedResults.length, results.length); [EOL]         for (int i = 0; i < expectedResults.length; i++) { [EOL]             assertEquals(expectedResults[i], results[i]); [EOL]         } [EOL]     } [EOL]     { [EOL]         String[] results; [EOL]         final String[] expectedResults = { "", "ab", "", "", "cd:ef" }; [EOL]         results = StringUtils.splitPreserveAllTokens(":ab:::cd:ef", ":", 5); [EOL]         assertEquals(expectedResults.length, results.length); [EOL]         for (int i = 0; i < expectedResults.length; i++) { [EOL]             assertEquals(expectedResults[i], results[i]); [EOL]         } [EOL]     } [EOL]     { [EOL]         String[] results; [EOL]         final String[] expectedResults = { "", "", "ab", "", "", "cd:ef" }; [EOL]         results = StringUtils.splitPreserveAllTokens("::ab:::cd:ef", ":", 6); [EOL]         assertEquals(expectedResults.length, results.length); [EOL]         for (int i = 0; i < expectedResults.length; i++) { [EOL]             assertEquals(expectedResults[i], results[i]); [EOL]         } [EOL]     } [EOL] }
@Test [EOL] public void testSplitPreserveAllTokens_StringString_StringStringInt() { [EOL]     assertArrayEquals(null, StringUtils.splitPreserveAllTokens(null, ".")); [EOL]     assertArrayEquals(null, StringUtils.splitPreserveAllTokens(null, ".", 3)); [EOL]     assertEquals(0, StringUtils.splitPreserveAllTokens("", ".").length); [EOL]     assertEquals(0, StringUtils.splitPreserveAllTokens("", ".", 3).length); [EOL]     innerTestSplitPreserveAllTokens('.', ".", ' '); [EOL]     innerTestSplitPreserveAllTokens('.', ".", ','); [EOL]     innerTestSplitPreserveAllTokens('.', ".,", 'x'); [EOL]     for (int i = 0; i < WHITESPACE.length(); i++) { [EOL]         for (int j = 0; j < NON_WHITESPACE.length(); j++) { [EOL]             innerTestSplitPreserveAllTokens(WHITESPACE.charAt(i), null, NON_WHITESPACE.charAt(j)); [EOL]             innerTestSplitPreserveAllTokens(WHITESPACE.charAt(i), String.valueOf(WHITESPACE.charAt(i)), NON_WHITESPACE.charAt(j)); [EOL]         } [EOL]     } [EOL]     { [EOL]         String[] results; [EOL]         final String[] expectedResults = { "ab", "de fg" }; [EOL]         results = StringUtils.splitPreserveAllTokens("ab de fg", null, 2); [EOL]         assertEquals(expectedResults.length, results.length); [EOL]         for (int i = 0; i < expectedResults.length; i++) { [EOL]             assertEquals(expectedResults[i], results[i]); [EOL]         } [EOL]     } [EOL]     { [EOL]         String[] results; [EOL]         final String[] expectedResults = { "ab", "  de fg" }; [EOL]         results = StringUtils.splitPreserveAllTokens("ab   de fg", null, 2); [EOL]         assertEquals(expectedResults.length, results.length); [EOL]         for (int i = 0; i < expectedResults.length; i++) { [EOL]             assertEquals(expectedResults[i], results[i]); [EOL]         } [EOL]     } [EOL]     { [EOL]         String[] results; [EOL]         final String[] expectedResults = { "ab", "::de:fg" }; [EOL]         results = StringUtils.splitPreserveAllTokens("ab:::de:fg", ":", 2); [EOL]         assertEquals(expectedResults.length, results.length); [EOL]         for (int i = 0; i < expectedResults.length; i++) { [EOL]             assertEquals(expectedResults[i], results[i]); [EOL]         } [EOL]     } [EOL]     { [EOL]         String[] results; [EOL]         final String[] expectedResults = { "ab", "", " de fg" }; [EOL]         results = StringUtils.splitPreserveAllTokens("ab   de fg", null, 3); [EOL]         assertEquals(expectedResults.length, results.length); [EOL]         for (int i = 0; i < expectedResults.length; i++) { [EOL]             assertEquals(expectedResults[i], results[i]); [EOL]         } [EOL]     } [EOL]     { [EOL]         String[] results; [EOL]         final String[] expectedResults = { "ab", "", "", "de fg" }; [EOL]         results = StringUtils.splitPreserveAllTokens("ab   de fg", null, 4); [EOL]         assertEquals(expectedResults.length, results.length); [EOL]         for (int i = 0; i < expectedResults.length; i++) { [EOL]             assertEquals(expectedResults[i], results[i]); [EOL]         } [EOL]     } [EOL]     { [EOL]         final String[] expectedResults = { "ab", "cd:ef" }; [EOL]         String[] results; [EOL]         results = StringUtils.splitPreserveAllTokens("ab:cd:ef", ":", 2); [EOL]         assertEquals(expectedResults.length, results.length); [EOL]         for (int i = 0; i < expectedResults.length; i++) { [EOL]             assertEquals(expectedResults[i], results[i]); [EOL]         } [EOL]     } [EOL]     { [EOL]         String[] results; [EOL]         final String[] expectedResults = { "ab", ":cd:ef" }; [EOL]         results = StringUtils.splitPreserveAllTokens("ab::cd:ef", ":", 2); [EOL]         assertEquals(expectedResults.length, results.length); [EOL]         for (int i = 0; i < expectedResults.length; i++) { [EOL]             assertEquals(expectedResults[i], results[i]); [EOL]         } [EOL]     } [EOL]     { [EOL]         String[] results; [EOL]         final String[] expectedResults = { "ab", "", ":cd:ef" }; [EOL]         results = StringUtils.splitPreserveAllTokens("ab:::cd:ef", ":", 3); [EOL]         assertEquals(expectedResults.length, results.length); [EOL]         for (int i = 0; i < expectedResults.length; i++) { [EOL]             assertEquals(expectedResults[i], results[i]); [EOL]         } [EOL]     } [EOL]     { [EOL]         String[] results; [EOL]         final String[] expectedResults = { "ab", "", "", "cd:ef" }; [EOL]         results = StringUtils.splitPreserveAllTokens("ab:::cd:ef", ":", 4); [EOL]         assertEquals(expectedResults.length, results.length); [EOL]         for (int i = 0; i < expectedResults.length; i++) { [EOL]             assertEquals(expectedResults[i], results[i]); [EOL]         } [EOL]     } [EOL]     { [EOL]         String[] results; [EOL]         final String[] expectedResults = { "", "ab", "", "", "cd:ef" }; [EOL]         results = StringUtils.splitPreserveAllTokens(":ab:::cd:ef", ":", 5); [EOL]         assertEquals(expectedResults.length, results.length); [EOL]         for (int i = 0; i < expectedResults.length; i++) { [EOL]             assertEquals(expectedResults[i], results[i]); [EOL]         } [EOL]     } [EOL]     { [EOL]         String[] results; [EOL]         final String[] expectedResults = { "", "", "ab", "", "", "cd:ef" }; [EOL]         results = StringUtils.splitPreserveAllTokens("::ab:::cd:ef", ":", 6); [EOL]         assertEquals(expectedResults.length, results.length); [EOL]         for (int i = 0; i < expectedResults.length; i++) { [EOL]             assertEquals(expectedResults[i], results[i]); [EOL]         } [EOL]     } [EOL] }
@Test [EOL] public void testSplitPreserveAllTokens_StringString_StringStringInt() { [EOL]     assertArrayEquals(null, StringUtils.splitPreserveAllTokens(null, ".")); [EOL]     assertArrayEquals(null, StringUtils.splitPreserveAllTokens(null, ".", 3)); [EOL]     assertEquals(0, StringUtils.splitPreserveAllTokens("", ".").length); [EOL]     assertEquals(0, StringUtils.splitPreserveAllTokens("", ".", 3).length); [EOL]     innerTestSplitPreserveAllTokens('.', ".", ' '); [EOL]     innerTestSplitPreserveAllTokens('.', ".", ','); [EOL]     innerTestSplitPreserveAllTokens('.', ".,", 'x'); [EOL]     for (int i = 0; i < WHITESPACE.length(); i++) { [EOL]         for (int j = 0; j < NON_WHITESPACE.length(); j++) { [EOL]             innerTestSplitPreserveAllTokens(WHITESPACE.charAt(i), null, NON_WHITESPACE.charAt(j)); [EOL]             innerTestSplitPreserveAllTokens(WHITESPACE.charAt(i), String.valueOf(WHITESPACE.charAt(i)), NON_WHITESPACE.charAt(j)); [EOL]         } [EOL]     } [EOL]     { [EOL]         String[] results; [EOL]         final String[] expectedResults = { "ab", "de fg" }; [EOL]         results = StringUtils.splitPreserveAllTokens("ab de fg", null, 2); [EOL]         assertEquals(expectedResults.length, results.length); [EOL]         for (int i = 0; i < expectedResults.length; i++) { [EOL]             assertEquals(expectedResults[i], results[i]); [EOL]         } [EOL]     } [EOL]     { [EOL]         String[] results; [EOL]         final String[] expectedResults = { "ab", "  de fg" }; [EOL]         results = StringUtils.splitPreserveAllTokens("ab   de fg", null, 2); [EOL]         assertEquals(expectedResults.length, results.length); [EOL]         for (int i = 0; i < expectedResults.length; i++) { [EOL]             assertEquals(expectedResults[i], results[i]); [EOL]         } [EOL]     } [EOL]     { [EOL]         String[] results; [EOL]         final String[] expectedResults = { "ab", "::de:fg" }; [EOL]         results = StringUtils.splitPreserveAllTokens("ab:::de:fg", ":", 2); [EOL]         assertEquals(expectedResults.length, results.length); [EOL]         for (int i = 0; i < expectedResults.length; i++) { [EOL]             assertEquals(expectedResults[i], results[i]); [EOL]         } [EOL]     } [EOL]     { [EOL]         String[] results; [EOL]         final String[] expectedResults = { "ab", "", " de fg" }; [EOL]         results = StringUtils.splitPreserveAllTokens("ab   de fg", null, 3); [EOL]         assertEquals(expectedResults.length, results.length); [EOL]         for (int i = 0; i < expectedResults.length; i++) { [EOL]             assertEquals(expectedResults[i], results[i]); [EOL]         } [EOL]     } [EOL]     { [EOL]         String[] results; [EOL]         final String[] expectedResults = { "ab", "", "", "de fg" }; [EOL]         results = StringUtils.splitPreserveAllTokens("ab   de fg", null, 4); [EOL]         assertEquals(expectedResults.length, results.length); [EOL]         for (int i = 0; i < expectedResults.length; i++) { [EOL]             assertEquals(expectedResults[i], results[i]); [EOL]         } [EOL]     } [EOL]     { [EOL]         final String[] expectedResults = { "ab", "cd:ef" }; [EOL]         String[] results; [EOL]         results = StringUtils.splitPreserveAllTokens("ab:cd:ef", ":", 2); [EOL]         assertEquals(expectedResults.length, results.length); [EOL]         for (int i = 0; i < expectedResults.length; i++) { [EOL]             assertEquals(expectedResults[i], results[i]); [EOL]         } [EOL]     } [EOL]     { [EOL]         String[] results; [EOL]         final String[] expectedResults = { "ab", ":cd:ef" }; [EOL]         results = StringUtils.splitPreserveAllTokens("ab::cd:ef", ":", 2); [EOL]         assertEquals(expectedResults.length, results.length); [EOL]         for (int i = 0; i < expectedResults.length; i++) { [EOL]             assertEquals(expectedResults[i], results[i]); [EOL]         } [EOL]     } [EOL]     { [EOL]         String[] results; [EOL]         final String[] expectedResults = { "ab", "", ":cd:ef" }; [EOL]         results = StringUtils.splitPreserveAllTokens("ab:::cd:ef", ":", 3); [EOL]         assertEquals(expectedResults.length, results.length); [EOL]         for (int i = 0; i < expectedResults.length; i++) { [EOL]             assertEquals(expectedResults[i], results[i]); [EOL]         } [EOL]     } [EOL]     { [EOL]         String[] results; [EOL]         final String[] expectedResults = { "ab", "", "", "cd:ef" }; [EOL]         results = StringUtils.splitPreserveAllTokens("ab:::cd:ef", ":", 4); [EOL]         assertEquals(expectedResults.length, results.length); [EOL]         for (int i = 0; i < expectedResults.length; i++) { [EOL]             assertEquals(expectedResults[i], results[i]); [EOL]         } [EOL]     } [EOL]     { [EOL]         String[] results; [EOL]         final String[] expectedResults = { "", "ab", "", "", "cd:ef" }; [EOL]         results = StringUtils.splitPreserveAllTokens(":ab:::cd:ef", ":", 5); [EOL]         assertEquals(expectedResults.length, results.length); [EOL]         for (int i = 0; i < expectedResults.length; i++) { [EOL]             assertEquals(expectedResults[i], results[i]); [EOL]         } [EOL]     } [EOL]     { [EOL]         String[] results; [EOL]         final String[] expectedResults = { "", "", "ab", "", "", "cd:ef" }; [EOL]         results = StringUtils.splitPreserveAllTokens("::ab:::cd:ef", ":", 6); [EOL]         assertEquals(expectedResults.length, results.length); [EOL]         for (int i = 0; i < expectedResults.length; i++) { [EOL]             assertEquals(expectedResults[i], results[i]); [EOL]         } [EOL]     } [EOL] }
@Test [EOL] public void testSplitPreserveAllTokens_StringString_StringStringInt() { [EOL]     assertArrayEquals(null, StringUtils.splitPreserveAllTokens(null, ".")); [EOL]     assertArrayEquals(null, StringUtils.splitPreserveAllTokens(null, ".", 3)); [EOL]     assertEquals(0, StringUtils.splitPreserveAllTokens("", ".").length); [EOL]     assertEquals(0, StringUtils.splitPreserveAllTokens("", ".", 3).length); [EOL]     innerTestSplitPreserveAllTokens('.', ".", ' '); [EOL]     innerTestSplitPreserveAllTokens('.', ".", ','); [EOL]     innerTestSplitPreserveAllTokens('.', ".,", 'x'); [EOL]     for (int i = 0; i < WHITESPACE.length(); i++) { [EOL]         for (int j = 0; j < NON_WHITESPACE.length(); j++) { [EOL]             innerTestSplitPreserveAllTokens(WHITESPACE.charAt(i), null, NON_WHITESPACE.charAt(j)); [EOL]             innerTestSplitPreserveAllTokens(WHITESPACE.charAt(i), String.valueOf(WHITESPACE.charAt(i)), NON_WHITESPACE.charAt(j)); [EOL]         } [EOL]     } [EOL]     { [EOL]         String[] results; [EOL]         final String[] expectedResults = { "ab", "de fg" }; [EOL]         results = StringUtils.splitPreserveAllTokens("ab de fg", null, 2); [EOL]         assertEquals(expectedResults.length, results.length); [EOL]         for (int i = 0; i < expectedResults.length; i++) { [EOL]             assertEquals(expectedResults[i], results[i]); [EOL]         } [EOL]     } [EOL]     { [EOL]         String[] results; [EOL]         final String[] expectedResults = { "ab", "  de fg" }; [EOL]         results = StringUtils.splitPreserveAllTokens("ab   de fg", null, 2); [EOL]         assertEquals(expectedResults.length, results.length); [EOL]         for (int i = 0; i < expectedResults.length; i++) { [EOL]             assertEquals(expectedResults[i], results[i]); [EOL]         } [EOL]     } [EOL]     { [EOL]         String[] results; [EOL]         final String[] expectedResults = { "ab", "::de:fg" }; [EOL]         results = StringUtils.splitPreserveAllTokens("ab:::de:fg", ":", 2); [EOL]         assertEquals(expectedResults.length, results.length); [EOL]         for (int i = 0; i < expectedResults.length; i++) { [EOL]             assertEquals(expectedResults[i], results[i]); [EOL]         } [EOL]     } [EOL]     { [EOL]         String[] results; [EOL]         final String[] expectedResults = { "ab", "", " de fg" }; [EOL]         results = StringUtils.splitPreserveAllTokens("ab   de fg", null, 3); [EOL]         assertEquals(expectedResults.length, results.length); [EOL]         for (int i = 0; i < expectedResults.length; i++) { [EOL]             assertEquals(expectedResults[i], results[i]); [EOL]         } [EOL]     } [EOL]     { [EOL]         String[] results; [EOL]         final String[] expectedResults = { "ab", "", "", "de fg" }; [EOL]         results = StringUtils.splitPreserveAllTokens("ab   de fg", null, 4); [EOL]         assertEquals(expectedResults.length, results.length); [EOL]         for (int i = 0; i < expectedResults.length; i++) { [EOL]             assertEquals(expectedResults[i], results[i]); [EOL]         } [EOL]     } [EOL]     { [EOL]         final String[] expectedResults = { "ab", "cd:ef" }; [EOL]         String[] results; [EOL]         results = StringUtils.splitPreserveAllTokens("ab:cd:ef", ":", 2); [EOL]         assertEquals(expectedResults.length, results.length); [EOL]         for (int i = 0; i < expectedResults.length; i++) { [EOL]             assertEquals(expectedResults[i], results[i]); [EOL]         } [EOL]     } [EOL]     { [EOL]         String[] results; [EOL]         final String[] expectedResults = { "ab", ":cd:ef" }; [EOL]         results = StringUtils.splitPreserveAllTokens("ab::cd:ef", ":", 2); [EOL]         assertEquals(expectedResults.length, results.length); [EOL]         for (int i = 0; i < expectedResults.length; i++) { [EOL]             assertEquals(expectedResults[i], results[i]); [EOL]         } [EOL]     } [EOL]     { [EOL]         String[] results; [EOL]         final String[] expectedResults = { "ab", "", ":cd:ef" }; [EOL]         results = StringUtils.splitPreserveAllTokens("ab:::cd:ef", ":", 3); [EOL]         assertEquals(expectedResults.length, results.length); [EOL]         for (int i = 0; i < expectedResults.length; i++) { [EOL]             assertEquals(expectedResults[i], results[i]); [EOL]         } [EOL]     } [EOL]     { [EOL]         String[] results; [EOL]         final String[] expectedResults = { "ab", "", "", "cd:ef" }; [EOL]         results = StringUtils.splitPreserveAllTokens("ab:::cd:ef", ":", 4); [EOL]         assertEquals(expectedResults.length, results.length); [EOL]         for (int i = 0; i < expectedResults.length; i++) { [EOL]             assertEquals(expectedResults[i], results[i]); [EOL]         } [EOL]     } [EOL]     { [EOL]         String[] results; [EOL]         final String[] expectedResults = { "", "ab", "", "", "cd:ef" }; [EOL]         results = StringUtils.splitPreserveAllTokens(":ab:::cd:ef", ":", 5); [EOL]         assertEquals(expectedResults.length, results.length); [EOL]         for (int i = 0; i < expectedResults.length; i++) { [EOL]             assertEquals(expectedResults[i], results[i]); [EOL]         } [EOL]     } [EOL]     { [EOL]         String[] results; [EOL]         final String[] expectedResults = { "", "", "ab", "", "", "cd:ef" }; [EOL]         results = StringUtils.splitPreserveAllTokens("::ab:::cd:ef", ":", 6); [EOL]         assertEquals(expectedResults.length, results.length); [EOL]         for (int i = 0; i < expectedResults.length; i++) { [EOL]             assertEquals(expectedResults[i], results[i]); [EOL]         } [EOL]     } [EOL] }
@Test [EOL] public void testSplitPreserveAllTokens_StringString_StringStringInt() { [EOL]     assertArrayEquals(null, StringUtils.splitPreserveAllTokens(null, ".")); [EOL]     assertArrayEquals(null, StringUtils.splitPreserveAllTokens(null, ".", 3)); [EOL]     assertEquals(0, StringUtils.splitPreserveAllTokens("", ".").length); [EOL]     assertEquals(0, StringUtils.splitPreserveAllTokens("", ".", 3).length); [EOL]     innerTestSplitPreserveAllTokens('.', ".", ' '); [EOL]     innerTestSplitPreserveAllTokens('.', ".", ','); [EOL]     innerTestSplitPreserveAllTokens('.', ".,", 'x'); [EOL]     for (int i = 0; i < WHITESPACE.length(); i++) { [EOL]         for (int j = 0; j < NON_WHITESPACE.length(); j++) { [EOL]             innerTestSplitPreserveAllTokens(WHITESPACE.charAt(i), null, NON_WHITESPACE.charAt(j)); [EOL]             innerTestSplitPreserveAllTokens(WHITESPACE.charAt(i), String.valueOf(WHITESPACE.charAt(i)), NON_WHITESPACE.charAt(j)); [EOL]         } [EOL]     } [EOL]     { [EOL]         String[] results; [EOL]         final String[] expectedResults = { "ab", "de fg" }; [EOL]         results = StringUtils.splitPreserveAllTokens("ab de fg", null, 2); [EOL]         assertEquals(expectedResults.length, results.length); [EOL]         for (int i = 0; i < expectedResults.length; i++) { [EOL]             assertEquals(expectedResults[i], results[i]); [EOL]         } [EOL]     } [EOL]     { [EOL]         String[] results; [EOL]         final String[] expectedResults = { "ab", "  de fg" }; [EOL]         results = StringUtils.splitPreserveAllTokens("ab   de fg", null, 2); [EOL]         assertEquals(expectedResults.length, results.length); [EOL]         for (int i = 0; i < expectedResults.length; i++) { [EOL]             assertEquals(expectedResults[i], results[i]); [EOL]         } [EOL]     } [EOL]     { [EOL]         String[] results; [EOL]         final String[] expectedResults = { "ab", "::de:fg" }; [EOL]         results = StringUtils.splitPreserveAllTokens("ab:::de:fg", ":", 2); [EOL]         assertEquals(expectedResults.length, results.length); [EOL]         for (int i = 0; i < expectedResults.length; i++) { [EOL]             assertEquals(expectedResults[i], results[i]); [EOL]         } [EOL]     } [EOL]     { [EOL]         String[] results; [EOL]         final String[] expectedResults = { "ab", "", " de fg" }; [EOL]         results = StringUtils.splitPreserveAllTokens("ab   de fg", null, 3); [EOL]         assertEquals(expectedResults.length, results.length); [EOL]         for (int i = 0; i < expectedResults.length; i++) { [EOL]             assertEquals(expectedResults[i], results[i]); [EOL]         } [EOL]     } [EOL]     { [EOL]         String[] results; [EOL]         final String[] expectedResults = { "ab", "", "", "de fg" }; [EOL]         results = StringUtils.splitPreserveAllTokens("ab   de fg", null, 4); [EOL]         assertEquals(expectedResults.length, results.length); [EOL]         for (int i = 0; i < expectedResults.length; i++) { [EOL]             assertEquals(expectedResults[i], results[i]); [EOL]         } [EOL]     } [EOL]     { [EOL]         final String[] expectedResults = { "ab", "cd:ef" }; [EOL]         String[] results; [EOL]         results = StringUtils.splitPreserveAllTokens("ab:cd:ef", ":", 2); [EOL]         assertEquals(expectedResults.length, results.length); [EOL]         for (int i = 0; i < expectedResults.length; i++) { [EOL]             assertEquals(expectedResults[i], results[i]); [EOL]         } [EOL]     } [EOL]     { [EOL]         String[] results; [EOL]         final String[] expectedResults = { "ab", ":cd:ef" }; [EOL]         results = StringUtils.splitPreserveAllTokens("ab::cd:ef", ":", 2); [EOL]         assertEquals(expectedResults.length, results.length); [EOL]         for (int i = 0; i < expectedResults.length; i++) { [EOL]             assertEquals(expectedResults[i], results[i]); [EOL]         } [EOL]     } [EOL]     { [EOL]         String[] results; [EOL]         final String[] expectedResults = { "ab", "", ":cd:ef" }; [EOL]         results = StringUtils.splitPreserveAllTokens("ab:::cd:ef", ":", 3); [EOL]         assertEquals(expectedResults.length, results.length); [EOL]         for (int i = 0; i < expectedResults.length; i++) { [EOL]             assertEquals(expectedResults[i], results[i]); [EOL]         } [EOL]     } [EOL]     { [EOL]         String[] results; [EOL]         final String[] expectedResults = { "ab", "", "", "cd:ef" }; [EOL]         results = StringUtils.splitPreserveAllTokens("ab:::cd:ef", ":", 4); [EOL]         assertEquals(expectedResults.length, results.length); [EOL]         for (int i = 0; i < expectedResults.length; i++) { [EOL]             assertEquals(expectedResults[i], results[i]); [EOL]         } [EOL]     } [EOL]     { [EOL]         String[] results; [EOL]         final String[] expectedResults = { "", "ab", "", "", "cd:ef" }; [EOL]         results = StringUtils.splitPreserveAllTokens(":ab:::cd:ef", ":", 5); [EOL]         assertEquals(expectedResults.length, results.length); [EOL]         for (int i = 0; i < expectedResults.length; i++) { [EOL]             assertEquals(expectedResults[i], results[i]); [EOL]         } [EOL]     } [EOL]     { [EOL]         String[] results; [EOL]         final String[] expectedResults = { "", "", "ab", "", "", "cd:ef" }; [EOL]         results = StringUtils.splitPreserveAllTokens("::ab:::cd:ef", ":", 6); [EOL]         assertEquals(expectedResults.length, results.length); [EOL]         for (int i = 0; i < expectedResults.length; i++) { [EOL]             assertEquals(expectedResults[i], results[i]); [EOL]         } [EOL]     } [EOL] }
@Test [EOL] public void testSplitPreserveAllTokens_StringString_StringStringInt() { [EOL]     assertArrayEquals(null, StringUtils.splitPreserveAllTokens(null, ".")); [EOL]     assertArrayEquals(null, StringUtils.splitPreserveAllTokens(null, ".", 3)); [EOL]     assertEquals(0, StringUtils.splitPreserveAllTokens("", ".").length); [EOL]     assertEquals(0, StringUtils.splitPreserveAllTokens("", ".", 3).length); [EOL]     innerTestSplitPreserveAllTokens('.', ".", ' '); [EOL]     innerTestSplitPreserveAllTokens('.', ".", ','); [EOL]     innerTestSplitPreserveAllTokens('.', ".,", 'x'); [EOL]     for (int i = 0; i < WHITESPACE.length(); i++) { [EOL]         for (int j = 0; j < NON_WHITESPACE.length(); j++) { [EOL]             innerTestSplitPreserveAllTokens(WHITESPACE.charAt(i), null, NON_WHITESPACE.charAt(j)); [EOL]             innerTestSplitPreserveAllTokens(WHITESPACE.charAt(i), String.valueOf(WHITESPACE.charAt(i)), NON_WHITESPACE.charAt(j)); [EOL]         } [EOL]     } [EOL]     { [EOL]         String[] results; [EOL]         final String[] expectedResults = { "ab", "de fg" }; [EOL]         results = StringUtils.splitPreserveAllTokens("ab de fg", null, 2); [EOL]         assertEquals(expectedResults.length, results.length); [EOL]         for (int i = 0; i < expectedResults.length; i++) { [EOL]             assertEquals(expectedResults[i], results[i]); [EOL]         } [EOL]     } [EOL]     { [EOL]         String[] results; [EOL]         final String[] expectedResults = { "ab", "  de fg" }; [EOL]         results = StringUtils.splitPreserveAllTokens("ab   de fg", null, 2); [EOL]         assertEquals(expectedResults.length, results.length); [EOL]         for (int i = 0; i < expectedResults.length; i++) { [EOL]             assertEquals(expectedResults[i], results[i]); [EOL]         } [EOL]     } [EOL]     { [EOL]         String[] results; [EOL]         final String[] expectedResults = { "ab", "::de:fg" }; [EOL]         results = StringUtils.splitPreserveAllTokens("ab:::de:fg", ":", 2); [EOL]         assertEquals(expectedResults.length, results.length); [EOL]         for (int i = 0; i < expectedResults.length; i++) { [EOL]             assertEquals(expectedResults[i], results[i]); [EOL]         } [EOL]     } [EOL]     { [EOL]         String[] results; [EOL]         final String[] expectedResults = { "ab", "", " de fg" }; [EOL]         results = StringUtils.splitPreserveAllTokens("ab   de fg", null, 3); [EOL]         assertEquals(expectedResults.length, results.length); [EOL]         for (int i = 0; i < expectedResults.length; i++) { [EOL]             assertEquals(expectedResults[i], results[i]); [EOL]         } [EOL]     } [EOL]     { [EOL]         String[] results; [EOL]         final String[] expectedResults = { "ab", "", "", "de fg" }; [EOL]         results = StringUtils.splitPreserveAllTokens("ab   de fg", null, 4); [EOL]         assertEquals(expectedResults.length, results.length); [EOL]         for (int i = 0; i < expectedResults.length; i++) { [EOL]             assertEquals(expectedResults[i], results[i]); [EOL]         } [EOL]     } [EOL]     { [EOL]         final String[] expectedResults = { "ab", "cd:ef" }; [EOL]         String[] results; [EOL]         results = StringUtils.splitPreserveAllTokens("ab:cd:ef", ":", 2); [EOL]         assertEquals(expectedResults.length, results.length); [EOL]         for (int i = 0; i < expectedResults.length; i++) { [EOL]             assertEquals(expectedResults[i], results[i]); [EOL]         } [EOL]     } [EOL]     { [EOL]         String[] results; [EOL]         final String[] expectedResults = { "ab", ":cd:ef" }; [EOL]         results = StringUtils.splitPreserveAllTokens("ab::cd:ef", ":", 2); [EOL]         assertEquals(expectedResults.length, results.length); [EOL]         for (int i = 0; i < expectedResults.length; i++) { [EOL]             assertEquals(expectedResults[i], results[i]); [EOL]         } [EOL]     } [EOL]     { [EOL]         String[] results; [EOL]         final String[] expectedResults = { "ab", "", ":cd:ef" }; [EOL]         results = StringUtils.splitPreserveAllTokens("ab:::cd:ef", ":", 3); [EOL]         assertEquals(expectedResults.length, results.length); [EOL]         for (int i = 0; i < expectedResults.length; i++) { [EOL]             assertEquals(expectedResults[i], results[i]); [EOL]         } [EOL]     } [EOL]     { [EOL]         String[] results; [EOL]         final String[] expectedResults = { "ab", "", "", "cd:ef" }; [EOL]         results = StringUtils.splitPreserveAllTokens("ab:::cd:ef", ":", 4); [EOL]         assertEquals(expectedResults.length, results.length); [EOL]         for (int i = 0; i < expectedResults.length; i++) { [EOL]             assertEquals(expectedResults[i], results[i]); [EOL]         } [EOL]     } [EOL]     { [EOL]         String[] results; [EOL]         final String[] expectedResults = { "", "ab", "", "", "cd:ef" }; [EOL]         results = StringUtils.splitPreserveAllTokens(":ab:::cd:ef", ":", 5); [EOL]         assertEquals(expectedResults.length, results.length); [EOL]         for (int i = 0; i < expectedResults.length; i++) { [EOL]             assertEquals(expectedResults[i], results[i]); [EOL]         } [EOL]     } [EOL]     { [EOL]         String[] results; [EOL]         final String[] expectedResults = { "", "", "ab", "", "", "cd:ef" }; [EOL]         results = StringUtils.splitPreserveAllTokens("::ab:::cd:ef", ":", 6); [EOL]         assertEquals(expectedResults.length, results.length); [EOL]         for (int i = 0; i < expectedResults.length; i++) { [EOL]             assertEquals(expectedResults[i], results[i]); [EOL]         } [EOL]     } [EOL] }
@Test [EOL] public void testSplitPreserveAllTokens_StringString_StringStringInt() { [EOL]     assertArrayEquals(null, StringUtils.splitPreserveAllTokens(null, ".")); [EOL]     assertArrayEquals(null, StringUtils.splitPreserveAllTokens(null, ".", 3)); [EOL]     assertEquals(0, StringUtils.splitPreserveAllTokens("", ".").length); [EOL]     assertEquals(0, StringUtils.splitPreserveAllTokens("", ".", 3).length); [EOL]     innerTestSplitPreserveAllTokens('.', ".", ' '); [EOL]     innerTestSplitPreserveAllTokens('.', ".", ','); [EOL]     innerTestSplitPreserveAllTokens('.', ".,", 'x'); [EOL]     for (int i = 0; i < WHITESPACE.length(); i++) { [EOL]         for (int j = 0; j < NON_WHITESPACE.length(); j++) { [EOL]             innerTestSplitPreserveAllTokens(WHITESPACE.charAt(i), null, NON_WHITESPACE.charAt(j)); [EOL]             innerTestSplitPreserveAllTokens(WHITESPACE.charAt(i), String.valueOf(WHITESPACE.charAt(i)), NON_WHITESPACE.charAt(j)); [EOL]         } [EOL]     } [EOL]     { [EOL]         String[] results; [EOL]         final String[] expectedResults = { "ab", "de fg" }; [EOL]         results = StringUtils.splitPreserveAllTokens("ab de fg", null, 2); [EOL]         assertEquals(expectedResults.length, results.length); [EOL]         for (int i = 0; i < expectedResults.length; i++) { [EOL]             assertEquals(expectedResults[i], results[i]); [EOL]         } [EOL]     } [EOL]     { [EOL]         String[] results; [EOL]         final String[] expectedResults = { "ab", "  de fg" }; [EOL]         results = StringUtils.splitPreserveAllTokens("ab   de fg", null, 2); [EOL]         assertEquals(expectedResults.length, results.length); [EOL]         for (int i = 0; i < expectedResults.length; i++) { [EOL]             assertEquals(expectedResults[i], results[i]); [EOL]         } [EOL]     } [EOL]     { [EOL]         String[] results; [EOL]         final String[] expectedResults = { "ab", "::de:fg" }; [EOL]         results = StringUtils.splitPreserveAllTokens("ab:::de:fg", ":", 2); [EOL]         assertEquals(expectedResults.length, results.length); [EOL]         for (int i = 0; i < expectedResults.length; i++) { [EOL]             assertEquals(expectedResults[i], results[i]); [EOL]         } [EOL]     } [EOL]     { [EOL]         String[] results; [EOL]         final String[] expectedResults = { "ab", "", " de fg" }; [EOL]         results = StringUtils.splitPreserveAllTokens("ab   de fg", null, 3); [EOL]         assertEquals(expectedResults.length, results.length); [EOL]         for (int i = 0; i < expectedResults.length; i++) { [EOL]             assertEquals(expectedResults[i], results[i]); [EOL]         } [EOL]     } [EOL]     { [EOL]         String[] results; [EOL]         final String[] expectedResults = { "ab", "", "", "de fg" }; [EOL]         results = StringUtils.splitPreserveAllTokens("ab   de fg", null, 4); [EOL]         assertEquals(expectedResults.length, results.length); [EOL]         for (int i = 0; i < expectedResults.length; i++) { [EOL]             assertEquals(expectedResults[i], results[i]); [EOL]         } [EOL]     } [EOL]     { [EOL]         final String[] expectedResults = { "ab", "cd:ef" }; [EOL]         String[] results; [EOL]         results = StringUtils.splitPreserveAllTokens("ab:cd:ef", ":", 2); [EOL]         assertEquals(expectedResults.length, results.length); [EOL]         for (int i = 0; i < expectedResults.length; i++) { [EOL]             assertEquals(expectedResults[i], results[i]); [EOL]         } [EOL]     } [EOL]     { [EOL]         String[] results; [EOL]         final String[] expectedResults = { "ab", ":cd:ef" }; [EOL]         results = StringUtils.splitPreserveAllTokens("ab::cd:ef", ":", 2); [EOL]         assertEquals(expectedResults.length, results.length); [EOL]         for (int i = 0; i < expectedResults.length; i++) { [EOL]             assertEquals(expectedResults[i], results[i]); [EOL]         } [EOL]     } [EOL]     { [EOL]         String[] results; [EOL]         final String[] expectedResults = { "ab", "", ":cd:ef" }; [EOL]         results = StringUtils.splitPreserveAllTokens("ab:::cd:ef", ":", 3); [EOL]         assertEquals(expectedResults.length, results.length); [EOL]         for (int i = 0; i < expectedResults.length; i++) { [EOL]             assertEquals(expectedResults[i], results[i]); [EOL]         } [EOL]     } [EOL]     { [EOL]         String[] results; [EOL]         final String[] expectedResults = { "ab", "", "", "cd:ef" }; [EOL]         results = StringUtils.splitPreserveAllTokens("ab:::cd:ef", ":", 4); [EOL]         assertEquals(expectedResults.length, results.length); [EOL]         for (int i = 0; i < expectedResults.length; i++) { [EOL]             assertEquals(expectedResults[i], results[i]); [EOL]         } [EOL]     } [EOL]     { [EOL]         String[] results; [EOL]         final String[] expectedResults = { "", "ab", "", "", "cd:ef" }; [EOL]         results = StringUtils.splitPreserveAllTokens(":ab:::cd:ef", ":", 5); [EOL]         assertEquals(expectedResults.length, results.length); [EOL]         for (int i = 0; i < expectedResults.length; i++) { [EOL]             assertEquals(expectedResults[i], results[i]); [EOL]         } [EOL]     } [EOL]     { [EOL]         String[] results; [EOL]         final String[] expectedResults = { "", "", "ab", "", "", "cd:ef" }; [EOL]         results = StringUtils.splitPreserveAllTokens("::ab:::cd:ef", ":", 6); [EOL]         assertEquals(expectedResults.length, results.length); [EOL]         for (int i = 0; i < expectedResults.length; i++) { [EOL]             assertEquals(expectedResults[i], results[i]); [EOL]         } [EOL]     } [EOL] }
@Test [EOL] public void testSplitPreserveAllTokens_StringString_StringStringInt() { [EOL]     assertArrayEquals(null, StringUtils.splitPreserveAllTokens(null, ".")); [EOL]     assertArrayEquals(null, StringUtils.splitPreserveAllTokens(null, ".", 3)); [EOL]     assertEquals(0, StringUtils.splitPreserveAllTokens("", ".").length); [EOL]     assertEquals(0, StringUtils.splitPreserveAllTokens("", ".", 3).length); [EOL]     innerTestSplitPreserveAllTokens('.', ".", ' '); [EOL]     innerTestSplitPreserveAllTokens('.', ".", ','); [EOL]     innerTestSplitPreserveAllTokens('.', ".,", 'x'); [EOL]     for (int i = 0; i < WHITESPACE.length(); i++) { [EOL]         for (int j = 0; j < NON_WHITESPACE.length(); j++) { [EOL]             innerTestSplitPreserveAllTokens(WHITESPACE.charAt(i), null, NON_WHITESPACE.charAt(j)); [EOL]             innerTestSplitPreserveAllTokens(WHITESPACE.charAt(i), String.valueOf(WHITESPACE.charAt(i)), NON_WHITESPACE.charAt(j)); [EOL]         } [EOL]     } [EOL]     { [EOL]         String[] results; [EOL]         final String[] expectedResults = { "ab", "de fg" }; [EOL]         results = StringUtils.splitPreserveAllTokens("ab de fg", null, 2); [EOL]         assertEquals(expectedResults.length, results.length); [EOL]         for (int i = 0; i < expectedResults.length; i++) { [EOL]             assertEquals(expectedResults[i], results[i]); [EOL]         } [EOL]     } [EOL]     { [EOL]         String[] results; [EOL]         final String[] expectedResults = { "ab", "  de fg" }; [EOL]         results = StringUtils.splitPreserveAllTokens("ab   de fg", null, 2); [EOL]         assertEquals(expectedResults.length, results.length); [EOL]         for (int i = 0; i < expectedResults.length; i++) { [EOL]             assertEquals(expectedResults[i], results[i]); [EOL]         } [EOL]     } [EOL]     { [EOL]         String[] results; [EOL]         final String[] expectedResults = { "ab", "::de:fg" }; [EOL]         results = StringUtils.splitPreserveAllTokens("ab:::de:fg", ":", 2); [EOL]         assertEquals(expectedResults.length, results.length); [EOL]         for (int i = 0; i < expectedResults.length; i++) { [EOL]             assertEquals(expectedResults[i], results[i]); [EOL]         } [EOL]     } [EOL]     { [EOL]         String[] results; [EOL]         final String[] expectedResults = { "ab", "", " de fg" }; [EOL]         results = StringUtils.splitPreserveAllTokens("ab   de fg", null, 3); [EOL]         assertEquals(expectedResults.length, results.length); [EOL]         for (int i = 0; i < expectedResults.length; i++) { [EOL]             assertEquals(expectedResults[i], results[i]); [EOL]         } [EOL]     } [EOL]     { [EOL]         String[] results; [EOL]         final String[] expectedResults = { "ab", "", "", "de fg" }; [EOL]         results = StringUtils.splitPreserveAllTokens("ab   de fg", null, 4); [EOL]         assertEquals(expectedResults.length, results.length); [EOL]         for (int i = 0; i < expectedResults.length; i++) { [EOL]             assertEquals(expectedResults[i], results[i]); [EOL]         } [EOL]     } [EOL]     { [EOL]         final String[] expectedResults = { "ab", "cd:ef" }; [EOL]         String[] results; [EOL]         results = StringUtils.splitPreserveAllTokens("ab:cd:ef", ":", 2); [EOL]         assertEquals(expectedResults.length, results.length); [EOL]         for (int i = 0; i < expectedResults.length; i++) { [EOL]             assertEquals(expectedResults[i], results[i]); [EOL]         } [EOL]     } [EOL]     { [EOL]         String[] results; [EOL]         final String[] expectedResults = { "ab", ":cd:ef" }; [EOL]         results = StringUtils.splitPreserveAllTokens("ab::cd:ef", ":", 2); [EOL]         assertEquals(expectedResults.length, results.length); [EOL]         for (int i = 0; i < expectedResults.length; i++) { [EOL]             assertEquals(expectedResults[i], results[i]); [EOL]         } [EOL]     } [EOL]     { [EOL]         String[] results; [EOL]         final String[] expectedResults = { "ab", "", ":cd:ef" }; [EOL]         results = StringUtils.splitPreserveAllTokens("ab:::cd:ef", ":", 3); [EOL]         assertEquals(expectedResults.length, results.length); [EOL]         for (int i = 0; i < expectedResults.length; i++) { [EOL]             assertEquals(expectedResults[i], results[i]); [EOL]         } [EOL]     } [EOL]     { [EOL]         String[] results; [EOL]         final String[] expectedResults = { "ab", "", "", "cd:ef" }; [EOL]         results = StringUtils.splitPreserveAllTokens("ab:::cd:ef", ":", 4); [EOL]         assertEquals(expectedResults.length, results.length); [EOL]         for (int i = 0; i < expectedResults.length; i++) { [EOL]             assertEquals(expectedResults[i], results[i]); [EOL]         } [EOL]     } [EOL]     { [EOL]         String[] results; [EOL]         final String[] expectedResults = { "", "ab", "", "", "cd:ef" }; [EOL]         results = StringUtils.splitPreserveAllTokens(":ab:::cd:ef", ":", 5); [EOL]         assertEquals(expectedResults.length, results.length); [EOL]         for (int i = 0; i < expectedResults.length; i++) { [EOL]             assertEquals(expectedResults[i], results[i]); [EOL]         } [EOL]     } [EOL]     { [EOL]         String[] results; [EOL]         final String[] expectedResults = { "", "", "ab", "", "", "cd:ef" }; [EOL]         results = StringUtils.splitPreserveAllTokens("::ab:::cd:ef", ":", 6); [EOL]         assertEquals(expectedResults.length, results.length); [EOL]         for (int i = 0; i < expectedResults.length; i++) { [EOL]             assertEquals(expectedResults[i], results[i]); [EOL]         } [EOL]     } [EOL] }
@Test [EOL] public void testSplitPreserveAllTokens_StringString_StringStringInt() { [EOL]     assertArrayEquals(null, StringUtils.splitPreserveAllTokens(null, ".")); [EOL]     assertArrayEquals(null, StringUtils.splitPreserveAllTokens(null, ".", 3)); [EOL]     assertEquals(0, StringUtils.splitPreserveAllTokens("", ".").length); [EOL]     assertEquals(0, StringUtils.splitPreserveAllTokens("", ".", 3).length); [EOL]     innerTestSplitPreserveAllTokens('.', ".", ' '); [EOL]     innerTestSplitPreserveAllTokens('.', ".", ','); [EOL]     innerTestSplitPreserveAllTokens('.', ".,", 'x'); [EOL]     for (int i = 0; i < WHITESPACE.length(); i++) { [EOL]         for (int j = 0; j < NON_WHITESPACE.length(); j++) { [EOL]             innerTestSplitPreserveAllTokens(WHITESPACE.charAt(i), null, NON_WHITESPACE.charAt(j)); [EOL]             innerTestSplitPreserveAllTokens(WHITESPACE.charAt(i), String.valueOf(WHITESPACE.charAt(i)), NON_WHITESPACE.charAt(j)); [EOL]         } [EOL]     } [EOL]     { [EOL]         String[] results; [EOL]         final String[] expectedResults = { "ab", "de fg" }; [EOL]         results = StringUtils.splitPreserveAllTokens("ab de fg", null, 2); [EOL]         assertEquals(expectedResults.length, results.length); [EOL]         for (int i = 0; i < expectedResults.length; i++) { [EOL]             assertEquals(expectedResults[i], results[i]); [EOL]         } [EOL]     } [EOL]     { [EOL]         String[] results; [EOL]         final String[] expectedResults = { "ab", "  de fg" }; [EOL]         results = StringUtils.splitPreserveAllTokens("ab   de fg", null, 2); [EOL]         assertEquals(expectedResults.length, results.length); [EOL]         for (int i = 0; i < expectedResults.length; i++) { [EOL]             assertEquals(expectedResults[i], results[i]); [EOL]         } [EOL]     } [EOL]     { [EOL]         String[] results; [EOL]         final String[] expectedResults = { "ab", "::de:fg" }; [EOL]         results = StringUtils.splitPreserveAllTokens("ab:::de:fg", ":", 2); [EOL]         assertEquals(expectedResults.length, results.length); [EOL]         for (int i = 0; i < expectedResults.length; i++) { [EOL]             assertEquals(expectedResults[i], results[i]); [EOL]         } [EOL]     } [EOL]     { [EOL]         String[] results; [EOL]         final String[] expectedResults = { "ab", "", " de fg" }; [EOL]         results = StringUtils.splitPreserveAllTokens("ab   de fg", null, 3); [EOL]         assertEquals(expectedResults.length, results.length); [EOL]         for (int i = 0; i < expectedResults.length; i++) { [EOL]             assertEquals(expectedResults[i], results[i]); [EOL]         } [EOL]     } [EOL]     { [EOL]         String[] results; [EOL]         final String[] expectedResults = { "ab", "", "", "de fg" }; [EOL]         results = StringUtils.splitPreserveAllTokens("ab   de fg", null, 4); [EOL]         assertEquals(expectedResults.length, results.length); [EOL]         for (int i = 0; i < expectedResults.length; i++) { [EOL]             assertEquals(expectedResults[i], results[i]); [EOL]         } [EOL]     } [EOL]     { [EOL]         final String[] expectedResults = { "ab", "cd:ef" }; [EOL]         String[] results; [EOL]         results = StringUtils.splitPreserveAllTokens("ab:cd:ef", ":", 2); [EOL]         assertEquals(expectedResults.length, results.length); [EOL]         for (int i = 0; i < expectedResults.length; i++) { [EOL]             assertEquals(expectedResults[i], results[i]); [EOL]         } [EOL]     } [EOL]     { [EOL]         String[] results; [EOL]         final String[] expectedResults = { "ab", ":cd:ef" }; [EOL]         results = StringUtils.splitPreserveAllTokens("ab::cd:ef", ":", 2); [EOL]         assertEquals(expectedResults.length, results.length); [EOL]         for (int i = 0; i < expectedResults.length; i++) { [EOL]             assertEquals(expectedResults[i], results[i]); [EOL]         } [EOL]     } [EOL]     { [EOL]         String[] results; [EOL]         final String[] expectedResults = { "ab", "", ":cd:ef" }; [EOL]         results = StringUtils.splitPreserveAllTokens("ab:::cd:ef", ":", 3); [EOL]         assertEquals(expectedResults.length, results.length); [EOL]         for (int i = 0; i < expectedResults.length; i++) { [EOL]             assertEquals(expectedResults[i], results[i]); [EOL]         } [EOL]     } [EOL]     { [EOL]         String[] results; [EOL]         final String[] expectedResults = { "ab", "", "", "cd:ef" }; [EOL]         results = StringUtils.splitPreserveAllTokens("ab:::cd:ef", ":", 4); [EOL]         assertEquals(expectedResults.length, results.length); [EOL]         for (int i = 0; i < expectedResults.length; i++) { [EOL]             assertEquals(expectedResults[i], results[i]); [EOL]         } [EOL]     } [EOL]     { [EOL]         String[] results; [EOL]         final String[] expectedResults = { "", "ab", "", "", "cd:ef" }; [EOL]         results = StringUtils.splitPreserveAllTokens(":ab:::cd:ef", ":", 5); [EOL]         assertEquals(expectedResults.length, results.length); [EOL]         for (int i = 0; i < expectedResults.length; i++) { [EOL]             assertEquals(expectedResults[i], results[i]); [EOL]         } [EOL]     } [EOL]     { [EOL]         String[] results; [EOL]         final String[] expectedResults = { "", "", "ab", "", "", "cd:ef" }; [EOL]         results = StringUtils.splitPreserveAllTokens("::ab:::cd:ef", ":", 6); [EOL]         assertEquals(expectedResults.length, results.length); [EOL]         for (int i = 0; i < expectedResults.length; i++) { [EOL]             assertEquals(expectedResults[i], results[i]); [EOL]         } [EOL]     } [EOL] }
@Test [EOL] public void testSplitPreserveAllTokens_StringString_StringStringInt() { [EOL]     assertArrayEquals(null, StringUtils.splitPreserveAllTokens(null, ".")); [EOL]     assertArrayEquals(null, StringUtils.splitPreserveAllTokens(null, ".", 3)); [EOL]     assertEquals(0, StringUtils.splitPreserveAllTokens("", ".").length); [EOL]     assertEquals(0, StringUtils.splitPreserveAllTokens("", ".", 3).length); [EOL]     innerTestSplitPreserveAllTokens('.', ".", ' '); [EOL]     innerTestSplitPreserveAllTokens('.', ".", ','); [EOL]     innerTestSplitPreserveAllTokens('.', ".,", 'x'); [EOL]     for (int i = 0; i < WHITESPACE.length(); i++) { [EOL]         for (int j = 0; j < NON_WHITESPACE.length(); j++) { [EOL]             innerTestSplitPreserveAllTokens(WHITESPACE.charAt(i), null, NON_WHITESPACE.charAt(j)); [EOL]             innerTestSplitPreserveAllTokens(WHITESPACE.charAt(i), String.valueOf(WHITESPACE.charAt(i)), NON_WHITESPACE.charAt(j)); [EOL]         } [EOL]     } [EOL]     { [EOL]         String[] results; [EOL]         final String[] expectedResults = { "ab", "de fg" }; [EOL]         results = StringUtils.splitPreserveAllTokens("ab de fg", null, 2); [EOL]         assertEquals(expectedResults.length, results.length); [EOL]         for (int i = 0; i < expectedResults.length; i++) { [EOL]             assertEquals(expectedResults[i], results[i]); [EOL]         } [EOL]     } [EOL]     { [EOL]         String[] results; [EOL]         final String[] expectedResults = { "ab", "  de fg" }; [EOL]         results = StringUtils.splitPreserveAllTokens("ab   de fg", null, 2); [EOL]         assertEquals(expectedResults.length, results.length); [EOL]         for (int i = 0; i < expectedResults.length; i++) { [EOL]             assertEquals(expectedResults[i], results[i]); [EOL]         } [EOL]     } [EOL]     { [EOL]         String[] results; [EOL]         final String[] expectedResults = { "ab", "::de:fg" }; [EOL]         results = StringUtils.splitPreserveAllTokens("ab:::de:fg", ":", 2); [EOL]         assertEquals(expectedResults.length, results.length); [EOL]         for (int i = 0; i < expectedResults.length; i++) { [EOL]             assertEquals(expectedResults[i], results[i]); [EOL]         } [EOL]     } [EOL]     { [EOL]         String[] results; [EOL]         final String[] expectedResults = { "ab", "", " de fg" }; [EOL]         results = StringUtils.splitPreserveAllTokens("ab   de fg", null, 3); [EOL]         assertEquals(expectedResults.length, results.length); [EOL]         for (int i = 0; i < expectedResults.length; i++) { [EOL]             assertEquals(expectedResults[i], results[i]); [EOL]         } [EOL]     } [EOL]     { [EOL]         String[] results; [EOL]         final String[] expectedResults = { "ab", "", "", "de fg" }; [EOL]         results = StringUtils.splitPreserveAllTokens("ab   de fg", null, 4); [EOL]         assertEquals(expectedResults.length, results.length); [EOL]         for (int i = 0; i < expectedResults.length; i++) { [EOL]             assertEquals(expectedResults[i], results[i]); [EOL]         } [EOL]     } [EOL]     { [EOL]         final String[] expectedResults = { "ab", "cd:ef" }; [EOL]         String[] results; [EOL]         results = StringUtils.splitPreserveAllTokens("ab:cd:ef", ":", 2); [EOL]         assertEquals(expectedResults.length, results.length); [EOL]         for (int i = 0; i < expectedResults.length; i++) { [EOL]             assertEquals(expectedResults[i], results[i]); [EOL]         } [EOL]     } [EOL]     { [EOL]         String[] results; [EOL]         final String[] expectedResults = { "ab", ":cd:ef" }; [EOL]         results = StringUtils.splitPreserveAllTokens("ab::cd:ef", ":", 2); [EOL]         assertEquals(expectedResults.length, results.length); [EOL]         for (int i = 0; i < expectedResults.length; i++) { [EOL]             assertEquals(expectedResults[i], results[i]); [EOL]         } [EOL]     } [EOL]     { [EOL]         String[] results; [EOL]         final String[] expectedResults = { "ab", "", ":cd:ef" }; [EOL]         results = StringUtils.splitPreserveAllTokens("ab:::cd:ef", ":", 3); [EOL]         assertEquals(expectedResults.length, results.length); [EOL]         for (int i = 0; i < expectedResults.length; i++) { [EOL]             assertEquals(expectedResults[i], results[i]); [EOL]         } [EOL]     } [EOL]     { [EOL]         String[] results; [EOL]         final String[] expectedResults = { "ab", "", "", "cd:ef" }; [EOL]         results = StringUtils.splitPreserveAllTokens("ab:::cd:ef", ":", 4); [EOL]         assertEquals(expectedResults.length, results.length); [EOL]         for (int i = 0; i < expectedResults.length; i++) { [EOL]             assertEquals(expectedResults[i], results[i]); [EOL]         } [EOL]     } [EOL]     { [EOL]         String[] results; [EOL]         final String[] expectedResults = { "", "ab", "", "", "cd:ef" }; [EOL]         results = StringUtils.splitPreserveAllTokens(":ab:::cd:ef", ":", 5); [EOL]         assertEquals(expectedResults.length, results.length); [EOL]         for (int i = 0; i < expectedResults.length; i++) { [EOL]             assertEquals(expectedResults[i], results[i]); [EOL]         } [EOL]     } [EOL]     { [EOL]         String[] results; [EOL]         final String[] expectedResults = { "", "", "ab", "", "", "cd:ef" }; [EOL]         results = StringUtils.splitPreserveAllTokens("::ab:::cd:ef", ":", 6); [EOL]         assertEquals(expectedResults.length, results.length); [EOL]         for (int i = 0; i < expectedResults.length; i++) { [EOL]             assertEquals(expectedResults[i], results[i]); [EOL]         } [EOL]     } [EOL] }
@Test [EOL] public void testSplit_StringString_StringStringInt() { [EOL]     assertArrayEquals(null, StringUtils.split(null, ".")); [EOL]     assertArrayEquals(null, StringUtils.split(null, ".", 3)); [EOL]     assertEquals(0, StringUtils.split("", ".").length); [EOL]     assertEquals(0, StringUtils.split("", ".", 3).length); [EOL]     innerTestSplit('.', ".", ' '); [EOL]     innerTestSplit('.', ".", ','); [EOL]     innerTestSplit('.', ".,", 'x'); [EOL]     for (int i = 0; i < WHITESPACE.length(); i++) { [EOL]         for (int j = 0; j < NON_WHITESPACE.length(); j++) { [EOL]             innerTestSplit(WHITESPACE.charAt(i), null, NON_WHITESPACE.charAt(j)); [EOL]             innerTestSplit(WHITESPACE.charAt(i), String.valueOf(WHITESPACE.charAt(i)), NON_WHITESPACE.charAt(j)); [EOL]         } [EOL]     } [EOL]     String[] results; [EOL]     final String[] expectedResults = { "ab", "de fg" }; [EOL]     results = StringUtils.split("ab   de fg", null, 2); [EOL]     assertEquals(expectedResults.length, results.length); [EOL]     for (int i = 0; i < expectedResults.length; i++) { [EOL]         assertEquals(expectedResults[i], results[i]); [EOL]     } [EOL]     final String[] expectedResults2 = { "ab", "cd:ef" }; [EOL]     results = StringUtils.split("ab:cd:ef", ":", 2); [EOL]     assertEquals(expectedResults2.length, results.length); [EOL]     for (int i = 0; i < expectedResults2.length; i++) { [EOL]         assertEquals(expectedResults2[i], results[i]); [EOL]     } [EOL] }
@Test [EOL] public void testSplit_StringString_StringStringInt() { [EOL]     assertArrayEquals(null, StringUtils.split(null, ".")); [EOL]     assertArrayEquals(null, StringUtils.split(null, ".", 3)); [EOL]     assertEquals(0, StringUtils.split("", ".").length); [EOL]     assertEquals(0, StringUtils.split("", ".", 3).length); [EOL]     innerTestSplit('.', ".", ' '); [EOL]     innerTestSplit('.', ".", ','); [EOL]     innerTestSplit('.', ".,", 'x'); [EOL]     for (int i = 0; i < WHITESPACE.length(); i++) { [EOL]         for (int j = 0; j < NON_WHITESPACE.length(); j++) { [EOL]             innerTestSplit(WHITESPACE.charAt(i), null, NON_WHITESPACE.charAt(j)); [EOL]             innerTestSplit(WHITESPACE.charAt(i), String.valueOf(WHITESPACE.charAt(i)), NON_WHITESPACE.charAt(j)); [EOL]         } [EOL]     } [EOL]     String[] results; [EOL]     final String[] expectedResults = { "ab", "de fg" }; [EOL]     results = StringUtils.split("ab   de fg", null, 2); [EOL]     assertEquals(expectedResults.length, results.length); [EOL]     for (int i = 0; i < expectedResults.length; i++) { [EOL]         assertEquals(expectedResults[i], results[i]); [EOL]     } [EOL]     final String[] expectedResults2 = { "ab", "cd:ef" }; [EOL]     results = StringUtils.split("ab:cd:ef", ":", 2); [EOL]     assertEquals(expectedResults2.length, results.length); [EOL]     for (int i = 0; i < expectedResults2.length; i++) { [EOL]         assertEquals(expectedResults2[i], results[i]); [EOL]     } [EOL] }
@Test [EOL] public void testSplit_StringString_StringStringInt() { [EOL]     assertArrayEquals(null, StringUtils.split(null, ".")); [EOL]     assertArrayEquals(null, StringUtils.split(null, ".", 3)); [EOL]     assertEquals(0, StringUtils.split("", ".").length); [EOL]     assertEquals(0, StringUtils.split("", ".", 3).length); [EOL]     innerTestSplit('.', ".", ' '); [EOL]     innerTestSplit('.', ".", ','); [EOL]     innerTestSplit('.', ".,", 'x'); [EOL]     for (int i = 0; i < WHITESPACE.length(); i++) { [EOL]         for (int j = 0; j < NON_WHITESPACE.length(); j++) { [EOL]             innerTestSplit(WHITESPACE.charAt(i), null, NON_WHITESPACE.charAt(j)); [EOL]             innerTestSplit(WHITESPACE.charAt(i), String.valueOf(WHITESPACE.charAt(i)), NON_WHITESPACE.charAt(j)); [EOL]         } [EOL]     } [EOL]     String[] results; [EOL]     final String[] expectedResults = { "ab", "de fg" }; [EOL]     results = StringUtils.split("ab   de fg", null, 2); [EOL]     assertEquals(expectedResults.length, results.length); [EOL]     for (int i = 0; i < expectedResults.length; i++) { [EOL]         assertEquals(expectedResults[i], results[i]); [EOL]     } [EOL]     final String[] expectedResults2 = { "ab", "cd:ef" }; [EOL]     results = StringUtils.split("ab:cd:ef", ":", 2); [EOL]     assertEquals(expectedResults2.length, results.length); [EOL]     for (int i = 0; i < expectedResults2.length; i++) { [EOL]         assertEquals(expectedResults2[i], results[i]); [EOL]     } [EOL] }
@Test [EOL] public void testSplit_StringString_StringStringInt() { [EOL]     assertArrayEquals(null, StringUtils.split(null, ".")); [EOL]     assertArrayEquals(null, StringUtils.split(null, ".", 3)); [EOL]     assertEquals(0, StringUtils.split("", ".").length); [EOL]     assertEquals(0, StringUtils.split("", ".", 3).length); [EOL]     innerTestSplit('.', ".", ' '); [EOL]     innerTestSplit('.', ".", ','); [EOL]     innerTestSplit('.', ".,", 'x'); [EOL]     for (int i = 0; i < WHITESPACE.length(); i++) { [EOL]         for (int j = 0; j < NON_WHITESPACE.length(); j++) { [EOL]             innerTestSplit(WHITESPACE.charAt(i), null, NON_WHITESPACE.charAt(j)); [EOL]             innerTestSplit(WHITESPACE.charAt(i), String.valueOf(WHITESPACE.charAt(i)), NON_WHITESPACE.charAt(j)); [EOL]         } [EOL]     } [EOL]     String[] results; [EOL]     final String[] expectedResults = { "ab", "de fg" }; [EOL]     results = StringUtils.split("ab   de fg", null, 2); [EOL]     assertEquals(expectedResults.length, results.length); [EOL]     for (int i = 0; i < expectedResults.length; i++) { [EOL]         assertEquals(expectedResults[i], results[i]); [EOL]     } [EOL]     final String[] expectedResults2 = { "ab", "cd:ef" }; [EOL]     results = StringUtils.split("ab:cd:ef", ":", 2); [EOL]     assertEquals(expectedResults2.length, results.length); [EOL]     for (int i = 0; i < expectedResults2.length; i++) { [EOL]         assertEquals(expectedResults2[i], results[i]); [EOL]     } [EOL] }
@Test [EOL] public void testSplit_StringString_StringStringInt() { [EOL]     assertArrayEquals(null, StringUtils.split(null, ".")); [EOL]     assertArrayEquals(null, StringUtils.split(null, ".", 3)); [EOL]     assertEquals(0, StringUtils.split("", ".").length); [EOL]     assertEquals(0, StringUtils.split("", ".", 3).length); [EOL]     innerTestSplit('.', ".", ' '); [EOL]     innerTestSplit('.', ".", ','); [EOL]     innerTestSplit('.', ".,", 'x'); [EOL]     for (int i = 0; i < WHITESPACE.length(); i++) { [EOL]         for (int j = 0; j < NON_WHITESPACE.length(); j++) { [EOL]             innerTestSplit(WHITESPACE.charAt(i), null, NON_WHITESPACE.charAt(j)); [EOL]             innerTestSplit(WHITESPACE.charAt(i), String.valueOf(WHITESPACE.charAt(i)), NON_WHITESPACE.charAt(j)); [EOL]         } [EOL]     } [EOL]     String[] results; [EOL]     final String[] expectedResults = { "ab", "de fg" }; [EOL]     results = StringUtils.split("ab   de fg", null, 2); [EOL]     assertEquals(expectedResults.length, results.length); [EOL]     for (int i = 0; i < expectedResults.length; i++) { [EOL]         assertEquals(expectedResults[i], results[i]); [EOL]     } [EOL]     final String[] expectedResults2 = { "ab", "cd:ef" }; [EOL]     results = StringUtils.split("ab:cd:ef", ":", 2); [EOL]     assertEquals(expectedResults2.length, results.length); [EOL]     for (int i = 0; i < expectedResults2.length; i++) { [EOL]         assertEquals(expectedResults2[i], results[i]); [EOL]     } [EOL] }
@Test [EOL] public void testSplit_StringString_StringStringInt() { [EOL]     assertArrayEquals(null, StringUtils.split(null, ".")); [EOL]     assertArrayEquals(null, StringUtils.split(null, ".", 3)); [EOL]     assertEquals(0, StringUtils.split("", ".").length); [EOL]     assertEquals(0, StringUtils.split("", ".", 3).length); [EOL]     innerTestSplit('.', ".", ' '); [EOL]     innerTestSplit('.', ".", ','); [EOL]     innerTestSplit('.', ".,", 'x'); [EOL]     for (int i = 0; i < WHITESPACE.length(); i++) { [EOL]         for (int j = 0; j < NON_WHITESPACE.length(); j++) { [EOL]             innerTestSplit(WHITESPACE.charAt(i), null, NON_WHITESPACE.charAt(j)); [EOL]             innerTestSplit(WHITESPACE.charAt(i), String.valueOf(WHITESPACE.charAt(i)), NON_WHITESPACE.charAt(j)); [EOL]         } [EOL]     } [EOL]     String[] results; [EOL]     final String[] expectedResults = { "ab", "de fg" }; [EOL]     results = StringUtils.split("ab   de fg", null, 2); [EOL]     assertEquals(expectedResults.length, results.length); [EOL]     for (int i = 0; i < expectedResults.length; i++) { [EOL]         assertEquals(expectedResults[i], results[i]); [EOL]     } [EOL]     final String[] expectedResults2 = { "ab", "cd:ef" }; [EOL]     results = StringUtils.split("ab:cd:ef", ":", 2); [EOL]     assertEquals(expectedResults2.length, results.length); [EOL]     for (int i = 0; i < expectedResults2.length; i++) { [EOL]         assertEquals(expectedResults2[i], results[i]); [EOL]     } [EOL] }
@Test [EOL] public void testSplit_StringString_StringStringInt() { [EOL]     assertArrayEquals(null, StringUtils.split(null, ".")); [EOL]     assertArrayEquals(null, StringUtils.split(null, ".", 3)); [EOL]     assertEquals(0, StringUtils.split("", ".").length); [EOL]     assertEquals(0, StringUtils.split("", ".", 3).length); [EOL]     innerTestSplit('.', ".", ' '); [EOL]     innerTestSplit('.', ".", ','); [EOL]     innerTestSplit('.', ".,", 'x'); [EOL]     for (int i = 0; i < WHITESPACE.length(); i++) { [EOL]         for (int j = 0; j < NON_WHITESPACE.length(); j++) { [EOL]             innerTestSplit(WHITESPACE.charAt(i), null, NON_WHITESPACE.charAt(j)); [EOL]             innerTestSplit(WHITESPACE.charAt(i), String.valueOf(WHITESPACE.charAt(i)), NON_WHITESPACE.charAt(j)); [EOL]         } [EOL]     } [EOL]     String[] results; [EOL]     final String[] expectedResults = { "ab", "de fg" }; [EOL]     results = StringUtils.split("ab   de fg", null, 2); [EOL]     assertEquals(expectedResults.length, results.length); [EOL]     for (int i = 0; i < expectedResults.length; i++) { [EOL]         assertEquals(expectedResults[i], results[i]); [EOL]     } [EOL]     final String[] expectedResults2 = { "ab", "cd:ef" }; [EOL]     results = StringUtils.split("ab:cd:ef", ":", 2); [EOL]     assertEquals(expectedResults2.length, results.length); [EOL]     for (int i = 0; i < expectedResults2.length; i++) { [EOL]         assertEquals(expectedResults2[i], results[i]); [EOL]     } [EOL] }
@Test [EOL] public void testSplit_StringString_StringStringInt() { [EOL]     assertArrayEquals(null, StringUtils.split(null, ".")); [EOL]     assertArrayEquals(null, StringUtils.split(null, ".", 3)); [EOL]     assertEquals(0, StringUtils.split("", ".").length); [EOL]     assertEquals(0, StringUtils.split("", ".", 3).length); [EOL]     innerTestSplit('.', ".", ' '); [EOL]     innerTestSplit('.', ".", ','); [EOL]     innerTestSplit('.', ".,", 'x'); [EOL]     for (int i = 0; i < WHITESPACE.length(); i++) { [EOL]         for (int j = 0; j < NON_WHITESPACE.length(); j++) { [EOL]             innerTestSplit(WHITESPACE.charAt(i), null, NON_WHITESPACE.charAt(j)); [EOL]             innerTestSplit(WHITESPACE.charAt(i), String.valueOf(WHITESPACE.charAt(i)), NON_WHITESPACE.charAt(j)); [EOL]         } [EOL]     } [EOL]     String[] results; [EOL]     final String[] expectedResults = { "ab", "de fg" }; [EOL]     results = StringUtils.split("ab   de fg", null, 2); [EOL]     assertEquals(expectedResults.length, results.length); [EOL]     for (int i = 0; i < expectedResults.length; i++) { [EOL]         assertEquals(expectedResults[i], results[i]); [EOL]     } [EOL]     final String[] expectedResults2 = { "ab", "cd:ef" }; [EOL]     results = StringUtils.split("ab:cd:ef", ":", 2); [EOL]     assertEquals(expectedResults2.length, results.length); [EOL]     for (int i = 0; i < expectedResults2.length; i++) { [EOL]         assertEquals(expectedResults2[i], results[i]); [EOL]     } [EOL] }
@Test [EOL] public void testSplit_StringString_StringStringInt() { [EOL]     assertArrayEquals(null, StringUtils.split(null, ".")); [EOL]     assertArrayEquals(null, StringUtils.split(null, ".", 3)); [EOL]     assertEquals(0, StringUtils.split("", ".").length); [EOL]     assertEquals(0, StringUtils.split("", ".", 3).length); [EOL]     innerTestSplit('.', ".", ' '); [EOL]     innerTestSplit('.', ".", ','); [EOL]     innerTestSplit('.', ".,", 'x'); [EOL]     for (int i = 0; i < WHITESPACE.length(); i++) { [EOL]         for (int j = 0; j < NON_WHITESPACE.length(); j++) { [EOL]             innerTestSplit(WHITESPACE.charAt(i), null, NON_WHITESPACE.charAt(j)); [EOL]             innerTestSplit(WHITESPACE.charAt(i), String.valueOf(WHITESPACE.charAt(i)), NON_WHITESPACE.charAt(j)); [EOL]         } [EOL]     } [EOL]     String[] results; [EOL]     final String[] expectedResults = { "ab", "de fg" }; [EOL]     results = StringUtils.split("ab   de fg", null, 2); [EOL]     assertEquals(expectedResults.length, results.length); [EOL]     for (int i = 0; i < expectedResults.length; i++) { [EOL]         assertEquals(expectedResults[i], results[i]); [EOL]     } [EOL]     final String[] expectedResults2 = { "ab", "cd:ef" }; [EOL]     results = StringUtils.split("ab:cd:ef", ":", 2); [EOL]     assertEquals(expectedResults2.length, results.length); [EOL]     for (int i = 0; i < expectedResults2.length; i++) { [EOL]         assertEquals(expectedResults2[i], results[i]); [EOL]     } [EOL] }
@Test [EOL] public void testSplit_StringString_StringStringInt() { [EOL]     assertArrayEquals(null, StringUtils.split(null, ".")); [EOL]     assertArrayEquals(null, StringUtils.split(null, ".", 3)); [EOL]     assertEquals(0, StringUtils.split("", ".").length); [EOL]     assertEquals(0, StringUtils.split("", ".", 3).length); [EOL]     innerTestSplit('.', ".", ' '); [EOL]     innerTestSplit('.', ".", ','); [EOL]     innerTestSplit('.', ".,", 'x'); [EOL]     for (int i = 0; i < WHITESPACE.length(); i++) { [EOL]         for (int j = 0; j < NON_WHITESPACE.length(); j++) { [EOL]             innerTestSplit(WHITESPACE.charAt(i), null, NON_WHITESPACE.charAt(j)); [EOL]             innerTestSplit(WHITESPACE.charAt(i), String.valueOf(WHITESPACE.charAt(i)), NON_WHITESPACE.charAt(j)); [EOL]         } [EOL]     } [EOL]     String[] results; [EOL]     final String[] expectedResults = { "ab", "de fg" }; [EOL]     results = StringUtils.split("ab   de fg", null, 2); [EOL]     assertEquals(expectedResults.length, results.length); [EOL]     for (int i = 0; i < expectedResults.length; i++) { [EOL]         assertEquals(expectedResults[i], results[i]); [EOL]     } [EOL]     final String[] expectedResults2 = { "ab", "cd:ef" }; [EOL]     results = StringUtils.split("ab:cd:ef", ":", 2); [EOL]     assertEquals(expectedResults2.length, results.length); [EOL]     for (int i = 0; i < expectedResults2.length; i++) { [EOL]         assertEquals(expectedResults2[i], results[i]); [EOL]     } [EOL] }
@Test [EOL] public void testSplit_StringString_StringStringInt() { [EOL]     assertArrayEquals(null, StringUtils.split(null, ".")); [EOL]     assertArrayEquals(null, StringUtils.split(null, ".", 3)); [EOL]     assertEquals(0, StringUtils.split("", ".").length); [EOL]     assertEquals(0, StringUtils.split("", ".", 3).length); [EOL]     innerTestSplit('.', ".", ' '); [EOL]     innerTestSplit('.', ".", ','); [EOL]     innerTestSplit('.', ".,", 'x'); [EOL]     for (int i = 0; i < WHITESPACE.length(); i++) { [EOL]         for (int j = 0; j < NON_WHITESPACE.length(); j++) { [EOL]             innerTestSplit(WHITESPACE.charAt(i), null, NON_WHITESPACE.charAt(j)); [EOL]             innerTestSplit(WHITESPACE.charAt(i), String.valueOf(WHITESPACE.charAt(i)), NON_WHITESPACE.charAt(j)); [EOL]         } [EOL]     } [EOL]     String[] results; [EOL]     final String[] expectedResults = { "ab", "de fg" }; [EOL]     results = StringUtils.split("ab   de fg", null, 2); [EOL]     assertEquals(expectedResults.length, results.length); [EOL]     for (int i = 0; i < expectedResults.length; i++) { [EOL]         assertEquals(expectedResults[i], results[i]); [EOL]     } [EOL]     final String[] expectedResults2 = { "ab", "cd:ef" }; [EOL]     results = StringUtils.split("ab:cd:ef", ":", 2); [EOL]     assertEquals(expectedResults2.length, results.length); [EOL]     for (int i = 0; i < expectedResults2.length; i++) { [EOL]         assertEquals(expectedResults2[i], results[i]); [EOL]     } [EOL] }
@Test [EOL] public void testJoin_ArrayOfBytes() { [EOL]     assertEquals(null, StringUtils.join((byte[]) null, ',')); [EOL]     assertEquals("1;2", StringUtils.join(BYTE_PRIM_LIST, SEPARATOR_CHAR)); [EOL]     assertEquals("2", StringUtils.join(BYTE_PRIM_LIST, SEPARATOR_CHAR, 1, 2)); [EOL] }
@Test [EOL] public void testJoin_ArrayOfBytes() { [EOL]     assertEquals(null, StringUtils.join((byte[]) null, ',')); [EOL]     assertEquals("1;2", StringUtils.join(BYTE_PRIM_LIST, SEPARATOR_CHAR)); [EOL]     assertEquals("2", StringUtils.join(BYTE_PRIM_LIST, SEPARATOR_CHAR, 1, 2)); [EOL] }
@Test [EOL] public void testJoin_ArrayOfBytes() { [EOL]     assertEquals(null, StringUtils.join((byte[]) null, ',')); [EOL]     assertEquals("1;2", StringUtils.join(BYTE_PRIM_LIST, SEPARATOR_CHAR)); [EOL]     assertEquals("2", StringUtils.join(BYTE_PRIM_LIST, SEPARATOR_CHAR, 1, 2)); [EOL] }
@Test [EOL] public void testJoin_ArrayOfBytes() { [EOL]     assertEquals(null, StringUtils.join((byte[]) null, ',')); [EOL]     assertEquals("1;2", StringUtils.join(BYTE_PRIM_LIST, SEPARATOR_CHAR)); [EOL]     assertEquals("2", StringUtils.join(BYTE_PRIM_LIST, SEPARATOR_CHAR, 1, 2)); [EOL] }
@Test [EOL] public void testJoin_ArrayOfChars() { [EOL]     assertEquals(null, StringUtils.join((char[]) null, ',')); [EOL]     assertEquals("1;2", StringUtils.join(CHAR_PRIM_LIST, SEPARATOR_CHAR)); [EOL]     assertEquals("2", StringUtils.join(CHAR_PRIM_LIST, SEPARATOR_CHAR, 1, 2)); [EOL] }
@Test [EOL] public void testJoin_ArrayOfChars() { [EOL]     assertEquals(null, StringUtils.join((char[]) null, ',')); [EOL]     assertEquals("1;2", StringUtils.join(CHAR_PRIM_LIST, SEPARATOR_CHAR)); [EOL]     assertEquals("2", StringUtils.join(CHAR_PRIM_LIST, SEPARATOR_CHAR, 1, 2)); [EOL] }
@Test [EOL] public void testJoin_ArrayOfChars() { [EOL]     assertEquals(null, StringUtils.join((char[]) null, ',')); [EOL]     assertEquals("1;2", StringUtils.join(CHAR_PRIM_LIST, SEPARATOR_CHAR)); [EOL]     assertEquals("2", StringUtils.join(CHAR_PRIM_LIST, SEPARATOR_CHAR, 1, 2)); [EOL] }
@Test [EOL] public void testJoin_ArrayOfChars() { [EOL]     assertEquals(null, StringUtils.join((char[]) null, ',')); [EOL]     assertEquals("1;2", StringUtils.join(CHAR_PRIM_LIST, SEPARATOR_CHAR)); [EOL]     assertEquals("2", StringUtils.join(CHAR_PRIM_LIST, SEPARATOR_CHAR, 1, 2)); [EOL] }
@Test [EOL] public void testJoin_ArrayOfBytes() { [EOL]     assertEquals(null, StringUtils.join((byte[]) null, ',')); [EOL]     assertEquals("1;2", StringUtils.join(BYTE_PRIM_LIST, SEPARATOR_CHAR)); [EOL]     assertEquals("2", StringUtils.join(BYTE_PRIM_LIST, SEPARATOR_CHAR, 1, 2)); [EOL] }
@Test [EOL] public void testJoin_ArrayOfChars() { [EOL]     assertEquals(null, StringUtils.join((char[]) null, ',')); [EOL]     assertEquals("1;2", StringUtils.join(CHAR_PRIM_LIST, SEPARATOR_CHAR)); [EOL]     assertEquals("2", StringUtils.join(CHAR_PRIM_LIST, SEPARATOR_CHAR, 1, 2)); [EOL] }
@Test [EOL] public void testJoin_IterableString() { [EOL]     assertEquals(null, StringUtils.join((Iterable<?>) null, null)); [EOL]     assertEquals(TEXT_LIST_NOSEP, StringUtils.join(Arrays.asList(ARRAY_LIST), null)); [EOL]     assertEquals(TEXT_LIST_NOSEP, StringUtils.join(Arrays.asList(ARRAY_LIST), "")); [EOL]     assertEquals("foo", StringUtils.join(Collections.singleton("foo"), "x")); [EOL]     assertEquals("foo", StringUtils.join(Collections.singleton("foo"), null)); [EOL]     assertEquals("", StringUtils.join(Arrays.asList(NULL_ARRAY_LIST), null)); [EOL]     assertEquals("", StringUtils.join(Arrays.asList(EMPTY_ARRAY_LIST), null)); [EOL]     assertEquals("", StringUtils.join(Arrays.asList(EMPTY_ARRAY_LIST), "")); [EOL]     assertEquals("", StringUtils.join(Arrays.asList(EMPTY_ARRAY_LIST), SEPARATOR)); [EOL]     assertEquals(TEXT_LIST, StringUtils.join(Arrays.asList(ARRAY_LIST), SEPARATOR)); [EOL] }
@Test [EOL] public void testJoin_IterableString() { [EOL]     assertEquals(null, StringUtils.join((Iterable<?>) null, null)); [EOL]     assertEquals(TEXT_LIST_NOSEP, StringUtils.join(Arrays.asList(ARRAY_LIST), null)); [EOL]     assertEquals(TEXT_LIST_NOSEP, StringUtils.join(Arrays.asList(ARRAY_LIST), "")); [EOL]     assertEquals("foo", StringUtils.join(Collections.singleton("foo"), "x")); [EOL]     assertEquals("foo", StringUtils.join(Collections.singleton("foo"), null)); [EOL]     assertEquals("", StringUtils.join(Arrays.asList(NULL_ARRAY_LIST), null)); [EOL]     assertEquals("", StringUtils.join(Arrays.asList(EMPTY_ARRAY_LIST), null)); [EOL]     assertEquals("", StringUtils.join(Arrays.asList(EMPTY_ARRAY_LIST), "")); [EOL]     assertEquals("", StringUtils.join(Arrays.asList(EMPTY_ARRAY_LIST), SEPARATOR)); [EOL]     assertEquals(TEXT_LIST, StringUtils.join(Arrays.asList(ARRAY_LIST), SEPARATOR)); [EOL] }
@Test [EOL] public void testRemove_String() { [EOL]     assertEquals(null, StringUtils.remove(null, null)); [EOL]     assertEquals(null, StringUtils.remove(null, "")); [EOL]     assertEquals(null, StringUtils.remove(null, "a")); [EOL]     assertEquals("", StringUtils.remove("", null)); [EOL]     assertEquals("", StringUtils.remove("", "")); [EOL]     assertEquals("", StringUtils.remove("", "a")); [EOL]     assertEquals(null, StringUtils.remove(null, null)); [EOL]     assertEquals("", StringUtils.remove("", null)); [EOL]     assertEquals("a", StringUtils.remove("a", null)); [EOL]     assertEquals(null, StringUtils.remove(null, "")); [EOL]     assertEquals("", StringUtils.remove("", "")); [EOL]     assertEquals("a", StringUtils.remove("a", "")); [EOL]     assertEquals("qd", StringUtils.remove("queued", "ue")); [EOL]     assertEquals("queued", StringUtils.remove("queued", "zz")); [EOL] }
@Test [EOL] public void testRemove_String() { [EOL]     assertEquals(null, StringUtils.remove(null, null)); [EOL]     assertEquals(null, StringUtils.remove(null, "")); [EOL]     assertEquals(null, StringUtils.remove(null, "a")); [EOL]     assertEquals("", StringUtils.remove("", null)); [EOL]     assertEquals("", StringUtils.remove("", "")); [EOL]     assertEquals("", StringUtils.remove("", "a")); [EOL]     assertEquals(null, StringUtils.remove(null, null)); [EOL]     assertEquals("", StringUtils.remove("", null)); [EOL]     assertEquals("a", StringUtils.remove("a", null)); [EOL]     assertEquals(null, StringUtils.remove(null, "")); [EOL]     assertEquals("", StringUtils.remove("", "")); [EOL]     assertEquals("a", StringUtils.remove("a", "")); [EOL]     assertEquals("qd", StringUtils.remove("queued", "ue")); [EOL]     assertEquals("queued", StringUtils.remove("queued", "zz")); [EOL] }
@Test [EOL] public void testReplace_StringStringString() { [EOL]     assertEquals(null, StringUtils.replace(null, null, null)); [EOL]     assertEquals(null, StringUtils.replace(null, null, "any")); [EOL]     assertEquals(null, StringUtils.replace(null, "any", null)); [EOL]     assertEquals(null, StringUtils.replace(null, "any", "any")); [EOL]     assertEquals("", StringUtils.replace("", null, null)); [EOL]     assertEquals("", StringUtils.replace("", null, "any")); [EOL]     assertEquals("", StringUtils.replace("", "any", null)); [EOL]     assertEquals("", StringUtils.replace("", "any", "any")); [EOL]     assertEquals("FOO", StringUtils.replace("FOO", "", "any")); [EOL]     assertEquals("FOO", StringUtils.replace("FOO", null, "any")); [EOL]     assertEquals("FOO", StringUtils.replace("FOO", "F", null)); [EOL]     assertEquals("FOO", StringUtils.replace("FOO", null, null)); [EOL]     assertEquals("", StringUtils.replace("foofoofoo", "foo", "")); [EOL]     assertEquals("barbarbar", StringUtils.replace("foofoofoo", "foo", "bar")); [EOL]     assertEquals("farfarfar", StringUtils.replace("foofoofoo", "oo", "ar")); [EOL] }
@Test [EOL] public void testReplace_StringStringString() { [EOL]     assertEquals(null, StringUtils.replace(null, null, null)); [EOL]     assertEquals(null, StringUtils.replace(null, null, "any")); [EOL]     assertEquals(null, StringUtils.replace(null, "any", null)); [EOL]     assertEquals(null, StringUtils.replace(null, "any", "any")); [EOL]     assertEquals("", StringUtils.replace("", null, null)); [EOL]     assertEquals("", StringUtils.replace("", null, "any")); [EOL]     assertEquals("", StringUtils.replace("", "any", null)); [EOL]     assertEquals("", StringUtils.replace("", "any", "any")); [EOL]     assertEquals("FOO", StringUtils.replace("FOO", "", "any")); [EOL]     assertEquals("FOO", StringUtils.replace("FOO", null, "any")); [EOL]     assertEquals("FOO", StringUtils.replace("FOO", "F", null)); [EOL]     assertEquals("FOO", StringUtils.replace("FOO", null, null)); [EOL]     assertEquals("", StringUtils.replace("foofoofoo", "foo", "")); [EOL]     assertEquals("barbarbar", StringUtils.replace("foofoofoo", "foo", "bar")); [EOL]     assertEquals("farfarfar", StringUtils.replace("foofoofoo", "oo", "ar")); [EOL] }
@Test [EOL] public void testReplace_StringStringString() { [EOL]     assertEquals(null, StringUtils.replace(null, null, null)); [EOL]     assertEquals(null, StringUtils.replace(null, null, "any")); [EOL]     assertEquals(null, StringUtils.replace(null, "any", null)); [EOL]     assertEquals(null, StringUtils.replace(null, "any", "any")); [EOL]     assertEquals("", StringUtils.replace("", null, null)); [EOL]     assertEquals("", StringUtils.replace("", null, "any")); [EOL]     assertEquals("", StringUtils.replace("", "any", null)); [EOL]     assertEquals("", StringUtils.replace("", "any", "any")); [EOL]     assertEquals("FOO", StringUtils.replace("FOO", "", "any")); [EOL]     assertEquals("FOO", StringUtils.replace("FOO", null, "any")); [EOL]     assertEquals("FOO", StringUtils.replace("FOO", "F", null)); [EOL]     assertEquals("FOO", StringUtils.replace("FOO", null, null)); [EOL]     assertEquals("", StringUtils.replace("foofoofoo", "foo", "")); [EOL]     assertEquals("barbarbar", StringUtils.replace("foofoofoo", "foo", "bar")); [EOL]     assertEquals("farfarfar", StringUtils.replace("foofoofoo", "oo", "ar")); [EOL] }
@Test [EOL] public void testReplace_StringStringString() { [EOL]     assertEquals(null, StringUtils.replace(null, null, null)); [EOL]     assertEquals(null, StringUtils.replace(null, null, "any")); [EOL]     assertEquals(null, StringUtils.replace(null, "any", null)); [EOL]     assertEquals(null, StringUtils.replace(null, "any", "any")); [EOL]     assertEquals("", StringUtils.replace("", null, null)); [EOL]     assertEquals("", StringUtils.replace("", null, "any")); [EOL]     assertEquals("", StringUtils.replace("", "any", null)); [EOL]     assertEquals("", StringUtils.replace("", "any", "any")); [EOL]     assertEquals("FOO", StringUtils.replace("FOO", "", "any")); [EOL]     assertEquals("FOO", StringUtils.replace("FOO", null, "any")); [EOL]     assertEquals("FOO", StringUtils.replace("FOO", "F", null)); [EOL]     assertEquals("FOO", StringUtils.replace("FOO", null, null)); [EOL]     assertEquals("", StringUtils.replace("foofoofoo", "foo", "")); [EOL]     assertEquals("barbarbar", StringUtils.replace("foofoofoo", "foo", "bar")); [EOL]     assertEquals("farfarfar", StringUtils.replace("foofoofoo", "oo", "ar")); [EOL] }
@Test [EOL] public void testReplace_StringStringString() { [EOL]     assertEquals(null, StringUtils.replace(null, null, null)); [EOL]     assertEquals(null, StringUtils.replace(null, null, "any")); [EOL]     assertEquals(null, StringUtils.replace(null, "any", null)); [EOL]     assertEquals(null, StringUtils.replace(null, "any", "any")); [EOL]     assertEquals("", StringUtils.replace("", null, null)); [EOL]     assertEquals("", StringUtils.replace("", null, "any")); [EOL]     assertEquals("", StringUtils.replace("", "any", null)); [EOL]     assertEquals("", StringUtils.replace("", "any", "any")); [EOL]     assertEquals("FOO", StringUtils.replace("FOO", "", "any")); [EOL]     assertEquals("FOO", StringUtils.replace("FOO", null, "any")); [EOL]     assertEquals("FOO", StringUtils.replace("FOO", "F", null)); [EOL]     assertEquals("FOO", StringUtils.replace("FOO", null, null)); [EOL]     assertEquals("", StringUtils.replace("foofoofoo", "foo", "")); [EOL]     assertEquals("barbarbar", StringUtils.replace("foofoofoo", "foo", "bar")); [EOL]     assertEquals("farfarfar", StringUtils.replace("foofoofoo", "oo", "ar")); [EOL] }
@Test [EOL] public void testReplace_StringStringString() { [EOL]     assertEquals(null, StringUtils.replace(null, null, null)); [EOL]     assertEquals(null, StringUtils.replace(null, null, "any")); [EOL]     assertEquals(null, StringUtils.replace(null, "any", null)); [EOL]     assertEquals(null, StringUtils.replace(null, "any", "any")); [EOL]     assertEquals("", StringUtils.replace("", null, null)); [EOL]     assertEquals("", StringUtils.replace("", null, "any")); [EOL]     assertEquals("", StringUtils.replace("", "any", null)); [EOL]     assertEquals("", StringUtils.replace("", "any", "any")); [EOL]     assertEquals("FOO", StringUtils.replace("FOO", "", "any")); [EOL]     assertEquals("FOO", StringUtils.replace("FOO", null, "any")); [EOL]     assertEquals("FOO", StringUtils.replace("FOO", "F", null)); [EOL]     assertEquals("FOO", StringUtils.replace("FOO", null, null)); [EOL]     assertEquals("", StringUtils.replace("foofoofoo", "foo", "")); [EOL]     assertEquals("barbarbar", StringUtils.replace("foofoofoo", "foo", "bar")); [EOL]     assertEquals("farfarfar", StringUtils.replace("foofoofoo", "oo", "ar")); [EOL] }
@Test [EOL] public void testReplace_StringStringString() { [EOL]     assertEquals(null, StringUtils.replace(null, null, null)); [EOL]     assertEquals(null, StringUtils.replace(null, null, "any")); [EOL]     assertEquals(null, StringUtils.replace(null, "any", null)); [EOL]     assertEquals(null, StringUtils.replace(null, "any", "any")); [EOL]     assertEquals("", StringUtils.replace("", null, null)); [EOL]     assertEquals("", StringUtils.replace("", null, "any")); [EOL]     assertEquals("", StringUtils.replace("", "any", null)); [EOL]     assertEquals("", StringUtils.replace("", "any", "any")); [EOL]     assertEquals("FOO", StringUtils.replace("FOO", "", "any")); [EOL]     assertEquals("FOO", StringUtils.replace("FOO", null, "any")); [EOL]     assertEquals("FOO", StringUtils.replace("FOO", "F", null)); [EOL]     assertEquals("FOO", StringUtils.replace("FOO", null, null)); [EOL]     assertEquals("", StringUtils.replace("foofoofoo", "foo", "")); [EOL]     assertEquals("barbarbar", StringUtils.replace("foofoofoo", "foo", "bar")); [EOL]     assertEquals("farfarfar", StringUtils.replace("foofoofoo", "oo", "ar")); [EOL] }
@Test [EOL] public void testReplace_StringStringArrayStringArray() { [EOL]     assertNull(StringUtils.replaceEach(null, new String[] { "a" }, new String[] { "b" })); [EOL]     assertEquals(StringUtils.replaceEach("", new String[] { "a" }, new String[] { "b" }), ""); [EOL]     assertEquals(StringUtils.replaceEach("aba", null, null), "aba"); [EOL]     assertEquals(StringUtils.replaceEach("aba", new String[0], null), "aba"); [EOL]     assertEquals(StringUtils.replaceEach("aba", null, new String[0]), "aba"); [EOL]     assertEquals(StringUtils.replaceEach("aba", new String[] { "a" }, null), "aba"); [EOL]     assertEquals(StringUtils.replaceEach("aba", new String[] { "a" }, new String[] { "" }), "b"); [EOL]     assertEquals(StringUtils.replaceEach("aba", new String[] { null }, new String[] { "a" }), "aba"); [EOL]     assertEquals(StringUtils.replaceEach("abcde", new String[] { "ab", "d" }, new String[] { "w", "t" }), "wcte"); [EOL]     assertEquals(StringUtils.replaceEach("abcde", new String[] { "ab", "d" }, new String[] { "d", "t" }), "dcte"); [EOL]     assertEquals("bcc", StringUtils.replaceEach("abc", new String[] { "a", "b" }, new String[] { "b", "c" })); [EOL]     assertEquals("q651.506bera", StringUtils.replaceEach("d216.102oren", new String[] { "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "1", "2", "3", "4", "5", "6", "7", "8", "9" }, new String[] { "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "5", "6", "7", "8", "9", "1", "2", "3", "4" })); [EOL]     assertEquals(StringUtils.replaceEach("aba", new String[] { "a" }, new String[] { null }), "aba"); [EOL]     assertEquals(StringUtils.replaceEach("aba", new String[] { "a", "b" }, new String[] { "c", null }), "cbc"); [EOL] }
@Test [EOL] public void testReplace_StringStringArrayStringArray() { [EOL]     assertNull(StringUtils.replaceEach(null, new String[] { "a" }, new String[] { "b" })); [EOL]     assertEquals(StringUtils.replaceEach("", new String[] { "a" }, new String[] { "b" }), ""); [EOL]     assertEquals(StringUtils.replaceEach("aba", null, null), "aba"); [EOL]     assertEquals(StringUtils.replaceEach("aba", new String[0], null), "aba"); [EOL]     assertEquals(StringUtils.replaceEach("aba", null, new String[0]), "aba"); [EOL]     assertEquals(StringUtils.replaceEach("aba", new String[] { "a" }, null), "aba"); [EOL]     assertEquals(StringUtils.replaceEach("aba", new String[] { "a" }, new String[] { "" }), "b"); [EOL]     assertEquals(StringUtils.replaceEach("aba", new String[] { null }, new String[] { "a" }), "aba"); [EOL]     assertEquals(StringUtils.replaceEach("abcde", new String[] { "ab", "d" }, new String[] { "w", "t" }), "wcte"); [EOL]     assertEquals(StringUtils.replaceEach("abcde", new String[] { "ab", "d" }, new String[] { "d", "t" }), "dcte"); [EOL]     assertEquals("bcc", StringUtils.replaceEach("abc", new String[] { "a", "b" }, new String[] { "b", "c" })); [EOL]     assertEquals("q651.506bera", StringUtils.replaceEach("d216.102oren", new String[] { "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "1", "2", "3", "4", "5", "6", "7", "8", "9" }, new String[] { "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "5", "6", "7", "8", "9", "1", "2", "3", "4" })); [EOL]     assertEquals(StringUtils.replaceEach("aba", new String[] { "a" }, new String[] { null }), "aba"); [EOL]     assertEquals(StringUtils.replaceEach("aba", new String[] { "a", "b" }, new String[] { "c", null }), "cbc"); [EOL] }
@Test [EOL] public void testReplace_StringStringArrayStringArray() { [EOL]     assertNull(StringUtils.replaceEach(null, new String[] { "a" }, new String[] { "b" })); [EOL]     assertEquals(StringUtils.replaceEach("", new String[] { "a" }, new String[] { "b" }), ""); [EOL]     assertEquals(StringUtils.replaceEach("aba", null, null), "aba"); [EOL]     assertEquals(StringUtils.replaceEach("aba", new String[0], null), "aba"); [EOL]     assertEquals(StringUtils.replaceEach("aba", null, new String[0]), "aba"); [EOL]     assertEquals(StringUtils.replaceEach("aba", new String[] { "a" }, null), "aba"); [EOL]     assertEquals(StringUtils.replaceEach("aba", new String[] { "a" }, new String[] { "" }), "b"); [EOL]     assertEquals(StringUtils.replaceEach("aba", new String[] { null }, new String[] { "a" }), "aba"); [EOL]     assertEquals(StringUtils.replaceEach("abcde", new String[] { "ab", "d" }, new String[] { "w", "t" }), "wcte"); [EOL]     assertEquals(StringUtils.replaceEach("abcde", new String[] { "ab", "d" }, new String[] { "d", "t" }), "dcte"); [EOL]     assertEquals("bcc", StringUtils.replaceEach("abc", new String[] { "a", "b" }, new String[] { "b", "c" })); [EOL]     assertEquals("q651.506bera", StringUtils.replaceEach("d216.102oren", new String[] { "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "1", "2", "3", "4", "5", "6", "7", "8", "9" }, new String[] { "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "5", "6", "7", "8", "9", "1", "2", "3", "4" })); [EOL]     assertEquals(StringUtils.replaceEach("aba", new String[] { "a" }, new String[] { null }), "aba"); [EOL]     assertEquals(StringUtils.replaceEach("aba", new String[] { "a", "b" }, new String[] { "c", null }), "cbc"); [EOL] }
@Test [EOL] public void testReplace_StringStringArrayStringArray() { [EOL]     assertNull(StringUtils.replaceEach(null, new String[] { "a" }, new String[] { "b" })); [EOL]     assertEquals(StringUtils.replaceEach("", new String[] { "a" }, new String[] { "b" }), ""); [EOL]     assertEquals(StringUtils.replaceEach("aba", null, null), "aba"); [EOL]     assertEquals(StringUtils.replaceEach("aba", new String[0], null), "aba"); [EOL]     assertEquals(StringUtils.replaceEach("aba", null, new String[0]), "aba"); [EOL]     assertEquals(StringUtils.replaceEach("aba", new String[] { "a" }, null), "aba"); [EOL]     assertEquals(StringUtils.replaceEach("aba", new String[] { "a" }, new String[] { "" }), "b"); [EOL]     assertEquals(StringUtils.replaceEach("aba", new String[] { null }, new String[] { "a" }), "aba"); [EOL]     assertEquals(StringUtils.replaceEach("abcde", new String[] { "ab", "d" }, new String[] { "w", "t" }), "wcte"); [EOL]     assertEquals(StringUtils.replaceEach("abcde", new String[] { "ab", "d" }, new String[] { "d", "t" }), "dcte"); [EOL]     assertEquals("bcc", StringUtils.replaceEach("abc", new String[] { "a", "b" }, new String[] { "b", "c" })); [EOL]     assertEquals("q651.506bera", StringUtils.replaceEach("d216.102oren", new String[] { "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "1", "2", "3", "4", "5", "6", "7", "8", "9" }, new String[] { "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "5", "6", "7", "8", "9", "1", "2", "3", "4" })); [EOL]     assertEquals(StringUtils.replaceEach("aba", new String[] { "a" }, new String[] { null }), "aba"); [EOL]     assertEquals(StringUtils.replaceEach("aba", new String[] { "a", "b" }, new String[] { "c", null }), "cbc"); [EOL] }
@Test [EOL] public void testReplace_StringStringArrayStringArray() { [EOL]     assertNull(StringUtils.replaceEach(null, new String[] { "a" }, new String[] { "b" })); [EOL]     assertEquals(StringUtils.replaceEach("", new String[] { "a" }, new String[] { "b" }), ""); [EOL]     assertEquals(StringUtils.replaceEach("aba", null, null), "aba"); [EOL]     assertEquals(StringUtils.replaceEach("aba", new String[0], null), "aba"); [EOL]     assertEquals(StringUtils.replaceEach("aba", null, new String[0]), "aba"); [EOL]     assertEquals(StringUtils.replaceEach("aba", new String[] { "a" }, null), "aba"); [EOL]     assertEquals(StringUtils.replaceEach("aba", new String[] { "a" }, new String[] { "" }), "b"); [EOL]     assertEquals(StringUtils.replaceEach("aba", new String[] { null }, new String[] { "a" }), "aba"); [EOL]     assertEquals(StringUtils.replaceEach("abcde", new String[] { "ab", "d" }, new String[] { "w", "t" }), "wcte"); [EOL]     assertEquals(StringUtils.replaceEach("abcde", new String[] { "ab", "d" }, new String[] { "d", "t" }), "dcte"); [EOL]     assertEquals("bcc", StringUtils.replaceEach("abc", new String[] { "a", "b" }, new String[] { "b", "c" })); [EOL]     assertEquals("q651.506bera", StringUtils.replaceEach("d216.102oren", new String[] { "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "1", "2", "3", "4", "5", "6", "7", "8", "9" }, new String[] { "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "5", "6", "7", "8", "9", "1", "2", "3", "4" })); [EOL]     assertEquals(StringUtils.replaceEach("aba", new String[] { "a" }, new String[] { null }), "aba"); [EOL]     assertEquals(StringUtils.replaceEach("aba", new String[] { "a", "b" }, new String[] { "c", null }), "cbc"); [EOL] }
@Test [EOL] public void testReplace_StringStringArrayStringArray() { [EOL]     assertNull(StringUtils.replaceEach(null, new String[] { "a" }, new String[] { "b" })); [EOL]     assertEquals(StringUtils.replaceEach("", new String[] { "a" }, new String[] { "b" }), ""); [EOL]     assertEquals(StringUtils.replaceEach("aba", null, null), "aba"); [EOL]     assertEquals(StringUtils.replaceEach("aba", new String[0], null), "aba"); [EOL]     assertEquals(StringUtils.replaceEach("aba", null, new String[0]), "aba"); [EOL]     assertEquals(StringUtils.replaceEach("aba", new String[] { "a" }, null), "aba"); [EOL]     assertEquals(StringUtils.replaceEach("aba", new String[] { "a" }, new String[] { "" }), "b"); [EOL]     assertEquals(StringUtils.replaceEach("aba", new String[] { null }, new String[] { "a" }), "aba"); [EOL]     assertEquals(StringUtils.replaceEach("abcde", new String[] { "ab", "d" }, new String[] { "w", "t" }), "wcte"); [EOL]     assertEquals(StringUtils.replaceEach("abcde", new String[] { "ab", "d" }, new String[] { "d", "t" }), "dcte"); [EOL]     assertEquals("bcc", StringUtils.replaceEach("abc", new String[] { "a", "b" }, new String[] { "b", "c" })); [EOL]     assertEquals("q651.506bera", StringUtils.replaceEach("d216.102oren", new String[] { "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "1", "2", "3", "4", "5", "6", "7", "8", "9" }, new String[] { "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "5", "6", "7", "8", "9", "1", "2", "3", "4" })); [EOL]     assertEquals(StringUtils.replaceEach("aba", new String[] { "a" }, new String[] { null }), "aba"); [EOL]     assertEquals(StringUtils.replaceEach("aba", new String[] { "a", "b" }, new String[] { "c", null }), "cbc"); [EOL] }
@Test [EOL] public void testReplace_StringStringArrayStringArray() { [EOL]     assertNull(StringUtils.replaceEach(null, new String[] { "a" }, new String[] { "b" })); [EOL]     assertEquals(StringUtils.replaceEach("", new String[] { "a" }, new String[] { "b" }), ""); [EOL]     assertEquals(StringUtils.replaceEach("aba", null, null), "aba"); [EOL]     assertEquals(StringUtils.replaceEach("aba", new String[0], null), "aba"); [EOL]     assertEquals(StringUtils.replaceEach("aba", null, new String[0]), "aba"); [EOL]     assertEquals(StringUtils.replaceEach("aba", new String[] { "a" }, null), "aba"); [EOL]     assertEquals(StringUtils.replaceEach("aba", new String[] { "a" }, new String[] { "" }), "b"); [EOL]     assertEquals(StringUtils.replaceEach("aba", new String[] { null }, new String[] { "a" }), "aba"); [EOL]     assertEquals(StringUtils.replaceEach("abcde", new String[] { "ab", "d" }, new String[] { "w", "t" }), "wcte"); [EOL]     assertEquals(StringUtils.replaceEach("abcde", new String[] { "ab", "d" }, new String[] { "d", "t" }), "dcte"); [EOL]     assertEquals("bcc", StringUtils.replaceEach("abc", new String[] { "a", "b" }, new String[] { "b", "c" })); [EOL]     assertEquals("q651.506bera", StringUtils.replaceEach("d216.102oren", new String[] { "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "1", "2", "3", "4", "5", "6", "7", "8", "9" }, new String[] { "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "5", "6", "7", "8", "9", "1", "2", "3", "4" })); [EOL]     assertEquals(StringUtils.replaceEach("aba", new String[] { "a" }, new String[] { null }), "aba"); [EOL]     assertEquals(StringUtils.replaceEach("aba", new String[] { "a", "b" }, new String[] { "c", null }), "cbc"); [EOL] }
@Test [EOL] public void testReplace_StringStringArrayStringArray() { [EOL]     assertNull(StringUtils.replaceEach(null, new String[] { "a" }, new String[] { "b" })); [EOL]     assertEquals(StringUtils.replaceEach("", new String[] { "a" }, new String[] { "b" }), ""); [EOL]     assertEquals(StringUtils.replaceEach("aba", null, null), "aba"); [EOL]     assertEquals(StringUtils.replaceEach("aba", new String[0], null), "aba"); [EOL]     assertEquals(StringUtils.replaceEach("aba", null, new String[0]), "aba"); [EOL]     assertEquals(StringUtils.replaceEach("aba", new String[] { "a" }, null), "aba"); [EOL]     assertEquals(StringUtils.replaceEach("aba", new String[] { "a" }, new String[] { "" }), "b"); [EOL]     assertEquals(StringUtils.replaceEach("aba", new String[] { null }, new String[] { "a" }), "aba"); [EOL]     assertEquals(StringUtils.replaceEach("abcde", new String[] { "ab", "d" }, new String[] { "w", "t" }), "wcte"); [EOL]     assertEquals(StringUtils.replaceEach("abcde", new String[] { "ab", "d" }, new String[] { "d", "t" }), "dcte"); [EOL]     assertEquals("bcc", StringUtils.replaceEach("abc", new String[] { "a", "b" }, new String[] { "b", "c" })); [EOL]     assertEquals("q651.506bera", StringUtils.replaceEach("d216.102oren", new String[] { "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "1", "2", "3", "4", "5", "6", "7", "8", "9" }, new String[] { "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "5", "6", "7", "8", "9", "1", "2", "3", "4" })); [EOL]     assertEquals(StringUtils.replaceEach("aba", new String[] { "a" }, new String[] { null }), "aba"); [EOL]     assertEquals(StringUtils.replaceEach("aba", new String[] { "a", "b" }, new String[] { "c", null }), "cbc"); [EOL] }
@Test [EOL] public void testReplace_StringStringArrayStringArray() { [EOL]     assertNull(StringUtils.replaceEach(null, new String[] { "a" }, new String[] { "b" })); [EOL]     assertEquals(StringUtils.replaceEach("", new String[] { "a" }, new String[] { "b" }), ""); [EOL]     assertEquals(StringUtils.replaceEach("aba", null, null), "aba"); [EOL]     assertEquals(StringUtils.replaceEach("aba", new String[0], null), "aba"); [EOL]     assertEquals(StringUtils.replaceEach("aba", null, new String[0]), "aba"); [EOL]     assertEquals(StringUtils.replaceEach("aba", new String[] { "a" }, null), "aba"); [EOL]     assertEquals(StringUtils.replaceEach("aba", new String[] { "a" }, new String[] { "" }), "b"); [EOL]     assertEquals(StringUtils.replaceEach("aba", new String[] { null }, new String[] { "a" }), "aba"); [EOL]     assertEquals(StringUtils.replaceEach("abcde", new String[] { "ab", "d" }, new String[] { "w", "t" }), "wcte"); [EOL]     assertEquals(StringUtils.replaceEach("abcde", new String[] { "ab", "d" }, new String[] { "d", "t" }), "dcte"); [EOL]     assertEquals("bcc", StringUtils.replaceEach("abc", new String[] { "a", "b" }, new String[] { "b", "c" })); [EOL]     assertEquals("q651.506bera", StringUtils.replaceEach("d216.102oren", new String[] { "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "1", "2", "3", "4", "5", "6", "7", "8", "9" }, new String[] { "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "5", "6", "7", "8", "9", "1", "2", "3", "4" })); [EOL]     assertEquals(StringUtils.replaceEach("aba", new String[] { "a" }, new String[] { null }), "aba"); [EOL]     assertEquals(StringUtils.replaceEach("aba", new String[] { "a", "b" }, new String[] { "c", null }), "cbc"); [EOL] }
@Test [EOL] public void testReplaceChars_StringCharChar() { [EOL]     assertEquals(null, StringUtils.replaceChars(null, 'b', 'z')); [EOL]     assertEquals("", StringUtils.replaceChars("", 'b', 'z')); [EOL]     assertEquals("azcza", StringUtils.replaceChars("abcba", 'b', 'z')); [EOL]     assertEquals("abcba", StringUtils.replaceChars("abcba", 'x', 'z')); [EOL] }
@Test [EOL] public void testReplaceChars_StringCharChar() { [EOL]     assertEquals(null, StringUtils.replaceChars(null, 'b', 'z')); [EOL]     assertEquals("", StringUtils.replaceChars("", 'b', 'z')); [EOL]     assertEquals("azcza", StringUtils.replaceChars("abcba", 'b', 'z')); [EOL]     assertEquals("abcba", StringUtils.replaceChars("abcba", 'x', 'z')); [EOL] }
@Test [EOL] public void testReplaceChars_StringCharChar() { [EOL]     assertEquals(null, StringUtils.replaceChars(null, 'b', 'z')); [EOL]     assertEquals("", StringUtils.replaceChars("", 'b', 'z')); [EOL]     assertEquals("azcza", StringUtils.replaceChars("abcba", 'b', 'z')); [EOL]     assertEquals("abcba", StringUtils.replaceChars("abcba", 'x', 'z')); [EOL] }
@Test [EOL] public void testReplaceChars_StringStringString() { [EOL]     assertEquals(null, StringUtils.replaceChars(null, null, null)); [EOL]     assertEquals(null, StringUtils.replaceChars(null, "", null)); [EOL]     assertEquals(null, StringUtils.replaceChars(null, "a", null)); [EOL]     assertEquals(null, StringUtils.replaceChars(null, null, "")); [EOL]     assertEquals(null, StringUtils.replaceChars(null, null, "x")); [EOL]     assertEquals("", StringUtils.replaceChars("", null, null)); [EOL]     assertEquals("", StringUtils.replaceChars("", "", null)); [EOL]     assertEquals("", StringUtils.replaceChars("", "a", null)); [EOL]     assertEquals("", StringUtils.replaceChars("", null, "")); [EOL]     assertEquals("", StringUtils.replaceChars("", null, "x")); [EOL]     assertEquals("abc", StringUtils.replaceChars("abc", null, null)); [EOL]     assertEquals("abc", StringUtils.replaceChars("abc", null, "")); [EOL]     assertEquals("abc", StringUtils.replaceChars("abc", null, "x")); [EOL]     assertEquals("abc", StringUtils.replaceChars("abc", "", null)); [EOL]     assertEquals("abc", StringUtils.replaceChars("abc", "", "")); [EOL]     assertEquals("abc", StringUtils.replaceChars("abc", "", "x")); [EOL]     assertEquals("ac", StringUtils.replaceChars("abc", "b", null)); [EOL]     assertEquals("ac", StringUtils.replaceChars("abc", "b", "")); [EOL]     assertEquals("axc", StringUtils.replaceChars("abc", "b", "x")); [EOL]     assertEquals("ayzya", StringUtils.replaceChars("abcba", "bc", "yz")); [EOL]     assertEquals("ayya", StringUtils.replaceChars("abcba", "bc", "y")); [EOL]     assertEquals("ayzya", StringUtils.replaceChars("abcba", "bc", "yzx")); [EOL]     assertEquals("abcba", StringUtils.replaceChars("abcba", "z", "w")); [EOL]     assertSame("abcba", StringUtils.replaceChars("abcba", "z", "w")); [EOL]     assertEquals("jelly", StringUtils.replaceChars("hello", "ho", "jy")); [EOL]     assertEquals("ayzya", StringUtils.replaceChars("abcba", "bc", "yz")); [EOL]     assertEquals("ayya", StringUtils.replaceChars("abcba", "bc", "y")); [EOL]     assertEquals("ayzya", StringUtils.replaceChars("abcba", "bc", "yzx")); [EOL]     assertEquals("bcc", StringUtils.replaceChars("abc", "ab", "bc")); [EOL]     assertEquals("q651.506bera", StringUtils.replaceChars("d216.102oren", "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ123456789", "nopqrstuvwxyzabcdefghijklmNOPQRSTUVWXYZABCDEFGHIJKLM567891234")); [EOL] }
@Test [EOL] public void testReplaceChars_StringStringString() { [EOL]     assertEquals(null, StringUtils.replaceChars(null, null, null)); [EOL]     assertEquals(null, StringUtils.replaceChars(null, "", null)); [EOL]     assertEquals(null, StringUtils.replaceChars(null, "a", null)); [EOL]     assertEquals(null, StringUtils.replaceChars(null, null, "")); [EOL]     assertEquals(null, StringUtils.replaceChars(null, null, "x")); [EOL]     assertEquals("", StringUtils.replaceChars("", null, null)); [EOL]     assertEquals("", StringUtils.replaceChars("", "", null)); [EOL]     assertEquals("", StringUtils.replaceChars("", "a", null)); [EOL]     assertEquals("", StringUtils.replaceChars("", null, "")); [EOL]     assertEquals("", StringUtils.replaceChars("", null, "x")); [EOL]     assertEquals("abc", StringUtils.replaceChars("abc", null, null)); [EOL]     assertEquals("abc", StringUtils.replaceChars("abc", null, "")); [EOL]     assertEquals("abc", StringUtils.replaceChars("abc", null, "x")); [EOL]     assertEquals("abc", StringUtils.replaceChars("abc", "", null)); [EOL]     assertEquals("abc", StringUtils.replaceChars("abc", "", "")); [EOL]     assertEquals("abc", StringUtils.replaceChars("abc", "", "x")); [EOL]     assertEquals("ac", StringUtils.replaceChars("abc", "b", null)); [EOL]     assertEquals("ac", StringUtils.replaceChars("abc", "b", "")); [EOL]     assertEquals("axc", StringUtils.replaceChars("abc", "b", "x")); [EOL]     assertEquals("ayzya", StringUtils.replaceChars("abcba", "bc", "yz")); [EOL]     assertEquals("ayya", StringUtils.replaceChars("abcba", "bc", "y")); [EOL]     assertEquals("ayzya", StringUtils.replaceChars("abcba", "bc", "yzx")); [EOL]     assertEquals("abcba", StringUtils.replaceChars("abcba", "z", "w")); [EOL]     assertSame("abcba", StringUtils.replaceChars("abcba", "z", "w")); [EOL]     assertEquals("jelly", StringUtils.replaceChars("hello", "ho", "jy")); [EOL]     assertEquals("ayzya", StringUtils.replaceChars("abcba", "bc", "yz")); [EOL]     assertEquals("ayya", StringUtils.replaceChars("abcba", "bc", "y")); [EOL]     assertEquals("ayzya", StringUtils.replaceChars("abcba", "bc", "yzx")); [EOL]     assertEquals("bcc", StringUtils.replaceChars("abc", "ab", "bc")); [EOL]     assertEquals("q651.506bera", StringUtils.replaceChars("d216.102oren", "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ123456789", "nopqrstuvwxyzabcdefghijklmNOPQRSTUVWXYZABCDEFGHIJKLM567891234")); [EOL] }
@Test [EOL] public void testRepeat_StringInt() { [EOL]     assertEquals(null, StringUtils.repeat(null, 2)); [EOL]     assertEquals("", StringUtils.repeat("ab", 0)); [EOL]     assertEquals("", StringUtils.repeat("", 3)); [EOL]     assertEquals("aaa", StringUtils.repeat("a", 3)); [EOL]     assertEquals("ababab", StringUtils.repeat("ab", 3)); [EOL]     assertEquals("abcabcabc", StringUtils.repeat("abc", 3)); [EOL]     final String str = StringUtils.repeat("a", 10000); [EOL]     assertEquals(10000, str.length()); [EOL]     assertTrue(StringUtils.containsOnly(str, new char[] { 'a' })); [EOL] }
@Test [EOL] public void testRepeat_StringInt() { [EOL]     assertEquals(null, StringUtils.repeat(null, 2)); [EOL]     assertEquals("", StringUtils.repeat("ab", 0)); [EOL]     assertEquals("", StringUtils.repeat("", 3)); [EOL]     assertEquals("aaa", StringUtils.repeat("a", 3)); [EOL]     assertEquals("ababab", StringUtils.repeat("ab", 3)); [EOL]     assertEquals("abcabcabc", StringUtils.repeat("abc", 3)); [EOL]     final String str = StringUtils.repeat("a", 10000); [EOL]     assertEquals(10000, str.length()); [EOL]     assertTrue(StringUtils.containsOnly(str, new char[] { 'a' })); [EOL] }
@Test [EOL] public void testRepeat_StringInt() { [EOL]     assertEquals(null, StringUtils.repeat(null, 2)); [EOL]     assertEquals("", StringUtils.repeat("ab", 0)); [EOL]     assertEquals("", StringUtils.repeat("", 3)); [EOL]     assertEquals("aaa", StringUtils.repeat("a", 3)); [EOL]     assertEquals("ababab", StringUtils.repeat("ab", 3)); [EOL]     assertEquals("abcabcabc", StringUtils.repeat("abc", 3)); [EOL]     final String str = StringUtils.repeat("a", 10000); [EOL]     assertEquals(10000, str.length()); [EOL]     assertTrue(StringUtils.containsOnly(str, new char[] { 'a' })); [EOL] }
@Test [EOL] public void testRepeat_StringInt() { [EOL]     assertEquals(null, StringUtils.repeat(null, 2)); [EOL]     assertEquals("", StringUtils.repeat("ab", 0)); [EOL]     assertEquals("", StringUtils.repeat("", 3)); [EOL]     assertEquals("aaa", StringUtils.repeat("a", 3)); [EOL]     assertEquals("ababab", StringUtils.repeat("ab", 3)); [EOL]     assertEquals("abcabcabc", StringUtils.repeat("abc", 3)); [EOL]     final String str = StringUtils.repeat("a", 10000); [EOL]     assertEquals(10000, str.length()); [EOL]     assertTrue(StringUtils.containsOnly(str, new char[] { 'a' })); [EOL] }
@Test [EOL] public void testRepeat_StringInt() { [EOL]     assertEquals(null, StringUtils.repeat(null, 2)); [EOL]     assertEquals("", StringUtils.repeat("ab", 0)); [EOL]     assertEquals("", StringUtils.repeat("", 3)); [EOL]     assertEquals("aaa", StringUtils.repeat("a", 3)); [EOL]     assertEquals("ababab", StringUtils.repeat("ab", 3)); [EOL]     assertEquals("abcabcabc", StringUtils.repeat("abc", 3)); [EOL]     final String str = StringUtils.repeat("a", 10000); [EOL]     assertEquals(10000, str.length()); [EOL]     assertTrue(StringUtils.containsOnly(str, new char[] { 'a' })); [EOL] }
@Test [EOL] public void testRepeat_StringInt() { [EOL]     assertEquals(null, StringUtils.repeat(null, 2)); [EOL]     assertEquals("", StringUtils.repeat("ab", 0)); [EOL]     assertEquals("", StringUtils.repeat("", 3)); [EOL]     assertEquals("aaa", StringUtils.repeat("a", 3)); [EOL]     assertEquals("ababab", StringUtils.repeat("ab", 3)); [EOL]     assertEquals("abcabcabc", StringUtils.repeat("abc", 3)); [EOL]     final String str = StringUtils.repeat("a", 10000); [EOL]     assertEquals(10000, str.length()); [EOL]     assertTrue(StringUtils.containsOnly(str, new char[] { 'a' })); [EOL] }
@Test [EOL] public void testRepeat_StringInt() { [EOL]     assertEquals(null, StringUtils.repeat(null, 2)); [EOL]     assertEquals("", StringUtils.repeat("ab", 0)); [EOL]     assertEquals("", StringUtils.repeat("", 3)); [EOL]     assertEquals("aaa", StringUtils.repeat("a", 3)); [EOL]     assertEquals("ababab", StringUtils.repeat("ab", 3)); [EOL]     assertEquals("abcabcabc", StringUtils.repeat("abc", 3)); [EOL]     final String str = StringUtils.repeat("a", 10000); [EOL]     assertEquals(10000, str.length()); [EOL]     assertTrue(StringUtils.containsOnly(str, new char[] { 'a' })); [EOL] }
@Test [EOL] public void testRepeat_StringInt() { [EOL]     assertEquals(null, StringUtils.repeat(null, 2)); [EOL]     assertEquals("", StringUtils.repeat("ab", 0)); [EOL]     assertEquals("", StringUtils.repeat("", 3)); [EOL]     assertEquals("aaa", StringUtils.repeat("a", 3)); [EOL]     assertEquals("ababab", StringUtils.repeat("ab", 3)); [EOL]     assertEquals("abcabcabc", StringUtils.repeat("abc", 3)); [EOL]     final String str = StringUtils.repeat("a", 10000); [EOL]     assertEquals(10000, str.length()); [EOL]     assertTrue(StringUtils.containsOnly(str, new char[] { 'a' })); [EOL] }
@Test [EOL] public void testRightPad_StringInt() { [EOL]     assertEquals(null, StringUtils.rightPad(null, 5)); [EOL]     assertEquals("     ", StringUtils.rightPad("", 5)); [EOL]     assertEquals("abc  ", StringUtils.rightPad("abc", 5)); [EOL]     assertEquals("abc", StringUtils.rightPad("abc", 2)); [EOL]     assertEquals("abc", StringUtils.rightPad("abc", -1)); [EOL] }
@Test [EOL] public void testRightPad_StringInt() { [EOL]     assertEquals(null, StringUtils.rightPad(null, 5)); [EOL]     assertEquals("     ", StringUtils.rightPad("", 5)); [EOL]     assertEquals("abc  ", StringUtils.rightPad("abc", 5)); [EOL]     assertEquals("abc", StringUtils.rightPad("abc", 2)); [EOL]     assertEquals("abc", StringUtils.rightPad("abc", -1)); [EOL] }
@Test [EOL] public void testRightPad_StringInt() { [EOL]     assertEquals(null, StringUtils.rightPad(null, 5)); [EOL]     assertEquals("     ", StringUtils.rightPad("", 5)); [EOL]     assertEquals("abc  ", StringUtils.rightPad("abc", 5)); [EOL]     assertEquals("abc", StringUtils.rightPad("abc", 2)); [EOL]     assertEquals("abc", StringUtils.rightPad("abc", -1)); [EOL] }
@Test [EOL] public void testRightPad_StringInt() { [EOL]     assertEquals(null, StringUtils.rightPad(null, 5)); [EOL]     assertEquals("     ", StringUtils.rightPad("", 5)); [EOL]     assertEquals("abc  ", StringUtils.rightPad("abc", 5)); [EOL]     assertEquals("abc", StringUtils.rightPad("abc", 2)); [EOL]     assertEquals("abc", StringUtils.rightPad("abc", -1)); [EOL] }
@Test [EOL] public void testRightPad_StringInt() { [EOL]     assertEquals(null, StringUtils.rightPad(null, 5)); [EOL]     assertEquals("     ", StringUtils.rightPad("", 5)); [EOL]     assertEquals("abc  ", StringUtils.rightPad("abc", 5)); [EOL]     assertEquals("abc", StringUtils.rightPad("abc", 2)); [EOL]     assertEquals("abc", StringUtils.rightPad("abc", -1)); [EOL] }
@Test [EOL] public void testRightPad_StringInt() { [EOL]     assertEquals(null, StringUtils.rightPad(null, 5)); [EOL]     assertEquals("     ", StringUtils.rightPad("", 5)); [EOL]     assertEquals("abc  ", StringUtils.rightPad("abc", 5)); [EOL]     assertEquals("abc", StringUtils.rightPad("abc", 2)); [EOL]     assertEquals("abc", StringUtils.rightPad("abc", -1)); [EOL] }
@Test [EOL] public void testRightPad_StringInt() { [EOL]     assertEquals(null, StringUtils.rightPad(null, 5)); [EOL]     assertEquals("     ", StringUtils.rightPad("", 5)); [EOL]     assertEquals("abc  ", StringUtils.rightPad("abc", 5)); [EOL]     assertEquals("abc", StringUtils.rightPad("abc", 2)); [EOL]     assertEquals("abc", StringUtils.rightPad("abc", -1)); [EOL] }
@Test [EOL] public void testRightPad_StringInt() { [EOL]     assertEquals(null, StringUtils.rightPad(null, 5)); [EOL]     assertEquals("     ", StringUtils.rightPad("", 5)); [EOL]     assertEquals("abc  ", StringUtils.rightPad("abc", 5)); [EOL]     assertEquals("abc", StringUtils.rightPad("abc", 2)); [EOL]     assertEquals("abc", StringUtils.rightPad("abc", -1)); [EOL] }
@Test [EOL] public void testRightPad_StringInt() { [EOL]     assertEquals(null, StringUtils.rightPad(null, 5)); [EOL]     assertEquals("     ", StringUtils.rightPad("", 5)); [EOL]     assertEquals("abc  ", StringUtils.rightPad("abc", 5)); [EOL]     assertEquals("abc", StringUtils.rightPad("abc", 2)); [EOL]     assertEquals("abc", StringUtils.rightPad("abc", -1)); [EOL] }
@Test [EOL] public void testCenter_StringIntString() { [EOL]     assertEquals(null, StringUtils.center(null, 4, null)); [EOL]     assertEquals(null, StringUtils.center(null, -1, " ")); [EOL]     assertEquals(null, StringUtils.center(null, 4, " ")); [EOL]     assertEquals("    ", StringUtils.center("", 4, " ")); [EOL]     assertEquals("ab", StringUtils.center("ab", 0, " ")); [EOL]     assertEquals("ab", StringUtils.center("ab", -1, " ")); [EOL]     assertEquals("ab", StringUtils.center("ab", 1, " ")); [EOL]     assertEquals("    ", StringUtils.center("", 4, " ")); [EOL]     assertEquals(" ab ", StringUtils.center("ab", 4, " ")); [EOL]     assertEquals("abcd", StringUtils.center("abcd", 2, " ")); [EOL]     assertEquals(" a  ", StringUtils.center("a", 4, " ")); [EOL]     assertEquals("yayz", StringUtils.center("a", 4, "yz")); [EOL]     assertEquals("yzyayzy", StringUtils.center("a", 7, "yz")); [EOL]     assertEquals("  abc  ", StringUtils.center("abc", 7, null)); [EOL]     assertEquals("  abc  ", StringUtils.center("abc", 7, "")); [EOL] }
@Test [EOL] public void testCenter_StringIntString() { [EOL]     assertEquals(null, StringUtils.center(null, 4, null)); [EOL]     assertEquals(null, StringUtils.center(null, -1, " ")); [EOL]     assertEquals(null, StringUtils.center(null, 4, " ")); [EOL]     assertEquals("    ", StringUtils.center("", 4, " ")); [EOL]     assertEquals("ab", StringUtils.center("ab", 0, " ")); [EOL]     assertEquals("ab", StringUtils.center("ab", -1, " ")); [EOL]     assertEquals("ab", StringUtils.center("ab", 1, " ")); [EOL]     assertEquals("    ", StringUtils.center("", 4, " ")); [EOL]     assertEquals(" ab ", StringUtils.center("ab", 4, " ")); [EOL]     assertEquals("abcd", StringUtils.center("abcd", 2, " ")); [EOL]     assertEquals(" a  ", StringUtils.center("a", 4, " ")); [EOL]     assertEquals("yayz", StringUtils.center("a", 4, "yz")); [EOL]     assertEquals("yzyayzy", StringUtils.center("a", 7, "yz")); [EOL]     assertEquals("  abc  ", StringUtils.center("abc", 7, null)); [EOL]     assertEquals("  abc  ", StringUtils.center("abc", 7, "")); [EOL] }
@Test [EOL] public void testLeftPad_StringIntString() { [EOL]     assertEquals(null, StringUtils.leftPad(null, 5, "-+")); [EOL]     assertEquals(null, StringUtils.leftPad(null, 5, null)); [EOL]     assertEquals("     ", StringUtils.leftPad("", 5, " ")); [EOL]     assertEquals("-+-+abc", StringUtils.leftPad("abc", 7, "-+")); [EOL]     assertEquals("-+~abc", StringUtils.leftPad("abc", 6, "-+~")); [EOL]     assertEquals("-+abc", StringUtils.leftPad("abc", 5, "-+~")); [EOL]     assertEquals("abc", StringUtils.leftPad("abc", 2, " ")); [EOL]     assertEquals("abc", StringUtils.leftPad("abc", -1, " ")); [EOL]     assertEquals("  abc", StringUtils.leftPad("abc", 5, null)); [EOL]     assertEquals("  abc", StringUtils.leftPad("abc", 5, "")); [EOL] }
@Test [EOL] public void testLeftPad_StringIntString() { [EOL]     assertEquals(null, StringUtils.leftPad(null, 5, "-+")); [EOL]     assertEquals(null, StringUtils.leftPad(null, 5, null)); [EOL]     assertEquals("     ", StringUtils.leftPad("", 5, " ")); [EOL]     assertEquals("-+-+abc", StringUtils.leftPad("abc", 7, "-+")); [EOL]     assertEquals("-+~abc", StringUtils.leftPad("abc", 6, "-+~")); [EOL]     assertEquals("-+abc", StringUtils.leftPad("abc", 5, "-+~")); [EOL]     assertEquals("abc", StringUtils.leftPad("abc", 2, " ")); [EOL]     assertEquals("abc", StringUtils.leftPad("abc", -1, " ")); [EOL]     assertEquals("  abc", StringUtils.leftPad("abc", 5, null)); [EOL]     assertEquals("  abc", StringUtils.leftPad("abc", 5, "")); [EOL] }
@Test [EOL] public void testLeftPad_StringIntString() { [EOL]     assertEquals(null, StringUtils.leftPad(null, 5, "-+")); [EOL]     assertEquals(null, StringUtils.leftPad(null, 5, null)); [EOL]     assertEquals("     ", StringUtils.leftPad("", 5, " ")); [EOL]     assertEquals("-+-+abc", StringUtils.leftPad("abc", 7, "-+")); [EOL]     assertEquals("-+~abc", StringUtils.leftPad("abc", 6, "-+~")); [EOL]     assertEquals("-+abc", StringUtils.leftPad("abc", 5, "-+~")); [EOL]     assertEquals("abc", StringUtils.leftPad("abc", 2, " ")); [EOL]     assertEquals("abc", StringUtils.leftPad("abc", -1, " ")); [EOL]     assertEquals("  abc", StringUtils.leftPad("abc", 5, null)); [EOL]     assertEquals("  abc", StringUtils.leftPad("abc", 5, "")); [EOL] }
@Test [EOL] public void testLeftPad_StringIntString() { [EOL]     assertEquals(null, StringUtils.leftPad(null, 5, "-+")); [EOL]     assertEquals(null, StringUtils.leftPad(null, 5, null)); [EOL]     assertEquals("     ", StringUtils.leftPad("", 5, " ")); [EOL]     assertEquals("-+-+abc", StringUtils.leftPad("abc", 7, "-+")); [EOL]     assertEquals("-+~abc", StringUtils.leftPad("abc", 6, "-+~")); [EOL]     assertEquals("-+abc", StringUtils.leftPad("abc", 5, "-+~")); [EOL]     assertEquals("abc", StringUtils.leftPad("abc", 2, " ")); [EOL]     assertEquals("abc", StringUtils.leftPad("abc", -1, " ")); [EOL]     assertEquals("  abc", StringUtils.leftPad("abc", 5, null)); [EOL]     assertEquals("  abc", StringUtils.leftPad("abc", 5, "")); [EOL] }
@Test [EOL] public void testLeftPad_StringIntString() { [EOL]     assertEquals(null, StringUtils.leftPad(null, 5, "-+")); [EOL]     assertEquals(null, StringUtils.leftPad(null, 5, null)); [EOL]     assertEquals("     ", StringUtils.leftPad("", 5, " ")); [EOL]     assertEquals("-+-+abc", StringUtils.leftPad("abc", 7, "-+")); [EOL]     assertEquals("-+~abc", StringUtils.leftPad("abc", 6, "-+~")); [EOL]     assertEquals("-+abc", StringUtils.leftPad("abc", 5, "-+~")); [EOL]     assertEquals("abc", StringUtils.leftPad("abc", 2, " ")); [EOL]     assertEquals("abc", StringUtils.leftPad("abc", -1, " ")); [EOL]     assertEquals("  abc", StringUtils.leftPad("abc", 5, null)); [EOL]     assertEquals("  abc", StringUtils.leftPad("abc", 5, "")); [EOL] }
@Test [EOL] public void testLeftPad_StringIntString() { [EOL]     assertEquals(null, StringUtils.leftPad(null, 5, "-+")); [EOL]     assertEquals(null, StringUtils.leftPad(null, 5, null)); [EOL]     assertEquals("     ", StringUtils.leftPad("", 5, " ")); [EOL]     assertEquals("-+-+abc", StringUtils.leftPad("abc", 7, "-+")); [EOL]     assertEquals("-+~abc", StringUtils.leftPad("abc", 6, "-+~")); [EOL]     assertEquals("-+abc", StringUtils.leftPad("abc", 5, "-+~")); [EOL]     assertEquals("abc", StringUtils.leftPad("abc", 2, " ")); [EOL]     assertEquals("abc", StringUtils.leftPad("abc", -1, " ")); [EOL]     assertEquals("  abc", StringUtils.leftPad("abc", 5, null)); [EOL]     assertEquals("  abc", StringUtils.leftPad("abc", 5, "")); [EOL] }
@Test [EOL] public void testLeftPad_StringIntString() { [EOL]     assertEquals(null, StringUtils.leftPad(null, 5, "-+")); [EOL]     assertEquals(null, StringUtils.leftPad(null, 5, null)); [EOL]     assertEquals("     ", StringUtils.leftPad("", 5, " ")); [EOL]     assertEquals("-+-+abc", StringUtils.leftPad("abc", 7, "-+")); [EOL]     assertEquals("-+~abc", StringUtils.leftPad("abc", 6, "-+~")); [EOL]     assertEquals("-+abc", StringUtils.leftPad("abc", 5, "-+~")); [EOL]     assertEquals("abc", StringUtils.leftPad("abc", 2, " ")); [EOL]     assertEquals("abc", StringUtils.leftPad("abc", -1, " ")); [EOL]     assertEquals("  abc", StringUtils.leftPad("abc", 5, null)); [EOL]     assertEquals("  abc", StringUtils.leftPad("abc", 5, "")); [EOL] }
@Test [EOL] public void testLeftPad_StringIntString() { [EOL]     assertEquals(null, StringUtils.leftPad(null, 5, "-+")); [EOL]     assertEquals(null, StringUtils.leftPad(null, 5, null)); [EOL]     assertEquals("     ", StringUtils.leftPad("", 5, " ")); [EOL]     assertEquals("-+-+abc", StringUtils.leftPad("abc", 7, "-+")); [EOL]     assertEquals("-+~abc", StringUtils.leftPad("abc", 6, "-+~")); [EOL]     assertEquals("-+abc", StringUtils.leftPad("abc", 5, "-+~")); [EOL]     assertEquals("abc", StringUtils.leftPad("abc", 2, " ")); [EOL]     assertEquals("abc", StringUtils.leftPad("abc", -1, " ")); [EOL]     assertEquals("  abc", StringUtils.leftPad("abc", 5, null)); [EOL]     assertEquals("  abc", StringUtils.leftPad("abc", 5, "")); [EOL] }
@Test [EOL] public void testCenter_StringIntString() { [EOL]     assertEquals(null, StringUtils.center(null, 4, null)); [EOL]     assertEquals(null, StringUtils.center(null, -1, " ")); [EOL]     assertEquals(null, StringUtils.center(null, 4, " ")); [EOL]     assertEquals("    ", StringUtils.center("", 4, " ")); [EOL]     assertEquals("ab", StringUtils.center("ab", 0, " ")); [EOL]     assertEquals("ab", StringUtils.center("ab", -1, " ")); [EOL]     assertEquals("ab", StringUtils.center("ab", 1, " ")); [EOL]     assertEquals("    ", StringUtils.center("", 4, " ")); [EOL]     assertEquals(" ab ", StringUtils.center("ab", 4, " ")); [EOL]     assertEquals("abcd", StringUtils.center("abcd", 2, " ")); [EOL]     assertEquals(" a  ", StringUtils.center("a", 4, " ")); [EOL]     assertEquals("yayz", StringUtils.center("a", 4, "yz")); [EOL]     assertEquals("yzyayzy", StringUtils.center("a", 7, "yz")); [EOL]     assertEquals("  abc  ", StringUtils.center("abc", 7, null)); [EOL]     assertEquals("  abc  ", StringUtils.center("abc", 7, "")); [EOL] }
@Test [EOL] public void testCenter_StringIntString() { [EOL]     assertEquals(null, StringUtils.center(null, 4, null)); [EOL]     assertEquals(null, StringUtils.center(null, -1, " ")); [EOL]     assertEquals(null, StringUtils.center(null, 4, " ")); [EOL]     assertEquals("    ", StringUtils.center("", 4, " ")); [EOL]     assertEquals("ab", StringUtils.center("ab", 0, " ")); [EOL]     assertEquals("ab", StringUtils.center("ab", -1, " ")); [EOL]     assertEquals("ab", StringUtils.center("ab", 1, " ")); [EOL]     assertEquals("    ", StringUtils.center("", 4, " ")); [EOL]     assertEquals(" ab ", StringUtils.center("ab", 4, " ")); [EOL]     assertEquals("abcd", StringUtils.center("abcd", 2, " ")); [EOL]     assertEquals(" a  ", StringUtils.center("a", 4, " ")); [EOL]     assertEquals("yayz", StringUtils.center("a", 4, "yz")); [EOL]     assertEquals("yzyayzy", StringUtils.center("a", 7, "yz")); [EOL]     assertEquals("  abc  ", StringUtils.center("abc", 7, null)); [EOL]     assertEquals("  abc  ", StringUtils.center("abc", 7, "")); [EOL] }
@Test [EOL] public void testCenter_StringIntString() { [EOL]     assertEquals(null, StringUtils.center(null, 4, null)); [EOL]     assertEquals(null, StringUtils.center(null, -1, " ")); [EOL]     assertEquals(null, StringUtils.center(null, 4, " ")); [EOL]     assertEquals("    ", StringUtils.center("", 4, " ")); [EOL]     assertEquals("ab", StringUtils.center("ab", 0, " ")); [EOL]     assertEquals("ab", StringUtils.center("ab", -1, " ")); [EOL]     assertEquals("ab", StringUtils.center("ab", 1, " ")); [EOL]     assertEquals("    ", StringUtils.center("", 4, " ")); [EOL]     assertEquals(" ab ", StringUtils.center("ab", 4, " ")); [EOL]     assertEquals("abcd", StringUtils.center("abcd", 2, " ")); [EOL]     assertEquals(" a  ", StringUtils.center("a", 4, " ")); [EOL]     assertEquals("yayz", StringUtils.center("a", 4, "yz")); [EOL]     assertEquals("yzyayzy", StringUtils.center("a", 7, "yz")); [EOL]     assertEquals("  abc  ", StringUtils.center("abc", 7, null)); [EOL]     assertEquals("  abc  ", StringUtils.center("abc", 7, "")); [EOL] }
@Test [EOL] public void testCenter_StringIntString() { [EOL]     assertEquals(null, StringUtils.center(null, 4, null)); [EOL]     assertEquals(null, StringUtils.center(null, -1, " ")); [EOL]     assertEquals(null, StringUtils.center(null, 4, " ")); [EOL]     assertEquals("    ", StringUtils.center("", 4, " ")); [EOL]     assertEquals("ab", StringUtils.center("ab", 0, " ")); [EOL]     assertEquals("ab", StringUtils.center("ab", -1, " ")); [EOL]     assertEquals("ab", StringUtils.center("ab", 1, " ")); [EOL]     assertEquals("    ", StringUtils.center("", 4, " ")); [EOL]     assertEquals(" ab ", StringUtils.center("ab", 4, " ")); [EOL]     assertEquals("abcd", StringUtils.center("abcd", 2, " ")); [EOL]     assertEquals(" a  ", StringUtils.center("a", 4, " ")); [EOL]     assertEquals("yayz", StringUtils.center("a", 4, "yz")); [EOL]     assertEquals("yzyayzy", StringUtils.center("a", 7, "yz")); [EOL]     assertEquals("  abc  ", StringUtils.center("abc", 7, null)); [EOL]     assertEquals("  abc  ", StringUtils.center("abc", 7, "")); [EOL] }
@Test [EOL] public void testCenter_StringIntString() { [EOL]     assertEquals(null, StringUtils.center(null, 4, null)); [EOL]     assertEquals(null, StringUtils.center(null, -1, " ")); [EOL]     assertEquals(null, StringUtils.center(null, 4, " ")); [EOL]     assertEquals("    ", StringUtils.center("", 4, " ")); [EOL]     assertEquals("ab", StringUtils.center("ab", 0, " ")); [EOL]     assertEquals("ab", StringUtils.center("ab", -1, " ")); [EOL]     assertEquals("ab", StringUtils.center("ab", 1, " ")); [EOL]     assertEquals("    ", StringUtils.center("", 4, " ")); [EOL]     assertEquals(" ab ", StringUtils.center("ab", 4, " ")); [EOL]     assertEquals("abcd", StringUtils.center("abcd", 2, " ")); [EOL]     assertEquals(" a  ", StringUtils.center("a", 4, " ")); [EOL]     assertEquals("yayz", StringUtils.center("a", 4, "yz")); [EOL]     assertEquals("yzyayzy", StringUtils.center("a", 7, "yz")); [EOL]     assertEquals("  abc  ", StringUtils.center("abc", 7, null)); [EOL]     assertEquals("  abc  ", StringUtils.center("abc", 7, "")); [EOL] }
@Test [EOL] public void testCenter_StringIntString() { [EOL]     assertEquals(null, StringUtils.center(null, 4, null)); [EOL]     assertEquals(null, StringUtils.center(null, -1, " ")); [EOL]     assertEquals(null, StringUtils.center(null, 4, " ")); [EOL]     assertEquals("    ", StringUtils.center("", 4, " ")); [EOL]     assertEquals("ab", StringUtils.center("ab", 0, " ")); [EOL]     assertEquals("ab", StringUtils.center("ab", -1, " ")); [EOL]     assertEquals("ab", StringUtils.center("ab", 1, " ")); [EOL]     assertEquals("    ", StringUtils.center("", 4, " ")); [EOL]     assertEquals(" ab ", StringUtils.center("ab", 4, " ")); [EOL]     assertEquals("abcd", StringUtils.center("abcd", 2, " ")); [EOL]     assertEquals(" a  ", StringUtils.center("a", 4, " ")); [EOL]     assertEquals("yayz", StringUtils.center("a", 4, "yz")); [EOL]     assertEquals("yzyayzy", StringUtils.center("a", 7, "yz")); [EOL]     assertEquals("  abc  ", StringUtils.center("abc", 7, null)); [EOL]     assertEquals("  abc  ", StringUtils.center("abc", 7, "")); [EOL] }
@Test [EOL] public void testCenter_StringIntString() { [EOL]     assertEquals(null, StringUtils.center(null, 4, null)); [EOL]     assertEquals(null, StringUtils.center(null, -1, " ")); [EOL]     assertEquals(null, StringUtils.center(null, 4, " ")); [EOL]     assertEquals("    ", StringUtils.center("", 4, " ")); [EOL]     assertEquals("ab", StringUtils.center("ab", 0, " ")); [EOL]     assertEquals("ab", StringUtils.center("ab", -1, " ")); [EOL]     assertEquals("ab", StringUtils.center("ab", 1, " ")); [EOL]     assertEquals("    ", StringUtils.center("", 4, " ")); [EOL]     assertEquals(" ab ", StringUtils.center("ab", 4, " ")); [EOL]     assertEquals("abcd", StringUtils.center("abcd", 2, " ")); [EOL]     assertEquals(" a  ", StringUtils.center("a", 4, " ")); [EOL]     assertEquals("yayz", StringUtils.center("a", 4, "yz")); [EOL]     assertEquals("yzyayzy", StringUtils.center("a", 7, "yz")); [EOL]     assertEquals("  abc  ", StringUtils.center("abc", 7, null)); [EOL]     assertEquals("  abc  ", StringUtils.center("abc", 7, "")); [EOL] }
@Test [EOL] public void testCenter_StringIntString() { [EOL]     assertEquals(null, StringUtils.center(null, 4, null)); [EOL]     assertEquals(null, StringUtils.center(null, -1, " ")); [EOL]     assertEquals(null, StringUtils.center(null, 4, " ")); [EOL]     assertEquals("    ", StringUtils.center("", 4, " ")); [EOL]     assertEquals("ab", StringUtils.center("ab", 0, " ")); [EOL]     assertEquals("ab", StringUtils.center("ab", -1, " ")); [EOL]     assertEquals("ab", StringUtils.center("ab", 1, " ")); [EOL]     assertEquals("    ", StringUtils.center("", 4, " ")); [EOL]     assertEquals(" ab ", StringUtils.center("ab", 4, " ")); [EOL]     assertEquals("abcd", StringUtils.center("abcd", 2, " ")); [EOL]     assertEquals(" a  ", StringUtils.center("a", 4, " ")); [EOL]     assertEquals("yayz", StringUtils.center("a", 4, "yz")); [EOL]     assertEquals("yzyayzy", StringUtils.center("a", 7, "yz")); [EOL]     assertEquals("  abc  ", StringUtils.center("abc", 7, null)); [EOL]     assertEquals("  abc  ", StringUtils.center("abc", 7, "")); [EOL] }
@Test [EOL] public void testIsAlpha() { [EOL]     assertFalse(StringUtils.isAlpha(null)); [EOL]     assertFalse(StringUtils.isAlpha("")); [EOL]     assertFalse(StringUtils.isAlpha(" ")); [EOL]     assertTrue(StringUtils.isAlpha("a")); [EOL]     assertTrue(StringUtils.isAlpha("A")); [EOL]     assertTrue(StringUtils.isAlpha("kgKgKgKgkgkGkjkjlJlOKLgHdGdHgl")); [EOL]     assertFalse(StringUtils.isAlpha("ham kso")); [EOL]     assertFalse(StringUtils.isAlpha("1")); [EOL]     assertFalse(StringUtils.isAlpha("hkHKHik6iUGHKJgU7tUJgKJGI87GIkug")); [EOL]     assertFalse(StringUtils.isAlpha("_")); [EOL]     assertFalse(StringUtils.isAlpha("hkHKHik*khbkuh")); [EOL] }
@Test [EOL] public void testIsAlpha() { [EOL]     assertFalse(StringUtils.isAlpha(null)); [EOL]     assertFalse(StringUtils.isAlpha("")); [EOL]     assertFalse(StringUtils.isAlpha(" ")); [EOL]     assertTrue(StringUtils.isAlpha("a")); [EOL]     assertTrue(StringUtils.isAlpha("A")); [EOL]     assertTrue(StringUtils.isAlpha("kgKgKgKgkgkGkjkjlJlOKLgHdGdHgl")); [EOL]     assertFalse(StringUtils.isAlpha("ham kso")); [EOL]     assertFalse(StringUtils.isAlpha("1")); [EOL]     assertFalse(StringUtils.isAlpha("hkHKHik6iUGHKJgU7tUJgKJGI87GIkug")); [EOL]     assertFalse(StringUtils.isAlpha("_")); [EOL]     assertFalse(StringUtils.isAlpha("hkHKHik*khbkuh")); [EOL] }
@Test [EOL] public void testIsAlpha() { [EOL]     assertFalse(StringUtils.isAlpha(null)); [EOL]     assertFalse(StringUtils.isAlpha("")); [EOL]     assertFalse(StringUtils.isAlpha(" ")); [EOL]     assertTrue(StringUtils.isAlpha("a")); [EOL]     assertTrue(StringUtils.isAlpha("A")); [EOL]     assertTrue(StringUtils.isAlpha("kgKgKgKgkgkGkjkjlJlOKLgHdGdHgl")); [EOL]     assertFalse(StringUtils.isAlpha("ham kso")); [EOL]     assertFalse(StringUtils.isAlpha("1")); [EOL]     assertFalse(StringUtils.isAlpha("hkHKHik6iUGHKJgU7tUJgKJGI87GIkug")); [EOL]     assertFalse(StringUtils.isAlpha("_")); [EOL]     assertFalse(StringUtils.isAlpha("hkHKHik*khbkuh")); [EOL] }
@Test [EOL] public void testIsAlpha() { [EOL]     assertFalse(StringUtils.isAlpha(null)); [EOL]     assertFalse(StringUtils.isAlpha("")); [EOL]     assertFalse(StringUtils.isAlpha(" ")); [EOL]     assertTrue(StringUtils.isAlpha("a")); [EOL]     assertTrue(StringUtils.isAlpha("A")); [EOL]     assertTrue(StringUtils.isAlpha("kgKgKgKgkgkGkjkjlJlOKLgHdGdHgl")); [EOL]     assertFalse(StringUtils.isAlpha("ham kso")); [EOL]     assertFalse(StringUtils.isAlpha("1")); [EOL]     assertFalse(StringUtils.isAlpha("hkHKHik6iUGHKJgU7tUJgKJGI87GIkug")); [EOL]     assertFalse(StringUtils.isAlpha("_")); [EOL]     assertFalse(StringUtils.isAlpha("hkHKHik*khbkuh")); [EOL] }
@Test [EOL] public void testIsAlpha() { [EOL]     assertFalse(StringUtils.isAlpha(null)); [EOL]     assertFalse(StringUtils.isAlpha("")); [EOL]     assertFalse(StringUtils.isAlpha(" ")); [EOL]     assertTrue(StringUtils.isAlpha("a")); [EOL]     assertTrue(StringUtils.isAlpha("A")); [EOL]     assertTrue(StringUtils.isAlpha("kgKgKgKgkgkGkjkjlJlOKLgHdGdHgl")); [EOL]     assertFalse(StringUtils.isAlpha("ham kso")); [EOL]     assertFalse(StringUtils.isAlpha("1")); [EOL]     assertFalse(StringUtils.isAlpha("hkHKHik6iUGHKJgU7tUJgKJGI87GIkug")); [EOL]     assertFalse(StringUtils.isAlpha("_")); [EOL]     assertFalse(StringUtils.isAlpha("hkHKHik*khbkuh")); [EOL] }
@Test [EOL] public void testIsAsciiPrintable_String() { [EOL]     assertFalse(StringUtils.isAsciiPrintable(null)); [EOL]     assertTrue(StringUtils.isAsciiPrintable("")); [EOL]     assertTrue(StringUtils.isAsciiPrintable(" ")); [EOL]     assertTrue(StringUtils.isAsciiPrintable("a")); [EOL]     assertTrue(StringUtils.isAsciiPrintable("A")); [EOL]     assertTrue(StringUtils.isAsciiPrintable("1")); [EOL]     assertTrue(StringUtils.isAsciiPrintable("Ceki")); [EOL]     assertTrue(StringUtils.isAsciiPrintable("!ab2c~")); [EOL]     assertTrue(StringUtils.isAsciiPrintable("1000")); [EOL]     assertTrue(StringUtils.isAsciiPrintable("10 00")); [EOL]     assertFalse(StringUtils.isAsciiPrintable("10\t00")); [EOL]     assertTrue(StringUtils.isAsciiPrintable("10.00")); [EOL]     assertTrue(StringUtils.isAsciiPrintable("10,00")); [EOL]     assertTrue(StringUtils.isAsciiPrintable("!ab-c~")); [EOL]     assertTrue(StringUtils.isAsciiPrintable("hkHK=Hik6i?UGH_KJgU7.tUJgKJ*GI87GI,kug")); [EOL]     assertTrue(StringUtils.isAsciiPrintable("\u0020")); [EOL]     assertTrue(StringUtils.isAsciiPrintable("\u0021")); [EOL]     assertTrue(StringUtils.isAsciiPrintable("\u007e")); [EOL]     assertFalse(StringUtils.isAsciiPrintable("\u007f")); [EOL]     assertTrue(StringUtils.isAsciiPrintable("G?lc?")); [EOL]     assertTrue(StringUtils.isAsciiPrintable("=?iso-8859-1?Q?G=FClc=FC?=")); [EOL]     assertFalse(StringUtils.isAsciiPrintable("G\u00fclc\u00fc")); [EOL] }
@Test [EOL] public void testIsAsciiPrintable_String() { [EOL]     assertFalse(StringUtils.isAsciiPrintable(null)); [EOL]     assertTrue(StringUtils.isAsciiPrintable("")); [EOL]     assertTrue(StringUtils.isAsciiPrintable(" ")); [EOL]     assertTrue(StringUtils.isAsciiPrintable("a")); [EOL]     assertTrue(StringUtils.isAsciiPrintable("A")); [EOL]     assertTrue(StringUtils.isAsciiPrintable("1")); [EOL]     assertTrue(StringUtils.isAsciiPrintable("Ceki")); [EOL]     assertTrue(StringUtils.isAsciiPrintable("!ab2c~")); [EOL]     assertTrue(StringUtils.isAsciiPrintable("1000")); [EOL]     assertTrue(StringUtils.isAsciiPrintable("10 00")); [EOL]     assertFalse(StringUtils.isAsciiPrintable("10\t00")); [EOL]     assertTrue(StringUtils.isAsciiPrintable("10.00")); [EOL]     assertTrue(StringUtils.isAsciiPrintable("10,00")); [EOL]     assertTrue(StringUtils.isAsciiPrintable("!ab-c~")); [EOL]     assertTrue(StringUtils.isAsciiPrintable("hkHK=Hik6i?UGH_KJgU7.tUJgKJ*GI87GI,kug")); [EOL]     assertTrue(StringUtils.isAsciiPrintable("\u0020")); [EOL]     assertTrue(StringUtils.isAsciiPrintable("\u0021")); [EOL]     assertTrue(StringUtils.isAsciiPrintable("\u007e")); [EOL]     assertFalse(StringUtils.isAsciiPrintable("\u007f")); [EOL]     assertTrue(StringUtils.isAsciiPrintable("G?lc?")); [EOL]     assertTrue(StringUtils.isAsciiPrintable("=?iso-8859-1?Q?G=FClc=FC?=")); [EOL]     assertFalse(StringUtils.isAsciiPrintable("G\u00fclc\u00fc")); [EOL] }
@Test [EOL] public void testIsAsciiPrintable_String() { [EOL]     assertFalse(StringUtils.isAsciiPrintable(null)); [EOL]     assertTrue(StringUtils.isAsciiPrintable("")); [EOL]     assertTrue(StringUtils.isAsciiPrintable(" ")); [EOL]     assertTrue(StringUtils.isAsciiPrintable("a")); [EOL]     assertTrue(StringUtils.isAsciiPrintable("A")); [EOL]     assertTrue(StringUtils.isAsciiPrintable("1")); [EOL]     assertTrue(StringUtils.isAsciiPrintable("Ceki")); [EOL]     assertTrue(StringUtils.isAsciiPrintable("!ab2c~")); [EOL]     assertTrue(StringUtils.isAsciiPrintable("1000")); [EOL]     assertTrue(StringUtils.isAsciiPrintable("10 00")); [EOL]     assertFalse(StringUtils.isAsciiPrintable("10\t00")); [EOL]     assertTrue(StringUtils.isAsciiPrintable("10.00")); [EOL]     assertTrue(StringUtils.isAsciiPrintable("10,00")); [EOL]     assertTrue(StringUtils.isAsciiPrintable("!ab-c~")); [EOL]     assertTrue(StringUtils.isAsciiPrintable("hkHK=Hik6i?UGH_KJgU7.tUJgKJ*GI87GI,kug")); [EOL]     assertTrue(StringUtils.isAsciiPrintable("\u0020")); [EOL]     assertTrue(StringUtils.isAsciiPrintable("\u0021")); [EOL]     assertTrue(StringUtils.isAsciiPrintable("\u007e")); [EOL]     assertFalse(StringUtils.isAsciiPrintable("\u007f")); [EOL]     assertTrue(StringUtils.isAsciiPrintable("G?lc?")); [EOL]     assertTrue(StringUtils.isAsciiPrintable("=?iso-8859-1?Q?G=FClc=FC?=")); [EOL]     assertFalse(StringUtils.isAsciiPrintable("G\u00fclc\u00fc")); [EOL] }
@Test [EOL] public void testIsAsciiPrintable_String() { [EOL]     assertFalse(StringUtils.isAsciiPrintable(null)); [EOL]     assertTrue(StringUtils.isAsciiPrintable("")); [EOL]     assertTrue(StringUtils.isAsciiPrintable(" ")); [EOL]     assertTrue(StringUtils.isAsciiPrintable("a")); [EOL]     assertTrue(StringUtils.isAsciiPrintable("A")); [EOL]     assertTrue(StringUtils.isAsciiPrintable("1")); [EOL]     assertTrue(StringUtils.isAsciiPrintable("Ceki")); [EOL]     assertTrue(StringUtils.isAsciiPrintable("!ab2c~")); [EOL]     assertTrue(StringUtils.isAsciiPrintable("1000")); [EOL]     assertTrue(StringUtils.isAsciiPrintable("10 00")); [EOL]     assertFalse(StringUtils.isAsciiPrintable("10\t00")); [EOL]     assertTrue(StringUtils.isAsciiPrintable("10.00")); [EOL]     assertTrue(StringUtils.isAsciiPrintable("10,00")); [EOL]     assertTrue(StringUtils.isAsciiPrintable("!ab-c~")); [EOL]     assertTrue(StringUtils.isAsciiPrintable("hkHK=Hik6i?UGH_KJgU7.tUJgKJ*GI87GI,kug")); [EOL]     assertTrue(StringUtils.isAsciiPrintable("\u0020")); [EOL]     assertTrue(StringUtils.isAsciiPrintable("\u0021")); [EOL]     assertTrue(StringUtils.isAsciiPrintable("\u007e")); [EOL]     assertFalse(StringUtils.isAsciiPrintable("\u007f")); [EOL]     assertTrue(StringUtils.isAsciiPrintable("G?lc?")); [EOL]     assertTrue(StringUtils.isAsciiPrintable("=?iso-8859-1?Q?G=FClc=FC?=")); [EOL]     assertFalse(StringUtils.isAsciiPrintable("G\u00fclc\u00fc")); [EOL] }
@Test [EOL] public void testDefault_String() { [EOL]     assertEquals("", StringUtils.defaultString(null)); [EOL]     assertEquals("", StringUtils.defaultString("")); [EOL]     assertEquals("abc", StringUtils.defaultString("abc")); [EOL] }
@Test [EOL] public void testDefault_String() { [EOL]     assertEquals("", StringUtils.defaultString(null)); [EOL]     assertEquals("", StringUtils.defaultString("")); [EOL]     assertEquals("abc", StringUtils.defaultString("abc")); [EOL] }
@Test [EOL] public void testReverse_String() { [EOL]     assertEquals(null, StringUtils.reverse(null)); [EOL]     assertEquals("", StringUtils.reverse("")); [EOL]     assertEquals("sdrawkcab", StringUtils.reverse("backwards")); [EOL] }
@Test [EOL] public void testReverse_String() { [EOL]     assertEquals(null, StringUtils.reverse(null)); [EOL]     assertEquals("", StringUtils.reverse("")); [EOL]     assertEquals("sdrawkcab", StringUtils.reverse("backwards")); [EOL] }
@Test [EOL] public void testReverse_String() { [EOL]     assertEquals(null, StringUtils.reverse(null)); [EOL]     assertEquals("", StringUtils.reverse("")); [EOL]     assertEquals("sdrawkcab", StringUtils.reverse("backwards")); [EOL] }
@Test [EOL] public void testReverse_String() { [EOL]     assertEquals(null, StringUtils.reverse(null)); [EOL]     assertEquals("", StringUtils.reverse("")); [EOL]     assertEquals("sdrawkcab", StringUtils.reverse("backwards")); [EOL] }
@Test [EOL] public void testDifference_StringString() { [EOL]     assertEquals(null, StringUtils.difference(null, null)); [EOL]     assertEquals("", StringUtils.difference("", "")); [EOL]     assertEquals("abc", StringUtils.difference("", "abc")); [EOL]     assertEquals("", StringUtils.difference("abc", "")); [EOL]     assertEquals("i am a robot", StringUtils.difference(null, "i am a robot")); [EOL]     assertEquals("i am a machine", StringUtils.difference("i am a machine", null)); [EOL]     assertEquals("robot", StringUtils.difference("i am a machine", "i am a robot")); [EOL]     assertEquals("", StringUtils.difference("abc", "abc")); [EOL]     assertEquals("you are a robot", StringUtils.difference("i am a robot", "you are a robot")); [EOL] }
@Test [EOL] public void testDifference_StringString() { [EOL]     assertEquals(null, StringUtils.difference(null, null)); [EOL]     assertEquals("", StringUtils.difference("", "")); [EOL]     assertEquals("abc", StringUtils.difference("", "abc")); [EOL]     assertEquals("", StringUtils.difference("abc", "")); [EOL]     assertEquals("i am a robot", StringUtils.difference(null, "i am a robot")); [EOL]     assertEquals("i am a machine", StringUtils.difference("i am a machine", null)); [EOL]     assertEquals("robot", StringUtils.difference("i am a machine", "i am a robot")); [EOL]     assertEquals("", StringUtils.difference("abc", "abc")); [EOL]     assertEquals("you are a robot", StringUtils.difference("i am a robot", "you are a robot")); [EOL] }
@Test [EOL] public void testDifference_StringString() { [EOL]     assertEquals(null, StringUtils.difference(null, null)); [EOL]     assertEquals("", StringUtils.difference("", "")); [EOL]     assertEquals("abc", StringUtils.difference("", "abc")); [EOL]     assertEquals("", StringUtils.difference("abc", "")); [EOL]     assertEquals("i am a robot", StringUtils.difference(null, "i am a robot")); [EOL]     assertEquals("i am a machine", StringUtils.difference("i am a machine", null)); [EOL]     assertEquals("robot", StringUtils.difference("i am a machine", "i am a robot")); [EOL]     assertEquals("", StringUtils.difference("abc", "abc")); [EOL]     assertEquals("you are a robot", StringUtils.difference("i am a robot", "you are a robot")); [EOL] }
@Test [EOL] public void testDifference_StringString() { [EOL]     assertEquals(null, StringUtils.difference(null, null)); [EOL]     assertEquals("", StringUtils.difference("", "")); [EOL]     assertEquals("abc", StringUtils.difference("", "abc")); [EOL]     assertEquals("", StringUtils.difference("abc", "")); [EOL]     assertEquals("i am a robot", StringUtils.difference(null, "i am a robot")); [EOL]     assertEquals("i am a machine", StringUtils.difference("i am a machine", null)); [EOL]     assertEquals("robot", StringUtils.difference("i am a machine", "i am a robot")); [EOL]     assertEquals("", StringUtils.difference("abc", "abc")); [EOL]     assertEquals("you are a robot", StringUtils.difference("i am a robot", "you are a robot")); [EOL] }
@Test [EOL] public void testDifference_StringString() { [EOL]     assertEquals(null, StringUtils.difference(null, null)); [EOL]     assertEquals("", StringUtils.difference("", "")); [EOL]     assertEquals("abc", StringUtils.difference("", "abc")); [EOL]     assertEquals("", StringUtils.difference("abc", "")); [EOL]     assertEquals("i am a robot", StringUtils.difference(null, "i am a robot")); [EOL]     assertEquals("i am a machine", StringUtils.difference("i am a machine", null)); [EOL]     assertEquals("robot", StringUtils.difference("i am a machine", "i am a robot")); [EOL]     assertEquals("", StringUtils.difference("abc", "abc")); [EOL]     assertEquals("you are a robot", StringUtils.difference("i am a robot", "you are a robot")); [EOL] }
@Test [EOL] public void testDifference_StringString() { [EOL]     assertEquals(null, StringUtils.difference(null, null)); [EOL]     assertEquals("", StringUtils.difference("", "")); [EOL]     assertEquals("abc", StringUtils.difference("", "abc")); [EOL]     assertEquals("", StringUtils.difference("abc", "")); [EOL]     assertEquals("i am a robot", StringUtils.difference(null, "i am a robot")); [EOL]     assertEquals("i am a machine", StringUtils.difference("i am a machine", null)); [EOL]     assertEquals("robot", StringUtils.difference("i am a machine", "i am a robot")); [EOL]     assertEquals("", StringUtils.difference("abc", "abc")); [EOL]     assertEquals("you are a robot", StringUtils.difference("i am a robot", "you are a robot")); [EOL] }
@Test [EOL] public void testDifference_StringString() { [EOL]     assertEquals(null, StringUtils.difference(null, null)); [EOL]     assertEquals("", StringUtils.difference("", "")); [EOL]     assertEquals("abc", StringUtils.difference("", "abc")); [EOL]     assertEquals("", StringUtils.difference("abc", "")); [EOL]     assertEquals("i am a robot", StringUtils.difference(null, "i am a robot")); [EOL]     assertEquals("i am a machine", StringUtils.difference("i am a machine", null)); [EOL]     assertEquals("robot", StringUtils.difference("i am a machine", "i am a robot")); [EOL]     assertEquals("", StringUtils.difference("abc", "abc")); [EOL]     assertEquals("you are a robot", StringUtils.difference("i am a robot", "you are a robot")); [EOL] }
@Test [EOL] public void testDifference_StringString() { [EOL]     assertEquals(null, StringUtils.difference(null, null)); [EOL]     assertEquals("", StringUtils.difference("", "")); [EOL]     assertEquals("abc", StringUtils.difference("", "abc")); [EOL]     assertEquals("", StringUtils.difference("abc", "")); [EOL]     assertEquals("i am a robot", StringUtils.difference(null, "i am a robot")); [EOL]     assertEquals("i am a machine", StringUtils.difference("i am a machine", null)); [EOL]     assertEquals("robot", StringUtils.difference("i am a machine", "i am a robot")); [EOL]     assertEquals("", StringUtils.difference("abc", "abc")); [EOL]     assertEquals("you are a robot", StringUtils.difference("i am a robot", "you are a robot")); [EOL] }
@Test [EOL] public void testDifference_StringString() { [EOL]     assertEquals(null, StringUtils.difference(null, null)); [EOL]     assertEquals("", StringUtils.difference("", "")); [EOL]     assertEquals("abc", StringUtils.difference("", "abc")); [EOL]     assertEquals("", StringUtils.difference("abc", "")); [EOL]     assertEquals("i am a robot", StringUtils.difference(null, "i am a robot")); [EOL]     assertEquals("i am a machine", StringUtils.difference("i am a machine", null)); [EOL]     assertEquals("robot", StringUtils.difference("i am a machine", "i am a robot")); [EOL]     assertEquals("", StringUtils.difference("abc", "abc")); [EOL]     assertEquals("you are a robot", StringUtils.difference("i am a robot", "you are a robot")); [EOL] }
@Test [EOL] public void testDifference_StringString() { [EOL]     assertEquals(null, StringUtils.difference(null, null)); [EOL]     assertEquals("", StringUtils.difference("", "")); [EOL]     assertEquals("abc", StringUtils.difference("", "abc")); [EOL]     assertEquals("", StringUtils.difference("abc", "")); [EOL]     assertEquals("i am a robot", StringUtils.difference(null, "i am a robot")); [EOL]     assertEquals("i am a machine", StringUtils.difference("i am a machine", null)); [EOL]     assertEquals("robot", StringUtils.difference("i am a machine", "i am a robot")); [EOL]     assertEquals("", StringUtils.difference("abc", "abc")); [EOL]     assertEquals("you are a robot", StringUtils.difference("i am a robot", "you are a robot")); [EOL] }
@Test [EOL] public void testDifference_StringString() { [EOL]     assertEquals(null, StringUtils.difference(null, null)); [EOL]     assertEquals("", StringUtils.difference("", "")); [EOL]     assertEquals("abc", StringUtils.difference("", "abc")); [EOL]     assertEquals("", StringUtils.difference("abc", "")); [EOL]     assertEquals("i am a robot", StringUtils.difference(null, "i am a robot")); [EOL]     assertEquals("i am a machine", StringUtils.difference("i am a machine", null)); [EOL]     assertEquals("robot", StringUtils.difference("i am a machine", "i am a robot")); [EOL]     assertEquals("", StringUtils.difference("abc", "abc")); [EOL]     assertEquals("you are a robot", StringUtils.difference("i am a robot", "you are a robot")); [EOL] }
@Test [EOL] public void testDifference_StringString() { [EOL]     assertEquals(null, StringUtils.difference(null, null)); [EOL]     assertEquals("", StringUtils.difference("", "")); [EOL]     assertEquals("abc", StringUtils.difference("", "abc")); [EOL]     assertEquals("", StringUtils.difference("abc", "")); [EOL]     assertEquals("i am a robot", StringUtils.difference(null, "i am a robot")); [EOL]     assertEquals("i am a machine", StringUtils.difference("i am a machine", null)); [EOL]     assertEquals("robot", StringUtils.difference("i am a machine", "i am a robot")); [EOL]     assertEquals("", StringUtils.difference("abc", "abc")); [EOL]     assertEquals("you are a robot", StringUtils.difference("i am a robot", "you are a robot")); [EOL] }
@Test [EOL] public void testDifference_StringString() { [EOL]     assertEquals(null, StringUtils.difference(null, null)); [EOL]     assertEquals("", StringUtils.difference("", "")); [EOL]     assertEquals("abc", StringUtils.difference("", "abc")); [EOL]     assertEquals("", StringUtils.difference("abc", "")); [EOL]     assertEquals("i am a robot", StringUtils.difference(null, "i am a robot")); [EOL]     assertEquals("i am a machine", StringUtils.difference("i am a machine", null)); [EOL]     assertEquals("robot", StringUtils.difference("i am a machine", "i am a robot")); [EOL]     assertEquals("", StringUtils.difference("abc", "abc")); [EOL]     assertEquals("you are a robot", StringUtils.difference("i am a robot", "you are a robot")); [EOL] }
@Test [EOL] public void testDifference_StringString() { [EOL]     assertEquals(null, StringUtils.difference(null, null)); [EOL]     assertEquals("", StringUtils.difference("", "")); [EOL]     assertEquals("abc", StringUtils.difference("", "abc")); [EOL]     assertEquals("", StringUtils.difference("abc", "")); [EOL]     assertEquals("i am a robot", StringUtils.difference(null, "i am a robot")); [EOL]     assertEquals("i am a machine", StringUtils.difference("i am a machine", null)); [EOL]     assertEquals("robot", StringUtils.difference("i am a machine", "i am a robot")); [EOL]     assertEquals("", StringUtils.difference("abc", "abc")); [EOL]     assertEquals("you are a robot", StringUtils.difference("i am a robot", "you are a robot")); [EOL] }
@Test [EOL] public void testDifference_StringString() { [EOL]     assertEquals(null, StringUtils.difference(null, null)); [EOL]     assertEquals("", StringUtils.difference("", "")); [EOL]     assertEquals("abc", StringUtils.difference("", "abc")); [EOL]     assertEquals("", StringUtils.difference("abc", "")); [EOL]     assertEquals("i am a robot", StringUtils.difference(null, "i am a robot")); [EOL]     assertEquals("i am a machine", StringUtils.difference("i am a machine", null)); [EOL]     assertEquals("robot", StringUtils.difference("i am a machine", "i am a robot")); [EOL]     assertEquals("", StringUtils.difference("abc", "abc")); [EOL]     assertEquals("you are a robot", StringUtils.difference("i am a robot", "you are a robot")); [EOL] }
@Test [EOL] public void testPrependIfMissing() { [EOL]     assertEquals("prependIfMissing(null,null)", null, StringUtils.prependIfMissing(null, null)); [EOL]     assertEquals("prependIfMissing(abc,null)", "abc", StringUtils.prependIfMissing("abc", null)); [EOL]     assertEquals("prependIfMissing(\"\",xyz)", "xyz", StringUtils.prependIfMissing("", "xyz")); [EOL]     assertEquals("prependIfMissing(abc,xyz)", "xyzabc", StringUtils.prependIfMissing("abc", "xyz")); [EOL]     assertEquals("prependIfMissing(xyzabc,xyz)", "xyzabc", StringUtils.prependIfMissing("xyzabc", "xyz")); [EOL]     assertEquals("prependIfMissing(XYZabc,xyz)", "xyzXYZabc", StringUtils.prependIfMissing("XYZabc", "xyz")); [EOL]     assertEquals("prependIfMissing(null,null null)", null, StringUtils.prependIfMissing(null, null, (CharSequence[]) null)); [EOL]     assertEquals("prependIfMissing(abc,null,null)", "abc", StringUtils.prependIfMissing("abc", null, (CharSequence[]) null)); [EOL]     assertEquals("prependIfMissing(\"\",xyz,null)", "xyz", StringUtils.prependIfMissing("", "xyz", (CharSequence[]) null)); [EOL]     assertEquals("prependIfMissing(abc,xyz,{null})", "xyzabc", StringUtils.prependIfMissing("abc", "xyz", new CharSequence[] { null })); [EOL]     assertEquals("prependIfMissing(abc,xyz,\"\")", "abc", StringUtils.prependIfMissing("abc", "xyz", "")); [EOL]     assertEquals("prependIfMissing(abc,xyz,mno)", "xyzabc", StringUtils.prependIfMissing("abc", "xyz", "mno")); [EOL]     assertEquals("prependIfMissing(xyzabc,xyz,mno)", "xyzabc", StringUtils.prependIfMissing("xyzabc", "xyz", "mno")); [EOL]     assertEquals("prependIfMissing(mnoabc,xyz,mno)", "mnoabc", StringUtils.prependIfMissing("mnoabc", "xyz", "mno")); [EOL]     assertEquals("prependIfMissing(XYZabc,xyz,mno)", "xyzXYZabc", StringUtils.prependIfMissing("XYZabc", "xyz", "mno")); [EOL]     assertEquals("prependIfMissing(MNOabc,xyz,mno)", "xyzMNOabc", StringUtils.prependIfMissing("MNOabc", "xyz", "mno")); [EOL] }
@Test [EOL] public void testPrependIfMissing() { [EOL]     assertEquals("prependIfMissing(null,null)", null, StringUtils.prependIfMissing(null, null)); [EOL]     assertEquals("prependIfMissing(abc,null)", "abc", StringUtils.prependIfMissing("abc", null)); [EOL]     assertEquals("prependIfMissing(\"\",xyz)", "xyz", StringUtils.prependIfMissing("", "xyz")); [EOL]     assertEquals("prependIfMissing(abc,xyz)", "xyzabc", StringUtils.prependIfMissing("abc", "xyz")); [EOL]     assertEquals("prependIfMissing(xyzabc,xyz)", "xyzabc", StringUtils.prependIfMissing("xyzabc", "xyz")); [EOL]     assertEquals("prependIfMissing(XYZabc,xyz)", "xyzXYZabc", StringUtils.prependIfMissing("XYZabc", "xyz")); [EOL]     assertEquals("prependIfMissing(null,null null)", null, StringUtils.prependIfMissing(null, null, (CharSequence[]) null)); [EOL]     assertEquals("prependIfMissing(abc,null,null)", "abc", StringUtils.prependIfMissing("abc", null, (CharSequence[]) null)); [EOL]     assertEquals("prependIfMissing(\"\",xyz,null)", "xyz", StringUtils.prependIfMissing("", "xyz", (CharSequence[]) null)); [EOL]     assertEquals("prependIfMissing(abc,xyz,{null})", "xyzabc", StringUtils.prependIfMissing("abc", "xyz", new CharSequence[] { null })); [EOL]     assertEquals("prependIfMissing(abc,xyz,\"\")", "abc", StringUtils.prependIfMissing("abc", "xyz", "")); [EOL]     assertEquals("prependIfMissing(abc,xyz,mno)", "xyzabc", StringUtils.prependIfMissing("abc", "xyz", "mno")); [EOL]     assertEquals("prependIfMissing(xyzabc,xyz,mno)", "xyzabc", StringUtils.prependIfMissing("xyzabc", "xyz", "mno")); [EOL]     assertEquals("prependIfMissing(mnoabc,xyz,mno)", "mnoabc", StringUtils.prependIfMissing("mnoabc", "xyz", "mno")); [EOL]     assertEquals("prependIfMissing(XYZabc,xyz,mno)", "xyzXYZabc", StringUtils.prependIfMissing("XYZabc", "xyz", "mno")); [EOL]     assertEquals("prependIfMissing(MNOabc,xyz,mno)", "xyzMNOabc", StringUtils.prependIfMissing("MNOabc", "xyz", "mno")); [EOL] }
@Test [EOL] public void testPrependIfMissing() { [EOL]     assertEquals("prependIfMissing(null,null)", null, StringUtils.prependIfMissing(null, null)); [EOL]     assertEquals("prependIfMissing(abc,null)", "abc", StringUtils.prependIfMissing("abc", null)); [EOL]     assertEquals("prependIfMissing(\"\",xyz)", "xyz", StringUtils.prependIfMissing("", "xyz")); [EOL]     assertEquals("prependIfMissing(abc,xyz)", "xyzabc", StringUtils.prependIfMissing("abc", "xyz")); [EOL]     assertEquals("prependIfMissing(xyzabc,xyz)", "xyzabc", StringUtils.prependIfMissing("xyzabc", "xyz")); [EOL]     assertEquals("prependIfMissing(XYZabc,xyz)", "xyzXYZabc", StringUtils.prependIfMissing("XYZabc", "xyz")); [EOL]     assertEquals("prependIfMissing(null,null null)", null, StringUtils.prependIfMissing(null, null, (CharSequence[]) null)); [EOL]     assertEquals("prependIfMissing(abc,null,null)", "abc", StringUtils.prependIfMissing("abc", null, (CharSequence[]) null)); [EOL]     assertEquals("prependIfMissing(\"\",xyz,null)", "xyz", StringUtils.prependIfMissing("", "xyz", (CharSequence[]) null)); [EOL]     assertEquals("prependIfMissing(abc,xyz,{null})", "xyzabc", StringUtils.prependIfMissing("abc", "xyz", new CharSequence[] { null })); [EOL]     assertEquals("prependIfMissing(abc,xyz,\"\")", "abc", StringUtils.prependIfMissing("abc", "xyz", "")); [EOL]     assertEquals("prependIfMissing(abc,xyz,mno)", "xyzabc", StringUtils.prependIfMissing("abc", "xyz", "mno")); [EOL]     assertEquals("prependIfMissing(xyzabc,xyz,mno)", "xyzabc", StringUtils.prependIfMissing("xyzabc", "xyz", "mno")); [EOL]     assertEquals("prependIfMissing(mnoabc,xyz,mno)", "mnoabc", StringUtils.prependIfMissing("mnoabc", "xyz", "mno")); [EOL]     assertEquals("prependIfMissing(XYZabc,xyz,mno)", "xyzXYZabc", StringUtils.prependIfMissing("XYZabc", "xyz", "mno")); [EOL]     assertEquals("prependIfMissing(MNOabc,xyz,mno)", "xyzMNOabc", StringUtils.prependIfMissing("MNOabc", "xyz", "mno")); [EOL] }
@Test [EOL] public void testPrependIfMissing() { [EOL]     assertEquals("prependIfMissing(null,null)", null, StringUtils.prependIfMissing(null, null)); [EOL]     assertEquals("prependIfMissing(abc,null)", "abc", StringUtils.prependIfMissing("abc", null)); [EOL]     assertEquals("prependIfMissing(\"\",xyz)", "xyz", StringUtils.prependIfMissing("", "xyz")); [EOL]     assertEquals("prependIfMissing(abc,xyz)", "xyzabc", StringUtils.prependIfMissing("abc", "xyz")); [EOL]     assertEquals("prependIfMissing(xyzabc,xyz)", "xyzabc", StringUtils.prependIfMissing("xyzabc", "xyz")); [EOL]     assertEquals("prependIfMissing(XYZabc,xyz)", "xyzXYZabc", StringUtils.prependIfMissing("XYZabc", "xyz")); [EOL]     assertEquals("prependIfMissing(null,null null)", null, StringUtils.prependIfMissing(null, null, (CharSequence[]) null)); [EOL]     assertEquals("prependIfMissing(abc,null,null)", "abc", StringUtils.prependIfMissing("abc", null, (CharSequence[]) null)); [EOL]     assertEquals("prependIfMissing(\"\",xyz,null)", "xyz", StringUtils.prependIfMissing("", "xyz", (CharSequence[]) null)); [EOL]     assertEquals("prependIfMissing(abc,xyz,{null})", "xyzabc", StringUtils.prependIfMissing("abc", "xyz", new CharSequence[] { null })); [EOL]     assertEquals("prependIfMissing(abc,xyz,\"\")", "abc", StringUtils.prependIfMissing("abc", "xyz", "")); [EOL]     assertEquals("prependIfMissing(abc,xyz,mno)", "xyzabc", StringUtils.prependIfMissing("abc", "xyz", "mno")); [EOL]     assertEquals("prependIfMissing(xyzabc,xyz,mno)", "xyzabc", StringUtils.prependIfMissing("xyzabc", "xyz", "mno")); [EOL]     assertEquals("prependIfMissing(mnoabc,xyz,mno)", "mnoabc", StringUtils.prependIfMissing("mnoabc", "xyz", "mno")); [EOL]     assertEquals("prependIfMissing(XYZabc,xyz,mno)", "xyzXYZabc", StringUtils.prependIfMissing("XYZabc", "xyz", "mno")); [EOL]     assertEquals("prependIfMissing(MNOabc,xyz,mno)", "xyzMNOabc", StringUtils.prependIfMissing("MNOabc", "xyz", "mno")); [EOL] }
@Test [EOL] public void testPrependIfMissing() { [EOL]     assertEquals("prependIfMissing(null,null)", null, StringUtils.prependIfMissing(null, null)); [EOL]     assertEquals("prependIfMissing(abc,null)", "abc", StringUtils.prependIfMissing("abc", null)); [EOL]     assertEquals("prependIfMissing(\"\",xyz)", "xyz", StringUtils.prependIfMissing("", "xyz")); [EOL]     assertEquals("prependIfMissing(abc,xyz)", "xyzabc", StringUtils.prependIfMissing("abc", "xyz")); [EOL]     assertEquals("prependIfMissing(xyzabc,xyz)", "xyzabc", StringUtils.prependIfMissing("xyzabc", "xyz")); [EOL]     assertEquals("prependIfMissing(XYZabc,xyz)", "xyzXYZabc", StringUtils.prependIfMissing("XYZabc", "xyz")); [EOL]     assertEquals("prependIfMissing(null,null null)", null, StringUtils.prependIfMissing(null, null, (CharSequence[]) null)); [EOL]     assertEquals("prependIfMissing(abc,null,null)", "abc", StringUtils.prependIfMissing("abc", null, (CharSequence[]) null)); [EOL]     assertEquals("prependIfMissing(\"\",xyz,null)", "xyz", StringUtils.prependIfMissing("", "xyz", (CharSequence[]) null)); [EOL]     assertEquals("prependIfMissing(abc,xyz,{null})", "xyzabc", StringUtils.prependIfMissing("abc", "xyz", new CharSequence[] { null })); [EOL]     assertEquals("prependIfMissing(abc,xyz,\"\")", "abc", StringUtils.prependIfMissing("abc", "xyz", "")); [EOL]     assertEquals("prependIfMissing(abc,xyz,mno)", "xyzabc", StringUtils.prependIfMissing("abc", "xyz", "mno")); [EOL]     assertEquals("prependIfMissing(xyzabc,xyz,mno)", "xyzabc", StringUtils.prependIfMissing("xyzabc", "xyz", "mno")); [EOL]     assertEquals("prependIfMissing(mnoabc,xyz,mno)", "mnoabc", StringUtils.prependIfMissing("mnoabc", "xyz", "mno")); [EOL]     assertEquals("prependIfMissing(XYZabc,xyz,mno)", "xyzXYZabc", StringUtils.prependIfMissing("XYZabc", "xyz", "mno")); [EOL]     assertEquals("prependIfMissing(MNOabc,xyz,mno)", "xyzMNOabc", StringUtils.prependIfMissing("MNOabc", "xyz", "mno")); [EOL] }
@Test [EOL] public void testPrependIfMissing() { [EOL]     assertEquals("prependIfMissing(null,null)", null, StringUtils.prependIfMissing(null, null)); [EOL]     assertEquals("prependIfMissing(abc,null)", "abc", StringUtils.prependIfMissing("abc", null)); [EOL]     assertEquals("prependIfMissing(\"\",xyz)", "xyz", StringUtils.prependIfMissing("", "xyz")); [EOL]     assertEquals("prependIfMissing(abc,xyz)", "xyzabc", StringUtils.prependIfMissing("abc", "xyz")); [EOL]     assertEquals("prependIfMissing(xyzabc,xyz)", "xyzabc", StringUtils.prependIfMissing("xyzabc", "xyz")); [EOL]     assertEquals("prependIfMissing(XYZabc,xyz)", "xyzXYZabc", StringUtils.prependIfMissing("XYZabc", "xyz")); [EOL]     assertEquals("prependIfMissing(null,null null)", null, StringUtils.prependIfMissing(null, null, (CharSequence[]) null)); [EOL]     assertEquals("prependIfMissing(abc,null,null)", "abc", StringUtils.prependIfMissing("abc", null, (CharSequence[]) null)); [EOL]     assertEquals("prependIfMissing(\"\",xyz,null)", "xyz", StringUtils.prependIfMissing("", "xyz", (CharSequence[]) null)); [EOL]     assertEquals("prependIfMissing(abc,xyz,{null})", "xyzabc", StringUtils.prependIfMissing("abc", "xyz", new CharSequence[] { null })); [EOL]     assertEquals("prependIfMissing(abc,xyz,\"\")", "abc", StringUtils.prependIfMissing("abc", "xyz", "")); [EOL]     assertEquals("prependIfMissing(abc,xyz,mno)", "xyzabc", StringUtils.prependIfMissing("abc", "xyz", "mno")); [EOL]     assertEquals("prependIfMissing(xyzabc,xyz,mno)", "xyzabc", StringUtils.prependIfMissing("xyzabc", "xyz", "mno")); [EOL]     assertEquals("prependIfMissing(mnoabc,xyz,mno)", "mnoabc", StringUtils.prependIfMissing("mnoabc", "xyz", "mno")); [EOL]     assertEquals("prependIfMissing(XYZabc,xyz,mno)", "xyzXYZabc", StringUtils.prependIfMissing("XYZabc", "xyz", "mno")); [EOL]     assertEquals("prependIfMissing(MNOabc,xyz,mno)", "xyzMNOabc", StringUtils.prependIfMissing("MNOabc", "xyz", "mno")); [EOL] }
@Test [EOL] public void testPrependIfMissing() { [EOL]     assertEquals("prependIfMissing(null,null)", null, StringUtils.prependIfMissing(null, null)); [EOL]     assertEquals("prependIfMissing(abc,null)", "abc", StringUtils.prependIfMissing("abc", null)); [EOL]     assertEquals("prependIfMissing(\"\",xyz)", "xyz", StringUtils.prependIfMissing("", "xyz")); [EOL]     assertEquals("prependIfMissing(abc,xyz)", "xyzabc", StringUtils.prependIfMissing("abc", "xyz")); [EOL]     assertEquals("prependIfMissing(xyzabc,xyz)", "xyzabc", StringUtils.prependIfMissing("xyzabc", "xyz")); [EOL]     assertEquals("prependIfMissing(XYZabc,xyz)", "xyzXYZabc", StringUtils.prependIfMissing("XYZabc", "xyz")); [EOL]     assertEquals("prependIfMissing(null,null null)", null, StringUtils.prependIfMissing(null, null, (CharSequence[]) null)); [EOL]     assertEquals("prependIfMissing(abc,null,null)", "abc", StringUtils.prependIfMissing("abc", null, (CharSequence[]) null)); [EOL]     assertEquals("prependIfMissing(\"\",xyz,null)", "xyz", StringUtils.prependIfMissing("", "xyz", (CharSequence[]) null)); [EOL]     assertEquals("prependIfMissing(abc,xyz,{null})", "xyzabc", StringUtils.prependIfMissing("abc", "xyz", new CharSequence[] { null })); [EOL]     assertEquals("prependIfMissing(abc,xyz,\"\")", "abc", StringUtils.prependIfMissing("abc", "xyz", "")); [EOL]     assertEquals("prependIfMissing(abc,xyz,mno)", "xyzabc", StringUtils.prependIfMissing("abc", "xyz", "mno")); [EOL]     assertEquals("prependIfMissing(xyzabc,xyz,mno)", "xyzabc", StringUtils.prependIfMissing("xyzabc", "xyz", "mno")); [EOL]     assertEquals("prependIfMissing(mnoabc,xyz,mno)", "mnoabc", StringUtils.prependIfMissing("mnoabc", "xyz", "mno")); [EOL]     assertEquals("prependIfMissing(XYZabc,xyz,mno)", "xyzXYZabc", StringUtils.prependIfMissing("XYZabc", "xyz", "mno")); [EOL]     assertEquals("prependIfMissing(MNOabc,xyz,mno)", "xyzMNOabc", StringUtils.prependIfMissing("MNOabc", "xyz", "mno")); [EOL] }
@Test [EOL] public void testConstructors() { [EOL]     assertEquals(0d, new MutableDouble().doubleValue(), 0.0001d); [EOL]     assertEquals(1d, new MutableDouble(1d).doubleValue(), 0.0001d); [EOL]     assertEquals(2d, new MutableDouble(Double.valueOf(2d)).doubleValue(), 0.0001d); [EOL]     assertEquals(3d, new MutableDouble(new MutableDouble(3d)).doubleValue(), 0.0001d); [EOL]     assertEquals(2d, new MutableDouble("2.0").doubleValue(), 0.0001d); [EOL] }
@Test [EOL] public void testConstructors() { [EOL]     assertEquals(0d, new MutableDouble().doubleValue(), 0.0001d); [EOL]     assertEquals(1d, new MutableDouble(1d).doubleValue(), 0.0001d); [EOL]     assertEquals(2d, new MutableDouble(Double.valueOf(2d)).doubleValue(), 0.0001d); [EOL]     assertEquals(3d, new MutableDouble(new MutableDouble(3d)).doubleValue(), 0.0001d); [EOL]     assertEquals(2d, new MutableDouble("2.0").doubleValue(), 0.0001d); [EOL] }
@Test [EOL] public void testConstructors() { [EOL]     assertEquals(0d, new MutableDouble().doubleValue(), 0.0001d); [EOL]     assertEquals(1d, new MutableDouble(1d).doubleValue(), 0.0001d); [EOL]     assertEquals(2d, new MutableDouble(Double.valueOf(2d)).doubleValue(), 0.0001d); [EOL]     assertEquals(3d, new MutableDouble(new MutableDouble(3d)).doubleValue(), 0.0001d); [EOL]     assertEquals(2d, new MutableDouble("2.0").doubleValue(), 0.0001d); [EOL] }
@Test [EOL] public void testConstructors() { [EOL]     assertEquals(0d, new MutableDouble().doubleValue(), 0.0001d); [EOL]     assertEquals(1d, new MutableDouble(1d).doubleValue(), 0.0001d); [EOL]     assertEquals(2d, new MutableDouble(Double.valueOf(2d)).doubleValue(), 0.0001d); [EOL]     assertEquals(3d, new MutableDouble(new MutableDouble(3d)).doubleValue(), 0.0001d); [EOL]     assertEquals(2d, new MutableDouble("2.0").doubleValue(), 0.0001d); [EOL] }
@Test [EOL] public void testConstructors() { [EOL]     assertEquals(0d, new MutableDouble().doubleValue(), 0.0001d); [EOL]     assertEquals(1d, new MutableDouble(1d).doubleValue(), 0.0001d); [EOL]     assertEquals(2d, new MutableDouble(Double.valueOf(2d)).doubleValue(), 0.0001d); [EOL]     assertEquals(3d, new MutableDouble(new MutableDouble(3d)).doubleValue(), 0.0001d); [EOL]     assertEquals(2d, new MutableDouble("2.0").doubleValue(), 0.0001d); [EOL] }
@Test [EOL] public void testConstructors() { [EOL]     assertEquals(0d, new MutableDouble().doubleValue(), 0.0001d); [EOL]     assertEquals(1d, new MutableDouble(1d).doubleValue(), 0.0001d); [EOL]     assertEquals(2d, new MutableDouble(Double.valueOf(2d)).doubleValue(), 0.0001d); [EOL]     assertEquals(3d, new MutableDouble(new MutableDouble(3d)).doubleValue(), 0.0001d); [EOL]     assertEquals(2d, new MutableDouble("2.0").doubleValue(), 0.0001d); [EOL] }
@Test [EOL] public void testConstructors() { [EOL]     assertEquals(0d, new MutableDouble().doubleValue(), 0.0001d); [EOL]     assertEquals(1d, new MutableDouble(1d).doubleValue(), 0.0001d); [EOL]     assertEquals(2d, new MutableDouble(Double.valueOf(2d)).doubleValue(), 0.0001d); [EOL]     assertEquals(3d, new MutableDouble(new MutableDouble(3d)).doubleValue(), 0.0001d); [EOL]     assertEquals(2d, new MutableDouble("2.0").doubleValue(), 0.0001d); [EOL] }
@Test [EOL] public void testGetSet() { [EOL]     final MutableDouble mutNum = new MutableDouble(0d); [EOL]     assertEquals(0d, new MutableDouble().doubleValue(), 0.0001d); [EOL]     assertEquals(Double.valueOf(0), new MutableDouble().getValue()); [EOL]     mutNum.setValue(1); [EOL]     assertEquals(1d, mutNum.doubleValue(), 0.0001d); [EOL]     assertEquals(Double.valueOf(1d), mutNum.getValue()); [EOL]     mutNum.setValue(Double.valueOf(2d)); [EOL]     assertEquals(2d, mutNum.doubleValue(), 0.0001d); [EOL]     assertEquals(Double.valueOf(2d), mutNum.getValue()); [EOL]     mutNum.setValue(new MutableDouble(3d)); [EOL]     assertEquals(3d, mutNum.doubleValue(), 0.0001d); [EOL]     assertEquals(Double.valueOf(3d), mutNum.getValue()); [EOL] }
@Test [EOL] public void testGetSet() { [EOL]     final MutableDouble mutNum = new MutableDouble(0d); [EOL]     assertEquals(0d, new MutableDouble().doubleValue(), 0.0001d); [EOL]     assertEquals(Double.valueOf(0), new MutableDouble().getValue()); [EOL]     mutNum.setValue(1); [EOL]     assertEquals(1d, mutNum.doubleValue(), 0.0001d); [EOL]     assertEquals(Double.valueOf(1d), mutNum.getValue()); [EOL]     mutNum.setValue(Double.valueOf(2d)); [EOL]     assertEquals(2d, mutNum.doubleValue(), 0.0001d); [EOL]     assertEquals(Double.valueOf(2d), mutNum.getValue()); [EOL]     mutNum.setValue(new MutableDouble(3d)); [EOL]     assertEquals(3d, mutNum.doubleValue(), 0.0001d); [EOL]     assertEquals(Double.valueOf(3d), mutNum.getValue()); [EOL] }
@Test [EOL] public void testUnescapeHtml4() { [EOL]     for (int i = 0; i < HTML_ESCAPES.length; ++i) { [EOL]         final String message = HTML_ESCAPES[i][0]; [EOL]         final String expected = HTML_ESCAPES[i][2]; [EOL]         final String original = HTML_ESCAPES[i][1]; [EOL]         assertEquals(message, expected, StringEscapeUtils.unescapeHtml4(original)); [EOL]         final StringWriter sw = new StringWriter(); [EOL]         try { [EOL]             StringEscapeUtils.UNESCAPE_HTML4.translate(original, sw); [EOL]         } catch (final IOException e) { [EOL]         } [EOL]         final String actual = original == null ? null : sw.toString(); [EOL]         assertEquals(message, expected, actual); [EOL]     } [EOL]     assertEquals("funny chars pass through OK", "Fran\u00E7ais", StringEscapeUtils.unescapeHtml4("Fran\u00E7ais")); [EOL]     assertEquals("Hello&;World", StringEscapeUtils.unescapeHtml4("Hello&;World")); [EOL]     assertEquals("Hello&#;World", StringEscapeUtils.unescapeHtml4("Hello&#;World")); [EOL]     assertEquals("Hello&# ;World", StringEscapeUtils.unescapeHtml4("Hello&# ;World")); [EOL]     assertEquals("Hello&##;World", StringEscapeUtils.unescapeHtml4("Hello&##;World")); [EOL] }
@Test [EOL] public void testLongArray() { [EOL]     long[] array = new long[] { 1, 2, -3, 4 }; [EOL]     assertEquals(baseStr + "[{1,2,-3,4}]", new ToStringBuilder(base).append(array).toString()); [EOL]     assertEquals(baseStr + "[{1,2,-3,4}]", new ToStringBuilder(base).append((Object) array).toString()); [EOL]     array = null; [EOL]     assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); [EOL]     assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); [EOL] }
@Test [EOL] public void testLongArray() { [EOL]     long[] array = new long[] { 1, 2, -3, 4 }; [EOL]     assertEquals(baseStr + "[{1,2,-3,4}]", new ToStringBuilder(base).append(array).toString()); [EOL]     assertEquals(baseStr + "[{1,2,-3,4}]", new ToStringBuilder(base).append((Object) array).toString()); [EOL]     array = null; [EOL]     assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); [EOL]     assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); [EOL] }
@Test [EOL] public void testLongArray() { [EOL]     long[] array = new long[] { 1, 2, -3, 4 }; [EOL]     assertEquals(baseStr + "[{1,2,-3,4}]", new ToStringBuilder(base).append(array).toString()); [EOL]     assertEquals(baseStr + "[{1,2,-3,4}]", new ToStringBuilder(base).append((Object) array).toString()); [EOL]     array = null; [EOL]     assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); [EOL]     assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); [EOL] }
@Test [EOL] public void testLongArray() { [EOL]     long[] array = new long[] { 1, 2, -3, 4 }; [EOL]     assertEquals(baseStr + "[{1,2,-3,4}]", new ToStringBuilder(base).append(array).toString()); [EOL]     assertEquals(baseStr + "[{1,2,-3,4}]", new ToStringBuilder(base).append((Object) array).toString()); [EOL]     array = null; [EOL]     assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); [EOL]     assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); [EOL] }
@Test [EOL] public void testLongArray() { [EOL]     long[] array = new long[] { 1, 2, -3, 4 }; [EOL]     assertEquals(baseStr + "[{1,2,-3,4}]", new ToStringBuilder(base).append(array).toString()); [EOL]     assertEquals(baseStr + "[{1,2,-3,4}]", new ToStringBuilder(base).append((Object) array).toString()); [EOL]     array = null; [EOL]     assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); [EOL]     assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); [EOL] }
@Test [EOL] public void testLongArray() { [EOL]     long[] array = new long[] { 1, 2, -3, 4 }; [EOL]     assertEquals(baseStr + "[{1,2,-3,4}]", new ToStringBuilder(base).append(array).toString()); [EOL]     assertEquals(baseStr + "[{1,2,-3,4}]", new ToStringBuilder(base).append((Object) array).toString()); [EOL]     array = null; [EOL]     assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); [EOL]     assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); [EOL] }
@Test [EOL] public void testSetSummaryObjectEndText() { [EOL]     final ToStringStyle style = new ToStringStyleImpl(); [EOL]     style.setSummaryObjectEndText(null); [EOL]     assertEquals("", style.getSummaryObjectEndText()); [EOL] }
@Test [EOL] public void testLongArray() { [EOL]     long[] array = new long[] { 1, 2, -3, 4 }; [EOL]     assertEquals(baseStr + "[{1,2,-3,4}]", new ToStringBuilder(base).append(array).toString()); [EOL]     assertEquals(baseStr + "[{1,2,-3,4}]", new ToStringBuilder(base).append((Object) array).toString()); [EOL]     array = null; [EOL]     assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); [EOL]     assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); [EOL] }
@Test [EOL] public void testLongArray() { [EOL]     long[] array = new long[] { 1, 2, -3, 4 }; [EOL]     assertEquals(baseStr + "[{1,2,-3,4}]", new ToStringBuilder(base).append(array).toString()); [EOL]     assertEquals(baseStr + "[{1,2,-3,4}]", new ToStringBuilder(base).append((Object) array).toString()); [EOL]     array = null; [EOL]     assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); [EOL]     assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); [EOL] }
@Test [EOL] public void testLongArray() { [EOL]     long[] array = new long[] { 1, 2, -3, 4 }; [EOL]     assertEquals(baseStr + "[{1,2,-3,4}]", new ToStringBuilder(base).append(array).toString()); [EOL]     assertEquals(baseStr + "[{1,2,-3,4}]", new ToStringBuilder(base).append((Object) array).toString()); [EOL]     array = null; [EOL]     assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); [EOL]     assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); [EOL] }
@Test [EOL] public void testLongArray() { [EOL]     long[] array = new long[] { 1, 2, -3, 4 }; [EOL]     assertEquals(baseStr + "[{1,2,-3,4}]", new ToStringBuilder(base).append(array).toString()); [EOL]     assertEquals(baseStr + "[{1,2,-3,4}]", new ToStringBuilder(base).append((Object) array).toString()); [EOL]     array = null; [EOL]     assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); [EOL]     assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); [EOL] }
@Test [EOL] public void testLongArray() { [EOL]     long[] array = new long[] { 1, 2, -3, 4 }; [EOL]     assertEquals(baseStr + "[{1,2,-3,4}]", new ToStringBuilder(base).append(array).toString()); [EOL]     assertEquals(baseStr + "[{1,2,-3,4}]", new ToStringBuilder(base).append((Object) array).toString()); [EOL]     array = null; [EOL]     assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); [EOL]     assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); [EOL] }
@Test [EOL] public void testLongArray() { [EOL]     long[] array = new long[] { 1, 2, -3, 4 }; [EOL]     assertEquals(baseStr + "[{1,2,-3,4}]", new ToStringBuilder(base).append(array).toString()); [EOL]     assertEquals(baseStr + "[{1,2,-3,4}]", new ToStringBuilder(base).append((Object) array).toString()); [EOL]     array = null; [EOL]     assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); [EOL]     assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); [EOL] }
@Test [EOL] public void testLongArray() { [EOL]     long[] array = new long[] { 1, 2, -3, 4 }; [EOL]     assertEquals(baseStr + "[{1,2,-3,4}]", new ToStringBuilder(base).append(array).toString()); [EOL]     assertEquals(baseStr + "[{1,2,-3,4}]", new ToStringBuilder(base).append((Object) array).toString()); [EOL]     array = null; [EOL]     assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); [EOL]     assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); [EOL] }
@Test [EOL] public void testLongArray() { [EOL]     long[] array = new long[] { 1, 2, -3, 4 }; [EOL]     assertEquals(baseStr + "[{1,2,-3,4}]", new ToStringBuilder(base).append(array).toString()); [EOL]     assertEquals(baseStr + "[{1,2,-3,4}]", new ToStringBuilder(base).append((Object) array).toString()); [EOL]     array = null; [EOL]     assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); [EOL]     assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); [EOL] }
@Test [EOL] public void testObject() { [EOL]     final Integer i3 = Integer.valueOf(3); [EOL]     final Integer i4 = Integer.valueOf(4); [EOL]     assertEquals("<null>", new ToStringBuilder(base).append((Object) null).toString()); [EOL]     assertEquals("3", new ToStringBuilder(base).append(i3).toString()); [EOL]     assertEquals("<null>", new ToStringBuilder(base).append("a", (Object) null).toString()); [EOL]     assertEquals("3", new ToStringBuilder(base).append("a", i3).toString()); [EOL]     assertEquals("3,4", new ToStringBuilder(base).append("a", i3).append("b", i4).toString()); [EOL]     assertEquals("<Integer>", new ToStringBuilder(base).append("a", i3, false).toString()); [EOL]     assertEquals("<size=0>", new ToStringBuilder(base).append("a", new ArrayList<Object>(), false).toString()); [EOL]     assertEquals("[]", new ToStringBuilder(base).append("a", new ArrayList<Object>(), true).toString()); [EOL]     assertEquals("<size=0>", new ToStringBuilder(base).append("a", new HashMap<Object, Object>(), false).toString()); [EOL]     assertEquals("{}", new ToStringBuilder(base).append("a", new HashMap<Object, Object>(), true).toString()); [EOL]     assertEquals("<size=0>", new ToStringBuilder(base).append("a", (Object) new String[0], false).toString()); [EOL]     assertEquals("{}", new ToStringBuilder(base).append("a", (Object) new String[0], true).toString()); [EOL] }
@Test [EOL] public void testObject() { [EOL]     final Integer i3 = Integer.valueOf(3); [EOL]     final Integer i4 = Integer.valueOf(4); [EOL]     assertEquals("<null>", new ToStringBuilder(base).append((Object) null).toString()); [EOL]     assertEquals("3", new ToStringBuilder(base).append(i3).toString()); [EOL]     assertEquals("<null>", new ToStringBuilder(base).append("a", (Object) null).toString()); [EOL]     assertEquals("3", new ToStringBuilder(base).append("a", i3).toString()); [EOL]     assertEquals("3,4", new ToStringBuilder(base).append("a", i3).append("b", i4).toString()); [EOL]     assertEquals("<Integer>", new ToStringBuilder(base).append("a", i3, false).toString()); [EOL]     assertEquals("<size=0>", new ToStringBuilder(base).append("a", new ArrayList<Object>(), false).toString()); [EOL]     assertEquals("[]", new ToStringBuilder(base).append("a", new ArrayList<Object>(), true).toString()); [EOL]     assertEquals("<size=0>", new ToStringBuilder(base).append("a", new HashMap<Object, Object>(), false).toString()); [EOL]     assertEquals("{}", new ToStringBuilder(base).append("a", new HashMap<Object, Object>(), true).toString()); [EOL]     assertEquals("<size=0>", new ToStringBuilder(base).append("a", (Object) new String[0], false).toString()); [EOL]     assertEquals("{}", new ToStringBuilder(base).append("a", (Object) new String[0], true).toString()); [EOL] }
@Test [EOL] public void testObject() { [EOL]     final Integer i3 = Integer.valueOf(3); [EOL]     final Integer i4 = Integer.valueOf(4); [EOL]     assertEquals("<null>", new ToStringBuilder(base).append((Object) null).toString()); [EOL]     assertEquals("3", new ToStringBuilder(base).append(i3).toString()); [EOL]     assertEquals("<null>", new ToStringBuilder(base).append("a", (Object) null).toString()); [EOL]     assertEquals("3", new ToStringBuilder(base).append("a", i3).toString()); [EOL]     assertEquals("3,4", new ToStringBuilder(base).append("a", i3).append("b", i4).toString()); [EOL]     assertEquals("<Integer>", new ToStringBuilder(base).append("a", i3, false).toString()); [EOL]     assertEquals("<size=0>", new ToStringBuilder(base).append("a", new ArrayList<Object>(), false).toString()); [EOL]     assertEquals("[]", new ToStringBuilder(base).append("a", new ArrayList<Object>(), true).toString()); [EOL]     assertEquals("<size=0>", new ToStringBuilder(base).append("a", new HashMap<Object, Object>(), false).toString()); [EOL]     assertEquals("{}", new ToStringBuilder(base).append("a", new HashMap<Object, Object>(), true).toString()); [EOL]     assertEquals("<size=0>", new ToStringBuilder(base).append("a", (Object) new String[0], false).toString()); [EOL]     assertEquals("{}", new ToStringBuilder(base).append("a", (Object) new String[0], true).toString()); [EOL] }
@Test [EOL] public void testLongArray() { [EOL]     long[] array = new long[] { 1, 2, -3, 4 }; [EOL]     assertEquals(baseStr + "[{1,2,-3,4}]", new ToStringBuilder(base).append(array).toString()); [EOL]     assertEquals(baseStr + "[{1,2,-3,4}]", new ToStringBuilder(base).append((Object) array).toString()); [EOL]     array = null; [EOL]     assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); [EOL]     assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); [EOL] }
@Test [EOL] public void testObject() { [EOL]     final Integer i3 = Integer.valueOf(3); [EOL]     final Integer i4 = Integer.valueOf(4); [EOL]     assertEquals("<null>", new ToStringBuilder(base).append((Object) null).toString()); [EOL]     assertEquals("3", new ToStringBuilder(base).append(i3).toString()); [EOL]     assertEquals("<null>", new ToStringBuilder(base).append("a", (Object) null).toString()); [EOL]     assertEquals("3", new ToStringBuilder(base).append("a", i3).toString()); [EOL]     assertEquals("3,4", new ToStringBuilder(base).append("a", i3).append("b", i4).toString()); [EOL]     assertEquals("<Integer>", new ToStringBuilder(base).append("a", i3, false).toString()); [EOL]     assertEquals("<size=0>", new ToStringBuilder(base).append("a", new ArrayList<Object>(), false).toString()); [EOL]     assertEquals("[]", new ToStringBuilder(base).append("a", new ArrayList<Object>(), true).toString()); [EOL]     assertEquals("<size=0>", new ToStringBuilder(base).append("a", new HashMap<Object, Object>(), false).toString()); [EOL]     assertEquals("{}", new ToStringBuilder(base).append("a", new HashMap<Object, Object>(), true).toString()); [EOL]     assertEquals("<size=0>", new ToStringBuilder(base).append("a", (Object) new String[0], false).toString()); [EOL]     assertEquals("{}", new ToStringBuilder(base).append("a", (Object) new String[0], true).toString()); [EOL] }
@Test [EOL] public void testLongArray() { [EOL]     long[] array = new long[] { 1, 2, -3, 4 }; [EOL]     assertEquals(baseStr + "[{1,2,-3,4}]", new ToStringBuilder(base).append(array).toString()); [EOL]     assertEquals(baseStr + "[{1,2,-3,4}]", new ToStringBuilder(base).append((Object) array).toString()); [EOL]     array = null; [EOL]     assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); [EOL]     assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); [EOL] }
@Test [EOL] public void testLongArray() { [EOL]     long[] array = new long[] { 1, 2, -3, 4 }; [EOL]     assertEquals(baseStr + "[{1,2,-3,4}]", new ToStringBuilder(base).append(array).toString()); [EOL]     assertEquals(baseStr + "[{1,2,-3,4}]", new ToStringBuilder(base).append((Object) array).toString()); [EOL]     array = null; [EOL]     assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); [EOL]     assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); [EOL] }
@Test [EOL] public void testReflectionBooleanArrayArray() { [EOL]     boolean[][] array = new boolean[][] { { true, false }, null, { false } }; [EOL]     final String baseStr = this.toBaseString(array); [EOL]     assertEquals(baseStr + "[{{true,false},<null>,{false}}]", ToStringBuilder.reflectionToString(array)); [EOL]     assertEquals(baseStr + "[{{true,false},<null>,{false}}]", ToStringBuilder.reflectionToString(array)); [EOL]     array = null; [EOL]     assertReflectionArray("<null>", array); [EOL] }
@Test [EOL] public void testLongArray() { [EOL]     long[] array = new long[] { 1, 2, -3, 4 }; [EOL]     assertEquals(baseStr + "[{1,2,-3,4}]", new ToStringBuilder(base).append(array).toString()); [EOL]     assertEquals(baseStr + "[{1,2,-3,4}]", new ToStringBuilder(base).append((Object) array).toString()); [EOL]     array = null; [EOL]     assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); [EOL]     assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); [EOL] }
@Test [EOL] public void testLongArray() { [EOL]     long[] array = new long[] { 1, 2, -3, 4 }; [EOL]     assertEquals(baseStr + "[{1,2,-3,4}]", new ToStringBuilder(base).append(array).toString()); [EOL]     assertEquals(baseStr + "[{1,2,-3,4}]", new ToStringBuilder(base).append((Object) array).toString()); [EOL]     array = null; [EOL]     assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); [EOL]     assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); [EOL] }
@Test [EOL] public void testLongArray() { [EOL]     long[] array = new long[] { 1, 2, -3, 4 }; [EOL]     assertEquals(baseStr + "[{1,2,-3,4}]", new ToStringBuilder(base).append(array).toString()); [EOL]     assertEquals(baseStr + "[{1,2,-3,4}]", new ToStringBuilder(base).append((Object) array).toString()); [EOL]     array = null; [EOL]     assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); [EOL]     assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); [EOL] }
@Test [EOL] public void testLongArray() { [EOL]     long[] array = new long[] { 1, 2, -3, 4 }; [EOL]     assertEquals(baseStr + "[{1,2,-3,4}]", new ToStringBuilder(base).append(array).toString()); [EOL]     assertEquals(baseStr + "[{1,2,-3,4}]", new ToStringBuilder(base).append((Object) array).toString()); [EOL]     array = null; [EOL]     assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); [EOL]     assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); [EOL] }
@Test [EOL] public void testLongArray() { [EOL]     long[] array = new long[] { 1, 2, -3, 4 }; [EOL]     assertEquals(baseStr + "[{1,2,-3,4}]", new ToStringBuilder(base).append(array).toString()); [EOL]     assertEquals(baseStr + "[{1,2,-3,4}]", new ToStringBuilder(base).append((Object) array).toString()); [EOL]     array = null; [EOL]     assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); [EOL]     assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); [EOL] }
@Test [EOL] public void testLongArray() { [EOL]     long[] array = new long[] { 1, 2, -3, 4 }; [EOL]     assertEquals(baseStr + "[{1,2,-3,4}]", new ToStringBuilder(base).append(array).toString()); [EOL]     assertEquals(baseStr + "[{1,2,-3,4}]", new ToStringBuilder(base).append((Object) array).toString()); [EOL]     array = null; [EOL]     assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); [EOL]     assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); [EOL] }
@Test [EOL] public void testLongArray() { [EOL]     long[] array = new long[] { 1, 2, -3, 4 }; [EOL]     assertEquals(baseStr + "[{1,2,-3,4}]", new ToStringBuilder(base).append(array).toString()); [EOL]     assertEquals(baseStr + "[{1,2,-3,4}]", new ToStringBuilder(base).append((Object) array).toString()); [EOL]     array = null; [EOL]     assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); [EOL]     assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); [EOL] }
@Test [EOL] public void testLongArray() { [EOL]     long[] array = new long[] { 1, 2, -3, 4 }; [EOL]     assertEquals(baseStr + "[{1,2,-3,4}]", new ToStringBuilder(base).append(array).toString()); [EOL]     assertEquals(baseStr + "[{1,2,-3,4}]", new ToStringBuilder(base).append((Object) array).toString()); [EOL]     array = null; [EOL]     assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); [EOL]     assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); [EOL] }
@Test [EOL] public void testLongArray() { [EOL]     long[] array = new long[] { 1, 2, -3, 4 }; [EOL]     assertEquals(baseStr + "[{1,2,-3,4}]", new ToStringBuilder(base).append(array).toString()); [EOL]     assertEquals(baseStr + "[{1,2,-3,4}]", new ToStringBuilder(base).append((Object) array).toString()); [EOL]     array = null; [EOL]     assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); [EOL]     assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); [EOL] }
@Test [EOL] public void testObject() { [EOL]     final Integer i3 = Integer.valueOf(3); [EOL]     final Integer i4 = Integer.valueOf(4); [EOL]     assertEquals("<null>", new ToStringBuilder(base).append((Object) null).toString()); [EOL]     assertEquals("3", new ToStringBuilder(base).append(i3).toString()); [EOL]     assertEquals("<null>", new ToStringBuilder(base).append("a", (Object) null).toString()); [EOL]     assertEquals("3", new ToStringBuilder(base).append("a", i3).toString()); [EOL]     assertEquals("3,4", new ToStringBuilder(base).append("a", i3).append("b", i4).toString()); [EOL]     assertEquals("<Integer>", new ToStringBuilder(base).append("a", i3, false).toString()); [EOL]     assertEquals("<size=0>", new ToStringBuilder(base).append("a", new ArrayList<Object>(), false).toString()); [EOL]     assertEquals("[]", new ToStringBuilder(base).append("a", new ArrayList<Object>(), true).toString()); [EOL]     assertEquals("<size=0>", new ToStringBuilder(base).append("a", new HashMap<Object, Object>(), false).toString()); [EOL]     assertEquals("{}", new ToStringBuilder(base).append("a", new HashMap<Object, Object>(), true).toString()); [EOL]     assertEquals("<size=0>", new ToStringBuilder(base).append("a", (Object) new String[0], false).toString()); [EOL]     assertEquals("{}", new ToStringBuilder(base).append("a", (Object) new String[0], true).toString()); [EOL] }
@Test [EOL] public void testObject() { [EOL]     final Integer i3 = Integer.valueOf(3); [EOL]     final Integer i4 = Integer.valueOf(4); [EOL]     assertEquals("<null>", new ToStringBuilder(base).append((Object) null).toString()); [EOL]     assertEquals("3", new ToStringBuilder(base).append(i3).toString()); [EOL]     assertEquals("<null>", new ToStringBuilder(base).append("a", (Object) null).toString()); [EOL]     assertEquals("3", new ToStringBuilder(base).append("a", i3).toString()); [EOL]     assertEquals("3,4", new ToStringBuilder(base).append("a", i3).append("b", i4).toString()); [EOL]     assertEquals("<Integer>", new ToStringBuilder(base).append("a", i3, false).toString()); [EOL]     assertEquals("<size=0>", new ToStringBuilder(base).append("a", new ArrayList<Object>(), false).toString()); [EOL]     assertEquals("[]", new ToStringBuilder(base).append("a", new ArrayList<Object>(), true).toString()); [EOL]     assertEquals("<size=0>", new ToStringBuilder(base).append("a", new HashMap<Object, Object>(), false).toString()); [EOL]     assertEquals("{}", new ToStringBuilder(base).append("a", new HashMap<Object, Object>(), true).toString()); [EOL]     assertEquals("<size=0>", new ToStringBuilder(base).append("a", (Object) new String[0], false).toString()); [EOL]     assertEquals("{}", new ToStringBuilder(base).append("a", (Object) new String[0], true).toString()); [EOL] }
@Test [EOL] public void testObject() { [EOL]     final Integer i3 = Integer.valueOf(3); [EOL]     final Integer i4 = Integer.valueOf(4); [EOL]     assertEquals("<null>", new ToStringBuilder(base).append((Object) null).toString()); [EOL]     assertEquals("3", new ToStringBuilder(base).append(i3).toString()); [EOL]     assertEquals("<null>", new ToStringBuilder(base).append("a", (Object) null).toString()); [EOL]     assertEquals("3", new ToStringBuilder(base).append("a", i3).toString()); [EOL]     assertEquals("3,4", new ToStringBuilder(base).append("a", i3).append("b", i4).toString()); [EOL]     assertEquals("<Integer>", new ToStringBuilder(base).append("a", i3, false).toString()); [EOL]     assertEquals("<size=0>", new ToStringBuilder(base).append("a", new ArrayList<Object>(), false).toString()); [EOL]     assertEquals("[]", new ToStringBuilder(base).append("a", new ArrayList<Object>(), true).toString()); [EOL]     assertEquals("<size=0>", new ToStringBuilder(base).append("a", new HashMap<Object, Object>(), false).toString()); [EOL]     assertEquals("{}", new ToStringBuilder(base).append("a", new HashMap<Object, Object>(), true).toString()); [EOL]     assertEquals("<size=0>", new ToStringBuilder(base).append("a", (Object) new String[0], false).toString()); [EOL]     assertEquals("{}", new ToStringBuilder(base).append("a", (Object) new String[0], true).toString()); [EOL] }
@Test [EOL] public void testLongArray() { [EOL]     long[] array = new long[] { 1, 2, -3, 4 }; [EOL]     assertEquals(baseStr + "[{1,2,-3,4}]", new ToStringBuilder(base).append(array).toString()); [EOL]     assertEquals(baseStr + "[{1,2,-3,4}]", new ToStringBuilder(base).append((Object) array).toString()); [EOL]     array = null; [EOL]     assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); [EOL]     assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); [EOL] }
@Test [EOL] public void testLongArray() { [EOL]     long[] array = new long[] { 1, 2, -3, 4 }; [EOL]     assertEquals(baseStr + "[{1,2,-3,4}]", new ToStringBuilder(base).append(array).toString()); [EOL]     assertEquals(baseStr + "[{1,2,-3,4}]", new ToStringBuilder(base).append((Object) array).toString()); [EOL]     array = null; [EOL]     assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); [EOL]     assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); [EOL] }
@Test [EOL] public void testLongArray() { [EOL]     long[] array = new long[] { 1, 2, -3, 4 }; [EOL]     assertEquals(baseStr + "[{1,2,-3,4}]", new ToStringBuilder(base).append(array).toString()); [EOL]     assertEquals(baseStr + "[{1,2,-3,4}]", new ToStringBuilder(base).append((Object) array).toString()); [EOL]     array = null; [EOL]     assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); [EOL]     assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); [EOL] }
@Test [EOL] public void testSetSummaryObjectEndText() { [EOL]     final ToStringStyle style = new ToStringStyleImpl(); [EOL]     style.setSummaryObjectEndText(null); [EOL]     assertEquals("", style.getSummaryObjectEndText()); [EOL] }
@Test [EOL] public void testSetSummaryObjectEndText() { [EOL]     final ToStringStyle style = new ToStringStyleImpl(); [EOL]     style.setSummaryObjectEndText(null); [EOL]     assertEquals("", style.getSummaryObjectEndText()); [EOL] }
@Test [EOL] public void testGetMultipleTimes() throws ConcurrentException { [EOL]     final ConcurrentInitializer<Object> initializer = createInitializer(); [EOL]     final Object obj = initializer.get(); [EOL]     for (int i = 0; i < 10; i++) { [EOL]         assertEquals("Got different object at " + i, obj, initializer.get()); [EOL]     } [EOL] }
@Test [EOL] public void testGetMultipleTimes() throws ConcurrentException { [EOL]     final ConcurrentInitializer<Object> initializer = createInitializer(); [EOL]     final Object obj = initializer.get(); [EOL]     for (int i = 0; i < 10; i++) { [EOL]         assertEquals("Got different object at " + i, obj, initializer.get()); [EOL]     } [EOL] }
@Test [EOL] public void testGetMultipleTimes() throws ConcurrentException { [EOL]     final ConcurrentInitializer<Object> initializer = createInitializer(); [EOL]     final Object obj = initializer.get(); [EOL]     for (int i = 0; i < 10; i++) { [EOL]         assertEquals("Got different object at " + i, obj, initializer.get()); [EOL]     } [EOL] }
@Test [EOL] public void testHexDigitMsb0ToInt() { [EOL]     assertEquals(0x0, Conversion.hexDigitMsb0ToInt('0')); [EOL]     assertEquals(0x8, Conversion.hexDigitMsb0ToInt('1')); [EOL]     assertEquals(0x4, Conversion.hexDigitMsb0ToInt('2')); [EOL]     assertEquals(0xC, Conversion.hexDigitMsb0ToInt('3')); [EOL]     assertEquals(0x2, Conversion.hexDigitMsb0ToInt('4')); [EOL]     assertEquals(0xA, Conversion.hexDigitMsb0ToInt('5')); [EOL]     assertEquals(0x6, Conversion.hexDigitMsb0ToInt('6')); [EOL]     assertEquals(0xE, Conversion.hexDigitMsb0ToInt('7')); [EOL]     assertEquals(0x1, Conversion.hexDigitMsb0ToInt('8')); [EOL]     assertEquals(0x9, Conversion.hexDigitMsb0ToInt('9')); [EOL]     assertEquals(0x5, Conversion.hexDigitMsb0ToInt('A')); [EOL]     assertEquals(0x5, Conversion.hexDigitMsb0ToInt('a')); [EOL]     assertEquals(0xD, Conversion.hexDigitMsb0ToInt('B')); [EOL]     assertEquals(0xD, Conversion.hexDigitMsb0ToInt('b')); [EOL]     assertEquals(0x3, Conversion.hexDigitMsb0ToInt('C')); [EOL]     assertEquals(0x3, Conversion.hexDigitMsb0ToInt('c')); [EOL]     assertEquals(0xB, Conversion.hexDigitMsb0ToInt('D')); [EOL]     assertEquals(0xB, Conversion.hexDigitMsb0ToInt('d')); [EOL]     assertEquals(0x7, Conversion.hexDigitMsb0ToInt('E')); [EOL]     assertEquals(0x7, Conversion.hexDigitMsb0ToInt('e')); [EOL]     assertEquals(0xF, Conversion.hexDigitMsb0ToInt('F')); [EOL]     assertEquals(0xF, Conversion.hexDigitMsb0ToInt('f')); [EOL]     try { [EOL]         Conversion.hexDigitMsb0ToInt('G'); [EOL]         fail("Thrown " + IllegalArgumentException.class.getName() + " expected"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL] }
@Test [EOL] public void testHexDigitMsb0ToInt() { [EOL]     assertEquals(0x0, Conversion.hexDigitMsb0ToInt('0')); [EOL]     assertEquals(0x8, Conversion.hexDigitMsb0ToInt('1')); [EOL]     assertEquals(0x4, Conversion.hexDigitMsb0ToInt('2')); [EOL]     assertEquals(0xC, Conversion.hexDigitMsb0ToInt('3')); [EOL]     assertEquals(0x2, Conversion.hexDigitMsb0ToInt('4')); [EOL]     assertEquals(0xA, Conversion.hexDigitMsb0ToInt('5')); [EOL]     assertEquals(0x6, Conversion.hexDigitMsb0ToInt('6')); [EOL]     assertEquals(0xE, Conversion.hexDigitMsb0ToInt('7')); [EOL]     assertEquals(0x1, Conversion.hexDigitMsb0ToInt('8')); [EOL]     assertEquals(0x9, Conversion.hexDigitMsb0ToInt('9')); [EOL]     assertEquals(0x5, Conversion.hexDigitMsb0ToInt('A')); [EOL]     assertEquals(0x5, Conversion.hexDigitMsb0ToInt('a')); [EOL]     assertEquals(0xD, Conversion.hexDigitMsb0ToInt('B')); [EOL]     assertEquals(0xD, Conversion.hexDigitMsb0ToInt('b')); [EOL]     assertEquals(0x3, Conversion.hexDigitMsb0ToInt('C')); [EOL]     assertEquals(0x3, Conversion.hexDigitMsb0ToInt('c')); [EOL]     assertEquals(0xB, Conversion.hexDigitMsb0ToInt('D')); [EOL]     assertEquals(0xB, Conversion.hexDigitMsb0ToInt('d')); [EOL]     assertEquals(0x7, Conversion.hexDigitMsb0ToInt('E')); [EOL]     assertEquals(0x7, Conversion.hexDigitMsb0ToInt('e')); [EOL]     assertEquals(0xF, Conversion.hexDigitMsb0ToInt('F')); [EOL]     assertEquals(0xF, Conversion.hexDigitMsb0ToInt('f')); [EOL]     try { [EOL]         Conversion.hexDigitMsb0ToInt('G'); [EOL]         fail("Thrown " + IllegalArgumentException.class.getName() + " expected"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL] }
@Test [EOL] public void testHexDigitMsb0ToInt() { [EOL]     assertEquals(0x0, Conversion.hexDigitMsb0ToInt('0')); [EOL]     assertEquals(0x8, Conversion.hexDigitMsb0ToInt('1')); [EOL]     assertEquals(0x4, Conversion.hexDigitMsb0ToInt('2')); [EOL]     assertEquals(0xC, Conversion.hexDigitMsb0ToInt('3')); [EOL]     assertEquals(0x2, Conversion.hexDigitMsb0ToInt('4')); [EOL]     assertEquals(0xA, Conversion.hexDigitMsb0ToInt('5')); [EOL]     assertEquals(0x6, Conversion.hexDigitMsb0ToInt('6')); [EOL]     assertEquals(0xE, Conversion.hexDigitMsb0ToInt('7')); [EOL]     assertEquals(0x1, Conversion.hexDigitMsb0ToInt('8')); [EOL]     assertEquals(0x9, Conversion.hexDigitMsb0ToInt('9')); [EOL]     assertEquals(0x5, Conversion.hexDigitMsb0ToInt('A')); [EOL]     assertEquals(0x5, Conversion.hexDigitMsb0ToInt('a')); [EOL]     assertEquals(0xD, Conversion.hexDigitMsb0ToInt('B')); [EOL]     assertEquals(0xD, Conversion.hexDigitMsb0ToInt('b')); [EOL]     assertEquals(0x3, Conversion.hexDigitMsb0ToInt('C')); [EOL]     assertEquals(0x3, Conversion.hexDigitMsb0ToInt('c')); [EOL]     assertEquals(0xB, Conversion.hexDigitMsb0ToInt('D')); [EOL]     assertEquals(0xB, Conversion.hexDigitMsb0ToInt('d')); [EOL]     assertEquals(0x7, Conversion.hexDigitMsb0ToInt('E')); [EOL]     assertEquals(0x7, Conversion.hexDigitMsb0ToInt('e')); [EOL]     assertEquals(0xF, Conversion.hexDigitMsb0ToInt('F')); [EOL]     assertEquals(0xF, Conversion.hexDigitMsb0ToInt('f')); [EOL]     try { [EOL]         Conversion.hexDigitMsb0ToInt('G'); [EOL]         fail("Thrown " + IllegalArgumentException.class.getName() + " expected"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL] }
@Test [EOL] public void testHexDigitMsb0ToInt() { [EOL]     assertEquals(0x0, Conversion.hexDigitMsb0ToInt('0')); [EOL]     assertEquals(0x8, Conversion.hexDigitMsb0ToInt('1')); [EOL]     assertEquals(0x4, Conversion.hexDigitMsb0ToInt('2')); [EOL]     assertEquals(0xC, Conversion.hexDigitMsb0ToInt('3')); [EOL]     assertEquals(0x2, Conversion.hexDigitMsb0ToInt('4')); [EOL]     assertEquals(0xA, Conversion.hexDigitMsb0ToInt('5')); [EOL]     assertEquals(0x6, Conversion.hexDigitMsb0ToInt('6')); [EOL]     assertEquals(0xE, Conversion.hexDigitMsb0ToInt('7')); [EOL]     assertEquals(0x1, Conversion.hexDigitMsb0ToInt('8')); [EOL]     assertEquals(0x9, Conversion.hexDigitMsb0ToInt('9')); [EOL]     assertEquals(0x5, Conversion.hexDigitMsb0ToInt('A')); [EOL]     assertEquals(0x5, Conversion.hexDigitMsb0ToInt('a')); [EOL]     assertEquals(0xD, Conversion.hexDigitMsb0ToInt('B')); [EOL]     assertEquals(0xD, Conversion.hexDigitMsb0ToInt('b')); [EOL]     assertEquals(0x3, Conversion.hexDigitMsb0ToInt('C')); [EOL]     assertEquals(0x3, Conversion.hexDigitMsb0ToInt('c')); [EOL]     assertEquals(0xB, Conversion.hexDigitMsb0ToInt('D')); [EOL]     assertEquals(0xB, Conversion.hexDigitMsb0ToInt('d')); [EOL]     assertEquals(0x7, Conversion.hexDigitMsb0ToInt('E')); [EOL]     assertEquals(0x7, Conversion.hexDigitMsb0ToInt('e')); [EOL]     assertEquals(0xF, Conversion.hexDigitMsb0ToInt('F')); [EOL]     assertEquals(0xF, Conversion.hexDigitMsb0ToInt('f')); [EOL]     try { [EOL]         Conversion.hexDigitMsb0ToInt('G'); [EOL]         fail("Thrown " + IllegalArgumentException.class.getName() + " expected"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL] }
@Test [EOL] public void testHexDigitMsb0ToInt() { [EOL]     assertEquals(0x0, Conversion.hexDigitMsb0ToInt('0')); [EOL]     assertEquals(0x8, Conversion.hexDigitMsb0ToInt('1')); [EOL]     assertEquals(0x4, Conversion.hexDigitMsb0ToInt('2')); [EOL]     assertEquals(0xC, Conversion.hexDigitMsb0ToInt('3')); [EOL]     assertEquals(0x2, Conversion.hexDigitMsb0ToInt('4')); [EOL]     assertEquals(0xA, Conversion.hexDigitMsb0ToInt('5')); [EOL]     assertEquals(0x6, Conversion.hexDigitMsb0ToInt('6')); [EOL]     assertEquals(0xE, Conversion.hexDigitMsb0ToInt('7')); [EOL]     assertEquals(0x1, Conversion.hexDigitMsb0ToInt('8')); [EOL]     assertEquals(0x9, Conversion.hexDigitMsb0ToInt('9')); [EOL]     assertEquals(0x5, Conversion.hexDigitMsb0ToInt('A')); [EOL]     assertEquals(0x5, Conversion.hexDigitMsb0ToInt('a')); [EOL]     assertEquals(0xD, Conversion.hexDigitMsb0ToInt('B')); [EOL]     assertEquals(0xD, Conversion.hexDigitMsb0ToInt('b')); [EOL]     assertEquals(0x3, Conversion.hexDigitMsb0ToInt('C')); [EOL]     assertEquals(0x3, Conversion.hexDigitMsb0ToInt('c')); [EOL]     assertEquals(0xB, Conversion.hexDigitMsb0ToInt('D')); [EOL]     assertEquals(0xB, Conversion.hexDigitMsb0ToInt('d')); [EOL]     assertEquals(0x7, Conversion.hexDigitMsb0ToInt('E')); [EOL]     assertEquals(0x7, Conversion.hexDigitMsb0ToInt('e')); [EOL]     assertEquals(0xF, Conversion.hexDigitMsb0ToInt('F')); [EOL]     assertEquals(0xF, Conversion.hexDigitMsb0ToInt('f')); [EOL]     try { [EOL]         Conversion.hexDigitMsb0ToInt('G'); [EOL]         fail("Thrown " + IllegalArgumentException.class.getName() + " expected"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL] }
@Test [EOL] public void testHexDigitMsb0ToInt() { [EOL]     assertEquals(0x0, Conversion.hexDigitMsb0ToInt('0')); [EOL]     assertEquals(0x8, Conversion.hexDigitMsb0ToInt('1')); [EOL]     assertEquals(0x4, Conversion.hexDigitMsb0ToInt('2')); [EOL]     assertEquals(0xC, Conversion.hexDigitMsb0ToInt('3')); [EOL]     assertEquals(0x2, Conversion.hexDigitMsb0ToInt('4')); [EOL]     assertEquals(0xA, Conversion.hexDigitMsb0ToInt('5')); [EOL]     assertEquals(0x6, Conversion.hexDigitMsb0ToInt('6')); [EOL]     assertEquals(0xE, Conversion.hexDigitMsb0ToInt('7')); [EOL]     assertEquals(0x1, Conversion.hexDigitMsb0ToInt('8')); [EOL]     assertEquals(0x9, Conversion.hexDigitMsb0ToInt('9')); [EOL]     assertEquals(0x5, Conversion.hexDigitMsb0ToInt('A')); [EOL]     assertEquals(0x5, Conversion.hexDigitMsb0ToInt('a')); [EOL]     assertEquals(0xD, Conversion.hexDigitMsb0ToInt('B')); [EOL]     assertEquals(0xD, Conversion.hexDigitMsb0ToInt('b')); [EOL]     assertEquals(0x3, Conversion.hexDigitMsb0ToInt('C')); [EOL]     assertEquals(0x3, Conversion.hexDigitMsb0ToInt('c')); [EOL]     assertEquals(0xB, Conversion.hexDigitMsb0ToInt('D')); [EOL]     assertEquals(0xB, Conversion.hexDigitMsb0ToInt('d')); [EOL]     assertEquals(0x7, Conversion.hexDigitMsb0ToInt('E')); [EOL]     assertEquals(0x7, Conversion.hexDigitMsb0ToInt('e')); [EOL]     assertEquals(0xF, Conversion.hexDigitMsb0ToInt('F')); [EOL]     assertEquals(0xF, Conversion.hexDigitMsb0ToInt('f')); [EOL]     try { [EOL]         Conversion.hexDigitMsb0ToInt('G'); [EOL]         fail("Thrown " + IllegalArgumentException.class.getName() + " expected"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL] }
@Test [EOL] public void testHexDigitMsb0ToInt() { [EOL]     assertEquals(0x0, Conversion.hexDigitMsb0ToInt('0')); [EOL]     assertEquals(0x8, Conversion.hexDigitMsb0ToInt('1')); [EOL]     assertEquals(0x4, Conversion.hexDigitMsb0ToInt('2')); [EOL]     assertEquals(0xC, Conversion.hexDigitMsb0ToInt('3')); [EOL]     assertEquals(0x2, Conversion.hexDigitMsb0ToInt('4')); [EOL]     assertEquals(0xA, Conversion.hexDigitMsb0ToInt('5')); [EOL]     assertEquals(0x6, Conversion.hexDigitMsb0ToInt('6')); [EOL]     assertEquals(0xE, Conversion.hexDigitMsb0ToInt('7')); [EOL]     assertEquals(0x1, Conversion.hexDigitMsb0ToInt('8')); [EOL]     assertEquals(0x9, Conversion.hexDigitMsb0ToInt('9')); [EOL]     assertEquals(0x5, Conversion.hexDigitMsb0ToInt('A')); [EOL]     assertEquals(0x5, Conversion.hexDigitMsb0ToInt('a')); [EOL]     assertEquals(0xD, Conversion.hexDigitMsb0ToInt('B')); [EOL]     assertEquals(0xD, Conversion.hexDigitMsb0ToInt('b')); [EOL]     assertEquals(0x3, Conversion.hexDigitMsb0ToInt('C')); [EOL]     assertEquals(0x3, Conversion.hexDigitMsb0ToInt('c')); [EOL]     assertEquals(0xB, Conversion.hexDigitMsb0ToInt('D')); [EOL]     assertEquals(0xB, Conversion.hexDigitMsb0ToInt('d')); [EOL]     assertEquals(0x7, Conversion.hexDigitMsb0ToInt('E')); [EOL]     assertEquals(0x7, Conversion.hexDigitMsb0ToInt('e')); [EOL]     assertEquals(0xF, Conversion.hexDigitMsb0ToInt('F')); [EOL]     assertEquals(0xF, Conversion.hexDigitMsb0ToInt('f')); [EOL]     try { [EOL]         Conversion.hexDigitMsb0ToInt('G'); [EOL]         fail("Thrown " + IllegalArgumentException.class.getName() + " expected"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL] }
@Test [EOL] public void testHexDigitMsb0ToInt() { [EOL]     assertEquals(0x0, Conversion.hexDigitMsb0ToInt('0')); [EOL]     assertEquals(0x8, Conversion.hexDigitMsb0ToInt('1')); [EOL]     assertEquals(0x4, Conversion.hexDigitMsb0ToInt('2')); [EOL]     assertEquals(0xC, Conversion.hexDigitMsb0ToInt('3')); [EOL]     assertEquals(0x2, Conversion.hexDigitMsb0ToInt('4')); [EOL]     assertEquals(0xA, Conversion.hexDigitMsb0ToInt('5')); [EOL]     assertEquals(0x6, Conversion.hexDigitMsb0ToInt('6')); [EOL]     assertEquals(0xE, Conversion.hexDigitMsb0ToInt('7')); [EOL]     assertEquals(0x1, Conversion.hexDigitMsb0ToInt('8')); [EOL]     assertEquals(0x9, Conversion.hexDigitMsb0ToInt('9')); [EOL]     assertEquals(0x5, Conversion.hexDigitMsb0ToInt('A')); [EOL]     assertEquals(0x5, Conversion.hexDigitMsb0ToInt('a')); [EOL]     assertEquals(0xD, Conversion.hexDigitMsb0ToInt('B')); [EOL]     assertEquals(0xD, Conversion.hexDigitMsb0ToInt('b')); [EOL]     assertEquals(0x3, Conversion.hexDigitMsb0ToInt('C')); [EOL]     assertEquals(0x3, Conversion.hexDigitMsb0ToInt('c')); [EOL]     assertEquals(0xB, Conversion.hexDigitMsb0ToInt('D')); [EOL]     assertEquals(0xB, Conversion.hexDigitMsb0ToInt('d')); [EOL]     assertEquals(0x7, Conversion.hexDigitMsb0ToInt('E')); [EOL]     assertEquals(0x7, Conversion.hexDigitMsb0ToInt('e')); [EOL]     assertEquals(0xF, Conversion.hexDigitMsb0ToInt('F')); [EOL]     assertEquals(0xF, Conversion.hexDigitMsb0ToInt('f')); [EOL]     try { [EOL]         Conversion.hexDigitMsb0ToInt('G'); [EOL]         fail("Thrown " + IllegalArgumentException.class.getName() + " expected"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL] }
@Test [EOL] public void testHexDigitMsb0ToInt() { [EOL]     assertEquals(0x0, Conversion.hexDigitMsb0ToInt('0')); [EOL]     assertEquals(0x8, Conversion.hexDigitMsb0ToInt('1')); [EOL]     assertEquals(0x4, Conversion.hexDigitMsb0ToInt('2')); [EOL]     assertEquals(0xC, Conversion.hexDigitMsb0ToInt('3')); [EOL]     assertEquals(0x2, Conversion.hexDigitMsb0ToInt('4')); [EOL]     assertEquals(0xA, Conversion.hexDigitMsb0ToInt('5')); [EOL]     assertEquals(0x6, Conversion.hexDigitMsb0ToInt('6')); [EOL]     assertEquals(0xE, Conversion.hexDigitMsb0ToInt('7')); [EOL]     assertEquals(0x1, Conversion.hexDigitMsb0ToInt('8')); [EOL]     assertEquals(0x9, Conversion.hexDigitMsb0ToInt('9')); [EOL]     assertEquals(0x5, Conversion.hexDigitMsb0ToInt('A')); [EOL]     assertEquals(0x5, Conversion.hexDigitMsb0ToInt('a')); [EOL]     assertEquals(0xD, Conversion.hexDigitMsb0ToInt('B')); [EOL]     assertEquals(0xD, Conversion.hexDigitMsb0ToInt('b')); [EOL]     assertEquals(0x3, Conversion.hexDigitMsb0ToInt('C')); [EOL]     assertEquals(0x3, Conversion.hexDigitMsb0ToInt('c')); [EOL]     assertEquals(0xB, Conversion.hexDigitMsb0ToInt('D')); [EOL]     assertEquals(0xB, Conversion.hexDigitMsb0ToInt('d')); [EOL]     assertEquals(0x7, Conversion.hexDigitMsb0ToInt('E')); [EOL]     assertEquals(0x7, Conversion.hexDigitMsb0ToInt('e')); [EOL]     assertEquals(0xF, Conversion.hexDigitMsb0ToInt('F')); [EOL]     assertEquals(0xF, Conversion.hexDigitMsb0ToInt('f')); [EOL]     try { [EOL]         Conversion.hexDigitMsb0ToInt('G'); [EOL]         fail("Thrown " + IllegalArgumentException.class.getName() + " expected"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL] }
@Test [EOL] public void testHexDigitMsb0ToInt() { [EOL]     assertEquals(0x0, Conversion.hexDigitMsb0ToInt('0')); [EOL]     assertEquals(0x8, Conversion.hexDigitMsb0ToInt('1')); [EOL]     assertEquals(0x4, Conversion.hexDigitMsb0ToInt('2')); [EOL]     assertEquals(0xC, Conversion.hexDigitMsb0ToInt('3')); [EOL]     assertEquals(0x2, Conversion.hexDigitMsb0ToInt('4')); [EOL]     assertEquals(0xA, Conversion.hexDigitMsb0ToInt('5')); [EOL]     assertEquals(0x6, Conversion.hexDigitMsb0ToInt('6')); [EOL]     assertEquals(0xE, Conversion.hexDigitMsb0ToInt('7')); [EOL]     assertEquals(0x1, Conversion.hexDigitMsb0ToInt('8')); [EOL]     assertEquals(0x9, Conversion.hexDigitMsb0ToInt('9')); [EOL]     assertEquals(0x5, Conversion.hexDigitMsb0ToInt('A')); [EOL]     assertEquals(0x5, Conversion.hexDigitMsb0ToInt('a')); [EOL]     assertEquals(0xD, Conversion.hexDigitMsb0ToInt('B')); [EOL]     assertEquals(0xD, Conversion.hexDigitMsb0ToInt('b')); [EOL]     assertEquals(0x3, Conversion.hexDigitMsb0ToInt('C')); [EOL]     assertEquals(0x3, Conversion.hexDigitMsb0ToInt('c')); [EOL]     assertEquals(0xB, Conversion.hexDigitMsb0ToInt('D')); [EOL]     assertEquals(0xB, Conversion.hexDigitMsb0ToInt('d')); [EOL]     assertEquals(0x7, Conversion.hexDigitMsb0ToInt('E')); [EOL]     assertEquals(0x7, Conversion.hexDigitMsb0ToInt('e')); [EOL]     assertEquals(0xF, Conversion.hexDigitMsb0ToInt('F')); [EOL]     assertEquals(0xF, Conversion.hexDigitMsb0ToInt('f')); [EOL]     try { [EOL]         Conversion.hexDigitMsb0ToInt('G'); [EOL]         fail("Thrown " + IllegalArgumentException.class.getName() + " expected"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL] }
@Test [EOL] public void testHexDigitMsb0ToInt() { [EOL]     assertEquals(0x0, Conversion.hexDigitMsb0ToInt('0')); [EOL]     assertEquals(0x8, Conversion.hexDigitMsb0ToInt('1')); [EOL]     assertEquals(0x4, Conversion.hexDigitMsb0ToInt('2')); [EOL]     assertEquals(0xC, Conversion.hexDigitMsb0ToInt('3')); [EOL]     assertEquals(0x2, Conversion.hexDigitMsb0ToInt('4')); [EOL]     assertEquals(0xA, Conversion.hexDigitMsb0ToInt('5')); [EOL]     assertEquals(0x6, Conversion.hexDigitMsb0ToInt('6')); [EOL]     assertEquals(0xE, Conversion.hexDigitMsb0ToInt('7')); [EOL]     assertEquals(0x1, Conversion.hexDigitMsb0ToInt('8')); [EOL]     assertEquals(0x9, Conversion.hexDigitMsb0ToInt('9')); [EOL]     assertEquals(0x5, Conversion.hexDigitMsb0ToInt('A')); [EOL]     assertEquals(0x5, Conversion.hexDigitMsb0ToInt('a')); [EOL]     assertEquals(0xD, Conversion.hexDigitMsb0ToInt('B')); [EOL]     assertEquals(0xD, Conversion.hexDigitMsb0ToInt('b')); [EOL]     assertEquals(0x3, Conversion.hexDigitMsb0ToInt('C')); [EOL]     assertEquals(0x3, Conversion.hexDigitMsb0ToInt('c')); [EOL]     assertEquals(0xB, Conversion.hexDigitMsb0ToInt('D')); [EOL]     assertEquals(0xB, Conversion.hexDigitMsb0ToInt('d')); [EOL]     assertEquals(0x7, Conversion.hexDigitMsb0ToInt('E')); [EOL]     assertEquals(0x7, Conversion.hexDigitMsb0ToInt('e')); [EOL]     assertEquals(0xF, Conversion.hexDigitMsb0ToInt('F')); [EOL]     assertEquals(0xF, Conversion.hexDigitMsb0ToInt('f')); [EOL]     try { [EOL]         Conversion.hexDigitMsb0ToInt('G'); [EOL]         fail("Thrown " + IllegalArgumentException.class.getName() + " expected"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL] }
@Test [EOL] public void testHexDigitMsb0ToInt() { [EOL]     assertEquals(0x0, Conversion.hexDigitMsb0ToInt('0')); [EOL]     assertEquals(0x8, Conversion.hexDigitMsb0ToInt('1')); [EOL]     assertEquals(0x4, Conversion.hexDigitMsb0ToInt('2')); [EOL]     assertEquals(0xC, Conversion.hexDigitMsb0ToInt('3')); [EOL]     assertEquals(0x2, Conversion.hexDigitMsb0ToInt('4')); [EOL]     assertEquals(0xA, Conversion.hexDigitMsb0ToInt('5')); [EOL]     assertEquals(0x6, Conversion.hexDigitMsb0ToInt('6')); [EOL]     assertEquals(0xE, Conversion.hexDigitMsb0ToInt('7')); [EOL]     assertEquals(0x1, Conversion.hexDigitMsb0ToInt('8')); [EOL]     assertEquals(0x9, Conversion.hexDigitMsb0ToInt('9')); [EOL]     assertEquals(0x5, Conversion.hexDigitMsb0ToInt('A')); [EOL]     assertEquals(0x5, Conversion.hexDigitMsb0ToInt('a')); [EOL]     assertEquals(0xD, Conversion.hexDigitMsb0ToInt('B')); [EOL]     assertEquals(0xD, Conversion.hexDigitMsb0ToInt('b')); [EOL]     assertEquals(0x3, Conversion.hexDigitMsb0ToInt('C')); [EOL]     assertEquals(0x3, Conversion.hexDigitMsb0ToInt('c')); [EOL]     assertEquals(0xB, Conversion.hexDigitMsb0ToInt('D')); [EOL]     assertEquals(0xB, Conversion.hexDigitMsb0ToInt('d')); [EOL]     assertEquals(0x7, Conversion.hexDigitMsb0ToInt('E')); [EOL]     assertEquals(0x7, Conversion.hexDigitMsb0ToInt('e')); [EOL]     assertEquals(0xF, Conversion.hexDigitMsb0ToInt('F')); [EOL]     assertEquals(0xF, Conversion.hexDigitMsb0ToInt('f')); [EOL]     try { [EOL]         Conversion.hexDigitMsb0ToInt('G'); [EOL]         fail("Thrown " + IllegalArgumentException.class.getName() + " expected"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL] }
@Test [EOL] public void testHexDigitMsb0ToInt() { [EOL]     assertEquals(0x0, Conversion.hexDigitMsb0ToInt('0')); [EOL]     assertEquals(0x8, Conversion.hexDigitMsb0ToInt('1')); [EOL]     assertEquals(0x4, Conversion.hexDigitMsb0ToInt('2')); [EOL]     assertEquals(0xC, Conversion.hexDigitMsb0ToInt('3')); [EOL]     assertEquals(0x2, Conversion.hexDigitMsb0ToInt('4')); [EOL]     assertEquals(0xA, Conversion.hexDigitMsb0ToInt('5')); [EOL]     assertEquals(0x6, Conversion.hexDigitMsb0ToInt('6')); [EOL]     assertEquals(0xE, Conversion.hexDigitMsb0ToInt('7')); [EOL]     assertEquals(0x1, Conversion.hexDigitMsb0ToInt('8')); [EOL]     assertEquals(0x9, Conversion.hexDigitMsb0ToInt('9')); [EOL]     assertEquals(0x5, Conversion.hexDigitMsb0ToInt('A')); [EOL]     assertEquals(0x5, Conversion.hexDigitMsb0ToInt('a')); [EOL]     assertEquals(0xD, Conversion.hexDigitMsb0ToInt('B')); [EOL]     assertEquals(0xD, Conversion.hexDigitMsb0ToInt('b')); [EOL]     assertEquals(0x3, Conversion.hexDigitMsb0ToInt('C')); [EOL]     assertEquals(0x3, Conversion.hexDigitMsb0ToInt('c')); [EOL]     assertEquals(0xB, Conversion.hexDigitMsb0ToInt('D')); [EOL]     assertEquals(0xB, Conversion.hexDigitMsb0ToInt('d')); [EOL]     assertEquals(0x7, Conversion.hexDigitMsb0ToInt('E')); [EOL]     assertEquals(0x7, Conversion.hexDigitMsb0ToInt('e')); [EOL]     assertEquals(0xF, Conversion.hexDigitMsb0ToInt('F')); [EOL]     assertEquals(0xF, Conversion.hexDigitMsb0ToInt('f')); [EOL]     try { [EOL]         Conversion.hexDigitMsb0ToInt('G'); [EOL]         fail("Thrown " + IllegalArgumentException.class.getName() + " expected"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL] }
@Test [EOL] public void testHexDigitMsb0ToInt() { [EOL]     assertEquals(0x0, Conversion.hexDigitMsb0ToInt('0')); [EOL]     assertEquals(0x8, Conversion.hexDigitMsb0ToInt('1')); [EOL]     assertEquals(0x4, Conversion.hexDigitMsb0ToInt('2')); [EOL]     assertEquals(0xC, Conversion.hexDigitMsb0ToInt('3')); [EOL]     assertEquals(0x2, Conversion.hexDigitMsb0ToInt('4')); [EOL]     assertEquals(0xA, Conversion.hexDigitMsb0ToInt('5')); [EOL]     assertEquals(0x6, Conversion.hexDigitMsb0ToInt('6')); [EOL]     assertEquals(0xE, Conversion.hexDigitMsb0ToInt('7')); [EOL]     assertEquals(0x1, Conversion.hexDigitMsb0ToInt('8')); [EOL]     assertEquals(0x9, Conversion.hexDigitMsb0ToInt('9')); [EOL]     assertEquals(0x5, Conversion.hexDigitMsb0ToInt('A')); [EOL]     assertEquals(0x5, Conversion.hexDigitMsb0ToInt('a')); [EOL]     assertEquals(0xD, Conversion.hexDigitMsb0ToInt('B')); [EOL]     assertEquals(0xD, Conversion.hexDigitMsb0ToInt('b')); [EOL]     assertEquals(0x3, Conversion.hexDigitMsb0ToInt('C')); [EOL]     assertEquals(0x3, Conversion.hexDigitMsb0ToInt('c')); [EOL]     assertEquals(0xB, Conversion.hexDigitMsb0ToInt('D')); [EOL]     assertEquals(0xB, Conversion.hexDigitMsb0ToInt('d')); [EOL]     assertEquals(0x7, Conversion.hexDigitMsb0ToInt('E')); [EOL]     assertEquals(0x7, Conversion.hexDigitMsb0ToInt('e')); [EOL]     assertEquals(0xF, Conversion.hexDigitMsb0ToInt('F')); [EOL]     assertEquals(0xF, Conversion.hexDigitMsb0ToInt('f')); [EOL]     try { [EOL]         Conversion.hexDigitMsb0ToInt('G'); [EOL]         fail("Thrown " + IllegalArgumentException.class.getName() + " expected"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL] }
@Test [EOL] public void testHexDigitMsb0ToInt() { [EOL]     assertEquals(0x0, Conversion.hexDigitMsb0ToInt('0')); [EOL]     assertEquals(0x8, Conversion.hexDigitMsb0ToInt('1')); [EOL]     assertEquals(0x4, Conversion.hexDigitMsb0ToInt('2')); [EOL]     assertEquals(0xC, Conversion.hexDigitMsb0ToInt('3')); [EOL]     assertEquals(0x2, Conversion.hexDigitMsb0ToInt('4')); [EOL]     assertEquals(0xA, Conversion.hexDigitMsb0ToInt('5')); [EOL]     assertEquals(0x6, Conversion.hexDigitMsb0ToInt('6')); [EOL]     assertEquals(0xE, Conversion.hexDigitMsb0ToInt('7')); [EOL]     assertEquals(0x1, Conversion.hexDigitMsb0ToInt('8')); [EOL]     assertEquals(0x9, Conversion.hexDigitMsb0ToInt('9')); [EOL]     assertEquals(0x5, Conversion.hexDigitMsb0ToInt('A')); [EOL]     assertEquals(0x5, Conversion.hexDigitMsb0ToInt('a')); [EOL]     assertEquals(0xD, Conversion.hexDigitMsb0ToInt('B')); [EOL]     assertEquals(0xD, Conversion.hexDigitMsb0ToInt('b')); [EOL]     assertEquals(0x3, Conversion.hexDigitMsb0ToInt('C')); [EOL]     assertEquals(0x3, Conversion.hexDigitMsb0ToInt('c')); [EOL]     assertEquals(0xB, Conversion.hexDigitMsb0ToInt('D')); [EOL]     assertEquals(0xB, Conversion.hexDigitMsb0ToInt('d')); [EOL]     assertEquals(0x7, Conversion.hexDigitMsb0ToInt('E')); [EOL]     assertEquals(0x7, Conversion.hexDigitMsb0ToInt('e')); [EOL]     assertEquals(0xF, Conversion.hexDigitMsb0ToInt('F')); [EOL]     assertEquals(0xF, Conversion.hexDigitMsb0ToInt('f')); [EOL]     try { [EOL]         Conversion.hexDigitMsb0ToInt('G'); [EOL]         fail("Thrown " + IllegalArgumentException.class.getName() + " expected"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL] }
@Test [EOL] public void testHexDigitMsb0ToInt() { [EOL]     assertEquals(0x0, Conversion.hexDigitMsb0ToInt('0')); [EOL]     assertEquals(0x8, Conversion.hexDigitMsb0ToInt('1')); [EOL]     assertEquals(0x4, Conversion.hexDigitMsb0ToInt('2')); [EOL]     assertEquals(0xC, Conversion.hexDigitMsb0ToInt('3')); [EOL]     assertEquals(0x2, Conversion.hexDigitMsb0ToInt('4')); [EOL]     assertEquals(0xA, Conversion.hexDigitMsb0ToInt('5')); [EOL]     assertEquals(0x6, Conversion.hexDigitMsb0ToInt('6')); [EOL]     assertEquals(0xE, Conversion.hexDigitMsb0ToInt('7')); [EOL]     assertEquals(0x1, Conversion.hexDigitMsb0ToInt('8')); [EOL]     assertEquals(0x9, Conversion.hexDigitMsb0ToInt('9')); [EOL]     assertEquals(0x5, Conversion.hexDigitMsb0ToInt('A')); [EOL]     assertEquals(0x5, Conversion.hexDigitMsb0ToInt('a')); [EOL]     assertEquals(0xD, Conversion.hexDigitMsb0ToInt('B')); [EOL]     assertEquals(0xD, Conversion.hexDigitMsb0ToInt('b')); [EOL]     assertEquals(0x3, Conversion.hexDigitMsb0ToInt('C')); [EOL]     assertEquals(0x3, Conversion.hexDigitMsb0ToInt('c')); [EOL]     assertEquals(0xB, Conversion.hexDigitMsb0ToInt('D')); [EOL]     assertEquals(0xB, Conversion.hexDigitMsb0ToInt('d')); [EOL]     assertEquals(0x7, Conversion.hexDigitMsb0ToInt('E')); [EOL]     assertEquals(0x7, Conversion.hexDigitMsb0ToInt('e')); [EOL]     assertEquals(0xF, Conversion.hexDigitMsb0ToInt('F')); [EOL]     assertEquals(0xF, Conversion.hexDigitMsb0ToInt('f')); [EOL]     try { [EOL]         Conversion.hexDigitMsb0ToInt('G'); [EOL]         fail("Thrown " + IllegalArgumentException.class.getName() + " expected"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL] }
@Test [EOL] public void testHexDigitMsb0ToInt() { [EOL]     assertEquals(0x0, Conversion.hexDigitMsb0ToInt('0')); [EOL]     assertEquals(0x8, Conversion.hexDigitMsb0ToInt('1')); [EOL]     assertEquals(0x4, Conversion.hexDigitMsb0ToInt('2')); [EOL]     assertEquals(0xC, Conversion.hexDigitMsb0ToInt('3')); [EOL]     assertEquals(0x2, Conversion.hexDigitMsb0ToInt('4')); [EOL]     assertEquals(0xA, Conversion.hexDigitMsb0ToInt('5')); [EOL]     assertEquals(0x6, Conversion.hexDigitMsb0ToInt('6')); [EOL]     assertEquals(0xE, Conversion.hexDigitMsb0ToInt('7')); [EOL]     assertEquals(0x1, Conversion.hexDigitMsb0ToInt('8')); [EOL]     assertEquals(0x9, Conversion.hexDigitMsb0ToInt('9')); [EOL]     assertEquals(0x5, Conversion.hexDigitMsb0ToInt('A')); [EOL]     assertEquals(0x5, Conversion.hexDigitMsb0ToInt('a')); [EOL]     assertEquals(0xD, Conversion.hexDigitMsb0ToInt('B')); [EOL]     assertEquals(0xD, Conversion.hexDigitMsb0ToInt('b')); [EOL]     assertEquals(0x3, Conversion.hexDigitMsb0ToInt('C')); [EOL]     assertEquals(0x3, Conversion.hexDigitMsb0ToInt('c')); [EOL]     assertEquals(0xB, Conversion.hexDigitMsb0ToInt('D')); [EOL]     assertEquals(0xB, Conversion.hexDigitMsb0ToInt('d')); [EOL]     assertEquals(0x7, Conversion.hexDigitMsb0ToInt('E')); [EOL]     assertEquals(0x7, Conversion.hexDigitMsb0ToInt('e')); [EOL]     assertEquals(0xF, Conversion.hexDigitMsb0ToInt('F')); [EOL]     assertEquals(0xF, Conversion.hexDigitMsb0ToInt('f')); [EOL]     try { [EOL]         Conversion.hexDigitMsb0ToInt('G'); [EOL]         fail("Thrown " + IllegalArgumentException.class.getName() + " expected"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL] }
@Test [EOL] public void testHexDigitMsb0ToInt() { [EOL]     assertEquals(0x0, Conversion.hexDigitMsb0ToInt('0')); [EOL]     assertEquals(0x8, Conversion.hexDigitMsb0ToInt('1')); [EOL]     assertEquals(0x4, Conversion.hexDigitMsb0ToInt('2')); [EOL]     assertEquals(0xC, Conversion.hexDigitMsb0ToInt('3')); [EOL]     assertEquals(0x2, Conversion.hexDigitMsb0ToInt('4')); [EOL]     assertEquals(0xA, Conversion.hexDigitMsb0ToInt('5')); [EOL]     assertEquals(0x6, Conversion.hexDigitMsb0ToInt('6')); [EOL]     assertEquals(0xE, Conversion.hexDigitMsb0ToInt('7')); [EOL]     assertEquals(0x1, Conversion.hexDigitMsb0ToInt('8')); [EOL]     assertEquals(0x9, Conversion.hexDigitMsb0ToInt('9')); [EOL]     assertEquals(0x5, Conversion.hexDigitMsb0ToInt('A')); [EOL]     assertEquals(0x5, Conversion.hexDigitMsb0ToInt('a')); [EOL]     assertEquals(0xD, Conversion.hexDigitMsb0ToInt('B')); [EOL]     assertEquals(0xD, Conversion.hexDigitMsb0ToInt('b')); [EOL]     assertEquals(0x3, Conversion.hexDigitMsb0ToInt('C')); [EOL]     assertEquals(0x3, Conversion.hexDigitMsb0ToInt('c')); [EOL]     assertEquals(0xB, Conversion.hexDigitMsb0ToInt('D')); [EOL]     assertEquals(0xB, Conversion.hexDigitMsb0ToInt('d')); [EOL]     assertEquals(0x7, Conversion.hexDigitMsb0ToInt('E')); [EOL]     assertEquals(0x7, Conversion.hexDigitMsb0ToInt('e')); [EOL]     assertEquals(0xF, Conversion.hexDigitMsb0ToInt('F')); [EOL]     assertEquals(0xF, Conversion.hexDigitMsb0ToInt('f')); [EOL]     try { [EOL]         Conversion.hexDigitMsb0ToInt('G'); [EOL]         fail("Thrown " + IllegalArgumentException.class.getName() + " expected"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL] }
@Test [EOL] public void testHexDigitMsb0ToInt() { [EOL]     assertEquals(0x0, Conversion.hexDigitMsb0ToInt('0')); [EOL]     assertEquals(0x8, Conversion.hexDigitMsb0ToInt('1')); [EOL]     assertEquals(0x4, Conversion.hexDigitMsb0ToInt('2')); [EOL]     assertEquals(0xC, Conversion.hexDigitMsb0ToInt('3')); [EOL]     assertEquals(0x2, Conversion.hexDigitMsb0ToInt('4')); [EOL]     assertEquals(0xA, Conversion.hexDigitMsb0ToInt('5')); [EOL]     assertEquals(0x6, Conversion.hexDigitMsb0ToInt('6')); [EOL]     assertEquals(0xE, Conversion.hexDigitMsb0ToInt('7')); [EOL]     assertEquals(0x1, Conversion.hexDigitMsb0ToInt('8')); [EOL]     assertEquals(0x9, Conversion.hexDigitMsb0ToInt('9')); [EOL]     assertEquals(0x5, Conversion.hexDigitMsb0ToInt('A')); [EOL]     assertEquals(0x5, Conversion.hexDigitMsb0ToInt('a')); [EOL]     assertEquals(0xD, Conversion.hexDigitMsb0ToInt('B')); [EOL]     assertEquals(0xD, Conversion.hexDigitMsb0ToInt('b')); [EOL]     assertEquals(0x3, Conversion.hexDigitMsb0ToInt('C')); [EOL]     assertEquals(0x3, Conversion.hexDigitMsb0ToInt('c')); [EOL]     assertEquals(0xB, Conversion.hexDigitMsb0ToInt('D')); [EOL]     assertEquals(0xB, Conversion.hexDigitMsb0ToInt('d')); [EOL]     assertEquals(0x7, Conversion.hexDigitMsb0ToInt('E')); [EOL]     assertEquals(0x7, Conversion.hexDigitMsb0ToInt('e')); [EOL]     assertEquals(0xF, Conversion.hexDigitMsb0ToInt('F')); [EOL]     assertEquals(0xF, Conversion.hexDigitMsb0ToInt('f')); [EOL]     try { [EOL]         Conversion.hexDigitMsb0ToInt('G'); [EOL]         fail("Thrown " + IllegalArgumentException.class.getName() + " expected"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL] }
@Test [EOL] public void testHexDigitMsb0ToInt() { [EOL]     assertEquals(0x0, Conversion.hexDigitMsb0ToInt('0')); [EOL]     assertEquals(0x8, Conversion.hexDigitMsb0ToInt('1')); [EOL]     assertEquals(0x4, Conversion.hexDigitMsb0ToInt('2')); [EOL]     assertEquals(0xC, Conversion.hexDigitMsb0ToInt('3')); [EOL]     assertEquals(0x2, Conversion.hexDigitMsb0ToInt('4')); [EOL]     assertEquals(0xA, Conversion.hexDigitMsb0ToInt('5')); [EOL]     assertEquals(0x6, Conversion.hexDigitMsb0ToInt('6')); [EOL]     assertEquals(0xE, Conversion.hexDigitMsb0ToInt('7')); [EOL]     assertEquals(0x1, Conversion.hexDigitMsb0ToInt('8')); [EOL]     assertEquals(0x9, Conversion.hexDigitMsb0ToInt('9')); [EOL]     assertEquals(0x5, Conversion.hexDigitMsb0ToInt('A')); [EOL]     assertEquals(0x5, Conversion.hexDigitMsb0ToInt('a')); [EOL]     assertEquals(0xD, Conversion.hexDigitMsb0ToInt('B')); [EOL]     assertEquals(0xD, Conversion.hexDigitMsb0ToInt('b')); [EOL]     assertEquals(0x3, Conversion.hexDigitMsb0ToInt('C')); [EOL]     assertEquals(0x3, Conversion.hexDigitMsb0ToInt('c')); [EOL]     assertEquals(0xB, Conversion.hexDigitMsb0ToInt('D')); [EOL]     assertEquals(0xB, Conversion.hexDigitMsb0ToInt('d')); [EOL]     assertEquals(0x7, Conversion.hexDigitMsb0ToInt('E')); [EOL]     assertEquals(0x7, Conversion.hexDigitMsb0ToInt('e')); [EOL]     assertEquals(0xF, Conversion.hexDigitMsb0ToInt('F')); [EOL]     assertEquals(0xF, Conversion.hexDigitMsb0ToInt('f')); [EOL]     try { [EOL]         Conversion.hexDigitMsb0ToInt('G'); [EOL]         fail("Thrown " + IllegalArgumentException.class.getName() + " expected"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL] }
@Test [EOL] public void testHexDigitMsb0ToInt() { [EOL]     assertEquals(0x0, Conversion.hexDigitMsb0ToInt('0')); [EOL]     assertEquals(0x8, Conversion.hexDigitMsb0ToInt('1')); [EOL]     assertEquals(0x4, Conversion.hexDigitMsb0ToInt('2')); [EOL]     assertEquals(0xC, Conversion.hexDigitMsb0ToInt('3')); [EOL]     assertEquals(0x2, Conversion.hexDigitMsb0ToInt('4')); [EOL]     assertEquals(0xA, Conversion.hexDigitMsb0ToInt('5')); [EOL]     assertEquals(0x6, Conversion.hexDigitMsb0ToInt('6')); [EOL]     assertEquals(0xE, Conversion.hexDigitMsb0ToInt('7')); [EOL]     assertEquals(0x1, Conversion.hexDigitMsb0ToInt('8')); [EOL]     assertEquals(0x9, Conversion.hexDigitMsb0ToInt('9')); [EOL]     assertEquals(0x5, Conversion.hexDigitMsb0ToInt('A')); [EOL]     assertEquals(0x5, Conversion.hexDigitMsb0ToInt('a')); [EOL]     assertEquals(0xD, Conversion.hexDigitMsb0ToInt('B')); [EOL]     assertEquals(0xD, Conversion.hexDigitMsb0ToInt('b')); [EOL]     assertEquals(0x3, Conversion.hexDigitMsb0ToInt('C')); [EOL]     assertEquals(0x3, Conversion.hexDigitMsb0ToInt('c')); [EOL]     assertEquals(0xB, Conversion.hexDigitMsb0ToInt('D')); [EOL]     assertEquals(0xB, Conversion.hexDigitMsb0ToInt('d')); [EOL]     assertEquals(0x7, Conversion.hexDigitMsb0ToInt('E')); [EOL]     assertEquals(0x7, Conversion.hexDigitMsb0ToInt('e')); [EOL]     assertEquals(0xF, Conversion.hexDigitMsb0ToInt('F')); [EOL]     assertEquals(0xF, Conversion.hexDigitMsb0ToInt('f')); [EOL]     try { [EOL]         Conversion.hexDigitMsb0ToInt('G'); [EOL]         fail("Thrown " + IllegalArgumentException.class.getName() + " expected"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL] }
@Test [EOL] public void testHexDigitMsb0ToInt() { [EOL]     assertEquals(0x0, Conversion.hexDigitMsb0ToInt('0')); [EOL]     assertEquals(0x8, Conversion.hexDigitMsb0ToInt('1')); [EOL]     assertEquals(0x4, Conversion.hexDigitMsb0ToInt('2')); [EOL]     assertEquals(0xC, Conversion.hexDigitMsb0ToInt('3')); [EOL]     assertEquals(0x2, Conversion.hexDigitMsb0ToInt('4')); [EOL]     assertEquals(0xA, Conversion.hexDigitMsb0ToInt('5')); [EOL]     assertEquals(0x6, Conversion.hexDigitMsb0ToInt('6')); [EOL]     assertEquals(0xE, Conversion.hexDigitMsb0ToInt('7')); [EOL]     assertEquals(0x1, Conversion.hexDigitMsb0ToInt('8')); [EOL]     assertEquals(0x9, Conversion.hexDigitMsb0ToInt('9')); [EOL]     assertEquals(0x5, Conversion.hexDigitMsb0ToInt('A')); [EOL]     assertEquals(0x5, Conversion.hexDigitMsb0ToInt('a')); [EOL]     assertEquals(0xD, Conversion.hexDigitMsb0ToInt('B')); [EOL]     assertEquals(0xD, Conversion.hexDigitMsb0ToInt('b')); [EOL]     assertEquals(0x3, Conversion.hexDigitMsb0ToInt('C')); [EOL]     assertEquals(0x3, Conversion.hexDigitMsb0ToInt('c')); [EOL]     assertEquals(0xB, Conversion.hexDigitMsb0ToInt('D')); [EOL]     assertEquals(0xB, Conversion.hexDigitMsb0ToInt('d')); [EOL]     assertEquals(0x7, Conversion.hexDigitMsb0ToInt('E')); [EOL]     assertEquals(0x7, Conversion.hexDigitMsb0ToInt('e')); [EOL]     assertEquals(0xF, Conversion.hexDigitMsb0ToInt('F')); [EOL]     assertEquals(0xF, Conversion.hexDigitMsb0ToInt('f')); [EOL]     try { [EOL]         Conversion.hexDigitMsb0ToInt('G'); [EOL]         fail("Thrown " + IllegalArgumentException.class.getName() + " expected"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL] }
@Test [EOL] public void testHexDigitMsb0ToInt() { [EOL]     assertEquals(0x0, Conversion.hexDigitMsb0ToInt('0')); [EOL]     assertEquals(0x8, Conversion.hexDigitMsb0ToInt('1')); [EOL]     assertEquals(0x4, Conversion.hexDigitMsb0ToInt('2')); [EOL]     assertEquals(0xC, Conversion.hexDigitMsb0ToInt('3')); [EOL]     assertEquals(0x2, Conversion.hexDigitMsb0ToInt('4')); [EOL]     assertEquals(0xA, Conversion.hexDigitMsb0ToInt('5')); [EOL]     assertEquals(0x6, Conversion.hexDigitMsb0ToInt('6')); [EOL]     assertEquals(0xE, Conversion.hexDigitMsb0ToInt('7')); [EOL]     assertEquals(0x1, Conversion.hexDigitMsb0ToInt('8')); [EOL]     assertEquals(0x9, Conversion.hexDigitMsb0ToInt('9')); [EOL]     assertEquals(0x5, Conversion.hexDigitMsb0ToInt('A')); [EOL]     assertEquals(0x5, Conversion.hexDigitMsb0ToInt('a')); [EOL]     assertEquals(0xD, Conversion.hexDigitMsb0ToInt('B')); [EOL]     assertEquals(0xD, Conversion.hexDigitMsb0ToInt('b')); [EOL]     assertEquals(0x3, Conversion.hexDigitMsb0ToInt('C')); [EOL]     assertEquals(0x3, Conversion.hexDigitMsb0ToInt('c')); [EOL]     assertEquals(0xB, Conversion.hexDigitMsb0ToInt('D')); [EOL]     assertEquals(0xB, Conversion.hexDigitMsb0ToInt('d')); [EOL]     assertEquals(0x7, Conversion.hexDigitMsb0ToInt('E')); [EOL]     assertEquals(0x7, Conversion.hexDigitMsb0ToInt('e')); [EOL]     assertEquals(0xF, Conversion.hexDigitMsb0ToInt('F')); [EOL]     assertEquals(0xF, Conversion.hexDigitMsb0ToInt('f')); [EOL]     try { [EOL]         Conversion.hexDigitMsb0ToInt('G'); [EOL]         fail("Thrown " + IllegalArgumentException.class.getName() + " expected"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL] }
@Test [EOL] public void testHexDigitToBinary() { [EOL]     assertBinaryEquals(new boolean[] { false, false, false, false }, Conversion.hexDigitToBinary('0')); [EOL]     assertBinaryEquals(new boolean[] { true, false, false, false }, Conversion.hexDigitToBinary('1')); [EOL]     assertBinaryEquals(new boolean[] { false, true, false, false }, Conversion.hexDigitToBinary('2')); [EOL]     assertBinaryEquals(new boolean[] { true, true, false, false }, Conversion.hexDigitToBinary('3')); [EOL]     assertBinaryEquals(new boolean[] { false, false, true, false }, Conversion.hexDigitToBinary('4')); [EOL]     assertBinaryEquals(new boolean[] { true, false, true, false }, Conversion.hexDigitToBinary('5')); [EOL]     assertBinaryEquals(new boolean[] { false, true, true, false }, Conversion.hexDigitToBinary('6')); [EOL]     assertBinaryEquals(new boolean[] { true, true, true, false }, Conversion.hexDigitToBinary('7')); [EOL]     assertBinaryEquals(new boolean[] { false, false, false, true }, Conversion.hexDigitToBinary('8')); [EOL]     assertBinaryEquals(new boolean[] { true, false, false, true }, Conversion.hexDigitToBinary('9')); [EOL]     assertBinaryEquals(new boolean[] { false, true, false, true }, Conversion.hexDigitToBinary('A')); [EOL]     assertBinaryEquals(new boolean[] { false, true, false, true }, Conversion.hexDigitToBinary('a')); [EOL]     assertBinaryEquals(new boolean[] { true, true, false, true }, Conversion.hexDigitToBinary('B')); [EOL]     assertBinaryEquals(new boolean[] { true, true, false, true }, Conversion.hexDigitToBinary('b')); [EOL]     assertBinaryEquals(new boolean[] { false, false, true, true }, Conversion.hexDigitToBinary('C')); [EOL]     assertBinaryEquals(new boolean[] { false, false, true, true }, Conversion.hexDigitToBinary('c')); [EOL]     assertBinaryEquals(new boolean[] { true, false, true, true }, Conversion.hexDigitToBinary('D')); [EOL]     assertBinaryEquals(new boolean[] { true, false, true, true }, Conversion.hexDigitToBinary('d')); [EOL]     assertBinaryEquals(new boolean[] { false, true, true, true }, Conversion.hexDigitToBinary('E')); [EOL]     assertBinaryEquals(new boolean[] { false, true, true, true }, Conversion.hexDigitToBinary('e')); [EOL]     assertBinaryEquals(new boolean[] { true, true, true, true }, Conversion.hexDigitToBinary('F')); [EOL]     assertBinaryEquals(new boolean[] { true, true, true, true }, Conversion.hexDigitToBinary('f')); [EOL]     try { [EOL]         Conversion.hexDigitToBinary('G'); [EOL]         fail("Thrown " + IllegalArgumentException.class.getName() + " expected"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL] }
@Test [EOL] public void testHexDigitToBinary() { [EOL]     assertBinaryEquals(new boolean[] { false, false, false, false }, Conversion.hexDigitToBinary('0')); [EOL]     assertBinaryEquals(new boolean[] { true, false, false, false }, Conversion.hexDigitToBinary('1')); [EOL]     assertBinaryEquals(new boolean[] { false, true, false, false }, Conversion.hexDigitToBinary('2')); [EOL]     assertBinaryEquals(new boolean[] { true, true, false, false }, Conversion.hexDigitToBinary('3')); [EOL]     assertBinaryEquals(new boolean[] { false, false, true, false }, Conversion.hexDigitToBinary('4')); [EOL]     assertBinaryEquals(new boolean[] { true, false, true, false }, Conversion.hexDigitToBinary('5')); [EOL]     assertBinaryEquals(new boolean[] { false, true, true, false }, Conversion.hexDigitToBinary('6')); [EOL]     assertBinaryEquals(new boolean[] { true, true, true, false }, Conversion.hexDigitToBinary('7')); [EOL]     assertBinaryEquals(new boolean[] { false, false, false, true }, Conversion.hexDigitToBinary('8')); [EOL]     assertBinaryEquals(new boolean[] { true, false, false, true }, Conversion.hexDigitToBinary('9')); [EOL]     assertBinaryEquals(new boolean[] { false, true, false, true }, Conversion.hexDigitToBinary('A')); [EOL]     assertBinaryEquals(new boolean[] { false, true, false, true }, Conversion.hexDigitToBinary('a')); [EOL]     assertBinaryEquals(new boolean[] { true, true, false, true }, Conversion.hexDigitToBinary('B')); [EOL]     assertBinaryEquals(new boolean[] { true, true, false, true }, Conversion.hexDigitToBinary('b')); [EOL]     assertBinaryEquals(new boolean[] { false, false, true, true }, Conversion.hexDigitToBinary('C')); [EOL]     assertBinaryEquals(new boolean[] { false, false, true, true }, Conversion.hexDigitToBinary('c')); [EOL]     assertBinaryEquals(new boolean[] { true, false, true, true }, Conversion.hexDigitToBinary('D')); [EOL]     assertBinaryEquals(new boolean[] { true, false, true, true }, Conversion.hexDigitToBinary('d')); [EOL]     assertBinaryEquals(new boolean[] { false, true, true, true }, Conversion.hexDigitToBinary('E')); [EOL]     assertBinaryEquals(new boolean[] { false, true, true, true }, Conversion.hexDigitToBinary('e')); [EOL]     assertBinaryEquals(new boolean[] { true, true, true, true }, Conversion.hexDigitToBinary('F')); [EOL]     assertBinaryEquals(new boolean[] { true, true, true, true }, Conversion.hexDigitToBinary('f')); [EOL]     try { [EOL]         Conversion.hexDigitToBinary('G'); [EOL]         fail("Thrown " + IllegalArgumentException.class.getName() + " expected"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL] }
@Test [EOL] public void testHexDigitToBinary() { [EOL]     assertBinaryEquals(new boolean[] { false, false, false, false }, Conversion.hexDigitToBinary('0')); [EOL]     assertBinaryEquals(new boolean[] { true, false, false, false }, Conversion.hexDigitToBinary('1')); [EOL]     assertBinaryEquals(new boolean[] { false, true, false, false }, Conversion.hexDigitToBinary('2')); [EOL]     assertBinaryEquals(new boolean[] { true, true, false, false }, Conversion.hexDigitToBinary('3')); [EOL]     assertBinaryEquals(new boolean[] { false, false, true, false }, Conversion.hexDigitToBinary('4')); [EOL]     assertBinaryEquals(new boolean[] { true, false, true, false }, Conversion.hexDigitToBinary('5')); [EOL]     assertBinaryEquals(new boolean[] { false, true, true, false }, Conversion.hexDigitToBinary('6')); [EOL]     assertBinaryEquals(new boolean[] { true, true, true, false }, Conversion.hexDigitToBinary('7')); [EOL]     assertBinaryEquals(new boolean[] { false, false, false, true }, Conversion.hexDigitToBinary('8')); [EOL]     assertBinaryEquals(new boolean[] { true, false, false, true }, Conversion.hexDigitToBinary('9')); [EOL]     assertBinaryEquals(new boolean[] { false, true, false, true }, Conversion.hexDigitToBinary('A')); [EOL]     assertBinaryEquals(new boolean[] { false, true, false, true }, Conversion.hexDigitToBinary('a')); [EOL]     assertBinaryEquals(new boolean[] { true, true, false, true }, Conversion.hexDigitToBinary('B')); [EOL]     assertBinaryEquals(new boolean[] { true, true, false, true }, Conversion.hexDigitToBinary('b')); [EOL]     assertBinaryEquals(new boolean[] { false, false, true, true }, Conversion.hexDigitToBinary('C')); [EOL]     assertBinaryEquals(new boolean[] { false, false, true, true }, Conversion.hexDigitToBinary('c')); [EOL]     assertBinaryEquals(new boolean[] { true, false, true, true }, Conversion.hexDigitToBinary('D')); [EOL]     assertBinaryEquals(new boolean[] { true, false, true, true }, Conversion.hexDigitToBinary('d')); [EOL]     assertBinaryEquals(new boolean[] { false, true, true, true }, Conversion.hexDigitToBinary('E')); [EOL]     assertBinaryEquals(new boolean[] { false, true, true, true }, Conversion.hexDigitToBinary('e')); [EOL]     assertBinaryEquals(new boolean[] { true, true, true, true }, Conversion.hexDigitToBinary('F')); [EOL]     assertBinaryEquals(new boolean[] { true, true, true, true }, Conversion.hexDigitToBinary('f')); [EOL]     try { [EOL]         Conversion.hexDigitToBinary('G'); [EOL]         fail("Thrown " + IllegalArgumentException.class.getName() + " expected"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL] }
@Test [EOL] public void testHexDigitToBinary() { [EOL]     assertBinaryEquals(new boolean[] { false, false, false, false }, Conversion.hexDigitToBinary('0')); [EOL]     assertBinaryEquals(new boolean[] { true, false, false, false }, Conversion.hexDigitToBinary('1')); [EOL]     assertBinaryEquals(new boolean[] { false, true, false, false }, Conversion.hexDigitToBinary('2')); [EOL]     assertBinaryEquals(new boolean[] { true, true, false, false }, Conversion.hexDigitToBinary('3')); [EOL]     assertBinaryEquals(new boolean[] { false, false, true, false }, Conversion.hexDigitToBinary('4')); [EOL]     assertBinaryEquals(new boolean[] { true, false, true, false }, Conversion.hexDigitToBinary('5')); [EOL]     assertBinaryEquals(new boolean[] { false, true, true, false }, Conversion.hexDigitToBinary('6')); [EOL]     assertBinaryEquals(new boolean[] { true, true, true, false }, Conversion.hexDigitToBinary('7')); [EOL]     assertBinaryEquals(new boolean[] { false, false, false, true }, Conversion.hexDigitToBinary('8')); [EOL]     assertBinaryEquals(new boolean[] { true, false, false, true }, Conversion.hexDigitToBinary('9')); [EOL]     assertBinaryEquals(new boolean[] { false, true, false, true }, Conversion.hexDigitToBinary('A')); [EOL]     assertBinaryEquals(new boolean[] { false, true, false, true }, Conversion.hexDigitToBinary('a')); [EOL]     assertBinaryEquals(new boolean[] { true, true, false, true }, Conversion.hexDigitToBinary('B')); [EOL]     assertBinaryEquals(new boolean[] { true, true, false, true }, Conversion.hexDigitToBinary('b')); [EOL]     assertBinaryEquals(new boolean[] { false, false, true, true }, Conversion.hexDigitToBinary('C')); [EOL]     assertBinaryEquals(new boolean[] { false, false, true, true }, Conversion.hexDigitToBinary('c')); [EOL]     assertBinaryEquals(new boolean[] { true, false, true, true }, Conversion.hexDigitToBinary('D')); [EOL]     assertBinaryEquals(new boolean[] { true, false, true, true }, Conversion.hexDigitToBinary('d')); [EOL]     assertBinaryEquals(new boolean[] { false, true, true, true }, Conversion.hexDigitToBinary('E')); [EOL]     assertBinaryEquals(new boolean[] { false, true, true, true }, Conversion.hexDigitToBinary('e')); [EOL]     assertBinaryEquals(new boolean[] { true, true, true, true }, Conversion.hexDigitToBinary('F')); [EOL]     assertBinaryEquals(new boolean[] { true, true, true, true }, Conversion.hexDigitToBinary('f')); [EOL]     try { [EOL]         Conversion.hexDigitToBinary('G'); [EOL]         fail("Thrown " + IllegalArgumentException.class.getName() + " expected"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL] }
@Test [EOL] public void testHexDigitToBinary() { [EOL]     assertBinaryEquals(new boolean[] { false, false, false, false }, Conversion.hexDigitToBinary('0')); [EOL]     assertBinaryEquals(new boolean[] { true, false, false, false }, Conversion.hexDigitToBinary('1')); [EOL]     assertBinaryEquals(new boolean[] { false, true, false, false }, Conversion.hexDigitToBinary('2')); [EOL]     assertBinaryEquals(new boolean[] { true, true, false, false }, Conversion.hexDigitToBinary('3')); [EOL]     assertBinaryEquals(new boolean[] { false, false, true, false }, Conversion.hexDigitToBinary('4')); [EOL]     assertBinaryEquals(new boolean[] { true, false, true, false }, Conversion.hexDigitToBinary('5')); [EOL]     assertBinaryEquals(new boolean[] { false, true, true, false }, Conversion.hexDigitToBinary('6')); [EOL]     assertBinaryEquals(new boolean[] { true, true, true, false }, Conversion.hexDigitToBinary('7')); [EOL]     assertBinaryEquals(new boolean[] { false, false, false, true }, Conversion.hexDigitToBinary('8')); [EOL]     assertBinaryEquals(new boolean[] { true, false, false, true }, Conversion.hexDigitToBinary('9')); [EOL]     assertBinaryEquals(new boolean[] { false, true, false, true }, Conversion.hexDigitToBinary('A')); [EOL]     assertBinaryEquals(new boolean[] { false, true, false, true }, Conversion.hexDigitToBinary('a')); [EOL]     assertBinaryEquals(new boolean[] { true, true, false, true }, Conversion.hexDigitToBinary('B')); [EOL]     assertBinaryEquals(new boolean[] { true, true, false, true }, Conversion.hexDigitToBinary('b')); [EOL]     assertBinaryEquals(new boolean[] { false, false, true, true }, Conversion.hexDigitToBinary('C')); [EOL]     assertBinaryEquals(new boolean[] { false, false, true, true }, Conversion.hexDigitToBinary('c')); [EOL]     assertBinaryEquals(new boolean[] { true, false, true, true }, Conversion.hexDigitToBinary('D')); [EOL]     assertBinaryEquals(new boolean[] { true, false, true, true }, Conversion.hexDigitToBinary('d')); [EOL]     assertBinaryEquals(new boolean[] { false, true, true, true }, Conversion.hexDigitToBinary('E')); [EOL]     assertBinaryEquals(new boolean[] { false, true, true, true }, Conversion.hexDigitToBinary('e')); [EOL]     assertBinaryEquals(new boolean[] { true, true, true, true }, Conversion.hexDigitToBinary('F')); [EOL]     assertBinaryEquals(new boolean[] { true, true, true, true }, Conversion.hexDigitToBinary('f')); [EOL]     try { [EOL]         Conversion.hexDigitToBinary('G'); [EOL]         fail("Thrown " + IllegalArgumentException.class.getName() + " expected"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL] }
@Test [EOL] public void testHexDigitToBinary() { [EOL]     assertBinaryEquals(new boolean[] { false, false, false, false }, Conversion.hexDigitToBinary('0')); [EOL]     assertBinaryEquals(new boolean[] { true, false, false, false }, Conversion.hexDigitToBinary('1')); [EOL]     assertBinaryEquals(new boolean[] { false, true, false, false }, Conversion.hexDigitToBinary('2')); [EOL]     assertBinaryEquals(new boolean[] { true, true, false, false }, Conversion.hexDigitToBinary('3')); [EOL]     assertBinaryEquals(new boolean[] { false, false, true, false }, Conversion.hexDigitToBinary('4')); [EOL]     assertBinaryEquals(new boolean[] { true, false, true, false }, Conversion.hexDigitToBinary('5')); [EOL]     assertBinaryEquals(new boolean[] { false, true, true, false }, Conversion.hexDigitToBinary('6')); [EOL]     assertBinaryEquals(new boolean[] { true, true, true, false }, Conversion.hexDigitToBinary('7')); [EOL]     assertBinaryEquals(new boolean[] { false, false, false, true }, Conversion.hexDigitToBinary('8')); [EOL]     assertBinaryEquals(new boolean[] { true, false, false, true }, Conversion.hexDigitToBinary('9')); [EOL]     assertBinaryEquals(new boolean[] { false, true, false, true }, Conversion.hexDigitToBinary('A')); [EOL]     assertBinaryEquals(new boolean[] { false, true, false, true }, Conversion.hexDigitToBinary('a')); [EOL]     assertBinaryEquals(new boolean[] { true, true, false, true }, Conversion.hexDigitToBinary('B')); [EOL]     assertBinaryEquals(new boolean[] { true, true, false, true }, Conversion.hexDigitToBinary('b')); [EOL]     assertBinaryEquals(new boolean[] { false, false, true, true }, Conversion.hexDigitToBinary('C')); [EOL]     assertBinaryEquals(new boolean[] { false, false, true, true }, Conversion.hexDigitToBinary('c')); [EOL]     assertBinaryEquals(new boolean[] { true, false, true, true }, Conversion.hexDigitToBinary('D')); [EOL]     assertBinaryEquals(new boolean[] { true, false, true, true }, Conversion.hexDigitToBinary('d')); [EOL]     assertBinaryEquals(new boolean[] { false, true, true, true }, Conversion.hexDigitToBinary('E')); [EOL]     assertBinaryEquals(new boolean[] { false, true, true, true }, Conversion.hexDigitToBinary('e')); [EOL]     assertBinaryEquals(new boolean[] { true, true, true, true }, Conversion.hexDigitToBinary('F')); [EOL]     assertBinaryEquals(new boolean[] { true, true, true, true }, Conversion.hexDigitToBinary('f')); [EOL]     try { [EOL]         Conversion.hexDigitToBinary('G'); [EOL]         fail("Thrown " + IllegalArgumentException.class.getName() + " expected"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL] }
@Test [EOL] public void testHexDigitToBinary() { [EOL]     assertBinaryEquals(new boolean[] { false, false, false, false }, Conversion.hexDigitToBinary('0')); [EOL]     assertBinaryEquals(new boolean[] { true, false, false, false }, Conversion.hexDigitToBinary('1')); [EOL]     assertBinaryEquals(new boolean[] { false, true, false, false }, Conversion.hexDigitToBinary('2')); [EOL]     assertBinaryEquals(new boolean[] { true, true, false, false }, Conversion.hexDigitToBinary('3')); [EOL]     assertBinaryEquals(new boolean[] { false, false, true, false }, Conversion.hexDigitToBinary('4')); [EOL]     assertBinaryEquals(new boolean[] { true, false, true, false }, Conversion.hexDigitToBinary('5')); [EOL]     assertBinaryEquals(new boolean[] { false, true, true, false }, Conversion.hexDigitToBinary('6')); [EOL]     assertBinaryEquals(new boolean[] { true, true, true, false }, Conversion.hexDigitToBinary('7')); [EOL]     assertBinaryEquals(new boolean[] { false, false, false, true }, Conversion.hexDigitToBinary('8')); [EOL]     assertBinaryEquals(new boolean[] { true, false, false, true }, Conversion.hexDigitToBinary('9')); [EOL]     assertBinaryEquals(new boolean[] { false, true, false, true }, Conversion.hexDigitToBinary('A')); [EOL]     assertBinaryEquals(new boolean[] { false, true, false, true }, Conversion.hexDigitToBinary('a')); [EOL]     assertBinaryEquals(new boolean[] { true, true, false, true }, Conversion.hexDigitToBinary('B')); [EOL]     assertBinaryEquals(new boolean[] { true, true, false, true }, Conversion.hexDigitToBinary('b')); [EOL]     assertBinaryEquals(new boolean[] { false, false, true, true }, Conversion.hexDigitToBinary('C')); [EOL]     assertBinaryEquals(new boolean[] { false, false, true, true }, Conversion.hexDigitToBinary('c')); [EOL]     assertBinaryEquals(new boolean[] { true, false, true, true }, Conversion.hexDigitToBinary('D')); [EOL]     assertBinaryEquals(new boolean[] { true, false, true, true }, Conversion.hexDigitToBinary('d')); [EOL]     assertBinaryEquals(new boolean[] { false, true, true, true }, Conversion.hexDigitToBinary('E')); [EOL]     assertBinaryEquals(new boolean[] { false, true, true, true }, Conversion.hexDigitToBinary('e')); [EOL]     assertBinaryEquals(new boolean[] { true, true, true, true }, Conversion.hexDigitToBinary('F')); [EOL]     assertBinaryEquals(new boolean[] { true, true, true, true }, Conversion.hexDigitToBinary('f')); [EOL]     try { [EOL]         Conversion.hexDigitToBinary('G'); [EOL]         fail("Thrown " + IllegalArgumentException.class.getName() + " expected"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL] }
@Test [EOL] public void testHexDigitToBinary() { [EOL]     assertBinaryEquals(new boolean[] { false, false, false, false }, Conversion.hexDigitToBinary('0')); [EOL]     assertBinaryEquals(new boolean[] { true, false, false, false }, Conversion.hexDigitToBinary('1')); [EOL]     assertBinaryEquals(new boolean[] { false, true, false, false }, Conversion.hexDigitToBinary('2')); [EOL]     assertBinaryEquals(new boolean[] { true, true, false, false }, Conversion.hexDigitToBinary('3')); [EOL]     assertBinaryEquals(new boolean[] { false, false, true, false }, Conversion.hexDigitToBinary('4')); [EOL]     assertBinaryEquals(new boolean[] { true, false, true, false }, Conversion.hexDigitToBinary('5')); [EOL]     assertBinaryEquals(new boolean[] { false, true, true, false }, Conversion.hexDigitToBinary('6')); [EOL]     assertBinaryEquals(new boolean[] { true, true, true, false }, Conversion.hexDigitToBinary('7')); [EOL]     assertBinaryEquals(new boolean[] { false, false, false, true }, Conversion.hexDigitToBinary('8')); [EOL]     assertBinaryEquals(new boolean[] { true, false, false, true }, Conversion.hexDigitToBinary('9')); [EOL]     assertBinaryEquals(new boolean[] { false, true, false, true }, Conversion.hexDigitToBinary('A')); [EOL]     assertBinaryEquals(new boolean[] { false, true, false, true }, Conversion.hexDigitToBinary('a')); [EOL]     assertBinaryEquals(new boolean[] { true, true, false, true }, Conversion.hexDigitToBinary('B')); [EOL]     assertBinaryEquals(new boolean[] { true, true, false, true }, Conversion.hexDigitToBinary('b')); [EOL]     assertBinaryEquals(new boolean[] { false, false, true, true }, Conversion.hexDigitToBinary('C')); [EOL]     assertBinaryEquals(new boolean[] { false, false, true, true }, Conversion.hexDigitToBinary('c')); [EOL]     assertBinaryEquals(new boolean[] { true, false, true, true }, Conversion.hexDigitToBinary('D')); [EOL]     assertBinaryEquals(new boolean[] { true, false, true, true }, Conversion.hexDigitToBinary('d')); [EOL]     assertBinaryEquals(new boolean[] { false, true, true, true }, Conversion.hexDigitToBinary('E')); [EOL]     assertBinaryEquals(new boolean[] { false, true, true, true }, Conversion.hexDigitToBinary('e')); [EOL]     assertBinaryEquals(new boolean[] { true, true, true, true }, Conversion.hexDigitToBinary('F')); [EOL]     assertBinaryEquals(new boolean[] { true, true, true, true }, Conversion.hexDigitToBinary('f')); [EOL]     try { [EOL]         Conversion.hexDigitToBinary('G'); [EOL]         fail("Thrown " + IllegalArgumentException.class.getName() + " expected"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL] }
@Test [EOL] public void testHexDigitToBinary() { [EOL]     assertBinaryEquals(new boolean[] { false, false, false, false }, Conversion.hexDigitToBinary('0')); [EOL]     assertBinaryEquals(new boolean[] { true, false, false, false }, Conversion.hexDigitToBinary('1')); [EOL]     assertBinaryEquals(new boolean[] { false, true, false, false }, Conversion.hexDigitToBinary('2')); [EOL]     assertBinaryEquals(new boolean[] { true, true, false, false }, Conversion.hexDigitToBinary('3')); [EOL]     assertBinaryEquals(new boolean[] { false, false, true, false }, Conversion.hexDigitToBinary('4')); [EOL]     assertBinaryEquals(new boolean[] { true, false, true, false }, Conversion.hexDigitToBinary('5')); [EOL]     assertBinaryEquals(new boolean[] { false, true, true, false }, Conversion.hexDigitToBinary('6')); [EOL]     assertBinaryEquals(new boolean[] { true, true, true, false }, Conversion.hexDigitToBinary('7')); [EOL]     assertBinaryEquals(new boolean[] { false, false, false, true }, Conversion.hexDigitToBinary('8')); [EOL]     assertBinaryEquals(new boolean[] { true, false, false, true }, Conversion.hexDigitToBinary('9')); [EOL]     assertBinaryEquals(new boolean[] { false, true, false, true }, Conversion.hexDigitToBinary('A')); [EOL]     assertBinaryEquals(new boolean[] { false, true, false, true }, Conversion.hexDigitToBinary('a')); [EOL]     assertBinaryEquals(new boolean[] { true, true, false, true }, Conversion.hexDigitToBinary('B')); [EOL]     assertBinaryEquals(new boolean[] { true, true, false, true }, Conversion.hexDigitToBinary('b')); [EOL]     assertBinaryEquals(new boolean[] { false, false, true, true }, Conversion.hexDigitToBinary('C')); [EOL]     assertBinaryEquals(new boolean[] { false, false, true, true }, Conversion.hexDigitToBinary('c')); [EOL]     assertBinaryEquals(new boolean[] { true, false, true, true }, Conversion.hexDigitToBinary('D')); [EOL]     assertBinaryEquals(new boolean[] { true, false, true, true }, Conversion.hexDigitToBinary('d')); [EOL]     assertBinaryEquals(new boolean[] { false, true, true, true }, Conversion.hexDigitToBinary('E')); [EOL]     assertBinaryEquals(new boolean[] { false, true, true, true }, Conversion.hexDigitToBinary('e')); [EOL]     assertBinaryEquals(new boolean[] { true, true, true, true }, Conversion.hexDigitToBinary('F')); [EOL]     assertBinaryEquals(new boolean[] { true, true, true, true }, Conversion.hexDigitToBinary('f')); [EOL]     try { [EOL]         Conversion.hexDigitToBinary('G'); [EOL]         fail("Thrown " + IllegalArgumentException.class.getName() + " expected"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL] }
@Test [EOL] public void testHexDigitToBinary() { [EOL]     assertBinaryEquals(new boolean[] { false, false, false, false }, Conversion.hexDigitToBinary('0')); [EOL]     assertBinaryEquals(new boolean[] { true, false, false, false }, Conversion.hexDigitToBinary('1')); [EOL]     assertBinaryEquals(new boolean[] { false, true, false, false }, Conversion.hexDigitToBinary('2')); [EOL]     assertBinaryEquals(new boolean[] { true, true, false, false }, Conversion.hexDigitToBinary('3')); [EOL]     assertBinaryEquals(new boolean[] { false, false, true, false }, Conversion.hexDigitToBinary('4')); [EOL]     assertBinaryEquals(new boolean[] { true, false, true, false }, Conversion.hexDigitToBinary('5')); [EOL]     assertBinaryEquals(new boolean[] { false, true, true, false }, Conversion.hexDigitToBinary('6')); [EOL]     assertBinaryEquals(new boolean[] { true, true, true, false }, Conversion.hexDigitToBinary('7')); [EOL]     assertBinaryEquals(new boolean[] { false, false, false, true }, Conversion.hexDigitToBinary('8')); [EOL]     assertBinaryEquals(new boolean[] { true, false, false, true }, Conversion.hexDigitToBinary('9')); [EOL]     assertBinaryEquals(new boolean[] { false, true, false, true }, Conversion.hexDigitToBinary('A')); [EOL]     assertBinaryEquals(new boolean[] { false, true, false, true }, Conversion.hexDigitToBinary('a')); [EOL]     assertBinaryEquals(new boolean[] { true, true, false, true }, Conversion.hexDigitToBinary('B')); [EOL]     assertBinaryEquals(new boolean[] { true, true, false, true }, Conversion.hexDigitToBinary('b')); [EOL]     assertBinaryEquals(new boolean[] { false, false, true, true }, Conversion.hexDigitToBinary('C')); [EOL]     assertBinaryEquals(new boolean[] { false, false, true, true }, Conversion.hexDigitToBinary('c')); [EOL]     assertBinaryEquals(new boolean[] { true, false, true, true }, Conversion.hexDigitToBinary('D')); [EOL]     assertBinaryEquals(new boolean[] { true, false, true, true }, Conversion.hexDigitToBinary('d')); [EOL]     assertBinaryEquals(new boolean[] { false, true, true, true }, Conversion.hexDigitToBinary('E')); [EOL]     assertBinaryEquals(new boolean[] { false, true, true, true }, Conversion.hexDigitToBinary('e')); [EOL]     assertBinaryEquals(new boolean[] { true, true, true, true }, Conversion.hexDigitToBinary('F')); [EOL]     assertBinaryEquals(new boolean[] { true, true, true, true }, Conversion.hexDigitToBinary('f')); [EOL]     try { [EOL]         Conversion.hexDigitToBinary('G'); [EOL]         fail("Thrown " + IllegalArgumentException.class.getName() + " expected"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL] }
@Test [EOL] public void testHexDigitToBinary() { [EOL]     assertBinaryEquals(new boolean[] { false, false, false, false }, Conversion.hexDigitToBinary('0')); [EOL]     assertBinaryEquals(new boolean[] { true, false, false, false }, Conversion.hexDigitToBinary('1')); [EOL]     assertBinaryEquals(new boolean[] { false, true, false, false }, Conversion.hexDigitToBinary('2')); [EOL]     assertBinaryEquals(new boolean[] { true, true, false, false }, Conversion.hexDigitToBinary('3')); [EOL]     assertBinaryEquals(new boolean[] { false, false, true, false }, Conversion.hexDigitToBinary('4')); [EOL]     assertBinaryEquals(new boolean[] { true, false, true, false }, Conversion.hexDigitToBinary('5')); [EOL]     assertBinaryEquals(new boolean[] { false, true, true, false }, Conversion.hexDigitToBinary('6')); [EOL]     assertBinaryEquals(new boolean[] { true, true, true, false }, Conversion.hexDigitToBinary('7')); [EOL]     assertBinaryEquals(new boolean[] { false, false, false, true }, Conversion.hexDigitToBinary('8')); [EOL]     assertBinaryEquals(new boolean[] { true, false, false, true }, Conversion.hexDigitToBinary('9')); [EOL]     assertBinaryEquals(new boolean[] { false, true, false, true }, Conversion.hexDigitToBinary('A')); [EOL]     assertBinaryEquals(new boolean[] { false, true, false, true }, Conversion.hexDigitToBinary('a')); [EOL]     assertBinaryEquals(new boolean[] { true, true, false, true }, Conversion.hexDigitToBinary('B')); [EOL]     assertBinaryEquals(new boolean[] { true, true, false, true }, Conversion.hexDigitToBinary('b')); [EOL]     assertBinaryEquals(new boolean[] { false, false, true, true }, Conversion.hexDigitToBinary('C')); [EOL]     assertBinaryEquals(new boolean[] { false, false, true, true }, Conversion.hexDigitToBinary('c')); [EOL]     assertBinaryEquals(new boolean[] { true, false, true, true }, Conversion.hexDigitToBinary('D')); [EOL]     assertBinaryEquals(new boolean[] { true, false, true, true }, Conversion.hexDigitToBinary('d')); [EOL]     assertBinaryEquals(new boolean[] { false, true, true, true }, Conversion.hexDigitToBinary('E')); [EOL]     assertBinaryEquals(new boolean[] { false, true, true, true }, Conversion.hexDigitToBinary('e')); [EOL]     assertBinaryEquals(new boolean[] { true, true, true, true }, Conversion.hexDigitToBinary('F')); [EOL]     assertBinaryEquals(new boolean[] { true, true, true, true }, Conversion.hexDigitToBinary('f')); [EOL]     try { [EOL]         Conversion.hexDigitToBinary('G'); [EOL]         fail("Thrown " + IllegalArgumentException.class.getName() + " expected"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL] }
@Test [EOL] public void testHexDigitToBinary() { [EOL]     assertBinaryEquals(new boolean[] { false, false, false, false }, Conversion.hexDigitToBinary('0')); [EOL]     assertBinaryEquals(new boolean[] { true, false, false, false }, Conversion.hexDigitToBinary('1')); [EOL]     assertBinaryEquals(new boolean[] { false, true, false, false }, Conversion.hexDigitToBinary('2')); [EOL]     assertBinaryEquals(new boolean[] { true, true, false, false }, Conversion.hexDigitToBinary('3')); [EOL]     assertBinaryEquals(new boolean[] { false, false, true, false }, Conversion.hexDigitToBinary('4')); [EOL]     assertBinaryEquals(new boolean[] { true, false, true, false }, Conversion.hexDigitToBinary('5')); [EOL]     assertBinaryEquals(new boolean[] { false, true, true, false }, Conversion.hexDigitToBinary('6')); [EOL]     assertBinaryEquals(new boolean[] { true, true, true, false }, Conversion.hexDigitToBinary('7')); [EOL]     assertBinaryEquals(new boolean[] { false, false, false, true }, Conversion.hexDigitToBinary('8')); [EOL]     assertBinaryEquals(new boolean[] { true, false, false, true }, Conversion.hexDigitToBinary('9')); [EOL]     assertBinaryEquals(new boolean[] { false, true, false, true }, Conversion.hexDigitToBinary('A')); [EOL]     assertBinaryEquals(new boolean[] { false, true, false, true }, Conversion.hexDigitToBinary('a')); [EOL]     assertBinaryEquals(new boolean[] { true, true, false, true }, Conversion.hexDigitToBinary('B')); [EOL]     assertBinaryEquals(new boolean[] { true, true, false, true }, Conversion.hexDigitToBinary('b')); [EOL]     assertBinaryEquals(new boolean[] { false, false, true, true }, Conversion.hexDigitToBinary('C')); [EOL]     assertBinaryEquals(new boolean[] { false, false, true, true }, Conversion.hexDigitToBinary('c')); [EOL]     assertBinaryEquals(new boolean[] { true, false, true, true }, Conversion.hexDigitToBinary('D')); [EOL]     assertBinaryEquals(new boolean[] { true, false, true, true }, Conversion.hexDigitToBinary('d')); [EOL]     assertBinaryEquals(new boolean[] { false, true, true, true }, Conversion.hexDigitToBinary('E')); [EOL]     assertBinaryEquals(new boolean[] { false, true, true, true }, Conversion.hexDigitToBinary('e')); [EOL]     assertBinaryEquals(new boolean[] { true, true, true, true }, Conversion.hexDigitToBinary('F')); [EOL]     assertBinaryEquals(new boolean[] { true, true, true, true }, Conversion.hexDigitToBinary('f')); [EOL]     try { [EOL]         Conversion.hexDigitToBinary('G'); [EOL]         fail("Thrown " + IllegalArgumentException.class.getName() + " expected"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL] }
@Test [EOL] public void testHexDigitToBinary() { [EOL]     assertBinaryEquals(new boolean[] { false, false, false, false }, Conversion.hexDigitToBinary('0')); [EOL]     assertBinaryEquals(new boolean[] { true, false, false, false }, Conversion.hexDigitToBinary('1')); [EOL]     assertBinaryEquals(new boolean[] { false, true, false, false }, Conversion.hexDigitToBinary('2')); [EOL]     assertBinaryEquals(new boolean[] { true, true, false, false }, Conversion.hexDigitToBinary('3')); [EOL]     assertBinaryEquals(new boolean[] { false, false, true, false }, Conversion.hexDigitToBinary('4')); [EOL]     assertBinaryEquals(new boolean[] { true, false, true, false }, Conversion.hexDigitToBinary('5')); [EOL]     assertBinaryEquals(new boolean[] { false, true, true, false }, Conversion.hexDigitToBinary('6')); [EOL]     assertBinaryEquals(new boolean[] { true, true, true, false }, Conversion.hexDigitToBinary('7')); [EOL]     assertBinaryEquals(new boolean[] { false, false, false, true }, Conversion.hexDigitToBinary('8')); [EOL]     assertBinaryEquals(new boolean[] { true, false, false, true }, Conversion.hexDigitToBinary('9')); [EOL]     assertBinaryEquals(new boolean[] { false, true, false, true }, Conversion.hexDigitToBinary('A')); [EOL]     assertBinaryEquals(new boolean[] { false, true, false, true }, Conversion.hexDigitToBinary('a')); [EOL]     assertBinaryEquals(new boolean[] { true, true, false, true }, Conversion.hexDigitToBinary('B')); [EOL]     assertBinaryEquals(new boolean[] { true, true, false, true }, Conversion.hexDigitToBinary('b')); [EOL]     assertBinaryEquals(new boolean[] { false, false, true, true }, Conversion.hexDigitToBinary('C')); [EOL]     assertBinaryEquals(new boolean[] { false, false, true, true }, Conversion.hexDigitToBinary('c')); [EOL]     assertBinaryEquals(new boolean[] { true, false, true, true }, Conversion.hexDigitToBinary('D')); [EOL]     assertBinaryEquals(new boolean[] { true, false, true, true }, Conversion.hexDigitToBinary('d')); [EOL]     assertBinaryEquals(new boolean[] { false, true, true, true }, Conversion.hexDigitToBinary('E')); [EOL]     assertBinaryEquals(new boolean[] { false, true, true, true }, Conversion.hexDigitToBinary('e')); [EOL]     assertBinaryEquals(new boolean[] { true, true, true, true }, Conversion.hexDigitToBinary('F')); [EOL]     assertBinaryEquals(new boolean[] { true, true, true, true }, Conversion.hexDigitToBinary('f')); [EOL]     try { [EOL]         Conversion.hexDigitToBinary('G'); [EOL]         fail("Thrown " + IllegalArgumentException.class.getName() + " expected"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL] }
@Test [EOL] public void testHexDigitToBinary() { [EOL]     assertBinaryEquals(new boolean[] { false, false, false, false }, Conversion.hexDigitToBinary('0')); [EOL]     assertBinaryEquals(new boolean[] { true, false, false, false }, Conversion.hexDigitToBinary('1')); [EOL]     assertBinaryEquals(new boolean[] { false, true, false, false }, Conversion.hexDigitToBinary('2')); [EOL]     assertBinaryEquals(new boolean[] { true, true, false, false }, Conversion.hexDigitToBinary('3')); [EOL]     assertBinaryEquals(new boolean[] { false, false, true, false }, Conversion.hexDigitToBinary('4')); [EOL]     assertBinaryEquals(new boolean[] { true, false, true, false }, Conversion.hexDigitToBinary('5')); [EOL]     assertBinaryEquals(new boolean[] { false, true, true, false }, Conversion.hexDigitToBinary('6')); [EOL]     assertBinaryEquals(new boolean[] { true, true, true, false }, Conversion.hexDigitToBinary('7')); [EOL]     assertBinaryEquals(new boolean[] { false, false, false, true }, Conversion.hexDigitToBinary('8')); [EOL]     assertBinaryEquals(new boolean[] { true, false, false, true }, Conversion.hexDigitToBinary('9')); [EOL]     assertBinaryEquals(new boolean[] { false, true, false, true }, Conversion.hexDigitToBinary('A')); [EOL]     assertBinaryEquals(new boolean[] { false, true, false, true }, Conversion.hexDigitToBinary('a')); [EOL]     assertBinaryEquals(new boolean[] { true, true, false, true }, Conversion.hexDigitToBinary('B')); [EOL]     assertBinaryEquals(new boolean[] { true, true, false, true }, Conversion.hexDigitToBinary('b')); [EOL]     assertBinaryEquals(new boolean[] { false, false, true, true }, Conversion.hexDigitToBinary('C')); [EOL]     assertBinaryEquals(new boolean[] { false, false, true, true }, Conversion.hexDigitToBinary('c')); [EOL]     assertBinaryEquals(new boolean[] { true, false, true, true }, Conversion.hexDigitToBinary('D')); [EOL]     assertBinaryEquals(new boolean[] { true, false, true, true }, Conversion.hexDigitToBinary('d')); [EOL]     assertBinaryEquals(new boolean[] { false, true, true, true }, Conversion.hexDigitToBinary('E')); [EOL]     assertBinaryEquals(new boolean[] { false, true, true, true }, Conversion.hexDigitToBinary('e')); [EOL]     assertBinaryEquals(new boolean[] { true, true, true, true }, Conversion.hexDigitToBinary('F')); [EOL]     assertBinaryEquals(new boolean[] { true, true, true, true }, Conversion.hexDigitToBinary('f')); [EOL]     try { [EOL]         Conversion.hexDigitToBinary('G'); [EOL]         fail("Thrown " + IllegalArgumentException.class.getName() + " expected"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL] }
@Test [EOL] public void testHexDigitToBinary() { [EOL]     assertBinaryEquals(new boolean[] { false, false, false, false }, Conversion.hexDigitToBinary('0')); [EOL]     assertBinaryEquals(new boolean[] { true, false, false, false }, Conversion.hexDigitToBinary('1')); [EOL]     assertBinaryEquals(new boolean[] { false, true, false, false }, Conversion.hexDigitToBinary('2')); [EOL]     assertBinaryEquals(new boolean[] { true, true, false, false }, Conversion.hexDigitToBinary('3')); [EOL]     assertBinaryEquals(new boolean[] { false, false, true, false }, Conversion.hexDigitToBinary('4')); [EOL]     assertBinaryEquals(new boolean[] { true, false, true, false }, Conversion.hexDigitToBinary('5')); [EOL]     assertBinaryEquals(new boolean[] { false, true, true, false }, Conversion.hexDigitToBinary('6')); [EOL]     assertBinaryEquals(new boolean[] { true, true, true, false }, Conversion.hexDigitToBinary('7')); [EOL]     assertBinaryEquals(new boolean[] { false, false, false, true }, Conversion.hexDigitToBinary('8')); [EOL]     assertBinaryEquals(new boolean[] { true, false, false, true }, Conversion.hexDigitToBinary('9')); [EOL]     assertBinaryEquals(new boolean[] { false, true, false, true }, Conversion.hexDigitToBinary('A')); [EOL]     assertBinaryEquals(new boolean[] { false, true, false, true }, Conversion.hexDigitToBinary('a')); [EOL]     assertBinaryEquals(new boolean[] { true, true, false, true }, Conversion.hexDigitToBinary('B')); [EOL]     assertBinaryEquals(new boolean[] { true, true, false, true }, Conversion.hexDigitToBinary('b')); [EOL]     assertBinaryEquals(new boolean[] { false, false, true, true }, Conversion.hexDigitToBinary('C')); [EOL]     assertBinaryEquals(new boolean[] { false, false, true, true }, Conversion.hexDigitToBinary('c')); [EOL]     assertBinaryEquals(new boolean[] { true, false, true, true }, Conversion.hexDigitToBinary('D')); [EOL]     assertBinaryEquals(new boolean[] { true, false, true, true }, Conversion.hexDigitToBinary('d')); [EOL]     assertBinaryEquals(new boolean[] { false, true, true, true }, Conversion.hexDigitToBinary('E')); [EOL]     assertBinaryEquals(new boolean[] { false, true, true, true }, Conversion.hexDigitToBinary('e')); [EOL]     assertBinaryEquals(new boolean[] { true, true, true, true }, Conversion.hexDigitToBinary('F')); [EOL]     assertBinaryEquals(new boolean[] { true, true, true, true }, Conversion.hexDigitToBinary('f')); [EOL]     try { [EOL]         Conversion.hexDigitToBinary('G'); [EOL]         fail("Thrown " + IllegalArgumentException.class.getName() + " expected"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL] }
@Test [EOL] public void testHexDigitToBinary() { [EOL]     assertBinaryEquals(new boolean[] { false, false, false, false }, Conversion.hexDigitToBinary('0')); [EOL]     assertBinaryEquals(new boolean[] { true, false, false, false }, Conversion.hexDigitToBinary('1')); [EOL]     assertBinaryEquals(new boolean[] { false, true, false, false }, Conversion.hexDigitToBinary('2')); [EOL]     assertBinaryEquals(new boolean[] { true, true, false, false }, Conversion.hexDigitToBinary('3')); [EOL]     assertBinaryEquals(new boolean[] { false, false, true, false }, Conversion.hexDigitToBinary('4')); [EOL]     assertBinaryEquals(new boolean[] { true, false, true, false }, Conversion.hexDigitToBinary('5')); [EOL]     assertBinaryEquals(new boolean[] { false, true, true, false }, Conversion.hexDigitToBinary('6')); [EOL]     assertBinaryEquals(new boolean[] { true, true, true, false }, Conversion.hexDigitToBinary('7')); [EOL]     assertBinaryEquals(new boolean[] { false, false, false, true }, Conversion.hexDigitToBinary('8')); [EOL]     assertBinaryEquals(new boolean[] { true, false, false, true }, Conversion.hexDigitToBinary('9')); [EOL]     assertBinaryEquals(new boolean[] { false, true, false, true }, Conversion.hexDigitToBinary('A')); [EOL]     assertBinaryEquals(new boolean[] { false, true, false, true }, Conversion.hexDigitToBinary('a')); [EOL]     assertBinaryEquals(new boolean[] { true, true, false, true }, Conversion.hexDigitToBinary('B')); [EOL]     assertBinaryEquals(new boolean[] { true, true, false, true }, Conversion.hexDigitToBinary('b')); [EOL]     assertBinaryEquals(new boolean[] { false, false, true, true }, Conversion.hexDigitToBinary('C')); [EOL]     assertBinaryEquals(new boolean[] { false, false, true, true }, Conversion.hexDigitToBinary('c')); [EOL]     assertBinaryEquals(new boolean[] { true, false, true, true }, Conversion.hexDigitToBinary('D')); [EOL]     assertBinaryEquals(new boolean[] { true, false, true, true }, Conversion.hexDigitToBinary('d')); [EOL]     assertBinaryEquals(new boolean[] { false, true, true, true }, Conversion.hexDigitToBinary('E')); [EOL]     assertBinaryEquals(new boolean[] { false, true, true, true }, Conversion.hexDigitToBinary('e')); [EOL]     assertBinaryEquals(new boolean[] { true, true, true, true }, Conversion.hexDigitToBinary('F')); [EOL]     assertBinaryEquals(new boolean[] { true, true, true, true }, Conversion.hexDigitToBinary('f')); [EOL]     try { [EOL]         Conversion.hexDigitToBinary('G'); [EOL]         fail("Thrown " + IllegalArgumentException.class.getName() + " expected"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL] }
@Test [EOL] public void testHexDigitToBinary() { [EOL]     assertBinaryEquals(new boolean[] { false, false, false, false }, Conversion.hexDigitToBinary('0')); [EOL]     assertBinaryEquals(new boolean[] { true, false, false, false }, Conversion.hexDigitToBinary('1')); [EOL]     assertBinaryEquals(new boolean[] { false, true, false, false }, Conversion.hexDigitToBinary('2')); [EOL]     assertBinaryEquals(new boolean[] { true, true, false, false }, Conversion.hexDigitToBinary('3')); [EOL]     assertBinaryEquals(new boolean[] { false, false, true, false }, Conversion.hexDigitToBinary('4')); [EOL]     assertBinaryEquals(new boolean[] { true, false, true, false }, Conversion.hexDigitToBinary('5')); [EOL]     assertBinaryEquals(new boolean[] { false, true, true, false }, Conversion.hexDigitToBinary('6')); [EOL]     assertBinaryEquals(new boolean[] { true, true, true, false }, Conversion.hexDigitToBinary('7')); [EOL]     assertBinaryEquals(new boolean[] { false, false, false, true }, Conversion.hexDigitToBinary('8')); [EOL]     assertBinaryEquals(new boolean[] { true, false, false, true }, Conversion.hexDigitToBinary('9')); [EOL]     assertBinaryEquals(new boolean[] { false, true, false, true }, Conversion.hexDigitToBinary('A')); [EOL]     assertBinaryEquals(new boolean[] { false, true, false, true }, Conversion.hexDigitToBinary('a')); [EOL]     assertBinaryEquals(new boolean[] { true, true, false, true }, Conversion.hexDigitToBinary('B')); [EOL]     assertBinaryEquals(new boolean[] { true, true, false, true }, Conversion.hexDigitToBinary('b')); [EOL]     assertBinaryEquals(new boolean[] { false, false, true, true }, Conversion.hexDigitToBinary('C')); [EOL]     assertBinaryEquals(new boolean[] { false, false, true, true }, Conversion.hexDigitToBinary('c')); [EOL]     assertBinaryEquals(new boolean[] { true, false, true, true }, Conversion.hexDigitToBinary('D')); [EOL]     assertBinaryEquals(new boolean[] { true, false, true, true }, Conversion.hexDigitToBinary('d')); [EOL]     assertBinaryEquals(new boolean[] { false, true, true, true }, Conversion.hexDigitToBinary('E')); [EOL]     assertBinaryEquals(new boolean[] { false, true, true, true }, Conversion.hexDigitToBinary('e')); [EOL]     assertBinaryEquals(new boolean[] { true, true, true, true }, Conversion.hexDigitToBinary('F')); [EOL]     assertBinaryEquals(new boolean[] { true, true, true, true }, Conversion.hexDigitToBinary('f')); [EOL]     try { [EOL]         Conversion.hexDigitToBinary('G'); [EOL]         fail("Thrown " + IllegalArgumentException.class.getName() + " expected"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL] }
@Test [EOL] public void testBinaryToHexDigitMsb0_bits() { [EOL]     assertEquals('0', Conversion.binaryToHexDigitMsb0_4bits(new boolean[] { false, false, false, false })); [EOL]     assertEquals('1', Conversion.binaryToHexDigitMsb0_4bits(new boolean[] { false, false, false, true })); [EOL]     assertEquals('2', Conversion.binaryToHexDigitMsb0_4bits(new boolean[] { false, false, true, false })); [EOL]     assertEquals('3', Conversion.binaryToHexDigitMsb0_4bits(new boolean[] { false, false, true, true })); [EOL]     assertEquals('4', Conversion.binaryToHexDigitMsb0_4bits(new boolean[] { false, true, false, false })); [EOL]     assertEquals('5', Conversion.binaryToHexDigitMsb0_4bits(new boolean[] { false, true, false, true })); [EOL]     assertEquals('6', Conversion.binaryToHexDigitMsb0_4bits(new boolean[] { false, true, true, false })); [EOL]     assertEquals('7', Conversion.binaryToHexDigitMsb0_4bits(new boolean[] { false, true, true, true })); [EOL]     assertEquals('8', Conversion.binaryToHexDigitMsb0_4bits(new boolean[] { true, false, false, false })); [EOL]     assertEquals('9', Conversion.binaryToHexDigitMsb0_4bits(new boolean[] { true, false, false, true })); [EOL]     assertEquals('a', Conversion.binaryToHexDigitMsb0_4bits(new boolean[] { true, false, true, false })); [EOL]     assertEquals('b', Conversion.binaryToHexDigitMsb0_4bits(new boolean[] { true, false, true, true })); [EOL]     assertEquals('c', Conversion.binaryToHexDigitMsb0_4bits(new boolean[] { true, true, false, false })); [EOL]     assertEquals('d', Conversion.binaryToHexDigitMsb0_4bits(new boolean[] { true, true, false, true })); [EOL]     assertEquals('e', Conversion.binaryToHexDigitMsb0_4bits(new boolean[] { true, true, true, false })); [EOL]     assertEquals('f', Conversion.binaryToHexDigitMsb0_4bits(new boolean[] { true, true, true, true })); [EOL]     try { [EOL]         Conversion.binaryToHexDigitMsb0_4bits(new boolean[] {}); [EOL]         fail("Thrown " + IllegalArgumentException.class.getName() + " expected"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL] }
@Test [EOL] public void testBinaryToHexDigitMsb0_bits() { [EOL]     assertEquals('0', Conversion.binaryToHexDigitMsb0_4bits(new boolean[] { false, false, false, false })); [EOL]     assertEquals('1', Conversion.binaryToHexDigitMsb0_4bits(new boolean[] { false, false, false, true })); [EOL]     assertEquals('2', Conversion.binaryToHexDigitMsb0_4bits(new boolean[] { false, false, true, false })); [EOL]     assertEquals('3', Conversion.binaryToHexDigitMsb0_4bits(new boolean[] { false, false, true, true })); [EOL]     assertEquals('4', Conversion.binaryToHexDigitMsb0_4bits(new boolean[] { false, true, false, false })); [EOL]     assertEquals('5', Conversion.binaryToHexDigitMsb0_4bits(new boolean[] { false, true, false, true })); [EOL]     assertEquals('6', Conversion.binaryToHexDigitMsb0_4bits(new boolean[] { false, true, true, false })); [EOL]     assertEquals('7', Conversion.binaryToHexDigitMsb0_4bits(new boolean[] { false, true, true, true })); [EOL]     assertEquals('8', Conversion.binaryToHexDigitMsb0_4bits(new boolean[] { true, false, false, false })); [EOL]     assertEquals('9', Conversion.binaryToHexDigitMsb0_4bits(new boolean[] { true, false, false, true })); [EOL]     assertEquals('a', Conversion.binaryToHexDigitMsb0_4bits(new boolean[] { true, false, true, false })); [EOL]     assertEquals('b', Conversion.binaryToHexDigitMsb0_4bits(new boolean[] { true, false, true, true })); [EOL]     assertEquals('c', Conversion.binaryToHexDigitMsb0_4bits(new boolean[] { true, true, false, false })); [EOL]     assertEquals('d', Conversion.binaryToHexDigitMsb0_4bits(new boolean[] { true, true, false, true })); [EOL]     assertEquals('e', Conversion.binaryToHexDigitMsb0_4bits(new boolean[] { true, true, true, false })); [EOL]     assertEquals('f', Conversion.binaryToHexDigitMsb0_4bits(new boolean[] { true, true, true, true })); [EOL]     try { [EOL]         Conversion.binaryToHexDigitMsb0_4bits(new boolean[] {}); [EOL]         fail("Thrown " + IllegalArgumentException.class.getName() + " expected"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL] }
@Test [EOL] public void testBinaryToHexDigitMsb0_bits() { [EOL]     assertEquals('0', Conversion.binaryToHexDigitMsb0_4bits(new boolean[] { false, false, false, false })); [EOL]     assertEquals('1', Conversion.binaryToHexDigitMsb0_4bits(new boolean[] { false, false, false, true })); [EOL]     assertEquals('2', Conversion.binaryToHexDigitMsb0_4bits(new boolean[] { false, false, true, false })); [EOL]     assertEquals('3', Conversion.binaryToHexDigitMsb0_4bits(new boolean[] { false, false, true, true })); [EOL]     assertEquals('4', Conversion.binaryToHexDigitMsb0_4bits(new boolean[] { false, true, false, false })); [EOL]     assertEquals('5', Conversion.binaryToHexDigitMsb0_4bits(new boolean[] { false, true, false, true })); [EOL]     assertEquals('6', Conversion.binaryToHexDigitMsb0_4bits(new boolean[] { false, true, true, false })); [EOL]     assertEquals('7', Conversion.binaryToHexDigitMsb0_4bits(new boolean[] { false, true, true, true })); [EOL]     assertEquals('8', Conversion.binaryToHexDigitMsb0_4bits(new boolean[] { true, false, false, false })); [EOL]     assertEquals('9', Conversion.binaryToHexDigitMsb0_4bits(new boolean[] { true, false, false, true })); [EOL]     assertEquals('a', Conversion.binaryToHexDigitMsb0_4bits(new boolean[] { true, false, true, false })); [EOL]     assertEquals('b', Conversion.binaryToHexDigitMsb0_4bits(new boolean[] { true, false, true, true })); [EOL]     assertEquals('c', Conversion.binaryToHexDigitMsb0_4bits(new boolean[] { true, true, false, false })); [EOL]     assertEquals('d', Conversion.binaryToHexDigitMsb0_4bits(new boolean[] { true, true, false, true })); [EOL]     assertEquals('e', Conversion.binaryToHexDigitMsb0_4bits(new boolean[] { true, true, true, false })); [EOL]     assertEquals('f', Conversion.binaryToHexDigitMsb0_4bits(new boolean[] { true, true, true, true })); [EOL]     try { [EOL]         Conversion.binaryToHexDigitMsb0_4bits(new boolean[] {}); [EOL]         fail("Thrown " + IllegalArgumentException.class.getName() + " expected"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL] }
@Test [EOL] public void testBinaryToHexDigitMsb0_bits() { [EOL]     assertEquals('0', Conversion.binaryToHexDigitMsb0_4bits(new boolean[] { false, false, false, false })); [EOL]     assertEquals('1', Conversion.binaryToHexDigitMsb0_4bits(new boolean[] { false, false, false, true })); [EOL]     assertEquals('2', Conversion.binaryToHexDigitMsb0_4bits(new boolean[] { false, false, true, false })); [EOL]     assertEquals('3', Conversion.binaryToHexDigitMsb0_4bits(new boolean[] { false, false, true, true })); [EOL]     assertEquals('4', Conversion.binaryToHexDigitMsb0_4bits(new boolean[] { false, true, false, false })); [EOL]     assertEquals('5', Conversion.binaryToHexDigitMsb0_4bits(new boolean[] { false, true, false, true })); [EOL]     assertEquals('6', Conversion.binaryToHexDigitMsb0_4bits(new boolean[] { false, true, true, false })); [EOL]     assertEquals('7', Conversion.binaryToHexDigitMsb0_4bits(new boolean[] { false, true, true, true })); [EOL]     assertEquals('8', Conversion.binaryToHexDigitMsb0_4bits(new boolean[] { true, false, false, false })); [EOL]     assertEquals('9', Conversion.binaryToHexDigitMsb0_4bits(new boolean[] { true, false, false, true })); [EOL]     assertEquals('a', Conversion.binaryToHexDigitMsb0_4bits(new boolean[] { true, false, true, false })); [EOL]     assertEquals('b', Conversion.binaryToHexDigitMsb0_4bits(new boolean[] { true, false, true, true })); [EOL]     assertEquals('c', Conversion.binaryToHexDigitMsb0_4bits(new boolean[] { true, true, false, false })); [EOL]     assertEquals('d', Conversion.binaryToHexDigitMsb0_4bits(new boolean[] { true, true, false, true })); [EOL]     assertEquals('e', Conversion.binaryToHexDigitMsb0_4bits(new boolean[] { true, true, true, false })); [EOL]     assertEquals('f', Conversion.binaryToHexDigitMsb0_4bits(new boolean[] { true, true, true, true })); [EOL]     try { [EOL]         Conversion.binaryToHexDigitMsb0_4bits(new boolean[] {}); [EOL]         fail("Thrown " + IllegalArgumentException.class.getName() + " expected"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL] }
@Test [EOL] public void testBinaryToHexDigitMsb0_bits() { [EOL]     assertEquals('0', Conversion.binaryToHexDigitMsb0_4bits(new boolean[] { false, false, false, false })); [EOL]     assertEquals('1', Conversion.binaryToHexDigitMsb0_4bits(new boolean[] { false, false, false, true })); [EOL]     assertEquals('2', Conversion.binaryToHexDigitMsb0_4bits(new boolean[] { false, false, true, false })); [EOL]     assertEquals('3', Conversion.binaryToHexDigitMsb0_4bits(new boolean[] { false, false, true, true })); [EOL]     assertEquals('4', Conversion.binaryToHexDigitMsb0_4bits(new boolean[] { false, true, false, false })); [EOL]     assertEquals('5', Conversion.binaryToHexDigitMsb0_4bits(new boolean[] { false, true, false, true })); [EOL]     assertEquals('6', Conversion.binaryToHexDigitMsb0_4bits(new boolean[] { false, true, true, false })); [EOL]     assertEquals('7', Conversion.binaryToHexDigitMsb0_4bits(new boolean[] { false, true, true, true })); [EOL]     assertEquals('8', Conversion.binaryToHexDigitMsb0_4bits(new boolean[] { true, false, false, false })); [EOL]     assertEquals('9', Conversion.binaryToHexDigitMsb0_4bits(new boolean[] { true, false, false, true })); [EOL]     assertEquals('a', Conversion.binaryToHexDigitMsb0_4bits(new boolean[] { true, false, true, false })); [EOL]     assertEquals('b', Conversion.binaryToHexDigitMsb0_4bits(new boolean[] { true, false, true, true })); [EOL]     assertEquals('c', Conversion.binaryToHexDigitMsb0_4bits(new boolean[] { true, true, false, false })); [EOL]     assertEquals('d', Conversion.binaryToHexDigitMsb0_4bits(new boolean[] { true, true, false, true })); [EOL]     assertEquals('e', Conversion.binaryToHexDigitMsb0_4bits(new boolean[] { true, true, true, false })); [EOL]     assertEquals('f', Conversion.binaryToHexDigitMsb0_4bits(new boolean[] { true, true, true, true })); [EOL]     try { [EOL]         Conversion.binaryToHexDigitMsb0_4bits(new boolean[] {}); [EOL]         fail("Thrown " + IllegalArgumentException.class.getName() + " expected"); [EOL]     } catch (final IllegalArgumentException e) { [EOL]     } [EOL] }
@Test [EOL] public void testLongToHex() { [EOL]     assertEquals("", Conversion.longToHex(0x0000000000000000L, 0, "", 0, 0)); [EOL]     assertEquals("", Conversion.longToHex(0x0000000000000000L, 100, "", 0, 0)); [EOL]     assertEquals("", Conversion.longToHex(0x0000000000000000L, 0, "", 100, 0)); [EOL]     assertEquals("ffffffffffffffffffffffff", Conversion.longToHex(0x1234567890ABCDEFL, 0, "ffffffffffffffffffffffff", 0, 0)); [EOL]     assertEquals("3fffffffffffffffffffffff", Conversion.longToHex(0x1234567890ABCDE3L, 0, "ffffffffffffffffffffffff", 0, 1)); [EOL]     assertEquals("feffffffffffffffffffffff", Conversion.longToHex(0x1234567890ABCDEFL, 0, "ffffffffffffffffffffffff", 0, 2)); [EOL]     assertEquals("fedcffffffffffffffffffff", Conversion.longToHex(0x1234567890ABCDEFL, 0, "ffffffffffffffffffffffff", 0, 4)); [EOL]     assertEquals("fedcba098765432fffffffff", Conversion.longToHex(0x1234567890ABCDEFL, 0, "ffffffffffffffffffffffff", 0, 15)); [EOL]     assertEquals("fedcba0987654321ffffffff", Conversion.longToHex(0x1234567890ABCDEFL, 0, "ffffffffffffffffffffffff", 0, 16)); [EOL]     assertEquals("fff3ffffffffffffffffffff", Conversion.longToHex(0x1234567890ABCDE3L, 0, "ffffffffffffffffffffffff", 3, 1)); [EOL]     assertEquals("ffffefffffffffffffffffff", Conversion.longToHex(0x1234567890ABCDEFL, 0, "ffffffffffffffffffffffff", 3, 2)); [EOL]     assertEquals("ffffedcfffffffffffffffff", Conversion.longToHex(0x1234567890ABCDEFL, 0, "ffffffffffffffffffffffff", 3, 4)); [EOL]     assertEquals("ffffedcba098765432ffffff", Conversion.longToHex(0x1234567890ABCDEFL, 0, "ffffffffffffffffffffffff", 3, 15)); [EOL]     assertEquals("ffffedcba0987654321fffff", Conversion.longToHex(0x1234567890ABCDEFL, 0, "ffffffffffffffffffffffff", 3, 16)); [EOL]     assertEquals("7fffffffffffffffffffffff", Conversion.longToHex(0x1234567890ABCDEFL, 1, "ffffffffffffffffffffffff", 0, 1)); [EOL]     assertEquals("bfffffffffffffffffffffff", Conversion.longToHex(0x1234567890ABCDEFL, 2, "ffffffffffffffffffffffff", 0, 1)); [EOL]     assertEquals("fffdb975121fca86420fffff", Conversion.longToHex(0x1234567890ABCDEFL, 3, "ffffffffffffffffffffffff", 3, 16)); [EOL]     assertEquals("fffedcba0987654321ffffff", Conversion.longToHex(0x1234567890ABCDEFL, 4, "ffffffffffffffffffffffff", 3, 15)); [EOL]     assertEquals("fedcba0987654321", Conversion.longToHex(0x1234567890ABCDEFL, 0, "", 0, 16)); [EOL]     try { [EOL]         Conversion.longToHex(0x1234567890ABCDEFL, 0, "", 1, 8); [EOL]         fail("Thrown " + StringIndexOutOfBoundsException.class.getName() + " expected"); [EOL]     } catch (final StringIndexOutOfBoundsException e) { [EOL]     } [EOL] }
@Test [EOL] public void testLongToHex() { [EOL]     assertEquals("", Conversion.longToHex(0x0000000000000000L, 0, "", 0, 0)); [EOL]     assertEquals("", Conversion.longToHex(0x0000000000000000L, 100, "", 0, 0)); [EOL]     assertEquals("", Conversion.longToHex(0x0000000000000000L, 0, "", 100, 0)); [EOL]     assertEquals("ffffffffffffffffffffffff", Conversion.longToHex(0x1234567890ABCDEFL, 0, "ffffffffffffffffffffffff", 0, 0)); [EOL]     assertEquals("3fffffffffffffffffffffff", Conversion.longToHex(0x1234567890ABCDE3L, 0, "ffffffffffffffffffffffff", 0, 1)); [EOL]     assertEquals("feffffffffffffffffffffff", Conversion.longToHex(0x1234567890ABCDEFL, 0, "ffffffffffffffffffffffff", 0, 2)); [EOL]     assertEquals("fedcffffffffffffffffffff", Conversion.longToHex(0x1234567890ABCDEFL, 0, "ffffffffffffffffffffffff", 0, 4)); [EOL]     assertEquals("fedcba098765432fffffffff", Conversion.longToHex(0x1234567890ABCDEFL, 0, "ffffffffffffffffffffffff", 0, 15)); [EOL]     assertEquals("fedcba0987654321ffffffff", Conversion.longToHex(0x1234567890ABCDEFL, 0, "ffffffffffffffffffffffff", 0, 16)); [EOL]     assertEquals("fff3ffffffffffffffffffff", Conversion.longToHex(0x1234567890ABCDE3L, 0, "ffffffffffffffffffffffff", 3, 1)); [EOL]     assertEquals("ffffefffffffffffffffffff", Conversion.longToHex(0x1234567890ABCDEFL, 0, "ffffffffffffffffffffffff", 3, 2)); [EOL]     assertEquals("ffffedcfffffffffffffffff", Conversion.longToHex(0x1234567890ABCDEFL, 0, "ffffffffffffffffffffffff", 3, 4)); [EOL]     assertEquals("ffffedcba098765432ffffff", Conversion.longToHex(0x1234567890ABCDEFL, 0, "ffffffffffffffffffffffff", 3, 15)); [EOL]     assertEquals("ffffedcba0987654321fffff", Conversion.longToHex(0x1234567890ABCDEFL, 0, "ffffffffffffffffffffffff", 3, 16)); [EOL]     assertEquals("7fffffffffffffffffffffff", Conversion.longToHex(0x1234567890ABCDEFL, 1, "ffffffffffffffffffffffff", 0, 1)); [EOL]     assertEquals("bfffffffffffffffffffffff", Conversion.longToHex(0x1234567890ABCDEFL, 2, "ffffffffffffffffffffffff", 0, 1)); [EOL]     assertEquals("fffdb975121fca86420fffff", Conversion.longToHex(0x1234567890ABCDEFL, 3, "ffffffffffffffffffffffff", 3, 16)); [EOL]     assertEquals("fffedcba0987654321ffffff", Conversion.longToHex(0x1234567890ABCDEFL, 4, "ffffffffffffffffffffffff", 3, 15)); [EOL]     assertEquals("fedcba0987654321", Conversion.longToHex(0x1234567890ABCDEFL, 0, "", 0, 16)); [EOL]     try { [EOL]         Conversion.longToHex(0x1234567890ABCDEFL, 0, "", 1, 8); [EOL]         fail("Thrown " + StringIndexOutOfBoundsException.class.getName() + " expected"); [EOL]     } catch (final StringIndexOutOfBoundsException e) { [EOL]     } [EOL] }
@Test [EOL] public void testShortToHex() { [EOL]     assertEquals("", Conversion.shortToHex((short) 0x0000, 0, "", 0, 0)); [EOL]     assertEquals("", Conversion.shortToHex((short) 0x0000, 100, "", 0, 0)); [EOL]     assertEquals("", Conversion.shortToHex((short) 0x0000, 0, "", 100, 0)); [EOL]     assertEquals("ffffffffffffffffffffffff", Conversion.shortToHex((short) 0xCDEF, 0, "ffffffffffffffffffffffff", 0, 0)); [EOL]     assertEquals("3fffffffffffffffffffffff", Conversion.shortToHex((short) 0xCDE3, 0, "ffffffffffffffffffffffff", 0, 1)); [EOL]     assertEquals("feffffffffffffffffffffff", Conversion.shortToHex((short) 0xCDEF, 0, "ffffffffffffffffffffffff", 0, 2)); [EOL]     assertEquals("fedfffffffffffffffffffff", Conversion.shortToHex((short) 0xCDEF, 0, "ffffffffffffffffffffffff", 0, 3)); [EOL]     assertEquals("fedcffffffffffffffffffff", Conversion.shortToHex((short) 0xCDEF, 0, "ffffffffffffffffffffffff", 0, 4)); [EOL]     assertEquals("fff3ffffffffffffffffffff", Conversion.shortToHex((short) 0xCDE3, 0, "ffffffffffffffffffffffff", 3, 1)); [EOL]     assertEquals("ffffefffffffffffffffffff", Conversion.shortToHex((short) 0xCDEF, 0, "ffffffffffffffffffffffff", 3, 2)); [EOL]     assertEquals("7fffffffffffffffffffffff", Conversion.shortToHex((short) 0xCDEF, 1, "ffffffffffffffffffffffff", 0, 1)); [EOL]     assertEquals("bfffffffffffffffffffffff", Conversion.shortToHex((short) 0xCDEF, 2, "ffffffffffffffffffffffff", 0, 1)); [EOL]     assertEquals("fffdb9ffffffffffffffffff", Conversion.shortToHex((short) 0xCDEF, 3, "ffffffffffffffffffffffff", 3, 4)); [EOL]     assertEquals("fffedcffffffffffffffffff", Conversion.shortToHex((short) 0xCDEF, 4, "ffffffffffffffffffffffff", 3, 3)); [EOL]     assertEquals("fedc", Conversion.shortToHex((short) 0xCDEF, 0, "", 0, 4)); [EOL]     try { [EOL]         Conversion.shortToHex((short) 0xCDEF, 0, "", 1, 4); [EOL]         fail("Thrown " + StringIndexOutOfBoundsException.class.getName() + " expected"); [EOL]     } catch (final StringIndexOutOfBoundsException e) { [EOL]     } [EOL] }
@Test [EOL] public void testEscapeJavaWithSlash() { [EOL]     final String input = "String with a slash (/) in it"; [EOL]     final String expected = input; [EOL]     final String actual = StringEscapeUtils.escapeJava(input); [EOL]     assertEquals(expected, actual); [EOL] }
@Test [EOL] public void testEscapeHtmlVersions() throws Exception { [EOL]     assertEquals("&Beta;", StringEscapeUtils.escapeHtml4("\u0392")); [EOL]     assertEquals("\u0392", StringEscapeUtils.unescapeHtml4("&Beta;")); [EOL] }
@Test [EOL] public void testEscapeHtmlVersions() throws Exception { [EOL]     assertEquals("&Beta;", StringEscapeUtils.escapeHtml4("\u0392")); [EOL]     assertEquals("\u0392", StringEscapeUtils.unescapeHtml4("&Beta;")); [EOL] }
@Test [EOL] public void testUnescapeHtml4() { [EOL]     for (int i = 0; i < HTML_ESCAPES.length; ++i) { [EOL]         final String message = HTML_ESCAPES[i][0]; [EOL]         final String expected = HTML_ESCAPES[i][2]; [EOL]         final String original = HTML_ESCAPES[i][1]; [EOL]         assertEquals(message, expected, StringEscapeUtils.unescapeHtml4(original)); [EOL]         final StringWriter sw = new StringWriter(); [EOL]         try { [EOL]             StringEscapeUtils.UNESCAPE_HTML4.translate(original, sw); [EOL]         } catch (final IOException e) { [EOL]         } [EOL]         final String actual = original == null ? null : sw.toString(); [EOL]         assertEquals(message, expected, actual); [EOL]     } [EOL]     assertEquals("funny chars pass through OK", "Fran\u00E7ais", StringEscapeUtils.unescapeHtml4("Fran\u00E7ais")); [EOL]     assertEquals("Hello&;World", StringEscapeUtils.unescapeHtml4("Hello&;World")); [EOL]     assertEquals("Hello&#;World", StringEscapeUtils.unescapeHtml4("Hello&#;World")); [EOL]     assertEquals("Hello&# ;World", StringEscapeUtils.unescapeHtml4("Hello&# ;World")); [EOL]     assertEquals("Hello&##;World", StringEscapeUtils.unescapeHtml4("Hello&##;World")); [EOL] }
@Test [EOL] public void testCompositeFormat() { [EOL]     final Format parser = new Format() { [EOL]  [EOL]         @Override [EOL]         public StringBuffer format(final Object obj, final StringBuffer toAppendTo, final FieldPosition pos) { [EOL]             throw new UnsupportedOperationException("Not implemented"); [EOL]         } [EOL]  [EOL]         @Override [EOL]         public Object parseObject(final String source, final ParsePosition pos) { [EOL]             return null; [EOL]         } [EOL]     }; [EOL]     final Format formatter = new Format() { [EOL]  [EOL]         @Override [EOL]         public StringBuffer format(final Object obj, final StringBuffer toAppendTo, final FieldPosition pos) { [EOL]             return null; [EOL]         } [EOL]  [EOL]         @Override [EOL]         public Object parseObject(final String source, final ParsePosition pos) { [EOL]             throw new UnsupportedOperationException("Not implemented"); [EOL]         } [EOL]     }; [EOL]     final CompositeFormat composite = new CompositeFormat(parser, formatter); [EOL]     composite.parseObject("", null); [EOL]     composite.format(new Object(), new StringBuffer(), null); [EOL]     assertEquals("Parser get method incorrectly implemented", parser, composite.getParser()); [EOL]     assertEquals("Formatter get method incorrectly implemented", formatter, composite.getFormatter()); [EOL] }
@Test [EOL] public void testCompositeFormat() { [EOL]     final Format parser = new Format() { [EOL]  [EOL]         @Override [EOL]         public StringBuffer format(final Object obj, final StringBuffer toAppendTo, final FieldPosition pos) { [EOL]             throw new UnsupportedOperationException("Not implemented"); [EOL]         } [EOL]  [EOL]         @Override [EOL]         public Object parseObject(final String source, final ParsePosition pos) { [EOL]             return null; [EOL]         } [EOL]     }; [EOL]     final Format formatter = new Format() { [EOL]  [EOL]         @Override [EOL]         public StringBuffer format(final Object obj, final StringBuffer toAppendTo, final FieldPosition pos) { [EOL]             return null; [EOL]         } [EOL]  [EOL]         @Override [EOL]         public Object parseObject(final String source, final ParsePosition pos) { [EOL]             throw new UnsupportedOperationException("Not implemented"); [EOL]         } [EOL]     }; [EOL]     final CompositeFormat composite = new CompositeFormat(parser, formatter); [EOL]     composite.parseObject("", null); [EOL]     composite.format(new Object(), new StringBuffer(), null); [EOL]     assertEquals("Parser get method incorrectly implemented", parser, composite.getParser()); [EOL]     assertEquals("Formatter get method incorrectly implemented", formatter, composite.getFormatter()); [EOL] }
