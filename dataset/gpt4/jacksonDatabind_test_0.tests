public void testSerializeDeserializeWithJaxbAnnotations() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.INDENT_OUTPUT); [EOL]     JacksonExample ex = new JacksonExample(); [EOL]     QName qname = new QName("urn:hi", "hello"); [EOL]     ex.setQname(qname); [EOL]     ex.setAttributeProperty("attributeValue"); [EOL]     ex.setElementProperty("elementValue"); [EOL]     ex.setWrappedElementProperty(Arrays.asList("wrappedElementValue")); [EOL]     ex.setEnumProperty(EnumExample.VALUE1); [EOL]     StringWriter writer = new StringWriter(); [EOL]     mapper.writeValue(writer, ex); [EOL]     writer.flush(); [EOL]     writer.close(); [EOL]     String json = writer.toString(); [EOL]     JacksonExample readEx = mapper.readValue(json, JacksonExample.class); [EOL]     assertEquals(ex.qname, readEx.qname); [EOL]     assertEquals(ex.attributeProperty, readEx.attributeProperty); [EOL]     assertEquals(ex.elementProperty, readEx.elementProperty); [EOL]     assertEquals(ex.wrappedElementProperty, readEx.wrappedElementProperty); [EOL]     assertEquals(ex.enumProperty, readEx.enumProperty); [EOL] }
public void testSerializeDeserializeWithJaxbAnnotations() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.INDENT_OUTPUT); [EOL]     JacksonExample ex = new JacksonExample(); [EOL]     QName qname = new QName("urn:hi", "hello"); [EOL]     ex.setQname(qname); [EOL]     ex.setAttributeProperty("attributeValue"); [EOL]     ex.setElementProperty("elementValue"); [EOL]     ex.setWrappedElementProperty(Arrays.asList("wrappedElementValue")); [EOL]     ex.setEnumProperty(EnumExample.VALUE1); [EOL]     StringWriter writer = new StringWriter(); [EOL]     mapper.writeValue(writer, ex); [EOL]     writer.flush(); [EOL]     writer.close(); [EOL]     String json = writer.toString(); [EOL]     JacksonExample readEx = mapper.readValue(json, JacksonExample.class); [EOL]     assertEquals(ex.qname, readEx.qname); [EOL]     assertEquals(ex.attributeProperty, readEx.attributeProperty); [EOL]     assertEquals(ex.elementProperty, readEx.elementProperty); [EOL]     assertEquals(ex.wrappedElementProperty, readEx.wrappedElementProperty); [EOL]     assertEquals(ex.enumProperty, readEx.enumProperty); [EOL] }
public void testSerializeDeserializeWithJaxbAnnotations() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.INDENT_OUTPUT); [EOL]     JacksonExample ex = new JacksonExample(); [EOL]     QName qname = new QName("urn:hi", "hello"); [EOL]     ex.setQname(qname); [EOL]     ex.setAttributeProperty("attributeValue"); [EOL]     ex.setElementProperty("elementValue"); [EOL]     ex.setWrappedElementProperty(Arrays.asList("wrappedElementValue")); [EOL]     ex.setEnumProperty(EnumExample.VALUE1); [EOL]     StringWriter writer = new StringWriter(); [EOL]     mapper.writeValue(writer, ex); [EOL]     writer.flush(); [EOL]     writer.close(); [EOL]     String json = writer.toString(); [EOL]     JacksonExample readEx = mapper.readValue(json, JacksonExample.class); [EOL]     assertEquals(ex.qname, readEx.qname); [EOL]     assertEquals(ex.attributeProperty, readEx.attributeProperty); [EOL]     assertEquals(ex.elementProperty, readEx.elementProperty); [EOL]     assertEquals(ex.wrappedElementProperty, readEx.wrappedElementProperty); [EOL]     assertEquals(ex.enumProperty, readEx.enumProperty); [EOL] }
public void testSerializeDeserializeWithJaxbAnnotations() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.INDENT_OUTPUT); [EOL]     JacksonExample ex = new JacksonExample(); [EOL]     QName qname = new QName("urn:hi", "hello"); [EOL]     ex.setQname(qname); [EOL]     ex.setAttributeProperty("attributeValue"); [EOL]     ex.setElementProperty("elementValue"); [EOL]     ex.setWrappedElementProperty(Arrays.asList("wrappedElementValue")); [EOL]     ex.setEnumProperty(EnumExample.VALUE1); [EOL]     StringWriter writer = new StringWriter(); [EOL]     mapper.writeValue(writer, ex); [EOL]     writer.flush(); [EOL]     writer.close(); [EOL]     String json = writer.toString(); [EOL]     JacksonExample readEx = mapper.readValue(json, JacksonExample.class); [EOL]     assertEquals(ex.qname, readEx.qname); [EOL]     assertEquals(ex.attributeProperty, readEx.attributeProperty); [EOL]     assertEquals(ex.elementProperty, readEx.elementProperty); [EOL]     assertEquals(ex.wrappedElementProperty, readEx.wrappedElementProperty); [EOL]     assertEquals(ex.enumProperty, readEx.enumProperty); [EOL] }
public void testSerializeDeserializeWithJaxbAnnotations() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.INDENT_OUTPUT); [EOL]     JacksonExample ex = new JacksonExample(); [EOL]     QName qname = new QName("urn:hi", "hello"); [EOL]     ex.setQname(qname); [EOL]     ex.setAttributeProperty("attributeValue"); [EOL]     ex.setElementProperty("elementValue"); [EOL]     ex.setWrappedElementProperty(Arrays.asList("wrappedElementValue")); [EOL]     ex.setEnumProperty(EnumExample.VALUE1); [EOL]     StringWriter writer = new StringWriter(); [EOL]     mapper.writeValue(writer, ex); [EOL]     writer.flush(); [EOL]     writer.close(); [EOL]     String json = writer.toString(); [EOL]     JacksonExample readEx = mapper.readValue(json, JacksonExample.class); [EOL]     assertEquals(ex.qname, readEx.qname); [EOL]     assertEquals(ex.attributeProperty, readEx.attributeProperty); [EOL]     assertEquals(ex.elementProperty, readEx.elementProperty); [EOL]     assertEquals(ex.wrappedElementProperty, readEx.wrappedElementProperty); [EOL]     assertEquals(ex.enumProperty, readEx.enumProperty); [EOL] }
public void testSerializeDeserializeWithJaxbAnnotations() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.INDENT_OUTPUT); [EOL]     JacksonExample ex = new JacksonExample(); [EOL]     QName qname = new QName("urn:hi", "hello"); [EOL]     ex.setQname(qname); [EOL]     ex.setAttributeProperty("attributeValue"); [EOL]     ex.setElementProperty("elementValue"); [EOL]     ex.setWrappedElementProperty(Arrays.asList("wrappedElementValue")); [EOL]     ex.setEnumProperty(EnumExample.VALUE1); [EOL]     StringWriter writer = new StringWriter(); [EOL]     mapper.writeValue(writer, ex); [EOL]     writer.flush(); [EOL]     writer.close(); [EOL]     String json = writer.toString(); [EOL]     JacksonExample readEx = mapper.readValue(json, JacksonExample.class); [EOL]     assertEquals(ex.qname, readEx.qname); [EOL]     assertEquals(ex.attributeProperty, readEx.attributeProperty); [EOL]     assertEquals(ex.elementProperty, readEx.elementProperty); [EOL]     assertEquals(ex.wrappedElementProperty, readEx.wrappedElementProperty); [EOL]     assertEquals(ex.enumProperty, readEx.enumProperty); [EOL] }
public void testSerializeDeserializeWithJaxbAnnotations() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.INDENT_OUTPUT); [EOL]     JacksonExample ex = new JacksonExample(); [EOL]     QName qname = new QName("urn:hi", "hello"); [EOL]     ex.setQname(qname); [EOL]     ex.setAttributeProperty("attributeValue"); [EOL]     ex.setElementProperty("elementValue"); [EOL]     ex.setWrappedElementProperty(Arrays.asList("wrappedElementValue")); [EOL]     ex.setEnumProperty(EnumExample.VALUE1); [EOL]     StringWriter writer = new StringWriter(); [EOL]     mapper.writeValue(writer, ex); [EOL]     writer.flush(); [EOL]     writer.close(); [EOL]     String json = writer.toString(); [EOL]     JacksonExample readEx = mapper.readValue(json, JacksonExample.class); [EOL]     assertEquals(ex.qname, readEx.qname); [EOL]     assertEquals(ex.attributeProperty, readEx.attributeProperty); [EOL]     assertEquals(ex.elementProperty, readEx.elementProperty); [EOL]     assertEquals(ex.wrappedElementProperty, readEx.wrappedElementProperty); [EOL]     assertEquals(ex.enumProperty, readEx.enumProperty); [EOL] }
public void testSerializeDeserializeWithJaxbAnnotations() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.INDENT_OUTPUT); [EOL]     JacksonExample ex = new JacksonExample(); [EOL]     QName qname = new QName("urn:hi", "hello"); [EOL]     ex.setQname(qname); [EOL]     ex.setAttributeProperty("attributeValue"); [EOL]     ex.setElementProperty("elementValue"); [EOL]     ex.setWrappedElementProperty(Arrays.asList("wrappedElementValue")); [EOL]     ex.setEnumProperty(EnumExample.VALUE1); [EOL]     StringWriter writer = new StringWriter(); [EOL]     mapper.writeValue(writer, ex); [EOL]     writer.flush(); [EOL]     writer.close(); [EOL]     String json = writer.toString(); [EOL]     JacksonExample readEx = mapper.readValue(json, JacksonExample.class); [EOL]     assertEquals(ex.qname, readEx.qname); [EOL]     assertEquals(ex.attributeProperty, readEx.attributeProperty); [EOL]     assertEquals(ex.elementProperty, readEx.elementProperty); [EOL]     assertEquals(ex.wrappedElementProperty, readEx.wrappedElementProperty); [EOL]     assertEquals(ex.enumProperty, readEx.enumProperty); [EOL] }
public void testSerializeDeserializeWithJaxbAnnotations() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.INDENT_OUTPUT); [EOL]     JacksonExample ex = new JacksonExample(); [EOL]     QName qname = new QName("urn:hi", "hello"); [EOL]     ex.setQname(qname); [EOL]     ex.setAttributeProperty("attributeValue"); [EOL]     ex.setElementProperty("elementValue"); [EOL]     ex.setWrappedElementProperty(Arrays.asList("wrappedElementValue")); [EOL]     ex.setEnumProperty(EnumExample.VALUE1); [EOL]     StringWriter writer = new StringWriter(); [EOL]     mapper.writeValue(writer, ex); [EOL]     writer.flush(); [EOL]     writer.close(); [EOL]     String json = writer.toString(); [EOL]     JacksonExample readEx = mapper.readValue(json, JacksonExample.class); [EOL]     assertEquals(ex.qname, readEx.qname); [EOL]     assertEquals(ex.attributeProperty, readEx.attributeProperty); [EOL]     assertEquals(ex.elementProperty, readEx.elementProperty); [EOL]     assertEquals(ex.wrappedElementProperty, readEx.wrappedElementProperty); [EOL]     assertEquals(ex.enumProperty, readEx.enumProperty); [EOL] }
public void testSerializeDeserializeWithJaxbAnnotations() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.INDENT_OUTPUT); [EOL]     JacksonExample ex = new JacksonExample(); [EOL]     QName qname = new QName("urn:hi", "hello"); [EOL]     ex.setQname(qname); [EOL]     ex.setAttributeProperty("attributeValue"); [EOL]     ex.setElementProperty("elementValue"); [EOL]     ex.setWrappedElementProperty(Arrays.asList("wrappedElementValue")); [EOL]     ex.setEnumProperty(EnumExample.VALUE1); [EOL]     StringWriter writer = new StringWriter(); [EOL]     mapper.writeValue(writer, ex); [EOL]     writer.flush(); [EOL]     writer.close(); [EOL]     String json = writer.toString(); [EOL]     JacksonExample readEx = mapper.readValue(json, JacksonExample.class); [EOL]     assertEquals(ex.qname, readEx.qname); [EOL]     assertEquals(ex.attributeProperty, readEx.attributeProperty); [EOL]     assertEquals(ex.elementProperty, readEx.elementProperty); [EOL]     assertEquals(ex.wrappedElementProperty, readEx.wrappedElementProperty); [EOL]     assertEquals(ex.enumProperty, readEx.enumProperty); [EOL] }
public void testSerializeDeserializeWithJaxbAnnotations() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.INDENT_OUTPUT); [EOL]     JacksonExample ex = new JacksonExample(); [EOL]     QName qname = new QName("urn:hi", "hello"); [EOL]     ex.setQname(qname); [EOL]     ex.setAttributeProperty("attributeValue"); [EOL]     ex.setElementProperty("elementValue"); [EOL]     ex.setWrappedElementProperty(Arrays.asList("wrappedElementValue")); [EOL]     ex.setEnumProperty(EnumExample.VALUE1); [EOL]     StringWriter writer = new StringWriter(); [EOL]     mapper.writeValue(writer, ex); [EOL]     writer.flush(); [EOL]     writer.close(); [EOL]     String json = writer.toString(); [EOL]     JacksonExample readEx = mapper.readValue(json, JacksonExample.class); [EOL]     assertEquals(ex.qname, readEx.qname); [EOL]     assertEquals(ex.attributeProperty, readEx.attributeProperty); [EOL]     assertEquals(ex.elementProperty, readEx.elementProperty); [EOL]     assertEquals(ex.wrappedElementProperty, readEx.wrappedElementProperty); [EOL]     assertEquals(ex.enumProperty, readEx.enumProperty); [EOL] }
public void testSerializeDeserializeWithJaxbAnnotations() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.INDENT_OUTPUT); [EOL]     JacksonExample ex = new JacksonExample(); [EOL]     QName qname = new QName("urn:hi", "hello"); [EOL]     ex.setQname(qname); [EOL]     ex.setAttributeProperty("attributeValue"); [EOL]     ex.setElementProperty("elementValue"); [EOL]     ex.setWrappedElementProperty(Arrays.asList("wrappedElementValue")); [EOL]     ex.setEnumProperty(EnumExample.VALUE1); [EOL]     StringWriter writer = new StringWriter(); [EOL]     mapper.writeValue(writer, ex); [EOL]     writer.flush(); [EOL]     writer.close(); [EOL]     String json = writer.toString(); [EOL]     JacksonExample readEx = mapper.readValue(json, JacksonExample.class); [EOL]     assertEquals(ex.qname, readEx.qname); [EOL]     assertEquals(ex.attributeProperty, readEx.attributeProperty); [EOL]     assertEquals(ex.elementProperty, readEx.elementProperty); [EOL]     assertEquals(ex.wrappedElementProperty, readEx.wrappedElementProperty); [EOL]     assertEquals(ex.enumProperty, readEx.enumProperty); [EOL] }
public void testSerializeDeserializeWithJaxbAnnotations() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.INDENT_OUTPUT); [EOL]     JacksonExample ex = new JacksonExample(); [EOL]     QName qname = new QName("urn:hi", "hello"); [EOL]     ex.setQname(qname); [EOL]     ex.setAttributeProperty("attributeValue"); [EOL]     ex.setElementProperty("elementValue"); [EOL]     ex.setWrappedElementProperty(Arrays.asList("wrappedElementValue")); [EOL]     ex.setEnumProperty(EnumExample.VALUE1); [EOL]     StringWriter writer = new StringWriter(); [EOL]     mapper.writeValue(writer, ex); [EOL]     writer.flush(); [EOL]     writer.close(); [EOL]     String json = writer.toString(); [EOL]     JacksonExample readEx = mapper.readValue(json, JacksonExample.class); [EOL]     assertEquals(ex.qname, readEx.qname); [EOL]     assertEquals(ex.attributeProperty, readEx.attributeProperty); [EOL]     assertEquals(ex.elementProperty, readEx.elementProperty); [EOL]     assertEquals(ex.wrappedElementProperty, readEx.wrappedElementProperty); [EOL]     assertEquals(ex.enumProperty, readEx.enumProperty); [EOL] }
public void testSerializeDeserializeWithJaxbAnnotations() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.INDENT_OUTPUT); [EOL]     JacksonExample ex = new JacksonExample(); [EOL]     QName qname = new QName("urn:hi", "hello"); [EOL]     ex.setQname(qname); [EOL]     ex.setAttributeProperty("attributeValue"); [EOL]     ex.setElementProperty("elementValue"); [EOL]     ex.setWrappedElementProperty(Arrays.asList("wrappedElementValue")); [EOL]     ex.setEnumProperty(EnumExample.VALUE1); [EOL]     StringWriter writer = new StringWriter(); [EOL]     mapper.writeValue(writer, ex); [EOL]     writer.flush(); [EOL]     writer.close(); [EOL]     String json = writer.toString(); [EOL]     JacksonExample readEx = mapper.readValue(json, JacksonExample.class); [EOL]     assertEquals(ex.qname, readEx.qname); [EOL]     assertEquals(ex.attributeProperty, readEx.attributeProperty); [EOL]     assertEquals(ex.elementProperty, readEx.elementProperty); [EOL]     assertEquals(ex.wrappedElementProperty, readEx.wrappedElementProperty); [EOL]     assertEquals(ex.enumProperty, readEx.enumProperty); [EOL] }
public void testSerializeDeserializeWithJaxbAnnotations() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.INDENT_OUTPUT); [EOL]     JacksonExample ex = new JacksonExample(); [EOL]     QName qname = new QName("urn:hi", "hello"); [EOL]     ex.setQname(qname); [EOL]     ex.setAttributeProperty("attributeValue"); [EOL]     ex.setElementProperty("elementValue"); [EOL]     ex.setWrappedElementProperty(Arrays.asList("wrappedElementValue")); [EOL]     ex.setEnumProperty(EnumExample.VALUE1); [EOL]     StringWriter writer = new StringWriter(); [EOL]     mapper.writeValue(writer, ex); [EOL]     writer.flush(); [EOL]     writer.close(); [EOL]     String json = writer.toString(); [EOL]     JacksonExample readEx = mapper.readValue(json, JacksonExample.class); [EOL]     assertEquals(ex.qname, readEx.qname); [EOL]     assertEquals(ex.attributeProperty, readEx.attributeProperty); [EOL]     assertEquals(ex.elementProperty, readEx.elementProperty); [EOL]     assertEquals(ex.wrappedElementProperty, readEx.wrappedElementProperty); [EOL]     assertEquals(ex.enumProperty, readEx.enumProperty); [EOL] }
public void testSerializeDeserializeWithJaxbAnnotations() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.INDENT_OUTPUT); [EOL]     JacksonExample ex = new JacksonExample(); [EOL]     QName qname = new QName("urn:hi", "hello"); [EOL]     ex.setQname(qname); [EOL]     ex.setAttributeProperty("attributeValue"); [EOL]     ex.setElementProperty("elementValue"); [EOL]     ex.setWrappedElementProperty(Arrays.asList("wrappedElementValue")); [EOL]     ex.setEnumProperty(EnumExample.VALUE1); [EOL]     StringWriter writer = new StringWriter(); [EOL]     mapper.writeValue(writer, ex); [EOL]     writer.flush(); [EOL]     writer.close(); [EOL]     String json = writer.toString(); [EOL]     JacksonExample readEx = mapper.readValue(json, JacksonExample.class); [EOL]     assertEquals(ex.qname, readEx.qname); [EOL]     assertEquals(ex.attributeProperty, readEx.attributeProperty); [EOL]     assertEquals(ex.elementProperty, readEx.elementProperty); [EOL]     assertEquals(ex.wrappedElementProperty, readEx.wrappedElementProperty); [EOL]     assertEquals(ex.enumProperty, readEx.enumProperty); [EOL] }
public void testSerializeDeserializeWithJaxbAnnotations() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.INDENT_OUTPUT); [EOL]     JacksonExample ex = new JacksonExample(); [EOL]     QName qname = new QName("urn:hi", "hello"); [EOL]     ex.setQname(qname); [EOL]     ex.setAttributeProperty("attributeValue"); [EOL]     ex.setElementProperty("elementValue"); [EOL]     ex.setWrappedElementProperty(Arrays.asList("wrappedElementValue")); [EOL]     ex.setEnumProperty(EnumExample.VALUE1); [EOL]     StringWriter writer = new StringWriter(); [EOL]     mapper.writeValue(writer, ex); [EOL]     writer.flush(); [EOL]     writer.close(); [EOL]     String json = writer.toString(); [EOL]     JacksonExample readEx = mapper.readValue(json, JacksonExample.class); [EOL]     assertEquals(ex.qname, readEx.qname); [EOL]     assertEquals(ex.attributeProperty, readEx.attributeProperty); [EOL]     assertEquals(ex.elementProperty, readEx.elementProperty); [EOL]     assertEquals(ex.wrappedElementProperty, readEx.wrappedElementProperty); [EOL]     assertEquals(ex.enumProperty, readEx.enumProperty); [EOL] }
public void testSerializeDeserializeWithJaxbAnnotations() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.INDENT_OUTPUT); [EOL]     JacksonExample ex = new JacksonExample(); [EOL]     QName qname = new QName("urn:hi", "hello"); [EOL]     ex.setQname(qname); [EOL]     ex.setAttributeProperty("attributeValue"); [EOL]     ex.setElementProperty("elementValue"); [EOL]     ex.setWrappedElementProperty(Arrays.asList("wrappedElementValue")); [EOL]     ex.setEnumProperty(EnumExample.VALUE1); [EOL]     StringWriter writer = new StringWriter(); [EOL]     mapper.writeValue(writer, ex); [EOL]     writer.flush(); [EOL]     writer.close(); [EOL]     String json = writer.toString(); [EOL]     JacksonExample readEx = mapper.readValue(json, JacksonExample.class); [EOL]     assertEquals(ex.qname, readEx.qname); [EOL]     assertEquals(ex.attributeProperty, readEx.attributeProperty); [EOL]     assertEquals(ex.elementProperty, readEx.elementProperty); [EOL]     assertEquals(ex.wrappedElementProperty, readEx.wrappedElementProperty); [EOL]     assertEquals(ex.enumProperty, readEx.enumProperty); [EOL] }
public void testSerializeDeserializeWithJaxbAnnotations() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.INDENT_OUTPUT); [EOL]     JacksonExample ex = new JacksonExample(); [EOL]     QName qname = new QName("urn:hi", "hello"); [EOL]     ex.setQname(qname); [EOL]     ex.setAttributeProperty("attributeValue"); [EOL]     ex.setElementProperty("elementValue"); [EOL]     ex.setWrappedElementProperty(Arrays.asList("wrappedElementValue")); [EOL]     ex.setEnumProperty(EnumExample.VALUE1); [EOL]     StringWriter writer = new StringWriter(); [EOL]     mapper.writeValue(writer, ex); [EOL]     writer.flush(); [EOL]     writer.close(); [EOL]     String json = writer.toString(); [EOL]     JacksonExample readEx = mapper.readValue(json, JacksonExample.class); [EOL]     assertEquals(ex.qname, readEx.qname); [EOL]     assertEquals(ex.attributeProperty, readEx.attributeProperty); [EOL]     assertEquals(ex.elementProperty, readEx.elementProperty); [EOL]     assertEquals(ex.wrappedElementProperty, readEx.wrappedElementProperty); [EOL]     assertEquals(ex.enumProperty, readEx.enumProperty); [EOL] }
public void testSerializeDeserializeWithJaxbAnnotations() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.INDENT_OUTPUT); [EOL]     JacksonExample ex = new JacksonExample(); [EOL]     QName qname = new QName("urn:hi", "hello"); [EOL]     ex.setQname(qname); [EOL]     ex.setAttributeProperty("attributeValue"); [EOL]     ex.setElementProperty("elementValue"); [EOL]     ex.setWrappedElementProperty(Arrays.asList("wrappedElementValue")); [EOL]     ex.setEnumProperty(EnumExample.VALUE1); [EOL]     StringWriter writer = new StringWriter(); [EOL]     mapper.writeValue(writer, ex); [EOL]     writer.flush(); [EOL]     writer.close(); [EOL]     String json = writer.toString(); [EOL]     JacksonExample readEx = mapper.readValue(json, JacksonExample.class); [EOL]     assertEquals(ex.qname, readEx.qname); [EOL]     assertEquals(ex.attributeProperty, readEx.attributeProperty); [EOL]     assertEquals(ex.elementProperty, readEx.elementProperty); [EOL]     assertEquals(ex.wrappedElementProperty, readEx.wrappedElementProperty); [EOL]     assertEquals(ex.enumProperty, readEx.enumProperty); [EOL] }
public void testSerializeDeserializeWithJaxbAnnotations() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.INDENT_OUTPUT); [EOL]     JacksonExample ex = new JacksonExample(); [EOL]     QName qname = new QName("urn:hi", "hello"); [EOL]     ex.setQname(qname); [EOL]     ex.setAttributeProperty("attributeValue"); [EOL]     ex.setElementProperty("elementValue"); [EOL]     ex.setWrappedElementProperty(Arrays.asList("wrappedElementValue")); [EOL]     ex.setEnumProperty(EnumExample.VALUE1); [EOL]     StringWriter writer = new StringWriter(); [EOL]     mapper.writeValue(writer, ex); [EOL]     writer.flush(); [EOL]     writer.close(); [EOL]     String json = writer.toString(); [EOL]     JacksonExample readEx = mapper.readValue(json, JacksonExample.class); [EOL]     assertEquals(ex.qname, readEx.qname); [EOL]     assertEquals(ex.attributeProperty, readEx.attributeProperty); [EOL]     assertEquals(ex.elementProperty, readEx.elementProperty); [EOL]     assertEquals(ex.wrappedElementProperty, readEx.wrappedElementProperty); [EOL]     assertEquals(ex.enumProperty, readEx.enumProperty); [EOL] }
public void testSerializeDeserializeWithJaxbAnnotations() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.INDENT_OUTPUT); [EOL]     JacksonExample ex = new JacksonExample(); [EOL]     QName qname = new QName("urn:hi", "hello"); [EOL]     ex.setQname(qname); [EOL]     ex.setAttributeProperty("attributeValue"); [EOL]     ex.setElementProperty("elementValue"); [EOL]     ex.setWrappedElementProperty(Arrays.asList("wrappedElementValue")); [EOL]     ex.setEnumProperty(EnumExample.VALUE1); [EOL]     StringWriter writer = new StringWriter(); [EOL]     mapper.writeValue(writer, ex); [EOL]     writer.flush(); [EOL]     writer.close(); [EOL]     String json = writer.toString(); [EOL]     JacksonExample readEx = mapper.readValue(json, JacksonExample.class); [EOL]     assertEquals(ex.qname, readEx.qname); [EOL]     assertEquals(ex.attributeProperty, readEx.attributeProperty); [EOL]     assertEquals(ex.elementProperty, readEx.elementProperty); [EOL]     assertEquals(ex.wrappedElementProperty, readEx.wrappedElementProperty); [EOL]     assertEquals(ex.enumProperty, readEx.enumProperty); [EOL] }
public void testSerializeDeserializeWithJaxbAnnotations() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.INDENT_OUTPUT); [EOL]     JacksonExample ex = new JacksonExample(); [EOL]     QName qname = new QName("urn:hi", "hello"); [EOL]     ex.setQname(qname); [EOL]     ex.setAttributeProperty("attributeValue"); [EOL]     ex.setElementProperty("elementValue"); [EOL]     ex.setWrappedElementProperty(Arrays.asList("wrappedElementValue")); [EOL]     ex.setEnumProperty(EnumExample.VALUE1); [EOL]     StringWriter writer = new StringWriter(); [EOL]     mapper.writeValue(writer, ex); [EOL]     writer.flush(); [EOL]     writer.close(); [EOL]     String json = writer.toString(); [EOL]     JacksonExample readEx = mapper.readValue(json, JacksonExample.class); [EOL]     assertEquals(ex.qname, readEx.qname); [EOL]     assertEquals(ex.attributeProperty, readEx.attributeProperty); [EOL]     assertEquals(ex.elementProperty, readEx.elementProperty); [EOL]     assertEquals(ex.wrappedElementProperty, readEx.wrappedElementProperty); [EOL]     assertEquals(ex.enumProperty, readEx.enumProperty); [EOL] }
public void testSerializeDeserializeWithJaxbAnnotations() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.INDENT_OUTPUT); [EOL]     JacksonExample ex = new JacksonExample(); [EOL]     QName qname = new QName("urn:hi", "hello"); [EOL]     ex.setQname(qname); [EOL]     ex.setAttributeProperty("attributeValue"); [EOL]     ex.setElementProperty("elementValue"); [EOL]     ex.setWrappedElementProperty(Arrays.asList("wrappedElementValue")); [EOL]     ex.setEnumProperty(EnumExample.VALUE1); [EOL]     StringWriter writer = new StringWriter(); [EOL]     mapper.writeValue(writer, ex); [EOL]     writer.flush(); [EOL]     writer.close(); [EOL]     String json = writer.toString(); [EOL]     JacksonExample readEx = mapper.readValue(json, JacksonExample.class); [EOL]     assertEquals(ex.qname, readEx.qname); [EOL]     assertEquals(ex.attributeProperty, readEx.attributeProperty); [EOL]     assertEquals(ex.elementProperty, readEx.elementProperty); [EOL]     assertEquals(ex.wrappedElementProperty, readEx.wrappedElementProperty); [EOL]     assertEquals(ex.enumProperty, readEx.enumProperty); [EOL] }
public void testSerializeDeserializeWithJaxbAnnotations() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.INDENT_OUTPUT); [EOL]     JacksonExample ex = new JacksonExample(); [EOL]     QName qname = new QName("urn:hi", "hello"); [EOL]     ex.setQname(qname); [EOL]     ex.setAttributeProperty("attributeValue"); [EOL]     ex.setElementProperty("elementValue"); [EOL]     ex.setWrappedElementProperty(Arrays.asList("wrappedElementValue")); [EOL]     ex.setEnumProperty(EnumExample.VALUE1); [EOL]     StringWriter writer = new StringWriter(); [EOL]     mapper.writeValue(writer, ex); [EOL]     writer.flush(); [EOL]     writer.close(); [EOL]     String json = writer.toString(); [EOL]     JacksonExample readEx = mapper.readValue(json, JacksonExample.class); [EOL]     assertEquals(ex.qname, readEx.qname); [EOL]     assertEquals(ex.attributeProperty, readEx.attributeProperty); [EOL]     assertEquals(ex.elementProperty, readEx.elementProperty); [EOL]     assertEquals(ex.wrappedElementProperty, readEx.wrappedElementProperty); [EOL]     assertEquals(ex.enumProperty, readEx.enumProperty); [EOL] }
public void testPropertyWithSubtypes() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerSubtypes(SubB.class, SubC.class, SubD.class); [EOL]     String json = mapper.writeValueAsString(new PropertyBean(new SubC())); [EOL]     PropertyBean result = mapper.readValue(json, PropertyBean.class); [EOL]     assertSame(SubC.class, result.value.getClass()); [EOL] }
public void testPropertyWithSubtypes() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerSubtypes(SubB.class, SubC.class, SubD.class); [EOL]     String json = mapper.writeValueAsString(new PropertyBean(new SubC())); [EOL]     PropertyBean result = mapper.readValue(json, PropertyBean.class); [EOL]     assertSame(SubC.class, result.value.getClass()); [EOL] }
public void testPropertyWithSubtypes() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerSubtypes(SubB.class, SubC.class, SubD.class); [EOL]     String json = mapper.writeValueAsString(new PropertyBean(new SubC())); [EOL]     PropertyBean result = mapper.readValue(json, PropertyBean.class); [EOL]     assertSame(SubC.class, result.value.getClass()); [EOL] }
public void testPropertyWithSubtypes() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerSubtypes(SubB.class, SubC.class, SubD.class); [EOL]     String json = mapper.writeValueAsString(new PropertyBean(new SubC())); [EOL]     PropertyBean result = mapper.readValue(json, PropertyBean.class); [EOL]     assertSame(SubC.class, result.value.getClass()); [EOL] }
public void testPropertyWithSubtypes() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerSubtypes(SubB.class, SubC.class, SubD.class); [EOL]     String json = mapper.writeValueAsString(new PropertyBean(new SubC())); [EOL]     PropertyBean result = mapper.readValue(json, PropertyBean.class); [EOL]     assertSame(SubC.class, result.value.getClass()); [EOL] }
public void testSerializeDeserializeWithJaxbAnnotations() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.INDENT_OUTPUT); [EOL]     JacksonExample ex = new JacksonExample(); [EOL]     QName qname = new QName("urn:hi", "hello"); [EOL]     ex.setQname(qname); [EOL]     ex.setAttributeProperty("attributeValue"); [EOL]     ex.setElementProperty("elementValue"); [EOL]     ex.setWrappedElementProperty(Arrays.asList("wrappedElementValue")); [EOL]     ex.setEnumProperty(EnumExample.VALUE1); [EOL]     StringWriter writer = new StringWriter(); [EOL]     mapper.writeValue(writer, ex); [EOL]     writer.flush(); [EOL]     writer.close(); [EOL]     String json = writer.toString(); [EOL]     JacksonExample readEx = mapper.readValue(json, JacksonExample.class); [EOL]     assertEquals(ex.qname, readEx.qname); [EOL]     assertEquals(ex.attributeProperty, readEx.attributeProperty); [EOL]     assertEquals(ex.elementProperty, readEx.elementProperty); [EOL]     assertEquals(ex.wrappedElementProperty, readEx.wrappedElementProperty); [EOL]     assertEquals(ex.enumProperty, readEx.enumProperty); [EOL] }
public void testSerializeDeserializeWithJaxbAnnotations() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.INDENT_OUTPUT); [EOL]     JacksonExample ex = new JacksonExample(); [EOL]     QName qname = new QName("urn:hi", "hello"); [EOL]     ex.setQname(qname); [EOL]     ex.setAttributeProperty("attributeValue"); [EOL]     ex.setElementProperty("elementValue"); [EOL]     ex.setWrappedElementProperty(Arrays.asList("wrappedElementValue")); [EOL]     ex.setEnumProperty(EnumExample.VALUE1); [EOL]     StringWriter writer = new StringWriter(); [EOL]     mapper.writeValue(writer, ex); [EOL]     writer.flush(); [EOL]     writer.close(); [EOL]     String json = writer.toString(); [EOL]     JacksonExample readEx = mapper.readValue(json, JacksonExample.class); [EOL]     assertEquals(ex.qname, readEx.qname); [EOL]     assertEquals(ex.attributeProperty, readEx.attributeProperty); [EOL]     assertEquals(ex.elementProperty, readEx.elementProperty); [EOL]     assertEquals(ex.wrappedElementProperty, readEx.wrappedElementProperty); [EOL]     assertEquals(ex.enumProperty, readEx.enumProperty); [EOL] }
public void testSerializeDeserializeWithJaxbAnnotations() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.INDENT_OUTPUT); [EOL]     JacksonExample ex = new JacksonExample(); [EOL]     QName qname = new QName("urn:hi", "hello"); [EOL]     ex.setQname(qname); [EOL]     ex.setAttributeProperty("attributeValue"); [EOL]     ex.setElementProperty("elementValue"); [EOL]     ex.setWrappedElementProperty(Arrays.asList("wrappedElementValue")); [EOL]     ex.setEnumProperty(EnumExample.VALUE1); [EOL]     StringWriter writer = new StringWriter(); [EOL]     mapper.writeValue(writer, ex); [EOL]     writer.flush(); [EOL]     writer.close(); [EOL]     String json = writer.toString(); [EOL]     JacksonExample readEx = mapper.readValue(json, JacksonExample.class); [EOL]     assertEquals(ex.qname, readEx.qname); [EOL]     assertEquals(ex.attributeProperty, readEx.attributeProperty); [EOL]     assertEquals(ex.elementProperty, readEx.elementProperty); [EOL]     assertEquals(ex.wrappedElementProperty, readEx.wrappedElementProperty); [EOL]     assertEquals(ex.enumProperty, readEx.enumProperty); [EOL] }
public void testSerializeDeserializeWithJaxbAnnotations() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.INDENT_OUTPUT); [EOL]     JacksonExample ex = new JacksonExample(); [EOL]     QName qname = new QName("urn:hi", "hello"); [EOL]     ex.setQname(qname); [EOL]     ex.setAttributeProperty("attributeValue"); [EOL]     ex.setElementProperty("elementValue"); [EOL]     ex.setWrappedElementProperty(Arrays.asList("wrappedElementValue")); [EOL]     ex.setEnumProperty(EnumExample.VALUE1); [EOL]     StringWriter writer = new StringWriter(); [EOL]     mapper.writeValue(writer, ex); [EOL]     writer.flush(); [EOL]     writer.close(); [EOL]     String json = writer.toString(); [EOL]     JacksonExample readEx = mapper.readValue(json, JacksonExample.class); [EOL]     assertEquals(ex.qname, readEx.qname); [EOL]     assertEquals(ex.attributeProperty, readEx.attributeProperty); [EOL]     assertEquals(ex.elementProperty, readEx.elementProperty); [EOL]     assertEquals(ex.wrappedElementProperty, readEx.wrappedElementProperty); [EOL]     assertEquals(ex.enumProperty, readEx.enumProperty); [EOL] }
public void testSerializeDeserializeWithJaxbAnnotations() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.INDENT_OUTPUT); [EOL]     JacksonExample ex = new JacksonExample(); [EOL]     QName qname = new QName("urn:hi", "hello"); [EOL]     ex.setQname(qname); [EOL]     ex.setAttributeProperty("attributeValue"); [EOL]     ex.setElementProperty("elementValue"); [EOL]     ex.setWrappedElementProperty(Arrays.asList("wrappedElementValue")); [EOL]     ex.setEnumProperty(EnumExample.VALUE1); [EOL]     StringWriter writer = new StringWriter(); [EOL]     mapper.writeValue(writer, ex); [EOL]     writer.flush(); [EOL]     writer.close(); [EOL]     String json = writer.toString(); [EOL]     JacksonExample readEx = mapper.readValue(json, JacksonExample.class); [EOL]     assertEquals(ex.qname, readEx.qname); [EOL]     assertEquals(ex.attributeProperty, readEx.attributeProperty); [EOL]     assertEquals(ex.elementProperty, readEx.elementProperty); [EOL]     assertEquals(ex.wrappedElementProperty, readEx.wrappedElementProperty); [EOL]     assertEquals(ex.enumProperty, readEx.enumProperty); [EOL] }
public void testSerializeDeserializeWithJaxbAnnotations() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.INDENT_OUTPUT); [EOL]     JacksonExample ex = new JacksonExample(); [EOL]     QName qname = new QName("urn:hi", "hello"); [EOL]     ex.setQname(qname); [EOL]     ex.setAttributeProperty("attributeValue"); [EOL]     ex.setElementProperty("elementValue"); [EOL]     ex.setWrappedElementProperty(Arrays.asList("wrappedElementValue")); [EOL]     ex.setEnumProperty(EnumExample.VALUE1); [EOL]     StringWriter writer = new StringWriter(); [EOL]     mapper.writeValue(writer, ex); [EOL]     writer.flush(); [EOL]     writer.close(); [EOL]     String json = writer.toString(); [EOL]     JacksonExample readEx = mapper.readValue(json, JacksonExample.class); [EOL]     assertEquals(ex.qname, readEx.qname); [EOL]     assertEquals(ex.attributeProperty, readEx.attributeProperty); [EOL]     assertEquals(ex.elementProperty, readEx.elementProperty); [EOL]     assertEquals(ex.wrappedElementProperty, readEx.wrappedElementProperty); [EOL]     assertEquals(ex.enumProperty, readEx.enumProperty); [EOL] }
public void testSerializeDeserializeWithJaxbAnnotations() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.INDENT_OUTPUT); [EOL]     JacksonExample ex = new JacksonExample(); [EOL]     QName qname = new QName("urn:hi", "hello"); [EOL]     ex.setQname(qname); [EOL]     ex.setAttributeProperty("attributeValue"); [EOL]     ex.setElementProperty("elementValue"); [EOL]     ex.setWrappedElementProperty(Arrays.asList("wrappedElementValue")); [EOL]     ex.setEnumProperty(EnumExample.VALUE1); [EOL]     StringWriter writer = new StringWriter(); [EOL]     mapper.writeValue(writer, ex); [EOL]     writer.flush(); [EOL]     writer.close(); [EOL]     String json = writer.toString(); [EOL]     JacksonExample readEx = mapper.readValue(json, JacksonExample.class); [EOL]     assertEquals(ex.qname, readEx.qname); [EOL]     assertEquals(ex.attributeProperty, readEx.attributeProperty); [EOL]     assertEquals(ex.elementProperty, readEx.elementProperty); [EOL]     assertEquals(ex.wrappedElementProperty, readEx.wrappedElementProperty); [EOL]     assertEquals(ex.enumProperty, readEx.enumProperty); [EOL] }
public void testSerializeDeserializeWithJaxbAnnotations() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.INDENT_OUTPUT); [EOL]     JacksonExample ex = new JacksonExample(); [EOL]     QName qname = new QName("urn:hi", "hello"); [EOL]     ex.setQname(qname); [EOL]     ex.setAttributeProperty("attributeValue"); [EOL]     ex.setElementProperty("elementValue"); [EOL]     ex.setWrappedElementProperty(Arrays.asList("wrappedElementValue")); [EOL]     ex.setEnumProperty(EnumExample.VALUE1); [EOL]     StringWriter writer = new StringWriter(); [EOL]     mapper.writeValue(writer, ex); [EOL]     writer.flush(); [EOL]     writer.close(); [EOL]     String json = writer.toString(); [EOL]     JacksonExample readEx = mapper.readValue(json, JacksonExample.class); [EOL]     assertEquals(ex.qname, readEx.qname); [EOL]     assertEquals(ex.attributeProperty, readEx.attributeProperty); [EOL]     assertEquals(ex.elementProperty, readEx.elementProperty); [EOL]     assertEquals(ex.wrappedElementProperty, readEx.wrappedElementProperty); [EOL]     assertEquals(ex.enumProperty, readEx.enumProperty); [EOL] }
public void testSerializeDeserializeWithJaxbAnnotations() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.INDENT_OUTPUT); [EOL]     JacksonExample ex = new JacksonExample(); [EOL]     QName qname = new QName("urn:hi", "hello"); [EOL]     ex.setQname(qname); [EOL]     ex.setAttributeProperty("attributeValue"); [EOL]     ex.setElementProperty("elementValue"); [EOL]     ex.setWrappedElementProperty(Arrays.asList("wrappedElementValue")); [EOL]     ex.setEnumProperty(EnumExample.VALUE1); [EOL]     StringWriter writer = new StringWriter(); [EOL]     mapper.writeValue(writer, ex); [EOL]     writer.flush(); [EOL]     writer.close(); [EOL]     String json = writer.toString(); [EOL]     JacksonExample readEx = mapper.readValue(json, JacksonExample.class); [EOL]     assertEquals(ex.qname, readEx.qname); [EOL]     assertEquals(ex.attributeProperty, readEx.attributeProperty); [EOL]     assertEquals(ex.elementProperty, readEx.elementProperty); [EOL]     assertEquals(ex.wrappedElementProperty, readEx.wrappedElementProperty); [EOL]     assertEquals(ex.enumProperty, readEx.enumProperty); [EOL] }
public void testSerializeDeserializeWithJaxbAnnotations() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.INDENT_OUTPUT); [EOL]     JacksonExample ex = new JacksonExample(); [EOL]     QName qname = new QName("urn:hi", "hello"); [EOL]     ex.setQname(qname); [EOL]     ex.setAttributeProperty("attributeValue"); [EOL]     ex.setElementProperty("elementValue"); [EOL]     ex.setWrappedElementProperty(Arrays.asList("wrappedElementValue")); [EOL]     ex.setEnumProperty(EnumExample.VALUE1); [EOL]     StringWriter writer = new StringWriter(); [EOL]     mapper.writeValue(writer, ex); [EOL]     writer.flush(); [EOL]     writer.close(); [EOL]     String json = writer.toString(); [EOL]     JacksonExample readEx = mapper.readValue(json, JacksonExample.class); [EOL]     assertEquals(ex.qname, readEx.qname); [EOL]     assertEquals(ex.attributeProperty, readEx.attributeProperty); [EOL]     assertEquals(ex.elementProperty, readEx.elementProperty); [EOL]     assertEquals(ex.wrappedElementProperty, readEx.wrappedElementProperty); [EOL]     assertEquals(ex.enumProperty, readEx.enumProperty); [EOL] }
public void testSerializeDeserializeWithJaxbAnnotations() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.INDENT_OUTPUT); [EOL]     JacksonExample ex = new JacksonExample(); [EOL]     QName qname = new QName("urn:hi", "hello"); [EOL]     ex.setQname(qname); [EOL]     ex.setAttributeProperty("attributeValue"); [EOL]     ex.setElementProperty("elementValue"); [EOL]     ex.setWrappedElementProperty(Arrays.asList("wrappedElementValue")); [EOL]     ex.setEnumProperty(EnumExample.VALUE1); [EOL]     StringWriter writer = new StringWriter(); [EOL]     mapper.writeValue(writer, ex); [EOL]     writer.flush(); [EOL]     writer.close(); [EOL]     String json = writer.toString(); [EOL]     JacksonExample readEx = mapper.readValue(json, JacksonExample.class); [EOL]     assertEquals(ex.qname, readEx.qname); [EOL]     assertEquals(ex.attributeProperty, readEx.attributeProperty); [EOL]     assertEquals(ex.elementProperty, readEx.elementProperty); [EOL]     assertEquals(ex.wrappedElementProperty, readEx.wrappedElementProperty); [EOL]     assertEquals(ex.enumProperty, readEx.enumProperty); [EOL] }
public void testSerializeDeserializeWithJaxbAnnotations() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.INDENT_OUTPUT); [EOL]     JacksonExample ex = new JacksonExample(); [EOL]     QName qname = new QName("urn:hi", "hello"); [EOL]     ex.setQname(qname); [EOL]     ex.setAttributeProperty("attributeValue"); [EOL]     ex.setElementProperty("elementValue"); [EOL]     ex.setWrappedElementProperty(Arrays.asList("wrappedElementValue")); [EOL]     ex.setEnumProperty(EnumExample.VALUE1); [EOL]     StringWriter writer = new StringWriter(); [EOL]     mapper.writeValue(writer, ex); [EOL]     writer.flush(); [EOL]     writer.close(); [EOL]     String json = writer.toString(); [EOL]     JacksonExample readEx = mapper.readValue(json, JacksonExample.class); [EOL]     assertEquals(ex.qname, readEx.qname); [EOL]     assertEquals(ex.attributeProperty, readEx.attributeProperty); [EOL]     assertEquals(ex.elementProperty, readEx.elementProperty); [EOL]     assertEquals(ex.wrappedElementProperty, readEx.wrappedElementProperty); [EOL]     assertEquals(ex.enumProperty, readEx.enumProperty); [EOL] }
public void testSerializeDeserializeWithJaxbAnnotations() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.INDENT_OUTPUT); [EOL]     JacksonExample ex = new JacksonExample(); [EOL]     QName qname = new QName("urn:hi", "hello"); [EOL]     ex.setQname(qname); [EOL]     ex.setAttributeProperty("attributeValue"); [EOL]     ex.setElementProperty("elementValue"); [EOL]     ex.setWrappedElementProperty(Arrays.asList("wrappedElementValue")); [EOL]     ex.setEnumProperty(EnumExample.VALUE1); [EOL]     StringWriter writer = new StringWriter(); [EOL]     mapper.writeValue(writer, ex); [EOL]     writer.flush(); [EOL]     writer.close(); [EOL]     String json = writer.toString(); [EOL]     JacksonExample readEx = mapper.readValue(json, JacksonExample.class); [EOL]     assertEquals(ex.qname, readEx.qname); [EOL]     assertEquals(ex.attributeProperty, readEx.attributeProperty); [EOL]     assertEquals(ex.elementProperty, readEx.elementProperty); [EOL]     assertEquals(ex.wrappedElementProperty, readEx.wrappedElementProperty); [EOL]     assertEquals(ex.enumProperty, readEx.enumProperty); [EOL] }
public void testSerializeDeserializeWithJaxbAnnotations() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.INDENT_OUTPUT); [EOL]     JacksonExample ex = new JacksonExample(); [EOL]     QName qname = new QName("urn:hi", "hello"); [EOL]     ex.setQname(qname); [EOL]     ex.setAttributeProperty("attributeValue"); [EOL]     ex.setElementProperty("elementValue"); [EOL]     ex.setWrappedElementProperty(Arrays.asList("wrappedElementValue")); [EOL]     ex.setEnumProperty(EnumExample.VALUE1); [EOL]     StringWriter writer = new StringWriter(); [EOL]     mapper.writeValue(writer, ex); [EOL]     writer.flush(); [EOL]     writer.close(); [EOL]     String json = writer.toString(); [EOL]     JacksonExample readEx = mapper.readValue(json, JacksonExample.class); [EOL]     assertEquals(ex.qname, readEx.qname); [EOL]     assertEquals(ex.attributeProperty, readEx.attributeProperty); [EOL]     assertEquals(ex.elementProperty, readEx.elementProperty); [EOL]     assertEquals(ex.wrappedElementProperty, readEx.wrappedElementProperty); [EOL]     assertEquals(ex.enumProperty, readEx.enumProperty); [EOL] }
public void testSerializeDeserializeWithJaxbAnnotations() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.INDENT_OUTPUT); [EOL]     JacksonExample ex = new JacksonExample(); [EOL]     QName qname = new QName("urn:hi", "hello"); [EOL]     ex.setQname(qname); [EOL]     ex.setAttributeProperty("attributeValue"); [EOL]     ex.setElementProperty("elementValue"); [EOL]     ex.setWrappedElementProperty(Arrays.asList("wrappedElementValue")); [EOL]     ex.setEnumProperty(EnumExample.VALUE1); [EOL]     StringWriter writer = new StringWriter(); [EOL]     mapper.writeValue(writer, ex); [EOL]     writer.flush(); [EOL]     writer.close(); [EOL]     String json = writer.toString(); [EOL]     JacksonExample readEx = mapper.readValue(json, JacksonExample.class); [EOL]     assertEquals(ex.qname, readEx.qname); [EOL]     assertEquals(ex.attributeProperty, readEx.attributeProperty); [EOL]     assertEquals(ex.elementProperty, readEx.elementProperty); [EOL]     assertEquals(ex.wrappedElementProperty, readEx.wrappedElementProperty); [EOL]     assertEquals(ex.enumProperty, readEx.enumProperty); [EOL] }
public void testSerializeDeserializeWithJaxbAnnotations() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.INDENT_OUTPUT); [EOL]     JacksonExample ex = new JacksonExample(); [EOL]     QName qname = new QName("urn:hi", "hello"); [EOL]     ex.setQname(qname); [EOL]     ex.setAttributeProperty("attributeValue"); [EOL]     ex.setElementProperty("elementValue"); [EOL]     ex.setWrappedElementProperty(Arrays.asList("wrappedElementValue")); [EOL]     ex.setEnumProperty(EnumExample.VALUE1); [EOL]     StringWriter writer = new StringWriter(); [EOL]     mapper.writeValue(writer, ex); [EOL]     writer.flush(); [EOL]     writer.close(); [EOL]     String json = writer.toString(); [EOL]     JacksonExample readEx = mapper.readValue(json, JacksonExample.class); [EOL]     assertEquals(ex.qname, readEx.qname); [EOL]     assertEquals(ex.attributeProperty, readEx.attributeProperty); [EOL]     assertEquals(ex.elementProperty, readEx.elementProperty); [EOL]     assertEquals(ex.wrappedElementProperty, readEx.wrappedElementProperty); [EOL]     assertEquals(ex.enumProperty, readEx.enumProperty); [EOL] }
public void testSerializeDeserializeWithJaxbAnnotations() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.INDENT_OUTPUT); [EOL]     JacksonExample ex = new JacksonExample(); [EOL]     QName qname = new QName("urn:hi", "hello"); [EOL]     ex.setQname(qname); [EOL]     ex.setAttributeProperty("attributeValue"); [EOL]     ex.setElementProperty("elementValue"); [EOL]     ex.setWrappedElementProperty(Arrays.asList("wrappedElementValue")); [EOL]     ex.setEnumProperty(EnumExample.VALUE1); [EOL]     StringWriter writer = new StringWriter(); [EOL]     mapper.writeValue(writer, ex); [EOL]     writer.flush(); [EOL]     writer.close(); [EOL]     String json = writer.toString(); [EOL]     JacksonExample readEx = mapper.readValue(json, JacksonExample.class); [EOL]     assertEquals(ex.qname, readEx.qname); [EOL]     assertEquals(ex.attributeProperty, readEx.attributeProperty); [EOL]     assertEquals(ex.elementProperty, readEx.elementProperty); [EOL]     assertEquals(ex.wrappedElementProperty, readEx.wrappedElementProperty); [EOL]     assertEquals(ex.enumProperty, readEx.enumProperty); [EOL] }
public void testSerializeDeserializeWithJaxbAnnotations() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.INDENT_OUTPUT); [EOL]     JacksonExample ex = new JacksonExample(); [EOL]     QName qname = new QName("urn:hi", "hello"); [EOL]     ex.setQname(qname); [EOL]     ex.setAttributeProperty("attributeValue"); [EOL]     ex.setElementProperty("elementValue"); [EOL]     ex.setWrappedElementProperty(Arrays.asList("wrappedElementValue")); [EOL]     ex.setEnumProperty(EnumExample.VALUE1); [EOL]     StringWriter writer = new StringWriter(); [EOL]     mapper.writeValue(writer, ex); [EOL]     writer.flush(); [EOL]     writer.close(); [EOL]     String json = writer.toString(); [EOL]     JacksonExample readEx = mapper.readValue(json, JacksonExample.class); [EOL]     assertEquals(ex.qname, readEx.qname); [EOL]     assertEquals(ex.attributeProperty, readEx.attributeProperty); [EOL]     assertEquals(ex.elementProperty, readEx.elementProperty); [EOL]     assertEquals(ex.wrappedElementProperty, readEx.wrappedElementProperty); [EOL]     assertEquals(ex.enumProperty, readEx.enumProperty); [EOL] }
public void testSerializeDeserializeWithJaxbAnnotations() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.INDENT_OUTPUT); [EOL]     JacksonExample ex = new JacksonExample(); [EOL]     QName qname = new QName("urn:hi", "hello"); [EOL]     ex.setQname(qname); [EOL]     ex.setAttributeProperty("attributeValue"); [EOL]     ex.setElementProperty("elementValue"); [EOL]     ex.setWrappedElementProperty(Arrays.asList("wrappedElementValue")); [EOL]     ex.setEnumProperty(EnumExample.VALUE1); [EOL]     StringWriter writer = new StringWriter(); [EOL]     mapper.writeValue(writer, ex); [EOL]     writer.flush(); [EOL]     writer.close(); [EOL]     String json = writer.toString(); [EOL]     JacksonExample readEx = mapper.readValue(json, JacksonExample.class); [EOL]     assertEquals(ex.qname, readEx.qname); [EOL]     assertEquals(ex.attributeProperty, readEx.attributeProperty); [EOL]     assertEquals(ex.elementProperty, readEx.elementProperty); [EOL]     assertEquals(ex.wrappedElementProperty, readEx.wrappedElementProperty); [EOL]     assertEquals(ex.enumProperty, readEx.enumProperty); [EOL] }
public void testSerializeDeserializeWithJaxbAnnotations() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.INDENT_OUTPUT); [EOL]     JacksonExample ex = new JacksonExample(); [EOL]     QName qname = new QName("urn:hi", "hello"); [EOL]     ex.setQname(qname); [EOL]     ex.setAttributeProperty("attributeValue"); [EOL]     ex.setElementProperty("elementValue"); [EOL]     ex.setWrappedElementProperty(Arrays.asList("wrappedElementValue")); [EOL]     ex.setEnumProperty(EnumExample.VALUE1); [EOL]     StringWriter writer = new StringWriter(); [EOL]     mapper.writeValue(writer, ex); [EOL]     writer.flush(); [EOL]     writer.close(); [EOL]     String json = writer.toString(); [EOL]     JacksonExample readEx = mapper.readValue(json, JacksonExample.class); [EOL]     assertEquals(ex.qname, readEx.qname); [EOL]     assertEquals(ex.attributeProperty, readEx.attributeProperty); [EOL]     assertEquals(ex.elementProperty, readEx.elementProperty); [EOL]     assertEquals(ex.wrappedElementProperty, readEx.wrappedElementProperty); [EOL]     assertEquals(ex.enumProperty, readEx.enumProperty); [EOL] }
public void testSerializeDeserializeWithJaxbAnnotations() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.INDENT_OUTPUT); [EOL]     JacksonExample ex = new JacksonExample(); [EOL]     QName qname = new QName("urn:hi", "hello"); [EOL]     ex.setQname(qname); [EOL]     ex.setAttributeProperty("attributeValue"); [EOL]     ex.setElementProperty("elementValue"); [EOL]     ex.setWrappedElementProperty(Arrays.asList("wrappedElementValue")); [EOL]     ex.setEnumProperty(EnumExample.VALUE1); [EOL]     StringWriter writer = new StringWriter(); [EOL]     mapper.writeValue(writer, ex); [EOL]     writer.flush(); [EOL]     writer.close(); [EOL]     String json = writer.toString(); [EOL]     JacksonExample readEx = mapper.readValue(json, JacksonExample.class); [EOL]     assertEquals(ex.qname, readEx.qname); [EOL]     assertEquals(ex.attributeProperty, readEx.attributeProperty); [EOL]     assertEquals(ex.elementProperty, readEx.elementProperty); [EOL]     assertEquals(ex.wrappedElementProperty, readEx.wrappedElementProperty); [EOL]     assertEquals(ex.enumProperty, readEx.enumProperty); [EOL] }
public void testSerializeDeserializeWithJaxbAnnotations() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.INDENT_OUTPUT); [EOL]     JacksonExample ex = new JacksonExample(); [EOL]     QName qname = new QName("urn:hi", "hello"); [EOL]     ex.setQname(qname); [EOL]     ex.setAttributeProperty("attributeValue"); [EOL]     ex.setElementProperty("elementValue"); [EOL]     ex.setWrappedElementProperty(Arrays.asList("wrappedElementValue")); [EOL]     ex.setEnumProperty(EnumExample.VALUE1); [EOL]     StringWriter writer = new StringWriter(); [EOL]     mapper.writeValue(writer, ex); [EOL]     writer.flush(); [EOL]     writer.close(); [EOL]     String json = writer.toString(); [EOL]     JacksonExample readEx = mapper.readValue(json, JacksonExample.class); [EOL]     assertEquals(ex.qname, readEx.qname); [EOL]     assertEquals(ex.attributeProperty, readEx.attributeProperty); [EOL]     assertEquals(ex.elementProperty, readEx.elementProperty); [EOL]     assertEquals(ex.wrappedElementProperty, readEx.wrappedElementProperty); [EOL]     assertEquals(ex.enumProperty, readEx.enumProperty); [EOL] }
public void testSerializeDeserializeWithJaxbAnnotations() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.INDENT_OUTPUT); [EOL]     JacksonExample ex = new JacksonExample(); [EOL]     QName qname = new QName("urn:hi", "hello"); [EOL]     ex.setQname(qname); [EOL]     ex.setAttributeProperty("attributeValue"); [EOL]     ex.setElementProperty("elementValue"); [EOL]     ex.setWrappedElementProperty(Arrays.asList("wrappedElementValue")); [EOL]     ex.setEnumProperty(EnumExample.VALUE1); [EOL]     StringWriter writer = new StringWriter(); [EOL]     mapper.writeValue(writer, ex); [EOL]     writer.flush(); [EOL]     writer.close(); [EOL]     String json = writer.toString(); [EOL]     JacksonExample readEx = mapper.readValue(json, JacksonExample.class); [EOL]     assertEquals(ex.qname, readEx.qname); [EOL]     assertEquals(ex.attributeProperty, readEx.attributeProperty); [EOL]     assertEquals(ex.elementProperty, readEx.elementProperty); [EOL]     assertEquals(ex.wrappedElementProperty, readEx.wrappedElementProperty); [EOL]     assertEquals(ex.enumProperty, readEx.enumProperty); [EOL] }
public void testSerializeDeserializeWithJaxbAnnotations() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.INDENT_OUTPUT); [EOL]     JacksonExample ex = new JacksonExample(); [EOL]     QName qname = new QName("urn:hi", "hello"); [EOL]     ex.setQname(qname); [EOL]     ex.setAttributeProperty("attributeValue"); [EOL]     ex.setElementProperty("elementValue"); [EOL]     ex.setWrappedElementProperty(Arrays.asList("wrappedElementValue")); [EOL]     ex.setEnumProperty(EnumExample.VALUE1); [EOL]     StringWriter writer = new StringWriter(); [EOL]     mapper.writeValue(writer, ex); [EOL]     writer.flush(); [EOL]     writer.close(); [EOL]     String json = writer.toString(); [EOL]     JacksonExample readEx = mapper.readValue(json, JacksonExample.class); [EOL]     assertEquals(ex.qname, readEx.qname); [EOL]     assertEquals(ex.attributeProperty, readEx.attributeProperty); [EOL]     assertEquals(ex.elementProperty, readEx.elementProperty); [EOL]     assertEquals(ex.wrappedElementProperty, readEx.wrappedElementProperty); [EOL]     assertEquals(ex.enumProperty, readEx.enumProperty); [EOL] }
public void testSerializeDeserializeWithJaxbAnnotations() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.INDENT_OUTPUT); [EOL]     JacksonExample ex = new JacksonExample(); [EOL]     QName qname = new QName("urn:hi", "hello"); [EOL]     ex.setQname(qname); [EOL]     ex.setAttributeProperty("attributeValue"); [EOL]     ex.setElementProperty("elementValue"); [EOL]     ex.setWrappedElementProperty(Arrays.asList("wrappedElementValue")); [EOL]     ex.setEnumProperty(EnumExample.VALUE1); [EOL]     StringWriter writer = new StringWriter(); [EOL]     mapper.writeValue(writer, ex); [EOL]     writer.flush(); [EOL]     writer.close(); [EOL]     String json = writer.toString(); [EOL]     JacksonExample readEx = mapper.readValue(json, JacksonExample.class); [EOL]     assertEquals(ex.qname, readEx.qname); [EOL]     assertEquals(ex.attributeProperty, readEx.attributeProperty); [EOL]     assertEquals(ex.elementProperty, readEx.elementProperty); [EOL]     assertEquals(ex.wrappedElementProperty, readEx.wrappedElementProperty); [EOL]     assertEquals(ex.enumProperty, readEx.enumProperty); [EOL] }
public void testSerializeDeserializeWithJaxbAnnotations() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.INDENT_OUTPUT); [EOL]     JacksonExample ex = new JacksonExample(); [EOL]     QName qname = new QName("urn:hi", "hello"); [EOL]     ex.setQname(qname); [EOL]     ex.setAttributeProperty("attributeValue"); [EOL]     ex.setElementProperty("elementValue"); [EOL]     ex.setWrappedElementProperty(Arrays.asList("wrappedElementValue")); [EOL]     ex.setEnumProperty(EnumExample.VALUE1); [EOL]     StringWriter writer = new StringWriter(); [EOL]     mapper.writeValue(writer, ex); [EOL]     writer.flush(); [EOL]     writer.close(); [EOL]     String json = writer.toString(); [EOL]     JacksonExample readEx = mapper.readValue(json, JacksonExample.class); [EOL]     assertEquals(ex.qname, readEx.qname); [EOL]     assertEquals(ex.attributeProperty, readEx.attributeProperty); [EOL]     assertEquals(ex.elementProperty, readEx.elementProperty); [EOL]     assertEquals(ex.wrappedElementProperty, readEx.wrappedElementProperty); [EOL]     assertEquals(ex.enumProperty, readEx.enumProperty); [EOL] }
public void testSerializeDeserializeWithJaxbAnnotations() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.INDENT_OUTPUT); [EOL]     JacksonExample ex = new JacksonExample(); [EOL]     QName qname = new QName("urn:hi", "hello"); [EOL]     ex.setQname(qname); [EOL]     ex.setAttributeProperty("attributeValue"); [EOL]     ex.setElementProperty("elementValue"); [EOL]     ex.setWrappedElementProperty(Arrays.asList("wrappedElementValue")); [EOL]     ex.setEnumProperty(EnumExample.VALUE1); [EOL]     StringWriter writer = new StringWriter(); [EOL]     mapper.writeValue(writer, ex); [EOL]     writer.flush(); [EOL]     writer.close(); [EOL]     String json = writer.toString(); [EOL]     JacksonExample readEx = mapper.readValue(json, JacksonExample.class); [EOL]     assertEquals(ex.qname, readEx.qname); [EOL]     assertEquals(ex.attributeProperty, readEx.attributeProperty); [EOL]     assertEquals(ex.elementProperty, readEx.elementProperty); [EOL]     assertEquals(ex.wrappedElementProperty, readEx.wrappedElementProperty); [EOL]     assertEquals(ex.enumProperty, readEx.enumProperty); [EOL] }
public void testSerializeDeserializeWithJaxbAnnotations() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.INDENT_OUTPUT); [EOL]     JacksonExample ex = new JacksonExample(); [EOL]     QName qname = new QName("urn:hi", "hello"); [EOL]     ex.setQname(qname); [EOL]     ex.setAttributeProperty("attributeValue"); [EOL]     ex.setElementProperty("elementValue"); [EOL]     ex.setWrappedElementProperty(Arrays.asList("wrappedElementValue")); [EOL]     ex.setEnumProperty(EnumExample.VALUE1); [EOL]     StringWriter writer = new StringWriter(); [EOL]     mapper.writeValue(writer, ex); [EOL]     writer.flush(); [EOL]     writer.close(); [EOL]     String json = writer.toString(); [EOL]     JacksonExample readEx = mapper.readValue(json, JacksonExample.class); [EOL]     assertEquals(ex.qname, readEx.qname); [EOL]     assertEquals(ex.attributeProperty, readEx.attributeProperty); [EOL]     assertEquals(ex.elementProperty, readEx.elementProperty); [EOL]     assertEquals(ex.wrappedElementProperty, readEx.wrappedElementProperty); [EOL]     assertEquals(ex.enumProperty, readEx.enumProperty); [EOL] }
public void testSerializeDeserializeWithJaxbAnnotations() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.INDENT_OUTPUT); [EOL]     JacksonExample ex = new JacksonExample(); [EOL]     QName qname = new QName("urn:hi", "hello"); [EOL]     ex.setQname(qname); [EOL]     ex.setAttributeProperty("attributeValue"); [EOL]     ex.setElementProperty("elementValue"); [EOL]     ex.setWrappedElementProperty(Arrays.asList("wrappedElementValue")); [EOL]     ex.setEnumProperty(EnumExample.VALUE1); [EOL]     StringWriter writer = new StringWriter(); [EOL]     mapper.writeValue(writer, ex); [EOL]     writer.flush(); [EOL]     writer.close(); [EOL]     String json = writer.toString(); [EOL]     JacksonExample readEx = mapper.readValue(json, JacksonExample.class); [EOL]     assertEquals(ex.qname, readEx.qname); [EOL]     assertEquals(ex.attributeProperty, readEx.attributeProperty); [EOL]     assertEquals(ex.elementProperty, readEx.elementProperty); [EOL]     assertEquals(ex.wrappedElementProperty, readEx.wrappedElementProperty); [EOL]     assertEquals(ex.enumProperty, readEx.enumProperty); [EOL] }
public void testSerializeDeserializeWithJaxbAnnotations() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.INDENT_OUTPUT); [EOL]     JacksonExample ex = new JacksonExample(); [EOL]     QName qname = new QName("urn:hi", "hello"); [EOL]     ex.setQname(qname); [EOL]     ex.setAttributeProperty("attributeValue"); [EOL]     ex.setElementProperty("elementValue"); [EOL]     ex.setWrappedElementProperty(Arrays.asList("wrappedElementValue")); [EOL]     ex.setEnumProperty(EnumExample.VALUE1); [EOL]     StringWriter writer = new StringWriter(); [EOL]     mapper.writeValue(writer, ex); [EOL]     writer.flush(); [EOL]     writer.close(); [EOL]     String json = writer.toString(); [EOL]     JacksonExample readEx = mapper.readValue(json, JacksonExample.class); [EOL]     assertEquals(ex.qname, readEx.qname); [EOL]     assertEquals(ex.attributeProperty, readEx.attributeProperty); [EOL]     assertEquals(ex.elementProperty, readEx.elementProperty); [EOL]     assertEquals(ex.wrappedElementProperty, readEx.wrappedElementProperty); [EOL]     assertEquals(ex.enumProperty, readEx.enumProperty); [EOL] }
public void testSerializeDeserializeWithJaxbAnnotations() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.INDENT_OUTPUT); [EOL]     JacksonExample ex = new JacksonExample(); [EOL]     QName qname = new QName("urn:hi", "hello"); [EOL]     ex.setQname(qname); [EOL]     ex.setAttributeProperty("attributeValue"); [EOL]     ex.setElementProperty("elementValue"); [EOL]     ex.setWrappedElementProperty(Arrays.asList("wrappedElementValue")); [EOL]     ex.setEnumProperty(EnumExample.VALUE1); [EOL]     StringWriter writer = new StringWriter(); [EOL]     mapper.writeValue(writer, ex); [EOL]     writer.flush(); [EOL]     writer.close(); [EOL]     String json = writer.toString(); [EOL]     JacksonExample readEx = mapper.readValue(json, JacksonExample.class); [EOL]     assertEquals(ex.qname, readEx.qname); [EOL]     assertEquals(ex.attributeProperty, readEx.attributeProperty); [EOL]     assertEquals(ex.elementProperty, readEx.elementProperty); [EOL]     assertEquals(ex.wrappedElementProperty, readEx.wrappedElementProperty); [EOL]     assertEquals(ex.enumProperty, readEx.enumProperty); [EOL] }
public void testSerializeDeserializeWithJaxbAnnotations() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.INDENT_OUTPUT); [EOL]     JacksonExample ex = new JacksonExample(); [EOL]     QName qname = new QName("urn:hi", "hello"); [EOL]     ex.setQname(qname); [EOL]     ex.setAttributeProperty("attributeValue"); [EOL]     ex.setElementProperty("elementValue"); [EOL]     ex.setWrappedElementProperty(Arrays.asList("wrappedElementValue")); [EOL]     ex.setEnumProperty(EnumExample.VALUE1); [EOL]     StringWriter writer = new StringWriter(); [EOL]     mapper.writeValue(writer, ex); [EOL]     writer.flush(); [EOL]     writer.close(); [EOL]     String json = writer.toString(); [EOL]     JacksonExample readEx = mapper.readValue(json, JacksonExample.class); [EOL]     assertEquals(ex.qname, readEx.qname); [EOL]     assertEquals(ex.attributeProperty, readEx.attributeProperty); [EOL]     assertEquals(ex.elementProperty, readEx.elementProperty); [EOL]     assertEquals(ex.wrappedElementProperty, readEx.wrappedElementProperty); [EOL]     assertEquals(ex.enumProperty, readEx.enumProperty); [EOL] }
public void testSerializeDeserializeWithJaxbAnnotations() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.INDENT_OUTPUT); [EOL]     JacksonExample ex = new JacksonExample(); [EOL]     QName qname = new QName("urn:hi", "hello"); [EOL]     ex.setQname(qname); [EOL]     ex.setAttributeProperty("attributeValue"); [EOL]     ex.setElementProperty("elementValue"); [EOL]     ex.setWrappedElementProperty(Arrays.asList("wrappedElementValue")); [EOL]     ex.setEnumProperty(EnumExample.VALUE1); [EOL]     StringWriter writer = new StringWriter(); [EOL]     mapper.writeValue(writer, ex); [EOL]     writer.flush(); [EOL]     writer.close(); [EOL]     String json = writer.toString(); [EOL]     JacksonExample readEx = mapper.readValue(json, JacksonExample.class); [EOL]     assertEquals(ex.qname, readEx.qname); [EOL]     assertEquals(ex.attributeProperty, readEx.attributeProperty); [EOL]     assertEquals(ex.elementProperty, readEx.elementProperty); [EOL]     assertEquals(ex.wrappedElementProperty, readEx.wrappedElementProperty); [EOL]     assertEquals(ex.enumProperty, readEx.enumProperty); [EOL] }
public void testSerializeDeserializeWithJaxbAnnotations() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.INDENT_OUTPUT); [EOL]     JacksonExample ex = new JacksonExample(); [EOL]     QName qname = new QName("urn:hi", "hello"); [EOL]     ex.setQname(qname); [EOL]     ex.setAttributeProperty("attributeValue"); [EOL]     ex.setElementProperty("elementValue"); [EOL]     ex.setWrappedElementProperty(Arrays.asList("wrappedElementValue")); [EOL]     ex.setEnumProperty(EnumExample.VALUE1); [EOL]     StringWriter writer = new StringWriter(); [EOL]     mapper.writeValue(writer, ex); [EOL]     writer.flush(); [EOL]     writer.close(); [EOL]     String json = writer.toString(); [EOL]     JacksonExample readEx = mapper.readValue(json, JacksonExample.class); [EOL]     assertEquals(ex.qname, readEx.qname); [EOL]     assertEquals(ex.attributeProperty, readEx.attributeProperty); [EOL]     assertEquals(ex.elementProperty, readEx.elementProperty); [EOL]     assertEquals(ex.wrappedElementProperty, readEx.wrappedElementProperty); [EOL]     assertEquals(ex.enumProperty, readEx.enumProperty); [EOL] }
public void testAlwaysAsId() throws Exception { [EOL]     String json = MAPPER.writeValueAsString(new AlwaysContainer()); [EOL]     assertEquals("{\"a\":1,\"b\":2}", json); [EOL] }
public void testAlwaysAsId() throws Exception { [EOL]     String json = MAPPER.writeValueAsString(new AlwaysContainer()); [EOL]     assertEquals("{\"a\":1,\"b\":2}", json); [EOL] }
public void testSerializeDeserializeWithJaxbAnnotations() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.INDENT_OUTPUT); [EOL]     JacksonExample ex = new JacksonExample(); [EOL]     QName qname = new QName("urn:hi", "hello"); [EOL]     ex.setQname(qname); [EOL]     ex.setAttributeProperty("attributeValue"); [EOL]     ex.setElementProperty("elementValue"); [EOL]     ex.setWrappedElementProperty(Arrays.asList("wrappedElementValue")); [EOL]     ex.setEnumProperty(EnumExample.VALUE1); [EOL]     StringWriter writer = new StringWriter(); [EOL]     mapper.writeValue(writer, ex); [EOL]     writer.flush(); [EOL]     writer.close(); [EOL]     String json = writer.toString(); [EOL]     JacksonExample readEx = mapper.readValue(json, JacksonExample.class); [EOL]     assertEquals(ex.qname, readEx.qname); [EOL]     assertEquals(ex.attributeProperty, readEx.attributeProperty); [EOL]     assertEquals(ex.elementProperty, readEx.elementProperty); [EOL]     assertEquals(ex.wrappedElementProperty, readEx.wrappedElementProperty); [EOL]     assertEquals(ex.enumProperty, readEx.enumProperty); [EOL] }
public void testSerializeDeserializeWithJaxbAnnotations() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.INDENT_OUTPUT); [EOL]     JacksonExample ex = new JacksonExample(); [EOL]     QName qname = new QName("urn:hi", "hello"); [EOL]     ex.setQname(qname); [EOL]     ex.setAttributeProperty("attributeValue"); [EOL]     ex.setElementProperty("elementValue"); [EOL]     ex.setWrappedElementProperty(Arrays.asList("wrappedElementValue")); [EOL]     ex.setEnumProperty(EnumExample.VALUE1); [EOL]     StringWriter writer = new StringWriter(); [EOL]     mapper.writeValue(writer, ex); [EOL]     writer.flush(); [EOL]     writer.close(); [EOL]     String json = writer.toString(); [EOL]     JacksonExample readEx = mapper.readValue(json, JacksonExample.class); [EOL]     assertEquals(ex.qname, readEx.qname); [EOL]     assertEquals(ex.attributeProperty, readEx.attributeProperty); [EOL]     assertEquals(ex.elementProperty, readEx.elementProperty); [EOL]     assertEquals(ex.wrappedElementProperty, readEx.wrappedElementProperty); [EOL]     assertEquals(ex.enumProperty, readEx.enumProperty); [EOL] }
public void testSerializeDeserializeWithJaxbAnnotations() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.INDENT_OUTPUT); [EOL]     JacksonExample ex = new JacksonExample(); [EOL]     QName qname = new QName("urn:hi", "hello"); [EOL]     ex.setQname(qname); [EOL]     ex.setAttributeProperty("attributeValue"); [EOL]     ex.setElementProperty("elementValue"); [EOL]     ex.setWrappedElementProperty(Arrays.asList("wrappedElementValue")); [EOL]     ex.setEnumProperty(EnumExample.VALUE1); [EOL]     StringWriter writer = new StringWriter(); [EOL]     mapper.writeValue(writer, ex); [EOL]     writer.flush(); [EOL]     writer.close(); [EOL]     String json = writer.toString(); [EOL]     JacksonExample readEx = mapper.readValue(json, JacksonExample.class); [EOL]     assertEquals(ex.qname, readEx.qname); [EOL]     assertEquals(ex.attributeProperty, readEx.attributeProperty); [EOL]     assertEquals(ex.elementProperty, readEx.elementProperty); [EOL]     assertEquals(ex.wrappedElementProperty, readEx.wrappedElementProperty); [EOL]     assertEquals(ex.enumProperty, readEx.enumProperty); [EOL] }
public void testSerializeDeserializeWithJaxbAnnotations() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.INDENT_OUTPUT); [EOL]     JacksonExample ex = new JacksonExample(); [EOL]     QName qname = new QName("urn:hi", "hello"); [EOL]     ex.setQname(qname); [EOL]     ex.setAttributeProperty("attributeValue"); [EOL]     ex.setElementProperty("elementValue"); [EOL]     ex.setWrappedElementProperty(Arrays.asList("wrappedElementValue")); [EOL]     ex.setEnumProperty(EnumExample.VALUE1); [EOL]     StringWriter writer = new StringWriter(); [EOL]     mapper.writeValue(writer, ex); [EOL]     writer.flush(); [EOL]     writer.close(); [EOL]     String json = writer.toString(); [EOL]     JacksonExample readEx = mapper.readValue(json, JacksonExample.class); [EOL]     assertEquals(ex.qname, readEx.qname); [EOL]     assertEquals(ex.attributeProperty, readEx.attributeProperty); [EOL]     assertEquals(ex.elementProperty, readEx.elementProperty); [EOL]     assertEquals(ex.wrappedElementProperty, readEx.wrappedElementProperty); [EOL]     assertEquals(ex.enumProperty, readEx.enumProperty); [EOL] }
public void testSerializeDeserializeWithJaxbAnnotations() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.INDENT_OUTPUT); [EOL]     JacksonExample ex = new JacksonExample(); [EOL]     QName qname = new QName("urn:hi", "hello"); [EOL]     ex.setQname(qname); [EOL]     ex.setAttributeProperty("attributeValue"); [EOL]     ex.setElementProperty("elementValue"); [EOL]     ex.setWrappedElementProperty(Arrays.asList("wrappedElementValue")); [EOL]     ex.setEnumProperty(EnumExample.VALUE1); [EOL]     StringWriter writer = new StringWriter(); [EOL]     mapper.writeValue(writer, ex); [EOL]     writer.flush(); [EOL]     writer.close(); [EOL]     String json = writer.toString(); [EOL]     JacksonExample readEx = mapper.readValue(json, JacksonExample.class); [EOL]     assertEquals(ex.qname, readEx.qname); [EOL]     assertEquals(ex.attributeProperty, readEx.attributeProperty); [EOL]     assertEquals(ex.elementProperty, readEx.elementProperty); [EOL]     assertEquals(ex.wrappedElementProperty, readEx.wrappedElementProperty); [EOL]     assertEquals(ex.enumProperty, readEx.enumProperty); [EOL] }
public void testSerializeDeserializeWithJaxbAnnotations() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.INDENT_OUTPUT); [EOL]     JacksonExample ex = new JacksonExample(); [EOL]     QName qname = new QName("urn:hi", "hello"); [EOL]     ex.setQname(qname); [EOL]     ex.setAttributeProperty("attributeValue"); [EOL]     ex.setElementProperty("elementValue"); [EOL]     ex.setWrappedElementProperty(Arrays.asList("wrappedElementValue")); [EOL]     ex.setEnumProperty(EnumExample.VALUE1); [EOL]     StringWriter writer = new StringWriter(); [EOL]     mapper.writeValue(writer, ex); [EOL]     writer.flush(); [EOL]     writer.close(); [EOL]     String json = writer.toString(); [EOL]     JacksonExample readEx = mapper.readValue(json, JacksonExample.class); [EOL]     assertEquals(ex.qname, readEx.qname); [EOL]     assertEquals(ex.attributeProperty, readEx.attributeProperty); [EOL]     assertEquals(ex.elementProperty, readEx.elementProperty); [EOL]     assertEquals(ex.wrappedElementProperty, readEx.wrappedElementProperty); [EOL]     assertEquals(ex.enumProperty, readEx.enumProperty); [EOL] }
public void testSerializeDeserializeWithJaxbAnnotations() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.INDENT_OUTPUT); [EOL]     JacksonExample ex = new JacksonExample(); [EOL]     QName qname = new QName("urn:hi", "hello"); [EOL]     ex.setQname(qname); [EOL]     ex.setAttributeProperty("attributeValue"); [EOL]     ex.setElementProperty("elementValue"); [EOL]     ex.setWrappedElementProperty(Arrays.asList("wrappedElementValue")); [EOL]     ex.setEnumProperty(EnumExample.VALUE1); [EOL]     StringWriter writer = new StringWriter(); [EOL]     mapper.writeValue(writer, ex); [EOL]     writer.flush(); [EOL]     writer.close(); [EOL]     String json = writer.toString(); [EOL]     JacksonExample readEx = mapper.readValue(json, JacksonExample.class); [EOL]     assertEquals(ex.qname, readEx.qname); [EOL]     assertEquals(ex.attributeProperty, readEx.attributeProperty); [EOL]     assertEquals(ex.elementProperty, readEx.elementProperty); [EOL]     assertEquals(ex.wrappedElementProperty, readEx.wrappedElementProperty); [EOL]     assertEquals(ex.enumProperty, readEx.enumProperty); [EOL] }
public void testSerializeDeserializeWithJaxbAnnotations() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.INDENT_OUTPUT); [EOL]     JacksonExample ex = new JacksonExample(); [EOL]     QName qname = new QName("urn:hi", "hello"); [EOL]     ex.setQname(qname); [EOL]     ex.setAttributeProperty("attributeValue"); [EOL]     ex.setElementProperty("elementValue"); [EOL]     ex.setWrappedElementProperty(Arrays.asList("wrappedElementValue")); [EOL]     ex.setEnumProperty(EnumExample.VALUE1); [EOL]     StringWriter writer = new StringWriter(); [EOL]     mapper.writeValue(writer, ex); [EOL]     writer.flush(); [EOL]     writer.close(); [EOL]     String json = writer.toString(); [EOL]     JacksonExample readEx = mapper.readValue(json, JacksonExample.class); [EOL]     assertEquals(ex.qname, readEx.qname); [EOL]     assertEquals(ex.attributeProperty, readEx.attributeProperty); [EOL]     assertEquals(ex.elementProperty, readEx.elementProperty); [EOL]     assertEquals(ex.wrappedElementProperty, readEx.wrappedElementProperty); [EOL]     assertEquals(ex.enumProperty, readEx.enumProperty); [EOL] }
public void testSerializeDeserializeWithJaxbAnnotations() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.INDENT_OUTPUT); [EOL]     JacksonExample ex = new JacksonExample(); [EOL]     QName qname = new QName("urn:hi", "hello"); [EOL]     ex.setQname(qname); [EOL]     ex.setAttributeProperty("attributeValue"); [EOL]     ex.setElementProperty("elementValue"); [EOL]     ex.setWrappedElementProperty(Arrays.asList("wrappedElementValue")); [EOL]     ex.setEnumProperty(EnumExample.VALUE1); [EOL]     StringWriter writer = new StringWriter(); [EOL]     mapper.writeValue(writer, ex); [EOL]     writer.flush(); [EOL]     writer.close(); [EOL]     String json = writer.toString(); [EOL]     JacksonExample readEx = mapper.readValue(json, JacksonExample.class); [EOL]     assertEquals(ex.qname, readEx.qname); [EOL]     assertEquals(ex.attributeProperty, readEx.attributeProperty); [EOL]     assertEquals(ex.elementProperty, readEx.elementProperty); [EOL]     assertEquals(ex.wrappedElementProperty, readEx.wrappedElementProperty); [EOL]     assertEquals(ex.enumProperty, readEx.enumProperty); [EOL] }
public void testSerializeDeserializeWithJaxbAnnotations() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.INDENT_OUTPUT); [EOL]     JacksonExample ex = new JacksonExample(); [EOL]     QName qname = new QName("urn:hi", "hello"); [EOL]     ex.setQname(qname); [EOL]     ex.setAttributeProperty("attributeValue"); [EOL]     ex.setElementProperty("elementValue"); [EOL]     ex.setWrappedElementProperty(Arrays.asList("wrappedElementValue")); [EOL]     ex.setEnumProperty(EnumExample.VALUE1); [EOL]     StringWriter writer = new StringWriter(); [EOL]     mapper.writeValue(writer, ex); [EOL]     writer.flush(); [EOL]     writer.close(); [EOL]     String json = writer.toString(); [EOL]     JacksonExample readEx = mapper.readValue(json, JacksonExample.class); [EOL]     assertEquals(ex.qname, readEx.qname); [EOL]     assertEquals(ex.attributeProperty, readEx.attributeProperty); [EOL]     assertEquals(ex.elementProperty, readEx.elementProperty); [EOL]     assertEquals(ex.wrappedElementProperty, readEx.wrappedElementProperty); [EOL]     assertEquals(ex.enumProperty, readEx.enumProperty); [EOL] }
public void testSerializeDeserializeWithJaxbAnnotations() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.INDENT_OUTPUT); [EOL]     JacksonExample ex = new JacksonExample(); [EOL]     QName qname = new QName("urn:hi", "hello"); [EOL]     ex.setQname(qname); [EOL]     ex.setAttributeProperty("attributeValue"); [EOL]     ex.setElementProperty("elementValue"); [EOL]     ex.setWrappedElementProperty(Arrays.asList("wrappedElementValue")); [EOL]     ex.setEnumProperty(EnumExample.VALUE1); [EOL]     StringWriter writer = new StringWriter(); [EOL]     mapper.writeValue(writer, ex); [EOL]     writer.flush(); [EOL]     writer.close(); [EOL]     String json = writer.toString(); [EOL]     JacksonExample readEx = mapper.readValue(json, JacksonExample.class); [EOL]     assertEquals(ex.qname, readEx.qname); [EOL]     assertEquals(ex.attributeProperty, readEx.attributeProperty); [EOL]     assertEquals(ex.elementProperty, readEx.elementProperty); [EOL]     assertEquals(ex.wrappedElementProperty, readEx.wrappedElementProperty); [EOL]     assertEquals(ex.enumProperty, readEx.enumProperty); [EOL] }
public void testSerializeDeserializeWithJaxbAnnotations() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.INDENT_OUTPUT); [EOL]     JacksonExample ex = new JacksonExample(); [EOL]     QName qname = new QName("urn:hi", "hello"); [EOL]     ex.setQname(qname); [EOL]     ex.setAttributeProperty("attributeValue"); [EOL]     ex.setElementProperty("elementValue"); [EOL]     ex.setWrappedElementProperty(Arrays.asList("wrappedElementValue")); [EOL]     ex.setEnumProperty(EnumExample.VALUE1); [EOL]     StringWriter writer = new StringWriter(); [EOL]     mapper.writeValue(writer, ex); [EOL]     writer.flush(); [EOL]     writer.close(); [EOL]     String json = writer.toString(); [EOL]     JacksonExample readEx = mapper.readValue(json, JacksonExample.class); [EOL]     assertEquals(ex.qname, readEx.qname); [EOL]     assertEquals(ex.attributeProperty, readEx.attributeProperty); [EOL]     assertEquals(ex.elementProperty, readEx.elementProperty); [EOL]     assertEquals(ex.wrappedElementProperty, readEx.wrappedElementProperty); [EOL]     assertEquals(ex.enumProperty, readEx.enumProperty); [EOL] }
public void testSerializeDeserializeWithJaxbAnnotations() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.INDENT_OUTPUT); [EOL]     JacksonExample ex = new JacksonExample(); [EOL]     QName qname = new QName("urn:hi", "hello"); [EOL]     ex.setQname(qname); [EOL]     ex.setAttributeProperty("attributeValue"); [EOL]     ex.setElementProperty("elementValue"); [EOL]     ex.setWrappedElementProperty(Arrays.asList("wrappedElementValue")); [EOL]     ex.setEnumProperty(EnumExample.VALUE1); [EOL]     StringWriter writer = new StringWriter(); [EOL]     mapper.writeValue(writer, ex); [EOL]     writer.flush(); [EOL]     writer.close(); [EOL]     String json = writer.toString(); [EOL]     JacksonExample readEx = mapper.readValue(json, JacksonExample.class); [EOL]     assertEquals(ex.qname, readEx.qname); [EOL]     assertEquals(ex.attributeProperty, readEx.attributeProperty); [EOL]     assertEquals(ex.elementProperty, readEx.elementProperty); [EOL]     assertEquals(ex.wrappedElementProperty, readEx.wrappedElementProperty); [EOL]     assertEquals(ex.enumProperty, readEx.enumProperty); [EOL] }
public void testSerializeDeserializeWithJaxbAnnotations() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.INDENT_OUTPUT); [EOL]     JacksonExample ex = new JacksonExample(); [EOL]     QName qname = new QName("urn:hi", "hello"); [EOL]     ex.setQname(qname); [EOL]     ex.setAttributeProperty("attributeValue"); [EOL]     ex.setElementProperty("elementValue"); [EOL]     ex.setWrappedElementProperty(Arrays.asList("wrappedElementValue")); [EOL]     ex.setEnumProperty(EnumExample.VALUE1); [EOL]     StringWriter writer = new StringWriter(); [EOL]     mapper.writeValue(writer, ex); [EOL]     writer.flush(); [EOL]     writer.close(); [EOL]     String json = writer.toString(); [EOL]     JacksonExample readEx = mapper.readValue(json, JacksonExample.class); [EOL]     assertEquals(ex.qname, readEx.qname); [EOL]     assertEquals(ex.attributeProperty, readEx.attributeProperty); [EOL]     assertEquals(ex.elementProperty, readEx.elementProperty); [EOL]     assertEquals(ex.wrappedElementProperty, readEx.wrappedElementProperty); [EOL]     assertEquals(ex.enumProperty, readEx.enumProperty); [EOL] }
public void testSerializeDeserializeWithJaxbAnnotations() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.INDENT_OUTPUT); [EOL]     JacksonExample ex = new JacksonExample(); [EOL]     QName qname = new QName("urn:hi", "hello"); [EOL]     ex.setQname(qname); [EOL]     ex.setAttributeProperty("attributeValue"); [EOL]     ex.setElementProperty("elementValue"); [EOL]     ex.setWrappedElementProperty(Arrays.asList("wrappedElementValue")); [EOL]     ex.setEnumProperty(EnumExample.VALUE1); [EOL]     StringWriter writer = new StringWriter(); [EOL]     mapper.writeValue(writer, ex); [EOL]     writer.flush(); [EOL]     writer.close(); [EOL]     String json = writer.toString(); [EOL]     JacksonExample readEx = mapper.readValue(json, JacksonExample.class); [EOL]     assertEquals(ex.qname, readEx.qname); [EOL]     assertEquals(ex.attributeProperty, readEx.attributeProperty); [EOL]     assertEquals(ex.elementProperty, readEx.elementProperty); [EOL]     assertEquals(ex.wrappedElementProperty, readEx.wrappedElementProperty); [EOL]     assertEquals(ex.enumProperty, readEx.enumProperty); [EOL] }
public void testSerializeDeserializeWithJaxbAnnotations() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.INDENT_OUTPUT); [EOL]     JacksonExample ex = new JacksonExample(); [EOL]     QName qname = new QName("urn:hi", "hello"); [EOL]     ex.setQname(qname); [EOL]     ex.setAttributeProperty("attributeValue"); [EOL]     ex.setElementProperty("elementValue"); [EOL]     ex.setWrappedElementProperty(Arrays.asList("wrappedElementValue")); [EOL]     ex.setEnumProperty(EnumExample.VALUE1); [EOL]     StringWriter writer = new StringWriter(); [EOL]     mapper.writeValue(writer, ex); [EOL]     writer.flush(); [EOL]     writer.close(); [EOL]     String json = writer.toString(); [EOL]     JacksonExample readEx = mapper.readValue(json, JacksonExample.class); [EOL]     assertEquals(ex.qname, readEx.qname); [EOL]     assertEquals(ex.attributeProperty, readEx.attributeProperty); [EOL]     assertEquals(ex.elementProperty, readEx.elementProperty); [EOL]     assertEquals(ex.wrappedElementProperty, readEx.wrappedElementProperty); [EOL]     assertEquals(ex.enumProperty, readEx.enumProperty); [EOL] }
public void testSerializeDeserializeWithJaxbAnnotations() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.INDENT_OUTPUT); [EOL]     JacksonExample ex = new JacksonExample(); [EOL]     QName qname = new QName("urn:hi", "hello"); [EOL]     ex.setQname(qname); [EOL]     ex.setAttributeProperty("attributeValue"); [EOL]     ex.setElementProperty("elementValue"); [EOL]     ex.setWrappedElementProperty(Arrays.asList("wrappedElementValue")); [EOL]     ex.setEnumProperty(EnumExample.VALUE1); [EOL]     StringWriter writer = new StringWriter(); [EOL]     mapper.writeValue(writer, ex); [EOL]     writer.flush(); [EOL]     writer.close(); [EOL]     String json = writer.toString(); [EOL]     JacksonExample readEx = mapper.readValue(json, JacksonExample.class); [EOL]     assertEquals(ex.qname, readEx.qname); [EOL]     assertEquals(ex.attributeProperty, readEx.attributeProperty); [EOL]     assertEquals(ex.elementProperty, readEx.elementProperty); [EOL]     assertEquals(ex.wrappedElementProperty, readEx.wrappedElementProperty); [EOL]     assertEquals(ex.enumProperty, readEx.enumProperty); [EOL] }
public void testSerializeDeserializeWithJaxbAnnotations() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.INDENT_OUTPUT); [EOL]     JacksonExample ex = new JacksonExample(); [EOL]     QName qname = new QName("urn:hi", "hello"); [EOL]     ex.setQname(qname); [EOL]     ex.setAttributeProperty("attributeValue"); [EOL]     ex.setElementProperty("elementValue"); [EOL]     ex.setWrappedElementProperty(Arrays.asList("wrappedElementValue")); [EOL]     ex.setEnumProperty(EnumExample.VALUE1); [EOL]     StringWriter writer = new StringWriter(); [EOL]     mapper.writeValue(writer, ex); [EOL]     writer.flush(); [EOL]     writer.close(); [EOL]     String json = writer.toString(); [EOL]     JacksonExample readEx = mapper.readValue(json, JacksonExample.class); [EOL]     assertEquals(ex.qname, readEx.qname); [EOL]     assertEquals(ex.attributeProperty, readEx.attributeProperty); [EOL]     assertEquals(ex.elementProperty, readEx.elementProperty); [EOL]     assertEquals(ex.wrappedElementProperty, readEx.wrappedElementProperty); [EOL]     assertEquals(ex.enumProperty, readEx.enumProperty); [EOL] }
public void testSerializeDeserializeWithJaxbAnnotations() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.INDENT_OUTPUT); [EOL]     JacksonExample ex = new JacksonExample(); [EOL]     QName qname = new QName("urn:hi", "hello"); [EOL]     ex.setQname(qname); [EOL]     ex.setAttributeProperty("attributeValue"); [EOL]     ex.setElementProperty("elementValue"); [EOL]     ex.setWrappedElementProperty(Arrays.asList("wrappedElementValue")); [EOL]     ex.setEnumProperty(EnumExample.VALUE1); [EOL]     StringWriter writer = new StringWriter(); [EOL]     mapper.writeValue(writer, ex); [EOL]     writer.flush(); [EOL]     writer.close(); [EOL]     String json = writer.toString(); [EOL]     JacksonExample readEx = mapper.readValue(json, JacksonExample.class); [EOL]     assertEquals(ex.qname, readEx.qname); [EOL]     assertEquals(ex.attributeProperty, readEx.attributeProperty); [EOL]     assertEquals(ex.elementProperty, readEx.elementProperty); [EOL]     assertEquals(ex.wrappedElementProperty, readEx.wrappedElementProperty); [EOL]     assertEquals(ex.enumProperty, readEx.enumProperty); [EOL] }
public void testSerializeDeserializeWithJaxbAnnotations() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.INDENT_OUTPUT); [EOL]     JacksonExample ex = new JacksonExample(); [EOL]     QName qname = new QName("urn:hi", "hello"); [EOL]     ex.setQname(qname); [EOL]     ex.setAttributeProperty("attributeValue"); [EOL]     ex.setElementProperty("elementValue"); [EOL]     ex.setWrappedElementProperty(Arrays.asList("wrappedElementValue")); [EOL]     ex.setEnumProperty(EnumExample.VALUE1); [EOL]     StringWriter writer = new StringWriter(); [EOL]     mapper.writeValue(writer, ex); [EOL]     writer.flush(); [EOL]     writer.close(); [EOL]     String json = writer.toString(); [EOL]     JacksonExample readEx = mapper.readValue(json, JacksonExample.class); [EOL]     assertEquals(ex.qname, readEx.qname); [EOL]     assertEquals(ex.attributeProperty, readEx.attributeProperty); [EOL]     assertEquals(ex.elementProperty, readEx.elementProperty); [EOL]     assertEquals(ex.wrappedElementProperty, readEx.wrappedElementProperty); [EOL]     assertEquals(ex.enumProperty, readEx.enumProperty); [EOL] }
public void testSerializeDeserializeWithJaxbAnnotations() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.INDENT_OUTPUT); [EOL]     JacksonExample ex = new JacksonExample(); [EOL]     QName qname = new QName("urn:hi", "hello"); [EOL]     ex.setQname(qname); [EOL]     ex.setAttributeProperty("attributeValue"); [EOL]     ex.setElementProperty("elementValue"); [EOL]     ex.setWrappedElementProperty(Arrays.asList("wrappedElementValue")); [EOL]     ex.setEnumProperty(EnumExample.VALUE1); [EOL]     StringWriter writer = new StringWriter(); [EOL]     mapper.writeValue(writer, ex); [EOL]     writer.flush(); [EOL]     writer.close(); [EOL]     String json = writer.toString(); [EOL]     JacksonExample readEx = mapper.readValue(json, JacksonExample.class); [EOL]     assertEquals(ex.qname, readEx.qname); [EOL]     assertEquals(ex.attributeProperty, readEx.attributeProperty); [EOL]     assertEquals(ex.elementProperty, readEx.elementProperty); [EOL]     assertEquals(ex.wrappedElementProperty, readEx.wrappedElementProperty); [EOL]     assertEquals(ex.enumProperty, readEx.enumProperty); [EOL] }
public void testClassAnnotationForLists() throws Exception { [EOL]     ConvertingBeanContainer container = objectReader(ConvertingBeanContainer.class).readValue("{\"values\":[[1,2],[3,4]]}"); [EOL]     assertNotNull(container); [EOL]     assertNotNull(container.values); [EOL]     assertEquals(2, container.values.size()); [EOL]     assertEquals(4, container.values.get(1).y); [EOL] }
public void testClassAnnotationForLists() throws Exception { [EOL]     ConvertingBeanContainer container = objectReader(ConvertingBeanContainer.class).readValue("{\"values\":[[1,2],[3,4]]}"); [EOL]     assertNotNull(container); [EOL]     assertNotNull(container.values); [EOL]     assertEquals(2, container.values.size()); [EOL]     assertEquals(4, container.values.get(1).y); [EOL] }
public void testClassAnnotationForLists() throws Exception { [EOL]     ConvertingBeanContainer container = objectReader(ConvertingBeanContainer.class).readValue("{\"values\":[[1,2],[3,4]]}"); [EOL]     assertNotNull(container); [EOL]     assertNotNull(container.values); [EOL]     assertEquals(2, container.values.size()); [EOL]     assertEquals(4, container.values.get(1).y); [EOL] }
public void testSerializeDeserializeWithJaxbAnnotations() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.INDENT_OUTPUT); [EOL]     JacksonExample ex = new JacksonExample(); [EOL]     QName qname = new QName("urn:hi", "hello"); [EOL]     ex.setQname(qname); [EOL]     ex.setAttributeProperty("attributeValue"); [EOL]     ex.setElementProperty("elementValue"); [EOL]     ex.setWrappedElementProperty(Arrays.asList("wrappedElementValue")); [EOL]     ex.setEnumProperty(EnumExample.VALUE1); [EOL]     StringWriter writer = new StringWriter(); [EOL]     mapper.writeValue(writer, ex); [EOL]     writer.flush(); [EOL]     writer.close(); [EOL]     String json = writer.toString(); [EOL]     JacksonExample readEx = mapper.readValue(json, JacksonExample.class); [EOL]     assertEquals(ex.qname, readEx.qname); [EOL]     assertEquals(ex.attributeProperty, readEx.attributeProperty); [EOL]     assertEquals(ex.elementProperty, readEx.elementProperty); [EOL]     assertEquals(ex.wrappedElementProperty, readEx.wrappedElementProperty); [EOL]     assertEquals(ex.enumProperty, readEx.enumProperty); [EOL] }
public void testSerializeDeserializeWithJaxbAnnotations() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.INDENT_OUTPUT); [EOL]     JacksonExample ex = new JacksonExample(); [EOL]     QName qname = new QName("urn:hi", "hello"); [EOL]     ex.setQname(qname); [EOL]     ex.setAttributeProperty("attributeValue"); [EOL]     ex.setElementProperty("elementValue"); [EOL]     ex.setWrappedElementProperty(Arrays.asList("wrappedElementValue")); [EOL]     ex.setEnumProperty(EnumExample.VALUE1); [EOL]     StringWriter writer = new StringWriter(); [EOL]     mapper.writeValue(writer, ex); [EOL]     writer.flush(); [EOL]     writer.close(); [EOL]     String json = writer.toString(); [EOL]     JacksonExample readEx = mapper.readValue(json, JacksonExample.class); [EOL]     assertEquals(ex.qname, readEx.qname); [EOL]     assertEquals(ex.attributeProperty, readEx.attributeProperty); [EOL]     assertEquals(ex.elementProperty, readEx.elementProperty); [EOL]     assertEquals(ex.wrappedElementProperty, readEx.wrappedElementProperty); [EOL]     assertEquals(ex.enumProperty, readEx.enumProperty); [EOL] }
public void testSerializeDeserializeWithJaxbAnnotations() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.INDENT_OUTPUT); [EOL]     JacksonExample ex = new JacksonExample(); [EOL]     QName qname = new QName("urn:hi", "hello"); [EOL]     ex.setQname(qname); [EOL]     ex.setAttributeProperty("attributeValue"); [EOL]     ex.setElementProperty("elementValue"); [EOL]     ex.setWrappedElementProperty(Arrays.asList("wrappedElementValue")); [EOL]     ex.setEnumProperty(EnumExample.VALUE1); [EOL]     StringWriter writer = new StringWriter(); [EOL]     mapper.writeValue(writer, ex); [EOL]     writer.flush(); [EOL]     writer.close(); [EOL]     String json = writer.toString(); [EOL]     JacksonExample readEx = mapper.readValue(json, JacksonExample.class); [EOL]     assertEquals(ex.qname, readEx.qname); [EOL]     assertEquals(ex.attributeProperty, readEx.attributeProperty); [EOL]     assertEquals(ex.elementProperty, readEx.elementProperty); [EOL]     assertEquals(ex.wrappedElementProperty, readEx.wrappedElementProperty); [EOL]     assertEquals(ex.enumProperty, readEx.enumProperty); [EOL] }
public void testSerializeDeserializeWithJaxbAnnotations() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.INDENT_OUTPUT); [EOL]     JacksonExample ex = new JacksonExample(); [EOL]     QName qname = new QName("urn:hi", "hello"); [EOL]     ex.setQname(qname); [EOL]     ex.setAttributeProperty("attributeValue"); [EOL]     ex.setElementProperty("elementValue"); [EOL]     ex.setWrappedElementProperty(Arrays.asList("wrappedElementValue")); [EOL]     ex.setEnumProperty(EnumExample.VALUE1); [EOL]     StringWriter writer = new StringWriter(); [EOL]     mapper.writeValue(writer, ex); [EOL]     writer.flush(); [EOL]     writer.close(); [EOL]     String json = writer.toString(); [EOL]     JacksonExample readEx = mapper.readValue(json, JacksonExample.class); [EOL]     assertEquals(ex.qname, readEx.qname); [EOL]     assertEquals(ex.attributeProperty, readEx.attributeProperty); [EOL]     assertEquals(ex.elementProperty, readEx.elementProperty); [EOL]     assertEquals(ex.wrappedElementProperty, readEx.wrappedElementProperty); [EOL]     assertEquals(ex.enumProperty, readEx.enumProperty); [EOL] }
public void testSerializeDeserializeWithJaxbAnnotations() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.INDENT_OUTPUT); [EOL]     JacksonExample ex = new JacksonExample(); [EOL]     QName qname = new QName("urn:hi", "hello"); [EOL]     ex.setQname(qname); [EOL]     ex.setAttributeProperty("attributeValue"); [EOL]     ex.setElementProperty("elementValue"); [EOL]     ex.setWrappedElementProperty(Arrays.asList("wrappedElementValue")); [EOL]     ex.setEnumProperty(EnumExample.VALUE1); [EOL]     StringWriter writer = new StringWriter(); [EOL]     mapper.writeValue(writer, ex); [EOL]     writer.flush(); [EOL]     writer.close(); [EOL]     String json = writer.toString(); [EOL]     JacksonExample readEx = mapper.readValue(json, JacksonExample.class); [EOL]     assertEquals(ex.qname, readEx.qname); [EOL]     assertEquals(ex.attributeProperty, readEx.attributeProperty); [EOL]     assertEquals(ex.elementProperty, readEx.elementProperty); [EOL]     assertEquals(ex.wrappedElementProperty, readEx.wrappedElementProperty); [EOL]     assertEquals(ex.enumProperty, readEx.enumProperty); [EOL] }
public void testSerializeDeserializeWithJaxbAnnotations() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.INDENT_OUTPUT); [EOL]     JacksonExample ex = new JacksonExample(); [EOL]     QName qname = new QName("urn:hi", "hello"); [EOL]     ex.setQname(qname); [EOL]     ex.setAttributeProperty("attributeValue"); [EOL]     ex.setElementProperty("elementValue"); [EOL]     ex.setWrappedElementProperty(Arrays.asList("wrappedElementValue")); [EOL]     ex.setEnumProperty(EnumExample.VALUE1); [EOL]     StringWriter writer = new StringWriter(); [EOL]     mapper.writeValue(writer, ex); [EOL]     writer.flush(); [EOL]     writer.close(); [EOL]     String json = writer.toString(); [EOL]     JacksonExample readEx = mapper.readValue(json, JacksonExample.class); [EOL]     assertEquals(ex.qname, readEx.qname); [EOL]     assertEquals(ex.attributeProperty, readEx.attributeProperty); [EOL]     assertEquals(ex.elementProperty, readEx.elementProperty); [EOL]     assertEquals(ex.wrappedElementProperty, readEx.wrappedElementProperty); [EOL]     assertEquals(ex.enumProperty, readEx.enumProperty); [EOL] }
public void testSerializeDeserializeWithJaxbAnnotations() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.INDENT_OUTPUT); [EOL]     JacksonExample ex = new JacksonExample(); [EOL]     QName qname = new QName("urn:hi", "hello"); [EOL]     ex.setQname(qname); [EOL]     ex.setAttributeProperty("attributeValue"); [EOL]     ex.setElementProperty("elementValue"); [EOL]     ex.setWrappedElementProperty(Arrays.asList("wrappedElementValue")); [EOL]     ex.setEnumProperty(EnumExample.VALUE1); [EOL]     StringWriter writer = new StringWriter(); [EOL]     mapper.writeValue(writer, ex); [EOL]     writer.flush(); [EOL]     writer.close(); [EOL]     String json = writer.toString(); [EOL]     JacksonExample readEx = mapper.readValue(json, JacksonExample.class); [EOL]     assertEquals(ex.qname, readEx.qname); [EOL]     assertEquals(ex.attributeProperty, readEx.attributeProperty); [EOL]     assertEquals(ex.elementProperty, readEx.elementProperty); [EOL]     assertEquals(ex.wrappedElementProperty, readEx.wrappedElementProperty); [EOL]     assertEquals(ex.enumProperty, readEx.enumProperty); [EOL] }
public void testSerializeDeserializeWithJaxbAnnotations() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.INDENT_OUTPUT); [EOL]     JacksonExample ex = new JacksonExample(); [EOL]     QName qname = new QName("urn:hi", "hello"); [EOL]     ex.setQname(qname); [EOL]     ex.setAttributeProperty("attributeValue"); [EOL]     ex.setElementProperty("elementValue"); [EOL]     ex.setWrappedElementProperty(Arrays.asList("wrappedElementValue")); [EOL]     ex.setEnumProperty(EnumExample.VALUE1); [EOL]     StringWriter writer = new StringWriter(); [EOL]     mapper.writeValue(writer, ex); [EOL]     writer.flush(); [EOL]     writer.close(); [EOL]     String json = writer.toString(); [EOL]     JacksonExample readEx = mapper.readValue(json, JacksonExample.class); [EOL]     assertEquals(ex.qname, readEx.qname); [EOL]     assertEquals(ex.attributeProperty, readEx.attributeProperty); [EOL]     assertEquals(ex.elementProperty, readEx.elementProperty); [EOL]     assertEquals(ex.wrappedElementProperty, readEx.wrappedElementProperty); [EOL]     assertEquals(ex.enumProperty, readEx.enumProperty); [EOL] }
public void testSerializeDeserializeWithJaxbAnnotations() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.INDENT_OUTPUT); [EOL]     JacksonExample ex = new JacksonExample(); [EOL]     QName qname = new QName("urn:hi", "hello"); [EOL]     ex.setQname(qname); [EOL]     ex.setAttributeProperty("attributeValue"); [EOL]     ex.setElementProperty("elementValue"); [EOL]     ex.setWrappedElementProperty(Arrays.asList("wrappedElementValue")); [EOL]     ex.setEnumProperty(EnumExample.VALUE1); [EOL]     StringWriter writer = new StringWriter(); [EOL]     mapper.writeValue(writer, ex); [EOL]     writer.flush(); [EOL]     writer.close(); [EOL]     String json = writer.toString(); [EOL]     JacksonExample readEx = mapper.readValue(json, JacksonExample.class); [EOL]     assertEquals(ex.qname, readEx.qname); [EOL]     assertEquals(ex.attributeProperty, readEx.attributeProperty); [EOL]     assertEquals(ex.elementProperty, readEx.elementProperty); [EOL]     assertEquals(ex.wrappedElementProperty, readEx.wrappedElementProperty); [EOL]     assertEquals(ex.enumProperty, readEx.enumProperty); [EOL] }
public void testSerializeDeserializeWithJaxbAnnotations() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.INDENT_OUTPUT); [EOL]     JacksonExample ex = new JacksonExample(); [EOL]     QName qname = new QName("urn:hi", "hello"); [EOL]     ex.setQname(qname); [EOL]     ex.setAttributeProperty("attributeValue"); [EOL]     ex.setElementProperty("elementValue"); [EOL]     ex.setWrappedElementProperty(Arrays.asList("wrappedElementValue")); [EOL]     ex.setEnumProperty(EnumExample.VALUE1); [EOL]     StringWriter writer = new StringWriter(); [EOL]     mapper.writeValue(writer, ex); [EOL]     writer.flush(); [EOL]     writer.close(); [EOL]     String json = writer.toString(); [EOL]     JacksonExample readEx = mapper.readValue(json, JacksonExample.class); [EOL]     assertEquals(ex.qname, readEx.qname); [EOL]     assertEquals(ex.attributeProperty, readEx.attributeProperty); [EOL]     assertEquals(ex.elementProperty, readEx.elementProperty); [EOL]     assertEquals(ex.wrappedElementProperty, readEx.wrappedElementProperty); [EOL]     assertEquals(ex.enumProperty, readEx.enumProperty); [EOL] }
public void testSerializeDeserializeWithJaxbAnnotations() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.INDENT_OUTPUT); [EOL]     JacksonExample ex = new JacksonExample(); [EOL]     QName qname = new QName("urn:hi", "hello"); [EOL]     ex.setQname(qname); [EOL]     ex.setAttributeProperty("attributeValue"); [EOL]     ex.setElementProperty("elementValue"); [EOL]     ex.setWrappedElementProperty(Arrays.asList("wrappedElementValue")); [EOL]     ex.setEnumProperty(EnumExample.VALUE1); [EOL]     StringWriter writer = new StringWriter(); [EOL]     mapper.writeValue(writer, ex); [EOL]     writer.flush(); [EOL]     writer.close(); [EOL]     String json = writer.toString(); [EOL]     JacksonExample readEx = mapper.readValue(json, JacksonExample.class); [EOL]     assertEquals(ex.qname, readEx.qname); [EOL]     assertEquals(ex.attributeProperty, readEx.attributeProperty); [EOL]     assertEquals(ex.elementProperty, readEx.elementProperty); [EOL]     assertEquals(ex.wrappedElementProperty, readEx.wrappedElementProperty); [EOL]     assertEquals(ex.enumProperty, readEx.enumProperty); [EOL] }
public void testSerializeDeserializeWithJaxbAnnotations() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.INDENT_OUTPUT); [EOL]     JacksonExample ex = new JacksonExample(); [EOL]     QName qname = new QName("urn:hi", "hello"); [EOL]     ex.setQname(qname); [EOL]     ex.setAttributeProperty("attributeValue"); [EOL]     ex.setElementProperty("elementValue"); [EOL]     ex.setWrappedElementProperty(Arrays.asList("wrappedElementValue")); [EOL]     ex.setEnumProperty(EnumExample.VALUE1); [EOL]     StringWriter writer = new StringWriter(); [EOL]     mapper.writeValue(writer, ex); [EOL]     writer.flush(); [EOL]     writer.close(); [EOL]     String json = writer.toString(); [EOL]     JacksonExample readEx = mapper.readValue(json, JacksonExample.class); [EOL]     assertEquals(ex.qname, readEx.qname); [EOL]     assertEquals(ex.attributeProperty, readEx.attributeProperty); [EOL]     assertEquals(ex.elementProperty, readEx.elementProperty); [EOL]     assertEquals(ex.wrappedElementProperty, readEx.wrappedElementProperty); [EOL]     assertEquals(ex.enumProperty, readEx.enumProperty); [EOL] }
public void testSerializeDeserializeWithJaxbAnnotations() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.INDENT_OUTPUT); [EOL]     JacksonExample ex = new JacksonExample(); [EOL]     QName qname = new QName("urn:hi", "hello"); [EOL]     ex.setQname(qname); [EOL]     ex.setAttributeProperty("attributeValue"); [EOL]     ex.setElementProperty("elementValue"); [EOL]     ex.setWrappedElementProperty(Arrays.asList("wrappedElementValue")); [EOL]     ex.setEnumProperty(EnumExample.VALUE1); [EOL]     StringWriter writer = new StringWriter(); [EOL]     mapper.writeValue(writer, ex); [EOL]     writer.flush(); [EOL]     writer.close(); [EOL]     String json = writer.toString(); [EOL]     JacksonExample readEx = mapper.readValue(json, JacksonExample.class); [EOL]     assertEquals(ex.qname, readEx.qname); [EOL]     assertEquals(ex.attributeProperty, readEx.attributeProperty); [EOL]     assertEquals(ex.elementProperty, readEx.elementProperty); [EOL]     assertEquals(ex.wrappedElementProperty, readEx.wrappedElementProperty); [EOL]     assertEquals(ex.enumProperty, readEx.enumProperty); [EOL] }
public void testJsonTypeResolver() throws Exception { [EOL]     JacksonAnnotationIntrospector ai = new JacksonAnnotationIntrospector(); [EOL]     AnnotatedClass ac = AnnotatedClass.constructWithoutSuperTypes(TypeResolverBean.class, ai, null); [EOL]     JavaType baseType = TypeFactory.defaultInstance().constructType(TypeResolverBean.class); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     TypeResolverBuilder<?> rb = ai.findTypeResolver(mapper.getDeserializationConfig(), ac, baseType); [EOL]     assertNotNull(rb); [EOL]     assertSame(DummyBuilder.class, rb.getClass()); [EOL] }
public void testPropertyWithSubtypes() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerSubtypes(SubB.class, SubC.class, SubD.class); [EOL]     String json = mapper.writeValueAsString(new PropertyBean(new SubC())); [EOL]     PropertyBean result = mapper.readValue(json, PropertyBean.class); [EOL]     assertSame(SubC.class, result.value.getClass()); [EOL] }
public void testDateWithJsonFormat() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     String json; [EOL]     mapper.disable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS); [EOL]     json = mapper.writeValueAsString(new DateAsNumberBean(0L)); [EOL]     assertEquals("{\"date\":0}", json); [EOL]     mapper.enable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS); [EOL]     json = mapper.writer().with(getUTCTimeZone()).writeValueAsString(new DateAsStringBean(0L)); [EOL]     assertEquals("{\"date\":\"1970-01-01\"}", json); [EOL]     json = mapper.writeValueAsString(new DateInCETBean(0L)); [EOL]     assertEquals("{\"date\":\"1970-01-01,01:00\"}", json); [EOL] }
public void testAnnotatedCtor() throws Exception { [EOL]     ObjectMapper mapper = _mapperWithAnnotatedContextual(); [EOL]     ContextualCtorBean bean = mapper.readValue("{\"a\":\"foo\",\"b\":\"bar\"}", ContextualCtorBean.class); [EOL]     assertEquals("CtorA=foo", bean.a); [EOL]     assertEquals("CtorB=bar", bean.b); [EOL]     bean = mapper.readValue("{\"a\":\"1\",\"b\":\"0\"}", ContextualCtorBean.class); [EOL]     assertEquals("CtorA=1", bean.a); [EOL]     assertEquals("CtorB=0", bean.b); [EOL] }
public void testClassAnnotationForLists() throws Exception { [EOL]     ConvertingBeanContainer container = objectReader(ConvertingBeanContainer.class).readValue("{\"values\":[[1,2],[3,4]]}"); [EOL]     assertNotNull(container); [EOL]     assertNotNull(container.values); [EOL]     assertEquals(2, container.values.size()); [EOL]     assertEquals(4, container.values.get(1).y); [EOL] }
public void testBoolean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     JsonNode result = mapper.readTree("true\n"); [EOL]     assertFalse(result.isNull()); [EOL]     assertFalse(result.isNumber()); [EOL]     assertFalse(result.isTextual()); [EOL]     assertTrue(result.isBoolean()); [EOL]     assertType(result, BooleanNode.class); [EOL]     assertTrue(result.booleanValue()); [EOL]     assertEquals("true", result.asText()); [EOL]     assertFalse(result.isMissingNode()); [EOL]     assertEquals(result, BooleanNode.valueOf(true)); [EOL]     assertEquals(result, BooleanNode.getTrue()); [EOL] }
public void testCustomDateWithAnnotation() throws Exception { [EOL]     DateAsStringBean result = MAPPER.readValue("{\"date\":\"/2005/05/25/\"}", DateAsStringBean.class); [EOL]     assertNotNull(result); [EOL]     assertNotNull(result.date); [EOL]     Calendar c = Calendar.getInstance(TimeZone.getTimeZone("GMT")); [EOL]     long l = result.date.getTime(); [EOL]     if (l == 0L) { [EOL]         fail("Should not get null date"); [EOL]     } [EOL]     c.setTimeInMillis(l); [EOL]     assertEquals(2005, c.get(Calendar.YEAR)); [EOL]     assertEquals(Calendar.MAY, c.get(Calendar.MONTH)); [EOL]     assertEquals(25, c.get(Calendar.DAY_OF_MONTH)); [EOL] }
public void testCustomDateWithAnnotation() throws Exception { [EOL]     DateAsStringBean result = MAPPER.readValue("{\"date\":\"/2005/05/25/\"}", DateAsStringBean.class); [EOL]     assertNotNull(result); [EOL]     assertNotNull(result.date); [EOL]     Calendar c = Calendar.getInstance(TimeZone.getTimeZone("GMT")); [EOL]     long l = result.date.getTime(); [EOL]     if (l == 0L) { [EOL]         fail("Should not get null date"); [EOL]     } [EOL]     c.setTimeInMillis(l); [EOL]     assertEquals(2005, c.get(Calendar.YEAR)); [EOL]     assertEquals(Calendar.MAY, c.get(Calendar.MONTH)); [EOL]     assertEquals(25, c.get(Calendar.DAY_OF_MONTH)); [EOL] }
public void testClass() throws IOException { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     assertSame(String.class, mapper.readValue(quote("java.lang.String"), Class.class)); [EOL]     assertSame(Boolean.TYPE, mapper.readValue(quote("boolean"), Class.class)); [EOL]     assertSame(Byte.TYPE, mapper.readValue(quote("byte"), Class.class)); [EOL]     assertSame(Short.TYPE, mapper.readValue(quote("short"), Class.class)); [EOL]     assertSame(Character.TYPE, mapper.readValue(quote("char"), Class.class)); [EOL]     assertSame(Integer.TYPE, mapper.readValue(quote("int"), Class.class)); [EOL]     assertSame(Long.TYPE, mapper.readValue(quote("long"), Class.class)); [EOL]     assertSame(Float.TYPE, mapper.readValue(quote("float"), Class.class)); [EOL]     assertSame(Double.TYPE, mapper.readValue(quote("double"), Class.class)); [EOL]     assertSame(Void.TYPE, mapper.readValue(quote("void"), Class.class)); [EOL] }
public void testClass() throws IOException { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     assertSame(String.class, mapper.readValue(quote("java.lang.String"), Class.class)); [EOL]     assertSame(Boolean.TYPE, mapper.readValue(quote("boolean"), Class.class)); [EOL]     assertSame(Byte.TYPE, mapper.readValue(quote("byte"), Class.class)); [EOL]     assertSame(Short.TYPE, mapper.readValue(quote("short"), Class.class)); [EOL]     assertSame(Character.TYPE, mapper.readValue(quote("char"), Class.class)); [EOL]     assertSame(Integer.TYPE, mapper.readValue(quote("int"), Class.class)); [EOL]     assertSame(Long.TYPE, mapper.readValue(quote("long"), Class.class)); [EOL]     assertSame(Float.TYPE, mapper.readValue(quote("float"), Class.class)); [EOL]     assertSame(Double.TYPE, mapper.readValue(quote("double"), Class.class)); [EOL]     assertSame(Void.TYPE, mapper.readValue(quote("void"), Class.class)); [EOL] }
public void testCalendarMap() throws Exception { [EOL]     Calendar c = Calendar.getInstance(TimeZone.getTimeZone("GMT")); [EOL]     c.setTimeInMillis(123456000L); [EOL]     DateFormat fmt = new SimpleDateFormat("EEE, dd MMM yyyy HH:mm:ss zzz", Locale.US); [EOL]     String JSON = "{ \"" + fmt.format(c.getTime()) + "\" : \"\", \"" + new Date(0).getTime() + "\" : null }"; [EOL]     HashMap<Calendar, String> result = MAPPER.readValue(JSON, new TypeReference<HashMap<Calendar, String>>() { [EOL]     }); [EOL]     assertNotNull(result); [EOL]     assertEquals(HashMap.class, result.getClass()); [EOL]     assertEquals(2, result.size()); [EOL]     assertTrue(result.containsKey(c)); [EOL]     assertEquals("", result.get(c)); [EOL]     c.setTimeInMillis(0); [EOL]     assertTrue(result.containsKey(c)); [EOL]     assertNull(result.get(c)); [EOL] }
public void testCalendarMap() throws Exception { [EOL]     Calendar c = Calendar.getInstance(TimeZone.getTimeZone("GMT")); [EOL]     c.setTimeInMillis(123456000L); [EOL]     DateFormat fmt = new SimpleDateFormat("EEE, dd MMM yyyy HH:mm:ss zzz", Locale.US); [EOL]     String JSON = "{ \"" + fmt.format(c.getTime()) + "\" : \"\", \"" + new Date(0).getTime() + "\" : null }"; [EOL]     HashMap<Calendar, String> result = MAPPER.readValue(JSON, new TypeReference<HashMap<Calendar, String>>() { [EOL]     }); [EOL]     assertNotNull(result); [EOL]     assertEquals(HashMap.class, result.getClass()); [EOL]     assertEquals(2, result.size()); [EOL]     assertTrue(result.containsKey(c)); [EOL]     assertEquals("", result.get(c)); [EOL]     c.setTimeInMillis(0); [EOL]     assertTrue(result.containsKey(c)); [EOL]     assertNull(result.get(c)); [EOL] }
public void testClassWithUnknownAndIgnore() throws Exception { [EOL]     ImplicitIgnores result = MAPPER.readValue("{\"a\":1,\"b\":2,\"c\":3 }", ImplicitIgnores.class); [EOL]     assertEquals(3, result.c); [EOL]     try { [EOL]         MAPPER.readValue("{\"a\":1,\"b\":2,\"c\":3,\"d\":4 }", ImplicitIgnores.class); [EOL]     } catch (JsonMappingException e) { [EOL]         verifyException(e, "Unrecognized field \"d\""); [EOL]     } [EOL] }
public void testClassWithUnknownAndIgnore() throws Exception { [EOL]     ImplicitIgnores result = MAPPER.readValue("{\"a\":1,\"b\":2,\"c\":3 }", ImplicitIgnores.class); [EOL]     assertEquals(3, result.c); [EOL]     try { [EOL]         MAPPER.readValue("{\"a\":1,\"b\":2,\"c\":3,\"d\":4 }", ImplicitIgnores.class); [EOL]     } catch (JsonMappingException e) { [EOL]         verifyException(e, "Unrecognized field \"d\""); [EOL]     } [EOL] }
public void testClassWithUnknownAndIgnore() throws Exception { [EOL]     ImplicitIgnores result = MAPPER.readValue("{\"a\":1,\"b\":2,\"c\":3 }", ImplicitIgnores.class); [EOL]     assertEquals(3, result.c); [EOL]     try { [EOL]         MAPPER.readValue("{\"a\":1,\"b\":2,\"c\":3,\"d\":4 }", ImplicitIgnores.class); [EOL]     } catch (JsonMappingException e) { [EOL]         verifyException(e, "Unrecognized field \"d\""); [EOL]     } [EOL] }
public void testClassWithUnknownAndIgnore() throws Exception { [EOL]     ImplicitIgnores result = MAPPER.readValue("{\"a\":1,\"b\":2,\"c\":3 }", ImplicitIgnores.class); [EOL]     assertEquals(3, result.c); [EOL]     try { [EOL]         MAPPER.readValue("{\"a\":1,\"b\":2,\"c\":3,\"d\":4 }", ImplicitIgnores.class); [EOL]     } catch (JsonMappingException e) { [EOL]         verifyException(e, "Unrecognized field \"d\""); [EOL]     } [EOL] }
public void testClassWithUnknownAndIgnore() throws Exception { [EOL]     ImplicitIgnores result = MAPPER.readValue("{\"a\":1,\"b\":2,\"c\":3 }", ImplicitIgnores.class); [EOL]     assertEquals(3, result.c); [EOL]     try { [EOL]         MAPPER.readValue("{\"a\":1,\"b\":2,\"c\":3,\"d\":4 }", ImplicitIgnores.class); [EOL]     } catch (JsonMappingException e) { [EOL]         verifyException(e, "Unrecognized field \"d\""); [EOL]     } [EOL] }
public void testClassWithUnknownAndIgnore() throws Exception { [EOL]     ImplicitIgnores result = MAPPER.readValue("{\"a\":1,\"b\":2,\"c\":3 }", ImplicitIgnores.class); [EOL]     assertEquals(3, result.c); [EOL]     try { [EOL]         MAPPER.readValue("{\"a\":1,\"b\":2,\"c\":3,\"d\":4 }", ImplicitIgnores.class); [EOL]     } catch (JsonMappingException e) { [EOL]         verifyException(e, "Unrecognized field \"d\""); [EOL]     } [EOL] }
public void testDoNotAllowUnknownEnumValuesAsMapKeysWhenReadAsNullDisabled() throws Exception { [EOL]     assertFalse(MAPPER.isEnabled(DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL)); [EOL]     try { [EOL]         MAPPER.readValue("{\"map\":{\"NO-SUCH-VALUE\":\"val\"}}", ClassWithEnumMapKey.class); [EOL]         fail("Expected an exception for bogus enum value..."); [EOL]     } catch (JsonMappingException jex) { [EOL]         verifyException(jex, "Can not construct Map key"); [EOL]     } [EOL] }
public void testDoNotAllowUnknownEnumValuesAsMapKeysWhenReadAsNullDisabled() throws Exception { [EOL]     assertFalse(MAPPER.isEnabled(DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL)); [EOL]     try { [EOL]         MAPPER.readValue("{\"map\":{\"NO-SUCH-VALUE\":\"val\"}}", ClassWithEnumMapKey.class); [EOL]         fail("Expected an exception for bogus enum value..."); [EOL]     } catch (JsonMappingException jex) { [EOL]         verifyException(jex, "Can not construct Map key"); [EOL]     } [EOL] }
public void testDoNotAllowUnknownEnumValuesAsMapKeysWhenReadAsNullDisabled() throws Exception { [EOL]     assertFalse(MAPPER.isEnabled(DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL)); [EOL]     try { [EOL]         MAPPER.readValue("{\"map\":{\"NO-SUCH-VALUE\":\"val\"}}", ClassWithEnumMapKey.class); [EOL]         fail("Expected an exception for bogus enum value..."); [EOL]     } catch (JsonMappingException jex) { [EOL]         verifyException(jex, "Can not construct Map key"); [EOL]     } [EOL] }
public void testDefaultImplViaModule() throws Exception { [EOL]     final String JSON = "{\"a\":123}"; [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     try { [EOL]         mapper.readValue(JSON, SuperTypeWithoutDefault.class); [EOL]         fail("Expected an exception"); [EOL]     } catch (JsonMappingException e) { [EOL]         verifyException(e, "missing property"); [EOL]     } [EOL]     mapper = new ObjectMapper(); [EOL]     SimpleModule module = new SimpleModule("test", Version.unknownVersion()); [EOL]     module.addAbstractTypeMapping(SuperTypeWithoutDefault.class, DefaultImpl505.class); [EOL]     mapper.registerModule(module); [EOL]     SuperTypeWithoutDefault bean = mapper.readValue(JSON, SuperTypeWithoutDefault.class); [EOL]     assertNotNull(bean); [EOL]     assertEquals(DefaultImpl505.class, bean.getClass()); [EOL]     assertEquals(123, ((DefaultImpl505) bean).a); [EOL]     bean = mapper.readValue("{\"#type\":\"foobar\"}", SuperTypeWithoutDefault.class); [EOL]     assertEquals(DefaultImpl505.class, bean.getClass()); [EOL]     assertEquals(0, ((DefaultImpl505) bean).a); [EOL] }
public void testDefaultImplViaModule() throws Exception { [EOL]     final String JSON = "{\"a\":123}"; [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     try { [EOL]         mapper.readValue(JSON, SuperTypeWithoutDefault.class); [EOL]         fail("Expected an exception"); [EOL]     } catch (JsonMappingException e) { [EOL]         verifyException(e, "missing property"); [EOL]     } [EOL]     mapper = new ObjectMapper(); [EOL]     SimpleModule module = new SimpleModule("test", Version.unknownVersion()); [EOL]     module.addAbstractTypeMapping(SuperTypeWithoutDefault.class, DefaultImpl505.class); [EOL]     mapper.registerModule(module); [EOL]     SuperTypeWithoutDefault bean = mapper.readValue(JSON, SuperTypeWithoutDefault.class); [EOL]     assertNotNull(bean); [EOL]     assertEquals(DefaultImpl505.class, bean.getClass()); [EOL]     assertEquals(123, ((DefaultImpl505) bean).a); [EOL]     bean = mapper.readValue("{\"#type\":\"foobar\"}", SuperTypeWithoutDefault.class); [EOL]     assertEquals(DefaultImpl505.class, bean.getClass()); [EOL]     assertEquals(0, ((DefaultImpl505) bean).a); [EOL] }
public void testDefaultImplViaModule() throws Exception { [EOL]     final String JSON = "{\"a\":123}"; [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     try { [EOL]         mapper.readValue(JSON, SuperTypeWithoutDefault.class); [EOL]         fail("Expected an exception"); [EOL]     } catch (JsonMappingException e) { [EOL]         verifyException(e, "missing property"); [EOL]     } [EOL]     mapper = new ObjectMapper(); [EOL]     SimpleModule module = new SimpleModule("test", Version.unknownVersion()); [EOL]     module.addAbstractTypeMapping(SuperTypeWithoutDefault.class, DefaultImpl505.class); [EOL]     mapper.registerModule(module); [EOL]     SuperTypeWithoutDefault bean = mapper.readValue(JSON, SuperTypeWithoutDefault.class); [EOL]     assertNotNull(bean); [EOL]     assertEquals(DefaultImpl505.class, bean.getClass()); [EOL]     assertEquals(123, ((DefaultImpl505) bean).a); [EOL]     bean = mapper.readValue("{\"#type\":\"foobar\"}", SuperTypeWithoutDefault.class); [EOL]     assertEquals(DefaultImpl505.class, bean.getClass()); [EOL]     assertEquals(0, ((DefaultImpl505) bean).a); [EOL] }
public void testCalendarMap() throws Exception { [EOL]     Calendar c = Calendar.getInstance(TimeZone.getTimeZone("GMT")); [EOL]     c.setTimeInMillis(123456000L); [EOL]     DateFormat fmt = new SimpleDateFormat("EEE, dd MMM yyyy HH:mm:ss zzz", Locale.US); [EOL]     String JSON = "{ \"" + fmt.format(c.getTime()) + "\" : \"\", \"" + new Date(0).getTime() + "\" : null }"; [EOL]     HashMap<Calendar, String> result = MAPPER.readValue(JSON, new TypeReference<HashMap<Calendar, String>>() { [EOL]     }); [EOL]     assertNotNull(result); [EOL]     assertEquals(HashMap.class, result.getClass()); [EOL]     assertEquals(2, result.size()); [EOL]     assertTrue(result.containsKey(c)); [EOL]     assertEquals("", result.get(c)); [EOL]     c.setTimeInMillis(0); [EOL]     assertTrue(result.containsKey(c)); [EOL]     assertNull(result.get(c)); [EOL] }
public void testCalendarMap() throws Exception { [EOL]     Calendar c = Calendar.getInstance(TimeZone.getTimeZone("GMT")); [EOL]     c.setTimeInMillis(123456000L); [EOL]     DateFormat fmt = new SimpleDateFormat("EEE, dd MMM yyyy HH:mm:ss zzz", Locale.US); [EOL]     String JSON = "{ \"" + fmt.format(c.getTime()) + "\" : \"\", \"" + new Date(0).getTime() + "\" : null }"; [EOL]     HashMap<Calendar, String> result = MAPPER.readValue(JSON, new TypeReference<HashMap<Calendar, String>>() { [EOL]     }); [EOL]     assertNotNull(result); [EOL]     assertEquals(HashMap.class, result.getClass()); [EOL]     assertEquals(2, result.size()); [EOL]     assertTrue(result.containsKey(c)); [EOL]     assertEquals("", result.get(c)); [EOL]     c.setTimeInMillis(0); [EOL]     assertTrue(result.containsKey(c)); [EOL]     assertNull(result.get(c)); [EOL] }
public void testParse() throws Exception { [EOL]     Date result = df.parse("2007-08-13T19:51:23Z"); [EOL]     assertEquals(date, result); [EOL] }
public void testParse() throws Exception { [EOL]     Date result = df.parse("2007-08-13T19:51:23Z"); [EOL]     assertEquals(date, result); [EOL] }
public void testAnnotatedCtor() throws Exception { [EOL]     ObjectMapper mapper = _mapperWithAnnotatedContextual(); [EOL]     ContextualCtorBean bean = mapper.readValue("{\"a\":\"foo\",\"b\":\"bar\"}", ContextualCtorBean.class); [EOL]     assertEquals("CtorA=foo", bean.a); [EOL]     assertEquals("CtorB=bar", bean.b); [EOL]     bean = mapper.readValue("{\"a\":\"1\",\"b\":\"0\"}", ContextualCtorBean.class); [EOL]     assertEquals("CtorA=1", bean.a); [EOL]     assertEquals("CtorB=0", bean.b); [EOL] }
public void testIssue882() throws Exception { [EOL]     Model original = new Model(Collections.singletonMap(new CustomKey(123), "test")); [EOL]     String json = MAPPER.writeValueAsString(original); [EOL]     Model deserialized = MAPPER.readValue(json, Model.class); [EOL]     assertNotNull(deserialized); [EOL]     assertNotNull(deserialized.map); [EOL]     assertEquals(1, deserialized.map.size()); [EOL] }
public void testIssue882() throws Exception { [EOL]     Model original = new Model(Collections.singletonMap(new CustomKey(123), "test")); [EOL]     String json = MAPPER.writeValueAsString(original); [EOL]     Model deserialized = MAPPER.readValue(json, Model.class); [EOL]     assertNotNull(deserialized); [EOL]     assertNotNull(deserialized.map); [EOL]     assertEquals(1, deserialized.map.size()); [EOL] }
public void testIssue882() throws Exception { [EOL]     Model original = new Model(Collections.singletonMap(new CustomKey(123), "test")); [EOL]     String json = MAPPER.writeValueAsString(original); [EOL]     Model deserialized = MAPPER.readValue(json, Model.class); [EOL]     assertNotNull(deserialized); [EOL]     assertNotNull(deserialized.map); [EOL]     assertEquals(1, deserialized.map.size()); [EOL] }
public void testIssue882() throws Exception { [EOL]     Model original = new Model(Collections.singletonMap(new CustomKey(123), "test")); [EOL]     String json = MAPPER.writeValueAsString(original); [EOL]     Model deserialized = MAPPER.readValue(json, Model.class); [EOL]     assertNotNull(deserialized); [EOL]     assertNotNull(deserialized.map); [EOL]     assertEquals(1, deserialized.map.size()); [EOL] }
public void testIssue882() throws Exception { [EOL]     Model original = new Model(Collections.singletonMap(new CustomKey(123), "test")); [EOL]     String json = MAPPER.writeValueAsString(original); [EOL]     Model deserialized = MAPPER.readValue(json, Model.class); [EOL]     assertNotNull(deserialized); [EOL]     assertNotNull(deserialized.map); [EOL]     assertEquals(1, deserialized.map.size()); [EOL] }
public void testIssue882() throws Exception { [EOL]     Model original = new Model(Collections.singletonMap(new CustomKey(123), "test")); [EOL]     String json = MAPPER.writeValueAsString(original); [EOL]     Model deserialized = MAPPER.readValue(json, Model.class); [EOL]     assertNotNull(deserialized); [EOL]     assertNotNull(deserialized.map); [EOL]     assertEquals(1, deserialized.map.size()); [EOL] }
public void testIssue882() throws Exception { [EOL]     Model original = new Model(Collections.singletonMap(new CustomKey(123), "test")); [EOL]     String json = MAPPER.writeValueAsString(original); [EOL]     Model deserialized = MAPPER.readValue(json, Model.class); [EOL]     assertNotNull(deserialized); [EOL]     assertNotNull(deserialized.map); [EOL]     assertEquals(1, deserialized.map.size()); [EOL] }
public void testIssue882() throws Exception { [EOL]     Model original = new Model(Collections.singletonMap(new CustomKey(123), "test")); [EOL]     String json = MAPPER.writeValueAsString(original); [EOL]     Model deserialized = MAPPER.readValue(json, Model.class); [EOL]     assertNotNull(deserialized); [EOL]     assertNotNull(deserialized.map); [EOL]     assertEquals(1, deserialized.map.size()); [EOL] }
public void testAnnotatedCtor() throws Exception { [EOL]     ObjectMapper mapper = _mapperWithAnnotatedContextual(); [EOL]     ContextualCtorBean bean = mapper.readValue("{\"a\":\"foo\",\"b\":\"bar\"}", ContextualCtorBean.class); [EOL]     assertEquals("CtorA=foo", bean.a); [EOL]     assertEquals("CtorB=bar", bean.b); [EOL]     bean = mapper.readValue("{\"a\":\"1\",\"b\":\"0\"}", ContextualCtorBean.class); [EOL]     assertEquals("CtorA=1", bean.a); [EOL]     assertEquals("CtorB=0", bean.b); [EOL] }
public void testAnnotatedCtor() throws Exception { [EOL]     ObjectMapper mapper = _mapperWithAnnotatedContextual(); [EOL]     ContextualCtorBean bean = mapper.readValue("{\"a\":\"foo\",\"b\":\"bar\"}", ContextualCtorBean.class); [EOL]     assertEquals("CtorA=foo", bean.a); [EOL]     assertEquals("CtorB=bar", bean.b); [EOL]     bean = mapper.readValue("{\"a\":\"1\",\"b\":\"0\"}", ContextualCtorBean.class); [EOL]     assertEquals("CtorA=1", bean.a); [EOL]     assertEquals("CtorB=0", bean.b); [EOL] }
public void testAnnotatedCtor() throws Exception { [EOL]     ObjectMapper mapper = _mapperWithAnnotatedContextual(); [EOL]     ContextualCtorBean bean = mapper.readValue("{\"a\":\"foo\",\"b\":\"bar\"}", ContextualCtorBean.class); [EOL]     assertEquals("CtorA=foo", bean.a); [EOL]     assertEquals("CtorB=bar", bean.b); [EOL]     bean = mapper.readValue("{\"a\":\"1\",\"b\":\"0\"}", ContextualCtorBean.class); [EOL]     assertEquals("CtorA=1", bean.a); [EOL]     assertEquals("CtorB=0", bean.b); [EOL] }
public void testWithList() throws Exception { [EOL]     assertEquals("13", MAPPER.writeValueAsString(new ListAsNumber())); [EOL] }
public void testWithList() throws Exception { [EOL]     assertEquals("13", MAPPER.writeValueAsString(new ListAsNumber())); [EOL] }
public void testWithList() throws Exception { [EOL]     assertEquals("13", MAPPER.writeValueAsString(new ListAsNumber())); [EOL] }
public void testWithList() throws Exception { [EOL]     assertEquals("13", MAPPER.writeValueAsString(new ListAsNumber())); [EOL] }
public void testWithList() throws Exception { [EOL]     assertEquals("13", MAPPER.writeValueAsString(new ListAsNumber())); [EOL] }
public void testWithList() throws Exception { [EOL]     assertEquals("13", MAPPER.writeValueAsString(new ListAsNumber())); [EOL] }
public void testWithList() throws Exception { [EOL]     assertEquals("13", MAPPER.writeValueAsString(new ListAsNumber())); [EOL] }
public void testWithList() throws Exception { [EOL]     assertEquals("13", MAPPER.writeValueAsString(new ListAsNumber())); [EOL] }
public void testWithList() throws Exception { [EOL]     assertEquals("13", MAPPER.writeValueAsString(new ListAsNumber())); [EOL] }
public void testWithList() throws Exception { [EOL]     assertEquals("13", MAPPER.writeValueAsString(new ListAsNumber())); [EOL] }
public void testWithList() throws Exception { [EOL]     assertEquals("13", MAPPER.writeValueAsString(new ListAsNumber())); [EOL] }
public void testWithList() throws Exception { [EOL]     assertEquals("13", MAPPER.writeValueAsString(new ListAsNumber())); [EOL] }
public void testWithList() throws Exception { [EOL]     assertEquals("13", MAPPER.writeValueAsString(new ListAsNumber())); [EOL] }
public void testWithList() throws Exception { [EOL]     assertEquals("13", MAPPER.writeValueAsString(new ListAsNumber())); [EOL] }
public void testWithList() throws Exception { [EOL]     assertEquals("13", MAPPER.writeValueAsString(new ListAsNumber())); [EOL] }
public void testWithList() throws Exception { [EOL]     assertEquals("13", MAPPER.writeValueAsString(new ListAsNumber())); [EOL] }
public void testWithList() throws Exception { [EOL]     assertEquals("13", MAPPER.writeValueAsString(new ListAsNumber())); [EOL] }
public void testWithList() throws Exception { [EOL]     assertEquals("13", MAPPER.writeValueAsString(new ListAsNumber())); [EOL] }
public void testWithList() throws Exception { [EOL]     assertEquals("13", MAPPER.writeValueAsString(new ListAsNumber())); [EOL] }
public void testWithList() throws Exception { [EOL]     assertEquals("13", MAPPER.writeValueAsString(new ListAsNumber())); [EOL] }
public void testSimpleArrayField() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     FieldWrapperBeanArray array = new FieldWrapperBeanArray(new FieldWrapperBean[] { new FieldWrapperBean(new BooleanWrapper(true)) }); [EOL]     String json = mapper.writeValueAsString(array); [EOL]     FieldWrapperBeanArray result = mapper.readValue(json, FieldWrapperBeanArray.class); [EOL]     assertNotNull(result); [EOL]     FieldWrapperBean[] beans = result.beans; [EOL]     assertEquals(1, beans.length); [EOL]     FieldWrapperBean bean = beans[0]; [EOL]     assertEquals(BooleanWrapper.class, bean.value.getClass()); [EOL]     assertEquals(((BooleanWrapper) bean.value).b, Boolean.TRUE); [EOL] }
public void testSimpleArrayField() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     FieldWrapperBeanArray array = new FieldWrapperBeanArray(new FieldWrapperBean[] { new FieldWrapperBean(new BooleanWrapper(true)) }); [EOL]     String json = mapper.writeValueAsString(array); [EOL]     FieldWrapperBeanArray result = mapper.readValue(json, FieldWrapperBeanArray.class); [EOL]     assertNotNull(result); [EOL]     FieldWrapperBean[] beans = result.beans; [EOL]     assertEquals(1, beans.length); [EOL]     FieldWrapperBean bean = beans[0]; [EOL]     assertEquals(BooleanWrapper.class, bean.value.getClass()); [EOL]     assertEquals(((BooleanWrapper) bean.value).b, Boolean.TRUE); [EOL] }
public void testSimpleArrayField() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     FieldWrapperBeanArray array = new FieldWrapperBeanArray(new FieldWrapperBean[] { new FieldWrapperBean(new BooleanWrapper(true)) }); [EOL]     String json = mapper.writeValueAsString(array); [EOL]     FieldWrapperBeanArray result = mapper.readValue(json, FieldWrapperBeanArray.class); [EOL]     assertNotNull(result); [EOL]     FieldWrapperBean[] beans = result.beans; [EOL]     assertEquals(1, beans.length); [EOL]     FieldWrapperBean bean = beans[0]; [EOL]     assertEquals(BooleanWrapper.class, bean.value.getClass()); [EOL]     assertEquals(((BooleanWrapper) bean.value).b, Boolean.TRUE); [EOL] }
public void testSimpleArrayField() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     FieldWrapperBeanArray array = new FieldWrapperBeanArray(new FieldWrapperBean[] { new FieldWrapperBean(new BooleanWrapper(true)) }); [EOL]     String json = mapper.writeValueAsString(array); [EOL]     FieldWrapperBeanArray result = mapper.readValue(json, FieldWrapperBeanArray.class); [EOL]     assertNotNull(result); [EOL]     FieldWrapperBean[] beans = result.beans; [EOL]     assertEquals(1, beans.length); [EOL]     FieldWrapperBean bean = beans[0]; [EOL]     assertEquals(BooleanWrapper.class, bean.value.getClass()); [EOL]     assertEquals(((BooleanWrapper) bean.value).b, Boolean.TRUE); [EOL] }
public void testSimpleArrayField() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     FieldWrapperBeanArray array = new FieldWrapperBeanArray(new FieldWrapperBean[] { new FieldWrapperBean(new BooleanWrapper(true)) }); [EOL]     String json = mapper.writeValueAsString(array); [EOL]     FieldWrapperBeanArray result = mapper.readValue(json, FieldWrapperBeanArray.class); [EOL]     assertNotNull(result); [EOL]     FieldWrapperBean[] beans = result.beans; [EOL]     assertEquals(1, beans.length); [EOL]     FieldWrapperBean bean = beans[0]; [EOL]     assertEquals(BooleanWrapper.class, bean.value.getClass()); [EOL]     assertEquals(((BooleanWrapper) bean.value).b, Boolean.TRUE); [EOL] }
public void testWithList() throws Exception { [EOL]     assertEquals("13", MAPPER.writeValueAsString(new ListAsNumber())); [EOL] }
public void testListAsObject() throws Exception { [EOL]     CollectionAsPOJO list = new CollectionAsPOJO(); [EOL]     list.add("a"); [EOL]     list.add("b"); [EOL]     String json = MAPPER.writeValueAsString(list); [EOL]     assertEquals("{\"size\":2,\"values\":[\"a\",\"b\"]}", json); [EOL]     CollectionAsPOJO result = MAPPER.readValue(json, CollectionAsPOJO.class); [EOL]     assertEquals(2, result.size()); [EOL] }
public void testFailWithDupProps() throws Exception { [EOL]     BeanWithConflict bean = new BeanWithConflict(); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     try { [EOL]         String json = mapper.writeValueAsString(bean); [EOL]         fail("Should have failed due to conflicting accessor definitions; got JSON = " + json); [EOL]     } catch (JsonProcessingException e) { [EOL]         verifyException(e, "Conflicting getter definitions"); [EOL]     } [EOL] }
public void testFailWithDupProps() throws Exception { [EOL]     BeanWithConflict bean = new BeanWithConflict(); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     try { [EOL]         String json = mapper.writeValueAsString(bean); [EOL]         fail("Should have failed due to conflicting accessor definitions; got JSON = " + json); [EOL]     } catch (JsonProcessingException e) { [EOL]         verifyException(e, "Conflicting getter definitions"); [EOL]     } [EOL] }
public void testFailWithDupProps() throws Exception { [EOL]     BeanWithConflict bean = new BeanWithConflict(); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     try { [EOL]         String json = mapper.writeValueAsString(bean); [EOL]         fail("Should have failed due to conflicting accessor definitions; got JSON = " + json); [EOL]     } catch (JsonProcessingException e) { [EOL]         verifyException(e, "Conflicting getter definitions"); [EOL]     } [EOL] }
public void testFailWithDupProps() throws Exception { [EOL]     BeanWithConflict bean = new BeanWithConflict(); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     try { [EOL]         String json = mapper.writeValueAsString(bean); [EOL]         fail("Should have failed due to conflicting accessor definitions; got JSON = " + json); [EOL]     } catch (JsonProcessingException e) { [EOL]         verifyException(e, "Conflicting getter definitions"); [EOL]     } [EOL] }
public void testFailWithDupProps() throws Exception { [EOL]     BeanWithConflict bean = new BeanWithConflict(); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     try { [EOL]         String json = mapper.writeValueAsString(bean); [EOL]         fail("Should have failed due to conflicting accessor definitions; got JSON = " + json); [EOL]     } catch (JsonProcessingException e) { [EOL]         verifyException(e, "Conflicting getter definitions"); [EOL]     } [EOL] }
public void testManualPolymorphicDog() throws Exception { [EOL]     Animal animal = MAPPER.readValue("{ \"type\":\"dog\", \"name\":\"Fido\", \"barkVolume\" : 95.0 }", Animal.class); [EOL]     assertEquals(Dog.class, animal.getClass()); [EOL]     assertEquals("Fido", animal.name); [EOL]     assertEquals(95.0, ((Dog) animal).barkVolume); [EOL] }
public void testManualPolymorphicDog() throws Exception { [EOL]     Animal animal = MAPPER.readValue("{ \"type\":\"dog\", \"name\":\"Fido\", \"barkVolume\" : 95.0 }", Animal.class); [EOL]     assertEquals(Dog.class, animal.getClass()); [EOL]     assertEquals("Fido", animal.name); [EOL]     assertEquals(95.0, ((Dog) animal).barkVolume); [EOL] }
public void testManualPolymorphicDog() throws Exception { [EOL]     Animal animal = MAPPER.readValue("{ \"type\":\"dog\", \"name\":\"Fido\", \"barkVolume\" : 95.0 }", Animal.class); [EOL]     assertEquals(Dog.class, animal.getClass()); [EOL]     assertEquals("Fido", animal.name); [EOL]     assertEquals(95.0, ((Dog) animal).barkVolume); [EOL] }
public void testSerializeDeserializeWithJaxbAnnotations() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.INDENT_OUTPUT); [EOL]     JacksonExample ex = new JacksonExample(); [EOL]     QName qname = new QName("urn:hi", "hello"); [EOL]     ex.setQname(qname); [EOL]     ex.setAttributeProperty("attributeValue"); [EOL]     ex.setElementProperty("elementValue"); [EOL]     ex.setWrappedElementProperty(Arrays.asList("wrappedElementValue")); [EOL]     ex.setEnumProperty(EnumExample.VALUE1); [EOL]     StringWriter writer = new StringWriter(); [EOL]     mapper.writeValue(writer, ex); [EOL]     writer.flush(); [EOL]     writer.close(); [EOL]     String json = writer.toString(); [EOL]     JacksonExample readEx = mapper.readValue(json, JacksonExample.class); [EOL]     assertEquals(ex.qname, readEx.qname); [EOL]     assertEquals(ex.attributeProperty, readEx.attributeProperty); [EOL]     assertEquals(ex.elementProperty, readEx.elementProperty); [EOL]     assertEquals(ex.wrappedElementProperty, readEx.wrappedElementProperty); [EOL]     assertEquals(ex.enumProperty, readEx.enumProperty); [EOL] }
public void testArray() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     JsonParser jp = m.readTree("[]").traverse(); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     jp.close(); [EOL]     jp = m.readTree("[[]]").traverse(); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     jp.close(); [EOL]     jp = m.readTree("[[ 12.1 ]]").traverse(); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_FLOAT, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     jp.close(); [EOL] }
public void testArray() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     JsonParser jp = m.readTree("[]").traverse(); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     jp.close(); [EOL]     jp = m.readTree("[[]]").traverse(); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     jp.close(); [EOL]     jp = m.readTree("[[ 12.1 ]]").traverse(); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_FLOAT, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     jp.close(); [EOL] }
public void testArray() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     JsonParser jp = m.readTree("[]").traverse(); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     jp.close(); [EOL]     jp = m.readTree("[[]]").traverse(); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     jp.close(); [EOL]     jp = m.readTree("[[ 12.1 ]]").traverse(); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_FLOAT, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     jp.close(); [EOL] }
public void testArray() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     JsonParser jp = m.readTree("[]").traverse(); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     jp.close(); [EOL]     jp = m.readTree("[[]]").traverse(); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     jp.close(); [EOL]     jp = m.readTree("[[ 12.1 ]]").traverse(); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_FLOAT, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     jp.close(); [EOL] }
public void testArray() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     JsonParser jp = m.readTree("[]").traverse(); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     jp.close(); [EOL]     jp = m.readTree("[[]]").traverse(); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     jp.close(); [EOL]     jp = m.readTree("[[ 12.1 ]]").traverse(); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_FLOAT, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     jp.close(); [EOL] }
public void testConstructorAndProps() throws Exception { [EOL]     ConstructorAndPropsBean bean = MAPPER.readValue("{ \"a\" : \"1\", \"b\": 2, \"c\" : true }", ConstructorAndPropsBean.class); [EOL]     assertEquals(1, bean.a); [EOL]     assertEquals(2, bean.b); [EOL]     assertEquals(true, bean.c); [EOL] }
public void testConstructorAndProps() throws Exception { [EOL]     ConstructorAndPropsBean bean = MAPPER.readValue("{ \"a\" : \"1\", \"b\": 2, \"c\" : true }", ConstructorAndPropsBean.class); [EOL]     assertEquals(1, bean.a); [EOL]     assertEquals(2, bean.b); [EOL]     assertEquals(true, bean.c); [EOL] }
public void testConstructorAndProps() throws Exception { [EOL]     ConstructorAndPropsBean bean = MAPPER.readValue("{ \"a\" : \"1\", \"b\": 2, \"c\" : true }", ConstructorAndPropsBean.class); [EOL]     assertEquals(1, bean.a); [EOL]     assertEquals(2, bean.b); [EOL]     assertEquals(true, bean.c); [EOL] }
public void testConstructorAndProps() throws Exception { [EOL]     ConstructorAndPropsBean bean = MAPPER.readValue("{ \"a\" : \"1\", \"b\": 2, \"c\" : true }", ConstructorAndPropsBean.class); [EOL]     assertEquals(1, bean.a); [EOL]     assertEquals(2, bean.b); [EOL]     assertEquals(true, bean.c); [EOL] }
public void testConstructorAndProps() throws Exception { [EOL]     ConstructorAndPropsBean bean = MAPPER.readValue("{ \"a\" : \"1\", \"b\": 2, \"c\" : true }", ConstructorAndPropsBean.class); [EOL]     assertEquals(1, bean.a); [EOL]     assertEquals(2, bean.b); [EOL]     assertEquals(true, bean.c); [EOL] }
public void testConstructorAndProps() throws Exception { [EOL]     ConstructorAndPropsBean bean = MAPPER.readValue("{ \"a\" : \"1\", \"b\": 2, \"c\" : true }", ConstructorAndPropsBean.class); [EOL]     assertEquals(1, bean.a); [EOL]     assertEquals(2, bean.b); [EOL]     assertEquals(true, bean.c); [EOL] }
public void testConstructorAndProps() throws Exception { [EOL]     ConstructorAndPropsBean bean = MAPPER.readValue("{ \"a\" : \"1\", \"b\": 2, \"c\" : true }", ConstructorAndPropsBean.class); [EOL]     assertEquals(1, bean.a); [EOL]     assertEquals(2, bean.b); [EOL]     assertEquals(true, bean.c); [EOL] }
public void testConstructorAndProps() throws Exception { [EOL]     ConstructorAndPropsBean bean = MAPPER.readValue("{ \"a\" : \"1\", \"b\": 2, \"c\" : true }", ConstructorAndPropsBean.class); [EOL]     assertEquals(1, bean.a); [EOL]     assertEquals(2, bean.b); [EOL]     assertEquals(true, bean.c); [EOL] }
public void testConstructorAndProps() throws Exception { [EOL]     ConstructorAndPropsBean bean = MAPPER.readValue("{ \"a\" : \"1\", \"b\": 2, \"c\" : true }", ConstructorAndPropsBean.class); [EOL]     assertEquals(1, bean.a); [EOL]     assertEquals(2, bean.b); [EOL]     assertEquals(true, bean.c); [EOL] }
public void testConstructorAndProps() throws Exception { [EOL]     ConstructorAndPropsBean bean = MAPPER.readValue("{ \"a\" : \"1\", \"b\": 2, \"c\" : true }", ConstructorAndPropsBean.class); [EOL]     assertEquals(1, bean.a); [EOL]     assertEquals(2, bean.b); [EOL]     assertEquals(true, bean.c); [EOL] }
public void testConstructorAndProps() throws Exception { [EOL]     ConstructorAndPropsBean bean = MAPPER.readValue("{ \"a\" : \"1\", \"b\": 2, \"c\" : true }", ConstructorAndPropsBean.class); [EOL]     assertEquals(1, bean.a); [EOL]     assertEquals(2, bean.b); [EOL]     assertEquals(true, bean.c); [EOL] }
public void testConstructorAndProps() throws Exception { [EOL]     ConstructorAndPropsBean bean = MAPPER.readValue("{ \"a\" : \"1\", \"b\": 2, \"c\" : true }", ConstructorAndPropsBean.class); [EOL]     assertEquals(1, bean.a); [EOL]     assertEquals(2, bean.b); [EOL]     assertEquals(true, bean.c); [EOL] }
public void testConstructorAndProps() throws Exception { [EOL]     ConstructorAndPropsBean bean = MAPPER.readValue("{ \"a\" : \"1\", \"b\": 2, \"c\" : true }", ConstructorAndPropsBean.class); [EOL]     assertEquals(1, bean.a); [EOL]     assertEquals(2, bean.b); [EOL]     assertEquals(true, bean.c); [EOL] }
public void testSimple() throws Exception { [EOL]     final String JSON = SAMPLE_DOC_JSON_SPEC; [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     for (int type = 0; type < 2; ++type) { [EOL]         JsonNode result; [EOL]         if (type == 0) { [EOL]             result = mapper.readTree(new StringReader(JSON)); [EOL]         } else { [EOL]             result = mapper.readTree(JSON); [EOL]         } [EOL]         assertType(result, ObjectNode.class); [EOL]         assertEquals(1, result.size()); [EOL]         assertTrue(result.isObject()); [EOL]         ObjectNode main = (ObjectNode) result; [EOL]         assertEquals("Image", main.fieldNames().next()); [EOL]         JsonNode ob = main.elements().next(); [EOL]         assertType(ob, ObjectNode.class); [EOL]         ObjectNode imageMap = (ObjectNode) ob; [EOL]         assertEquals(5, imageMap.size()); [EOL]         ob = imageMap.get("Width"); [EOL]         assertTrue(ob.isIntegralNumber()); [EOL]         assertFalse(ob.isFloatingPointNumber()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_WIDTH, ob.intValue()); [EOL]         ob = imageMap.get("Height"); [EOL]         assertTrue(ob.isIntegralNumber()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_HEIGHT, ob.intValue()); [EOL]         ob = imageMap.get("Title"); [EOL]         assertTrue(ob.isTextual()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_TITLE, ob.textValue()); [EOL]         ob = imageMap.get("Thumbnail"); [EOL]         assertType(ob, ObjectNode.class); [EOL]         ObjectNode tn = (ObjectNode) ob; [EOL]         ob = tn.get("Url"); [EOL]         assertTrue(ob.isTextual()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_TN_URL, ob.textValue()); [EOL]         ob = tn.get("Height"); [EOL]         assertTrue(ob.isIntegralNumber()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_TN_HEIGHT, ob.intValue()); [EOL]         ob = tn.get("Width"); [EOL]         assertTrue(ob.isTextual()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_TN_WIDTH, ob.textValue()); [EOL]         ob = imageMap.get("IDs"); [EOL]         assertTrue(ob.isArray()); [EOL]         ArrayNode idList = (ArrayNode) ob; [EOL]         assertEquals(4, idList.size()); [EOL]         assertEquals(4, calcLength(idList.elements())); [EOL]         assertEquals(4, calcLength(idList.iterator())); [EOL]         { [EOL]             int[] values = new int[] { SAMPLE_SPEC_VALUE_TN_ID1, SAMPLE_SPEC_VALUE_TN_ID2, SAMPLE_SPEC_VALUE_TN_ID3, SAMPLE_SPEC_VALUE_TN_ID4 }; [EOL]             for (int i = 0; i < values.length; ++i) { [EOL]                 assertEquals(values[i], idList.get(i).intValue()); [EOL]             } [EOL]             int i = 0; [EOL]             for (JsonNode n : idList) { [EOL]                 assertEquals(values[i], n.intValue()); [EOL]                 ++i; [EOL]             } [EOL]         } [EOL]     } [EOL] }
public void testSimple() throws Exception { [EOL]     final String JSON = SAMPLE_DOC_JSON_SPEC; [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     for (int type = 0; type < 2; ++type) { [EOL]         JsonNode result; [EOL]         if (type == 0) { [EOL]             result = mapper.readTree(new StringReader(JSON)); [EOL]         } else { [EOL]             result = mapper.readTree(JSON); [EOL]         } [EOL]         assertType(result, ObjectNode.class); [EOL]         assertEquals(1, result.size()); [EOL]         assertTrue(result.isObject()); [EOL]         ObjectNode main = (ObjectNode) result; [EOL]         assertEquals("Image", main.fieldNames().next()); [EOL]         JsonNode ob = main.elements().next(); [EOL]         assertType(ob, ObjectNode.class); [EOL]         ObjectNode imageMap = (ObjectNode) ob; [EOL]         assertEquals(5, imageMap.size()); [EOL]         ob = imageMap.get("Width"); [EOL]         assertTrue(ob.isIntegralNumber()); [EOL]         assertFalse(ob.isFloatingPointNumber()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_WIDTH, ob.intValue()); [EOL]         ob = imageMap.get("Height"); [EOL]         assertTrue(ob.isIntegralNumber()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_HEIGHT, ob.intValue()); [EOL]         ob = imageMap.get("Title"); [EOL]         assertTrue(ob.isTextual()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_TITLE, ob.textValue()); [EOL]         ob = imageMap.get("Thumbnail"); [EOL]         assertType(ob, ObjectNode.class); [EOL]         ObjectNode tn = (ObjectNode) ob; [EOL]         ob = tn.get("Url"); [EOL]         assertTrue(ob.isTextual()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_TN_URL, ob.textValue()); [EOL]         ob = tn.get("Height"); [EOL]         assertTrue(ob.isIntegralNumber()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_TN_HEIGHT, ob.intValue()); [EOL]         ob = tn.get("Width"); [EOL]         assertTrue(ob.isTextual()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_TN_WIDTH, ob.textValue()); [EOL]         ob = imageMap.get("IDs"); [EOL]         assertTrue(ob.isArray()); [EOL]         ArrayNode idList = (ArrayNode) ob; [EOL]         assertEquals(4, idList.size()); [EOL]         assertEquals(4, calcLength(idList.elements())); [EOL]         assertEquals(4, calcLength(idList.iterator())); [EOL]         { [EOL]             int[] values = new int[] { SAMPLE_SPEC_VALUE_TN_ID1, SAMPLE_SPEC_VALUE_TN_ID2, SAMPLE_SPEC_VALUE_TN_ID3, SAMPLE_SPEC_VALUE_TN_ID4 }; [EOL]             for (int i = 0; i < values.length; ++i) { [EOL]                 assertEquals(values[i], idList.get(i).intValue()); [EOL]             } [EOL]             int i = 0; [EOL]             for (JsonNode n : idList) { [EOL]                 assertEquals(values[i], n.intValue()); [EOL]                 ++i; [EOL]             } [EOL]         } [EOL]     } [EOL] }
public void testSimple() throws Exception { [EOL]     final String JSON = SAMPLE_DOC_JSON_SPEC; [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     for (int type = 0; type < 2; ++type) { [EOL]         JsonNode result; [EOL]         if (type == 0) { [EOL]             result = mapper.readTree(new StringReader(JSON)); [EOL]         } else { [EOL]             result = mapper.readTree(JSON); [EOL]         } [EOL]         assertType(result, ObjectNode.class); [EOL]         assertEquals(1, result.size()); [EOL]         assertTrue(result.isObject()); [EOL]         ObjectNode main = (ObjectNode) result; [EOL]         assertEquals("Image", main.fieldNames().next()); [EOL]         JsonNode ob = main.elements().next(); [EOL]         assertType(ob, ObjectNode.class); [EOL]         ObjectNode imageMap = (ObjectNode) ob; [EOL]         assertEquals(5, imageMap.size()); [EOL]         ob = imageMap.get("Width"); [EOL]         assertTrue(ob.isIntegralNumber()); [EOL]         assertFalse(ob.isFloatingPointNumber()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_WIDTH, ob.intValue()); [EOL]         ob = imageMap.get("Height"); [EOL]         assertTrue(ob.isIntegralNumber()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_HEIGHT, ob.intValue()); [EOL]         ob = imageMap.get("Title"); [EOL]         assertTrue(ob.isTextual()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_TITLE, ob.textValue()); [EOL]         ob = imageMap.get("Thumbnail"); [EOL]         assertType(ob, ObjectNode.class); [EOL]         ObjectNode tn = (ObjectNode) ob; [EOL]         ob = tn.get("Url"); [EOL]         assertTrue(ob.isTextual()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_TN_URL, ob.textValue()); [EOL]         ob = tn.get("Height"); [EOL]         assertTrue(ob.isIntegralNumber()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_TN_HEIGHT, ob.intValue()); [EOL]         ob = tn.get("Width"); [EOL]         assertTrue(ob.isTextual()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_TN_WIDTH, ob.textValue()); [EOL]         ob = imageMap.get("IDs"); [EOL]         assertTrue(ob.isArray()); [EOL]         ArrayNode idList = (ArrayNode) ob; [EOL]         assertEquals(4, idList.size()); [EOL]         assertEquals(4, calcLength(idList.elements())); [EOL]         assertEquals(4, calcLength(idList.iterator())); [EOL]         { [EOL]             int[] values = new int[] { SAMPLE_SPEC_VALUE_TN_ID1, SAMPLE_SPEC_VALUE_TN_ID2, SAMPLE_SPEC_VALUE_TN_ID3, SAMPLE_SPEC_VALUE_TN_ID4 }; [EOL]             for (int i = 0; i < values.length; ++i) { [EOL]                 assertEquals(values[i], idList.get(i).intValue()); [EOL]             } [EOL]             int i = 0; [EOL]             for (JsonNode n : idList) { [EOL]                 assertEquals(values[i], n.intValue()); [EOL]                 ++i; [EOL]             } [EOL]         } [EOL]     } [EOL] }
public void testSimple() throws Exception { [EOL]     final String JSON = SAMPLE_DOC_JSON_SPEC; [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     for (int type = 0; type < 2; ++type) { [EOL]         JsonNode result; [EOL]         if (type == 0) { [EOL]             result = mapper.readTree(new StringReader(JSON)); [EOL]         } else { [EOL]             result = mapper.readTree(JSON); [EOL]         } [EOL]         assertType(result, ObjectNode.class); [EOL]         assertEquals(1, result.size()); [EOL]         assertTrue(result.isObject()); [EOL]         ObjectNode main = (ObjectNode) result; [EOL]         assertEquals("Image", main.fieldNames().next()); [EOL]         JsonNode ob = main.elements().next(); [EOL]         assertType(ob, ObjectNode.class); [EOL]         ObjectNode imageMap = (ObjectNode) ob; [EOL]         assertEquals(5, imageMap.size()); [EOL]         ob = imageMap.get("Width"); [EOL]         assertTrue(ob.isIntegralNumber()); [EOL]         assertFalse(ob.isFloatingPointNumber()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_WIDTH, ob.intValue()); [EOL]         ob = imageMap.get("Height"); [EOL]         assertTrue(ob.isIntegralNumber()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_HEIGHT, ob.intValue()); [EOL]         ob = imageMap.get("Title"); [EOL]         assertTrue(ob.isTextual()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_TITLE, ob.textValue()); [EOL]         ob = imageMap.get("Thumbnail"); [EOL]         assertType(ob, ObjectNode.class); [EOL]         ObjectNode tn = (ObjectNode) ob; [EOL]         ob = tn.get("Url"); [EOL]         assertTrue(ob.isTextual()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_TN_URL, ob.textValue()); [EOL]         ob = tn.get("Height"); [EOL]         assertTrue(ob.isIntegralNumber()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_TN_HEIGHT, ob.intValue()); [EOL]         ob = tn.get("Width"); [EOL]         assertTrue(ob.isTextual()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_TN_WIDTH, ob.textValue()); [EOL]         ob = imageMap.get("IDs"); [EOL]         assertTrue(ob.isArray()); [EOL]         ArrayNode idList = (ArrayNode) ob; [EOL]         assertEquals(4, idList.size()); [EOL]         assertEquals(4, calcLength(idList.elements())); [EOL]         assertEquals(4, calcLength(idList.iterator())); [EOL]         { [EOL]             int[] values = new int[] { SAMPLE_SPEC_VALUE_TN_ID1, SAMPLE_SPEC_VALUE_TN_ID2, SAMPLE_SPEC_VALUE_TN_ID3, SAMPLE_SPEC_VALUE_TN_ID4 }; [EOL]             for (int i = 0; i < values.length; ++i) { [EOL]                 assertEquals(values[i], idList.get(i).intValue()); [EOL]             } [EOL]             int i = 0; [EOL]             for (JsonNode n : idList) { [EOL]                 assertEquals(values[i], n.intValue()); [EOL]                 ++i; [EOL]             } [EOL]         } [EOL]     } [EOL] }
public void testSimple() throws Exception { [EOL]     final String JSON = SAMPLE_DOC_JSON_SPEC; [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     for (int type = 0; type < 2; ++type) { [EOL]         JsonNode result; [EOL]         if (type == 0) { [EOL]             result = mapper.readTree(new StringReader(JSON)); [EOL]         } else { [EOL]             result = mapper.readTree(JSON); [EOL]         } [EOL]         assertType(result, ObjectNode.class); [EOL]         assertEquals(1, result.size()); [EOL]         assertTrue(result.isObject()); [EOL]         ObjectNode main = (ObjectNode) result; [EOL]         assertEquals("Image", main.fieldNames().next()); [EOL]         JsonNode ob = main.elements().next(); [EOL]         assertType(ob, ObjectNode.class); [EOL]         ObjectNode imageMap = (ObjectNode) ob; [EOL]         assertEquals(5, imageMap.size()); [EOL]         ob = imageMap.get("Width"); [EOL]         assertTrue(ob.isIntegralNumber()); [EOL]         assertFalse(ob.isFloatingPointNumber()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_WIDTH, ob.intValue()); [EOL]         ob = imageMap.get("Height"); [EOL]         assertTrue(ob.isIntegralNumber()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_HEIGHT, ob.intValue()); [EOL]         ob = imageMap.get("Title"); [EOL]         assertTrue(ob.isTextual()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_TITLE, ob.textValue()); [EOL]         ob = imageMap.get("Thumbnail"); [EOL]         assertType(ob, ObjectNode.class); [EOL]         ObjectNode tn = (ObjectNode) ob; [EOL]         ob = tn.get("Url"); [EOL]         assertTrue(ob.isTextual()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_TN_URL, ob.textValue()); [EOL]         ob = tn.get("Height"); [EOL]         assertTrue(ob.isIntegralNumber()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_TN_HEIGHT, ob.intValue()); [EOL]         ob = tn.get("Width"); [EOL]         assertTrue(ob.isTextual()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_TN_WIDTH, ob.textValue()); [EOL]         ob = imageMap.get("IDs"); [EOL]         assertTrue(ob.isArray()); [EOL]         ArrayNode idList = (ArrayNode) ob; [EOL]         assertEquals(4, idList.size()); [EOL]         assertEquals(4, calcLength(idList.elements())); [EOL]         assertEquals(4, calcLength(idList.iterator())); [EOL]         { [EOL]             int[] values = new int[] { SAMPLE_SPEC_VALUE_TN_ID1, SAMPLE_SPEC_VALUE_TN_ID2, SAMPLE_SPEC_VALUE_TN_ID3, SAMPLE_SPEC_VALUE_TN_ID4 }; [EOL]             for (int i = 0; i < values.length; ++i) { [EOL]                 assertEquals(values[i], idList.get(i).intValue()); [EOL]             } [EOL]             int i = 0; [EOL]             for (JsonNode n : idList) { [EOL]                 assertEquals(values[i], n.intValue()); [EOL]                 ++i; [EOL]             } [EOL]         } [EOL]     } [EOL] }
public void testSimple() throws Exception { [EOL]     final String JSON = SAMPLE_DOC_JSON_SPEC; [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     for (int type = 0; type < 2; ++type) { [EOL]         JsonNode result; [EOL]         if (type == 0) { [EOL]             result = mapper.readTree(new StringReader(JSON)); [EOL]         } else { [EOL]             result = mapper.readTree(JSON); [EOL]         } [EOL]         assertType(result, ObjectNode.class); [EOL]         assertEquals(1, result.size()); [EOL]         assertTrue(result.isObject()); [EOL]         ObjectNode main = (ObjectNode) result; [EOL]         assertEquals("Image", main.fieldNames().next()); [EOL]         JsonNode ob = main.elements().next(); [EOL]         assertType(ob, ObjectNode.class); [EOL]         ObjectNode imageMap = (ObjectNode) ob; [EOL]         assertEquals(5, imageMap.size()); [EOL]         ob = imageMap.get("Width"); [EOL]         assertTrue(ob.isIntegralNumber()); [EOL]         assertFalse(ob.isFloatingPointNumber()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_WIDTH, ob.intValue()); [EOL]         ob = imageMap.get("Height"); [EOL]         assertTrue(ob.isIntegralNumber()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_HEIGHT, ob.intValue()); [EOL]         ob = imageMap.get("Title"); [EOL]         assertTrue(ob.isTextual()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_TITLE, ob.textValue()); [EOL]         ob = imageMap.get("Thumbnail"); [EOL]         assertType(ob, ObjectNode.class); [EOL]         ObjectNode tn = (ObjectNode) ob; [EOL]         ob = tn.get("Url"); [EOL]         assertTrue(ob.isTextual()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_TN_URL, ob.textValue()); [EOL]         ob = tn.get("Height"); [EOL]         assertTrue(ob.isIntegralNumber()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_TN_HEIGHT, ob.intValue()); [EOL]         ob = tn.get("Width"); [EOL]         assertTrue(ob.isTextual()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_TN_WIDTH, ob.textValue()); [EOL]         ob = imageMap.get("IDs"); [EOL]         assertTrue(ob.isArray()); [EOL]         ArrayNode idList = (ArrayNode) ob; [EOL]         assertEquals(4, idList.size()); [EOL]         assertEquals(4, calcLength(idList.elements())); [EOL]         assertEquals(4, calcLength(idList.iterator())); [EOL]         { [EOL]             int[] values = new int[] { SAMPLE_SPEC_VALUE_TN_ID1, SAMPLE_SPEC_VALUE_TN_ID2, SAMPLE_SPEC_VALUE_TN_ID3, SAMPLE_SPEC_VALUE_TN_ID4 }; [EOL]             for (int i = 0; i < values.length; ++i) { [EOL]                 assertEquals(values[i], idList.get(i).intValue()); [EOL]             } [EOL]             int i = 0; [EOL]             for (JsonNode n : idList) { [EOL]                 assertEquals(values[i], n.intValue()); [EOL]                 ++i; [EOL]             } [EOL]         } [EOL]     } [EOL] }
public void testSimple() throws Exception { [EOL]     final String JSON = SAMPLE_DOC_JSON_SPEC; [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     for (int type = 0; type < 2; ++type) { [EOL]         JsonNode result; [EOL]         if (type == 0) { [EOL]             result = mapper.readTree(new StringReader(JSON)); [EOL]         } else { [EOL]             result = mapper.readTree(JSON); [EOL]         } [EOL]         assertType(result, ObjectNode.class); [EOL]         assertEquals(1, result.size()); [EOL]         assertTrue(result.isObject()); [EOL]         ObjectNode main = (ObjectNode) result; [EOL]         assertEquals("Image", main.fieldNames().next()); [EOL]         JsonNode ob = main.elements().next(); [EOL]         assertType(ob, ObjectNode.class); [EOL]         ObjectNode imageMap = (ObjectNode) ob; [EOL]         assertEquals(5, imageMap.size()); [EOL]         ob = imageMap.get("Width"); [EOL]         assertTrue(ob.isIntegralNumber()); [EOL]         assertFalse(ob.isFloatingPointNumber()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_WIDTH, ob.intValue()); [EOL]         ob = imageMap.get("Height"); [EOL]         assertTrue(ob.isIntegralNumber()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_HEIGHT, ob.intValue()); [EOL]         ob = imageMap.get("Title"); [EOL]         assertTrue(ob.isTextual()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_TITLE, ob.textValue()); [EOL]         ob = imageMap.get("Thumbnail"); [EOL]         assertType(ob, ObjectNode.class); [EOL]         ObjectNode tn = (ObjectNode) ob; [EOL]         ob = tn.get("Url"); [EOL]         assertTrue(ob.isTextual()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_TN_URL, ob.textValue()); [EOL]         ob = tn.get("Height"); [EOL]         assertTrue(ob.isIntegralNumber()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_TN_HEIGHT, ob.intValue()); [EOL]         ob = tn.get("Width"); [EOL]         assertTrue(ob.isTextual()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_TN_WIDTH, ob.textValue()); [EOL]         ob = imageMap.get("IDs"); [EOL]         assertTrue(ob.isArray()); [EOL]         ArrayNode idList = (ArrayNode) ob; [EOL]         assertEquals(4, idList.size()); [EOL]         assertEquals(4, calcLength(idList.elements())); [EOL]         assertEquals(4, calcLength(idList.iterator())); [EOL]         { [EOL]             int[] values = new int[] { SAMPLE_SPEC_VALUE_TN_ID1, SAMPLE_SPEC_VALUE_TN_ID2, SAMPLE_SPEC_VALUE_TN_ID3, SAMPLE_SPEC_VALUE_TN_ID4 }; [EOL]             for (int i = 0; i < values.length; ++i) { [EOL]                 assertEquals(values[i], idList.get(i).intValue()); [EOL]             } [EOL]             int i = 0; [EOL]             for (JsonNode n : idList) { [EOL]                 assertEquals(values[i], n.intValue()); [EOL]                 ++i; [EOL]             } [EOL]         } [EOL]     } [EOL] }
public void testSetAll() throws Exception { [EOL]     ObjectNode root = MAPPER.createObjectNode(); [EOL]     assertEquals(0, root.size()); [EOL]     HashMap<String, JsonNode> map = new HashMap<String, JsonNode>(); [EOL]     map.put("a", root.numberNode(1)); [EOL]     root.setAll(map); [EOL]     assertEquals(1, root.size()); [EOL]     assertTrue(root.has("a")); [EOL]     assertFalse(root.has("b")); [EOL]     map.put("b", root.numberNode(2)); [EOL]     root.setAll(map); [EOL]     assertEquals(2, root.size()); [EOL]     assertTrue(root.has("a")); [EOL]     assertTrue(root.has("b")); [EOL]     assertEquals(2, root.path("b").intValue()); [EOL]     ObjectNode root2 = MAPPER.createObjectNode(); [EOL]     root2.setAll(root); [EOL]     assertEquals(2, root.size()); [EOL]     assertEquals(2, root2.size()); [EOL]     root2.setAll(root); [EOL]     assertEquals(2, root.size()); [EOL]     assertEquals(2, root2.size()); [EOL]     ObjectNode root3 = MAPPER.createObjectNode(); [EOL]     root3.put("a", 2); [EOL]     root3.put("c", 3); [EOL]     assertEquals(2, root3.path("a").intValue()); [EOL]     root3.setAll(root2); [EOL]     assertEquals(3, root3.size()); [EOL]     assertEquals(1, root3.path("a").intValue()); [EOL] }
public void testSetAll() throws Exception { [EOL]     ObjectNode root = MAPPER.createObjectNode(); [EOL]     assertEquals(0, root.size()); [EOL]     HashMap<String, JsonNode> map = new HashMap<String, JsonNode>(); [EOL]     map.put("a", root.numberNode(1)); [EOL]     root.setAll(map); [EOL]     assertEquals(1, root.size()); [EOL]     assertTrue(root.has("a")); [EOL]     assertFalse(root.has("b")); [EOL]     map.put("b", root.numberNode(2)); [EOL]     root.setAll(map); [EOL]     assertEquals(2, root.size()); [EOL]     assertTrue(root.has("a")); [EOL]     assertTrue(root.has("b")); [EOL]     assertEquals(2, root.path("b").intValue()); [EOL]     ObjectNode root2 = MAPPER.createObjectNode(); [EOL]     root2.setAll(root); [EOL]     assertEquals(2, root.size()); [EOL]     assertEquals(2, root2.size()); [EOL]     root2.setAll(root); [EOL]     assertEquals(2, root.size()); [EOL]     assertEquals(2, root2.size()); [EOL]     ObjectNode root3 = MAPPER.createObjectNode(); [EOL]     root3.put("a", 2); [EOL]     root3.put("c", 3); [EOL]     assertEquals(2, root3.path("a").intValue()); [EOL]     root3.setAll(root2); [EOL]     assertEquals(3, root3.size()); [EOL]     assertEquals(1, root3.path("a").intValue()); [EOL] }
public void testSimple() throws Exception { [EOL]     final String JSON = SAMPLE_DOC_JSON_SPEC; [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     for (int type = 0; type < 2; ++type) { [EOL]         JsonNode result; [EOL]         if (type == 0) { [EOL]             result = mapper.readTree(new StringReader(JSON)); [EOL]         } else { [EOL]             result = mapper.readTree(JSON); [EOL]         } [EOL]         assertType(result, ObjectNode.class); [EOL]         assertEquals(1, result.size()); [EOL]         assertTrue(result.isObject()); [EOL]         ObjectNode main = (ObjectNode) result; [EOL]         assertEquals("Image", main.fieldNames().next()); [EOL]         JsonNode ob = main.elements().next(); [EOL]         assertType(ob, ObjectNode.class); [EOL]         ObjectNode imageMap = (ObjectNode) ob; [EOL]         assertEquals(5, imageMap.size()); [EOL]         ob = imageMap.get("Width"); [EOL]         assertTrue(ob.isIntegralNumber()); [EOL]         assertFalse(ob.isFloatingPointNumber()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_WIDTH, ob.intValue()); [EOL]         ob = imageMap.get("Height"); [EOL]         assertTrue(ob.isIntegralNumber()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_HEIGHT, ob.intValue()); [EOL]         ob = imageMap.get("Title"); [EOL]         assertTrue(ob.isTextual()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_TITLE, ob.textValue()); [EOL]         ob = imageMap.get("Thumbnail"); [EOL]         assertType(ob, ObjectNode.class); [EOL]         ObjectNode tn = (ObjectNode) ob; [EOL]         ob = tn.get("Url"); [EOL]         assertTrue(ob.isTextual()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_TN_URL, ob.textValue()); [EOL]         ob = tn.get("Height"); [EOL]         assertTrue(ob.isIntegralNumber()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_TN_HEIGHT, ob.intValue()); [EOL]         ob = tn.get("Width"); [EOL]         assertTrue(ob.isTextual()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_TN_WIDTH, ob.textValue()); [EOL]         ob = imageMap.get("IDs"); [EOL]         assertTrue(ob.isArray()); [EOL]         ArrayNode idList = (ArrayNode) ob; [EOL]         assertEquals(4, idList.size()); [EOL]         assertEquals(4, calcLength(idList.elements())); [EOL]         assertEquals(4, calcLength(idList.iterator())); [EOL]         { [EOL]             int[] values = new int[] { SAMPLE_SPEC_VALUE_TN_ID1, SAMPLE_SPEC_VALUE_TN_ID2, SAMPLE_SPEC_VALUE_TN_ID3, SAMPLE_SPEC_VALUE_TN_ID4 }; [EOL]             for (int i = 0; i < values.length; ++i) { [EOL]                 assertEquals(values[i], idList.get(i).intValue()); [EOL]             } [EOL]             int i = 0; [EOL]             for (JsonNode n : idList) { [EOL]                 assertEquals(values[i], n.intValue()); [EOL]                 ++i; [EOL]             } [EOL]         } [EOL]     } [EOL] }
public void testNonMatching() throws Exception { [EOL]     JsonNode root = _buildTree(); [EOL]     assertNull(root.findValue("boogaboo")); [EOL]     assertNull(root.findParent("boogaboo")); [EOL]     JsonNode n = root.findPath("boogaboo"); [EOL]     assertNotNull(n); [EOL]     assertTrue(n.isMissingNode()); [EOL]     assertTrue(root.findValues("boogaboo").isEmpty()); [EOL]     assertTrue(root.findParents("boogaboo").isEmpty()); [EOL] }
public void testNonMatching() throws Exception { [EOL]     JsonNode root = _buildTree(); [EOL]     assertNull(root.findValue("boogaboo")); [EOL]     assertNull(root.findParent("boogaboo")); [EOL]     JsonNode n = root.findPath("boogaboo"); [EOL]     assertNotNull(n); [EOL]     assertTrue(n.isMissingNode()); [EOL]     assertTrue(root.findValues("boogaboo").isEmpty()); [EOL]     assertTrue(root.findParents("boogaboo").isEmpty()); [EOL] }
public void testClass() throws IOException { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     assertSame(String.class, mapper.readValue(quote("java.lang.String"), Class.class)); [EOL]     assertSame(Boolean.TYPE, mapper.readValue(quote("boolean"), Class.class)); [EOL]     assertSame(Byte.TYPE, mapper.readValue(quote("byte"), Class.class)); [EOL]     assertSame(Short.TYPE, mapper.readValue(quote("short"), Class.class)); [EOL]     assertSame(Character.TYPE, mapper.readValue(quote("char"), Class.class)); [EOL]     assertSame(Integer.TYPE, mapper.readValue(quote("int"), Class.class)); [EOL]     assertSame(Long.TYPE, mapper.readValue(quote("long"), Class.class)); [EOL]     assertSame(Float.TYPE, mapper.readValue(quote("float"), Class.class)); [EOL]     assertSame(Double.TYPE, mapper.readValue(quote("double"), Class.class)); [EOL]     assertSame(Void.TYPE, mapper.readValue(quote("void"), Class.class)); [EOL] }
public void testClass() throws IOException { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     assertSame(String.class, mapper.readValue(quote("java.lang.String"), Class.class)); [EOL]     assertSame(Boolean.TYPE, mapper.readValue(quote("boolean"), Class.class)); [EOL]     assertSame(Byte.TYPE, mapper.readValue(quote("byte"), Class.class)); [EOL]     assertSame(Short.TYPE, mapper.readValue(quote("short"), Class.class)); [EOL]     assertSame(Character.TYPE, mapper.readValue(quote("char"), Class.class)); [EOL]     assertSame(Integer.TYPE, mapper.readValue(quote("int"), Class.class)); [EOL]     assertSame(Long.TYPE, mapper.readValue(quote("long"), Class.class)); [EOL]     assertSame(Float.TYPE, mapper.readValue(quote("float"), Class.class)); [EOL]     assertSame(Double.TYPE, mapper.readValue(quote("double"), Class.class)); [EOL]     assertSame(Void.TYPE, mapper.readValue(quote("void"), Class.class)); [EOL] }
public void testClass() throws IOException { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     assertSame(String.class, mapper.readValue(quote("java.lang.String"), Class.class)); [EOL]     assertSame(Boolean.TYPE, mapper.readValue(quote("boolean"), Class.class)); [EOL]     assertSame(Byte.TYPE, mapper.readValue(quote("byte"), Class.class)); [EOL]     assertSame(Short.TYPE, mapper.readValue(quote("short"), Class.class)); [EOL]     assertSame(Character.TYPE, mapper.readValue(quote("char"), Class.class)); [EOL]     assertSame(Integer.TYPE, mapper.readValue(quote("int"), Class.class)); [EOL]     assertSame(Long.TYPE, mapper.readValue(quote("long"), Class.class)); [EOL]     assertSame(Float.TYPE, mapper.readValue(quote("float"), Class.class)); [EOL]     assertSame(Double.TYPE, mapper.readValue(quote("double"), Class.class)); [EOL]     assertSame(Void.TYPE, mapper.readValue(quote("void"), Class.class)); [EOL] }
public void testClass() throws IOException { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     assertSame(String.class, mapper.readValue(quote("java.lang.String"), Class.class)); [EOL]     assertSame(Boolean.TYPE, mapper.readValue(quote("boolean"), Class.class)); [EOL]     assertSame(Byte.TYPE, mapper.readValue(quote("byte"), Class.class)); [EOL]     assertSame(Short.TYPE, mapper.readValue(quote("short"), Class.class)); [EOL]     assertSame(Character.TYPE, mapper.readValue(quote("char"), Class.class)); [EOL]     assertSame(Integer.TYPE, mapper.readValue(quote("int"), Class.class)); [EOL]     assertSame(Long.TYPE, mapper.readValue(quote("long"), Class.class)); [EOL]     assertSame(Float.TYPE, mapper.readValue(quote("float"), Class.class)); [EOL]     assertSame(Double.TYPE, mapper.readValue(quote("double"), Class.class)); [EOL]     assertSame(Void.TYPE, mapper.readValue(quote("void"), Class.class)); [EOL] }
public void testClass() throws IOException { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     assertSame(String.class, mapper.readValue(quote("java.lang.String"), Class.class)); [EOL]     assertSame(Boolean.TYPE, mapper.readValue(quote("boolean"), Class.class)); [EOL]     assertSame(Byte.TYPE, mapper.readValue(quote("byte"), Class.class)); [EOL]     assertSame(Short.TYPE, mapper.readValue(quote("short"), Class.class)); [EOL]     assertSame(Character.TYPE, mapper.readValue(quote("char"), Class.class)); [EOL]     assertSame(Integer.TYPE, mapper.readValue(quote("int"), Class.class)); [EOL]     assertSame(Long.TYPE, mapper.readValue(quote("long"), Class.class)); [EOL]     assertSame(Float.TYPE, mapper.readValue(quote("float"), Class.class)); [EOL]     assertSame(Double.TYPE, mapper.readValue(quote("double"), Class.class)); [EOL]     assertSame(Void.TYPE, mapper.readValue(quote("void"), Class.class)); [EOL] }
public void testClass() throws IOException { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     assertSame(String.class, mapper.readValue(quote("java.lang.String"), Class.class)); [EOL]     assertSame(Boolean.TYPE, mapper.readValue(quote("boolean"), Class.class)); [EOL]     assertSame(Byte.TYPE, mapper.readValue(quote("byte"), Class.class)); [EOL]     assertSame(Short.TYPE, mapper.readValue(quote("short"), Class.class)); [EOL]     assertSame(Character.TYPE, mapper.readValue(quote("char"), Class.class)); [EOL]     assertSame(Integer.TYPE, mapper.readValue(quote("int"), Class.class)); [EOL]     assertSame(Long.TYPE, mapper.readValue(quote("long"), Class.class)); [EOL]     assertSame(Float.TYPE, mapper.readValue(quote("float"), Class.class)); [EOL]     assertSame(Double.TYPE, mapper.readValue(quote("double"), Class.class)); [EOL]     assertSame(Void.TYPE, mapper.readValue(quote("void"), Class.class)); [EOL] }
public void testClass() throws IOException { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     assertSame(String.class, mapper.readValue(quote("java.lang.String"), Class.class)); [EOL]     assertSame(Boolean.TYPE, mapper.readValue(quote("boolean"), Class.class)); [EOL]     assertSame(Byte.TYPE, mapper.readValue(quote("byte"), Class.class)); [EOL]     assertSame(Short.TYPE, mapper.readValue(quote("short"), Class.class)); [EOL]     assertSame(Character.TYPE, mapper.readValue(quote("char"), Class.class)); [EOL]     assertSame(Integer.TYPE, mapper.readValue(quote("int"), Class.class)); [EOL]     assertSame(Long.TYPE, mapper.readValue(quote("long"), Class.class)); [EOL]     assertSame(Float.TYPE, mapper.readValue(quote("float"), Class.class)); [EOL]     assertSame(Double.TYPE, mapper.readValue(quote("double"), Class.class)); [EOL]     assertSame(Void.TYPE, mapper.readValue(quote("void"), Class.class)); [EOL] }
public void testClass() throws IOException { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     assertSame(String.class, mapper.readValue(quote("java.lang.String"), Class.class)); [EOL]     assertSame(Boolean.TYPE, mapper.readValue(quote("boolean"), Class.class)); [EOL]     assertSame(Byte.TYPE, mapper.readValue(quote("byte"), Class.class)); [EOL]     assertSame(Short.TYPE, mapper.readValue(quote("short"), Class.class)); [EOL]     assertSame(Character.TYPE, mapper.readValue(quote("char"), Class.class)); [EOL]     assertSame(Integer.TYPE, mapper.readValue(quote("int"), Class.class)); [EOL]     assertSame(Long.TYPE, mapper.readValue(quote("long"), Class.class)); [EOL]     assertSame(Float.TYPE, mapper.readValue(quote("float"), Class.class)); [EOL]     assertSame(Double.TYPE, mapper.readValue(quote("double"), Class.class)); [EOL]     assertSame(Void.TYPE, mapper.readValue(quote("void"), Class.class)); [EOL] }
public void testClass() throws IOException { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     assertSame(String.class, mapper.readValue(quote("java.lang.String"), Class.class)); [EOL]     assertSame(Boolean.TYPE, mapper.readValue(quote("boolean"), Class.class)); [EOL]     assertSame(Byte.TYPE, mapper.readValue(quote("byte"), Class.class)); [EOL]     assertSame(Short.TYPE, mapper.readValue(quote("short"), Class.class)); [EOL]     assertSame(Character.TYPE, mapper.readValue(quote("char"), Class.class)); [EOL]     assertSame(Integer.TYPE, mapper.readValue(quote("int"), Class.class)); [EOL]     assertSame(Long.TYPE, mapper.readValue(quote("long"), Class.class)); [EOL]     assertSame(Float.TYPE, mapper.readValue(quote("float"), Class.class)); [EOL]     assertSame(Double.TYPE, mapper.readValue(quote("double"), Class.class)); [EOL]     assertSame(Void.TYPE, mapper.readValue(quote("void"), Class.class)); [EOL] }
public void testClass() throws IOException { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     assertSame(String.class, mapper.readValue(quote("java.lang.String"), Class.class)); [EOL]     assertSame(Boolean.TYPE, mapper.readValue(quote("boolean"), Class.class)); [EOL]     assertSame(Byte.TYPE, mapper.readValue(quote("byte"), Class.class)); [EOL]     assertSame(Short.TYPE, mapper.readValue(quote("short"), Class.class)); [EOL]     assertSame(Character.TYPE, mapper.readValue(quote("char"), Class.class)); [EOL]     assertSame(Integer.TYPE, mapper.readValue(quote("int"), Class.class)); [EOL]     assertSame(Long.TYPE, mapper.readValue(quote("long"), Class.class)); [EOL]     assertSame(Float.TYPE, mapper.readValue(quote("float"), Class.class)); [EOL]     assertSame(Double.TYPE, mapper.readValue(quote("double"), Class.class)); [EOL]     assertSame(Void.TYPE, mapper.readValue(quote("void"), Class.class)); [EOL] }
public void testClass() throws IOException { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     assertSame(String.class, mapper.readValue(quote("java.lang.String"), Class.class)); [EOL]     assertSame(Boolean.TYPE, mapper.readValue(quote("boolean"), Class.class)); [EOL]     assertSame(Byte.TYPE, mapper.readValue(quote("byte"), Class.class)); [EOL]     assertSame(Short.TYPE, mapper.readValue(quote("short"), Class.class)); [EOL]     assertSame(Character.TYPE, mapper.readValue(quote("char"), Class.class)); [EOL]     assertSame(Integer.TYPE, mapper.readValue(quote("int"), Class.class)); [EOL]     assertSame(Long.TYPE, mapper.readValue(quote("long"), Class.class)); [EOL]     assertSame(Float.TYPE, mapper.readValue(quote("float"), Class.class)); [EOL]     assertSame(Double.TYPE, mapper.readValue(quote("double"), Class.class)); [EOL]     assertSame(Void.TYPE, mapper.readValue(quote("void"), Class.class)); [EOL] }
public void testFailedCreateInstance() { [EOL]     try { [EOL]         ClassUtil.createInstance(BaseClass.class, true); [EOL]     } catch (IllegalArgumentException e) { [EOL]         verifyException(e, "has no default"); [EOL]     } [EOL]     try { [EOL]         ClassUtil.createInstance(Inner.class, false); [EOL]     } catch (IllegalArgumentException e) { [EOL]         verifyException(e, "is not accessible"); [EOL]     } [EOL]     try { [EOL]         ClassUtil.createInstance(Inner.class, true); [EOL]     } catch (IllegalStateException e) { [EOL]         verifyException(e, "test"); [EOL]     } [EOL] }
public void testFailedCreateInstance() { [EOL]     try { [EOL]         ClassUtil.createInstance(BaseClass.class, true); [EOL]     } catch (IllegalArgumentException e) { [EOL]         verifyException(e, "has no default"); [EOL]     } [EOL]     try { [EOL]         ClassUtil.createInstance(Inner.class, false); [EOL]     } catch (IllegalArgumentException e) { [EOL]         verifyException(e, "is not accessible"); [EOL]     } [EOL]     try { [EOL]         ClassUtil.createInstance(Inner.class, true); [EOL]     } catch (IllegalStateException e) { [EOL]         verifyException(e, "test"); [EOL]     } [EOL] }
public void testFailedCreateInstance() { [EOL]     try { [EOL]         ClassUtil.createInstance(BaseClass.class, true); [EOL]     } catch (IllegalArgumentException e) { [EOL]         verifyException(e, "has no default"); [EOL]     } [EOL]     try { [EOL]         ClassUtil.createInstance(Inner.class, false); [EOL]     } catch (IllegalArgumentException e) { [EOL]         verifyException(e, "is not accessible"); [EOL]     } [EOL]     try { [EOL]         ClassUtil.createInstance(Inner.class, true); [EOL]     } catch (IllegalStateException e) { [EOL]         verifyException(e, "test"); [EOL]     } [EOL] }
public void testFailedCreateInstance() { [EOL]     try { [EOL]         ClassUtil.createInstance(BaseClass.class, true); [EOL]     } catch (IllegalArgumentException e) { [EOL]         verifyException(e, "has no default"); [EOL]     } [EOL]     try { [EOL]         ClassUtil.createInstance(Inner.class, false); [EOL]     } catch (IllegalArgumentException e) { [EOL]         verifyException(e, "is not accessible"); [EOL]     } [EOL]     try { [EOL]         ClassUtil.createInstance(Inner.class, true); [EOL]     } catch (IllegalStateException e) { [EOL]         verifyException(e, "test"); [EOL]     } [EOL] }
public void testFailedCreateInstance() { [EOL]     try { [EOL]         ClassUtil.createInstance(BaseClass.class, true); [EOL]     } catch (IllegalArgumentException e) { [EOL]         verifyException(e, "has no default"); [EOL]     } [EOL]     try { [EOL]         ClassUtil.createInstance(Inner.class, false); [EOL]     } catch (IllegalArgumentException e) { [EOL]         verifyException(e, "is not accessible"); [EOL]     } [EOL]     try { [EOL]         ClassUtil.createInstance(Inner.class, true); [EOL]     } catch (IllegalStateException e) { [EOL]         verifyException(e, "test"); [EOL]     } [EOL] }
public void testFailedCreateInstance() { [EOL]     try { [EOL]         ClassUtil.createInstance(BaseClass.class, true); [EOL]     } catch (IllegalArgumentException e) { [EOL]         verifyException(e, "has no default"); [EOL]     } [EOL]     try { [EOL]         ClassUtil.createInstance(Inner.class, false); [EOL]     } catch (IllegalArgumentException e) { [EOL]         verifyException(e, "is not accessible"); [EOL]     } [EOL]     try { [EOL]         ClassUtil.createInstance(Inner.class, true); [EOL]     } catch (IllegalStateException e) { [EOL]         verifyException(e, "test"); [EOL]     } [EOL] }
public void testFailedCreateInstance() { [EOL]     try { [EOL]         ClassUtil.createInstance(BaseClass.class, true); [EOL]     } catch (IllegalArgumentException e) { [EOL]         verifyException(e, "has no default"); [EOL]     } [EOL]     try { [EOL]         ClassUtil.createInstance(Inner.class, false); [EOL]     } catch (IllegalArgumentException e) { [EOL]         verifyException(e, "is not accessible"); [EOL]     } [EOL]     try { [EOL]         ClassUtil.createInstance(Inner.class, true); [EOL]     } catch (IllegalStateException e) { [EOL]         verifyException(e, "test"); [EOL]     } [EOL] }
public void testFailedCreateInstance() { [EOL]     try { [EOL]         ClassUtil.createInstance(BaseClass.class, true); [EOL]     } catch (IllegalArgumentException e) { [EOL]         verifyException(e, "has no default"); [EOL]     } [EOL]     try { [EOL]         ClassUtil.createInstance(Inner.class, false); [EOL]     } catch (IllegalArgumentException e) { [EOL]         verifyException(e, "is not accessible"); [EOL]     } [EOL]     try { [EOL]         ClassUtil.createInstance(Inner.class, true); [EOL]     } catch (IllegalStateException e) { [EOL]         verifyException(e, "test"); [EOL]     } [EOL] }
public void testFailedCreateInstance() { [EOL]     try { [EOL]         ClassUtil.createInstance(BaseClass.class, true); [EOL]     } catch (IllegalArgumentException e) { [EOL]         verifyException(e, "has no default"); [EOL]     } [EOL]     try { [EOL]         ClassUtil.createInstance(Inner.class, false); [EOL]     } catch (IllegalArgumentException e) { [EOL]         verifyException(e, "is not accessible"); [EOL]     } [EOL]     try { [EOL]         ClassUtil.createInstance(Inner.class, true); [EOL]     } catch (IllegalStateException e) { [EOL]         verifyException(e, "test"); [EOL]     } [EOL] }
public void testFailedCreateInstance() { [EOL]     try { [EOL]         ClassUtil.createInstance(BaseClass.class, true); [EOL]     } catch (IllegalArgumentException e) { [EOL]         verifyException(e, "has no default"); [EOL]     } [EOL]     try { [EOL]         ClassUtil.createInstance(Inner.class, false); [EOL]     } catch (IllegalArgumentException e) { [EOL]         verifyException(e, "is not accessible"); [EOL]     } [EOL]     try { [EOL]         ClassUtil.createInstance(Inner.class, true); [EOL]     } catch (IllegalStateException e) { [EOL]         verifyException(e, "test"); [EOL]     } [EOL] }
public void testFailedCreateInstance() { [EOL]     try { [EOL]         ClassUtil.createInstance(BaseClass.class, true); [EOL]     } catch (IllegalArgumentException e) { [EOL]         verifyException(e, "has no default"); [EOL]     } [EOL]     try { [EOL]         ClassUtil.createInstance(Inner.class, false); [EOL]     } catch (IllegalArgumentException e) { [EOL]         verifyException(e, "is not accessible"); [EOL]     } [EOL]     try { [EOL]         ClassUtil.createInstance(Inner.class, true); [EOL]     } catch (IllegalStateException e) { [EOL]         verifyException(e, "test"); [EOL]     } [EOL] }
public void testFailedCreateInstance() { [EOL]     try { [EOL]         ClassUtil.createInstance(BaseClass.class, true); [EOL]     } catch (IllegalArgumentException e) { [EOL]         verifyException(e, "has no default"); [EOL]     } [EOL]     try { [EOL]         ClassUtil.createInstance(Inner.class, false); [EOL]     } catch (IllegalArgumentException e) { [EOL]         verifyException(e, "is not accessible"); [EOL]     } [EOL]     try { [EOL]         ClassUtil.createInstance(Inner.class, true); [EOL]     } catch (IllegalStateException e) { [EOL]         verifyException(e, "test"); [EOL]     } [EOL] }
public void testFailedCreateInstance() { [EOL]     try { [EOL]         ClassUtil.createInstance(BaseClass.class, true); [EOL]     } catch (IllegalArgumentException e) { [EOL]         verifyException(e, "has no default"); [EOL]     } [EOL]     try { [EOL]         ClassUtil.createInstance(Inner.class, false); [EOL]     } catch (IllegalArgumentException e) { [EOL]         verifyException(e, "is not accessible"); [EOL]     } [EOL]     try { [EOL]         ClassUtil.createInstance(Inner.class, true); [EOL]     } catch (IllegalStateException e) { [EOL]         verifyException(e, "test"); [EOL]     } [EOL] }
public void testFailedCreateInstance() { [EOL]     try { [EOL]         ClassUtil.createInstance(BaseClass.class, true); [EOL]     } catch (IllegalArgumentException e) { [EOL]         verifyException(e, "has no default"); [EOL]     } [EOL]     try { [EOL]         ClassUtil.createInstance(Inner.class, false); [EOL]     } catch (IllegalArgumentException e) { [EOL]         verifyException(e, "is not accessible"); [EOL]     } [EOL]     try { [EOL]         ClassUtil.createInstance(Inner.class, true); [EOL]     } catch (IllegalStateException e) { [EOL]         verifyException(e, "test"); [EOL]     } [EOL] }
public void testFailedCreateInstance() { [EOL]     try { [EOL]         ClassUtil.createInstance(BaseClass.class, true); [EOL]     } catch (IllegalArgumentException e) { [EOL]         verifyException(e, "has no default"); [EOL]     } [EOL]     try { [EOL]         ClassUtil.createInstance(Inner.class, false); [EOL]     } catch (IllegalArgumentException e) { [EOL]         verifyException(e, "is not accessible"); [EOL]     } [EOL]     try { [EOL]         ClassUtil.createInstance(Inner.class, true); [EOL]     } catch (IllegalStateException e) { [EOL]         verifyException(e, "test"); [EOL]     } [EOL] }
public void testFailedCreateInstance() { [EOL]     try { [EOL]         ClassUtil.createInstance(BaseClass.class, true); [EOL]     } catch (IllegalArgumentException e) { [EOL]         verifyException(e, "has no default"); [EOL]     } [EOL]     try { [EOL]         ClassUtil.createInstance(Inner.class, false); [EOL]     } catch (IllegalArgumentException e) { [EOL]         verifyException(e, "is not accessible"); [EOL]     } [EOL]     try { [EOL]         ClassUtil.createInstance(Inner.class, true); [EOL]     } catch (IllegalStateException e) { [EOL]         verifyException(e, "test"); [EOL]     } [EOL] }
public void testFailedCreateInstance() { [EOL]     try { [EOL]         ClassUtil.createInstance(BaseClass.class, true); [EOL]     } catch (IllegalArgumentException e) { [EOL]         verifyException(e, "has no default"); [EOL]     } [EOL]     try { [EOL]         ClassUtil.createInstance(Inner.class, false); [EOL]     } catch (IllegalArgumentException e) { [EOL]         verifyException(e, "is not accessible"); [EOL]     } [EOL]     try { [EOL]         ClassUtil.createInstance(Inner.class, true); [EOL]     } catch (IllegalStateException e) { [EOL]         verifyException(e, "test"); [EOL]     } [EOL] }
public void testIssue456WrapperPart() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     assertEquals("123", mapper.writerWithType(Integer.TYPE).writeValueAsString(Integer.valueOf(123))); [EOL]     assertEquals("456", mapper.writerWithType(Long.TYPE).writeValueAsString(Long.valueOf(456L))); [EOL] }
public void testIssue456WrapperPart() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     assertEquals("123", mapper.writerWithType(Integer.TYPE).writeValueAsString(Integer.valueOf(123))); [EOL]     assertEquals("456", mapper.writerWithType(Long.TYPE).writeValueAsString(Long.valueOf(456L))); [EOL] }
public void testIssue456WrapperPart() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     assertEquals("123", mapper.writerWithType(Integer.TYPE).writeValueAsString(Integer.valueOf(123))); [EOL]     assertEquals("456", mapper.writerWithType(Long.TYPE).writeValueAsString(Long.valueOf(456L))); [EOL] }
public void testIssue456WrapperPart() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     assertEquals("123", mapper.writerWithType(Integer.TYPE).writeValueAsString(Integer.valueOf(123))); [EOL]     assertEquals("456", mapper.writerWithType(Long.TYPE).writeValueAsString(Long.valueOf(456L))); [EOL] }
public void testIssue456WrapperPart() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     assertEquals("123", mapper.writerWithType(Integer.TYPE).writeValueAsString(Integer.valueOf(123))); [EOL]     assertEquals("456", mapper.writerWithType(Long.TYPE).writeValueAsString(Long.valueOf(456L))); [EOL] }
public void testIssue456WrapperPart() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     assertEquals("123", mapper.writerWithType(Integer.TYPE).writeValueAsString(Integer.valueOf(123))); [EOL]     assertEquals("456", mapper.writerWithType(Long.TYPE).writeValueAsString(Long.valueOf(456L))); [EOL] }
public void testIssue456WrapperPart() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     assertEquals("123", mapper.writerWithType(Integer.TYPE).writeValueAsString(Integer.valueOf(123))); [EOL]     assertEquals("456", mapper.writerWithType(Long.TYPE).writeValueAsString(Long.valueOf(456L))); [EOL] }
public void testIssue456WrapperPart() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     assertEquals("123", mapper.writerWithType(Integer.TYPE).writeValueAsString(Integer.valueOf(123))); [EOL]     assertEquals("456", mapper.writerWithType(Long.TYPE).writeValueAsString(Long.valueOf(456L))); [EOL] }
public void testIssue456WrapperPart() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     assertEquals("123", mapper.writerWithType(Integer.TYPE).writeValueAsString(Integer.valueOf(123))); [EOL]     assertEquals("456", mapper.writerWithType(Long.TYPE).writeValueAsString(Long.valueOf(456L))); [EOL] }
public void testFailedCreateInstance() { [EOL]     try { [EOL]         ClassUtil.createInstance(BaseClass.class, true); [EOL]     } catch (IllegalArgumentException e) { [EOL]         verifyException(e, "has no default"); [EOL]     } [EOL]     try { [EOL]         ClassUtil.createInstance(Inner.class, false); [EOL]     } catch (IllegalArgumentException e) { [EOL]         verifyException(e, "is not accessible"); [EOL]     } [EOL]     try { [EOL]         ClassUtil.createInstance(Inner.class, true); [EOL]     } catch (IllegalStateException e) { [EOL]         verifyException(e, "test"); [EOL]     } [EOL] }
public void testFailedCreateInstance() { [EOL]     try { [EOL]         ClassUtil.createInstance(BaseClass.class, true); [EOL]     } catch (IllegalArgumentException e) { [EOL]         verifyException(e, "has no default"); [EOL]     } [EOL]     try { [EOL]         ClassUtil.createInstance(Inner.class, false); [EOL]     } catch (IllegalArgumentException e) { [EOL]         verifyException(e, "is not accessible"); [EOL]     } [EOL]     try { [EOL]         ClassUtil.createInstance(Inner.class, true); [EOL]     } catch (IllegalStateException e) { [EOL]         verifyException(e, "test"); [EOL]     } [EOL] }
public void testDeserializeSimple() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     JsonSchema schema = mapper.generateJsonSchema(Schemable.class); [EOL]     assertNotNull(schema); [EOL]     String schemaStr = mapper.writeValueAsString(schema); [EOL]     assertNotNull(schemaStr); [EOL]     JsonSchema result = mapper.readValue(schemaStr, JsonSchema.class); [EOL]     assertEquals("Trying to read from '" + schemaStr + "'", schema, result); [EOL] }
public void testDeserializeSimple() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     JsonSchema schema = mapper.generateJsonSchema(Schemable.class); [EOL]     assertNotNull(schema); [EOL]     String schemaStr = mapper.writeValueAsString(schema); [EOL]     assertNotNull(schemaStr); [EOL]     JsonSchema result = mapper.readValue(schemaStr, JsonSchema.class); [EOL]     assertEquals("Trying to read from '" + schemaStr + "'", schema, result); [EOL] }
public void testDeserializeSimple() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     JsonSchema schema = mapper.generateJsonSchema(Schemable.class); [EOL]     assertNotNull(schema); [EOL]     String schemaStr = mapper.writeValueAsString(schema); [EOL]     assertNotNull(schemaStr); [EOL]     JsonSchema result = mapper.readValue(schemaStr, JsonSchema.class); [EOL]     assertEquals("Trying to read from '" + schemaStr + "'", schema, result); [EOL] }
public void testDeserializeSimple() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     JsonSchema schema = mapper.generateJsonSchema(Schemable.class); [EOL]     assertNotNull(schema); [EOL]     String schemaStr = mapper.writeValueAsString(schema); [EOL]     assertNotNull(schemaStr); [EOL]     JsonSchema result = mapper.readValue(schemaStr, JsonSchema.class); [EOL]     assertEquals("Trying to read from '" + schemaStr + "'", schema, result); [EOL] }
public void testDeserializeSimple() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     JsonSchema schema = mapper.generateJsonSchema(Schemable.class); [EOL]     assertNotNull(schema); [EOL]     String schemaStr = mapper.writeValueAsString(schema); [EOL]     assertNotNull(schemaStr); [EOL]     JsonSchema result = mapper.readValue(schemaStr, JsonSchema.class); [EOL]     assertEquals("Trying to read from '" + schemaStr + "'", schema, result); [EOL] }
public void testDeserializeSimple() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     JsonSchema schema = mapper.generateJsonSchema(Schemable.class); [EOL]     assertNotNull(schema); [EOL]     String schemaStr = mapper.writeValueAsString(schema); [EOL]     assertNotNull(schemaStr); [EOL]     JsonSchema result = mapper.readValue(schemaStr, JsonSchema.class); [EOL]     assertEquals("Trying to read from '" + schemaStr + "'", schema, result); [EOL] }
public void testClassAnnotationForLists() throws Exception { [EOL]     ConvertingBeanContainer container = objectReader(ConvertingBeanContainer.class).readValue("{\"values\":[[1,2],[3,4]]}"); [EOL]     assertNotNull(container); [EOL]     assertNotNull(container.values); [EOL]     assertEquals(2, container.values.size()); [EOL]     assertEquals(4, container.values.get(1).y); [EOL] }
public void testClassAnnotationForLists() throws Exception { [EOL]     ConvertingBeanContainer container = objectReader(ConvertingBeanContainer.class).readValue("{\"values\":[[1,2],[3,4]]}"); [EOL]     assertNotNull(container); [EOL]     assertNotNull(container.values); [EOL]     assertEquals(2, container.values.size()); [EOL]     assertEquals(4, container.values.get(1).y); [EOL] }
public void testClassAnnotationForLists() throws Exception { [EOL]     ConvertingBeanContainer container = objectReader(ConvertingBeanContainer.class).readValue("{\"values\":[[1,2],[3,4]]}"); [EOL]     assertNotNull(container); [EOL]     assertNotNull(container.values); [EOL]     assertEquals(2, container.values.size()); [EOL]     assertEquals(4, container.values.get(1).y); [EOL] }
public void testClassAnnotationForLists() throws Exception { [EOL]     ConvertingBeanContainer container = objectReader(ConvertingBeanContainer.class).readValue("{\"values\":[[1,2],[3,4]]}"); [EOL]     assertNotNull(container); [EOL]     assertNotNull(container.values); [EOL]     assertEquals(2, container.values.size()); [EOL]     assertEquals(4, container.values.get(1).y); [EOL] }
public void testClassAnnotationForLists() throws Exception { [EOL]     ConvertingBeanContainer container = objectReader(ConvertingBeanContainer.class).readValue("{\"values\":[[1,2],[3,4]]}"); [EOL]     assertNotNull(container); [EOL]     assertNotNull(container.values); [EOL]     assertEquals(2, container.values.size()); [EOL]     assertEquals(4, container.values.get(1).y); [EOL] }
public void testClassAnnotationForLists() throws Exception { [EOL]     ConvertingBeanContainer container = objectReader(ConvertingBeanContainer.class).readValue("{\"values\":[[1,2],[3,4]]}"); [EOL]     assertNotNull(container); [EOL]     assertNotNull(container.values); [EOL]     assertEquals(2, container.values.size()); [EOL]     assertEquals(4, container.values.get(1).y); [EOL] }
public void testClassAnnotationForLists() throws Exception { [EOL]     ConvertingBeanContainer container = objectReader(ConvertingBeanContainer.class).readValue("{\"values\":[[1,2],[3,4]]}"); [EOL]     assertNotNull(container); [EOL]     assertNotNull(container.values); [EOL]     assertEquals(2, container.values.size()); [EOL]     assertEquals(4, container.values.get(1).y); [EOL] }
public void testClassAnnotationForLists() throws Exception { [EOL]     ConvertingBeanContainer container = objectReader(ConvertingBeanContainer.class).readValue("{\"values\":[[1,2],[3,4]]}"); [EOL]     assertNotNull(container); [EOL]     assertNotNull(container.values); [EOL]     assertEquals(2, container.values.size()); [EOL]     assertEquals(4, container.values.get(1).y); [EOL] }
public void testClassAnnotationForLists() throws Exception { [EOL]     ConvertingBeanContainer container = objectReader(ConvertingBeanContainer.class).readValue("{\"values\":[[1,2],[3,4]]}"); [EOL]     assertNotNull(container); [EOL]     assertNotNull(container.values); [EOL]     assertEquals(2, container.values.size()); [EOL]     assertEquals(4, container.values.get(1).y); [EOL] }
public void testClassAnnotationForLists() throws Exception { [EOL]     ConvertingBeanContainer container = objectReader(ConvertingBeanContainer.class).readValue("{\"values\":[[1,2],[3,4]]}"); [EOL]     assertNotNull(container); [EOL]     assertNotNull(container.values); [EOL]     assertEquals(2, container.values.size()); [EOL]     assertEquals(4, container.values.get(1).y); [EOL] }
public void testDeserializeSimple() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     JsonSchema schema = mapper.generateJsonSchema(Schemable.class); [EOL]     assertNotNull(schema); [EOL]     String schemaStr = mapper.writeValueAsString(schema); [EOL]     assertNotNull(schemaStr); [EOL]     JsonSchema result = mapper.readValue(schemaStr, JsonSchema.class); [EOL]     assertEquals("Trying to read from '" + schemaStr + "'", schema, result); [EOL] }
public void testDeserializeSimple() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     JsonSchema schema = mapper.generateJsonSchema(Schemable.class); [EOL]     assertNotNull(schema); [EOL]     String schemaStr = mapper.writeValueAsString(schema); [EOL]     assertNotNull(schemaStr); [EOL]     JsonSchema result = mapper.readValue(schemaStr, JsonSchema.class); [EOL]     assertEquals("Trying to read from '" + schemaStr + "'", schema, result); [EOL] }
public void testDeserializeSimple() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     JsonSchema schema = mapper.generateJsonSchema(Schemable.class); [EOL]     assertNotNull(schema); [EOL]     String schemaStr = mapper.writeValueAsString(schema); [EOL]     assertNotNull(schemaStr); [EOL]     JsonSchema result = mapper.readValue(schemaStr, JsonSchema.class); [EOL]     assertEquals("Trying to read from '" + schemaStr + "'", schema, result); [EOL] }
public void testBuilderReplacement() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerModule(new ModuleImpl(new BuilderModifier(new BogusBeanSerializer(17)))); [EOL]     Bean bean = new Bean(); [EOL]     assertEquals("17", mapper.writeValueAsString(bean)); [EOL] }
public void testBuilderReplacement() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerModule(new ModuleImpl(new BuilderModifier(new BogusBeanSerializer(17)))); [EOL]     Bean bean = new Bean(); [EOL]     assertEquals("17", mapper.writeValueAsString(bean)); [EOL] }
public void testBuilderReplacement() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerModule(new ModuleImpl(new BuilderModifier(new BogusBeanSerializer(17)))); [EOL]     Bean bean = new Bean(); [EOL]     assertEquals("17", mapper.writeValueAsString(bean)); [EOL] }
public void testBuilderReplacement() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerModule(new ModuleImpl(new BuilderModifier(new BogusBeanSerializer(17)))); [EOL]     Bean bean = new Bean(); [EOL]     assertEquals("17", mapper.writeValueAsString(bean)); [EOL] }
public void testBuilderReplacement() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerModule(new ModuleImpl(new BuilderModifier(new BogusBeanSerializer(17)))); [EOL]     Bean bean = new Bean(); [EOL]     assertEquals("17", mapper.writeValueAsString(bean)); [EOL] }
public void testBuilderReplacement() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerModule(new ModuleImpl(new BuilderModifier(new BogusBeanSerializer(17)))); [EOL]     Bean bean = new Bean(); [EOL]     assertEquals("17", mapper.writeValueAsString(bean)); [EOL] }
public void testMethodAnnotationInArray() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     SimpleModule module = new SimpleModule("test", Version.unknownVersion()); [EOL]     module.addSerializer(String.class, new AnnotatedContextualSerializer()); [EOL]     mapper.registerModule(module); [EOL]     ContextualArrayBean beans = new ContextualArrayBean("123"); [EOL]     assertEquals("{\"beans\":[\"array->123\"]}", mapper.writeValueAsString(beans)); [EOL] }
public void testMethodAnnotationInArray() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     SimpleModule module = new SimpleModule("test", Version.unknownVersion()); [EOL]     module.addSerializer(String.class, new AnnotatedContextualSerializer()); [EOL]     mapper.registerModule(module); [EOL]     ContextualArrayBean beans = new ContextualArrayBean("123"); [EOL]     assertEquals("{\"beans\":[\"array->123\"]}", mapper.writeValueAsString(beans)); [EOL] }
public void testMethodAnnotationInArray() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     SimpleModule module = new SimpleModule("test", Version.unknownVersion()); [EOL]     module.addSerializer(String.class, new AnnotatedContextualSerializer()); [EOL]     mapper.registerModule(module); [EOL]     ContextualArrayBean beans = new ContextualArrayBean("123"); [EOL]     assertEquals("{\"beans\":[\"array->123\"]}", mapper.writeValueAsString(beans)); [EOL] }
public void testMethodAnnotationInArray() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     SimpleModule module = new SimpleModule("test", Version.unknownVersion()); [EOL]     module.addSerializer(String.class, new AnnotatedContextualSerializer()); [EOL]     mapper.registerModule(module); [EOL]     ContextualArrayBean beans = new ContextualArrayBean("123"); [EOL]     assertEquals("{\"beans\":[\"array->123\"]}", mapper.writeValueAsString(beans)); [EOL] }
public void testMethodAnnotationInArray() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     SimpleModule module = new SimpleModule("test", Version.unknownVersion()); [EOL]     module.addSerializer(String.class, new AnnotatedContextualSerializer()); [EOL]     mapper.registerModule(module); [EOL]     ContextualArrayBean beans = new ContextualArrayBean("123"); [EOL]     assertEquals("{\"beans\":[\"array->123\"]}", mapper.writeValueAsString(beans)); [EOL] }
public void testMethodAnnotationInArray() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     SimpleModule module = new SimpleModule("test", Version.unknownVersion()); [EOL]     module.addSerializer(String.class, new AnnotatedContextualSerializer()); [EOL]     mapper.registerModule(module); [EOL]     ContextualArrayBean beans = new ContextualArrayBean("123"); [EOL]     assertEquals("{\"beans\":[\"array->123\"]}", mapper.writeValueAsString(beans)); [EOL] }
public void testMethodAnnotationInArray() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     SimpleModule module = new SimpleModule("test", Version.unknownVersion()); [EOL]     module.addSerializer(String.class, new AnnotatedContextualSerializer()); [EOL]     mapper.registerModule(module); [EOL]     ContextualArrayBean beans = new ContextualArrayBean("123"); [EOL]     assertEquals("{\"beans\":[\"array->123\"]}", mapper.writeValueAsString(beans)); [EOL] }
public void testMethodAnnotationInArray() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     SimpleModule module = new SimpleModule("test", Version.unknownVersion()); [EOL]     module.addSerializer(String.class, new AnnotatedContextualSerializer()); [EOL]     mapper.registerModule(module); [EOL]     ContextualArrayBean beans = new ContextualArrayBean("123"); [EOL]     assertEquals("{\"beans\":[\"array->123\"]}", mapper.writeValueAsString(beans)); [EOL] }
public void testMethodAnnotationInArray() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     SimpleModule module = new SimpleModule("test", Version.unknownVersion()); [EOL]     module.addSerializer(String.class, new AnnotatedContextualSerializer()); [EOL]     mapper.registerModule(module); [EOL]     ContextualArrayBean beans = new ContextualArrayBean("123"); [EOL]     assertEquals("{\"beans\":[\"array->123\"]}", mapper.writeValueAsString(beans)); [EOL] }
public void testMethodAnnotationInArray() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     SimpleModule module = new SimpleModule("test", Version.unknownVersion()); [EOL]     module.addSerializer(String.class, new AnnotatedContextualSerializer()); [EOL]     mapper.registerModule(module); [EOL]     ContextualArrayBean beans = new ContextualArrayBean("123"); [EOL]     assertEquals("{\"beans\":[\"array->123\"]}", mapper.writeValueAsString(beans)); [EOL] }
public void testMethodAnnotationInArray() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     SimpleModule module = new SimpleModule("test", Version.unknownVersion()); [EOL]     module.addSerializer(String.class, new AnnotatedContextualSerializer()); [EOL]     mapper.registerModule(module); [EOL]     ContextualArrayBean beans = new ContextualArrayBean("123"); [EOL]     assertEquals("{\"beans\":[\"array->123\"]}", mapper.writeValueAsString(beans)); [EOL] }
public void testMethodAnnotationInArray() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     SimpleModule module = new SimpleModule("test", Version.unknownVersion()); [EOL]     module.addSerializer(String.class, new AnnotatedContextualSerializer()); [EOL]     mapper.registerModule(module); [EOL]     ContextualArrayBean beans = new ContextualArrayBean("123"); [EOL]     assertEquals("{\"beans\":[\"array->123\"]}", mapper.writeValueAsString(beans)); [EOL] }
public void testMethodAnnotationInMap() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     SimpleModule module = new SimpleModule("test", Version.unknownVersion()); [EOL]     module.addSerializer(String.class, new AnnotatedContextualSerializer()); [EOL]     mapper.registerModule(module); [EOL]     ContextualMapBean map = new ContextualMapBean(); [EOL]     map.beans.put("first", "In Map"); [EOL]     assertEquals("{\"beans\":{\"first\":\"map->In Map\"}}", mapper.writeValueAsString(map)); [EOL] }
public void testDeserializeSimple() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     JsonSchema schema = mapper.generateJsonSchema(Schemable.class); [EOL]     assertNotNull(schema); [EOL]     String schemaStr = mapper.writeValueAsString(schema); [EOL]     assertNotNull(schemaStr); [EOL]     JsonSchema result = mapper.readValue(schemaStr, JsonSchema.class); [EOL]     assertEquals("Trying to read from '" + schemaStr + "'", schema, result); [EOL] }
public void testDeserializeSimple() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     JsonSchema schema = mapper.generateJsonSchema(Schemable.class); [EOL]     assertNotNull(schema); [EOL]     String schemaStr = mapper.writeValueAsString(schema); [EOL]     assertNotNull(schemaStr); [EOL]     JsonSchema result = mapper.readValue(schemaStr, JsonSchema.class); [EOL]     assertEquals("Trying to read from '" + schemaStr + "'", schema, result); [EOL] }
public void testDeserializeSimple() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     JsonSchema schema = mapper.generateJsonSchema(Schemable.class); [EOL]     assertNotNull(schema); [EOL]     String schemaStr = mapper.writeValueAsString(schema); [EOL]     assertNotNull(schemaStr); [EOL]     JsonSchema result = mapper.readValue(schemaStr, JsonSchema.class); [EOL]     assertEquals("Trying to read from '" + schemaStr + "'", schema, result); [EOL] }
public void testDeserializeSimple() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     JsonSchema schema = mapper.generateJsonSchema(Schemable.class); [EOL]     assertNotNull(schema); [EOL]     String schemaStr = mapper.writeValueAsString(schema); [EOL]     assertNotNull(schemaStr); [EOL]     JsonSchema result = mapper.readValue(schemaStr, JsonSchema.class); [EOL]     assertEquals("Trying to read from '" + schemaStr + "'", schema, result); [EOL] }
public void testDeserializeSimple() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     JsonSchema schema = mapper.generateJsonSchema(Schemable.class); [EOL]     assertNotNull(schema); [EOL]     String schemaStr = mapper.writeValueAsString(schema); [EOL]     assertNotNull(schemaStr); [EOL]     JsonSchema result = mapper.readValue(schemaStr, JsonSchema.class); [EOL]     assertEquals("Trying to read from '" + schemaStr + "'", schema, result); [EOL] }
public void testDeserializeSimple() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     JsonSchema schema = mapper.generateJsonSchema(Schemable.class); [EOL]     assertNotNull(schema); [EOL]     String schemaStr = mapper.writeValueAsString(schema); [EOL]     assertNotNull(schemaStr); [EOL]     JsonSchema result = mapper.readValue(schemaStr, JsonSchema.class); [EOL]     assertEquals("Trying to read from '" + schemaStr + "'", schema, result); [EOL] }
public void testDeserializeSimple() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     JsonSchema schema = mapper.generateJsonSchema(Schemable.class); [EOL]     assertNotNull(schema); [EOL]     String schemaStr = mapper.writeValueAsString(schema); [EOL]     assertNotNull(schemaStr); [EOL]     JsonSchema result = mapper.readValue(schemaStr, JsonSchema.class); [EOL]     assertEquals("Trying to read from '" + schemaStr + "'", schema, result); [EOL] }
public void testConfigs() throws IOException { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     byte[] base = jdkSerialize(mapper.getDeserializationConfig().getBaseSettings()); [EOL]     assertNotNull(jdkDeserialize(base)); [EOL]     DeserializationConfig origDC = mapper.getDeserializationConfig(); [EOL]     SerializationConfig origSC = mapper.getSerializationConfig(); [EOL]     byte[] dcBytes = jdkSerialize(origDC); [EOL]     byte[] scBytes = jdkSerialize(origSC); [EOL]     DeserializationConfig dc = jdkDeserialize(dcBytes); [EOL]     assertNotNull(dc); [EOL]     assertEquals(dc._deserFeatures, origDC._deserFeatures); [EOL]     SerializationConfig sc = jdkDeserialize(scBytes); [EOL]     assertNotNull(sc); [EOL]     assertEquals(sc._serFeatures, origSC._serFeatures); [EOL] }
public void testUnknownHandlingIgnoreWithFeature() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false); [EOL]     TestBean result = null; [EOL]     try { [EOL]         result = mapper.readValue(new StringReader(JSON_UNKNOWN_FIELD), TestBean.class); [EOL]     } catch (JsonMappingException jex) { [EOL]         fail("Did not expect a problem, got: " + jex.getMessage()); [EOL]     } [EOL]     assertNotNull(result); [EOL]     assertEquals(1, result._a); [EOL]     assertNull(result._unknown); [EOL]     assertEquals(-1, result._b); [EOL] }
public void testUnknownHandlingIgnoreWithFeature() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false); [EOL]     TestBean result = null; [EOL]     try { [EOL]         result = mapper.readValue(new StringReader(JSON_UNKNOWN_FIELD), TestBean.class); [EOL]     } catch (JsonMappingException jex) { [EOL]         fail("Did not expect a problem, got: " + jex.getMessage()); [EOL]     } [EOL]     assertNotNull(result); [EOL]     assertEquals(1, result._a); [EOL]     assertNull(result._unknown); [EOL]     assertEquals(-1, result._b); [EOL] }
public void testJavaType() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     TypeFactory tf = TypeFactory.defaultInstance(); [EOL]     String json = mapper.writeValueAsString(tf.constructType(String.class)); [EOL]     assertEquals(quote(java.lang.String.class.getName()), json); [EOL]     JavaType t = mapper.readValue(json, JavaType.class); [EOL]     assertNotNull(t); [EOL]     assertEquals(String.class, t.getRawClass()); [EOL] }
public void testJavaType() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     TypeFactory tf = TypeFactory.defaultInstance(); [EOL]     String json = mapper.writeValueAsString(tf.constructType(String.class)); [EOL]     assertEquals(quote(java.lang.String.class.getName()), json); [EOL]     JavaType t = mapper.readValue(json, JavaType.class); [EOL]     assertNotNull(t); [EOL]     assertEquals(String.class, t.getRawClass()); [EOL] }
public void testJavaType() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     TypeFactory tf = TypeFactory.defaultInstance(); [EOL]     String json = mapper.writeValueAsString(tf.constructType(String.class)); [EOL]     assertEquals(quote(java.lang.String.class.getName()), json); [EOL]     JavaType t = mapper.readValue(json, JavaType.class); [EOL]     assertNotNull(t); [EOL]     assertEquals(String.class, t.getRawClass()); [EOL] }
public void testJavaType() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     TypeFactory tf = TypeFactory.defaultInstance(); [EOL]     String json = mapper.writeValueAsString(tf.constructType(String.class)); [EOL]     assertEquals(quote(java.lang.String.class.getName()), json); [EOL]     JavaType t = mapper.readValue(json, JavaType.class); [EOL]     assertNotNull(t); [EOL]     assertEquals(String.class, t.getRawClass()); [EOL] }
public void testJavaType() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     TypeFactory tf = TypeFactory.defaultInstance(); [EOL]     String json = mapper.writeValueAsString(tf.constructType(String.class)); [EOL]     assertEquals(quote(java.lang.String.class.getName()), json); [EOL]     JavaType t = mapper.readValue(json, JavaType.class); [EOL]     assertNotNull(t); [EOL]     assertEquals(String.class, t.getRawClass()); [EOL] }
public void testJavaType() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     TypeFactory tf = TypeFactory.defaultInstance(); [EOL]     String json = mapper.writeValueAsString(tf.constructType(String.class)); [EOL]     assertEquals(quote(java.lang.String.class.getName()), json); [EOL]     JavaType t = mapper.readValue(json, JavaType.class); [EOL]     assertNotNull(t); [EOL]     assertEquals(String.class, t.getRawClass()); [EOL] }
public void testJavaType() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     TypeFactory tf = TypeFactory.defaultInstance(); [EOL]     String json = mapper.writeValueAsString(tf.constructType(String.class)); [EOL]     assertEquals(quote(java.lang.String.class.getName()), json); [EOL]     JavaType t = mapper.readValue(json, JavaType.class); [EOL]     assertNotNull(t); [EOL]     assertEquals(String.class, t.getRawClass()); [EOL] }
public void testJavaType() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     TypeFactory tf = TypeFactory.defaultInstance(); [EOL]     String json = mapper.writeValueAsString(tf.constructType(String.class)); [EOL]     assertEquals(quote(java.lang.String.class.getName()), json); [EOL]     JavaType t = mapper.readValue(json, JavaType.class); [EOL]     assertNotNull(t); [EOL]     assertEquals(String.class, t.getRawClass()); [EOL] }
public void testJavaType() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     TypeFactory tf = TypeFactory.defaultInstance(); [EOL]     String json = mapper.writeValueAsString(tf.constructType(String.class)); [EOL]     assertEquals(quote(java.lang.String.class.getName()), json); [EOL]     JavaType t = mapper.readValue(json, JavaType.class); [EOL]     assertNotNull(t); [EOL]     assertEquals(String.class, t.getRawClass()); [EOL] }
public void testJavaType() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     TypeFactory tf = TypeFactory.defaultInstance(); [EOL]     String json = mapper.writeValueAsString(tf.constructType(String.class)); [EOL]     assertEquals(quote(java.lang.String.class.getName()), json); [EOL]     JavaType t = mapper.readValue(json, JavaType.class); [EOL]     assertNotNull(t); [EOL]     assertEquals(String.class, t.getRawClass()); [EOL] }
public void testJavaType() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     TypeFactory tf = TypeFactory.defaultInstance(); [EOL]     String json = mapper.writeValueAsString(tf.constructType(String.class)); [EOL]     assertEquals(quote(java.lang.String.class.getName()), json); [EOL]     JavaType t = mapper.readValue(json, JavaType.class); [EOL]     assertNotNull(t); [EOL]     assertEquals(String.class, t.getRawClass()); [EOL] }
public void testJavaType() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     TypeFactory tf = TypeFactory.defaultInstance(); [EOL]     String json = mapper.writeValueAsString(tf.constructType(String.class)); [EOL]     assertEquals(quote(java.lang.String.class.getName()), json); [EOL]     JavaType t = mapper.readValue(json, JavaType.class); [EOL]     assertNotNull(t); [EOL]     assertEquals(String.class, t.getRawClass()); [EOL] }
public void testJavaType() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     TypeFactory tf = TypeFactory.defaultInstance(); [EOL]     String json = mapper.writeValueAsString(tf.constructType(String.class)); [EOL]     assertEquals(quote(java.lang.String.class.getName()), json); [EOL]     JavaType t = mapper.readValue(json, JavaType.class); [EOL]     assertNotNull(t); [EOL]     assertEquals(String.class, t.getRawClass()); [EOL] }
public void testJavaType() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     TypeFactory tf = TypeFactory.defaultInstance(); [EOL]     String json = mapper.writeValueAsString(tf.constructType(String.class)); [EOL]     assertEquals(quote(java.lang.String.class.getName()), json); [EOL]     JavaType t = mapper.readValue(json, JavaType.class); [EOL]     assertNotNull(t); [EOL]     assertEquals(String.class, t.getRawClass()); [EOL] }
public void testColumnMetadata() throws Exception { [EOL]     ColumnMetadata col = new ColumnMetadata("Billy", "employee", "comment"); [EOL]     Wrapper w = new Wrapper(); [EOL]     w.a = col; [EOL]     w.b = col; [EOL]     String json = MAPPER.writeValueAsString(w); [EOL]     Wrapper deserialized = MAPPER.readValue(json, Wrapper.class); [EOL]     assertNotNull(deserialized); [EOL]     assertNotNull(deserialized.a); [EOL]     assertNotNull(deserialized.b); [EOL]     assertEquals("Billy", deserialized.a.getName()); [EOL]     assertEquals("employee", deserialized.a.getType()); [EOL]     assertEquals("comment", deserialized.a.getComment()); [EOL]     assertSame(deserialized.a, deserialized.b); [EOL] }
public void testColumnMetadata() throws Exception { [EOL]     ColumnMetadata col = new ColumnMetadata("Billy", "employee", "comment"); [EOL]     Wrapper w = new Wrapper(); [EOL]     w.a = col; [EOL]     w.b = col; [EOL]     String json = MAPPER.writeValueAsString(w); [EOL]     Wrapper deserialized = MAPPER.readValue(json, Wrapper.class); [EOL]     assertNotNull(deserialized); [EOL]     assertNotNull(deserialized.a); [EOL]     assertNotNull(deserialized.b); [EOL]     assertEquals("Billy", deserialized.a.getName()); [EOL]     assertEquals("employee", deserialized.a.getType()); [EOL]     assertEquals("comment", deserialized.a.getComment()); [EOL]     assertSame(deserialized.a, deserialized.b); [EOL] }
public void testColumnMetadata() throws Exception { [EOL]     ColumnMetadata col = new ColumnMetadata("Billy", "employee", "comment"); [EOL]     Wrapper w = new Wrapper(); [EOL]     w.a = col; [EOL]     w.b = col; [EOL]     String json = MAPPER.writeValueAsString(w); [EOL]     Wrapper deserialized = MAPPER.readValue(json, Wrapper.class); [EOL]     assertNotNull(deserialized); [EOL]     assertNotNull(deserialized.a); [EOL]     assertNotNull(deserialized.b); [EOL]     assertEquals("Billy", deserialized.a.getName()); [EOL]     assertEquals("employee", deserialized.a.getType()); [EOL]     assertEquals("comment", deserialized.a.getComment()); [EOL]     assertSame(deserialized.a, deserialized.b); [EOL] }
public void testColumnMetadata() throws Exception { [EOL]     ColumnMetadata col = new ColumnMetadata("Billy", "employee", "comment"); [EOL]     Wrapper w = new Wrapper(); [EOL]     w.a = col; [EOL]     w.b = col; [EOL]     String json = MAPPER.writeValueAsString(w); [EOL]     Wrapper deserialized = MAPPER.readValue(json, Wrapper.class); [EOL]     assertNotNull(deserialized); [EOL]     assertNotNull(deserialized.a); [EOL]     assertNotNull(deserialized.b); [EOL]     assertEquals("Billy", deserialized.a.getName()); [EOL]     assertEquals("employee", deserialized.a.getType()); [EOL]     assertEquals("comment", deserialized.a.getComment()); [EOL]     assertSame(deserialized.a, deserialized.b); [EOL] }
public void testSimpleUnwrappingSerialize() throws Exception { [EOL]     assertEquals("{\"name\":\"Tatu\",\"x\":1,\"y\":2}", mapper.writeValueAsString(new Unwrapping("Tatu", 1, 2))); [EOL] }
public void testDateWithJsonFormat() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     String json; [EOL]     mapper.disable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS); [EOL]     json = mapper.writeValueAsString(new DateAsNumberBean(0L)); [EOL]     assertEquals("{\"date\":0}", json); [EOL]     mapper.enable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS); [EOL]     json = mapper.writer().with(getUTCTimeZone()).writeValueAsString(new DateAsStringBean(0L)); [EOL]     assertEquals("{\"date\":\"1970-01-01\"}", json); [EOL]     json = mapper.writeValueAsString(new DateInCETBean(0L)); [EOL]     assertEquals("{\"date\":\"1970-01-01,01:00\"}", json); [EOL] }
public void testDateWithJsonFormat() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     String json; [EOL]     mapper.disable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS); [EOL]     json = mapper.writeValueAsString(new DateAsNumberBean(0L)); [EOL]     assertEquals("{\"date\":0}", json); [EOL]     mapper.enable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS); [EOL]     json = mapper.writer().with(getUTCTimeZone()).writeValueAsString(new DateAsStringBean(0L)); [EOL]     assertEquals("{\"date\":\"1970-01-01\"}", json); [EOL]     json = mapper.writeValueAsString(new DateInCETBean(0L)); [EOL]     assertEquals("{\"date\":\"1970-01-01,01:00\"}", json); [EOL] }
public void testDateWithJsonFormat() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     String json; [EOL]     mapper.disable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS); [EOL]     json = mapper.writeValueAsString(new DateAsNumberBean(0L)); [EOL]     assertEquals("{\"date\":0}", json); [EOL]     mapper.enable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS); [EOL]     json = mapper.writer().with(getUTCTimeZone()).writeValueAsString(new DateAsStringBean(0L)); [EOL]     assertEquals("{\"date\":\"1970-01-01\"}", json); [EOL]     json = mapper.writeValueAsString(new DateInCETBean(0L)); [EOL]     assertEquals("{\"date\":\"1970-01-01,01:00\"}", json); [EOL] }
public void testDateWithJsonFormat() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     String json; [EOL]     mapper.disable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS); [EOL]     json = mapper.writeValueAsString(new DateAsNumberBean(0L)); [EOL]     assertEquals("{\"date\":0}", json); [EOL]     mapper.enable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS); [EOL]     json = mapper.writer().with(getUTCTimeZone()).writeValueAsString(new DateAsStringBean(0L)); [EOL]     assertEquals("{\"date\":\"1970-01-01\"}", json); [EOL]     json = mapper.writeValueAsString(new DateInCETBean(0L)); [EOL]     assertEquals("{\"date\":\"1970-01-01,01:00\"}", json); [EOL] }
public void testDateWithJsonFormat() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     String json; [EOL]     mapper.disable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS); [EOL]     json = mapper.writeValueAsString(new DateAsNumberBean(0L)); [EOL]     assertEquals("{\"date\":0}", json); [EOL]     mapper.enable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS); [EOL]     json = mapper.writer().with(getUTCTimeZone()).writeValueAsString(new DateAsStringBean(0L)); [EOL]     assertEquals("{\"date\":\"1970-01-01\"}", json); [EOL]     json = mapper.writeValueAsString(new DateInCETBean(0L)); [EOL]     assertEquals("{\"date\":\"1970-01-01,01:00\"}", json); [EOL] }
public void testDateWithJsonFormat() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     String json; [EOL]     mapper.disable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS); [EOL]     json = mapper.writeValueAsString(new DateAsNumberBean(0L)); [EOL]     assertEquals("{\"date\":0}", json); [EOL]     mapper.enable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS); [EOL]     json = mapper.writer().with(getUTCTimeZone()).writeValueAsString(new DateAsStringBean(0L)); [EOL]     assertEquals("{\"date\":\"1970-01-01\"}", json); [EOL]     json = mapper.writeValueAsString(new DateInCETBean(0L)); [EOL]     assertEquals("{\"date\":\"1970-01-01,01:00\"}", json); [EOL] }
public void testDateWithJsonFormat() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     String json; [EOL]     mapper.disable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS); [EOL]     json = mapper.writeValueAsString(new DateAsNumberBean(0L)); [EOL]     assertEquals("{\"date\":0}", json); [EOL]     mapper.enable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS); [EOL]     json = mapper.writer().with(getUTCTimeZone()).writeValueAsString(new DateAsStringBean(0L)); [EOL]     assertEquals("{\"date\":\"1970-01-01\"}", json); [EOL]     json = mapper.writeValueAsString(new DateInCETBean(0L)); [EOL]     assertEquals("{\"date\":\"1970-01-01,01:00\"}", json); [EOL] }
public void testDateWithJsonFormat() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     String json; [EOL]     mapper.disable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS); [EOL]     json = mapper.writeValueAsString(new DateAsNumberBean(0L)); [EOL]     assertEquals("{\"date\":0}", json); [EOL]     mapper.enable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS); [EOL]     json = mapper.writer().with(getUTCTimeZone()).writeValueAsString(new DateAsStringBean(0L)); [EOL]     assertEquals("{\"date\":\"1970-01-01\"}", json); [EOL]     json = mapper.writeValueAsString(new DateInCETBean(0L)); [EOL]     assertEquals("{\"date\":\"1970-01-01,01:00\"}", json); [EOL] }
public void testDateWithJsonFormat() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     String json; [EOL]     mapper.disable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS); [EOL]     json = mapper.writeValueAsString(new DateAsNumberBean(0L)); [EOL]     assertEquals("{\"date\":0}", json); [EOL]     mapper.enable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS); [EOL]     json = mapper.writer().with(getUTCTimeZone()).writeValueAsString(new DateAsStringBean(0L)); [EOL]     assertEquals("{\"date\":\"1970-01-01\"}", json); [EOL]     json = mapper.writeValueAsString(new DateInCETBean(0L)); [EOL]     assertEquals("{\"date\":\"1970-01-01,01:00\"}", json); [EOL] }
public void testDateWithJsonFormat() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     String json; [EOL]     mapper.disable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS); [EOL]     json = mapper.writeValueAsString(new DateAsNumberBean(0L)); [EOL]     assertEquals("{\"date\":0}", json); [EOL]     mapper.enable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS); [EOL]     json = mapper.writer().with(getUTCTimeZone()).writeValueAsString(new DateAsStringBean(0L)); [EOL]     assertEquals("{\"date\":\"1970-01-01\"}", json); [EOL]     json = mapper.writeValueAsString(new DateInCETBean(0L)); [EOL]     assertEquals("{\"date\":\"1970-01-01,01:00\"}", json); [EOL] }
public void testDateWithJsonFormat() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     String json; [EOL]     mapper.disable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS); [EOL]     json = mapper.writeValueAsString(new DateAsNumberBean(0L)); [EOL]     assertEquals("{\"date\":0}", json); [EOL]     mapper.enable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS); [EOL]     json = mapper.writer().with(getUTCTimeZone()).writeValueAsString(new DateAsStringBean(0L)); [EOL]     assertEquals("{\"date\":\"1970-01-01\"}", json); [EOL]     json = mapper.writeValueAsString(new DateInCETBean(0L)); [EOL]     assertEquals("{\"date\":\"1970-01-01,01:00\"}", json); [EOL] }
public void testDateWithJsonFormat() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     String json; [EOL]     mapper.disable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS); [EOL]     json = mapper.writeValueAsString(new DateAsNumberBean(0L)); [EOL]     assertEquals("{\"date\":0}", json); [EOL]     mapper.enable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS); [EOL]     json = mapper.writer().with(getUTCTimeZone()).writeValueAsString(new DateAsStringBean(0L)); [EOL]     assertEquals("{\"date\":\"1970-01-01\"}", json); [EOL]     json = mapper.writeValueAsString(new DateInCETBean(0L)); [EOL]     assertEquals("{\"date\":\"1970-01-01,01:00\"}", json); [EOL] }
public void testDateWithJsonFormat() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     String json; [EOL]     mapper.disable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS); [EOL]     json = mapper.writeValueAsString(new DateAsNumberBean(0L)); [EOL]     assertEquals("{\"date\":0}", json); [EOL]     mapper.enable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS); [EOL]     json = mapper.writer().with(getUTCTimeZone()).writeValueAsString(new DateAsStringBean(0L)); [EOL]     assertEquals("{\"date\":\"1970-01-01\"}", json); [EOL]     json = mapper.writeValueAsString(new DateInCETBean(0L)); [EOL]     assertEquals("{\"date\":\"1970-01-01,01:00\"}", json); [EOL] }
public void testDateWithJsonFormat() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     String json; [EOL]     mapper.disable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS); [EOL]     json = mapper.writeValueAsString(new DateAsNumberBean(0L)); [EOL]     assertEquals("{\"date\":0}", json); [EOL]     mapper.enable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS); [EOL]     json = mapper.writer().with(getUTCTimeZone()).writeValueAsString(new DateAsStringBean(0L)); [EOL]     assertEquals("{\"date\":\"1970-01-01\"}", json); [EOL]     json = mapper.writeValueAsString(new DateInCETBean(0L)); [EOL]     assertEquals("{\"date\":\"1970-01-01,01:00\"}", json); [EOL] }
public void testDateWithJsonFormat() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     String json; [EOL]     mapper.disable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS); [EOL]     json = mapper.writeValueAsString(new DateAsNumberBean(0L)); [EOL]     assertEquals("{\"date\":0}", json); [EOL]     mapper.enable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS); [EOL]     json = mapper.writer().with(getUTCTimeZone()).writeValueAsString(new DateAsStringBean(0L)); [EOL]     assertEquals("{\"date\":\"1970-01-01\"}", json); [EOL]     json = mapper.writeValueAsString(new DateInCETBean(0L)); [EOL]     assertEquals("{\"date\":\"1970-01-01,01:00\"}", json); [EOL] }
public void testDateWithJsonFormat() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     String json; [EOL]     mapper.disable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS); [EOL]     json = mapper.writeValueAsString(new DateAsNumberBean(0L)); [EOL]     assertEquals("{\"date\":0}", json); [EOL]     mapper.enable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS); [EOL]     json = mapper.writer().with(getUTCTimeZone()).writeValueAsString(new DateAsStringBean(0L)); [EOL]     assertEquals("{\"date\":\"1970-01-01\"}", json); [EOL]     json = mapper.writeValueAsString(new DateInCETBean(0L)); [EOL]     assertEquals("{\"date\":\"1970-01-01,01:00\"}", json); [EOL] }
public void testDateWithJsonFormat() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     String json; [EOL]     mapper.disable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS); [EOL]     json = mapper.writeValueAsString(new DateAsNumberBean(0L)); [EOL]     assertEquals("{\"date\":0}", json); [EOL]     mapper.enable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS); [EOL]     json = mapper.writer().with(getUTCTimeZone()).writeValueAsString(new DateAsStringBean(0L)); [EOL]     assertEquals("{\"date\":\"1970-01-01\"}", json); [EOL]     json = mapper.writeValueAsString(new DateInCETBean(0L)); [EOL]     assertEquals("{\"date\":\"1970-01-01,01:00\"}", json); [EOL] }
public void testDateWithJsonFormat() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     String json; [EOL]     mapper.disable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS); [EOL]     json = mapper.writeValueAsString(new DateAsNumberBean(0L)); [EOL]     assertEquals("{\"date\":0}", json); [EOL]     mapper.enable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS); [EOL]     json = mapper.writer().with(getUTCTimeZone()).writeValueAsString(new DateAsStringBean(0L)); [EOL]     assertEquals("{\"date\":\"1970-01-01\"}", json); [EOL]     json = mapper.writeValueAsString(new DateInCETBean(0L)); [EOL]     assertEquals("{\"date\":\"1970-01-01,01:00\"}", json); [EOL] }
public void testDateWithJsonFormat() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     String json; [EOL]     mapper.disable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS); [EOL]     json = mapper.writeValueAsString(new DateAsNumberBean(0L)); [EOL]     assertEquals("{\"date\":0}", json); [EOL]     mapper.enable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS); [EOL]     json = mapper.writer().with(getUTCTimeZone()).writeValueAsString(new DateAsStringBean(0L)); [EOL]     assertEquals("{\"date\":\"1970-01-01\"}", json); [EOL]     json = mapper.writeValueAsString(new DateInCETBean(0L)); [EOL]     assertEquals("{\"date\":\"1970-01-01,01:00\"}", json); [EOL] }
public void testDateMap() throws Exception { [EOL]     Date date1 = new Date(123456000L); [EOL]     DateFormat fmt = new SimpleDateFormat("EEE, dd MMM yyyy HH:mm:ss zzz", Locale.US); [EOL]     String JSON = "{ \"" + fmt.format(date1) + "\" : \"\", \"" + new Date(0).getTime() + "\" : null }"; [EOL]     HashMap<Date, String> result = MAPPER.readValue(JSON, new TypeReference<HashMap<Date, String>>() { [EOL]     }); [EOL]     assertNotNull(result); [EOL]     assertEquals(HashMap.class, result.getClass()); [EOL]     assertEquals(2, result.size()); [EOL]     assertTrue(result.containsKey(date1)); [EOL]     assertEquals("", result.get(new Date(123456000L))); [EOL]     assertTrue(result.containsKey(new Date(0))); [EOL]     assertNull(result.get(new Date(0))); [EOL] }
public void testDateMap() throws Exception { [EOL]     Date date1 = new Date(123456000L); [EOL]     DateFormat fmt = new SimpleDateFormat("EEE, dd MMM yyyy HH:mm:ss zzz", Locale.US); [EOL]     String JSON = "{ \"" + fmt.format(date1) + "\" : \"\", \"" + new Date(0).getTime() + "\" : null }"; [EOL]     HashMap<Date, String> result = MAPPER.readValue(JSON, new TypeReference<HashMap<Date, String>>() { [EOL]     }); [EOL]     assertNotNull(result); [EOL]     assertEquals(HashMap.class, result.getClass()); [EOL]     assertEquals(2, result.size()); [EOL]     assertTrue(result.containsKey(date1)); [EOL]     assertEquals("", result.get(new Date(123456000L))); [EOL]     assertTrue(result.containsKey(new Date(0))); [EOL]     assertNull(result.get(new Date(0))); [EOL] }
public void testDateMap() throws Exception { [EOL]     Date date1 = new Date(123456000L); [EOL]     DateFormat fmt = new SimpleDateFormat("EEE, dd MMM yyyy HH:mm:ss zzz", Locale.US); [EOL]     String JSON = "{ \"" + fmt.format(date1) + "\" : \"\", \"" + new Date(0).getTime() + "\" : null }"; [EOL]     HashMap<Date, String> result = MAPPER.readValue(JSON, new TypeReference<HashMap<Date, String>>() { [EOL]     }); [EOL]     assertNotNull(result); [EOL]     assertEquals(HashMap.class, result.getClass()); [EOL]     assertEquals(2, result.size()); [EOL]     assertTrue(result.containsKey(date1)); [EOL]     assertEquals("", result.get(new Date(123456000L))); [EOL]     assertTrue(result.containsKey(new Date(0))); [EOL]     assertNull(result.get(new Date(0))); [EOL] }
public void testDateMap() throws Exception { [EOL]     Date date1 = new Date(123456000L); [EOL]     DateFormat fmt = new SimpleDateFormat("EEE, dd MMM yyyy HH:mm:ss zzz", Locale.US); [EOL]     String JSON = "{ \"" + fmt.format(date1) + "\" : \"\", \"" + new Date(0).getTime() + "\" : null }"; [EOL]     HashMap<Date, String> result = MAPPER.readValue(JSON, new TypeReference<HashMap<Date, String>>() { [EOL]     }); [EOL]     assertNotNull(result); [EOL]     assertEquals(HashMap.class, result.getClass()); [EOL]     assertEquals(2, result.size()); [EOL]     assertTrue(result.containsKey(date1)); [EOL]     assertEquals("", result.get(new Date(123456000L))); [EOL]     assertTrue(result.containsKey(new Date(0))); [EOL]     assertNull(result.get(new Date(0))); [EOL] }
public void test8601DateTimeNoMilliSecs() throws Exception { [EOL]     for (String inputStr : new String[] { "2010-06-28T23:34:22Z", "2010-06-28T23:34:22+0000", "2010-06-28T23:34:22+00" }) { [EOL]         Date inputDate = MAPPER.readValue(quote(inputStr), java.util.Date.class); [EOL]         Calendar c = Calendar.getInstance(TimeZone.getTimeZone("GMT")); [EOL]         c.setTime(inputDate); [EOL]         assertEquals(2010, c.get(Calendar.YEAR)); [EOL]         assertEquals(Calendar.JUNE, c.get(Calendar.MONTH)); [EOL]         assertEquals(28, c.get(Calendar.DAY_OF_MONTH)); [EOL]         assertEquals(23, c.get(Calendar.HOUR_OF_DAY)); [EOL]         assertEquals(34, c.get(Calendar.MINUTE)); [EOL]         assertEquals(22, c.get(Calendar.SECOND)); [EOL]         assertEquals(0, c.get(Calendar.MILLISECOND)); [EOL]     } [EOL] }
public void testDateUtilISO8601NoTimezone() throws Exception { [EOL]     String inputStr = "1984-11-13T00:00:09"; [EOL]     Date inputDate = MAPPER.readValue(quote(inputStr), java.util.Date.class); [EOL]     Calendar c = Calendar.getInstance(TimeZone.getTimeZone("GMT")); [EOL]     c.setTime(inputDate); [EOL]     assertEquals(1984, c.get(Calendar.YEAR)); [EOL]     assertEquals(Calendar.NOVEMBER, c.get(Calendar.MONTH)); [EOL]     assertEquals(13, c.get(Calendar.DAY_OF_MONTH)); [EOL]     assertEquals(0, c.get(Calendar.HOUR_OF_DAY)); [EOL]     assertEquals(0, c.get(Calendar.MINUTE)); [EOL]     assertEquals(9, c.get(Calendar.SECOND)); [EOL]     assertEquals(0, c.get(Calendar.MILLISECOND)); [EOL] }
public void testDateUtilISO8601NoTimezone() throws Exception { [EOL]     String inputStr = "1984-11-13T00:00:09"; [EOL]     Date inputDate = MAPPER.readValue(quote(inputStr), java.util.Date.class); [EOL]     Calendar c = Calendar.getInstance(TimeZone.getTimeZone("GMT")); [EOL]     c.setTime(inputDate); [EOL]     assertEquals(1984, c.get(Calendar.YEAR)); [EOL]     assertEquals(Calendar.NOVEMBER, c.get(Calendar.MONTH)); [EOL]     assertEquals(13, c.get(Calendar.DAY_OF_MONTH)); [EOL]     assertEquals(0, c.get(Calendar.HOUR_OF_DAY)); [EOL]     assertEquals(0, c.get(Calendar.MINUTE)); [EOL]     assertEquals(9, c.get(Calendar.SECOND)); [EOL]     assertEquals(0, c.get(Calendar.MILLISECOND)); [EOL] }
public void testDateUtilISO8601NoTimezone() throws Exception { [EOL]     String inputStr = "1984-11-13T00:00:09"; [EOL]     Date inputDate = MAPPER.readValue(quote(inputStr), java.util.Date.class); [EOL]     Calendar c = Calendar.getInstance(TimeZone.getTimeZone("GMT")); [EOL]     c.setTime(inputDate); [EOL]     assertEquals(1984, c.get(Calendar.YEAR)); [EOL]     assertEquals(Calendar.NOVEMBER, c.get(Calendar.MONTH)); [EOL]     assertEquals(13, c.get(Calendar.DAY_OF_MONTH)); [EOL]     assertEquals(0, c.get(Calendar.HOUR_OF_DAY)); [EOL]     assertEquals(0, c.get(Calendar.MINUTE)); [EOL]     assertEquals(9, c.get(Calendar.SECOND)); [EOL]     assertEquals(0, c.get(Calendar.MILLISECOND)); [EOL] }
public void testDateUtilISO8601NoTimezone() throws Exception { [EOL]     String inputStr = "1984-11-13T00:00:09"; [EOL]     Date inputDate = MAPPER.readValue(quote(inputStr), java.util.Date.class); [EOL]     Calendar c = Calendar.getInstance(TimeZone.getTimeZone("GMT")); [EOL]     c.setTime(inputDate); [EOL]     assertEquals(1984, c.get(Calendar.YEAR)); [EOL]     assertEquals(Calendar.NOVEMBER, c.get(Calendar.MONTH)); [EOL]     assertEquals(13, c.get(Calendar.DAY_OF_MONTH)); [EOL]     assertEquals(0, c.get(Calendar.HOUR_OF_DAY)); [EOL]     assertEquals(0, c.get(Calendar.MINUTE)); [EOL]     assertEquals(9, c.get(Calendar.SECOND)); [EOL]     assertEquals(0, c.get(Calendar.MILLISECOND)); [EOL] }
public void testDateUtilISO8601NoTimezone() throws Exception { [EOL]     String inputStr = "1984-11-13T00:00:09"; [EOL]     Date inputDate = MAPPER.readValue(quote(inputStr), java.util.Date.class); [EOL]     Calendar c = Calendar.getInstance(TimeZone.getTimeZone("GMT")); [EOL]     c.setTime(inputDate); [EOL]     assertEquals(1984, c.get(Calendar.YEAR)); [EOL]     assertEquals(Calendar.NOVEMBER, c.get(Calendar.MONTH)); [EOL]     assertEquals(13, c.get(Calendar.DAY_OF_MONTH)); [EOL]     assertEquals(0, c.get(Calendar.HOUR_OF_DAY)); [EOL]     assertEquals(0, c.get(Calendar.MINUTE)); [EOL]     assertEquals(9, c.get(Calendar.SECOND)); [EOL]     assertEquals(0, c.get(Calendar.MILLISECOND)); [EOL] }
public void testDateUtilISO8601NoTimezone() throws Exception { [EOL]     String inputStr = "1984-11-13T00:00:09"; [EOL]     Date inputDate = MAPPER.readValue(quote(inputStr), java.util.Date.class); [EOL]     Calendar c = Calendar.getInstance(TimeZone.getTimeZone("GMT")); [EOL]     c.setTime(inputDate); [EOL]     assertEquals(1984, c.get(Calendar.YEAR)); [EOL]     assertEquals(Calendar.NOVEMBER, c.get(Calendar.MONTH)); [EOL]     assertEquals(13, c.get(Calendar.DAY_OF_MONTH)); [EOL]     assertEquals(0, c.get(Calendar.HOUR_OF_DAY)); [EOL]     assertEquals(0, c.get(Calendar.MINUTE)); [EOL]     assertEquals(9, c.get(Calendar.SECOND)); [EOL]     assertEquals(0, c.get(Calendar.MILLISECOND)); [EOL] }
public void testDateUtilISO8601NoTimezone() throws Exception { [EOL]     String inputStr = "1984-11-13T00:00:09"; [EOL]     Date inputDate = MAPPER.readValue(quote(inputStr), java.util.Date.class); [EOL]     Calendar c = Calendar.getInstance(TimeZone.getTimeZone("GMT")); [EOL]     c.setTime(inputDate); [EOL]     assertEquals(1984, c.get(Calendar.YEAR)); [EOL]     assertEquals(Calendar.NOVEMBER, c.get(Calendar.MONTH)); [EOL]     assertEquals(13, c.get(Calendar.DAY_OF_MONTH)); [EOL]     assertEquals(0, c.get(Calendar.HOUR_OF_DAY)); [EOL]     assertEquals(0, c.get(Calendar.MINUTE)); [EOL]     assertEquals(9, c.get(Calendar.SECOND)); [EOL]     assertEquals(0, c.get(Calendar.MILLISECOND)); [EOL] }
public void testSimpleExclusionFilter() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     FilterProvider prov = new SimpleFilterProvider().addFilter("RootFilter", SimpleBeanPropertyFilter.serializeAllExcept("a")); [EOL]     assertEquals("{\"b\":\"b\"}", mapper.writer(prov).writeValueAsString(new Bean())); [EOL] }
public void testSimpleExclusionFilter() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     FilterProvider prov = new SimpleFilterProvider().addFilter("RootFilter", SimpleBeanPropertyFilter.serializeAllExcept("a")); [EOL]     assertEquals("{\"b\":\"b\"}", mapper.writer(prov).writeValueAsString(new Bean())); [EOL] }
public void testSimpleExclusionFilter() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     FilterProvider prov = new SimpleFilterProvider().addFilter("RootFilter", SimpleBeanPropertyFilter.serializeAllExcept("a")); [EOL]     assertEquals("{\"b\":\"b\"}", mapper.writer(prov).writeValueAsString(new Bean())); [EOL] }
public void testSimpleExclusionFilter() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     FilterProvider prov = new SimpleFilterProvider().addFilter("RootFilter", SimpleBeanPropertyFilter.serializeAllExcept("a")); [EOL]     assertEquals("{\"b\":\"b\"}", mapper.writer(prov).writeValueAsString(new Bean())); [EOL] }
public void testSimpleExclusionFilter() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     FilterProvider prov = new SimpleFilterProvider().addFilter("RootFilter", SimpleBeanPropertyFilter.serializeAllExcept("a")); [EOL]     assertEquals("{\"b\":\"b\"}", mapper.writer(prov).writeValueAsString(new Bean())); [EOL] }
public void testGeneratingJsonSchemaWithFilters() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setFilters(secretFilterProvider); [EOL]     JsonSchema schema = mapper.generateJsonSchema(FilteredBean.class); [EOL]     JsonNode node = schema.getSchemaNode().get("properties"); [EOL]     assertTrue(node.has("obvious")); [EOL]     assertFalse(node.has("secret")); [EOL] }
public void testGeneratingJsonSchemaWithFilters() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setFilters(secretFilterProvider); [EOL]     JsonSchema schema = mapper.generateJsonSchema(FilteredBean.class); [EOL]     JsonNode node = schema.getSchemaNode().get("properties"); [EOL]     assertTrue(node.has("obvious")); [EOL]     assertFalse(node.has("secret")); [EOL] }
public void testGeneratingJsonSchemaWithFilters() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setFilters(secretFilterProvider); [EOL]     JsonSchema schema = mapper.generateJsonSchema(FilteredBean.class); [EOL]     JsonNode node = schema.getSchemaNode().get("properties"); [EOL]     assertTrue(node.has("obvious")); [EOL]     assertFalse(node.has("secret")); [EOL] }
public void testGeneratingJsonSchemaWithFilters() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setFilters(secretFilterProvider); [EOL]     JsonSchema schema = mapper.generateJsonSchema(FilteredBean.class); [EOL]     JsonNode node = schema.getSchemaNode().get("properties"); [EOL]     assertTrue(node.has("obvious")); [EOL]     assertFalse(node.has("secret")); [EOL] }
public void testSimpleExclusionFilter() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     FilterProvider prov = new SimpleFilterProvider().addFilter("RootFilter", SimpleBeanPropertyFilter.serializeAllExcept("a")); [EOL]     assertEquals("{\"b\":\"b\"}", mapper.writer(prov).writeValueAsString(new Bean())); [EOL] }
public void testSimpleExclusionFilter() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     FilterProvider prov = new SimpleFilterProvider().addFilter("RootFilter", SimpleBeanPropertyFilter.serializeAllExcept("a")); [EOL]     assertEquals("{\"b\":\"b\"}", mapper.writer(prov).writeValueAsString(new Bean())); [EOL] }
public void testSimpleExclusionFilter() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     FilterProvider prov = new SimpleFilterProvider().addFilter("RootFilter", SimpleBeanPropertyFilter.serializeAllExcept("a")); [EOL]     assertEquals("{\"b\":\"b\"}", mapper.writer(prov).writeValueAsString(new Bean())); [EOL] }
public void testSimpleExclusionFilter() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     FilterProvider prov = new SimpleFilterProvider().addFilter("RootFilter", SimpleBeanPropertyFilter.serializeAllExcept("a")); [EOL]     assertEquals("{\"b\":\"b\"}", mapper.writer(prov).writeValueAsString(new Bean())); [EOL] }
public void testSimpleExclusionFilter() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     FilterProvider prov = new SimpleFilterProvider().addFilter("RootFilter", SimpleBeanPropertyFilter.serializeAllExcept("a")); [EOL]     assertEquals("{\"b\":\"b\"}", mapper.writer(prov).writeValueAsString(new Bean())); [EOL] }
public void testSimpleWithClassAnnotations() throws Exception { [EOL]     ObjectMapper mapper = _mapperWithAnnotatedContextual(); [EOL]     ContextualClassBean bean = mapper.readValue("{\"a\":\"1\",\"b\":\"2\"}", ContextualClassBean.class); [EOL]     assertEquals("Class=1", bean.a.value); [EOL]     assertEquals("NameB=2", bean.b.value); [EOL]     bean = mapper.readValue("{\"a\":\"123\",\"b\":\"345\"}", ContextualClassBean.class); [EOL]     assertEquals("Class=123", bean.a.value); [EOL]     assertEquals("NameB=345", bean.b.value); [EOL] }
public void testSimpleWithClassAnnotations() throws Exception { [EOL]     ObjectMapper mapper = _mapperWithAnnotatedContextual(); [EOL]     ContextualClassBean bean = mapper.readValue("{\"a\":\"1\",\"b\":\"2\"}", ContextualClassBean.class); [EOL]     assertEquals("Class=1", bean.a.value); [EOL]     assertEquals("NameB=2", bean.b.value); [EOL]     bean = mapper.readValue("{\"a\":\"123\",\"b\":\"345\"}", ContextualClassBean.class); [EOL]     assertEquals("Class=123", bean.a.value); [EOL]     assertEquals("NameB=345", bean.b.value); [EOL] }
public void testConstructorAndProps() throws Exception { [EOL]     ConstructorAndPropsBean bean = MAPPER.readValue("{ \"a\" : \"1\", \"b\": 2, \"c\" : true }", ConstructorAndPropsBean.class); [EOL]     assertEquals(1, bean.a); [EOL]     assertEquals(2, bean.b); [EOL]     assertEquals(true, bean.c); [EOL] }
public void testConstructorAndProps() throws Exception { [EOL]     ConstructorAndPropsBean bean = MAPPER.readValue("{ \"a\" : \"1\", \"b\": 2, \"c\" : true }", ConstructorAndPropsBean.class); [EOL]     assertEquals(1, bean.a); [EOL]     assertEquals(2, bean.b); [EOL]     assertEquals(true, bean.c); [EOL] }
public void testConstructorAndProps() throws Exception { [EOL]     ConstructorAndPropsBean bean = MAPPER.readValue("{ \"a\" : \"1\", \"b\": 2, \"c\" : true }", ConstructorAndPropsBean.class); [EOL]     assertEquals(1, bean.a); [EOL]     assertEquals(2, bean.b); [EOL]     assertEquals(true, bean.c); [EOL] }
public void testConstructorAndProps() throws Exception { [EOL]     ConstructorAndPropsBean bean = MAPPER.readValue("{ \"a\" : \"1\", \"b\": 2, \"c\" : true }", ConstructorAndPropsBean.class); [EOL]     assertEquals(1, bean.a); [EOL]     assertEquals(2, bean.b); [EOL]     assertEquals(true, bean.c); [EOL] }
public void testConstructorAndProps() throws Exception { [EOL]     ConstructorAndPropsBean bean = MAPPER.readValue("{ \"a\" : \"1\", \"b\": 2, \"c\" : true }", ConstructorAndPropsBean.class); [EOL]     assertEquals(1, bean.a); [EOL]     assertEquals(2, bean.b); [EOL]     assertEquals(true, bean.c); [EOL] }
public void testConstructorAndProps() throws Exception { [EOL]     ConstructorAndPropsBean bean = MAPPER.readValue("{ \"a\" : \"1\", \"b\": 2, \"c\" : true }", ConstructorAndPropsBean.class); [EOL]     assertEquals(1, bean.a); [EOL]     assertEquals(2, bean.b); [EOL]     assertEquals(true, bean.c); [EOL] }
public void testConstructorAndProps() throws Exception { [EOL]     ConstructorAndPropsBean bean = MAPPER.readValue("{ \"a\" : \"1\", \"b\": 2, \"c\" : true }", ConstructorAndPropsBean.class); [EOL]     assertEquals(1, bean.a); [EOL]     assertEquals(2, bean.b); [EOL]     assertEquals(true, bean.c); [EOL] }
public void testConstructorAndProps() throws Exception { [EOL]     ConstructorAndPropsBean bean = MAPPER.readValue("{ \"a\" : \"1\", \"b\": 2, \"c\" : true }", ConstructorAndPropsBean.class); [EOL]     assertEquals(1, bean.a); [EOL]     assertEquals(2, bean.b); [EOL]     assertEquals(true, bean.c); [EOL] }
public void testConstructorAndProps() throws Exception { [EOL]     ConstructorAndPropsBean bean = MAPPER.readValue("{ \"a\" : \"1\", \"b\": 2, \"c\" : true }", ConstructorAndPropsBean.class); [EOL]     assertEquals(1, bean.a); [EOL]     assertEquals(2, bean.b); [EOL]     assertEquals(true, bean.c); [EOL] }
public void testConstructorAndProps() throws Exception { [EOL]     ConstructorAndPropsBean bean = MAPPER.readValue("{ \"a\" : \"1\", \"b\": 2, \"c\" : true }", ConstructorAndPropsBean.class); [EOL]     assertEquals(1, bean.a); [EOL]     assertEquals(2, bean.b); [EOL]     assertEquals(true, bean.c); [EOL] }
public void testConstructorAndProps() throws Exception { [EOL]     ConstructorAndPropsBean bean = MAPPER.readValue("{ \"a\" : \"1\", \"b\": 2, \"c\" : true }", ConstructorAndPropsBean.class); [EOL]     assertEquals(1, bean.a); [EOL]     assertEquals(2, bean.b); [EOL]     assertEquals(true, bean.c); [EOL] }
public void testColumnMetadata() throws Exception { [EOL]     ColumnMetadata col = new ColumnMetadata("Billy", "employee", "comment"); [EOL]     Wrapper w = new Wrapper(); [EOL]     w.a = col; [EOL]     w.b = col; [EOL]     String json = MAPPER.writeValueAsString(w); [EOL]     Wrapper deserialized = MAPPER.readValue(json, Wrapper.class); [EOL]     assertNotNull(deserialized); [EOL]     assertNotNull(deserialized.a); [EOL]     assertNotNull(deserialized.b); [EOL]     assertEquals("Billy", deserialized.a.getName()); [EOL]     assertEquals("employee", deserialized.a.getType()); [EOL]     assertEquals("comment", deserialized.a.getComment()); [EOL]     assertSame(deserialized.a, deserialized.b); [EOL] }
public void testColumnMetadata() throws Exception { [EOL]     ColumnMetadata col = new ColumnMetadata("Billy", "employee", "comment"); [EOL]     Wrapper w = new Wrapper(); [EOL]     w.a = col; [EOL]     w.b = col; [EOL]     String json = MAPPER.writeValueAsString(w); [EOL]     Wrapper deserialized = MAPPER.readValue(json, Wrapper.class); [EOL]     assertNotNull(deserialized); [EOL]     assertNotNull(deserialized.a); [EOL]     assertNotNull(deserialized.b); [EOL]     assertEquals("Billy", deserialized.a.getName()); [EOL]     assertEquals("employee", deserialized.a.getType()); [EOL]     assertEquals("comment", deserialized.a.getComment()); [EOL]     assertSame(deserialized.a, deserialized.b); [EOL] }
public void testInvalidMultipleTypeIds() throws Exception { [EOL]     try { [EOL]         mapper.writeValueAsString(new MultipleIds()); [EOL]         fail("Should have failed"); [EOL]     } catch (JsonMappingException e) { [EOL]         verifyException(e, "multiple type ids"); [EOL]     } [EOL] }
public void testInvalidMultipleTypeIds() throws Exception { [EOL]     try { [EOL]         mapper.writeValueAsString(new MultipleIds()); [EOL]         fail("Should have failed"); [EOL]     } catch (JsonMappingException e) { [EOL]         verifyException(e, "multiple type ids"); [EOL]     } [EOL] }
public void testInvalidMultipleTypeIds() throws Exception { [EOL]     try { [EOL]         mapper.writeValueAsString(new MultipleIds()); [EOL]         fail("Should have failed"); [EOL]     } catch (JsonMappingException e) { [EOL]         verifyException(e, "multiple type ids"); [EOL]     } [EOL] }
public void testSimpleExclusionFilter() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     FilterProvider prov = new SimpleFilterProvider().addFilter("RootFilter", SimpleBeanPropertyFilter.serializeAllExcept("a")); [EOL]     assertEquals("{\"b\":\"b\"}", mapper.writer(prov).writeValueAsString(new Bean())); [EOL] }
public void testSimpleExclusionFilter() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     FilterProvider prov = new SimpleFilterProvider().addFilter("RootFilter", SimpleBeanPropertyFilter.serializeAllExcept("a")); [EOL]     assertEquals("{\"b\":\"b\"}", mapper.writer(prov).writeValueAsString(new Bean())); [EOL] }
public void testTypeIdFromExternal() throws Exception { [EOL]     String json = mapper.writeValueAsString(new ExternalIdWrapper2()); [EOL]     assertEquals("{\"bean\":{\"a\":2},\"type\":\"SomeType\"}", json); [EOL] }
public void testTypeIdFromExternal() throws Exception { [EOL]     String json = mapper.writeValueAsString(new ExternalIdWrapper2()); [EOL]     assertEquals("{\"bean\":{\"a\":2},\"type\":\"SomeType\"}", json); [EOL] }
public void testMultipleTypeIdsDeserialization() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerSubtypes(ValueBean.class); [EOL]     String json = mapper.writeValueAsString(new ExternalBean3(3)); [EOL]     ExternalBean3 result = mapper.readValue(json, ExternalBean3.class); [EOL]     assertNotNull(result); [EOL]     assertNotNull(result.value1); [EOL]     assertNotNull(result.value2); [EOL]     assertNotNull(result.value3); [EOL]     assertEquals(3, ((ValueBean) result.value1).value); [EOL]     assertEquals(4, ((ValueBean) result.value2).value); [EOL]     assertEquals(5, ((ValueBean) result.value3).value); [EOL]     assertEquals(3, result.foo); [EOL] }
public void testMultipleTypeIdsDeserialization() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerSubtypes(ValueBean.class); [EOL]     String json = mapper.writeValueAsString(new ExternalBean3(3)); [EOL]     ExternalBean3 result = mapper.readValue(json, ExternalBean3.class); [EOL]     assertNotNull(result); [EOL]     assertNotNull(result.value1); [EOL]     assertNotNull(result.value2); [EOL]     assertNotNull(result.value3); [EOL]     assertEquals(3, ((ValueBean) result.value1).value); [EOL]     assertEquals(4, ((ValueBean) result.value2).value); [EOL]     assertEquals(5, ((ValueBean) result.value3).value); [EOL]     assertEquals(3, result.foo); [EOL] }
public void testTypeIdFromExternal() throws Exception { [EOL]     String json = mapper.writeValueAsString(new ExternalIdWrapper2()); [EOL]     assertEquals("{\"bean\":{\"a\":2},\"type\":\"SomeType\"}", json); [EOL] }
public void testTypeIdFromExternal() throws Exception { [EOL]     String json = mapper.writeValueAsString(new ExternalIdWrapper2()); [EOL]     assertEquals("{\"bean\":{\"a\":2},\"type\":\"SomeType\"}", json); [EOL] }
public void testTypeIdFromExternal() throws Exception { [EOL]     String json = mapper.writeValueAsString(new ExternalIdWrapper2()); [EOL]     assertEquals("{\"bean\":{\"a\":2},\"type\":\"SomeType\"}", json); [EOL] }
public void testTypeIdFromExternal() throws Exception { [EOL]     String json = mapper.writeValueAsString(new ExternalIdWrapper2()); [EOL]     assertEquals("{\"bean\":{\"a\":2},\"type\":\"SomeType\"}", json); [EOL] }
public void testTypeIdFromExternal() throws Exception { [EOL]     String json = mapper.writeValueAsString(new ExternalIdWrapper2()); [EOL]     assertEquals("{\"bean\":{\"a\":2},\"type\":\"SomeType\"}", json); [EOL] }
public void testTypeIdFromExternal() throws Exception { [EOL]     String json = mapper.writeValueAsString(new ExternalIdWrapper2()); [EOL]     assertEquals("{\"bean\":{\"a\":2},\"type\":\"SomeType\"}", json); [EOL] }
public void testMultipleTypeIdsDeserialization() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerSubtypes(ValueBean.class); [EOL]     String json = mapper.writeValueAsString(new ExternalBean3(3)); [EOL]     ExternalBean3 result = mapper.readValue(json, ExternalBean3.class); [EOL]     assertNotNull(result); [EOL]     assertNotNull(result.value1); [EOL]     assertNotNull(result.value2); [EOL]     assertNotNull(result.value3); [EOL]     assertEquals(3, ((ValueBean) result.value1).value); [EOL]     assertEquals(4, ((ValueBean) result.value2).value); [EOL]     assertEquals(5, ((ValueBean) result.value3).value); [EOL]     assertEquals(3, result.foo); [EOL] }
public void testMultipleTypeIdsDeserialization() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerSubtypes(ValueBean.class); [EOL]     String json = mapper.writeValueAsString(new ExternalBean3(3)); [EOL]     ExternalBean3 result = mapper.readValue(json, ExternalBean3.class); [EOL]     assertNotNull(result); [EOL]     assertNotNull(result.value1); [EOL]     assertNotNull(result.value2); [EOL]     assertNotNull(result.value3); [EOL]     assertEquals(3, ((ValueBean) result.value1).value); [EOL]     assertEquals(4, ((ValueBean) result.value2).value); [EOL]     assertEquals(5, ((ValueBean) result.value3).value); [EOL]     assertEquals(3, result.foo); [EOL] }
public void testMultipleTypeIdsDeserialization() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerSubtypes(ValueBean.class); [EOL]     String json = mapper.writeValueAsString(new ExternalBean3(3)); [EOL]     ExternalBean3 result = mapper.readValue(json, ExternalBean3.class); [EOL]     assertNotNull(result); [EOL]     assertNotNull(result.value1); [EOL]     assertNotNull(result.value2); [EOL]     assertNotNull(result.value3); [EOL]     assertEquals(3, ((ValueBean) result.value1).value); [EOL]     assertEquals(4, ((ValueBean) result.value2).value); [EOL]     assertEquals(5, ((ValueBean) result.value3).value); [EOL]     assertEquals(3, result.foo); [EOL] }
public void testMultipleTypeIdsDeserialization() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerSubtypes(ValueBean.class); [EOL]     String json = mapper.writeValueAsString(new ExternalBean3(3)); [EOL]     ExternalBean3 result = mapper.readValue(json, ExternalBean3.class); [EOL]     assertNotNull(result); [EOL]     assertNotNull(result.value1); [EOL]     assertNotNull(result.value2); [EOL]     assertNotNull(result.value3); [EOL]     assertEquals(3, ((ValueBean) result.value1).value); [EOL]     assertEquals(4, ((ValueBean) result.value2).value); [EOL]     assertEquals(5, ((ValueBean) result.value3).value); [EOL]     assertEquals(3, result.foo); [EOL] }
public void testMultipleTypeIdsDeserialization() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerSubtypes(ValueBean.class); [EOL]     String json = mapper.writeValueAsString(new ExternalBean3(3)); [EOL]     ExternalBean3 result = mapper.readValue(json, ExternalBean3.class); [EOL]     assertNotNull(result); [EOL]     assertNotNull(result.value1); [EOL]     assertNotNull(result.value2); [EOL]     assertNotNull(result.value3); [EOL]     assertEquals(3, ((ValueBean) result.value1).value); [EOL]     assertEquals(4, ((ValueBean) result.value2).value); [EOL]     assertEquals(5, ((ValueBean) result.value3).value); [EOL]     assertEquals(3, result.foo); [EOL] }
public void testMultipleTypeIdsDeserialization() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerSubtypes(ValueBean.class); [EOL]     String json = mapper.writeValueAsString(new ExternalBean3(3)); [EOL]     ExternalBean3 result = mapper.readValue(json, ExternalBean3.class); [EOL]     assertNotNull(result); [EOL]     assertNotNull(result.value1); [EOL]     assertNotNull(result.value2); [EOL]     assertNotNull(result.value3); [EOL]     assertEquals(3, ((ValueBean) result.value1).value); [EOL]     assertEquals(4, ((ValueBean) result.value2).value); [EOL]     assertEquals(5, ((ValueBean) result.value3).value); [EOL]     assertEquals(3, result.foo); [EOL] }
public void testMultipleTypeIdsDeserialization() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerSubtypes(ValueBean.class); [EOL]     String json = mapper.writeValueAsString(new ExternalBean3(3)); [EOL]     ExternalBean3 result = mapper.readValue(json, ExternalBean3.class); [EOL]     assertNotNull(result); [EOL]     assertNotNull(result.value1); [EOL]     assertNotNull(result.value2); [EOL]     assertNotNull(result.value3); [EOL]     assertEquals(3, ((ValueBean) result.value1).value); [EOL]     assertEquals(4, ((ValueBean) result.value2).value); [EOL]     assertEquals(5, ((ValueBean) result.value3).value); [EOL]     assertEquals(3, result.foo); [EOL] }
public void testMultipleTypeIdsDeserialization() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerSubtypes(ValueBean.class); [EOL]     String json = mapper.writeValueAsString(new ExternalBean3(3)); [EOL]     ExternalBean3 result = mapper.readValue(json, ExternalBean3.class); [EOL]     assertNotNull(result); [EOL]     assertNotNull(result.value1); [EOL]     assertNotNull(result.value2); [EOL]     assertNotNull(result.value3); [EOL]     assertEquals(3, ((ValueBean) result.value1).value); [EOL]     assertEquals(4, ((ValueBean) result.value2).value); [EOL]     assertEquals(5, ((ValueBean) result.value3).value); [EOL]     assertEquals(3, result.foo); [EOL] }
public void testMultipleTypeIdsDeserialization() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerSubtypes(ValueBean.class); [EOL]     String json = mapper.writeValueAsString(new ExternalBean3(3)); [EOL]     ExternalBean3 result = mapper.readValue(json, ExternalBean3.class); [EOL]     assertNotNull(result); [EOL]     assertNotNull(result.value1); [EOL]     assertNotNull(result.value2); [EOL]     assertNotNull(result.value3); [EOL]     assertEquals(3, ((ValueBean) result.value1).value); [EOL]     assertEquals(4, ((ValueBean) result.value2).value); [EOL]     assertEquals(5, ((ValueBean) result.value3).value); [EOL]     assertEquals(3, result.foo); [EOL] }
public void testMultipleTypeIdsDeserialization() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerSubtypes(ValueBean.class); [EOL]     String json = mapper.writeValueAsString(new ExternalBean3(3)); [EOL]     ExternalBean3 result = mapper.readValue(json, ExternalBean3.class); [EOL]     assertNotNull(result); [EOL]     assertNotNull(result.value1); [EOL]     assertNotNull(result.value2); [EOL]     assertNotNull(result.value3); [EOL]     assertEquals(3, ((ValueBean) result.value1).value); [EOL]     assertEquals(4, ((ValueBean) result.value2).value); [EOL]     assertEquals(5, ((ValueBean) result.value3).value); [EOL]     assertEquals(3, result.foo); [EOL] }
public void testMultipleTypeIdsDeserialization() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerSubtypes(ValueBean.class); [EOL]     String json = mapper.writeValueAsString(new ExternalBean3(3)); [EOL]     ExternalBean3 result = mapper.readValue(json, ExternalBean3.class); [EOL]     assertNotNull(result); [EOL]     assertNotNull(result.value1); [EOL]     assertNotNull(result.value2); [EOL]     assertNotNull(result.value3); [EOL]     assertEquals(3, ((ValueBean) result.value1).value); [EOL]     assertEquals(4, ((ValueBean) result.value2).value); [EOL]     assertEquals(5, ((ValueBean) result.value3).value); [EOL]     assertEquals(3, result.foo); [EOL] }
public void testMultipleTypeIdsDeserialization() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerSubtypes(ValueBean.class); [EOL]     String json = mapper.writeValueAsString(new ExternalBean3(3)); [EOL]     ExternalBean3 result = mapper.readValue(json, ExternalBean3.class); [EOL]     assertNotNull(result); [EOL]     assertNotNull(result.value1); [EOL]     assertNotNull(result.value2); [EOL]     assertNotNull(result.value3); [EOL]     assertEquals(3, ((ValueBean) result.value1).value); [EOL]     assertEquals(4, ((ValueBean) result.value2).value); [EOL]     assertEquals(5, ((ValueBean) result.value3).value); [EOL]     assertEquals(3, result.foo); [EOL] }
public void testMultipleTypeIdsDeserialization() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerSubtypes(ValueBean.class); [EOL]     String json = mapper.writeValueAsString(new ExternalBean3(3)); [EOL]     ExternalBean3 result = mapper.readValue(json, ExternalBean3.class); [EOL]     assertNotNull(result); [EOL]     assertNotNull(result.value1); [EOL]     assertNotNull(result.value2); [EOL]     assertNotNull(result.value3); [EOL]     assertEquals(3, ((ValueBean) result.value1).value); [EOL]     assertEquals(4, ((ValueBean) result.value2).value); [EOL]     assertEquals(5, ((ValueBean) result.value3).value); [EOL]     assertEquals(3, result.foo); [EOL] }
public void testMultipleTypeIdsDeserialization() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerSubtypes(ValueBean.class); [EOL]     String json = mapper.writeValueAsString(new ExternalBean3(3)); [EOL]     ExternalBean3 result = mapper.readValue(json, ExternalBean3.class); [EOL]     assertNotNull(result); [EOL]     assertNotNull(result.value1); [EOL]     assertNotNull(result.value2); [EOL]     assertNotNull(result.value3); [EOL]     assertEquals(3, ((ValueBean) result.value1).value); [EOL]     assertEquals(4, ((ValueBean) result.value2).value); [EOL]     assertEquals(5, ((ValueBean) result.value3).value); [EOL]     assertEquals(3, result.foo); [EOL] }
public void testMultipleTypeIdsDeserialization() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerSubtypes(ValueBean.class); [EOL]     String json = mapper.writeValueAsString(new ExternalBean3(3)); [EOL]     ExternalBean3 result = mapper.readValue(json, ExternalBean3.class); [EOL]     assertNotNull(result); [EOL]     assertNotNull(result.value1); [EOL]     assertNotNull(result.value2); [EOL]     assertNotNull(result.value3); [EOL]     assertEquals(3, ((ValueBean) result.value1).value); [EOL]     assertEquals(4, ((ValueBean) result.value2).value); [EOL]     assertEquals(5, ((ValueBean) result.value3).value); [EOL]     assertEquals(3, result.foo); [EOL] }
public void testIssue798() throws Exception { [EOL]     Base base = new Derived1("derived1 prop val", "base prop val"); [EOL]     BaseContainer baseContainer = new BaseContainer("bc prop val", base); [EOL]     String generatedJson = MAPPER.writeValueAsString(baseContainer); [EOL]     BaseContainer baseContainer2 = MAPPER.readValue(generatedJson, BaseContainer.class); [EOL]     assertEquals("bc prop val", baseContainer.getBaseContainerProperty()); [EOL]     Base b = baseContainer2.getBase(); [EOL]     assertNotNull(b); [EOL]     if (b.getClass() != Derived1.class) { [EOL]         fail("Should have type Derived1, was " + b.getClass().getName()); [EOL]     } [EOL]     Derived1 derived1 = (Derived1) b; [EOL]     assertEquals("base prop val", derived1.getBaseProperty()); [EOL]     assertEquals("derived1 prop val", derived1.getDerived1Property()); [EOL] }
public void testIssue798() throws Exception { [EOL]     Base base = new Derived1("derived1 prop val", "base prop val"); [EOL]     BaseContainer baseContainer = new BaseContainer("bc prop val", base); [EOL]     String generatedJson = MAPPER.writeValueAsString(baseContainer); [EOL]     BaseContainer baseContainer2 = MAPPER.readValue(generatedJson, BaseContainer.class); [EOL]     assertEquals("bc prop val", baseContainer.getBaseContainerProperty()); [EOL]     Base b = baseContainer2.getBase(); [EOL]     assertNotNull(b); [EOL]     if (b.getClass() != Derived1.class) { [EOL]         fail("Should have type Derived1, was " + b.getClass().getName()); [EOL]     } [EOL]     Derived1 derived1 = (Derived1) b; [EOL]     assertEquals("base prop val", derived1.getBaseProperty()); [EOL]     assertEquals("derived1 prop val", derived1.getDerived1Property()); [EOL] }
public void testIssue798() throws Exception { [EOL]     Base base = new Derived1("derived1 prop val", "base prop val"); [EOL]     BaseContainer baseContainer = new BaseContainer("bc prop val", base); [EOL]     String generatedJson = MAPPER.writeValueAsString(baseContainer); [EOL]     BaseContainer baseContainer2 = MAPPER.readValue(generatedJson, BaseContainer.class); [EOL]     assertEquals("bc prop val", baseContainer.getBaseContainerProperty()); [EOL]     Base b = baseContainer2.getBase(); [EOL]     assertNotNull(b); [EOL]     if (b.getClass() != Derived1.class) { [EOL]         fail("Should have type Derived1, was " + b.getClass().getName()); [EOL]     } [EOL]     Derived1 derived1 = (Derived1) b; [EOL]     assertEquals("base prop val", derived1.getBaseProperty()); [EOL]     assertEquals("derived1 prop val", derived1.getDerived1Property()); [EOL] }
public void testIssue798() throws Exception { [EOL]     Base base = new Derived1("derived1 prop val", "base prop val"); [EOL]     BaseContainer baseContainer = new BaseContainer("bc prop val", base); [EOL]     String generatedJson = MAPPER.writeValueAsString(baseContainer); [EOL]     BaseContainer baseContainer2 = MAPPER.readValue(generatedJson, BaseContainer.class); [EOL]     assertEquals("bc prop val", baseContainer.getBaseContainerProperty()); [EOL]     Base b = baseContainer2.getBase(); [EOL]     assertNotNull(b); [EOL]     if (b.getClass() != Derived1.class) { [EOL]         fail("Should have type Derived1, was " + b.getClass().getName()); [EOL]     } [EOL]     Derived1 derived1 = (Derived1) b; [EOL]     assertEquals("base prop val", derived1.getBaseProperty()); [EOL]     assertEquals("derived1 prop val", derived1.getDerived1Property()); [EOL] }
public void testIssue798() throws Exception { [EOL]     Base base = new Derived1("derived1 prop val", "base prop val"); [EOL]     BaseContainer baseContainer = new BaseContainer("bc prop val", base); [EOL]     String generatedJson = MAPPER.writeValueAsString(baseContainer); [EOL]     BaseContainer baseContainer2 = MAPPER.readValue(generatedJson, BaseContainer.class); [EOL]     assertEquals("bc prop val", baseContainer.getBaseContainerProperty()); [EOL]     Base b = baseContainer2.getBase(); [EOL]     assertNotNull(b); [EOL]     if (b.getClass() != Derived1.class) { [EOL]         fail("Should have type Derived1, was " + b.getClass().getName()); [EOL]     } [EOL]     Derived1 derived1 = (Derived1) b; [EOL]     assertEquals("base prop val", derived1.getBaseProperty()); [EOL]     assertEquals("derived1 prop val", derived1.getDerived1Property()); [EOL] }
public void testMultipleTypeIdsDeserialization() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerSubtypes(ValueBean.class); [EOL]     String json = mapper.writeValueAsString(new ExternalBean3(3)); [EOL]     ExternalBean3 result = mapper.readValue(json, ExternalBean3.class); [EOL]     assertNotNull(result); [EOL]     assertNotNull(result.value1); [EOL]     assertNotNull(result.value2); [EOL]     assertNotNull(result.value3); [EOL]     assertEquals(3, ((ValueBean) result.value1).value); [EOL]     assertEquals(4, ((ValueBean) result.value2).value); [EOL]     assertEquals(5, ((ValueBean) result.value3).value); [EOL]     assertEquals(3, result.foo); [EOL] }
public void testMultipleTypeIdsDeserialization() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerSubtypes(ValueBean.class); [EOL]     String json = mapper.writeValueAsString(new ExternalBean3(3)); [EOL]     ExternalBean3 result = mapper.readValue(json, ExternalBean3.class); [EOL]     assertNotNull(result); [EOL]     assertNotNull(result.value1); [EOL]     assertNotNull(result.value2); [EOL]     assertNotNull(result.value3); [EOL]     assertEquals(3, ((ValueBean) result.value1).value); [EOL]     assertEquals(4, ((ValueBean) result.value2).value); [EOL]     assertEquals(5, ((ValueBean) result.value3).value); [EOL]     assertEquals(3, result.foo); [EOL] }
public void testMultipleTypeIdsDeserialization() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerSubtypes(ValueBean.class); [EOL]     String json = mapper.writeValueAsString(new ExternalBean3(3)); [EOL]     ExternalBean3 result = mapper.readValue(json, ExternalBean3.class); [EOL]     assertNotNull(result); [EOL]     assertNotNull(result.value1); [EOL]     assertNotNull(result.value2); [EOL]     assertNotNull(result.value3); [EOL]     assertEquals(3, ((ValueBean) result.value1).value); [EOL]     assertEquals(4, ((ValueBean) result.value2).value); [EOL]     assertEquals(5, ((ValueBean) result.value3).value); [EOL]     assertEquals(3, result.foo); [EOL] }
public void testMultipleTypeIdsDeserialization() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerSubtypes(ValueBean.class); [EOL]     String json = mapper.writeValueAsString(new ExternalBean3(3)); [EOL]     ExternalBean3 result = mapper.readValue(json, ExternalBean3.class); [EOL]     assertNotNull(result); [EOL]     assertNotNull(result.value1); [EOL]     assertNotNull(result.value2); [EOL]     assertNotNull(result.value3); [EOL]     assertEquals(3, ((ValueBean) result.value1).value); [EOL]     assertEquals(4, ((ValueBean) result.value2).value); [EOL]     assertEquals(5, ((ValueBean) result.value3).value); [EOL]     assertEquals(3, result.foo); [EOL] }
public void testMultipleTypeIdsDeserialization() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerSubtypes(ValueBean.class); [EOL]     String json = mapper.writeValueAsString(new ExternalBean3(3)); [EOL]     ExternalBean3 result = mapper.readValue(json, ExternalBean3.class); [EOL]     assertNotNull(result); [EOL]     assertNotNull(result.value1); [EOL]     assertNotNull(result.value2); [EOL]     assertNotNull(result.value3); [EOL]     assertEquals(3, ((ValueBean) result.value1).value); [EOL]     assertEquals(4, ((ValueBean) result.value2).value); [EOL]     assertEquals(5, ((ValueBean) result.value3).value); [EOL]     assertEquals(3, result.foo); [EOL] }
public void testMultipleTypeIdsDeserialization() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerSubtypes(ValueBean.class); [EOL]     String json = mapper.writeValueAsString(new ExternalBean3(3)); [EOL]     ExternalBean3 result = mapper.readValue(json, ExternalBean3.class); [EOL]     assertNotNull(result); [EOL]     assertNotNull(result.value1); [EOL]     assertNotNull(result.value2); [EOL]     assertNotNull(result.value3); [EOL]     assertEquals(3, ((ValueBean) result.value1).value); [EOL]     assertEquals(4, ((ValueBean) result.value2).value); [EOL]     assertEquals(5, ((ValueBean) result.value3).value); [EOL]     assertEquals(3, result.foo); [EOL] }
public void testMultipleTypeIdsDeserialization() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerSubtypes(ValueBean.class); [EOL]     String json = mapper.writeValueAsString(new ExternalBean3(3)); [EOL]     ExternalBean3 result = mapper.readValue(json, ExternalBean3.class); [EOL]     assertNotNull(result); [EOL]     assertNotNull(result.value1); [EOL]     assertNotNull(result.value2); [EOL]     assertNotNull(result.value3); [EOL]     assertEquals(3, ((ValueBean) result.value1).value); [EOL]     assertEquals(4, ((ValueBean) result.value2).value); [EOL]     assertEquals(5, ((ValueBean) result.value3).value); [EOL]     assertEquals(3, result.foo); [EOL] }
public void testMultipleTypeIdsDeserialization() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerSubtypes(ValueBean.class); [EOL]     String json = mapper.writeValueAsString(new ExternalBean3(3)); [EOL]     ExternalBean3 result = mapper.readValue(json, ExternalBean3.class); [EOL]     assertNotNull(result); [EOL]     assertNotNull(result.value1); [EOL]     assertNotNull(result.value2); [EOL]     assertNotNull(result.value3); [EOL]     assertEquals(3, ((ValueBean) result.value1).value); [EOL]     assertEquals(4, ((ValueBean) result.value2).value); [EOL]     assertEquals(5, ((ValueBean) result.value3).value); [EOL]     assertEquals(3, result.foo); [EOL] }
public void testMultipleTypeIdsDeserialization() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerSubtypes(ValueBean.class); [EOL]     String json = mapper.writeValueAsString(new ExternalBean3(3)); [EOL]     ExternalBean3 result = mapper.readValue(json, ExternalBean3.class); [EOL]     assertNotNull(result); [EOL]     assertNotNull(result.value1); [EOL]     assertNotNull(result.value2); [EOL]     assertNotNull(result.value3); [EOL]     assertEquals(3, ((ValueBean) result.value1).value); [EOL]     assertEquals(4, ((ValueBean) result.value2).value); [EOL]     assertEquals(5, ((ValueBean) result.value3).value); [EOL]     assertEquals(3, result.foo); [EOL] }
public void testMultipleTypeIdsDeserialization() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerSubtypes(ValueBean.class); [EOL]     String json = mapper.writeValueAsString(new ExternalBean3(3)); [EOL]     ExternalBean3 result = mapper.readValue(json, ExternalBean3.class); [EOL]     assertNotNull(result); [EOL]     assertNotNull(result.value1); [EOL]     assertNotNull(result.value2); [EOL]     assertNotNull(result.value3); [EOL]     assertEquals(3, ((ValueBean) result.value1).value); [EOL]     assertEquals(4, ((ValueBean) result.value2).value); [EOL]     assertEquals(5, ((ValueBean) result.value3).value); [EOL]     assertEquals(3, result.foo); [EOL] }
public void testMultipleTypeIdsDeserialization() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerSubtypes(ValueBean.class); [EOL]     String json = mapper.writeValueAsString(new ExternalBean3(3)); [EOL]     ExternalBean3 result = mapper.readValue(json, ExternalBean3.class); [EOL]     assertNotNull(result); [EOL]     assertNotNull(result.value1); [EOL]     assertNotNull(result.value2); [EOL]     assertNotNull(result.value3); [EOL]     assertEquals(3, ((ValueBean) result.value1).value); [EOL]     assertEquals(4, ((ValueBean) result.value2).value); [EOL]     assertEquals(5, ((ValueBean) result.value3).value); [EOL]     assertEquals(3, result.foo); [EOL] }
public void testCustomDateWithAnnotation() throws Exception { [EOL]     DateAsStringBean result = MAPPER.readValue("{\"date\":\"/2005/05/25/\"}", DateAsStringBean.class); [EOL]     assertNotNull(result); [EOL]     assertNotNull(result.date); [EOL]     Calendar c = Calendar.getInstance(TimeZone.getTimeZone("GMT")); [EOL]     long l = result.date.getTime(); [EOL]     if (l == 0L) { [EOL]         fail("Should not get null date"); [EOL]     } [EOL]     c.setTimeInMillis(l); [EOL]     assertEquals(2005, c.get(Calendar.YEAR)); [EOL]     assertEquals(Calendar.MAY, c.get(Calendar.MONTH)); [EOL]     assertEquals(25, c.get(Calendar.DAY_OF_MONTH)); [EOL] }
public void testJsonTypeResolver() throws Exception { [EOL]     JacksonAnnotationIntrospector ai = new JacksonAnnotationIntrospector(); [EOL]     AnnotatedClass ac = AnnotatedClass.constructWithoutSuperTypes(TypeResolverBean.class, ai, null); [EOL]     JavaType baseType = TypeFactory.defaultInstance().constructType(TypeResolverBean.class); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     TypeResolverBuilder<?> rb = ai.findTypeResolver(mapper.getDeserializationConfig(), ac, baseType); [EOL]     assertNotNull(rb); [EOL]     assertSame(DummyBuilder.class, rb.getClass()); [EOL] }
public void testJsonTypeResolver() throws Exception { [EOL]     JacksonAnnotationIntrospector ai = new JacksonAnnotationIntrospector(); [EOL]     AnnotatedClass ac = AnnotatedClass.constructWithoutSuperTypes(TypeResolverBean.class, ai, null); [EOL]     JavaType baseType = TypeFactory.defaultInstance().constructType(TypeResolverBean.class); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     TypeResolverBuilder<?> rb = ai.findTypeResolver(mapper.getDeserializationConfig(), ac, baseType); [EOL]     assertNotNull(rb); [EOL]     assertSame(DummyBuilder.class, rb.getClass()); [EOL] }
public void testJsonTypeResolver() throws Exception { [EOL]     JacksonAnnotationIntrospector ai = new JacksonAnnotationIntrospector(); [EOL]     AnnotatedClass ac = AnnotatedClass.constructWithoutSuperTypes(TypeResolverBean.class, ai, null); [EOL]     JavaType baseType = TypeFactory.defaultInstance().constructType(TypeResolverBean.class); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     TypeResolverBuilder<?> rb = ai.findTypeResolver(mapper.getDeserializationConfig(), ac, baseType); [EOL]     assertNotNull(rb); [EOL]     assertSame(DummyBuilder.class, rb.getClass()); [EOL] }
public void testConstructorAndProps() throws Exception { [EOL]     ConstructorAndPropsBean bean = MAPPER.readValue("{ \"a\" : \"1\", \"b\": 2, \"c\" : true }", ConstructorAndPropsBean.class); [EOL]     assertEquals(1, bean.a); [EOL]     assertEquals(2, bean.b); [EOL]     assertEquals(true, bean.c); [EOL] }
public void testConstructorAndProps() throws Exception { [EOL]     ConstructorAndPropsBean bean = MAPPER.readValue("{ \"a\" : \"1\", \"b\": 2, \"c\" : true }", ConstructorAndPropsBean.class); [EOL]     assertEquals(1, bean.a); [EOL]     assertEquals(2, bean.b); [EOL]     assertEquals(true, bean.c); [EOL] }
public void testSimple() throws Exception { [EOL]     final String JSON = SAMPLE_DOC_JSON_SPEC; [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     for (int type = 0; type < 2; ++type) { [EOL]         JsonNode result; [EOL]         if (type == 0) { [EOL]             result = mapper.readTree(new StringReader(JSON)); [EOL]         } else { [EOL]             result = mapper.readTree(JSON); [EOL]         } [EOL]         assertType(result, ObjectNode.class); [EOL]         assertEquals(1, result.size()); [EOL]         assertTrue(result.isObject()); [EOL]         ObjectNode main = (ObjectNode) result; [EOL]         assertEquals("Image", main.fieldNames().next()); [EOL]         JsonNode ob = main.elements().next(); [EOL]         assertType(ob, ObjectNode.class); [EOL]         ObjectNode imageMap = (ObjectNode) ob; [EOL]         assertEquals(5, imageMap.size()); [EOL]         ob = imageMap.get("Width"); [EOL]         assertTrue(ob.isIntegralNumber()); [EOL]         assertFalse(ob.isFloatingPointNumber()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_WIDTH, ob.intValue()); [EOL]         ob = imageMap.get("Height"); [EOL]         assertTrue(ob.isIntegralNumber()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_HEIGHT, ob.intValue()); [EOL]         ob = imageMap.get("Title"); [EOL]         assertTrue(ob.isTextual()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_TITLE, ob.textValue()); [EOL]         ob = imageMap.get("Thumbnail"); [EOL]         assertType(ob, ObjectNode.class); [EOL]         ObjectNode tn = (ObjectNode) ob; [EOL]         ob = tn.get("Url"); [EOL]         assertTrue(ob.isTextual()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_TN_URL, ob.textValue()); [EOL]         ob = tn.get("Height"); [EOL]         assertTrue(ob.isIntegralNumber()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_TN_HEIGHT, ob.intValue()); [EOL]         ob = tn.get("Width"); [EOL]         assertTrue(ob.isTextual()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_TN_WIDTH, ob.textValue()); [EOL]         ob = imageMap.get("IDs"); [EOL]         assertTrue(ob.isArray()); [EOL]         ArrayNode idList = (ArrayNode) ob; [EOL]         assertEquals(4, idList.size()); [EOL]         assertEquals(4, calcLength(idList.elements())); [EOL]         assertEquals(4, calcLength(idList.iterator())); [EOL]         { [EOL]             int[] values = new int[] { SAMPLE_SPEC_VALUE_TN_ID1, SAMPLE_SPEC_VALUE_TN_ID2, SAMPLE_SPEC_VALUE_TN_ID3, SAMPLE_SPEC_VALUE_TN_ID4 }; [EOL]             for (int i = 0; i < values.length; ++i) { [EOL]                 assertEquals(values[i], idList.get(i).intValue()); [EOL]             } [EOL]             int i = 0; [EOL]             for (JsonNode n : idList) { [EOL]                 assertEquals(values[i], n.intValue()); [EOL]                 ++i; [EOL]             } [EOL]         } [EOL]     } [EOL] }
public void testNonMatching() throws Exception { [EOL]     JsonNode root = _buildTree(); [EOL]     assertNull(root.findValue("boogaboo")); [EOL]     assertNull(root.findParent("boogaboo")); [EOL]     JsonNode n = root.findPath("boogaboo"); [EOL]     assertNotNull(n); [EOL]     assertTrue(n.isMissingNode()); [EOL]     assertTrue(root.findValues("boogaboo").isEmpty()); [EOL]     assertTrue(root.findParents("boogaboo").isEmpty()); [EOL] }
public void testNonMatching() throws Exception { [EOL]     JsonNode root = _buildTree(); [EOL]     assertNull(root.findValue("boogaboo")); [EOL]     assertNull(root.findParent("boogaboo")); [EOL]     JsonNode n = root.findPath("boogaboo"); [EOL]     assertNotNull(n); [EOL]     assertTrue(n.isMissingNode()); [EOL]     assertTrue(root.findValues("boogaboo").isEmpty()); [EOL]     assertTrue(root.findParents("boogaboo").isEmpty()); [EOL] }
public void testNonMatching() throws Exception { [EOL]     JsonNode root = _buildTree(); [EOL]     assertNull(root.findValue("boogaboo")); [EOL]     assertNull(root.findParent("boogaboo")); [EOL]     JsonNode n = root.findPath("boogaboo"); [EOL]     assertNotNull(n); [EOL]     assertTrue(n.isMissingNode()); [EOL]     assertTrue(root.findValues("boogaboo").isEmpty()); [EOL]     assertTrue(root.findParents("boogaboo").isEmpty()); [EOL] }
public void testNonMatching() throws Exception { [EOL]     JsonNode root = _buildTree(); [EOL]     assertNull(root.findValue("boogaboo")); [EOL]     assertNull(root.findParent("boogaboo")); [EOL]     JsonNode n = root.findPath("boogaboo"); [EOL]     assertNotNull(n); [EOL]     assertTrue(n.isMissingNode()); [EOL]     assertTrue(root.findValues("boogaboo").isEmpty()); [EOL]     assertTrue(root.findParents("boogaboo").isEmpty()); [EOL] }
public void testRoundTripMap() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     AnimalMap input = new AnimalMap(); [EOL]     input.put("venla", new MaineCoon("Venla", true)); [EOL]     input.put("ama", new Dog("Amadeus", 13)); [EOL]     String json = m.writeValueAsString(input); [EOL]     AnimalMap output = m.readValue(json, AnimalMap.class); [EOL]     assertEquals(input, output); [EOL] }
public void testRoundTripMap() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     AnimalMap input = new AnimalMap(); [EOL]     input.put("venla", new MaineCoon("Venla", true)); [EOL]     input.put("ama", new Dog("Amadeus", 13)); [EOL]     String json = m.writeValueAsString(input); [EOL]     AnimalMap output = m.readValue(json, AnimalMap.class); [EOL]     assertEquals(input, output); [EOL] }
public void testRoundTripMap() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     AnimalMap input = new AnimalMap(); [EOL]     input.put("venla", new MaineCoon("Venla", true)); [EOL]     input.put("ama", new Dog("Amadeus", 13)); [EOL]     String json = m.writeValueAsString(input); [EOL]     AnimalMap output = m.readValue(json, AnimalMap.class); [EOL]     assertEquals(input, output); [EOL] }
public void testRoundTripMap() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     AnimalMap input = new AnimalMap(); [EOL]     input.put("venla", new MaineCoon("Venla", true)); [EOL]     input.put("ama", new Dog("Amadeus", 13)); [EOL]     String json = m.writeValueAsString(input); [EOL]     AnimalMap output = m.readValue(json, AnimalMap.class); [EOL]     assertEquals(input, output); [EOL] }
public void testRoundTripMap() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     AnimalMap input = new AnimalMap(); [EOL]     input.put("venla", new MaineCoon("Venla", true)); [EOL]     input.put("ama", new Dog("Amadeus", 13)); [EOL]     String json = m.writeValueAsString(input); [EOL]     AnimalMap output = m.readValue(json, AnimalMap.class); [EOL]     assertEquals(input, output); [EOL] }
public void testRoundTripMap() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     AnimalMap input = new AnimalMap(); [EOL]     input.put("venla", new MaineCoon("Venla", true)); [EOL]     input.put("ama", new Dog("Amadeus", 13)); [EOL]     String json = m.writeValueAsString(input); [EOL]     AnimalMap output = m.readValue(json, AnimalMap.class); [EOL]     assertEquals(input, output); [EOL] }
public void testLongListAsWrapper() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String JSON = "{\"" + TypedListAsWrapper.class.getName() + "\":[1, 3]}"; [EOL]     JavaType type = TypeFactory.defaultInstance().constructCollectionType(TypedListAsWrapper.class, Long.class); [EOL]     TypedListAsWrapper<Object> result = m.readValue(JSON, type); [EOL]     assertNotNull(result); [EOL]     assertEquals(2, result.size()); [EOL]     assertEquals(Long.class, result.get(0).getClass()); [EOL]     assertEquals(Long.valueOf(1), result.get(0)); [EOL]     assertEquals(Long.class, result.get(1).getClass()); [EOL]     assertEquals(Long.valueOf(3), result.get(1)); [EOL] }
public void testLongListAsWrapper() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String JSON = "{\"" + TypedListAsWrapper.class.getName() + "\":[1, 3]}"; [EOL]     JavaType type = TypeFactory.defaultInstance().constructCollectionType(TypedListAsWrapper.class, Long.class); [EOL]     TypedListAsWrapper<Object> result = m.readValue(JSON, type); [EOL]     assertNotNull(result); [EOL]     assertEquals(2, result.size()); [EOL]     assertEquals(Long.class, result.get(0).getClass()); [EOL]     assertEquals(Long.valueOf(1), result.get(0)); [EOL]     assertEquals(Long.class, result.get(1).getClass()); [EOL]     assertEquals(Long.valueOf(3), result.get(1)); [EOL] }
public void testLongListAsWrapper() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String JSON = "{\"" + TypedListAsWrapper.class.getName() + "\":[1, 3]}"; [EOL]     JavaType type = TypeFactory.defaultInstance().constructCollectionType(TypedListAsWrapper.class, Long.class); [EOL]     TypedListAsWrapper<Object> result = m.readValue(JSON, type); [EOL]     assertNotNull(result); [EOL]     assertEquals(2, result.size()); [EOL]     assertEquals(Long.class, result.get(0).getClass()); [EOL]     assertEquals(Long.valueOf(1), result.get(0)); [EOL]     assertEquals(Long.class, result.get(1).getClass()); [EOL]     assertEquals(Long.valueOf(3), result.get(1)); [EOL] }
public void testLongListAsWrapper() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String JSON = "{\"" + TypedListAsWrapper.class.getName() + "\":[1, 3]}"; [EOL]     JavaType type = TypeFactory.defaultInstance().constructCollectionType(TypedListAsWrapper.class, Long.class); [EOL]     TypedListAsWrapper<Object> result = m.readValue(JSON, type); [EOL]     assertNotNull(result); [EOL]     assertEquals(2, result.size()); [EOL]     assertEquals(Long.class, result.get(0).getClass()); [EOL]     assertEquals(Long.valueOf(1), result.get(0)); [EOL]     assertEquals(Long.class, result.get(1).getClass()); [EOL]     assertEquals(Long.valueOf(3), result.get(1)); [EOL] }
public void testLongListAsWrapper() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String JSON = "{\"" + TypedListAsWrapper.class.getName() + "\":[1, 3]}"; [EOL]     JavaType type = TypeFactory.defaultInstance().constructCollectionType(TypedListAsWrapper.class, Long.class); [EOL]     TypedListAsWrapper<Object> result = m.readValue(JSON, type); [EOL]     assertNotNull(result); [EOL]     assertEquals(2, result.size()); [EOL]     assertEquals(Long.class, result.get(0).getClass()); [EOL]     assertEquals(Long.valueOf(1), result.get(0)); [EOL]     assertEquals(Long.class, result.get(1).getClass()); [EOL]     assertEquals(Long.valueOf(3), result.get(1)); [EOL] }
public void testLongListAsWrapper() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String JSON = "{\"" + TypedListAsWrapper.class.getName() + "\":[1, 3]}"; [EOL]     JavaType type = TypeFactory.defaultInstance().constructCollectionType(TypedListAsWrapper.class, Long.class); [EOL]     TypedListAsWrapper<Object> result = m.readValue(JSON, type); [EOL]     assertNotNull(result); [EOL]     assertEquals(2, result.size()); [EOL]     assertEquals(Long.class, result.get(0).getClass()); [EOL]     assertEquals(Long.valueOf(1), result.get(0)); [EOL]     assertEquals(Long.class, result.get(1).getClass()); [EOL]     assertEquals(Long.valueOf(3), result.get(1)); [EOL] }
public void testEnumInterface() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String json = m.writeValueAsString(Tag.B); [EOL]     EnumInterface result = m.readValue(json, EnumInterface.class); [EOL]     assertSame(Tag.B, result); [EOL] }
public void testPropertyWithSubtypes() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerSubtypes(SubB.class, SubC.class, SubD.class); [EOL]     String json = mapper.writeValueAsString(new PropertyBean(new SubC())); [EOL]     PropertyBean result = mapper.readValue(json, PropertyBean.class); [EOL]     assertSame(SubC.class, result.value.getClass()); [EOL] }
public void testPropertyWithSubtypes() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerSubtypes(SubB.class, SubC.class, SubD.class); [EOL]     String json = mapper.writeValueAsString(new PropertyBean(new SubC())); [EOL]     PropertyBean result = mapper.readValue(json, PropertyBean.class); [EOL]     assertSame(SubC.class, result.value.getClass()); [EOL] }
public void testPropertyWithSubtypes() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerSubtypes(SubB.class, SubC.class, SubD.class); [EOL]     String json = mapper.writeValueAsString(new PropertyBean(new SubC())); [EOL]     PropertyBean result = mapper.readValue(json, PropertyBean.class); [EOL]     assertSame(SubC.class, result.value.getClass()); [EOL] }
public void testPropertyWithSubtypes() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerSubtypes(SubB.class, SubC.class, SubD.class); [EOL]     String json = mapper.writeValueAsString(new PropertyBean(new SubC())); [EOL]     PropertyBean result = mapper.readValue(json, PropertyBean.class); [EOL]     assertSame(SubC.class, result.value.getClass()); [EOL] }
public void testPropertyWithSubtypes() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerSubtypes(SubB.class, SubC.class, SubD.class); [EOL]     String json = mapper.writeValueAsString(new PropertyBean(new SubC())); [EOL]     PropertyBean result = mapper.readValue(json, PropertyBean.class); [EOL]     assertSame(SubC.class, result.value.getClass()); [EOL] }
public void testPropertyWithSubtypes() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerSubtypes(SubB.class, SubC.class, SubD.class); [EOL]     String json = mapper.writeValueAsString(new PropertyBean(new SubC())); [EOL]     PropertyBean result = mapper.readValue(json, PropertyBean.class); [EOL]     assertSame(SubC.class, result.value.getClass()); [EOL] }
public void testPropertyWithSubtypes() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerSubtypes(SubB.class, SubC.class, SubD.class); [EOL]     String json = mapper.writeValueAsString(new PropertyBean(new SubC())); [EOL]     PropertyBean result = mapper.readValue(json, PropertyBean.class); [EOL]     assertSame(SubC.class, result.value.getClass()); [EOL] }
public void testPropertyWithSubtypes() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerSubtypes(SubB.class, SubC.class, SubD.class); [EOL]     String json = mapper.writeValueAsString(new PropertyBean(new SubC())); [EOL]     PropertyBean result = mapper.readValue(json, PropertyBean.class); [EOL]     assertSame(SubC.class, result.value.getClass()); [EOL] }
public void testPropertyWithSubtypes() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerSubtypes(SubB.class, SubC.class, SubD.class); [EOL]     String json = mapper.writeValueAsString(new PropertyBean(new SubC())); [EOL]     PropertyBean result = mapper.readValue(json, PropertyBean.class); [EOL]     assertSame(SubC.class, result.value.getClass()); [EOL] }
public void testPropertyWithSubtypes() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerSubtypes(SubB.class, SubC.class, SubD.class); [EOL]     String json = mapper.writeValueAsString(new PropertyBean(new SubC())); [EOL]     PropertyBean result = mapper.readValue(json, PropertyBean.class); [EOL]     assertSame(SubC.class, result.value.getClass()); [EOL] }
public void testPropertyWithSubtypes() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerSubtypes(SubB.class, SubC.class, SubD.class); [EOL]     String json = mapper.writeValueAsString(new PropertyBean(new SubC())); [EOL]     PropertyBean result = mapper.readValue(json, PropertyBean.class); [EOL]     assertSame(SubC.class, result.value.getClass()); [EOL] }
public void testBigDecimalAsPlainString() throws Exception { [EOL]     MAPPER.enable(SerializationFeature.WRITE_BIGDECIMAL_AS_PLAIN); [EOL]     Map<String, Object> map = new HashMap<String, Object>(); [EOL]     String PI_STR = "3.00000000"; [EOL]     map.put("pi", new BigDecimal(PI_STR)); [EOL]     String str = MAPPER.writeValueAsString(map); [EOL]     assertEquals("{\"pi\":3.00000000}", str); [EOL] }
public void testBigDecimalAsPlainString() throws Exception { [EOL]     MAPPER.enable(SerializationFeature.WRITE_BIGDECIMAL_AS_PLAIN); [EOL]     Map<String, Object> map = new HashMap<String, Object>(); [EOL]     String PI_STR = "3.00000000"; [EOL]     map.put("pi", new BigDecimal(PI_STR)); [EOL]     String str = MAPPER.writeValueAsString(map); [EOL]     assertEquals("{\"pi\":3.00000000}", str); [EOL] }
public void testBigDecimalAsPlainString() throws Exception { [EOL]     MAPPER.enable(SerializationFeature.WRITE_BIGDECIMAL_AS_PLAIN); [EOL]     Map<String, Object> map = new HashMap<String, Object>(); [EOL]     String PI_STR = "3.00000000"; [EOL]     map.put("pi", new BigDecimal(PI_STR)); [EOL]     String str = MAPPER.writeValueAsString(map); [EOL]     assertEquals("{\"pi\":3.00000000}", str); [EOL] }
public void testBigDecimalAsPlainString() throws Exception { [EOL]     MAPPER.enable(SerializationFeature.WRITE_BIGDECIMAL_AS_PLAIN); [EOL]     Map<String, Object> map = new HashMap<String, Object>(); [EOL]     String PI_STR = "3.00000000"; [EOL]     map.put("pi", new BigDecimal(PI_STR)); [EOL]     String str = MAPPER.writeValueAsString(map); [EOL]     assertEquals("{\"pi\":3.00000000}", str); [EOL] }
public void testBigDecimalAsPlainString() throws Exception { [EOL]     MAPPER.enable(SerializationFeature.WRITE_BIGDECIMAL_AS_PLAIN); [EOL]     Map<String, Object> map = new HashMap<String, Object>(); [EOL]     String PI_STR = "3.00000000"; [EOL]     map.put("pi", new BigDecimal(PI_STR)); [EOL]     String str = MAPPER.writeValueAsString(map); [EOL]     assertEquals("{\"pi\":3.00000000}", str); [EOL] }
public void testBigDecimalAsPlainString() throws Exception { [EOL]     MAPPER.enable(SerializationFeature.WRITE_BIGDECIMAL_AS_PLAIN); [EOL]     Map<String, Object> map = new HashMap<String, Object>(); [EOL]     String PI_STR = "3.00000000"; [EOL]     map.put("pi", new BigDecimal(PI_STR)); [EOL]     String str = MAPPER.writeValueAsString(map); [EOL]     assertEquals("{\"pi\":3.00000000}", str); [EOL] }
public void testBigDecimalAsPlainString() throws Exception { [EOL]     MAPPER.enable(SerializationFeature.WRITE_BIGDECIMAL_AS_PLAIN); [EOL]     Map<String, Object> map = new HashMap<String, Object>(); [EOL]     String PI_STR = "3.00000000"; [EOL]     map.put("pi", new BigDecimal(PI_STR)); [EOL]     String str = MAPPER.writeValueAsString(map); [EOL]     assertEquals("{\"pi\":3.00000000}", str); [EOL] }
public void testBigDecimalAsPlainString() throws Exception { [EOL]     MAPPER.enable(SerializationFeature.WRITE_BIGDECIMAL_AS_PLAIN); [EOL]     Map<String, Object> map = new HashMap<String, Object>(); [EOL]     String PI_STR = "3.00000000"; [EOL]     map.put("pi", new BigDecimal(PI_STR)); [EOL]     String str = MAPPER.writeValueAsString(map); [EOL]     assertEquals("{\"pi\":3.00000000}", str); [EOL] }
public void testBigDecimalAsPlainString() throws Exception { [EOL]     MAPPER.enable(SerializationFeature.WRITE_BIGDECIMAL_AS_PLAIN); [EOL]     Map<String, Object> map = new HashMap<String, Object>(); [EOL]     String PI_STR = "3.00000000"; [EOL]     map.put("pi", new BigDecimal(PI_STR)); [EOL]     String str = MAPPER.writeValueAsString(map); [EOL]     assertEquals("{\"pi\":3.00000000}", str); [EOL] }
public void testBigDecimalAsPlainString() throws Exception { [EOL]     MAPPER.enable(SerializationFeature.WRITE_BIGDECIMAL_AS_PLAIN); [EOL]     Map<String, Object> map = new HashMap<String, Object>(); [EOL]     String PI_STR = "3.00000000"; [EOL]     map.put("pi", new BigDecimal(PI_STR)); [EOL]     String str = MAPPER.writeValueAsString(map); [EOL]     assertEquals("{\"pi\":3.00000000}", str); [EOL] }
public void testSimpleUnwrappingSerialize() throws Exception { [EOL]     assertEquals("{\"name\":\"Tatu\",\"x\":1,\"y\":2}", mapper.writeValueAsString(new Unwrapping("Tatu", 1, 2))); [EOL] }
public void testSimpleUnwrappingSerialize() throws Exception { [EOL]     assertEquals("{\"name\":\"Tatu\",\"x\":1,\"y\":2}", mapper.writeValueAsString(new Unwrapping("Tatu", 1, 2))); [EOL] }
public void testSimpleUnwrappingSerialize() throws Exception { [EOL]     assertEquals("{\"name\":\"Tatu\",\"x\":1,\"y\":2}", mapper.writeValueAsString(new Unwrapping("Tatu", 1, 2))); [EOL] }
public void testSimpleUnwrappingSerialize() throws Exception { [EOL]     assertEquals("{\"name\":\"Tatu\",\"x\":1,\"y\":2}", mapper.writeValueAsString(new Unwrapping("Tatu", 1, 2))); [EOL] }
public void testSimpleUnwrappingSerialize() throws Exception { [EOL]     assertEquals("{\"name\":\"Tatu\",\"x\":1,\"y\":2}", mapper.writeValueAsString(new Unwrapping("Tatu", 1, 2))); [EOL] }
public void testSimpleUnwrappingSerialize() throws Exception { [EOL]     assertEquals("{\"name\":\"Tatu\",\"x\":1,\"y\":2}", mapper.writeValueAsString(new Unwrapping("Tatu", 1, 2))); [EOL] }
public void testMethodAnnotationInArray() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     SimpleModule module = new SimpleModule("test", Version.unknownVersion()); [EOL]     module.addSerializer(String.class, new AnnotatedContextualSerializer()); [EOL]     mapper.registerModule(module); [EOL]     ContextualArrayBean beans = new ContextualArrayBean("123"); [EOL]     assertEquals("{\"beans\":[\"array->123\"]}", mapper.writeValueAsString(beans)); [EOL] }
public void testMethodAnnotationInArray() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     SimpleModule module = new SimpleModule("test", Version.unknownVersion()); [EOL]     module.addSerializer(String.class, new AnnotatedContextualSerializer()); [EOL]     mapper.registerModule(module); [EOL]     ContextualArrayBean beans = new ContextualArrayBean("123"); [EOL]     assertEquals("{\"beans\":[\"array->123\"]}", mapper.writeValueAsString(beans)); [EOL] }
public void testMethodAnnotationInArray() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     SimpleModule module = new SimpleModule("test", Version.unknownVersion()); [EOL]     module.addSerializer(String.class, new AnnotatedContextualSerializer()); [EOL]     mapper.registerModule(module); [EOL]     ContextualArrayBean beans = new ContextualArrayBean("123"); [EOL]     assertEquals("{\"beans\":[\"array->123\"]}", mapper.writeValueAsString(beans)); [EOL] }
public void testMethodAnnotationInArray() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     SimpleModule module = new SimpleModule("test", Version.unknownVersion()); [EOL]     module.addSerializer(String.class, new AnnotatedContextualSerializer()); [EOL]     mapper.registerModule(module); [EOL]     ContextualArrayBean beans = new ContextualArrayBean("123"); [EOL]     assertEquals("{\"beans\":[\"array->123\"]}", mapper.writeValueAsString(beans)); [EOL] }
public void testMethodAnnotationInArray() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     SimpleModule module = new SimpleModule("test", Version.unknownVersion()); [EOL]     module.addSerializer(String.class, new AnnotatedContextualSerializer()); [EOL]     mapper.registerModule(module); [EOL]     ContextualArrayBean beans = new ContextualArrayBean("123"); [EOL]     assertEquals("{\"beans\":[\"array->123\"]}", mapper.writeValueAsString(beans)); [EOL] }
public void testMethodAnnotationInArray() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     SimpleModule module = new SimpleModule("test", Version.unknownVersion()); [EOL]     module.addSerializer(String.class, new AnnotatedContextualSerializer()); [EOL]     mapper.registerModule(module); [EOL]     ContextualArrayBean beans = new ContextualArrayBean("123"); [EOL]     assertEquals("{\"beans\":[\"array->123\"]}", mapper.writeValueAsString(beans)); [EOL] }
public void testMethodAnnotationInArray() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     SimpleModule module = new SimpleModule("test", Version.unknownVersion()); [EOL]     module.addSerializer(String.class, new AnnotatedContextualSerializer()); [EOL]     mapper.registerModule(module); [EOL]     ContextualArrayBean beans = new ContextualArrayBean("123"); [EOL]     assertEquals("{\"beans\":[\"array->123\"]}", mapper.writeValueAsString(beans)); [EOL] }
public void testMethodAnnotationInArray() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     SimpleModule module = new SimpleModule("test", Version.unknownVersion()); [EOL]     module.addSerializer(String.class, new AnnotatedContextualSerializer()); [EOL]     mapper.registerModule(module); [EOL]     ContextualArrayBean beans = new ContextualArrayBean("123"); [EOL]     assertEquals("{\"beans\":[\"array->123\"]}", mapper.writeValueAsString(beans)); [EOL] }
public void testMethodAnnotationInArray() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     SimpleModule module = new SimpleModule("test", Version.unknownVersion()); [EOL]     module.addSerializer(String.class, new AnnotatedContextualSerializer()); [EOL]     mapper.registerModule(module); [EOL]     ContextualArrayBean beans = new ContextualArrayBean("123"); [EOL]     assertEquals("{\"beans\":[\"array->123\"]}", mapper.writeValueAsString(beans)); [EOL] }
public void testMethodAnnotationInArray() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     SimpleModule module = new SimpleModule("test", Version.unknownVersion()); [EOL]     module.addSerializer(String.class, new AnnotatedContextualSerializer()); [EOL]     mapper.registerModule(module); [EOL]     ContextualArrayBean beans = new ContextualArrayBean("123"); [EOL]     assertEquals("{\"beans\":[\"array->123\"]}", mapper.writeValueAsString(beans)); [EOL] }
public void testMethodAnnotationInArray() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     SimpleModule module = new SimpleModule("test", Version.unknownVersion()); [EOL]     module.addSerializer(String.class, new AnnotatedContextualSerializer()); [EOL]     mapper.registerModule(module); [EOL]     ContextualArrayBean beans = new ContextualArrayBean("123"); [EOL]     assertEquals("{\"beans\":[\"array->123\"]}", mapper.writeValueAsString(beans)); [EOL] }
public void testMethodAnnotationInArray() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     SimpleModule module = new SimpleModule("test", Version.unknownVersion()); [EOL]     module.addSerializer(String.class, new AnnotatedContextualSerializer()); [EOL]     mapper.registerModule(module); [EOL]     ContextualArrayBean beans = new ContextualArrayBean("123"); [EOL]     assertEquals("{\"beans\":[\"array->123\"]}", mapper.writeValueAsString(beans)); [EOL] }
public void testMethodAnnotationInArray() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     SimpleModule module = new SimpleModule("test", Version.unknownVersion()); [EOL]     module.addSerializer(String.class, new AnnotatedContextualSerializer()); [EOL]     mapper.registerModule(module); [EOL]     ContextualArrayBean beans = new ContextualArrayBean("123"); [EOL]     assertEquals("{\"beans\":[\"array->123\"]}", mapper.writeValueAsString(beans)); [EOL] }
public void testMethodAnnotationInArray() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     SimpleModule module = new SimpleModule("test", Version.unknownVersion()); [EOL]     module.addSerializer(String.class, new AnnotatedContextualSerializer()); [EOL]     mapper.registerModule(module); [EOL]     ContextualArrayBean beans = new ContextualArrayBean("123"); [EOL]     assertEquals("{\"beans\":[\"array->123\"]}", mapper.writeValueAsString(beans)); [EOL] }
public void testSimple() throws Exception { [EOL]     final String JSON = SAMPLE_DOC_JSON_SPEC; [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     for (int type = 0; type < 2; ++type) { [EOL]         JsonNode result; [EOL]         if (type == 0) { [EOL]             result = mapper.readTree(new StringReader(JSON)); [EOL]         } else { [EOL]             result = mapper.readTree(JSON); [EOL]         } [EOL]         assertType(result, ObjectNode.class); [EOL]         assertEquals(1, result.size()); [EOL]         assertTrue(result.isObject()); [EOL]         ObjectNode main = (ObjectNode) result; [EOL]         assertEquals("Image", main.fieldNames().next()); [EOL]         JsonNode ob = main.elements().next(); [EOL]         assertType(ob, ObjectNode.class); [EOL]         ObjectNode imageMap = (ObjectNode) ob; [EOL]         assertEquals(5, imageMap.size()); [EOL]         ob = imageMap.get("Width"); [EOL]         assertTrue(ob.isIntegralNumber()); [EOL]         assertFalse(ob.isFloatingPointNumber()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_WIDTH, ob.intValue()); [EOL]         ob = imageMap.get("Height"); [EOL]         assertTrue(ob.isIntegralNumber()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_HEIGHT, ob.intValue()); [EOL]         ob = imageMap.get("Title"); [EOL]         assertTrue(ob.isTextual()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_TITLE, ob.textValue()); [EOL]         ob = imageMap.get("Thumbnail"); [EOL]         assertType(ob, ObjectNode.class); [EOL]         ObjectNode tn = (ObjectNode) ob; [EOL]         ob = tn.get("Url"); [EOL]         assertTrue(ob.isTextual()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_TN_URL, ob.textValue()); [EOL]         ob = tn.get("Height"); [EOL]         assertTrue(ob.isIntegralNumber()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_TN_HEIGHT, ob.intValue()); [EOL]         ob = tn.get("Width"); [EOL]         assertTrue(ob.isTextual()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_TN_WIDTH, ob.textValue()); [EOL]         ob = imageMap.get("IDs"); [EOL]         assertTrue(ob.isArray()); [EOL]         ArrayNode idList = (ArrayNode) ob; [EOL]         assertEquals(4, idList.size()); [EOL]         assertEquals(4, calcLength(idList.elements())); [EOL]         assertEquals(4, calcLength(idList.iterator())); [EOL]         { [EOL]             int[] values = new int[] { SAMPLE_SPEC_VALUE_TN_ID1, SAMPLE_SPEC_VALUE_TN_ID2, SAMPLE_SPEC_VALUE_TN_ID3, SAMPLE_SPEC_VALUE_TN_ID4 }; [EOL]             for (int i = 0; i < values.length; ++i) { [EOL]                 assertEquals(values[i], idList.get(i).intValue()); [EOL]             } [EOL]             int i = 0; [EOL]             for (JsonNode n : idList) { [EOL]                 assertEquals(values[i], n.intValue()); [EOL]                 ++i; [EOL]             } [EOL]         } [EOL]     } [EOL] }
public void testSimple() throws Exception { [EOL]     final String JSON = SAMPLE_DOC_JSON_SPEC; [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     for (int type = 0; type < 2; ++type) { [EOL]         JsonNode result; [EOL]         if (type == 0) { [EOL]             result = mapper.readTree(new StringReader(JSON)); [EOL]         } else { [EOL]             result = mapper.readTree(JSON); [EOL]         } [EOL]         assertType(result, ObjectNode.class); [EOL]         assertEquals(1, result.size()); [EOL]         assertTrue(result.isObject()); [EOL]         ObjectNode main = (ObjectNode) result; [EOL]         assertEquals("Image", main.fieldNames().next()); [EOL]         JsonNode ob = main.elements().next(); [EOL]         assertType(ob, ObjectNode.class); [EOL]         ObjectNode imageMap = (ObjectNode) ob; [EOL]         assertEquals(5, imageMap.size()); [EOL]         ob = imageMap.get("Width"); [EOL]         assertTrue(ob.isIntegralNumber()); [EOL]         assertFalse(ob.isFloatingPointNumber()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_WIDTH, ob.intValue()); [EOL]         ob = imageMap.get("Height"); [EOL]         assertTrue(ob.isIntegralNumber()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_HEIGHT, ob.intValue()); [EOL]         ob = imageMap.get("Title"); [EOL]         assertTrue(ob.isTextual()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_TITLE, ob.textValue()); [EOL]         ob = imageMap.get("Thumbnail"); [EOL]         assertType(ob, ObjectNode.class); [EOL]         ObjectNode tn = (ObjectNode) ob; [EOL]         ob = tn.get("Url"); [EOL]         assertTrue(ob.isTextual()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_TN_URL, ob.textValue()); [EOL]         ob = tn.get("Height"); [EOL]         assertTrue(ob.isIntegralNumber()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_TN_HEIGHT, ob.intValue()); [EOL]         ob = tn.get("Width"); [EOL]         assertTrue(ob.isTextual()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_TN_WIDTH, ob.textValue()); [EOL]         ob = imageMap.get("IDs"); [EOL]         assertTrue(ob.isArray()); [EOL]         ArrayNode idList = (ArrayNode) ob; [EOL]         assertEquals(4, idList.size()); [EOL]         assertEquals(4, calcLength(idList.elements())); [EOL]         assertEquals(4, calcLength(idList.iterator())); [EOL]         { [EOL]             int[] values = new int[] { SAMPLE_SPEC_VALUE_TN_ID1, SAMPLE_SPEC_VALUE_TN_ID2, SAMPLE_SPEC_VALUE_TN_ID3, SAMPLE_SPEC_VALUE_TN_ID4 }; [EOL]             for (int i = 0; i < values.length; ++i) { [EOL]                 assertEquals(values[i], idList.get(i).intValue()); [EOL]             } [EOL]             int i = 0; [EOL]             for (JsonNode n : idList) { [EOL]                 assertEquals(values[i], n.intValue()); [EOL]                 ++i; [EOL]             } [EOL]         } [EOL]     } [EOL] }
public void testSimple() throws Exception { [EOL]     final String JSON = SAMPLE_DOC_JSON_SPEC; [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     for (int type = 0; type < 2; ++type) { [EOL]         JsonNode result; [EOL]         if (type == 0) { [EOL]             result = mapper.readTree(new StringReader(JSON)); [EOL]         } else { [EOL]             result = mapper.readTree(JSON); [EOL]         } [EOL]         assertType(result, ObjectNode.class); [EOL]         assertEquals(1, result.size()); [EOL]         assertTrue(result.isObject()); [EOL]         ObjectNode main = (ObjectNode) result; [EOL]         assertEquals("Image", main.fieldNames().next()); [EOL]         JsonNode ob = main.elements().next(); [EOL]         assertType(ob, ObjectNode.class); [EOL]         ObjectNode imageMap = (ObjectNode) ob; [EOL]         assertEquals(5, imageMap.size()); [EOL]         ob = imageMap.get("Width"); [EOL]         assertTrue(ob.isIntegralNumber()); [EOL]         assertFalse(ob.isFloatingPointNumber()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_WIDTH, ob.intValue()); [EOL]         ob = imageMap.get("Height"); [EOL]         assertTrue(ob.isIntegralNumber()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_HEIGHT, ob.intValue()); [EOL]         ob = imageMap.get("Title"); [EOL]         assertTrue(ob.isTextual()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_TITLE, ob.textValue()); [EOL]         ob = imageMap.get("Thumbnail"); [EOL]         assertType(ob, ObjectNode.class); [EOL]         ObjectNode tn = (ObjectNode) ob; [EOL]         ob = tn.get("Url"); [EOL]         assertTrue(ob.isTextual()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_TN_URL, ob.textValue()); [EOL]         ob = tn.get("Height"); [EOL]         assertTrue(ob.isIntegralNumber()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_TN_HEIGHT, ob.intValue()); [EOL]         ob = tn.get("Width"); [EOL]         assertTrue(ob.isTextual()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_TN_WIDTH, ob.textValue()); [EOL]         ob = imageMap.get("IDs"); [EOL]         assertTrue(ob.isArray()); [EOL]         ArrayNode idList = (ArrayNode) ob; [EOL]         assertEquals(4, idList.size()); [EOL]         assertEquals(4, calcLength(idList.elements())); [EOL]         assertEquals(4, calcLength(idList.iterator())); [EOL]         { [EOL]             int[] values = new int[] { SAMPLE_SPEC_VALUE_TN_ID1, SAMPLE_SPEC_VALUE_TN_ID2, SAMPLE_SPEC_VALUE_TN_ID3, SAMPLE_SPEC_VALUE_TN_ID4 }; [EOL]             for (int i = 0; i < values.length; ++i) { [EOL]                 assertEquals(values[i], idList.get(i).intValue()); [EOL]             } [EOL]             int i = 0; [EOL]             for (JsonNode n : idList) { [EOL]                 assertEquals(values[i], n.intValue()); [EOL]                 ++i; [EOL]             } [EOL]         } [EOL]     } [EOL] }
public void testSimple() throws Exception { [EOL]     final String JSON = SAMPLE_DOC_JSON_SPEC; [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     for (int type = 0; type < 2; ++type) { [EOL]         JsonNode result; [EOL]         if (type == 0) { [EOL]             result = mapper.readTree(new StringReader(JSON)); [EOL]         } else { [EOL]             result = mapper.readTree(JSON); [EOL]         } [EOL]         assertType(result, ObjectNode.class); [EOL]         assertEquals(1, result.size()); [EOL]         assertTrue(result.isObject()); [EOL]         ObjectNode main = (ObjectNode) result; [EOL]         assertEquals("Image", main.fieldNames().next()); [EOL]         JsonNode ob = main.elements().next(); [EOL]         assertType(ob, ObjectNode.class); [EOL]         ObjectNode imageMap = (ObjectNode) ob; [EOL]         assertEquals(5, imageMap.size()); [EOL]         ob = imageMap.get("Width"); [EOL]         assertTrue(ob.isIntegralNumber()); [EOL]         assertFalse(ob.isFloatingPointNumber()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_WIDTH, ob.intValue()); [EOL]         ob = imageMap.get("Height"); [EOL]         assertTrue(ob.isIntegralNumber()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_HEIGHT, ob.intValue()); [EOL]         ob = imageMap.get("Title"); [EOL]         assertTrue(ob.isTextual()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_TITLE, ob.textValue()); [EOL]         ob = imageMap.get("Thumbnail"); [EOL]         assertType(ob, ObjectNode.class); [EOL]         ObjectNode tn = (ObjectNode) ob; [EOL]         ob = tn.get("Url"); [EOL]         assertTrue(ob.isTextual()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_TN_URL, ob.textValue()); [EOL]         ob = tn.get("Height"); [EOL]         assertTrue(ob.isIntegralNumber()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_TN_HEIGHT, ob.intValue()); [EOL]         ob = tn.get("Width"); [EOL]         assertTrue(ob.isTextual()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_TN_WIDTH, ob.textValue()); [EOL]         ob = imageMap.get("IDs"); [EOL]         assertTrue(ob.isArray()); [EOL]         ArrayNode idList = (ArrayNode) ob; [EOL]         assertEquals(4, idList.size()); [EOL]         assertEquals(4, calcLength(idList.elements())); [EOL]         assertEquals(4, calcLength(idList.iterator())); [EOL]         { [EOL]             int[] values = new int[] { SAMPLE_SPEC_VALUE_TN_ID1, SAMPLE_SPEC_VALUE_TN_ID2, SAMPLE_SPEC_VALUE_TN_ID3, SAMPLE_SPEC_VALUE_TN_ID4 }; [EOL]             for (int i = 0; i < values.length; ++i) { [EOL]                 assertEquals(values[i], idList.get(i).intValue()); [EOL]             } [EOL]             int i = 0; [EOL]             for (JsonNode n : idList) { [EOL]                 assertEquals(values[i], n.intValue()); [EOL]                 ++i; [EOL]             } [EOL]         } [EOL]     } [EOL] }
public void testSimple() throws Exception { [EOL]     final String JSON = SAMPLE_DOC_JSON_SPEC; [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     for (int type = 0; type < 2; ++type) { [EOL]         JsonNode result; [EOL]         if (type == 0) { [EOL]             result = mapper.readTree(new StringReader(JSON)); [EOL]         } else { [EOL]             result = mapper.readTree(JSON); [EOL]         } [EOL]         assertType(result, ObjectNode.class); [EOL]         assertEquals(1, result.size()); [EOL]         assertTrue(result.isObject()); [EOL]         ObjectNode main = (ObjectNode) result; [EOL]         assertEquals("Image", main.fieldNames().next()); [EOL]         JsonNode ob = main.elements().next(); [EOL]         assertType(ob, ObjectNode.class); [EOL]         ObjectNode imageMap = (ObjectNode) ob; [EOL]         assertEquals(5, imageMap.size()); [EOL]         ob = imageMap.get("Width"); [EOL]         assertTrue(ob.isIntegralNumber()); [EOL]         assertFalse(ob.isFloatingPointNumber()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_WIDTH, ob.intValue()); [EOL]         ob = imageMap.get("Height"); [EOL]         assertTrue(ob.isIntegralNumber()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_HEIGHT, ob.intValue()); [EOL]         ob = imageMap.get("Title"); [EOL]         assertTrue(ob.isTextual()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_TITLE, ob.textValue()); [EOL]         ob = imageMap.get("Thumbnail"); [EOL]         assertType(ob, ObjectNode.class); [EOL]         ObjectNode tn = (ObjectNode) ob; [EOL]         ob = tn.get("Url"); [EOL]         assertTrue(ob.isTextual()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_TN_URL, ob.textValue()); [EOL]         ob = tn.get("Height"); [EOL]         assertTrue(ob.isIntegralNumber()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_TN_HEIGHT, ob.intValue()); [EOL]         ob = tn.get("Width"); [EOL]         assertTrue(ob.isTextual()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_TN_WIDTH, ob.textValue()); [EOL]         ob = imageMap.get("IDs"); [EOL]         assertTrue(ob.isArray()); [EOL]         ArrayNode idList = (ArrayNode) ob; [EOL]         assertEquals(4, idList.size()); [EOL]         assertEquals(4, calcLength(idList.elements())); [EOL]         assertEquals(4, calcLength(idList.iterator())); [EOL]         { [EOL]             int[] values = new int[] { SAMPLE_SPEC_VALUE_TN_ID1, SAMPLE_SPEC_VALUE_TN_ID2, SAMPLE_SPEC_VALUE_TN_ID3, SAMPLE_SPEC_VALUE_TN_ID4 }; [EOL]             for (int i = 0; i < values.length; ++i) { [EOL]                 assertEquals(values[i], idList.get(i).intValue()); [EOL]             } [EOL]             int i = 0; [EOL]             for (JsonNode n : idList) { [EOL]                 assertEquals(values[i], n.intValue()); [EOL]                 ++i; [EOL]             } [EOL]         } [EOL]     } [EOL] }
public void testSimple() throws Exception { [EOL]     final String JSON = SAMPLE_DOC_JSON_SPEC; [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     for (int type = 0; type < 2; ++type) { [EOL]         JsonNode result; [EOL]         if (type == 0) { [EOL]             result = mapper.readTree(new StringReader(JSON)); [EOL]         } else { [EOL]             result = mapper.readTree(JSON); [EOL]         } [EOL]         assertType(result, ObjectNode.class); [EOL]         assertEquals(1, result.size()); [EOL]         assertTrue(result.isObject()); [EOL]         ObjectNode main = (ObjectNode) result; [EOL]         assertEquals("Image", main.fieldNames().next()); [EOL]         JsonNode ob = main.elements().next(); [EOL]         assertType(ob, ObjectNode.class); [EOL]         ObjectNode imageMap = (ObjectNode) ob; [EOL]         assertEquals(5, imageMap.size()); [EOL]         ob = imageMap.get("Width"); [EOL]         assertTrue(ob.isIntegralNumber()); [EOL]         assertFalse(ob.isFloatingPointNumber()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_WIDTH, ob.intValue()); [EOL]         ob = imageMap.get("Height"); [EOL]         assertTrue(ob.isIntegralNumber()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_HEIGHT, ob.intValue()); [EOL]         ob = imageMap.get("Title"); [EOL]         assertTrue(ob.isTextual()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_TITLE, ob.textValue()); [EOL]         ob = imageMap.get("Thumbnail"); [EOL]         assertType(ob, ObjectNode.class); [EOL]         ObjectNode tn = (ObjectNode) ob; [EOL]         ob = tn.get("Url"); [EOL]         assertTrue(ob.isTextual()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_TN_URL, ob.textValue()); [EOL]         ob = tn.get("Height"); [EOL]         assertTrue(ob.isIntegralNumber()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_TN_HEIGHT, ob.intValue()); [EOL]         ob = tn.get("Width"); [EOL]         assertTrue(ob.isTextual()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_TN_WIDTH, ob.textValue()); [EOL]         ob = imageMap.get("IDs"); [EOL]         assertTrue(ob.isArray()); [EOL]         ArrayNode idList = (ArrayNode) ob; [EOL]         assertEquals(4, idList.size()); [EOL]         assertEquals(4, calcLength(idList.elements())); [EOL]         assertEquals(4, calcLength(idList.iterator())); [EOL]         { [EOL]             int[] values = new int[] { SAMPLE_SPEC_VALUE_TN_ID1, SAMPLE_SPEC_VALUE_TN_ID2, SAMPLE_SPEC_VALUE_TN_ID3, SAMPLE_SPEC_VALUE_TN_ID4 }; [EOL]             for (int i = 0; i < values.length; ++i) { [EOL]                 assertEquals(values[i], idList.get(i).intValue()); [EOL]             } [EOL]             int i = 0; [EOL]             for (JsonNode n : idList) { [EOL]                 assertEquals(values[i], n.intValue()); [EOL]                 ++i; [EOL]             } [EOL]         } [EOL]     } [EOL] }
public void testSimple() throws Exception { [EOL]     final String JSON = SAMPLE_DOC_JSON_SPEC; [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     for (int type = 0; type < 2; ++type) { [EOL]         JsonNode result; [EOL]         if (type == 0) { [EOL]             result = mapper.readTree(new StringReader(JSON)); [EOL]         } else { [EOL]             result = mapper.readTree(JSON); [EOL]         } [EOL]         assertType(result, ObjectNode.class); [EOL]         assertEquals(1, result.size()); [EOL]         assertTrue(result.isObject()); [EOL]         ObjectNode main = (ObjectNode) result; [EOL]         assertEquals("Image", main.fieldNames().next()); [EOL]         JsonNode ob = main.elements().next(); [EOL]         assertType(ob, ObjectNode.class); [EOL]         ObjectNode imageMap = (ObjectNode) ob; [EOL]         assertEquals(5, imageMap.size()); [EOL]         ob = imageMap.get("Width"); [EOL]         assertTrue(ob.isIntegralNumber()); [EOL]         assertFalse(ob.isFloatingPointNumber()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_WIDTH, ob.intValue()); [EOL]         ob = imageMap.get("Height"); [EOL]         assertTrue(ob.isIntegralNumber()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_HEIGHT, ob.intValue()); [EOL]         ob = imageMap.get("Title"); [EOL]         assertTrue(ob.isTextual()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_TITLE, ob.textValue()); [EOL]         ob = imageMap.get("Thumbnail"); [EOL]         assertType(ob, ObjectNode.class); [EOL]         ObjectNode tn = (ObjectNode) ob; [EOL]         ob = tn.get("Url"); [EOL]         assertTrue(ob.isTextual()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_TN_URL, ob.textValue()); [EOL]         ob = tn.get("Height"); [EOL]         assertTrue(ob.isIntegralNumber()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_TN_HEIGHT, ob.intValue()); [EOL]         ob = tn.get("Width"); [EOL]         assertTrue(ob.isTextual()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_TN_WIDTH, ob.textValue()); [EOL]         ob = imageMap.get("IDs"); [EOL]         assertTrue(ob.isArray()); [EOL]         ArrayNode idList = (ArrayNode) ob; [EOL]         assertEquals(4, idList.size()); [EOL]         assertEquals(4, calcLength(idList.elements())); [EOL]         assertEquals(4, calcLength(idList.iterator())); [EOL]         { [EOL]             int[] values = new int[] { SAMPLE_SPEC_VALUE_TN_ID1, SAMPLE_SPEC_VALUE_TN_ID2, SAMPLE_SPEC_VALUE_TN_ID3, SAMPLE_SPEC_VALUE_TN_ID4 }; [EOL]             for (int i = 0; i < values.length; ++i) { [EOL]                 assertEquals(values[i], idList.get(i).intValue()); [EOL]             } [EOL]             int i = 0; [EOL]             for (JsonNode n : idList) { [EOL]                 assertEquals(values[i], n.intValue()); [EOL]                 ++i; [EOL]             } [EOL]         } [EOL]     } [EOL] }
public void testBase64Text() throws Exception { [EOL]     final int[] LENS = { 1, 2, 3, 4, 7, 9, 32, 33, 34, 35 }; [EOL]     final Base64Variant[] VARIANTS = { Base64Variants.MIME, Base64Variants.MIME_NO_LINEFEEDS, Base64Variants.MODIFIED_FOR_URL, Base64Variants.PEM }; [EOL]     for (int len : LENS) { [EOL]         byte[] input = new byte[len]; [EOL]         for (int i = 0; i < input.length; ++i) { [EOL]             input[i] = (byte) i; [EOL]         } [EOL]         for (Base64Variant variant : VARIANTS) { [EOL]             TextNode n = new TextNode(variant.encode(input)); [EOL]             byte[] data = null; [EOL]             try { [EOL]                 data = n.getBinaryValue(variant); [EOL]             } catch (Exception e) { [EOL]                 throw new IOException("Failed (variant " + variant + ", data length " + len + "): " + e.getMessage()); [EOL]             } [EOL]             assertNotNull(data); [EOL]             assertArrayEquals(data, input); [EOL]         } [EOL]     } [EOL] }
public void testBase64Text() throws Exception { [EOL]     final int[] LENS = { 1, 2, 3, 4, 7, 9, 32, 33, 34, 35 }; [EOL]     final Base64Variant[] VARIANTS = { Base64Variants.MIME, Base64Variants.MIME_NO_LINEFEEDS, Base64Variants.MODIFIED_FOR_URL, Base64Variants.PEM }; [EOL]     for (int len : LENS) { [EOL]         byte[] input = new byte[len]; [EOL]         for (int i = 0; i < input.length; ++i) { [EOL]             input[i] = (byte) i; [EOL]         } [EOL]         for (Base64Variant variant : VARIANTS) { [EOL]             TextNode n = new TextNode(variant.encode(input)); [EOL]             byte[] data = null; [EOL]             try { [EOL]                 data = n.getBinaryValue(variant); [EOL]             } catch (Exception e) { [EOL]                 throw new IOException("Failed (variant " + variant + ", data length " + len + "): " + e.getMessage()); [EOL]             } [EOL]             assertNotNull(data); [EOL]             assertArrayEquals(data, input); [EOL]         } [EOL]     } [EOL] }
public void testBase64Text() throws Exception { [EOL]     final int[] LENS = { 1, 2, 3, 4, 7, 9, 32, 33, 34, 35 }; [EOL]     final Base64Variant[] VARIANTS = { Base64Variants.MIME, Base64Variants.MIME_NO_LINEFEEDS, Base64Variants.MODIFIED_FOR_URL, Base64Variants.PEM }; [EOL]     for (int len : LENS) { [EOL]         byte[] input = new byte[len]; [EOL]         for (int i = 0; i < input.length; ++i) { [EOL]             input[i] = (byte) i; [EOL]         } [EOL]         for (Base64Variant variant : VARIANTS) { [EOL]             TextNode n = new TextNode(variant.encode(input)); [EOL]             byte[] data = null; [EOL]             try { [EOL]                 data = n.getBinaryValue(variant); [EOL]             } catch (Exception e) { [EOL]                 throw new IOException("Failed (variant " + variant + ", data length " + len + "): " + e.getMessage()); [EOL]             } [EOL]             assertNotNull(data); [EOL]             assertArrayEquals(data, input); [EOL]         } [EOL]     } [EOL] }
public void testBase64Text() throws Exception { [EOL]     final int[] LENS = { 1, 2, 3, 4, 7, 9, 32, 33, 34, 35 }; [EOL]     final Base64Variant[] VARIANTS = { Base64Variants.MIME, Base64Variants.MIME_NO_LINEFEEDS, Base64Variants.MODIFIED_FOR_URL, Base64Variants.PEM }; [EOL]     for (int len : LENS) { [EOL]         byte[] input = new byte[len]; [EOL]         for (int i = 0; i < input.length; ++i) { [EOL]             input[i] = (byte) i; [EOL]         } [EOL]         for (Base64Variant variant : VARIANTS) { [EOL]             TextNode n = new TextNode(variant.encode(input)); [EOL]             byte[] data = null; [EOL]             try { [EOL]                 data = n.getBinaryValue(variant); [EOL]             } catch (Exception e) { [EOL]                 throw new IOException("Failed (variant " + variant + ", data length " + len + "): " + e.getMessage()); [EOL]             } [EOL]             assertNotNull(data); [EOL]             assertArrayEquals(data, input); [EOL]         } [EOL]     } [EOL] }
public void testBase64Text() throws Exception { [EOL]     final int[] LENS = { 1, 2, 3, 4, 7, 9, 32, 33, 34, 35 }; [EOL]     final Base64Variant[] VARIANTS = { Base64Variants.MIME, Base64Variants.MIME_NO_LINEFEEDS, Base64Variants.MODIFIED_FOR_URL, Base64Variants.PEM }; [EOL]     for (int len : LENS) { [EOL]         byte[] input = new byte[len]; [EOL]         for (int i = 0; i < input.length; ++i) { [EOL]             input[i] = (byte) i; [EOL]         } [EOL]         for (Base64Variant variant : VARIANTS) { [EOL]             TextNode n = new TextNode(variant.encode(input)); [EOL]             byte[] data = null; [EOL]             try { [EOL]                 data = n.getBinaryValue(variant); [EOL]             } catch (Exception e) { [EOL]                 throw new IOException("Failed (variant " + variant + ", data length " + len + "): " + e.getMessage()); [EOL]             } [EOL]             assertNotNull(data); [EOL]             assertArrayEquals(data, input); [EOL]         } [EOL]     } [EOL] }
public void testReadFromString() throws Exception { [EOL]     String json = "{\"field\":\"{\\\"name\\\":\\\"John Smith\\\"}\"}"; [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     JsonNode jNode = mapper.readValue(json, JsonNode.class); [EOL]     String generated = mapper.writeValueAsString(jNode); [EOL]     JsonNode out = mapper.readValue(generated, JsonNode.class); [EOL]     assertTrue(out.isObject()); [EOL]     assertEquals(1, out.size()); [EOL]     String value = out.path("field").asText(); [EOL]     assertNotNull(value); [EOL] }
public void testReadFromString() throws Exception { [EOL]     String json = "{\"field\":\"{\\\"name\\\":\\\"John Smith\\\"}\"}"; [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     JsonNode jNode = mapper.readValue(json, JsonNode.class); [EOL]     String generated = mapper.writeValueAsString(jNode); [EOL]     JsonNode out = mapper.readValue(generated, JsonNode.class); [EOL]     assertTrue(out.isObject()); [EOL]     assertEquals(1, out.size()); [EOL]     String value = out.path("field").asText(); [EOL]     assertNotNull(value); [EOL] }
public void testDeserializeSimple() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     JsonSchema schema = mapper.generateJsonSchema(Schemable.class); [EOL]     assertNotNull(schema); [EOL]     String schemaStr = mapper.writeValueAsString(schema); [EOL]     assertNotNull(schemaStr); [EOL]     JsonSchema result = mapper.readValue(schemaStr, JsonSchema.class); [EOL]     assertEquals("Trying to read from '" + schemaStr + "'", schema, result); [EOL] }
public void testClass() throws IOException { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     assertSame(String.class, mapper.readValue(quote("java.lang.String"), Class.class)); [EOL]     assertSame(Boolean.TYPE, mapper.readValue(quote("boolean"), Class.class)); [EOL]     assertSame(Byte.TYPE, mapper.readValue(quote("byte"), Class.class)); [EOL]     assertSame(Short.TYPE, mapper.readValue(quote("short"), Class.class)); [EOL]     assertSame(Character.TYPE, mapper.readValue(quote("char"), Class.class)); [EOL]     assertSame(Integer.TYPE, mapper.readValue(quote("int"), Class.class)); [EOL]     assertSame(Long.TYPE, mapper.readValue(quote("long"), Class.class)); [EOL]     assertSame(Float.TYPE, mapper.readValue(quote("float"), Class.class)); [EOL]     assertSame(Double.TYPE, mapper.readValue(quote("double"), Class.class)); [EOL]     assertSame(Void.TYPE, mapper.readValue(quote("void"), Class.class)); [EOL] }
public void testClass() throws IOException { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     assertSame(String.class, mapper.readValue(quote("java.lang.String"), Class.class)); [EOL]     assertSame(Boolean.TYPE, mapper.readValue(quote("boolean"), Class.class)); [EOL]     assertSame(Byte.TYPE, mapper.readValue(quote("byte"), Class.class)); [EOL]     assertSame(Short.TYPE, mapper.readValue(quote("short"), Class.class)); [EOL]     assertSame(Character.TYPE, mapper.readValue(quote("char"), Class.class)); [EOL]     assertSame(Integer.TYPE, mapper.readValue(quote("int"), Class.class)); [EOL]     assertSame(Long.TYPE, mapper.readValue(quote("long"), Class.class)); [EOL]     assertSame(Float.TYPE, mapper.readValue(quote("float"), Class.class)); [EOL]     assertSame(Double.TYPE, mapper.readValue(quote("double"), Class.class)); [EOL]     assertSame(Void.TYPE, mapper.readValue(quote("void"), Class.class)); [EOL] }
public void testClass() throws IOException { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     assertSame(String.class, mapper.readValue(quote("java.lang.String"), Class.class)); [EOL]     assertSame(Boolean.TYPE, mapper.readValue(quote("boolean"), Class.class)); [EOL]     assertSame(Byte.TYPE, mapper.readValue(quote("byte"), Class.class)); [EOL]     assertSame(Short.TYPE, mapper.readValue(quote("short"), Class.class)); [EOL]     assertSame(Character.TYPE, mapper.readValue(quote("char"), Class.class)); [EOL]     assertSame(Integer.TYPE, mapper.readValue(quote("int"), Class.class)); [EOL]     assertSame(Long.TYPE, mapper.readValue(quote("long"), Class.class)); [EOL]     assertSame(Float.TYPE, mapper.readValue(quote("float"), Class.class)); [EOL]     assertSame(Double.TYPE, mapper.readValue(quote("double"), Class.class)); [EOL]     assertSame(Void.TYPE, mapper.readValue(quote("void"), Class.class)); [EOL] }
public void testSimpleTyped() throws Exception { [EOL]     MapImitatorWithValue mapHolder = MAPPER.readValue("{ \"a\" : [ 3, -1 ], \"b\" : [ ] }", MapImitatorWithValue.class); [EOL]     Map<String, int[]> result = mapHolder._map; [EOL]     assertEquals(2, result.size()); [EOL]     assertEquals(new int[] { 3, -1 }, result.get("a")); [EOL]     assertEquals(new int[0], result.get("b")); [EOL] }
public void testSimpleTyped() throws Exception { [EOL]     MapImitatorWithValue mapHolder = MAPPER.readValue("{ \"a\" : [ 3, -1 ], \"b\" : [ ] }", MapImitatorWithValue.class); [EOL]     Map<String, int[]> result = mapHolder._map; [EOL]     assertEquals(2, result.size()); [EOL]     assertEquals(new int[] { 3, -1 }, result.get("a")); [EOL]     assertEquals(new int[0], result.get("b")); [EOL] }
public void testSimpleTyped() throws Exception { [EOL]     MapImitatorWithValue mapHolder = MAPPER.readValue("{ \"a\" : [ 3, -1 ], \"b\" : [ ] }", MapImitatorWithValue.class); [EOL]     Map<String, int[]> result = mapHolder._map; [EOL]     assertEquals(2, result.size()); [EOL]     assertEquals(new int[] { 3, -1 }, result.get("a")); [EOL]     assertEquals(new int[0], result.get("b")); [EOL] }
public void testSimpleTyped() throws Exception { [EOL]     MapImitatorWithValue mapHolder = MAPPER.readValue("{ \"a\" : [ 3, -1 ], \"b\" : [ ] }", MapImitatorWithValue.class); [EOL]     Map<String, int[]> result = mapHolder._map; [EOL]     assertEquals(2, result.size()); [EOL]     assertEquals(new int[] { 3, -1 }, result.get("a")); [EOL]     assertEquals(new int[0], result.get("b")); [EOL] }
public void testSimpleTyped() throws Exception { [EOL]     MapImitatorWithValue mapHolder = MAPPER.readValue("{ \"a\" : [ 3, -1 ], \"b\" : [ ] }", MapImitatorWithValue.class); [EOL]     Map<String, int[]> result = mapHolder._map; [EOL]     assertEquals(2, result.size()); [EOL]     assertEquals(new int[] { 3, -1 }, result.get("a")); [EOL]     assertEquals(new int[0], result.get("b")); [EOL] }
public void testSimpleTyped() throws Exception { [EOL]     MapImitatorWithValue mapHolder = MAPPER.readValue("{ \"a\" : [ 3, -1 ], \"b\" : [ ] }", MapImitatorWithValue.class); [EOL]     Map<String, int[]> result = mapHolder._map; [EOL]     assertEquals(2, result.size()); [EOL]     assertEquals(new int[] { 3, -1 }, result.get("a")); [EOL]     assertEquals(new int[0], result.get("b")); [EOL] }
public void testSimpleTyped() throws Exception { [EOL]     MapImitatorWithValue mapHolder = MAPPER.readValue("{ \"a\" : [ 3, -1 ], \"b\" : [ ] }", MapImitatorWithValue.class); [EOL]     Map<String, int[]> result = mapHolder._map; [EOL]     assertEquals(2, result.size()); [EOL]     assertEquals(new int[] { 3, -1 }, result.get("a")); [EOL]     assertEquals(new int[0], result.get("b")); [EOL] }
public void testSimpleTyped() throws Exception { [EOL]     MapImitatorWithValue mapHolder = MAPPER.readValue("{ \"a\" : [ 3, -1 ], \"b\" : [ ] }", MapImitatorWithValue.class); [EOL]     Map<String, int[]> result = mapHolder._map; [EOL]     assertEquals(2, result.size()); [EOL]     assertEquals(new int[] { 3, -1 }, result.get("a")); [EOL]     assertEquals(new int[0], result.get("b")); [EOL] }
public void testBeanToMap() { [EOL]     Bean bean = new Bean(); [EOL]     bean.A = 129; [EOL]     bean.B = "13"; [EOL]     EnumMap<AB, String> result = mapper.convertValue(bean, new TypeReference<EnumMap<AB, String>>() { [EOL]     }); [EOL]     assertEquals("129", result.get(AB.A)); [EOL]     assertEquals("13", result.get(AB.B)); [EOL] }
public void testSubtypesViaModule() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     SimpleModule module = new SimpleModule(); [EOL]     module.registerSubtypes(SubB.class, SubC.class, SubD.class); [EOL]     mapper.registerModule(module); [EOL]     String json = mapper.writeValueAsString(new PropertyBean(new SubC())); [EOL]     PropertyBean result = mapper.readValue(json, PropertyBean.class); [EOL]     assertSame(SubC.class, result.value.getClass()); [EOL] }
public void testMultipleModules() throws Exception { [EOL]     MySimpleModule mod1 = new MySimpleModule("test1", Version.unknownVersion()); [EOL]     SimpleModule mod2 = new SimpleModule("test2", Version.unknownVersion()); [EOL]     mod1.addSerializer(SimpleEnum.class, new SimpleEnumSerializer()); [EOL]     mod1.addDeserializer(CustomBean.class, new CustomBeanDeserializer()); [EOL]     mod2.addDeserializer(SimpleEnum.class, new SimpleEnumDeserializer()); [EOL]     mod2.addSerializer(CustomBean.class, new CustomBeanSerializer()); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerModule(mod1); [EOL]     mapper.registerModule(mod2); [EOL]     assertEquals(quote("b"), mapper.writeValueAsString(SimpleEnum.B)); [EOL]     SimpleEnum result = mapper.readValue(quote("a"), SimpleEnum.class); [EOL]     assertSame(SimpleEnum.A, result); [EOL]     mapper = new ObjectMapper(); [EOL]     mapper.registerModule(mod2); [EOL]     mapper.registerModule(mod1); [EOL]     assertEquals(quote("b"), mapper.writeValueAsString(SimpleEnum.B)); [EOL]     result = mapper.readValue(quote("a"), SimpleEnum.class); [EOL]     assertSame(SimpleEnum.A, result); [EOL] }
public void testMultipleModules() throws Exception { [EOL]     MySimpleModule mod1 = new MySimpleModule("test1", Version.unknownVersion()); [EOL]     SimpleModule mod2 = new SimpleModule("test2", Version.unknownVersion()); [EOL]     mod1.addSerializer(SimpleEnum.class, new SimpleEnumSerializer()); [EOL]     mod1.addDeserializer(CustomBean.class, new CustomBeanDeserializer()); [EOL]     mod2.addDeserializer(SimpleEnum.class, new SimpleEnumDeserializer()); [EOL]     mod2.addSerializer(CustomBean.class, new CustomBeanSerializer()); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerModule(mod1); [EOL]     mapper.registerModule(mod2); [EOL]     assertEquals(quote("b"), mapper.writeValueAsString(SimpleEnum.B)); [EOL]     SimpleEnum result = mapper.readValue(quote("a"), SimpleEnum.class); [EOL]     assertSame(SimpleEnum.A, result); [EOL]     mapper = new ObjectMapper(); [EOL]     mapper.registerModule(mod2); [EOL]     mapper.registerModule(mod1); [EOL]     assertEquals(quote("b"), mapper.writeValueAsString(SimpleEnum.B)); [EOL]     result = mapper.readValue(quote("a"), SimpleEnum.class); [EOL]     assertSame(SimpleEnum.A, result); [EOL] }
public void testMultipleModules() throws Exception { [EOL]     MySimpleModule mod1 = new MySimpleModule("test1", Version.unknownVersion()); [EOL]     SimpleModule mod2 = new SimpleModule("test2", Version.unknownVersion()); [EOL]     mod1.addSerializer(SimpleEnum.class, new SimpleEnumSerializer()); [EOL]     mod1.addDeserializer(CustomBean.class, new CustomBeanDeserializer()); [EOL]     mod2.addDeserializer(SimpleEnum.class, new SimpleEnumDeserializer()); [EOL]     mod2.addSerializer(CustomBean.class, new CustomBeanSerializer()); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerModule(mod1); [EOL]     mapper.registerModule(mod2); [EOL]     assertEquals(quote("b"), mapper.writeValueAsString(SimpleEnum.B)); [EOL]     SimpleEnum result = mapper.readValue(quote("a"), SimpleEnum.class); [EOL]     assertSame(SimpleEnum.A, result); [EOL]     mapper = new ObjectMapper(); [EOL]     mapper.registerModule(mod2); [EOL]     mapper.registerModule(mod1); [EOL]     assertEquals(quote("b"), mapper.writeValueAsString(SimpleEnum.B)); [EOL]     result = mapper.readValue(quote("a"), SimpleEnum.class); [EOL]     assertSame(SimpleEnum.A, result); [EOL] }
public void testMultipleModules() throws Exception { [EOL]     MySimpleModule mod1 = new MySimpleModule("test1", Version.unknownVersion()); [EOL]     SimpleModule mod2 = new SimpleModule("test2", Version.unknownVersion()); [EOL]     mod1.addSerializer(SimpleEnum.class, new SimpleEnumSerializer()); [EOL]     mod1.addDeserializer(CustomBean.class, new CustomBeanDeserializer()); [EOL]     mod2.addDeserializer(SimpleEnum.class, new SimpleEnumDeserializer()); [EOL]     mod2.addSerializer(CustomBean.class, new CustomBeanSerializer()); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerModule(mod1); [EOL]     mapper.registerModule(mod2); [EOL]     assertEquals(quote("b"), mapper.writeValueAsString(SimpleEnum.B)); [EOL]     SimpleEnum result = mapper.readValue(quote("a"), SimpleEnum.class); [EOL]     assertSame(SimpleEnum.A, result); [EOL]     mapper = new ObjectMapper(); [EOL]     mapper.registerModule(mod2); [EOL]     mapper.registerModule(mod1); [EOL]     assertEquals(quote("b"), mapper.writeValueAsString(SimpleEnum.B)); [EOL]     result = mapper.readValue(quote("a"), SimpleEnum.class); [EOL]     assertSame(SimpleEnum.A, result); [EOL] }
public void testSubtypesViaModule() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     SimpleModule module = new SimpleModule(); [EOL]     module.registerSubtypes(SubB.class, SubC.class, SubD.class); [EOL]     mapper.registerModule(module); [EOL]     String json = mapper.writeValueAsString(new PropertyBean(new SubC())); [EOL]     PropertyBean result = mapper.readValue(json, PropertyBean.class); [EOL]     assertSame(SubC.class, result.value.getClass()); [EOL] }
public void testSubtypesViaModule() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     SimpleModule module = new SimpleModule(); [EOL]     module.registerSubtypes(SubB.class, SubC.class, SubD.class); [EOL]     mapper.registerModule(module); [EOL]     String json = mapper.writeValueAsString(new PropertyBean(new SubC())); [EOL]     PropertyBean result = mapper.readValue(json, PropertyBean.class); [EOL]     assertSame(SubC.class, result.value.getClass()); [EOL] }
public void testSubtypesViaModule() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     SimpleModule module = new SimpleModule(); [EOL]     module.registerSubtypes(SubB.class, SubC.class, SubD.class); [EOL]     mapper.registerModule(module); [EOL]     String json = mapper.writeValueAsString(new PropertyBean(new SubC())); [EOL]     PropertyBean result = mapper.readValue(json, PropertyBean.class); [EOL]     assertSame(SubC.class, result.value.getClass()); [EOL] }
public void testSubtypesViaModule() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     SimpleModule module = new SimpleModule(); [EOL]     module.registerSubtypes(SubB.class, SubC.class, SubD.class); [EOL]     mapper.registerModule(module); [EOL]     String json = mapper.writeValueAsString(new PropertyBean(new SubC())); [EOL]     PropertyBean result = mapper.readValue(json, PropertyBean.class); [EOL]     assertSame(SubC.class, result.value.getClass()); [EOL] }
public void testMultipleModules() throws Exception { [EOL]     MySimpleModule mod1 = new MySimpleModule("test1", Version.unknownVersion()); [EOL]     SimpleModule mod2 = new SimpleModule("test2", Version.unknownVersion()); [EOL]     mod1.addSerializer(SimpleEnum.class, new SimpleEnumSerializer()); [EOL]     mod1.addDeserializer(CustomBean.class, new CustomBeanDeserializer()); [EOL]     mod2.addDeserializer(SimpleEnum.class, new SimpleEnumDeserializer()); [EOL]     mod2.addSerializer(CustomBean.class, new CustomBeanSerializer()); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerModule(mod1); [EOL]     mapper.registerModule(mod2); [EOL]     assertEquals(quote("b"), mapper.writeValueAsString(SimpleEnum.B)); [EOL]     SimpleEnum result = mapper.readValue(quote("a"), SimpleEnum.class); [EOL]     assertSame(SimpleEnum.A, result); [EOL]     mapper = new ObjectMapper(); [EOL]     mapper.registerModule(mod2); [EOL]     mapper.registerModule(mod1); [EOL]     assertEquals(quote("b"), mapper.writeValueAsString(SimpleEnum.B)); [EOL]     result = mapper.readValue(quote("a"), SimpleEnum.class); [EOL]     assertSame(SimpleEnum.A, result); [EOL] }
public void testMultipleModules() throws Exception { [EOL]     MySimpleModule mod1 = new MySimpleModule("test1", Version.unknownVersion()); [EOL]     SimpleModule mod2 = new SimpleModule("test2", Version.unknownVersion()); [EOL]     mod1.addSerializer(SimpleEnum.class, new SimpleEnumSerializer()); [EOL]     mod1.addDeserializer(CustomBean.class, new CustomBeanDeserializer()); [EOL]     mod2.addDeserializer(SimpleEnum.class, new SimpleEnumDeserializer()); [EOL]     mod2.addSerializer(CustomBean.class, new CustomBeanSerializer()); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerModule(mod1); [EOL]     mapper.registerModule(mod2); [EOL]     assertEquals(quote("b"), mapper.writeValueAsString(SimpleEnum.B)); [EOL]     SimpleEnum result = mapper.readValue(quote("a"), SimpleEnum.class); [EOL]     assertSame(SimpleEnum.A, result); [EOL]     mapper = new ObjectMapper(); [EOL]     mapper.registerModule(mod2); [EOL]     mapper.registerModule(mod1); [EOL]     assertEquals(quote("b"), mapper.writeValueAsString(SimpleEnum.B)); [EOL]     result = mapper.readValue(quote("a"), SimpleEnum.class); [EOL]     assertSame(SimpleEnum.A, result); [EOL] }
public void testMultipleModules() throws Exception { [EOL]     MySimpleModule mod1 = new MySimpleModule("test1", Version.unknownVersion()); [EOL]     SimpleModule mod2 = new SimpleModule("test2", Version.unknownVersion()); [EOL]     mod1.addSerializer(SimpleEnum.class, new SimpleEnumSerializer()); [EOL]     mod1.addDeserializer(CustomBean.class, new CustomBeanDeserializer()); [EOL]     mod2.addDeserializer(SimpleEnum.class, new SimpleEnumDeserializer()); [EOL]     mod2.addSerializer(CustomBean.class, new CustomBeanSerializer()); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerModule(mod1); [EOL]     mapper.registerModule(mod2); [EOL]     assertEquals(quote("b"), mapper.writeValueAsString(SimpleEnum.B)); [EOL]     SimpleEnum result = mapper.readValue(quote("a"), SimpleEnum.class); [EOL]     assertSame(SimpleEnum.A, result); [EOL]     mapper = new ObjectMapper(); [EOL]     mapper.registerModule(mod2); [EOL]     mapper.registerModule(mod1); [EOL]     assertEquals(quote("b"), mapper.writeValueAsString(SimpleEnum.B)); [EOL]     result = mapper.readValue(quote("a"), SimpleEnum.class); [EOL]     assertSame(SimpleEnum.A, result); [EOL] }
public void testPropertyWithSubtypes() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerSubtypes(SubB.class, SubC.class, SubD.class); [EOL]     String json = mapper.writeValueAsString(new PropertyBean(new SubC())); [EOL]     PropertyBean result = mapper.readValue(json, PropertyBean.class); [EOL]     assertSame(SubC.class, result.value.getClass()); [EOL] }
public void testPropertyWithSubtypes() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerSubtypes(SubB.class, SubC.class, SubD.class); [EOL]     String json = mapper.writeValueAsString(new PropertyBean(new SubC())); [EOL]     PropertyBean result = mapper.readValue(json, PropertyBean.class); [EOL]     assertSame(SubC.class, result.value.getClass()); [EOL] }
public void testPropertyWithSubtypes() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerSubtypes(SubB.class, SubC.class, SubD.class); [EOL]     String json = mapper.writeValueAsString(new PropertyBean(new SubC())); [EOL]     PropertyBean result = mapper.readValue(json, PropertyBean.class); [EOL]     assertSame(SubC.class, result.value.getClass()); [EOL] }
public void testPropertyWithSubtypes() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerSubtypes(SubB.class, SubC.class, SubD.class); [EOL]     String json = mapper.writeValueAsString(new PropertyBean(new SubC())); [EOL]     PropertyBean result = mapper.readValue(json, PropertyBean.class); [EOL]     assertSame(SubC.class, result.value.getClass()); [EOL] }
public void testSimpleTyped() throws Exception { [EOL]     MapImitatorWithValue mapHolder = MAPPER.readValue("{ \"a\" : [ 3, -1 ], \"b\" : [ ] }", MapImitatorWithValue.class); [EOL]     Map<String, int[]> result = mapHolder._map; [EOL]     assertEquals(2, result.size()); [EOL]     assertEquals(new int[] { 3, -1 }, result.get("a")); [EOL]     assertEquals(new int[0], result.get("b")); [EOL] }
public void testSimpleTyped() throws Exception { [EOL]     MapImitatorWithValue mapHolder = MAPPER.readValue("{ \"a\" : [ 3, -1 ], \"b\" : [ ] }", MapImitatorWithValue.class); [EOL]     Map<String, int[]> result = mapHolder._map; [EOL]     assertEquals(2, result.size()); [EOL]     assertEquals(new int[] { 3, -1 }, result.get("a")); [EOL]     assertEquals(new int[0], result.get("b")); [EOL] }
public void testBeanArray() throws Exception { [EOL]     List<Bean1> src = new ArrayList<Bean1>(); [EOL]     List<Bean2> b2 = new ArrayList<Bean2>(); [EOL]     b2.add(new Bean2("a")); [EOL]     b2.add(new Bean2("foobar")); [EOL]     src.add(new Bean1(1, 2, b2)); [EOL]     b2 = new ArrayList<Bean2>(); [EOL]     b2.add(null); [EOL]     src.add(new Bean1(4, 5, b2)); [EOL]     StringWriter sw = new StringWriter(); [EOL]     MAPPER.writeValue(sw, src); [EOL]     List<Bean1> result = MAPPER.readValue(sw.toString(), new TypeReference<List<Bean1>>() { [EOL]     }); [EOL]     assertNotNull(result); [EOL]     assertEquals(src, result); [EOL] }
public void testBeanArray() throws Exception { [EOL]     List<Bean1> src = new ArrayList<Bean1>(); [EOL]     List<Bean2> b2 = new ArrayList<Bean2>(); [EOL]     b2.add(new Bean2("a")); [EOL]     b2.add(new Bean2("foobar")); [EOL]     src.add(new Bean1(1, 2, b2)); [EOL]     b2 = new ArrayList<Bean2>(); [EOL]     b2.add(null); [EOL]     src.add(new Bean1(4, 5, b2)); [EOL]     StringWriter sw = new StringWriter(); [EOL]     MAPPER.writeValue(sw, src); [EOL]     List<Bean1> result = MAPPER.readValue(sw.toString(), new TypeReference<List<Bean1>>() { [EOL]     }); [EOL]     assertNotNull(result); [EOL]     assertEquals(src, result); [EOL] }
public void testBeanArray() throws Exception { [EOL]     List<Bean1> src = new ArrayList<Bean1>(); [EOL]     List<Bean2> b2 = new ArrayList<Bean2>(); [EOL]     b2.add(new Bean2("a")); [EOL]     b2.add(new Bean2("foobar")); [EOL]     src.add(new Bean1(1, 2, b2)); [EOL]     b2 = new ArrayList<Bean2>(); [EOL]     b2.add(null); [EOL]     src.add(new Bean1(4, 5, b2)); [EOL]     StringWriter sw = new StringWriter(); [EOL]     MAPPER.writeValue(sw, src); [EOL]     List<Bean1> result = MAPPER.readValue(sw.toString(), new TypeReference<List<Bean1>>() { [EOL]     }); [EOL]     assertNotNull(result); [EOL]     assertEquals(src, result); [EOL] }
public void testBeanArray() throws Exception { [EOL]     List<Bean1> src = new ArrayList<Bean1>(); [EOL]     List<Bean2> b2 = new ArrayList<Bean2>(); [EOL]     b2.add(new Bean2("a")); [EOL]     b2.add(new Bean2("foobar")); [EOL]     src.add(new Bean1(1, 2, b2)); [EOL]     b2 = new ArrayList<Bean2>(); [EOL]     b2.add(null); [EOL]     src.add(new Bean1(4, 5, b2)); [EOL]     StringWriter sw = new StringWriter(); [EOL]     MAPPER.writeValue(sw, src); [EOL]     List<Bean1> result = MAPPER.readValue(sw.toString(), new TypeReference<List<Bean1>>() { [EOL]     }); [EOL]     assertNotNull(result); [EOL]     assertEquals(src, result); [EOL] }
public void testSimpleTyped() throws Exception { [EOL]     MapImitatorWithValue mapHolder = MAPPER.readValue("{ \"a\" : [ 3, -1 ], \"b\" : [ ] }", MapImitatorWithValue.class); [EOL]     Map<String, int[]> result = mapHolder._map; [EOL]     assertEquals(2, result.size()); [EOL]     assertEquals(new int[] { 3, -1 }, result.get("a")); [EOL]     assertEquals(new int[0], result.get("b")); [EOL] }
public void testDeserializeSimple() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     JsonSchema schema = mapper.generateJsonSchema(Schemable.class); [EOL]     assertNotNull(schema); [EOL]     String schemaStr = mapper.writeValueAsString(schema); [EOL]     assertNotNull(schemaStr); [EOL]     JsonSchema result = mapper.readValue(schemaStr, JsonSchema.class); [EOL]     assertEquals("Trying to read from '" + schemaStr + "'", schema, result); [EOL] }
public void testDeserializeSimple() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     JsonSchema schema = mapper.generateJsonSchema(Schemable.class); [EOL]     assertNotNull(schema); [EOL]     String schemaStr = mapper.writeValueAsString(schema); [EOL]     assertNotNull(schemaStr); [EOL]     JsonSchema result = mapper.readValue(schemaStr, JsonSchema.class); [EOL]     assertEquals("Trying to read from '" + schemaStr + "'", schema, result); [EOL] }
public void testMoreSpecificType() { [EOL]     TypeFactory tf = TypeFactory.defaultInstance(); [EOL]     JavaType t1 = tf.constructCollectionType(Collection.class, Object.class); [EOL]     JavaType t2 = tf.constructCollectionType(List.class, Object.class); [EOL]     assertSame(t2, tf.moreSpecificType(t1, t2)); [EOL]     assertSame(t2, tf.moreSpecificType(t2, t1)); [EOL]     t1 = tf.constructType(Double.class); [EOL]     t2 = tf.constructType(Number.class); [EOL]     assertSame(t1, tf.moreSpecificType(t1, t2)); [EOL]     assertSame(t1, tf.moreSpecificType(t2, t1)); [EOL]     t1 = tf.constructType(Double.class); [EOL]     t2 = tf.constructType(String.class); [EOL]     assertSame(t1, tf.moreSpecificType(t1, t2)); [EOL]     assertSame(t2, tf.moreSpecificType(t2, t1)); [EOL] }
public void testMoreSpecificType() { [EOL]     TypeFactory tf = TypeFactory.defaultInstance(); [EOL]     JavaType t1 = tf.constructCollectionType(Collection.class, Object.class); [EOL]     JavaType t2 = tf.constructCollectionType(List.class, Object.class); [EOL]     assertSame(t2, tf.moreSpecificType(t1, t2)); [EOL]     assertSame(t2, tf.moreSpecificType(t2, t1)); [EOL]     t1 = tf.constructType(Double.class); [EOL]     t2 = tf.constructType(Number.class); [EOL]     assertSame(t1, tf.moreSpecificType(t1, t2)); [EOL]     assertSame(t1, tf.moreSpecificType(t2, t1)); [EOL]     t1 = tf.constructType(Double.class); [EOL]     t2 = tf.constructType(String.class); [EOL]     assertSame(t1, tf.moreSpecificType(t1, t2)); [EOL]     assertSame(t2, tf.moreSpecificType(t2, t1)); [EOL] }
public void testMoreSpecificType() { [EOL]     TypeFactory tf = TypeFactory.defaultInstance(); [EOL]     JavaType t1 = tf.constructCollectionType(Collection.class, Object.class); [EOL]     JavaType t2 = tf.constructCollectionType(List.class, Object.class); [EOL]     assertSame(t2, tf.moreSpecificType(t1, t2)); [EOL]     assertSame(t2, tf.moreSpecificType(t2, t1)); [EOL]     t1 = tf.constructType(Double.class); [EOL]     t2 = tf.constructType(Number.class); [EOL]     assertSame(t1, tf.moreSpecificType(t1, t2)); [EOL]     assertSame(t1, tf.moreSpecificType(t2, t1)); [EOL]     t1 = tf.constructType(Double.class); [EOL]     t2 = tf.constructType(String.class); [EOL]     assertSame(t1, tf.moreSpecificType(t1, t2)); [EOL]     assertSame(t2, tf.moreSpecificType(t2, t1)); [EOL] }
public void testMoreSpecificType() { [EOL]     TypeFactory tf = TypeFactory.defaultInstance(); [EOL]     JavaType t1 = tf.constructCollectionType(Collection.class, Object.class); [EOL]     JavaType t2 = tf.constructCollectionType(List.class, Object.class); [EOL]     assertSame(t2, tf.moreSpecificType(t1, t2)); [EOL]     assertSame(t2, tf.moreSpecificType(t2, t1)); [EOL]     t1 = tf.constructType(Double.class); [EOL]     t2 = tf.constructType(Number.class); [EOL]     assertSame(t1, tf.moreSpecificType(t1, t2)); [EOL]     assertSame(t1, tf.moreSpecificType(t2, t1)); [EOL]     t1 = tf.constructType(Double.class); [EOL]     t2 = tf.constructType(String.class); [EOL]     assertSame(t1, tf.moreSpecificType(t1, t2)); [EOL]     assertSame(t2, tf.moreSpecificType(t2, t1)); [EOL] }
public void testMoreSpecificType() { [EOL]     TypeFactory tf = TypeFactory.defaultInstance(); [EOL]     JavaType t1 = tf.constructCollectionType(Collection.class, Object.class); [EOL]     JavaType t2 = tf.constructCollectionType(List.class, Object.class); [EOL]     assertSame(t2, tf.moreSpecificType(t1, t2)); [EOL]     assertSame(t2, tf.moreSpecificType(t2, t1)); [EOL]     t1 = tf.constructType(Double.class); [EOL]     t2 = tf.constructType(Number.class); [EOL]     assertSame(t1, tf.moreSpecificType(t1, t2)); [EOL]     assertSame(t1, tf.moreSpecificType(t2, t1)); [EOL]     t1 = tf.constructType(Double.class); [EOL]     t2 = tf.constructType(String.class); [EOL]     assertSame(t1, tf.moreSpecificType(t1, t2)); [EOL]     assertSame(t2, tf.moreSpecificType(t2, t1)); [EOL] }
public void testMapTypesSimple() { [EOL]     TypeFactory tf = TypeFactory.defaultInstance(); [EOL]     JavaType type = tf.constructType(new TypeReference<Map<String, Boolean>>() { [EOL]     }); [EOL]     MapType mapType = (MapType) type; [EOL]     assertEquals(tf.constructType(String.class), mapType.getKeyType()); [EOL]     assertEquals(tf.constructType(Boolean.class), mapType.getContentType()); [EOL] }
public void testDeserializationWithString() throws Exception { [EOL]     Inter inter = objectReader(Inter.class).readValue("\"a,b,c,d\""); [EOL]     assertTrue(inter instanceof LegacyInter); [EOL]     assertEquals(Arrays.asList("a", "b", "c", "d"), ((MyInter) inter).blah); [EOL] }
public void testDeserializationWithString() throws Exception { [EOL]     Inter inter = objectReader(Inter.class).readValue("\"a,b,c,d\""); [EOL]     assertTrue(inter instanceof LegacyInter); [EOL]     assertEquals(Arrays.asList("a", "b", "c", "d"), ((MyInter) inter).blah); [EOL] }
public void testDeserializationWithString() throws Exception { [EOL]     Inter inter = objectReader(Inter.class).readValue("\"a,b,c,d\""); [EOL]     assertTrue(inter instanceof LegacyInter); [EOL]     assertEquals(Arrays.asList("a", "b", "c", "d"), ((MyInter) inter).blah); [EOL] }
public void testDeserializationWithString() throws Exception { [EOL]     Inter inter = objectReader(Inter.class).readValue("\"a,b,c,d\""); [EOL]     assertTrue(inter instanceof LegacyInter); [EOL]     assertEquals(Arrays.asList("a", "b", "c", "d"), ((MyInter) inter).blah); [EOL] }
public void testVisibleWithProperty() throws Exception { [EOL]     String json = mapper.writeValueAsString(new PropertyBean()); [EOL]     assertEquals("{\"type\":\"BaseType\",\"a\":3}", json); [EOL]     PropertyBean result = mapper.readValue(json, PropertyBean.class); [EOL]     assertEquals("BaseType", result.type); [EOL]     result = mapper.readValue("{\"a\":7, \"type\":\"BaseType\"}", PropertyBean.class); [EOL]     assertEquals(7, result.a); [EOL]     assertEquals("BaseType", result.type); [EOL] }
public void testVisibleWithProperty() throws Exception { [EOL]     String json = mapper.writeValueAsString(new PropertyBean()); [EOL]     assertEquals("{\"type\":\"BaseType\",\"a\":3}", json); [EOL]     PropertyBean result = mapper.readValue(json, PropertyBean.class); [EOL]     assertEquals("BaseType", result.type); [EOL]     result = mapper.readValue("{\"a\":7, \"type\":\"BaseType\"}", PropertyBean.class); [EOL]     assertEquals(7, result.a); [EOL]     assertEquals("BaseType", result.type); [EOL] }
public void testVisibleWithProperty() throws Exception { [EOL]     String json = mapper.writeValueAsString(new PropertyBean()); [EOL]     assertEquals("{\"type\":\"BaseType\",\"a\":3}", json); [EOL]     PropertyBean result = mapper.readValue(json, PropertyBean.class); [EOL]     assertEquals("BaseType", result.type); [EOL]     result = mapper.readValue("{\"a\":7, \"type\":\"BaseType\"}", PropertyBean.class); [EOL]     assertEquals(7, result.a); [EOL]     assertEquals("BaseType", result.type); [EOL] }
public void testDefaultImplViaModule() throws Exception { [EOL]     final String JSON = "{\"a\":123}"; [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     try { [EOL]         mapper.readValue(JSON, SuperTypeWithoutDefault.class); [EOL]         fail("Expected an exception"); [EOL]     } catch (JsonMappingException e) { [EOL]         verifyException(e, "missing property"); [EOL]     } [EOL]     mapper = new ObjectMapper(); [EOL]     SimpleModule module = new SimpleModule("test", Version.unknownVersion()); [EOL]     module.addAbstractTypeMapping(SuperTypeWithoutDefault.class, DefaultImpl505.class); [EOL]     mapper.registerModule(module); [EOL]     SuperTypeWithoutDefault bean = mapper.readValue(JSON, SuperTypeWithoutDefault.class); [EOL]     assertNotNull(bean); [EOL]     assertEquals(DefaultImpl505.class, bean.getClass()); [EOL]     assertEquals(123, ((DefaultImpl505) bean).a); [EOL]     bean = mapper.readValue("{\"#type\":\"foobar\"}", SuperTypeWithoutDefault.class); [EOL]     assertEquals(DefaultImpl505.class, bean.getClass()); [EOL]     assertEquals(0, ((DefaultImpl505) bean).a); [EOL] }
public void testDefaultImplViaModule() throws Exception { [EOL]     final String JSON = "{\"a\":123}"; [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     try { [EOL]         mapper.readValue(JSON, SuperTypeWithoutDefault.class); [EOL]         fail("Expected an exception"); [EOL]     } catch (JsonMappingException e) { [EOL]         verifyException(e, "missing property"); [EOL]     } [EOL]     mapper = new ObjectMapper(); [EOL]     SimpleModule module = new SimpleModule("test", Version.unknownVersion()); [EOL]     module.addAbstractTypeMapping(SuperTypeWithoutDefault.class, DefaultImpl505.class); [EOL]     mapper.registerModule(module); [EOL]     SuperTypeWithoutDefault bean = mapper.readValue(JSON, SuperTypeWithoutDefault.class); [EOL]     assertNotNull(bean); [EOL]     assertEquals(DefaultImpl505.class, bean.getClass()); [EOL]     assertEquals(123, ((DefaultImpl505) bean).a); [EOL]     bean = mapper.readValue("{\"#type\":\"foobar\"}", SuperTypeWithoutDefault.class); [EOL]     assertEquals(DefaultImpl505.class, bean.getClass()); [EOL]     assertEquals(0, ((DefaultImpl505) bean).a); [EOL] }
public void testDefaultImplViaModule() throws Exception { [EOL]     final String JSON = "{\"a\":123}"; [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     try { [EOL]         mapper.readValue(JSON, SuperTypeWithoutDefault.class); [EOL]         fail("Expected an exception"); [EOL]     } catch (JsonMappingException e) { [EOL]         verifyException(e, "missing property"); [EOL]     } [EOL]     mapper = new ObjectMapper(); [EOL]     SimpleModule module = new SimpleModule("test", Version.unknownVersion()); [EOL]     module.addAbstractTypeMapping(SuperTypeWithoutDefault.class, DefaultImpl505.class); [EOL]     mapper.registerModule(module); [EOL]     SuperTypeWithoutDefault bean = mapper.readValue(JSON, SuperTypeWithoutDefault.class); [EOL]     assertNotNull(bean); [EOL]     assertEquals(DefaultImpl505.class, bean.getClass()); [EOL]     assertEquals(123, ((DefaultImpl505) bean).a); [EOL]     bean = mapper.readValue("{\"#type\":\"foobar\"}", SuperTypeWithoutDefault.class); [EOL]     assertEquals(DefaultImpl505.class, bean.getClass()); [EOL]     assertEquals(0, ((DefaultImpl505) bean).a); [EOL] }
public void testDefaultImplViaModule() throws Exception { [EOL]     final String JSON = "{\"a\":123}"; [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     try { [EOL]         mapper.readValue(JSON, SuperTypeWithoutDefault.class); [EOL]         fail("Expected an exception"); [EOL]     } catch (JsonMappingException e) { [EOL]         verifyException(e, "missing property"); [EOL]     } [EOL]     mapper = new ObjectMapper(); [EOL]     SimpleModule module = new SimpleModule("test", Version.unknownVersion()); [EOL]     module.addAbstractTypeMapping(SuperTypeWithoutDefault.class, DefaultImpl505.class); [EOL]     mapper.registerModule(module); [EOL]     SuperTypeWithoutDefault bean = mapper.readValue(JSON, SuperTypeWithoutDefault.class); [EOL]     assertNotNull(bean); [EOL]     assertEquals(DefaultImpl505.class, bean.getClass()); [EOL]     assertEquals(123, ((DefaultImpl505) bean).a); [EOL]     bean = mapper.readValue("{\"#type\":\"foobar\"}", SuperTypeWithoutDefault.class); [EOL]     assertEquals(DefaultImpl505.class, bean.getClass()); [EOL]     assertEquals(0, ((DefaultImpl505) bean).a); [EOL] }
public void testPropertyWithSubtypes() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerSubtypes(SubB.class, SubC.class, SubD.class); [EOL]     String json = mapper.writeValueAsString(new PropertyBean(new SubC())); [EOL]     PropertyBean result = mapper.readValue(json, PropertyBean.class); [EOL]     assertSame(SubC.class, result.value.getClass()); [EOL] }
public void testWithJsonParserSequenceSimple() throws IOException { [EOL]     TokenBuffer buf = new TokenBuffer(null); [EOL]     buf.writeStartArray(); [EOL]     buf.writeString("test"); [EOL]     JsonParser jp = createParserUsingReader("[ true, null ]"); [EOL]     JsonParserSequence seq = JsonParserSequence.createFlattened(buf.asParser(), jp); [EOL]     assertEquals(2, seq.containedParsersCount()); [EOL]     assertFalse(jp.isClosed()); [EOL]     assertFalse(seq.hasCurrentToken()); [EOL]     assertNull(seq.getCurrentToken()); [EOL]     assertNull(seq.getCurrentName()); [EOL]     assertToken(JsonToken.START_ARRAY, seq.nextToken()); [EOL]     assertToken(JsonToken.VALUE_STRING, seq.nextToken()); [EOL]     assertEquals("test", seq.getText()); [EOL]     assertToken(JsonToken.START_ARRAY, seq.nextToken()); [EOL]     assertToken(JsonToken.VALUE_TRUE, seq.nextToken()); [EOL]     assertToken(JsonToken.VALUE_NULL, seq.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, seq.nextToken()); [EOL]     assertNull(seq.nextToken()); [EOL]     assertNull(seq.nextToken()); [EOL]     assertTrue(jp.isClosed()); [EOL]     jp.close(); [EOL]     buf.close(); [EOL] }
public void testWithJsonParserSequenceSimple() throws IOException { [EOL]     TokenBuffer buf = new TokenBuffer(null); [EOL]     buf.writeStartArray(); [EOL]     buf.writeString("test"); [EOL]     JsonParser jp = createParserUsingReader("[ true, null ]"); [EOL]     JsonParserSequence seq = JsonParserSequence.createFlattened(buf.asParser(), jp); [EOL]     assertEquals(2, seq.containedParsersCount()); [EOL]     assertFalse(jp.isClosed()); [EOL]     assertFalse(seq.hasCurrentToken()); [EOL]     assertNull(seq.getCurrentToken()); [EOL]     assertNull(seq.getCurrentName()); [EOL]     assertToken(JsonToken.START_ARRAY, seq.nextToken()); [EOL]     assertToken(JsonToken.VALUE_STRING, seq.nextToken()); [EOL]     assertEquals("test", seq.getText()); [EOL]     assertToken(JsonToken.START_ARRAY, seq.nextToken()); [EOL]     assertToken(JsonToken.VALUE_TRUE, seq.nextToken()); [EOL]     assertToken(JsonToken.VALUE_NULL, seq.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, seq.nextToken()); [EOL]     assertNull(seq.nextToken()); [EOL]     assertNull(seq.nextToken()); [EOL]     assertTrue(jp.isClosed()); [EOL]     jp.close(); [EOL]     buf.close(); [EOL] }
public void testWithJsonParserSequenceSimple() throws IOException { [EOL]     TokenBuffer buf = new TokenBuffer(null); [EOL]     buf.writeStartArray(); [EOL]     buf.writeString("test"); [EOL]     JsonParser jp = createParserUsingReader("[ true, null ]"); [EOL]     JsonParserSequence seq = JsonParserSequence.createFlattened(buf.asParser(), jp); [EOL]     assertEquals(2, seq.containedParsersCount()); [EOL]     assertFalse(jp.isClosed()); [EOL]     assertFalse(seq.hasCurrentToken()); [EOL]     assertNull(seq.getCurrentToken()); [EOL]     assertNull(seq.getCurrentName()); [EOL]     assertToken(JsonToken.START_ARRAY, seq.nextToken()); [EOL]     assertToken(JsonToken.VALUE_STRING, seq.nextToken()); [EOL]     assertEquals("test", seq.getText()); [EOL]     assertToken(JsonToken.START_ARRAY, seq.nextToken()); [EOL]     assertToken(JsonToken.VALUE_TRUE, seq.nextToken()); [EOL]     assertToken(JsonToken.VALUE_NULL, seq.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, seq.nextToken()); [EOL]     assertNull(seq.nextToken()); [EOL]     assertNull(seq.nextToken()); [EOL]     assertTrue(jp.isClosed()); [EOL]     jp.close(); [EOL]     buf.close(); [EOL] }
public void testLongArrayToX() throws Exception { [EOL]     long[] data = longs(); [EOL]     verifyLongArrayConversion(data, byte[].class); [EOL]     verifyLongArrayConversion(data, short[].class); [EOL]     verifyLongArrayConversion(data, int[].class); [EOL]     List<Number> expNums = _numberList(data, data.length); [EOL]     List<Long> actNums = mapper.convertValue(data, new TypeReference<List<Long>>() { [EOL]     }); [EOL]     assertEquals(expNums, actNums); [EOL] }
public void testSimpleObject() throws IOException { [EOL]     TokenBuffer buf = new TokenBuffer(null); [EOL]     assertTrue(buf.getOutputContext().inRoot()); [EOL]     buf.writeStartObject(); [EOL]     assertTrue(buf.getOutputContext().inObject()); [EOL]     buf.writeEndObject(); [EOL]     assertTrue(buf.getOutputContext().inRoot()); [EOL]     JsonParser jp = buf.asParser(); [EOL]     assertNull(jp.getCurrentToken()); [EOL]     assertTrue(jp.getParsingContext().inRoot()); [EOL]     assertToken(JsonToken.START_OBJECT, jp.nextToken()); [EOL]     assertTrue(jp.getParsingContext().inObject()); [EOL]     assertToken(JsonToken.END_OBJECT, jp.nextToken()); [EOL]     assertTrue(jp.getParsingContext().inRoot()); [EOL]     assertNull(jp.nextToken()); [EOL]     jp.close(); [EOL]     buf.close(); [EOL]     buf = new TokenBuffer(null); [EOL]     buf.writeStartObject(); [EOL]     buf.writeNumberField("num", 1.25); [EOL]     buf.writeEndObject(); [EOL]     jp = buf.asParser(); [EOL]     assertNull(jp.getCurrentToken()); [EOL]     assertToken(JsonToken.START_OBJECT, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertToken(JsonToken.FIELD_NAME, jp.nextToken()); [EOL]     assertEquals("num", jp.getCurrentName()); [EOL]     jp.overrideCurrentName("bah"); [EOL]     assertEquals("bah", jp.getCurrentName()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_FLOAT, jp.nextToken()); [EOL]     assertEquals(1.25, jp.getDoubleValue()); [EOL]     assertEquals("bah", jp.getCurrentName()); [EOL]     assertToken(JsonToken.END_OBJECT, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertNull(jp.nextToken()); [EOL]     jp.close(); [EOL]     buf.close(); [EOL] }
public void testSimpleObject() throws IOException { [EOL]     TokenBuffer buf = new TokenBuffer(null); [EOL]     assertTrue(buf.getOutputContext().inRoot()); [EOL]     buf.writeStartObject(); [EOL]     assertTrue(buf.getOutputContext().inObject()); [EOL]     buf.writeEndObject(); [EOL]     assertTrue(buf.getOutputContext().inRoot()); [EOL]     JsonParser jp = buf.asParser(); [EOL]     assertNull(jp.getCurrentToken()); [EOL]     assertTrue(jp.getParsingContext().inRoot()); [EOL]     assertToken(JsonToken.START_OBJECT, jp.nextToken()); [EOL]     assertTrue(jp.getParsingContext().inObject()); [EOL]     assertToken(JsonToken.END_OBJECT, jp.nextToken()); [EOL]     assertTrue(jp.getParsingContext().inRoot()); [EOL]     assertNull(jp.nextToken()); [EOL]     jp.close(); [EOL]     buf.close(); [EOL]     buf = new TokenBuffer(null); [EOL]     buf.writeStartObject(); [EOL]     buf.writeNumberField("num", 1.25); [EOL]     buf.writeEndObject(); [EOL]     jp = buf.asParser(); [EOL]     assertNull(jp.getCurrentToken()); [EOL]     assertToken(JsonToken.START_OBJECT, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertToken(JsonToken.FIELD_NAME, jp.nextToken()); [EOL]     assertEquals("num", jp.getCurrentName()); [EOL]     jp.overrideCurrentName("bah"); [EOL]     assertEquals("bah", jp.getCurrentName()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_FLOAT, jp.nextToken()); [EOL]     assertEquals(1.25, jp.getDoubleValue()); [EOL]     assertEquals("bah", jp.getCurrentName()); [EOL]     assertToken(JsonToken.END_OBJECT, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertNull(jp.nextToken()); [EOL]     jp.close(); [EOL]     buf.close(); [EOL] }
public void testSimpleObject() throws IOException { [EOL]     TokenBuffer buf = new TokenBuffer(null); [EOL]     assertTrue(buf.getOutputContext().inRoot()); [EOL]     buf.writeStartObject(); [EOL]     assertTrue(buf.getOutputContext().inObject()); [EOL]     buf.writeEndObject(); [EOL]     assertTrue(buf.getOutputContext().inRoot()); [EOL]     JsonParser jp = buf.asParser(); [EOL]     assertNull(jp.getCurrentToken()); [EOL]     assertTrue(jp.getParsingContext().inRoot()); [EOL]     assertToken(JsonToken.START_OBJECT, jp.nextToken()); [EOL]     assertTrue(jp.getParsingContext().inObject()); [EOL]     assertToken(JsonToken.END_OBJECT, jp.nextToken()); [EOL]     assertTrue(jp.getParsingContext().inRoot()); [EOL]     assertNull(jp.nextToken()); [EOL]     jp.close(); [EOL]     buf.close(); [EOL]     buf = new TokenBuffer(null); [EOL]     buf.writeStartObject(); [EOL]     buf.writeNumberField("num", 1.25); [EOL]     buf.writeEndObject(); [EOL]     jp = buf.asParser(); [EOL]     assertNull(jp.getCurrentToken()); [EOL]     assertToken(JsonToken.START_OBJECT, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertToken(JsonToken.FIELD_NAME, jp.nextToken()); [EOL]     assertEquals("num", jp.getCurrentName()); [EOL]     jp.overrideCurrentName("bah"); [EOL]     assertEquals("bah", jp.getCurrentName()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_FLOAT, jp.nextToken()); [EOL]     assertEquals(1.25, jp.getDoubleValue()); [EOL]     assertEquals("bah", jp.getCurrentName()); [EOL]     assertToken(JsonToken.END_OBJECT, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertNull(jp.nextToken()); [EOL]     jp.close(); [EOL]     buf.close(); [EOL] }
public void testSimpleObject() throws IOException { [EOL]     TokenBuffer buf = new TokenBuffer(null); [EOL]     assertTrue(buf.getOutputContext().inRoot()); [EOL]     buf.writeStartObject(); [EOL]     assertTrue(buf.getOutputContext().inObject()); [EOL]     buf.writeEndObject(); [EOL]     assertTrue(buf.getOutputContext().inRoot()); [EOL]     JsonParser jp = buf.asParser(); [EOL]     assertNull(jp.getCurrentToken()); [EOL]     assertTrue(jp.getParsingContext().inRoot()); [EOL]     assertToken(JsonToken.START_OBJECT, jp.nextToken()); [EOL]     assertTrue(jp.getParsingContext().inObject()); [EOL]     assertToken(JsonToken.END_OBJECT, jp.nextToken()); [EOL]     assertTrue(jp.getParsingContext().inRoot()); [EOL]     assertNull(jp.nextToken()); [EOL]     jp.close(); [EOL]     buf.close(); [EOL]     buf = new TokenBuffer(null); [EOL]     buf.writeStartObject(); [EOL]     buf.writeNumberField("num", 1.25); [EOL]     buf.writeEndObject(); [EOL]     jp = buf.asParser(); [EOL]     assertNull(jp.getCurrentToken()); [EOL]     assertToken(JsonToken.START_OBJECT, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertToken(JsonToken.FIELD_NAME, jp.nextToken()); [EOL]     assertEquals("num", jp.getCurrentName()); [EOL]     jp.overrideCurrentName("bah"); [EOL]     assertEquals("bah", jp.getCurrentName()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_FLOAT, jp.nextToken()); [EOL]     assertEquals(1.25, jp.getDoubleValue()); [EOL]     assertEquals("bah", jp.getCurrentName()); [EOL]     assertToken(JsonToken.END_OBJECT, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertNull(jp.nextToken()); [EOL]     jp.close(); [EOL]     buf.close(); [EOL] }
public void testSimpleObject() throws IOException { [EOL]     TokenBuffer buf = new TokenBuffer(null); [EOL]     assertTrue(buf.getOutputContext().inRoot()); [EOL]     buf.writeStartObject(); [EOL]     assertTrue(buf.getOutputContext().inObject()); [EOL]     buf.writeEndObject(); [EOL]     assertTrue(buf.getOutputContext().inRoot()); [EOL]     JsonParser jp = buf.asParser(); [EOL]     assertNull(jp.getCurrentToken()); [EOL]     assertTrue(jp.getParsingContext().inRoot()); [EOL]     assertToken(JsonToken.START_OBJECT, jp.nextToken()); [EOL]     assertTrue(jp.getParsingContext().inObject()); [EOL]     assertToken(JsonToken.END_OBJECT, jp.nextToken()); [EOL]     assertTrue(jp.getParsingContext().inRoot()); [EOL]     assertNull(jp.nextToken()); [EOL]     jp.close(); [EOL]     buf.close(); [EOL]     buf = new TokenBuffer(null); [EOL]     buf.writeStartObject(); [EOL]     buf.writeNumberField("num", 1.25); [EOL]     buf.writeEndObject(); [EOL]     jp = buf.asParser(); [EOL]     assertNull(jp.getCurrentToken()); [EOL]     assertToken(JsonToken.START_OBJECT, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertToken(JsonToken.FIELD_NAME, jp.nextToken()); [EOL]     assertEquals("num", jp.getCurrentName()); [EOL]     jp.overrideCurrentName("bah"); [EOL]     assertEquals("bah", jp.getCurrentName()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_FLOAT, jp.nextToken()); [EOL]     assertEquals(1.25, jp.getDoubleValue()); [EOL]     assertEquals("bah", jp.getCurrentName()); [EOL]     assertToken(JsonToken.END_OBJECT, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertNull(jp.nextToken()); [EOL]     jp.close(); [EOL]     buf.close(); [EOL] }
public void testSimpleObject() throws IOException { [EOL]     TokenBuffer buf = new TokenBuffer(null); [EOL]     assertTrue(buf.getOutputContext().inRoot()); [EOL]     buf.writeStartObject(); [EOL]     assertTrue(buf.getOutputContext().inObject()); [EOL]     buf.writeEndObject(); [EOL]     assertTrue(buf.getOutputContext().inRoot()); [EOL]     JsonParser jp = buf.asParser(); [EOL]     assertNull(jp.getCurrentToken()); [EOL]     assertTrue(jp.getParsingContext().inRoot()); [EOL]     assertToken(JsonToken.START_OBJECT, jp.nextToken()); [EOL]     assertTrue(jp.getParsingContext().inObject()); [EOL]     assertToken(JsonToken.END_OBJECT, jp.nextToken()); [EOL]     assertTrue(jp.getParsingContext().inRoot()); [EOL]     assertNull(jp.nextToken()); [EOL]     jp.close(); [EOL]     buf.close(); [EOL]     buf = new TokenBuffer(null); [EOL]     buf.writeStartObject(); [EOL]     buf.writeNumberField("num", 1.25); [EOL]     buf.writeEndObject(); [EOL]     jp = buf.asParser(); [EOL]     assertNull(jp.getCurrentToken()); [EOL]     assertToken(JsonToken.START_OBJECT, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertToken(JsonToken.FIELD_NAME, jp.nextToken()); [EOL]     assertEquals("num", jp.getCurrentName()); [EOL]     jp.overrideCurrentName("bah"); [EOL]     assertEquals("bah", jp.getCurrentName()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_FLOAT, jp.nextToken()); [EOL]     assertEquals(1.25, jp.getDoubleValue()); [EOL]     assertEquals("bah", jp.getCurrentName()); [EOL]     assertToken(JsonToken.END_OBJECT, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertNull(jp.nextToken()); [EOL]     jp.close(); [EOL]     buf.close(); [EOL] }
public void testVisibleWithExternalId() throws Exception { [EOL]     String json = mapper.writeValueAsString(new ExternalIdWrapper()); [EOL]     ExternalIdWrapper result = mapper.readValue(json, ExternalIdWrapper.class); [EOL]     assertEquals("ExternalType", result.bean.type); [EOL]     assertEquals(2, result.bean.a); [EOL] }
public void testVisibleWithExternalId() throws Exception { [EOL]     String json = mapper.writeValueAsString(new ExternalIdWrapper()); [EOL]     ExternalIdWrapper result = mapper.readValue(json, ExternalIdWrapper.class); [EOL]     assertEquals("ExternalType", result.bean.type); [EOL]     assertEquals(2, result.bean.a); [EOL] }
public void testWithJsonParserSequenceSimple() throws IOException { [EOL]     TokenBuffer buf = new TokenBuffer(null); [EOL]     buf.writeStartArray(); [EOL]     buf.writeString("test"); [EOL]     JsonParser jp = createParserUsingReader("[ true, null ]"); [EOL]     JsonParserSequence seq = JsonParserSequence.createFlattened(buf.asParser(), jp); [EOL]     assertEquals(2, seq.containedParsersCount()); [EOL]     assertFalse(jp.isClosed()); [EOL]     assertFalse(seq.hasCurrentToken()); [EOL]     assertNull(seq.getCurrentToken()); [EOL]     assertNull(seq.getCurrentName()); [EOL]     assertToken(JsonToken.START_ARRAY, seq.nextToken()); [EOL]     assertToken(JsonToken.VALUE_STRING, seq.nextToken()); [EOL]     assertEquals("test", seq.getText()); [EOL]     assertToken(JsonToken.START_ARRAY, seq.nextToken()); [EOL]     assertToken(JsonToken.VALUE_TRUE, seq.nextToken()); [EOL]     assertToken(JsonToken.VALUE_NULL, seq.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, seq.nextToken()); [EOL]     assertNull(seq.nextToken()); [EOL]     assertNull(seq.nextToken()); [EOL]     assertTrue(jp.isClosed()); [EOL]     jp.close(); [EOL]     buf.close(); [EOL] }
public void testWithJsonParserSequenceSimple() throws IOException { [EOL]     TokenBuffer buf = new TokenBuffer(null); [EOL]     buf.writeStartArray(); [EOL]     buf.writeString("test"); [EOL]     JsonParser jp = createParserUsingReader("[ true, null ]"); [EOL]     JsonParserSequence seq = JsonParserSequence.createFlattened(buf.asParser(), jp); [EOL]     assertEquals(2, seq.containedParsersCount()); [EOL]     assertFalse(jp.isClosed()); [EOL]     assertFalse(seq.hasCurrentToken()); [EOL]     assertNull(seq.getCurrentToken()); [EOL]     assertNull(seq.getCurrentName()); [EOL]     assertToken(JsonToken.START_ARRAY, seq.nextToken()); [EOL]     assertToken(JsonToken.VALUE_STRING, seq.nextToken()); [EOL]     assertEquals("test", seq.getText()); [EOL]     assertToken(JsonToken.START_ARRAY, seq.nextToken()); [EOL]     assertToken(JsonToken.VALUE_TRUE, seq.nextToken()); [EOL]     assertToken(JsonToken.VALUE_NULL, seq.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, seq.nextToken()); [EOL]     assertNull(seq.nextToken()); [EOL]     assertNull(seq.nextToken()); [EOL]     assertTrue(jp.isClosed()); [EOL]     jp.close(); [EOL]     buf.close(); [EOL] }
public void testSimpleObject() throws IOException { [EOL]     TokenBuffer buf = new TokenBuffer(null); [EOL]     assertTrue(buf.getOutputContext().inRoot()); [EOL]     buf.writeStartObject(); [EOL]     assertTrue(buf.getOutputContext().inObject()); [EOL]     buf.writeEndObject(); [EOL]     assertTrue(buf.getOutputContext().inRoot()); [EOL]     JsonParser jp = buf.asParser(); [EOL]     assertNull(jp.getCurrentToken()); [EOL]     assertTrue(jp.getParsingContext().inRoot()); [EOL]     assertToken(JsonToken.START_OBJECT, jp.nextToken()); [EOL]     assertTrue(jp.getParsingContext().inObject()); [EOL]     assertToken(JsonToken.END_OBJECT, jp.nextToken()); [EOL]     assertTrue(jp.getParsingContext().inRoot()); [EOL]     assertNull(jp.nextToken()); [EOL]     jp.close(); [EOL]     buf.close(); [EOL]     buf = new TokenBuffer(null); [EOL]     buf.writeStartObject(); [EOL]     buf.writeNumberField("num", 1.25); [EOL]     buf.writeEndObject(); [EOL]     jp = buf.asParser(); [EOL]     assertNull(jp.getCurrentToken()); [EOL]     assertToken(JsonToken.START_OBJECT, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertToken(JsonToken.FIELD_NAME, jp.nextToken()); [EOL]     assertEquals("num", jp.getCurrentName()); [EOL]     jp.overrideCurrentName("bah"); [EOL]     assertEquals("bah", jp.getCurrentName()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_FLOAT, jp.nextToken()); [EOL]     assertEquals(1.25, jp.getDoubleValue()); [EOL]     assertEquals("bah", jp.getCurrentName()); [EOL]     assertToken(JsonToken.END_OBJECT, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertNull(jp.nextToken()); [EOL]     jp.close(); [EOL]     buf.close(); [EOL] }
public void testSimpleObject() throws IOException { [EOL]     TokenBuffer buf = new TokenBuffer(null); [EOL]     assertTrue(buf.getOutputContext().inRoot()); [EOL]     buf.writeStartObject(); [EOL]     assertTrue(buf.getOutputContext().inObject()); [EOL]     buf.writeEndObject(); [EOL]     assertTrue(buf.getOutputContext().inRoot()); [EOL]     JsonParser jp = buf.asParser(); [EOL]     assertNull(jp.getCurrentToken()); [EOL]     assertTrue(jp.getParsingContext().inRoot()); [EOL]     assertToken(JsonToken.START_OBJECT, jp.nextToken()); [EOL]     assertTrue(jp.getParsingContext().inObject()); [EOL]     assertToken(JsonToken.END_OBJECT, jp.nextToken()); [EOL]     assertTrue(jp.getParsingContext().inRoot()); [EOL]     assertNull(jp.nextToken()); [EOL]     jp.close(); [EOL]     buf.close(); [EOL]     buf = new TokenBuffer(null); [EOL]     buf.writeStartObject(); [EOL]     buf.writeNumberField("num", 1.25); [EOL]     buf.writeEndObject(); [EOL]     jp = buf.asParser(); [EOL]     assertNull(jp.getCurrentToken()); [EOL]     assertToken(JsonToken.START_OBJECT, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertToken(JsonToken.FIELD_NAME, jp.nextToken()); [EOL]     assertEquals("num", jp.getCurrentName()); [EOL]     jp.overrideCurrentName("bah"); [EOL]     assertEquals("bah", jp.getCurrentName()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_FLOAT, jp.nextToken()); [EOL]     assertEquals(1.25, jp.getDoubleValue()); [EOL]     assertEquals("bah", jp.getCurrentName()); [EOL]     assertToken(JsonToken.END_OBJECT, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertNull(jp.nextToken()); [EOL]     jp.close(); [EOL]     buf.close(); [EOL] }
public void testSimpleObject() throws IOException { [EOL]     TokenBuffer buf = new TokenBuffer(null); [EOL]     assertTrue(buf.getOutputContext().inRoot()); [EOL]     buf.writeStartObject(); [EOL]     assertTrue(buf.getOutputContext().inObject()); [EOL]     buf.writeEndObject(); [EOL]     assertTrue(buf.getOutputContext().inRoot()); [EOL]     JsonParser jp = buf.asParser(); [EOL]     assertNull(jp.getCurrentToken()); [EOL]     assertTrue(jp.getParsingContext().inRoot()); [EOL]     assertToken(JsonToken.START_OBJECT, jp.nextToken()); [EOL]     assertTrue(jp.getParsingContext().inObject()); [EOL]     assertToken(JsonToken.END_OBJECT, jp.nextToken()); [EOL]     assertTrue(jp.getParsingContext().inRoot()); [EOL]     assertNull(jp.nextToken()); [EOL]     jp.close(); [EOL]     buf.close(); [EOL]     buf = new TokenBuffer(null); [EOL]     buf.writeStartObject(); [EOL]     buf.writeNumberField("num", 1.25); [EOL]     buf.writeEndObject(); [EOL]     jp = buf.asParser(); [EOL]     assertNull(jp.getCurrentToken()); [EOL]     assertToken(JsonToken.START_OBJECT, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertToken(JsonToken.FIELD_NAME, jp.nextToken()); [EOL]     assertEquals("num", jp.getCurrentName()); [EOL]     jp.overrideCurrentName("bah"); [EOL]     assertEquals("bah", jp.getCurrentName()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_FLOAT, jp.nextToken()); [EOL]     assertEquals(1.25, jp.getDoubleValue()); [EOL]     assertEquals("bah", jp.getCurrentName()); [EOL]     assertToken(JsonToken.END_OBJECT, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertNull(jp.nextToken()); [EOL]     jp.close(); [EOL]     buf.close(); [EOL] }
public void testWithJsonParserSequenceSimple() throws IOException { [EOL]     TokenBuffer buf = new TokenBuffer(null); [EOL]     buf.writeStartArray(); [EOL]     buf.writeString("test"); [EOL]     JsonParser jp = createParserUsingReader("[ true, null ]"); [EOL]     JsonParserSequence seq = JsonParserSequence.createFlattened(buf.asParser(), jp); [EOL]     assertEquals(2, seq.containedParsersCount()); [EOL]     assertFalse(jp.isClosed()); [EOL]     assertFalse(seq.hasCurrentToken()); [EOL]     assertNull(seq.getCurrentToken()); [EOL]     assertNull(seq.getCurrentName()); [EOL]     assertToken(JsonToken.START_ARRAY, seq.nextToken()); [EOL]     assertToken(JsonToken.VALUE_STRING, seq.nextToken()); [EOL]     assertEquals("test", seq.getText()); [EOL]     assertToken(JsonToken.START_ARRAY, seq.nextToken()); [EOL]     assertToken(JsonToken.VALUE_TRUE, seq.nextToken()); [EOL]     assertToken(JsonToken.VALUE_NULL, seq.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, seq.nextToken()); [EOL]     assertNull(seq.nextToken()); [EOL]     assertNull(seq.nextToken()); [EOL]     assertTrue(jp.isClosed()); [EOL]     jp.close(); [EOL]     buf.close(); [EOL] }
public void testWithJsonParserSequenceSimple() throws IOException { [EOL]     TokenBuffer buf = new TokenBuffer(null); [EOL]     buf.writeStartArray(); [EOL]     buf.writeString("test"); [EOL]     JsonParser jp = createParserUsingReader("[ true, null ]"); [EOL]     JsonParserSequence seq = JsonParserSequence.createFlattened(buf.asParser(), jp); [EOL]     assertEquals(2, seq.containedParsersCount()); [EOL]     assertFalse(jp.isClosed()); [EOL]     assertFalse(seq.hasCurrentToken()); [EOL]     assertNull(seq.getCurrentToken()); [EOL]     assertNull(seq.getCurrentName()); [EOL]     assertToken(JsonToken.START_ARRAY, seq.nextToken()); [EOL]     assertToken(JsonToken.VALUE_STRING, seq.nextToken()); [EOL]     assertEquals("test", seq.getText()); [EOL]     assertToken(JsonToken.START_ARRAY, seq.nextToken()); [EOL]     assertToken(JsonToken.VALUE_TRUE, seq.nextToken()); [EOL]     assertToken(JsonToken.VALUE_NULL, seq.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, seq.nextToken()); [EOL]     assertNull(seq.nextToken()); [EOL]     assertNull(seq.nextToken()); [EOL]     assertTrue(jp.isClosed()); [EOL]     jp.close(); [EOL]     buf.close(); [EOL] }
public void testSimpleObject() throws IOException { [EOL]     TokenBuffer buf = new TokenBuffer(null); [EOL]     assertTrue(buf.getOutputContext().inRoot()); [EOL]     buf.writeStartObject(); [EOL]     assertTrue(buf.getOutputContext().inObject()); [EOL]     buf.writeEndObject(); [EOL]     assertTrue(buf.getOutputContext().inRoot()); [EOL]     JsonParser jp = buf.asParser(); [EOL]     assertNull(jp.getCurrentToken()); [EOL]     assertTrue(jp.getParsingContext().inRoot()); [EOL]     assertToken(JsonToken.START_OBJECT, jp.nextToken()); [EOL]     assertTrue(jp.getParsingContext().inObject()); [EOL]     assertToken(JsonToken.END_OBJECT, jp.nextToken()); [EOL]     assertTrue(jp.getParsingContext().inRoot()); [EOL]     assertNull(jp.nextToken()); [EOL]     jp.close(); [EOL]     buf.close(); [EOL]     buf = new TokenBuffer(null); [EOL]     buf.writeStartObject(); [EOL]     buf.writeNumberField("num", 1.25); [EOL]     buf.writeEndObject(); [EOL]     jp = buf.asParser(); [EOL]     assertNull(jp.getCurrentToken()); [EOL]     assertToken(JsonToken.START_OBJECT, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertToken(JsonToken.FIELD_NAME, jp.nextToken()); [EOL]     assertEquals("num", jp.getCurrentName()); [EOL]     jp.overrideCurrentName("bah"); [EOL]     assertEquals("bah", jp.getCurrentName()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_FLOAT, jp.nextToken()); [EOL]     assertEquals(1.25, jp.getDoubleValue()); [EOL]     assertEquals("bah", jp.getCurrentName()); [EOL]     assertToken(JsonToken.END_OBJECT, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertNull(jp.nextToken()); [EOL]     jp.close(); [EOL]     buf.close(); [EOL] }
public void testSimpleObject() throws IOException { [EOL]     TokenBuffer buf = new TokenBuffer(null); [EOL]     assertTrue(buf.getOutputContext().inRoot()); [EOL]     buf.writeStartObject(); [EOL]     assertTrue(buf.getOutputContext().inObject()); [EOL]     buf.writeEndObject(); [EOL]     assertTrue(buf.getOutputContext().inRoot()); [EOL]     JsonParser jp = buf.asParser(); [EOL]     assertNull(jp.getCurrentToken()); [EOL]     assertTrue(jp.getParsingContext().inRoot()); [EOL]     assertToken(JsonToken.START_OBJECT, jp.nextToken()); [EOL]     assertTrue(jp.getParsingContext().inObject()); [EOL]     assertToken(JsonToken.END_OBJECT, jp.nextToken()); [EOL]     assertTrue(jp.getParsingContext().inRoot()); [EOL]     assertNull(jp.nextToken()); [EOL]     jp.close(); [EOL]     buf.close(); [EOL]     buf = new TokenBuffer(null); [EOL]     buf.writeStartObject(); [EOL]     buf.writeNumberField("num", 1.25); [EOL]     buf.writeEndObject(); [EOL]     jp = buf.asParser(); [EOL]     assertNull(jp.getCurrentToken()); [EOL]     assertToken(JsonToken.START_OBJECT, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertToken(JsonToken.FIELD_NAME, jp.nextToken()); [EOL]     assertEquals("num", jp.getCurrentName()); [EOL]     jp.overrideCurrentName("bah"); [EOL]     assertEquals("bah", jp.getCurrentName()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_FLOAT, jp.nextToken()); [EOL]     assertEquals(1.25, jp.getDoubleValue()); [EOL]     assertEquals("bah", jp.getCurrentName()); [EOL]     assertToken(JsonToken.END_OBJECT, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertNull(jp.nextToken()); [EOL]     jp.close(); [EOL]     buf.close(); [EOL] }
public void testSimpleObject() throws IOException { [EOL]     TokenBuffer buf = new TokenBuffer(null); [EOL]     assertTrue(buf.getOutputContext().inRoot()); [EOL]     buf.writeStartObject(); [EOL]     assertTrue(buf.getOutputContext().inObject()); [EOL]     buf.writeEndObject(); [EOL]     assertTrue(buf.getOutputContext().inRoot()); [EOL]     JsonParser jp = buf.asParser(); [EOL]     assertNull(jp.getCurrentToken()); [EOL]     assertTrue(jp.getParsingContext().inRoot()); [EOL]     assertToken(JsonToken.START_OBJECT, jp.nextToken()); [EOL]     assertTrue(jp.getParsingContext().inObject()); [EOL]     assertToken(JsonToken.END_OBJECT, jp.nextToken()); [EOL]     assertTrue(jp.getParsingContext().inRoot()); [EOL]     assertNull(jp.nextToken()); [EOL]     jp.close(); [EOL]     buf.close(); [EOL]     buf = new TokenBuffer(null); [EOL]     buf.writeStartObject(); [EOL]     buf.writeNumberField("num", 1.25); [EOL]     buf.writeEndObject(); [EOL]     jp = buf.asParser(); [EOL]     assertNull(jp.getCurrentToken()); [EOL]     assertToken(JsonToken.START_OBJECT, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertToken(JsonToken.FIELD_NAME, jp.nextToken()); [EOL]     assertEquals("num", jp.getCurrentName()); [EOL]     jp.overrideCurrentName("bah"); [EOL]     assertEquals("bah", jp.getCurrentName()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_FLOAT, jp.nextToken()); [EOL]     assertEquals(1.25, jp.getDoubleValue()); [EOL]     assertEquals("bah", jp.getCurrentName()); [EOL]     assertToken(JsonToken.END_OBJECT, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertNull(jp.nextToken()); [EOL]     jp.close(); [EOL]     buf.close(); [EOL] }
public void testSimpleObject() throws IOException { [EOL]     TokenBuffer buf = new TokenBuffer(null); [EOL]     assertTrue(buf.getOutputContext().inRoot()); [EOL]     buf.writeStartObject(); [EOL]     assertTrue(buf.getOutputContext().inObject()); [EOL]     buf.writeEndObject(); [EOL]     assertTrue(buf.getOutputContext().inRoot()); [EOL]     JsonParser jp = buf.asParser(); [EOL]     assertNull(jp.getCurrentToken()); [EOL]     assertTrue(jp.getParsingContext().inRoot()); [EOL]     assertToken(JsonToken.START_OBJECT, jp.nextToken()); [EOL]     assertTrue(jp.getParsingContext().inObject()); [EOL]     assertToken(JsonToken.END_OBJECT, jp.nextToken()); [EOL]     assertTrue(jp.getParsingContext().inRoot()); [EOL]     assertNull(jp.nextToken()); [EOL]     jp.close(); [EOL]     buf.close(); [EOL]     buf = new TokenBuffer(null); [EOL]     buf.writeStartObject(); [EOL]     buf.writeNumberField("num", 1.25); [EOL]     buf.writeEndObject(); [EOL]     jp = buf.asParser(); [EOL]     assertNull(jp.getCurrentToken()); [EOL]     assertToken(JsonToken.START_OBJECT, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertToken(JsonToken.FIELD_NAME, jp.nextToken()); [EOL]     assertEquals("num", jp.getCurrentName()); [EOL]     jp.overrideCurrentName("bah"); [EOL]     assertEquals("bah", jp.getCurrentName()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_FLOAT, jp.nextToken()); [EOL]     assertEquals(1.25, jp.getDoubleValue()); [EOL]     assertEquals("bah", jp.getCurrentName()); [EOL]     assertToken(JsonToken.END_OBJECT, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertNull(jp.nextToken()); [EOL]     jp.close(); [EOL]     buf.close(); [EOL] }
public void testSimpleObject() throws IOException { [EOL]     TokenBuffer buf = new TokenBuffer(null); [EOL]     assertTrue(buf.getOutputContext().inRoot()); [EOL]     buf.writeStartObject(); [EOL]     assertTrue(buf.getOutputContext().inObject()); [EOL]     buf.writeEndObject(); [EOL]     assertTrue(buf.getOutputContext().inRoot()); [EOL]     JsonParser jp = buf.asParser(); [EOL]     assertNull(jp.getCurrentToken()); [EOL]     assertTrue(jp.getParsingContext().inRoot()); [EOL]     assertToken(JsonToken.START_OBJECT, jp.nextToken()); [EOL]     assertTrue(jp.getParsingContext().inObject()); [EOL]     assertToken(JsonToken.END_OBJECT, jp.nextToken()); [EOL]     assertTrue(jp.getParsingContext().inRoot()); [EOL]     assertNull(jp.nextToken()); [EOL]     jp.close(); [EOL]     buf.close(); [EOL]     buf = new TokenBuffer(null); [EOL]     buf.writeStartObject(); [EOL]     buf.writeNumberField("num", 1.25); [EOL]     buf.writeEndObject(); [EOL]     jp = buf.asParser(); [EOL]     assertNull(jp.getCurrentToken()); [EOL]     assertToken(JsonToken.START_OBJECT, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertToken(JsonToken.FIELD_NAME, jp.nextToken()); [EOL]     assertEquals("num", jp.getCurrentName()); [EOL]     jp.overrideCurrentName("bah"); [EOL]     assertEquals("bah", jp.getCurrentName()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_FLOAT, jp.nextToken()); [EOL]     assertEquals(1.25, jp.getDoubleValue()); [EOL]     assertEquals("bah", jp.getCurrentName()); [EOL]     assertToken(JsonToken.END_OBJECT, jp.nextToken()); [EOL]     assertNull(jp.getCurrentName()); [EOL]     assertNull(jp.nextToken()); [EOL]     jp.close(); [EOL]     buf.close(); [EOL] }
public void testDateTypes() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.enableDefaultTyping(); [EOL]     ObjectListBean input = new ObjectListBean(); [EOL]     List<Object> inputList = new ArrayList<Object>(); [EOL]     inputList.add(TimeZone.getTimeZone("EST")); [EOL]     inputList.add(Locale.CHINESE); [EOL]     input.values = inputList; [EOL]     String json = m.writeValueAsString(input); [EOL]     ObjectListBean output = m.readValue(json, ObjectListBean.class); [EOL]     List<Object> outputList = output.values; [EOL]     assertEquals(2, outputList.size()); [EOL]     assertTrue(outputList.get(0) instanceof TimeZone); [EOL]     assertTrue(outputList.get(1) instanceof Locale); [EOL] }
public void testDateTypes() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.enableDefaultTyping(); [EOL]     ObjectListBean input = new ObjectListBean(); [EOL]     List<Object> inputList = new ArrayList<Object>(); [EOL]     inputList.add(TimeZone.getTimeZone("EST")); [EOL]     inputList.add(Locale.CHINESE); [EOL]     input.values = inputList; [EOL]     String json = m.writeValueAsString(input); [EOL]     ObjectListBean output = m.readValue(json, ObjectListBean.class); [EOL]     List<Object> outputList = output.values; [EOL]     assertEquals(2, outputList.size()); [EOL]     assertTrue(outputList.get(0) instanceof TimeZone); [EOL]     assertTrue(outputList.get(1) instanceof Locale); [EOL] }
public void testDateTypes() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.enableDefaultTyping(); [EOL]     ObjectListBean input = new ObjectListBean(); [EOL]     List<Object> inputList = new ArrayList<Object>(); [EOL]     inputList.add(TimeZone.getTimeZone("EST")); [EOL]     inputList.add(Locale.CHINESE); [EOL]     input.values = inputList; [EOL]     String json = m.writeValueAsString(input); [EOL]     ObjectListBean output = m.readValue(json, ObjectListBean.class); [EOL]     List<Object> outputList = output.values; [EOL]     assertEquals(2, outputList.size()); [EOL]     assertTrue(outputList.get(0) instanceof TimeZone); [EOL]     assertTrue(outputList.get(1) instanceof Locale); [EOL] }
public void testDateTypes() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.enableDefaultTyping(); [EOL]     ObjectListBean input = new ObjectListBean(); [EOL]     List<Object> inputList = new ArrayList<Object>(); [EOL]     inputList.add(TimeZone.getTimeZone("EST")); [EOL]     inputList.add(Locale.CHINESE); [EOL]     input.values = inputList; [EOL]     String json = m.writeValueAsString(input); [EOL]     ObjectListBean output = m.readValue(json, ObjectListBean.class); [EOL]     List<Object> outputList = output.values; [EOL]     assertEquals(2, outputList.size()); [EOL]     assertTrue(outputList.get(0) instanceof TimeZone); [EOL]     assertTrue(outputList.get(1) instanceof Locale); [EOL] }
public void testJavaType() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     TypeFactory tf = TypeFactory.defaultInstance(); [EOL]     String json = mapper.writeValueAsString(tf.constructType(String.class)); [EOL]     assertEquals(quote(java.lang.String.class.getName()), json); [EOL]     JavaType t = mapper.readValue(json, JavaType.class); [EOL]     assertNotNull(t); [EOL]     assertEquals(String.class, t.getRawClass()); [EOL] }
public void testJavaType() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     TypeFactory tf = TypeFactory.defaultInstance(); [EOL]     String json = mapper.writeValueAsString(tf.constructType(String.class)); [EOL]     assertEquals(quote(java.lang.String.class.getName()), json); [EOL]     JavaType t = mapper.readValue(json, JavaType.class); [EOL]     assertNotNull(t); [EOL]     assertEquals(String.class, t.getRawClass()); [EOL] }
public void testPropertyWithSubtypes() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerSubtypes(SubB.class, SubC.class, SubD.class); [EOL]     String json = mapper.writeValueAsString(new PropertyBean(new SubC())); [EOL]     PropertyBean result = mapper.readValue(json, PropertyBean.class); [EOL]     assertSame(SubC.class, result.value.getClass()); [EOL] }
public void testJavaType() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     TypeFactory tf = TypeFactory.defaultInstance(); [EOL]     String json = mapper.writeValueAsString(tf.constructType(String.class)); [EOL]     assertEquals(quote(java.lang.String.class.getName()), json); [EOL]     JavaType t = mapper.readValue(json, JavaType.class); [EOL]     assertNotNull(t); [EOL]     assertEquals(String.class, t.getRawClass()); [EOL] }
public void testJavaType() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     TypeFactory tf = TypeFactory.defaultInstance(); [EOL]     String json = mapper.writeValueAsString(tf.constructType(String.class)); [EOL]     assertEquals(quote(java.lang.String.class.getName()), json); [EOL]     JavaType t = mapper.readValue(json, JavaType.class); [EOL]     assertNotNull(t); [EOL]     assertEquals(String.class, t.getRawClass()); [EOL] }
@SuppressWarnings("unchecked") [EOL] public void testPOJOString() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     ObjectNode n = mapper.getNodeFactory().objectNode(); [EOL]     n.set("pojo", mapper.getNodeFactory().POJONode("abc")); [EOL]     StringWriter sw = new StringWriter(); [EOL]     JsonGenerator jg = mapper.getFactory().createGenerator(sw); [EOL]     mapper.writeTree(jg, n); [EOL]     Map<String, Object> result = (Map<String, Object>) mapper.readValue(sw.toString(), Map.class); [EOL]     assertEquals(1, result.size()); [EOL]     assertEquals("abc", result.get("pojo")); [EOL] }
@SuppressWarnings("unchecked") [EOL] public void testPOJOString() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     ObjectNode n = mapper.getNodeFactory().objectNode(); [EOL]     n.set("pojo", mapper.getNodeFactory().POJONode("abc")); [EOL]     StringWriter sw = new StringWriter(); [EOL]     JsonGenerator jg = mapper.getFactory().createGenerator(sw); [EOL]     mapper.writeTree(jg, n); [EOL]     Map<String, Object> result = (Map<String, Object>) mapper.readValue(sw.toString(), Map.class); [EOL]     assertEquals(1, result.size()); [EOL]     assertEquals("abc", result.get("pojo")); [EOL] }
public void testDateWithJsonFormat() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     String json; [EOL]     mapper.disable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS); [EOL]     json = mapper.writeValueAsString(new DateAsNumberBean(0L)); [EOL]     assertEquals("{\"date\":0}", json); [EOL]     mapper.enable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS); [EOL]     json = mapper.writer().with(getUTCTimeZone()).writeValueAsString(new DateAsStringBean(0L)); [EOL]     assertEquals("{\"date\":\"1970-01-01\"}", json); [EOL]     json = mapper.writeValueAsString(new DateInCETBean(0L)); [EOL]     assertEquals("{\"date\":\"1970-01-01,01:00\"}", json); [EOL] }
public void testDateWithJsonFormat() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     String json; [EOL]     mapper.disable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS); [EOL]     json = mapper.writeValueAsString(new DateAsNumberBean(0L)); [EOL]     assertEquals("{\"date\":0}", json); [EOL]     mapper.enable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS); [EOL]     json = mapper.writer().with(getUTCTimeZone()).writeValueAsString(new DateAsStringBean(0L)); [EOL]     assertEquals("{\"date\":\"1970-01-01\"}", json); [EOL]     json = mapper.writeValueAsString(new DateInCETBean(0L)); [EOL]     assertEquals("{\"date\":\"1970-01-01,01:00\"}", json); [EOL] }
public void testDateWithJsonFormat() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     String json; [EOL]     mapper.disable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS); [EOL]     json = mapper.writeValueAsString(new DateAsNumberBean(0L)); [EOL]     assertEquals("{\"date\":0}", json); [EOL]     mapper.enable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS); [EOL]     json = mapper.writer().with(getUTCTimeZone()).writeValueAsString(new DateAsStringBean(0L)); [EOL]     assertEquals("{\"date\":\"1970-01-01\"}", json); [EOL]     json = mapper.writeValueAsString(new DateInCETBean(0L)); [EOL]     assertEquals("{\"date\":\"1970-01-01,01:00\"}", json); [EOL] }
public void testDateWithJsonFormat() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     String json; [EOL]     mapper.disable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS); [EOL]     json = mapper.writeValueAsString(new DateAsNumberBean(0L)); [EOL]     assertEquals("{\"date\":0}", json); [EOL]     mapper.enable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS); [EOL]     json = mapper.writer().with(getUTCTimeZone()).writeValueAsString(new DateAsStringBean(0L)); [EOL]     assertEquals("{\"date\":\"1970-01-01\"}", json); [EOL]     json = mapper.writeValueAsString(new DateInCETBean(0L)); [EOL]     assertEquals("{\"date\":\"1970-01-01,01:00\"}", json); [EOL] }
public void testDateWithJsonFormat() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     String json; [EOL]     mapper.disable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS); [EOL]     json = mapper.writeValueAsString(new DateAsNumberBean(0L)); [EOL]     assertEquals("{\"date\":0}", json); [EOL]     mapper.enable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS); [EOL]     json = mapper.writer().with(getUTCTimeZone()).writeValueAsString(new DateAsStringBean(0L)); [EOL]     assertEquals("{\"date\":\"1970-01-01\"}", json); [EOL]     json = mapper.writeValueAsString(new DateInCETBean(0L)); [EOL]     assertEquals("{\"date\":\"1970-01-01,01:00\"}", json); [EOL] }
public void testDateWithJsonFormat() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     String json; [EOL]     mapper.disable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS); [EOL]     json = mapper.writeValueAsString(new DateAsNumberBean(0L)); [EOL]     assertEquals("{\"date\":0}", json); [EOL]     mapper.enable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS); [EOL]     json = mapper.writer().with(getUTCTimeZone()).writeValueAsString(new DateAsStringBean(0L)); [EOL]     assertEquals("{\"date\":\"1970-01-01\"}", json); [EOL]     json = mapper.writeValueAsString(new DateInCETBean(0L)); [EOL]     assertEquals("{\"date\":\"1970-01-01,01:00\"}", json); [EOL] }
public void testDateWithJsonFormat() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     String json; [EOL]     mapper.disable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS); [EOL]     json = mapper.writeValueAsString(new DateAsNumberBean(0L)); [EOL]     assertEquals("{\"date\":0}", json); [EOL]     mapper.enable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS); [EOL]     json = mapper.writer().with(getUTCTimeZone()).writeValueAsString(new DateAsStringBean(0L)); [EOL]     assertEquals("{\"date\":\"1970-01-01\"}", json); [EOL]     json = mapper.writeValueAsString(new DateInCETBean(0L)); [EOL]     assertEquals("{\"date\":\"1970-01-01,01:00\"}", json); [EOL] }
public void testClassAnnotationForLists() throws Exception { [EOL]     ConvertingBeanContainer container = objectReader(ConvertingBeanContainer.class).readValue("{\"values\":[[1,2],[3,4]]}"); [EOL]     assertNotNull(container); [EOL]     assertNotNull(container.values); [EOL]     assertEquals(2, container.values.size()); [EOL]     assertEquals(4, container.values.get(1).y); [EOL] }
public void testClassAnnotationForLists() throws Exception { [EOL]     ConvertingBeanContainer container = objectReader(ConvertingBeanContainer.class).readValue("{\"values\":[[1,2],[3,4]]}"); [EOL]     assertNotNull(container); [EOL]     assertNotNull(container.values); [EOL]     assertEquals(2, container.values.size()); [EOL]     assertEquals(4, container.values.get(1).y); [EOL] }
public void testSimple() throws Exception { [EOL]     final String JSON = SAMPLE_DOC_JSON_SPEC; [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     for (int type = 0; type < 2; ++type) { [EOL]         JsonNode result; [EOL]         if (type == 0) { [EOL]             result = mapper.readTree(new StringReader(JSON)); [EOL]         } else { [EOL]             result = mapper.readTree(JSON); [EOL]         } [EOL]         assertType(result, ObjectNode.class); [EOL]         assertEquals(1, result.size()); [EOL]         assertTrue(result.isObject()); [EOL]         ObjectNode main = (ObjectNode) result; [EOL]         assertEquals("Image", main.fieldNames().next()); [EOL]         JsonNode ob = main.elements().next(); [EOL]         assertType(ob, ObjectNode.class); [EOL]         ObjectNode imageMap = (ObjectNode) ob; [EOL]         assertEquals(5, imageMap.size()); [EOL]         ob = imageMap.get("Width"); [EOL]         assertTrue(ob.isIntegralNumber()); [EOL]         assertFalse(ob.isFloatingPointNumber()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_WIDTH, ob.intValue()); [EOL]         ob = imageMap.get("Height"); [EOL]         assertTrue(ob.isIntegralNumber()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_HEIGHT, ob.intValue()); [EOL]         ob = imageMap.get("Title"); [EOL]         assertTrue(ob.isTextual()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_TITLE, ob.textValue()); [EOL]         ob = imageMap.get("Thumbnail"); [EOL]         assertType(ob, ObjectNode.class); [EOL]         ObjectNode tn = (ObjectNode) ob; [EOL]         ob = tn.get("Url"); [EOL]         assertTrue(ob.isTextual()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_TN_URL, ob.textValue()); [EOL]         ob = tn.get("Height"); [EOL]         assertTrue(ob.isIntegralNumber()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_TN_HEIGHT, ob.intValue()); [EOL]         ob = tn.get("Width"); [EOL]         assertTrue(ob.isTextual()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_TN_WIDTH, ob.textValue()); [EOL]         ob = imageMap.get("IDs"); [EOL]         assertTrue(ob.isArray()); [EOL]         ArrayNode idList = (ArrayNode) ob; [EOL]         assertEquals(4, idList.size()); [EOL]         assertEquals(4, calcLength(idList.elements())); [EOL]         assertEquals(4, calcLength(idList.iterator())); [EOL]         { [EOL]             int[] values = new int[] { SAMPLE_SPEC_VALUE_TN_ID1, SAMPLE_SPEC_VALUE_TN_ID2, SAMPLE_SPEC_VALUE_TN_ID3, SAMPLE_SPEC_VALUE_TN_ID4 }; [EOL]             for (int i = 0; i < values.length; ++i) { [EOL]                 assertEquals(values[i], idList.get(i).intValue()); [EOL]             } [EOL]             int i = 0; [EOL]             for (JsonNode n : idList) { [EOL]                 assertEquals(values[i], n.intValue()); [EOL]                 ++i; [EOL]             } [EOL]         } [EOL]     } [EOL] }
public void testNonMatching() throws Exception { [EOL]     JsonNode root = _buildTree(); [EOL]     assertNull(root.findValue("boogaboo")); [EOL]     assertNull(root.findParent("boogaboo")); [EOL]     JsonNode n = root.findPath("boogaboo"); [EOL]     assertNotNull(n); [EOL]     assertTrue(n.isMissingNode()); [EOL]     assertTrue(root.findValues("boogaboo").isEmpty()); [EOL]     assertTrue(root.findParents("boogaboo").isEmpty()); [EOL] }
public void testNonMatching() throws Exception { [EOL]     JsonNode root = _buildTree(); [EOL]     assertNull(root.findValue("boogaboo")); [EOL]     assertNull(root.findParent("boogaboo")); [EOL]     JsonNode n = root.findPath("boogaboo"); [EOL]     assertNotNull(n); [EOL]     assertTrue(n.isMissingNode()); [EOL]     assertTrue(root.findValues("boogaboo").isEmpty()); [EOL]     assertTrue(root.findParents("boogaboo").isEmpty()); [EOL] }
public void testArraysOfArrays() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL, JsonTypeInfo.As.PROPERTY); [EOL]     Object value = new Object[][] { new Object[] {} }; [EOL]     String json = mapper.writeValueAsString(value); [EOL]     _testArraysAs(mapper, json, Object[][].class); [EOL]     _testArraysAs(mapper, json, Object[].class); [EOL]     _testArraysAs(mapper, json, Object.class); [EOL] }
public void testArraysOfArrays() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL, JsonTypeInfo.As.PROPERTY); [EOL]     Object value = new Object[][] { new Object[] {} }; [EOL]     String json = mapper.writeValueAsString(value); [EOL]     _testArraysAs(mapper, json, Object[][].class); [EOL]     _testArraysAs(mapper, json, Object[].class); [EOL]     _testArraysAs(mapper, json, Object.class); [EOL] }
public void testArraysOfArrays() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL, JsonTypeInfo.As.PROPERTY); [EOL]     Object value = new Object[][] { new Object[] {} }; [EOL]     String json = mapper.writeValueAsString(value); [EOL]     _testArraysAs(mapper, json, Object[][].class); [EOL]     _testArraysAs(mapper, json, Object[].class); [EOL]     _testArraysAs(mapper, json, Object.class); [EOL] }
public void testArraysOfArrays() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL, JsonTypeInfo.As.PROPERTY); [EOL]     Object value = new Object[][] { new Object[] {} }; [EOL]     String json = mapper.writeValueAsString(value); [EOL]     _testArraysAs(mapper, json, Object[][].class); [EOL]     _testArraysAs(mapper, json, Object[].class); [EOL]     _testArraysAs(mapper, json, Object.class); [EOL] }
public void testSubTypesFor356() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     Version v = mapper.version(); [EOL]     if (v.getMajorVersion() == 1 && v.getMinorVersion() == 6) { [EOL]         System.err.println("Note: skipping test for Jackson 1.6"); [EOL]         return; [EOL]     } [EOL]     JSONResponse<List<Parent>> input = new JSONResponse<List<Parent>>(); [EOL]     List<Parent> embedded = new ArrayList<Parent>(); [EOL]     embedded.add(new Child1()); [EOL]     embedded.add(new Child2()); [EOL]     input.setResult(embedded); [EOL]     mapper.configure(MapperFeature.USE_STATIC_TYPING, true); [EOL]     JavaType rootType = TypeFactory.defaultInstance().constructType(new TypeReference<JSONResponse<List<Parent>>>() { [EOL]     }); [EOL]     byte[] json = mapper.writerWithType(rootType).writeValueAsBytes(input); [EOL]     JSONResponse<List<Parent>> out = mapper.readValue(json, 0, json.length, rootType); [EOL]     List<Parent> deserializedContent = (List<Parent>) out.getResult(); [EOL]     assertEquals(2, deserializedContent.size()); [EOL]     assertTrue(deserializedContent.get(0) instanceof Parent); [EOL]     assertTrue(deserializedContent.get(0) instanceof Child1); [EOL]     assertFalse(deserializedContent.get(0) instanceof Child2); [EOL]     assertTrue(deserializedContent.get(1) instanceof Child2); [EOL]     assertFalse(deserializedContent.get(1) instanceof Child1); [EOL]     assertEquals("PARENT", ((Child1) deserializedContent.get(0)).parentContent); [EOL]     assertEquals("PARENT", ((Child2) deserializedContent.get(1)).parentContent); [EOL]     assertEquals("CHILD1", ((Child1) deserializedContent.get(0)).childContent1); [EOL]     assertEquals("CHILD2", ((Child2) deserializedContent.get(1)).childContent2); [EOL] }
public void testSubtypesViaModule() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     SimpleModule module = new SimpleModule(); [EOL]     module.registerSubtypes(SubB.class, SubC.class, SubD.class); [EOL]     mapper.registerModule(module); [EOL]     String json = mapper.writeValueAsString(new PropertyBean(new SubC())); [EOL]     PropertyBean result = mapper.readValue(json, PropertyBean.class); [EOL]     assertSame(SubC.class, result.value.getClass()); [EOL] }
public void testSubtypesViaModule() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     SimpleModule module = new SimpleModule(); [EOL]     module.registerSubtypes(SubB.class, SubC.class, SubD.class); [EOL]     mapper.registerModule(module); [EOL]     String json = mapper.writeValueAsString(new PropertyBean(new SubC())); [EOL]     PropertyBean result = mapper.readValue(json, PropertyBean.class); [EOL]     assertSame(SubC.class, result.value.getClass()); [EOL] }
public void testSubtypesViaModule() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     SimpleModule module = new SimpleModule(); [EOL]     module.registerSubtypes(SubB.class, SubC.class, SubD.class); [EOL]     mapper.registerModule(module); [EOL]     String json = mapper.writeValueAsString(new PropertyBean(new SubC())); [EOL]     PropertyBean result = mapper.readValue(json, PropertyBean.class); [EOL]     assertSame(SubC.class, result.value.getClass()); [EOL] }
public void testOverriddenDefaultNulls() throws Exception { [EOL]     DefaultSerializerProvider sp = new DefaultSerializerProvider.Impl(); [EOL]     sp.setNullValueSerializer(new NullSerializer()); [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.setSerializerProvider(sp); [EOL]     assertEquals("\"foobar\"", m.writeValueAsString(null)); [EOL] }
public void testOverriddenDefaultNulls() throws Exception { [EOL]     DefaultSerializerProvider sp = new DefaultSerializerProvider.Impl(); [EOL]     sp.setNullValueSerializer(new NullSerializer()); [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.setSerializerProvider(sp); [EOL]     assertEquals("\"foobar\"", m.writeValueAsString(null)); [EOL] }
public void testDefaultKeySerializer() throws IOException { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.getSerializerProvider().setDefaultKeySerializer(new DefaultKeySerializer()); [EOL]     Map<String, String> map = new HashMap<String, String>(); [EOL]     map.put("a", "b"); [EOL]     assertEquals("{\"DEFAULT:a\":\"b\"}", m.writeValueAsString(map)); [EOL] }
public void testPropertyWithSubtypes() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerSubtypes(SubB.class, SubC.class, SubD.class); [EOL]     String json = mapper.writeValueAsString(new PropertyBean(new SubC())); [EOL]     PropertyBean result = mapper.readValue(json, PropertyBean.class); [EOL]     assertSame(SubC.class, result.value.getClass()); [EOL] }
public void testPropertyWithSubtypes() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerSubtypes(SubB.class, SubC.class, SubD.class); [EOL]     String json = mapper.writeValueAsString(new PropertyBean(new SubC())); [EOL]     PropertyBean result = mapper.readValue(json, PropertyBean.class); [EOL]     assertSame(SubC.class, result.value.getClass()); [EOL] }
public void testPropertyWithSubtypes() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerSubtypes(SubB.class, SubC.class, SubD.class); [EOL]     String json = mapper.writeValueAsString(new PropertyBean(new SubC())); [EOL]     PropertyBean result = mapper.readValue(json, PropertyBean.class); [EOL]     assertSame(SubC.class, result.value.getClass()); [EOL] }
public void testPropertyWithSubtypes() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerSubtypes(SubB.class, SubC.class, SubD.class); [EOL]     String json = mapper.writeValueAsString(new PropertyBean(new SubC())); [EOL]     PropertyBean result = mapper.readValue(json, PropertyBean.class); [EOL]     assertSame(SubC.class, result.value.getClass()); [EOL] }
public void testSubtypesViaModule() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     SimpleModule module = new SimpleModule(); [EOL]     module.registerSubtypes(SubB.class, SubC.class, SubD.class); [EOL]     mapper.registerModule(module); [EOL]     String json = mapper.writeValueAsString(new PropertyBean(new SubC())); [EOL]     PropertyBean result = mapper.readValue(json, PropertyBean.class); [EOL]     assertSame(SubC.class, result.value.getClass()); [EOL] }
public void testSubtypesViaModule() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     SimpleModule module = new SimpleModule(); [EOL]     module.registerSubtypes(SubB.class, SubC.class, SubD.class); [EOL]     mapper.registerModule(module); [EOL]     String json = mapper.writeValueAsString(new PropertyBean(new SubC())); [EOL]     PropertyBean result = mapper.readValue(json, PropertyBean.class); [EOL]     assertSame(SubC.class, result.value.getClass()); [EOL] }
public void testSubtypesViaModule() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     SimpleModule module = new SimpleModule(); [EOL]     module.registerSubtypes(SubB.class, SubC.class, SubD.class); [EOL]     mapper.registerModule(module); [EOL]     String json = mapper.writeValueAsString(new PropertyBean(new SubC())); [EOL]     PropertyBean result = mapper.readValue(json, PropertyBean.class); [EOL]     assertSame(SubC.class, result.value.getClass()); [EOL] }
public void testSimpleRenamed2() { [EOL]     POJOPropertiesCollector coll = collector(mapper, RenamedProperties2.class, true); [EOL]     Map<String, POJOPropertyBuilder> props = coll.getPropertyMap(); [EOL]     assertEquals(1, props.size()); [EOL]     POJOPropertyBuilder prop = props.get("renamed"); [EOL]     assertNotNull(prop); [EOL]     assertTrue(prop.hasSetter()); [EOL]     assertTrue(prop.hasGetter()); [EOL]     assertFalse(prop.hasField()); [EOL] }
public void testSimpleRenamed2() { [EOL]     POJOPropertiesCollector coll = collector(mapper, RenamedProperties2.class, true); [EOL]     Map<String, POJOPropertyBuilder> props = coll.getPropertyMap(); [EOL]     assertEquals(1, props.size()); [EOL]     POJOPropertyBuilder prop = props.get("renamed"); [EOL]     assertNotNull(prop); [EOL]     assertTrue(prop.hasSetter()); [EOL]     assertTrue(prop.hasGetter()); [EOL]     assertFalse(prop.hasField()); [EOL] }
public void testSimpleRenamed2() { [EOL]     POJOPropertiesCollector coll = collector(mapper, RenamedProperties2.class, true); [EOL]     Map<String, POJOPropertyBuilder> props = coll.getPropertyMap(); [EOL]     assertEquals(1, props.size()); [EOL]     POJOPropertyBuilder prop = props.get("renamed"); [EOL]     assertNotNull(prop); [EOL]     assertTrue(prop.hasSetter()); [EOL]     assertTrue(prop.hasGetter()); [EOL]     assertFalse(prop.hasField()); [EOL] }
public void testEscapingUsingMapper() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.configure(JsonGenerator.Feature.ESCAPE_NON_ASCII, true); [EOL]     assertEquals(quote("\\u0101"), mapper.writeValueAsString(String.valueOf((char) 257))); [EOL] }
public void testEscapingUsingMapper() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.configure(JsonGenerator.Feature.ESCAPE_NON_ASCII, true); [EOL]     assertEquals(quote("\\u0101"), mapper.writeValueAsString(String.valueOf((char) 257))); [EOL] }
public void testDateWithJsonFormat() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     String json; [EOL]     mapper.disable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS); [EOL]     json = mapper.writeValueAsString(new DateAsNumberBean(0L)); [EOL]     assertEquals("{\"date\":0}", json); [EOL]     mapper.enable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS); [EOL]     json = mapper.writer().with(getUTCTimeZone()).writeValueAsString(new DateAsStringBean(0L)); [EOL]     assertEquals("{\"date\":\"1970-01-01\"}", json); [EOL]     json = mapper.writeValueAsString(new DateInCETBean(0L)); [EOL]     assertEquals("{\"date\":\"1970-01-01,01:00\"}", json); [EOL] }
public void testDateWithJsonFormat() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     String json; [EOL]     mapper.disable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS); [EOL]     json = mapper.writeValueAsString(new DateAsNumberBean(0L)); [EOL]     assertEquals("{\"date\":0}", json); [EOL]     mapper.enable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS); [EOL]     json = mapper.writer().with(getUTCTimeZone()).writeValueAsString(new DateAsStringBean(0L)); [EOL]     assertEquals("{\"date\":\"1970-01-01\"}", json); [EOL]     json = mapper.writeValueAsString(new DateInCETBean(0L)); [EOL]     assertEquals("{\"date\":\"1970-01-01,01:00\"}", json); [EOL] }
public void testIndentWithPassedGenerator() throws Exception { [EOL]     Indentable input = new Indentable(); [EOL]     assertEquals("{\"a\":3}", MAPPER.writeValueAsString(input)); [EOL]     String LF = getLF(); [EOL]     String INDENTED = "{" + LF + "  \"a\" : 3" + LF + "}"; [EOL]     final ObjectWriter indentWriter = MAPPER.writer().with(SerializationFeature.INDENT_OUTPUT); [EOL]     assertEquals(INDENTED, indentWriter.writeValueAsString(input)); [EOL]     StringWriter sw = new StringWriter(); [EOL]     JsonGenerator jgen = MAPPER.getFactory().createGenerator(sw); [EOL]     indentWriter.writeValue(jgen, input); [EOL]     jgen.close(); [EOL]     assertEquals(INDENTED, sw.toString()); [EOL]     sw = new StringWriter(); [EOL]     ObjectMapper m2 = new ObjectMapper(); [EOL]     m2.enable(SerializationFeature.INDENT_OUTPUT); [EOL]     jgen = m2.getFactory().createGenerator(sw); [EOL]     m2.writeValue(jgen, input); [EOL]     jgen.close(); [EOL]     assertEquals(INDENTED, sw.toString()); [EOL] }
public void testIndentWithPassedGenerator() throws Exception { [EOL]     Indentable input = new Indentable(); [EOL]     assertEquals("{\"a\":3}", MAPPER.writeValueAsString(input)); [EOL]     String LF = getLF(); [EOL]     String INDENTED = "{" + LF + "  \"a\" : 3" + LF + "}"; [EOL]     final ObjectWriter indentWriter = MAPPER.writer().with(SerializationFeature.INDENT_OUTPUT); [EOL]     assertEquals(INDENTED, indentWriter.writeValueAsString(input)); [EOL]     StringWriter sw = new StringWriter(); [EOL]     JsonGenerator jgen = MAPPER.getFactory().createGenerator(sw); [EOL]     indentWriter.writeValue(jgen, input); [EOL]     jgen.close(); [EOL]     assertEquals(INDENTED, sw.toString()); [EOL]     sw = new StringWriter(); [EOL]     ObjectMapper m2 = new ObjectMapper(); [EOL]     m2.enable(SerializationFeature.INDENT_OUTPUT); [EOL]     jgen = m2.getFactory().createGenerator(sw); [EOL]     m2.writeValue(jgen, input); [EOL]     jgen.close(); [EOL]     assertEquals(INDENTED, sw.toString()); [EOL] }
public void testIndentWithPassedGenerator() throws Exception { [EOL]     Indentable input = new Indentable(); [EOL]     assertEquals("{\"a\":3}", MAPPER.writeValueAsString(input)); [EOL]     String LF = getLF(); [EOL]     String INDENTED = "{" + LF + "  \"a\" : 3" + LF + "}"; [EOL]     final ObjectWriter indentWriter = MAPPER.writer().with(SerializationFeature.INDENT_OUTPUT); [EOL]     assertEquals(INDENTED, indentWriter.writeValueAsString(input)); [EOL]     StringWriter sw = new StringWriter(); [EOL]     JsonGenerator jgen = MAPPER.getFactory().createGenerator(sw); [EOL]     indentWriter.writeValue(jgen, input); [EOL]     jgen.close(); [EOL]     assertEquals(INDENTED, sw.toString()); [EOL]     sw = new StringWriter(); [EOL]     ObjectMapper m2 = new ObjectMapper(); [EOL]     m2.enable(SerializationFeature.INDENT_OUTPUT); [EOL]     jgen = m2.getFactory().createGenerator(sw); [EOL]     m2.writeValue(jgen, input); [EOL]     jgen.close(); [EOL]     assertEquals(INDENTED, sw.toString()); [EOL] }
public void testIndentWithPassedGenerator() throws Exception { [EOL]     Indentable input = new Indentable(); [EOL]     assertEquals("{\"a\":3}", MAPPER.writeValueAsString(input)); [EOL]     String LF = getLF(); [EOL]     String INDENTED = "{" + LF + "  \"a\" : 3" + LF + "}"; [EOL]     final ObjectWriter indentWriter = MAPPER.writer().with(SerializationFeature.INDENT_OUTPUT); [EOL]     assertEquals(INDENTED, indentWriter.writeValueAsString(input)); [EOL]     StringWriter sw = new StringWriter(); [EOL]     JsonGenerator jgen = MAPPER.getFactory().createGenerator(sw); [EOL]     indentWriter.writeValue(jgen, input); [EOL]     jgen.close(); [EOL]     assertEquals(INDENTED, sw.toString()); [EOL]     sw = new StringWriter(); [EOL]     ObjectMapper m2 = new ObjectMapper(); [EOL]     m2.enable(SerializationFeature.INDENT_OUTPUT); [EOL]     jgen = m2.getFactory().createGenerator(sw); [EOL]     m2.writeValue(jgen, input); [EOL]     jgen.close(); [EOL]     assertEquals(INDENTED, sw.toString()); [EOL] }
public void testBeanArray() throws Exception { [EOL]     List<Bean1> src = new ArrayList<Bean1>(); [EOL]     List<Bean2> b2 = new ArrayList<Bean2>(); [EOL]     b2.add(new Bean2("a")); [EOL]     b2.add(new Bean2("foobar")); [EOL]     src.add(new Bean1(1, 2, b2)); [EOL]     b2 = new ArrayList<Bean2>(); [EOL]     b2.add(null); [EOL]     src.add(new Bean1(4, 5, b2)); [EOL]     StringWriter sw = new StringWriter(); [EOL]     MAPPER.writeValue(sw, src); [EOL]     List<Bean1> result = MAPPER.readValue(sw.toString(), new TypeReference<List<Bean1>>() { [EOL]     }); [EOL]     assertNotNull(result); [EOL]     assertEquals(src, result); [EOL] }
public void testBeanArray() throws Exception { [EOL]     List<Bean1> src = new ArrayList<Bean1>(); [EOL]     List<Bean2> b2 = new ArrayList<Bean2>(); [EOL]     b2.add(new Bean2("a")); [EOL]     b2.add(new Bean2("foobar")); [EOL]     src.add(new Bean1(1, 2, b2)); [EOL]     b2 = new ArrayList<Bean2>(); [EOL]     b2.add(null); [EOL]     src.add(new Bean1(4, 5, b2)); [EOL]     StringWriter sw = new StringWriter(); [EOL]     MAPPER.writeValue(sw, src); [EOL]     List<Bean1> result = MAPPER.readValue(sw.toString(), new TypeReference<List<Bean1>>() { [EOL]     }); [EOL]     assertNotNull(result); [EOL]     assertEquals(src, result); [EOL] }
public void testBeanArray() throws Exception { [EOL]     List<Bean1> src = new ArrayList<Bean1>(); [EOL]     List<Bean2> b2 = new ArrayList<Bean2>(); [EOL]     b2.add(new Bean2("a")); [EOL]     b2.add(new Bean2("foobar")); [EOL]     src.add(new Bean1(1, 2, b2)); [EOL]     b2 = new ArrayList<Bean2>(); [EOL]     b2.add(null); [EOL]     src.add(new Bean1(4, 5, b2)); [EOL]     StringWriter sw = new StringWriter(); [EOL]     MAPPER.writeValue(sw, src); [EOL]     List<Bean1> result = MAPPER.readValue(sw.toString(), new TypeReference<List<Bean1>>() { [EOL]     }); [EOL]     assertNotNull(result); [EOL]     assertEquals(src, result); [EOL] }
public void testBeanArray() throws Exception { [EOL]     List<Bean1> src = new ArrayList<Bean1>(); [EOL]     List<Bean2> b2 = new ArrayList<Bean2>(); [EOL]     b2.add(new Bean2("a")); [EOL]     b2.add(new Bean2("foobar")); [EOL]     src.add(new Bean1(1, 2, b2)); [EOL]     b2 = new ArrayList<Bean2>(); [EOL]     b2.add(null); [EOL]     src.add(new Bean1(4, 5, b2)); [EOL]     StringWriter sw = new StringWriter(); [EOL]     MAPPER.writeValue(sw, src); [EOL]     List<Bean1> result = MAPPER.readValue(sw.toString(), new TypeReference<List<Bean1>>() { [EOL]     }); [EOL]     assertNotNull(result); [EOL]     assertEquals(src, result); [EOL] }
public void testSubTypesFor356() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     Version v = mapper.version(); [EOL]     if (v.getMajorVersion() == 1 && v.getMinorVersion() == 6) { [EOL]         System.err.println("Note: skipping test for Jackson 1.6"); [EOL]         return; [EOL]     } [EOL]     JSONResponse<List<Parent>> input = new JSONResponse<List<Parent>>(); [EOL]     List<Parent> embedded = new ArrayList<Parent>(); [EOL]     embedded.add(new Child1()); [EOL]     embedded.add(new Child2()); [EOL]     input.setResult(embedded); [EOL]     mapper.configure(MapperFeature.USE_STATIC_TYPING, true); [EOL]     JavaType rootType = TypeFactory.defaultInstance().constructType(new TypeReference<JSONResponse<List<Parent>>>() { [EOL]     }); [EOL]     byte[] json = mapper.writerWithType(rootType).writeValueAsBytes(input); [EOL]     JSONResponse<List<Parent>> out = mapper.readValue(json, 0, json.length, rootType); [EOL]     List<Parent> deserializedContent = (List<Parent>) out.getResult(); [EOL]     assertEquals(2, deserializedContent.size()); [EOL]     assertTrue(deserializedContent.get(0) instanceof Parent); [EOL]     assertTrue(deserializedContent.get(0) instanceof Child1); [EOL]     assertFalse(deserializedContent.get(0) instanceof Child2); [EOL]     assertTrue(deserializedContent.get(1) instanceof Child2); [EOL]     assertFalse(deserializedContent.get(1) instanceof Child1); [EOL]     assertEquals("PARENT", ((Child1) deserializedContent.get(0)).parentContent); [EOL]     assertEquals("PARENT", ((Child2) deserializedContent.get(1)).parentContent); [EOL]     assertEquals("CHILD1", ((Child1) deserializedContent.get(0)).childContent1); [EOL]     assertEquals("CHILD2", ((Child2) deserializedContent.get(1)).childContent2); [EOL] }
public void testInvalidMultipleTypeIds() throws Exception { [EOL]     try { [EOL]         mapper.writeValueAsString(new MultipleIds()); [EOL]         fail("Should have failed"); [EOL]     } catch (JsonMappingException e) { [EOL]         verifyException(e, "multiple type ids"); [EOL]     } [EOL] }
public void testInvalidMultipleTypeIds() throws Exception { [EOL]     try { [EOL]         mapper.writeValueAsString(new MultipleIds()); [EOL]         fail("Should have failed"); [EOL]     } catch (JsonMappingException e) { [EOL]         verifyException(e, "multiple type ids"); [EOL]     } [EOL] }
public void testInvalidMultipleTypeIds() throws Exception { [EOL]     try { [EOL]         mapper.writeValueAsString(new MultipleIds()); [EOL]         fail("Should have failed"); [EOL]     } catch (JsonMappingException e) { [EOL]         verifyException(e, "multiple type ids"); [EOL]     } [EOL] }
public void testDateWithJsonFormat() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     String json; [EOL]     mapper.disable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS); [EOL]     json = mapper.writeValueAsString(new DateAsNumberBean(0L)); [EOL]     assertEquals("{\"date\":0}", json); [EOL]     mapper.enable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS); [EOL]     json = mapper.writer().with(getUTCTimeZone()).writeValueAsString(new DateAsStringBean(0L)); [EOL]     assertEquals("{\"date\":\"1970-01-01\"}", json); [EOL]     json = mapper.writeValueAsString(new DateInCETBean(0L)); [EOL]     assertEquals("{\"date\":\"1970-01-01,01:00\"}", json); [EOL] }
public void testIncompatibleRootType() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     SubType bean = new SubType(); [EOL]     ObjectWriter w = mapper.writerWithType(HashMap.class); [EOL]     try { [EOL]         w.writeValueAsString(bean); [EOL]         fail("Should have failed due to incompatible type"); [EOL]     } catch (JsonProcessingException e) { [EOL]         verifyException(e, "Incompatible types"); [EOL]     } [EOL] }
public void testIncompatibleRootType() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     SubType bean = new SubType(); [EOL]     ObjectWriter w = mapper.writerWithType(HashMap.class); [EOL]     try { [EOL]         w.writeValueAsString(bean); [EOL]         fail("Should have failed due to incompatible type"); [EOL]     } catch (JsonProcessingException e) { [EOL]         verifyException(e, "Incompatible types"); [EOL]     } [EOL] }
public void testFormatForParsers() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(new FactoryWithSchema()); [EOL]     MySchema s = new MySchema(); [EOL]     StringReader r = new StringReader("{}"); [EOL]     try { [EOL]         mapper.reader(s).withType(Object.class).readValue(r); [EOL]         fail("Excpected exception"); [EOL]     } catch (SchemaException e) { [EOL]         assertSame(s, e._schema); [EOL]     } [EOL] }
public void testFormatForParsers() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(new FactoryWithSchema()); [EOL]     MySchema s = new MySchema(); [EOL]     StringReader r = new StringReader("{}"); [EOL]     try { [EOL]         mapper.reader(s).withType(Object.class).readValue(r); [EOL]         fail("Excpected exception"); [EOL]     } catch (SchemaException e) { [EOL]         assertSame(s, e._schema); [EOL]     } [EOL] }
public void testLongArrayToX() throws Exception { [EOL]     long[] data = longs(); [EOL]     verifyLongArrayConversion(data, byte[].class); [EOL]     verifyLongArrayConversion(data, short[].class); [EOL]     verifyLongArrayConversion(data, int[].class); [EOL]     List<Number> expNums = _numberList(data, data.length); [EOL]     List<Long> actNums = mapper.convertValue(data, new TypeReference<List<Long>>() { [EOL]     }); [EOL]     assertEquals(expNums, actNums); [EOL] }
public void testLongArrayToX() throws Exception { [EOL]     long[] data = longs(); [EOL]     verifyLongArrayConversion(data, byte[].class); [EOL]     verifyLongArrayConversion(data, short[].class); [EOL]     verifyLongArrayConversion(data, int[].class); [EOL]     List<Number> expNums = _numberList(data, data.length); [EOL]     List<Long> actNums = mapper.convertValue(data, new TypeReference<List<Long>>() { [EOL]     }); [EOL]     assertEquals(expNums, actNums); [EOL] }
public void testLongArrayToX() throws Exception { [EOL]     long[] data = longs(); [EOL]     verifyLongArrayConversion(data, byte[].class); [EOL]     verifyLongArrayConversion(data, short[].class); [EOL]     verifyLongArrayConversion(data, int[].class); [EOL]     List<Number> expNums = _numberList(data, data.length); [EOL]     List<Long> actNums = mapper.convertValue(data, new TypeReference<List<Long>>() { [EOL]     }); [EOL]     assertEquals(expNums, actNums); [EOL] }
public void testLongArrayToX() throws Exception { [EOL]     long[] data = longs(); [EOL]     verifyLongArrayConversion(data, byte[].class); [EOL]     verifyLongArrayConversion(data, short[].class); [EOL]     verifyLongArrayConversion(data, int[].class); [EOL]     List<Number> expNums = _numberList(data, data.length); [EOL]     List<Long> actNums = mapper.convertValue(data, new TypeReference<List<Long>>() { [EOL]     }); [EOL]     assertEquals(expNums, actNums); [EOL] }
public void testInvalidMultipleTypeIds() throws Exception { [EOL]     try { [EOL]         mapper.writeValueAsString(new MultipleIds()); [EOL]         fail("Should have failed"); [EOL]     } catch (JsonMappingException e) { [EOL]         verifyException(e, "multiple type ids"); [EOL]     } [EOL] }
public void testInvalidMultipleTypeIds() throws Exception { [EOL]     try { [EOL]         mapper.writeValueAsString(new MultipleIds()); [EOL]         fail("Should have failed"); [EOL]     } catch (JsonMappingException e) { [EOL]         verifyException(e, "multiple type ids"); [EOL]     } [EOL] }
public void testInvalidMultipleTypeIds() throws Exception { [EOL]     try { [EOL]         mapper.writeValueAsString(new MultipleIds()); [EOL]         fail("Should have failed"); [EOL]     } catch (JsonMappingException e) { [EOL]         verifyException(e, "multiple type ids"); [EOL]     } [EOL] }
public void testInvalidMultipleTypeIds() throws Exception { [EOL]     try { [EOL]         mapper.writeValueAsString(new MultipleIds()); [EOL]         fail("Should have failed"); [EOL]     } catch (JsonMappingException e) { [EOL]         verifyException(e, "multiple type ids"); [EOL]     } [EOL] }
public void testFormatForParsers() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(new FactoryWithSchema()); [EOL]     MySchema s = new MySchema(); [EOL]     StringReader r = new StringReader("{}"); [EOL]     try { [EOL]         mapper.reader(s).withType(Object.class).readValue(r); [EOL]         fail("Excpected exception"); [EOL]     } catch (SchemaException e) { [EOL]         assertSame(s, e._schema); [EOL]     } [EOL] }
public void testFormatForParsers() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(new FactoryWithSchema()); [EOL]     MySchema s = new MySchema(); [EOL]     StringReader r = new StringReader("{}"); [EOL]     try { [EOL]         mapper.reader(s).withType(Object.class).readValue(r); [EOL]         fail("Excpected exception"); [EOL]     } catch (SchemaException e) { [EOL]         assertSame(s, e._schema); [EOL]     } [EOL] }
public void testFormatForParsers() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(new FactoryWithSchema()); [EOL]     MySchema s = new MySchema(); [EOL]     StringReader r = new StringReader("{}"); [EOL]     try { [EOL]         mapper.reader(s).withType(Object.class).readValue(r); [EOL]         fail("Excpected exception"); [EOL]     } catch (SchemaException e) { [EOL]         assertSame(s, e._schema); [EOL]     } [EOL] }
public void testPolymorphicCreatorBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerModule(new MyModule(PolymorphicBeanBase.class, new PolymorphicBeanInstantiator())); [EOL]     String JSON = "{\"type\":" + quote(PolymorphicBean.class.getName()) + ",\"name\":\"Axel\"}"; [EOL]     PolymorphicBeanBase result = mapper.readValue(JSON, PolymorphicBeanBase.class); [EOL]     assertNotNull(result); [EOL]     assertSame(PolymorphicBean.class, result.getClass()); [EOL]     assertEquals("Axel", ((PolymorphicBean) result).name); [EOL] }
public void testPolymorphicCreatorBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerModule(new MyModule(PolymorphicBeanBase.class, new PolymorphicBeanInstantiator())); [EOL]     String JSON = "{\"type\":" + quote(PolymorphicBean.class.getName()) + ",\"name\":\"Axel\"}"; [EOL]     PolymorphicBeanBase result = mapper.readValue(JSON, PolymorphicBeanBase.class); [EOL]     assertNotNull(result); [EOL]     assertSame(PolymorphicBean.class, result.getClass()); [EOL]     assertEquals("Axel", ((PolymorphicBean) result).name); [EOL] }
public void testPolymorphicCreatorBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerModule(new MyModule(PolymorphicBeanBase.class, new PolymorphicBeanInstantiator())); [EOL]     String JSON = "{\"type\":" + quote(PolymorphicBean.class.getName()) + ",\"name\":\"Axel\"}"; [EOL]     PolymorphicBeanBase result = mapper.readValue(JSON, PolymorphicBeanBase.class); [EOL]     assertNotNull(result); [EOL]     assertSame(PolymorphicBean.class, result.getClass()); [EOL]     assertEquals("Axel", ((PolymorphicBean) result).name); [EOL] }
public void testPolymorphicCreatorBean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerModule(new MyModule(PolymorphicBeanBase.class, new PolymorphicBeanInstantiator())); [EOL]     String JSON = "{\"type\":" + quote(PolymorphicBean.class.getName()) + ",\"name\":\"Axel\"}"; [EOL]     PolymorphicBeanBase result = mapper.readValue(JSON, PolymorphicBeanBase.class); [EOL]     assertNotNull(result); [EOL]     assertSame(PolymorphicBean.class, result.getClass()); [EOL]     assertEquals("Axel", ((PolymorphicBean) result).name); [EOL] }
public void testBoolean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     JsonNode result = mapper.readTree("true\n"); [EOL]     assertFalse(result.isNull()); [EOL]     assertFalse(result.isNumber()); [EOL]     assertFalse(result.isTextual()); [EOL]     assertTrue(result.isBoolean()); [EOL]     assertType(result, BooleanNode.class); [EOL]     assertTrue(result.booleanValue()); [EOL]     assertEquals("true", result.asText()); [EOL]     assertFalse(result.isMissingNode()); [EOL]     assertEquals(result, BooleanNode.valueOf(true)); [EOL]     assertEquals(result, BooleanNode.getTrue()); [EOL] }
public void testBoolean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     JsonNode result = mapper.readTree("true\n"); [EOL]     assertFalse(result.isNull()); [EOL]     assertFalse(result.isNumber()); [EOL]     assertFalse(result.isTextual()); [EOL]     assertTrue(result.isBoolean()); [EOL]     assertType(result, BooleanNode.class); [EOL]     assertTrue(result.booleanValue()); [EOL]     assertEquals("true", result.asText()); [EOL]     assertFalse(result.isMissingNode()); [EOL]     assertEquals(result, BooleanNode.valueOf(true)); [EOL]     assertEquals(result, BooleanNode.getTrue()); [EOL] }
public void testBoolean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     JsonNode result = mapper.readTree("true\n"); [EOL]     assertFalse(result.isNull()); [EOL]     assertFalse(result.isNumber()); [EOL]     assertFalse(result.isTextual()); [EOL]     assertTrue(result.isBoolean()); [EOL]     assertType(result, BooleanNode.class); [EOL]     assertTrue(result.booleanValue()); [EOL]     assertEquals("true", result.asText()); [EOL]     assertFalse(result.isMissingNode()); [EOL]     assertEquals(result, BooleanNode.valueOf(true)); [EOL]     assertEquals(result, BooleanNode.getTrue()); [EOL] }
public void testBoolean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     JsonNode result = mapper.readTree("true\n"); [EOL]     assertFalse(result.isNull()); [EOL]     assertFalse(result.isNumber()); [EOL]     assertFalse(result.isTextual()); [EOL]     assertTrue(result.isBoolean()); [EOL]     assertType(result, BooleanNode.class); [EOL]     assertTrue(result.booleanValue()); [EOL]     assertEquals("true", result.asText()); [EOL]     assertFalse(result.isMissingNode()); [EOL]     assertEquals(result, BooleanNode.valueOf(true)); [EOL]     assertEquals(result, BooleanNode.getTrue()); [EOL] }
public void testBoolean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     JsonNode result = mapper.readTree("true\n"); [EOL]     assertFalse(result.isNull()); [EOL]     assertFalse(result.isNumber()); [EOL]     assertFalse(result.isTextual()); [EOL]     assertTrue(result.isBoolean()); [EOL]     assertType(result, BooleanNode.class); [EOL]     assertTrue(result.booleanValue()); [EOL]     assertEquals("true", result.asText()); [EOL]     assertFalse(result.isMissingNode()); [EOL]     assertEquals(result, BooleanNode.valueOf(true)); [EOL]     assertEquals(result, BooleanNode.getTrue()); [EOL] }
public void testBoolean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     JsonNode result = mapper.readTree("true\n"); [EOL]     assertFalse(result.isNull()); [EOL]     assertFalse(result.isNumber()); [EOL]     assertFalse(result.isTextual()); [EOL]     assertTrue(result.isBoolean()); [EOL]     assertType(result, BooleanNode.class); [EOL]     assertTrue(result.booleanValue()); [EOL]     assertEquals("true", result.asText()); [EOL]     assertFalse(result.isMissingNode()); [EOL]     assertEquals(result, BooleanNode.valueOf(true)); [EOL]     assertEquals(result, BooleanNode.getTrue()); [EOL] }
public void testBoolean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     JsonNode result = mapper.readTree("true\n"); [EOL]     assertFalse(result.isNull()); [EOL]     assertFalse(result.isNumber()); [EOL]     assertFalse(result.isTextual()); [EOL]     assertTrue(result.isBoolean()); [EOL]     assertType(result, BooleanNode.class); [EOL]     assertTrue(result.booleanValue()); [EOL]     assertEquals("true", result.asText()); [EOL]     assertFalse(result.isMissingNode()); [EOL]     assertEquals(result, BooleanNode.valueOf(true)); [EOL]     assertEquals(result, BooleanNode.getTrue()); [EOL] }
public void testBoolean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     JsonNode result = mapper.readTree("true\n"); [EOL]     assertFalse(result.isNull()); [EOL]     assertFalse(result.isNumber()); [EOL]     assertFalse(result.isTextual()); [EOL]     assertTrue(result.isBoolean()); [EOL]     assertType(result, BooleanNode.class); [EOL]     assertTrue(result.booleanValue()); [EOL]     assertEquals("true", result.asText()); [EOL]     assertFalse(result.isMissingNode()); [EOL]     assertEquals(result, BooleanNode.valueOf(true)); [EOL]     assertEquals(result, BooleanNode.getTrue()); [EOL] }
public void testBoolean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     JsonNode result = mapper.readTree("true\n"); [EOL]     assertFalse(result.isNull()); [EOL]     assertFalse(result.isNumber()); [EOL]     assertFalse(result.isTextual()); [EOL]     assertTrue(result.isBoolean()); [EOL]     assertType(result, BooleanNode.class); [EOL]     assertTrue(result.booleanValue()); [EOL]     assertEquals("true", result.asText()); [EOL]     assertFalse(result.isMissingNode()); [EOL]     assertEquals(result, BooleanNode.valueOf(true)); [EOL]     assertEquals(result, BooleanNode.getTrue()); [EOL] }
public void testBoolean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     JsonNode result = mapper.readTree("true\n"); [EOL]     assertFalse(result.isNull()); [EOL]     assertFalse(result.isNumber()); [EOL]     assertFalse(result.isTextual()); [EOL]     assertTrue(result.isBoolean()); [EOL]     assertType(result, BooleanNode.class); [EOL]     assertTrue(result.booleanValue()); [EOL]     assertEquals("true", result.asText()); [EOL]     assertFalse(result.isMissingNode()); [EOL]     assertEquals(result, BooleanNode.valueOf(true)); [EOL]     assertEquals(result, BooleanNode.getTrue()); [EOL] }
public void testBoolean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     JsonNode result = mapper.readTree("true\n"); [EOL]     assertFalse(result.isNull()); [EOL]     assertFalse(result.isNumber()); [EOL]     assertFalse(result.isTextual()); [EOL]     assertTrue(result.isBoolean()); [EOL]     assertType(result, BooleanNode.class); [EOL]     assertTrue(result.booleanValue()); [EOL]     assertEquals("true", result.asText()); [EOL]     assertFalse(result.isMissingNode()); [EOL]     assertEquals(result, BooleanNode.valueOf(true)); [EOL]     assertEquals(result, BooleanNode.getTrue()); [EOL] }
public void testBoolean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     JsonNode result = mapper.readTree("true\n"); [EOL]     assertFalse(result.isNull()); [EOL]     assertFalse(result.isNumber()); [EOL]     assertFalse(result.isTextual()); [EOL]     assertTrue(result.isBoolean()); [EOL]     assertType(result, BooleanNode.class); [EOL]     assertTrue(result.booleanValue()); [EOL]     assertEquals("true", result.asText()); [EOL]     assertFalse(result.isMissingNode()); [EOL]     assertEquals(result, BooleanNode.valueOf(true)); [EOL]     assertEquals(result, BooleanNode.getTrue()); [EOL] }
public void testBoolean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     JsonNode result = mapper.readTree("true\n"); [EOL]     assertFalse(result.isNull()); [EOL]     assertFalse(result.isNumber()); [EOL]     assertFalse(result.isTextual()); [EOL]     assertTrue(result.isBoolean()); [EOL]     assertType(result, BooleanNode.class); [EOL]     assertTrue(result.booleanValue()); [EOL]     assertEquals("true", result.asText()); [EOL]     assertFalse(result.isMissingNode()); [EOL]     assertEquals(result, BooleanNode.valueOf(true)); [EOL]     assertEquals(result, BooleanNode.getTrue()); [EOL] }
public void testBoolean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     JsonNode result = mapper.readTree("true\n"); [EOL]     assertFalse(result.isNull()); [EOL]     assertFalse(result.isNumber()); [EOL]     assertFalse(result.isTextual()); [EOL]     assertTrue(result.isBoolean()); [EOL]     assertType(result, BooleanNode.class); [EOL]     assertTrue(result.booleanValue()); [EOL]     assertEquals("true", result.asText()); [EOL]     assertFalse(result.isMissingNode()); [EOL]     assertEquals(result, BooleanNode.valueOf(true)); [EOL]     assertEquals(result, BooleanNode.getTrue()); [EOL] }
public void testPrefixedUnwrapping() throws Exception { [EOL]     PrefixUnwrap bean = mapper.readValue("{\"name\":\"Axel\",\"_x\":4,\"_y\":7}", PrefixUnwrap.class); [EOL]     assertNotNull(bean); [EOL]     assertEquals("Axel", bean.name); [EOL]     assertNotNull(bean.location); [EOL]     assertEquals(4, bean.location.x); [EOL]     assertEquals(7, bean.location.y); [EOL] }
public void testPrefixedUnwrapping() throws Exception { [EOL]     PrefixUnwrap bean = mapper.readValue("{\"name\":\"Axel\",\"_x\":4,\"_y\":7}", PrefixUnwrap.class); [EOL]     assertNotNull(bean); [EOL]     assertEquals("Axel", bean.name); [EOL]     assertNotNull(bean.location); [EOL]     assertEquals(4, bean.location.x); [EOL]     assertEquals(7, bean.location.y); [EOL] }
public void testPrefixedUnwrapping() throws Exception { [EOL]     PrefixUnwrap bean = mapper.readValue("{\"name\":\"Axel\",\"_x\":4,\"_y\":7}", PrefixUnwrap.class); [EOL]     assertNotNull(bean); [EOL]     assertEquals("Axel", bean.name); [EOL]     assertNotNull(bean.location); [EOL]     assertEquals(4, bean.location.x); [EOL]     assertEquals(7, bean.location.y); [EOL] }
public void testPrefixedUnwrapping() throws Exception { [EOL]     PrefixUnwrap bean = mapper.readValue("{\"name\":\"Axel\",\"_x\":4,\"_y\":7}", PrefixUnwrap.class); [EOL]     assertNotNull(bean); [EOL]     assertEquals("Axel", bean.name); [EOL]     assertNotNull(bean.location); [EOL]     assertEquals(4, bean.location.x); [EOL]     assertEquals(7, bean.location.y); [EOL] }
public void testPrefixedUnwrapping() throws Exception { [EOL]     PrefixUnwrap bean = mapper.readValue("{\"name\":\"Axel\",\"_x\":4,\"_y\":7}", PrefixUnwrap.class); [EOL]     assertNotNull(bean); [EOL]     assertEquals("Axel", bean.name); [EOL]     assertNotNull(bean.location); [EOL]     assertEquals(4, bean.location.x); [EOL]     assertEquals(7, bean.location.y); [EOL] }
public void testMultipleTypeIdsDeserialization() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerSubtypes(ValueBean.class); [EOL]     String json = mapper.writeValueAsString(new ExternalBean3(3)); [EOL]     ExternalBean3 result = mapper.readValue(json, ExternalBean3.class); [EOL]     assertNotNull(result); [EOL]     assertNotNull(result.value1); [EOL]     assertNotNull(result.value2); [EOL]     assertNotNull(result.value3); [EOL]     assertEquals(3, ((ValueBean) result.value1).value); [EOL]     assertEquals(4, ((ValueBean) result.value2).value); [EOL]     assertEquals(5, ((ValueBean) result.value3).value); [EOL]     assertEquals(3, result.foo); [EOL] }
public void testMultipleTypeIdsDeserialization() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerSubtypes(ValueBean.class); [EOL]     String json = mapper.writeValueAsString(new ExternalBean3(3)); [EOL]     ExternalBean3 result = mapper.readValue(json, ExternalBean3.class); [EOL]     assertNotNull(result); [EOL]     assertNotNull(result.value1); [EOL]     assertNotNull(result.value2); [EOL]     assertNotNull(result.value3); [EOL]     assertEquals(3, ((ValueBean) result.value1).value); [EOL]     assertEquals(4, ((ValueBean) result.value2).value); [EOL]     assertEquals(5, ((ValueBean) result.value3).value); [EOL]     assertEquals(3, result.foo); [EOL] }
public void testMultipleTypeIdsDeserialization() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerSubtypes(ValueBean.class); [EOL]     String json = mapper.writeValueAsString(new ExternalBean3(3)); [EOL]     ExternalBean3 result = mapper.readValue(json, ExternalBean3.class); [EOL]     assertNotNull(result); [EOL]     assertNotNull(result.value1); [EOL]     assertNotNull(result.value2); [EOL]     assertNotNull(result.value3); [EOL]     assertEquals(3, ((ValueBean) result.value1).value); [EOL]     assertEquals(4, ((ValueBean) result.value2).value); [EOL]     assertEquals(5, ((ValueBean) result.value3).value); [EOL]     assertEquals(3, result.foo); [EOL] }
public void testMultipleTypeIdsDeserialization() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerSubtypes(ValueBean.class); [EOL]     String json = mapper.writeValueAsString(new ExternalBean3(3)); [EOL]     ExternalBean3 result = mapper.readValue(json, ExternalBean3.class); [EOL]     assertNotNull(result); [EOL]     assertNotNull(result.value1); [EOL]     assertNotNull(result.value2); [EOL]     assertNotNull(result.value3); [EOL]     assertEquals(3, ((ValueBean) result.value1).value); [EOL]     assertEquals(4, ((ValueBean) result.value2).value); [EOL]     assertEquals(5, ((ValueBean) result.value3).value); [EOL]     assertEquals(3, result.foo); [EOL] }
public void testMultipleTypeIdsDeserialization() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerSubtypes(ValueBean.class); [EOL]     String json = mapper.writeValueAsString(new ExternalBean3(3)); [EOL]     ExternalBean3 result = mapper.readValue(json, ExternalBean3.class); [EOL]     assertNotNull(result); [EOL]     assertNotNull(result.value1); [EOL]     assertNotNull(result.value2); [EOL]     assertNotNull(result.value3); [EOL]     assertEquals(3, ((ValueBean) result.value1).value); [EOL]     assertEquals(4, ((ValueBean) result.value2).value); [EOL]     assertEquals(5, ((ValueBean) result.value3).value); [EOL]     assertEquals(3, result.foo); [EOL] }
public void testMultipleTypeIdsDeserialization() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerSubtypes(ValueBean.class); [EOL]     String json = mapper.writeValueAsString(new ExternalBean3(3)); [EOL]     ExternalBean3 result = mapper.readValue(json, ExternalBean3.class); [EOL]     assertNotNull(result); [EOL]     assertNotNull(result.value1); [EOL]     assertNotNull(result.value2); [EOL]     assertNotNull(result.value3); [EOL]     assertEquals(3, ((ValueBean) result.value1).value); [EOL]     assertEquals(4, ((ValueBean) result.value2).value); [EOL]     assertEquals(5, ((ValueBean) result.value3).value); [EOL]     assertEquals(3, result.foo); [EOL] }
public void testMultipleTypeIdsDeserialization() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerSubtypes(ValueBean.class); [EOL]     String json = mapper.writeValueAsString(new ExternalBean3(3)); [EOL]     ExternalBean3 result = mapper.readValue(json, ExternalBean3.class); [EOL]     assertNotNull(result); [EOL]     assertNotNull(result.value1); [EOL]     assertNotNull(result.value2); [EOL]     assertNotNull(result.value3); [EOL]     assertEquals(3, ((ValueBean) result.value1).value); [EOL]     assertEquals(4, ((ValueBean) result.value2).value); [EOL]     assertEquals(5, ((ValueBean) result.value3).value); [EOL]     assertEquals(3, result.foo); [EOL] }
public void testBooleanPrimitive() throws Exception { [EOL]     BooleanBean result = MAPPER.readValue(new StringReader("{\"v\":true}"), BooleanBean.class); [EOL]     assertTrue(result._v); [EOL]     result = MAPPER.readValue(new StringReader("{\"v\":null}"), BooleanBean.class); [EOL]     assertNotNull(result); [EOL]     assertFalse(result._v); [EOL]     boolean[] array = MAPPER.readValue(new StringReader("[ null ]"), boolean[].class); [EOL]     assertNotNull(array); [EOL]     assertEquals(1, array.length); [EOL]     assertFalse(array[0]); [EOL] }
public void testBooleanPrimitive() throws Exception { [EOL]     BooleanBean result = MAPPER.readValue(new StringReader("{\"v\":true}"), BooleanBean.class); [EOL]     assertTrue(result._v); [EOL]     result = MAPPER.readValue(new StringReader("{\"v\":null}"), BooleanBean.class); [EOL]     assertNotNull(result); [EOL]     assertFalse(result._v); [EOL]     boolean[] array = MAPPER.readValue(new StringReader("[ null ]"), boolean[].class); [EOL]     assertNotNull(array); [EOL]     assertEquals(1, array.length); [EOL]     assertFalse(array[0]); [EOL] }
public void testBooleanPrimitive() throws Exception { [EOL]     BooleanBean result = MAPPER.readValue(new StringReader("{\"v\":true}"), BooleanBean.class); [EOL]     assertTrue(result._v); [EOL]     result = MAPPER.readValue(new StringReader("{\"v\":null}"), BooleanBean.class); [EOL]     assertNotNull(result); [EOL]     assertFalse(result._v); [EOL]     boolean[] array = MAPPER.readValue(new StringReader("[ null ]"), boolean[].class); [EOL]     assertNotNull(array); [EOL]     assertEquals(1, array.length); [EOL]     assertFalse(array[0]); [EOL] }
public void testBooleanPrimitive() throws Exception { [EOL]     BooleanBean result = MAPPER.readValue(new StringReader("{\"v\":true}"), BooleanBean.class); [EOL]     assertTrue(result._v); [EOL]     result = MAPPER.readValue(new StringReader("{\"v\":null}"), BooleanBean.class); [EOL]     assertNotNull(result); [EOL]     assertFalse(result._v); [EOL]     boolean[] array = MAPPER.readValue(new StringReader("[ null ]"), boolean[].class); [EOL]     assertNotNull(array); [EOL]     assertEquals(1, array.length); [EOL]     assertFalse(array[0]); [EOL] }
public void testBooleanPrimitive() throws Exception { [EOL]     BooleanBean result = MAPPER.readValue(new StringReader("{\"v\":true}"), BooleanBean.class); [EOL]     assertTrue(result._v); [EOL]     result = MAPPER.readValue(new StringReader("{\"v\":null}"), BooleanBean.class); [EOL]     assertNotNull(result); [EOL]     assertFalse(result._v); [EOL]     boolean[] array = MAPPER.readValue(new StringReader("[ null ]"), boolean[].class); [EOL]     assertNotNull(array); [EOL]     assertEquals(1, array.length); [EOL]     assertFalse(array[0]); [EOL] }
public void testBooleanPrimitive() throws Exception { [EOL]     BooleanBean result = MAPPER.readValue(new StringReader("{\"v\":true}"), BooleanBean.class); [EOL]     assertTrue(result._v); [EOL]     result = MAPPER.readValue(new StringReader("{\"v\":null}"), BooleanBean.class); [EOL]     assertNotNull(result); [EOL]     assertFalse(result._v); [EOL]     boolean[] array = MAPPER.readValue(new StringReader("[ null ]"), boolean[].class); [EOL]     assertNotNull(array); [EOL]     assertEquals(1, array.length); [EOL]     assertFalse(array[0]); [EOL] }
public void testBooleanPrimitive() throws Exception { [EOL]     BooleanBean result = MAPPER.readValue(new StringReader("{\"v\":true}"), BooleanBean.class); [EOL]     assertTrue(result._v); [EOL]     result = MAPPER.readValue(new StringReader("{\"v\":null}"), BooleanBean.class); [EOL]     assertNotNull(result); [EOL]     assertFalse(result._v); [EOL]     boolean[] array = MAPPER.readValue(new StringReader("[ null ]"), boolean[].class); [EOL]     assertNotNull(array); [EOL]     assertEquals(1, array.length); [EOL]     assertFalse(array[0]); [EOL] }
public void testBooleanPrimitive() throws Exception { [EOL]     BooleanBean result = MAPPER.readValue(new StringReader("{\"v\":true}"), BooleanBean.class); [EOL]     assertTrue(result._v); [EOL]     result = MAPPER.readValue(new StringReader("{\"v\":null}"), BooleanBean.class); [EOL]     assertNotNull(result); [EOL]     assertFalse(result._v); [EOL]     boolean[] array = MAPPER.readValue(new StringReader("[ null ]"), boolean[].class); [EOL]     assertNotNull(array); [EOL]     assertEquals(1, array.length); [EOL]     assertFalse(array[0]); [EOL] }
public void testBooleanPrimitive() throws Exception { [EOL]     BooleanBean result = MAPPER.readValue(new StringReader("{\"v\":true}"), BooleanBean.class); [EOL]     assertTrue(result._v); [EOL]     result = MAPPER.readValue(new StringReader("{\"v\":null}"), BooleanBean.class); [EOL]     assertNotNull(result); [EOL]     assertFalse(result._v); [EOL]     boolean[] array = MAPPER.readValue(new StringReader("[ null ]"), boolean[].class); [EOL]     assertNotNull(array); [EOL]     assertEquals(1, array.length); [EOL]     assertFalse(array[0]); [EOL] }
public void testBooleanPrimitive() throws Exception { [EOL]     BooleanBean result = MAPPER.readValue(new StringReader("{\"v\":true}"), BooleanBean.class); [EOL]     assertTrue(result._v); [EOL]     result = MAPPER.readValue(new StringReader("{\"v\":null}"), BooleanBean.class); [EOL]     assertNotNull(result); [EOL]     assertFalse(result._v); [EOL]     boolean[] array = MAPPER.readValue(new StringReader("[ null ]"), boolean[].class); [EOL]     assertNotNull(array); [EOL]     assertEquals(1, array.length); [EOL]     assertFalse(array[0]); [EOL] }
public void testBooleanPrimitive() throws Exception { [EOL]     BooleanBean result = MAPPER.readValue(new StringReader("{\"v\":true}"), BooleanBean.class); [EOL]     assertTrue(result._v); [EOL]     result = MAPPER.readValue(new StringReader("{\"v\":null}"), BooleanBean.class); [EOL]     assertNotNull(result); [EOL]     assertFalse(result._v); [EOL]     boolean[] array = MAPPER.readValue(new StringReader("[ null ]"), boolean[].class); [EOL]     assertNotNull(array); [EOL]     assertEquals(1, array.length); [EOL]     assertFalse(array[0]); [EOL] }
public void testShortWrapper() throws Exception { [EOL]     Short result = MAPPER.readValue(new StringReader("37"), Short.class); [EOL]     assertEquals(Short.valueOf((short) 37), result); [EOL]     result = MAPPER.readValue(new StringReader(" \"-1009\""), Short.class); [EOL]     assertEquals(Short.valueOf((short) -1009), result); [EOL]     result = MAPPER.readValue(new StringReader("-12.9"), Short.class); [EOL]     assertEquals(Short.valueOf((short) -12), result); [EOL] }
public void testShortWrapper() throws Exception { [EOL]     Short result = MAPPER.readValue(new StringReader("37"), Short.class); [EOL]     assertEquals(Short.valueOf((short) 37), result); [EOL]     result = MAPPER.readValue(new StringReader(" \"-1009\""), Short.class); [EOL]     assertEquals(Short.valueOf((short) -1009), result); [EOL]     result = MAPPER.readValue(new StringReader("-12.9"), Short.class); [EOL]     assertEquals(Short.valueOf((short) -12), result); [EOL] }
public void testShortWrapper() throws Exception { [EOL]     Short result = MAPPER.readValue(new StringReader("37"), Short.class); [EOL]     assertEquals(Short.valueOf((short) 37), result); [EOL]     result = MAPPER.readValue(new StringReader(" \"-1009\""), Short.class); [EOL]     assertEquals(Short.valueOf((short) -1009), result); [EOL]     result = MAPPER.readValue(new StringReader("-12.9"), Short.class); [EOL]     assertEquals(Short.valueOf((short) -12), result); [EOL] }
public void testShortWrapper() throws Exception { [EOL]     Short result = MAPPER.readValue(new StringReader("37"), Short.class); [EOL]     assertEquals(Short.valueOf((short) 37), result); [EOL]     result = MAPPER.readValue(new StringReader(" \"-1009\""), Short.class); [EOL]     assertEquals(Short.valueOf((short) -1009), result); [EOL]     result = MAPPER.readValue(new StringReader("-12.9"), Short.class); [EOL]     assertEquals(Short.valueOf((short) -12), result); [EOL] }
public void testShortWrapper() throws Exception { [EOL]     Short result = MAPPER.readValue(new StringReader("37"), Short.class); [EOL]     assertEquals(Short.valueOf((short) 37), result); [EOL]     result = MAPPER.readValue(new StringReader(" \"-1009\""), Short.class); [EOL]     assertEquals(Short.valueOf((short) -1009), result); [EOL]     result = MAPPER.readValue(new StringReader("-12.9"), Short.class); [EOL]     assertEquals(Short.valueOf((short) -12), result); [EOL] }
public void testShortWrapper() throws Exception { [EOL]     Short result = MAPPER.readValue(new StringReader("37"), Short.class); [EOL]     assertEquals(Short.valueOf((short) 37), result); [EOL]     result = MAPPER.readValue(new StringReader(" \"-1009\""), Short.class); [EOL]     assertEquals(Short.valueOf((short) -1009), result); [EOL]     result = MAPPER.readValue(new StringReader("-12.9"), Short.class); [EOL]     assertEquals(Short.valueOf((short) -12), result); [EOL] }
public void testShortWrapper() throws Exception { [EOL]     Short result = MAPPER.readValue(new StringReader("37"), Short.class); [EOL]     assertEquals(Short.valueOf((short) 37), result); [EOL]     result = MAPPER.readValue(new StringReader(" \"-1009\""), Short.class); [EOL]     assertEquals(Short.valueOf((short) -1009), result); [EOL]     result = MAPPER.readValue(new StringReader("-12.9"), Short.class); [EOL]     assertEquals(Short.valueOf((short) -12), result); [EOL] }
public void testShortWrapper() throws Exception { [EOL]     Short result = MAPPER.readValue(new StringReader("37"), Short.class); [EOL]     assertEquals(Short.valueOf((short) 37), result); [EOL]     result = MAPPER.readValue(new StringReader(" \"-1009\""), Short.class); [EOL]     assertEquals(Short.valueOf((short) -1009), result); [EOL]     result = MAPPER.readValue(new StringReader("-12.9"), Short.class); [EOL]     assertEquals(Short.valueOf((short) -12), result); [EOL] }
public void testLongArrayToX() throws Exception { [EOL]     long[] data = longs(); [EOL]     verifyLongArrayConversion(data, byte[].class); [EOL]     verifyLongArrayConversion(data, short[].class); [EOL]     verifyLongArrayConversion(data, int[].class); [EOL]     List<Number> expNums = _numberList(data, data.length); [EOL]     List<Long> actNums = mapper.convertValue(data, new TypeReference<List<Long>>() { [EOL]     }); [EOL]     assertEquals(expNums, actNums); [EOL] }
public void testLongArrayToX() throws Exception { [EOL]     long[] data = longs(); [EOL]     verifyLongArrayConversion(data, byte[].class); [EOL]     verifyLongArrayConversion(data, short[].class); [EOL]     verifyLongArrayConversion(data, int[].class); [EOL]     List<Number> expNums = _numberList(data, data.length); [EOL]     List<Long> actNums = mapper.convertValue(data, new TypeReference<List<Long>>() { [EOL]     }); [EOL]     assertEquals(expNums, actNums); [EOL] }
public void testLongArrayToX() throws Exception { [EOL]     long[] data = longs(); [EOL]     verifyLongArrayConversion(data, byte[].class); [EOL]     verifyLongArrayConversion(data, short[].class); [EOL]     verifyLongArrayConversion(data, int[].class); [EOL]     List<Number> expNums = _numberList(data, data.length); [EOL]     List<Long> actNums = mapper.convertValue(data, new TypeReference<List<Long>>() { [EOL]     }); [EOL]     assertEquals(expNums, actNums); [EOL] }
public void testLongWrapper() throws Exception { [EOL]     Long result = MAPPER.readValue(new StringReader("12345678901"), Long.class); [EOL]     assertEquals(Long.valueOf(12345678901L), result); [EOL]     result = MAPPER.readValue(new StringReader(" \"-9876\""), Long.class); [EOL]     assertEquals(Long.valueOf(-9876), result); [EOL]     result = MAPPER.readValue(new StringReader("1918.3"), Long.class); [EOL]     assertEquals(Long.valueOf(1918), result); [EOL] }
public void testLongArray() throws Exception { [EOL]     final int LEN = 12300; [EOL]     StringBuilder sb = new StringBuilder(); [EOL]     sb.append('['); [EOL]     for (int i = 0; i < LEN; ++i) { [EOL]         if (i > 0) { [EOL]             sb.append(','); [EOL]         } [EOL]         sb.append(i); [EOL]     } [EOL]     sb.append(']'); [EOL]     long[] result = MAPPER.readValue(sb.toString(), long[].class); [EOL]     assertNotNull(result); [EOL]     assertEquals(LEN, result.length); [EOL]     for (int i = 0; i < LEN; ++i) { [EOL]         long exp = (long) i; [EOL]         assertEquals(exp, result[i]); [EOL]     } [EOL] }
public void testFloatNaN() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     Float result = m.readValue(" \"NaN\"", Float.class); [EOL]     assertEquals(Float.valueOf(Float.NaN), result); [EOL] }
public void testFloatNaN() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     Float result = m.readValue(" \"NaN\"", Float.class); [EOL]     assertEquals(Float.valueOf(Float.NaN), result); [EOL] }
public void testFloatNaN() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     Float result = m.readValue(" \"NaN\"", Float.class); [EOL]     assertEquals(Float.valueOf(Float.NaN), result); [EOL] }
public void testFloatNaN() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     Float result = m.readValue(" \"NaN\"", Float.class); [EOL]     assertEquals(Float.valueOf(Float.NaN), result); [EOL] }
public void testFloatNaN() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     Float result = m.readValue(" \"NaN\"", Float.class); [EOL]     assertEquals(Float.valueOf(Float.NaN), result); [EOL] }
public void testFloatNaN() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     Float result = m.readValue(" \"NaN\"", Float.class); [EOL]     assertEquals(Float.valueOf(Float.NaN), result); [EOL] }
public void testFloatNaN() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     Float result = m.readValue(" \"NaN\"", Float.class); [EOL]     assertEquals(Float.valueOf(Float.NaN), result); [EOL] }
public void testFloatNaN() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     Float result = m.readValue(" \"NaN\"", Float.class); [EOL]     assertEquals(Float.valueOf(Float.NaN), result); [EOL] }
public void testFloatNaN() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     Float result = m.readValue(" \"NaN\"", Float.class); [EOL]     assertEquals(Float.valueOf(Float.NaN), result); [EOL] }
public void testFloatNaN() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     Float result = m.readValue(" \"NaN\"", Float.class); [EOL]     assertEquals(Float.valueOf(Float.NaN), result); [EOL] }
public void testDoublePrimitive() throws Exception { [EOL]     double value = 0.016; [EOL]     DoubleBean result = MAPPER.readValue(new StringReader("{\"v\":" + value + "}"), DoubleBean.class); [EOL]     assertEquals(value, result._v); [EOL]     result = MAPPER.readValue(new StringReader("{\"v\":null}"), DoubleBean.class); [EOL]     assertNotNull(result); [EOL]     assertEquals(0.0, result._v); [EOL]     double[] array = MAPPER.readValue(new StringReader("[ null ]"), double[].class); [EOL]     assertNotNull(array); [EOL]     assertEquals(1, array.length); [EOL]     assertEquals(0.0, array[0]); [EOL] }
public void testDoublePrimitive() throws Exception { [EOL]     double value = 0.016; [EOL]     DoubleBean result = MAPPER.readValue(new StringReader("{\"v\":" + value + "}"), DoubleBean.class); [EOL]     assertEquals(value, result._v); [EOL]     result = MAPPER.readValue(new StringReader("{\"v\":null}"), DoubleBean.class); [EOL]     assertNotNull(result); [EOL]     assertEquals(0.0, result._v); [EOL]     double[] array = MAPPER.readValue(new StringReader("[ null ]"), double[].class); [EOL]     assertNotNull(array); [EOL]     assertEquals(1, array.length); [EOL]     assertEquals(0.0, array[0]); [EOL] }
public void testDoublePrimitive() throws Exception { [EOL]     double value = 0.016; [EOL]     DoubleBean result = MAPPER.readValue(new StringReader("{\"v\":" + value + "}"), DoubleBean.class); [EOL]     assertEquals(value, result._v); [EOL]     result = MAPPER.readValue(new StringReader("{\"v\":null}"), DoubleBean.class); [EOL]     assertNotNull(result); [EOL]     assertEquals(0.0, result._v); [EOL]     double[] array = MAPPER.readValue(new StringReader("[ null ]"), double[].class); [EOL]     assertNotNull(array); [EOL]     assertEquals(1, array.length); [EOL]     assertEquals(0.0, array[0]); [EOL] }
public void testDoublePrimitive() throws Exception { [EOL]     double value = 0.016; [EOL]     DoubleBean result = MAPPER.readValue(new StringReader("{\"v\":" + value + "}"), DoubleBean.class); [EOL]     assertEquals(value, result._v); [EOL]     result = MAPPER.readValue(new StringReader("{\"v\":null}"), DoubleBean.class); [EOL]     assertNotNull(result); [EOL]     assertEquals(0.0, result._v); [EOL]     double[] array = MAPPER.readValue(new StringReader("[ null ]"), double[].class); [EOL]     assertNotNull(array); [EOL]     assertEquals(1, array.length); [EOL]     assertEquals(0.0, array[0]); [EOL] }
public void testDoublePrimitive() throws Exception { [EOL]     double value = 0.016; [EOL]     DoubleBean result = MAPPER.readValue(new StringReader("{\"v\":" + value + "}"), DoubleBean.class); [EOL]     assertEquals(value, result._v); [EOL]     result = MAPPER.readValue(new StringReader("{\"v\":null}"), DoubleBean.class); [EOL]     assertNotNull(result); [EOL]     assertEquals(0.0, result._v); [EOL]     double[] array = MAPPER.readValue(new StringReader("[ null ]"), double[].class); [EOL]     assertNotNull(array); [EOL]     assertEquals(1, array.length); [EOL]     assertEquals(0.0, array[0]); [EOL] }
public void testDoublePrimitive() throws Exception { [EOL]     double value = 0.016; [EOL]     DoubleBean result = MAPPER.readValue(new StringReader("{\"v\":" + value + "}"), DoubleBean.class); [EOL]     assertEquals(value, result._v); [EOL]     result = MAPPER.readValue(new StringReader("{\"v\":null}"), DoubleBean.class); [EOL]     assertNotNull(result); [EOL]     assertEquals(0.0, result._v); [EOL]     double[] array = MAPPER.readValue(new StringReader("[ null ]"), double[].class); [EOL]     assertNotNull(array); [EOL]     assertEquals(1, array.length); [EOL]     assertEquals(0.0, array[0]); [EOL] }
public void testDoublePrimitive() throws Exception { [EOL]     double value = 0.016; [EOL]     DoubleBean result = MAPPER.readValue(new StringReader("{\"v\":" + value + "}"), DoubleBean.class); [EOL]     assertEquals(value, result._v); [EOL]     result = MAPPER.readValue(new StringReader("{\"v\":null}"), DoubleBean.class); [EOL]     assertNotNull(result); [EOL]     assertEquals(0.0, result._v); [EOL]     double[] array = MAPPER.readValue(new StringReader("[ null ]"), double[].class); [EOL]     assertNotNull(array); [EOL]     assertEquals(1, array.length); [EOL]     assertEquals(0.0, array[0]); [EOL] }
public void testDoublePrimitive() throws Exception { [EOL]     double value = 0.016; [EOL]     DoubleBean result = MAPPER.readValue(new StringReader("{\"v\":" + value + "}"), DoubleBean.class); [EOL]     assertEquals(value, result._v); [EOL]     result = MAPPER.readValue(new StringReader("{\"v\":null}"), DoubleBean.class); [EOL]     assertNotNull(result); [EOL]     assertEquals(0.0, result._v); [EOL]     double[] array = MAPPER.readValue(new StringReader("[ null ]"), double[].class); [EOL]     assertNotNull(array); [EOL]     assertEquals(1, array.length); [EOL]     assertEquals(0.0, array[0]); [EOL] }
public void testDoublePrimitive() throws Exception { [EOL]     double value = 0.016; [EOL]     DoubleBean result = MAPPER.readValue(new StringReader("{\"v\":" + value + "}"), DoubleBean.class); [EOL]     assertEquals(value, result._v); [EOL]     result = MAPPER.readValue(new StringReader("{\"v\":null}"), DoubleBean.class); [EOL]     assertNotNull(result); [EOL]     assertEquals(0.0, result._v); [EOL]     double[] array = MAPPER.readValue(new StringReader("[ null ]"), double[].class); [EOL]     assertNotNull(array); [EOL]     assertEquals(1, array.length); [EOL]     assertEquals(0.0, array[0]); [EOL] }
public void testClassWithUnknownAndIgnore() throws Exception { [EOL]     ImplicitIgnores result = MAPPER.readValue("{\"a\":1,\"b\":2,\"c\":3 }", ImplicitIgnores.class); [EOL]     assertEquals(3, result.c); [EOL]     try { [EOL]         MAPPER.readValue("{\"a\":1,\"b\":2,\"c\":3,\"d\":4 }", ImplicitIgnores.class); [EOL]     } catch (JsonMappingException e) { [EOL]         verifyException(e, "Unrecognized field \"d\""); [EOL]     } [EOL] }
public void testClassWithUnknownAndIgnore() throws Exception { [EOL]     ImplicitIgnores result = MAPPER.readValue("{\"a\":1,\"b\":2,\"c\":3 }", ImplicitIgnores.class); [EOL]     assertEquals(3, result.c); [EOL]     try { [EOL]         MAPPER.readValue("{\"a\":1,\"b\":2,\"c\":3,\"d\":4 }", ImplicitIgnores.class); [EOL]     } catch (JsonMappingException e) { [EOL]         verifyException(e, "Unrecognized field \"d\""); [EOL]     } [EOL] }
public void testDeserializeSimple() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     JsonSchema schema = mapper.generateJsonSchema(Schemable.class); [EOL]     assertNotNull(schema); [EOL]     String schemaStr = mapper.writeValueAsString(schema); [EOL]     assertNotNull(schemaStr); [EOL]     JsonSchema result = mapper.readValue(schemaStr, JsonSchema.class); [EOL]     assertEquals("Trying to read from '" + schemaStr + "'", schema, result); [EOL] }
public void testDeserializeSimple() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     JsonSchema schema = mapper.generateJsonSchema(Schemable.class); [EOL]     assertNotNull(schema); [EOL]     String schemaStr = mapper.writeValueAsString(schema); [EOL]     assertNotNull(schemaStr); [EOL]     JsonSchema result = mapper.readValue(schemaStr, JsonSchema.class); [EOL]     assertEquals("Trying to read from '" + schemaStr + "'", schema, result); [EOL] }
public void testDeserializeSimple() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     JsonSchema schema = mapper.generateJsonSchema(Schemable.class); [EOL]     assertNotNull(schema); [EOL]     String schemaStr = mapper.writeValueAsString(schema); [EOL]     assertNotNull(schemaStr); [EOL]     JsonSchema result = mapper.readValue(schemaStr, JsonSchema.class); [EOL]     assertEquals("Trying to read from '" + schemaStr + "'", schema, result); [EOL] }
public void testDeserializeSimple() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     JsonSchema schema = mapper.generateJsonSchema(Schemable.class); [EOL]     assertNotNull(schema); [EOL]     String schemaStr = mapper.writeValueAsString(schema); [EOL]     assertNotNull(schemaStr); [EOL]     JsonSchema result = mapper.readValue(schemaStr, JsonSchema.class); [EOL]     assertEquals("Trying to read from '" + schemaStr + "'", schema, result); [EOL] }
public void testDeserializeSimple() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     JsonSchema schema = mapper.generateJsonSchema(Schemable.class); [EOL]     assertNotNull(schema); [EOL]     String schemaStr = mapper.writeValueAsString(schema); [EOL]     assertNotNull(schemaStr); [EOL]     JsonSchema result = mapper.readValue(schemaStr, JsonSchema.class); [EOL]     assertEquals("Trying to read from '" + schemaStr + "'", schema, result); [EOL] }
public void testAnyOnly() throws Exception { [EOL]     ObjectMapper m; [EOL]     m = new ObjectMapper(); [EOL]     m.configure(SerializationFeature.FAIL_ON_EMPTY_BEANS, true); [EOL]     String json = serializeAsString(m, new AnyOnlyBean()); [EOL]     assertEquals("{\"a\":3}", json); [EOL]     m = new ObjectMapper(); [EOL]     m.configure(SerializationFeature.FAIL_ON_EMPTY_BEANS, false); [EOL]     json = serializeAsString(m, new AnyOnlyBean()); [EOL]     assertEquals("{\"a\":3}", json); [EOL] }
public void testAnyOnly() throws Exception { [EOL]     ObjectMapper m; [EOL]     m = new ObjectMapper(); [EOL]     m.configure(SerializationFeature.FAIL_ON_EMPTY_BEANS, true); [EOL]     String json = serializeAsString(m, new AnyOnlyBean()); [EOL]     assertEquals("{\"a\":3}", json); [EOL]     m = new ObjectMapper(); [EOL]     m.configure(SerializationFeature.FAIL_ON_EMPTY_BEANS, false); [EOL]     json = serializeAsString(m, new AnyOnlyBean()); [EOL]     assertEquals("{\"a\":3}", json); [EOL] }
public void testAnyOnly() throws Exception { [EOL]     ObjectMapper m; [EOL]     m = new ObjectMapper(); [EOL]     m.configure(SerializationFeature.FAIL_ON_EMPTY_BEANS, true); [EOL]     String json = serializeAsString(m, new AnyOnlyBean()); [EOL]     assertEquals("{\"a\":3}", json); [EOL]     m = new ObjectMapper(); [EOL]     m.configure(SerializationFeature.FAIL_ON_EMPTY_BEANS, false); [EOL]     json = serializeAsString(m, new AnyOnlyBean()); [EOL]     assertEquals("{\"a\":3}", json); [EOL] }
public void testAnyOnly() throws Exception { [EOL]     ObjectMapper m; [EOL]     m = new ObjectMapper(); [EOL]     m.configure(SerializationFeature.FAIL_ON_EMPTY_BEANS, true); [EOL]     String json = serializeAsString(m, new AnyOnlyBean()); [EOL]     assertEquals("{\"a\":3}", json); [EOL]     m = new ObjectMapper(); [EOL]     m.configure(SerializationFeature.FAIL_ON_EMPTY_BEANS, false); [EOL]     json = serializeAsString(m, new AnyOnlyBean()); [EOL]     assertEquals("{\"a\":3}", json); [EOL] }
public void testAnyOnly() throws Exception { [EOL]     ObjectMapper m; [EOL]     m = new ObjectMapper(); [EOL]     m.configure(SerializationFeature.FAIL_ON_EMPTY_BEANS, true); [EOL]     String json = serializeAsString(m, new AnyOnlyBean()); [EOL]     assertEquals("{\"a\":3}", json); [EOL]     m = new ObjectMapper(); [EOL]     m.configure(SerializationFeature.FAIL_ON_EMPTY_BEANS, false); [EOL]     json = serializeAsString(m, new AnyOnlyBean()); [EOL]     assertEquals("{\"a\":3}", json); [EOL] }
public void testAnyOnly() throws Exception { [EOL]     ObjectMapper m; [EOL]     m = new ObjectMapper(); [EOL]     m.configure(SerializationFeature.FAIL_ON_EMPTY_BEANS, true); [EOL]     String json = serializeAsString(m, new AnyOnlyBean()); [EOL]     assertEquals("{\"a\":3}", json); [EOL]     m = new ObjectMapper(); [EOL]     m.configure(SerializationFeature.FAIL_ON_EMPTY_BEANS, false); [EOL]     json = serializeAsString(m, new AnyOnlyBean()); [EOL]     assertEquals("{\"a\":3}", json); [EOL] }
public void testSimple() throws Exception { [EOL]     final String JSON = SAMPLE_DOC_JSON_SPEC; [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     for (int type = 0; type < 2; ++type) { [EOL]         JsonNode result; [EOL]         if (type == 0) { [EOL]             result = mapper.readTree(new StringReader(JSON)); [EOL]         } else { [EOL]             result = mapper.readTree(JSON); [EOL]         } [EOL]         assertType(result, ObjectNode.class); [EOL]         assertEquals(1, result.size()); [EOL]         assertTrue(result.isObject()); [EOL]         ObjectNode main = (ObjectNode) result; [EOL]         assertEquals("Image", main.fieldNames().next()); [EOL]         JsonNode ob = main.elements().next(); [EOL]         assertType(ob, ObjectNode.class); [EOL]         ObjectNode imageMap = (ObjectNode) ob; [EOL]         assertEquals(5, imageMap.size()); [EOL]         ob = imageMap.get("Width"); [EOL]         assertTrue(ob.isIntegralNumber()); [EOL]         assertFalse(ob.isFloatingPointNumber()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_WIDTH, ob.intValue()); [EOL]         ob = imageMap.get("Height"); [EOL]         assertTrue(ob.isIntegralNumber()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_HEIGHT, ob.intValue()); [EOL]         ob = imageMap.get("Title"); [EOL]         assertTrue(ob.isTextual()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_TITLE, ob.textValue()); [EOL]         ob = imageMap.get("Thumbnail"); [EOL]         assertType(ob, ObjectNode.class); [EOL]         ObjectNode tn = (ObjectNode) ob; [EOL]         ob = tn.get("Url"); [EOL]         assertTrue(ob.isTextual()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_TN_URL, ob.textValue()); [EOL]         ob = tn.get("Height"); [EOL]         assertTrue(ob.isIntegralNumber()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_TN_HEIGHT, ob.intValue()); [EOL]         ob = tn.get("Width"); [EOL]         assertTrue(ob.isTextual()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_TN_WIDTH, ob.textValue()); [EOL]         ob = imageMap.get("IDs"); [EOL]         assertTrue(ob.isArray()); [EOL]         ArrayNode idList = (ArrayNode) ob; [EOL]         assertEquals(4, idList.size()); [EOL]         assertEquals(4, calcLength(idList.elements())); [EOL]         assertEquals(4, calcLength(idList.iterator())); [EOL]         { [EOL]             int[] values = new int[] { SAMPLE_SPEC_VALUE_TN_ID1, SAMPLE_SPEC_VALUE_TN_ID2, SAMPLE_SPEC_VALUE_TN_ID3, SAMPLE_SPEC_VALUE_TN_ID4 }; [EOL]             for (int i = 0; i < values.length; ++i) { [EOL]                 assertEquals(values[i], idList.get(i).intValue()); [EOL]             } [EOL]             int i = 0; [EOL]             for (JsonNode n : idList) { [EOL]                 assertEquals(values[i], n.intValue()); [EOL]                 ++i; [EOL]             } [EOL]         } [EOL]     } [EOL] }
public void testOverrideIntrospectors() { [EOL]     SerializationConfig cfg = MAPPER.getSerializationConfig(); [EOL]     cfg = cfg.with((ClassIntrospector) null); [EOL]     cfg = cfg.with((AnnotationIntrospector) null); [EOL]     assertNull(cfg.getAnnotationIntrospector()); [EOL] }
public void testJson() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setPropertyNamingStrategy(new LcStrategy()); [EOL]     RenamedCollectionBean foo = mapper.readValue("{\"thevalues\":[\"a\"]}", RenamedCollectionBean.class); [EOL]     assertNotNull(foo.getTheVALUEs()); [EOL]     assertEquals(1, foo.getTheVALUEs().size()); [EOL]     assertEquals("a", foo.getTheVALUEs().get(0)); [EOL] }
public void testJson() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setPropertyNamingStrategy(new LcStrategy()); [EOL]     RenamedCollectionBean foo = mapper.readValue("{\"thevalues\":[\"a\"]}", RenamedCollectionBean.class); [EOL]     assertNotNull(foo.getTheVALUEs()); [EOL]     assertEquals(1, foo.getTheVALUEs().size()); [EOL]     assertEquals("a", foo.getTheVALUEs().get(0)); [EOL] }
public void testDateWithJsonFormat() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     String json; [EOL]     mapper.disable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS); [EOL]     json = mapper.writeValueAsString(new DateAsNumberBean(0L)); [EOL]     assertEquals("{\"date\":0}", json); [EOL]     mapper.enable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS); [EOL]     json = mapper.writer().with(getUTCTimeZone()).writeValueAsString(new DateAsStringBean(0L)); [EOL]     assertEquals("{\"date\":\"1970-01-01\"}", json); [EOL]     json = mapper.writeValueAsString(new DateInCETBean(0L)); [EOL]     assertEquals("{\"date\":\"1970-01-01,01:00\"}", json); [EOL] }
public void testDateWithJsonFormat() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     String json; [EOL]     mapper.disable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS); [EOL]     json = mapper.writeValueAsString(new DateAsNumberBean(0L)); [EOL]     assertEquals("{\"date\":0}", json); [EOL]     mapper.enable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS); [EOL]     json = mapper.writer().with(getUTCTimeZone()).writeValueAsString(new DateAsStringBean(0L)); [EOL]     assertEquals("{\"date\":\"1970-01-01\"}", json); [EOL]     json = mapper.writeValueAsString(new DateInCETBean(0L)); [EOL]     assertEquals("{\"date\":\"1970-01-01,01:00\"}", json); [EOL] }
public void testMisc() { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.setDateFormat(null); [EOL]     assertNotNull(m.getSerializationConfig().toString()); [EOL] }
public void testURL() throws Exception { [EOL]     URL value = new URL("http://foo.com"); [EOL]     assertEquals(value, MAPPER.readValue("\"" + value.toString() + "\"", URL.class)); [EOL]     TokenBuffer buf = new TokenBuffer(null); [EOL]     buf.writeObject(null); [EOL]     assertNull(MAPPER.readValue(buf.asParser(), URL.class)); [EOL]     buf.close(); [EOL]     buf = new TokenBuffer(null); [EOL]     buf.writeObject(value); [EOL]     assertSame(value, MAPPER.readValue(buf.asParser(), URL.class)); [EOL]     buf.close(); [EOL] }
public void testURL() throws Exception { [EOL]     URL value = new URL("http://foo.com"); [EOL]     assertEquals(value, MAPPER.readValue("\"" + value.toString() + "\"", URL.class)); [EOL]     TokenBuffer buf = new TokenBuffer(null); [EOL]     buf.writeObject(null); [EOL]     assertNull(MAPPER.readValue(buf.asParser(), URL.class)); [EOL]     buf.close(); [EOL]     buf = new TokenBuffer(null); [EOL]     buf.writeObject(value); [EOL]     assertSame(value, MAPPER.readValue(buf.asParser(), URL.class)); [EOL]     buf.close(); [EOL] }
public void testURL() throws Exception { [EOL]     URL value = new URL("http://foo.com"); [EOL]     assertEquals(value, MAPPER.readValue("\"" + value.toString() + "\"", URL.class)); [EOL]     TokenBuffer buf = new TokenBuffer(null); [EOL]     buf.writeObject(null); [EOL]     assertNull(MAPPER.readValue(buf.asParser(), URL.class)); [EOL]     buf.close(); [EOL]     buf = new TokenBuffer(null); [EOL]     buf.writeObject(value); [EOL]     assertSame(value, MAPPER.readValue(buf.asParser(), URL.class)); [EOL]     buf.close(); [EOL] }
public void testURL() throws Exception { [EOL]     URL value = new URL("http://foo.com"); [EOL]     assertEquals(value, MAPPER.readValue("\"" + value.toString() + "\"", URL.class)); [EOL]     TokenBuffer buf = new TokenBuffer(null); [EOL]     buf.writeObject(null); [EOL]     assertNull(MAPPER.readValue(buf.asParser(), URL.class)); [EOL]     buf.close(); [EOL]     buf = new TokenBuffer(null); [EOL]     buf.writeObject(value); [EOL]     assertSame(value, MAPPER.readValue(buf.asParser(), URL.class)); [EOL]     buf.close(); [EOL] }
public void testURL() throws Exception { [EOL]     URL value = new URL("http://foo.com"); [EOL]     assertEquals(value, MAPPER.readValue("\"" + value.toString() + "\"", URL.class)); [EOL]     TokenBuffer buf = new TokenBuffer(null); [EOL]     buf.writeObject(null); [EOL]     assertNull(MAPPER.readValue(buf.asParser(), URL.class)); [EOL]     buf.close(); [EOL]     buf = new TokenBuffer(null); [EOL]     buf.writeObject(value); [EOL]     assertSame(value, MAPPER.readValue(buf.asParser(), URL.class)); [EOL]     buf.close(); [EOL] }
public void testURL() throws Exception { [EOL]     URL value = new URL("http://foo.com"); [EOL]     assertEquals(value, MAPPER.readValue("\"" + value.toString() + "\"", URL.class)); [EOL]     TokenBuffer buf = new TokenBuffer(null); [EOL]     buf.writeObject(null); [EOL]     assertNull(MAPPER.readValue(buf.asParser(), URL.class)); [EOL]     buf.close(); [EOL]     buf = new TokenBuffer(null); [EOL]     buf.writeObject(value); [EOL]     assertSame(value, MAPPER.readValue(buf.asParser(), URL.class)); [EOL]     buf.close(); [EOL] }
public void testURL() throws Exception { [EOL]     URL value = new URL("http://foo.com"); [EOL]     assertEquals(value, MAPPER.readValue("\"" + value.toString() + "\"", URL.class)); [EOL]     TokenBuffer buf = new TokenBuffer(null); [EOL]     buf.writeObject(null); [EOL]     assertNull(MAPPER.readValue(buf.asParser(), URL.class)); [EOL]     buf.close(); [EOL]     buf = new TokenBuffer(null); [EOL]     buf.writeObject(value); [EOL]     assertSame(value, MAPPER.readValue(buf.asParser(), URL.class)); [EOL]     buf.close(); [EOL] }
public void testURL() throws Exception { [EOL]     URL value = new URL("http://foo.com"); [EOL]     assertEquals(value, MAPPER.readValue("\"" + value.toString() + "\"", URL.class)); [EOL]     TokenBuffer buf = new TokenBuffer(null); [EOL]     buf.writeObject(null); [EOL]     assertNull(MAPPER.readValue(buf.asParser(), URL.class)); [EOL]     buf.close(); [EOL]     buf = new TokenBuffer(null); [EOL]     buf.writeObject(value); [EOL]     assertSame(value, MAPPER.readValue(buf.asParser(), URL.class)); [EOL]     buf.close(); [EOL] }
public void testURL() throws Exception { [EOL]     URL value = new URL("http://foo.com"); [EOL]     assertEquals(value, MAPPER.readValue("\"" + value.toString() + "\"", URL.class)); [EOL]     TokenBuffer buf = new TokenBuffer(null); [EOL]     buf.writeObject(null); [EOL]     assertNull(MAPPER.readValue(buf.asParser(), URL.class)); [EOL]     buf.close(); [EOL]     buf = new TokenBuffer(null); [EOL]     buf.writeObject(value); [EOL]     assertSame(value, MAPPER.readValue(buf.asParser(), URL.class)); [EOL]     buf.close(); [EOL] }
public void testURL() throws Exception { [EOL]     URL value = new URL("http://foo.com"); [EOL]     assertEquals(value, MAPPER.readValue("\"" + value.toString() + "\"", URL.class)); [EOL]     TokenBuffer buf = new TokenBuffer(null); [EOL]     buf.writeObject(null); [EOL]     assertNull(MAPPER.readValue(buf.asParser(), URL.class)); [EOL]     buf.close(); [EOL]     buf = new TokenBuffer(null); [EOL]     buf.writeObject(value); [EOL]     assertSame(value, MAPPER.readValue(buf.asParser(), URL.class)); [EOL]     buf.close(); [EOL] }
public void testURL() throws Exception { [EOL]     URL value = new URL("http://foo.com"); [EOL]     assertEquals(value, MAPPER.readValue("\"" + value.toString() + "\"", URL.class)); [EOL]     TokenBuffer buf = new TokenBuffer(null); [EOL]     buf.writeObject(null); [EOL]     assertNull(MAPPER.readValue(buf.asParser(), URL.class)); [EOL]     buf.close(); [EOL]     buf = new TokenBuffer(null); [EOL]     buf.writeObject(value); [EOL]     assertSame(value, MAPPER.readValue(buf.asParser(), URL.class)); [EOL]     buf.close(); [EOL] }
public void testURL() throws Exception { [EOL]     URL value = new URL("http://foo.com"); [EOL]     assertEquals(value, MAPPER.readValue("\"" + value.toString() + "\"", URL.class)); [EOL]     TokenBuffer buf = new TokenBuffer(null); [EOL]     buf.writeObject(null); [EOL]     assertNull(MAPPER.readValue(buf.asParser(), URL.class)); [EOL]     buf.close(); [EOL]     buf = new TokenBuffer(null); [EOL]     buf.writeObject(value); [EOL]     assertSame(value, MAPPER.readValue(buf.asParser(), URL.class)); [EOL]     buf.close(); [EOL] }
public void testURL() throws Exception { [EOL]     URL value = new URL("http://foo.com"); [EOL]     assertEquals(value, MAPPER.readValue("\"" + value.toString() + "\"", URL.class)); [EOL]     TokenBuffer buf = new TokenBuffer(null); [EOL]     buf.writeObject(null); [EOL]     assertNull(MAPPER.readValue(buf.asParser(), URL.class)); [EOL]     buf.close(); [EOL]     buf = new TokenBuffer(null); [EOL]     buf.writeObject(value); [EOL]     assertSame(value, MAPPER.readValue(buf.asParser(), URL.class)); [EOL]     buf.close(); [EOL] }
public void testURL() throws Exception { [EOL]     URL value = new URL("http://foo.com"); [EOL]     assertEquals(value, MAPPER.readValue("\"" + value.toString() + "\"", URL.class)); [EOL]     TokenBuffer buf = new TokenBuffer(null); [EOL]     buf.writeObject(null); [EOL]     assertNull(MAPPER.readValue(buf.asParser(), URL.class)); [EOL]     buf.close(); [EOL]     buf = new TokenBuffer(null); [EOL]     buf.writeObject(value); [EOL]     assertSame(value, MAPPER.readValue(buf.asParser(), URL.class)); [EOL]     buf.close(); [EOL] }
public void testURL() throws Exception { [EOL]     URL value = new URL("http://foo.com"); [EOL]     assertEquals(value, MAPPER.readValue("\"" + value.toString() + "\"", URL.class)); [EOL]     TokenBuffer buf = new TokenBuffer(null); [EOL]     buf.writeObject(null); [EOL]     assertNull(MAPPER.readValue(buf.asParser(), URL.class)); [EOL]     buf.close(); [EOL]     buf = new TokenBuffer(null); [EOL]     buf.writeObject(value); [EOL]     assertSame(value, MAPPER.readValue(buf.asParser(), URL.class)); [EOL]     buf.close(); [EOL] }
public void testURL() throws Exception { [EOL]     URL value = new URL("http://foo.com"); [EOL]     assertEquals(value, MAPPER.readValue("\"" + value.toString() + "\"", URL.class)); [EOL]     TokenBuffer buf = new TokenBuffer(null); [EOL]     buf.writeObject(null); [EOL]     assertNull(MAPPER.readValue(buf.asParser(), URL.class)); [EOL]     buf.close(); [EOL]     buf = new TokenBuffer(null); [EOL]     buf.writeObject(value); [EOL]     assertSame(value, MAPPER.readValue(buf.asParser(), URL.class)); [EOL]     buf.close(); [EOL] }
public void testURL() throws Exception { [EOL]     URL value = new URL("http://foo.com"); [EOL]     assertEquals(value, MAPPER.readValue("\"" + value.toString() + "\"", URL.class)); [EOL]     TokenBuffer buf = new TokenBuffer(null); [EOL]     buf.writeObject(null); [EOL]     assertNull(MAPPER.readValue(buf.asParser(), URL.class)); [EOL]     buf.close(); [EOL]     buf = new TokenBuffer(null); [EOL]     buf.writeObject(value); [EOL]     assertSame(value, MAPPER.readValue(buf.asParser(), URL.class)); [EOL]     buf.close(); [EOL] }
public void testCharset() throws Exception { [EOL]     Charset UTF8 = Charset.forName("UTF-8"); [EOL]     assertSame(UTF8, mapper.readValue(quote("UTF-8"), Charset.class)); [EOL] }
public void testCharset() throws Exception { [EOL]     Charset UTF8 = Charset.forName("UTF-8"); [EOL]     assertSame(UTF8, mapper.readValue(quote("UTF-8"), Charset.class)); [EOL] }
public void testCharset() throws Exception { [EOL]     Charset UTF8 = Charset.forName("UTF-8"); [EOL]     assertSame(UTF8, mapper.readValue(quote("UTF-8"), Charset.class)); [EOL] }
public void testDateWithJsonFormat() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     String json; [EOL]     mapper.disable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS); [EOL]     json = mapper.writeValueAsString(new DateAsNumberBean(0L)); [EOL]     assertEquals("{\"date\":0}", json); [EOL]     mapper.enable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS); [EOL]     json = mapper.writer().with(getUTCTimeZone()).writeValueAsString(new DateAsStringBean(0L)); [EOL]     assertEquals("{\"date\":\"1970-01-01\"}", json); [EOL]     json = mapper.writeValueAsString(new DateInCETBean(0L)); [EOL]     assertEquals("{\"date\":\"1970-01-01,01:00\"}", json); [EOL] }
public void testDateWithJsonFormat() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     String json; [EOL]     mapper.disable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS); [EOL]     json = mapper.writeValueAsString(new DateAsNumberBean(0L)); [EOL]     assertEquals("{\"date\":0}", json); [EOL]     mapper.enable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS); [EOL]     json = mapper.writer().with(getUTCTimeZone()).writeValueAsString(new DateAsStringBean(0L)); [EOL]     assertEquals("{\"date\":\"1970-01-01\"}", json); [EOL]     json = mapper.writeValueAsString(new DateInCETBean(0L)); [EOL]     assertEquals("{\"date\":\"1970-01-01,01:00\"}", json); [EOL] }
public void testDateWithJsonFormat() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     String json; [EOL]     mapper.disable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS); [EOL]     json = mapper.writeValueAsString(new DateAsNumberBean(0L)); [EOL]     assertEquals("{\"date\":0}", json); [EOL]     mapper.enable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS); [EOL]     json = mapper.writer().with(getUTCTimeZone()).writeValueAsString(new DateAsStringBean(0L)); [EOL]     assertEquals("{\"date\":\"1970-01-01\"}", json); [EOL]     json = mapper.writeValueAsString(new DateInCETBean(0L)); [EOL]     assertEquals("{\"date\":\"1970-01-01,01:00\"}", json); [EOL] }
public void testDateWithJsonFormat() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     String json; [EOL]     mapper.disable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS); [EOL]     json = mapper.writeValueAsString(new DateAsNumberBean(0L)); [EOL]     assertEquals("{\"date\":0}", json); [EOL]     mapper.enable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS); [EOL]     json = mapper.writer().with(getUTCTimeZone()).writeValueAsString(new DateAsStringBean(0L)); [EOL]     assertEquals("{\"date\":\"1970-01-01\"}", json); [EOL]     json = mapper.writeValueAsString(new DateInCETBean(0L)); [EOL]     assertEquals("{\"date\":\"1970-01-01,01:00\"}", json); [EOL] }
public void testDateWithJsonFormat() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     String json; [EOL]     mapper.disable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS); [EOL]     json = mapper.writeValueAsString(new DateAsNumberBean(0L)); [EOL]     assertEquals("{\"date\":0}", json); [EOL]     mapper.enable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS); [EOL]     json = mapper.writer().with(getUTCTimeZone()).writeValueAsString(new DateAsStringBean(0L)); [EOL]     assertEquals("{\"date\":\"1970-01-01\"}", json); [EOL]     json = mapper.writeValueAsString(new DateInCETBean(0L)); [EOL]     assertEquals("{\"date\":\"1970-01-01,01:00\"}", json); [EOL] }
public void testAnnotatedArray() throws Exception { [EOL]     ObjectMapper mapper = _mapperWithAnnotatedContextual(); [EOL]     ContextualArrayBean bean = mapper.readValue("{\"beans\":[\"x\"]}", ContextualArrayBean.class); [EOL]     assertEquals(1, bean.beans.length); [EOL]     assertEquals("array=x", bean.beans[0].value); [EOL]     bean = mapper.readValue("{\"beans\":[\"a\",\"b\"]}", ContextualArrayBean.class); [EOL]     assertEquals(2, bean.beans.length); [EOL]     assertEquals("array=a", bean.beans[0].value); [EOL]     assertEquals("array=b", bean.beans[1].value); [EOL] }
public void testAnnotatedArray() throws Exception { [EOL]     ObjectMapper mapper = _mapperWithAnnotatedContextual(); [EOL]     ContextualArrayBean bean = mapper.readValue("{\"beans\":[\"x\"]}", ContextualArrayBean.class); [EOL]     assertEquals(1, bean.beans.length); [EOL]     assertEquals("array=x", bean.beans[0].value); [EOL]     bean = mapper.readValue("{\"beans\":[\"a\",\"b\"]}", ContextualArrayBean.class); [EOL]     assertEquals(2, bean.beans.length); [EOL]     assertEquals("array=a", bean.beans[0].value); [EOL]     assertEquals("array=b", bean.beans[1].value); [EOL] }
public void testIssue798() throws Exception { [EOL]     Base base = new Derived1("derived1 prop val", "base prop val"); [EOL]     BaseContainer baseContainer = new BaseContainer("bc prop val", base); [EOL]     String generatedJson = MAPPER.writeValueAsString(baseContainer); [EOL]     BaseContainer baseContainer2 = MAPPER.readValue(generatedJson, BaseContainer.class); [EOL]     assertEquals("bc prop val", baseContainer.getBaseContainerProperty()); [EOL]     Base b = baseContainer2.getBase(); [EOL]     assertNotNull(b); [EOL]     if (b.getClass() != Derived1.class) { [EOL]         fail("Should have type Derived1, was " + b.getClass().getName()); [EOL]     } [EOL]     Derived1 derived1 = (Derived1) b; [EOL]     assertEquals("base prop val", derived1.getBaseProperty()); [EOL]     assertEquals("derived1 prop val", derived1.getDerived1Property()); [EOL] }
public void testIssue798() throws Exception { [EOL]     Base base = new Derived1("derived1 prop val", "base prop val"); [EOL]     BaseContainer baseContainer = new BaseContainer("bc prop val", base); [EOL]     String generatedJson = MAPPER.writeValueAsString(baseContainer); [EOL]     BaseContainer baseContainer2 = MAPPER.readValue(generatedJson, BaseContainer.class); [EOL]     assertEquals("bc prop val", baseContainer.getBaseContainerProperty()); [EOL]     Base b = baseContainer2.getBase(); [EOL]     assertNotNull(b); [EOL]     if (b.getClass() != Derived1.class) { [EOL]         fail("Should have type Derived1, was " + b.getClass().getName()); [EOL]     } [EOL]     Derived1 derived1 = (Derived1) b; [EOL]     assertEquals("base prop val", derived1.getBaseProperty()); [EOL]     assertEquals("derived1 prop val", derived1.getDerived1Property()); [EOL] }
public void testIssue798() throws Exception { [EOL]     Base base = new Derived1("derived1 prop val", "base prop val"); [EOL]     BaseContainer baseContainer = new BaseContainer("bc prop val", base); [EOL]     String generatedJson = MAPPER.writeValueAsString(baseContainer); [EOL]     BaseContainer baseContainer2 = MAPPER.readValue(generatedJson, BaseContainer.class); [EOL]     assertEquals("bc prop val", baseContainer.getBaseContainerProperty()); [EOL]     Base b = baseContainer2.getBase(); [EOL]     assertNotNull(b); [EOL]     if (b.getClass() != Derived1.class) { [EOL]         fail("Should have type Derived1, was " + b.getClass().getName()); [EOL]     } [EOL]     Derived1 derived1 = (Derived1) b; [EOL]     assertEquals("base prop val", derived1.getBaseProperty()); [EOL]     assertEquals("derived1 prop val", derived1.getDerived1Property()); [EOL] }
public void testIssue798() throws Exception { [EOL]     Base base = new Derived1("derived1 prop val", "base prop val"); [EOL]     BaseContainer baseContainer = new BaseContainer("bc prop val", base); [EOL]     String generatedJson = MAPPER.writeValueAsString(baseContainer); [EOL]     BaseContainer baseContainer2 = MAPPER.readValue(generatedJson, BaseContainer.class); [EOL]     assertEquals("bc prop val", baseContainer.getBaseContainerProperty()); [EOL]     Base b = baseContainer2.getBase(); [EOL]     assertNotNull(b); [EOL]     if (b.getClass() != Derived1.class) { [EOL]         fail("Should have type Derived1, was " + b.getClass().getName()); [EOL]     } [EOL]     Derived1 derived1 = (Derived1) b; [EOL]     assertEquals("base prop val", derived1.getBaseProperty()); [EOL]     assertEquals("derived1 prop val", derived1.getDerived1Property()); [EOL] }
public void testIssue798() throws Exception { [EOL]     Base base = new Derived1("derived1 prop val", "base prop val"); [EOL]     BaseContainer baseContainer = new BaseContainer("bc prop val", base); [EOL]     String generatedJson = MAPPER.writeValueAsString(baseContainer); [EOL]     BaseContainer baseContainer2 = MAPPER.readValue(generatedJson, BaseContainer.class); [EOL]     assertEquals("bc prop val", baseContainer.getBaseContainerProperty()); [EOL]     Base b = baseContainer2.getBase(); [EOL]     assertNotNull(b); [EOL]     if (b.getClass() != Derived1.class) { [EOL]         fail("Should have type Derived1, was " + b.getClass().getName()); [EOL]     } [EOL]     Derived1 derived1 = (Derived1) b; [EOL]     assertEquals("base prop val", derived1.getBaseProperty()); [EOL]     assertEquals("derived1 prop val", derived1.getDerived1Property()); [EOL] }
public void testIssue798() throws Exception { [EOL]     Base base = new Derived1("derived1 prop val", "base prop val"); [EOL]     BaseContainer baseContainer = new BaseContainer("bc prop val", base); [EOL]     String generatedJson = MAPPER.writeValueAsString(baseContainer); [EOL]     BaseContainer baseContainer2 = MAPPER.readValue(generatedJson, BaseContainer.class); [EOL]     assertEquals("bc prop val", baseContainer.getBaseContainerProperty()); [EOL]     Base b = baseContainer2.getBase(); [EOL]     assertNotNull(b); [EOL]     if (b.getClass() != Derived1.class) { [EOL]         fail("Should have type Derived1, was " + b.getClass().getName()); [EOL]     } [EOL]     Derived1 derived1 = (Derived1) b; [EOL]     assertEquals("base prop val", derived1.getBaseProperty()); [EOL]     assertEquals("derived1 prop val", derived1.getDerived1Property()); [EOL] }
public void testIssue798() throws Exception { [EOL]     Base base = new Derived1("derived1 prop val", "base prop val"); [EOL]     BaseContainer baseContainer = new BaseContainer("bc prop val", base); [EOL]     String generatedJson = MAPPER.writeValueAsString(baseContainer); [EOL]     BaseContainer baseContainer2 = MAPPER.readValue(generatedJson, BaseContainer.class); [EOL]     assertEquals("bc prop val", baseContainer.getBaseContainerProperty()); [EOL]     Base b = baseContainer2.getBase(); [EOL]     assertNotNull(b); [EOL]     if (b.getClass() != Derived1.class) { [EOL]         fail("Should have type Derived1, was " + b.getClass().getName()); [EOL]     } [EOL]     Derived1 derived1 = (Derived1) b; [EOL]     assertEquals("base prop val", derived1.getBaseProperty()); [EOL]     assertEquals("derived1 prop val", derived1.getDerived1Property()); [EOL] }
public void testIssue708() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     Advertisement708 ad = mapper.readValue("{\"title\":\"Hroch\",\"photos\":[{\"id\":3}]}", Advertisement708.class); [EOL]     assertNotNull(ad); [EOL] }
public void testIssue708() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     Advertisement708 ad = mapper.readValue("{\"title\":\"Hroch\",\"photos\":[{\"id\":3}]}", Advertisement708.class); [EOL]     assertNotNull(ad); [EOL] }
public void testIssue708() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     Advertisement708 ad = mapper.readValue("{\"title\":\"Hroch\",\"photos\":[{\"id\":3}]}", Advertisement708.class); [EOL]     assertNotNull(ad); [EOL] }
public void testIssue708() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     Advertisement708 ad = mapper.readValue("{\"title\":\"Hroch\",\"photos\":[{\"id\":3}]}", Advertisement708.class); [EOL]     assertNotNull(ad); [EOL] }
public void testIssue708() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     Advertisement708 ad = mapper.readValue("{\"title\":\"Hroch\",\"photos\":[{\"id\":3}]}", Advertisement708.class); [EOL]     assertNotNull(ad); [EOL] }
public void testIssue708() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     Advertisement708 ad = mapper.readValue("{\"title\":\"Hroch\",\"photos\":[{\"id\":3}]}", Advertisement708.class); [EOL]     assertNotNull(ad); [EOL] }
public void testIssue708() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     Advertisement708 ad = mapper.readValue("{\"title\":\"Hroch\",\"photos\":[{\"id\":3}]}", Advertisement708.class); [EOL]     assertNotNull(ad); [EOL] }
public void testTypeAnnotation() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     AbstractWrapper w = m.readValue("{ \"value\" : \"abc\" }", AbstractWrapper.class); [EOL]     Abstract bean = w.value; [EOL]     assertNotNull(bean); [EOL]     assertEquals(Concrete.class, bean.getClass()); [EOL]     assertEquals("abc", ((Concrete) bean).value); [EOL] }
public void testTypeAnnotation() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     AbstractWrapper w = m.readValue("{ \"value\" : \"abc\" }", AbstractWrapper.class); [EOL]     Abstract bean = w.value; [EOL]     assertNotNull(bean); [EOL]     assertEquals(Concrete.class, bean.getClass()); [EOL]     assertEquals("abc", ((Concrete) bean).value); [EOL] }
public void testClassWithUnknownAndIgnore() throws Exception { [EOL]     ImplicitIgnores result = MAPPER.readValue("{\"a\":1,\"b\":2,\"c\":3 }", ImplicitIgnores.class); [EOL]     assertEquals(3, result.c); [EOL]     try { [EOL]         MAPPER.readValue("{\"a\":1,\"b\":2,\"c\":3,\"d\":4 }", ImplicitIgnores.class); [EOL]     } catch (JsonMappingException e) { [EOL]         verifyException(e, "Unrecognized field \"d\""); [EOL]     } [EOL] }
public void testClassWithUnknownAndIgnore() throws Exception { [EOL]     ImplicitIgnores result = MAPPER.readValue("{\"a\":1,\"b\":2,\"c\":3 }", ImplicitIgnores.class); [EOL]     assertEquals(3, result.c); [EOL]     try { [EOL]         MAPPER.readValue("{\"a\":1,\"b\":2,\"c\":3,\"d\":4 }", ImplicitIgnores.class); [EOL]     } catch (JsonMappingException e) { [EOL]         verifyException(e, "Unrecognized field \"d\""); [EOL]     } [EOL] }
@SuppressWarnings("unchecked") [EOL] public void testIssue465() throws Exception { [EOL]     final String JSON = "{\"A\":12}"; [EOL]     Map<String, Long> map = MAPPER.readValue(JSON, Map.class); [EOL]     assertEquals(1, map.size()); [EOL]     assertEquals(Integer.valueOf(12), map.get("A")); [EOL]     MapBean bean = MAPPER.readValue(JSON, MapBean.class); [EOL]     assertEquals(1, bean.map.size()); [EOL]     assertEquals(Long.valueOf(12L), bean.map.get("A")); [EOL]     final String EMPTY_JSON = "{}"; [EOL]     map = MAPPER.readValue(EMPTY_JSON, Map.class); [EOL]     assertEquals(0, map.size()); [EOL]     bean = MAPPER.readValue(EMPTY_JSON, MapBean.class); [EOL]     assertEquals(0, bean.map.size()); [EOL] }
@SuppressWarnings("unchecked") [EOL] public void testIssue465() throws Exception { [EOL]     final String JSON = "{\"A\":12}"; [EOL]     Map<String, Long> map = MAPPER.readValue(JSON, Map.class); [EOL]     assertEquals(1, map.size()); [EOL]     assertEquals(Integer.valueOf(12), map.get("A")); [EOL]     MapBean bean = MAPPER.readValue(JSON, MapBean.class); [EOL]     assertEquals(1, bean.map.size()); [EOL]     assertEquals(Long.valueOf(12L), bean.map.get("A")); [EOL]     final String EMPTY_JSON = "{}"; [EOL]     map = MAPPER.readValue(EMPTY_JSON, Map.class); [EOL]     assertEquals(0, map.size()); [EOL]     bean = MAPPER.readValue(EMPTY_JSON, MapBean.class); [EOL]     assertEquals(0, bean.map.size()); [EOL] }
@SuppressWarnings("unchecked") [EOL] public void testIssue465() throws Exception { [EOL]     final String JSON = "{\"A\":12}"; [EOL]     Map<String, Long> map = MAPPER.readValue(JSON, Map.class); [EOL]     assertEquals(1, map.size()); [EOL]     assertEquals(Integer.valueOf(12), map.get("A")); [EOL]     MapBean bean = MAPPER.readValue(JSON, MapBean.class); [EOL]     assertEquals(1, bean.map.size()); [EOL]     assertEquals(Long.valueOf(12L), bean.map.get("A")); [EOL]     final String EMPTY_JSON = "{}"; [EOL]     map = MAPPER.readValue(EMPTY_JSON, Map.class); [EOL]     assertEquals(0, map.size()); [EOL]     bean = MAPPER.readValue(EMPTY_JSON, MapBean.class); [EOL]     assertEquals(0, bean.map.size()); [EOL] }
@SuppressWarnings("unchecked") [EOL] public void testIssue465() throws Exception { [EOL]     final String JSON = "{\"A\":12}"; [EOL]     Map<String, Long> map = MAPPER.readValue(JSON, Map.class); [EOL]     assertEquals(1, map.size()); [EOL]     assertEquals(Integer.valueOf(12), map.get("A")); [EOL]     MapBean bean = MAPPER.readValue(JSON, MapBean.class); [EOL]     assertEquals(1, bean.map.size()); [EOL]     assertEquals(Long.valueOf(12L), bean.map.get("A")); [EOL]     final String EMPTY_JSON = "{}"; [EOL]     map = MAPPER.readValue(EMPTY_JSON, Map.class); [EOL]     assertEquals(0, map.size()); [EOL]     bean = MAPPER.readValue(EMPTY_JSON, MapBean.class); [EOL]     assertEquals(0, bean.map.size()); [EOL] }
public void testSimpleDeserializationClass() throws Exception { [EOL]     Identifiable result = mapper.readValue(EXP_SIMPLE_INT_CLASS, Identifiable.class); [EOL]     assertEquals(13, result.value); [EOL]     assertSame(result, result.next); [EOL] }
public void testSimpleDeserializationClass() throws Exception { [EOL]     Identifiable result = mapper.readValue(EXP_SIMPLE_INT_CLASS, Identifiable.class); [EOL]     assertEquals(13, result.value); [EOL]     assertSame(result, result.next); [EOL] }
public void testSimpleDeserializationClass() throws Exception { [EOL]     Identifiable result = mapper.readValue(EXP_SIMPLE_INT_CLASS, Identifiable.class); [EOL]     assertEquals(13, result.value); [EOL]     assertSame(result, result.next); [EOL] }
public void testSimpleDeserializationClass() throws Exception { [EOL]     Identifiable result = mapper.readValue(EXP_SIMPLE_INT_CLASS, Identifiable.class); [EOL]     assertEquals(13, result.value); [EOL]     assertSame(result, result.next); [EOL] }
public void testSimpleDeserializationClass() throws Exception { [EOL]     Identifiable result = mapper.readValue(EXP_SIMPLE_INT_CLASS, Identifiable.class); [EOL]     assertEquals(13, result.value); [EOL]     assertSame(result, result.next); [EOL] }
public void testSimpleDeserializationClass() throws Exception { [EOL]     Identifiable result = mapper.readValue(EXP_SIMPLE_INT_CLASS, Identifiable.class); [EOL]     assertEquals(13, result.value); [EOL]     assertSame(result, result.next); [EOL] }
public void testSimpleDeserializationClass() throws Exception { [EOL]     Identifiable result = mapper.readValue(EXP_SIMPLE_INT_CLASS, Identifiable.class); [EOL]     assertEquals(13, result.value); [EOL]     assertSame(result, result.next); [EOL] }
public void testWithoutDefaultInclusion() throws Exception { [EOL]     DefaultsBean bean = mapper.readValue("{\"a\":3, \"b\": 9 }", DefaultsBean.class); [EOL]     assertEquals(3, bean.a); [EOL]     assertEquals(9, bean.b); [EOL]     ObjectMapper myMapper = new ObjectMapper(); [EOL]     myMapper.disable(MapperFeature.DEFAULT_VIEW_INCLUSION); [EOL]     bean = myMapper.readerWithView(ViewAA.class).withType(DefaultsBean.class).readValue("{\"a\":1, \"b\": 2 }"); [EOL]     assertEquals(0, bean.a); [EOL]     assertEquals(2, bean.b); [EOL] }
public void testWithoutDefaultInclusion() throws Exception { [EOL]     DefaultsBean bean = mapper.readValue("{\"a\":3, \"b\": 9 }", DefaultsBean.class); [EOL]     assertEquals(3, bean.a); [EOL]     assertEquals(9, bean.b); [EOL]     ObjectMapper myMapper = new ObjectMapper(); [EOL]     myMapper.disable(MapperFeature.DEFAULT_VIEW_INCLUSION); [EOL]     bean = myMapper.readerWithView(ViewAA.class).withType(DefaultsBean.class).readValue("{\"a\":1, \"b\": 2 }"); [EOL]     assertEquals(0, bean.a); [EOL]     assertEquals(2, bean.b); [EOL] }
public void testWithoutDefaultInclusion() throws Exception { [EOL]     DefaultsBean bean = mapper.readValue("{\"a\":3, \"b\": 9 }", DefaultsBean.class); [EOL]     assertEquals(3, bean.a); [EOL]     assertEquals(9, bean.b); [EOL]     ObjectMapper myMapper = new ObjectMapper(); [EOL]     myMapper.disable(MapperFeature.DEFAULT_VIEW_INCLUSION); [EOL]     bean = myMapper.readerWithView(ViewAA.class).withType(DefaultsBean.class).readValue("{\"a\":1, \"b\": 2 }"); [EOL]     assertEquals(0, bean.a); [EOL]     assertEquals(2, bean.b); [EOL] }
public void testWithoutDefaultInclusion() throws Exception { [EOL]     DefaultsBean bean = mapper.readValue("{\"a\":3, \"b\": 9 }", DefaultsBean.class); [EOL]     assertEquals(3, bean.a); [EOL]     assertEquals(9, bean.b); [EOL]     ObjectMapper myMapper = new ObjectMapper(); [EOL]     myMapper.disable(MapperFeature.DEFAULT_VIEW_INCLUSION); [EOL]     bean = myMapper.readerWithView(ViewAA.class).withType(DefaultsBean.class).readValue("{\"a\":1, \"b\": 2 }"); [EOL]     assertEquals(0, bean.a); [EOL]     assertEquals(2, bean.b); [EOL] }
public void testWithoutDefaultInclusion() throws Exception { [EOL]     DefaultsBean bean = mapper.readValue("{\"a\":3, \"b\": 9 }", DefaultsBean.class); [EOL]     assertEquals(3, bean.a); [EOL]     assertEquals(9, bean.b); [EOL]     ObjectMapper myMapper = new ObjectMapper(); [EOL]     myMapper.disable(MapperFeature.DEFAULT_VIEW_INCLUSION); [EOL]     bean = myMapper.readerWithView(ViewAA.class).withType(DefaultsBean.class).readValue("{\"a\":1, \"b\": 2 }"); [EOL]     assertEquals(0, bean.a); [EOL]     assertEquals(2, bean.b); [EOL] }
public void testWithoutDefaultInclusion() throws Exception { [EOL]     DefaultsBean bean = mapper.readValue("{\"a\":3, \"b\": 9 }", DefaultsBean.class); [EOL]     assertEquals(3, bean.a); [EOL]     assertEquals(9, bean.b); [EOL]     ObjectMapper myMapper = new ObjectMapper(); [EOL]     myMapper.disable(MapperFeature.DEFAULT_VIEW_INCLUSION); [EOL]     bean = myMapper.readerWithView(ViewAA.class).withType(DefaultsBean.class).readValue("{\"a\":1, \"b\": 2 }"); [EOL]     assertEquals(0, bean.a); [EOL]     assertEquals(2, bean.b); [EOL] }
public void testWithoutDefaultInclusion() throws Exception { [EOL]     DefaultsBean bean = mapper.readValue("{\"a\":3, \"b\": 9 }", DefaultsBean.class); [EOL]     assertEquals(3, bean.a); [EOL]     assertEquals(9, bean.b); [EOL]     ObjectMapper myMapper = new ObjectMapper(); [EOL]     myMapper.disable(MapperFeature.DEFAULT_VIEW_INCLUSION); [EOL]     bean = myMapper.readerWithView(ViewAA.class).withType(DefaultsBean.class).readValue("{\"a\":1, \"b\": 2 }"); [EOL]     assertEquals(0, bean.a); [EOL]     assertEquals(2, bean.b); [EOL] }
public void testWithoutDefaultInclusion() throws Exception { [EOL]     DefaultsBean bean = mapper.readValue("{\"a\":3, \"b\": 9 }", DefaultsBean.class); [EOL]     assertEquals(3, bean.a); [EOL]     assertEquals(9, bean.b); [EOL]     ObjectMapper myMapper = new ObjectMapper(); [EOL]     myMapper.disable(MapperFeature.DEFAULT_VIEW_INCLUSION); [EOL]     bean = myMapper.readerWithView(ViewAA.class).withType(DefaultsBean.class).readValue("{\"a\":1, \"b\": 2 }"); [EOL]     assertEquals(0, bean.a); [EOL]     assertEquals(2, bean.b); [EOL] }
public void testBigIntegerNode() throws Exception { [EOL]     BigIntegerNode n = BigIntegerNode.valueOf(BigInteger.ONE); [EOL]     assertStandardEquals(n); [EOL]     assertTrue(n.equals(new BigIntegerNode(BigInteger.ONE))); [EOL]     assertEquals(JsonToken.VALUE_NUMBER_INT, n.asToken()); [EOL]     assertEquals(JsonParser.NumberType.BIG_INTEGER, n.numberType()); [EOL]     assertTrue(n.isNumber()); [EOL]     assertTrue(n.isIntegralNumber()); [EOL]     assertTrue(n.isBigInteger()); [EOL]     assertEquals(BigInteger.ONE, n.numberValue()); [EOL]     assertEquals(1, n.intValue()); [EOL]     assertEquals(1L, n.longValue()); [EOL]     assertEquals(BigInteger.ONE, n.bigIntegerValue()); [EOL]     assertEquals("1", n.asText()); [EOL]     assertNodeNumbers(n, 1, 1.0); [EOL]     BigInteger maxLong = BigInteger.valueOf(Long.MAX_VALUE); [EOL]     n = BigIntegerNode.valueOf(maxLong); [EOL]     assertEquals(Long.MAX_VALUE, n.longValue()); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     JsonNode n2 = mapper.readTree(maxLong.toString()); [EOL]     assertEquals(Long.MAX_VALUE, n2.longValue()); [EOL]     BigInteger beyondLong = maxLong.shiftLeft(2); [EOL]     n2 = mapper.readTree(beyondLong.toString()); [EOL]     assertEquals(beyondLong, n2.bigIntegerValue()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.ZERO).canConvertToInt()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.valueOf(Integer.MAX_VALUE)).canConvertToInt()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.valueOf(Integer.MIN_VALUE)).canConvertToInt()); [EOL]     assertFalse(BigIntegerNode.valueOf(BigInteger.valueOf(1L + Integer.MAX_VALUE)).canConvertToInt()); [EOL]     assertFalse(BigIntegerNode.valueOf(BigInteger.valueOf(-1L + Integer.MIN_VALUE)).canConvertToInt()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.ZERO).canConvertToLong()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.valueOf(Long.MAX_VALUE)).canConvertToLong()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.valueOf(Long.MIN_VALUE)).canConvertToLong()); [EOL] }
public void testSimple() throws Exception { [EOL]     final String JSON = SAMPLE_DOC_JSON_SPEC; [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     for (int type = 0; type < 2; ++type) { [EOL]         JsonNode result; [EOL]         if (type == 0) { [EOL]             result = mapper.readTree(new StringReader(JSON)); [EOL]         } else { [EOL]             result = mapper.readTree(JSON); [EOL]         } [EOL]         assertType(result, ObjectNode.class); [EOL]         assertEquals(1, result.size()); [EOL]         assertTrue(result.isObject()); [EOL]         ObjectNode main = (ObjectNode) result; [EOL]         assertEquals("Image", main.fieldNames().next()); [EOL]         JsonNode ob = main.elements().next(); [EOL]         assertType(ob, ObjectNode.class); [EOL]         ObjectNode imageMap = (ObjectNode) ob; [EOL]         assertEquals(5, imageMap.size()); [EOL]         ob = imageMap.get("Width"); [EOL]         assertTrue(ob.isIntegralNumber()); [EOL]         assertFalse(ob.isFloatingPointNumber()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_WIDTH, ob.intValue()); [EOL]         ob = imageMap.get("Height"); [EOL]         assertTrue(ob.isIntegralNumber()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_HEIGHT, ob.intValue()); [EOL]         ob = imageMap.get("Title"); [EOL]         assertTrue(ob.isTextual()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_TITLE, ob.textValue()); [EOL]         ob = imageMap.get("Thumbnail"); [EOL]         assertType(ob, ObjectNode.class); [EOL]         ObjectNode tn = (ObjectNode) ob; [EOL]         ob = tn.get("Url"); [EOL]         assertTrue(ob.isTextual()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_TN_URL, ob.textValue()); [EOL]         ob = tn.get("Height"); [EOL]         assertTrue(ob.isIntegralNumber()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_TN_HEIGHT, ob.intValue()); [EOL]         ob = tn.get("Width"); [EOL]         assertTrue(ob.isTextual()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_TN_WIDTH, ob.textValue()); [EOL]         ob = imageMap.get("IDs"); [EOL]         assertTrue(ob.isArray()); [EOL]         ArrayNode idList = (ArrayNode) ob; [EOL]         assertEquals(4, idList.size()); [EOL]         assertEquals(4, calcLength(idList.elements())); [EOL]         assertEquals(4, calcLength(idList.iterator())); [EOL]         { [EOL]             int[] values = new int[] { SAMPLE_SPEC_VALUE_TN_ID1, SAMPLE_SPEC_VALUE_TN_ID2, SAMPLE_SPEC_VALUE_TN_ID3, SAMPLE_SPEC_VALUE_TN_ID4 }; [EOL]             for (int i = 0; i < values.length; ++i) { [EOL]                 assertEquals(values[i], idList.get(i).intValue()); [EOL]             } [EOL]             int i = 0; [EOL]             for (JsonNode n : idList) { [EOL]                 assertEquals(values[i], n.intValue()); [EOL]                 ++i; [EOL]             } [EOL]         } [EOL]     } [EOL] }
public void testSimple() throws Exception { [EOL]     final String JSON = SAMPLE_DOC_JSON_SPEC; [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     for (int type = 0; type < 2; ++type) { [EOL]         JsonNode result; [EOL]         if (type == 0) { [EOL]             result = mapper.readTree(new StringReader(JSON)); [EOL]         } else { [EOL]             result = mapper.readTree(JSON); [EOL]         } [EOL]         assertType(result, ObjectNode.class); [EOL]         assertEquals(1, result.size()); [EOL]         assertTrue(result.isObject()); [EOL]         ObjectNode main = (ObjectNode) result; [EOL]         assertEquals("Image", main.fieldNames().next()); [EOL]         JsonNode ob = main.elements().next(); [EOL]         assertType(ob, ObjectNode.class); [EOL]         ObjectNode imageMap = (ObjectNode) ob; [EOL]         assertEquals(5, imageMap.size()); [EOL]         ob = imageMap.get("Width"); [EOL]         assertTrue(ob.isIntegralNumber()); [EOL]         assertFalse(ob.isFloatingPointNumber()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_WIDTH, ob.intValue()); [EOL]         ob = imageMap.get("Height"); [EOL]         assertTrue(ob.isIntegralNumber()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_HEIGHT, ob.intValue()); [EOL]         ob = imageMap.get("Title"); [EOL]         assertTrue(ob.isTextual()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_TITLE, ob.textValue()); [EOL]         ob = imageMap.get("Thumbnail"); [EOL]         assertType(ob, ObjectNode.class); [EOL]         ObjectNode tn = (ObjectNode) ob; [EOL]         ob = tn.get("Url"); [EOL]         assertTrue(ob.isTextual()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_TN_URL, ob.textValue()); [EOL]         ob = tn.get("Height"); [EOL]         assertTrue(ob.isIntegralNumber()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_TN_HEIGHT, ob.intValue()); [EOL]         ob = tn.get("Width"); [EOL]         assertTrue(ob.isTextual()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_TN_WIDTH, ob.textValue()); [EOL]         ob = imageMap.get("IDs"); [EOL]         assertTrue(ob.isArray()); [EOL]         ArrayNode idList = (ArrayNode) ob; [EOL]         assertEquals(4, idList.size()); [EOL]         assertEquals(4, calcLength(idList.elements())); [EOL]         assertEquals(4, calcLength(idList.iterator())); [EOL]         { [EOL]             int[] values = new int[] { SAMPLE_SPEC_VALUE_TN_ID1, SAMPLE_SPEC_VALUE_TN_ID2, SAMPLE_SPEC_VALUE_TN_ID3, SAMPLE_SPEC_VALUE_TN_ID4 }; [EOL]             for (int i = 0; i < values.length; ++i) { [EOL]                 assertEquals(values[i], idList.get(i).intValue()); [EOL]             } [EOL]             int i = 0; [EOL]             for (JsonNode n : idList) { [EOL]                 assertEquals(values[i], n.intValue()); [EOL]                 ++i; [EOL]             } [EOL]         } [EOL]     } [EOL] }
public void testSimple() throws Exception { [EOL]     final String JSON = SAMPLE_DOC_JSON_SPEC; [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     for (int type = 0; type < 2; ++type) { [EOL]         JsonNode result; [EOL]         if (type == 0) { [EOL]             result = mapper.readTree(new StringReader(JSON)); [EOL]         } else { [EOL]             result = mapper.readTree(JSON); [EOL]         } [EOL]         assertType(result, ObjectNode.class); [EOL]         assertEquals(1, result.size()); [EOL]         assertTrue(result.isObject()); [EOL]         ObjectNode main = (ObjectNode) result; [EOL]         assertEquals("Image", main.fieldNames().next()); [EOL]         JsonNode ob = main.elements().next(); [EOL]         assertType(ob, ObjectNode.class); [EOL]         ObjectNode imageMap = (ObjectNode) ob; [EOL]         assertEquals(5, imageMap.size()); [EOL]         ob = imageMap.get("Width"); [EOL]         assertTrue(ob.isIntegralNumber()); [EOL]         assertFalse(ob.isFloatingPointNumber()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_WIDTH, ob.intValue()); [EOL]         ob = imageMap.get("Height"); [EOL]         assertTrue(ob.isIntegralNumber()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_HEIGHT, ob.intValue()); [EOL]         ob = imageMap.get("Title"); [EOL]         assertTrue(ob.isTextual()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_TITLE, ob.textValue()); [EOL]         ob = imageMap.get("Thumbnail"); [EOL]         assertType(ob, ObjectNode.class); [EOL]         ObjectNode tn = (ObjectNode) ob; [EOL]         ob = tn.get("Url"); [EOL]         assertTrue(ob.isTextual()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_TN_URL, ob.textValue()); [EOL]         ob = tn.get("Height"); [EOL]         assertTrue(ob.isIntegralNumber()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_TN_HEIGHT, ob.intValue()); [EOL]         ob = tn.get("Width"); [EOL]         assertTrue(ob.isTextual()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_TN_WIDTH, ob.textValue()); [EOL]         ob = imageMap.get("IDs"); [EOL]         assertTrue(ob.isArray()); [EOL]         ArrayNode idList = (ArrayNode) ob; [EOL]         assertEquals(4, idList.size()); [EOL]         assertEquals(4, calcLength(idList.elements())); [EOL]         assertEquals(4, calcLength(idList.iterator())); [EOL]         { [EOL]             int[] values = new int[] { SAMPLE_SPEC_VALUE_TN_ID1, SAMPLE_SPEC_VALUE_TN_ID2, SAMPLE_SPEC_VALUE_TN_ID3, SAMPLE_SPEC_VALUE_TN_ID4 }; [EOL]             for (int i = 0; i < values.length; ++i) { [EOL]                 assertEquals(values[i], idList.get(i).intValue()); [EOL]             } [EOL]             int i = 0; [EOL]             for (JsonNode n : idList) { [EOL]                 assertEquals(values[i], n.intValue()); [EOL]                 ++i; [EOL]             } [EOL]         } [EOL]     } [EOL] }
public void testSimple() throws Exception { [EOL]     final String JSON = SAMPLE_DOC_JSON_SPEC; [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     for (int type = 0; type < 2; ++type) { [EOL]         JsonNode result; [EOL]         if (type == 0) { [EOL]             result = mapper.readTree(new StringReader(JSON)); [EOL]         } else { [EOL]             result = mapper.readTree(JSON); [EOL]         } [EOL]         assertType(result, ObjectNode.class); [EOL]         assertEquals(1, result.size()); [EOL]         assertTrue(result.isObject()); [EOL]         ObjectNode main = (ObjectNode) result; [EOL]         assertEquals("Image", main.fieldNames().next()); [EOL]         JsonNode ob = main.elements().next(); [EOL]         assertType(ob, ObjectNode.class); [EOL]         ObjectNode imageMap = (ObjectNode) ob; [EOL]         assertEquals(5, imageMap.size()); [EOL]         ob = imageMap.get("Width"); [EOL]         assertTrue(ob.isIntegralNumber()); [EOL]         assertFalse(ob.isFloatingPointNumber()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_WIDTH, ob.intValue()); [EOL]         ob = imageMap.get("Height"); [EOL]         assertTrue(ob.isIntegralNumber()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_HEIGHT, ob.intValue()); [EOL]         ob = imageMap.get("Title"); [EOL]         assertTrue(ob.isTextual()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_TITLE, ob.textValue()); [EOL]         ob = imageMap.get("Thumbnail"); [EOL]         assertType(ob, ObjectNode.class); [EOL]         ObjectNode tn = (ObjectNode) ob; [EOL]         ob = tn.get("Url"); [EOL]         assertTrue(ob.isTextual()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_TN_URL, ob.textValue()); [EOL]         ob = tn.get("Height"); [EOL]         assertTrue(ob.isIntegralNumber()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_TN_HEIGHT, ob.intValue()); [EOL]         ob = tn.get("Width"); [EOL]         assertTrue(ob.isTextual()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_TN_WIDTH, ob.textValue()); [EOL]         ob = imageMap.get("IDs"); [EOL]         assertTrue(ob.isArray()); [EOL]         ArrayNode idList = (ArrayNode) ob; [EOL]         assertEquals(4, idList.size()); [EOL]         assertEquals(4, calcLength(idList.elements())); [EOL]         assertEquals(4, calcLength(idList.iterator())); [EOL]         { [EOL]             int[] values = new int[] { SAMPLE_SPEC_VALUE_TN_ID1, SAMPLE_SPEC_VALUE_TN_ID2, SAMPLE_SPEC_VALUE_TN_ID3, SAMPLE_SPEC_VALUE_TN_ID4 }; [EOL]             for (int i = 0; i < values.length; ++i) { [EOL]                 assertEquals(values[i], idList.get(i).intValue()); [EOL]             } [EOL]             int i = 0; [EOL]             for (JsonNode n : idList) { [EOL]                 assertEquals(values[i], n.intValue()); [EOL]                 ++i; [EOL]             } [EOL]         } [EOL]     } [EOL] }
public void testSimple() throws Exception { [EOL]     final String JSON = SAMPLE_DOC_JSON_SPEC; [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     for (int type = 0; type < 2; ++type) { [EOL]         JsonNode result; [EOL]         if (type == 0) { [EOL]             result = mapper.readTree(new StringReader(JSON)); [EOL]         } else { [EOL]             result = mapper.readTree(JSON); [EOL]         } [EOL]         assertType(result, ObjectNode.class); [EOL]         assertEquals(1, result.size()); [EOL]         assertTrue(result.isObject()); [EOL]         ObjectNode main = (ObjectNode) result; [EOL]         assertEquals("Image", main.fieldNames().next()); [EOL]         JsonNode ob = main.elements().next(); [EOL]         assertType(ob, ObjectNode.class); [EOL]         ObjectNode imageMap = (ObjectNode) ob; [EOL]         assertEquals(5, imageMap.size()); [EOL]         ob = imageMap.get("Width"); [EOL]         assertTrue(ob.isIntegralNumber()); [EOL]         assertFalse(ob.isFloatingPointNumber()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_WIDTH, ob.intValue()); [EOL]         ob = imageMap.get("Height"); [EOL]         assertTrue(ob.isIntegralNumber()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_HEIGHT, ob.intValue()); [EOL]         ob = imageMap.get("Title"); [EOL]         assertTrue(ob.isTextual()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_TITLE, ob.textValue()); [EOL]         ob = imageMap.get("Thumbnail"); [EOL]         assertType(ob, ObjectNode.class); [EOL]         ObjectNode tn = (ObjectNode) ob; [EOL]         ob = tn.get("Url"); [EOL]         assertTrue(ob.isTextual()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_TN_URL, ob.textValue()); [EOL]         ob = tn.get("Height"); [EOL]         assertTrue(ob.isIntegralNumber()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_TN_HEIGHT, ob.intValue()); [EOL]         ob = tn.get("Width"); [EOL]         assertTrue(ob.isTextual()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_TN_WIDTH, ob.textValue()); [EOL]         ob = imageMap.get("IDs"); [EOL]         assertTrue(ob.isArray()); [EOL]         ArrayNode idList = (ArrayNode) ob; [EOL]         assertEquals(4, idList.size()); [EOL]         assertEquals(4, calcLength(idList.elements())); [EOL]         assertEquals(4, calcLength(idList.iterator())); [EOL]         { [EOL]             int[] values = new int[] { SAMPLE_SPEC_VALUE_TN_ID1, SAMPLE_SPEC_VALUE_TN_ID2, SAMPLE_SPEC_VALUE_TN_ID3, SAMPLE_SPEC_VALUE_TN_ID4 }; [EOL]             for (int i = 0; i < values.length; ++i) { [EOL]                 assertEquals(values[i], idList.get(i).intValue()); [EOL]             } [EOL]             int i = 0; [EOL]             for (JsonNode n : idList) { [EOL]                 assertEquals(values[i], n.intValue()); [EOL]                 ++i; [EOL]             } [EOL]         } [EOL]     } [EOL] }
public void testSimple() throws Exception { [EOL]     final String JSON = SAMPLE_DOC_JSON_SPEC; [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     for (int type = 0; type < 2; ++type) { [EOL]         JsonNode result; [EOL]         if (type == 0) { [EOL]             result = mapper.readTree(new StringReader(JSON)); [EOL]         } else { [EOL]             result = mapper.readTree(JSON); [EOL]         } [EOL]         assertType(result, ObjectNode.class); [EOL]         assertEquals(1, result.size()); [EOL]         assertTrue(result.isObject()); [EOL]         ObjectNode main = (ObjectNode) result; [EOL]         assertEquals("Image", main.fieldNames().next()); [EOL]         JsonNode ob = main.elements().next(); [EOL]         assertType(ob, ObjectNode.class); [EOL]         ObjectNode imageMap = (ObjectNode) ob; [EOL]         assertEquals(5, imageMap.size()); [EOL]         ob = imageMap.get("Width"); [EOL]         assertTrue(ob.isIntegralNumber()); [EOL]         assertFalse(ob.isFloatingPointNumber()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_WIDTH, ob.intValue()); [EOL]         ob = imageMap.get("Height"); [EOL]         assertTrue(ob.isIntegralNumber()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_HEIGHT, ob.intValue()); [EOL]         ob = imageMap.get("Title"); [EOL]         assertTrue(ob.isTextual()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_TITLE, ob.textValue()); [EOL]         ob = imageMap.get("Thumbnail"); [EOL]         assertType(ob, ObjectNode.class); [EOL]         ObjectNode tn = (ObjectNode) ob; [EOL]         ob = tn.get("Url"); [EOL]         assertTrue(ob.isTextual()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_TN_URL, ob.textValue()); [EOL]         ob = tn.get("Height"); [EOL]         assertTrue(ob.isIntegralNumber()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_TN_HEIGHT, ob.intValue()); [EOL]         ob = tn.get("Width"); [EOL]         assertTrue(ob.isTextual()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_TN_WIDTH, ob.textValue()); [EOL]         ob = imageMap.get("IDs"); [EOL]         assertTrue(ob.isArray()); [EOL]         ArrayNode idList = (ArrayNode) ob; [EOL]         assertEquals(4, idList.size()); [EOL]         assertEquals(4, calcLength(idList.elements())); [EOL]         assertEquals(4, calcLength(idList.iterator())); [EOL]         { [EOL]             int[] values = new int[] { SAMPLE_SPEC_VALUE_TN_ID1, SAMPLE_SPEC_VALUE_TN_ID2, SAMPLE_SPEC_VALUE_TN_ID3, SAMPLE_SPEC_VALUE_TN_ID4 }; [EOL]             for (int i = 0; i < values.length; ++i) { [EOL]                 assertEquals(values[i], idList.get(i).intValue()); [EOL]             } [EOL]             int i = 0; [EOL]             for (JsonNode n : idList) { [EOL]                 assertEquals(values[i], n.intValue()); [EOL]                 ++i; [EOL]             } [EOL]         } [EOL]     } [EOL] }
public void testDeserializeSimple() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     JsonSchema schema = mapper.generateJsonSchema(Schemable.class); [EOL]     assertNotNull(schema); [EOL]     String schemaStr = mapper.writeValueAsString(schema); [EOL]     assertNotNull(schemaStr); [EOL]     JsonSchema result = mapper.readValue(schemaStr, JsonSchema.class); [EOL]     assertEquals("Trying to read from '" + schemaStr + "'", schema, result); [EOL] }
public void testDeserializeSimple() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     JsonSchema schema = mapper.generateJsonSchema(Schemable.class); [EOL]     assertNotNull(schema); [EOL]     String schemaStr = mapper.writeValueAsString(schema); [EOL]     assertNotNull(schemaStr); [EOL]     JsonSchema result = mapper.readValue(schemaStr, JsonSchema.class); [EOL]     assertEquals("Trying to read from '" + schemaStr + "'", schema, result); [EOL] }
public void testDeserializeSimple() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     JsonSchema schema = mapper.generateJsonSchema(Schemable.class); [EOL]     assertNotNull(schema); [EOL]     String schemaStr = mapper.writeValueAsString(schema); [EOL]     assertNotNull(schemaStr); [EOL]     JsonSchema result = mapper.readValue(schemaStr, JsonSchema.class); [EOL]     assertEquals("Trying to read from '" + schemaStr + "'", schema, result); [EOL] }
public void testDeserializeSimple() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     JsonSchema schema = mapper.generateJsonSchema(Schemable.class); [EOL]     assertNotNull(schema); [EOL]     String schemaStr = mapper.writeValueAsString(schema); [EOL]     assertNotNull(schemaStr); [EOL]     JsonSchema result = mapper.readValue(schemaStr, JsonSchema.class); [EOL]     assertEquals("Trying to read from '" + schemaStr + "'", schema, result); [EOL] }
public void testDeserializeSimple() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     JsonSchema schema = mapper.generateJsonSchema(Schemable.class); [EOL]     assertNotNull(schema); [EOL]     String schemaStr = mapper.writeValueAsString(schema); [EOL]     assertNotNull(schemaStr); [EOL]     JsonSchema result = mapper.readValue(schemaStr, JsonSchema.class); [EOL]     assertEquals("Trying to read from '" + schemaStr + "'", schema, result); [EOL] }
public void testBigIntegerNode() throws Exception { [EOL]     BigIntegerNode n = BigIntegerNode.valueOf(BigInteger.ONE); [EOL]     assertStandardEquals(n); [EOL]     assertTrue(n.equals(new BigIntegerNode(BigInteger.ONE))); [EOL]     assertEquals(JsonToken.VALUE_NUMBER_INT, n.asToken()); [EOL]     assertEquals(JsonParser.NumberType.BIG_INTEGER, n.numberType()); [EOL]     assertTrue(n.isNumber()); [EOL]     assertTrue(n.isIntegralNumber()); [EOL]     assertTrue(n.isBigInteger()); [EOL]     assertEquals(BigInteger.ONE, n.numberValue()); [EOL]     assertEquals(1, n.intValue()); [EOL]     assertEquals(1L, n.longValue()); [EOL]     assertEquals(BigInteger.ONE, n.bigIntegerValue()); [EOL]     assertEquals("1", n.asText()); [EOL]     assertNodeNumbers(n, 1, 1.0); [EOL]     BigInteger maxLong = BigInteger.valueOf(Long.MAX_VALUE); [EOL]     n = BigIntegerNode.valueOf(maxLong); [EOL]     assertEquals(Long.MAX_VALUE, n.longValue()); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     JsonNode n2 = mapper.readTree(maxLong.toString()); [EOL]     assertEquals(Long.MAX_VALUE, n2.longValue()); [EOL]     BigInteger beyondLong = maxLong.shiftLeft(2); [EOL]     n2 = mapper.readTree(beyondLong.toString()); [EOL]     assertEquals(beyondLong, n2.bigIntegerValue()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.ZERO).canConvertToInt()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.valueOf(Integer.MAX_VALUE)).canConvertToInt()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.valueOf(Integer.MIN_VALUE)).canConvertToInt()); [EOL]     assertFalse(BigIntegerNode.valueOf(BigInteger.valueOf(1L + Integer.MAX_VALUE)).canConvertToInt()); [EOL]     assertFalse(BigIntegerNode.valueOf(BigInteger.valueOf(-1L + Integer.MIN_VALUE)).canConvertToInt()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.ZERO).canConvertToLong()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.valueOf(Long.MAX_VALUE)).canConvertToLong()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.valueOf(Long.MIN_VALUE)).canConvertToLong()); [EOL] }
public void testSimple() throws Exception { [EOL]     final String JSON = SAMPLE_DOC_JSON_SPEC; [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     for (int type = 0; type < 2; ++type) { [EOL]         JsonNode result; [EOL]         if (type == 0) { [EOL]             result = mapper.readTree(new StringReader(JSON)); [EOL]         } else { [EOL]             result = mapper.readTree(JSON); [EOL]         } [EOL]         assertType(result, ObjectNode.class); [EOL]         assertEquals(1, result.size()); [EOL]         assertTrue(result.isObject()); [EOL]         ObjectNode main = (ObjectNode) result; [EOL]         assertEquals("Image", main.fieldNames().next()); [EOL]         JsonNode ob = main.elements().next(); [EOL]         assertType(ob, ObjectNode.class); [EOL]         ObjectNode imageMap = (ObjectNode) ob; [EOL]         assertEquals(5, imageMap.size()); [EOL]         ob = imageMap.get("Width"); [EOL]         assertTrue(ob.isIntegralNumber()); [EOL]         assertFalse(ob.isFloatingPointNumber()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_WIDTH, ob.intValue()); [EOL]         ob = imageMap.get("Height"); [EOL]         assertTrue(ob.isIntegralNumber()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_HEIGHT, ob.intValue()); [EOL]         ob = imageMap.get("Title"); [EOL]         assertTrue(ob.isTextual()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_TITLE, ob.textValue()); [EOL]         ob = imageMap.get("Thumbnail"); [EOL]         assertType(ob, ObjectNode.class); [EOL]         ObjectNode tn = (ObjectNode) ob; [EOL]         ob = tn.get("Url"); [EOL]         assertTrue(ob.isTextual()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_TN_URL, ob.textValue()); [EOL]         ob = tn.get("Height"); [EOL]         assertTrue(ob.isIntegralNumber()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_TN_HEIGHT, ob.intValue()); [EOL]         ob = tn.get("Width"); [EOL]         assertTrue(ob.isTextual()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_TN_WIDTH, ob.textValue()); [EOL]         ob = imageMap.get("IDs"); [EOL]         assertTrue(ob.isArray()); [EOL]         ArrayNode idList = (ArrayNode) ob; [EOL]         assertEquals(4, idList.size()); [EOL]         assertEquals(4, calcLength(idList.elements())); [EOL]         assertEquals(4, calcLength(idList.iterator())); [EOL]         { [EOL]             int[] values = new int[] { SAMPLE_SPEC_VALUE_TN_ID1, SAMPLE_SPEC_VALUE_TN_ID2, SAMPLE_SPEC_VALUE_TN_ID3, SAMPLE_SPEC_VALUE_TN_ID4 }; [EOL]             for (int i = 0; i < values.length; ++i) { [EOL]                 assertEquals(values[i], idList.get(i).intValue()); [EOL]             } [EOL]             int i = 0; [EOL]             for (JsonNode n : idList) { [EOL]                 assertEquals(values[i], n.intValue()); [EOL]                 ++i; [EOL]             } [EOL]         } [EOL]     } [EOL] }
public void testSimple() throws Exception { [EOL]     final String JSON = SAMPLE_DOC_JSON_SPEC; [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     for (int type = 0; type < 2; ++type) { [EOL]         JsonNode result; [EOL]         if (type == 0) { [EOL]             result = mapper.readTree(new StringReader(JSON)); [EOL]         } else { [EOL]             result = mapper.readTree(JSON); [EOL]         } [EOL]         assertType(result, ObjectNode.class); [EOL]         assertEquals(1, result.size()); [EOL]         assertTrue(result.isObject()); [EOL]         ObjectNode main = (ObjectNode) result; [EOL]         assertEquals("Image", main.fieldNames().next()); [EOL]         JsonNode ob = main.elements().next(); [EOL]         assertType(ob, ObjectNode.class); [EOL]         ObjectNode imageMap = (ObjectNode) ob; [EOL]         assertEquals(5, imageMap.size()); [EOL]         ob = imageMap.get("Width"); [EOL]         assertTrue(ob.isIntegralNumber()); [EOL]         assertFalse(ob.isFloatingPointNumber()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_WIDTH, ob.intValue()); [EOL]         ob = imageMap.get("Height"); [EOL]         assertTrue(ob.isIntegralNumber()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_HEIGHT, ob.intValue()); [EOL]         ob = imageMap.get("Title"); [EOL]         assertTrue(ob.isTextual()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_TITLE, ob.textValue()); [EOL]         ob = imageMap.get("Thumbnail"); [EOL]         assertType(ob, ObjectNode.class); [EOL]         ObjectNode tn = (ObjectNode) ob; [EOL]         ob = tn.get("Url"); [EOL]         assertTrue(ob.isTextual()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_TN_URL, ob.textValue()); [EOL]         ob = tn.get("Height"); [EOL]         assertTrue(ob.isIntegralNumber()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_TN_HEIGHT, ob.intValue()); [EOL]         ob = tn.get("Width"); [EOL]         assertTrue(ob.isTextual()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_TN_WIDTH, ob.textValue()); [EOL]         ob = imageMap.get("IDs"); [EOL]         assertTrue(ob.isArray()); [EOL]         ArrayNode idList = (ArrayNode) ob; [EOL]         assertEquals(4, idList.size()); [EOL]         assertEquals(4, calcLength(idList.elements())); [EOL]         assertEquals(4, calcLength(idList.iterator())); [EOL]         { [EOL]             int[] values = new int[] { SAMPLE_SPEC_VALUE_TN_ID1, SAMPLE_SPEC_VALUE_TN_ID2, SAMPLE_SPEC_VALUE_TN_ID3, SAMPLE_SPEC_VALUE_TN_ID4 }; [EOL]             for (int i = 0; i < values.length; ++i) { [EOL]                 assertEquals(values[i], idList.get(i).intValue()); [EOL]             } [EOL]             int i = 0; [EOL]             for (JsonNode n : idList) { [EOL]                 assertEquals(values[i], n.intValue()); [EOL]                 ++i; [EOL]             } [EOL]         } [EOL]     } [EOL] }
public void testSimple() throws Exception { [EOL]     final String JSON = SAMPLE_DOC_JSON_SPEC; [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     for (int type = 0; type < 2; ++type) { [EOL]         JsonNode result; [EOL]         if (type == 0) { [EOL]             result = mapper.readTree(new StringReader(JSON)); [EOL]         } else { [EOL]             result = mapper.readTree(JSON); [EOL]         } [EOL]         assertType(result, ObjectNode.class); [EOL]         assertEquals(1, result.size()); [EOL]         assertTrue(result.isObject()); [EOL]         ObjectNode main = (ObjectNode) result; [EOL]         assertEquals("Image", main.fieldNames().next()); [EOL]         JsonNode ob = main.elements().next(); [EOL]         assertType(ob, ObjectNode.class); [EOL]         ObjectNode imageMap = (ObjectNode) ob; [EOL]         assertEquals(5, imageMap.size()); [EOL]         ob = imageMap.get("Width"); [EOL]         assertTrue(ob.isIntegralNumber()); [EOL]         assertFalse(ob.isFloatingPointNumber()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_WIDTH, ob.intValue()); [EOL]         ob = imageMap.get("Height"); [EOL]         assertTrue(ob.isIntegralNumber()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_HEIGHT, ob.intValue()); [EOL]         ob = imageMap.get("Title"); [EOL]         assertTrue(ob.isTextual()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_TITLE, ob.textValue()); [EOL]         ob = imageMap.get("Thumbnail"); [EOL]         assertType(ob, ObjectNode.class); [EOL]         ObjectNode tn = (ObjectNode) ob; [EOL]         ob = tn.get("Url"); [EOL]         assertTrue(ob.isTextual()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_TN_URL, ob.textValue()); [EOL]         ob = tn.get("Height"); [EOL]         assertTrue(ob.isIntegralNumber()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_TN_HEIGHT, ob.intValue()); [EOL]         ob = tn.get("Width"); [EOL]         assertTrue(ob.isTextual()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_TN_WIDTH, ob.textValue()); [EOL]         ob = imageMap.get("IDs"); [EOL]         assertTrue(ob.isArray()); [EOL]         ArrayNode idList = (ArrayNode) ob; [EOL]         assertEquals(4, idList.size()); [EOL]         assertEquals(4, calcLength(idList.elements())); [EOL]         assertEquals(4, calcLength(idList.iterator())); [EOL]         { [EOL]             int[] values = new int[] { SAMPLE_SPEC_VALUE_TN_ID1, SAMPLE_SPEC_VALUE_TN_ID2, SAMPLE_SPEC_VALUE_TN_ID3, SAMPLE_SPEC_VALUE_TN_ID4 }; [EOL]             for (int i = 0; i < values.length; ++i) { [EOL]                 assertEquals(values[i], idList.get(i).intValue()); [EOL]             } [EOL]             int i = 0; [EOL]             for (JsonNode n : idList) { [EOL]                 assertEquals(values[i], n.intValue()); [EOL]                 ++i; [EOL]             } [EOL]         } [EOL]     } [EOL] }
public void testSimple() throws Exception { [EOL]     final String JSON = SAMPLE_DOC_JSON_SPEC; [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     for (int type = 0; type < 2; ++type) { [EOL]         JsonNode result; [EOL]         if (type == 0) { [EOL]             result = mapper.readTree(new StringReader(JSON)); [EOL]         } else { [EOL]             result = mapper.readTree(JSON); [EOL]         } [EOL]         assertType(result, ObjectNode.class); [EOL]         assertEquals(1, result.size()); [EOL]         assertTrue(result.isObject()); [EOL]         ObjectNode main = (ObjectNode) result; [EOL]         assertEquals("Image", main.fieldNames().next()); [EOL]         JsonNode ob = main.elements().next(); [EOL]         assertType(ob, ObjectNode.class); [EOL]         ObjectNode imageMap = (ObjectNode) ob; [EOL]         assertEquals(5, imageMap.size()); [EOL]         ob = imageMap.get("Width"); [EOL]         assertTrue(ob.isIntegralNumber()); [EOL]         assertFalse(ob.isFloatingPointNumber()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_WIDTH, ob.intValue()); [EOL]         ob = imageMap.get("Height"); [EOL]         assertTrue(ob.isIntegralNumber()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_HEIGHT, ob.intValue()); [EOL]         ob = imageMap.get("Title"); [EOL]         assertTrue(ob.isTextual()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_TITLE, ob.textValue()); [EOL]         ob = imageMap.get("Thumbnail"); [EOL]         assertType(ob, ObjectNode.class); [EOL]         ObjectNode tn = (ObjectNode) ob; [EOL]         ob = tn.get("Url"); [EOL]         assertTrue(ob.isTextual()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_TN_URL, ob.textValue()); [EOL]         ob = tn.get("Height"); [EOL]         assertTrue(ob.isIntegralNumber()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_TN_HEIGHT, ob.intValue()); [EOL]         ob = tn.get("Width"); [EOL]         assertTrue(ob.isTextual()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_TN_WIDTH, ob.textValue()); [EOL]         ob = imageMap.get("IDs"); [EOL]         assertTrue(ob.isArray()); [EOL]         ArrayNode idList = (ArrayNode) ob; [EOL]         assertEquals(4, idList.size()); [EOL]         assertEquals(4, calcLength(idList.elements())); [EOL]         assertEquals(4, calcLength(idList.iterator())); [EOL]         { [EOL]             int[] values = new int[] { SAMPLE_SPEC_VALUE_TN_ID1, SAMPLE_SPEC_VALUE_TN_ID2, SAMPLE_SPEC_VALUE_TN_ID3, SAMPLE_SPEC_VALUE_TN_ID4 }; [EOL]             for (int i = 0; i < values.length; ++i) { [EOL]                 assertEquals(values[i], idList.get(i).intValue()); [EOL]             } [EOL]             int i = 0; [EOL]             for (JsonNode n : idList) { [EOL]                 assertEquals(values[i], n.intValue()); [EOL]                 ++i; [EOL]             } [EOL]         } [EOL]     } [EOL] }
public void testSimple() throws Exception { [EOL]     final String JSON = SAMPLE_DOC_JSON_SPEC; [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     for (int type = 0; type < 2; ++type) { [EOL]         JsonNode result; [EOL]         if (type == 0) { [EOL]             result = mapper.readTree(new StringReader(JSON)); [EOL]         } else { [EOL]             result = mapper.readTree(JSON); [EOL]         } [EOL]         assertType(result, ObjectNode.class); [EOL]         assertEquals(1, result.size()); [EOL]         assertTrue(result.isObject()); [EOL]         ObjectNode main = (ObjectNode) result; [EOL]         assertEquals("Image", main.fieldNames().next()); [EOL]         JsonNode ob = main.elements().next(); [EOL]         assertType(ob, ObjectNode.class); [EOL]         ObjectNode imageMap = (ObjectNode) ob; [EOL]         assertEquals(5, imageMap.size()); [EOL]         ob = imageMap.get("Width"); [EOL]         assertTrue(ob.isIntegralNumber()); [EOL]         assertFalse(ob.isFloatingPointNumber()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_WIDTH, ob.intValue()); [EOL]         ob = imageMap.get("Height"); [EOL]         assertTrue(ob.isIntegralNumber()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_HEIGHT, ob.intValue()); [EOL]         ob = imageMap.get("Title"); [EOL]         assertTrue(ob.isTextual()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_TITLE, ob.textValue()); [EOL]         ob = imageMap.get("Thumbnail"); [EOL]         assertType(ob, ObjectNode.class); [EOL]         ObjectNode tn = (ObjectNode) ob; [EOL]         ob = tn.get("Url"); [EOL]         assertTrue(ob.isTextual()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_TN_URL, ob.textValue()); [EOL]         ob = tn.get("Height"); [EOL]         assertTrue(ob.isIntegralNumber()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_TN_HEIGHT, ob.intValue()); [EOL]         ob = tn.get("Width"); [EOL]         assertTrue(ob.isTextual()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_TN_WIDTH, ob.textValue()); [EOL]         ob = imageMap.get("IDs"); [EOL]         assertTrue(ob.isArray()); [EOL]         ArrayNode idList = (ArrayNode) ob; [EOL]         assertEquals(4, idList.size()); [EOL]         assertEquals(4, calcLength(idList.elements())); [EOL]         assertEquals(4, calcLength(idList.iterator())); [EOL]         { [EOL]             int[] values = new int[] { SAMPLE_SPEC_VALUE_TN_ID1, SAMPLE_SPEC_VALUE_TN_ID2, SAMPLE_SPEC_VALUE_TN_ID3, SAMPLE_SPEC_VALUE_TN_ID4 }; [EOL]             for (int i = 0; i < values.length; ++i) { [EOL]                 assertEquals(values[i], idList.get(i).intValue()); [EOL]             } [EOL]             int i = 0; [EOL]             for (JsonNode n : idList) { [EOL]                 assertEquals(values[i], n.intValue()); [EOL]                 ++i; [EOL]             } [EOL]         } [EOL]     } [EOL] }
public void testSimple() throws Exception { [EOL]     final String JSON = SAMPLE_DOC_JSON_SPEC; [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     for (int type = 0; type < 2; ++type) { [EOL]         JsonNode result; [EOL]         if (type == 0) { [EOL]             result = mapper.readTree(new StringReader(JSON)); [EOL]         } else { [EOL]             result = mapper.readTree(JSON); [EOL]         } [EOL]         assertType(result, ObjectNode.class); [EOL]         assertEquals(1, result.size()); [EOL]         assertTrue(result.isObject()); [EOL]         ObjectNode main = (ObjectNode) result; [EOL]         assertEquals("Image", main.fieldNames().next()); [EOL]         JsonNode ob = main.elements().next(); [EOL]         assertType(ob, ObjectNode.class); [EOL]         ObjectNode imageMap = (ObjectNode) ob; [EOL]         assertEquals(5, imageMap.size()); [EOL]         ob = imageMap.get("Width"); [EOL]         assertTrue(ob.isIntegralNumber()); [EOL]         assertFalse(ob.isFloatingPointNumber()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_WIDTH, ob.intValue()); [EOL]         ob = imageMap.get("Height"); [EOL]         assertTrue(ob.isIntegralNumber()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_HEIGHT, ob.intValue()); [EOL]         ob = imageMap.get("Title"); [EOL]         assertTrue(ob.isTextual()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_TITLE, ob.textValue()); [EOL]         ob = imageMap.get("Thumbnail"); [EOL]         assertType(ob, ObjectNode.class); [EOL]         ObjectNode tn = (ObjectNode) ob; [EOL]         ob = tn.get("Url"); [EOL]         assertTrue(ob.isTextual()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_TN_URL, ob.textValue()); [EOL]         ob = tn.get("Height"); [EOL]         assertTrue(ob.isIntegralNumber()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_TN_HEIGHT, ob.intValue()); [EOL]         ob = tn.get("Width"); [EOL]         assertTrue(ob.isTextual()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_TN_WIDTH, ob.textValue()); [EOL]         ob = imageMap.get("IDs"); [EOL]         assertTrue(ob.isArray()); [EOL]         ArrayNode idList = (ArrayNode) ob; [EOL]         assertEquals(4, idList.size()); [EOL]         assertEquals(4, calcLength(idList.elements())); [EOL]         assertEquals(4, calcLength(idList.iterator())); [EOL]         { [EOL]             int[] values = new int[] { SAMPLE_SPEC_VALUE_TN_ID1, SAMPLE_SPEC_VALUE_TN_ID2, SAMPLE_SPEC_VALUE_TN_ID3, SAMPLE_SPEC_VALUE_TN_ID4 }; [EOL]             for (int i = 0; i < values.length; ++i) { [EOL]                 assertEquals(values[i], idList.get(i).intValue()); [EOL]             } [EOL]             int i = 0; [EOL]             for (JsonNode n : idList) { [EOL]                 assertEquals(values[i], n.intValue()); [EOL]                 ++i; [EOL]             } [EOL]         } [EOL]     } [EOL] }
public void testSimple() throws Exception { [EOL]     final String JSON = SAMPLE_DOC_JSON_SPEC; [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     for (int type = 0; type < 2; ++type) { [EOL]         JsonNode result; [EOL]         if (type == 0) { [EOL]             result = mapper.readTree(new StringReader(JSON)); [EOL]         } else { [EOL]             result = mapper.readTree(JSON); [EOL]         } [EOL]         assertType(result, ObjectNode.class); [EOL]         assertEquals(1, result.size()); [EOL]         assertTrue(result.isObject()); [EOL]         ObjectNode main = (ObjectNode) result; [EOL]         assertEquals("Image", main.fieldNames().next()); [EOL]         JsonNode ob = main.elements().next(); [EOL]         assertType(ob, ObjectNode.class); [EOL]         ObjectNode imageMap = (ObjectNode) ob; [EOL]         assertEquals(5, imageMap.size()); [EOL]         ob = imageMap.get("Width"); [EOL]         assertTrue(ob.isIntegralNumber()); [EOL]         assertFalse(ob.isFloatingPointNumber()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_WIDTH, ob.intValue()); [EOL]         ob = imageMap.get("Height"); [EOL]         assertTrue(ob.isIntegralNumber()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_HEIGHT, ob.intValue()); [EOL]         ob = imageMap.get("Title"); [EOL]         assertTrue(ob.isTextual()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_TITLE, ob.textValue()); [EOL]         ob = imageMap.get("Thumbnail"); [EOL]         assertType(ob, ObjectNode.class); [EOL]         ObjectNode tn = (ObjectNode) ob; [EOL]         ob = tn.get("Url"); [EOL]         assertTrue(ob.isTextual()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_TN_URL, ob.textValue()); [EOL]         ob = tn.get("Height"); [EOL]         assertTrue(ob.isIntegralNumber()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_TN_HEIGHT, ob.intValue()); [EOL]         ob = tn.get("Width"); [EOL]         assertTrue(ob.isTextual()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_TN_WIDTH, ob.textValue()); [EOL]         ob = imageMap.get("IDs"); [EOL]         assertTrue(ob.isArray()); [EOL]         ArrayNode idList = (ArrayNode) ob; [EOL]         assertEquals(4, idList.size()); [EOL]         assertEquals(4, calcLength(idList.elements())); [EOL]         assertEquals(4, calcLength(idList.iterator())); [EOL]         { [EOL]             int[] values = new int[] { SAMPLE_SPEC_VALUE_TN_ID1, SAMPLE_SPEC_VALUE_TN_ID2, SAMPLE_SPEC_VALUE_TN_ID3, SAMPLE_SPEC_VALUE_TN_ID4 }; [EOL]             for (int i = 0; i < values.length; ++i) { [EOL]                 assertEquals(values[i], idList.get(i).intValue()); [EOL]             } [EOL]             int i = 0; [EOL]             for (JsonNode n : idList) { [EOL]                 assertEquals(values[i], n.intValue()); [EOL]                 ++i; [EOL]             } [EOL]         } [EOL]     } [EOL] }
public void testSimple() throws Exception { [EOL]     final String JSON = SAMPLE_DOC_JSON_SPEC; [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     for (int type = 0; type < 2; ++type) { [EOL]         JsonNode result; [EOL]         if (type == 0) { [EOL]             result = mapper.readTree(new StringReader(JSON)); [EOL]         } else { [EOL]             result = mapper.readTree(JSON); [EOL]         } [EOL]         assertType(result, ObjectNode.class); [EOL]         assertEquals(1, result.size()); [EOL]         assertTrue(result.isObject()); [EOL]         ObjectNode main = (ObjectNode) result; [EOL]         assertEquals("Image", main.fieldNames().next()); [EOL]         JsonNode ob = main.elements().next(); [EOL]         assertType(ob, ObjectNode.class); [EOL]         ObjectNode imageMap = (ObjectNode) ob; [EOL]         assertEquals(5, imageMap.size()); [EOL]         ob = imageMap.get("Width"); [EOL]         assertTrue(ob.isIntegralNumber()); [EOL]         assertFalse(ob.isFloatingPointNumber()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_WIDTH, ob.intValue()); [EOL]         ob = imageMap.get("Height"); [EOL]         assertTrue(ob.isIntegralNumber()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_HEIGHT, ob.intValue()); [EOL]         ob = imageMap.get("Title"); [EOL]         assertTrue(ob.isTextual()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_TITLE, ob.textValue()); [EOL]         ob = imageMap.get("Thumbnail"); [EOL]         assertType(ob, ObjectNode.class); [EOL]         ObjectNode tn = (ObjectNode) ob; [EOL]         ob = tn.get("Url"); [EOL]         assertTrue(ob.isTextual()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_TN_URL, ob.textValue()); [EOL]         ob = tn.get("Height"); [EOL]         assertTrue(ob.isIntegralNumber()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_TN_HEIGHT, ob.intValue()); [EOL]         ob = tn.get("Width"); [EOL]         assertTrue(ob.isTextual()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_TN_WIDTH, ob.textValue()); [EOL]         ob = imageMap.get("IDs"); [EOL]         assertTrue(ob.isArray()); [EOL]         ArrayNode idList = (ArrayNode) ob; [EOL]         assertEquals(4, idList.size()); [EOL]         assertEquals(4, calcLength(idList.elements())); [EOL]         assertEquals(4, calcLength(idList.iterator())); [EOL]         { [EOL]             int[] values = new int[] { SAMPLE_SPEC_VALUE_TN_ID1, SAMPLE_SPEC_VALUE_TN_ID2, SAMPLE_SPEC_VALUE_TN_ID3, SAMPLE_SPEC_VALUE_TN_ID4 }; [EOL]             for (int i = 0; i < values.length; ++i) { [EOL]                 assertEquals(values[i], idList.get(i).intValue()); [EOL]             } [EOL]             int i = 0; [EOL]             for (JsonNode n : idList) { [EOL]                 assertEquals(values[i], n.intValue()); [EOL]                 ++i; [EOL]             } [EOL]         } [EOL]     } [EOL] }
public void testSimple() throws Exception { [EOL]     final String JSON = SAMPLE_DOC_JSON_SPEC; [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     for (int type = 0; type < 2; ++type) { [EOL]         JsonNode result; [EOL]         if (type == 0) { [EOL]             result = mapper.readTree(new StringReader(JSON)); [EOL]         } else { [EOL]             result = mapper.readTree(JSON); [EOL]         } [EOL]         assertType(result, ObjectNode.class); [EOL]         assertEquals(1, result.size()); [EOL]         assertTrue(result.isObject()); [EOL]         ObjectNode main = (ObjectNode) result; [EOL]         assertEquals("Image", main.fieldNames().next()); [EOL]         JsonNode ob = main.elements().next(); [EOL]         assertType(ob, ObjectNode.class); [EOL]         ObjectNode imageMap = (ObjectNode) ob; [EOL]         assertEquals(5, imageMap.size()); [EOL]         ob = imageMap.get("Width"); [EOL]         assertTrue(ob.isIntegralNumber()); [EOL]         assertFalse(ob.isFloatingPointNumber()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_WIDTH, ob.intValue()); [EOL]         ob = imageMap.get("Height"); [EOL]         assertTrue(ob.isIntegralNumber()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_HEIGHT, ob.intValue()); [EOL]         ob = imageMap.get("Title"); [EOL]         assertTrue(ob.isTextual()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_TITLE, ob.textValue()); [EOL]         ob = imageMap.get("Thumbnail"); [EOL]         assertType(ob, ObjectNode.class); [EOL]         ObjectNode tn = (ObjectNode) ob; [EOL]         ob = tn.get("Url"); [EOL]         assertTrue(ob.isTextual()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_TN_URL, ob.textValue()); [EOL]         ob = tn.get("Height"); [EOL]         assertTrue(ob.isIntegralNumber()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_TN_HEIGHT, ob.intValue()); [EOL]         ob = tn.get("Width"); [EOL]         assertTrue(ob.isTextual()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_TN_WIDTH, ob.textValue()); [EOL]         ob = imageMap.get("IDs"); [EOL]         assertTrue(ob.isArray()); [EOL]         ArrayNode idList = (ArrayNode) ob; [EOL]         assertEquals(4, idList.size()); [EOL]         assertEquals(4, calcLength(idList.elements())); [EOL]         assertEquals(4, calcLength(idList.iterator())); [EOL]         { [EOL]             int[] values = new int[] { SAMPLE_SPEC_VALUE_TN_ID1, SAMPLE_SPEC_VALUE_TN_ID2, SAMPLE_SPEC_VALUE_TN_ID3, SAMPLE_SPEC_VALUE_TN_ID4 }; [EOL]             for (int i = 0; i < values.length; ++i) { [EOL]                 assertEquals(values[i], idList.get(i).intValue()); [EOL]             } [EOL]             int i = 0; [EOL]             for (JsonNode n : idList) { [EOL]                 assertEquals(values[i], n.intValue()); [EOL]                 ++i; [EOL]             } [EOL]         } [EOL]     } [EOL] }
public void testSimple() throws Exception { [EOL]     final String JSON = SAMPLE_DOC_JSON_SPEC; [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     for (int type = 0; type < 2; ++type) { [EOL]         JsonNode result; [EOL]         if (type == 0) { [EOL]             result = mapper.readTree(new StringReader(JSON)); [EOL]         } else { [EOL]             result = mapper.readTree(JSON); [EOL]         } [EOL]         assertType(result, ObjectNode.class); [EOL]         assertEquals(1, result.size()); [EOL]         assertTrue(result.isObject()); [EOL]         ObjectNode main = (ObjectNode) result; [EOL]         assertEquals("Image", main.fieldNames().next()); [EOL]         JsonNode ob = main.elements().next(); [EOL]         assertType(ob, ObjectNode.class); [EOL]         ObjectNode imageMap = (ObjectNode) ob; [EOL]         assertEquals(5, imageMap.size()); [EOL]         ob = imageMap.get("Width"); [EOL]         assertTrue(ob.isIntegralNumber()); [EOL]         assertFalse(ob.isFloatingPointNumber()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_WIDTH, ob.intValue()); [EOL]         ob = imageMap.get("Height"); [EOL]         assertTrue(ob.isIntegralNumber()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_HEIGHT, ob.intValue()); [EOL]         ob = imageMap.get("Title"); [EOL]         assertTrue(ob.isTextual()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_TITLE, ob.textValue()); [EOL]         ob = imageMap.get("Thumbnail"); [EOL]         assertType(ob, ObjectNode.class); [EOL]         ObjectNode tn = (ObjectNode) ob; [EOL]         ob = tn.get("Url"); [EOL]         assertTrue(ob.isTextual()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_TN_URL, ob.textValue()); [EOL]         ob = tn.get("Height"); [EOL]         assertTrue(ob.isIntegralNumber()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_TN_HEIGHT, ob.intValue()); [EOL]         ob = tn.get("Width"); [EOL]         assertTrue(ob.isTextual()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_TN_WIDTH, ob.textValue()); [EOL]         ob = imageMap.get("IDs"); [EOL]         assertTrue(ob.isArray()); [EOL]         ArrayNode idList = (ArrayNode) ob; [EOL]         assertEquals(4, idList.size()); [EOL]         assertEquals(4, calcLength(idList.elements())); [EOL]         assertEquals(4, calcLength(idList.iterator())); [EOL]         { [EOL]             int[] values = new int[] { SAMPLE_SPEC_VALUE_TN_ID1, SAMPLE_SPEC_VALUE_TN_ID2, SAMPLE_SPEC_VALUE_TN_ID3, SAMPLE_SPEC_VALUE_TN_ID4 }; [EOL]             for (int i = 0; i < values.length; ++i) { [EOL]                 assertEquals(values[i], idList.get(i).intValue()); [EOL]             } [EOL]             int i = 0; [EOL]             for (JsonNode n : idList) { [EOL]                 assertEquals(values[i], n.intValue()); [EOL]                 ++i; [EOL]             } [EOL]         } [EOL]     } [EOL] }
public void testSimple() throws Exception { [EOL]     final String JSON = SAMPLE_DOC_JSON_SPEC; [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     for (int type = 0; type < 2; ++type) { [EOL]         JsonNode result; [EOL]         if (type == 0) { [EOL]             result = mapper.readTree(new StringReader(JSON)); [EOL]         } else { [EOL]             result = mapper.readTree(JSON); [EOL]         } [EOL]         assertType(result, ObjectNode.class); [EOL]         assertEquals(1, result.size()); [EOL]         assertTrue(result.isObject()); [EOL]         ObjectNode main = (ObjectNode) result; [EOL]         assertEquals("Image", main.fieldNames().next()); [EOL]         JsonNode ob = main.elements().next(); [EOL]         assertType(ob, ObjectNode.class); [EOL]         ObjectNode imageMap = (ObjectNode) ob; [EOL]         assertEquals(5, imageMap.size()); [EOL]         ob = imageMap.get("Width"); [EOL]         assertTrue(ob.isIntegralNumber()); [EOL]         assertFalse(ob.isFloatingPointNumber()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_WIDTH, ob.intValue()); [EOL]         ob = imageMap.get("Height"); [EOL]         assertTrue(ob.isIntegralNumber()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_HEIGHT, ob.intValue()); [EOL]         ob = imageMap.get("Title"); [EOL]         assertTrue(ob.isTextual()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_TITLE, ob.textValue()); [EOL]         ob = imageMap.get("Thumbnail"); [EOL]         assertType(ob, ObjectNode.class); [EOL]         ObjectNode tn = (ObjectNode) ob; [EOL]         ob = tn.get("Url"); [EOL]         assertTrue(ob.isTextual()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_TN_URL, ob.textValue()); [EOL]         ob = tn.get("Height"); [EOL]         assertTrue(ob.isIntegralNumber()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_TN_HEIGHT, ob.intValue()); [EOL]         ob = tn.get("Width"); [EOL]         assertTrue(ob.isTextual()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_TN_WIDTH, ob.textValue()); [EOL]         ob = imageMap.get("IDs"); [EOL]         assertTrue(ob.isArray()); [EOL]         ArrayNode idList = (ArrayNode) ob; [EOL]         assertEquals(4, idList.size()); [EOL]         assertEquals(4, calcLength(idList.elements())); [EOL]         assertEquals(4, calcLength(idList.iterator())); [EOL]         { [EOL]             int[] values = new int[] { SAMPLE_SPEC_VALUE_TN_ID1, SAMPLE_SPEC_VALUE_TN_ID2, SAMPLE_SPEC_VALUE_TN_ID3, SAMPLE_SPEC_VALUE_TN_ID4 }; [EOL]             for (int i = 0; i < values.length; ++i) { [EOL]                 assertEquals(values[i], idList.get(i).intValue()); [EOL]             } [EOL]             int i = 0; [EOL]             for (JsonNode n : idList) { [EOL]                 assertEquals(values[i], n.intValue()); [EOL]                 ++i; [EOL]             } [EOL]         } [EOL]     } [EOL] }
public void testSimple() throws Exception { [EOL]     final String JSON = SAMPLE_DOC_JSON_SPEC; [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     for (int type = 0; type < 2; ++type) { [EOL]         JsonNode result; [EOL]         if (type == 0) { [EOL]             result = mapper.readTree(new StringReader(JSON)); [EOL]         } else { [EOL]             result = mapper.readTree(JSON); [EOL]         } [EOL]         assertType(result, ObjectNode.class); [EOL]         assertEquals(1, result.size()); [EOL]         assertTrue(result.isObject()); [EOL]         ObjectNode main = (ObjectNode) result; [EOL]         assertEquals("Image", main.fieldNames().next()); [EOL]         JsonNode ob = main.elements().next(); [EOL]         assertType(ob, ObjectNode.class); [EOL]         ObjectNode imageMap = (ObjectNode) ob; [EOL]         assertEquals(5, imageMap.size()); [EOL]         ob = imageMap.get("Width"); [EOL]         assertTrue(ob.isIntegralNumber()); [EOL]         assertFalse(ob.isFloatingPointNumber()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_WIDTH, ob.intValue()); [EOL]         ob = imageMap.get("Height"); [EOL]         assertTrue(ob.isIntegralNumber()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_HEIGHT, ob.intValue()); [EOL]         ob = imageMap.get("Title"); [EOL]         assertTrue(ob.isTextual()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_TITLE, ob.textValue()); [EOL]         ob = imageMap.get("Thumbnail"); [EOL]         assertType(ob, ObjectNode.class); [EOL]         ObjectNode tn = (ObjectNode) ob; [EOL]         ob = tn.get("Url"); [EOL]         assertTrue(ob.isTextual()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_TN_URL, ob.textValue()); [EOL]         ob = tn.get("Height"); [EOL]         assertTrue(ob.isIntegralNumber()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_TN_HEIGHT, ob.intValue()); [EOL]         ob = tn.get("Width"); [EOL]         assertTrue(ob.isTextual()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_TN_WIDTH, ob.textValue()); [EOL]         ob = imageMap.get("IDs"); [EOL]         assertTrue(ob.isArray()); [EOL]         ArrayNode idList = (ArrayNode) ob; [EOL]         assertEquals(4, idList.size()); [EOL]         assertEquals(4, calcLength(idList.elements())); [EOL]         assertEquals(4, calcLength(idList.iterator())); [EOL]         { [EOL]             int[] values = new int[] { SAMPLE_SPEC_VALUE_TN_ID1, SAMPLE_SPEC_VALUE_TN_ID2, SAMPLE_SPEC_VALUE_TN_ID3, SAMPLE_SPEC_VALUE_TN_ID4 }; [EOL]             for (int i = 0; i < values.length; ++i) { [EOL]                 assertEquals(values[i], idList.get(i).intValue()); [EOL]             } [EOL]             int i = 0; [EOL]             for (JsonNode n : idList) { [EOL]                 assertEquals(values[i], n.intValue()); [EOL]                 ++i; [EOL]             } [EOL]         } [EOL]     } [EOL] }
public void testSimple() throws Exception { [EOL]     final String JSON = SAMPLE_DOC_JSON_SPEC; [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     for (int type = 0; type < 2; ++type) { [EOL]         JsonNode result; [EOL]         if (type == 0) { [EOL]             result = mapper.readTree(new StringReader(JSON)); [EOL]         } else { [EOL]             result = mapper.readTree(JSON); [EOL]         } [EOL]         assertType(result, ObjectNode.class); [EOL]         assertEquals(1, result.size()); [EOL]         assertTrue(result.isObject()); [EOL]         ObjectNode main = (ObjectNode) result; [EOL]         assertEquals("Image", main.fieldNames().next()); [EOL]         JsonNode ob = main.elements().next(); [EOL]         assertType(ob, ObjectNode.class); [EOL]         ObjectNode imageMap = (ObjectNode) ob; [EOL]         assertEquals(5, imageMap.size()); [EOL]         ob = imageMap.get("Width"); [EOL]         assertTrue(ob.isIntegralNumber()); [EOL]         assertFalse(ob.isFloatingPointNumber()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_WIDTH, ob.intValue()); [EOL]         ob = imageMap.get("Height"); [EOL]         assertTrue(ob.isIntegralNumber()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_HEIGHT, ob.intValue()); [EOL]         ob = imageMap.get("Title"); [EOL]         assertTrue(ob.isTextual()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_TITLE, ob.textValue()); [EOL]         ob = imageMap.get("Thumbnail"); [EOL]         assertType(ob, ObjectNode.class); [EOL]         ObjectNode tn = (ObjectNode) ob; [EOL]         ob = tn.get("Url"); [EOL]         assertTrue(ob.isTextual()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_TN_URL, ob.textValue()); [EOL]         ob = tn.get("Height"); [EOL]         assertTrue(ob.isIntegralNumber()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_TN_HEIGHT, ob.intValue()); [EOL]         ob = tn.get("Width"); [EOL]         assertTrue(ob.isTextual()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_TN_WIDTH, ob.textValue()); [EOL]         ob = imageMap.get("IDs"); [EOL]         assertTrue(ob.isArray()); [EOL]         ArrayNode idList = (ArrayNode) ob; [EOL]         assertEquals(4, idList.size()); [EOL]         assertEquals(4, calcLength(idList.elements())); [EOL]         assertEquals(4, calcLength(idList.iterator())); [EOL]         { [EOL]             int[] values = new int[] { SAMPLE_SPEC_VALUE_TN_ID1, SAMPLE_SPEC_VALUE_TN_ID2, SAMPLE_SPEC_VALUE_TN_ID3, SAMPLE_SPEC_VALUE_TN_ID4 }; [EOL]             for (int i = 0; i < values.length; ++i) { [EOL]                 assertEquals(values[i], idList.get(i).intValue()); [EOL]             } [EOL]             int i = 0; [EOL]             for (JsonNode n : idList) { [EOL]                 assertEquals(values[i], n.intValue()); [EOL]                 ++i; [EOL]             } [EOL]         } [EOL]     } [EOL] }
public void testSimple() throws Exception { [EOL]     final String JSON = SAMPLE_DOC_JSON_SPEC; [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     for (int type = 0; type < 2; ++type) { [EOL]         JsonNode result; [EOL]         if (type == 0) { [EOL]             result = mapper.readTree(new StringReader(JSON)); [EOL]         } else { [EOL]             result = mapper.readTree(JSON); [EOL]         } [EOL]         assertType(result, ObjectNode.class); [EOL]         assertEquals(1, result.size()); [EOL]         assertTrue(result.isObject()); [EOL]         ObjectNode main = (ObjectNode) result; [EOL]         assertEquals("Image", main.fieldNames().next()); [EOL]         JsonNode ob = main.elements().next(); [EOL]         assertType(ob, ObjectNode.class); [EOL]         ObjectNode imageMap = (ObjectNode) ob; [EOL]         assertEquals(5, imageMap.size()); [EOL]         ob = imageMap.get("Width"); [EOL]         assertTrue(ob.isIntegralNumber()); [EOL]         assertFalse(ob.isFloatingPointNumber()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_WIDTH, ob.intValue()); [EOL]         ob = imageMap.get("Height"); [EOL]         assertTrue(ob.isIntegralNumber()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_HEIGHT, ob.intValue()); [EOL]         ob = imageMap.get("Title"); [EOL]         assertTrue(ob.isTextual()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_TITLE, ob.textValue()); [EOL]         ob = imageMap.get("Thumbnail"); [EOL]         assertType(ob, ObjectNode.class); [EOL]         ObjectNode tn = (ObjectNode) ob; [EOL]         ob = tn.get("Url"); [EOL]         assertTrue(ob.isTextual()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_TN_URL, ob.textValue()); [EOL]         ob = tn.get("Height"); [EOL]         assertTrue(ob.isIntegralNumber()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_TN_HEIGHT, ob.intValue()); [EOL]         ob = tn.get("Width"); [EOL]         assertTrue(ob.isTextual()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_TN_WIDTH, ob.textValue()); [EOL]         ob = imageMap.get("IDs"); [EOL]         assertTrue(ob.isArray()); [EOL]         ArrayNode idList = (ArrayNode) ob; [EOL]         assertEquals(4, idList.size()); [EOL]         assertEquals(4, calcLength(idList.elements())); [EOL]         assertEquals(4, calcLength(idList.iterator())); [EOL]         { [EOL]             int[] values = new int[] { SAMPLE_SPEC_VALUE_TN_ID1, SAMPLE_SPEC_VALUE_TN_ID2, SAMPLE_SPEC_VALUE_TN_ID3, SAMPLE_SPEC_VALUE_TN_ID4 }; [EOL]             for (int i = 0; i < values.length; ++i) { [EOL]                 assertEquals(values[i], idList.get(i).intValue()); [EOL]             } [EOL]             int i = 0; [EOL]             for (JsonNode n : idList) { [EOL]                 assertEquals(values[i], n.intValue()); [EOL]                 ++i; [EOL]             } [EOL]         } [EOL]     } [EOL] }
public void testSimple() throws Exception { [EOL]     final String JSON = SAMPLE_DOC_JSON_SPEC; [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     for (int type = 0; type < 2; ++type) { [EOL]         JsonNode result; [EOL]         if (type == 0) { [EOL]             result = mapper.readTree(new StringReader(JSON)); [EOL]         } else { [EOL]             result = mapper.readTree(JSON); [EOL]         } [EOL]         assertType(result, ObjectNode.class); [EOL]         assertEquals(1, result.size()); [EOL]         assertTrue(result.isObject()); [EOL]         ObjectNode main = (ObjectNode) result; [EOL]         assertEquals("Image", main.fieldNames().next()); [EOL]         JsonNode ob = main.elements().next(); [EOL]         assertType(ob, ObjectNode.class); [EOL]         ObjectNode imageMap = (ObjectNode) ob; [EOL]         assertEquals(5, imageMap.size()); [EOL]         ob = imageMap.get("Width"); [EOL]         assertTrue(ob.isIntegralNumber()); [EOL]         assertFalse(ob.isFloatingPointNumber()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_WIDTH, ob.intValue()); [EOL]         ob = imageMap.get("Height"); [EOL]         assertTrue(ob.isIntegralNumber()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_HEIGHT, ob.intValue()); [EOL]         ob = imageMap.get("Title"); [EOL]         assertTrue(ob.isTextual()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_TITLE, ob.textValue()); [EOL]         ob = imageMap.get("Thumbnail"); [EOL]         assertType(ob, ObjectNode.class); [EOL]         ObjectNode tn = (ObjectNode) ob; [EOL]         ob = tn.get("Url"); [EOL]         assertTrue(ob.isTextual()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_TN_URL, ob.textValue()); [EOL]         ob = tn.get("Height"); [EOL]         assertTrue(ob.isIntegralNumber()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_TN_HEIGHT, ob.intValue()); [EOL]         ob = tn.get("Width"); [EOL]         assertTrue(ob.isTextual()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_TN_WIDTH, ob.textValue()); [EOL]         ob = imageMap.get("IDs"); [EOL]         assertTrue(ob.isArray()); [EOL]         ArrayNode idList = (ArrayNode) ob; [EOL]         assertEquals(4, idList.size()); [EOL]         assertEquals(4, calcLength(idList.elements())); [EOL]         assertEquals(4, calcLength(idList.iterator())); [EOL]         { [EOL]             int[] values = new int[] { SAMPLE_SPEC_VALUE_TN_ID1, SAMPLE_SPEC_VALUE_TN_ID2, SAMPLE_SPEC_VALUE_TN_ID3, SAMPLE_SPEC_VALUE_TN_ID4 }; [EOL]             for (int i = 0; i < values.length; ++i) { [EOL]                 assertEquals(values[i], idList.get(i).intValue()); [EOL]             } [EOL]             int i = 0; [EOL]             for (JsonNode n : idList) { [EOL]                 assertEquals(values[i], n.intValue()); [EOL]                 ++i; [EOL]             } [EOL]         } [EOL]     } [EOL] }
public void testSimple() throws Exception { [EOL]     final String JSON = SAMPLE_DOC_JSON_SPEC; [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     for (int type = 0; type < 2; ++type) { [EOL]         JsonNode result; [EOL]         if (type == 0) { [EOL]             result = mapper.readTree(new StringReader(JSON)); [EOL]         } else { [EOL]             result = mapper.readTree(JSON); [EOL]         } [EOL]         assertType(result, ObjectNode.class); [EOL]         assertEquals(1, result.size()); [EOL]         assertTrue(result.isObject()); [EOL]         ObjectNode main = (ObjectNode) result; [EOL]         assertEquals("Image", main.fieldNames().next()); [EOL]         JsonNode ob = main.elements().next(); [EOL]         assertType(ob, ObjectNode.class); [EOL]         ObjectNode imageMap = (ObjectNode) ob; [EOL]         assertEquals(5, imageMap.size()); [EOL]         ob = imageMap.get("Width"); [EOL]         assertTrue(ob.isIntegralNumber()); [EOL]         assertFalse(ob.isFloatingPointNumber()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_WIDTH, ob.intValue()); [EOL]         ob = imageMap.get("Height"); [EOL]         assertTrue(ob.isIntegralNumber()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_HEIGHT, ob.intValue()); [EOL]         ob = imageMap.get("Title"); [EOL]         assertTrue(ob.isTextual()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_TITLE, ob.textValue()); [EOL]         ob = imageMap.get("Thumbnail"); [EOL]         assertType(ob, ObjectNode.class); [EOL]         ObjectNode tn = (ObjectNode) ob; [EOL]         ob = tn.get("Url"); [EOL]         assertTrue(ob.isTextual()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_TN_URL, ob.textValue()); [EOL]         ob = tn.get("Height"); [EOL]         assertTrue(ob.isIntegralNumber()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_TN_HEIGHT, ob.intValue()); [EOL]         ob = tn.get("Width"); [EOL]         assertTrue(ob.isTextual()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_TN_WIDTH, ob.textValue()); [EOL]         ob = imageMap.get("IDs"); [EOL]         assertTrue(ob.isArray()); [EOL]         ArrayNode idList = (ArrayNode) ob; [EOL]         assertEquals(4, idList.size()); [EOL]         assertEquals(4, calcLength(idList.elements())); [EOL]         assertEquals(4, calcLength(idList.iterator())); [EOL]         { [EOL]             int[] values = new int[] { SAMPLE_SPEC_VALUE_TN_ID1, SAMPLE_SPEC_VALUE_TN_ID2, SAMPLE_SPEC_VALUE_TN_ID3, SAMPLE_SPEC_VALUE_TN_ID4 }; [EOL]             for (int i = 0; i < values.length; ++i) { [EOL]                 assertEquals(values[i], idList.get(i).intValue()); [EOL]             } [EOL]             int i = 0; [EOL]             for (JsonNode n : idList) { [EOL]                 assertEquals(values[i], n.intValue()); [EOL]                 ++i; [EOL]             } [EOL]         } [EOL]     } [EOL] }
public void testSimple() throws Exception { [EOL]     final String JSON = SAMPLE_DOC_JSON_SPEC; [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     for (int type = 0; type < 2; ++type) { [EOL]         JsonNode result; [EOL]         if (type == 0) { [EOL]             result = mapper.readTree(new StringReader(JSON)); [EOL]         } else { [EOL]             result = mapper.readTree(JSON); [EOL]         } [EOL]         assertType(result, ObjectNode.class); [EOL]         assertEquals(1, result.size()); [EOL]         assertTrue(result.isObject()); [EOL]         ObjectNode main = (ObjectNode) result; [EOL]         assertEquals("Image", main.fieldNames().next()); [EOL]         JsonNode ob = main.elements().next(); [EOL]         assertType(ob, ObjectNode.class); [EOL]         ObjectNode imageMap = (ObjectNode) ob; [EOL]         assertEquals(5, imageMap.size()); [EOL]         ob = imageMap.get("Width"); [EOL]         assertTrue(ob.isIntegralNumber()); [EOL]         assertFalse(ob.isFloatingPointNumber()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_WIDTH, ob.intValue()); [EOL]         ob = imageMap.get("Height"); [EOL]         assertTrue(ob.isIntegralNumber()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_HEIGHT, ob.intValue()); [EOL]         ob = imageMap.get("Title"); [EOL]         assertTrue(ob.isTextual()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_TITLE, ob.textValue()); [EOL]         ob = imageMap.get("Thumbnail"); [EOL]         assertType(ob, ObjectNode.class); [EOL]         ObjectNode tn = (ObjectNode) ob; [EOL]         ob = tn.get("Url"); [EOL]         assertTrue(ob.isTextual()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_TN_URL, ob.textValue()); [EOL]         ob = tn.get("Height"); [EOL]         assertTrue(ob.isIntegralNumber()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_TN_HEIGHT, ob.intValue()); [EOL]         ob = tn.get("Width"); [EOL]         assertTrue(ob.isTextual()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_TN_WIDTH, ob.textValue()); [EOL]         ob = imageMap.get("IDs"); [EOL]         assertTrue(ob.isArray()); [EOL]         ArrayNode idList = (ArrayNode) ob; [EOL]         assertEquals(4, idList.size()); [EOL]         assertEquals(4, calcLength(idList.elements())); [EOL]         assertEquals(4, calcLength(idList.iterator())); [EOL]         { [EOL]             int[] values = new int[] { SAMPLE_SPEC_VALUE_TN_ID1, SAMPLE_SPEC_VALUE_TN_ID2, SAMPLE_SPEC_VALUE_TN_ID3, SAMPLE_SPEC_VALUE_TN_ID4 }; [EOL]             for (int i = 0; i < values.length; ++i) { [EOL]                 assertEquals(values[i], idList.get(i).intValue()); [EOL]             } [EOL]             int i = 0; [EOL]             for (JsonNode n : idList) { [EOL]                 assertEquals(values[i], n.intValue()); [EOL]                 ++i; [EOL]             } [EOL]         } [EOL]     } [EOL] }
public void testSimple() throws Exception { [EOL]     final String JSON = SAMPLE_DOC_JSON_SPEC; [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     for (int type = 0; type < 2; ++type) { [EOL]         JsonNode result; [EOL]         if (type == 0) { [EOL]             result = mapper.readTree(new StringReader(JSON)); [EOL]         } else { [EOL]             result = mapper.readTree(JSON); [EOL]         } [EOL]         assertType(result, ObjectNode.class); [EOL]         assertEquals(1, result.size()); [EOL]         assertTrue(result.isObject()); [EOL]         ObjectNode main = (ObjectNode) result; [EOL]         assertEquals("Image", main.fieldNames().next()); [EOL]         JsonNode ob = main.elements().next(); [EOL]         assertType(ob, ObjectNode.class); [EOL]         ObjectNode imageMap = (ObjectNode) ob; [EOL]         assertEquals(5, imageMap.size()); [EOL]         ob = imageMap.get("Width"); [EOL]         assertTrue(ob.isIntegralNumber()); [EOL]         assertFalse(ob.isFloatingPointNumber()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_WIDTH, ob.intValue()); [EOL]         ob = imageMap.get("Height"); [EOL]         assertTrue(ob.isIntegralNumber()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_HEIGHT, ob.intValue()); [EOL]         ob = imageMap.get("Title"); [EOL]         assertTrue(ob.isTextual()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_TITLE, ob.textValue()); [EOL]         ob = imageMap.get("Thumbnail"); [EOL]         assertType(ob, ObjectNode.class); [EOL]         ObjectNode tn = (ObjectNode) ob; [EOL]         ob = tn.get("Url"); [EOL]         assertTrue(ob.isTextual()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_TN_URL, ob.textValue()); [EOL]         ob = tn.get("Height"); [EOL]         assertTrue(ob.isIntegralNumber()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_TN_HEIGHT, ob.intValue()); [EOL]         ob = tn.get("Width"); [EOL]         assertTrue(ob.isTextual()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_TN_WIDTH, ob.textValue()); [EOL]         ob = imageMap.get("IDs"); [EOL]         assertTrue(ob.isArray()); [EOL]         ArrayNode idList = (ArrayNode) ob; [EOL]         assertEquals(4, idList.size()); [EOL]         assertEquals(4, calcLength(idList.elements())); [EOL]         assertEquals(4, calcLength(idList.iterator())); [EOL]         { [EOL]             int[] values = new int[] { SAMPLE_SPEC_VALUE_TN_ID1, SAMPLE_SPEC_VALUE_TN_ID2, SAMPLE_SPEC_VALUE_TN_ID3, SAMPLE_SPEC_VALUE_TN_ID4 }; [EOL]             for (int i = 0; i < values.length; ++i) { [EOL]                 assertEquals(values[i], idList.get(i).intValue()); [EOL]             } [EOL]             int i = 0; [EOL]             for (JsonNode n : idList) { [EOL]                 assertEquals(values[i], n.intValue()); [EOL]                 ++i; [EOL]             } [EOL]         } [EOL]     } [EOL] }
public void testDefaultImplViaModule() throws Exception { [EOL]     final String JSON = "{\"a\":123}"; [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     try { [EOL]         mapper.readValue(JSON, SuperTypeWithoutDefault.class); [EOL]         fail("Expected an exception"); [EOL]     } catch (JsonMappingException e) { [EOL]         verifyException(e, "missing property"); [EOL]     } [EOL]     mapper = new ObjectMapper(); [EOL]     SimpleModule module = new SimpleModule("test", Version.unknownVersion()); [EOL]     module.addAbstractTypeMapping(SuperTypeWithoutDefault.class, DefaultImpl505.class); [EOL]     mapper.registerModule(module); [EOL]     SuperTypeWithoutDefault bean = mapper.readValue(JSON, SuperTypeWithoutDefault.class); [EOL]     assertNotNull(bean); [EOL]     assertEquals(DefaultImpl505.class, bean.getClass()); [EOL]     assertEquals(123, ((DefaultImpl505) bean).a); [EOL]     bean = mapper.readValue("{\"#type\":\"foobar\"}", SuperTypeWithoutDefault.class); [EOL]     assertEquals(DefaultImpl505.class, bean.getClass()); [EOL]     assertEquals(0, ((DefaultImpl505) bean).a); [EOL] }
public void testDefaultImplViaModule() throws Exception { [EOL]     final String JSON = "{\"a\":123}"; [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     try { [EOL]         mapper.readValue(JSON, SuperTypeWithoutDefault.class); [EOL]         fail("Expected an exception"); [EOL]     } catch (JsonMappingException e) { [EOL]         verifyException(e, "missing property"); [EOL]     } [EOL]     mapper = new ObjectMapper(); [EOL]     SimpleModule module = new SimpleModule("test", Version.unknownVersion()); [EOL]     module.addAbstractTypeMapping(SuperTypeWithoutDefault.class, DefaultImpl505.class); [EOL]     mapper.registerModule(module); [EOL]     SuperTypeWithoutDefault bean = mapper.readValue(JSON, SuperTypeWithoutDefault.class); [EOL]     assertNotNull(bean); [EOL]     assertEquals(DefaultImpl505.class, bean.getClass()); [EOL]     assertEquals(123, ((DefaultImpl505) bean).a); [EOL]     bean = mapper.readValue("{\"#type\":\"foobar\"}", SuperTypeWithoutDefault.class); [EOL]     assertEquals(DefaultImpl505.class, bean.getClass()); [EOL]     assertEquals(0, ((DefaultImpl505) bean).a); [EOL] }
public void testPropertyWithSubtypes() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerSubtypes(SubB.class, SubC.class, SubD.class); [EOL]     String json = mapper.writeValueAsString(new PropertyBean(new SubC())); [EOL]     PropertyBean result = mapper.readValue(json, PropertyBean.class); [EOL]     assertSame(SubC.class, result.value.getClass()); [EOL] }
public void testPropertyWithSubtypes() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerSubtypes(SubB.class, SubC.class, SubD.class); [EOL]     String json = mapper.writeValueAsString(new PropertyBean(new SubC())); [EOL]     PropertyBean result = mapper.readValue(json, PropertyBean.class); [EOL]     assertSame(SubC.class, result.value.getClass()); [EOL] }
public void testPropertyWithSubtypes() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerSubtypes(SubB.class, SubC.class, SubD.class); [EOL]     String json = mapper.writeValueAsString(new PropertyBean(new SubC())); [EOL]     PropertyBean result = mapper.readValue(json, PropertyBean.class); [EOL]     assertSame(SubC.class, result.value.getClass()); [EOL] }
public void testClassWithUnknownAndIgnore() throws Exception { [EOL]     ImplicitIgnores result = MAPPER.readValue("{\"a\":1,\"b\":2,\"c\":3 }", ImplicitIgnores.class); [EOL]     assertEquals(3, result.c); [EOL]     try { [EOL]         MAPPER.readValue("{\"a\":1,\"b\":2,\"c\":3,\"d\":4 }", ImplicitIgnores.class); [EOL]     } catch (JsonMappingException e) { [EOL]         verifyException(e, "Unrecognized field \"d\""); [EOL]     } [EOL] }
public void testListAsObject() throws Exception { [EOL]     CollectionAsPOJO list = new CollectionAsPOJO(); [EOL]     list.add("a"); [EOL]     list.add("b"); [EOL]     String json = MAPPER.writeValueAsString(list); [EOL]     assertEquals("{\"size\":2,\"values\":[\"a\",\"b\"]}", json); [EOL]     CollectionAsPOJO result = MAPPER.readValue(json, CollectionAsPOJO.class); [EOL]     assertEquals(2, result.size()); [EOL] }
public void testPropertyWithSubtypes() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerSubtypes(SubB.class, SubC.class, SubD.class); [EOL]     String json = mapper.writeValueAsString(new PropertyBean(new SubC())); [EOL]     PropertyBean result = mapper.readValue(json, PropertyBean.class); [EOL]     assertSame(SubC.class, result.value.getClass()); [EOL] }
public void testSimpleSetterlessMapOk() throws Exception { [EOL]     MapBean result = new ObjectMapper().readValue("{\"values\":{ \"a\": 15, \"b\" : -3 }}", MapBean.class); [EOL]     Map<String, Integer> m = result._values; [EOL]     assertEquals(2, m.size()); [EOL]     assertEquals(Integer.valueOf(15), m.get("a")); [EOL]     assertEquals(Integer.valueOf(-3), m.get("b")); [EOL] }
public void testSimpleExclusionFilter() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     FilterProvider prov = new SimpleFilterProvider().addFilter("RootFilter", SimpleBeanPropertyFilter.serializeAllExcept("a")); [EOL]     assertEquals("{\"b\":\"b\"}", mapper.writer(prov).writeValueAsString(new Bean())); [EOL] }
public void testSimpleExclusionFilter() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     FilterProvider prov = new SimpleFilterProvider().addFilter("RootFilter", SimpleBeanPropertyFilter.serializeAllExcept("a")); [EOL]     assertEquals("{\"b\":\"b\"}", mapper.writer(prov).writeValueAsString(new Bean())); [EOL] }
public void testSimpleExclusionFilter() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     FilterProvider prov = new SimpleFilterProvider().addFilter("RootFilter", SimpleBeanPropertyFilter.serializeAllExcept("a")); [EOL]     assertEquals("{\"b\":\"b\"}", mapper.writer(prov).writeValueAsString(new Bean())); [EOL] }
public void testSimpleExclusionFilter() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     FilterProvider prov = new SimpleFilterProvider().addFilter("RootFilter", SimpleBeanPropertyFilter.serializeAllExcept("a")); [EOL]     assertEquals("{\"b\":\"b\"}", mapper.writer(prov).writeValueAsString(new Bean())); [EOL] }
public void testSimpleExclusionFilter() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     FilterProvider prov = new SimpleFilterProvider().addFilter("RootFilter", SimpleBeanPropertyFilter.serializeAllExcept("a")); [EOL]     assertEquals("{\"b\":\"b\"}", mapper.writer(prov).writeValueAsString(new Bean())); [EOL] }
public void testSimpleExclusionFilter() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     FilterProvider prov = new SimpleFilterProvider().addFilter("RootFilter", SimpleBeanPropertyFilter.serializeAllExcept("a")); [EOL]     assertEquals("{\"b\":\"b\"}", mapper.writer(prov).writeValueAsString(new Bean())); [EOL] }
public void testSimpleExclusionFilter() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     FilterProvider prov = new SimpleFilterProvider().addFilter("RootFilter", SimpleBeanPropertyFilter.serializeAllExcept("a")); [EOL]     assertEquals("{\"b\":\"b\"}", mapper.writer(prov).writeValueAsString(new Bean())); [EOL] }
public void testGeneratingJsonSchemaWithFilters() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setFilters(secretFilterProvider); [EOL]     JsonSchema schema = mapper.generateJsonSchema(FilteredBean.class); [EOL]     JsonNode node = schema.getSchemaNode().get("properties"); [EOL]     assertTrue(node.has("obvious")); [EOL]     assertFalse(node.has("secret")); [EOL] }
public void testGeneratingJsonSchemaWithFilters() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setFilters(secretFilterProvider); [EOL]     JsonSchema schema = mapper.generateJsonSchema(FilteredBean.class); [EOL]     JsonNode node = schema.getSchemaNode().get("properties"); [EOL]     assertTrue(node.has("obvious")); [EOL]     assertFalse(node.has("secret")); [EOL] }
public void testGeneratingJsonSchemaWithFilters() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setFilters(secretFilterProvider); [EOL]     JsonSchema schema = mapper.generateJsonSchema(FilteredBean.class); [EOL]     JsonNode node = schema.getSchemaNode().get("properties"); [EOL]     assertTrue(node.has("obvious")); [EOL]     assertFalse(node.has("secret")); [EOL] }
public void testPropertyWithSubtypes() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerSubtypes(SubB.class, SubC.class, SubD.class); [EOL]     String json = mapper.writeValueAsString(new PropertyBean(new SubC())); [EOL]     PropertyBean result = mapper.readValue(json, PropertyBean.class); [EOL]     assertSame(SubC.class, result.value.getClass()); [EOL] }
public void testDateTypes() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.enableDefaultTyping(); [EOL]     ObjectListBean input = new ObjectListBean(); [EOL]     List<Object> inputList = new ArrayList<Object>(); [EOL]     inputList.add(TimeZone.getTimeZone("EST")); [EOL]     inputList.add(Locale.CHINESE); [EOL]     input.values = inputList; [EOL]     String json = m.writeValueAsString(input); [EOL]     ObjectListBean output = m.readValue(json, ObjectListBean.class); [EOL]     List<Object> outputList = output.values; [EOL]     assertEquals(2, outputList.size()); [EOL]     assertTrue(outputList.get(0) instanceof TimeZone); [EOL]     assertTrue(outputList.get(1) instanceof Locale); [EOL] }
public void testDateTypes() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.enableDefaultTyping(); [EOL]     ObjectListBean input = new ObjectListBean(); [EOL]     List<Object> inputList = new ArrayList<Object>(); [EOL]     inputList.add(TimeZone.getTimeZone("EST")); [EOL]     inputList.add(Locale.CHINESE); [EOL]     input.values = inputList; [EOL]     String json = m.writeValueAsString(input); [EOL]     ObjectListBean output = m.readValue(json, ObjectListBean.class); [EOL]     List<Object> outputList = output.values; [EOL]     assertEquals(2, outputList.size()); [EOL]     assertTrue(outputList.get(0) instanceof TimeZone); [EOL]     assertTrue(outputList.get(1) instanceof Locale); [EOL] }
public void testColumnMetadata() throws Exception { [EOL]     ColumnMetadata col = new ColumnMetadata("Billy", "employee", "comment"); [EOL]     Wrapper w = new Wrapper(); [EOL]     w.a = col; [EOL]     w.b = col; [EOL]     String json = MAPPER.writeValueAsString(w); [EOL]     Wrapper deserialized = MAPPER.readValue(json, Wrapper.class); [EOL]     assertNotNull(deserialized); [EOL]     assertNotNull(deserialized.a); [EOL]     assertNotNull(deserialized.b); [EOL]     assertEquals("Billy", deserialized.a.getName()); [EOL]     assertEquals("employee", deserialized.a.getType()); [EOL]     assertEquals("comment", deserialized.a.getComment()); [EOL]     assertSame(deserialized.a, deserialized.b); [EOL] }
public void testColumnMetadata() throws Exception { [EOL]     ColumnMetadata col = new ColumnMetadata("Billy", "employee", "comment"); [EOL]     Wrapper w = new Wrapper(); [EOL]     w.a = col; [EOL]     w.b = col; [EOL]     String json = MAPPER.writeValueAsString(w); [EOL]     Wrapper deserialized = MAPPER.readValue(json, Wrapper.class); [EOL]     assertNotNull(deserialized); [EOL]     assertNotNull(deserialized.a); [EOL]     assertNotNull(deserialized.b); [EOL]     assertEquals("Billy", deserialized.a.getName()); [EOL]     assertEquals("employee", deserialized.a.getType()); [EOL]     assertEquals("comment", deserialized.a.getComment()); [EOL]     assertSame(deserialized.a, deserialized.b); [EOL] }
public void testMapWithConstructor() throws Exception { [EOL]     MapWithCtor result = MAPPER.readValue("{\"text\":\"abc\", \"entry\":true, \"number\":123, \"xy\":\"yx\"}", MapWithCtor.class); [EOL]     assertEquals(Boolean.TRUE, result.get("entry")); [EOL]     assertEquals("yx", result.get("xy")); [EOL]     assertEquals(2, result.size()); [EOL]     assertEquals("abc", result._text); [EOL]     assertEquals(123, result._number); [EOL] }
public void testMapWithConstructor() throws Exception { [EOL]     MapWithCtor result = MAPPER.readValue("{\"text\":\"abc\", \"entry\":true, \"number\":123, \"xy\":\"yx\"}", MapWithCtor.class); [EOL]     assertEquals(Boolean.TRUE, result.get("entry")); [EOL]     assertEquals("yx", result.get("xy")); [EOL]     assertEquals(2, result.size()); [EOL]     assertEquals("abc", result._text); [EOL]     assertEquals(123, result._number); [EOL] }
public void testMapWithConstructor() throws Exception { [EOL]     MapWithCtor result = MAPPER.readValue("{\"text\":\"abc\", \"entry\":true, \"number\":123, \"xy\":\"yx\"}", MapWithCtor.class); [EOL]     assertEquals(Boolean.TRUE, result.get("entry")); [EOL]     assertEquals("yx", result.get("xy")); [EOL]     assertEquals(2, result.size()); [EOL]     assertEquals("abc", result._text); [EOL]     assertEquals(123, result._number); [EOL] }
public void testMapWithConstructor() throws Exception { [EOL]     MapWithCtor result = MAPPER.readValue("{\"text\":\"abc\", \"entry\":true, \"number\":123, \"xy\":\"yx\"}", MapWithCtor.class); [EOL]     assertEquals(Boolean.TRUE, result.get("entry")); [EOL]     assertEquals("yx", result.get("xy")); [EOL]     assertEquals(2, result.size()); [EOL]     assertEquals("abc", result._text); [EOL]     assertEquals(123, result._number); [EOL] }
public void testBuilderReplacement() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerModule(new ModuleImpl(new BuilderModifier(new BogusBeanSerializer(17)))); [EOL]     Bean bean = new Bean(); [EOL]     assertEquals("17", mapper.writeValueAsString(bean)); [EOL] }
public void testBuilderReplacement() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerModule(new ModuleImpl(new BuilderModifier(new BogusBeanSerializer(17)))); [EOL]     Bean bean = new Bean(); [EOL]     assertEquals("17", mapper.writeValueAsString(bean)); [EOL] }
public void testBuilderReplacement() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerModule(new ModuleImpl(new BuilderModifier(new BogusBeanSerializer(17)))); [EOL]     Bean bean = new Bean(); [EOL]     assertEquals("17", mapper.writeValueAsString(bean)); [EOL] }
public void testBuilderReplacement() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerModule(new ModuleImpl(new BuilderModifier(new BogusBeanSerializer(17)))); [EOL]     Bean bean = new Bean(); [EOL]     assertEquals("17", mapper.writeValueAsString(bean)); [EOL] }
public void testSimpleJsonValue() throws Exception { [EOL]     String result = MAPPER.writeValueAsString(new ValueClass<String>("abc")); [EOL]     assertEquals("\"abc\"", result); [EOL] }
public void testSimpleJsonValue() throws Exception { [EOL]     String result = MAPPER.writeValueAsString(new ValueClass<String>("abc")); [EOL]     assertEquals("\"abc\"", result); [EOL] }
public void testSimpleJsonValue() throws Exception { [EOL]     String result = MAPPER.writeValueAsString(new ValueClass<String>("abc")); [EOL]     assertEquals("\"abc\"", result); [EOL] }
public void testDateTypes() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.enableDefaultTyping(); [EOL]     ObjectListBean input = new ObjectListBean(); [EOL]     List<Object> inputList = new ArrayList<Object>(); [EOL]     inputList.add(TimeZone.getTimeZone("EST")); [EOL]     inputList.add(Locale.CHINESE); [EOL]     input.values = inputList; [EOL]     String json = m.writeValueAsString(input); [EOL]     ObjectListBean output = m.readValue(json, ObjectListBean.class); [EOL]     List<Object> outputList = output.values; [EOL]     assertEquals(2, outputList.size()); [EOL]     assertTrue(outputList.get(0) instanceof TimeZone); [EOL]     assertTrue(outputList.get(1) instanceof Locale); [EOL] }
public void testDateTypes() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.enableDefaultTyping(); [EOL]     ObjectListBean input = new ObjectListBean(); [EOL]     List<Object> inputList = new ArrayList<Object>(); [EOL]     inputList.add(TimeZone.getTimeZone("EST")); [EOL]     inputList.add(Locale.CHINESE); [EOL]     input.values = inputList; [EOL]     String json = m.writeValueAsString(input); [EOL]     ObjectListBean output = m.readValue(json, ObjectListBean.class); [EOL]     List<Object> outputList = output.values; [EOL]     assertEquals(2, outputList.size()); [EOL]     assertTrue(outputList.get(0) instanceof TimeZone); [EOL]     assertTrue(outputList.get(1) instanceof Locale); [EOL] }
public void testDateTypes() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.enableDefaultTyping(); [EOL]     ObjectListBean input = new ObjectListBean(); [EOL]     List<Object> inputList = new ArrayList<Object>(); [EOL]     inputList.add(TimeZone.getTimeZone("EST")); [EOL]     inputList.add(Locale.CHINESE); [EOL]     input.values = inputList; [EOL]     String json = m.writeValueAsString(input); [EOL]     ObjectListBean output = m.readValue(json, ObjectListBean.class); [EOL]     List<Object> outputList = output.values; [EOL]     assertEquals(2, outputList.size()); [EOL]     assertTrue(outputList.get(0) instanceof TimeZone); [EOL]     assertTrue(outputList.get(1) instanceof Locale); [EOL] }
public void testDateTypes() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.enableDefaultTyping(); [EOL]     ObjectListBean input = new ObjectListBean(); [EOL]     List<Object> inputList = new ArrayList<Object>(); [EOL]     inputList.add(TimeZone.getTimeZone("EST")); [EOL]     inputList.add(Locale.CHINESE); [EOL]     input.values = inputList; [EOL]     String json = m.writeValueAsString(input); [EOL]     ObjectListBean output = m.readValue(json, ObjectListBean.class); [EOL]     List<Object> outputList = output.values; [EOL]     assertEquals(2, outputList.size()); [EOL]     assertTrue(outputList.get(0) instanceof TimeZone); [EOL]     assertTrue(outputList.get(1) instanceof Locale); [EOL] }
public void testDateTypes() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.enableDefaultTyping(); [EOL]     ObjectListBean input = new ObjectListBean(); [EOL]     List<Object> inputList = new ArrayList<Object>(); [EOL]     inputList.add(TimeZone.getTimeZone("EST")); [EOL]     inputList.add(Locale.CHINESE); [EOL]     input.values = inputList; [EOL]     String json = m.writeValueAsString(input); [EOL]     ObjectListBean output = m.readValue(json, ObjectListBean.class); [EOL]     List<Object> outputList = output.values; [EOL]     assertEquals(2, outputList.size()); [EOL]     assertTrue(outputList.get(0) instanceof TimeZone); [EOL]     assertTrue(outputList.get(1) instanceof Locale); [EOL] }
public void testDateTypes() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.enableDefaultTyping(); [EOL]     ObjectListBean input = new ObjectListBean(); [EOL]     List<Object> inputList = new ArrayList<Object>(); [EOL]     inputList.add(TimeZone.getTimeZone("EST")); [EOL]     inputList.add(Locale.CHINESE); [EOL]     input.values = inputList; [EOL]     String json = m.writeValueAsString(input); [EOL]     ObjectListBean output = m.readValue(json, ObjectListBean.class); [EOL]     List<Object> outputList = output.values; [EOL]     assertEquals(2, outputList.size()); [EOL]     assertTrue(outputList.get(0) instanceof TimeZone); [EOL]     assertTrue(outputList.get(1) instanceof Locale); [EOL] }
public void testDateTypes() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.enableDefaultTyping(); [EOL]     ObjectListBean input = new ObjectListBean(); [EOL]     List<Object> inputList = new ArrayList<Object>(); [EOL]     inputList.add(TimeZone.getTimeZone("EST")); [EOL]     inputList.add(Locale.CHINESE); [EOL]     input.values = inputList; [EOL]     String json = m.writeValueAsString(input); [EOL]     ObjectListBean output = m.readValue(json, ObjectListBean.class); [EOL]     List<Object> outputList = output.values; [EOL]     assertEquals(2, outputList.size()); [EOL]     assertTrue(outputList.get(0) instanceof TimeZone); [EOL]     assertTrue(outputList.get(1) instanceof Locale); [EOL] }
public void testDateTypes() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.enableDefaultTyping(); [EOL]     ObjectListBean input = new ObjectListBean(); [EOL]     List<Object> inputList = new ArrayList<Object>(); [EOL]     inputList.add(TimeZone.getTimeZone("EST")); [EOL]     inputList.add(Locale.CHINESE); [EOL]     input.values = inputList; [EOL]     String json = m.writeValueAsString(input); [EOL]     ObjectListBean output = m.readValue(json, ObjectListBean.class); [EOL]     List<Object> outputList = output.values; [EOL]     assertEquals(2, outputList.size()); [EOL]     assertTrue(outputList.get(0) instanceof TimeZone); [EOL]     assertTrue(outputList.get(1) instanceof Locale); [EOL] }
public void testDateTypes() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.enableDefaultTyping(); [EOL]     ObjectListBean input = new ObjectListBean(); [EOL]     List<Object> inputList = new ArrayList<Object>(); [EOL]     inputList.add(TimeZone.getTimeZone("EST")); [EOL]     inputList.add(Locale.CHINESE); [EOL]     input.values = inputList; [EOL]     String json = m.writeValueAsString(input); [EOL]     ObjectListBean output = m.readValue(json, ObjectListBean.class); [EOL]     List<Object> outputList = output.values; [EOL]     assertEquals(2, outputList.size()); [EOL]     assertTrue(outputList.get(0) instanceof TimeZone); [EOL]     assertTrue(outputList.get(1) instanceof Locale); [EOL] }
public void testListAsObject() throws Exception { [EOL]     CollectionAsPOJO list = new CollectionAsPOJO(); [EOL]     list.add("a"); [EOL]     list.add("b"); [EOL]     String json = MAPPER.writeValueAsString(list); [EOL]     assertEquals("{\"size\":2,\"values\":[\"a\",\"b\"]}", json); [EOL]     CollectionAsPOJO result = MAPPER.readValue(json, CollectionAsPOJO.class); [EOL]     assertEquals(2, result.size()); [EOL] }
public void testListAsObject() throws Exception { [EOL]     CollectionAsPOJO list = new CollectionAsPOJO(); [EOL]     list.add("a"); [EOL]     list.add("b"); [EOL]     String json = MAPPER.writeValueAsString(list); [EOL]     assertEquals("{\"size\":2,\"values\":[\"a\",\"b\"]}", json); [EOL]     CollectionAsPOJO result = MAPPER.readValue(json, CollectionAsPOJO.class); [EOL]     assertEquals(2, result.size()); [EOL] }
public void testListAsObject() throws Exception { [EOL]     CollectionAsPOJO list = new CollectionAsPOJO(); [EOL]     list.add("a"); [EOL]     list.add("b"); [EOL]     String json = MAPPER.writeValueAsString(list); [EOL]     assertEquals("{\"size\":2,\"values\":[\"a\",\"b\"]}", json); [EOL]     CollectionAsPOJO result = MAPPER.readValue(json, CollectionAsPOJO.class); [EOL]     assertEquals(2, result.size()); [EOL] }
public void testListAsObject() throws Exception { [EOL]     CollectionAsPOJO list = new CollectionAsPOJO(); [EOL]     list.add("a"); [EOL]     list.add("b"); [EOL]     String json = MAPPER.writeValueAsString(list); [EOL]     assertEquals("{\"size\":2,\"values\":[\"a\",\"b\"]}", json); [EOL]     CollectionAsPOJO result = MAPPER.readValue(json, CollectionAsPOJO.class); [EOL]     assertEquals(2, result.size()); [EOL] }
public void testListAsObject() throws Exception { [EOL]     CollectionAsPOJO list = new CollectionAsPOJO(); [EOL]     list.add("a"); [EOL]     list.add("b"); [EOL]     String json = MAPPER.writeValueAsString(list); [EOL]     assertEquals("{\"size\":2,\"values\":[\"a\",\"b\"]}", json); [EOL]     CollectionAsPOJO result = MAPPER.readValue(json, CollectionAsPOJO.class); [EOL]     assertEquals(2, result.size()); [EOL] }
public void testListAsObject() throws Exception { [EOL]     CollectionAsPOJO list = new CollectionAsPOJO(); [EOL]     list.add("a"); [EOL]     list.add("b"); [EOL]     String json = MAPPER.writeValueAsString(list); [EOL]     assertEquals("{\"size\":2,\"values\":[\"a\",\"b\"]}", json); [EOL]     CollectionAsPOJO result = MAPPER.readValue(json, CollectionAsPOJO.class); [EOL]     assertEquals(2, result.size()); [EOL] }
public void testMethodAnnotationInMap() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     SimpleModule module = new SimpleModule("test", Version.unknownVersion()); [EOL]     module.addSerializer(String.class, new AnnotatedContextualSerializer()); [EOL]     mapper.registerModule(module); [EOL]     ContextualMapBean map = new ContextualMapBean(); [EOL]     map.beans.put("first", "In Map"); [EOL]     assertEquals("{\"beans\":{\"first\":\"map->In Map\"}}", mapper.writeValueAsString(map)); [EOL] }
public void testMethodAnnotationInArray() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     SimpleModule module = new SimpleModule("test", Version.unknownVersion()); [EOL]     module.addSerializer(String.class, new AnnotatedContextualSerializer()); [EOL]     mapper.registerModule(module); [EOL]     ContextualArrayBean beans = new ContextualArrayBean("123"); [EOL]     assertEquals("{\"beans\":[\"array->123\"]}", mapper.writeValueAsString(beans)); [EOL] }
public void testMethodAnnotationInArray() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     SimpleModule module = new SimpleModule("test", Version.unknownVersion()); [EOL]     module.addSerializer(String.class, new AnnotatedContextualSerializer()); [EOL]     mapper.registerModule(module); [EOL]     ContextualArrayBean beans = new ContextualArrayBean("123"); [EOL]     assertEquals("{\"beans\":[\"array->123\"]}", mapper.writeValueAsString(beans)); [EOL] }
public void testMethodAnnotationInArray() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     SimpleModule module = new SimpleModule("test", Version.unknownVersion()); [EOL]     module.addSerializer(String.class, new AnnotatedContextualSerializer()); [EOL]     mapper.registerModule(module); [EOL]     ContextualArrayBean beans = new ContextualArrayBean("123"); [EOL]     assertEquals("{\"beans\":[\"array->123\"]}", mapper.writeValueAsString(beans)); [EOL] }
public void testMethodAnnotationInArray() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     SimpleModule module = new SimpleModule("test", Version.unknownVersion()); [EOL]     module.addSerializer(String.class, new AnnotatedContextualSerializer()); [EOL]     mapper.registerModule(module); [EOL]     ContextualArrayBean beans = new ContextualArrayBean("123"); [EOL]     assertEquals("{\"beans\":[\"array->123\"]}", mapper.writeValueAsString(beans)); [EOL] }
public void testDeserializeSimple() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     JsonSchema schema = mapper.generateJsonSchema(Schemable.class); [EOL]     assertNotNull(schema); [EOL]     String schemaStr = mapper.writeValueAsString(schema); [EOL]     assertNotNull(schemaStr); [EOL]     JsonSchema result = mapper.readValue(schemaStr, JsonSchema.class); [EOL]     assertEquals("Trying to read from '" + schemaStr + "'", schema, result); [EOL] }
public void testDeserializeSimple() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     JsonSchema schema = mapper.generateJsonSchema(Schemable.class); [EOL]     assertNotNull(schema); [EOL]     String schemaStr = mapper.writeValueAsString(schema); [EOL]     assertNotNull(schemaStr); [EOL]     JsonSchema result = mapper.readValue(schemaStr, JsonSchema.class); [EOL]     assertEquals("Trying to read from '" + schemaStr + "'", schema, result); [EOL] }
public void testDeserializeSimple() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     JsonSchema schema = mapper.generateJsonSchema(Schemable.class); [EOL]     assertNotNull(schema); [EOL]     String schemaStr = mapper.writeValueAsString(schema); [EOL]     assertNotNull(schemaStr); [EOL]     JsonSchema result = mapper.readValue(schemaStr, JsonSchema.class); [EOL]     assertEquals("Trying to read from '" + schemaStr + "'", schema, result); [EOL] }
public void testDeserializeSimple() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     JsonSchema schema = mapper.generateJsonSchema(Schemable.class); [EOL]     assertNotNull(schema); [EOL]     String schemaStr = mapper.writeValueAsString(schema); [EOL]     assertNotNull(schemaStr); [EOL]     JsonSchema result = mapper.readValue(schemaStr, JsonSchema.class); [EOL]     assertEquals("Trying to read from '" + schemaStr + "'", schema, result); [EOL] }
public void testSimpleTyped() throws Exception { [EOL]     MapImitatorWithValue mapHolder = MAPPER.readValue("{ \"a\" : [ 3, -1 ], \"b\" : [ ] }", MapImitatorWithValue.class); [EOL]     Map<String, int[]> result = mapHolder._map; [EOL]     assertEquals(2, result.size()); [EOL]     assertEquals(new int[] { 3, -1 }, result.get("a")); [EOL]     assertEquals(new int[0], result.get("b")); [EOL] }
public void testSimpleTyped() throws Exception { [EOL]     MapImitatorWithValue mapHolder = MAPPER.readValue("{ \"a\" : [ 3, -1 ], \"b\" : [ ] }", MapImitatorWithValue.class); [EOL]     Map<String, int[]> result = mapHolder._map; [EOL]     assertEquals(2, result.size()); [EOL]     assertEquals(new int[] { 3, -1 }, result.get("a")); [EOL]     assertEquals(new int[0], result.get("b")); [EOL] }
public void testSimpleTyped() throws Exception { [EOL]     MapImitatorWithValue mapHolder = MAPPER.readValue("{ \"a\" : [ 3, -1 ], \"b\" : [ ] }", MapImitatorWithValue.class); [EOL]     Map<String, int[]> result = mapHolder._map; [EOL]     assertEquals(2, result.size()); [EOL]     assertEquals(new int[] { 3, -1 }, result.get("a")); [EOL]     assertEquals(new int[0], result.get("b")); [EOL] }
public void testSimpleTyped() throws Exception { [EOL]     MapImitatorWithValue mapHolder = MAPPER.readValue("{ \"a\" : [ 3, -1 ], \"b\" : [ ] }", MapImitatorWithValue.class); [EOL]     Map<String, int[]> result = mapHolder._map; [EOL]     assertEquals(2, result.size()); [EOL]     assertEquals(new int[] { 3, -1 }, result.get("a")); [EOL]     assertEquals(new int[0], result.get("b")); [EOL] }
public void testSimpleTyped() throws Exception { [EOL]     MapImitatorWithValue mapHolder = MAPPER.readValue("{ \"a\" : [ 3, -1 ], \"b\" : [ ] }", MapImitatorWithValue.class); [EOL]     Map<String, int[]> result = mapHolder._map; [EOL]     assertEquals(2, result.size()); [EOL]     assertEquals(new int[] { 3, -1 }, result.get("a")); [EOL]     assertEquals(new int[0], result.get("b")); [EOL] }
public void testSimpleTyped() throws Exception { [EOL]     MapImitatorWithValue mapHolder = MAPPER.readValue("{ \"a\" : [ 3, -1 ], \"b\" : [ ] }", MapImitatorWithValue.class); [EOL]     Map<String, int[]> result = mapHolder._map; [EOL]     assertEquals(2, result.size()); [EOL]     assertEquals(new int[] { 3, -1 }, result.get("a")); [EOL]     assertEquals(new int[0], result.get("b")); [EOL] }
public void testSimpleTyped() throws Exception { [EOL]     MapImitatorWithValue mapHolder = MAPPER.readValue("{ \"a\" : [ 3, -1 ], \"b\" : [ ] }", MapImitatorWithValue.class); [EOL]     Map<String, int[]> result = mapHolder._map; [EOL]     assertEquals(2, result.size()); [EOL]     assertEquals(new int[] { 3, -1 }, result.get("a")); [EOL]     assertEquals(new int[0], result.get("b")); [EOL] }
public void testSimpleTyped() throws Exception { [EOL]     MapImitatorWithValue mapHolder = MAPPER.readValue("{ \"a\" : [ 3, -1 ], \"b\" : [ ] }", MapImitatorWithValue.class); [EOL]     Map<String, int[]> result = mapHolder._map; [EOL]     assertEquals(2, result.size()); [EOL]     assertEquals(new int[] { 3, -1 }, result.get("a")); [EOL]     assertEquals(new int[0], result.get("b")); [EOL] }
public void testSimpleTyped() throws Exception { [EOL]     MapImitatorWithValue mapHolder = MAPPER.readValue("{ \"a\" : [ 3, -1 ], \"b\" : [ ] }", MapImitatorWithValue.class); [EOL]     Map<String, int[]> result = mapHolder._map; [EOL]     assertEquals(2, result.size()); [EOL]     assertEquals(new int[] { 3, -1 }, result.get("a")); [EOL]     assertEquals(new int[0], result.get("b")); [EOL] }
public void testSimpleTyped() throws Exception { [EOL]     MapImitatorWithValue mapHolder = MAPPER.readValue("{ \"a\" : [ 3, -1 ], \"b\" : [ ] }", MapImitatorWithValue.class); [EOL]     Map<String, int[]> result = mapHolder._map; [EOL]     assertEquals(2, result.size()); [EOL]     assertEquals(new int[] { 3, -1 }, result.get("a")); [EOL]     assertEquals(new int[0], result.get("b")); [EOL] }
public void testSimpleTyped() throws Exception { [EOL]     MapImitatorWithValue mapHolder = MAPPER.readValue("{ \"a\" : [ 3, -1 ], \"b\" : [ ] }", MapImitatorWithValue.class); [EOL]     Map<String, int[]> result = mapHolder._map; [EOL]     assertEquals(2, result.size()); [EOL]     assertEquals(new int[] { 3, -1 }, result.get("a")); [EOL]     assertEquals(new int[0], result.get("b")); [EOL] }
public void testSimpleTyped() throws Exception { [EOL]     MapImitatorWithValue mapHolder = MAPPER.readValue("{ \"a\" : [ 3, -1 ], \"b\" : [ ] }", MapImitatorWithValue.class); [EOL]     Map<String, int[]> result = mapHolder._map; [EOL]     assertEquals(2, result.size()); [EOL]     assertEquals(new int[] { 3, -1 }, result.get("a")); [EOL]     assertEquals(new int[0], result.get("b")); [EOL] }
public void testSimpleTyped() throws Exception { [EOL]     MapImitatorWithValue mapHolder = MAPPER.readValue("{ \"a\" : [ 3, -1 ], \"b\" : [ ] }", MapImitatorWithValue.class); [EOL]     Map<String, int[]> result = mapHolder._map; [EOL]     assertEquals(2, result.size()); [EOL]     assertEquals(new int[] { 3, -1 }, result.get("a")); [EOL]     assertEquals(new int[0], result.get("b")); [EOL] }
public void testSimpleTyped() throws Exception { [EOL]     MapImitatorWithValue mapHolder = MAPPER.readValue("{ \"a\" : [ 3, -1 ], \"b\" : [ ] }", MapImitatorWithValue.class); [EOL]     Map<String, int[]> result = mapHolder._map; [EOL]     assertEquals(2, result.size()); [EOL]     assertEquals(new int[] { 3, -1 }, result.get("a")); [EOL]     assertEquals(new int[0], result.get("b")); [EOL] }
public void testSimpleTyped() throws Exception { [EOL]     MapImitatorWithValue mapHolder = MAPPER.readValue("{ \"a\" : [ 3, -1 ], \"b\" : [ ] }", MapImitatorWithValue.class); [EOL]     Map<String, int[]> result = mapHolder._map; [EOL]     assertEquals(2, result.size()); [EOL]     assertEquals(new int[] { 3, -1 }, result.get("a")); [EOL]     assertEquals(new int[0], result.get("b")); [EOL] }
public void testSimpleTyped() throws Exception { [EOL]     MapImitatorWithValue mapHolder = MAPPER.readValue("{ \"a\" : [ 3, -1 ], \"b\" : [ ] }", MapImitatorWithValue.class); [EOL]     Map<String, int[]> result = mapHolder._map; [EOL]     assertEquals(2, result.size()); [EOL]     assertEquals(new int[] { 3, -1 }, result.get("a")); [EOL]     assertEquals(new int[0], result.get("b")); [EOL] }
public void testPropertyWithSubtypes() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerSubtypes(SubB.class, SubC.class, SubD.class); [EOL]     String json = mapper.writeValueAsString(new PropertyBean(new SubC())); [EOL]     PropertyBean result = mapper.readValue(json, PropertyBean.class); [EOL]     assertSame(SubC.class, result.value.getClass()); [EOL] }
public void testPropertyWithSubtypes() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerSubtypes(SubB.class, SubC.class, SubD.class); [EOL]     String json = mapper.writeValueAsString(new PropertyBean(new SubC())); [EOL]     PropertyBean result = mapper.readValue(json, PropertyBean.class); [EOL]     assertSame(SubC.class, result.value.getClass()); [EOL] }
public void testIgnoredSingleArgCtor() throws Exception { [EOL]     try { [EOL]         MAPPER.readValue(quote("abc"), IgnoredCtor.class); [EOL]         fail("Should have caught missing constructor problem"); [EOL]     } catch (JsonMappingException e) { [EOL]         verifyException(e, "no single-String constructor/factory method"); [EOL]     } [EOL] }
public void testIgnoredSingleArgCtor() throws Exception { [EOL]     try { [EOL]         MAPPER.readValue(quote("abc"), IgnoredCtor.class); [EOL]         fail("Should have caught missing constructor problem"); [EOL]     } catch (JsonMappingException e) { [EOL]         verifyException(e, "no single-String constructor/factory method"); [EOL]     } [EOL] }
public void testIgnoredSingleArgCtor() throws Exception { [EOL]     try { [EOL]         MAPPER.readValue(quote("abc"), IgnoredCtor.class); [EOL]         fail("Should have caught missing constructor problem"); [EOL]     } catch (JsonMappingException e) { [EOL]         verifyException(e, "no single-String constructor/factory method"); [EOL]     } [EOL] }
public void testIgnoredSingleArgCtor() throws Exception { [EOL]     try { [EOL]         MAPPER.readValue(quote("abc"), IgnoredCtor.class); [EOL]         fail("Should have caught missing constructor problem"); [EOL]     } catch (JsonMappingException e) { [EOL]         verifyException(e, "no single-String constructor/factory method"); [EOL]     } [EOL] }
public void testIgnoredSingleArgCtor() throws Exception { [EOL]     try { [EOL]         MAPPER.readValue(quote("abc"), IgnoredCtor.class); [EOL]         fail("Should have caught missing constructor problem"); [EOL]     } catch (JsonMappingException e) { [EOL]         verifyException(e, "no single-String constructor/factory method"); [EOL]     } [EOL] }
public void testDefaultImplViaModule() throws Exception { [EOL]     final String JSON = "{\"a\":123}"; [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     try { [EOL]         mapper.readValue(JSON, SuperTypeWithoutDefault.class); [EOL]         fail("Expected an exception"); [EOL]     } catch (JsonMappingException e) { [EOL]         verifyException(e, "missing property"); [EOL]     } [EOL]     mapper = new ObjectMapper(); [EOL]     SimpleModule module = new SimpleModule("test", Version.unknownVersion()); [EOL]     module.addAbstractTypeMapping(SuperTypeWithoutDefault.class, DefaultImpl505.class); [EOL]     mapper.registerModule(module); [EOL]     SuperTypeWithoutDefault bean = mapper.readValue(JSON, SuperTypeWithoutDefault.class); [EOL]     assertNotNull(bean); [EOL]     assertEquals(DefaultImpl505.class, bean.getClass()); [EOL]     assertEquals(123, ((DefaultImpl505) bean).a); [EOL]     bean = mapper.readValue("{\"#type\":\"foobar\"}", SuperTypeWithoutDefault.class); [EOL]     assertEquals(DefaultImpl505.class, bean.getClass()); [EOL]     assertEquals(0, ((DefaultImpl505) bean).a); [EOL] }
public void testDefaultImplViaModule() throws Exception { [EOL]     final String JSON = "{\"a\":123}"; [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     try { [EOL]         mapper.readValue(JSON, SuperTypeWithoutDefault.class); [EOL]         fail("Expected an exception"); [EOL]     } catch (JsonMappingException e) { [EOL]         verifyException(e, "missing property"); [EOL]     } [EOL]     mapper = new ObjectMapper(); [EOL]     SimpleModule module = new SimpleModule("test", Version.unknownVersion()); [EOL]     module.addAbstractTypeMapping(SuperTypeWithoutDefault.class, DefaultImpl505.class); [EOL]     mapper.registerModule(module); [EOL]     SuperTypeWithoutDefault bean = mapper.readValue(JSON, SuperTypeWithoutDefault.class); [EOL]     assertNotNull(bean); [EOL]     assertEquals(DefaultImpl505.class, bean.getClass()); [EOL]     assertEquals(123, ((DefaultImpl505) bean).a); [EOL]     bean = mapper.readValue("{\"#type\":\"foobar\"}", SuperTypeWithoutDefault.class); [EOL]     assertEquals(DefaultImpl505.class, bean.getClass()); [EOL]     assertEquals(0, ((DefaultImpl505) bean).a); [EOL] }
public void testDefaultImplViaModule() throws Exception { [EOL]     final String JSON = "{\"a\":123}"; [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     try { [EOL]         mapper.readValue(JSON, SuperTypeWithoutDefault.class); [EOL]         fail("Expected an exception"); [EOL]     } catch (JsonMappingException e) { [EOL]         verifyException(e, "missing property"); [EOL]     } [EOL]     mapper = new ObjectMapper(); [EOL]     SimpleModule module = new SimpleModule("test", Version.unknownVersion()); [EOL]     module.addAbstractTypeMapping(SuperTypeWithoutDefault.class, DefaultImpl505.class); [EOL]     mapper.registerModule(module); [EOL]     SuperTypeWithoutDefault bean = mapper.readValue(JSON, SuperTypeWithoutDefault.class); [EOL]     assertNotNull(bean); [EOL]     assertEquals(DefaultImpl505.class, bean.getClass()); [EOL]     assertEquals(123, ((DefaultImpl505) bean).a); [EOL]     bean = mapper.readValue("{\"#type\":\"foobar\"}", SuperTypeWithoutDefault.class); [EOL]     assertEquals(DefaultImpl505.class, bean.getClass()); [EOL]     assertEquals(0, ((DefaultImpl505) bean).a); [EOL] }
@SuppressWarnings("deprecation") [EOL] public void testSqlDate() throws IOException { [EOL]     java.sql.Date date = new java.sql.Date(99, Calendar.APRIL, 1); [EOL]     assertEquals(quote("1999-04-01"), MAPPER.writeValueAsString(date)); [EOL] }
@SuppressWarnings("deprecation") [EOL] public void testSqlDate() throws IOException { [EOL]     java.sql.Date date = new java.sql.Date(99, Calendar.APRIL, 1); [EOL]     assertEquals(quote("1999-04-01"), MAPPER.writeValueAsString(date)); [EOL] }
public void testDateTypes() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.enableDefaultTyping(); [EOL]     ObjectListBean input = new ObjectListBean(); [EOL]     List<Object> inputList = new ArrayList<Object>(); [EOL]     inputList.add(TimeZone.getTimeZone("EST")); [EOL]     inputList.add(Locale.CHINESE); [EOL]     input.values = inputList; [EOL]     String json = m.writeValueAsString(input); [EOL]     ObjectListBean output = m.readValue(json, ObjectListBean.class); [EOL]     List<Object> outputList = output.values; [EOL]     assertEquals(2, outputList.size()); [EOL]     assertTrue(outputList.get(0) instanceof TimeZone); [EOL]     assertTrue(outputList.get(1) instanceof Locale); [EOL] }
public void testDateTypes() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.enableDefaultTyping(); [EOL]     ObjectListBean input = new ObjectListBean(); [EOL]     List<Object> inputList = new ArrayList<Object>(); [EOL]     inputList.add(TimeZone.getTimeZone("EST")); [EOL]     inputList.add(Locale.CHINESE); [EOL]     input.values = inputList; [EOL]     String json = m.writeValueAsString(input); [EOL]     ObjectListBean output = m.readValue(json, ObjectListBean.class); [EOL]     List<Object> outputList = output.values; [EOL]     assertEquals(2, outputList.size()); [EOL]     assertTrue(outputList.get(0) instanceof TimeZone); [EOL]     assertTrue(outputList.get(1) instanceof Locale); [EOL] }
public void testDateTypes() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.enableDefaultTyping(); [EOL]     ObjectListBean input = new ObjectListBean(); [EOL]     List<Object> inputList = new ArrayList<Object>(); [EOL]     inputList.add(TimeZone.getTimeZone("EST")); [EOL]     inputList.add(Locale.CHINESE); [EOL]     input.values = inputList; [EOL]     String json = m.writeValueAsString(input); [EOL]     ObjectListBean output = m.readValue(json, ObjectListBean.class); [EOL]     List<Object> outputList = output.values; [EOL]     assertEquals(2, outputList.size()); [EOL]     assertTrue(outputList.get(0) instanceof TimeZone); [EOL]     assertTrue(outputList.get(1) instanceof Locale); [EOL] }
public void testNonEmptyDefaultArray() throws IOException { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     assertEquals("{}", m.writeValueAsString(new ArrayBean())); [EOL] }
public void testNonEmptyDefaultArray() throws IOException { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     assertEquals("{}", m.writeValueAsString(new ArrayBean())); [EOL] }
public void testNonEmptyDefaultArray() throws IOException { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     assertEquals("{}", m.writeValueAsString(new ArrayBean())); [EOL] }
public void testNonEmptyDefaultArray() throws IOException { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     assertEquals("{}", m.writeValueAsString(new ArrayBean())); [EOL] }
public void testNonEmptyDefaultArray() throws IOException { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     assertEquals("{}", m.writeValueAsString(new ArrayBean())); [EOL] }
public void testSimpleNonStaticInner() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     Dog input = new Dog("Smurf", true); [EOL]     String json = mapper.writeValueAsString(input); [EOL]     Dog output = mapper.readValue(json, Dog.class); [EOL]     assertEquals("Smurf", output.name); [EOL]     assertNotNull(output.brain); [EOL]     assertTrue(output.brain.isThinking); [EOL]     assertEquals("Smurf", output.brain.parentName()); [EOL]     output.name = "Foo"; [EOL]     assertEquals("Foo", output.brain.parentName()); [EOL] }
public void testSimpleNonStaticInner() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     Dog input = new Dog("Smurf", true); [EOL]     String json = mapper.writeValueAsString(input); [EOL]     Dog output = mapper.readValue(json, Dog.class); [EOL]     assertEquals("Smurf", output.name); [EOL]     assertNotNull(output.brain); [EOL]     assertTrue(output.brain.isThinking); [EOL]     assertEquals("Smurf", output.brain.parentName()); [EOL]     output.name = "Foo"; [EOL]     assertEquals("Foo", output.brain.parentName()); [EOL] }
public void testSimpleNonStaticInner() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     Dog input = new Dog("Smurf", true); [EOL]     String json = mapper.writeValueAsString(input); [EOL]     Dog output = mapper.readValue(json, Dog.class); [EOL]     assertEquals("Smurf", output.name); [EOL]     assertNotNull(output.brain); [EOL]     assertTrue(output.brain.isThinking); [EOL]     assertEquals("Smurf", output.brain.parentName()); [EOL]     output.name = "Foo"; [EOL]     assertEquals("Foo", output.brain.parentName()); [EOL] }
public void testSimpleNonStaticInner() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     Dog input = new Dog("Smurf", true); [EOL]     String json = mapper.writeValueAsString(input); [EOL]     Dog output = mapper.readValue(json, Dog.class); [EOL]     assertEquals("Smurf", output.name); [EOL]     assertNotNull(output.brain); [EOL]     assertTrue(output.brain.isThinking); [EOL]     assertEquals("Smurf", output.brain.parentName()); [EOL]     output.name = "Foo"; [EOL]     assertEquals("Foo", output.brain.parentName()); [EOL] }
public void testSimpleNonStaticInner() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     Dog input = new Dog("Smurf", true); [EOL]     String json = mapper.writeValueAsString(input); [EOL]     Dog output = mapper.readValue(json, Dog.class); [EOL]     assertEquals("Smurf", output.name); [EOL]     assertNotNull(output.brain); [EOL]     assertTrue(output.brain.isThinking); [EOL]     assertEquals("Smurf", output.brain.parentName()); [EOL]     output.name = "Foo"; [EOL]     assertEquals("Foo", output.brain.parentName()); [EOL] }
public void testSimpleNonStaticInner() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     Dog input = new Dog("Smurf", true); [EOL]     String json = mapper.writeValueAsString(input); [EOL]     Dog output = mapper.readValue(json, Dog.class); [EOL]     assertEquals("Smurf", output.name); [EOL]     assertNotNull(output.brain); [EOL]     assertTrue(output.brain.isThinking); [EOL]     assertEquals("Smurf", output.brain.parentName()); [EOL]     output.name = "Foo"; [EOL]     assertEquals("Foo", output.brain.parentName()); [EOL] }
public void testSimpleNonStaticInner() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     Dog input = new Dog("Smurf", true); [EOL]     String json = mapper.writeValueAsString(input); [EOL]     Dog output = mapper.readValue(json, Dog.class); [EOL]     assertEquals("Smurf", output.name); [EOL]     assertNotNull(output.brain); [EOL]     assertTrue(output.brain.isThinking); [EOL]     assertEquals("Smurf", output.brain.parentName()); [EOL]     output.name = "Foo"; [EOL]     assertEquals("Foo", output.brain.parentName()); [EOL] }
public void testGeneratingJsonSchemaWithFilters() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setFilters(secretFilterProvider); [EOL]     JsonSchema schema = mapper.generateJsonSchema(FilteredBean.class); [EOL]     JsonNode node = schema.getSchemaNode().get("properties"); [EOL]     assertTrue(node.has("obvious")); [EOL]     assertFalse(node.has("secret")); [EOL] }
public void testGeneratingJsonSchemaWithFilters() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setFilters(secretFilterProvider); [EOL]     JsonSchema schema = mapper.generateJsonSchema(FilteredBean.class); [EOL]     JsonNode node = schema.getSchemaNode().get("properties"); [EOL]     assertTrue(node.has("obvious")); [EOL]     assertFalse(node.has("secret")); [EOL] }
public void testGeneratingJsonSchemaWithFilters() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setFilters(secretFilterProvider); [EOL]     JsonSchema schema = mapper.generateJsonSchema(FilteredBean.class); [EOL]     JsonNode node = schema.getSchemaNode().get("properties"); [EOL]     assertTrue(node.has("obvious")); [EOL]     assertFalse(node.has("secret")); [EOL] }
public void testDeserializeSimple() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     JsonSchema schema = mapper.generateJsonSchema(Schemable.class); [EOL]     assertNotNull(schema); [EOL]     String schemaStr = mapper.writeValueAsString(schema); [EOL]     assertNotNull(schemaStr); [EOL]     JsonSchema result = mapper.readValue(schemaStr, JsonSchema.class); [EOL]     assertEquals("Trying to read from '" + schemaStr + "'", schema, result); [EOL] }
public void testDeserializeSimple() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     JsonSchema schema = mapper.generateJsonSchema(Schemable.class); [EOL]     assertNotNull(schema); [EOL]     String schemaStr = mapper.writeValueAsString(schema); [EOL]     assertNotNull(schemaStr); [EOL]     JsonSchema result = mapper.readValue(schemaStr, JsonSchema.class); [EOL]     assertEquals("Trying to read from '" + schemaStr + "'", schema, result); [EOL] }
public void testDeserializeSimple() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     JsonSchema schema = mapper.generateJsonSchema(Schemable.class); [EOL]     assertNotNull(schema); [EOL]     String schemaStr = mapper.writeValueAsString(schema); [EOL]     assertNotNull(schemaStr); [EOL]     JsonSchema result = mapper.readValue(schemaStr, JsonSchema.class); [EOL]     assertEquals("Trying to read from '" + schemaStr + "'", schema, result); [EOL] }
public void testDeserializeSimple() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     JsonSchema schema = mapper.generateJsonSchema(Schemable.class); [EOL]     assertNotNull(schema); [EOL]     String schemaStr = mapper.writeValueAsString(schema); [EOL]     assertNotNull(schemaStr); [EOL]     JsonSchema result = mapper.readValue(schemaStr, JsonSchema.class); [EOL]     assertEquals("Trying to read from '" + schemaStr + "'", schema, result); [EOL] }
public void testDeserializeSimple() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     JsonSchema schema = mapper.generateJsonSchema(Schemable.class); [EOL]     assertNotNull(schema); [EOL]     String schemaStr = mapper.writeValueAsString(schema); [EOL]     assertNotNull(schemaStr); [EOL]     JsonSchema result = mapper.readValue(schemaStr, JsonSchema.class); [EOL]     assertEquals("Trying to read from '" + schemaStr + "'", schema, result); [EOL] }
public void testDeserializeSimple() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     JsonSchema schema = mapper.generateJsonSchema(Schemable.class); [EOL]     assertNotNull(schema); [EOL]     String schemaStr = mapper.writeValueAsString(schema); [EOL]     assertNotNull(schemaStr); [EOL]     JsonSchema result = mapper.readValue(schemaStr, JsonSchema.class); [EOL]     assertEquals("Trying to read from '" + schemaStr + "'", schema, result); [EOL] }
public void testDeserializeSimple() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     JsonSchema schema = mapper.generateJsonSchema(Schemable.class); [EOL]     assertNotNull(schema); [EOL]     String schemaStr = mapper.writeValueAsString(schema); [EOL]     assertNotNull(schemaStr); [EOL]     JsonSchema result = mapper.readValue(schemaStr, JsonSchema.class); [EOL]     assertEquals("Trying to read from '" + schemaStr + "'", schema, result); [EOL] }
public void testOverrideIntrospectors() { [EOL]     SerializationConfig cfg = MAPPER.getSerializationConfig(); [EOL]     cfg = cfg.with((ClassIntrospector) null); [EOL]     cfg = cfg.with((AnnotationIntrospector) null); [EOL]     assertNull(cfg.getAnnotationIntrospector()); [EOL] }
public void testOverrideIntrospectors() { [EOL]     SerializationConfig cfg = MAPPER.getSerializationConfig(); [EOL]     cfg = cfg.with((ClassIntrospector) null); [EOL]     cfg = cfg.with((AnnotationIntrospector) null); [EOL]     assertNull(cfg.getAnnotationIntrospector()); [EOL] }
public void testDateWithJsonFormat() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     String json; [EOL]     mapper.disable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS); [EOL]     json = mapper.writeValueAsString(new DateAsNumberBean(0L)); [EOL]     assertEquals("{\"date\":0}", json); [EOL]     mapper.enable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS); [EOL]     json = mapper.writer().with(getUTCTimeZone()).writeValueAsString(new DateAsStringBean(0L)); [EOL]     assertEquals("{\"date\":\"1970-01-01\"}", json); [EOL]     json = mapper.writeValueAsString(new DateInCETBean(0L)); [EOL]     assertEquals("{\"date\":\"1970-01-01,01:00\"}", json); [EOL] }
public void testDateWithJsonFormat() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     String json; [EOL]     mapper.disable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS); [EOL]     json = mapper.writeValueAsString(new DateAsNumberBean(0L)); [EOL]     assertEquals("{\"date\":0}", json); [EOL]     mapper.enable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS); [EOL]     json = mapper.writer().with(getUTCTimeZone()).writeValueAsString(new DateAsStringBean(0L)); [EOL]     assertEquals("{\"date\":\"1970-01-01\"}", json); [EOL]     json = mapper.writeValueAsString(new DateInCETBean(0L)); [EOL]     assertEquals("{\"date\":\"1970-01-01,01:00\"}", json); [EOL] }
public void testDateWithJsonFormat() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     String json; [EOL]     mapper.disable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS); [EOL]     json = mapper.writeValueAsString(new DateAsNumberBean(0L)); [EOL]     assertEquals("{\"date\":0}", json); [EOL]     mapper.enable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS); [EOL]     json = mapper.writer().with(getUTCTimeZone()).writeValueAsString(new DateAsStringBean(0L)); [EOL]     assertEquals("{\"date\":\"1970-01-01\"}", json); [EOL]     json = mapper.writeValueAsString(new DateInCETBean(0L)); [EOL]     assertEquals("{\"date\":\"1970-01-01,01:00\"}", json); [EOL] }
public void testCustomDateWithAnnotation() throws Exception { [EOL]     DateAsStringBean result = MAPPER.readValue("{\"date\":\"/2005/05/25/\"}", DateAsStringBean.class); [EOL]     assertNotNull(result); [EOL]     assertNotNull(result.date); [EOL]     Calendar c = Calendar.getInstance(TimeZone.getTimeZone("GMT")); [EOL]     long l = result.date.getTime(); [EOL]     if (l == 0L) { [EOL]         fail("Should not get null date"); [EOL]     } [EOL]     c.setTimeInMillis(l); [EOL]     assertEquals(2005, c.get(Calendar.YEAR)); [EOL]     assertEquals(Calendar.MAY, c.get(Calendar.MONTH)); [EOL]     assertEquals(25, c.get(Calendar.DAY_OF_MONTH)); [EOL] }
public void testLongArrayToX() throws Exception { [EOL]     long[] data = longs(); [EOL]     verifyLongArrayConversion(data, byte[].class); [EOL]     verifyLongArrayConversion(data, short[].class); [EOL]     verifyLongArrayConversion(data, int[].class); [EOL]     List<Number> expNums = _numberList(data, data.length); [EOL]     List<Long> actNums = mapper.convertValue(data, new TypeReference<List<Long>>() { [EOL]     }); [EOL]     assertEquals(expNums, actNums); [EOL] }
public void testLongArrayToX() throws Exception { [EOL]     long[] data = longs(); [EOL]     verifyLongArrayConversion(data, byte[].class); [EOL]     verifyLongArrayConversion(data, short[].class); [EOL]     verifyLongArrayConversion(data, int[].class); [EOL]     List<Number> expNums = _numberList(data, data.length); [EOL]     List<Long> actNums = mapper.convertValue(data, new TypeReference<List<Long>>() { [EOL]     }); [EOL]     assertEquals(expNums, actNums); [EOL] }
public void testLongArray() throws Exception { [EOL]     final int LEN = 12300; [EOL]     StringBuilder sb = new StringBuilder(); [EOL]     sb.append('['); [EOL]     for (int i = 0; i < LEN; ++i) { [EOL]         if (i > 0) { [EOL]             sb.append(','); [EOL]         } [EOL]         sb.append(i); [EOL]     } [EOL]     sb.append(']'); [EOL]     long[] result = MAPPER.readValue(sb.toString(), long[].class); [EOL]     assertNotNull(result); [EOL]     assertEquals(LEN, result.length); [EOL]     for (int i = 0; i < LEN; ++i) { [EOL]         long exp = (long) i; [EOL]         assertEquals(exp, result[i]); [EOL]     } [EOL] }
public void testLongArray() throws Exception { [EOL]     final int LEN = 12300; [EOL]     StringBuilder sb = new StringBuilder(); [EOL]     sb.append('['); [EOL]     for (int i = 0; i < LEN; ++i) { [EOL]         if (i > 0) { [EOL]             sb.append(','); [EOL]         } [EOL]         sb.append(i); [EOL]     } [EOL]     sb.append(']'); [EOL]     long[] result = MAPPER.readValue(sb.toString(), long[].class); [EOL]     assertNotNull(result); [EOL]     assertEquals(LEN, result.length); [EOL]     for (int i = 0; i < LEN; ++i) { [EOL]         long exp = (long) i; [EOL]         assertEquals(exp, result[i]); [EOL]     } [EOL] }
public void testDoublePrimitive() throws Exception { [EOL]     double value = 0.016; [EOL]     DoubleBean result = MAPPER.readValue(new StringReader("{\"v\":" + value + "}"), DoubleBean.class); [EOL]     assertEquals(value, result._v); [EOL]     result = MAPPER.readValue(new StringReader("{\"v\":null}"), DoubleBean.class); [EOL]     assertNotNull(result); [EOL]     assertEquals(0.0, result._v); [EOL]     double[] array = MAPPER.readValue(new StringReader("[ null ]"), double[].class); [EOL]     assertNotNull(array); [EOL]     assertEquals(1, array.length); [EOL]     assertEquals(0.0, array[0]); [EOL] }
public void testDoublePrimitive() throws Exception { [EOL]     double value = 0.016; [EOL]     DoubleBean result = MAPPER.readValue(new StringReader("{\"v\":" + value + "}"), DoubleBean.class); [EOL]     assertEquals(value, result._v); [EOL]     result = MAPPER.readValue(new StringReader("{\"v\":null}"), DoubleBean.class); [EOL]     assertNotNull(result); [EOL]     assertEquals(0.0, result._v); [EOL]     double[] array = MAPPER.readValue(new StringReader("[ null ]"), double[].class); [EOL]     assertNotNull(array); [EOL]     assertEquals(1, array.length); [EOL]     assertEquals(0.0, array[0]); [EOL] }
public void testLongArrayToX() throws Exception { [EOL]     long[] data = longs(); [EOL]     verifyLongArrayConversion(data, byte[].class); [EOL]     verifyLongArrayConversion(data, short[].class); [EOL]     verifyLongArrayConversion(data, int[].class); [EOL]     List<Number> expNums = _numberList(data, data.length); [EOL]     List<Long> actNums = mapper.convertValue(data, new TypeReference<List<Long>>() { [EOL]     }); [EOL]     assertEquals(expNums, actNums); [EOL] }
public void testLongArrayToX() throws Exception { [EOL]     long[] data = longs(); [EOL]     verifyLongArrayConversion(data, byte[].class); [EOL]     verifyLongArrayConversion(data, short[].class); [EOL]     verifyLongArrayConversion(data, int[].class); [EOL]     List<Number> expNums = _numberList(data, data.length); [EOL]     List<Long> actNums = mapper.convertValue(data, new TypeReference<List<Long>>() { [EOL]     }); [EOL]     assertEquals(expNums, actNums); [EOL] }
public void testLongArrayToX() throws Exception { [EOL]     long[] data = longs(); [EOL]     verifyLongArrayConversion(data, byte[].class); [EOL]     verifyLongArrayConversion(data, short[].class); [EOL]     verifyLongArrayConversion(data, int[].class); [EOL]     List<Number> expNums = _numberList(data, data.length); [EOL]     List<Long> actNums = mapper.convertValue(data, new TypeReference<List<Long>>() { [EOL]     }); [EOL]     assertEquals(expNums, actNums); [EOL] }
public void testLongArray() throws Exception { [EOL]     final int LEN = 12300; [EOL]     StringBuilder sb = new StringBuilder(); [EOL]     sb.append('['); [EOL]     for (int i = 0; i < LEN; ++i) { [EOL]         if (i > 0) { [EOL]             sb.append(','); [EOL]         } [EOL]         sb.append(i); [EOL]     } [EOL]     sb.append(']'); [EOL]     long[] result = MAPPER.readValue(sb.toString(), long[].class); [EOL]     assertNotNull(result); [EOL]     assertEquals(LEN, result.length); [EOL]     for (int i = 0; i < LEN; ++i) { [EOL]         long exp = (long) i; [EOL]         assertEquals(exp, result[i]); [EOL]     } [EOL] }
public void testLongArray() throws Exception { [EOL]     final int LEN = 12300; [EOL]     StringBuilder sb = new StringBuilder(); [EOL]     sb.append('['); [EOL]     for (int i = 0; i < LEN; ++i) { [EOL]         if (i > 0) { [EOL]             sb.append(','); [EOL]         } [EOL]         sb.append(i); [EOL]     } [EOL]     sb.append(']'); [EOL]     long[] result = MAPPER.readValue(sb.toString(), long[].class); [EOL]     assertNotNull(result); [EOL]     assertEquals(LEN, result.length); [EOL]     for (int i = 0; i < LEN; ++i) { [EOL]         long exp = (long) i; [EOL]         assertEquals(exp, result[i]); [EOL]     } [EOL] }
public void testLongArray() throws Exception { [EOL]     final int LEN = 12300; [EOL]     StringBuilder sb = new StringBuilder(); [EOL]     sb.append('['); [EOL]     for (int i = 0; i < LEN; ++i) { [EOL]         if (i > 0) { [EOL]             sb.append(','); [EOL]         } [EOL]         sb.append(i); [EOL]     } [EOL]     sb.append(']'); [EOL]     long[] result = MAPPER.readValue(sb.toString(), long[].class); [EOL]     assertNotNull(result); [EOL]     assertEquals(LEN, result.length); [EOL]     for (int i = 0; i < LEN; ++i) { [EOL]         long exp = (long) i; [EOL]         assertEquals(exp, result[i]); [EOL]     } [EOL] }
public void testDoublePrimitive() throws Exception { [EOL]     double value = 0.016; [EOL]     DoubleBean result = MAPPER.readValue(new StringReader("{\"v\":" + value + "}"), DoubleBean.class); [EOL]     assertEquals(value, result._v); [EOL]     result = MAPPER.readValue(new StringReader("{\"v\":null}"), DoubleBean.class); [EOL]     assertNotNull(result); [EOL]     assertEquals(0.0, result._v); [EOL]     double[] array = MAPPER.readValue(new StringReader("[ null ]"), double[].class); [EOL]     assertNotNull(array); [EOL]     assertEquals(1, array.length); [EOL]     assertEquals(0.0, array[0]); [EOL] }
public void testDoublePrimitive() throws Exception { [EOL]     double value = 0.016; [EOL]     DoubleBean result = MAPPER.readValue(new StringReader("{\"v\":" + value + "}"), DoubleBean.class); [EOL]     assertEquals(value, result._v); [EOL]     result = MAPPER.readValue(new StringReader("{\"v\":null}"), DoubleBean.class); [EOL]     assertNotNull(result); [EOL]     assertEquals(0.0, result._v); [EOL]     double[] array = MAPPER.readValue(new StringReader("[ null ]"), double[].class); [EOL]     assertNotNull(array); [EOL]     assertEquals(1, array.length); [EOL]     assertEquals(0.0, array[0]); [EOL] }
public void testNonEmptyDefaultArray() throws IOException { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     assertEquals("{}", m.writeValueAsString(new ArrayBean())); [EOL] }
public void testNonEmptyDefaultArray() throws IOException { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     assertEquals("{}", m.writeValueAsString(new ArrayBean())); [EOL] }
public void testNonEmptyDefaultArray() throws IOException { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     assertEquals("{}", m.writeValueAsString(new ArrayBean())); [EOL] }
public void testNonEmptyDefaultArray() throws IOException { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     assertEquals("{}", m.writeValueAsString(new ArrayBean())); [EOL] }
public void testNonEmptyDefaultArray() throws IOException { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     assertEquals("{}", m.writeValueAsString(new ArrayBean())); [EOL] }
public void testNonEmptyDefaultArray() throws IOException { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     assertEquals("{}", m.writeValueAsString(new ArrayBean())); [EOL] }
public void testNonEmptyDefaultArray() throws IOException { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     assertEquals("{}", m.writeValueAsString(new ArrayBean())); [EOL] }
public void testNonEmptyDefaultArray() throws IOException { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     assertEquals("{}", m.writeValueAsString(new ArrayBean())); [EOL] }
public void testDefaultImplViaModule() throws Exception { [EOL]     final String JSON = "{\"a\":123}"; [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     try { [EOL]         mapper.readValue(JSON, SuperTypeWithoutDefault.class); [EOL]         fail("Expected an exception"); [EOL]     } catch (JsonMappingException e) { [EOL]         verifyException(e, "missing property"); [EOL]     } [EOL]     mapper = new ObjectMapper(); [EOL]     SimpleModule module = new SimpleModule("test", Version.unknownVersion()); [EOL]     module.addAbstractTypeMapping(SuperTypeWithoutDefault.class, DefaultImpl505.class); [EOL]     mapper.registerModule(module); [EOL]     SuperTypeWithoutDefault bean = mapper.readValue(JSON, SuperTypeWithoutDefault.class); [EOL]     assertNotNull(bean); [EOL]     assertEquals(DefaultImpl505.class, bean.getClass()); [EOL]     assertEquals(123, ((DefaultImpl505) bean).a); [EOL]     bean = mapper.readValue("{\"#type\":\"foobar\"}", SuperTypeWithoutDefault.class); [EOL]     assertEquals(DefaultImpl505.class, bean.getClass()); [EOL]     assertEquals(0, ((DefaultImpl505) bean).a); [EOL] }
public void testDefaultImplViaModule() throws Exception { [EOL]     final String JSON = "{\"a\":123}"; [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     try { [EOL]         mapper.readValue(JSON, SuperTypeWithoutDefault.class); [EOL]         fail("Expected an exception"); [EOL]     } catch (JsonMappingException e) { [EOL]         verifyException(e, "missing property"); [EOL]     } [EOL]     mapper = new ObjectMapper(); [EOL]     SimpleModule module = new SimpleModule("test", Version.unknownVersion()); [EOL]     module.addAbstractTypeMapping(SuperTypeWithoutDefault.class, DefaultImpl505.class); [EOL]     mapper.registerModule(module); [EOL]     SuperTypeWithoutDefault bean = mapper.readValue(JSON, SuperTypeWithoutDefault.class); [EOL]     assertNotNull(bean); [EOL]     assertEquals(DefaultImpl505.class, bean.getClass()); [EOL]     assertEquals(123, ((DefaultImpl505) bean).a); [EOL]     bean = mapper.readValue("{\"#type\":\"foobar\"}", SuperTypeWithoutDefault.class); [EOL]     assertEquals(DefaultImpl505.class, bean.getClass()); [EOL]     assertEquals(0, ((DefaultImpl505) bean).a); [EOL] }
public void testSimpleUnwrappingSerialize() throws Exception { [EOL]     assertEquals("{\"name\":\"Tatu\",\"x\":1,\"y\":2}", mapper.writeValueAsString(new Unwrapping("Tatu", 1, 2))); [EOL] }
public void testSimpleUnwrappingSerialize() throws Exception { [EOL]     assertEquals("{\"name\":\"Tatu\",\"x\":1,\"y\":2}", mapper.writeValueAsString(new Unwrapping("Tatu", 1, 2))); [EOL] }
public void testSimpleUnwrappingSerialize() throws Exception { [EOL]     assertEquals("{\"name\":\"Tatu\",\"x\":1,\"y\":2}", mapper.writeValueAsString(new Unwrapping("Tatu", 1, 2))); [EOL] }
public void testSimpleUnwrappingSerialize() throws Exception { [EOL]     assertEquals("{\"name\":\"Tatu\",\"x\":1,\"y\":2}", mapper.writeValueAsString(new Unwrapping("Tatu", 1, 2))); [EOL] }
public void testSimpleUnwrappingSerialize() throws Exception { [EOL]     assertEquals("{\"name\":\"Tatu\",\"x\":1,\"y\":2}", mapper.writeValueAsString(new Unwrapping("Tatu", 1, 2))); [EOL] }
public void testSimpleUnwrappingSerialize() throws Exception { [EOL]     assertEquals("{\"name\":\"Tatu\",\"x\":1,\"y\":2}", mapper.writeValueAsString(new Unwrapping("Tatu", 1, 2))); [EOL] }
public void testSimpleUnwrappingSerialize() throws Exception { [EOL]     assertEquals("{\"name\":\"Tatu\",\"x\":1,\"y\":2}", mapper.writeValueAsString(new Unwrapping("Tatu", 1, 2))); [EOL] }
public void testSimpleUnwrappingSerialize() throws Exception { [EOL]     assertEquals("{\"name\":\"Tatu\",\"x\":1,\"y\":2}", mapper.writeValueAsString(new Unwrapping("Tatu", 1, 2))); [EOL] }
public void testSimpleUnwrappingSerialize() throws Exception { [EOL]     assertEquals("{\"name\":\"Tatu\",\"x\":1,\"y\":2}", mapper.writeValueAsString(new Unwrapping("Tatu", 1, 2))); [EOL] }
public void testSimpleUnwrappingSerialize() throws Exception { [EOL]     assertEquals("{\"name\":\"Tatu\",\"x\":1,\"y\":2}", mapper.writeValueAsString(new Unwrapping("Tatu", 1, 2))); [EOL] }
public void testAlwaysAsId() throws Exception { [EOL]     String json = MAPPER.writeValueAsString(new AlwaysContainer()); [EOL]     assertEquals("{\"a\":1,\"b\":2}", json); [EOL] }
public void testAlwaysAsId() throws Exception { [EOL]     String json = MAPPER.writeValueAsString(new AlwaysContainer()); [EOL]     assertEquals("{\"a\":1,\"b\":2}", json); [EOL] }
public void testAlwaysAsId() throws Exception { [EOL]     String json = MAPPER.writeValueAsString(new AlwaysContainer()); [EOL]     assertEquals("{\"a\":1,\"b\":2}", json); [EOL] }
public void testAlwaysAsId() throws Exception { [EOL]     String json = MAPPER.writeValueAsString(new AlwaysContainer()); [EOL]     assertEquals("{\"a\":1,\"b\":2}", json); [EOL] }
public void testAlwaysAsId() throws Exception { [EOL]     String json = MAPPER.writeValueAsString(new AlwaysContainer()); [EOL]     assertEquals("{\"a\":1,\"b\":2}", json); [EOL] }
public void testAlwaysAsId() throws Exception { [EOL]     String json = MAPPER.writeValueAsString(new AlwaysContainer()); [EOL]     assertEquals("{\"a\":1,\"b\":2}", json); [EOL] }
public void testPropertyWithSubtypes() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerSubtypes(SubB.class, SubC.class, SubD.class); [EOL]     String json = mapper.writeValueAsString(new PropertyBean(new SubC())); [EOL]     PropertyBean result = mapper.readValue(json, PropertyBean.class); [EOL]     assertSame(SubC.class, result.value.getClass()); [EOL] }
public void testPropertyWithSubtypes() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerSubtypes(SubB.class, SubC.class, SubD.class); [EOL]     String json = mapper.writeValueAsString(new PropertyBean(new SubC())); [EOL]     PropertyBean result = mapper.readValue(json, PropertyBean.class); [EOL]     assertSame(SubC.class, result.value.getClass()); [EOL] }
public void testPropertyWithSubtypes() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerSubtypes(SubB.class, SubC.class, SubD.class); [EOL]     String json = mapper.writeValueAsString(new PropertyBean(new SubC())); [EOL]     PropertyBean result = mapper.readValue(json, PropertyBean.class); [EOL]     assertSame(SubC.class, result.value.getClass()); [EOL] }
public void testPropertyWithSubtypes() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerSubtypes(SubB.class, SubC.class, SubD.class); [EOL]     String json = mapper.writeValueAsString(new PropertyBean(new SubC())); [EOL]     PropertyBean result = mapper.readValue(json, PropertyBean.class); [EOL]     assertSame(SubC.class, result.value.getClass()); [EOL] }
public void testAlwaysAsId() throws Exception { [EOL]     String json = MAPPER.writeValueAsString(new AlwaysContainer()); [EOL]     assertEquals("{\"a\":1,\"b\":2}", json); [EOL] }
public void testAlwaysAsId() throws Exception { [EOL]     String json = MAPPER.writeValueAsString(new AlwaysContainer()); [EOL]     assertEquals("{\"a\":1,\"b\":2}", json); [EOL] }
public void testAlwaysAsId() throws Exception { [EOL]     String json = MAPPER.writeValueAsString(new AlwaysContainer()); [EOL]     assertEquals("{\"a\":1,\"b\":2}", json); [EOL] }
public void testAlwaysAsId() throws Exception { [EOL]     String json = MAPPER.writeValueAsString(new AlwaysContainer()); [EOL]     assertEquals("{\"a\":1,\"b\":2}", json); [EOL] }
public void testAlwaysAsId() throws Exception { [EOL]     String json = MAPPER.writeValueAsString(new AlwaysContainer()); [EOL]     assertEquals("{\"a\":1,\"b\":2}", json); [EOL] }
public void testAlwaysAsId() throws Exception { [EOL]     String json = MAPPER.writeValueAsString(new AlwaysContainer()); [EOL]     assertEquals("{\"a\":1,\"b\":2}", json); [EOL] }
public void testSimpleExclusionFilter() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     FilterProvider prov = new SimpleFilterProvider().addFilter("RootFilter", SimpleBeanPropertyFilter.serializeAllExcept("a")); [EOL]     assertEquals("{\"b\":\"b\"}", mapper.writer(prov).writeValueAsString(new Bean())); [EOL] }
public void testSimpleExclusionFilter() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     FilterProvider prov = new SimpleFilterProvider().addFilter("RootFilter", SimpleBeanPropertyFilter.serializeAllExcept("a")); [EOL]     assertEquals("{\"b\":\"b\"}", mapper.writer(prov).writeValueAsString(new Bean())); [EOL] }
public void testSimpleExclusionFilter() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     FilterProvider prov = new SimpleFilterProvider().addFilter("RootFilter", SimpleBeanPropertyFilter.serializeAllExcept("a")); [EOL]     assertEquals("{\"b\":\"b\"}", mapper.writer(prov).writeValueAsString(new Bean())); [EOL] }
public void testSimpleExclusionFilter() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     FilterProvider prov = new SimpleFilterProvider().addFilter("RootFilter", SimpleBeanPropertyFilter.serializeAllExcept("a")); [EOL]     assertEquals("{\"b\":\"b\"}", mapper.writer(prov).writeValueAsString(new Bean())); [EOL] }
public void testSimpleExclusionFilter() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     FilterProvider prov = new SimpleFilterProvider().addFilter("RootFilter", SimpleBeanPropertyFilter.serializeAllExcept("a")); [EOL]     assertEquals("{\"b\":\"b\"}", mapper.writer(prov).writeValueAsString(new Bean())); [EOL] }
public void testSimpleExclusionFilter() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     FilterProvider prov = new SimpleFilterProvider().addFilter("RootFilter", SimpleBeanPropertyFilter.serializeAllExcept("a")); [EOL]     assertEquals("{\"b\":\"b\"}", mapper.writer(prov).writeValueAsString(new Bean())); [EOL] }
public void testSimpleExclusionFilter() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     FilterProvider prov = new SimpleFilterProvider().addFilter("RootFilter", SimpleBeanPropertyFilter.serializeAllExcept("a")); [EOL]     assertEquals("{\"b\":\"b\"}", mapper.writer(prov).writeValueAsString(new Bean())); [EOL] }
public void testGeneratingJsonSchemaWithFilters() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setFilters(secretFilterProvider); [EOL]     JsonSchema schema = mapper.generateJsonSchema(FilteredBean.class); [EOL]     JsonNode node = schema.getSchemaNode().get("properties"); [EOL]     assertTrue(node.has("obvious")); [EOL]     assertFalse(node.has("secret")); [EOL] }
public void testGeneratingJsonSchemaWithFilters() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setFilters(secretFilterProvider); [EOL]     JsonSchema schema = mapper.generateJsonSchema(FilteredBean.class); [EOL]     JsonNode node = schema.getSchemaNode().get("properties"); [EOL]     assertTrue(node.has("obvious")); [EOL]     assertFalse(node.has("secret")); [EOL] }
public void testGeneratingJsonSchemaWithFilters() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setFilters(secretFilterProvider); [EOL]     JsonSchema schema = mapper.generateJsonSchema(FilteredBean.class); [EOL]     JsonNode node = schema.getSchemaNode().get("properties"); [EOL]     assertTrue(node.has("obvious")); [EOL]     assertFalse(node.has("secret")); [EOL] }
public void testBuilderReplacement() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerModule(new ModuleImpl(new BuilderModifier(new BogusBeanSerializer(17)))); [EOL]     Bean bean = new Bean(); [EOL]     assertEquals("17", mapper.writeValueAsString(bean)); [EOL] }
public void testBuilderReplacement() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerModule(new ModuleImpl(new BuilderModifier(new BogusBeanSerializer(17)))); [EOL]     Bean bean = new Bean(); [EOL]     assertEquals("17", mapper.writeValueAsString(bean)); [EOL] }
public void testBuilderReplacement() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerModule(new ModuleImpl(new BuilderModifier(new BogusBeanSerializer(17)))); [EOL]     Bean bean = new Bean(); [EOL]     assertEquals("17", mapper.writeValueAsString(bean)); [EOL] }
public void testSimpleRenamed2() { [EOL]     POJOPropertiesCollector coll = collector(mapper, RenamedProperties2.class, true); [EOL]     Map<String, POJOPropertyBuilder> props = coll.getPropertyMap(); [EOL]     assertEquals(1, props.size()); [EOL]     POJOPropertyBuilder prop = props.get("renamed"); [EOL]     assertNotNull(prop); [EOL]     assertTrue(prop.hasSetter()); [EOL]     assertTrue(prop.hasGetter()); [EOL]     assertFalse(prop.hasField()); [EOL] }
public void testSimpleRenamed2() { [EOL]     POJOPropertiesCollector coll = collector(mapper, RenamedProperties2.class, true); [EOL]     Map<String, POJOPropertyBuilder> props = coll.getPropertyMap(); [EOL]     assertEquals(1, props.size()); [EOL]     POJOPropertyBuilder prop = props.get("renamed"); [EOL]     assertNotNull(prop); [EOL]     assertTrue(prop.hasSetter()); [EOL]     assertTrue(prop.hasGetter()); [EOL]     assertFalse(prop.hasField()); [EOL] }
public void testSimpleRenamed2() { [EOL]     POJOPropertiesCollector coll = collector(mapper, RenamedProperties2.class, true); [EOL]     Map<String, POJOPropertyBuilder> props = coll.getPropertyMap(); [EOL]     assertEquals(1, props.size()); [EOL]     POJOPropertyBuilder prop = props.get("renamed"); [EOL]     assertNotNull(prop); [EOL]     assertTrue(prop.hasSetter()); [EOL]     assertTrue(prop.hasGetter()); [EOL]     assertFalse(prop.hasField()); [EOL] }
public void testWithList() throws Exception { [EOL]     assertEquals("13", MAPPER.writeValueAsString(new ListAsNumber())); [EOL] }
public void testWithList() throws Exception { [EOL]     assertEquals("13", MAPPER.writeValueAsString(new ListAsNumber())); [EOL] }
public void testWithList() throws Exception { [EOL]     assertEquals("13", MAPPER.writeValueAsString(new ListAsNumber())); [EOL] }
public void testWithList() throws Exception { [EOL]     assertEquals("13", MAPPER.writeValueAsString(new ListAsNumber())); [EOL] }
public void testSimpleRenamed2() { [EOL]     POJOPropertiesCollector coll = collector(mapper, RenamedProperties2.class, true); [EOL]     Map<String, POJOPropertyBuilder> props = coll.getPropertyMap(); [EOL]     assertEquals(1, props.size()); [EOL]     POJOPropertyBuilder prop = props.get("renamed"); [EOL]     assertNotNull(prop); [EOL]     assertTrue(prop.hasSetter()); [EOL]     assertTrue(prop.hasGetter()); [EOL]     assertFalse(prop.hasField()); [EOL] }
public void testSimpleRenamed2() { [EOL]     POJOPropertiesCollector coll = collector(mapper, RenamedProperties2.class, true); [EOL]     Map<String, POJOPropertyBuilder> props = coll.getPropertyMap(); [EOL]     assertEquals(1, props.size()); [EOL]     POJOPropertyBuilder prop = props.get("renamed"); [EOL]     assertNotNull(prop); [EOL]     assertTrue(prop.hasSetter()); [EOL]     assertTrue(prop.hasGetter()); [EOL]     assertFalse(prop.hasField()); [EOL] }
public void testSimpleRenamed2() { [EOL]     POJOPropertiesCollector coll = collector(mapper, RenamedProperties2.class, true); [EOL]     Map<String, POJOPropertyBuilder> props = coll.getPropertyMap(); [EOL]     assertEquals(1, props.size()); [EOL]     POJOPropertyBuilder prop = props.get("renamed"); [EOL]     assertNotNull(prop); [EOL]     assertTrue(prop.hasSetter()); [EOL]     assertTrue(prop.hasGetter()); [EOL]     assertFalse(prop.hasField()); [EOL] }
public void testSimpleRenamed2() { [EOL]     POJOPropertiesCollector coll = collector(mapper, RenamedProperties2.class, true); [EOL]     Map<String, POJOPropertyBuilder> props = coll.getPropertyMap(); [EOL]     assertEquals(1, props.size()); [EOL]     POJOPropertyBuilder prop = props.get("renamed"); [EOL]     assertNotNull(prop); [EOL]     assertTrue(prop.hasSetter()); [EOL]     assertTrue(prop.hasGetter()); [EOL]     assertFalse(prop.hasField()); [EOL] }
public void testSimpleRenamed2() { [EOL]     POJOPropertiesCollector coll = collector(mapper, RenamedProperties2.class, true); [EOL]     Map<String, POJOPropertyBuilder> props = coll.getPropertyMap(); [EOL]     assertEquals(1, props.size()); [EOL]     POJOPropertyBuilder prop = props.get("renamed"); [EOL]     assertNotNull(prop); [EOL]     assertTrue(prop.hasSetter()); [EOL]     assertTrue(prop.hasGetter()); [EOL]     assertFalse(prop.hasField()); [EOL] }
public void testSimpleRenamed2() { [EOL]     POJOPropertiesCollector coll = collector(mapper, RenamedProperties2.class, true); [EOL]     Map<String, POJOPropertyBuilder> props = coll.getPropertyMap(); [EOL]     assertEquals(1, props.size()); [EOL]     POJOPropertyBuilder prop = props.get("renamed"); [EOL]     assertNotNull(prop); [EOL]     assertTrue(prop.hasSetter()); [EOL]     assertTrue(prop.hasGetter()); [EOL]     assertFalse(prop.hasField()); [EOL] }
public void testSimpleRenamed2() { [EOL]     POJOPropertiesCollector coll = collector(mapper, RenamedProperties2.class, true); [EOL]     Map<String, POJOPropertyBuilder> props = coll.getPropertyMap(); [EOL]     assertEquals(1, props.size()); [EOL]     POJOPropertyBuilder prop = props.get("renamed"); [EOL]     assertNotNull(prop); [EOL]     assertTrue(prop.hasSetter()); [EOL]     assertTrue(prop.hasGetter()); [EOL]     assertFalse(prop.hasField()); [EOL] }
public void testSimpleRenamed2() { [EOL]     POJOPropertiesCollector coll = collector(mapper, RenamedProperties2.class, true); [EOL]     Map<String, POJOPropertyBuilder> props = coll.getPropertyMap(); [EOL]     assertEquals(1, props.size()); [EOL]     POJOPropertyBuilder prop = props.get("renamed"); [EOL]     assertNotNull(prop); [EOL]     assertTrue(prop.hasSetter()); [EOL]     assertTrue(prop.hasGetter()); [EOL]     assertFalse(prop.hasField()); [EOL] }
public void testSimpleRenamed2() { [EOL]     POJOPropertiesCollector coll = collector(mapper, RenamedProperties2.class, true); [EOL]     Map<String, POJOPropertyBuilder> props = coll.getPropertyMap(); [EOL]     assertEquals(1, props.size()); [EOL]     POJOPropertyBuilder prop = props.get("renamed"); [EOL]     assertNotNull(prop); [EOL]     assertTrue(prop.hasSetter()); [EOL]     assertTrue(prop.hasGetter()); [EOL]     assertFalse(prop.hasField()); [EOL] }
public void testSimpleRenamed2() { [EOL]     POJOPropertiesCollector coll = collector(mapper, RenamedProperties2.class, true); [EOL]     Map<String, POJOPropertyBuilder> props = coll.getPropertyMap(); [EOL]     assertEquals(1, props.size()); [EOL]     POJOPropertyBuilder prop = props.get("renamed"); [EOL]     assertNotNull(prop); [EOL]     assertTrue(prop.hasSetter()); [EOL]     assertTrue(prop.hasGetter()); [EOL]     assertFalse(prop.hasField()); [EOL] }
public void testSimpleRenamed2() { [EOL]     POJOPropertiesCollector coll = collector(mapper, RenamedProperties2.class, true); [EOL]     Map<String, POJOPropertyBuilder> props = coll.getPropertyMap(); [EOL]     assertEquals(1, props.size()); [EOL]     POJOPropertyBuilder prop = props.get("renamed"); [EOL]     assertNotNull(prop); [EOL]     assertTrue(prop.hasSetter()); [EOL]     assertTrue(prop.hasGetter()); [EOL]     assertFalse(prop.hasField()); [EOL] }
public void testSimpleRenamed2() { [EOL]     POJOPropertiesCollector coll = collector(mapper, RenamedProperties2.class, true); [EOL]     Map<String, POJOPropertyBuilder> props = coll.getPropertyMap(); [EOL]     assertEquals(1, props.size()); [EOL]     POJOPropertyBuilder prop = props.get("renamed"); [EOL]     assertNotNull(prop); [EOL]     assertTrue(prop.hasSetter()); [EOL]     assertTrue(prop.hasGetter()); [EOL]     assertFalse(prop.hasField()); [EOL] }
public void testSimpleRenamed2() { [EOL]     POJOPropertiesCollector coll = collector(mapper, RenamedProperties2.class, true); [EOL]     Map<String, POJOPropertyBuilder> props = coll.getPropertyMap(); [EOL]     assertEquals(1, props.size()); [EOL]     POJOPropertyBuilder prop = props.get("renamed"); [EOL]     assertNotNull(prop); [EOL]     assertTrue(prop.hasSetter()); [EOL]     assertTrue(prop.hasGetter()); [EOL]     assertFalse(prop.hasField()); [EOL] }
public void testSimpleRenamed2() { [EOL]     POJOPropertiesCollector coll = collector(mapper, RenamedProperties2.class, true); [EOL]     Map<String, POJOPropertyBuilder> props = coll.getPropertyMap(); [EOL]     assertEquals(1, props.size()); [EOL]     POJOPropertyBuilder prop = props.get("renamed"); [EOL]     assertNotNull(prop); [EOL]     assertTrue(prop.hasSetter()); [EOL]     assertTrue(prop.hasGetter()); [EOL]     assertFalse(prop.hasField()); [EOL] }
public void testSimpleRenamed2() { [EOL]     POJOPropertiesCollector coll = collector(mapper, RenamedProperties2.class, true); [EOL]     Map<String, POJOPropertyBuilder> props = coll.getPropertyMap(); [EOL]     assertEquals(1, props.size()); [EOL]     POJOPropertyBuilder prop = props.get("renamed"); [EOL]     assertNotNull(prop); [EOL]     assertTrue(prop.hasSetter()); [EOL]     assertTrue(prop.hasGetter()); [EOL]     assertFalse(prop.hasField()); [EOL] }
public void testSimpleRenamed2() { [EOL]     POJOPropertiesCollector coll = collector(mapper, RenamedProperties2.class, true); [EOL]     Map<String, POJOPropertyBuilder> props = coll.getPropertyMap(); [EOL]     assertEquals(1, props.size()); [EOL]     POJOPropertyBuilder prop = props.get("renamed"); [EOL]     assertNotNull(prop); [EOL]     assertTrue(prop.hasSetter()); [EOL]     assertTrue(prop.hasGetter()); [EOL]     assertFalse(prop.hasField()); [EOL] }
public void testSimpleRenamed2() { [EOL]     POJOPropertiesCollector coll = collector(mapper, RenamedProperties2.class, true); [EOL]     Map<String, POJOPropertyBuilder> props = coll.getPropertyMap(); [EOL]     assertEquals(1, props.size()); [EOL]     POJOPropertyBuilder prop = props.get("renamed"); [EOL]     assertNotNull(prop); [EOL]     assertTrue(prop.hasSetter()); [EOL]     assertTrue(prop.hasGetter()); [EOL]     assertFalse(prop.hasField()); [EOL] }
public void testSimpleRenamed2() { [EOL]     POJOPropertiesCollector coll = collector(mapper, RenamedProperties2.class, true); [EOL]     Map<String, POJOPropertyBuilder> props = coll.getPropertyMap(); [EOL]     assertEquals(1, props.size()); [EOL]     POJOPropertyBuilder prop = props.get("renamed"); [EOL]     assertNotNull(prop); [EOL]     assertTrue(prop.hasSetter()); [EOL]     assertTrue(prop.hasGetter()); [EOL]     assertFalse(prop.hasField()); [EOL] }
public void testSimpleRenamed2() { [EOL]     POJOPropertiesCollector coll = collector(mapper, RenamedProperties2.class, true); [EOL]     Map<String, POJOPropertyBuilder> props = coll.getPropertyMap(); [EOL]     assertEquals(1, props.size()); [EOL]     POJOPropertyBuilder prop = props.get("renamed"); [EOL]     assertNotNull(prop); [EOL]     assertTrue(prop.hasSetter()); [EOL]     assertTrue(prop.hasGetter()); [EOL]     assertFalse(prop.hasField()); [EOL] }
public void testSimpleRenamed2() { [EOL]     POJOPropertiesCollector coll = collector(mapper, RenamedProperties2.class, true); [EOL]     Map<String, POJOPropertyBuilder> props = coll.getPropertyMap(); [EOL]     assertEquals(1, props.size()); [EOL]     POJOPropertyBuilder prop = props.get("renamed"); [EOL]     assertNotNull(prop); [EOL]     assertTrue(prop.hasSetter()); [EOL]     assertTrue(prop.hasGetter()); [EOL]     assertFalse(prop.hasField()); [EOL] }
public void testSimpleRenamed2() { [EOL]     POJOPropertiesCollector coll = collector(mapper, RenamedProperties2.class, true); [EOL]     Map<String, POJOPropertyBuilder> props = coll.getPropertyMap(); [EOL]     assertEquals(1, props.size()); [EOL]     POJOPropertyBuilder prop = props.get("renamed"); [EOL]     assertNotNull(prop); [EOL]     assertTrue(prop.hasSetter()); [EOL]     assertTrue(prop.hasGetter()); [EOL]     assertFalse(prop.hasField()); [EOL] }
public void testSimpleRenamed2() { [EOL]     POJOPropertiesCollector coll = collector(mapper, RenamedProperties2.class, true); [EOL]     Map<String, POJOPropertyBuilder> props = coll.getPropertyMap(); [EOL]     assertEquals(1, props.size()); [EOL]     POJOPropertyBuilder prop = props.get("renamed"); [EOL]     assertNotNull(prop); [EOL]     assertTrue(prop.hasSetter()); [EOL]     assertTrue(prop.hasGetter()); [EOL]     assertFalse(prop.hasField()); [EOL] }
public void testSimpleRenamed2() { [EOL]     POJOPropertiesCollector coll = collector(mapper, RenamedProperties2.class, true); [EOL]     Map<String, POJOPropertyBuilder> props = coll.getPropertyMap(); [EOL]     assertEquals(1, props.size()); [EOL]     POJOPropertyBuilder prop = props.get("renamed"); [EOL]     assertNotNull(prop); [EOL]     assertTrue(prop.hasSetter()); [EOL]     assertTrue(prop.hasGetter()); [EOL]     assertFalse(prop.hasField()); [EOL] }
public void testSimpleRenamed2() { [EOL]     POJOPropertiesCollector coll = collector(mapper, RenamedProperties2.class, true); [EOL]     Map<String, POJOPropertyBuilder> props = coll.getPropertyMap(); [EOL]     assertEquals(1, props.size()); [EOL]     POJOPropertyBuilder prop = props.get("renamed"); [EOL]     assertNotNull(prop); [EOL]     assertTrue(prop.hasSetter()); [EOL]     assertTrue(prop.hasGetter()); [EOL]     assertFalse(prop.hasField()); [EOL] }
public void testSimpleRenamed2() { [EOL]     POJOPropertiesCollector coll = collector(mapper, RenamedProperties2.class, true); [EOL]     Map<String, POJOPropertyBuilder> props = coll.getPropertyMap(); [EOL]     assertEquals(1, props.size()); [EOL]     POJOPropertyBuilder prop = props.get("renamed"); [EOL]     assertNotNull(prop); [EOL]     assertTrue(prop.hasSetter()); [EOL]     assertTrue(prop.hasGetter()); [EOL]     assertFalse(prop.hasField()); [EOL] }
public void testSimpleRenamed2() { [EOL]     POJOPropertiesCollector coll = collector(mapper, RenamedProperties2.class, true); [EOL]     Map<String, POJOPropertyBuilder> props = coll.getPropertyMap(); [EOL]     assertEquals(1, props.size()); [EOL]     POJOPropertyBuilder prop = props.get("renamed"); [EOL]     assertNotNull(prop); [EOL]     assertTrue(prop.hasSetter()); [EOL]     assertTrue(prop.hasGetter()); [EOL]     assertFalse(prop.hasField()); [EOL] }
public void testSimpleRenamed2() { [EOL]     POJOPropertiesCollector coll = collector(mapper, RenamedProperties2.class, true); [EOL]     Map<String, POJOPropertyBuilder> props = coll.getPropertyMap(); [EOL]     assertEquals(1, props.size()); [EOL]     POJOPropertyBuilder prop = props.get("renamed"); [EOL]     assertNotNull(prop); [EOL]     assertTrue(prop.hasSetter()); [EOL]     assertTrue(prop.hasGetter()); [EOL]     assertFalse(prop.hasField()); [EOL] }
public void testSimpleRenamed2() { [EOL]     POJOPropertiesCollector coll = collector(mapper, RenamedProperties2.class, true); [EOL]     Map<String, POJOPropertyBuilder> props = coll.getPropertyMap(); [EOL]     assertEquals(1, props.size()); [EOL]     POJOPropertyBuilder prop = props.get("renamed"); [EOL]     assertNotNull(prop); [EOL]     assertTrue(prop.hasSetter()); [EOL]     assertTrue(prop.hasGetter()); [EOL]     assertFalse(prop.hasField()); [EOL] }
public void testSimpleRenamed2() { [EOL]     POJOPropertiesCollector coll = collector(mapper, RenamedProperties2.class, true); [EOL]     Map<String, POJOPropertyBuilder> props = coll.getPropertyMap(); [EOL]     assertEquals(1, props.size()); [EOL]     POJOPropertyBuilder prop = props.get("renamed"); [EOL]     assertNotNull(prop); [EOL]     assertTrue(prop.hasSetter()); [EOL]     assertTrue(prop.hasGetter()); [EOL]     assertFalse(prop.hasField()); [EOL] }
public void testSimpleRenamed2() { [EOL]     POJOPropertiesCollector coll = collector(mapper, RenamedProperties2.class, true); [EOL]     Map<String, POJOPropertyBuilder> props = coll.getPropertyMap(); [EOL]     assertEquals(1, props.size()); [EOL]     POJOPropertyBuilder prop = props.get("renamed"); [EOL]     assertNotNull(prop); [EOL]     assertTrue(prop.hasSetter()); [EOL]     assertTrue(prop.hasGetter()); [EOL]     assertFalse(prop.hasField()); [EOL] }
public void testSimpleRenamed2() { [EOL]     POJOPropertiesCollector coll = collector(mapper, RenamedProperties2.class, true); [EOL]     Map<String, POJOPropertyBuilder> props = coll.getPropertyMap(); [EOL]     assertEquals(1, props.size()); [EOL]     POJOPropertyBuilder prop = props.get("renamed"); [EOL]     assertNotNull(prop); [EOL]     assertTrue(prop.hasSetter()); [EOL]     assertTrue(prop.hasGetter()); [EOL]     assertFalse(prop.hasField()); [EOL] }
public void testSimpleRenamed2() { [EOL]     POJOPropertiesCollector coll = collector(mapper, RenamedProperties2.class, true); [EOL]     Map<String, POJOPropertyBuilder> props = coll.getPropertyMap(); [EOL]     assertEquals(1, props.size()); [EOL]     POJOPropertyBuilder prop = props.get("renamed"); [EOL]     assertNotNull(prop); [EOL]     assertTrue(prop.hasSetter()); [EOL]     assertTrue(prop.hasGetter()); [EOL]     assertFalse(prop.hasField()); [EOL] }
public void testSimpleRenamed2() { [EOL]     POJOPropertiesCollector coll = collector(mapper, RenamedProperties2.class, true); [EOL]     Map<String, POJOPropertyBuilder> props = coll.getPropertyMap(); [EOL]     assertEquals(1, props.size()); [EOL]     POJOPropertyBuilder prop = props.get("renamed"); [EOL]     assertNotNull(prop); [EOL]     assertTrue(prop.hasSetter()); [EOL]     assertTrue(prop.hasGetter()); [EOL]     assertFalse(prop.hasField()); [EOL] }
public void testSimpleRenamed2() { [EOL]     POJOPropertiesCollector coll = collector(mapper, RenamedProperties2.class, true); [EOL]     Map<String, POJOPropertyBuilder> props = coll.getPropertyMap(); [EOL]     assertEquals(1, props.size()); [EOL]     POJOPropertyBuilder prop = props.get("renamed"); [EOL]     assertNotNull(prop); [EOL]     assertTrue(prop.hasSetter()); [EOL]     assertTrue(prop.hasGetter()); [EOL]     assertFalse(prop.hasField()); [EOL] }
public void testSimpleRenamed2() { [EOL]     POJOPropertiesCollector coll = collector(mapper, RenamedProperties2.class, true); [EOL]     Map<String, POJOPropertyBuilder> props = coll.getPropertyMap(); [EOL]     assertEquals(1, props.size()); [EOL]     POJOPropertyBuilder prop = props.get("renamed"); [EOL]     assertNotNull(prop); [EOL]     assertTrue(prop.hasSetter()); [EOL]     assertTrue(prop.hasGetter()); [EOL]     assertFalse(prop.hasField()); [EOL] }
public void testSimpleRenamed2() { [EOL]     POJOPropertiesCollector coll = collector(mapper, RenamedProperties2.class, true); [EOL]     Map<String, POJOPropertyBuilder> props = coll.getPropertyMap(); [EOL]     assertEquals(1, props.size()); [EOL]     POJOPropertyBuilder prop = props.get("renamed"); [EOL]     assertNotNull(prop); [EOL]     assertTrue(prop.hasSetter()); [EOL]     assertTrue(prop.hasGetter()); [EOL]     assertFalse(prop.hasField()); [EOL] }
public void testSimpleRenamed2() { [EOL]     POJOPropertiesCollector coll = collector(mapper, RenamedProperties2.class, true); [EOL]     Map<String, POJOPropertyBuilder> props = coll.getPropertyMap(); [EOL]     assertEquals(1, props.size()); [EOL]     POJOPropertyBuilder prop = props.get("renamed"); [EOL]     assertNotNull(prop); [EOL]     assertTrue(prop.hasSetter()); [EOL]     assertTrue(prop.hasGetter()); [EOL]     assertFalse(prop.hasField()); [EOL] }
public void testJson() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setPropertyNamingStrategy(new LcStrategy()); [EOL]     RenamedCollectionBean foo = mapper.readValue("{\"thevalues\":[\"a\"]}", RenamedCollectionBean.class); [EOL]     assertNotNull(foo.getTheVALUEs()); [EOL]     assertEquals(1, foo.getTheVALUEs().size()); [EOL]     assertEquals("a", foo.getTheVALUEs().get(0)); [EOL] }
public void testJson() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setPropertyNamingStrategy(new LcStrategy()); [EOL]     RenamedCollectionBean foo = mapper.readValue("{\"thevalues\":[\"a\"]}", RenamedCollectionBean.class); [EOL]     assertNotNull(foo.getTheVALUEs()); [EOL]     assertEquals(1, foo.getTheVALUEs().size()); [EOL]     assertEquals("a", foo.getTheVALUEs().get(0)); [EOL] }
public void testJson() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setPropertyNamingStrategy(new LcStrategy()); [EOL]     RenamedCollectionBean foo = mapper.readValue("{\"thevalues\":[\"a\"]}", RenamedCollectionBean.class); [EOL]     assertNotNull(foo.getTheVALUEs()); [EOL]     assertEquals(1, foo.getTheVALUEs().size()); [EOL]     assertEquals("a", foo.getTheVALUEs().get(0)); [EOL] }
public void testJson() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setPropertyNamingStrategy(new LcStrategy()); [EOL]     RenamedCollectionBean foo = mapper.readValue("{\"thevalues\":[\"a\"]}", RenamedCollectionBean.class); [EOL]     assertNotNull(foo.getTheVALUEs()); [EOL]     assertEquals(1, foo.getTheVALUEs().size()); [EOL]     assertEquals("a", foo.getTheVALUEs().get(0)); [EOL] }
public void testJson() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setPropertyNamingStrategy(new LcStrategy()); [EOL]     RenamedCollectionBean foo = mapper.readValue("{\"thevalues\":[\"a\"]}", RenamedCollectionBean.class); [EOL]     assertNotNull(foo.getTheVALUEs()); [EOL]     assertEquals(1, foo.getTheVALUEs().size()); [EOL]     assertEquals("a", foo.getTheVALUEs().get(0)); [EOL] }
public void testJson() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setPropertyNamingStrategy(new LcStrategy()); [EOL]     RenamedCollectionBean foo = mapper.readValue("{\"thevalues\":[\"a\"]}", RenamedCollectionBean.class); [EOL]     assertNotNull(foo.getTheVALUEs()); [EOL]     assertEquals(1, foo.getTheVALUEs().size()); [EOL]     assertEquals("a", foo.getTheVALUEs().get(0)); [EOL] }
public void testJson() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setPropertyNamingStrategy(new LcStrategy()); [EOL]     RenamedCollectionBean foo = mapper.readValue("{\"thevalues\":[\"a\"]}", RenamedCollectionBean.class); [EOL]     assertNotNull(foo.getTheVALUEs()); [EOL]     assertEquals(1, foo.getTheVALUEs().size()); [EOL]     assertEquals("a", foo.getTheVALUEs().get(0)); [EOL] }
public void testJson() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setPropertyNamingStrategy(new LcStrategy()); [EOL]     RenamedCollectionBean foo = mapper.readValue("{\"thevalues\":[\"a\"]}", RenamedCollectionBean.class); [EOL]     assertNotNull(foo.getTheVALUEs()); [EOL]     assertEquals(1, foo.getTheVALUEs().size()); [EOL]     assertEquals("a", foo.getTheVALUEs().get(0)); [EOL] }
public void testSimpleRenamed2() { [EOL]     POJOPropertiesCollector coll = collector(mapper, RenamedProperties2.class, true); [EOL]     Map<String, POJOPropertyBuilder> props = coll.getPropertyMap(); [EOL]     assertEquals(1, props.size()); [EOL]     POJOPropertyBuilder prop = props.get("renamed"); [EOL]     assertNotNull(prop); [EOL]     assertTrue(prop.hasSetter()); [EOL]     assertTrue(prop.hasGetter()); [EOL]     assertFalse(prop.hasField()); [EOL] }
public void testSimpleRenamed2() { [EOL]     POJOPropertiesCollector coll = collector(mapper, RenamedProperties2.class, true); [EOL]     Map<String, POJOPropertyBuilder> props = coll.getPropertyMap(); [EOL]     assertEquals(1, props.size()); [EOL]     POJOPropertyBuilder prop = props.get("renamed"); [EOL]     assertNotNull(prop); [EOL]     assertTrue(prop.hasSetter()); [EOL]     assertTrue(prop.hasGetter()); [EOL]     assertFalse(prop.hasField()); [EOL] }
public void testSimpleRenamed2() { [EOL]     POJOPropertiesCollector coll = collector(mapper, RenamedProperties2.class, true); [EOL]     Map<String, POJOPropertyBuilder> props = coll.getPropertyMap(); [EOL]     assertEquals(1, props.size()); [EOL]     POJOPropertyBuilder prop = props.get("renamed"); [EOL]     assertNotNull(prop); [EOL]     assertTrue(prop.hasSetter()); [EOL]     assertTrue(prop.hasGetter()); [EOL]     assertFalse(prop.hasField()); [EOL] }
public void testSimpleRenamed2() { [EOL]     POJOPropertiesCollector coll = collector(mapper, RenamedProperties2.class, true); [EOL]     Map<String, POJOPropertyBuilder> props = coll.getPropertyMap(); [EOL]     assertEquals(1, props.size()); [EOL]     POJOPropertyBuilder prop = props.get("renamed"); [EOL]     assertNotNull(prop); [EOL]     assertTrue(prop.hasSetter()); [EOL]     assertTrue(prop.hasGetter()); [EOL]     assertFalse(prop.hasField()); [EOL] }
public void testSimpleRenamed2() { [EOL]     POJOPropertiesCollector coll = collector(mapper, RenamedProperties2.class, true); [EOL]     Map<String, POJOPropertyBuilder> props = coll.getPropertyMap(); [EOL]     assertEquals(1, props.size()); [EOL]     POJOPropertyBuilder prop = props.get("renamed"); [EOL]     assertNotNull(prop); [EOL]     assertTrue(prop.hasSetter()); [EOL]     assertTrue(prop.hasGetter()); [EOL]     assertFalse(prop.hasField()); [EOL] }
public void testSimpleRenamed2() { [EOL]     POJOPropertiesCollector coll = collector(mapper, RenamedProperties2.class, true); [EOL]     Map<String, POJOPropertyBuilder> props = coll.getPropertyMap(); [EOL]     assertEquals(1, props.size()); [EOL]     POJOPropertyBuilder prop = props.get("renamed"); [EOL]     assertNotNull(prop); [EOL]     assertTrue(prop.hasSetter()); [EOL]     assertTrue(prop.hasGetter()); [EOL]     assertFalse(prop.hasField()); [EOL] }
public void testSimpleRenamed2() { [EOL]     POJOPropertiesCollector coll = collector(mapper, RenamedProperties2.class, true); [EOL]     Map<String, POJOPropertyBuilder> props = coll.getPropertyMap(); [EOL]     assertEquals(1, props.size()); [EOL]     POJOPropertyBuilder prop = props.get("renamed"); [EOL]     assertNotNull(prop); [EOL]     assertTrue(prop.hasSetter()); [EOL]     assertTrue(prop.hasGetter()); [EOL]     assertFalse(prop.hasField()); [EOL] }
public void testSimpleRenamed2() { [EOL]     POJOPropertiesCollector coll = collector(mapper, RenamedProperties2.class, true); [EOL]     Map<String, POJOPropertyBuilder> props = coll.getPropertyMap(); [EOL]     assertEquals(1, props.size()); [EOL]     POJOPropertyBuilder prop = props.get("renamed"); [EOL]     assertNotNull(prop); [EOL]     assertTrue(prop.hasSetter()); [EOL]     assertTrue(prop.hasGetter()); [EOL]     assertFalse(prop.hasField()); [EOL] }
public void testDeserializationWithString() throws Exception { [EOL]     Inter inter = objectReader(Inter.class).readValue("\"a,b,c,d\""); [EOL]     assertTrue(inter instanceof LegacyInter); [EOL]     assertEquals(Arrays.asList("a", "b", "c", "d"), ((MyInter) inter).blah); [EOL] }
public void testDeserializationWithString() throws Exception { [EOL]     Inter inter = objectReader(Inter.class).readValue("\"a,b,c,d\""); [EOL]     assertTrue(inter instanceof LegacyInter); [EOL]     assertEquals(Arrays.asList("a", "b", "c", "d"), ((MyInter) inter).blah); [EOL] }
public void testDeserializationWithString() throws Exception { [EOL]     Inter inter = objectReader(Inter.class).readValue("\"a,b,c,d\""); [EOL]     assertTrue(inter instanceof LegacyInter); [EOL]     assertEquals(Arrays.asList("a", "b", "c", "d"), ((MyInter) inter).blah); [EOL] }
public void testDeserializationWithString() throws Exception { [EOL]     Inter inter = objectReader(Inter.class).readValue("\"a,b,c,d\""); [EOL]     assertTrue(inter instanceof LegacyInter); [EOL]     assertEquals(Arrays.asList("a", "b", "c", "d"), ((MyInter) inter).blah); [EOL] }
public void testDeserializationWithString() throws Exception { [EOL]     Inter inter = objectReader(Inter.class).readValue("\"a,b,c,d\""); [EOL]     assertTrue(inter instanceof LegacyInter); [EOL]     assertEquals(Arrays.asList("a", "b", "c", "d"), ((MyInter) inter).blah); [EOL] }
public void testDeserializationWithString() throws Exception { [EOL]     Inter inter = objectReader(Inter.class).readValue("\"a,b,c,d\""); [EOL]     assertTrue(inter instanceof LegacyInter); [EOL]     assertEquals(Arrays.asList("a", "b", "c", "d"), ((MyInter) inter).blah); [EOL] }
public void testUnknownHandlingIgnoreWithHandlerAndObjectReader() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.clearProblemHandlers(); [EOL]     TestBean result = mapper.reader(TestBean.class).withHandler(new MyHandler()).readValue(new StringReader(JSON_UNKNOWN_FIELD)); [EOL]     assertNotNull(result); [EOL]     assertEquals(1, result._a); [EOL]     assertEquals(-1, result._b); [EOL]     assertEquals("foo:START_ARRAY", result._unknown); [EOL] }
public void testUnknownHandlingIgnoreWithHandlerAndObjectReader() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.clearProblemHandlers(); [EOL]     TestBean result = mapper.reader(TestBean.class).withHandler(new MyHandler()).readValue(new StringReader(JSON_UNKNOWN_FIELD)); [EOL]     assertNotNull(result); [EOL]     assertEquals(1, result._a); [EOL]     assertEquals(-1, result._b); [EOL]     assertEquals("foo:START_ARRAY", result._unknown); [EOL] }
public void testUnknownHandlingIgnoreWithHandlerAndObjectReader() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.clearProblemHandlers(); [EOL]     TestBean result = mapper.reader(TestBean.class).withHandler(new MyHandler()).readValue(new StringReader(JSON_UNKNOWN_FIELD)); [EOL]     assertNotNull(result); [EOL]     assertEquals(1, result._a); [EOL]     assertEquals(-1, result._b); [EOL]     assertEquals("foo:START_ARRAY", result._unknown); [EOL] }
public void testUnknownHandlingIgnoreWithHandlerAndObjectReader() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.clearProblemHandlers(); [EOL]     TestBean result = mapper.reader(TestBean.class).withHandler(new MyHandler()).readValue(new StringReader(JSON_UNKNOWN_FIELD)); [EOL]     assertNotNull(result); [EOL]     assertEquals(1, result._a); [EOL]     assertEquals(-1, result._b); [EOL]     assertEquals("foo:START_ARRAY", result._unknown); [EOL] }
public void testUnknownHandlingIgnoreWithHandlerAndObjectReader() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.clearProblemHandlers(); [EOL]     TestBean result = mapper.reader(TestBean.class).withHandler(new MyHandler()).readValue(new StringReader(JSON_UNKNOWN_FIELD)); [EOL]     assertNotNull(result); [EOL]     assertEquals(1, result._a); [EOL]     assertEquals(-1, result._b); [EOL]     assertEquals("foo:START_ARRAY", result._unknown); [EOL] }
public void testFormatForParsers() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(new FactoryWithSchema()); [EOL]     MySchema s = new MySchema(); [EOL]     StringReader r = new StringReader("{}"); [EOL]     try { [EOL]         mapper.reader(s).withType(Object.class).readValue(r); [EOL]         fail("Excpected exception"); [EOL]     } catch (SchemaException e) { [EOL]         assertSame(s, e._schema); [EOL]     } [EOL] }
public void testFormatForParsers() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(new FactoryWithSchema()); [EOL]     MySchema s = new MySchema(); [EOL]     StringReader r = new StringReader("{}"); [EOL]     try { [EOL]         mapper.reader(s).withType(Object.class).readValue(r); [EOL]         fail("Excpected exception"); [EOL]     } catch (SchemaException e) { [EOL]         assertSame(s, e._schema); [EOL]     } [EOL] }
public void testFormatForParsers() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(new FactoryWithSchema()); [EOL]     MySchema s = new MySchema(); [EOL]     StringReader r = new StringReader("{}"); [EOL]     try { [EOL]         mapper.reader(s).withType(Object.class).readValue(r); [EOL]         fail("Excpected exception"); [EOL]     } catch (SchemaException e) { [EOL]         assertSame(s, e._schema); [EOL]     } [EOL] }
public void testFormatForParsers() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(new FactoryWithSchema()); [EOL]     MySchema s = new MySchema(); [EOL]     StringReader r = new StringReader("{}"); [EOL]     try { [EOL]         mapper.reader(s).withType(Object.class).readValue(r); [EOL]         fail("Excpected exception"); [EOL]     } catch (SchemaException e) { [EOL]         assertSame(s, e._schema); [EOL]     } [EOL] }
public void testFormatForParsers() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(new FactoryWithSchema()); [EOL]     MySchema s = new MySchema(); [EOL]     StringReader r = new StringReader("{}"); [EOL]     try { [EOL]         mapper.reader(s).withType(Object.class).readValue(r); [EOL]         fail("Excpected exception"); [EOL]     } catch (SchemaException e) { [EOL]         assertSame(s, e._schema); [EOL]     } [EOL] }
public void testFormatForParsers() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(new FactoryWithSchema()); [EOL]     MySchema s = new MySchema(); [EOL]     StringReader r = new StringReader("{}"); [EOL]     try { [EOL]         mapper.reader(s).withType(Object.class).readValue(r); [EOL]         fail("Excpected exception"); [EOL]     } catch (SchemaException e) { [EOL]         assertSame(s, e._schema); [EOL]     } [EOL] }
public void testFormatForParsers() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(new FactoryWithSchema()); [EOL]     MySchema s = new MySchema(); [EOL]     StringReader r = new StringReader("{}"); [EOL]     try { [EOL]         mapper.reader(s).withType(Object.class).readValue(r); [EOL]         fail("Excpected exception"); [EOL]     } catch (SchemaException e) { [EOL]         assertSame(s, e._schema); [EOL]     } [EOL] }
public void testFormatForParsers() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(new FactoryWithSchema()); [EOL]     MySchema s = new MySchema(); [EOL]     StringReader r = new StringReader("{}"); [EOL]     try { [EOL]         mapper.reader(s).withType(Object.class).readValue(r); [EOL]         fail("Excpected exception"); [EOL]     } catch (SchemaException e) { [EOL]         assertSame(s, e._schema); [EOL]     } [EOL] }
public void testUnknownHandlingIgnoreWithHandlerAndObjectReader() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.clearProblemHandlers(); [EOL]     TestBean result = mapper.reader(TestBean.class).withHandler(new MyHandler()).readValue(new StringReader(JSON_UNKNOWN_FIELD)); [EOL]     assertNotNull(result); [EOL]     assertEquals(1, result._a); [EOL]     assertEquals(-1, result._b); [EOL]     assertEquals("foo:START_ARRAY", result._unknown); [EOL] }
public void testUnknownHandlingIgnoreWithHandlerAndObjectReader() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.clearProblemHandlers(); [EOL]     TestBean result = mapper.reader(TestBean.class).withHandler(new MyHandler()).readValue(new StringReader(JSON_UNKNOWN_FIELD)); [EOL]     assertNotNull(result); [EOL]     assertEquals(1, result._a); [EOL]     assertEquals(-1, result._b); [EOL]     assertEquals("foo:START_ARRAY", result._unknown); [EOL] }
public void testUnknownHandlingIgnoreWithHandlerAndObjectReader() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.clearProblemHandlers(); [EOL]     TestBean result = mapper.reader(TestBean.class).withHandler(new MyHandler()).readValue(new StringReader(JSON_UNKNOWN_FIELD)); [EOL]     assertNotNull(result); [EOL]     assertEquals(1, result._a); [EOL]     assertEquals(-1, result._b); [EOL]     assertEquals("foo:START_ARRAY", result._unknown); [EOL] }
public void testLongArrayToX() throws Exception { [EOL]     long[] data = longs(); [EOL]     verifyLongArrayConversion(data, byte[].class); [EOL]     verifyLongArrayConversion(data, short[].class); [EOL]     verifyLongArrayConversion(data, int[].class); [EOL]     List<Number> expNums = _numberList(data, data.length); [EOL]     List<Long> actNums = mapper.convertValue(data, new TypeReference<List<Long>>() { [EOL]     }); [EOL]     assertEquals(expNums, actNums); [EOL] }
public void testSubTypesFor356() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     Version v = mapper.version(); [EOL]     if (v.getMajorVersion() == 1 && v.getMinorVersion() == 6) { [EOL]         System.err.println("Note: skipping test for Jackson 1.6"); [EOL]         return; [EOL]     } [EOL]     JSONResponse<List<Parent>> input = new JSONResponse<List<Parent>>(); [EOL]     List<Parent> embedded = new ArrayList<Parent>(); [EOL]     embedded.add(new Child1()); [EOL]     embedded.add(new Child2()); [EOL]     input.setResult(embedded); [EOL]     mapper.configure(MapperFeature.USE_STATIC_TYPING, true); [EOL]     JavaType rootType = TypeFactory.defaultInstance().constructType(new TypeReference<JSONResponse<List<Parent>>>() { [EOL]     }); [EOL]     byte[] json = mapper.writerWithType(rootType).writeValueAsBytes(input); [EOL]     JSONResponse<List<Parent>> out = mapper.readValue(json, 0, json.length, rootType); [EOL]     List<Parent> deserializedContent = (List<Parent>) out.getResult(); [EOL]     assertEquals(2, deserializedContent.size()); [EOL]     assertTrue(deserializedContent.get(0) instanceof Parent); [EOL]     assertTrue(deserializedContent.get(0) instanceof Child1); [EOL]     assertFalse(deserializedContent.get(0) instanceof Child2); [EOL]     assertTrue(deserializedContent.get(1) instanceof Child2); [EOL]     assertFalse(deserializedContent.get(1) instanceof Child1); [EOL]     assertEquals("PARENT", ((Child1) deserializedContent.get(0)).parentContent); [EOL]     assertEquals("PARENT", ((Child2) deserializedContent.get(1)).parentContent); [EOL]     assertEquals("CHILD1", ((Child1) deserializedContent.get(0)).childContent1); [EOL]     assertEquals("CHILD2", ((Child2) deserializedContent.get(1)).childContent2); [EOL] }
public void testSubTypesFor356() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     Version v = mapper.version(); [EOL]     if (v.getMajorVersion() == 1 && v.getMinorVersion() == 6) { [EOL]         System.err.println("Note: skipping test for Jackson 1.6"); [EOL]         return; [EOL]     } [EOL]     JSONResponse<List<Parent>> input = new JSONResponse<List<Parent>>(); [EOL]     List<Parent> embedded = new ArrayList<Parent>(); [EOL]     embedded.add(new Child1()); [EOL]     embedded.add(new Child2()); [EOL]     input.setResult(embedded); [EOL]     mapper.configure(MapperFeature.USE_STATIC_TYPING, true); [EOL]     JavaType rootType = TypeFactory.defaultInstance().constructType(new TypeReference<JSONResponse<List<Parent>>>() { [EOL]     }); [EOL]     byte[] json = mapper.writerWithType(rootType).writeValueAsBytes(input); [EOL]     JSONResponse<List<Parent>> out = mapper.readValue(json, 0, json.length, rootType); [EOL]     List<Parent> deserializedContent = (List<Parent>) out.getResult(); [EOL]     assertEquals(2, deserializedContent.size()); [EOL]     assertTrue(deserializedContent.get(0) instanceof Parent); [EOL]     assertTrue(deserializedContent.get(0) instanceof Child1); [EOL]     assertFalse(deserializedContent.get(0) instanceof Child2); [EOL]     assertTrue(deserializedContent.get(1) instanceof Child2); [EOL]     assertFalse(deserializedContent.get(1) instanceof Child1); [EOL]     assertEquals("PARENT", ((Child1) deserializedContent.get(0)).parentContent); [EOL]     assertEquals("PARENT", ((Child2) deserializedContent.get(1)).parentContent); [EOL]     assertEquals("CHILD1", ((Child1) deserializedContent.get(0)).childContent1); [EOL]     assertEquals("CHILD2", ((Child2) deserializedContent.get(1)).childContent2); [EOL] }
public void testJavaType() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     TypeFactory tf = TypeFactory.defaultInstance(); [EOL]     String json = mapper.writeValueAsString(tf.constructType(String.class)); [EOL]     assertEquals(quote(java.lang.String.class.getName()), json); [EOL]     JavaType t = mapper.readValue(json, JavaType.class); [EOL]     assertNotNull(t); [EOL]     assertEquals(String.class, t.getRawClass()); [EOL] }
public void testDateWithJsonFormat() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     String json; [EOL]     mapper.disable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS); [EOL]     json = mapper.writeValueAsString(new DateAsNumberBean(0L)); [EOL]     assertEquals("{\"date\":0}", json); [EOL]     mapper.enable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS); [EOL]     json = mapper.writer().with(getUTCTimeZone()).writeValueAsString(new DateAsStringBean(0L)); [EOL]     assertEquals("{\"date\":\"1970-01-01\"}", json); [EOL]     json = mapper.writeValueAsString(new DateInCETBean(0L)); [EOL]     assertEquals("{\"date\":\"1970-01-01,01:00\"}", json); [EOL] }
public void testDateWithJsonFormat() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     String json; [EOL]     mapper.disable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS); [EOL]     json = mapper.writeValueAsString(new DateAsNumberBean(0L)); [EOL]     assertEquals("{\"date\":0}", json); [EOL]     mapper.enable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS); [EOL]     json = mapper.writer().with(getUTCTimeZone()).writeValueAsString(new DateAsStringBean(0L)); [EOL]     assertEquals("{\"date\":\"1970-01-01\"}", json); [EOL]     json = mapper.writeValueAsString(new DateInCETBean(0L)); [EOL]     assertEquals("{\"date\":\"1970-01-01,01:00\"}", json); [EOL] }
public void testSubTypesFor356() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     Version v = mapper.version(); [EOL]     if (v.getMajorVersion() == 1 && v.getMinorVersion() == 6) { [EOL]         System.err.println("Note: skipping test for Jackson 1.6"); [EOL]         return; [EOL]     } [EOL]     JSONResponse<List<Parent>> input = new JSONResponse<List<Parent>>(); [EOL]     List<Parent> embedded = new ArrayList<Parent>(); [EOL]     embedded.add(new Child1()); [EOL]     embedded.add(new Child2()); [EOL]     input.setResult(embedded); [EOL]     mapper.configure(MapperFeature.USE_STATIC_TYPING, true); [EOL]     JavaType rootType = TypeFactory.defaultInstance().constructType(new TypeReference<JSONResponse<List<Parent>>>() { [EOL]     }); [EOL]     byte[] json = mapper.writerWithType(rootType).writeValueAsBytes(input); [EOL]     JSONResponse<List<Parent>> out = mapper.readValue(json, 0, json.length, rootType); [EOL]     List<Parent> deserializedContent = (List<Parent>) out.getResult(); [EOL]     assertEquals(2, deserializedContent.size()); [EOL]     assertTrue(deserializedContent.get(0) instanceof Parent); [EOL]     assertTrue(deserializedContent.get(0) instanceof Child1); [EOL]     assertFalse(deserializedContent.get(0) instanceof Child2); [EOL]     assertTrue(deserializedContent.get(1) instanceof Child2); [EOL]     assertFalse(deserializedContent.get(1) instanceof Child1); [EOL]     assertEquals("PARENT", ((Child1) deserializedContent.get(0)).parentContent); [EOL]     assertEquals("PARENT", ((Child2) deserializedContent.get(1)).parentContent); [EOL]     assertEquals("CHILD1", ((Child1) deserializedContent.get(0)).childContent1); [EOL]     assertEquals("CHILD2", ((Child2) deserializedContent.get(1)).childContent2); [EOL] }
public void testSubTypesFor356() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     Version v = mapper.version(); [EOL]     if (v.getMajorVersion() == 1 && v.getMinorVersion() == 6) { [EOL]         System.err.println("Note: skipping test for Jackson 1.6"); [EOL]         return; [EOL]     } [EOL]     JSONResponse<List<Parent>> input = new JSONResponse<List<Parent>>(); [EOL]     List<Parent> embedded = new ArrayList<Parent>(); [EOL]     embedded.add(new Child1()); [EOL]     embedded.add(new Child2()); [EOL]     input.setResult(embedded); [EOL]     mapper.configure(MapperFeature.USE_STATIC_TYPING, true); [EOL]     JavaType rootType = TypeFactory.defaultInstance().constructType(new TypeReference<JSONResponse<List<Parent>>>() { [EOL]     }); [EOL]     byte[] json = mapper.writerWithType(rootType).writeValueAsBytes(input); [EOL]     JSONResponse<List<Parent>> out = mapper.readValue(json, 0, json.length, rootType); [EOL]     List<Parent> deserializedContent = (List<Parent>) out.getResult(); [EOL]     assertEquals(2, deserializedContent.size()); [EOL]     assertTrue(deserializedContent.get(0) instanceof Parent); [EOL]     assertTrue(deserializedContent.get(0) instanceof Child1); [EOL]     assertFalse(deserializedContent.get(0) instanceof Child2); [EOL]     assertTrue(deserializedContent.get(1) instanceof Child2); [EOL]     assertFalse(deserializedContent.get(1) instanceof Child1); [EOL]     assertEquals("PARENT", ((Child1) deserializedContent.get(0)).parentContent); [EOL]     assertEquals("PARENT", ((Child2) deserializedContent.get(1)).parentContent); [EOL]     assertEquals("CHILD1", ((Child1) deserializedContent.get(0)).childContent1); [EOL]     assertEquals("CHILD2", ((Child2) deserializedContent.get(1)).childContent2); [EOL] }
public void testSubTypesFor356() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     Version v = mapper.version(); [EOL]     if (v.getMajorVersion() == 1 && v.getMinorVersion() == 6) { [EOL]         System.err.println("Note: skipping test for Jackson 1.6"); [EOL]         return; [EOL]     } [EOL]     JSONResponse<List<Parent>> input = new JSONResponse<List<Parent>>(); [EOL]     List<Parent> embedded = new ArrayList<Parent>(); [EOL]     embedded.add(new Child1()); [EOL]     embedded.add(new Child2()); [EOL]     input.setResult(embedded); [EOL]     mapper.configure(MapperFeature.USE_STATIC_TYPING, true); [EOL]     JavaType rootType = TypeFactory.defaultInstance().constructType(new TypeReference<JSONResponse<List<Parent>>>() { [EOL]     }); [EOL]     byte[] json = mapper.writerWithType(rootType).writeValueAsBytes(input); [EOL]     JSONResponse<List<Parent>> out = mapper.readValue(json, 0, json.length, rootType); [EOL]     List<Parent> deserializedContent = (List<Parent>) out.getResult(); [EOL]     assertEquals(2, deserializedContent.size()); [EOL]     assertTrue(deserializedContent.get(0) instanceof Parent); [EOL]     assertTrue(deserializedContent.get(0) instanceof Child1); [EOL]     assertFalse(deserializedContent.get(0) instanceof Child2); [EOL]     assertTrue(deserializedContent.get(1) instanceof Child2); [EOL]     assertFalse(deserializedContent.get(1) instanceof Child1); [EOL]     assertEquals("PARENT", ((Child1) deserializedContent.get(0)).parentContent); [EOL]     assertEquals("PARENT", ((Child2) deserializedContent.get(1)).parentContent); [EOL]     assertEquals("CHILD1", ((Child1) deserializedContent.get(0)).childContent1); [EOL]     assertEquals("CHILD2", ((Child2) deserializedContent.get(1)).childContent2); [EOL] }
public void testIncompatibleRootType() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     SubType bean = new SubType(); [EOL]     ObjectWriter w = mapper.writerWithType(HashMap.class); [EOL]     try { [EOL]         w.writeValueAsString(bean); [EOL]         fail("Should have failed due to incompatible type"); [EOL]     } catch (JsonProcessingException e) { [EOL]         verifyException(e, "Incompatible types"); [EOL]     } [EOL] }
public void testIncompatibleRootType() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     SubType bean = new SubType(); [EOL]     ObjectWriter w = mapper.writerWithType(HashMap.class); [EOL]     try { [EOL]         w.writeValueAsString(bean); [EOL]         fail("Should have failed due to incompatible type"); [EOL]     } catch (JsonProcessingException e) { [EOL]         verifyException(e, "Incompatible types"); [EOL]     } [EOL] }
public void testIncompatibleRootType() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     SubType bean = new SubType(); [EOL]     ObjectWriter w = mapper.writerWithType(HashMap.class); [EOL]     try { [EOL]         w.writeValueAsString(bean); [EOL]         fail("Should have failed due to incompatible type"); [EOL]     } catch (JsonProcessingException e) { [EOL]         verifyException(e, "Incompatible types"); [EOL]     } [EOL] }
public void testIncompatibleRootType() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     SubType bean = new SubType(); [EOL]     ObjectWriter w = mapper.writerWithType(HashMap.class); [EOL]     try { [EOL]         w.writeValueAsString(bean); [EOL]         fail("Should have failed due to incompatible type"); [EOL]     } catch (JsonProcessingException e) { [EOL]         verifyException(e, "Incompatible types"); [EOL]     } [EOL] }
public void testNonMatching() throws Exception { [EOL]     JsonNode root = _buildTree(); [EOL]     assertNull(root.findValue("boogaboo")); [EOL]     assertNull(root.findParent("boogaboo")); [EOL]     JsonNode n = root.findPath("boogaboo"); [EOL]     assertNotNull(n); [EOL]     assertTrue(n.isMissingNode()); [EOL]     assertTrue(root.findValues("boogaboo").isEmpty()); [EOL]     assertTrue(root.findParents("boogaboo").isEmpty()); [EOL] }
public void testNonMatching() throws Exception { [EOL]     JsonNode root = _buildTree(); [EOL]     assertNull(root.findValue("boogaboo")); [EOL]     assertNull(root.findParent("boogaboo")); [EOL]     JsonNode n = root.findPath("boogaboo"); [EOL]     assertNotNull(n); [EOL]     assertTrue(n.isMissingNode()); [EOL]     assertTrue(root.findValues("boogaboo").isEmpty()); [EOL]     assertTrue(root.findParents("boogaboo").isEmpty()); [EOL] }
public void testNonMatching() throws Exception { [EOL]     JsonNode root = _buildTree(); [EOL]     assertNull(root.findValue("boogaboo")); [EOL]     assertNull(root.findParent("boogaboo")); [EOL]     JsonNode n = root.findPath("boogaboo"); [EOL]     assertNotNull(n); [EOL]     assertTrue(n.isMissingNode()); [EOL]     assertTrue(root.findValues("boogaboo").isEmpty()); [EOL]     assertTrue(root.findParents("boogaboo").isEmpty()); [EOL] }
public void testNonMatching() throws Exception { [EOL]     JsonNode root = _buildTree(); [EOL]     assertNull(root.findValue("boogaboo")); [EOL]     assertNull(root.findParent("boogaboo")); [EOL]     JsonNode n = root.findPath("boogaboo"); [EOL]     assertNotNull(n); [EOL]     assertTrue(n.isMissingNode()); [EOL]     assertTrue(root.findValues("boogaboo").isEmpty()); [EOL]     assertTrue(root.findParents("boogaboo").isEmpty()); [EOL] }
public void testNonMatching() throws Exception { [EOL]     JsonNode root = _buildTree(); [EOL]     assertNull(root.findValue("boogaboo")); [EOL]     assertNull(root.findParent("boogaboo")); [EOL]     JsonNode n = root.findPath("boogaboo"); [EOL]     assertNotNull(n); [EOL]     assertTrue(n.isMissingNode()); [EOL]     assertTrue(root.findValues("boogaboo").isEmpty()); [EOL]     assertTrue(root.findParents("boogaboo").isEmpty()); [EOL] }
public void testClassAnnotationForLists() throws Exception { [EOL]     ConvertingBeanContainer container = objectReader(ConvertingBeanContainer.class).readValue("{\"values\":[[1,2],[3,4]]}"); [EOL]     assertNotNull(container); [EOL]     assertNotNull(container.values); [EOL]     assertEquals(2, container.values.size()); [EOL]     assertEquals(4, container.values.get(1).y); [EOL] }
public void testClassAnnotationForLists() throws Exception { [EOL]     ConvertingBeanContainer container = objectReader(ConvertingBeanContainer.class).readValue("{\"values\":[[1,2],[3,4]]}"); [EOL]     assertNotNull(container); [EOL]     assertNotNull(container.values); [EOL]     assertEquals(2, container.values.size()); [EOL]     assertEquals(4, container.values.get(1).y); [EOL] }
public void testClassAnnotationForLists() throws Exception { [EOL]     ConvertingBeanContainer container = objectReader(ConvertingBeanContainer.class).readValue("{\"values\":[[1,2],[3,4]]}"); [EOL]     assertNotNull(container); [EOL]     assertNotNull(container.values); [EOL]     assertEquals(2, container.values.size()); [EOL]     assertEquals(4, container.values.get(1).y); [EOL] }
public void testClassAnnotationForLists() throws Exception { [EOL]     ConvertingBeanContainer container = objectReader(ConvertingBeanContainer.class).readValue("{\"values\":[[1,2],[3,4]]}"); [EOL]     assertNotNull(container); [EOL]     assertNotNull(container.values); [EOL]     assertEquals(2, container.values.size()); [EOL]     assertEquals(4, container.values.get(1).y); [EOL] }
public void testBoolean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     JsonNode result = mapper.readTree("true\n"); [EOL]     assertFalse(result.isNull()); [EOL]     assertFalse(result.isNumber()); [EOL]     assertFalse(result.isTextual()); [EOL]     assertTrue(result.isBoolean()); [EOL]     assertType(result, BooleanNode.class); [EOL]     assertTrue(result.booleanValue()); [EOL]     assertEquals("true", result.asText()); [EOL]     assertFalse(result.isMissingNode()); [EOL]     assertEquals(result, BooleanNode.valueOf(true)); [EOL]     assertEquals(result, BooleanNode.getTrue()); [EOL] }
public void testBoolean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     JsonNode result = mapper.readTree("true\n"); [EOL]     assertFalse(result.isNull()); [EOL]     assertFalse(result.isNumber()); [EOL]     assertFalse(result.isTextual()); [EOL]     assertTrue(result.isBoolean()); [EOL]     assertType(result, BooleanNode.class); [EOL]     assertTrue(result.booleanValue()); [EOL]     assertEquals("true", result.asText()); [EOL]     assertFalse(result.isMissingNode()); [EOL]     assertEquals(result, BooleanNode.valueOf(true)); [EOL]     assertEquals(result, BooleanNode.getTrue()); [EOL] }
public void testBoolean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     JsonNode result = mapper.readTree("true\n"); [EOL]     assertFalse(result.isNull()); [EOL]     assertFalse(result.isNumber()); [EOL]     assertFalse(result.isTextual()); [EOL]     assertTrue(result.isBoolean()); [EOL]     assertType(result, BooleanNode.class); [EOL]     assertTrue(result.booleanValue()); [EOL]     assertEquals("true", result.asText()); [EOL]     assertFalse(result.isMissingNode()); [EOL]     assertEquals(result, BooleanNode.valueOf(true)); [EOL]     assertEquals(result, BooleanNode.getTrue()); [EOL] }
public void testBoolean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     JsonNode result = mapper.readTree("true\n"); [EOL]     assertFalse(result.isNull()); [EOL]     assertFalse(result.isNumber()); [EOL]     assertFalse(result.isTextual()); [EOL]     assertTrue(result.isBoolean()); [EOL]     assertType(result, BooleanNode.class); [EOL]     assertTrue(result.booleanValue()); [EOL]     assertEquals("true", result.asText()); [EOL]     assertFalse(result.isMissingNode()); [EOL]     assertEquals(result, BooleanNode.valueOf(true)); [EOL]     assertEquals(result, BooleanNode.getTrue()); [EOL] }
public void testBoolean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     JsonNode result = mapper.readTree("true\n"); [EOL]     assertFalse(result.isNull()); [EOL]     assertFalse(result.isNumber()); [EOL]     assertFalse(result.isTextual()); [EOL]     assertTrue(result.isBoolean()); [EOL]     assertType(result, BooleanNode.class); [EOL]     assertTrue(result.booleanValue()); [EOL]     assertEquals("true", result.asText()); [EOL]     assertFalse(result.isMissingNode()); [EOL]     assertEquals(result, BooleanNode.valueOf(true)); [EOL]     assertEquals(result, BooleanNode.getTrue()); [EOL] }
public void testBoolean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     JsonNode result = mapper.readTree("true\n"); [EOL]     assertFalse(result.isNull()); [EOL]     assertFalse(result.isNumber()); [EOL]     assertFalse(result.isTextual()); [EOL]     assertTrue(result.isBoolean()); [EOL]     assertType(result, BooleanNode.class); [EOL]     assertTrue(result.booleanValue()); [EOL]     assertEquals("true", result.asText()); [EOL]     assertFalse(result.isMissingNode()); [EOL]     assertEquals(result, BooleanNode.valueOf(true)); [EOL]     assertEquals(result, BooleanNode.getTrue()); [EOL] }
public void testBoolean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     JsonNode result = mapper.readTree("true\n"); [EOL]     assertFalse(result.isNull()); [EOL]     assertFalse(result.isNumber()); [EOL]     assertFalse(result.isTextual()); [EOL]     assertTrue(result.isBoolean()); [EOL]     assertType(result, BooleanNode.class); [EOL]     assertTrue(result.booleanValue()); [EOL]     assertEquals("true", result.asText()); [EOL]     assertFalse(result.isMissingNode()); [EOL]     assertEquals(result, BooleanNode.valueOf(true)); [EOL]     assertEquals(result, BooleanNode.getTrue()); [EOL] }
public void testBoolean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     JsonNode result = mapper.readTree("true\n"); [EOL]     assertFalse(result.isNull()); [EOL]     assertFalse(result.isNumber()); [EOL]     assertFalse(result.isTextual()); [EOL]     assertTrue(result.isBoolean()); [EOL]     assertType(result, BooleanNode.class); [EOL]     assertTrue(result.booleanValue()); [EOL]     assertEquals("true", result.asText()); [EOL]     assertFalse(result.isMissingNode()); [EOL]     assertEquals(result, BooleanNode.valueOf(true)); [EOL]     assertEquals(result, BooleanNode.getTrue()); [EOL] }
public void testRootMapAs() throws Exception { [EOL]     RootList value = new ObjectMapper().readValue("[ \"c\" ]", RootList.class); [EOL]     assertEquals(1, value.size()); [EOL]     Object v2 = value.get(0); [EOL]     assertEquals(RootStringImpl.class, v2.getClass()); [EOL]     assertEquals("c", ((RootString) v2).contents()); [EOL] }
public void testRootValueWithCustomKey() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     MapKeyMap result = m.readValue(" { \"a\": 13 } ", MapKeyMap.class); [EOL]     assertNotNull(result); [EOL]     assertNotNull(result); [EOL]     assertEquals(1, result.size()); [EOL]     Map.Entry<Object, Object> en = result.entrySet().iterator().next(); [EOL]     assertEquals(ValueClass.class, en.getValue().getClass()); [EOL]     assertEquals(13, ((ValueClass) en.getValue())._a); [EOL]     assertEquals(String[].class, en.getKey().getClass()); [EOL] }
public void testRootValueWithCustomKey() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     MapKeyMap result = m.readValue(" { \"a\": 13 } ", MapKeyMap.class); [EOL]     assertNotNull(result); [EOL]     assertNotNull(result); [EOL]     assertEquals(1, result.size()); [EOL]     Map.Entry<Object, Object> en = result.entrySet().iterator().next(); [EOL]     assertEquals(ValueClass.class, en.getValue().getClass()); [EOL]     assertEquals(13, ((ValueClass) en.getValue())._a); [EOL]     assertEquals(String[].class, en.getKey().getClass()); [EOL] }
public void testRootValueWithCustomKey() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     MapKeyMap result = m.readValue(" { \"a\": 13 } ", MapKeyMap.class); [EOL]     assertNotNull(result); [EOL]     assertNotNull(result); [EOL]     assertEquals(1, result.size()); [EOL]     Map.Entry<Object, Object> en = result.entrySet().iterator().next(); [EOL]     assertEquals(ValueClass.class, en.getValue().getClass()); [EOL]     assertEquals(13, ((ValueClass) en.getValue())._a); [EOL]     assertEquals(String[].class, en.getKey().getClass()); [EOL] }
public void testRootValueWithCustomKey() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     MapKeyMap result = m.readValue(" { \"a\": 13 } ", MapKeyMap.class); [EOL]     assertNotNull(result); [EOL]     assertNotNull(result); [EOL]     assertEquals(1, result.size()); [EOL]     Map.Entry<Object, Object> en = result.entrySet().iterator().next(); [EOL]     assertEquals(ValueClass.class, en.getValue().getClass()); [EOL]     assertEquals(13, ((ValueClass) en.getValue())._a); [EOL]     assertEquals(String[].class, en.getKey().getClass()); [EOL] }
public void testRootValueWithCustomKey() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     MapKeyMap result = m.readValue(" { \"a\": 13 } ", MapKeyMap.class); [EOL]     assertNotNull(result); [EOL]     assertNotNull(result); [EOL]     assertEquals(1, result.size()); [EOL]     Map.Entry<Object, Object> en = result.entrySet().iterator().next(); [EOL]     assertEquals(ValueClass.class, en.getValue().getClass()); [EOL]     assertEquals(13, ((ValueClass) en.getValue())._a); [EOL]     assertEquals(String[].class, en.getKey().getClass()); [EOL] }
public void testUpdateSequence() throws Exception { [EOL]     XYBean toUpdate = new XYBean(); [EOL]     Iterator<XYBean> it = MAPPER.readerForUpdating(toUpdate).readValues("{\"x\":1,\"y\":2}\n{\"x\":16}{\"y\":37}"); [EOL]     assertTrue(it.hasNext()); [EOL]     XYBean value = it.next(); [EOL]     assertSame(toUpdate, value); [EOL]     assertEquals(1, value.x); [EOL]     assertEquals(2, value.y); [EOL]     assertTrue(it.hasNext()); [EOL]     value = it.next(); [EOL]     assertSame(toUpdate, value); [EOL]     assertEquals(16, value.x); [EOL]     assertEquals(2, value.y); [EOL]     assertTrue(it.hasNext()); [EOL]     value = it.next(); [EOL]     assertSame(toUpdate, value); [EOL]     assertEquals(16, value.x); [EOL]     assertEquals(37, value.y); [EOL]     assertFalse(it.hasNext()); [EOL] }
public void testUpdateSequence() throws Exception { [EOL]     XYBean toUpdate = new XYBean(); [EOL]     Iterator<XYBean> it = MAPPER.readerForUpdating(toUpdate).readValues("{\"x\":1,\"y\":2}\n{\"x\":16}{\"y\":37}"); [EOL]     assertTrue(it.hasNext()); [EOL]     XYBean value = it.next(); [EOL]     assertSame(toUpdate, value); [EOL]     assertEquals(1, value.x); [EOL]     assertEquals(2, value.y); [EOL]     assertTrue(it.hasNext()); [EOL]     value = it.next(); [EOL]     assertSame(toUpdate, value); [EOL]     assertEquals(16, value.x); [EOL]     assertEquals(2, value.y); [EOL]     assertTrue(it.hasNext()); [EOL]     value = it.next(); [EOL]     assertSame(toUpdate, value); [EOL]     assertEquals(16, value.x); [EOL]     assertEquals(37, value.y); [EOL]     assertFalse(it.hasNext()); [EOL] }
public void testUpdateSequence() throws Exception { [EOL]     XYBean toUpdate = new XYBean(); [EOL]     Iterator<XYBean> it = MAPPER.readerForUpdating(toUpdate).readValues("{\"x\":1,\"y\":2}\n{\"x\":16}{\"y\":37}"); [EOL]     assertTrue(it.hasNext()); [EOL]     XYBean value = it.next(); [EOL]     assertSame(toUpdate, value); [EOL]     assertEquals(1, value.x); [EOL]     assertEquals(2, value.y); [EOL]     assertTrue(it.hasNext()); [EOL]     value = it.next(); [EOL]     assertSame(toUpdate, value); [EOL]     assertEquals(16, value.x); [EOL]     assertEquals(2, value.y); [EOL]     assertTrue(it.hasNext()); [EOL]     value = it.next(); [EOL]     assertSame(toUpdate, value); [EOL]     assertEquals(16, value.x); [EOL]     assertEquals(37, value.y); [EOL]     assertFalse(it.hasNext()); [EOL] }
public void testUpdateSequence() throws Exception { [EOL]     XYBean toUpdate = new XYBean(); [EOL]     Iterator<XYBean> it = MAPPER.readerForUpdating(toUpdate).readValues("{\"x\":1,\"y\":2}\n{\"x\":16}{\"y\":37}"); [EOL]     assertTrue(it.hasNext()); [EOL]     XYBean value = it.next(); [EOL]     assertSame(toUpdate, value); [EOL]     assertEquals(1, value.x); [EOL]     assertEquals(2, value.y); [EOL]     assertTrue(it.hasNext()); [EOL]     value = it.next(); [EOL]     assertSame(toUpdate, value); [EOL]     assertEquals(16, value.x); [EOL]     assertEquals(2, value.y); [EOL]     assertTrue(it.hasNext()); [EOL]     value = it.next(); [EOL]     assertSame(toUpdate, value); [EOL]     assertEquals(16, value.x); [EOL]     assertEquals(37, value.y); [EOL]     assertFalse(it.hasNext()); [EOL] }
public void testUpdateSequence() throws Exception { [EOL]     XYBean toUpdate = new XYBean(); [EOL]     Iterator<XYBean> it = MAPPER.readerForUpdating(toUpdate).readValues("{\"x\":1,\"y\":2}\n{\"x\":16}{\"y\":37}"); [EOL]     assertTrue(it.hasNext()); [EOL]     XYBean value = it.next(); [EOL]     assertSame(toUpdate, value); [EOL]     assertEquals(1, value.x); [EOL]     assertEquals(2, value.y); [EOL]     assertTrue(it.hasNext()); [EOL]     value = it.next(); [EOL]     assertSame(toUpdate, value); [EOL]     assertEquals(16, value.x); [EOL]     assertEquals(2, value.y); [EOL]     assertTrue(it.hasNext()); [EOL]     value = it.next(); [EOL]     assertSame(toUpdate, value); [EOL]     assertEquals(16, value.x); [EOL]     assertEquals(37, value.y); [EOL]     assertFalse(it.hasNext()); [EOL] }
public void testUpdateSequence() throws Exception { [EOL]     XYBean toUpdate = new XYBean(); [EOL]     Iterator<XYBean> it = MAPPER.readerForUpdating(toUpdate).readValues("{\"x\":1,\"y\":2}\n{\"x\":16}{\"y\":37}"); [EOL]     assertTrue(it.hasNext()); [EOL]     XYBean value = it.next(); [EOL]     assertSame(toUpdate, value); [EOL]     assertEquals(1, value.x); [EOL]     assertEquals(2, value.y); [EOL]     assertTrue(it.hasNext()); [EOL]     value = it.next(); [EOL]     assertSame(toUpdate, value); [EOL]     assertEquals(16, value.x); [EOL]     assertEquals(2, value.y); [EOL]     assertTrue(it.hasNext()); [EOL]     value = it.next(); [EOL]     assertSame(toUpdate, value); [EOL]     assertEquals(16, value.x); [EOL]     assertEquals(37, value.y); [EOL]     assertFalse(it.hasNext()); [EOL] }
public void testUpdateSequence() throws Exception { [EOL]     XYBean toUpdate = new XYBean(); [EOL]     Iterator<XYBean> it = MAPPER.readerForUpdating(toUpdate).readValues("{\"x\":1,\"y\":2}\n{\"x\":16}{\"y\":37}"); [EOL]     assertTrue(it.hasNext()); [EOL]     XYBean value = it.next(); [EOL]     assertSame(toUpdate, value); [EOL]     assertEquals(1, value.x); [EOL]     assertEquals(2, value.y); [EOL]     assertTrue(it.hasNext()); [EOL]     value = it.next(); [EOL]     assertSame(toUpdate, value); [EOL]     assertEquals(16, value.x); [EOL]     assertEquals(2, value.y); [EOL]     assertTrue(it.hasNext()); [EOL]     value = it.next(); [EOL]     assertSame(toUpdate, value); [EOL]     assertEquals(16, value.x); [EOL]     assertEquals(37, value.y); [EOL]     assertFalse(it.hasNext()); [EOL] }
public void testUpdateSequence() throws Exception { [EOL]     XYBean toUpdate = new XYBean(); [EOL]     Iterator<XYBean> it = MAPPER.readerForUpdating(toUpdate).readValues("{\"x\":1,\"y\":2}\n{\"x\":16}{\"y\":37}"); [EOL]     assertTrue(it.hasNext()); [EOL]     XYBean value = it.next(); [EOL]     assertSame(toUpdate, value); [EOL]     assertEquals(1, value.x); [EOL]     assertEquals(2, value.y); [EOL]     assertTrue(it.hasNext()); [EOL]     value = it.next(); [EOL]     assertSame(toUpdate, value); [EOL]     assertEquals(16, value.x); [EOL]     assertEquals(2, value.y); [EOL]     assertTrue(it.hasNext()); [EOL]     value = it.next(); [EOL]     assertSame(toUpdate, value); [EOL]     assertEquals(16, value.x); [EOL]     assertEquals(37, value.y); [EOL]     assertFalse(it.hasNext()); [EOL] }
public void testUpdateSequence() throws Exception { [EOL]     XYBean toUpdate = new XYBean(); [EOL]     Iterator<XYBean> it = MAPPER.readerForUpdating(toUpdate).readValues("{\"x\":1,\"y\":2}\n{\"x\":16}{\"y\":37}"); [EOL]     assertTrue(it.hasNext()); [EOL]     XYBean value = it.next(); [EOL]     assertSame(toUpdate, value); [EOL]     assertEquals(1, value.x); [EOL]     assertEquals(2, value.y); [EOL]     assertTrue(it.hasNext()); [EOL]     value = it.next(); [EOL]     assertSame(toUpdate, value); [EOL]     assertEquals(16, value.x); [EOL]     assertEquals(2, value.y); [EOL]     assertTrue(it.hasNext()); [EOL]     value = it.next(); [EOL]     assertSame(toUpdate, value); [EOL]     assertEquals(16, value.x); [EOL]     assertEquals(37, value.y); [EOL]     assertFalse(it.hasNext()); [EOL] }
public void testUpdateSequence() throws Exception { [EOL]     XYBean toUpdate = new XYBean(); [EOL]     Iterator<XYBean> it = MAPPER.readerForUpdating(toUpdate).readValues("{\"x\":1,\"y\":2}\n{\"x\":16}{\"y\":37}"); [EOL]     assertTrue(it.hasNext()); [EOL]     XYBean value = it.next(); [EOL]     assertSame(toUpdate, value); [EOL]     assertEquals(1, value.x); [EOL]     assertEquals(2, value.y); [EOL]     assertTrue(it.hasNext()); [EOL]     value = it.next(); [EOL]     assertSame(toUpdate, value); [EOL]     assertEquals(16, value.x); [EOL]     assertEquals(2, value.y); [EOL]     assertTrue(it.hasNext()); [EOL]     value = it.next(); [EOL]     assertSame(toUpdate, value); [EOL]     assertEquals(16, value.x); [EOL]     assertEquals(37, value.y); [EOL]     assertFalse(it.hasNext()); [EOL] }
public void testUpdateSequence() throws Exception { [EOL]     XYBean toUpdate = new XYBean(); [EOL]     Iterator<XYBean> it = MAPPER.readerForUpdating(toUpdate).readValues("{\"x\":1,\"y\":2}\n{\"x\":16}{\"y\":37}"); [EOL]     assertTrue(it.hasNext()); [EOL]     XYBean value = it.next(); [EOL]     assertSame(toUpdate, value); [EOL]     assertEquals(1, value.x); [EOL]     assertEquals(2, value.y); [EOL]     assertTrue(it.hasNext()); [EOL]     value = it.next(); [EOL]     assertSame(toUpdate, value); [EOL]     assertEquals(16, value.x); [EOL]     assertEquals(2, value.y); [EOL]     assertTrue(it.hasNext()); [EOL]     value = it.next(); [EOL]     assertSame(toUpdate, value); [EOL]     assertEquals(16, value.x); [EOL]     assertEquals(37, value.y); [EOL]     assertFalse(it.hasNext()); [EOL] }
public void testUpdateSequence() throws Exception { [EOL]     XYBean toUpdate = new XYBean(); [EOL]     Iterator<XYBean> it = MAPPER.readerForUpdating(toUpdate).readValues("{\"x\":1,\"y\":2}\n{\"x\":16}{\"y\":37}"); [EOL]     assertTrue(it.hasNext()); [EOL]     XYBean value = it.next(); [EOL]     assertSame(toUpdate, value); [EOL]     assertEquals(1, value.x); [EOL]     assertEquals(2, value.y); [EOL]     assertTrue(it.hasNext()); [EOL]     value = it.next(); [EOL]     assertSame(toUpdate, value); [EOL]     assertEquals(16, value.x); [EOL]     assertEquals(2, value.y); [EOL]     assertTrue(it.hasNext()); [EOL]     value = it.next(); [EOL]     assertSame(toUpdate, value); [EOL]     assertEquals(16, value.x); [EOL]     assertEquals(37, value.y); [EOL]     assertFalse(it.hasNext()); [EOL] }
public void testUpdateSequence() throws Exception { [EOL]     XYBean toUpdate = new XYBean(); [EOL]     Iterator<XYBean> it = MAPPER.readerForUpdating(toUpdate).readValues("{\"x\":1,\"y\":2}\n{\"x\":16}{\"y\":37}"); [EOL]     assertTrue(it.hasNext()); [EOL]     XYBean value = it.next(); [EOL]     assertSame(toUpdate, value); [EOL]     assertEquals(1, value.x); [EOL]     assertEquals(2, value.y); [EOL]     assertTrue(it.hasNext()); [EOL]     value = it.next(); [EOL]     assertSame(toUpdate, value); [EOL]     assertEquals(16, value.x); [EOL]     assertEquals(2, value.y); [EOL]     assertTrue(it.hasNext()); [EOL]     value = it.next(); [EOL]     assertSame(toUpdate, value); [EOL]     assertEquals(16, value.x); [EOL]     assertEquals(37, value.y); [EOL]     assertFalse(it.hasNext()); [EOL] }
public void testUpdateSequence() throws Exception { [EOL]     XYBean toUpdate = new XYBean(); [EOL]     Iterator<XYBean> it = MAPPER.readerForUpdating(toUpdate).readValues("{\"x\":1,\"y\":2}\n{\"x\":16}{\"y\":37}"); [EOL]     assertTrue(it.hasNext()); [EOL]     XYBean value = it.next(); [EOL]     assertSame(toUpdate, value); [EOL]     assertEquals(1, value.x); [EOL]     assertEquals(2, value.y); [EOL]     assertTrue(it.hasNext()); [EOL]     value = it.next(); [EOL]     assertSame(toUpdate, value); [EOL]     assertEquals(16, value.x); [EOL]     assertEquals(2, value.y); [EOL]     assertTrue(it.hasNext()); [EOL]     value = it.next(); [EOL]     assertSame(toUpdate, value); [EOL]     assertEquals(16, value.x); [EOL]     assertEquals(37, value.y); [EOL]     assertFalse(it.hasNext()); [EOL] }
public void testUpdateSequence() throws Exception { [EOL]     XYBean toUpdate = new XYBean(); [EOL]     Iterator<XYBean> it = MAPPER.readerForUpdating(toUpdate).readValues("{\"x\":1,\"y\":2}\n{\"x\":16}{\"y\":37}"); [EOL]     assertTrue(it.hasNext()); [EOL]     XYBean value = it.next(); [EOL]     assertSame(toUpdate, value); [EOL]     assertEquals(1, value.x); [EOL]     assertEquals(2, value.y); [EOL]     assertTrue(it.hasNext()); [EOL]     value = it.next(); [EOL]     assertSame(toUpdate, value); [EOL]     assertEquals(16, value.x); [EOL]     assertEquals(2, value.y); [EOL]     assertTrue(it.hasNext()); [EOL]     value = it.next(); [EOL]     assertSame(toUpdate, value); [EOL]     assertEquals(16, value.x); [EOL]     assertEquals(37, value.y); [EOL]     assertFalse(it.hasNext()); [EOL] }
public void testUpdateSequence() throws Exception { [EOL]     XYBean toUpdate = new XYBean(); [EOL]     Iterator<XYBean> it = MAPPER.readerForUpdating(toUpdate).readValues("{\"x\":1,\"y\":2}\n{\"x\":16}{\"y\":37}"); [EOL]     assertTrue(it.hasNext()); [EOL]     XYBean value = it.next(); [EOL]     assertSame(toUpdate, value); [EOL]     assertEquals(1, value.x); [EOL]     assertEquals(2, value.y); [EOL]     assertTrue(it.hasNext()); [EOL]     value = it.next(); [EOL]     assertSame(toUpdate, value); [EOL]     assertEquals(16, value.x); [EOL]     assertEquals(2, value.y); [EOL]     assertTrue(it.hasNext()); [EOL]     value = it.next(); [EOL]     assertSame(toUpdate, value); [EOL]     assertEquals(16, value.x); [EOL]     assertEquals(37, value.y); [EOL]     assertFalse(it.hasNext()); [EOL] }
public void testUpdateSequence() throws Exception { [EOL]     XYBean toUpdate = new XYBean(); [EOL]     Iterator<XYBean> it = MAPPER.readerForUpdating(toUpdate).readValues("{\"x\":1,\"y\":2}\n{\"x\":16}{\"y\":37}"); [EOL]     assertTrue(it.hasNext()); [EOL]     XYBean value = it.next(); [EOL]     assertSame(toUpdate, value); [EOL]     assertEquals(1, value.x); [EOL]     assertEquals(2, value.y); [EOL]     assertTrue(it.hasNext()); [EOL]     value = it.next(); [EOL]     assertSame(toUpdate, value); [EOL]     assertEquals(16, value.x); [EOL]     assertEquals(2, value.y); [EOL]     assertTrue(it.hasNext()); [EOL]     value = it.next(); [EOL]     assertSame(toUpdate, value); [EOL]     assertEquals(16, value.x); [EOL]     assertEquals(37, value.y); [EOL]     assertFalse(it.hasNext()); [EOL] }
public void testUpdateSequence() throws Exception { [EOL]     XYBean toUpdate = new XYBean(); [EOL]     Iterator<XYBean> it = MAPPER.readerForUpdating(toUpdate).readValues("{\"x\":1,\"y\":2}\n{\"x\":16}{\"y\":37}"); [EOL]     assertTrue(it.hasNext()); [EOL]     XYBean value = it.next(); [EOL]     assertSame(toUpdate, value); [EOL]     assertEquals(1, value.x); [EOL]     assertEquals(2, value.y); [EOL]     assertTrue(it.hasNext()); [EOL]     value = it.next(); [EOL]     assertSame(toUpdate, value); [EOL]     assertEquals(16, value.x); [EOL]     assertEquals(2, value.y); [EOL]     assertTrue(it.hasNext()); [EOL]     value = it.next(); [EOL]     assertSame(toUpdate, value); [EOL]     assertEquals(16, value.x); [EOL]     assertEquals(37, value.y); [EOL]     assertFalse(it.hasNext()); [EOL] }
public void testUpdateSequence() throws Exception { [EOL]     XYBean toUpdate = new XYBean(); [EOL]     Iterator<XYBean> it = MAPPER.readerForUpdating(toUpdate).readValues("{\"x\":1,\"y\":2}\n{\"x\":16}{\"y\":37}"); [EOL]     assertTrue(it.hasNext()); [EOL]     XYBean value = it.next(); [EOL]     assertSame(toUpdate, value); [EOL]     assertEquals(1, value.x); [EOL]     assertEquals(2, value.y); [EOL]     assertTrue(it.hasNext()); [EOL]     value = it.next(); [EOL]     assertSame(toUpdate, value); [EOL]     assertEquals(16, value.x); [EOL]     assertEquals(2, value.y); [EOL]     assertTrue(it.hasNext()); [EOL]     value = it.next(); [EOL]     assertSame(toUpdate, value); [EOL]     assertEquals(16, value.x); [EOL]     assertEquals(37, value.y); [EOL]     assertFalse(it.hasNext()); [EOL] }
public void testBinary() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     final int LENGTH = 13045; [EOL]     byte[] data = new byte[LENGTH]; [EOL]     for (int i = 0; i < LENGTH; ++i) { [EOL]         data[i] = (byte) i; [EOL]     } [EOL]     StringWriter sw = new StringWriter(); [EOL]     mapper.writeValue(sw, BinaryNode.valueOf(data)); [EOL]     JsonParser jp = new JsonFactory().createParser(sw.toString()); [EOL]     assertToken(JsonToken.VALUE_STRING, jp.nextToken()); [EOL]     assertArrayEquals(data, jp.getBinaryValue()); [EOL]     jp.close(); [EOL] }
public void testBinary() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     final int LENGTH = 13045; [EOL]     byte[] data = new byte[LENGTH]; [EOL]     for (int i = 0; i < LENGTH; ++i) { [EOL]         data[i] = (byte) i; [EOL]     } [EOL]     StringWriter sw = new StringWriter(); [EOL]     mapper.writeValue(sw, BinaryNode.valueOf(data)); [EOL]     JsonParser jp = new JsonFactory().createParser(sw.toString()); [EOL]     assertToken(JsonToken.VALUE_STRING, jp.nextToken()); [EOL]     assertArrayEquals(data, jp.getBinaryValue()); [EOL]     jp.close(); [EOL] }
public void testArraysOfArrays() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL, JsonTypeInfo.As.PROPERTY); [EOL]     Object value = new Object[][] { new Object[] {} }; [EOL]     String json = mapper.writeValueAsString(value); [EOL]     _testArraysAs(mapper, json, Object[][].class); [EOL]     _testArraysAs(mapper, json, Object[].class); [EOL]     _testArraysAs(mapper, json, Object.class); [EOL] }
public void testArraysOfArrays() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL, JsonTypeInfo.As.PROPERTY); [EOL]     Object value = new Object[][] { new Object[] {} }; [EOL]     String json = mapper.writeValueAsString(value); [EOL]     _testArraysAs(mapper, json, Object[][].class); [EOL]     _testArraysAs(mapper, json, Object[].class); [EOL]     _testArraysAs(mapper, json, Object.class); [EOL] }
public void testUntypedMap() throws Exception { [EOL]     String JSON = "{ \"foo\" : \"bar\", \"crazy\" : true, \"null\" : null }"; [EOL]     @SuppressWarnings("unchecked") [EOL]     Map<String, Object> result = (Map<String, Object>) MAPPER.readValue(JSON, Object.class); [EOL]     assertNotNull(result); [EOL]     assertTrue(result instanceof Map<?, ?>); [EOL]     assertEquals(3, result.size()); [EOL]     assertEquals("bar", result.get("foo")); [EOL]     assertEquals(Boolean.TRUE, result.get("crazy")); [EOL]     assertNull(result.get("null")); [EOL]     assertNull(result.get("bar")); [EOL]     assertNull(result.get(3)); [EOL] }
public void testUntypedMap() throws Exception { [EOL]     String JSON = "{ \"foo\" : \"bar\", \"crazy\" : true, \"null\" : null }"; [EOL]     @SuppressWarnings("unchecked") [EOL]     Map<String, Object> result = (Map<String, Object>) MAPPER.readValue(JSON, Object.class); [EOL]     assertNotNull(result); [EOL]     assertTrue(result instanceof Map<?, ?>); [EOL]     assertEquals(3, result.size()); [EOL]     assertEquals("bar", result.get("foo")); [EOL]     assertEquals(Boolean.TRUE, result.get("crazy")); [EOL]     assertNull(result.get("null")); [EOL]     assertNull(result.get("bar")); [EOL]     assertNull(result.get(3)); [EOL] }
public void testUntypedMap() throws Exception { [EOL]     String JSON = "{ \"foo\" : \"bar\", \"crazy\" : true, \"null\" : null }"; [EOL]     @SuppressWarnings("unchecked") [EOL]     Map<String, Object> result = (Map<String, Object>) MAPPER.readValue(JSON, Object.class); [EOL]     assertNotNull(result); [EOL]     assertTrue(result instanceof Map<?, ?>); [EOL]     assertEquals(3, result.size()); [EOL]     assertEquals("bar", result.get("foo")); [EOL]     assertEquals(Boolean.TRUE, result.get("crazy")); [EOL]     assertNull(result.get("null")); [EOL]     assertNull(result.get("bar")); [EOL]     assertNull(result.get(3)); [EOL] }
public void testUntypedMap() throws Exception { [EOL]     String JSON = "{ \"foo\" : \"bar\", \"crazy\" : true, \"null\" : null }"; [EOL]     @SuppressWarnings("unchecked") [EOL]     Map<String, Object> result = (Map<String, Object>) MAPPER.readValue(JSON, Object.class); [EOL]     assertNotNull(result); [EOL]     assertTrue(result instanceof Map<?, ?>); [EOL]     assertEquals(3, result.size()); [EOL]     assertEquals("bar", result.get("foo")); [EOL]     assertEquals(Boolean.TRUE, result.get("crazy")); [EOL]     assertNull(result.get("null")); [EOL]     assertNull(result.get("bar")); [EOL]     assertNull(result.get(3)); [EOL] }
public void testUntypedMap() throws Exception { [EOL]     String JSON = "{ \"foo\" : \"bar\", \"crazy\" : true, \"null\" : null }"; [EOL]     @SuppressWarnings("unchecked") [EOL]     Map<String, Object> result = (Map<String, Object>) MAPPER.readValue(JSON, Object.class); [EOL]     assertNotNull(result); [EOL]     assertTrue(result instanceof Map<?, ?>); [EOL]     assertEquals(3, result.size()); [EOL]     assertEquals("bar", result.get("foo")); [EOL]     assertEquals(Boolean.TRUE, result.get("crazy")); [EOL]     assertNull(result.get("null")); [EOL]     assertNull(result.get("bar")); [EOL]     assertNull(result.get(3)); [EOL] }
public void testUntypedMap() throws Exception { [EOL]     String JSON = "{ \"foo\" : \"bar\", \"crazy\" : true, \"null\" : null }"; [EOL]     @SuppressWarnings("unchecked") [EOL]     Map<String, Object> result = (Map<String, Object>) MAPPER.readValue(JSON, Object.class); [EOL]     assertNotNull(result); [EOL]     assertTrue(result instanceof Map<?, ?>); [EOL]     assertEquals(3, result.size()); [EOL]     assertEquals("bar", result.get("foo")); [EOL]     assertEquals(Boolean.TRUE, result.get("crazy")); [EOL]     assertNull(result.get("null")); [EOL]     assertNull(result.get("bar")); [EOL]     assertNull(result.get(3)); [EOL] }
public void testUntypedMap() throws Exception { [EOL]     String JSON = "{ \"foo\" : \"bar\", \"crazy\" : true, \"null\" : null }"; [EOL]     @SuppressWarnings("unchecked") [EOL]     Map<String, Object> result = (Map<String, Object>) MAPPER.readValue(JSON, Object.class); [EOL]     assertNotNull(result); [EOL]     assertTrue(result instanceof Map<?, ?>); [EOL]     assertEquals(3, result.size()); [EOL]     assertEquals("bar", result.get("foo")); [EOL]     assertEquals(Boolean.TRUE, result.get("crazy")); [EOL]     assertNull(result.get("null")); [EOL]     assertNull(result.get("bar")); [EOL]     assertNull(result.get(3)); [EOL] }
public void testUntypedMap() throws Exception { [EOL]     String JSON = "{ \"foo\" : \"bar\", \"crazy\" : true, \"null\" : null }"; [EOL]     @SuppressWarnings("unchecked") [EOL]     Map<String, Object> result = (Map<String, Object>) MAPPER.readValue(JSON, Object.class); [EOL]     assertNotNull(result); [EOL]     assertTrue(result instanceof Map<?, ?>); [EOL]     assertEquals(3, result.size()); [EOL]     assertEquals("bar", result.get("foo")); [EOL]     assertEquals(Boolean.TRUE, result.get("crazy")); [EOL]     assertNull(result.get("null")); [EOL]     assertNull(result.get("bar")); [EOL]     assertNull(result.get(3)); [EOL] }
public void testUntypedMap() throws Exception { [EOL]     String JSON = "{ \"foo\" : \"bar\", \"crazy\" : true, \"null\" : null }"; [EOL]     @SuppressWarnings("unchecked") [EOL]     Map<String, Object> result = (Map<String, Object>) MAPPER.readValue(JSON, Object.class); [EOL]     assertNotNull(result); [EOL]     assertTrue(result instanceof Map<?, ?>); [EOL]     assertEquals(3, result.size()); [EOL]     assertEquals("bar", result.get("foo")); [EOL]     assertEquals(Boolean.TRUE, result.get("crazy")); [EOL]     assertNull(result.get("null")); [EOL]     assertNull(result.get("bar")); [EOL]     assertNull(result.get(3)); [EOL] }
public void testUntypedMap() throws Exception { [EOL]     String JSON = "{ \"foo\" : \"bar\", \"crazy\" : true, \"null\" : null }"; [EOL]     @SuppressWarnings("unchecked") [EOL]     Map<String, Object> result = (Map<String, Object>) MAPPER.readValue(JSON, Object.class); [EOL]     assertNotNull(result); [EOL]     assertTrue(result instanceof Map<?, ?>); [EOL]     assertEquals(3, result.size()); [EOL]     assertEquals("bar", result.get("foo")); [EOL]     assertEquals(Boolean.TRUE, result.get("crazy")); [EOL]     assertNull(result.get("null")); [EOL]     assertNull(result.get("bar")); [EOL]     assertNull(result.get(3)); [EOL] }
public void testUntypedMap() throws Exception { [EOL]     String JSON = "{ \"foo\" : \"bar\", \"crazy\" : true, \"null\" : null }"; [EOL]     @SuppressWarnings("unchecked") [EOL]     Map<String, Object> result = (Map<String, Object>) MAPPER.readValue(JSON, Object.class); [EOL]     assertNotNull(result); [EOL]     assertTrue(result instanceof Map<?, ?>); [EOL]     assertEquals(3, result.size()); [EOL]     assertEquals("bar", result.get("foo")); [EOL]     assertEquals(Boolean.TRUE, result.get("crazy")); [EOL]     assertNull(result.get("null")); [EOL]     assertNull(result.get("bar")); [EOL]     assertNull(result.get(3)); [EOL] }
public void testUntypedMap() throws Exception { [EOL]     String JSON = "{ \"foo\" : \"bar\", \"crazy\" : true, \"null\" : null }"; [EOL]     @SuppressWarnings("unchecked") [EOL]     Map<String, Object> result = (Map<String, Object>) MAPPER.readValue(JSON, Object.class); [EOL]     assertNotNull(result); [EOL]     assertTrue(result instanceof Map<?, ?>); [EOL]     assertEquals(3, result.size()); [EOL]     assertEquals("bar", result.get("foo")); [EOL]     assertEquals(Boolean.TRUE, result.get("crazy")); [EOL]     assertNull(result.get("null")); [EOL]     assertNull(result.get("bar")); [EOL]     assertNull(result.get(3)); [EOL] }
public void testUntypedMap() throws Exception { [EOL]     String JSON = "{ \"foo\" : \"bar\", \"crazy\" : true, \"null\" : null }"; [EOL]     @SuppressWarnings("unchecked") [EOL]     Map<String, Object> result = (Map<String, Object>) MAPPER.readValue(JSON, Object.class); [EOL]     assertNotNull(result); [EOL]     assertTrue(result instanceof Map<?, ?>); [EOL]     assertEquals(3, result.size()); [EOL]     assertEquals("bar", result.get("foo")); [EOL]     assertEquals(Boolean.TRUE, result.get("crazy")); [EOL]     assertNull(result.get("null")); [EOL]     assertNull(result.get("bar")); [EOL]     assertNull(result.get(3)); [EOL] }
public void testUntypedMap() throws Exception { [EOL]     String JSON = "{ \"foo\" : \"bar\", \"crazy\" : true, \"null\" : null }"; [EOL]     @SuppressWarnings("unchecked") [EOL]     Map<String, Object> result = (Map<String, Object>) MAPPER.readValue(JSON, Object.class); [EOL]     assertNotNull(result); [EOL]     assertTrue(result instanceof Map<?, ?>); [EOL]     assertEquals(3, result.size()); [EOL]     assertEquals("bar", result.get("foo")); [EOL]     assertEquals(Boolean.TRUE, result.get("crazy")); [EOL]     assertNull(result.get("null")); [EOL]     assertNull(result.get("bar")); [EOL]     assertNull(result.get(3)); [EOL] }
public void testUntypedMap() throws Exception { [EOL]     String JSON = "{ \"foo\" : \"bar\", \"crazy\" : true, \"null\" : null }"; [EOL]     @SuppressWarnings("unchecked") [EOL]     Map<String, Object> result = (Map<String, Object>) MAPPER.readValue(JSON, Object.class); [EOL]     assertNotNull(result); [EOL]     assertTrue(result instanceof Map<?, ?>); [EOL]     assertEquals(3, result.size()); [EOL]     assertEquals("bar", result.get("foo")); [EOL]     assertEquals(Boolean.TRUE, result.get("crazy")); [EOL]     assertNull(result.get("null")); [EOL]     assertNull(result.get("bar")); [EOL]     assertNull(result.get(3)); [EOL] }
public void testUntypedWithJsonArrays() throws Exception { [EOL]     Object ob = mapper.readValue("[1]", Object.class); [EOL]     assertTrue(ob instanceof List<?>); [EOL]     mapper.configure(DeserializationFeature.USE_JAVA_ARRAY_FOR_JSON_ARRAY, true); [EOL]     ob = mapper.readValue("[1]", Object.class); [EOL]     assertEquals(Object[].class, ob.getClass()); [EOL] }
public void testUntypedWithJsonArrays() throws Exception { [EOL]     Object ob = mapper.readValue("[1]", Object.class); [EOL]     assertTrue(ob instanceof List<?>); [EOL]     mapper.configure(DeserializationFeature.USE_JAVA_ARRAY_FOR_JSON_ARRAY, true); [EOL]     ob = mapper.readValue("[1]", Object.class); [EOL]     assertEquals(Object[].class, ob.getClass()); [EOL] }
public void testUntypedWithJsonArrays() throws Exception { [EOL]     Object ob = mapper.readValue("[1]", Object.class); [EOL]     assertTrue(ob instanceof List<?>); [EOL]     mapper.configure(DeserializationFeature.USE_JAVA_ARRAY_FOR_JSON_ARRAY, true); [EOL]     ob = mapper.readValue("[1]", Object.class); [EOL]     assertEquals(Object[].class, ob.getClass()); [EOL] }
public void testUntypedMap() throws Exception { [EOL]     String JSON = "{ \"foo\" : \"bar\", \"crazy\" : true, \"null\" : null }"; [EOL]     @SuppressWarnings("unchecked") [EOL]     Map<String, Object> result = (Map<String, Object>) MAPPER.readValue(JSON, Object.class); [EOL]     assertNotNull(result); [EOL]     assertTrue(result instanceof Map<?, ?>); [EOL]     assertEquals(3, result.size()); [EOL]     assertEquals("bar", result.get("foo")); [EOL]     assertEquals(Boolean.TRUE, result.get("crazy")); [EOL]     assertNull(result.get("null")); [EOL]     assertNull(result.get("bar")); [EOL]     assertNull(result.get(3)); [EOL] }
public void testUntypedMap() throws Exception { [EOL]     String JSON = "{ \"foo\" : \"bar\", \"crazy\" : true, \"null\" : null }"; [EOL]     @SuppressWarnings("unchecked") [EOL]     Map<String, Object> result = (Map<String, Object>) MAPPER.readValue(JSON, Object.class); [EOL]     assertNotNull(result); [EOL]     assertTrue(result instanceof Map<?, ?>); [EOL]     assertEquals(3, result.size()); [EOL]     assertEquals("bar", result.get("foo")); [EOL]     assertEquals(Boolean.TRUE, result.get("crazy")); [EOL]     assertNull(result.get("null")); [EOL]     assertNull(result.get("bar")); [EOL]     assertNull(result.get(3)); [EOL] }
public void testUntypedMap() throws Exception { [EOL]     String JSON = "{ \"foo\" : \"bar\", \"crazy\" : true, \"null\" : null }"; [EOL]     @SuppressWarnings("unchecked") [EOL]     Map<String, Object> result = (Map<String, Object>) MAPPER.readValue(JSON, Object.class); [EOL]     assertNotNull(result); [EOL]     assertTrue(result instanceof Map<?, ?>); [EOL]     assertEquals(3, result.size()); [EOL]     assertEquals("bar", result.get("foo")); [EOL]     assertEquals(Boolean.TRUE, result.get("crazy")); [EOL]     assertNull(result.get("null")); [EOL]     assertNull(result.get("bar")); [EOL]     assertNull(result.get(3)); [EOL] }
public void testUntypedMap() throws Exception { [EOL]     String JSON = "{ \"foo\" : \"bar\", \"crazy\" : true, \"null\" : null }"; [EOL]     @SuppressWarnings("unchecked") [EOL]     Map<String, Object> result = (Map<String, Object>) MAPPER.readValue(JSON, Object.class); [EOL]     assertNotNull(result); [EOL]     assertTrue(result instanceof Map<?, ?>); [EOL]     assertEquals(3, result.size()); [EOL]     assertEquals("bar", result.get("foo")); [EOL]     assertEquals(Boolean.TRUE, result.get("crazy")); [EOL]     assertNull(result.get("null")); [EOL]     assertNull(result.get("bar")); [EOL]     assertNull(result.get(3)); [EOL] }
public void testUntypedWithJsonArrays() throws Exception { [EOL]     Object ob = mapper.readValue("[1]", Object.class); [EOL]     assertTrue(ob instanceof List<?>); [EOL]     mapper.configure(DeserializationFeature.USE_JAVA_ARRAY_FOR_JSON_ARRAY, true); [EOL]     ob = mapper.readValue("[1]", Object.class); [EOL]     assertEquals(Object[].class, ob.getClass()); [EOL] }
public void testUntypedWithJsonArrays() throws Exception { [EOL]     Object ob = mapper.readValue("[1]", Object.class); [EOL]     assertTrue(ob instanceof List<?>); [EOL]     mapper.configure(DeserializationFeature.USE_JAVA_ARRAY_FOR_JSON_ARRAY, true); [EOL]     ob = mapper.readValue("[1]", Object.class); [EOL]     assertEquals(Object[].class, ob.getClass()); [EOL] }
public void testUntypedWithJsonArrays() throws Exception { [EOL]     Object ob = mapper.readValue("[1]", Object.class); [EOL]     assertTrue(ob instanceof List<?>); [EOL]     mapper.configure(DeserializationFeature.USE_JAVA_ARRAY_FOR_JSON_ARRAY, true); [EOL]     ob = mapper.readValue("[1]", Object.class); [EOL]     assertEquals(Object[].class, ob.getClass()); [EOL] }
public void testTimestampUtil() throws Exception { [EOL]     long now = 123456789L; [EOL]     java.sql.Timestamp value = new java.sql.Timestamp(now); [EOL]     assertEquals(value, new ObjectMapper().readValue("" + now, java.sql.Timestamp.class)); [EOL]     String dateStr = serializeTimestampAsString(value); [EOL]     java.sql.Timestamp result = new ObjectMapper().readValue("\"" + dateStr + "\"", java.sql.Timestamp.class); [EOL]     assertEquals("Date: expect " + value + " (" + value.getTime() + "), got " + result + " (" + result.getTime() + ")", value.getTime(), result.getTime()); [EOL] }
public void testTimestampUtil() throws Exception { [EOL]     long now = 123456789L; [EOL]     java.sql.Timestamp value = new java.sql.Timestamp(now); [EOL]     assertEquals(value, new ObjectMapper().readValue("" + now, java.sql.Timestamp.class)); [EOL]     String dateStr = serializeTimestampAsString(value); [EOL]     java.sql.Timestamp result = new ObjectMapper().readValue("\"" + dateStr + "\"", java.sql.Timestamp.class); [EOL]     assertEquals("Date: expect " + value + " (" + value.getTime() + "), got " + result + " (" + result.getTime() + ")", value.getTime(), result.getTime()); [EOL] }
public void testTimestampUtil() throws Exception { [EOL]     long now = 123456789L; [EOL]     java.sql.Timestamp value = new java.sql.Timestamp(now); [EOL]     assertEquals(value, new ObjectMapper().readValue("" + now, java.sql.Timestamp.class)); [EOL]     String dateStr = serializeTimestampAsString(value); [EOL]     java.sql.Timestamp result = new ObjectMapper().readValue("\"" + dateStr + "\"", java.sql.Timestamp.class); [EOL]     assertEquals("Date: expect " + value + " (" + value.getTime() + "), got " + result + " (" + result.getTime() + ")", value.getTime(), result.getTime()); [EOL] }
public void testTimestampUtil() throws Exception { [EOL]     long now = 123456789L; [EOL]     java.sql.Timestamp value = new java.sql.Timestamp(now); [EOL]     assertEquals(value, new ObjectMapper().readValue("" + now, java.sql.Timestamp.class)); [EOL]     String dateStr = serializeTimestampAsString(value); [EOL]     java.sql.Timestamp result = new ObjectMapper().readValue("\"" + dateStr + "\"", java.sql.Timestamp.class); [EOL]     assertEquals("Date: expect " + value + " (" + value.getTime() + "), got " + result + " (" + result.getTime() + ")", value.getTime(), result.getTime()); [EOL] }
public void testTimestampUtil() throws Exception { [EOL]     long now = 123456789L; [EOL]     java.sql.Timestamp value = new java.sql.Timestamp(now); [EOL]     assertEquals(value, new ObjectMapper().readValue("" + now, java.sql.Timestamp.class)); [EOL]     String dateStr = serializeTimestampAsString(value); [EOL]     java.sql.Timestamp result = new ObjectMapper().readValue("\"" + dateStr + "\"", java.sql.Timestamp.class); [EOL]     assertEquals("Date: expect " + value + " (" + value.getTime() + "), got " + result + " (" + result.getTime() + ")", value.getTime(), result.getTime()); [EOL] }
public void testTimestampUtil() throws Exception { [EOL]     long now = 123456789L; [EOL]     java.sql.Timestamp value = new java.sql.Timestamp(now); [EOL]     assertEquals(value, new ObjectMapper().readValue("" + now, java.sql.Timestamp.class)); [EOL]     String dateStr = serializeTimestampAsString(value); [EOL]     java.sql.Timestamp result = new ObjectMapper().readValue("\"" + dateStr + "\"", java.sql.Timestamp.class); [EOL]     assertEquals("Date: expect " + value + " (" + value.getTime() + "), got " + result + " (" + result.getTime() + ")", value.getTime(), result.getTime()); [EOL] }
public void testTimestampUtil() throws Exception { [EOL]     long now = 123456789L; [EOL]     java.sql.Timestamp value = new java.sql.Timestamp(now); [EOL]     assertEquals(value, new ObjectMapper().readValue("" + now, java.sql.Timestamp.class)); [EOL]     String dateStr = serializeTimestampAsString(value); [EOL]     java.sql.Timestamp result = new ObjectMapper().readValue("\"" + dateStr + "\"", java.sql.Timestamp.class); [EOL]     assertEquals("Date: expect " + value + " (" + value.getTime() + "), got " + result + " (" + result.getTime() + ")", value.getTime(), result.getTime()); [EOL] }
public void testTimestampUtil() throws Exception { [EOL]     long now = 123456789L; [EOL]     java.sql.Timestamp value = new java.sql.Timestamp(now); [EOL]     assertEquals(value, new ObjectMapper().readValue("" + now, java.sql.Timestamp.class)); [EOL]     String dateStr = serializeTimestampAsString(value); [EOL]     java.sql.Timestamp result = new ObjectMapper().readValue("\"" + dateStr + "\"", java.sql.Timestamp.class); [EOL]     assertEquals("Date: expect " + value + " (" + value.getTime() + "), got " + result + " (" + result.getTime() + ")", value.getTime(), result.getTime()); [EOL] }
public void testCustomDateWithAnnotation() throws Exception { [EOL]     DateAsStringBean result = MAPPER.readValue("{\"date\":\"/2005/05/25/\"}", DateAsStringBean.class); [EOL]     assertNotNull(result); [EOL]     assertNotNull(result.date); [EOL]     Calendar c = Calendar.getInstance(TimeZone.getTimeZone("GMT")); [EOL]     long l = result.date.getTime(); [EOL]     if (l == 0L) { [EOL]         fail("Should not get null date"); [EOL]     } [EOL]     c.setTimeInMillis(l); [EOL]     assertEquals(2005, c.get(Calendar.YEAR)); [EOL]     assertEquals(Calendar.MAY, c.get(Calendar.MONTH)); [EOL]     assertEquals(25, c.get(Calendar.DAY_OF_MONTH)); [EOL] }
public void testCustomDateWithAnnotation() throws Exception { [EOL]     DateAsStringBean result = MAPPER.readValue("{\"date\":\"/2005/05/25/\"}", DateAsStringBean.class); [EOL]     assertNotNull(result); [EOL]     assertNotNull(result.date); [EOL]     Calendar c = Calendar.getInstance(TimeZone.getTimeZone("GMT")); [EOL]     long l = result.date.getTime(); [EOL]     if (l == 0L) { [EOL]         fail("Should not get null date"); [EOL]     } [EOL]     c.setTimeInMillis(l); [EOL]     assertEquals(2005, c.get(Calendar.YEAR)); [EOL]     assertEquals(Calendar.MAY, c.get(Calendar.MONTH)); [EOL]     assertEquals(25, c.get(Calendar.DAY_OF_MONTH)); [EOL] }
public void testCustomDateWithAnnotation() throws Exception { [EOL]     DateAsStringBean result = MAPPER.readValue("{\"date\":\"/2005/05/25/\"}", DateAsStringBean.class); [EOL]     assertNotNull(result); [EOL]     assertNotNull(result.date); [EOL]     Calendar c = Calendar.getInstance(TimeZone.getTimeZone("GMT")); [EOL]     long l = result.date.getTime(); [EOL]     if (l == 0L) { [EOL]         fail("Should not get null date"); [EOL]     } [EOL]     c.setTimeInMillis(l); [EOL]     assertEquals(2005, c.get(Calendar.YEAR)); [EOL]     assertEquals(Calendar.MAY, c.get(Calendar.MONTH)); [EOL]     assertEquals(25, c.get(Calendar.DAY_OF_MONTH)); [EOL] }
public void testCustomDateWithAnnotation() throws Exception { [EOL]     DateAsStringBean result = MAPPER.readValue("{\"date\":\"/2005/05/25/\"}", DateAsStringBean.class); [EOL]     assertNotNull(result); [EOL]     assertNotNull(result.date); [EOL]     Calendar c = Calendar.getInstance(TimeZone.getTimeZone("GMT")); [EOL]     long l = result.date.getTime(); [EOL]     if (l == 0L) { [EOL]         fail("Should not get null date"); [EOL]     } [EOL]     c.setTimeInMillis(l); [EOL]     assertEquals(2005, c.get(Calendar.YEAR)); [EOL]     assertEquals(Calendar.MAY, c.get(Calendar.MONTH)); [EOL]     assertEquals(25, c.get(Calendar.DAY_OF_MONTH)); [EOL] }
public void testCustomDateWithAnnotation() throws Exception { [EOL]     DateAsStringBean result = MAPPER.readValue("{\"date\":\"/2005/05/25/\"}", DateAsStringBean.class); [EOL]     assertNotNull(result); [EOL]     assertNotNull(result.date); [EOL]     Calendar c = Calendar.getInstance(TimeZone.getTimeZone("GMT")); [EOL]     long l = result.date.getTime(); [EOL]     if (l == 0L) { [EOL]         fail("Should not get null date"); [EOL]     } [EOL]     c.setTimeInMillis(l); [EOL]     assertEquals(2005, c.get(Calendar.YEAR)); [EOL]     assertEquals(Calendar.MAY, c.get(Calendar.MONTH)); [EOL]     assertEquals(25, c.get(Calendar.DAY_OF_MONTH)); [EOL] }
public void testCustomDateWithAnnotation() throws Exception { [EOL]     DateAsStringBean result = MAPPER.readValue("{\"date\":\"/2005/05/25/\"}", DateAsStringBean.class); [EOL]     assertNotNull(result); [EOL]     assertNotNull(result.date); [EOL]     Calendar c = Calendar.getInstance(TimeZone.getTimeZone("GMT")); [EOL]     long l = result.date.getTime(); [EOL]     if (l == 0L) { [EOL]         fail("Should not get null date"); [EOL]     } [EOL]     c.setTimeInMillis(l); [EOL]     assertEquals(2005, c.get(Calendar.YEAR)); [EOL]     assertEquals(Calendar.MAY, c.get(Calendar.MONTH)); [EOL]     assertEquals(25, c.get(Calendar.DAY_OF_MONTH)); [EOL] }
public void testCustomDateWithAnnotation() throws Exception { [EOL]     DateAsStringBean result = MAPPER.readValue("{\"date\":\"/2005/05/25/\"}", DateAsStringBean.class); [EOL]     assertNotNull(result); [EOL]     assertNotNull(result.date); [EOL]     Calendar c = Calendar.getInstance(TimeZone.getTimeZone("GMT")); [EOL]     long l = result.date.getTime(); [EOL]     if (l == 0L) { [EOL]         fail("Should not get null date"); [EOL]     } [EOL]     c.setTimeInMillis(l); [EOL]     assertEquals(2005, c.get(Calendar.YEAR)); [EOL]     assertEquals(Calendar.MAY, c.get(Calendar.MONTH)); [EOL]     assertEquals(25, c.get(Calendar.DAY_OF_MONTH)); [EOL] }
public void testCustomDateWithAnnotation() throws Exception { [EOL]     DateAsStringBean result = MAPPER.readValue("{\"date\":\"/2005/05/25/\"}", DateAsStringBean.class); [EOL]     assertNotNull(result); [EOL]     assertNotNull(result.date); [EOL]     Calendar c = Calendar.getInstance(TimeZone.getTimeZone("GMT")); [EOL]     long l = result.date.getTime(); [EOL]     if (l == 0L) { [EOL]         fail("Should not get null date"); [EOL]     } [EOL]     c.setTimeInMillis(l); [EOL]     assertEquals(2005, c.get(Calendar.YEAR)); [EOL]     assertEquals(Calendar.MAY, c.get(Calendar.MONTH)); [EOL]     assertEquals(25, c.get(Calendar.DAY_OF_MONTH)); [EOL] }
public void testCustomDateWithAnnotation() throws Exception { [EOL]     DateAsStringBean result = MAPPER.readValue("{\"date\":\"/2005/05/25/\"}", DateAsStringBean.class); [EOL]     assertNotNull(result); [EOL]     assertNotNull(result.date); [EOL]     Calendar c = Calendar.getInstance(TimeZone.getTimeZone("GMT")); [EOL]     long l = result.date.getTime(); [EOL]     if (l == 0L) { [EOL]         fail("Should not get null date"); [EOL]     } [EOL]     c.setTimeInMillis(l); [EOL]     assertEquals(2005, c.get(Calendar.YEAR)); [EOL]     assertEquals(Calendar.MAY, c.get(Calendar.MONTH)); [EOL]     assertEquals(25, c.get(Calendar.DAY_OF_MONTH)); [EOL] }
public void testCustomDateWithAnnotation() throws Exception { [EOL]     DateAsStringBean result = MAPPER.readValue("{\"date\":\"/2005/05/25/\"}", DateAsStringBean.class); [EOL]     assertNotNull(result); [EOL]     assertNotNull(result.date); [EOL]     Calendar c = Calendar.getInstance(TimeZone.getTimeZone("GMT")); [EOL]     long l = result.date.getTime(); [EOL]     if (l == 0L) { [EOL]         fail("Should not get null date"); [EOL]     } [EOL]     c.setTimeInMillis(l); [EOL]     assertEquals(2005, c.get(Calendar.YEAR)); [EOL]     assertEquals(Calendar.MAY, c.get(Calendar.MONTH)); [EOL]     assertEquals(25, c.get(Calendar.DAY_OF_MONTH)); [EOL] }
public void testCustomDateWithAnnotation() throws Exception { [EOL]     DateAsStringBean result = MAPPER.readValue("{\"date\":\"/2005/05/25/\"}", DateAsStringBean.class); [EOL]     assertNotNull(result); [EOL]     assertNotNull(result.date); [EOL]     Calendar c = Calendar.getInstance(TimeZone.getTimeZone("GMT")); [EOL]     long l = result.date.getTime(); [EOL]     if (l == 0L) { [EOL]         fail("Should not get null date"); [EOL]     } [EOL]     c.setTimeInMillis(l); [EOL]     assertEquals(2005, c.get(Calendar.YEAR)); [EOL]     assertEquals(Calendar.MAY, c.get(Calendar.MONTH)); [EOL]     assertEquals(25, c.get(Calendar.DAY_OF_MONTH)); [EOL] }
public void testCustomDateWithAnnotation() throws Exception { [EOL]     DateAsStringBean result = MAPPER.readValue("{\"date\":\"/2005/05/25/\"}", DateAsStringBean.class); [EOL]     assertNotNull(result); [EOL]     assertNotNull(result.date); [EOL]     Calendar c = Calendar.getInstance(TimeZone.getTimeZone("GMT")); [EOL]     long l = result.date.getTime(); [EOL]     if (l == 0L) { [EOL]         fail("Should not get null date"); [EOL]     } [EOL]     c.setTimeInMillis(l); [EOL]     assertEquals(2005, c.get(Calendar.YEAR)); [EOL]     assertEquals(Calendar.MAY, c.get(Calendar.MONTH)); [EOL]     assertEquals(25, c.get(Calendar.DAY_OF_MONTH)); [EOL] }
public void testCustomDateWithAnnotation() throws Exception { [EOL]     DateAsStringBean result = MAPPER.readValue("{\"date\":\"/2005/05/25/\"}", DateAsStringBean.class); [EOL]     assertNotNull(result); [EOL]     assertNotNull(result.date); [EOL]     Calendar c = Calendar.getInstance(TimeZone.getTimeZone("GMT")); [EOL]     long l = result.date.getTime(); [EOL]     if (l == 0L) { [EOL]         fail("Should not get null date"); [EOL]     } [EOL]     c.setTimeInMillis(l); [EOL]     assertEquals(2005, c.get(Calendar.YEAR)); [EOL]     assertEquals(Calendar.MAY, c.get(Calendar.MONTH)); [EOL]     assertEquals(25, c.get(Calendar.DAY_OF_MONTH)); [EOL] }
public void testCustomDateWithAnnotation() throws Exception { [EOL]     DateAsStringBean result = MAPPER.readValue("{\"date\":\"/2005/05/25/\"}", DateAsStringBean.class); [EOL]     assertNotNull(result); [EOL]     assertNotNull(result.date); [EOL]     Calendar c = Calendar.getInstance(TimeZone.getTimeZone("GMT")); [EOL]     long l = result.date.getTime(); [EOL]     if (l == 0L) { [EOL]         fail("Should not get null date"); [EOL]     } [EOL]     c.setTimeInMillis(l); [EOL]     assertEquals(2005, c.get(Calendar.YEAR)); [EOL]     assertEquals(Calendar.MAY, c.get(Calendar.MONTH)); [EOL]     assertEquals(25, c.get(Calendar.DAY_OF_MONTH)); [EOL] }
public void testTimestampUtil() throws Exception { [EOL]     long now = 123456789L; [EOL]     java.sql.Timestamp value = new java.sql.Timestamp(now); [EOL]     assertEquals(value, new ObjectMapper().readValue("" + now, java.sql.Timestamp.class)); [EOL]     String dateStr = serializeTimestampAsString(value); [EOL]     java.sql.Timestamp result = new ObjectMapper().readValue("\"" + dateStr + "\"", java.sql.Timestamp.class); [EOL]     assertEquals("Date: expect " + value + " (" + value.getTime() + "), got " + result + " (" + result.getTime() + ")", value.getTime(), result.getTime()); [EOL] }
public void testTimestampUtil() throws Exception { [EOL]     long now = 123456789L; [EOL]     java.sql.Timestamp value = new java.sql.Timestamp(now); [EOL]     assertEquals(value, new ObjectMapper().readValue("" + now, java.sql.Timestamp.class)); [EOL]     String dateStr = serializeTimestampAsString(value); [EOL]     java.sql.Timestamp result = new ObjectMapper().readValue("\"" + dateStr + "\"", java.sql.Timestamp.class); [EOL]     assertEquals("Date: expect " + value + " (" + value.getTime() + "), got " + result + " (" + result.getTime() + ")", value.getTime(), result.getTime()); [EOL] }
public void testTimestampUtil() throws Exception { [EOL]     long now = 123456789L; [EOL]     java.sql.Timestamp value = new java.sql.Timestamp(now); [EOL]     assertEquals(value, new ObjectMapper().readValue("" + now, java.sql.Timestamp.class)); [EOL]     String dateStr = serializeTimestampAsString(value); [EOL]     java.sql.Timestamp result = new ObjectMapper().readValue("\"" + dateStr + "\"", java.sql.Timestamp.class); [EOL]     assertEquals("Date: expect " + value + " (" + value.getTime() + "), got " + result + " (" + result.getTime() + ")", value.getTime(), result.getTime()); [EOL] }
public void testDateTypes() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.enableDefaultTyping(); [EOL]     ObjectListBean input = new ObjectListBean(); [EOL]     List<Object> inputList = new ArrayList<Object>(); [EOL]     inputList.add(TimeZone.getTimeZone("EST")); [EOL]     inputList.add(Locale.CHINESE); [EOL]     input.values = inputList; [EOL]     String json = m.writeValueAsString(input); [EOL]     ObjectListBean output = m.readValue(json, ObjectListBean.class); [EOL]     List<Object> outputList = output.values; [EOL]     assertEquals(2, outputList.size()); [EOL]     assertTrue(outputList.get(0) instanceof TimeZone); [EOL]     assertTrue(outputList.get(1) instanceof Locale); [EOL] }
public void testDateTypes() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.enableDefaultTyping(); [EOL]     ObjectListBean input = new ObjectListBean(); [EOL]     List<Object> inputList = new ArrayList<Object>(); [EOL]     inputList.add(TimeZone.getTimeZone("EST")); [EOL]     inputList.add(Locale.CHINESE); [EOL]     input.values = inputList; [EOL]     String json = m.writeValueAsString(input); [EOL]     ObjectListBean output = m.readValue(json, ObjectListBean.class); [EOL]     List<Object> outputList = output.values; [EOL]     assertEquals(2, outputList.size()); [EOL]     assertTrue(outputList.get(0) instanceof TimeZone); [EOL]     assertTrue(outputList.get(1) instanceof Locale); [EOL] }
public void testDateTypes() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.enableDefaultTyping(); [EOL]     ObjectListBean input = new ObjectListBean(); [EOL]     List<Object> inputList = new ArrayList<Object>(); [EOL]     inputList.add(TimeZone.getTimeZone("EST")); [EOL]     inputList.add(Locale.CHINESE); [EOL]     input.values = inputList; [EOL]     String json = m.writeValueAsString(input); [EOL]     ObjectListBean output = m.readValue(json, ObjectListBean.class); [EOL]     List<Object> outputList = output.values; [EOL]     assertEquals(2, outputList.size()); [EOL]     assertTrue(outputList.get(0) instanceof TimeZone); [EOL]     assertTrue(outputList.get(1) instanceof Locale); [EOL] }
public void testDateTypes() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.enableDefaultTyping(); [EOL]     ObjectListBean input = new ObjectListBean(); [EOL]     List<Object> inputList = new ArrayList<Object>(); [EOL]     inputList.add(TimeZone.getTimeZone("EST")); [EOL]     inputList.add(Locale.CHINESE); [EOL]     input.values = inputList; [EOL]     String json = m.writeValueAsString(input); [EOL]     ObjectListBean output = m.readValue(json, ObjectListBean.class); [EOL]     List<Object> outputList = output.values; [EOL]     assertEquals(2, outputList.size()); [EOL]     assertTrue(outputList.get(0) instanceof TimeZone); [EOL]     assertTrue(outputList.get(1) instanceof Locale); [EOL] }
public void testArray() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     JsonParser jp = m.readTree("[]").traverse(); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     jp.close(); [EOL]     jp = m.readTree("[[]]").traverse(); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     jp.close(); [EOL]     jp = m.readTree("[[ 12.1 ]]").traverse(); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_FLOAT, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     jp.close(); [EOL] }
public void testArray() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     JsonParser jp = m.readTree("[]").traverse(); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     jp.close(); [EOL]     jp = m.readTree("[[]]").traverse(); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     jp.close(); [EOL]     jp = m.readTree("[[ 12.1 ]]").traverse(); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_FLOAT, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     jp.close(); [EOL] }
public void testArray() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     JsonParser jp = m.readTree("[]").traverse(); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     jp.close(); [EOL]     jp = m.readTree("[[]]").traverse(); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     jp.close(); [EOL]     jp = m.readTree("[[ 12.1 ]]").traverse(); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_FLOAT, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     jp.close(); [EOL] }
public void testArray() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     JsonParser jp = m.readTree("[]").traverse(); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     jp.close(); [EOL]     jp = m.readTree("[[]]").traverse(); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     jp.close(); [EOL]     jp = m.readTree("[[ 12.1 ]]").traverse(); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_FLOAT, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     jp.close(); [EOL] }
public void testArray() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     JsonParser jp = m.readTree("[]").traverse(); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     jp.close(); [EOL]     jp = m.readTree("[[]]").traverse(); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     jp.close(); [EOL]     jp = m.readTree("[[ 12.1 ]]").traverse(); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_FLOAT, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     jp.close(); [EOL] }
public void testArray() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     JsonParser jp = m.readTree("[]").traverse(); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     jp.close(); [EOL]     jp = m.readTree("[[]]").traverse(); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     jp.close(); [EOL]     jp = m.readTree("[[ 12.1 ]]").traverse(); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_FLOAT, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     jp.close(); [EOL] }
public void testArray() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     JsonParser jp = m.readTree("[]").traverse(); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     jp.close(); [EOL]     jp = m.readTree("[[]]").traverse(); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     jp.close(); [EOL]     jp = m.readTree("[[ 12.1 ]]").traverse(); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_FLOAT, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     jp.close(); [EOL] }
public void testArray() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     JsonParser jp = m.readTree("[]").traverse(); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     jp.close(); [EOL]     jp = m.readTree("[[]]").traverse(); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     jp.close(); [EOL]     jp = m.readTree("[[ 12.1 ]]").traverse(); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_FLOAT, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     jp.close(); [EOL] }
public void testArray() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     JsonParser jp = m.readTree("[]").traverse(); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     jp.close(); [EOL]     jp = m.readTree("[[]]").traverse(); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     jp.close(); [EOL]     jp = m.readTree("[[ 12.1 ]]").traverse(); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_FLOAT, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     jp.close(); [EOL] }
public void testSpecDoc() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     JsonNode tree = m.readTree(SAMPLE_DOC_JSON_SPEC); [EOL]     JsonParser jp = tree.traverse(); [EOL]     verifyJsonSpecSampleDoc(jp, true); [EOL] }
public void testSpecDoc() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     JsonNode tree = m.readTree(SAMPLE_DOC_JSON_SPEC); [EOL]     JsonParser jp = tree.traverse(); [EOL]     verifyJsonSpecSampleDoc(jp, true); [EOL] }
public void testSpecDoc() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     JsonNode tree = m.readTree(SAMPLE_DOC_JSON_SPEC); [EOL]     JsonParser jp = tree.traverse(); [EOL]     verifyJsonSpecSampleDoc(jp, true); [EOL] }
public void testSpecDoc() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     JsonNode tree = m.readTree(SAMPLE_DOC_JSON_SPEC); [EOL]     JsonParser jp = tree.traverse(); [EOL]     verifyJsonSpecSampleDoc(jp, true); [EOL] }
public void testSpecDoc() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     JsonNode tree = m.readTree(SAMPLE_DOC_JSON_SPEC); [EOL]     JsonParser jp = tree.traverse(); [EOL]     verifyJsonSpecSampleDoc(jp, true); [EOL] }
public void testSpecDoc() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     JsonNode tree = m.readTree(SAMPLE_DOC_JSON_SPEC); [EOL]     JsonParser jp = tree.traverse(); [EOL]     verifyJsonSpecSampleDoc(jp, true); [EOL] }
public void testSpecDoc() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     JsonNode tree = m.readTree(SAMPLE_DOC_JSON_SPEC); [EOL]     JsonParser jp = tree.traverse(); [EOL]     verifyJsonSpecSampleDoc(jp, true); [EOL] }
public void testSpecDoc() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     JsonNode tree = m.readTree(SAMPLE_DOC_JSON_SPEC); [EOL]     JsonParser jp = tree.traverse(); [EOL]     verifyJsonSpecSampleDoc(jp, true); [EOL] }
public void testSpecDoc() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     JsonNode tree = m.readTree(SAMPLE_DOC_JSON_SPEC); [EOL]     JsonParser jp = tree.traverse(); [EOL]     verifyJsonSpecSampleDoc(jp, true); [EOL] }
public void testSpecDoc() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     JsonNode tree = m.readTree(SAMPLE_DOC_JSON_SPEC); [EOL]     JsonParser jp = tree.traverse(); [EOL]     verifyJsonSpecSampleDoc(jp, true); [EOL] }
public void testSpecDoc() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     JsonNode tree = m.readTree(SAMPLE_DOC_JSON_SPEC); [EOL]     JsonParser jp = tree.traverse(); [EOL]     verifyJsonSpecSampleDoc(jp, true); [EOL] }
public void testSpecDoc() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     JsonNode tree = m.readTree(SAMPLE_DOC_JSON_SPEC); [EOL]     JsonParser jp = tree.traverse(); [EOL]     verifyJsonSpecSampleDoc(jp, true); [EOL] }
public void testDateTypes() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.enableDefaultTyping(); [EOL]     ObjectListBean input = new ObjectListBean(); [EOL]     List<Object> inputList = new ArrayList<Object>(); [EOL]     inputList.add(TimeZone.getTimeZone("EST")); [EOL]     inputList.add(Locale.CHINESE); [EOL]     input.values = inputList; [EOL]     String json = m.writeValueAsString(input); [EOL]     ObjectListBean output = m.readValue(json, ObjectListBean.class); [EOL]     List<Object> outputList = output.values; [EOL]     assertEquals(2, outputList.size()); [EOL]     assertTrue(outputList.get(0) instanceof TimeZone); [EOL]     assertTrue(outputList.get(1) instanceof Locale); [EOL] }
public void testDateTypes() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.enableDefaultTyping(); [EOL]     ObjectListBean input = new ObjectListBean(); [EOL]     List<Object> inputList = new ArrayList<Object>(); [EOL]     inputList.add(TimeZone.getTimeZone("EST")); [EOL]     inputList.add(Locale.CHINESE); [EOL]     input.values = inputList; [EOL]     String json = m.writeValueAsString(input); [EOL]     ObjectListBean output = m.readValue(json, ObjectListBean.class); [EOL]     List<Object> outputList = output.values; [EOL]     assertEquals(2, outputList.size()); [EOL]     assertTrue(outputList.get(0) instanceof TimeZone); [EOL]     assertTrue(outputList.get(1) instanceof Locale); [EOL] }
public void testDateTypes() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.enableDefaultTyping(); [EOL]     ObjectListBean input = new ObjectListBean(); [EOL]     List<Object> inputList = new ArrayList<Object>(); [EOL]     inputList.add(TimeZone.getTimeZone("EST")); [EOL]     inputList.add(Locale.CHINESE); [EOL]     input.values = inputList; [EOL]     String json = m.writeValueAsString(input); [EOL]     ObjectListBean output = m.readValue(json, ObjectListBean.class); [EOL]     List<Object> outputList = output.values; [EOL]     assertEquals(2, outputList.size()); [EOL]     assertTrue(outputList.get(0) instanceof TimeZone); [EOL]     assertTrue(outputList.get(1) instanceof Locale); [EOL] }
public void testBuilderReplacement() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerModule(new ModuleImpl(new BuilderModifier(new BogusBeanSerializer(17)))); [EOL]     Bean bean = new Bean(); [EOL]     assertEquals("17", mapper.writeValueAsString(bean)); [EOL] }
public void testInvalidMultipleTypeIds() throws Exception { [EOL]     try { [EOL]         mapper.writeValueAsString(new MultipleIds()); [EOL]         fail("Should have failed"); [EOL]     } catch (JsonMappingException e) { [EOL]         verifyException(e, "multiple type ids"); [EOL]     } [EOL] }
public void testInvalidMultipleTypeIds() throws Exception { [EOL]     try { [EOL]         mapper.writeValueAsString(new MultipleIds()); [EOL]         fail("Should have failed"); [EOL]     } catch (JsonMappingException e) { [EOL]         verifyException(e, "multiple type ids"); [EOL]     } [EOL] }
public void testInvalidMultipleTypeIds() throws Exception { [EOL]     try { [EOL]         mapper.writeValueAsString(new MultipleIds()); [EOL]         fail("Should have failed"); [EOL]     } catch (JsonMappingException e) { [EOL]         verifyException(e, "multiple type ids"); [EOL]     } [EOL] }
public void testJson() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.setPropertyNamingStrategy(new LcStrategy()); [EOL]     RenamedCollectionBean foo = mapper.readValue("{\"thevalues\":[\"a\"]}", RenamedCollectionBean.class); [EOL]     assertNotNull(foo.getTheVALUEs()); [EOL]     assertEquals(1, foo.getTheVALUEs().size()); [EOL]     assertEquals("a", foo.getTheVALUEs().get(0)); [EOL] }
public void testToStringEnumWithEnumMap() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.configure(SerializationFeature.WRITE_ENUMS_USING_TO_STRING, true); [EOL]     EnumMap<LowerCaseEnum, String> m = new EnumMap<LowerCaseEnum, String>(LowerCaseEnum.class); [EOL]     m.put(LowerCaseEnum.C, "value"); [EOL]     assertEquals("{\"c\":\"value\"}", mapper.writeValueAsString(m)); [EOL] }
public void testToStringEnumWithEnumMap() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.configure(SerializationFeature.WRITE_ENUMS_USING_TO_STRING, true); [EOL]     EnumMap<LowerCaseEnum, String> m = new EnumMap<LowerCaseEnum, String>(LowerCaseEnum.class); [EOL]     m.put(LowerCaseEnum.C, "value"); [EOL]     assertEquals("{\"c\":\"value\"}", mapper.writeValueAsString(m)); [EOL] }
public void testBigIntegerNode() throws Exception { [EOL]     BigIntegerNode n = BigIntegerNode.valueOf(BigInteger.ONE); [EOL]     assertStandardEquals(n); [EOL]     assertTrue(n.equals(new BigIntegerNode(BigInteger.ONE))); [EOL]     assertEquals(JsonToken.VALUE_NUMBER_INT, n.asToken()); [EOL]     assertEquals(JsonParser.NumberType.BIG_INTEGER, n.numberType()); [EOL]     assertTrue(n.isNumber()); [EOL]     assertTrue(n.isIntegralNumber()); [EOL]     assertTrue(n.isBigInteger()); [EOL]     assertEquals(BigInteger.ONE, n.numberValue()); [EOL]     assertEquals(1, n.intValue()); [EOL]     assertEquals(1L, n.longValue()); [EOL]     assertEquals(BigInteger.ONE, n.bigIntegerValue()); [EOL]     assertEquals("1", n.asText()); [EOL]     assertNodeNumbers(n, 1, 1.0); [EOL]     BigInteger maxLong = BigInteger.valueOf(Long.MAX_VALUE); [EOL]     n = BigIntegerNode.valueOf(maxLong); [EOL]     assertEquals(Long.MAX_VALUE, n.longValue()); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     JsonNode n2 = mapper.readTree(maxLong.toString()); [EOL]     assertEquals(Long.MAX_VALUE, n2.longValue()); [EOL]     BigInteger beyondLong = maxLong.shiftLeft(2); [EOL]     n2 = mapper.readTree(beyondLong.toString()); [EOL]     assertEquals(beyondLong, n2.bigIntegerValue()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.ZERO).canConvertToInt()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.valueOf(Integer.MAX_VALUE)).canConvertToInt()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.valueOf(Integer.MIN_VALUE)).canConvertToInt()); [EOL]     assertFalse(BigIntegerNode.valueOf(BigInteger.valueOf(1L + Integer.MAX_VALUE)).canConvertToInt()); [EOL]     assertFalse(BigIntegerNode.valueOf(BigInteger.valueOf(-1L + Integer.MIN_VALUE)).canConvertToInt()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.ZERO).canConvertToLong()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.valueOf(Long.MAX_VALUE)).canConvertToLong()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.valueOf(Long.MIN_VALUE)).canConvertToLong()); [EOL] }
public void testBigIntegerNode() throws Exception { [EOL]     BigIntegerNode n = BigIntegerNode.valueOf(BigInteger.ONE); [EOL]     assertStandardEquals(n); [EOL]     assertTrue(n.equals(new BigIntegerNode(BigInteger.ONE))); [EOL]     assertEquals(JsonToken.VALUE_NUMBER_INT, n.asToken()); [EOL]     assertEquals(JsonParser.NumberType.BIG_INTEGER, n.numberType()); [EOL]     assertTrue(n.isNumber()); [EOL]     assertTrue(n.isIntegralNumber()); [EOL]     assertTrue(n.isBigInteger()); [EOL]     assertEquals(BigInteger.ONE, n.numberValue()); [EOL]     assertEquals(1, n.intValue()); [EOL]     assertEquals(1L, n.longValue()); [EOL]     assertEquals(BigInteger.ONE, n.bigIntegerValue()); [EOL]     assertEquals("1", n.asText()); [EOL]     assertNodeNumbers(n, 1, 1.0); [EOL]     BigInteger maxLong = BigInteger.valueOf(Long.MAX_VALUE); [EOL]     n = BigIntegerNode.valueOf(maxLong); [EOL]     assertEquals(Long.MAX_VALUE, n.longValue()); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     JsonNode n2 = mapper.readTree(maxLong.toString()); [EOL]     assertEquals(Long.MAX_VALUE, n2.longValue()); [EOL]     BigInteger beyondLong = maxLong.shiftLeft(2); [EOL]     n2 = mapper.readTree(beyondLong.toString()); [EOL]     assertEquals(beyondLong, n2.bigIntegerValue()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.ZERO).canConvertToInt()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.valueOf(Integer.MAX_VALUE)).canConvertToInt()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.valueOf(Integer.MIN_VALUE)).canConvertToInt()); [EOL]     assertFalse(BigIntegerNode.valueOf(BigInteger.valueOf(1L + Integer.MAX_VALUE)).canConvertToInt()); [EOL]     assertFalse(BigIntegerNode.valueOf(BigInteger.valueOf(-1L + Integer.MIN_VALUE)).canConvertToInt()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.ZERO).canConvertToLong()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.valueOf(Long.MAX_VALUE)).canConvertToLong()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.valueOf(Long.MIN_VALUE)).canConvertToLong()); [EOL] }
public void testBigIntegerNode() throws Exception { [EOL]     BigIntegerNode n = BigIntegerNode.valueOf(BigInteger.ONE); [EOL]     assertStandardEquals(n); [EOL]     assertTrue(n.equals(new BigIntegerNode(BigInteger.ONE))); [EOL]     assertEquals(JsonToken.VALUE_NUMBER_INT, n.asToken()); [EOL]     assertEquals(JsonParser.NumberType.BIG_INTEGER, n.numberType()); [EOL]     assertTrue(n.isNumber()); [EOL]     assertTrue(n.isIntegralNumber()); [EOL]     assertTrue(n.isBigInteger()); [EOL]     assertEquals(BigInteger.ONE, n.numberValue()); [EOL]     assertEquals(1, n.intValue()); [EOL]     assertEquals(1L, n.longValue()); [EOL]     assertEquals(BigInteger.ONE, n.bigIntegerValue()); [EOL]     assertEquals("1", n.asText()); [EOL]     assertNodeNumbers(n, 1, 1.0); [EOL]     BigInteger maxLong = BigInteger.valueOf(Long.MAX_VALUE); [EOL]     n = BigIntegerNode.valueOf(maxLong); [EOL]     assertEquals(Long.MAX_VALUE, n.longValue()); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     JsonNode n2 = mapper.readTree(maxLong.toString()); [EOL]     assertEquals(Long.MAX_VALUE, n2.longValue()); [EOL]     BigInteger beyondLong = maxLong.shiftLeft(2); [EOL]     n2 = mapper.readTree(beyondLong.toString()); [EOL]     assertEquals(beyondLong, n2.bigIntegerValue()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.ZERO).canConvertToInt()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.valueOf(Integer.MAX_VALUE)).canConvertToInt()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.valueOf(Integer.MIN_VALUE)).canConvertToInt()); [EOL]     assertFalse(BigIntegerNode.valueOf(BigInteger.valueOf(1L + Integer.MAX_VALUE)).canConvertToInt()); [EOL]     assertFalse(BigIntegerNode.valueOf(BigInteger.valueOf(-1L + Integer.MIN_VALUE)).canConvertToInt()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.ZERO).canConvertToLong()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.valueOf(Long.MAX_VALUE)).canConvertToLong()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.valueOf(Long.MIN_VALUE)).canConvertToLong()); [EOL] }
public void testBigIntegerNode() throws Exception { [EOL]     BigIntegerNode n = BigIntegerNode.valueOf(BigInteger.ONE); [EOL]     assertStandardEquals(n); [EOL]     assertTrue(n.equals(new BigIntegerNode(BigInteger.ONE))); [EOL]     assertEquals(JsonToken.VALUE_NUMBER_INT, n.asToken()); [EOL]     assertEquals(JsonParser.NumberType.BIG_INTEGER, n.numberType()); [EOL]     assertTrue(n.isNumber()); [EOL]     assertTrue(n.isIntegralNumber()); [EOL]     assertTrue(n.isBigInteger()); [EOL]     assertEquals(BigInteger.ONE, n.numberValue()); [EOL]     assertEquals(1, n.intValue()); [EOL]     assertEquals(1L, n.longValue()); [EOL]     assertEquals(BigInteger.ONE, n.bigIntegerValue()); [EOL]     assertEquals("1", n.asText()); [EOL]     assertNodeNumbers(n, 1, 1.0); [EOL]     BigInteger maxLong = BigInteger.valueOf(Long.MAX_VALUE); [EOL]     n = BigIntegerNode.valueOf(maxLong); [EOL]     assertEquals(Long.MAX_VALUE, n.longValue()); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     JsonNode n2 = mapper.readTree(maxLong.toString()); [EOL]     assertEquals(Long.MAX_VALUE, n2.longValue()); [EOL]     BigInteger beyondLong = maxLong.shiftLeft(2); [EOL]     n2 = mapper.readTree(beyondLong.toString()); [EOL]     assertEquals(beyondLong, n2.bigIntegerValue()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.ZERO).canConvertToInt()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.valueOf(Integer.MAX_VALUE)).canConvertToInt()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.valueOf(Integer.MIN_VALUE)).canConvertToInt()); [EOL]     assertFalse(BigIntegerNode.valueOf(BigInteger.valueOf(1L + Integer.MAX_VALUE)).canConvertToInt()); [EOL]     assertFalse(BigIntegerNode.valueOf(BigInteger.valueOf(-1L + Integer.MIN_VALUE)).canConvertToInt()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.ZERO).canConvertToLong()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.valueOf(Long.MAX_VALUE)).canConvertToLong()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.valueOf(Long.MIN_VALUE)).canConvertToLong()); [EOL] }
public void testBigIntegerNode() throws Exception { [EOL]     BigIntegerNode n = BigIntegerNode.valueOf(BigInteger.ONE); [EOL]     assertStandardEquals(n); [EOL]     assertTrue(n.equals(new BigIntegerNode(BigInteger.ONE))); [EOL]     assertEquals(JsonToken.VALUE_NUMBER_INT, n.asToken()); [EOL]     assertEquals(JsonParser.NumberType.BIG_INTEGER, n.numberType()); [EOL]     assertTrue(n.isNumber()); [EOL]     assertTrue(n.isIntegralNumber()); [EOL]     assertTrue(n.isBigInteger()); [EOL]     assertEquals(BigInteger.ONE, n.numberValue()); [EOL]     assertEquals(1, n.intValue()); [EOL]     assertEquals(1L, n.longValue()); [EOL]     assertEquals(BigInteger.ONE, n.bigIntegerValue()); [EOL]     assertEquals("1", n.asText()); [EOL]     assertNodeNumbers(n, 1, 1.0); [EOL]     BigInteger maxLong = BigInteger.valueOf(Long.MAX_VALUE); [EOL]     n = BigIntegerNode.valueOf(maxLong); [EOL]     assertEquals(Long.MAX_VALUE, n.longValue()); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     JsonNode n2 = mapper.readTree(maxLong.toString()); [EOL]     assertEquals(Long.MAX_VALUE, n2.longValue()); [EOL]     BigInteger beyondLong = maxLong.shiftLeft(2); [EOL]     n2 = mapper.readTree(beyondLong.toString()); [EOL]     assertEquals(beyondLong, n2.bigIntegerValue()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.ZERO).canConvertToInt()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.valueOf(Integer.MAX_VALUE)).canConvertToInt()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.valueOf(Integer.MIN_VALUE)).canConvertToInt()); [EOL]     assertFalse(BigIntegerNode.valueOf(BigInteger.valueOf(1L + Integer.MAX_VALUE)).canConvertToInt()); [EOL]     assertFalse(BigIntegerNode.valueOf(BigInteger.valueOf(-1L + Integer.MIN_VALUE)).canConvertToInt()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.ZERO).canConvertToLong()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.valueOf(Long.MAX_VALUE)).canConvertToLong()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.valueOf(Long.MIN_VALUE)).canConvertToLong()); [EOL] }
public void testBigIntegerNode() throws Exception { [EOL]     BigIntegerNode n = BigIntegerNode.valueOf(BigInteger.ONE); [EOL]     assertStandardEquals(n); [EOL]     assertTrue(n.equals(new BigIntegerNode(BigInteger.ONE))); [EOL]     assertEquals(JsonToken.VALUE_NUMBER_INT, n.asToken()); [EOL]     assertEquals(JsonParser.NumberType.BIG_INTEGER, n.numberType()); [EOL]     assertTrue(n.isNumber()); [EOL]     assertTrue(n.isIntegralNumber()); [EOL]     assertTrue(n.isBigInteger()); [EOL]     assertEquals(BigInteger.ONE, n.numberValue()); [EOL]     assertEquals(1, n.intValue()); [EOL]     assertEquals(1L, n.longValue()); [EOL]     assertEquals(BigInteger.ONE, n.bigIntegerValue()); [EOL]     assertEquals("1", n.asText()); [EOL]     assertNodeNumbers(n, 1, 1.0); [EOL]     BigInteger maxLong = BigInteger.valueOf(Long.MAX_VALUE); [EOL]     n = BigIntegerNode.valueOf(maxLong); [EOL]     assertEquals(Long.MAX_VALUE, n.longValue()); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     JsonNode n2 = mapper.readTree(maxLong.toString()); [EOL]     assertEquals(Long.MAX_VALUE, n2.longValue()); [EOL]     BigInteger beyondLong = maxLong.shiftLeft(2); [EOL]     n2 = mapper.readTree(beyondLong.toString()); [EOL]     assertEquals(beyondLong, n2.bigIntegerValue()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.ZERO).canConvertToInt()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.valueOf(Integer.MAX_VALUE)).canConvertToInt()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.valueOf(Integer.MIN_VALUE)).canConvertToInt()); [EOL]     assertFalse(BigIntegerNode.valueOf(BigInteger.valueOf(1L + Integer.MAX_VALUE)).canConvertToInt()); [EOL]     assertFalse(BigIntegerNode.valueOf(BigInteger.valueOf(-1L + Integer.MIN_VALUE)).canConvertToInt()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.ZERO).canConvertToLong()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.valueOf(Long.MAX_VALUE)).canConvertToLong()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.valueOf(Long.MIN_VALUE)).canConvertToLong()); [EOL] }
public void testBigIntegerNode() throws Exception { [EOL]     BigIntegerNode n = BigIntegerNode.valueOf(BigInteger.ONE); [EOL]     assertStandardEquals(n); [EOL]     assertTrue(n.equals(new BigIntegerNode(BigInteger.ONE))); [EOL]     assertEquals(JsonToken.VALUE_NUMBER_INT, n.asToken()); [EOL]     assertEquals(JsonParser.NumberType.BIG_INTEGER, n.numberType()); [EOL]     assertTrue(n.isNumber()); [EOL]     assertTrue(n.isIntegralNumber()); [EOL]     assertTrue(n.isBigInteger()); [EOL]     assertEquals(BigInteger.ONE, n.numberValue()); [EOL]     assertEquals(1, n.intValue()); [EOL]     assertEquals(1L, n.longValue()); [EOL]     assertEquals(BigInteger.ONE, n.bigIntegerValue()); [EOL]     assertEquals("1", n.asText()); [EOL]     assertNodeNumbers(n, 1, 1.0); [EOL]     BigInteger maxLong = BigInteger.valueOf(Long.MAX_VALUE); [EOL]     n = BigIntegerNode.valueOf(maxLong); [EOL]     assertEquals(Long.MAX_VALUE, n.longValue()); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     JsonNode n2 = mapper.readTree(maxLong.toString()); [EOL]     assertEquals(Long.MAX_VALUE, n2.longValue()); [EOL]     BigInteger beyondLong = maxLong.shiftLeft(2); [EOL]     n2 = mapper.readTree(beyondLong.toString()); [EOL]     assertEquals(beyondLong, n2.bigIntegerValue()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.ZERO).canConvertToInt()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.valueOf(Integer.MAX_VALUE)).canConvertToInt()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.valueOf(Integer.MIN_VALUE)).canConvertToInt()); [EOL]     assertFalse(BigIntegerNode.valueOf(BigInteger.valueOf(1L + Integer.MAX_VALUE)).canConvertToInt()); [EOL]     assertFalse(BigIntegerNode.valueOf(BigInteger.valueOf(-1L + Integer.MIN_VALUE)).canConvertToInt()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.ZERO).canConvertToLong()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.valueOf(Long.MAX_VALUE)).canConvertToLong()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.valueOf(Long.MIN_VALUE)).canConvertToLong()); [EOL] }
public void testBigIntegerNode() throws Exception { [EOL]     BigIntegerNode n = BigIntegerNode.valueOf(BigInteger.ONE); [EOL]     assertStandardEquals(n); [EOL]     assertTrue(n.equals(new BigIntegerNode(BigInteger.ONE))); [EOL]     assertEquals(JsonToken.VALUE_NUMBER_INT, n.asToken()); [EOL]     assertEquals(JsonParser.NumberType.BIG_INTEGER, n.numberType()); [EOL]     assertTrue(n.isNumber()); [EOL]     assertTrue(n.isIntegralNumber()); [EOL]     assertTrue(n.isBigInteger()); [EOL]     assertEquals(BigInteger.ONE, n.numberValue()); [EOL]     assertEquals(1, n.intValue()); [EOL]     assertEquals(1L, n.longValue()); [EOL]     assertEquals(BigInteger.ONE, n.bigIntegerValue()); [EOL]     assertEquals("1", n.asText()); [EOL]     assertNodeNumbers(n, 1, 1.0); [EOL]     BigInteger maxLong = BigInteger.valueOf(Long.MAX_VALUE); [EOL]     n = BigIntegerNode.valueOf(maxLong); [EOL]     assertEquals(Long.MAX_VALUE, n.longValue()); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     JsonNode n2 = mapper.readTree(maxLong.toString()); [EOL]     assertEquals(Long.MAX_VALUE, n2.longValue()); [EOL]     BigInteger beyondLong = maxLong.shiftLeft(2); [EOL]     n2 = mapper.readTree(beyondLong.toString()); [EOL]     assertEquals(beyondLong, n2.bigIntegerValue()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.ZERO).canConvertToInt()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.valueOf(Integer.MAX_VALUE)).canConvertToInt()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.valueOf(Integer.MIN_VALUE)).canConvertToInt()); [EOL]     assertFalse(BigIntegerNode.valueOf(BigInteger.valueOf(1L + Integer.MAX_VALUE)).canConvertToInt()); [EOL]     assertFalse(BigIntegerNode.valueOf(BigInteger.valueOf(-1L + Integer.MIN_VALUE)).canConvertToInt()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.ZERO).canConvertToLong()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.valueOf(Long.MAX_VALUE)).canConvertToLong()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.valueOf(Long.MIN_VALUE)).canConvertToLong()); [EOL] }
public void testBigIntegerNode() throws Exception { [EOL]     BigIntegerNode n = BigIntegerNode.valueOf(BigInteger.ONE); [EOL]     assertStandardEquals(n); [EOL]     assertTrue(n.equals(new BigIntegerNode(BigInteger.ONE))); [EOL]     assertEquals(JsonToken.VALUE_NUMBER_INT, n.asToken()); [EOL]     assertEquals(JsonParser.NumberType.BIG_INTEGER, n.numberType()); [EOL]     assertTrue(n.isNumber()); [EOL]     assertTrue(n.isIntegralNumber()); [EOL]     assertTrue(n.isBigInteger()); [EOL]     assertEquals(BigInteger.ONE, n.numberValue()); [EOL]     assertEquals(1, n.intValue()); [EOL]     assertEquals(1L, n.longValue()); [EOL]     assertEquals(BigInteger.ONE, n.bigIntegerValue()); [EOL]     assertEquals("1", n.asText()); [EOL]     assertNodeNumbers(n, 1, 1.0); [EOL]     BigInteger maxLong = BigInteger.valueOf(Long.MAX_VALUE); [EOL]     n = BigIntegerNode.valueOf(maxLong); [EOL]     assertEquals(Long.MAX_VALUE, n.longValue()); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     JsonNode n2 = mapper.readTree(maxLong.toString()); [EOL]     assertEquals(Long.MAX_VALUE, n2.longValue()); [EOL]     BigInteger beyondLong = maxLong.shiftLeft(2); [EOL]     n2 = mapper.readTree(beyondLong.toString()); [EOL]     assertEquals(beyondLong, n2.bigIntegerValue()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.ZERO).canConvertToInt()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.valueOf(Integer.MAX_VALUE)).canConvertToInt()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.valueOf(Integer.MIN_VALUE)).canConvertToInt()); [EOL]     assertFalse(BigIntegerNode.valueOf(BigInteger.valueOf(1L + Integer.MAX_VALUE)).canConvertToInt()); [EOL]     assertFalse(BigIntegerNode.valueOf(BigInteger.valueOf(-1L + Integer.MIN_VALUE)).canConvertToInt()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.ZERO).canConvertToLong()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.valueOf(Long.MAX_VALUE)).canConvertToLong()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.valueOf(Long.MIN_VALUE)).canConvertToLong()); [EOL] }
public void testBigIntegerNode() throws Exception { [EOL]     BigIntegerNode n = BigIntegerNode.valueOf(BigInteger.ONE); [EOL]     assertStandardEquals(n); [EOL]     assertTrue(n.equals(new BigIntegerNode(BigInteger.ONE))); [EOL]     assertEquals(JsonToken.VALUE_NUMBER_INT, n.asToken()); [EOL]     assertEquals(JsonParser.NumberType.BIG_INTEGER, n.numberType()); [EOL]     assertTrue(n.isNumber()); [EOL]     assertTrue(n.isIntegralNumber()); [EOL]     assertTrue(n.isBigInteger()); [EOL]     assertEquals(BigInteger.ONE, n.numberValue()); [EOL]     assertEquals(1, n.intValue()); [EOL]     assertEquals(1L, n.longValue()); [EOL]     assertEquals(BigInteger.ONE, n.bigIntegerValue()); [EOL]     assertEquals("1", n.asText()); [EOL]     assertNodeNumbers(n, 1, 1.0); [EOL]     BigInteger maxLong = BigInteger.valueOf(Long.MAX_VALUE); [EOL]     n = BigIntegerNode.valueOf(maxLong); [EOL]     assertEquals(Long.MAX_VALUE, n.longValue()); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     JsonNode n2 = mapper.readTree(maxLong.toString()); [EOL]     assertEquals(Long.MAX_VALUE, n2.longValue()); [EOL]     BigInteger beyondLong = maxLong.shiftLeft(2); [EOL]     n2 = mapper.readTree(beyondLong.toString()); [EOL]     assertEquals(beyondLong, n2.bigIntegerValue()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.ZERO).canConvertToInt()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.valueOf(Integer.MAX_VALUE)).canConvertToInt()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.valueOf(Integer.MIN_VALUE)).canConvertToInt()); [EOL]     assertFalse(BigIntegerNode.valueOf(BigInteger.valueOf(1L + Integer.MAX_VALUE)).canConvertToInt()); [EOL]     assertFalse(BigIntegerNode.valueOf(BigInteger.valueOf(-1L + Integer.MIN_VALUE)).canConvertToInt()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.ZERO).canConvertToLong()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.valueOf(Long.MAX_VALUE)).canConvertToLong()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.valueOf(Long.MIN_VALUE)).canConvertToLong()); [EOL] }
public void testBigIntegerNode() throws Exception { [EOL]     BigIntegerNode n = BigIntegerNode.valueOf(BigInteger.ONE); [EOL]     assertStandardEquals(n); [EOL]     assertTrue(n.equals(new BigIntegerNode(BigInteger.ONE))); [EOL]     assertEquals(JsonToken.VALUE_NUMBER_INT, n.asToken()); [EOL]     assertEquals(JsonParser.NumberType.BIG_INTEGER, n.numberType()); [EOL]     assertTrue(n.isNumber()); [EOL]     assertTrue(n.isIntegralNumber()); [EOL]     assertTrue(n.isBigInteger()); [EOL]     assertEquals(BigInteger.ONE, n.numberValue()); [EOL]     assertEquals(1, n.intValue()); [EOL]     assertEquals(1L, n.longValue()); [EOL]     assertEquals(BigInteger.ONE, n.bigIntegerValue()); [EOL]     assertEquals("1", n.asText()); [EOL]     assertNodeNumbers(n, 1, 1.0); [EOL]     BigInteger maxLong = BigInteger.valueOf(Long.MAX_VALUE); [EOL]     n = BigIntegerNode.valueOf(maxLong); [EOL]     assertEquals(Long.MAX_VALUE, n.longValue()); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     JsonNode n2 = mapper.readTree(maxLong.toString()); [EOL]     assertEquals(Long.MAX_VALUE, n2.longValue()); [EOL]     BigInteger beyondLong = maxLong.shiftLeft(2); [EOL]     n2 = mapper.readTree(beyondLong.toString()); [EOL]     assertEquals(beyondLong, n2.bigIntegerValue()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.ZERO).canConvertToInt()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.valueOf(Integer.MAX_VALUE)).canConvertToInt()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.valueOf(Integer.MIN_VALUE)).canConvertToInt()); [EOL]     assertFalse(BigIntegerNode.valueOf(BigInteger.valueOf(1L + Integer.MAX_VALUE)).canConvertToInt()); [EOL]     assertFalse(BigIntegerNode.valueOf(BigInteger.valueOf(-1L + Integer.MIN_VALUE)).canConvertToInt()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.ZERO).canConvertToLong()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.valueOf(Long.MAX_VALUE)).canConvertToLong()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.valueOf(Long.MIN_VALUE)).canConvertToLong()); [EOL] }
public void testBigIntegerNode() throws Exception { [EOL]     BigIntegerNode n = BigIntegerNode.valueOf(BigInteger.ONE); [EOL]     assertStandardEquals(n); [EOL]     assertTrue(n.equals(new BigIntegerNode(BigInteger.ONE))); [EOL]     assertEquals(JsonToken.VALUE_NUMBER_INT, n.asToken()); [EOL]     assertEquals(JsonParser.NumberType.BIG_INTEGER, n.numberType()); [EOL]     assertTrue(n.isNumber()); [EOL]     assertTrue(n.isIntegralNumber()); [EOL]     assertTrue(n.isBigInteger()); [EOL]     assertEquals(BigInteger.ONE, n.numberValue()); [EOL]     assertEquals(1, n.intValue()); [EOL]     assertEquals(1L, n.longValue()); [EOL]     assertEquals(BigInteger.ONE, n.bigIntegerValue()); [EOL]     assertEquals("1", n.asText()); [EOL]     assertNodeNumbers(n, 1, 1.0); [EOL]     BigInteger maxLong = BigInteger.valueOf(Long.MAX_VALUE); [EOL]     n = BigIntegerNode.valueOf(maxLong); [EOL]     assertEquals(Long.MAX_VALUE, n.longValue()); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     JsonNode n2 = mapper.readTree(maxLong.toString()); [EOL]     assertEquals(Long.MAX_VALUE, n2.longValue()); [EOL]     BigInteger beyondLong = maxLong.shiftLeft(2); [EOL]     n2 = mapper.readTree(beyondLong.toString()); [EOL]     assertEquals(beyondLong, n2.bigIntegerValue()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.ZERO).canConvertToInt()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.valueOf(Integer.MAX_VALUE)).canConvertToInt()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.valueOf(Integer.MIN_VALUE)).canConvertToInt()); [EOL]     assertFalse(BigIntegerNode.valueOf(BigInteger.valueOf(1L + Integer.MAX_VALUE)).canConvertToInt()); [EOL]     assertFalse(BigIntegerNode.valueOf(BigInteger.valueOf(-1L + Integer.MIN_VALUE)).canConvertToInt()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.ZERO).canConvertToLong()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.valueOf(Long.MAX_VALUE)).canConvertToLong()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.valueOf(Long.MIN_VALUE)).canConvertToLong()); [EOL] }
public void testBigIntegerNode() throws Exception { [EOL]     BigIntegerNode n = BigIntegerNode.valueOf(BigInteger.ONE); [EOL]     assertStandardEquals(n); [EOL]     assertTrue(n.equals(new BigIntegerNode(BigInteger.ONE))); [EOL]     assertEquals(JsonToken.VALUE_NUMBER_INT, n.asToken()); [EOL]     assertEquals(JsonParser.NumberType.BIG_INTEGER, n.numberType()); [EOL]     assertTrue(n.isNumber()); [EOL]     assertTrue(n.isIntegralNumber()); [EOL]     assertTrue(n.isBigInteger()); [EOL]     assertEquals(BigInteger.ONE, n.numberValue()); [EOL]     assertEquals(1, n.intValue()); [EOL]     assertEquals(1L, n.longValue()); [EOL]     assertEquals(BigInteger.ONE, n.bigIntegerValue()); [EOL]     assertEquals("1", n.asText()); [EOL]     assertNodeNumbers(n, 1, 1.0); [EOL]     BigInteger maxLong = BigInteger.valueOf(Long.MAX_VALUE); [EOL]     n = BigIntegerNode.valueOf(maxLong); [EOL]     assertEquals(Long.MAX_VALUE, n.longValue()); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     JsonNode n2 = mapper.readTree(maxLong.toString()); [EOL]     assertEquals(Long.MAX_VALUE, n2.longValue()); [EOL]     BigInteger beyondLong = maxLong.shiftLeft(2); [EOL]     n2 = mapper.readTree(beyondLong.toString()); [EOL]     assertEquals(beyondLong, n2.bigIntegerValue()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.ZERO).canConvertToInt()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.valueOf(Integer.MAX_VALUE)).canConvertToInt()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.valueOf(Integer.MIN_VALUE)).canConvertToInt()); [EOL]     assertFalse(BigIntegerNode.valueOf(BigInteger.valueOf(1L + Integer.MAX_VALUE)).canConvertToInt()); [EOL]     assertFalse(BigIntegerNode.valueOf(BigInteger.valueOf(-1L + Integer.MIN_VALUE)).canConvertToInt()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.ZERO).canConvertToLong()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.valueOf(Long.MAX_VALUE)).canConvertToLong()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.valueOf(Long.MIN_VALUE)).canConvertToLong()); [EOL] }
public void testBigIntegerNode() throws Exception { [EOL]     BigIntegerNode n = BigIntegerNode.valueOf(BigInteger.ONE); [EOL]     assertStandardEquals(n); [EOL]     assertTrue(n.equals(new BigIntegerNode(BigInteger.ONE))); [EOL]     assertEquals(JsonToken.VALUE_NUMBER_INT, n.asToken()); [EOL]     assertEquals(JsonParser.NumberType.BIG_INTEGER, n.numberType()); [EOL]     assertTrue(n.isNumber()); [EOL]     assertTrue(n.isIntegralNumber()); [EOL]     assertTrue(n.isBigInteger()); [EOL]     assertEquals(BigInteger.ONE, n.numberValue()); [EOL]     assertEquals(1, n.intValue()); [EOL]     assertEquals(1L, n.longValue()); [EOL]     assertEquals(BigInteger.ONE, n.bigIntegerValue()); [EOL]     assertEquals("1", n.asText()); [EOL]     assertNodeNumbers(n, 1, 1.0); [EOL]     BigInteger maxLong = BigInteger.valueOf(Long.MAX_VALUE); [EOL]     n = BigIntegerNode.valueOf(maxLong); [EOL]     assertEquals(Long.MAX_VALUE, n.longValue()); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     JsonNode n2 = mapper.readTree(maxLong.toString()); [EOL]     assertEquals(Long.MAX_VALUE, n2.longValue()); [EOL]     BigInteger beyondLong = maxLong.shiftLeft(2); [EOL]     n2 = mapper.readTree(beyondLong.toString()); [EOL]     assertEquals(beyondLong, n2.bigIntegerValue()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.ZERO).canConvertToInt()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.valueOf(Integer.MAX_VALUE)).canConvertToInt()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.valueOf(Integer.MIN_VALUE)).canConvertToInt()); [EOL]     assertFalse(BigIntegerNode.valueOf(BigInteger.valueOf(1L + Integer.MAX_VALUE)).canConvertToInt()); [EOL]     assertFalse(BigIntegerNode.valueOf(BigInteger.valueOf(-1L + Integer.MIN_VALUE)).canConvertToInt()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.ZERO).canConvertToLong()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.valueOf(Long.MAX_VALUE)).canConvertToLong()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.valueOf(Long.MIN_VALUE)).canConvertToLong()); [EOL] }
public void testBigIntegerNode() throws Exception { [EOL]     BigIntegerNode n = BigIntegerNode.valueOf(BigInteger.ONE); [EOL]     assertStandardEquals(n); [EOL]     assertTrue(n.equals(new BigIntegerNode(BigInteger.ONE))); [EOL]     assertEquals(JsonToken.VALUE_NUMBER_INT, n.asToken()); [EOL]     assertEquals(JsonParser.NumberType.BIG_INTEGER, n.numberType()); [EOL]     assertTrue(n.isNumber()); [EOL]     assertTrue(n.isIntegralNumber()); [EOL]     assertTrue(n.isBigInteger()); [EOL]     assertEquals(BigInteger.ONE, n.numberValue()); [EOL]     assertEquals(1, n.intValue()); [EOL]     assertEquals(1L, n.longValue()); [EOL]     assertEquals(BigInteger.ONE, n.bigIntegerValue()); [EOL]     assertEquals("1", n.asText()); [EOL]     assertNodeNumbers(n, 1, 1.0); [EOL]     BigInteger maxLong = BigInteger.valueOf(Long.MAX_VALUE); [EOL]     n = BigIntegerNode.valueOf(maxLong); [EOL]     assertEquals(Long.MAX_VALUE, n.longValue()); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     JsonNode n2 = mapper.readTree(maxLong.toString()); [EOL]     assertEquals(Long.MAX_VALUE, n2.longValue()); [EOL]     BigInteger beyondLong = maxLong.shiftLeft(2); [EOL]     n2 = mapper.readTree(beyondLong.toString()); [EOL]     assertEquals(beyondLong, n2.bigIntegerValue()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.ZERO).canConvertToInt()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.valueOf(Integer.MAX_VALUE)).canConvertToInt()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.valueOf(Integer.MIN_VALUE)).canConvertToInt()); [EOL]     assertFalse(BigIntegerNode.valueOf(BigInteger.valueOf(1L + Integer.MAX_VALUE)).canConvertToInt()); [EOL]     assertFalse(BigIntegerNode.valueOf(BigInteger.valueOf(-1L + Integer.MIN_VALUE)).canConvertToInt()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.ZERO).canConvertToLong()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.valueOf(Long.MAX_VALUE)).canConvertToLong()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.valueOf(Long.MIN_VALUE)).canConvertToLong()); [EOL] }
public void testBigIntegerNode() throws Exception { [EOL]     BigIntegerNode n = BigIntegerNode.valueOf(BigInteger.ONE); [EOL]     assertStandardEquals(n); [EOL]     assertTrue(n.equals(new BigIntegerNode(BigInteger.ONE))); [EOL]     assertEquals(JsonToken.VALUE_NUMBER_INT, n.asToken()); [EOL]     assertEquals(JsonParser.NumberType.BIG_INTEGER, n.numberType()); [EOL]     assertTrue(n.isNumber()); [EOL]     assertTrue(n.isIntegralNumber()); [EOL]     assertTrue(n.isBigInteger()); [EOL]     assertEquals(BigInteger.ONE, n.numberValue()); [EOL]     assertEquals(1, n.intValue()); [EOL]     assertEquals(1L, n.longValue()); [EOL]     assertEquals(BigInteger.ONE, n.bigIntegerValue()); [EOL]     assertEquals("1", n.asText()); [EOL]     assertNodeNumbers(n, 1, 1.0); [EOL]     BigInteger maxLong = BigInteger.valueOf(Long.MAX_VALUE); [EOL]     n = BigIntegerNode.valueOf(maxLong); [EOL]     assertEquals(Long.MAX_VALUE, n.longValue()); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     JsonNode n2 = mapper.readTree(maxLong.toString()); [EOL]     assertEquals(Long.MAX_VALUE, n2.longValue()); [EOL]     BigInteger beyondLong = maxLong.shiftLeft(2); [EOL]     n2 = mapper.readTree(beyondLong.toString()); [EOL]     assertEquals(beyondLong, n2.bigIntegerValue()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.ZERO).canConvertToInt()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.valueOf(Integer.MAX_VALUE)).canConvertToInt()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.valueOf(Integer.MIN_VALUE)).canConvertToInt()); [EOL]     assertFalse(BigIntegerNode.valueOf(BigInteger.valueOf(1L + Integer.MAX_VALUE)).canConvertToInt()); [EOL]     assertFalse(BigIntegerNode.valueOf(BigInteger.valueOf(-1L + Integer.MIN_VALUE)).canConvertToInt()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.ZERO).canConvertToLong()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.valueOf(Long.MAX_VALUE)).canConvertToLong()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.valueOf(Long.MIN_VALUE)).canConvertToLong()); [EOL] }
public void testBigIntegerNode() throws Exception { [EOL]     BigIntegerNode n = BigIntegerNode.valueOf(BigInteger.ONE); [EOL]     assertStandardEquals(n); [EOL]     assertTrue(n.equals(new BigIntegerNode(BigInteger.ONE))); [EOL]     assertEquals(JsonToken.VALUE_NUMBER_INT, n.asToken()); [EOL]     assertEquals(JsonParser.NumberType.BIG_INTEGER, n.numberType()); [EOL]     assertTrue(n.isNumber()); [EOL]     assertTrue(n.isIntegralNumber()); [EOL]     assertTrue(n.isBigInteger()); [EOL]     assertEquals(BigInteger.ONE, n.numberValue()); [EOL]     assertEquals(1, n.intValue()); [EOL]     assertEquals(1L, n.longValue()); [EOL]     assertEquals(BigInteger.ONE, n.bigIntegerValue()); [EOL]     assertEquals("1", n.asText()); [EOL]     assertNodeNumbers(n, 1, 1.0); [EOL]     BigInteger maxLong = BigInteger.valueOf(Long.MAX_VALUE); [EOL]     n = BigIntegerNode.valueOf(maxLong); [EOL]     assertEquals(Long.MAX_VALUE, n.longValue()); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     JsonNode n2 = mapper.readTree(maxLong.toString()); [EOL]     assertEquals(Long.MAX_VALUE, n2.longValue()); [EOL]     BigInteger beyondLong = maxLong.shiftLeft(2); [EOL]     n2 = mapper.readTree(beyondLong.toString()); [EOL]     assertEquals(beyondLong, n2.bigIntegerValue()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.ZERO).canConvertToInt()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.valueOf(Integer.MAX_VALUE)).canConvertToInt()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.valueOf(Integer.MIN_VALUE)).canConvertToInt()); [EOL]     assertFalse(BigIntegerNode.valueOf(BigInteger.valueOf(1L + Integer.MAX_VALUE)).canConvertToInt()); [EOL]     assertFalse(BigIntegerNode.valueOf(BigInteger.valueOf(-1L + Integer.MIN_VALUE)).canConvertToInt()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.ZERO).canConvertToLong()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.valueOf(Long.MAX_VALUE)).canConvertToLong()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.valueOf(Long.MIN_VALUE)).canConvertToLong()); [EOL] }
public void testBigIntegerNode() throws Exception { [EOL]     BigIntegerNode n = BigIntegerNode.valueOf(BigInteger.ONE); [EOL]     assertStandardEquals(n); [EOL]     assertTrue(n.equals(new BigIntegerNode(BigInteger.ONE))); [EOL]     assertEquals(JsonToken.VALUE_NUMBER_INT, n.asToken()); [EOL]     assertEquals(JsonParser.NumberType.BIG_INTEGER, n.numberType()); [EOL]     assertTrue(n.isNumber()); [EOL]     assertTrue(n.isIntegralNumber()); [EOL]     assertTrue(n.isBigInteger()); [EOL]     assertEquals(BigInteger.ONE, n.numberValue()); [EOL]     assertEquals(1, n.intValue()); [EOL]     assertEquals(1L, n.longValue()); [EOL]     assertEquals(BigInteger.ONE, n.bigIntegerValue()); [EOL]     assertEquals("1", n.asText()); [EOL]     assertNodeNumbers(n, 1, 1.0); [EOL]     BigInteger maxLong = BigInteger.valueOf(Long.MAX_VALUE); [EOL]     n = BigIntegerNode.valueOf(maxLong); [EOL]     assertEquals(Long.MAX_VALUE, n.longValue()); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     JsonNode n2 = mapper.readTree(maxLong.toString()); [EOL]     assertEquals(Long.MAX_VALUE, n2.longValue()); [EOL]     BigInteger beyondLong = maxLong.shiftLeft(2); [EOL]     n2 = mapper.readTree(beyondLong.toString()); [EOL]     assertEquals(beyondLong, n2.bigIntegerValue()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.ZERO).canConvertToInt()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.valueOf(Integer.MAX_VALUE)).canConvertToInt()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.valueOf(Integer.MIN_VALUE)).canConvertToInt()); [EOL]     assertFalse(BigIntegerNode.valueOf(BigInteger.valueOf(1L + Integer.MAX_VALUE)).canConvertToInt()); [EOL]     assertFalse(BigIntegerNode.valueOf(BigInteger.valueOf(-1L + Integer.MIN_VALUE)).canConvertToInt()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.ZERO).canConvertToLong()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.valueOf(Long.MAX_VALUE)).canConvertToLong()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.valueOf(Long.MIN_VALUE)).canConvertToLong()); [EOL] }
public void testBigIntegerNode() throws Exception { [EOL]     BigIntegerNode n = BigIntegerNode.valueOf(BigInteger.ONE); [EOL]     assertStandardEquals(n); [EOL]     assertTrue(n.equals(new BigIntegerNode(BigInteger.ONE))); [EOL]     assertEquals(JsonToken.VALUE_NUMBER_INT, n.asToken()); [EOL]     assertEquals(JsonParser.NumberType.BIG_INTEGER, n.numberType()); [EOL]     assertTrue(n.isNumber()); [EOL]     assertTrue(n.isIntegralNumber()); [EOL]     assertTrue(n.isBigInteger()); [EOL]     assertEquals(BigInteger.ONE, n.numberValue()); [EOL]     assertEquals(1, n.intValue()); [EOL]     assertEquals(1L, n.longValue()); [EOL]     assertEquals(BigInteger.ONE, n.bigIntegerValue()); [EOL]     assertEquals("1", n.asText()); [EOL]     assertNodeNumbers(n, 1, 1.0); [EOL]     BigInteger maxLong = BigInteger.valueOf(Long.MAX_VALUE); [EOL]     n = BigIntegerNode.valueOf(maxLong); [EOL]     assertEquals(Long.MAX_VALUE, n.longValue()); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     JsonNode n2 = mapper.readTree(maxLong.toString()); [EOL]     assertEquals(Long.MAX_VALUE, n2.longValue()); [EOL]     BigInteger beyondLong = maxLong.shiftLeft(2); [EOL]     n2 = mapper.readTree(beyondLong.toString()); [EOL]     assertEquals(beyondLong, n2.bigIntegerValue()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.ZERO).canConvertToInt()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.valueOf(Integer.MAX_VALUE)).canConvertToInt()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.valueOf(Integer.MIN_VALUE)).canConvertToInt()); [EOL]     assertFalse(BigIntegerNode.valueOf(BigInteger.valueOf(1L + Integer.MAX_VALUE)).canConvertToInt()); [EOL]     assertFalse(BigIntegerNode.valueOf(BigInteger.valueOf(-1L + Integer.MIN_VALUE)).canConvertToInt()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.ZERO).canConvertToLong()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.valueOf(Long.MAX_VALUE)).canConvertToLong()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.valueOf(Long.MIN_VALUE)).canConvertToLong()); [EOL] }
public void testBigIntegerNode() throws Exception { [EOL]     BigIntegerNode n = BigIntegerNode.valueOf(BigInteger.ONE); [EOL]     assertStandardEquals(n); [EOL]     assertTrue(n.equals(new BigIntegerNode(BigInteger.ONE))); [EOL]     assertEquals(JsonToken.VALUE_NUMBER_INT, n.asToken()); [EOL]     assertEquals(JsonParser.NumberType.BIG_INTEGER, n.numberType()); [EOL]     assertTrue(n.isNumber()); [EOL]     assertTrue(n.isIntegralNumber()); [EOL]     assertTrue(n.isBigInteger()); [EOL]     assertEquals(BigInteger.ONE, n.numberValue()); [EOL]     assertEquals(1, n.intValue()); [EOL]     assertEquals(1L, n.longValue()); [EOL]     assertEquals(BigInteger.ONE, n.bigIntegerValue()); [EOL]     assertEquals("1", n.asText()); [EOL]     assertNodeNumbers(n, 1, 1.0); [EOL]     BigInteger maxLong = BigInteger.valueOf(Long.MAX_VALUE); [EOL]     n = BigIntegerNode.valueOf(maxLong); [EOL]     assertEquals(Long.MAX_VALUE, n.longValue()); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     JsonNode n2 = mapper.readTree(maxLong.toString()); [EOL]     assertEquals(Long.MAX_VALUE, n2.longValue()); [EOL]     BigInteger beyondLong = maxLong.shiftLeft(2); [EOL]     n2 = mapper.readTree(beyondLong.toString()); [EOL]     assertEquals(beyondLong, n2.bigIntegerValue()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.ZERO).canConvertToInt()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.valueOf(Integer.MAX_VALUE)).canConvertToInt()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.valueOf(Integer.MIN_VALUE)).canConvertToInt()); [EOL]     assertFalse(BigIntegerNode.valueOf(BigInteger.valueOf(1L + Integer.MAX_VALUE)).canConvertToInt()); [EOL]     assertFalse(BigIntegerNode.valueOf(BigInteger.valueOf(-1L + Integer.MIN_VALUE)).canConvertToInt()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.ZERO).canConvertToLong()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.valueOf(Long.MAX_VALUE)).canConvertToLong()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.valueOf(Long.MIN_VALUE)).canConvertToLong()); [EOL] }
public void testBigIntegerNode() throws Exception { [EOL]     BigIntegerNode n = BigIntegerNode.valueOf(BigInteger.ONE); [EOL]     assertStandardEquals(n); [EOL]     assertTrue(n.equals(new BigIntegerNode(BigInteger.ONE))); [EOL]     assertEquals(JsonToken.VALUE_NUMBER_INT, n.asToken()); [EOL]     assertEquals(JsonParser.NumberType.BIG_INTEGER, n.numberType()); [EOL]     assertTrue(n.isNumber()); [EOL]     assertTrue(n.isIntegralNumber()); [EOL]     assertTrue(n.isBigInteger()); [EOL]     assertEquals(BigInteger.ONE, n.numberValue()); [EOL]     assertEquals(1, n.intValue()); [EOL]     assertEquals(1L, n.longValue()); [EOL]     assertEquals(BigInteger.ONE, n.bigIntegerValue()); [EOL]     assertEquals("1", n.asText()); [EOL]     assertNodeNumbers(n, 1, 1.0); [EOL]     BigInteger maxLong = BigInteger.valueOf(Long.MAX_VALUE); [EOL]     n = BigIntegerNode.valueOf(maxLong); [EOL]     assertEquals(Long.MAX_VALUE, n.longValue()); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     JsonNode n2 = mapper.readTree(maxLong.toString()); [EOL]     assertEquals(Long.MAX_VALUE, n2.longValue()); [EOL]     BigInteger beyondLong = maxLong.shiftLeft(2); [EOL]     n2 = mapper.readTree(beyondLong.toString()); [EOL]     assertEquals(beyondLong, n2.bigIntegerValue()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.ZERO).canConvertToInt()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.valueOf(Integer.MAX_VALUE)).canConvertToInt()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.valueOf(Integer.MIN_VALUE)).canConvertToInt()); [EOL]     assertFalse(BigIntegerNode.valueOf(BigInteger.valueOf(1L + Integer.MAX_VALUE)).canConvertToInt()); [EOL]     assertFalse(BigIntegerNode.valueOf(BigInteger.valueOf(-1L + Integer.MIN_VALUE)).canConvertToInt()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.ZERO).canConvertToLong()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.valueOf(Long.MAX_VALUE)).canConvertToLong()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.valueOf(Long.MIN_VALUE)).canConvertToLong()); [EOL] }
public void testBigIntegerNode() throws Exception { [EOL]     BigIntegerNode n = BigIntegerNode.valueOf(BigInteger.ONE); [EOL]     assertStandardEquals(n); [EOL]     assertTrue(n.equals(new BigIntegerNode(BigInteger.ONE))); [EOL]     assertEquals(JsonToken.VALUE_NUMBER_INT, n.asToken()); [EOL]     assertEquals(JsonParser.NumberType.BIG_INTEGER, n.numberType()); [EOL]     assertTrue(n.isNumber()); [EOL]     assertTrue(n.isIntegralNumber()); [EOL]     assertTrue(n.isBigInteger()); [EOL]     assertEquals(BigInteger.ONE, n.numberValue()); [EOL]     assertEquals(1, n.intValue()); [EOL]     assertEquals(1L, n.longValue()); [EOL]     assertEquals(BigInteger.ONE, n.bigIntegerValue()); [EOL]     assertEquals("1", n.asText()); [EOL]     assertNodeNumbers(n, 1, 1.0); [EOL]     BigInteger maxLong = BigInteger.valueOf(Long.MAX_VALUE); [EOL]     n = BigIntegerNode.valueOf(maxLong); [EOL]     assertEquals(Long.MAX_VALUE, n.longValue()); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     JsonNode n2 = mapper.readTree(maxLong.toString()); [EOL]     assertEquals(Long.MAX_VALUE, n2.longValue()); [EOL]     BigInteger beyondLong = maxLong.shiftLeft(2); [EOL]     n2 = mapper.readTree(beyondLong.toString()); [EOL]     assertEquals(beyondLong, n2.bigIntegerValue()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.ZERO).canConvertToInt()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.valueOf(Integer.MAX_VALUE)).canConvertToInt()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.valueOf(Integer.MIN_VALUE)).canConvertToInt()); [EOL]     assertFalse(BigIntegerNode.valueOf(BigInteger.valueOf(1L + Integer.MAX_VALUE)).canConvertToInt()); [EOL]     assertFalse(BigIntegerNode.valueOf(BigInteger.valueOf(-1L + Integer.MIN_VALUE)).canConvertToInt()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.ZERO).canConvertToLong()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.valueOf(Long.MAX_VALUE)).canConvertToLong()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.valueOf(Long.MIN_VALUE)).canConvertToLong()); [EOL] }
public void testBigIntegerNode() throws Exception { [EOL]     BigIntegerNode n = BigIntegerNode.valueOf(BigInteger.ONE); [EOL]     assertStandardEquals(n); [EOL]     assertTrue(n.equals(new BigIntegerNode(BigInteger.ONE))); [EOL]     assertEquals(JsonToken.VALUE_NUMBER_INT, n.asToken()); [EOL]     assertEquals(JsonParser.NumberType.BIG_INTEGER, n.numberType()); [EOL]     assertTrue(n.isNumber()); [EOL]     assertTrue(n.isIntegralNumber()); [EOL]     assertTrue(n.isBigInteger()); [EOL]     assertEquals(BigInteger.ONE, n.numberValue()); [EOL]     assertEquals(1, n.intValue()); [EOL]     assertEquals(1L, n.longValue()); [EOL]     assertEquals(BigInteger.ONE, n.bigIntegerValue()); [EOL]     assertEquals("1", n.asText()); [EOL]     assertNodeNumbers(n, 1, 1.0); [EOL]     BigInteger maxLong = BigInteger.valueOf(Long.MAX_VALUE); [EOL]     n = BigIntegerNode.valueOf(maxLong); [EOL]     assertEquals(Long.MAX_VALUE, n.longValue()); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     JsonNode n2 = mapper.readTree(maxLong.toString()); [EOL]     assertEquals(Long.MAX_VALUE, n2.longValue()); [EOL]     BigInteger beyondLong = maxLong.shiftLeft(2); [EOL]     n2 = mapper.readTree(beyondLong.toString()); [EOL]     assertEquals(beyondLong, n2.bigIntegerValue()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.ZERO).canConvertToInt()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.valueOf(Integer.MAX_VALUE)).canConvertToInt()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.valueOf(Integer.MIN_VALUE)).canConvertToInt()); [EOL]     assertFalse(BigIntegerNode.valueOf(BigInteger.valueOf(1L + Integer.MAX_VALUE)).canConvertToInt()); [EOL]     assertFalse(BigIntegerNode.valueOf(BigInteger.valueOf(-1L + Integer.MIN_VALUE)).canConvertToInt()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.ZERO).canConvertToLong()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.valueOf(Long.MAX_VALUE)).canConvertToLong()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.valueOf(Long.MIN_VALUE)).canConvertToLong()); [EOL] }
public void testBigIntegerNode() throws Exception { [EOL]     BigIntegerNode n = BigIntegerNode.valueOf(BigInteger.ONE); [EOL]     assertStandardEquals(n); [EOL]     assertTrue(n.equals(new BigIntegerNode(BigInteger.ONE))); [EOL]     assertEquals(JsonToken.VALUE_NUMBER_INT, n.asToken()); [EOL]     assertEquals(JsonParser.NumberType.BIG_INTEGER, n.numberType()); [EOL]     assertTrue(n.isNumber()); [EOL]     assertTrue(n.isIntegralNumber()); [EOL]     assertTrue(n.isBigInteger()); [EOL]     assertEquals(BigInteger.ONE, n.numberValue()); [EOL]     assertEquals(1, n.intValue()); [EOL]     assertEquals(1L, n.longValue()); [EOL]     assertEquals(BigInteger.ONE, n.bigIntegerValue()); [EOL]     assertEquals("1", n.asText()); [EOL]     assertNodeNumbers(n, 1, 1.0); [EOL]     BigInteger maxLong = BigInteger.valueOf(Long.MAX_VALUE); [EOL]     n = BigIntegerNode.valueOf(maxLong); [EOL]     assertEquals(Long.MAX_VALUE, n.longValue()); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     JsonNode n2 = mapper.readTree(maxLong.toString()); [EOL]     assertEquals(Long.MAX_VALUE, n2.longValue()); [EOL]     BigInteger beyondLong = maxLong.shiftLeft(2); [EOL]     n2 = mapper.readTree(beyondLong.toString()); [EOL]     assertEquals(beyondLong, n2.bigIntegerValue()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.ZERO).canConvertToInt()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.valueOf(Integer.MAX_VALUE)).canConvertToInt()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.valueOf(Integer.MIN_VALUE)).canConvertToInt()); [EOL]     assertFalse(BigIntegerNode.valueOf(BigInteger.valueOf(1L + Integer.MAX_VALUE)).canConvertToInt()); [EOL]     assertFalse(BigIntegerNode.valueOf(BigInteger.valueOf(-1L + Integer.MIN_VALUE)).canConvertToInt()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.ZERO).canConvertToLong()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.valueOf(Long.MAX_VALUE)).canConvertToLong()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.valueOf(Long.MIN_VALUE)).canConvertToLong()); [EOL] }
public void testBigIntegerNode() throws Exception { [EOL]     BigIntegerNode n = BigIntegerNode.valueOf(BigInteger.ONE); [EOL]     assertStandardEquals(n); [EOL]     assertTrue(n.equals(new BigIntegerNode(BigInteger.ONE))); [EOL]     assertEquals(JsonToken.VALUE_NUMBER_INT, n.asToken()); [EOL]     assertEquals(JsonParser.NumberType.BIG_INTEGER, n.numberType()); [EOL]     assertTrue(n.isNumber()); [EOL]     assertTrue(n.isIntegralNumber()); [EOL]     assertTrue(n.isBigInteger()); [EOL]     assertEquals(BigInteger.ONE, n.numberValue()); [EOL]     assertEquals(1, n.intValue()); [EOL]     assertEquals(1L, n.longValue()); [EOL]     assertEquals(BigInteger.ONE, n.bigIntegerValue()); [EOL]     assertEquals("1", n.asText()); [EOL]     assertNodeNumbers(n, 1, 1.0); [EOL]     BigInteger maxLong = BigInteger.valueOf(Long.MAX_VALUE); [EOL]     n = BigIntegerNode.valueOf(maxLong); [EOL]     assertEquals(Long.MAX_VALUE, n.longValue()); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     JsonNode n2 = mapper.readTree(maxLong.toString()); [EOL]     assertEquals(Long.MAX_VALUE, n2.longValue()); [EOL]     BigInteger beyondLong = maxLong.shiftLeft(2); [EOL]     n2 = mapper.readTree(beyondLong.toString()); [EOL]     assertEquals(beyondLong, n2.bigIntegerValue()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.ZERO).canConvertToInt()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.valueOf(Integer.MAX_VALUE)).canConvertToInt()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.valueOf(Integer.MIN_VALUE)).canConvertToInt()); [EOL]     assertFalse(BigIntegerNode.valueOf(BigInteger.valueOf(1L + Integer.MAX_VALUE)).canConvertToInt()); [EOL]     assertFalse(BigIntegerNode.valueOf(BigInteger.valueOf(-1L + Integer.MIN_VALUE)).canConvertToInt()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.ZERO).canConvertToLong()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.valueOf(Long.MAX_VALUE)).canConvertToLong()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.valueOf(Long.MIN_VALUE)).canConvertToLong()); [EOL] }
public void testBigIntegerNode() throws Exception { [EOL]     BigIntegerNode n = BigIntegerNode.valueOf(BigInteger.ONE); [EOL]     assertStandardEquals(n); [EOL]     assertTrue(n.equals(new BigIntegerNode(BigInteger.ONE))); [EOL]     assertEquals(JsonToken.VALUE_NUMBER_INT, n.asToken()); [EOL]     assertEquals(JsonParser.NumberType.BIG_INTEGER, n.numberType()); [EOL]     assertTrue(n.isNumber()); [EOL]     assertTrue(n.isIntegralNumber()); [EOL]     assertTrue(n.isBigInteger()); [EOL]     assertEquals(BigInteger.ONE, n.numberValue()); [EOL]     assertEquals(1, n.intValue()); [EOL]     assertEquals(1L, n.longValue()); [EOL]     assertEquals(BigInteger.ONE, n.bigIntegerValue()); [EOL]     assertEquals("1", n.asText()); [EOL]     assertNodeNumbers(n, 1, 1.0); [EOL]     BigInteger maxLong = BigInteger.valueOf(Long.MAX_VALUE); [EOL]     n = BigIntegerNode.valueOf(maxLong); [EOL]     assertEquals(Long.MAX_VALUE, n.longValue()); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     JsonNode n2 = mapper.readTree(maxLong.toString()); [EOL]     assertEquals(Long.MAX_VALUE, n2.longValue()); [EOL]     BigInteger beyondLong = maxLong.shiftLeft(2); [EOL]     n2 = mapper.readTree(beyondLong.toString()); [EOL]     assertEquals(beyondLong, n2.bigIntegerValue()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.ZERO).canConvertToInt()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.valueOf(Integer.MAX_VALUE)).canConvertToInt()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.valueOf(Integer.MIN_VALUE)).canConvertToInt()); [EOL]     assertFalse(BigIntegerNode.valueOf(BigInteger.valueOf(1L + Integer.MAX_VALUE)).canConvertToInt()); [EOL]     assertFalse(BigIntegerNode.valueOf(BigInteger.valueOf(-1L + Integer.MIN_VALUE)).canConvertToInt()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.ZERO).canConvertToLong()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.valueOf(Long.MAX_VALUE)).canConvertToLong()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.valueOf(Long.MIN_VALUE)).canConvertToLong()); [EOL] }
public void testBigIntegerNode() throws Exception { [EOL]     BigIntegerNode n = BigIntegerNode.valueOf(BigInteger.ONE); [EOL]     assertStandardEquals(n); [EOL]     assertTrue(n.equals(new BigIntegerNode(BigInteger.ONE))); [EOL]     assertEquals(JsonToken.VALUE_NUMBER_INT, n.asToken()); [EOL]     assertEquals(JsonParser.NumberType.BIG_INTEGER, n.numberType()); [EOL]     assertTrue(n.isNumber()); [EOL]     assertTrue(n.isIntegralNumber()); [EOL]     assertTrue(n.isBigInteger()); [EOL]     assertEquals(BigInteger.ONE, n.numberValue()); [EOL]     assertEquals(1, n.intValue()); [EOL]     assertEquals(1L, n.longValue()); [EOL]     assertEquals(BigInteger.ONE, n.bigIntegerValue()); [EOL]     assertEquals("1", n.asText()); [EOL]     assertNodeNumbers(n, 1, 1.0); [EOL]     BigInteger maxLong = BigInteger.valueOf(Long.MAX_VALUE); [EOL]     n = BigIntegerNode.valueOf(maxLong); [EOL]     assertEquals(Long.MAX_VALUE, n.longValue()); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     JsonNode n2 = mapper.readTree(maxLong.toString()); [EOL]     assertEquals(Long.MAX_VALUE, n2.longValue()); [EOL]     BigInteger beyondLong = maxLong.shiftLeft(2); [EOL]     n2 = mapper.readTree(beyondLong.toString()); [EOL]     assertEquals(beyondLong, n2.bigIntegerValue()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.ZERO).canConvertToInt()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.valueOf(Integer.MAX_VALUE)).canConvertToInt()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.valueOf(Integer.MIN_VALUE)).canConvertToInt()); [EOL]     assertFalse(BigIntegerNode.valueOf(BigInteger.valueOf(1L + Integer.MAX_VALUE)).canConvertToInt()); [EOL]     assertFalse(BigIntegerNode.valueOf(BigInteger.valueOf(-1L + Integer.MIN_VALUE)).canConvertToInt()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.ZERO).canConvertToLong()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.valueOf(Long.MAX_VALUE)).canConvertToLong()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.valueOf(Long.MIN_VALUE)).canConvertToLong()); [EOL] }
public void testBigIntegerNode() throws Exception { [EOL]     BigIntegerNode n = BigIntegerNode.valueOf(BigInteger.ONE); [EOL]     assertStandardEquals(n); [EOL]     assertTrue(n.equals(new BigIntegerNode(BigInteger.ONE))); [EOL]     assertEquals(JsonToken.VALUE_NUMBER_INT, n.asToken()); [EOL]     assertEquals(JsonParser.NumberType.BIG_INTEGER, n.numberType()); [EOL]     assertTrue(n.isNumber()); [EOL]     assertTrue(n.isIntegralNumber()); [EOL]     assertTrue(n.isBigInteger()); [EOL]     assertEquals(BigInteger.ONE, n.numberValue()); [EOL]     assertEquals(1, n.intValue()); [EOL]     assertEquals(1L, n.longValue()); [EOL]     assertEquals(BigInteger.ONE, n.bigIntegerValue()); [EOL]     assertEquals("1", n.asText()); [EOL]     assertNodeNumbers(n, 1, 1.0); [EOL]     BigInteger maxLong = BigInteger.valueOf(Long.MAX_VALUE); [EOL]     n = BigIntegerNode.valueOf(maxLong); [EOL]     assertEquals(Long.MAX_VALUE, n.longValue()); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     JsonNode n2 = mapper.readTree(maxLong.toString()); [EOL]     assertEquals(Long.MAX_VALUE, n2.longValue()); [EOL]     BigInteger beyondLong = maxLong.shiftLeft(2); [EOL]     n2 = mapper.readTree(beyondLong.toString()); [EOL]     assertEquals(beyondLong, n2.bigIntegerValue()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.ZERO).canConvertToInt()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.valueOf(Integer.MAX_VALUE)).canConvertToInt()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.valueOf(Integer.MIN_VALUE)).canConvertToInt()); [EOL]     assertFalse(BigIntegerNode.valueOf(BigInteger.valueOf(1L + Integer.MAX_VALUE)).canConvertToInt()); [EOL]     assertFalse(BigIntegerNode.valueOf(BigInteger.valueOf(-1L + Integer.MIN_VALUE)).canConvertToInt()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.ZERO).canConvertToLong()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.valueOf(Long.MAX_VALUE)).canConvertToLong()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.valueOf(Long.MIN_VALUE)).canConvertToLong()); [EOL] }
public void testBigIntegerNode() throws Exception { [EOL]     BigIntegerNode n = BigIntegerNode.valueOf(BigInteger.ONE); [EOL]     assertStandardEquals(n); [EOL]     assertTrue(n.equals(new BigIntegerNode(BigInteger.ONE))); [EOL]     assertEquals(JsonToken.VALUE_NUMBER_INT, n.asToken()); [EOL]     assertEquals(JsonParser.NumberType.BIG_INTEGER, n.numberType()); [EOL]     assertTrue(n.isNumber()); [EOL]     assertTrue(n.isIntegralNumber()); [EOL]     assertTrue(n.isBigInteger()); [EOL]     assertEquals(BigInteger.ONE, n.numberValue()); [EOL]     assertEquals(1, n.intValue()); [EOL]     assertEquals(1L, n.longValue()); [EOL]     assertEquals(BigInteger.ONE, n.bigIntegerValue()); [EOL]     assertEquals("1", n.asText()); [EOL]     assertNodeNumbers(n, 1, 1.0); [EOL]     BigInteger maxLong = BigInteger.valueOf(Long.MAX_VALUE); [EOL]     n = BigIntegerNode.valueOf(maxLong); [EOL]     assertEquals(Long.MAX_VALUE, n.longValue()); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     JsonNode n2 = mapper.readTree(maxLong.toString()); [EOL]     assertEquals(Long.MAX_VALUE, n2.longValue()); [EOL]     BigInteger beyondLong = maxLong.shiftLeft(2); [EOL]     n2 = mapper.readTree(beyondLong.toString()); [EOL]     assertEquals(beyondLong, n2.bigIntegerValue()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.ZERO).canConvertToInt()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.valueOf(Integer.MAX_VALUE)).canConvertToInt()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.valueOf(Integer.MIN_VALUE)).canConvertToInt()); [EOL]     assertFalse(BigIntegerNode.valueOf(BigInteger.valueOf(1L + Integer.MAX_VALUE)).canConvertToInt()); [EOL]     assertFalse(BigIntegerNode.valueOf(BigInteger.valueOf(-1L + Integer.MIN_VALUE)).canConvertToInt()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.ZERO).canConvertToLong()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.valueOf(Long.MAX_VALUE)).canConvertToLong()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.valueOf(Long.MIN_VALUE)).canConvertToLong()); [EOL] }
public void testBigIntegerNode() throws Exception { [EOL]     BigIntegerNode n = BigIntegerNode.valueOf(BigInteger.ONE); [EOL]     assertStandardEquals(n); [EOL]     assertTrue(n.equals(new BigIntegerNode(BigInteger.ONE))); [EOL]     assertEquals(JsonToken.VALUE_NUMBER_INT, n.asToken()); [EOL]     assertEquals(JsonParser.NumberType.BIG_INTEGER, n.numberType()); [EOL]     assertTrue(n.isNumber()); [EOL]     assertTrue(n.isIntegralNumber()); [EOL]     assertTrue(n.isBigInteger()); [EOL]     assertEquals(BigInteger.ONE, n.numberValue()); [EOL]     assertEquals(1, n.intValue()); [EOL]     assertEquals(1L, n.longValue()); [EOL]     assertEquals(BigInteger.ONE, n.bigIntegerValue()); [EOL]     assertEquals("1", n.asText()); [EOL]     assertNodeNumbers(n, 1, 1.0); [EOL]     BigInteger maxLong = BigInteger.valueOf(Long.MAX_VALUE); [EOL]     n = BigIntegerNode.valueOf(maxLong); [EOL]     assertEquals(Long.MAX_VALUE, n.longValue()); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     JsonNode n2 = mapper.readTree(maxLong.toString()); [EOL]     assertEquals(Long.MAX_VALUE, n2.longValue()); [EOL]     BigInteger beyondLong = maxLong.shiftLeft(2); [EOL]     n2 = mapper.readTree(beyondLong.toString()); [EOL]     assertEquals(beyondLong, n2.bigIntegerValue()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.ZERO).canConvertToInt()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.valueOf(Integer.MAX_VALUE)).canConvertToInt()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.valueOf(Integer.MIN_VALUE)).canConvertToInt()); [EOL]     assertFalse(BigIntegerNode.valueOf(BigInteger.valueOf(1L + Integer.MAX_VALUE)).canConvertToInt()); [EOL]     assertFalse(BigIntegerNode.valueOf(BigInteger.valueOf(-1L + Integer.MIN_VALUE)).canConvertToInt()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.ZERO).canConvertToLong()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.valueOf(Long.MAX_VALUE)).canConvertToLong()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.valueOf(Long.MIN_VALUE)).canConvertToLong()); [EOL] }
public void testBigIntegerNode() throws Exception { [EOL]     BigIntegerNode n = BigIntegerNode.valueOf(BigInteger.ONE); [EOL]     assertStandardEquals(n); [EOL]     assertTrue(n.equals(new BigIntegerNode(BigInteger.ONE))); [EOL]     assertEquals(JsonToken.VALUE_NUMBER_INT, n.asToken()); [EOL]     assertEquals(JsonParser.NumberType.BIG_INTEGER, n.numberType()); [EOL]     assertTrue(n.isNumber()); [EOL]     assertTrue(n.isIntegralNumber()); [EOL]     assertTrue(n.isBigInteger()); [EOL]     assertEquals(BigInteger.ONE, n.numberValue()); [EOL]     assertEquals(1, n.intValue()); [EOL]     assertEquals(1L, n.longValue()); [EOL]     assertEquals(BigInteger.ONE, n.bigIntegerValue()); [EOL]     assertEquals("1", n.asText()); [EOL]     assertNodeNumbers(n, 1, 1.0); [EOL]     BigInteger maxLong = BigInteger.valueOf(Long.MAX_VALUE); [EOL]     n = BigIntegerNode.valueOf(maxLong); [EOL]     assertEquals(Long.MAX_VALUE, n.longValue()); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     JsonNode n2 = mapper.readTree(maxLong.toString()); [EOL]     assertEquals(Long.MAX_VALUE, n2.longValue()); [EOL]     BigInteger beyondLong = maxLong.shiftLeft(2); [EOL]     n2 = mapper.readTree(beyondLong.toString()); [EOL]     assertEquals(beyondLong, n2.bigIntegerValue()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.ZERO).canConvertToInt()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.valueOf(Integer.MAX_VALUE)).canConvertToInt()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.valueOf(Integer.MIN_VALUE)).canConvertToInt()); [EOL]     assertFalse(BigIntegerNode.valueOf(BigInteger.valueOf(1L + Integer.MAX_VALUE)).canConvertToInt()); [EOL]     assertFalse(BigIntegerNode.valueOf(BigInteger.valueOf(-1L + Integer.MIN_VALUE)).canConvertToInt()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.ZERO).canConvertToLong()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.valueOf(Long.MAX_VALUE)).canConvertToLong()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.valueOf(Long.MIN_VALUE)).canConvertToLong()); [EOL] }
public void testBigIntegerNode() throws Exception { [EOL]     BigIntegerNode n = BigIntegerNode.valueOf(BigInteger.ONE); [EOL]     assertStandardEquals(n); [EOL]     assertTrue(n.equals(new BigIntegerNode(BigInteger.ONE))); [EOL]     assertEquals(JsonToken.VALUE_NUMBER_INT, n.asToken()); [EOL]     assertEquals(JsonParser.NumberType.BIG_INTEGER, n.numberType()); [EOL]     assertTrue(n.isNumber()); [EOL]     assertTrue(n.isIntegralNumber()); [EOL]     assertTrue(n.isBigInteger()); [EOL]     assertEquals(BigInteger.ONE, n.numberValue()); [EOL]     assertEquals(1, n.intValue()); [EOL]     assertEquals(1L, n.longValue()); [EOL]     assertEquals(BigInteger.ONE, n.bigIntegerValue()); [EOL]     assertEquals("1", n.asText()); [EOL]     assertNodeNumbers(n, 1, 1.0); [EOL]     BigInteger maxLong = BigInteger.valueOf(Long.MAX_VALUE); [EOL]     n = BigIntegerNode.valueOf(maxLong); [EOL]     assertEquals(Long.MAX_VALUE, n.longValue()); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     JsonNode n2 = mapper.readTree(maxLong.toString()); [EOL]     assertEquals(Long.MAX_VALUE, n2.longValue()); [EOL]     BigInteger beyondLong = maxLong.shiftLeft(2); [EOL]     n2 = mapper.readTree(beyondLong.toString()); [EOL]     assertEquals(beyondLong, n2.bigIntegerValue()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.ZERO).canConvertToInt()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.valueOf(Integer.MAX_VALUE)).canConvertToInt()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.valueOf(Integer.MIN_VALUE)).canConvertToInt()); [EOL]     assertFalse(BigIntegerNode.valueOf(BigInteger.valueOf(1L + Integer.MAX_VALUE)).canConvertToInt()); [EOL]     assertFalse(BigIntegerNode.valueOf(BigInteger.valueOf(-1L + Integer.MIN_VALUE)).canConvertToInt()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.ZERO).canConvertToLong()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.valueOf(Long.MAX_VALUE)).canConvertToLong()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.valueOf(Long.MIN_VALUE)).canConvertToLong()); [EOL] }
public void testBigIntegerNode() throws Exception { [EOL]     BigIntegerNode n = BigIntegerNode.valueOf(BigInteger.ONE); [EOL]     assertStandardEquals(n); [EOL]     assertTrue(n.equals(new BigIntegerNode(BigInteger.ONE))); [EOL]     assertEquals(JsonToken.VALUE_NUMBER_INT, n.asToken()); [EOL]     assertEquals(JsonParser.NumberType.BIG_INTEGER, n.numberType()); [EOL]     assertTrue(n.isNumber()); [EOL]     assertTrue(n.isIntegralNumber()); [EOL]     assertTrue(n.isBigInteger()); [EOL]     assertEquals(BigInteger.ONE, n.numberValue()); [EOL]     assertEquals(1, n.intValue()); [EOL]     assertEquals(1L, n.longValue()); [EOL]     assertEquals(BigInteger.ONE, n.bigIntegerValue()); [EOL]     assertEquals("1", n.asText()); [EOL]     assertNodeNumbers(n, 1, 1.0); [EOL]     BigInteger maxLong = BigInteger.valueOf(Long.MAX_VALUE); [EOL]     n = BigIntegerNode.valueOf(maxLong); [EOL]     assertEquals(Long.MAX_VALUE, n.longValue()); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     JsonNode n2 = mapper.readTree(maxLong.toString()); [EOL]     assertEquals(Long.MAX_VALUE, n2.longValue()); [EOL]     BigInteger beyondLong = maxLong.shiftLeft(2); [EOL]     n2 = mapper.readTree(beyondLong.toString()); [EOL]     assertEquals(beyondLong, n2.bigIntegerValue()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.ZERO).canConvertToInt()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.valueOf(Integer.MAX_VALUE)).canConvertToInt()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.valueOf(Integer.MIN_VALUE)).canConvertToInt()); [EOL]     assertFalse(BigIntegerNode.valueOf(BigInteger.valueOf(1L + Integer.MAX_VALUE)).canConvertToInt()); [EOL]     assertFalse(BigIntegerNode.valueOf(BigInteger.valueOf(-1L + Integer.MIN_VALUE)).canConvertToInt()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.ZERO).canConvertToLong()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.valueOf(Long.MAX_VALUE)).canConvertToLong()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.valueOf(Long.MIN_VALUE)).canConvertToLong()); [EOL] }
public void testBigIntegerNode() throws Exception { [EOL]     BigIntegerNode n = BigIntegerNode.valueOf(BigInteger.ONE); [EOL]     assertStandardEquals(n); [EOL]     assertTrue(n.equals(new BigIntegerNode(BigInteger.ONE))); [EOL]     assertEquals(JsonToken.VALUE_NUMBER_INT, n.asToken()); [EOL]     assertEquals(JsonParser.NumberType.BIG_INTEGER, n.numberType()); [EOL]     assertTrue(n.isNumber()); [EOL]     assertTrue(n.isIntegralNumber()); [EOL]     assertTrue(n.isBigInteger()); [EOL]     assertEquals(BigInteger.ONE, n.numberValue()); [EOL]     assertEquals(1, n.intValue()); [EOL]     assertEquals(1L, n.longValue()); [EOL]     assertEquals(BigInteger.ONE, n.bigIntegerValue()); [EOL]     assertEquals("1", n.asText()); [EOL]     assertNodeNumbers(n, 1, 1.0); [EOL]     BigInteger maxLong = BigInteger.valueOf(Long.MAX_VALUE); [EOL]     n = BigIntegerNode.valueOf(maxLong); [EOL]     assertEquals(Long.MAX_VALUE, n.longValue()); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     JsonNode n2 = mapper.readTree(maxLong.toString()); [EOL]     assertEquals(Long.MAX_VALUE, n2.longValue()); [EOL]     BigInteger beyondLong = maxLong.shiftLeft(2); [EOL]     n2 = mapper.readTree(beyondLong.toString()); [EOL]     assertEquals(beyondLong, n2.bigIntegerValue()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.ZERO).canConvertToInt()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.valueOf(Integer.MAX_VALUE)).canConvertToInt()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.valueOf(Integer.MIN_VALUE)).canConvertToInt()); [EOL]     assertFalse(BigIntegerNode.valueOf(BigInteger.valueOf(1L + Integer.MAX_VALUE)).canConvertToInt()); [EOL]     assertFalse(BigIntegerNode.valueOf(BigInteger.valueOf(-1L + Integer.MIN_VALUE)).canConvertToInt()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.ZERO).canConvertToLong()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.valueOf(Long.MAX_VALUE)).canConvertToLong()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.valueOf(Long.MIN_VALUE)).canConvertToLong()); [EOL] }
public void testBigIntegerNode() throws Exception { [EOL]     BigIntegerNode n = BigIntegerNode.valueOf(BigInteger.ONE); [EOL]     assertStandardEquals(n); [EOL]     assertTrue(n.equals(new BigIntegerNode(BigInteger.ONE))); [EOL]     assertEquals(JsonToken.VALUE_NUMBER_INT, n.asToken()); [EOL]     assertEquals(JsonParser.NumberType.BIG_INTEGER, n.numberType()); [EOL]     assertTrue(n.isNumber()); [EOL]     assertTrue(n.isIntegralNumber()); [EOL]     assertTrue(n.isBigInteger()); [EOL]     assertEquals(BigInteger.ONE, n.numberValue()); [EOL]     assertEquals(1, n.intValue()); [EOL]     assertEquals(1L, n.longValue()); [EOL]     assertEquals(BigInteger.ONE, n.bigIntegerValue()); [EOL]     assertEquals("1", n.asText()); [EOL]     assertNodeNumbers(n, 1, 1.0); [EOL]     BigInteger maxLong = BigInteger.valueOf(Long.MAX_VALUE); [EOL]     n = BigIntegerNode.valueOf(maxLong); [EOL]     assertEquals(Long.MAX_VALUE, n.longValue()); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     JsonNode n2 = mapper.readTree(maxLong.toString()); [EOL]     assertEquals(Long.MAX_VALUE, n2.longValue()); [EOL]     BigInteger beyondLong = maxLong.shiftLeft(2); [EOL]     n2 = mapper.readTree(beyondLong.toString()); [EOL]     assertEquals(beyondLong, n2.bigIntegerValue()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.ZERO).canConvertToInt()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.valueOf(Integer.MAX_VALUE)).canConvertToInt()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.valueOf(Integer.MIN_VALUE)).canConvertToInt()); [EOL]     assertFalse(BigIntegerNode.valueOf(BigInteger.valueOf(1L + Integer.MAX_VALUE)).canConvertToInt()); [EOL]     assertFalse(BigIntegerNode.valueOf(BigInteger.valueOf(-1L + Integer.MIN_VALUE)).canConvertToInt()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.ZERO).canConvertToLong()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.valueOf(Long.MAX_VALUE)).canConvertToLong()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.valueOf(Long.MIN_VALUE)).canConvertToLong()); [EOL] }
public void testBigIntegerNode() throws Exception { [EOL]     BigIntegerNode n = BigIntegerNode.valueOf(BigInteger.ONE); [EOL]     assertStandardEquals(n); [EOL]     assertTrue(n.equals(new BigIntegerNode(BigInteger.ONE))); [EOL]     assertEquals(JsonToken.VALUE_NUMBER_INT, n.asToken()); [EOL]     assertEquals(JsonParser.NumberType.BIG_INTEGER, n.numberType()); [EOL]     assertTrue(n.isNumber()); [EOL]     assertTrue(n.isIntegralNumber()); [EOL]     assertTrue(n.isBigInteger()); [EOL]     assertEquals(BigInteger.ONE, n.numberValue()); [EOL]     assertEquals(1, n.intValue()); [EOL]     assertEquals(1L, n.longValue()); [EOL]     assertEquals(BigInteger.ONE, n.bigIntegerValue()); [EOL]     assertEquals("1", n.asText()); [EOL]     assertNodeNumbers(n, 1, 1.0); [EOL]     BigInteger maxLong = BigInteger.valueOf(Long.MAX_VALUE); [EOL]     n = BigIntegerNode.valueOf(maxLong); [EOL]     assertEquals(Long.MAX_VALUE, n.longValue()); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     JsonNode n2 = mapper.readTree(maxLong.toString()); [EOL]     assertEquals(Long.MAX_VALUE, n2.longValue()); [EOL]     BigInteger beyondLong = maxLong.shiftLeft(2); [EOL]     n2 = mapper.readTree(beyondLong.toString()); [EOL]     assertEquals(beyondLong, n2.bigIntegerValue()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.ZERO).canConvertToInt()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.valueOf(Integer.MAX_VALUE)).canConvertToInt()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.valueOf(Integer.MIN_VALUE)).canConvertToInt()); [EOL]     assertFalse(BigIntegerNode.valueOf(BigInteger.valueOf(1L + Integer.MAX_VALUE)).canConvertToInt()); [EOL]     assertFalse(BigIntegerNode.valueOf(BigInteger.valueOf(-1L + Integer.MIN_VALUE)).canConvertToInt()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.ZERO).canConvertToLong()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.valueOf(Long.MAX_VALUE)).canConvertToLong()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.valueOf(Long.MIN_VALUE)).canConvertToLong()); [EOL] }
public void testBigIntegerNode() throws Exception { [EOL]     BigIntegerNode n = BigIntegerNode.valueOf(BigInteger.ONE); [EOL]     assertStandardEquals(n); [EOL]     assertTrue(n.equals(new BigIntegerNode(BigInteger.ONE))); [EOL]     assertEquals(JsonToken.VALUE_NUMBER_INT, n.asToken()); [EOL]     assertEquals(JsonParser.NumberType.BIG_INTEGER, n.numberType()); [EOL]     assertTrue(n.isNumber()); [EOL]     assertTrue(n.isIntegralNumber()); [EOL]     assertTrue(n.isBigInteger()); [EOL]     assertEquals(BigInteger.ONE, n.numberValue()); [EOL]     assertEquals(1, n.intValue()); [EOL]     assertEquals(1L, n.longValue()); [EOL]     assertEquals(BigInteger.ONE, n.bigIntegerValue()); [EOL]     assertEquals("1", n.asText()); [EOL]     assertNodeNumbers(n, 1, 1.0); [EOL]     BigInteger maxLong = BigInteger.valueOf(Long.MAX_VALUE); [EOL]     n = BigIntegerNode.valueOf(maxLong); [EOL]     assertEquals(Long.MAX_VALUE, n.longValue()); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     JsonNode n2 = mapper.readTree(maxLong.toString()); [EOL]     assertEquals(Long.MAX_VALUE, n2.longValue()); [EOL]     BigInteger beyondLong = maxLong.shiftLeft(2); [EOL]     n2 = mapper.readTree(beyondLong.toString()); [EOL]     assertEquals(beyondLong, n2.bigIntegerValue()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.ZERO).canConvertToInt()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.valueOf(Integer.MAX_VALUE)).canConvertToInt()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.valueOf(Integer.MIN_VALUE)).canConvertToInt()); [EOL]     assertFalse(BigIntegerNode.valueOf(BigInteger.valueOf(1L + Integer.MAX_VALUE)).canConvertToInt()); [EOL]     assertFalse(BigIntegerNode.valueOf(BigInteger.valueOf(-1L + Integer.MIN_VALUE)).canConvertToInt()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.ZERO).canConvertToLong()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.valueOf(Long.MAX_VALUE)).canConvertToLong()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.valueOf(Long.MIN_VALUE)).canConvertToLong()); [EOL] }
public void testBigIntegerNode() throws Exception { [EOL]     BigIntegerNode n = BigIntegerNode.valueOf(BigInteger.ONE); [EOL]     assertStandardEquals(n); [EOL]     assertTrue(n.equals(new BigIntegerNode(BigInteger.ONE))); [EOL]     assertEquals(JsonToken.VALUE_NUMBER_INT, n.asToken()); [EOL]     assertEquals(JsonParser.NumberType.BIG_INTEGER, n.numberType()); [EOL]     assertTrue(n.isNumber()); [EOL]     assertTrue(n.isIntegralNumber()); [EOL]     assertTrue(n.isBigInteger()); [EOL]     assertEquals(BigInteger.ONE, n.numberValue()); [EOL]     assertEquals(1, n.intValue()); [EOL]     assertEquals(1L, n.longValue()); [EOL]     assertEquals(BigInteger.ONE, n.bigIntegerValue()); [EOL]     assertEquals("1", n.asText()); [EOL]     assertNodeNumbers(n, 1, 1.0); [EOL]     BigInteger maxLong = BigInteger.valueOf(Long.MAX_VALUE); [EOL]     n = BigIntegerNode.valueOf(maxLong); [EOL]     assertEquals(Long.MAX_VALUE, n.longValue()); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     JsonNode n2 = mapper.readTree(maxLong.toString()); [EOL]     assertEquals(Long.MAX_VALUE, n2.longValue()); [EOL]     BigInteger beyondLong = maxLong.shiftLeft(2); [EOL]     n2 = mapper.readTree(beyondLong.toString()); [EOL]     assertEquals(beyondLong, n2.bigIntegerValue()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.ZERO).canConvertToInt()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.valueOf(Integer.MAX_VALUE)).canConvertToInt()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.valueOf(Integer.MIN_VALUE)).canConvertToInt()); [EOL]     assertFalse(BigIntegerNode.valueOf(BigInteger.valueOf(1L + Integer.MAX_VALUE)).canConvertToInt()); [EOL]     assertFalse(BigIntegerNode.valueOf(BigInteger.valueOf(-1L + Integer.MIN_VALUE)).canConvertToInt()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.ZERO).canConvertToLong()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.valueOf(Long.MAX_VALUE)).canConvertToLong()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.valueOf(Long.MIN_VALUE)).canConvertToLong()); [EOL] }
public void testBoolean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     JsonNode result = mapper.readTree("true\n"); [EOL]     assertFalse(result.isNull()); [EOL]     assertFalse(result.isNumber()); [EOL]     assertFalse(result.isTextual()); [EOL]     assertTrue(result.isBoolean()); [EOL]     assertType(result, BooleanNode.class); [EOL]     assertTrue(result.booleanValue()); [EOL]     assertEquals("true", result.asText()); [EOL]     assertFalse(result.isMissingNode()); [EOL]     assertEquals(result, BooleanNode.valueOf(true)); [EOL]     assertEquals(result, BooleanNode.getTrue()); [EOL] }
public void testBoolean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     JsonNode result = mapper.readTree("true\n"); [EOL]     assertFalse(result.isNull()); [EOL]     assertFalse(result.isNumber()); [EOL]     assertFalse(result.isTextual()); [EOL]     assertTrue(result.isBoolean()); [EOL]     assertType(result, BooleanNode.class); [EOL]     assertTrue(result.booleanValue()); [EOL]     assertEquals("true", result.asText()); [EOL]     assertFalse(result.isMissingNode()); [EOL]     assertEquals(result, BooleanNode.valueOf(true)); [EOL]     assertEquals(result, BooleanNode.getTrue()); [EOL] }
public void testSimple() throws Exception { [EOL]     final String JSON = SAMPLE_DOC_JSON_SPEC; [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     for (int type = 0; type < 2; ++type) { [EOL]         JsonNode result; [EOL]         if (type == 0) { [EOL]             result = mapper.readTree(new StringReader(JSON)); [EOL]         } else { [EOL]             result = mapper.readTree(JSON); [EOL]         } [EOL]         assertType(result, ObjectNode.class); [EOL]         assertEquals(1, result.size()); [EOL]         assertTrue(result.isObject()); [EOL]         ObjectNode main = (ObjectNode) result; [EOL]         assertEquals("Image", main.fieldNames().next()); [EOL]         JsonNode ob = main.elements().next(); [EOL]         assertType(ob, ObjectNode.class); [EOL]         ObjectNode imageMap = (ObjectNode) ob; [EOL]         assertEquals(5, imageMap.size()); [EOL]         ob = imageMap.get("Width"); [EOL]         assertTrue(ob.isIntegralNumber()); [EOL]         assertFalse(ob.isFloatingPointNumber()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_WIDTH, ob.intValue()); [EOL]         ob = imageMap.get("Height"); [EOL]         assertTrue(ob.isIntegralNumber()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_HEIGHT, ob.intValue()); [EOL]         ob = imageMap.get("Title"); [EOL]         assertTrue(ob.isTextual()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_TITLE, ob.textValue()); [EOL]         ob = imageMap.get("Thumbnail"); [EOL]         assertType(ob, ObjectNode.class); [EOL]         ObjectNode tn = (ObjectNode) ob; [EOL]         ob = tn.get("Url"); [EOL]         assertTrue(ob.isTextual()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_TN_URL, ob.textValue()); [EOL]         ob = tn.get("Height"); [EOL]         assertTrue(ob.isIntegralNumber()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_TN_HEIGHT, ob.intValue()); [EOL]         ob = tn.get("Width"); [EOL]         assertTrue(ob.isTextual()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_TN_WIDTH, ob.textValue()); [EOL]         ob = imageMap.get("IDs"); [EOL]         assertTrue(ob.isArray()); [EOL]         ArrayNode idList = (ArrayNode) ob; [EOL]         assertEquals(4, idList.size()); [EOL]         assertEquals(4, calcLength(idList.elements())); [EOL]         assertEquals(4, calcLength(idList.iterator())); [EOL]         { [EOL]             int[] values = new int[] { SAMPLE_SPEC_VALUE_TN_ID1, SAMPLE_SPEC_VALUE_TN_ID2, SAMPLE_SPEC_VALUE_TN_ID3, SAMPLE_SPEC_VALUE_TN_ID4 }; [EOL]             for (int i = 0; i < values.length; ++i) { [EOL]                 assertEquals(values[i], idList.get(i).intValue()); [EOL]             } [EOL]             int i = 0; [EOL]             for (JsonNode n : idList) { [EOL]                 assertEquals(values[i], n.intValue()); [EOL]                 ++i; [EOL]             } [EOL]         } [EOL]     } [EOL] }
public void testSimple() throws Exception { [EOL]     final String JSON = SAMPLE_DOC_JSON_SPEC; [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     for (int type = 0; type < 2; ++type) { [EOL]         JsonNode result; [EOL]         if (type == 0) { [EOL]             result = mapper.readTree(new StringReader(JSON)); [EOL]         } else { [EOL]             result = mapper.readTree(JSON); [EOL]         } [EOL]         assertType(result, ObjectNode.class); [EOL]         assertEquals(1, result.size()); [EOL]         assertTrue(result.isObject()); [EOL]         ObjectNode main = (ObjectNode) result; [EOL]         assertEquals("Image", main.fieldNames().next()); [EOL]         JsonNode ob = main.elements().next(); [EOL]         assertType(ob, ObjectNode.class); [EOL]         ObjectNode imageMap = (ObjectNode) ob; [EOL]         assertEquals(5, imageMap.size()); [EOL]         ob = imageMap.get("Width"); [EOL]         assertTrue(ob.isIntegralNumber()); [EOL]         assertFalse(ob.isFloatingPointNumber()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_WIDTH, ob.intValue()); [EOL]         ob = imageMap.get("Height"); [EOL]         assertTrue(ob.isIntegralNumber()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_HEIGHT, ob.intValue()); [EOL]         ob = imageMap.get("Title"); [EOL]         assertTrue(ob.isTextual()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_TITLE, ob.textValue()); [EOL]         ob = imageMap.get("Thumbnail"); [EOL]         assertType(ob, ObjectNode.class); [EOL]         ObjectNode tn = (ObjectNode) ob; [EOL]         ob = tn.get("Url"); [EOL]         assertTrue(ob.isTextual()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_TN_URL, ob.textValue()); [EOL]         ob = tn.get("Height"); [EOL]         assertTrue(ob.isIntegralNumber()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_TN_HEIGHT, ob.intValue()); [EOL]         ob = tn.get("Width"); [EOL]         assertTrue(ob.isTextual()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_TN_WIDTH, ob.textValue()); [EOL]         ob = imageMap.get("IDs"); [EOL]         assertTrue(ob.isArray()); [EOL]         ArrayNode idList = (ArrayNode) ob; [EOL]         assertEquals(4, idList.size()); [EOL]         assertEquals(4, calcLength(idList.elements())); [EOL]         assertEquals(4, calcLength(idList.iterator())); [EOL]         { [EOL]             int[] values = new int[] { SAMPLE_SPEC_VALUE_TN_ID1, SAMPLE_SPEC_VALUE_TN_ID2, SAMPLE_SPEC_VALUE_TN_ID3, SAMPLE_SPEC_VALUE_TN_ID4 }; [EOL]             for (int i = 0; i < values.length; ++i) { [EOL]                 assertEquals(values[i], idList.get(i).intValue()); [EOL]             } [EOL]             int i = 0; [EOL]             for (JsonNode n : idList) { [EOL]                 assertEquals(values[i], n.intValue()); [EOL]                 ++i; [EOL]             } [EOL]         } [EOL]     } [EOL] }
public void testSimple() throws Exception { [EOL]     final String JSON = SAMPLE_DOC_JSON_SPEC; [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     for (int type = 0; type < 2; ++type) { [EOL]         JsonNode result; [EOL]         if (type == 0) { [EOL]             result = mapper.readTree(new StringReader(JSON)); [EOL]         } else { [EOL]             result = mapper.readTree(JSON); [EOL]         } [EOL]         assertType(result, ObjectNode.class); [EOL]         assertEquals(1, result.size()); [EOL]         assertTrue(result.isObject()); [EOL]         ObjectNode main = (ObjectNode) result; [EOL]         assertEquals("Image", main.fieldNames().next()); [EOL]         JsonNode ob = main.elements().next(); [EOL]         assertType(ob, ObjectNode.class); [EOL]         ObjectNode imageMap = (ObjectNode) ob; [EOL]         assertEquals(5, imageMap.size()); [EOL]         ob = imageMap.get("Width"); [EOL]         assertTrue(ob.isIntegralNumber()); [EOL]         assertFalse(ob.isFloatingPointNumber()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_WIDTH, ob.intValue()); [EOL]         ob = imageMap.get("Height"); [EOL]         assertTrue(ob.isIntegralNumber()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_HEIGHT, ob.intValue()); [EOL]         ob = imageMap.get("Title"); [EOL]         assertTrue(ob.isTextual()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_TITLE, ob.textValue()); [EOL]         ob = imageMap.get("Thumbnail"); [EOL]         assertType(ob, ObjectNode.class); [EOL]         ObjectNode tn = (ObjectNode) ob; [EOL]         ob = tn.get("Url"); [EOL]         assertTrue(ob.isTextual()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_TN_URL, ob.textValue()); [EOL]         ob = tn.get("Height"); [EOL]         assertTrue(ob.isIntegralNumber()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_TN_HEIGHT, ob.intValue()); [EOL]         ob = tn.get("Width"); [EOL]         assertTrue(ob.isTextual()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_TN_WIDTH, ob.textValue()); [EOL]         ob = imageMap.get("IDs"); [EOL]         assertTrue(ob.isArray()); [EOL]         ArrayNode idList = (ArrayNode) ob; [EOL]         assertEquals(4, idList.size()); [EOL]         assertEquals(4, calcLength(idList.elements())); [EOL]         assertEquals(4, calcLength(idList.iterator())); [EOL]         { [EOL]             int[] values = new int[] { SAMPLE_SPEC_VALUE_TN_ID1, SAMPLE_SPEC_VALUE_TN_ID2, SAMPLE_SPEC_VALUE_TN_ID3, SAMPLE_SPEC_VALUE_TN_ID4 }; [EOL]             for (int i = 0; i < values.length; ++i) { [EOL]                 assertEquals(values[i], idList.get(i).intValue()); [EOL]             } [EOL]             int i = 0; [EOL]             for (JsonNode n : idList) { [EOL]                 assertEquals(values[i], n.intValue()); [EOL]                 ++i; [EOL]             } [EOL]         } [EOL]     } [EOL] }
public void testBigIntegerNode() throws Exception { [EOL]     BigIntegerNode n = BigIntegerNode.valueOf(BigInteger.ONE); [EOL]     assertStandardEquals(n); [EOL]     assertTrue(n.equals(new BigIntegerNode(BigInteger.ONE))); [EOL]     assertEquals(JsonToken.VALUE_NUMBER_INT, n.asToken()); [EOL]     assertEquals(JsonParser.NumberType.BIG_INTEGER, n.numberType()); [EOL]     assertTrue(n.isNumber()); [EOL]     assertTrue(n.isIntegralNumber()); [EOL]     assertTrue(n.isBigInteger()); [EOL]     assertEquals(BigInteger.ONE, n.numberValue()); [EOL]     assertEquals(1, n.intValue()); [EOL]     assertEquals(1L, n.longValue()); [EOL]     assertEquals(BigInteger.ONE, n.bigIntegerValue()); [EOL]     assertEquals("1", n.asText()); [EOL]     assertNodeNumbers(n, 1, 1.0); [EOL]     BigInteger maxLong = BigInteger.valueOf(Long.MAX_VALUE); [EOL]     n = BigIntegerNode.valueOf(maxLong); [EOL]     assertEquals(Long.MAX_VALUE, n.longValue()); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     JsonNode n2 = mapper.readTree(maxLong.toString()); [EOL]     assertEquals(Long.MAX_VALUE, n2.longValue()); [EOL]     BigInteger beyondLong = maxLong.shiftLeft(2); [EOL]     n2 = mapper.readTree(beyondLong.toString()); [EOL]     assertEquals(beyondLong, n2.bigIntegerValue()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.ZERO).canConvertToInt()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.valueOf(Integer.MAX_VALUE)).canConvertToInt()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.valueOf(Integer.MIN_VALUE)).canConvertToInt()); [EOL]     assertFalse(BigIntegerNode.valueOf(BigInteger.valueOf(1L + Integer.MAX_VALUE)).canConvertToInt()); [EOL]     assertFalse(BigIntegerNode.valueOf(BigInteger.valueOf(-1L + Integer.MIN_VALUE)).canConvertToInt()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.ZERO).canConvertToLong()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.valueOf(Long.MAX_VALUE)).canConvertToLong()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.valueOf(Long.MIN_VALUE)).canConvertToLong()); [EOL] }
public void testBigIntegerNode() throws Exception { [EOL]     BigIntegerNode n = BigIntegerNode.valueOf(BigInteger.ONE); [EOL]     assertStandardEquals(n); [EOL]     assertTrue(n.equals(new BigIntegerNode(BigInteger.ONE))); [EOL]     assertEquals(JsonToken.VALUE_NUMBER_INT, n.asToken()); [EOL]     assertEquals(JsonParser.NumberType.BIG_INTEGER, n.numberType()); [EOL]     assertTrue(n.isNumber()); [EOL]     assertTrue(n.isIntegralNumber()); [EOL]     assertTrue(n.isBigInteger()); [EOL]     assertEquals(BigInteger.ONE, n.numberValue()); [EOL]     assertEquals(1, n.intValue()); [EOL]     assertEquals(1L, n.longValue()); [EOL]     assertEquals(BigInteger.ONE, n.bigIntegerValue()); [EOL]     assertEquals("1", n.asText()); [EOL]     assertNodeNumbers(n, 1, 1.0); [EOL]     BigInteger maxLong = BigInteger.valueOf(Long.MAX_VALUE); [EOL]     n = BigIntegerNode.valueOf(maxLong); [EOL]     assertEquals(Long.MAX_VALUE, n.longValue()); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     JsonNode n2 = mapper.readTree(maxLong.toString()); [EOL]     assertEquals(Long.MAX_VALUE, n2.longValue()); [EOL]     BigInteger beyondLong = maxLong.shiftLeft(2); [EOL]     n2 = mapper.readTree(beyondLong.toString()); [EOL]     assertEquals(beyondLong, n2.bigIntegerValue()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.ZERO).canConvertToInt()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.valueOf(Integer.MAX_VALUE)).canConvertToInt()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.valueOf(Integer.MIN_VALUE)).canConvertToInt()); [EOL]     assertFalse(BigIntegerNode.valueOf(BigInteger.valueOf(1L + Integer.MAX_VALUE)).canConvertToInt()); [EOL]     assertFalse(BigIntegerNode.valueOf(BigInteger.valueOf(-1L + Integer.MIN_VALUE)).canConvertToInt()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.ZERO).canConvertToLong()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.valueOf(Long.MAX_VALUE)).canConvertToLong()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.valueOf(Long.MIN_VALUE)).canConvertToLong()); [EOL] }
public void testBigIntegerNode() throws Exception { [EOL]     BigIntegerNode n = BigIntegerNode.valueOf(BigInteger.ONE); [EOL]     assertStandardEquals(n); [EOL]     assertTrue(n.equals(new BigIntegerNode(BigInteger.ONE))); [EOL]     assertEquals(JsonToken.VALUE_NUMBER_INT, n.asToken()); [EOL]     assertEquals(JsonParser.NumberType.BIG_INTEGER, n.numberType()); [EOL]     assertTrue(n.isNumber()); [EOL]     assertTrue(n.isIntegralNumber()); [EOL]     assertTrue(n.isBigInteger()); [EOL]     assertEquals(BigInteger.ONE, n.numberValue()); [EOL]     assertEquals(1, n.intValue()); [EOL]     assertEquals(1L, n.longValue()); [EOL]     assertEquals(BigInteger.ONE, n.bigIntegerValue()); [EOL]     assertEquals("1", n.asText()); [EOL]     assertNodeNumbers(n, 1, 1.0); [EOL]     BigInteger maxLong = BigInteger.valueOf(Long.MAX_VALUE); [EOL]     n = BigIntegerNode.valueOf(maxLong); [EOL]     assertEquals(Long.MAX_VALUE, n.longValue()); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     JsonNode n2 = mapper.readTree(maxLong.toString()); [EOL]     assertEquals(Long.MAX_VALUE, n2.longValue()); [EOL]     BigInteger beyondLong = maxLong.shiftLeft(2); [EOL]     n2 = mapper.readTree(beyondLong.toString()); [EOL]     assertEquals(beyondLong, n2.bigIntegerValue()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.ZERO).canConvertToInt()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.valueOf(Integer.MAX_VALUE)).canConvertToInt()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.valueOf(Integer.MIN_VALUE)).canConvertToInt()); [EOL]     assertFalse(BigIntegerNode.valueOf(BigInteger.valueOf(1L + Integer.MAX_VALUE)).canConvertToInt()); [EOL]     assertFalse(BigIntegerNode.valueOf(BigInteger.valueOf(-1L + Integer.MIN_VALUE)).canConvertToInt()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.ZERO).canConvertToLong()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.valueOf(Long.MAX_VALUE)).canConvertToLong()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.valueOf(Long.MIN_VALUE)).canConvertToLong()); [EOL] }
public void testBigIntegerNode() throws Exception { [EOL]     BigIntegerNode n = BigIntegerNode.valueOf(BigInteger.ONE); [EOL]     assertStandardEquals(n); [EOL]     assertTrue(n.equals(new BigIntegerNode(BigInteger.ONE))); [EOL]     assertEquals(JsonToken.VALUE_NUMBER_INT, n.asToken()); [EOL]     assertEquals(JsonParser.NumberType.BIG_INTEGER, n.numberType()); [EOL]     assertTrue(n.isNumber()); [EOL]     assertTrue(n.isIntegralNumber()); [EOL]     assertTrue(n.isBigInteger()); [EOL]     assertEquals(BigInteger.ONE, n.numberValue()); [EOL]     assertEquals(1, n.intValue()); [EOL]     assertEquals(1L, n.longValue()); [EOL]     assertEquals(BigInteger.ONE, n.bigIntegerValue()); [EOL]     assertEquals("1", n.asText()); [EOL]     assertNodeNumbers(n, 1, 1.0); [EOL]     BigInteger maxLong = BigInteger.valueOf(Long.MAX_VALUE); [EOL]     n = BigIntegerNode.valueOf(maxLong); [EOL]     assertEquals(Long.MAX_VALUE, n.longValue()); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     JsonNode n2 = mapper.readTree(maxLong.toString()); [EOL]     assertEquals(Long.MAX_VALUE, n2.longValue()); [EOL]     BigInteger beyondLong = maxLong.shiftLeft(2); [EOL]     n2 = mapper.readTree(beyondLong.toString()); [EOL]     assertEquals(beyondLong, n2.bigIntegerValue()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.ZERO).canConvertToInt()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.valueOf(Integer.MAX_VALUE)).canConvertToInt()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.valueOf(Integer.MIN_VALUE)).canConvertToInt()); [EOL]     assertFalse(BigIntegerNode.valueOf(BigInteger.valueOf(1L + Integer.MAX_VALUE)).canConvertToInt()); [EOL]     assertFalse(BigIntegerNode.valueOf(BigInteger.valueOf(-1L + Integer.MIN_VALUE)).canConvertToInt()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.ZERO).canConvertToLong()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.valueOf(Long.MAX_VALUE)).canConvertToLong()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.valueOf(Long.MIN_VALUE)).canConvertToLong()); [EOL] }
public void testBigIntegerNode() throws Exception { [EOL]     BigIntegerNode n = BigIntegerNode.valueOf(BigInteger.ONE); [EOL]     assertStandardEquals(n); [EOL]     assertTrue(n.equals(new BigIntegerNode(BigInteger.ONE))); [EOL]     assertEquals(JsonToken.VALUE_NUMBER_INT, n.asToken()); [EOL]     assertEquals(JsonParser.NumberType.BIG_INTEGER, n.numberType()); [EOL]     assertTrue(n.isNumber()); [EOL]     assertTrue(n.isIntegralNumber()); [EOL]     assertTrue(n.isBigInteger()); [EOL]     assertEquals(BigInteger.ONE, n.numberValue()); [EOL]     assertEquals(1, n.intValue()); [EOL]     assertEquals(1L, n.longValue()); [EOL]     assertEquals(BigInteger.ONE, n.bigIntegerValue()); [EOL]     assertEquals("1", n.asText()); [EOL]     assertNodeNumbers(n, 1, 1.0); [EOL]     BigInteger maxLong = BigInteger.valueOf(Long.MAX_VALUE); [EOL]     n = BigIntegerNode.valueOf(maxLong); [EOL]     assertEquals(Long.MAX_VALUE, n.longValue()); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     JsonNode n2 = mapper.readTree(maxLong.toString()); [EOL]     assertEquals(Long.MAX_VALUE, n2.longValue()); [EOL]     BigInteger beyondLong = maxLong.shiftLeft(2); [EOL]     n2 = mapper.readTree(beyondLong.toString()); [EOL]     assertEquals(beyondLong, n2.bigIntegerValue()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.ZERO).canConvertToInt()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.valueOf(Integer.MAX_VALUE)).canConvertToInt()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.valueOf(Integer.MIN_VALUE)).canConvertToInt()); [EOL]     assertFalse(BigIntegerNode.valueOf(BigInteger.valueOf(1L + Integer.MAX_VALUE)).canConvertToInt()); [EOL]     assertFalse(BigIntegerNode.valueOf(BigInteger.valueOf(-1L + Integer.MIN_VALUE)).canConvertToInt()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.ZERO).canConvertToLong()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.valueOf(Long.MAX_VALUE)).canConvertToLong()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.valueOf(Long.MIN_VALUE)).canConvertToLong()); [EOL] }
public void testBigIntegerNode() throws Exception { [EOL]     BigIntegerNode n = BigIntegerNode.valueOf(BigInteger.ONE); [EOL]     assertStandardEquals(n); [EOL]     assertTrue(n.equals(new BigIntegerNode(BigInteger.ONE))); [EOL]     assertEquals(JsonToken.VALUE_NUMBER_INT, n.asToken()); [EOL]     assertEquals(JsonParser.NumberType.BIG_INTEGER, n.numberType()); [EOL]     assertTrue(n.isNumber()); [EOL]     assertTrue(n.isIntegralNumber()); [EOL]     assertTrue(n.isBigInteger()); [EOL]     assertEquals(BigInteger.ONE, n.numberValue()); [EOL]     assertEquals(1, n.intValue()); [EOL]     assertEquals(1L, n.longValue()); [EOL]     assertEquals(BigInteger.ONE, n.bigIntegerValue()); [EOL]     assertEquals("1", n.asText()); [EOL]     assertNodeNumbers(n, 1, 1.0); [EOL]     BigInteger maxLong = BigInteger.valueOf(Long.MAX_VALUE); [EOL]     n = BigIntegerNode.valueOf(maxLong); [EOL]     assertEquals(Long.MAX_VALUE, n.longValue()); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     JsonNode n2 = mapper.readTree(maxLong.toString()); [EOL]     assertEquals(Long.MAX_VALUE, n2.longValue()); [EOL]     BigInteger beyondLong = maxLong.shiftLeft(2); [EOL]     n2 = mapper.readTree(beyondLong.toString()); [EOL]     assertEquals(beyondLong, n2.bigIntegerValue()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.ZERO).canConvertToInt()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.valueOf(Integer.MAX_VALUE)).canConvertToInt()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.valueOf(Integer.MIN_VALUE)).canConvertToInt()); [EOL]     assertFalse(BigIntegerNode.valueOf(BigInteger.valueOf(1L + Integer.MAX_VALUE)).canConvertToInt()); [EOL]     assertFalse(BigIntegerNode.valueOf(BigInteger.valueOf(-1L + Integer.MIN_VALUE)).canConvertToInt()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.ZERO).canConvertToLong()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.valueOf(Long.MAX_VALUE)).canConvertToLong()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.valueOf(Long.MIN_VALUE)).canConvertToLong()); [EOL] }
public void testBigIntegerNode() throws Exception { [EOL]     BigIntegerNode n = BigIntegerNode.valueOf(BigInteger.ONE); [EOL]     assertStandardEquals(n); [EOL]     assertTrue(n.equals(new BigIntegerNode(BigInteger.ONE))); [EOL]     assertEquals(JsonToken.VALUE_NUMBER_INT, n.asToken()); [EOL]     assertEquals(JsonParser.NumberType.BIG_INTEGER, n.numberType()); [EOL]     assertTrue(n.isNumber()); [EOL]     assertTrue(n.isIntegralNumber()); [EOL]     assertTrue(n.isBigInteger()); [EOL]     assertEquals(BigInteger.ONE, n.numberValue()); [EOL]     assertEquals(1, n.intValue()); [EOL]     assertEquals(1L, n.longValue()); [EOL]     assertEquals(BigInteger.ONE, n.bigIntegerValue()); [EOL]     assertEquals("1", n.asText()); [EOL]     assertNodeNumbers(n, 1, 1.0); [EOL]     BigInteger maxLong = BigInteger.valueOf(Long.MAX_VALUE); [EOL]     n = BigIntegerNode.valueOf(maxLong); [EOL]     assertEquals(Long.MAX_VALUE, n.longValue()); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     JsonNode n2 = mapper.readTree(maxLong.toString()); [EOL]     assertEquals(Long.MAX_VALUE, n2.longValue()); [EOL]     BigInteger beyondLong = maxLong.shiftLeft(2); [EOL]     n2 = mapper.readTree(beyondLong.toString()); [EOL]     assertEquals(beyondLong, n2.bigIntegerValue()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.ZERO).canConvertToInt()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.valueOf(Integer.MAX_VALUE)).canConvertToInt()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.valueOf(Integer.MIN_VALUE)).canConvertToInt()); [EOL]     assertFalse(BigIntegerNode.valueOf(BigInteger.valueOf(1L + Integer.MAX_VALUE)).canConvertToInt()); [EOL]     assertFalse(BigIntegerNode.valueOf(BigInteger.valueOf(-1L + Integer.MIN_VALUE)).canConvertToInt()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.ZERO).canConvertToLong()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.valueOf(Long.MAX_VALUE)).canConvertToLong()); [EOL]     assertTrue(BigIntegerNode.valueOf(BigInteger.valueOf(Long.MIN_VALUE)).canConvertToLong()); [EOL] }
public void testArray() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     final String JSON = "[[[-0.027512,51.503221],[-0.008497,51.503221],[-0.008497,51.509744],[-0.027512,51.509744]]]"; [EOL]     JsonNode n = mapper.readTree(JSON); [EOL]     assertNotNull(n); [EOL]     assertTrue(n.isArray()); [EOL]     ArrayNode an = (ArrayNode) n; [EOL]     assertEquals(1, an.size()); [EOL]     ArrayNode an2 = (ArrayNode) n.get(0); [EOL]     assertTrue(an2.isArray()); [EOL]     assertEquals(4, an2.size()); [EOL] }
public void testArray() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     final String JSON = "[[[-0.027512,51.503221],[-0.008497,51.503221],[-0.008497,51.509744],[-0.027512,51.509744]]]"; [EOL]     JsonNode n = mapper.readTree(JSON); [EOL]     assertNotNull(n); [EOL]     assertTrue(n.isArray()); [EOL]     ArrayNode an = (ArrayNode) n; [EOL]     assertEquals(1, an.size()); [EOL]     ArrayNode an2 = (ArrayNode) n.get(0); [EOL]     assertTrue(an2.isArray()); [EOL]     assertEquals(4, an2.size()); [EOL] }
public void testArray() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     final String JSON = "[[[-0.027512,51.503221],[-0.008497,51.503221],[-0.008497,51.509744],[-0.027512,51.509744]]]"; [EOL]     JsonNode n = mapper.readTree(JSON); [EOL]     assertNotNull(n); [EOL]     assertTrue(n.isArray()); [EOL]     ArrayNode an = (ArrayNode) n; [EOL]     assertEquals(1, an.size()); [EOL]     ArrayNode an2 = (ArrayNode) n.get(0); [EOL]     assertTrue(an2.isArray()); [EOL]     assertEquals(4, an2.size()); [EOL] }
public void testSimple() throws Exception { [EOL]     final String JSON = SAMPLE_DOC_JSON_SPEC; [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     for (int type = 0; type < 2; ++type) { [EOL]         JsonNode result; [EOL]         if (type == 0) { [EOL]             result = mapper.readTree(new StringReader(JSON)); [EOL]         } else { [EOL]             result = mapper.readTree(JSON); [EOL]         } [EOL]         assertType(result, ObjectNode.class); [EOL]         assertEquals(1, result.size()); [EOL]         assertTrue(result.isObject()); [EOL]         ObjectNode main = (ObjectNode) result; [EOL]         assertEquals("Image", main.fieldNames().next()); [EOL]         JsonNode ob = main.elements().next(); [EOL]         assertType(ob, ObjectNode.class); [EOL]         ObjectNode imageMap = (ObjectNode) ob; [EOL]         assertEquals(5, imageMap.size()); [EOL]         ob = imageMap.get("Width"); [EOL]         assertTrue(ob.isIntegralNumber()); [EOL]         assertFalse(ob.isFloatingPointNumber()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_WIDTH, ob.intValue()); [EOL]         ob = imageMap.get("Height"); [EOL]         assertTrue(ob.isIntegralNumber()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_HEIGHT, ob.intValue()); [EOL]         ob = imageMap.get("Title"); [EOL]         assertTrue(ob.isTextual()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_TITLE, ob.textValue()); [EOL]         ob = imageMap.get("Thumbnail"); [EOL]         assertType(ob, ObjectNode.class); [EOL]         ObjectNode tn = (ObjectNode) ob; [EOL]         ob = tn.get("Url"); [EOL]         assertTrue(ob.isTextual()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_TN_URL, ob.textValue()); [EOL]         ob = tn.get("Height"); [EOL]         assertTrue(ob.isIntegralNumber()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_TN_HEIGHT, ob.intValue()); [EOL]         ob = tn.get("Width"); [EOL]         assertTrue(ob.isTextual()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_TN_WIDTH, ob.textValue()); [EOL]         ob = imageMap.get("IDs"); [EOL]         assertTrue(ob.isArray()); [EOL]         ArrayNode idList = (ArrayNode) ob; [EOL]         assertEquals(4, idList.size()); [EOL]         assertEquals(4, calcLength(idList.elements())); [EOL]         assertEquals(4, calcLength(idList.iterator())); [EOL]         { [EOL]             int[] values = new int[] { SAMPLE_SPEC_VALUE_TN_ID1, SAMPLE_SPEC_VALUE_TN_ID2, SAMPLE_SPEC_VALUE_TN_ID3, SAMPLE_SPEC_VALUE_TN_ID4 }; [EOL]             for (int i = 0; i < values.length; ++i) { [EOL]                 assertEquals(values[i], idList.get(i).intValue()); [EOL]             } [EOL]             int i = 0; [EOL]             for (JsonNode n : idList) { [EOL]                 assertEquals(values[i], n.intValue()); [EOL]                 ++i; [EOL]             } [EOL]         } [EOL]     } [EOL] }
public void testSimple() throws Exception { [EOL]     final String JSON = SAMPLE_DOC_JSON_SPEC; [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     for (int type = 0; type < 2; ++type) { [EOL]         JsonNode result; [EOL]         if (type == 0) { [EOL]             result = mapper.readTree(new StringReader(JSON)); [EOL]         } else { [EOL]             result = mapper.readTree(JSON); [EOL]         } [EOL]         assertType(result, ObjectNode.class); [EOL]         assertEquals(1, result.size()); [EOL]         assertTrue(result.isObject()); [EOL]         ObjectNode main = (ObjectNode) result; [EOL]         assertEquals("Image", main.fieldNames().next()); [EOL]         JsonNode ob = main.elements().next(); [EOL]         assertType(ob, ObjectNode.class); [EOL]         ObjectNode imageMap = (ObjectNode) ob; [EOL]         assertEquals(5, imageMap.size()); [EOL]         ob = imageMap.get("Width"); [EOL]         assertTrue(ob.isIntegralNumber()); [EOL]         assertFalse(ob.isFloatingPointNumber()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_WIDTH, ob.intValue()); [EOL]         ob = imageMap.get("Height"); [EOL]         assertTrue(ob.isIntegralNumber()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_HEIGHT, ob.intValue()); [EOL]         ob = imageMap.get("Title"); [EOL]         assertTrue(ob.isTextual()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_TITLE, ob.textValue()); [EOL]         ob = imageMap.get("Thumbnail"); [EOL]         assertType(ob, ObjectNode.class); [EOL]         ObjectNode tn = (ObjectNode) ob; [EOL]         ob = tn.get("Url"); [EOL]         assertTrue(ob.isTextual()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_TN_URL, ob.textValue()); [EOL]         ob = tn.get("Height"); [EOL]         assertTrue(ob.isIntegralNumber()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_TN_HEIGHT, ob.intValue()); [EOL]         ob = tn.get("Width"); [EOL]         assertTrue(ob.isTextual()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_TN_WIDTH, ob.textValue()); [EOL]         ob = imageMap.get("IDs"); [EOL]         assertTrue(ob.isArray()); [EOL]         ArrayNode idList = (ArrayNode) ob; [EOL]         assertEquals(4, idList.size()); [EOL]         assertEquals(4, calcLength(idList.elements())); [EOL]         assertEquals(4, calcLength(idList.iterator())); [EOL]         { [EOL]             int[] values = new int[] { SAMPLE_SPEC_VALUE_TN_ID1, SAMPLE_SPEC_VALUE_TN_ID2, SAMPLE_SPEC_VALUE_TN_ID3, SAMPLE_SPEC_VALUE_TN_ID4 }; [EOL]             for (int i = 0; i < values.length; ++i) { [EOL]                 assertEquals(values[i], idList.get(i).intValue()); [EOL]             } [EOL]             int i = 0; [EOL]             for (JsonNode n : idList) { [EOL]                 assertEquals(values[i], n.intValue()); [EOL]                 ++i; [EOL]             } [EOL]         } [EOL]     } [EOL] }
public void testSimple() throws Exception { [EOL]     final String JSON = SAMPLE_DOC_JSON_SPEC; [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     for (int type = 0; type < 2; ++type) { [EOL]         JsonNode result; [EOL]         if (type == 0) { [EOL]             result = mapper.readTree(new StringReader(JSON)); [EOL]         } else { [EOL]             result = mapper.readTree(JSON); [EOL]         } [EOL]         assertType(result, ObjectNode.class); [EOL]         assertEquals(1, result.size()); [EOL]         assertTrue(result.isObject()); [EOL]         ObjectNode main = (ObjectNode) result; [EOL]         assertEquals("Image", main.fieldNames().next()); [EOL]         JsonNode ob = main.elements().next(); [EOL]         assertType(ob, ObjectNode.class); [EOL]         ObjectNode imageMap = (ObjectNode) ob; [EOL]         assertEquals(5, imageMap.size()); [EOL]         ob = imageMap.get("Width"); [EOL]         assertTrue(ob.isIntegralNumber()); [EOL]         assertFalse(ob.isFloatingPointNumber()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_WIDTH, ob.intValue()); [EOL]         ob = imageMap.get("Height"); [EOL]         assertTrue(ob.isIntegralNumber()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_HEIGHT, ob.intValue()); [EOL]         ob = imageMap.get("Title"); [EOL]         assertTrue(ob.isTextual()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_TITLE, ob.textValue()); [EOL]         ob = imageMap.get("Thumbnail"); [EOL]         assertType(ob, ObjectNode.class); [EOL]         ObjectNode tn = (ObjectNode) ob; [EOL]         ob = tn.get("Url"); [EOL]         assertTrue(ob.isTextual()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_TN_URL, ob.textValue()); [EOL]         ob = tn.get("Height"); [EOL]         assertTrue(ob.isIntegralNumber()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_TN_HEIGHT, ob.intValue()); [EOL]         ob = tn.get("Width"); [EOL]         assertTrue(ob.isTextual()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_TN_WIDTH, ob.textValue()); [EOL]         ob = imageMap.get("IDs"); [EOL]         assertTrue(ob.isArray()); [EOL]         ArrayNode idList = (ArrayNode) ob; [EOL]         assertEquals(4, idList.size()); [EOL]         assertEquals(4, calcLength(idList.elements())); [EOL]         assertEquals(4, calcLength(idList.iterator())); [EOL]         { [EOL]             int[] values = new int[] { SAMPLE_SPEC_VALUE_TN_ID1, SAMPLE_SPEC_VALUE_TN_ID2, SAMPLE_SPEC_VALUE_TN_ID3, SAMPLE_SPEC_VALUE_TN_ID4 }; [EOL]             for (int i = 0; i < values.length; ++i) { [EOL]                 assertEquals(values[i], idList.get(i).intValue()); [EOL]             } [EOL]             int i = 0; [EOL]             for (JsonNode n : idList) { [EOL]                 assertEquals(values[i], n.intValue()); [EOL]                 ++i; [EOL]             } [EOL]         } [EOL]     } [EOL] }
public void testSimple() throws Exception { [EOL]     final String JSON = SAMPLE_DOC_JSON_SPEC; [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     for (int type = 0; type < 2; ++type) { [EOL]         JsonNode result; [EOL]         if (type == 0) { [EOL]             result = mapper.readTree(new StringReader(JSON)); [EOL]         } else { [EOL]             result = mapper.readTree(JSON); [EOL]         } [EOL]         assertType(result, ObjectNode.class); [EOL]         assertEquals(1, result.size()); [EOL]         assertTrue(result.isObject()); [EOL]         ObjectNode main = (ObjectNode) result; [EOL]         assertEquals("Image", main.fieldNames().next()); [EOL]         JsonNode ob = main.elements().next(); [EOL]         assertType(ob, ObjectNode.class); [EOL]         ObjectNode imageMap = (ObjectNode) ob; [EOL]         assertEquals(5, imageMap.size()); [EOL]         ob = imageMap.get("Width"); [EOL]         assertTrue(ob.isIntegralNumber()); [EOL]         assertFalse(ob.isFloatingPointNumber()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_WIDTH, ob.intValue()); [EOL]         ob = imageMap.get("Height"); [EOL]         assertTrue(ob.isIntegralNumber()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_HEIGHT, ob.intValue()); [EOL]         ob = imageMap.get("Title"); [EOL]         assertTrue(ob.isTextual()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_TITLE, ob.textValue()); [EOL]         ob = imageMap.get("Thumbnail"); [EOL]         assertType(ob, ObjectNode.class); [EOL]         ObjectNode tn = (ObjectNode) ob; [EOL]         ob = tn.get("Url"); [EOL]         assertTrue(ob.isTextual()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_TN_URL, ob.textValue()); [EOL]         ob = tn.get("Height"); [EOL]         assertTrue(ob.isIntegralNumber()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_TN_HEIGHT, ob.intValue()); [EOL]         ob = tn.get("Width"); [EOL]         assertTrue(ob.isTextual()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_TN_WIDTH, ob.textValue()); [EOL]         ob = imageMap.get("IDs"); [EOL]         assertTrue(ob.isArray()); [EOL]         ArrayNode idList = (ArrayNode) ob; [EOL]         assertEquals(4, idList.size()); [EOL]         assertEquals(4, calcLength(idList.elements())); [EOL]         assertEquals(4, calcLength(idList.iterator())); [EOL]         { [EOL]             int[] values = new int[] { SAMPLE_SPEC_VALUE_TN_ID1, SAMPLE_SPEC_VALUE_TN_ID2, SAMPLE_SPEC_VALUE_TN_ID3, SAMPLE_SPEC_VALUE_TN_ID4 }; [EOL]             for (int i = 0; i < values.length; ++i) { [EOL]                 assertEquals(values[i], idList.get(i).intValue()); [EOL]             } [EOL]             int i = 0; [EOL]             for (JsonNode n : idList) { [EOL]                 assertEquals(values[i], n.intValue()); [EOL]                 ++i; [EOL]             } [EOL]         } [EOL]     } [EOL] }
public void testSimple() throws Exception { [EOL]     final String JSON = SAMPLE_DOC_JSON_SPEC; [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     for (int type = 0; type < 2; ++type) { [EOL]         JsonNode result; [EOL]         if (type == 0) { [EOL]             result = mapper.readTree(new StringReader(JSON)); [EOL]         } else { [EOL]             result = mapper.readTree(JSON); [EOL]         } [EOL]         assertType(result, ObjectNode.class); [EOL]         assertEquals(1, result.size()); [EOL]         assertTrue(result.isObject()); [EOL]         ObjectNode main = (ObjectNode) result; [EOL]         assertEquals("Image", main.fieldNames().next()); [EOL]         JsonNode ob = main.elements().next(); [EOL]         assertType(ob, ObjectNode.class); [EOL]         ObjectNode imageMap = (ObjectNode) ob; [EOL]         assertEquals(5, imageMap.size()); [EOL]         ob = imageMap.get("Width"); [EOL]         assertTrue(ob.isIntegralNumber()); [EOL]         assertFalse(ob.isFloatingPointNumber()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_WIDTH, ob.intValue()); [EOL]         ob = imageMap.get("Height"); [EOL]         assertTrue(ob.isIntegralNumber()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_HEIGHT, ob.intValue()); [EOL]         ob = imageMap.get("Title"); [EOL]         assertTrue(ob.isTextual()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_TITLE, ob.textValue()); [EOL]         ob = imageMap.get("Thumbnail"); [EOL]         assertType(ob, ObjectNode.class); [EOL]         ObjectNode tn = (ObjectNode) ob; [EOL]         ob = tn.get("Url"); [EOL]         assertTrue(ob.isTextual()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_TN_URL, ob.textValue()); [EOL]         ob = tn.get("Height"); [EOL]         assertTrue(ob.isIntegralNumber()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_TN_HEIGHT, ob.intValue()); [EOL]         ob = tn.get("Width"); [EOL]         assertTrue(ob.isTextual()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_TN_WIDTH, ob.textValue()); [EOL]         ob = imageMap.get("IDs"); [EOL]         assertTrue(ob.isArray()); [EOL]         ArrayNode idList = (ArrayNode) ob; [EOL]         assertEquals(4, idList.size()); [EOL]         assertEquals(4, calcLength(idList.elements())); [EOL]         assertEquals(4, calcLength(idList.iterator())); [EOL]         { [EOL]             int[] values = new int[] { SAMPLE_SPEC_VALUE_TN_ID1, SAMPLE_SPEC_VALUE_TN_ID2, SAMPLE_SPEC_VALUE_TN_ID3, SAMPLE_SPEC_VALUE_TN_ID4 }; [EOL]             for (int i = 0; i < values.length; ++i) { [EOL]                 assertEquals(values[i], idList.get(i).intValue()); [EOL]             } [EOL]             int i = 0; [EOL]             for (JsonNode n : idList) { [EOL]                 assertEquals(values[i], n.intValue()); [EOL]                 ++i; [EOL]             } [EOL]         } [EOL]     } [EOL] }
public void testDefaultImplViaModule() throws Exception { [EOL]     final String JSON = "{\"a\":123}"; [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     try { [EOL]         mapper.readValue(JSON, SuperTypeWithoutDefault.class); [EOL]         fail("Expected an exception"); [EOL]     } catch (JsonMappingException e) { [EOL]         verifyException(e, "missing property"); [EOL]     } [EOL]     mapper = new ObjectMapper(); [EOL]     SimpleModule module = new SimpleModule("test", Version.unknownVersion()); [EOL]     module.addAbstractTypeMapping(SuperTypeWithoutDefault.class, DefaultImpl505.class); [EOL]     mapper.registerModule(module); [EOL]     SuperTypeWithoutDefault bean = mapper.readValue(JSON, SuperTypeWithoutDefault.class); [EOL]     assertNotNull(bean); [EOL]     assertEquals(DefaultImpl505.class, bean.getClass()); [EOL]     assertEquals(123, ((DefaultImpl505) bean).a); [EOL]     bean = mapper.readValue("{\"#type\":\"foobar\"}", SuperTypeWithoutDefault.class); [EOL]     assertEquals(DefaultImpl505.class, bean.getClass()); [EOL]     assertEquals(0, ((DefaultImpl505) bean).a); [EOL] }
public void testDefaultImplViaModule() throws Exception { [EOL]     final String JSON = "{\"a\":123}"; [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     try { [EOL]         mapper.readValue(JSON, SuperTypeWithoutDefault.class); [EOL]         fail("Expected an exception"); [EOL]     } catch (JsonMappingException e) { [EOL]         verifyException(e, "missing property"); [EOL]     } [EOL]     mapper = new ObjectMapper(); [EOL]     SimpleModule module = new SimpleModule("test", Version.unknownVersion()); [EOL]     module.addAbstractTypeMapping(SuperTypeWithoutDefault.class, DefaultImpl505.class); [EOL]     mapper.registerModule(module); [EOL]     SuperTypeWithoutDefault bean = mapper.readValue(JSON, SuperTypeWithoutDefault.class); [EOL]     assertNotNull(bean); [EOL]     assertEquals(DefaultImpl505.class, bean.getClass()); [EOL]     assertEquals(123, ((DefaultImpl505) bean).a); [EOL]     bean = mapper.readValue("{\"#type\":\"foobar\"}", SuperTypeWithoutDefault.class); [EOL]     assertEquals(DefaultImpl505.class, bean.getClass()); [EOL]     assertEquals(0, ((DefaultImpl505) bean).a); [EOL] }
public void testDefaultImplViaModule() throws Exception { [EOL]     final String JSON = "{\"a\":123}"; [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     try { [EOL]         mapper.readValue(JSON, SuperTypeWithoutDefault.class); [EOL]         fail("Expected an exception"); [EOL]     } catch (JsonMappingException e) { [EOL]         verifyException(e, "missing property"); [EOL]     } [EOL]     mapper = new ObjectMapper(); [EOL]     SimpleModule module = new SimpleModule("test", Version.unknownVersion()); [EOL]     module.addAbstractTypeMapping(SuperTypeWithoutDefault.class, DefaultImpl505.class); [EOL]     mapper.registerModule(module); [EOL]     SuperTypeWithoutDefault bean = mapper.readValue(JSON, SuperTypeWithoutDefault.class); [EOL]     assertNotNull(bean); [EOL]     assertEquals(DefaultImpl505.class, bean.getClass()); [EOL]     assertEquals(123, ((DefaultImpl505) bean).a); [EOL]     bean = mapper.readValue("{\"#type\":\"foobar\"}", SuperTypeWithoutDefault.class); [EOL]     assertEquals(DefaultImpl505.class, bean.getClass()); [EOL]     assertEquals(0, ((DefaultImpl505) bean).a); [EOL] }
public void testDefaultImplViaModule() throws Exception { [EOL]     final String JSON = "{\"a\":123}"; [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     try { [EOL]         mapper.readValue(JSON, SuperTypeWithoutDefault.class); [EOL]         fail("Expected an exception"); [EOL]     } catch (JsonMappingException e) { [EOL]         verifyException(e, "missing property"); [EOL]     } [EOL]     mapper = new ObjectMapper(); [EOL]     SimpleModule module = new SimpleModule("test", Version.unknownVersion()); [EOL]     module.addAbstractTypeMapping(SuperTypeWithoutDefault.class, DefaultImpl505.class); [EOL]     mapper.registerModule(module); [EOL]     SuperTypeWithoutDefault bean = mapper.readValue(JSON, SuperTypeWithoutDefault.class); [EOL]     assertNotNull(bean); [EOL]     assertEquals(DefaultImpl505.class, bean.getClass()); [EOL]     assertEquals(123, ((DefaultImpl505) bean).a); [EOL]     bean = mapper.readValue("{\"#type\":\"foobar\"}", SuperTypeWithoutDefault.class); [EOL]     assertEquals(DefaultImpl505.class, bean.getClass()); [EOL]     assertEquals(0, ((DefaultImpl505) bean).a); [EOL] }
public void testDefaultImplViaModule() throws Exception { [EOL]     final String JSON = "{\"a\":123}"; [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     try { [EOL]         mapper.readValue(JSON, SuperTypeWithoutDefault.class); [EOL]         fail("Expected an exception"); [EOL]     } catch (JsonMappingException e) { [EOL]         verifyException(e, "missing property"); [EOL]     } [EOL]     mapper = new ObjectMapper(); [EOL]     SimpleModule module = new SimpleModule("test", Version.unknownVersion()); [EOL]     module.addAbstractTypeMapping(SuperTypeWithoutDefault.class, DefaultImpl505.class); [EOL]     mapper.registerModule(module); [EOL]     SuperTypeWithoutDefault bean = mapper.readValue(JSON, SuperTypeWithoutDefault.class); [EOL]     assertNotNull(bean); [EOL]     assertEquals(DefaultImpl505.class, bean.getClass()); [EOL]     assertEquals(123, ((DefaultImpl505) bean).a); [EOL]     bean = mapper.readValue("{\"#type\":\"foobar\"}", SuperTypeWithoutDefault.class); [EOL]     assertEquals(DefaultImpl505.class, bean.getClass()); [EOL]     assertEquals(0, ((DefaultImpl505) bean).a); [EOL] }
public void testDefaultImplViaModule() throws Exception { [EOL]     final String JSON = "{\"a\":123}"; [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     try { [EOL]         mapper.readValue(JSON, SuperTypeWithoutDefault.class); [EOL]         fail("Expected an exception"); [EOL]     } catch (JsonMappingException e) { [EOL]         verifyException(e, "missing property"); [EOL]     } [EOL]     mapper = new ObjectMapper(); [EOL]     SimpleModule module = new SimpleModule("test", Version.unknownVersion()); [EOL]     module.addAbstractTypeMapping(SuperTypeWithoutDefault.class, DefaultImpl505.class); [EOL]     mapper.registerModule(module); [EOL]     SuperTypeWithoutDefault bean = mapper.readValue(JSON, SuperTypeWithoutDefault.class); [EOL]     assertNotNull(bean); [EOL]     assertEquals(DefaultImpl505.class, bean.getClass()); [EOL]     assertEquals(123, ((DefaultImpl505) bean).a); [EOL]     bean = mapper.readValue("{\"#type\":\"foobar\"}", SuperTypeWithoutDefault.class); [EOL]     assertEquals(DefaultImpl505.class, bean.getClass()); [EOL]     assertEquals(0, ((DefaultImpl505) bean).a); [EOL] }
public void testDefaultImplViaModule() throws Exception { [EOL]     final String JSON = "{\"a\":123}"; [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     try { [EOL]         mapper.readValue(JSON, SuperTypeWithoutDefault.class); [EOL]         fail("Expected an exception"); [EOL]     } catch (JsonMappingException e) { [EOL]         verifyException(e, "missing property"); [EOL]     } [EOL]     mapper = new ObjectMapper(); [EOL]     SimpleModule module = new SimpleModule("test", Version.unknownVersion()); [EOL]     module.addAbstractTypeMapping(SuperTypeWithoutDefault.class, DefaultImpl505.class); [EOL]     mapper.registerModule(module); [EOL]     SuperTypeWithoutDefault bean = mapper.readValue(JSON, SuperTypeWithoutDefault.class); [EOL]     assertNotNull(bean); [EOL]     assertEquals(DefaultImpl505.class, bean.getClass()); [EOL]     assertEquals(123, ((DefaultImpl505) bean).a); [EOL]     bean = mapper.readValue("{\"#type\":\"foobar\"}", SuperTypeWithoutDefault.class); [EOL]     assertEquals(DefaultImpl505.class, bean.getClass()); [EOL]     assertEquals(0, ((DefaultImpl505) bean).a); [EOL] }
public void testDefaultImplViaModule() throws Exception { [EOL]     final String JSON = "{\"a\":123}"; [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     try { [EOL]         mapper.readValue(JSON, SuperTypeWithoutDefault.class); [EOL]         fail("Expected an exception"); [EOL]     } catch (JsonMappingException e) { [EOL]         verifyException(e, "missing property"); [EOL]     } [EOL]     mapper = new ObjectMapper(); [EOL]     SimpleModule module = new SimpleModule("test", Version.unknownVersion()); [EOL]     module.addAbstractTypeMapping(SuperTypeWithoutDefault.class, DefaultImpl505.class); [EOL]     mapper.registerModule(module); [EOL]     SuperTypeWithoutDefault bean = mapper.readValue(JSON, SuperTypeWithoutDefault.class); [EOL]     assertNotNull(bean); [EOL]     assertEquals(DefaultImpl505.class, bean.getClass()); [EOL]     assertEquals(123, ((DefaultImpl505) bean).a); [EOL]     bean = mapper.readValue("{\"#type\":\"foobar\"}", SuperTypeWithoutDefault.class); [EOL]     assertEquals(DefaultImpl505.class, bean.getClass()); [EOL]     assertEquals(0, ((DefaultImpl505) bean).a); [EOL] }
public void testJackson633() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     AnnotatedBean bean = mapper.readValue("{}", AnnotatedBean.class); [EOL]     assertNotNull(bean); [EOL]     assertEquals("foo", bean.a); [EOL]     assertEquals(3, bean.b); [EOL] }
public void testJackson633() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     AnnotatedBean bean = mapper.readValue("{}", AnnotatedBean.class); [EOL]     assertNotNull(bean); [EOL]     assertEquals("foo", bean.a); [EOL]     assertEquals(3, bean.b); [EOL] }
public void testJackson633() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     AnnotatedBean bean = mapper.readValue("{}", AnnotatedBean.class); [EOL]     assertNotNull(bean); [EOL]     assertEquals("foo", bean.a); [EOL]     assertEquals(3, bean.b); [EOL] }
public void testJackson633() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     AnnotatedBean bean = mapper.readValue("{}", AnnotatedBean.class); [EOL]     assertNotNull(bean); [EOL]     assertEquals("foo", bean.a); [EOL]     assertEquals(3, bean.b); [EOL] }
public void testJackson633() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     AnnotatedBean bean = mapper.readValue("{}", AnnotatedBean.class); [EOL]     assertNotNull(bean); [EOL]     assertEquals("foo", bean.a); [EOL]     assertEquals(3, bean.b); [EOL] }
public void testJackson633() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     AnnotatedBean bean = mapper.readValue("{}", AnnotatedBean.class); [EOL]     assertNotNull(bean); [EOL]     assertEquals("foo", bean.a); [EOL]     assertEquals(3, bean.b); [EOL] }
public void testJackson633() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     AnnotatedBean bean = mapper.readValue("{}", AnnotatedBean.class); [EOL]     assertNotNull(bean); [EOL]     assertEquals("foo", bean.a); [EOL]     assertEquals(3, bean.b); [EOL] }
public void testJackson633() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     AnnotatedBean bean = mapper.readValue("{}", AnnotatedBean.class); [EOL]     assertNotNull(bean); [EOL]     assertEquals("foo", bean.a); [EOL]     assertEquals(3, bean.b); [EOL] }
public void testJackson633() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     AnnotatedBean bean = mapper.readValue("{}", AnnotatedBean.class); [EOL]     assertNotNull(bean); [EOL]     assertEquals("foo", bean.a); [EOL]     assertEquals(3, bean.b); [EOL] }
public void testJackson633() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     AnnotatedBean bean = mapper.readValue("{}", AnnotatedBean.class); [EOL]     assertNotNull(bean); [EOL]     assertEquals("foo", bean.a); [EOL]     assertEquals(3, bean.b); [EOL] }
public void testJackson633() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     AnnotatedBean bean = mapper.readValue("{}", AnnotatedBean.class); [EOL]     assertNotNull(bean); [EOL]     assertEquals("foo", bean.a); [EOL]     assertEquals(3, bean.b); [EOL] }
public void testJackson633() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     AnnotatedBean bean = mapper.readValue("{}", AnnotatedBean.class); [EOL]     assertNotNull(bean); [EOL]     assertEquals("foo", bean.a); [EOL]     assertEquals(3, bean.b); [EOL] }
public void testJackson633() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     AnnotatedBean bean = mapper.readValue("{}", AnnotatedBean.class); [EOL]     assertNotNull(bean); [EOL]     assertEquals("foo", bean.a); [EOL]     assertEquals(3, bean.b); [EOL] }
public void testSimpleConstructor() throws Exception { [EOL]     HashTest test = MAPPER.readValue("{\"type\":\"custom\",\"bytes\":\"abc\" }", HashTest.class); [EOL]     assertEquals("custom", test.type); [EOL]     assertEquals("abc", new String(test.bytes, "UTF-8")); [EOL] }
public void testSimpleConstructor() throws Exception { [EOL]     HashTest test = MAPPER.readValue("{\"type\":\"custom\",\"bytes\":\"abc\" }", HashTest.class); [EOL]     assertEquals("custom", test.type); [EOL]     assertEquals("abc", new String(test.bytes, "UTF-8")); [EOL] }
public void testSimpleConstructor() throws Exception { [EOL]     HashTest test = MAPPER.readValue("{\"type\":\"custom\",\"bytes\":\"abc\" }", HashTest.class); [EOL]     assertEquals("custom", test.type); [EOL]     assertEquals("abc", new String(test.bytes, "UTF-8")); [EOL] }
public void testSimpleConstructor() throws Exception { [EOL]     HashTest test = MAPPER.readValue("{\"type\":\"custom\",\"bytes\":\"abc\" }", HashTest.class); [EOL]     assertEquals("custom", test.type); [EOL]     assertEquals("abc", new String(test.bytes, "UTF-8")); [EOL] }
public void testModifyArrayDeserializer() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerModule(new SimpleModule("test").setDeserializerModifier(new ArrayDeserializerModifier())); [EOL]     Object[] result = mapper.readValue("[1,2]", Object[].class); [EOL]     assertEquals(1, result.length); [EOL]     assertEquals("foo", result[0]); [EOL] }
public void testModifyArrayDeserializer() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerModule(new SimpleModule("test").setDeserializerModifier(new ArrayDeserializerModifier())); [EOL]     Object[] result = mapper.readValue("[1,2]", Object[].class); [EOL]     assertEquals(1, result.length); [EOL]     assertEquals("foo", result[0]); [EOL] }
public void testModifyArrayDeserializer() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerModule(new SimpleModule("test").setDeserializerModifier(new ArrayDeserializerModifier())); [EOL]     Object[] result = mapper.readValue("[1,2]", Object[].class); [EOL]     assertEquals(1, result.length); [EOL]     assertEquals("foo", result[0]); [EOL] }
public void testModifyArrayDeserializer() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerModule(new SimpleModule("test").setDeserializerModifier(new ArrayDeserializerModifier())); [EOL]     Object[] result = mapper.readValue("[1,2]", Object[].class); [EOL]     assertEquals(1, result.length); [EOL]     assertEquals("foo", result[0]); [EOL] }
public void testModifyArrayDeserializer() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerModule(new SimpleModule("test").setDeserializerModifier(new ArrayDeserializerModifier())); [EOL]     Object[] result = mapper.readValue("[1,2]", Object[].class); [EOL]     assertEquals(1, result.length); [EOL]     assertEquals("foo", result[0]); [EOL] }
public void testCustomDeserializers() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     SimpleModule testModule = new SimpleModule("test", Version.unknownVersion()); [EOL]     testModule.addDeserializer(NonDeserializable[].class, new CustomNonDeserArrayDeserializer()); [EOL]     mapper.registerModule(testModule); [EOL]     NonDeserializable[] result = mapper.readValue("[\"a\"]", NonDeserializable[].class); [EOL]     assertNotNull(result); [EOL]     assertEquals(1, result.length); [EOL]     assertEquals("a", result[0].value); [EOL] }
public void testCustomDeserializers() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     SimpleModule testModule = new SimpleModule("test", Version.unknownVersion()); [EOL]     testModule.addDeserializer(NonDeserializable[].class, new CustomNonDeserArrayDeserializer()); [EOL]     mapper.registerModule(testModule); [EOL]     NonDeserializable[] result = mapper.readValue("[\"a\"]", NonDeserializable[].class); [EOL]     assertNotNull(result); [EOL]     assertEquals(1, result.length); [EOL]     assertEquals("a", result[0].value); [EOL] }
public void testMultipleModules() throws Exception { [EOL]     MySimpleModule mod1 = new MySimpleModule("test1", Version.unknownVersion()); [EOL]     SimpleModule mod2 = new SimpleModule("test2", Version.unknownVersion()); [EOL]     mod1.addSerializer(SimpleEnum.class, new SimpleEnumSerializer()); [EOL]     mod1.addDeserializer(CustomBean.class, new CustomBeanDeserializer()); [EOL]     mod2.addDeserializer(SimpleEnum.class, new SimpleEnumDeserializer()); [EOL]     mod2.addSerializer(CustomBean.class, new CustomBeanSerializer()); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerModule(mod1); [EOL]     mapper.registerModule(mod2); [EOL]     assertEquals(quote("b"), mapper.writeValueAsString(SimpleEnum.B)); [EOL]     SimpleEnum result = mapper.readValue(quote("a"), SimpleEnum.class); [EOL]     assertSame(SimpleEnum.A, result); [EOL]     mapper = new ObjectMapper(); [EOL]     mapper.registerModule(mod2); [EOL]     mapper.registerModule(mod1); [EOL]     assertEquals(quote("b"), mapper.writeValueAsString(SimpleEnum.B)); [EOL]     result = mapper.readValue(quote("a"), SimpleEnum.class); [EOL]     assertSame(SimpleEnum.A, result); [EOL] }
public void testMultipleModules() throws Exception { [EOL]     MySimpleModule mod1 = new MySimpleModule("test1", Version.unknownVersion()); [EOL]     SimpleModule mod2 = new SimpleModule("test2", Version.unknownVersion()); [EOL]     mod1.addSerializer(SimpleEnum.class, new SimpleEnumSerializer()); [EOL]     mod1.addDeserializer(CustomBean.class, new CustomBeanDeserializer()); [EOL]     mod2.addDeserializer(SimpleEnum.class, new SimpleEnumDeserializer()); [EOL]     mod2.addSerializer(CustomBean.class, new CustomBeanSerializer()); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerModule(mod1); [EOL]     mapper.registerModule(mod2); [EOL]     assertEquals(quote("b"), mapper.writeValueAsString(SimpleEnum.B)); [EOL]     SimpleEnum result = mapper.readValue(quote("a"), SimpleEnum.class); [EOL]     assertSame(SimpleEnum.A, result); [EOL]     mapper = new ObjectMapper(); [EOL]     mapper.registerModule(mod2); [EOL]     mapper.registerModule(mod1); [EOL]     assertEquals(quote("b"), mapper.writeValueAsString(SimpleEnum.B)); [EOL]     result = mapper.readValue(quote("a"), SimpleEnum.class); [EOL]     assertSame(SimpleEnum.A, result); [EOL] }
public void testBoolean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     JsonNode result = mapper.readTree("true\n"); [EOL]     assertFalse(result.isNull()); [EOL]     assertFalse(result.isNumber()); [EOL]     assertFalse(result.isTextual()); [EOL]     assertTrue(result.isBoolean()); [EOL]     assertType(result, BooleanNode.class); [EOL]     assertTrue(result.booleanValue()); [EOL]     assertEquals("true", result.asText()); [EOL]     assertFalse(result.isMissingNode()); [EOL]     assertEquals(result, BooleanNode.valueOf(true)); [EOL]     assertEquals(result, BooleanNode.getTrue()); [EOL] }
public void testBoolean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     JsonNode result = mapper.readTree("true\n"); [EOL]     assertFalse(result.isNull()); [EOL]     assertFalse(result.isNumber()); [EOL]     assertFalse(result.isTextual()); [EOL]     assertTrue(result.isBoolean()); [EOL]     assertType(result, BooleanNode.class); [EOL]     assertTrue(result.booleanValue()); [EOL]     assertEquals("true", result.asText()); [EOL]     assertFalse(result.isMissingNode()); [EOL]     assertEquals(result, BooleanNode.valueOf(true)); [EOL]     assertEquals(result, BooleanNode.getTrue()); [EOL] }
public void testBoolean() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     JsonNode result = mapper.readTree("true\n"); [EOL]     assertFalse(result.isNull()); [EOL]     assertFalse(result.isNumber()); [EOL]     assertFalse(result.isTextual()); [EOL]     assertTrue(result.isBoolean()); [EOL]     assertType(result, BooleanNode.class); [EOL]     assertTrue(result.booleanValue()); [EOL]     assertEquals("true", result.asText()); [EOL]     assertFalse(result.isMissingNode()); [EOL]     assertEquals(result, BooleanNode.valueOf(true)); [EOL]     assertEquals(result, BooleanNode.getTrue()); [EOL] }
public void testDefaultImplViaModule() throws Exception { [EOL]     final String JSON = "{\"a\":123}"; [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     try { [EOL]         mapper.readValue(JSON, SuperTypeWithoutDefault.class); [EOL]         fail("Expected an exception"); [EOL]     } catch (JsonMappingException e) { [EOL]         verifyException(e, "missing property"); [EOL]     } [EOL]     mapper = new ObjectMapper(); [EOL]     SimpleModule module = new SimpleModule("test", Version.unknownVersion()); [EOL]     module.addAbstractTypeMapping(SuperTypeWithoutDefault.class, DefaultImpl505.class); [EOL]     mapper.registerModule(module); [EOL]     SuperTypeWithoutDefault bean = mapper.readValue(JSON, SuperTypeWithoutDefault.class); [EOL]     assertNotNull(bean); [EOL]     assertEquals(DefaultImpl505.class, bean.getClass()); [EOL]     assertEquals(123, ((DefaultImpl505) bean).a); [EOL]     bean = mapper.readValue("{\"#type\":\"foobar\"}", SuperTypeWithoutDefault.class); [EOL]     assertEquals(DefaultImpl505.class, bean.getClass()); [EOL]     assertEquals(0, ((DefaultImpl505) bean).a); [EOL] }
public void testDefaultImplViaModule() throws Exception { [EOL]     final String JSON = "{\"a\":123}"; [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     try { [EOL]         mapper.readValue(JSON, SuperTypeWithoutDefault.class); [EOL]         fail("Expected an exception"); [EOL]     } catch (JsonMappingException e) { [EOL]         verifyException(e, "missing property"); [EOL]     } [EOL]     mapper = new ObjectMapper(); [EOL]     SimpleModule module = new SimpleModule("test", Version.unknownVersion()); [EOL]     module.addAbstractTypeMapping(SuperTypeWithoutDefault.class, DefaultImpl505.class); [EOL]     mapper.registerModule(module); [EOL]     SuperTypeWithoutDefault bean = mapper.readValue(JSON, SuperTypeWithoutDefault.class); [EOL]     assertNotNull(bean); [EOL]     assertEquals(DefaultImpl505.class, bean.getClass()); [EOL]     assertEquals(123, ((DefaultImpl505) bean).a); [EOL]     bean = mapper.readValue("{\"#type\":\"foobar\"}", SuperTypeWithoutDefault.class); [EOL]     assertEquals(DefaultImpl505.class, bean.getClass()); [EOL]     assertEquals(0, ((DefaultImpl505) bean).a); [EOL] }
public void testDefaultImplViaModule() throws Exception { [EOL]     final String JSON = "{\"a\":123}"; [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     try { [EOL]         mapper.readValue(JSON, SuperTypeWithoutDefault.class); [EOL]         fail("Expected an exception"); [EOL]     } catch (JsonMappingException e) { [EOL]         verifyException(e, "missing property"); [EOL]     } [EOL]     mapper = new ObjectMapper(); [EOL]     SimpleModule module = new SimpleModule("test", Version.unknownVersion()); [EOL]     module.addAbstractTypeMapping(SuperTypeWithoutDefault.class, DefaultImpl505.class); [EOL]     mapper.registerModule(module); [EOL]     SuperTypeWithoutDefault bean = mapper.readValue(JSON, SuperTypeWithoutDefault.class); [EOL]     assertNotNull(bean); [EOL]     assertEquals(DefaultImpl505.class, bean.getClass()); [EOL]     assertEquals(123, ((DefaultImpl505) bean).a); [EOL]     bean = mapper.readValue("{\"#type\":\"foobar\"}", SuperTypeWithoutDefault.class); [EOL]     assertEquals(DefaultImpl505.class, bean.getClass()); [EOL]     assertEquals(0, ((DefaultImpl505) bean).a); [EOL] }
public void testMapToMap() { [EOL]     Map<String, Integer> input = new LinkedHashMap<String, Integer>(); [EOL]     input.put("A", Integer.valueOf(3)); [EOL]     input.put("B", Integer.valueOf(-4)); [EOL]     Map<AB, String> output = mapper.convertValue(input, new TypeReference<Map<AB, String>>() { [EOL]     }); [EOL]     assertEquals(2, output.size()); [EOL]     assertEquals("3", output.get(AB.A)); [EOL]     assertEquals("-4", output.get(AB.B)); [EOL]     Map<String, Integer> roundtrip = mapper.convertValue(input, new TypeReference<TreeMap<String, Integer>>() { [EOL]     }); [EOL]     assertEquals(2, roundtrip.size()); [EOL]     assertEquals(Integer.valueOf(3), roundtrip.get("A")); [EOL]     assertEquals(Integer.valueOf(-4), roundtrip.get("B")); [EOL] }
public void testMapToMap() { [EOL]     Map<String, Integer> input = new LinkedHashMap<String, Integer>(); [EOL]     input.put("A", Integer.valueOf(3)); [EOL]     input.put("B", Integer.valueOf(-4)); [EOL]     Map<AB, String> output = mapper.convertValue(input, new TypeReference<Map<AB, String>>() { [EOL]     }); [EOL]     assertEquals(2, output.size()); [EOL]     assertEquals("3", output.get(AB.A)); [EOL]     assertEquals("-4", output.get(AB.B)); [EOL]     Map<String, Integer> roundtrip = mapper.convertValue(input, new TypeReference<TreeMap<String, Integer>>() { [EOL]     }); [EOL]     assertEquals(2, roundtrip.size()); [EOL]     assertEquals(Integer.valueOf(3), roundtrip.get("A")); [EOL]     assertEquals(Integer.valueOf(-4), roundtrip.get("B")); [EOL] }
public void testMapToMap() { [EOL]     Map<String, Integer> input = new LinkedHashMap<String, Integer>(); [EOL]     input.put("A", Integer.valueOf(3)); [EOL]     input.put("B", Integer.valueOf(-4)); [EOL]     Map<AB, String> output = mapper.convertValue(input, new TypeReference<Map<AB, String>>() { [EOL]     }); [EOL]     assertEquals(2, output.size()); [EOL]     assertEquals("3", output.get(AB.A)); [EOL]     assertEquals("-4", output.get(AB.B)); [EOL]     Map<String, Integer> roundtrip = mapper.convertValue(input, new TypeReference<TreeMap<String, Integer>>() { [EOL]     }); [EOL]     assertEquals(2, roundtrip.size()); [EOL]     assertEquals(Integer.valueOf(3), roundtrip.get("A")); [EOL]     assertEquals(Integer.valueOf(-4), roundtrip.get("B")); [EOL] }
public void testMapToMap() { [EOL]     Map<String, Integer> input = new LinkedHashMap<String, Integer>(); [EOL]     input.put("A", Integer.valueOf(3)); [EOL]     input.put("B", Integer.valueOf(-4)); [EOL]     Map<AB, String> output = mapper.convertValue(input, new TypeReference<Map<AB, String>>() { [EOL]     }); [EOL]     assertEquals(2, output.size()); [EOL]     assertEquals("3", output.get(AB.A)); [EOL]     assertEquals("-4", output.get(AB.B)); [EOL]     Map<String, Integer> roundtrip = mapper.convertValue(input, new TypeReference<TreeMap<String, Integer>>() { [EOL]     }); [EOL]     assertEquals(2, roundtrip.size()); [EOL]     assertEquals(Integer.valueOf(3), roundtrip.get("A")); [EOL]     assertEquals(Integer.valueOf(-4), roundtrip.get("B")); [EOL] }
public void testMapToMap() { [EOL]     Map<String, Integer> input = new LinkedHashMap<String, Integer>(); [EOL]     input.put("A", Integer.valueOf(3)); [EOL]     input.put("B", Integer.valueOf(-4)); [EOL]     Map<AB, String> output = mapper.convertValue(input, new TypeReference<Map<AB, String>>() { [EOL]     }); [EOL]     assertEquals(2, output.size()); [EOL]     assertEquals("3", output.get(AB.A)); [EOL]     assertEquals("-4", output.get(AB.B)); [EOL]     Map<String, Integer> roundtrip = mapper.convertValue(input, new TypeReference<TreeMap<String, Integer>>() { [EOL]     }); [EOL]     assertEquals(2, roundtrip.size()); [EOL]     assertEquals(Integer.valueOf(3), roundtrip.get("A")); [EOL]     assertEquals(Integer.valueOf(-4), roundtrip.get("B")); [EOL] }
public void testMapToMap() { [EOL]     Map<String, Integer> input = new LinkedHashMap<String, Integer>(); [EOL]     input.put("A", Integer.valueOf(3)); [EOL]     input.put("B", Integer.valueOf(-4)); [EOL]     Map<AB, String> output = mapper.convertValue(input, new TypeReference<Map<AB, String>>() { [EOL]     }); [EOL]     assertEquals(2, output.size()); [EOL]     assertEquals("3", output.get(AB.A)); [EOL]     assertEquals("-4", output.get(AB.B)); [EOL]     Map<String, Integer> roundtrip = mapper.convertValue(input, new TypeReference<TreeMap<String, Integer>>() { [EOL]     }); [EOL]     assertEquals(2, roundtrip.size()); [EOL]     assertEquals(Integer.valueOf(3), roundtrip.get("A")); [EOL]     assertEquals(Integer.valueOf(-4), roundtrip.get("B")); [EOL] }
public void testMapToMap() { [EOL]     Map<String, Integer> input = new LinkedHashMap<String, Integer>(); [EOL]     input.put("A", Integer.valueOf(3)); [EOL]     input.put("B", Integer.valueOf(-4)); [EOL]     Map<AB, String> output = mapper.convertValue(input, new TypeReference<Map<AB, String>>() { [EOL]     }); [EOL]     assertEquals(2, output.size()); [EOL]     assertEquals("3", output.get(AB.A)); [EOL]     assertEquals("-4", output.get(AB.B)); [EOL]     Map<String, Integer> roundtrip = mapper.convertValue(input, new TypeReference<TreeMap<String, Integer>>() { [EOL]     }); [EOL]     assertEquals(2, roundtrip.size()); [EOL]     assertEquals(Integer.valueOf(3), roundtrip.get("A")); [EOL]     assertEquals(Integer.valueOf(-4), roundtrip.get("B")); [EOL] }
public void testMapToMap() { [EOL]     Map<String, Integer> input = new LinkedHashMap<String, Integer>(); [EOL]     input.put("A", Integer.valueOf(3)); [EOL]     input.put("B", Integer.valueOf(-4)); [EOL]     Map<AB, String> output = mapper.convertValue(input, new TypeReference<Map<AB, String>>() { [EOL]     }); [EOL]     assertEquals(2, output.size()); [EOL]     assertEquals("3", output.get(AB.A)); [EOL]     assertEquals("-4", output.get(AB.B)); [EOL]     Map<String, Integer> roundtrip = mapper.convertValue(input, new TypeReference<TreeMap<String, Integer>>() { [EOL]     }); [EOL]     assertEquals(2, roundtrip.size()); [EOL]     assertEquals(Integer.valueOf(3), roundtrip.get("A")); [EOL]     assertEquals(Integer.valueOf(-4), roundtrip.get("B")); [EOL] }
public void testMapToMap() { [EOL]     Map<String, Integer> input = new LinkedHashMap<String, Integer>(); [EOL]     input.put("A", Integer.valueOf(3)); [EOL]     input.put("B", Integer.valueOf(-4)); [EOL]     Map<AB, String> output = mapper.convertValue(input, new TypeReference<Map<AB, String>>() { [EOL]     }); [EOL]     assertEquals(2, output.size()); [EOL]     assertEquals("3", output.get(AB.A)); [EOL]     assertEquals("-4", output.get(AB.B)); [EOL]     Map<String, Integer> roundtrip = mapper.convertValue(input, new TypeReference<TreeMap<String, Integer>>() { [EOL]     }); [EOL]     assertEquals(2, roundtrip.size()); [EOL]     assertEquals(Integer.valueOf(3), roundtrip.get("A")); [EOL]     assertEquals(Integer.valueOf(-4), roundtrip.get("B")); [EOL] }
public void testMapToMap() { [EOL]     Map<String, Integer> input = new LinkedHashMap<String, Integer>(); [EOL]     input.put("A", Integer.valueOf(3)); [EOL]     input.put("B", Integer.valueOf(-4)); [EOL]     Map<AB, String> output = mapper.convertValue(input, new TypeReference<Map<AB, String>>() { [EOL]     }); [EOL]     assertEquals(2, output.size()); [EOL]     assertEquals("3", output.get(AB.A)); [EOL]     assertEquals("-4", output.get(AB.B)); [EOL]     Map<String, Integer> roundtrip = mapper.convertValue(input, new TypeReference<TreeMap<String, Integer>>() { [EOL]     }); [EOL]     assertEquals(2, roundtrip.size()); [EOL]     assertEquals(Integer.valueOf(3), roundtrip.get("A")); [EOL]     assertEquals(Integer.valueOf(-4), roundtrip.get("B")); [EOL] }
public void testPropertyWithSubtypes() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerSubtypes(SubB.class, SubC.class, SubD.class); [EOL]     String json = mapper.writeValueAsString(new PropertyBean(new SubC())); [EOL]     PropertyBean result = mapper.readValue(json, PropertyBean.class); [EOL]     assertSame(SubC.class, result.value.getClass()); [EOL] }
public void testPropertyWithSubtypes() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerSubtypes(SubB.class, SubC.class, SubD.class); [EOL]     String json = mapper.writeValueAsString(new PropertyBean(new SubC())); [EOL]     PropertyBean result = mapper.readValue(json, PropertyBean.class); [EOL]     assertSame(SubC.class, result.value.getClass()); [EOL] }
public void testOverrideClassInvalid() throws Exception { [EOL]     try { [EOL]         BrokenCollectionHolder result = new ObjectMapper().readValue("{ \"strings\" : [ ] }", BrokenCollectionHolder.class); [EOL]         fail("Expected a failure, but got results: " + result); [EOL]     } catch (JsonMappingException jme) { [EOL]         verifyException(jme, "is not assignable to"); [EOL]     } [EOL] }
public void testOverrideClassInvalid() throws Exception { [EOL]     try { [EOL]         BrokenCollectionHolder result = new ObjectMapper().readValue("{ \"strings\" : [ ] }", BrokenCollectionHolder.class); [EOL]         fail("Expected a failure, but got results: " + result); [EOL]     } catch (JsonMappingException jme) { [EOL]         verifyException(jme, "is not assignable to"); [EOL]     } [EOL] }
public void testOverrideClassInvalid() throws Exception { [EOL]     try { [EOL]         BrokenCollectionHolder result = new ObjectMapper().readValue("{ \"strings\" : [ ] }", BrokenCollectionHolder.class); [EOL]         fail("Expected a failure, but got results: " + result); [EOL]     } catch (JsonMappingException jme) { [EOL]         verifyException(jme, "is not assignable to"); [EOL]     } [EOL] }
public void testOverrideClassInvalid() throws Exception { [EOL]     try { [EOL]         BrokenCollectionHolder result = new ObjectMapper().readValue("{ \"strings\" : [ ] }", BrokenCollectionHolder.class); [EOL]         fail("Expected a failure, but got results: " + result); [EOL]     } catch (JsonMappingException jme) { [EOL]         verifyException(jme, "is not assignable to"); [EOL]     } [EOL] }
public void testOverrideClassInvalid() throws Exception { [EOL]     try { [EOL]         BrokenCollectionHolder result = new ObjectMapper().readValue("{ \"strings\" : [ ] }", BrokenCollectionHolder.class); [EOL]         fail("Expected a failure, but got results: " + result); [EOL]     } catch (JsonMappingException jme) { [EOL]         verifyException(jme, "is not assignable to"); [EOL]     } [EOL] }
public void testOverrideClassInvalid() throws Exception { [EOL]     try { [EOL]         BrokenCollectionHolder result = new ObjectMapper().readValue("{ \"strings\" : [ ] }", BrokenCollectionHolder.class); [EOL]         fail("Expected a failure, but got results: " + result); [EOL]     } catch (JsonMappingException jme) { [EOL]         verifyException(jme, "is not assignable to"); [EOL]     } [EOL] }
public void testPropertyWithSubtypes() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerSubtypes(SubB.class, SubC.class, SubD.class); [EOL]     String json = mapper.writeValueAsString(new PropertyBean(new SubC())); [EOL]     PropertyBean result = mapper.readValue(json, PropertyBean.class); [EOL]     assertSame(SubC.class, result.value.getClass()); [EOL] }
public void testIncompatibleRootType() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     SubType bean = new SubType(); [EOL]     ObjectWriter w = mapper.writerWithType(HashMap.class); [EOL]     try { [EOL]         w.writeValueAsString(bean); [EOL]         fail("Should have failed due to incompatible type"); [EOL]     } catch (JsonProcessingException e) { [EOL]         verifyException(e, "Incompatible types"); [EOL]     } [EOL] }
public void testIncompatibleRootType() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     SubType bean = new SubType(); [EOL]     ObjectWriter w = mapper.writerWithType(HashMap.class); [EOL]     try { [EOL]         w.writeValueAsString(bean); [EOL]         fail("Should have failed due to incompatible type"); [EOL]     } catch (JsonProcessingException e) { [EOL]         verifyException(e, "Incompatible types"); [EOL]     } [EOL] }
public void testIncompatibleRootType() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     SubType bean = new SubType(); [EOL]     ObjectWriter w = mapper.writerWithType(HashMap.class); [EOL]     try { [EOL]         w.writeValueAsString(bean); [EOL]         fail("Should have failed due to incompatible type"); [EOL]     } catch (JsonProcessingException e) { [EOL]         verifyException(e, "Incompatible types"); [EOL]     } [EOL] }
public void testIncompatibleRootType() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     SubType bean = new SubType(); [EOL]     ObjectWriter w = mapper.writerWithType(HashMap.class); [EOL]     try { [EOL]         w.writeValueAsString(bean); [EOL]         fail("Should have failed due to incompatible type"); [EOL]     } catch (JsonProcessingException e) { [EOL]         verifyException(e, "Incompatible types"); [EOL]     } [EOL] }
public void testSimpleDeserializationClass() throws Exception { [EOL]     Identifiable result = mapper.readValue(EXP_SIMPLE_INT_CLASS, Identifiable.class); [EOL]     assertEquals(13, result.value); [EOL]     assertSame(result, result.next); [EOL] }
public void testSimpleDeserializationClass() throws Exception { [EOL]     Identifiable result = mapper.readValue(EXP_SIMPLE_INT_CLASS, Identifiable.class); [EOL]     assertEquals(13, result.value); [EOL]     assertSame(result, result.next); [EOL] }
public void testSimpleDeserializationClass() throws Exception { [EOL]     Identifiable result = mapper.readValue(EXP_SIMPLE_INT_CLASS, Identifiable.class); [EOL]     assertEquals(13, result.value); [EOL]     assertSame(result, result.next); [EOL] }
public void testSimpleDeserializationClass() throws Exception { [EOL]     Identifiable result = mapper.readValue(EXP_SIMPLE_INT_CLASS, Identifiable.class); [EOL]     assertEquals(13, result.value); [EOL]     assertSame(result, result.next); [EOL] }
public void testPropertyWithSubtypes() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerSubtypes(SubB.class, SubC.class, SubD.class); [EOL]     String json = mapper.writeValueAsString(new PropertyBean(new SubC())); [EOL]     PropertyBean result = mapper.readValue(json, PropertyBean.class); [EOL]     assertSame(SubC.class, result.value.getClass()); [EOL] }
public void testPropertyWithSubtypes() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerSubtypes(SubB.class, SubC.class, SubD.class); [EOL]     String json = mapper.writeValueAsString(new PropertyBean(new SubC())); [EOL]     PropertyBean result = mapper.readValue(json, PropertyBean.class); [EOL]     assertSame(SubC.class, result.value.getClass()); [EOL] }
public void testPropertyWithSubtypes() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerSubtypes(SubB.class, SubC.class, SubD.class); [EOL]     String json = mapper.writeValueAsString(new PropertyBean(new SubC())); [EOL]     PropertyBean result = mapper.readValue(json, PropertyBean.class); [EOL]     assertSame(SubC.class, result.value.getClass()); [EOL] }
public void testPropertyWithSubtypes() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerSubtypes(SubB.class, SubC.class, SubD.class); [EOL]     String json = mapper.writeValueAsString(new PropertyBean(new SubC())); [EOL]     PropertyBean result = mapper.readValue(json, PropertyBean.class); [EOL]     assertSame(SubC.class, result.value.getClass()); [EOL] }
public void testPropertyWithSubtypes() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerSubtypes(SubB.class, SubC.class, SubD.class); [EOL]     String json = mapper.writeValueAsString(new PropertyBean(new SubC())); [EOL]     PropertyBean result = mapper.readValue(json, PropertyBean.class); [EOL]     assertSame(SubC.class, result.value.getClass()); [EOL] }
public void testPropertyWithSubtypes() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerSubtypes(SubB.class, SubC.class, SubD.class); [EOL]     String json = mapper.writeValueAsString(new PropertyBean(new SubC())); [EOL]     PropertyBean result = mapper.readValue(json, PropertyBean.class); [EOL]     assertSame(SubC.class, result.value.getClass()); [EOL] }
public void testPropertyWithSubtypes() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerSubtypes(SubB.class, SubC.class, SubD.class); [EOL]     String json = mapper.writeValueAsString(new PropertyBean(new SubC())); [EOL]     PropertyBean result = mapper.readValue(json, PropertyBean.class); [EOL]     assertSame(SubC.class, result.value.getClass()); [EOL] }
public void testPropertyWithSubtypes() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerSubtypes(SubB.class, SubC.class, SubD.class); [EOL]     String json = mapper.writeValueAsString(new PropertyBean(new SubC())); [EOL]     PropertyBean result = mapper.readValue(json, PropertyBean.class); [EOL]     assertSame(SubC.class, result.value.getClass()); [EOL] }
public void testPropertyWithSubtypes() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerSubtypes(SubB.class, SubC.class, SubD.class); [EOL]     String json = mapper.writeValueAsString(new PropertyBean(new SubC())); [EOL]     PropertyBean result = mapper.readValue(json, PropertyBean.class); [EOL]     assertSame(SubC.class, result.value.getClass()); [EOL] }
public void testPropertyWithSubtypes() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerSubtypes(SubB.class, SubC.class, SubD.class); [EOL]     String json = mapper.writeValueAsString(new PropertyBean(new SubC())); [EOL]     PropertyBean result = mapper.readValue(json, PropertyBean.class); [EOL]     assertSame(SubC.class, result.value.getClass()); [EOL] }
public void testPropertyWithSubtypes() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerSubtypes(SubB.class, SubC.class, SubD.class); [EOL]     String json = mapper.writeValueAsString(new PropertyBean(new SubC())); [EOL]     PropertyBean result = mapper.readValue(json, PropertyBean.class); [EOL]     assertSame(SubC.class, result.value.getClass()); [EOL] }
public void testUnknownFields() throws Exception { [EOL]     try { [EOL]         TestBean bean = MAPPER.readValue("{ \"foobar\" : 3 }", TestBean.class); [EOL]         fail("Expected an exception, got bean: " + bean); [EOL]     } catch (JsonMappingException jse) { [EOL]         ; [EOL]     } [EOL] }
public void testUnknownFields() throws Exception { [EOL]     try { [EOL]         TestBean bean = MAPPER.readValue("{ \"foobar\" : 3 }", TestBean.class); [EOL]         fail("Expected an exception, got bean: " + bean); [EOL]     } catch (JsonMappingException jse) { [EOL]         ; [EOL]     } [EOL] }
public void testUnknownFields() throws Exception { [EOL]     try { [EOL]         TestBean bean = MAPPER.readValue("{ \"foobar\" : 3 }", TestBean.class); [EOL]         fail("Expected an exception, got bean: " + bean); [EOL]     } catch (JsonMappingException jse) { [EOL]         ; [EOL]     } [EOL] }
public void testUnknownFields() throws Exception { [EOL]     try { [EOL]         TestBean bean = MAPPER.readValue("{ \"foobar\" : 3 }", TestBean.class); [EOL]         fail("Expected an exception, got bean: " + bean); [EOL]     } catch (JsonMappingException jse) { [EOL]         ; [EOL]     } [EOL] }
public void testUnknownFields() throws Exception { [EOL]     try { [EOL]         TestBean bean = MAPPER.readValue("{ \"foobar\" : 3 }", TestBean.class); [EOL]         fail("Expected an exception, got bean: " + bean); [EOL]     } catch (JsonMappingException jse) { [EOL]         ; [EOL]     } [EOL] }
public void testUnknownFields() throws Exception { [EOL]     try { [EOL]         TestBean bean = MAPPER.readValue("{ \"foobar\" : 3 }", TestBean.class); [EOL]         fail("Expected an exception, got bean: " + bean); [EOL]     } catch (JsonMappingException jse) { [EOL]         ; [EOL]     } [EOL] }
public void testUnknownFields() throws Exception { [EOL]     try { [EOL]         TestBean bean = MAPPER.readValue("{ \"foobar\" : 3 }", TestBean.class); [EOL]         fail("Expected an exception, got bean: " + bean); [EOL]     } catch (JsonMappingException jse) { [EOL]         ; [EOL]     } [EOL] }
public void testUnknownFields() throws Exception { [EOL]     try { [EOL]         TestBean bean = MAPPER.readValue("{ \"foobar\" : 3 }", TestBean.class); [EOL]         fail("Expected an exception, got bean: " + bean); [EOL]     } catch (JsonMappingException jse) { [EOL]         ; [EOL]     } [EOL] }
public void testUnknownFields() throws Exception { [EOL]     try { [EOL]         TestBean bean = MAPPER.readValue("{ \"foobar\" : 3 }", TestBean.class); [EOL]         fail("Expected an exception, got bean: " + bean); [EOL]     } catch (JsonMappingException jse) { [EOL]         ; [EOL]     } [EOL] }
public void testColumnMetadata() throws Exception { [EOL]     ColumnMetadata col = new ColumnMetadata("Billy", "employee", "comment"); [EOL]     Wrapper w = new Wrapper(); [EOL]     w.a = col; [EOL]     w.b = col; [EOL]     String json = MAPPER.writeValueAsString(w); [EOL]     Wrapper deserialized = MAPPER.readValue(json, Wrapper.class); [EOL]     assertNotNull(deserialized); [EOL]     assertNotNull(deserialized.a); [EOL]     assertNotNull(deserialized.b); [EOL]     assertEquals("Billy", deserialized.a.getName()); [EOL]     assertEquals("employee", deserialized.a.getType()); [EOL]     assertEquals("comment", deserialized.a.getComment()); [EOL]     assertSame(deserialized.a, deserialized.b); [EOL] }
public void testIssue798() throws Exception { [EOL]     Base base = new Derived1("derived1 prop val", "base prop val"); [EOL]     BaseContainer baseContainer = new BaseContainer("bc prop val", base); [EOL]     String generatedJson = MAPPER.writeValueAsString(baseContainer); [EOL]     BaseContainer baseContainer2 = MAPPER.readValue(generatedJson, BaseContainer.class); [EOL]     assertEquals("bc prop val", baseContainer.getBaseContainerProperty()); [EOL]     Base b = baseContainer2.getBase(); [EOL]     assertNotNull(b); [EOL]     if (b.getClass() != Derived1.class) { [EOL]         fail("Should have type Derived1, was " + b.getClass().getName()); [EOL]     } [EOL]     Derived1 derived1 = (Derived1) b; [EOL]     assertEquals("base prop val", derived1.getBaseProperty()); [EOL]     assertEquals("derived1 prop val", derived1.getDerived1Property()); [EOL] }
public void testEnumAsIndexViaAnnotations() throws Exception { [EOL]     assertEquals("{\"text\":0}", mapper.writeValueAsString(new PoNUMContainer())); [EOL] }
public void testEnumAsIndexViaAnnotations() throws Exception { [EOL]     assertEquals("{\"text\":0}", mapper.writeValueAsString(new PoNUMContainer())); [EOL] }
public void testEnumAsIndexViaAnnotations() throws Exception { [EOL]     assertEquals("{\"text\":0}", mapper.writeValueAsString(new PoNUMContainer())); [EOL] }
public void testEnumAsIndexViaAnnotations() throws Exception { [EOL]     assertEquals("{\"text\":0}", mapper.writeValueAsString(new PoNUMContainer())); [EOL] }
public void testDeserializeSimple() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     JsonSchema schema = mapper.generateJsonSchema(Schemable.class); [EOL]     assertNotNull(schema); [EOL]     String schemaStr = mapper.writeValueAsString(schema); [EOL]     assertNotNull(schemaStr); [EOL]     JsonSchema result = mapper.readValue(schemaStr, JsonSchema.class); [EOL]     assertEquals("Trying to read from '" + schemaStr + "'", schema, result); [EOL] }
public void testDeserializeSimple() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     JsonSchema schema = mapper.generateJsonSchema(Schemable.class); [EOL]     assertNotNull(schema); [EOL]     String schemaStr = mapper.writeValueAsString(schema); [EOL]     assertNotNull(schemaStr); [EOL]     JsonSchema result = mapper.readValue(schemaStr, JsonSchema.class); [EOL]     assertEquals("Trying to read from '" + schemaStr + "'", schema, result); [EOL] }
public void testDeserializeSimple() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     JsonSchema schema = mapper.generateJsonSchema(Schemable.class); [EOL]     assertNotNull(schema); [EOL]     String schemaStr = mapper.writeValueAsString(schema); [EOL]     assertNotNull(schemaStr); [EOL]     JsonSchema result = mapper.readValue(schemaStr, JsonSchema.class); [EOL]     assertEquals("Trying to read from '" + schemaStr + "'", schema, result); [EOL] }
public void testEnumAsIndexViaAnnotations() throws Exception { [EOL]     assertEquals("{\"text\":0}", mapper.writeValueAsString(new PoNUMContainer())); [EOL] }
public void testEnumAsIndexViaAnnotations() throws Exception { [EOL]     assertEquals("{\"text\":0}", mapper.writeValueAsString(new PoNUMContainer())); [EOL] }
public void testEnumAsIndexViaAnnotations() throws Exception { [EOL]     assertEquals("{\"text\":0}", mapper.writeValueAsString(new PoNUMContainer())); [EOL] }
public void testSimpleJsonValue() throws Exception { [EOL]     String result = MAPPER.writeValueAsString(new ValueClass<String>("abc")); [EOL]     assertEquals("\"abc\"", result); [EOL] }
public void testWithList() throws Exception { [EOL]     assertEquals("13", MAPPER.writeValueAsString(new ListAsNumber())); [EOL] }
public void testWithList() throws Exception { [EOL]     assertEquals("13", MAPPER.writeValueAsString(new ListAsNumber())); [EOL] }
public void testPrefixedUnwrapping() throws Exception { [EOL]     PrefixUnwrap bean = mapper.readValue("{\"name\":\"Axel\",\"_x\":4,\"_y\":7}", PrefixUnwrap.class); [EOL]     assertNotNull(bean); [EOL]     assertEquals("Axel", bean.name); [EOL]     assertNotNull(bean.location); [EOL]     assertEquals(4, bean.location.x); [EOL]     assertEquals(7, bean.location.y); [EOL] }
public void testPrefixedUnwrapping() throws Exception { [EOL]     PrefixUnwrap bean = mapper.readValue("{\"name\":\"Axel\",\"_x\":4,\"_y\":7}", PrefixUnwrap.class); [EOL]     assertNotNull(bean); [EOL]     assertEquals("Axel", bean.name); [EOL]     assertNotNull(bean.location); [EOL]     assertEquals(4, bean.location.x); [EOL]     assertEquals(7, bean.location.y); [EOL] }
public void testPrefixedUnwrapping() throws Exception { [EOL]     PrefixUnwrap bean = mapper.readValue("{\"name\":\"Axel\",\"_x\":4,\"_y\":7}", PrefixUnwrap.class); [EOL]     assertNotNull(bean); [EOL]     assertEquals("Axel", bean.name); [EOL]     assertNotNull(bean.location); [EOL]     assertEquals(4, bean.location.x); [EOL]     assertEquals(7, bean.location.y); [EOL] }
public void testIssue798() throws Exception { [EOL]     Base base = new Derived1("derived1 prop val", "base prop val"); [EOL]     BaseContainer baseContainer = new BaseContainer("bc prop val", base); [EOL]     String generatedJson = MAPPER.writeValueAsString(baseContainer); [EOL]     BaseContainer baseContainer2 = MAPPER.readValue(generatedJson, BaseContainer.class); [EOL]     assertEquals("bc prop val", baseContainer.getBaseContainerProperty()); [EOL]     Base b = baseContainer2.getBase(); [EOL]     assertNotNull(b); [EOL]     if (b.getClass() != Derived1.class) { [EOL]         fail("Should have type Derived1, was " + b.getClass().getName()); [EOL]     } [EOL]     Derived1 derived1 = (Derived1) b; [EOL]     assertEquals("base prop val", derived1.getBaseProperty()); [EOL]     assertEquals("derived1 prop val", derived1.getDerived1Property()); [EOL] }
public void testSimpleTyped() throws Exception { [EOL]     MapImitatorWithValue mapHolder = MAPPER.readValue("{ \"a\" : [ 3, -1 ], \"b\" : [ ] }", MapImitatorWithValue.class); [EOL]     Map<String, int[]> result = mapHolder._map; [EOL]     assertEquals(2, result.size()); [EOL]     assertEquals(new int[] { 3, -1 }, result.get("a")); [EOL]     assertEquals(new int[0], result.get("b")); [EOL] }
public void testSimpleTyped() throws Exception { [EOL]     MapImitatorWithValue mapHolder = MAPPER.readValue("{ \"a\" : [ 3, -1 ], \"b\" : [ ] }", MapImitatorWithValue.class); [EOL]     Map<String, int[]> result = mapHolder._map; [EOL]     assertEquals(2, result.size()); [EOL]     assertEquals(new int[] { 3, -1 }, result.get("a")); [EOL]     assertEquals(new int[0], result.get("b")); [EOL] }
public void testSimpleTyped() throws Exception { [EOL]     MapImitatorWithValue mapHolder = MAPPER.readValue("{ \"a\" : [ 3, -1 ], \"b\" : [ ] }", MapImitatorWithValue.class); [EOL]     Map<String, int[]> result = mapHolder._map; [EOL]     assertEquals(2, result.size()); [EOL]     assertEquals(new int[] { 3, -1 }, result.get("a")); [EOL]     assertEquals(new int[0], result.get("b")); [EOL] }
public void testSimpleTyped() throws Exception { [EOL]     MapImitatorWithValue mapHolder = MAPPER.readValue("{ \"a\" : [ 3, -1 ], \"b\" : [ ] }", MapImitatorWithValue.class); [EOL]     Map<String, int[]> result = mapHolder._map; [EOL]     assertEquals(2, result.size()); [EOL]     assertEquals(new int[] { 3, -1 }, result.get("a")); [EOL]     assertEquals(new int[0], result.get("b")); [EOL] }
public void testSimpleTyped() throws Exception { [EOL]     MapImitatorWithValue mapHolder = MAPPER.readValue("{ \"a\" : [ 3, -1 ], \"b\" : [ ] }", MapImitatorWithValue.class); [EOL]     Map<String, int[]> result = mapHolder._map; [EOL]     assertEquals(2, result.size()); [EOL]     assertEquals(new int[] { 3, -1 }, result.get("a")); [EOL]     assertEquals(new int[0], result.get("b")); [EOL] }
public void testSimpleTyped() throws Exception { [EOL]     MapImitatorWithValue mapHolder = MAPPER.readValue("{ \"a\" : [ 3, -1 ], \"b\" : [ ] }", MapImitatorWithValue.class); [EOL]     Map<String, int[]> result = mapHolder._map; [EOL]     assertEquals(2, result.size()); [EOL]     assertEquals(new int[] { 3, -1 }, result.get("a")); [EOL]     assertEquals(new int[0], result.get("b")); [EOL] }
public void testSimpleTyped() throws Exception { [EOL]     MapImitatorWithValue mapHolder = MAPPER.readValue("{ \"a\" : [ 3, -1 ], \"b\" : [ ] }", MapImitatorWithValue.class); [EOL]     Map<String, int[]> result = mapHolder._map; [EOL]     assertEquals(2, result.size()); [EOL]     assertEquals(new int[] { 3, -1 }, result.get("a")); [EOL]     assertEquals(new int[0], result.get("b")); [EOL] }
public void testSimpleTyped() throws Exception { [EOL]     MapImitatorWithValue mapHolder = MAPPER.readValue("{ \"a\" : [ 3, -1 ], \"b\" : [ ] }", MapImitatorWithValue.class); [EOL]     Map<String, int[]> result = mapHolder._map; [EOL]     assertEquals(2, result.size()); [EOL]     assertEquals(new int[] { 3, -1 }, result.get("a")); [EOL]     assertEquals(new int[0], result.get("b")); [EOL] }
public void testSimpleTyped() throws Exception { [EOL]     MapImitatorWithValue mapHolder = MAPPER.readValue("{ \"a\" : [ 3, -1 ], \"b\" : [ ] }", MapImitatorWithValue.class); [EOL]     Map<String, int[]> result = mapHolder._map; [EOL]     assertEquals(2, result.size()); [EOL]     assertEquals(new int[] { 3, -1 }, result.get("a")); [EOL]     assertEquals(new int[0], result.get("b")); [EOL] }
public void testLongArray() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.addMixInAnnotations(long[].class, WrapperMixIn.class); [EOL]     String JSON = "{\"" + long[].class.getName() + "\":[5, 6, 7]}"; [EOL]     long[] value = m.readValue(JSON, long[].class); [EOL]     assertNotNull(value); [EOL]     assertEquals(3, value.length); [EOL]     assertArrayEquals(new long[] { 5L, 6L, 7L }, value); [EOL] }
public void testLongArray() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.addMixInAnnotations(long[].class, WrapperMixIn.class); [EOL]     String JSON = "{\"" + long[].class.getName() + "\":[5, 6, 7]}"; [EOL]     long[] value = m.readValue(JSON, long[].class); [EOL]     assertNotNull(value); [EOL]     assertEquals(3, value.length); [EOL]     assertArrayEquals(new long[] { 5L, 6L, 7L }, value); [EOL] }
public void testSimpleTyped() throws Exception { [EOL]     MapImitatorWithValue mapHolder = MAPPER.readValue("{ \"a\" : [ 3, -1 ], \"b\" : [ ] }", MapImitatorWithValue.class); [EOL]     Map<String, int[]> result = mapHolder._map; [EOL]     assertEquals(2, result.size()); [EOL]     assertEquals(new int[] { 3, -1 }, result.get("a")); [EOL]     assertEquals(new int[0], result.get("b")); [EOL] }
public void testSimpleTyped() throws Exception { [EOL]     MapImitatorWithValue mapHolder = MAPPER.readValue("{ \"a\" : [ 3, -1 ], \"b\" : [ ] }", MapImitatorWithValue.class); [EOL]     Map<String, int[]> result = mapHolder._map; [EOL]     assertEquals(2, result.size()); [EOL]     assertEquals(new int[] { 3, -1 }, result.get("a")); [EOL]     assertEquals(new int[0], result.get("b")); [EOL] }
public void testSimpleTyped() throws Exception { [EOL]     MapImitatorWithValue mapHolder = MAPPER.readValue("{ \"a\" : [ 3, -1 ], \"b\" : [ ] }", MapImitatorWithValue.class); [EOL]     Map<String, int[]> result = mapHolder._map; [EOL]     assertEquals(2, result.size()); [EOL]     assertEquals(new int[] { 3, -1 }, result.get("a")); [EOL]     assertEquals(new int[0], result.get("b")); [EOL] }
public void testSimpleTyped() throws Exception { [EOL]     MapImitatorWithValue mapHolder = MAPPER.readValue("{ \"a\" : [ 3, -1 ], \"b\" : [ ] }", MapImitatorWithValue.class); [EOL]     Map<String, int[]> result = mapHolder._map; [EOL]     assertEquals(2, result.size()); [EOL]     assertEquals(new int[] { 3, -1 }, result.get("a")); [EOL]     assertEquals(new int[0], result.get("b")); [EOL] }
public void testSimpleTyped() throws Exception { [EOL]     MapImitatorWithValue mapHolder = MAPPER.readValue("{ \"a\" : [ 3, -1 ], \"b\" : [ ] }", MapImitatorWithValue.class); [EOL]     Map<String, int[]> result = mapHolder._map; [EOL]     assertEquals(2, result.size()); [EOL]     assertEquals(new int[] { 3, -1 }, result.get("a")); [EOL]     assertEquals(new int[0], result.get("b")); [EOL] }
public void testLongArray() throws Exception { [EOL]     final int LEN = 12300; [EOL]     StringBuilder sb = new StringBuilder(); [EOL]     sb.append('['); [EOL]     for (int i = 0; i < LEN; ++i) { [EOL]         if (i > 0) { [EOL]             sb.append(','); [EOL]         } [EOL]         sb.append(i); [EOL]     } [EOL]     sb.append(']'); [EOL]     long[] result = MAPPER.readValue(sb.toString(), long[].class); [EOL]     assertNotNull(result); [EOL]     assertEquals(LEN, result.length); [EOL]     for (int i = 0; i < LEN; ++i) { [EOL]         long exp = (long) i; [EOL]         assertEquals(exp, result[i]); [EOL]     } [EOL] }
public void testLongArray() throws Exception { [EOL]     final int LEN = 12300; [EOL]     StringBuilder sb = new StringBuilder(); [EOL]     sb.append('['); [EOL]     for (int i = 0; i < LEN; ++i) { [EOL]         if (i > 0) { [EOL]             sb.append(','); [EOL]         } [EOL]         sb.append(i); [EOL]     } [EOL]     sb.append(']'); [EOL]     long[] result = MAPPER.readValue(sb.toString(), long[].class); [EOL]     assertNotNull(result); [EOL]     assertEquals(LEN, result.length); [EOL]     for (int i = 0; i < LEN; ++i) { [EOL]         long exp = (long) i; [EOL]         assertEquals(exp, result[i]); [EOL]     } [EOL] }
public void testLongArray() throws Exception { [EOL]     final int LEN = 12300; [EOL]     StringBuilder sb = new StringBuilder(); [EOL]     sb.append('['); [EOL]     for (int i = 0; i < LEN; ++i) { [EOL]         if (i > 0) { [EOL]             sb.append(','); [EOL]         } [EOL]         sb.append(i); [EOL]     } [EOL]     sb.append(']'); [EOL]     long[] result = MAPPER.readValue(sb.toString(), long[].class); [EOL]     assertNotNull(result); [EOL]     assertEquals(LEN, result.length); [EOL]     for (int i = 0; i < LEN; ++i) { [EOL]         long exp = (long) i; [EOL]         assertEquals(exp, result[i]); [EOL]     } [EOL] }
public void testLongArray() throws Exception { [EOL]     final int LEN = 12300; [EOL]     StringBuilder sb = new StringBuilder(); [EOL]     sb.append('['); [EOL]     for (int i = 0; i < LEN; ++i) { [EOL]         if (i > 0) { [EOL]             sb.append(','); [EOL]         } [EOL]         sb.append(i); [EOL]     } [EOL]     sb.append(']'); [EOL]     long[] result = MAPPER.readValue(sb.toString(), long[].class); [EOL]     assertNotNull(result); [EOL]     assertEquals(LEN, result.length); [EOL]     for (int i = 0; i < LEN; ++i) { [EOL]         long exp = (long) i; [EOL]         assertEquals(exp, result[i]); [EOL]     } [EOL] }
public void testConstructorAndProps() throws Exception { [EOL]     ConstructorAndPropsBean bean = MAPPER.readValue("{ \"a\" : \"1\", \"b\": 2, \"c\" : true }", ConstructorAndPropsBean.class); [EOL]     assertEquals(1, bean.a); [EOL]     assertEquals(2, bean.b); [EOL]     assertEquals(true, bean.c); [EOL] }
public void testConstructorAndProps() throws Exception { [EOL]     ConstructorAndPropsBean bean = MAPPER.readValue("{ \"a\" : \"1\", \"b\": 2, \"c\" : true }", ConstructorAndPropsBean.class); [EOL]     assertEquals(1, bean.a); [EOL]     assertEquals(2, bean.b); [EOL]     assertEquals(true, bean.c); [EOL] }
public void testConstructorAndProps() throws Exception { [EOL]     ConstructorAndPropsBean bean = MAPPER.readValue("{ \"a\" : \"1\", \"b\": 2, \"c\" : true }", ConstructorAndPropsBean.class); [EOL]     assertEquals(1, bean.a); [EOL]     assertEquals(2, bean.b); [EOL]     assertEquals(true, bean.c); [EOL] }
public void testColumnMetadata() throws Exception { [EOL]     ColumnMetadata col = new ColumnMetadata("Billy", "employee", "comment"); [EOL]     Wrapper w = new Wrapper(); [EOL]     w.a = col; [EOL]     w.b = col; [EOL]     String json = MAPPER.writeValueAsString(w); [EOL]     Wrapper deserialized = MAPPER.readValue(json, Wrapper.class); [EOL]     assertNotNull(deserialized); [EOL]     assertNotNull(deserialized.a); [EOL]     assertNotNull(deserialized.b); [EOL]     assertEquals("Billy", deserialized.a.getName()); [EOL]     assertEquals("employee", deserialized.a.getType()); [EOL]     assertEquals("comment", deserialized.a.getComment()); [EOL]     assertSame(deserialized.a, deserialized.b); [EOL] }
public void testColumnMetadata() throws Exception { [EOL]     ColumnMetadata col = new ColumnMetadata("Billy", "employee", "comment"); [EOL]     Wrapper w = new Wrapper(); [EOL]     w.a = col; [EOL]     w.b = col; [EOL]     String json = MAPPER.writeValueAsString(w); [EOL]     Wrapper deserialized = MAPPER.readValue(json, Wrapper.class); [EOL]     assertNotNull(deserialized); [EOL]     assertNotNull(deserialized.a); [EOL]     assertNotNull(deserialized.b); [EOL]     assertEquals("Billy", deserialized.a.getName()); [EOL]     assertEquals("employee", deserialized.a.getType()); [EOL]     assertEquals("comment", deserialized.a.getComment()); [EOL]     assertSame(deserialized.a, deserialized.b); [EOL] }
public void testColumnMetadata() throws Exception { [EOL]     ColumnMetadata col = new ColumnMetadata("Billy", "employee", "comment"); [EOL]     Wrapper w = new Wrapper(); [EOL]     w.a = col; [EOL]     w.b = col; [EOL]     String json = MAPPER.writeValueAsString(w); [EOL]     Wrapper deserialized = MAPPER.readValue(json, Wrapper.class); [EOL]     assertNotNull(deserialized); [EOL]     assertNotNull(deserialized.a); [EOL]     assertNotNull(deserialized.b); [EOL]     assertEquals("Billy", deserialized.a.getName()); [EOL]     assertEquals("employee", deserialized.a.getType()); [EOL]     assertEquals("comment", deserialized.a.getComment()); [EOL]     assertSame(deserialized.a, deserialized.b); [EOL] }
public void testConstructorAndProps() throws Exception { [EOL]     ConstructorAndPropsBean bean = MAPPER.readValue("{ \"a\" : \"1\", \"b\": 2, \"c\" : true }", ConstructorAndPropsBean.class); [EOL]     assertEquals(1, bean.a); [EOL]     assertEquals(2, bean.b); [EOL]     assertEquals(true, bean.c); [EOL] }
public void testConstructorAndProps() throws Exception { [EOL]     ConstructorAndPropsBean bean = MAPPER.readValue("{ \"a\" : \"1\", \"b\": 2, \"c\" : true }", ConstructorAndPropsBean.class); [EOL]     assertEquals(1, bean.a); [EOL]     assertEquals(2, bean.b); [EOL]     assertEquals(true, bean.c); [EOL] }
public void testConstructorAndProps() throws Exception { [EOL]     ConstructorAndPropsBean bean = MAPPER.readValue("{ \"a\" : \"1\", \"b\": 2, \"c\" : true }", ConstructorAndPropsBean.class); [EOL]     assertEquals(1, bean.a); [EOL]     assertEquals(2, bean.b); [EOL]     assertEquals(true, bean.c); [EOL] }
public void testConstructorAndProps() throws Exception { [EOL]     ConstructorAndPropsBean bean = MAPPER.readValue("{ \"a\" : \"1\", \"b\": 2, \"c\" : true }", ConstructorAndPropsBean.class); [EOL]     assertEquals(1, bean.a); [EOL]     assertEquals(2, bean.b); [EOL]     assertEquals(true, bean.c); [EOL] }
public void testConstructorAndProps() throws Exception { [EOL]     ConstructorAndPropsBean bean = MAPPER.readValue("{ \"a\" : \"1\", \"b\": 2, \"c\" : true }", ConstructorAndPropsBean.class); [EOL]     assertEquals(1, bean.a); [EOL]     assertEquals(2, bean.b); [EOL]     assertEquals(true, bean.c); [EOL] }
public void testConstructorAndProps() throws Exception { [EOL]     ConstructorAndPropsBean bean = MAPPER.readValue("{ \"a\" : \"1\", \"b\": 2, \"c\" : true }", ConstructorAndPropsBean.class); [EOL]     assertEquals(1, bean.a); [EOL]     assertEquals(2, bean.b); [EOL]     assertEquals(true, bean.c); [EOL] }
public void testConstructorAndProps() throws Exception { [EOL]     ConstructorAndPropsBean bean = MAPPER.readValue("{ \"a\" : \"1\", \"b\": 2, \"c\" : true }", ConstructorAndPropsBean.class); [EOL]     assertEquals(1, bean.a); [EOL]     assertEquals(2, bean.b); [EOL]     assertEquals(true, bean.c); [EOL] }
public void testConstructorAndProps() throws Exception { [EOL]     ConstructorAndPropsBean bean = MAPPER.readValue("{ \"a\" : \"1\", \"b\": 2, \"c\" : true }", ConstructorAndPropsBean.class); [EOL]     assertEquals(1, bean.a); [EOL]     assertEquals(2, bean.b); [EOL]     assertEquals(true, bean.c); [EOL] }
public void testConstructorAndProps() throws Exception { [EOL]     ConstructorAndPropsBean bean = MAPPER.readValue("{ \"a\" : \"1\", \"b\": 2, \"c\" : true }", ConstructorAndPropsBean.class); [EOL]     assertEquals(1, bean.a); [EOL]     assertEquals(2, bean.b); [EOL]     assertEquals(true, bean.c); [EOL] }
public void testMapWithConstructor() throws Exception { [EOL]     MapWithCtor result = MAPPER.readValue("{\"text\":\"abc\", \"entry\":true, \"number\":123, \"xy\":\"yx\"}", MapWithCtor.class); [EOL]     assertEquals(Boolean.TRUE, result.get("entry")); [EOL]     assertEquals("yx", result.get("xy")); [EOL]     assertEquals(2, result.size()); [EOL]     assertEquals("abc", result._text); [EOL]     assertEquals(123, result._number); [EOL] }
public void testMapWithConstructor() throws Exception { [EOL]     MapWithCtor result = MAPPER.readValue("{\"text\":\"abc\", \"entry\":true, \"number\":123, \"xy\":\"yx\"}", MapWithCtor.class); [EOL]     assertEquals(Boolean.TRUE, result.get("entry")); [EOL]     assertEquals("yx", result.get("xy")); [EOL]     assertEquals(2, result.size()); [EOL]     assertEquals("abc", result._text); [EOL]     assertEquals(123, result._number); [EOL] }
public void testMapWithConstructor() throws Exception { [EOL]     MapWithCtor result = MAPPER.readValue("{\"text\":\"abc\", \"entry\":true, \"number\":123, \"xy\":\"yx\"}", MapWithCtor.class); [EOL]     assertEquals(Boolean.TRUE, result.get("entry")); [EOL]     assertEquals("yx", result.get("xy")); [EOL]     assertEquals(2, result.size()); [EOL]     assertEquals("abc", result._text); [EOL]     assertEquals(123, result._number); [EOL] }
public void testMapWithConstructor() throws Exception { [EOL]     MapWithCtor result = MAPPER.readValue("{\"text\":\"abc\", \"entry\":true, \"number\":123, \"xy\":\"yx\"}", MapWithCtor.class); [EOL]     assertEquals(Boolean.TRUE, result.get("entry")); [EOL]     assertEquals("yx", result.get("xy")); [EOL]     assertEquals(2, result.size()); [EOL]     assertEquals("abc", result._text); [EOL]     assertEquals(123, result._number); [EOL] }
public void testBeanArray() throws Exception { [EOL]     List<Bean1> src = new ArrayList<Bean1>(); [EOL]     List<Bean2> b2 = new ArrayList<Bean2>(); [EOL]     b2.add(new Bean2("a")); [EOL]     b2.add(new Bean2("foobar")); [EOL]     src.add(new Bean1(1, 2, b2)); [EOL]     b2 = new ArrayList<Bean2>(); [EOL]     b2.add(null); [EOL]     src.add(new Bean1(4, 5, b2)); [EOL]     StringWriter sw = new StringWriter(); [EOL]     MAPPER.writeValue(sw, src); [EOL]     List<Bean1> result = MAPPER.readValue(sw.toString(), new TypeReference<List<Bean1>>() { [EOL]     }); [EOL]     assertNotNull(result); [EOL]     assertEquals(src, result); [EOL] }
public void testBeanArray() throws Exception { [EOL]     List<Bean1> src = new ArrayList<Bean1>(); [EOL]     List<Bean2> b2 = new ArrayList<Bean2>(); [EOL]     b2.add(new Bean2("a")); [EOL]     b2.add(new Bean2("foobar")); [EOL]     src.add(new Bean1(1, 2, b2)); [EOL]     b2 = new ArrayList<Bean2>(); [EOL]     b2.add(null); [EOL]     src.add(new Bean1(4, 5, b2)); [EOL]     StringWriter sw = new StringWriter(); [EOL]     MAPPER.writeValue(sw, src); [EOL]     List<Bean1> result = MAPPER.readValue(sw.toString(), new TypeReference<List<Bean1>>() { [EOL]     }); [EOL]     assertNotNull(result); [EOL]     assertEquals(src, result); [EOL] }
public void testBeanArray() throws Exception { [EOL]     List<Bean1> src = new ArrayList<Bean1>(); [EOL]     List<Bean2> b2 = new ArrayList<Bean2>(); [EOL]     b2.add(new Bean2("a")); [EOL]     b2.add(new Bean2("foobar")); [EOL]     src.add(new Bean1(1, 2, b2)); [EOL]     b2 = new ArrayList<Bean2>(); [EOL]     b2.add(null); [EOL]     src.add(new Bean1(4, 5, b2)); [EOL]     StringWriter sw = new StringWriter(); [EOL]     MAPPER.writeValue(sw, src); [EOL]     List<Bean1> result = MAPPER.readValue(sw.toString(), new TypeReference<List<Bean1>>() { [EOL]     }); [EOL]     assertNotNull(result); [EOL]     assertEquals(src, result); [EOL] }
public void testBeanArray() throws Exception { [EOL]     List<Bean1> src = new ArrayList<Bean1>(); [EOL]     List<Bean2> b2 = new ArrayList<Bean2>(); [EOL]     b2.add(new Bean2("a")); [EOL]     b2.add(new Bean2("foobar")); [EOL]     src.add(new Bean1(1, 2, b2)); [EOL]     b2 = new ArrayList<Bean2>(); [EOL]     b2.add(null); [EOL]     src.add(new Bean1(4, 5, b2)); [EOL]     StringWriter sw = new StringWriter(); [EOL]     MAPPER.writeValue(sw, src); [EOL]     List<Bean1> result = MAPPER.readValue(sw.toString(), new TypeReference<List<Bean1>>() { [EOL]     }); [EOL]     assertNotNull(result); [EOL]     assertEquals(src, result); [EOL] }
public void testBeanArray() throws Exception { [EOL]     List<Bean1> src = new ArrayList<Bean1>(); [EOL]     List<Bean2> b2 = new ArrayList<Bean2>(); [EOL]     b2.add(new Bean2("a")); [EOL]     b2.add(new Bean2("foobar")); [EOL]     src.add(new Bean1(1, 2, b2)); [EOL]     b2 = new ArrayList<Bean2>(); [EOL]     b2.add(null); [EOL]     src.add(new Bean1(4, 5, b2)); [EOL]     StringWriter sw = new StringWriter(); [EOL]     MAPPER.writeValue(sw, src); [EOL]     List<Bean1> result = MAPPER.readValue(sw.toString(), new TypeReference<List<Bean1>>() { [EOL]     }); [EOL]     assertNotNull(result); [EOL]     assertEquals(src, result); [EOL] }
public void testColumnMetadata() throws Exception { [EOL]     ColumnMetadata col = new ColumnMetadata("Billy", "employee", "comment"); [EOL]     Wrapper w = new Wrapper(); [EOL]     w.a = col; [EOL]     w.b = col; [EOL]     String json = MAPPER.writeValueAsString(w); [EOL]     Wrapper deserialized = MAPPER.readValue(json, Wrapper.class); [EOL]     assertNotNull(deserialized); [EOL]     assertNotNull(deserialized.a); [EOL]     assertNotNull(deserialized.b); [EOL]     assertEquals("Billy", deserialized.a.getName()); [EOL]     assertEquals("employee", deserialized.a.getType()); [EOL]     assertEquals("comment", deserialized.a.getComment()); [EOL]     assertSame(deserialized.a, deserialized.b); [EOL] }
public void testColumnMetadata() throws Exception { [EOL]     ColumnMetadata col = new ColumnMetadata("Billy", "employee", "comment"); [EOL]     Wrapper w = new Wrapper(); [EOL]     w.a = col; [EOL]     w.b = col; [EOL]     String json = MAPPER.writeValueAsString(w); [EOL]     Wrapper deserialized = MAPPER.readValue(json, Wrapper.class); [EOL]     assertNotNull(deserialized); [EOL]     assertNotNull(deserialized.a); [EOL]     assertNotNull(deserialized.b); [EOL]     assertEquals("Billy", deserialized.a.getName()); [EOL]     assertEquals("employee", deserialized.a.getType()); [EOL]     assertEquals("comment", deserialized.a.getComment()); [EOL]     assertSame(deserialized.a, deserialized.b); [EOL] }
public void testColumnMetadata() throws Exception { [EOL]     ColumnMetadata col = new ColumnMetadata("Billy", "employee", "comment"); [EOL]     Wrapper w = new Wrapper(); [EOL]     w.a = col; [EOL]     w.b = col; [EOL]     String json = MAPPER.writeValueAsString(w); [EOL]     Wrapper deserialized = MAPPER.readValue(json, Wrapper.class); [EOL]     assertNotNull(deserialized); [EOL]     assertNotNull(deserialized.a); [EOL]     assertNotNull(deserialized.b); [EOL]     assertEquals("Billy", deserialized.a.getName()); [EOL]     assertEquals("employee", deserialized.a.getType()); [EOL]     assertEquals("comment", deserialized.a.getComment()); [EOL]     assertSame(deserialized.a, deserialized.b); [EOL] }
public void testDateTypes() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.enableDefaultTyping(); [EOL]     ObjectListBean input = new ObjectListBean(); [EOL]     List<Object> inputList = new ArrayList<Object>(); [EOL]     inputList.add(TimeZone.getTimeZone("EST")); [EOL]     inputList.add(Locale.CHINESE); [EOL]     input.values = inputList; [EOL]     String json = m.writeValueAsString(input); [EOL]     ObjectListBean output = m.readValue(json, ObjectListBean.class); [EOL]     List<Object> outputList = output.values; [EOL]     assertEquals(2, outputList.size()); [EOL]     assertTrue(outputList.get(0) instanceof TimeZone); [EOL]     assertTrue(outputList.get(1) instanceof Locale); [EOL] }
public void testDateTypes() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.enableDefaultTyping(); [EOL]     ObjectListBean input = new ObjectListBean(); [EOL]     List<Object> inputList = new ArrayList<Object>(); [EOL]     inputList.add(TimeZone.getTimeZone("EST")); [EOL]     inputList.add(Locale.CHINESE); [EOL]     input.values = inputList; [EOL]     String json = m.writeValueAsString(input); [EOL]     ObjectListBean output = m.readValue(json, ObjectListBean.class); [EOL]     List<Object> outputList = output.values; [EOL]     assertEquals(2, outputList.size()); [EOL]     assertTrue(outputList.get(0) instanceof TimeZone); [EOL]     assertTrue(outputList.get(1) instanceof Locale); [EOL] }
public void testDateTypes() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.enableDefaultTyping(); [EOL]     ObjectListBean input = new ObjectListBean(); [EOL]     List<Object> inputList = new ArrayList<Object>(); [EOL]     inputList.add(TimeZone.getTimeZone("EST")); [EOL]     inputList.add(Locale.CHINESE); [EOL]     input.values = inputList; [EOL]     String json = m.writeValueAsString(input); [EOL]     ObjectListBean output = m.readValue(json, ObjectListBean.class); [EOL]     List<Object> outputList = output.values; [EOL]     assertEquals(2, outputList.size()); [EOL]     assertTrue(outputList.get(0) instanceof TimeZone); [EOL]     assertTrue(outputList.get(1) instanceof Locale); [EOL] }
public void testDateTypes() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.enableDefaultTyping(); [EOL]     ObjectListBean input = new ObjectListBean(); [EOL]     List<Object> inputList = new ArrayList<Object>(); [EOL]     inputList.add(TimeZone.getTimeZone("EST")); [EOL]     inputList.add(Locale.CHINESE); [EOL]     input.values = inputList; [EOL]     String json = m.writeValueAsString(input); [EOL]     ObjectListBean output = m.readValue(json, ObjectListBean.class); [EOL]     List<Object> outputList = output.values; [EOL]     assertEquals(2, outputList.size()); [EOL]     assertTrue(outputList.get(0) instanceof TimeZone); [EOL]     assertTrue(outputList.get(1) instanceof Locale); [EOL] }
public void testDateTypes() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.enableDefaultTyping(); [EOL]     ObjectListBean input = new ObjectListBean(); [EOL]     List<Object> inputList = new ArrayList<Object>(); [EOL]     inputList.add(TimeZone.getTimeZone("EST")); [EOL]     inputList.add(Locale.CHINESE); [EOL]     input.values = inputList; [EOL]     String json = m.writeValueAsString(input); [EOL]     ObjectListBean output = m.readValue(json, ObjectListBean.class); [EOL]     List<Object> outputList = output.values; [EOL]     assertEquals(2, outputList.size()); [EOL]     assertTrue(outputList.get(0) instanceof TimeZone); [EOL]     assertTrue(outputList.get(1) instanceof Locale); [EOL] }
public void testSimple() throws Exception { [EOL]     final String JSON = SAMPLE_DOC_JSON_SPEC; [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     for (int type = 0; type < 2; ++type) { [EOL]         JsonNode result; [EOL]         if (type == 0) { [EOL]             result = mapper.readTree(new StringReader(JSON)); [EOL]         } else { [EOL]             result = mapper.readTree(JSON); [EOL]         } [EOL]         assertType(result, ObjectNode.class); [EOL]         assertEquals(1, result.size()); [EOL]         assertTrue(result.isObject()); [EOL]         ObjectNode main = (ObjectNode) result; [EOL]         assertEquals("Image", main.fieldNames().next()); [EOL]         JsonNode ob = main.elements().next(); [EOL]         assertType(ob, ObjectNode.class); [EOL]         ObjectNode imageMap = (ObjectNode) ob; [EOL]         assertEquals(5, imageMap.size()); [EOL]         ob = imageMap.get("Width"); [EOL]         assertTrue(ob.isIntegralNumber()); [EOL]         assertFalse(ob.isFloatingPointNumber()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_WIDTH, ob.intValue()); [EOL]         ob = imageMap.get("Height"); [EOL]         assertTrue(ob.isIntegralNumber()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_HEIGHT, ob.intValue()); [EOL]         ob = imageMap.get("Title"); [EOL]         assertTrue(ob.isTextual()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_TITLE, ob.textValue()); [EOL]         ob = imageMap.get("Thumbnail"); [EOL]         assertType(ob, ObjectNode.class); [EOL]         ObjectNode tn = (ObjectNode) ob; [EOL]         ob = tn.get("Url"); [EOL]         assertTrue(ob.isTextual()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_TN_URL, ob.textValue()); [EOL]         ob = tn.get("Height"); [EOL]         assertTrue(ob.isIntegralNumber()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_TN_HEIGHT, ob.intValue()); [EOL]         ob = tn.get("Width"); [EOL]         assertTrue(ob.isTextual()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_TN_WIDTH, ob.textValue()); [EOL]         ob = imageMap.get("IDs"); [EOL]         assertTrue(ob.isArray()); [EOL]         ArrayNode idList = (ArrayNode) ob; [EOL]         assertEquals(4, idList.size()); [EOL]         assertEquals(4, calcLength(idList.elements())); [EOL]         assertEquals(4, calcLength(idList.iterator())); [EOL]         { [EOL]             int[] values = new int[] { SAMPLE_SPEC_VALUE_TN_ID1, SAMPLE_SPEC_VALUE_TN_ID2, SAMPLE_SPEC_VALUE_TN_ID3, SAMPLE_SPEC_VALUE_TN_ID4 }; [EOL]             for (int i = 0; i < values.length; ++i) { [EOL]                 assertEquals(values[i], idList.get(i).intValue()); [EOL]             } [EOL]             int i = 0; [EOL]             for (JsonNode n : idList) { [EOL]                 assertEquals(values[i], n.intValue()); [EOL]                 ++i; [EOL]             } [EOL]         } [EOL]     } [EOL] }
public void testWithNested() { [EOL]     ObjectNode root = mapper.createObjectNode(); [EOL]     ObjectNode leafObject = root.putObject("ob"); [EOL]     ArrayNode leafArray = root.putArray("arr"); [EOL]     assertEquals(2, root.size()); [EOL]     leafObject.put("a", 3); [EOL]     assertEquals(1, leafObject.size()); [EOL]     leafArray.add(true); [EOL]     assertEquals(1, leafArray.size()); [EOL]     ObjectNode copy = root.deepCopy(); [EOL]     assertNotSame(copy, root); [EOL]     assertEquals(2, copy.size()); [EOL]     leafObject.put("x", 9); [EOL]     assertEquals(2, leafObject.size()); [EOL]     assertEquals(1, copy.get("ob").size()); [EOL]     leafArray.add("foobar"); [EOL]     assertEquals(2, leafArray.size()); [EOL]     assertEquals(1, copy.get("arr").size()); [EOL]     ((ObjectNode) copy.get("ob")).put("c", 3); [EOL]     assertEquals(2, leafObject.size()); [EOL]     assertEquals(2, copy.get("ob").size()); [EOL]     ((ArrayNode) copy.get("arr")).add(13); [EOL]     assertEquals(2, leafArray.size()); [EOL]     assertEquals(2, copy.get("arr").size()); [EOL] }
public void testDeserializeSimple() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     JsonSchema schema = mapper.generateJsonSchema(Schemable.class); [EOL]     assertNotNull(schema); [EOL]     String schemaStr = mapper.writeValueAsString(schema); [EOL]     assertNotNull(schemaStr); [EOL]     JsonSchema result = mapper.readValue(schemaStr, JsonSchema.class); [EOL]     assertEquals("Trying to read from '" + schemaStr + "'", schema, result); [EOL] }
public void testDeserializeSimple() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     JsonSchema schema = mapper.generateJsonSchema(Schemable.class); [EOL]     assertNotNull(schema); [EOL]     String schemaStr = mapper.writeValueAsString(schema); [EOL]     assertNotNull(schemaStr); [EOL]     JsonSchema result = mapper.readValue(schemaStr, JsonSchema.class); [EOL]     assertEquals("Trying to read from '" + schemaStr + "'", schema, result); [EOL] }
public void testDeserializeSimple() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     JsonSchema schema = mapper.generateJsonSchema(Schemable.class); [EOL]     assertNotNull(schema); [EOL]     String schemaStr = mapper.writeValueAsString(schema); [EOL]     assertNotNull(schemaStr); [EOL]     JsonSchema result = mapper.readValue(schemaStr, JsonSchema.class); [EOL]     assertEquals("Trying to read from '" + schemaStr + "'", schema, result); [EOL] }
public void testDeserializeSimple() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     JsonSchema schema = mapper.generateJsonSchema(Schemable.class); [EOL]     assertNotNull(schema); [EOL]     String schemaStr = mapper.writeValueAsString(schema); [EOL]     assertNotNull(schemaStr); [EOL]     JsonSchema result = mapper.readValue(schemaStr, JsonSchema.class); [EOL]     assertEquals("Trying to read from '" + schemaStr + "'", schema, result); [EOL] }
public void testDeserializeSimple() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     JsonSchema schema = mapper.generateJsonSchema(Schemable.class); [EOL]     assertNotNull(schema); [EOL]     String schemaStr = mapper.writeValueAsString(schema); [EOL]     assertNotNull(schemaStr); [EOL]     JsonSchema result = mapper.readValue(schemaStr, JsonSchema.class); [EOL]     assertEquals("Trying to read from '" + schemaStr + "'", schema, result); [EOL] }
public void testColumnMetadata() throws Exception { [EOL]     ColumnMetadata col = new ColumnMetadata("Billy", "employee", "comment"); [EOL]     Wrapper w = new Wrapper(); [EOL]     w.a = col; [EOL]     w.b = col; [EOL]     String json = MAPPER.writeValueAsString(w); [EOL]     Wrapper deserialized = MAPPER.readValue(json, Wrapper.class); [EOL]     assertNotNull(deserialized); [EOL]     assertNotNull(deserialized.a); [EOL]     assertNotNull(deserialized.b); [EOL]     assertEquals("Billy", deserialized.a.getName()); [EOL]     assertEquals("employee", deserialized.a.getType()); [EOL]     assertEquals("comment", deserialized.a.getComment()); [EOL]     assertSame(deserialized.a, deserialized.b); [EOL] }
public void testColumnMetadata() throws Exception { [EOL]     ColumnMetadata col = new ColumnMetadata("Billy", "employee", "comment"); [EOL]     Wrapper w = new Wrapper(); [EOL]     w.a = col; [EOL]     w.b = col; [EOL]     String json = MAPPER.writeValueAsString(w); [EOL]     Wrapper deserialized = MAPPER.readValue(json, Wrapper.class); [EOL]     assertNotNull(deserialized); [EOL]     assertNotNull(deserialized.a); [EOL]     assertNotNull(deserialized.b); [EOL]     assertEquals("Billy", deserialized.a.getName()); [EOL]     assertEquals("employee", deserialized.a.getType()); [EOL]     assertEquals("comment", deserialized.a.getComment()); [EOL]     assertSame(deserialized.a, deserialized.b); [EOL] }
public void testColumnMetadata() throws Exception { [EOL]     ColumnMetadata col = new ColumnMetadata("Billy", "employee", "comment"); [EOL]     Wrapper w = new Wrapper(); [EOL]     w.a = col; [EOL]     w.b = col; [EOL]     String json = MAPPER.writeValueAsString(w); [EOL]     Wrapper deserialized = MAPPER.readValue(json, Wrapper.class); [EOL]     assertNotNull(deserialized); [EOL]     assertNotNull(deserialized.a); [EOL]     assertNotNull(deserialized.b); [EOL]     assertEquals("Billy", deserialized.a.getName()); [EOL]     assertEquals("employee", deserialized.a.getType()); [EOL]     assertEquals("comment", deserialized.a.getComment()); [EOL]     assertSame(deserialized.a, deserialized.b); [EOL] }
public void testPolymorphicTest() throws Exception { [EOL]     Child c = new Child(); [EOL]     c.w = 10; [EOL]     c.h = 11; [EOL]     MAPPER.readerForUpdating(c).readValue("{\"x\":3,\"y\":4,\"w\":111}"); [EOL]     assertEquals(3, c.x); [EOL]     assertEquals(4, c.y); [EOL]     assertEquals(111, c.w); [EOL] }
public void testPolymorphicTest() throws Exception { [EOL]     Child c = new Child(); [EOL]     c.w = 10; [EOL]     c.h = 11; [EOL]     MAPPER.readerForUpdating(c).readValue("{\"x\":3,\"y\":4,\"w\":111}"); [EOL]     assertEquals(3, c.x); [EOL]     assertEquals(4, c.y); [EOL]     assertEquals(111, c.w); [EOL] }
public void testConstructorAndProps() throws Exception { [EOL]     ConstructorAndPropsBean bean = MAPPER.readValue("{ \"a\" : \"1\", \"b\": 2, \"c\" : true }", ConstructorAndPropsBean.class); [EOL]     assertEquals(1, bean.a); [EOL]     assertEquals(2, bean.b); [EOL]     assertEquals(true, bean.c); [EOL] }
public void testConstructorAndProps() throws Exception { [EOL]     ConstructorAndPropsBean bean = MAPPER.readValue("{ \"a\" : \"1\", \"b\": 2, \"c\" : true }", ConstructorAndPropsBean.class); [EOL]     assertEquals(1, bean.a); [EOL]     assertEquals(2, bean.b); [EOL]     assertEquals(true, bean.c); [EOL] }
public void testConstructorAndProps() throws Exception { [EOL]     ConstructorAndPropsBean bean = MAPPER.readValue("{ \"a\" : \"1\", \"b\": 2, \"c\" : true }", ConstructorAndPropsBean.class); [EOL]     assertEquals(1, bean.a); [EOL]     assertEquals(2, bean.b); [EOL]     assertEquals(true, bean.c); [EOL] }
public void testConstructorAndProps() throws Exception { [EOL]     ConstructorAndPropsBean bean = MAPPER.readValue("{ \"a\" : \"1\", \"b\": 2, \"c\" : true }", ConstructorAndPropsBean.class); [EOL]     assertEquals(1, bean.a); [EOL]     assertEquals(2, bean.b); [EOL]     assertEquals(true, bean.c); [EOL] }
public void testConstructorAndProps() throws Exception { [EOL]     ConstructorAndPropsBean bean = MAPPER.readValue("{ \"a\" : \"1\", \"b\": 2, \"c\" : true }", ConstructorAndPropsBean.class); [EOL]     assertEquals(1, bean.a); [EOL]     assertEquals(2, bean.b); [EOL]     assertEquals(true, bean.c); [EOL] }
public void testConstructorAndProps() throws Exception { [EOL]     ConstructorAndPropsBean bean = MAPPER.readValue("{ \"a\" : \"1\", \"b\": 2, \"c\" : true }", ConstructorAndPropsBean.class); [EOL]     assertEquals(1, bean.a); [EOL]     assertEquals(2, bean.b); [EOL]     assertEquals(true, bean.c); [EOL] }
public void testAnnotatedCtor() throws Exception { [EOL]     ObjectMapper mapper = _mapperWithAnnotatedContextual(); [EOL]     ContextualCtorBean bean = mapper.readValue("{\"a\":\"foo\",\"b\":\"bar\"}", ContextualCtorBean.class); [EOL]     assertEquals("CtorA=foo", bean.a); [EOL]     assertEquals("CtorB=bar", bean.b); [EOL]     bean = mapper.readValue("{\"a\":\"1\",\"b\":\"0\"}", ContextualCtorBean.class); [EOL]     assertEquals("CtorA=1", bean.a); [EOL]     assertEquals("CtorB=0", bean.b); [EOL] }
public void testAnnotatedCtor() throws Exception { [EOL]     ObjectMapper mapper = _mapperWithAnnotatedContextual(); [EOL]     ContextualCtorBean bean = mapper.readValue("{\"a\":\"foo\",\"b\":\"bar\"}", ContextualCtorBean.class); [EOL]     assertEquals("CtorA=foo", bean.a); [EOL]     assertEquals("CtorB=bar", bean.b); [EOL]     bean = mapper.readValue("{\"a\":\"1\",\"b\":\"0\"}", ContextualCtorBean.class); [EOL]     assertEquals("CtorA=1", bean.a); [EOL]     assertEquals("CtorB=0", bean.b); [EOL] }
public void testConstructorAndProps() throws Exception { [EOL]     ConstructorAndPropsBean bean = MAPPER.readValue("{ \"a\" : \"1\", \"b\": 2, \"c\" : true }", ConstructorAndPropsBean.class); [EOL]     assertEquals(1, bean.a); [EOL]     assertEquals(2, bean.b); [EOL]     assertEquals(true, bean.c); [EOL] }
public void testConstructorAndProps() throws Exception { [EOL]     ConstructorAndPropsBean bean = MAPPER.readValue("{ \"a\" : \"1\", \"b\": 2, \"c\" : true }", ConstructorAndPropsBean.class); [EOL]     assertEquals(1, bean.a); [EOL]     assertEquals(2, bean.b); [EOL]     assertEquals(true, bean.c); [EOL] }
public void testConstructorAndProps() throws Exception { [EOL]     ConstructorAndPropsBean bean = MAPPER.readValue("{ \"a\" : \"1\", \"b\": 2, \"c\" : true }", ConstructorAndPropsBean.class); [EOL]     assertEquals(1, bean.a); [EOL]     assertEquals(2, bean.b); [EOL]     assertEquals(true, bean.c); [EOL] }
public void testPropertyWithSubtypes() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerSubtypes(SubB.class, SubC.class, SubD.class); [EOL]     String json = mapper.writeValueAsString(new PropertyBean(new SubC())); [EOL]     PropertyBean result = mapper.readValue(json, PropertyBean.class); [EOL]     assertSame(SubC.class, result.value.getClass()); [EOL] }
public void testPropertyWithSubtypes() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerSubtypes(SubB.class, SubC.class, SubD.class); [EOL]     String json = mapper.writeValueAsString(new PropertyBean(new SubC())); [EOL]     PropertyBean result = mapper.readValue(json, PropertyBean.class); [EOL]     assertSame(SubC.class, result.value.getClass()); [EOL] }
public void testDeserializeSimple() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     JsonSchema schema = mapper.generateJsonSchema(Schemable.class); [EOL]     assertNotNull(schema); [EOL]     String schemaStr = mapper.writeValueAsString(schema); [EOL]     assertNotNull(schemaStr); [EOL]     JsonSchema result = mapper.readValue(schemaStr, JsonSchema.class); [EOL]     assertEquals("Trying to read from '" + schemaStr + "'", schema, result); [EOL] }
public void testDeserializeSimple() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     JsonSchema schema = mapper.generateJsonSchema(Schemable.class); [EOL]     assertNotNull(schema); [EOL]     String schemaStr = mapper.writeValueAsString(schema); [EOL]     assertNotNull(schemaStr); [EOL]     JsonSchema result = mapper.readValue(schemaStr, JsonSchema.class); [EOL]     assertEquals("Trying to read from '" + schemaStr + "'", schema, result); [EOL] }
public void testDeserializeSimple() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     JsonSchema schema = mapper.generateJsonSchema(Schemable.class); [EOL]     assertNotNull(schema); [EOL]     String schemaStr = mapper.writeValueAsString(schema); [EOL]     assertNotNull(schemaStr); [EOL]     JsonSchema result = mapper.readValue(schemaStr, JsonSchema.class); [EOL]     assertEquals("Trying to read from '" + schemaStr + "'", schema, result); [EOL] }
public void testDeserializeSimple() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     JsonSchema schema = mapper.generateJsonSchema(Schemable.class); [EOL]     assertNotNull(schema); [EOL]     String schemaStr = mapper.writeValueAsString(schema); [EOL]     assertNotNull(schemaStr); [EOL]     JsonSchema result = mapper.readValue(schemaStr, JsonSchema.class); [EOL]     assertEquals("Trying to read from '" + schemaStr + "'", schema, result); [EOL] }
public void testDeserializeSimple() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     JsonSchema schema = mapper.generateJsonSchema(Schemable.class); [EOL]     assertNotNull(schema); [EOL]     String schemaStr = mapper.writeValueAsString(schema); [EOL]     assertNotNull(schemaStr); [EOL]     JsonSchema result = mapper.readValue(schemaStr, JsonSchema.class); [EOL]     assertEquals("Trying to read from '" + schemaStr + "'", schema, result); [EOL] }
public void testDeserializeSimple() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     JsonSchema schema = mapper.generateJsonSchema(Schemable.class); [EOL]     assertNotNull(schema); [EOL]     String schemaStr = mapper.writeValueAsString(schema); [EOL]     assertNotNull(schemaStr); [EOL]     JsonSchema result = mapper.readValue(schemaStr, JsonSchema.class); [EOL]     assertEquals("Trying to read from '" + schemaStr + "'", schema, result); [EOL] }
public void testDeserializeSimple() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     JsonSchema schema = mapper.generateJsonSchema(Schemable.class); [EOL]     assertNotNull(schema); [EOL]     String schemaStr = mapper.writeValueAsString(schema); [EOL]     assertNotNull(schemaStr); [EOL]     JsonSchema result = mapper.readValue(schemaStr, JsonSchema.class); [EOL]     assertEquals("Trying to read from '" + schemaStr + "'", schema, result); [EOL] }
public void testDeserializeSimple() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     JsonSchema schema = mapper.generateJsonSchema(Schemable.class); [EOL]     assertNotNull(schema); [EOL]     String schemaStr = mapper.writeValueAsString(schema); [EOL]     assertNotNull(schemaStr); [EOL]     JsonSchema result = mapper.readValue(schemaStr, JsonSchema.class); [EOL]     assertEquals("Trying to read from '" + schemaStr + "'", schema, result); [EOL] }
public void testDeserializeSimple() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     JsonSchema schema = mapper.generateJsonSchema(Schemable.class); [EOL]     assertNotNull(schema); [EOL]     String schemaStr = mapper.writeValueAsString(schema); [EOL]     assertNotNull(schemaStr); [EOL]     JsonSchema result = mapper.readValue(schemaStr, JsonSchema.class); [EOL]     assertEquals("Trying to read from '" + schemaStr + "'", schema, result); [EOL] }
public void testShort() { [EOL]     ShortNode n = ShortNode.valueOf((short) 1); [EOL]     assertStandardEquals(n); [EOL]     assertTrue(0 != n.hashCode()); [EOL]     assertEquals(JsonToken.VALUE_NUMBER_INT, n.asToken()); [EOL]     assertEquals(JsonParser.NumberType.INT, n.numberType()); [EOL]     assertEquals(1, n.intValue()); [EOL]     assertEquals(1L, n.longValue()); [EOL]     assertEquals(BigDecimal.ONE, n.decimalValue()); [EOL]     assertEquals(BigInteger.ONE, n.bigIntegerValue()); [EOL]     assertEquals("1", n.asText()); [EOL]     assertNodeNumbers(n, 1, 1.0); [EOL]     assertTrue(ShortNode.valueOf((short) 0).canConvertToInt()); [EOL]     assertTrue(ShortNode.valueOf(Short.MAX_VALUE).canConvertToInt()); [EOL]     assertTrue(ShortNode.valueOf(Short.MIN_VALUE).canConvertToInt()); [EOL]     assertTrue(ShortNode.valueOf((short) 0).canConvertToLong()); [EOL]     assertTrue(ShortNode.valueOf(Short.MAX_VALUE).canConvertToLong()); [EOL]     assertTrue(ShortNode.valueOf(Short.MIN_VALUE).canConvertToLong()); [EOL] }
public void testShort() { [EOL]     ShortNode n = ShortNode.valueOf((short) 1); [EOL]     assertStandardEquals(n); [EOL]     assertTrue(0 != n.hashCode()); [EOL]     assertEquals(JsonToken.VALUE_NUMBER_INT, n.asToken()); [EOL]     assertEquals(JsonParser.NumberType.INT, n.numberType()); [EOL]     assertEquals(1, n.intValue()); [EOL]     assertEquals(1L, n.longValue()); [EOL]     assertEquals(BigDecimal.ONE, n.decimalValue()); [EOL]     assertEquals(BigInteger.ONE, n.bigIntegerValue()); [EOL]     assertEquals("1", n.asText()); [EOL]     assertNodeNumbers(n, 1, 1.0); [EOL]     assertTrue(ShortNode.valueOf((short) 0).canConvertToInt()); [EOL]     assertTrue(ShortNode.valueOf(Short.MAX_VALUE).canConvertToInt()); [EOL]     assertTrue(ShortNode.valueOf(Short.MIN_VALUE).canConvertToInt()); [EOL]     assertTrue(ShortNode.valueOf((short) 0).canConvertToLong()); [EOL]     assertTrue(ShortNode.valueOf(Short.MAX_VALUE).canConvertToLong()); [EOL]     assertTrue(ShortNode.valueOf(Short.MIN_VALUE).canConvertToLong()); [EOL] }
public void testShort() { [EOL]     ShortNode n = ShortNode.valueOf((short) 1); [EOL]     assertStandardEquals(n); [EOL]     assertTrue(0 != n.hashCode()); [EOL]     assertEquals(JsonToken.VALUE_NUMBER_INT, n.asToken()); [EOL]     assertEquals(JsonParser.NumberType.INT, n.numberType()); [EOL]     assertEquals(1, n.intValue()); [EOL]     assertEquals(1L, n.longValue()); [EOL]     assertEquals(BigDecimal.ONE, n.decimalValue()); [EOL]     assertEquals(BigInteger.ONE, n.bigIntegerValue()); [EOL]     assertEquals("1", n.asText()); [EOL]     assertNodeNumbers(n, 1, 1.0); [EOL]     assertTrue(ShortNode.valueOf((short) 0).canConvertToInt()); [EOL]     assertTrue(ShortNode.valueOf(Short.MAX_VALUE).canConvertToInt()); [EOL]     assertTrue(ShortNode.valueOf(Short.MIN_VALUE).canConvertToInt()); [EOL]     assertTrue(ShortNode.valueOf((short) 0).canConvertToLong()); [EOL]     assertTrue(ShortNode.valueOf(Short.MAX_VALUE).canConvertToLong()); [EOL]     assertTrue(ShortNode.valueOf(Short.MIN_VALUE).canConvertToLong()); [EOL] }
public void testShort() { [EOL]     ShortNode n = ShortNode.valueOf((short) 1); [EOL]     assertStandardEquals(n); [EOL]     assertTrue(0 != n.hashCode()); [EOL]     assertEquals(JsonToken.VALUE_NUMBER_INT, n.asToken()); [EOL]     assertEquals(JsonParser.NumberType.INT, n.numberType()); [EOL]     assertEquals(1, n.intValue()); [EOL]     assertEquals(1L, n.longValue()); [EOL]     assertEquals(BigDecimal.ONE, n.decimalValue()); [EOL]     assertEquals(BigInteger.ONE, n.bigIntegerValue()); [EOL]     assertEquals("1", n.asText()); [EOL]     assertNodeNumbers(n, 1, 1.0); [EOL]     assertTrue(ShortNode.valueOf((short) 0).canConvertToInt()); [EOL]     assertTrue(ShortNode.valueOf(Short.MAX_VALUE).canConvertToInt()); [EOL]     assertTrue(ShortNode.valueOf(Short.MIN_VALUE).canConvertToInt()); [EOL]     assertTrue(ShortNode.valueOf((short) 0).canConvertToLong()); [EOL]     assertTrue(ShortNode.valueOf(Short.MAX_VALUE).canConvertToLong()); [EOL]     assertTrue(ShortNode.valueOf(Short.MIN_VALUE).canConvertToLong()); [EOL] }
public void testShort() { [EOL]     ShortNode n = ShortNode.valueOf((short) 1); [EOL]     assertStandardEquals(n); [EOL]     assertTrue(0 != n.hashCode()); [EOL]     assertEquals(JsonToken.VALUE_NUMBER_INT, n.asToken()); [EOL]     assertEquals(JsonParser.NumberType.INT, n.numberType()); [EOL]     assertEquals(1, n.intValue()); [EOL]     assertEquals(1L, n.longValue()); [EOL]     assertEquals(BigDecimal.ONE, n.decimalValue()); [EOL]     assertEquals(BigInteger.ONE, n.bigIntegerValue()); [EOL]     assertEquals("1", n.asText()); [EOL]     assertNodeNumbers(n, 1, 1.0); [EOL]     assertTrue(ShortNode.valueOf((short) 0).canConvertToInt()); [EOL]     assertTrue(ShortNode.valueOf(Short.MAX_VALUE).canConvertToInt()); [EOL]     assertTrue(ShortNode.valueOf(Short.MIN_VALUE).canConvertToInt()); [EOL]     assertTrue(ShortNode.valueOf((short) 0).canConvertToLong()); [EOL]     assertTrue(ShortNode.valueOf(Short.MAX_VALUE).canConvertToLong()); [EOL]     assertTrue(ShortNode.valueOf(Short.MIN_VALUE).canConvertToLong()); [EOL] }
public void testShort() { [EOL]     ShortNode n = ShortNode.valueOf((short) 1); [EOL]     assertStandardEquals(n); [EOL]     assertTrue(0 != n.hashCode()); [EOL]     assertEquals(JsonToken.VALUE_NUMBER_INT, n.asToken()); [EOL]     assertEquals(JsonParser.NumberType.INT, n.numberType()); [EOL]     assertEquals(1, n.intValue()); [EOL]     assertEquals(1L, n.longValue()); [EOL]     assertEquals(BigDecimal.ONE, n.decimalValue()); [EOL]     assertEquals(BigInteger.ONE, n.bigIntegerValue()); [EOL]     assertEquals("1", n.asText()); [EOL]     assertNodeNumbers(n, 1, 1.0); [EOL]     assertTrue(ShortNode.valueOf((short) 0).canConvertToInt()); [EOL]     assertTrue(ShortNode.valueOf(Short.MAX_VALUE).canConvertToInt()); [EOL]     assertTrue(ShortNode.valueOf(Short.MIN_VALUE).canConvertToInt()); [EOL]     assertTrue(ShortNode.valueOf((short) 0).canConvertToLong()); [EOL]     assertTrue(ShortNode.valueOf(Short.MAX_VALUE).canConvertToLong()); [EOL]     assertTrue(ShortNode.valueOf(Short.MIN_VALUE).canConvertToLong()); [EOL] }
public void testShort() { [EOL]     ShortNode n = ShortNode.valueOf((short) 1); [EOL]     assertStandardEquals(n); [EOL]     assertTrue(0 != n.hashCode()); [EOL]     assertEquals(JsonToken.VALUE_NUMBER_INT, n.asToken()); [EOL]     assertEquals(JsonParser.NumberType.INT, n.numberType()); [EOL]     assertEquals(1, n.intValue()); [EOL]     assertEquals(1L, n.longValue()); [EOL]     assertEquals(BigDecimal.ONE, n.decimalValue()); [EOL]     assertEquals(BigInteger.ONE, n.bigIntegerValue()); [EOL]     assertEquals("1", n.asText()); [EOL]     assertNodeNumbers(n, 1, 1.0); [EOL]     assertTrue(ShortNode.valueOf((short) 0).canConvertToInt()); [EOL]     assertTrue(ShortNode.valueOf(Short.MAX_VALUE).canConvertToInt()); [EOL]     assertTrue(ShortNode.valueOf(Short.MIN_VALUE).canConvertToInt()); [EOL]     assertTrue(ShortNode.valueOf((short) 0).canConvertToLong()); [EOL]     assertTrue(ShortNode.valueOf(Short.MAX_VALUE).canConvertToLong()); [EOL]     assertTrue(ShortNode.valueOf(Short.MIN_VALUE).canConvertToLong()); [EOL] }
public void testShort() { [EOL]     ShortNode n = ShortNode.valueOf((short) 1); [EOL]     assertStandardEquals(n); [EOL]     assertTrue(0 != n.hashCode()); [EOL]     assertEquals(JsonToken.VALUE_NUMBER_INT, n.asToken()); [EOL]     assertEquals(JsonParser.NumberType.INT, n.numberType()); [EOL]     assertEquals(1, n.intValue()); [EOL]     assertEquals(1L, n.longValue()); [EOL]     assertEquals(BigDecimal.ONE, n.decimalValue()); [EOL]     assertEquals(BigInteger.ONE, n.bigIntegerValue()); [EOL]     assertEquals("1", n.asText()); [EOL]     assertNodeNumbers(n, 1, 1.0); [EOL]     assertTrue(ShortNode.valueOf((short) 0).canConvertToInt()); [EOL]     assertTrue(ShortNode.valueOf(Short.MAX_VALUE).canConvertToInt()); [EOL]     assertTrue(ShortNode.valueOf(Short.MIN_VALUE).canConvertToInt()); [EOL]     assertTrue(ShortNode.valueOf((short) 0).canConvertToLong()); [EOL]     assertTrue(ShortNode.valueOf(Short.MAX_VALUE).canConvertToLong()); [EOL]     assertTrue(ShortNode.valueOf(Short.MIN_VALUE).canConvertToLong()); [EOL] }
public void testShort() { [EOL]     ShortNode n = ShortNode.valueOf((short) 1); [EOL]     assertStandardEquals(n); [EOL]     assertTrue(0 != n.hashCode()); [EOL]     assertEquals(JsonToken.VALUE_NUMBER_INT, n.asToken()); [EOL]     assertEquals(JsonParser.NumberType.INT, n.numberType()); [EOL]     assertEquals(1, n.intValue()); [EOL]     assertEquals(1L, n.longValue()); [EOL]     assertEquals(BigDecimal.ONE, n.decimalValue()); [EOL]     assertEquals(BigInteger.ONE, n.bigIntegerValue()); [EOL]     assertEquals("1", n.asText()); [EOL]     assertNodeNumbers(n, 1, 1.0); [EOL]     assertTrue(ShortNode.valueOf((short) 0).canConvertToInt()); [EOL]     assertTrue(ShortNode.valueOf(Short.MAX_VALUE).canConvertToInt()); [EOL]     assertTrue(ShortNode.valueOf(Short.MIN_VALUE).canConvertToInt()); [EOL]     assertTrue(ShortNode.valueOf((short) 0).canConvertToLong()); [EOL]     assertTrue(ShortNode.valueOf(Short.MAX_VALUE).canConvertToLong()); [EOL]     assertTrue(ShortNode.valueOf(Short.MIN_VALUE).canConvertToLong()); [EOL] }
public void testShort() { [EOL]     ShortNode n = ShortNode.valueOf((short) 1); [EOL]     assertStandardEquals(n); [EOL]     assertTrue(0 != n.hashCode()); [EOL]     assertEquals(JsonToken.VALUE_NUMBER_INT, n.asToken()); [EOL]     assertEquals(JsonParser.NumberType.INT, n.numberType()); [EOL]     assertEquals(1, n.intValue()); [EOL]     assertEquals(1L, n.longValue()); [EOL]     assertEquals(BigDecimal.ONE, n.decimalValue()); [EOL]     assertEquals(BigInteger.ONE, n.bigIntegerValue()); [EOL]     assertEquals("1", n.asText()); [EOL]     assertNodeNumbers(n, 1, 1.0); [EOL]     assertTrue(ShortNode.valueOf((short) 0).canConvertToInt()); [EOL]     assertTrue(ShortNode.valueOf(Short.MAX_VALUE).canConvertToInt()); [EOL]     assertTrue(ShortNode.valueOf(Short.MIN_VALUE).canConvertToInt()); [EOL]     assertTrue(ShortNode.valueOf((short) 0).canConvertToLong()); [EOL]     assertTrue(ShortNode.valueOf(Short.MAX_VALUE).canConvertToLong()); [EOL]     assertTrue(ShortNode.valueOf(Short.MIN_VALUE).canConvertToLong()); [EOL] }
public void testShort() { [EOL]     ShortNode n = ShortNode.valueOf((short) 1); [EOL]     assertStandardEquals(n); [EOL]     assertTrue(0 != n.hashCode()); [EOL]     assertEquals(JsonToken.VALUE_NUMBER_INT, n.asToken()); [EOL]     assertEquals(JsonParser.NumberType.INT, n.numberType()); [EOL]     assertEquals(1, n.intValue()); [EOL]     assertEquals(1L, n.longValue()); [EOL]     assertEquals(BigDecimal.ONE, n.decimalValue()); [EOL]     assertEquals(BigInteger.ONE, n.bigIntegerValue()); [EOL]     assertEquals("1", n.asText()); [EOL]     assertNodeNumbers(n, 1, 1.0); [EOL]     assertTrue(ShortNode.valueOf((short) 0).canConvertToInt()); [EOL]     assertTrue(ShortNode.valueOf(Short.MAX_VALUE).canConvertToInt()); [EOL]     assertTrue(ShortNode.valueOf(Short.MIN_VALUE).canConvertToInt()); [EOL]     assertTrue(ShortNode.valueOf((short) 0).canConvertToLong()); [EOL]     assertTrue(ShortNode.valueOf(Short.MAX_VALUE).canConvertToLong()); [EOL]     assertTrue(ShortNode.valueOf(Short.MIN_VALUE).canConvertToLong()); [EOL] }
public void testShort() { [EOL]     ShortNode n = ShortNode.valueOf((short) 1); [EOL]     assertStandardEquals(n); [EOL]     assertTrue(0 != n.hashCode()); [EOL]     assertEquals(JsonToken.VALUE_NUMBER_INT, n.asToken()); [EOL]     assertEquals(JsonParser.NumberType.INT, n.numberType()); [EOL]     assertEquals(1, n.intValue()); [EOL]     assertEquals(1L, n.longValue()); [EOL]     assertEquals(BigDecimal.ONE, n.decimalValue()); [EOL]     assertEquals(BigInteger.ONE, n.bigIntegerValue()); [EOL]     assertEquals("1", n.asText()); [EOL]     assertNodeNumbers(n, 1, 1.0); [EOL]     assertTrue(ShortNode.valueOf((short) 0).canConvertToInt()); [EOL]     assertTrue(ShortNode.valueOf(Short.MAX_VALUE).canConvertToInt()); [EOL]     assertTrue(ShortNode.valueOf(Short.MIN_VALUE).canConvertToInt()); [EOL]     assertTrue(ShortNode.valueOf((short) 0).canConvertToLong()); [EOL]     assertTrue(ShortNode.valueOf(Short.MAX_VALUE).canConvertToLong()); [EOL]     assertTrue(ShortNode.valueOf(Short.MIN_VALUE).canConvertToLong()); [EOL] }
public void testShort() { [EOL]     ShortNode n = ShortNode.valueOf((short) 1); [EOL]     assertStandardEquals(n); [EOL]     assertTrue(0 != n.hashCode()); [EOL]     assertEquals(JsonToken.VALUE_NUMBER_INT, n.asToken()); [EOL]     assertEquals(JsonParser.NumberType.INT, n.numberType()); [EOL]     assertEquals(1, n.intValue()); [EOL]     assertEquals(1L, n.longValue()); [EOL]     assertEquals(BigDecimal.ONE, n.decimalValue()); [EOL]     assertEquals(BigInteger.ONE, n.bigIntegerValue()); [EOL]     assertEquals("1", n.asText()); [EOL]     assertNodeNumbers(n, 1, 1.0); [EOL]     assertTrue(ShortNode.valueOf((short) 0).canConvertToInt()); [EOL]     assertTrue(ShortNode.valueOf(Short.MAX_VALUE).canConvertToInt()); [EOL]     assertTrue(ShortNode.valueOf(Short.MIN_VALUE).canConvertToInt()); [EOL]     assertTrue(ShortNode.valueOf((short) 0).canConvertToLong()); [EOL]     assertTrue(ShortNode.valueOf(Short.MAX_VALUE).canConvertToLong()); [EOL]     assertTrue(ShortNode.valueOf(Short.MIN_VALUE).canConvertToLong()); [EOL] }
public void testShort() { [EOL]     ShortNode n = ShortNode.valueOf((short) 1); [EOL]     assertStandardEquals(n); [EOL]     assertTrue(0 != n.hashCode()); [EOL]     assertEquals(JsonToken.VALUE_NUMBER_INT, n.asToken()); [EOL]     assertEquals(JsonParser.NumberType.INT, n.numberType()); [EOL]     assertEquals(1, n.intValue()); [EOL]     assertEquals(1L, n.longValue()); [EOL]     assertEquals(BigDecimal.ONE, n.decimalValue()); [EOL]     assertEquals(BigInteger.ONE, n.bigIntegerValue()); [EOL]     assertEquals("1", n.asText()); [EOL]     assertNodeNumbers(n, 1, 1.0); [EOL]     assertTrue(ShortNode.valueOf((short) 0).canConvertToInt()); [EOL]     assertTrue(ShortNode.valueOf(Short.MAX_VALUE).canConvertToInt()); [EOL]     assertTrue(ShortNode.valueOf(Short.MIN_VALUE).canConvertToInt()); [EOL]     assertTrue(ShortNode.valueOf((short) 0).canConvertToLong()); [EOL]     assertTrue(ShortNode.valueOf(Short.MAX_VALUE).canConvertToLong()); [EOL]     assertTrue(ShortNode.valueOf(Short.MIN_VALUE).canConvertToLong()); [EOL] }
public void testShort() { [EOL]     ShortNode n = ShortNode.valueOf((short) 1); [EOL]     assertStandardEquals(n); [EOL]     assertTrue(0 != n.hashCode()); [EOL]     assertEquals(JsonToken.VALUE_NUMBER_INT, n.asToken()); [EOL]     assertEquals(JsonParser.NumberType.INT, n.numberType()); [EOL]     assertEquals(1, n.intValue()); [EOL]     assertEquals(1L, n.longValue()); [EOL]     assertEquals(BigDecimal.ONE, n.decimalValue()); [EOL]     assertEquals(BigInteger.ONE, n.bigIntegerValue()); [EOL]     assertEquals("1", n.asText()); [EOL]     assertNodeNumbers(n, 1, 1.0); [EOL]     assertTrue(ShortNode.valueOf((short) 0).canConvertToInt()); [EOL]     assertTrue(ShortNode.valueOf(Short.MAX_VALUE).canConvertToInt()); [EOL]     assertTrue(ShortNode.valueOf(Short.MIN_VALUE).canConvertToInt()); [EOL]     assertTrue(ShortNode.valueOf((short) 0).canConvertToLong()); [EOL]     assertTrue(ShortNode.valueOf(Short.MAX_VALUE).canConvertToLong()); [EOL]     assertTrue(ShortNode.valueOf(Short.MIN_VALUE).canConvertToLong()); [EOL] }
public void testShort() { [EOL]     ShortNode n = ShortNode.valueOf((short) 1); [EOL]     assertStandardEquals(n); [EOL]     assertTrue(0 != n.hashCode()); [EOL]     assertEquals(JsonToken.VALUE_NUMBER_INT, n.asToken()); [EOL]     assertEquals(JsonParser.NumberType.INT, n.numberType()); [EOL]     assertEquals(1, n.intValue()); [EOL]     assertEquals(1L, n.longValue()); [EOL]     assertEquals(BigDecimal.ONE, n.decimalValue()); [EOL]     assertEquals(BigInteger.ONE, n.bigIntegerValue()); [EOL]     assertEquals("1", n.asText()); [EOL]     assertNodeNumbers(n, 1, 1.0); [EOL]     assertTrue(ShortNode.valueOf((short) 0).canConvertToInt()); [EOL]     assertTrue(ShortNode.valueOf(Short.MAX_VALUE).canConvertToInt()); [EOL]     assertTrue(ShortNode.valueOf(Short.MIN_VALUE).canConvertToInt()); [EOL]     assertTrue(ShortNode.valueOf((short) 0).canConvertToLong()); [EOL]     assertTrue(ShortNode.valueOf(Short.MAX_VALUE).canConvertToLong()); [EOL]     assertTrue(ShortNode.valueOf(Short.MIN_VALUE).canConvertToLong()); [EOL] }
public void testShort() { [EOL]     ShortNode n = ShortNode.valueOf((short) 1); [EOL]     assertStandardEquals(n); [EOL]     assertTrue(0 != n.hashCode()); [EOL]     assertEquals(JsonToken.VALUE_NUMBER_INT, n.asToken()); [EOL]     assertEquals(JsonParser.NumberType.INT, n.numberType()); [EOL]     assertEquals(1, n.intValue()); [EOL]     assertEquals(1L, n.longValue()); [EOL]     assertEquals(BigDecimal.ONE, n.decimalValue()); [EOL]     assertEquals(BigInteger.ONE, n.bigIntegerValue()); [EOL]     assertEquals("1", n.asText()); [EOL]     assertNodeNumbers(n, 1, 1.0); [EOL]     assertTrue(ShortNode.valueOf((short) 0).canConvertToInt()); [EOL]     assertTrue(ShortNode.valueOf(Short.MAX_VALUE).canConvertToInt()); [EOL]     assertTrue(ShortNode.valueOf(Short.MIN_VALUE).canConvertToInt()); [EOL]     assertTrue(ShortNode.valueOf((short) 0).canConvertToLong()); [EOL]     assertTrue(ShortNode.valueOf(Short.MAX_VALUE).canConvertToLong()); [EOL]     assertTrue(ShortNode.valueOf(Short.MIN_VALUE).canConvertToLong()); [EOL] }
public void testShort() { [EOL]     ShortNode n = ShortNode.valueOf((short) 1); [EOL]     assertStandardEquals(n); [EOL]     assertTrue(0 != n.hashCode()); [EOL]     assertEquals(JsonToken.VALUE_NUMBER_INT, n.asToken()); [EOL]     assertEquals(JsonParser.NumberType.INT, n.numberType()); [EOL]     assertEquals(1, n.intValue()); [EOL]     assertEquals(1L, n.longValue()); [EOL]     assertEquals(BigDecimal.ONE, n.decimalValue()); [EOL]     assertEquals(BigInteger.ONE, n.bigIntegerValue()); [EOL]     assertEquals("1", n.asText()); [EOL]     assertNodeNumbers(n, 1, 1.0); [EOL]     assertTrue(ShortNode.valueOf((short) 0).canConvertToInt()); [EOL]     assertTrue(ShortNode.valueOf(Short.MAX_VALUE).canConvertToInt()); [EOL]     assertTrue(ShortNode.valueOf(Short.MIN_VALUE).canConvertToInt()); [EOL]     assertTrue(ShortNode.valueOf((short) 0).canConvertToLong()); [EOL]     assertTrue(ShortNode.valueOf(Short.MAX_VALUE).canConvertToLong()); [EOL]     assertTrue(ShortNode.valueOf(Short.MIN_VALUE).canConvertToLong()); [EOL] }
public void testShort() { [EOL]     ShortNode n = ShortNode.valueOf((short) 1); [EOL]     assertStandardEquals(n); [EOL]     assertTrue(0 != n.hashCode()); [EOL]     assertEquals(JsonToken.VALUE_NUMBER_INT, n.asToken()); [EOL]     assertEquals(JsonParser.NumberType.INT, n.numberType()); [EOL]     assertEquals(1, n.intValue()); [EOL]     assertEquals(1L, n.longValue()); [EOL]     assertEquals(BigDecimal.ONE, n.decimalValue()); [EOL]     assertEquals(BigInteger.ONE, n.bigIntegerValue()); [EOL]     assertEquals("1", n.asText()); [EOL]     assertNodeNumbers(n, 1, 1.0); [EOL]     assertTrue(ShortNode.valueOf((short) 0).canConvertToInt()); [EOL]     assertTrue(ShortNode.valueOf(Short.MAX_VALUE).canConvertToInt()); [EOL]     assertTrue(ShortNode.valueOf(Short.MIN_VALUE).canConvertToInt()); [EOL]     assertTrue(ShortNode.valueOf((short) 0).canConvertToLong()); [EOL]     assertTrue(ShortNode.valueOf(Short.MAX_VALUE).canConvertToLong()); [EOL]     assertTrue(ShortNode.valueOf(Short.MIN_VALUE).canConvertToLong()); [EOL] }
public void testShort() { [EOL]     ShortNode n = ShortNode.valueOf((short) 1); [EOL]     assertStandardEquals(n); [EOL]     assertTrue(0 != n.hashCode()); [EOL]     assertEquals(JsonToken.VALUE_NUMBER_INT, n.asToken()); [EOL]     assertEquals(JsonParser.NumberType.INT, n.numberType()); [EOL]     assertEquals(1, n.intValue()); [EOL]     assertEquals(1L, n.longValue()); [EOL]     assertEquals(BigDecimal.ONE, n.decimalValue()); [EOL]     assertEquals(BigInteger.ONE, n.bigIntegerValue()); [EOL]     assertEquals("1", n.asText()); [EOL]     assertNodeNumbers(n, 1, 1.0); [EOL]     assertTrue(ShortNode.valueOf((short) 0).canConvertToInt()); [EOL]     assertTrue(ShortNode.valueOf(Short.MAX_VALUE).canConvertToInt()); [EOL]     assertTrue(ShortNode.valueOf(Short.MIN_VALUE).canConvertToInt()); [EOL]     assertTrue(ShortNode.valueOf((short) 0).canConvertToLong()); [EOL]     assertTrue(ShortNode.valueOf(Short.MAX_VALUE).canConvertToLong()); [EOL]     assertTrue(ShortNode.valueOf(Short.MIN_VALUE).canConvertToLong()); [EOL] }
public void testShort() { [EOL]     ShortNode n = ShortNode.valueOf((short) 1); [EOL]     assertStandardEquals(n); [EOL]     assertTrue(0 != n.hashCode()); [EOL]     assertEquals(JsonToken.VALUE_NUMBER_INT, n.asToken()); [EOL]     assertEquals(JsonParser.NumberType.INT, n.numberType()); [EOL]     assertEquals(1, n.intValue()); [EOL]     assertEquals(1L, n.longValue()); [EOL]     assertEquals(BigDecimal.ONE, n.decimalValue()); [EOL]     assertEquals(BigInteger.ONE, n.bigIntegerValue()); [EOL]     assertEquals("1", n.asText()); [EOL]     assertNodeNumbers(n, 1, 1.0); [EOL]     assertTrue(ShortNode.valueOf((short) 0).canConvertToInt()); [EOL]     assertTrue(ShortNode.valueOf(Short.MAX_VALUE).canConvertToInt()); [EOL]     assertTrue(ShortNode.valueOf(Short.MIN_VALUE).canConvertToInt()); [EOL]     assertTrue(ShortNode.valueOf((short) 0).canConvertToLong()); [EOL]     assertTrue(ShortNode.valueOf(Short.MAX_VALUE).canConvertToLong()); [EOL]     assertTrue(ShortNode.valueOf(Short.MIN_VALUE).canConvertToLong()); [EOL] }
public void testShort() { [EOL]     ShortNode n = ShortNode.valueOf((short) 1); [EOL]     assertStandardEquals(n); [EOL]     assertTrue(0 != n.hashCode()); [EOL]     assertEquals(JsonToken.VALUE_NUMBER_INT, n.asToken()); [EOL]     assertEquals(JsonParser.NumberType.INT, n.numberType()); [EOL]     assertEquals(1, n.intValue()); [EOL]     assertEquals(1L, n.longValue()); [EOL]     assertEquals(BigDecimal.ONE, n.decimalValue()); [EOL]     assertEquals(BigInteger.ONE, n.bigIntegerValue()); [EOL]     assertEquals("1", n.asText()); [EOL]     assertNodeNumbers(n, 1, 1.0); [EOL]     assertTrue(ShortNode.valueOf((short) 0).canConvertToInt()); [EOL]     assertTrue(ShortNode.valueOf(Short.MAX_VALUE).canConvertToInt()); [EOL]     assertTrue(ShortNode.valueOf(Short.MIN_VALUE).canConvertToInt()); [EOL]     assertTrue(ShortNode.valueOf((short) 0).canConvertToLong()); [EOL]     assertTrue(ShortNode.valueOf(Short.MAX_VALUE).canConvertToLong()); [EOL]     assertTrue(ShortNode.valueOf(Short.MIN_VALUE).canConvertToLong()); [EOL] }
public void testShort() { [EOL]     ShortNode n = ShortNode.valueOf((short) 1); [EOL]     assertStandardEquals(n); [EOL]     assertTrue(0 != n.hashCode()); [EOL]     assertEquals(JsonToken.VALUE_NUMBER_INT, n.asToken()); [EOL]     assertEquals(JsonParser.NumberType.INT, n.numberType()); [EOL]     assertEquals(1, n.intValue()); [EOL]     assertEquals(1L, n.longValue()); [EOL]     assertEquals(BigDecimal.ONE, n.decimalValue()); [EOL]     assertEquals(BigInteger.ONE, n.bigIntegerValue()); [EOL]     assertEquals("1", n.asText()); [EOL]     assertNodeNumbers(n, 1, 1.0); [EOL]     assertTrue(ShortNode.valueOf((short) 0).canConvertToInt()); [EOL]     assertTrue(ShortNode.valueOf(Short.MAX_VALUE).canConvertToInt()); [EOL]     assertTrue(ShortNode.valueOf(Short.MIN_VALUE).canConvertToInt()); [EOL]     assertTrue(ShortNode.valueOf((short) 0).canConvertToLong()); [EOL]     assertTrue(ShortNode.valueOf(Short.MAX_VALUE).canConvertToLong()); [EOL]     assertTrue(ShortNode.valueOf(Short.MIN_VALUE).canConvertToLong()); [EOL] }
public void testDeserializeSimple() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     JsonSchema schema = mapper.generateJsonSchema(Schemable.class); [EOL]     assertNotNull(schema); [EOL]     String schemaStr = mapper.writeValueAsString(schema); [EOL]     assertNotNull(schemaStr); [EOL]     JsonSchema result = mapper.readValue(schemaStr, JsonSchema.class); [EOL]     assertEquals("Trying to read from '" + schemaStr + "'", schema, result); [EOL] }
public void testDeserializeSimple() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     JsonSchema schema = mapper.generateJsonSchema(Schemable.class); [EOL]     assertNotNull(schema); [EOL]     String schemaStr = mapper.writeValueAsString(schema); [EOL]     assertNotNull(schemaStr); [EOL]     JsonSchema result = mapper.readValue(schemaStr, JsonSchema.class); [EOL]     assertEquals("Trying to read from '" + schemaStr + "'", schema, result); [EOL] }
public void testDeserializeSimple() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     JsonSchema schema = mapper.generateJsonSchema(Schemable.class); [EOL]     assertNotNull(schema); [EOL]     String schemaStr = mapper.writeValueAsString(schema); [EOL]     assertNotNull(schemaStr); [EOL]     JsonSchema result = mapper.readValue(schemaStr, JsonSchema.class); [EOL]     assertEquals("Trying to read from '" + schemaStr + "'", schema, result); [EOL] }
public void testWithList() throws Exception { [EOL]     assertEquals("13", MAPPER.writeValueAsString(new ListAsNumber())); [EOL] }
public void testWithList() throws Exception { [EOL]     assertEquals("13", MAPPER.writeValueAsString(new ListAsNumber())); [EOL] }
public void testSimpleJsonValue() throws Exception { [EOL]     String result = MAPPER.writeValueAsString(new ValueClass<String>("abc")); [EOL]     assertEquals("\"abc\"", result); [EOL] }
public void testSimpleJsonValue() throws Exception { [EOL]     String result = MAPPER.writeValueAsString(new ValueClass<String>("abc")); [EOL]     assertEquals("\"abc\"", result); [EOL] }
public void testBuilderReplacement() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerModule(new ModuleImpl(new BuilderModifier(new BogusBeanSerializer(17)))); [EOL]     Bean bean = new Bean(); [EOL]     assertEquals("17", mapper.writeValueAsString(bean)); [EOL] }
public void testBuilderReplacement() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerModule(new ModuleImpl(new BuilderModifier(new BogusBeanSerializer(17)))); [EOL]     Bean bean = new Bean(); [EOL]     assertEquals("17", mapper.writeValueAsString(bean)); [EOL] }
public void testBuilderReplacement() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerModule(new ModuleImpl(new BuilderModifier(new BogusBeanSerializer(17)))); [EOL]     Bean bean = new Bean(); [EOL]     assertEquals("17", mapper.writeValueAsString(bean)); [EOL] }
public void testBuilderReplacement() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerModule(new ModuleImpl(new BuilderModifier(new BogusBeanSerializer(17)))); [EOL]     Bean bean = new Bean(); [EOL]     assertEquals("17", mapper.writeValueAsString(bean)); [EOL] }
public void testClassAnnotationForLists() throws Exception { [EOL]     String json = objectWriter().writeValueAsString(new ConvertingBeanContainer(new ConvertingBean(1, 2), new ConvertingBean(3, 4))); [EOL]     assertEquals("{\"values\":[[1,2],[3,4]]}", json); [EOL] }
public void testClassAnnotationForLists() throws Exception { [EOL]     String json = objectWriter().writeValueAsString(new ConvertingBeanContainer(new ConvertingBean(1, 2), new ConvertingBean(3, 4))); [EOL]     assertEquals("{\"values\":[[1,2],[3,4]]}", json); [EOL] }
public void testClassAnnotationForLists() throws Exception { [EOL]     String json = objectWriter().writeValueAsString(new ConvertingBeanContainer(new ConvertingBean(1, 2), new ConvertingBean(3, 4))); [EOL]     assertEquals("{\"values\":[[1,2],[3,4]]}", json); [EOL] }
public void testBuilderReplacement() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerModule(new ModuleImpl(new BuilderModifier(new BogusBeanSerializer(17)))); [EOL]     Bean bean = new Bean(); [EOL]     assertEquals("17", mapper.writeValueAsString(bean)); [EOL] }
public void testPropertyWithSubtypes() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerSubtypes(SubB.class, SubC.class, SubD.class); [EOL]     String json = mapper.writeValueAsString(new PropertyBean(new SubC())); [EOL]     PropertyBean result = mapper.readValue(json, PropertyBean.class); [EOL]     assertSame(SubC.class, result.value.getClass()); [EOL] }
public void testPropertyWithSubtypes() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerSubtypes(SubB.class, SubC.class, SubD.class); [EOL]     String json = mapper.writeValueAsString(new PropertyBean(new SubC())); [EOL]     PropertyBean result = mapper.readValue(json, PropertyBean.class); [EOL]     assertSame(SubC.class, result.value.getClass()); [EOL] }
public void testBuilderReplacement() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerModule(new ModuleImpl(new BuilderModifier(new BogusBeanSerializer(17)))); [EOL]     Bean bean = new Bean(); [EOL]     assertEquals("17", mapper.writeValueAsString(bean)); [EOL] }
public void testBuilderReplacement() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerModule(new ModuleImpl(new BuilderModifier(new BogusBeanSerializer(17)))); [EOL]     Bean bean = new Bean(); [EOL]     assertEquals("17", mapper.writeValueAsString(bean)); [EOL] }
public void testBuilderReplacement() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerModule(new ModuleImpl(new BuilderModifier(new BogusBeanSerializer(17)))); [EOL]     Bean bean = new Bean(); [EOL]     assertEquals("17", mapper.writeValueAsString(bean)); [EOL] }
public void testBuilderReplacement() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerModule(new ModuleImpl(new BuilderModifier(new BogusBeanSerializer(17)))); [EOL]     Bean bean = new Bean(); [EOL]     assertEquals("17", mapper.writeValueAsString(bean)); [EOL] }
public void testAlwaysAsId() throws Exception { [EOL]     String json = MAPPER.writeValueAsString(new AlwaysContainer()); [EOL]     assertEquals("{\"a\":1,\"b\":2}", json); [EOL] }
public void testAlwaysAsId() throws Exception { [EOL]     String json = MAPPER.writeValueAsString(new AlwaysContainer()); [EOL]     assertEquals("{\"a\":1,\"b\":2}", json); [EOL] }
public void testAlwaysAsId() throws Exception { [EOL]     String json = MAPPER.writeValueAsString(new AlwaysContainer()); [EOL]     assertEquals("{\"a\":1,\"b\":2}", json); [EOL] }
public void testAlwaysAsId() throws Exception { [EOL]     String json = MAPPER.writeValueAsString(new AlwaysContainer()); [EOL]     assertEquals("{\"a\":1,\"b\":2}", json); [EOL] }
public void testIgnoreType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     assertEquals("{\"value\":13}", m.writeValueAsString(new NonIgnoredType())); [EOL] }
public void testIgnoreType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     assertEquals("{\"value\":13}", m.writeValueAsString(new NonIgnoredType())); [EOL] }
public void testIgnoreType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     assertEquals("{\"value\":13}", m.writeValueAsString(new NonIgnoredType())); [EOL] }
public void testIgnoreType() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     assertEquals("{\"value\":13}", m.writeValueAsString(new NonIgnoredType())); [EOL] }
public void testAlwaysAsId() throws Exception { [EOL]     String json = MAPPER.writeValueAsString(new AlwaysContainer()); [EOL]     assertEquals("{\"a\":1,\"b\":2}", json); [EOL] }
public void testAlwaysAsId() throws Exception { [EOL]     String json = MAPPER.writeValueAsString(new AlwaysContainer()); [EOL]     assertEquals("{\"a\":1,\"b\":2}", json); [EOL] }
public void testAlwaysAsId() throws Exception { [EOL]     String json = MAPPER.writeValueAsString(new AlwaysContainer()); [EOL]     assertEquals("{\"a\":1,\"b\":2}", json); [EOL] }
public void testPropertyWithSubtypes() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerSubtypes(SubB.class, SubC.class, SubD.class); [EOL]     String json = mapper.writeValueAsString(new PropertyBean(new SubC())); [EOL]     PropertyBean result = mapper.readValue(json, PropertyBean.class); [EOL]     assertSame(SubC.class, result.value.getClass()); [EOL] }
public void testPropertyWithSubtypes() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerSubtypes(SubB.class, SubC.class, SubD.class); [EOL]     String json = mapper.writeValueAsString(new PropertyBean(new SubC())); [EOL]     PropertyBean result = mapper.readValue(json, PropertyBean.class); [EOL]     assertSame(SubC.class, result.value.getClass()); [EOL] }
public void testDeserializeSimple() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     JsonSchema schema = mapper.generateJsonSchema(Schemable.class); [EOL]     assertNotNull(schema); [EOL]     String schemaStr = mapper.writeValueAsString(schema); [EOL]     assertNotNull(schemaStr); [EOL]     JsonSchema result = mapper.readValue(schemaStr, JsonSchema.class); [EOL]     assertEquals("Trying to read from '" + schemaStr + "'", schema, result); [EOL] }
public void testDeserializeSimple() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     JsonSchema schema = mapper.generateJsonSchema(Schemable.class); [EOL]     assertNotNull(schema); [EOL]     String schemaStr = mapper.writeValueAsString(schema); [EOL]     assertNotNull(schemaStr); [EOL]     JsonSchema result = mapper.readValue(schemaStr, JsonSchema.class); [EOL]     assertEquals("Trying to read from '" + schemaStr + "'", schema, result); [EOL] }
public void testDeserializeSimple() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     JsonSchema schema = mapper.generateJsonSchema(Schemable.class); [EOL]     assertNotNull(schema); [EOL]     String schemaStr = mapper.writeValueAsString(schema); [EOL]     assertNotNull(schemaStr); [EOL]     JsonSchema result = mapper.readValue(schemaStr, JsonSchema.class); [EOL]     assertEquals("Trying to read from '" + schemaStr + "'", schema, result); [EOL] }
public void testDeserializeSimple() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     JsonSchema schema = mapper.generateJsonSchema(Schemable.class); [EOL]     assertNotNull(schema); [EOL]     String schemaStr = mapper.writeValueAsString(schema); [EOL]     assertNotNull(schemaStr); [EOL]     JsonSchema result = mapper.readValue(schemaStr, JsonSchema.class); [EOL]     assertEquals("Trying to read from '" + schemaStr + "'", schema, result); [EOL] }
public void testDeserializeSimple() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     JsonSchema schema = mapper.generateJsonSchema(Schemable.class); [EOL]     assertNotNull(schema); [EOL]     String schemaStr = mapper.writeValueAsString(schema); [EOL]     assertNotNull(schemaStr); [EOL]     JsonSchema result = mapper.readValue(schemaStr, JsonSchema.class); [EOL]     assertEquals("Trying to read from '" + schemaStr + "'", schema, result); [EOL] }
public void testDeserializeSimple() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     JsonSchema schema = mapper.generateJsonSchema(Schemable.class); [EOL]     assertNotNull(schema); [EOL]     String schemaStr = mapper.writeValueAsString(schema); [EOL]     assertNotNull(schemaStr); [EOL]     JsonSchema result = mapper.readValue(schemaStr, JsonSchema.class); [EOL]     assertEquals("Trying to read from '" + schemaStr + "'", schema, result); [EOL] }
public void testDeserializeSimple() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     JsonSchema schema = mapper.generateJsonSchema(Schemable.class); [EOL]     assertNotNull(schema); [EOL]     String schemaStr = mapper.writeValueAsString(schema); [EOL]     assertNotNull(schemaStr); [EOL]     JsonSchema result = mapper.readValue(schemaStr, JsonSchema.class); [EOL]     assertEquals("Trying to read from '" + schemaStr + "'", schema, result); [EOL] }
public void testNullStringGetter() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String result = m.writeValueAsString(new ClassGetter<String>(null)); [EOL]     String expected = "{\"nonRaw\":null,\"raw\":null,\"value\":null}"; [EOL]     assertEquals(expected, result); [EOL] }
public void testNullStringGetter() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     String result = m.writeValueAsString(new ClassGetter<String>(null)); [EOL]     String expected = "{\"nonRaw\":null,\"raw\":null,\"value\":null}"; [EOL]     assertEquals(expected, result); [EOL] }
public void testDoubleAsNumber() throws Exception { [EOL]     Number result = new ObjectMapper().readValue(new StringReader(" 1.0 "), Number.class); [EOL]     assertEquals(Double.valueOf(1.0), result); [EOL] }
public void testDoubleAsNumber() throws Exception { [EOL]     Number result = new ObjectMapper().readValue(new StringReader(" 1.0 "), Number.class); [EOL]     assertEquals(Double.valueOf(1.0), result); [EOL] }
public void testDoubleAsNumber() throws Exception { [EOL]     Number result = new ObjectMapper().readValue(new StringReader(" 1.0 "), Number.class); [EOL]     assertEquals(Double.valueOf(1.0), result); [EOL] }
public void testDoubleAsNumber() throws Exception { [EOL]     Number result = new ObjectMapper().readValue(new StringReader(" 1.0 "), Number.class); [EOL]     assertEquals(Double.valueOf(1.0), result); [EOL] }
public void testDoubleAsNumber() throws Exception { [EOL]     Number result = new ObjectMapper().readValue(new StringReader(" 1.0 "), Number.class); [EOL]     assertEquals(Double.valueOf(1.0), result); [EOL] }
public void testDoubleAsNumber() throws Exception { [EOL]     Number result = new ObjectMapper().readValue(new StringReader(" 1.0 "), Number.class); [EOL]     assertEquals(Double.valueOf(1.0), result); [EOL] }
public void testDoubleAsNumber() throws Exception { [EOL]     Number result = new ObjectMapper().readValue(new StringReader(" 1.0 "), Number.class); [EOL]     assertEquals(Double.valueOf(1.0), result); [EOL] }
public void testDoubleAsNumber() throws Exception { [EOL]     Number result = new ObjectMapper().readValue(new StringReader(" 1.0 "), Number.class); [EOL]     assertEquals(Double.valueOf(1.0), result); [EOL] }
public void testDoubleAsNumber() throws Exception { [EOL]     Number result = new ObjectMapper().readValue(new StringReader(" 1.0 "), Number.class); [EOL]     assertEquals(Double.valueOf(1.0), result); [EOL] }
public void testDoubleAsNumber() throws Exception { [EOL]     Number result = new ObjectMapper().readValue(new StringReader(" 1.0 "), Number.class); [EOL]     assertEquals(Double.valueOf(1.0), result); [EOL] }
public void testDoubleAsNumber() throws Exception { [EOL]     Number result = new ObjectMapper().readValue(new StringReader(" 1.0 "), Number.class); [EOL]     assertEquals(Double.valueOf(1.0), result); [EOL] }
public void testDoubleAsNumber() throws Exception { [EOL]     Number result = new ObjectMapper().readValue(new StringReader(" 1.0 "), Number.class); [EOL]     assertEquals(Double.valueOf(1.0), result); [EOL] }
public void testDoubleAsNumber() throws Exception { [EOL]     Number result = new ObjectMapper().readValue(new StringReader(" 1.0 "), Number.class); [EOL]     assertEquals(Double.valueOf(1.0), result); [EOL] }
public void testDoubleAsNumber() throws Exception { [EOL]     Number result = new ObjectMapper().readValue(new StringReader(" 1.0 "), Number.class); [EOL]     assertEquals(Double.valueOf(1.0), result); [EOL] }
public void testDoubleAsNumber() throws Exception { [EOL]     Number result = new ObjectMapper().readValue(new StringReader(" 1.0 "), Number.class); [EOL]     assertEquals(Double.valueOf(1.0), result); [EOL] }
public void testDoubleAsNumber() throws Exception { [EOL]     Number result = new ObjectMapper().readValue(new StringReader(" 1.0 "), Number.class); [EOL]     assertEquals(Double.valueOf(1.0), result); [EOL] }
public void testDoubleAsNumber() throws Exception { [EOL]     Number result = new ObjectMapper().readValue(new StringReader(" 1.0 "), Number.class); [EOL]     assertEquals(Double.valueOf(1.0), result); [EOL] }
public void testDoubleAsNumber() throws Exception { [EOL]     Number result = new ObjectMapper().readValue(new StringReader(" 1.0 "), Number.class); [EOL]     assertEquals(Double.valueOf(1.0), result); [EOL] }
public void testDoubleAsNumber() throws Exception { [EOL]     Number result = new ObjectMapper().readValue(new StringReader(" 1.0 "), Number.class); [EOL]     assertEquals(Double.valueOf(1.0), result); [EOL] }
public void testDoubleAsNumber() throws Exception { [EOL]     Number result = new ObjectMapper().readValue(new StringReader(" 1.0 "), Number.class); [EOL]     assertEquals(Double.valueOf(1.0), result); [EOL] }
public void testDoubleAsNumber() throws Exception { [EOL]     Number result = new ObjectMapper().readValue(new StringReader(" 1.0 "), Number.class); [EOL]     assertEquals(Double.valueOf(1.0), result); [EOL] }
public void testDoubleAsNumber() throws Exception { [EOL]     Number result = new ObjectMapper().readValue(new StringReader(" 1.0 "), Number.class); [EOL]     assertEquals(Double.valueOf(1.0), result); [EOL] }
public void testDoubleAsNumber() throws Exception { [EOL]     Number result = new ObjectMapper().readValue(new StringReader(" 1.0 "), Number.class); [EOL]     assertEquals(Double.valueOf(1.0), result); [EOL] }
public void testDoubleAsNumber() throws Exception { [EOL]     Number result = new ObjectMapper().readValue(new StringReader(" 1.0 "), Number.class); [EOL]     assertEquals(Double.valueOf(1.0), result); [EOL] }
public void testDoubleAsNumber() throws Exception { [EOL]     Number result = new ObjectMapper().readValue(new StringReader(" 1.0 "), Number.class); [EOL]     assertEquals(Double.valueOf(1.0), result); [EOL] }
public void testDoubleAsNumber() throws Exception { [EOL]     Number result = new ObjectMapper().readValue(new StringReader(" 1.0 "), Number.class); [EOL]     assertEquals(Double.valueOf(1.0), result); [EOL] }
public void testDoubleAsNumber() throws Exception { [EOL]     Number result = new ObjectMapper().readValue(new StringReader(" 1.0 "), Number.class); [EOL]     assertEquals(Double.valueOf(1.0), result); [EOL] }
public void testDoubleAsNumber() throws Exception { [EOL]     Number result = new ObjectMapper().readValue(new StringReader(" 1.0 "), Number.class); [EOL]     assertEquals(Double.valueOf(1.0), result); [EOL] }
public void testDoubleAsNumber() throws Exception { [EOL]     Number result = new ObjectMapper().readValue(new StringReader(" 1.0 "), Number.class); [EOL]     assertEquals(Double.valueOf(1.0), result); [EOL] }
public void testDoubleAsNumber() throws Exception { [EOL]     Number result = new ObjectMapper().readValue(new StringReader(" 1.0 "), Number.class); [EOL]     assertEquals(Double.valueOf(1.0), result); [EOL] }
public void testDoubleAsNumber() throws Exception { [EOL]     Number result = new ObjectMapper().readValue(new StringReader(" 1.0 "), Number.class); [EOL]     assertEquals(Double.valueOf(1.0), result); [EOL] }
public void testDoNotAllowUnknownEnumValuesAsMapKeysWhenReadAsNullDisabled() throws Exception { [EOL]     assertFalse(MAPPER.isEnabled(DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL)); [EOL]     try { [EOL]         MAPPER.readValue("{\"map\":{\"NO-SUCH-VALUE\":\"val\"}}", ClassWithEnumMapKey.class); [EOL]         fail("Expected an exception for bogus enum value..."); [EOL]     } catch (JsonMappingException jex) { [EOL]         verifyException(jex, "Can not construct Map key"); [EOL]     } [EOL] }
public void testDoNotAllowUnknownEnumValuesAsMapKeysWhenReadAsNullDisabled() throws Exception { [EOL]     assertFalse(MAPPER.isEnabled(DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL)); [EOL]     try { [EOL]         MAPPER.readValue("{\"map\":{\"NO-SUCH-VALUE\":\"val\"}}", ClassWithEnumMapKey.class); [EOL]         fail("Expected an exception for bogus enum value..."); [EOL]     } catch (JsonMappingException jex) { [EOL]         verifyException(jex, "Can not construct Map key"); [EOL]     } [EOL] }
public void testDoNotAllowUnknownEnumValuesAsMapKeysWhenReadAsNullDisabled() throws Exception { [EOL]     assertFalse(MAPPER.isEnabled(DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL)); [EOL]     try { [EOL]         MAPPER.readValue("{\"map\":{\"NO-SUCH-VALUE\":\"val\"}}", ClassWithEnumMapKey.class); [EOL]         fail("Expected an exception for bogus enum value..."); [EOL]     } catch (JsonMappingException jex) { [EOL]         verifyException(jex, "Can not construct Map key"); [EOL]     } [EOL] }
public void testDoNotAllowUnknownEnumValuesAsMapKeysWhenReadAsNullDisabled() throws Exception { [EOL]     assertFalse(MAPPER.isEnabled(DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL)); [EOL]     try { [EOL]         MAPPER.readValue("{\"map\":{\"NO-SUCH-VALUE\":\"val\"}}", ClassWithEnumMapKey.class); [EOL]         fail("Expected an exception for bogus enum value..."); [EOL]     } catch (JsonMappingException jex) { [EOL]         verifyException(jex, "Can not construct Map key"); [EOL]     } [EOL] }
public void testIntBooleanMap() throws Exception { [EOL]     String JSON = "{ \"1\" : true, \"-1\" : false }"; [EOL]     Map<String, Integer> result = MAPPER.readValue(JSON, new TypeReference<HashMap<Integer, Boolean>>() { [EOL]     }); [EOL]     assertNotNull(result); [EOL]     assertEquals(HashMap.class, result.getClass()); [EOL]     assertEquals(2, result.size()); [EOL]     assertEquals(Boolean.TRUE, result.get(Integer.valueOf(1))); [EOL]     assertEquals(Boolean.FALSE, result.get(Integer.valueOf(-1))); [EOL]     assertNull(result.get("foobar")); [EOL]     assertNull(result.get(0)); [EOL] }
public void testMapWithConstructor() throws Exception { [EOL]     MapWithCtor result = MAPPER.readValue("{\"text\":\"abc\", \"entry\":true, \"number\":123, \"xy\":\"yx\"}", MapWithCtor.class); [EOL]     assertEquals(Boolean.TRUE, result.get("entry")); [EOL]     assertEquals("yx", result.get("xy")); [EOL]     assertEquals(2, result.size()); [EOL]     assertEquals("abc", result._text); [EOL]     assertEquals(123, result._number); [EOL] }
public void testIntBooleanMap() throws Exception { [EOL]     String JSON = "{ \"1\" : true, \"-1\" : false }"; [EOL]     Map<String, Integer> result = MAPPER.readValue(JSON, new TypeReference<HashMap<Integer, Boolean>>() { [EOL]     }); [EOL]     assertNotNull(result); [EOL]     assertEquals(HashMap.class, result.getClass()); [EOL]     assertEquals(2, result.size()); [EOL]     assertEquals(Boolean.TRUE, result.get(Integer.valueOf(1))); [EOL]     assertEquals(Boolean.FALSE, result.get(Integer.valueOf(-1))); [EOL]     assertNull(result.get("foobar")); [EOL]     assertNull(result.get(0)); [EOL] }
public void testIntBooleanMap() throws Exception { [EOL]     String JSON = "{ \"1\" : true, \"-1\" : false }"; [EOL]     Map<String, Integer> result = MAPPER.readValue(JSON, new TypeReference<HashMap<Integer, Boolean>>() { [EOL]     }); [EOL]     assertNotNull(result); [EOL]     assertEquals(HashMap.class, result.getClass()); [EOL]     assertEquals(2, result.size()); [EOL]     assertEquals(Boolean.TRUE, result.get(Integer.valueOf(1))); [EOL]     assertEquals(Boolean.FALSE, result.get(Integer.valueOf(-1))); [EOL]     assertNull(result.get("foobar")); [EOL]     assertNull(result.get(0)); [EOL] }
public void testDoNotAllowUnknownEnumValuesAsMapKeysWhenReadAsNullDisabled() throws Exception { [EOL]     assertFalse(MAPPER.isEnabled(DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL)); [EOL]     try { [EOL]         MAPPER.readValue("{\"map\":{\"NO-SUCH-VALUE\":\"val\"}}", ClassWithEnumMapKey.class); [EOL]         fail("Expected an exception for bogus enum value..."); [EOL]     } catch (JsonMappingException jex) { [EOL]         verifyException(jex, "Can not construct Map key"); [EOL]     } [EOL] }
public void testDoNotAllowUnknownEnumValuesAsMapKeysWhenReadAsNullDisabled() throws Exception { [EOL]     assertFalse(MAPPER.isEnabled(DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL)); [EOL]     try { [EOL]         MAPPER.readValue("{\"map\":{\"NO-SUCH-VALUE\":\"val\"}}", ClassWithEnumMapKey.class); [EOL]         fail("Expected an exception for bogus enum value..."); [EOL]     } catch (JsonMappingException jex) { [EOL]         verifyException(jex, "Can not construct Map key"); [EOL]     } [EOL] }
public void testDoNotAllowUnknownEnumValuesAsMapKeysWhenReadAsNullDisabled() throws Exception { [EOL]     assertFalse(MAPPER.isEnabled(DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL)); [EOL]     try { [EOL]         MAPPER.readValue("{\"map\":{\"NO-SUCH-VALUE\":\"val\"}}", ClassWithEnumMapKey.class); [EOL]         fail("Expected an exception for bogus enum value..."); [EOL]     } catch (JsonMappingException jex) { [EOL]         verifyException(jex, "Can not construct Map key"); [EOL]     } [EOL] }
public void testDoNotAllowUnknownEnumValuesAsMapKeysWhenReadAsNullDisabled() throws Exception { [EOL]     assertFalse(MAPPER.isEnabled(DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL)); [EOL]     try { [EOL]         MAPPER.readValue("{\"map\":{\"NO-SUCH-VALUE\":\"val\"}}", ClassWithEnumMapKey.class); [EOL]         fail("Expected an exception for bogus enum value..."); [EOL]     } catch (JsonMappingException jex) { [EOL]         verifyException(jex, "Can not construct Map key"); [EOL]     } [EOL] }
public void testDoNotAllowUnknownEnumValuesAsMapKeysWhenReadAsNullDisabled() throws Exception { [EOL]     assertFalse(MAPPER.isEnabled(DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL)); [EOL]     try { [EOL]         MAPPER.readValue("{\"map\":{\"NO-SUCH-VALUE\":\"val\"}}", ClassWithEnumMapKey.class); [EOL]         fail("Expected an exception for bogus enum value..."); [EOL]     } catch (JsonMappingException jex) { [EOL]         verifyException(jex, "Can not construct Map key"); [EOL]     } [EOL] }
public void testDateMap() throws Exception { [EOL]     Date date1 = new Date(123456000L); [EOL]     DateFormat fmt = new SimpleDateFormat("EEE, dd MMM yyyy HH:mm:ss zzz", Locale.US); [EOL]     String JSON = "{ \"" + fmt.format(date1) + "\" : \"\", \"" + new Date(0).getTime() + "\" : null }"; [EOL]     HashMap<Date, String> result = MAPPER.readValue(JSON, new TypeReference<HashMap<Date, String>>() { [EOL]     }); [EOL]     assertNotNull(result); [EOL]     assertEquals(HashMap.class, result.getClass()); [EOL]     assertEquals(2, result.size()); [EOL]     assertTrue(result.containsKey(date1)); [EOL]     assertEquals("", result.get(new Date(123456000L))); [EOL]     assertTrue(result.containsKey(new Date(0))); [EOL]     assertNull(result.get(new Date(0))); [EOL] }
public void testDateMap() throws Exception { [EOL]     Date date1 = new Date(123456000L); [EOL]     DateFormat fmt = new SimpleDateFormat("EEE, dd MMM yyyy HH:mm:ss zzz", Locale.US); [EOL]     String JSON = "{ \"" + fmt.format(date1) + "\" : \"\", \"" + new Date(0).getTime() + "\" : null }"; [EOL]     HashMap<Date, String> result = MAPPER.readValue(JSON, new TypeReference<HashMap<Date, String>>() { [EOL]     }); [EOL]     assertNotNull(result); [EOL]     assertEquals(HashMap.class, result.getClass()); [EOL]     assertEquals(2, result.size()); [EOL]     assertTrue(result.containsKey(date1)); [EOL]     assertEquals("", result.get(new Date(123456000L))); [EOL]     assertTrue(result.containsKey(new Date(0))); [EOL]     assertNull(result.get(new Date(0))); [EOL] }
public void testDateMap() throws Exception { [EOL]     Date date1 = new Date(123456000L); [EOL]     DateFormat fmt = new SimpleDateFormat("EEE, dd MMM yyyy HH:mm:ss zzz", Locale.US); [EOL]     String JSON = "{ \"" + fmt.format(date1) + "\" : \"\", \"" + new Date(0).getTime() + "\" : null }"; [EOL]     HashMap<Date, String> result = MAPPER.readValue(JSON, new TypeReference<HashMap<Date, String>>() { [EOL]     }); [EOL]     assertNotNull(result); [EOL]     assertEquals(HashMap.class, result.getClass()); [EOL]     assertEquals(2, result.size()); [EOL]     assertTrue(result.containsKey(date1)); [EOL]     assertEquals("", result.get(new Date(123456000L))); [EOL]     assertTrue(result.containsKey(new Date(0))); [EOL]     assertNull(result.get(new Date(0))); [EOL] }
public void testCalendarMap() throws Exception { [EOL]     Calendar c = Calendar.getInstance(TimeZone.getTimeZone("GMT")); [EOL]     c.setTimeInMillis(123456000L); [EOL]     DateFormat fmt = new SimpleDateFormat("EEE, dd MMM yyyy HH:mm:ss zzz", Locale.US); [EOL]     String JSON = "{ \"" + fmt.format(c.getTime()) + "\" : \"\", \"" + new Date(0).getTime() + "\" : null }"; [EOL]     HashMap<Calendar, String> result = MAPPER.readValue(JSON, new TypeReference<HashMap<Calendar, String>>() { [EOL]     }); [EOL]     assertNotNull(result); [EOL]     assertEquals(HashMap.class, result.getClass()); [EOL]     assertEquals(2, result.size()); [EOL]     assertTrue(result.containsKey(c)); [EOL]     assertEquals("", result.get(c)); [EOL]     c.setTimeInMillis(0); [EOL]     assertTrue(result.containsKey(c)); [EOL]     assertNull(result.get(c)); [EOL] }
public void testCalendarMap() throws Exception { [EOL]     Calendar c = Calendar.getInstance(TimeZone.getTimeZone("GMT")); [EOL]     c.setTimeInMillis(123456000L); [EOL]     DateFormat fmt = new SimpleDateFormat("EEE, dd MMM yyyy HH:mm:ss zzz", Locale.US); [EOL]     String JSON = "{ \"" + fmt.format(c.getTime()) + "\" : \"\", \"" + new Date(0).getTime() + "\" : null }"; [EOL]     HashMap<Calendar, String> result = MAPPER.readValue(JSON, new TypeReference<HashMap<Calendar, String>>() { [EOL]     }); [EOL]     assertNotNull(result); [EOL]     assertEquals(HashMap.class, result.getClass()); [EOL]     assertEquals(2, result.size()); [EOL]     assertTrue(result.containsKey(c)); [EOL]     assertEquals("", result.get(c)); [EOL]     c.setTimeInMillis(0); [EOL]     assertTrue(result.containsKey(c)); [EOL]     assertNull(result.get(c)); [EOL] }
public void testCalendarMap() throws Exception { [EOL]     Calendar c = Calendar.getInstance(TimeZone.getTimeZone("GMT")); [EOL]     c.setTimeInMillis(123456000L); [EOL]     DateFormat fmt = new SimpleDateFormat("EEE, dd MMM yyyy HH:mm:ss zzz", Locale.US); [EOL]     String JSON = "{ \"" + fmt.format(c.getTime()) + "\" : \"\", \"" + new Date(0).getTime() + "\" : null }"; [EOL]     HashMap<Calendar, String> result = MAPPER.readValue(JSON, new TypeReference<HashMap<Calendar, String>>() { [EOL]     }); [EOL]     assertNotNull(result); [EOL]     assertEquals(HashMap.class, result.getClass()); [EOL]     assertEquals(2, result.size()); [EOL]     assertTrue(result.containsKey(c)); [EOL]     assertEquals("", result.get(c)); [EOL]     c.setTimeInMillis(0); [EOL]     assertTrue(result.containsKey(c)); [EOL]     assertNull(result.get(c)); [EOL] }
public void testUUIDKeyMap() throws Exception { [EOL]     UUID key = UUID.nameUUIDFromBytes("foobar".getBytes("UTF-8")); [EOL]     String JSON = "{ \"" + key + "\":4}"; [EOL]     Map<UUID, Object> result = MAPPER.readValue(JSON, new TypeReference<Map<UUID, Object>>() { [EOL]     }); [EOL]     assertNotNull(result); [EOL]     assertEquals(1, result.size()); [EOL]     Object ob = result.keySet().iterator().next(); [EOL]     assertNotNull(ob); [EOL]     assertEquals(UUID.class, ob.getClass()); [EOL]     assertEquals(key, ob); [EOL] }
public void testUUIDKeyMap() throws Exception { [EOL]     UUID key = UUID.nameUUIDFromBytes("foobar".getBytes("UTF-8")); [EOL]     String JSON = "{ \"" + key + "\":4}"; [EOL]     Map<UUID, Object> result = MAPPER.readValue(JSON, new TypeReference<Map<UUID, Object>>() { [EOL]     }); [EOL]     assertNotNull(result); [EOL]     assertEquals(1, result.size()); [EOL]     Object ob = result.keySet().iterator().next(); [EOL]     assertNotNull(ob); [EOL]     assertEquals(UUID.class, ob.getClass()); [EOL]     assertEquals(key, ob); [EOL] }
public void testArray() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     JsonParser jp = m.readTree("[]").traverse(); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     jp.close(); [EOL]     jp = m.readTree("[[]]").traverse(); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     jp.close(); [EOL]     jp = m.readTree("[[ 12.1 ]]").traverse(); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_FLOAT, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     jp.close(); [EOL] }
public void testArray() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     JsonParser jp = m.readTree("[]").traverse(); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     jp.close(); [EOL]     jp = m.readTree("[[]]").traverse(); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     jp.close(); [EOL]     jp = m.readTree("[[ 12.1 ]]").traverse(); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_FLOAT, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     jp.close(); [EOL] }
public void testArray() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     JsonParser jp = m.readTree("[]").traverse(); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     jp.close(); [EOL]     jp = m.readTree("[[]]").traverse(); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     jp.close(); [EOL]     jp = m.readTree("[[ 12.1 ]]").traverse(); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_FLOAT, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     jp.close(); [EOL] }
public void testArray() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     JsonParser jp = m.readTree("[]").traverse(); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     jp.close(); [EOL]     jp = m.readTree("[[]]").traverse(); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     jp.close(); [EOL]     jp = m.readTree("[[ 12.1 ]]").traverse(); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_FLOAT, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     jp.close(); [EOL] }
public void testArray() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     JsonParser jp = m.readTree("[]").traverse(); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     jp.close(); [EOL]     jp = m.readTree("[[]]").traverse(); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     jp.close(); [EOL]     jp = m.readTree("[[ 12.1 ]]").traverse(); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_FLOAT, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     jp.close(); [EOL] }
public void testArray() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     JsonParser jp = m.readTree("[]").traverse(); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     jp.close(); [EOL]     jp = m.readTree("[[]]").traverse(); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     jp.close(); [EOL]     jp = m.readTree("[[ 12.1 ]]").traverse(); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_FLOAT, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     jp.close(); [EOL] }
public void testArray() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     JsonParser jp = m.readTree("[]").traverse(); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     jp.close(); [EOL]     jp = m.readTree("[[]]").traverse(); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     jp.close(); [EOL]     jp = m.readTree("[[ 12.1 ]]").traverse(); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_FLOAT, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     jp.close(); [EOL] }
public void testArray() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     JsonParser jp = m.readTree("[]").traverse(); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     jp.close(); [EOL]     jp = m.readTree("[[]]").traverse(); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     jp.close(); [EOL]     jp = m.readTree("[[ 12.1 ]]").traverse(); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_FLOAT, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     jp.close(); [EOL] }
public void testArray() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     JsonParser jp = m.readTree("[]").traverse(); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     jp.close(); [EOL]     jp = m.readTree("[[]]").traverse(); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     jp.close(); [EOL]     jp = m.readTree("[[ 12.1 ]]").traverse(); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_FLOAT, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     jp.close(); [EOL] }
public void testArray() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     JsonParser jp = m.readTree("[]").traverse(); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     jp.close(); [EOL]     jp = m.readTree("[[]]").traverse(); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     jp.close(); [EOL]     jp = m.readTree("[[ 12.1 ]]").traverse(); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_FLOAT, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     jp.close(); [EOL] }
public void testArray() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     JsonParser jp = m.readTree("[]").traverse(); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     jp.close(); [EOL]     jp = m.readTree("[[]]").traverse(); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     jp.close(); [EOL]     jp = m.readTree("[[ 12.1 ]]").traverse(); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.START_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.VALUE_NUMBER_FLOAT, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     assertToken(JsonToken.END_ARRAY, jp.nextToken()); [EOL]     jp.close(); [EOL] }
public void testBeanArray() throws Exception { [EOL]     List<Bean1> src = new ArrayList<Bean1>(); [EOL]     List<Bean2> b2 = new ArrayList<Bean2>(); [EOL]     b2.add(new Bean2("a")); [EOL]     b2.add(new Bean2("foobar")); [EOL]     src.add(new Bean1(1, 2, b2)); [EOL]     b2 = new ArrayList<Bean2>(); [EOL]     b2.add(null); [EOL]     src.add(new Bean1(4, 5, b2)); [EOL]     StringWriter sw = new StringWriter(); [EOL]     MAPPER.writeValue(sw, src); [EOL]     List<Bean1> result = MAPPER.readValue(sw.toString(), new TypeReference<List<Bean1>>() { [EOL]     }); [EOL]     assertNotNull(result); [EOL]     assertEquals(src, result); [EOL] }
public void testBeanArray() throws Exception { [EOL]     List<Bean1> src = new ArrayList<Bean1>(); [EOL]     List<Bean2> b2 = new ArrayList<Bean2>(); [EOL]     b2.add(new Bean2("a")); [EOL]     b2.add(new Bean2("foobar")); [EOL]     src.add(new Bean1(1, 2, b2)); [EOL]     b2 = new ArrayList<Bean2>(); [EOL]     b2.add(null); [EOL]     src.add(new Bean1(4, 5, b2)); [EOL]     StringWriter sw = new StringWriter(); [EOL]     MAPPER.writeValue(sw, src); [EOL]     List<Bean1> result = MAPPER.readValue(sw.toString(), new TypeReference<List<Bean1>>() { [EOL]     }); [EOL]     assertNotNull(result); [EOL]     assertEquals(src, result); [EOL] }
public void testAllowUnknownEnumValuesForEnumSets() throws Exception { [EOL]     ObjectReader reader = MAPPER.reader(DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL); [EOL]     EnumSet<TestEnum> result = reader.withType(new TypeReference<EnumSet<TestEnum>>() { [EOL]     }).readValue("[\"NO-SUCH-VALUE\"]"); [EOL]     assertEquals(0, result.size()); [EOL] }
public void testAllowUnknownEnumValuesForEnumSets() throws Exception { [EOL]     ObjectReader reader = MAPPER.reader(DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL); [EOL]     EnumSet<TestEnum> result = reader.withType(new TypeReference<EnumSet<TestEnum>>() { [EOL]     }).readValue("[\"NO-SUCH-VALUE\"]"); [EOL]     assertEquals(0, result.size()); [EOL] }
public void testAllowUnknownEnumValuesForEnumSets() throws Exception { [EOL]     ObjectReader reader = MAPPER.reader(DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL); [EOL]     EnumSet<TestEnum> result = reader.withType(new TypeReference<EnumSet<TestEnum>>() { [EOL]     }).readValue("[\"NO-SUCH-VALUE\"]"); [EOL]     assertEquals(0, result.size()); [EOL] }
public void testAllowUnknownEnumValuesForEnumSets() throws Exception { [EOL]     ObjectReader reader = MAPPER.reader(DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL); [EOL]     EnumSet<TestEnum> result = reader.withType(new TypeReference<EnumSet<TestEnum>>() { [EOL]     }).readValue("[\"NO-SUCH-VALUE\"]"); [EOL]     assertEquals(0, result.size()); [EOL] }
public void testAllowUnknownEnumValuesForEnumSets() throws Exception { [EOL]     ObjectReader reader = MAPPER.reader(DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL); [EOL]     EnumSet<TestEnum> result = reader.withType(new TypeReference<EnumSet<TestEnum>>() { [EOL]     }).readValue("[\"NO-SUCH-VALUE\"]"); [EOL]     assertEquals(0, result.size()); [EOL] }
public void testAllowUnknownEnumValuesForEnumSets() throws Exception { [EOL]     ObjectReader reader = MAPPER.reader(DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL); [EOL]     EnumSet<TestEnum> result = reader.withType(new TypeReference<EnumSet<TestEnum>>() { [EOL]     }).readValue("[\"NO-SUCH-VALUE\"]"); [EOL]     assertEquals(0, result.size()); [EOL] }
public void testAllowUnknownEnumValuesForEnumSets() throws Exception { [EOL]     ObjectReader reader = MAPPER.reader(DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL); [EOL]     EnumSet<TestEnum> result = reader.withType(new TypeReference<EnumSet<TestEnum>>() { [EOL]     }).readValue("[\"NO-SUCH-VALUE\"]"); [EOL]     assertEquals(0, result.size()); [EOL] }
public void testAllowUnknownEnumValuesForEnumSets() throws Exception { [EOL]     ObjectReader reader = MAPPER.reader(DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL); [EOL]     EnumSet<TestEnum> result = reader.withType(new TypeReference<EnumSet<TestEnum>>() { [EOL]     }).readValue("[\"NO-SUCH-VALUE\"]"); [EOL]     assertEquals(0, result.size()); [EOL] }
public void testAllowUnknownEnumValuesForEnumSets() throws Exception { [EOL]     ObjectReader reader = MAPPER.reader(DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL); [EOL]     EnumSet<TestEnum> result = reader.withType(new TypeReference<EnumSet<TestEnum>>() { [EOL]     }).readValue("[\"NO-SUCH-VALUE\"]"); [EOL]     assertEquals(0, result.size()); [EOL] }
public void testAllowUnknownEnumValuesForEnumSets() throws Exception { [EOL]     ObjectReader reader = MAPPER.reader(DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL); [EOL]     EnumSet<TestEnum> result = reader.withType(new TypeReference<EnumSet<TestEnum>>() { [EOL]     }).readValue("[\"NO-SUCH-VALUE\"]"); [EOL]     assertEquals(0, result.size()); [EOL] }
public void testAllowUnknownEnumValuesForEnumSets() throws Exception { [EOL]     ObjectReader reader = MAPPER.reader(DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL); [EOL]     EnumSet<TestEnum> result = reader.withType(new TypeReference<EnumSet<TestEnum>>() { [EOL]     }).readValue("[\"NO-SUCH-VALUE\"]"); [EOL]     assertEquals(0, result.size()); [EOL] }
public void testAllowUnknownEnumValuesForEnumSets() throws Exception { [EOL]     ObjectReader reader = MAPPER.reader(DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL); [EOL]     EnumSet<TestEnum> result = reader.withType(new TypeReference<EnumSet<TestEnum>>() { [EOL]     }).readValue("[\"NO-SUCH-VALUE\"]"); [EOL]     assertEquals(0, result.size()); [EOL] }
public void testAllowUnknownEnumValuesForEnumSets() throws Exception { [EOL]     ObjectReader reader = MAPPER.reader(DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL); [EOL]     EnumSet<TestEnum> result = reader.withType(new TypeReference<EnumSet<TestEnum>>() { [EOL]     }).readValue("[\"NO-SUCH-VALUE\"]"); [EOL]     assertEquals(0, result.size()); [EOL] }
public void testAllowUnknownEnumValuesForEnumSets() throws Exception { [EOL]     ObjectReader reader = MAPPER.reader(DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL); [EOL]     EnumSet<TestEnum> result = reader.withType(new TypeReference<EnumSet<TestEnum>>() { [EOL]     }).readValue("[\"NO-SUCH-VALUE\"]"); [EOL]     assertEquals(0, result.size()); [EOL] }
public void testDoNotAllowUnknownEnumValuesAsMapKeysWhenReadAsNullDisabled() throws Exception { [EOL]     assertFalse(MAPPER.isEnabled(DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL)); [EOL]     try { [EOL]         MAPPER.readValue("{\"map\":{\"NO-SUCH-VALUE\":\"val\"}}", ClassWithEnumMapKey.class); [EOL]         fail("Expected an exception for bogus enum value..."); [EOL]     } catch (JsonMappingException jex) { [EOL]         verifyException(jex, "Can not construct Map key"); [EOL]     } [EOL] }
public void testDoNotAllowUnknownEnumValuesAsMapKeysWhenReadAsNullDisabled() throws Exception { [EOL]     assertFalse(MAPPER.isEnabled(DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL)); [EOL]     try { [EOL]         MAPPER.readValue("{\"map\":{\"NO-SUCH-VALUE\":\"val\"}}", ClassWithEnumMapKey.class); [EOL]         fail("Expected an exception for bogus enum value..."); [EOL]     } catch (JsonMappingException jex) { [EOL]         verifyException(jex, "Can not construct Map key"); [EOL]     } [EOL] }
public void testUUIDKeyMap() throws Exception { [EOL]     UUID key = UUID.nameUUIDFromBytes("foobar".getBytes("UTF-8")); [EOL]     String JSON = "{ \"" + key + "\":4}"; [EOL]     Map<UUID, Object> result = MAPPER.readValue(JSON, new TypeReference<Map<UUID, Object>>() { [EOL]     }); [EOL]     assertNotNull(result); [EOL]     assertEquals(1, result.size()); [EOL]     Object ob = result.keySet().iterator().next(); [EOL]     assertNotNull(ob); [EOL]     assertEquals(UUID.class, ob.getClass()); [EOL]     assertEquals(key, ob); [EOL] }
public void testUUIDKeyMap() throws Exception { [EOL]     UUID key = UUID.nameUUIDFromBytes("foobar".getBytes("UTF-8")); [EOL]     String JSON = "{ \"" + key + "\":4}"; [EOL]     Map<UUID, Object> result = MAPPER.readValue(JSON, new TypeReference<Map<UUID, Object>>() { [EOL]     }); [EOL]     assertNotNull(result); [EOL]     assertEquals(1, result.size()); [EOL]     Object ob = result.keySet().iterator().next(); [EOL]     assertNotNull(ob); [EOL]     assertEquals(UUID.class, ob.getClass()); [EOL]     assertEquals(key, ob); [EOL] }
public void testUUIDKeyMap() throws Exception { [EOL]     UUID key = UUID.nameUUIDFromBytes("foobar".getBytes("UTF-8")); [EOL]     String JSON = "{ \"" + key + "\":4}"; [EOL]     Map<UUID, Object> result = MAPPER.readValue(JSON, new TypeReference<Map<UUID, Object>>() { [EOL]     }); [EOL]     assertNotNull(result); [EOL]     assertEquals(1, result.size()); [EOL]     Object ob = result.keySet().iterator().next(); [EOL]     assertNotNull(ob); [EOL]     assertEquals(UUID.class, ob.getClass()); [EOL]     assertEquals(key, ob); [EOL] }
public void testUUIDKeyMap() throws Exception { [EOL]     UUID key = UUID.nameUUIDFromBytes("foobar".getBytes("UTF-8")); [EOL]     String JSON = "{ \"" + key + "\":4}"; [EOL]     Map<UUID, Object> result = MAPPER.readValue(JSON, new TypeReference<Map<UUID, Object>>() { [EOL]     }); [EOL]     assertNotNull(result); [EOL]     assertEquals(1, result.size()); [EOL]     Object ob = result.keySet().iterator().next(); [EOL]     assertNotNull(ob); [EOL]     assertEquals(UUID.class, ob.getClass()); [EOL]     assertEquals(key, ob); [EOL] }
public void testUUIDKeyMap() throws Exception { [EOL]     UUID key = UUID.nameUUIDFromBytes("foobar".getBytes("UTF-8")); [EOL]     String JSON = "{ \"" + key + "\":4}"; [EOL]     Map<UUID, Object> result = MAPPER.readValue(JSON, new TypeReference<Map<UUID, Object>>() { [EOL]     }); [EOL]     assertNotNull(result); [EOL]     assertEquals(1, result.size()); [EOL]     Object ob = result.keySet().iterator().next(); [EOL]     assertNotNull(ob); [EOL]     assertEquals(UUID.class, ob.getClass()); [EOL]     assertEquals(key, ob); [EOL] }
public void testUUIDKeyMap() throws Exception { [EOL]     UUID key = UUID.nameUUIDFromBytes("foobar".getBytes("UTF-8")); [EOL]     String JSON = "{ \"" + key + "\":4}"; [EOL]     Map<UUID, Object> result = MAPPER.readValue(JSON, new TypeReference<Map<UUID, Object>>() { [EOL]     }); [EOL]     assertNotNull(result); [EOL]     assertEquals(1, result.size()); [EOL]     Object ob = result.keySet().iterator().next(); [EOL]     assertNotNull(ob); [EOL]     assertEquals(UUID.class, ob.getClass()); [EOL]     assertEquals(key, ob); [EOL] }
public void testUUIDKeyMap() throws Exception { [EOL]     UUID key = UUID.nameUUIDFromBytes("foobar".getBytes("UTF-8")); [EOL]     String JSON = "{ \"" + key + "\":4}"; [EOL]     Map<UUID, Object> result = MAPPER.readValue(JSON, new TypeReference<Map<UUID, Object>>() { [EOL]     }); [EOL]     assertNotNull(result); [EOL]     assertEquals(1, result.size()); [EOL]     Object ob = result.keySet().iterator().next(); [EOL]     assertNotNull(ob); [EOL]     assertEquals(UUID.class, ob.getClass()); [EOL]     assertEquals(key, ob); [EOL] }
public void testUUIDKeyMap() throws Exception { [EOL]     UUID key = UUID.nameUUIDFromBytes("foobar".getBytes("UTF-8")); [EOL]     String JSON = "{ \"" + key + "\":4}"; [EOL]     Map<UUID, Object> result = MAPPER.readValue(JSON, new TypeReference<Map<UUID, Object>>() { [EOL]     }); [EOL]     assertNotNull(result); [EOL]     assertEquals(1, result.size()); [EOL]     Object ob = result.keySet().iterator().next(); [EOL]     assertNotNull(ob); [EOL]     assertEquals(UUID.class, ob.getClass()); [EOL]     assertEquals(key, ob); [EOL] }
public void testUUIDKeyMap() throws Exception { [EOL]     UUID key = UUID.nameUUIDFromBytes("foobar".getBytes("UTF-8")); [EOL]     String JSON = "{ \"" + key + "\":4}"; [EOL]     Map<UUID, Object> result = MAPPER.readValue(JSON, new TypeReference<Map<UUID, Object>>() { [EOL]     }); [EOL]     assertNotNull(result); [EOL]     assertEquals(1, result.size()); [EOL]     Object ob = result.keySet().iterator().next(); [EOL]     assertNotNull(ob); [EOL]     assertEquals(UUID.class, ob.getClass()); [EOL]     assertEquals(key, ob); [EOL] }
public void testUUIDKeyMap() throws Exception { [EOL]     UUID key = UUID.nameUUIDFromBytes("foobar".getBytes("UTF-8")); [EOL]     String JSON = "{ \"" + key + "\":4}"; [EOL]     Map<UUID, Object> result = MAPPER.readValue(JSON, new TypeReference<Map<UUID, Object>>() { [EOL]     }); [EOL]     assertNotNull(result); [EOL]     assertEquals(1, result.size()); [EOL]     Object ob = result.keySet().iterator().next(); [EOL]     assertNotNull(ob); [EOL]     assertEquals(UUID.class, ob.getClass()); [EOL]     assertEquals(key, ob); [EOL] }
public void testUUIDKeyMap() throws Exception { [EOL]     UUID key = UUID.nameUUIDFromBytes("foobar".getBytes("UTF-8")); [EOL]     String JSON = "{ \"" + key + "\":4}"; [EOL]     Map<UUID, Object> result = MAPPER.readValue(JSON, new TypeReference<Map<UUID, Object>>() { [EOL]     }); [EOL]     assertNotNull(result); [EOL]     assertEquals(1, result.size()); [EOL]     Object ob = result.keySet().iterator().next(); [EOL]     assertNotNull(ob); [EOL]     assertEquals(UUID.class, ob.getClass()); [EOL]     assertEquals(key, ob); [EOL] }
public void testUUIDKeyMap() throws Exception { [EOL]     UUID key = UUID.nameUUIDFromBytes("foobar".getBytes("UTF-8")); [EOL]     String JSON = "{ \"" + key + "\":4}"; [EOL]     Map<UUID, Object> result = MAPPER.readValue(JSON, new TypeReference<Map<UUID, Object>>() { [EOL]     }); [EOL]     assertNotNull(result); [EOL]     assertEquals(1, result.size()); [EOL]     Object ob = result.keySet().iterator().next(); [EOL]     assertNotNull(ob); [EOL]     assertEquals(UUID.class, ob.getClass()); [EOL]     assertEquals(key, ob); [EOL] }
public void testUUIDKeyMap() throws Exception { [EOL]     UUID key = UUID.nameUUIDFromBytes("foobar".getBytes("UTF-8")); [EOL]     String JSON = "{ \"" + key + "\":4}"; [EOL]     Map<UUID, Object> result = MAPPER.readValue(JSON, new TypeReference<Map<UUID, Object>>() { [EOL]     }); [EOL]     assertNotNull(result); [EOL]     assertEquals(1, result.size()); [EOL]     Object ob = result.keySet().iterator().next(); [EOL]     assertNotNull(ob); [EOL]     assertEquals(UUID.class, ob.getClass()); [EOL]     assertEquals(key, ob); [EOL] }
public void testUUIDKeyMap() throws Exception { [EOL]     UUID key = UUID.nameUUIDFromBytes("foobar".getBytes("UTF-8")); [EOL]     String JSON = "{ \"" + key + "\":4}"; [EOL]     Map<UUID, Object> result = MAPPER.readValue(JSON, new TypeReference<Map<UUID, Object>>() { [EOL]     }); [EOL]     assertNotNull(result); [EOL]     assertEquals(1, result.size()); [EOL]     Object ob = result.keySet().iterator().next(); [EOL]     assertNotNull(ob); [EOL]     assertEquals(UUID.class, ob.getClass()); [EOL]     assertEquals(key, ob); [EOL] }
public void testUUIDKeyMap() throws Exception { [EOL]     UUID key = UUID.nameUUIDFromBytes("foobar".getBytes("UTF-8")); [EOL]     String JSON = "{ \"" + key + "\":4}"; [EOL]     Map<UUID, Object> result = MAPPER.readValue(JSON, new TypeReference<Map<UUID, Object>>() { [EOL]     }); [EOL]     assertNotNull(result); [EOL]     assertEquals(1, result.size()); [EOL]     Object ob = result.keySet().iterator().next(); [EOL]     assertNotNull(ob); [EOL]     assertEquals(UUID.class, ob.getClass()); [EOL]     assertEquals(key, ob); [EOL] }
public void testUUIDKeyMap() throws Exception { [EOL]     UUID key = UUID.nameUUIDFromBytes("foobar".getBytes("UTF-8")); [EOL]     String JSON = "{ \"" + key + "\":4}"; [EOL]     Map<UUID, Object> result = MAPPER.readValue(JSON, new TypeReference<Map<UUID, Object>>() { [EOL]     }); [EOL]     assertNotNull(result); [EOL]     assertEquals(1, result.size()); [EOL]     Object ob = result.keySet().iterator().next(); [EOL]     assertNotNull(ob); [EOL]     assertEquals(UUID.class, ob.getClass()); [EOL]     assertEquals(key, ob); [EOL] }
public void testUnknownHandlingIgnoreWithHandlerAndObjectReader() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.clearProblemHandlers(); [EOL]     TestBean result = mapper.reader(TestBean.class).withHandler(new MyHandler()).readValue(new StringReader(JSON_UNKNOWN_FIELD)); [EOL]     assertNotNull(result); [EOL]     assertEquals(1, result._a); [EOL]     assertEquals(-1, result._b); [EOL]     assertEquals("foo:START_ARRAY", result._unknown); [EOL] }
public void testUnknownHandlingIgnoreWithHandlerAndObjectReader() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.clearProblemHandlers(); [EOL]     TestBean result = mapper.reader(TestBean.class).withHandler(new MyHandler()).readValue(new StringReader(JSON_UNKNOWN_FIELD)); [EOL]     assertNotNull(result); [EOL]     assertEquals(1, result._a); [EOL]     assertEquals(-1, result._b); [EOL]     assertEquals("foo:START_ARRAY", result._unknown); [EOL] }
public void testUnknownHandlingIgnoreWithHandlerAndObjectReader() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.clearProblemHandlers(); [EOL]     TestBean result = mapper.reader(TestBean.class).withHandler(new MyHandler()).readValue(new StringReader(JSON_UNKNOWN_FIELD)); [EOL]     assertNotNull(result); [EOL]     assertEquals(1, result._a); [EOL]     assertEquals(-1, result._b); [EOL]     assertEquals("foo:START_ARRAY", result._unknown); [EOL] }
public void testUnknownHandlingIgnoreWithHandlerAndObjectReader() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.clearProblemHandlers(); [EOL]     TestBean result = mapper.reader(TestBean.class).withHandler(new MyHandler()).readValue(new StringReader(JSON_UNKNOWN_FIELD)); [EOL]     assertNotNull(result); [EOL]     assertEquals(1, result._a); [EOL]     assertEquals(-1, result._b); [EOL]     assertEquals("foo:START_ARRAY", result._unknown); [EOL] }
public void testUnknownHandlingIgnoreWithHandlerAndObjectReader() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.clearProblemHandlers(); [EOL]     TestBean result = mapper.reader(TestBean.class).withHandler(new MyHandler()).readValue(new StringReader(JSON_UNKNOWN_FIELD)); [EOL]     assertNotNull(result); [EOL]     assertEquals(1, result._a); [EOL]     assertEquals(-1, result._b); [EOL]     assertEquals("foo:START_ARRAY", result._unknown); [EOL] }
public void testUnknownHandlingIgnoreWithHandlerAndObjectReader() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.clearProblemHandlers(); [EOL]     TestBean result = mapper.reader(TestBean.class).withHandler(new MyHandler()).readValue(new StringReader(JSON_UNKNOWN_FIELD)); [EOL]     assertNotNull(result); [EOL]     assertEquals(1, result._a); [EOL]     assertEquals(-1, result._b); [EOL]     assertEquals("foo:START_ARRAY", result._unknown); [EOL] }
public void testUnknownHandlingIgnoreWithHandlerAndObjectReader() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.clearProblemHandlers(); [EOL]     TestBean result = mapper.reader(TestBean.class).withHandler(new MyHandler()).readValue(new StringReader(JSON_UNKNOWN_FIELD)); [EOL]     assertNotNull(result); [EOL]     assertEquals(1, result._a); [EOL]     assertEquals(-1, result._b); [EOL]     assertEquals("foo:START_ARRAY", result._unknown); [EOL] }
public void testListAsObject() throws Exception { [EOL]     CollectionAsPOJO list = new CollectionAsPOJO(); [EOL]     list.add("a"); [EOL]     list.add("b"); [EOL]     String json = MAPPER.writeValueAsString(list); [EOL]     assertEquals("{\"size\":2,\"values\":[\"a\",\"b\"]}", json); [EOL]     CollectionAsPOJO result = MAPPER.readValue(json, CollectionAsPOJO.class); [EOL]     assertEquals(2, result.size()); [EOL] }
public void testListAsObject() throws Exception { [EOL]     CollectionAsPOJO list = new CollectionAsPOJO(); [EOL]     list.add("a"); [EOL]     list.add("b"); [EOL]     String json = MAPPER.writeValueAsString(list); [EOL]     assertEquals("{\"size\":2,\"values\":[\"a\",\"b\"]}", json); [EOL]     CollectionAsPOJO result = MAPPER.readValue(json, CollectionAsPOJO.class); [EOL]     assertEquals(2, result.size()); [EOL] }
public void testListAsObject() throws Exception { [EOL]     CollectionAsPOJO list = new CollectionAsPOJO(); [EOL]     list.add("a"); [EOL]     list.add("b"); [EOL]     String json = MAPPER.writeValueAsString(list); [EOL]     assertEquals("{\"size\":2,\"values\":[\"a\",\"b\"]}", json); [EOL]     CollectionAsPOJO result = MAPPER.readValue(json, CollectionAsPOJO.class); [EOL]     assertEquals(2, result.size()); [EOL] }
public void testListAsObject() throws Exception { [EOL]     CollectionAsPOJO list = new CollectionAsPOJO(); [EOL]     list.add("a"); [EOL]     list.add("b"); [EOL]     String json = MAPPER.writeValueAsString(list); [EOL]     assertEquals("{\"size\":2,\"values\":[\"a\",\"b\"]}", json); [EOL]     CollectionAsPOJO result = MAPPER.readValue(json, CollectionAsPOJO.class); [EOL]     assertEquals(2, result.size()); [EOL] }
public void testAtomicLong() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     assertEquals("0", serializeAsString(mapper, new AtomicLong(0))); [EOL] }
public void testAtomicLong() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     assertEquals("0", serializeAsString(mapper, new AtomicLong(0))); [EOL] }
public void testSimple() throws Exception { [EOL]     final String JSON = SAMPLE_DOC_JSON_SPEC; [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     for (int type = 0; type < 2; ++type) { [EOL]         JsonNode result; [EOL]         if (type == 0) { [EOL]             result = mapper.readTree(new StringReader(JSON)); [EOL]         } else { [EOL]             result = mapper.readTree(JSON); [EOL]         } [EOL]         assertType(result, ObjectNode.class); [EOL]         assertEquals(1, result.size()); [EOL]         assertTrue(result.isObject()); [EOL]         ObjectNode main = (ObjectNode) result; [EOL]         assertEquals("Image", main.fieldNames().next()); [EOL]         JsonNode ob = main.elements().next(); [EOL]         assertType(ob, ObjectNode.class); [EOL]         ObjectNode imageMap = (ObjectNode) ob; [EOL]         assertEquals(5, imageMap.size()); [EOL]         ob = imageMap.get("Width"); [EOL]         assertTrue(ob.isIntegralNumber()); [EOL]         assertFalse(ob.isFloatingPointNumber()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_WIDTH, ob.intValue()); [EOL]         ob = imageMap.get("Height"); [EOL]         assertTrue(ob.isIntegralNumber()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_HEIGHT, ob.intValue()); [EOL]         ob = imageMap.get("Title"); [EOL]         assertTrue(ob.isTextual()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_TITLE, ob.textValue()); [EOL]         ob = imageMap.get("Thumbnail"); [EOL]         assertType(ob, ObjectNode.class); [EOL]         ObjectNode tn = (ObjectNode) ob; [EOL]         ob = tn.get("Url"); [EOL]         assertTrue(ob.isTextual()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_TN_URL, ob.textValue()); [EOL]         ob = tn.get("Height"); [EOL]         assertTrue(ob.isIntegralNumber()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_TN_HEIGHT, ob.intValue()); [EOL]         ob = tn.get("Width"); [EOL]         assertTrue(ob.isTextual()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_TN_WIDTH, ob.textValue()); [EOL]         ob = imageMap.get("IDs"); [EOL]         assertTrue(ob.isArray()); [EOL]         ArrayNode idList = (ArrayNode) ob; [EOL]         assertEquals(4, idList.size()); [EOL]         assertEquals(4, calcLength(idList.elements())); [EOL]         assertEquals(4, calcLength(idList.iterator())); [EOL]         { [EOL]             int[] values = new int[] { SAMPLE_SPEC_VALUE_TN_ID1, SAMPLE_SPEC_VALUE_TN_ID2, SAMPLE_SPEC_VALUE_TN_ID3, SAMPLE_SPEC_VALUE_TN_ID4 }; [EOL]             for (int i = 0; i < values.length; ++i) { [EOL]                 assertEquals(values[i], idList.get(i).intValue()); [EOL]             } [EOL]             int i = 0; [EOL]             for (JsonNode n : idList) { [EOL]                 assertEquals(values[i], n.intValue()); [EOL]                 ++i; [EOL]             } [EOL]         } [EOL]     } [EOL] }
public void testSetAll() throws Exception { [EOL]     ObjectNode root = MAPPER.createObjectNode(); [EOL]     assertEquals(0, root.size()); [EOL]     HashMap<String, JsonNode> map = new HashMap<String, JsonNode>(); [EOL]     map.put("a", root.numberNode(1)); [EOL]     root.setAll(map); [EOL]     assertEquals(1, root.size()); [EOL]     assertTrue(root.has("a")); [EOL]     assertFalse(root.has("b")); [EOL]     map.put("b", root.numberNode(2)); [EOL]     root.setAll(map); [EOL]     assertEquals(2, root.size()); [EOL]     assertTrue(root.has("a")); [EOL]     assertTrue(root.has("b")); [EOL]     assertEquals(2, root.path("b").intValue()); [EOL]     ObjectNode root2 = MAPPER.createObjectNode(); [EOL]     root2.setAll(root); [EOL]     assertEquals(2, root.size()); [EOL]     assertEquals(2, root2.size()); [EOL]     root2.setAll(root); [EOL]     assertEquals(2, root.size()); [EOL]     assertEquals(2, root2.size()); [EOL]     ObjectNode root3 = MAPPER.createObjectNode(); [EOL]     root3.put("a", 2); [EOL]     root3.put("c", 3); [EOL]     assertEquals(2, root3.path("a").intValue()); [EOL]     root3.setAll(root2); [EOL]     assertEquals(3, root3.size()); [EOL]     assertEquals(1, root3.path("a").intValue()); [EOL] }
public void testSetAll() throws Exception { [EOL]     ObjectNode root = MAPPER.createObjectNode(); [EOL]     assertEquals(0, root.size()); [EOL]     HashMap<String, JsonNode> map = new HashMap<String, JsonNode>(); [EOL]     map.put("a", root.numberNode(1)); [EOL]     root.setAll(map); [EOL]     assertEquals(1, root.size()); [EOL]     assertTrue(root.has("a")); [EOL]     assertFalse(root.has("b")); [EOL]     map.put("b", root.numberNode(2)); [EOL]     root.setAll(map); [EOL]     assertEquals(2, root.size()); [EOL]     assertTrue(root.has("a")); [EOL]     assertTrue(root.has("b")); [EOL]     assertEquals(2, root.path("b").intValue()); [EOL]     ObjectNode root2 = MAPPER.createObjectNode(); [EOL]     root2.setAll(root); [EOL]     assertEquals(2, root.size()); [EOL]     assertEquals(2, root2.size()); [EOL]     root2.setAll(root); [EOL]     assertEquals(2, root.size()); [EOL]     assertEquals(2, root2.size()); [EOL]     ObjectNode root3 = MAPPER.createObjectNode(); [EOL]     root3.put("a", 2); [EOL]     root3.put("c", 3); [EOL]     assertEquals(2, root3.path("a").intValue()); [EOL]     root3.setAll(root2); [EOL]     assertEquals(3, root3.size()); [EOL]     assertEquals(1, root3.path("a").intValue()); [EOL] }
public void testNonMatching() throws Exception { [EOL]     JsonNode root = _buildTree(); [EOL]     assertNull(root.findValue("boogaboo")); [EOL]     assertNull(root.findParent("boogaboo")); [EOL]     JsonNode n = root.findPath("boogaboo"); [EOL]     assertNotNull(n); [EOL]     assertTrue(n.isMissingNode()); [EOL]     assertTrue(root.findValues("boogaboo").isEmpty()); [EOL]     assertTrue(root.findParents("boogaboo").isEmpty()); [EOL] }
public void testNonMatching() throws Exception { [EOL]     JsonNode root = _buildTree(); [EOL]     assertNull(root.findValue("boogaboo")); [EOL]     assertNull(root.findParent("boogaboo")); [EOL]     JsonNode n = root.findPath("boogaboo"); [EOL]     assertNotNull(n); [EOL]     assertTrue(n.isMissingNode()); [EOL]     assertTrue(root.findValues("boogaboo").isEmpty()); [EOL]     assertTrue(root.findParents("boogaboo").isEmpty()); [EOL] }
public void testNonMatching() throws Exception { [EOL]     JsonNode root = _buildTree(); [EOL]     assertNull(root.findValue("boogaboo")); [EOL]     assertNull(root.findParent("boogaboo")); [EOL]     JsonNode n = root.findPath("boogaboo"); [EOL]     assertNotNull(n); [EOL]     assertTrue(n.isMissingNode()); [EOL]     assertTrue(root.findValues("boogaboo").isEmpty()); [EOL]     assertTrue(root.findParents("boogaboo").isEmpty()); [EOL] }
public void testNonMatching() throws Exception { [EOL]     JsonNode root = _buildTree(); [EOL]     assertNull(root.findValue("boogaboo")); [EOL]     assertNull(root.findParent("boogaboo")); [EOL]     JsonNode n = root.findPath("boogaboo"); [EOL]     assertNotNull(n); [EOL]     assertTrue(n.isMissingNode()); [EOL]     assertTrue(root.findValues("boogaboo").isEmpty()); [EOL]     assertTrue(root.findParents("boogaboo").isEmpty()); [EOL] }
public void testNonMatching() throws Exception { [EOL]     JsonNode root = _buildTree(); [EOL]     assertNull(root.findValue("boogaboo")); [EOL]     assertNull(root.findParent("boogaboo")); [EOL]     JsonNode n = root.findPath("boogaboo"); [EOL]     assertNotNull(n); [EOL]     assertTrue(n.isMissingNode()); [EOL]     assertTrue(root.findValues("boogaboo").isEmpty()); [EOL]     assertTrue(root.findParents("boogaboo").isEmpty()); [EOL] }
public void testNonMatching() throws Exception { [EOL]     JsonNode root = _buildTree(); [EOL]     assertNull(root.findValue("boogaboo")); [EOL]     assertNull(root.findParent("boogaboo")); [EOL]     JsonNode n = root.findPath("boogaboo"); [EOL]     assertNotNull(n); [EOL]     assertTrue(n.isMissingNode()); [EOL]     assertTrue(root.findValues("boogaboo").isEmpty()); [EOL]     assertTrue(root.findParents("boogaboo").isEmpty()); [EOL] }
public void testNonMatching() throws Exception { [EOL]     JsonNode root = _buildTree(); [EOL]     assertNull(root.findValue("boogaboo")); [EOL]     assertNull(root.findParent("boogaboo")); [EOL]     JsonNode n = root.findPath("boogaboo"); [EOL]     assertNotNull(n); [EOL]     assertTrue(n.isMissingNode()); [EOL]     assertTrue(root.findValues("boogaboo").isEmpty()); [EOL]     assertTrue(root.findParents("boogaboo").isEmpty()); [EOL] }
public void testNonMatching() throws Exception { [EOL]     JsonNode root = _buildTree(); [EOL]     assertNull(root.findValue("boogaboo")); [EOL]     assertNull(root.findParent("boogaboo")); [EOL]     JsonNode n = root.findPath("boogaboo"); [EOL]     assertNotNull(n); [EOL]     assertTrue(n.isMissingNode()); [EOL]     assertTrue(root.findValues("boogaboo").isEmpty()); [EOL]     assertTrue(root.findParents("boogaboo").isEmpty()); [EOL] }
public void testSetAll() throws Exception { [EOL]     ObjectNode root = MAPPER.createObjectNode(); [EOL]     assertEquals(0, root.size()); [EOL]     HashMap<String, JsonNode> map = new HashMap<String, JsonNode>(); [EOL]     map.put("a", root.numberNode(1)); [EOL]     root.setAll(map); [EOL]     assertEquals(1, root.size()); [EOL]     assertTrue(root.has("a")); [EOL]     assertFalse(root.has("b")); [EOL]     map.put("b", root.numberNode(2)); [EOL]     root.setAll(map); [EOL]     assertEquals(2, root.size()); [EOL]     assertTrue(root.has("a")); [EOL]     assertTrue(root.has("b")); [EOL]     assertEquals(2, root.path("b").intValue()); [EOL]     ObjectNode root2 = MAPPER.createObjectNode(); [EOL]     root2.setAll(root); [EOL]     assertEquals(2, root.size()); [EOL]     assertEquals(2, root2.size()); [EOL]     root2.setAll(root); [EOL]     assertEquals(2, root.size()); [EOL]     assertEquals(2, root2.size()); [EOL]     ObjectNode root3 = MAPPER.createObjectNode(); [EOL]     root3.put("a", 2); [EOL]     root3.put("c", 3); [EOL]     assertEquals(2, root3.path("a").intValue()); [EOL]     root3.setAll(root2); [EOL]     assertEquals(3, root3.size()); [EOL]     assertEquals(1, root3.path("a").intValue()); [EOL] }
public void testSetAll() throws Exception { [EOL]     ObjectNode root = MAPPER.createObjectNode(); [EOL]     assertEquals(0, root.size()); [EOL]     HashMap<String, JsonNode> map = new HashMap<String, JsonNode>(); [EOL]     map.put("a", root.numberNode(1)); [EOL]     root.setAll(map); [EOL]     assertEquals(1, root.size()); [EOL]     assertTrue(root.has("a")); [EOL]     assertFalse(root.has("b")); [EOL]     map.put("b", root.numberNode(2)); [EOL]     root.setAll(map); [EOL]     assertEquals(2, root.size()); [EOL]     assertTrue(root.has("a")); [EOL]     assertTrue(root.has("b")); [EOL]     assertEquals(2, root.path("b").intValue()); [EOL]     ObjectNode root2 = MAPPER.createObjectNode(); [EOL]     root2.setAll(root); [EOL]     assertEquals(2, root.size()); [EOL]     assertEquals(2, root2.size()); [EOL]     root2.setAll(root); [EOL]     assertEquals(2, root.size()); [EOL]     assertEquals(2, root2.size()); [EOL]     ObjectNode root3 = MAPPER.createObjectNode(); [EOL]     root3.put("a", 2); [EOL]     root3.put("c", 3); [EOL]     assertEquals(2, root3.path("a").intValue()); [EOL]     root3.setAll(root2); [EOL]     assertEquals(3, root3.size()); [EOL]     assertEquals(1, root3.path("a").intValue()); [EOL] }
public void testSetAll() throws Exception { [EOL]     ObjectNode root = MAPPER.createObjectNode(); [EOL]     assertEquals(0, root.size()); [EOL]     HashMap<String, JsonNode> map = new HashMap<String, JsonNode>(); [EOL]     map.put("a", root.numberNode(1)); [EOL]     root.setAll(map); [EOL]     assertEquals(1, root.size()); [EOL]     assertTrue(root.has("a")); [EOL]     assertFalse(root.has("b")); [EOL]     map.put("b", root.numberNode(2)); [EOL]     root.setAll(map); [EOL]     assertEquals(2, root.size()); [EOL]     assertTrue(root.has("a")); [EOL]     assertTrue(root.has("b")); [EOL]     assertEquals(2, root.path("b").intValue()); [EOL]     ObjectNode root2 = MAPPER.createObjectNode(); [EOL]     root2.setAll(root); [EOL]     assertEquals(2, root.size()); [EOL]     assertEquals(2, root2.size()); [EOL]     root2.setAll(root); [EOL]     assertEquals(2, root.size()); [EOL]     assertEquals(2, root2.size()); [EOL]     ObjectNode root3 = MAPPER.createObjectNode(); [EOL]     root3.put("a", 2); [EOL]     root3.put("c", 3); [EOL]     assertEquals(2, root3.path("a").intValue()); [EOL]     root3.setAll(root2); [EOL]     assertEquals(3, root3.size()); [EOL]     assertEquals(1, root3.path("a").intValue()); [EOL] }
public void testSetAll() throws Exception { [EOL]     ObjectNode root = MAPPER.createObjectNode(); [EOL]     assertEquals(0, root.size()); [EOL]     HashMap<String, JsonNode> map = new HashMap<String, JsonNode>(); [EOL]     map.put("a", root.numberNode(1)); [EOL]     root.setAll(map); [EOL]     assertEquals(1, root.size()); [EOL]     assertTrue(root.has("a")); [EOL]     assertFalse(root.has("b")); [EOL]     map.put("b", root.numberNode(2)); [EOL]     root.setAll(map); [EOL]     assertEquals(2, root.size()); [EOL]     assertTrue(root.has("a")); [EOL]     assertTrue(root.has("b")); [EOL]     assertEquals(2, root.path("b").intValue()); [EOL]     ObjectNode root2 = MAPPER.createObjectNode(); [EOL]     root2.setAll(root); [EOL]     assertEquals(2, root.size()); [EOL]     assertEquals(2, root2.size()); [EOL]     root2.setAll(root); [EOL]     assertEquals(2, root.size()); [EOL]     assertEquals(2, root2.size()); [EOL]     ObjectNode root3 = MAPPER.createObjectNode(); [EOL]     root3.put("a", 2); [EOL]     root3.put("c", 3); [EOL]     assertEquals(2, root3.path("a").intValue()); [EOL]     root3.setAll(root2); [EOL]     assertEquals(3, root3.size()); [EOL]     assertEquals(1, root3.path("a").intValue()); [EOL] }
public void testSetAll() throws Exception { [EOL]     ObjectNode root = MAPPER.createObjectNode(); [EOL]     assertEquals(0, root.size()); [EOL]     HashMap<String, JsonNode> map = new HashMap<String, JsonNode>(); [EOL]     map.put("a", root.numberNode(1)); [EOL]     root.setAll(map); [EOL]     assertEquals(1, root.size()); [EOL]     assertTrue(root.has("a")); [EOL]     assertFalse(root.has("b")); [EOL]     map.put("b", root.numberNode(2)); [EOL]     root.setAll(map); [EOL]     assertEquals(2, root.size()); [EOL]     assertTrue(root.has("a")); [EOL]     assertTrue(root.has("b")); [EOL]     assertEquals(2, root.path("b").intValue()); [EOL]     ObjectNode root2 = MAPPER.createObjectNode(); [EOL]     root2.setAll(root); [EOL]     assertEquals(2, root.size()); [EOL]     assertEquals(2, root2.size()); [EOL]     root2.setAll(root); [EOL]     assertEquals(2, root.size()); [EOL]     assertEquals(2, root2.size()); [EOL]     ObjectNode root3 = MAPPER.createObjectNode(); [EOL]     root3.put("a", 2); [EOL]     root3.put("c", 3); [EOL]     assertEquals(2, root3.path("a").intValue()); [EOL]     root3.setAll(root2); [EOL]     assertEquals(3, root3.size()); [EOL]     assertEquals(1, root3.path("a").intValue()); [EOL] }
public void testSimple() throws Exception { [EOL]     final String JSON = SAMPLE_DOC_JSON_SPEC; [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     for (int type = 0; type < 2; ++type) { [EOL]         JsonNode result; [EOL]         if (type == 0) { [EOL]             result = mapper.readTree(new StringReader(JSON)); [EOL]         } else { [EOL]             result = mapper.readTree(JSON); [EOL]         } [EOL]         assertType(result, ObjectNode.class); [EOL]         assertEquals(1, result.size()); [EOL]         assertTrue(result.isObject()); [EOL]         ObjectNode main = (ObjectNode) result; [EOL]         assertEquals("Image", main.fieldNames().next()); [EOL]         JsonNode ob = main.elements().next(); [EOL]         assertType(ob, ObjectNode.class); [EOL]         ObjectNode imageMap = (ObjectNode) ob; [EOL]         assertEquals(5, imageMap.size()); [EOL]         ob = imageMap.get("Width"); [EOL]         assertTrue(ob.isIntegralNumber()); [EOL]         assertFalse(ob.isFloatingPointNumber()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_WIDTH, ob.intValue()); [EOL]         ob = imageMap.get("Height"); [EOL]         assertTrue(ob.isIntegralNumber()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_HEIGHT, ob.intValue()); [EOL]         ob = imageMap.get("Title"); [EOL]         assertTrue(ob.isTextual()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_TITLE, ob.textValue()); [EOL]         ob = imageMap.get("Thumbnail"); [EOL]         assertType(ob, ObjectNode.class); [EOL]         ObjectNode tn = (ObjectNode) ob; [EOL]         ob = tn.get("Url"); [EOL]         assertTrue(ob.isTextual()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_TN_URL, ob.textValue()); [EOL]         ob = tn.get("Height"); [EOL]         assertTrue(ob.isIntegralNumber()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_TN_HEIGHT, ob.intValue()); [EOL]         ob = tn.get("Width"); [EOL]         assertTrue(ob.isTextual()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_TN_WIDTH, ob.textValue()); [EOL]         ob = imageMap.get("IDs"); [EOL]         assertTrue(ob.isArray()); [EOL]         ArrayNode idList = (ArrayNode) ob; [EOL]         assertEquals(4, idList.size()); [EOL]         assertEquals(4, calcLength(idList.elements())); [EOL]         assertEquals(4, calcLength(idList.iterator())); [EOL]         { [EOL]             int[] values = new int[] { SAMPLE_SPEC_VALUE_TN_ID1, SAMPLE_SPEC_VALUE_TN_ID2, SAMPLE_SPEC_VALUE_TN_ID3, SAMPLE_SPEC_VALUE_TN_ID4 }; [EOL]             for (int i = 0; i < values.length; ++i) { [EOL]                 assertEquals(values[i], idList.get(i).intValue()); [EOL]             } [EOL]             int i = 0; [EOL]             for (JsonNode n : idList) { [EOL]                 assertEquals(values[i], n.intValue()); [EOL]                 ++i; [EOL]             } [EOL]         } [EOL]     } [EOL] }
public void testSimple() throws Exception { [EOL]     final String JSON = SAMPLE_DOC_JSON_SPEC; [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     for (int type = 0; type < 2; ++type) { [EOL]         JsonNode result; [EOL]         if (type == 0) { [EOL]             result = mapper.readTree(new StringReader(JSON)); [EOL]         } else { [EOL]             result = mapper.readTree(JSON); [EOL]         } [EOL]         assertType(result, ObjectNode.class); [EOL]         assertEquals(1, result.size()); [EOL]         assertTrue(result.isObject()); [EOL]         ObjectNode main = (ObjectNode) result; [EOL]         assertEquals("Image", main.fieldNames().next()); [EOL]         JsonNode ob = main.elements().next(); [EOL]         assertType(ob, ObjectNode.class); [EOL]         ObjectNode imageMap = (ObjectNode) ob; [EOL]         assertEquals(5, imageMap.size()); [EOL]         ob = imageMap.get("Width"); [EOL]         assertTrue(ob.isIntegralNumber()); [EOL]         assertFalse(ob.isFloatingPointNumber()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_WIDTH, ob.intValue()); [EOL]         ob = imageMap.get("Height"); [EOL]         assertTrue(ob.isIntegralNumber()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_HEIGHT, ob.intValue()); [EOL]         ob = imageMap.get("Title"); [EOL]         assertTrue(ob.isTextual()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_TITLE, ob.textValue()); [EOL]         ob = imageMap.get("Thumbnail"); [EOL]         assertType(ob, ObjectNode.class); [EOL]         ObjectNode tn = (ObjectNode) ob; [EOL]         ob = tn.get("Url"); [EOL]         assertTrue(ob.isTextual()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_TN_URL, ob.textValue()); [EOL]         ob = tn.get("Height"); [EOL]         assertTrue(ob.isIntegralNumber()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_TN_HEIGHT, ob.intValue()); [EOL]         ob = tn.get("Width"); [EOL]         assertTrue(ob.isTextual()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_TN_WIDTH, ob.textValue()); [EOL]         ob = imageMap.get("IDs"); [EOL]         assertTrue(ob.isArray()); [EOL]         ArrayNode idList = (ArrayNode) ob; [EOL]         assertEquals(4, idList.size()); [EOL]         assertEquals(4, calcLength(idList.elements())); [EOL]         assertEquals(4, calcLength(idList.iterator())); [EOL]         { [EOL]             int[] values = new int[] { SAMPLE_SPEC_VALUE_TN_ID1, SAMPLE_SPEC_VALUE_TN_ID2, SAMPLE_SPEC_VALUE_TN_ID3, SAMPLE_SPEC_VALUE_TN_ID4 }; [EOL]             for (int i = 0; i < values.length; ++i) { [EOL]                 assertEquals(values[i], idList.get(i).intValue()); [EOL]             } [EOL]             int i = 0; [EOL]             for (JsonNode n : idList) { [EOL]                 assertEquals(values[i], n.intValue()); [EOL]                 ++i; [EOL]             } [EOL]         } [EOL]     } [EOL] }
public void testDeserializeSimple() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     JsonSchema schema = mapper.generateJsonSchema(Schemable.class); [EOL]     assertNotNull(schema); [EOL]     String schemaStr = mapper.writeValueAsString(schema); [EOL]     assertNotNull(schemaStr); [EOL]     JsonSchema result = mapper.readValue(schemaStr, JsonSchema.class); [EOL]     assertEquals("Trying to read from '" + schemaStr + "'", schema, result); [EOL] }
public void testDeserializeSimple() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     JsonSchema schema = mapper.generateJsonSchema(Schemable.class); [EOL]     assertNotNull(schema); [EOL]     String schemaStr = mapper.writeValueAsString(schema); [EOL]     assertNotNull(schemaStr); [EOL]     JsonSchema result = mapper.readValue(schemaStr, JsonSchema.class); [EOL]     assertEquals("Trying to read from '" + schemaStr + "'", schema, result); [EOL] }
public void testWithNested() { [EOL]     ObjectNode root = mapper.createObjectNode(); [EOL]     ObjectNode leafObject = root.putObject("ob"); [EOL]     ArrayNode leafArray = root.putArray("arr"); [EOL]     assertEquals(2, root.size()); [EOL]     leafObject.put("a", 3); [EOL]     assertEquals(1, leafObject.size()); [EOL]     leafArray.add(true); [EOL]     assertEquals(1, leafArray.size()); [EOL]     ObjectNode copy = root.deepCopy(); [EOL]     assertNotSame(copy, root); [EOL]     assertEquals(2, copy.size()); [EOL]     leafObject.put("x", 9); [EOL]     assertEquals(2, leafObject.size()); [EOL]     assertEquals(1, copy.get("ob").size()); [EOL]     leafArray.add("foobar"); [EOL]     assertEquals(2, leafArray.size()); [EOL]     assertEquals(1, copy.get("arr").size()); [EOL]     ((ObjectNode) copy.get("ob")).put("c", 3); [EOL]     assertEquals(2, leafObject.size()); [EOL]     assertEquals(2, copy.get("ob").size()); [EOL]     ((ArrayNode) copy.get("arr")).add(13); [EOL]     assertEquals(2, leafArray.size()); [EOL]     assertEquals(2, copy.get("arr").size()); [EOL] }
public void testWithNested() { [EOL]     ObjectNode root = mapper.createObjectNode(); [EOL]     ObjectNode leafObject = root.putObject("ob"); [EOL]     ArrayNode leafArray = root.putArray("arr"); [EOL]     assertEquals(2, root.size()); [EOL]     leafObject.put("a", 3); [EOL]     assertEquals(1, leafObject.size()); [EOL]     leafArray.add(true); [EOL]     assertEquals(1, leafArray.size()); [EOL]     ObjectNode copy = root.deepCopy(); [EOL]     assertNotSame(copy, root); [EOL]     assertEquals(2, copy.size()); [EOL]     leafObject.put("x", 9); [EOL]     assertEquals(2, leafObject.size()); [EOL]     assertEquals(1, copy.get("ob").size()); [EOL]     leafArray.add("foobar"); [EOL]     assertEquals(2, leafArray.size()); [EOL]     assertEquals(1, copy.get("arr").size()); [EOL]     ((ObjectNode) copy.get("ob")).put("c", 3); [EOL]     assertEquals(2, leafObject.size()); [EOL]     assertEquals(2, copy.get("ob").size()); [EOL]     ((ArrayNode) copy.get("arr")).add(13); [EOL]     assertEquals(2, leafArray.size()); [EOL]     assertEquals(2, copy.get("arr").size()); [EOL] }
public void testWithNested() { [EOL]     ObjectNode root = mapper.createObjectNode(); [EOL]     ObjectNode leafObject = root.putObject("ob"); [EOL]     ArrayNode leafArray = root.putArray("arr"); [EOL]     assertEquals(2, root.size()); [EOL]     leafObject.put("a", 3); [EOL]     assertEquals(1, leafObject.size()); [EOL]     leafArray.add(true); [EOL]     assertEquals(1, leafArray.size()); [EOL]     ObjectNode copy = root.deepCopy(); [EOL]     assertNotSame(copy, root); [EOL]     assertEquals(2, copy.size()); [EOL]     leafObject.put("x", 9); [EOL]     assertEquals(2, leafObject.size()); [EOL]     assertEquals(1, copy.get("ob").size()); [EOL]     leafArray.add("foobar"); [EOL]     assertEquals(2, leafArray.size()); [EOL]     assertEquals(1, copy.get("arr").size()); [EOL]     ((ObjectNode) copy.get("ob")).put("c", 3); [EOL]     assertEquals(2, leafObject.size()); [EOL]     assertEquals(2, copy.get("ob").size()); [EOL]     ((ArrayNode) copy.get("arr")).add(13); [EOL]     assertEquals(2, leafArray.size()); [EOL]     assertEquals(2, copy.get("arr").size()); [EOL] }
public void testWithNested() { [EOL]     ObjectNode root = mapper.createObjectNode(); [EOL]     ObjectNode leafObject = root.putObject("ob"); [EOL]     ArrayNode leafArray = root.putArray("arr"); [EOL]     assertEquals(2, root.size()); [EOL]     leafObject.put("a", 3); [EOL]     assertEquals(1, leafObject.size()); [EOL]     leafArray.add(true); [EOL]     assertEquals(1, leafArray.size()); [EOL]     ObjectNode copy = root.deepCopy(); [EOL]     assertNotSame(copy, root); [EOL]     assertEquals(2, copy.size()); [EOL]     leafObject.put("x", 9); [EOL]     assertEquals(2, leafObject.size()); [EOL]     assertEquals(1, copy.get("ob").size()); [EOL]     leafArray.add("foobar"); [EOL]     assertEquals(2, leafArray.size()); [EOL]     assertEquals(1, copy.get("arr").size()); [EOL]     ((ObjectNode) copy.get("ob")).put("c", 3); [EOL]     assertEquals(2, leafObject.size()); [EOL]     assertEquals(2, copy.get("ob").size()); [EOL]     ((ArrayNode) copy.get("arr")).add(13); [EOL]     assertEquals(2, leafArray.size()); [EOL]     assertEquals(2, copy.get("arr").size()); [EOL] }
public void testAnnotatedCtor() throws Exception { [EOL]     ObjectMapper mapper = _mapperWithAnnotatedContextual(); [EOL]     ContextualCtorBean bean = mapper.readValue("{\"a\":\"foo\",\"b\":\"bar\"}", ContextualCtorBean.class); [EOL]     assertEquals("CtorA=foo", bean.a); [EOL]     assertEquals("CtorB=bar", bean.b); [EOL]     bean = mapper.readValue("{\"a\":\"1\",\"b\":\"0\"}", ContextualCtorBean.class); [EOL]     assertEquals("CtorA=1", bean.a); [EOL]     assertEquals("CtorB=0", bean.b); [EOL] }
public void testAnnotatedCtor() throws Exception { [EOL]     ObjectMapper mapper = _mapperWithAnnotatedContextual(); [EOL]     ContextualCtorBean bean = mapper.readValue("{\"a\":\"foo\",\"b\":\"bar\"}", ContextualCtorBean.class); [EOL]     assertEquals("CtorA=foo", bean.a); [EOL]     assertEquals("CtorB=bar", bean.b); [EOL]     bean = mapper.readValue("{\"a\":\"1\",\"b\":\"0\"}", ContextualCtorBean.class); [EOL]     assertEquals("CtorA=1", bean.a); [EOL]     assertEquals("CtorB=0", bean.b); [EOL] }
public void testAnnotatedCtor() throws Exception { [EOL]     ObjectMapper mapper = _mapperWithAnnotatedContextual(); [EOL]     ContextualCtorBean bean = mapper.readValue("{\"a\":\"foo\",\"b\":\"bar\"}", ContextualCtorBean.class); [EOL]     assertEquals("CtorA=foo", bean.a); [EOL]     assertEquals("CtorB=bar", bean.b); [EOL]     bean = mapper.readValue("{\"a\":\"1\",\"b\":\"0\"}", ContextualCtorBean.class); [EOL]     assertEquals("CtorA=1", bean.a); [EOL]     assertEquals("CtorB=0", bean.b); [EOL] }
public void testSimpleProxied() throws Exception { [EOL]     Enhancer enh = new Enhancer(); [EOL]     enh.setInterfaces(new Class[] { BeanInterface.class }); [EOL]     enh.setCallback(new MethodInterceptor() { [EOL]  [EOL]         @Override [EOL]         public Object intercept(Object obj, Method method, Object[] args, MethodProxy proxy) throws Throwable { [EOL]             if ("getX".equals(method.getName())) { [EOL]                 return Integer.valueOf(13); [EOL]             } [EOL]             return proxy.invokeSuper(obj, args); [EOL]         } [EOL]     }); [EOL]     BeanInterface bean = (BeanInterface) enh.create(); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     Map<String, Object> result = writeAndMap(mapper, bean); [EOL]     assertEquals(1, result.size()); [EOL]     assertEquals(Integer.valueOf(13), result.get("x")); [EOL] }
public void testSimpleProxied() throws Exception { [EOL]     Enhancer enh = new Enhancer(); [EOL]     enh.setInterfaces(new Class[] { BeanInterface.class }); [EOL]     enh.setCallback(new MethodInterceptor() { [EOL]  [EOL]         @Override [EOL]         public Object intercept(Object obj, Method method, Object[] args, MethodProxy proxy) throws Throwable { [EOL]             if ("getX".equals(method.getName())) { [EOL]                 return Integer.valueOf(13); [EOL]             } [EOL]             return proxy.invokeSuper(obj, args); [EOL]         } [EOL]     }); [EOL]     BeanInterface bean = (BeanInterface) enh.create(); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     Map<String, Object> result = writeAndMap(mapper, bean); [EOL]     assertEquals(1, result.size()); [EOL]     assertEquals(Integer.valueOf(13), result.get("x")); [EOL] }
public void testSimpleProxied() throws Exception { [EOL]     Enhancer enh = new Enhancer(); [EOL]     enh.setInterfaces(new Class[] { BeanInterface.class }); [EOL]     enh.setCallback(new MethodInterceptor() { [EOL]  [EOL]         @Override [EOL]         public Object intercept(Object obj, Method method, Object[] args, MethodProxy proxy) throws Throwable { [EOL]             if ("getX".equals(method.getName())) { [EOL]                 return Integer.valueOf(13); [EOL]             } [EOL]             return proxy.invokeSuper(obj, args); [EOL]         } [EOL]     }); [EOL]     BeanInterface bean = (BeanInterface) enh.create(); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     Map<String, Object> result = writeAndMap(mapper, bean); [EOL]     assertEquals(1, result.size()); [EOL]     assertEquals(Integer.valueOf(13), result.get("x")); [EOL] }
public void testSimpleProxied() throws Exception { [EOL]     Enhancer enh = new Enhancer(); [EOL]     enh.setInterfaces(new Class[] { BeanInterface.class }); [EOL]     enh.setCallback(new MethodInterceptor() { [EOL]  [EOL]         @Override [EOL]         public Object intercept(Object obj, Method method, Object[] args, MethodProxy proxy) throws Throwable { [EOL]             if ("getX".equals(method.getName())) { [EOL]                 return Integer.valueOf(13); [EOL]             } [EOL]             return proxy.invokeSuper(obj, args); [EOL]         } [EOL]     }); [EOL]     BeanInterface bean = (BeanInterface) enh.create(); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     Map<String, Object> result = writeAndMap(mapper, bean); [EOL]     assertEquals(1, result.size()); [EOL]     assertEquals(Integer.valueOf(13), result.get("x")); [EOL] }
public void testSimpleProxied() throws Exception { [EOL]     Enhancer enh = new Enhancer(); [EOL]     enh.setInterfaces(new Class[] { BeanInterface.class }); [EOL]     enh.setCallback(new MethodInterceptor() { [EOL]  [EOL]         @Override [EOL]         public Object intercept(Object obj, Method method, Object[] args, MethodProxy proxy) throws Throwable { [EOL]             if ("getX".equals(method.getName())) { [EOL]                 return Integer.valueOf(13); [EOL]             } [EOL]             return proxy.invokeSuper(obj, args); [EOL]         } [EOL]     }); [EOL]     BeanInterface bean = (BeanInterface) enh.create(); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     Map<String, Object> result = writeAndMap(mapper, bean); [EOL]     assertEquals(1, result.size()); [EOL]     assertEquals(Integer.valueOf(13), result.get("x")); [EOL] }
public void testSimpleProxied() throws Exception { [EOL]     Enhancer enh = new Enhancer(); [EOL]     enh.setInterfaces(new Class[] { BeanInterface.class }); [EOL]     enh.setCallback(new MethodInterceptor() { [EOL]  [EOL]         @Override [EOL]         public Object intercept(Object obj, Method method, Object[] args, MethodProxy proxy) throws Throwable { [EOL]             if ("getX".equals(method.getName())) { [EOL]                 return Integer.valueOf(13); [EOL]             } [EOL]             return proxy.invokeSuper(obj, args); [EOL]         } [EOL]     }); [EOL]     BeanInterface bean = (BeanInterface) enh.create(); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     Map<String, Object> result = writeAndMap(mapper, bean); [EOL]     assertEquals(1, result.size()); [EOL]     assertEquals(Integer.valueOf(13), result.get("x")); [EOL] }
public void testSimpleProxied() throws Exception { [EOL]     Enhancer enh = new Enhancer(); [EOL]     enh.setInterfaces(new Class[] { BeanInterface.class }); [EOL]     enh.setCallback(new MethodInterceptor() { [EOL]  [EOL]         @Override [EOL]         public Object intercept(Object obj, Method method, Object[] args, MethodProxy proxy) throws Throwable { [EOL]             if ("getX".equals(method.getName())) { [EOL]                 return Integer.valueOf(13); [EOL]             } [EOL]             return proxy.invokeSuper(obj, args); [EOL]         } [EOL]     }); [EOL]     BeanInterface bean = (BeanInterface) enh.create(); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     Map<String, Object> result = writeAndMap(mapper, bean); [EOL]     assertEquals(1, result.size()); [EOL]     assertEquals(Integer.valueOf(13), result.get("x")); [EOL] }
public void testSimpleSerialization() throws Exception { [EOL]     Object ob = newGroovyObject(SIMPLE_POGO); [EOL]     Map<String, Object> result = writeAndMap(MAPPER, ob); [EOL]     assertEquals(2, result.size()); [EOL]     assertEquals("whome", result.get("name")); [EOL]     Object num = result.get("id"); [EOL]     assertNotNull(num); [EOL]     assertTrue(num instanceof Number); [EOL]     assertEquals(3, ((Number) num).intValue()); [EOL] }
public void testAtomicLong() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     assertEquals("0", serializeAsString(mapper, new AtomicLong(0))); [EOL] }
public void testSimple() throws Exception { [EOL]     final String JSON = SAMPLE_DOC_JSON_SPEC; [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     for (int type = 0; type < 2; ++type) { [EOL]         JsonNode result; [EOL]         if (type == 0) { [EOL]             result = mapper.readTree(new StringReader(JSON)); [EOL]         } else { [EOL]             result = mapper.readTree(JSON); [EOL]         } [EOL]         assertType(result, ObjectNode.class); [EOL]         assertEquals(1, result.size()); [EOL]         assertTrue(result.isObject()); [EOL]         ObjectNode main = (ObjectNode) result; [EOL]         assertEquals("Image", main.fieldNames().next()); [EOL]         JsonNode ob = main.elements().next(); [EOL]         assertType(ob, ObjectNode.class); [EOL]         ObjectNode imageMap = (ObjectNode) ob; [EOL]         assertEquals(5, imageMap.size()); [EOL]         ob = imageMap.get("Width"); [EOL]         assertTrue(ob.isIntegralNumber()); [EOL]         assertFalse(ob.isFloatingPointNumber()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_WIDTH, ob.intValue()); [EOL]         ob = imageMap.get("Height"); [EOL]         assertTrue(ob.isIntegralNumber()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_HEIGHT, ob.intValue()); [EOL]         ob = imageMap.get("Title"); [EOL]         assertTrue(ob.isTextual()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_TITLE, ob.textValue()); [EOL]         ob = imageMap.get("Thumbnail"); [EOL]         assertType(ob, ObjectNode.class); [EOL]         ObjectNode tn = (ObjectNode) ob; [EOL]         ob = tn.get("Url"); [EOL]         assertTrue(ob.isTextual()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_TN_URL, ob.textValue()); [EOL]         ob = tn.get("Height"); [EOL]         assertTrue(ob.isIntegralNumber()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_TN_HEIGHT, ob.intValue()); [EOL]         ob = tn.get("Width"); [EOL]         assertTrue(ob.isTextual()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_TN_WIDTH, ob.textValue()); [EOL]         ob = imageMap.get("IDs"); [EOL]         assertTrue(ob.isArray()); [EOL]         ArrayNode idList = (ArrayNode) ob; [EOL]         assertEquals(4, idList.size()); [EOL]         assertEquals(4, calcLength(idList.elements())); [EOL]         assertEquals(4, calcLength(idList.iterator())); [EOL]         { [EOL]             int[] values = new int[] { SAMPLE_SPEC_VALUE_TN_ID1, SAMPLE_SPEC_VALUE_TN_ID2, SAMPLE_SPEC_VALUE_TN_ID3, SAMPLE_SPEC_VALUE_TN_ID4 }; [EOL]             for (int i = 0; i < values.length; ++i) { [EOL]                 assertEquals(values[i], idList.get(i).intValue()); [EOL]             } [EOL]             int i = 0; [EOL]             for (JsonNode n : idList) { [EOL]                 assertEquals(values[i], n.intValue()); [EOL]                 ++i; [EOL]             } [EOL]         } [EOL]     } [EOL] }
public void testSimple() throws Exception { [EOL]     final String JSON = SAMPLE_DOC_JSON_SPEC; [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     for (int type = 0; type < 2; ++type) { [EOL]         JsonNode result; [EOL]         if (type == 0) { [EOL]             result = mapper.readTree(new StringReader(JSON)); [EOL]         } else { [EOL]             result = mapper.readTree(JSON); [EOL]         } [EOL]         assertType(result, ObjectNode.class); [EOL]         assertEquals(1, result.size()); [EOL]         assertTrue(result.isObject()); [EOL]         ObjectNode main = (ObjectNode) result; [EOL]         assertEquals("Image", main.fieldNames().next()); [EOL]         JsonNode ob = main.elements().next(); [EOL]         assertType(ob, ObjectNode.class); [EOL]         ObjectNode imageMap = (ObjectNode) ob; [EOL]         assertEquals(5, imageMap.size()); [EOL]         ob = imageMap.get("Width"); [EOL]         assertTrue(ob.isIntegralNumber()); [EOL]         assertFalse(ob.isFloatingPointNumber()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_WIDTH, ob.intValue()); [EOL]         ob = imageMap.get("Height"); [EOL]         assertTrue(ob.isIntegralNumber()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_HEIGHT, ob.intValue()); [EOL]         ob = imageMap.get("Title"); [EOL]         assertTrue(ob.isTextual()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_TITLE, ob.textValue()); [EOL]         ob = imageMap.get("Thumbnail"); [EOL]         assertType(ob, ObjectNode.class); [EOL]         ObjectNode tn = (ObjectNode) ob; [EOL]         ob = tn.get("Url"); [EOL]         assertTrue(ob.isTextual()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_TN_URL, ob.textValue()); [EOL]         ob = tn.get("Height"); [EOL]         assertTrue(ob.isIntegralNumber()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_TN_HEIGHT, ob.intValue()); [EOL]         ob = tn.get("Width"); [EOL]         assertTrue(ob.isTextual()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_TN_WIDTH, ob.textValue()); [EOL]         ob = imageMap.get("IDs"); [EOL]         assertTrue(ob.isArray()); [EOL]         ArrayNode idList = (ArrayNode) ob; [EOL]         assertEquals(4, idList.size()); [EOL]         assertEquals(4, calcLength(idList.elements())); [EOL]         assertEquals(4, calcLength(idList.iterator())); [EOL]         { [EOL]             int[] values = new int[] { SAMPLE_SPEC_VALUE_TN_ID1, SAMPLE_SPEC_VALUE_TN_ID2, SAMPLE_SPEC_VALUE_TN_ID3, SAMPLE_SPEC_VALUE_TN_ID4 }; [EOL]             for (int i = 0; i < values.length; ++i) { [EOL]                 assertEquals(values[i], idList.get(i).intValue()); [EOL]             } [EOL]             int i = 0; [EOL]             for (JsonNode n : idList) { [EOL]                 assertEquals(values[i], n.intValue()); [EOL]                 ++i; [EOL]             } [EOL]         } [EOL]     } [EOL] }
public void testSimple() throws Exception { [EOL]     final String JSON = SAMPLE_DOC_JSON_SPEC; [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     for (int type = 0; type < 2; ++type) { [EOL]         JsonNode result; [EOL]         if (type == 0) { [EOL]             result = mapper.readTree(new StringReader(JSON)); [EOL]         } else { [EOL]             result = mapper.readTree(JSON); [EOL]         } [EOL]         assertType(result, ObjectNode.class); [EOL]         assertEquals(1, result.size()); [EOL]         assertTrue(result.isObject()); [EOL]         ObjectNode main = (ObjectNode) result; [EOL]         assertEquals("Image", main.fieldNames().next()); [EOL]         JsonNode ob = main.elements().next(); [EOL]         assertType(ob, ObjectNode.class); [EOL]         ObjectNode imageMap = (ObjectNode) ob; [EOL]         assertEquals(5, imageMap.size()); [EOL]         ob = imageMap.get("Width"); [EOL]         assertTrue(ob.isIntegralNumber()); [EOL]         assertFalse(ob.isFloatingPointNumber()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_WIDTH, ob.intValue()); [EOL]         ob = imageMap.get("Height"); [EOL]         assertTrue(ob.isIntegralNumber()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_HEIGHT, ob.intValue()); [EOL]         ob = imageMap.get("Title"); [EOL]         assertTrue(ob.isTextual()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_TITLE, ob.textValue()); [EOL]         ob = imageMap.get("Thumbnail"); [EOL]         assertType(ob, ObjectNode.class); [EOL]         ObjectNode tn = (ObjectNode) ob; [EOL]         ob = tn.get("Url"); [EOL]         assertTrue(ob.isTextual()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_TN_URL, ob.textValue()); [EOL]         ob = tn.get("Height"); [EOL]         assertTrue(ob.isIntegralNumber()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_TN_HEIGHT, ob.intValue()); [EOL]         ob = tn.get("Width"); [EOL]         assertTrue(ob.isTextual()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_TN_WIDTH, ob.textValue()); [EOL]         ob = imageMap.get("IDs"); [EOL]         assertTrue(ob.isArray()); [EOL]         ArrayNode idList = (ArrayNode) ob; [EOL]         assertEquals(4, idList.size()); [EOL]         assertEquals(4, calcLength(idList.elements())); [EOL]         assertEquals(4, calcLength(idList.iterator())); [EOL]         { [EOL]             int[] values = new int[] { SAMPLE_SPEC_VALUE_TN_ID1, SAMPLE_SPEC_VALUE_TN_ID2, SAMPLE_SPEC_VALUE_TN_ID3, SAMPLE_SPEC_VALUE_TN_ID4 }; [EOL]             for (int i = 0; i < values.length; ++i) { [EOL]                 assertEquals(values[i], idList.get(i).intValue()); [EOL]             } [EOL]             int i = 0; [EOL]             for (JsonNode n : idList) { [EOL]                 assertEquals(values[i], n.intValue()); [EOL]                 ++i; [EOL]             } [EOL]         } [EOL]     } [EOL] }
public void testSimple() throws Exception { [EOL]     final String JSON = SAMPLE_DOC_JSON_SPEC; [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     for (int type = 0; type < 2; ++type) { [EOL]         JsonNode result; [EOL]         if (type == 0) { [EOL]             result = mapper.readTree(new StringReader(JSON)); [EOL]         } else { [EOL]             result = mapper.readTree(JSON); [EOL]         } [EOL]         assertType(result, ObjectNode.class); [EOL]         assertEquals(1, result.size()); [EOL]         assertTrue(result.isObject()); [EOL]         ObjectNode main = (ObjectNode) result; [EOL]         assertEquals("Image", main.fieldNames().next()); [EOL]         JsonNode ob = main.elements().next(); [EOL]         assertType(ob, ObjectNode.class); [EOL]         ObjectNode imageMap = (ObjectNode) ob; [EOL]         assertEquals(5, imageMap.size()); [EOL]         ob = imageMap.get("Width"); [EOL]         assertTrue(ob.isIntegralNumber()); [EOL]         assertFalse(ob.isFloatingPointNumber()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_WIDTH, ob.intValue()); [EOL]         ob = imageMap.get("Height"); [EOL]         assertTrue(ob.isIntegralNumber()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_HEIGHT, ob.intValue()); [EOL]         ob = imageMap.get("Title"); [EOL]         assertTrue(ob.isTextual()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_TITLE, ob.textValue()); [EOL]         ob = imageMap.get("Thumbnail"); [EOL]         assertType(ob, ObjectNode.class); [EOL]         ObjectNode tn = (ObjectNode) ob; [EOL]         ob = tn.get("Url"); [EOL]         assertTrue(ob.isTextual()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_TN_URL, ob.textValue()); [EOL]         ob = tn.get("Height"); [EOL]         assertTrue(ob.isIntegralNumber()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_TN_HEIGHT, ob.intValue()); [EOL]         ob = tn.get("Width"); [EOL]         assertTrue(ob.isTextual()); [EOL]         assertEquals(SAMPLE_SPEC_VALUE_TN_WIDTH, ob.textValue()); [EOL]         ob = imageMap.get("IDs"); [EOL]         assertTrue(ob.isArray()); [EOL]         ArrayNode idList = (ArrayNode) ob; [EOL]         assertEquals(4, idList.size()); [EOL]         assertEquals(4, calcLength(idList.elements())); [EOL]         assertEquals(4, calcLength(idList.iterator())); [EOL]         { [EOL]             int[] values = new int[] { SAMPLE_SPEC_VALUE_TN_ID1, SAMPLE_SPEC_VALUE_TN_ID2, SAMPLE_SPEC_VALUE_TN_ID3, SAMPLE_SPEC_VALUE_TN_ID4 }; [EOL]             for (int i = 0; i < values.length; ++i) { [EOL]                 assertEquals(values[i], idList.get(i).intValue()); [EOL]             } [EOL]             int i = 0; [EOL]             for (JsonNode n : idList) { [EOL]                 assertEquals(values[i], n.intValue()); [EOL]                 ++i; [EOL]             } [EOL]         } [EOL]     } [EOL] }
public void testPrefixedUnwrapping() throws Exception { [EOL]     PrefixUnwrap bean = mapper.readValue("{\"name\":\"Axel\",\"_x\":4,\"_y\":7}", PrefixUnwrap.class); [EOL]     assertNotNull(bean); [EOL]     assertEquals("Axel", bean.name); [EOL]     assertNotNull(bean.location); [EOL]     assertEquals(4, bean.location.x); [EOL]     assertEquals(7, bean.location.y); [EOL] }
public void testPrefixedUnwrapping() throws Exception { [EOL]     PrefixUnwrap bean = mapper.readValue("{\"name\":\"Axel\",\"_x\":4,\"_y\":7}", PrefixUnwrap.class); [EOL]     assertNotNull(bean); [EOL]     assertEquals("Axel", bean.name); [EOL]     assertNotNull(bean.location); [EOL]     assertEquals(4, bean.location.x); [EOL]     assertEquals(7, bean.location.y); [EOL] }
public void testPrefixedUnwrapping() throws Exception { [EOL]     PrefixUnwrap bean = mapper.readValue("{\"name\":\"Axel\",\"_x\":4,\"_y\":7}", PrefixUnwrap.class); [EOL]     assertNotNull(bean); [EOL]     assertEquals("Axel", bean.name); [EOL]     assertNotNull(bean.location); [EOL]     assertEquals(4, bean.location.x); [EOL]     assertEquals(7, bean.location.y); [EOL] }
public void testPrefixedUnwrapping() throws Exception { [EOL]     PrefixUnwrap bean = mapper.readValue("{\"name\":\"Axel\",\"_x\":4,\"_y\":7}", PrefixUnwrap.class); [EOL]     assertNotNull(bean); [EOL]     assertEquals("Axel", bean.name); [EOL]     assertNotNull(bean.location); [EOL]     assertEquals(4, bean.location.x); [EOL]     assertEquals(7, bean.location.y); [EOL] }
public void testPrefixedUnwrapping() throws Exception { [EOL]     PrefixUnwrap bean = mapper.readValue("{\"name\":\"Axel\",\"_x\":4,\"_y\":7}", PrefixUnwrap.class); [EOL]     assertNotNull(bean); [EOL]     assertEquals("Axel", bean.name); [EOL]     assertNotNull(bean.location); [EOL]     assertEquals(4, bean.location.x); [EOL]     assertEquals(7, bean.location.y); [EOL] }
public void testAnnotatedArray() throws Exception { [EOL]     ObjectMapper mapper = _mapperWithAnnotatedContextual(); [EOL]     ContextualArrayBean bean = mapper.readValue("{\"beans\":[\"x\"]}", ContextualArrayBean.class); [EOL]     assertEquals(1, bean.beans.length); [EOL]     assertEquals("array=x", bean.beans[0].value); [EOL]     bean = mapper.readValue("{\"beans\":[\"a\",\"b\"]}", ContextualArrayBean.class); [EOL]     assertEquals(2, bean.beans.length); [EOL]     assertEquals("array=a", bean.beans[0].value); [EOL]     assertEquals("array=b", bean.beans[1].value); [EOL] }
public void testAnnotatedArray() throws Exception { [EOL]     ObjectMapper mapper = _mapperWithAnnotatedContextual(); [EOL]     ContextualArrayBean bean = mapper.readValue("{\"beans\":[\"x\"]}", ContextualArrayBean.class); [EOL]     assertEquals(1, bean.beans.length); [EOL]     assertEquals("array=x", bean.beans[0].value); [EOL]     bean = mapper.readValue("{\"beans\":[\"a\",\"b\"]}", ContextualArrayBean.class); [EOL]     assertEquals(2, bean.beans.length); [EOL]     assertEquals("array=a", bean.beans[0].value); [EOL]     assertEquals("array=b", bean.beans[1].value); [EOL] }
public void testAnnotatedArray() throws Exception { [EOL]     ObjectMapper mapper = _mapperWithAnnotatedContextual(); [EOL]     ContextualArrayBean bean = mapper.readValue("{\"beans\":[\"x\"]}", ContextualArrayBean.class); [EOL]     assertEquals(1, bean.beans.length); [EOL]     assertEquals("array=x", bean.beans[0].value); [EOL]     bean = mapper.readValue("{\"beans\":[\"a\",\"b\"]}", ContextualArrayBean.class); [EOL]     assertEquals(2, bean.beans.length); [EOL]     assertEquals("array=a", bean.beans[0].value); [EOL]     assertEquals("array=b", bean.beans[1].value); [EOL] }
public void testAnnotatedArray() throws Exception { [EOL]     ObjectMapper mapper = _mapperWithAnnotatedContextual(); [EOL]     ContextualArrayBean bean = mapper.readValue("{\"beans\":[\"x\"]}", ContextualArrayBean.class); [EOL]     assertEquals(1, bean.beans.length); [EOL]     assertEquals("array=x", bean.beans[0].value); [EOL]     bean = mapper.readValue("{\"beans\":[\"a\",\"b\"]}", ContextualArrayBean.class); [EOL]     assertEquals(2, bean.beans.length); [EOL]     assertEquals("array=a", bean.beans[0].value); [EOL]     assertEquals("array=b", bean.beans[1].value); [EOL] }
public void testAnnotatedArray() throws Exception { [EOL]     ObjectMapper mapper = _mapperWithAnnotatedContextual(); [EOL]     ContextualArrayBean bean = mapper.readValue("{\"beans\":[\"x\"]}", ContextualArrayBean.class); [EOL]     assertEquals(1, bean.beans.length); [EOL]     assertEquals("array=x", bean.beans[0].value); [EOL]     bean = mapper.readValue("{\"beans\":[\"a\",\"b\"]}", ContextualArrayBean.class); [EOL]     assertEquals(2, bean.beans.length); [EOL]     assertEquals("array=a", bean.beans[0].value); [EOL]     assertEquals("array=b", bean.beans[1].value); [EOL] }
public void testAnnotatedArray() throws Exception { [EOL]     ObjectMapper mapper = _mapperWithAnnotatedContextual(); [EOL]     ContextualArrayBean bean = mapper.readValue("{\"beans\":[\"x\"]}", ContextualArrayBean.class); [EOL]     assertEquals(1, bean.beans.length); [EOL]     assertEquals("array=x", bean.beans[0].value); [EOL]     bean = mapper.readValue("{\"beans\":[\"a\",\"b\"]}", ContextualArrayBean.class); [EOL]     assertEquals(2, bean.beans.length); [EOL]     assertEquals("array=a", bean.beans[0].value); [EOL]     assertEquals("array=b", bean.beans[1].value); [EOL] }
public void testAnnotatedArray() throws Exception { [EOL]     ObjectMapper mapper = _mapperWithAnnotatedContextual(); [EOL]     ContextualArrayBean bean = mapper.readValue("{\"beans\":[\"x\"]}", ContextualArrayBean.class); [EOL]     assertEquals(1, bean.beans.length); [EOL]     assertEquals("array=x", bean.beans[0].value); [EOL]     bean = mapper.readValue("{\"beans\":[\"a\",\"b\"]}", ContextualArrayBean.class); [EOL]     assertEquals(2, bean.beans.length); [EOL]     assertEquals("array=a", bean.beans[0].value); [EOL]     assertEquals("array=b", bean.beans[1].value); [EOL] }
public void testAnnotatedArray() throws Exception { [EOL]     ObjectMapper mapper = _mapperWithAnnotatedContextual(); [EOL]     ContextualArrayBean bean = mapper.readValue("{\"beans\":[\"x\"]}", ContextualArrayBean.class); [EOL]     assertEquals(1, bean.beans.length); [EOL]     assertEquals("array=x", bean.beans[0].value); [EOL]     bean = mapper.readValue("{\"beans\":[\"a\",\"b\"]}", ContextualArrayBean.class); [EOL]     assertEquals(2, bean.beans.length); [EOL]     assertEquals("array=a", bean.beans[0].value); [EOL]     assertEquals("array=b", bean.beans[1].value); [EOL] }
public void testMultipleModules() throws Exception { [EOL]     MySimpleModule mod1 = new MySimpleModule("test1", Version.unknownVersion()); [EOL]     SimpleModule mod2 = new SimpleModule("test2", Version.unknownVersion()); [EOL]     mod1.addSerializer(SimpleEnum.class, new SimpleEnumSerializer()); [EOL]     mod1.addDeserializer(CustomBean.class, new CustomBeanDeserializer()); [EOL]     mod2.addDeserializer(SimpleEnum.class, new SimpleEnumDeserializer()); [EOL]     mod2.addSerializer(CustomBean.class, new CustomBeanSerializer()); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerModule(mod1); [EOL]     mapper.registerModule(mod2); [EOL]     assertEquals(quote("b"), mapper.writeValueAsString(SimpleEnum.B)); [EOL]     SimpleEnum result = mapper.readValue(quote("a"), SimpleEnum.class); [EOL]     assertSame(SimpleEnum.A, result); [EOL]     mapper = new ObjectMapper(); [EOL]     mapper.registerModule(mod2); [EOL]     mapper.registerModule(mod1); [EOL]     assertEquals(quote("b"), mapper.writeValueAsString(SimpleEnum.B)); [EOL]     result = mapper.readValue(quote("a"), SimpleEnum.class); [EOL]     assertSame(SimpleEnum.A, result); [EOL] }
public void testMultipleModules() throws Exception { [EOL]     MySimpleModule mod1 = new MySimpleModule("test1", Version.unknownVersion()); [EOL]     SimpleModule mod2 = new SimpleModule("test2", Version.unknownVersion()); [EOL]     mod1.addSerializer(SimpleEnum.class, new SimpleEnumSerializer()); [EOL]     mod1.addDeserializer(CustomBean.class, new CustomBeanDeserializer()); [EOL]     mod2.addDeserializer(SimpleEnum.class, new SimpleEnumDeserializer()); [EOL]     mod2.addSerializer(CustomBean.class, new CustomBeanSerializer()); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerModule(mod1); [EOL]     mapper.registerModule(mod2); [EOL]     assertEquals(quote("b"), mapper.writeValueAsString(SimpleEnum.B)); [EOL]     SimpleEnum result = mapper.readValue(quote("a"), SimpleEnum.class); [EOL]     assertSame(SimpleEnum.A, result); [EOL]     mapper = new ObjectMapper(); [EOL]     mapper.registerModule(mod2); [EOL]     mapper.registerModule(mod1); [EOL]     assertEquals(quote("b"), mapper.writeValueAsString(SimpleEnum.B)); [EOL]     result = mapper.readValue(quote("a"), SimpleEnum.class); [EOL]     assertSame(SimpleEnum.A, result); [EOL] }
public void testMultipleModules() throws Exception { [EOL]     MySimpleModule mod1 = new MySimpleModule("test1", Version.unknownVersion()); [EOL]     SimpleModule mod2 = new SimpleModule("test2", Version.unknownVersion()); [EOL]     mod1.addSerializer(SimpleEnum.class, new SimpleEnumSerializer()); [EOL]     mod1.addDeserializer(CustomBean.class, new CustomBeanDeserializer()); [EOL]     mod2.addDeserializer(SimpleEnum.class, new SimpleEnumDeserializer()); [EOL]     mod2.addSerializer(CustomBean.class, new CustomBeanSerializer()); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerModule(mod1); [EOL]     mapper.registerModule(mod2); [EOL]     assertEquals(quote("b"), mapper.writeValueAsString(SimpleEnum.B)); [EOL]     SimpleEnum result = mapper.readValue(quote("a"), SimpleEnum.class); [EOL]     assertSame(SimpleEnum.A, result); [EOL]     mapper = new ObjectMapper(); [EOL]     mapper.registerModule(mod2); [EOL]     mapper.registerModule(mod1); [EOL]     assertEquals(quote("b"), mapper.writeValueAsString(SimpleEnum.B)); [EOL]     result = mapper.readValue(quote("a"), SimpleEnum.class); [EOL]     assertSame(SimpleEnum.A, result); [EOL] }
public void testColumnMetadata() throws Exception { [EOL]     ColumnMetadata col = new ColumnMetadata("Billy", "employee", "comment"); [EOL]     Wrapper w = new Wrapper(); [EOL]     w.a = col; [EOL]     w.b = col; [EOL]     String json = MAPPER.writeValueAsString(w); [EOL]     Wrapper deserialized = MAPPER.readValue(json, Wrapper.class); [EOL]     assertNotNull(deserialized); [EOL]     assertNotNull(deserialized.a); [EOL]     assertNotNull(deserialized.b); [EOL]     assertEquals("Billy", deserialized.a.getName()); [EOL]     assertEquals("employee", deserialized.a.getType()); [EOL]     assertEquals("comment", deserialized.a.getComment()); [EOL]     assertSame(deserialized.a, deserialized.b); [EOL] }
public void testColumnMetadata() throws Exception { [EOL]     ColumnMetadata col = new ColumnMetadata("Billy", "employee", "comment"); [EOL]     Wrapper w = new Wrapper(); [EOL]     w.a = col; [EOL]     w.b = col; [EOL]     String json = MAPPER.writeValueAsString(w); [EOL]     Wrapper deserialized = MAPPER.readValue(json, Wrapper.class); [EOL]     assertNotNull(deserialized); [EOL]     assertNotNull(deserialized.a); [EOL]     assertNotNull(deserialized.b); [EOL]     assertEquals("Billy", deserialized.a.getName()); [EOL]     assertEquals("employee", deserialized.a.getType()); [EOL]     assertEquals("comment", deserialized.a.getComment()); [EOL]     assertSame(deserialized.a, deserialized.b); [EOL] }
public void testClassWithUnknownAndIgnore() throws Exception { [EOL]     ImplicitIgnores result = MAPPER.readValue("{\"a\":1,\"b\":2,\"c\":3 }", ImplicitIgnores.class); [EOL]     assertEquals(3, result.c); [EOL]     try { [EOL]         MAPPER.readValue("{\"a\":1,\"b\":2,\"c\":3,\"d\":4 }", ImplicitIgnores.class); [EOL]     } catch (JsonMappingException e) { [EOL]         verifyException(e, "Unrecognized field \"d\""); [EOL]     } [EOL] }
public void testClassWithUnknownAndIgnore() throws Exception { [EOL]     ImplicitIgnores result = MAPPER.readValue("{\"a\":1,\"b\":2,\"c\":3 }", ImplicitIgnores.class); [EOL]     assertEquals(3, result.c); [EOL]     try { [EOL]         MAPPER.readValue("{\"a\":1,\"b\":2,\"c\":3,\"d\":4 }", ImplicitIgnores.class); [EOL]     } catch (JsonMappingException e) { [EOL]         verifyException(e, "Unrecognized field \"d\""); [EOL]     } [EOL] }
public void testPropertyWithSubtypes() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerSubtypes(SubB.class, SubC.class, SubD.class); [EOL]     String json = mapper.writeValueAsString(new PropertyBean(new SubC())); [EOL]     PropertyBean result = mapper.readValue(json, PropertyBean.class); [EOL]     assertSame(SubC.class, result.value.getClass()); [EOL] }
public void testPropertyWithSubtypes() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerSubtypes(SubB.class, SubC.class, SubD.class); [EOL]     String json = mapper.writeValueAsString(new PropertyBean(new SubC())); [EOL]     PropertyBean result = mapper.readValue(json, PropertyBean.class); [EOL]     assertSame(SubC.class, result.value.getClass()); [EOL] }
public void testPropertyWithSubtypes() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerSubtypes(SubB.class, SubC.class, SubD.class); [EOL]     String json = mapper.writeValueAsString(new PropertyBean(new SubC())); [EOL]     PropertyBean result = mapper.readValue(json, PropertyBean.class); [EOL]     assertSame(SubC.class, result.value.getClass()); [EOL] }
public void testPropertyWithSubtypes() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerSubtypes(SubB.class, SubC.class, SubD.class); [EOL]     String json = mapper.writeValueAsString(new PropertyBean(new SubC())); [EOL]     PropertyBean result = mapper.readValue(json, PropertyBean.class); [EOL]     assertSame(SubC.class, result.value.getClass()); [EOL] }
public void testPropertyWithSubtypes() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerSubtypes(SubB.class, SubC.class, SubD.class); [EOL]     String json = mapper.writeValueAsString(new PropertyBean(new SubC())); [EOL]     PropertyBean result = mapper.readValue(json, PropertyBean.class); [EOL]     assertSame(SubC.class, result.value.getClass()); [EOL] }
public void testClassAnnotationForLists() throws Exception { [EOL]     ConvertingBeanContainer container = objectReader(ConvertingBeanContainer.class).readValue("{\"values\":[[1,2],[3,4]]}"); [EOL]     assertNotNull(container); [EOL]     assertNotNull(container.values); [EOL]     assertEquals(2, container.values.size()); [EOL]     assertEquals(4, container.values.get(1).y); [EOL] }
public void testClassAnnotationForLists() throws Exception { [EOL]     ConvertingBeanContainer container = objectReader(ConvertingBeanContainer.class).readValue("{\"values\":[[1,2],[3,4]]}"); [EOL]     assertNotNull(container); [EOL]     assertNotNull(container.values); [EOL]     assertEquals(2, container.values.size()); [EOL]     assertEquals(4, container.values.get(1).y); [EOL] }
public void testClassAnnotationForLists() throws Exception { [EOL]     ConvertingBeanContainer container = objectReader(ConvertingBeanContainer.class).readValue("{\"values\":[[1,2],[3,4]]}"); [EOL]     assertNotNull(container); [EOL]     assertNotNull(container.values); [EOL]     assertEquals(2, container.values.size()); [EOL]     assertEquals(4, container.values.get(1).y); [EOL] }
public void testClassAnnotationForLists() throws Exception { [EOL]     ConvertingBeanContainer container = objectReader(ConvertingBeanContainer.class).readValue("{\"values\":[[1,2],[3,4]]}"); [EOL]     assertNotNull(container); [EOL]     assertNotNull(container.values); [EOL]     assertEquals(2, container.values.size()); [EOL]     assertEquals(4, container.values.get(1).y); [EOL] }
public void testClassAnnotationForLists() throws Exception { [EOL]     ConvertingBeanContainer container = objectReader(ConvertingBeanContainer.class).readValue("{\"values\":[[1,2],[3,4]]}"); [EOL]     assertNotNull(container); [EOL]     assertNotNull(container.values); [EOL]     assertEquals(2, container.values.size()); [EOL]     assertEquals(4, container.values.get(1).y); [EOL] }
public void testClassAnnotationForLists() throws Exception { [EOL]     ConvertingBeanContainer container = objectReader(ConvertingBeanContainer.class).readValue("{\"values\":[[1,2],[3,4]]}"); [EOL]     assertNotNull(container); [EOL]     assertNotNull(container.values); [EOL]     assertEquals(2, container.values.size()); [EOL]     assertEquals(4, container.values.get(1).y); [EOL] }
public void testClassAnnotationForLists() throws Exception { [EOL]     ConvertingBeanContainer container = objectReader(ConvertingBeanContainer.class).readValue("{\"values\":[[1,2],[3,4]]}"); [EOL]     assertNotNull(container); [EOL]     assertNotNull(container.values); [EOL]     assertEquals(2, container.values.size()); [EOL]     assertEquals(4, container.values.get(1).y); [EOL] }
public void testClassAnnotationForLists() throws Exception { [EOL]     ConvertingBeanContainer container = objectReader(ConvertingBeanContainer.class).readValue("{\"values\":[[1,2],[3,4]]}"); [EOL]     assertNotNull(container); [EOL]     assertNotNull(container.values); [EOL]     assertEquals(2, container.values.size()); [EOL]     assertEquals(4, container.values.get(1).y); [EOL] }
public void testIgnoredSingleArgCtor() throws Exception { [EOL]     try { [EOL]         MAPPER.readValue(quote("abc"), IgnoredCtor.class); [EOL]         fail("Should have caught missing constructor problem"); [EOL]     } catch (JsonMappingException e) { [EOL]         verifyException(e, "no single-String constructor/factory method"); [EOL]     } [EOL] }
public void testIgnoredSingleArgCtor() throws Exception { [EOL]     try { [EOL]         MAPPER.readValue(quote("abc"), IgnoredCtor.class); [EOL]         fail("Should have caught missing constructor problem"); [EOL]     } catch (JsonMappingException e) { [EOL]         verifyException(e, "no single-String constructor/factory method"); [EOL]     } [EOL] }
public void testPropertyWithSubtypes() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerSubtypes(SubB.class, SubC.class, SubD.class); [EOL]     String json = mapper.writeValueAsString(new PropertyBean(new SubC())); [EOL]     PropertyBean result = mapper.readValue(json, PropertyBean.class); [EOL]     assertSame(SubC.class, result.value.getClass()); [EOL] }
public void testPropertyWithSubtypes() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerSubtypes(SubB.class, SubC.class, SubD.class); [EOL]     String json = mapper.writeValueAsString(new PropertyBean(new SubC())); [EOL]     PropertyBean result = mapper.readValue(json, PropertyBean.class); [EOL]     assertSame(SubC.class, result.value.getClass()); [EOL] }
public void testPropertyWithSubtypes() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerSubtypes(SubB.class, SubC.class, SubD.class); [EOL]     String json = mapper.writeValueAsString(new PropertyBean(new SubC())); [EOL]     PropertyBean result = mapper.readValue(json, PropertyBean.class); [EOL]     assertSame(SubC.class, result.value.getClass()); [EOL] }
public void testPropertyWithSubtypes() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerSubtypes(SubB.class, SubC.class, SubD.class); [EOL]     String json = mapper.writeValueAsString(new PropertyBean(new SubC())); [EOL]     PropertyBean result = mapper.readValue(json, PropertyBean.class); [EOL]     assertSame(SubC.class, result.value.getClass()); [EOL] }
public void testPropertyWithSubtypes() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerSubtypes(SubB.class, SubC.class, SubD.class); [EOL]     String json = mapper.writeValueAsString(new PropertyBean(new SubC())); [EOL]     PropertyBean result = mapper.readValue(json, PropertyBean.class); [EOL]     assertSame(SubC.class, result.value.getClass()); [EOL] }
public void testPropertyWithSubtypes() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerSubtypes(SubB.class, SubC.class, SubD.class); [EOL]     String json = mapper.writeValueAsString(new PropertyBean(new SubC())); [EOL]     PropertyBean result = mapper.readValue(json, PropertyBean.class); [EOL]     assertSame(SubC.class, result.value.getClass()); [EOL] }
public void testPropertyWithSubtypes() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerSubtypes(SubB.class, SubC.class, SubD.class); [EOL]     String json = mapper.writeValueAsString(new PropertyBean(new SubC())); [EOL]     PropertyBean result = mapper.readValue(json, PropertyBean.class); [EOL]     assertSame(SubC.class, result.value.getClass()); [EOL] }
public void testPropertyWithSubtypes() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerSubtypes(SubB.class, SubC.class, SubD.class); [EOL]     String json = mapper.writeValueAsString(new PropertyBean(new SubC())); [EOL]     PropertyBean result = mapper.readValue(json, PropertyBean.class); [EOL]     assertSame(SubC.class, result.value.getClass()); [EOL] }
public void testPropertyWithSubtypes() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerSubtypes(SubB.class, SubC.class, SubD.class); [EOL]     String json = mapper.writeValueAsString(new PropertyBean(new SubC())); [EOL]     PropertyBean result = mapper.readValue(json, PropertyBean.class); [EOL]     assertSame(SubC.class, result.value.getClass()); [EOL] }
public void testPropertyWithSubtypes() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerSubtypes(SubB.class, SubC.class, SubD.class); [EOL]     String json = mapper.writeValueAsString(new PropertyBean(new SubC())); [EOL]     PropertyBean result = mapper.readValue(json, PropertyBean.class); [EOL]     assertSame(SubC.class, result.value.getClass()); [EOL] }
public void testIgnoredSingleArgCtor() throws Exception { [EOL]     try { [EOL]         MAPPER.readValue(quote("abc"), IgnoredCtor.class); [EOL]         fail("Should have caught missing constructor problem"); [EOL]     } catch (JsonMappingException e) { [EOL]         verifyException(e, "no single-String constructor/factory method"); [EOL]     } [EOL] }
public void testIgnoredSingleArgCtor() throws Exception { [EOL]     try { [EOL]         MAPPER.readValue(quote("abc"), IgnoredCtor.class); [EOL]         fail("Should have caught missing constructor problem"); [EOL]     } catch (JsonMappingException e) { [EOL]         verifyException(e, "no single-String constructor/factory method"); [EOL]     } [EOL] }
public void testIgnoredSingleArgCtor() throws Exception { [EOL]     try { [EOL]         MAPPER.readValue(quote("abc"), IgnoredCtor.class); [EOL]         fail("Should have caught missing constructor problem"); [EOL]     } catch (JsonMappingException e) { [EOL]         verifyException(e, "no single-String constructor/factory method"); [EOL]     } [EOL] }
public void testIgnoredSingleArgCtor() throws Exception { [EOL]     try { [EOL]         MAPPER.readValue(quote("abc"), IgnoredCtor.class); [EOL]         fail("Should have caught missing constructor problem"); [EOL]     } catch (JsonMappingException e) { [EOL]         verifyException(e, "no single-String constructor/factory method"); [EOL]     } [EOL] }
public void testDeserializeSimple() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     JsonSchema schema = mapper.generateJsonSchema(Schemable.class); [EOL]     assertNotNull(schema); [EOL]     String schemaStr = mapper.writeValueAsString(schema); [EOL]     assertNotNull(schemaStr); [EOL]     JsonSchema result = mapper.readValue(schemaStr, JsonSchema.class); [EOL]     assertEquals("Trying to read from '" + schemaStr + "'", schema, result); [EOL] }
public void testDeserializeSimple() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     JsonSchema schema = mapper.generateJsonSchema(Schemable.class); [EOL]     assertNotNull(schema); [EOL]     String schemaStr = mapper.writeValueAsString(schema); [EOL]     assertNotNull(schemaStr); [EOL]     JsonSchema result = mapper.readValue(schemaStr, JsonSchema.class); [EOL]     assertEquals("Trying to read from '" + schemaStr + "'", schema, result); [EOL] }
public void testDeserializeSimple() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     JsonSchema schema = mapper.generateJsonSchema(Schemable.class); [EOL]     assertNotNull(schema); [EOL]     String schemaStr = mapper.writeValueAsString(schema); [EOL]     assertNotNull(schemaStr); [EOL]     JsonSchema result = mapper.readValue(schemaStr, JsonSchema.class); [EOL]     assertEquals("Trying to read from '" + schemaStr + "'", schema, result); [EOL] }
public void testDeserializeSimple() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     JsonSchema schema = mapper.generateJsonSchema(Schemable.class); [EOL]     assertNotNull(schema); [EOL]     String schemaStr = mapper.writeValueAsString(schema); [EOL]     assertNotNull(schemaStr); [EOL]     JsonSchema result = mapper.readValue(schemaStr, JsonSchema.class); [EOL]     assertEquals("Trying to read from '" + schemaStr + "'", schema, result); [EOL] }
public void testLongArrayToX() throws Exception { [EOL]     long[] data = longs(); [EOL]     verifyLongArrayConversion(data, byte[].class); [EOL]     verifyLongArrayConversion(data, short[].class); [EOL]     verifyLongArrayConversion(data, int[].class); [EOL]     List<Number> expNums = _numberList(data, data.length); [EOL]     List<Long> actNums = mapper.convertValue(data, new TypeReference<List<Long>>() { [EOL]     }); [EOL]     assertEquals(expNums, actNums); [EOL] }
public void testLongArrayToX() throws Exception { [EOL]     long[] data = longs(); [EOL]     verifyLongArrayConversion(data, byte[].class); [EOL]     verifyLongArrayConversion(data, short[].class); [EOL]     verifyLongArrayConversion(data, int[].class); [EOL]     List<Number> expNums = _numberList(data, data.length); [EOL]     List<Long> actNums = mapper.convertValue(data, new TypeReference<List<Long>>() { [EOL]     }); [EOL]     assertEquals(expNums, actNums); [EOL] }
public void testDeserializeSimple() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     JsonSchema schema = mapper.generateJsonSchema(Schemable.class); [EOL]     assertNotNull(schema); [EOL]     String schemaStr = mapper.writeValueAsString(schema); [EOL]     assertNotNull(schemaStr); [EOL]     JsonSchema result = mapper.readValue(schemaStr, JsonSchema.class); [EOL]     assertEquals("Trying to read from '" + schemaStr + "'", schema, result); [EOL] }
public void testDeserializeSimple() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     JsonSchema schema = mapper.generateJsonSchema(Schemable.class); [EOL]     assertNotNull(schema); [EOL]     String schemaStr = mapper.writeValueAsString(schema); [EOL]     assertNotNull(schemaStr); [EOL]     JsonSchema result = mapper.readValue(schemaStr, JsonSchema.class); [EOL]     assertEquals("Trying to read from '" + schemaStr + "'", schema, result); [EOL] }
public void testRootValueWithCustomKey() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     MapKeyMap result = m.readValue(" { \"a\": 13 } ", MapKeyMap.class); [EOL]     assertNotNull(result); [EOL]     assertNotNull(result); [EOL]     assertEquals(1, result.size()); [EOL]     Map.Entry<Object, Object> en = result.entrySet().iterator().next(); [EOL]     assertEquals(ValueClass.class, en.getValue().getClass()); [EOL]     assertEquals(13, ((ValueClass) en.getValue())._a); [EOL]     assertEquals(String[].class, en.getKey().getClass()); [EOL] }
public void testRootValueWithCustomKey() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     MapKeyMap result = m.readValue(" { \"a\": 13 } ", MapKeyMap.class); [EOL]     assertNotNull(result); [EOL]     assertNotNull(result); [EOL]     assertEquals(1, result.size()); [EOL]     Map.Entry<Object, Object> en = result.entrySet().iterator().next(); [EOL]     assertEquals(ValueClass.class, en.getValue().getClass()); [EOL]     assertEquals(13, ((ValueClass) en.getValue())._a); [EOL]     assertEquals(String[].class, en.getKey().getClass()); [EOL] }
public void testIssue882() throws Exception { [EOL]     Model original = new Model(Collections.singletonMap(new CustomKey(123), "test")); [EOL]     String json = MAPPER.writeValueAsString(original); [EOL]     Model deserialized = MAPPER.readValue(json, Model.class); [EOL]     assertNotNull(deserialized); [EOL]     assertNotNull(deserialized.map); [EOL]     assertEquals(1, deserialized.map.size()); [EOL] }
public void testIssue882() throws Exception { [EOL]     Model original = new Model(Collections.singletonMap(new CustomKey(123), "test")); [EOL]     String json = MAPPER.writeValueAsString(original); [EOL]     Model deserialized = MAPPER.readValue(json, Model.class); [EOL]     assertNotNull(deserialized); [EOL]     assertNotNull(deserialized.map); [EOL]     assertEquals(1, deserialized.map.size()); [EOL] }
public void testQNameDeser() throws Exception { [EOL]     QName qn = new QName("http://abc", "tag", "prefix"); [EOL]     String qstr = qn.toString(); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     assertEquals("Should deserialize to equal QName (exp serialization: '" + qstr + "')", qn, mapper.readValue(quote(qstr), QName.class)); [EOL] }
public void testQNameDeser() throws Exception { [EOL]     QName qn = new QName("http://abc", "tag", "prefix"); [EOL]     String qstr = qn.toString(); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     assertEquals("Should deserialize to equal QName (exp serialization: '" + qstr + "')", qn, mapper.readValue(quote(qstr), QName.class)); [EOL] }
public void testQNameDeser() throws Exception { [EOL]     QName qn = new QName("http://abc", "tag", "prefix"); [EOL]     String qstr = qn.toString(); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     assertEquals("Should deserialize to equal QName (exp serialization: '" + qstr + "')", qn, mapper.readValue(quote(qstr), QName.class)); [EOL] }
public void testQNameDeser() throws Exception { [EOL]     QName qn = new QName("http://abc", "tag", "prefix"); [EOL]     String qstr = qn.toString(); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     assertEquals("Should deserialize to equal QName (exp serialization: '" + qstr + "')", qn, mapper.readValue(quote(qstr), QName.class)); [EOL] }
public void testDeserializerLoading() { [EOL]     new CoreXMLDeserializers.DurationDeserializer(); [EOL]     new CoreXMLDeserializers.GregorianCalendarDeserializer(); [EOL]     new CoreXMLDeserializers.QNameDeserializer(); [EOL] }
public void testDeserializerLoading() { [EOL]     new CoreXMLDeserializers.DurationDeserializer(); [EOL]     new CoreXMLDeserializers.GregorianCalendarDeserializer(); [EOL]     new CoreXMLDeserializers.QNameDeserializer(); [EOL] }
public void testDeserializerLoading() { [EOL]     new CoreXMLDeserializers.DurationDeserializer(); [EOL]     new CoreXMLDeserializers.GregorianCalendarDeserializer(); [EOL]     new CoreXMLDeserializers.QNameDeserializer(); [EOL] }
public void testQNameDeser() throws Exception { [EOL]     QName qn = new QName("http://abc", "tag", "prefix"); [EOL]     String qstr = qn.toString(); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     assertEquals("Should deserialize to equal QName (exp serialization: '" + qstr + "')", qn, mapper.readValue(quote(qstr), QName.class)); [EOL] }
public void testQNameDeser() throws Exception { [EOL]     QName qn = new QName("http://abc", "tag", "prefix"); [EOL]     String qstr = qn.toString(); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     assertEquals("Should deserialize to equal QName (exp serialization: '" + qstr + "')", qn, mapper.readValue(quote(qstr), QName.class)); [EOL] }
public void testDeserializeSimple() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     JsonSchema schema = mapper.generateJsonSchema(Schemable.class); [EOL]     assertNotNull(schema); [EOL]     String schemaStr = mapper.writeValueAsString(schema); [EOL]     assertNotNull(schemaStr); [EOL]     JsonSchema result = mapper.readValue(schemaStr, JsonSchema.class); [EOL]     assertEquals("Trying to read from '" + schemaStr + "'", schema, result); [EOL] }
public void testDeserializeSimple() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     JsonSchema schema = mapper.generateJsonSchema(Schemable.class); [EOL]     assertNotNull(schema); [EOL]     String schemaStr = mapper.writeValueAsString(schema); [EOL]     assertNotNull(schemaStr); [EOL]     JsonSchema result = mapper.readValue(schemaStr, JsonSchema.class); [EOL]     assertEquals("Trying to read from '" + schemaStr + "'", schema, result); [EOL] }
public void testArraysOfArrays() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL, JsonTypeInfo.As.PROPERTY); [EOL]     Object value = new Object[][] { new Object[] {} }; [EOL]     String json = mapper.writeValueAsString(value); [EOL]     _testArraysAs(mapper, json, Object[][].class); [EOL]     _testArraysAs(mapper, json, Object[].class); [EOL]     _testArraysAs(mapper, json, Object.class); [EOL] }
public void testSerializeDeserializeWithJaxbAnnotations() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.INDENT_OUTPUT); [EOL]     JacksonExample ex = new JacksonExample(); [EOL]     QName qname = new QName("urn:hi", "hello"); [EOL]     ex.setQname(qname); [EOL]     ex.setAttributeProperty("attributeValue"); [EOL]     ex.setElementProperty("elementValue"); [EOL]     ex.setWrappedElementProperty(Arrays.asList("wrappedElementValue")); [EOL]     ex.setEnumProperty(EnumExample.VALUE1); [EOL]     StringWriter writer = new StringWriter(); [EOL]     mapper.writeValue(writer, ex); [EOL]     writer.flush(); [EOL]     writer.close(); [EOL]     String json = writer.toString(); [EOL]     JacksonExample readEx = mapper.readValue(json, JacksonExample.class); [EOL]     assertEquals(ex.qname, readEx.qname); [EOL]     assertEquals(ex.attributeProperty, readEx.attributeProperty); [EOL]     assertEquals(ex.elementProperty, readEx.elementProperty); [EOL]     assertEquals(ex.wrappedElementProperty, readEx.wrappedElementProperty); [EOL]     assertEquals(ex.enumProperty, readEx.enumProperty); [EOL] }
public void testSerializeDeserializeWithJaxbAnnotations() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.enable(SerializationFeature.INDENT_OUTPUT); [EOL]     JacksonExample ex = new JacksonExample(); [EOL]     QName qname = new QName("urn:hi", "hello"); [EOL]     ex.setQname(qname); [EOL]     ex.setAttributeProperty("attributeValue"); [EOL]     ex.setElementProperty("elementValue"); [EOL]     ex.setWrappedElementProperty(Arrays.asList("wrappedElementValue")); [EOL]     ex.setEnumProperty(EnumExample.VALUE1); [EOL]     StringWriter writer = new StringWriter(); [EOL]     mapper.writeValue(writer, ex); [EOL]     writer.flush(); [EOL]     writer.close(); [EOL]     String json = writer.toString(); [EOL]     JacksonExample readEx = mapper.readValue(json, JacksonExample.class); [EOL]     assertEquals(ex.qname, readEx.qname); [EOL]     assertEquals(ex.attributeProperty, readEx.attributeProperty); [EOL]     assertEquals(ex.elementProperty, readEx.elementProperty); [EOL]     assertEquals(ex.wrappedElementProperty, readEx.wrappedElementProperty); [EOL]     assertEquals(ex.enumProperty, readEx.enumProperty); [EOL] }
public void testCharset() throws Exception { [EOL]     Charset UTF8 = Charset.forName("UTF-8"); [EOL]     assertSame(UTF8, mapper.readValue(quote("UTF-8"), Charset.class)); [EOL] }
public void testCharset() throws Exception { [EOL]     Charset UTF8 = Charset.forName("UTF-8"); [EOL]     assertSame(UTF8, mapper.readValue(quote("UTF-8"), Charset.class)); [EOL] }
public void testCharset() throws Exception { [EOL]     Charset UTF8 = Charset.forName("UTF-8"); [EOL]     assertSame(UTF8, mapper.readValue(quote("UTF-8"), Charset.class)); [EOL] }
public void testCharset() throws Exception { [EOL]     Charset UTF8 = Charset.forName("UTF-8"); [EOL]     assertSame(UTF8, mapper.readValue(quote("UTF-8"), Charset.class)); [EOL] }
public void testCharset() throws Exception { [EOL]     Charset UTF8 = Charset.forName("UTF-8"); [EOL]     assertSame(UTF8, mapper.readValue(quote("UTF-8"), Charset.class)); [EOL] }
public void testCharset() throws Exception { [EOL]     Charset UTF8 = Charset.forName("UTF-8"); [EOL]     assertSame(UTF8, mapper.readValue(quote("UTF-8"), Charset.class)); [EOL] }
public void testCharset() throws Exception { [EOL]     Charset UTF8 = Charset.forName("UTF-8"); [EOL]     assertSame(UTF8, mapper.readValue(quote("UTF-8"), Charset.class)); [EOL] }
public void testCharset() throws Exception { [EOL]     Charset UTF8 = Charset.forName("UTF-8"); [EOL]     assertSame(UTF8, mapper.readValue(quote("UTF-8"), Charset.class)); [EOL] }
public void testModifyMapSerializer() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerModule(new SimpleModule("test").setSerializerModifier(new MapSerializerModifier())); [EOL]     assertEquals("123", mapper.writeValueAsString(new HashMap<String, String>())); [EOL] }
public void testModifyMapSerializer() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerModule(new SimpleModule("test").setSerializerModifier(new MapSerializerModifier())); [EOL]     assertEquals("123", mapper.writeValueAsString(new HashMap<String, String>())); [EOL] }
public void testModifyMapSerializer() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerModule(new SimpleModule("test").setSerializerModifier(new MapSerializerModifier())); [EOL]     assertEquals("123", mapper.writeValueAsString(new HashMap<String, String>())); [EOL] }
public void testModifyMapSerializer() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerModule(new SimpleModule("test").setSerializerModifier(new MapSerializerModifier())); [EOL]     assertEquals("123", mapper.writeValueAsString(new HashMap<String, String>())); [EOL] }
public void testModifyMapSerializer() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerModule(new SimpleModule("test").setSerializerModifier(new MapSerializerModifier())); [EOL]     assertEquals("123", mapper.writeValueAsString(new HashMap<String, String>())); [EOL] }
public void testModifyMapSerializer() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerModule(new SimpleModule("test").setSerializerModifier(new MapSerializerModifier())); [EOL]     assertEquals("123", mapper.writeValueAsString(new HashMap<String, String>())); [EOL] }
public void testModifyMapSerializer() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerModule(new SimpleModule("test").setSerializerModifier(new MapSerializerModifier())); [EOL]     assertEquals("123", mapper.writeValueAsString(new HashMap<String, String>())); [EOL] }
public void testModifyMapSerializer() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     mapper.registerModule(new SimpleModule("test").setSerializerModifier(new MapSerializerModifier())); [EOL]     assertEquals("123", mapper.writeValueAsString(new HashMap<String, String>())); [EOL] }
public void testRoundTripMap() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     AnimalMap input = new AnimalMap(); [EOL]     input.put("venla", new MaineCoon("Venla", true)); [EOL]     input.put("ama", new Dog("Amadeus", 13)); [EOL]     String json = m.writeValueAsString(input); [EOL]     AnimalMap output = m.readValue(json, AnimalMap.class); [EOL]     assertEquals(input, output); [EOL] }
public void testRoundTripMap() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     AnimalMap input = new AnimalMap(); [EOL]     input.put("venla", new MaineCoon("Venla", true)); [EOL]     input.put("ama", new Dog("Amadeus", 13)); [EOL]     String json = m.writeValueAsString(input); [EOL]     AnimalMap output = m.readValue(json, AnimalMap.class); [EOL]     assertEquals(input, output); [EOL] }
public void testRoundTripMap() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     AnimalMap input = new AnimalMap(); [EOL]     input.put("venla", new MaineCoon("Venla", true)); [EOL]     input.put("ama", new Dog("Amadeus", 13)); [EOL]     String json = m.writeValueAsString(input); [EOL]     AnimalMap output = m.readValue(json, AnimalMap.class); [EOL]     assertEquals(input, output); [EOL] }
public void testRoundTripMap() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     AnimalMap input = new AnimalMap(); [EOL]     input.put("venla", new MaineCoon("Venla", true)); [EOL]     input.put("ama", new Dog("Amadeus", 13)); [EOL]     String json = m.writeValueAsString(input); [EOL]     AnimalMap output = m.readValue(json, AnimalMap.class); [EOL]     assertEquals(input, output); [EOL] }
public void testRoundTripMap() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     AnimalMap input = new AnimalMap(); [EOL]     input.put("venla", new MaineCoon("Venla", true)); [EOL]     input.put("ama", new Dog("Amadeus", 13)); [EOL]     String json = m.writeValueAsString(input); [EOL]     AnimalMap output = m.readValue(json, AnimalMap.class); [EOL]     assertEquals(input, output); [EOL] }
public void testRoundTripMap() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     AnimalMap input = new AnimalMap(); [EOL]     input.put("venla", new MaineCoon("Venla", true)); [EOL]     input.put("ama", new Dog("Amadeus", 13)); [EOL]     String json = m.writeValueAsString(input); [EOL]     AnimalMap output = m.readValue(json, AnimalMap.class); [EOL]     assertEquals(input, output); [EOL] }
public void testRoundTripMap() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     AnimalMap input = new AnimalMap(); [EOL]     input.put("venla", new MaineCoon("Venla", true)); [EOL]     input.put("ama", new Dog("Amadeus", 13)); [EOL]     String json = m.writeValueAsString(input); [EOL]     AnimalMap output = m.readValue(json, AnimalMap.class); [EOL]     assertEquals(input, output); [EOL] }
public void testRoundTripMap() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     AnimalMap input = new AnimalMap(); [EOL]     input.put("venla", new MaineCoon("Venla", true)); [EOL]     input.put("ama", new Dog("Amadeus", 13)); [EOL]     String json = m.writeValueAsString(input); [EOL]     AnimalMap output = m.readValue(json, AnimalMap.class); [EOL]     assertEquals(input, output); [EOL] }
public void testDeserializeSimple() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     JsonSchema schema = mapper.generateJsonSchema(Schemable.class); [EOL]     assertNotNull(schema); [EOL]     String schemaStr = mapper.writeValueAsString(schema); [EOL]     assertNotNull(schemaStr); [EOL]     JsonSchema result = mapper.readValue(schemaStr, JsonSchema.class); [EOL]     assertEquals("Trying to read from '" + schemaStr + "'", schema, result); [EOL] }
public void testDeserializeSimple() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     JsonSchema schema = mapper.generateJsonSchema(Schemable.class); [EOL]     assertNotNull(schema); [EOL]     String schemaStr = mapper.writeValueAsString(schema); [EOL]     assertNotNull(schemaStr); [EOL]     JsonSchema result = mapper.readValue(schemaStr, JsonSchema.class); [EOL]     assertEquals("Trying to read from '" + schemaStr + "'", schema, result); [EOL] }
public void testDeserializeSimple() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     JsonSchema schema = mapper.generateJsonSchema(Schemable.class); [EOL]     assertNotNull(schema); [EOL]     String schemaStr = mapper.writeValueAsString(schema); [EOL]     assertNotNull(schemaStr); [EOL]     JsonSchema result = mapper.readValue(schemaStr, JsonSchema.class); [EOL]     assertEquals("Trying to read from '" + schemaStr + "'", schema, result); [EOL] }
public void testDeserializeSimple() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     JsonSchema schema = mapper.generateJsonSchema(Schemable.class); [EOL]     assertNotNull(schema); [EOL]     String schemaStr = mapper.writeValueAsString(schema); [EOL]     assertNotNull(schemaStr); [EOL]     JsonSchema result = mapper.readValue(schemaStr, JsonSchema.class); [EOL]     assertEquals("Trying to read from '" + schemaStr + "'", schema, result); [EOL] }
public void testRootValueWithCustomKey() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     MapKeyMap result = m.readValue(" { \"a\": 13 } ", MapKeyMap.class); [EOL]     assertNotNull(result); [EOL]     assertNotNull(result); [EOL]     assertEquals(1, result.size()); [EOL]     Map.Entry<Object, Object> en = result.entrySet().iterator().next(); [EOL]     assertEquals(ValueClass.class, en.getValue().getClass()); [EOL]     assertEquals(13, ((ValueClass) en.getValue())._a); [EOL]     assertEquals(String[].class, en.getKey().getClass()); [EOL] }
public void testRootValueWithCustomKey() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     MapKeyMap result = m.readValue(" { \"a\": 13 } ", MapKeyMap.class); [EOL]     assertNotNull(result); [EOL]     assertNotNull(result); [EOL]     assertEquals(1, result.size()); [EOL]     Map.Entry<Object, Object> en = result.entrySet().iterator().next(); [EOL]     assertEquals(ValueClass.class, en.getValue().getClass()); [EOL]     assertEquals(13, ((ValueClass) en.getValue())._a); [EOL]     assertEquals(String[].class, en.getKey().getClass()); [EOL] }
public void testRootValueWithCustomKey() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     MapKeyMap result = m.readValue(" { \"a\": 13 } ", MapKeyMap.class); [EOL]     assertNotNull(result); [EOL]     assertNotNull(result); [EOL]     assertEquals(1, result.size()); [EOL]     Map.Entry<Object, Object> en = result.entrySet().iterator().next(); [EOL]     assertEquals(ValueClass.class, en.getValue().getClass()); [EOL]     assertEquals(13, ((ValueClass) en.getValue())._a); [EOL]     assertEquals(String[].class, en.getKey().getClass()); [EOL] }
public void testRootValueWithCustomKey() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     MapKeyMap result = m.readValue(" { \"a\": 13 } ", MapKeyMap.class); [EOL]     assertNotNull(result); [EOL]     assertNotNull(result); [EOL]     assertEquals(1, result.size()); [EOL]     Map.Entry<Object, Object> en = result.entrySet().iterator().next(); [EOL]     assertEquals(ValueClass.class, en.getValue().getClass()); [EOL]     assertEquals(13, ((ValueClass) en.getValue())._a); [EOL]     assertEquals(String[].class, en.getKey().getClass()); [EOL] }
public void testRootValueWithCustomKey() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     MapKeyMap result = m.readValue(" { \"a\": 13 } ", MapKeyMap.class); [EOL]     assertNotNull(result); [EOL]     assertNotNull(result); [EOL]     assertEquals(1, result.size()); [EOL]     Map.Entry<Object, Object> en = result.entrySet().iterator().next(); [EOL]     assertEquals(ValueClass.class, en.getValue().getClass()); [EOL]     assertEquals(13, ((ValueClass) en.getValue())._a); [EOL]     assertEquals(String[].class, en.getKey().getClass()); [EOL] }
public void testMapWithConstructor() throws Exception { [EOL]     MapWithCtor result = MAPPER.readValue("{\"text\":\"abc\", \"entry\":true, \"number\":123, \"xy\":\"yx\"}", MapWithCtor.class); [EOL]     assertEquals(Boolean.TRUE, result.get("entry")); [EOL]     assertEquals("yx", result.get("xy")); [EOL]     assertEquals(2, result.size()); [EOL]     assertEquals("abc", result._text); [EOL]     assertEquals(123, result._number); [EOL] }
public void testMapWithConstructor() throws Exception { [EOL]     MapWithCtor result = MAPPER.readValue("{\"text\":\"abc\", \"entry\":true, \"number\":123, \"xy\":\"yx\"}", MapWithCtor.class); [EOL]     assertEquals(Boolean.TRUE, result.get("entry")); [EOL]     assertEquals("yx", result.get("xy")); [EOL]     assertEquals(2, result.size()); [EOL]     assertEquals("abc", result._text); [EOL]     assertEquals(123, result._number); [EOL] }
public void testMapWithConstructor() throws Exception { [EOL]     MapWithCtor result = MAPPER.readValue("{\"text\":\"abc\", \"entry\":true, \"number\":123, \"xy\":\"yx\"}", MapWithCtor.class); [EOL]     assertEquals(Boolean.TRUE, result.get("entry")); [EOL]     assertEquals("yx", result.get("xy")); [EOL]     assertEquals(2, result.size()); [EOL]     assertEquals("abc", result._text); [EOL]     assertEquals(123, result._number); [EOL] }
public void testMapWithConstructor() throws Exception { [EOL]     MapWithCtor result = MAPPER.readValue("{\"text\":\"abc\", \"entry\":true, \"number\":123, \"xy\":\"yx\"}", MapWithCtor.class); [EOL]     assertEquals(Boolean.TRUE, result.get("entry")); [EOL]     assertEquals("yx", result.get("xy")); [EOL]     assertEquals(2, result.size()); [EOL]     assertEquals("abc", result._text); [EOL]     assertEquals(123, result._number); [EOL] }
public void testIssue882() throws Exception { [EOL]     Model original = new Model(Collections.singletonMap(new CustomKey(123), "test")); [EOL]     String json = MAPPER.writeValueAsString(original); [EOL]     Model deserialized = MAPPER.readValue(json, Model.class); [EOL]     assertNotNull(deserialized); [EOL]     assertNotNull(deserialized.map); [EOL]     assertEquals(1, deserialized.map.size()); [EOL] }
public void testIssue882() throws Exception { [EOL]     Model original = new Model(Collections.singletonMap(new CustomKey(123), "test")); [EOL]     String json = MAPPER.writeValueAsString(original); [EOL]     Model deserialized = MAPPER.readValue(json, Model.class); [EOL]     assertNotNull(deserialized); [EOL]     assertNotNull(deserialized.map); [EOL]     assertEquals(1, deserialized.map.size()); [EOL] }
public void testIssue882() throws Exception { [EOL]     Model original = new Model(Collections.singletonMap(new CustomKey(123), "test")); [EOL]     String json = MAPPER.writeValueAsString(original); [EOL]     Model deserialized = MAPPER.readValue(json, Model.class); [EOL]     assertNotNull(deserialized); [EOL]     assertNotNull(deserialized.map); [EOL]     assertEquals(1, deserialized.map.size()); [EOL] }
public void testMapWithConstructor() throws Exception { [EOL]     MapWithCtor result = MAPPER.readValue("{\"text\":\"abc\", \"entry\":true, \"number\":123, \"xy\":\"yx\"}", MapWithCtor.class); [EOL]     assertEquals(Boolean.TRUE, result.get("entry")); [EOL]     assertEquals("yx", result.get("xy")); [EOL]     assertEquals(2, result.size()); [EOL]     assertEquals("abc", result._text); [EOL]     assertEquals(123, result._number); [EOL] }
public void testMapWithConstructor() throws Exception { [EOL]     MapWithCtor result = MAPPER.readValue("{\"text\":\"abc\", \"entry\":true, \"number\":123, \"xy\":\"yx\"}", MapWithCtor.class); [EOL]     assertEquals(Boolean.TRUE, result.get("entry")); [EOL]     assertEquals("yx", result.get("xy")); [EOL]     assertEquals(2, result.size()); [EOL]     assertEquals("abc", result._text); [EOL]     assertEquals(123, result._number); [EOL] }
public void testMapWithConstructor() throws Exception { [EOL]     MapWithCtor result = MAPPER.readValue("{\"text\":\"abc\", \"entry\":true, \"number\":123, \"xy\":\"yx\"}", MapWithCtor.class); [EOL]     assertEquals(Boolean.TRUE, result.get("entry")); [EOL]     assertEquals("yx", result.get("xy")); [EOL]     assertEquals(2, result.size()); [EOL]     assertEquals("abc", result._text); [EOL]     assertEquals(123, result._number); [EOL] }
public void testMapWithConstructor() throws Exception { [EOL]     MapWithCtor result = MAPPER.readValue("{\"text\":\"abc\", \"entry\":true, \"number\":123, \"xy\":\"yx\"}", MapWithCtor.class); [EOL]     assertEquals(Boolean.TRUE, result.get("entry")); [EOL]     assertEquals("yx", result.get("xy")); [EOL]     assertEquals(2, result.size()); [EOL]     assertEquals("abc", result._text); [EOL]     assertEquals(123, result._number); [EOL] }
public void testMapWithConstructor() throws Exception { [EOL]     MapWithCtor result = MAPPER.readValue("{\"text\":\"abc\", \"entry\":true, \"number\":123, \"xy\":\"yx\"}", MapWithCtor.class); [EOL]     assertEquals(Boolean.TRUE, result.get("entry")); [EOL]     assertEquals("yx", result.get("xy")); [EOL]     assertEquals(2, result.size()); [EOL]     assertEquals("abc", result._text); [EOL]     assertEquals(123, result._number); [EOL] }
public void testMapWithConstructor() throws Exception { [EOL]     MapWithCtor result = MAPPER.readValue("{\"text\":\"abc\", \"entry\":true, \"number\":123, \"xy\":\"yx\"}", MapWithCtor.class); [EOL]     assertEquals(Boolean.TRUE, result.get("entry")); [EOL]     assertEquals("yx", result.get("xy")); [EOL]     assertEquals(2, result.size()); [EOL]     assertEquals("abc", result._text); [EOL]     assertEquals(123, result._number); [EOL] }
public void testMapWithConstructor() throws Exception { [EOL]     MapWithCtor result = MAPPER.readValue("{\"text\":\"abc\", \"entry\":true, \"number\":123, \"xy\":\"yx\"}", MapWithCtor.class); [EOL]     assertEquals(Boolean.TRUE, result.get("entry")); [EOL]     assertEquals("yx", result.get("xy")); [EOL]     assertEquals(2, result.size()); [EOL]     assertEquals("abc", result._text); [EOL]     assertEquals(123, result._number); [EOL] }
public void testSimpleSetterlessMapOk() throws Exception { [EOL]     MapBean result = new ObjectMapper().readValue("{\"values\":{ \"a\": 15, \"b\" : -3 }}", MapBean.class); [EOL]     Map<String, Integer> m = result._values; [EOL]     assertEquals(2, m.size()); [EOL]     assertEquals(Integer.valueOf(15), m.get("a")); [EOL]     assertEquals(Integer.valueOf(-3), m.get("b")); [EOL] }
public void testSimpleSetterlessMapOk() throws Exception { [EOL]     MapBean result = new ObjectMapper().readValue("{\"values\":{ \"a\": 15, \"b\" : -3 }}", MapBean.class); [EOL]     Map<String, Integer> m = result._values; [EOL]     assertEquals(2, m.size()); [EOL]     assertEquals(Integer.valueOf(15), m.get("a")); [EOL]     assertEquals(Integer.valueOf(-3), m.get("b")); [EOL] }
public void testSimpleSetterlessMapOk() throws Exception { [EOL]     MapBean result = new ObjectMapper().readValue("{\"values\":{ \"a\": 15, \"b\" : -3 }}", MapBean.class); [EOL]     Map<String, Integer> m = result._values; [EOL]     assertEquals(2, m.size()); [EOL]     assertEquals(Integer.valueOf(15), m.get("a")); [EOL]     assertEquals(Integer.valueOf(-3), m.get("b")); [EOL] }
public void testCalendarMap() throws Exception { [EOL]     Calendar c = Calendar.getInstance(TimeZone.getTimeZone("GMT")); [EOL]     c.setTimeInMillis(123456000L); [EOL]     DateFormat fmt = new SimpleDateFormat("EEE, dd MMM yyyy HH:mm:ss zzz", Locale.US); [EOL]     String JSON = "{ \"" + fmt.format(c.getTime()) + "\" : \"\", \"" + new Date(0).getTime() + "\" : null }"; [EOL]     HashMap<Calendar, String> result = MAPPER.readValue(JSON, new TypeReference<HashMap<Calendar, String>>() { [EOL]     }); [EOL]     assertNotNull(result); [EOL]     assertEquals(HashMap.class, result.getClass()); [EOL]     assertEquals(2, result.size()); [EOL]     assertTrue(result.containsKey(c)); [EOL]     assertEquals("", result.get(c)); [EOL]     c.setTimeInMillis(0); [EOL]     assertTrue(result.containsKey(c)); [EOL]     assertNull(result.get(c)); [EOL] }
public void testCalendarMap() throws Exception { [EOL]     Calendar c = Calendar.getInstance(TimeZone.getTimeZone("GMT")); [EOL]     c.setTimeInMillis(123456000L); [EOL]     DateFormat fmt = new SimpleDateFormat("EEE, dd MMM yyyy HH:mm:ss zzz", Locale.US); [EOL]     String JSON = "{ \"" + fmt.format(c.getTime()) + "\" : \"\", \"" + new Date(0).getTime() + "\" : null }"; [EOL]     HashMap<Calendar, String> result = MAPPER.readValue(JSON, new TypeReference<HashMap<Calendar, String>>() { [EOL]     }); [EOL]     assertNotNull(result); [EOL]     assertEquals(HashMap.class, result.getClass()); [EOL]     assertEquals(2, result.size()); [EOL]     assertTrue(result.containsKey(c)); [EOL]     assertEquals("", result.get(c)); [EOL]     c.setTimeInMillis(0); [EOL]     assertTrue(result.containsKey(c)); [EOL]     assertNull(result.get(c)); [EOL] }
public void testCalendarMap() throws Exception { [EOL]     Calendar c = Calendar.getInstance(TimeZone.getTimeZone("GMT")); [EOL]     c.setTimeInMillis(123456000L); [EOL]     DateFormat fmt = new SimpleDateFormat("EEE, dd MMM yyyy HH:mm:ss zzz", Locale.US); [EOL]     String JSON = "{ \"" + fmt.format(c.getTime()) + "\" : \"\", \"" + new Date(0).getTime() + "\" : null }"; [EOL]     HashMap<Calendar, String> result = MAPPER.readValue(JSON, new TypeReference<HashMap<Calendar, String>>() { [EOL]     }); [EOL]     assertNotNull(result); [EOL]     assertEquals(HashMap.class, result.getClass()); [EOL]     assertEquals(2, result.size()); [EOL]     assertTrue(result.containsKey(c)); [EOL]     assertEquals("", result.get(c)); [EOL]     c.setTimeInMillis(0); [EOL]     assertTrue(result.containsKey(c)); [EOL]     assertNull(result.get(c)); [EOL] }
public void testCalendarMap() throws Exception { [EOL]     Calendar c = Calendar.getInstance(TimeZone.getTimeZone("GMT")); [EOL]     c.setTimeInMillis(123456000L); [EOL]     DateFormat fmt = new SimpleDateFormat("EEE, dd MMM yyyy HH:mm:ss zzz", Locale.US); [EOL]     String JSON = "{ \"" + fmt.format(c.getTime()) + "\" : \"\", \"" + new Date(0).getTime() + "\" : null }"; [EOL]     HashMap<Calendar, String> result = MAPPER.readValue(JSON, new TypeReference<HashMap<Calendar, String>>() { [EOL]     }); [EOL]     assertNotNull(result); [EOL]     assertEquals(HashMap.class, result.getClass()); [EOL]     assertEquals(2, result.size()); [EOL]     assertTrue(result.containsKey(c)); [EOL]     assertEquals("", result.get(c)); [EOL]     c.setTimeInMillis(0); [EOL]     assertTrue(result.containsKey(c)); [EOL]     assertNull(result.get(c)); [EOL] }
public void testRoundTripMap() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     AnimalMap input = new AnimalMap(); [EOL]     input.put("venla", new MaineCoon("Venla", true)); [EOL]     input.put("ama", new Dog("Amadeus", 13)); [EOL]     String json = m.writeValueAsString(input); [EOL]     AnimalMap output = m.readValue(json, AnimalMap.class); [EOL]     assertEquals(input, output); [EOL] }
public void testRoundTripMap() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     AnimalMap input = new AnimalMap(); [EOL]     input.put("venla", new MaineCoon("Venla", true)); [EOL]     input.put("ama", new Dog("Amadeus", 13)); [EOL]     String json = m.writeValueAsString(input); [EOL]     AnimalMap output = m.readValue(json, AnimalMap.class); [EOL]     assertEquals(input, output); [EOL] }
public void testRoundTripMap() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     AnimalMap input = new AnimalMap(); [EOL]     input.put("venla", new MaineCoon("Venla", true)); [EOL]     input.put("ama", new Dog("Amadeus", 13)); [EOL]     String json = m.writeValueAsString(input); [EOL]     AnimalMap output = m.readValue(json, AnimalMap.class); [EOL]     assertEquals(input, output); [EOL] }
public void testRoundTripMap() throws Exception { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     AnimalMap input = new AnimalMap(); [EOL]     input.put("venla", new MaineCoon("Venla", true)); [EOL]     input.put("ama", new Dog("Amadeus", 13)); [EOL]     String json = m.writeValueAsString(input); [EOL]     AnimalMap output = m.readValue(json, AnimalMap.class); [EOL]     assertEquals(input, output); [EOL] }
public void testMapWithConstructor() throws Exception { [EOL]     MapWithCtor result = MAPPER.readValue("{\"text\":\"abc\", \"entry\":true, \"number\":123, \"xy\":\"yx\"}", MapWithCtor.class); [EOL]     assertEquals(Boolean.TRUE, result.get("entry")); [EOL]     assertEquals("yx", result.get("xy")); [EOL]     assertEquals(2, result.size()); [EOL]     assertEquals("abc", result._text); [EOL]     assertEquals(123, result._number); [EOL] }
public void testPrefixedUnwrapping() throws Exception { [EOL]     PrefixUnwrap bean = mapper.readValue("{\"name\":\"Axel\",\"_x\":4,\"_y\":7}", PrefixUnwrap.class); [EOL]     assertNotNull(bean); [EOL]     assertEquals("Axel", bean.name); [EOL]     assertNotNull(bean.location); [EOL]     assertEquals(4, bean.location.x); [EOL]     assertEquals(7, bean.location.y); [EOL] }
public void testPrefixedUnwrapping() throws Exception { [EOL]     PrefixUnwrap bean = mapper.readValue("{\"name\":\"Axel\",\"_x\":4,\"_y\":7}", PrefixUnwrap.class); [EOL]     assertNotNull(bean); [EOL]     assertEquals("Axel", bean.name); [EOL]     assertNotNull(bean.location); [EOL]     assertEquals(4, bean.location.x); [EOL]     assertEquals(7, bean.location.y); [EOL] }
public void testFormatMillis() { [EOL]     String result = ISO8601Utils.format(date, true); [EOL]     assertEquals("2007-08-13T19:51:23.789Z", result); [EOL]     result = ISO8601Utils.format(date, false); [EOL]     assertEquals("2007-08-13T19:51:23Z", result); [EOL] }
public void testFormatMillis() { [EOL]     String result = ISO8601Utils.format(date, true); [EOL]     assertEquals("2007-08-13T19:51:23.789Z", result); [EOL]     result = ISO8601Utils.format(date, false); [EOL]     assertEquals("2007-08-13T19:51:23Z", result); [EOL] }
public void testFormatTimeZone() { [EOL]     String result = ISO8601Utils.format(date, false, TimeZone.getTimeZone("GMT+02:00")); [EOL]     assertEquals("2007-08-13T21:51:23+02:00", result); [EOL]     result = ISO8601Utils.format(date, true, TimeZone.getTimeZone("GMT+02:00")); [EOL]     assertEquals("2007-08-13T21:51:23.789+02:00", result); [EOL]     result = ISO8601Utils.format(date, true, TimeZone.getTimeZone("GMT")); [EOL]     assertEquals("2007-08-13T19:51:23.789Z", result); [EOL] }
public void testFormatTimeZone() { [EOL]     String result = ISO8601Utils.format(date, false, TimeZone.getTimeZone("GMT+02:00")); [EOL]     assertEquals("2007-08-13T21:51:23+02:00", result); [EOL]     result = ISO8601Utils.format(date, true, TimeZone.getTimeZone("GMT+02:00")); [EOL]     assertEquals("2007-08-13T21:51:23.789+02:00", result); [EOL]     result = ISO8601Utils.format(date, true, TimeZone.getTimeZone("GMT")); [EOL]     assertEquals("2007-08-13T19:51:23.789Z", result); [EOL] }
public void testFormatTimeZone() { [EOL]     String result = ISO8601Utils.format(date, false, TimeZone.getTimeZone("GMT+02:00")); [EOL]     assertEquals("2007-08-13T21:51:23+02:00", result); [EOL]     result = ISO8601Utils.format(date, true, TimeZone.getTimeZone("GMT+02:00")); [EOL]     assertEquals("2007-08-13T21:51:23.789+02:00", result); [EOL]     result = ISO8601Utils.format(date, true, TimeZone.getTimeZone("GMT")); [EOL]     assertEquals("2007-08-13T19:51:23.789Z", result); [EOL] }
public void testFormatTimeZone() { [EOL]     String result = ISO8601Utils.format(date, false, TimeZone.getTimeZone("GMT+02:00")); [EOL]     assertEquals("2007-08-13T21:51:23+02:00", result); [EOL]     result = ISO8601Utils.format(date, true, TimeZone.getTimeZone("GMT+02:00")); [EOL]     assertEquals("2007-08-13T21:51:23.789+02:00", result); [EOL]     result = ISO8601Utils.format(date, true, TimeZone.getTimeZone("GMT")); [EOL]     assertEquals("2007-08-13T19:51:23.789Z", result); [EOL] }
public void testJavaType() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     TypeFactory tf = TypeFactory.defaultInstance(); [EOL]     String json = mapper.writeValueAsString(tf.constructType(String.class)); [EOL]     assertEquals(quote(java.lang.String.class.getName()), json); [EOL]     JavaType t = mapper.readValue(json, JavaType.class); [EOL]     assertNotNull(t); [EOL]     assertEquals(String.class, t.getRawClass()); [EOL] }
public void testJavaType() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     TypeFactory tf = TypeFactory.defaultInstance(); [EOL]     String json = mapper.writeValueAsString(tf.constructType(String.class)); [EOL]     assertEquals(quote(java.lang.String.class.getName()), json); [EOL]     JavaType t = mapper.readValue(json, JavaType.class); [EOL]     assertNotNull(t); [EOL]     assertEquals(String.class, t.getRawClass()); [EOL] }
public void testJavaType() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     TypeFactory tf = TypeFactory.defaultInstance(); [EOL]     String json = mapper.writeValueAsString(tf.constructType(String.class)); [EOL]     assertEquals(quote(java.lang.String.class.getName()), json); [EOL]     JavaType t = mapper.readValue(json, JavaType.class); [EOL]     assertNotNull(t); [EOL]     assertEquals(String.class, t.getRawClass()); [EOL] }
public void testJavaType() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     TypeFactory tf = TypeFactory.defaultInstance(); [EOL]     String json = mapper.writeValueAsString(tf.constructType(String.class)); [EOL]     assertEquals(quote(java.lang.String.class.getName()), json); [EOL]     JavaType t = mapper.readValue(json, JavaType.class); [EOL]     assertNotNull(t); [EOL]     assertEquals(String.class, t.getRawClass()); [EOL] }
public void testJavaType() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     TypeFactory tf = TypeFactory.defaultInstance(); [EOL]     String json = mapper.writeValueAsString(tf.constructType(String.class)); [EOL]     assertEquals(quote(java.lang.String.class.getName()), json); [EOL]     JavaType t = mapper.readValue(json, JavaType.class); [EOL]     assertNotNull(t); [EOL]     assertEquals(String.class, t.getRawClass()); [EOL] }
public void testJavaType() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     TypeFactory tf = TypeFactory.defaultInstance(); [EOL]     String json = mapper.writeValueAsString(tf.constructType(String.class)); [EOL]     assertEquals(quote(java.lang.String.class.getName()), json); [EOL]     JavaType t = mapper.readValue(json, JavaType.class); [EOL]     assertNotNull(t); [EOL]     assertEquals(String.class, t.getRawClass()); [EOL] }
public void testJavaType() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     TypeFactory tf = TypeFactory.defaultInstance(); [EOL]     String json = mapper.writeValueAsString(tf.constructType(String.class)); [EOL]     assertEquals(quote(java.lang.String.class.getName()), json); [EOL]     JavaType t = mapper.readValue(json, JavaType.class); [EOL]     assertNotNull(t); [EOL]     assertEquals(String.class, t.getRawClass()); [EOL] }
public void testJavaType() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     TypeFactory tf = TypeFactory.defaultInstance(); [EOL]     String json = mapper.writeValueAsString(tf.constructType(String.class)); [EOL]     assertEquals(quote(java.lang.String.class.getName()), json); [EOL]     JavaType t = mapper.readValue(json, JavaType.class); [EOL]     assertNotNull(t); [EOL]     assertEquals(String.class, t.getRawClass()); [EOL] }
public void testDefaultKeySerializer() throws IOException { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.getSerializerProvider().setDefaultKeySerializer(new DefaultKeySerializer()); [EOL]     Map<String, String> map = new HashMap<String, String>(); [EOL]     map.put("a", "b"); [EOL]     assertEquals("{\"DEFAULT:a\":\"b\"}", m.writeValueAsString(map)); [EOL] }
public void testDefaultKeySerializer() throws IOException { [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.getSerializerProvider().setDefaultKeySerializer(new DefaultKeySerializer()); [EOL]     Map<String, String> map = new HashMap<String, String>(); [EOL]     map.put("a", "b"); [EOL]     assertEquals("{\"DEFAULT:a\":\"b\"}", m.writeValueAsString(map)); [EOL] }
public void testOverriddenDefaultNulls() throws Exception { [EOL]     DefaultSerializerProvider sp = new DefaultSerializerProvider.Impl(); [EOL]     sp.setNullValueSerializer(new NullSerializer()); [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.setSerializerProvider(sp); [EOL]     assertEquals("\"foobar\"", m.writeValueAsString(null)); [EOL] }
public void testOverriddenDefaultNulls() throws Exception { [EOL]     DefaultSerializerProvider sp = new DefaultSerializerProvider.Impl(); [EOL]     sp.setNullValueSerializer(new NullSerializer()); [EOL]     ObjectMapper m = new ObjectMapper(); [EOL]     m.setSerializerProvider(sp); [EOL]     assertEquals("\"foobar\"", m.writeValueAsString(null)); [EOL] }
public void testDateWithJsonFormat() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     String json; [EOL]     mapper.disable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS); [EOL]     json = mapper.writeValueAsString(new DateAsNumberBean(0L)); [EOL]     assertEquals("{\"date\":0}", json); [EOL]     mapper.enable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS); [EOL]     json = mapper.writer().with(getUTCTimeZone()).writeValueAsString(new DateAsStringBean(0L)); [EOL]     assertEquals("{\"date\":\"1970-01-01\"}", json); [EOL]     json = mapper.writeValueAsString(new DateInCETBean(0L)); [EOL]     assertEquals("{\"date\":\"1970-01-01,01:00\"}", json); [EOL] }
public void testInList() throws Exception { [EOL]     IntExtBean bean = new IntExtBean(); [EOL]     bean.add(1); [EOL]     bean.add(2); [EOL]     String json = MAPPER.writeValueAsString(bean); [EOL]     assertEquals(json, "{\"values\":[{\"i\":1},{\"i\":2}]}"); [EOL] }
public void testInList() throws Exception { [EOL]     IntExtBean bean = new IntExtBean(); [EOL]     bean.add(1); [EOL]     bean.add(2); [EOL]     String json = MAPPER.writeValueAsString(bean); [EOL]     assertEquals(json, "{\"values\":[{\"i\":1},{\"i\":2}]}"); [EOL] }
public void testInList() throws Exception { [EOL]     IntExtBean bean = new IntExtBean(); [EOL]     bean.add(1); [EOL]     bean.add(2); [EOL]     String json = MAPPER.writeValueAsString(bean); [EOL]     assertEquals(json, "{\"values\":[{\"i\":1},{\"i\":2}]}"); [EOL] }
public void testInList() throws Exception { [EOL]     IntExtBean bean = new IntExtBean(); [EOL]     bean.add(1); [EOL]     bean.add(2); [EOL]     String json = MAPPER.writeValueAsString(bean); [EOL]     assertEquals(json, "{\"values\":[{\"i\":1},{\"i\":2}]}"); [EOL] }
public void testBeanArray() throws Exception { [EOL]     List<Bean1> src = new ArrayList<Bean1>(); [EOL]     List<Bean2> b2 = new ArrayList<Bean2>(); [EOL]     b2.add(new Bean2("a")); [EOL]     b2.add(new Bean2("foobar")); [EOL]     src.add(new Bean1(1, 2, b2)); [EOL]     b2 = new ArrayList<Bean2>(); [EOL]     b2.add(null); [EOL]     src.add(new Bean1(4, 5, b2)); [EOL]     StringWriter sw = new StringWriter(); [EOL]     MAPPER.writeValue(sw, src); [EOL]     List<Bean1> result = MAPPER.readValue(sw.toString(), new TypeReference<List<Bean1>>() { [EOL]     }); [EOL]     assertNotNull(result); [EOL]     assertEquals(src, result); [EOL] }
public void testBeanArray() throws Exception { [EOL]     List<Bean1> src = new ArrayList<Bean1>(); [EOL]     List<Bean2> b2 = new ArrayList<Bean2>(); [EOL]     b2.add(new Bean2("a")); [EOL]     b2.add(new Bean2("foobar")); [EOL]     src.add(new Bean1(1, 2, b2)); [EOL]     b2 = new ArrayList<Bean2>(); [EOL]     b2.add(null); [EOL]     src.add(new Bean1(4, 5, b2)); [EOL]     StringWriter sw = new StringWriter(); [EOL]     MAPPER.writeValue(sw, src); [EOL]     List<Bean1> result = MAPPER.readValue(sw.toString(), new TypeReference<List<Bean1>>() { [EOL]     }); [EOL]     assertNotNull(result); [EOL]     assertEquals(src, result); [EOL] }
public void testIncompatibleRootType() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     SubType bean = new SubType(); [EOL]     ObjectWriter w = mapper.writerWithType(HashMap.class); [EOL]     try { [EOL]         w.writeValueAsString(bean); [EOL]         fail("Should have failed due to incompatible type"); [EOL]     } catch (JsonProcessingException e) { [EOL]         verifyException(e, "Incompatible types"); [EOL]     } [EOL] }
public void testIncompatibleRootType() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     SubType bean = new SubType(); [EOL]     ObjectWriter w = mapper.writerWithType(HashMap.class); [EOL]     try { [EOL]         w.writeValueAsString(bean); [EOL]         fail("Should have failed due to incompatible type"); [EOL]     } catch (JsonProcessingException e) { [EOL]         verifyException(e, "Incompatible types"); [EOL]     } [EOL] }
public void testIncompatibleRootType() throws Exception { [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     SubType bean = new SubType(); [EOL]     ObjectWriter w = mapper.writerWithType(HashMap.class); [EOL]     try { [EOL]         w.writeValueAsString(bean); [EOL]         fail("Should have failed due to incompatible type"); [EOL]     } catch (JsonProcessingException e) { [EOL]         verifyException(e, "Incompatible types"); [EOL]     } [EOL] }
public void testFailWithDupProps() throws Exception { [EOL]     BeanWithConflict bean = new BeanWithConflict(); [EOL]     ObjectMapper mapper = new ObjectMapper(); [EOL]     try { [EOL]         String json = mapper.writeValueAsString(bean); [EOL]         fail("Should have failed due to conflicting accessor definitions; got JSON = " + json); [EOL]     } catch (JsonProcessingException e) { [EOL]         verifyException(e, "Conflicting getter definitions"); [EOL]     } [EOL] }
