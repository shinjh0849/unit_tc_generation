public void testEnumSubclass() { [EOL]     assertFalse(Roshambo.class == Roshambo.ROCK.getClass()); [EOL]     assertEquals("\"ROCK\"", gson.toJson(Roshambo.ROCK)); [EOL]     assertEquals("[\"ROCK\",\"PAPER\",\"SCISSORS\"]", gson.toJson(EnumSet.allOf(Roshambo.class))); [EOL]     assertEquals(Roshambo.ROCK, gson.fromJson("\"ROCK\"", Roshambo.class)); [EOL]     assertEquals(EnumSet.allOf(Roshambo.class), gson.fromJson("[\"ROCK\",\"PAPER\",\"SCISSORS\"]", new TypeToken<Set<Roshambo>>() { [EOL]     }.getType())); [EOL] }
public void testEnumSubclass() { [EOL]     assertFalse(Roshambo.class == Roshambo.ROCK.getClass()); [EOL]     assertEquals("\"ROCK\"", gson.toJson(Roshambo.ROCK)); [EOL]     assertEquals("[\"ROCK\",\"PAPER\",\"SCISSORS\"]", gson.toJson(EnumSet.allOf(Roshambo.class))); [EOL]     assertEquals(Roshambo.ROCK, gson.fromJson("\"ROCK\"", Roshambo.class)); [EOL]     assertEquals(EnumSet.allOf(Roshambo.class), gson.fromJson("[\"ROCK\",\"PAPER\",\"SCISSORS\"]", new TypeToken<Set<Roshambo>>() { [EOL]     }.getType())); [EOL] }
public void testEnumSubclass() { [EOL]     assertFalse(Roshambo.class == Roshambo.ROCK.getClass()); [EOL]     assertEquals("\"ROCK\"", gson.toJson(Roshambo.ROCK)); [EOL]     assertEquals("[\"ROCK\",\"PAPER\",\"SCISSORS\"]", gson.toJson(EnumSet.allOf(Roshambo.class))); [EOL]     assertEquals(Roshambo.ROCK, gson.fromJson("\"ROCK\"", Roshambo.class)); [EOL]     assertEquals(EnumSet.allOf(Roshambo.class), gson.fromJson("[\"ROCK\",\"PAPER\",\"SCISSORS\"]", new TypeToken<Set<Roshambo>>() { [EOL]     }.getType())); [EOL] }
public void testEnumSubclass() { [EOL]     assertFalse(Roshambo.class == Roshambo.ROCK.getClass()); [EOL]     assertEquals("\"ROCK\"", gson.toJson(Roshambo.ROCK)); [EOL]     assertEquals("[\"ROCK\",\"PAPER\",\"SCISSORS\"]", gson.toJson(EnumSet.allOf(Roshambo.class))); [EOL]     assertEquals(Roshambo.ROCK, gson.fromJson("\"ROCK\"", Roshambo.class)); [EOL]     assertEquals(EnumSet.allOf(Roshambo.class), gson.fromJson("[\"ROCK\",\"PAPER\",\"SCISSORS\"]", new TypeToken<Set<Roshambo>>() { [EOL]     }.getType())); [EOL] }
public void testEnumSubclass() { [EOL]     assertFalse(Roshambo.class == Roshambo.ROCK.getClass()); [EOL]     assertEquals("\"ROCK\"", gson.toJson(Roshambo.ROCK)); [EOL]     assertEquals("[\"ROCK\",\"PAPER\",\"SCISSORS\"]", gson.toJson(EnumSet.allOf(Roshambo.class))); [EOL]     assertEquals(Roshambo.ROCK, gson.fromJson("\"ROCK\"", Roshambo.class)); [EOL]     assertEquals(EnumSet.allOf(Roshambo.class), gson.fromJson("[\"ROCK\",\"PAPER\",\"SCISSORS\"]", new TypeToken<Set<Roshambo>>() { [EOL]     }.getType())); [EOL] }
public void testEnumSubclass() { [EOL]     assertFalse(Roshambo.class == Roshambo.ROCK.getClass()); [EOL]     assertEquals("\"ROCK\"", gson.toJson(Roshambo.ROCK)); [EOL]     assertEquals("[\"ROCK\",\"PAPER\",\"SCISSORS\"]", gson.toJson(EnumSet.allOf(Roshambo.class))); [EOL]     assertEquals(Roshambo.ROCK, gson.fromJson("\"ROCK\"", Roshambo.class)); [EOL]     assertEquals(EnumSet.allOf(Roshambo.class), gson.fromJson("[\"ROCK\",\"PAPER\",\"SCISSORS\"]", new TypeToken<Set<Roshambo>>() { [EOL]     }.getType())); [EOL] }
public void testTopLevelArrayOfIntsSerialization() { [EOL]     int[] target = { 1, 2, 3, 4, 5, 6, 7, 8, 9 }; [EOL]     assertEquals("[1,2,3,4,5,6,7,8,9]", gson.toJson(target)); [EOL] }
public void testTopLevelArrayOfIntsSerialization() { [EOL]     int[] target = { 1, 2, 3, 4, 5, 6, 7, 8, 9 }; [EOL]     assertEquals("[1,2,3,4,5,6,7,8,9]", gson.toJson(target)); [EOL] }
public void testTopLevelArrayOfIntsSerialization() { [EOL]     int[] target = { 1, 2, 3, 4, 5, 6, 7, 8, 9 }; [EOL]     assertEquals("[1,2,3,4,5,6,7,8,9]", gson.toJson(target)); [EOL] }
public void testTopLevelArrayOfIntsSerialization() { [EOL]     int[] target = { 1, 2, 3, 4, 5, 6, 7, 8, 9 }; [EOL]     assertEquals("[1,2,3,4,5,6,7,8,9]", gson.toJson(target)); [EOL] }
public void testTopLevelArrayOfIntsSerialization() { [EOL]     int[] target = { 1, 2, 3, 4, 5, 6, 7, 8, 9 }; [EOL]     assertEquals("[1,2,3,4,5,6,7,8,9]", gson.toJson(target)); [EOL] }
public void testTopLevelArrayOfIntsSerialization() { [EOL]     int[] target = { 1, 2, 3, 4, 5, 6, 7, 8, 9 }; [EOL]     assertEquals("[1,2,3,4,5,6,7,8,9]", gson.toJson(target)); [EOL] }
public void testEnumSubclass() { [EOL]     assertFalse(Roshambo.class == Roshambo.ROCK.getClass()); [EOL]     assertEquals("\"ROCK\"", gson.toJson(Roshambo.ROCK)); [EOL]     assertEquals("[\"ROCK\",\"PAPER\",\"SCISSORS\"]", gson.toJson(EnumSet.allOf(Roshambo.class))); [EOL]     assertEquals(Roshambo.ROCK, gson.fromJson("\"ROCK\"", Roshambo.class)); [EOL]     assertEquals(EnumSet.allOf(Roshambo.class), gson.fromJson("[\"ROCK\",\"PAPER\",\"SCISSORS\"]", new TypeToken<Set<Roshambo>>() { [EOL]     }.getType())); [EOL] }
public void testEnumSubclass() { [EOL]     assertFalse(Roshambo.class == Roshambo.ROCK.getClass()); [EOL]     assertEquals("\"ROCK\"", gson.toJson(Roshambo.ROCK)); [EOL]     assertEquals("[\"ROCK\",\"PAPER\",\"SCISSORS\"]", gson.toJson(EnumSet.allOf(Roshambo.class))); [EOL]     assertEquals(Roshambo.ROCK, gson.fromJson("\"ROCK\"", Roshambo.class)); [EOL]     assertEquals(EnumSet.allOf(Roshambo.class), gson.fromJson("[\"ROCK\",\"PAPER\",\"SCISSORS\"]", new TypeToken<Set<Roshambo>>() { [EOL]     }.getType())); [EOL] }
public void testEnumSubclass() { [EOL]     assertFalse(Roshambo.class == Roshambo.ROCK.getClass()); [EOL]     assertEquals("\"ROCK\"", gson.toJson(Roshambo.ROCK)); [EOL]     assertEquals("[\"ROCK\",\"PAPER\",\"SCISSORS\"]", gson.toJson(EnumSet.allOf(Roshambo.class))); [EOL]     assertEquals(Roshambo.ROCK, gson.fromJson("\"ROCK\"", Roshambo.class)); [EOL]     assertEquals(EnumSet.allOf(Roshambo.class), gson.fromJson("[\"ROCK\",\"PAPER\",\"SCISSORS\"]", new TypeToken<Set<Roshambo>>() { [EOL]     }.getType())); [EOL] }
public void testEnumSubclass() { [EOL]     assertFalse(Roshambo.class == Roshambo.ROCK.getClass()); [EOL]     assertEquals("\"ROCK\"", gson.toJson(Roshambo.ROCK)); [EOL]     assertEquals("[\"ROCK\",\"PAPER\",\"SCISSORS\"]", gson.toJson(EnumSet.allOf(Roshambo.class))); [EOL]     assertEquals(Roshambo.ROCK, gson.fromJson("\"ROCK\"", Roshambo.class)); [EOL]     assertEquals(EnumSet.allOf(Roshambo.class), gson.fromJson("[\"ROCK\",\"PAPER\",\"SCISSORS\"]", new TypeToken<Set<Roshambo>>() { [EOL]     }.getType())); [EOL] }
public void testEnumSubclass() { [EOL]     assertFalse(Roshambo.class == Roshambo.ROCK.getClass()); [EOL]     assertEquals("\"ROCK\"", gson.toJson(Roshambo.ROCK)); [EOL]     assertEquals("[\"ROCK\",\"PAPER\",\"SCISSORS\"]", gson.toJson(EnumSet.allOf(Roshambo.class))); [EOL]     assertEquals(Roshambo.ROCK, gson.fromJson("\"ROCK\"", Roshambo.class)); [EOL]     assertEquals(EnumSet.allOf(Roshambo.class), gson.fromJson("[\"ROCK\",\"PAPER\",\"SCISSORS\"]", new TypeToken<Set<Roshambo>>() { [EOL]     }.getType())); [EOL] }
public void testEnumSubclass() { [EOL]     assertFalse(Roshambo.class == Roshambo.ROCK.getClass()); [EOL]     assertEquals("\"ROCK\"", gson.toJson(Roshambo.ROCK)); [EOL]     assertEquals("[\"ROCK\",\"PAPER\",\"SCISSORS\"]", gson.toJson(EnumSet.allOf(Roshambo.class))); [EOL]     assertEquals(Roshambo.ROCK, gson.fromJson("\"ROCK\"", Roshambo.class)); [EOL]     assertEquals(EnumSet.allOf(Roshambo.class), gson.fromJson("[\"ROCK\",\"PAPER\",\"SCISSORS\"]", new TypeToken<Set<Roshambo>>() { [EOL]     }.getType())); [EOL] }
public void testEnumSubclass() { [EOL]     assertFalse(Roshambo.class == Roshambo.ROCK.getClass()); [EOL]     assertEquals("\"ROCK\"", gson.toJson(Roshambo.ROCK)); [EOL]     assertEquals("[\"ROCK\",\"PAPER\",\"SCISSORS\"]", gson.toJson(EnumSet.allOf(Roshambo.class))); [EOL]     assertEquals(Roshambo.ROCK, gson.fromJson("\"ROCK\"", Roshambo.class)); [EOL]     assertEquals(EnumSet.allOf(Roshambo.class), gson.fromJson("[\"ROCK\",\"PAPER\",\"SCISSORS\"]", new TypeToken<Set<Roshambo>>() { [EOL]     }.getType())); [EOL] }
public void testEnumSubclass() { [EOL]     assertFalse(Roshambo.class == Roshambo.ROCK.getClass()); [EOL]     assertEquals("\"ROCK\"", gson.toJson(Roshambo.ROCK)); [EOL]     assertEquals("[\"ROCK\",\"PAPER\",\"SCISSORS\"]", gson.toJson(EnumSet.allOf(Roshambo.class))); [EOL]     assertEquals(Roshambo.ROCK, gson.fromJson("\"ROCK\"", Roshambo.class)); [EOL]     assertEquals(EnumSet.allOf(Roshambo.class), gson.fromJson("[\"ROCK\",\"PAPER\",\"SCISSORS\"]", new TypeToken<Set<Roshambo>>() { [EOL]     }.getType())); [EOL] }
public void testEnumSubclass() { [EOL]     assertFalse(Roshambo.class == Roshambo.ROCK.getClass()); [EOL]     assertEquals("\"ROCK\"", gson.toJson(Roshambo.ROCK)); [EOL]     assertEquals("[\"ROCK\",\"PAPER\",\"SCISSORS\"]", gson.toJson(EnumSet.allOf(Roshambo.class))); [EOL]     assertEquals(Roshambo.ROCK, gson.fromJson("\"ROCK\"", Roshambo.class)); [EOL]     assertEquals(EnumSet.allOf(Roshambo.class), gson.fromJson("[\"ROCK\",\"PAPER\",\"SCISSORS\"]", new TypeToken<Set<Roshambo>>() { [EOL]     }.getType())); [EOL] }
public void testEnumSubclass() { [EOL]     assertFalse(Roshambo.class == Roshambo.ROCK.getClass()); [EOL]     assertEquals("\"ROCK\"", gson.toJson(Roshambo.ROCK)); [EOL]     assertEquals("[\"ROCK\",\"PAPER\",\"SCISSORS\"]", gson.toJson(EnumSet.allOf(Roshambo.class))); [EOL]     assertEquals(Roshambo.ROCK, gson.fromJson("\"ROCK\"", Roshambo.class)); [EOL]     assertEquals(EnumSet.allOf(Roshambo.class), gson.fromJson("[\"ROCK\",\"PAPER\",\"SCISSORS\"]", new TypeToken<Set<Roshambo>>() { [EOL]     }.getType())); [EOL] }
public void testPrettyPrintArray() throws IOException { [EOL]     StringWriter stringWriter = new StringWriter(); [EOL]     JsonWriter jsonWriter = new JsonWriter(stringWriter); [EOL]     jsonWriter.setIndent("   "); [EOL]     jsonWriter.beginArray(); [EOL]     jsonWriter.value(true); [EOL]     jsonWriter.value(false); [EOL]     jsonWriter.value(5.0); [EOL]     jsonWriter.nullValue(); [EOL]     jsonWriter.beginObject(); [EOL]     jsonWriter.name("a").value(6.0); [EOL]     jsonWriter.name("b").value(7.0); [EOL]     jsonWriter.endObject(); [EOL]     jsonWriter.beginArray(); [EOL]     jsonWriter.value(8.0); [EOL]     jsonWriter.value(9.0); [EOL]     jsonWriter.endArray(); [EOL]     jsonWriter.endArray(); [EOL]     String expected = "[\n" + "   true,\n" + "   false,\n" + "   5.0,\n" + "   null,\n" + "   {\n" + "      \"a\": 6.0,\n" + "      \"b\": 7.0\n" + "   },\n" + "   [\n" + "      8.0,\n" + "      9.0\n" + "   ]\n" + "]"; [EOL]     assertEquals(expected, stringWriter.toString()); [EOL] }
public void testPrettyPrintArray() throws IOException { [EOL]     StringWriter stringWriter = new StringWriter(); [EOL]     JsonWriter jsonWriter = new JsonWriter(stringWriter); [EOL]     jsonWriter.setIndent("   "); [EOL]     jsonWriter.beginArray(); [EOL]     jsonWriter.value(true); [EOL]     jsonWriter.value(false); [EOL]     jsonWriter.value(5.0); [EOL]     jsonWriter.nullValue(); [EOL]     jsonWriter.beginObject(); [EOL]     jsonWriter.name("a").value(6.0); [EOL]     jsonWriter.name("b").value(7.0); [EOL]     jsonWriter.endObject(); [EOL]     jsonWriter.beginArray(); [EOL]     jsonWriter.value(8.0); [EOL]     jsonWriter.value(9.0); [EOL]     jsonWriter.endArray(); [EOL]     jsonWriter.endArray(); [EOL]     String expected = "[\n" + "   true,\n" + "   false,\n" + "   5.0,\n" + "   null,\n" + "   {\n" + "      \"a\": 6.0,\n" + "      \"b\": 7.0\n" + "   },\n" + "   [\n" + "      8.0,\n" + "      9.0\n" + "   ]\n" + "]"; [EOL]     assertEquals(expected, stringWriter.toString()); [EOL] }
public void testBadNestingArray() throws IOException { [EOL]     StringWriter stringWriter = new StringWriter(); [EOL]     JsonWriter jsonWriter = new JsonWriter(stringWriter); [EOL]     jsonWriter.beginArray(); [EOL]     jsonWriter.beginArray(); [EOL]     try { [EOL]         jsonWriter.endObject(); [EOL]         fail(); [EOL]     } catch (IllegalStateException expected) { [EOL]     } [EOL] }
public void testBadNestingArray() throws IOException { [EOL]     StringWriter stringWriter = new StringWriter(); [EOL]     JsonWriter jsonWriter = new JsonWriter(stringWriter); [EOL]     jsonWriter.beginArray(); [EOL]     jsonWriter.beginArray(); [EOL]     try { [EOL]         jsonWriter.endObject(); [EOL]         fail(); [EOL]     } catch (IllegalStateException expected) { [EOL]     } [EOL] }
public void testNullName() throws IOException { [EOL]     StringWriter stringWriter = new StringWriter(); [EOL]     JsonWriter jsonWriter = new JsonWriter(stringWriter); [EOL]     jsonWriter.beginObject(); [EOL]     try { [EOL]         jsonWriter.name(null); [EOL]         fail(); [EOL]     } catch (NullPointerException expected) { [EOL]     } [EOL] }
public void testNullName() throws IOException { [EOL]     StringWriter stringWriter = new StringWriter(); [EOL]     JsonWriter jsonWriter = new JsonWriter(stringWriter); [EOL]     jsonWriter.beginObject(); [EOL]     try { [EOL]         jsonWriter.name(null); [EOL]         fail(); [EOL]     } catch (NullPointerException expected) { [EOL]     } [EOL] }
public void testWrongTopLevelType() throws IOException { [EOL]     StringWriter stringWriter = new StringWriter(); [EOL]     JsonWriter jsonWriter = new JsonWriter(stringWriter); [EOL]     try { [EOL]         jsonWriter.value("a"); [EOL]         fail(); [EOL]     } catch (IllegalStateException expected) { [EOL]     } [EOL] }
public void testWrongTopLevelType() throws IOException { [EOL]     StringWriter stringWriter = new StringWriter(); [EOL]     JsonWriter jsonWriter = new JsonWriter(stringWriter); [EOL]     try { [EOL]         jsonWriter.value("a"); [EOL]         fail(); [EOL]     } catch (IllegalStateException expected) { [EOL]     } [EOL] }
public void testDoubles() throws IOException { [EOL]     StringWriter stringWriter = new StringWriter(); [EOL]     JsonWriter jsonWriter = new JsonWriter(stringWriter); [EOL]     jsonWriter.beginArray(); [EOL]     jsonWriter.value(-0.0); [EOL]     jsonWriter.value(1.0); [EOL]     jsonWriter.value(Double.MAX_VALUE); [EOL]     jsonWriter.value(Double.MIN_VALUE); [EOL]     jsonWriter.value(0.0); [EOL]     jsonWriter.value(-0.5); [EOL]     jsonWriter.value(2.2250738585072014E-308); [EOL]     jsonWriter.value(Math.PI); [EOL]     jsonWriter.value(Math.E); [EOL]     jsonWriter.endArray(); [EOL]     jsonWriter.close(); [EOL]     assertEquals("[-0.0," + "1.0," + "1.7976931348623157E308," + "4.9E-324," + "0.0," + "-0.5," + "2.2250738585072014E-308," + "3.141592653589793," + "2.718281828459045]", stringWriter.toString()); [EOL] }
public void testDoubles() throws IOException { [EOL]     StringWriter stringWriter = new StringWriter(); [EOL]     JsonWriter jsonWriter = new JsonWriter(stringWriter); [EOL]     jsonWriter.beginArray(); [EOL]     jsonWriter.value(-0.0); [EOL]     jsonWriter.value(1.0); [EOL]     jsonWriter.value(Double.MAX_VALUE); [EOL]     jsonWriter.value(Double.MIN_VALUE); [EOL]     jsonWriter.value(0.0); [EOL]     jsonWriter.value(-0.5); [EOL]     jsonWriter.value(2.2250738585072014E-308); [EOL]     jsonWriter.value(Math.PI); [EOL]     jsonWriter.value(Math.E); [EOL]     jsonWriter.endArray(); [EOL]     jsonWriter.close(); [EOL]     assertEquals("[-0.0," + "1.0," + "1.7976931348623157E308," + "4.9E-324," + "0.0," + "-0.5," + "2.2250738585072014E-308," + "3.141592653589793," + "2.718281828459045]", stringWriter.toString()); [EOL] }
public void testDoubles() throws IOException { [EOL]     StringWriter stringWriter = new StringWriter(); [EOL]     JsonWriter jsonWriter = new JsonWriter(stringWriter); [EOL]     jsonWriter.beginArray(); [EOL]     jsonWriter.value(-0.0); [EOL]     jsonWriter.value(1.0); [EOL]     jsonWriter.value(Double.MAX_VALUE); [EOL]     jsonWriter.value(Double.MIN_VALUE); [EOL]     jsonWriter.value(0.0); [EOL]     jsonWriter.value(-0.5); [EOL]     jsonWriter.value(2.2250738585072014E-308); [EOL]     jsonWriter.value(Math.PI); [EOL]     jsonWriter.value(Math.E); [EOL]     jsonWriter.endArray(); [EOL]     jsonWriter.close(); [EOL]     assertEquals("[-0.0," + "1.0," + "1.7976931348623157E308," + "4.9E-324," + "0.0," + "-0.5," + "2.2250738585072014E-308," + "3.141592653589793," + "2.718281828459045]", stringWriter.toString()); [EOL] }
public void testDoubles() throws IOException { [EOL]     StringWriter stringWriter = new StringWriter(); [EOL]     JsonWriter jsonWriter = new JsonWriter(stringWriter); [EOL]     jsonWriter.beginArray(); [EOL]     jsonWriter.value(-0.0); [EOL]     jsonWriter.value(1.0); [EOL]     jsonWriter.value(Double.MAX_VALUE); [EOL]     jsonWriter.value(Double.MIN_VALUE); [EOL]     jsonWriter.value(0.0); [EOL]     jsonWriter.value(-0.5); [EOL]     jsonWriter.value(2.2250738585072014E-308); [EOL]     jsonWriter.value(Math.PI); [EOL]     jsonWriter.value(Math.E); [EOL]     jsonWriter.endArray(); [EOL]     jsonWriter.close(); [EOL]     assertEquals("[-0.0," + "1.0," + "1.7976931348623157E308," + "4.9E-324," + "0.0," + "-0.5," + "2.2250738585072014E-308," + "3.141592653589793," + "2.718281828459045]", stringWriter.toString()); [EOL] }
public void testDoubles() throws IOException { [EOL]     StringWriter stringWriter = new StringWriter(); [EOL]     JsonWriter jsonWriter = new JsonWriter(stringWriter); [EOL]     jsonWriter.beginArray(); [EOL]     jsonWriter.value(-0.0); [EOL]     jsonWriter.value(1.0); [EOL]     jsonWriter.value(Double.MAX_VALUE); [EOL]     jsonWriter.value(Double.MIN_VALUE); [EOL]     jsonWriter.value(0.0); [EOL]     jsonWriter.value(-0.5); [EOL]     jsonWriter.value(2.2250738585072014E-308); [EOL]     jsonWriter.value(Math.PI); [EOL]     jsonWriter.value(Math.E); [EOL]     jsonWriter.endArray(); [EOL]     jsonWriter.close(); [EOL]     assertEquals("[-0.0," + "1.0," + "1.7976931348623157E308," + "4.9E-324," + "0.0," + "-0.5," + "2.2250738585072014E-308," + "3.141592653589793," + "2.718281828459045]", stringWriter.toString()); [EOL] }
public void testDoubles() throws IOException { [EOL]     StringWriter stringWriter = new StringWriter(); [EOL]     JsonWriter jsonWriter = new JsonWriter(stringWriter); [EOL]     jsonWriter.beginArray(); [EOL]     jsonWriter.value(-0.0); [EOL]     jsonWriter.value(1.0); [EOL]     jsonWriter.value(Double.MAX_VALUE); [EOL]     jsonWriter.value(Double.MIN_VALUE); [EOL]     jsonWriter.value(0.0); [EOL]     jsonWriter.value(-0.5); [EOL]     jsonWriter.value(2.2250738585072014E-308); [EOL]     jsonWriter.value(Math.PI); [EOL]     jsonWriter.value(Math.E); [EOL]     jsonWriter.endArray(); [EOL]     jsonWriter.close(); [EOL]     assertEquals("[-0.0," + "1.0," + "1.7976931348623157E308," + "4.9E-324," + "0.0," + "-0.5," + "2.2250738585072014E-308," + "3.141592653589793," + "2.718281828459045]", stringWriter.toString()); [EOL] }
public void testPrettyPrintArray() throws IOException { [EOL]     StringWriter stringWriter = new StringWriter(); [EOL]     JsonWriter jsonWriter = new JsonWriter(stringWriter); [EOL]     jsonWriter.setIndent("   "); [EOL]     jsonWriter.beginArray(); [EOL]     jsonWriter.value(true); [EOL]     jsonWriter.value(false); [EOL]     jsonWriter.value(5.0); [EOL]     jsonWriter.nullValue(); [EOL]     jsonWriter.beginObject(); [EOL]     jsonWriter.name("a").value(6.0); [EOL]     jsonWriter.name("b").value(7.0); [EOL]     jsonWriter.endObject(); [EOL]     jsonWriter.beginArray(); [EOL]     jsonWriter.value(8.0); [EOL]     jsonWriter.value(9.0); [EOL]     jsonWriter.endArray(); [EOL]     jsonWriter.endArray(); [EOL]     String expected = "[\n" + "   true,\n" + "   false,\n" + "   5.0,\n" + "   null,\n" + "   {\n" + "      \"a\": 6.0,\n" + "      \"b\": 7.0\n" + "   },\n" + "   [\n" + "      8.0,\n" + "      9.0\n" + "   ]\n" + "]"; [EOL]     assertEquals(expected, stringWriter.toString()); [EOL] }
public void testPrettyPrintArray() throws IOException { [EOL]     StringWriter stringWriter = new StringWriter(); [EOL]     JsonWriter jsonWriter = new JsonWriter(stringWriter); [EOL]     jsonWriter.setIndent("   "); [EOL]     jsonWriter.beginArray(); [EOL]     jsonWriter.value(true); [EOL]     jsonWriter.value(false); [EOL]     jsonWriter.value(5.0); [EOL]     jsonWriter.nullValue(); [EOL]     jsonWriter.beginObject(); [EOL]     jsonWriter.name("a").value(6.0); [EOL]     jsonWriter.name("b").value(7.0); [EOL]     jsonWriter.endObject(); [EOL]     jsonWriter.beginArray(); [EOL]     jsonWriter.value(8.0); [EOL]     jsonWriter.value(9.0); [EOL]     jsonWriter.endArray(); [EOL]     jsonWriter.endArray(); [EOL]     String expected = "[\n" + "   true,\n" + "   false,\n" + "   5.0,\n" + "   null,\n" + "   {\n" + "      \"a\": 6.0,\n" + "      \"b\": 7.0\n" + "   },\n" + "   [\n" + "      8.0,\n" + "      9.0\n" + "   ]\n" + "]"; [EOL]     assertEquals(expected, stringWriter.toString()); [EOL] }
public void testPrettyPrintArray() throws IOException { [EOL]     StringWriter stringWriter = new StringWriter(); [EOL]     JsonWriter jsonWriter = new JsonWriter(stringWriter); [EOL]     jsonWriter.setIndent("   "); [EOL]     jsonWriter.beginArray(); [EOL]     jsonWriter.value(true); [EOL]     jsonWriter.value(false); [EOL]     jsonWriter.value(5.0); [EOL]     jsonWriter.nullValue(); [EOL]     jsonWriter.beginObject(); [EOL]     jsonWriter.name("a").value(6.0); [EOL]     jsonWriter.name("b").value(7.0); [EOL]     jsonWriter.endObject(); [EOL]     jsonWriter.beginArray(); [EOL]     jsonWriter.value(8.0); [EOL]     jsonWriter.value(9.0); [EOL]     jsonWriter.endArray(); [EOL]     jsonWriter.endArray(); [EOL]     String expected = "[\n" + "   true,\n" + "   false,\n" + "   5.0,\n" + "   null,\n" + "   {\n" + "      \"a\": 6.0,\n" + "      \"b\": 7.0\n" + "   },\n" + "   [\n" + "      8.0,\n" + "      9.0\n" + "   ]\n" + "]"; [EOL]     assertEquals(expected, stringWriter.toString()); [EOL] }
public void testWrongTopLevelType() throws IOException { [EOL]     StringWriter stringWriter = new StringWriter(); [EOL]     JsonWriter jsonWriter = new JsonWriter(stringWriter); [EOL]     try { [EOL]         jsonWriter.value("a"); [EOL]         fail(); [EOL]     } catch (IllegalStateException expected) { [EOL]     } [EOL] }
public void testWrongTopLevelType() throws IOException { [EOL]     StringWriter stringWriter = new StringWriter(); [EOL]     JsonWriter jsonWriter = new JsonWriter(stringWriter); [EOL]     try { [EOL]         jsonWriter.value("a"); [EOL]         fail(); [EOL]     } catch (IllegalStateException expected) { [EOL]     } [EOL] }
public void testEnumSubclass() { [EOL]     assertFalse(Roshambo.class == Roshambo.ROCK.getClass()); [EOL]     assertEquals("\"ROCK\"", gson.toJson(Roshambo.ROCK)); [EOL]     assertEquals("[\"ROCK\",\"PAPER\",\"SCISSORS\"]", gson.toJson(EnumSet.allOf(Roshambo.class))); [EOL]     assertEquals(Roshambo.ROCK, gson.fromJson("\"ROCK\"", Roshambo.class)); [EOL]     assertEquals(EnumSet.allOf(Roshambo.class), gson.fromJson("[\"ROCK\",\"PAPER\",\"SCISSORS\"]", new TypeToken<Set<Roshambo>>() { [EOL]     }.getType())); [EOL] }
public void testGsonWithNonDefaultFieldNamingPolicySerialization() { [EOL]     Gson gson = builder.setFieldNamingPolicy(FieldNamingPolicy.UPPER_CAMEL_CASE).create(); [EOL]     StringWrapper target = new StringWrapper("blah"); [EOL]     assertEquals("{\"SomeConstantStringInstanceField\":\"" + target.someConstantStringInstanceField + "\"}", gson.toJson(target)); [EOL] }
public void testGsonWithNonDefaultFieldNamingPolicySerialization() { [EOL]     Gson gson = builder.setFieldNamingPolicy(FieldNamingPolicy.UPPER_CAMEL_CASE).create(); [EOL]     StringWrapper target = new StringWrapper("blah"); [EOL]     assertEquals("{\"SomeConstantStringInstanceField\":\"" + target.someConstantStringInstanceField + "\"}", gson.toJson(target)); [EOL] }
public void testArrayOfArrays() { [EOL]     String[][] a = { new String[] { "a1", "a2", "a3" }, new String[] { "b1", "b2", "b3" }, new String[] { "c1", "c2", "c3" } }; [EOL]     TypeInfoArray typeInfo = new TypeInfoArray(a.getClass()); [EOL]     assertEquals(a.getClass(), typeInfo.getRawClass()); [EOL]     assertEquals(String.class, typeInfo.getComponentRawType()); [EOL]     assertEquals(String[].class, typeInfo.getSecondLevelType()); [EOL] }
public void testDefaultLongSerialization() throws Exception { [EOL]     JsonElement element = LongSerializationPolicy.DEFAULT.serialize(1556L); [EOL]     assertTrue(element.isJsonPrimitive()); [EOL]     JsonPrimitive jsonPrimitive = element.getAsJsonPrimitive(); [EOL]     assertFalse(jsonPrimitive.isString()); [EOL]     assertTrue(jsonPrimitive.isNumber()); [EOL]     assertEquals(1556L, element.getAsLong()); [EOL] }
public void testEnumSubclass() { [EOL]     assertFalse(Roshambo.class == Roshambo.ROCK.getClass()); [EOL]     assertEquals("\"ROCK\"", gson.toJson(Roshambo.ROCK)); [EOL]     assertEquals("[\"ROCK\",\"PAPER\",\"SCISSORS\"]", gson.toJson(EnumSet.allOf(Roshambo.class))); [EOL]     assertEquals(Roshambo.ROCK, gson.fromJson("\"ROCK\"", Roshambo.class)); [EOL]     assertEquals(EnumSet.allOf(Roshambo.class), gson.fromJson("[\"ROCK\",\"PAPER\",\"SCISSORS\"]", new TypeToken<Set<Roshambo>>() { [EOL]     }.getType())); [EOL] }
public void testEnumSubclass() { [EOL]     assertFalse(Roshambo.class == Roshambo.ROCK.getClass()); [EOL]     assertEquals("\"ROCK\"", gson.toJson(Roshambo.ROCK)); [EOL]     assertEquals("[\"ROCK\",\"PAPER\",\"SCISSORS\"]", gson.toJson(EnumSet.allOf(Roshambo.class))); [EOL]     assertEquals(Roshambo.ROCK, gson.fromJson("\"ROCK\"", Roshambo.class)); [EOL]     assertEquals(EnumSet.allOf(Roshambo.class), gson.fromJson("[\"ROCK\",\"PAPER\",\"SCISSORS\"]", new TypeToken<Set<Roshambo>>() { [EOL]     }.getType())); [EOL] }
public void testNullLiteralIsNotAString() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("[null]")); [EOL]     reader.beginArray(); [EOL]     try { [EOL]         reader.nextString(); [EOL]         fail(); [EOL]     } catch (IllegalStateException expected) { [EOL]     } [EOL] }
public void testLenientNonExecutePrefixWithLeadingWhitespace() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("\r\n \t)]}'\n []")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     reader.endArray(); [EOL]     assertEquals(JsonToken.END_DOCUMENT, reader.peek()); [EOL] }
public void testStrictSingleQuotedNames() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("{'a':true}")); [EOL]     reader.beginObject(); [EOL]     try { [EOL]         reader.nextName(); [EOL]         fail(); [EOL]     } catch (IOException expected) { [EOL]     } [EOL] }
public void testNullLiteralIsNotAString() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("[null]")); [EOL]     reader.beginArray(); [EOL]     try { [EOL]         reader.nextString(); [EOL]         fail(); [EOL]     } catch (IllegalStateException expected) { [EOL]     } [EOL] }
public void testNullLiteralIsNotAString() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("[null]")); [EOL]     reader.beginArray(); [EOL]     try { [EOL]         reader.nextString(); [EOL]         fail(); [EOL]     } catch (IllegalStateException expected) { [EOL]     } [EOL] }
public void testNullLiteralIsNotAString() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("[null]")); [EOL]     reader.beginArray(); [EOL]     try { [EOL]         reader.nextString(); [EOL]         fail(); [EOL]     } catch (IllegalStateException expected) { [EOL]     } [EOL] }
public void testNullLiteralIsNotAString() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("[null]")); [EOL]     reader.beginArray(); [EOL]     try { [EOL]         reader.nextString(); [EOL]         fail(); [EOL]     } catch (IllegalStateException expected) { [EOL]     } [EOL] }
public void testSkipObject() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("{\"a\": { \"c\": [], \"d\": [true, true, {}] }, \"b\": \"banana\"}")); [EOL]     reader.beginObject(); [EOL]     assertEquals("a", reader.nextName()); [EOL]     reader.skipValue(); [EOL]     assertEquals("b", reader.nextName()); [EOL]     reader.skipValue(); [EOL]     reader.endObject(); [EOL]     assertEquals(JsonToken.END_DOCUMENT, reader.peek()); [EOL] }
public void testLenientNonExecutePrefixWithLeadingWhitespace() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("\r\n \t)]}'\n []")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     reader.endArray(); [EOL]     assertEquals(JsonToken.END_DOCUMENT, reader.peek()); [EOL] }
public void testLenientNonExecutePrefixWithLeadingWhitespace() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("\r\n \t)]}'\n []")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     reader.endArray(); [EOL]     assertEquals(JsonToken.END_DOCUMENT, reader.peek()); [EOL] }
public void testLenientNonExecutePrefixWithLeadingWhitespace() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("\r\n \t)]}'\n []")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     reader.endArray(); [EOL]     assertEquals(JsonToken.END_DOCUMENT, reader.peek()); [EOL] }
public void testLenientNonExecutePrefixWithLeadingWhitespace() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("\r\n \t)]}'\n []")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     reader.endArray(); [EOL]     assertEquals(JsonToken.END_DOCUMENT, reader.peek()); [EOL] }
public void testLenientNonExecutePrefixWithLeadingWhitespace() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("\r\n \t)]}'\n []")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     reader.endArray(); [EOL]     assertEquals(JsonToken.END_DOCUMENT, reader.peek()); [EOL] }
public void testLenientNonExecutePrefixWithLeadingWhitespace() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("\r\n \t)]}'\n []")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     reader.endArray(); [EOL]     assertEquals(JsonToken.END_DOCUMENT, reader.peek()); [EOL] }
public void testLenientNonExecutePrefixWithLeadingWhitespace() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("\r\n \t)]}'\n []")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     reader.endArray(); [EOL]     assertEquals(JsonToken.END_DOCUMENT, reader.peek()); [EOL] }
public void testStrictSingleQuotedNames() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("{'a':true}")); [EOL]     reader.beginObject(); [EOL]     try { [EOL]         reader.nextName(); [EOL]         fail(); [EOL]     } catch (IOException expected) { [EOL]     } [EOL] }
public void testInvalidJsonDeserializationFails() throws Exception { [EOL]     try { [EOL]         gson.fromJson("adfasdf1112,,,\":", BagOfPrimitives.class); [EOL]         fail("Bad JSON should throw a ParseException"); [EOL]     } catch (JsonParseException expected) { [EOL]     } [EOL]     try { [EOL]         gson.fromJson("{adfasdf1112,,,\":}", BagOfPrimitives.class); [EOL]         fail("Bad JSON should throw a ParseException"); [EOL]     } catch (JsonParseException expected) { [EOL]     } [EOL] }
public void testInvalidJsonDeserializationFails() throws Exception { [EOL]     try { [EOL]         gson.fromJson("adfasdf1112,,,\":", BagOfPrimitives.class); [EOL]         fail("Bad JSON should throw a ParseException"); [EOL]     } catch (JsonParseException expected) { [EOL]     } [EOL]     try { [EOL]         gson.fromJson("{adfasdf1112,,,\":}", BagOfPrimitives.class); [EOL]         fail("Bad JSON should throw a ParseException"); [EOL]     } catch (JsonParseException expected) { [EOL]     } [EOL] }
public void testInvalidJsonDeserializationFails() throws Exception { [EOL]     try { [EOL]         gson.fromJson("adfasdf1112,,,\":", BagOfPrimitives.class); [EOL]         fail("Bad JSON should throw a ParseException"); [EOL]     } catch (JsonParseException expected) { [EOL]     } [EOL]     try { [EOL]         gson.fromJson("{adfasdf1112,,,\":}", BagOfPrimitives.class); [EOL]         fail("Bad JSON should throw a ParseException"); [EOL]     } catch (JsonParseException expected) { [EOL]     } [EOL] }
public void testInvalidJsonDeserializationFails() throws Exception { [EOL]     try { [EOL]         gson.fromJson("adfasdf1112,,,\":", BagOfPrimitives.class); [EOL]         fail("Bad JSON should throw a ParseException"); [EOL]     } catch (JsonParseException expected) { [EOL]     } [EOL]     try { [EOL]         gson.fromJson("{adfasdf1112,,,\":}", BagOfPrimitives.class); [EOL]         fail("Bad JSON should throw a ParseException"); [EOL]     } catch (JsonParseException expected) { [EOL]     } [EOL] }
public void testSkipObject() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("{\"a\": { \"c\": [], \"d\": [true, true, {}] }, \"b\": \"banana\"}")); [EOL]     reader.beginObject(); [EOL]     assertEquals("a", reader.nextName()); [EOL]     reader.skipValue(); [EOL]     assertEquals("b", reader.nextName()); [EOL]     reader.skipValue(); [EOL]     reader.endObject(); [EOL]     assertEquals(JsonToken.END_DOCUMENT, reader.peek()); [EOL] }
public void testSkipObject() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("{\"a\": { \"c\": [], \"d\": [true, true, {}] }, \"b\": \"banana\"}")); [EOL]     reader.beginObject(); [EOL]     assertEquals("a", reader.nextName()); [EOL]     reader.skipValue(); [EOL]     assertEquals("b", reader.nextName()); [EOL]     reader.skipValue(); [EOL]     reader.endObject(); [EOL]     assertEquals(JsonToken.END_DOCUMENT, reader.peek()); [EOL] }
public void testSkipObject() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("{\"a\": { \"c\": [], \"d\": [true, true, {}] }, \"b\": \"banana\"}")); [EOL]     reader.beginObject(); [EOL]     assertEquals("a", reader.nextName()); [EOL]     reader.skipValue(); [EOL]     assertEquals("b", reader.nextName()); [EOL]     reader.skipValue(); [EOL]     reader.endObject(); [EOL]     assertEquals(JsonToken.END_DOCUMENT, reader.peek()); [EOL] }
public void testSkipObject() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("{\"a\": { \"c\": [], \"d\": [true, true, {}] }, \"b\": \"banana\"}")); [EOL]     reader.beginObject(); [EOL]     assertEquals("a", reader.nextName()); [EOL]     reader.skipValue(); [EOL]     assertEquals("b", reader.nextName()); [EOL]     reader.skipValue(); [EOL]     reader.endObject(); [EOL]     assertEquals(JsonToken.END_DOCUMENT, reader.peek()); [EOL] }
public void testSkipObject() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("{\"a\": { \"c\": [], \"d\": [true, true, {}] }, \"b\": \"banana\"}")); [EOL]     reader.beginObject(); [EOL]     assertEquals("a", reader.nextName()); [EOL]     reader.skipValue(); [EOL]     assertEquals("b", reader.nextName()); [EOL]     reader.skipValue(); [EOL]     reader.endObject(); [EOL]     assertEquals(JsonToken.END_DOCUMENT, reader.peek()); [EOL] }
public void testLenientNonExecutePrefixWithLeadingWhitespace() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("\r\n \t)]}'\n []")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     reader.endArray(); [EOL]     assertEquals(JsonToken.END_DOCUMENT, reader.peek()); [EOL] }
public void testLenientNonExecutePrefixWithLeadingWhitespace() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("\r\n \t)]}'\n []")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     reader.endArray(); [EOL]     assertEquals(JsonToken.END_DOCUMENT, reader.peek()); [EOL] }
public void testLenientNonExecutePrefixWithLeadingWhitespace() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("\r\n \t)]}'\n []")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     reader.endArray(); [EOL]     assertEquals(JsonToken.END_DOCUMENT, reader.peek()); [EOL] }
public void testLenientNonExecutePrefixWithLeadingWhitespace() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("\r\n \t)]}'\n []")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     reader.endArray(); [EOL]     assertEquals(JsonToken.END_DOCUMENT, reader.peek()); [EOL] }
public void testLenientNonExecutePrefixWithLeadingWhitespace() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("\r\n \t)]}'\n []")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     reader.endArray(); [EOL]     assertEquals(JsonToken.END_DOCUMENT, reader.peek()); [EOL] }
public void testLenientNonExecutePrefixWithLeadingWhitespace() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("\r\n \t)]}'\n []")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     reader.endArray(); [EOL]     assertEquals(JsonToken.END_DOCUMENT, reader.peek()); [EOL] }
public void testSkipObject() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("{\"a\": { \"c\": [], \"d\": [true, true, {}] }, \"b\": \"banana\"}")); [EOL]     reader.beginObject(); [EOL]     assertEquals("a", reader.nextName()); [EOL]     reader.skipValue(); [EOL]     assertEquals("b", reader.nextName()); [EOL]     reader.skipValue(); [EOL]     reader.endObject(); [EOL]     assertEquals(JsonToken.END_DOCUMENT, reader.peek()); [EOL] }
public void testSkipObject() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("{\"a\": { \"c\": [], \"d\": [true, true, {}] }, \"b\": \"banana\"}")); [EOL]     reader.beginObject(); [EOL]     assertEquals("a", reader.nextName()); [EOL]     reader.skipValue(); [EOL]     assertEquals("b", reader.nextName()); [EOL]     reader.skipValue(); [EOL]     reader.endObject(); [EOL]     assertEquals(JsonToken.END_DOCUMENT, reader.peek()); [EOL] }
public void testUrlDeserialization() { [EOL]     String urlValue = "http://google.com/"; [EOL]     String json = "'http:\\/\\/google.com\\/'"; [EOL]     URL target = gson.fromJson(json, URL.class); [EOL]     assertEquals(urlValue, target.toExternalForm()); [EOL]     gson.fromJson('"' + urlValue + '"', URL.class); [EOL]     assertEquals(urlValue, target.toExternalForm()); [EOL] }
public void testNullLiteralIsNotAString() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("[null]")); [EOL]     reader.beginArray(); [EOL]     try { [EOL]         reader.nextString(); [EOL]         fail(); [EOL]     } catch (IllegalStateException expected) { [EOL]     } [EOL] }
public void testEnumSubclass() { [EOL]     assertFalse(Roshambo.class == Roshambo.ROCK.getClass()); [EOL]     assertEquals("\"ROCK\"", gson.toJson(Roshambo.ROCK)); [EOL]     assertEquals("[\"ROCK\",\"PAPER\",\"SCISSORS\"]", gson.toJson(EnumSet.allOf(Roshambo.class))); [EOL]     assertEquals(Roshambo.ROCK, gson.fromJson("\"ROCK\"", Roshambo.class)); [EOL]     assertEquals(EnumSet.allOf(Roshambo.class), gson.fromJson("[\"ROCK\",\"PAPER\",\"SCISSORS\"]", new TypeToken<Set<Roshambo>>() { [EOL]     }.getType())); [EOL] }
public void testEnumSubclass() { [EOL]     assertFalse(Roshambo.class == Roshambo.ROCK.getClass()); [EOL]     assertEquals("\"ROCK\"", gson.toJson(Roshambo.ROCK)); [EOL]     assertEquals("[\"ROCK\",\"PAPER\",\"SCISSORS\"]", gson.toJson(EnumSet.allOf(Roshambo.class))); [EOL]     assertEquals(Roshambo.ROCK, gson.fromJson("\"ROCK\"", Roshambo.class)); [EOL]     assertEquals(EnumSet.allOf(Roshambo.class), gson.fromJson("[\"ROCK\",\"PAPER\",\"SCISSORS\"]", new TypeToken<Set<Roshambo>>() { [EOL]     }.getType())); [EOL] }
public void testEnumSubclass() { [EOL]     assertFalse(Roshambo.class == Roshambo.ROCK.getClass()); [EOL]     assertEquals("\"ROCK\"", gson.toJson(Roshambo.ROCK)); [EOL]     assertEquals("[\"ROCK\",\"PAPER\",\"SCISSORS\"]", gson.toJson(EnumSet.allOf(Roshambo.class))); [EOL]     assertEquals(Roshambo.ROCK, gson.fromJson("\"ROCK\"", Roshambo.class)); [EOL]     assertEquals(EnumSet.allOf(Roshambo.class), gson.fromJson("[\"ROCK\",\"PAPER\",\"SCISSORS\"]", new TypeToken<Set<Roshambo>>() { [EOL]     }.getType())); [EOL] }
public void testEnumSubclass() { [EOL]     assertFalse(Roshambo.class == Roshambo.ROCK.getClass()); [EOL]     assertEquals("\"ROCK\"", gson.toJson(Roshambo.ROCK)); [EOL]     assertEquals("[\"ROCK\",\"PAPER\",\"SCISSORS\"]", gson.toJson(EnumSet.allOf(Roshambo.class))); [EOL]     assertEquals(Roshambo.ROCK, gson.fromJson("\"ROCK\"", Roshambo.class)); [EOL]     assertEquals(EnumSet.allOf(Roshambo.class), gson.fromJson("[\"ROCK\",\"PAPER\",\"SCISSORS\"]", new TypeToken<Set<Roshambo>>() { [EOL]     }.getType())); [EOL] }
public void testEnumSubclass() { [EOL]     assertFalse(Roshambo.class == Roshambo.ROCK.getClass()); [EOL]     assertEquals("\"ROCK\"", gson.toJson(Roshambo.ROCK)); [EOL]     assertEquals("[\"ROCK\",\"PAPER\",\"SCISSORS\"]", gson.toJson(EnumSet.allOf(Roshambo.class))); [EOL]     assertEquals(Roshambo.ROCK, gson.fromJson("\"ROCK\"", Roshambo.class)); [EOL]     assertEquals(EnumSet.allOf(Roshambo.class), gson.fromJson("[\"ROCK\",\"PAPER\",\"SCISSORS\"]", new TypeToken<Set<Roshambo>>() { [EOL]     }.getType())); [EOL] }
@SuppressWarnings("rawtypes") [EOL] public void testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored() throws Exception { [EOL]     String json = "{\"transientLongValue\":1,\"longValue\":[1]}"; [EOL]     ClassWithTransientFields target = gson.fromJson(json, ClassWithTransientFields.class); [EOL]     assertFalse(target.transientLongValue != 1); [EOL] }
@SuppressWarnings("rawtypes") [EOL] public void testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored() throws Exception { [EOL]     String json = "{\"transientLongValue\":1,\"longValue\":[1]}"; [EOL]     ClassWithTransientFields target = gson.fromJson(json, ClassWithTransientFields.class); [EOL]     assertFalse(target.transientLongValue != 1); [EOL] }
@SuppressWarnings("rawtypes") [EOL] public void testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored() throws Exception { [EOL]     String json = "{\"transientLongValue\":1,\"longValue\":[1]}"; [EOL]     ClassWithTransientFields target = gson.fromJson(json, ClassWithTransientFields.class); [EOL]     assertFalse(target.transientLongValue != 1); [EOL] }
@SuppressWarnings("rawtypes") [EOL] public void testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored() throws Exception { [EOL]     String json = "{\"transientLongValue\":1,\"longValue\":[1]}"; [EOL]     ClassWithTransientFields target = gson.fromJson(json, ClassWithTransientFields.class); [EOL]     assertFalse(target.transientLongValue != 1); [EOL] }
@SuppressWarnings("rawtypes") [EOL] public void testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored() throws Exception { [EOL]     String json = "{\"transientLongValue\":1,\"longValue\":[1]}"; [EOL]     ClassWithTransientFields target = gson.fromJson(json, ClassWithTransientFields.class); [EOL]     assertFalse(target.transientLongValue != 1); [EOL] }
@SuppressWarnings("rawtypes") [EOL] public void testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored() throws Exception { [EOL]     String json = "{\"transientLongValue\":1,\"longValue\":[1]}"; [EOL]     ClassWithTransientFields target = gson.fromJson(json, ClassWithTransientFields.class); [EOL]     assertFalse(target.transientLongValue != 1); [EOL] }
@SuppressWarnings("rawtypes") [EOL] public void testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored() throws Exception { [EOL]     String json = "{\"transientLongValue\":1,\"longValue\":[1]}"; [EOL]     ClassWithTransientFields target = gson.fromJson(json, ClassWithTransientFields.class); [EOL]     assertFalse(target.transientLongValue != 1); [EOL] }
@SuppressWarnings("rawtypes") [EOL] public void testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored() throws Exception { [EOL]     String json = "{\"transientLongValue\":1,\"longValue\":[1]}"; [EOL]     ClassWithTransientFields target = gson.fromJson(json, ClassWithTransientFields.class); [EOL]     assertFalse(target.transientLongValue != 1); [EOL] }
@SuppressWarnings("rawtypes") [EOL] public void testClassWithTransientFieldsDeserializationTransientFieldsPassedInJsonAreIgnored() throws Exception { [EOL]     String json = "{\"transientLongValue\":1,\"longValue\":[1]}"; [EOL]     ClassWithTransientFields target = gson.fromJson(json, ClassWithTransientFields.class); [EOL]     assertFalse(target.transientLongValue != 1); [EOL] }
public void testEnumSubclass() { [EOL]     assertFalse(Roshambo.class == Roshambo.ROCK.getClass()); [EOL]     assertEquals("\"ROCK\"", gson.toJson(Roshambo.ROCK)); [EOL]     assertEquals("[\"ROCK\",\"PAPER\",\"SCISSORS\"]", gson.toJson(EnumSet.allOf(Roshambo.class))); [EOL]     assertEquals(Roshambo.ROCK, gson.fromJson("\"ROCK\"", Roshambo.class)); [EOL]     assertEquals(EnumSet.allOf(Roshambo.class), gson.fromJson("[\"ROCK\",\"PAPER\",\"SCISSORS\"]", new TypeToken<Set<Roshambo>>() { [EOL]     }.getType())); [EOL] }
public void testEnumSubclass() { [EOL]     assertFalse(Roshambo.class == Roshambo.ROCK.getClass()); [EOL]     assertEquals("\"ROCK\"", gson.toJson(Roshambo.ROCK)); [EOL]     assertEquals("[\"ROCK\",\"PAPER\",\"SCISSORS\"]", gson.toJson(EnumSet.allOf(Roshambo.class))); [EOL]     assertEquals(Roshambo.ROCK, gson.fromJson("\"ROCK\"", Roshambo.class)); [EOL]     assertEquals(EnumSet.allOf(Roshambo.class), gson.fromJson("[\"ROCK\",\"PAPER\",\"SCISSORS\"]", new TypeToken<Set<Roshambo>>() { [EOL]     }.getType())); [EOL] }
public void testEnumSubclass() { [EOL]     assertFalse(Roshambo.class == Roshambo.ROCK.getClass()); [EOL]     assertEquals("\"ROCK\"", gson.toJson(Roshambo.ROCK)); [EOL]     assertEquals("[\"ROCK\",\"PAPER\",\"SCISSORS\"]", gson.toJson(EnumSet.allOf(Roshambo.class))); [EOL]     assertEquals(Roshambo.ROCK, gson.fromJson("\"ROCK\"", Roshambo.class)); [EOL]     assertEquals(EnumSet.allOf(Roshambo.class), gson.fromJson("[\"ROCK\",\"PAPER\",\"SCISSORS\"]", new TypeToken<Set<Roshambo>>() { [EOL]     }.getType())); [EOL] }
public void testEnumSubclass() { [EOL]     assertFalse(Roshambo.class == Roshambo.ROCK.getClass()); [EOL]     assertEquals("\"ROCK\"", gson.toJson(Roshambo.ROCK)); [EOL]     assertEquals("[\"ROCK\",\"PAPER\",\"SCISSORS\"]", gson.toJson(EnumSet.allOf(Roshambo.class))); [EOL]     assertEquals(Roshambo.ROCK, gson.fromJson("\"ROCK\"", Roshambo.class)); [EOL]     assertEquals(EnumSet.allOf(Roshambo.class), gson.fromJson("[\"ROCK\",\"PAPER\",\"SCISSORS\"]", new TypeToken<Set<Roshambo>>() { [EOL]     }.getType())); [EOL] }
public void testEnumSubclass() { [EOL]     assertFalse(Roshambo.class == Roshambo.ROCK.getClass()); [EOL]     assertEquals("\"ROCK\"", gson.toJson(Roshambo.ROCK)); [EOL]     assertEquals("[\"ROCK\",\"PAPER\",\"SCISSORS\"]", gson.toJson(EnumSet.allOf(Roshambo.class))); [EOL]     assertEquals(Roshambo.ROCK, gson.fromJson("\"ROCK\"", Roshambo.class)); [EOL]     assertEquals(EnumSet.allOf(Roshambo.class), gson.fromJson("[\"ROCK\",\"PAPER\",\"SCISSORS\"]", new TypeToken<Set<Roshambo>>() { [EOL]     }.getType())); [EOL] }
public void testDefaultJavaSqlTimestampDeserialization() { [EOL]     String json = "'Dec 3, 2009 1:18:02 PM'"; [EOL]     Timestamp extracted = gson.fromJson(json, Timestamp.class); [EOL]     assertEqualsDate(extracted, 2009, 11, 3); [EOL]     assertEqualsTime(extracted, 13, 18, 02); [EOL] }
public void testDefaultJavaSqlTimestampDeserialization() { [EOL]     String json = "'Dec 3, 2009 1:18:02 PM'"; [EOL]     Timestamp extracted = gson.fromJson(json, Timestamp.class); [EOL]     assertEqualsDate(extracted, 2009, 11, 3); [EOL]     assertEqualsTime(extracted, 13, 18, 02); [EOL] }
public void testDefaultJavaSqlTimestampDeserialization() { [EOL]     String json = "'Dec 3, 2009 1:18:02 PM'"; [EOL]     Timestamp extracted = gson.fromJson(json, Timestamp.class); [EOL]     assertEqualsDate(extracted, 2009, 11, 3); [EOL]     assertEqualsTime(extracted, 13, 18, 02); [EOL] }
public void testDefaultJavaSqlTimestampDeserialization() { [EOL]     String json = "'Dec 3, 2009 1:18:02 PM'"; [EOL]     Timestamp extracted = gson.fromJson(json, Timestamp.class); [EOL]     assertEqualsDate(extracted, 2009, 11, 3); [EOL]     assertEqualsTime(extracted, 13, 18, 02); [EOL] }
public void testDefaultJavaSqlTimestampDeserialization() { [EOL]     String json = "'Dec 3, 2009 1:18:02 PM'"; [EOL]     Timestamp extracted = gson.fromJson(json, Timestamp.class); [EOL]     assertEqualsDate(extracted, 2009, 11, 3); [EOL]     assertEqualsTime(extracted, 13, 18, 02); [EOL] }
public void testDefaultCalendarSerialization() throws Exception { [EOL]     Gson gson = new GsonBuilder().create(); [EOL]     String json = gson.toJson(Calendar.getInstance()); [EOL]     assertTrue(json.contains("year")); [EOL]     assertTrue(json.contains("month")); [EOL]     assertTrue(json.contains("dayOfMonth")); [EOL]     assertTrue(json.contains("hourOfDay")); [EOL]     assertTrue(json.contains("minute")); [EOL]     assertTrue(json.contains("second")); [EOL] }
public void testEnumSubclass() { [EOL]     assertFalse(Roshambo.class == Roshambo.ROCK.getClass()); [EOL]     assertEquals("\"ROCK\"", gson.toJson(Roshambo.ROCK)); [EOL]     assertEquals("[\"ROCK\",\"PAPER\",\"SCISSORS\"]", gson.toJson(EnumSet.allOf(Roshambo.class))); [EOL]     assertEquals(Roshambo.ROCK, gson.fromJson("\"ROCK\"", Roshambo.class)); [EOL]     assertEquals(EnumSet.allOf(Roshambo.class), gson.fromJson("[\"ROCK\",\"PAPER\",\"SCISSORS\"]", new TypeToken<Set<Roshambo>>() { [EOL]     }.getType())); [EOL] }
public void testEnumSubclass() { [EOL]     assertFalse(Roshambo.class == Roshambo.ROCK.getClass()); [EOL]     assertEquals("\"ROCK\"", gson.toJson(Roshambo.ROCK)); [EOL]     assertEquals("[\"ROCK\",\"PAPER\",\"SCISSORS\"]", gson.toJson(EnumSet.allOf(Roshambo.class))); [EOL]     assertEquals(Roshambo.ROCK, gson.fromJson("\"ROCK\"", Roshambo.class)); [EOL]     assertEquals(EnumSet.allOf(Roshambo.class), gson.fromJson("[\"ROCK\",\"PAPER\",\"SCISSORS\"]", new TypeToken<Set<Roshambo>>() { [EOL]     }.getType())); [EOL] }
public void testEnumSubclass() { [EOL]     assertFalse(Roshambo.class == Roshambo.ROCK.getClass()); [EOL]     assertEquals("\"ROCK\"", gson.toJson(Roshambo.ROCK)); [EOL]     assertEquals("[\"ROCK\",\"PAPER\",\"SCISSORS\"]", gson.toJson(EnumSet.allOf(Roshambo.class))); [EOL]     assertEquals(Roshambo.ROCK, gson.fromJson("\"ROCK\"", Roshambo.class)); [EOL]     assertEquals(EnumSet.allOf(Roshambo.class), gson.fromJson("[\"ROCK\",\"PAPER\",\"SCISSORS\"]", new TypeToken<Set<Roshambo>>() { [EOL]     }.getType())); [EOL] }
public void testEnumSubclass() { [EOL]     assertFalse(Roshambo.class == Roshambo.ROCK.getClass()); [EOL]     assertEquals("\"ROCK\"", gson.toJson(Roshambo.ROCK)); [EOL]     assertEquals("[\"ROCK\",\"PAPER\",\"SCISSORS\"]", gson.toJson(EnumSet.allOf(Roshambo.class))); [EOL]     assertEquals(Roshambo.ROCK, gson.fromJson("\"ROCK\"", Roshambo.class)); [EOL]     assertEquals(EnumSet.allOf(Roshambo.class), gson.fromJson("[\"ROCK\",\"PAPER\",\"SCISSORS\"]", new TypeToken<Set<Roshambo>>() { [EOL]     }.getType())); [EOL] }
public void testEnumSubclass() { [EOL]     assertFalse(Roshambo.class == Roshambo.ROCK.getClass()); [EOL]     assertEquals("\"ROCK\"", gson.toJson(Roshambo.ROCK)); [EOL]     assertEquals("[\"ROCK\",\"PAPER\",\"SCISSORS\"]", gson.toJson(EnumSet.allOf(Roshambo.class))); [EOL]     assertEquals(Roshambo.ROCK, gson.fromJson("\"ROCK\"", Roshambo.class)); [EOL]     assertEquals(EnumSet.allOf(Roshambo.class), gson.fromJson("[\"ROCK\",\"PAPER\",\"SCISSORS\"]", new TypeToken<Set<Roshambo>>() { [EOL]     }.getType())); [EOL] }
public void testEnumSubclass() { [EOL]     assertFalse(Roshambo.class == Roshambo.ROCK.getClass()); [EOL]     assertEquals("\"ROCK\"", gson.toJson(Roshambo.ROCK)); [EOL]     assertEquals("[\"ROCK\",\"PAPER\",\"SCISSORS\"]", gson.toJson(EnumSet.allOf(Roshambo.class))); [EOL]     assertEquals(Roshambo.ROCK, gson.fromJson("\"ROCK\"", Roshambo.class)); [EOL]     assertEquals(EnumSet.allOf(Roshambo.class), gson.fromJson("[\"ROCK\",\"PAPER\",\"SCISSORS\"]", new TypeToken<Set<Roshambo>>() { [EOL]     }.getType())); [EOL] }
public void testUrlDeserialization() { [EOL]     String urlValue = "http://google.com/"; [EOL]     String json = "'http:\\/\\/google.com\\/'"; [EOL]     URL target = gson.fromJson(json, URL.class); [EOL]     assertEquals(urlValue, target.toExternalForm()); [EOL]     gson.fromJson('"' + urlValue + '"', URL.class); [EOL]     assertEquals(urlValue, target.toExternalForm()); [EOL] }
public void testUrlDeserialization() { [EOL]     String urlValue = "http://google.com/"; [EOL]     String json = "'http:\\/\\/google.com\\/'"; [EOL]     URL target = gson.fromJson(json, URL.class); [EOL]     assertEquals(urlValue, target.toExternalForm()); [EOL]     gson.fromJson('"' + urlValue + '"', URL.class); [EOL]     assertEquals(urlValue, target.toExternalForm()); [EOL] }
public void testUuidSerialization() throws Exception { [EOL]     String uuidValue = "c237bec1-19ef-4858-a98e-521cf0aad4c0"; [EOL]     UUID uuid = UUID.fromString(uuidValue); [EOL]     assertEquals('"' + uuidValue + '"', gson.toJson(uuid)); [EOL] }
public void testUuidSerialization() throws Exception { [EOL]     String uuidValue = "c237bec1-19ef-4858-a98e-521cf0aad4c0"; [EOL]     UUID uuid = UUID.fromString(uuidValue); [EOL]     assertEquals('"' + uuidValue + '"', gson.toJson(uuid)); [EOL] }
public void testLocaleDeserializationWithLanguage() { [EOL]     String json = "\"en\""; [EOL]     Locale locale = gson.fromJson(json, Locale.class); [EOL]     assertEquals("en", locale.getLanguage()); [EOL] }
public void testLocaleDeserializationWithLanguage() { [EOL]     String json = "\"en\""; [EOL]     Locale locale = gson.fromJson(json, Locale.class); [EOL]     assertEquals("en", locale.getLanguage()); [EOL] }
public void testLocaleDeserializationWithLanguage() { [EOL]     String json = "\"en\""; [EOL]     Locale locale = gson.fromJson(json, Locale.class); [EOL]     assertEquals("en", locale.getLanguage()); [EOL] }
public void testCollectionOfObjectWithNullSerialization() { [EOL]     List<Object> target = new ArrayList<Object>(); [EOL]     target.add("Hello"); [EOL]     target.add(null); [EOL]     target.add("World"); [EOL]     assertEquals("[\"Hello\",null,\"World\"]", gson.toJson(target)); [EOL]     Type type = new TypeToken<List<Object>>() { [EOL]     }.getType(); [EOL]     assertEquals("[\"Hello\",null,\"World\"]", gson.toJson(target, type)); [EOL] }
public void testCollectionOfObjectWithNullSerialization() { [EOL]     List<Object> target = new ArrayList<Object>(); [EOL]     target.add("Hello"); [EOL]     target.add(null); [EOL]     target.add("World"); [EOL]     assertEquals("[\"Hello\",null,\"World\"]", gson.toJson(target)); [EOL]     Type type = new TypeToken<List<Object>>() { [EOL]     }.getType(); [EOL]     assertEquals("[\"Hello\",null,\"World\"]", gson.toJson(target, type)); [EOL] }
public void testCollectionOfObjectWithNullSerialization() { [EOL]     List<Object> target = new ArrayList<Object>(); [EOL]     target.add("Hello"); [EOL]     target.add(null); [EOL]     target.add("World"); [EOL]     assertEquals("[\"Hello\",null,\"World\"]", gson.toJson(target)); [EOL]     Type type = new TypeToken<List<Object>>() { [EOL]     }.getType(); [EOL]     assertEquals("[\"Hello\",null,\"World\"]", gson.toJson(target, type)); [EOL] }
public void testCollectionOfObjectWithNullSerialization() { [EOL]     List<Object> target = new ArrayList<Object>(); [EOL]     target.add("Hello"); [EOL]     target.add(null); [EOL]     target.add("World"); [EOL]     assertEquals("[\"Hello\",null,\"World\"]", gson.toJson(target)); [EOL]     Type type = new TypeToken<List<Object>>() { [EOL]     }.getType(); [EOL]     assertEquals("[\"Hello\",null,\"World\"]", gson.toJson(target, type)); [EOL] }
public void testCollectionOfObjectWithNullSerialization() { [EOL]     List<Object> target = new ArrayList<Object>(); [EOL]     target.add("Hello"); [EOL]     target.add(null); [EOL]     target.add("World"); [EOL]     assertEquals("[\"Hello\",null,\"World\"]", gson.toJson(target)); [EOL]     Type type = new TypeToken<List<Object>>() { [EOL]     }.getType(); [EOL]     assertEquals("[\"Hello\",null,\"World\"]", gson.toJson(target, type)); [EOL] }
public void testTreeSetDeserialization() { [EOL]     String json = "['Value1']"; [EOL]     Type type = new TypeToken<TreeSet<String>>() { [EOL]     }.getType(); [EOL]     TreeSet<String> treeSet = gson.fromJson(json, type); [EOL]     assertTrue(treeSet.contains("Value1")); [EOL] }
public void testTreeSetDeserialization() { [EOL]     String json = "['Value1']"; [EOL]     Type type = new TypeToken<TreeSet<String>>() { [EOL]     }.getType(); [EOL]     TreeSet<String> treeSet = gson.fromJson(json, type); [EOL]     assertTrue(treeSet.contains("Value1")); [EOL] }
public void testTreeSetDeserialization() { [EOL]     String json = "['Value1']"; [EOL]     Type type = new TypeToken<TreeSet<String>>() { [EOL]     }.getType(); [EOL]     TreeSet<String> treeSet = gson.fromJson(json, type); [EOL]     assertTrue(treeSet.contains("Value1")); [EOL] }
public void testTreeSetDeserialization() { [EOL]     String json = "['Value1']"; [EOL]     Type type = new TypeToken<TreeSet<String>>() { [EOL]     }.getType(); [EOL]     TreeSet<String> treeSet = gson.fromJson(json, type); [EOL]     assertTrue(treeSet.contains("Value1")); [EOL] }
public void testTreeSetDeserialization() { [EOL]     String json = "['Value1']"; [EOL]     Type type = new TypeToken<TreeSet<String>>() { [EOL]     }.getType(); [EOL]     TreeSet<String> treeSet = gson.fromJson(json, type); [EOL]     assertTrue(treeSet.contains("Value1")); [EOL] }
public void testMapSerializationWithIntegerKeys() { [EOL]     Map<Integer, String> map = new LinkedHashMap<Integer, String>(); [EOL]     map.put(123, "456"); [EOL]     Type typeOfMap = new TypeToken<Map<Integer, String>>() { [EOL]     }.getType(); [EOL]     String json = gson.toJson(map, typeOfMap); [EOL]     assertEquals("{\"123\":\"456\"}", json); [EOL] }
public void testMapSerializationWithIntegerKeys() { [EOL]     Map<Integer, String> map = new LinkedHashMap<Integer, String>(); [EOL]     map.put(123, "456"); [EOL]     Type typeOfMap = new TypeToken<Map<Integer, String>>() { [EOL]     }.getType(); [EOL]     String json = gson.toJson(map, typeOfMap); [EOL]     assertEquals("{\"123\":\"456\"}", json); [EOL] }
public void testMapSerializationWithIntegerKeys() { [EOL]     Map<Integer, String> map = new LinkedHashMap<Integer, String>(); [EOL]     map.put(123, "456"); [EOL]     Type typeOfMap = new TypeToken<Map<Integer, String>>() { [EOL]     }.getType(); [EOL]     String json = gson.toJson(map, typeOfMap); [EOL]     assertEquals("{\"123\":\"456\"}", json); [EOL] }
public void testMapDeserializationWithNullKey() { [EOL]     Type typeOfMap = new TypeToken<Map<String, Integer>>() { [EOL]     }.getType(); [EOL]     Map<String, Integer> map = gson.fromJson("{\"null\":123}", typeOfMap); [EOL]     assertEquals(1, map.size()); [EOL]     assertNull(map.get(null)); [EOL] }
public void testMapSerialization() { [EOL]     Map<String, Integer> map = new LinkedHashMap<String, Integer>(); [EOL]     map.put("a", 1); [EOL]     map.put("b", 2); [EOL]     Type typeOfMap = new TypeToken<Map<String, Integer>>() { [EOL]     }.getType(); [EOL]     String json = gson.toJson(map, typeOfMap); [EOL]     assertTrue(json.contains("\"a\":1")); [EOL]     assertTrue(json.contains("\"b\":2")); [EOL] }
public void testMapSerialization() { [EOL]     Map<String, Integer> map = new LinkedHashMap<String, Integer>(); [EOL]     map.put("a", 1); [EOL]     map.put("b", 2); [EOL]     Type typeOfMap = new TypeToken<Map<String, Integer>>() { [EOL]     }.getType(); [EOL]     String json = gson.toJson(map, typeOfMap); [EOL]     assertTrue(json.contains("\"a\":1")); [EOL]     assertTrue(json.contains("\"b\":2")); [EOL] }
public void testMapDeserializationWithNullKey() { [EOL]     Type typeOfMap = new TypeToken<Map<String, Integer>>() { [EOL]     }.getType(); [EOL]     Map<String, Integer> map = gson.fromJson("{\"null\":123}", typeOfMap); [EOL]     assertEquals(1, map.size()); [EOL]     assertNull(map.get(null)); [EOL] }
public void testMapDeserializationWithNullKey() { [EOL]     Type typeOfMap = new TypeToken<Map<String, Integer>>() { [EOL]     }.getType(); [EOL]     Map<String, Integer> map = gson.fromJson("{\"null\":123}", typeOfMap); [EOL]     assertEquals(1, map.size()); [EOL]     assertNull(map.get(null)); [EOL] }
public void testDoubleNoFractAsStringRepresentationDeserialization() { [EOL]     String doubleValue = "1E+5"; [EOL]     Double expected = Double.valueOf(doubleValue); [EOL]     Double actual = gson.fromJson(doubleValue, Double.class); [EOL]     assertEquals(expected, actual); [EOL]     double actual1 = gson.fromJson(doubleValue, double.class); [EOL]     assertEquals(expected.doubleValue(), actual1); [EOL] }
public void testDoubleNoFractAsStringRepresentationDeserialization() { [EOL]     String doubleValue = "1E+5"; [EOL]     Double expected = Double.valueOf(doubleValue); [EOL]     Double actual = gson.fromJson(doubleValue, Double.class); [EOL]     assertEquals(expected, actual); [EOL]     double actual1 = gson.fromJson(doubleValue, double.class); [EOL]     assertEquals(expected.doubleValue(), actual1); [EOL] }
public void testTreeSetDeserialization() { [EOL]     String json = "['Value1']"; [EOL]     Type type = new TypeToken<TreeSet<String>>() { [EOL]     }.getType(); [EOL]     TreeSet<String> treeSet = gson.fromJson(json, type); [EOL]     assertTrue(treeSet.contains("Value1")); [EOL] }
public void testTreeSetDeserialization() { [EOL]     String json = "['Value1']"; [EOL]     Type type = new TypeToken<TreeSet<String>>() { [EOL]     }.getType(); [EOL]     TreeSet<String> treeSet = gson.fromJson(json, type); [EOL]     assertTrue(treeSet.contains("Value1")); [EOL] }
public void testEnumSubclass() { [EOL]     assertFalse(Roshambo.class == Roshambo.ROCK.getClass()); [EOL]     assertEquals("\"ROCK\"", gson.toJson(Roshambo.ROCK)); [EOL]     assertEquals("[\"ROCK\",\"PAPER\",\"SCISSORS\"]", gson.toJson(EnumSet.allOf(Roshambo.class))); [EOL]     assertEquals(Roshambo.ROCK, gson.fromJson("\"ROCK\"", Roshambo.class)); [EOL]     assertEquals(EnumSet.allOf(Roshambo.class), gson.fromJson("[\"ROCK\",\"PAPER\",\"SCISSORS\"]", new TypeToken<Set<Roshambo>>() { [EOL]     }.getType())); [EOL] }
public void testMapImplementations() throws Exception { [EOL]     Type parameterizedMapType = new TypeToken<HashMap<String, Integer>>() { [EOL]     }.getType(); [EOL]     TypeInfoMap mapTypeInfo = new TypeInfoMap(parameterizedMapType); [EOL]     assertEquals(String.class, mapTypeInfo.getKeyType()); [EOL]     assertEquals(Integer.class, mapTypeInfo.getValueType()); [EOL] }
public void testMapImplementations() throws Exception { [EOL]     Type parameterizedMapType = new TypeToken<HashMap<String, Integer>>() { [EOL]     }.getType(); [EOL]     TypeInfoMap mapTypeInfo = new TypeInfoMap(parameterizedMapType); [EOL]     assertEquals(String.class, mapTypeInfo.getKeyType()); [EOL]     assertEquals(Integer.class, mapTypeInfo.getValueType()); [EOL] }
public void testMapImplementations() throws Exception { [EOL]     Type parameterizedMapType = new TypeToken<HashMap<String, Integer>>() { [EOL]     }.getType(); [EOL]     TypeInfoMap mapTypeInfo = new TypeInfoMap(parameterizedMapType); [EOL]     assertEquals(String.class, mapTypeInfo.getKeyType()); [EOL]     assertEquals(Integer.class, mapTypeInfo.getValueType()); [EOL] }
public void testMapImplementations() throws Exception { [EOL]     Type parameterizedMapType = new TypeToken<HashMap<String, Integer>>() { [EOL]     }.getType(); [EOL]     TypeInfoMap mapTypeInfo = new TypeInfoMap(parameterizedMapType); [EOL]     assertEquals(String.class, mapTypeInfo.getKeyType()); [EOL]     assertEquals(Integer.class, mapTypeInfo.getValueType()); [EOL] }
public void testMapImplementations() throws Exception { [EOL]     Type parameterizedMapType = new TypeToken<HashMap<String, Integer>>() { [EOL]     }.getType(); [EOL]     TypeInfoMap mapTypeInfo = new TypeInfoMap(parameterizedMapType); [EOL]     assertEquals(String.class, mapTypeInfo.getKeyType()); [EOL]     assertEquals(Integer.class, mapTypeInfo.getValueType()); [EOL] }
public void testEnumSubclass() { [EOL]     assertFalse(Roshambo.class == Roshambo.ROCK.getClass()); [EOL]     assertEquals("\"ROCK\"", gson.toJson(Roshambo.ROCK)); [EOL]     assertEquals("[\"ROCK\",\"PAPER\",\"SCISSORS\"]", gson.toJson(EnumSet.allOf(Roshambo.class))); [EOL]     assertEquals(Roshambo.ROCK, gson.fromJson("\"ROCK\"", Roshambo.class)); [EOL]     assertEquals(EnumSet.allOf(Roshambo.class), gson.fromJson("[\"ROCK\",\"PAPER\",\"SCISSORS\"]", new TypeToken<Set<Roshambo>>() { [EOL]     }.getType())); [EOL] }
public void testEnumSubclass() { [EOL]     assertFalse(Roshambo.class == Roshambo.ROCK.getClass()); [EOL]     assertEquals("\"ROCK\"", gson.toJson(Roshambo.ROCK)); [EOL]     assertEquals("[\"ROCK\",\"PAPER\",\"SCISSORS\"]", gson.toJson(EnumSet.allOf(Roshambo.class))); [EOL]     assertEquals(Roshambo.ROCK, gson.fromJson("\"ROCK\"", Roshambo.class)); [EOL]     assertEquals(EnumSet.allOf(Roshambo.class), gson.fromJson("[\"ROCK\",\"PAPER\",\"SCISSORS\"]", new TypeToken<Set<Roshambo>>() { [EOL]     }.getType())); [EOL] }
public void testEnumSubclass() { [EOL]     assertFalse(Roshambo.class == Roshambo.ROCK.getClass()); [EOL]     assertEquals("\"ROCK\"", gson.toJson(Roshambo.ROCK)); [EOL]     assertEquals("[\"ROCK\",\"PAPER\",\"SCISSORS\"]", gson.toJson(EnumSet.allOf(Roshambo.class))); [EOL]     assertEquals(Roshambo.ROCK, gson.fromJson("\"ROCK\"", Roshambo.class)); [EOL]     assertEquals(EnumSet.allOf(Roshambo.class), gson.fromJson("[\"ROCK\",\"PAPER\",\"SCISSORS\"]", new TypeToken<Set<Roshambo>>() { [EOL]     }.getType())); [EOL] }
public void testEnumSubclass() { [EOL]     assertFalse(Roshambo.class == Roshambo.ROCK.getClass()); [EOL]     assertEquals("\"ROCK\"", gson.toJson(Roshambo.ROCK)); [EOL]     assertEquals("[\"ROCK\",\"PAPER\",\"SCISSORS\"]", gson.toJson(EnumSet.allOf(Roshambo.class))); [EOL]     assertEquals(Roshambo.ROCK, gson.fromJson("\"ROCK\"", Roshambo.class)); [EOL]     assertEquals(EnumSet.allOf(Roshambo.class), gson.fromJson("[\"ROCK\",\"PAPER\",\"SCISSORS\"]", new TypeToken<Set<Roshambo>>() { [EOL]     }.getType())); [EOL] }
public void testEnumSubclass() { [EOL]     assertFalse(Roshambo.class == Roshambo.ROCK.getClass()); [EOL]     assertEquals("\"ROCK\"", gson.toJson(Roshambo.ROCK)); [EOL]     assertEquals("[\"ROCK\",\"PAPER\",\"SCISSORS\"]", gson.toJson(EnumSet.allOf(Roshambo.class))); [EOL]     assertEquals(Roshambo.ROCK, gson.fromJson("\"ROCK\"", Roshambo.class)); [EOL]     assertEquals(EnumSet.allOf(Roshambo.class), gson.fromJson("[\"ROCK\",\"PAPER\",\"SCISSORS\"]", new TypeToken<Set<Roshambo>>() { [EOL]     }.getType())); [EOL] }
public void testEnumSubclass() { [EOL]     assertFalse(Roshambo.class == Roshambo.ROCK.getClass()); [EOL]     assertEquals("\"ROCK\"", gson.toJson(Roshambo.ROCK)); [EOL]     assertEquals("[\"ROCK\",\"PAPER\",\"SCISSORS\"]", gson.toJson(EnumSet.allOf(Roshambo.class))); [EOL]     assertEquals(Roshambo.ROCK, gson.fromJson("\"ROCK\"", Roshambo.class)); [EOL]     assertEquals(EnumSet.allOf(Roshambo.class), gson.fromJson("[\"ROCK\",\"PAPER\",\"SCISSORS\"]", new TypeToken<Set<Roshambo>>() { [EOL]     }.getType())); [EOL] }
public void testEnumSubclass() { [EOL]     assertFalse(Roshambo.class == Roshambo.ROCK.getClass()); [EOL]     assertEquals("\"ROCK\"", gson.toJson(Roshambo.ROCK)); [EOL]     assertEquals("[\"ROCK\",\"PAPER\",\"SCISSORS\"]", gson.toJson(EnumSet.allOf(Roshambo.class))); [EOL]     assertEquals(Roshambo.ROCK, gson.fromJson("\"ROCK\"", Roshambo.class)); [EOL]     assertEquals(EnumSet.allOf(Roshambo.class), gson.fromJson("[\"ROCK\",\"PAPER\",\"SCISSORS\"]", new TypeToken<Set<Roshambo>>() { [EOL]     }.getType())); [EOL] }
public void testEnumSubclass() { [EOL]     assertFalse(Roshambo.class == Roshambo.ROCK.getClass()); [EOL]     assertEquals("\"ROCK\"", gson.toJson(Roshambo.ROCK)); [EOL]     assertEquals("[\"ROCK\",\"PAPER\",\"SCISSORS\"]", gson.toJson(EnumSet.allOf(Roshambo.class))); [EOL]     assertEquals(Roshambo.ROCK, gson.fromJson("\"ROCK\"", Roshambo.class)); [EOL]     assertEquals(EnumSet.allOf(Roshambo.class), gson.fromJson("[\"ROCK\",\"PAPER\",\"SCISSORS\"]", new TypeToken<Set<Roshambo>>() { [EOL]     }.getType())); [EOL] }
public void testEnumSubclass() { [EOL]     assertFalse(Roshambo.class == Roshambo.ROCK.getClass()); [EOL]     assertEquals("\"ROCK\"", gson.toJson(Roshambo.ROCK)); [EOL]     assertEquals("[\"ROCK\",\"PAPER\",\"SCISSORS\"]", gson.toJson(EnumSet.allOf(Roshambo.class))); [EOL]     assertEquals(Roshambo.ROCK, gson.fromJson("\"ROCK\"", Roshambo.class)); [EOL]     assertEquals(EnumSet.allOf(Roshambo.class), gson.fromJson("[\"ROCK\",\"PAPER\",\"SCISSORS\"]", new TypeToken<Set<Roshambo>>() { [EOL]     }.getType())); [EOL] }
public void testEnumSubclass() { [EOL]     assertFalse(Roshambo.class == Roshambo.ROCK.getClass()); [EOL]     assertEquals("\"ROCK\"", gson.toJson(Roshambo.ROCK)); [EOL]     assertEquals("[\"ROCK\",\"PAPER\",\"SCISSORS\"]", gson.toJson(EnumSet.allOf(Roshambo.class))); [EOL]     assertEquals(Roshambo.ROCK, gson.fromJson("\"ROCK\"", Roshambo.class)); [EOL]     assertEquals(EnumSet.allOf(Roshambo.class), gson.fromJson("[\"ROCK\",\"PAPER\",\"SCISSORS\"]", new TypeToken<Set<Roshambo>>() { [EOL]     }.getType())); [EOL] }
public void testEnumSubclass() { [EOL]     assertFalse(Roshambo.class == Roshambo.ROCK.getClass()); [EOL]     assertEquals("\"ROCK\"", gson.toJson(Roshambo.ROCK)); [EOL]     assertEquals("[\"ROCK\",\"PAPER\",\"SCISSORS\"]", gson.toJson(EnumSet.allOf(Roshambo.class))); [EOL]     assertEquals(Roshambo.ROCK, gson.fromJson("\"ROCK\"", Roshambo.class)); [EOL]     assertEquals(EnumSet.allOf(Roshambo.class), gson.fromJson("[\"ROCK\",\"PAPER\",\"SCISSORS\"]", new TypeToken<Set<Roshambo>>() { [EOL]     }.getType())); [EOL] }
public void testEnumSubclass() { [EOL]     assertFalse(Roshambo.class == Roshambo.ROCK.getClass()); [EOL]     assertEquals("\"ROCK\"", gson.toJson(Roshambo.ROCK)); [EOL]     assertEquals("[\"ROCK\",\"PAPER\",\"SCISSORS\"]", gson.toJson(EnumSet.allOf(Roshambo.class))); [EOL]     assertEquals(Roshambo.ROCK, gson.fromJson("\"ROCK\"", Roshambo.class)); [EOL]     assertEquals(EnumSet.allOf(Roshambo.class), gson.fromJson("[\"ROCK\",\"PAPER\",\"SCISSORS\"]", new TypeToken<Set<Roshambo>>() { [EOL]     }.getType())); [EOL] }
public void testEnumSubclass() { [EOL]     assertFalse(Roshambo.class == Roshambo.ROCK.getClass()); [EOL]     assertEquals("\"ROCK\"", gson.toJson(Roshambo.ROCK)); [EOL]     assertEquals("[\"ROCK\",\"PAPER\",\"SCISSORS\"]", gson.toJson(EnumSet.allOf(Roshambo.class))); [EOL]     assertEquals(Roshambo.ROCK, gson.fromJson("\"ROCK\"", Roshambo.class)); [EOL]     assertEquals(EnumSet.allOf(Roshambo.class), gson.fromJson("[\"ROCK\",\"PAPER\",\"SCISSORS\"]", new TypeToken<Set<Roshambo>>() { [EOL]     }.getType())); [EOL] }
public void testEnumSubclass() { [EOL]     assertFalse(Roshambo.class == Roshambo.ROCK.getClass()); [EOL]     assertEquals("\"ROCK\"", gson.toJson(Roshambo.ROCK)); [EOL]     assertEquals("[\"ROCK\",\"PAPER\",\"SCISSORS\"]", gson.toJson(EnumSet.allOf(Roshambo.class))); [EOL]     assertEquals(Roshambo.ROCK, gson.fromJson("\"ROCK\"", Roshambo.class)); [EOL]     assertEquals(EnumSet.allOf(Roshambo.class), gson.fromJson("[\"ROCK\",\"PAPER\",\"SCISSORS\"]", new TypeToken<Set<Roshambo>>() { [EOL]     }.getType())); [EOL] }
public void testEnumSubclass() { [EOL]     assertFalse(Roshambo.class == Roshambo.ROCK.getClass()); [EOL]     assertEquals("\"ROCK\"", gson.toJson(Roshambo.ROCK)); [EOL]     assertEquals("[\"ROCK\",\"PAPER\",\"SCISSORS\"]", gson.toJson(EnumSet.allOf(Roshambo.class))); [EOL]     assertEquals(Roshambo.ROCK, gson.fromJson("\"ROCK\"", Roshambo.class)); [EOL]     assertEquals(EnumSet.allOf(Roshambo.class), gson.fromJson("[\"ROCK\",\"PAPER\",\"SCISSORS\"]", new TypeToken<Set<Roshambo>>() { [EOL]     }.getType())); [EOL] }
public void testEnumSubclass() { [EOL]     assertFalse(Roshambo.class == Roshambo.ROCK.getClass()); [EOL]     assertEquals("\"ROCK\"", gson.toJson(Roshambo.ROCK)); [EOL]     assertEquals("[\"ROCK\",\"PAPER\",\"SCISSORS\"]", gson.toJson(EnumSet.allOf(Roshambo.class))); [EOL]     assertEquals(Roshambo.ROCK, gson.fromJson("\"ROCK\"", Roshambo.class)); [EOL]     assertEquals(EnumSet.allOf(Roshambo.class), gson.fromJson("[\"ROCK\",\"PAPER\",\"SCISSORS\"]", new TypeToken<Set<Roshambo>>() { [EOL]     }.getType())); [EOL] }
public void testEnumSubclass() { [EOL]     assertFalse(Roshambo.class == Roshambo.ROCK.getClass()); [EOL]     assertEquals("\"ROCK\"", gson.toJson(Roshambo.ROCK)); [EOL]     assertEquals("[\"ROCK\",\"PAPER\",\"SCISSORS\"]", gson.toJson(EnumSet.allOf(Roshambo.class))); [EOL]     assertEquals(Roshambo.ROCK, gson.fromJson("\"ROCK\"", Roshambo.class)); [EOL]     assertEquals(EnumSet.allOf(Roshambo.class), gson.fromJson("[\"ROCK\",\"PAPER\",\"SCISSORS\"]", new TypeToken<Set<Roshambo>>() { [EOL]     }.getType())); [EOL] }
public void testEnumSubclass() { [EOL]     assertFalse(Roshambo.class == Roshambo.ROCK.getClass()); [EOL]     assertEquals("\"ROCK\"", gson.toJson(Roshambo.ROCK)); [EOL]     assertEquals("[\"ROCK\",\"PAPER\",\"SCISSORS\"]", gson.toJson(EnumSet.allOf(Roshambo.class))); [EOL]     assertEquals(Roshambo.ROCK, gson.fromJson("\"ROCK\"", Roshambo.class)); [EOL]     assertEquals(EnumSet.allOf(Roshambo.class), gson.fromJson("[\"ROCK\",\"PAPER\",\"SCISSORS\"]", new TypeToken<Set<Roshambo>>() { [EOL]     }.getType())); [EOL] }
public void testEnumSubclass() { [EOL]     assertFalse(Roshambo.class == Roshambo.ROCK.getClass()); [EOL]     assertEquals("\"ROCK\"", gson.toJson(Roshambo.ROCK)); [EOL]     assertEquals("[\"ROCK\",\"PAPER\",\"SCISSORS\"]", gson.toJson(EnumSet.allOf(Roshambo.class))); [EOL]     assertEquals(Roshambo.ROCK, gson.fromJson("\"ROCK\"", Roshambo.class)); [EOL]     assertEquals(EnumSet.allOf(Roshambo.class), gson.fromJson("[\"ROCK\",\"PAPER\",\"SCISSORS\"]", new TypeToken<Set<Roshambo>>() { [EOL]     }.getType())); [EOL] }
public void testEnumSubclass() { [EOL]     assertFalse(Roshambo.class == Roshambo.ROCK.getClass()); [EOL]     assertEquals("\"ROCK\"", gson.toJson(Roshambo.ROCK)); [EOL]     assertEquals("[\"ROCK\",\"PAPER\",\"SCISSORS\"]", gson.toJson(EnumSet.allOf(Roshambo.class))); [EOL]     assertEquals(Roshambo.ROCK, gson.fromJson("\"ROCK\"", Roshambo.class)); [EOL]     assertEquals(EnumSet.allOf(Roshambo.class), gson.fromJson("[\"ROCK\",\"PAPER\",\"SCISSORS\"]", new TypeToken<Set<Roshambo>>() { [EOL]     }.getType())); [EOL] }
public void testEnumSubclass() { [EOL]     assertFalse(Roshambo.class == Roshambo.ROCK.getClass()); [EOL]     assertEquals("\"ROCK\"", gson.toJson(Roshambo.ROCK)); [EOL]     assertEquals("[\"ROCK\",\"PAPER\",\"SCISSORS\"]", gson.toJson(EnumSet.allOf(Roshambo.class))); [EOL]     assertEquals(Roshambo.ROCK, gson.fromJson("\"ROCK\"", Roshambo.class)); [EOL]     assertEquals(EnumSet.allOf(Roshambo.class), gson.fromJson("[\"ROCK\",\"PAPER\",\"SCISSORS\"]", new TypeToken<Set<Roshambo>>() { [EOL]     }.getType())); [EOL] }
public void testEnumSubclass() { [EOL]     assertFalse(Roshambo.class == Roshambo.ROCK.getClass()); [EOL]     assertEquals("\"ROCK\"", gson.toJson(Roshambo.ROCK)); [EOL]     assertEquals("[\"ROCK\",\"PAPER\",\"SCISSORS\"]", gson.toJson(EnumSet.allOf(Roshambo.class))); [EOL]     assertEquals(Roshambo.ROCK, gson.fromJson("\"ROCK\"", Roshambo.class)); [EOL]     assertEquals(EnumSet.allOf(Roshambo.class), gson.fromJson("[\"ROCK\",\"PAPER\",\"SCISSORS\"]", new TypeToken<Set<Roshambo>>() { [EOL]     }.getType())); [EOL] }
public void testEnumSubclass() { [EOL]     assertFalse(Roshambo.class == Roshambo.ROCK.getClass()); [EOL]     assertEquals("\"ROCK\"", gson.toJson(Roshambo.ROCK)); [EOL]     assertEquals("[\"ROCK\",\"PAPER\",\"SCISSORS\"]", gson.toJson(EnumSet.allOf(Roshambo.class))); [EOL]     assertEquals(Roshambo.ROCK, gson.fromJson("\"ROCK\"", Roshambo.class)); [EOL]     assertEquals(EnumSet.allOf(Roshambo.class), gson.fromJson("[\"ROCK\",\"PAPER\",\"SCISSORS\"]", new TypeToken<Set<Roshambo>>() { [EOL]     }.getType())); [EOL] }
public void testEnumSubclass() { [EOL]     assertFalse(Roshambo.class == Roshambo.ROCK.getClass()); [EOL]     assertEquals("\"ROCK\"", gson.toJson(Roshambo.ROCK)); [EOL]     assertEquals("[\"ROCK\",\"PAPER\",\"SCISSORS\"]", gson.toJson(EnumSet.allOf(Roshambo.class))); [EOL]     assertEquals(Roshambo.ROCK, gson.fromJson("\"ROCK\"", Roshambo.class)); [EOL]     assertEquals(EnumSet.allOf(Roshambo.class), gson.fromJson("[\"ROCK\",\"PAPER\",\"SCISSORS\"]", new TypeToken<Set<Roshambo>>() { [EOL]     }.getType())); [EOL] }
public void testBigDecimalInASingleElementArrayDeserialization() { [EOL]     BigDecimal expected = new BigDecimal("-122.08e-21"); [EOL]     BigDecimal actual = gson.fromJson("[-122.08e-21]", BigDecimal.class); [EOL]     assertEquals(expected, actual); [EOL] }
public void testBigDecimalInASingleElementArrayDeserialization() { [EOL]     BigDecimal expected = new BigDecimal("-122.08e-21"); [EOL]     BigDecimal actual = gson.fromJson("[-122.08e-21]", BigDecimal.class); [EOL]     assertEquals(expected, actual); [EOL] }
public void testGsonWithNonDefaultFieldNamingPolicySerialization() { [EOL]     Gson gson = builder.setFieldNamingPolicy(FieldNamingPolicy.UPPER_CAMEL_CASE).create(); [EOL]     StringWrapper target = new StringWrapper("blah"); [EOL]     assertEquals("{\"SomeConstantStringInstanceField\":\"" + target.someConstantStringInstanceField + "\"}", gson.toJson(target)); [EOL] }
public void testGsonWithNonDefaultFieldNamingPolicySerialization() { [EOL]     Gson gson = builder.setFieldNamingPolicy(FieldNamingPolicy.UPPER_CAMEL_CASE).create(); [EOL]     StringWrapper target = new StringWrapper("blah"); [EOL]     assertEquals("{\"SomeConstantStringInstanceField\":\"" + target.someConstantStringInstanceField + "\"}", gson.toJson(target)); [EOL] }
public void testOurTypeFunctionality() throws Exception { [EOL]     assertNull(ourType.getOwnerType()); [EOL]     assertEquals(String.class, ourType.getActualTypeArguments()[0]); [EOL]     assertEquals(List.class, ourType.getRawType()); [EOL]     assertEquals(parameterizedType, ourType); [EOL]     assertEquals(parameterizedType.hashCode(), ourType.hashCode()); [EOL] }
public void testOurTypeFunctionality() throws Exception { [EOL]     assertNull(ourType.getOwnerType()); [EOL]     assertEquals(String.class, ourType.getActualTypeArguments()[0]); [EOL]     assertEquals(List.class, ourType.getRawType()); [EOL]     assertEquals(parameterizedType, ourType); [EOL]     assertEquals(parameterizedType.hashCode(), ourType.hashCode()); [EOL] }
public void testOurTypeFunctionality() throws Exception { [EOL]     assertNull(ourType.getOwnerType()); [EOL]     assertEquals(String.class, ourType.getActualTypeArguments()[0]); [EOL]     assertEquals(List.class, ourType.getRawType()); [EOL]     assertEquals(parameterizedType, ourType); [EOL]     assertEquals(parameterizedType.hashCode(), ourType.hashCode()); [EOL] }
public void testOurTypeFunctionality() throws Exception { [EOL]     assertNull(ourType.getOwnerType()); [EOL]     assertEquals(String.class, ourType.getActualTypeArguments()[0]); [EOL]     assertEquals(List.class, ourType.getRawType()); [EOL]     assertEquals(parameterizedType, ourType); [EOL]     assertEquals(parameterizedType.hashCode(), ourType.hashCode()); [EOL] }
public void testOurTypeFunctionality() throws Exception { [EOL]     assertNull(ourType.getOwnerType()); [EOL]     assertEquals(String.class, ourType.getActualTypeArguments()[0]); [EOL]     assertEquals(List.class, ourType.getRawType()); [EOL]     assertEquals(parameterizedType, ourType); [EOL]     assertEquals(parameterizedType.hashCode(), ourType.hashCode()); [EOL] }
public void testOurTypeFunctionality() throws Exception { [EOL]     assertNull(ourType.getOwnerType()); [EOL]     assertEquals(String.class, ourType.getActualTypeArguments()[0]); [EOL]     assertEquals(List.class, ourType.getRawType()); [EOL]     assertEquals(parameterizedType, ourType); [EOL]     assertEquals(parameterizedType.hashCode(), ourType.hashCode()); [EOL] }
public void testOurTypeFunctionality() throws Exception { [EOL]     assertNull(ourType.getOwnerType()); [EOL]     assertEquals(String.class, ourType.getActualTypeArguments()[0]); [EOL]     assertEquals(List.class, ourType.getRawType()); [EOL]     assertEquals(parameterizedType, ourType); [EOL]     assertEquals(parameterizedType.hashCode(), ourType.hashCode()); [EOL] }
public void testOurTypeFunctionality() throws Exception { [EOL]     assertNull(ourType.getOwnerType()); [EOL]     assertEquals(String.class, ourType.getActualTypeArguments()[0]); [EOL]     assertEquals(List.class, ourType.getRawType()); [EOL]     assertEquals(parameterizedType, ourType); [EOL]     assertEquals(parameterizedType.hashCode(), ourType.hashCode()); [EOL] }
public void testOurTypeFunctionality() throws Exception { [EOL]     assertNull(ourType.getOwnerType()); [EOL]     assertEquals(String.class, ourType.getActualTypeArguments()[0]); [EOL]     assertEquals(List.class, ourType.getRawType()); [EOL]     assertEquals(parameterizedType, ourType); [EOL]     assertEquals(parameterizedType.hashCode(), ourType.hashCode()); [EOL] }
public void testOurTypeFunctionality() throws Exception { [EOL]     assertNull(ourType.getOwnerType()); [EOL]     assertEquals(String.class, ourType.getActualTypeArguments()[0]); [EOL]     assertEquals(List.class, ourType.getRawType()); [EOL]     assertEquals(parameterizedType, ourType); [EOL]     assertEquals(parameterizedType.hashCode(), ourType.hashCode()); [EOL] }
public void testArrayAsParameterizedTypes() throws Exception { [EOL]     Type type = new TypeToken<List<String>[]>() { [EOL]     }.getType(); [EOL]     Type secondLevelType = new TypeToken<List<String>>() { [EOL]     }.getType(); [EOL]     TypeInfoArray typeInfo = new TypeInfoArray(type); [EOL]     assertTrue(typeInfo.isArray()); [EOL]     assertEquals(List[].class, typeInfo.getRawClass()); [EOL]     assertEquals(secondLevelType, typeInfo.getSecondLevelType()); [EOL]     Type actualType = typeInfo.getActualType(); [EOL]     assertEquals(type, actualType); [EOL]     Type actualTypeForFirstTypeVariable = TypeUtils.getActualTypeForFirstTypeVariable(actualType); [EOL]     assertEquals(String.class, actualTypeForFirstTypeVariable); [EOL] }
public void testArrayAsParameterizedTypes() throws Exception { [EOL]     Type type = new TypeToken<List<String>[]>() { [EOL]     }.getType(); [EOL]     Type secondLevelType = new TypeToken<List<String>>() { [EOL]     }.getType(); [EOL]     TypeInfoArray typeInfo = new TypeInfoArray(type); [EOL]     assertTrue(typeInfo.isArray()); [EOL]     assertEquals(List[].class, typeInfo.getRawClass()); [EOL]     assertEquals(secondLevelType, typeInfo.getSecondLevelType()); [EOL]     Type actualType = typeInfo.getActualType(); [EOL]     assertEquals(type, actualType); [EOL]     Type actualTypeForFirstTypeVariable = TypeUtils.getActualTypeForFirstTypeVariable(actualType); [EOL]     assertEquals(String.class, actualTypeForFirstTypeVariable); [EOL] }
public void testArrayAsParameterizedTypes() throws Exception { [EOL]     Type type = new TypeToken<List<String>[]>() { [EOL]     }.getType(); [EOL]     Type secondLevelType = new TypeToken<List<String>>() { [EOL]     }.getType(); [EOL]     TypeInfoArray typeInfo = new TypeInfoArray(type); [EOL]     assertTrue(typeInfo.isArray()); [EOL]     assertEquals(List[].class, typeInfo.getRawClass()); [EOL]     assertEquals(secondLevelType, typeInfo.getSecondLevelType()); [EOL]     Type actualType = typeInfo.getActualType(); [EOL]     assertEquals(type, actualType); [EOL]     Type actualTypeForFirstTypeVariable = TypeUtils.getActualTypeForFirstTypeVariable(actualType); [EOL]     assertEquals(String.class, actualTypeForFirstTypeVariable); [EOL] }
public void testArrayAsParameterizedTypes() throws Exception { [EOL]     Type type = new TypeToken<List<String>[]>() { [EOL]     }.getType(); [EOL]     Type secondLevelType = new TypeToken<List<String>>() { [EOL]     }.getType(); [EOL]     TypeInfoArray typeInfo = new TypeInfoArray(type); [EOL]     assertTrue(typeInfo.isArray()); [EOL]     assertEquals(List[].class, typeInfo.getRawClass()); [EOL]     assertEquals(secondLevelType, typeInfo.getSecondLevelType()); [EOL]     Type actualType = typeInfo.getActualType(); [EOL]     assertEquals(type, actualType); [EOL]     Type actualTypeForFirstTypeVariable = TypeUtils.getActualTypeForFirstTypeVariable(actualType); [EOL]     assertEquals(String.class, actualTypeForFirstTypeVariable); [EOL] }
public void testIsArrayForNonArrayClasses() { [EOL]     assertFalse(TypeUtils.isArray(Boolean.class)); [EOL]     assertFalse(TypeUtils.isArray(MAP_TYPE)); [EOL] }
public void testIsArrayForNonArrayClasses() { [EOL]     assertFalse(TypeUtils.isArray(Boolean.class)); [EOL]     assertFalse(TypeUtils.isArray(MAP_TYPE)); [EOL] }
public void testIsArrayForNonArrayClasses() { [EOL]     assertFalse(TypeUtils.isArray(Boolean.class)); [EOL]     assertFalse(TypeUtils.isArray(MAP_TYPE)); [EOL] }
public void testGsonWithNonDefaultFieldNamingPolicySerialization() { [EOL]     Gson gson = builder.setFieldNamingPolicy(FieldNamingPolicy.UPPER_CAMEL_CASE).create(); [EOL]     StringWrapper target = new StringWrapper("blah"); [EOL]     assertEquals("{\"SomeConstantStringInstanceField\":\"" + target.someConstantStringInstanceField + "\"}", gson.toJson(target)); [EOL] }
public void testGsonWithNonDefaultFieldNamingPolicySerialization() { [EOL]     Gson gson = builder.setFieldNamingPolicy(FieldNamingPolicy.UPPER_CAMEL_CASE).create(); [EOL]     StringWrapper target = new StringWrapper("blah"); [EOL]     assertEquals("{\"SomeConstantStringInstanceField\":\"" + target.someConstantStringInstanceField + "\"}", gson.toJson(target)); [EOL] }
public void testWriterForSerialization() throws Exception { [EOL]     Writer writer = new StringWriter(); [EOL]     BagOfPrimitives src = new BagOfPrimitives(); [EOL]     gson.toJson(src, writer); [EOL]     assertEquals(src.getExpectedJson(), writer.toString()); [EOL] }
public void testWriterForSerialization() throws Exception { [EOL]     Writer writer = new StringWriter(); [EOL]     BagOfPrimitives src = new BagOfPrimitives(); [EOL]     gson.toJson(src, writer); [EOL]     assertEquals(src.getExpectedJson(), writer.toString()); [EOL] }
public void testWriterForSerialization() throws Exception { [EOL]     Writer writer = new StringWriter(); [EOL]     BagOfPrimitives src = new BagOfPrimitives(); [EOL]     gson.toJson(src, writer); [EOL]     assertEquals(src.getExpectedJson(), writer.toString()); [EOL] }
public void testWriterForSerialization() throws Exception { [EOL]     Writer writer = new StringWriter(); [EOL]     BagOfPrimitives src = new BagOfPrimitives(); [EOL]     gson.toJson(src, writer); [EOL]     assertEquals(src.getExpectedJson(), writer.toString()); [EOL] }
public void testWriterForSerialization() throws Exception { [EOL]     Writer writer = new StringWriter(); [EOL]     BagOfPrimitives src = new BagOfPrimitives(); [EOL]     gson.toJson(src, writer); [EOL]     assertEquals(src.getExpectedJson(), writer.toString()); [EOL] }
public void testWriterForSerialization() throws Exception { [EOL]     Writer writer = new StringWriter(); [EOL]     BagOfPrimitives src = new BagOfPrimitives(); [EOL]     gson.toJson(src, writer); [EOL]     assertEquals(src.getExpectedJson(), writer.toString()); [EOL] }
public void testWriterForSerialization() throws Exception { [EOL]     Writer writer = new StringWriter(); [EOL]     BagOfPrimitives src = new BagOfPrimitives(); [EOL]     gson.toJson(src, writer); [EOL]     assertEquals(src.getExpectedJson(), writer.toString()); [EOL] }
public void testJsonObjectWithNullValuesSerialized() { [EOL]     gson = new GsonBuilder().serializeNulls().create(); [EOL]     JsonObject obj = new JsonObject(); [EOL]     obj.addProperty("field1", "value1"); [EOL]     obj.addProperty("field2", (String) null); [EOL]     String json = gson.toJson(obj); [EOL]     assertTrue(json.contains("field1")); [EOL]     assertTrue(json.contains("field2")); [EOL] }
public void testJsonObjectWithNullValuesSerialized() { [EOL]     gson = new GsonBuilder().serializeNulls().create(); [EOL]     JsonObject obj = new JsonObject(); [EOL]     obj.addProperty("field1", "value1"); [EOL]     obj.addProperty("field2", (String) null); [EOL]     String json = gson.toJson(obj); [EOL]     assertTrue(json.contains("field1")); [EOL]     assertTrue(json.contains("field2")); [EOL] }
public void testReaderForDeserialization() throws Exception { [EOL]     BagOfPrimitives expected = new BagOfPrimitives(); [EOL]     Reader json = new StringReader(expected.getExpectedJson()); [EOL]     BagOfPrimitives actual = gson.fromJson(json, BagOfPrimitives.class); [EOL]     assertEquals(expected, actual); [EOL] }
public void testReaderForDeserialization() throws Exception { [EOL]     BagOfPrimitives expected = new BagOfPrimitives(); [EOL]     Reader json = new StringReader(expected.getExpectedJson()); [EOL]     BagOfPrimitives actual = gson.fromJson(json, BagOfPrimitives.class); [EOL]     assertEquals(expected, actual); [EOL] }
public void testEnumSubclass() { [EOL]     assertFalse(Roshambo.class == Roshambo.ROCK.getClass()); [EOL]     assertEquals("\"ROCK\"", gson.toJson(Roshambo.ROCK)); [EOL]     assertEquals("[\"ROCK\",\"PAPER\",\"SCISSORS\"]", gson.toJson(EnumSet.allOf(Roshambo.class))); [EOL]     assertEquals(Roshambo.ROCK, gson.fromJson("\"ROCK\"", Roshambo.class)); [EOL]     assertEquals(EnumSet.allOf(Roshambo.class), gson.fromJson("[\"ROCK\",\"PAPER\",\"SCISSORS\"]", new TypeToken<Set<Roshambo>>() { [EOL]     }.getType())); [EOL] }
public void testEnumSubclass() { [EOL]     assertFalse(Roshambo.class == Roshambo.ROCK.getClass()); [EOL]     assertEquals("\"ROCK\"", gson.toJson(Roshambo.ROCK)); [EOL]     assertEquals("[\"ROCK\",\"PAPER\",\"SCISSORS\"]", gson.toJson(EnumSet.allOf(Roshambo.class))); [EOL]     assertEquals(Roshambo.ROCK, gson.fromJson("\"ROCK\"", Roshambo.class)); [EOL]     assertEquals(EnumSet.allOf(Roshambo.class), gson.fromJson("[\"ROCK\",\"PAPER\",\"SCISSORS\"]", new TypeToken<Set<Roshambo>>() { [EOL]     }.getType())); [EOL] }
public void testSelfReferenceCustomHandlerSerialization() throws Exception { [EOL]     ClassWithSelfReference obj = new ClassWithSelfReference(); [EOL]     obj.child = obj; [EOL]     Gson gson = new GsonBuilder().registerTypeAdapter(ClassWithSelfReference.class, new JsonSerializer<ClassWithSelfReference>() { [EOL]  [EOL]         public JsonElement serialize(ClassWithSelfReference src, Type typeOfSrc, JsonSerializationContext context) { [EOL]             JsonObject obj = new JsonObject(); [EOL]             obj.addProperty("property", "value"); [EOL]             obj.add("child", context.serialize(src.child)); [EOL]             return obj; [EOL]         } [EOL]     }).create(); [EOL]     try { [EOL]         gson.toJson(obj); [EOL]         fail("Circular reference to self can not be serialized!"); [EOL]     } catch (IllegalStateException expected) { [EOL]         assertTrue(expected.getMessage().contains("Offending")); [EOL]     } [EOL] }
public void testSelfReferenceCustomHandlerSerialization() throws Exception { [EOL]     ClassWithSelfReference obj = new ClassWithSelfReference(); [EOL]     obj.child = obj; [EOL]     Gson gson = new GsonBuilder().registerTypeAdapter(ClassWithSelfReference.class, new JsonSerializer<ClassWithSelfReference>() { [EOL]  [EOL]         public JsonElement serialize(ClassWithSelfReference src, Type typeOfSrc, JsonSerializationContext context) { [EOL]             JsonObject obj = new JsonObject(); [EOL]             obj.addProperty("property", "value"); [EOL]             obj.add("child", context.serialize(src.child)); [EOL]             return obj; [EOL]         } [EOL]     }).create(); [EOL]     try { [EOL]         gson.toJson(obj); [EOL]         fail("Circular reference to self can not be serialized!"); [EOL]     } catch (IllegalStateException expected) { [EOL]         assertTrue(expected.getMessage().contains("Offending")); [EOL]     } [EOL] }
public void testEnumSubclass() { [EOL]     assertFalse(Roshambo.class == Roshambo.ROCK.getClass()); [EOL]     assertEquals("\"ROCK\"", gson.toJson(Roshambo.ROCK)); [EOL]     assertEquals("[\"ROCK\",\"PAPER\",\"SCISSORS\"]", gson.toJson(EnumSet.allOf(Roshambo.class))); [EOL]     assertEquals(Roshambo.ROCK, gson.fromJson("\"ROCK\"", Roshambo.class)); [EOL]     assertEquals(EnumSet.allOf(Roshambo.class), gson.fromJson("[\"ROCK\",\"PAPER\",\"SCISSORS\"]", new TypeToken<Set<Roshambo>>() { [EOL]     }.getType())); [EOL] }
public void testEnumSubclass() { [EOL]     assertFalse(Roshambo.class == Roshambo.ROCK.getClass()); [EOL]     assertEquals("\"ROCK\"", gson.toJson(Roshambo.ROCK)); [EOL]     assertEquals("[\"ROCK\",\"PAPER\",\"SCISSORS\"]", gson.toJson(EnumSet.allOf(Roshambo.class))); [EOL]     assertEquals(Roshambo.ROCK, gson.fromJson("\"ROCK\"", Roshambo.class)); [EOL]     assertEquals(EnumSet.allOf(Roshambo.class), gson.fromJson("[\"ROCK\",\"PAPER\",\"SCISSORS\"]", new TypeToken<Set<Roshambo>>() { [EOL]     }.getType())); [EOL] }
public void testEnumSubclass() { [EOL]     assertFalse(Roshambo.class == Roshambo.ROCK.getClass()); [EOL]     assertEquals("\"ROCK\"", gson.toJson(Roshambo.ROCK)); [EOL]     assertEquals("[\"ROCK\",\"PAPER\",\"SCISSORS\"]", gson.toJson(EnumSet.allOf(Roshambo.class))); [EOL]     assertEquals(Roshambo.ROCK, gson.fromJson("\"ROCK\"", Roshambo.class)); [EOL]     assertEquals(EnumSet.allOf(Roshambo.class), gson.fromJson("[\"ROCK\",\"PAPER\",\"SCISSORS\"]", new TypeToken<Set<Roshambo>>() { [EOL]     }.getType())); [EOL] }
public void testEnumSubclass() { [EOL]     assertFalse(Roshambo.class == Roshambo.ROCK.getClass()); [EOL]     assertEquals("\"ROCK\"", gson.toJson(Roshambo.ROCK)); [EOL]     assertEquals("[\"ROCK\",\"PAPER\",\"SCISSORS\"]", gson.toJson(EnumSet.allOf(Roshambo.class))); [EOL]     assertEquals(Roshambo.ROCK, gson.fromJson("\"ROCK\"", Roshambo.class)); [EOL]     assertEquals(EnumSet.allOf(Roshambo.class), gson.fromJson("[\"ROCK\",\"PAPER\",\"SCISSORS\"]", new TypeToken<Set<Roshambo>>() { [EOL]     }.getType())); [EOL] }
public void testCustomSerializationOfNulls() { [EOL]     gsonBuilder.registerTypeAdapter(ClassWithObjects.class, new ClassWithObjectsSerializer()); [EOL]     Gson gson = gsonBuilder.create(); [EOL]     ClassWithObjects target = new ClassWithObjects(new BagOfPrimitives()); [EOL]     String actual = gson.toJson(target); [EOL]     String expected = "{\"bag\":null}"; [EOL]     assertEquals(expected, actual); [EOL] }
public void testEnumSubclass() { [EOL]     assertFalse(Roshambo.class == Roshambo.ROCK.getClass()); [EOL]     assertEquals("\"ROCK\"", gson.toJson(Roshambo.ROCK)); [EOL]     assertEquals("[\"ROCK\",\"PAPER\",\"SCISSORS\"]", gson.toJson(EnumSet.allOf(Roshambo.class))); [EOL]     assertEquals(Roshambo.ROCK, gson.fromJson("\"ROCK\"", Roshambo.class)); [EOL]     assertEquals(EnumSet.allOf(Roshambo.class), gson.fromJson("[\"ROCK\",\"PAPER\",\"SCISSORS\"]", new TypeToken<Set<Roshambo>>() { [EOL]     }.getType())); [EOL] }
public void testEnumSubclass() { [EOL]     assertFalse(Roshambo.class == Roshambo.ROCK.getClass()); [EOL]     assertEquals("\"ROCK\"", gson.toJson(Roshambo.ROCK)); [EOL]     assertEquals("[\"ROCK\",\"PAPER\",\"SCISSORS\"]", gson.toJson(EnumSet.allOf(Roshambo.class))); [EOL]     assertEquals(Roshambo.ROCK, gson.fromJson("\"ROCK\"", Roshambo.class)); [EOL]     assertEquals(EnumSet.allOf(Roshambo.class), gson.fromJson("[\"ROCK\",\"PAPER\",\"SCISSORS\"]", new TypeToken<Set<Roshambo>>() { [EOL]     }.getType())); [EOL] }
public void testEnumSubclass() { [EOL]     assertFalse(Roshambo.class == Roshambo.ROCK.getClass()); [EOL]     assertEquals("\"ROCK\"", gson.toJson(Roshambo.ROCK)); [EOL]     assertEquals("[\"ROCK\",\"PAPER\",\"SCISSORS\"]", gson.toJson(EnumSet.allOf(Roshambo.class))); [EOL]     assertEquals(Roshambo.ROCK, gson.fromJson("\"ROCK\"", Roshambo.class)); [EOL]     assertEquals(EnumSet.allOf(Roshambo.class), gson.fromJson("[\"ROCK\",\"PAPER\",\"SCISSORS\"]", new TypeToken<Set<Roshambo>>() { [EOL]     }.getType())); [EOL] }
public void testEnumSubclass() { [EOL]     assertFalse(Roshambo.class == Roshambo.ROCK.getClass()); [EOL]     assertEquals("\"ROCK\"", gson.toJson(Roshambo.ROCK)); [EOL]     assertEquals("[\"ROCK\",\"PAPER\",\"SCISSORS\"]", gson.toJson(EnumSet.allOf(Roshambo.class))); [EOL]     assertEquals(Roshambo.ROCK, gson.fromJson("\"ROCK\"", Roshambo.class)); [EOL]     assertEquals(EnumSet.allOf(Roshambo.class), gson.fromJson("[\"ROCK\",\"PAPER\",\"SCISSORS\"]", new TypeToken<Set<Roshambo>>() { [EOL]     }.getType())); [EOL] }
public void testEnumSubclass() { [EOL]     assertFalse(Roshambo.class == Roshambo.ROCK.getClass()); [EOL]     assertEquals("\"ROCK\"", gson.toJson(Roshambo.ROCK)); [EOL]     assertEquals("[\"ROCK\",\"PAPER\",\"SCISSORS\"]", gson.toJson(EnumSet.allOf(Roshambo.class))); [EOL]     assertEquals(Roshambo.ROCK, gson.fromJson("\"ROCK\"", Roshambo.class)); [EOL]     assertEquals(EnumSet.allOf(Roshambo.class), gson.fromJson("[\"ROCK\",\"PAPER\",\"SCISSORS\"]", new TypeToken<Set<Roshambo>>() { [EOL]     }.getType())); [EOL] }
public void testEnumSubclass() { [EOL]     assertFalse(Roshambo.class == Roshambo.ROCK.getClass()); [EOL]     assertEquals("\"ROCK\"", gson.toJson(Roshambo.ROCK)); [EOL]     assertEquals("[\"ROCK\",\"PAPER\",\"SCISSORS\"]", gson.toJson(EnumSet.allOf(Roshambo.class))); [EOL]     assertEquals(Roshambo.ROCK, gson.fromJson("\"ROCK\"", Roshambo.class)); [EOL]     assertEquals(EnumSet.allOf(Roshambo.class), gson.fromJson("[\"ROCK\",\"PAPER\",\"SCISSORS\"]", new TypeToken<Set<Roshambo>>() { [EOL]     }.getType())); [EOL] }
public void testEnumSubclass() { [EOL]     assertFalse(Roshambo.class == Roshambo.ROCK.getClass()); [EOL]     assertEquals("\"ROCK\"", gson.toJson(Roshambo.ROCK)); [EOL]     assertEquals("[\"ROCK\",\"PAPER\",\"SCISSORS\"]", gson.toJson(EnumSet.allOf(Roshambo.class))); [EOL]     assertEquals(Roshambo.ROCK, gson.fromJson("\"ROCK\"", Roshambo.class)); [EOL]     assertEquals(EnumSet.allOf(Roshambo.class), gson.fromJson("[\"ROCK\",\"PAPER\",\"SCISSORS\"]", new TypeToken<Set<Roshambo>>() { [EOL]     }.getType())); [EOL] }
public void testEnumSubclass() { [EOL]     assertFalse(Roshambo.class == Roshambo.ROCK.getClass()); [EOL]     assertEquals("\"ROCK\"", gson.toJson(Roshambo.ROCK)); [EOL]     assertEquals("[\"ROCK\",\"PAPER\",\"SCISSORS\"]", gson.toJson(EnumSet.allOf(Roshambo.class))); [EOL]     assertEquals(Roshambo.ROCK, gson.fromJson("\"ROCK\"", Roshambo.class)); [EOL]     assertEquals(EnumSet.allOf(Roshambo.class), gson.fromJson("[\"ROCK\",\"PAPER\",\"SCISSORS\"]", new TypeToken<Set<Roshambo>>() { [EOL]     }.getType())); [EOL] }
public void testEnumSubclass() { [EOL]     assertFalse(Roshambo.class == Roshambo.ROCK.getClass()); [EOL]     assertEquals("\"ROCK\"", gson.toJson(Roshambo.ROCK)); [EOL]     assertEquals("[\"ROCK\",\"PAPER\",\"SCISSORS\"]", gson.toJson(EnumSet.allOf(Roshambo.class))); [EOL]     assertEquals(Roshambo.ROCK, gson.fromJson("\"ROCK\"", Roshambo.class)); [EOL]     assertEquals(EnumSet.allOf(Roshambo.class), gson.fromJson("[\"ROCK\",\"PAPER\",\"SCISSORS\"]", new TypeToken<Set<Roshambo>>() { [EOL]     }.getType())); [EOL] }
public void testNotEquals() throws Exception { [EOL]     Type differentGenericArrayType = new TypeToken<List<String>[][]>() { [EOL]     }.getType(); [EOL]     assertFalse(differentGenericArrayType.equals(ourType)); [EOL]     assertFalse(ourType.equals(differentGenericArrayType)); [EOL] }
public void testNotEquals() throws Exception { [EOL]     Type differentGenericArrayType = new TypeToken<List<String>[][]>() { [EOL]     }.getType(); [EOL]     assertFalse(differentGenericArrayType.equals(ourType)); [EOL]     assertFalse(ourType.equals(differentGenericArrayType)); [EOL] }
public void testNotEquals() throws Exception { [EOL]     Type differentGenericArrayType = new TypeToken<List<String>[][]>() { [EOL]     }.getType(); [EOL]     assertFalse(differentGenericArrayType.equals(ourType)); [EOL]     assertFalse(ourType.equals(differentGenericArrayType)); [EOL] }
public void testNotEquals() throws Exception { [EOL]     Type differentGenericArrayType = new TypeToken<List<String>[][]>() { [EOL]     }.getType(); [EOL]     assertFalse(differentGenericArrayType.equals(ourType)); [EOL]     assertFalse(ourType.equals(differentGenericArrayType)); [EOL] }
public void testNotEquals() throws Exception { [EOL]     Type differentGenericArrayType = new TypeToken<List<String>[][]>() { [EOL]     }.getType(); [EOL]     assertFalse(differentGenericArrayType.equals(ourType)); [EOL]     assertFalse(ourType.equals(differentGenericArrayType)); [EOL] }
public void testCacheEviction() throws Exception { [EOL]     Cache<String, Integer> cache = new LruCache<String, Integer>(5); [EOL]     cache.addElement("key1", 1); [EOL]     cache.addElement("key2", 2); [EOL]     cache.addElement("key3", 3); [EOL]     cache.addElement("key4", 4); [EOL]     cache.addElement("key5", 5); [EOL]     assertEquals(1, cache.getElement("key1").intValue()); [EOL]     assertEquals(2, cache.getElement("key2").intValue()); [EOL]     assertEquals(3, cache.getElement("key3").intValue()); [EOL]     assertEquals(4, cache.getElement("key4").intValue()); [EOL]     assertEquals(5, cache.getElement("key5").intValue()); [EOL]     cache.getElement("key1"); [EOL]     cache.getElement("key3"); [EOL]     cache.addElement("key6", 6); [EOL]     cache.addElement("key7", 7); [EOL]     assertEquals(1, cache.getElement("key1").intValue()); [EOL]     assertNull(cache.getElement("key2")); [EOL]     assertEquals(3, cache.getElement("key3").intValue()); [EOL]     assertNull(cache.getElement("key4")); [EOL]     assertEquals(5, cache.getElement("key5").intValue()); [EOL]     assertEquals(6, cache.getElement("key6").intValue()); [EOL]     assertEquals(7, cache.getElement("key7").intValue()); [EOL] }
public void testCacheEviction() throws Exception { [EOL]     Cache<String, Integer> cache = new LruCache<String, Integer>(5); [EOL]     cache.addElement("key1", 1); [EOL]     cache.addElement("key2", 2); [EOL]     cache.addElement("key3", 3); [EOL]     cache.addElement("key4", 4); [EOL]     cache.addElement("key5", 5); [EOL]     assertEquals(1, cache.getElement("key1").intValue()); [EOL]     assertEquals(2, cache.getElement("key2").intValue()); [EOL]     assertEquals(3, cache.getElement("key3").intValue()); [EOL]     assertEquals(4, cache.getElement("key4").intValue()); [EOL]     assertEquals(5, cache.getElement("key5").intValue()); [EOL]     cache.getElement("key1"); [EOL]     cache.getElement("key3"); [EOL]     cache.addElement("key6", 6); [EOL]     cache.addElement("key7", 7); [EOL]     assertEquals(1, cache.getElement("key1").intValue()); [EOL]     assertNull(cache.getElement("key2")); [EOL]     assertEquals(3, cache.getElement("key3").intValue()); [EOL]     assertNull(cache.getElement("key4")); [EOL]     assertEquals(5, cache.getElement("key5").intValue()); [EOL]     assertEquals(6, cache.getElement("key6").intValue()); [EOL]     assertEquals(7, cache.getElement("key7").intValue()); [EOL] }
public void testCacheEviction() throws Exception { [EOL]     Cache<String, Integer> cache = new LruCache<String, Integer>(5); [EOL]     cache.addElement("key1", 1); [EOL]     cache.addElement("key2", 2); [EOL]     cache.addElement("key3", 3); [EOL]     cache.addElement("key4", 4); [EOL]     cache.addElement("key5", 5); [EOL]     assertEquals(1, cache.getElement("key1").intValue()); [EOL]     assertEquals(2, cache.getElement("key2").intValue()); [EOL]     assertEquals(3, cache.getElement("key3").intValue()); [EOL]     assertEquals(4, cache.getElement("key4").intValue()); [EOL]     assertEquals(5, cache.getElement("key5").intValue()); [EOL]     cache.getElement("key1"); [EOL]     cache.getElement("key3"); [EOL]     cache.addElement("key6", 6); [EOL]     cache.addElement("key7", 7); [EOL]     assertEquals(1, cache.getElement("key1").intValue()); [EOL]     assertNull(cache.getElement("key2")); [EOL]     assertEquals(3, cache.getElement("key3").intValue()); [EOL]     assertNull(cache.getElement("key4")); [EOL]     assertEquals(5, cache.getElement("key5").intValue()); [EOL]     assertEquals(6, cache.getElement("key6").intValue()); [EOL]     assertEquals(7, cache.getElement("key7").intValue()); [EOL] }
public void testCacheEviction() throws Exception { [EOL]     Cache<String, Integer> cache = new LruCache<String, Integer>(5); [EOL]     cache.addElement("key1", 1); [EOL]     cache.addElement("key2", 2); [EOL]     cache.addElement("key3", 3); [EOL]     cache.addElement("key4", 4); [EOL]     cache.addElement("key5", 5); [EOL]     assertEquals(1, cache.getElement("key1").intValue()); [EOL]     assertEquals(2, cache.getElement("key2").intValue()); [EOL]     assertEquals(3, cache.getElement("key3").intValue()); [EOL]     assertEquals(4, cache.getElement("key4").intValue()); [EOL]     assertEquals(5, cache.getElement("key5").intValue()); [EOL]     cache.getElement("key1"); [EOL]     cache.getElement("key3"); [EOL]     cache.addElement("key6", 6); [EOL]     cache.addElement("key7", 7); [EOL]     assertEquals(1, cache.getElement("key1").intValue()); [EOL]     assertNull(cache.getElement("key2")); [EOL]     assertEquals(3, cache.getElement("key3").intValue()); [EOL]     assertNull(cache.getElement("key4")); [EOL]     assertEquals(5, cache.getElement("key5").intValue()); [EOL]     assertEquals(6, cache.getElement("key6").intValue()); [EOL]     assertEquals(7, cache.getElement("key7").intValue()); [EOL] }
public void testCacheEviction() throws Exception { [EOL]     Cache<String, Integer> cache = new LruCache<String, Integer>(5); [EOL]     cache.addElement("key1", 1); [EOL]     cache.addElement("key2", 2); [EOL]     cache.addElement("key3", 3); [EOL]     cache.addElement("key4", 4); [EOL]     cache.addElement("key5", 5); [EOL]     assertEquals(1, cache.getElement("key1").intValue()); [EOL]     assertEquals(2, cache.getElement("key2").intValue()); [EOL]     assertEquals(3, cache.getElement("key3").intValue()); [EOL]     assertEquals(4, cache.getElement("key4").intValue()); [EOL]     assertEquals(5, cache.getElement("key5").intValue()); [EOL]     cache.getElement("key1"); [EOL]     cache.getElement("key3"); [EOL]     cache.addElement("key6", 6); [EOL]     cache.addElement("key7", 7); [EOL]     assertEquals(1, cache.getElement("key1").intValue()); [EOL]     assertNull(cache.getElement("key2")); [EOL]     assertEquals(3, cache.getElement("key3").intValue()); [EOL]     assertNull(cache.getElement("key4")); [EOL]     assertEquals(5, cache.getElement("key5").intValue()); [EOL]     assertEquals(6, cache.getElement("key6").intValue()); [EOL]     assertEquals(7, cache.getElement("key7").intValue()); [EOL] }
public void testCacheEviction() throws Exception { [EOL]     Cache<String, Integer> cache = new LruCache<String, Integer>(5); [EOL]     cache.addElement("key1", 1); [EOL]     cache.addElement("key2", 2); [EOL]     cache.addElement("key3", 3); [EOL]     cache.addElement("key4", 4); [EOL]     cache.addElement("key5", 5); [EOL]     assertEquals(1, cache.getElement("key1").intValue()); [EOL]     assertEquals(2, cache.getElement("key2").intValue()); [EOL]     assertEquals(3, cache.getElement("key3").intValue()); [EOL]     assertEquals(4, cache.getElement("key4").intValue()); [EOL]     assertEquals(5, cache.getElement("key5").intValue()); [EOL]     cache.getElement("key1"); [EOL]     cache.getElement("key3"); [EOL]     cache.addElement("key6", 6); [EOL]     cache.addElement("key7", 7); [EOL]     assertEquals(1, cache.getElement("key1").intValue()); [EOL]     assertNull(cache.getElement("key2")); [EOL]     assertEquals(3, cache.getElement("key3").intValue()); [EOL]     assertNull(cache.getElement("key4")); [EOL]     assertEquals(5, cache.getElement("key5").intValue()); [EOL]     assertEquals(6, cache.getElement("key6").intValue()); [EOL]     assertEquals(7, cache.getElement("key7").intValue()); [EOL] }
public void testCacheEviction() throws Exception { [EOL]     Cache<String, Integer> cache = new LruCache<String, Integer>(5); [EOL]     cache.addElement("key1", 1); [EOL]     cache.addElement("key2", 2); [EOL]     cache.addElement("key3", 3); [EOL]     cache.addElement("key4", 4); [EOL]     cache.addElement("key5", 5); [EOL]     assertEquals(1, cache.getElement("key1").intValue()); [EOL]     assertEquals(2, cache.getElement("key2").intValue()); [EOL]     assertEquals(3, cache.getElement("key3").intValue()); [EOL]     assertEquals(4, cache.getElement("key4").intValue()); [EOL]     assertEquals(5, cache.getElement("key5").intValue()); [EOL]     cache.getElement("key1"); [EOL]     cache.getElement("key3"); [EOL]     cache.addElement("key6", 6); [EOL]     cache.addElement("key7", 7); [EOL]     assertEquals(1, cache.getElement("key1").intValue()); [EOL]     assertNull(cache.getElement("key2")); [EOL]     assertEquals(3, cache.getElement("key3").intValue()); [EOL]     assertNull(cache.getElement("key4")); [EOL]     assertEquals(5, cache.getElement("key5").intValue()); [EOL]     assertEquals(6, cache.getElement("key6").intValue()); [EOL]     assertEquals(7, cache.getElement("key7").intValue()); [EOL] }
public void testCacheEviction() throws Exception { [EOL]     Cache<String, Integer> cache = new LruCache<String, Integer>(5); [EOL]     cache.addElement("key1", 1); [EOL]     cache.addElement("key2", 2); [EOL]     cache.addElement("key3", 3); [EOL]     cache.addElement("key4", 4); [EOL]     cache.addElement("key5", 5); [EOL]     assertEquals(1, cache.getElement("key1").intValue()); [EOL]     assertEquals(2, cache.getElement("key2").intValue()); [EOL]     assertEquals(3, cache.getElement("key3").intValue()); [EOL]     assertEquals(4, cache.getElement("key4").intValue()); [EOL]     assertEquals(5, cache.getElement("key5").intValue()); [EOL]     cache.getElement("key1"); [EOL]     cache.getElement("key3"); [EOL]     cache.addElement("key6", 6); [EOL]     cache.addElement("key7", 7); [EOL]     assertEquals(1, cache.getElement("key1").intValue()); [EOL]     assertNull(cache.getElement("key2")); [EOL]     assertEquals(3, cache.getElement("key3").intValue()); [EOL]     assertNull(cache.getElement("key4")); [EOL]     assertEquals(5, cache.getElement("key5").intValue()); [EOL]     assertEquals(6, cache.getElement("key6").intValue()); [EOL]     assertEquals(7, cache.getElement("key7").intValue()); [EOL] }
public void testCacheEviction() throws Exception { [EOL]     Cache<String, Integer> cache = new LruCache<String, Integer>(5); [EOL]     cache.addElement("key1", 1); [EOL]     cache.addElement("key2", 2); [EOL]     cache.addElement("key3", 3); [EOL]     cache.addElement("key4", 4); [EOL]     cache.addElement("key5", 5); [EOL]     assertEquals(1, cache.getElement("key1").intValue()); [EOL]     assertEquals(2, cache.getElement("key2").intValue()); [EOL]     assertEquals(3, cache.getElement("key3").intValue()); [EOL]     assertEquals(4, cache.getElement("key4").intValue()); [EOL]     assertEquals(5, cache.getElement("key5").intValue()); [EOL]     cache.getElement("key1"); [EOL]     cache.getElement("key3"); [EOL]     cache.addElement("key6", 6); [EOL]     cache.addElement("key7", 7); [EOL]     assertEquals(1, cache.getElement("key1").intValue()); [EOL]     assertNull(cache.getElement("key2")); [EOL]     assertEquals(3, cache.getElement("key3").intValue()); [EOL]     assertNull(cache.getElement("key4")); [EOL]     assertEquals(5, cache.getElement("key5").intValue()); [EOL]     assertEquals(6, cache.getElement("key6").intValue()); [EOL]     assertEquals(7, cache.getElement("key7").intValue()); [EOL] }
public void testCacheEviction() throws Exception { [EOL]     Cache<String, Integer> cache = new LruCache<String, Integer>(5); [EOL]     cache.addElement("key1", 1); [EOL]     cache.addElement("key2", 2); [EOL]     cache.addElement("key3", 3); [EOL]     cache.addElement("key4", 4); [EOL]     cache.addElement("key5", 5); [EOL]     assertEquals(1, cache.getElement("key1").intValue()); [EOL]     assertEquals(2, cache.getElement("key2").intValue()); [EOL]     assertEquals(3, cache.getElement("key3").intValue()); [EOL]     assertEquals(4, cache.getElement("key4").intValue()); [EOL]     assertEquals(5, cache.getElement("key5").intValue()); [EOL]     cache.getElement("key1"); [EOL]     cache.getElement("key3"); [EOL]     cache.addElement("key6", 6); [EOL]     cache.addElement("key7", 7); [EOL]     assertEquals(1, cache.getElement("key1").intValue()); [EOL]     assertNull(cache.getElement("key2")); [EOL]     assertEquals(3, cache.getElement("key3").intValue()); [EOL]     assertNull(cache.getElement("key4")); [EOL]     assertEquals(5, cache.getElement("key5").intValue()); [EOL]     assertEquals(6, cache.getElement("key6").intValue()); [EOL]     assertEquals(7, cache.getElement("key7").intValue()); [EOL] }
public void testCacheEviction() throws Exception { [EOL]     Cache<String, Integer> cache = new LruCache<String, Integer>(5); [EOL]     cache.addElement("key1", 1); [EOL]     cache.addElement("key2", 2); [EOL]     cache.addElement("key3", 3); [EOL]     cache.addElement("key4", 4); [EOL]     cache.addElement("key5", 5); [EOL]     assertEquals(1, cache.getElement("key1").intValue()); [EOL]     assertEquals(2, cache.getElement("key2").intValue()); [EOL]     assertEquals(3, cache.getElement("key3").intValue()); [EOL]     assertEquals(4, cache.getElement("key4").intValue()); [EOL]     assertEquals(5, cache.getElement("key5").intValue()); [EOL]     cache.getElement("key1"); [EOL]     cache.getElement("key3"); [EOL]     cache.addElement("key6", 6); [EOL]     cache.addElement("key7", 7); [EOL]     assertEquals(1, cache.getElement("key1").intValue()); [EOL]     assertNull(cache.getElement("key2")); [EOL]     assertEquals(3, cache.getElement("key3").intValue()); [EOL]     assertNull(cache.getElement("key4")); [EOL]     assertEquals(5, cache.getElement("key5").intValue()); [EOL]     assertEquals(6, cache.getElement("key6").intValue()); [EOL]     assertEquals(7, cache.getElement("key7").intValue()); [EOL] }
public void testEnumSubclass() { [EOL]     assertFalse(Roshambo.class == Roshambo.ROCK.getClass()); [EOL]     assertEquals("\"ROCK\"", gson.toJson(Roshambo.ROCK)); [EOL]     assertEquals("[\"ROCK\",\"PAPER\",\"SCISSORS\"]", gson.toJson(EnumSet.allOf(Roshambo.class))); [EOL]     assertEquals(Roshambo.ROCK, gson.fromJson("\"ROCK\"", Roshambo.class)); [EOL]     assertEquals(EnumSet.allOf(Roshambo.class), gson.fromJson("[\"ROCK\",\"PAPER\",\"SCISSORS\"]", new TypeToken<Set<Roshambo>>() { [EOL]     }.getType())); [EOL] }
public void testEnumSubclass() { [EOL]     assertFalse(Roshambo.class == Roshambo.ROCK.getClass()); [EOL]     assertEquals("\"ROCK\"", gson.toJson(Roshambo.ROCK)); [EOL]     assertEquals("[\"ROCK\",\"PAPER\",\"SCISSORS\"]", gson.toJson(EnumSet.allOf(Roshambo.class))); [EOL]     assertEquals(Roshambo.ROCK, gson.fromJson("\"ROCK\"", Roshambo.class)); [EOL]     assertEquals(EnumSet.allOf(Roshambo.class), gson.fromJson("[\"ROCK\",\"PAPER\",\"SCISSORS\"]", new TypeToken<Set<Roshambo>>() { [EOL]     }.getType())); [EOL] }
public void testEnumSubclass() { [EOL]     assertFalse(Roshambo.class == Roshambo.ROCK.getClass()); [EOL]     assertEquals("\"ROCK\"", gson.toJson(Roshambo.ROCK)); [EOL]     assertEquals("[\"ROCK\",\"PAPER\",\"SCISSORS\"]", gson.toJson(EnumSet.allOf(Roshambo.class))); [EOL]     assertEquals(Roshambo.ROCK, gson.fromJson("\"ROCK\"", Roshambo.class)); [EOL]     assertEquals(EnumSet.allOf(Roshambo.class), gson.fromJson("[\"ROCK\",\"PAPER\",\"SCISSORS\"]", new TypeToken<Set<Roshambo>>() { [EOL]     }.getType())); [EOL] }
public void testEnumSubclass() { [EOL]     assertFalse(Roshambo.class == Roshambo.ROCK.getClass()); [EOL]     assertEquals("\"ROCK\"", gson.toJson(Roshambo.ROCK)); [EOL]     assertEquals("[\"ROCK\",\"PAPER\",\"SCISSORS\"]", gson.toJson(EnumSet.allOf(Roshambo.class))); [EOL]     assertEquals(Roshambo.ROCK, gson.fromJson("\"ROCK\"", Roshambo.class)); [EOL]     assertEquals(EnumSet.allOf(Roshambo.class), gson.fromJson("[\"ROCK\",\"PAPER\",\"SCISSORS\"]", new TypeToken<Set<Roshambo>>() { [EOL]     }.getType())); [EOL] }
public void testEnumSubclass() { [EOL]     assertFalse(Roshambo.class == Roshambo.ROCK.getClass()); [EOL]     assertEquals("\"ROCK\"", gson.toJson(Roshambo.ROCK)); [EOL]     assertEquals("[\"ROCK\",\"PAPER\",\"SCISSORS\"]", gson.toJson(EnumSet.allOf(Roshambo.class))); [EOL]     assertEquals(Roshambo.ROCK, gson.fromJson("\"ROCK\"", Roshambo.class)); [EOL]     assertEquals(EnumSet.allOf(Roshambo.class), gson.fromJson("[\"ROCK\",\"PAPER\",\"SCISSORS\"]", new TypeToken<Set<Roshambo>>() { [EOL]     }.getType())); [EOL] }
public void testEnumSubclass() { [EOL]     assertFalse(Roshambo.class == Roshambo.ROCK.getClass()); [EOL]     assertEquals("\"ROCK\"", gson.toJson(Roshambo.ROCK)); [EOL]     assertEquals("[\"ROCK\",\"PAPER\",\"SCISSORS\"]", gson.toJson(EnumSet.allOf(Roshambo.class))); [EOL]     assertEquals(Roshambo.ROCK, gson.fromJson("\"ROCK\"", Roshambo.class)); [EOL]     assertEquals(EnumSet.allOf(Roshambo.class), gson.fromJson("[\"ROCK\",\"PAPER\",\"SCISSORS\"]", new TypeToken<Set<Roshambo>>() { [EOL]     }.getType())); [EOL] }
public void testEnumSubclass() { [EOL]     assertFalse(Roshambo.class == Roshambo.ROCK.getClass()); [EOL]     assertEquals("\"ROCK\"", gson.toJson(Roshambo.ROCK)); [EOL]     assertEquals("[\"ROCK\",\"PAPER\",\"SCISSORS\"]", gson.toJson(EnumSet.allOf(Roshambo.class))); [EOL]     assertEquals(Roshambo.ROCK, gson.fromJson("\"ROCK\"", Roshambo.class)); [EOL]     assertEquals(EnumSet.allOf(Roshambo.class), gson.fromJson("[\"ROCK\",\"PAPER\",\"SCISSORS\"]", new TypeToken<Set<Roshambo>>() { [EOL]     }.getType())); [EOL] }
public void testEnumSubclass() { [EOL]     assertFalse(Roshambo.class == Roshambo.ROCK.getClass()); [EOL]     assertEquals("\"ROCK\"", gson.toJson(Roshambo.ROCK)); [EOL]     assertEquals("[\"ROCK\",\"PAPER\",\"SCISSORS\"]", gson.toJson(EnumSet.allOf(Roshambo.class))); [EOL]     assertEquals(Roshambo.ROCK, gson.fromJson("\"ROCK\"", Roshambo.class)); [EOL]     assertEquals(EnumSet.allOf(Roshambo.class), gson.fromJson("[\"ROCK\",\"PAPER\",\"SCISSORS\"]", new TypeToken<Set<Roshambo>>() { [EOL]     }.getType())); [EOL] }
public void testJsonWithNonExectuableTokenSerialization() { [EOL]     Gson gson = gsonBuilder.generateNonExecutableJson().create(); [EOL]     String json = gson.toJson(JSON_NON_EXECUTABLE_PREFIX); [EOL]     assertTrue(json.contains(")]}'\n")); [EOL] }
public void testLongAsStringSerialization() throws Exception { [EOL]     gson = new GsonBuilder().setLongSerializationPolicy(LongSerializationPolicy.STRING).create(); [EOL]     String result = gson.toJson(15L); [EOL]     assertEquals("\"15\"", result); [EOL]     result = gson.toJson(2); [EOL]     assertEquals("2", result); [EOL] }
public void testLongAsStringSerialization() throws Exception { [EOL]     gson = new GsonBuilder().setLongSerializationPolicy(LongSerializationPolicy.STRING).create(); [EOL]     String result = gson.toJson(15L); [EOL]     assertEquals("\"15\"", result); [EOL]     result = gson.toJson(2); [EOL]     assertEquals("2", result); [EOL] }
public void testGsonWithNonDefaultFieldNamingPolicySerialization() { [EOL]     Gson gson = builder.setFieldNamingPolicy(FieldNamingPolicy.UPPER_CAMEL_CASE).create(); [EOL]     StringWrapper target = new StringWrapper("blah"); [EOL]     assertEquals("{\"SomeConstantStringInstanceField\":\"" + target.someConstantStringInstanceField + "\"}", gson.toJson(target)); [EOL] }
public void testGsonWithNonDefaultFieldNamingPolicySerialization() { [EOL]     Gson gson = builder.setFieldNamingPolicy(FieldNamingPolicy.UPPER_CAMEL_CASE).create(); [EOL]     StringWrapper target = new StringWrapper("blah"); [EOL]     assertEquals("{\"SomeConstantStringInstanceField\":\"" + target.someConstantStringInstanceField + "\"}", gson.toJson(target)); [EOL] }
public void testGsonWithNonDefaultFieldNamingPolicySerialization() { [EOL]     Gson gson = builder.setFieldNamingPolicy(FieldNamingPolicy.UPPER_CAMEL_CASE).create(); [EOL]     StringWrapper target = new StringWrapper("blah"); [EOL]     assertEquals("{\"SomeConstantStringInstanceField\":\"" + target.someConstantStringInstanceField + "\"}", gson.toJson(target)); [EOL] }
public void testGsonWithNonDefaultFieldNamingPolicySerialization() { [EOL]     Gson gson = builder.setFieldNamingPolicy(FieldNamingPolicy.UPPER_CAMEL_CASE).create(); [EOL]     StringWrapper target = new StringWrapper("blah"); [EOL]     assertEquals("{\"SomeConstantStringInstanceField\":\"" + target.someConstantStringInstanceField + "\"}", gson.toJson(target)); [EOL] }
public void testGsonWithNonDefaultFieldNamingPolicySerialization() { [EOL]     Gson gson = builder.setFieldNamingPolicy(FieldNamingPolicy.UPPER_CAMEL_CASE).create(); [EOL]     StringWrapper target = new StringWrapper("blah"); [EOL]     assertEquals("{\"SomeConstantStringInstanceField\":\"" + target.someConstantStringInstanceField + "\"}", gson.toJson(target)); [EOL] }
public void testDeprecatedNamingStrategy() throws Exception { [EOL]     Gson gson = builder.setFieldNamingStrategy(new UpperCaseNamingStrategy()).create(); [EOL]     ClassWithDuplicateFields target = new ClassWithDuplicateFields(10); [EOL]     String actual = gson.toJson(target); [EOL]     assertEquals("{\"A\":10}", actual); [EOL] }
public void testDeprecatedNamingStrategy() throws Exception { [EOL]     Gson gson = builder.setFieldNamingStrategy(new UpperCaseNamingStrategy()).create(); [EOL]     ClassWithDuplicateFields target = new ClassWithDuplicateFields(10); [EOL]     String actual = gson.toJson(target); [EOL]     assertEquals("{\"A\":10}", actual); [EOL] }
public void testGsonWithNonDefaultFieldNamingPolicySerialization() { [EOL]     Gson gson = builder.setFieldNamingPolicy(FieldNamingPolicy.UPPER_CAMEL_CASE).create(); [EOL]     StringWrapper target = new StringWrapper("blah"); [EOL]     assertEquals("{\"SomeConstantStringInstanceField\":\"" + target.someConstantStringInstanceField + "\"}", gson.toJson(target)); [EOL] }
public void testGsonWithNonDefaultFieldNamingPolicySerialization() { [EOL]     Gson gson = builder.setFieldNamingPolicy(FieldNamingPolicy.UPPER_CAMEL_CASE).create(); [EOL]     StringWrapper target = new StringWrapper("blah"); [EOL]     assertEquals("{\"SomeConstantStringInstanceField\":\"" + target.someConstantStringInstanceField + "\"}", gson.toJson(target)); [EOL] }
public void testClassAndFieldAreAheadInVersion() throws Exception { [EOL]     Class<MockObject> clazz = MockObject.class; [EOL]     Field f = clazz.getField("someField"); [EOL]     VersionExclusionStrategy strategy = new VersionExclusionStrategy(VERSION - 1); [EOL]     assertTrue(strategy.shouldSkipClass(clazz)); [EOL]     assertTrue(strategy.shouldSkipField(new FieldAttributes(clazz, f))); [EOL] }
public void testClassAndFieldAreAheadInVersion() throws Exception { [EOL]     Class<MockObject> clazz = MockObject.class; [EOL]     Field f = clazz.getField("someField"); [EOL]     VersionExclusionStrategy strategy = new VersionExclusionStrategy(VERSION - 1); [EOL]     assertTrue(strategy.shouldSkipClass(clazz)); [EOL]     assertTrue(strategy.shouldSkipField(new FieldAttributes(clazz, f))); [EOL] }
public void testClassAndFieldAreAheadInVersion() throws Exception { [EOL]     Class<MockObject> clazz = MockObject.class; [EOL]     Field f = clazz.getField("someField"); [EOL]     VersionExclusionStrategy strategy = new VersionExclusionStrategy(VERSION - 1); [EOL]     assertTrue(strategy.shouldSkipClass(clazz)); [EOL]     assertTrue(strategy.shouldSkipField(new FieldAttributes(clazz, f))); [EOL] }
public void testClassAndFieldAreAheadInVersion() throws Exception { [EOL]     Class<MockObject> clazz = MockObject.class; [EOL]     Field f = clazz.getField("someField"); [EOL]     VersionExclusionStrategy strategy = new VersionExclusionStrategy(VERSION - 1); [EOL]     assertTrue(strategy.shouldSkipClass(clazz)); [EOL]     assertTrue(strategy.shouldSkipField(new FieldAttributes(clazz, f))); [EOL] }
public void testModifiers() throws Exception { [EOL]     assertFalse(fieldAttributes.hasModifier(Modifier.STATIC)); [EOL]     assertFalse(fieldAttributes.hasModifier(Modifier.FINAL)); [EOL]     assertFalse(fieldAttributes.hasModifier(Modifier.ABSTRACT)); [EOL]     assertFalse(fieldAttributes.hasModifier(Modifier.VOLATILE)); [EOL]     assertFalse(fieldAttributes.hasModifier(Modifier.PROTECTED)); [EOL]     assertTrue(fieldAttributes.hasModifier(Modifier.PUBLIC)); [EOL]     assertTrue(fieldAttributes.hasModifier(Modifier.TRANSIENT)); [EOL] }
public void testModifiers() throws Exception { [EOL]     assertFalse(fieldAttributes.hasModifier(Modifier.STATIC)); [EOL]     assertFalse(fieldAttributes.hasModifier(Modifier.FINAL)); [EOL]     assertFalse(fieldAttributes.hasModifier(Modifier.ABSTRACT)); [EOL]     assertFalse(fieldAttributes.hasModifier(Modifier.VOLATILE)); [EOL]     assertFalse(fieldAttributes.hasModifier(Modifier.PROTECTED)); [EOL]     assertTrue(fieldAttributes.hasModifier(Modifier.PUBLIC)); [EOL]     assertTrue(fieldAttributes.hasModifier(Modifier.TRANSIENT)); [EOL] }
public void testModifiers() throws Exception { [EOL]     assertFalse(fieldAttributes.hasModifier(Modifier.STATIC)); [EOL]     assertFalse(fieldAttributes.hasModifier(Modifier.FINAL)); [EOL]     assertFalse(fieldAttributes.hasModifier(Modifier.ABSTRACT)); [EOL]     assertFalse(fieldAttributes.hasModifier(Modifier.VOLATILE)); [EOL]     assertFalse(fieldAttributes.hasModifier(Modifier.PROTECTED)); [EOL]     assertTrue(fieldAttributes.hasModifier(Modifier.PUBLIC)); [EOL]     assertTrue(fieldAttributes.hasModifier(Modifier.TRANSIENT)); [EOL] }
public void testModifiers() throws Exception { [EOL]     assertFalse(fieldAttributes.hasModifier(Modifier.STATIC)); [EOL]     assertFalse(fieldAttributes.hasModifier(Modifier.FINAL)); [EOL]     assertFalse(fieldAttributes.hasModifier(Modifier.ABSTRACT)); [EOL]     assertFalse(fieldAttributes.hasModifier(Modifier.VOLATILE)); [EOL]     assertFalse(fieldAttributes.hasModifier(Modifier.PROTECTED)); [EOL]     assertTrue(fieldAttributes.hasModifier(Modifier.PUBLIC)); [EOL]     assertTrue(fieldAttributes.hasModifier(Modifier.TRANSIENT)); [EOL] }
public void testExponential() throws Exception { [EOL]     JsonPrimitive json = new JsonPrimitive("1E+7"); [EOL]     assertEquals(new BigDecimal("1E+7"), json.getAsBigDecimal()); [EOL]     assertEquals(new Double("1E+7"), json.getAsDouble(), 0.00001); [EOL]     assertEquals(new Float("1E+7"), json.getAsDouble(), 0.00001); [EOL]     try { [EOL]         json.getAsInt(); [EOL]         fail("Integers can not handle exponents like this."); [EOL]     } catch (NumberFormatException expected) { [EOL]     } [EOL] }
public void testExponential() throws Exception { [EOL]     JsonPrimitive json = new JsonPrimitive("1E+7"); [EOL]     assertEquals(new BigDecimal("1E+7"), json.getAsBigDecimal()); [EOL]     assertEquals(new Double("1E+7"), json.getAsDouble(), 0.00001); [EOL]     assertEquals(new Float("1E+7"), json.getAsDouble(), 0.00001); [EOL]     try { [EOL]         json.getAsInt(); [EOL]         fail("Integers can not handle exponents like this."); [EOL]     } catch (NumberFormatException expected) { [EOL]     } [EOL] }
public void testExponential() throws Exception { [EOL]     JsonPrimitive json = new JsonPrimitive("1E+7"); [EOL]     assertEquals(new BigDecimal("1E+7"), json.getAsBigDecimal()); [EOL]     assertEquals(new Double("1E+7"), json.getAsDouble(), 0.00001); [EOL]     assertEquals(new Float("1E+7"), json.getAsDouble(), 0.00001); [EOL]     try { [EOL]         json.getAsInt(); [EOL]         fail("Integers can not handle exponents like this."); [EOL]     } catch (NumberFormatException expected) { [EOL]     } [EOL] }
public void testExponential() throws Exception { [EOL]     JsonPrimitive json = new JsonPrimitive("1E+7"); [EOL]     assertEquals(new BigDecimal("1E+7"), json.getAsBigDecimal()); [EOL]     assertEquals(new Double("1E+7"), json.getAsDouble(), 0.00001); [EOL]     assertEquals(new Float("1E+7"), json.getAsDouble(), 0.00001); [EOL]     try { [EOL]         json.getAsInt(); [EOL]         fail("Integers can not handle exponents like this."); [EOL]     } catch (NumberFormatException expected) { [EOL]     } [EOL] }
public void testExponential() throws Exception { [EOL]     JsonPrimitive json = new JsonPrimitive("1E+7"); [EOL]     assertEquals(new BigDecimal("1E+7"), json.getAsBigDecimal()); [EOL]     assertEquals(new Double("1E+7"), json.getAsDouble(), 0.00001); [EOL]     assertEquals(new Float("1E+7"), json.getAsDouble(), 0.00001); [EOL]     try { [EOL]         json.getAsInt(); [EOL]         fail("Integers can not handle exponents like this."); [EOL]     } catch (NumberFormatException expected) { [EOL]     } [EOL] }
public void testExponential() throws Exception { [EOL]     JsonPrimitive json = new JsonPrimitive("1E+7"); [EOL]     assertEquals(new BigDecimal("1E+7"), json.getAsBigDecimal()); [EOL]     assertEquals(new Double("1E+7"), json.getAsDouble(), 0.00001); [EOL]     assertEquals(new Float("1E+7"), json.getAsDouble(), 0.00001); [EOL]     try { [EOL]         json.getAsInt(); [EOL]         fail("Integers can not handle exponents like this."); [EOL]     } catch (NumberFormatException expected) { [EOL]     } [EOL] }
public void testExponential() throws Exception { [EOL]     JsonPrimitive json = new JsonPrimitive("1E+7"); [EOL]     assertEquals(new BigDecimal("1E+7"), json.getAsBigDecimal()); [EOL]     assertEquals(new Double("1E+7"), json.getAsDouble(), 0.00001); [EOL]     assertEquals(new Float("1E+7"), json.getAsDouble(), 0.00001); [EOL]     try { [EOL]         json.getAsInt(); [EOL]         fail("Integers can not handle exponents like this."); [EOL]     } catch (NumberFormatException expected) { [EOL]     } [EOL] }
public void testExponential() throws Exception { [EOL]     JsonPrimitive json = new JsonPrimitive("1E+7"); [EOL]     assertEquals(new BigDecimal("1E+7"), json.getAsBigDecimal()); [EOL]     assertEquals(new Double("1E+7"), json.getAsDouble(), 0.00001); [EOL]     assertEquals(new Float("1E+7"), json.getAsDouble(), 0.00001); [EOL]     try { [EOL]         json.getAsInt(); [EOL]         fail("Integers can not handle exponents like this."); [EOL]     } catch (NumberFormatException expected) { [EOL]     } [EOL] }
public void testExponential() throws Exception { [EOL]     JsonPrimitive json = new JsonPrimitive("1E+7"); [EOL]     assertEquals(new BigDecimal("1E+7"), json.getAsBigDecimal()); [EOL]     assertEquals(new Double("1E+7"), json.getAsDouble(), 0.00001); [EOL]     assertEquals(new Float("1E+7"), json.getAsDouble(), 0.00001); [EOL]     try { [EOL]         json.getAsInt(); [EOL]         fail("Integers can not handle exponents like this."); [EOL]     } catch (NumberFormatException expected) { [EOL]     } [EOL] }
public void testExponential() throws Exception { [EOL]     JsonPrimitive json = new JsonPrimitive("1E+7"); [EOL]     assertEquals(new BigDecimal("1E+7"), json.getAsBigDecimal()); [EOL]     assertEquals(new Double("1E+7"), json.getAsDouble(), 0.00001); [EOL]     assertEquals(new Float("1E+7"), json.getAsDouble(), 0.00001); [EOL]     try { [EOL]         json.getAsInt(); [EOL]         fail("Integers can not handle exponents like this."); [EOL]     } catch (NumberFormatException expected) { [EOL]     } [EOL] }
public void testExponential() throws Exception { [EOL]     JsonPrimitive json = new JsonPrimitive("1E+7"); [EOL]     assertEquals(new BigDecimal("1E+7"), json.getAsBigDecimal()); [EOL]     assertEquals(new Double("1E+7"), json.getAsDouble(), 0.00001); [EOL]     assertEquals(new Float("1E+7"), json.getAsDouble(), 0.00001); [EOL]     try { [EOL]         json.getAsInt(); [EOL]         fail("Integers can not handle exponents like this."); [EOL]     } catch (NumberFormatException expected) { [EOL]     } [EOL] }
public void testExponential() throws Exception { [EOL]     JsonPrimitive json = new JsonPrimitive("1E+7"); [EOL]     assertEquals(new BigDecimal("1E+7"), json.getAsBigDecimal()); [EOL]     assertEquals(new Double("1E+7"), json.getAsDouble(), 0.00001); [EOL]     assertEquals(new Float("1E+7"), json.getAsDouble(), 0.00001); [EOL]     try { [EOL]         json.getAsInt(); [EOL]         fail("Integers can not handle exponents like this."); [EOL]     } catch (NumberFormatException expected) { [EOL]     } [EOL] }
public void testReallyLongValuesDeserialization() { [EOL]     String json = "333961828784581"; [EOL]     long value = gson.fromJson(json, Long.class); [EOL]     assertEquals(333961828784581L, value); [EOL] }
public void testReallyLongValuesDeserialization() { [EOL]     String json = "333961828784581"; [EOL]     long value = gson.fromJson(json, Long.class); [EOL]     assertEquals(333961828784581L, value); [EOL] }
public void testReallyLongValuesDeserialization() { [EOL]     String json = "333961828784581"; [EOL]     long value = gson.fromJson(json, Long.class); [EOL]     assertEquals(333961828784581L, value); [EOL] }
public void testReallyLongValuesDeserialization() { [EOL]     String json = "333961828784581"; [EOL]     long value = gson.fromJson(json, Long.class); [EOL]     assertEquals(333961828784581L, value); [EOL] }
public void testExponential() throws Exception { [EOL]     JsonPrimitive json = new JsonPrimitive("1E+7"); [EOL]     assertEquals(new BigDecimal("1E+7"), json.getAsBigDecimal()); [EOL]     assertEquals(new Double("1E+7"), json.getAsDouble(), 0.00001); [EOL]     assertEquals(new Float("1E+7"), json.getAsDouble(), 0.00001); [EOL]     try { [EOL]         json.getAsInt(); [EOL]         fail("Integers can not handle exponents like this."); [EOL]     } catch (NumberFormatException expected) { [EOL]     } [EOL] }
public void testExponential() throws Exception { [EOL]     JsonPrimitive json = new JsonPrimitive("1E+7"); [EOL]     assertEquals(new BigDecimal("1E+7"), json.getAsBigDecimal()); [EOL]     assertEquals(new Double("1E+7"), json.getAsDouble(), 0.00001); [EOL]     assertEquals(new Float("1E+7"), json.getAsDouble(), 0.00001); [EOL]     try { [EOL]         json.getAsInt(); [EOL]         fail("Integers can not handle exponents like this."); [EOL]     } catch (NumberFormatException expected) { [EOL]     } [EOL] }
public void testExponential() throws Exception { [EOL]     JsonPrimitive json = new JsonPrimitive("1E+7"); [EOL]     assertEquals(new BigDecimal("1E+7"), json.getAsBigDecimal()); [EOL]     assertEquals(new Double("1E+7"), json.getAsDouble(), 0.00001); [EOL]     assertEquals(new Float("1E+7"), json.getAsDouble(), 0.00001); [EOL]     try { [EOL]         json.getAsInt(); [EOL]         fail("Integers can not handle exponents like this."); [EOL]     } catch (NumberFormatException expected) { [EOL]     } [EOL] }
public void testExponential() throws Exception { [EOL]     JsonPrimitive json = new JsonPrimitive("1E+7"); [EOL]     assertEquals(new BigDecimal("1E+7"), json.getAsBigDecimal()); [EOL]     assertEquals(new Double("1E+7"), json.getAsDouble(), 0.00001); [EOL]     assertEquals(new Float("1E+7"), json.getAsDouble(), 0.00001); [EOL]     try { [EOL]         json.getAsInt(); [EOL]         fail("Integers can not handle exponents like this."); [EOL]     } catch (NumberFormatException expected) { [EOL]     } [EOL] }
public void testExponential() throws Exception { [EOL]     JsonPrimitive json = new JsonPrimitive("1E+7"); [EOL]     assertEquals(new BigDecimal("1E+7"), json.getAsBigDecimal()); [EOL]     assertEquals(new Double("1E+7"), json.getAsDouble(), 0.00001); [EOL]     assertEquals(new Float("1E+7"), json.getAsDouble(), 0.00001); [EOL]     try { [EOL]         json.getAsInt(); [EOL]         fail("Integers can not handle exponents like this."); [EOL]     } catch (NumberFormatException expected) { [EOL]     } [EOL] }
public void testExponential() throws Exception { [EOL]     JsonPrimitive json = new JsonPrimitive("1E+7"); [EOL]     assertEquals(new BigDecimal("1E+7"), json.getAsBigDecimal()); [EOL]     assertEquals(new Double("1E+7"), json.getAsDouble(), 0.00001); [EOL]     assertEquals(new Float("1E+7"), json.getAsDouble(), 0.00001); [EOL]     try { [EOL]         json.getAsInt(); [EOL]         fail("Integers can not handle exponents like this."); [EOL]     } catch (NumberFormatException expected) { [EOL]     } [EOL] }
public void testExponential() throws Exception { [EOL]     JsonPrimitive json = new JsonPrimitive("1E+7"); [EOL]     assertEquals(new BigDecimal("1E+7"), json.getAsBigDecimal()); [EOL]     assertEquals(new Double("1E+7"), json.getAsDouble(), 0.00001); [EOL]     assertEquals(new Float("1E+7"), json.getAsDouble(), 0.00001); [EOL]     try { [EOL]         json.getAsInt(); [EOL]         fail("Integers can not handle exponents like this."); [EOL]     } catch (NumberFormatException expected) { [EOL]     } [EOL] }
public void testExponential() throws Exception { [EOL]     JsonPrimitive json = new JsonPrimitive("1E+7"); [EOL]     assertEquals(new BigDecimal("1E+7"), json.getAsBigDecimal()); [EOL]     assertEquals(new Double("1E+7"), json.getAsDouble(), 0.00001); [EOL]     assertEquals(new Float("1E+7"), json.getAsDouble(), 0.00001); [EOL]     try { [EOL]         json.getAsInt(); [EOL]         fail("Integers can not handle exponents like this."); [EOL]     } catch (NumberFormatException expected) { [EOL]     } [EOL] }
public void testExponential() throws Exception { [EOL]     JsonPrimitive json = new JsonPrimitive("1E+7"); [EOL]     assertEquals(new BigDecimal("1E+7"), json.getAsBigDecimal()); [EOL]     assertEquals(new Double("1E+7"), json.getAsDouble(), 0.00001); [EOL]     assertEquals(new Float("1E+7"), json.getAsDouble(), 0.00001); [EOL]     try { [EOL]         json.getAsInt(); [EOL]         fail("Integers can not handle exponents like this."); [EOL]     } catch (NumberFormatException expected) { [EOL]     } [EOL] }
public void testExponential() throws Exception { [EOL]     JsonPrimitive json = new JsonPrimitive("1E+7"); [EOL]     assertEquals(new BigDecimal("1E+7"), json.getAsBigDecimal()); [EOL]     assertEquals(new Double("1E+7"), json.getAsDouble(), 0.00001); [EOL]     assertEquals(new Float("1E+7"), json.getAsDouble(), 0.00001); [EOL]     try { [EOL]         json.getAsInt(); [EOL]         fail("Integers can not handle exponents like this."); [EOL]     } catch (NumberFormatException expected) { [EOL]     } [EOL] }
public void testExponential() throws Exception { [EOL]     JsonPrimitive json = new JsonPrimitive("1E+7"); [EOL]     assertEquals(new BigDecimal("1E+7"), json.getAsBigDecimal()); [EOL]     assertEquals(new Double("1E+7"), json.getAsDouble(), 0.00001); [EOL]     assertEquals(new Float("1E+7"), json.getAsDouble(), 0.00001); [EOL]     try { [EOL]         json.getAsInt(); [EOL]         fail("Integers can not handle exponents like this."); [EOL]     } catch (NumberFormatException expected) { [EOL]     } [EOL] }
public void testExponential() throws Exception { [EOL]     JsonPrimitive json = new JsonPrimitive("1E+7"); [EOL]     assertEquals(new BigDecimal("1E+7"), json.getAsBigDecimal()); [EOL]     assertEquals(new Double("1E+7"), json.getAsDouble(), 0.00001); [EOL]     assertEquals(new Float("1E+7"), json.getAsDouble(), 0.00001); [EOL]     try { [EOL]         json.getAsInt(); [EOL]         fail("Integers can not handle exponents like this."); [EOL]     } catch (NumberFormatException expected) { [EOL]     } [EOL] }
public void testExponential() throws Exception { [EOL]     JsonPrimitive json = new JsonPrimitive("1E+7"); [EOL]     assertEquals(new BigDecimal("1E+7"), json.getAsBigDecimal()); [EOL]     assertEquals(new Double("1E+7"), json.getAsDouble(), 0.00001); [EOL]     assertEquals(new Float("1E+7"), json.getAsDouble(), 0.00001); [EOL]     try { [EOL]         json.getAsInt(); [EOL]         fail("Integers can not handle exponents like this."); [EOL]     } catch (NumberFormatException expected) { [EOL]     } [EOL] }
public void testExponential() throws Exception { [EOL]     JsonPrimitive json = new JsonPrimitive("1E+7"); [EOL]     assertEquals(new BigDecimal("1E+7"), json.getAsBigDecimal()); [EOL]     assertEquals(new Double("1E+7"), json.getAsDouble(), 0.00001); [EOL]     assertEquals(new Float("1E+7"), json.getAsDouble(), 0.00001); [EOL]     try { [EOL]         json.getAsInt(); [EOL]         fail("Integers can not handle exponents like this."); [EOL]     } catch (NumberFormatException expected) { [EOL]     } [EOL] }
public void testExponential() throws Exception { [EOL]     JsonPrimitive json = new JsonPrimitive("1E+7"); [EOL]     assertEquals(new BigDecimal("1E+7"), json.getAsBigDecimal()); [EOL]     assertEquals(new Double("1E+7"), json.getAsDouble(), 0.00001); [EOL]     assertEquals(new Float("1E+7"), json.getAsDouble(), 0.00001); [EOL]     try { [EOL]         json.getAsInt(); [EOL]         fail("Integers can not handle exponents like this."); [EOL]     } catch (NumberFormatException expected) { [EOL]     } [EOL] }
public void testExponential() throws Exception { [EOL]     JsonPrimitive json = new JsonPrimitive("1E+7"); [EOL]     assertEquals(new BigDecimal("1E+7"), json.getAsBigDecimal()); [EOL]     assertEquals(new Double("1E+7"), json.getAsDouble(), 0.00001); [EOL]     assertEquals(new Float("1E+7"), json.getAsDouble(), 0.00001); [EOL]     try { [EOL]         json.getAsInt(); [EOL]         fail("Integers can not handle exponents like this."); [EOL]     } catch (NumberFormatException expected) { [EOL]     } [EOL] }
public void testExponential() throws Exception { [EOL]     JsonPrimitive json = new JsonPrimitive("1E+7"); [EOL]     assertEquals(new BigDecimal("1E+7"), json.getAsBigDecimal()); [EOL]     assertEquals(new Double("1E+7"), json.getAsDouble(), 0.00001); [EOL]     assertEquals(new Float("1E+7"), json.getAsDouble(), 0.00001); [EOL]     try { [EOL]         json.getAsInt(); [EOL]         fail("Integers can not handle exponents like this."); [EOL]     } catch (NumberFormatException expected) { [EOL]     } [EOL] }
public void testEnumSubclass() { [EOL]     assertFalse(Roshambo.class == Roshambo.ROCK.getClass()); [EOL]     assertEquals("\"ROCK\"", gson.toJson(Roshambo.ROCK)); [EOL]     assertEquals("[\"ROCK\",\"PAPER\",\"SCISSORS\"]", gson.toJson(EnumSet.allOf(Roshambo.class))); [EOL]     assertEquals(Roshambo.ROCK, gson.fromJson("\"ROCK\"", Roshambo.class)); [EOL]     assertEquals(EnumSet.allOf(Roshambo.class), gson.fromJson("[\"ROCK\",\"PAPER\",\"SCISSORS\"]", new TypeToken<Set<Roshambo>>() { [EOL]     }.getType())); [EOL] }
public void testEnumSubclass() { [EOL]     assertFalse(Roshambo.class == Roshambo.ROCK.getClass()); [EOL]     assertEquals("\"ROCK\"", gson.toJson(Roshambo.ROCK)); [EOL]     assertEquals("[\"ROCK\",\"PAPER\",\"SCISSORS\"]", gson.toJson(EnumSet.allOf(Roshambo.class))); [EOL]     assertEquals(Roshambo.ROCK, gson.fromJson("\"ROCK\"", Roshambo.class)); [EOL]     assertEquals(EnumSet.allOf(Roshambo.class), gson.fromJson("[\"ROCK\",\"PAPER\",\"SCISSORS\"]", new TypeToken<Set<Roshambo>>() { [EOL]     }.getType())); [EOL] }
public void testEnumSubclass() { [EOL]     assertFalse(Roshambo.class == Roshambo.ROCK.getClass()); [EOL]     assertEquals("\"ROCK\"", gson.toJson(Roshambo.ROCK)); [EOL]     assertEquals("[\"ROCK\",\"PAPER\",\"SCISSORS\"]", gson.toJson(EnumSet.allOf(Roshambo.class))); [EOL]     assertEquals(Roshambo.ROCK, gson.fromJson("\"ROCK\"", Roshambo.class)); [EOL]     assertEquals(EnumSet.allOf(Roshambo.class), gson.fromJson("[\"ROCK\",\"PAPER\",\"SCISSORS\"]", new TypeToken<Set<Roshambo>>() { [EOL]     }.getType())); [EOL] }
public void testEnumSubclass() { [EOL]     assertFalse(Roshambo.class == Roshambo.ROCK.getClass()); [EOL]     assertEquals("\"ROCK\"", gson.toJson(Roshambo.ROCK)); [EOL]     assertEquals("[\"ROCK\",\"PAPER\",\"SCISSORS\"]", gson.toJson(EnumSet.allOf(Roshambo.class))); [EOL]     assertEquals(Roshambo.ROCK, gson.fromJson("\"ROCK\"", Roshambo.class)); [EOL]     assertEquals(EnumSet.allOf(Roshambo.class), gson.fromJson("[\"ROCK\",\"PAPER\",\"SCISSORS\"]", new TypeToken<Set<Roshambo>>() { [EOL]     }.getType())); [EOL] }
public void testEnumSubclass() { [EOL]     assertFalse(Roshambo.class == Roshambo.ROCK.getClass()); [EOL]     assertEquals("\"ROCK\"", gson.toJson(Roshambo.ROCK)); [EOL]     assertEquals("[\"ROCK\",\"PAPER\",\"SCISSORS\"]", gson.toJson(EnumSet.allOf(Roshambo.class))); [EOL]     assertEquals(Roshambo.ROCK, gson.fromJson("\"ROCK\"", Roshambo.class)); [EOL]     assertEquals(EnumSet.allOf(Roshambo.class), gson.fromJson("[\"ROCK\",\"PAPER\",\"SCISSORS\"]", new TypeToken<Set<Roshambo>>() { [EOL]     }.getType())); [EOL] }
public void testEnumSubclass() { [EOL]     assertFalse(Roshambo.class == Roshambo.ROCK.getClass()); [EOL]     assertEquals("\"ROCK\"", gson.toJson(Roshambo.ROCK)); [EOL]     assertEquals("[\"ROCK\",\"PAPER\",\"SCISSORS\"]", gson.toJson(EnumSet.allOf(Roshambo.class))); [EOL]     assertEquals(Roshambo.ROCK, gson.fromJson("\"ROCK\"", Roshambo.class)); [EOL]     assertEquals(EnumSet.allOf(Roshambo.class), gson.fromJson("[\"ROCK\",\"PAPER\",\"SCISSORS\"]", new TypeToken<Set<Roshambo>>() { [EOL]     }.getType())); [EOL] }
public void testExponential() throws Exception { [EOL]     JsonPrimitive json = new JsonPrimitive("1E+7"); [EOL]     assertEquals(new BigDecimal("1E+7"), json.getAsBigDecimal()); [EOL]     assertEquals(new Double("1E+7"), json.getAsDouble(), 0.00001); [EOL]     assertEquals(new Float("1E+7"), json.getAsDouble(), 0.00001); [EOL]     try { [EOL]         json.getAsInt(); [EOL]         fail("Integers can not handle exponents like this."); [EOL]     } catch (NumberFormatException expected) { [EOL]     } [EOL] }
public void testDefaultLongSerialization() throws Exception { [EOL]     JsonElement element = LongSerializationPolicy.DEFAULT.serialize(1556L); [EOL]     assertTrue(element.isJsonPrimitive()); [EOL]     JsonPrimitive jsonPrimitive = element.getAsJsonPrimitive(); [EOL]     assertFalse(jsonPrimitive.isString()); [EOL]     assertTrue(jsonPrimitive.isNumber()); [EOL]     assertEquals(1556L, element.getAsLong()); [EOL] }
public void testDefaultLongSerialization() throws Exception { [EOL]     JsonElement element = LongSerializationPolicy.DEFAULT.serialize(1556L); [EOL]     assertTrue(element.isJsonPrimitive()); [EOL]     JsonPrimitive jsonPrimitive = element.getAsJsonPrimitive(); [EOL]     assertFalse(jsonPrimitive.isString()); [EOL]     assertTrue(jsonPrimitive.isNumber()); [EOL]     assertEquals(1556L, element.getAsLong()); [EOL] }
public void testDefaultLongSerialization() throws Exception { [EOL]     JsonElement element = LongSerializationPolicy.DEFAULT.serialize(1556L); [EOL]     assertTrue(element.isJsonPrimitive()); [EOL]     JsonPrimitive jsonPrimitive = element.getAsJsonPrimitive(); [EOL]     assertFalse(jsonPrimitive.isString()); [EOL]     assertTrue(jsonPrimitive.isNumber()); [EOL]     assertEquals(1556L, element.getAsLong()); [EOL] }
public void testEnumSubclass() { [EOL]     assertFalse(Roshambo.class == Roshambo.ROCK.getClass()); [EOL]     assertEquals("\"ROCK\"", gson.toJson(Roshambo.ROCK)); [EOL]     assertEquals("[\"ROCK\",\"PAPER\",\"SCISSORS\"]", gson.toJson(EnumSet.allOf(Roshambo.class))); [EOL]     assertEquals(Roshambo.ROCK, gson.fromJson("\"ROCK\"", Roshambo.class)); [EOL]     assertEquals(EnumSet.allOf(Roshambo.class), gson.fromJson("[\"ROCK\",\"PAPER\",\"SCISSORS\"]", new TypeToken<Set<Roshambo>>() { [EOL]     }.getType())); [EOL] }
public void testEnumSubclass() { [EOL]     assertFalse(Roshambo.class == Roshambo.ROCK.getClass()); [EOL]     assertEquals("\"ROCK\"", gson.toJson(Roshambo.ROCK)); [EOL]     assertEquals("[\"ROCK\",\"PAPER\",\"SCISSORS\"]", gson.toJson(EnumSet.allOf(Roshambo.class))); [EOL]     assertEquals(Roshambo.ROCK, gson.fromJson("\"ROCK\"", Roshambo.class)); [EOL]     assertEquals(EnumSet.allOf(Roshambo.class), gson.fromJson("[\"ROCK\",\"PAPER\",\"SCISSORS\"]", new TypeToken<Set<Roshambo>>() { [EOL]     }.getType())); [EOL] }
public void testEnumSubclass() { [EOL]     assertFalse(Roshambo.class == Roshambo.ROCK.getClass()); [EOL]     assertEquals("\"ROCK\"", gson.toJson(Roshambo.ROCK)); [EOL]     assertEquals("[\"ROCK\",\"PAPER\",\"SCISSORS\"]", gson.toJson(EnumSet.allOf(Roshambo.class))); [EOL]     assertEquals(Roshambo.ROCK, gson.fromJson("\"ROCK\"", Roshambo.class)); [EOL]     assertEquals(EnumSet.allOf(Roshambo.class), gson.fromJson("[\"ROCK\",\"PAPER\",\"SCISSORS\"]", new TypeToken<Set<Roshambo>>() { [EOL]     }.getType())); [EOL] }
public void testEnumSubclass() { [EOL]     assertFalse(Roshambo.class == Roshambo.ROCK.getClass()); [EOL]     assertEquals("\"ROCK\"", gson.toJson(Roshambo.ROCK)); [EOL]     assertEquals("[\"ROCK\",\"PAPER\",\"SCISSORS\"]", gson.toJson(EnumSet.allOf(Roshambo.class))); [EOL]     assertEquals(Roshambo.ROCK, gson.fromJson("\"ROCK\"", Roshambo.class)); [EOL]     assertEquals(EnumSet.allOf(Roshambo.class), gson.fromJson("[\"ROCK\",\"PAPER\",\"SCISSORS\"]", new TypeToken<Set<Roshambo>>() { [EOL]     }.getType())); [EOL] }
public void testEnumSubclass() { [EOL]     assertFalse(Roshambo.class == Roshambo.ROCK.getClass()); [EOL]     assertEquals("\"ROCK\"", gson.toJson(Roshambo.ROCK)); [EOL]     assertEquals("[\"ROCK\",\"PAPER\",\"SCISSORS\"]", gson.toJson(EnumSet.allOf(Roshambo.class))); [EOL]     assertEquals(Roshambo.ROCK, gson.fromJson("\"ROCK\"", Roshambo.class)); [EOL]     assertEquals(EnumSet.allOf(Roshambo.class), gson.fromJson("[\"ROCK\",\"PAPER\",\"SCISSORS\"]", new TypeToken<Set<Roshambo>>() { [EOL]     }.getType())); [EOL] }
public void testEnumSubclass() { [EOL]     assertFalse(Roshambo.class == Roshambo.ROCK.getClass()); [EOL]     assertEquals("\"ROCK\"", gson.toJson(Roshambo.ROCK)); [EOL]     assertEquals("[\"ROCK\",\"PAPER\",\"SCISSORS\"]", gson.toJson(EnumSet.allOf(Roshambo.class))); [EOL]     assertEquals(Roshambo.ROCK, gson.fromJson("\"ROCK\"", Roshambo.class)); [EOL]     assertEquals(EnumSet.allOf(Roshambo.class), gson.fromJson("[\"ROCK\",\"PAPER\",\"SCISSORS\"]", new TypeToken<Set<Roshambo>>() { [EOL]     }.getType())); [EOL] }
public void testEnumSubclass() { [EOL]     assertFalse(Roshambo.class == Roshambo.ROCK.getClass()); [EOL]     assertEquals("\"ROCK\"", gson.toJson(Roshambo.ROCK)); [EOL]     assertEquals("[\"ROCK\",\"PAPER\",\"SCISSORS\"]", gson.toJson(EnumSet.allOf(Roshambo.class))); [EOL]     assertEquals(Roshambo.ROCK, gson.fromJson("\"ROCK\"", Roshambo.class)); [EOL]     assertEquals(EnumSet.allOf(Roshambo.class), gson.fromJson("[\"ROCK\",\"PAPER\",\"SCISSORS\"]", new TypeToken<Set<Roshambo>>() { [EOL]     }.getType())); [EOL] }
public void testEnumSubclass() { [EOL]     assertFalse(Roshambo.class == Roshambo.ROCK.getClass()); [EOL]     assertEquals("\"ROCK\"", gson.toJson(Roshambo.ROCK)); [EOL]     assertEquals("[\"ROCK\",\"PAPER\",\"SCISSORS\"]", gson.toJson(EnumSet.allOf(Roshambo.class))); [EOL]     assertEquals(Roshambo.ROCK, gson.fromJson("\"ROCK\"", Roshambo.class)); [EOL]     assertEquals(EnumSet.allOf(Roshambo.class), gson.fromJson("[\"ROCK\",\"PAPER\",\"SCISSORS\"]", new TypeToken<Set<Roshambo>>() { [EOL]     }.getType())); [EOL] }
public void testEnumSubclass() { [EOL]     assertFalse(Roshambo.class == Roshambo.ROCK.getClass()); [EOL]     assertEquals("\"ROCK\"", gson.toJson(Roshambo.ROCK)); [EOL]     assertEquals("[\"ROCK\",\"PAPER\",\"SCISSORS\"]", gson.toJson(EnumSet.allOf(Roshambo.class))); [EOL]     assertEquals(Roshambo.ROCK, gson.fromJson("\"ROCK\"", Roshambo.class)); [EOL]     assertEquals(EnumSet.allOf(Roshambo.class), gson.fromJson("[\"ROCK\",\"PAPER\",\"SCISSORS\"]", new TypeToken<Set<Roshambo>>() { [EOL]     }.getType())); [EOL] }
public void testEnumSubclass() { [EOL]     assertFalse(Roshambo.class == Roshambo.ROCK.getClass()); [EOL]     assertEquals("\"ROCK\"", gson.toJson(Roshambo.ROCK)); [EOL]     assertEquals("[\"ROCK\",\"PAPER\",\"SCISSORS\"]", gson.toJson(EnumSet.allOf(Roshambo.class))); [EOL]     assertEquals(Roshambo.ROCK, gson.fromJson("\"ROCK\"", Roshambo.class)); [EOL]     assertEquals(EnumSet.allOf(Roshambo.class), gson.fromJson("[\"ROCK\",\"PAPER\",\"SCISSORS\"]", new TypeToken<Set<Roshambo>>() { [EOL]     }.getType())); [EOL] }
public void testEnumSubclass() { [EOL]     assertFalse(Roshambo.class == Roshambo.ROCK.getClass()); [EOL]     assertEquals("\"ROCK\"", gson.toJson(Roshambo.ROCK)); [EOL]     assertEquals("[\"ROCK\",\"PAPER\",\"SCISSORS\"]", gson.toJson(EnumSet.allOf(Roshambo.class))); [EOL]     assertEquals(Roshambo.ROCK, gson.fromJson("\"ROCK\"", Roshambo.class)); [EOL]     assertEquals(EnumSet.allOf(Roshambo.class), gson.fromJson("[\"ROCK\",\"PAPER\",\"SCISSORS\"]", new TypeToken<Set<Roshambo>>() { [EOL]     }.getType())); [EOL] }
public void testEnumSubclass() { [EOL]     assertFalse(Roshambo.class == Roshambo.ROCK.getClass()); [EOL]     assertEquals("\"ROCK\"", gson.toJson(Roshambo.ROCK)); [EOL]     assertEquals("[\"ROCK\",\"PAPER\",\"SCISSORS\"]", gson.toJson(EnumSet.allOf(Roshambo.class))); [EOL]     assertEquals(Roshambo.ROCK, gson.fromJson("\"ROCK\"", Roshambo.class)); [EOL]     assertEquals(EnumSet.allOf(Roshambo.class), gson.fromJson("[\"ROCK\",\"PAPER\",\"SCISSORS\"]", new TypeToken<Set<Roshambo>>() { [EOL]     }.getType())); [EOL] }
public void testEnumSubclass() { [EOL]     assertFalse(Roshambo.class == Roshambo.ROCK.getClass()); [EOL]     assertEquals("\"ROCK\"", gson.toJson(Roshambo.ROCK)); [EOL]     assertEquals("[\"ROCK\",\"PAPER\",\"SCISSORS\"]", gson.toJson(EnumSet.allOf(Roshambo.class))); [EOL]     assertEquals(Roshambo.ROCK, gson.fromJson("\"ROCK\"", Roshambo.class)); [EOL]     assertEquals(EnumSet.allOf(Roshambo.class), gson.fromJson("[\"ROCK\",\"PAPER\",\"SCISSORS\"]", new TypeToken<Set<Roshambo>>() { [EOL]     }.getType())); [EOL] }
public void testEnumSubclass() { [EOL]     assertFalse(Roshambo.class == Roshambo.ROCK.getClass()); [EOL]     assertEquals("\"ROCK\"", gson.toJson(Roshambo.ROCK)); [EOL]     assertEquals("[\"ROCK\",\"PAPER\",\"SCISSORS\"]", gson.toJson(EnumSet.allOf(Roshambo.class))); [EOL]     assertEquals(Roshambo.ROCK, gson.fromJson("\"ROCK\"", Roshambo.class)); [EOL]     assertEquals(EnumSet.allOf(Roshambo.class), gson.fromJson("[\"ROCK\",\"PAPER\",\"SCISSORS\"]", new TypeToken<Set<Roshambo>>() { [EOL]     }.getType())); [EOL] }
public void testEnumSubclass() { [EOL]     assertFalse(Roshambo.class == Roshambo.ROCK.getClass()); [EOL]     assertEquals("\"ROCK\"", gson.toJson(Roshambo.ROCK)); [EOL]     assertEquals("[\"ROCK\",\"PAPER\",\"SCISSORS\"]", gson.toJson(EnumSet.allOf(Roshambo.class))); [EOL]     assertEquals(Roshambo.ROCK, gson.fromJson("\"ROCK\"", Roshambo.class)); [EOL]     assertEquals(EnumSet.allOf(Roshambo.class), gson.fromJson("[\"ROCK\",\"PAPER\",\"SCISSORS\"]", new TypeToken<Set<Roshambo>>() { [EOL]     }.getType())); [EOL] }
public void testEnumSubclass() { [EOL]     assertFalse(Roshambo.class == Roshambo.ROCK.getClass()); [EOL]     assertEquals("\"ROCK\"", gson.toJson(Roshambo.ROCK)); [EOL]     assertEquals("[\"ROCK\",\"PAPER\",\"SCISSORS\"]", gson.toJson(EnumSet.allOf(Roshambo.class))); [EOL]     assertEquals(Roshambo.ROCK, gson.fromJson("\"ROCK\"", Roshambo.class)); [EOL]     assertEquals(EnumSet.allOf(Roshambo.class), gson.fromJson("[\"ROCK\",\"PAPER\",\"SCISSORS\"]", new TypeToken<Set<Roshambo>>() { [EOL]     }.getType())); [EOL] }
public void testEnumSubclass() { [EOL]     assertFalse(Roshambo.class == Roshambo.ROCK.getClass()); [EOL]     assertEquals("\"ROCK\"", gson.toJson(Roshambo.ROCK)); [EOL]     assertEquals("[\"ROCK\",\"PAPER\",\"SCISSORS\"]", gson.toJson(EnumSet.allOf(Roshambo.class))); [EOL]     assertEquals(Roshambo.ROCK, gson.fromJson("\"ROCK\"", Roshambo.class)); [EOL]     assertEquals(EnumSet.allOf(Roshambo.class), gson.fromJson("[\"ROCK\",\"PAPER\",\"SCISSORS\"]", new TypeToken<Set<Roshambo>>() { [EOL]     }.getType())); [EOL] }
public void testEnumSubclass() { [EOL]     assertFalse(Roshambo.class == Roshambo.ROCK.getClass()); [EOL]     assertEquals("\"ROCK\"", gson.toJson(Roshambo.ROCK)); [EOL]     assertEquals("[\"ROCK\",\"PAPER\",\"SCISSORS\"]", gson.toJson(EnumSet.allOf(Roshambo.class))); [EOL]     assertEquals(Roshambo.ROCK, gson.fromJson("\"ROCK\"", Roshambo.class)); [EOL]     assertEquals(EnumSet.allOf(Roshambo.class), gson.fromJson("[\"ROCK\",\"PAPER\",\"SCISSORS\"]", new TypeToken<Set<Roshambo>>() { [EOL]     }.getType())); [EOL] }
public void testSelfReferenceCustomHandlerSerialization() throws Exception { [EOL]     ClassWithSelfReference obj = new ClassWithSelfReference(); [EOL]     obj.child = obj; [EOL]     Gson gson = new GsonBuilder().registerTypeAdapter(ClassWithSelfReference.class, new JsonSerializer<ClassWithSelfReference>() { [EOL]  [EOL]         public JsonElement serialize(ClassWithSelfReference src, Type typeOfSrc, JsonSerializationContext context) { [EOL]             JsonObject obj = new JsonObject(); [EOL]             obj.addProperty("property", "value"); [EOL]             obj.add("child", context.serialize(src.child)); [EOL]             return obj; [EOL]         } [EOL]     }).create(); [EOL]     try { [EOL]         gson.toJson(obj); [EOL]         fail("Circular reference to self can not be serialized!"); [EOL]     } catch (IllegalStateException expected) { [EOL]         assertTrue(expected.getMessage().contains("Offending")); [EOL]     } [EOL] }
public void testSelfReferenceCustomHandlerSerialization() throws Exception { [EOL]     ClassWithSelfReference obj = new ClassWithSelfReference(); [EOL]     obj.child = obj; [EOL]     Gson gson = new GsonBuilder().registerTypeAdapter(ClassWithSelfReference.class, new JsonSerializer<ClassWithSelfReference>() { [EOL]  [EOL]         public JsonElement serialize(ClassWithSelfReference src, Type typeOfSrc, JsonSerializationContext context) { [EOL]             JsonObject obj = new JsonObject(); [EOL]             obj.addProperty("property", "value"); [EOL]             obj.add("child", context.serialize(src.child)); [EOL]             return obj; [EOL]         } [EOL]     }).create(); [EOL]     try { [EOL]         gson.toJson(obj); [EOL]         fail("Circular reference to self can not be serialized!"); [EOL]     } catch (IllegalStateException expected) { [EOL]         assertTrue(expected.getMessage().contains("Offending")); [EOL]     } [EOL] }
public void testSelfReferenceCustomHandlerSerialization() throws Exception { [EOL]     ClassWithSelfReference obj = new ClassWithSelfReference(); [EOL]     obj.child = obj; [EOL]     Gson gson = new GsonBuilder().registerTypeAdapter(ClassWithSelfReference.class, new JsonSerializer<ClassWithSelfReference>() { [EOL]  [EOL]         public JsonElement serialize(ClassWithSelfReference src, Type typeOfSrc, JsonSerializationContext context) { [EOL]             JsonObject obj = new JsonObject(); [EOL]             obj.addProperty("property", "value"); [EOL]             obj.add("child", context.serialize(src.child)); [EOL]             return obj; [EOL]         } [EOL]     }).create(); [EOL]     try { [EOL]         gson.toJson(obj); [EOL]         fail("Circular reference to self can not be serialized!"); [EOL]     } catch (IllegalStateException expected) { [EOL]         assertTrue(expected.getMessage().contains("Offending")); [EOL]     } [EOL] }
public void testSelfReferenceCustomHandlerSerialization() throws Exception { [EOL]     ClassWithSelfReference obj = new ClassWithSelfReference(); [EOL]     obj.child = obj; [EOL]     Gson gson = new GsonBuilder().registerTypeAdapter(ClassWithSelfReference.class, new JsonSerializer<ClassWithSelfReference>() { [EOL]  [EOL]         public JsonElement serialize(ClassWithSelfReference src, Type typeOfSrc, JsonSerializationContext context) { [EOL]             JsonObject obj = new JsonObject(); [EOL]             obj.addProperty("property", "value"); [EOL]             obj.add("child", context.serialize(src.child)); [EOL]             return obj; [EOL]         } [EOL]     }).create(); [EOL]     try { [EOL]         gson.toJson(obj); [EOL]         fail("Circular reference to self can not be serialized!"); [EOL]     } catch (IllegalStateException expected) { [EOL]         assertTrue(expected.getMessage().contains("Offending")); [EOL]     } [EOL] }
public void testEnumSubclass() { [EOL]     assertFalse(Roshambo.class == Roshambo.ROCK.getClass()); [EOL]     assertEquals("\"ROCK\"", gson.toJson(Roshambo.ROCK)); [EOL]     assertEquals("[\"ROCK\",\"PAPER\",\"SCISSORS\"]", gson.toJson(EnumSet.allOf(Roshambo.class))); [EOL]     assertEquals(Roshambo.ROCK, gson.fromJson("\"ROCK\"", Roshambo.class)); [EOL]     assertEquals(EnumSet.allOf(Roshambo.class), gson.fromJson("[\"ROCK\",\"PAPER\",\"SCISSORS\"]", new TypeToken<Set<Roshambo>>() { [EOL]     }.getType())); [EOL] }
public void testEnumSubclass() { [EOL]     assertFalse(Roshambo.class == Roshambo.ROCK.getClass()); [EOL]     assertEquals("\"ROCK\"", gson.toJson(Roshambo.ROCK)); [EOL]     assertEquals("[\"ROCK\",\"PAPER\",\"SCISSORS\"]", gson.toJson(EnumSet.allOf(Roshambo.class))); [EOL]     assertEquals(Roshambo.ROCK, gson.fromJson("\"ROCK\"", Roshambo.class)); [EOL]     assertEquals(EnumSet.allOf(Roshambo.class), gson.fromJson("[\"ROCK\",\"PAPER\",\"SCISSORS\"]", new TypeToken<Set<Roshambo>>() { [EOL]     }.getType())); [EOL] }
public void testEnumSubclass() { [EOL]     assertFalse(Roshambo.class == Roshambo.ROCK.getClass()); [EOL]     assertEquals("\"ROCK\"", gson.toJson(Roshambo.ROCK)); [EOL]     assertEquals("[\"ROCK\",\"PAPER\",\"SCISSORS\"]", gson.toJson(EnumSet.allOf(Roshambo.class))); [EOL]     assertEquals(Roshambo.ROCK, gson.fromJson("\"ROCK\"", Roshambo.class)); [EOL]     assertEquals(EnumSet.allOf(Roshambo.class), gson.fromJson("[\"ROCK\",\"PAPER\",\"SCISSORS\"]", new TypeToken<Set<Roshambo>>() { [EOL]     }.getType())); [EOL] }
public void testEnumSubclass() { [EOL]     assertFalse(Roshambo.class == Roshambo.ROCK.getClass()); [EOL]     assertEquals("\"ROCK\"", gson.toJson(Roshambo.ROCK)); [EOL]     assertEquals("[\"ROCK\",\"PAPER\",\"SCISSORS\"]", gson.toJson(EnumSet.allOf(Roshambo.class))); [EOL]     assertEquals(Roshambo.ROCK, gson.fromJson("\"ROCK\"", Roshambo.class)); [EOL]     assertEquals(EnumSet.allOf(Roshambo.class), gson.fromJson("[\"ROCK\",\"PAPER\",\"SCISSORS\"]", new TypeToken<Set<Roshambo>>() { [EOL]     }.getType())); [EOL] }
public void testJsonObjectWithNullValuesSerialized() { [EOL]     gson = new GsonBuilder().serializeNulls().create(); [EOL]     JsonObject obj = new JsonObject(); [EOL]     obj.addProperty("field1", "value1"); [EOL]     obj.addProperty("field2", (String) null); [EOL]     String json = gson.toJson(obj); [EOL]     assertTrue(json.contains("field1")); [EOL]     assertTrue(json.contains("field2")); [EOL] }
public void testJsonObjectWithNullValuesSerialized() { [EOL]     gson = new GsonBuilder().serializeNulls().create(); [EOL]     JsonObject obj = new JsonObject(); [EOL]     obj.addProperty("field1", "value1"); [EOL]     obj.addProperty("field2", (String) null); [EOL]     String json = gson.toJson(obj); [EOL]     assertTrue(json.contains("field1")); [EOL]     assertTrue(json.contains("field2")); [EOL] }
public void testAddingCharacterProperties() throws Exception { [EOL]     String propertyName = "property"; [EOL]     char value = 'a'; [EOL]     JsonObject jsonObj = new JsonObject(); [EOL]     jsonObj.addProperty(propertyName, value); [EOL]     assertTrue(jsonObj.has(propertyName)); [EOL]     JsonElement jsonElement = jsonObj.get(propertyName); [EOL]     assertNotNull(jsonElement); [EOL]     assertEquals(String.valueOf(value), jsonElement.getAsString()); [EOL]     assertEquals(value, jsonElement.getAsCharacter()); [EOL] }
public void testAddingCharacterProperties() throws Exception { [EOL]     String propertyName = "property"; [EOL]     char value = 'a'; [EOL]     JsonObject jsonObj = new JsonObject(); [EOL]     jsonObj.addProperty(propertyName, value); [EOL]     assertTrue(jsonObj.has(propertyName)); [EOL]     JsonElement jsonElement = jsonObj.get(propertyName); [EOL]     assertNotNull(jsonElement); [EOL]     assertEquals(String.valueOf(value), jsonElement.getAsString()); [EOL]     assertEquals(value, jsonElement.getAsCharacter()); [EOL] }
public void testAddingCharacterProperties() throws Exception { [EOL]     String propertyName = "property"; [EOL]     char value = 'a'; [EOL]     JsonObject jsonObj = new JsonObject(); [EOL]     jsonObj.addProperty(propertyName, value); [EOL]     assertTrue(jsonObj.has(propertyName)); [EOL]     JsonElement jsonElement = jsonObj.get(propertyName); [EOL]     assertNotNull(jsonElement); [EOL]     assertEquals(String.valueOf(value), jsonElement.getAsString()); [EOL]     assertEquals(value, jsonElement.getAsCharacter()); [EOL] }
@SuppressWarnings({ "unchecked", "rawtypes" }) [EOL] public void testRawCollectionOfBagOfPrimitivesNotAllowed() { [EOL]     try { [EOL]         BagOfPrimitives bag = new BagOfPrimitives(10, 20, false, "stringValue"); [EOL]         String json = '[' + bag.getExpectedJson() + ',' + bag.getExpectedJson() + ']'; [EOL]         Collection target = gson.fromJson(json, Collection.class); [EOL]         assertEquals(2, target.size()); [EOL]         for (BagOfPrimitives bag1 : (Collection<BagOfPrimitives>) target) { [EOL]             assertEquals(bag.getExpectedJson(), bag1.getExpectedJson()); [EOL]         } [EOL]         fail("Raw collection of objects should not work"); [EOL]     } catch (JsonParseException expected) { [EOL]     } [EOL] }
@SuppressWarnings({ "unchecked", "rawtypes" }) [EOL] public void testRawCollectionOfBagOfPrimitivesNotAllowed() { [EOL]     try { [EOL]         BagOfPrimitives bag = new BagOfPrimitives(10, 20, false, "stringValue"); [EOL]         String json = '[' + bag.getExpectedJson() + ',' + bag.getExpectedJson() + ']'; [EOL]         Collection target = gson.fromJson(json, Collection.class); [EOL]         assertEquals(2, target.size()); [EOL]         for (BagOfPrimitives bag1 : (Collection<BagOfPrimitives>) target) { [EOL]             assertEquals(bag.getExpectedJson(), bag1.getExpectedJson()); [EOL]         } [EOL]         fail("Raw collection of objects should not work"); [EOL]     } catch (JsonParseException expected) { [EOL]     } [EOL] }
@SuppressWarnings({ "unchecked", "rawtypes" }) [EOL] public void testRawCollectionOfBagOfPrimitivesNotAllowed() { [EOL]     try { [EOL]         BagOfPrimitives bag = new BagOfPrimitives(10, 20, false, "stringValue"); [EOL]         String json = '[' + bag.getExpectedJson() + ',' + bag.getExpectedJson() + ']'; [EOL]         Collection target = gson.fromJson(json, Collection.class); [EOL]         assertEquals(2, target.size()); [EOL]         for (BagOfPrimitives bag1 : (Collection<BagOfPrimitives>) target) { [EOL]             assertEquals(bag.getExpectedJson(), bag1.getExpectedJson()); [EOL]         } [EOL]         fail("Raw collection of objects should not work"); [EOL]     } catch (JsonParseException expected) { [EOL]     } [EOL] }
