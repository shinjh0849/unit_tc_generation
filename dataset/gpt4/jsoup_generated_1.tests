public void testRemoveAttr_WithExistingAttribute() { [EOL] Element element = new Element(Tag.valueOf("div"), ""); [EOL] element.attr("key", "value"); [EOL] Node result = element.removeAttr("key"); [EOL] assertFalse(element.hasAttr("key")); [EOL] assertSame(element, result); [EOL] }
public void testRemoveAttr_WithNonExistingAttribute() { [EOL] Element element = new Element(Tag.valueOf("div"), ""); [EOL] Node result = element.removeAttr("nonexistent"); [EOL] assertFalse(element.hasAttr("nonexistent")); [EOL] assertSame(element, result); [EOL] }
public void testRemoveAttr_WithNullAttribute() { [EOL] Element element = new Element(Tag.valueOf("div"), ""); [EOL] try { [EOL] element.removeAttr(null); [EOL] fail("Should throw IllegalArgumentException for null attribute key"); [EOL] } catch (IllegalArgumentException e) { [EOL] } [EOL] }
public void testRemove_NodeWithParent() { [EOL] Element parent = new Element(Tag.valueOf("div"), ""); [EOL] Element child = new Element(Tag.valueOf("p"), ""); [EOL] parent.appendChild(child); [EOL] child.remove(); [EOL] assertFalse(parent.children().contains(child)); [EOL] }
public void testRemove_NodeWithoutParent() { [EOL] Element child = new Element(Tag.valueOf("p"), ""); [EOL] try { [EOL] child.remove(); [EOL] fail("Should throw IllegalArgumentException because the node has no parent."); [EOL] } catch (IllegalArgumentException e) { [EOL] } [EOL] }
public void testRemoveChild_NodeExists() { [EOL] Element parent = new Element(Tag.valueOf("div"), ""); [EOL] Element child = new Element(Tag.valueOf("p"), ""); [EOL] parent.appendChild(child); [EOL] parent.removeChild(child); [EOL] assertEquals(0, parent.childNodeSize()); [EOL] assertNull(child.parentNode()); [EOL] }
public void testRemoveChild_NodeNotExists() { [EOL] Element parent = new Element(Tag.valueOf("div"), ""); [EOL] Element child = new Element(Tag.valueOf("p"), ""); [EOL] try { [EOL] parent.removeChild(child); [EOL] fail("Should throw IllegalArgumentException"); [EOL] } catch (IllegalArgumentException e) { [EOL] } [EOL] }
public void testRemoveChild_InvalidNode() { [EOL] Element parent = new Element(Tag.valueOf("div"), ""); [EOL] Element child1 = new Element(Tag.valueOf("p"), ""); [EOL] Element child2 = new Element(Tag.valueOf("span"), ""); [EOL] parent.appendChild(child1); [EOL] try { [EOL] parent.removeChild(child2); [EOL] fail("Should throw IllegalArgumentException"); [EOL] } catch (IllegalArgumentException e) { [EOL] } [EOL] }
public void testAttrWithEmptyElements() { [EOL] Elements elements = new Elements(); [EOL] Elements result = elements.attr("key", "value"); [EOL] assertTrue(result.isEmpty()); [EOL] }
public void testAttrWithSingleElement() { [EOL] Elements elements = new Elements(); [EOL] elements.add(new Element(Tag.valueOf("div"), "")); [EOL] Elements result = elements.attr("key", "value"); [EOL] assertEquals(1, result.size()); [EOL] assertEquals("value", result.get(0).attr("key")); [EOL] }
public void testAttrWithMultipleElements() { [EOL] Elements elements = new Elements(); [EOL] elements.add(new Element(Tag.valueOf("div"), "")); [EOL] elements.add(new Element(Tag.valueOf("p"), "")); [EOL] Elements result = elements.attr("key", "value"); [EOL] assertEquals(2, result.size()); [EOL] for (Element element : result) { [EOL] assertEquals("value", element.attr("key")); [EOL] } [EOL] }
public void testRemoveAttr_WithExistingAttribute() { [EOL] Elements elements = new Elements(); [EOL] elements.add(new Element(Tag.valueOf("div"), "").attr("key", "value")); [EOL] elements.add(new Element(Tag.valueOf("span"), "").attr("key", "value")); [EOL] Elements result = elements.removeAttr("key"); [EOL] for (Element element : result) { [EOL] assertNull(element.attr("key")); [EOL] } [EOL] }
public void testRemoveAttr_WithNonExistingAttribute() { [EOL] Elements elements = new Elements(); [EOL] elements.add(new Element(Tag.valueOf("div"), "").attr("otherKey", "value")); [EOL] elements.add(new Element(Tag.valueOf("span"), "").attr("otherKey", "value")); [EOL] Elements result = elements.removeAttr("key"); [EOL] for (Element element : result) { [EOL] assertNotNull(element.attr("otherKey")); [EOL] } [EOL] }
public void testRemoveAttr_EmptyElements() { [EOL] Elements elements = new Elements(); [EOL] Elements result = elements.removeAttr("key"); [EOL] assertTrue(result.isEmpty()); [EOL] }
public void testAddClassToEmptyElements() { [EOL] Elements elements = new Elements(); [EOL] Elements result = elements.addClass("new-class"); [EOL] assertTrue(result.isEmpty()); [EOL] }
public void testAddClassToSingleElement() { [EOL] Element element = new Element(Tag.valueOf("div"), ""); [EOL] Elements elements = new Elements(); [EOL] elements.add(element); [EOL] Elements result = elements.addClass("new-class"); [EOL] assertEquals(1, result.size()); [EOL] assertTrue(result.get(0).hasClass("new-class")); [EOL] }
public void testAddClassToMultipleElements() { [EOL] Elements elements = new Elements(); [EOL] elements.add(new Element(Tag.valueOf("div"), "")); [EOL] elements.add(new Element(Tag.valueOf("p"), "")); [EOL] Elements result = elements.addClass("new-class"); [EOL] assertEquals(2, result.size()); [EOL] for (Element el : result) { [EOL] assertTrue(el.hasClass("new-class")); [EOL] } [EOL] }
public void testRemoveClass_NullClassName() { [EOL] Elements elements = new Elements(); [EOL] elements.add(new Element(Tag.valueOf("div"), "")); [EOL] elements.add(new Element(Tag.valueOf("p"), "")); [EOL] elements.addClass("test-class"); [EOL] elements.removeClass(null); [EOL] for (Element element : elements) { [EOL] assertTrue(element.className().contains("test-class")); [EOL] } [EOL] }
public void testRemoveClass_EmptyClassName() { [EOL] Elements elements = new Elements(); [EOL] elements.add(new Element(Tag.valueOf("div"), "")); [EOL] elements.add(new Element(Tag.valueOf("p"), "")); [EOL] elements.addClass("test-class"); [EOL] elements.removeClass(""); [EOL] for (Element element : elements) { [EOL] assertTrue(element.className().contains("test-class")); [EOL] } [EOL] }
public void testRemoveClass_ExistingClassName() { [EOL] Elements elements = new Elements(); [EOL] elements.add(new Element(Tag.valueOf("div"), "")); [EOL] elements.add(new Element(Tag.valueOf("p"), "")); [EOL] elements.addClass("test-class"); [EOL] elements.removeClass("test-class"); [EOL] for (Element element : elements) { [EOL] assertFalse(element.hasClass("test-class")); [EOL] } [EOL] }
public void testRemoveClass_NonExistingClassName() { [EOL] Elements elements = new Elements(); [EOL] elements.add(new Element(Tag.valueOf("div"), "")); [EOL] elements.add(new Element(Tag.valueOf("p"), "")); [EOL] elements.addClass("test-class"); [EOL] elements.removeClass("non-existing-class"); [EOL] for (Element element : elements) { [EOL] assertTrue(element.hasClass("test-class")); [EOL] } [EOL] }
public void testRemoveClass_FromEmptyElements() { [EOL] Elements elements = new Elements(); [EOL] elements.removeClass("test-class"); [EOL] assertTrue(elements.isEmpty()); [EOL] }
public void testToggleClassWithEmptyElements() { [EOL] Elements elements = new Elements(); [EOL] Elements result = elements.toggleClass("someClass"); [EOL] assertTrue(result.isEmpty()); [EOL] }
public void testToggleClassWithSingleElement() { [EOL] Element element = new Element(Tag.valueOf("div"), ""); [EOL] Elements elements = new Elements(); [EOL] elements.add(element); [EOL] Elements result = elements.toggleClass("someClass"); [EOL] assertEquals(1, result.size()); [EOL] assertTrue(element.hasClass("someClass")); [EOL] }
public void testToggleClassWithMultipleElements() { [EOL] Element element1 = new Element(Tag.valueOf("div"), ""); [EOL] Element element2 = new Element(Tag.valueOf("p"), ""); [EOL] Elements elements = new Elements(); [EOL] elements.add(element1); [EOL] elements.add(element2); [EOL] Elements result = elements.toggleClass("someClass"); [EOL] assertEquals(2, result.size()); [EOL] assertTrue(element1.hasClass("someClass")); [EOL] assertTrue(element2.hasClass("someClass")); [EOL] }
public void testToggleClassWithMultipleElementsToggleOff() { [EOL] Element element1 = new Element(Tag.valueOf("div"), "").addClass("someClass"); [EOL] Element element2 = new Element(Tag.valueOf("p"), "").addClass("someClass"); [EOL] Elements elements = new Elements(); [EOL] elements.add(element1); [EOL] elements.add(element2); [EOL] Elements result = elements.toggleClass("someClass"); [EOL] assertEquals(2, result.size()); [EOL] assertFalse(element1.hasClass("someClass")); [EOL] assertFalse(element2.hasClass("someClass")); [EOL] }
public void testHasClass_WithExistingClass_ReturnsTrue() { [EOL] Element element1 = new Element(Tag.valueOf("div"), ""); [EOL] element1.addClass("testClass"); [EOL] Element element2 = new Element(Tag.valueOf("p"), ""); [EOL] Elements contents = new Elements(Arrays.asList(element1, element2)); [EOL] boolean result = contents.hasClass("testClass"); [EOL] assertTrue(result); [EOL] }
public void testHasClass_WithNonExistingClass_ReturnsFalse() { [EOL] Element element1 = new Element(Tag.valueOf("div"), ""); [EOL] Element element2 = new Element(Tag.valueOf("p"), ""); [EOL] Elements contents = new Elements(Arrays.asList(element1, element2)); [EOL] boolean result = contents.hasClass("testClass"); [EOL] assertFalse(result); [EOL] }
public void testContainsWithContainedObject() { [EOL] Elements elements = new Elements(); [EOL] Element element = new Element(Tag.valueOf("div"), ""); [EOL] elements.add(element); [EOL] boolean contains = elements.contains(element); [EOL] assertTrue(contains); [EOL] }
public void testContainsWithNotContainedObject() { [EOL] Elements elements = new Elements(); [EOL] Element element1 = new Element(Tag.valueOf("div"), ""); [EOL] Element element2 = new Element(Tag.valueOf("p"), ""); [EOL] elements.add(element1); [EOL] boolean contains = elements.contains(element2); [EOL] assertFalse(contains); [EOL] }
public void testContainsWithNull() { [EOL] Elements elements = new Elements(); [EOL] boolean contains = elements.contains(null); [EOL] assertFalse(contains); [EOL] }
public void testCopySafeNodes_withSafeElement() { [EOL] Element source = new Element(Tag.valueOf("div"), ""); [EOL] Element dest = new Element(Tag.valueOf("p"), ""); [EOL] Element child = new Element(Tag.valueOf("span"), ""); [EOL] source.appendChild(child); [EOL] Cleaner cleaner = new Cleaner(Whitelist.simpleText()); [EOL] int numDiscarded = cleaner.copySafeNodes(source, dest); [EOL] assertEquals(0, numDiscarded); [EOL] assertEquals(1, dest.childNodeSize()); [EOL] }
public void testCopySafeNodes_withUnsafeElement() { [EOL] Element source = new Element(Tag.valueOf("div"), ""); [EOL] Element dest = new Element(Tag.valueOf("p"), ""); [EOL] Element child = new Element(Tag.valueOf("script"), ""); [EOL] source.appendChild(child); [EOL] Cleaner cleaner = new Cleaner(Whitelist.none()); [EOL] int numDiscarded = cleaner.copySafeNodes(source, dest); [EOL] assertEquals(1, numDiscarded); [EOL] assertEquals(0, dest.childNodeSize()); [EOL] }
public void testCopySafeNodes_withTextNode() { [EOL] Element source = new Element(Tag.valueOf("div"), ""); [EOL] Element dest = new Element(Tag.valueOf("p"), ""); [EOL] TextNode textNode = new TextNode("text", ""); [EOL] source.appendChild(textNode); [EOL] Cleaner cleaner = new Cleaner(Whitelist.simpleText()); [EOL] int numDiscarded = cleaner.copySafeNodes(source, dest); [EOL] assertEquals(0, numDiscarded); [EOL] assertEquals(1, dest.childNodeSize()); [EOL] assertTrue(dest.childNode(0) instanceof TextNode); [EOL] }
public void testCopySafeNodes_withNestedElements() { [EOL] Element source = new Element(Tag.valueOf("div"), ""); [EOL] Element dest = new Element(Tag.valueOf("p"), ""); [EOL] Element safeChild = new Element(Tag.valueOf("span"), ""); [EOL] Element unsafeChild = new Element(Tag.valueOf("script"), ""); [EOL] safeChild.appendChild(unsafeChild); [EOL] source.appendChild(safeChild); [EOL] Cleaner cleaner = new Cleaner(Whitelist.simpleText().addTags("span")); [EOL] int numDiscarded = cleaner.copySafeNodes(source, dest); [EOL] assertEquals(1, numDiscarded); [EOL] assertEquals(1, dest.childNodeSize()); [EOL] Element copiedChild = (Element) dest.childNode(0); [EOL] assertEquals("span", copiedChild.tagName()); [EOL] assertEquals(0, copiedChild.childNodeSize()); [EOL] }
public void testCreateSafeElement_AllAttributesSafe() { [EOL] Element sourceEl = new Element(Tag.valueOf("div"), ""); [EOL] sourceEl.attr("safe1", "value1"); [EOL] sourceEl.attr("safe2", "value2"); [EOL] Whitelist whitelist = new Whitelist(); [EOL] whitelist.addTags("div"); [EOL] whitelist.addAttributes("div", "safe1", "safe2"); [EOL] Cleaner cleaner = new Cleaner(whitelist); [EOL] ElementMeta elementMeta = cleaner.createSafeElement(sourceEl); [EOL] Element dest = elementMeta.getElement(); [EOL] int numDiscarded = elementMeta.getNumDiscarded(); [EOL] assertEquals("div", dest.tagName()); [EOL] assertEquals("value1", dest.attr("safe1")); [EOL] assertEquals("value2", dest.attr("safe2")); [EOL] assertEquals(0, numDiscarded); [EOL] }
public void testCreateSafeElement_SomeAttributesUnsafe() { [EOL] Element sourceEl = new Element(Tag.valueOf("div"), ""); [EOL] sourceEl.attr("safe", "value1"); [EOL] sourceEl.attr("unsafe", "value2"); [EOL] Whitelist whitelist = new Whitelist(); [EOL] whitelist.addTags("div"); [EOL] whitelist.addAttributes("div", "safe"); [EOL] Cleaner cleaner = new Cleaner(whitelist); [EOL] ElementMeta elementMeta = cleaner.createSafeElement(sourceEl); [EOL] Element dest = elementMeta.getElement(); [EOL] int numDiscarded = elementMeta.getNumDiscarded(); [EOL] assertEquals("div", dest.tagName()); [EOL] assertEquals("value1", dest.attr("safe")); [EOL] assertFalse(dest.hasAttr("unsafe")); [EOL] assertEquals(1, numDiscarded); [EOL] }
public void testCreateSafeElement_NoAttributes() { [EOL] Element sourceEl = new Element(Tag.valueOf("div"), ""); [EOL] Whitelist whitelist = new Whitelist(); [EOL] whitelist.addTags("div"); [EOL] Cleaner cleaner = new Cleaner(whitelist); [EOL] ElementMeta elementMeta = cleaner.createSafeElement(sourceEl); [EOL] Element dest = elementMeta.getElement(); [EOL] int numDiscarded = elementMeta.getNumDiscarded(); [EOL] assertEquals("div", dest.tagName()); [EOL] assertEquals(0, dest.attributes().size()); [EOL] assertEquals(0, numDiscarded); [EOL] }
public void testCreateSafeElement_WithEnforcedAttributes() { [EOL] Element sourceEl = new Element(Tag.valueOf("div"), ""); [EOL] sourceEl.attr("safe", "value1"); [EOL] Whitelist whitelist = new Whitelist(); [EOL] whitelist.addTags("div"); [EOL] whitelist.addAttributes("div", "safe"); [EOL] whitelist.addEnforcedAttribute("div", "enforced", "enforcedValue"); [EOL] Cleaner cleaner = new Cleaner(whitelist); [EOL] ElementMeta elementMeta = cleaner.createSafeElement(sourceEl); [EOL] Element dest = elementMeta.getElement(); [EOL] int numDiscarded = elementMeta.getNumDiscarded(); [EOL] assertEquals("div", dest.tagName()); [EOL] assertEquals("value1", dest.attr("safe")); [EOL] assertEquals("enforcedValue", dest.attr("enforced")); [EOL] assertEquals(0, numDiscarded); [EOL] }
public void testNormaliseWithNonBlankTextNode() { [EOL] Element element = new Element(Tag.valueOf("div"), ""); [EOL] TextNode nonBlankTextNode = new TextNode("non-blank", ""); [EOL] element.appendChild(nonBlankTextNode); [EOL] normalise(element); [EOL] assertFalse(element.childNodes().contains(nonBlankTextNode)); [EOL] assertTrue(body().childNodes().contains(nonBlankTextNode)); [EOL] }
public void testNormaliseWithBlankTextNode() { [EOL] Element element = new Element(Tag.valueOf("div"), ""); [EOL] TextNode blankTextNode = new TextNode(" ", ""); [EOL] element.appendChild(blankTextNode); [EOL] normalise(element); [EOL] assertTrue(element.childNodes().contains(blankTextNode)); [EOL] assertFalse(body().childNodes().contains(blankTextNode)); [EOL] }
public void testNormaliseWithNoTextNodes() { [EOL] Element element = new Element(Tag.valueOf("div"), ""); [EOL] normalise(element); [EOL] assertTrue(element.childNodes().isEmpty()); [EOL] assertTrue(body().childNodes().isEmpty()); [EOL] }
public void testOuterHtml() { [EOL] Document doc = Jsoup.parse("<div>Hello</div>"); [EOL] Element div = doc.select("div").first(); [EOL] String outerHtml = div.outerHtml(); [EOL] assertEquals("<div>Hello</div>", outerHtml); [EOL] }
private Elements select() { [EOL] tq.consumeWhitespace(); [EOL] if (tq.matchesAny(combinators)) { [EOL] elements.add(root); [EOL] combinator(tq.consume().toString()); [EOL] } else { [EOL] addElements(findElements()); [EOL] } [EOL] while (!tq.isEmpty()) { [EOL] boolean seenWhite = tq.consumeWhitespace(); [EOL] if (tq.matchChomp(",")) { [EOL] while (!tq.isEmpty()) { [EOL] String subQuery = tq.chompTo(","); [EOL] elements.addAll(select(subQuery, root)); [EOL] } [EOL] } else if (tq.matchesAny(combinators)) { [EOL] combinator(tq.consume().toString()); [EOL] } else if (seenWhite) { [EOL] combinator(" "); [EOL] } else { [EOL] Elements candidates = findElements(); [EOL] intersectElements(filterForSelf(elements, candidates)); [EOL] } [EOL] } [EOL] return new Elements(elements); [EOL] } [EOL] private Selector(String query, Element root); [EOL] public SelectorParseException(String s); [EOL] public static Elements select(String query, Element root); [EOL] public static Elements select(String query, Iterable<Element> roots); [EOL] private Elements select(); [EOL] private void combinator(String combinator); [EOL] private Elements findElements(); [EOL] private void addElements(Collection<Element> add); [EOL] private void intersectElements(Collection<Element> intersect); [EOL] private Elements byId(); [EOL] private Elements byClass(); [EOL] private Elements byTag(); [EOL] private Elements byAttribute(); [EOL] private Elements allElements(); [EOL] private Elements indexLessThan(); [EOL] private Elements indexGreaterThan(); [EOL] private Elements indexEquals(); [EOL] private int consumeIndex(); [EOL] private static Elements filterForChildren(Collection<Element> parents, Collection<Element> candidates); [EOL] private static Elements filterForDescendants(Collection<Element> parents, Collection<Element> candidates); [EOL] private static Elements filterForAdjacentSiblings(Collection<Element> elements, Collection<Element> candidates); [EOL] private static Elements filterForGeneralSiblings(Collection<Element> elements, Collection<Element> candidates); [EOL] private static Elements filterForSelf(Collection<Element> parents, Collection<Element> candidates); [EOL] String[] combinators=Optional[{ ",", ">", "+", "~", " " }];
private Elements byAttribute() { [EOL] String key = tq.consumeToAny("=", "!=", "^=", "$=", "*=", "]"); [EOL] Validate.notEmpty(key); [EOL] if (tq.matchChomp("]")) { [EOL] return root.getElementsByAttribute(key); [EOL] } else { [EOL] if (tq.matchChomp("=")) [EOL] return root.getElementsByAttributeValue(key, tq.chompTo("]")); [EOL] else if (tq.matchChomp("!=")) [EOL] return root.getElementsByAttributeValueNot(key, tq.chompTo("]")); [EOL] else if (tq.matchChomp("^=")) [EOL] return root.getElementsByAttributeValueStarting(key, tq.chompTo("]")); [EOL] else if (tq.matchChomp("$=")) [EOL] return root.getElementsByAttributeValueEnding(key, tq.chompTo("]")); [EOL] else if (tq.matchChomp("*=")) [EOL] return root.getElementsByAttributeValueContaining(key, tq.chompTo("]")); [EOL] else [EOL] throw new SelectorParseException("Could not parse attribute query " + query); [EOL] } [EOL] } [EOL] private Selector(String query, Element root); [EOL] public SelectorParseException(String s); [EOL] public static Elements select(String query, Element root); [EOL] public static Elements select(String query, Iterable<Element> roots); [EOL] private Elements select(); [EOL] private void combinator(String combinator); [EOL] private Elements findElements(); [EOL] private void addElements(Collection<Element> add); [EOL] private void intersectElements(Collection<Element> intersect); [EOL] private Elements byId(); [EOL] private Elements byClass(); [EOL] private Elements byTag(); [EOL] private Elements byAttribute(); [EOL] private Elements allElements(); [EOL] private Elements indexLessThan(); [EOL] private Elements indexGreaterThan(); [EOL] private Elements indexEquals(); [EOL] private int consumeIndex(); [EOL] private static Elements filterForChildren(Collection<Element> parents, Collection<Element> candidates); [EOL] private static Elements filterForDescendants(Collection<Element> parents, Collection<Element> candidates); [EOL] private static Elements filterForAdjacentSiblings(Collection<Element> elements, Collection<Element> candidates); [EOL] private static Elements filterForGeneralSiblings(Collection<Element> elements, Collection<Element> candidates); [EOL] private static Elements filterForSelf(Collection<Element> parents, Collection<Element> candidates); [EOL] String[] combinators = {" ",",", ">", "+", "~"};
public void testElementSiblingIndexWithNoParent() { [EOL] Element element = new Element(Tag.valueOf("div"), ""); [EOL] Integer index = element.elementSiblingIndex(); [EOL] assertEquals(Integer.valueOf(0), index); [EOL] }
public void testElementSiblingIndexWithParent() { [EOL] Element parent = new Element(Tag.valueOf("div"), ""); [EOL] Element child1 = new Element(Tag.valueOf("p"), ""); [EOL] Element child2 = new Element(Tag.valueOf("p"), ""); [EOL] parent.appendChild(child1); [EOL] parent.appendChild(child2); [EOL] Integer indexChild1 = child1.elementSiblingIndex(); [EOL] Integer indexChild2 = child2.elementSiblingIndex(); [EOL] assertEquals(Integer.valueOf(0), indexChild1); [EOL] assertEquals(Integer.valueOf(1), indexChild2); [EOL] }
public void testGetElementById_WithExistingId() { [EOL] Element root = Jsoup.parse("<div><p id='test'>Hello</p></div>"); [EOL] Element result = root.getElementById("test"); [EOL] assertNotNull(result); [EOL] assertEquals("p", result.tagName()); [EOL] assertEquals("Hello", result.text()); [EOL] }
public void testGetElementById_WithNonExistingId() { [EOL] Element root = Jsoup.parse("<div><p id='test'>Hello</p></div>"); [EOL] Element result = root.getElementById("nonexistent"); [EOL] assertNull(result); [EOL] }
public void testGetElementById_WithEmptyId() { [EOL] Element root = Jsoup.parse("<div><p id=''>Hello</p></div>"); [EOL] try { [EOL] root.getElementById(""); [EOL] fail("Should throw IllegalArgumentException for empty id"); [EOL] } catch (IllegalArgumentException e) { [EOL] } [EOL] }
public void testTextWithEmptyElement() { [EOL] Element element = new Element(Tag.valueOf("div"), ""); [EOL] String result = element.text(); [EOL] assertTrue(result.isEmpty()); [EOL] }
public void testTextWithNonEmptyElement() { [EOL] Element element = new Element(Tag.valueOf("p"), ""); [EOL] element.appendChild(new TextNode("Hello, World!", "")); [EOL] String result = element.text(); [EOL] assertEquals("Hello, World!", result); [EOL] }
public void testTextWithNestedElements() { [EOL] Element parent = new Element(Tag.valueOf("div"), ""); [EOL] Element child = new Element(Tag.valueOf("p"), ""); [EOL] child.appendChild(new TextNode("Child text", "")); [EOL] parent.appendChild(child); [EOL] String result = parent.text(); [EOL] assertEquals("Child text", result); [EOL] }
public void testTextWithWhitespace() { [EOL] Element element = new Element(Tag.valueOf("p"), ""); [EOL] element.appendChild(new TextNode("   Hello, World!   ", "")); [EOL] String result = element.text(); [EOL] assertEquals("Hello, World!", result); [EOL] }
public void testTextWithTextNode() { [EOL] Element element = new Element(Tag.valueOf("div"), ""); [EOL] element.appendChild(new TextNode("Sample text", "")); [EOL] StringBuilder accum = new StringBuilder(); [EOL] element.text(accum); [EOL] assertEquals("Sample text", accum.toString()); [EOL] }
public void testTextWithTextNodeAndWhitespaceNormalization() { [EOL] Element element = new Element(Tag.valueOf("div"), ""); [EOL] element.appendChild(new TextNode("   Sample   text  ", "")); [EOL] StringBuilder accum = new StringBuilder(); [EOL] element.text(accum); [EOL] assertEquals("Sample text", accum.toString()); [EOL] }
public void testTextWithTextNodeAndLeadingWhitespaceStripped() { [EOL] Element element = new Element(Tag.valueOf("div"), ""); [EOL] element.appendChild(new TextNode("   Sample text", "")); [EOL] StringBuilder accum = new StringBuilder(" "); [EOL] element.text(accum); [EOL] assertEquals(" Sample text", accum.toString()); [EOL] }
public void testTextWithElement() { [EOL] Element parent = new Element(Tag.valueOf("div"), ""); [EOL] Element child = new Element(Tag.valueOf("p"), ""); [EOL] child.appendChild(new TextNode("Child text", "")); [EOL] parent.appendChild(child); [EOL] StringBuilder accum = new StringBuilder(); [EOL] parent.text(accum); [EOL] assertEquals("Child text", accum.toString()); [EOL] }
public void testTextWithElementAndBlockElementAddsSpace() { [EOL] Element parent = new Element(Tag.valueOf("div"), ""); [EOL] Element child = new Element(Tag.valueOf("p"), ""); [EOL] child.appendChild(new TextNode("Child text", "")); [EOL] parent.appendChild(child); [EOL] StringBuilder accum = new StringBuilder("Existing text"); [EOL] parent.text(accum); [EOL] assertEquals("Existing text Child text", accum.toString()); [EOL] }
public void testTextWithElementAndNoSpaceAddedForInlineElement() { [EOL] Element parent = new Element(Tag.valueOf("div"), ""); [EOL] Element child = new Element(Tag.valueOf("span"), ""); // Assuming span is an inline element [EOL] child.appendChild(new TextNode("Child text", "")); [EOL] parent.appendChild(child); [EOL] StringBuilder accum = new StringBuilder("Existing text"); [EOL] parent.text(accum); [EOL] assertEquals("Existing textChild text", accum.toString()); [EOL] }
public void testElementTextWithNonNullText() { [EOL] Element element = new Element(Tag.valueOf("div"), ""); [EOL] String sampleText = "Sample Text"; [EOL] Element result = element.text(sampleText); [EOL] assertEquals("Text should be set to the element", sampleText, result.text()); [EOL] assertTrue("Element should have child nodes after setting text", result.childNodeSize() > 0); [EOL] assertTrue("The child node should be an instance of TextNode", result.childNode(0) instanceof TextNode); [EOL] }
public void testElementTextWithEmptyString() { [EOL] Element element = new Element(Tag.valueOf("div"), ""); [EOL] String emptyText = ""; [EOL] Element result = element.text(emptyText); [EOL] assertEquals("Text should be empty", emptyText, result.text()); [EOL] assertTrue("Element should have child nodes after setting text", result.childNodeSize() > 0); [EOL] assertTrue("The child node should be an instance of TextNode", result.childNode(0) instanceof TextNode); [EOL] }
public void testElementTextWithNullText() { [EOL] Element element = new Element(Tag.valueOf("div"), ""); [EOL] String nullText = null; [EOL] try { [EOL] element.text(nullText); [EOL] fail("text(null) should throw IllegalArgumentException"); [EOL] } catch (IllegalArgumentException e) { [EOL] } [EOL] }
public void testClassNameWhenClassAttributeIsPresent() { [EOL] Element element = new Element(Tag.valueOf("div"), ""); [EOL] element.attr("class", "testClass"); [EOL] String className = element.className(); [EOL] assert className.equals("testClass"); [EOL] }
public void testClassNameWhenClassAttributeIsNotPresent() { [EOL] Element element = new Element(Tag.valueOf("div"), ""); [EOL] String className = element.className(); [EOL] assert className.equals(""); [EOL] }
public void testClassNames_NonEmptyClassAttribute() { [EOL] Element element = new Element(Tag.valueOf("div"), ""); [EOL] element.addClass("class1"); [EOL] element.addClass("class2"); [EOL] element.addClass("class3"); [EOL] Set<String> classNames = element.classNames(); [EOL] assertTrue(classNames.contains("class1")); [EOL] assertTrue(classNames.contains("class2")); [EOL] assertTrue(classNames.contains("class3")); [EOL] assertEquals(3, classNames.size()); [EOL] }
public void testClassNames_EmptyClassAttribute() { [EOL] Element element = new Element(Tag.valueOf("div"), ""); [EOL] Set<String> classNames = element.classNames(); [EOL] assertTrue(classNames.isEmpty()); [EOL] }
public void testClassNames_NullClassAttribute() { [EOL] Element element = new Element(Tag.valueOf("div"), ""); [EOL] element.attributes().put("class", null); [EOL] Set<String> classNames = element.classNames(); [EOL] assertTrue(classNames.isEmpty()); [EOL] }
public void testClassNames_WithWhitespace() { [EOL] Element element = new Element(Tag.valueOf("div"), ""); [EOL] element.addClass("class1 class2  class3"); [EOL] Set<String> classNames = element.classNames(); [EOL] assertTrue(classNames.contains("class1")); [EOL] assertTrue(classNames.contains("class2")); [EOL] assertTrue(classNames.contains("class3")); [EOL] assertEquals(3, classNames.size()); [EOL] }
public void testClassNamesWithNonNullSet() { [EOL] Element element = new Element(Tag.valueOf("div"), ""); [EOL] Set<String> classNames = new HashSet<>(); [EOL] classNames.add("class1"); [EOL] classNames.add("class2"); [EOL] element = element.classNames(classNames); [EOL] assertEquals("class1 class2", element.className()); [EOL] }
public void testClassNamesWithEmptySet() { [EOL] Element element = new Element(Tag.valueOf("div"), ""); [EOL] Set<String> classNames = new HashSet<>(); [EOL] element = element.classNames(classNames); [EOL] assertEquals("", element.className()); [EOL] }
public void testClassNamesWithNullSet() { [EOL] Element element = new Element(Tag.valueOf("div"), ""); [EOL] try { [EOL] element.classNames(null); [EOL] fail("Should throw IllegalArgumentException for null input"); [EOL] } catch (IllegalArgumentException e) { [EOL] } [EOL] }
public void testHasClass_WithExistingClass() { [EOL] Element element = new Element(Tag.valueOf("div"), ""); [EOL] element.addClass("existing-class"); [EOL] boolean result = element.hasClass("existing-class"); [EOL] assertTrue(result); [EOL] }
public void testHasClass_WithNonExistingClass() { [EOL] Element element = new Element(Tag.valueOf("div"), ""); [EOL] boolean result = element.hasClass("non-existing-class"); [EOL] assertFalse(result); [EOL] }
public void testHasClass_WithNullInput() { [EOL] Element element = new Element(Tag.valueOf("div"), ""); [EOL] element.addClass("some-class"); [EOL] boolean result = element.hasClass(null); [EOL] assertFalse(result); [EOL] }
public void testAddClassWithNonNullClassName() { [EOL] Element element = new Element(Tag.valueOf("div"), ""); [EOL] String className = "new-class"; [EOL] Element result = element.addClass(className); [EOL] assertTrue(result.classNames().contains(className)); [EOL] assertSame(element, result); [EOL] }
public void testAddClassWithNullClassName() { [EOL] Element element = new Element(Tag.valueOf("div"), ""); [EOL] try { [EOL] element.addClass(null); [EOL] fail("addClass should throw IllegalArgumentException for null className"); [EOL] } catch (IllegalArgumentException e) { [EOL] } [EOL] }
public void testRemoveClass_NullClassName_ThrowsException() { [EOL] Element element = new Element(Tag.valueOf("div"), ""); [EOL] try { [EOL] element.removeClass(null); [EOL] fail("Should throw IllegalArgumentException for null className"); [EOL] } catch (IllegalArgumentException e) { [EOL] } [EOL] }
public void testRemoveClass_ExistingClassName_RemovesClass() { [EOL] Element element = new Element(Tag.valueOf("div"), "").addClass("existing-class"); [EOL] element.removeClass("existing-class"); [EOL] assertFalse(element.classNames().contains("existing-class")); [EOL] }
public void testRemoveClass_NonExistingClassName_NoChanges() { [EOL] Element element = new Element(Tag.valueOf("div"), "").addClass("existing-class"); [EOL] element.removeClass("non-existing-class"); [EOL] assertTrue(element.classNames().contains("existing-class")); [EOL] }
public void testToggleClass_ClassNameIsNull() { [EOL] Element element = new Element(Tag.valueOf("div"), ""); [EOL] try { [EOL] element.toggleClass(null); [EOL] fail("Should throw IllegalArgumentException for null class name"); [EOL] } catch (IllegalArgumentException e) { [EOL] } [EOL] }
public void testToggleClass_AddNewClass() { [EOL] Element element = new Element(Tag.valueOf("div"), ""); [EOL] String className = "new-class"; [EOL] element.toggleClass(className); [EOL] assertTrue(element.hasClass(className)); [EOL] }
public void testToggleClass_RemoveExistingClass() { [EOL] Element element = new Element(Tag.valueOf("div"), "").addClass("existing-class"); [EOL] String className = "existing-class"; [EOL] element.toggleClass(className); [EOL] assertFalse(element.hasClass(className)); [EOL] }
public void testToggleClass_ToggleBackAndForth() { [EOL] Element element = new Element(Tag.valueOf("div"), "").addClass("toggle-class"); [EOL] String className = "toggle-class"; [EOL] element.toggleClass(className); // should remove the class [EOL] assertFalse(element.hasClass(className)); [EOL] element.toggleClass(className); // should add the class back [EOL] assertTrue(element.hasClass(className)); [EOL] }
public void testOuterHtmlWithBlockElement() { [EOL] Element blockElement = new Element(Tag.valueOf("div"), ""); [EOL] StringBuilder accum = new StringBuilder(); [EOL] blockElement.outerHtml(accum); [EOL] String result = accum.toString(); [EOL] assertTrue(result.startsWith("<div")); [EOL] assertTrue(result.endsWith("</div>")); [EOL] } [EOL] public void testOuterHtmlWithNonBlockElement() { [EOL] Element inlineElement = new Element(Tag.valueOf("span"), ""); [EOL] StringBuilder accum = new StringBuilder(); [EOL] inlineElement.outerHtml(accum); [EOL] String result = accum.toString(); [EOL] assertTrue(result.startsWith("<span")); [EOL] assertTrue(result.endsWith("</span>")); [EOL] } [EOL] public void testOuterHtmlWithSelfClosingTag() { [EOL] Element selfClosingElement = new Element(Tag.valueOf("img"), ""); [EOL] StringBuilder accum = new StringBuilder(); [EOL] selfClosingElement.outerHtml(accum); [EOL] String result = accum.toString(); [EOL] assertTrue(result.startsWith("<img")); [EOL] assertTrue(result.endsWith(" />")); [EOL] } [EOL] public void testOuterHtmlWithParentCanContainBlock() { [EOL] Element parent = new Element(Tag.valueOf("div"), ""); [EOL] Element child = new Element(Tag.valueOf("p"), ""); [EOL] parent.appendChild(child); [EOL] StringBuilder accum = new StringBuilder(); [EOL] child.outerHtml(accum); [EOL] String result = accum.toString(); [EOL] assertTrue(result.startsWith("    <p")); [EOL] assertTrue(result.endsWith("</p>")); [EOL] } [EOL] public void testOuterHtmlWithSiblingAndNoParent() { [EOL] Element sibling1 = new Element(Tag.valueOf("div"), ""); [EOL] Element sibling2 = new Element(Tag.valueOf("div"), ""); [EOL] StringBuilder accum = new StringBuilder(); [EOL] sibling2.outerHtml(accum); [EOL] String result = accum.toString(); [EOL] assertFalse(result.startsWith("    ")); [EOL] assertTrue(result.startsWith("<div")); [EOL] assertTrue(result.endsWith("</div>")); [EOL] }
public void testOuterHtmlWithSiblingAndParentCanContainBlock() { [EOL] Element parent = new Element(Tag.valueOf("div"), ""); [EOL] Element sibling1 = new Element(Tag.valueOf("div"), ""); [EOL] Element sibling2 = new Element(Tag.valueOf("div"), ""); [EOL] parent.appendChild(sibling1); [EOL] parent.appendChild(sibling2); [EOL] StringBuilder accum = new StringBuilder(); [EOL] sibling2.outerHtml(accum); [EOL] String result = accum.toString(); [EOL] assertFalse(result.startsWith("    ")); [EOL] assertTrue(result.startsWith("<div")); [EOL] assertTrue(result.endsWith("</div>")); [EOL] }
public void testParseWithComment() { [EOL] TokenQueue tq = new TokenQueue("<!-- Comment -->"); [EOL] Parser parser = new Parser(tq); [EOL] Document doc = parser.parse(); [EOL] }
public void testParseWithCdata() { [EOL] TokenQueue tq = new TokenQueue("<![CDATA[data]]>"); [EOL] Parser parser = new Parser(tq); [EOL] Document doc = parser.parse(); [EOL] }
public void testParseWithXmlDecl() { [EOL] TokenQueue tq = new TokenQueue("<?xml version=\"1.0\"?>"); [EOL] Parser parser = new Parser(tq); [EOL] Document doc = parser.parse(); [EOL] }
public void testParseWithEndTag() { [EOL] TokenQueue tq = new TokenQueue("</tag>"); [EOL] Parser parser = new Parser(tq); [EOL] Document doc = parser.parse(); [EOL] }
public void testParseWithStartTag() { [EOL] TokenQueue tq = new TokenQueue("<tag>"); [EOL] Parser parser = new Parser(tq); [EOL] Document doc = parser.parse(); [EOL] }
public void testParseWithTextNode() { [EOL] TokenQueue tq = new TokenQueue("Some text"); [EOL] Parser parser = new Parser(tq); [EOL] Document doc = parser.parse(); [EOL] }
public void testParseEmptyQueue() { [EOL] TokenQueue tq = new TokenQueue(""); [EOL] Parser parser = new Parser(tq); [EOL] Document doc = parser.parse(); [EOL] }
public void testParseCommentWithProperClosing() { [EOL] TokenQueue tq = new TokenQueue("<!--This is a comment-->"); [EOL] String baseUri = "http://example.com"; [EOL] Node node = new Element(Tag.valueOf("div"), baseUri); [EOL] Parser parser = new Parser(new TreeBuilder()); [EOL] parser.getTreeBuilder().initializeParse(tq, baseUri, node); [EOL] parser.getTreeBuilder().parseComment(); [EOL] Comment comment = (Comment) node.childNode(0); [EOL] assertEquals("This is a comment", comment.getData()); [EOL] }
public void testParseCommentWithExtraHyphen() { [EOL] TokenQueue tq = new TokenQueue("<!--This is a comment--->"); [EOL] String baseUri = "http://example.com"; [EOL] Node node = new Element(Tag.valueOf("div"), baseUri); [EOL] Parser parser = new Parser(new TreeBuilder()); [EOL] parser.getTreeBuilder().initializeParse(tq, baseUri, node); [EOL] parser.getTreeBuilder().parseComment(); [EOL] Comment comment = (Comment) node.childNode(0); [EOL] assertEquals("This is a comment-", comment.getData()); [EOL] }
public void testParseCommentWithoutClosing() { [EOL] TokenQueue tq = new TokenQueue("<!--This is a comment"); [EOL] String baseUri = "http://example.com"; [EOL] Node node = new Element(Tag.valueOf("div"), baseUri); [EOL] Parser parser = new Parser(new TreeBuilder()); [EOL] parser.getTreeBuilder().initializeParse(tq, baseUri, node); [EOL] try { [EOL] parser.getTreeBuilder().parseComment(); [EOL] fail("Should throw an exception due to missing comment closure"); [EOL] } catch (IllegalArgumentException e) { [EOL] } [EOL] }
private void testParseStartTag_EmptyTagName() { [EOL] TokenQueue tq = new TokenQueue("<"); [EOL] parseStartTag(tq); [EOL] } [EOL] private void testParseStartTag_NonEmptyTagName() { [EOL] TokenQueue tq = new TokenQueue("<div"); [EOL] parseStartTag(tq); [EOL] } [EOL] private void testParseStartTag_WithAttributes() { [EOL] TokenQueue tq = new TokenQueue("<div id='test'"); [EOL] parseStartTag(tq); [EOL] } [EOL] private void testParseStartTag_SelfClosing() { [EOL] TokenQueue tq = new TokenQueue("<img/>"); [EOL] parseStartTag(tq); [EOL] } [EOL] private void testParseStartTag_NonSelfClosing() { [EOL] TokenQueue tq = new TokenQueue("<div>"); [EOL] parseStartTag(tq); [EOL] } [EOL] private void testParseStartTag_DataTag() { [EOL] TokenQueue tq = new TokenQueue("<script>var a = 1;</script>"); [EOL] parseStartTag(tq); [EOL] } [EOL] private void testParseStartTag_BaseTag() { [EOL] TokenQueue tq = new TokenQueue("<base href='http://example.com/'>"); [EOL] parseStartTag(tq); [EOL] }
public void testParseAttributeWithNoKeyAndNoValue() { [EOL] TokenQueue tq = new TokenQueue(""); [EOL] Attribute result = parseAttribute(tq); [EOL] assertNull(result); [EOL] } [EOL] public void testParseAttributeWithKeyAndNoValue() { [EOL] TokenQueue tq = new TokenQueue("key"); [EOL] Attribute result = parseAttribute(tq); [EOL] assertNotNull(result); [EOL] assertEquals("key", result.getKey()); [EOL] assertEquals("", result.getValue()); [EOL] } [EOL] public void testParseAttributeWithKeyAndValueNoQuotes() { [EOL] TokenQueue tq = new TokenQueue("key=value"); [EOL] Attribute result = parseAttribute(tq); [EOL] assertNotNull(result); [EOL] assertEquals("key", result.getKey()); [EOL] assertEquals("value", result.getValue()); [EOL] }
public void testParseAttributeWithKeyAndValueSingleQuotes() { [EOL] TokenQueue tq = new TokenQueue("key='value'"); [EOL] Attribute result = parseAttribute(tq); [EOL] assertNotNull(result); [EOL] assertEquals("key", result.getKey()); [EOL] assertEquals("value", result.getValue()); [EOL] }
public void testParseAttributeWithKeyAndValueDoubleQuotes() { [EOL] TokenQueue tq = new TokenQueue("key=\"value\""); [EOL] Attribute result = parseAttribute(tq); [EOL] assertNotNull(result); [EOL] assertEquals("key", result.getKey()); [EOL] assertEquals("value", result.getValue()); [EOL] }
public void testParseAttributeWithWhitespaceAroundEquals() { [EOL] TokenQueue tq = new TokenQueue("key = value"); [EOL] Attribute result = parseAttribute(tq); [EOL] assertNotNull(result); [EOL] assertEquals("key", result.getKey()); [EOL] assertEquals("value", result.getValue()); [EOL] }
public void testParseAttributeWithComplexValue() { [EOL] TokenQueue tq = new TokenQueue("key=value1 value2"); [EOL] Attribute result = parseAttribute(tq); [EOL] assertNotNull(result); [EOL] assertEquals("key", result.getKey()); [EOL] assertEquals("value1", result.getValue()); [EOL] }
public void testParseAttributeWithEmptyQueue() { [EOL] TokenQueue tq = new TokenQueue(""); [EOL] Attribute result = parseAttribute(tq); [EOL] assertNull(result); [EOL] }
public void testParseCdataWithValidInput() { [EOL] TokenQueue tq = new TokenQueue("<![CDATA[some data]]>"); [EOL] Node node = new Element(Tag.valueOf("div"), ""); [EOL] Parser parser = new Parser(new TreeBuilder()); [EOL] parser.getStack().add(node); [EOL] parser.parseCdata(); [EOL] assertEquals("some data", ((TextNode) node.childNode(0)).getWholeText()); [EOL] }
public void testParseCdataWithEmptyCdata() { [EOL] TokenQueue tq = new TokenQueue("<![CDATA[]]>"); [EOL] Node node = new Element(Tag.valueOf("div"), ""); [EOL] Parser parser = new Parser(new TreeBuilder()); [EOL] parser.getStack().add(node); [EOL] parser.parseCdata(); [EOL] assertEquals("", ((TextNode) node.childNode(0)).getWholeText()); [EOL] }
public void testParseCdataWithNoClosingTag() { [EOL] TokenQueue tq = new TokenQueue("<![CDATA[some data"); [EOL] Node node = new Element(Tag.valueOf("div"), ""); [EOL] Parser parser = new Parser(new TreeBuilder()); [EOL] parser.getStack().add(node); [EOL] parser.parseCdata(); [EOL] assertEquals("some data", ((TextNode) node.childNode(0)).getWholeText()); [EOL] }
public void testStackHasValidParentWithEmptyStack() { [EOL] stack.clear(); // Ensure the stack is empty [EOL] Tag childTag = Tag.valueOf("div"); // Replace with actual child tag creation [EOL] boolean result = stackHasValidParent(childTag); [EOL] assertFalse(result); // Assert that the result is false since the stack is empty [EOL] }
public void testStackHasValidParentWithHtmlTag() { [EOL] stack.clear(); [EOL] stack.add(new Element(Tag.valueOf("html"), "")); // Replace with actual Element creation [EOL] Tag childTag = Tag.valueOf("div"); // Replace with actual child tag creation [EOL] boolean result = stackHasValidParent(childTag); [EOL] assertTrue(result); // Assert that the result is true for html tag [EOL] }
public void testStackHasValidParentWithValidParent() { [EOL] stack.clear(); [EOL] Element parentElement = new Element(Tag.valueOf("body"), ""); // Replace with actual Element creation [EOL] stack.add(parentElement); [EOL] Tag childTag = Tag.valueOf("div"); // Replace with actual child tag creation [EOL] boolean result = stackHasValidParent(childTag); [EOL] assertTrue(result); // Assert that the result is true since body is a valid parent for div [EOL] }
public void testStackHasValidParentWithInvalidParent() { [EOL] stack.clear(); [EOL] Element invalidParentElement = new Element(Tag.valueOf("span"), ""); // Replace with actual Element creation [EOL] stack.add(invalidParentElement); [EOL] Tag childTag = Tag.valueOf("div"); // Replace with actual child tag creation [EOL] boolean result = stackHasValidParent(childTag); [EOL] assertFalse(result); // Assert that the result is false since span is not a valid parent for div [EOL] }
public void testBasicWhitelist() { [EOL] Whitelist basic = Whitelist.basic(); [EOL] assertTrue(basic.isTagAllowed("a")); [EOL] assertTrue(basic.isTagAllowed("b")); [EOL] assertTrue(basic.isTagAllowed("blockquote")); [EOL] assertTrue(basic.isTagAllowed("br")); [EOL] assertTrue(basic.isTagAllowed("cite")); [EOL] assertTrue(basic.isTagAllowed("code")); [EOL] assertTrue(basic.isTagAllowed("dd")); [EOL] assertTrue(basic.isTagAllowed("dl")); [EOL] assertTrue(basic.isTagAllowed("dt")); [EOL] assertTrue(basic.isTagAllowed("em")); [EOL] assertTrue(basic.isTagAllowed("i")); [EOL] assertTrue(basic.isTagAllowed("li")); [EOL] assertTrue(basic.isTagAllowed("ol")); [EOL] assertTrue(basic.isTagAllowed("p")); [EOL] assertTrue(basic.isTagAllowed("pre")); [EOL] assertTrue(basic.isTagAllowed("q")); [EOL] assertTrue(basic.isTagAllowed("small")); [EOL] assertTrue(basic.isTagAllowed("strike")); [EOL] assertTrue(basic.isTagAllowed("strong")); [EOL] assertTrue(basic.isTagAllowed("sub")); [EOL] assertTrue(basic.isTagAllowed("sup")); [EOL] assertTrue(basic.isTagAllowed("u")); [EOL] assertTrue(basic.isTagAllowed("ul")); [EOL] assertTrue(basic.isAttributeAllowed("a", "href")); [EOL] assertTrue(basic.isAttributeAllowed("blockquote", "cite")); [EOL] assertTrue(basic.isAttributeAllowed("q", "cite")); [EOL] assertTrue(basic.isProtocolAllowed("a", "href", "ftp")); [EOL] assertTrue(basic.isProtocolAllowed("a", "href", "http")); [EOL] assertTrue(basic.isProtocolAllowed("a", "href", "https")); [EOL] assertTrue(basic.isProtocolAllowed("a", "href", "mailto")); [EOL] assertTrue(basic.isProtocolAllowed("blockquote", "cite", "http")); [EOL] assertTrue(basic.isProtocolAllowed("blockquote", "cite", "https")); [EOL] assertTrue(basic.isProtocolAllowed("cite", "cite", "http")); [EOL] assertTrue(basic.isProtocolAllowed("cite", "cite", "https")); [EOL] assertTrue(basic.isEnforcedAttribute("a", "rel", "nofollow")); [EOL] }
public void testAddEnforcedAttribute_NewTag() { [EOL] Whitelist whitelist = new Whitelist(); [EOL] String tag = "a"; [EOL] String key = "href"; [EOL] String value = "http://example.com"; [EOL] whitelist.addEnforcedAttribute(tag, key, value); [EOL] Map<AttributeKey, AttributeValue> attrs = whitelist.getEnforcedAttributes(TagName.valueOf(tag)); [EOL] assertNotNull(attrs); [EOL] assertEquals("http://example.com", attrs.get(AttributeKey.valueOf(key)).toString()); [EOL] }
public void testAddEnforcedAttribute_ExistingTag() { [EOL] Whitelist whitelist = new Whitelist(); [EOL] String tag = "a"; [EOL] String key1 = "href"; [EOL] String value1 = "http://example.com"; [EOL] String key2 = "rel"; [EOL] String value2 = "nofollow"; [EOL] whitelist.addEnforcedAttribute(tag, key1, value1); [EOL] whitelist.addEnforcedAttribute(tag, key2, value2); [EOL] Map<AttributeKey, AttributeValue> attrs = whitelist.getEnforcedAttributes(TagName.valueOf(tag)); [EOL] assertNotNull(attrs); [EOL] assertEquals("http://example.com", attrs.get(AttributeKey.valueOf(key1)).toString()); [EOL] assertEquals("nofollow", attrs.get(AttributeKey.valueOf(key2)).toString()); [EOL] }
public void testAddEnforcedAttribute_EmptyArguments() { [EOL] Whitelist whitelist = new Whitelist(); [EOL] try { [EOL] whitelist.addEnforcedAttribute("", "href", "http://example.com"); [EOL] fail("Should have thrown an exception for empty tag"); [EOL] } catch (IllegalArgumentException e) { [EOL] } [EOL] try { [EOL] whitelist.addEnforcedAttribute("a", "", "http://example.com"); [EOL] fail("Should have thrown an exception for empty key"); [EOL] } catch (IllegalArgumentException e) { [EOL] } [EOL] try { [EOL] whitelist.addEnforcedAttribute("a", "href", ""); [EOL] fail("Should have thrown an exception for empty value"); [EOL] } catch (IllegalArgumentException e) { [EOL] } [EOL] }
public void testValidProtocolWithEmptyProtocols() { [EOL] Element el = new Element(Tag.valueOf("a"), ""); [EOL] Attribute attr = new Attribute("href", "http://example.com"); [EOL] Set<Protocol> protocols = new HashSet<>(); [EOL] boolean result = testValidProtocol(el, attr, protocols); [EOL] assertFalse(result); [EOL] }
public void testValidProtocolWithMatchingProtocol() { [EOL] Element el = new Element(Tag.valueOf("a"), ""); [EOL] Attribute attr = new Attribute("href", "http://example.com"); [EOL] Set<Protocol> protocols = new HashSet<>(); [EOL] protocols.add(Protocol.HTTP); [EOL] boolean result = testValidProtocol(el, attr, protocols); [EOL] assertTrue(result); [EOL] }
public void testValidProtocolWithNonMatchingProtocol() { [EOL] Element el = new Element(Tag.valueOf("a"), ""); [EOL] Attribute attr = new Attribute("href", "https://example.com"); [EOL] Set<Protocol> protocols = new HashSet<>(); [EOL] protocols.add(Protocol.HTTP); [EOL] boolean result = testValidProtocol(el, attr, protocols); [EOL] assertFalse(result); [EOL] }
public void testValidProtocolWithMultipleProtocols() { [EOL] Element el = new Element(Tag.valueOf("a"), ""); [EOL] Attribute attr = new Attribute("href", "ftp://example.com"); [EOL] Set<Protocol> protocols = new HashSet<>(); [EOL] protocols.add(Protocol.HTTP); [EOL] protocols.add(Protocol.FTP); [EOL] boolean result = testValidProtocol(el, attr, protocols); [EOL] assertTrue(result); [EOL] }
public void testValidProtocolWithUpperCaseProtocol() { [EOL] Element el = new Element(Tag.valueOf("a"), ""); [EOL] Attribute attr = new Attribute("href", "HTTP://EXAMPLE.COM"); [EOL] Set<Protocol> protocols = new HashSet<>(); [EOL] protocols.add(Protocol.HTTP); [EOL] boolean result = testValidProtocol(el, attr, protocols); [EOL] assertTrue(result); [EOL] }
public void testGetEnforcedAttributes_WithExistingTag() { [EOL] Map<TagName, Map<AttributeKey, AttributeValue>> enforcedAttributes = new HashMap<>(); [EOL] Map<AttributeKey, AttributeValue> attributesMap = new HashMap<>(); [EOL] attributesMap.put(new AttributeKey("key1"), new AttributeValue("value1")); [EOL] attributesMap.put(new AttributeKey("key2"), new AttributeValue("value2")); [EOL] enforcedAttributes.put(TagName.valueOf("existingTag"), attributesMap); [EOL] YourClassUnderTest classUnderTest = new YourClassUnderTest(enforcedAttributes); [EOL] Attributes result = classUnderTest.getEnforcedAttributes("existingTag"); [EOL] assertEquals("value1", result.get("key1")); [EOL] assertEquals("value2", result.get("key2")); [EOL] }
public void testGetEnforcedAttributes_WithNonExistingTag() { [EOL] Map<TagName, Map<AttributeKey, AttributeValue>> enforcedAttributes = new HashMap<>(); [EOL] YourClassUnderTest classUnderTest = new YourClassUnderTest(enforcedAttributes); [EOL] Attributes result = classUnderTest.getEnforcedAttributes("nonExistingTag"); [EOL] assertTrue(result.size() == 0); [EOL] }
public void testAttributeValueWithNonNull() { [EOL] AttributeValue attributeValue = new AttributeValue("someValue"); [EOL] assertNotNull(attributeValue); [EOL] assertEquals("someValue", attributeValue.toString()); [EOL] }
public void testAttributeValueWithNull() { [EOL] AttributeValue attributeValue = new AttributeValue(null); [EOL] assertNotNull(attributeValue); [EOL] assertEquals("null", attributeValue.toString()); [EOL] }
public void testValueOf_withNull() { [EOL] AttributeValue result = AttributeValue.valueOf(null); [EOL] assertNull(result.getValue()); [EOL] }
public void testValueOf_withEmptyString() { [EOL] AttributeValue result = AttributeValue.valueOf(""); [EOL] assertEquals("", result.getValue()); [EOL] }
public void testValueOf_withNonEmptyString() { [EOL] String testValue = "testValue"; [EOL] AttributeValue result = AttributeValue.valueOf(testValue); [EOL] assertEquals(testValue, result.getValue()); [EOL] }
public void removeKeyFromAttributes() { [EOL] Attributes attributes = new Attributes(); [EOL] attributes.put("key1", "value1"); [EOL] attributes.put("Key2", "value2"); [EOL] attributes.remove("key1"); [EOL] assertEquals(null, attributes.get("key1")); [EOL] assertNotNull(attributes.get("Key2")); [EOL] }
public void removeKeyFromAttributesCaseInsensitive() { [EOL] Attributes attributes = new Attributes(); [EOL] attributes.put("key1", "value1"); [EOL] attributes.put("Key2", "value2"); [EOL] attributes.remove("KEY1"); [EOL] assertEquals(null, attributes.get("key1")); [EOL] assertNotNull(attributes.get("Key2")); [EOL] }
public void removeNonExistentKey() { [EOL] Attributes attributes = new Attributes(); [EOL] attributes.put("key1", "value1"); [EOL] attributes.remove("nonexistent"); [EOL] assertNotNull(attributes.get("key1")); [EOL] }
public void removeKeyWithEmptyName() { [EOL] Attributes attributes = new Attributes(); [EOL] try { [EOL] attributes.remove(""); [EOL] fail("Should throw an exception for empty key"); [EOL] } catch (IllegalArgumentException e) { [EOL] } [EOL] }
public void removeKeyWithNullName() { [EOL] Attributes attributes = new Attributes(); [EOL] try { [EOL] attributes.remove(null); [EOL] fail("Should throw an exception for null key"); [EOL] } catch (IllegalArgumentException e) { [EOL] } [EOL] }
public void testSize_EmptyAttributes() { [EOL] Attributes attributes = new Attributes(); [EOL] assertEquals(0, attributes.size()); [EOL] }
public void testSize_NonEmptyAttributes() { [EOL] Attributes attributes = new Attributes(); [EOL] attributes.put("key1", "value1"); [EOL] attributes.put("key2", "value2"); [EOL] assertEquals(2, attributes.size()); [EOL] }
public void testCommentConstructorWithValidData() { [EOL] String data = "Example Comment"; [EOL] String baseUri = "http://example.com"; [EOL] Comment comment = new Comment(data, baseUri); [EOL] assertEquals(data, comment.attributes.get("comment")); [EOL] assertEquals(baseUri, comment.baseUri()); [EOL] }
public void testCommentConstructorWithEmptyData() { [EOL] String data = "";// Empty comment data [EOL] String baseUri = "http://example.com"; [EOL] Comment comment = new Comment(data, baseUri); [EOL] assertEquals(data, comment.attributes.get("comment")); [EOL] assertEquals(baseUri, comment.baseUri()); [EOL] }
public void testCommentConstructorWithNullData() { [EOL] String data = null;// Null comment data [EOL] String baseUri = "http://example.com"; [EOL] Comment comment = new Comment(data, baseUri); [EOL] assertNull(comment.attributes.get("comment")); [EOL] assertEquals(baseUri, comment.baseUri()); [EOL] }
public void testGetDataWhenCommentKeyIsPresent() { [EOL] Attributes attributes = new Attributes(); [EOL] attributes.put(COMMENT_KEY, "some data"); [EOL] Node node = new Node(attributes); [EOL] String data = node.getData(); [EOL] assertEquals("some data", data); [EOL] }
public void testGetDataWhenCommentKeyIsAbsent() { [EOL] Attributes attributes = new Attributes(); [EOL] Node node = new Node(attributes); [EOL] String data = node.getData(); [EOL] assertNull(data); [EOL] }
public void testOuterHtmlWithEmptyStringBuilder() { [EOL] StringBuilder accum = new StringBuilder(); [EOL] Comment comment = new Comment("Example data"); [EOL] comment.outerHtml(accum); [EOL] assertEquals("<!--Example data-->", accum.toString()); [EOL] }
public void testOuterHtmlWithNonEmptyStringBuilder() { [EOL] StringBuilder accum = new StringBuilder("Existing content."); [EOL] Comment comment = new Comment("Example data"); [EOL] comment.outerHtml(accum); [EOL] assertEquals("Existing content.<!--Example data-->", accum.toString()); [EOL] }
public void testOuterHtmlWithIndentation() { [EOL] StringBuilder accum = new StringBuilder(); [EOL] Comment comment = new Comment("Example data"); [EOL] comment.setBaseUri("http://example.com"); [EOL] comment.outerHtml(accum); [EOL] assertTrue(accum.toString().startsWith("    <!--Example data-->")); [EOL] }
public void testIsValidParentWithEmptyAncestors() { [EOL] Tag child = new Tag("child"); [EOL] Tag parent = new Tag("parent"); [EOL] assertTrue(parent.isValidParent(child)); [EOL] }
public void testIsValidParentWithValidAncestor() { [EOL] Tag child = new Tag("child"); [EOL] Tag parent = new Tag("parent"); [EOL] child.ancestors.add(parent); [EOL] assertTrue(parent.isValidParent(child)); [EOL] }
public void testIsValidParentWithInvalidAncestor() { [EOL] Tag child = new Tag("child"); [EOL] Tag parent = new Tag("parent"); [EOL] Tag anotherTag = new Tag("another"); [EOL] child.ancestors.add(anotherTag); [EOL] assertFalse(parent.isValidParent(child)); [EOL] }
public void testEquals_Reflexive() { [EOL] Tag tag1 = new Tag("p"); [EOL] assertTrue(tag1.equals(tag1)); [EOL] } [EOL] public void testEquals_Null() { [EOL] Tag tag1 = new Tag("p"); [EOL] assertFalse(tag1.equals(null)); [EOL] } [EOL] public void testEquals_DifferentClass() { [EOL] Tag tag1 = new Tag("p"); [EOL] Object notATag = new Object(); [EOL] assertFalse(tag1.equals(notATag)); [EOL] } [EOL] public void testEquals_DifferentTagName() { [EOL] Tag tag1 = new Tag("p"); [EOL] Tag tag2 = new Tag("div"); [EOL] assertFalse(tag1.equals(tag2)); [EOL] } [EOL] public void testEquals_DifferentCanContainBlock() { [EOL] Tag tag1 = new Tag("p"); [EOL] tag1.setCanContainBlock(true); [EOL] Tag tag2 = new Tag("p"); [EOL] tag2.setCanContainBlock(false); [EOL] assertFalse(tag1.equals(tag2)); [EOL] } [EOL] public void testEquals_DifferentCanContainInline() { [EOL] Tag tag1 = new Tag("p"); [EOL] tag1.setCanContainInline(true); [EOL] Tag tag2 = new Tag("p"); [EOL] tag2.setCanContainInline(false); [EOL] assertFalse(tag1.equals(tag2)); [EOL] } [EOL] public void testEquals_DifferentEmpty() { [EOL] Tag tag1 = new Tag("p"); [EOL] tag1.setEmpty(true); [EOL] Tag tag2 = new Tag("p"); [EOL] tag2.setEmpty(false); [EOL] assertFalse(tag1.equals(tag2)); [EOL] } [EOL] public void testEquals_DifferentIsBlock() { [EOL] Tag tag1 = new Tag("p"); [EOL] tag1.setIsBlock(true); [EOL] Tag tag2 = new Tag("p"); [EOL] tag2.setIsBlock(false); [EOL] assertFalse(tag1.equals(tag2)); [EOL] } [EOL] public void testEquals_DifferentOptionalClosing() { [EOL] Tag tag1 = new Tag("p"); [EOL] tag1.setOptionalClosing(true); [EOL] Tag tag2 = new Tag("p"); [EOL] tag2.setOptionalClosing(false); [EOL] assertFalse(tag1.equals(tag2)); [EOL] } [EOL] public void testEquals_AllFieldsEqual() { [EOL] Tag tag1 = new Tag("p"); [EOL] Tag tag2 = new Tag("p"); [EOL] assertTrue(tag1.equals(tag2)); [EOL] }
private static Tag createBlock(String tagName) { [EOL] return register(new Tag(tagName)); [EOL] }
public void testCreateInlineWithValidTagName() { [EOL] Tag result = Tag.createInline("span"); [EOL] assertNotNull(result); [EOL] assertEquals("span", result.getName()); [EOL] assertFalse(result.isBlock()); [EOL] assertFalse(result.canContainBlock()); [EOL] }
public void testCreateInlineWithEmptyTagName() { [EOL] try { [EOL] Tag.createInline(""); [EOL] fail("Should have thrown an exception for empty tag name"); [EOL] } catch (IllegalArgumentException e) { [EOL] } [EOL] }
public void testCreateInlineWithNullTagName() { [EOL] try { [EOL] Tag.createInline(null); [EOL] fail("Should have thrown an exception for null tag name"); [EOL] } catch (NullPointerException e) { [EOL] } [EOL] }
public void testRegisterNewTag() { [EOL] Tag tag = new Tag("newTag"); [EOL] Tag defaultAncestor = Tag.valueOf("div"); // Assuming 'defaultAncestor' is a static field in the class [EOL] tag.setAncestor(defaultAncestor.tagName); // This line is to simulate the ancestor setting before registration [EOL] Tag result = register(tag); [EOL] assertNotNull(result); [EOL] assertEquals("newTag", result.tagName); [EOL] assertEquals("div", result.getAncestor().tagName); [EOL] assertTrue(tags.containsKey("newTag")); [EOL] assertEquals(tag, tags.get("newTag")); [EOL] }
public void testRegisterExistingTag() { [EOL] Tag tag = new Tag("a"); // Assuming 'a' is an existing tag [EOL] Tag defaultAncestor = Tag.valueOf("span"); // Assuming 'defaultAncestor' is a static field in the class [EOL] tag.setAncestor(defaultAncestor.tagName); // This line is to simulate the ancestor setting before registration [EOL] Tag result = register(tag); [EOL] assertNotNull(result); [EOL] assertEquals("a", result.tagName); [EOL] assertEquals("span", result.getAncestor().tagName); [EOL] assertTrue(tags.containsKey("a")); [EOL] assertEquals(tag, tags.get("a")); [EOL] }
public void testSetContainInlineOnly() { [EOL] Tag tag = new Tag("testTag"); [EOL] tag.setContainInlineOnly(); [EOL] assertFalse(tag.canContainBlock()); [EOL] assertTrue(tag.canContainInline()); [EOL] }
public void testSetContainDataOnly() { [EOL] Tag tag = new Tag("tagName"); [EOL] tag.setContainDataOnly(); [EOL] assertFalse(tag.canContainBlock()); [EOL] assertFalse(tag.canContainInline()); [EOL] assertTrue(tag.preserveWhitespace()); [EOL] }
public void testSetEmpty() { [EOL] Tag tag = new Tag("test"); [EOL] tag.setEmpty(); [EOL] assertFalse(tag.canContainBlock()); [EOL] assertFalse(tag.canContainInline()); [EOL] assertTrue(tag.isEmpty()); [EOL] }
public void testSetOptionalClosing() { [EOL] Tag tag = new Tag("tagName"); [EOL] Tag result = tag.setOptionalClosing(); [EOL] assertTrue(tag.isOptionalClosing()); [EOL] assertSame(tag, result); [EOL] }
public void testSetPreserveWhitespace() { [EOL] Tag tag = new Tag("div"); [EOL] assertFalse(tag.preserveWhitespace); [EOL] Tag result = tag.setPreserveWhitespace(); [EOL] assertTrue(tag.preserveWhitespace); [EOL] assertSame(tag, result); [EOL] }
