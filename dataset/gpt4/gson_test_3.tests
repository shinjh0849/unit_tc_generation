public void testArrayOfCollectionDeserialization() throws Exception { [EOL]     String json = "[[1,2],[3,4]]"; [EOL]     Type type = new TypeToken<Collection<Integer>[]>() { [EOL]     }.getType(); [EOL]     Collection<Integer>[] target = gson.fromJson(json, type); [EOL]     assertEquals(2, target.length); [EOL]     MoreAsserts.assertEquals(new Integer[] { 1, 2 }, target[0].toArray(new Integer[0])); [EOL]     MoreAsserts.assertEquals(new Integer[] { 3, 4 }, target[1].toArray(new Integer[0])); [EOL] }
public void testArrayOfCollectionDeserialization() throws Exception { [EOL]     String json = "[[1,2],[3,4]]"; [EOL]     Type type = new TypeToken<Collection<Integer>[]>() { [EOL]     }.getType(); [EOL]     Collection<Integer>[] target = gson.fromJson(json, type); [EOL]     assertEquals(2, target.length); [EOL]     MoreAsserts.assertEquals(new Integer[] { 1, 2 }, target[0].toArray(new Integer[0])); [EOL]     MoreAsserts.assertEquals(new Integer[] { 3, 4 }, target[1].toArray(new Integer[0])); [EOL] }
public void testParameterizedTypeVariableArrayField() throws Exception { [EOL]     Type listType = new TypeToken<List<Integer>[]>() { [EOL]     }.getType(); [EOL]     Field f = obj.getClass().getField("listOfTypeVariablesArray"); [EOL]     TypeInfo typeInfo = TypeInfoFactory.getTypeInfoForField(f, OBJ_TYPE); [EOL]     assertTrue(typeInfo.isArray()); [EOL]     assertFalse(typeInfo.isEnum()); [EOL]     assertEquals(listType, typeInfo.getActualType()); [EOL]     assertEquals(List[].class, typeInfo.getRawClass()); [EOL] }
public void testParameterizedTypeVariableArrayField() throws Exception { [EOL]     Type listType = new TypeToken<List<Integer>[]>() { [EOL]     }.getType(); [EOL]     Field f = obj.getClass().getField("listOfTypeVariablesArray"); [EOL]     TypeInfo typeInfo = TypeInfoFactory.getTypeInfoForField(f, OBJ_TYPE); [EOL]     assertTrue(typeInfo.isArray()); [EOL]     assertFalse(typeInfo.isEnum()); [EOL]     assertEquals(listType, typeInfo.getActualType()); [EOL]     assertEquals(List[].class, typeInfo.getRawClass()); [EOL] }
public void testParameterizedTypeVariableArrayField() throws Exception { [EOL]     Type listType = new TypeToken<List<Integer>[]>() { [EOL]     }.getType(); [EOL]     Field f = obj.getClass().getField("listOfTypeVariablesArray"); [EOL]     TypeInfo typeInfo = TypeInfoFactory.getTypeInfoForField(f, OBJ_TYPE); [EOL]     assertTrue(typeInfo.isArray()); [EOL]     assertFalse(typeInfo.isEnum()); [EOL]     assertEquals(listType, typeInfo.getActualType()); [EOL]     assertEquals(List[].class, typeInfo.getRawClass()); [EOL] }
public void testParameterizedTypeVariableArrayField() throws Exception { [EOL]     Type listType = new TypeToken<List<Integer>[]>() { [EOL]     }.getType(); [EOL]     Field f = obj.getClass().getField("listOfTypeVariablesArray"); [EOL]     TypeInfo typeInfo = TypeInfoFactory.getTypeInfoForField(f, OBJ_TYPE); [EOL]     assertTrue(typeInfo.isArray()); [EOL]     assertFalse(typeInfo.isEnum()); [EOL]     assertEquals(listType, typeInfo.getActualType()); [EOL]     assertEquals(List[].class, typeInfo.getRawClass()); [EOL] }
public void testParameterizedTypeVariableArrayField() throws Exception { [EOL]     Type listType = new TypeToken<List<Integer>[]>() { [EOL]     }.getType(); [EOL]     Field f = obj.getClass().getField("listOfTypeVariablesArray"); [EOL]     TypeInfo typeInfo = TypeInfoFactory.getTypeInfoForField(f, OBJ_TYPE); [EOL]     assertTrue(typeInfo.isArray()); [EOL]     assertFalse(typeInfo.isEnum()); [EOL]     assertEquals(listType, typeInfo.getActualType()); [EOL]     assertEquals(List[].class, typeInfo.getRawClass()); [EOL] }
public void testParameterizedTypeVariableArrayField() throws Exception { [EOL]     Type listType = new TypeToken<List<Integer>[]>() { [EOL]     }.getType(); [EOL]     Field f = obj.getClass().getField("listOfTypeVariablesArray"); [EOL]     TypeInfo typeInfo = TypeInfoFactory.getTypeInfoForField(f, OBJ_TYPE); [EOL]     assertTrue(typeInfo.isArray()); [EOL]     assertFalse(typeInfo.isEnum()); [EOL]     assertEquals(listType, typeInfo.getActualType()); [EOL]     assertEquals(List[].class, typeInfo.getRawClass()); [EOL] }
public void testCircularSerialization() throws Exception { [EOL]     ContainsReferenceToSelfType a = new ContainsReferenceToSelfType(); [EOL]     ContainsReferenceToSelfType b = new ContainsReferenceToSelfType(); [EOL]     a.children.add(b); [EOL]     b.children.add(a); [EOL]     try { [EOL]         gson.toJson(a); [EOL]         fail("Circular types should not get printed!"); [EOL]     } catch (IllegalStateException expected) { [EOL]         assertTrue(expected.getMessage().contains("children")); [EOL]     } [EOL] }
public void testCircularSerialization() throws Exception { [EOL]     ContainsReferenceToSelfType a = new ContainsReferenceToSelfType(); [EOL]     ContainsReferenceToSelfType b = new ContainsReferenceToSelfType(); [EOL]     a.children.add(b); [EOL]     b.children.add(a); [EOL]     try { [EOL]         gson.toJson(a); [EOL]         fail("Circular types should not get printed!"); [EOL]     } catch (IllegalStateException expected) { [EOL]         assertTrue(expected.getMessage().contains("children")); [EOL]     } [EOL] }
public void testCircularSerialization() throws Exception { [EOL]     ContainsReferenceToSelfType a = new ContainsReferenceToSelfType(); [EOL]     ContainsReferenceToSelfType b = new ContainsReferenceToSelfType(); [EOL]     a.children.add(b); [EOL]     b.children.add(a); [EOL]     try { [EOL]         gson.toJson(a); [EOL]         fail("Circular types should not get printed!"); [EOL]     } catch (IllegalStateException expected) { [EOL]         assertTrue(expected.getMessage().contains("children")); [EOL]     } [EOL] }
public void testCircularSerialization() throws Exception { [EOL]     ContainsReferenceToSelfType a = new ContainsReferenceToSelfType(); [EOL]     ContainsReferenceToSelfType b = new ContainsReferenceToSelfType(); [EOL]     a.children.add(b); [EOL]     b.children.add(a); [EOL]     try { [EOL]         gson.toJson(a); [EOL]         fail("Circular types should not get printed!"); [EOL]     } catch (IllegalStateException expected) { [EOL]         assertTrue(expected.getMessage().contains("children")); [EOL]     } [EOL] }
public void testCircularSerialization() throws Exception { [EOL]     ContainsReferenceToSelfType a = new ContainsReferenceToSelfType(); [EOL]     ContainsReferenceToSelfType b = new ContainsReferenceToSelfType(); [EOL]     a.children.add(b); [EOL]     b.children.add(a); [EOL]     try { [EOL]         gson.toJson(a); [EOL]         fail("Circular types should not get printed!"); [EOL]     } catch (IllegalStateException expected) { [EOL]         assertTrue(expected.getMessage().contains("children")); [EOL]     } [EOL] }
public void testCircularSerialization() throws Exception { [EOL]     ContainsReferenceToSelfType a = new ContainsReferenceToSelfType(); [EOL]     ContainsReferenceToSelfType b = new ContainsReferenceToSelfType(); [EOL]     a.children.add(b); [EOL]     b.children.add(a); [EOL]     try { [EOL]         gson.toJson(a); [EOL]         fail("Circular types should not get printed!"); [EOL]     } catch (IllegalStateException expected) { [EOL]         assertTrue(expected.getMessage().contains("children")); [EOL]     } [EOL] }
public void testCircularSerialization() throws Exception { [EOL]     ContainsReferenceToSelfType a = new ContainsReferenceToSelfType(); [EOL]     ContainsReferenceToSelfType b = new ContainsReferenceToSelfType(); [EOL]     a.children.add(b); [EOL]     b.children.add(a); [EOL]     try { [EOL]         gson.toJson(a); [EOL]         fail("Circular types should not get printed!"); [EOL]     } catch (IllegalStateException expected) { [EOL]         assertTrue(expected.getMessage().contains("children")); [EOL]     } [EOL] }
public void testCircularSerialization() throws Exception { [EOL]     ContainsReferenceToSelfType a = new ContainsReferenceToSelfType(); [EOL]     ContainsReferenceToSelfType b = new ContainsReferenceToSelfType(); [EOL]     a.children.add(b); [EOL]     b.children.add(a); [EOL]     try { [EOL]         gson.toJson(a); [EOL]         fail("Circular types should not get printed!"); [EOL]     } catch (IllegalStateException expected) { [EOL]         assertTrue(expected.getMessage().contains("children")); [EOL]     } [EOL] }
public void testTwoNames() throws IOException { [EOL]     StringWriter stringWriter = new StringWriter(); [EOL]     JsonWriter jsonWriter = new JsonWriter(stringWriter); [EOL]     jsonWriter.beginObject(); [EOL]     jsonWriter.name("a"); [EOL]     try { [EOL]         jsonWriter.name("a"); [EOL]         fail(); [EOL]     } catch (IllegalStateException expected) { [EOL]     } [EOL] }
public void testTwoNames() throws IOException { [EOL]     StringWriter stringWriter = new StringWriter(); [EOL]     JsonWriter jsonWriter = new JsonWriter(stringWriter); [EOL]     jsonWriter.beginObject(); [EOL]     jsonWriter.name("a"); [EOL]     try { [EOL]         jsonWriter.name("a"); [EOL]         fail(); [EOL]     } catch (IllegalStateException expected) { [EOL]     } [EOL] }
public void testTwoNames() throws IOException { [EOL]     StringWriter stringWriter = new StringWriter(); [EOL]     JsonWriter jsonWriter = new JsonWriter(stringWriter); [EOL]     jsonWriter.beginObject(); [EOL]     jsonWriter.name("a"); [EOL]     try { [EOL]         jsonWriter.name("a"); [EOL]         fail(); [EOL]     } catch (IllegalStateException expected) { [EOL]     } [EOL] }
public void testTwoNames() throws IOException { [EOL]     StringWriter stringWriter = new StringWriter(); [EOL]     JsonWriter jsonWriter = new JsonWriter(stringWriter); [EOL]     jsonWriter.beginObject(); [EOL]     jsonWriter.name("a"); [EOL]     try { [EOL]         jsonWriter.name("a"); [EOL]         fail(); [EOL]     } catch (IllegalStateException expected) { [EOL]     } [EOL] }
public void testTwoNames() throws IOException { [EOL]     StringWriter stringWriter = new StringWriter(); [EOL]     JsonWriter jsonWriter = new JsonWriter(stringWriter); [EOL]     jsonWriter.beginObject(); [EOL]     jsonWriter.name("a"); [EOL]     try { [EOL]         jsonWriter.name("a"); [EOL]         fail(); [EOL]     } catch (IllegalStateException expected) { [EOL]     } [EOL] }
public void testTwoNames() throws IOException { [EOL]     StringWriter stringWriter = new StringWriter(); [EOL]     JsonWriter jsonWriter = new JsonWriter(stringWriter); [EOL]     jsonWriter.beginObject(); [EOL]     jsonWriter.name("a"); [EOL]     try { [EOL]         jsonWriter.name("a"); [EOL]         fail(); [EOL]     } catch (IllegalStateException expected) { [EOL]     } [EOL] }
public void testTwoNames() throws IOException { [EOL]     StringWriter stringWriter = new StringWriter(); [EOL]     JsonWriter jsonWriter = new JsonWriter(stringWriter); [EOL]     jsonWriter.beginObject(); [EOL]     jsonWriter.name("a"); [EOL]     try { [EOL]         jsonWriter.name("a"); [EOL]         fail(); [EOL]     } catch (IllegalStateException expected) { [EOL]     } [EOL] }
public void testTwoNames() throws IOException { [EOL]     StringWriter stringWriter = new StringWriter(); [EOL]     JsonWriter jsonWriter = new JsonWriter(stringWriter); [EOL]     jsonWriter.beginObject(); [EOL]     jsonWriter.name("a"); [EOL]     try { [EOL]         jsonWriter.name("a"); [EOL]         fail(); [EOL]     } catch (IllegalStateException expected) { [EOL]     } [EOL] }
public void testTwoNames() throws IOException { [EOL]     StringWriter stringWriter = new StringWriter(); [EOL]     JsonWriter jsonWriter = new JsonWriter(stringWriter); [EOL]     jsonWriter.beginObject(); [EOL]     jsonWriter.name("a"); [EOL]     try { [EOL]         jsonWriter.name("a"); [EOL]         fail(); [EOL]     } catch (IllegalStateException expected) { [EOL]     } [EOL] }
public void testTwoNames() throws IOException { [EOL]     StringWriter stringWriter = new StringWriter(); [EOL]     JsonWriter jsonWriter = new JsonWriter(stringWriter); [EOL]     jsonWriter.beginObject(); [EOL]     jsonWriter.name("a"); [EOL]     try { [EOL]         jsonWriter.name("a"); [EOL]         fail(); [EOL]     } catch (IllegalStateException expected) { [EOL]     } [EOL] }
public void testMultipleTopLevelValues() throws IOException { [EOL]     StringWriter stringWriter = new StringWriter(); [EOL]     JsonWriter jsonWriter = new JsonWriter(stringWriter); [EOL]     jsonWriter.beginArray().endArray(); [EOL]     try { [EOL]         jsonWriter.beginArray(); [EOL]         fail(); [EOL]     } catch (IllegalStateException expected) { [EOL]     } [EOL] }
public void testMultipleTopLevelValues() throws IOException { [EOL]     StringWriter stringWriter = new StringWriter(); [EOL]     JsonWriter jsonWriter = new JsonWriter(stringWriter); [EOL]     jsonWriter.beginArray().endArray(); [EOL]     try { [EOL]         jsonWriter.beginArray(); [EOL]         fail(); [EOL]     } catch (IllegalStateException expected) { [EOL]     } [EOL] }
public void testMultipleTopLevelValues() throws IOException { [EOL]     StringWriter stringWriter = new StringWriter(); [EOL]     JsonWriter jsonWriter = new JsonWriter(stringWriter); [EOL]     jsonWriter.beginArray().endArray(); [EOL]     try { [EOL]         jsonWriter.beginArray(); [EOL]         fail(); [EOL]     } catch (IllegalStateException expected) { [EOL]     } [EOL] }
public void testMultipleTopLevelValues() throws IOException { [EOL]     StringWriter stringWriter = new StringWriter(); [EOL]     JsonWriter jsonWriter = new JsonWriter(stringWriter); [EOL]     jsonWriter.beginArray().endArray(); [EOL]     try { [EOL]         jsonWriter.beginArray(); [EOL]         fail(); [EOL]     } catch (IllegalStateException expected) { [EOL]     } [EOL] }
public void testMultipleTopLevelValues() throws IOException { [EOL]     StringWriter stringWriter = new StringWriter(); [EOL]     JsonWriter jsonWriter = new JsonWriter(stringWriter); [EOL]     jsonWriter.beginArray().endArray(); [EOL]     try { [EOL]         jsonWriter.beginArray(); [EOL]         fail(); [EOL]     } catch (IllegalStateException expected) { [EOL]     } [EOL] }
public void testMultipleTopLevelValues() throws IOException { [EOL]     StringWriter stringWriter = new StringWriter(); [EOL]     JsonWriter jsonWriter = new JsonWriter(stringWriter); [EOL]     jsonWriter.beginArray().endArray(); [EOL]     try { [EOL]         jsonWriter.beginArray(); [EOL]         fail(); [EOL]     } catch (IllegalStateException expected) { [EOL]     } [EOL] }
public void testFieldNamingPolicy() throws Exception { [EOL]     FieldAttributes f = new FieldAttributes(String.class, String.class.getFields()[0]); [EOL]     assertEquals(f.getName(), namingPolicy.translateName(f)); [EOL] }
public void testFieldNamingPolicy() throws Exception { [EOL]     FieldAttributes f = new FieldAttributes(String.class, String.class.getFields()[0]); [EOL]     assertEquals(f.getName(), namingPolicy.translateName(f)); [EOL] }
public void testStringArray() throws Exception { [EOL]     TypeInfoArray arrayTypeInfo = new TypeInfoArray(String[].class); [EOL]     assertTrue(arrayTypeInfo.isArray()); [EOL]     assertEquals(String.class, arrayTypeInfo.getSecondLevelType()); [EOL]     assertEquals(String[].class, arrayTypeInfo.getRawClass()); [EOL] }
public void testStringArray() throws Exception { [EOL]     TypeInfoArray arrayTypeInfo = new TypeInfoArray(String[].class); [EOL]     assertTrue(arrayTypeInfo.isArray()); [EOL]     assertEquals(String.class, arrayTypeInfo.getSecondLevelType()); [EOL]     assertEquals(String[].class, arrayTypeInfo.getRawClass()); [EOL] }
public void testStringArray() throws Exception { [EOL]     TypeInfoArray arrayTypeInfo = new TypeInfoArray(String[].class); [EOL]     assertTrue(arrayTypeInfo.isArray()); [EOL]     assertEquals(String.class, arrayTypeInfo.getSecondLevelType()); [EOL]     assertEquals(String[].class, arrayTypeInfo.getRawClass()); [EOL] }
public void testStringArray() throws Exception { [EOL]     TypeInfoArray arrayTypeInfo = new TypeInfoArray(String[].class); [EOL]     assertTrue(arrayTypeInfo.isArray()); [EOL]     assertEquals(String.class, arrayTypeInfo.getSecondLevelType()); [EOL]     assertEquals(String[].class, arrayTypeInfo.getRawClass()); [EOL] }
public void testStringArray() throws Exception { [EOL]     TypeInfoArray arrayTypeInfo = new TypeInfoArray(String[].class); [EOL]     assertTrue(arrayTypeInfo.isArray()); [EOL]     assertEquals(String.class, arrayTypeInfo.getSecondLevelType()); [EOL]     assertEquals(String[].class, arrayTypeInfo.getRawClass()); [EOL] }
public void testStringArray() throws Exception { [EOL]     TypeInfoArray arrayTypeInfo = new TypeInfoArray(String[].class); [EOL]     assertTrue(arrayTypeInfo.isArray()); [EOL]     assertEquals(String.class, arrayTypeInfo.getSecondLevelType()); [EOL]     assertEquals(String[].class, arrayTypeInfo.getRawClass()); [EOL] }
public void testUnicodeCharacterStringNoEscaping() throws Exception { [EOL]     String unicodeString = "\u0065\u0066"; [EOL]     String escapedString = escapeHtmlChar.escapeJsonString(unicodeString); [EOL]     assertEquals(unicodeString, escapedString); [EOL] }
public void testUnicodeCharacterStringNoEscaping() throws Exception { [EOL]     String unicodeString = "\u0065\u0066"; [EOL]     String escapedString = escapeHtmlChar.escapeJsonString(unicodeString); [EOL]     assertEquals(unicodeString, escapedString); [EOL] }
public void testUnicodeCharacterStringNoEscaping() throws Exception { [EOL]     String unicodeString = "\u0065\u0066"; [EOL]     String escapedString = escapeHtmlChar.escapeJsonString(unicodeString); [EOL]     assertEquals(unicodeString, escapedString); [EOL] }
public void testUnicodeCharacterStringNoEscaping() throws Exception { [EOL]     String unicodeString = "\u0065\u0066"; [EOL]     String escapedString = escapeHtmlChar.escapeJsonString(unicodeString); [EOL]     assertEquals(unicodeString, escapedString); [EOL] }
public void testUnicodeCharacterStringNoEscaping() throws Exception { [EOL]     String unicodeString = "\u0065\u0066"; [EOL]     String escapedString = escapeHtmlChar.escapeJsonString(unicodeString); [EOL]     assertEquals(unicodeString, escapedString); [EOL] }
public void testUnicodeCharacterStringNoEscaping() throws Exception { [EOL]     String unicodeString = "\u0065\u0066"; [EOL]     String escapedString = escapeHtmlChar.escapeJsonString(unicodeString); [EOL]     assertEquals(unicodeString, escapedString); [EOL] }
public void testUnicodeCharacterStringNoEscaping() throws Exception { [EOL]     String unicodeString = "\u0065\u0066"; [EOL]     String escapedString = escapeHtmlChar.escapeJsonString(unicodeString); [EOL]     assertEquals(unicodeString, escapedString); [EOL] }
public void testUnicodeCharacterStringNoEscaping() throws Exception { [EOL]     String unicodeString = "\u0065\u0066"; [EOL]     String escapedString = escapeHtmlChar.escapeJsonString(unicodeString); [EOL]     assertEquals(unicodeString, escapedString); [EOL] }
public void testUnicodeCharacterStringNoEscaping() throws Exception { [EOL]     String unicodeString = "\u0065\u0066"; [EOL]     String escapedString = escapeHtmlChar.escapeJsonString(unicodeString); [EOL]     assertEquals(unicodeString, escapedString); [EOL] }
public void testUnicodeCharacterStringNoEscaping() throws Exception { [EOL]     String unicodeString = "\u0065\u0066"; [EOL]     String escapedString = escapeHtmlChar.escapeJsonString(unicodeString); [EOL]     assertEquals(unicodeString, escapedString); [EOL] }
public void testUnicodeCharacterStringNoEscaping() throws Exception { [EOL]     String unicodeString = "\u0065\u0066"; [EOL]     String escapedString = escapeHtmlChar.escapeJsonString(unicodeString); [EOL]     assertEquals(unicodeString, escapedString); [EOL] }
public void testUnicodeCharacterStringNoEscaping() throws Exception { [EOL]     String unicodeString = "\u0065\u0066"; [EOL]     String escapedString = escapeHtmlChar.escapeJsonString(unicodeString); [EOL]     assertEquals(unicodeString, escapedString); [EOL] }
public void testUnicodeCharacterStringNoEscaping() throws Exception { [EOL]     String unicodeString = "\u0065\u0066"; [EOL]     String escapedString = escapeHtmlChar.escapeJsonString(unicodeString); [EOL]     assertEquals(unicodeString, escapedString); [EOL] }
public void testUnicodeCharacterStringNoEscaping() throws Exception { [EOL]     String unicodeString = "\u0065\u0066"; [EOL]     String escapedString = escapeHtmlChar.escapeJsonString(unicodeString); [EOL]     assertEquals(unicodeString, escapedString); [EOL] }
public void testUnicodeCharacterStringNoEscaping() throws Exception { [EOL]     String unicodeString = "\u0065\u0066"; [EOL]     String escapedString = escapeHtmlChar.escapeJsonString(unicodeString); [EOL]     assertEquals(unicodeString, escapedString); [EOL] }
public void testUnicodeCharacterStringNoEscaping() throws Exception { [EOL]     String unicodeString = "\u0065\u0066"; [EOL]     String escapedString = escapeHtmlChar.escapeJsonString(unicodeString); [EOL]     assertEquals(unicodeString, escapedString); [EOL] }
public void testUnicodeCharacterStringNoEscaping() throws Exception { [EOL]     String unicodeString = "\u0065\u0066"; [EOL]     String escapedString = escapeHtmlChar.escapeJsonString(unicodeString); [EOL]     assertEquals(unicodeString, escapedString); [EOL] }
public void testUnicodeCharacterStringNoEscaping() throws Exception { [EOL]     String unicodeString = "\u0065\u0066"; [EOL]     String escapedString = escapeHtmlChar.escapeJsonString(unicodeString); [EOL]     assertEquals(unicodeString, escapedString); [EOL] }
public void testUnicodeCharacterStringNoEscaping() throws Exception { [EOL]     String unicodeString = "\u0065\u0066"; [EOL]     String escapedString = escapeHtmlChar.escapeJsonString(unicodeString); [EOL]     assertEquals(unicodeString, escapedString); [EOL] }
public void testUnicodeCharacterStringNoEscaping() throws Exception { [EOL]     String unicodeString = "\u0065\u0066"; [EOL]     String escapedString = escapeHtmlChar.escapeJsonString(unicodeString); [EOL]     assertEquals(unicodeString, escapedString); [EOL] }
public void testUnicodeCharacterStringNoEscaping() throws Exception { [EOL]     String unicodeString = "\u0065\u0066"; [EOL]     String escapedString = escapeHtmlChar.escapeJsonString(unicodeString); [EOL]     assertEquals(unicodeString, escapedString); [EOL] }
public void testUnicodeCharacterStringNoEscaping() throws Exception { [EOL]     String unicodeString = "\u0065\u0066"; [EOL]     String escapedString = escapeHtmlChar.escapeJsonString(unicodeString); [EOL]     assertEquals(unicodeString, escapedString); [EOL] }
public void testPrematureEndOfInput() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("{\"a\":true,")); [EOL]     reader.beginObject(); [EOL]     assertEquals("a", reader.nextName()); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL]     try { [EOL]         reader.nextName(); [EOL]         fail(); [EOL]     } catch (IOException expected) { [EOL]     } [EOL] }
public void testPrematureEndOfInput() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("{\"a\":true,")); [EOL]     reader.beginObject(); [EOL]     assertEquals("a", reader.nextName()); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL]     try { [EOL]         reader.nextName(); [EOL]         fail(); [EOL]     } catch (IOException expected) { [EOL]     } [EOL] }
public void testPrematureEndOfInput() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("{\"a\":true,")); [EOL]     reader.beginObject(); [EOL]     assertEquals("a", reader.nextName()); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL]     try { [EOL]         reader.nextName(); [EOL]         fail(); [EOL]     } catch (IOException expected) { [EOL]     } [EOL] }
public void testPrematureEndOfInput() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("{\"a\":true,")); [EOL]     reader.beginObject(); [EOL]     assertEquals("a", reader.nextName()); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL]     try { [EOL]         reader.nextName(); [EOL]         fail(); [EOL]     } catch (IOException expected) { [EOL]     } [EOL] }
public void testPrematureEndOfInput() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("{\"a\":true,")); [EOL]     reader.beginObject(); [EOL]     assertEquals("a", reader.nextName()); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL]     try { [EOL]         reader.nextName(); [EOL]         fail(); [EOL]     } catch (IOException expected) { [EOL]     } [EOL] }
public void testPrematureEndOfInput() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("{\"a\":true,")); [EOL]     reader.beginObject(); [EOL]     assertEquals("a", reader.nextName()); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL]     try { [EOL]         reader.nextName(); [EOL]         fail(); [EOL]     } catch (IOException expected) { [EOL]     } [EOL] }
public void testPrematureEndOfInput() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("{\"a\":true,")); [EOL]     reader.beginObject(); [EOL]     assertEquals("a", reader.nextName()); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL]     try { [EOL]         reader.nextName(); [EOL]         fail(); [EOL]     } catch (IOException expected) { [EOL]     } [EOL] }
public void testPrematureEndOfInput() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("{\"a\":true,")); [EOL]     reader.beginObject(); [EOL]     assertEquals("a", reader.nextName()); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL]     try { [EOL]         reader.nextName(); [EOL]         fail(); [EOL]     } catch (IOException expected) { [EOL]     } [EOL] }
public void testPrematureEndOfInput() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("{\"a\":true,")); [EOL]     reader.beginObject(); [EOL]     assertEquals("a", reader.nextName()); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL]     try { [EOL]         reader.nextName(); [EOL]         fail(); [EOL]     } catch (IOException expected) { [EOL]     } [EOL] }
public void testPrematureEndOfInput() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("{\"a\":true,")); [EOL]     reader.beginObject(); [EOL]     assertEquals("a", reader.nextName()); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL]     try { [EOL]         reader.nextName(); [EOL]         fail(); [EOL]     } catch (IOException expected) { [EOL]     } [EOL] }
public void testPrematureEndOfInput() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("{\"a\":true,")); [EOL]     reader.beginObject(); [EOL]     assertEquals("a", reader.nextName()); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL]     try { [EOL]         reader.nextName(); [EOL]         fail(); [EOL]     } catch (IOException expected) { [EOL]     } [EOL] }
public void testLenientSingleQuotedStrings() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("['a']")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     assertEquals("a", reader.nextString()); [EOL] }
public void testLenientSingleQuotedStrings() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("['a']")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     assertEquals("a", reader.nextString()); [EOL] }
public void testLenientSingleQuotedStrings() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("['a']")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     assertEquals("a", reader.nextString()); [EOL] }
public void testLenientSingleQuotedStrings() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("['a']")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     assertEquals("a", reader.nextString()); [EOL] }
public void testLenientSingleQuotedStrings() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("['a']")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     assertEquals("a", reader.nextString()); [EOL] }
public void testPrematureEndOfInput() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("{\"a\":true,")); [EOL]     reader.beginObject(); [EOL]     assertEquals("a", reader.nextName()); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL]     try { [EOL]         reader.nextName(); [EOL]         fail(); [EOL]     } catch (IOException expected) { [EOL]     } [EOL] }
public void testPrematureEndOfInput() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("{\"a\":true,")); [EOL]     reader.beginObject(); [EOL]     assertEquals("a", reader.nextName()); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL]     try { [EOL]         reader.nextName(); [EOL]         fail(); [EOL]     } catch (IOException expected) { [EOL]     } [EOL] }
public void testStrictSingleQuotedStrings() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("['a']")); [EOL]     reader.beginArray(); [EOL]     try { [EOL]         reader.nextString(); [EOL]         fail(); [EOL]     } catch (IOException expected) { [EOL]     } [EOL] }
public void testStrictSingleQuotedStrings() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("['a']")); [EOL]     reader.beginArray(); [EOL]     try { [EOL]         reader.nextString(); [EOL]         fail(); [EOL]     } catch (IOException expected) { [EOL]     } [EOL] }
public void testStrictSingleQuotedStrings() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("['a']")); [EOL]     reader.beginArray(); [EOL]     try { [EOL]         reader.nextString(); [EOL]         fail(); [EOL]     } catch (IOException expected) { [EOL]     } [EOL] }
public void testStrictSingleQuotedStrings() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("['a']")); [EOL]     reader.beginArray(); [EOL]     try { [EOL]         reader.nextString(); [EOL]         fail(); [EOL]     } catch (IOException expected) { [EOL]     } [EOL] }
public void testStrictSingleQuotedStrings() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("['a']")); [EOL]     reader.beginArray(); [EOL]     try { [EOL]         reader.nextString(); [EOL]         fail(); [EOL]     } catch (IOException expected) { [EOL]     } [EOL] }
public void testStrictSingleQuotedStrings() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("['a']")); [EOL]     reader.beginArray(); [EOL]     try { [EOL]         reader.nextString(); [EOL]         fail(); [EOL]     } catch (IOException expected) { [EOL]     } [EOL] }
public void testPrematureEndOfInput() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("{\"a\":true,")); [EOL]     reader.beginObject(); [EOL]     assertEquals("a", reader.nextName()); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL]     try { [EOL]         reader.nextName(); [EOL]         fail(); [EOL]     } catch (IOException expected) { [EOL]     } [EOL] }
public void testLenientMultipleTopLevelValues() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("[] true {}")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     reader.endArray(); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL]     reader.beginObject(); [EOL]     reader.endObject(); [EOL]     assertEquals(JsonToken.END_DOCUMENT, reader.peek()); [EOL] }
public void testLenientUnquotedStrings() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("[a]")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     assertEquals("a", reader.nextString()); [EOL] }
public void testLenientUnquotedStrings() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("[a]")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     assertEquals("a", reader.nextString()); [EOL] }
public void testLenientUnquotedStrings() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("[a]")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     assertEquals("a", reader.nextString()); [EOL] }
public void testLenientUnquotedStrings() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("[a]")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     assertEquals("a", reader.nextString()); [EOL] }
public void testLenientUnquotedStrings() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("[a]")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     assertEquals("a", reader.nextString()); [EOL] }
public void testStrictSingleQuotedStrings() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("['a']")); [EOL]     reader.beginArray(); [EOL]     try { [EOL]         reader.nextString(); [EOL]         fail(); [EOL]     } catch (IOException expected) { [EOL]     } [EOL] }
public void testStrictSingleQuotedStrings() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("['a']")); [EOL]     reader.beginArray(); [EOL]     try { [EOL]         reader.nextString(); [EOL]         fail(); [EOL]     } catch (IOException expected) { [EOL]     } [EOL] }
public void testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization() { [EOL]     Gson gson = gsonBuilder.generateNonExecutableJson().create(); [EOL]     String json = JSON_NON_EXECUTABLE_PREFIX + "{intValue:2,stringValue:')]}\\u0027\\n'}"; [EOL]     BagOfPrimitives target = gson.fromJson(json, BagOfPrimitives.class); [EOL]     assertEquals(")]}'\n", target.stringValue); [EOL]     assertEquals(2, target.intValue); [EOL] }
public void testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization() { [EOL]     Gson gson = gsonBuilder.generateNonExecutableJson().create(); [EOL]     String json = JSON_NON_EXECUTABLE_PREFIX + "{intValue:2,stringValue:')]}\\u0027\\n'}"; [EOL]     BagOfPrimitives target = gson.fromJson(json, BagOfPrimitives.class); [EOL]     assertEquals(")]}'\n", target.stringValue); [EOL]     assertEquals(2, target.intValue); [EOL] }
public void testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization() { [EOL]     Gson gson = gsonBuilder.generateNonExecutableJson().create(); [EOL]     String json = JSON_NON_EXECUTABLE_PREFIX + "{intValue:2,stringValue:')]}\\u0027\\n'}"; [EOL]     BagOfPrimitives target = gson.fromJson(json, BagOfPrimitives.class); [EOL]     assertEquals(")]}'\n", target.stringValue); [EOL]     assertEquals(2, target.intValue); [EOL] }
public void testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization() { [EOL]     Gson gson = gsonBuilder.generateNonExecutableJson().create(); [EOL]     String json = JSON_NON_EXECUTABLE_PREFIX + "{intValue:2,stringValue:')]}\\u0027\\n'}"; [EOL]     BagOfPrimitives target = gson.fromJson(json, BagOfPrimitives.class); [EOL]     assertEquals(")]}'\n", target.stringValue); [EOL]     assertEquals(2, target.intValue); [EOL] }
public void testJsonWithNonExectuableTokenWithConfiguredGsonDeserialization() { [EOL]     Gson gson = gsonBuilder.generateNonExecutableJson().create(); [EOL]     String json = JSON_NON_EXECUTABLE_PREFIX + "{intValue:2,stringValue:')]}\\u0027\\n'}"; [EOL]     BagOfPrimitives target = gson.fromJson(json, BagOfPrimitives.class); [EOL]     assertEquals(")]}'\n", target.stringValue); [EOL]     assertEquals(2, target.intValue); [EOL] }
public void testProperSerialization() throws Exception { [EOL]     DefaultDateTypeAdapter dateSerializer = new DefaultDateTypeAdapter(DateFormat.LONG); [EOL]     JsonDeserializerExceptionWrapper<Date> wrappedJsonSerializer = new JsonDeserializerExceptionWrapper<Date>(dateSerializer); [EOL]     Date expected = dateSerializer.deserialize(PRIMITIVE_ELEMENT, Date.class, null); [EOL]     Date actual = wrappedJsonSerializer.deserialize(PRIMITIVE_ELEMENT, Date.class, null); [EOL]     assertEquals(expected, actual); [EOL] }
public void testProperSerialization() throws Exception { [EOL]     DefaultDateTypeAdapter dateSerializer = new DefaultDateTypeAdapter(DateFormat.LONG); [EOL]     JsonDeserializerExceptionWrapper<Date> wrappedJsonSerializer = new JsonDeserializerExceptionWrapper<Date>(dateSerializer); [EOL]     Date expected = dateSerializer.deserialize(PRIMITIVE_ELEMENT, Date.class, null); [EOL]     Date actual = wrappedJsonSerializer.deserialize(PRIMITIVE_ELEMENT, Date.class, null); [EOL]     assertEquals(expected, actual); [EOL] }
public void testProperSerialization() throws Exception { [EOL]     DefaultDateTypeAdapter dateSerializer = new DefaultDateTypeAdapter(DateFormat.LONG); [EOL]     JsonDeserializerExceptionWrapper<Date> wrappedJsonSerializer = new JsonDeserializerExceptionWrapper<Date>(dateSerializer); [EOL]     Date expected = dateSerializer.deserialize(PRIMITIVE_ELEMENT, Date.class, null); [EOL]     Date actual = wrappedJsonSerializer.deserialize(PRIMITIVE_ELEMENT, Date.class, null); [EOL]     assertEquals(expected, actual); [EOL] }
public void testProperSerialization() throws Exception { [EOL]     DefaultDateTypeAdapter dateSerializer = new DefaultDateTypeAdapter(DateFormat.LONG); [EOL]     JsonDeserializerExceptionWrapper<Date> wrappedJsonSerializer = new JsonDeserializerExceptionWrapper<Date>(dateSerializer); [EOL]     Date expected = dateSerializer.deserialize(PRIMITIVE_ELEMENT, Date.class, null); [EOL]     Date actual = wrappedJsonSerializer.deserialize(PRIMITIVE_ELEMENT, Date.class, null); [EOL]     assertEquals(expected, actual); [EOL] }
public void testDefaultJavaSqlDateSerialization() { [EOL]     java.sql.Date instant = new java.sql.Date(1259875082000L); [EOL]     String json = gson.toJson(instant); [EOL]     assertEquals("\"Dec 3, 2009\"", json); [EOL] }
public void testDefaultJavaSqlDateSerialization() { [EOL]     java.sql.Date instant = new java.sql.Date(1259875082000L); [EOL]     String json = gson.toJson(instant); [EOL]     assertEquals("\"Dec 3, 2009\"", json); [EOL] }
public void testUrlSerialization() throws Exception { [EOL]     String urlValue = "http://google.com/"; [EOL]     URL url = new URL(urlValue); [EOL]     assertEquals("\"http://google.com/\"", gson.toJson(url)); [EOL] }
public void testPropertiesDeserialization() { [EOL]     String json = "{foo:'bar'}"; [EOL]     Properties props = gson.fromJson(json, Properties.class); [EOL]     assertEquals("bar", props.getProperty("foo")); [EOL] }
public void testPropertiesDeserialization() { [EOL]     String json = "{foo:'bar'}"; [EOL]     Properties props = gson.fromJson(json, Properties.class); [EOL]     assertEquals("bar", props.getProperty("foo")); [EOL] }
public void testPropertiesDeserialization() { [EOL]     String json = "{foo:'bar'}"; [EOL]     Properties props = gson.fromJson(json, Properties.class); [EOL]     assertEquals("bar", props.getProperty("foo")); [EOL] }
public void testPropertiesDeserialization() { [EOL]     String json = "{foo:'bar'}"; [EOL]     Properties props = gson.fromJson(json, Properties.class); [EOL]     assertEquals("bar", props.getProperty("foo")); [EOL] }
public void testPropertiesDeserialization() { [EOL]     String json = "{foo:'bar'}"; [EOL]     Properties props = gson.fromJson(json, Properties.class); [EOL]     assertEquals("bar", props.getProperty("foo")); [EOL] }
public void testPropertiesDeserialization() { [EOL]     String json = "{foo:'bar'}"; [EOL]     Properties props = gson.fromJson(json, Properties.class); [EOL]     assertEquals("bar", props.getProperty("foo")); [EOL] }
public void testPropertiesDeserialization() { [EOL]     String json = "{foo:'bar'}"; [EOL]     Properties props = gson.fromJson(json, Properties.class); [EOL]     assertEquals("bar", props.getProperty("foo")); [EOL] }
public void testBigDecimalFieldSerialization() { [EOL]     ClassWithBigDecimal target = new ClassWithBigDecimal("-122.01e-21"); [EOL]     String json = gson.toJson(target); [EOL]     String actual = json.substring(json.indexOf(':') + 1, json.indexOf('}')); [EOL]     assertEquals(target.value, new BigDecimal(actual)); [EOL] }
public void testBigDecimalFieldSerialization() { [EOL]     ClassWithBigDecimal target = new ClassWithBigDecimal("-122.01e-21"); [EOL]     String json = gson.toJson(target); [EOL]     String actual = json.substring(json.indexOf(':') + 1, json.indexOf('}')); [EOL]     assertEquals(target.value, new BigDecimal(actual)); [EOL] }
public void testBadValueForBigIntegerDeserialization() { [EOL]     try { [EOL]         gson.fromJson("15.099", BigInteger.class); [EOL]         fail("BigInteger can not be decimal values."); [EOL]     } catch (JsonParseException expected) { [EOL]     } [EOL] }
public void testNumberDeserialization() { [EOL]     String json = "1"; [EOL]     Number expected = new Integer(json); [EOL]     Number actual = gson.fromJson(json, Number.class); [EOL]     assertEquals(expected.intValue(), actual.intValue()); [EOL]     json = String.valueOf(Long.MAX_VALUE); [EOL]     expected = new Long(json); [EOL]     actual = gson.fromJson(json, Number.class); [EOL]     assertEquals(expected.longValue(), actual.longValue()); [EOL] }
public void testNumberDeserialization() { [EOL]     String json = "1"; [EOL]     Number expected = new Integer(json); [EOL]     Number actual = gson.fromJson(json, Number.class); [EOL]     assertEquals(expected.intValue(), actual.intValue()); [EOL]     json = String.valueOf(Long.MAX_VALUE); [EOL]     expected = new Long(json); [EOL]     actual = gson.fromJson(json, Number.class); [EOL]     assertEquals(expected.longValue(), actual.longValue()); [EOL] }
public void testNumberDeserialization() { [EOL]     String json = "1"; [EOL]     Number expected = new Integer(json); [EOL]     Number actual = gson.fromJson(json, Number.class); [EOL]     assertEquals(expected.intValue(), actual.intValue()); [EOL]     json = String.valueOf(Long.MAX_VALUE); [EOL]     expected = new Long(json); [EOL]     actual = gson.fromJson(json, Number.class); [EOL]     assertEquals(expected.longValue(), actual.longValue()); [EOL] }
public void testEscapingObjectFields() throws Exception { [EOL]     BagOfPrimitives objWithPrimitives = new BagOfPrimitives(1L, 1, true, "test with\" <script>"); [EOL]     String jsonRepresentation = gson.toJson(objWithPrimitives); [EOL]     assertFalse(jsonRepresentation.contains("<")); [EOL]     assertFalse(jsonRepresentation.contains(">")); [EOL]     assertTrue(jsonRepresentation.contains("\\\"")); [EOL]     BagOfPrimitives expectedObject = gson.fromJson(jsonRepresentation, BagOfPrimitives.class); [EOL]     assertEquals(objWithPrimitives.getExpectedJson(), expectedObject.getExpectedJson()); [EOL] }
public void testEscapingObjectFields() throws Exception { [EOL]     BagOfPrimitives objWithPrimitives = new BagOfPrimitives(1L, 1, true, "test with\" <script>"); [EOL]     String jsonRepresentation = gson.toJson(objWithPrimitives); [EOL]     assertFalse(jsonRepresentation.contains("<")); [EOL]     assertFalse(jsonRepresentation.contains(">")); [EOL]     assertTrue(jsonRepresentation.contains("\\\"")); [EOL]     BagOfPrimitives expectedObject = gson.fromJson(jsonRepresentation, BagOfPrimitives.class); [EOL]     assertEquals(objWithPrimitives.getExpectedJson(), expectedObject.getExpectedJson()); [EOL] }
public void testEscapingObjectFields() throws Exception { [EOL]     BagOfPrimitives objWithPrimitives = new BagOfPrimitives(1L, 1, true, "test with\" <script>"); [EOL]     String jsonRepresentation = gson.toJson(objWithPrimitives); [EOL]     assertFalse(jsonRepresentation.contains("<")); [EOL]     assertFalse(jsonRepresentation.contains(">")); [EOL]     assertTrue(jsonRepresentation.contains("\\\"")); [EOL]     BagOfPrimitives expectedObject = gson.fromJson(jsonRepresentation, BagOfPrimitives.class); [EOL]     assertEquals(objWithPrimitives.getExpectedJson(), expectedObject.getExpectedJson()); [EOL] }
public void testEscapingObjectFields() throws Exception { [EOL]     BagOfPrimitives objWithPrimitives = new BagOfPrimitives(1L, 1, true, "test with\" <script>"); [EOL]     String jsonRepresentation = gson.toJson(objWithPrimitives); [EOL]     assertFalse(jsonRepresentation.contains("<")); [EOL]     assertFalse(jsonRepresentation.contains(">")); [EOL]     assertTrue(jsonRepresentation.contains("\\\"")); [EOL]     BagOfPrimitives expectedObject = gson.fromJson(jsonRepresentation, BagOfPrimitives.class); [EOL]     assertEquals(objWithPrimitives.getExpectedJson(), expectedObject.getExpectedJson()); [EOL] }
public void testEscapingObjectFields() throws Exception { [EOL]     BagOfPrimitives objWithPrimitives = new BagOfPrimitives(1L, 1, true, "test with\" <script>"); [EOL]     String jsonRepresentation = gson.toJson(objWithPrimitives); [EOL]     assertFalse(jsonRepresentation.contains("<")); [EOL]     assertFalse(jsonRepresentation.contains(">")); [EOL]     assertTrue(jsonRepresentation.contains("\\\"")); [EOL]     BagOfPrimitives expectedObject = gson.fromJson(jsonRepresentation, BagOfPrimitives.class); [EOL]     assertEquals(objWithPrimitives.getExpectedJson(), expectedObject.getExpectedJson()); [EOL] }
public void testFloatInfinitySerialization() { [EOL]     Gson gson = new GsonBuilder().serializeSpecialFloatingPointValues().create(); [EOL]     float infinity = Float.POSITIVE_INFINITY; [EOL]     assertEquals("Infinity", gson.toJson(infinity)); [EOL]     assertEquals("Infinity", gson.toJson(Float.POSITIVE_INFINITY)); [EOL] }
public void testFloatInfinitySerialization() { [EOL]     Gson gson = new GsonBuilder().serializeSpecialFloatingPointValues().create(); [EOL]     float infinity = Float.POSITIVE_INFINITY; [EOL]     assertEquals("Infinity", gson.toJson(infinity)); [EOL]     assertEquals("Infinity", gson.toJson(Float.POSITIVE_INFINITY)); [EOL] }
public void testFloatInfinitySerialization() { [EOL]     Gson gson = new GsonBuilder().serializeSpecialFloatingPointValues().create(); [EOL]     float infinity = Float.POSITIVE_INFINITY; [EOL]     assertEquals("Infinity", gson.toJson(infinity)); [EOL]     assertEquals("Infinity", gson.toJson(Float.POSITIVE_INFINITY)); [EOL] }
public void testFloatInfinitySerialization() { [EOL]     Gson gson = new GsonBuilder().serializeSpecialFloatingPointValues().create(); [EOL]     float infinity = Float.POSITIVE_INFINITY; [EOL]     assertEquals("Infinity", gson.toJson(infinity)); [EOL]     assertEquals("Infinity", gson.toJson(Float.POSITIVE_INFINITY)); [EOL] }
public void testFloatInfinitySerialization() { [EOL]     Gson gson = new GsonBuilder().serializeSpecialFloatingPointValues().create(); [EOL]     float infinity = Float.POSITIVE_INFINITY; [EOL]     assertEquals("Infinity", gson.toJson(infinity)); [EOL]     assertEquals("Infinity", gson.toJson(Float.POSITIVE_INFINITY)); [EOL] }
public void testSubInterfacesOfCollectionSerialization() throws Exception { [EOL]     List<Integer> list = new LinkedList<Integer>(); [EOL]     list.add(0); [EOL]     list.add(1); [EOL]     list.add(2); [EOL]     list.add(3); [EOL]     Queue<Long> queue = new LinkedList<Long>(); [EOL]     queue.add(0L); [EOL]     queue.add(1L); [EOL]     queue.add(2L); [EOL]     queue.add(3L); [EOL]     Set<Float> set = new TreeSet<Float>(); [EOL]     set.add(0.1F); [EOL]     set.add(0.2F); [EOL]     set.add(0.3F); [EOL]     set.add(0.4F); [EOL]     SortedSet<Character> sortedSet = new TreeSet<Character>(); [EOL]     sortedSet.add('a'); [EOL]     sortedSet.add('b'); [EOL]     sortedSet.add('c'); [EOL]     sortedSet.add('d'); [EOL]     ClassWithSubInterfacesOfCollection target = new ClassWithSubInterfacesOfCollection(list, queue, set, sortedSet); [EOL]     assertEquals(target.getExpectedJson(), gson.toJson(target)); [EOL] }
public void testPropertiesDeserialization() { [EOL]     String json = "{foo:'bar'}"; [EOL]     Properties props = gson.fromJson(json, Properties.class); [EOL]     assertEquals("bar", props.getProperty("foo")); [EOL] }
public void testPropertiesDeserialization() { [EOL]     String json = "{foo:'bar'}"; [EOL]     Properties props = gson.fromJson(json, Properties.class); [EOL]     assertEquals("bar", props.getProperty("foo")); [EOL] }
public void testPropertiesDeserialization() { [EOL]     String json = "{foo:'bar'}"; [EOL]     Properties props = gson.fromJson(json, Properties.class); [EOL]     assertEquals("bar", props.getProperty("foo")); [EOL] }
public void testEscapingObjectFields() throws Exception { [EOL]     BagOfPrimitives objWithPrimitives = new BagOfPrimitives(1L, 1, true, "test with\" <script>"); [EOL]     String jsonRepresentation = gson.toJson(objWithPrimitives); [EOL]     assertFalse(jsonRepresentation.contains("<")); [EOL]     assertFalse(jsonRepresentation.contains(">")); [EOL]     assertTrue(jsonRepresentation.contains("\\\"")); [EOL]     BagOfPrimitives expectedObject = gson.fromJson(jsonRepresentation, BagOfPrimitives.class); [EOL]     assertEquals(objWithPrimitives.getExpectedJson(), expectedObject.getExpectedJson()); [EOL] }
public void testEscapingObjectFields() throws Exception { [EOL]     BagOfPrimitives objWithPrimitives = new BagOfPrimitives(1L, 1, true, "test with\" <script>"); [EOL]     String jsonRepresentation = gson.toJson(objWithPrimitives); [EOL]     assertFalse(jsonRepresentation.contains("<")); [EOL]     assertFalse(jsonRepresentation.contains(">")); [EOL]     assertTrue(jsonRepresentation.contains("\\\"")); [EOL]     BagOfPrimitives expectedObject = gson.fromJson(jsonRepresentation, BagOfPrimitives.class); [EOL]     assertEquals(objWithPrimitives.getExpectedJson(), expectedObject.getExpectedJson()); [EOL] }
public void testEscapingObjectFields() throws Exception { [EOL]     BagOfPrimitives objWithPrimitives = new BagOfPrimitives(1L, 1, true, "test with\" <script>"); [EOL]     String jsonRepresentation = gson.toJson(objWithPrimitives); [EOL]     assertFalse(jsonRepresentation.contains("<")); [EOL]     assertFalse(jsonRepresentation.contains(">")); [EOL]     assertTrue(jsonRepresentation.contains("\\\"")); [EOL]     BagOfPrimitives expectedObject = gson.fromJson(jsonRepresentation, BagOfPrimitives.class); [EOL]     assertEquals(objWithPrimitives.getExpectedJson(), expectedObject.getExpectedJson()); [EOL] }
public void testEscapingObjectFields() throws Exception { [EOL]     BagOfPrimitives objWithPrimitives = new BagOfPrimitives(1L, 1, true, "test with\" <script>"); [EOL]     String jsonRepresentation = gson.toJson(objWithPrimitives); [EOL]     assertFalse(jsonRepresentation.contains("<")); [EOL]     assertFalse(jsonRepresentation.contains(">")); [EOL]     assertTrue(jsonRepresentation.contains("\\\"")); [EOL]     BagOfPrimitives expectedObject = gson.fromJson(jsonRepresentation, BagOfPrimitives.class); [EOL]     assertEquals(objWithPrimitives.getExpectedJson(), expectedObject.getExpectedJson()); [EOL] }
public void testEscapingObjectFields() throws Exception { [EOL]     BagOfPrimitives objWithPrimitives = new BagOfPrimitives(1L, 1, true, "test with\" <script>"); [EOL]     String jsonRepresentation = gson.toJson(objWithPrimitives); [EOL]     assertFalse(jsonRepresentation.contains("<")); [EOL]     assertFalse(jsonRepresentation.contains(">")); [EOL]     assertTrue(jsonRepresentation.contains("\\\"")); [EOL]     BagOfPrimitives expectedObject = gson.fromJson(jsonRepresentation, BagOfPrimitives.class); [EOL]     assertEquals(objWithPrimitives.getExpectedJson(), expectedObject.getExpectedJson()); [EOL] }
public void testPropertiesDeserialization() { [EOL]     String json = "{foo:'bar'}"; [EOL]     Properties props = gson.fromJson(json, Properties.class); [EOL]     assertEquals("bar", props.getProperty("foo")); [EOL] }
public void testPropertiesDeserialization() { [EOL]     String json = "{foo:'bar'}"; [EOL]     Properties props = gson.fromJson(json, Properties.class); [EOL]     assertEquals("bar", props.getProperty("foo")); [EOL] }
public void testPropertiesDeserialization() { [EOL]     String json = "{foo:'bar'}"; [EOL]     Properties props = gson.fromJson(json, Properties.class); [EOL]     assertEquals("bar", props.getProperty("foo")); [EOL] }
public void testSetDeserialization() { [EOL]     String json = "[{value:1},{value:2}]"; [EOL]     Type type = new TypeToken<Set<Entry>>() { [EOL]     }.getType(); [EOL]     Set<Entry> set = gson.fromJson(json, type); [EOL]     assertEquals(2, set.size()); [EOL]     for (Entry entry : set) { [EOL]         assertTrue(entry.value == 1 || entry.value == 2); [EOL]     } [EOL] }
public void testArrayOfObjectsDeserialization() throws Exception { [EOL]     String json = new ArrayOfObjects().getExpectedJson(); [EOL]     ArrayOfObjects target = gson.fromJson(json, ArrayOfObjects.class); [EOL]     assertEquals(json, target.getExpectedJson()); [EOL] }
public void testArrayOfObjectsDeserialization() throws Exception { [EOL]     String json = new ArrayOfObjects().getExpectedJson(); [EOL]     ArrayOfObjects target = gson.fromJson(json, ArrayOfObjects.class); [EOL]     assertEquals(json, target.getExpectedJson()); [EOL] }
public void testArrayOfObjectsDeserialization() throws Exception { [EOL]     String json = new ArrayOfObjects().getExpectedJson(); [EOL]     ArrayOfObjects target = gson.fromJson(json, ArrayOfObjects.class); [EOL]     assertEquals(json, target.getExpectedJson()); [EOL] }
public void testArrayOfObjectsDeserialization() throws Exception { [EOL]     String json = new ArrayOfObjects().getExpectedJson(); [EOL]     ArrayOfObjects target = gson.fromJson(json, ArrayOfObjects.class); [EOL]     assertEquals(json, target.getExpectedJson()); [EOL] }
public void testArrayOfObjectsDeserialization() throws Exception { [EOL]     String json = new ArrayOfObjects().getExpectedJson(); [EOL]     ArrayOfObjects target = gson.fromJson(json, ArrayOfObjects.class); [EOL]     assertEquals(json, target.getExpectedJson()); [EOL] }
public void testArrayOfObjectsDeserialization() throws Exception { [EOL]     String json = new ArrayOfObjects().getExpectedJson(); [EOL]     ArrayOfObjects target = gson.fromJson(json, ArrayOfObjects.class); [EOL]     assertEquals(json, target.getExpectedJson()); [EOL] }
public void testEscapingObjectFields() throws Exception { [EOL]     BagOfPrimitives objWithPrimitives = new BagOfPrimitives(1L, 1, true, "test with\" <script>"); [EOL]     String jsonRepresentation = gson.toJson(objWithPrimitives); [EOL]     assertFalse(jsonRepresentation.contains("<")); [EOL]     assertFalse(jsonRepresentation.contains(">")); [EOL]     assertTrue(jsonRepresentation.contains("\\\"")); [EOL]     BagOfPrimitives expectedObject = gson.fromJson(jsonRepresentation, BagOfPrimitives.class); [EOL]     assertEquals(objWithPrimitives.getExpectedJson(), expectedObject.getExpectedJson()); [EOL] }
public void testEscapingObjectFields() throws Exception { [EOL]     BagOfPrimitives objWithPrimitives = new BagOfPrimitives(1L, 1, true, "test with\" <script>"); [EOL]     String jsonRepresentation = gson.toJson(objWithPrimitives); [EOL]     assertFalse(jsonRepresentation.contains("<")); [EOL]     assertFalse(jsonRepresentation.contains(">")); [EOL]     assertTrue(jsonRepresentation.contains("\\\"")); [EOL]     BagOfPrimitives expectedObject = gson.fromJson(jsonRepresentation, BagOfPrimitives.class); [EOL]     assertEquals(objWithPrimitives.getExpectedJson(), expectedObject.getExpectedJson()); [EOL] }
public void testEscapingObjectFields() throws Exception { [EOL]     BagOfPrimitives objWithPrimitives = new BagOfPrimitives(1L, 1, true, "test with\" <script>"); [EOL]     String jsonRepresentation = gson.toJson(objWithPrimitives); [EOL]     assertFalse(jsonRepresentation.contains("<")); [EOL]     assertFalse(jsonRepresentation.contains(">")); [EOL]     assertTrue(jsonRepresentation.contains("\\\"")); [EOL]     BagOfPrimitives expectedObject = gson.fromJson(jsonRepresentation, BagOfPrimitives.class); [EOL]     assertEquals(objWithPrimitives.getExpectedJson(), expectedObject.getExpectedJson()); [EOL] }
public void testEscapingObjectFields() throws Exception { [EOL]     BagOfPrimitives objWithPrimitives = new BagOfPrimitives(1L, 1, true, "test with\" <script>"); [EOL]     String jsonRepresentation = gson.toJson(objWithPrimitives); [EOL]     assertFalse(jsonRepresentation.contains("<")); [EOL]     assertFalse(jsonRepresentation.contains(">")); [EOL]     assertTrue(jsonRepresentation.contains("\\\"")); [EOL]     BagOfPrimitives expectedObject = gson.fromJson(jsonRepresentation, BagOfPrimitives.class); [EOL]     assertEquals(objWithPrimitives.getExpectedJson(), expectedObject.getExpectedJson()); [EOL] }
public void testEscapingObjectFields() throws Exception { [EOL]     BagOfPrimitives objWithPrimitives = new BagOfPrimitives(1L, 1, true, "test with\" <script>"); [EOL]     String jsonRepresentation = gson.toJson(objWithPrimitives); [EOL]     assertFalse(jsonRepresentation.contains("<")); [EOL]     assertFalse(jsonRepresentation.contains(">")); [EOL]     assertTrue(jsonRepresentation.contains("\\\"")); [EOL]     BagOfPrimitives expectedObject = gson.fromJson(jsonRepresentation, BagOfPrimitives.class); [EOL]     assertEquals(objWithPrimitives.getExpectedJson(), expectedObject.getExpectedJson()); [EOL] }
public void testEscapingObjectFields() throws Exception { [EOL]     BagOfPrimitives objWithPrimitives = new BagOfPrimitives(1L, 1, true, "test with\" <script>"); [EOL]     String jsonRepresentation = gson.toJson(objWithPrimitives); [EOL]     assertFalse(jsonRepresentation.contains("<")); [EOL]     assertFalse(jsonRepresentation.contains(">")); [EOL]     assertTrue(jsonRepresentation.contains("\\\"")); [EOL]     BagOfPrimitives expectedObject = gson.fromJson(jsonRepresentation, BagOfPrimitives.class); [EOL]     assertEquals(objWithPrimitives.getExpectedJson(), expectedObject.getExpectedJson()); [EOL] }
public void testEscapingObjectFields() throws Exception { [EOL]     BagOfPrimitives objWithPrimitives = new BagOfPrimitives(1L, 1, true, "test with\" <script>"); [EOL]     String jsonRepresentation = gson.toJson(objWithPrimitives); [EOL]     assertFalse(jsonRepresentation.contains("<")); [EOL]     assertFalse(jsonRepresentation.contains(">")); [EOL]     assertTrue(jsonRepresentation.contains("\\\"")); [EOL]     BagOfPrimitives expectedObject = gson.fromJson(jsonRepresentation, BagOfPrimitives.class); [EOL]     assertEquals(objWithPrimitives.getExpectedJson(), expectedObject.getExpectedJson()); [EOL] }
public void testEscapingObjectFields() throws Exception { [EOL]     BagOfPrimitives objWithPrimitives = new BagOfPrimitives(1L, 1, true, "test with\" <script>"); [EOL]     String jsonRepresentation = gson.toJson(objWithPrimitives); [EOL]     assertFalse(jsonRepresentation.contains("<")); [EOL]     assertFalse(jsonRepresentation.contains(">")); [EOL]     assertTrue(jsonRepresentation.contains("\\\"")); [EOL]     BagOfPrimitives expectedObject = gson.fromJson(jsonRepresentation, BagOfPrimitives.class); [EOL]     assertEquals(objWithPrimitives.getExpectedJson(), expectedObject.getExpectedJson()); [EOL] }
public void testEscapingObjectFields() throws Exception { [EOL]     BagOfPrimitives objWithPrimitives = new BagOfPrimitives(1L, 1, true, "test with\" <script>"); [EOL]     String jsonRepresentation = gson.toJson(objWithPrimitives); [EOL]     assertFalse(jsonRepresentation.contains("<")); [EOL]     assertFalse(jsonRepresentation.contains(">")); [EOL]     assertTrue(jsonRepresentation.contains("\\\"")); [EOL]     BagOfPrimitives expectedObject = gson.fromJson(jsonRepresentation, BagOfPrimitives.class); [EOL]     assertEquals(objWithPrimitives.getExpectedJson(), expectedObject.getExpectedJson()); [EOL] }
public void testEscapingObjectFields() throws Exception { [EOL]     BagOfPrimitives objWithPrimitives = new BagOfPrimitives(1L, 1, true, "test with\" <script>"); [EOL]     String jsonRepresentation = gson.toJson(objWithPrimitives); [EOL]     assertFalse(jsonRepresentation.contains("<")); [EOL]     assertFalse(jsonRepresentation.contains(">")); [EOL]     assertTrue(jsonRepresentation.contains("\\\"")); [EOL]     BagOfPrimitives expectedObject = gson.fromJson(jsonRepresentation, BagOfPrimitives.class); [EOL]     assertEquals(objWithPrimitives.getExpectedJson(), expectedObject.getExpectedJson()); [EOL] }
public void testEscapingObjectFields() throws Exception { [EOL]     BagOfPrimitives objWithPrimitives = new BagOfPrimitives(1L, 1, true, "test with\" <script>"); [EOL]     String jsonRepresentation = gson.toJson(objWithPrimitives); [EOL]     assertFalse(jsonRepresentation.contains("<")); [EOL]     assertFalse(jsonRepresentation.contains(">")); [EOL]     assertTrue(jsonRepresentation.contains("\\\"")); [EOL]     BagOfPrimitives expectedObject = gson.fromJson(jsonRepresentation, BagOfPrimitives.class); [EOL]     assertEquals(objWithPrimitives.getExpectedJson(), expectedObject.getExpectedJson()); [EOL] }
public void testEscapingObjectFields() throws Exception { [EOL]     BagOfPrimitives objWithPrimitives = new BagOfPrimitives(1L, 1, true, "test with\" <script>"); [EOL]     String jsonRepresentation = gson.toJson(objWithPrimitives); [EOL]     assertFalse(jsonRepresentation.contains("<")); [EOL]     assertFalse(jsonRepresentation.contains(">")); [EOL]     assertTrue(jsonRepresentation.contains("\\\"")); [EOL]     BagOfPrimitives expectedObject = gson.fromJson(jsonRepresentation, BagOfPrimitives.class); [EOL]     assertEquals(objWithPrimitives.getExpectedJson(), expectedObject.getExpectedJson()); [EOL] }
public void testEscapingObjectFields() throws Exception { [EOL]     BagOfPrimitives objWithPrimitives = new BagOfPrimitives(1L, 1, true, "test with\" <script>"); [EOL]     String jsonRepresentation = gson.toJson(objWithPrimitives); [EOL]     assertFalse(jsonRepresentation.contains("<")); [EOL]     assertFalse(jsonRepresentation.contains(">")); [EOL]     assertTrue(jsonRepresentation.contains("\\\"")); [EOL]     BagOfPrimitives expectedObject = gson.fromJson(jsonRepresentation, BagOfPrimitives.class); [EOL]     assertEquals(objWithPrimitives.getExpectedJson(), expectedObject.getExpectedJson()); [EOL] }
public void testEscapingObjectFields() throws Exception { [EOL]     BagOfPrimitives objWithPrimitives = new BagOfPrimitives(1L, 1, true, "test with\" <script>"); [EOL]     String jsonRepresentation = gson.toJson(objWithPrimitives); [EOL]     assertFalse(jsonRepresentation.contains("<")); [EOL]     assertFalse(jsonRepresentation.contains(">")); [EOL]     assertTrue(jsonRepresentation.contains("\\\"")); [EOL]     BagOfPrimitives expectedObject = gson.fromJson(jsonRepresentation, BagOfPrimitives.class); [EOL]     assertEquals(objWithPrimitives.getExpectedJson(), expectedObject.getExpectedJson()); [EOL] }
public void testEscapingObjectFields() throws Exception { [EOL]     BagOfPrimitives objWithPrimitives = new BagOfPrimitives(1L, 1, true, "test with\" <script>"); [EOL]     String jsonRepresentation = gson.toJson(objWithPrimitives); [EOL]     assertFalse(jsonRepresentation.contains("<")); [EOL]     assertFalse(jsonRepresentation.contains(">")); [EOL]     assertTrue(jsonRepresentation.contains("\\\"")); [EOL]     BagOfPrimitives expectedObject = gson.fromJson(jsonRepresentation, BagOfPrimitives.class); [EOL]     assertEquals(objWithPrimitives.getExpectedJson(), expectedObject.getExpectedJson()); [EOL] }
public void testEscapingObjectFields() throws Exception { [EOL]     BagOfPrimitives objWithPrimitives = new BagOfPrimitives(1L, 1, true, "test with\" <script>"); [EOL]     String jsonRepresentation = gson.toJson(objWithPrimitives); [EOL]     assertFalse(jsonRepresentation.contains("<")); [EOL]     assertFalse(jsonRepresentation.contains(">")); [EOL]     assertTrue(jsonRepresentation.contains("\\\"")); [EOL]     BagOfPrimitives expectedObject = gson.fromJson(jsonRepresentation, BagOfPrimitives.class); [EOL]     assertEquals(objWithPrimitives.getExpectedJson(), expectedObject.getExpectedJson()); [EOL] }
public void testEscapingObjectFields() throws Exception { [EOL]     BagOfPrimitives objWithPrimitives = new BagOfPrimitives(1L, 1, true, "test with\" <script>"); [EOL]     String jsonRepresentation = gson.toJson(objWithPrimitives); [EOL]     assertFalse(jsonRepresentation.contains("<")); [EOL]     assertFalse(jsonRepresentation.contains(">")); [EOL]     assertTrue(jsonRepresentation.contains("\\\"")); [EOL]     BagOfPrimitives expectedObject = gson.fromJson(jsonRepresentation, BagOfPrimitives.class); [EOL]     assertEquals(objWithPrimitives.getExpectedJson(), expectedObject.getExpectedJson()); [EOL] }
public void testEscapingObjectFields() throws Exception { [EOL]     BagOfPrimitives objWithPrimitives = new BagOfPrimitives(1L, 1, true, "test with\" <script>"); [EOL]     String jsonRepresentation = gson.toJson(objWithPrimitives); [EOL]     assertFalse(jsonRepresentation.contains("<")); [EOL]     assertFalse(jsonRepresentation.contains(">")); [EOL]     assertTrue(jsonRepresentation.contains("\\\"")); [EOL]     BagOfPrimitives expectedObject = gson.fromJson(jsonRepresentation, BagOfPrimitives.class); [EOL]     assertEquals(objWithPrimitives.getExpectedJson(), expectedObject.getExpectedJson()); [EOL] }
public void testEscapingObjectFields() throws Exception { [EOL]     BagOfPrimitives objWithPrimitives = new BagOfPrimitives(1L, 1, true, "test with\" <script>"); [EOL]     String jsonRepresentation = gson.toJson(objWithPrimitives); [EOL]     assertFalse(jsonRepresentation.contains("<")); [EOL]     assertFalse(jsonRepresentation.contains(">")); [EOL]     assertTrue(jsonRepresentation.contains("\\\"")); [EOL]     BagOfPrimitives expectedObject = gson.fromJson(jsonRepresentation, BagOfPrimitives.class); [EOL]     assertEquals(objWithPrimitives.getExpectedJson(), expectedObject.getExpectedJson()); [EOL] }
public void testBoolean() throws Exception { [EOL]     JsonPrimitive json = new JsonPrimitive(Boolean.TRUE); [EOL]     assertTrue(json.isBoolean()); [EOL]     assertTrue(json.getAsBoolean()); [EOL] }
public void testBoolean() throws Exception { [EOL]     JsonPrimitive json = new JsonPrimitive(Boolean.TRUE); [EOL]     assertTrue(json.isBoolean()); [EOL]     assertTrue(json.getAsBoolean()); [EOL] }
public void testArrayOfCollectionDeserialization() throws Exception { [EOL]     String json = "[[1,2],[3,4]]"; [EOL]     Type type = new TypeToken<Collection<Integer>[]>() { [EOL]     }.getType(); [EOL]     Collection<Integer>[] target = gson.fromJson(json, type); [EOL]     assertEquals(2, target.length); [EOL]     MoreAsserts.assertEquals(new Integer[] { 1, 2 }, target[0].toArray(new Integer[0])); [EOL]     MoreAsserts.assertEquals(new Integer[] { 3, 4 }, target[1].toArray(new Integer[0])); [EOL] }
public void testArrayOfCollectionDeserialization() throws Exception { [EOL]     String json = "[[1,2],[3,4]]"; [EOL]     Type type = new TypeToken<Collection<Integer>[]>() { [EOL]     }.getType(); [EOL]     Collection<Integer>[] target = gson.fromJson(json, type); [EOL]     assertEquals(2, target.length); [EOL]     MoreAsserts.assertEquals(new Integer[] { 1, 2 }, target[0].toArray(new Integer[0])); [EOL]     MoreAsserts.assertEquals(new Integer[] { 3, 4 }, target[1].toArray(new Integer[0])); [EOL] }
public void testArrayOfCollectionDeserialization() throws Exception { [EOL]     String json = "[[1,2],[3,4]]"; [EOL]     Type type = new TypeToken<Collection<Integer>[]>() { [EOL]     }.getType(); [EOL]     Collection<Integer>[] target = gson.fromJson(json, type); [EOL]     assertEquals(2, target.length); [EOL]     MoreAsserts.assertEquals(new Integer[] { 1, 2 }, target[0].toArray(new Integer[0])); [EOL]     MoreAsserts.assertEquals(new Integer[] { 3, 4 }, target[1].toArray(new Integer[0])); [EOL] }
public void testArrayOfCollectionDeserialization() throws Exception { [EOL]     String json = "[[1,2],[3,4]]"; [EOL]     Type type = new TypeToken<Collection<Integer>[]>() { [EOL]     }.getType(); [EOL]     Collection<Integer>[] target = gson.fromJson(json, type); [EOL]     assertEquals(2, target.length); [EOL]     MoreAsserts.assertEquals(new Integer[] { 1, 2 }, target[0].toArray(new Integer[0])); [EOL]     MoreAsserts.assertEquals(new Integer[] { 3, 4 }, target[1].toArray(new Integer[0])); [EOL] }
public void testTopLevelEnumInASingleElementArrayDeserialization() { [EOL]     String json = "[" + MyEnum.VALUE1.getExpectedJson() + "]"; [EOL]     MyEnum target = gson.fromJson(json, MyEnum.class); [EOL]     assertEquals(json, "[" + target.getExpectedJson() + "]"); [EOL] }
public void testTopLevelEnumInASingleElementArrayDeserialization() { [EOL]     String json = "[" + MyEnum.VALUE1.getExpectedJson() + "]"; [EOL]     MyEnum target = gson.fromJson(json, MyEnum.class); [EOL]     assertEquals(json, "[" + target.getExpectedJson() + "]"); [EOL] }
public void testTopLevelEnumInASingleElementArrayDeserialization() { [EOL]     String json = "[" + MyEnum.VALUE1.getExpectedJson() + "]"; [EOL]     MyEnum target = gson.fromJson(json, MyEnum.class); [EOL]     assertEquals(json, "[" + target.getExpectedJson() + "]"); [EOL] }
public void testPrimitiveBooleanAutoboxedInASingleElementArrayDeserialization() { [EOL]     assertEquals(Boolean.FALSE, gson.fromJson("[false]", Boolean.class)); [EOL]     assertEquals(Boolean.TRUE, gson.fromJson("[true]", Boolean.class)); [EOL]     boolean value = gson.fromJson("[false]", boolean.class); [EOL]     assertEquals(false, value); [EOL]     value = gson.fromJson("[true]", boolean.class); [EOL]     assertEquals(true, value); [EOL] }
public void testPrimitiveBooleanAutoboxedInASingleElementArrayDeserialization() { [EOL]     assertEquals(Boolean.FALSE, gson.fromJson("[false]", Boolean.class)); [EOL]     assertEquals(Boolean.TRUE, gson.fromJson("[true]", Boolean.class)); [EOL]     boolean value = gson.fromJson("[false]", boolean.class); [EOL]     assertEquals(false, value); [EOL]     value = gson.fromJson("[true]", boolean.class); [EOL]     assertEquals(true, value); [EOL] }
public void testCallingNextBeyondAvailableInput() { [EOL]     parser.next(); [EOL]     parser.next(); [EOL]     try { [EOL]         parser.next(); [EOL]         fail("Parser should not go beyond available input"); [EOL]     } catch (NoSuchElementException expected) { [EOL]     } [EOL] }
public void testCallingNextBeyondAvailableInput() { [EOL]     parser.next(); [EOL]     parser.next(); [EOL]     try { [EOL]         parser.next(); [EOL]         fail("Parser should not go beyond available input"); [EOL]     } catch (NoSuchElementException expected) { [EOL]     } [EOL] }
public void testCallingNextBeyondAvailableInput() { [EOL]     parser.next(); [EOL]     parser.next(); [EOL]     try { [EOL]         parser.next(); [EOL]         fail("Parser should not go beyond available input"); [EOL]     } catch (NoSuchElementException expected) { [EOL]     } [EOL] }
public void testCallingNextBeyondAvailableInput() { [EOL]     parser.next(); [EOL]     parser.next(); [EOL]     try { [EOL]         parser.next(); [EOL]         fail("Parser should not go beyond available input"); [EOL]     } catch (NoSuchElementException expected) { [EOL]     } [EOL] }
public void testCallingNextBeyondAvailableInput() { [EOL]     parser.next(); [EOL]     parser.next(); [EOL]     try { [EOL]         parser.next(); [EOL]         fail("Parser should not go beyond available input"); [EOL]     } catch (NoSuchElementException expected) { [EOL]     } [EOL] }
public void testCallingNextBeyondAvailableInput() { [EOL]     parser.next(); [EOL]     parser.next(); [EOL]     try { [EOL]         parser.next(); [EOL]         fail("Parser should not go beyond available input"); [EOL]     } catch (NoSuchElementException expected) { [EOL]     } [EOL] }
public void testCustomAdapterInvokedForMapElementSerialization() { [EOL]     Gson gson = new GsonBuilder().registerTypeAdapter(StringHolder.class, new StringHolderTypeAdapter()).create(); [EOL]     StringHolder holder = new StringHolder("Jacob", "Tomaw"); [EOL]     Map<String, StringHolder> mapOfHolders = new HashMap<String, StringHolder>(); [EOL]     mapOfHolders.put("foo", holder); [EOL]     String json = gson.toJson(mapOfHolders); [EOL]     assertTrue(json.contains("\"foo\":\"Jacob:Tomaw\"")); [EOL] }
public void testCustomAdapterInvokedForMapElementSerialization() { [EOL]     Gson gson = new GsonBuilder().registerTypeAdapter(StringHolder.class, new StringHolderTypeAdapter()).create(); [EOL]     StringHolder holder = new StringHolder("Jacob", "Tomaw"); [EOL]     Map<String, StringHolder> mapOfHolders = new HashMap<String, StringHolder>(); [EOL]     mapOfHolders.put("foo", holder); [EOL]     String json = gson.toJson(mapOfHolders); [EOL]     assertTrue(json.contains("\"foo\":\"Jacob:Tomaw\"")); [EOL] }
public void testCustomAdapterInvokedForMapElementSerialization() { [EOL]     Gson gson = new GsonBuilder().registerTypeAdapter(StringHolder.class, new StringHolderTypeAdapter()).create(); [EOL]     StringHolder holder = new StringHolder("Jacob", "Tomaw"); [EOL]     Map<String, StringHolder> mapOfHolders = new HashMap<String, StringHolder>(); [EOL]     mapOfHolders.put("foo", holder); [EOL]     String json = gson.toJson(mapOfHolders); [EOL]     assertTrue(json.contains("\"foo\":\"Jacob:Tomaw\"")); [EOL] }
@SuppressWarnings("unchecked") [EOL] public void testParameterizedTypeGenericArraysSerialization() throws Exception { [EOL]     List<Integer> list = new ArrayList<Integer>(); [EOL]     list.add(1); [EOL]     list.add(2); [EOL]     List<Integer>[] arrayOfLists = new List[] { list, list }; [EOL]     Type typeOfSrc = new TypeToken<ObjectWithTypeVariables<Integer>>() { [EOL]     }.getType(); [EOL]     ObjectWithTypeVariables<Integer> objToSerialize = new ObjectWithTypeVariables<Integer>(null, null, null, arrayOfLists, null, null); [EOL]     String json = gson.toJson(objToSerialize, typeOfSrc); [EOL]     assertEquals("{\"arrayOfListOfTypeParameters\":[[1,2],[1,2]]}", json); [EOL] }
@SuppressWarnings("unchecked") [EOL] public void testParameterizedTypeGenericArraysSerialization() throws Exception { [EOL]     List<Integer> list = new ArrayList<Integer>(); [EOL]     list.add(1); [EOL]     list.add(2); [EOL]     List<Integer>[] arrayOfLists = new List[] { list, list }; [EOL]     Type typeOfSrc = new TypeToken<ObjectWithTypeVariables<Integer>>() { [EOL]     }.getType(); [EOL]     ObjectWithTypeVariables<Integer> objToSerialize = new ObjectWithTypeVariables<Integer>(null, null, null, arrayOfLists, null, null); [EOL]     String json = gson.toJson(objToSerialize, typeOfSrc); [EOL]     assertEquals("{\"arrayOfListOfTypeParameters\":[[1,2],[1,2]]}", json); [EOL] }
@SuppressWarnings("unchecked") [EOL] public void testParameterizedTypeGenericArraysSerialization() throws Exception { [EOL]     List<Integer> list = new ArrayList<Integer>(); [EOL]     list.add(1); [EOL]     list.add(2); [EOL]     List<Integer>[] arrayOfLists = new List[] { list, list }; [EOL]     Type typeOfSrc = new TypeToken<ObjectWithTypeVariables<Integer>>() { [EOL]     }.getType(); [EOL]     ObjectWithTypeVariables<Integer> objToSerialize = new ObjectWithTypeVariables<Integer>(null, null, null, arrayOfLists, null, null); [EOL]     String json = gson.toJson(objToSerialize, typeOfSrc); [EOL]     assertEquals("{\"arrayOfListOfTypeParameters\":[[1,2],[1,2]]}", json); [EOL] }
public void testFieldWithoutAnnotation() throws Exception { [EOL]     String fieldName = "fieldWithoutAnnotation"; [EOL]     FieldAttributes f = new FieldAttributes(SomeObject.class, SomeObject.class.getField(fieldName)); [EOL]     assertEquals(fieldName, policy.translateName(f)); [EOL] }
public void testFieldWithoutAnnotation() throws Exception { [EOL]     String fieldName = "fieldWithoutAnnotation"; [EOL]     FieldAttributes f = new FieldAttributes(SomeObject.class, SomeObject.class.getField(fieldName)); [EOL]     assertEquals(fieldName, policy.translateName(f)); [EOL] }
public void testFieldWithoutAnnotation() throws Exception { [EOL]     String fieldName = "fieldWithoutAnnotation"; [EOL]     FieldAttributes f = new FieldAttributes(SomeObject.class, SomeObject.class.getField(fieldName)); [EOL]     assertEquals(fieldName, policy.translateName(f)); [EOL] }
public void testNullDeserialization() throws Exception { [EOL]     String myNullObject = null; [EOL]     Object object = gson.fromJson(myNullObject, Object.class); [EOL]     assertNull(object); [EOL] }
public void testNullDeserialization() throws Exception { [EOL]     String myNullObject = null; [EOL]     Object object = gson.fromJson(myNullObject, Object.class); [EOL]     assertNull(object); [EOL] }
public void testNullDeserialization() throws Exception { [EOL]     String myNullObject = null; [EOL]     Object object = gson.fromJson(myNullObject, Object.class); [EOL]     assertNull(object); [EOL] }
public void testArrayOfPrimitivesWithCustomTypeAdapter() throws Exception { [EOL]     CrazyLongTypeAdapter typeAdapter = new CrazyLongTypeAdapter(); [EOL]     gson = new GsonBuilder().registerTypeAdapter(long.class, typeAdapter).registerTypeAdapter(Long.class, typeAdapter).create(); [EOL]     long[] value = { 1L }; [EOL]     String serializedValue = gson.toJson(value); [EOL]     String expected = "[" + String.valueOf(value[0] + CrazyLongTypeAdapter.DIFFERENCE) + "]"; [EOL]     assertEquals(expected, serializedValue); [EOL]     long[] deserializedValue = gson.fromJson(serializedValue, long[].class); [EOL]     assertEquals(1, deserializedValue.length); [EOL]     assertEquals(value[0], deserializedValue[0]); [EOL] }
public void testArrayOfPrimitivesWithCustomTypeAdapter() throws Exception { [EOL]     CrazyLongTypeAdapter typeAdapter = new CrazyLongTypeAdapter(); [EOL]     gson = new GsonBuilder().registerTypeAdapter(long.class, typeAdapter).registerTypeAdapter(Long.class, typeAdapter).create(); [EOL]     long[] value = { 1L }; [EOL]     String serializedValue = gson.toJson(value); [EOL]     String expected = "[" + String.valueOf(value[0] + CrazyLongTypeAdapter.DIFFERENCE) + "]"; [EOL]     assertEquals(expected, serializedValue); [EOL]     long[] deserializedValue = gson.fromJson(serializedValue, long[].class); [EOL]     assertEquals(1, deserializedValue.length); [EOL]     assertEquals(value[0], deserializedValue[0]); [EOL] }
public void testArrayOfPrimitivesWithCustomTypeAdapter() throws Exception { [EOL]     CrazyLongTypeAdapter typeAdapter = new CrazyLongTypeAdapter(); [EOL]     gson = new GsonBuilder().registerTypeAdapter(long.class, typeAdapter).registerTypeAdapter(Long.class, typeAdapter).create(); [EOL]     long[] value = { 1L }; [EOL]     String serializedValue = gson.toJson(value); [EOL]     String expected = "[" + String.valueOf(value[0] + CrazyLongTypeAdapter.DIFFERENCE) + "]"; [EOL]     assertEquals(expected, serializedValue); [EOL]     long[] deserializedValue = gson.fromJson(serializedValue, long[].class); [EOL]     assertEquals(1, deserializedValue.length); [EOL]     assertEquals(value[0], deserializedValue[0]); [EOL] }
public void testArrayOfPrimitivesWithCustomTypeAdapter() throws Exception { [EOL]     CrazyLongTypeAdapter typeAdapter = new CrazyLongTypeAdapter(); [EOL]     gson = new GsonBuilder().registerTypeAdapter(long.class, typeAdapter).registerTypeAdapter(Long.class, typeAdapter).create(); [EOL]     long[] value = { 1L }; [EOL]     String serializedValue = gson.toJson(value); [EOL]     String expected = "[" + String.valueOf(value[0] + CrazyLongTypeAdapter.DIFFERENCE) + "]"; [EOL]     assertEquals(expected, serializedValue); [EOL]     long[] deserializedValue = gson.fromJson(serializedValue, long[].class); [EOL]     assertEquals(1, deserializedValue.length); [EOL]     assertEquals(value[0], deserializedValue[0]); [EOL] }
public void testArrayOfPrimitivesWithCustomTypeAdapter() throws Exception { [EOL]     CrazyLongTypeAdapter typeAdapter = new CrazyLongTypeAdapter(); [EOL]     gson = new GsonBuilder().registerTypeAdapter(long.class, typeAdapter).registerTypeAdapter(Long.class, typeAdapter).create(); [EOL]     long[] value = { 1L }; [EOL]     String serializedValue = gson.toJson(value); [EOL]     String expected = "[" + String.valueOf(value[0] + CrazyLongTypeAdapter.DIFFERENCE) + "]"; [EOL]     assertEquals(expected, serializedValue); [EOL]     long[] deserializedValue = gson.fromJson(serializedValue, long[].class); [EOL]     assertEquals(1, deserializedValue.length); [EOL]     assertEquals(value[0], deserializedValue[0]); [EOL] }
public void testArrayOfPrimitivesWithCustomTypeAdapter() throws Exception { [EOL]     CrazyLongTypeAdapter typeAdapter = new CrazyLongTypeAdapter(); [EOL]     gson = new GsonBuilder().registerTypeAdapter(long.class, typeAdapter).registerTypeAdapter(Long.class, typeAdapter).create(); [EOL]     long[] value = { 1L }; [EOL]     String serializedValue = gson.toJson(value); [EOL]     String expected = "[" + String.valueOf(value[0] + CrazyLongTypeAdapter.DIFFERENCE) + "]"; [EOL]     assertEquals(expected, serializedValue); [EOL]     long[] deserializedValue = gson.fromJson(serializedValue, long[].class); [EOL]     assertEquals(1, deserializedValue.length); [EOL]     assertEquals(value[0], deserializedValue[0]); [EOL] }
public void testObjectArrayWithNonPrimitivesSerialization() throws Exception { [EOL]     ClassWithObjects classWithObjects = new ClassWithObjects(); [EOL]     BagOfPrimitives bagOfPrimitives = new BagOfPrimitives(); [EOL]     String classWithObjectsJson = gson.toJson(classWithObjects); [EOL]     String bagOfPrimitivesJson = gson.toJson(bagOfPrimitives); [EOL]     Object[] objects = new Object[] { classWithObjects, bagOfPrimitives }; [EOL]     String json = gson.toJson(objects); [EOL]     assertTrue(json.contains(classWithObjectsJson)); [EOL]     assertTrue(json.contains(bagOfPrimitivesJson)); [EOL] }
public void testObjectArrayWithNonPrimitivesSerialization() throws Exception { [EOL]     ClassWithObjects classWithObjects = new ClassWithObjects(); [EOL]     BagOfPrimitives bagOfPrimitives = new BagOfPrimitives(); [EOL]     String classWithObjectsJson = gson.toJson(classWithObjects); [EOL]     String bagOfPrimitivesJson = gson.toJson(bagOfPrimitives); [EOL]     Object[] objects = new Object[] { classWithObjects, bagOfPrimitives }; [EOL]     String json = gson.toJson(objects); [EOL]     assertTrue(json.contains(classWithObjectsJson)); [EOL]     assertTrue(json.contains(bagOfPrimitivesJson)); [EOL] }
public void testObjectArrayWithNonPrimitivesSerialization() throws Exception { [EOL]     ClassWithObjects classWithObjects = new ClassWithObjects(); [EOL]     BagOfPrimitives bagOfPrimitives = new BagOfPrimitives(); [EOL]     String classWithObjectsJson = gson.toJson(classWithObjects); [EOL]     String bagOfPrimitivesJson = gson.toJson(bagOfPrimitives); [EOL]     Object[] objects = new Object[] { classWithObjects, bagOfPrimitives }; [EOL]     String json = gson.toJson(objects); [EOL]     assertTrue(json.contains(classWithObjectsJson)); [EOL]     assertTrue(json.contains(bagOfPrimitivesJson)); [EOL] }
public void testObjectArrayWithNonPrimitivesSerialization() throws Exception { [EOL]     ClassWithObjects classWithObjects = new ClassWithObjects(); [EOL]     BagOfPrimitives bagOfPrimitives = new BagOfPrimitives(); [EOL]     String classWithObjectsJson = gson.toJson(classWithObjects); [EOL]     String bagOfPrimitivesJson = gson.toJson(bagOfPrimitives); [EOL]     Object[] objects = new Object[] { classWithObjects, bagOfPrimitives }; [EOL]     String json = gson.toJson(objects); [EOL]     assertTrue(json.contains(classWithObjectsJson)); [EOL]     assertTrue(json.contains(bagOfPrimitivesJson)); [EOL] }
public void testProperSerialization() throws Exception { [EOL]     DefaultDateTypeAdapter dateSerializer = new DefaultDateTypeAdapter(DateFormat.LONG); [EOL]     JsonDeserializerExceptionWrapper<Date> wrappedJsonSerializer = new JsonDeserializerExceptionWrapper<Date>(dateSerializer); [EOL]     Date expected = dateSerializer.deserialize(PRIMITIVE_ELEMENT, Date.class, null); [EOL]     Date actual = wrappedJsonSerializer.deserialize(PRIMITIVE_ELEMENT, Date.class, null); [EOL]     assertEquals(expected, actual); [EOL] }
public void testProperSerialization() throws Exception { [EOL]     DefaultDateTypeAdapter dateSerializer = new DefaultDateTypeAdapter(DateFormat.LONG); [EOL]     JsonDeserializerExceptionWrapper<Date> wrappedJsonSerializer = new JsonDeserializerExceptionWrapper<Date>(dateSerializer); [EOL]     Date expected = dateSerializer.deserialize(PRIMITIVE_ELEMENT, Date.class, null); [EOL]     Date actual = wrappedJsonSerializer.deserialize(PRIMITIVE_ELEMENT, Date.class, null); [EOL]     assertEquals(expected, actual); [EOL] }
public void testProperSerialization() throws Exception { [EOL]     DefaultDateTypeAdapter dateSerializer = new DefaultDateTypeAdapter(DateFormat.LONG); [EOL]     JsonDeserializerExceptionWrapper<Date> wrappedJsonSerializer = new JsonDeserializerExceptionWrapper<Date>(dateSerializer); [EOL]     Date expected = dateSerializer.deserialize(PRIMITIVE_ELEMENT, Date.class, null); [EOL]     Date actual = wrappedJsonSerializer.deserialize(PRIMITIVE_ELEMENT, Date.class, null); [EOL]     assertEquals(expected, actual); [EOL] }
public void testProperSerialization() throws Exception { [EOL]     DefaultDateTypeAdapter dateSerializer = new DefaultDateTypeAdapter(DateFormat.LONG); [EOL]     JsonDeserializerExceptionWrapper<Date> wrappedJsonSerializer = new JsonDeserializerExceptionWrapper<Date>(dateSerializer); [EOL]     Date expected = dateSerializer.deserialize(PRIMITIVE_ELEMENT, Date.class, null); [EOL]     Date actual = wrappedJsonSerializer.deserialize(PRIMITIVE_ELEMENT, Date.class, null); [EOL]     assertEquals(expected, actual); [EOL] }
public void testProperSerialization() throws Exception { [EOL]     DefaultDateTypeAdapter dateSerializer = new DefaultDateTypeAdapter(DateFormat.LONG); [EOL]     JsonDeserializerExceptionWrapper<Date> wrappedJsonSerializer = new JsonDeserializerExceptionWrapper<Date>(dateSerializer); [EOL]     Date expected = dateSerializer.deserialize(PRIMITIVE_ELEMENT, Date.class, null); [EOL]     Date actual = wrappedJsonSerializer.deserialize(PRIMITIVE_ELEMENT, Date.class, null); [EOL]     assertEquals(expected, actual); [EOL] }
public void testRethrowJsonParseException() throws Exception { [EOL]     String errorMsg = "please rethrow me"; [EOL]     JsonDeserializerExceptionWrapper<String> wrappedJsonSerializer = new JsonDeserializerExceptionWrapper<String>(new ExceptionJsonDeserializer(new JsonParseException(errorMsg))); [EOL]     try { [EOL]         wrappedJsonSerializer.deserialize(PRIMITIVE_ELEMENT, String.class, null); [EOL]         fail("JsonParseException should have been thrown"); [EOL]     } catch (JsonParseException expected) { [EOL]         assertNull(expected.getCause()); [EOL]         assertEquals(errorMsg, expected.getMessage()); [EOL]     } [EOL] }
public void testAllUpperCaseExceptFirst() throws Exception { [EOL]     assertEquals("U R L", namingPolicy.translateName("uRL", String.class, null)); [EOL] }
public void testAllUpperCaseExceptFirst() throws Exception { [EOL]     assertEquals("U R L", namingPolicy.translateName("uRL", String.class, null)); [EOL] }
public void testAllUpperCaseExceptFirst() throws Exception { [EOL]     assertEquals("U R L", namingPolicy.translateName("uRL", String.class, null)); [EOL] }
public void testNeverSkipsField() throws Exception { [EOL]     assertFalse(strategy.shouldSkipField(new FieldAttributes(String.class, String.class.getFields()[0]))); [EOL] }
public void testOurTypeFunctionality() throws Exception { [EOL]     assertEquals(parameterizedType, ourType.getGenericComponentType()); [EOL]     assertEquals(genericArrayType, ourType); [EOL]     assertEquals(genericArrayType.hashCode(), ourType.hashCode()); [EOL] }
public void testOurTypeFunctionality() throws Exception { [EOL]     assertEquals(parameterizedType, ourType.getGenericComponentType()); [EOL]     assertEquals(genericArrayType, ourType); [EOL]     assertEquals(genericArrayType.hashCode(), ourType.hashCode()); [EOL] }
public void testArrayOfCollectionDeserialization() throws Exception { [EOL]     String json = "[[1,2],[3,4]]"; [EOL]     Type type = new TypeToken<Collection<Integer>[]>() { [EOL]     }.getType(); [EOL]     Collection<Integer>[] target = gson.fromJson(json, type); [EOL]     assertEquals(2, target.length); [EOL]     MoreAsserts.assertEquals(new Integer[] { 1, 2 }, target[0].toArray(new Integer[0])); [EOL]     MoreAsserts.assertEquals(new Integer[] { 3, 4 }, target[1].toArray(new Integer[0])); [EOL] }
public void testArrayOfCollectionDeserialization() throws Exception { [EOL]     String json = "[[1,2],[3,4]]"; [EOL]     Type type = new TypeToken<Collection<Integer>[]>() { [EOL]     }.getType(); [EOL]     Collection<Integer>[] target = gson.fromJson(json, type); [EOL]     assertEquals(2, target.length); [EOL]     MoreAsserts.assertEquals(new Integer[] { 1, 2 }, target[0].toArray(new Integer[0])); [EOL]     MoreAsserts.assertEquals(new Integer[] { 3, 4 }, target[1].toArray(new Integer[0])); [EOL] }
public void testLowerCaseFirstLetter() throws Exception { [EOL]     ModifyFirstLetterNamingPolicy policy = new ModifyFirstLetterNamingPolicy(ModifyFirstLetterNamingPolicy.LetterModifier.LOWER); [EOL]     assertEquals("blah", policy.translateName("Blah", String.class, null)); [EOL]     assertEquals("blah", policy.translateName("blah", String.class, null)); [EOL] }
public void testLowerCaseFirstLetter() throws Exception { [EOL]     ModifyFirstLetterNamingPolicy policy = new ModifyFirstLetterNamingPolicy(ModifyFirstLetterNamingPolicy.LetterModifier.LOWER); [EOL]     assertEquals("blah", policy.translateName("Blah", String.class, null)); [EOL]     assertEquals("blah", policy.translateName("blah", String.class, null)); [EOL] }
public void testLowerCaseFirstLetter() throws Exception { [EOL]     ModifyFirstLetterNamingPolicy policy = new ModifyFirstLetterNamingPolicy(ModifyFirstLetterNamingPolicy.LetterModifier.LOWER); [EOL]     assertEquals("blah", policy.translateName("Blah", String.class, null)); [EOL]     assertEquals("blah", policy.translateName("blah", String.class, null)); [EOL] }
public void testLowerCaseFirstLetter() throws Exception { [EOL]     ModifyFirstLetterNamingPolicy policy = new ModifyFirstLetterNamingPolicy(ModifyFirstLetterNamingPolicy.LetterModifier.LOWER); [EOL]     assertEquals("blah", policy.translateName("Blah", String.class, null)); [EOL]     assertEquals("blah", policy.translateName("blah", String.class, null)); [EOL] }
public void testLowerCaseFirstLetter() throws Exception { [EOL]     ModifyFirstLetterNamingPolicy policy = new ModifyFirstLetterNamingPolicy(ModifyFirstLetterNamingPolicy.LetterModifier.LOWER); [EOL]     assertEquals("blah", policy.translateName("Blah", String.class, null)); [EOL]     assertEquals("blah", policy.translateName("blah", String.class, null)); [EOL] }
public void testArrayOfCollectionDeserialization() throws Exception { [EOL]     String json = "[[1,2],[3,4]]"; [EOL]     Type type = new TypeToken<Collection<Integer>[]>() { [EOL]     }.getType(); [EOL]     Collection<Integer>[] target = gson.fromJson(json, type); [EOL]     assertEquals(2, target.length); [EOL]     MoreAsserts.assertEquals(new Integer[] { 1, 2 }, target[0].toArray(new Integer[0])); [EOL]     MoreAsserts.assertEquals(new Integer[] { 3, 4 }, target[1].toArray(new Integer[0])); [EOL] }
public void testArrayOfCollectionDeserialization() throws Exception { [EOL]     String json = "[[1,2],[3,4]]"; [EOL]     Type type = new TypeToken<Collection<Integer>[]>() { [EOL]     }.getType(); [EOL]     Collection<Integer>[] target = gson.fromJson(json, type); [EOL]     assertEquals(2, target.length); [EOL]     MoreAsserts.assertEquals(new Integer[] { 1, 2 }, target[0].toArray(new Integer[0])); [EOL]     MoreAsserts.assertEquals(new Integer[] { 3, 4 }, target[1].toArray(new Integer[0])); [EOL] }
public void testArrayOfCollectionDeserialization() throws Exception { [EOL]     String json = "[[1,2],[3,4]]"; [EOL]     Type type = new TypeToken<Collection<Integer>[]>() { [EOL]     }.getType(); [EOL]     Collection<Integer>[] target = gson.fromJson(json, type); [EOL]     assertEquals(2, target.length); [EOL]     MoreAsserts.assertEquals(new Integer[] { 1, 2 }, target[0].toArray(new Integer[0])); [EOL]     MoreAsserts.assertEquals(new Integer[] { 3, 4 }, target[1].toArray(new Integer[0])); [EOL] }
public void testDefaultConstructorNotCalledOnField() throws Exception { [EOL]     DataHolderWrapper dataWrapper = new DataHolderWrapper(new DataHolder(DEFAULT_VALUE)); [EOL]     String json = gson.toJson(dataWrapper); [EOL]     DataHolderWrapper actual = gson.fromJson(json, DataHolderWrapper.class); [EOL]     assertEquals(DEFAULT_VALUE + SUFFIX, actual.getWrappedData().getData()); [EOL] }
public void testDefaultConstructorNotCalledOnField() throws Exception { [EOL]     DataHolderWrapper dataWrapper = new DataHolderWrapper(new DataHolder(DEFAULT_VALUE)); [EOL]     String json = gson.toJson(dataWrapper); [EOL]     DataHolderWrapper actual = gson.fromJson(json, DataHolderWrapper.class); [EOL]     assertEquals(DEFAULT_VALUE + SUFFIX, actual.getWrappedData().getData()); [EOL] }
public void testDefaultConstructorNotCalledOnField() throws Exception { [EOL]     DataHolderWrapper dataWrapper = new DataHolderWrapper(new DataHolder(DEFAULT_VALUE)); [EOL]     String json = gson.toJson(dataWrapper); [EOL]     DataHolderWrapper actual = gson.fromJson(json, DataHolderWrapper.class); [EOL]     assertEquals(DEFAULT_VALUE + SUFFIX, actual.getWrappedData().getData()); [EOL] }
public void testDefaultConstructorNotCalledOnField() throws Exception { [EOL]     DataHolderWrapper dataWrapper = new DataHolderWrapper(new DataHolder(DEFAULT_VALUE)); [EOL]     String json = gson.toJson(dataWrapper); [EOL]     DataHolderWrapper actual = gson.fromJson(json, DataHolderWrapper.class); [EOL]     assertEquals(DEFAULT_VALUE + SUFFIX, actual.getWrappedData().getData()); [EOL] }
public void testDefaultConstructorNotCalledOnField() throws Exception { [EOL]     DataHolderWrapper dataWrapper = new DataHolderWrapper(new DataHolder(DEFAULT_VALUE)); [EOL]     String json = gson.toJson(dataWrapper); [EOL]     DataHolderWrapper actual = gson.fromJson(json, DataHolderWrapper.class); [EOL]     assertEquals(DEFAULT_VALUE + SUFFIX, actual.getWrappedData().getData()); [EOL] }
public void testVersionedGsonWithUnversionedClassesDeserialization() { [EOL]     Gson gson = builder.setVersion(1.0).create(); [EOL]     String json = "{\"longValue\":10,\"intValue\":20,\"booleanValue\":false}"; [EOL]     BagOfPrimitives expected = new BagOfPrimitives(); [EOL]     expected.longValue = 10; [EOL]     expected.intValue = 20; [EOL]     expected.booleanValue = false; [EOL]     BagOfPrimitives actual = gson.fromJson(json, BagOfPrimitives.class); [EOL]     assertEquals(expected, actual); [EOL] }
public void testArrayOfPrimitivesWithCustomTypeAdapter() throws Exception { [EOL]     CrazyLongTypeAdapter typeAdapter = new CrazyLongTypeAdapter(); [EOL]     gson = new GsonBuilder().registerTypeAdapter(long.class, typeAdapter).registerTypeAdapter(Long.class, typeAdapter).create(); [EOL]     long[] value = { 1L }; [EOL]     String serializedValue = gson.toJson(value); [EOL]     String expected = "[" + String.valueOf(value[0] + CrazyLongTypeAdapter.DIFFERENCE) + "]"; [EOL]     assertEquals(expected, serializedValue); [EOL]     long[] deserializedValue = gson.fromJson(serializedValue, long[].class); [EOL]     assertEquals(1, deserializedValue.length); [EOL]     assertEquals(value[0], deserializedValue[0]); [EOL] }
public void testArrayOfPrimitivesWithCustomTypeAdapter() throws Exception { [EOL]     CrazyLongTypeAdapter typeAdapter = new CrazyLongTypeAdapter(); [EOL]     gson = new GsonBuilder().registerTypeAdapter(long.class, typeAdapter).registerTypeAdapter(Long.class, typeAdapter).create(); [EOL]     long[] value = { 1L }; [EOL]     String serializedValue = gson.toJson(value); [EOL]     String expected = "[" + String.valueOf(value[0] + CrazyLongTypeAdapter.DIFFERENCE) + "]"; [EOL]     assertEquals(expected, serializedValue); [EOL]     long[] deserializedValue = gson.fromJson(serializedValue, long[].class); [EOL]     assertEquals(1, deserializedValue.length); [EOL]     assertEquals(value[0], deserializedValue[0]); [EOL] }
public void testArrayOfPrimitivesWithCustomTypeAdapter() throws Exception { [EOL]     CrazyLongTypeAdapter typeAdapter = new CrazyLongTypeAdapter(); [EOL]     gson = new GsonBuilder().registerTypeAdapter(long.class, typeAdapter).registerTypeAdapter(Long.class, typeAdapter).create(); [EOL]     long[] value = { 1L }; [EOL]     String serializedValue = gson.toJson(value); [EOL]     String expected = "[" + String.valueOf(value[0] + CrazyLongTypeAdapter.DIFFERENCE) + "]"; [EOL]     assertEquals(expected, serializedValue); [EOL]     long[] deserializedValue = gson.fromJson(serializedValue, long[].class); [EOL]     assertEquals(1, deserializedValue.length); [EOL]     assertEquals(value[0], deserializedValue[0]); [EOL] }
public void testArrayOfPrimitivesWithCustomTypeAdapter() throws Exception { [EOL]     CrazyLongTypeAdapter typeAdapter = new CrazyLongTypeAdapter(); [EOL]     gson = new GsonBuilder().registerTypeAdapter(long.class, typeAdapter).registerTypeAdapter(Long.class, typeAdapter).create(); [EOL]     long[] value = { 1L }; [EOL]     String serializedValue = gson.toJson(value); [EOL]     String expected = "[" + String.valueOf(value[0] + CrazyLongTypeAdapter.DIFFERENCE) + "]"; [EOL]     assertEquals(expected, serializedValue); [EOL]     long[] deserializedValue = gson.fromJson(serializedValue, long[].class); [EOL]     assertEquals(1, deserializedValue.length); [EOL]     assertEquals(value[0], deserializedValue[0]); [EOL] }
public void testCustomAdapterInvokedForMapElementSerialization() { [EOL]     Gson gson = new GsonBuilder().registerTypeAdapter(StringHolder.class, new StringHolderTypeAdapter()).create(); [EOL]     StringHolder holder = new StringHolder("Jacob", "Tomaw"); [EOL]     Map<String, StringHolder> mapOfHolders = new HashMap<String, StringHolder>(); [EOL]     mapOfHolders.put("foo", holder); [EOL]     String json = gson.toJson(mapOfHolders); [EOL]     assertTrue(json.contains("\"foo\":\"Jacob:Tomaw\"")); [EOL] }
public void testArrayOfPrimitivesWithCustomTypeAdapter() throws Exception { [EOL]     CrazyLongTypeAdapter typeAdapter = new CrazyLongTypeAdapter(); [EOL]     gson = new GsonBuilder().registerTypeAdapter(long.class, typeAdapter).registerTypeAdapter(Long.class, typeAdapter).create(); [EOL]     long[] value = { 1L }; [EOL]     String serializedValue = gson.toJson(value); [EOL]     String expected = "[" + String.valueOf(value[0] + CrazyLongTypeAdapter.DIFFERENCE) + "]"; [EOL]     assertEquals(expected, serializedValue); [EOL]     long[] deserializedValue = gson.fromJson(serializedValue, long[].class); [EOL]     assertEquals(1, deserializedValue.length); [EOL]     assertEquals(value[0], deserializedValue[0]); [EOL] }
public void testArrayOfPrimitivesWithCustomTypeAdapter() throws Exception { [EOL]     CrazyLongTypeAdapter typeAdapter = new CrazyLongTypeAdapter(); [EOL]     gson = new GsonBuilder().registerTypeAdapter(long.class, typeAdapter).registerTypeAdapter(Long.class, typeAdapter).create(); [EOL]     long[] value = { 1L }; [EOL]     String serializedValue = gson.toJson(value); [EOL]     String expected = "[" + String.valueOf(value[0] + CrazyLongTypeAdapter.DIFFERENCE) + "]"; [EOL]     assertEquals(expected, serializedValue); [EOL]     long[] deserializedValue = gson.fromJson(serializedValue, long[].class); [EOL]     assertEquals(1, deserializedValue.length); [EOL]     assertEquals(value[0], deserializedValue[0]); [EOL] }
public void testArrayOfPrimitivesWithCustomTypeAdapter() throws Exception { [EOL]     CrazyLongTypeAdapter typeAdapter = new CrazyLongTypeAdapter(); [EOL]     gson = new GsonBuilder().registerTypeAdapter(long.class, typeAdapter).registerTypeAdapter(Long.class, typeAdapter).create(); [EOL]     long[] value = { 1L }; [EOL]     String serializedValue = gson.toJson(value); [EOL]     String expected = "[" + String.valueOf(value[0] + CrazyLongTypeAdapter.DIFFERENCE) + "]"; [EOL]     assertEquals(expected, serializedValue); [EOL]     long[] deserializedValue = gson.fromJson(serializedValue, long[].class); [EOL]     assertEquals(1, deserializedValue.length); [EOL]     assertEquals(value[0], deserializedValue[0]); [EOL] }
public void testArrayOfPrimitivesWithCustomTypeAdapter() throws Exception { [EOL]     CrazyLongTypeAdapter typeAdapter = new CrazyLongTypeAdapter(); [EOL]     gson = new GsonBuilder().registerTypeAdapter(long.class, typeAdapter).registerTypeAdapter(Long.class, typeAdapter).create(); [EOL]     long[] value = { 1L }; [EOL]     String serializedValue = gson.toJson(value); [EOL]     String expected = "[" + String.valueOf(value[0] + CrazyLongTypeAdapter.DIFFERENCE) + "]"; [EOL]     assertEquals(expected, serializedValue); [EOL]     long[] deserializedValue = gson.fromJson(serializedValue, long[].class); [EOL]     assertEquals(1, deserializedValue.length); [EOL]     assertEquals(value[0], deserializedValue[0]); [EOL] }
public void testArrayOfPrimitivesWithCustomTypeAdapter() throws Exception { [EOL]     CrazyLongTypeAdapter typeAdapter = new CrazyLongTypeAdapter(); [EOL]     gson = new GsonBuilder().registerTypeAdapter(long.class, typeAdapter).registerTypeAdapter(Long.class, typeAdapter).create(); [EOL]     long[] value = { 1L }; [EOL]     String serializedValue = gson.toJson(value); [EOL]     String expected = "[" + String.valueOf(value[0] + CrazyLongTypeAdapter.DIFFERENCE) + "]"; [EOL]     assertEquals(expected, serializedValue); [EOL]     long[] deserializedValue = gson.fromJson(serializedValue, long[].class); [EOL]     assertEquals(1, deserializedValue.length); [EOL]     assertEquals(value[0], deserializedValue[0]); [EOL] }
public void testArrayOfPrimitivesWithCustomTypeAdapter() throws Exception { [EOL]     CrazyLongTypeAdapter typeAdapter = new CrazyLongTypeAdapter(); [EOL]     gson = new GsonBuilder().registerTypeAdapter(long.class, typeAdapter).registerTypeAdapter(Long.class, typeAdapter).create(); [EOL]     long[] value = { 1L }; [EOL]     String serializedValue = gson.toJson(value); [EOL]     String expected = "[" + String.valueOf(value[0] + CrazyLongTypeAdapter.DIFFERENCE) + "]"; [EOL]     assertEquals(expected, serializedValue); [EOL]     long[] deserializedValue = gson.fromJson(serializedValue, long[].class); [EOL]     assertEquals(1, deserializedValue.length); [EOL]     assertEquals(value[0], deserializedValue[0]); [EOL] }
public void testVersionedGsonWithUnversionedClassesDeserialization() { [EOL]     Gson gson = builder.setVersion(1.0).create(); [EOL]     String json = "{\"longValue\":10,\"intValue\":20,\"booleanValue\":false}"; [EOL]     BagOfPrimitives expected = new BagOfPrimitives(); [EOL]     expected.longValue = 10; [EOL]     expected.intValue = 20; [EOL]     expected.booleanValue = false; [EOL]     BagOfPrimitives actual = gson.fromJson(json, BagOfPrimitives.class); [EOL]     assertEquals(expected, actual); [EOL] }
public void testVersionedGsonWithUnversionedClassesDeserialization() { [EOL]     Gson gson = builder.setVersion(1.0).create(); [EOL]     String json = "{\"longValue\":10,\"intValue\":20,\"booleanValue\":false}"; [EOL]     BagOfPrimitives expected = new BagOfPrimitives(); [EOL]     expected.longValue = 10; [EOL]     expected.intValue = 20; [EOL]     expected.booleanValue = false; [EOL]     BagOfPrimitives actual = gson.fromJson(json, BagOfPrimitives.class); [EOL]     assertEquals(expected, actual); [EOL] }
public void testVersionedGsonWithUnversionedClassesDeserialization() { [EOL]     Gson gson = builder.setVersion(1.0).create(); [EOL]     String json = "{\"longValue\":10,\"intValue\":20,\"booleanValue\":false}"; [EOL]     BagOfPrimitives expected = new BagOfPrimitives(); [EOL]     expected.longValue = 10; [EOL]     expected.intValue = 20; [EOL]     expected.booleanValue = false; [EOL]     BagOfPrimitives actual = gson.fromJson(json, BagOfPrimitives.class); [EOL]     assertEquals(expected, actual); [EOL] }
public void testVersionedGsonWithUnversionedClassesDeserialization() { [EOL]     Gson gson = builder.setVersion(1.0).create(); [EOL]     String json = "{\"longValue\":10,\"intValue\":20,\"booleanValue\":false}"; [EOL]     BagOfPrimitives expected = new BagOfPrimitives(); [EOL]     expected.longValue = 10; [EOL]     expected.intValue = 20; [EOL]     expected.booleanValue = false; [EOL]     BagOfPrimitives actual = gson.fromJson(json, BagOfPrimitives.class); [EOL]     assertEquals(expected, actual); [EOL] }
public void testAllUpperCaseExceptFirst() throws Exception { [EOL]     assertEquals("U R L", namingPolicy.translateName("uRL", String.class, null)); [EOL] }
public void testAllUpperCaseExceptFirst() throws Exception { [EOL]     assertEquals("U R L", namingPolicy.translateName("uRL", String.class, null)); [EOL] }
public void testAllUpperCaseExceptFirst() throws Exception { [EOL]     assertEquals("U R L", namingPolicy.translateName("uRL", String.class, null)); [EOL] }
public void testAllUpperCaseExceptFirst() throws Exception { [EOL]     assertEquals("U R L", namingPolicy.translateName("uRL", String.class, null)); [EOL] }
public void testAllUpperCaseExceptFirst() throws Exception { [EOL]     assertEquals("U R L", namingPolicy.translateName("uRL", String.class, null)); [EOL] }
public void testPopTooMany() throws Exception { [EOL]     ObjectTypePair obj = new ObjectTypePair(this, getClass(), true); [EOL]     stack.push(obj); [EOL]     assertEquals(obj, stack.pop()); [EOL]     try { [EOL]         stack.pop(); [EOL]     } catch (EmptyStackException expected) { [EOL]     } [EOL] }
public void testPopTooMany() throws Exception { [EOL]     ObjectTypePair obj = new ObjectTypePair(this, getClass(), true); [EOL]     stack.push(obj); [EOL]     assertEquals(obj, stack.pop()); [EOL]     try { [EOL]         stack.pop(); [EOL]     } catch (EmptyStackException expected) { [EOL]     } [EOL] }
public void testPopTooMany() throws Exception { [EOL]     ObjectTypePair obj = new ObjectTypePair(this, getClass(), true); [EOL]     stack.push(obj); [EOL]     assertEquals(obj, stack.pop()); [EOL]     try { [EOL]         stack.pop(); [EOL]     } catch (EmptyStackException expected) { [EOL]     } [EOL] }
public void testPopTooMany() throws Exception { [EOL]     ObjectTypePair obj = new ObjectTypePair(this, getClass(), true); [EOL]     stack.push(obj); [EOL]     assertEquals(obj, stack.pop()); [EOL]     try { [EOL]         stack.pop(); [EOL]     } catch (EmptyStackException expected) { [EOL]     } [EOL] }
public void testPeekEmptyStack() throws Exception { [EOL]     try { [EOL]         stack.peek(); [EOL]     } catch (EmptyStackException expected) { [EOL]     } [EOL] }
public void testPeekEmptyStack() throws Exception { [EOL]     try { [EOL]         stack.peek(); [EOL]     } catch (EmptyStackException expected) { [EOL]     } [EOL] }
public void testDeclaringClass() throws Exception { [EOL]     assertEquals(Foo.class, fieldAttributes.getDeclaringClass()); [EOL] }
public void testDeclaredTypeAndClass() throws Exception { [EOL]     Type expectedType = new TypeToken<List<String>>() { [EOL]     }.getType(); [EOL]     assertEquals(expectedType, fieldAttributes.getDeclaredType()); [EOL]     assertEquals(List.class, fieldAttributes.getDeclaredClass()); [EOL] }
public void testDeclaredTypeAndClass() throws Exception { [EOL]     Type expectedType = new TypeToken<List<String>>() { [EOL]     }.getType(); [EOL]     assertEquals(expectedType, fieldAttributes.getDeclaredType()); [EOL]     assertEquals(List.class, fieldAttributes.getDeclaredClass()); [EOL] }
public void testDeclaredTypeAndClass() throws Exception { [EOL]     Type expectedType = new TypeToken<List<String>>() { [EOL]     }.getType(); [EOL]     assertEquals(expectedType, fieldAttributes.getDeclaredType()); [EOL]     assertEquals(List.class, fieldAttributes.getDeclaredClass()); [EOL] }
public void testNeverSkipExplicitlyExposedAnnotatedFields() throws Exception { [EOL]     Field f = MockObject.class.getField("explicitlyExposedField"); [EOL]     assertFalse(strategy.shouldSkipField(new FieldAttributes(MockObject.class, f))); [EOL] }
public void testNeverSkipExplicitlyExposedAnnotatedFields() throws Exception { [EOL]     Field f = MockObject.class.getField("explicitlyExposedField"); [EOL]     assertFalse(strategy.shouldSkipField(new FieldAttributes(MockObject.class, f))); [EOL] }
public void testNeverSkipExplicitlyExposedAnnotatedFields() throws Exception { [EOL]     Field f = MockObject.class.getField("explicitlyExposedField"); [EOL]     assertFalse(strategy.shouldSkipField(new FieldAttributes(MockObject.class, f))); [EOL] }
public void testNeverSkipExplicitlyExposedAnnotatedFields() throws Exception { [EOL]     Field f = MockObject.class.getField("explicitlyExposedField"); [EOL]     assertFalse(strategy.shouldSkipField(new FieldAttributes(MockObject.class, f))); [EOL] }
public void testNeverSkipExplicitlyExposedAnnotatedFields() throws Exception { [EOL]     Field f = MockObject.class.getField("explicitlyExposedField"); [EOL]     assertFalse(strategy.shouldSkipField(new FieldAttributes(MockObject.class, f))); [EOL] }
public void testBoolean() throws Exception { [EOL]     JsonPrimitive json = new JsonPrimitive(Boolean.TRUE); [EOL]     assertTrue(json.isBoolean()); [EOL]     assertTrue(json.getAsBoolean()); [EOL] }
public void testBoolean() throws Exception { [EOL]     JsonPrimitive json = new JsonPrimitive(Boolean.TRUE); [EOL]     assertTrue(json.isBoolean()); [EOL]     assertTrue(json.getAsBoolean()); [EOL] }
public void testBoolean() throws Exception { [EOL]     JsonPrimitive json = new JsonPrimitive(Boolean.TRUE); [EOL]     assertTrue(json.isBoolean()); [EOL]     assertTrue(json.getAsBoolean()); [EOL] }
public void testBoolean() throws Exception { [EOL]     JsonPrimitive json = new JsonPrimitive(Boolean.TRUE); [EOL]     assertTrue(json.isBoolean()); [EOL]     assertTrue(json.getAsBoolean()); [EOL] }
public void testBoolean() throws Exception { [EOL]     JsonPrimitive json = new JsonPrimitive(Boolean.TRUE); [EOL]     assertTrue(json.isBoolean()); [EOL]     assertTrue(json.getAsBoolean()); [EOL] }
public void testBoolean() throws Exception { [EOL]     JsonPrimitive json = new JsonPrimitive(Boolean.TRUE); [EOL]     assertTrue(json.isBoolean()); [EOL]     assertTrue(json.getAsBoolean()); [EOL] }
public void testBoolean() throws Exception { [EOL]     JsonPrimitive json = new JsonPrimitive(Boolean.TRUE); [EOL]     assertTrue(json.isBoolean()); [EOL]     assertTrue(json.getAsBoolean()); [EOL] }
public void testBoolean() throws Exception { [EOL]     JsonPrimitive json = new JsonPrimitive(Boolean.TRUE); [EOL]     assertTrue(json.isBoolean()); [EOL]     assertTrue(json.getAsBoolean()); [EOL] }
public void testBoolean() throws Exception { [EOL]     JsonPrimitive json = new JsonPrimitive(Boolean.TRUE); [EOL]     assertTrue(json.isBoolean()); [EOL]     assertTrue(json.getAsBoolean()); [EOL] }
public void testBoolean() throws Exception { [EOL]     JsonPrimitive json = new JsonPrimitive(Boolean.TRUE); [EOL]     assertTrue(json.isBoolean()); [EOL]     assertTrue(json.getAsBoolean()); [EOL] }
public void testBoolean() throws Exception { [EOL]     JsonPrimitive json = new JsonPrimitive(Boolean.TRUE); [EOL]     assertTrue(json.isBoolean()); [EOL]     assertTrue(json.getAsBoolean()); [EOL] }
public void testBoolean() throws Exception { [EOL]     JsonPrimitive json = new JsonPrimitive(Boolean.TRUE); [EOL]     assertTrue(json.isBoolean()); [EOL]     assertTrue(json.getAsBoolean()); [EOL] }
public void testBoolean() throws Exception { [EOL]     JsonPrimitive json = new JsonPrimitive(Boolean.TRUE); [EOL]     assertTrue(json.isBoolean()); [EOL]     assertTrue(json.getAsBoolean()); [EOL] }
public void testBoolean() throws Exception { [EOL]     JsonPrimitive json = new JsonPrimitive(Boolean.TRUE); [EOL]     assertTrue(json.isBoolean()); [EOL]     assertTrue(json.getAsBoolean()); [EOL] }
public void testBoolean() throws Exception { [EOL]     JsonPrimitive json = new JsonPrimitive(Boolean.TRUE); [EOL]     assertTrue(json.isBoolean()); [EOL]     assertTrue(json.getAsBoolean()); [EOL] }
public void testBoolean() throws Exception { [EOL]     JsonPrimitive json = new JsonPrimitive(Boolean.TRUE); [EOL]     assertTrue(json.isBoolean()); [EOL]     assertTrue(json.getAsBoolean()); [EOL] }
public void testBoolean() throws Exception { [EOL]     JsonPrimitive json = new JsonPrimitive(Boolean.TRUE); [EOL]     assertTrue(json.isBoolean()); [EOL]     assertTrue(json.getAsBoolean()); [EOL] }
public void testBoolean() throws Exception { [EOL]     JsonPrimitive json = new JsonPrimitive(Boolean.TRUE); [EOL]     assertTrue(json.isBoolean()); [EOL]     assertTrue(json.getAsBoolean()); [EOL] }
public void testBoolean() throws Exception { [EOL]     JsonPrimitive json = new JsonPrimitive(Boolean.TRUE); [EOL]     assertTrue(json.isBoolean()); [EOL]     assertTrue(json.getAsBoolean()); [EOL] }
public void testBoolean() throws Exception { [EOL]     JsonPrimitive json = new JsonPrimitive(Boolean.TRUE); [EOL]     assertTrue(json.isBoolean()); [EOL]     assertTrue(json.getAsBoolean()); [EOL] }
public void testBoolean() throws Exception { [EOL]     JsonPrimitive json = new JsonPrimitive(Boolean.TRUE); [EOL]     assertTrue(json.isBoolean()); [EOL]     assertTrue(json.getAsBoolean()); [EOL] }
public void testBoolean() throws Exception { [EOL]     JsonPrimitive json = new JsonPrimitive(Boolean.TRUE); [EOL]     assertTrue(json.isBoolean()); [EOL]     assertTrue(json.getAsBoolean()); [EOL] }
public void testBoolean() throws Exception { [EOL]     JsonPrimitive json = new JsonPrimitive(Boolean.TRUE); [EOL]     assertTrue(json.isBoolean()); [EOL]     assertTrue(json.getAsBoolean()); [EOL] }
public void testBoolean() throws Exception { [EOL]     JsonPrimitive json = new JsonPrimitive(Boolean.TRUE); [EOL]     assertTrue(json.isBoolean()); [EOL]     assertTrue(json.getAsBoolean()); [EOL] }
public void testBoolean() throws Exception { [EOL]     JsonPrimitive json = new JsonPrimitive(Boolean.TRUE); [EOL]     assertTrue(json.isBoolean()); [EOL]     assertTrue(json.getAsBoolean()); [EOL] }
public void testBoolean() throws Exception { [EOL]     JsonPrimitive json = new JsonPrimitive(Boolean.TRUE); [EOL]     assertTrue(json.isBoolean()); [EOL]     assertTrue(json.getAsBoolean()); [EOL] }
public void testBoolean() throws Exception { [EOL]     JsonPrimitive json = new JsonPrimitive(Boolean.TRUE); [EOL]     assertTrue(json.isBoolean()); [EOL]     assertTrue(json.getAsBoolean()); [EOL] }
public void testBoolean() throws Exception { [EOL]     JsonPrimitive json = new JsonPrimitive(Boolean.TRUE); [EOL]     assertTrue(json.isBoolean()); [EOL]     assertTrue(json.getAsBoolean()); [EOL] }
public void testBoolean() throws Exception { [EOL]     JsonPrimitive json = new JsonPrimitive(Boolean.TRUE); [EOL]     assertTrue(json.isBoolean()); [EOL]     assertTrue(json.getAsBoolean()); [EOL] }
public void testBoolean() throws Exception { [EOL]     JsonPrimitive json = new JsonPrimitive(Boolean.TRUE); [EOL]     assertTrue(json.isBoolean()); [EOL]     assertTrue(json.getAsBoolean()); [EOL] }
public void testBoolean() throws Exception { [EOL]     JsonPrimitive json = new JsonPrimitive(Boolean.TRUE); [EOL]     assertTrue(json.isBoolean()); [EOL]     assertTrue(json.getAsBoolean()); [EOL] }
public void testBoolean() throws Exception { [EOL]     JsonPrimitive json = new JsonPrimitive(Boolean.TRUE); [EOL]     assertTrue(json.isBoolean()); [EOL]     assertTrue(json.getAsBoolean()); [EOL] }
public void testBoolean() throws Exception { [EOL]     JsonPrimitive json = new JsonPrimitive(Boolean.TRUE); [EOL]     assertTrue(json.isBoolean()); [EOL]     assertTrue(json.getAsBoolean()); [EOL] }
public void testBoolean() throws Exception { [EOL]     JsonPrimitive json = new JsonPrimitive(Boolean.TRUE); [EOL]     assertTrue(json.isBoolean()); [EOL]     assertTrue(json.getAsBoolean()); [EOL] }
public void testBoolean() throws Exception { [EOL]     JsonPrimitive json = new JsonPrimitive(Boolean.TRUE); [EOL]     assertTrue(json.isBoolean()); [EOL]     assertTrue(json.getAsBoolean()); [EOL] }
public void testBoolean() throws Exception { [EOL]     JsonPrimitive json = new JsonPrimitive(Boolean.TRUE); [EOL]     assertTrue(json.isBoolean()); [EOL]     assertTrue(json.getAsBoolean()); [EOL] }
public void testBoolean() throws Exception { [EOL]     JsonPrimitive json = new JsonPrimitive(Boolean.TRUE); [EOL]     assertTrue(json.isBoolean()); [EOL]     assertTrue(json.getAsBoolean()); [EOL] }
public void testBoolean() throws Exception { [EOL]     JsonPrimitive json = new JsonPrimitive(Boolean.TRUE); [EOL]     assertTrue(json.isBoolean()); [EOL]     assertTrue(json.getAsBoolean()); [EOL] }
public void testBoolean() throws Exception { [EOL]     JsonPrimitive json = new JsonPrimitive(Boolean.TRUE); [EOL]     assertTrue(json.isBoolean()); [EOL]     assertTrue(json.getAsBoolean()); [EOL] }
public void testBoolean() throws Exception { [EOL]     JsonPrimitive json = new JsonPrimitive(Boolean.TRUE); [EOL]     assertTrue(json.isBoolean()); [EOL]     assertTrue(json.getAsBoolean()); [EOL] }
public void testBoolean() throws Exception { [EOL]     JsonPrimitive json = new JsonPrimitive(Boolean.TRUE); [EOL]     assertTrue(json.isBoolean()); [EOL]     assertTrue(json.getAsBoolean()); [EOL] }
public void testBoolean() throws Exception { [EOL]     JsonPrimitive json = new JsonPrimitive(Boolean.TRUE); [EOL]     assertTrue(json.isBoolean()); [EOL]     assertTrue(json.getAsBoolean()); [EOL] }
public void testBoolean() throws Exception { [EOL]     JsonPrimitive json = new JsonPrimitive(Boolean.TRUE); [EOL]     assertTrue(json.isBoolean()); [EOL]     assertTrue(json.getAsBoolean()); [EOL] }
public void testBoolean() throws Exception { [EOL]     JsonPrimitive json = new JsonPrimitive(Boolean.TRUE); [EOL]     assertTrue(json.isBoolean()); [EOL]     assertTrue(json.getAsBoolean()); [EOL] }
public void testBoolean() throws Exception { [EOL]     JsonPrimitive json = new JsonPrimitive(Boolean.TRUE); [EOL]     assertTrue(json.isBoolean()); [EOL]     assertTrue(json.getAsBoolean()); [EOL] }
public void testBoolean() throws Exception { [EOL]     JsonPrimitive json = new JsonPrimitive(Boolean.TRUE); [EOL]     assertTrue(json.isBoolean()); [EOL]     assertTrue(json.getAsBoolean()); [EOL] }
public void testBoolean() throws Exception { [EOL]     JsonPrimitive json = new JsonPrimitive(Boolean.TRUE); [EOL]     assertTrue(json.isBoolean()); [EOL]     assertTrue(json.getAsBoolean()); [EOL] }
public void testBoolean() throws Exception { [EOL]     JsonPrimitive json = new JsonPrimitive(Boolean.TRUE); [EOL]     assertTrue(json.isBoolean()); [EOL]     assertTrue(json.getAsBoolean()); [EOL] }
public void testBoolean() throws Exception { [EOL]     JsonPrimitive json = new JsonPrimitive(Boolean.TRUE); [EOL]     assertTrue(json.isBoolean()); [EOL]     assertTrue(json.getAsBoolean()); [EOL] }
public void testNeverSkipExplicitlyExposedAnnotatedFields() throws Exception { [EOL]     Field f = MockObject.class.getField("explicitlyExposedField"); [EOL]     assertFalse(strategy.shouldSkipField(new FieldAttributes(MockObject.class, f))); [EOL] }
public void testNeverSkipExplicitlyExposedAnnotatedFields() throws Exception { [EOL]     Field f = MockObject.class.getField("explicitlyExposedField"); [EOL]     assertFalse(strategy.shouldSkipField(new FieldAttributes(MockObject.class, f))); [EOL] }
public void testNeverSkipExplicitlyExposedAnnotatedFields() throws Exception { [EOL]     Field f = MockObject.class.getField("explicitlyExposedField"); [EOL]     assertFalse(strategy.shouldSkipField(new FieldAttributes(MockObject.class, f))); [EOL] }
public void testCustomAdapterInvokedForMapElementSerialization() { [EOL]     Gson gson = new GsonBuilder().registerTypeAdapter(StringHolder.class, new StringHolderTypeAdapter()).create(); [EOL]     StringHolder holder = new StringHolder("Jacob", "Tomaw"); [EOL]     Map<String, StringHolder> mapOfHolders = new HashMap<String, StringHolder>(); [EOL]     mapOfHolders.put("foo", holder); [EOL]     String json = gson.toJson(mapOfHolders); [EOL]     assertTrue(json.contains("\"foo\":\"Jacob:Tomaw\"")); [EOL] }
public void testCustomAdapterInvokedForMapElementSerialization() { [EOL]     Gson gson = new GsonBuilder().registerTypeAdapter(StringHolder.class, new StringHolderTypeAdapter()).create(); [EOL]     StringHolder holder = new StringHolder("Jacob", "Tomaw"); [EOL]     Map<String, StringHolder> mapOfHolders = new HashMap<String, StringHolder>(); [EOL]     mapOfHolders.put("foo", holder); [EOL]     String json = gson.toJson(mapOfHolders); [EOL]     assertTrue(json.contains("\"foo\":\"Jacob:Tomaw\"")); [EOL] }
public void testObjectArrayWithNonPrimitivesSerialization() throws Exception { [EOL]     ClassWithObjects classWithObjects = new ClassWithObjects(); [EOL]     BagOfPrimitives bagOfPrimitives = new BagOfPrimitives(); [EOL]     String classWithObjectsJson = gson.toJson(classWithObjects); [EOL]     String bagOfPrimitivesJson = gson.toJson(bagOfPrimitives); [EOL]     Object[] objects = new Object[] { classWithObjects, bagOfPrimitives }; [EOL]     String json = gson.toJson(objects); [EOL]     assertTrue(json.contains(classWithObjectsJson)); [EOL]     assertTrue(json.contains(bagOfPrimitivesJson)); [EOL] }
public void testObjectArrayWithNonPrimitivesSerialization() throws Exception { [EOL]     ClassWithObjects classWithObjects = new ClassWithObjects(); [EOL]     BagOfPrimitives bagOfPrimitives = new BagOfPrimitives(); [EOL]     String classWithObjectsJson = gson.toJson(classWithObjects); [EOL]     String bagOfPrimitivesJson = gson.toJson(bagOfPrimitives); [EOL]     Object[] objects = new Object[] { classWithObjects, bagOfPrimitives }; [EOL]     String json = gson.toJson(objects); [EOL]     assertTrue(json.contains(classWithObjectsJson)); [EOL]     assertTrue(json.contains(bagOfPrimitivesJson)); [EOL] }
public void testObjectArrayWithNonPrimitivesSerialization() throws Exception { [EOL]     ClassWithObjects classWithObjects = new ClassWithObjects(); [EOL]     BagOfPrimitives bagOfPrimitives = new BagOfPrimitives(); [EOL]     String classWithObjectsJson = gson.toJson(classWithObjects); [EOL]     String bagOfPrimitivesJson = gson.toJson(bagOfPrimitives); [EOL]     Object[] objects = new Object[] { classWithObjects, bagOfPrimitives }; [EOL]     String json = gson.toJson(objects); [EOL]     assertTrue(json.contains(classWithObjectsJson)); [EOL]     assertTrue(json.contains(bagOfPrimitivesJson)); [EOL] }
public void testPopTooMany() throws Exception { [EOL]     ObjectTypePair obj = new ObjectTypePair(this, getClass(), true); [EOL]     stack.push(obj); [EOL]     assertEquals(obj, stack.pop()); [EOL]     try { [EOL]         stack.pop(); [EOL]     } catch (EmptyStackException expected) { [EOL]     } [EOL] }
public void testIncludeStaticNestedClassObject() throws Exception { [EOL]     Class<?> clazz = staticNestedClass.getClass(); [EOL]     assertFalse(strategy.shouldSkipClass(clazz)); [EOL] }
public void testIncludeStaticNestedClassObject() throws Exception { [EOL]     Class<?> clazz = staticNestedClass.getClass(); [EOL]     assertFalse(strategy.shouldSkipClass(clazz)); [EOL] }
