@Test [EOL] public void attributes() { [EOL]     String h = "<p title=foo><p title=bar><p class=foo><p class=bar>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements withTitle = doc.select("p[title]"); [EOL]     assertEquals(2, withTitle.size()); [EOL]     assertTrue(withTitle.hasAttr("title")); [EOL]     assertFalse(withTitle.hasAttr("class")); [EOL]     assertEquals("foo", withTitle.attr("title")); [EOL]     withTitle.removeAttr("title"); [EOL]     assertEquals(2, withTitle.size()); [EOL]     assertEquals(0, doc.select("p[title]").size()); [EOL]     Elements ps = doc.select("p").attr("style", "classy"); [EOL]     assertEquals(4, ps.size()); [EOL]     assertEquals("classy", ps.last().attr("style")); [EOL]     assertEquals("bar", ps.last().attr("class")); [EOL] }
@Test [EOL] public void attributes() { [EOL]     String h = "<p title=foo><p title=bar><p class=foo><p class=bar>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements withTitle = doc.select("p[title]"); [EOL]     assertEquals(2, withTitle.size()); [EOL]     assertTrue(withTitle.hasAttr("title")); [EOL]     assertFalse(withTitle.hasAttr("class")); [EOL]     assertEquals("foo", withTitle.attr("title")); [EOL]     withTitle.removeAttr("title"); [EOL]     assertEquals(2, withTitle.size()); [EOL]     assertEquals(0, doc.select("p[title]").size()); [EOL]     Elements ps = doc.select("p").attr("style", "classy"); [EOL]     assertEquals(4, ps.size()); [EOL]     assertEquals("classy", ps.last().attr("style")); [EOL]     assertEquals("bar", ps.last().attr("class")); [EOL] }
@Test [EOL] public void attributes() { [EOL]     String h = "<p title=foo><p title=bar><p class=foo><p class=bar>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements withTitle = doc.select("p[title]"); [EOL]     assertEquals(2, withTitle.size()); [EOL]     assertTrue(withTitle.hasAttr("title")); [EOL]     assertFalse(withTitle.hasAttr("class")); [EOL]     assertEquals("foo", withTitle.attr("title")); [EOL]     withTitle.removeAttr("title"); [EOL]     assertEquals(2, withTitle.size()); [EOL]     assertEquals(0, doc.select("p[title]").size()); [EOL]     Elements ps = doc.select("p").attr("style", "classy"); [EOL]     assertEquals(4, ps.size()); [EOL]     assertEquals("classy", ps.last().attr("style")); [EOL]     assertEquals("bar", ps.last().attr("class")); [EOL] }
@Test [EOL] public void testRemove() { [EOL]     Document doc = Jsoup.parse("<p>One <span>two</span> three</p>"); [EOL]     Element p = doc.select("p").first(); [EOL]     p.childNode(0).remove(); [EOL]     assertEquals("two three", p.text()); [EOL]     assertEquals("<span>two</span> three", p.html()); [EOL] }
@Test [EOL] public void testRemove() { [EOL]     Document doc = Jsoup.parse("<p>One <span>two</span> three</p>"); [EOL]     Element p = doc.select("p").first(); [EOL]     p.childNode(0).remove(); [EOL]     assertEquals("two three", p.text()); [EOL]     assertEquals("<span>two</span> three", p.html()); [EOL] }
@Test [EOL] public void testRemove() { [EOL]     Document doc = Jsoup.parse("<p>One <span>two</span> three</p>"); [EOL]     Element p = doc.select("p").first(); [EOL]     p.childNode(0).remove(); [EOL]     assertEquals("two three", p.text()); [EOL]     assertEquals("<span>two</span> three", p.html()); [EOL] }
@Test [EOL] public void testRemove() { [EOL]     Document doc = Jsoup.parse("<p>One <span>two</span> three</p>"); [EOL]     Element p = doc.select("p").first(); [EOL]     p.childNode(0).remove(); [EOL]     assertEquals("two three", p.text()); [EOL]     assertEquals("<span>two</span> three", p.html()); [EOL] }
@Test [EOL] public void testRemove() { [EOL]     Document doc = Jsoup.parse("<p>One <span>two</span> three</p>"); [EOL]     Element p = doc.select("p").first(); [EOL]     p.childNode(0).remove(); [EOL]     assertEquals("two three", p.text()); [EOL]     assertEquals("<span>two</span> three", p.html()); [EOL] }
@Test [EOL] public void attributes() { [EOL]     String h = "<p title=foo><p title=bar><p class=foo><p class=bar>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements withTitle = doc.select("p[title]"); [EOL]     assertEquals(2, withTitle.size()); [EOL]     assertTrue(withTitle.hasAttr("title")); [EOL]     assertFalse(withTitle.hasAttr("class")); [EOL]     assertEquals("foo", withTitle.attr("title")); [EOL]     withTitle.removeAttr("title"); [EOL]     assertEquals(2, withTitle.size()); [EOL]     assertEquals(0, doc.select("p[title]").size()); [EOL]     Elements ps = doc.select("p").attr("style", "classy"); [EOL]     assertEquals(4, ps.size()); [EOL]     assertEquals("classy", ps.last().attr("style")); [EOL]     assertEquals("bar", ps.last().attr("class")); [EOL] }
@Test [EOL] public void attributes() { [EOL]     String h = "<p title=foo><p title=bar><p class=foo><p class=bar>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements withTitle = doc.select("p[title]"); [EOL]     assertEquals(2, withTitle.size()); [EOL]     assertTrue(withTitle.hasAttr("title")); [EOL]     assertFalse(withTitle.hasAttr("class")); [EOL]     assertEquals("foo", withTitle.attr("title")); [EOL]     withTitle.removeAttr("title"); [EOL]     assertEquals(2, withTitle.size()); [EOL]     assertEquals(0, doc.select("p[title]").size()); [EOL]     Elements ps = doc.select("p").attr("style", "classy"); [EOL]     assertEquals(4, ps.size()); [EOL]     assertEquals("classy", ps.last().attr("style")); [EOL]     assertEquals("bar", ps.last().attr("class")); [EOL] }
@Test [EOL] public void attributes() { [EOL]     String h = "<p title=foo><p title=bar><p class=foo><p class=bar>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements withTitle = doc.select("p[title]"); [EOL]     assertEquals(2, withTitle.size()); [EOL]     assertTrue(withTitle.hasAttr("title")); [EOL]     assertFalse(withTitle.hasAttr("class")); [EOL]     assertEquals("foo", withTitle.attr("title")); [EOL]     withTitle.removeAttr("title"); [EOL]     assertEquals(2, withTitle.size()); [EOL]     assertEquals(0, doc.select("p[title]").size()); [EOL]     Elements ps = doc.select("p").attr("style", "classy"); [EOL]     assertEquals(4, ps.size()); [EOL]     assertEquals("classy", ps.last().attr("style")); [EOL]     assertEquals("bar", ps.last().attr("class")); [EOL] }
@Test [EOL] public void attributes() { [EOL]     String h = "<p title=foo><p title=bar><p class=foo><p class=bar>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements withTitle = doc.select("p[title]"); [EOL]     assertEquals(2, withTitle.size()); [EOL]     assertTrue(withTitle.hasAttr("title")); [EOL]     assertFalse(withTitle.hasAttr("class")); [EOL]     assertEquals("foo", withTitle.attr("title")); [EOL]     withTitle.removeAttr("title"); [EOL]     assertEquals(2, withTitle.size()); [EOL]     assertEquals(0, doc.select("p[title]").size()); [EOL]     Elements ps = doc.select("p").attr("style", "classy"); [EOL]     assertEquals(4, ps.size()); [EOL]     assertEquals("classy", ps.last().attr("style")); [EOL]     assertEquals("bar", ps.last().attr("class")); [EOL] }
@Test [EOL] public void attributes() { [EOL]     String h = "<p title=foo><p title=bar><p class=foo><p class=bar>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements withTitle = doc.select("p[title]"); [EOL]     assertEquals(2, withTitle.size()); [EOL]     assertTrue(withTitle.hasAttr("title")); [EOL]     assertFalse(withTitle.hasAttr("class")); [EOL]     assertEquals("foo", withTitle.attr("title")); [EOL]     withTitle.removeAttr("title"); [EOL]     assertEquals(2, withTitle.size()); [EOL]     assertEquals(0, doc.select("p[title]").size()); [EOL]     Elements ps = doc.select("p").attr("style", "classy"); [EOL]     assertEquals(4, ps.size()); [EOL]     assertEquals("classy", ps.last().attr("style")); [EOL]     assertEquals("bar", ps.last().attr("class")); [EOL] }
@Test [EOL] public void attributes() { [EOL]     String h = "<p title=foo><p title=bar><p class=foo><p class=bar>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements withTitle = doc.select("p[title]"); [EOL]     assertEquals(2, withTitle.size()); [EOL]     assertTrue(withTitle.hasAttr("title")); [EOL]     assertFalse(withTitle.hasAttr("class")); [EOL]     assertEquals("foo", withTitle.attr("title")); [EOL]     withTitle.removeAttr("title"); [EOL]     assertEquals(2, withTitle.size()); [EOL]     assertEquals(0, doc.select("p[title]").size()); [EOL]     Elements ps = doc.select("p").attr("style", "classy"); [EOL]     assertEquals(4, ps.size()); [EOL]     assertEquals("classy", ps.last().attr("style")); [EOL]     assertEquals("bar", ps.last().attr("class")); [EOL] }
@Test [EOL] public void classes() { [EOL]     Document doc = Jsoup.parse("<div><p class='mellow yellow'></p><p class='red green'></p>"); [EOL]     Elements els = doc.select("p"); [EOL]     assertTrue(els.hasClass("red")); [EOL]     assertFalse(els.hasClass("blue")); [EOL]     els.addClass("blue"); [EOL]     els.removeClass("yellow"); [EOL]     els.toggleClass("mellow"); [EOL]     assertEquals("blue", els.get(0).className()); [EOL]     assertEquals("red green blue mellow", els.get(1).className()); [EOL] }
@Test [EOL] public void classes() { [EOL]     Document doc = Jsoup.parse("<div><p class='mellow yellow'></p><p class='red green'></p>"); [EOL]     Elements els = doc.select("p"); [EOL]     assertTrue(els.hasClass("red")); [EOL]     assertFalse(els.hasClass("blue")); [EOL]     els.addClass("blue"); [EOL]     els.removeClass("yellow"); [EOL]     els.toggleClass("mellow"); [EOL]     assertEquals("blue", els.get(0).className()); [EOL]     assertEquals("red green blue mellow", els.get(1).className()); [EOL] }
@Test [EOL] public void classes() { [EOL]     Document doc = Jsoup.parse("<div><p class='mellow yellow'></p><p class='red green'></p>"); [EOL]     Elements els = doc.select("p"); [EOL]     assertTrue(els.hasClass("red")); [EOL]     assertFalse(els.hasClass("blue")); [EOL]     els.addClass("blue"); [EOL]     els.removeClass("yellow"); [EOL]     els.toggleClass("mellow"); [EOL]     assertEquals("blue", els.get(0).className()); [EOL]     assertEquals("red green blue mellow", els.get(1).className()); [EOL] }
@Test [EOL] public void classes() { [EOL]     Document doc = Jsoup.parse("<div><p class='mellow yellow'></p><p class='red green'></p>"); [EOL]     Elements els = doc.select("p"); [EOL]     assertTrue(els.hasClass("red")); [EOL]     assertFalse(els.hasClass("blue")); [EOL]     els.addClass("blue"); [EOL]     els.removeClass("yellow"); [EOL]     els.toggleClass("mellow"); [EOL]     assertEquals("blue", els.get(0).className()); [EOL]     assertEquals("red green blue mellow", els.get(1).className()); [EOL] }
@Test [EOL] public void classes() { [EOL]     Document doc = Jsoup.parse("<div><p class='mellow yellow'></p><p class='red green'></p>"); [EOL]     Elements els = doc.select("p"); [EOL]     assertTrue(els.hasClass("red")); [EOL]     assertFalse(els.hasClass("blue")); [EOL]     els.addClass("blue"); [EOL]     els.removeClass("yellow"); [EOL]     els.toggleClass("mellow"); [EOL]     assertEquals("blue", els.get(0).className()); [EOL]     assertEquals("red green blue mellow", els.get(1).className()); [EOL] }
@Test [EOL] public void classes() { [EOL]     Document doc = Jsoup.parse("<div><p class='mellow yellow'></p><p class='red green'></p>"); [EOL]     Elements els = doc.select("p"); [EOL]     assertTrue(els.hasClass("red")); [EOL]     assertFalse(els.hasClass("blue")); [EOL]     els.addClass("blue"); [EOL]     els.removeClass("yellow"); [EOL]     els.toggleClass("mellow"); [EOL]     assertEquals("blue", els.get(0).className()); [EOL]     assertEquals("red green blue mellow", els.get(1).className()); [EOL] }
@Test [EOL] public void classes() { [EOL]     Document doc = Jsoup.parse("<div><p class='mellow yellow'></p><p class='red green'></p>"); [EOL]     Elements els = doc.select("p"); [EOL]     assertTrue(els.hasClass("red")); [EOL]     assertFalse(els.hasClass("blue")); [EOL]     els.addClass("blue"); [EOL]     els.removeClass("yellow"); [EOL]     els.toggleClass("mellow"); [EOL]     assertEquals("blue", els.get(0).className()); [EOL]     assertEquals("red green blue mellow", els.get(1).className()); [EOL] }
@Test [EOL] public void classes() { [EOL]     Document doc = Jsoup.parse("<div><p class='mellow yellow'></p><p class='red green'></p>"); [EOL]     Elements els = doc.select("p"); [EOL]     assertTrue(els.hasClass("red")); [EOL]     assertFalse(els.hasClass("blue")); [EOL]     els.addClass("blue"); [EOL]     els.removeClass("yellow"); [EOL]     els.toggleClass("mellow"); [EOL]     assertEquals("blue", els.get(0).className()); [EOL]     assertEquals("red green blue mellow", els.get(1).className()); [EOL] }
@Test [EOL] public void classes() { [EOL]     Document doc = Jsoup.parse("<div><p class='mellow yellow'></p><p class='red green'></p>"); [EOL]     Elements els = doc.select("p"); [EOL]     assertTrue(els.hasClass("red")); [EOL]     assertFalse(els.hasClass("blue")); [EOL]     els.addClass("blue"); [EOL]     els.removeClass("yellow"); [EOL]     els.toggleClass("mellow"); [EOL]     assertEquals("blue", els.get(0).className()); [EOL]     assertEquals("red green blue mellow", els.get(1).className()); [EOL] }
@Test [EOL] public void classes() { [EOL]     Document doc = Jsoup.parse("<div><p class='mellow yellow'></p><p class='red green'></p>"); [EOL]     Elements els = doc.select("p"); [EOL]     assertTrue(els.hasClass("red")); [EOL]     assertFalse(els.hasClass("blue")); [EOL]     els.addClass("blue"); [EOL]     els.removeClass("yellow"); [EOL]     els.toggleClass("mellow"); [EOL]     assertEquals("blue", els.get(0).className()); [EOL]     assertEquals("red green blue mellow", els.get(1).className()); [EOL] }
@Test [EOL] public void classes() { [EOL]     Document doc = Jsoup.parse("<div><p class='mellow yellow'></p><p class='red green'></p>"); [EOL]     Elements els = doc.select("p"); [EOL]     assertTrue(els.hasClass("red")); [EOL]     assertFalse(els.hasClass("blue")); [EOL]     els.addClass("blue"); [EOL]     els.removeClass("yellow"); [EOL]     els.toggleClass("mellow"); [EOL]     assertEquals("blue", els.get(0).className()); [EOL]     assertEquals("red green blue mellow", els.get(1).className()); [EOL] }
@Test [EOL] public void classes() { [EOL]     Document doc = Jsoup.parse("<div><p class='mellow yellow'></p><p class='red green'></p>"); [EOL]     Elements els = doc.select("p"); [EOL]     assertTrue(els.hasClass("red")); [EOL]     assertFalse(els.hasClass("blue")); [EOL]     els.addClass("blue"); [EOL]     els.removeClass("yellow"); [EOL]     els.toggleClass("mellow"); [EOL]     assertEquals("blue", els.get(0).className()); [EOL]     assertEquals("red green blue mellow", els.get(1).className()); [EOL] }
@Test [EOL] public void classes() { [EOL]     Document doc = Jsoup.parse("<div><p class='mellow yellow'></p><p class='red green'></p>"); [EOL]     Elements els = doc.select("p"); [EOL]     assertTrue(els.hasClass("red")); [EOL]     assertFalse(els.hasClass("blue")); [EOL]     els.addClass("blue"); [EOL]     els.removeClass("yellow"); [EOL]     els.toggleClass("mellow"); [EOL]     assertEquals("blue", els.get(0).className()); [EOL]     assertEquals("red green blue mellow", els.get(1).className()); [EOL] }
@Test [EOL] public void classes() { [EOL]     Document doc = Jsoup.parse("<div><p class='mellow yellow'></p><p class='red green'></p>"); [EOL]     Elements els = doc.select("p"); [EOL]     assertTrue(els.hasClass("red")); [EOL]     assertFalse(els.hasClass("blue")); [EOL]     els.addClass("blue"); [EOL]     els.removeClass("yellow"); [EOL]     els.toggleClass("mellow"); [EOL]     assertEquals("blue", els.get(0).className()); [EOL]     assertEquals("red green blue mellow", els.get(1).className()); [EOL] }
@Test [EOL] public void attributes() { [EOL]     String h = "<p title=foo><p title=bar><p class=foo><p class=bar>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements withTitle = doc.select("p[title]"); [EOL]     assertEquals(2, withTitle.size()); [EOL]     assertTrue(withTitle.hasAttr("title")); [EOL]     assertFalse(withTitle.hasAttr("class")); [EOL]     assertEquals("foo", withTitle.attr("title")); [EOL]     withTitle.removeAttr("title"); [EOL]     assertEquals(2, withTitle.size()); [EOL]     assertEquals(0, doc.select("p[title]").size()); [EOL]     Elements ps = doc.select("p").attr("style", "classy"); [EOL]     assertEquals(4, ps.size()); [EOL]     assertEquals("classy", ps.last().attr("style")); [EOL]     assertEquals("bar", ps.last().attr("class")); [EOL] }
@Test [EOL] public void attributes() { [EOL]     String h = "<p title=foo><p title=bar><p class=foo><p class=bar>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements withTitle = doc.select("p[title]"); [EOL]     assertEquals(2, withTitle.size()); [EOL]     assertTrue(withTitle.hasAttr("title")); [EOL]     assertFalse(withTitle.hasAttr("class")); [EOL]     assertEquals("foo", withTitle.attr("title")); [EOL]     withTitle.removeAttr("title"); [EOL]     assertEquals(2, withTitle.size()); [EOL]     assertEquals(0, doc.select("p[title]").size()); [EOL]     Elements ps = doc.select("p").attr("style", "classy"); [EOL]     assertEquals(4, ps.size()); [EOL]     assertEquals("classy", ps.last().attr("style")); [EOL]     assertEquals("bar", ps.last().attr("class")); [EOL] }
@Test [EOL] public void attributes() { [EOL]     String h = "<p title=foo><p title=bar><p class=foo><p class=bar>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements withTitle = doc.select("p[title]"); [EOL]     assertEquals(2, withTitle.size()); [EOL]     assertTrue(withTitle.hasAttr("title")); [EOL]     assertFalse(withTitle.hasAttr("class")); [EOL]     assertEquals("foo", withTitle.attr("title")); [EOL]     withTitle.removeAttr("title"); [EOL]     assertEquals(2, withTitle.size()); [EOL]     assertEquals(0, doc.select("p[title]").size()); [EOL]     Elements ps = doc.select("p").attr("style", "classy"); [EOL]     assertEquals(4, ps.size()); [EOL]     assertEquals("classy", ps.last().attr("style")); [EOL]     assertEquals("bar", ps.last().attr("class")); [EOL] }
@Test [EOL] public void basicBehaviourTest() { [EOL]     String h = "<div><p><a href='javascript:sendAllMoney()'>Dodgy</a> <A HREF='HTTP://nice.com'>Nice</p><blockquote>Hello</blockquote>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basic()); [EOL]     assertEquals("<p><a rel=\"nofollow\">Dodgy</a> <a href=\"http://nice.com\" rel=\"nofollow\">Nice</a></p><blockquote>Hello</blockquote>", TextUtil.stripNewlines(cleanHtml)); [EOL] }
@Test [EOL] public void basicBehaviourTest() { [EOL]     String h = "<div><p><a href='javascript:sendAllMoney()'>Dodgy</a> <A HREF='HTTP://nice.com'>Nice</p><blockquote>Hello</blockquote>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basic()); [EOL]     assertEquals("<p><a rel=\"nofollow\">Dodgy</a> <a href=\"http://nice.com\" rel=\"nofollow\">Nice</a></p><blockquote>Hello</blockquote>", TextUtil.stripNewlines(cleanHtml)); [EOL] }
@Test [EOL] public void basicBehaviourTest() { [EOL]     String h = "<div><p><a href='javascript:sendAllMoney()'>Dodgy</a> <A HREF='HTTP://nice.com'>Nice</p><blockquote>Hello</blockquote>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basic()); [EOL]     assertEquals("<p><a rel=\"nofollow\">Dodgy</a> <a href=\"http://nice.com\" rel=\"nofollow\">Nice</a></p><blockquote>Hello</blockquote>", TextUtil.stripNewlines(cleanHtml)); [EOL] }
@Test [EOL] public void basicBehaviourTest() { [EOL]     String h = "<div><p><a href='javascript:sendAllMoney()'>Dodgy</a> <A HREF='HTTP://nice.com'>Nice</p><blockquote>Hello</blockquote>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basic()); [EOL]     assertEquals("<p><a rel=\"nofollow\">Dodgy</a> <a href=\"http://nice.com\" rel=\"nofollow\">Nice</a></p><blockquote>Hello</blockquote>", TextUtil.stripNewlines(cleanHtml)); [EOL] }
@Test [EOL] public void basicBehaviourTest() { [EOL]     String h = "<div><p><a href='javascript:sendAllMoney()'>Dodgy</a> <A HREF='HTTP://nice.com'>Nice</p><blockquote>Hello</blockquote>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basic()); [EOL]     assertEquals("<p><a rel=\"nofollow\">Dodgy</a> <a href=\"http://nice.com\" rel=\"nofollow\">Nice</a></p><blockquote>Hello</blockquote>", TextUtil.stripNewlines(cleanHtml)); [EOL] }
@Test [EOL] public void basicBehaviourTest() { [EOL]     String h = "<div><p><a href='javascript:sendAllMoney()'>Dodgy</a> <A HREF='HTTP://nice.com'>Nice</p><blockquote>Hello</blockquote>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basic()); [EOL]     assertEquals("<p><a rel=\"nofollow\">Dodgy</a> <a href=\"http://nice.com\" rel=\"nofollow\">Nice</a></p><blockquote>Hello</blockquote>", TextUtil.stripNewlines(cleanHtml)); [EOL] }
@Test [EOL] public void basicBehaviourTest() { [EOL]     String h = "<div><p><a href='javascript:sendAllMoney()'>Dodgy</a> <A HREF='HTTP://nice.com'>Nice</p><blockquote>Hello</blockquote>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basic()); [EOL]     assertEquals("<p><a rel=\"nofollow\">Dodgy</a> <a href=\"http://nice.com\" rel=\"nofollow\">Nice</a></p><blockquote>Hello</blockquote>", TextUtil.stripNewlines(cleanHtml)); [EOL] }
@Test [EOL] public void basicBehaviourTest() { [EOL]     String h = "<div><p><a href='javascript:sendAllMoney()'>Dodgy</a> <A HREF='HTTP://nice.com'>Nice</p><blockquote>Hello</blockquote>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basic()); [EOL]     assertEquals("<p><a rel=\"nofollow\">Dodgy</a> <a href=\"http://nice.com\" rel=\"nofollow\">Nice</a></p><blockquote>Hello</blockquote>", TextUtil.stripNewlines(cleanHtml)); [EOL] }
@Test [EOL] public void createsStructureFromBodySnippet() { [EOL]     String html = "foo <b>bar</b> baz"; [EOL]     Document doc = Jsoup.parse(html); [EOL]     assertEquals("foo bar baz", doc.text()); [EOL] }
@Test [EOL] public void createsStructureFromBodySnippet() { [EOL]     String html = "foo <b>bar</b> baz"; [EOL]     Document doc = Jsoup.parse(html); [EOL]     assertEquals("foo bar baz", doc.text()); [EOL] }
@Test [EOL] public void createsStructureFromBodySnippet() { [EOL]     String html = "foo <b>bar</b> baz"; [EOL]     Document doc = Jsoup.parse(html); [EOL]     assertEquals("foo bar baz", doc.text()); [EOL] }
@Test [EOL] public void testOuterHtml() { [EOL]     Document doc = Jsoup.parse("<div title='Tags &amp;c.'><img src=foo.png><p><!-- comment -->Hello<p>there"); [EOL]     assertEquals("<html><head></head><body><div title=\"Tags &amp;c.\"><img src=\"foo.png\" /><p><!-- comment -->Hello</p><p>there</p></div></body></html>", TextUtil.stripNewlines(doc.outerHtml())); [EOL] }
@Test [EOL] public void testSupportsLeadingCombinator() { [EOL]     String h = "<div><p><span>One</span><span>Two</span></p></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Element p = doc.select("div > p").first(); [EOL]     Elements spans = p.select("> span"); [EOL]     assertEquals(2, spans.size()); [EOL]     assertEquals("One", spans.first().text()); [EOL]     h = "<div id=1><div id=2><div id=3></div></div></div>"; [EOL]     doc = Jsoup.parse(h); [EOL]     Element div = doc.select("div").select(" > div").first(); [EOL]     assertEquals("2", div.id()); [EOL] }
@Test [EOL] public void caseInsensitive() { [EOL]     String h = "<dIv tItle=bAr><div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals(2, doc.select("DIV").size()); [EOL]     assertEquals(1, doc.select("DIV[TITLE]").size()); [EOL]     assertEquals(1, doc.select("DIV[TITLE=BAR]").size()); [EOL]     assertEquals(0, doc.select("DIV[TITLE=BARBARELLA").size()); [EOL] }
@Test [EOL] public void testElementSiblingIndex() { [EOL]     Document doc = Jsoup.parse("<div><p>One</p>...<p>Two</p>...<p>Three</p>"); [EOL]     Elements ps = doc.select("p"); [EOL]     assertTrue(0 == ps.get(0).elementSiblingIndex()); [EOL]     assertTrue(1 == ps.get(1).elementSiblingIndex()); [EOL]     assertTrue(2 == ps.get(2).elementSiblingIndex()); [EOL] }
@Test [EOL] public void testElementSiblingIndex() { [EOL]     Document doc = Jsoup.parse("<div><p>One</p>...<p>Two</p>...<p>Three</p>"); [EOL]     Elements ps = doc.select("p"); [EOL]     assertTrue(0 == ps.get(0).elementSiblingIndex()); [EOL]     assertTrue(1 == ps.get(1).elementSiblingIndex()); [EOL]     assertTrue(2 == ps.get(2).elementSiblingIndex()); [EOL] }
@Test [EOL] public void testGetElementById() { [EOL]     Document doc = Jsoup.parse(reference); [EOL]     Element div = doc.getElementById("div1"); [EOL]     assertEquals("div1", div.id()); [EOL]     assertNull(doc.getElementById("none")); [EOL]     Document doc2 = Jsoup.parse("<div id=1><div id=2><p>Hello <span id=2>world!</span></p></div></div>"); [EOL]     Element div2 = doc2.getElementById("2"); [EOL]     assertEquals("div", div2.tagName()); [EOL]     Element span = div2.child(0).getElementById("2"); [EOL]     assertEquals("span", span.tagName()); [EOL] }
@Test [EOL] public void testGetElementById() { [EOL]     Document doc = Jsoup.parse(reference); [EOL]     Element div = doc.getElementById("div1"); [EOL]     assertEquals("div1", div.id()); [EOL]     assertNull(doc.getElementById("none")); [EOL]     Document doc2 = Jsoup.parse("<div id=1><div id=2><p>Hello <span id=2>world!</span></p></div></div>"); [EOL]     Element div2 = doc2.getElementById("2"); [EOL]     assertEquals("div", div2.tagName()); [EOL]     Element span = div2.child(0).getElementById("2"); [EOL]     assertEquals("span", span.tagName()); [EOL] }
@Test [EOL] public void testGetElementById() { [EOL]     Document doc = Jsoup.parse(reference); [EOL]     Element div = doc.getElementById("div1"); [EOL]     assertEquals("div1", div.id()); [EOL]     assertNull(doc.getElementById("none")); [EOL]     Document doc2 = Jsoup.parse("<div id=1><div id=2><p>Hello <span id=2>world!</span></p></div></div>"); [EOL]     Element div2 = doc2.getElementById("2"); [EOL]     assertEquals("div", div2.tagName()); [EOL]     Element span = div2.child(0).getElementById("2"); [EOL]     assertEquals("span", span.tagName()); [EOL] }
@Test [EOL] public void testSetText() { [EOL]     String h = "<div id=1>Hello <p>there <b>now</b></p></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals("Hello there now", doc.text()); [EOL]     assertEquals("there now", doc.select("p").get(0).text()); [EOL]     Element div = doc.getElementById("1").text("Gone"); [EOL]     assertEquals("Gone", div.text()); [EOL]     assertEquals(0, doc.select("p").size()); [EOL] }
@Test [EOL] public void testSetText() { [EOL]     String h = "<div id=1>Hello <p>there <b>now</b></p></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals("Hello there now", doc.text()); [EOL]     assertEquals("there now", doc.select("p").get(0).text()); [EOL]     Element div = doc.getElementById("1").text("Gone"); [EOL]     assertEquals("Gone", div.text()); [EOL]     assertEquals(0, doc.select("p").size()); [EOL] }
@Test [EOL] public void testSetText() { [EOL]     String h = "<div id=1>Hello <p>there <b>now</b></p></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals("Hello there now", doc.text()); [EOL]     assertEquals("there now", doc.select("p").get(0).text()); [EOL]     Element div = doc.getElementById("1").text("Gone"); [EOL]     assertEquals("Gone", div.text()); [EOL]     assertEquals(0, doc.select("p").size()); [EOL] }
@Test [EOL] public void testSetText() { [EOL]     String h = "<div id=1>Hello <p>there <b>now</b></p></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals("Hello there now", doc.text()); [EOL]     assertEquals("there now", doc.select("p").get(0).text()); [EOL]     Element div = doc.getElementById("1").text("Gone"); [EOL]     assertEquals("Gone", div.text()); [EOL]     assertEquals(0, doc.select("p").size()); [EOL] }
@Test [EOL] public void testSetText() { [EOL]     String h = "<div id=1>Hello <p>there <b>now</b></p></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals("Hello there now", doc.text()); [EOL]     assertEquals("there now", doc.select("p").get(0).text()); [EOL]     Element div = doc.getElementById("1").text("Gone"); [EOL]     assertEquals("Gone", div.text()); [EOL]     assertEquals(0, doc.select("p").size()); [EOL] }
@Test [EOL] public void testSetText() { [EOL]     String h = "<div id=1>Hello <p>there <b>now</b></p></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals("Hello there now", doc.text()); [EOL]     assertEquals("there now", doc.select("p").get(0).text()); [EOL]     Element div = doc.getElementById("1").text("Gone"); [EOL]     assertEquals("Gone", div.text()); [EOL]     assertEquals(0, doc.select("p").size()); [EOL] }
@Test [EOL] public void testSetText() { [EOL]     String h = "<div id=1>Hello <p>there <b>now</b></p></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals("Hello there now", doc.text()); [EOL]     assertEquals("there now", doc.select("p").get(0).text()); [EOL]     Element div = doc.getElementById("1").text("Gone"); [EOL]     assertEquals("Gone", div.text()); [EOL]     assertEquals(0, doc.select("p").size()); [EOL] }
@Test [EOL] public void testSetText() { [EOL]     String h = "<div id=1>Hello <p>there <b>now</b></p></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals("Hello there now", doc.text()); [EOL]     assertEquals("there now", doc.select("p").get(0).text()); [EOL]     Element div = doc.getElementById("1").text("Gone"); [EOL]     assertEquals("Gone", div.text()); [EOL]     assertEquals(0, doc.select("p").size()); [EOL] }
@Test [EOL] public void testSetText() { [EOL]     String h = "<div id=1>Hello <p>there <b>now</b></p></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals("Hello there now", doc.text()); [EOL]     assertEquals("there now", doc.select("p").get(0).text()); [EOL]     Element div = doc.getElementById("1").text("Gone"); [EOL]     assertEquals("Gone", div.text()); [EOL]     assertEquals(0, doc.select("p").size()); [EOL] }
@Test [EOL] public void testSetText() { [EOL]     String h = "<div id=1>Hello <p>there <b>now</b></p></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals("Hello there now", doc.text()); [EOL]     assertEquals("there now", doc.select("p").get(0).text()); [EOL]     Element div = doc.getElementById("1").text("Gone"); [EOL]     assertEquals("Gone", div.text()); [EOL]     assertEquals(0, doc.select("p").size()); [EOL] }
@Test [EOL] public void testSetText() { [EOL]     String h = "<div id=1>Hello <p>there <b>now</b></p></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals("Hello there now", doc.text()); [EOL]     assertEquals("there now", doc.select("p").get(0).text()); [EOL]     Element div = doc.getElementById("1").text("Gone"); [EOL]     assertEquals("Gone", div.text()); [EOL]     assertEquals(0, doc.select("p").size()); [EOL] }
@Test [EOL] public void testSetText() { [EOL]     String h = "<div id=1>Hello <p>there <b>now</b></p></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals("Hello there now", doc.text()); [EOL]     assertEquals("there now", doc.select("p").get(0).text()); [EOL]     Element div = doc.getElementById("1").text("Gone"); [EOL]     assertEquals("Gone", div.text()); [EOL]     assertEquals(0, doc.select("p").size()); [EOL] }
@Test [EOL] public void testSetText() { [EOL]     String h = "<div id=1>Hello <p>there <b>now</b></p></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals("Hello there now", doc.text()); [EOL]     assertEquals("there now", doc.select("p").get(0).text()); [EOL]     Element div = doc.getElementById("1").text("Gone"); [EOL]     assertEquals("Gone", div.text()); [EOL]     assertEquals(0, doc.select("p").size()); [EOL] }
@Test [EOL] public void classes() { [EOL]     Document doc = Jsoup.parse("<div><p class='mellow yellow'></p><p class='red green'></p>"); [EOL]     Elements els = doc.select("p"); [EOL]     assertTrue(els.hasClass("red")); [EOL]     assertFalse(els.hasClass("blue")); [EOL]     els.addClass("blue"); [EOL]     els.removeClass("yellow"); [EOL]     els.toggleClass("mellow"); [EOL]     assertEquals("blue", els.get(0).className()); [EOL]     assertEquals("red green blue mellow", els.get(1).className()); [EOL] }
@Test [EOL] public void classes() { [EOL]     Document doc = Jsoup.parse("<div><p class='mellow yellow'></p><p class='red green'></p>"); [EOL]     Elements els = doc.select("p"); [EOL]     assertTrue(els.hasClass("red")); [EOL]     assertFalse(els.hasClass("blue")); [EOL]     els.addClass("blue"); [EOL]     els.removeClass("yellow"); [EOL]     els.toggleClass("mellow"); [EOL]     assertEquals("blue", els.get(0).className()); [EOL]     assertEquals("red green blue mellow", els.get(1).className()); [EOL] }
@Test [EOL] public void classes() { [EOL]     Document doc = Jsoup.parse("<div><p class='mellow yellow'></p><p class='red green'></p>"); [EOL]     Elements els = doc.select("p"); [EOL]     assertTrue(els.hasClass("red")); [EOL]     assertFalse(els.hasClass("blue")); [EOL]     els.addClass("blue"); [EOL]     els.removeClass("yellow"); [EOL]     els.toggleClass("mellow"); [EOL]     assertEquals("blue", els.get(0).className()); [EOL]     assertEquals("red green blue mellow", els.get(1).className()); [EOL] }
@Test [EOL] public void classes() { [EOL]     Document doc = Jsoup.parse("<div><p class='mellow yellow'></p><p class='red green'></p>"); [EOL]     Elements els = doc.select("p"); [EOL]     assertTrue(els.hasClass("red")); [EOL]     assertFalse(els.hasClass("blue")); [EOL]     els.addClass("blue"); [EOL]     els.removeClass("yellow"); [EOL]     els.toggleClass("mellow"); [EOL]     assertEquals("blue", els.get(0).className()); [EOL]     assertEquals("red green blue mellow", els.get(1).className()); [EOL] }
@Test [EOL] public void classes() { [EOL]     Document doc = Jsoup.parse("<div><p class='mellow yellow'></p><p class='red green'></p>"); [EOL]     Elements els = doc.select("p"); [EOL]     assertTrue(els.hasClass("red")); [EOL]     assertFalse(els.hasClass("blue")); [EOL]     els.addClass("blue"); [EOL]     els.removeClass("yellow"); [EOL]     els.toggleClass("mellow"); [EOL]     assertEquals("blue", els.get(0).className()); [EOL]     assertEquals("red green blue mellow", els.get(1).className()); [EOL] }
@Test [EOL] public void classes() { [EOL]     Document doc = Jsoup.parse("<div><p class='mellow yellow'></p><p class='red green'></p>"); [EOL]     Elements els = doc.select("p"); [EOL]     assertTrue(els.hasClass("red")); [EOL]     assertFalse(els.hasClass("blue")); [EOL]     els.addClass("blue"); [EOL]     els.removeClass("yellow"); [EOL]     els.toggleClass("mellow"); [EOL]     assertEquals("blue", els.get(0).className()); [EOL]     assertEquals("red green blue mellow", els.get(1).className()); [EOL] }
@Test [EOL] public void classes() { [EOL]     Document doc = Jsoup.parse("<div><p class='mellow yellow'></p><p class='red green'></p>"); [EOL]     Elements els = doc.select("p"); [EOL]     assertTrue(els.hasClass("red")); [EOL]     assertFalse(els.hasClass("blue")); [EOL]     els.addClass("blue"); [EOL]     els.removeClass("yellow"); [EOL]     els.toggleClass("mellow"); [EOL]     assertEquals("blue", els.get(0).className()); [EOL]     assertEquals("red green blue mellow", els.get(1).className()); [EOL] }
@Test [EOL] public void classes() { [EOL]     Document doc = Jsoup.parse("<div><p class='mellow yellow'></p><p class='red green'></p>"); [EOL]     Elements els = doc.select("p"); [EOL]     assertTrue(els.hasClass("red")); [EOL]     assertFalse(els.hasClass("blue")); [EOL]     els.addClass("blue"); [EOL]     els.removeClass("yellow"); [EOL]     els.toggleClass("mellow"); [EOL]     assertEquals("blue", els.get(0).className()); [EOL]     assertEquals("red green blue mellow", els.get(1).className()); [EOL] }
@Test [EOL] public void classes() { [EOL]     Document doc = Jsoup.parse("<div><p class='mellow yellow'></p><p class='red green'></p>"); [EOL]     Elements els = doc.select("p"); [EOL]     assertTrue(els.hasClass("red")); [EOL]     assertFalse(els.hasClass("blue")); [EOL]     els.addClass("blue"); [EOL]     els.removeClass("yellow"); [EOL]     els.toggleClass("mellow"); [EOL]     assertEquals("blue", els.get(0).className()); [EOL]     assertEquals("red green blue mellow", els.get(1).className()); [EOL] }
@Test [EOL] public void classes() { [EOL]     Document doc = Jsoup.parse("<div><p class='mellow yellow'></p><p class='red green'></p>"); [EOL]     Elements els = doc.select("p"); [EOL]     assertTrue(els.hasClass("red")); [EOL]     assertFalse(els.hasClass("blue")); [EOL]     els.addClass("blue"); [EOL]     els.removeClass("yellow"); [EOL]     els.toggleClass("mellow"); [EOL]     assertEquals("blue", els.get(0).className()); [EOL]     assertEquals("red green blue mellow", els.get(1).className()); [EOL] }
@Test [EOL] public void classes() { [EOL]     Document doc = Jsoup.parse("<div><p class='mellow yellow'></p><p class='red green'></p>"); [EOL]     Elements els = doc.select("p"); [EOL]     assertTrue(els.hasClass("red")); [EOL]     assertFalse(els.hasClass("blue")); [EOL]     els.addClass("blue"); [EOL]     els.removeClass("yellow"); [EOL]     els.toggleClass("mellow"); [EOL]     assertEquals("blue", els.get(0).className()); [EOL]     assertEquals("red green blue mellow", els.get(1).className()); [EOL] }
@Test [EOL] public void classes() { [EOL]     Document doc = Jsoup.parse("<div><p class='mellow yellow'></p><p class='red green'></p>"); [EOL]     Elements els = doc.select("p"); [EOL]     assertTrue(els.hasClass("red")); [EOL]     assertFalse(els.hasClass("blue")); [EOL]     els.addClass("blue"); [EOL]     els.removeClass("yellow"); [EOL]     els.toggleClass("mellow"); [EOL]     assertEquals("blue", els.get(0).className()); [EOL]     assertEquals("red green blue mellow", els.get(1).className()); [EOL] }
@Test [EOL] public void classes() { [EOL]     Document doc = Jsoup.parse("<div><p class='mellow yellow'></p><p class='red green'></p>"); [EOL]     Elements els = doc.select("p"); [EOL]     assertTrue(els.hasClass("red")); [EOL]     assertFalse(els.hasClass("blue")); [EOL]     els.addClass("blue"); [EOL]     els.removeClass("yellow"); [EOL]     els.toggleClass("mellow"); [EOL]     assertEquals("blue", els.get(0).className()); [EOL]     assertEquals("red green blue mellow", els.get(1).className()); [EOL] }
@Test [EOL] public void classes() { [EOL]     Document doc = Jsoup.parse("<div><p class='mellow yellow'></p><p class='red green'></p>"); [EOL]     Elements els = doc.select("p"); [EOL]     assertTrue(els.hasClass("red")); [EOL]     assertFalse(els.hasClass("blue")); [EOL]     els.addClass("blue"); [EOL]     els.removeClass("yellow"); [EOL]     els.toggleClass("mellow"); [EOL]     assertEquals("blue", els.get(0).className()); [EOL]     assertEquals("red green blue mellow", els.get(1).className()); [EOL] }
@Test [EOL] public void classes() { [EOL]     Document doc = Jsoup.parse("<div><p class='mellow yellow'></p><p class='red green'></p>"); [EOL]     Elements els = doc.select("p"); [EOL]     assertTrue(els.hasClass("red")); [EOL]     assertFalse(els.hasClass("blue")); [EOL]     els.addClass("blue"); [EOL]     els.removeClass("yellow"); [EOL]     els.toggleClass("mellow"); [EOL]     assertEquals("blue", els.get(0).className()); [EOL]     assertEquals("red green blue mellow", els.get(1).className()); [EOL] }
@Test [EOL] public void classes() { [EOL]     Document doc = Jsoup.parse("<div><p class='mellow yellow'></p><p class='red green'></p>"); [EOL]     Elements els = doc.select("p"); [EOL]     assertTrue(els.hasClass("red")); [EOL]     assertFalse(els.hasClass("blue")); [EOL]     els.addClass("blue"); [EOL]     els.removeClass("yellow"); [EOL]     els.toggleClass("mellow"); [EOL]     assertEquals("blue", els.get(0).className()); [EOL]     assertEquals("red green blue mellow", els.get(1).className()); [EOL] }
@Test [EOL] public void classes() { [EOL]     Document doc = Jsoup.parse("<div><p class='mellow yellow'></p><p class='red green'></p>"); [EOL]     Elements els = doc.select("p"); [EOL]     assertTrue(els.hasClass("red")); [EOL]     assertFalse(els.hasClass("blue")); [EOL]     els.addClass("blue"); [EOL]     els.removeClass("yellow"); [EOL]     els.toggleClass("mellow"); [EOL]     assertEquals("blue", els.get(0).className()); [EOL]     assertEquals("red green blue mellow", els.get(1).className()); [EOL] }
@Test [EOL] public void classes() { [EOL]     Document doc = Jsoup.parse("<div><p class='mellow yellow'></p><p class='red green'></p>"); [EOL]     Elements els = doc.select("p"); [EOL]     assertTrue(els.hasClass("red")); [EOL]     assertFalse(els.hasClass("blue")); [EOL]     els.addClass("blue"); [EOL]     els.removeClass("yellow"); [EOL]     els.toggleClass("mellow"); [EOL]     assertEquals("blue", els.get(0).className()); [EOL]     assertEquals("red green blue mellow", els.get(1).className()); [EOL] }
@Test [EOL] public void classes() { [EOL]     Document doc = Jsoup.parse("<div><p class='mellow yellow'></p><p class='red green'></p>"); [EOL]     Elements els = doc.select("p"); [EOL]     assertTrue(els.hasClass("red")); [EOL]     assertFalse(els.hasClass("blue")); [EOL]     els.addClass("blue"); [EOL]     els.removeClass("yellow"); [EOL]     els.toggleClass("mellow"); [EOL]     assertEquals("blue", els.get(0).className()); [EOL]     assertEquals("red green blue mellow", els.get(1).className()); [EOL] }
@Test [EOL] public void classes() { [EOL]     Document doc = Jsoup.parse("<div><p class='mellow yellow'></p><p class='red green'></p>"); [EOL]     Elements els = doc.select("p"); [EOL]     assertTrue(els.hasClass("red")); [EOL]     assertFalse(els.hasClass("blue")); [EOL]     els.addClass("blue"); [EOL]     els.removeClass("yellow"); [EOL]     els.toggleClass("mellow"); [EOL]     assertEquals("blue", els.get(0).className()); [EOL]     assertEquals("red green blue mellow", els.get(1).className()); [EOL] }
@Test [EOL] public void classes() { [EOL]     Document doc = Jsoup.parse("<div><p class='mellow yellow'></p><p class='red green'></p>"); [EOL]     Elements els = doc.select("p"); [EOL]     assertTrue(els.hasClass("red")); [EOL]     assertFalse(els.hasClass("blue")); [EOL]     els.addClass("blue"); [EOL]     els.removeClass("yellow"); [EOL]     els.toggleClass("mellow"); [EOL]     assertEquals("blue", els.get(0).className()); [EOL]     assertEquals("red green blue mellow", els.get(1).className()); [EOL] }
@Test [EOL] public void testOuterHtml() { [EOL]     Document doc = Jsoup.parse("<div title='Tags &amp;c.'><img src=foo.png><p><!-- comment -->Hello<p>there"); [EOL]     assertEquals("<html><head></head><body><div title=\"Tags &amp;c.\"><img src=\"foo.png\" /><p><!-- comment -->Hello</p><p>there</p></div></body></html>", TextUtil.stripNewlines(doc.outerHtml())); [EOL] }
@Test [EOL] public void testOuterHtml() { [EOL]     Document doc = Jsoup.parse("<div title='Tags &amp;c.'><img src=foo.png><p><!-- comment -->Hello<p>there"); [EOL]     assertEquals("<html><head></head><body><div title=\"Tags &amp;c.\"><img src=\"foo.png\" /><p><!-- comment -->Hello</p><p>there</p></div></body></html>", TextUtil.stripNewlines(doc.outerHtml())); [EOL] }
@Test [EOL] public void parsesUnterminatedComments() { [EOL]     String html = "<p>Hello<!-- <tr><td>"; [EOL]     Document doc = Jsoup.parse(html); [EOL]     Element p = doc.getElementsByTag("p").get(0); [EOL]     assertEquals("Hello", p.text()); [EOL]     TextNode text = (TextNode) p.childNode(0); [EOL]     assertEquals("Hello", text.getWholeText()); [EOL]     Comment comment = (Comment) p.childNode(1); [EOL]     assertEquals(" <tr><td>", comment.getData()); [EOL] }
@Test [EOL] public void parsesUnterminatedComments() { [EOL]     String html = "<p>Hello<!-- <tr><td>"; [EOL]     Document doc = Jsoup.parse(html); [EOL]     Element p = doc.getElementsByTag("p").get(0); [EOL]     assertEquals("Hello", p.text()); [EOL]     TextNode text = (TextNode) p.childNode(0); [EOL]     assertEquals("Hello", text.getWholeText()); [EOL]     Comment comment = (Comment) p.childNode(1); [EOL]     assertEquals(" <tr><td>", comment.getData()); [EOL] }
@Test [EOL] public void parsesUnterminatedComments() { [EOL]     String html = "<p>Hello<!-- <tr><td>"; [EOL]     Document doc = Jsoup.parse(html); [EOL]     Element p = doc.getElementsByTag("p").get(0); [EOL]     assertEquals("Hello", p.text()); [EOL]     TextNode text = (TextNode) p.childNode(0); [EOL]     assertEquals("Hello", text.getWholeText()); [EOL]     Comment comment = (Comment) p.childNode(1); [EOL]     assertEquals(" <tr><td>", comment.getData()); [EOL] }
@Test [EOL] public void parsesUnterminatedComments() { [EOL]     String html = "<p>Hello<!-- <tr><td>"; [EOL]     Document doc = Jsoup.parse(html); [EOL]     Element p = doc.getElementsByTag("p").get(0); [EOL]     assertEquals("Hello", p.text()); [EOL]     TextNode text = (TextNode) p.childNode(0); [EOL]     assertEquals("Hello", text.getWholeText()); [EOL]     Comment comment = (Comment) p.childNode(1); [EOL]     assertEquals(" <tr><td>", comment.getData()); [EOL] }
@Test [EOL] public void parsesUnterminatedComments() { [EOL]     String html = "<p>Hello<!-- <tr><td>"; [EOL]     Document doc = Jsoup.parse(html); [EOL]     Element p = doc.getElementsByTag("p").get(0); [EOL]     assertEquals("Hello", p.text()); [EOL]     TextNode text = (TextNode) p.childNode(0); [EOL]     assertEquals("Hello", text.getWholeText()); [EOL]     Comment comment = (Comment) p.childNode(1); [EOL]     assertEquals(" <tr><td>", comment.getData()); [EOL] }
@Test [EOL] public void parsesUnterminatedComments() { [EOL]     String html = "<p>Hello<!-- <tr><td>"; [EOL]     Document doc = Jsoup.parse(html); [EOL]     Element p = doc.getElementsByTag("p").get(0); [EOL]     assertEquals("Hello", p.text()); [EOL]     TextNode text = (TextNode) p.childNode(0); [EOL]     assertEquals("Hello", text.getWholeText()); [EOL]     Comment comment = (Comment) p.childNode(1); [EOL]     assertEquals(" <tr><td>", comment.getData()); [EOL] }
@Test [EOL] public void parsesUnterminatedComments() { [EOL]     String html = "<p>Hello<!-- <tr><td>"; [EOL]     Document doc = Jsoup.parse(html); [EOL]     Element p = doc.getElementsByTag("p").get(0); [EOL]     assertEquals("Hello", p.text()); [EOL]     TextNode text = (TextNode) p.childNode(0); [EOL]     assertEquals("Hello", text.getWholeText()); [EOL]     Comment comment = (Comment) p.childNode(1); [EOL]     assertEquals(" <tr><td>", comment.getData()); [EOL] }
@Test [EOL] public void parsesUnterminatedComments() { [EOL]     String html = "<p>Hello<!-- <tr><td>"; [EOL]     Document doc = Jsoup.parse(html); [EOL]     Element p = doc.getElementsByTag("p").get(0); [EOL]     assertEquals("Hello", p.text()); [EOL]     TextNode text = (TextNode) p.childNode(0); [EOL]     assertEquals("Hello", text.getWholeText()); [EOL]     Comment comment = (Comment) p.childNode(1); [EOL]     assertEquals(" <tr><td>", comment.getData()); [EOL] }
@Test [EOL] public void parsesUnterminatedComments() { [EOL]     String html = "<p>Hello<!-- <tr><td>"; [EOL]     Document doc = Jsoup.parse(html); [EOL]     Element p = doc.getElementsByTag("p").get(0); [EOL]     assertEquals("Hello", p.text()); [EOL]     TextNode text = (TextNode) p.childNode(0); [EOL]     assertEquals("Hello", text.getWholeText()); [EOL]     Comment comment = (Comment) p.childNode(1); [EOL]     assertEquals(" <tr><td>", comment.getData()); [EOL] }
@Test [EOL] public void parsesUnterminatedComments() { [EOL]     String html = "<p>Hello<!-- <tr><td>"; [EOL]     Document doc = Jsoup.parse(html); [EOL]     Element p = doc.getElementsByTag("p").get(0); [EOL]     assertEquals("Hello", p.text()); [EOL]     TextNode text = (TextNode) p.childNode(0); [EOL]     assertEquals("Hello", text.getWholeText()); [EOL]     Comment comment = (Comment) p.childNode(1); [EOL]     assertEquals(" <tr><td>", comment.getData()); [EOL] }
@Test [EOL] public void handlesUnknownTags() { [EOL]     String h = "<div><foo title=bar>Hello<foo title=qux>there</foo></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements foos = doc.select("foo"); [EOL]     assertEquals(2, foos.size()); [EOL]     assertEquals("bar", foos.first().attr("title")); [EOL]     assertEquals("qux", foos.last().attr("title")); [EOL]     assertEquals("there", foos.last().text()); [EOL] }
@Test [EOL] public void handlesUnknownTags() { [EOL]     String h = "<div><foo title=bar>Hello<foo title=qux>there</foo></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements foos = doc.select("foo"); [EOL]     assertEquals(2, foos.size()); [EOL]     assertEquals("bar", foos.first().attr("title")); [EOL]     assertEquals("qux", foos.last().attr("title")); [EOL]     assertEquals("there", foos.last().text()); [EOL] }
@Test [EOL] public void handlesUnknownTags() { [EOL]     String h = "<div><foo title=bar>Hello<foo title=qux>there</foo></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements foos = doc.select("foo"); [EOL]     assertEquals(2, foos.size()); [EOL]     assertEquals("bar", foos.first().attr("title")); [EOL]     assertEquals("qux", foos.last().attr("title")); [EOL]     assertEquals("there", foos.last().text()); [EOL] }
@Test [EOL] public void handlesUnknownTags() { [EOL]     String h = "<div><foo title=bar>Hello<foo title=qux>there</foo></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements foos = doc.select("foo"); [EOL]     assertEquals(2, foos.size()); [EOL]     assertEquals("bar", foos.first().attr("title")); [EOL]     assertEquals("qux", foos.last().attr("title")); [EOL]     assertEquals("there", foos.last().text()); [EOL] }
@Test [EOL] public void handlesUnknownTags() { [EOL]     String h = "<div><foo title=bar>Hello<foo title=qux>there</foo></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements foos = doc.select("foo"); [EOL]     assertEquals(2, foos.size()); [EOL]     assertEquals("bar", foos.first().attr("title")); [EOL]     assertEquals("qux", foos.last().attr("title")); [EOL]     assertEquals("there", foos.last().text()); [EOL] }
@Test [EOL] public void handlesUnknownTags() { [EOL]     String h = "<div><foo title=bar>Hello<foo title=qux>there</foo></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements foos = doc.select("foo"); [EOL]     assertEquals(2, foos.size()); [EOL]     assertEquals("bar", foos.first().attr("title")); [EOL]     assertEquals("qux", foos.last().attr("title")); [EOL]     assertEquals("there", foos.last().text()); [EOL] }
@Test [EOL] public void handlesUnknownTags() { [EOL]     String h = "<div><foo title=bar>Hello<foo title=qux>there</foo></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements foos = doc.select("foo"); [EOL]     assertEquals(2, foos.size()); [EOL]     assertEquals("bar", foos.first().attr("title")); [EOL]     assertEquals("qux", foos.last().attr("title")); [EOL]     assertEquals("there", foos.last().text()); [EOL] }
@Test [EOL] public void handlesCdata() { [EOL]     String h = "<div id=1><![CData[<html>\n<foo><&amp;]]></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Element div = doc.getElementById("1"); [EOL]     assertEquals("<html> <foo><&amp;", div.text()); [EOL]     assertEquals(0, div.children().size()); [EOL]     assertEquals(1, div.childNodes().size()); [EOL] }
@Test [EOL] public void handlesCdata() { [EOL]     String h = "<div id=1><![CData[<html>\n<foo><&amp;]]></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Element div = doc.getElementById("1"); [EOL]     assertEquals("<html> <foo><&amp;", div.text()); [EOL]     assertEquals(0, div.children().size()); [EOL]     assertEquals(1, div.childNodes().size()); [EOL] }
@Test [EOL] public void handlesCdata() { [EOL]     String h = "<div id=1><![CData[<html>\n<foo><&amp;]]></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Element div = doc.getElementById("1"); [EOL]     assertEquals("<html> <foo><&amp;", div.text()); [EOL]     assertEquals(0, div.children().size()); [EOL]     assertEquals(1, div.childNodes().size()); [EOL] }
@Test [EOL] public void handlesUnknownTags() { [EOL]     String h = "<div><foo title=bar>Hello<foo title=qux>there</foo></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements foos = doc.select("foo"); [EOL]     assertEquals(2, foos.size()); [EOL]     assertEquals("bar", foos.first().attr("title")); [EOL]     assertEquals("qux", foos.last().attr("title")); [EOL]     assertEquals("there", foos.last().text()); [EOL] }
@Test [EOL] public void handlesUnknownTags() { [EOL]     String h = "<div><foo title=bar>Hello<foo title=qux>there</foo></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements foos = doc.select("foo"); [EOL]     assertEquals(2, foos.size()); [EOL]     assertEquals("bar", foos.first().attr("title")); [EOL]     assertEquals("qux", foos.last().attr("title")); [EOL]     assertEquals("there", foos.last().text()); [EOL] }
@Test [EOL] public void handlesUnknownTags() { [EOL]     String h = "<div><foo title=bar>Hello<foo title=qux>there</foo></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements foos = doc.select("foo"); [EOL]     assertEquals(2, foos.size()); [EOL]     assertEquals("bar", foos.first().attr("title")); [EOL]     assertEquals("qux", foos.last().attr("title")); [EOL]     assertEquals("there", foos.last().text()); [EOL] }
@Test [EOL] public void handlesUnknownTags() { [EOL]     String h = "<div><foo title=bar>Hello<foo title=qux>there</foo></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements foos = doc.select("foo"); [EOL]     assertEquals(2, foos.size()); [EOL]     assertEquals("bar", foos.first().attr("title")); [EOL]     assertEquals("qux", foos.last().attr("title")); [EOL]     assertEquals("there", foos.last().text()); [EOL] }
@Test [EOL] public void basicBehaviourTest() { [EOL]     String h = "<div><p><a href='javascript:sendAllMoney()'>Dodgy</a> <A HREF='HTTP://nice.com'>Nice</p><blockquote>Hello</blockquote>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basic()); [EOL]     assertEquals("<p><a rel=\"nofollow\">Dodgy</a> <a href=\"http://nice.com\" rel=\"nofollow\">Nice</a></p><blockquote>Hello</blockquote>", TextUtil.stripNewlines(cleanHtml)); [EOL] }
@Test [EOL] public void basicBehaviourTest() { [EOL]     String h = "<div><p><a href='javascript:sendAllMoney()'>Dodgy</a> <A HREF='HTTP://nice.com'>Nice</p><blockquote>Hello</blockquote>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basic()); [EOL]     assertEquals("<p><a rel=\"nofollow\">Dodgy</a> <a href=\"http://nice.com\" rel=\"nofollow\">Nice</a></p><blockquote>Hello</blockquote>", TextUtil.stripNewlines(cleanHtml)); [EOL] }
@Test [EOL] public void basicBehaviourTest() { [EOL]     String h = "<div><p><a href='javascript:sendAllMoney()'>Dodgy</a> <A HREF='HTTP://nice.com'>Nice</p><blockquote>Hello</blockquote>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basic()); [EOL]     assertEquals("<p><a rel=\"nofollow\">Dodgy</a> <a href=\"http://nice.com\" rel=\"nofollow\">Nice</a></p><blockquote>Hello</blockquote>", TextUtil.stripNewlines(cleanHtml)); [EOL] }
@Test [EOL] public void basicBehaviourTest() { [EOL]     String h = "<div><p><a href='javascript:sendAllMoney()'>Dodgy</a> <A HREF='HTTP://nice.com'>Nice</p><blockquote>Hello</blockquote>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basic()); [EOL]     assertEquals("<p><a rel=\"nofollow\">Dodgy</a> <a href=\"http://nice.com\" rel=\"nofollow\">Nice</a></p><blockquote>Hello</blockquote>", TextUtil.stripNewlines(cleanHtml)); [EOL] }
@Test [EOL] public void basicBehaviourTest() { [EOL]     String h = "<div><p><a href='javascript:sendAllMoney()'>Dodgy</a> <A HREF='HTTP://nice.com'>Nice</p><blockquote>Hello</blockquote>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basic()); [EOL]     assertEquals("<p><a rel=\"nofollow\">Dodgy</a> <a href=\"http://nice.com\" rel=\"nofollow\">Nice</a></p><blockquote>Hello</blockquote>", TextUtil.stripNewlines(cleanHtml)); [EOL] }
@Test [EOL] public void basicBehaviourTest() { [EOL]     String h = "<div><p><a href='javascript:sendAllMoney()'>Dodgy</a> <A HREF='HTTP://nice.com'>Nice</p><blockquote>Hello</blockquote>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basic()); [EOL]     assertEquals("<p><a rel=\"nofollow\">Dodgy</a> <a href=\"http://nice.com\" rel=\"nofollow\">Nice</a></p><blockquote>Hello</blockquote>", TextUtil.stripNewlines(cleanHtml)); [EOL] }
@Test [EOL] public void basicBehaviourTest() { [EOL]     String h = "<div><p><a href='javascript:sendAllMoney()'>Dodgy</a> <A HREF='HTTP://nice.com'>Nice</p><blockquote>Hello</blockquote>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basic()); [EOL]     assertEquals("<p><a rel=\"nofollow\">Dodgy</a> <a href=\"http://nice.com\" rel=\"nofollow\">Nice</a></p><blockquote>Hello</blockquote>", TextUtil.stripNewlines(cleanHtml)); [EOL] }
@Test [EOL] public void basicBehaviourTest() { [EOL]     String h = "<div><p><a href='javascript:sendAllMoney()'>Dodgy</a> <A HREF='HTTP://nice.com'>Nice</p><blockquote>Hello</blockquote>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basic()); [EOL]     assertEquals("<p><a rel=\"nofollow\">Dodgy</a> <a href=\"http://nice.com\" rel=\"nofollow\">Nice</a></p><blockquote>Hello</blockquote>", TextUtil.stripNewlines(cleanHtml)); [EOL] }
@Test [EOL] public void basicBehaviourTest() { [EOL]     String h = "<div><p><a href='javascript:sendAllMoney()'>Dodgy</a> <A HREF='HTTP://nice.com'>Nice</p><blockquote>Hello</blockquote>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basic()); [EOL]     assertEquals("<p><a rel=\"nofollow\">Dodgy</a> <a href=\"http://nice.com\" rel=\"nofollow\">Nice</a></p><blockquote>Hello</blockquote>", TextUtil.stripNewlines(cleanHtml)); [EOL] }
@Test [EOL] public void basicBehaviourTest() { [EOL]     String h = "<div><p><a href='javascript:sendAllMoney()'>Dodgy</a> <A HREF='HTTP://nice.com'>Nice</p><blockquote>Hello</blockquote>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basic()); [EOL]     assertEquals("<p><a rel=\"nofollow\">Dodgy</a> <a href=\"http://nice.com\" rel=\"nofollow\">Nice</a></p><blockquote>Hello</blockquote>", TextUtil.stripNewlines(cleanHtml)); [EOL] }
@Test [EOL] public void basicBehaviourTest() { [EOL]     String h = "<div><p><a href='javascript:sendAllMoney()'>Dodgy</a> <A HREF='HTTP://nice.com'>Nice</p><blockquote>Hello</blockquote>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basic()); [EOL]     assertEquals("<p><a rel=\"nofollow\">Dodgy</a> <a href=\"http://nice.com\" rel=\"nofollow\">Nice</a></p><blockquote>Hello</blockquote>", TextUtil.stripNewlines(cleanHtml)); [EOL] }
@Test [EOL] public void basicBehaviourTest() { [EOL]     String h = "<div><p><a href='javascript:sendAllMoney()'>Dodgy</a> <A HREF='HTTP://nice.com'>Nice</p><blockquote>Hello</blockquote>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basic()); [EOL]     assertEquals("<p><a rel=\"nofollow\">Dodgy</a> <a href=\"http://nice.com\" rel=\"nofollow\">Nice</a></p><blockquote>Hello</blockquote>", TextUtil.stripNewlines(cleanHtml)); [EOL] }
@Test [EOL] public void basicBehaviourTest() { [EOL]     String h = "<div><p><a href='javascript:sendAllMoney()'>Dodgy</a> <A HREF='HTTP://nice.com'>Nice</p><blockquote>Hello</blockquote>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basic()); [EOL]     assertEquals("<p><a rel=\"nofollow\">Dodgy</a> <a href=\"http://nice.com\" rel=\"nofollow\">Nice</a></p><blockquote>Hello</blockquote>", TextUtil.stripNewlines(cleanHtml)); [EOL] }
@Test [EOL] public void basicBehaviourTest() { [EOL]     String h = "<div><p><a href='javascript:sendAllMoney()'>Dodgy</a> <A HREF='HTTP://nice.com'>Nice</p><blockquote>Hello</blockquote>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basic()); [EOL]     assertEquals("<p><a rel=\"nofollow\">Dodgy</a> <a href=\"http://nice.com\" rel=\"nofollow\">Nice</a></p><blockquote>Hello</blockquote>", TextUtil.stripNewlines(cleanHtml)); [EOL] }
@Test [EOL] public void basicBehaviourTest() { [EOL]     String h = "<div><p><a href='javascript:sendAllMoney()'>Dodgy</a> <A HREF='HTTP://nice.com'>Nice</p><blockquote>Hello</blockquote>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basic()); [EOL]     assertEquals("<p><a rel=\"nofollow\">Dodgy</a> <a href=\"http://nice.com\" rel=\"nofollow\">Nice</a></p><blockquote>Hello</blockquote>", TextUtil.stripNewlines(cleanHtml)); [EOL] }
@Test [EOL] public void basicBehaviourTest() { [EOL]     String h = "<div><p><a href='javascript:sendAllMoney()'>Dodgy</a> <A HREF='HTTP://nice.com'>Nice</p><blockquote>Hello</blockquote>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basic()); [EOL]     assertEquals("<p><a rel=\"nofollow\">Dodgy</a> <a href=\"http://nice.com\" rel=\"nofollow\">Nice</a></p><blockquote>Hello</blockquote>", TextUtil.stripNewlines(cleanHtml)); [EOL] }
@Test [EOL] public void attributes() { [EOL]     String h = "<p title=foo><p title=bar><p class=foo><p class=bar>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements withTitle = doc.select("p[title]"); [EOL]     assertEquals(2, withTitle.size()); [EOL]     assertTrue(withTitle.hasAttr("title")); [EOL]     assertFalse(withTitle.hasAttr("class")); [EOL]     assertEquals("foo", withTitle.attr("title")); [EOL]     withTitle.removeAttr("title"); [EOL]     assertEquals(2, withTitle.size()); [EOL]     assertEquals(0, doc.select("p[title]").size()); [EOL]     Elements ps = doc.select("p").attr("style", "classy"); [EOL]     assertEquals(4, ps.size()); [EOL]     assertEquals("classy", ps.last().attr("style")); [EOL]     assertEquals("bar", ps.last().attr("class")); [EOL] }
@Test [EOL] public void attributes() { [EOL]     String h = "<p title=foo><p title=bar><p class=foo><p class=bar>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements withTitle = doc.select("p[title]"); [EOL]     assertEquals(2, withTitle.size()); [EOL]     assertTrue(withTitle.hasAttr("title")); [EOL]     assertFalse(withTitle.hasAttr("class")); [EOL]     assertEquals("foo", withTitle.attr("title")); [EOL]     withTitle.removeAttr("title"); [EOL]     assertEquals(2, withTitle.size()); [EOL]     assertEquals(0, doc.select("p[title]").size()); [EOL]     Elements ps = doc.select("p").attr("style", "classy"); [EOL]     assertEquals(4, ps.size()); [EOL]     assertEquals("classy", ps.last().attr("style")); [EOL]     assertEquals("bar", ps.last().attr("class")); [EOL] }
@Test [EOL] public void attributes() { [EOL]     String h = "<p title=foo><p title=bar><p class=foo><p class=bar>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements withTitle = doc.select("p[title]"); [EOL]     assertEquals(2, withTitle.size()); [EOL]     assertTrue(withTitle.hasAttr("title")); [EOL]     assertFalse(withTitle.hasAttr("class")); [EOL]     assertEquals("foo", withTitle.attr("title")); [EOL]     withTitle.removeAttr("title"); [EOL]     assertEquals(2, withTitle.size()); [EOL]     assertEquals(0, doc.select("p[title]").size()); [EOL]     Elements ps = doc.select("p").attr("style", "classy"); [EOL]     assertEquals(4, ps.size()); [EOL]     assertEquals("classy", ps.last().attr("style")); [EOL]     assertEquals("bar", ps.last().attr("class")); [EOL] }
@Test [EOL] public void attributes() { [EOL]     String h = "<p title=foo><p title=bar><p class=foo><p class=bar>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements withTitle = doc.select("p[title]"); [EOL]     assertEquals(2, withTitle.size()); [EOL]     assertTrue(withTitle.hasAttr("title")); [EOL]     assertFalse(withTitle.hasAttr("class")); [EOL]     assertEquals("foo", withTitle.attr("title")); [EOL]     withTitle.removeAttr("title"); [EOL]     assertEquals(2, withTitle.size()); [EOL]     assertEquals(0, doc.select("p[title]").size()); [EOL]     Elements ps = doc.select("p").attr("style", "classy"); [EOL]     assertEquals(4, ps.size()); [EOL]     assertEquals("classy", ps.last().attr("style")); [EOL]     assertEquals("bar", ps.last().attr("class")); [EOL] }
@Test [EOL] public void attributes() { [EOL]     String h = "<p title=foo><p title=bar><p class=foo><p class=bar>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements withTitle = doc.select("p[title]"); [EOL]     assertEquals(2, withTitle.size()); [EOL]     assertTrue(withTitle.hasAttr("title")); [EOL]     assertFalse(withTitle.hasAttr("class")); [EOL]     assertEquals("foo", withTitle.attr("title")); [EOL]     withTitle.removeAttr("title"); [EOL]     assertEquals(2, withTitle.size()); [EOL]     assertEquals(0, doc.select("p[title]").size()); [EOL]     Elements ps = doc.select("p").attr("style", "classy"); [EOL]     assertEquals(4, ps.size()); [EOL]     assertEquals("classy", ps.last().attr("style")); [EOL]     assertEquals("bar", ps.last().attr("class")); [EOL] }
@Test [EOL] public void emptyOnNoKey() { [EOL]     String html = "<a =empty />"; [EOL]     Element el = Jsoup.parse(html).getElementsByTag("a").get(0); [EOL]     Attributes attr = el.attributes(); [EOL]     assertEquals(0, attr.size()); [EOL] }
@Test [EOL] public void emptyOnNoKey() { [EOL]     String html = "<a =empty />"; [EOL]     Element el = Jsoup.parse(html).getElementsByTag("a").get(0); [EOL]     Attributes attr = el.attributes(); [EOL]     assertEquals(0, attr.size()); [EOL] }
@Test [EOL] public void parsesUnterminatedComments() { [EOL]     String html = "<p>Hello<!-- <tr><td>"; [EOL]     Document doc = Jsoup.parse(html); [EOL]     Element p = doc.getElementsByTag("p").get(0); [EOL]     assertEquals("Hello", p.text()); [EOL]     TextNode text = (TextNode) p.childNode(0); [EOL]     assertEquals("Hello", text.getWholeText()); [EOL]     Comment comment = (Comment) p.childNode(1); [EOL]     assertEquals(" <tr><td>", comment.getData()); [EOL] }
@Test [EOL] public void parsesUnterminatedComments() { [EOL]     String html = "<p>Hello<!-- <tr><td>"; [EOL]     Document doc = Jsoup.parse(html); [EOL]     Element p = doc.getElementsByTag("p").get(0); [EOL]     assertEquals("Hello", p.text()); [EOL]     TextNode text = (TextNode) p.childNode(0); [EOL]     assertEquals("Hello", text.getWholeText()); [EOL]     Comment comment = (Comment) p.childNode(1); [EOL]     assertEquals(" <tr><td>", comment.getData()); [EOL] }
@Test [EOL] public void parsesUnterminatedComments() { [EOL]     String html = "<p>Hello<!-- <tr><td>"; [EOL]     Document doc = Jsoup.parse(html); [EOL]     Element p = doc.getElementsByTag("p").get(0); [EOL]     assertEquals("Hello", p.text()); [EOL]     TextNode text = (TextNode) p.childNode(0); [EOL]     assertEquals("Hello", text.getWholeText()); [EOL]     Comment comment = (Comment) p.childNode(1); [EOL]     assertEquals(" <tr><td>", comment.getData()); [EOL] }
@Test [EOL] public void parsesUnterminatedComments() { [EOL]     String html = "<p>Hello<!-- <tr><td>"; [EOL]     Document doc = Jsoup.parse(html); [EOL]     Element p = doc.getElementsByTag("p").get(0); [EOL]     assertEquals("Hello", p.text()); [EOL]     TextNode text = (TextNode) p.childNode(0); [EOL]     assertEquals("Hello", text.getWholeText()); [EOL]     Comment comment = (Comment) p.childNode(1); [EOL]     assertEquals(" <tr><td>", comment.getData()); [EOL] }
@Test [EOL] public void parsesUnterminatedComments() { [EOL]     String html = "<p>Hello<!-- <tr><td>"; [EOL]     Document doc = Jsoup.parse(html); [EOL]     Element p = doc.getElementsByTag("p").get(0); [EOL]     assertEquals("Hello", p.text()); [EOL]     TextNode text = (TextNode) p.childNode(0); [EOL]     assertEquals("Hello", text.getWholeText()); [EOL]     Comment comment = (Comment) p.childNode(1); [EOL]     assertEquals(" <tr><td>", comment.getData()); [EOL] }
@Test [EOL] public void testOuterHtml() { [EOL]     Document doc = Jsoup.parse("<div title='Tags &amp;c.'><img src=foo.png><p><!-- comment -->Hello<p>there"); [EOL]     assertEquals("<html><head></head><body><div title=\"Tags &amp;c.\"><img src=\"foo.png\" /><p><!-- comment -->Hello</p><p>there</p></div></body></html>", TextUtil.stripNewlines(doc.outerHtml())); [EOL] }
@Test [EOL] public void testOuterHtml() { [EOL]     Document doc = Jsoup.parse("<div title='Tags &amp;c.'><img src=foo.png><p><!-- comment -->Hello<p>there"); [EOL]     assertEquals("<html><head></head><body><div title=\"Tags &amp;c.\"><img src=\"foo.png\" /><p><!-- comment -->Hello</p><p>there</p></div></body></html>", TextUtil.stripNewlines(doc.outerHtml())); [EOL] }
@Test [EOL] public void testOuterHtml() { [EOL]     Document doc = Jsoup.parse("<div title='Tags &amp;c.'><img src=foo.png><p><!-- comment -->Hello<p>there"); [EOL]     assertEquals("<html><head></head><body><div title=\"Tags &amp;c.\"><img src=\"foo.png\" /><p><!-- comment -->Hello</p><p>there</p></div></body></html>", TextUtil.stripNewlines(doc.outerHtml())); [EOL] }
@Test [EOL] public void handlesUnknownTags() { [EOL]     String h = "<div><foo title=bar>Hello<foo title=qux>there</foo></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements foos = doc.select("foo"); [EOL]     assertEquals(2, foos.size()); [EOL]     assertEquals("bar", foos.first().attr("title")); [EOL]     assertEquals("qux", foos.last().attr("title")); [EOL]     assertEquals("there", foos.last().text()); [EOL] }
@Test [EOL] public void handlesUnknownTags() { [EOL]     String h = "<div><foo title=bar>Hello<foo title=qux>there</foo></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements foos = doc.select("foo"); [EOL]     assertEquals(2, foos.size()); [EOL]     assertEquals("bar", foos.first().attr("title")); [EOL]     assertEquals("qux", foos.last().attr("title")); [EOL]     assertEquals("there", foos.last().text()); [EOL] }
@Test [EOL] public void handlesUnknownTags() { [EOL]     String h = "<div><foo title=bar>Hello<foo title=qux>there</foo></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements foos = doc.select("foo"); [EOL]     assertEquals(2, foos.size()); [EOL]     assertEquals("bar", foos.first().attr("title")); [EOL]     assertEquals("qux", foos.last().attr("title")); [EOL]     assertEquals("there", foos.last().text()); [EOL] }
@Test [EOL] public void handlesUnknownTags() { [EOL]     String h = "<div><foo title=bar>Hello<foo title=qux>there</foo></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements foos = doc.select("foo"); [EOL]     assertEquals(2, foos.size()); [EOL]     assertEquals("bar", foos.first().attr("title")); [EOL]     assertEquals("qux", foos.last().attr("title")); [EOL]     assertEquals("there", foos.last().text()); [EOL] }
@Test [EOL] public void divSemantics() { [EOL]     Tag div = Tag.valueOf("div"); [EOL]     Tag p = Tag.valueOf("p"); [EOL]     assertTrue(div.canContain(div)); [EOL]     assertTrue(div.canContain(p)); [EOL] }
@Test [EOL] public void divSemantics() { [EOL]     Tag div = Tag.valueOf("div"); [EOL]     Tag p = Tag.valueOf("p"); [EOL]     assertTrue(div.canContain(div)); [EOL]     assertTrue(div.canContain(p)); [EOL] }
@Test [EOL] public void divSemantics() { [EOL]     Tag div = Tag.valueOf("div"); [EOL]     Tag p = Tag.valueOf("p"); [EOL]     assertTrue(div.canContain(div)); [EOL]     assertTrue(div.canContain(p)); [EOL] }
@Test [EOL] public void divSemantics() { [EOL]     Tag div = Tag.valueOf("div"); [EOL]     Tag p = Tag.valueOf("p"); [EOL]     assertTrue(div.canContain(div)); [EOL]     assertTrue(div.canContain(p)); [EOL] }
@Test [EOL] public void divSemantics() { [EOL]     Tag div = Tag.valueOf("div"); [EOL]     Tag p = Tag.valueOf("p"); [EOL]     assertTrue(div.canContain(div)); [EOL]     assertTrue(div.canContain(p)); [EOL] }
@Test [EOL] public void divSemantics() { [EOL]     Tag div = Tag.valueOf("div"); [EOL]     Tag p = Tag.valueOf("p"); [EOL]     assertTrue(div.canContain(div)); [EOL]     assertTrue(div.canContain(p)); [EOL] }
@Test [EOL] public void divSemantics() { [EOL]     Tag div = Tag.valueOf("div"); [EOL]     Tag p = Tag.valueOf("p"); [EOL]     assertTrue(div.canContain(div)); [EOL]     assertTrue(div.canContain(p)); [EOL] }
@Test [EOL] public void divSemantics() { [EOL]     Tag div = Tag.valueOf("div"); [EOL]     Tag p = Tag.valueOf("p"); [EOL]     assertTrue(div.canContain(div)); [EOL]     assertTrue(div.canContain(p)); [EOL] }
@Test [EOL] public void divSemantics() { [EOL]     Tag div = Tag.valueOf("div"); [EOL]     Tag p = Tag.valueOf("p"); [EOL]     assertTrue(div.canContain(div)); [EOL]     assertTrue(div.canContain(p)); [EOL] }
@Test [EOL] public void divSemantics() { [EOL]     Tag div = Tag.valueOf("div"); [EOL]     Tag p = Tag.valueOf("p"); [EOL]     assertTrue(div.canContain(div)); [EOL]     assertTrue(div.canContain(p)); [EOL] }
@Test [EOL] public void divSemantics() { [EOL]     Tag div = Tag.valueOf("div"); [EOL]     Tag p = Tag.valueOf("p"); [EOL]     assertTrue(div.canContain(div)); [EOL]     assertTrue(div.canContain(p)); [EOL] }
