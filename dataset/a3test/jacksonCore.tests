@Test public void testVersion() throws IOException { assertEquals("1.2", new Version(PackageVersion.VERSION).version()); assertEquals("1.2", new Version(PackageVersion.VERSION).version()); assertEquals("1.2", new Version(PackageVersion.VERSION).version()); assertEquals("1.2", new Version(PackageVersion.VERSION).version()); }
@Test public void testVersion() throws JsonParseException { assertEquals("1.2", new Version(PackageVersion.VERSION).version()); assertEquals("1.2", new Version(PackageVersion.VERSION).version()); assertEquals("1.2", new Version(PackageVersion.VERSION).version()); assertEquals("1.2", new Version(PackageVersion.VERSION).version()); assertEquals("1.2", new Version(PackageVersion.VERSION).version()); assertEquals("1.2", new Version(PackageVersion.VERSION).version()); assertEquals("1.2", new Version(PackageVersion.VERSION).version()); assertEquals("1.2", new Version(PackageVersion.VERSION).version()); assertEquals("1.2", new Version(PackageVersion.VERSION).version()); assertEquals("1.2", new Version(PackageVersion.VERSION).version()); assertEquals("1.2", new Version(PackageVersion.VERSION).version()); assertEquals("1.2", new Version(PackageVersion.VERSION).version()); assertEquals("1.2", new Version(PackageVersion.VERSION).version()); assertEquals("1.2", new Version(PackageVersion.VERSION).version()); assertEquals("1.2", new Version(PackageVersion.VERSION).version()); assertEquals("1.2", new Version(PackageVersion.VERSION).version()); assertEquals("1.2", new Version(PackageVersion.VERSION).version()); assertEquals("1.2", new Version
@Test public void test_getParsingContext() throws JsonParseException { JsonReadContext context = new JsonReadContext(); context.setTokenLineNr(1); context.setTokenColumnNr(2); context.setTokenCharacterOffset(0); context.setTokenCharacterOffset(1); context.setTokenLineNr(2); context.setTokenColumnNr(3); JsonReadContext parsingContext = new JsonReadContext(); context.setTokenLineNr(1); context.setTokenCharacterOffset(0); context.setTokenLineNr(3); context.setTokenColumnNr(4); context.setTokenCharacterOffset(0); context.setTokenLineNr(5); context.setTokenColumnNr(6); JsonReadContext parsingContext2 = new JsonReadContext(); context2.setTokenLineNr(1); context2.setTokenCharacterOffset(2); context2.setTokenLineNr(2); context2.setTokenColumnNr(3); context.setTokenLineNr(3); context.setTokenCharacterOffset(4); context2.setTokenLineNr(5); context.setTokenColumnNr(6); JsonReadContext parsingContext3 = new JsonReadContext(); context3.setTokenLineNr(1); context3.setTokenCharacterOffset(2); context3.setTokenLineNr(3); context3.setTokenColumnNr(7); JsonReadContext parsingContext4 = new JsonReadContext(); context4.
@Test public void test_getParsingContext() throws JsonParseException { JsonReadContext context = new JsonReadContext(); context.setTokenLineNr(1); context.setTokenColumnNr(2); JsonReadContext parsingContext = new JsonReadContext(); context.setTokenLineNr(3); context.setTokenColumnNr(4); context.setTokenCharacterOffset(0); context.setTokenCharacterOffset(0); context.setTokenLineNr(5); context.setTokenColNr(6); JsonReadContext parsingContext2 = new JsonReadContext(); context2.setTokenLineNr(7); context2.setTokenColumnNr(7); context.setTokenCharacterOffset(2); context2.setTokenLineNr(8); context.setTokenColNr(9); JsonReadContext parsingContext3 = new JsonReadContext(); context3.setTokenLineNr(9); context3.setTokenColumnNr(9); JsonReadContext parsingContext4 = new JsonReadContext(); context4.setTokenLineNr(4); context4.setTokenCharacterOffset(2); context4.setTokenLineNr(9); JsonReadContext parsingContext5 = new JsonReadContext(); context5.setTokenLineNr(9); Assert.assertEquals(parsingContext, parsingContext1); Assert.assertEquals(parsingContext2, parsingContext2); Assert.assertEquals(
@Test public void testGetTokenLocation() throws IOException { JsonLocation location = mock(JsonLocation.class); when(location.getTokenLineNr()).thenReturn(1); when(location.getTokenCharacterOffset()).thenReturn(0); when(location.getTokenColumnNr()).thenReturn(1); JsonReadContext context = mock(JsonReadContext.class); when(context.getSourceReference()).thenReturn(SOURCE); when(context.getTokenCharacterOffset()).thenReturn(0); when(context.getTokenLineNr()).thenReturn(1); when(context.getTokenColumnNr()).thenReturn(1); JsonReadContext.reset(); JsonReadContext.reset(); JsonReadContext.reset(); JsonReadContext.reset(); JsonReadContext.reset(); JsonReadContext.reset(); JsonReadContext.reset(); JsonReadContext.reset(); JsonReadContext.reset(); JsonReadContext.reset(); JsonReadContext.reset(); JsonReadContext.reset(); JsonReadContext.reset(); JsonReadContext.reset(); JsonReadContext.reset(); JsonReadContext.reset(); JsonReadContext.reset(); JsonReadContext.reset(); JsonReadContext.reset(); JsonReadContext.reset(); JsonReadContext.reset(); JsonReadContext.reset(); JsonReadContext.reset(); JsonReadContext.reset
@Test public void testGetTokenLocation() throws IOException { JsonLocation l = new JsonLocation(_sourceRef, 0, 0, JsonLocation.LINE, JsonLocation.COLN); JsonLocation t = new JsonLocation(_sourceRef, 0, 0, JsonLocation.LINE, JsonLocation.COLN); assertEquals(l, t.getTokenLocation()); assertEquals(t, t.getTokenCharacterOffset()); assertEquals(t.getTokenLineNr(), JsonLocation.LINE); assertEquals(t.getTokenColumnNr(), JsonLocation.COLN); }
@Test public void testEmbeddedObject() throws JsonParseException, IOException { JsonToken token = new JsonToken(Token.TOKEN_EOF); token.setTokenLineNr(1); token.setTokenColumnNr(2); token.setTokenCharacterOffset(0); token.setTokenCharacterOffset(1); token.setTokenLineNr(30); token.setTokenColumnNr(40); token.setTokenTokenCharacterOffset(50); token.setTokenLineNr(30); token.setTokenColumnNr(50); token.setTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenToken
@Test public void test_null() throws JsonParseException { assertNull(new JsonStringReader(new StringReader("null").getEmbeddedObject())); }
@Test public void testGetTokenCharacterOffset() throws JsonParseException { assertEquals(new Long(0), new TestParser(null, 0).getTokenCharacterOffset()); assertEquals(new Long(0), new TestParser(null, 0).getTokenCharacterOffset()); assertEquals(new Long(0), new TestParser(null, 0).getTokenCharacterOffset()); assertEquals(new Long(0), new TestParser(null, 0).getTokenCharacterOffset()); assertEquals(new Long(0), new TestParser(null, 0).getTokenCharacterOffset()); assertEquals(new Long(0), new TestParser(null, 0).getTokenCharacterOffset()); assertEquals(new Long(0), new TestParser(null, 0).getTokenCharacterOffset()); assertEquals(new Long(0), new TestParser(null, 0).getTokenCharacterOffset()); assertEquals(new Long(0), new TestParser(null, 0).getTokenCharacterOffset()); assertEquals(new Long(0), new TestParser(null, 0).getTokenCharacterOffset()); assertEquals(new Long(0), new TestParser(null, 0).getTokenCharacterOffset()); assertEquals(new Long(0), new TestParser(null, 0).getTokenCharacterOffset()); assertEquals(new Long(0), new TestParser(null, 0).getTokenCharacterOffset()); assertEquals(new Long(0), new Test
@Test public void testGetTokenLineNr() throws JsonParseException { assertEquals(new LineNumber(TOKEN_LINE_NR), new LineNumber(TOKEN_LINE_NR)); assertEquals(TOKEN_LINE_NR, new LineNumber(TOKEN_LINE_NR).getTokenLineNr()); assertEquals(TOKEN_LINE_NR, new LineNumber(TOKEN_LINE_NR).getTokenLineNr()); }
@Test public void testGetTokenColumnNr() throws JsonParseException { int col = 1; int expected = (col-1)? -col : col; [LINE] token = new TestParser(null, 0, expected); assertEquals(expected, token.getTokenColumnNr()); token = new TestParser(null, 0, expected); assertEquals(expected, token.getTokenColumnNr()); token = new TestParser(null, 0, expected); assertEquals(expected, token.getTokenColumnNr()); token = new TestParser(null, 0, expected); assertEquals(expected, token.getTokenColumnNr()); token = new TestParser(null, 0, expected); assertEquals(expected, token.getTokenColumnNr()); token = new TestParser(null, 0, expected); assertEquals(expected, token.getTokenColumnNr()); token = new TestParser(null, 0, expected); assertEquals(expected, token.getTokenColumnNr()); }
@Test public void testGetTokenColumnNr() throws JsonParseException { assertEquals(0, _parser.getTokenColumnNr()); assertEquals(1, _parser.getTokenColumnNr()); assertEquals(2, _parser.getTokenColumnNr()); assertEquals(3, _parser.getTokenColumnNr()); assertEquals(4, _parser.getTokenColumnNr()); assertEquals(6, _parser.getTokenColumnNr()); }
@Test public void testGetTokenColumnNr() throws JsonParseException { int col = 1; int expected = (col < 0)? col : (col + 1); [LINE] token = new TestParserBase(ctxt, 1); assertEquals(expected, token.getTokenColumnNr()); token = new TestParserBase(ctxt, 2); assertEquals(expected, token.getTokenColumnNr()); token = new TestParserBase(ctxt, 3); assertEquals(expected, token.getTokenColumnNr()); token = new TestParserBase(ctxt, 4); assertEquals(expected, token.getTokenColumnNr()); token = new TestParserBase(ctxt, 5); assertEquals(expected, token.getTokenColumnNr()); token = new TestParserBase(ctxt, 6); assertEquals(expected, token.getTokenColumnNr()); }
@Test public void test_invalid_EOF() throws IOException { JsonParserBase parser = new JsonParserBase(null, 0); try { parser.loadMoreGuaranteed(); Assert.fail("Expected JsonParseException"); } catch (JsonParseException e) { Assert.assertEquals(JsonParseException.EOF, e.getTokenLocation()); } }
@Test public void test_invalidEOF_loadMore() throws JsonParseException, IOException { new TestParser() { { new TestParser() { { new TestParser() { { new TestParser() { { new TestParser() { { new TestParser() { { new TestParser() { { new TestParser() { { new TestParser() { { { new TestParser() { { { new TestParser() { { { new TestParser() { { { new TestParser() { { { { } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } }
@Test public void test_handleEOF() throws JsonParseException { new ParserBase(null, 1).handleEOF(); new ParserBase(null, 1).handleEOF(); new ParserBase(null, 2).handleEOF(); new ParserBase(null, 3).handleEOF(); new ParserBase(null, 4).handleEOF(); new ParserBase(null, 5).handleEOF(); new ParserBase(null, 6).handleEOF(); new ParserBase(null, 7).handleEOF(); new ParserBase(null, 8).handleEOF(); new ParserBase(null, 9).handleEOF(); new ParserBase(null, 10).handleEOF(); new ParserBase(null, 11).handleEOF(); new ParserBase(null, 12).handleEOF(); new ParserBase(null, 13).handleEOF(); new ParserBase(null, 14).handleEOF(); new ParserBase(null, 21).handleEOF(); new ParserBase(null, 21).handleEOF(); new ParserBase(null, 22).handleEOF(); new ParserBase(null, 23).handleEOF(); new ParserBase(null, 23).handleEOF(); new ParserBase(null, 24).handleEOF(); new ParserBase(null, 28).handleEOF(); new ParserBase
@Test public void test_handleEOF() throws JsonParseException { JsonToken token = new JsonToken(new StringReader("")); token.setTokenLineNr(1); token.setTokenCharacterOffset(0); token.setTokenColumnNr(0); token.setTokenEOF(true); token.setTokenEOF(false); token.setTokenEOF(true); token.setTokenEOF(false); token.setTokenEOF(true); token.setTokenEOF(false); token.setTokenEOF(true); token.setTokenEOF(false); token.setTokenEOF(true); token.setTokenEOF(false); token.setTokenEOF(true); token.setTokenEOF(false); token.setTokenEOF(true); token.setTokenEOF(false); token.setTokenEOF(true); token.setTokenEOF(false); token.setTokenEOF(true); token.setTokenEOF(false); token.setTokenEOF(false); token.setTokenEOF(true); token.setTokenEOF(false); token.setTokenEOF(true); token.setTokenEOF(false); token.setTokenEOF(true); token.setTokenEOF(false); token.setTokenEOF(true); token
@Test public void testEOF() throws IOException { JsonReadContext ctx = new JsonReadContext(new StringReader("EOF")); ParserBase parser = new ParserBase(ctx, 0); parser.reset(); parser.handleEOF(); assertTrue(parser.isClosed()); parser.close(); assertTrue(parser.isClosed()); assertFalse(parser.isClosed()); assertFalse(parser.inRoot()); }
@Test public void testParseNumberValue() throws IOException, JsonParseException { assertEquals(new BigDecimal(42), new ParserBase(null, 0).getNumberValue()); }
@Test public void testParseDouble() throws IOException, JsonParseException { new MockUp<ParserBase>() { @Mock public Number getNumberValue(String type) throws IOException { return Double.parseDouble(type); } }; assertEquals(Double.parseDouble(1.0), Double.parseDouble(1.0)); }
@Test public void testParseInt() throws IOException, JsonParseException { new MockUp<JsonToken>() { @Mock public Number getNumberValue(JsonToken token) { return (int) token; } }; assertEquals(new Integer(42), new ParserBase(null, 0).getNumberValue()); }
@Test public void testParseInt() throws IOException, JsonParseException { new TestParser(false, false).parseNumericValue(NR_INT); TestCase.assertEquals(Integer.MIN_VALUE, _parser.getNumberValue()); TestCase.assertEquals(Integer.MAX_VALUE, _parser.getNumberValue()); }
@Test public void testParseInt() throws IOException, JsonParseException { assertEquals(Integer.MIN_VALUE, new ParserBase(null, 0).getNumberValue()); }
@Test public void testParseNumericValue() throws IOException, JsonParseException { [LINE] void testNumericValue(int expType, int value) throws IOException { doTest(_textBuffer.getTextBuffer(), expType, value); } { [LINE] void testNumericValue(int expType, int value) throws IOException, JsonParseException { doTest(_textBuffer.getTextBuffer(), expType, value); } } { int value = 0; try { doTestNumericValue(value); } catch (JsonParseException e) { fail("Unexpected JsonParseException: " + e); } } { int value = 0; try { doTestNumericValue(value); } catch (JsonParseException e) { fail("Unexpected JsonParseException: " + e); } } { int value = 0; try { doTestNumericValue(value); } catch (JsonParseException e) { fail("Unexpected JsonParseException: " + e); } } }
@Test public void testParseNumericValue() throws IOException, JsonParseException { new MockUp<JsonTextBuffer>() { @Mock public void _parseNumericValue(JsonToken exp) throws IOException { } }; new MockUp<JsonTextBuffer>() { @Mock public void _parseNumericValue(JsonToken exp) throws IOException { } }; new MockUp<JsonTextBuffer>() { @Mock public void _parseNumericValue(JsonToken exp) throws IOException { } }; new MockUp<JsonNumber>() { @Mock public void _parseNumericValue(JsonToken exp) throws IOException { } }; new MockUp<JsonNumber>() { @Mock public void _parseNumericValue(JsonToken exp) throws IOException { } }; new MockUp<JsonNumber>() { @Mock public void _parseNumericValue(JsonToken exp) throws IOException { } }; new MockUp<JsonNumber>() { @Mock public void _parseNumericValue(JsonToken exp) throws IOException { } }; new MockUp<JsonNumber>() { @Mock public void _parseNumericValue(JsonToken exp) throws IOException { } }; new MockUp<JsonNumber>() { @Mock public void _parseNumericValue(JsonToken exp) throws IOException { } }; new MockUp<
@Test public void testParseNumericValue() throws IOException, JsonParseException { new MockUp<JsonTextBuffer>() { @Mock public void _parseNumericValue(JsonToken expType) throws IOException { } }; new MockUp<JsonTextBuffer>() { @Mock public void _parseNumericValue(JsonToken expType) throws IOException { } }; new MockUp<JsonNumber>() { @Mock public void _parseNumericValue(JsonToken expType) throws IOException { } }; new MockUp<NumberInput>() { @Mock public void _parseNumericValue(JsonToken expType) throws IOException { } }; new MockUp<JsonNumber>() { @Mock public void _parseNumericValue(JsonToken expType) throws IOException { } }; new MockUp<JsonNumber>() { @Mock public void _parseNumericValue(JsonToken expType) throws IOException { } }; new MockUp<JsonNumber>() { @Mock public void _parseNumericValue(JsonToken expType) throws IOException { } }; new MockUp<JsonNumber>() { @Mock public void _parseNumericValue(JsonToken expType) throws IOException { } }; new MockUp<JsonNumber>() { @Mock public void _parseNumericValue(JsonToken expType) throws
@Test public void testParseNumericValue() throws IOException, JsonParseException { new MockUp<JsonTextBuffer>() { @Mock public void _parseNumericValue(JsonToken exp) throws IOException { } }; new MockUp<JsonTextBuffer>() { @Mock public void _parseNumericValue(JsonToken exp) throws IOException { } }; new MockUp<JsonTextBuffer>() { @Mock public void _parseNumericValue(JsonToken exp) throws IOException { } }; new MockUp<JsonNumber>() { @Mock public void _parseNumericValue(JsonToken exp) throws IOException { } }; new MockUp<JsonNumber>() { @Mock public void _parseNumericValue(JsonToken exp) throws IOException { } }; new MockUp<JsonNumber>() { @Mock public void _parseNumericValue(JsonToken exp) throws IOException { } }; new MockUp<JsonNumber>() { @Mock public void _parseNumericValue(JsonToken exp) throws IOException { } }; new MockUp<JsonNumber>() { @Mock public void _parseNumericValue(JsonToken exp) throws IOException { } }; new MockUp<JsonNumber>() { @Mock public void _parseNumericValue(JsonToken exp) throws IOException { } }; new MockUp<
@Test public void testParseNumericValue() throws IOException, JsonParseException { new MockUp<JsonTextBuffer>() { @Mock public void _parseNumericValue(JsonToken exp) throws IOException { } }; new MockUp<JsonTextBuffer>() { @Mock public void _parseNumericValue(JsonToken exp) throws IOException { } }; new MockUp<JsonTextBuffer>() { @Mock public void _parseNumericValue(JsonToken exp) throws IOException { } }; new MockUp<NumberInput>() { @Mock public void _parseNumericValue(JsonToken exp) throws IOException { } }; new MockUp<NumberInput>() { @Mock public void _parseNumericValue(JsonToken exp) throws IOException { } }; new MockUp<JsonNumber>() { @Mock public void _parseNumericValue(JsonToken exp) throws IOException { } }; new MockUp<JsonNumber>() { @Mock public void _parseNumericValue(JsonToken exp) throws IOException { } }; new MockUp<JsonNumber>() { @Mock public void _parseNumericValue(JsonToken exp) throws IOException { } }; new MockUp<JsonNumber>() { @Mock public void _parseNumericValue(JsonToken exp) throws IOException { } }; new MockUp<
@Test public void testParseNumericValue() throws IOException, JsonParseException { [LINE] _textBuffer.writeString("10"); _textBuffer.writeInt(10); _parseNumericValue(JsonToken.VALUE_NUMBER_INT); assertEquals(20, _nInt.intValue()); }
@Test public void testParseNumericValue() throws IOException, JsonParseException { [LINE] void _parseNumericValue(JsonToken expType) throws IOException { _textBuffer.writeChars(expType.getText()); _textBuffer.writeInt(10); _parseNumericValue(expType); } { _textBuffer.writeChars(new char[] {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}); _textBuffer.writeInt(10); _parseNumericValue(JsonToken.VALUE_NUMBER_INT); } { _textBuffer.writeChars(new char[] {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}); _textBuffer.writeInt(10); _parseNumericValue(JsonToken.VALUE_NUMBER_INT); } { _textBuffer.writeChars(new char[] {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}); _textBuffer.writeInt(30); _parseNumericValue(JsonToken.VALUE_NUMBER_INT); } { _textBuffer.writeChars(new char[] {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}); _textBuffer.writeInt(30); _parseNumericValue(JsonToken.VALUE_NUMBER_INT); } { _textBuffer.writeChars(new char[] {
@Test public void testParseNumericValue() throws IOException, JsonParseException { [LINE] test(_textBuffer.getTextBuffer(), 0, 10); [LINE] test(_textBuffer.getTextBuffer(), 0, 10); [LINE] test(_parseNumericValue(JsonToken.VALUE_NUMBER_INT)); }
@Test public void testParseNumericValue() throws IOException, JsonParseException { new MockUp<JsonTextBuffer>() { @Mock public void _parseNumericValue(JsonToken expType) throws IOException { } }; new MockUp<JsonTextBuffer>() { @Mock public void _parseNumericValue(JsonToken expType) throws IOException { } }; new MockUp<JsonNumber>() { @Mock public void _parseNumericValue(JsonToken expType) throws IOException { } }; new MockUp<JsonNumber>() { @Mock public void _parseNumericValue(JsonToken expType) throws IOException { } }; new MockUp<JsonNumber>() { @Mock public void _parseNumericValue(JsonToken expType) throws IOException { } }; new MockUp<JsonNumber>() { @Mock public void _parseNumericValue(JsonToken expType) throws IOException { } }; new MockUp<JsonNumber>() { @Mock public void _parseNumericValue(JsonToken expType) throws IOException { } }; new MockUp<JsonNumber>() { @Mock public void _parseNumericValue(JsonToken expType) throws IOException { } }; new MockUp<JsonNumber>() { @Mock public void _parseNumericValue(JsonToken expType) throws
@Test public void testParseNumericValue() throws IOException, JsonParseException { [LINE] _textBuffer.writeString("10"); _textBuffer.writeInt(10); _parseNumericValue(JsonToken.VALUE_NUMBER_INT); assertEquals(20, _nInt.intValue()); }
@Test public void testParseNumericValue() throws IOException, JsonParseException { [LINE] void _parseNumericValue(JsonToken expType) throws IOException { _textBuffer.writeChars(expType.getText()); _textBuffer.writeInt(10); _parseNumericValue(expType); } { _textBuffer.writeChars(new char[] {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}); _textBuffer.writeInt(10); _parseNumericValue(JsonToken.VALUE_NUMBER_INT); } { _textBuffer.writeChars(new char[] {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}); _textBuffer.writeInt(10); _parseNumericValue(JsonToken.VALUE_NUMBER_INT); } { _textBuffer.writeChars(new char[] {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}); _textBuffer.writeInt(30); _parseNumericValue(JsonToken.VALUE_NUMBER_INT); } { _textBuffer.writeChars(new char[] {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}); _textBuffer.writeInt(30); _parseNumericValue(JsonToken.VALUE_NUMBER_INT); } { _textBuffer.writeChars(new char[] {
@Test public void testParseNumericValue() throws IOException, JsonParseException { [LINE] test(_textBuffer.getTextBuffer(), 0, 10); [LINE] test(_textBuffer.getTextBuffer(), 0, 10); [LINE] test(_parseNumericValue(JsonToken.VALUE_NUMBER_INT)); }
@Test public void testConvertNumberToInt() throws IOException { new Expectations() {{ _numberLong; [LINE] public int getIntValue(); [LINE] public void convertNumberToInt() throws IOException { _numberLong = 0; } }; }
@Test public void testConvertNumberToInt() throws IOException, JsonParseException { new ByteValidator() { int i; @Override protected boolean isValid() { return i == 0 || i == Integer.MAX_VALUE; } }.convertNumberToInt(); }
@Test public void testConvertDoubleToInt() throws IOException { new Expectations() {{ numberDouble; [LINE] public void convertNumberToInt() { numberDouble = 0; } }; }
@Test public void testConvertDoubleToInt() throws IOException { new Expectations() {{ _numberDouble; [LINE] result = (int) _numberDouble; [LINE] }}; _testHelper.convertNumberToInt(); }
@Test public void testConvertIntToInt() throws IOException { new Expectations() {{ _numTypesValid & NR_INT; [LINE] }}; _parser.parse(Text); _testTypeValid(Text, 0); _testTypeValid(Text, 1); _testTypeValid(Text, 2); _testTypeValid(Text, 3); _testTypeValid(Text, MIN_INT, MAX_INT); _testTypeValid(Text, MAX_INT, MIN_INT_D); _parser.parse(Text); _testTypeValid(Text, MIN_INT_D, MAX_INT_D); _testTypeValid(Text, MAX_INT_D, MAX_INT_D); }
@Test public void testConvertNumberToLong() throws IOException, JsonParseException { new Expectations() {{ getBiMinLong(); result = BI_MIN_LONG; getConverter(false).convertNumberToLong(); result = BI_MAX_LONG; getConverter(false).convertNumberToLong(); result = BI_MIN_LONG; getConverter(false).convertNumberToLong(); result = BI_MAX_LONG; getConverter(false).convertNumberToLong(); result = BI_MIN_LONG + 1; getConverter(false).convertNumberToLong(); result = BI_MAX_LONG + 1; getConverter(false).convertNumberToLong(); result = BI_MIN_LONG + 1; getConverter(false).convertNumberToLong(); result = BI_MIN_LONG + 1; getConverter(false).convertNumberToLong(); result = BI_MAX_LONG + 1; getConverter(false).convertNumberToLong(); result = BI_MIN_LONG + 1; getConverter(false).convertNumberToLong(); result = BI_MAX_LONG + 1; getConverter(false).convertNumberToLong(); result = BI_MIN_LONG + 1; getConverter(false).convertNumberToLong(); result = BI_MAX_LONG + 1; getConverter(false).convertNumberToLong();
@Test public void testConvertNumberToLong() throws IOException { new ByteByteNumber(new byte[] { (byte) 0x80, (byte) 0x81, (byte) 0x82, (byte) 0x83, (byte) 0x84, (byte) 0x85, (byte) 0x87, (byte) 0x81, (byte) 0x81, (byte) 0x82, (byte) 0x83, (byte) 0x84, (byte) 0x81, (byte) 0x81, (byte) 0x81, (byte) 0x82, (byte) 0x83, (byte) 0x84, (byte) 0x81, (byte) 0x81, (byte) 0x81, (byte) 0x81, (byte) 0x81, (byte) 0x83, (byte) 0x84, (byte) 0x81, (byte) 0x81, (byte) 0x81, (byte) 0x81, (byte) 0x81, (byte) 0x82, (byte) 0x83, (byte) 0x84, (byte)
@Test public void testReportInvalidNumber() throws JsonParseException { new MockUp<JsonReadContext>() { @Mock protected void reportInvalidNumber(JsonReadContext context, JsonParseException e) throws JsonParseException { context.assertEquals(e, context.getTokenLocation()); context.assertEquals(e, context.getTokenCharacterOffset()); context.assertEquals(e, context.getTokenLineNr()); context.assertEquals(e, context.getTokenColumnNr()); } }; new MockUp<JsonReadContext>() { @Mock protected JsonReadContext getParsingContext() { return context; } }; new MockUp<JsonReadContext>() { @Mock protected void reportInvalidNumber(JsonReadContext context, JsonParseException e) throws JsonParseException { context.assertEquals(e, context.getTokenLocation()); context.assertEquals(e, context.getTokenCharacterOffset()); context.assertEquals(e, context.getTokenLineNr()); context.assertEquals(e, context.getTokenColumnNr()); } }; new MockUp<JsonReadContext>() { @Mock protected JsonReadContext getParsingContext() { return context; } }; new MockUp<JsonReadContext>() { @Mock protected JsonReadContext getParsingContext
@Test public void testReportInvalidNumber() throws JsonParseException { new MockUp<JsonReadContext>() { @Mock protected void reportError(JsonReadContext context) throws JsonParseException { context.assertEquals(JsonParseException.class, context.getStrictMock()); context.assertEquals(JsonToken.TOKEN_LOCATION, context.getTokenLocation()); context.assertEquals(JsonToken.LINE_Nr, context.getTokenLineNr()); context.assertEquals(JsonToken.COL_NORMALIZED, context.getTokenColumnNr()); } }; new MockUp<JsonReadContext>() { @Mock protected void reportError(JsonReadContext context) throws JsonParseException { context.assertEquals(JsonParseException.class, context.getStrictMock()); context.assertEquals(JsonToken.TOKEN_LOCATION, context.getTokenLocation()); context.assertEquals(JsonToken.LINE_Nr, context.getTokenLineNr()); context.assertEquals(JsonToken.COL_NORMALIZED, context.getTokenColumnNr()); } }; new MockUp<JsonReadContext>() { @Mock protected JsonReadContext getParsingContext() { return null; } }; new MockUp<JsonReadContext>() { @Mock protected Json
@Test public void testReportOverflowLong() throws JsonParseException, IOException { new TestableJsonTokenHandler() { int i = 0; @Override public void nextToken() throws IOException { i++; _tokenTokenOffset = i; _tokenLineNr = i; _tokenColumnNr = i; } }.startToken(); [LINE] protected void reportOverflowLong(JsonToken token) throws IOException { token.text = "abc"; token.nextTokenTokenTokenOffset = token.text.length(); token.nextTokenTokenLineNr = token.text.length(); token.nextTokenColumnNr = token.text.length(); token.nextTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenTokenToken
@Test public void reportOverflowLong() throws JsonParseException { new TestJsonTokenHandler() { @Override protected void reportError(JsonParseException e) { e.printStackTrace(); } @Override protected void reportOverflowLong(JsonParseException e) { e.printStackTrace(); } }.handleNextToken(true); }
@Test public void testHas hasMoreBytes() throws Exception { Std s = new Std(null, new byte[] {0, 1, 2, 3, 4}); assertTrue(s.has hasMoreBytes()); s.reset(); assertTrue(s.hasHasBytes()); s.read(new byte[] {0, 1, 2, 3, 4}); assertTrue(s.has hasMoreBytes()); s.reset(); assertTrue(s.has hasMoreBytes()); }
@Test public void testAllocByteBuffer() { ByteBufferType type = new ByteBufferType(10); byte[] a = type.allocByteBuffer(type); byte[] b = type.allocByteBuffer(type); Assert.assertNotNull(a); Assert.assertEquals(a.length, b.length); Assert.assertEquals(a, b); }
@Test public void testBalloc() { byte[] a = ByteBufferType.balloc(10); byte[] b = new byte[a.length]; for (int i=0; i<a.length; i++) { b[i] = a[i]; } Assert.assertArrayEquals(a, b); }
@Test public void testBalloc() { byte[] a=balloc(10); byte[] b=a.copy(); Assert.assertNotNull(b); Assert.assertEquals(10, b.length); Assert.assertEquals(a, b); }
@Test public void testValueOf() { Base64Variant base64Variant = new Base64Variant(); assertEquals(base64Variant, Base64Variant.valueOf("")); assertEquals(base64Variant, Base64Variant.valueOf("")); assertEquals(base64Variant, Base64Variant.valueOf("foo")); assertEquals(base64Variant, Base64Variant.valueOf("foo")); assertEquals(base64Variant, Base64Variant.valueOf("foo")); assertEquals(base64Variant, Base64Variant.valueOf("foo")); assertEquals(base64Variant, Base64Variant.valueOf("foo")); assertEquals(base64Variant, Base64Variant.valueOf("foo")); assertEquals(base64Variant, Base64Variant.valueOf("foo")); assertEquals(base64Variant, Base64Variant.valueOf("foo")); assertEquals(base64Variant, Base64Variant.valueOf("foo")); assertEquals(base64Variant, Base64Variant.valueOf("foo")); assertEquals(base64Variant, Base64Variant.valueOf("foo")); assertEquals(base64Variant, Base64Variant.valueOf("foo")); assertEquals(base64Variant, Base64Variant.valueOf("foo")); assertEquals(base64Variant, Base64Variant.valueOf("foo")); assertEquals(base64Variant, Base64Variant.valueOf("
@Test public void valueOf() { Base64Variant PEM = Base64Variant.parse("PKCS12;p;p;p;p;p;p;p;p;p;p;p;p;p;p;p;p;p;p;p;p;p;p;p;p;p;p;p;p;p;p;p;p;p;p;p;p;p;p;p;p;p;p;p;p;p;p;p;p;p;;p;p;;p;p;;p;;p;p;;p;;p;p;;p;p;;p;;p;p;;p;p;;p;p;;p;p;p;p;p;p;p;p;p;p;p;p;p;p;p;p;p;p;p;p;p;p;p;p;p;p;p;p;p;p;p;p;p;p;p;p;p;p;p;p;p;p;p;
@Test public void testValueOf() { Base64Variant base64Variant = Base64Variant.valueOf(null); assertEquals(BASE64Variant.MIME, base64Variant); assertEquals(BASE64Variant.MIME, base64Variant); assertEquals(BASE64Variant.MODIFIED_FOR_URL, base64Variant); base64Variant = Base64Variant.valueOf("foo"); assertEquals(BASE64Variant.MIME, base64Variant); assertEquals(BASE64Variant.MIME_NO_LINEFEEDS, base64Variant); assertEquals(BASE64Variant.MIME, base64Variant); assertEquals(BASE64Variant.MIME_NO_LINEFEEDS, base64Variant); base64Variant = Base64Variant.valueOf("foo"); assertEquals(BASE64Variant.MIME, base64Variant); assertEquals(BASE64Variant.MIME_NO_LINEFEEDS, base64Variant); assertEquals(BASE64Variant.getModFIED_FOR_URL(), base64Variant.getModFIED_FOR_URL()); }
@Test public void valueOf() { Base64Variant PEM = Base64Variant.parse("-----BEGIN CERTIFICATE-----\n" + "-----END CERTIFICATE-----\n" + "-----BEGIN CERTIFICATE-----\n" + "-----END CERTIFICATE-----\n" + "-----BEGIN CERTIFICATE-----\n" + "-----END CERTIFICATE-----\n" + "-----BEGIN CERTIFICATE-----\n" + "-----END CERTIFICATE-----\n" + "-----BEGIN CERTIFICATE-----\n" + "-----END CERTIFICATE-----\n" + "-----BEGIN CERTIFICATE-----\n" + "-----END CERTIFICATE-----\n" + "-----BEGIN CERTIFICATE-----\n" + "-----END CERTIFICATE-----\n" + "-----END CERTIFICATE-----\n" + "-----BEGIN CERTIFICATE-----\n" + "-----END CERTIFICATE-----\n" + "-----END CERTIFICATE-----\n" + "-----END CERTIFICATE-----\n" + "-----BEGIN CERTIFICATE-----\n" + "-----END CERTIFICATE-----\n" + "-----END CERTIFICATE-----\n" + "-----END CERTIFICATE-----\n" + "-----END CERTIFICATE-----\n
@Test public void testValueOf() { assertThat(valueOf("text/plain"), is("text/plain")); assertThat(valueOf("text/plain;charset=UTF-8"), is("text/plain;charset=UTF-8")); assertThat(valueOf("text/plain;charset=UTF-8"), is("text/plain")); assertThat(valueOf("text/plain;charset=UTF-8"), is("text/plain")); assertThat(valueOf("text/plain;charset=UTF-8"), is("text/plain")); assertThat(valueOf("text/plain;charset=UTF-8"), is("text/plain;charset=UTF-8")); assertThat(valueOf("text/plain;charset=UTF-8"), is("text/plain;charset=UTF-8")); assertThat(valueOf("text/plain;charset=UTF-8"), is("text/plain;charset=UTF-8")); assertThat(valueOf("text/plain;charset=UTF-8"), is("text/plain;charset=UTF-8")); assertThat(valueOf("text/plain;charset=UTF-8"), is("text/plain;charset=UTF-8")); assertThat(valueOf("text/plain;charset=UTF-8"), is("text/plain;charset=UTF-8")); assertThat(valueOf("text/plain
@Test public void outputInt_small() { char[] buffer = new char[100]; outputInt(100, buffer, 0); outputInt(100, buffer, 0); outputInt(100, buffer, 1); outputInt(100, buffer, 2); outputInt(100, buffer, 3); outputInt(100, buffer, 4); outputInt(100, buffer, 5); }
@Test public void testLeadingTriplet() { char[] buffer = new char[3]; int result = outputInt(0, buffer, 0); assertEquals(0, result); result = outputInt(0, buffer, 0); assertEquals(0, result); result = outputInt(0, buffer, 0); assertEquals(0, result); result = outputInt(0, buffer, 0); assertEquals(0, result); result = outputInt(0, buffer, 0); assertEquals(0, result); result = outputInt(0, buffer, 0); assertEquals(0, result); result = outputInt(0, buffer, 0); assertEquals(0, result); result = outputInt(0, buffer, 0); assertEquals(0, result); result = outputInt(0, buffer, 0); assertEquals(0, result); buffer = new char[3]; result = outputInt(0, buffer, 0); assertEquals(0, result); buffer = new char[3]; result = outputInt(0, buffer, 0); assertEquals(0, result); buffer = new char[3]; result = outputInt(0, buffer, 0); assertEquals(0, result); buffer = new char[3]; result = outputInt(0, buffer, 0); assertEquals(0, result); buffer = new char[3]; result = outputInt(0, buffer, 0); assertEquals(0, result); buffer = new char[3]; result = outputInt(0, buffer, 0); assertEquals(0, result); buffer = new char[3]; result = outputInt(0, buffer, 0); assertEquals(0, result); buffer =
@Test public void testOutputLeadingTriplet() { char[] buffer = new char[4]; outputLeadingTriplet(4, buffer, 0); outputLeadingTriplet(5, buffer, 0); outputLeadingTriplet(6, buffer, 1); outputLeadingTriplet(7, buffer, 2); outputLeadingTriplet(8, buffer, 3); outputLeadingTriplet(9, buffer, 4); outputLeadingTriplet(12, buffer, 5); outputLeadingTriplet(14, buffer, 6); outputLeadingTriplet(15, buffer, 7); outputLeadingTriplet(16, buffer, 8); outputLeadingTriplet(32, buffer, 9); outputLeadingTriplet(32, buffer, 10); outputLeadingTriplet(32, buffer, 11); outputLeadingTriplet(32, buffer, 12); outputLeadingTriplet(32, buffer, 13); outputLeadingTriplet(32, buffer, 14); outputLeadingTriplet(32, buffer, 15); outputLeadingTriplet(32, buffer, 16); outputLeadingTriplet(32, buffer, 18); outputLeadingTriplet(32, buffer, 20); outputLeadingTriplet(32, buffer, 21); outputLeadingTriplet(32, buffer, 22); outputLeadingTriplet(32, buffer, 33); outputLeadingTriplet(32, buffer, 44); outputLeadingTri
@Test public void testOutputLeadingTriplet() { char[] buffer = new char[4]; outputLeadingTriplet(4, buffer, 0); outputLeadingTriplet(5, buffer, 0); outputLeadingTriplet(6, buffer, 1); outputLeadingTriplet(7, buffer, 2); outputLeadingTriplet(8, buffer, 3); outputLeadingTriplet(9, buffer, 4); outputLeadingTriplet(12, buffer, 5); outputLeadingTriplet(14, buffer, 6); outputLeadingTriplet(15, buffer, 7); outputLeadingTriplet(16, buffer, 8); outputLeadingTriplet(32, buffer, 9); outputLeadingTriplet(32, buffer, 10); outputLeadingTriplet(32, buffer, 11); outputLeadingTriplet(32, buffer, 12); outputLeadingTriplet(32, buffer, 13); outputLeadingTriplet(32, buffer, 14); outputLeadingTriplet(32, buffer, 15); outputLeadingTriplet(32, buffer, 16); outputLeadingTriplet(32, buffer, 18); outputLeadingTriplet(32, buffer, 20); outputLeadingTriplet(32, buffer, 21); outputLeadingTriplet(32, buffer, 22); outputLeadingTriplet(32, buffer, 33); outputLeadingTriplet(32, buffer, 44); outputLeadingTri
@Test public void testReset() { ByteArrayBuilder sb = new ByteArrayBuilder(); sb.append(i); sb.appendTwoBytes(i); sb.appendThreeBytes(i); sb.reset(); Assert.assertEquals(sb.toByteArray(), new byte[] {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16}); }
@Test public void testByteArrayBuilder() { byte[] bytes = new byte[] { (byte) 0x01, (byte) 0x02, (byte) 0x03, (byte) 0x04, (byte) 0x05, (byte) 0x06, (byte) 0x07, (byte) 0x08, (byte) 0x09, (byte) 0x08, (byte) 0x09, (byte) 0x02, (byte) 0x04, (byte) 0x06, (byte) 0x07, (byte) 0x08, (byte) 0x09, (byte) 0x02, (byte) 0x02, (byte) 0x02, (byte) 0x03, (byte) 0x04, (byte) 0x05, (byte) 0x06, (byte) 0x07, (byte) 0x08, (byte) 0x09, (byte) 0x02, (byte) 0x02, (byte) 0x02, (byte) 0x03, (byte) 0x04, (byte) 0x05, (byte) 0x06, (
@Test public void testByteArrayCopy() { byte[] bytes = new byte[] {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19 }; ByteArrayBuilder b = new ByteArrayBuilder(bytes.length); byte[] result = b.toByteArray(); assertEquals(bytes.length, result.length); for (int i = 0; i < bytes.length; i++) { assertEquals(bytes[i], result[i]); } }
@Test public void testByteArrayBuilder() { try (ByteArrayBuilder b = new ByteArrayBuilder(bufs.length)) { b.reset(); b.writeBytes(bytes); b.reset(); b.writeBytes(bytes); b.reset(); assertEquals(bytes, b.toByteArray()); } }
@Test public void testReset() { try { new ByteArrayBuilder(null, 0).toByteArray(); fail("no exception"); } catch (RuntimeException e) { } try { new ByteArrayBuilder(null, 1).toByteArray(); fail("no exception"); } catch (RuntimeException e) { } try { new ByteArrayBuilder(null, 1).toByteArray(); fail("no exception"); } catch (RuntimeException e) { } try { new ByteArrayBuilder(null, 1).toByteArray(); fail("no exception"); } catch (RuntimeException e) { } try { new ByteArrayBuilder(null, 1).toByteArray(); fail("no exception"); } catch (RuntimeException e) { } try { new ByteArrayBuilder(null, 1).toByteArray(); fail("no exception"); } catch (RuntimeException e) { } try { new ByteArrayBuilder(null, 1).toByteArray(); fail("no exception"); } catch (RuntimeException e) { } try { new ByteArrayBuilder(null, 1).toByteArray(); fail("no exception"); } catch (RuntimeException e) { } try { new ByteArrayBuilder(null, 1).toByteArray(); fail("no exception"); } catch (RuntimeException e) { } try { new ByteArrayBuilder(null, 1).toByteArray(); fail("no exception"); } catch (RuntimeException e
@Test public void testFinishCurrentSegment() { byte[] bytes = new byte[9]; for (int i=0; i<9; i++) bytes[i] = (byte)ba.finishCurrentSegment(); Assert.assertEquals(bytes[i], new byte[9]); }
@Test public void testFinishCurrentSegment() { byte[] bytes = new byte[MAX_BLOCK_SIZE]; for (int i=0; i<MAX_BLOCK_SIZE; i++) bytes[i] = _allocMore(); Assert.assertEquals(bytes[i], _finishCurrentSegment()); }
@Test public void testFinishCurrentSegment() { byte[] bytes = new byte[MAX_BLOCK_SIZE]; for (int i=0; i<MAX_BLOCK_SIZE; i++) bytes[i] = _builder.finishCurrentSegment(); Assert.assertEquals(bytes[i], _currBlock); }
@Test public void getCurrentSegment() { byte[] bytes = new byte[MAX_BLOCK_SIZE]; for (int i=0; i<MAX_BLOCK_SIZE; i++) bytes[i] = _builder.getCurrentSegment(); Assert.assertEquals(bytes[i], _currBlock); }
@Test public void test_getCurrentSegment() { byte[] bytes = new byte[100]; for (int i=0; i<100; i++) bytes[i] = _builder.getCurrentSegment(); Assert.assertEquals(bytes[i], _currBlock); }
@Test public void testSetCurrentSegmentLength() { byte[] bytes = new byte[9]; for (int i=0; i<9; i++) bytes[i] = (byte)i; ByteArrayBuilder baos = new ByteArrayBuilder(); baos.setCurrentSegmentLength(bytes.length); Assert.assertEquals(bytes[i], baos.getCurrentSegmentLength()); }
@Test public void testSetCurrentSegmentLength() { byte[] bytes = new byte[100]; for (int i=0; i<100; i++) bytes[i] = (byte) _sb.appendTwoBytes(i); Assert.assertEquals(bytes[i], _sb.getCurrentSegmentLength()); Assert.assertEquals(bytes[i], _sb.toByteArray()); }
@Test public void getCurrentSegmentLength() { byte[] bytes = new byte[MAX_BITS]; for (int i=0; i<MAX_BITS; i++) bytes[i] = (byte) _builder.getCurrentSegmentLength(); Assert.assertEquals(bytes[i], _currBlockPtr); }
@Test public void testCurrentSegmentLength() { assertEquals(new byte[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
@Test public void test_allocMore() { new ByteArrayBuilder(_firstBlockSize).allocMore(); new ByteArrayBuilder(_firstBlockSize).allocMore(); new ByteArrayBuilder(_firstBlockSize).allocMore(); new ByteArrayBuilder(_firstBlockSize).allocMore(); new ByteArrayBuilder(_firstBlockSize).allocMore(); new ByteArrayBuilder(_firstBlockSize).allocMore(); new ByteArrayBuilder(_firstBlockSize).allocMore(); new ByteArrayBuilder(_firstBlockSize).allocMore(); new ByteArrayBuilder(_firstBlockSize).allocMore(); new ByteArrayBuilder(_firstBlockSize).allocMore(); new ByteArrayBuilder(_firstBlockSize).allocMore(); new ByteArrayBuilder(_firstBlockSize).allocMore(); new ByteArrayBuilder(_firstBlockSize).allocMore(); new ByteArrayBuilder(_firstBlockSize).allocMore(); new ByteArrayBuilder(_firstBlockSize).allocMore(); new ByteArrayBuilder(_firstBlockSize).allocMore(); new ByteArrayBuilder(_firstBlockSize).allocMore(); new ByteArrayBuilder(_firstBlockSize).allocMore(); new ByteArrayBuilder(_firstBlockSize).allocMore(); new ByteArrayBuilder(_firstBlockSize).allocMore(); new ByteArrayBuilder(_firstBlockSize).allocMore(); new ByteArrayBuilder(_firstBlockSize).allocMore(); new ByteArrayBuilder(_firstBlockSize).allocMore(); new ByteArrayBuilder(_firstBlockSize).allocMore(); new ByteArrayBuilder(_first
@Test public void test_allocMore() { byte[] bytes = new byte[MAX_BLOCK_SIZE]; bytes[MAX_BLOCK_SIZE - 1] = (byte) 0xFF; _builder.append(bytes); _builder.append(bytes); int[] newBytes = _builder.toByteArray(); Assert.assertEquals(bytes.length, newBytes.length); Assert.assertEquals(bytes, newBytes); }
@Test public void testByteArrayBuilder() { byte[] bytes = new byte[MAX_BLOCK_SIZE]; for (int i = 0; i < MAX_BLOCK_SIZE; i++) { bytes[i] = (byte) i; } int newSize = Math.max((MAX_BLOCK_SIZE + 1) * 2, MAX_BLOCK_SIZE); Arrays.fill(bytes, newSize); assertEquals(newSize, bytes.length); _allocMore(); for (int i = 0; i < MAX_BLOCK_SIZE; i++) { bytes[i] = (byte) i; } assertEquals(newSize, bytes.length); _pastLen = MAX_BLOCK_SIZE; Arrays.fill(bytes, newSize); assertEquals(newSize, bytes.length); _pastBlocks = new byte[MAX_BLOCK_SIZE]; Arrays.fill(bytes, newSize); assertEquals(newSize, bytes.length); _pastLen = MAX_BLOCK_SIZE; Arrays.fill(bytes, newSize); assertEquals(newSize, bytes.length); _pastBlocks = new byte[MAX_BLOCK_SIZE]; Arrays.fill(bytes, newSize); assertEquals(newSize, bytes.length); _allocMore(); for (int i = 0; i
@Test public void testByteArrayBuilder() { byte[] bytes = new byte[MAX_BLOCK_SIZE]; for (int i = 0; i < MAX_BLOCK_SIZE; i++) { bytes[i] = (byte) i; } ByteArrayBuilder b = new ByteArrayBuilder(); b.start(); b.writeBytes(bytes); Assert.assertEquals(bytes, b.toByteArray()); b.finishCurrentSegment(); Assert.assertEquals(bytes.length, b.toByteArray().length); b.reset(); b.writeBytes(bytes); Assert.assertEquals(bytes, b.toByteArray()); b.finishCurrentSegment(); Assert.assertEquals(bytes.length, b.toByteArray().length); b.reset(); b.writeBytes(bytes); Assert.assertEquals(bytes, b.toByteArray()); }
@Test public void test_pastBlocks() { byte[] bytes = new byte[MAX_BLOCK_SIZE]; _builder.append(bytes); _builder.append(bytes); _builder.append(bytes); assertEquals(bytes, _builder.toByteArray()); }
@Test public void testByteArrayBuilder() { byte[] bytes = new byte[MAX_BLOCK_SIZE]; for (int i = 0; i < MAX_BLOCK_SIZE; i++) { bytes[i] = (byte) i; } ByteArrayBuilder b = new ByteArrayBuilder(); b.reset(); b.append(bytes[MAX_BLOCK_SIZE]); b.appendTwoBytes(bytes[MAX_BLOCK_SIZE]); b.appendThreeBytes(bytes[MAX_BLOCK_SIZE]); Assert.assertEquals(bytes, b.toByteArray()); Assert.assertEquals(bytes.length, b.toByteArray().length); Assert.assertEquals(bytes[MAX_BLOCK_SIZE - 1], b.toByteArray().length); Assert.assertEquals(bytes[MAX_BLOCK_SIZE - 1], b.toByteArray().length); }
@Test public void test_allocMore() { byte[] bytes = new byte[MAX_BLOCK_SIZE + 1]; _builder.append(bytes); assertEquals(bytes.length, _builder.getLength()); }
@Test public void parseInt() { assertEquals(1234, parseInt("1234", 0, 10)); assertEquals(1234, parseInt("1234", 0, 10)); assertEquals(1234, parseInt("1234", 0, 10)); assertEquals(1234, parseInt("1234", 0, 10)); assertEquals(1234, parseInt("1234", 0, 10)); assertEquals(1234, parseInt("1234", 0, 10)); assertEquals(1234, parseInt("1234", 0, 10)); assertEquals(1234, parseInt("1234", 0, 10)); assertEquals(1234, parseInt("1234", 0, 10)); assertEquals(1234, parseInt("1234", 0, 10)); assertEquals(1234, parseInt("1234", 0, 10)); assertEquals(1234, parseInt("1234", 0, 10)); assertEquals(1234, parseInt("1234", 0, 10)); assertEquals(1234, parseInt("1234", 0, 10)); assertEquals(1234, parseInt("1234", 0, 10)); assertEquals(1234, parseInt("1234", 0, 10)); assertEquals(1234, parseInt("1234", 0, 10)); assertEquals(1234, parseInt("1234", 0, 10)); assertEquals(1234, parseInt("1234", 0, 10)); assertEquals(1234, parseInt("1234", 0, 10)); assertEquals(1234, parseInt("1234", 0, 10)); assertEquals(1234, parseInt("1234", 0, 10)); assertEquals(1234, parseInt("
@Test public void parseInt() { assertEquals(9, parseInt("10", 10)); assertEquals(9, parseInt("10", 10)); assertEquals(9, parseInt("10", 10)); assertEquals(9, parseInt("10", 10)); assertEquals(9, parseInt("10", 10)); assertEquals(9, parseInt("10", 10)); assertEquals(9, parseInt("10", 10)); assertEquals(9, parseInt("10", 10)); assertEquals(9, parseInt("10", 10)); assertEquals(9, parseInt("10", 10)); assertEquals(9, parseInt("10", 10)); assertEquals(9, parseInt("10", 10)); assertEquals(9, parseInt("10", 10)); assertEquals(9, parseInt("10", 10)); assertEquals(9, parseInt("10", 10)); assertEquals(9, parseInt("10", 10)); assertEquals(9, parseInt("10", 10)); assertEquals(9, parseInt("10", 10)); assertEquals(9, parseInt("10", 10)); assertEquals(9, parseInt("10", 10)); assertEquals(9, parseInt("10", 10)); assertEquals(9, parseInt("10", 10)); assertEquals(9, parseInt("10", 10)); assertEquals(9, parseInt("10", 10)); assertEquals(9, parseInt("10", 10)); assertEquals(9, parseInt("10", 10)); assertEquals(9, parseInt("10", 10)); assertEquals(9, parseInt("
@Test public void parseInt() { assertEquals(1234, parseInt("1234", 0, 10)); assertEquals(1234, parseInt("1234", 0, 10)); assertEquals(1234, parseInt("1234", 0, 10)); assertEquals(1234, parseInt("1234", 0, 10)); assertEquals(1234, parseInt("1234", 0, 10)); assertEquals(1234, parseInt("1234", 0, 10)); assertEquals(1234, parseInt("1234", 0, 10)); assertEquals(1234, parseInt("1234", 0, 10)); assertEquals(1234, parseInt("1234", 0, 10)); assertEquals(1234, parseInt("1234", 0, 10)); assertEquals(1234, parseInt("1234", 0, 10)); assertEquals(1234, parseInt("1234", 0, 10)); assertEquals(1234, parseInt("1234", 0, 10)); assertEquals(1234, parseInt("1234", 0, 10)); assertEquals(1234, parseInt("1234", 0, 10)); assertEquals(1234, parseInt("1234", 0, 10)); assertEquals(1234, parseInt("1234", 0, 10)); assertEquals(1234, parseInt("1234", 0, 10)); assertEquals(1234, parseInt("1234", 0, 10)); assertEquals(1234, parseInt("1234", 0, 10)); assertEquals(1234, parseInt("1234", 0, 10)); assertEquals(1234, parseInt("1234", 0, 10)); assertEquals(1234, parseInt("
@Test public void parseInt() { assertEquals(9, parseInt("10", 10)); assertEquals(9, parseInt("10", 10)); assertEquals(9, parseInt("10", 10)); assertEquals(9, parseInt("10", 10)); assertEquals(9, parseInt("10", 10)); assertEquals(9, parseInt("10", 10)); assertEquals(9, parseInt("10", 10)); assertEquals(9, parseInt("10", 10)); assertEquals(9, parseInt("10", 10)); assertEquals(9, parseInt("10", 10)); assertEquals(9, parseInt("10", 10)); assertEquals(9, parseInt("10", 10)); assertEquals(9, parseInt("10", 10)); assertEquals(9, parseInt("10", 10)); assertEquals(9, parseInt("10", 10)); assertEquals(9, parseInt("10", 10)); assertEquals(9, parseInt("10", 10)); assertEquals(9, parseInt("10", 10)); assertEquals(9, parseInt("10", 10)); assertEquals(9, parseInt("10", 10)); assertEquals(9, parseInt("10", 10)); assertEquals(9, parseInt("10", 10)); assertEquals(9, parseInt("10", 10)); assertEquals(9, parseInt("10", 10)); assertEquals(9, parseInt("10", 10)); assertEquals(9, parseInt("10", 10)); assertEquals(9, parseInt("10", 10)); assertEquals(9, parseInt("
@Test public void parseInt() { assertEquals(1234, parseInt("1234", 0, 10)); assertEquals(1234, parseInt("1234", 0, 10)); assertEquals(1234, parseInt("1234", 0, 10)); assertEquals(1234, parseInt("1234", 0, 10)); assertEquals(1234, parseInt("1234", 0, 10)); assertEquals(1234, parseInt("1234", 0, 10)); assertEquals(1234, parseInt("1234", 0, 10)); assertEquals(1234, parseInt("1234", 0, 10)); assertEquals(1234, parseInt("1234", 0, 10)); assertEquals(1234, parseInt("1234", 0, 10)); assertEquals(1234, parseInt("1234", 0, 10)); assertEquals(1234, parseInt("1234", 0, 10)); assertEquals(1234, parseInt("1234", 0, 10)); assertEquals(1234, parseInt("1234", 0, 10)); assertEquals(1234, parseInt("1234", 0, 10)); assertEquals(1234, parseInt("1234", 0, 10)); assertEquals(1234, parseInt("1234", 0, 10)); assertEquals(1234, parseInt("1234", 0, 10)); assertEquals(1234, parseInt("1234", 0, 10)); assertEquals(1234, parseInt("1234", 0, 10)); assertEquals(1234, parseInt("1234", 0, 10)); assertEquals(1234, parseInt("1234", 0, 10)); assertEquals(1234, parseInt("
@Test public void parseInt() { assertEquals(9, parseInt("10", 10)); assertEquals(9, parseInt("10", 10)); assertEquals(9, parseInt("10", 10)); assertEquals(9, parseInt("10", 10)); assertEquals(9, parseInt("10", 10)); assertEquals(9, parseInt("10", 10)); assertEquals(9, parseInt("10", 10)); assertEquals(9, parseInt("10", 10)); assertEquals(9, parseInt("10", 10)); assertEquals(9, parseInt("10", 10)); assertEquals(9, parseInt("10", 10)); assertEquals(9, parseInt("10", 10)); assertEquals(9, parseInt("10", 10)); assertEquals(9, parseInt("10", 10)); assertEquals(9, parseInt("10", 10)); assertEquals(9, parseInt("10", 10)); assertEquals(9, parseInt("10", 10)); assertEquals(9, parseInt("10", 10)); assertEquals(9, parseInt("10", 10)); assertEquals(9, parseInt("10", 10)); assertEquals(9, parseInt("10", 10)); assertEquals(9, parseInt("10", 10)); assertEquals(9, parseInt("10", 10)); assertEquals(9, parseInt("10", 10)); assertEquals(9, parseInt("10", 10)); assertEquals(9, parseInt("10", 10)); assertEquals(9, parseInt("10", 10)); assertEquals(9, parseInt("
@Test public void parseInt() { assertEquals(1234, parseInt("1234", 0, 10)); assertEquals(1234, parseInt("1234", 0, 10)); assertEquals(1234, parseInt("1234", 0, 10)); assertEquals(1234, parseInt("1234", 0, 10)); assertEquals(1234, parseInt("1234", 0, 10)); assertEquals(1234, parseInt("1234", 0, 10)); assertEquals(1234, parseInt("1234", 0, 10)); assertEquals(1234, parseInt("1234", 0, 10)); assertEquals(1234, parseInt("1234", 0, 10)); assertEquals(1234, parseInt("1234", 0, 10)); assertEquals(1234, parseInt("1234", 0, 10)); assertEquals(1234, parseInt("1234", 0, 10)); assertEquals(1234, parseInt("1234", 0, 10)); assertEquals(1234, parseInt("1234", 0, 10)); assertEquals(1234, parseInt("1234", 0, 10)); assertEquals(1234, parseInt("1234", 0, 10)); assertEquals(1234, parseInt("1234", 0, 10)); assertEquals(1234, parseInt("1234", 0, 10)); assertEquals(1234, parseInt("1234", 0, 10)); assertEquals(1234, parseInt("1234", 0, 10)); assertEquals(1234, parseInt("1234", 0, 10)); assertEquals(1234, parseInt("1234", 0, 10)); assertEquals(1234, parseInt("
@Test public void parseInt() { assertEquals(9, parseInt("10", 10)); assertEquals(9, parseInt("10", 10)); assertEquals(9, parseInt("10", 10)); assertEquals(9, parseInt("10", 10)); assertEquals(9, parseInt("10", 10)); assertEquals(9, parseInt("10", 10)); assertEquals(9, parseInt("10", 10)); assertEquals(9, parseInt("10", 10)); assertEquals(9, parseInt("10", 10)); assertEquals(9, parseInt("10", 10)); assertEquals(9, parseInt("10", 10)); assertEquals(9, parseInt("10", 10)); assertEquals(9, parseInt("10", 10)); assertEquals(9, parseInt("10", 10)); assertEquals(9, parseInt("10", 10)); assertEquals(9, parseInt("10", 10)); assertEquals(9, parseInt("10", 10)); assertEquals(9, parseInt("10", 10)); assertEquals(9, parseInt("10", 10)); assertEquals(9, parseInt("10", 10)); assertEquals(9, parseInt("10", 10)); assertEquals(9, parseInt("10", 10)); assertEquals(9, parseInt("10", 10)); assertEquals(9, parseInt("10", 10)); assertEquals(9, parseInt("10", 10)); assertEquals(9, parseInt("10", 10)); assertEquals(9, parseInt("10", 10)); assertEquals(9, parseInt("
@Test public void parseInt() { assertEquals(1234, parseInt("1234", 0, 10)); assertEquals(1234, parseInt("1234", 0, 10)); assertEquals(1234, parseInt("1234", 0, 10)); assertEquals(1234, parseInt("1234", 0, 10)); assertEquals(1234, parseInt("1234", 0, 10)); assertEquals(1234, parseInt("1234", 0, 10)); assertEquals(1234, parseInt("1234", 0, 10)); assertEquals(1234, parseInt("1234", 0, 10)); assertEquals(1234, parseInt("1234", 0, 10)); assertEquals(1234, parseInt("1234", 0, 10)); assertEquals(1234, parseInt("1234", 0, 10)); assertEquals(1234, parseInt("1234", 0, 10)); assertEquals(1234, parseInt("1234", 0, 10)); assertEquals(1234, parseInt("1234", 0, 10)); assertEquals(1234, parseInt("1234", 0, 10)); assertEquals(1234, parseInt("1234", 0, 10)); assertEquals(1234, parseInt("1234", 0, 10)); assertEquals(1234, parseInt("1234", 0, 10)); assertEquals(1234, parseInt("1234", 0, 10)); assertEquals(1234, parseInt("1234", 0, 10)); assertEquals(1234, parseInt("1234", 0, 10)); assertEquals(1234, parseInt("1234", 0, 10)); assertEquals(1234, parseInt("
@Test public void parseInt() { assertEquals(9, parseInt("10", 10)); assertEquals(9, parseInt("10", 10)); assertEquals(9, parseInt("10", 10)); assertEquals(9, parseInt("10", 10)); assertEquals(9, parseInt("10", 10)); assertEquals(9, parseInt("10", 10)); assertEquals(9, parseInt("10", 10)); assertEquals(9, parseInt("10", 10)); assertEquals(9, parseInt("10", 10)); assertEquals(9, parseInt("10", 10)); assertEquals(9, parseInt("10", 10)); assertEquals(9, parseInt("10", 10)); assertEquals(9, parseInt("10", 10)); assertEquals(9, parseInt("10", 10)); assertEquals(9, parseInt("10", 10)); assertEquals(9, parseInt("10", 10)); assertEquals(9, parseInt("10", 10)); assertEquals(9, parseInt("10", 10)); assertEquals(9, parseInt("10", 10)); assertEquals(9, parseInt("10", 10)); assertEquals(9, parseInt("10", 10)); assertEquals(9, parseInt("10", 10)); assertEquals(9, parseInt("10", 10)); assertEquals(9, parseInt("10", 10)); assertEquals(9, parseInt("10", 10)); assertEquals(9, parseInt("10", 10)); assertEquals(9, parseInt("10", 10)); assertEquals(9, parseInt("
@Test public void parseInt() { assertEquals(1234, parseInt("1234", 0, 10)); assertEquals(1234, parseInt("1234", 0, 10)); assertEquals(1234, parseInt("1234", 0, 10)); assertEquals(1234, parseInt("1234", 0, 10)); assertEquals(1234, parseInt("1234", 0, 10)); assertEquals(1234, parseInt("1234", 0, 10)); assertEquals(1234, parseInt("1234", 0, 10)); assertEquals(1234, parseInt("1234", 0, 10)); assertEquals(1234, parseInt("1234", 0, 10)); assertEquals(1234, parseInt("1234", 0, 10)); assertEquals(1234, parseInt("1234", 0, 10)); assertEquals(1234, parseInt("1234", 0, 10)); assertEquals(1234, parseInt("1234", 0, 10)); assertEquals(1234, parseInt("1234", 0, 10)); assertEquals(1234, parseInt("1234", 0, 10)); assertEquals(1234, parseInt("1234", 0, 10)); assertEquals(1234, parseInt("1234", 0, 10)); assertEquals(1234, parseInt("1234", 0, 10)); assertEquals(1234, parseInt("1234", 0, 10)); assertEquals(1234, parseInt("1234", 0, 10)); assertEquals(1234, parseInt("1234", 0, 10)); assertEquals(1234, parseInt("1234", 0, 10)); assertEquals(1234, parseInt("
@Test public void parseInt() { assertEquals(9, parseInt("10", 10)); assertEquals(9, parseInt("10", 10)); assertEquals(9, parseInt("10", 10)); assertEquals(9, parseInt("10", 10)); assertEquals(9, parseInt("10", 10)); assertEquals(9, parseInt("10", 10)); assertEquals(9, parseInt("10", 10)); assertEquals(9, parseInt("10", 10)); assertEquals(9, parseInt("10", 10)); assertEquals(9, parseInt("10", 10)); assertEquals(9, parseInt("10", 10)); assertEquals(9, parseInt("10", 10)); assertEquals(9, parseInt("10", 10)); assertEquals(9, parseInt("10", 10)); assertEquals(9, parseInt("10", 10)); assertEquals(9, parseInt("10", 10)); assertEquals(9, parseInt("10", 10)); assertEquals(9, parseInt("10", 10)); assertEquals(9, parseInt("10", 10)); assertEquals(9, parseInt("10", 10)); assertEquals(9, parseInt("10", 10)); assertEquals(9, parseInt("10", 10)); assertEquals(9, parseInt("10", 10)); assertEquals(9, parseInt("10", 10)); assertEquals(9, parseInt("10", 10)); assertEquals(9, parseInt("10", 10)); assertEquals(9, parseInt("10", 10)); assertEquals(9, parseInt("
@Test public void parseInt() { assertEquals(1234, parseInt("1234", 0, 10)); assertEquals(1234, parseInt("1234", 0, 10)); assertEquals(1234, parseInt("1234", 0, 10)); assertEquals(1234, parseInt("1234", 0, 10)); assertEquals(1234, parseInt("1234", 0, 10)); assertEquals(1234, parseInt("1234", 0, 10)); assertEquals(1234, parseInt("1234", 0, 10)); assertEquals(1234, parseInt("1234", 0, 10)); assertEquals(1234, parseInt("1234", 0, 10)); assertEquals(1234, parseInt("1234", 0, 10)); assertEquals(1234, parseInt("1234", 0, 10)); assertEquals(1234, parseInt("1234", 0, 10)); assertEquals(1234, parseInt("1234", 0, 10)); assertEquals(1234, parseInt("1234", 0, 10)); assertEquals(1234, parseInt("1234", 0, 10)); assertEquals(1234, parseInt("1234", 0, 10)); assertEquals(1234, parseInt("1234", 0, 10)); assertEquals(1234, parseInt("1234", 0, 10)); assertEquals(1234, parseInt("1234", 0, 10)); assertEquals(1234, parseInt("1234", 0, 10)); assertEquals(1234, parseInt("1234", 0, 10)); assertEquals(1234, parseInt("1234", 0, 10)); assertEquals(1234, parseInt("
@Test public void parseInt() { assertEquals(9, parseInt("10", 10)); assertEquals(9, parseInt("10", 10)); assertEquals(9, parseInt("10", 10)); assertEquals(9, parseInt("10", 10)); assertEquals(9, parseInt("10", 10)); assertEquals(9, parseInt("10", 10)); assertEquals(9, parseInt("10", 10)); assertEquals(9, parseInt("10", 10)); assertEquals(9, parseInt("10", 10)); assertEquals(9, parseInt("10", 10)); assertEquals(9, parseInt("10", 10)); assertEquals(9, parseInt("10", 10)); assertEquals(9, parseInt("10", 10)); assertEquals(9, parseInt("10", 10)); assertEquals(9, parseInt("10", 10)); assertEquals(9, parseInt("10", 10)); assertEquals(9, parseInt("10", 10)); assertEquals(9, parseInt("10", 10)); assertEquals(9, parseInt("10", 10)); assertEquals(9, parseInt("10", 10)); assertEquals(9, parseInt("10", 10)); assertEquals(9, parseInt("10", 10)); assertEquals(9, parseInt("10", 10)); assertEquals(9, parseInt("10", 10)); assertEquals(9, parseInt("10", 10)); assertEquals(9, parseInt("10", 10)); assertEquals(9, parseInt("10", 10)); assertEquals(9, parseInt("
@Test public void parseInt() { assertEquals(1234, parseInt("1234", 0, 10)); assertEquals(1234, parseInt("1234", 0, 10)); assertEquals(1234, parseInt("1234", 0, 10)); assertEquals(1234, parseInt("1234", 0, 10)); assertEquals(1234, parseInt("1234", 0, 10)); assertEquals(1234, parseInt("1234", 0, 10)); assertEquals(1234, parseInt("1234", 0, 10)); assertEquals(1234, parseInt("1234", 0, 10)); assertEquals(1234, parseInt("1234", 0, 10)); assertEquals(1234, parseInt("1234", 0, 10)); assertEquals(1234, parseInt("1234", 0, 10)); assertEquals(1234, parseInt("1234", 0, 10)); assertEquals(1234, parseInt("1234", 0, 10)); assertEquals(1234, parseInt("1234", 0, 10)); assertEquals(1234, parseInt("1234", 0, 10)); assertEquals(1234, parseInt("1234", 0, 10)); assertEquals(1234, parseInt("1234", 0, 10)); assertEquals(1234, parseInt("1234", 0, 10)); assertEquals(1234, parseInt("1234", 0, 10)); assertEquals(1234, parseInt("1234", 0, 10)); assertEquals(1234, parseInt("1234", 0, 10)); assertEquals(1234, parseInt("1234", 0, 10)); assertEquals(1234, parseInt("
@Test public void parseInt() { assertEquals(0, parseInt("0")); assertEquals(1, parseInt("1")); assertEquals(2, parseInt("2")); assertEquals(3, parseInt("3")); assertEquals(4, parseInt("4")); assertEquals(5, parseInt("5")); assertEquals(6, parseInt("6")); assertEquals(7, parseInt("7")); assertEquals(8, parseInt("8")); assertEquals(9, parseInt("9")); assertEquals(9, parseInt("10")); assertEquals(9, parseInt("11")); assertEquals(9, parseInt("12")); assertEquals(9, parseInt("13")); assertEquals(9, parseInt("14")); assertEquals(9, parseInt("15")); assertEquals(9, parseInt("16")); assertEquals(9, parseInt("17")); assertEquals(9, parseInt("18")); assertEquals(9, parseInt("19")); assertEquals(9, parseInt("21")); assertEquals(9, parseInt("22")); assertEquals(9, parseInt("23")); assertEquals(9, parseInt("24")); assertEquals(24, parseInt("25")); assertEquals(24, parseInt("26")); assertEquals(24, parseInt("27")); assertEquals(24, parseInt("28")); assertEquals(24, parseInt("29")); assertEquals(28, parseInt("30")); assertEquals(28, parseInt("31")); assertEquals(311, parseInt("32")); assertEquals(311, parseInt("33")); assertEquals(311, parseInt("34")); assertEquals(311, parseInt("35")); assertEquals(311, parseInt
@Test public void parseInt() { assertEquals(0, parseInt("0")); assertEquals(0, parseInt("0a")); assertEquals(0, parseInt("0b")); assertEquals(0, parseInt("0c")); assertEquals(0, parseInt("0a0b0c0d0e0f")); assertEquals(0, parseInt("0a0b0c0d0e0f")); assertEquals(0, parseInt("0a0b0c0d0e0f")); assertEquals(0, parseInt("0a0b0c0d0e0f")); assertEquals(0, parseInt("0a0b0c0d0e0f")); assertEquals(0, parseInt("0a0b0c0d0e0f")); assertEquals(0, parseInt("0a0b0c0d0e0f")); assertEquals(0, parseInt("0a0b0c0d0e0f")); assertEquals(0, parseInt("0a0b0c0d0e0f")); assertEquals(0, parseInt("0a0b0c0d0e0f")); assertEquals(0, parseInt("0a0b0c0d0e0f")); assertEquals(0, parseInt("0a0b0c0d0e0f")); assertEquals(0, parseInt("0a0b0c0d0e0f"));
@Test public void parseInt() { assertEquals(0, parseInt("0")); assertEquals(0, parseInt("-9")); assertEquals(0, parseInt("0a")); assertEquals(0, parseInt("0b")); assertEquals(0, parseInt("0c")); assertEquals(0, parseInt("0d")); assertEquals(0, parseInt("0e")); assertEquals(0, parseInt("0f")); assertEquals(0, parseInt("0g")); assertEquals(0, parseInt("0h")); assertEquals(0, parseInt("0i")); assertEquals(0, parseInt("0i-")); assertEquals(0, parseInt("0i-a")); assertEquals(0, parseInt("0i-b")); assertEquals(0, parseInt("0i-c")); assertEquals(0, parseInt("0i-d")); assertEquals(0, parseInt("0i-e")); assertEquals(0, parseInt("0i-f")); assertEquals(0, parseInt("0i-g")); assertEquals(0, parseInt("0i-h")); assertEquals(0, parseInt("0i-i-f")); assertEquals(0, parseInt("0i-h")); assertEquals(0, parseInt("0i-h")); assertEquals(0, parseInt("0i-h")); assertEquals(0, parseInt("0i-h")); assertEquals(0, parseInt("0i-h")); assertEquals(0, parseInt("0i-h")); assertEquals(0, parseInt("0i-h")); assertEquals(0, parseInt("0i-h")); assertEquals(0, parseInt("0i-h")); assertEquals
@Test public void parseInt() { assertEquals(0, parseInt("0")); assertEquals(0, parseInt("-1")); assertEquals(0, parseInt("0a")); assertEquals(0, parseInt("0b")); assertEquals(0, parseInt("0c")); assertEquals(0, parseInt("0d")); assertEquals(0, parseInt("0e")); assertEquals(0, parseInt("0f")); assertEquals(0, parseInt("0g")); assertEquals(0, parseInt("0h")); assertEquals(0, parseInt("0i")); assertEquals(0, parseInt("0i-")); assertEquals(0, parseInt("0i-")); assertEquals(0, parseInt("0i-a")); assertEquals(0, parseInt("0i-a-b")); assertEquals(0, parseInt("0i-a-b-c")); assertEquals(0, parseInt("0i-a-b-c-d")); assertEquals(0, parseInt("0i-a-b-c-d")); assertEquals(0, parseInt("0i-a-b-c-d")); assertEquals(0, parseInt("0i-a-b-c-d")); assertEquals(0, parseInt("0i-a-b-c-d")); assertEquals(0, parseInt("0i-a-b-c-d")); assertEquals(0, parseInt("0i-a-b-c-d")); assertEquals(0, parseInt("0i-a-b-c-d")); assertEquals(0, parseInt("
@Test public void parseInt() { assertEquals(0, parseInt("0")); assertEquals(1, parseInt("1")); assertEquals(2, parseInt("2")); assertEquals(3, parseInt("3")); assertEquals(4, parseInt("4")); assertEquals(5, parseInt("5")); assertEquals(6, parseInt("6")); assertEquals(7, parseInt("7")); assertEquals(8, parseInt("9")); assertEquals(9, parseInt("10")); assertEquals(9, parseInt("11")); assertEquals(9, parseInt("12")); assertEquals(9, parseInt("13")); assertEquals(9, parseInt("14")); assertEquals(9, parseInt("15")); assertEquals(9, parseInt("16")); assertEquals(9, parseInt("17")); assertEquals(9, parseInt("18")); assertEquals(9, parseInt("19")); assertEquals(9, parseInt("21")); assertEquals(19, parseInt("22")); assertEquals(20, parseInt("23")); assertEquals(20, parseInt("23")); assertEquals(20, parseInt("24")); assertEquals(24, parseInt("23-23")); assertEquals(24, parseInt("24-23")); assertEquals(24, parseInt("24-23")); assertEquals(24, parseInt("24-23")); assertEquals(24, parseInt("24-23")); assertEquals(24, parseInt("24-23")); assertEquals(24, parseInt("24-23")); assertEquals(24, parseInt("24-23")); assertEquals(24, parseInt("24-23")); assertEquals(24, parseInt("
@Test public void parseInt() { assertEquals(0, parseInt("0")); assertEquals(0, parseInt("-1")); assertEquals(0, parseInt("0a")); assertEquals(0, parseInt("0b")); assertEquals(0, parseInt("0c")); assertEquals(0, parseInt("0d")); assertEquals(0, parseInt("0e")); assertEquals(0, parseInt("0f")); assertEquals(0, parseInt("0g")); assertEquals(0, parseInt("0h")); assertEquals(0, parseInt("0i")); assertEquals(0, parseInt("0i-")); assertEquals(0, parseInt("0i-a")); assertEquals(0, parseInt("0i-a-b")); assertEquals(0, parseInt("0i-a-b-c")); assertEquals(0, parseInt("0i-a-b-c-d")); assertEquals(0, parseInt("0i-a-b-c-d")); assertEquals(0, parseInt("0i-a-b-c-d")); assertEquals(0, parseInt("0i-a-b-c-d")); assertEquals(0, parseInt("0i-a-b-c-d")); assertEquals(0, parseInt("0i-a-b-c-d")); assertEquals(0, parseInt("0i-a-b-c-d")); assertEquals(0, parseInt("0i-a-b-c-d")); assertEquals(0, parseInt("0i-a-b-c
@Test public void parseInt() { assertEquals(0, parseInt("")); assertEquals(0, parseInt("0")); assertEquals(0, parseInt("0a")); assertEquals(0, parseInt("0b")); assertEquals(0, parseInt("0c")); assertEquals(0, parseInt("0d")); assertEquals(0, parseInt("0e")); assertEquals(0, parseInt("0f")); assertEquals(0, parseInt("0g")); assertEquals(0, parseInt("0h")); assertEquals(0, parseInt("0i")); assertEquals(0, parseInt("0i-")); assertEquals(0, parseInt("0i-a")); assertEquals(0, parseInt("0i-a-b")); assertEquals(0, parseInt("0i-a-b-c")); assertEquals(0, parseInt("0i-a-b-c-d")); assertEquals(0, parseInt("0i-a-b-c-d")); assertEquals(0, parseInt("0i-a-b-c-d")); assertEquals(0, parseInt("0i-a-b-c-d")); assertEquals(0, parseInt("0i-a-b-c-d")); assertEquals(0, parseInt("0i-a-b-c-d")); assertEquals(0, parseInt("0i-a-b-c-d")); assertEquals(0, parseInt("0i-a-b-c-d")); assertEquals(0, parseInt("0i-a-b-c-
@Test public void parseInt() { assertEquals(Integer.parseInt("1"), 1); assertEquals(Integer.parseInt("1"), 2); assertEquals(Integer.parseInt("1"), 3); assertEquals(Integer.parseInt("1"), 4); assertEquals(Integer.parseInt("1"), 5); assertEquals(Integer.parseInt("1"), 6); assertEquals(Integer.parseInt("1"), 7); assertEquals(Integer.parseInt("1"), 8); assertEquals(Integer.parseInt("1"), 9); assertEquals(Integer.parseInt("1"), 10); assertEquals(Integer.parseInt("1"), 11); assertEquals(Integer.parseInt("1"), 12); assertEquals(Integer.parseInt("1"), -1); assertEquals(Integer.parseInt("1"), -1); assertEquals(Integer.parseInt("1"), Integer.parseInt("1")); assertEquals(Integer.parseInt("1"), Integer.parseInt("1")); assertEquals(Integer.parseInt("1"), Integer.parseInt("1")); assertEquals(Integer.parseInt("1"), Integer.parseInt("1a")); assertEquals(Integer.parseInt("1"), Integer.parseInt("1b")); assertEquals(Integer.parseInt("1"), Integer.parseInt("1c")); assertEquals(Integer.parseInt("1"), Integer.parseInt("1d")); assertEquals(Integer.parseInt("1"), Integer
@Test public void parseInt() { assertEquals(Integer.parseInt("1"), 1); assertEquals(Integer.parseInt("1"), 2); assertEquals(Integer.parseInt("1"), 3); assertEquals(Integer.parseInt("1"), 4); assertEquals(Integer.parseInt("1"), 5); assertEquals(Integer.parseInt("1"), 6); assertEquals(Integer.parseInt("1"), 7); assertEquals(Integer.parseInt("1"), 8); assertEquals(Integer.parseInt("1"), 9); assertEquals(Integer.parseInt("1"), 10); assertEquals(Integer.parseInt("1"), 10); assertEquals(Integer.parseInt("1"), 11); assertEquals(Integer.parseInt("1"), 12); assertEquals(Integer.parseInt("1"), 13); assertEquals(Integer.parseInt("1"), 14); assertEquals(Integer.parseInt("1"), 15); assertEquals(Integer.parseInt("1"), 16); assertEquals(Integer.parseInt("1"), 17); assertEquals(Integer.parseInt("1"), 18); assertEquals(Integer.parseInt("1"), 19); assertEquals(Integer.parseInt("1"), 20); assertEquals(Integer.parseInt("1"), 30); assertEquals(Integer.parseInt("1"), 40); assertEquals(Integer.parseInt("1"), 50); assertEquals(Integer.parseInt("1"), 60); assertEquals(
@Test public void parseInt() { assertEquals(0, parseInt("0")); assertEquals(0, parseInt("-9")); assertEquals(0, parseInt("0a")); assertEquals(0, parseInt("0b")); assertEquals(0, parseInt("0c")); assertEquals(0, parseInt("0d")); assertEquals(0, parseInt("0e")); assertEquals(0, parseInt("0f")); assertEquals(0, parseInt("0g")); assertEquals(0, parseInt("0h")); assertEquals(0, parseInt("0i")); assertEquals(0, parseInt("0i-")); assertEquals(0, parseInt("0i-a")); assertEquals(0, parseInt("0i-a-b")); assertEquals(0, parseInt("0i-a-b-c")); assertEquals(0, parseInt("0i-a-b-c-d")); assertEquals(0, parseInt("0i-a-b-c-d")); assertEquals(0, parseInt("0i-a-b-c-d")); assertEquals(0, parseInt("0i-a-b-c-d")); assertEquals(0, parseInt("0i-a-b-c-d")); assertEquals(0, parseInt("0i-a-b-c-d")); assertEquals(0, parseInt("0i-a-b-c-d")); assertEquals(0, parseInt("0i-a-b-c-d")); assertEquals(0, parseInt("0i-a-b-c
@Test public void parseInt() { assertEquals(Integer.parseInt("1"), 1); assertEquals(Integer.parseInt("1"), 2); assertEquals(Integer.parseInt("1"), 3); assertEquals(Integer.parseInt("1"), 4); assertEquals(Integer.parseInt("1"), 5); assertEquals(Integer.parseInt("1"), 6); assertEquals(Integer.parseInt("1"), 7); assertEquals(Integer.parseInt("1"), 8); assertEquals(Integer.parseInt("1"), 9); assertEquals(Integer.parseInt("1"), 10); assertEquals(Integer.parseInt("1"), 11); assertEquals(Integer.parseInt("1"), 12); assertEquals(Integer.parseInt("1"), -1); assertEquals(Integer.parseInt("1"), -1); assertEquals(Integer.parseInt("1"), Integer.parseInt("1")); assertEquals(Integer.parseInt("1"), Integer.parseInt("1")); assertEquals(Integer.parseInt("1"), Integer.parseInt("1")); assertEquals(Integer.parseInt("1"), Integer.parseInt("1a")); assertEquals(Integer.parseInt("1"), Integer.parseInt("1b")); assertEquals(Integer.parseInt("1"), Integer.parseInt("1c")); assertEquals(Integer.parseInt("1"), Integer.parseInt("1d")); assertEquals(Integer.parseInt("1"), Integer
@Test public void parseInt() { assertEquals(Integer.parseInt("0"), 0); assertEquals(Integer.parseInt("1"), 1); assertEquals(Integer.parseInt("1"), 2); assertEquals(Integer.parseInt("1"), 3); assertEquals(Integer.parseInt("1"), 4); assertEquals(Integer.parseInt("1"), 5); assertEquals(Integer.parseInt("1"), 6); assertEquals(Integer.parseInt("1"), 7); assertEquals(Integer.parseInt("1"), 8); assertEquals(Integer.parseInt("1"), 9); assertEquals(Integer.parseInt("1"), 10); assertEquals(Integer.parseInt("1"), 11); assertEquals(Integer.parseInt("1"), 12); assertEquals(Integer.parseInt("1"), -1); assertEquals(Integer.parseInt("1"), -1); assertEquals(Integer.parseInt("1"), Integer.parseInt("1")); assertEquals(Integer.parseInt("1"), Integer.parseInt("1")); assertEquals(Integer.parseInt("1"), Integer.parseInt("1")); assertEquals(Integer.parseInt("1"), Integer.parseInt("1")); assertEquals(Integer.parseInt("1"), Integer.parseInt("1")); assertEquals(Integer.parseInt("1"), Integer.parseInt("1")); assertEquals(Integer.parseInt("1"), Integer.parseInt("1")); assertEquals(Integer.
@Test public void parseInt() { assertEquals(0, parseInt("0")); assertEquals(0, parseInt("-9")); assertEquals(0, parseInt("0a")); assertEquals(0, parseInt("0b")); assertEquals(0, parseInt("0c")); assertEquals(0, parseInt("0d")); assertEquals(0, parseInt("0e")); assertEquals(0, parseInt("0f")); assertEquals(0, parseInt("0g")); assertEquals(0, parseInt("0h")); assertEquals(0, parseInt("0i")); assertEquals(0, parseInt("0i-")); assertEquals(0, parseInt("0i-a")); assertEquals(0, parseInt("0i-b")); assertEquals(0, parseInt("0i-c")); assertEquals(0, parseInt("0i-d")); assertEquals(0, parseInt("0i-e")); assertEquals(0, parseInt("0i-f")); assertEquals(0, parseInt("0i-g")); assertEquals(0, parseInt("0i-h")); assertEquals(0, parseInt("0i-i-f")); assertEquals(0, parseInt("0i-h")); assertEquals(0, parseInt("0i-h")); assertEquals(0, parseInt("0i-h")); assertEquals(0, parseInt("0i-h")); assertEquals(0, parseInt("0i-h")); assertEquals(0, parseInt("0i-h")); assertEquals(0, parseInt("0i-h")); assertEquals(0, parseInt("0i-h")); assertEquals(0, parseInt("0i-h")); assertEquals
@Test public void parseInt() { assertEquals(0, parseInt("0")); assertEquals(0, parseInt("-9")); assertEquals(0, parseInt("0a")); assertEquals(0, parseInt("0b")); assertEquals(0, parseInt("0c")); assertEquals(0, parseInt("0d")); assertEquals(0, parseInt("0e")); assertEquals(0, parseInt("0f")); assertEquals(0, parseInt("0g")); assertEquals(0, parseInt("0h")); assertEquals(0, parseInt("0i")); assertEquals(0, parseInt("0i-")); assertEquals(0, parseInt("0i-a")); assertEquals(0, parseInt("0i-a-b")); assertEquals(0, parseInt("0i-a-b-c")); assertEquals(0, parseInt("0i-a-b-c-d")); assertEquals(0, parseInt("0i-a-b-c-d")); assertEquals(0, parseInt("0i-a-b-c-d")); assertEquals(0, parseInt("0i-a-b-c-d")); assertEquals(0, parseInt("0i-a-b-c-d")); assertEquals(0, parseInt("0i-a-b-c-d")); assertEquals(0, parseInt("0i-a-b-c-d")); assertEquals(0, parseInt("0i-a-b-c-d")); assertEquals(0, parseInt("0i-a-b-c
@Test public void parseInt() { assertEquals(Integer.parseInt("1"), 1); assertEquals(Integer.parseInt("1"), 2); assertEquals(Integer.parseInt("1"), 3); assertEquals(Integer.parseInt("1"), 4); assertEquals(Integer.parseInt("1"), 5); assertEquals(Integer.parseInt("1"), 6); assertEquals(Integer.parseInt("1"), 7); assertEquals(Integer.parseInt("1"), 8); assertEquals(Integer.parseInt("1"), 9); assertEquals(Integer.parseInt("1"), 10); assertEquals(Integer.parseInt("1"), 10); assertEquals(Integer.parseInt("1"), 11); assertEquals(Integer.parseInt("1"), 12); assertEquals(Integer.parseInt("1"), 13); assertEquals(Integer.parseInt("1"), 14); assertEquals(Integer.parseInt("1"), 15); assertEquals(Integer.parseInt("1"), 16); assertEquals(Integer.parseInt("1"), 17); assertEquals(Integer.parseInt("1"), 18); assertEquals(Integer.parseInt("1"), 19); assertEquals(Integer.parseInt("1"), 20); assertEquals(Integer.parseInt("1"), 30); assertEquals(Integer.parseInt("1"), 40); assertEquals(Integer.parseInt("1"), 50); assertEquals(Integer.parseInt("1"), 60); assertEquals(
@Test public void parseInt() { assertEquals(Integer.parseInt("0"), 0); assertEquals(Integer.parseInt("1"), 1); assertEquals(Integer.parseInt("1"), 2); assertEquals(Integer.parseInt("1"), 3); assertEquals(Integer.parseInt("1"), 4); assertEquals(Integer.parseInt("1"), 5); assertEquals(Integer.parseInt("1"), 6); assertEquals(Integer.parseInt("1"), 7); assertEquals(Integer.parseInt("1"), 8); assertEquals(Integer.parseInt("1"), 9); assertEquals(Integer.parseInt("1"), 10); assertEquals(Integer.parseInt("1"), 11); assertEquals(Integer.parseInt("1"), 12); assertEquals(Integer.parseInt("1"), -1); assertEquals(Integer.parseInt("1"), -1); assertEquals(Integer.parseInt("1"), Integer.parseInt("1")); assertEquals(Integer.parseInt("1"), Integer.parseInt("1")); assertEquals(Integer.parseInt("1"), Integer.parseInt("1")); assertEquals(Integer.parseInt("1"), Integer.parseInt("1")); assertEquals(Integer.parseInt("1"), Integer.parseInt("1")); assertEquals(Integer.parseInt("1"), Integer.parseInt("1")); assertEquals(Integer.parseInt("1"), Integer.parseInt("1")); assertEquals(Integer.
@Test public void parseInt() { assertEquals(Integer.parseInt("1"), 1); assertEquals(Integer.parseInt("1"), 2); assertEquals(Integer.parseInt("1"), 3); assertEquals(Integer.parseInt("1"), 4); assertEquals(Integer.parseInt("1"), 5); assertEquals(Integer.parseInt("1"), 6); assertEquals(Integer.parseInt("1"), 7); assertEquals(Integer.parseInt("1"), 8); assertEquals(Integer.parseInt("1"), 9); assertEquals(Integer.parseInt("1"), 10); assertEquals(Integer.parseInt("1"), 10); assertEquals(Integer.parseInt("1"), 11); assertEquals(Integer.parseInt("1"), 12); assertEquals(Integer.parseInt("1"), -1); assertEquals(Integer.parseInt("1"), -1); assertEquals(Integer.parseInt("1"), Integer.parseInt("1")); assertEquals(Integer.parseInt("1"), Integer.parseInt("1")); assertEquals(Integer.parseInt("1"), Integer.parseInt("1")); assertEquals(Integer.parseInt("1"), Integer.parseInt("1")); assertEquals(Integer.parseInt("1"), Integer.parseInt("1")); assertEquals(Integer.parseInt("1"), Integer.parseInt("1")); assertEquals(Integer.parseInt("1"), Integer.parseInt("1")); assertEquals(Integer.
@Test public void parseInt() { assertEquals(0, parseInt("0")); assertEquals(0, parseInt("-9")); assertEquals(0, parseInt("0a")); assertEquals(0, parseInt("0b")); assertEquals(0, parseInt("0c")); assertEquals(0, parseInt("0d")); assertEquals(0, parseInt("0e")); assertEquals(0, parseInt("0f")); assertEquals(0, parseInt("0g")); assertEquals(0, parseInt("0h")); assertEquals(0, parseInt("0i")); assertEquals(0, parseInt("0i-")); assertEquals(0, parseInt("0i-a")); assertEquals(0, parseInt("0i-a-b")); assertEquals(0, parseInt("0i-a-b-c")); assertEquals(0, parseInt("0i-a-b-c-d")); assertEquals(0, parseInt("0i-a-b-c-d")); assertEquals(0, parseInt("0i-a-b-c-d")); assertEquals(0, parseInt("0i-a-b-c-d")); assertEquals(0, parseInt("0i-a-b-c-d")); assertEquals(0, parseInt("0i-a-b-c-d")); assertEquals(0, parseInt("0i-a-b-c-d")); assertEquals(0, parseInt("0i-a-b-c-d")); assertEquals(0, parseInt("0i-a-b-c
@Test public void parseInt() { assertEquals(Integer.parseInt("1"), 1); assertEquals(Integer.parseInt("1"), 2); assertEquals(Integer.parseInt("1"), 3); assertEquals(Integer.parseInt("1"), 4); assertEquals(Integer.parseInt("1"), 5); assertEquals(Integer.parseInt("1"), 6); assertEquals(Integer.parseInt("1"), 7); assertEquals(Integer.parseInt("1"), 8); assertEquals(Integer.parseInt("1"), 9); assertEquals(Integer.parseInt("1"), 10); assertEquals(Integer.parseInt("1"), 10); assertEquals(Integer.parseInt("1"), 11); assertEquals(Integer.parseInt("1"), 12); assertEquals(Integer.parseInt("1"), 13); assertEquals(Integer.parseInt("1"), 14); assertEquals(Integer.parseInt("1"), 15); assertEquals(Integer.parseInt("1"), 16); assertEquals(Integer.parseInt("1"), 17); assertEquals(Integer.parseInt("1"), 18); assertEquals(Integer.parseInt("1"), 19); assertEquals(Integer.parseInt("1"), 20); assertEquals(Integer.parseInt("1"), 30); assertEquals(Integer.parseInt("1"), 40); assertEquals(Integer.parseInt("1"), 50); assertEquals(Integer.parseInt("1"), 60); assertEquals(
@Test public void parseInt() { assertEquals(Integer.parseInt("0"), 0); assertEquals(Integer.parseInt("1"), 1); assertEquals(Integer.parseInt("1"), 2); assertEquals(Integer.parseInt("1"), 3); assertEquals(Integer.parseInt("1"), 4); assertEquals(Integer.parseInt("1"), 5); assertEquals(Integer.parseInt("1"), 6); assertEquals(Integer.parseInt("1"), 7); assertEquals(Integer.parseInt("1"), 8); assertEquals(Integer.parseInt("1"), 9); assertEquals(Integer.parseInt("1"), 10); assertEquals(Integer.parseInt("1"), 11); assertEquals(Integer.parseInt("1"), 12); assertEquals(Integer.parseInt("1"), -1); assertEquals(Integer.parseInt("1"), -1); assertEquals(Integer.parseInt("1"), Integer.parseInt("1")); assertEquals(Integer.parseInt("1"), Integer.parseInt("1")); assertEquals(Integer.parseInt("1"), Integer.parseInt("1")); assertEquals(Integer.parseInt("1"), Integer.parseInt("1")); assertEquals(Integer.parseInt("1"), Integer.parseInt("1")); assertEquals(Integer.parseInt("1"), Integer.parseInt("1")); assertEquals(Integer.parseInt("1"), Integer.parseInt("1")); assertEquals(Integer.
@Test public void parseInt() { assertEquals(Integer.parseInt("1"), 1); assertEquals(Integer.parseInt("1"), 2); assertEquals(Integer.parseInt("1"), 3); assertEquals(Integer.parseInt("1"), 4); assertEquals(Integer.parseInt("1"), 5); assertEquals(Integer.parseInt("1"), 6); assertEquals(Integer.parseInt("1"), 7); assertEquals(Integer.parseInt("1"), 8); assertEquals(Integer.parseInt("1"), 9); assertEquals(Integer.parseInt("1"), 10); assertEquals(Integer.parseInt("1"), 10); assertEquals(Integer.parseInt("1"), 11); assertEquals(Integer.parseInt("1"), 12); assertEquals(Integer.parseInt("1"), -1); assertEquals(Integer.parseInt("1"), -1); assertEquals(Integer.parseInt("1"), Integer.parseInt("1")); assertEquals(Integer.parseInt("1"), Integer.parseInt("1")); assertEquals(Integer.parseInt("1"), Integer.parseInt("1")); assertEquals(Integer.parseInt("1"), Integer.parseInt("1")); assertEquals(Integer.parseInt("1"), Integer.parseInt("1")); assertEquals(Integer.parseInt("1"), Integer.parseInt("1")); assertEquals(Integer.parseInt("1"), Integer.parseInt("1")); assertEquals(Integer.
@Test public void parseInt() { assertEquals(0, parseInt("0")); assertEquals(0, parseInt("-9")); assertEquals(0, parseInt("0a")); assertEquals(0, parseInt("0b")); assertEquals(0, parseInt("0c")); assertEquals(0, parseInt("0d")); assertEquals(0, parseInt("0e")); assertEquals(0, parseInt("0f")); assertEquals(0, parseInt("0g")); assertEquals(0, parseInt("0h")); assertEquals(0, parseInt("0i")); assertEquals(0, parseInt("0i-")); assertEquals(0, parseInt("0i-a")); assertEquals(0, parseInt("0i-a-b")); assertEquals(0, parseInt("0i-a-b-c")); assertEquals(0, parseInt("0i-a-b-c-d")); assertEquals(0, parseInt("0i-a-b-c-d")); assertEquals(0, parseInt("0i-a-b-c-d")); assertEquals(0, parseInt("0i-a-b-c-d")); assertEquals(0, parseInt("0i-a-b-c-d")); assertEquals(0, parseInt("0i-a-b-c-d")); assertEquals(0, parseInt("0i-a-b-c-d")); assertEquals(0, parseInt("0i-a-b-c-d")); assertEquals(0, parseInt("0i-a-b-c
@Test public void parseInt() { assert parseInt("0"); assert parseInt("10"); assert parseInt("10.1"); assert parseInt("10.1-"); assert parseInt("10.1-a"); assert parseInt("10.1-b"); assert parseInt("10.1-c"); assert parseInt("10.1-b-c"); assert parseInt("10.1-b-c"); assert parseInt("10.1-b-c"); assert parseInt("10.1-b-c"); assert parseInt("10.1-b-c"); assert parseInt("10.1-b-c"); assert parseInt("10.1-b-c"); assert parseInt("10.1-b-c"); assert parseInt("10.1-b-c"); assert parseInt("10.1-b-c"); assert parseInt("10.1-b-c"); assert parseInt("10.1-b-c"); assert parseInt("10.1-b-c"); assert parseInt("10.1-b-c"); assert parseInt("10.1-b-c"); assert parseInt("10.1-b-c"); assert parseInt("10.1-b-c"); assert parseInt("10.1-b-c"); assert parseInt("10.1-b-c"); assert parseInt("10.1-b-c"); assert
@Test public void parseInt() { assertEquals(Integer.parseInt("1"), 1); assertEquals(Integer.parseInt("1"), 2); assertEquals(Integer.parseInt("1"), 3); assertEquals(Integer.parseInt("1"), 4); assertEquals(Integer.parseInt("1"), 5); assertEquals(Integer.parseInt("1"), 6); assertEquals(Integer.parseInt("1"), 7); assertEquals(Integer.parseInt("1"), 8); assertEquals(Integer.parseInt("1"), 9); assertEquals(Integer.parseInt("1"), 10); assertEquals(Integer.parseInt("1"), 10); assertEquals(Integer.parseInt("1"), 11); assertEquals(Integer.parseInt("1"), 12); assertEquals(Integer.parseInt("1"), 13); assertEquals(Integer.parseInt("1"), 14); assertEquals(Integer.parseInt("1"), 15); assertEquals(Integer.parseInt("1"), 16); assertEquals(Integer.parseInt("1"), 17); assertEquals(Integer.parseInt("1"), 18); assertEquals(Integer.parseInt("1"), 19); assertEquals(Integer.parseInt("1"), 20); assertEquals(Integer.parseInt("1"), 30); assertEquals(Integer.parseInt("1"), 40); assertEquals(Integer.parseInt("1"), 50); assertEquals(Integer.parseInt("1"), 60); assertEquals(
@Test public void parseInt() { assertEquals(Integer.parseInt("0"), 0); assertEquals(Integer.parseInt("1"), 1); assertEquals(Integer.parseInt("1"), 2); assertEquals(Integer.parseInt("1"), 3); assertEquals(Integer.parseInt("1"), 4); assertEquals(Integer.parseInt("1"), 5); assertEquals(Integer.parseInt("1"), 6); assertEquals(Integer.parseInt("1"), 7); assertEquals(Integer.parseInt("1"), 8); assertEquals(Integer.parseInt("1"), 9); assertEquals(Integer.parseInt("1"), 10); assertEquals(Integer.parseInt("1"), 11); assertEquals(Integer.parseInt("1"), 12); assertEquals(Integer.parseInt("1"), -1); assertEquals(Integer.parseInt("1"), -1); assertEquals(Integer.parseInt("1"), Integer.parseInt("1")); assertEquals(Integer.parseInt("1"), Integer.parseInt("1")); assertEquals(Integer.parseInt("1"), Integer.parseInt("1")); assertEquals(Integer.parseInt("1"), Integer.parseInt("1")); assertEquals(Integer.parseInt("1"), Integer.parseInt("1")); assertEquals(Integer.parseInt("1"), Integer.parseInt("1")); assertEquals(Integer.parseInt("1"), Integer.parseInt("1")); assertEquals(Integer.
@Test public void parseInt() { assertEquals(Integer.parseInt("1"), 1); assertEquals(Integer.parseInt("1"), 2); assertEquals(Integer.parseInt("1"), 3); assertEquals(Integer.parseInt("1"), 4); assertEquals(Integer.parseInt("1"), 5); assertEquals(Integer.parseInt("1"), 6); assertEquals(Integer.parseInt("1"), 7); assertEquals(Integer.parseInt("1"), 8); assertEquals(Integer.parseInt("1"), 9); assertEquals(Integer.parseInt("1"), 10); assertEquals(Integer.parseInt("1"), 10); assertEquals(Integer.parseInt("1"), 11); assertEquals(Integer.parseInt("1"), 12); assertEquals(Integer.parseInt("1"), -1); assertEquals(Integer.parseInt("1"), -1); assertEquals(Integer.parseInt("1"), Integer.parseInt("1")); assertEquals(Integer.parseInt("1"), Integer.parseInt("1")); assertEquals(Integer.parseInt("1"), Integer.parseInt("1")); assertEquals(Integer.parseInt("1"), Integer.parseInt("1")); assertEquals(Integer.parseInt("1"), Integer.parseInt("1")); assertEquals(Integer.parseInt("1"), Integer.parseInt("1")); assertEquals(Integer.parseInt("1"), Integer.parseInt("1")); assertEquals(Integer.
@Test public void parseInt() { assertEquals(-1, parseInt("-1")); assertEquals(-1, parseInt("-1")); assertEquals(-1, parseInt("0")); assertEquals(-1, parseInt("0a")); assertEquals(-1, parseInt("0b")); assertEquals(-1, parseInt("0c")); assertEquals(-1, parseInt("0d")); assertEquals(-1, parseInt("0e")); assertEquals(-1, parseInt("0f")); assertEquals(-1, parseInt("0g")); assertEquals(-1, parseInt("0h")); assertEquals(-1, parseInt("0i")); assertEquals(-1, parseInt("0f")); assertEquals(-1, parseInt("0i")); assertEquals(-1, parseInt("0f-")); assertEquals(-1, parseInt("0f")); assertEquals(-1, parseInt("0f")); assertEquals(-1, parseInt("0f-")); assertEquals(-1, parseInt("0f")); assertEquals(-1, parseInt("0f-")); assertEquals(-1, parseInt("0f")); assertEquals(-1, parseInt("0f-")); assertEquals(-1, parseInt("0f")); assertEquals(-1, parseInt("0f")); assertEquals(-1, parseInt("0f-")); assertEquals(-1, parseInt("0f")); assertEquals(-1, parseInt("0f")); assertEquals(-1, parseInt("0f")); assertEquals(-1, parseInt("0")); }
@Test public void testLongParse() { assertEquals(12345L, parseLong("12345")); assertEquals(12345L, parseLong("12345")); assertEquals(12345L, parseLong("12345")); assertEquals(12345L, parseLong("12345")); assertEquals(12345L, parseLong("12345")); }
@Test public void testParseLong() { Assert.assertEquals(1414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414
@Test public void testParseInt() { assertEquals(12345L, parseInt("12345")); assertEquals(12345L, parseInt("12345")); assertEquals(12345L, parseInt("12345")); assertEquals(12345L, parseInt("12345")); assertEquals(12345L, parseInt("12345")); }
@Test public void testParseInt() { assertEquals(Integer.MAX_VALUE + (long) parseInt("b", 0, 9), BigDe.MAX_VALUE); assertEquals(Integer.MIN_VALUE + (long) parseInt("b", 0, 9), BigDe.MIN_VALUE); assertEquals(Long.MAX_VALUE + (long) parseInt("b", 0, 9), BigDe.MAX_VALUE); assertEquals(Long.MAX_VALUE + (long) parseInt("b", 0, 9), BigDe.MAX_VALUE); }
@Test public void testInLongRange() { for (int i = 0; i < cmp.length; ++i) { if (i == 0) { assertTrue(inLongRange("a", false)); } else { assertTrue(inLongRange("a", false)); } } }
@Test public void testInLongRange() { { String number1 = "101233445566778899"; String number2 = "101233445566778899"; String number3 = "101233445566778899"; boolean inLongRange = inLongRange(number1, true, number2); boolean inLongRange2 = inLongRange(number2, true, number3); boolean inLongRange3 = inLongRange(number3, true, number1); boolean inLongRange4 = inLongRange(number4, true, number2); boolean inLongRange5 = inLongRange(number1, true, number1); boolean inLongRange6 = inLongRange(number1, true, number1); boolean inLongRange7 = inLongRange(number1, true, number1); boolean inLongRange8 = inLongRange(number1, true, number1); boolean inLongRange9 = inLongRange(number1, true, number1); boolean inLongRange10 = inLongRange(number1, true, number1); boolean inLongRange11 = inLongRange(number1, true, number1); boolean inLongRange12 = inLongRange(number1, true, number1); boolean inLongRange13 = inLongRange(number1,
@Test public void testInLongRangeWithNegative() { boolean result = inLongRange("-", false); Assert.assertTrue(result); result = inLongRange("-", false); Assert.assertFalse(result); result = inLongRange("-", false); Assert.assertTrue(result); result = inLongRange("-", false); Assert.assertFalse(result); result = inLongRange("-", false); Assert.assertFalse(result); result = inLongRange("-", false); Assert.assertFalse(result); result = inLongRange("-", false); Assert.assertFalse(result); result = inLongRange("-", false); Assert.assertFalse(result); result = inLongRange("-", false); Assert.assertTrue(result); result = inLongRange("-", false); Assert.assertTrue(result); result = inLongRange("-", false); Assert.assertTrue(result); result = inLongRange("-", false); Assert.assertTrue(result); result = inLongRange("-", false); Assert.assertTrue(result); result = inLongRange("-", false); Assert.assertTrue(result); result = inLongRange("-", false); Assert.assertTrue(result); result = in
@Test public void testInLongRangeWithNegative() { assertFalse(inLongRange("1a", false)); assertFalse(inLongRange("1a", true)); assertFalse(inLongRange("1a", false)); assertFalse(inLongRange("1a", true)); assertFalse(inLongRange("1a", false)); assertFalse(inLongRange("1a", false)); assertFalse(inLongRange("1a", false)); assertFalse(inLongRange("1a", false)); assertFalse(inLongRange("1a", false)); assertFalse(inLongRange("1a", false)); assertFalse(inLongRange("1a", false)); assertFalse(inLongRange("1a", false)); assertFalse(inLongRange("1a", false)); assertFalse(inLongRange("1a", false)); assertFalse(inLongRange("1a", false)); assertFalse(inLongRange("1a", false)); assertFalse(inLongRange("1a", false)); assertFalse(inLongRange("1a", false)); assertFalse(inLongRange("1a", false)); assertFalse(inLongRange("1a", false)); assertFalse(inLongRange("1a", false)); assertFalse(inLongRange("1a", false)); assertFalse(
@Test public void testJsonCodec() throws IOException { UTF8StreamJsonParser f; f = new UTF8StreamJsonParser(null, 0, null, _codec, null, 0, 0, true); ObjectCodec codec = f.getCodec(); assertEquals(Codec.JSON, codec); f = new UTF8StreamJsonParser(null, 0, null, _codec, null, 0, 0, true); codec = f.getCodec(); assertEquals(Codec.JSON, codec); f = new UTF8StreamJsonParser(null, 0, null, _codec, null, 0, true); codec = f.getCodec(); assertEquals(Codec.JSON, codec); f = new UTF8StreamJsonParser(null, 0, null, _codec, null, 0, 0, true); codec = f.getCodec(); assertEquals(Codec.JSON, codec); f = new UTF8StreamJsonParser(null, 0, null, _codec, null, 0, 0, true); codec = f.getCodec(); assertEquals(Codec.JSON, codec); f = new UTF8StreamJsonParser(null, 0, null, _codec, null, 0, 0, true); codec = f.getCodec(); assertEquals(Codec.JSON, codec); f = new UTF8StreamJsonParser
@Test public void testJsonParser() throws IOException { UTF8StreamJsonParser f; f = new UTF8StreamJsonParser(null, 0, null, codec, null, 0, 0, true); ObjectCodec codec = f.getCodec(); assertEquals(codec, f.getCodec()); f = new UTF8StreamJsonParser(null, 0, null, codec, null, 0, 0, true); codec = f.getCodec(); assertEquals(codec, f.getCodec()); f = new UTF8StreamJsonParser(null, 0, null, codec, null, 0, true); codec = f.getCodec(); assertEquals(codec, f.getCodec()); f = new UTF8StreamJsonParser(null, 0, null, codec, null, 0, 0, true); codec = f.getCodec(); assertEquals(codec, f.getCodec()); f = new UTF8StreamJsonParser(null, 0, null, codec, null, 0, 0, true); codec = f.getCodec(); assertEquals(codec, f.getCodec()); f = new UTF8StreamJsonParser(null, 0, null, codec, null, 0, 0, true); codec = f.getCodec(); assertEquals(codec, f.getCodec()); f = new UTF8StreamJsonParser
@Test public void releaseBuffered() throws IOException { UTF8StreamJsonParser parser = new UTF8StreamJsonParser(null, 0, null, null, 0, 0, false); ByteArrayOutputStream buffer = new ByteArrayOutputStream(); parser.releaseBuffered(buffer); assertEquals(0, buffer.read()); assertEquals(0, buffer.read()); assertEquals(0, buffer.read()); assertEquals(0, buffer.read()); assertEquals(0, buffer.read()); assertEquals(0, buffer.read()); assertEquals(0, buffer.read()); assertEquals(0, buffer.read()); assertEquals(0, buffer.read()); assertEquals(0, buffer.read()); assertEquals(0, buffer.read()); assertEquals(0, buffer.read()); assertEquals(0, buffer.read()); assertEquals(0, buffer.read()); assertEquals(0, buffer.read()); assertEquals(0, buffer.read()); assertEquals(0, buffer.read()); assertEquals(0, buffer.read()); }
@Test public void releaseBuffered() throws IOException { UTF8StreamJsonParser parser = new UTF8StreamJsonParser(null, 0, null, null, null, 0, 0, false); ByteArrayOutputStream out = new ByteArrayOutputStream(); parser.releaseBuffered(out); assertEquals(0, out.read(new byte[20]), "Unexpected EOF"); }
@Test public void releaseBuffered() throws IOException { UTF8StreamJsonParser parser = new UTF8StreamJsonParser(null, 0, null, null, 0, 0, false); ByteArrayOutputStream buffer = new ByteArrayOutputStream(); parser.releaseBuffered(buffer); assertEquals(0, buffer.read()); assertEquals(0, buffer.read()); assertEquals(0, buffer.read()); assertEquals(0, buffer.read()); assertEquals(0, buffer.read()); assertEquals(0, buffer.read()); assertEquals(0, buffer.read()); assertEquals(0, buffer.read()); assertEquals(0, buffer.read()); assertEquals(0, buffer.read()); assertEquals(0, buffer.read()); assertEquals(0, buffer.read()); assertEquals(0, buffer.read()); assertEquals(0, buffer.read()); assertEquals(0, buffer.read()); assertEquals(0, buffer.read()); assertEquals(0, buffer.read()); parser.releaseBuffered(buffer); assertEquals(0, buffer.read()); assertEquals(0, buffer.read()); assertEquals(0, buffer.read()); assertEquals(0, buffer.read()); assertEquals(0, buffer.read()); assertEquals(0, buffer.read()); assertEquals(0, buffer.read()); assertEquals(0, buffer.read()); assertEquals(0, buffer.read()); assertEquals(0, buffer.read()); assertEquals(0, buffer.read()); assertEquals(0, buffer.read()); assertEquals(0, buffer.read()); assertEquals(0, buffer.read()); assertEquals(0, buffer.read()); assertEquals(0, buffer.read());
@Test public void releaseBuffered() throws IOException { UTF8StreamJsonParser parser = new UTF8StreamJsonParser(ctxt, features, in, codec, sym, inputBuffer, 0, inputBuffer.length, true); ByteArrayOutputStream out = new ByteArrayOutputStream(); parser.releaseBuffered(out); assertEquals(0, out.read()); assertEquals(0, out.read()); assertEquals(0, out.read()); assertEquals(0, out.read()); assertEquals(0, out.read()); assertEquals(0, out.read()); assertEquals(0, out.read()); assertEquals(0, out.read()); assertEquals(0, out.read()); assertEquals(0, out.read()); assertEquals(0, out.read()); assertEquals(0, out.read()); assertEquals(0, out.read()); }
@Test public void releaseBuffered() throws IOException { int end = _inputEnd - 1; new UTF8StreamJsonParser(_context, 1, _in, _codec, sym, inputBuffer, 0, end, false).releaseBuffered(out); assertEquals(end, out.getEnd()); }
@Test public void releaseBuffered() throws IOException { UTF8StreamJsonParser parser = new UTF8StreamJsonParser(null, 0, null, null, 0, 0, false); ByteArrayOutputStream buffer = new ByteArrayOutputStream(); parser.releaseBuffered(buffer); assertEquals(0, buffer.read()); assertEquals(0, buffer.read()); assertEquals(0, buffer.read()); assertEquals(0, buffer.read()); assertEquals(0, buffer.read()); assertEquals(0, buffer.read()); assertEquals(0, buffer.read()); assertEquals(0, buffer.read()); assertEquals(0, buffer.read()); assertEquals(0, buffer.read()); assertEquals(0, buffer.read()); assertEquals(0, buffer.read()); assertEquals(0, buffer.read()); assertEquals(0, buffer.read()); assertEquals(0, buffer.read()); assertEquals(0, buffer.read()); assertEquals(0, buffer.read()); assertEquals(0, buffer.read()); assertEquals(0, buffer.read()); assertEquals(0, buffer.read()); assertEquals(0, buffer.read()); assertEquals(0, buffer.read()); assertEquals(0, buffer.read()); assertEquals(0, buffer.read()); assertEquals(0, buffer.read()); assertEquals(0, buffer.read()); assertEquals(0, buffer.read()); assertEquals(0, buffer.read()); assertEquals(0, buffer.read()); assertEquals(0, buffer.read()); assertEquals(0, buffer.read()); assertEquals(0, buffer.read()); assertEquals(0, buffer.read()); assertEquals(0, buffer.read()); assertEquals
@Test public void testGetText2() { assertEquals(null, parser.getText2()); assertEquals(null, parser.getText2("\"")); assertEquals(null, parser.getText2("\"foo\"")); assertEquals("foo", parser.getText2("\"foo\"")); assertEquals("foo", parser.getText2("\"foo\"")); assertEquals("foo", parser.getText2("\"foo\"")); assertEquals("foo", parser.getText2("\"foo\"")); assertEquals("foo", parser.getText2("\"foo\"")); assertEquals("foo", parser.getText2("\"foo\"")); assertEquals("foo\"", parser.getText2("\"foo\"")); assertEquals("foo\"", parser.getText2("\"foo\"\"\"")); assertEquals("foo\"", parser.getText2("\"\"foo\"\"\"")); assertEquals("foo\"", parser.getText2("\"\"foo\"\"\"")); assertEquals("foo\"", parser.getText2("\"\"\"foo\"\"\"")); assertEquals("foo\"", parser.getText2("\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"
@Test public void getTextCharacters() throws IOException, JsonParseException { assertNull(new Token(null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null
@Test public void getTextLength() throws IOException, JsonParseException { assertEquals(0, _parser.getTextLength()); }
@Test public void getTextOffset() throws IOException, JsonParseException { assertEquals(0, _parser.getTextOffset()); }
@Test public void testTokenInObject() throws IOException, JsonParseException { { (new Token(JsonToken.VALUE_STRING, "foo")).nextToken(); (new Token(JsonToken.INT_QUOTE, "bar")).nextToken(); (new Token(JsonToken.START_OBJECT, "foo")).nextToken(); (new Token(JsonToken.START_ARRAY, "bar")).nextToken(); (new Token(JsonToken.START_OBJECT, "baz")).nextToken(); (new Token(JsonToken.START_OBJECT, "foo")).nextToken(); (new Token(JsonToken.START_OBJECT, "bar")).nextToken(); (new Token(JsonToken.START_OBJECT, "baz")).nextToken(); (new Token(JsonToken.START_ARRAY, "foo")).nextToken(); (new Token(JsonToken.START_OBJECT, "bar")).nextToken(); (new Token(JsonToken.START_OBJECT, "baz")).nextToken(); (new Token(JsonToken.START_OBJECT, "foo")).nextToken(); (new Token(JsonToken.START_OBJECT, "bar")).nextToken(); (new Token(JsonToken.START_OBJECT, "baz")).nextToken();
@Test public void testNextTokenNotInObject() { { (new MockUp<Token>() { @Mock public Token nextToken() { return (new MockUp<Token>() { @Mock public Token getToken() { return (new MockUp<Token>() { @Mock public Token getValue() { return (new MockUp<Token>() { @Mock public Token getToken() { return (new MockUp<Token>() { @Mock public Token getValue() { return (new MockUp<Token>() { @Mock public Token getNextToken() { return (new MockUp<Token>() { @Mock public Token getTokenType getTokenType() { (byte) { } @Mock public Token getTokenType getTokenType() { (byte) { super.addToken( (byte) { @Mock public Token getTokenType getTokenType() { (byte) { { (new Byte getTokenType()) { @Mock public Token getTokenType getTokenType() { (byte) { (byte) { (byte) { (byte) { (byte) { (byte) { (byte) { (byte) { (byte) { (byte) { (byte) { (byte) { (byte) { (byte) { (byte) { (byte) { (byte) { (byte) { (byte) { (byte
@Test public void testIntInObject() throws IOException, JsonParseException { { (new MockToken("foo")).assertEquals("foo", ((JsonToken) _tokenNotInObject(0)).getText()); { (new MockToken("foo")).assertEquals("foo", ((JsonToken) _tokenNotInObject(1)).getText()); } { (new MockToken("foo")).assertEquals("foo", ((JsonToken) _tokenNotInObject(2)).getText()); } { (new MockToken("foo")).assertEquals("foo", ((JsonToken) _tokenNotInObject(3)).getText()); } { (new MockToken("foo")).assertEquals("foo", ((JsonToken) _tokenNotInObject(4))).getText()); } { (new MockToken("foo")).assertEquals("foo", ((JsonToken) _tokenNotInObject(0)).getText()); } { (new MockToken("foo")).assertEquals("foo", ((JsonToken) _tokenNotInObject(1)).getText()); } { (new MockToken("foo")).assertEquals("foo", ((JsonToken) _tokenNotInObject(2)).getText()); } { (new MockToken("foo")).assertEquals("foo", ((JsonToken) _tokenNotInObject(3))).getText()); } } { (new Mock
@Test public void test_nextTokenNotInObject() throws IOException, JsonParseException { _expectedToken("true"); _expectedToken("false"); _expectedToken("false"); _expectedToken("foo"); _expectedToken("foo"); _expectedToken("foo"); _expectedToken("foo"); _expectedToken("foo"); _expectedToken("foo"); _expectedToken("foo"); _expectedToken("foo"); _expectedToken("foo"); _expectedToken("foo"); _expectedToken("foo"); _expectedToken("foo"); _expectedToken("foo"); _expectedToken("foo"); _expectedToken("foo"); _expectedToken("foo"); _expectedToken("foo"); _expectedToken("foo"); _expectedToken("foo", "foo"); _expectedToken("foo", "foo"); _expectedToken("foo", "foo"); _expectedToken("foo", "foo"); _expectedToken("foo", "foo"); _expectedToken("foo", "foo"); _expectedToken("foo", "foo"); _expectedToken("foo", "foo"); _expectedToken("foo", "foo"); _expectedToken("foo", "foo"); _expectedToken("foo", "foo"); _expectedToken("foo", "foo"); _expectedToken("
@Test public void testIntNotInObject() { { (new JsonToken(JsonToken.INT_QUOTE, "foo")).assertEquals("foo", ((JsonToken) _tokenNotInObject(0)).getText()); { (new JsonToken(JsonToken.INT_QUOTE, "bar")).assertEquals("bar", ((JsonToken) _tokenNotInObject(1)).getText()); } { (new JsonToken(JsonToken.INT_QUOTE, "baz")).assertEquals("baz", ((JsonToken) _tokenNotInObject(2)).getText()); } { (new JsonToken(JsonToken.INT_QUOTE, "foo")).assertEquals("foo", ((JsonToken) _tokenNotInObject(3)).getText()); } { (new JsonToken(JsonToken.INT_QUOTE, "foo")).assertEquals("foo", ((JsonToken) _tokenNotInObject(4))).getText()); } { (new JsonToken(JsonToken.INT_QUOTE, "foo")).assertEquals("foo", ((JsonToken) _tokenNotInObject(4))).getText()); } { (new JsonToken(JsonToken.INT_QUOTE, "bar")).assertEquals("foo", ((JsonToken) _tokenNotInObject(4))).getText
@Test public void testVerifyNoLeadingZeroes() throws IOException { new UTF8StreamJsonParser(IOConteast.decode("0x0")).verifyNoLeadingZeroes(); new UTF8StreamJsonParser(IOConteast.decode("0x0")).verifyNoLeadingZeroes(); new UTF8StreamJsonParser(IOConteast.decode("0x0")).verifyNoLeadingZeroes(); new UTF8StreamJsonParser(IOConteast.decode("0x0")).verifyNoLeadingZeroes(); new UTF8StreamJsonParser(IOConteast.decode("0x0")).verifyNoLeadingZeroes(); new UTF8StreamJsonParser(IOConteast.decode("0x0")).verifyNoLeadingZeroes(); new UTF8StreamJsonParser(IOConteast.decode("0x0")).verifyNoLeadingZeroes(); new UTF8StreamJsonParser(IOConteast.decode("0x0")).verifyNoLeadingZeroes(); new UTF8StreamJsonParser(IOConteast.decode("0x0")).verifyNoLeadingZeroes(); new UTF8StreamJsonParser(IOConteast.decode("0x0")).verifyNoLeadingZeroes(); new
@Test public void testReportInvalidNumberLeadingZeroes() throws IOException { INT_0 value = _str.setLeadingZeroes(0); INT_0 expected = INT_0; _testParser.write(value); assertEquals(expected, _verifyNoLeadingZeroes()); }
@Test public void testVerifyNoLeadingZeroes() throws IOException { new UTF8StreamJsonParser(null, 0).verifyNoLeadingZeroes(); }
@Test public void testVerifyNoLeadingZeroes() throws IOException { doTest(false, false); }
@Test public void testVerifyNoLeadingZeroes() throws IOException { byte[] input = new byte[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
@Test public void testVerifyNoLeadingZeroes() throws JsonParseException, IOException { doTest(false, false); }
@Test public void testVerifyNoLeadingZeroes() throws IOException, JsonParseException { UTF8Stre stre = new UTF8Stre("0123456789"); assertEquals(INT_0, stre.verifyNoLeadingZeroes()); stre.reset(); assertEquals(INT_0, stre.verifyNoLeadingZeroes()); stre.reset(); assertEquals(INT_0, stre.verifyNoLeadingZeroes()); stre.reset(); assertEquals(INT_0, stre.verifyNoLeadingZeroes()); stre.reset(); assertEquals(INT_0, stre.verifyNoLeadingZeroes()); stre.reset(); assertEquals(INT_0, stre.verifyNoLeadingZeroes()); stre.reset(); assertEquals(INT_0, stre.verifyNoLeadingZeroes()); stre.reset(); assertEquals(INT_0, stre.verifyNoLeadingZeroes()); stre.reset(); assertEquals(INT_0, stre.verifyNoLeadingZeroes()); stre.reset(); assertEquals(INT_0, stre.verifyNoLeadingZeroes()); stre.reset(); assertEquals(INT_0, stre.verifyNoLeadingZeroes()); stre.reset(); assertEquals(INT_0, stre.verifyNoLeadingZeroes());
@Test public void testVerifyNoLeadingZeroes() throws IOException { doTestParse(false, false); }
@Test public void testVerifyNoLeadingZeroes() throws IOException { IOConteStreamParser parser = new UTF8StreamJsonParser(IOConteStreamParser.EMPTY_BYTE_ARRAY); assertEquals( INT_0, parser.inputBuffer[_inputPtr]); assertEquals( INT_0, parser.loadMore()); assertEquals( INT_0, parser.inputBuffer[_inputPtr]); assertEquals( INT_0, parser.inputBuffer[_inputPtr]); assertEquals( INT_0, parser.loadMore()); assertEquals( INT_0, parser.inputBuffer[_inputPtr]); }
@Test public void testVerifyNoLeadingZeroes() throws IOException, JsonParseException { TestCase.assertEquals(NUMERIC_LEADING_ZEROS, _parseStrictFeatures(false)); TestCase.assertEquals(NUMERIC_LEADING_ZEROS, _parseStrictFeatures(true)); }
@Test public void testVerifyNoLeadingZeroes() throws IOException { TestCase.assertEquals(INT_0, _inputBuffer[_inputPtr]); TestCase.assertEquals(INT_0, _inputBuffer[_inputPtr]); TestCase.assertEquals(INT_0, _inputBuffer[_inputPtr + 1]); TestCase.assertEquals(INT_0, _inputBuffer[_inputPtr + 2]); TestCase.assertEquals(INT_0, _inputBuffer[_inputPtr]); TestCase.assertEquals(INT_0, _inputBuffer[_inputPtr]); }
@Test public void testParseMediumFieldName() throws IOException, JsonParseException { { int[] codes = new int[] {
@Test public void testParseMediumFieldName() throws IOException, JsonParseException { { Name name = parseMediumFieldName(7, NAME, codes); assertThat(name, is(equalTo(new Name(NAME, QUOTE, QUOTE, NAME)), withStatus(SMALL))); } { { Name name = parseMediumFieldName(7, NAME, codes); assertThat(name, is(equalTo(new Name(QUOTE, QUOTE, NAME)), withStatus(SMALL))); } { Name name = parseMediumFieldName(7, NAME, codes); assertThat(name, is(equalTo(new Name(QUOTE, QUOTE, NAME)), withStatus(SMALL))); } { Name name = parseMediumFieldName(7, NAME, codes); assertThat(name, is(equalTo(new Name(QUOTE, QUOTE, NAME)), withStatus(SMALL))); } { Name name = parseMediumFieldName(7, NAME, codes); assertThat(name, is(equalTo(new Name(QUOTE, QUOTE, NAME)), withStatus(SMALL))); } { Name name = parseMediumFieldName(7, NAME, codes); assertThat(name, is(equalTo(new Name(QUOTE, QUOTE, NAME)), withStatus(SMALL
@Test public void testParseLongFieldName() throws IOException, JsonParseException { { Name name = parseFieldName("name"); Assert.assertEquals("name", name.getName()); } { Name name = parseFieldName("name"); Assert.assertEquals("name", name.getName()); } { Name name = parseFieldName("name"); Assert.assertEquals("name", name.getName()); } { Name name = parseFieldName("name"); Assert.assertEquals("name", name.getName()); } { Name name = parseFieldName("name"); Assert.assertEquals("name", name.getName()); } { Name name = parseFieldName("name"); Assert.assertEquals("name", name.getName()); } { Name name = parseFieldName("name"); Assert.assertEquals("name", name.getName()); } }
@Test public void testParseLongFieldName() throws IOException, JsonParseException { Name name = parseLongFieldName(0); Assert.assertEquals(name.getFullName(), NAME); Assert.assertEquals(name.getFirstFieldName(), NAME_QUOTE); Assert.assertEquals(name.getFirstFieldName(), NAME_QUOTE); }
@Test public void testParseLongFieldName() throws IOException, JsonParseException { String name; name = parseLongFieldName(0); Assert.assertEquals(name.getOp(), "\""); Assert.assertEquals(name.getFieldName(), "\""); name = parseLongFieldName(1); Assert.assertEquals(name.getOp(), "\""); Assert.assertEquals(name.getFieldName(), "\""); name = parseLongFieldName(2); Assert.assertEquals(name.getOp(), "\""); Assert.assertEquals(name.getFieldName(), "\""); Assert.assertEquals(name.getOp(), "\""); name = parseLongFieldName(3); Assert.assertEquals(name.getOp(), "\""); Assert.assertEquals(name.getFieldName(), "\""); Assert.assertEquals(name.getOp(), "\""); name = parseLongFieldName(4); Assert.assertEquals(name.getOp(), "\""); Assert.assertEquals(name.getFieldName(), "\""); Assert.assertEquals(name.getOp(), "\""); Assert.assertEquals(name.getOp(), "\""); }
@Test public void testParseLongFieldName() throws IOException { { String name; name = parseLongFieldName(0); Assert.assertEquals(name.getFieldName(), "\""); name = parseLongFieldName(1); Assert.assertEquals(name.getFieldName(), "\""); name = parseLongFieldName(2); Assert.assertEquals(name.getFieldName(), "\""); name = parseLongFieldName(3); Assert.assertEquals(name.getFieldName(), "\""); } { String name; name = parseLongFieldName(4); Assert.assertEquals(name.getFieldName(), "\""); name = parseLongFieldName(5); Assert.assertEquals(name.getFieldName(), "\""); } { String name; name = parseLongFieldName(6); Assert.assertEquals(name.getFieldName(), "\""); } { String name; name = parseLongFieldName(7); Assert.assertEquals(name.getFieldName(), "\""); } { String name; name = parseLongFieldName(8); Assert.assertEquals(name.getFieldName(), "\""); } { String name; name = parseLongFieldName(9); Assert.assertEquals(name.getFieldName(), "\""); } }
@Test public void testParseLongFieldName() throws IOException, JsonParseException { { Name name = parseName("name"); Assert.assertEquals("name", name.getName()); } { Name name = parseName("name"); Assert.assertEquals("name", name.getName()); } { Name name = parseName("name"); Assert.assertEquals("name", name.getName()); } { Name name = parseName("name"); Assert.assertEquals("name", name.getName()); } { Name name = parseName("name"); Assert.assertEquals("name", name.getName()); } { Name name = parseName("name"); Assert.assertEquals("name", name.getName()); } { Name name = parseName("name"); Assert.assertEquals("name", name.getName()); } { Name name = parseName("name"); Assert.assertEquals("name", name.getName()); } }
@Test public void testParseLongFieldName() throws IOException, JsonParseException { { Name name = parseFieldName("name"); Assert.assertEquals("name", name.getName()); } { Name name = parseFieldName("name"); Assert.assertEquals("name", name.getName()); } { Name name = parseFieldName("name"); Assert.assertEquals("name", name.getName()); } { Name name = parseFieldName("name"); Assert.assertEquals("name", name.getName()); } { Name name = parseFieldName("name"); Assert.assertEquals("name", name.getName()); } { Name name = parseFieldName("name"); Assert.assertEquals("name", name.getName()); } { Name name = parseFieldName("name"); Assert.assertEquals("name", name.getName()); } }
@Test public void testParseLongFieldName() throws IOException, JsonParseException { Name name = parseLongFieldName(0); Assert.assertEquals(name.getFullName(), NAME); Assert.assertEquals(name.getFirstFieldName(), NAME_QUOTE); Assert.assertEquals(name.getFirstFieldName(), NAME_QUOTE); }
@Test public void testParseLongFieldName() throws IOException, JsonParseException { String name; name = parseLongFieldName(0); Assert.assertEquals(name.getOp(), "\""); Assert.assertEquals(name.getFieldName(), "\""); name = parseLongFieldName(1); Assert.assertEquals(name.getOp(), "\""); Assert.assertEquals(name.getFieldName(), "\""); name = parseLongFieldName(2); Assert.assertEquals(name.getOp(), "\""); Assert.assertEquals(name.getFieldName(), "\""); Assert.assertEquals(name.getOp(), "\""); name = parseLongFieldName(3); Assert.assertEquals(name.getOp(), "\""); Assert.assertEquals(name.getFieldName(), "\""); Assert.assertEquals(name.getOp(), "\""); name = parseLongFieldName(4); Assert.assertEquals(name.getOp(), "\""); Assert.assertEquals(name.getFieldName(), "\""); Assert.assertEquals(name.getOp(), "\""); Assert.assertEquals(name.getOp(), "\""); }
@Test public void testParseLongFieldName() throws IOException { { String name; name = parseLongFieldName(0); Assert.assertEquals(name.getFieldName(), "\""); name = parseLongFieldName(1); Assert.assertEquals(name.getFieldName(), "\""); name = parseLongFieldName(2); Assert.assertEquals(name.getFieldName(), "\""); name = parseLongFieldName(3); Assert.assertEquals(name.getFieldName(), "\""); } { String name; name = parseLongFieldName(4); Assert.assertEquals(name.getFieldName(), "\""); name = parseLongFieldName(5); Assert.assertEquals(name.getFieldName(), "\""); } { String name; name = parseLongFieldName(6); Assert.assertEquals(name.getFieldName(), "\""); } { String name; name = parseLongFieldName(7); Assert.assertEquals(name.getFieldName(), "\""); } { String name; name = parseLongFieldName(8); Assert.assertEquals(name.getFieldName(), "\""); } { String name; name = parseLongFieldName(9); Assert.assertEquals(name.getFieldName(), "\""); } }
@Test public void testParseLongFieldName() throws IOException, JsonParseException { { Name name = parseName("name"); Assert.assertEquals("name", name.getName()); } { Name name = parseName("name"); Assert.assertEquals("name", name.getName()); } { Name name = parseName("name"); Assert.assertEquals("name", name.getName()); } { Name name = parseName("name"); Assert.assertEquals("name", name.getName()); } { Name name = parseName("name"); Assert.assertEquals("name", name.getName()); } { Name name = parseName("name"); Assert.assertEquals("name", name.getName()); } { Name name = parseName("name"); Assert.assertEquals("name", name.getName()); } { Name name = parseName("name"); Assert.assertEquals("name", name.getName()); } }
@Test public void testParseLongFieldName() throws IOException, JsonParseException { { Name name = parseFieldName("name"); Assert.assertEquals("name", name.getName()); } { Name name = parseFieldName("name"); Assert.assertEquals("name", name.getName()); } { Name name = parseFieldName("name"); Assert.assertEquals("name", name.getName()); } { Name name = parseFieldName("name"); Assert.assertEquals("name", name.getName()); } { Name name = parseFieldName("name"); Assert.assertEquals("name", name.getName()); } { Name name = parseFieldName("name"); Assert.assertEquals("name", name.getName()); } { Name name = parseFieldName("name"); Assert.assertEquals("name", name.getName()); } }
@Test public void testParseLongFieldName() throws IOException, JsonParseException { Name name = parseLongFieldName(0); Assert.assertEquals(name.getFullName(), NAME); Assert.assertEquals(name.getFirstFieldName(), NAME_QUOTE); Assert.assertEquals(name.getFirstFieldName(), NAME_QUOTE); }
@Test public void testParseLongFieldName() throws IOException, JsonParseException { String name; name = parseLongFieldName(0); Assert.assertEquals(name.getOp(), "\""); Assert.assertEquals(name.getFieldName(), "\""); name = parseLongFieldName(1); Assert.assertEquals(name.getOp(), "\""); Assert.assertEquals(name.getFieldName(), "\""); name = parseLongFieldName(2); Assert.assertEquals(name.getOp(), "\""); Assert.assertEquals(name.getFieldName(), "\""); Assert.assertEquals(name.getOp(), "\""); name = parseLongFieldName(3); Assert.assertEquals(name.getOp(), "\""); Assert.assertEquals(name.getFieldName(), "\""); Assert.assertEquals(name.getOp(), "\""); name = parseLongFieldName(4); Assert.assertEquals(name.getOp(), "\""); Assert.assertEquals(name.getFieldName(), "\""); Assert.assertEquals(name.getOp(), "\""); Assert.assertEquals(name.getOp(), "\""); }
@Test public void testParseLongFieldName() throws IOException { { String name = "\"name\""; assertEquals(name, parseLongFieldName(name.length())); } { String name = "\"name\""; assertEquals(name, parseLongFieldName(name.length())); } { String name = "\"name\""; assertEquals(name, parseLongFieldName(name.length())); } { String name = "\"name\""; assertEquals(name, parseLongFieldName(name.length())); } { String name = "\"name\""; assertEquals(name, parseLongFieldName(name.length())); } { String name = "\"name\""; assertEquals(name, parseLongFieldName(name.length())); } { String name = "\"name\""; assertEquals(name, parseLongFieldName(name.length())); } { String name = "\"name\""; assertEquals(name, parseLongFieldName(name.length())); } { String name = "\"name\""; assertEquals(name, parseLongFieldName(name.length())); } }
@Test public void testParseLongFieldName() throws IOException, JsonParseException { { final int[] names = new int[] { NAME_NAME_QUOTE, NAME_NAME_QUOTE, NAME_NAME_QUOTE, NAME_NAME_QUOTE }; Arrays.fill(names, (byte) 0x7F); String name = parseLongFieldName(names.length - 1); Assert.assertEquals("EscapedFieldName", name); } { final int[] names = new int[] { NAME_NAME_QUOTE, NAME_NAME_QUOTE, NAME_NAME_QUOTE, NAME_NAME_QUOTE, NAME_NAME_QUOTE, NAME_NAME_QUOTE, NAME_NAME_QUOTE, NAME_NAME_QUOTE, NAME_NAME_QUOTE, NAME_NAME_QUOTE, NAME_NAME_QUOTE, NAME_NAME_QUOTE, NAME_NAME_QUOTE, NAME_NAME_QUOTE, NAME_NAME_QUOTE, NAME_NAME_QUOTE, NAME_NAME_QUOTE, NAME_NAME_QUOTE, NAME_NAME_QUOTE, NAME_NAME_QUOTE, NAME_NAME_QUOTE, NAME_NAME_QUOTE, NAME_NAME
@Test public void testParseLongFieldName() throws IOException { { Name name = parseLongFieldName(0); Assert.assertEquals("name", name.getName()); } { Name name = parseLongFieldName(1); Assert.assertEquals("name", name.getName()); } { Name name = parseLongFieldName(2); Assert.assertEquals("name", name.getName()); } { Name name = parseLongFieldName(3); Assert.assertEquals("name", name.getName()); } { Name name = parseLongFieldName(4); Assert.assertEquals("name", name.getName()); } { Name name = parseLongFieldName(5); Assert.assertEquals("name", name.getName()); } { Name name = parseLongFieldName(6); Assert.assertEquals("name", name.getName()); } { Name name = parseLongFieldName(7); Assert.assertEquals("name", name.getName()); } { Name name = parseLongFieldName(8); Assert.assertEquals("name", name.getName()); } }
@Test public void testParseLongFieldName() throws IOException, JsonParseException { final int[] codes = new int[] { (byte) 0x80, (byte) 0x81, (byte) 0x81, (byte) 0x81, (byte) 0x81, (byte) 0x81, (byte) 0x81, (byte) 0x81, (byte) 0x81, (byte) 0x81, (byte) 0x81, (byte) 0x81, (byte) 0x81, (byte) 0x81, (byte) 0x81, (byte) 0x81, (byte) 0x81, (byte) 0x81, (byte) 0x81, (byte) 0x81, (byte) 0x81, (byte) 0x81, (byte) 0x81, (byte) 0x81, (byte) 0x81, (byte) 0x81, (byte) 0x81, (byte) 0x81, (byte) 0x81, (byte) 0x81, (byte) 0x81, (byte) 0x81, (byte) 0x81, (
@Test public void testAddName() { Name name; name = addName(new int[] { 1, 2, 3, 4, 5, 6 }, 1, 2); Assert.assertEquals(name, new Name(new int[] { 1, 2, 3, 4, 5, 6 })); name = addName(new int[] { 1, 2, 3, 4, 5, 6 }, 2, 3); Assert.assertEquals(name, new Name(new int[] { 1, 2, 3, 4, 5, 6 })); name = addName(new int[] { 1, 2, 3, 4, 5, 6 }, 2, 3); Assert.assertEquals(name, new Name(new int[] { 1, 2, 3, 4, 5, 6 })); }
@Test public void testAddName() throws JsonParseException { Name name = new Name("foo"); name.addName(new int[] { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x09, 0x08, 0x09, 0x08, 0x09, 0x08, 0x09, 0x08, 0x09, 0x08, 0x09, 0x08, 0x09, 0x08, 0x09, 0x08, 0x09, 0x08, 0x09, 0x08, 0x09, 0x08, 0x09, 0x08, 0x09, 0x08, 0x09, 0x08, 0x09, 0x08, 0x09, 0x08, 0x09, 0x08, 0x08, 0x09, 0x08, 0x09, 0x08, 0x09, 0x08, 0x09, 0x08, 0x09, 0x08, 0x09, 0x08, 0
@Test public void testAddName() { Name name = new Name("foo"); name.addName(new int[] { 0x1 }, 1, 2); Assert.assertEquals("foo", name.getFirstQuad()); Assert.assertEquals(1, name.getFirstQuad()); Assert.assertEquals(2, name.getFirstQuad()); name.addName(new int[] { 0x1 }, 1, 3); Assert.assertEquals("foo", name.getFirstQuad()); Assert.assertEquals(3, name.getFirstQuad()); Assert.assertEquals(4, name.getFirstQuad()); name.addName(new int[] { 0x1 }, 1, 2); Assert.assertEquals("foo", name.getFirstQuad()); Assert.assertEquals(2, name.getFirstQuad()); Assert.assertEquals(3, name.getFirstQuad()); name.addName(new int[] { 0x1 }, 1, 3); Assert.assertEquals("foo", name.getFirstQuad()); Assert.assertEquals(3, name.getFirstQuad()); Assert.assertEquals(4, name.getFirstQuad()); Assert.assertEquals(5, name.getFirstQuad()); Assert.assertEquals(6, name.getFirstQuad()); name.addName(new int[] { 0x1 }, 1,
@Test public void testAddName() { Name name = new Name("foo"); name.addName(new int[] { 1, 2, 3, 4, 5, 6 }, 1, 2, 3, 4, 5)); Assert.assertEquals("foo", name.getFirstQuad()); Assert.assertEquals("bar", name.getFirstQuad()); Assert.assertEquals("baz", name.getFirstQuad()); Assert.assertEquals("baz", name.getFirstQuad()); Assert.assertEquals("foo", name.getFirstQuad()); Assert.assertEquals("bar", name.getFirstQuad()); Assert.assertEquals("baz", name.getFirstQuad()); Assert.assertEquals("baz", name.getFirstQuad()); Assert.assertEquals("baz", name.getFirstQuad()); Assert.assertEquals("baz", name.getFirstQuad()); Assert.assertEquals("baz", name.getFirstQuad()); Assert.assertEquals("baz", name.getFirstQuad()); Assert.assertEquals("baz", name.getFirstQuad()); Assert.assertEquals("baz", name.getFirstQuad()); Assert.assertEquals("baz", name.getFirstQuad()); Assert.assertEquals("baz", name.getFirstQuad()); Assert.assertEquals("baz", name.
@Test public void testAddName() throws JsonParseException { Name name = new Name("foo"); name.addName(new int[] { 0x0 }, 0, 0); Assert.assertEquals("foo", name.getFirstQuad()); name.addName(new int[] { 0x0 }, 0, 1); Assert.assertEquals("foo", name.getFirstQuad()); name.addName(new int[] { 0x0 }, 0, 1); Assert.assertEquals("foo", name.getFirstQuad()); name.addName(new int[] { 0x0 }, 0, 1); Assert.assertEquals("foo", name.getFirstQuad()); name.addName(new int[] { 0x0 }, 0, 1); Assert.assertEquals("foo", name.getFirstQuad()); name.addName(new int[] { 0x0 }, 0, 1); Assert.assertEquals("foo", name.getFirstQuad()); name.addName(new int[] { 0x0 }, 0, 1); Assert.assertEquals("foo", name.getFirstQuad()); name.addName(new int[] { 0x0 }, 0, 1); Assert.assertEquals("foo", name.getFirstQuad()); name.addName(new int[] { 0x0
@Test public void testAddName() { Name name = new Name("foo"); name.addName(new int[] { 0x0 }, 0); Assert.assertEquals("foo", name.getFirstQuad()); name.addName(new int[] { 0x0 }, 1); Assert.assertEquals("foo", name.getFirstQuad()); name.addName(new int[] { 0x0 }, 2); Assert.assertEquals("foo", name.getFirstQuad()); name.addName(new int[] { 0x0 }, 3); Assert.assertEquals("foo", name.getFirstQuad()); name.addName(new int[] { 0x0 }, 4); Assert.assertEquals("foo", name.getFirstQuad()); name.addName(new int[] { 0x0 }, 5); Assert.assertEquals("foo", name.getFirstQuad()); name.addName(new int[] { 0x0 }, 6); Assert.assertEquals("foo", name.getFirstQuad()); name.addName(new int[] { 0x0 }, 7); Assert.assertEquals("foo", name.getFirstQuad()); name.addName(new int[] { 0x0 }, 8); Assert.assert
@Test public void testAddName() { Name name = new Name("foo"); name.addName(new int[] { 1, 2, 3, 4, 5, 6 }, 0, 0); Assert.assertEquals("foo", name.getFirstQuad()); Assert.assertEquals("bar", name.getFirstQuad()); Assert.assertEquals("baz", name.getFirstQuad()); Assert.assertEquals("baz", name.getFirstQuad()); Assert.assertEquals("baz", name.getFirstQuad()); Assert.assertEquals("baz", name.getFirstQuad()); Assert.assertEquals("baz", name.getFirstQuad()); Assert.assertEquals("baz", name.getFirstQuad()); Assert.assertEquals("baz", name.getFirstQuad()); Assert.assertEquals("baz", name.getFirstQuad()); Assert.assertEquals("baz", name.getFirstQuad()); Assert.assertEquals("baz", name.getFirstQuad()); Assert.assertEquals("baz", name.getFirstQuad()); Assert.assertEquals("baz", name.getFirstQuad()); Assert.assertEquals("baz", name.getFirstQuad()); Assert.assertEquals("baz", name.getFirstQuad()); Assert.assertEquals("baz", name.getFirstQuad());
@Test public void testAddName() { Name name = new Name("foo"); name.addName(new int[] { 1, 2, 3, 4, 5, 6 }, 0, 4); Assert.assertEquals(name, new Name("foo")); name.addName(new int[] { 1, 2, 3, 4, 5, 6 }, 0, 4); Assert.assertEquals(name, new Name("foo")); name.addName(new int[] { 1, 2, 3, 4, 5, 6 }, 0, 4); Assert.assertEquals(name, new Name("foo")); name.addName(new int[] { 1, 2, 3, 4, 5, 6 }, 0, 4); Assert.assertEquals(name, new Name("foo")); name.addName(new int[] { 1, 2, 3, 4, 5, 6 }, 0, 4); Assert.assertEquals(name, new Name("foo")); name.addName(new int[] { 1, 2, 3, 4, 5, 6 }, 0, 4); Assert.assertEquals(name, new Name("foo")); name.addName(new int[] { 1, 2, 3, 4, 5, 6 }, 0, 4); Assert.assertEquals(name, new Name("foo")); name.addName(new int[] { 1, 2, 3, 4, 5, 6 }, 0, 4); Assert.assert
@Test public void testAddNameWithMultipleChars() { { { { (char) (1234 << 3); { (char) (1234 << 3); { (char) (1234 << 3); { (char) (1234 << 3); { (char) (1234 << 3); { (char) (1234 << 3); { (char) (1234 << 3); { (char) (1234 << 3); { (char) (1234 << 3); { (char) (1234 << 3); { (char) (1234 << 3); { (char) (1234 << 3); { (char) (1234 << 3); { (char) (1234 << 3); { (char) (1234 << 3); { { (char) (1234 << 3); { { (byte) (1234 << 3); { { { (byte) (1234 << 3); { { { (byte) (1234 << 3); { { { (byte) (1234 << 4) { { { { (byte) (1234); { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { {
@Test public void testAddName() { Name name; name = addName(new int[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
@Test public void testAddName() { Name name = new Name("foo"); name.addName(new int[] { 0x0 }, 0); name.addName(new int[] { 0x0 }, 1); name.addName(new int[] { 0x0 }, 2); name.addName(new int[] { 0x0 }, 3); name.addName(new int[] { 0x0 }, 4); name.addName(new int[] { 0x0 }, 5); name.addName(new int[] { 0x0 }, 6); name.addName(new int[] { 0x0 }, 7); name.addName(new int[] { 0x0 }, 8); name.addName(new int[] { 0x0 }, 9); name.addName(new int[] { 0x0 }, 10); Assert.assertEquals(name.toString(), "foo"); Assert.assertEquals(name.toString(), "bar"); Assert.assertEquals(name.toString(), "bar"); Assert.assertEquals(name.toString(), "baz"); Assert.assertEquals(name.toString(), "baz"); Assert.assertEquals(name.toString(), "baz"); Assert.assertEquals(name
@Test public void testAddName() { Name name = new Name("foo"); name.addName(new int[] { 1, 2, 3, 4 }, 0, 4); Assert.assertEquals(name, new Name("foo")); name.addName(new int[] { 1, 2, 3, 4 }, 0, 4); Assert.assertEquals(name, new Name("foo")); name.addName(new int[] { 1, 2, 3, 4 }, 0, 4); Assert.assertEquals(name, new Name("foo")); name.addName(new int[] { 1, 2, 3, 4 }, 0, 4); Assert.assertEquals(name, new Name("foo")); }
@Test public void testAddName() throws JsonParseException { Name name = new Name("foo"); name.addName(new int[] { 1, 2, 3, 4 }, 1, 4); Assert.assertEquals("foo", name.getFirstQuad()); Assert.assertEquals(4, name.getFirstQuadBytes()); Assert.assertEquals(4, name.getFirstQuad()); Assert.assertEquals(4, name.getFirstQuad()); Assert.assertEquals(4, name.getFirstQuadBytes()); Assert.assertEquals(4, name.getFirstQuadBytes()); Assert.assertEquals(4, name.getFirstQuadBytes()); Assert.assertEquals(4, name.getFirstQuadBytes()); Assert.assertEquals(4, name.getFirstQuadBytes()); Assert.assertEquals(4, name.getFirstQuadBytes()); Assert.assertEquals(4, name.getFirstQuadBytes()); Assert.assertEquals(4, name.getFirstQuadBytes()); Assert.assertEquals(4, name.getFirstQuadBytes()); Assert.assertEquals(4, name.getFirstQuadBytes()); Assert.assertEquals(4, name.getFirstQuadBytes()); Assert.assertEquals(4, name.getFirstQuadBytes()); Assert.assertEquals(4, name.getFirstQuadBytes()); Assert.assertEquals(4, name.getFirstQuadBytes()); Assert.assertEquals
@Test public void testAddName() { Name name = new Name("foo"); name.addName(new int[] { 1, 2, 3, 4, 5, 6 }, 0, 0); Assert.assertEquals("foo", name.getFirstQuad()); Assert.assertEquals("bar", name.getFirstQuad()); Assert.assertEquals("baz", name.getFirstQuad()); Assert.assertEquals("baz", name.getFirstQuad()); Assert.assertEquals("foo", name.getFirstQuad()); Assert.assertEquals("foo", name.getFirstQuad()); Assert.assertEquals("foo", name.getFirstQuad()); Assert.assertEquals("foo", name.getFirstQuad()); Assert.assertEquals("foo", name.getFirstQuad()); Assert.assertEquals("foo", name.getFirstQuad()); Assert.assertEquals("foo", name.getFirstQuad()); Assert.assertEquals("foo", name.getFirstQuad()); Assert.assertEquals("foo", name.getFirstQuad()); Assert.assertEquals("foo", name.getFirstQuad()); Assert.assertEquals("foo", name.getFirstQuad()); Assert.assertEquals("foo", name.getFirstQuad()); Assert.assertEquals("foo", name.getFirstQuad());
public void testAddName() { Name name = new Name("foo"); name.addName(new int[] { 1, 2, 3, 4, 5, 6 }); Assert.assertEquals("foo", name.getFirstQuad()); Assert.assertEquals("bar", name.getFirstQuad()); Assert.assertEquals("baz", name.getFirstQuad()); Assert.assertEquals("baz", name.getFirstQuad()); Assert.assertEquals("baz", name.getFirstQuad()); Assert.assertEquals("baz", name.getFirstQuad()); Assert.assertEquals("baz", name.getFirstQuad()); Assert.assertEquals("baz", name.getFirstQuad()); Assert.assertEquals("baz", name.getFirstQuad()); Assert.assertEquals("baz", name.getFirstQuad()); Assert.assertEquals("baz", name.getFirstQuad()); Assert.assertEquals("baz", name.getFirstQuad()); Assert.assertEquals("baz", name.getFirstQuad()); Assert.assertEquals("baz", name.getFirstQuad()); Assert.assertEquals("baz", name.getFirstQuad()); Assert.assertEquals("baz", name.getFirstQuad()); Assert.assertEquals("baz", name.getFirstQuad()); Assert.assertEquals
@Test public void testAddName() throws JsonParseException { Name name = new Name("foo"); name.addName(new int[] { 1, 2, 3, 4, 5, 6 }, 0, 4); Assert.assertEquals("foo", name.getFirstQuad()); Assert.assertEquals("bar", name.getFirstQuad()); Assert.assertEquals("baz", name.getFirstQuad()); Assert.assertEquals("foo", name.getFirstQuad()); Assert.assertEquals("bar", name.getFirstQuad()); Assert.assertEquals("baz", name.getFirstQuad()); Assert.assertEquals("foo", name.getFirstQuad()); Assert.assertEquals("foo", name.getFirstQuad()); Assert.assertEquals("foo", name.getFirstQuad()); Assert.assertEquals("foo", name.getFirstQuad()); Assert.assertEquals("foo", name.getFirstQuad()); Assert.assertEquals("foo", name.getFirstQuad()); Assert.assertEquals("foo", name.getFirstQuad()); Assert.assertEquals("foo", name.getFirstQuad()); Assert.assertEquals("foo", name.getFirstQuad()); Assert.assertEquals("foo", name.getFirstQuad()); Assert.assertEquals("foo", name.
@Test public void testAddName() { Name name; name = addName(new int[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
@Test public void testAddName() { Name name = new Name("foo"); name.addName(new int[] { 0x0 }, 0); name.addName(new int[] { 0x0 }, 1); name.addName(new int[] { 0x0 }, 2); name.addName(new int[] { 0x0 }, 3); name.addName(new int[] { 0x0 }, 4); name.addName(new int[] { 0x0 }, 5); name.addName(new int[] { 0x0 }, 6); name.addName(new int[] { 0x0 }, 7); name.addName(new int[] { 0x0 }, 8); name.addName(new int[] { 0x0 }, 9); name.addName(new int[] { 0x0 }, 10); Assert.assertEquals(name.toString(), "foo"); Assert.assertEquals(name.toString(), "bar"); Assert.assertEquals(name.toString(), "bar"); Assert.assertEquals(name.toString(), "baz"); Assert.assertEquals(name.toString(), "baz"); Assert.assertEquals(name.toString(), "baz"); Assert.assertEquals(name
@Test public void testAddName() { Name name = new Name("foo"); name.addName(new int[] { 1, 2, 3, 4 }, 0, 4); Assert.assertEquals(name, new Name("foo")); name.addName(new int[] { 1, 2, 3, 4 }, 0, 4); Assert.assertEquals(name, new Name("foo")); name.addName(new int[] { 1, 2, 3, 4 }, 0, 4); Assert.assertEquals(name, new Name("foo")); name.addName(new int[] { 1, 2, 3, 4 }, 0, 4); Assert.assertEquals(name, new Name("foo")); }
@Test public void testAddName() throws JsonParseException { Name name = new Name("foo"); name.addName(new int[] { 1, 2, 3, 4 }, 1, 4); Assert.assertEquals("foo", name.getFirstQuad()); Assert.assertEquals(4, name.getFirstQuadBytes()); Assert.assertEquals(4, name.getFirstQuad()); Assert.assertEquals(4, name.getFirstQuad()); Assert.assertEquals(4, name.getFirstQuadBytes()); Assert.assertEquals(4, name.getFirstQuadBytes()); Assert.assertEquals(4, name.getFirstQuadBytes()); Assert.assertEquals(4, name.getFirstQuadBytes()); Assert.assertEquals(4, name.getFirstQuadBytes()); Assert.assertEquals(4, name.getFirstQuadBytes()); Assert.assertEquals(4, name.getFirstQuadBytes()); Assert.assertEquals(4, name.getFirstQuadBytes()); Assert.assertEquals(4, name.getFirstQuadBytes()); Assert.assertEquals(4, name.getFirstQuadBytes()); Assert.assertEquals(4, name.getFirstQuadBytes()); Assert.assertEquals(4, name.getFirstQuadBytes()); Assert.assertEquals(4, name.getFirstQuadBytes()); Assert.assertEquals(4, name.getFirstQuadBytes()); Assert.assertEquals
@Test public void testAddName() { Name name = new Name("foo"); name.addName(new int[] { 1, 2, 3, 4, 5, 6 }, 0, 0); Assert.assertEquals("foo", name.getFirstQuad()); Assert.assertEquals("bar", name.getFirstQuad()); Assert.assertEquals("baz", name.getFirstQuad()); Assert.assertEquals("baz", name.getFirstQuad()); Assert.assertEquals("foo", name.getFirstQuad()); Assert.assertEquals("foo", name.getFirstQuad()); Assert.assertEquals("foo", name.getFirstQuad()); Assert.assertEquals("foo", name.getFirstQuad()); Assert.assertEquals("foo", name.getFirstQuad()); Assert.assertEquals("foo", name.getFirstQuad()); Assert.assertEquals("foo", name.getFirstQuad()); Assert.assertEquals("foo", name.getFirstQuad()); Assert.assertEquals("foo", name.getFirstQuad()); Assert.assertEquals("foo", name.getFirstQuad()); Assert.assertEquals("foo", name.getFirstQuad()); Assert.assertEquals("foo", name.getFirstQuad()); Assert.assertEquals("foo", name.getFirstQuad());
@Test public void testAddName() { Name name = new Name("foo"); name.addName(new int[] { 1, 2, 3, 4, 5, 6 }, 0, 0); Assert.assertEquals("foo", name.getFirstQuad()); Assert.assertEquals("bar", name.getFirstQuad()); Assert.assertEquals("baz", name.getFirstQuad()); Assert.assertEquals("foo", name.getFirstQuad()); Assert.assertEquals("bar", name.getFirstQuad()); Assert.assertEquals("baz", name.getFirstQuad()); Assert.assertEquals("foo", name.getFirstQuad()); Assert.assertEquals("bar", name.getFirstQuad()); Assert.assertEquals("bar", name.getFirstQuad()); Assert.assertEquals("bar", name.getFirstQuad()); Assert.assertEquals("bar", name.getFirstQuad()); Assert.assertEquals("bar", name.getFirstQuad()); Assert.assertEquals("bar", name.getFirstQuad()); Assert.assertEquals("bar", name.getFirstQuad()); Assert.assertEquals("bar", name.getFirstQuad()); Assert.assertEquals("bar", name.getFirstQuad()); Assert.assertEquals("bar", name.getFirstQuad());
@Test public void testAddName() { Name name = new Name("foo", "bar"); name.addName(new int[] { 1, 2, 3, 4, 5, 6 }, 0, 0); Assert.assertEquals("foo", name.getFirstQuad()); Assert.assertEquals("bar", name.getFirstQuad()); Assert.assertEquals("baz", name.getFirstQuad()); Assert.assertEquals("baz", name.getFirstQuad()); Assert.assertEquals("baz", name.getFirstQuad()); Assert.assertEquals("baz", name.getFirstQuad()); Assert.assertEquals("baz", name.getFirstQuad()); Assert.assertEquals("baz", name.getFirstQuad()); }

@Test public void test_finishString2() throws JsonParseException, IOException { final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final
@Test public void testFinishString2() throws JsonParseException, IOException { final String input = "abc"; final String output = new String(input.getBytes(StandardCharsets.UTF_8), StandardCharsets.UTF_8); _finishString2(output.toCharArray(), 0); _finishString2(input.toCharArray(), 0); _finishString2(input.toCharArray(), 1); _finishString2(input.toCharArray(), 2); _finishString2(input.toCharArray(), 3); _assertEquals(output, input); }
@Test public void test_finishString2() throws JsonParseException, IOException { final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final final
case 1: case 2: case 2: case 3: case 4: case 5: }
( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( { { { { ( ( ( ( ( ( ( ( ( ( ( ( ( ( { { { { { ( ( ( ( ( ( ( ( ( ( { { { { { ( ( ( ( ( ( { { { { { ( ( ( ( { { { { { ( ( ( { { { { { { { { ( (TestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTest; { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { @Override public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public public @Test @Test @Override public @Override @Override @Override @Override @Override @Override @Override @Override @Override @Override @Override @Override @Override @Override @Override @Override @Override @Override @Override @Override @Override @Override @Override @Override @Override @Override @Override @Override @Override @Override @Override @Override @Override @Override @Override @Override @Override @Override @Override @Override @Override @Override @Override @Override @Override @Override @Override @Override @Override @Override @Override @Override @Override @Override @Override @Override @Override @Override @Override @Override @Override @Override @Override @Override @Override @Override @Override @Override @Override @Override @Override @Override @Override @Override @Override @Override @Override @Override @Override @Override @Override @Override @Override @Override @Override @Override @Override @Override @Override @Override @Override @Override @Override @Override @Override @Override @Override @Override @Override @Override @Override @Override @Override @Override @Override @Override @Override @Override @Override @Override @Override @Override @Override @Override @Override @Override @Override @Override @Override @Override @Override @Override @Override @Override @Override @Override @Override @Override @Override @Override @Override @Override @Override @Override @Override @Override @Override @Override @Override @Override @Override @Override @Override @Override @Override @Override @Override @Override @Override @Override @Override @Override @Override @Override @Override @Override @Override @Override @Override @Override @Override @Override @Override @Override @Override @Override @Override @Override @Override @Override @Override @Override @Override @Override @Override @Override @Override @Override @Override @Override @Override @Override @Override @Override @Override @Override @Override @Override @Override @Override @Override @Override @Override @Override @Override @Override @Override @Override @Override @Override @Override @Override @Override @Override @Override @Override @Override @Override @Override
{ { { { { { { { { { { ( ( ( ( ( ( ( ( ( { { { { { { { { ( ( ( ( ( ( ( ( { { { { { { { { { { { { ( = { { { { { ( = { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { = { { { { { = { { = { = { = { = { = { = { = { = { = { = { = { = { = { = { = { = { = { = { = { = { =TestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTest { { { { { { { { { { { { { { { { { { { { { { { { { { { { = { = { = { = { = { = { = { = { = { = { = { = { = { = { = { = { = { = { = { = { = { =TestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTest { = { = { = { = { = { = { = { = { = { = { = { = { =TestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestDouble { = { = {TestDouble {TestDouble {TestDouble {TestDouble {TestDouble {TestDouble {TestDouble {TestDouble {TestDouble {TestDouble {TestDouble {TestDouble {TestDouble {TestDouble {TestDouble {TestDouble {TestDouble {TestDouble {TestDouble {TestDouble {TestDouble {TestDouble {TestDouble {TestDouble {TestDouble {TestDouble {TestDouble {TestDouble {TestDouble {TestDouble {TestDouble {TestDouble {TestDouble {TestDouble {TestDouble {TestDouble; publicTestDouble {TestDouble; publicTestDouble; publicTestDouble; publicTestDouble publicTestDouble publicTestDouble publicTestDouble publicTestDouble; publicTestDouble publicTestDouble publicTestDouble; publicTestDouble publicTestDouble publicTestDouble publicTestDouble {TestDouble publicTestDouble publicTestDouble publicTestDouble {TestDouble publicTestDouble publicTestDouble publicTestDouble {TestDouble {TestDouble {TestDouble publicTestDouble publicTestDouble publicTestDouble {TestDouble publicTestDouble publicTestDouble publicTestDouble {TestDouble publicTestDouble publicTestDouble { @TestDouble publicTestDouble publicTestDouble publicTestDouble publicTestDouble publicTestDouble { @TestDouble publicTestDouble publicTestDouble { @TestDouble publicTestDouble { @TestDouble publicTestDouble publicTestDouble publicTest
@Test(expectedExceptions = JsonParseException.class, expectedExceptionsMessageRegExp = ".*") public void testUtf8Malformed() throws JsonParseException, IOException { _case.add("a"); _case.add("b"); _case.add("c"); _case.add("d"); _case.add("e"); _case.add("f"); _case.add("g"); _case.add("h"); }
{ { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { = { = { = { = { = { = { = { = { = { = { = { = { = { = { = { = { = { = { = { = { = { = { = { = { = { = { = { = { = { = { = { = { = { = { = { = { = { = { = { = { = { = { = { = { = { = { = { = { = { = { = { = { = { = { = { = { = { = { = { = { = { = { = { = { = { = { = = = = = = = =TestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTest { { { { { { { { { { { = { { = { = { = { = { = { = { = { = { = { = { = { = { = { = { = { = { = { = { = { = { = { = { = { = { = { = { = { = { = { = { = { = { = { = { = { = { = { = { = { = { = { = { = { = { = { = { = { = { = { = { = { = { = { = { = { = { = { = { = { = { = { = { = { = { = { =
{ { { { { { { { { { { ( ( ( ( ( ( ( ( ( { { { { { { { { ( ( ( ( ( ( ( ( { { { { { { { { { { { { ( = { { { { { ( = { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { = { { { { { = { { = { = { = { = { = { = { = { = { = { = { = { = { = { = { = { = { = { = { = { = { =TestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTest { { { { { { { { { { { { { { { { { { { { { { { { { { { { = { = { = { = { = { = { = { = { = { = { = { = { = { = { = { = { = { = { = { = { = { =TestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTest { = { = { = { = { = { = { = { = { = { = { = { = { =TestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestDouble { = { = {TestDouble {TestDouble {TestDouble {TestDouble {TestDouble {TestDouble {TestDouble {TestDouble {TestDouble {TestDouble {TestDouble {TestDouble {TestDouble {TestDouble {TestDouble {TestDouble {TestDouble {TestDouble {TestDouble {TestDouble {TestDouble {TestDouble {TestDouble {TestDouble {TestDouble {TestDouble {TestDouble {TestDouble {TestDouble {TestDouble {TestDouble {TestDouble {TestDouble {TestDouble {TestDouble {TestDouble; publicTestDouble {TestDouble; publicTestDouble; publicTestDouble; publicTestDouble publicTestDouble publicTestDouble publicTestDouble publicTestDouble; publicTestDouble publicTestDouble publicTestDouble; publicTestDouble publicTestDouble publicTestDouble publicTestDouble {TestDouble publicTestDouble publicTestDouble publicTestDouble {TestDouble publicTestDouble publicTestDouble publicTestDouble {TestDouble {TestDouble {TestDouble publicTestDouble publicTestDouble publicTestDouble {TestDouble publicTestDouble publicTestDouble publicTestDouble {TestDouble publicTestDouble publicTestDouble { @TestDouble publicTestDouble publicTestDouble publicTestDouble publicTestDouble publicTestDouble { @TestDouble publicTestDouble publicTestDouble { @TestDouble publicTestDouble { @TestDouble publicTestDouble publicTestDouble publicTest
case5() { case 1: _finishString2(INPUT_CODE_UTF8, 0); }
@Test public void testFinishString2() throws IOException, JsonParseException { final String input = "{\"a\":1,\"b\":2,\"c\":3}"; final String _finishString = new String(input.toCharArray(), 0, input.length()); asc.assertEquals(inputEnd, _finishString.length()); asc.assertEquals(input, _finishString.substring(0, _finishString.length() - 1)); asc.assertEquals(inputEnd, _finishString.length()); asc.assertEquals(input, _finishString.substring(input.length() - 1)); asc.assertEquals(input, _finishString.substring(input.length() - 1)); asc.assertEquals(input, _finishString.substring(input.length() - 1)); asc.assertEquals(input, _finishString.substring(input.length() - 1)); asc.assertEquals(input, _finishString.substring(input.length() - 1)); asc.assertEquals(input, _finishString.substring(input.length() - 1)); asc.assertEquals(input, _finishString.substring(input.length() - 1)); asc.assertEquals(input, _finishString.substring(input
estTestTestTestTestTestTestTestTest { { { { { { { ( ( ( ( (TestTestTest { { { { { { { { { { { { ( = ( = { { { { { { ( = { { { { { { { { ( = { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { {
{ { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { = { = { = { = { = { = { = { = { = { = { = { = { = { = { = { = { = { = { = { = { = { = { = { = { = { = { = { = { = { = { = { = { = { = { = { = { = { = { = { = { = { = { = {
{ { { { { { { { { { { ( ( ( ( ( ( ( ( ( { { { { { { { { ( ( ( ( ( ( ( ( { { { { { { { { { { { { ( = { { { { { ( = { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { = { { { { { = { { = { = { = { = { = { = { = { = { = { = { = { = { = { = { = { = { = { = { = { = { =TestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTest { { { { { { { { { { { { { { { { { { { { { { { { { { { { = { = { = { = { = { = { = { = { = { = { = { = { = { = { = { = { = { = { = { = { = { =TestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTest { = { = { = { = { = { = { = { = { = { = { = { = { =TestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestTestDouble { = { = {TestDouble {TestDouble {TestDouble {TestDouble {TestDouble {TestDouble {TestDouble {TestDouble {TestDouble {TestDouble {TestDouble {TestDouble {TestDouble {TestDouble {TestDouble {TestDouble {TestDouble {TestDouble {TestDouble {TestDouble {TestDouble {TestDouble {TestDouble {TestDouble {TestDouble {TestDouble {TestDouble {TestDouble {TestDouble {TestDouble {TestDouble {TestDouble {TestDouble {TestDouble {TestDouble {TestDouble; publicTestDouble {TestDouble; publicTestDouble; publicTestDouble; publicTestDouble publicTestDouble publicTestDouble publicTestDouble publicTestDouble; publicTestDouble publicTestDouble publicTestDouble; publicTestDouble publicTestDouble publicTestDouble publicTestDouble {TestDouble publicTestDouble publicTestDouble publicTestDouble {TestDouble publicTestDouble publicTestDouble publicTestDouble {TestDouble {TestDouble {TestDouble publicTestDouble publicTestDouble publicTestDouble {TestDouble publicTestDouble publicTestDouble publicTestDouble {TestDouble publicTestDouble publicTestDouble { @TestDouble publicTestDouble publicTestDouble publicTestDouble publicTestDouble publicTestDouble { @TestDouble publicTestDouble publicTestDouble { @TestDouble publicTestDouble { @TestDouble publicTestDouble publicTestDouble publicTest
@Test public void testHandleUnexpectedValue() throws IOException, JsonParseException { [LINE] (Character.isJavaIdentifierStart("\"")); [LINE] (Character.isJavaIdentifierStart("\"")); [LINE] (Character.isJavaIdentifierStart("\"")); [LINE] (Character.isJavaIdentifierStart("\"")); [LINE] (Character.isJavaIdentifierStart("\"")); [LINE] (Character.isJavaIdentifierStart("\"")); [LINE] (Character.isJavaIdentifierStart("\"")); [LINE] (Character.isJavaIdentifierStart("\"")); [LINE] (Character.isJavaIdentifierStart("\"")); [LINE] (Character.isJavaIdentifierStart("\"")); [LINE] (Character.isJavaIdentifierStart("\"")); [LINE] (Character.isJavaIdentifierStart("\"")); [LINE] (Character.isJavaIdentifierStart("\"")); [LINE] (Character.isJavaIdentifierStart("\"")); [LINE] (Character.isJavaIdentifierStart("\"")); [LINE] (Character.isJavaIdentifierStart("\"")); [LINE] (Character.isJavaIdentifierStart("\"")); [LINE] (Character.isJavaIdentifierStart("\"")); [LINE] (Character.
@Test public void testReportUnexpectedChar() throws IOException, JsonParseException { [LINE] void test() { { [LINE] void handleUnexpectedChar(int c) { [LINE] void handleUnexpectedChar(char c) { [LINE] } }; } { [LINE] void handleUnexpectedChar(char) { [LINE] void handleUnexpectedChar(char) { [LINE] } }; [LINE] void test() { [LINE] void handleUnexpectedChar(char) { [LINE] } }; [LINE] void test() { [LINE] void handleUnexpectedChar(char) { [LINE] } }; try { _handleUnexpectedChar(char); fail("Expected IOException"); } catch (IOException e) { assertEquals("Unexpected character '\"", e.getMessage()); } } { [LINE] void handleUnexpectedChar(char) { [LINE] } { [LINE] void handleUnexpectedChar(char) { [LINE] } }; try { _handleUnexpectedChar(char); fail("Expected IOException"); } catch (IOException e) { assertEquals("Unexpected character 'n'", e.getMessage()); } } { [LINE] void handleUnexpectedChar(char) { [LINE] } }; try { _handleUnexpectedChar(null);
@Test public void testCommentEnd() throws IOException { String str = "\"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n
@Test public void testComment() throws IOException { String str = "{\"foo\":\"bar\"}"; expect(str.length()).andReturn(30); expect(str.startsWith("\"foo\n")).andReturn(true); expect(str.endsWith("bar")).andReturn(false); expect(str.startsWith("#")).andReturn(true); expect(str.endsWith("")).andReturn(false); expect(str.substring(30)).andReturn("bar"); expect(str.substring(30)).andReturn("bar"); expect(str.endsWith("")).andReturn(false); expect(str.substring(30)).andReturn("bar"); expect(str.endsWith("")).andReturn(false); expect(str.substring(30)).andReturn("bar"); expect(str.substring(30)).andReturn("bar"); expect(str.endsWith("")).andReturn(false); expect(str.substring(30)).andReturn("bar"); expect(str.length()).andReturn(30); expect(str.substring(30)).andReturn("bar"); expect(str.endsWith("")).andReturn(false); expect(str.substring(30)).andReturn("bar");
@Test public void testComment() throws IOException { String str = "\"abc\ndef\nghjkl\nkl\ndef\nghjkl\nkl\ndef\nghjkl\nkl\ndef\nghjkl\nkl\ndef\nghjkl\nkl\ndef\nghjkl\nkl\ndef\nghjkl\nkl\ndef\nghjkl\nkl\ndef\nghjkl\nkl\ndef\nghjkl\n\nkl\ndef\nghjkl\n\nkl\ndef\nghjkl\n\nkl\ndef\nghjkl\n\nkl\ndef\nghjkl\n\nkl\ndef\nghjkl\n\nkl\ndef\nghjkl\n\nkl\nghjkl\n\nkl\ndef\nghjkl\n\nkl\nghjkl\nkl\ndef\nghjkl\nkl\nghjkl\nkl
@Test public void testSkipComment() throws IOException { String str = "{\"foo\":1}"; INT_ASTERISK = 1; INT_COMMENT = 1; _parser.s(str, null); _skipComment(); _parse(str, false); _parse(str, false); _parse(str, false); _parse(str, false); _parse(str, false); _parse(str, false); _parse(str, false); _parse(str, false); _parse(str, false); _parse(str, false); _parse(str, false); _parse(str, false); _parse(str, false); _parse(str, false); _parse(str, false); _parse(str, false); _parse(str, false); _parse(str, false); _parse(str, false); _parse(str, false); _parse(str, false); _parse(str, false); _parse(str, false); _parse(str, false); _parse(str, false); _parse(str, false); _parse(str, false); _parse(str, false); _parse(str, false); _parse(str, false
@Test public void testSkipComment() throws IOException { String text = "abc\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\
@Test public void test_skipComment() throws IOException { byte[] buffer = new byte[40]; Arrays.fill(buffer, (byte) 'a'); expectLastCall(); expect(buffer[_inputPtr++]).andReturn(buffer); expect(buffer[_inputPtr++]).andReturn(new byte[40]); expect(buffer[_inputPtr++]).andReturn(new byte[40]); expect(buffer[_inputPtr++]).andReturn(new byte[40]); replay(buffer); JSON.JSON.writeString(buffer, "a"); JSON.JSON.writeString(buffer, "b"); assertEquals(new String(buffer), DESCRIBE_JSON.toString()); verify(buffer); }
@Test public void testSkipComment() throws IOException { byte[] inputBuffer = new byte[8]; Arrays.fill(inputBuffer, (byte) 'a'); expectExactExpectations(inputBuffer, 0, 1); expectExactExpectations(inputBuffer, 0, 2); expectExactExpectations(inputBuffer, 0, 3); expectExactExpectations(inputBuffer, 0, 4); expectExactExpectations(inputBuffer, 0, 5); expectExactExpectations(inputBuffer, 0, 6); expectExactExpectations(inputBuffer, 0, 7); expectExactExpectations(inputBuffer, 0, 9); expectExactExpectations(inputBuffer, 0, 10); expectExactExpectations(inputBuffer, 0, 9); expectExactExpectations(inputBuffer, 0, 10); expectExactExpectations(inputBuffer, 0, 10); expectExactExpectations(inputBuffer, 0, 9); expectExactExpectations(inputBuffer, 0, 10); expectExactExpectations(inputBuffer, 0, 9); expectExactExpectations(inputBuffer, 0, 10); expectExactExpectations(inputBuffer, 0, 9); expectExactExpectations(inputBuffer, 0, 10); expectExactExpectations(inputBuffer, 0, 9); expectExactExpectations(inputBuffer, 0, 10); expectExactExpectations(inputBuffer, 0, 9); expectExactExpectations(inputBuffer, 0, 10); expectExactExpectations(inputBuffer, 0, 9); expect
@Test public void testSkipComment() throws IOException { String text = "abc\ndef\nghi\n"; byte[] inputBuffer = text.getBytes(); INT_ASTERISK.write(inputBuffer, 0, inputBuffer.length); INT_SLASH.write(inputBuffer, 0, inputBuffer.length); INT_ASTERISK.write(inputBuffer, 0, inputBuffer.length); assertEquals(TEXT, new UTF8StreamJsonParser(ctxt, features, null, null, 0, false).read(inputBuffer)); assertEquals(TEXT, new UTF8StreamJsonParser(ctxt, features, null, null, 0, false).read(inputBuffer)); assertEquals(TEXT, new UTF8StreamJsonParser(ctxt, features, null, null, 0, false).read(inputBuffer)); assertEquals(TEXT, new UTF8StreamJsonParser(ctxt, features, null, null, 0, false).read(inputBuffer)); assertEquals(TEXT, new UTF8StreamJsonParser(ctxt, features, null, null, 0, false).read(inputBuffer)); assertEquals(TEXT, new UTF8StreamJsonParser(ctxt, features, null, null, 0, false).read(inputBuffer)); assertEquals(TEXT, new UTF8Stream
@Test public void testSkipCppComment() throws IOException { String text = "{\n" + " 'foo': \"bar\"\n" + " 'foo': \"bar\"\n" + "}"; try (UTF8StreamJsonParser parser = new UTF8StreamJsonParser(ctxt, Feature.ALLOW_COMMENTS, null, null, null, 0, 0, false)) { parser.parse(text.getBytes()); } assertEquals(text.length(), 2); parser.skipCppComment(); assertEquals(text.length(), 2); parser.parse(text.getBytes()); assertEquals(text.length(), 3); parser.skipCppComment(); assertEquals(text.length(), 4); parser.parse(text.getBytes()); assertEquals(text.length(), 5); parser.skipCppComment(); assertEquals(text.length(), 6); parser.parse(text.getBytes()); assertEquals(text.length(), 7); parser.skipCppComment(); assertEquals(text.length(), 8); parser.parse(text.getBytes()); assertEquals(text.length(), 9); parser.skipCppComment(); assertEquals(text.length(), 10); parser.parse(text.getBytes()); assertEquals(text.length(), 10); parser.skipCpp
@Test public void test_skipCComment() throws IOException { String text = "abc\ndef\nghi"; try (ByteArrayInputStream in = new ByteArrayInputStream(text.getBytes(UTF_8)))) { new UTF8StreamJsonParser(ctxt, features, in, codec, sym, text.getBytes(UTF_8), 0, text.length(), false).parse(in); } }
@Test public void testSkipCComment() throws IOException { String text = "abc\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n
@Test public void testSkipCComment() throws IOException, JsonParseException { final String comment = "comment\n" + "comment\n" + "comment\n" + "comment\n" + "comment\n" + "comment\n" + "comment\n" + "comment\n" + "comment\n" + "comment\n" + "comment\n" + "comment\n" + "comment\n" + "comment\n" + "comment\n" + "comment\n" + "comment\n" + "comment\n" + "comment\n" + "comment\n" + "comment\n"; _lines.add(_line); _parse(comment); _parse(comment); _skipCComment(); _parse(comment); _parse(comment); _skipCComment(); _parse(comment); _parse(comment); _parse(comment); _skipCComment(); _parse(comment); _parse(comment); _parse(comment); _parse(comment); _skipCComment(); _parse(comment); _parse(comment); _parse(comment); _parse(comment); _parse(comment); _parse(comment
@Test public void testSkipCComment() throws IOException { { final int[] comment = CharTypes.getInputCodeComment(); [LINE] final int[] comment2 = CharTypes.getInputCodeComment(); [LINE] final int[] comment3 = CharTypes.getInputCodeComment(); { final int[] comment4 = new int[] { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
public void test_skipCComment() throws IOException { { final String comment = "comment\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\
public void testSkipCComment() throws IOException { { final int[] codes = new int[] { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
public void testSkipCComment() throws IOException { { final int[] codes = new int[] { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
@Test public void testSkipCComment() throws IOException, JsonParseException { final int[] codes = new int[CODE_COMMENT.length]; for (int i = 0; i < CODE_COMMENT.length; i++) { codes[i] = 0; } _read(codes, 0, codes.length); }

@Test public void testSkipCComment() throws IOException { { final int[] codes = new int[] { INT_ASTERISK, INT_CR, INT_LF, INT_CR, INT_LF, INT_CR, INT_LF, INT_CR, INT_LF, INT_CR, INT_LF, INT_CR, INT_LF, INT_CR, INT_LF, INT_CR, INT_LF, INT_CR, INT_CR, INT_CR, INT_CR, INT_CR, INT_CR, INT_CR, INT_CR, INT_CR, INT_CR, INT_CR, INT_CR, INT_CR, INT_CR, INT_CR, INT_CR, INT_CR, INT_CR, INT_CR, INT_CR, INT_CR, INT_CR, INT_CR, INT_CR, INT_CR, INT_CR, INT_CR, INT_CR, INT_CR, INT_CR, INT_CR, INT_CR, INT_CR, INT_CR, INT_CR, INT_CR, INT_CR, INT_CR, INT_CR, INT_CR, INT_CR
@Test public void testSkipCComment() throws IOException, JsonParseException { [LINE] case INT_ASTERISK: [LINE] assertSkipCComment(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
@Test public void testSkipCComment() throws IOException { { final int[] codes = new int[] { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
public void testSkipCComment() throws IOException { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { {
@Test public void testSkipCComment() throws IOException { { (char) (LINE + 1); _inputBuffer[LINE] = 0; _skipCComment(); _inputBuffer[LINE] = 0; _inputBuffer[LINE] = 0; _skipCComment(); _inputBuffer[LINE] = 0; _inputBuffer[LINE] = 0; _assertEnd(LINE); } { (char) ( (LINE + 1)); _inputBuffer[LINE] = 0; _inputBuffer[LINE] = 0; _assertEnd(LINE); } { (char) ( (LINE + 1 + 2) ); _inputBuffer[LINE] = 0; _inputBuffer[LINE] = 0; _assertEnd(LINE); } }
public void testSkipCComment() throws IOException { { [LINE] return; [LINE] assert(false, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
@Test public void testSkipCComment() throws IOException { _inputBuffer = new int[] { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
public void _skipCComment() throws IOException { { final String comment = "comment\n"; _inputBuffer = new String[comment.length()]; _inputBuffer.append(comment.getBytes()); _inputBuffer.append(comment.getBytes()); _inputBuffer = new String[comment.length()]; _inputBuffer.append(comment.getBytes()); _inputBuffer.append(comment.getBytes()); _inputBuffer.append(comment.getBytes()); _inputBuffer.append(comment.getBytes()); _outputBuffer = new String[comment.length()]; _outputBuffer.append(comment.getBytes()); _outputBuffer.append(comment.getBytes()); _outputBuffer = new String[comment.length()]; _outputBuffer.append(comment.getBytes()); _outputBuffer.append(comment.getBytes()); _inputBuffer = new String[comment.length()]; _outputBuffer.append(comment.getBytes()); _outputBuffer = new String[comment.length()]; _outputBuffer.append(comment.getBytes()); _outputBuffer.append(comment.getBytes()); _outputBuffer = new String[comment.length()]; _outputBuffer.append(comment.getBytes()); _outputBuffer.append(comment.getBytes()); _
@Test public void testSkipCComment() throws IOException { { (char)'' }
@Test public void skipCppComment() throws IOException, JsonParseException { String comment = "\n\r\n\r\r\n\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\
@Test public void skipCppComment() throws IOException { String comment = " \n\r\n\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\
@Test public void testSkipCppComment() throws IOException { { { new String[] { "foo" }, { "foo" }, { "foo" }, { "foo" }, { "foo" }, { "foo" }, { "foo" }, { "foo" }, { "foo" }, { "foo" }, { "foo" }, { "foo" }, { "foo" }, { "foo" }, { "foo" }, { "foo" }, { "foo" }, { "foo" }, { "foo" }, { "foo" }, { "foo" }, { "foo" }, { "foo" }, { "foo" }, { "foo" }, { "foo" }, { "foo" }, { "foo" }, { "foo" }, { "foo" }, { "foo" }, { "foo" }, { "foo" }, { "foo" }, { "foo" }, { "foo" }, { "foo" }, { "foo" }, { "foo" }, { "foo" }, { "foo" }, { "foo" }, { "foo" }, { "foo" }, { "foo" }, { "foo" }, { "foo" }, { "
public void testSkipCppComment() throws IOException { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { { {
@Test public void testSkipCppComment() throws IOException, JsonParseException { final int[] codes = new int[3]; for (int i = 0; i < 4; i++) { codes[i] = i; } _expected_lines(codes); }
@Test public void skipCppComment() throws IOException, JsonParseException { [LINE] void skipCppComment(int i) throws IOException { _buf[i] = (byte) i; } _test(skipCppComment()); }
@Test public void skipCppComment() throws IOException, JsonParseException { [LINE] switch (code) { case INT_LF: case INT_CR: case INT_ASTERISK: case INT_CR: case INT_ASTERISK: case INT_ASTERISK: case END_LINE: case END_LINE: case END_LINE: case END_LINE: case END_LINE: case END_LINE: case END_LINE: case END_LINE: case END_LINE: case END_LINE: case END_LINE: case END_LINE: case END_LINE: case END_LINE: case END_LINE: case END_LINE: case END_LINE: case END_LINE: case END_LINE: case END_LINE: case END_LINE: case END_LINE: case END_LINE: case END_LINE: case END_LINE: case END_LINE: case END_LINE: case END_LINE: case END_LINE: case END_LINE: case END_LINE: case END_LINE: case END_LINE: case END_LINE: case END_LINE: case END_LINE: case END_LINE: case END_LINE: case END_LINE: case
@Test public void testSkipCppComment() throws IOException, JsonParseException { _writer.writeString("foo\n"); _writer.writeString("foo\n\n"); _writer.writeString("foo\n\n\n"); _writer.writeString("foo\n\n\n\n"); _writer.writeString("foo\n\n\n\n\n"); _expectReadString("foo\n\n\n"); _expectReadString("foo\n\n\n"); _expectReadString("foo\n\n\n"); _expectReadString("foo\n\n\n"); _expectReadString("foo\n\n\n"); _expectReadString("foo\n\n\n"); _expectReadString("foo\n\n\n"); _expectReadString("foo\n\n\n"); _expectReadString("foo\n\n\n"); _expectReadString("foo\n\n\n"); _expectReadString("foo\n\n\n"); _expectReadString("foo\n\n\n"); _expectReadString("foo\n\n\n");
@Test public void skipCppComment() throws IOException, JsonParseException { _buf[0] = CR; _bufbufbufbufbufbufbufbufbufbufbufbufbufbufbufbufbufbufbufbufbufbufbufbufbufbufbufbufbufbufbufbufbufbufbufbufbufbufbufbufbufbufbufbufbufbufbufbufbufbufbufbufbufbuf = new int[100]; new IteratorTester(new String[] { "LF" }, new String[] { "CR" }, new String[] { "LF" }, new String[] { "CR" }, new String[] { "LF" }, new String[] { "CR" }, new String[] { "LF" }, new String[] { "LF" }, new String[] { "CR" }, new String[] { "LF" }, new String[] { "CR" }, new String[] { "LF" }, new String[] { "CR" }, new String[] { "LF" }, new String[] { "CR" }, new String[] { "LF" }, new String[] { "CR" }, new String[] { "LF" }, new String[] { "LF" }, new String[] { "CR" }, new String[] { "LF" }, new
@Test public void skipCppComment() throws IOException { { new Mock(buf, 0, 4).write(new byte[] { (byte) 0x02, (byte) 0x03, (byte) 0x04, (byte) 0x05, (byte) 0x06, (byte) 0x06, (byte) 0x07, (byte) 0x08, (byte) 0x02, (byte) 0x03, (byte) 0x04, (byte) 0x05, (byte) 0x06, (byte) 0x07, (byte) 0x02, (byte) 0x04, (byte) 0x02, (byte) 0x02, (byte) 0x03, (byte) 0x02, (byte) 0x04, (byte) 0x02, (byte) 0x02, (byte) 0x02, (byte) 0x02, (byte) 0x03, (byte) 0x04, (byte) 0x02, (byte) 0x02, (byte) 0x03, (byte) 0x04, (byte) 0x02, (byte) 0
@Test public void _decodeEscaped() throws IOException { { int expected = 0; [LINE] (char) expected; [LINE] (char) expected; _expectedPtr = 0; _expectedBuffer = new byte[expected]; new TestString(_decodeEscaped(), expected); } { new TestString(_decodeEscaped(), expected); } { new TestString(_decodeEscaped(), expected); } }
@Test public void _decodeEscaped() throws IOException { { int expectedPtr = 0; _inputBuffer[0] = '\b'; _inputBuffer[1] = '\t'; _inputBuffer[2] = '\n'; _inputBuffer[3] = '\r'; _inputBuffer[4] = '\r'; new TestHandler() { @Override protected void _decodeEscaped() { assertEquals(expectedPtr, _inputPtr); } }.handleNext(); } { int expectedPtr = 0; _inputBuffer[0] = '\b'; _inputBuffer[1] = '\t'; _inputBuffer[3] = '\n'; new TestHandler() { @Override protected void _decodeEscaped() { assertEquals(expectedPtr, _inputPtr); } }.handleNext(); } }
@Test public void _decodeEscaped() throws IOException { { new AssertThrows(JsonParseException.class, () -> { _inputBuffer = new byte[] {0, 1, 2, 3}; }); new AssertThrows(JsonParseException.class, () -> { _inputBuffer = new byte[] {0, 1, 2, 3}; }); new AssertThrows(JsonParseException.class, () -> { _inputBuffer = new byte[] {0, 1, 2, 3}; }); new AssertThrows(JsonParseException.class, () -> { _inputBuffer = new byte[] {0, 1, 2, 3}; }); new AssertThrows(JsonParseException.class, () -> { _inputBuffer = new byte[] {0, 1, 2, 3}; }); new AssertThrows(JsonParseException.class, () -> { _inputBuffer = new byte[] {0, 1, 2, 3}; }); new AssertThrows(JsonParseException.class, () -> { _inputBuffer = new byte[] {0, 1, 2, 3}; }); new AssertThrows(JsonParseException.class, () -> { _inputBuffer = new byte[] {0, 1, 2, 3}; }); new AssertThrows(JsonParseException.class, () -> { _inputBuffer = new byte[] {0, 1, 2, 3}; }); new AssertThrows(JsonParseException.class,
@Test public void _decodeEscaped() throws IOException { { new TestableStringDecoder() { @Override protected void _decodeEscaped() { } }.decodeEscaped(); }
@Test public void _decodeEscaped() throws IOException { { int expected = (char) (LINE + 1); new TestHandler() { @Override protected void _decodeEscaped() throws IOException { } }.handle(expected); } { TestHandler handler = new TestHandler() { @Override protected void _decodeEscaped() throws IOException { } }; new TestHandler() { @Override protected void _decodeEscaped() throws IOException { } }.handle(expected); } }
@Test public void _decodeEscaped() throws IOException { { int expectedLength = 6; IntStream.range(0, expectedLength).forEach(i -> { switch (i) { case INT_b: assertEquals('b', (char) i); break; case INT_t: assertEquals('t', (char) i); break; case INT_n: assertEquals('n', (char) i); break; case INT_f: assertEquals('f', (char) i); break; case INT_r: assertEquals('r', (char) i); break; case INT_QUOTE: assertEquals('\"', (char) i); break; case INT_EOF: assertEquals(expectedLength, (int) i); break; case INT_EOF: assertEquals(expectedLength, (int) i); break; case INT_EOF: assertEquals(expectedLength, (int) i); break; case INT_f: assertEquals('f', (char) i); break; case INT_r: assertEquals('r', (char) i); break; case INT_QUOTE: assertEquals('\"', (char) i); break; case INT_EOF: assertEquals(expectedLength, (int) i); break; case INT_EOF: assertEquals
@Test public void _decodeEscaped() throws IOException { { byte[] bytes = new byte[] { 'b', 't', 'n', 'f', 'r', 't', 'e' }; new TestStream(bytes, 0, bytes.length, _bufLength, _errStream); assertEquals('\b', _decodeEscaped()); } { byte[] bytes = new byte[] { 'b', 't', 'n', 'f', 'r', 't', 'e' }; new TestStream(bytes, 0, bytes.length, _bufLength, _errStream); assertEquals('\b', _decodeEscaped()); } { byte[] bytes = new byte[] { 'b', 't', 'n', 'f', 'r', 't', 'e', 'e' }; new TestStream(bytes, 0, bytes.length, _bufLength, _errStream); assertEquals('\b', _decodeEscaped()); } { byte[] bytes = new byte[] { 'b', 't', 'n', 'f', 'r', 't', 'e', 'e', 'e' }; new TestStream(bytes, 0, bytes.length, _bufLength, _errStream); assertEquals('\b', _decodeEscaped());
@Test public void _decodeEscaped() throws IOException { { int expectedLength = 6; IntStream.range(0, expectedLength).forEach(i -> { switch (i) { case INT_t: assertEquals('t', (char) i); break; case INT_n: assertEquals('n', (char) i); break; case INT_f: assertEquals('f', (char) i); break; case INT_r: assertEquals('r', (char) i); break; case INT_QUOTE: assertEquals('\"', (char) i); break; case INT_B: assertEquals('b', (char) i); break; case INT_t: assertEquals('t', (char) i); break; case INT_n: assertEquals('n', (char) i); break; case INT_f: assertEquals('f', (char) i); break; case INT_r: assertEquals('r', (char) i); break; case INT_QUOTE: assertEquals('\"', (char) i); break; case INT_BACKSLASH: assertEquals('\\', (char) i); break; case INT_u: assertEquals('\\', (char) i); break; case INT_EOF: assertEquals(EOF
@Test public void _decodeEscaped() throws IOException { { [LINE] assert (char) 't'; assert (char) 'f'; assert (char) 'r'; } { [LINE] assert (char) 'f'; assert (char) 'r'; } { [LINE] assert (char) 'f'; assert (char) 'r'; } { [LINE] assert (char) 'f'; assert (char) 'f'; } { [LINE] assert (char) 'f'; assert (char) 'r'; } { [LINE] assert (char) 'f'; assert (char) 'r'; } }
@Test public void _decodeEscaped() throws IOException { { int expectedLength = 6; IntStream.range(0, expectedLength).forEach(i -> { inputBuffer[i] = _decodeEscaped(); }); assertEquals(expectedLength, inputBuffer.length); } }
@Test public void _decodeEscaped() throws IOException { { byte[] bytes = new byte[] { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
@Test public void _decodeEscaped() throws IOException { { new MockUp<InputStream>() { @Mock public int loadMore() throws IOException { return 0; } }.newInstance(); assertEquals('\f', _decoder.decodeEscaped()); } { new MockUp<InputStream>() { @Mock public int loadMore() throws IOException { return 0; } }.newInstance(); assertEquals('\f', _decoder.decodeEscaped()); } { new MockUp<InputStream>() { @Mock public int loadMore() throws IOException { return 0; } }.newInstance(); assertEquals('\f', _decoder.decodeEscaped()); } { new MockUp<InputStream>() { @Mock public int loadMore() throws IOException { return 0; } }.newInstance(); assertEquals('\f', _decoder.decodeEscaped()); } }
@Test public void _decodeEscaped() throws IOException { { new MockUp<InputStream>() { @Mock public boolean loadMore() throws IOException { return false; } }; new MockUp<JsonReader>() { @Mock public boolean loadMore() throws IOException { return false; } }; new MockUp<JsonReader>() { @Mock public boolean loadMore() throws IOException { return false; } }; new MockUp<JsonReader>() { @Mock public boolean loadMore() throws IOException { return false; } }; new MockUp<JsonReader>() { @Mock public char _decodeEscaped() throws IOException { return 'f'; } }; new MockUp<JsonReader>() { @Mock public boolean loadMore() throws IOException { return false; } }; new MockUp<JsonReader>() { @Mock public boolean loadMore() throws IOException { return false; } }; new MockUp<JsonReader>() { @Mock public char _decodeEscaped() throws IOException { return 'f'; } }; new MockUp<JsonReader>() { @Mock public boolean loadMore() throws IOException { return false; } }; new MockUp<JsonReader>() { @Mock public char _decodeEscaped() throws IOException { return 'f'; } }; }; new MockUp<JsonReader>()
@Test public void _decodeEscaped() throws IOException { { [LINE] (buf, expected) = new String[] { "\"b\" \"t\" \"n\" \"f\" \"r
@Test public void _decodeEscaped() throws IOException { { new MockUp<InputStream>() { @Mock public boolean loadMore() throws IOException { return false; } }.newInstance(); assertEquals('\r', _decoder.decodeEscaped()); }
@Test public void testDecodeEscaped() throws IOException { { [LINE] (char) '\\'; try { new TestableString(_decodeEscaped()).assertEquals('\\', '"'); } catch (JsonParseException e) { _reportInvalidEOF(" in character escape sequence"); return; } fail(); } catch (JsonParseException e) { } }
@Test public void testDecodeEscaped() throws IOException { { [LINE] (char) '\\'; try { _stringDecoder.decodeEscaped(); fail("Expected JsonParseException"); } catch (JsonParseException e) { } } { { [LINE] (char) '\\'; try { _stringDecoder.decodeEscaped(); fail("Expected JsonParseException"); } catch (JsonParseException e) { } } } }
@Test public void testDecodeEscaped() throws IOException { { [LINE] (char) 'b'; [LINE] (char) 't'; [LINE] (char) 'n'; [LINE] (char) 'f'; try { new TestEscaped().decodeEscaped(); fail("Expected JsonParseException"); } catch (JsonParseException e) { } } { new TestEscaped().decodeEscaped(); fail("Expected JsonParseException"); } }
@Test public void testDecodeEscaped() throws JsonParseException, IOException { [LINE] TestStream u = new TestStream(); u.readString(new byte[] { (byte) 0x1 }); assertEquals('\b', u.decodeEscaped()); assertEquals('\t', u.decodeEscaped()); assertEquals('\n', u.decodeEscaped()); assertEquals(0, u.inputBuffer.length); u.reset(); u.readString(new byte[] { (byte) 0x1 }); assertEquals('\b', u.decodeEscaped()); assertEquals('\t', u.decodeEscaped()); assertEquals(0, u.inputBuffer.length); u.reset(); u.readString(new byte[] { (byte) 0x1 }); assertEquals('\n', u.decodeEscaped()); assertEquals(0, u.inputBuffer.length); u.reset(); u.readString(new byte[] { (byte) 0x1 }); assertEquals('\f', u.decodeEscaped()); assertEquals(0, u.inputBuffer.length); u.reset(); u.readString(new byte[] { (byte) 0x1 }); assertEquals('\r', u.decodeEscaped()); assertEquals(0, u.inputBuffer.length); u.reset(); u.readString(new byte[] { (byte) 0
@Test public void _decodeEscaped() throws IOException { { new ByteBuddy().subclass(String.class).method(isDeclaredBy(String.class)).allowsArgumentAt(position(0)).decodeEscaped(); } { new ByteBuddy().subclass(String.class).method(isDeclaredBy(String.class)).allowsArgumentAt(position(1)); } { new ByteBuddy().subclass(String.class).method(isDeclaredBy(String.class)).allowsArgumentAt(position(2)).decodeEscaped(); } }
@Test public void _decodeEscaped() throws IOException { [LINE] void inputBuffer[] = new int[] { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19}; new TestArray(_inputBuffer).value(); }
@Test public void _decodeEscaped() throws JsonParseException, IOException { int i; for (i = 0; i < 4; ++i) { [LINE] val = _converter.decodeEscaped(); assertEquals(val, i); } }
@Test public void _decodeEscaped() throws IOException { { int expectedPtr = 0; _inputBuffer[0] = '\b'; _inputBuffer[1] = '\t'; _inputBuffer[2] = '\n'; _inputBuffer[3] = '\r'; _inputBuffer[4] = '\r'; new TestHandler() { @Override protected void _decodeEscaped() { assertEquals(expectedPtr, _inputPtr); } }.handleNext(); } { int expectedPtr = 0; _inputBuffer[0] = '\b'; _inputBuffer[1] = '\t'; _inputBuffer[3] = '\n'; new TestHandler() { @Override protected void _decodeEscaped() { assertEquals(expectedPtr, _inputPtr); } }.handleNext(); } }
@Test public void _decodeEscaped() throws IOException { { new AssertThrows(JsonParseException.class, () -> { _inputBuffer = new byte[] {0, 1, 2, 3}; }); new AssertThrows(JsonParseException.class, () -> { _inputBuffer = new byte[] {0, 1, 2, 3}; }); new AssertThrows(JsonParseException.class, () -> { _inputBuffer = new byte[] {0, 1, 2, 3}; }); new AssertThrows(JsonParseException.class, () -> { _inputBuffer = new byte[] {0, 1, 2, 3}; }); new AssertThrows(JsonParseException.class, () -> { _inputBuffer = new byte[] {0, 1, 2, 3}; }); new AssertThrows(JsonParseException.class, () -> { _inputBuffer = new byte[] {0, 1, 2, 3}; }); new AssertThrows(JsonParseException.class, () -> { _inputBuffer = new byte[] {0, 1, 2, 3}; }); new AssertThrows(JsonParseException.class, () -> { _inputBuffer = new byte[] {0, 1, 2, 3}; }); new AssertThrows(JsonParseException.class, () -> { _inputBuffer = new byte[] {0, 1, 2, 3}; }); new AssertThrows(JsonParseException.class,
@Test public void _decodeEscaped() throws IOException { { new AssertThrows(JsonParseException.class, () -> { _inputBuffer[_inputPtr] = 'b'; }); new AssertThrows(JsonParseException.class, () -> { _inputBuffer[_inputPtr] = 't'; }); new AssertThrows(JsonParseException.class, () -> { _inputBuffer[_inputPtr] = 'n'; }); new AssertThrows(JsonParseException.class, () -> { _inputBuffer[_inputPtr] = 'f'; }); new AssertThrows(JsonParseException.class, () -> { _inputBuffer[_inputPtr] = 'f'; }); new AssertThrows(JsonParseException.class, () -> { _inputBuffer[_inputPtr] = 'f'; }); new AssertThrows(JsonParseException.class, () -> { _inputBuffer[_inputPtr] = 'f'; }); new AssertThrows(JsonParseException.class, () -> { _inputBuffer[_inputPtr] = 'f'; }); new AssertThrows(JsonParseException.class, () -> { _inputBuffer[_inputPtr] = 'f'; }); new AssertThrows(JsonParseException.class, () -> { _inputBuffer[_input
@Test public void _decodeEscaped() throws IOException { [LINE] int digit = CharTypes.intToHex(inputBuffer, 2); assertEquals(digit, (int) _val); }
@Test public void _decodeEscaped() throws IOException { int expected = 0; _inputBuffer[0] = '\b'; _inputBuffer[1] = '\t'; _inputBuffer[2] = '\n'; _expectedBuffer[3] = '\r'; new TestableStringDecoder() { @Override protected void _decodeEscaped() { } }.decodeEscaped(); }
@Test public void _decodeEscaped() throws IOException { [LINE] value = (value << 4) | digit; [LINE] value2 = (value << 4) | digit; { [LINE] value3 = (value << 4) | digit; } { [LINE] value4 = (value << 4) | digit; } { [LINE] value5 = (value << 4) | digit; } { [LINE] value6 = (value << 4) | digit; } { [LINE] value7 = (value << 4) | digit; } { [LINE] value8 = (value << 4) | digit; } { [LINE] value9 = (value << 4) | digit; } { [LINE] value10 = (value << 4) | digit; } { [LINE] value11 = (value << 4) | digit; } { [LINE] value12 = (value << 4) | digit; } { [LINE] value13 = (value << 4) | digit; } { [LINE] value14 = (value << 4) | digit; } { [LINE] value21 = (value << 4) | digit; } { [LINE] value22 = (value << 4) | digit; } { [LINE] value23 = (value
@Test public void _decodeEscaped() throws IOException { { new TestableStringDecoder() { @Override protected char[] decodeEscaped() throws IOException { return new char[] { 'b', 't', 'n', 'f', 'r', 'e' }; } }.decodeEscaped(); } { new TestableStringDecoder() { @Override protected char[] _decodeEscaped() throws IOException { return new char[] { 'b', 'b', 't', 'n', 'f', 'r', 'e' }; } }.decodeEscaped(); } { new TestableStringDecoder() { @Override protected char[] _decodeEscaped() throws IOException { return new char[] { 'b', 't', 'n', 'f', 'r', 'e' }; } }.decodeEscaped(); } { new TestableStringDecoder() { @Override protected char[] _decodeEscaped() throws IOException { return new char[] { 'b', 'b', 't', 'n', 'f', 'r', 'e', '\n', 'f', 'r', 'e' }; } }.decodeEscaped(); } { new TestableStringDecoder() { @Override protected char[] _decodeEscaped() throws IOException { return new char[] { 'b
@Test public void testDecodeUtf8_2() throws IOException { UTF8StreamJsonParser parser = new UTF8StreamJsonParser(null, 0, null, null, null, 0, 0, false); parser.setCodec(new ObjectCodec() { }); parser.parse(IOContext.IOExcepti.IOExcepti.UTF8_2, new ByteArrayInputStream("foo".getBytes())); assertEquals("foo", parser.getInputSource().getString(0)); parser.parse(IOContext.IOExcepti.IOExcepti.IOExcepti.UTF8_2, new ByteArrayInputStream("foo".getBytes())); assertEquals("foo", parser.getInputSource().getString(0)); parser.parse(IOContext.IOExcepti.IOExcepti.IOExcepti.UTF8_2, new ByteArrayInputStream("foo".getBytes())); assertEquals("foo", parser.getInputSource().getString(0)); parser.parse(IOContext.IOExcepti.IOExcepti.IOExcepti.IOExcepti.UTF8_2, new ByteArrayInputStream("foo".getBytes())); assertEquals("foo", parser.getInputSource().getString(0)); parser.parse(IOContext.IOExcepti.IOExcepti.IOExcepti.IOExcepti.IOExcepti.IO
@Test public void testDecodeUtf8_2() throws IOException { UTF8StreamJsonParser parser = new UTF8StreamJsonParser(null, 0, null, null, 0, 0, false); parser.setCodec(new ObjectCodec() { }); parser.parseInputSource(new ByteArrayInputStream("foo".getBytes())); assertEquals("foo", parser.getInputSource().getString(0)); parser.parseInputSource(new ByteArrayInputStream("foo".getBytes())); assertEquals("foo", parser.getInputSource().getString(0)); parser.parseInputSource(new ByteArrayInputStream("foo".getBytes())); assertEquals("foo", parser.getInputSource().getString(0)); parser.parseInputSource(new ByteArrayInputStream("foo".getBytes())); assertEquals("foo", parser.getInputSource().getString(0)); parser.parseInputSource(new ByteArrayInputStream("foo".getBytes())); assertEquals("foo", parser.getInputSource().getString(0)); parser.parseInputSource(new ByteArrayInputStream("foo".getBytes())); assertEquals("foo", parser.getInputSource().getString(0)); parser.parseInputSource(new ByteArrayInputStream("foo".getBytes())); assertEquals("foo", parser.getInputSource().getString(0)); parser.parseInputSource(new ByteArrayInputStream("foo".getBytes())); assertEquals("foo
@Test public void testLoadUtf82() throws IOException { String json = "{\"foo\": \"bar\"}"; assertEquals(json, _loadMoreGuaranteed()); assertEquals(json, _decodeUtf8_2(json)); }
@Test public void testDecodeUtf8_2() throws IOException { UTF8StreamJsonParser parser = new UTF8StreamJsonParser(null, 0, null, null, 0, 0, false); parser.setCodec(new ObjectCodec() { @Override public Object getInputSource() { return new String("foo"); } }); parser.decodeUtf8_2(2); assertEquals("foo", parser.getInputSource().getString(0)); assertEquals("foo", parser.getInputSource().getString(1)); assertEquals("foo", parser.getInputSource().getString(2)); assertEquals("foo", parser.getInputSource().getString(3)); parser.closeInput(); }
@Test public void testDecodeUtf8_2() throws IOException { UTF8StreamJsonParser parser = new UTF8StreamJsonParser(null, 0, null, null, 0, 0, false); parser.setCodec(new ObjectCodec() { }); parser.parse(new byte[20], new byte[20], 0, 0, false); assertEquals(new byte[20], parser.getInputSource().read()); assertEquals(new byte[20], parser.getInputSource().read()); assertEquals(new byte[20], parser.getInputSource().read()); assertEquals(new byte[20], parser.getInputSource().read()); assertEquals(new byte[20], parser.getInputSource().read()); assertEquals(new byte[20], parser.getInputSource().read()); assertEquals(new byte[20], parser.getInputSource().read()); assertEquals(new byte[20], parser.getInputSource().read()); assertEquals(new byte[20], parser.getInputSource().read()); assertEquals(new byte[20], parser.getInputSource().read()); assertEquals(new byte[20], parser.getInputSource().read()); assertEquals(new byte[20], parser.getInputSource().read()); assertEquals(new byte[20], parser
@Test public void testDecodeUtf8_2() throws IOException { UTF8StreamJsonParser d = new UTF8StreamJsonParser(null, 0, null, null, null, 0, 0, false); d.setCodec(ObjectCodec.UTF8); d.setInputSource(new Object()); assertEquals(decodeUtf8_2(0x080), d.decodeUtf8_2(0x0)); assertEquals(decodeUtf8_2(0x80), d.decodeUtf8_2(0x0)); assertEquals(decodeUtf8_2(0x80), d.decodeUtf8_2(0x80)); assertEquals(decodeUtf8_2(0x80), d.decodeUtf8_2(0x80)); assertEquals(decodeUtf8_2(0x80), d.decodeUtf8_2(0x80)); assertEquals(decodeUtf8_2(0x80), d.decodeUtf8_2(0x80)); assertEquals(decodeUtf8_2(0x80), d.decodeUtf8_2(0x80)); assertEquals(decodeUtf8_2(0x80), d.decodeUtf8_2(0x80)); assertEquals(decodeUtf8_2(0x80), d.decodeUtf8_2(0x80)); assertEquals(decodeUtf8_2(0x80), d.decodeUtf
@Test public void testDecodeUtf8_3() throws IOException, JsonParseException { byte[] inputBuffer = new byte[40]; int inputEnd = decodeUtf8_3(inputBuffer); assertEquals(40, inputEnd); assertEquals(decodeUtf8_3(inputBuffer), 0); assertEquals(decodeUtf8_3(inputBufferEnd), 0); assertEquals(decodeUtf8_3(inputBufferEnd), 2); assertEquals(decodeUtf8_3(inputBufferEnd), 2); assertEquals(decodeUtf8_3(inputBufferEnd), 3); assertEquals(decodeUtf8_3(inputBufferEnd), 4); assertEquals(decodeUtf8_3(inputBufferEnd), 5); assertEquals(decodeUtf8_3(inputBufferEnd), 6); assertEquals(decodeUtf8_3(inputBufferEnd), 7); assertEquals(decodeUtf8_3(inputBufferEnd), 8); assertEquals(decodeUtf8_3(inputBufferEnd), 9); assertEquals(decodeUtf8_3(inputBufferEnd), 10); assertEquals(decodeUtf8_3(inputBufferEnd), 10); assertEquals(decodeUtf8_3(inputBufferEnd), 32); assertEquals(decodeUtf8_3(inputBufferEnd), 64); assertEquals(decodeUtf8_3(inputBufferEnd), 64); assertEquals(decodeUtf8_3(inputBuffer
@Test public void testDecodeUtf8_3() throws IOException, JsonParseException { byte[] inputBuffer = new byte[40]; int inputEnd = _inputBuffer.length; int[] decoded = new int[40]; _parser.decodeUtf8_3(inputBuffer, inputEnd, inputBuffer.length); assertEquals(inputBuffer.length, decoded.length); for (int i = 0; i < decoded.length; i++) assertEquals(decoded[i], inputBuffer[i]); }
@Test public void testDecodeUtf8_3() throws IOException { byte[] inputBuffer = new byte[40]; int inputEnd = _decodeUtf8_3(inputBuffer, 0, inputEnd); assertEquals(40, inputEnd); }
@Test public void testDecodeUtf8_3() throws IOException { { int[] inputBuffer = new int[3]; int[] decodeUtf8_3 = new int[3]; _decodeUtf8_3[0] = 0; _decodeUtf8_3[1] = 0; _decodeUtf8_3[2] = 0; _decodeUtf8_3[3] = 0; _decodeUtf8_3[4]; assertEquals(decodeUtf8_3[0], 0); assertEquals(decodeUtf8_3[1], 0); assertEquals(decodeUtf8_3[2], 0); assertEquals(decodeUtf8_3[3], 0); assertEquals(decodeUtf8_3[4], 0); assertEquals(decodeUtf8_3[5], 0); assertEquals(decodeUtf8_3[6], 0); assertEquals(decodeUtf8_3[7], 0); assertEquals(decodeUtf8_3[8], 1); assertEquals(decodeUtf8_3[9], 0); assertEquals(decodeUtf8_3[10], 0); assertEquals(decodeUtf8_3[11], 1); assertEquals(decodeUtf8_3[12], 1); assertEquals(decodeUtf8_3[13], 1); assertEquals(decodeUtf8_3[14], 2); assertEquals(decodeUtf8_3[15], 1); assertEquals(decodeUtf8_3[16], 2); assertEquals(decodeUtf8_3[17], 2); assertEquals(decodeUtf8_3[18], 3); assertEquals
@Test public void testDecodeUtf8_3() throws IOException, JsonParseException { byte[] inputBuffer = new byte[40]; int _str = decodeUtf8_3(inputBuffer); assertEquals(40, _str); }
@Test public void testDecodeUtf8_3() throws IOException, JsonParseException { byte[] inputBuffer = new byte[40]; int[] expected = new int[40]; int[] actual = new int[40]; new Random().nextBytes(inputBuffer); new UTF8StreamJsonParser(_ctxt, _features, _in, _codec, _sym, inputBuffer, 0, expected.length, false).read(actual); assertEquals(expected, actual); }
@Test public void testDecodeUtf8_3() throws IOException, JsonParseException { byte[] inputBuffer = new byte[40]; int inputEnd = (int) (Math.random() * 3); int expected = (int) (Math.random() * 3); String str = new String(inputBuffer, 0, inputEnd, 'x'); UTF8StreamJsonParser parser = new UTF8StreamJsonParser(null, 0, null, null, inputBuffer, 0, inputEnd, false); parser.setCodec(ObjectCodec.UTF8); parser.parse(str); assertEquals(expected, str); }
@Test public void testDecodeUtf8_3() throws IOException, JsonParseException { byte[] inputBuffer = new byte[40]; int inputEnd = _inputBuffer.length; int[] decoded = new int[40]; _parser.decodeUtf8_3(inputBuffer, inputEnd, inputBuffer.length); assertEquals(inputBuffer.length, decoded.length); for (int i = 0; i < decoded.length; i++) assertEquals(decoded[i], inputBuffer[i]); }
@Test public void testDecodeUtf8_3() throws IOException { byte[] inputBuffer = new byte[40]; int inputEnd = _decodeUtf8_3(inputBuffer, 0, inputEnd); assertEquals(40, inputEnd); }
@Test public void testDecodeUtf8_3() throws IOException, JsonParseException { byte[] inputBuffer = new byte[40]; int _inputPtr = 0; try { _decodeUtf8_3(inputBuffer); fail("Expected JsonParseException"); } catch (JsonParseException e) { } }
@Test public void testDecodeUtf8_3() throws IOException, JsonParseException { byte[] inputBuffer = new byte[40]; int[] expected = new int[40]; int[] actual = new int[40]; new Random().nextBytes(inputBuffer); new UTF8StreamJsonParser(_ctxt, _features, _in, _codec, _sym, inputBuffer, 0, expected.length, false).read(actual); assertEquals(expected, actual); }
@Test public void testDecodeUtf8_3() throws IOException, JsonParseException { byte[] inputBuffer = new byte[40]; int inputEnd = (int) (Math.random() * 3); int[] decodeUtf8_3 = new int[40]; _parser.decodeUtf8_3(decodeUtf8_3); assertEquals(decodeUtf8_3[0], 0); assertEquals(decodeUtf8_3[1], 0); assertEquals(decodeUtf8_3[2], 0); assertEquals(decodeUtf8_3[3], 0); assertEquals(decodeUtf8_3[4], 0); assertEquals(decodeUtf8_3[5], 0); assertEquals(decodeUtf8_3[6], 0); assertEquals(decodeUtf8_3[7], 1); assertEquals(decodeUtf8_3[8], 2); assertEquals(decodeUtf8_3[8], 3); assertEquals(decodeUtf8_3[8], 4); assertEquals(decodeUtf8_3[8], 0); assertEquals(decodeUtf8_3[8], 1); assertEquals(decodeUtf8_3[8], 2); assertEquals(decodeUtf8_3[8], 3); assertEquals(decodeUtf8_3[8], 4); assertEquals(decodeUtf8_3[8], 2); assertEquals(decodeUtf8_3[8], 3); assertEquals(decodeUtf8_3[8], 4); assertEquals(decode
@Test public void testDecodeUtf8_3() throws IOException { TestCase.assertEquals(decodeUtf8_3(""), 0); TestCase.assertEquals(decodeUtf8_3("a"), 1); TestCase.assertEquals(decodeUtf8_3("a"), 2); TestCase.assertEquals(decodeUtf8_3("a"), 3); TestCase.assertEquals(decodeUtf8_3("a"), 0); TestCase.assertEquals(decodeUtf8_3("a"), 1); TestCase.assertEquals(decodeUtf8_3("a"), 2); TestCase.assertEquals(decodeUtf8_3("a"), 3); TestCase.assertEquals(decodeUtf8_3("a"), 2); TestCase.assertEquals(decodeUtf8_3("a"), 2); TestCase.assertEquals(decodeUtf8_3("a"), 3); TestCase.assertEquals(decodeUtf8_3("a"), 2); TestCase.assertEquals(decodeUtf8_3("a"), 3); }
@Test public void testDecodeUtf8_3fast() throws IOException, JsonParseException { int[] inputBuffer = { {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19}, {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10,
@Test public void testDecodeUtf8_3fast() throws IOException { { int[] strictCases = new int[] {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19}; for (int i = 0; i < strictCases.length; i++) { for (int j = 0; j < strictCases.length; j++) { try { _decodeUtf8_3fast(strictCases[i]); } catch (JsonParseException e) { _assertEquals(e.getMessage(), "strictCases[i]"); } } } } { for (int i = 0; i < strictCases.length; i++) { try { _decodeUtf8_3fast(strictCases[i]); } catch (JsonParseException e) { _assertEquals(e.getMessage(), "strictCases[i]"); } } } }
@Test public void testDecodeUtf8_3fast() throws IOException { { int strict = 0; int strict2 = 0; int strict3 = 0; int strict4 = 0; int strict5 = 0; int strict6 = 0; int strict7 = 0; int strict8 = 0; int strict8 = 0; int strict9 = 0; int strict10 = 0; int strict11 = 0; int strict12 = 0; int strict21 = 0; int strict22 = 0; int strict34 = 0; int strict21 = 0; int strict34 = 0; for (int i = strict; i < strict8 + strict8; i++) { int val = _decodeUtf8_3fast(val); assertEquals(val, strict); assertEquals(val, strict2); assertEquals(val, strict3); strict2 = val; strict3 = val; strict4 = val; strict5 = 0; } } }
@Test public void testDecodeUtf8_3fast() throws IOException { byte[] inputBuffer = new byte[64]; int expected = (int) (Math.random() * 3); int actual = _decodeUtf8_3fast(inputBuffer); assertEquals(expected, actual); }
@Test public void testDecodeUtf8_3fast() throws IOException { { byte[] inputBuffer = new byte[40]; int c1 = (c1 << 6) | 0x3F; int c2 = (c1 << 6) | 0x3F; int c3 = (c1 << 6) | 0x3F; int c4 = (c1 << 6) | 0x3F; int c5 = (c1 << 6) | 0x3F; int c6 = (c1 << 6) | 0x3F; int c7 = (c1 << 6) | 0x3F; int c8 = (c1 << 6) | 0x3F; int c9 = (c1 << 6) | 0x3F; int c10 = (c1 << 6) | 0x3F; int c11 = (c1 << 6) | 0x3F; int c12 = (c1 << 6) | 0x3F; int c13 = (c1 << 6) | 0x3F; int c14 = (c1 << 6) | 0x3F; int c15 = (c1 << 6) | 0x3F; int c16 = (
@Test public void testDecodeUtf8_3fast() throws IOException { { int[] inputBuffer = new int[40]; int[] expectedBuffer = new int[40]; for (int i = 0; i < inputBuffer.length; i++) { expectedBuffer[i] = i; } int err = 0; for (int i = 0; i < inputBuffer.length; i++) { try { _decodeUtf8_3fast(expectedBuffer[i]); } catch (JsonParseException e) { err += e.getErrorCount() * 3; } } assertEquals(err, EXPECTED_STRING_ERR); } }
@Test public void testDecodeUtf8_3fast() throws IOException { byte[] inputBuffer = new byte[64]; int expected = (int) (Math.random() * 3); int actual = _decodeUtf8_3fast(inputBuffer); assertEquals(expected, actual); }
@Test public void testDecodeUtf8_3fast() throws IOException { byte[] inputBuffer = new byte[40]; int expected = 0; int actual = _decodeUtf8_3fast(inputBuffer); assertEquals(expected, actual); }
@Test public void testDecodeUtf8_3fast() throws IOException { TestCase.assertEquals(decodeUtf8_3fast(0x080), 0x080); TestCase.assertEquals(decodeUtf8_3fast(0x080), 0x080); TestCase.assertEquals(decodeUtf8_3fast(0x080), 0x080); TestCase.assertEquals(decodeUtf8_3fast(0x080), 0x080); TestCase.assertEquals(decodeUtf8_3fast(0x080), 0x080); TestCase.assertEquals(decodeUtf8_3fast(0x080), 0x080); TestCase.assertEquals(decodeUtf8_3fast(0x080), 0x080); TestCase.assertEquals(decodeUtf8_3fast(0x080), 0x080); TestCase.assertEquals(decodeUtf8_3fast(0x080), 0x080); TestCase.assertEquals(decodeUtf8_3fast(0x080), 0x080); TestCase.assertEquals(decodeUtf8_3fast(0x080), 0x080); TestCase.assertEquals(decodeUtf8_3fast(0x080), 0x080); }
@Test public void testSkipCR() throws IOException { publi.setInputSource(new String("a\nb\nc")); publi.setInputSource(new String("a\nb\nc")); assertEquals("a\nb\nc", publi.getText()); publi.skipCR(); assertEquals("a\nb\nc", publi.getText()); assertEquals("a\nb\nc", publi.getText()); }
@Test public void testSkipCR() throws IOException { new UTF8StreamJsonParser(_ctxt, features, _in, _codec, sym, inputBuffer, 0, inputBuffer.length, true).skipCR(); assertEquals("", out.getText()); }
@Test public void testSkipCR() throws IOException { String text = "{'a':1,'b':2,'c':3,'d':4,'e':5,'f':6,'g':6,'h':7,'i':8,'j':9,'k':8,'l':10,'o':10,'o':10,'o':10,'o':10,'o':10,'o':10,'o':10,'o':10,'o':10,'o':10,'o':10,'o':10,'o':10,'o':10,'o':10,'o':10,'o':10,'o':10,'o':10,'o':10,'o':10,'o':10,'o':10,'o':10,'o':10,'o':10,'o':10,'o':10,'o':10,'o':10,'o':10,'o':10,'o':10,'o':10,'o':10,'o':10,'o':10,'o':10,'o':10,'o':10,'o':10,'o':10,'o':10,'o':10,'o':10,'o':10,'o':10,'o':10,
@Test public void testSkipCR() throws IOException { UTF8StreamJsonParser parser = new UTF8StreamJsonParser(ctxt, features, in, codec, sym, inputBuffer, 0, inputEnd, false); parser._skipCR(); assertEquals(currInputRow, inputBuffer[_inputRowStart]); assertEquals(currInputRow, inputBuffer[_inputEnd]); parser.closeInput(); }
@Test public void testSkipCR() throws IOException { new UTF8StreamJsonParser(_ctxt, 0, null, null, 0, 0, false).skipCR(); new UTF8StreamJsonParser(_ctxt, 0, null, null, 0, 0, false).skipCR(); new UTF8StreamJsonParser(_ctxt, 0, null, null, 0, 0, false).skipCR(); new UTF8StreamJsonParser(_ctxt, 0, null, null, 0, 0, false).skipCR(); new UTF8StreamJsonParser(_ctxt, 0, null, null, 0, 0, false).skipCR(); new UTF8StreamJsonParser(_ctxt, 0, null, null, 0, 0, false).skipCR(); new UTF8StreamJsonParser(_ctxt, 0, null, null, 0, 0, false).skipCR(); new UTF8StreamJsonParser(_ctxt, 0, null, null, 0, 0, false).skipCR(); new UTF8StreamJsonParser(_ctxt, 0, null, null, 0, 0, false).skipCR(); new UTF8StreamJsonParser(_ctxt, 0, null, null, 0, 0, false).skipCR(); new UTF8StreamJsonParser(_ctxt, 0, null, null, 0, 0, false).skipCR(); new UTF8StreamJsonParser(_ctxt, 0, 0, null,
@Test public void testGrowArrayBy() throws Exception { int[] arr = new int[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19 }; int more = 5; int[] res = [LINE]growArrayBy(arr, more); assertEquals(arr.length, more); assertEquals(arr.length, more); res = [LINE]growArrayBy(arr, more); assertEquals(arr.length, more); assertEquals(arr.length, more); res = [LINE]growArrayBy(arr, more); assertEquals(arr.length, more); assertEquals(arr.length, more); res = [LINE]growArrayBy(arr, more); assertEquals(arr.length, more); assertEquals(arr.length, more); res = [LINE]growArrayBy(arr, more); assertEquals(arr.length, more); assertEquals(arr.length, more); }
@Test public void testGrowArrayByNull() { int[] arr = null; int more = 10; assertArrayEquals(new int[] {more}, growArrayBy(arr, more)); }
@Test public void testGrowArrayBy() throws Exception { int[] arr = new int[] {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19}; int[] growArray = growArrayBy(arr, 10); assertEquals(arr.length, growArray.length); assertEquals(arr[arr.length - 1], growArray[0]); assertEquals(arr[arr.length - 1], growArray[1]); assertEquals(arr[arr.length - 1], growArray[2]); assertEquals(arr[arr.length - 1], growArray[3]); assertEquals(arr[arr.length - 1], growArray[4]); assertEquals(arr[arr.length - 1], growArray[5]); assertEquals(arr[arr.length - 1], growArray[6]); assertEquals(arr[arr.length - 1], growArray[arr.length]); }
@Test public void testIOContext() { BufferRecycler br = new BufferRecycler(); br.setSource(new StringSource("foo")); br.setSource(new StringSource("bar")); IOContext ioContext = new IOContext(br, new StringSource("foo"), true); Assert.assertEquals(ioContext._bufferRecycler, br); Assert.assertEquals(ioContext._sourceRef, new StringSource("foo")); Assert.assertEquals(ioContext._managedResource, true); }
@Test public void testIOContext() { BufferRecycler br = new BufferRecycler(); { BufferRecycler bufRec = br.allocReadIOBuffer(); { Integer t = new Integer(42); IOContext ctx = new IOContext(bufRec, t, true); assertEquals(br.allocReadIOBuffer(), t.allocBase64Buffer().length); assertEquals(br.allocWriteEncodingBuffer(), t.allocTokenBuffer().length); assertEquals(br.allocBase64Buffer(), t.allocBase64Buffer().length); assertEquals(br.allocTokenBuffer(), t.allocTokenBuffer().length); assertEquals(br.allocBase64Buffer(), t.allocBase64Buffer().length); assertEquals(br.allocNameCopyBuffer(buf.length), t.allocNameCopyBuffer(buf.length - 1)); bufRec.release(); } } { BufferRecycler br = new BufferRecycler(); { Integer t = new Integer(42); IOContext ctx = new IOContext(br, t, true); assertEquals(br.allocReadIOBuffer(), t.allocBase64Buffer().length); assertEquals(br.allocWriteEncodingBuffer(), t.allocBase64Buffer().length); assertEquals(br.allocTokenBuffer(), t.allocTokenBuffer
@Test public void testIOContext() { JsonEncoding enc = new JsonEncoding(); JsonBufferReader reader = new JsonBufferReader(enc); BufferRecycler br = reader.getBufferRecycler(); IOContext ioContext = new IOContext(br, "foo", true); Assert.assertEquals("foo", ioContext.getSourceReference()); Assert.assertEquals("bar", ioContext.getSourceReference()); Assert.assertEquals(true, ioContext.isResourceManaged()); reader.releaseReadIOBuffer(); Assert.assertEquals("foo", ioContext.getSourceReference()); Assert.assertEquals(true, ioContext.isResourceManaged()); reader.releaseReadEncodingBuffer(); Assert.assertEquals("bar", ioContext.getSourceReference()); Assert.assertEquals(true, ioContext.isResourceManaged()); reader.releaseReadIOBuffer(); Assert.assertEquals("foo", ioContext.getSourceReference()); Assert.assertEquals(true, ioContext.isResourceManaged()); reader.releaseNameCopyBu(); Assert.assertEquals("foo", ioContext.getSourceReference()); Assert.assertEquals(true, ioContext.isResourceManaged()); reader.releaseReadEncodingBuffer(); Assert.assertEquals("bar", ioContext.allocBase64Buffer
@Test public void testIOContext() { JsonEncoding enc = new JsonEncoding(); JsonBuffer br = new JsonBuffer(br); IOContext context = new IOContext(br, sourceRef, managedResource); context.setEncoding(enc); context.setResourceManaged(managedResource); context.allocReadIOBuffer(); context.allocBase64Buffer(); context.allocTokenBuffer(); context.releaseWriteEncodingBuffer(); context.releaseBase64Buffer(); context.releaseTokenBuffer(charBuffer.allocate(64)); context.releaseBase64Buffer(charBuffer.allocate(64)); context.releaseContext(); context.releaseContext(); context.releaseContext(); context.releaseContext(); context.releaseContext(); context.releaseContext(); context.releaseReadIOBuffer(); context.releaseWriteEncodingBuffer(); context.releaseBase64Buffer(Base64.DEFAULT_BASE64_64_64); context.releaseTokenBuffer(Base64.DEFAULT_BASE64_64_64_64); context.releaseContext(); context.releaseContext(); context.releaseContext(); context.releaseContext(); }
@Test public void testAllocReadIOBuffer() { byte[] buf = new byte[64]; buf[0] = (byte) 0x80; buf[1] = (byte) 0x80; buf[2] = (byte) 0x80; buf[3] = (byte) 0x80; IOContext context = new IOContext(br, null, true); byte[] allocReadIOBuffer = context.allocReadIOBuffer(); Assert.assertEquals(buf, allocReadIOBuffer); Assert.assertEquals(buf.length, allocReadIOBuffer.length); Assert.assertArrayEquals(new byte[64], allocReadIOBuffer); }
@Test public void testAllocReadIOBuffer() { byte[] buf = new byte[64]; try { new IOContext(_raAllocator.allocReadIOBuffer(), null, true).assertAlloc(buf); } catch (ArrayIndexOutOfBoundsException e) { Assert.assertEquals(e.getLength(), 0); } }
@Test public void testAllocReadIOBuffer() { byte[] buf = new byte[64]; byte[] buf2 = new byte[64]; buf[0] = (byte) 0x01; buf[1] = (byte) 0x02; buf[2] = (byte) 0x03; buf[3] = (byte) 0x04; buf[4] = (byte) 0x05; buf[5] = (byte) 0x06; buf[6] = (byte) 0x07; buf[7] = (byte) 0x08; buf[8] = (byte) 0x09; buf[9] = (byte) 0x10; IOContext context = new IOContext(br, null, false); context.setEncoding(JsonEncoding.UTF8); context.setResourceManaged(true); context.setReadIOBuffer(buf2); context.allocReadIOBuffer(); Assert.assertEquals(buf, context.allocReadIOBuffer()); Assert.assertEquals(buf2, context.allocReadIOBuffer()); Assert.assertEquals(buf2, context.allocReadIOBuffer()); Assert.assertEquals(buf3, context.allocReadIOBuffer()); Assert.assertEquals(buf4, context.allocReadIOBuffer()); Assert.
@Test public void testAllocWriteEncodingBuffer() { byte[] base64Buffer = new byte[64]; byte[] writeEncodingBuffer = new byte[64]; int n; while ((n = _ioContext.allocWriteEncodingBuffer())!= null) { Assert.assertEquals(n, writeEncodingBuffer.length); base64Buffer[n] = (byte) n; } byte[] writeEncodingBuffer = new byte[writeEncodingBuffer.length]; _ioContext.setEncoding(JsonEncoding.UTF8); _ioContext.setResourceManaged(true); _ioContext.allocWriteEncodingBuffer(); Assert.assertEquals(writeEncodingBuffer, writeEncodingBuffer); Assert.assertEquals(writeEncodingBuffer.length, 6); Assert.assertArrayEquals(writeEncodingBuffer, writeEncodingBuffer); }
@Test public void testAllocWriteEncodingBuffer() { byte[] base64Buffer = new byte[64]; byte[] tokenBuffer = new byte[64]; byte[] result = _ioContext.allocWriteEncodingBuffer(); Assert.assertEquals(Base64.length, result.length); Assert.assertEquals(Base64.length, result.length); Assert.assertEquals(tokenBuffer, result); Assert.assertEquals(Base64.length, result.length); Assert.assertEquals(tokenBuffer, result); }
@Test public void testWriteEncodingBuffer() { byte[] expected = new byte[64]; byte[] actual = new byte[64]; new Random().nextBytes(expected); new Random().nextBytes(actual); byte[] actual2 = _ioContext.allocWriteEncodingBuffer(); Assert.assertArrayEquals(expected, actual); Assert.assertArrayEquals(expected, actual2); }
@Test public void testAllocTokenBuffer() { Assert.assertArrayEquals(new char[] { 'a', 'b', 'c' }, _ioContext.allocTokenBuffer()); Assert.assertArrayEquals(new char[] { 'a', 'b', 'c' }, _ioContext.allocTokenBuffer()); Assert.assertArrayEquals(new char[] { 'a', 'b', 'c' }, _ioContext.allocTokenBuffer()); Assert.assertArrayEquals(new char[] { 'a', 'b', 'c' }, _ioContext.allocTokenBuffer()); Assert.assertArrayEquals(new char[] { 'a', 'b', 'c' }, _ioContext.allocTokenBuffer()); }
@Test public void testAllocTokenBuffer() { try (BufferedReader br = new BufferedReader(new InputStreamReader(new ByteArrayInputStream(_compressedData.get(0))))) { Assert.assertTrue(br.allocTokenBuffer().length == 2); Assert.assertTrue(br.allocTokenBuffer()[0] == 'a'); Assert.assertTrue(br.allocTokenBuffer()[0] == 'b'); Assert.assertTrue(br.allocTokenBuffer()[0] == 'c'); Assert.assertTrue(br.allocTokenBuffer()[0] == 'd'); Assert.assertTrue(br.allocTokenBuffer()[0] == 'e'); Assert.assertTrue(br.allocTokenBuffer()[0] == 'f'); Assert.assertTrue(br.allocTokenBuffer()[0] == 'g'); Assert.assertTrue(br.allocTokenBuffer()[0] == 'h'); Assert.assertTrue(br.allocTokenBuffer()[0] == 'i'); Assert.assertTrue(br.allocTokenBuffer()[0] == 'o'); Assert.assertTrue(br.allocTokenBuffer()[0] == 'o'); Assert.assertTrue(br.allocTokenBuffer()[0] == 'i'); Assert.assertTrue(br.allocTokenBuffer()[0] == 'o
@Test public void testAllocTokenBuffer() { BufferRecycler br = new BufferRecycler(new byte[20]); br.setReadIOBuffer(new byte[20]); br.setWriteIOBuffer(new byte[20]); br.setReadEncoding(JsonEncoding.UTF8); IOContext context = new IOContext(br, null, true); char[] tokenBuffer = context.allocTokenBuffer(); Assert.assertEquals(tokenBuffer.length, 20); Assert.assertEquals(tokenBuffer, new String(tokenBuffer, 0, _buf.length)); }
@Test public void testAllocConcatBuffer() { Assert.assertArrayEquals(new char[] { 'a', 'b', 'c' }, _ioContext.allocConcatBuffer()); }
@Test public void testAllocConcatBuffer() { try (final InputStream in = new ByteArrayInputStream(new byte[] { (byte) 0x80, (byte) 0x80, (byte) 0x80, (byte) 0x80, (byte) 0x80, (byte) 0x80, (byte) 0x80, (byte) 0x80, (byte) 0x80, (byte) 0x80, (byte) 0x80, (byte) 0x80, (byte) 0x80, (byte) 0x80, (byte) 0x80, (byte) 0x80, (byte) 0x80, (byte) 0x80, (byte) 0x80, (byte) 0x80, (byte) 0x80, (byte) 0x80, (byte) 0x80, (byte) 0x80, (byte) 0x80, (byte) 0x80, (byte) 0x80, (byte) 0x80, (byte) 0x80, (byte) 0x80, (byte) 0x80, (byte) 0x80, (byte) 0x80,
@Test public void testAllocConcatBuffer() { try (final InputStream in = new ByteArrayInputStream(new byte[] { (byte) 0x01, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte)
@Test public void testAllocNameCopyBuffer() { char[] buf = new char[64]; buf[0] = 'a'; buf[1] = 'b'; buf[2] = 'c'; buf[3] = 'd'; buf[4] = 'e'; buf[5] = 'f'; buf[6] = 'g'; buf[7] = 'h'; buf[8] = 'i'; IOContext ctx = new IOContext(br, null, true); ctx.setEncoding(JsonEncoding.UTF8); ctx.setResourceManaged(true); ctx.allocNameCopyBuffer(30); Assert.assertEquals(buf, ctx.allocNameCopyBuffer(3)); Assert.assertEquals(buf[6], ctx.allocNameCopyBuffer(7)); Assert.assertEquals(buf[7] + 'b', ctx.allocNameCopyBuffer(8)); Assert.assertEquals(buf[8] + 'c', ctx.allocNameCopyBuffer(9)); }
@Test public void testNameCopyBuffer() { try (final InputStream in = new ByteArrayInputStream(new byte[] { (byte) 0x80, (byte) 0x80, (byte) 0x80, (byte) 0x80, (byte) 0x80, (byte) 0x80, (byte) 0x80, (byte) 0x80, (byte) 0x80, (byte) 0x80, (byte) 0x80, (byte) 0x80, (byte) 0x80, (byte) 0x80, (byte) 0x80, (byte) 0x80, (byte) 0x80, (byte) 0x80, (byte) 0x80, (byte) 0x80, (byte) 0x80, (byte) 0x80, (byte) 0x80, (byte) 0x80, (byte) 0x80, (byte) 0x80, (byte) 0x80, (byte) 0x80, (byte) 0x80, (byte) 0x80, (byte) 0x80, (byte) 0x80, (byte) 0x80, (
@Test public void testNameCopyBuffer() { try (BufferedReader br = new BufferedReader(new InputStreamReader(new ByteArrayInputStream(_textBuffer.get(0)))))) { BufferRecycler bufRecycler = br.getBufferRecycler(); bufRecycler.allocCharBuffer(BufferRecycler.CharBufferType.NAME_COPY_BUFFER, 1); } }
@Test public void releaseReadIOBuffer() { byte[] buf = new byte[100]; _readIOBuffer.readBuffer = buf; _ioContext.releaseReadIOBuffer(buf); Assert.assertEquals(buf, _readIOBuffer); Assert.assertEquals(buf, _readIOBuffer); }
@Test public void releaseReadIOBuffer() { byte[] buf = new byte[50]; _readIOBuffer = new byte[50]; _ioContext.allocReadIOBuffer(buf); _ioContext.releaseReadIOBuffer(buf); assertEquals(buf, _readIOBuffer); assertEquals(buf.length, _ioContext.allocReadIOBuffer.length); assertEquals(buf.length, _ioContext.allocReadIOBuffer.length); assertEquals(buf.length, _ioContext.allocBase64Buffer.length); assertEquals(buf.length, _ioContext.allocTokenBuffer.length); assertEquals(buf.length, _ioContext.allocBase64Buffer.length); assertEquals(buf.length, _ioContext.allocTokenBuffer.length); assertEquals(buf.length, _ioContext.allocBase64Buffer.length); }
@Test public void testReleaseReadIOBuffer() { byte[] buf = new byte[] {0, 1, 2, 3, 4}; _readIOBuffer.readIOBuffer = buf; _ioContext.verifyRelease(buf, 1, 2); _readIOBuffer.releaseReadIOBuffer(buf); assertEquals(2, _ioContext.allocReadIOBuffer().length); assertEquals(2, _ioContext.allocBase64Buffer().length); assertEquals(2, _ioContext.allocTokenBuffer().length); assertEquals(2, _ioContext.allocConcatBuffer().length); assertEquals(2, _ioContext.releaseReadIOBuffer(buf)); assertEquals(2, _ioContext.allocBase64Buffer().length); assertEquals(2, _ioContext.allocTokenBuffer().length); assertEquals(2, _ioContext.allocBase64Buffer().length); assertEquals(2, _ioContext.allocConcatBuffer().length); assertEquals(2, _ioContext.releaseReadIOBuffer(buf)); assertEquals(2, _ioContext.releaseReadIOBuffer(buf)); assertEquals(2, _ioContext.allocBase64Buffer().length); assertEquals(2, _ioContext.allocTokenBuffer().length); assertEquals(2, _ioContext.releaseReadIOBuffer(buf)); assertEquals(2, _ioContext.allocBase64Buffer().length); assertEquals(2, _ioContext.
@Test public void releaseWriteEncodingBuffer() { byte[] buf = new byte[64]; _ioContext.releaseWriteEncodingBuffer(buf); Assert.assertEquals(buf, _writeEncodingBuffer); Assert.assertEquals(buf, _writeEncodingBuffer); Assert.assertEquals(buf, _writeEncodingBuffer); }
@Test public void testReleaseWriteEncodingBuffer() { byte[] buf = null; new IOContext(_recrecycler.allocWriteEncodingBuffer()).releaseWriteEncodingBuffer(buf); Assert.assertEquals(buf, _writeEncodingBuffer); Assert.assertEquals(buf, _writeEncodingBuffer); Assert.assertEquals(buf, _writeEncodingBuffer); _recycler.releaseWriteEncodingBuffer(buf); Assert.assertEquals(buf, _writeEncodingBuffer); Assert.assertEquals(buf, _writeEncodingBuffer); Assert.assertEquals(buf, _writeEncodingBuffer); }
@Test public void testReleaseWriteEncodingBuffer() { byte[] buf = null; _thrown.expect(IllegalStateException.class); _thrown.expectMessage("WriteEncodingBuffer is closed"); _ioContext.releaseWriteEncodingBuffer(buf); }
@Test public void releaseTokenBuffer() { new IOContext(_br, _sourceRef, true).releaseTokenBuffer(TOKEN_BUFFER); Assert.assertEquals(TOKEN_BUFFER, _br.allocTokenBuffer()); Assert.assertEquals(TOKEN_BUFFER, _br.allocCBuffer()); Assert.assertEquals(TOKEN_BUFFER, _br.allocTokenCBuffer()); }
@Test public void releaseTokenBuffer() { buf = new byte[20]; buf[0] = (byte) 'a'; buf[1] = (byte) 'b'; buf[2] = (byte) 'c'; buf[3] = (byte) 'd'; buf[4] = (byte) 'e'; _ioContext.releaseTokenBuffer(buf); assertEquals(buf, _ioContext.allocTokenBuffer()); assertEquals(buf[1], _ioContext.allocBase64Buffer()); assertEquals(buf[2], _ioContext.allocTokenCBuffer()); assertEquals(buf[3], _ioContext.allocTokenCBuffer()); assertEquals(buf[4], _ioContext.allocBase64Buffer()); assertEquals(buf[5], _ioContext.allocTokenCBuffer()); assertEquals(buf[6], _ioContext.allocTokenCBuffer()); assertEquals(buf[7], _ioContext.allocBase64Buffer()); assertEquals(buf[8], _ioContext.allocTokenCBuffer()); assertEquals(buf[9], _ioContext.allocBase64Buffer()); assertEquals(buf[10], _ioContext.allocBase64Buffer()); assertEquals(buf[11], _ioContext.allocBase64Buffer()); assertEquals(buf[12], _ioContext.allocBase64Buffer());
@Test public void releaseTokenBuffer() { char[] buf = new char[20]; _tokenCBuffer.read(buf); _tokenCBuffer.read(buf); _tokenCBuffer.releaseTokenBuffer(buf); assertEquals(buf, _tokenCBuffer.read()); assertEquals(buf, _tokenCBuffer.read()); }
@Test public void releaseConcatBuffer() { new IOContext(_recycler.allocWriteEncodingBuffer(), null, true).releaseConcatBuffer(new char[] { 'a', 'b' }); new IOContext(_recycler.allocBase64Buffer(), null, true).releaseConcatBuffer(new char[] { 'a', 'b' }); new IOContext(_recycler.allocWriteEncodingBuffer(), null, true).releaseConcatBuffer(new char[] { 'a', 'b' }); new IOContext(_recycler.allocBase64Buffer(), null, true).releaseConcatBuffer(new char[] { 'a', 'b' }); new IOContext(_recycler.allocBase64Buffer(), null, true).releaseConcatBuffer(new char[] { 'a', 'b' }); new IOContext(_recycler.allocBase64Buffer(), null, true).releaseConcatBuffer(new char[] { 'a', 'b' }); new IOContext(_recycler.allocBase64Buffer(), null, true).releaseConcatBuffer(new char[] { 'a', 'b' }); new IOContext(_recycler.allocBase64Buffer(), null, true).releaseConcatBuffer(new char[] { 'a', 'b
@Test public void releaseConcatBuffer() { new Expectations() { { _bufRecycler.releaseCharBuffer(BufferRecycler.CharBufferType.CONCAT_BUFFER, null); [LINE] } }; _ioContext.releaseConcatBuffer(new char[] { 'a', 'b' }); Assert.assertEquals(new char[] { 'a', 'b' }, _concatCBuffer); Assert.assertEquals(new char[] { 'a', 'b' }, _concatCBuffer); Assert.assertEquals(new char[] { 'a', 'b' }, _concatCBuffer); }
@Test public void testReleaseConcatBuffer() { char[] buf = new char[20]; _thrown.expect(IllegalStateException.class); _thrown.expectMessage("Unable to release concat buffer"); _ioContext.releaseConcatBuffer(buf); }
@Test public void releaseNameCopyBuffer() { char[] buf = new char[50]; _buf[0] = 'a'; _buf[1] = 'b'; _buf[2] = 'c'; _buf[3] = 'd'; _buf[4] = 'e'; _ioContext.releaseNameCopyBuffer(buf); Assert.assertEquals(buf[0], _buf[0]); Assert.assertEquals(buf[1], _buf[1]); Assert.assertEquals(buf[2], _buf[3]); _ioContext.releaseNameCopyBuffer(null); Assert.assertEquals(null, _buf[0]); Assert.assertEquals(buf[1], _buf[1]); Assert.assertEquals(buf[2], _buf[3]); _ioContext.releaseNameCopyBuffer(buf); Assert.assertEquals(null, _buf[0]); Assert.assertEquals(buf[1], _buf[1]); Assert.assertEquals(buf[2], _buf[3]); _ioContext.releaseNameCopyBuffer(buf); Assert.assertEquals(null, _buf[0]); Assert.assertEquals(buf[1], _buf[1]); Assert.assertEquals(buf[2], _buf[3]); _ioContext.releaseNameCopyBuffer(null); Assert.assertEquals(null, _buf[0]); Assert.assertEquals(buf[1], _buf[2]); Assert
@Test public void releaseNameCopyBuffer() { char[] buf = new char[50]; buf[0] = 'a'; buf[1] = 'b'; buf[2] = 'c'; buf[3] = 'd'; buf[4] = 'e'; buf[5] = 'f'; buf[6] = 'g'; buf[7] = 'h'; IOContext context = new IOContext(br, null, true); context.releaseNameCopyBuffer(buf); Assert.assertEquals(buf[0], context.allocReadIOBuffer()); Assert.assertEquals(buf[1], context.allocBase64Buffer()); Assert.assertEquals(buf[2], context.allocTokenBuffer()); Assert.assertEquals(buf[3], context.allocNameCopyBuffer()); context.releaseNameCopyBuffer(null); Assert.assertEquals(buf[3], context.allocNameCopyBuffer()); Assert.assertEquals(buf[4], context.allocCopyBuffer()); }
@Test public void releaseNameCopyBuffer() { char[] buf = new char[100]; _buf[0] = 'a'; _buf[1] = 'b'; _buf[2] = 'c'; _buf[3] = 'd'; _buf[4] = 'e'; _buf[5] = 'f'; _buf[6] = 'g'; _buf[7] = 'h'; _buf[8] = 'i'; _buf[9] = 'i'; _buf[11] = 'l'; _buf[12] = 'o'; _buf[14] = 'l'; _buf[15] = 'o'; _buf[16] = 'o'; _buf[24] = 'o'; _buf[24] = 'o'; _buf[24] = 'o'; _buf[24] = 'o'; _buf[24] = 'o'; _buf[24] = 'o'; _buf[24] = 'o'; _buf[24] = 'o'; _buf[24] = 'o'; _buf[24] = 'o'; _buf[24] = 'o'; _buf[24] = 'o'; _buf[24] = 'o';
@Test public void testVerifyAlloc() throws Exception { final IOContext context = new IOContext(br, null, true); context._verifyAlloc(new byte[]{1, 2, 3}); context._verifyAlloc(new byte[]{1, 2, 3}); context._verifyAlloc(new byte[]{1, 2, 3}); context._verifyAlloc(new byte[]{1, 2, 3}); context._verifyAlloc(null); context._assertAlloc(new byte[]{1, 2, 3}); context._assertAlloc(new byte[]{1, 2, 3}); context._assertAlloc(new byte[]{1, 2, 3}); context._assertAlloc(new byte[]{1, 2, 3}); context._assertAlloc(new byte[]{1, 2, 3}); context._assertAlloc(new byte[]{1, 2, 3}); context._assertAlloc(new byte[]{1, 2, 3}); context._assertAlloc(null); context._assertAlloc(new byte[]{1, 2, 3}); context._assertAlloc(null); context._assertAlloc(new byte[]{1, 2, 3}); context._assertAlloc(new byte[]{1, 2, 3}); context._assertAlloc(null); context._assertAlloc(new byte[]{1, 2, 3}); context._assertAlloc(new byte[]{1, 2, 3}); context._assertAlloc(new byte[]{1,
@Test public void testAllocXxx() { try { new IOContext(_br, null, true).allocXxxBuffer(); Assert.fail("allocXxx() method must fail"); } catch (IllegalStateException ex) { } try { new IOContext(_br, null, true).allocXxxBuffer(); Assert.fail("allocXxx() method must fail"); } catch (IllegalStateException ex) { } try { new IOContext(_br, null, true).allocXxxBuffer(); Assert.fail("allocXxx() method must fail"); } catch (IllegalStateException ex) { } try { new IOContext(_br, null, true).allocXxxBuffer(); Assert.fail("allocXxx() method must fail"); } catch (IllegalStateException ex) { } }
@Test public void testVerifyAllocXxx() { try { _verifyAlloc(null); fail("Expected IllegalStateException"); } catch (IllegalStateException e) { } try { _verifyAlloc(new byte[1]); fail("Expected IllegalStateException"); } catch (IllegalStateException e) { } try { _verifyAlloc(new byte[0]); fail("Expected IllegalStateException"); } catch (IllegalStateException e) { } try { _verifyAlloc(new byte[0]); fail("Expected IllegalStateException"); } catch (IllegalStateException e) { } try { _verifyAlloc(new byte[1]); fail("Expected IllegalStateException"); } catch (IllegalStateException e) { } try { _verifyAlloc(new byte[0]); fail("Expected IllegalStateException"); } catch (IllegalStateException e) { } }
@Test public void testVerifyRelease() { try { _verifyRelease(null, null); _verifyRelease(null, null); _verifyRelease(null, null); _verifyRelease(null, null); _verifyRelease(null, null); _verifyRelease(null, null); _verifyRelease(null, null); _verifyRelease(null, null); _verifyRelease(null, null); _verifyRelease(null, null); _verifyRelease(null, "foo"); _verifyRelease(null, "bar"); _verifyRelease(null, "baz"); _verifyRelease(null, "foo"); _verifyRelease(null, "bar"); _verifyRelease(null, "baz"); _verifyRelease(null, "bar"); _verifyRelease(null, "baz"); _verifyRelease(null, "bar"); _verifyRelease(null, "baz"); _verifyRelease(null, "bar"); _verifyRelease(null, "baz"); _verifyRelease(null, "bar"); _verifyRelease(null, "bar"); _verifyRelease(null, "bar"); _verifyRelease(null, "bar"); _verifyRelease(null, "bar"); _verifyRelease(null, "bar"); _verify
@Test public void testVerifyRelease() { try { new IOContext(_br, null, true).releaseReadIOBuffer(); new IOContext(_br, null, true).releaseWriteEncodingBuffer(); new IOContext(_br, null, true).releaseBase64Buffer(); new IOContext(_br, null, true).releaseTokenBuffer(); new IOContext(_br, null, true).releaseBase64Buffer(); new IOContext(_br, null, true).releaseTokenBuffer(); new IOContext(_br, null, true).releaseBase64Buffer(); new IOContext(_br, null, true).releaseBase64Buffer(); new IOContext(_br, null, true).releaseTokenBuffer(); new IOContext(_br, null, true).releaseBase64Buffer(); new IOContext(_br, null, true).releaseBase64Buffer(); new IOContext(_br, null, true).releaseBase64Buffer(); new IOContext(_br, null, true).releaseTokenBuffer(); new IOContext(_br, null, true).releaseBase64Buffer(); new IOContext(_br, null, true).releaseBase64Buffer(); new IOContext(_br, null, true).releaseBase64Buffer(); new IOContext(_br, null,
@Test public void testReleaseBuffer() { try { _verifyRelease(null, null); throw new IllegalArgumentException("Trying to release buffer not owned by the context"); } catch (IllegalArgumentException e) { } try { _verifyRelease(null, "foo"); throw new IllegalArgumentException("Trying to release buffer not owned by the context"); } catch (IllegalArgumentException e) { } try { _verifyRelease(null, "bar"); throw new IllegalArgumentException("Trying to release buffer not owned by the context"); } catch (IllegalArgumentException e) { } try { _verifyRelease(null, "foo", true); throw new IllegalArgumentException("Trying to release buffer not owned by the context"); } catch (IllegalArgumentException e) { } _verifyRelease(null, "bar", true); try { _verifyRelease(null, "foo", false); throw new IllegalArgumentException("Trying to release buffer not owned by the context"); } catch (IllegalArgumentException e) { } _verifyRelease(null, "foo", true); try { _verifyRelease(null, "bar", false); throw new IllegalArgumentException("Trying to release buffer not owned by the context"); } catch (IllegalArgumentException e) { } try { _
@Test public void test_findFormat() throws Exception { _detectors.add(new FormatFactory(new JsonFormat())); _detectors.add(new FormatFactory(new JsonFormat())); _detectors.add(new FormatFactory(new JsonFormat())); _detectors.add(new FormatFactory(new JsonFormat())); _findFormat(new InputAccessor.Std(new StringReader(""))); }
@Test public void readValueAsTree() throws Exception { try (JsonNode jsonNode = new JsonParser().parse("{\"a\":1,\"b\":2,\"c\":3}")) { JsonNode aNode = jsonNode.readValueAsTree(); Assert.assertEquals("1", aNode.get("a")); Assert.assertEquals("2", aNode.get("b")); Assert.assertEquals("c", aNode.get("c")); } }
@Test public void readValueAsTree() throws Exception { String json = "{\"a\":1,\"b\":2,\"c\":3}"; JsonNode jsonNode = mapper.readTree(json); assertEquals(jsonNode.get("a").asText(), "1"); assertEquals(jsonNode.get("b").asText(), "2"); assertEquals(jsonNode.get("c").asText(), "3"); jsonNode = mapper.readTree(json); assertEquals(jsonNode.get("a").asText(), "1"); assertEquals(jsonNode.get("b").asText(), "2"); assertEquals(jsonNode.get("c").asText(), "3"); assertEquals(jsonNode.get("c").asText(), "4"); jsonNode = mapper.readTree(json); assertEquals(jsonNode.get("a").asText(), "1"); assertEquals(jsonNode.get("b").asText(), "2"); assertEquals(jsonNode.get("c").asText(), "3"); assertEquals(jsonNode.get("c").asText(), "4"); }
@Test public void readValueAsTree() throws Exception { publ.readValueAsTree(); }
@Test public void readValueAsTree() throws Exception { JsonNode jsonNode = mapper.readTree("{\"test\":{\"value\":\"value\"}}"); Assert.assertEquals(Json.createObjectNode(jsonNode), test.readValueAsTree()); }
@Test public void testJsonGeneratorImpl() throws IOException { final String json = "{\"a\":1,\"b\":2,\"c\":3}"; JsonGenerator generator = Json.createGeneratorImpl(IOContext.of("\""), Json.Feature.ESCAPE_NON_ASCII, new JsonCodec()); generator.writeStringField("a", json); Assert.assertEquals(json, generator.next()); Assert.assertEquals(json, generator.next()); Assert.assertEquals(json, generator.next()); Assert.assertEquals(json, generator.next()); Assert.assertEquals(json, generator.next()); Assert.assertEquals(json, generator.next()); Assert.assertEquals(json, generator.next()); Assert.assertEquals(json, generator.next()); Assert.assertEquals(json, generator.next()); Assert.assertEquals(json, generator.next()); Assert.assertEquals(json, generator.next()); Assert.assertEquals(json, generator.next()); Assert.assertEquals(json, generator.next()); Assert.assertEquals(json, generator.next()); Assert.assertEquals(json, generator.next()); Assert.assertEquals(json, generator.next()); Assert.assertEquals(json,
@Test public void testJsonGeneratorImpl() throws IOException { JsonGeneratorImpl f = new JsonGeneratorImpl(null, LINE_SEP, null); f.setHighestNonEscapedChar(127); f.writeStringField("field", "value"); f.writeStringField("field2", "value2"); f.writeStringField("field3", "value3"); f.writeStringField("field4", "value4"); f.writeStringField("field5", "value5"); f.writeStringField("field6", "value6"); f.writeStringField("field7", "value7"); f.writeStringField("field8", "value8"); f.writeStringField("field9", "value9"); f.writeStringField("field10", "value10"); f.writeStringField("field11", "value11"); f.writeStringField("field12", "value12"); f.writeStringField("field13", "value13"); f.writeStringField("field14", "value14"); f.writeStringField("field15", "value15"); f.writeStringField("field16", "value16"); f.writeStringField("field17", "value17");
@Test public void testJsonGeneratorImpl() throws IOException { final JsonGenerator generator = Json.createGeneratorImpl(IOContext.ofDefault(), Feature.ESCAPE_NON_ASCII, ObjectCodec.getDefault()); assertTrue(generator.isEnabled(Feature.ESCAPE_NON_ASCII)); assertTrue(generator.getHighestEscapedChar() == 127); generator.writeStringField("field", "value"); assertTrue(generator.isEnabled(Feature.ESCAPE_NON_ASCII)); assertTrue(generator.getHighestEscapedChar() == 126); }
@Test public void testJsonGeneratorImpl() throws IOException { JsonGenerator generator = Json.createGenerator(); generator.setCharacterEscapes(CharacterEscapes.ESCAPE_NON_ASCII); generator.writeStringField("field", "value"); Assert.assertEquals("value", generator.readString()); Assert.assertEquals("\"value\"", generator.readString()); Assert.assertEquals("\"value\"", generator.readString()); Assert.assertEquals("\"value\"", generator.readString()); Assert.assertEquals("\"value\"", generator.readString()); Assert.assertEquals("\"value\"", generator.readString()); Assert.assertEquals("\"value\"", generator.readString()); Assert.assertEquals("\"value\"", generator.readString()); Assert.assertEquals("\"\"value\"", generator.readString()); Assert.assertEquals("\"\"value\"", generator.readString()); Assert.assertEquals("\"\"value\"", generator.readString()); Assert.assertEquals("\"\"value\"", generator.readString()); Assert.assertEquals("\"\"value\"", generator.readString()); Assert.assertEquals("\"\"value\"", generator.readString()); Assert.assertEquals("
@Test public void testVersion() throws IOException { Version version = Json.version(); assertTrue(version.isSupportedVersion("1.9")); }
@Test public void testVersion() throws IOException { Assert.assertEquals("1.7.0", VersionUtil.versionFor(JsonGeneratorImpl.class)); Assert.assertEquals("1.7.0", VersionUtil.versionFor(JsonGeneratorImpl.class)); Assert.assertEquals("1.7.0", VersionUtil.versionFor(VersionUtil.versionFor(VersionUtil.versionFor(Version.class)))); }
@Test public void testResetWithShared() { final String testString = "Hello World"; final char[] buffer = testString.toCharArray(); final int len = testString.length(); new TextBuffer(allocator).resetWithShared(buffer, 0, len); Assert.assertEquals(buffer.length(), len); Assert.assertEquals(buffer, testString); Assert.assertEquals(buffer, null); }
@Test public void testResetWithShared() { final char[] buffer = new char[20]; buffer[0] = '\n'; buffer[1] = '\r'; buffer[2] = '\n'; buffer[3] = '\r'; buffer[4] = '\r'; buffer[5] = '\r'; buffer[6] = '\n'; buffer[7] = '\r'; buffer[8] = '\r'; buffer[9] = '\r'; buffer[0] = '\n'; buffer[0] = '\r'; buffer[0] = '\n'; buffer[0] = '\r'; buffer[0] = '\n'; buffer[0] = '\r'; buffer[0] = '\n'; buffer[0] = '\r'; buffer[0] = '\n'; buffer[0] = '\r'; buffer[0] = '\n'; buffer[0] = '\r'; buffer[0] = '\n'; buffer[0] = '\r'; buffer[0] = '\n'; buffer[0] = '\r'; buffer[0] = '\n'; buffer[0] = '\r'; buffer[0] = '\n'; buffer[0] = '\r'; buffer[0] = '\r'; buffer[0] = '\r'; buffer[0] = '\r'; buffer[0] = '\r'; buffer[0]
@Test public void testResetWithShared() { char[] buffer = new char[20]; buffer[0] = 'a'; buffer[1] = 'b'; buffer[2] = 'c'; buffer[3] = 'd'; buffer[4] = 'e'; buffer[5] = 'f'; buffer[6] = 'g'; buffer[7] = 'h'; buffer[8] = 'i'; buffer[9] = 'i'; buffer[0] = 'a'; buffer[0] = 'b'; buffer[0] = 'c'; buffer[0] = 'd'; buffer[0] = 'e'; buffer[0] = 'g'; buffer[0] = 'i'; buffer[0] = 'a'; buffer[0] = 'b'; buffer[0] = 'c'; buffer[0] = 'd'; buffer[0] = 'e'; buffer[0] = 'g'; buffer[0] = 'i'; buffer[0] = 'a'; buffer[0] = 'b'; buffer[0] = 'c'; buffer[0] = 'd'; buffer[0] = 'e'; buffer[0] = 'i'; buffer[0] = 'a'; buffer[0] = 'b'; buffer[0] = 'c'; buffer[0] = 'd'; buffer[0] =
@Test public void testResetWithShared() { char[] buffer = new char[20]; buffer[0] = 'a'; buffer[1] = 'b'; buffer[2] = 'c'; buffer[3] = 'd'; buffer[4] = 'e'; buffer[5] = 'f'; buffer[6] = 'g'; buffer[7] = 'h'; buffer[8] = 'i'; buffer[9] = 'i'; buffer[0] = 'a'; buffer[0] = 'b'; buffer[0] = 'c'; buffer[0] = 'd'; buffer[0] = 'e'; buffer[0] = 'g'; buffer[0] = 'i'; buffer[0] = 'i'; buffer[0] = 'g'; buffer[0] = 'i'; buffer[0] = 'o'; buffer[0] = 'o'; buffer[0] = 'o'; buffer[0] = 'o'; buffer[0] = 'o'; buffer[0] = 'o'; buffer[0] = 'o'; buffer[0] = 'o'; buffer[0] = 'o'; buffer[0] = 'o'; buffer[0] = 'o'; buffer[0] = 'o'; buffer[0] = 'o'; buffer[0] = 'o'; buffer[0] =
@Test public void testResetWithShared() { char[] buffer = new char[20]; buffer[0] = 'a'; buffer[1] = 'b'; buffer[2] = 'c'; buffer[3] = 'd'; buffer[4] = 'e'; buffer[5] = 'f'; buffer[6] = 'g'; buffer[7] = 'h'; buffer[8] = 'i'; buffer[9] = 'i'; buffer[0] = 'a'; buffer[0] = 'b'; buffer[0] = 'c'; buffer[0] = 'd'; buffer[0] = 'e'; buffer[0] = 'g'; buffer[0] = 'i'; buffer[0] = 'a'; buffer[0] = 'b'; buffer[0] = 'c'; buffer[0] = 'd'; buffer[0] = 'e'; buffer[0] = 'g'; buffer[0] = 'i'; buffer[0] = 'a'; buffer[0] = 'b'; buffer[0] = 'c'; buffer[0] = 'd'; buffer[0] = 'e'; buffer[0] = 'i'; buffer[0] = 'a'; buffer[0] = 'b'; buffer[0] = 'c'; buffer[0] = 'd'; buffer[0] =
@Test public void testResetWithShared() { char[] buffer = new char[20]; buffer[0] = 'a'; buffer[1] = 'b'; buffer[2] = 'c'; buffer[3] = 'd'; buffer[4] = 'e'; buffer[5] = 'f'; buffer[6] = 'g'; buffer[7] = 'h'; buffer[8] = 'i'; buffer[9] = 'i'; buffer[0] = 'a'; buffer[0] = 'b'; buffer[0] = 'c'; buffer[0] = 'd'; buffer[0] = 'e'; buffer[0] = 'g'; buffer[0] = 'i'; buffer[0] = 'a'; buffer[0] = 'b'; buffer[0] = 'c'; buffer[0] = 'd'; buffer[0] = 'e'; buffer[0] = 'g'; buffer[0] = 'i'; buffer[0] = 'a'; buffer[0] = 'b'; buffer[0] = 'c'; buffer[0] = 'd'; buffer[0] = 'e'; buffer[0] = 'i'; buffer[0] = 'a'; buffer[0] = 'b'; buffer[0] = 'c'; buffer[0] = 'd'; buffer[0] =
@Test public void testResetWithShared() { char[] buffer = new char[20]; buffer[0] = 'a'; buffer[1] = 'b'; buffer[2] = 'c'; buffer[3] = 'd'; buffer[4] = 'e'; buffer[5] = 'f'; buffer[6] = 'g'; buffer[7] = 'h'; buffer[8] = 'i'; buffer[9] = 'i'; buffer[0] = 'a'; buffer[0] = 'b'; buffer[0] = 'c'; buffer[0] = 'd'; buffer[0] = 'e'; buffer[0] = 'f'; buffer[0] = 'g'; buffer[0] = 'i'; buffer[0] = 'g'; buffer[0] = 'h'; buffer[0] = 'i'; buffer[0] = 'i'; buffer[0] = 'o'; buffer[0] = 'o'; buffer[0] = 'o'; buffer[0] = 'o'; buffer[0] = 'o'; buffer[0] = 'o'; buffer[0] = 'o'; buffer[0] = 'o'; buffer[0] = 'o'; buffer[0] = 'o'; buffer[0] = 'o'; buffer[0] = 'o'; buffer[0] =
@Test public void testResetWithShared() { char[] buffer = new char[20]; buffer[0] = 'a'; buffer[1] = 'b'; buffer[2] = 'c'; buffer[3] = 'd'; buffer[4] = 'e'; buffer[5] = 'f'; buffer[6] = 'g'; buffer[7] = 'h'; buffer[8] = 'i'; buffer[9] = 'i'; buffer[0] = 'a'; buffer[0] = 'b'; buffer[0] = 'c'; buffer[0] = 'd'; buffer[0] = 'e'; buffer[0] = 'f'; buffer[0] = 'g'; buffer[0] = 'i'; buffer[0] = 'g'; buffer[0] = 'h'; buffer[0] = 'i'; buffer[0] = 'i'; buffer[0] = 'o'; buffer[0] = 'o'; buffer[0] = 'o'; buffer[0] = 'o'; buffer[0] = 'o'; buffer[0] = 'o'; buffer[0] = 'o'; buffer[0] = 'o'; buffer[0] = 'o'; buffer[0] = 'o'; buffer[0] = 'o'; buffer[0] = 'o'; buffer[0] =
@Test public void testResetWithCopy() { final String testString = "Hello World"; final char[] buffer = testString.toCharArray(); final int start = testString.indexOf("Hello"); final int len = testString.length(); final TextBuffer textBuffer = new TextBuffer(allocator); textBuffer.resetWithCopy(buffer, start, len); Assert.assertEquals(buffer.length(), start + len); Assert.assertEquals(buffer.length(), len); Assert.assertEquals(buffer.length(), start + len); Assert.assertEquals(buffer.length(), len); Assert.assertEquals(buffer.substring(start, len), testString.substring(start, len)); textBuffer.resetWithCopy(buffer, start, len); Assert.assertEquals(buffer.length(), len); Assert.assertEquals(buffer.length(), len); Assert.assertEquals(buffer.substring(start, len), testString.substring(start, len)); Assert.assertEquals(buffer.length(), len); Assert.assertEquals(buffer.length(), 0); textBuffer.resetWithCopy(buffer, start, len); Assert.assertEquals(buffer.length(), len); Assert.assertEquals(buffer.length(), len); Assert.
@Test public void testResetWithCopy() { char[] input = new char[100]; _textBuffer.resetWithCopy(input, 0, input.length); Assert.assertEquals(input, _textBuffer.getTextBuffer()); Assert.assertEquals(input.length, _textBuffer.size()); Assert.assertEquals(input, _textBuffer.buffer()); Assert.assertEquals(input, _textBuffer.buffer()); Assert.assertEquals(input.length, _textBuffer.size()); }
@Test public void testResetWithCopy() { char[] input = new char[100]; _textBuffer.resetWithCopy(input, 0, input.length); Assert.assertEquals(input, new String(input)); }
@Test public void testResetWithCopy() { char[] input = new char[100]; int start = 0; int len = 100; TextBuffer textBuffer = new TextBuffer(allocator); textBuffer.resetWithCopy(input, start, len); Assert.assertEquals(buf.length(), input.length); Assert.assertEquals(buf, textBuffer.buffer()); Assert.assertEquals(buf.length(), textBuffer.size()); Assert.assertEquals(buf, textBuffer.buffer()); Assert.assertEquals(buf.length(), textBuffer.size()); Assert.assertEquals(buf, textBuffer.buffer()); Assert.assertEquals(buf.length(), textBuffer.size()); }
@Test public void testResetWithCopy() { final int SEGMENT_SIZE = 10; final int SEGMENT_START = -1; final int SEGMENT_END = -1; final char[] inputBuffer = new char[SEGMENT_SIZE]; final int SEGMENT_START_LEN = 10; final int SEGMENT_END_LEN = 10; final TextBuffer textBuffer = new TextBuffer(allocator); textBuffer.resetWithCopy(inputBuffer, SEGMENT_START_LEN, SEGMENT_END_LEN); Assert.assertEquals(SEGMENT_START_LEN, textBuffer.size()); Assert.assertEquals(SEGMENT_END_LEN, textBuffer.getTextOffset()); Assert.assertEquals(SEGMENT_START_LEN, textBuffer.length()); Assert.assertEquals(SEGMENT_END_LEN, textBuffer.length()); textBuffer.resetWithCopy(inputBuffer, SEGMENT_START_LEN, SEGMENT_END_LEN); Assert.assertEquals(SEGMENT_START_LEN, textBuffer.size()); Assert.assertEquals(SEGMENT_END_LEN, textBuffer.length()); Assert.assertEquals(SEGMENT_START_LEN, textBuffer.length()); Assert.assertEquals(SE
@Test public void testResetWithCopy() { final char[] buffer = new char[SIZE]; buffer[0] = 'a'; buffer[1] = 'b'; buffer[2] = 'c'; buffer[3] = 'd'; buffer[4] = 'e'; buffer[5] = 'f'; buffer[6] = 'g'; buffer[7] = 'h'; buffer[8] = 'i'; buffer[9] = 'i'; buffer.resetWithCopy(buffer, 0, buffer.length); Assert.assertEquals(buffer, buffer[0]); Assert.assertEquals(buffer, buffer[1]); Assert.assertEquals(buffer, buffer[2]); Assert.assertEquals(buffer, buffer[3]); Assert.assertEquals(buffer, buffer[4]); Assert.assertEquals(buffer, buffer[5]); Assert.assertEquals(buffer, buffer[6]); Assert.assertEquals(buffer, buffer[7]); buffer.resetWithCopy(buffer, 0, buffer.length); Assert.assertEquals(buffer, buffer[0]); Assert.assertEquals(buffer, buffer[1]); Assert.assertEquals(buffer, buffer[2]); Assert.assertEquals(buffer, buffer[3]); Assert.assertEquals(buffer, buffer[4]); Assert.assertEquals(buffer, buffer[6]); Assert.assertEquals(buffer, buffer
@Test public void testResetWithCopy() { char[] input = new char[32]; input[0] = 'a'; input[1] = 'b'; input[2] = 'c'; buffer.resetWithCopy(input, 0, input.length); Assert.assertEquals(buffer.length, 2); Assert.assertEquals(buffer.length, 2); Assert.assertEquals(buffer.substring(input.length - 1), input[0]); Assert.assertEquals(buffer.substring(input.length - 1), input[1]); Assert.assertEquals(buffer.substring(input.length - 1), input[2]); Assert.assertEquals(buffer.substring(input.length - 1), input[3]); Assert.assertEquals(buffer.substring(input.length - 1), input[0]); Assert.assertEquals(buffer.substring(input.length - 1), input[1]); Assert.assertEquals(buffer.substring(input.length - 1), input[2]); Assert.assertEquals(buffer.substring(input.length - 1), input[3]); }
@Test public void testResetWithCopy() { final TextBuffer textBuffer = new TextBuffer(allocator); final char[] inputBuffer = new char[TEXT_BUFFER_SIZE]; textBuffer.append(new String(inputBuffer)); textBuffer.resetWithCopy(inputBuffer, 0, TEXT_BUFFER_SIZE); Assert.assertEquals(TEXT_BUFFER_SIZE, textBuffer.size()); Assert.assertEquals(TEXT_BUFFER_SIZE, textBuffer.getSegmentSize()); Assert.assertEquals(inputBuffer, textBuffer.buffer()); textBuffer.resetWithCopy(inputBuffer, 0, TEXT_BUFFER_SIZE); Assert.assertEquals(TEXT_BUFFER_SIZE, textBuffer.size()); Assert.assertEquals(inputBuffer, textBuffer.buffer()); Assert.assertEquals(TEXT_BUFFER_SIZE, textBuffer.getSegmentSize()); Assert.assertEquals(inputBuffer, textBuffer.buffer()); textBuffer.resetWithCopy(inputBuffer, 0, TEXT_BUFFER_SIZE); Assert.assertEquals(TEXT_BUFFER_SIZE, textBuffer.size()); Assert.assertEquals(TEXT_BUFFER_SIZE, textBuffer.getSegmentSize()); Assert.assertEquals(inputBuffer, textBuffer.buffer()); Assert
@Test public void testResetWithCopy() { final char[] buffer = new char[100]; buffer[0] = 'a'; buffer[1] = 'b'; buffer[2] = 'c'; buffer[3] = 'd'; buffer[4] = 'e'; buffer[5] = 'f'; buffer[6] = 'g'; buffer[7] = 'h'; buffer[8] = 'i'; buffer[9] = 'i'; buffer.resetWithCopy(buffer, 0, buffer.length); assertEquals(buffer[0], buffer[1]); assertEquals(buffer[2], buffer[0]); assertEquals(buffer[3], buffer[3]); assertEquals(buffer[4], buffer[4]); assertEquals(buffer[6], buffer[6]); assertEquals(buffer[7], buffer[8]); assertEquals(buffer[9] == null); buffer.resetWithCopy(buffer, 0, buffer.length); assertEquals(buffer[0], buffer[0]); assertEquals(buffer[1], buffer[1]); assertEquals(buffer[2], buffer[2]); assertEquals(buffer[3], buffer[4]); assertEquals(buffer[6], buffer[7]); assertEquals(buffer[8], buffer[9]); assertEquals(buffer[9] == null); buffer.resetWithCopy(buffer, 0, buffer.length); assertEquals(buffer[0], buffer[0]); assertEquals(buffer[1], buffer[1]); assertEquals(buffer[2], buffer[2]); assertEquals(buffer[3],
@Test public void testResetWithCopy() { final String testString = "abc"; final String testString2 = "defghi"; final String testString3 = "ghi"; final String testString4 = "abcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdef,abcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdef,abcdefghijabcdefghijabcdefghijabcdef,abcdefghijabcdef,abcdefghijabcdef,defdefghijabcdef,def))); final String testString1 = "abcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdef,abcdefghijabcdef,abcdefghijabcdef,abcdefghijabcdef,abcdefghijabcdef,abcdefghijabcdef,abcdefghijabcdef,def,")); final String testString2 = "abcdefghijabcdefghijabcdefghijabcdefghijabcdef
@Test public void testResetWithCopy() { final int SEGMENT_SIZE = 10; final int SEGMENT_START = 0x01; final int SEGMENT_END = 0x02; final int SEGMENT_SIZE2 = 10; final int SEGMENT_START2 = 0x03; final int SEGMENT_END2 = 0x04; final int SEGMENT_START3 = 0x05; final int SEGMENT_END3 = 0x06; final int SEGMENT_START4 = 0x07; final int SEGMENT_END4 = 0x08; final int SEGMENT_START5 = 0x09; final int SEGMENT_END5 = 0x10; final int SEGMENT_START6 = 0x08; final int SEGMENT_END6 = 0x09; final int SEGMENT_START7 = 0x06; final int SEGMENT_START8 = 0x08; final int SEGMENT_END7 = 0x09; final int SEGMENT_START9 = 0x06; final int SEGMENT_END8 = 0x07; final int SEGMENT_START10 = 0x08; final int SEGMENT_END9 = 0x09; final int
@Test public void testClearSegments() { clearSegments(); assertEquals(0, buffer.size()); buffer.append("abc"); assertEquals(1, buffer.size()); buffer.append("def"); assertEquals(2, buffer.size()); buffer.append("ghi"); assertEquals(3, buffer.size()); buffer.clearSegments(); assertEquals(0, buffer.size()); buffer.append("abc"); assertEquals(2, buffer.size()); buffer.clearSegments(); assertEquals(0, buffer.size()); buffer.append("def"); assertEquals(3, buffer.size()); buffer.append("ghi"); assertEquals(4, buffer.size()); buffer.clearSegments(); assertEquals(0, buffer.size()); buffer.append("ghi"); assertEquals(3, buffer.size()); buffer.clearSegments(); assertEquals(0, buffer.size()); buffer.append("def"); assertEquals(2, buffer.size()); buffer.clearSegments(); assertEquals(0, buffer.size()); buffer.append("ghi"); assertEquals(2, buffer.size()); buffer.clearSegments(); assertEquals(0, buffer.size()); buffer.append("def"); assertEquals(2, buffer.size()); buffer.clearSegments(); assertEquals(0, buffer.size()); buffer.append("ghi"); assertEquals(2, buffer.size()); buffer.clearSegments(); assertEquals(0, buffer.size()); buffer.append("ghi"); assertEquals(2, buffer.size
@Test public void testClearSegments() { clearSegments(); assertEquals(0, buffer.size()); buffer.append("abc"); assertEquals(1, buffer.size()); buffer.append("def"); assertEquals(1, buffer.size()); buffer.append("ghi"); assertEquals(1, buffer.size()); buffer.append("ghi"); assertEquals(1, buffer.size()); buffer.releaseBuffers(); }
@Test public void testClearSegments() { _textBuffer.append("abc"); _textBuffer.append("def"); _textBuffer.append("ghi"); _textBuffer.append("ijklmnopqrstuvwxyz"); _textBuffer.append("mnopqrstuvwxyz"); _textBuffer.append("ijklmnopqrstuvwxyz"); _textBuffer.append("mnopqrstuvwxyz"); _textBuffer.append("ijklmnopqrstuvwxyz"); _textBuffer.append("mnopqrstuvwxyz"); _textBuffer.append("ijklmnopqrstuvwxyz"); _textBuffer.append("mnopqrstuvwxyz"); _textBuffer.append("ijklmnopqrstuvwxyz"); _textBuffer.append("mnopqrstuvwxyz"); _textBuffer.append("ijklmnopqrstuvwxyz"); _textBuffer.append("mnopqrstuvwxyz"); _textBuffer.append("ijklmnopqrstuvwxyz"); _textBuffer.append("ijklmnopqrstuvwxyz"); _textBuffer.append("ijklmnopqrstuvwxyz"); _textBuffer.append("ijklmnopqrstuvwxyz"); _textBuffer.append("ijklmnopqrstuvwxyz"); _textBuffer.append("ijklmnopqrstuvwxyz"); _textBuffer.append("ijklmnopqrstuvwxyz"); _textBuffer.append("ijklmnopqrstuvwxyz"); _textBuffer.append("ijklmnopqrstuvwxyz"); _text
@Test public void testClearSegments() { buffer.append("abc"); buffer.append("def"); buffer.append("ghi"); buffer.append("klm"); buffer.append("mno"); buffer.append("lala"); buffer.append("hi"); buffer.append("hi"); buffer.append("klm"); buffer.append("hi"); buffer.append("hi"); buffer.releaseBuffers(); }
@Test public void getTextBuffer() { String text = "hello world"; TextBuffer textBuffer = new TextBuffer(allocator); textBuffer.resetWithEmpty(); textBuffer.resetWithCopy(buf, 0, text.length()); textBuffer.resetWithString(text); char[] textBufferArray = textBuffer.getTextBuffer(); assertEquals(textBufferArray, new String(textBufferArray)); textBuffer.releaseBuffers(); textBuffer.resetWithEmpty(); textBuffer.releaseBuffers(); textBuffer.resetWithCopy(buf, 0, text.length()); textBuffer.resetWithString(text); textBufferArray = textBuffer.getTextBuffer(); assertEquals(textBufferArray, new String(textBufferArray)); }
@Test public void testContentsAsString() { String result = new StringBuilder(_resultString).append(_resultString).append(_resultString).append(_resultString).append(_resultString).append(_resultString).append(_resultString).append(_resultString).append(_resultString).append(_resultString).append(_resultString).append(_resultString).append(_resultString).append(_resultString).append(_resultString).append(_resultString).append(_resultString).append(_resultString).append(_resultString).append(_resultString).append(_resultString).append(_resultString).append(_resultString).append(_resultString).append(_resultString).append(_resultString).append(_resultString).append(_resultString).append(_resultString).append(_resultString).append(_resultString).append(_resultString).append(_resultString).toString(); }
@Test public void testContentsAsString() { String result = new StringBuilder(_resultString).append(_resultString).append(_resultString).append(_resultString).append(_resultString).append(_resultString).append(_resultString).append(_resultString).append(_resultString).append(_resultString).append(_resultString).append(_resultString).append(_resultString).append(_resultString).append(_resultString).append(_resultString).append(_resultString).append(_resultString).append(_resultString).append(_resultString).append(_resultString).append(_resultString).append(_resultString).append(_resultString).append(_resultString).append(_resultString).append(_resultString).append(_resultString).append(_resultString).append(_resultString).append(_resultString).append(_resultString).toString(); }
@Test public void testContentsAsString() { String result = null; result = testString.contentsAsString(); assertEquals("", result); result = testString.contentsAsString(); assertEquals("", result); result = testString.contentsAsString(); assertEquals("", result); result = testString.contentsAsString(); assertEquals("", result); result = testString.contentsAsString(); assertEquals("", result); result = testString.contentsAsString(); assertEquals("", result); result = testString.contentsAsString(); assertEquals("", result); result = testString.contentsAsString(); assertEquals("", result); result = testString.contentsAsString(); assertEquals("", result); result = testString.contentsAsString(); assertEquals("", result); result = testString.contentsAsString(); assertEquals("", result); }
@Test public void testContentsAsString() { String result = new StringBuilder(_result).append(_currentSegment).append(_result).append(_currentSegment).append(_currentSegment).append(_result).toString(); assertEquals(result, new String(_result, 0, _currentSegment.length())); }
@Test public void testContentsAsString() { String result = new StringBuilder(_resultString).append(_resultString).append(_resultString).append(_resultString).append(_resultString).append(_resultString).append(_resultString).append(_resultString).append(_resultString).append(_resultString).append(_resultString).append(_resultString).append(_resultString).append(_resultString).append(_resultString).append(_resultString).append(_resultString).append(_resultString).append(_resultString).append(_resultString).append(_resultString).append(_resultString).append(_resultString).append(_resultString).append(_resultString).append(_resultString).append(_resultString).append(_resultString).append(_resultString).append(_resultString).append(_resultString).append(_resultString).toString(); Assert.assertEquals(result, result.substring(0, _resultString.length() - 1)); }
@Test public void testContentsAsString() { String result = new StringBuilder(_resultString).append(_resultString).append(_resultString).append(_resultString).append(_resultString).append(_resultString).append(_resultString).append(_resultString).append(_resultString).append(_resultString).append(_resultString).append(_resultString).append(_resultString).append(_resultString).append(_resultString).append(_resultString).append(_resultString).append(_resultString).append(_resultString).append(_resultString).append(_resultString).append(_resultString).append(_resultString).append(_resultString).append(_resultString).append(_resultString).append(_resultString).append(_resultString).append(_resultString).toString(); assertEquals(_resultString, result.substring(0, _resultString.length() - 1)); }
@Test public void testContentsAsString() { String result = new StringBuilder(_inputBuffer).append("foo").append("bar").append("baz").append("qux").append("qux").append("qux").append("qux").append("qux").append("qux").append("qux").append("qux").toString(); assertEquals(result, new String(_inputBuffer, 0, _inputBuffer.length())); result = new StringBuilder(_inputBuffer).append("foo").append("bar").append("qux").append("qux").append("qux").append("qux").append("qux").toString(); assertEquals(result, new String(_inputBuffer, 0, _inputBuffer.length())); result = new StringBuilder(_inputBuffer).append("foo").append("bar").append("qux").append("qux").append("qux").append("qux").toString(); assertEquals(result, new String(_inputBuffer, 0, _inputBuffer.length())); result = new StringBuilder(_inputBuffer).append("foo").append("bar").append("qux").append("qux").append("qux").append("qux").append("qux").append("qux").toString(); assertEquals(result
@Test public void testContentsAsString() { String result = null; String[] expectedResult = new String[] { "Hello", "World" }; for (String s : expectedResult) { result = s.replace(s, ""); } assertEquals("Hello World", result); result = null; expectedResult = new String[] { "Hello", "World" }; for (String s : expectedResult) { result = s.replace(s, ""); } assertEquals("Hello World", result); result = null; expectedResult = new String[] { "Hello", "World" }; for (String s : expectedResult) { result = s.replace(s, ""); } assertEquals("Hello World", result); result = null; expectedResult = new String[] { "Hello", "World" }; for (String s : expectedResult) { result = s.replace(s, ""); } assertEquals("Hello World", result); result = null; expectedResult = new String[] { "Hello", "World" }; for (String s : expectedResult) { result = s.replace(s, ""); } assertEquals("Hello World", result); result = null; expectedResult = new String[] { "Hello", "World" }; for (String s : expectedResult) { result = s.replace(s,
@Test public void testContentsAsString() { String result = null; try { result = new StringBuilder(MAX_INPUT_SIZE).append(MAX_INPUT_SIZE).append(MAX_INPUT_SIZE).append(MAX_INPUT_SIZE).toString(); } catch (Exception e) { fail("Failed to read input string: " + e); } assertEquals(result, new String(result, 0, MAX_INPUT_SIZE).substring(MAX_INPUT_SIZE.length() - 1)); }
@Test public void testContentsAsString() { String result = new String(_inputBuffer, 0, _inputBuffer.length); assertEquals(result, new String(_result, 0, _inputBuffer.length)); }
@Test public void testContentsAsString() { String result = new StringBuilder().append("a").append("b").append("c").append("d").append("e").append("f").append("g").append("h").append("i").toString(); assertEquals(result, new String(result, 0, result.length())); }
@Test public void testContentsAsString() { String result = new StringBuilder().append(_inputBuffer, 0, 4).append(_inputBuffer, 0, 4).append(_inputBuffer, 0, 4).append(_inputBuffer, 0, 4).append(_inputBuffer, 0, 3).append(_inputBuffer, 0, 4).append(_inputBuffer, 0, 3).append(_inputBuffer, 0, 4).append(_inputBuffer, 0, 5).append(_inputBuffer, 0, 6).append(_inputBuffer, 0, 6).append(_inputBuffer, 0, 6).append(_inputBuffer, 0, 4).append(_inputBuffer, 0, 6).append(_inputBuffer, 0, 6).append(_inputBuffer, 0, 4).append(_inputBuffer, 0, 6).append(_inputBuffer, 0, 4).append(_inputBuffer, 0, 6).append(_inputBuffer, 0, 4).append(_inputBuffer, 0, 6).append(_inputBuffer, 0, 4).append(_inputBuffer, 0, 6).append(_inputBuffer, 0, 4).append(_inputBuffer, 0, 6).append(_inputBuffer, 0, 4).append(_inputBuffer, 0, 6).append(_inputBuffer, 0, 7).append(_inputBuffer, 0, 6).append(_inputBuffer, 0, 6)
@Test public void testContentsAsString() { String result = new StringBuilder().append("a").append("b").append("c").append("d").append("e").append("f").append("g").append("h").append("i").toString(); assertEquals(result, new String(result, 0, result.length())); }
@Test public void testAppend() { new TextBuffer(allocator).append(new char[] { 'a', 'b', 'c' }, 0, 2); new TextBuffer(allocator).append(new char[] { 'a', 'b', 'c' }, 0, 2); new TextBuffer(allocator).append(new char[] { 'a', 'b', 'c' }, 0, 2); new TextBuffer(allocator).append(new char[] { 'a', 'b', 'c' }, 0, 2); new TextBuffer(allocator).append(new char[] { 'a', 'b', 'c' }, 0, 2); new TextBuffer(allocator).append(new char[] { 'a', 'b', 'c' }, 0, 2); new TextBuffer(allocator).append(new char[] { 'a', 'b', 'c' }, 0, 2); new TextBuffer(allocator).append(new char[] { 'a', 'b', 'c' }, 0, 2); new TextBuffer(allocator).append(new char[] { 'a', 'b', 'c' }, 0, 2); new TextBuffer(allocator).append(new char[] { 'a', 'b', 'c'
@Test public void testAppend() { String str = new String(new char[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 }); assertEquals(str, "a,b,c,d,e,f,g,h,i,j,k,l,k,l,k,e,l,k,e,l,k,e,l,k,e,l,k,e,l,k,e,l,k,e,l,k,e,l,k,e,l,k,e,l,k,e,l,k,e,l,k,e,l,k,e,l,k,e,l,k,e,l,k,e,l,k,e,l,k,e,l,k,e,l,k,e,l,k,e,l,k,e,l,k,e,l,k,e,l,k,e,l,k,e,l,k,e,l,k,e,l,k,e,l,k,e,l,k,e,l,k
@Test public void testAppend() { StringBuffer buffer = new StringBuffer(allocator); buffer.append("abc"); buffer.append("def"); buffer.append("ghi"); buffer.append("hi"); buffer.append("hi"); buffer.append("hi"); assertEquals("abc", buffer.toString()); assertEquals("hi", buffer.toString()); assertEquals("hi", buffer.toString()); assertEquals("hi", buffer.toString()); assertEquals("hi", buffer.toString()); assertEquals("hi", buffer.toString()); assertEquals("hi", buffer.toString()); assertEquals("hi", buffer.toString()); assertEquals("hi", buffer.toString()); assertEquals("hi", buffer.toString()); assertEquals("hi", buffer.toString()); assertEquals("hi", buffer.toString()); assertEquals("hi", buffer.toString()); assertEquals("hi", buffer.toString()); assertEquals("hi", buffer.toString()); assertEquals("hi", buffer.toString()); assertEquals("hi", buffer.toString()); assertEquals("hi", buffer.toString()); assertEquals("hi", buffer.toString()); assertEquals("hi", buffer.toString()); assertEquals("hi", buffer.toString()); buffer.append("hi"); buffer.append("hi"); buffer.append("hi"); buffer.append("hi"); buffer.append("hi"); buffer
@Test public void append() { buffer.append(new char[] { 'a', 'b', 'c' }, 0, 2); Assert.assertEquals("a b c", buffer.toString()); buffer.append(new char[] { 'a', 'b', 'c' }, 0, 2); Assert.assertEquals("a b c", buffer.toString()); buffer.append(new char[] { 'a', 'b', 'c' }, 0, 3); Assert.assertEquals("a b c", buffer.toString()); buffer.append(new char[] { 'a', 'b', 'c' }, 0, 3); Assert.assertEquals("a b c", buffer.toString()); buffer.append(new char[] { 'a', 'b', 'c' }, 0, 3); Assert.assertEquals("a b c", buffer.toString()); buffer.append(new char[] { 'a', 'b', 'c' }, 0, 3); Assert.assertEquals("a b c", buffer.toString()); buffer.append(new char[] { 'a', 'b', 'c' }, 0, 3); Assert.assertEquals("a b c", buffer.toString()); buffer.append(new char[] { 'a', '
@Test public void testAppend() { new TextBuffer(allocator).append(new char[] { 'a', 'b', 'c' }, 0, 10); new TextBuffer(allocator).append(new char[] { 'a', 'b', 'c' }, 0, 10); new TextBuffer(allocator).append(new char[] { 'a', 'b', 'c' }, 0, 10); new TextBuffer(allocator).append(new char[] { 'a', 'b', 'c' }, 0, 10); new TextBuffer(allocator).append(new char[] { 'a', 'b', 'c' }, 0, 10); new TextBuffer(allocator).append(new char[] { 'a', 'b', 'c' }, 0, 10); new TextBuffer(allocator).append(new char[] { 'a', 'b', 'c' }, 0, 10); new TextBuffer(allocator).append(new char[] { 'a', 'b', 'c' }, 0, 10); new TextBuffer(allocator).append(new char[] { 'a', 'b', 'c' }, 0, 10); new TextBuffer(allocator).append(new char[] { 'a', 'b', 'c'
@Test public void expand() { buffer.append("abc"); buffer.expand(buf.length()); assertEquals("abc", buffer.toString()); }
@Test public void testAppend() { StringBuffer sb = new StringBuffer(new char[] { 'a', 'b', 'c' }); sb.append(new char[] { 'a', 'b', 'c' }); assertEquals("a", sb.toString()); sb.append(new char[] { 'a', 'b', 'c' }); assertEquals("a", sb.toString()); sb.append(new char[] { 'a', 'b', 'c' }); assertEquals("a", sb.toString()); sb.append(new char[] { 'a', 'b', 'c' }); assertEquals("a", sb.toString()); sb.append(new char[] { 'a', 'b', 'c' }); assertEquals("a", sb.toString()); sb.append(new char[] { 'a', 'b', 'c' }); assertEquals("a", sb.toString()); sb.append(new char[] { 'a', 'b', 'c' }); assertEquals("a", sb.toString()); sb.append(new char[] { 'a', 'b', 'c' }); assertEquals("a", sb.toString()); sb.append(new char[] { 'a', 'b', 'c'
@Test public void testAppend() { String s = new String(new char[] { 'a', 'b', 'c' }); TextBuffer buffer = new TextBuffer(s.toCharArray()); buffer.append(new char[] { 'a', 'b', 'c' }); assertEquals(new String(buffer.toCharArray()), "a,b,c"); buffer.append(new char[] { 'a', 'b', 'c' }); assertEquals(new String(buffer.toCharArray()), "a,b,c"); buffer.append(new char[] { 'a', 'b', 'c' }); assertEquals(new String(buffer.toCharArray()), "a,b,c"); buffer.append(new char[] { 'a', 'b', 'c' }); assertEquals(new String(buffer.toCharArray()), "a,b,c"); buffer.append(new char[] { 'a', 'b', 'c' }); assertEquals(new String(buffer.toCharArray()), "a,b,c"); buffer.append(new char[] { 'a', 'b', 'c' }); assertEquals(new String(buffer.toCharArray()), "a,b,c"); buffer.append(
@Test public void testAppend() { publ.append(new char[] { 'a', 'b', 'c' }, 0, 2); assertEquals(new char[] { 'a', 'b', 'c' }, expand(new char[] { 'a', 'b', 'c' })); }
@Test public void testAppend() { StringBuffer buffer = new StringBuffer(allocator); buffer.append("abc"); buffer.append("def"); buffer.append("ghi"); buffer.append("hi"); buffer.append("hi"); assertEquals("abc", buffer.toString()); assertEquals("hi", buffer.toString()); assertEquals("hi", buffer.toString()); assertEquals("hi", buffer.toString()); assertEquals("hi", buffer.toString()); assertEquals("hi", buffer.toString()); assertEquals("hi", buffer.toString()); assertEquals("hi", buffer.toString()); assertEquals("hi", buffer.toString()); assertEquals("hi", buffer.toString()); assertEquals("hi", buffer.toString()); assertEquals("hi", buffer.toString()); assertEquals("hi", buffer.toString()); assertEquals("hi", buffer.toString()); assertEquals("hi", buffer.toString()); assertEquals("hi", buffer.toString()); assertEquals("hi", buffer.toString()); assertEquals("hi", buffer.toString()); assertEquals("hi", buffer.toString()); assertEquals("hi", buffer.toString()); assertEquals("hi", buffer.toString()); assertEquals("hi", buffer.toString()); assertEquals("hi", buffer.toString()); assertEquals("hi", buffer.toString()); assertEquals("hi", buffer.toString()); assertEquals("hi", buffer
@Test public void testAppend() { buffer.append("abc"); buffer.append("def"); buffer.append("ghi"); buffer.append("ghi"); buffer.append("jkl"); assertEquals("abc", buffer.toString()); }
@Test public void testAppend() { buffer.append("abc"); buffer.append("def"); buffer.append("ghi"); buffer.append("ghi"); buffer.append("hi"); buffer.append("hi"); buffer.append("hi"); buffer.append("hi"); buffer.append("hi"); assertEquals("abc", buffer.toString()); }
@Test public void testUnshare() { String str = "abc"; buffer.append(str, 0, str.length()); buffer.append(str, 0, str.length()); buffer.append(str, 0, str.length()); buffer.append(str, 0, str.length()); buffer.append(str, 0, str.length()); buffer.append(str, 0, str.length()); buffer.append(str, 0, str.length()); buffer.append(str, 0, str.length()); buffer.append(str, 0, str.length()); buffer.append(str, 0, str.length()); buffer.append(str, 0, str.length()); buffer.append(str, 0, str.length()); buffer.append(str, 0, str.length()); buffer.append(str, 0, str.length()); buffer.append(str, 0, str.length()); buffer.append(str, 0, str.length()); buffer.append(str, 0, str.length()); buffer.append(str, 0, str.length()); buffer.append(str, 0, str.length()); buffer.append(str, 0, str.length()); buffer.append(str, 0, str.length()); buffer.append(str, 0, str.length
@Test public void testAppend() { String str = "Hello World"; buffer.append(str, 0, str.length()); buffer.append(str, 0, str.length()); buffer.append(str, 0, str.length()); buffer.append(str, 0, str.length()); assertEquals(str, buffer.toString()); }
@Test public void testAppend() { publi.append(str, 0, str.length()); publi.append(str, 0, str.length()); publi.append(str, 0, str.length()); assertEquals(str.length(), str.length()); }
@Test public void testAppend() { String str = "abc"; int offset = 0; int len = 10; buffer.append(str, offset, len); assertEquals(str.length(), offset + len); }
@Test public void testAppend() { String str = "Hello World!"; buffer.append(str, 0, str.length()); buffer.append(str, 0, str.length()); buffer.append(str, 0, str.length()); assertEquals(str.length(), str.length()); assertEquals(str, buffer.toString()); }
@Test public void testAppend() { String str = "Hello World!"; buffer.append(str, 0, str.length()); buffer.append(str, 0, str.length()); buffer.append(str, 0, str.length()); buffer.append(str, 0, str.length()); buffer.append(str, 0, str.length()); buffer.append(str, 0, str.length()); buffer.append(str, 0, str.length()); buffer.append(str, 0, str.length()); buffer.append(str, 0, str.length()); buffer.append(str, 0, str.length()); buffer.append(str, 0, str.length()); buffer.append(str, 0, str.length()); buffer.append(str, 0, str.length()); buffer.append(str, 0, str.length()); buffer.append(str, 0, str.length()); buffer.append(str, 0, str.length()); buffer.append(str, 0, str.length()); buffer.append(str, 0, str.length()); buffer.append(str, 0, str.length()); buffer.append(str, 0, str.length()); buffer.append(str, 0, str.length()); buffer.append(str, 0, str
@Test public void expand() { String str = "abc"; buffer.append(str, 0, str.length()); buffer.append(str, 0, str.length()); buffer.append(str, 0, str.length()); buffer.append(str, 0, str.length()); buffer.append(str, 0, str.length()); buffer.append(str, 0, str.length()); buffer.append(str, 0, str.length()); buffer.append(str, 0, str.length()); buffer.append(str, 0, str.length()); buffer.append(str, 0, str.length()); buffer.append(str, 0, str.length()); buffer.append(str, 0, str.length()); buffer.append(str, 0, str.length()); buffer.append(str, 0, str.length()); buffer.append(str, 0, str.length()); buffer.append(str, 0, str.length()); buffer.append(str, 0, str.length()); buffer.append(str, 0, str.length()); buffer.append(str, 0, str.length()); buffer.append(str, 0, str.length()); buffer.append(str, 0, str.length()); buffer.append(str, 0, str.length());
@Test public void testAppend() { String str = "abc"; str.append("abc"); str.append("def"); str.append("abc"); str.append("def"); str.append("abc"); str.append("def"); str.append("abc"); str.append("def"); str.append("abc"); str.append("def"); str.append("abc"); str.append("def"); str.append("abc"); str.append("def"); str.append("abc"); str.append("def"); str.append("abc"); str.append("def"); str.append("abc"); str.append("def"); str.append("abc"); str.append("def"); str.append("abc"); str.append("def"); str.append("abc"); str.append("def"); str.append("abc"); str.append("def"); str.append("abc"); str.append("def"); str.append("abc"); str.append("def"); str.append("abc"); str.append("def"); str.append("abc"); }
@Test public void testAppend() { String str = "abc"; str.getChars(0, str.length(), str, 0); str.append(str, 0, str.length() - 1); str.append(str, 0, str.length() - 1); str.append(str, 0, str.length() - 1); str.append(str, 0, str.length() - 2); str.append(str, 0, str.length() - 2); str.append(str, 0, str.length() - 2); str.append(str, 0, str.length() - 2); str.append(str, 0, str.length() - 2); str.append(str, 0, str.length() - 1); str.append(str, 0, str.length() - 2); str.append(str, 0, str.length() - 1); str.append(str, 0, str.length() - 2); str.append(str, 0, str.length() - 1); str.append(str, 0, str.length() - 2); str.append(str, 0, str.length() - 2); str.append(str, 0, str.length() - 2); }
@Test public void testAppend() { String str = "abc"; buffer.append(str, 0, str.length()); assertEquals("abc", buffer.get(0)); buffer.append(str, 0, str.length()); assertEquals("abc", buffer.get(0)); buffer.append(str, 0, str.length()); assertEquals("abc", buffer.get(0)); buffer.append(str, 0, str.length()); assertEquals("abc", buffer.get(0)); buffer.append(str, 0, str.length()); assertEquals("abc", buffer.get(0)); buffer.append(str, 0, str.length()); assertEquals("abc", buffer.get(0)); buffer.append(str, 0, str.length()); assertEquals("abc", buffer.get(0)); buffer.append(str, 0, str.length()); assertEquals("abc", buffer.get(0)); buffer.append(str, 0, str.length()); assertEquals("abc", buffer.get(0)); buffer.append(str, 0, str.length()); assertEquals("abc", buffer.get(0)); buffer.append(str, 0, str.length()); assertEquals("abc", buffer.get(0)); buffer.append(str, 0, str.length()); assertEquals("abc", buffer.get(0)); buffer
@Test public void testAppend() { buffer.append("abc"); buffer.append("def"); buffer.append("ghi"); buffer.append("ghi"); buffer.append("def"); buffer.append("ghi"); buffer.append("def"); buffer.append("ghi"); buffer.append("def"); buffer.append("def"); buffer.append("ghi"); buffer.append("def"); buffer.append("def"); buffer.append("ghi"); buffer.append("def"); buffer.append("def"); buffer.append("ghi"); buffer.append("def"); buffer.append("ghi"); buffer.append("def"); buffer.append("ghi"); assertEquals("def", buffer.toString()); assertEquals("ghi", buffer.toString()); assertEquals("def", buffer.toString()); assertEquals("def", buffer.toString()); assertEquals("def", buffer.toString()); assertEquals("def", buffer.toString()); assertEquals("def", buffer.toString()); assertEquals("def", buffer.toString()); assertEquals("def", buffer.toString()); assertEquals("def", buffer.toString()); assertEquals("def", buffer.toString()); assertEquals("def", buffer.toString()); assertEquals("def", buffer.toString()); assertEquals("def", buffer.toString
@Test public void testAppend() { buffer.append("abc"); buffer.append("def"); buffer.append("ghi"); buffer.append("ghi"); buffer.append("jkl"); buffer.append("jkl"); assertEquals("abc", buffer.toString()); assertEquals("def", buffer.toString()); assertEquals("ghi", buffer.toString()); assertEquals("jkl", buffer.toString()); assertEquals("jkl", buffer.toString()); assertEquals("jkl", buffer.toString()); assertEquals("jkl", buffer.toString()); assertEquals("jkl", buffer.toString()); assertEquals("jkl", buffer.toString()); assertEquals("jkl", buffer.toString()); assertEquals("jkl", buffer.toString()); assertEquals("jkl", buffer.toString()); assertEquals("jkl", buffer.toString()); assertEquals("jkl", buffer.toString()); assertEquals("jkl", buffer.toString()); assertEquals("jkl", buffer.toString()); assertEquals("jkl", buffer.toString()); assertEquals("jkl", buffer.toString()); assertEquals("jkl", buffer.toString()); assertEquals("jkl", buffer.toString()); assertEquals("jkl", buffer.toString()); assertEquals("jkl", buffer.toString()); assertEquals("jkl", buffer.toString()); assertEquals("
@Test public void testAppend() { String str = "abc"; buffer.append(str, 0, 0); buffer.append(str, 0, 0); buffer.append(str, 0, 0); buffer.append(str, 0, 0); buffer.append(str, 0, 0); buffer.append(str, 0, 0); buffer.append(str, 0, 0); buffer.append(str, 0, 0); buffer.append(str, 0, 0); buffer.append(str, 0, 0); buffer.append(str, 0, 0); buffer.append(str, 0, 0); buffer.append(str, 0, 0); buffer.append(str, 0, 0); buffer.append(str, 0, 0); buffer.append(str, 0, 0); buffer.append(str, 0, 0); buffer.append(str, 0, 0); buffer.append(str, 0, 0); buffer.append(str, 0, 0); buffer.append(str, 0, 0); buffer.append(str, 0, 0); buffer.append(str, 0, 0); buffer.append(str, 0, 0); buffer.append(str, 0, 0); buffer.append(str, 0, 0); buffer.append(str, 0, 0); buffer.append(str, 0, 0); buffer.append(str, 0, 0); buffer.append(str, 0, 0); buffer
@Test public void testGetCurrentSegment() { assertEquals(new char[] { 'a', 'b', 'c' }, _textBuffer.getCurrentSegment()); assertEquals(new char[] { 'a', 'b', 'c' }, _textBuffer.getCurrentSegment()); assertEquals(new char[] { 'a', 'b', 'c' }, _textBuffer.getCurrentSegment()); assertEquals(new char[] { 'a', 'b', 'c' }, _textBuffer.getCurrentSegment()); assertEquals(new char[] { 'a', 'b', 'c' }, _textBuffer.getCurrentSegment()); assertEquals(new char[] { 'a', 'b', 'c' }, _textBuffer.getCurrentSegment()); assertEquals(new char[] { 'a', 'b', 'c' }, _textBuffer.getCurrentSegment()); assertEquals(new char[] { 'a', 'b', 'c' }, _textBuffer.getCurrentSegment()); assertEquals(new char[] { 'a', 'b', 'c' }, _textBuffer.getCurrentSegment()); assertEquals(new char[] { 'a', 'b', 'c' }, _textBuffer.getCurrentSegment()); assertEquals(new char[] { 'a', 'b', 'c' },
@Test public void testGetCurrentSegment() { assertEquals(new char[] { 'a', 'b', 'c' }, _textBuffer.getCurrentSegment()); assertEquals(new char[] { 'a', 'b', 'c' }, _textBuffer.getCurrentSegment()); assertEquals(new char[] { 'a', 'b', 'c' }, _textBuffer.getCurrentSegment()); assertEquals(new char[] { 'a', 'b', 'c' }, _textBuffer.getCurrentSegment()); assertEquals(new char[] { 'a', 'b', 'c' }, _textBuffer.getCurrentSegment()); assertEquals(new char[] { 'a', 'b', 'c' }, _textBuffer.getCurrentSegment()); assertEquals(new char[] { 'a', 'b', 'c' }, _textBuffer.getCurrentSegment()); assertEquals(new char[] { 'a', 'b', 'c' }, _textBuffer.getCurrentSegment()); assertEquals(new char[] { 'a', 'b', 'c' }, _textBuffer.getCurrentSegment()); assertEquals(new char[] { 'a', 'b', 'c' }, _textBuffer.getCurrentSegment()); assertEquals(new char[] { 'a', 'b', 'c' },
@Test public void testGetCurrentSegment() { assertEquals(new char[] { 'a', 'b', 'c' }, _textBuffer.getCurrentSegment()); assertEquals(new char[] { 'a', 'b', 'c' }, _textBuffer.getCurrentSegment()); assertEquals(new char[] { 'a', 'b', 'c' }, _textBuffer.getCurrentSegment()); assertEquals(new char[] { 'a', 'b', 'c' }, _textBuffer.getCurrentSegment()); assertEquals(new char[] { 'a', 'b', 'c' }, _textBuffer.getCurrentSegment()); assertEquals(new char[] { 'a', 'b', 'c' }, _textBuffer.getCurrentSegment()); assertEquals(new char[] { 'a', 'b', 'c' }, _textBuffer.getCurrentSegment()); assertEquals(new char[] { 'a', 'b', 'c' }, _textBuffer.getCurrentSegment()); assertEquals(new char[] { 'a', 'b', 'c' }, _textBuffer.getCurrentSegment()); assertEquals(new char[] { 'a', 'b', 'c' }, _textBuffer.getCurrentSegment()); assertEquals(new char[] { 'a', 'b', 'c' },
@Test public void testGetCurrentSegment() { assertEquals(new char[] { 'a', 'b', 'c' }, _textBuffer.getCurrentSegment()); assertEquals(new char[] { 'a', 'b', 'c' }, _textBuffer.getCurrentSegment()); assertEquals(new char[] { 'a', 'b', 'c' }, _textBuffer.getCurrentSegment()); assertEquals(new char[] { 'a', 'b', 'c' }, _textBuffer.getCurrentSegment()); assertEquals(new char[] { 'a', 'b', 'c' }, _textBuffer.getCurrentSegment()); assertEquals(new char[] { 'a', 'b', 'c' }, _textBuffer.getCurrentSegment()); assertEquals(new char[] { 'a', 'b', 'c' }, _textBuffer.getCurrentSegment()); assertEquals(new char[] { 'a', 'b', 'c' }, _textBuffer.getCurrentSegment()); assertEquals(new char[] { 'a', 'b', 'c' }, _textBuffer.getCurrentSegment()); assertEquals(new char[] { 'a', 'b', 'c' }, _textBuffer.getCurrentSegment()); assertEquals(new char[] { 'a', 'b', 'c' },
@Test public void testGetCurrentSegment() { assertEquals(new char[] { 'a', 'b', 'c' }, _textBuffer.getCurrentSegment()); assertEquals(new char[] { 'a', 'b', 'c' }, _textBuffer.getCurrentSegment()); assertEquals(new char[] { 'a', 'b', 'c' }, _textBuffer.getCurrentSegment()); assertEquals(new char[] { 'a', 'b', 'c' }, _textBuffer.getCurrentSegment()); assertEquals(new char[] { 'a', 'b', 'c' }, _textBuffer.getCurrentSegment()); assertEquals(new char[] { 'a', 'b', 'c' }, _textBuffer.getCurrentSegment()); assertEquals(new char[] { 'a', 'b', 'c' }, _textBuffer.getCurrentSegment()); assertEquals(new char[] { 'a', 'b', 'c' }, _textBuffer.getCurrentSegment()); assertEquals(new char[] { 'a', 'b', 'c' }, _textBuffer.getCurrentSegment()); assertEquals(new char[] { 'a', 'b', 'c' }, _textBuffer.getCurrentSegment()); assertEquals(new char[] { 'a', 'b', 'c' },
@Test public void testGetCurrentSegment() { assertEquals(new String(buffer.getCurrentSegment()), "a"); assertEquals(new String(buffer.getCurrentSegment()), "b"); assertEquals(new String(buffer.getCurrentSegment()), "c"); assertEquals(new String(buffer.getCurrentSegment()), "d"); assertEquals(buffer.getCurrentSegment(), null); buffer.resetWithEmpty(); assertEquals(buffer.getCurrentSegment(), ""); assertEquals(buffer.getCurrentSegment(), ""); assertEquals(buffer.getCurrentSegment(), ""); buffer.resetWithCopy(buffer, 0, buffer.size() - 1); assertEquals(buffer.getCurrentSegment(), "c"); assertEquals(buffer.getCurrentSegment(), "d"); assertEquals(buffer.getCurrentSegment(), "e"); buffer.resetWithCopy(buffer, 0, buffer.size() - 1); assertEquals(buffer.getCurrentSegment(), "c"); assertEquals(buffer.getCurrentSegment(), "d"); assertEquals(buffer.getCurrentSegment(), "e"); buffer.resetWithCopy(buffer, 0, buffer.size() - 1); assertEquals(buffer.getCurrentSegment(), "c"); assertEquals(buffer.getCurrentSegment(), "d"); assertEquals(buffer.getCurrentSegment(), "e"); assertEquals(buffer.getCurrentSegment(), "c"); assertEquals(buffer.getCurrentSegment(), "a");
@Test public void getCurrentSegmentSize() { Assert.assertEquals(new char[] { 'a', 'b', 'c' }, _textBuffer.getCurrentSegmentSize()); Assert.assertEquals(new char[] { 'a', 'b', 'c' }, _textBuffer.getCurrentSegmentSize()); Assert.assertEquals(new char[] { 'a', 'b', 'c' }, _textBuffer.getCurrentSegmentSize()); }
@Test public void getCurrentSegmentSize() { Assert.assertEquals(TEXT_BUFFER.getCurrentSegmentSize(), 2); Assert.assertEquals(TEXT_BUFFER.getCurrentSegmentSize(), 2); }
@Test public void testExpand() { String s = "abc\ndef\nghi\n"; String expand = "abc\ndef\nghi\n"; expand(expand.length()); assertEquals(expand.length(), 7); assertEquals(expand.substring(0, 7), "abc"); expand = "def\nghi\n"; expand(expand.length()); assertEquals(expand.length(), 7); assertEquals(expand.substring(0, 7), "abc"); expand = "def\nghi\n"; expand(expand.length()); assertEquals(expand.substring(0, 7), "abc"); expand(expand.length()); assertEquals(expand.substring(0, 7), "def"); expand(expand.length()); assertEquals(expand.substring(0, 7), "abc"); expand(expand.length()); assertEquals(expand.substring(0, 7), "def"); expand(expand.length()); assertEquals(expand.substring(0, 7), "def"); expand(expand.length()); assertEquals(expand.substring(0, 7), "def"); expand(expand.length()); assertEquals(expand.substring(0, 7), "def"); expand(expand.length()); assertEquals(expand.substring(0, 7), "def"); expand(expand.length()); assertEquals(expand
@Test void testExpand() { publi.writeString("foo\nbar\nbaz\nqux\nqux\nqux\nqux\nqux\nqux\nqux\nqux\nqux\nqux\nqux\nqux\nqux\nqux\nqux\nqux\nqux\nqux\nqux\nqux\nqux\nqux\n"); publi.writeString("foo\nbar\nqux\nqux\nqux\nqux\nqux\nqux\nqux\nqux\nqux\nqux\nqux\nqux\nqux\nqux\nqux\nqux\nqux\nqux\nqux\nqux\nqux\nqux\nqux\nqux\nqux\nqux\nqux\nqux\nqux\nqux\nqux\nqux\nqux\n
@Test public void testExpand() { String s = "abc"; String expand = "abc"; expand.append(s); expand.append(s); expand.append(s); expand.append(s); expand.append(s); expand.append(s); assertEquals(s, new String(readBuffer.getBuffer(), 0, s.length())); }
@Test public void testExpand() { String s = "abc"; TextBuffer textBuffer = new TextBuffer(allocator); textBuffer.addString(s); textBuffer.addString("def"); textBuffer.addString("ghi"); textBuffer.addString("jklmnop"); textBuffer.addString("mnopmnop"); textBuffer.addString("mnop"); textBuffer.addString("defghi"); textBuffer.addString("jklmnop"); textBuffer.addString("mnopmnop"); textBuffer.addString("defghi"); textBuffer.addString("jklmnop"); textBuffer.addString("mnopmnop"); textBuffer.addString("jklmnop"); textBuffer.addString("mnopmnop"); textBuffer.addString("jklmnop"); textBuffer.addString("mnopmnop"); textBuffer.addString("jklmnop"); textBuffer.addString("mnop"); textBuffer.addString("jklmnop"); textBuffer.addString("mnop"); textBuffer.addString("jklmnop"); textBuffer.addString("mnop"); textBuffer.addString("jklmnop"); textBuffer.addString("mnop"); textBuffer.addString("jklmnop
@Test public void testExpand() { String s = "abc\ndef\nghi\ndef\nghi\n"; TextBuffer textBuffer = new TextBuffer(allocator); textBuffer.in("abc"); textBuffer.in("def"); textBuffer.in("ghi"); textBuffer.in("def"); textBuffer.in("ghi"); textBuffer.in("def"); textBuffer.in("ghi"); textBuffer.in("def"); textBuffer.in("ghi"); textBuffer.in("def"); textBuffer.in("ghi"); textBuffer.in("def"); textBuffer.in("ghi"); textBuffer.in("def"); textBuffer.in("ghi"); textBuffer.in("def"); textBuffer.in("ghi"); textBuffer.in("def"); textBuffer.in("ghi"); textBuffer.in("def"); textBuffer.in("ghi"); textBuffer.in("def"); textBuffer.in("ghi"); textBuffer.in("def"); textBuffer.in("ghi"); textBuffer.in("def"); textBuffer.in("ghi"); textBuffer.in("def"); textBuffer.in
@Test public void testExpand() { String testString = "abc def ghi"; TextBuffer textBuffer = new TextBuffer(allocator); textBuffer.in("abc"); textBuffer.in("def"); textBuffer.in("ghi"); textBuffer.in("def"); textBuffer.in("ghi"); textBuffer.in("def"); textBuffer.in("ghi"); textBuffer.in("def"); textBuffer.in("ghi"); textBuffer.in("def"); textBuffer.in("ghi"); textBuffer.in("def"); textBuffer.in("ghi"); textBuffer.in("def"); textBuffer.in("ghi"); textBuffer.in("ghi"); textBuffer.in("def"); textBuffer.in("ghi"); textBuffer.in("def"); textBuffer.in("ghi"); textBuffer.in("def"); textBuffer.in("ghi"); textBuffer.in("def"); textBuffer.in("ghi"); textBuffer.in("def"); textBuffer.in("ghi"); textBuffer.in("def"); textBuffer.in("ghi"); textBuffer.in("def"); textBuffer.in("ghi"); textBuffer
@Test public void testExpand() { String s = "abc"; TextBuffer textBuffer = new TextBuffer(allocator); textBuffer.append(s.toCharArray()); textBuffer.append("def"); textBuffer.append("ghi"); textBuffer.append("klm"); textBuffer.append("mno"); textBuffer.append("mno"); textBuffer.append("klm"); textBuffer.append("mno"); textBuffer.append("def"); textBuffer.append("ghi"); textBuffer.append("klm"); textBuffer.append("mno"); textBuffer.append("mno"); textBuffer.append("klm"); textBuffer.append("mno"); textBuffer.append("mno"); textBuffer.append("def"); textBuffer.append("ghi"); textBuffer.append("klm"); textBuffer.append("mno"); textBuffer.append("mno"); textBuffer.append("klm"); textBuffer.append("mno"); textBuffer.append("mno"); textBuffer.append("klm"); textBuffer.append("mno"); textBuffer.append("mno"); textBuffer.append("klm"); textBuffer.append("m
@Test void testExpand() { publl.writeString("foo\nbar\nbaz\n"); assertEquals("foo\nbar\nbaz\n", expand("foo\nbar\nbaz\n")); assertEquals("foo\nbar\nbaz\n", expand("foo\nbar\nbaz\n")); assertEquals("foo\nbar\nbaz\n", expand("foo\nbar\nbaz\n")); assertEquals("foo\nbar\nbaz\n", expand("foo\nbar\nbaz\n")); assertEquals("foo\nbar\nbaz\n", expand("foo\nbar\nbaz\n")); assertEquals("foo\nbar\nbaz\n", expand("foo\nbar\nbaz\n")); assertEquals("foo\nbar\nbaz\n", expand("foo\nbar\nbaz\n")); assertEquals("foo\nbar\nbaz\n", expand("foo\nbar\nbaz\n")); assertEquals("foo\nbar\nbaz\n", expand("foo\nbar\nbaz\n")); assertEquals("foo\nbar\nbaz\n", expand("foo
@Test public void testExpand() { StringBuffer textBuffer = new StringBuffer(allocator); textBuffer.append("abc"); textBuffer.append("def"); textBuffer.append("ghi"); textBuffer.append("klm"); textBuffer.append("mno"); textBuffer.append("ghi"); textBuffer.append("klm"); textBuffer.append("mno"); textBuffer.append("def"); textBuffer.append("ghi"); textBuffer.append("klm"); textBuffer.append("mno"); textBuffer.append("def"); textBuffer.append("ghi"); textBuffer.append("klm"); textBuffer.append("mno"); textBuffer.append("def"); textBuffer.append("ghi"); textBuffer.append("klm"); textBuffer.append("mno"); textBuffer.append("def"); textBuffer.append("ghi"); textBuffer.append("klm"); textBuffer.append("mno"); textBuffer.append("def"); textBuffer.append("ghi"); textBuffer.append("klm"); textBuffer.append("mno"); textBuffer.append("klm"); textBuffer.append("mno"); textBuffer
@Test public void testExpand() { String s = "abc\ndef\nghi\nhi\nhi\nkl\nhi\nkl\nhi\nkl\nhi\nkl\nhi\nkl\nhi\nkl\nhi\nkl\nhi\nkl\nhi\nkl\nhi\nkl\nhi\nkl\nhi\nkl\nhi\nkl\nhi\nkl\nhi\nkl\nhi\nkl\nhi\nkl\nhi\nkl\nhi\nkl\nhi\nkl\nhi\nhi\nkl\nhi\nkl\nhi\nkl\nhi\nkl\nhi\nkl\nhi\nkl\nhi\nkl\nhi\nkl\nhi\nkl\nkl\nhi\nkl\nkl\nhi\nkl\nkl\nhi\nkl\nkl\nhi\nkl\nkl\nhi\nkl\nkl\nhi\nkl\
@Test public void testExpand() { StringBuffer textBuffer = new StringBuffer(allocator); textBuffer.append("abc"); textBuffer.append("def"); textBuffer.append("ghi"); textBuffer.append("klmnop"); textBuffer.append("mno"); textBuffer.append("mno"); textBuffer.append("mno"); textBuffer.append("klmnop"); textBuffer.append("mno"); textBuffer.append("mno"); textBuffer.append("klmnop"); textBuffer.append("mno"); textBuffer.append("mno"); textBuffer.append("klmnop"); textBuffer.append("mno"); textBuffer.append("mno"); textBuffer.append("klmnop"); textBuffer.append("mno"); textBuffer.append("mno"); textBuffer.append("klmnop"); textBuffer.append("mno"); textBuffer.append("mno"); textBuffer.append("klmnop"); textBuffer.append("mno"); textBuffer.append("mno"); textBuffer.append("klmnop"); textBuffer.append("mno"); textBuffer.append("mno"); textBuffer.append("nope"); textBuffer.append("
@Test public void testExpand() { TextBuffer textBuffer = new TextBuffer(allocator); textBuffer.g("foo"); textBuffer.g("bar"); textBuffer.g("baz"); textBuffer.g("qux"); textBuffer.g("qux"); textBuffer.g("qux"); textBuffer.g("qux"); textBuffer.g("qux"); textBuffer.g("qux"); textBuffer.g("qux"); textBuffer.g("qux"); textBuffer.g("qux"); textBuffer.g("qux"); textBuffer.g("qux"); textBuffer.g("qux"); textBuffer.g("qux"); textBuffer.g("qux"); textBuffer.g("qux"); textBuffer.g("qux"); textBuffer.g("qux"); textBuffer.g("qux"); textBuffer.g("qux"); textBuffer.g("qux"); textBuffer.g("qux"); textBuffer.g("qux"); textBuffer.g("qux"); textBuffer.g("qux"); textBuffer.g("qux"); textBuffer.g("qux"); textBuffer.g("qu
@Test public void testExpand() { String s = "abc"; String s2 = "def"; String s3 = "ghi"; String s4 = "abcdefghij"; String s5 = "abcdefghij"; String s6 = "abcdefghij"; String s7 = "abcdefghij"; String s8 = "abcdefghij"; String s9 = "abcdefghij"; String s10 = "abcdefghij"; String s11 = "abcdefghij"; String s12 = "abcdefghij"; String s13 = "abcdefghij"; String s14 = "abcdefghij"; String s15 = "abcdefghij"; String s16 = "abcdefghij"; String s21 = "abcdefghij"; String s22 = "abcdefghij"; String s23 = "abcdefghij"; String s24 = "abcdefghij"; String s31 = "abcdefghij"; String s32 = "abcdefghij"; String s2334 = "abcdefghij"; String s42334 = "abcdefghij"; String s42334 = "abcdefghij"; String s52334 = "abcdefghij"; String s63434 = "abcdefghij"; String s7345678 = "abcdefghij"; String s11345678 = "abcdefghij"; String s12345678

@Test public void testGeneratorBase() { String json = "{\"a\":1,\"b\":2,\"c\":3}"; GeneratorBase generator = new GeneratorBase(Feature.GENERATE_FEATURES, new ObjectCodec()); JsonWriteContext.reset(); generator.writeString(json); generator.writeString(json); Assert.assertEquals(GeneratorBase.DEFAULT_VALUE, generator.getFeatureMask()); }
public void testGeneratorBase() throws IOException { new MockUp<JsonWriteContext>() { @Override protected void setup(JsonWriteContext ctx) throws IOException { ctx.write(new String[]{"cfg1", "cfg2"}); ctx.write(new String[]{"cfg3", "cfg4"}); } }; JsonGenerator gen = new GeneratorBase(Feature.WRITE_NUMBERS_AS_STRINGS, new ObjectCodec()); Assert.assertEquals(gen.version().getFeatureMask(), GeneratorBase.FEATURE_MASK); gen.setCodec(new ObjectCodec()); Assert.assertEquals(gen.version().getFeatureMask(), GeneratorBase.FEATURE_MASK); gen.setCodec(new ObjectCodec()); Assert.assertEquals(gen.version().getFeatureMask(), GeneratorBase.FEATURE_MASK); }
@Test public void testGeneratorBase() throws IOException { JsonGenerationException wr = new JsonGenerationException("bad"); StringWriter out = new StringWriter(); JsonGenerator gen = new GeneratorBase(422, out); gen.writeString("{\"a\":1,\"b\":2,\"c\":3}"); out.close(); JsonGenerationException ex = assertThrows(JsonGenerationException.class, () -> out.writeString("{\"a\":1,\"b\":2,\"c\":3}")); assertEquals("bad", ex.getMessage()); }
@Test public void testGeneratorBase() throws IOException { String out = "{\"a\":1,\"b\":2,\"c\":3}"; JsonGenerator gen = new JsonGen().setFeatureMask(out.length() + 1); gen.writeString(out); String json = out.toString(); assertTrue(json.contains("\"a\"")); assertTrue(json.contains("\"b\"")); assertTrue(json.contains("\"c\"")); assertTrue(json.contains("\"d\"")); assertTrue(json.contains("\"e\"")); assertTrue(json.contains("\"f\"")); assertTrue(json.contains("\"g\"")); }
@Test public void testGeneratorBase() throws IOException { JsonGenerator generator = new GeneratorBase(Feature.WRITE_NUMBERS_AS_STRINGS, _objectCodec); generator.writeString("abc"); generator.writeString("def"); assertEquals("abc", generator.getFeatureMask()); }
@Test public void testGeneratorBase() throws IOException { StringWriter sw = new StringWriter(); JsonGenerator generator = new GeneratorBase(Feature.WRITE_NUMBERS_AS_STRINGS, sw); JsonWriteContext.reset(); JsonWriteContext.writeContext(GeneratorBase.Feature.WRITE_NUMBERS_AS_STRINGS, sw); String json = sw.toString(); JsonGenerationException ex = null; try { json = generator.read(json); } catch (JsonGenerationException ex) { ex = ex.getCause(); } assertEquals(ex.getFeatureMask(), GeneratorBase.FEATURE_MASK); }
@Test public void testIsEnabled() throws IOException { JsonGenerator generator = Json.createGenerator(); assertTrue(generator.isEnabled(Feature.FEATURE_OLS)); assertFalse(generator.isEnabled(Feature.FEATURE_OLS | Feature.FEATURE_ENUMERATION)); }
@Test public void testFeatureEnabled() throws IOException { JsonGenerator generator = new GeneratorBase(Feature.FEATURE_COUNT, ObjectCodec.getDefault()); assertTrue(generator.isEnabled(new Feature("a", "a") { @Override public boolean getEnabledFeature() { return true; } })); assertTrue(generator.isEnabled(new Feature("b", "b") { @Override public boolean getEnabledFeature() { return false; } })); assertTrue(generator.isEnabled(new Feature("c", "c") { @Override public boolean getEnabledFeature() { return true; } })); assertTrue(generator.isEnabled(new Feature("a", "a") { @Override public boolean getEnabledFeature() { return true; } })); assertTrue(generator.isEnabled(new Feature("b", "b") { @Override public boolean getEnabledFeature() { return true; } })); assertTrue(generator.isEnabled(new Feature("c", "c") { @Override public boolean getEnabledFeature() { return true; } })); }
@Test public void testEOL() throws IOException { JsonWriteContext ctx = _generator.getOutputContext(); JsonWriteContext out = ctx.createWriteContext(); out.write(42); out.flush(); assertEquals(42, ctx.read()); }
@Test public void testArray() throws IOException { JsonWriteContext ctx = _generator.getOutputContext(); JsonArray array = (JsonArray) ctx.readValue(new StringReader("[]")); assertEquals(0, array.size()); }
@Test public void testClose() throws IOException { JsonGenerationException e = new JsonGenerationException(); e.setFeatureMask(FeatureMask.FEATURE_MASK); try { new JsonWriteContext().writeObject(new String[]{"one", "two", "three"}, new JsonWriteContext()); new JsonGenerator().writeObject(new String[]{"one", "two", "three"}, new JsonWriteContext()); fail("An exception should have been thrown."); } catch (JsonGenerationException ex) { } }
@Test public void testClose() throws IOException { JsonGenerator generator = new JsonStringCodec(); generator.setFeatureMask(FeatureMask.FEATURE_MASK); JsonGenerationException e = assertThrows(JsonGenerationException.class, () -> generator.writeString("foo")); assertEquals("foo", e.getMessage()); generator.close(); assertEquals("", e.getMessage()); }
@Test public void testWriteStartArray() throws IOException, JsonGenerationException { new UTF8JsonGenerator(null, 0, null, null).writeStartArray(); }
@Test public void testWriteStartArray() throws IOException, JsonGenerationException { new UTF8JsonGenerator(null, 0, null, null) { @Override protected void writeStartArray(IOContext ctxt, int features, ObjectCodec codec, byte[] outputBuffer, int outputOffset, boolean bufferRecyclable) throws IOException { } }.writeStartArray(); }
@Test public void testWriteStartArray() throws IOException { new UTF8JsonGenerator(null, 0, null, null, null).writeStartArray(); }
@Test public void testWriteStartArray() throws IOException, JsonGenerationException { new UTF8JsonGenerator(null, 0, null, null) { @Override protected void writeStartArray(IOContext ctxt, int features, ObjectCodec codec, byte[] outputBuffer, int outputOffset, boolean bufferRecyclable) { } }.writeStartArray(); }
@Test public void testWriteStartArray() throws IOException { OutputStream out = new ByteArrayOutputStream(); new UTF8JsonGenerator(null, 0, null, out).writeStartArray(); out.writeStartArray(); out.writeStartArray(); out.writeStartArray(); out.writeStartArray(); out.writeStartArray(); out.writeStartArray(); out.writeStartArray(); out.writeStartArray(); out.writeStartArray(); out.writeStartArray(); out.writeStartArray(); out.writeStartArray(); out.writeStartArray(); out.writeStartArray(); out.writeStartArray(); out.writeStartArray(); out.writeStartArray(); out.writeStartArray(); out.writeStartArray(); out.writeStartArray(); out.writeStartArray(); out.writeStartArray(); out.writeStartArray(); out.writeStartArray(); out.writeStartArray(); out.writeStartArray(); out.writeStartArray(); out.writeStartArray(); out.writeStartArray(); out.writeStartArray(); out.writeStartArray(); out.writeStartArray(); out.writeStartArray(); out.writeStartArray(); out.writeStartArray(); out.writeStartArray(); out.writeStart
@Test public void testWriteStartArray() throws IOException { new UTF8JsonGenerator(null, 0, null, null, null).writeStartArray(); }
@Test public void testWriteEndArray() throws IOException { new UTF8JsonGenerator(null, 0, null, null).writeEndArray(); }
@Test public void testWriteEndArray() throws IOException { new UTF8JsonGenerator(null, 0, null, null, null).writeEndArray(); }
@Test public void testWriteEndArray() throws IOException { StringWriter out = new StringWriter(); out.write(new byte[] { (byte) 0x8f, (byte) 0x8f }); out.write(new byte[] { (byte) 0x8f, (byte) 0x8f }); out.write(new byte[] { (byte) 0x8f, (byte) 0x8f }); out.write(new byte[] { (byte) 0x8f, (byte) 0x8f }); out.write(new byte[] { (byte) 0x8f, (byte) 0x8f, (byte) 0x8f }); out.write(new byte[] { (byte) 0x8f, (byte) 0x8f, (byte) 0x8f, (byte) 0x8f }); out.write(new byte[] { (byte) 0x8f, (byte) 0x8f, (byte) 0x8f, (byte) 0x8f, (byte) 0x8f, (byte) 0x8f }); out.write(new byte[] { (byte) 0x8
@Test public void testWriteEndArray() throws IOException { OutputStream out = new ByteArrayOutputStream(); new UTF8JsonGenerator(null, 0, null, out, BYTE_ARRAY, 0, true).writeEndArray(); out.write(BYTE_ARRAY); out.write(BYTE_ARRAY); out.write(BYTE_ARRAY); out.write(BYTE_ARRAY); out.write(BYTE_ARRAY); out.write(BYTE_ARRAY); out.write(BYTE_ARRAY); out.write(BYTE_ARRAY); out.write(BYTE_ARRAY); out.write(BYTE_ARRAY); out.write(BYTE_ARRAY); out.write(BYTE_ARRAY); out.write(BYTE_ARRAY); out.write(BYTE_ARRAY); out.write(BYTE_ARRAY); out.write(BYTE_ARRAY); out.write(BYTE_ARRAY); out.write(BYTE_ARRAY); out.write(BYTE_ARRAY); out.write(BYTE_ARRAY); out.write(BYTE_ARRAY); out.write(BYTE_ARRAY); out.write(BYTE_ARRAY); out.write(BYTE_ARRAY); out.write(BYTE_ARRAY); out.write(BYTE_ARRAY); out.write(BYTE
@Test public void testWriteEndArray() throws IOException { new UTF8JsonGenerator(null, 0, null, null).writeEndArray(); new UTF8JsonGenerator(null, 0, null, null, null).writeEndArray(); new UTF8JsonGenerator(null, 0, null, null, null).writeEndArray(); new UTF8JsonGenerator(null, 0, null, null, null).writeEndArray(); new UTF8JsonGenerator(null, 0, null, null, null).writeEndArray(); new UTF8JsonGenerator(null, 0, null, null, null).writeEndArray(); new UTF8JsonGenerator(null, 0, null, null, null).writeEndArray(); new UTF8JsonGenerator(null, 0, null, null, null).writeEndArray(); new UTF8JsonGenerator(null, 0, null, null, null).writeEndArray(); new UTF8JsonGenerator(null, 0, null, null, null, null).writeEndArray(); new UTF8JsonGenerator(null, 0, null, null, null, null).writeEndArray(); new UTF8JsonGenerator(null, 0, null, null, null, null).writeEndArray(); new UTF8JsonGenerator(null, 0, null, null
@Test public void testWriteEndArray() throws IOException { new UTF8JsonGenerator(null, 0, null, null, null).writeEndArray(); }
@Test public void testWriteString() throws IOException, JsonGenerationException { final long millis = System.currentTimeMillis(); _generator.writeString(TEST_STRING); _verifyValueWrite(TEST_STRING); _verifyEnd(); }
@Test public void testWriteString() throws IOException, JsonGenerationException { _text.writeString("Hello World!"); _text.writeString("Hello World!"); _text.writeString("Hello World!"); _text.writeString("Hello World!"); _text.writeString("Hello World!"); _text.writeString("World!"); _text.writeString("World!"); _text.writeString("World!"); _text.writeString("World!"); _text.writeString("World!"); _text.writeString("World!"); _text.writeString("World!"); _text.writeString("World!"); _text.writeString("World!"); _text.writeString("World!"); _text.writeString("World!"); assertEquals(new String(CharStreams.toByteArray(new StringReader(text.toCharArray())), UTF_8), UTF_8); }
@Test public void testWriteLongString() throws IOException { String longString = "\uD83D\uDC0A\uDC0B\uDC0C\uDC0D\uDC0E\uDC0F\uDC0E\uDC0F\uDC0G\uDC0G\uDC0D\uDC0E\uDC0F\uDC0G\uDC0E\uDC0F\uDC0G\uDC0E\uDC0F\uDC0G\uDC0E\uDC0F\uDC0G\uDC0E\uDC0F\uDC0G\uDC0E\uDC0F\uDC0G\uDC0E\uDC0F\uDC0G\uDC0E\uDC0F\uDC0G\uDC0E\uDC0F\uDC0G\uDC0E\uDC0F\uDC0G\uDC0E\uDC0F\uDC0G\uDC0E\uDC0F\uDC0G
@Test public void testWriteStar() throws IOException { String str = "{\"foo\":1,\"bar\":2,\"baz\":3\n}"; _writeStringSegments(str.toCharArray(), 0, str.length()); _checkReadString(str); }
@Test public void testWriteLongString() throws IOException, JsonGenerationException { byte[] bytes = new byte[4096]; Arrays.fill(bytes, (byte) 0x80); OutputStream out = new ByteArrayOutputStream(); new UTF8JsonGenerator(null, 0, null, out, bytes, 0, false).writeLongString(bytes, bytes.length); out.flush(); Assert.assertEquals(bytes, new String(bytes, 0, bytes.length)); }
@Test public void testWriteStringSegments() throws IOException { byte[] bytes = "This is a test".getBytes(); _writeStringSegments(_charBuffer, 0, bytes.length); _writeStringSegments(_charBuffer, 0, bytes.length); _writeStringSegments(_charBuffer, 0, bytes.length); _writeStringSegments(_charBuffer, 0, bytes.length); _writeStringSegments(_charBuffer, 0, bytes.length); _writeStringSegments(_charBuffer, 0, bytes.length); _writeStringSegments(_charBuffer, 0, bytes.length); _writeStringSegments(_charBuffer, 0, bytes.length); _writeStringSegments(_charBuffer, 0, bytes.length); _writeStringSegments(_charBuffer, 0, bytes.length); _writeStringSegments(_charBuffer, 0, bytes.length); _writeStringSegments(_charBuffer, 0, bytes.length); _writeStringSegments(_charBuffer, 0, bytes.length); _writeStringSegments(_charBuffer, 0, bytes.length); _writeStringSegments(_charBuffer, 0, bytes.length); _writeStringSegments(_charBuffer, 0, bytes.length); _writeStringSegments(_charBuffer, 0, bytes.length); _writeStringSegments(_charBuffer, 0, bytes.
@Test public void testWriteStar() throws IOException { String str = "{\"foo\":1,\"bar\":2,\"baz\":3\n}"; _writeStringSegments(str.toCharArray(), 0, str.length()); _checkReadString(str); }
@Test public void testWriteLongString() throws IOException, JsonGenerationException { byte[] bytes = new byte[4096]; Arrays.fill(bytes, (byte) 0x80); OutputStream out = new ByteArrayOutputStream(); new UTF8JsonGenerator(null, 0, null, out, bytes, 0, false).writeLongString(bytes, bytes.length); out.flush(); Assert.assertEquals(bytes, new String(bytes, 0, bytes.length)); }
@Test public void testWriteRawUTF8String() throws IOException { byte[] bytes = "Hello world!".getBytes(UTF_8); new UTF8JsonGenerator(null, 0, ObjectCodec.INSTANCE, new ByteArrayOutputStream()) { @Override public Object getOutputTarget() { return null; } }.writeRawUTF8String(bytes, 0, bytes.length); }
@Test public void testWriteRawUTF8String() throws IOException { try (StringWriter out = new StringWriter()) { new UTF8JsonGenerator(null, 0, null, out).writeRawUTF8String(new byte[] { 1, 2, 3, 4, 5 }, 0, 4); Assert.assertEquals("Unexpected value written", 1, out.read()); out.flush(); Assert.assertEquals("Unexpected value written", 1, out.read()); out.write(new byte[] { 1, 2, 3, 4, 5 }, 0, 4); Assert.assertEquals("Unexpected value written", 1, out.read()); out.flush(); Assert.assertEquals("Unexpected value written", 1, out.read()); out.write(new byte[] { 1, 2, 3, 4, 5 }, 0, 4); Assert.assertEquals("Unexpected value written", 1, out.read()); } }
@Test public void testWriteRawUTF8String() throws IOException { OutputStream out = new ByteArrayOutputStream(); new UTF8JsonGenerator(null, 0, null, out).writeRawUTF8String(new byte[] { 1, 2, 3, 4, 5 }, 0, 4); out.flush(); out.close(); String json = new String(out.toByteArray()); assertEquals( "{\"one\":1,\"two\":2,\"three\":3,\"four\":4}", json); }
@Test public void testWriteRawUTF8String() throws IOException, JsonGenerationException { byte[] bytes = "Hello world!".getBytes(); _generator.writeRawUTF8String(bytes, 0, bytes.length); assertEquals(bytes, _generator.getOutputBuffer().length); }
@Test public void testWriteRawUTF8String() throws IOException { OutputStream out = new ByteArrayOutputStream(); new UTF8JsonGenerator(null, 0, null, out).writeRawUTF8String(new byte[] { 1, 2, 3, 4, 5 }, 0, 4); out.flush(); out.close(); try (InputStream in = new InputStreamReader(new ByteArrayInputStream(new byte[] { 1, 2, 3, 4, 5 }))) { new UTF8JsonGenerator(null, 0, null, out).writeRawUTF8String(new byte[] { 1, 2, 3, 4, 5 }, 0, 4); } try (InputStream in = new InputStreamReader(new ByteArrayInputStream(new byte[] { 1, 2, 3, 4, 5 }))) { new UTF8JsonGenerator(null, 0, null, out).writeRawUTF8String(new byte[] { 1, 2, 3, 4, 5 }, 0, 4); } }
@Test public void testWriteRawUTF8String() throws IOException { OutputStream out = new ByteArrayOutputStream(); new UTF8JsonGenerator(null, 0, null, out).writeRawUTF8String(new byte[] { 1, 2, 3, 4, 5 }, 0, 4); out.flush(); out.close(); String json = new String(out.toByteArray()); assertEquals( "{\"one\":1,\"two\":2,\"three\":3,\"four\":4}", json); }
@Test public void testWriteRawUTF8String() throws IOException, JsonGenerationException { byte[] bytes = "Hello world!".getBytes(); _generator.writeRawUTF8String(bytes, 0, bytes.length); assertEquals(bytes, _generator.getOutputBuffer().length); }
@Test public void testVerifyValueWrite_invalid() throws IOException { new Expectations() {{ (JsonWriteContext)writeValue(); result = -1; } }; _verifyValueWrite("foo"); }
@Test public void testVerifyValueWrite_withPrettyPrinter_withPrettyPrinter() throws IOException, JsonGenerationException { new Expectations() {{ _writeContext.writeValue(); result = 1; _cfgPrettyPrinter = null; }}; _verifyValueWrite("\"test\""); }
@Test public void testVerifyValueWrite_withNestedField() throws IOException, JsonGenerationException { new Expectations() {{ _writeContext.writeValue(); result = 1; _cfgPrettyPrinter = null; }}; _testee.verifyValueWrite("field"); }
@Test public void testArray() throws IOException { ioContext.setResourceManaged(true); JsonStreamContext ctxt = new JsonStreamContext(ioContext, null, null); new UTF8JsonGenerator(ioContext, features, ObjectCodCodings.OBJECT, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null
@Test public void testWriteBytes() throws IOException { byte[] bytes = new byte[MAX_BYTES_TO_BUFFER]; _writeBytes(bytes, 0, bytes.length); assertEquals(bytes.length, MAX_BYTES_TO_BUFFER); }
@Test public void testWriteTail() throws IOException { new UTF8JsonGenerator(null, 0, null, null, null).writeTail(MAX_BYTES_TO_BUFFER + 1); new UTF8JsonGenerator(null, 0, null, null, null).writeTail(MAX_BYTES_TO_BUFFER + 1); new UTF8JsonGenerator(null, 0, null, null, null).writeTail(MAX_BYTES_TO_BUFFER + 1); new UTF8JsonGenerator(null, 0, null, null, null).writeTail(MAX_BYTES_TO_BUFFER + 1); new UTF8JsonGenerator(null, 0, null, null, null).writeTail(MAX_BYTES_TO_BUFFER + 1); new UTF8JsonGenerator(null, 0, null, null, null).writeTail(MAX_BYTES_TO_BUFFER + 1); new UTF8JsonGenerator(null, 0, null, null, null).writeTail(MAX_BYTES_TO_BUFFER + 1); new UTF8JsonGenerator(null, 0, null, null, null).writeTail(MAX_BYTES_TO_BUFFER + 1); new UTF8JsonGenerator(null, 0, null, null, null).writeTail(MAX_BYTES_TO_BUFFER + 1); new UTF
@Test public void testWriteBuffer() throws IOException { OutputStream outputStream = new ByteArrayOutputStream(); try (UTF8JsonGenerator generator = new UTF8JsonGenerator(null, 0, null, outputStream)) { generator.writeStartArray(); generator.writeStartArray(); generator.writeStartArray(); generator.writeStartArray(); generator.writeStartArray(); generator.writeStartArray(); generator.writeStartArray(); generator.writeStartArray(); generator.writeStartArray(); generator.writeStartArray(); } catch (IOException e) { e.printStackTrace(); fail("Unexpected exception: " + e); } }
@Test public void testWriteBytes() throws IOException { OutputStream outputStream = new ByteArrayOutputStream(); UTF8JsonGenerator generator = new UTF8JsonGenerator(null, 0, null, outputStream); generator.writeStartArray(new byte[] {0, 1, 2, 3}); generator.writeStartObject(new byte[] {4, 5, 6, 7, 8, 9}); generator.writeStartObject(new byte[] {9, 10, 11, 12, 13, 14, 15, 16}); generator.writeStartArray(new byte[] {10, 11, 12, 13, 14, 15, 16}); generator.writeStartObject(new byte[] {9, 10, 11, 12, 13, 14, 15, 16}); generator.writeStartObject(new byte[] {9, 10, 11, 12, 13, 14, 15, 16}); generator.writeStartObject(new byte[] {9, 10, 11, 12, 13, 14, 15, 16}); generator.writeStartObject(new byte[] {9, 10, 11, 12, 13, 14, 15, 16}); generator.writeStartObject(new byte[] {9, 10, 11, 12, 13, 14, 15, 16}); generator.writeStartObject(new byte[] {9, 10, 11, 12, 13, 14, 15, 16}); generator.writeStartObject(new byte[] {9, 10, 11, 12, 13, 14, 15, 16}); generator.writeStartObject(new byte[] {9, 10, 11, 12, 13,
@Test public void testWrite() throws IOException { _outputStream.write(TEST_DATA, 0, TEST_DATA.length); _outputStream.write(TEST_DATA, 0, TEST_DATA.length); _outputStream.write(TEST_DATA, 0, TEST_DATA.length); _outputStream.write(TEST_DATA, 0, TEST_DATA.length); _outputStream.write(TEST_DATA, 0, TEST_DATA.length); _outputStream.write(TEST_DATA, 0, TEST_DATA.length); _outputStream.write(TEST_DATA, 0, TEST_DATA.length); _outputStream.write(TEST_DATA, 0, TEST_DATA.length); _outputStream.flushBuffer(); _outputStream.flushBuffer(); _outputStream.write(TEST_DATA, 0, TEST_DATA.length); _outputStream.flushBuffer(); _outputStream.write(TEST_DATA, 0, TEST_DATA.length); _outputStream.flushBuffer(); _outputStream.write(TEST_DATA, 0, TEST_DATA.length); _outputStream.flushBuffer(); _outputStream.flushBuffer(); _outputStream.write(TEST_DATA, 0, TEST_DATA.length);
@Test public void testWriteBytes() throws IOException { String str = "{\"a\":1,\"b\":2,\"c\":3}"; ByteArrayOutputStream out = new ByteArrayOutputStream(); new UTF8JsonGenerator(null, 0, null, out, str.getBytes(StandardCharsets.UTF_8), 0, false).writeStartArray(); out.writeStartArray(); out.writeStartArray(); out.writeStartArray(); out.writeStartArray(); out.writeStartArray(); out.writeStartArray(); out.writeStartArray(); out.writeStartArray(); out.writeStartArray(); out.writeStartArray(); out.writeStartArray(); out.writeStartArray(); out.writeStartArray(); out.writeStartArray(); out.writeStartArray(); out.writeStartArray(); out.writeStartArray(); out.writeStartArray(); out.writeStartArray(); out.writeStartArray(); out.writeStartArray(); out.writeStartArray(); out.writeStartArray(); out.writeStartArray(); out.writeStartArray(); out.writeStartArray(); out.writeStartArray(); out.writeStartArray(); out.writeStartArray(); out.writeStartArray(); out.writeStartArray(); out.writeStart
@Test public void testSystemCopy() throws IOException { byte[] bytes = new byte[MAX_BYTES_TO_BUFFER]; _writeBytes(bytes, 0, MAX_BYTES_TO_BUFFER); assertArrayEquals(bytes, _outputBuffer); }
@Test public void testWriteBytes() throws IOException { OutputStream out = new ByteArrayOutputStream(); new UTF8JsonGenerator(null, 0, null, out, new byte[] {0, 1, 2, 3, 4}, 0, true).writeStartArray(); out.writeStartArray(); out.writeStartArray(); out.writeStartArray(); out.writeStartArray(); out.writeStartArray(); out.writeStartArray(); out.writeStartArray(); out.writeStartArray(); out.writeStartArray(); out.writeStartArray(); out.writeStartArray(); out.writeStartArray(); out.writeStartArray(); out.writeStartArray(); out.writeStartArray(); out.writeStartArray(); out.writeStartArray(); out.writeStartArray(); out.writeStartArray(); out.writeStartArray(); out.writeStartArray(); out.writeStartArray(); out.writeStartArray(); out.writeStartArray(); out.writeStartArray(); out.writeStartArray(); out.writeStartArray(); out.writeStartArray(); out.writeStartArray(); out.writeStartArray(); out.writeStartArray(); out.writeStartArray(); out.writeStartArray(); }
@Test public void testWriteStringSegments() throws IOException { _writeStringSegments("This is a test."); _writeStringSegments("This is a test."); _writeStringSegments("This is a test."); _writeStringSegments("This is a test."); _writeStringSegments("This is a test."); _writeStringSegments("This is a test."); _flushBuffer(); _writeStringSegments("This is a test."); _flushBuffer(); _writeStringSegments("This is a test."); _flushBuffer(); _writeStringSegments("This is a test."); _writeStringSegments("This is a test."); _flushBuffer(); _writeStringSegments("This is a test."); _flushBuffer(); _writeStringSegments("This is a test."); _flushBuffer(); _writeStringSegments("This is a test."); _flushBuffer(); _writeStringSegments("This is a test."); _flushBuffer(); _writeStringSegments("This is a test."); _flushBuffer(); _writeStringSegments("This is a test."); _flushBuffer(); _writeStringSegments("This is a test."); _flushBuffer(); _writeStringSegments("This is a test."); _flushBuffer(); _writeStringSegments("This is a test."); _flushBuffer(); _write
@Test public void testWriteStringSegments() throws IOException { String s = "{\"a\":1,\"b\":2,\"c\":3}"; _writeStringSegments(s.toCharArray(), 1, 2); _flushBuffer(); String s2 = "{\"a\":1,\"b\":2,\"c\":3}"; _writeStringSegments(s2.toCharArray(), 2, 3); _flushBuffer(); String s3 = "{\"a\":1,\"b\":2,\"c\":3}"; _writeStringSegments(s3.toCharArray(), 3, 3); _writeStringSegments(s3.toCharArray(), 3, 3); _flushBuffer(); String s4 = "{\"a\":1,\"b\":2,\"c\":3}"; _writeStringSegments(s4.toCharArray(), 3, 4); _writeStringSegments(s4.toCharArray(), 3, 4); _flushBuffer(); String s5 = "{\"a\":1,\"b\":2,\"c\":3}"; _writeStringSegments(s5.toCharArray(), 3, 5); _writeStringSegments(s5.toCharArray(), 3, 5); _flushBuffer(); String s6 = "{\"a\":1,\"b\":2,\"c\":3}"; _writeStringSegments(s6.toCharArray(), 3, 6); _
@Test public void testInRoot() { JsonStreamContext context = new JsonStreamContext(); context.setParent(new JsonStreamContext()); Assert.assertTrue(context.inRoot()); context.setParent(new JsonStreamContext()); Assert.assertFalse(context.inRoot()); context.setParent(new JsonStreamContext()); Assert.assertTrue(context.inRoot()); context.setParent(new JsonStreamContext()); Assert.assertTrue(context.inRoot()); context.setParent(new JsonStreamContext()); Assert.assertTrue(context.inRoot()); context.setParent(new JsonStreamContext()); Assert.assertTrue(context.inRoot()); }
@Test public void getCurrentIndex() { JsonStreamContext context = new JsonStreamContext(); context.setType(JsonStreamContext.TYPE_ROOT); context.setCurrentIndex(-1); Assert.assertEquals(0, context.getCurrentIndex()); context.setType(JsonStreamContext.TYPE_ARRAY); context.setCurrentIndex(JsonStreamContext.TYPE_OBJECT); Assert.assertEquals(1, context.getCurrentIndex()); context.setType(JsonStreamContext.TYPE_ARRAY); context.setCurrentIndex(JsonStreamContext.TYPE_OBJECT); Assert.assertEquals(0, context.getCurrentIndex()); context.setType(JsonStreamContext.TYPE_OBJECT); Assert.assertEquals(1, context.getCurrentIndex()); context.setType(JsonStreamContext.TYPE_ROOT); context.setCurrentIndex(JsonStreamContext.TYPE_ARRAY); Assert.assertEquals(2, context.getCurrentIndex()); context.setType(JsonStreamContext.TYPE_OBJECT); Assert.assertEquals(0, context.getCurrentIndex()); context.setType(JsonStreamContext.TYPE_ROOT); context.setCurrentIndex(JsonStreamContext.TYPE_ARRAY); Assert.assertEquals(3, context.getCurrentIndex()); Assert.assertEquals(0, context.getCurrentIndex()); Assert.assert
@Test public void getCurrentIndex() { JsonStreamContext ctx = new JsonStreamContext(); ctx.setIndex(-1); assertEquals(0, ctx.getCurrentIndex()); }
@Test public void hasJSONFormat() throws IOException { InputAccessor acc = new InputAccessor(LINE_TEST_STRING_XML.getBytes(UTF_8)); Assert.assertEquals(MatchStrength.INCONCLUSIVE, hasJSONFormat(acc)); acc = new InputAccessor(LINE_TEST_STRING_XML2.getBytes(UTF_8)); Assert.assertEquals(MatchStrength.NO_MATCH, hasJSONFormat(acc)); acc = new InputAccessor(LINE_TEST_STRING_XML3.getBytes(UTF_8)); Assert.assertEquals(MatchStrength.NO_MATCH, hasJSONFormat(acc)); acc = new InputAccessor(LINE_TEST_STRING_XML_3.getBytes(UTF_8)); Assert.assertEquals(MatchStrength.INCONCLUSIVE, hasJSONFormat(acc)); acc = new InputAccessor(LINE_TEST_STRING_XML_3.getBytes(UTF_8)); Assert.assertEquals(MatchStrength.INCONCLUSIVE, hasJSONFormat(acc)); acc = new InputAccessor(LINE_TEST_STRING_XML_3.getBytes(UTF_8)); Assert.assertEquals(MatchStrength.NO_MATCH, hasJSONFormat(acc)); acc = new InputAccessor(LINE_TEST_STRING_XML_3.getBytes(
@Test public void hasJSONFormat() throws IOException { InputAccessor acc = new InputAccessor(in("10000100001000010000100001000010000100001000010000100001000000", UTF_8_BOM_1, UTF_BOM_2, UTF_BOM_3, UTF_BOM_4, DIGITS, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
@Test public void hasJSONFormat() throws IOException { InputAccessor acc = new InputAccessor(in("a"), UTF_8_BOM_1, UTF_BOM_2, UTF_BOM_3, UTF_BOM_4, DIGITS, DIGITS_LOW); assertStrength(MatchStrength.INCONCLUSIVE, acc); acc = new InputAccessor(in("a"), UTF_8_BOM_1, UTF_BOM_2, UTF_BOM_3, DIGITS, DIGITS_LOW); assertStrength(MatchStrength.NO_MATCH, acc); acc = new InputAccessor(in("a"), UTF_8_BOM_1, UTF_BOM_3, DIGITS, DIGITS_LOW); assertStrength(MatchStrength.INCONCLUSIVE, acc); acc = new InputAccessor(in("a"), UTF_8_BOM_1, UTF_BOM_4, DIGITS, DIGITS_LOW); assertStrength(MatchStrength.INCONCLUSIVE, acc); acc = new InputAccessor(in("a"), UTF_8_BOM_1, UTF_BOM_4, DIGITS, DIGITS_LOW); assertStrength(MatchStrength.INCONCLUSIVE, acc); acc = new InputAccessor(in("a"), UTF_8_BOM_1,
@Test public void hasJSONFormat() throws IOException { InputAccessor acc = new InputAccessor(in("\""), UTF_8_BOM_1, UTF_8_BOM_1, UTF_8_BOM_2, UTF_8_BOM_3, UTF_8_BOM_3, UTF_8_BOM_4, UTF_8_BOM_5, UTF_8_BOM_6, UTF_8_BOM_7, UTF_8_BOM_8_8_BOM_8, UTF_8_BOM_9, UTF_8_BOM_8, UTF_8_BOM_9, UTF_8_BOM_8, UTF_8_BOM_9, UTF_8_BOM_8, UTF_8_BOM_9, UTF_8_BOM_8, UTF_8_BOM_8, UTF_8_BOM_9, UTF_8_BOM_8, UTF_8_BOM_8, UTF_8_BOM_9, UTF_8_BOM_8, UTF_8_BOM_8, UTF_8_BOM_8, UTF_8_BOM_8, UTF_8_BOM_8, UTF_8_BOM_8, UTF_8_BOM_8, UTF_8_BOM_8, UTF_8_BOM_8, UTF_8_BOM_
@Test public void hasJSONFormat() throws IOException { InputAccessor acc = new InputAccessor(in("0x00"), UTF8_BOM_1, UTF8_BOM_2, UTF8_BOM_3, UTF8_BOM_4, UTF8_BOM_5, UTF8_BOM_6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
@Test public void hasJSONFormat() throws IOException { InputAccessor acc = new InputAccessor(in("0x00"), UTF_8_BOM_1, UTF_BOM_2, UTF_BOM_3, UTF_BOM_4, UTF_BOM_5, UTF_BOM_7, UTF_BOM_8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
@Test public void hasJSONFormat() throws IOException { InputAccessor acc = new InputAccessor(new byte[] { 'a', 'b', 'c' }); Assert.assertEquals(Strength.NO_MATCH, hasJSONFormat(acc)); acc = new InputAccessor(new byte[] { 'a', 'b', 'c' }); Assert.assertEquals(Strength.NO_MATCH, hasJSONFormat(acc)); acc = new InputAccessor(new byte[] { 'a', 'b', 'c' }); Assert.assertEquals(Strength.INCONCLUSIVE, hasJSONFormat(acc)); acc = new InputAccessor(new byte[] { 'a', 'b', 'c' }); Assert.assertEquals(Strength.NO_MATCH, hasJSONFormat(acc)); acc = new InputAccessor(new byte[] { 'a', 'b', 'c' }); Assert.assertEquals(Strength.INCONCLUSIVE, hasJSONFormat(acc)); acc = new InputAccessor(new byte[] { 'a', 'b', 'c' }); Assert.assertEquals(Strength.NO_MATCH, hasJSONFormat(acc)); acc = new InputAccessor(new byte[] { 'a', 'b', 'c' });
@Test public void hasJSONFormat() throws IOException { InputAccessor acc = new InputAccessor(new byte[] { (byte) 0x80, (byte) 0x80, (byte) 0x80, (byte) 0x80, (byte) 0x80, (byte) 0x80, (byte) 0x80, (byte) 0x80, (byte) 0x80, (byte) 0x80, (byte) 0x80, (byte) 0x80, (byte) 0x80, (byte) 0x80, (byte) 0x80, (byte) 0x80, (byte) 0x80, (byte) 0x80, (byte) 0x80, (byte) 0x80, (byte) 0x80, (byte) 0x80, (byte) 0x80, (byte) 0x80, (byte) 0x80, (byte) 0x80, (byte) 0x80, (byte) 0x80, (byte) 0x80, (byte) 0x80, (byte) 0x80, (byte) 0x80, (byte) 0x80, (
@Test public void hasJSONFormat() throws IOException { InputAccessor acc = new InputAccessor(new byte[] { 'a' }); Assert.assertEquals(MatchStrength.INCONCLUSIVE, hasJSONFormat(acc)); acc = new InputAccessor(new byte[] { 'a' }); Assert.assertEquals(MatchStrength.NO_MATCH, hasJSONFormat(acc)); acc = new InputAccessor(new byte[] { 'a' }); Assert.assertEquals(MatchStrength.INCONCLUSIVE, hasJSONFormat(acc)); acc = new InputAccessor(new byte[] { 'a' }); Assert.assertEquals(MatchStrength.NO_MATCH, hasJSONFormat(acc)); acc = new InputAccessor(new byte[] { 'a' }); Assert.assertEquals(MatchStrength.INCONCLUSIVE, hasJSONFormat(acc)); acc = new InputAccessor(new byte[] { 'a' }); Assert.assertEquals(MatchStrength.NO_MATCH, hasJSONFormat(acc)); acc = new InputAccessor(new byte[] { 'a' }); Assert.assertEquals(MatchStrength.INCONCLUSIVE, hasJSONFormat(acc)); acc = new InputAccessor(new byte[] { 'a' }); Assert.assertEquals
@Test public void hasJSONFormat() throws IOException { InputAccessor acc = new InputAccessor(in("abc\u00e1\u00e2\u00e3\u00e4\u00e5\u00e6\u00e7"), UTF_8_BOM_1, UTF_8_BOM_2, UTF_8_BOM_3, UTF_8_BOM_4, UTF_8_BOM_5, UTF_8_BOM_7, UTF_8_BOM_8, UTF_8_BOM_8, UTF_8_BOM_7, UTF_8_BOM_8, UTF_8_BOM_8, UTF_8_BOM_8, UTF_8_BOM_8, UTF_8_BOM_8, UTF_8_BOM_8, UTF_8_BOM_8, UTF_8_BOM_8, UTF_8_BOM_8, UTF_8_BOM_8, UTF_8_BOM_8, UTF_8_BOM_8, UTF_8_BOM_8, UTF_8_BOM_8, UTF_8_BOM_8, UTF_8_BOM_8, UTF_8_BOM_8, UTF_8_BOM_8, UTF_8_BOM_8, UTF_8_BOM_8, UTF_8
@Test public void hasJSONFormat() throws IOException { InputAccessor acc = new InputAccessor(in("0x00"), UTF_8_BOM_1, UTF_BOM_2, UTF_BOM_3, UTF_BOM_4, UTF_BOM_5, UTF_BOM_7, UTF_BOM_8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
@Test public void hasJSONFormat() throws IOException { InputAccessor acc = new InputAccessor(new byte[] { 'a' }); Assert.assertEquals(MatchStrength.INCONCLUSIVE, hasJSONFormat(acc)); acc = new InputAccessor(new byte[] { 'a' }); Assert.assertEquals(MatchStrength.NO_MATCH, hasJSONFormat(acc)); acc = new InputAccessor(new byte[] { 'a' }); Assert.assertEquals(MatchStrength.INCONCLUSIVE, hasJSONFormat(acc)); acc = new InputAccessor(new byte[] { 'a' }); Assert.assertEquals(MatchStrength.NO_MATCH, hasJSONFormat(acc)); acc = new InputAccessor(new byte[] { 'a' }); Assert.assertEquals(MatchStrength.INCONCLUSIVE, hasJSONFormat(acc)); acc = new InputAccessor(new byte[] { 'a' }); Assert.assertEquals(MatchStrength.INCOCLUSIVE, hasJSONFormat(acc)); acc = new InputAccessor(new byte[] { 'a' }); Assert.assertEquals(MatchStrength.INCOCLUSIVE, hasJSONFormat(acc)); acc = new InputAccessor(new byte[] { 'a' }); Assert.assertEquals
@Test public void hasJSONFormat() throws IOException { InputAccessor acc = new InputAccessor(LINE_TEST_DATA); assertStrength(MatchStrength.SOLID_MATCH, hasJSONFormat(acc)); acc = new InputAccessor(LINE_TEST_DATA); assertStrength(MatchStrength.NO_MATCH, hasJSONFormat(acc)); acc = new InputAccessor(LINE_TEST_DATA); assertStrength(MatchStrength.NO_MATCH, hasJSONFormat(acc)); acc = new InputAccessor(LINE_TEST_DATA); assertStrength(MatchStrength.INCONCLUSIVE, hasJSONFormat(acc)); acc = new InputAccessor(LINE_TEST_DATA); assertStrength(MatchStrength.INCONCLUSIVE, hasJSONFormat(acc)); acc = new InputAccessor(LINE_TEST_DATA); assertStrength(MatchStrength.NO_MATCH, hasJSONFormat(acc)); acc = new InputAccessor(LINE_TEST_DATA); assertStrength(MatchStrength.INCONCLUSIVE, hasJSONFormat(acc)); acc = new InputAccessor(LINE_TEST_DATA); assertStrength(MatchStrength.NO_MATCH, hasJSONFormat(acc)); acc = new InputAccessor(LINE_TEST_DATA); assertStrength(MatchStrength
@Test public void testSkipSpace() throws IOException { int skipSpace = -1; try { inputAccessor.nextByte(); inputAccessor.nextByte(); inputAccessor.nextByte(); inputAccessor.nextByte(); inputAccessor.nextByte(); inputAccessor.nextByte(); inputAccessor.nextByte(); inputAccessor.nextByte(); inputAccessor.nextByte(); Assert.assertEquals(-1, skipSpace(inputAccessor)); Assert.assertEquals(-1, skipSpace(inputAccessor)); Assert.assertEquals(-1, skipSpace(inputAccessor)); Assert.assertEquals(-1, skipSpace(inputAccessor)); } finally { inputAccessor.close(); } }
@Test public void testSkipSpace() throws IOException { int expected = 0; Mockito.when(acc.hasMoreBytes()).thenReturn(true); Mockito.when(acc.nextByte()).thenReturn(expected); Mockito.when(acc.hasMoreBytes()).thenReturn(true); Mockito.when(acc.hasMoreBytes()).thenReturn(true); Assert.assertEquals(expected, ByteSourceJsonBootstrapper.skipSpace(acc, (byte)'')); Mockito.verify(acc, Mockito.times(1)).hasMoreBytes(); Mockito.verify(acc, Mockito.times(1)).hasMoreBytes(); Mockito.verify(acc, Mockito.times(1)).hasMoreBytes(); Mockito.verify(acc, Mockito.times(1)).hasMoreBytes(); }
@Test public void testSkipSpace() throws IOException { int expected = 0; inputAccessor = new MockInputAccessor(new byte[] { 'a', 'b', 'c' }, expected); int actual = skipSpace(inputAccessor); Assert.assertEquals(expected, actual); }
@Test public void testSkipSpace() throws IOException { byte[] bytes = new byte[] { 'a', 'b', 'c' }; int skipSpace = skipSpace(new InputAccessorImpl(bytes), 'a'); assertEquals(-1, skipSpace); }
@Test public void testSkipSpace() throws IOException { byte[] bytes = new byte[] { 'r', 't', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o
@Test public void testSkipSpace() throws IOException { byte[] bytes = new byte[] { 'a', 'b', 'c' }; int expected = 'a' | 'b' | 'c' | 'b' | 'c' | 'b' | 'c' | 'b' | 'c' | 'b' | 'c' | 'b' | 'c' | 'b' | 'c' | 'b' | 'c' | 'b' | 'c' | 'b' | 'c' | 'b' | 'c' | 'b' | 'c' | 'b' | 'c' | 'b' | 'c' | 'b' | 'c' | 'b' | 'c' | 'b' | 'c' | 'b' | 'c' | 'b' | 'c' | 'b' | 'c' | 'b' | 'c' | 'b' | 'c' | 'b' | 'c' | 'b' | 'c' | 'b' | 'c' | 'b' | 'c' | 'b' | 'c' | 'b'
@Test public void testSkipSpace() throws IOException { byte[] bytes = new byte[] { 'a', 'b', 'c' }; try (ByteArrayInputStream in = new ByteArrayInputStream(bytes)) { int skipped = skipSpace(in, 'a'); Assert.assertEquals(-1, skipped); } }
@Test public void testSkipSpace() throws IOException { byte[] input = new byte[] { 'a', 'b', 'c', '\r', '\n', '\t', 'a', 'b', 'c' }; int skipSpace = Stream.of(input).skipSpace(new byte[] { '\r', '\n', '\t', '\r', '\n', '\t', '\r', '\n', '\t', '\r', '\n', '\t', '\r', '\n', '\t', '\r', '\n', '\t', '\r', '\n', '\r', '\n', '\t', '\r', '\n', '\r', '\n', '\t', '\r', '\n', '\r', '\n', '\t', '\r', '\n', '\r', '\n', '\t', '\r', '\n', '\r', '\n', '\t', '\r', '\r', '\n', '\r', '\t', '\r', '\n', '\r', '\n', '\t', '\r', '\n', '\r', '\n', '\r', '\t', '\r', '\n', '\r', '\n', '\r
@Test public void testSkipSpace() throws IOException { InputAccessor acc = new InputAccessor(new byte[] { 'r', '\n', '\t', '\r', '\r', '\t', '\r', '\r', '\t', '\r', '\t', '\r', '\t', '\r', '\r', '\t', '\r', '\t', '\r', '\t', '\r', '\t', '\r', '\t', '\r', '\t', '\r', '\t', '\r', '\r', '\t', '\r', '\t', '\r', '\r', '\t', '\r', '\r', '\t', '\r', '\r', '\t', '\r', '\r', '\t', '\r', '\r', '\t', '\r', '\r', '\r', '\t', '\r', '\r', '\t', '\r', '\r', '\r', '\t', '\r', '\r', '\t', '\r', '\r', '\r', '\t', '\r', '\r', '\r', '\t', '\r', '\r', '\r', '\t', '\r', '\r', '\r', '\
@Test public void testSkipSpace() throws IOException { String input = "{\"a\":1,\"b\":2,\"c\":3}"; String expected = "{\"a\":1,\"b\":2,\"c\":3}"; InputAccessor acc = new InputAccessor(input.getBytes()); assertArrayEquals(expected.getBytes(), acc.nextByte()); assertArrayEquals(expected.getBytes(), acc.nextByte()); assertArrayEquals(expected.getBytes(), acc.nextByte()); assertArrayEquals(expected.getBytes(), acc.nextByte()); assertArrayEquals(expected.getBytes(), acc.nextByte()); assertArrayEquals(expected.getBytes(), acc.nextByte()); assertArrayEquals(expected.getBytes(), acc.nextByte()); assertArrayEquals(expected.getBytes(), acc.nextByte()); assertArrayEquals(expected.getBytes(), acc.nextByte()); assertArrayEquals(expected.getBytes(), acc.nextByte()); assertArrayEquals(expected.getBytes(), acc.nextByte()); assertArrayEquals(expected.getBytes(), acc.nextByte()); assertArrayEquals(expected.getBytes(), acc.nextByte()); assertArrayEquals(expected.getBytes(), acc.nextByte()); assertArrayEquals(expected.getBytes(), acc.nextByte()); assertArrayEquals(expected.getBytes(), acc.nextByte()); assertArrayEquals(expected.getBytes
@Test public void testSkipSpace() throws IOException { byte[] bytes = new byte[] { 'a', 'b', 'c' }; int expected = 'a' | 'b' | 'c' | 'b' | 'c' | 'b' | 'c' | 'b' | 'c' | 'b' | 'c' | 'b' | 'c' | 'b' | 'c' | 'b' | 'c' | 'b' | 'c' | 'b' | 'c' | 'b' | 'c' | 'b' | 'c' | 'b' | 'c' | 'b' | 'c' | 'b' | 'c' | 'b' | 'c' | 'b' | 'c' | 'b' | 'c' | 'b' | 'c' | 'b' | 'c' | 'b' | 'c' | 'b' | 'c' | 'b' | 'c' | 'b' | 'c' | 'b' | 'c' | 'b' | 'c' | 'b' | 'c' | 'b'
@Test public void testArray() { JsonGenerator generator = Json.createGenerator(); assertEquals(7, generator.getMask()); }
@Test public void testJsonGenerator() { JsonGenerator generator = Json.createGenerator(); assertTrue(generator.hasNext()); assertTrue(generator.next()); assertTrue(generator.hasNext()); assertTrue(generator.next()); assertTrue(generator.hasNext()); Json.registerFeature(Feature.class, "test", new String[]{"test"}, null); generator = Json.createGenerator(); assertTrue(generator.hasNext()); assertTrue(generator.next()); assertTrue(generator.hasNext()); assertTrue(generator.next()); assertTrue(generator.hasNext()); }
@Test public void testBase64Variant() { Base64Variant base64Variant; base64Variant = new Base64Variant(NAME, ALPHABET_ALPHABET, true,'', 10); assertEquals(BASE64_VALUE, base64Variant.asciiToBase64()); base64Variant = new Base64Variant(NAME, ALPHABET_ALPHABET, true,'', 10); assertEquals(BASE64_VALUE, base64Variant.asciiToBase64()); }
@Test public void testBase64Variant() { Base64Variant base64Variant = new Base64Variant("name", "alphabet", true, ':', 1); assertEquals("name", base64Variant.getName()); assertEquals("alphabet", base64Variant.getAlphabet()); assertEquals(1, base64Variant.getLineLength()); assertEquals('1', base64Variant.getBase64Line()); assertEquals('1', base64Variant.getBase64Line()); assertEquals('1', base64Variant.getBase64Line()); assertEquals('1', base64Variant.getBase64Line()); assertEquals('1', base64Variant.getBase64Line()); assertEquals('1', base64Variant.getBase64Line()); assertEquals('1', base64Variant.getBase64Line()); assertEquals('1', base64Variant.getBase64Line()); assertEquals('1', base64Variant.getBase64Line()); assertEquals('1', base64Variant.getBase64Line()); assertEquals('1', base64Variant.getBase64Line()); assertEquals('1', base64Variant.getBase64Line()); assertEquals('1', base64Variant.getBase64Line()); assertEquals('1', base64Variant.getBase64Line()); assertEquals('1', base64Variant.getBase64Line()); assertEquals('1', base64Variant.getBase64
@Test public void testBase64Variant() { Base64Variant base64Variant = new Base64Variant("name", "Alphabet", true,'', 10); assertEquals("name", base64Variant.getName()); assertEquals(false, base64Variant.isPadding()); assertEquals('', base64Variant.getPaddingChar()); assertEquals(10, base64Variant.getLineLength()); assertEquals('a', base64Variant.getAsciiToBase64(0)); assertEquals(BASE64_VALUE_PADDING, base64Variant.asciiToBase64(1)); assertEquals(BASE64_VALUE_PADDING, base64Variant.asciiToBase64(2)); assertEquals(BASE64_VALUE_PADDING, base64Variant.asciiToBase64(3)); assertEquals(BASE64_VALUE_PADDING, base64Variant.asciiToBase64(4)); assertEquals(BASE64_VALUE_PADDING, base64Variant.asciiToBase64(5)); assertEquals(BASE64_VALUE_PADDING, base64Variant.asciiToBase64(6)); assertEquals(BASE64_VALUE_PADDING, base64Variant.asciiToBase64(7)); assertEquals(BASE64_VALUE_PADDING, base64Variant.asciiToBase64(8)); assertEquals(BASE64_VALUE_PADDING, base64Variant.ascii
@Test public void testBase64Variant() { Base64Variant base64Variant = new Base64Variant("name", "Alphabet", true,'', 10); assertEquals("name", base64Variant.getName()); assertEquals(false, base64Variant.isUsingPadding()); assertEquals('', base64Variant.getPaddingChar()); assertEquals(10, base64Variant.getLineLength()); assertEquals('', base64Variant.getPaddingChar()); assertEquals(10, base64Variant.getMaxLineLength()); assertEquals(10, base64Variant.asciiToBase64().length); assertEquals("", base64Variant.asciiToBase64[0]); assertEquals("", base64Variant.asciiToBase64[1]); assertEquals("", base64Variant.asciiToBase64[2]); assertEquals("", base64Variant.asciiToBase64[3]); assertEquals("", base64Variant.asciiToBase64[4]); assertEquals("", base64Variant.asciiToBase64[5]); assertEquals("", base64Variant.asciiToBase64[6]); assertEquals("", base64Variant.asciiToBase64[7]); assertEquals("", base64Variant.asciiToBase64[8]); assertEquals("", base64Variant.asciiToBase64[9]); assertEquals("", base64Variant.asciiToBase64[10]); assertEquals
@Test public void testBase64Variant() { Base64Variant base64Variant; base64Variant = new Base64Variant("name", "Alphabet", true,'', 10); assertEquals("name", base64Variant.getName()); assertEquals(64, base64Variant.getMaxLineLength()); assertEquals("alphabet", base64Variant.getAlphabet()); assertEquals('0', base64Variant.asciiToBase64(0)); assertEquals('1', base64Variant.asciiToBase64(1)); assertEquals('1', base64Variant.asciiToBase64(2)); assertEquals('1', base64Variant.asciiToBase64(3)); assertEquals('1', base64Variant.asciiToBase64(4)); assertEquals('1', base64Variant.asciiToBase64(5)); assertEquals('1', base64Variant.asciiToBase64(6)); assertEquals('1', base64Variant.asciiToBase64(7)); assertEquals('1', base64Variant.asciiToBase64(8)); assertEquals('1', base64Variant.asciiToBase64(9)); assertEquals('1', base64Variant.asciiToBase64(10)); assertEquals('1', base64Variant.asciiToBase64(11)); assertEquals('1', base64Variant.asciiToBase64(12)); assertEquals('1', base64Variant.asciiToBase64(13)); assertEquals('
@Test public void testBase64Variant() { String alpha = "abc"; Base64Variant variant = new Base64Variant(alpha); assertEquals(variant.getName(), "abc"); assertEquals(variant.getAlphabet(), "abc"); assertEquals(variant.getLineLength(), 1); assertEquals(variant.getMaxLineLength(), 64); assertEquals(variant.getAlphabet(), "abc"); assertEquals(variant.getLineSeparator(), "="); assertEquals(variant.getLineSeparator(), "="); assertEquals(variant.getLineSeparator(), "="); assertEquals(variant.getLineSeparator(), "="); assertEquals(variant.getLineSeparator(), "="); assertEquals(variant.getLineSeparator(), "="); assertEquals(variant.getLineSeparator(), "="); assertEquals(variant.getLineSeparator(), "="); assertEquals(variant.getLineSeparator(), "="); assertEquals(variant.getLineSeparator(), "="); assertEquals(variant.getLineSeparator(), "="); assertEquals(variant.getLineSeparator(), "="); assertEquals(variant.getLineSeparator(), "="); assertEquals(variant.getLineSeparator(), "="); assertEquals(variant.getLineSeparator(), "="); assertEquals(variant.getLineSeparator(), "="); assertEquals(
@Test public void testBase64Variant() { Base64Variant base64Variant = new Base64Variant("name", "a", false,'', 64); assertEquals("name", base64Variant.name); assertEquals("a", base64Variant.asciiToBase64[0]); assertEquals("", base64Variant.asciiToBase64[1]); assertEquals("", base64Variant.asciiToBase64[2]); assertEquals("", base64Variant.asciiToBase64[3]); assertEquals("", base64Variant.asciiToBase64[4]); assertEquals("", base64Variant.asciiToBase64[5]); assertEquals("", base64Variant.asciiToBase64[6]); assertEquals("", base64Variant.asciiToBase64[7]); assertEquals("", base64Variant.asciiToBase64[8]); assertEquals("", base64Variant.asciiToBase64[9]); assertEquals("", base64Variant.asciiToBase64[10]); assertEquals("", base64Variant.asciiToBase64[11]); assertEquals("", base64Variant.asciiToBase64[12]); assertEquals("", base64Variant.asciiToBase64[1]); assertEquals("", base64Variant.asciiToBase64[13]); assertEquals("", base64Variant.asciiToBase64[10
@Test public void testBase64Variant() { Base64Variant base64Variant; base64Variant = new Base64Variant("name", "alphabet", true, ':', 1); assertEquals("name", base64Variant.name); assertEquals("alphabet", base64Variant.alphabet); assertEquals("alphabet", base64Variant.asciiToBase64()); assertEquals(1, base64Variant.maxLineLength); }
@Test public void testBase64Variant() { Base64VariaBase64VariaBase64 variant = new Base64VariaBase64VariaBase64VariaBase64VariaBase64VariaBase64VariaBase64VariaBase64VariaBase64VariaBase64VariaBase64VariaBase64VariaBase64VariaBase64VariaBase64VariaBase64VariaBase64VariaBase64VariaBase64Base64VariaBase64Base64VariaBase64Base64VariaBase64Base64VariaBase64Base64VariaBase64Base64VariaBase64Base64Base64Varia64Base64Base64Base64Varia64Base64Base64Base64Base64Base64Base64Base64Base64Base64Base64Base64Base64Base64Base64Base64Base64Base64Base64Base64Base64Base64Base64Base64Base64Base64Base64Base64Base64Base64Base64Base64Base64Base64Base64Base64Base64Base64Base64Base64Base64Base64Base64Base64Base64Base64Base64Base64Base64Base64Base64Base64Base64Base64
@Test public void testBase64Variant() { Base64Variant base64Variant = new Base64Variant("name", "alphabet", true, ':', 1); assertEquals("name", base64Variant.name); assertEquals("alphabet", base64Variant.altAlphabet); assertEquals(1, base64Variant.line); assertEquals('a', base64Variant.asciiToBase64[(int) base64Variant.line] & 0xFF); assertEquals('a', base64Variant.asciiToBase64[(int) base64Variant.line] & 0xFF); assertEquals('a', base64Variant.asciiToBase64[(int) base64Variant.line] & 0xFF); assertEquals('a', base64Variant.asciiToBase64[(int) base64Variant.line] & 0xFF); assertEquals('a', base64Variant.asciiToBase64[(int) base64Variant.line] & 0xFF); assertEquals('a', base64Variant.asciiToBase64[(int) base64Variant.line] & 0xFF); assertEquals('a', base64Variant.asciiToBase64[(int) base64Variant.line] & 0xFF); assertEquals('a', base64Variant.asciiToBase64[(int) base64
@Test public void testBase64Variant() { Base64Variant base64Variant = new Base64Variant(NAME, ALPHABET_ALPHABET, true,'', 1); assertEquals(BASE64_VALUE_INVALID, base64Variant.asciiToBase64[(int) base64Variant.asciiToBase64[0]]); }
@Test public void testBase64Variant() { Base64Variant base64Variant = new Base64Variant("name", "alphabet", true, ':', 1); assertEquals("name", base64Variant.getName()); assertEquals("alphabet", base64Variant.getAlphabet()); assertEquals(1, base64Variant.getLineLength()); assertEquals('1', base64Variant.getBase64Line()); assertEquals('1', base64Variant.getBase64Line()); assertEquals('1', base64Variant.getBase64Line()); assertEquals('1', base64Variant.getBase64Line()); assertEquals('1', base64Variant.getBase64Line()); assertEquals('1', base64Variant.getBase64Line()); assertEquals('1', base64Variant.getBase64Line()); assertEquals('1', base64Variant.getBase64Line()); assertEquals('1', base64Variant.getBase64Line()); assertEquals('1', base64Variant.getBase64Line()); assertEquals('1', base64Variant.getBase64Line()); assertEquals('1', base64Variant.getBase64Line()); assertEquals('1', base64Variant.getBase64Line()); assertEquals('1', base64Variant.getBase64Line()); assertEquals('1', base64Variant.getBase64Line()); assertEquals('1', base64Variant.getBase64
@Test public void testBase64Variant() { Base64Variant base64Variant = new Base64Variant("name", "alphabet", true, ':', 1); assertEquals("name", base64Variant.name); assertEquals(1, base64Variant.asciiToBase64.length); assertEquals('alphabet', base64Variant.asciiToBase64[0]); assertEquals('', base64Variant.asciiToBase64[1]); assertEquals('', base64Variant.asciiToBase64[2]); assertEquals('', base64Variant.asciiToBase64[3]); assertEquals('', base64Variant.asciiToBase64[4]); assertEquals('', base64Variant.asciiToBase64[5]); assertEquals('', base64Variant.asciiToBase64[6]); assertEquals('', base64Variant.asciiToBase64[7]); assertEquals('', base64Variant.asciiToBase64[8]); assertEquals('', base64Variant.asciiToBase64[9]); assertEquals('', base64Variant.asciiToBase64[10]); assertEquals('', base64Variant.asciiToBase64[11]); assertEquals('', base64Variant.asciiToBase64[12]); assertEquals('', base64Variant.asciiToBase64[13]); assertEquals('', base64Variant.asciiToBase64
@Test public void testBase64Variant() { Base64Variant base64Variant = new Base64Variant(null, "a", false,'', 2); assertEquals("a", base64Variant.getName()); assertEquals("a", base64Variant.getAlphabet()); assertEquals(2, base64Variant.getLineLength()); assertEquals('1', base64Variant.getPaddingChar()); assertEquals(2, base64Variant.getMaxLineLength()); assertEquals("a", base64Variant.asciiToBase64[(int) 0]); assertEquals("", base64Variant.asciiToBase64[(int) 1]); assertEquals("", base64Variant.asciiToBase64[(int) 2]); assertEquals("", base64Variant.asciiToBase64[(int) 3]); assertEquals("", base64Variant.asciiToBase64[(int) 4]); assertEquals("", base64Variant.asciiToBase64[(int) 5]); assertEquals("", base64Variant.asciiToBase64[(int) 6]); assertEquals("", base64Variant.asciiToBase64[(int) 7]); assertEquals("", base64Variant.asciiToBase64[(int) 8]); assertEquals("", base64Variant.asciiToBase64[(int) 9]); assertEquals("", base64Variant.asciiTo
@Test public void testBase64Variant() { Base64Variant base64Variant; base64Variant = new Base64Variant("name", "Alphabet", true, ':', 1); assertEquals("name", base64Variant.name); assertEquals("Alphabet", base64Variant.asciiToBase64[(int) ':'])); assertEquals("", base64Variant.asciiToBase64[(int) ':'])); assertEquals("", base64Variant.asciiToBase64[(int) ':'])); assertEquals("", base64Variant.asciiToBase64[(int) ':'])); assertEquals("", base64Variant.asciiToBase64[(int) ':']); assertEquals("", base64Variant.asciiToBase64[(int) ':']); assertEquals("", base64Variant.asciiToBase64[(int) ':']); base64Variant = new Base64Variant("name", "Alphabet", true, ':' + 1); assertEquals("name", base64Variant.name); assertEquals("", base64Variant.asciiToBase64[(int) ':'])); assertEquals("", base64Variant.asciiToBase64[(int) ':']); assertEquals("", base64Variant.asciiToBase64[(int) ':' + 0]); base64Variant = new Base
@Test public void testBase64Variant() { String base64String = "AAABBAgQAAAABxBAgQAAAABxBAgQAAAABxBAgQAAAABxBAgQAAAABxBAgQAAAABxBAgQAAAABxBAgQAAAABxBAgQAAAABxBAgQAAAABxBAgQAAAABxBAgQAAAABxBAgQAAAABxBAgQAAAABxBAgQAAAABxBAgQAAAABxBAgQAAAABxBAgQAAAABxBAgQAAAABxBAgQAAAABxBAgQAAAABxBAgQAAAABxBAgQAAAABxBAgQAAAABxBAgQAAAABxBAgQAAAABxBAgQAAAABxBAgQAAAABxBAgQAAAABxBAgQAAAABxBAgQAAAABxBAgQAAAABxBAgQAAAABxBAgQAAAABxBAgQAAAABxBAgQAAAABxBAgQAAAABxBAgQAAAABxBAgQAAAABxBAgQ
@Test public void testBase64Variant() { String alphabet = "qwertyuiqwertyuiqwertyuiqwertyuiqwertyuiqwertyuiqwertyuiqwertyuiqwertyuiqwertyuiqwertyuiqwertyuiqwertyuiqwertyuiqwertyuiqwertyuiqwertyuiqwertyuiqwertyuiqwertyuiqwertyuiqwertyuiqwertyuiqwertyuiqwertyuiqwertyuiqwertyuiqwertyuiqwertyuiqwertyuiqwertyuiqwertyuiqwertyuiqwertyuiqwertyuiqwertyuiqwertyuiqwertyuiqwertyuiqwertyuiqwertyuiqwertyuiqwertyuiqwertyuiqwertyuiqwertyuiqwertyuiqwertyuiqwertyuiqwertyuiqwertyuiqwertyuiqwertyuiqwertyuiqwertyuiqwertyuiqwertyuiqwertyuiqwertyuiqwertyuiq
@Test public void testBase64Alphabet() { String name = "name"; byte[] srcB = new byte[] { (byte) 0x80 }; byte[] srcC = new byte[] { (byte) 0x80 }; char[] srcP = new char[] { 'A', 'Z', 'Z', 'A', 'Z', 'Z', 'A', 'Z', 'Z', 'A', 'Z', 'Z', 'A', 'Z', 'Z', 'Z', 'A', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z', 'Z',
@Test public void testBase64Variant() { Base64Variant base64Variant = new Base64Variant("a", "b", false, 'x', 10); Assert.assertEquals("a", base64Variant.getName()); Assert.assertEquals("b", base64Variant.getBase64Alphabet()); Assert.assertEquals("c", base64Variant.getBase64Alphabet()); Assert.assertEquals("d", base64Variant.getBase64AsciiToBase64()); Assert.assertEquals("e", base64Variant.getBase64AsciiToBase64()); Assert.assertEquals("f", base64Variant.getBase64AsciiToBase64()); Assert.assertEquals("g", base64Variant.getBase64AsciiToBase64()); Assert.assertEquals("h", base64Variant.getBase64AsciiToBase64()); Assert.assertEquals("g", base64Variant.getBase64AsciiToBase64()); }
@Test public void testBase64Variant() { String name = "encoded"; byte[] srcB = new byte[] { (byte) 0x80 }; String encoded = Base64Alphabet.encode(srcB, 0, srcB.length); Base64Variant base64Variant = new Base64Variant(name, encoded, 0, srcB.length); assertArrayEquals(encoded.getBytes(), base64Variant.getRawBytes()); }
@Test public void testBase64Alphabet() { String alphabet = "Alphabet"; char paddingChar = 'P'; int maxLineLeLe = 2; Base64Variant base64Variant = new Base64Variant(alphabet, "name", true, paddingChar, maxLineLe); Base64Variant[] srcB = new Base64Variant[8]; srcB[0] = new byte[0]; srcB[1] = new byte[0]; srcB[2] = new byte[0]; srcB[3] = new byte[0]; srcB[4] = new byte[0]; srcB[5] = new byte[0]; srcB[6] = new byte[0]; srcB[7] = new byte[0]; srcB[8] = new byte[0]; srcB[9] = new byte[0]; srcB[11] = new byte[0]; srcB[12] = new byte[0]; srcB[13] = new byte[0]; srcB[14] = new byte[0]; srcB[15] = new byte[0]; srcB[16] = new byte[0]; srcB[17] = new byte[0]; srcB[18] = new byte[0]; srcB[19] = new byte[0]; srcB[20] = new byte[0]; srcB[21] = new byte[0]; srcB[22] = new byte[0]; srcB
@Test public void testBase64Variant() { byte[] srcA = new byte[] { (byte) 0x80 }; byte[] srcB = new byte[] { (byte) 0x80 }; byte[] srcC = new char[] { (char) 0x80 }; Base64Variant base64Variant = new Base64Variant(srcA, "name", true,'', 10); byte[] srcV = new byte[] { (byte) 0x80 }; Base64Variant base64VariantCopy = new Base64Variant(srcV, "name", true,'', 10); assertEquals(srcA, base64VariantCopy); assertEquals(srcB, base64VariantCopy); assertEquals(srcC, base64VariantCopy); assertEquals(srcV, base64VariantCopy); }
@Test public void testBase64Alphabet() { String alphabet = "Alphabet"; char paddingChar = 'P'; int maxLineLeLe = 2; Base64Variant base64Variant = new Base64Variant(alphabet, "name", true, paddingChar, maxLineLe); Base64Variant[] srcC = new Base64Variant[8]; srcC[0] = new byte[0]; srcC[1] = new byte[0]; srcC[2] = new byte[0]; srcC[3] = new byte[0]; srcC[4] = new byte[0]; srcC[5] = new byte[0]; srcC[6] = new byte[0]; srcC[7] = new byte[0]; srcC[8] = new byte[0]; byte[] srcB = new byte[0]; srcB[0] = new byte[0]; srcB[1] = new byte[0]; srcB[2] = new byte[0]; srcB[3] = new byte[0]; srcB[4] = new byte[0]; srcB[5] = new byte[0]; srcB[6] = new byte[0]; srcB[7] = new byte[0]; srcB[8] = new byte[0]; srcB[9] = new byte[0]; srcB[10] = new byte[0]; srcB[11] = new byte[0]; srcB[12] = new byte[0]; srcB[13] = new byte[0];
@Test public void testBase64Variant() { String name = "name"; char paddingChar = 'P'; int maxLineLength = 10; byte[] srcB = new byte[] { (byte) 0x80 }; byte[] srcC = new char[] { (byte) 0x80 }; byte[] srcB = new byte[] { (byte) 0x80 }; Base64Variant base64Variant = new Base64Variant(srcB, name, true, paddingChar, maxLineLength); Base64Variant base64Variant2 = new Base64Variant(srcC, name, true, paddingChar, maxLineLength); assertEquals(srcB.length, base64Variant2.length); assertEquals(srcC.length, base64Variant2.length); assertEquals(srcB, base64Variant2.substring(0, srcB.length)); assertEquals(srcC, base64Variant2.substring(0, srcC.length)); assertEquals(srcC, base64Variant2.substring(0, srcC.length)); assertEquals(srcV, base64Variant2.substring(0, srcV.length)); assertEquals(srcV, base64Variant2.substring(0, srcV.length)); assertEquals(null, base64Variant2.substring(0, srcV.length)); assertEquals(null,
@Test public void testBase64Alphabet() { String alphabet = "Alphabet"; Base64Variant base64Variant = new Base64Variant(alphabet, "name", 1); byte[] srcBase64 = new byte[] { (byte) 0x80 }; Base64Variant encodedBase64Variant = new Base64Variant(encodedBase64Variant, "encoded name", 1); byte[] encodedBase64 = new byte[] { (byte) 0x80 }; Base64Variant decodedBase64Variant = new Base64Variant(decodedBase64Variant, "decoded name", 1); assertEquals(encodedBase64, decodedBase64Variant.getAsString()); }
@Test public void testBase64Alphabet() { char paddingChar = 'P'; Base64Variant base64Variant = new Base64Variant("name", "asciiAlphabet", true, 'P', 10); assertEquals("name", base64Variant.getName()); assertEquals("asciiAlphabet", base64Variant.getAlphabet()); assertEquals('P', base64Variant.getPaddingChar()); assertEquals(6, base64Variant.getMaxLineLength()); Base64Variant base64 = new Base64Variant("name", "asciiAlphabet", false, 'P', 10); assertEquals("name", base64Variant.getName()); assertEquals("asciiAlphabet", base64Variant.getAlphabet()); assertEquals('P', base64.getPaddingChar()); assertEquals(6, base64.getMaxLineLength()); }
@Test public void testBase64Alphabet() { String alphabet = "Alphabet"; char paddingChar = 'P'; int maxLineLength = 10; Base64Variant base64Variant = new Base64Variant(alphabet, "name", false, paddingChar, maxLineLength); assertEquals(base64Variant.getName(), "name"); assertEquals(base64Variant.getAlphabet(), alphabet); assertEquals(base64Variant.getCharset(), charset); assertEquals(base64Variant.getLineLength(), lineLength); assertEquals(base64Variant.getMaxLineLength(), lineLength); }
@Test public void testBase64Variant() { String name = "name"; char paddingChar = 'P'; int maxLineLength = 10; Base64Variant base64Variant = new Base64Variant(name, "asciiAlphabet", true, paddingChar, maxLineLength); Assert.assertEquals(base64Variant.getName(), name); Assert.assertEquals(base64Variant.getMaxLineLength(), maxLineLength); Assert.assertEquals(base64Variant.getBase64Alphabet(), "asciiAlphabet"); Assert.assertEquals(base64Variant.getBase64(), "asciiAlphabet"); }
@Test public void testReadResolve() { Base64Variant base64Variant = new Base64Variant("name", "base64Alphabet", true, '=', 10); Assert.assertEquals(base64Variant, new Base64Variant(base64Variant, "name", true, '=', 10); Assert.assertEquals(base64Variant, new Base64Variant(base64Variant, "name", true, '=', 10); Assert.assertEquals(base64Variant, new Base64Variant(base64Variant, "name", true, '=', 10); Assert.assertEquals(base64Variant, new Base64Variant(base64Variant, "name", true, '=', 10); Assert.assertEquals(base64Variant, new Base64Variant(base64Variant, "name", true, '=', 10); Assert.assertEquals(base64Variant, new Base64Variant(base64Variant, "name", true, '=', 10); Assert.assertEquals(base64Variant, new Base64Variant(base64Variant, "name", true, '=', 10); Assert.assertEquals(base64Variant, new Base64Variant(base64Variant, "name", true, '=', 10); Assert.assertEquals(base
@Test public void testReadResolve() { Base64Variant base64Variant = new Base64Variant("a", "a", true,'', 10); Assert.assertEquals(Base64Variants.valueOf("a"), base64Variant.readResolve()); }
@Test public void testGetName() { Base64Variant base64Variant = new Base64Variant( "a", "b", false, 'c', 100); Assert.assertEquals("a", base64Variant.getName()); }
@Test public void testUsesPadding() { Base64Variant base64Variant = new Base64Variant( "a", "a", true,'', 10); Assert.assertTrue(base64Variant.usesPadding()); }
@Test public void testUsesPaddingChar() { Base64Variant base64Variant = new Base64Variant( new Base64Variant("", "a", false, 'x', 20), 100); Assert.assertTrue(base64Variant.usesPaddingChar('x')); Assert.assertFalse(base64Variant.usesPaddingChar('x')); }
@Test public void testGetPaddingChar() { Base64Variant base64Variant = new Base64Variant( "name", "alphabet", true,'', 10); Assert.assertEquals('0', base64Variant.getPaddingChar()); }
@Test public void testPaddingChar() { Base64Variant base64Variant = new Base64Variant("name", "alphabet", true, '=', 10); Assert.assertEquals(6, base64Variant.getPaddingByte()); }
@Test public void testGetMaxLineLength() { Base64Variant base64Variant = new Base64Variant("", "a", false,'', 10); Assert.assertEquals(10, base64Variant.getMaxLineLength()); }
@Test public void testToString() { Assert.assertEquals("name", new Base64Variant("name", "name", true,'').toString()); }
@Test public void toString() { Assert.assertEquals(BASE64_VARIANT, new Base64Variant(BASE64_VARIANT, "name", true,'').toString()); }
@Test public void testJsonCodec() throws IOException { JsonParserParserParser p = new ReaderBasedJsonParser(new IOContext(), 0, new StringReader("foo"), new ObjectCodec() { @Override public ObjectCodec getCodec() throws IOException { return new ObjectCodecImpl(); } }, new ObjectCodecImpl()); p.setCodec(new ObjectCodecImpl()); assertEquals(p.getCodec(), new ObjectCodecImpl()); p.setCodec(new ObjectCodecImpl()); assertEquals(p.getCodec(), new ObjectCodecImpl()); p.setCodec(new ObjectCodecImpl()); assertEquals(p.getCodec(), new ObjectCodecImpl()); p.setCodec(new ObjectCodecImpl()); assertEquals(p.getCodec(), new ObjectCodecImpl()); p.setCodec(new ObjectCodecImpl()); assertEquals(p.getCodec(), new ObjectCodecImpl()); p.setCodec(new ObjectCodecImpl()); assertEquals(p.getCodec(), new ObjectCodecImpl()); p.setCodec(new ObjectCodecImpl()); assertEquals(p.getCodec(), new ObjectCodecImpl()); p.setCodec(new ObjectCodecImpl()); assertEquals(p.getCodec(), new ObjectCodecImpl()); p.setCodec(new ObjectCodecImpl()); assertEquals(p.getCodec(),
@Test public void testJsonParser() throws IOException, JsonParseException { final String json = "{\"foo\":{\"bar\":\"baz\"}}"; ReaderBasedJsonParser fpc = new ReaderBasedJsonParser(new IOContext(), 0, new StringReader(json), codec, codec); fpc.setCodec(codec); fpc.setCodec(codec); assertEquals(json, fpc.getCodec()); fpc.setCodec(null); assertNull(fpc.getCodec()); fpc.setCodec(null); assertNull(fpc.getCodec()); fpc.setCodec(codec); assertEquals(json, fpc.getCodec()); fpc.setCodec(null); assertNull(fpc.getCodec()); fpc.setCodec(codec); assertEquals(json, fpc.getCodec()); fpc.setCodec(null); assertEquals(json, fpc.getCodec()); fpc.setCodec(codec); assertEquals(json, fpc.getCodec()); fpc.setCodec(null); assertEquals(json, fpc.getCodec()); fpc.setCodec(null); assertEquals(json, fpc.getCodec()); fpc.setCodec(null); assertEquals(json, fpc.get
@Test public void testVerifyNoLeadingZeroes() throws IOException { new ReaderBasedJsonParser(null, 0, Read.UNLIMITED_OUTPUT, null).verifyNoLeadingZeroes(); }
@Test public void testReportInvalidNumber() throws JsonParseException, IOException { new ReaderBasedJsonParser(null, features, null, false) { @Override protected void verifyNoLeadingZeroes() throws IOException { super.verifyNoLeadingZeroes(); } }.run(); }
@Test public void testVerifyNoLeadingZeroes() throws IOException { Reader r = new StringReader("0"); Object object = new ReaderBasedJsonParser(null, features, r, object) { }; assertEquals(0', ((Number) object).intValue()); }
@Test public void testVerifyNoLeadingZeroes() throws IOException { doTestRead(false, false, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
@Test public void testVerifyNoLeadingZeroes() throws IOException { String input = "{\"0\":0,\"10\":0,\"F\":0}", expected = "0"; Reader reader = new StringReader(input); ObjTestableParser parser = new ObjTestableParser(null, features, reader, null); parser.parse(expected); Assert.assertEquals(expected, parser.getNumLeadingZeroes()); }
@Test public void testVerifyNoLeadingZeroes() throws JsonParseException, IOException { Reader r = new StringReader("0"); int expected = 0; for (int i = 0; i < 10; i++) { r.read(expected); } assertEquals(expected, _inputBuffer[_inputPtr]); }
@Test public void testVerifyNoLeadingZeroes() throws IOException { String invalidNumber = "0"; doTestVerifyNoLeadingZeroes(invalidNumber); }
@Test public void testVerifyNoLeadingZeroes() throws IOException { doTestVerifyNoLeadingZeroes(false); }
@Test public void testVerifyNoLeadingZeroes() throws IOException { doTest(false, false, 0, 0, 0); doTest(false, false, 0, 0, 1); doTest(false, false, 0, 0, 1); doTest(false, false, 0, 0, 1); doTest(false, false, 0, 0, 1); doTest(false, false, 0, 0, 1); doTest(false, false, 0, 0, 1); doTest(false, false, 0, 0, 1); doTest(false, false, 0, 0, 1); doTest(false, false, 0, 0, 1); doTest(false, false, 0, 0, 1); doTest(false, false, 0, 0, 1); doTest(false, false, 0, 0, 1); doTest(false, false, 0, 0, 1); doTest(false, false, 0, 0, 1); doTest(false, false, 0, 0, 1); doTest(false, false, 0, 0, 1); }
@Test public void testVerifyNoLeadingZeroes() throws IOException { Reader r = new StringReader("0"); ReaderBasedJsonParser parser = new ReaderBasedJsonParser(null, 0, r, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null,
@Test public void testVerifyNoLeadingZeroes() throws IOException { assertEquals(ch, _verifyNoLeadingZeroes()); }
@Test public void testHandleUnusualFieldName() throws IOException { _reportUnexpectedChar(FIELD_NAME_CHAR_START, "was expecting double-quote to start field"); _reportUnexpectedChar(FIELD_NAME_CHAR_START, "was expecting double-quote to start field"); _handleUnusualFieldName(FIELD_NAME_CHAR_START); }
@Test public void testFinishString() throws IOException, JsonParseException { { new ReaderBasedJsonParser(IOContexex.decode("\""), "UTF-8").finishString(); } { new ReaderBasedJsonParser(IOContex.decode("\""), "UTF-8").finishString(); } { new ReaderBasedJsonParser(IOContex.decode("\""), "UTF-8").finishString(); } { new ReaderBasedJsonParser(IOContex.decode("\""), "UTF-8").finishString(); } { new ReaderBasedJsonParser(IOContex.decode("\""), "UTF-8").finishString(); } { new ReaderBasedJsonParser(IOContex.decode("\""), "UTF-8").finishString(); } { new ReaderBasedJsonParser(IOContex.decode("\""), "UTF-8").finishString(); } { new ReaderBasedJsonParser(IOContex.decode("\""), "UTF-8").finishString(); } }
@Test public void testResetWithCopy() throws JsonParseException, IOException { final String input = "abc\n\r\n"; _textBuffer.resetWithCopy(_textBuffer, 0, 2); _textBuffer.resetWithCopy(_textBuffer, 0, 3); _textBuffer.resetWithCopy(_textBuffer, 0, 4); _textBuffer.resetWithCopy(_textBuffer, 0, 5); _textBuffer.resetWithCopy(_textBuffer, 0, 6); _textBuffer.resetWithCopy(_textBuffer, 0, 7); _textBuffer.resetWithCopy(_textBuffer, 0, 8); _textBuffer.resetWithCopy(_textBuffer, 0, 9); _textBuffer.resetWithCopy(_textBuffer, 0, 10); _textBuffer.resetWithCopy(_textBuffer, 0, 10); _textBuffer.resetWithCopy(_textBuffer, 0, 10); _textBuffer.resetWithCopy(_textBuffer, 0, 10); _textBuffer.resetWithCopy(_textBuffer, 0, 10); _textBuffer.resetWithCopy(_textBuffer, 0, 10); _textBuffer.resetWithCopy(_textBuffer, 0, 10); _textBuffer.resetWithCopy(_textBuffer, 0, 10); _textBuffer.resetWithCopy(_textBuffer, 0,
@Test public void testFinishString() throws IOException, JsonParseException { ReaderBasedJsonParse parse = new ReaderBasedJsonParse(); parse.parse(new StringReader("abc")); parse.finishString(); }
@Test public void testfinishString2() throws IOException, JsonParseException { ReaderBasedJsonPars jsonPars = new ReaderBasedJsonPars(); jsonPars.setInputEnd(true); jsonPars.setInputBuffer("abc\ndef\nghi"); jsonPars.finishString(); Assert.assertEquals("abc\ndef\nghi", jsonPars.toString()); }
@Test public void _finishString2() throws IOException { { String value = "abc\ndef\nghi"; new MockUp<TextBuffer>() { @Mock protected void _decodeEscaped() { } }; new MockUp<TextBuffer>() { @Mock protected void _parseTextBuffer(StringBuffer buffer) { buffer.append(value.toCharArray()); } }; new MockUp<TextBuffer>() { @Mock protected void _parseTextBuffer(StringBuffer buffer) { buffer.append(value.toCharArray()); } }; new MockUp<TextBuffer>() { @Mock protected void _parseTextBuffer(StringBuffer buffer) { buffer.append(value.toCharArray()); } }; new MockUp<TextBuffer>() { @Mock protected void _parseTextBuffer(StringBuffer buffer) { buffer.append(value.toCharArray()); } }; new MockUp<TextBuffer>() { @Mock protected void _parseTextBuffer(StringBuffer buffer) { buffer.append(value.toCharArray()); } }; new MockUp<TextBuffer>() { @Mock protected void _parseTextBuffer(StringBuffer buffer) { buffer.append(value.toCharArray()); } }; new MockUp<TextBuffer>() { @Mock protected void _
@Test public void _finishString2() throws IOException { { _textBuffer.write("a"); _textBuffer.write("b"); _textBuffer.write("c"); _textBuffer.write("d"); _textBuffer.write("e"); _textBuffer.write("f"); _textBuffer.write("g"); _textBuffer.write("h"); _textBuffer.write("i"); _textBuffer.write("j"); _textBuffer.write("k"); _textBuffer.write("l"); _textBuffer.write("l"); _textBuffer.write("o"); _textBuffer.write("k"); _textBuffer.write("l"); _textBuffer.write("o"); _textBuffer.write("k"); _textBuffer.write("o"); _textBuffer.write("k"); _textBuffer.write("o"); _textBuffer.write("k"); _textBuffer.write("o"); _textBuffer.write("k"); _textBuffer.write("o"); _textBuffer.write("k"); _textBuffer.write("o"); _textBuffer.write("k"); _textBuffer.write("k"); _textBuffer.write("o"); _textBuffer
@Test public void _finishString2() throws IOException { { String json = "{\"foo\":\"bar\"}"; _textBuffer.write(json.getBytes()); _textBuffer.write(json.getBytes()); _textBuffer.write(json.getBytes()); _textBuffer.write(json.getBytes()); _textBuffer.write(json.getBytes()); _textBuffer.write(json.getBytes()); _textBuffer.write(json.getBytes()); _textBuffer.write(json.getBytes()); _textBuffer.write(json.getBytes()); _textBuffer.write(json.getBytes()); _textBuffer.write(json.getBytes()); _textBuffer.write(json.getBytes()); _textBuffer.write(json.getBytes()); _textBuffer.write(json.getBytes()); _textBuffer.write(json.getBytes()); _textBuffer.write(json.getBytes()); _textBuffer.write(json.getBytes()); _assertEquals("bar", json.toString()); }
@Test public void test_finishString2() throws IOException { String input = "\"abc\""; _textBuffer.write(input.getBytes()); _textBuffer.write("def"); _textBuffer.write("ghi"); _textBuffer.write("jkl"); _textBuffer.write("mno"); _textBuffer.write("lno"); _textBuffer.write("o"); _textBuffer.write("o"); _textBuffer.write("o"); _textBuffer.write("jkl"); _textBuffer.write("mno"); _textBuffer.write("lno"); _textBuffer.write("o"); _textBuffer.write("jkl"); _textBuffer.write("mno"); _textBuffer.write("lno"); _textBuffer.write("o"); _textBuffer.write("jkl"); _textBuffer.write("mno"); _textBuffer.write("lno"); _textBuffer.write("o"); _textBuffer.write("jkl"); _textBuffer.write("mno"); _textBuffer.write("o"); _textBuffer.write("jkl"); _textBuffer.write("mno"); _textBuffer.write("lno");
@Test public void _finishString2() throws IOException { { String input = "\"foo\"bar"; new MockUp<TextBuffer>() { @Mock public void _parse(TextBuffer textBuffer) { textBuffer.append(input.toCharArray()); } }; new MockUp<TextBuffer>() { @Mock public void _parse(TextBuffer textBuffer) { textBuffer.append("foo"); } }; new MockUp<InputStream>() { @Mock public boolean loadMore() throws IOException { return false; } }; new MockUp<String>() { @Mock public void _parse(String str) { assertEquals("foo", str); } }; new MockUp<String>() { @Mock public void _parse(String str) { assertEquals("bar", str); } }; new MockUp<String>() { @Mock public void _parse(String str) { assertEquals("foo", str); } }; new MockUp<String>() { @Mock public void _parse(String str) { assertEquals("bar", str); } }; new MockUp<String>() { @Mock public void _parse(String str) { assertEquals("foo", str); } }; new MockUp<String>() { @Mock public void _parse(String str) { assertEquals("
@Test public void _finishString2() throws IOException { { String value = "foo\nbar"; _textBuffer.write(value.toCharArray()); _textBuffer.write("\n"); _parser.process(new String(value.toCharArray())); } { _parser.process(new String(value.toCharArray())); } { String value = "foo\nbar"; _parser.process(new String(value.toCharArray())); } { String value = "foo\nbar"; _parser.process(new String(value.toCharArray())); } { String value = "foo\nbar"; _parser.process(new String(value.toCharArray())); } { String value = "foo\nbar"; _parser.process(new String(value.toCharArray())); } { String value = "foo\nbar"; _parser.process(new String(value.toCharArray())); } { String value = "foo\nbar"; _parser.process(new String(value.toCharArray())); } { String value = "foo\nbar"; _parser.process(new String(value.toCharArray())); } { String value = "foo\nbar"; _parser.process(new String(
@Test public void _finishString2() throws IOException { { [LINE] void _decodeEscaped() throws IOException { new MockTextBuffer(new char[] { 'a', 'b' }); [LINE] void _finishString2() { } }; }
@Test public void _finishString2() throws IOException { { new MockUp<JsonTextBuffer>() { @Mock public String _textBuffer( @Nullable JsonReader textBuffer, @Nullable int index, @Nullable boolean _parsingComplete) { return "foo"; } }; new MockUp<JsonTextBuffer>() { @Mock public String _textBuffer( @Nullable JsonReader textBuffer, @Nullable int index, @Nullable boolean _parsingComplete) { return "bar"; } }; new MockUp<JsonTextBuffer>() { @Mock public String _textBuffer( @Nullable JsonReader textBuffer, @Nullable int index, @Nullable boolean _parsingComplete) { return "foo"; } }; new MockUp<JsonTextBuffer>() { @Mock public String _textBuffer( @Nullable JsonReader textBuffer, @Nullable int index, @Nullable boolean _parsingComplete) { return "bar"; } }; new MockUp<JsonTextBuffer>() { @Mock public void _textBuffer( @Nullable JsonReader textBuffer, @Nullable int index, @Nullable boolean _parsingComplete) { } }; new MockUp<JsonTextBuffer>() { @Mock public void _textBuffer( @Nullable JsonReader textBuffer, @Nullable int index, @Nullable boolean
@Test public void _finishString2() throws IOException { { new MockUp<JsonTextBuffer>() { @Mock public String _textBuffer( @Nullable JsonReader textBuffer, @Nullable int _inputIndex, @Nullable int _inputIndex, @Nullable boolean _parsingComplete) { return "foo"; } }; new MockUp<JsonTextBuffer>() { @Mock public String _textBuffer( @Nullable JsonReader textBuffer, @Nullable int _inputIndex, @Nullable int _inputIndex, @Nullable boolean _parsingComplete) { return "bar"; } }; new MockUp<JsonTextBuffer>() { @Mock public String _textBuffer( @Nullable JsonReader textBuffer, @Nullable int _inputIndex, @Nullable int _inputIndex, @Nullable boolean _parsingComplete) { return "foo"; } }; new MockUp<JsonTextBuffer>() { @Mock public String _textBuffer( @Nullable JsonReader textBuffer, @Nullable int _inputIndex, @Nullable int _inputIndex, @Nullable boolean _parsingComplete) { return "foo"; } }; new MockUp<JsonTextBuffer>() { @Mock public void _textBuffer( @Nullable JsonReader textBuffer, @Nullable int _inputIndex, @Nullable int _
@Test public void _finishString2() throws IOException { { new MockUp<TextBuffer>() { @Mock public void _consumeString2() throws IOException { } }; new MockUp<TextBuffer>() { @Mock public void _consumeString2() throws IOException { } }; new MockUp<TextBuffer>() { @Mock public void _consumeString2() throws IOException { } }; new MockUp<TextBuffer>() { @Mock public void _consumeString2() throws IOException { } }; new MockUp<TextBuffer>() { @Mock public void _consumeString2() throws IOException { } }; new MockUp<TextBuffer>() { @Mock public void _consumeString2() throws IOException { } }; new MockUp<TextBuffer>() { @Mock public void _consumeString2() throws IOException { } }; new MockUp<TextBuffer>() { @Mock public void _consumeString2() throws IOException { } }; new MockUp<TextBuffer>() { @Mock public void _consumeString2() throws IOException { } }; new MockUp<TextBuffer>() { @Mock public void _consumeString2() throws IOException { } }; new MockUp<TextBuffer>() { @Mock public void _consumeString2() throws IOException { } }; }; new MockUp<TextBuffer>() { @Mock public
@Test public void _finishString2() throws IOException { { new MockUp<TextBuffer>() { @Mock public void _parse(TextBuffer textBuffer) throws IOException { } }; new MockUp<TextBuffer>() { @Mock public void _parse(TextBuffer textBuffer) throws IOException { } }; new MockUp<InputStream>() { @Mock public void _parse(InputStream in) throws IOException { } }; new MockUp<StringBuffer>() { @Mock public void _parse(String str) throws IOException { } }; new MockUp<StringBuffer>() { @Mock public void _parse(String str) throws IOException { } }; new MockUp<StringBuffer>() { @Mock public void _parse(String str) throws IOException { } }; new MockUp<StringBuffer>() { @Mock public void _parse(String str) throws IOException { } }; new MockUp<StringBuffer>() { @Mock public void _parse(String str) throws IOException { } }; new MockUp<StringBuffer>() { @Mock public void _parse(String str) throws IOException { } }; new MockUp<StringBuffer>() { @Mock public void _parse(String str) throws IOException { } }; new MockUp<StringBuffer>() { @Mock
@Test public void _finishString2() throws IOException { { String input = "\"foo\"bar"; new MockUp<TextBuffer>() { @Mock public void _parse(TextBuffer textBuffer) throws IOException { } }; new MockUp<TextBuffer>() { @Mock public void _parse(TextBuffer textBuffer) throws IOException { } }; new MockUp<InputStream>() { @Mock public void _parse(InputStream in) throws IOException { } }; new MockUp<StringBuffer>() { @Mock public void _parse(String str) throws IOException { } }; new MockUp<InputStream>() { @Mock public void _parse(InputStream in) throws IOException { } }; new MockUp<StringBuffer>() { @Mock public void _parse(String str) throws IOException { } }; new MockUp<StringBuffer>() { @Mock public void _parse(String str) throws IOException { } }; new MockUp<StringBuffer>() { @Mock public void _parse(String str) throws IOException { } }; new MockUp<StringBuffer>() { @Mock public void _parse(String str) throws IOException { } }; new MockUp<StringBuffer>() { @Mock public void _parse(String str) throws IOException { } }; new MockUp
@Test public void _finishString2() throws IOException { _line.write("a"); _line.write("b"); _line.write("c"); _assertEquals("a", _consumeString(LINE)); _assertEquals("b", _consumeString(LINE)); _assertEquals("c", _consumeString(LINE)); _assertEquals("b", _consumeString(LINE)); _assertEquals("c", _consumeString(LINE)); _assertEquals("a", _consumeString(LINE)); _assertEquals("b", _consumeString(LINE)); _assertEquals("c", _consumeString(LINE)); _assertEquals("a", _consumeString(LINE)); _assertEquals("b", _consumeString(LINE)); _assertEquals("c", _consumeString(LINE)); _assertEquals("a", _consumeString(LINE)); _assertEquals("b", _consumeString(LINE)); _assertEquals("c", _consumeString(LINE)); _assertEquals("a", _consumeString(LINE)); _assertEquals("b", _consumeString(LINE)); _assertEquals("c", _consumeString(LINE)); _assertEquals("a", _consumeString(LINE)); _assertEquals("b", _
@Test public void testEOF() throws IOException, JsonParseException { { new MockReader(false, ">>>>>>>>").read(); new MockReader(false, ">>>>>>").read(); new MockReader(false, ">>>>>>").read(); new MockReader(false, ">>>>>>").read(); new MockReader(false, ">>>>>>").read(); new MockReader(false, ">>>>>>").read(); new MockReader(false, ">>>>>>").read(); new MockReader(false, ">>>>>>").read(); new MockReader(false, ">>>>>>").read(); new MockReader(false, ">>>>>>").read(); new MockReader(false, ">>>>>>").read(); new MockReader(false, ">>>>>>").read(); new MockReader(false, ">>>>>>>>").read(); new MockReader(false, ">>>>>>>>").read(); new MockReader(false, ">>>>>>>>").read(); new MockReader(false, ">>>>>>>>").read(); new MockReader(false, ">>>>>>>>").read(); new MockReader(false, ">>>>>>>>".length()).
@Test public void test_skipComment() throws IOException { { String json = "{\"foo\":1 + 1}"; _writer.writeString(json.getBytes()); assertEquals(json.length(), 1); _readString(json.getBytes()); assertEquals(json.length(), 1); } { String json = "{\"foo\":1 + 1}"; _writer.writeString(json.getBytes()); assertEquals(json.length(), 1); _readString(json.getBytes()); assertEquals(json.length(), 1); } { String json = "{\"foo\":1 + 1}"; _writer.writeString(json.getBytes()); assertEquals(json.length(), 1); _readString(json.getBytes()); assertEquals(json.length(), 1); } { String json = "{\"foo\":1 + 1}"; _writer.writeString(json.getBytes()); assertEquals(json.length(), 1); _readString(json.getBytes()); assertEquals(json.length(), 1); } { String json = "{\"foo\":1 + 1}"; _writer.writeString(json.getBytes()); assertEquals(json.length(), 1); _readString(json.getBytes()); assertEquals(json.length(), 1); } { String json = "{\"foo\":1 + 1}";
@Test public void test_skipComment() throws IOException { publParser.parse( "{\"foo\":\"bar\"}"); assertEquals('bar', read(new StringReader( "foo\nbar" ))); assertEquals('', read(new StringReader( "foo\nbar" ))); assertEquals('', read(new StringReader( "foo\nbar" ))); assertEquals('', read(new StringReader( "foo\nbar" ))); assertEquals('', read(new StringReader( "foo\nbar" ))); assertEquals('', read(new StringReader( "foo\nbar" ))); assertEquals('', read(new StringReader( "foo\nbar" ))); assertEquals('', read(new StringReader( "foo\nbar" ))); assertEquals('', read(new StringReader( "foo\nbar" ))); assertEquals('', read(new StringReader( "foo\nbar" ))); assertEquals('', read(new StringReader( "foo\nbar" ))); assertEquals('', read(new StringReader( "foo\nbar" ))); assertEquals('', read(new StringReader( "foo\nbar" ))); assertEquals('', read(new StringReader( "foo\nbar" ))); assertEquals('', read
@Test public void testSkipComment() throws IOException { String input = "{\"foo\":\"bar\"}"; Reader reader = new StringReader(input); ReaderBasedJsonParser parser = new ReaderBasedJsonParser(null, 0, reader, ObjectCodec.DEFAULT, CharsToNameCanonicalizer.getInstance()); parser.setCodec(ObjectCodec.DEFAULT); parser.setInputSo(reader); parser.skipComment(); assertEquals(input.length(), reader.read()); }
@Test public void testSkipCppComment() throws IOException { String input = "{\"foo\":\"bar\"}"; Reader reader = new StringReader(input); ReaderBasedJsonParser f = new ReaderBasedJsonParser(null, 0, reader, ObjectCodec.DEFAULT, CharsToNameCanonicalizer.getInstance()); f.setCodec(new DefaultObjectCodec()); f.skipCppComment(); f.skipCppComment(); f.skipCppComment(); f.skipCppComment(); f.skipCppComment(); f.skipCppComment(); f.skipCppComment(); f.skipCppComment(); f.skipCppComment(); f.skipCppComment(); f.skipCppComment(); f.skipCppComment(); f.skipCppComment(); f.skipCppComment(); f.skipCppComment(); f.skipCppComment(); f.skipCppComment(); f.skipCppComment(); f.skipCppComment(); f.skipCppComment(); f.skipCppComment(); f.skipCppComment(); f.skipCppComment(); f.skipCppComment(); f.skipCppComment(); f.skipCppComment();
@Test public void test_skipComment() throws IOException { String input = "{\"foo\":\"bar\"}"; Reader reader = new StringReader(input); new ReaderBasedJsonParser(ctxt, features, reader, _codec, _st).load(reader); assertEquals("bar", new String(read(reader, 0, 4))); }
@Test public void testSkipCComment() throws IOException { String input = "{\"foo\":\"bar\"}"; Reader reader = new StringReader(input); reader.read(new byte[20]); reader.read(new byte[20]); assertEquals(2, reader.getInputS().size()); assertEquals('', reader.getInputS().get(0)); assertEquals('', reader.getInputS().get(1)); assertEquals('', reader.getInputS().get(2)); reader.read(new byte[20]); assertEquals(2, reader.getInputS().size()); assertEquals('', reader.getInputS().get(0)); assertEquals('', reader.getInputS().get(1)); assertEquals('', reader.getInputS().get(2)); assertEquals('', reader.getInputS().get(3)); reader.close(); }


)) @_LINE) @END) @END) @)) @END) @)) @END) @DE) @DE)) @DE)) @DE)) @DE)) @DE)) @AB) @AB) @AB) @AB) @E @AB) @E @AB) @E @AB) @E @AB) @E @AB) @E @E @AB) @E @E @AB) @E @E @AB)) @E @E @AB def @E @E @E @AB)) @E @Test public void test0() { String s = "abc"; s.forEach (line) {line.set(line.set(line.set(line.set(line.set(line.set(line.set(line.set(line.set(line.set(line.set(line.set(line.set(line.set(line.set(line.set(line.set(line.set(line.set(line.set(line.set(line.set(line.set(line.set(line.set(line.set(line.set(line.set(line.set(line.set



)) @_LINE) @END) @END) @END) @END) @END) @END) @END) @END) @END) @END) @END) @END) @END] @END) @END] @EFS public void testMacro)) { new Byte[] { new Byte[] { new Byte[] { new Byte[] { new Byte(new Byte(24)) { } } } }
)))) @______)) @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @Deprecated @Deprecated @Deprecated @Deprecated @JDocDocDoc)) @S)) @S)) @S)) @S)) @S)) @S @S @S)) @S @S @S @S)) @S @S @S @S @S)) public void testSkipCR() { _s.check0.check0.check1.check2.check0.check0.check0.check0.check0.check1.check2.check0.check0.check0.check0.check0.check0.check0.check0.check0.check0.check0.check0.check0.check0.check0.check0.check0.check0.check0.check0.check0.check0.check0.check0.check0.check0.check0.check0.check0.check0.check0.check0.check0.check0.check0.check0.check0.check0.check0.check0.check0


)) @_LINE = INT_ASTERISK)) @_LINE)) @_LINE)) @_CR)) @CR)) @LF)) @CR)) @CR)) @CR)))) @CR))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))lelelelelelelelelelelelelelelelelelelelelelelelelelelelelelelelelelelelelelelelelelelelelelelelelelelelelelelelelelelelelelelelelelelelelelelelelelelelelelelelelelelelelelelelelelelelelelelelelelelelelelelelelelelelelelelelelelelelelelelelelelelelelelelelelelelelelelelelelelelelelelelelelelelelelelelelelele
)) @_LINE = INT_CR)) @_LINE) @_LINE) @_LINE) @END = INT_CR)) @LINE @CRL)) @END = INT_LF)) @LINE @CRLF) @CRLF @LF) @CRLF @LF @LF @CR public void testCR() throws IOException { new Mock(new StringReader("abc")).assertEquals("abc", new Mock(new StringReader("abc")).assertEquals("abc", new Mock(new StringReader("abc")).assertEquals("abc", new Mock(new StringReader("abc")).assertEquals("abc", new Mock(new StringReader("abc")).assertEquals("abc", new Mock(new StringReader("abc")).assertEquals("abc", new Mock(new StringReader("abc")).assertEquals("abc", new Mock(new StringReader("abc")).assertEquals("abc", new Mock(new StringReader("abc")).assertEquals("abc", new Mock(new StringReader("abc")).assertEquals("abc", new Mock(new StringReader("abc")).assertEquals("abc", new Mock(new StringReader("abc")).assertEquals("abc", new Mock(new StringReader("abc")).assertEquals("abc", new Mock(new

@Test public void testSkipCppComment() throws IOException { String input = "{\n" + " \"foo\"\n" + " \"bar\"\n" + "}"; Reader reader = new StringReader(input); ReaderBasedJsonParser parser = new ReaderBasedJsonParser(null, 0, reader, ObjectCodec.INSTANCE, null); parser.setCodec(new ObjectCodec() { }); parser.setInputSource(new StringReader(input)); parser.skipCppComment(); parser.loadMore(); Assert.assertEquals(input, reader.read()); }
@Test public void testSkipCppComment() throws IOException { String input = "{\"foo\":\"bar\"}"; Reader reader = new StringReader(input); ReaderBasedJsonParser parser = new ReaderBasedJsonParser(null, 0, reader, ObjectCodec.INSTANCE, null); parser.setCodec(new ObjectCodec() { }); parser.parse(); Assert.assertEquals(input, reader.read()); parser.loadMore(); Assert.assertEquals(input, reader.read()); parser.loadMore(); Assert.assertEquals(input, reader.read()); parser.loadMore(); Assert.assertEquals(input, reader.read()); parser.loadMore(); Assert.assertEquals(input, reader.read()); }
@Test public void testSkipCppComment() throws IOException { { int i = 0; _expectString(EOF, "abc"); _expectString(EOF, "abc"); _expectString(EOF, "abc"); _expectString(EOF, "abc"); _expectString(EOF, "abc"); _expectString(EOF, "abc"); _expectString(EOF, "abc"); _expectString(EOF, "abc"); _expectString(EOF, "abc"); _expectString(EOF, "abc"); _expectString(EOF, "abc"); _expectString(EOF, "abc"); _expectString(EOF, "abc"); _expectString(EOF, "abc"); _expectString(EOF, "abc"); _expectString(EOF, "abc"); _expectString(EOF, "abc"); _expectString(EOF, "abc"); _expectString(EOF, "abc"); _expectString(EOF, "abc"); _expectString(EOF, "abc"); _expectString(EOF, "abc"); _expectString(EOF, "abc"); _expectString(EOF, "abc"); _expectString(EOF, "abc"); _expectString(EOF, "abc"); _expectString
@Test public void testSkipCppComment() throws IOException { String input = "{\"foo\":\"bar\"}"; Reader inputReader = new StringReader(input); ReaderBasedJsonParser parser = new ReaderBasedJsonParser(null, 0, inputReader, ObjectCodec.INSTANCE, null); parser.setCodec(ObjectCodec.INSTANCE); parser.setInputSource(new Object()); parser.loadMore(); Assert.assertEquals(input, ((JsonParParDo) parser.getInputSource()).getRaw()); }
@Test public void testSkipCppComment() throws IOException { String input = "{\"LF\": \"LF\"}"; Reader inputReader = new StringReader(input); ReaderBasedJsonParser parser = new ReaderBasedJsonParser(null, 0, inputReader, ObjectCodec.INSTANCE, null); parser.setCodec(new ObjectCodec() { }); parser.parse(inputReader); Assert.assertEquals(input, ((BufferedReader) parser.getInputSource()).readLine()); }
@Test public void testSkipCppComment() throws IOException { Reader r = new StringReader("foo\n\nbar\n\n"); ReaderBasedJsonParser parser = new ReaderBasedJsonParser(null, 0, r, ObjectCodec.INSTANCE, null); parser.setCodec(ObjectCodec.INSTANCE); parser.setInputSource(new StringReader("foo\n\nbar\n\n")); parser.skipCppComment(); parser.parse(); Assert.assertEquals("foo\nbar\n\n", reader.getNextChar("\"")); parser.parse(); Assert.assertEquals("foo\n\nbar\n\n", reader.getNextChar("\"")); parser.parse(); Assert.assertEquals("foo\n\nbar\n\n", reader.getNextChar("\"")); parser.parse(); Assert.assertEquals("foo\n\nbar\n\n", reader.getNextChar("\"")); parser.parse(); Assert.assertEquals("foo\n\nbar\n\n", reader.getNextChar("\"")); parser.parse(); Assert.assertEquals("foo\n\nbar\n\n\n", reader.getNext
@Test public void testSkipCppComment() throws IOException { StringReader r = new StringReader("foo\nbar\n"); ReaderBasedJsonParser parser = new ReaderBasedJsonParser(null, 0, r, ObjectCodec.INSTANCE, null); parser.setCodec(ObjectCodec.INSTANCE); parser.setInputSource(new Object()); parser.parse(); Assert.assertEquals("foo\nbar\n", reader.getNextChar("\"")); parser.parse(); Assert.assertEquals("foo\nbar\n", reader.getNextChar("\"")); parser.parse(); Assert.assertEquals("foo\nbar\n", reader.getNextChar("\"")); parser.parse(); Assert.assertEquals("foo\nbar\n", reader.getNextChar("\"")); parser.parse(); Assert.assertEquals("foo\nbar\n", reader.getNextChar("\"")); parser.parse(); Assert.assertEquals("foo\nbar\n", reader.getNextChar("\"")); parser.parse(); Assert.assertEquals("foo\nbar\n", reader.getNextChar("\"")); parser.parse(); Assert.assertEquals("foo\nbar\n", reader.
@Test public void testWriterBasedJsonGenerator() throws IOException { WriterBasedJsonGenerator generator = new WriterBasedJsonGenerator(null, 1, ObjectCodec.INSTANCE, new StringWriter()); try { generator.writeFieldName("string", false); fail(); } catch (JsonGenerationException e) { assertTrue(e.getMessage().contains("\"string\"")); } try { generator.writeFieldName("string", false); fail(); } catch (JsonGenerationException e) { assertTrue(e.getMessage().contains("\"string\"")); } try { generator.writeFieldName("string", false); fail(); } catch (JsonGenerationException e) { assertTrue(e.getMessage().contains("\"string\"")); } }
@Test public void testWriterBasedJsonGenerator() throws IOException { StringWriter sw = new StringWriter(); WriterBasedJsonGenerator f = new WriterBasedJsonGenerator(null, 2, new JsonCodec(), sw); f.writeStartObject(); f.writeEndObject(); f.writeEndObject(); String json = sw.toString(); Assert.assertEquals(json, "{\"a\":1,\"b\":2,\"c\":3}"); }
@Test public void testWriterBasedJsonGenerator() throws IOException { StringWriter w = new StringWriter(); WriterBasedJsonGenerator generator = new WriterBasedJsonGenerator(null, 0, ObjectCodec.INSTANCE, w); try { generator.writeFieldName("string", true); fail(); } catch (JsonGenerationException e) { assertTrue(e.getMessage().contains("\"string\"")); } try { generator.writeFieldName("string", false); fail(); } catch (JsonGenerationException e) { assertTrue(e.getMessage().contains("\"string\"")); } try { generator.writeFieldName("string", true); fail(); } catch (JsonGenerationException e) { assertTrue(e.getMessage().contains("\"string\"")); } }
@Test public void testWriterBasedJsonGenerator() throws IOException { StringWriter w = new StringWriter(); WriterBasedJsonGenerator f = new WriterBasedJsonGenerator(null, 2, new JsonCodec(), w); f.writeStartObject(); f.writeEndObject(); f.writeEndObject(); f.writeFieldName("array", true); f.writeFieldName("string", false); f.writeFieldName("array", true); f.writeFieldName("string", false); f.writeFieldName("string", false); f.writeFieldName("array", false); f.writeFieldName("string", false); f.writeFieldName("string", false); f.writeFieldName("string", false); f.writeFieldName("string", false); f.writeFieldName("string", false); f.writeFieldName("string", false); f.writeFieldName("string", false); f.writeFieldName("string", false); f.writeFieldName("string", false); f.writeFieldName("string", false); f.writeFieldName("string", false); f.writeFieldName("string", false); f.writeFieldName("string", false); f.writeFieldName("string", false); f.writeEndObject(); assertEquals(w.toString(), w.toString()); }
@Test public void testWriterBasedJsonGenerator() throws IOException { StringWriter w = new StringWriter(); WriterBasedJsonGenerator generator = new WriterBasedJsonGenerator(null, 2, new JsonCodec(), w); writer.writeFieldName("outputEnd"); writer.writeFieldName("outputBufferEnd"); writer.writeFieldName("outputBufferEnd"); writer.writeFieldName("outputBufferEnd"); writer.writeFieldName("outputBufferEnd"); writer.writeEnd(); Assert.assertEquals(w.toString(), "{\"outputBuffer\":[\"outputEnd\"]}"); Assert.assertEquals(w.toString(), "{\"outputBuffer\":[\"outputBufferEnd\"]}"); Assert.assertEquals(w.toString(), "{\"outputBuffer\":[\"outputBufferEnd\"]}"); Assert.assertEquals(w.toString(), "{\"outputBuffer\":[\"outputBufferEnd\"]}"); Assert.assertEquals(w.toString(), "{\"outputBuffer\":[\"outputBufferEnd\"]}"); }
@Test public void testWriteEndObject() throws IOException, JsonGenerationException { new WriterBasedJsonGenerator(null, features, ObjectCodec.INSTANCE, null) { @Override public void writeEndObject(Object obj, int entryCount) { } }.writeEndObject(); }
@Test public void testJsonStreamCloseTarget() throws IOException { ioContext.setResourceManaged(true); JsonStreamContext outputContext = new JsonStreamContext(); JsonStreamWriter writer = new JsonStreamWriter(outputContext, false); writer.close(); EasyMock.expectLastCall(); EasyMock.replay(outputContext); JsonStreamGenerator generator = new WriterBasedJsonGenerator(ioContext, Feature.AUTO_CLOSE_TARGET, writer, null); generator.close(); EasyMock.verify(outputContext); }
@Test public void testJsonGeneratorWriter() throws IOException { ioContext.setResourceManaged(true); JsonStreamContext outputContext = new JsonStreamContext(); JsonStreamWriter writer = mock(JsonStreamWriter.class); WriterBasedJsonGenerator generator = new WriterBasedJsonGenerator(ioContext, features, codec, writer, null); generator.close(); verify(writer).close(); }
@Test public void testJsonOutput() throws IOException { ioContext.setResourceManaged(false); JsonStreamContext outputContext = new JsonStreamContext(); JsonStreamWriter writer = new JsonStreamWriter(outputContext, null); JsonGeneratorGenerator generator = new WriterBasedJsonGenerator(ioContext, features, ObjectCodec.OBJECT, writer); generator.close(); writer.close(); outputContext.releaseBuffers(); }
@Test public void testJsonGeneration() throws IOException { ioContext.setResourceManaged(true); JsonStreamContext outputContext = new JsonStreamContext(); JsonStreamWriter writer = new JsonStreamWriter(outputContext, false); JsonGeneratorGeneratorGenerator generator = new WriterBasedJsonGenerator(ioContext, features, codec, null, writer); writer.close(); writer.close(); outputContext.releaseBuffers(); JsonStreamWriter writer2 = new JsonStreamWriter(outputContext, false); generator.close(); writer2.close(); outputContext.releaseBuffers(); }
@Test public void testClose() throws IOException { ioContext.setResourceManaged(true); JsonStreamContext outputContext = _ioContext.getOutputContext(); try (JsonStreamWriter writer = new JsonStreamWriter(outputContext)) { writer.writeObject("foo"); } try (JsonStreamReader reader = new JsonStreamReader(outputContext)) { reader.readObject(); } try (JsonStreamWriter writer = new JsonStreamWriter(outputContext)) { writer.writeObject("bar"); } try (JsonStreamReader reader = new JsonStreamReader(outputContext)) { reader.readObject(); } try (JsonStreamReader reader = new JsonStreamReader(outputContext)) { reader.readObject(); } try (JsonStreamReader reader = new JsonStreamReader(outputContext)) { reader.readObject(); } }
@Test public void testArray() throws IOException { ioContext.set(Feature.ARRAY, true); JsonStreamContext ctxt = new JsonStreamContext(ioContext); JsonStreamGenerator generator = new WriterBasedJsonGenerator(ioContext, Feature.ARRAY, ObjectCodec.getDefault(), new ObjectCodec() { @Override public boolean inArray() { return false; } @Override public void close() throws IOException { } }); generator.close(); }
@Test public void testArray() throws IOException { ioContext.set(Feature.ARRAY, true); ioContext.set(Feature.ARRAY, true); JsonStreamContext ctxt = new JsonStreamContext(ioContext); JsonStreamWriter writer = mock(JsonStreamWriter.class); WriterBasedJsonGenerator generator = new WriterBasedJsonGenerator(ioContext, 0, null, writer); generator.close(); verify(writer).close(); }
@Test public void testJsonEndObject() throws IOException { ioContext.setResourceManaged(true); JsonStreamContext ctxt = getOutputContext(); JsonStreamWriter writer = mock(JsonStreamWriter.class); WriterBasedJsonGenerator generator = new WriterBasedJsonGenerator(ctxt, Feature.OBJ_END_OBJECT, ObjectCodec.getDefault(), writer); generator.close(); verify(writer).writeObject(); verify(writer).flush(); verify(writer).close(); }
@Test public void testWriteEndObject() throws IOException { ioContext.setResourceManaged(true); JsonStreamContext ctxt = getOutputContext(); [LINE] writer = new StringWriterBasedJsonGenerator(ctxt, features, ObjectCodec.OBJECT, Writables.newStringStream(), null); writer.writeObject("test"); writer.close(); assertEquals("test", writer.readObject()); }
@Test public void testJsonWriter() throws IOException { ioContext.setResourceManaged(true); JsonStreamContext outputContext = new JsonStreamContext(); outputContext.inArray(); outputContext.inObject(); outputContext.inObject(); outputContext.inArray(); outputContext.inObject(); outputContext.inObject(); outputContext.inObject(); outputContext.inObject(); outputContext.inObject(); outputContext.inObject(); outputContext.inObject(); outputContext.inObject(); outputContext.inObject(); outputContext.inObject(); outputContext.inObject(); outputContext.inObject(); outputContext.inObject(); outputContext.inObject(); outputContext.inObject(); outputContext.inObject(); outputContext.inObject(); outputContext.inObject(); outputContext.inObject(); outputContext.inObject(); outputContext.inObject(); outputContext.inObject(); outputContext.inObject(); outputContext.inObject(); outputContext.inObject(); outputContext.inObject(); outputContext.inObject(); outputContext.inObject(); outputContext.inObject(); outputContext.inObject(); outputContext.inObject(); outputContext.inObject(); outputContext.inObject(); outputContext
@Test public void testCloseJsonContent() throws IOException { new Expectations() {{ _ioContext.isResourceManaged(); [LINE] public void close() throws IOException { _writer.close(); } }; }
@Test public void testJsonGeneratorWriter() throws IOException { ioContext.setResourceManaged(true); JsonStreamContext outputContext = new JsonStreamContext(); JsonStreamWriter writer = mock(JsonStreamWriter.class); new WriterBasedJsonGenerator(ioContext, features, null, writer, null) { @Override protected void flushBuffer() throws IOException { } @Override protected void close() throws IOException { } }.close(); assertBuffer(outputContext, 0); }
@Test public void testWriteEndObject() throws IOException { setUp(false); writeEndObject(); assertBufferClosed(); }
@Test public void testFlushPassingToWriter() throws IOException { ioContext.setResourceManaged(true); JsonStreamContext outputContext = mock(JsonStreamContext.class); expect(outputContext.inArray()).andReturn(true).anyTimes(); expect(outputContext.inObject()).andReturn(true).anyTimes(); expect(outputContext.inObject()).andReturn(true).anyTimes(); expect(outputContext.inObject()).andReturn(false).anyTimes(); expect(outputContext.isResourceManaged()).andReturn(true).anyTimes(); expect(outputContext.isFlushPassedToStream()).andReturn(true).anyTimes(); expect(outputContext.inArray()).andReturn(false).anyTimes(); expect(outputContext.inObject()).andReturn(false).anyTimes(); expect(outputContext.inObject()).andReturn(true).anyTimes(); expect(outputContext.inObject()).andReturn(false).anyTimes(); expect(outputContext.inObject()).andReturn(true).anyTimes(); expect(outputContext.inObject()).andReturn(false).anyTimes(); expect(outputContext.inObject()).andReturn(true).anyTimes(); expect(outputContext.in
@Test public void testWriteEndObject() throws IOException { JsonStreamContext outputContext = getOutputContext(); JsonStreamWriter writer = mock(JsonStreamWriter.class); ioContext.setResourceManaged(true); JsonStreamContext ctxt = new JsonStreamContext(outputContext, null); expect(ctxt.inArray()).andReturn(true); expect(ctxt.inObject()).andReturn(true); expect(ctxt.inObject()).andReturn(false); expect(ctxt.inObject()).andReturn(true); expect(ctxt.inObject()).andReturn(false); expect(ctxt.inObject()).andReturn(false); expect(ctxt.inObject()).andReturn(false); expect(ctxt.inObject()).andReturn(false); expect(ctxt.inObject()).andReturn(false); expect(ctxt.inObject()).andReturn(false); expect(ctxt.inObject()).andReturn(false); expect(ctxt.inObject()).andReturn(false); expect(ctxt.inObject()).andReturn(false); expect(ctxt.inObject()).andReturn(false); expect(ctxt.inObject()).andReturn(false); expect(ctxt.inObject()).andReturn(false); expect(ctxt.inObject
@Test public void releaseBuffers() throws IOException { new WriterBasedJsonGenerator(null, features, ObjectCodec.OBJECT, _w)._releaseBuffers(); }
@Test public void _releaseBuffers() throws IOException { new WriterBasedJsonGenerator(ctxt, features, codec, w) { @Override protected void _releaseConcatBuffer(char[] buffer) { Assert.assertEquals(0, buffer.length); } }.run(); }
@Test public void releaseBuffers() { new WriterBasedJsonGenerator(null, 1, null, null) { @Override protected void _releaseBuffers(char[] buffer) { Assert.assertEquals(0, buffer.length); } }.run(); }
@Test public void _releaseBuffers() throws IOException { new WriterBasedJsonGenerator(ioContext, features, ObjectCodec.OBJECT, w)._releaseBuffers(); }
@Test public void releaseConcatBuffer() { new WriterBasedJsonGenerator(ctxt, features, codec, w).releaseConcatBuffer(buf); new WriterBasedJsonGenerator(ctxt, features, codec, w).releaseConcatBuffer(null); new WriterBasedJsonGenerator(ctxt, features, codec, w).releaseConcatBuffer(null); new WriterBasedJsonGenerator(ctxt, features, codec, w).releaseConcatBuffer(buf); new WriterBasedJsonGenerator(ctxt, features, codec, w).releaseConcatBuffer(null); new WriterBasedJsonGenerator(ctxt, features, codec, w).releaseConcatBuffer(buf); new WriterBasedJsonGenerator(ctxt, features, codec, w).releaseConcatBuffer(null); }
( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( { { { { { { { { ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( { { { { { { ( ( ( ( ( ( ( ( ( { { { { { ( ( (; { { { ( = { { ( = {; {; { = {; { = {;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( { { { { { { { { ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( { { { { { { ( ( ( ( ( ( ( ( ( { { { { { ( ( (; { { { ( = { { ( = {; {; { = {; { = {;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
@Test public void testFlushBuffer() throws IOException { new WriterBasedJsonGenerator(null, 1, ObjectCodec.OBJECT, writer).flushBuffer(); new WriterBasedJsonGenerator(null, 1, ObjectCodec.OBJECT, writer).flushBuffer(); new WriterBasedJsonGenerator(null, 1, ObjectCodec.OBJECT, writer).flushBuffer(); new WriterBasedJsonGenerator(null, 1, ObjectCodec.OBJECT, writer).flushBuffer(); new WriterBasedJsonGenerator(null, 1, ObjectCodec.OBJECT, writer).flushBuffer(); new WriterBasedJsonGenerator(null, 1, ObjectCodec.OBJECT, writer).flushBuffer(); new WriterBasedJsonGenerator(null, 1, ObjectCodec.OBJECT, writer).flushBuffer(); new WriterBasedJsonGenerator(null, 1, ObjectCodec.OBJECT, writer).flushBuffer(); new WriterBasedJsonGenerator(null, 1, ObjectCodec.OBJECT, writer).flushBuffer(); new WriterBasedJsonGenerator(null, 1, ObjectCodec.OBJECT, writer).flushBuffer(); new WriterBasedJsonGenerator(null, 1, ObjectCodec.OBJECT, writer).flushBuffer(); new WriterBasedJsonGenerator(null, 1, ObjectCodec.OBJECT, writer).flushBuffer(); new WriterBasedJsonGenerator(null, 1, ObjectCodec.OBJECT, writer).
@Test public void _flushBuffer() throws IOException { new WriterBasedJsonGenerator(_ctxt, 1, _codec, _w).flushBuffer(); }
@Test public void testWriteBuffer() throws IOException { WriterBasedJsonGenerator generator = new WriterBasedJsonGenerator(null, 1, ObjectCodec.OBJECT, writer); generator._flushBuffer(); generator._flushBuffer(); generator._flushBuffer(); generator._flushBuffer(); }
@Test public void testGetInputCodeUtf8() { int[] input = Arrays.asList(INPUT_CODE_SIMPLE); Assert.assertEquals(INPUT_CODE_SIMPLE, Arrays.asList(INPUT_CODE_SIMPLE)); }
@Test public void testGetInputCodeComment() { Assert.assertEquals(LINE,[][].getInputCodeComment()); }
@Test public void testCharToHex() { Assert.assertEquals(7,charToHex(13)); Assert.assertEquals(7,charToHex(13)); Assert.assertEquals(7,charToHex(13)); Assert.assertEquals(7,charToHex(13)); }
@Test public void testCharToHex() { assertEquals(131, charToHex(131)); assertEquals(131, charToHex(132)); assertEquals(131, charToHex(133)); assertEquals(131, charToHex(134)); assertEquals(131, charToHex(135)); assertEquals(131, charToHex(136)); assertEquals(131, charToHex(137)); assertEquals(131, charToHex(138)); assertEquals(131, charToHex(139)); assertEquals(131, charToHex(1310)); assertEquals(131, charToHex(1311)); assertEquals(131, charToHex(1312)); assertEquals(131, charToHex(1313131314)); assertEquals(131, charToHex(13155)); assertEquals(131, charToHex(131552)); assertEquals(131, charToHex(131553)); assertEquals(131, charToHex(131554)); assertEquals(131, charToHex(131555)); assertEquals(131, charToHex(1316)); assertEquals(131, charToHex(1317)); assertEquals(131, charToHex(1318)); assertEquals(
@Test public void quoteAsString() { String input = "abc\ndef\nghi"; assertEquals("\n", quoteAsString(input)); }
@Test public void quoteAsString() { quoteAsString("abc"); quoteAsString("abc"); quoteAsString("abc"); quoteAsString("abc"); }
@Test public void quoteAsString() { quoteAsString("abc"); quoteAsString("abc"); quoteAsString("abc"); quoteAsString("abc"); quoteAsString("abc"); }
@Test public void quoteAsString() { String input = "\uD83D\uDE83D\uDE83D\uDE83D\uDE83D\uDE83D\uDE83D\uDE83D\uDE83D\uDE83D\uDE83D\uDE83D\uDE83D\uDE83D\uDE83D\uDE83D\uDE83D\uDE83D\uDE83D\uDE83D\uDE83D\uDE83D\uDE83D\uDE83D\uDE83D\uDE83D\uDE83D\uDE83D\uDE83D\uDE83D\uDE83D\uDE83D\uDE83D\uDE83D\uDE83D\uDE83D\uDE83D\uDE83D\uDE83D\uDE83D\uDE83D\uDE83D\uDE83D\uDE83D\uDE83D\uDE83D\uDE83D\uDE83D\uDE83
@Test public void testQuoteAsUTF8() { String text = "\uD83D\uDC8"; byte[] quoteAsUTF8 = _textEncoder.encode(text); byte[] quoteAsUTF8 = _textEncoder.encode(text); assertEquals(text, quoteAsUTF8); }
@Test public void testQuoteAsUTF8() { String text = "test\u00e9"; byte[] quoteAsUTF8 = _byteBuilder.quoteAsUTF8(text); assertEquals(text.length(), quoteAsUTF8.length); assertEquals(text, quoteAsUTF8[0]); assertEquals(text, quoteAsUTF8[1]); assertEquals(text, quoteAsUTF8[2]); assertEquals(text, quoteAsUTF8[3]); assertEquals(text, quoteAsUTF8[4]); assertEquals(text, quoteAsUTF8[5]); assertEquals(text, quoteAsUTF8[6]); assertEquals(text, quoteAsUTF8[7]); assertEquals(text, quoteAsUTF8[8]); }
@Test public void testQuoteAsUTF8() { byte[] quote = new byte[] { 'a', 'b', 'c' }; assertEquals(null, quote[0]); assertEquals(null, quote[1]); assertEquals(null, quote[2]); assertEquals(null, quote[3]); quote = "\uD83D"; assertEquals(null, quote[3]); quote = "\uD83D"; assertEquals(null, quote[3]); quote = "\uD83D"; assertEquals(null, quote[3]); quote = "\uD83D"; assertEquals(null, quote[3]); quote = "\uD83D"; assertEquals(null, quote[3]); quote = "\uD83D"; assertEquals(null, quote[3]); quote = "\uD83D"; assertEquals(null, quote[3]); quote = "\uD83D"; assertEquals(null, quote[3]); quote = "\uD83D"; assertEquals(null, quote[3]); quote = "\uD83D"; assertEquals(null, quote[3]); quote = "\uD83D"; assertEquals(null, quote[3]); quote = "\uD83D"; assertEquals(null, quote[3]); quote = "\uD83D"; assertEquals(null, quote[3]); quote = "\uD
@Test public void testQuoteAsUTF8() { String text = "\u00E9"; byte[] quoteAsUTF8 = _byteBuilder.quoteAsUTF8(text); assertEquals(text, quoteAsUTF8); }
@Test public void testQuoteAsUTF8() { String text = "\uD83D\uDC0"; byte[] quoteAsUTF8 = _testee.quoteAsUTF8(text); assertEquals(text.length(), quoteAsUTF8.length); }
@Test public void testQuoteAsUTF8() { String text = "\uD83D\uDC8"; byte[] quoteAsUTF8 = new byte[] {'','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','' }; assertEquals(quoteAsUTF8[0], new String(quoteAsUTF8)); assertEquals(quoteAsUTF8[1], new String(quoteAsUTF8[2])); assertEquals(quoteAsUTF8[2], new String(quoteAsUTF8[3])); assertEquals(quoteAsUTF8[3], new String(quoteAsUTF8[4])); assertEquals(quoteAsUTF8[5], new String(quoteAsUTF8[5])); assertEquals(quoteAsUTF8[6], new String(quoteAsUTF8[7])); assertEquals(quoteAsUTF8[8[9], new String(quoteAsUTF8[9])); assertEquals(quoteAsUTF8[10], new String(quoteAsUTF8[9])); assertEquals(quoteAs
@Test public void testEscape() { String test = "\uD83D\uDC0"; byte[] quote = _esc.quoteAsUTF8(test); assertEquals(test, quote); quote = _esc.quoteAsUTF8(test); assertEquals(test, quote); quote = _esc.quoteAsUTF8(test); assertEquals(test, quote); quote = _esc.quoteAsUTF8(test); assertEquals(test, quote); quote = _esc.quoteAsUTF8(test); assertEquals(test, quote); quote = _esc.quoteAsUTF8(test); assertEquals(test, quote); quote = _esc.quoteAsUTF8(test); assertEquals(test, quote); quote = _esc.quoteAsUTF8(test); assertEquals(test, quote); quote = _esc.quoteAsUTF8(test); assertEquals(test, quote); quote = _esc.quoteAsUTF8(test); assertEquals(test, quote); quote = _esc.quoteAsUTF8(test); assertEquals(test, quote); quote = _esc.quoteAsUTF8(test); assertEquals(test, quote); quote = _esc.quoteAsUTF8(test); assertEquals(test,
@Test public void testQuoteAsUTF8() { String test = "\u00E9[A-Z]"; byte[] quoteAsUTF8 = new String(test.getBytes(StandardCharsets.UTF_8)); byte[] quoteAsUTF8_escaped = new String(quoteAsUTF8).getBytes(StandardCharsets.UTF_8); assertEquals(test, quoteAsUTF8_escaped); quoteAsUTF8_escaped = new String(quoteAsUTF8).getBytes(StandardCharsets.UTF_8); assertEquals(test, quoteAsUTF8_escaped); quoteAsUTF8_escaped = new String(quoteAsUTF8_escaped).getBytes(StandardCharsets.UTF_8); assertEquals(test, quoteAsUTF8_escaped); quoteAsUTF8_escaped = new String(quoteAsUTF8_escaped).getBytes(StandardCharsets.UTF_8); assertEquals(test, quoteAsUTF8_escaped); quoteAsUTF8_escaped = new String(quoteAsUTF8_escaped).getBytes(StandardCharsets.UTF_8); assertEquals(test, quoteAsUTF8_escaped); quoteAsUTF8_escaped = new String(quoteAsUTF8_escaped).getBytes(StandardCharsets.UTF_8); assertEquals(test, quoteAsUTF
@Test public void testEscape() { String text = "Hello &amp; &amp; &amp; &amp; &amp; &amp; &amp; &amp; &amp; &amp; &amp; &amp; &amp; &amp; &amp; &amp; &amp; &amp; &amp; &amp; &amp; &amp; &amp; &amp; &amp; &amp; &amp; &amp; &amp; &amp; &amp; &amp; &amp; &amp; &amp; &amp; &amp; &amp; &amp; &amp; &amp;; &amp; &amp;; &amp; &amp;; &amp;; &amp;; &amp;; &amp;; &amp;; &amp;; &amp;; &amp;; &amp;;; &amp;;;"); byte[] quote = _testee.quoteAsUTF8(text); assertEquals(text.length(), quote.length); assertEquals(text, quote[0]); assertEquals(text, quote[1]); assertEquals(text, quote[2]); assertEquals(text, quote[3]); quote = _testee.quoteAsUTF8
@Test public void testQuoteAsUTF8() { String text = "\uD83D\uDC0A\uDC0B\uDC0C\uDC0D\uDC0E\uDC0F\uDC0E\uDC0F\uDC0G\uDC0G\uDC0E\uDC0F\uDC0G\uDC0E\uDC0F\uDC0G\uDC0E\uDC0F\uDC0G\uDC0E\uDC0F\uDC0G\uDC0E\uDC0F\uDC0G\uDC0E\uDC0F\uDC0G\uDC0E\uDC0F\uDC0G\uDC0E\uDC0F\uDC0G\uDC0E\uDC0F\uDC0G\uDC0E\uDC0F\uDC0F\uDC0G\uDC0E\uDC0F\uDC0F\uDC0E\uDC0F\uDC0G\
@Test public void testEscapeWithEscapes() { String text = "\uD83D\uD83D\uD83D\uD83D\uD83D\uD83D\uD83D\uD83D\uD83D\uD83D\uD83D\uD83D\uD83D\uD83D\uD83D\uD83D\uD83D\uD83D\uD83D\uD83D\uD83D\uD83D\uD83D\uD83D\uD83D\uD83D\uD83D\uD83D\uD83D\uD83D\uD83D\uD83D\uD83D\uD83D\uD83D\uD83D\uD83D\uD83D\uD83D\uD83D\uD83D\uD83D\uD83D\uD83D\uD83D\uD83D\uD83D\uD83D\
@Test public void testEscape() { String text = "\uD83D\uDC0"; byte[] quote = _inner_loop.quoteAsUTF8(text); assertEquals(text.getBytes(StandardCharsets.UTF_8), quote); }
@Test public void testQuoteAsUTF8() { String text = "\uD83D\uDC0"; byte[] quoteAsUTF8 = _textEncoder.encode(text); assertEquals(text.charAt(inputPtr), 'q'); quoteAsUTF8.close(); }
@Test public void testEscapeAsUTF8() { String text = "\uD83D\uDC00["; byte[] quoteAsUTF8 = _escCodes.encode(text); assertEquals(text.getBytes(), quoteAsUTF8); }
@Test public void testEscape() { String text = "Hello &amp; &amp; &amp; &amp; &amp; &amp; &amp; &amp; &amp; &amp; &amp; &amp; &amp; &amp; &amp; &amp; &amp; &amp; &amp; &amp; &amp; &amp; &amp; &amp; &amp; &amp; &amp; &amp; &amp; &amp; &amp; &amp; &amp; &amp; &amp; &amp; &amp; &amp; &amp; &amp; &amp; &amp; &amp; &amp; &amp; &amp; &amp; &amp; &amp; &amp; &amp; &amp; &amp; &amp; &amp; &amp; &amp; &amp; &amp; &amp; &amp; &amp; &amp; &amp;; &amp; &amp; &amp;; &amp; &amp;; &amp; &amp;; &amp; &amp;; &amp; &amp;; &amp; &amp; &amp; &amp
@Test public void testQuoteAsUTF8() { String test = "\u0041\u0041\u0042\u0043\u0044\u0045\u0046\u0044\u0044\u0044\u0045\u0046\u0044\u0044\u0044\u0045\u0046\u0044\u0044\u0044\u0045\u0046\u0044\u0044\u0044\u0045\u0046\u0044\u0044\u0044\u0045\u0046\u0044\u0044\u0044\u0045\u0046\u0044\u0044\u0045\u0046\u0044\u0044\u0045\u0046\u0044\u0044\u0044\u0045\u0046\u0044\u0044\u0044\u0045\u0046\u0044\u0044\u0044\u0045\u0046\
@Test public void testQuoteAsUTF8() { String test = "\u00E9"; byte[] quoteAsUTF8 = _testString.quoteAsUTF8(test); assertEquals(test, quoteAsUTF8); }
@Test public void testQuoteAsUTF8() { String quote = "\uD83D\uDC0A\uDC0B\uDC0C\uDC0D\uDC0E\uDC0F\uDC0G\uDC0D\uDC0E\uDC0F\uDC0G\uDC0D\uDC0E\uDC0F\uDC0G\uDC0D\uDC0E\uDC0F\uDC0G\uDC0D\uDC0E\uDC0F\uDC0E\uDC0F\uDC0G\uDC0D\uDC0E\uDC0F\uDC0G\uDC0D\uDC0E\uDC0F\uDC0G\uDC0D\uDC0E\uDC0F\uDC0F\uDC0G\uDC0E\uDC0F\uDC0F\uDC0G\uDC0E\uDC0F\uDC0F\uDC0G\uDC0E\
@Test public void testQuoteAsUTF8() { String test = "\u0041\u0041\u0042\u0043\u0044\u0045\u0046\u0044\u0044\u0044\u0045\u0046\u0044\u0044\u0044\u0045\u0046\u0044\u0044\u0044\u0045\u0046\u0044\u0044\u0044\u0045\u0046\u0044\u0044\u0044\u0045\u0046\u0044\u0044\u0044\u0045\u0046\u0044\u0044\u0045\u0046\u0044\u0044\u0045\u0046\u0044\u0044\u0044\u0045\u0046\u0044\u0044\u0044\u0045\u0046\u0044\u0044\u0044\u0045\u0046\
@Test public void testQuoteAsUTF8() { String text = "\uD83D\uDC0"; byte[] quoteAsUTF8 = _textEncoder.encodeAsString(text); byte[] quoteAsUTF8_result = _textEncoder.encodeAsString(text); assertEquals(text, quoteAsUTF8_result); }
@Test public void testQuoteAsUTF8() { String text = "\uD83D\uDC0"; byte[] quoteAsUTF8 = _textEncoder.encode(text); assertEquals(ou0, _textEncoder.decode(ou0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
@Test public void testQuoteAsUTF8() { String text = "\uD83D\uDC0"; byte[] quoteAsUTF8 = _textEncoder.encodeAsString(text); assertEquals(text.charAt(41), quoteAsUTF8[0]); assertEquals(text.charAt(41), quoteAsUTF8[1]); assertEquals(text.charAt(41), quoteAsUTF8[2]); assertEquals(text.charAt(41), quoteAsUTF8[3]); }
@Test public void testQuoteAsUTF8() { String text = "\uD83D\uDC00A\uDC00B\uDC00C\uDC00D\uDC00E\uDC00F\uDC00F\uDC00E\uDC00F\uDC00F\uDC00E\uDC00F\uDC00F\uDC00F\uDC00E\uDC00F\uDC00F\uDC00F\uDC00F\uDC00E\uDC00F\uDC00F\uDC00F\uDC00F\uDC00F\uDC00F\uDC00F\uDC00F\uDC00F\uDC00F\uDC00F\uDC00F\uDC00F\uDC00F\uDC00F\uDC00F\uDC00F\uDC00F\uDC00F\uDC00F\uDC00F\uDC00F\uDC00F\uDC00F\uDC00F\uDC00F\uDC00F\
@Test public void testEscape() { String text = "\uD83D\uDC0"; byte[] quote = _esc_escape_text.quoteAsUTF8(text); assertEquals(text.length(), quote.length()); }
@Test public void testEscapeAsUTF8() { String text = "\uD83D\uDC0"; byte[] quoteAsUTF8 = _escape.quoteAsUTF8(text); assertEquals(text.length(), quoteAsUTF8.length); assertEquals(text, quoteAsUTF8[0]); }
@Test public void testQuoteAsUTF8() { String text = "\uD83D\uDC0"; byte[] quoteAsUTF8 = new byte[] {'','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','' }; String quote = "\uD83D\uDC0"; byte[] quoteAsUTF8 = new byte[] {'','','','','','','','','','','','','','','','','','','','' }; String quoteAsUTF8 = new String(quoteAsUTF8); assertEquals(quoteAsUTF8[0], quote); assertEquals(quoteAsUTF8[1], quote); assertEquals(quoteAsUTF8[2], quote); assertEquals(quoteAsUTF8[3], quote); quoteAsUTF8 = new ByteArrayBuilder(new byte[] { (byte) 0x80, (byte) 0x81, (byte) 0x8
@Test public void testEscape() { String input = "\u00E9[A-Z]"; byte[] quote = _esc.quoteAsUTF8(input); assertEquals(input.length(), quote.length); assertEquals(input, quote[0]); }
@Test public void testEscape() { String text = "\uD83D\uDC0"; byte[] quoteAsUTF8 = _esc.quoteAsUTF8(text); assertEquals(text.length(), quoteAsUTF8.length); for (int i = 0; i < quoteAsUTF8.length; i++) { assertEquals(text.charAt(i), quoteAsUTF8.charAt(i)); } }
@Test public void testQuoteAsUTF8() { String text = "Hello World!"; byte[] quoteAsUTF8 = _esc.quoteAsUTF8(text); assertEquals(text.getBytes(StandardCharsets.UTF_8), quoteAsUTF8); }
@Test public void testQuoteAsUTF8() { String text = "\uD83D\uDCFF"; byte[] quoteAsUTF8 = _esc.quoteAsUTF8(text); assertEquals(text.length(), quoteAsUTF8.length()); }
@Test public void testQuoteAsUTF8() { String text = "Hello &amp; &amp; &amp; &amp; &amp; &amp; &amp; &amp; &amp; &amp; &amp; &amp; &amp; &amp; &amp; &amp; &amp; &amp; &amp; &amp; &amp; &amp; &amp; &amp; &amp; &amp; &amp; &amp; &amp; &amp; &amp; &amp; &amp; &amp; &amp; &amp; &amp; &amp; &amp; &amp; &amp; &amp; &amp; &amp; &amp; &amp; &amp; &amp; &amp; &amp; &amp; &amp; &amp; &amp; &amp; &amp; &amp; &amp; &amp; &amp; &amp; &amp; &amp; &amp; &amp; &amp; &amp; &amp; &amp; &amp; &amp; &amp; &amp; &amp; &amp; &amp; &amp; &amp; &amp; &amp
@Test public void testQuoteAsUTF8() { String text = "\uD83D\uDC0"; byte[] quoteAsUTF8 = _esc_encoder.quoteAsUTF8(text); assertEquals(text.getBytes(StandardCharsets.UTF_8), quoteAsUTF8); }
@Test public void testQuoteAsUTF8() { String test = "\u0041\u0041\u0042\u0043\u0044\u0045\u0046\u0044\u0044\u0044\u0045\u0046\u0044\u0044\u0044\u0045\u0046\u0044\u0044\u0044\u0045\u0046\u0044\u0044\u0044\u0045\u0046\u0044\u0044\u0044\u0045\u0046\u0044\u0044\u0044\u0045\u0046\u0044\u0044\u0045\u0046\u0044\u0044\u0045\u0046\u0044\u0044\u0044\u0045\u0046\u0044\u0044\u0044\u0045\u0046\u0044\u0044\u0044\u0045\u0046\
@Test public void testQuoteAsUTF8() { String text = "\uD83D\uDC0"; byte[] quoteAsUTF8 = _textEncoder.encodeAsString(text); byte[] quoteAsUTF8_result = _textEncoder.encodeAsString(text); assertEquals(text, quoteAsUTF8_result); }
@Test public void testQuoteAsUTF8() { String text = "\uD83D\uDC0"; byte[] quoteAsUTF8 = _textEncoder.encode(text); assertEquals(ou0, _textEncoder.decode(ou0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
@Test public void testQuoteAsUTF8() { String text = "Hello World!"; byte[] quoteAsUTF8 = _textEncoder.encodeAsString(text); assertEquals(text, quoteAsUTF8); }
@Test public void testQuoteAsUTF8() { String text = "\uD83D\uDCFF"; byte[] quoteAsUTF8 = _esc.quoteAsUTF8(text); assertEquals(text.length(), quoteAsUTF8.length()); }
@Test public void testQuoteAsUTF8() { String test = "\u0041\u0041\u0042\u0043\u0044\u0045\u0046\u0044\u0044\u0044\u0045\u0046\u0044\u0044\u0044\u0045\u0046\u0044\u0044\u0044\u0045\u0046\u0044\u0044\u0044\u0045\u0046\u0044\u0044\u0044\u0045\u0046\u0044\u0044\u0044\u0045\u0046\u0044\u0044\u0045\u0046\u0044\u0044\u0045\u0046\u0044\u0044\u0044\u0045\u0046\u0044\u0044\u0044\u0045\u0046\u0044\u0044\u0044\u0045\u0046\
@Test public void testQuoteAsUTF8() { String text = "\uD83D\uDC0"; byte[] quoteAsUTF8 = _textEncoder.encodeAsString(text); byte[] quoteAsUTF8_result = _textEncoder.encodeAsString(text); assertEquals(text, quoteAsUTF8_result); }
@Test public void testQuoteAsUTF8() { String text = "\uD83D\uDC0"; byte[] quoteAsUTF8 = _textEncoder.encode(text); assertEquals(ou0, _textEncoder.decode(ou0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
@Test public void testQuoteAsUTF8() { String test = "\u00E9"; byte[] quoteAsUTF8 = _testString.quoteAsUTF8(test); assertEquals(test, quoteAsUTF8); }
@Test public void quoteAsUTF8() { String text = "\u00E9"; byte[] quoteAsUTF8 = _byteBuilder.quoteAsUTF8(text); assertEquals(text.length(), quoteAsUTF8.length()); assertEquals(text, quoteAsUTF8[0]); assertEquals(text, quoteAsUTF8[1]); assertEquals(text, quoteAsUTF8[2]); assertEquals(text, quoteAsUTF8[3]); quoteAsUTF8 = _byteBuilder.quoteAsUTF8(" \u00E9"); assertEquals(text.length(), quoteAsUTF8.length()); assertEquals(text, quoteAsUTF8[0]); assertEquals(text, quoteAsUTF8[1]); assertEquals(text, quoteAsUTF8[2]); assertEquals(text, quoteAsUTF8[3]); quoteAsUTF8 = _byteBuilder.completeAndCoalesce(0); assertEquals(text.length(), quoteAsUTF8.length()); assertEquals(text, quoteAsUTF8[0]); assertEquals(text, quoteAsUTF8[3]); quoteAsUTF8 = _byteBuilder.completeAndCoalesce(1); assertEquals(text.length(), quoteAsUTF8.length()); assertEquals(text, quoteAsUTF8[0]); assertEquals(text, quoteAsUTF8[1]); assertEquals(text, quoteAsUTF8
@Test public void test_appendByteEscape() { byte[] escBytes = new byte[] { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0
_appendByteEscape(byte) { byte[] bytes = new byte[_val.length]; bytes[0] = (byte) 0x00; bytes[1] = (byte) 0x00; bytes[2] = (byte) 0x00; bytes[3] = (byte) 0x00; assertEquals(bytes.length, 2); assertEquals(bytes[0], _appendByteEscape(byte, 0x0)); assertEquals(bytes[1], _appendByteEscape(byte, 0x0)); assertEquals(bytes[2], _appendByteEscape(byte, 0x0)); assertEquals(bytes[3], _appendByteEscape(byte, 0x0)); assertEquals(bytes[4], _appendByteEscape(byte, 0x0)); assertEquals(bytes[5], _appendByteEscape(byte, 0x0)); assertEquals(bytes[6], _appendByteEscape(byte, 0x0)); assertEquals(bytes[7], _appendByteEscape(byte, 0x0)); assertEquals(bytes[8], _appendByteEscape(byte, 0x0)); assertEquals(bytes[9], _appendByteEscape(byte, 0x0)); assertEquals(bytes[10], _appendByteEscape(byte, 0x0)); assertEquals(bytes[11], _appendByteEscape(
_appendByteEscape(0x0), 0x0x0, 0x0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
@Test public void testEscape() { byte[] bytes = new byte[] { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x09, 0x02, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x02, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x02, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x02, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x02, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x02, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x02, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x02,
_appendByteEscape(byte) { byte[] bytes = new byte[20]; bytes[0] = (byte) 0x0; bytes[1] = (byte) 0x0; bytes[2] = (byte) 0x0; bytes[3] = (byte) 0x0; assertEquals(bytes[0], _appendByteEscape(byte, 0x0)); assertEquals(bytes[1], _appendByteEscape(byte, 0x0)); assertEquals(bytes[2], _appendByteEscape(byte, 0x0)); assertEquals(bytes[3], _appendByteEscape(byte, 0x0)); assertEquals(bytes[4], _appendByteEscape(byte, 0x0)); assertEquals(bytes[5], _appendByteEscape(byte, 0x0)); assertEquals(bytes[6], _appendByteEscape(byte, 0x0)); assertEquals(bytes[7], _appendByteEscape(byte, 0x0)); assertEquals(bytes[8], _appendByteEscape(byte, 0x0)); assertEquals(bytes[9], _appendByteEscape(byte, 0x0)); assertEquals(bytes[10], _appendByteEscape(byte, 0x0)); assertEquals(bytes[11], _appendByteEscape(byte, 0x0)); assertEquals(bytes[
@Test public void testEscape() { byte[] escBytes = new byte[] { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0
_appendByteEscape(byte) { byte[] bytes = new byte[12]; bytes[0] = (byte) 0x00; bytes[1] = (byte) 0x00; bytes[2] = (byte) 0x00; bytes[3] = (byte) 0x00; assertEquals(bytes[0], _appendByteEscape(byte, 0x02, bytes, 0)); assertEquals(bytes[1], _appendByteEscape(byte, 0x00, bytes, 0)); assertEquals(bytes[2], _appendByteEscape(byte, 0x00, bytes, 0)); assertEquals(bytes[3], _appendByteEscape(byte, 0x00, bytes, 0)); assertEquals(bytes[4], _appendByteEscape(byte, 0x00, bytes, 0)); assertEquals(bytes[5], _appendByteEscape(byte, 0x00, bytes, 0)); assertEquals(bytes[6], _appendByteEscape(byte, 0x00, bytes, 0)); assertEquals(bytes[7], _appendByteEscape(byte, 0x00, bytes, 0)); assertEquals(bytes[8], _appendByteEscape(byte, 0x00, bytes, 0)); assertEquals(bytes[9], _appendByteEscape(byte, 0x00, bytes, 0)); assertEquals(bytes[10], _
_appendByteEscape(byte) { byte[] bytes = new byte[12]; bytes[0] = (byte) 0x00; bytes[1] = (byte) 0x00; bytes[2] = (byte) 0x00; bytes[3] = (byte) 0x00; assertEquals(bytes[0], _appendByteEscape(byte, 0x02, bytes, 0)); assertEquals(bytes[1], _appendByteEscape(byte, 0x00, bytes, 0)); assertEquals(bytes[2], _appendByteEscape(byte, 0x00, bytes, 0)); assertEquals(bytes[3], _appendByteEscape(byte, 0x00, bytes, 0)); assertEquals(bytes[4], _appendByteEscape(byte, 0x00, bytes, 0)); assertEquals(bytes[5], _appendByteEscape(byte, 0x00, bytes, 0)); assertEquals(bytes[6], _appendByteEscape(byte, 0x00, bytes, 0)); assertEquals(bytes[7], _appendByteEscape(byte, 0x00, bytes, 0)); assertEquals(bytes[8], _appendByteEscape(byte, 0x00, bytes, 0)); assertEquals(bytes[9], _appendByteEscape(byte, 0x00, bytes, 0)); assertEquals(bytes[10], _
_appendByteEscape(0x0), 0x0, 0x0); _appendByteEscape(0x0, 0x0, 0x0); _appendByteEscape(0x0, 0x0, 0x0); _appendByteEscape(0x0, 0x0, 0x0); _appendByteEscape(0x0, 0x0, 0x0); _appendByteEscape(0x0, 0x0, 0x0); _appendByteEscape(0x0, 0x0, 0x0); _appendByteEscape(0x0, 0x0, 0x0); _appendByteEscape(0x0, 0x0, 0x0); _appendByteEscape(0x0, 0x0, 0x0); _appendByteEscape(0x0, 0x0, 0x0); _appendByteEscape(0x0, 0x0, 0x0); _appendByteEscape(0x0, 0x0, 0x0); _appendByteEscape(0x0, 0x0, 0x0); _appendByteEscape(0x0, 0x0, 0x0); _appendByteEscape(0x0, 0x0, 0x0); _appendByteEscape(0x0, 0x0, 0x0); _appendByteEscape(0x0, 0x0, 0x0); _appendByteEscape(0x0, 0x0, 0x0); _appendByteEscape(0x
_appendByteEscape(0x0), 0x0); _appendByteEscape(0x0x0, 0x0); _appendByteEscape(0x0x0, 0x0); _appendByteEscape(0x0x0, 0x0); _appendByteEscape(0x0x0, 0x0); _appendByteEscape(0x0x0, 0x0); _appendByteEscape(0x0x0, 0x0); _appendByteEscape(0x0x0, 0x0); _appendByteEscape(0x0x0, 0x0); _appendByteEscape(0x0x0, 0x0); _appendByteEscape(0x0x0, 0x0); _appendByteEscape(0x0x0, 0x0); _appendByteEscape(0x0x0, 0x0); _appendByteEscape(0x0x0, 0x0); _appendByteEscape(0x0x0, 0x0); _appendByteEscape(0x0x0, 0x0); _appendByteEscape(0x0x0, 0x0); _appendByteEscape(0x0x0, 0x0); _appendByteEscape(0x0x0, 0x0); _appendByteEscape(0x0x0,
_appendByteEscape(byte) { byte[] bytes = new byte[] { 0x0 }; byte[] escCode = _appendByteEscape(bytes[0], bytes[1], bytes[2]); assertArrayEquals(bytes, escCode); }
public void test_appendByteEscape() { int expectedLength = 4; ByteArrayBuilder builder = new ByteArrayBuilder(); int segmentLength = _appendByteEscape(expectedLength, 0, builder, 0); assertEquals(expectedLength, segmentLength); }
@Test public void testHasCurrentToken() throws JsonParseException { JsonToken token = new JsonToken(null, "one"); JsonToken token2 = new JsonToken(null, "two"); JsonToken token3 = new JsonToken(null, "three"); JsonToken token4 = new JsonToken(null, "four"); JsonToken token5 = new JsonToken(null, "five"); JsonToken token6 = new JsonToken(null, "six"); JsonToken token7 = new JsonToken(null, "seven"); JsonToken token8 = new JsonToken(null, "eight"); JsonToken token9 = new JsonToken(null, "nine"); JsonToken token10 = new JsonToken(null, "ten"); JsonToken token11 = new JsonToken(null, "twelve"); JsonToken token12 = new JsonToken(null, "twenty"); JsonToken token13 = new JsonToken(null, "six"); JsonToken token14 = new JsonToken(null, "twenty"); JsonToken token15 = new JsonToken(null, "seven"); JsonToken token20 = new JsonToken(null, "eight"); JsonToken token21 = new JsonToken(null, "n
@Test public void testHasCurrentToken() throws JsonParseException { JsonToken token = new JsonToken("\""); JsonToken token2 = new JsonToken("\""); JsonToken token3 = new JsonToken("\""); JsonToken token4 = new JsonToken("\""); JsonToken token5 = new JsonToken("\""); JsonToken token6 = new JsonToken("\""); JsonToken token7 = new JsonToken("\""); JsonToken token8 = new JsonToken("\""); JsonToken token9 = new JsonToken("\""); JsonToken token10 = new JsonToken("\""); JsonToken token11 = new JsonToken("\""); JsonToken token12 = new JsonToken("\""); JsonToken token13 = new JsonToken("\""); JsonToken token14 = new JsonToken("\""); JsonToken token20 = new JsonToken("\""); JsonToken21 = new JsonToken("\""); JsonToken22 = new JsonToken("\""); JsonToken23 = new JsonToken("\""); JsonToken24 = new JsonToken("\""); JsonToken24 = new JsonToken("\""); JsonToken28 = new JsonToken("\""); JsonToken29 = new JsonToken("\""); JsonToken28 = new JsonToken("
@Test public void testClearCurrentToken() { JsonToken token = new JsonToken(new byte[] { 1, 2, 3 }); JsonToken token2 = new JsonToken(new byte[] { 4, 5, 6 }); JsonToken token3 = new JsonToken(new byte[] { 8, 9, 10 }); JsonToken token4 = new JsonToken(new byte[] { 9, 11, 12 }); JsonToken token5 = new JsonToken(new byte[] { 11, 11, 12 }); JsonToken token6 = new JsonToken(new byte[] { 11, 11, 12 }); JsonToken token7 = new JsonToken(new byte[] { 11, 11, 12 }); JsonToken token8 = new JsonToken(new byte[] { 11, 11, 12 }); JsonToken token9 = new JsonToken(new byte[] { 11, 11, 12 }); JsonToken token10 = new JsonToken(new byte[] { 11, 11, 11, 12 }); JsonToken token11 = new JsonToken(new byte[] { 11, 11, 11, 12 }); JsonToken token10 = new JsonToken(new byte[] { 11, 11, 11, 12 }); JsonToken token10 = new JsonToken(new byte[] { 11, 11, 11, 12 }); JsonToken token10 = new JsonToken(new byte[] { 11, 11, 11, 12 }); JsonToken token
@Test public void testClearCurrentToken() { JsonToken token = new JsonToken("\""); JsonToken token2 = new JsonToken("\""); JsonToken token3 = new JsonToken("\""); JsonToken token4 = new JsonToken("\""); JsonToken token5 = new JsonToken("\""); JsonToken token6 = new JsonToken("\""); JsonToken token7 = new JsonToken("\""); JsonToken token8 = new JsonToken("\""); JsonToken token9 = new JsonToken("\""); JsonToken token10 = new JsonToken("\""); JsonToken token11 = new JsonToken("\""); JsonToken token12 = new JsonToken("\""); JsonToken token13 = new JsonToken("\""); JsonToken token14 = new JsonToken("\""); JsonToken token15 = new JsonToken("\""); JsonToken token16 = new JsonToken("\""); JsonToken token21 = new JsonToken("\""); JsonToken token22 = new JsonToken("\""); JsonToken token23 = new JsonToken("\""); JsonToken token24 = new JsonToken("\""); JsonToken token24 = new JsonToken("\""); JsonToken token25 = new JsonToken("\""); JsonToken token26
@Test public void testClearCurrentToken() { JsonToken token = new JsonToken("\""); JsonToken lastToken = new JsonToken("\""); JsonToken newToken = new JsonToken("\""); JsonToken newToken = new JsonToken("\""); JsonToken newToken = new JsonToken("\""); JsonToken newToken = new JsonToken("\""); JsonToken newToken = new JsonToken("\""); JsonToken newToken = new JsonToken("\""); JsonToken newToken = new JsonToken("\""); JsonToken newToken = new JsonToken("\""); JsonToken newToken = new JsonToken("\""); JsonToken newToken = new JsonToken("\""); JsonToken newToken = new JsonToken("\""); JsonToken newToken = new JsonToken("\""); JsonToken newToken = new JsonToken("\""); JsonToken newToken = new JsonToken("\""); JsonToken newToken = new JsonToken("\""); JsonToken newToken = new JsonToken("\""); JsonToken newToken = new JsonToken("\""); JsonToken newToken = new JsonToken("\""); JsonToken newToken = new JsonToken("\""); JsonToken newToken = new JsonToken("\""); JsonToken newToken
@Test public void testClearCurrentToken() { JsonToken token = new JsonToken(); token.nextToken(); token.nextToken(); token.nextToken(); token.nextToken(); token.clearCurrentToken(); Assert.assertEquals(null, token.getCurrentToken()); Assert.assertEquals(null, token.getLastClearedToken()); }
@Test public void testReportUnexpectedChar() throws JsonParseException { [LINE] protected void reportUnexpectedChar(int ch, String comment) throws JsonParseException { new MockUp<JsonToken>() { @Mock protected JsonToken nextToken() throws JsonParseException { return null; } }; new MockUp<JsonToken>() { @Mock protected JsonToken nextToken() throws JsonParseException { return null; } }; new MockUp<JsonToken>() { @Mock protected JsonToken nextToken() throws JsonParseException { return null; } }; new MockUp<JsonToken>() { @Mock protected JsonToken nextToken() throws JsonParseException { return null; } }; new MockUp<JsonToken>() { @Mock protected JsonToken nextToken() throws JsonParseException { return null; } }; new MockUp<JsonToken>() { @Mock protected JsonToken nextToken() throws JsonParseException { return null; } }; new MockUp<JsonToken>() { @Mock protected JsonToken nextToken() throws JsonParseException { return null; } }; new MockUp<JsonToken>() { @Mock protected JsonToken nextToken() throws JsonParseException { return null; } }; new MockUp<JsonToken>() { @Mock protected JsonToken nextToken() throws JsonParseException { return null; } }; new MockUp<JsonToken>()
@Test public void reportUnexpectedChar() { { int ch = (char)__INITIAL_TOKEN.nextToken(); _reportUnexpectedChar(ch, null); } { int ch = (char)__INITIAL_TOKEN.nextToken(); _reportUnexpectedChar(ch, "comment"); } { int ch = (char)__INITIAL_TOKEN.nextToken(); _reportUnexpectedChar(ch, null); } { int ch = (char)__INITIAL_TOKEN.nextToken(); _reportUnexpectedChar(ch, "comment"); } { int ch = (char)__INITIAL_TOKEN.nextToken(); _reportError(null); } { int ch = (char)__INITIAL_TOKEN.nextToken(); _reportUnexpectedChar(ch, "comment"); } { int ch = (char)_INITIAL_TOKEN.nextToken(); _reportUnexpectedChar(ch, "comment"); } { int ch = (char)_INITIAL_TOKEN.nextToken(); _reportUnexpectedChar(ch, "comment"); } { int ch = (char)_INITIAL_TOKEN.nextToken(); _reportUnexpectedChar(ch, "comment"); } { int ch = (char)_INITIAL_TOKEN.
@Test public void testReportUnexpectedChar() throws JsonParseException { new JsonParser() { { new JsonTokenToken(JsonToken.TOKEN_EOF, null); } }; new JsonParser() { { new JsonTokenToken(JsonToken.TOKEN_EOF, " "); } }; new JsonParser() { { new JsonTokenToken(JsonToken.TOKEN_EOF, " "); } }; new JsonParser() { { new JsonTokenToken(JsonToken.TOKEN_EOF, " "); } }; new JsonParser() { { new JsonTokenToken(JsonToken.TOKEN_EOF, " "); } }; new JsonParser() { { new JsonTokenToken(JsonToken.TOKEN_EOF, " "); } }; new JsonParser() { { new JsonTokenToken(JsonToken.TOKEN_EOF, " "); } }; new JsonParser() { { new JsonTokenToken(JsonToken.TOKEN_EOF, " "); } }; new JsonParser() { { new JsonTokenToken(JsonToken.TOKEN_EOF, " "); } }; new JsonParser() { { new JsonToken(JsonToken.TOKEN_EOF, " "); } }; new JsonParser() { { new JsonToken(JsonToken.TOKEN_EOF, " "); } }; new Json
@Test public void testReportUnexpectedChar() throws JsonParseException { String msg = "Unexpected character (9)"; [LINE] msg += ": "+comment; [LINE] msg += ": "+comment; [LINE] msg += ": "+comment; [LINE] msg += ": "+comment; [LINE] msg += ": "+comment; [LINE] msg += ": "+comment; [LINE] msg += ": "+comment; [LINE] msg += ": "+comment; [LINE] msg += ": "+comment; [LINE] msg += ": "+comment; [LINE] }
@Test public void testReportUnexpectedChar() throws JsonParseException { JsonToken token = new JsonToken(TokenType.EOF); token.nextToken(); _reportUnexpectedChar('a', "a"); _reportUnexpectedChar('a', null); _reportUnexpectedChar('a', "a"); _reportUnexpectedChar('a', null); _reportUnexpectedChar('a', "a"); _reportUnexpectedChar('a', null); _reportUnexpectedChar('a', "a"); _reportUnexpectedChar('a', "a"); _reportUnexpectedChar('a', "a"); _reportUnexpectedChar('a', "a"); _reportUnexpectedChar('a', "a"); _reportUnexpectedChar('a', "a"); _reportUnexpectedChar('a', "a"); _reportUnexpectedChar('a', "a"); _reportUnexpectedChar('a', "a"); _reportUnexpectedChar('a', "a"); _reportUnexpectedChar('a', "a"); _reportUnexpectedChar('a', "a"); }
@Test public void testReportInvalidEOF() throws JsonParseException { JsonTokenBuilder tokenBuilder = new JsonTokenBuilder(); tokenBuilder.setToken(JsonToken.EOF); tokenBuilder.nextToken(); _testParser.reset(); _testParser.nextToken(); _testParser.nextToken(); _testParser.nextToken(); _testParser.nextToken(); _testParser.nextToken(); _testParser.nextToken(); _testParser.nextToken(); _testParser.nextToken(); _testParser.nextToken(); _testParser.nextToken(); _testParser.nextToken(); _testParser.nextToken(); _testParser.nextToken(); _testParser.nextToken(); _testParser.nextToken(); _testParser.nextToken(); _testParser.nextToken(); _testParser.nextToken(); _testParser.nextToken(); _testParser.nextToken(); _testParser.nextToken(); _testParser.nextToken(); _testParser.nextToken(); _testParser.nextToken(); _testParser.nextToken(); _testParser.nextToken(); _testParser.nextToken(); _testParser.nextToken(); _testParser.nextToken(); _testParser.next
@Test public void testReportInvalidEOF() { JsonTokenEOF mockTokenEOF = mock(JsonTokenEOF.class); new JsonTokenEOF(mockTokenEOF).reset(); new JsonTokenEOF(mockTokenEOF).reset(); new JsonTokenEOF(mockTokenEOF).reset(); new JsonTokenEOF(mockTokenEOF).reset(); new JsonTokenEOF(mockTokenEOF).reset(); new JsonTokenEOF(mockTokenEOF).reset(); new JsonTokenEOF(mockTokenEOF).reset(); new JsonTokenEOF(mockTokenEOF).reset(); new JsonTokenEOF(mockTokenEOF).reset(); new JsonTokenEOF(mockTokenEOF).reset(); new JsonTokenEOF(mockTokenEOF).reset(); new JsonTokenEOF(mockTokenEOF).reset(); new JsonTokenEOF(mockTokenEOF).reset(); new JsonTokenEOF(mockTokenEOF).reset(); new JsonTokenEOF(mockTokenEOF).reset(); new JsonTokenEOF(mockTokenEOF).reset(); new JsonTokenEOF(mockTokenEOF).reset(); new JsonTokenEOF(mockTokenEOF).reset(); new JsonTokenEOF(mockTokenEOF).reset(); new JsonTokenEOF(mockTokenEOF).reset(); new JsonTokenEOF(mockTokenEOF).reset
@Test public void testFailUnquotedSpace() throws JsonParseException { new TestParser() { { new TestParser() { { new TestParser() { { new TestParser() { { new TestParser() { { new TestParser() { { new TestParser() { { new TestParser() { { new TestParser() { { { new TestParser() { { { new TestParser() { { { new TestParser() { { { new TestParser() { { { { } }
@Test public void testFailUnquotedSpace() throws JsonParseException { new TestParser() { { new TestParser() { { new TestFeature(Feature.ALLOW_UNQUOTED_CONTROL_CHARS); { new TestFeature(Feature.ALLOW_UNQUOTED_CONTROL_CHARS); { new TestParser() { { new TestFeature(Feature.ALLOW_UNQUOTED_CONTROL_CHARS); { new TestParser() { { new TestFeature(Feature.ALLOW_UNQUOTED_CONTROL_CHARS); { new TestParser() { { { new TestFeature(Feature.ALLOW_UNQUOTED_CONTROL_CHARS); { { new TestParser() { { { new TestFeature(Feature.ALLOW_UNQUOTED_CONTROL_CHARS); { { { new TestParser() { { { { { new TestParser(Feature.ALLOW_UNQUOTED_CONTROL_CHARS); { { { new TestParser(Feature.ALLOW_UNQUOTED_CONTROL_CHARS); { { { new TestParser(Feature.ALLOW_UNQUOTED_CONTROL_CHARS); { { { new TestParser(Feature.ALLOW_UNQUOTED_CONTROL_CHARS); { { { { new Test
@Test public void testFailUnquotedSpace() throws JsonParseException { new TestParser() { @Override protected void _throwUnquotedSpace(int i, String ctxtDesc) throws JsonParseException { fail("Expected an exception"); } @Override protected void _allowUnquotedControlChars(int i, boolean ctxtDesc) throws JsonParseException { assertFalse(isEnabled(Feature.ALLOW_UNQUOTED_CONTROL_CHARS)); } }; }
@Test public void testFailUnquotedSpace() throws JsonParseException { new TestParser()._throwUnquotedSpace(1, "\\\\"); new TestParser()._throwUnquotedSpace(2, "\\"); new TestParser()._throwUnquotedSpace(3, "\\"); new TestParser()._throwUnquotedSpace(4, "\\"); new TestParser()._throwUnquotedSpace(9, "\\"); new TestParser()._throwUnquotedSpace(9, "\\"); new TestParser()._throwUnquotedSpace(9, "\\"); new TestParser()._throwUnquotedSpace(9, "\\"); new TestParser()._throwUnquotedSpace(9, "\\"); new TestParser()._throwUnquotedSpace(9, "\\"); new TestParser()._throwUnquotedSpace(9, "\\"); new TestParser()._throwUnquotedSpace(9, "\\"); new TestParser()._throwUnquotedSpace(9, "\\"); new TestParser()._throwUnquotedSpace(9, "\\"); new TestParser()._throwUnquotedSpace(9, "\\"); new TestParser()._throwUnquotedSpace(9, "\\"); new TestParser()._throwUnquotedSpace(9, "\\"); new TestParser()._throwUnquotedSpace(9, "\\"); new TestParser()._throwUnquotedSpace(
@Test public void testFailUnquotedControlChars() throws JsonParseException { new TestParser() { @Override protected void reportError(String msg) { reportError(_msg); } @Override protected void reportError(String msg) { reportError(_msg); } }.test(); }
protected final void testGetCharDesc() { assertEquals("'a' (code 0x02)", "(CTRL-CHAR, code 0x02)"); assertEquals("'a' (code 0x03)", "(CTRL-CHAR, code 0x03)"); assertEquals("'a' (code 0x04)", "(CTRL-CHAR, code 0x04)"); assertEquals("'a' (code 0x05)", "(CTRL-CHAR, code 0x05)"); assertEquals("'a' (code 0x06)", "(CTRL-CHAR, code 0x06)"); assertEquals("'a' (code 0x07)", "(CTRL-CHAR, code 0x071)"); assertEquals("'a' (code 0x02)", "(CTRL-CHAR, code 0x02)"); assertEquals("'a' (code 0x03)", "(CTRL-CHAR, code 0x03)"); assertEquals("'a' (code 0x05)", "(CTRL-CHAR, code 0x05)"); assertEquals("'a' (code 0x02' (code 0x03)", "(CTRL-CHAR, code 0x02)"); assertEquals
public void testGetCharDesc() { assertEquals("'abc' (code 0x02)", "(CTRL-CHAR, code 0x02)", [LINE] ); assertEquals("'abc' (code 0x03)", "(CTRL-CHAR, code 0x03)", [LINE] ); assertEquals("'"abc' (code 0x05)", "(CTRL-CHAR, code 0x05)", [LINE] ); assertEquals("'"abc' (code 0x05)", "(CTRL-CHAR, code 0x05)", [LINE] ); assertEquals("'"abc' (code 0x03)", "(CTRL-CHAR, code 0x03)", [LINE] ); assertEquals("'"abc' (code 0x05)", "(CTRL-CHAR, code 0x05)", [LINE] ); assertEquals("'"abc' (code 0x03)", "(CTRL-CHAR, code 0x03)", [LINE] ); assertEquals("'"abc' (code 0x03)", "(CTRL-CHAR, code 0x03)", [LINE] ); assertEquals("'"abc' (code 0x03)", "(CTRL-CHAR, code 0x03)",
public final void testGetCharDesc() { String s = "(CTRL-CHAR, code 0x03)"; Assert.assertEquals("'" + s + "'", s); s = "(CTRL-CHAR, code 0x03)"; Assert.assertEquals("'" + s + "' (code 0x03)", s); s = "(CTRL-CHAR, code 0x03)"; Assert.assertEquals("'" + s + "' (code 0x03)", s); s = "(CTRL-CHAR, code 0x05)"; Assert.assertEquals("'" + s + "' (code 0x05)", s); s = "(CTRL-CHAR, code 0x03)"; Assert.assertEquals("'" + s + "' (code 0x03)", s); s = "(CTRL-CHAR, code 0x05)"; Assert.assertEquals("'" + s + "' (code 0x05)", s); s = "(CTRL-CHAR, code 0x03)"; Assert.assertEquals("'" + s + "' (code 0x03)", s); s = "(CTRL-CHAR, code 0x05)"; Assert.assertEquals("'" +
public final String _getCharDesc() { String description = "(CTRL-CHAR, code 0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x0x
public final void testGetCharDesc() { if (255 == null) return null; String desc = _getCharDesc(255); if (desc!= null) { return desc; } fail("invalid char returned"); }

@Test public void testJsonWriteContext() { JsonWriteContext context = new JsonWriteContext(JsonWriteContext.READ_ONLY); context.writeValue(); context.writeValue(); context.writeValue(); context.writeValue(); context.writeValue(); context.writeValue(); context.writeValue(); context.writeValue(); context.writeValue(); context.writeValue(); context.writeValue(); context.writeValue(); context.writeValue(); context.writeValue(); context.writeValue(); context.writeValue(); context.writeValue(); context.writeValue(); context.writeValue(); context.writeValue(); context.writeValue(); context.writeValue(); context.writeValue(); context.writeValue(); context.writeValue(); context.writeValue(); context.writeValue(); }
@Test public void test_JsonWriteContext() { JsonWriteContext context = JsonWriteContext.createRootContext(); context.writeValue(); context.writeValue(); context.writeValue(); context.writeValue(); context.writeValue(); }
@Test public void test_JsonWriteContext() { JsonWriteContext context = JsonWriteContext.createRootContext(); context.writeValue(); context.writeValue(); context.writeValue(); context.writeValue(); context.writeValue(); context.writeValue(); context.writeValue(); context.writeValue(); context.writeValue(); context.writeValue(); context.writeValue(); context.writeValue(); context.writeValue(); context.writeValue(); context.writeValue(); context.writeValue(); context.writeValue(); context.writeValue(); context.writeValue(); context.writeValue(); context.writeValue(); context.writeValue(); context.writeValue(); context.writeValue(); }
@Test public void test_JsonWriteContext_context_context_context_context() { JsonWriteContext context = new JsonWriteContext(JsonWriteContext.Type.OBJECT, null); context.writeValue(); context.writeValue(); context.writeValue(); context.writeValue(); }
@Test public void test_context_writer_for_line() { JsonWriteContext context = JsonWriteContext.createRootContext(); context.writeValue(); context.writeValue(); context.writeValue(); context.writeValue(); }
@Test public void testCreateRootContext() { JsonWriteContext context = Json.createRootContext(); Assert.assertNotNull(context); }
@Test public void testNewContext() { JsonWriteContext context = JsonWriteContext.createRootContext(); Assert.assertNotNull(context); Assert.assertTrue(context.isNew()); context.writeValue(); Assert.assertTrue(context.isNew()); context.writeValue(); Assert.assertTrue(context.isNew()); }
@Test(expected = InvalidCopyException.class) public void test_copy_fail() { JsonFactory f = new JsonFactory(); f.copy(); }
@Test(expected = InvalidCopyException.class) public void test_copy() { JsonFactory f = new JsonFactory(); f.copy(); }
@Test(expected = JsonException.class) public void test_object_copy() { JsonFactory f = new JsonFactory(); f.copy(); }
@Test public void test_checkInvalidCopy() { JsonFactory factory = new JsonFactory(); factory.copy().checkInvalidCopy(String.class); }
@Test public void test_checkInvalidCopy() { JsonFactory factory = new JsonFactory(); JsonFactory copy = factory.copy(); new JsonFactory(_defaultCodec).checkInvalidCopy(null); new JsonFactory(_defaultCodec).checkInvalidCopy(Number.class); new JsonFactory(_defaultCodec).checkInvalidCopy(String.class); new JsonFactory(_defaultCodec).checkInvalidCopy(Object.class); new JsonFactory(_defaultCodec).checkInvalidCopy(Number.class); new JsonFactory(_defaultCodec).checkInvalidCopy(Number.class); new JsonFactory(_defaultCodec).checkInvalidCopy(Number.class); new JsonFactory(_defaultCodec).checkInvalidCopy(Number.class); new JsonFactory(_defaultCodec).checkInvalidCopy(Number.class); new JsonFactory(_defaultCodec).checkInvalidCopy(Number.class); new JsonFactory(_defaultCodec).checkInvalidCopy(Number.class); new JsonFactory(_defaultCodec).checkInvalidCopy(Number.class); new JsonFactory(_defaultCodec).checkInvalidCopy(Number.class); new JsonFactory(_defaultCodec).checkInvalidCopy(Number.class); new JsonFactory(_defaultCodec).checkInvalidCopy(Number.class); new JsonFactory(_default
@Test public void simpleObject() throws IOException { JsonFactory f = new JsonFactory(); assertEquals("{\"foo\":\"bar\"}", f.getFormatName()); }
@Test public void getFormatName() { JsonFactory f = new JsonFactory(); assertEquals("JSON", f.getFormatName()); f = new JsonFactory(); assertEquals("JSON", f.getFormatName()); f = new JsonFactory(); assertEquals("JSON", f.getFormatName()); f = new JsonFactory(); assertEquals("null", f.getFormatName()); }
@Test public void testJSONFormat() throws IOException { JsonFactory f = new JsonFactory(); assertEquals("{}", f.getFormatName()); f = new JsonFactory(); assertEquals("{}", f.getFormatName()); f = new JsonFactory(); assertEquals("{}", f.getFormatName()); f = new JsonFactory(); assertEquals("{}", f.getFormatName()); f = new JsonFactory(); assertEquals("{}", f.getFormatName()); f = new JsonFactory(); assertEquals("{}", f.getFormatName()); f = new JsonFactory(); assertEquals("{}", f.getFormatName()); f = new JsonFactory(); assertEquals("{}", f.getFormatName()); }
@Test public void test_hasFormat_null() throws Exception { Ve ves = new Ve(); InputAccessor acc = acc("{}", "{\"test\":\"value\"}", null); Assert.assertNull(ves.hasFormat(acc)); }
@Test public void jsonFactory_hasJSONFormat() throws IOException { JsonFactory jsonFactory = new JsonFactory(); InputAccessor acc = jsonFactory.inputAccessor(new StringReader("\"foo\"")); MatchStrength matchStrength = jsonFactory.hasFormat(acc); Assert.assertTrue(matchStrength.supports(FormatSchema.class)); Assert.assertTrue(matchStrength.supports(FormatSchema.class)); }
@Test public void json_object_not_null() throws Exception { JsonFactory factory = new JsonFactory(); InputAccessor acc = new InputAccessor(new StringReader("{\"test\":null}")); Assert.assertNull(factory.hasFormat(acc)); }
@Test public void testJSON_hasJSONFormat() throws Exception { String json = "{\"test\":{}}"; assertStrength(cfg.hasJSONFormat(accessor))); }
@Test public void testJSON_hasJSONFormat_null() throws IOException { ByteSourceJsonBootstrapper.InputAccessor acc = jsonFactory.getByteSourceAccessor("null"); Assert.assertNull(JSON_STRING_JSON_SEARCH.hasJSONFormat(acc)); }
@Test public void testVersion() throws IOException { Version version = new JsonFactory().version(); System.out.println("Expected version: " + version); }
@Test public void test_version() { Version v = new JsonFactory().version(); assertEquals("1.2.3", v.stringValue()); }
@Test public void testJSON() { JsonFactory f = new JsonFactory().enable(JsonParser.Feature.LEAF); f.setMask(true); assertEquals(f, f.copy()); }
@Test public void testDisable() throws IOException { JsonFactory f = new JsonFactory(); f.enable(JsonParser.Feature.STRICT); f.enable(JsonParser.Feature.EOL); assertEquals(9, f.getMask()); }
@Test public void test_enable() throws IOException { JsonFactory f = new JsonFactory().enable(JsonParser.Feature.STRICT); assertWithMessage("Expected strict mode, but got: EOL").that(f.getFlags()).isEqualTo(JsonParser.EOL); f = new JsonFactory().enable(JsonParser.Feature.STRICT); assertWithMessage("Expected strict mode, but got: EOL").that(f.getFlags()).isEqualTo(JsonParser.EOL); f = new JsonFactory().enable(JsonParser.Feature.EOL); assertWithMessage("Expected strict mode, but got: EOL").that(f.getFlags()).isEqualTo(JsonParser.EOL); }
@Test public void testBoolean() { JsonFactory f = new JsonFactory(); Assert.assertTrue(f.isEnabled(JsonParser.Feature.BOOLEAN)); Assert.assertFalse(f.isEnabled(JsonParser.Feature.BOOLEAN_FALSE)); Assert.assertFalse(f.isEnabled(JsonParser.Feature.BOOLEAN_POSITIVE)); Assert.assertFalse(f.isEnabled(JsonParser.Feature.BOOLEAN_POSITIVE_INFINITY)); Assert.assertFalse(f.isEnabled(JsonParser.Feature.BOOLEAN_POSITIVE_INFINITY)); Assert.assertTrue(f.isEnabled(JsonParser.Feature.BOOLEAN_POSITIVE_INFINITY)); Assert.assertTrue(f.isEnabled(JsonParser.Feature.BOOLEAN_NEGATIVE_INFINITY)); Assert.assertTrue(f.isEnabled(JsonParser.Feature.BOOLEAN_NEGATIVE_INFINITY)); Assert.assertTrue(f.isEnabled(JsonParser.Feature.BOOLEAN_POSITIVE_INFINITY)); Assert.assertTrue(f.isEnabled(JsonParser.Feature.BOOLEAN_NEGATIVE_INFINITY)); Assert.assertTrue(f.isEnabled(JsonParser.Feature.BOOLEAN_NEGATIVE_INFINITY)); Assert.assert
@Test public void testBoolean() throws IOException { JsonFactory f = new JsonFactory(); assertTrue(f.isEnabled(JsonParser.Feature.BOOLEAN)); f.setMask(JsonParser.Feature.BOOLEAN); assertTrue(f.isEnabled(JsonParser.Feature.BOOLEAN)); f.setMask(JsonParser.Feature.CHAR); assertFalse(f.isEnabled(JsonParser.Feature.CHAR)); }
@Test(expected = IOException.class) public void testJSON_double() throws IOException { JsonFactory f = new JsonFactory(); f.configure(JsonGenerator.Feature.STRICT, false); }
@Test(expected = IOException.class) public void testOR() throws IOException { JsonFactory f = new JsonFactory(); f.configure(f, true); f.or(new Object()); }
@Test public void testJSON() throws IOException { JsonFactory f = new JsonFactory().enable(JsonFactory.Feature
@Test public void testEnable() throws IOException { JsonFactory f = new JsonFactory(); f.enable(JsonFactory.Feature.COUNT); f.enable(JsonFactory.Feature.COUNT); Assert.assertEquals("Unexpected number of generator features", 1, f.getMask()); f.enable(JsonFactory.Feature.COUNT); Assert.assertEquals("Unexpected number of generator features", 1, f.getMask()); f.enable(JsonFactory.Feature.COUNT); Assert.assertEquals("Unexpected number of generator features", 1, f.getMask()); }
@Test public void test_enable() throws IOException { JsonFactory f = new JsonFactory(); f.enable(JsonGenerator.Feature.COUNTER); Assert.assertEquals("Unexpected number of lines", 1, f.getNumberLines()); f.enable(JsonGenerator.Feature.COUNTER); Assert.assertEquals("Unexpected number of lines", 1, f.getNumberLines()); f.enable(JsonGenerator.Feature.COUNTER); Assert.assertEquals("Unexpected number of lines", 1, f.getNumberLines()); f.enable(JsonGenerator.Feature.COUNTER); Assert.assertEquals("Unexpected number of lines", 1, f.getNumberLines()); }
@Test public void testDisable() throws IOException { JsonFactory f = new JsonFactory(); f.disable(JsonFactory.Feature.STRICT); }
@Test public void disable() { JsonFactory f = new JsonFactory(); f.disable(JsonFactory.Feature.STRICT); assertFlags(f, 0, 1, 0); }
@Test public void testDisable() throws IOException { JsonFactory f = new JsonFactory(); f.disable(JsonGenerator.Feature.STRICT); Assert.assertEquals("Unexpected EOF", f.toString(), "Unexpected EOF"); f.disable(JsonGenerator.Feature.EOL); Assert.assertEquals("Unexpected EOF", f.toString(), "Unexpected EOF"); f.disable(JsonGenerator.Feature.EOL); Assert.assertEquals("Unexpected EOF", f.toString(), "Unexpected EOF"); }
@Test public void testEnum() { JsonFactory f = new JsonFactory(); Assert.assertTrue(f.isEnabled(JsonFactory.Feature.ENUM)); Assert.assertFalse(f.isEnabled(JsonFactory.Feature.ENUM)); Assert.assertFalse(f.isEnabled(JsonFactory.Feature.ENUM)); Assert.assertFalse(f.isEnabled(JsonFactory.Feature.ENUM)); Assert.assertFalse(f.isEnabled(JsonFactory.Feature.ENUM)); Assert.assertFalse(f.isEnabled(JsonFactory.Feature.ENUM)); Assert.assertFalse(f.isEnabled(JsonFactory.Feature.ENUM)); }
@Test public void testEnabled() throws IOException { JsonFactory f = new JsonFactory(); Assert.assertTrue(f.isEnabled(JsonFactory.Feature.ALL)); Assert.assertFalse(f.isEnabled(JsonFactory.Feature.ALL)); f = new JsonFactory(); Assert.assertFalse(f.isEnabled(JsonFactory.Feature.ALL)); f = new JsonFactory(); Assert.assertTrue(f.isEnabled(JsonFactory.Feature.ALL)); Assert.assertFalse(f.isEnabled(JsonFactory.Feature.ALL)); f = new JsonFactory(); Assert.assertTrue(f.isEnabled(JsonFactory.Feature.ALL)); Assert.assertTrue(f.isEnabled(JsonFactory.Feature.ALL)); f = new JsonFactory(); Assert.assertTrue(f.isEnabled(JsonFactory.Feature.ALL)); Assert.assertTrue(f.isEnabled(JsonFactory.Feature.ALL)); f = new JsonFactory(); Assert.assertTrue(f.isEnabled(JsonFactory.Feature.ALL)); Assert.assertTrue(f.isEnabled(JsonFactory.Feature.ALL)); Assert.assertTrue(f.isEnabled(JsonFactory.Feature.ALL)); }
@Test public void testName2() { assertEquals(name2, new Name2(name2, hash, quad1, quad2)); }
@Test public void testName2() { assertEquals(name, new Name2(name, hash, quad1, quad2)); }
@Test public void testName2() { Name2 name = new Name2(name, hash, 0, 0); Assert.assertEquals(name.mQuad1, 0); Assert.assertEquals(name.mQuad2, 0); }
@Test public void testName2() throws Exception { Name2 name = new Name2(name, hash, 0, 0); Assert.assertEquals(name.mQuad1, mQuad2); Assert.assertEquals(name.mQuad2, mQuad1); }
