@Test public void testNode() { Attributes attributes = new Attributes(); attributes.add("foo"); attributes.add("bar"); assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals
@Test public void testNode() { Attributes attributes = new Attributes(); try { new Node("http: fail("Must fail"); } catch (IllegalArgumentException e) { } try { new Node("http: fail("Must fail"); } catch (IllegalArgumentException e) { } try { new Node("http: fail("Must fail"); } catch (IllegalArgumentException e) { } try { new Node("http: fail("Must fail"); } catch (IllegalArgumentException e) { } try { new Node("http: fail("Must fail"); } catch (IllegalArgumentException e) { } Attributes attributes2 = new Attributes(); try { new Node("http: fail("Must fail"); } catch (IllegalArgumentException e) { } try { new Node("http: fail("Must fail"); } catch (IllegalArgumentException e) { } Attributes attributes3 = new Attributes(); try { new Node("http: fail("Must fail"); } catch (IllegalArgumentException e) { } try { new Node("http: fail("Must fail"); } catch (IllegalArgumentException e) { } try { new Node("http: fail("Must fail"); } catch (IllegalArgumentException e) { } try { new Node("http: fail("Must fail"); } catch (IllegalArgumentException
@Test public void testNullAttributes() { assertThrows(NullPointerException.class, () -> new TestNode("http: ); }
@Test public void testNode() { Node ou = new Node("http: Attributes attributes = new Attributes(); ou.addAttr("a", "href"); ou.addAttr("b", "href"); ou.addAttr("c", "href"); ou.addAttr("d", "href"); ou.addAttr("e", "href"); ou.addAttr("f", "href"); ou.addAttr("g", "href"); Node node = new Node("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http
@Test public void testBaseUri() { String baseUri = "http: Attributes attributes = new Attributes(); attributes.add("foo", "bar"); Node node = new Node(baseUri, attributes); assertEquals("http: }
@Test public void testNode() { Attributes attributes = new Attributes(); attributes.add("a"); attributes.add("b"); attributes.add("c"); Node node = new TestNode("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("
@Test public void testNode() { Node n = new Node("http: assertEquals("http: assertEquals("http: n.attr("href", "http: assertEquals("http: n.attr("rel", "self"); assertEquals("http: n.attr("href", "http: assertEquals("http: }
@Test public void testNodeChildNode() { Node n = new Node("http: Node n2 = new Node("http: n2.addAttr("attr1", "value1"); n2.addAttr("attr2", "value2"); n.addAttr("attr3", "value3"); n.addChild(n2); assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("
@Test public void testAttr() { Node node = new Node("http: Node node2 = node.attr("foo", "bar"); assertEquals("http: assertEquals("bar", node2.attr("foo")); }
@Test public void testAttr() { Attributes attributes = new Attributes(); attributes.put("foo", "bar"); Node node = new TestNode(BASE_URI, attributes); node.attr("foo", "bar"); assertEquals("bar", node.attr("foo")); assertEquals("bar", node.attr("foo")); }
@Test public void testAttr() { Node node = new Node("http: Attributes attributes = node.attributes(); assertEquals(node.attr("attr1", "value1"), "value1"); assertEquals(node.attr("attr2", "value2"), "value2"); assertEquals(node.attr("attr3", "value3"), "value3"); assertEquals(node.attr("attr4", "value4"), "value4"); assertEquals(node.attr("attr5", "value5"), "value5"); assertEquals(node.attr("attr6", "value6"), "value6"); assertEquals(node.attr("attr7", "value7"), "value7"); assertEquals(node.attr("attr8", "value8"), "value8"); assertEquals(node.attr("attr9", "value9"), "value9"); assertEquals(node.attr("attr10", "value10"), "value10"); assertEquals(node.attr("attr11", "value11"), "value11"); assertEquals(node.attr("attr12", "value12"), "value12"); assertEquals(node.attr("attr13", "value13"), "value13"); assertEquals(node.attr("attr14", "value14"), "value14"); assertEquals
@Test public void testChildNode() { Node n1 = new Node("http: Node n2 = new Node("http: n1.childNode(0); n1.childNode(1); n1.childNode(2); n1.childNode(3); n1.childNode(4); assertEquals(n1, n2); }
@Test public void testChildNode() { Node node = new Node("http: Node child1 = node.childNode(0); Node child2 = node.childNode(1); assertEquals(child1, child2); }
@Test public void parent() { Node n = new TestNode("http: Node parent = n.parent(); assertEquals(n.getNodeParent(), parent); }
@Test public void parent() { Node node = new Node("http: Attributes attributes = new Attributes(); attributes.attr("class", "foo"); node.attributes(attributes); node.parent(); assertEquals(node.parent(), node); }
@Test public void setParentNode() { try { Node parentNode = new Node("http: [LINE] public void setParentNode(Node parentNode) { } catch (Exception e) { fail("Not expected"); } try { Node parentNode2 = new Node("http: [LINE] public void setParentNode(Node parentNode2) { } } catch (Exception e) { fail("Not expected"); } try { Node parentNode3 = new Node("http: [LINE] public void setParentNode(Node parentNode3) { } } catch (Exception e) { fail("Not expected"); } try { Node parentNode4 = new Node("http: [LINE] public void setParentNode(Node parentNode4) { } } catch (Exception e) { fail("Not expected"); } try { Node parentNode5 = new Node("http: [LINE] public void setParentNode(Node parentNode5) { } } catch (Exception e) { fail("Not expected"); } try { Node parentNode6 = new Node("http: [LINE] public void setParentNode(Node parentNode6){ } } catch (Exception e) { fail("Not expected"); } try { Node parentNode7 = new Node("http: [LINE] public void setParentNode(Node parentNode7){ } } catch (
@Test public void setParentNode() { try { Node parentNode = new Node("/"); parentNode.setParentNode(parentNode); Assert.fail(); } catch (Exception e) { } try { Node parentNode2 = new Node("/"); parentNode2.setParentNode(parentNode2); Assert.fail(); } catch (Exception e) { } try { Node parentNode3 = new Node("/"); parentNode3.setParentNode(parentNode3); Assert.fail(); } catch (Exception e) { } try { Node parentNode4 = new Node("/"); parentNode4.setParentNode(parentNode4); Assert.fail(); } catch (Exception e) { } try { Node parentNode5 = new Node("/"); parentNode5.setParentNode(parentNode5); Assert.fail(); } catch (Exception e) { } try { Node parentNode6 = new Node("/"); parentNode6.setParentNode(parentNode6); Assert.fail(); } catch (Exception e) { } try { Node parentNode7 = new Node("/"); parentNode7.setParentNode(parentNode7); Assert.fail(); } catch (Exception e) { } try { Node parentNode8 = new Node("/"); parentNode8.setParentNode(parentNode8); Assert.fail(); } catch (Exception e) { } try { Node
@Test(expected = NotImplementedException.class) public void setParentNode() { Node parentNode = new Node("http: parentNode.parent(); }
@Test public void testRemoveChild() { Node parentNode = new Node("http: Node node1 = new Node("http: Node node2 = new Node("http: parentNode.removeChild(node1); parentNode.removeChild(node2); assertEquals(1, parentNode.childNodes.size()); assertEquals(node1, parentNode); }
@Test public void testAddChild() { Node node = new Node("http: Node node2 = new Node("http: node2.addChild(node); assertEquals(1, node.children.size()); assertEquals(node, node2); }
@Test public void testAddChild() { Node vo = new Node("http: control.addChild(vo); control.addChild(vo); control.addChild(vo); control.addChild(vo); control.addChild(vo); control.addChild(vo); control.addChild(vo); control.addChild(vo); control.addChild(vo); control.addChild(vo); control.addChild(vo); control.addChild(vo); control.addChild(vo); control.addChild(vo); control.addChild(vo); control.addChild(vo); control.addChild(vo); control.addChild(vo); control.addChild(vo); control.addChild(vo); control.addChild(vo); }
@Test public void testAddChild() { Node parentNode = new Node("http: Node node1 = new Node("http: Node node2 = new Node("http: parentNode.addChild(node1); parentNode.addChild(node2); Assert.assertEquals(1, parentNode.children.size()); Assert.assertEquals(node1, parentNode); }
@Test public void testAddChild() { Node node = new Node("http: Node node2 = new Node("http: node2.addChild(node); assertEquals(1, node.children().size()); assertEquals("http: }
@Test public void testAddChild() { Node vo = new Node("http: vo.parent().removeChild(vo); vo.addChild(vo); assertEquals(vo, vo.parentNode); }
@Test public void outerHtml() { String outerHtml = "<div>Hello World</div>"; assertEquals(outerHtml, htmlParagraph.outerHtml()); }
@Test public void outerHtml() { String outerHtml = "<div>Hello</div>"; String expected = "<div>Hello</div>"; assertEquals(expected, outerHtml); outerHtml = "<div>hello</div>"; expected = "<div>hello</div>"; assertEquals(expected, outerHtml); outerHtml = "<div>hello</div>"; expected = "<div>hello</div>"; expected = "<div>hello</div>"; assertEquals(expected, outerHtml); outerHtml = "<div>hello</div>"; expected = "<div>hello</div>"; assertEquals(expected, outerHtml); }
@Test public void outerHtml() { Html html = new Html(null) {{ new Div(null) {{ new Span(null) {{ new H1(this, "one"); new H2(this, "two"); new H3(this, "three"); new H4(this, "four"); }}; new H1(this, "five"); }}; }}; String expected = "<div><h1>one</h1><h2>two</h2><h3>three</h3></div>"; Html html2 = new Html(null) {{ new Div(null) {{ new Span(null) {{ new H1(this, "one"); new H2(this, "two"); new H3(this, "three"); }}; new H1(this, "four"); }}; new Html(html2) {{ new H1(this, "one"); new H2(this, "two"); new H3(this, "three"); }}; html2.outerHtml(html2); assertEquals(expected, html2.outerHtml()); }
@Test public void outerHtml() { String text = "<div>Hello World</div>"; String expected = "<div>Hello World</div>"; assertEquals(expected, text); text = "<div>Hello World</div>"; expected = "<div>Hello World</div>"; assertEquals(expected, text); text = "<div>Hello World</div>"; expected = "<div>Hello World</div>"; expected = "<div>Hello World</div>"; assertEquals(expected, text); text = "<div>Hello World</div>"; expected = "<div>Hello World</div>"; expected = ""; text = "<div>Hello World</div>"; expected = ""; text = "<div>Hello World</div>"; expected = ""; text = "<div>Hello World</div>"; expected = ""; text = "<div>Hello World</div>"; expected = ""; text = "<div>Hello World</div>"; expected = ""; text = "<div>Hello World</div>"; expected = ""; text = ""; text = ""; text = ""; text = ""; text = ""; }
@Test public void testHashCode() { assertEquals(new TestNode("http: assertEquals(new TestNode("http: assertEquals(new TestNode("http: assertEquals(new TestNode("http: assertEquals(new TestNode("http: assertEquals(new TestNode("http: assertEquals(new TestNode("http: assertEquals(new TestNode("http: }
@Test public void testHashCode() { assertEquals(node.hashCode(), node.hashCode()); }
@Test public void testHashCode() { assertEquals(node.hashCode(), node.hashCode()); }
@Test public void testHashCode() { assertEquals(testNode.hashCode(), testNode2.hashCode()); }
@Test public void xmlDeclaration() { XmlDeclaration xmlDeclaration = new XmlDeclaration("data", "http: assertEquals("data", xmlDeclaration.nodeName()); assertEquals("data", xmlDeclaration.attributes.get(DECL_KEY)); assertEquals(true, xmlDeclaration.isProcessingInstruction()); }
@Test public XmlDeclaration() { XmlDeclaration xmlDeclaration = new XmlDeclaration("data", "baseUri", false); assertEquals("data", xmlDeclaration.data); assertEquals("baseUri", xmlDeclaration.baseUri); }
@Test public void testXmlDeclaration() { XmlDeclaration xmlDeclaration = new XmlDeclaration("", "", false); assertEquals("", xmlDeclaration.attributes.get(DECL_KEY)); assertEquals("", xmlDeclaration.attributes.get(DECL_KEY)); }
@Test public void xmlDeclaration() { String data = "<declaration>"; XmlDeclaration xmlDeclaration = new XmlDeclaration(data, "http: XmlDeclaration xmlDeclaration2 = new XmlDeclaration(data, "http: assertEquals(xmlDeclaration.isProcessingInstruction(), isProcessingInstruction); assertEquals(xmlDeclaration2.attributes.get("declaration"), isProcessingInstruction); assertEquals(xmlDeclaration.attributes.get("data"), data); assertEquals(xmlDeclaration2.isProcessingInstruction(), isProcessingInstruction); }
@Test public void val() { Document doc = Jsoup.parse("<div><a href='foo'>1</a><a href='bar'>2</a>"); Elements els = doc.select("a"); assertEquals("1", els.val()); els.val("2"); assertEquals("2", els.val()); }
@Test public void val() { Document doc = Jsoup.parse("<div><a>Hello</a><a>there</a></div>"); assertEquals("Hello there", doc.select("a").val()); assertEquals("there", doc.select("a").val()); assertEquals("", doc.select("a").val()); assertEquals("", doc.select("a").val()); assertEquals("", doc.select("a").val()); assertEquals("", doc.select("a").val()); assertEquals("", doc.select("a").val()); assertEquals("", doc.select("a").val()); assertEquals("", doc.select("a").val()); assertEquals("", doc.select("a").val()); assertEquals("", doc.select("a").val()); assertEquals("", doc.select("a").val()); assertEquals("", doc.select("a").val()); assertEquals("", doc.select("a").val()); assertEquals("", doc.select("a").val()); assertEquals("", doc.select("a").val()); assertEquals("", doc.select("a").val()); assertEquals("", doc.select("a").val()); assertEquals("", doc.select("a").val()); assertEquals("", doc.select("a").val()); assertEquals("
@Test public void val() { Document doc = Jsoup.parse("<div><a href='foo'>1</a><a href='bar'>2</a>"); Elements els = doc.select("a").first(); assertEquals("1", els.val()); assertEquals("2", els.val()); }
@Test public void val() { Document doc = Jsoup.parse("<div><a href='foo'>1</a><a href='bar'>2</a>"); Elements els = doc.select("a").val("href"); assertEquals(2, els.size()); assertEquals("1", els.first().id()); assertEquals("2", els.last().id()); }
@Test public void val() { Document doc = Jsoup.parse("<div><a href='foo'>1</a><a href='bar'>2</a>"); Elements els = doc.select("div"); assertEquals(2, els.size()); assertEquals("1", els.val()); els.val("foo"); assertEquals(2, els.size()); assertEquals("foo", els.val("")); }
@Test public void val() { Document doc = Jsoup.parse("<div><a href='foo'>1</a><a href='bar'>2</a>"); Elements els = doc.select("div"); assertEquals(2, els.size()); els.val("1"); assertEquals("1", els.first().val()); assertEquals("2", els.last().val()); }
@Test public void val() { Document doc = Jsoup.parse("<div><p>Hello</p></div>"); Elements divs = doc.select("div"); assertEquals(1, divs.size()); assertEquals("Hello", divs.val("p")); }
@Test public void hasText() { Document doc = Jsoup.parse("<div><p>Hello</p></div><div><p>There</p></div>"); Elements ps = doc.select("div"); assertTrue(ps.hasText()); ps.select("p"); assertFalse(ps.hasText()); }
@Test public void hasText() { Document doc = Jsoup.parse("<div><p>Hello</p></div><div><p>There</p></div>"); Elements ps = doc.select("div"); assertTrue(ps.hasText()); ps.removeClass("div"); assertFalse(ps.hasText()); }
@Test public void hasText() { Document doc = Jsoup.parse("<div><p>Hello</p></div><div><p>There</p></div>"); Elements ps = doc.select("div"); assertEquals(true, ps.hasText()); ps = doc.select("div"); assertEquals(false, ps.hasText()); ps = doc.select("div *"); assertEquals(false, ps.hasText()); }
@Test public void hasText() { Document doc = Jsoup.parse("<div><p>Hello</p></div><div><p>There</p></div>"); Elements div = doc.select("div"); assertTrue(div.hasText()); }
@Test public void hasText() { Document doc = Jsoup.parse("<div><p>Hello</p></div><div><p>There</p></div>"); Elements div = doc.select("div"); assertFalse(div.hasText()); }
@Test public void removeAttrFromClass() { Document doc = Jsoup.parse("<div><p>Hello</p></div><div><p>There</p></div>"); Elements els = doc.select("div"); assertEquals(1, els.size()); assertEquals("div", els.first().tagName()); }
@Test public void removeAttrFromClass() { Document doc = Jsoup.parse("<div><p>Hello</p><p>There</p></div><div><p>Hello</p>"); Elements ps = doc.select("div"); assertEquals(1, ps.size()); assertEquals("div", ps.first().attr("class")); }
@Test public void is() { Document doc = Jsoup.parse("<div><p>Hello</p></div><div><p>There</p></div>"); Elements div1 = doc.select("div"); assertTrue(div1.is("p")); assertFalse(div1.is("div")); assertFalse(div1.is("div")); }
@Test public void is() { Document doc = Jsoup.parse("<div><p>Hello</p></div><div><p>There</p></div>"); Elements children = doc.select("div"); for (int i = 0; i < 3; i++) { Assert.assertTrue(children.hasText()); Assert.assertFalse(children.hasAttr("p")); } }
@Test public void is() { Document doc = Jsoup.parse("<div><p>Hello</p></div><div><p>There</p></div>"); Elements div1 = doc.select("div"); Elements div2 = doc.select("div"); assertTrue(div1.first().is("p")); assertFalse(div1.first().is("div")); assertFalse(div1.first().is("div")); assertFalse(div1.first().is("div")); }
@Test public void last() { Document doc = Jsoup.parse("<div><p>Hello</p></div>"); Element p = doc.select("p").last(); assertEquals("Hello", p.text()); }
@Test public void last() { Document doc = Jsoup.parse("<div><p>Hello</p></div>"); Element p1 = doc.select("p").last(); assertEquals("Hello", p1.text()); assertEquals("there", p1.attr("class")); assertEquals("div", p1.last().tagName()); Element p2 = doc.select("p").last(); assertEquals("Hello", p2.text()); assertEquals("there", p2.attr("class")); assertEquals("div", p2.last().tagName()); }
@Test public void testAttributeWithValueNot() { Evaluator evaluator = new Evaluator(); AttributeWithValueNot attributeWithValueNot = evaluator.findAttributeWithValueNot("key", "value"); assertEquals("\"key\"", attributeWithValueNot.getKey()); assertEquals("value", attributeWithValueNot.getValue()); }
@Test public void testAttributeWithValueNot() { Evaluator.AttributeWithValueNot("key", "value"); }
@Test public void testMatches() { Evaluator.EvaluatorEvaluator evaluator = new Evaluator.Evaluator(); Assert.assertTrue(evaluator.matches(evaluator.parse("<a class=\"foo\">bar</a>"))); Assert.assertTrue(evaluator.matches(evaluator.parse("<a class=\"bar\">bar</a>"))); Assert.assertTrue(evaluator.matches(evaluator.parse("<a class=\"foo\">bar</a>"))); Assert.assertTrue(evaluator.matches(evaluator.parse("<a class=\"bar\">bar</a>"))); Assert.assertTrue(evaluator.matches(evaluator.parse("<a class=\"bar\">bar</a>"))); Assert.assertTrue(evaluator.matches(evaluator.parse("<a class=\"bar\">bar</a>"))); Assert.assertTrue(evaluator.matches(evaluator.parse("<a class=\"bar\">bar</a>"))); Assert.assertTrue(evaluator.matches(evaluator.parse("<a class=\"bar\">bar</a>"))); Assert.assertTrue(evaluator.matches(evaluator.parse("<a class=\"bar\">bar</a>"))); Assert.assertTrue(evaluator.matches
@Test public void matches() { String xml = "<ol><a href=\"http: Element element = Evaluator.parseXml(xml); Assert.assertTrue(evaluator.matches(element)); }
@Test public void testAttributeWithValueStarting() { Evaluator evaluator = new Evaluator(); AttributeWithValueStarting attributeWithValueStarting = evaluator.findAttributeWithValueStarting("a", "b"); assertEquals("a", attributeWithValueStarting.getKey()); assertEquals("b", attributeWithValueStarting.getValue()); }
@Test void AttributeWithValueStarting() { Evaluator.AttributeWithValueStarting("key", "value"); }
@Test public void testMatches() { Evaluator evaluator = new Evaluator(); Assert.assertTrue(evaluator.matches(evaluator.parse("<a class='foo'>bar</a>"))); Assert.assertTrue(evaluator.matches(evaluator.parse("<a class='bar'>baz</a>"))); Assert.assertTrue(evaluator.matches(evaluator.parse("<a class='foo'>bar</a>"))); Assert.assertTrue(evaluator.matches(evaluator.parse("<a class='bar'>baz</a>"))); }
@Test public void testMatches() { String value = "Hello"; Element element = Evaluator.parse( "<ol [LINE] AttributeWithValue [LINE] AttributeWithValue [LINE] value = [LINE] " + value + " [LINE] " + "http: Assert.assertTrue(evaluator.matches(element)); element = Evaluator.parse( "<ol [LINE] AttributeWithValue [LINE] AttributeWithValue [LINE] value = [LINE] " + value + " [LINE] " + "http: Assert.assertFalse(evaluator.matches(element)); element = Evaluator.parse( "<ol [LINE] AttributeWithValue [LINE] AttributeWithValue [LINE] value = [LINE] " + value + " [LINE] " + "http: Assert.assertFalse(evaluator.matches(element)); }
@Test public void testAttributeWithValueEnding() { Evaluator evaluator = new Evaluator(); AttributeWithValueEnding attributeWithValueEnding = evaluator.findAttributeWithValueEnding("line", "Ending"); assertEquals("Ending", attributeWithValueEnding.getKey()); assertEquals("Ending", attributeWithValueEnding.getValue()); }
)strictly() { AttributeWithValueEnding("abc", "abc") ); }
@Test public void testMatches() { Pattern regex = Pattern.compile("^publi[a-z]+\\.matches(.*)"); Matcher matcher = Pattern.compile("^publi[a-z]+\\.matches(.*)"); Assert.assertTrue(matcher.matches(doc)); Assert.assertFalse(matcher.matches(doc)); }
@Test public void testMatch() { String input = "Hello, world"; Element element = Jsoup.parse(input); Assert.assertTrue(evaluator.matches(element)); }
@Test public void testIndexLessThan() { IndexLessThan i = new IndexLessThan(0); assertEquals(i, i.getElement().getNodeName()); assertEquals(i, i.getAttributeWithValue("key", "value")); assertEquals(i, i.getAttributeWithValue("key", "value")); assertEquals(i, i.getAttributeWithValue("key", "value")); assertEquals(i, i.getAttributeWithValue("key", "value")); assertEquals(i, i.getAttributeWithValue("key", "value")); assertEquals(i, i.getAttributeWithValue("key", "value")); assertEquals(i, i.getAttributeWithValue("key", "value")); assertEquals(i, i.getAttributeWithValue("key", "value")); }
@Test public void testIndexLessThan() throws Exception { Evaluator evaluator = new IndexLessThan(0); assertEquals(evaluator.get("/a/b/c"), "c"); }
@Test public void testMatches() throws Exception { Document doc = Jsoup.parse("<div><a>Hello</a></div><div><a>There</a></div>"); Element div1 = doc.select("div"); MatcherAssert.assertThat(new RegexEvaluator().matches(div1), Matchers.is(true)); Element div2 = doc.select("div"); MatcherAssert.assertThat(new RegexEvaluator().matches(div2), Matchers.is(false)); }
@Test public void testMatchElementSiblingIndex() { Element element = Evaluator.parse("<div class=foo><bar>Hello</bar></div>"); Assert.assertTrue(new IndexEquals(1).matches(element)); Assert.assertFalse(new IndexEquals(2).matches(element)); }
@Test public void testIndexGreaterThan() { Evaluator evaluator = new IndexGreaterThan(0); assertEquals(Evaluator.IndexEquals(0), evaluator.evaluatorValue("LINE")); assertEquals(Evaluator.IndexEquals(1), evaluator.evaluatorValue("LINE")); assertEquals(Evaluator.IndexEquals(2), evaluator.evaluatorValue("LINE")); assertEquals(Evaluator.IndexEquals(3), evaluator.evaluatorValue("LINE")); assertEquals(Evaluator.IndexEquals(4), evaluator.evaluatorValue("LINE")); assertEquals(Evaluator.IndexEquals(5), evaluator.evaluatorValue("LINE")); assertEquals(Evaluator.IndexEquals(6), evaluator.evaluatorValue("LINE")); assertEquals(Evaluator.IndexEquals(7), evaluator.evaluatorValue("LINE")); assertEquals(Evaluator.IndexEquals(8), evaluator.evaluatorValue("LINE")); assertEquals(Evaluator.IndexEquals(9), evaluator.evaluatorValue("LINE")); assertEquals(Evaluator.IndexEquals(10), evaluator.evaluatorValue("LINE")); assertEquals(Evaluator.IndexEquals(11), evaluator.evaluatorValue("LINE")); assertEquals(Evaluator.IndexEquals(12), evaluator.evaluatorValue("LINE")); assertEquals(Evaluator.IndexEquals(13), evaluator.evaluatorValue("LINE")); assertEquals(Evaluator.IndexEquals(14), evaluator.evaluatorValue
@Test public void testIndexGreaterThan() { { Evaluator.IndexEquals(23); Evaluator.IndexGreaterThan(23); } { Evaluator.IndexEquals(23); Evaluator.IndexGreaterThan(23); } }
@Test public void testMatches() throws Exception { Document doc = Jsoup.parse("<div><a>One</a></div><div><a>Two</a></div>"); Element one = doc.select("a").get(0); Element two = doc.select("a").get(1); assertTrue(one.matches(two)); assertTrue(two.matches(doc)); }
@Test public void testMatchElementSiblingIndex() { Element element = Evaluator.parse("<div class=foo><ol>bar</ol></div>").get(0); Assert.assertTrue(new IndexEquals(1).matches(element)); Assert.assertFalse(new IndexEquals(2).matches(element)); }
@Test public void testIndexEvaluator() { Element element = new Element("div"); Evaluator evaluator = new IndexEvaluator(0); evaluator.element = element; evaluator.text = "Hello"; assertEquals("Hello", evaluator.value); evaluator = new IndexEvaluator(1); evaluator.element = element; evaluator.text = "Hello"; assertEquals("Hello", evaluator.value); }
@Test public void testIndexEvaluator() { Element elem1 = Jsoup.parse("<div>Hello</div> <div>There</div> <div>There</div> <div>There</div> <div>There</div> <div>There</div> <div>There</div>"); Element elem2 = Jsoup.parse("<div>Hello</div> <div>There</div> <div>There</div> <div>There</div> <div>There</div> <div>There</div> <div>There</div> <div>There</div> <div>There</div> <div>There</div> <div>There</div>"); List<String> expected = Arrays.asList("Hello", "There", "There", "There", "There", "There", "There", "There", "There", "There", "There", "There", "There", "There", "There", "There", "There", "There", "There", "There", "There", "There", "There", "There", "There", "There", "There", "There", "There", "There", "There", "There", "
@Test public void testEscaping() { String xml = "<foo><bar>Hello</bar></foo>"; Whitelist whitelist = Whitelist.newBuilder().addEscaping("foo").build(); Cleaner cr = new Cleaner(whitelist); assertEquals("<foo><bar>Hello</bar></foo>", xml); }
@Test public void testEscaping() { String s = "<a><b>c</b></a>"; Whitelist whitelist = Whitelist.newBuilder().addEscaping("a").build(); Element el = Jsoup.parse(s); assertEquals("<a><b>c</b></a>", el.clean(el)); }
@Test public void testEscaping() { String xml = "<foo><bar>foo</bar></foo>"; Whitelist whitelist = Whitelist.newBuilder().addEscaping("foo").build(); Cleaner cr = new Cleaner(whitelist); assertEquals("<foo><bar>foo</bar></foo>", cr.clean(xml)); }
@Test public void testCleanWithWhitelist() { String h = "<div><a href='http: String cleanHtml = Jsoup.clean(h, Whitelist.relaxed()); assertEquals("<a href=\"http: }
@Test public void testCleanWithWhiteList() { String h = "<div><ol><a href='http: String cleanHtml = Jsoup.clean(h, Whitelist.relaxed()); assertEquals("<a>http: }
@Test public void testCleanWithWhiteList() { String h = "<div><a href='http: String cleanHtml = Jsoup.clean(h, Whitelist.relaxed()); assertEquals("<a href=\"http: }
@Test public void testCleanMultiLineWithSpace() { String h = "<div><p>One<b>Two<c>Three</c></div>"; String cleanHtml = Jsoup.clean(h, Whitelist.basic().addAttributes("p", "p").removeLastSpace()); assertEquals("<div><p>One<b>Two</b></p><p>Three</p></div>", TextUtil.stripNewlines(cleanHtml)); }
@Test public void testCleanWithWhiteList() { String h = "<div><a href='http: String clean = Jsoup.clean(h, Whitelist.relaxed()); assertEquals("<a href=\"http: }
@Test public void testCopySafeNodes() { Element elem = doc.createElement("foo"); elem.appendChild(elem); Element elem2 = doc.createElement("bar"); elem2.appendChild(elem2); Element elem3 = doc.createElement("foo"); elem3.appendChild(elem3); Element elem4 = doc.createElement("foo"); elem4.appendChild(elem4); Element elem5 = doc.createElement("foo"); elem5.appendChild(elem5); Element elem6 = doc.createElement("foo"); elem6.appendChild(elem6); Element elem7 = doc.createElement("foo"); elem7.appendChild(elem7); Element elem8 = doc.createElement("foo"); elem8.appendChild(elem8); elem7.appendChild(elem9); Element elem9 = doc.createElement("foo"); elem8.appendChild(elem9); elem9.appendChild(elem10); Element elem10 = doc.createElement("foo"); elem10.appendChild(elem10); elem8.appendChild(elem11); elem9.appendChild(elem12); elem7.appendChild(elem13); elem8.appendChild(elem14); assertEquals(3, copySafeNodes(elem1, elem2)); assertEquals(3, copySafeNodes(elem1, elem3)); assertEquals(3, copySafeNodes(elem1, elem4)); assertEquals(3, copySafeNodes
public void testCopySafeNodes() { Element elem1 = doc.createElement("foo"); elem1.appendChild(doc.createElement("bar")); Element elem2 = doc.createElement("foo"); elem2.appendChild(doc.createElement("bar")); Element elem3 = doc.createElement("foo"); elem3.appendChild(doc.createElement("bar")); List<Node> children = new ArrayList<Node>(); children.add(elem1); children.add(elem2); children.add(elem3); List<Node> sourceChildren = new ArrayList<Node>(); sourceChildren.add(elem1); sourceChildren.add(elem2); sourceChildren.add(elem3); List<Node> expected = new ArrayList<Node>(); expected.add(doc.createElement("foo")); expected.add(doc.createElement("bar")); expected.add(doc.createElement("bar")); expected.add(doc.createElement("bar")); expected.add(doc.createElement("bar")); expected.add(doc.createElement("bar")); expected.add(doc.createElement("bar")); expected.add(doc.createElement("bar")); expected.add(doc.createElement("bar")); expected.add(doc.createElement("bar")); expected.add(doc.createElement("bar")); expected.add(doc
@Test public void testCopySafeNodes() { String xml = "<foo><bar/><baz></baz></foo>"; String xml2 = "<foo><bar/><baz></baz></foo>"; String xml3 = "<foo><bar/><baz></baz></foo>"; String xml4 = "<foo><bar/><baz></baz></foo>"; String xml5 = "<foo><bar/><baz></baz></foo>"; String xml6 = "<foo><bar/><baz></baz></foo>"; String xml7 = "<foo><bar/><baz></baz></foo>"; String xml8 = "<foo><bar/><baz></baz></foo>"; String xml9 = "<foo><bar/><baz></baz></foo>"; String xml10 = "<foo><bar/><baz></baz></foo>"; String xml11 = "<foo><bar/><baz></baz></foo>"; String xml12 = "<foo><bar/><baz></baz></foo>"; String xml13 = "<foo><bar/><baz></baz></foo>"; String xml20 = "<foo><bar/><baz></bar>"; String xml21 = "<foo><bar/><baz></baz></foo>"; String xml22 = "<foo><bar/><baz></bar>"; String xml23 = "<foo><bar/><baz></
@Test public void testCopySafeNodes() { Element el = doc.createElement("foo"); Element child = doc.createElement("bar"); child.appendChild(child); Element source = doc.createElement("foo"); source.appendChild(child); Element dest = doc.createElement("foo"); dest.appendChild(dest); List<Node> sourceChildren = new ArrayList<Node>(); sourceChildren.add(source); List<Node> destChildren = new ArrayList<Node>(); destChildren.add(dest); List<Node> sourceChildrenList = new ArrayList<Node>(); sourceChildrenList.add(source); List<Node> destChildrenList = new ArrayList<Node>(); sourceChildrenList.add(child); List<Node> sourceChildrenListList = new ArrayList<Node>(); sourceChildrenList.add(source); List<Node> sourceChildrenListListCopy = new ArrayList<Node>(); sourceChildrenList.add(source); sourceChildrenList.add(child); List<Node> sourceChildrenListCopyCopy = new ArrayList<Node>(); sourceChildrenListCopy.add(source); sourceChildrenListCopy.add(dest); Element sourceEl = doc.createElement("foo"); sourceEl.appendChild(sourceEl); Element destEl = doc.createElement("

@Test public void testCopySafeNodes() { Element elem = doc.createElement("foo"); elem.appendChild(elem); Element source = doc.createElement("foo"); source.appendChild(elem); Element dest = doc.createElement("foo"); dest.appendChild(elem); Element source2 = doc.createElement("foo"); dest.appendChild(source2); Element source3 = doc.createElement("foo"); dest.appendChild(source3); Element source4 = doc.createElement("foo"); dest.appendChild(source4); Element source5 = doc.createElement("foo"); dest.appendChild(source5); Element source6 = doc.createElement("foo"); dest.appendChild(source6); Element source7 = doc.createElement("foo"); dest.appendChild(source7); Element source8 = doc.createElement("foo"); dest.appendChild(source8); Element source9 = doc.createElement("foo"); dest.appendChild(source9); Element source10 = doc.createElement("foo"); dest.appendChild(source10); Element source11 = doc.createElement("foo"); dest.appendChild(source11); Element source12 = doc.createElement("foo"); dest.appendChild(source12); Element source13 = doc.createElement("foo"); dest.appendChild(source13
@Test public void testCopySafeTag() { Element el = new Element("foo"); el.appendChild(new Element("bar")); el.appendChild(new Element("baz")); Element child1 = new Element("bar"); child1.appendChild(new Element("baz")); Element child2 = new Element("bar"); child2.appendChild(new Element("baz")); Element child3 = new Element("bar"); child3.appendChild(new Element("baz")); assertEquals(new Line(1, 2, 3, 4, 5, 6, 7, 8, 9), TextUtil.stripNewlines(el)); assertEquals(new Line(1, 2, 3, 4, 5, 6, 7, 8, 9), TextUtil.stripNewlines(el)); assertEquals(new Line(1, 2, 3, 4, 5, 6, 7, 8, 9), TextUtil.stripNewlines(child3)); assertEquals(new Line(1, 2, 3, 4, 5, 6, 7, 8, 9), TextUtil.stripNewlines(child2)); assertEquals(new Line(1, 2, 3, 4, 5, 6, 7, 8, 9), TextUtil.stripNewlines(child3)); assertEquals(new Line(1, 2, 3, 4, 5, 6, 7, 8, 9), TextUtil.stripNewlines(child4)); assertEquals(new Line(1, 2, 3, 4, 5, 6, 7, 8, 9), TextUtil.stripNewlines(child5
@Test public void testCopySafeNodes() { Element el = new Element("foo"); ElementMeta meta = createMeta(el); Element source = new Element("foo"); ElementMeta meta2 = createMeta(el); ElementMeta source2 = createMeta(el2); ElementMeta dest = createMeta(el2); ElementMeta dest2 = createMeta(el2); assertEquals(dest.childNodes().size(), dest2.childNodes().size()); assertEquals(dest.childNodes().get(0).nodeName(), dest2.childNodes().get(0).nodeName); assertEquals(dest.childNodes().get(1).nodeName(), dest2.childNodes().get(1).nodeName); assertEquals(dest.childNodes().get(2).nodeName(), dest2.childNodes().get(2).nodeName); assertEquals(dest.childNodes().get(3).nodeName(), dest2.childNodes().get(3).nodeName); assertEquals(dest.childNodes().get(4).nodeName(), dest2.childNodes().get(4).nodeName); assertEquals(dest.childNodes().get(5).nodeName(), dest2.childNodes().get(5).nodeName); assertEquals(dest.childNodes().get(6).nodeName(), dest2.childNodes().get(6).nodeName); assertEquals(dest.childNodes().get(7).nodeName(), dest2.childNodes().get(7
public void testCopySafeNodes() { Element el = doc.createElement("foo"); ElementMeta meta = createMeta(el); Element source = doc.createElement("foo"); Element dest = doc.createElement("foo"); dest.appendChild(dest); ElementMeta.setNodeText(new TextNode("foo")); ElementMeta.setNodeSafe(dest); ElementMeta.setNodeSafe(source); ElementMeta.setNodeSafe(dest); ElementMeta.setNodeSafe(source); ElementMeta.setNodeSafe(dest); int numDiscarded = 0; int numBlind = 0; int numBlind2 = 0; int numBlind3 = 0; int numBlind4 = 0; int numBlind5 = 0; ElementMeta.setNodeText(new TextNode("foo")); ElementMeta.setNodeSafe(source); ElementMeta.setNodeSafe(dest); ElementMeta.setNodeSafe(dest); ElementMeta.setNodeSafe(source); ElementMeta.setNodeSafe(dest); ElementMeta.setNodeSafe(dest); ElementMeta.setNodeSafe(source); ElementMeta.setNodeSafe(dest); ElementMeta.setNodeSafe(dest); int numBlind = 0; numBlind += dest.childNodes
public void testCopySafeNodes() { Element elem = new Element("foo"); Element elem2 = new Element("bar"); elem2.appendChild(elem2); Element elem3 = new Element("foo"); elem3.appendChild(elem3); Element elem4 = new Element("foo"); elem4.appendChild(elem4); Element elem5 = new Element("foo"); elem5.appendChild(elem5); Element elem6 = new Element("foo"); elem6.appendChild(elem6); Element elem7 = new Element("foo"); elem7.appendChild(elem7); elem8.appendChild(elem5); elem7.appendChild(elem6); assertEquals(4, elem3.childNodes().size()); assertEquals(4, elem4.childNodes().size()); assertEquals(4, elem6.childNodes().size()); assertEquals(4, elem7.childNodes().size()); assertEquals(4, elem6.childNodes().size()); assertEquals(4, elem7.childNodes().size()); assertEquals(4, elem6.childNodes().size()); assertEquals(4, elem7.childNodes().size()); assertEquals(4, elem6.childNodes().size()); assertEquals(4, elem7.childNodes().size()); assertEquals(4, elem6.childNodes().size()); assertEquals(4, elem7.childNodes().size()); assertEquals(4, elem6.childNodes().size()); assertEquals(4, elem6.childNodes().size()); assertEquals(4, elem7.childNodes().size()); assertEquals(4, elem6.childNodes().size()); assertEquals(4, elem6.
@Test public void testCopySafeNodes() { Element source = doc("foo"); Element dest = doc("foo"); ElementMeta meta = createMeta(source); ElementMeta.setNumAttribsDiscarded(meta.numAttribsDiscarded); ElementMeta.setNumAttribsDiscarded(meta.numAttribsDiscarded); ElementMeta.setNode(source, dest); assertEquals(meta.numAttribsDiscarded, dest.numAttribsDiscarded); assertEquals(meta.numAttribsDiscarded, source.numAttribsDiscarded); assertEquals(meta.numAttribsDiscarded, dest.numAttribsDiscarded); assertEquals(meta.numAttribsDiscarded, source.childNodes().size()); assertEquals(meta.numAttribsDiscarded, source.numAttribsDiscarded); assertEquals(meta.numAttribsDiscarded, dest.numAttribsDiscarded); assertEquals(meta.numAttribsDiscarded, dest.childNodes().size()); assertEquals(meta.numAttribsDiscarded, source.numAttribsDiscarded); assertEquals(meta.numAttribsDiscarded, dest.numAttribsDiscarded
@Test public void testCopySafeNodes() { Element source = new Element("foo"); Element dest = new Element("bar"); dest.appendChild(source); assertEquals("bar", copySafeNodes(source, dest).toString()); assertEquals("bar", copySafeNodes(source, new Element("foo")).toString()); assertEquals("bar", copySafeNodes(source, new Element("bar")).toString()); assertEquals("bar", copySafeNodes(source, new Element("foo")).toString()); assertEquals("bar", copySafeNodes(source, new Element("bar")).toString()); assertEquals("bar", copySafeNodes(source, new Element("foo")).toString()); assertEquals("bar", copySafeNodes(source, new Element("foo")).toString()); assertEquals("bar", copySafeNodes(source, new Element("foo")).toString()); assertEquals("bar", copySafeNodes(source, new Element("foo")).toString()); assertEquals("bar", copySafeNodes(source, new Element("foo")).toString()); assertEquals("bar", copySafeNodes(source, new Element("foo")).toString()); assertEquals("bar", copySafeNodes(source, new Element("foo")).toString()); assertEquals("bar", copySafeNodes(source, new
@Test public void testCopySafeNodes() { Element el = doc.createElement("foo"); Element child = el.createElement("bar"); child.appendChild(child); Element source = el.createElement("foo"); source.appendChild(child); Element dest = el.createElement("foo"); dest.appendChild(dest); assertEquals(3, dest.childNodes().size()); assertEquals(3, dest.childNodes().size()); assertEquals(3, dest.childNodes().size()); assertEquals(3, dest.childNodes().size()); assertEquals(3, dest.childNodes().size()); assertEquals(3, dest.childNodes().size()); assertEquals(3, dest.childNodes().size()); assertEquals(3, dest.childNodes().size()); assertEquals(3, dest.childNodes().size()); assertEquals(3, dest.childNodes().size()); assertEquals(3, dest.childNodes().size()); assertEquals(3, dest.childNodes().size()); assertEquals(3, dest.childNodes().size()); assertEquals(3, dest.childNodes().size()); assertEquals(3, dest.childNodes().size()); assertEquals(3, dest.childNodes().size()); assertEquals(3, dest.childNodes().size()); assertEquals(3, dest.childNodes().size()); assertEquals(3, dest.childNodes().size()); assertEquals(3, dest.childNodes().size()); assertEquals(3, dest.childNodes().size()); assertEquals(3, dest.childNodes().size()); assertEquals(3, dest.childNodes().size()); assertEquals(3, dest.childNodes().size());
@Test public void testCopySafeNodes() { Element elem = doc.createElement("foo"); elem.appendChild(doc.createTextNode("bar")); TextNode textNode = new TextNode(elem); textNode.appendChild(doc.createTextNode("baz")); textNode.appendChild(doc.createTextNode("qux")); TextNode textNode2 = new TextNode(elem); textNode2.appendChild(doc.createTextNode("baz")); textNode2.appendChild(doc.createTextNode("qux")); TextNode textNode3 = new TextNode(elem); textNode3.appendChild(doc.createTextNode("qux")); textNode3.appendChild(doc.createTextNode("qux")); TextNode textNode4 = new TextNode(elem); textNode4.appendChild(doc.createTextNode("qux")); textNode4.appendChild(doc.createTextNode("qux")); TextNode textNode5 = new TextNode(elem); textNode5.appendChild(doc.createTextNode("qux")); textNode5.appendChild(doc.createTextNode("qux")); textNode5.appendChild(doc.createTextNode("qux")); textNode4.appendChild(doc.createTextNode("qux")); textNode5.appendChild(doc.createTextNode("qux"));
@Test public void testCopySafeNodes() { String text = "Hello, world!"; TextNode textNode = new TextNode(text, "http: TextNode destText = new TextNode(text, "http: TextNode expected = new TextNode(text, "http: assertEquals(expected, copySafeNodes(textNode, destText)); }
public void testCopySafeNodes() { Element source = new Element("foo"); TextNode sourceText = new TextNode("bar"); source.appendChild(sourceText); Element dest = new Element("foo"); dest.appendChild(destText); assertEquals("bar", dest.toString()); }
@Test public void testCopySafeNodes() { String xml = "<foo><bar/><baz></baz></foo>"; assertEquals("bar", xml); Element foo = doc.createElement("foo"); foo.setAttribute("bar", "baz"); Element bar = doc.createElement("bar"); bar.setAttribute("baz", "baz"); Element baz = doc.createElement("baz"); baz.setAttribute("baz", "baz"); Element baz2 = doc.createElement("baz"); baz2.setAttribute("baz", "baz2"); Element baz2 = doc.createElement("baz"); baz2.appendChild(baz2); assertEquals("baz", baz.child(0).child(1).child(1).child(2).child(2).child(2).child(2).child(2).child(2).child(2).child(2).child(2).child(2).child(2).child(2).child(2).child(2).child(2).child(2).child(2).child(2).child(2).child(2).child(2).child(2).child(2).child(2).child(2).child(2).child(2).child(2).child(2).child(2).child(2).child(2).child(2).child(2).child(2).child(2).child(2).child(2).child(2).child(2).child(2).child(2
@Test public void testTag() { Element el = doc.createElement("foo"); ElementMeta elemMeta = createSafeElement(el); assertEquals("foo", elemMeta.getElementTag()); assertEquals("foo", elemMeta.getTagValue()); assertEquals("foo", elemMeta.getBaseUri()); assertEquals(1, elemMeta.getNumDiscarded()); assertEquals("foo", elemMeta.getTagValue()); assertEquals("foo", elemMeta.getTagValue()); assertEquals("foo", elemMeta.getBaseUri()); assertEquals(1, elemMeta.getEnforcedAttributes().size()); assertEquals("foo", elemMeta.getEnforcedAttributes().get(0)); assertEquals("foo", elemMeta.getTagValue()); assertEquals("foo", elemMeta.getTagValue()); assertEquals("foo", elemMeta.getTagValue()); assertEquals("foo", elemMeta.getTagValue()); assertEquals("foo", elemMeta.getTagValue()); assertEquals("foo", elemMeta.getTagValue()); assertEquals("foo", elemMeta.getTagValue()); assertEquals("foo", elemMeta.getTagValue()); assertEquals("foo", elemMeta.getTagValue()); assertEquals("foo", elemMeta.getTagValue()); assertEquals("foo", elemMeta.getTagValue()); assertEquals
@Test public void testCreateSafeElement() { Element el = doc.createElement("foo"); ElementMeta elemMeta = createSafeElement(el); assertEquals("foo", elemMeta.tag()); assertEquals("foo", elemMeta.baseUri()); assertEquals(1, elemMeta.numDiscarded); assertEquals("foo", elemMeta.attributes().get("foo")); assertEquals("foo", elemMeta.attributes().get("bar")); assertEquals("bar", elemMeta.attributes().get("baz")); }
@Test public void testTag() { Attributes sourceAttrs = new Attributes(); sourceAttrs.put("foo", "bar"); ElementMeta destAttrs = createSafeElement(sourceAttrs); assertEquals("bar", destAttrs.get("foo")); assertEquals("bar", destAttrs.get("bar")); }
@Test public void testTag() { String xml = "<foo bar baz=\"bar\">foo</foo>"; String xml2 = "<foo bar baz=\"bar\">foo</foo>"; String xml3 = "<foo bar baz=\"bar\">foo</foo>"; String xml4 = "<foo bar baz=\"bar\">foo</foo>"; String xml5 = "<foo bar baz=\"bar\">foo</foo>"; String xml6 = "<foo bar baz=\"bar\">foo</foo>"; String xml7 = "<foo bar baz=\"bar\">foo</foo>"; String xml8 = "<foo bar baz=\"bar\">foo</foo>"; String xml9 = "<foo bar baz=\"bar\">foo</foo>"; String xml10 = "<foo bar baz=\"bar\">foo</foo>"; String xml11 = "<foo bar baz=\"bar\">foo</foo>"; String xml20 = "<foo bar baz=\"bar\">foo</foo>"; String xml21 = "<foo bar baz=\"bar\">foo</foo>"; String xml22 = "<foo bar baz=\"bar\">foo</foo>"; String xml23 = "<foo bar baz=\"bar\">foo</foo>"; Document xml = Jsoup.parse(xml, Parser.xmlParser()); ElementMeta dest = new ElementMeta(xml
@Test public void testTag() { String xml = "<foo bar baz bar baz bar>foo</foo>"; Attributes destAttrs = new Attributes(); destAttrs.put("foo", "bar"); destAttrs.put("baz", "baz"); ElementMeta dest = createSafeElement(destAttrs); assertEquals("foo", dest.tag()); assertEquals("bar baz", dest.attr("foo")); assertEquals("baz", dest.attr("baz")); }
@Test public void testCreateSafeElement() { Element el = new Element("foo"); Attributes attributes = el.attributes(); attributes.put("foo", "bar"); attributes.put("foo", "baz"); ElementMeta dest = createSafeElement(el, attributes); assertEquals("bar", dest.tag()); assertEquals("baz", dest.attr("foo")); assertEquals("baz", dest.attr("foo")); }
@Test public void testTag() { String xml = "<foo bar baz=\"bar\">foo</foo>"; String xml2 = "<foo bar baz=\"bar\">foo</foo>"; String xml3 = "<foo bar baz=\"bar\">foo</foo>"; String xml4 = "<foo bar baz=\"bar\">foo</foo>"; String xml5 = "<foo bar baz=\"bar\">foo</foo>"; String xml6 = "<foo bar baz=\"bar\">foo</foo>"; String xml7 = "<foo bar baz=\"bar\">foo</foo>"; String xml8 = "<foo bar baz=\"bar\">foo</foo>"; String xml9 = "<foo bar baz=\"bar\">foo</foo>"; String xml10 = "<foo bar baz=\"bar\">foo</foo>"; String xml11 = "<foo bar baz=\"bar\">foo</foo>"; String xml20 = "<foo bar baz=\"bar\">foo</foo>"; String xml21 = "<foo bar baz=\"bar\">foo</foo>"; String xml22 = "<foo bar baz=\"bar\">foo</foo>"; String xml23 = "<foo bar baz=\"bar\">foo</foo>"; String xml = "<foo bar baz=\"bar\">foo</foo>"; Document doc = Jsoup.parse(xml);
@Test public void testIsSafeAttribute() { Element el = doc.createElement("foo"); Attribute attr = new Name("foo"); attr.setValue("bar"); ElementMeta rs = createSafeElement(el); rs.check(attr); rs.check(attr); }
@Test public void testCreateSafeElement() { ElementMeta elemMeta = createSafeElement(tag); assertEquals("tag", elemMeta.tag); assertEquals("tag", elemMeta.baseUri()); assertEquals("tag", elemMeta.attrType()); assertEquals("attr", elemMeta.attrType()); assertEquals("attr", elemMeta.attrTypeTag); assertEquals("attr", elemMeta.attrTypeTag); assertEquals("attr", elemMeta.attrTypeTag); assertEquals("attr", elemMeta.attrTypeTag); assertEquals("attr", elemMeta.attrTypeTag); assertEquals("attr", elemMeta.attrTypeTag); assertEquals("attr", elemMeta.attrTypeTag); assertEquals("attr", elemMeta.attrTypeTag); assertEquals("attr", elemMeta.attrTypeTag); assertEquals("attr", elemMeta.attrTypeTag); assertEquals("attr", elemMeta.attrTypeTag); assertEquals("attr", elemMeta.attrTypeTag); assertEquals("attr", elemMeta.attrTypeTag); assertEquals("attr", elemMeta.attrTypeTag); assertEquals("attr", elemMeta.attrTypeTag); assertEquals("attr", elemMeta.attrTypeTag); assertEquals("attr", elemMeta.attrTypeTag); assertEquals("attr", elemMeta.attrType
@Test public void testEnforcedAttrs() { Attributes enforcedAttrs = new Attributes(); enforcedAttrs.put("foo", "bar"); ElementMeta sourceMeta = createSafeElement(enforcedAttrs); assertEquals("bar", sourceMeta.tag()); assertEquals("bar", sourceMeta.attr("foo")); assertEquals("bar", sourceMeta.attr("foo")); assertEquals("bar", sourceMeta.attr("foo")); assertEquals("bar", sourceMeta.attr("foo")); assertEquals("bar", sourceMeta.attr("foo")); assertEquals("bar", sourceMeta.attr("foo")); assertEquals("bar", sourceMeta.attr("foo")); assertEquals("bar", sourceMeta.attr("foo")); assertEquals("bar", sourceMeta.attr("foo")); assertEquals("bar", sourceMeta.attr("foo")); assertEquals("bar", sourceMeta.attr("foo")); assertEquals("bar", sourceMeta.attr("foo")); assertEquals("bar", sourceMeta.attr("foo")); assertEquals("bar", sourceMeta.attr("foo")); assertEquals("bar", sourceMeta.attr("foo")); assertEquals("bar", sourceMeta.attr("foo")); assertEquals("bar", sourceMeta.attr("foo")); assertEquals("bar", sourceMeta.attr("foo")); assertEquals("bar",
@Test public void testTag() { Attributes enforcedAttrs = new Attributes(); enforcedAttrs.put("foo", "bar"); ElementMeta dest = new ElementMeta(enforcedAttrs, 2); assertEquals("foo", dest.tag()); assertEquals("bar", dest.attr("foo")); assertEquals("bar", dest.attr("bar")); }
@Test public void testTag() { ElementMeta elemMeta = createSafeElement(fooTag); assertEquals(1, elemMeta.numDiscarded); assertEquals("foo", elemMeta.getTag()); assertEquals("foo", elemMeta.getBaseUri()); assertEquals("foo", elemMeta.getTagName()); assertEquals("foo", elemMeta.getTagValue()); assertEquals("foo", elemMeta.getTagValue()); assertEquals("foo", elemMeta.getTagValue()); assertEquals("foo", elemMeta.getTagValue()); assertEquals("foo", elemMeta.getTagValue()); assertEquals("foo", elemMeta.getTagValue()); assertEquals("foo", elemMeta.getTagValue()); assertEquals("foo", elemMeta.getTagValue()); assertEquals("foo", elemMeta.getTagValue()); assertEquals("foo", elemMeta.getTagValue()); assertEquals("foo", elemMeta.getTagValue()); assertEquals("foo", elemMeta.getTagValue()); assertEquals("foo", elemMeta.getTagValue()); assertEquals("foo", elemMeta.getTagValue()); assertEquals("foo", elemMeta.getTagValue()); assertEquals("foo", elemMeta.getTagValue()); assertEquals("foo", elemMeta.getTagValue()); assertEquals("foo", elemMeta
@Test public void testElementMeta() { Element el = doc.createElement("foo"); ElementMeta elMeta = new ElementMeta(el, 2); assertEquals("foo", elMeta.getAttributes().getFirst("foo")); assertEquals("bar", elMeta.getAttributes().getFirst("bar")); el = doc.createElement("foo"); ElementMeta elMeta2 = new ElementMeta(el, 3); assertEquals("foo", elMeta2.getAttributes().getFirst("foo")); assertEquals("bar", elMeta2.getAttributes().getFirst("foo")); assertEquals("baz", elMeta2.getAttributes().getFirst("foo")); }
@Test public void testElementMeta() { Element el = doc.createElement("foo"); ElementMeta elMeta = new ElementMeta(el, 2); elMeta.parse(new StringReader("foo")); assertEquals("foo", elMeta.getAttributes().getFirst("href")); assertEquals("foo", elMeta.getAttributes().getFirst("rel")); assertEquals("bar", elMeta.getAttributes().getFirst("href")); assertEquals("bar", elMeta.getAttributes().getFirst("rel")); assertEquals("bar", elMeta.getAttributes().getFirst("href")); assertEquals("bar", elMeta.getAttributes().getFirst("rel")); assertEquals("bar", elMeta.getAttributes().getFirst("href")); assertEquals("bar", elMeta.getAttributes().getFirst("rel")); assertEquals("bar", elMeta.getAttributes().getFirst("href")); assertEquals("bar", elMeta.getAttributes().getFirst("href")); assertEquals("bar", elMeta.getAttributes().getFirst("rel")); assertEquals("bar", elMeta.getAttributes().getFirst("href")); }
@Test public void testElementMeta() { String xml = "<foo><bar attr='foo'>bar</bar></foo>"; Element el = XmlUtils.parseXml(xml); ElementMeta elMeta = new ElementMeta(el, 2); assertEquals("bar", elMeta.getNode(0).getAttributeValue()); assertEquals("foo", elMeta.getNode(1).getAttributeValue()); }
@Test public void testAddFirst() throws Exception { TokenQueue tq = new TokenQueue("hello world"); tq.addFirst('a'); tq.addFirst('b'); tq.addFirst('c'); assertEquals("hello world", tq.consume()); }
@Test public void testAddFirst() { TokenQueue t = new TokenQueue("hello world"); t.addFirst('a'); t.addFirst('b'); t.addFirst('c'); assertEquals("hello world", t.consume()); }
@Test public void testAddFirst() { LinkedList<String> list = new LinkedList<String>(); list.addFirst("one"); list.addFirst("two"); assertEquals("one", list.poll()); assertEquals("two", list.poll()); assertEquals("three", list.poll()); assertEquals("three", list.poll()); assertEquals("three", list.poll()); assertEquals("three", list.poll()); assertEquals("three", list.poll()); assertEquals("three", list.poll()); }
@Test public void testAddFirst() { TokenQueue queue = new TokenQueue("hello world"); queue.addFirst("hello"); queue.addFirst("world"); assertEquals("hello world", queue.peek()); queue.addFirst("hello"); assertEquals("hello world", queue.peek()); }
@Test public void testAddFirst() { LinkedList<Character> queue = new LinkedList<Character>(); queue.addFirst('a'); queue.addFirst('b'); queue.addFirst('c'); assertEquals('a', queue.poll()); assertEquals('b', queue.poll()); assertEquals('c', queue.poll()); assertEquals('a', queue.poll()); assertEquals('b', queue.poll()); assertEquals('c', queue.poll()); assertEquals('a', queue.poll()); assertEquals('b', queue.poll()); assertEquals('c', queue.poll()); assertEquals('a', queue.poll()); assertEquals('b', queue.poll()); assertEquals('c', queue.poll()); assertEquals('a', queue.poll()); assertEquals('b', queue.poll()); assertEquals('a', queue.poll()); assertEquals('b', queue.poll()); assertEquals('a', queue.poll()); assertEquals('b', queue.poll()); assertEquals('a', queue.poll()); assertEquals('b', queue.poll()); assertEquals('a', queue.poll()); assertEquals('b', queue.poll()); assertEquals('b', queue.poll()); assertEquals('a', queue.poll()); assertEquals('b', queue.poll()); assertEquals('a', queue.poll()); assertEquals('b', queue.poll
@Test public void testAddFirst() { TokenQueue t = new TokenQueue("hello world"); t.addFirst('a'); t.addFirst('b'); t.addFirst('c'); assertEquals("hello world", t.consume()); }
@Test public void testSelectByAttribute() { Jsoup.parse("<foo>bar").click(); Jsoup.parse("<foo>bar~").click(); Elements withAttribute = Jsoup.parse("<foo>bar~").select("foo"); Elements withWithAttribute = Jsoup.parse("<foo>bar~").select("foo"); Elements withWithWithWithWithWithWithWithWithWithWithWithWithWithWithWithWithWithWithWithWithWithWithWithWithWithWithWithWithWithWithWithWithWithWithWithWithWithWithWithWithWithWithWithWithWithWithWithWithWithWithWithWithWithWithWithWithWithWithWithWithWithWithWithWithWithWithWithWithWithWithWithWithWithWithWithWithWithWithWithWithWithWithWithWithWithWithWithWithWithWithWithWithWithWithWithWithWithWithWithWithWithWithWithWithWithWithWithWithWithWithWithWithWithWithWithWithWithWithWithWithWithWithWithWithWithWithWithWithWithWithWithWithWithWithWithWithWithWithWithWithWithWithWithWithWithWithWithWithWithWithWithWithWithWithWithWithWithWithWithWithWithWithWithWithWithWithWithWithWithWithWithWithWithWithWithWithWithWithWithWithWithWithWithWithWithWithWith
)) @Test public void testCombinator() { stri("abc")).text("abc").text("abc").text("abc").text("abc").text("abc").text("abc").text("abc").text("abc").text("abc").text("abc").text("abc").text("abc").text("abc").text("abc").text("abc").text("abc").text("abc").text("abc").text("abc").text("abc").text("abc").text("abc").text("abc").text("abc").text("abc").text("abc").text("abc").text("abc").text("abc").text("abc").text("abc").text("abc").text("abc").text("abc").text("abc").text("abc").text("abc").text("abc").text("abc").text("abc").text("abc").text("abc").text("abc").text("abc").text("abc").text("abc").text("abc").text("abc")
@Test public void testFilterByAttribute() { String xml = "<div id='foo'>foo</div>"; Element div = Jsoup.parse(xml, "div"); Element div2 = Jsoup.parse(xml, "div"); Element div3 = Jsoup.parse(xml, "div~"); assertEquals("foo", div.attr("id")); assertEquals("foo", div2.attr("id")); assertEquals("foo", div3.attr("id")); assertEquals("foo", div3.attr("id")); }
@Test public void testElementByTagAndAttribute() { Document doc = Jsoup.parse("<div id=foo>bar</div> <span id=bar>baz</span>"); Elements els = doc.select("div:eq(id)"); assertEquals(2, els.size()); assertEquals("bar", els.get(0).text()); assertEquals("baz", els.get(1).text()); }
@Test public void findElementsByClass() { Document doc = Jsoup.parse("<div id=foo>bar</div> <div id=bar>baz</div>"); Elements els = doc.select("div").first(); assertEquals(1, els.size()); assertEquals("bar", els.text()); }
@Test public void testByTagAndAttribute() { Document doc = Jsoup.parse("<div id=foo>bar</div> <span id=bar>baz</span>"); Elements els = doc.select("div:tag(id)"); assertEquals(2, els.size()); assertEquals("bar", els.get(0).text()); assertEquals("baz", els.get(1).text()); }
@Test public void findElementsByClass() { String h = "<div id=foo>bar</div>"; Document doc = Jsoup.parse(h); Elements els = doc.select("div"); assertEquals(1, els.size()); assertEquals("foo", els.first().id()); assertEquals("bar", els.first().className()); }
@Test public void byAttribute() { Element root = Jsoup.parse("<div>").getDocumentElement(); Element byAttribute = Jsoup.parse("<div attr=foo bar").getDocumentElement(); Element byContaining = Jsoup.parse("<div attr=foo bar").getDocumentElement(); Element byContainingContaining = Jsoup.parse("<div attr=foo bar").getDocumentElement(); Element byContainingContaining = Jsoup.parse("<div attr=foo bar").getDocumentElement(); Element byContainingContaining = Jsoup.parse("<div attr=foo bar").getDocumentElement(); Element byContainingContaining = Jsoup.parse("<div attr=foo bar").getDocumentElement(); Element byContainingContaining = Jsoup.parse("<div attr=foo bar").getDocumentElement(); Element byContainingContaining = Jsoup.parse("<div attr=foo bar").getDocumentElement(); Element byContainingContaining = Jsoup.parse("<div attr=foo bar").getDocumentElement(); Element byContainingContainingContaining = Jsoup.parse("<div attr=foo bar").getDocumentElement(); Element byContainingContainingContaining = Jsoup.parse("<div attr=foo bar").getDocumentElement(); Element byContainingContainingContaining = Jsoup.parse("<div attr=foo bar").getDocumentElement(); assertEquals(byContaining
@Test public void byAttribute() { String html = "<document>" + "<document>" + "<document>" + "<document>" + "<document>" + "<document>" + "<document>" + "<document>" + "<document>" + "<document>" + "<document>" + "<</document>" + "<document>" + "<</document>" + "<document>" + "<</document>" + "<document>" + "<</document>" + "<document>" + "<</document>" + "<document>" + "<</document>" + "<document>" + "<</document>" + "<</document>" + "<document>" + "<</document>" + "<</document>" + "<</document>" + "<</document>" + "<</document>" + "<</document>" + "<</document>" + "<</document>" + "<</document>" + "<</document>" + "<</document>" + "<</document>" + "<</document>" + "</></document>" + "</document>" + "</document>" + "</document>" + "</document>" + "</document>" + "</document>" + "</document>" + "</document>"; Elements byAttribute = Jsoup.parse(html); Elements byElements = byAttribute.select("document.getElementsBygetElementsByAttributeValueNot("document.getElementsByAttributeValueContaining
@Test public void byAttribute() { Element root = Jsoup.parse("<div>").getDocumentElement(); Element byAttribute = Jsoup.parse("<div attr=foo").getDocumentElement(); Element byContaining = Jsoup.parse("<div attr=bar").getDocumentElement(); Element byContainingContaining = Jsoup.parse("<div attr=bar").getDocumentElement(); Element byContainingContainingContaining = Jsoup.parse("<div attr=bar").getDocumentElement(); Element byContainingContainingContaining = Jsoup.parse("<div attr=bar").getDocumentElement(); Element byContainingContaining = Jsoup.parse("<div attr=bar").getDocumentElement(); Element byContainingContaining = Jsoup.parse("<div attr=bar").getDocumentElement(); Element byContainingContainingContaining = Jsoup.parse("<div attr=bar").getDocumentElement(); Element byContainingContainingContaining = Jsoup.parse("<div attr=bar").getDocumentElement(); Element byContainingContainingContaining = Jsoup.parse("<div attr=bar").getDocumentElement(); Element byContainingContainingContaining = Jsoup.parse("<div attr=bar").getDocumentElement(); Element byContainingContainingContaining = Jsoup.parse("<div attr=bar").getDocumentElement(); assertEquals(byContaining, byContaining); }
@Test public void byAttribute() { String html = "<a>a</a>"; Elements byAttribute = Jsoup.parse(html); Elements byElement = Jsoup.parse(html); Elements byAttributeStarting = Jsoup.parse(byAttribute.get("a")); Elements byElementContaining = Jsoup.parse(byAttribute.get("b")); Elements byElementEnding = Jsoup.parse(byAttribute.get("b")); Elements byElementStarting = Jsoup.parse(byElement.get("a")); Elements byElementEnding = Jsoup.parse(byElement.get("b")); Elements byElementContaining = Jsoup.parse(byElement.get("b")); Elements byElementEnding = Jsoup.parse(byElement.get("b")); Elements byElementContaining = Jsoup.parse(byElement.get("b")); Elements byElementContainingEnding = Jsoup.parse(byElement.get("b")); Elements byElementContaining = Jsoup.parse(byElement.get("b")); Elements byElementContainingContaining = Jsoup.parse(byElement.get("b")); Elements byElementContainingEnding = Jsoup.parse(byElement.get("b")); assertEquals(asList("a", "a", "b"), byElementStarting); assertEquals
@Test public void byAttribute() { Element root = Jsoup.parse("<div>").getDocumentElement(); Element byAttribute = Jsoup.parse("<div attr=foo bar").getDocumentElement(); Element byContaining = Jsoup.parse("<div attr=foo bar").getDocumentElement(); Element byContainingContaining = Jsoup.parse("<div attr=foo bar").getDocumentElement(); Element byContainingContaining = Jsoup.parse("<div attr=foo bar").getDocumentElement(); Element byContainingContaining = Jsoup.parse("<div attr=foo bar").getDocumentElement(); Element byContainingContaining = Jsoup.parse("<div attr=foo bar").getDocumentElement(); Element byContainingContaining = Jsoup.parse("<div attr=foo bar").getDocumentElement(); Element byContainingContaining = Jsoup.parse("<div attr=foo bar").getDocumentElement(); Element byContainingContaining = Jsoup.parse("<div attr=foo bar").getDocumentElement(); Element byContainingContainingContaining = Jsoup.parse("<div attr=foo bar").getDocumentElement(); Element byContainingContainingContaining = Jsoup.parse("<div attr=foo bar").getDocumentElement(); Element byContainingContainingContaining = Jsoup.parse("<div attr=foo bar").getDocumentElement(); assertEquals(byContaining
@Test public void byAttribute() { String html = "<a>a</a>"; Elements byAttribute = Jsoup.parse(html); Elements byElement = Jsoup.parse(html); Elements byElementEnding = Jsoup.parse(html); Elements byElementContaining = Jsoup.parse(html); Elements byElementEnding = Jsoup.parse(html); Elements byElementContainingContaining = Jsoup.parse(html); Elements byElementEnding = Jsoup.parse(html); assertEquals(byElement, byElementEnding); assertEquals(byElementEnding, byElementContaining); assertEquals(byElementEnding, byElementEnding); }
@Test public void byAttribute() { Element root = Jsoup.parse("<foo>bar</foo>").getDocumentElement(); Element byAttribute = Jsoup.parse("<foo>bar</foo>").getDocumentElement(); Element byContaining = Jsoup.parse("<foo>bar</foo>").getDocumentElement(); Element byContainingContaining = Jsoup.parse("<foo>bar</foo>").getDocumentElement(); Element byContainingContaining = Jsoup.parse("<foo>bar</foo>").getDocumentElement(); Element byContainingContaining = Jsoup.parse("<foo>bar</foo>").getDocumentElement(); Element byContainingContaining = Jsoup.parse("<foo>bar</foo>").getDocumentElement(); Element byContainingContainingContaining = Jsoup.parse("<foo>bar</foo>").getDocumentElement(); Element byContainingContainingContaining = Jsoup.parse("<foo>bar</foo>").getDocumentElement(); Element byContainingContainingContaining = Jsoup.parse("<foo>bar</foo>").getDocumentElement(); Element byContainingContainingContaining = Jsoup.parse("<foo>bar</foo>").getDocumentElement(); Element byContainingContainingContaining = Jsoup.parse("<foo>bar</foo>").getDocumentElement(); Element byContainingContainingContaining =
@Test public void byAttribute() { String html = "<a>a</a>"; Elements byAttribute = Jsoup.parse(html); Elements byElement = Jsoup.parse(html); Elements byElement2 = Jsoup.parse(html); Elements byElement3 = Jsoup.parse(html); Elements byElement4 = Jsoup.parse(html); Elements byElement5 = Jsoup.parse(html); Elements byElement6 = Jsoup.parse(html); Elements byElement7 = Jsoup.parse(html); Elements byElement8 = Jsoup.parse(html); Elements byElement9 = Jsoup.parse(html); Elements byElement10 = Jsoup.parse(html); Elements byElement11 = Jsoup.parse(html); Elements byElement12 = Jsoup.parse(html); Elements byElement21 = Jsoup.parse(html); Elements byElement22 = Jsoup.parse(html); Elements byElement23 = Jsoup.parse(html); Elements byElement24 = Jsoup.parse(html); Elements byElement242 = Jsoup.parse(html); Elements byElement243 = Jsoup.parse(html); Elements byElement244 = Jsoup.parse(html); Elements byElement25 = Jsoup.parse(html); Elements byElement252
@Test public void indexLessThan() { Document doc = Jsoup.parse("<div id=1><p>Hello</p></div> <div id=2><p>There</p></div>"); Elements els = doc.select("div id"); assertEquals(1, els.size()); assertEquals("1", els.get(0).id()); assertEquals("2", els.get(1).id()); }
@Test public void indexLessThan() { Document doc = Jsoup.parse("<div id=1><span>Hello</span></div><div id=2><span>There</span></div>"); Elements els = doc.select("div"); assertEquals(1, els.size()); assertEquals("1", els.get(0).id()); assertEquals(2, els.get(1).id()); assertEquals(3, els.get(2).getElementsByIndexLessThan()); }
@Test public void indexGreaterThan() { Document doc = Jsoup.parse("<div id=1><p>Hello</p></div> <div id=2><p>There</p></div>"); Elements ps = doc.select("div > div"); assertEquals(1, ps.size()); assertEquals("1", ps.get(0).id()); Elements ps2 = doc.select("div > div > div"); assertEquals(1, ps2.size()); assertEquals("2", ps2.get(0).id()); Elements ps3 = doc.select("div > div > div"); assertEquals(1, ps3.size()); assertEquals("2", ps3.get(0).id()); Elements ps4 = doc.select("div > div > div"); assertEquals(1, ps4.size()); assertEquals("2", ps4.get(0).id()); Elements ps5 = doc.select("div > div > div"); assertEquals(1, ps5.size()); assertEquals("2", ps5.get(0).id()); Elements ps6 = doc.select("div > div > div"); assertEquals(1, ps6.size()); assertEquals("2", ps6.get(0).id()); Elements ps7 = doc.select("div > div > div"); assertEquals(1, ps7.size()); assertEquals("2", ps7.get(0).id()); Elements ps8 = doc.select("div > div > div"); assertEquals
@Test public void indexGreaterThan() { Document doc = Jsoup.parse("<div id=1><p>Hello</p></div><div id=2><p>There</p></div>"); Elements ps = doc.select("div.id"); assertEquals(2, ps.size()); assertEquals("1", ps.get(0).text()); assertEquals("2", ps.get(1).text()); Elements ps2 = doc.select("div.id > div.id"); assertEquals(1, ps2.size()); assertEquals("2", ps2.get(0).text()); Elements ps3 = doc.select("div.id > div.id"); assertEquals(1, ps3.size()); assertEquals("2", ps3.get(0).text()); Elements ps4 = doc.select("div.id > div.id"); assertEquals(1, ps4.size()); assertEquals("2", ps4.get(0).text()); Elements ps5 = doc.select("div.id > div.id"); assertEquals(1, ps5.size()); assertEquals("2", ps5.get(0).text()); Elements ps6 = doc.select("div.id > div.id"); assertEquals(1, ps6.size()); assertEquals("2", ps6.get(0).text()); Elements ps7 = doc.select("div.id > div.id"); assertEquals(1, ps7.size()); assertEquals("2", ps
@Test public void consumeIndex() { Document doc = Jsoup.parse("<div id=1>1</div><div id=2>3</div><div id=3>4</div>"); Elements els = doc.select("div"); assertEquals(1, els.size()); assertEquals(2, els.get(0).index()); assertEquals(3, els.get(1).index()); assertEquals(3, els.get(2).index()); assertEquals(3, els.get(3).index()); }
@Test public void consumeIndex() { Document doc = Jsoup.parse("<div id=1>1)</div> <div id=2>2)</div> <div id=3>3)</div> <div id=4>4)</div> <div id=5>5)</div> <div id=2>6</div> <div id=3>7)</div> <div id=4>5)</div> <div id=5>6</div> <div id=6>7)</div> <div id=4>5)</div> <div id=2>6</div> <div id=2>7)</div> <div id=2>8)</div> <div id=3>5)</div> <div id=2>8)</div> <div id=3>5)</div> <div id=3>5)</div> <div id=3>6)</div> <div id=2>8)</div> <div id=3>5)</div> <div id=3>5)</div> <div id=3>6)</div> <div id=2>7)</div> <div id=2>8)</div> <div id=3>5)</div> <div id=3>5)
@Test public void testConsumeIndex() { Document doc = Jsoup.parse("<div id=1>1)"); assertEquals(1, doc.select("id").first().children().size()); assertEquals(1, doc.select("id").first().children().size()); assertEquals(1, doc.select("id").first().children().size()); assertEquals(1, doc.select("id").first().children().size()); assertEquals(1, doc.select("id").first().children().size()); assertEquals(1, doc.select("id").first().children().size()); assertEquals(1, doc.select("id").first().children().size()); assertEquals(1, doc.select("id").first().children().size()); assertEquals(1, doc.select("id").first().children().size()); assertEquals(1, doc.select("id").first().children().size()); assertEquals(1, doc.select("id").first().children().size()); assertEquals(1, doc.select("id").first().children().size()); assertEquals(1, doc.select("id").first().children().size()); assertEquals(1, doc.select("id").first().children().size()); assertEquals(1, doc.select("id").first().children().size()); assertEquals(1, doc.select("id").first().children().size()); assertEquals(1, doc.select("id").first
@Test public void consumeIndex() { Document doc = Jsoup.parse("<div id=1>1)</div> <div id=2>2)</div> <div id=3>3)</div> <div id=4>4)</div> <div id=5>5)</div> <div id=2>6</div> <div id=3>7)</div> <div id=4>5)</div> <div id=2>6</div> <div id=3>7)</div> <div id=2>8</div> <div id=2>9</div> <div id=2>10</div> <div id=2>11</div> <div id=2>12</div> <div id=2>13</div> <div id=2>14</div> <div id=2>15</div> <div id=2>16</div> <div id=2>23</div> <div id=2>23</div> <div id=2>24</div> <div id=2>25</div> <div id=2>23</div> <div id=2>23</div> <div id=2>24</div> <div id=2>25</
@Test public void consumeIndex() { Document doc = Jsoup.parse("<div id=1>1)</div> <div id=2>2)</div> <div id=3>3)</div> <div id=4>4)</div> <div id=5>5)</div> <div id=2>6</div> <div id=3>7)</div> <div id=4>5)</div> <div id=5>6</div> <div id=6>7)</div> <div id=4>5)</div> <div id=2>6</div> <div id=2>7)</div> <div id=2>8)</div> <div id=2>9</div> <div id=2>10</div> <div id=2>11</div> <div id=2>11</div> <div id=2>12</div> <div id=2>13</div> <div id=2>14</div> <div id=2>15</div> <div id=2>16</div> <div id=2>23</div> <div id=2>14</div> <div id=2>15</div> <div id=2>16
@Test public void testFilterForAdjacentSiblings() { String h = "<div><div><p>Hello</p></div><div><p>There</p></div></div>"; Document doc = Jsoup.parse(h); Elements sibs = doc.select("div"); assertEquals(2, sibs.size()); assertEquals("Hello", sibs.get(0).text()); assertEquals("There", sibs.get(1).text()); Elements pibs = doc.select("div > div"); assertEquals(2, pibs.size()); assertEquals("div", pibs.get(0).tagName()); Elements pibs2 = doc.select("div > div"); assertEquals(2, pibs2.size()); assertEquals("div", pibs2.get(0).tagName()); Elements pibs3 = doc.select("div > div"); assertEquals(2, pibs3.size()); assertEquals("div", pibs3.get(0).tagName()); Elements pibs4 = doc.select("div > div"); assertEquals(2, pibs4.size()); assertEquals("div", pibs4.get(0).tagName()); Elements pibs5 = doc.select("div > div > div"); assertEquals(2, pibs5.size()); assertEquals("div
@Test public void testSibling() { Document doc = Jsoup.parse("<div><p>Hello</p></div><div><p>There</p></div><div><p>Hello</p></div><div><p>There</p></div>"); Elements sibs = doc.select("div"); assertEquals("div", sibs.get(0).tagName()); Elements pibs2 = doc.select("div"); assertEquals("div", pibs2.get(0).tagName()); Elements pibs3 = doc.select("div"); assertEquals("div", pibs3.get(0).tagName()); Elements pibs4 = doc.select("div"); assertEquals("div", pibs4.get(0).tagName()); Elements pibs5 = doc.select("div"); assertEquals("div", pibs5.get(0).tagName()); Elements pibs6 = doc.select("div"); assertEquals("div", pibs6.get(0).tagName()); Elements pibs7 = doc.select("div"); assertEquals("div", pibs7.get(0).tagName()); Elements pibs8 = doc.select("div"); assertEquals("div", pibs8.get(0).tagName()); assertEquals("div", pibs8.get
@Test public void testFilterForAdjacentSiblings() { Document doc = Jsoup.parse("<div><div><span>Hello</span></div></div><div><span>There</span></div>"); Elements div1 = doc.select("div"); Elements div2 = doc.select("div"); assertEquals(2, div1.size()); assertEquals("div", div1.first().tagName()); assertEquals("div", div1.last().tagName()); Elements div3 = doc.select("div"); Elements div4 = doc.select("div"); assertEquals(2, div4.size()); assertEquals("div", div3.first().tagName()); assertEquals("div", div4.last().tagName()); Elements div5 = doc.select("div div"); assertEquals(2, div5.size()); assertEquals("div", div5.first().tagName()); assertEquals("div", div5.last().tagName()); Elements div6 = doc.select("div div"); assertEquals(2, div6.size()); assertEquals("div", div6.first().tagName()); assertEquals("div", div6.last().tagName()); }
@Test public void testFilterForAdjacentSiblings() { Document doc = Jsoup.parse("<div><div><span>One</span></div></div><div><span>Two</span></div>"); Elements div1 = doc.select("div"); Elements div2 = doc.select("div"); assertEquals(2, div1.size()); assertEquals("One", div1.first().text()); assertEquals("Two", div1.first().text()); Elements div3 = doc.select("div"); Elements div4 = doc.select("div"); assertEquals(2, div4.size()); assertEquals("div", div3.first().tagName()); Elements div5 = doc.select("div div"); assertEquals(2, div5.size()); assertEquals("div", div5.first().tagName()); Elements div6 = doc.select("div div"); assertEquals(2, div6.size()); assertEquals("div", div6.first().tagName()); Elements div7 = doc.select("div div"); assertEquals(2, div7.size()); assertEquals("div", div7.first().tagName()); }
@Test public void testFilterForAdjacentSiblings() { Document doc = Jsoup.parse("<div><div><span>Hello</span></div></div><div><span>There</span></div>"); Elements sibs = doc.select("div"); assertEquals(2, sibs.size()); assertEquals("div", sibs.get(0).tagName()); Elements sibs2 = doc.select("div"); assertEquals(2, sibs2.size()); assertEquals("div", sibs2.get(0).tagName()); Elements sibs3 = doc.select("div"); assertEquals(2, sibs3.size()); assertEquals("div", sibs3.get(0).tagName()); Elements sibs4 = doc.select("div"); assertEquals(2, sibs4.size()); assertEquals("div", sibs4.get(0).tagName()); Elements sibs5 = doc.select("div"); assertEquals(2, sibs5.size()); assertEquals("div", sibs5.get(0).tagName()); }
@Test public void testFilterForAdjacentSiblings() { Document doc = Jsoup.parse("<div><div><span>Hello</span></div></div><div><span>There</span></div>"); Elements div1 = doc.select("div"); Elements div2 = doc.select("div"); assertEquals(2, div1.size()); assertEquals("div", div1.get(0).previousElementSibling().tagName()); assertEquals("div", div1.get(1).previousElementSibling().tagName()); Elements div3 = doc.select("div div"); assertEquals(2, div3.size()); assertEquals("div", div3.get(0).previousElementSibling().tagName()); }
@Test public void testFilterForAdjacentSiblings() { Document doc = Jsoup.parse("<div><div><span>Hello</span></div></div><div><span>There</span></div>"); Elements div1 = doc.select("div"); Elements div2 = doc.select("div"); assertEquals(2, div1.size()); assertEquals("div", div1.get(0).tagName()); assertEquals("div", div1.get(1).tagName()); Elements div3 = doc.select("div div"); assertEquals(2, div3.size()); assertEquals("div", div3.get(0).tagName()); assertEquals("div", div3.get(1).tagName()); Elements div4 = doc.select("div div"); assertEquals(2, div4.size()); assertEquals("div", div4.get(0).tagName()); assertEquals("div", div4.get(1).tagName()); Elements div5 = doc.select("div div"); assertEquals(2, div5.size()); assertEquals("div", div5.get(0).tagName()); assertEquals("div", div5.get(1).tagName()); assertEquals("div", div5.get(2).tagName()); }
@Test public void testSibling() { Document doc = Jsoup.parse("<div><div><span>Hello</span></div></div><div><span>There</span></div>"); Elements sibs = doc.select("div"); assertEquals(1, sibs.size()); assertEquals("div", sibs.get(0).tagName()); Elements pibs = doc.select("div"); assertEquals(1, pibs.size()); assertEquals("div", pibs.get(0).tagName()); Elements pibs2 = doc.select("div"); assertEquals(2, pibs2.size()); assertEquals("div", pibs2.get(0).tagName()); Elements pibs3 = doc.select("div"); assertEquals(3, pibs3.size()); assertEquals("div", pibs3.get(0).tagName()); Elements pibs4 = doc.select("div"); assertEquals(4, pibs4.size()); assertEquals("div", pibs4.get(0).tagName()); Elements pibs5 = doc.select("div"); assertEquals(5, pibs5.size()); assertEquals("div", pibs5.get(0).tagName()); Elements pibs6 = doc.select("div"); assertEquals(6, pibs6.size()); assertEquals("div", p
@Test public void testFilterForAdjacentSiblings() { Document doc = Jsoup.parse("<div><div><span>Hello</span></div></div><div><span>There</span></div>"); Elements div1 = doc.select("div"); Elements div2 = doc.select("div"); assertEquals(2, div1.size()); assertEquals("div", div1.first().tagName()); assertEquals("div", div1.last().tagName()); Elements div3 = doc.select("div"); Elements div4 = doc.select("div"); assertEquals(2, div4.size()); assertEquals("div", div3.first().tagName()); assertEquals("div", div4.last().tagName()); Elements div5 = doc.select("div"); Elements div6 = doc.select("div"); assertEquals(2, div5.size()); assertEquals("div", div6.first().tagName()); assertEquals("div", div6.last().tagName()); Elements div7 = doc.select("div"); assertEquals(2, div7.size()); assertEquals("div", div7.first().tagName()); assertEquals("div", div7.last().tagName()); Elements div8 = doc.select("div"); assertEquals(2, div8.size()); assertEquals("div", div8.first().tagName()); assertEquals("div", div8.last().tagName()); }
@Test public void testFilterForAdjacentSiblings() { Document doc = Jsoup.parse("<div><div><span>Hello</span></div></div><div><span>There</span></div>"); Elements sibs = doc.select("div"); assertEquals(2, sibs.size()); Elements cibs = doc.select("div"); assertEquals(2, cibs.size()); Elements cibs2 = doc.select("div"); assertEquals(2, cibs2.size()); Elements cibs3 = doc.select("div"); assertEquals(2, cibs3.size()); Elements cibs4 = doc.select("div"); assertEquals(2, cibs4.size()); Elements cibs5 = doc.select("div"); assertEquals(2, cibs5.size()); Elements cibs6 = doc.select("div"); assertEquals(2, cibs6.size()); Elements cibs7 = doc.select("div"); assertEquals(2, cibs7.size()); assertEquals("div", cibs7.first().tagName()); assertEquals("div", cibs7.first().tagName()); assertEquals("div", cibs7.last().tagName()); Elements cibs8 = doc.select("div"); assertEquals(2, cibs
@Test public void testTextNode() { TextNode tn = new TextNode("text", ""); assertEquals("text", tn.text()); assertEquals("text", tn.attributes.get(TEXT_KEY)); }
@Test public void testTextNode() { TextNode tn = new TextNode("Hello World!", ""); assertEquals("Hello World!", tn.text()); tn = new TextNode("Hello World!", ""); assertEquals("Hello World!", tn.text()); }
@Test public void testTextNode() { TextNode textNode = new TextNode("text", ""); textNode.setText("text"); textNode.outerHtml(new StringBuilder()); assertThat(textNode.text(), is("text")); assertThat(textNode.getAttributes().get("text"), is("text")); assertThat(textNode.getAttrs().get("text"), is("text")); }
@Test public void testText() { TextNode textNode = new TextNode("Hello World!", ""); assertEquals("Hello World!", textNode.text()); textNode.outerHtml(); assertEquals("<a>Hello World!</a>", textNode.text()); textNode.outerHtml(); assertEquals("<a>Hello World!</a>", textNode.text()); textNode.outerHtml(); assertEquals("<a>Hello World!</a>", textNode.text()); textNode.outerHtml(); assertEquals("<a>Hello World!</a>", textNode.text()); textNode.outerHtml(); assertEquals("<a>Hello World!</a>", textNode.text()); textNode.outerHtml(); assertEquals("<a>Hello World!</a>", textNode.text()); textNode.outerHtml(); assertEquals("<a>Hello World!</a>", textNode.text()); }
@Test public void outerHtml() { String text = "<div>Hello World</div>"; TextNode textNode = TextNode.createFromEncoded(text, ""); textNode.outerHtml(new StringBuilder()); assertEquals("Hello World", textNode.text()); textNode.outerHtml(new StringBuilder()); assertEquals("Hello World", textNode.text()); textNode.outerHtml(new StringBuilder()); assertEquals("Hello World", textNode.text()); textNode.outerHtml(new StringBuilder()); assertEquals("Hello World", textNode.text()); textNode.outerHtml(new StringBuilder()); assertEquals("Hello World", textNode.text()); textNode.outerHtml(new StringBuilder()); assertEquals("Hello World", textNode.text()); textNode.outerHtml(new StringBuilder()); assertEquals("Hello World", textNode.text()); textNode.outerHtml(new StringBuilder()); assertEquals("Hello World", textNode.text()); textNode.outerHtml(new StringBuilder()); assertEquals("Hello World", textNode.text()); textNode.outerHtml(new StringBuilder()); assertEquals("Hello World", textNode.text()); textNode.outerHtml(new StringBuilder()); assertEquals("Hello World", textNode.text()); textNode.outerHtml(new StringBuilder()); assertEquals("Hello
@Test public void testText() { TextNode tn = new TextNode("text", ""); tn.text("text"); assertEquals("text", tn.text()); }
@Test public void testText() { TextNode textNode = new TextNode("Hello World", ""); textNode.text("Hello World"); textNode.outerHtml(new StringBuilder()); assertThat(textNode.text(), is("Hello World")); assertThat(textNode.text(), is("Hello World")); textNode.outerHtml(new StringBuilder()); assertThat(textNode.text(), is("Hello World")); textNode.outerHtml(new StringBuilder()); assertThat(textNode.text(), is("Hello World")); textNode.outerHtml(new StringBuilder()); assertThat(textNode.text(), is("Hello World")); textNode.outerHtml(new StringBuilder()); assertThat(textNode.text(), is("Hello World")); textNode.outerHtml(new StringBuilder()); assertThat(textNode.text(), is("Hello World")); textNode.outerHtml(new StringBuilder()); assertThat(textNode.text(), is("Hello World")); textNode.outerHtml(new StringBuilder()); assertThat(textNode.text(), is("Hello World")); textNode.outerHtml(new StringBuilder()); assertThat(textNode.text(), is("Hello World")); textNode.outerHtml(new StringBuilder()); assertThat(textNode.text(), is("Hello World")); textNode.outer
@Test public void testText() { final String text = "Hello World!"; TextNode tn = text("Hello World!"); tn.outerHtml(new StringBuilder()); assertEquals(text, tn.text()); tn.outerHtml(new StringBuilder()); assertEquals(text, tn.text()); }
@Test public void testGetWholeText() { TextNode textNode = new TextNode("Hello World!", ""); textNode.attributes.put("text", "Hello World!"); assertEquals("Hello World!", textNode.getWholeText()); textNode.attributes.put("text", "Hello World!"); assertEquals("Hello World!", textNode.getWholeText()); textNode.attributes.put("text", "Hello World!"); assertEquals("Hello World!", textNode.getWholeText()); textNode.attributes.put("text", "Hello World!"); assertEquals("Hello World!", textNode.getWholeText()); textNode.attributes.put("text", "Hello World!"); assertEquals("Hello World!", textNode.getWholeText()); textNode.attributes.put("text", "Hello World!"); assertEquals("Hello World!", textNode.getWholeText()); textNode.attributes.put("text", "Hello World!"); assertEquals("Hello World!", textNode.getWholeText()); }
@Test public void testGetWholeText() { TextNode textNode = text("<a>Hello</a>"); assertEquals("Hello", textNode.getWholeText()); textNode.setText("Hello"); assertEquals("Hello", textNode.getWholeText()); textNode.setText("Hello"); assertEquals("Hello", textNode.getWholeText()); textNode.setText("Hello"); assertEquals("Hello", textNode.getWholeText()); textNode.setText("Hello"); assertEquals("Hello", textNode.getWholeText()); textNode.setText("Hello"); assertEquals("Hello", textNode.getWholeText()); }
@Test public void testIsBlank() { TextNode textNode = new TextNode("Hello World!", ""); assertTrue(textNode.isBlank()); textNode = new TextNode("Hello World!", ""); assertTrue(textNode.isBlank()); textNode = new TextNode("Hello World!", ""); assertFalse(textNode.isBlank()); textNode = new TextNode("Hello World!", ""); assertTrue(textNode.isBlank()); textNode = new TextNode("Hello World!", ""); assertTrue(textNode.isBlank()); textNode = new TextNode("Hello World!", ""); assertTrue(textNode.isBlank()); textNode = new TextNode("Hello World!", ""); assertTrue(textNode.isBlank()); textNode = new TextNode("Hello World!", ""); assertTrue(textNode.isBlank()); textNode = new TextNode("Hello World!", ""); assertTrue(textNode.isBlank()); textNode = new TextNode("Hello World!", ""); assertTrue(textNode.isBlank()); }
@Test public void testIsBlank() { assertEquals(true, textNode.isBlank()); assertEquals(false, textNode.isBlank()); assertEquals(true, textNode.isBlank()); assertEquals(true, textNode.isBlank()); assertEquals(true, textNode.isBlank()); assertEquals(true, textNode.isBlank()); assertEquals(true, textNode.isBlank()); assertEquals(true, textNode.isBlank()); assertEquals(true, textNode.isBlank()); assertEquals(true, textNode.isBlank()); assertEquals(true, textNode.isBlank()); assertEquals(true, textNode.isBlank()); assertEquals(true, textNode.isBlank()); assertEquals(true, textNode.isBlank()); assertEquals(true, textNode.isBlank()); assertEquals(true, textNode.isBlank()); assertEquals(true, textNode.isBlank()); assertEquals(true, textNode.isBlank()); assertEquals(true, textNode.isBlank()); assertEquals(true, textNode.isBlank()); assertEquals(true, textNode.isBlank()); assertEquals(true, textNode.isBlank()); assertEquals(true, textNode.isBlank()); assertEquals(true, textNode.isBlank()); assertEquals(true, textNode.
@Test public void outerHtml() { TextNode textNode = new TextNode("foo", ""); textNode.outerHtml(new StringBuilder()); assertEquals("foo\n", textNode.getText()); textNode.outerHtml(new StringBuilder()); assertEquals("foo\n", textNode.getText()); textNode.outerHtml(new StringBuilder()); assertEquals("foo\n", textNode.getText()); textNode.outerHtml(new StringBuilder()); assertEquals("foo\n", textNode.getText()); textNode.outerHtml(new StringBuilder()); assertEquals("foo\n", textNode.getText()); textNode.outerHtml(new StringBuilder()); assertEquals("foo\n", textNode.getText()); }
@Test public void testIndent() { TextNode textNode = new TextNode("foo", ""); textNode.outerHtml(new StringBuilder()); assertEquals("foo\nbar", textNode.getWholeText()); textNode.outerHtml(new StringBuilder()); assertEquals("foo\nbar", textNode.getWholeText()); textNode.outerHtml(new StringBuilder()); assertEquals("foo\nbar", textNode.getWholeText()); textNode.outerHtml(new StringBuilder()); assertEquals("foo\nbar", textNode.getWholeText()); textNode.outerHtml(new StringBuilder()); assertEquals("foo\nbar", textNode.getWholeText()); textNode.outerHtml(new StringBuilder()); assertEquals("foo\nbar", textNode.getWholeText()); textNode.outerHtml(new StringBuilder()); assertEquals("foo\nbar", textNode.getWholeText()); }
@Test public void parent() { Element parent = new Element("foo"); parent.append("bar"); Element child = new Element("foo"); child.append("baz"); parent.append("foo"); child.append("bar"); Element grandchild = new Element("grandchild"); grandchild.append("baz"); grandchild.append("foo"); child.append("bar"); parent.append("foo"); TextNode grandchild1 = new TextNode("foo", ""); TextNode grandchild2 = new TextNode("foo", ""); TextNode grandchild3 = new TextNode("foo", ""); TextNode grandchild4 = new TextNode("foo", ""); Element grandchild5 = new TextNode("foo", ""); Element grandchild6 = new TextNode("foo", ""); TextNode grandchild7 = new TextNode("foo", ""); Element grandchild8 = new TextNode("foo", ""); TextNode grandchild9 = new TextNode("foo", ""); Element grandchild10 = new TextNode("foo", ""); Element grandchild11 = new TextNode("foo", ""); Element grandchild12 = new TextNode("foo", ""); TextNode grandchild13 = new TextNode("foo", ""); TextNode grandchild14 = new Text
@Test public void normaliseWhitespaceTest() { TextNode textNode = new TextNode("This is a test.", ""); textNode.outerHtml(new StringBuilder()); assertEquals("This is a test.", textNode.getText()); textNode.outerHtml(new StringBuilder()); assertEquals("This is a test.", textNode.getText()); textNode.outerHtml(new StringBuilder()); assertEquals("This is a test.", textNode.getText()); textNode.outerHtml(new StringBuilder()); assertEquals("This is a test.", textNode.getText()); textNode.outerHtml(new StringBuilder()); assertEquals("This is a test.", textNode.getText()); textNode.outerHtml(new StringBuilder()); assertEquals("This is a test.", textNode.getText()); textNode.outerHtml(new StringBuilder()); assertEquals("This is a test.", textNode.getText()); textNode.outerHtml(new StringBuilder()); assertEquals("This is a test.", textNode.getText()); textNode.outerHtml(new StringBuilder()); assertEquals("This is a test.", textNode.getText()); textNode.outerHtml(new StringBuilder()); assertEquals("This is a test.", textNode.getText()); textNode.outerHtml(new StringBuilder()); assertEquals("This is a test.", textNode.getText
@Test public void testIndent() { Element element = new Element("foo"); element.tag().setIndent(Indent.BOLD); element.tag().setCanContainBlock(true); element.outerHtml(new StringBuilder()); assertEquals("<foo></foo>", element.toString()); }
@Test public void testIndent() { StringBuilder sb = new StringBuilder(); TextNode textNode = new TextNode("foo\nbar", ""); textNode.outerHtml(sb); assertEquals("foo\nbar", sb.toString()); }
@Test public void testEncodedTextNode() { TextNode tn = createFromEncoded("Hello World!", ""); assertEquals("Hello World!", tn.text()); }
@Test public void testText() { TextNode text = createFromEncoded("Hello World!", ""); assertEquals("Hello World!", text.text()); text = createFromEncoded("Hello World!", ""); assertEquals("Hello World!", text.text()); text = createFromEncoded("Hello World!", ""); assertEquals("Hello World!", text.text()); }
@Test public void testTextNode() { TextNode tn = createFromEncoded("text:foo", ""); assertEquals("text:foo", tn.nodeName()); assertEquals("text:foo", tn.text()); }
@Test public void normaliseWhitespace() { String text = "Hello World"; String expected = "Hello World"; assertEquals(expected, normaliseWhitespace(text)); text = "\r\nHello World"; expected = "\r\nHello World"; assertEquals(expected, normaliseWhitespace(text)); text = "\r\nHello World"; expected = "\r\nHello World"; assertEquals(expected, normaliseWhitespace(text)); text = "\r\nHello World"; expected = "\r\nHello World"; assertEquals(expected, normaliseWhitespace(text)); }
@Test public void testNormaliseWhitespace() { String text = " \n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\
@Test public void normaliseWhitespace() { String text = "Hello World"; String expected = "Hello World"; assertEquals(expected, normaliseWhitespace(text)); text = "\r\nHello World"; expected = "\r\nHello World"; assertEquals(expected, normaliseWhitespace(text)); text = "\r\nHello World"; expected = "\r\nHello World"; assertEquals(expected, normaliseWhitespace(text)); }
@Test public void testAttr() { Document doc = Jsoup.parse("<div><p>Hello</p></div>"); Element div1 = doc.select("p").first(); div1.attr("class", "css"); Element div2 = doc.select("p").first(); assertEquals("Hello css", div1.attr("class", "css")); assertEquals("div", div2.attr("class", "css")); Element div3 = doc.select("p").first(); div3.attr("class", "js"); assertEquals("div", div3.attr("class", "css")); assertEquals("div", div3.attr("class", "js")); }
@Test public void testAttr() { Document doc = Jsoup.parse("<div><p>Hello</p></div><div><p>There</p></div>"); Element div1 = doc.select("div").first(); div1.attr("p", "Hello"); Element div2 = doc.select("div").first(); assertEquals("Hello", div1.attr("p")); assertEquals("There", div2.attr("p")); assertEquals("div", div1.parent().attr("p")); Element div3 = doc.select("div").first(); div3.attr("p", "Hello"); Element div4 = doc.select("div").first(); assertEquals("Hello", div3.attr("p")); assertEquals("There", div4.attr("p")); assertEquals("div", div3.parent().attr("p")); }
@Test public void testAttr() { Document doc = Jsoup.parse("<div><p>Hello</p></div><div><p>There</p></div>"); Element div1 = doc.select("div").first(); div1.attr("p", "Hello"); assertEquals("Hello", div1.text()); Element div2 = doc.select("div").first(); div2.attr("p", "Hello"); assertEquals("Hello", div2.text()); }
@Test public void testChild() { Document doc = Jsoup.parse("<div><p>Hello</p></div><div><p>There</p></div>"); Element div1 = doc.select("div").first(); div1.child(1); Element div2 = doc.select("div").first(); assertEquals("Hello", div1.child(1).text()); assertEquals("There", div2.child(1).text()); assertEquals("div", div2.child(2).text()); }
@Test public void testAppendElement() { Document doc = Jsoup.parse("<div><p>Hello</p></div><div><p>There</p></div>"); Element div = doc.select("div").first(); assertEquals("Hello", div.text()); Element div2 = doc.select("div").first(); assertEquals("There", div2.text()); Element div3 = doc.select("div").first(); assertEquals("There", div3.text()); Element div4 = doc.select("div").first(); assertEquals("There", div4.text()); Element div5 = doc.select("div").first(); assertEquals("There", div5.text()); Element div6 = doc.select("div").first(); assertEquals("There", div6.text()); Element div7 = doc.select("div").first(); assertEquals("There", div7.text()); Element div8 = doc.select("div").first(); assertEquals("There", div8.text()); Element div9 = doc.select("div").first(); assertEquals("There", div9.text()); Element div10 = doc.select("div").first(); assertEquals("There", div10.text()); Element div11 = doc.select("div").first(); assertEquals("There", div11.text());
@Test public void testPrependElement() { Document doc = Jsoup.parse("<div><p>Hello</p></div>"); Element div = doc.select("div").prependElement("p"); assertEquals("<div><p>Hello</p></div>", div.text()); }
@Test public void testPrependElement() { Document doc = Jsoup.parse("<div><p>Hello</p></div><div><p>There</p></div>"); Element div = doc.select("div").first(); div.prependElement("p"); assertEquals("Hello", div.text()); }
@Test public void testPrependElement() { Document doc = Jsoup.parse("<div><p>Hello</p></div><div><p>There</p></div>"); Element div = doc.select("div").first(); div.prependElement("p"); assertEquals("<div><p>Hello</p></div><div><p>There</p></div>", TextUtil.stripNewlines(div.html())); }
@Test public void testPrependElement() { Document doc = Jsoup.parse("<div><p>Hello</p></div><div><p>There</p></div>"); Element div = doc.select("div").first(); div.prependElement("p"); assertEquals("<div><p>Hello</p></div><div><p>There</p></div>", TextUtil.stripNewlines(div.html())); }
@Test public void testWrap() { String h = "<p>Hello <b>there</b>."; Element div = Jsoup.parse(h).wrap(h); assertEquals("Hello <b>there</b>.", div.text()); div = Jsoup.parse(h).wrap(h); assertEquals("Hello <b>there</b>.", div.text()); div = Jsoup.parse(h).wrap(h); assertEquals("Hello <b>there</b>.", div.text()); div = Jsoup.parse(h).wrap(h); assertEquals("Hello <b>there</b>.", div.text()); }
@Test public void testWrap() { String h = "<div><p>Hello</p></div>"; Element div = Jsoup.parse(h); Element wrap = div.wrap(h); assertEquals(h, wrap.nodeValue()); }
@Test public void testWrap() { String h = "<div><p>Hello</p></div>"; Element div = Jsoup.parse(h); Element wrap = div.wrap(h); assertEquals("Hello", wrap.text()); }
@Test public void testWrap() { Document doc = Jsoup.parse("<div><p>Hello</p></div><div><p>There</p></div>"); Element div = doc.select("div").first(); div.wrap("Hello"); assertEquals("Hello", div.text()); }
@Test public void testWrap() { String h = "<div class=foo><p>Hello</p></div>"; Element div = Jsoup.parse(h).first(); Element div2 = Jsoup.parse(div.outerHtml()).first(); assertEquals(div, div2.attr("class")); assertEquals(div, div.attr("id")); assertEquals(h, div2.attr("title")); assertEquals(div, div2.attr("div")); }
@Test public void testWrap() { Element div = doc.createElement("div"); div.appendChild(doc.createTextNode("Hello")); div.appendChild(doc.createTextNode("World")); Element div2 = doc.createElement("div"); div2.appendChild(doc.createTextNode("Hello")); div2.appendChild(doc.createTextNode("World")); Element div3 = doc.createElement("div"); div3.appendChild(doc.createTextNode("Hello")); div3.appendChild(doc.createTextNode("World")); Element div4 = doc.createElement("div"); div4.appendChild(doc.createTextNode("Hello")); div4.appendChild(doc.createTextNode("World")); Element div5 = doc.createElement("div"); div5.appendChild(doc.createTextNode("Hello")); div5.appendChild(doc.createTextNode("World")); Element div6 = doc.createElement("div"); div6.appendChild(doc.createTextNode("Hello")); div6.appendChild(doc.createTextNode("World")); Element div7 = doc.createElement("div"); div7.appendChild(doc.createTextNode("Hello")); div7.appendChild(doc.createTextNode("World")); Element div8 = doc.createElement("div"); div8.appendChild(doc.createTextNode("Hello")); div8.appendChild
@Test public void testDeepest() { Element div = doc.createElement("div"); div.appendChild(new Element("div")); div.appendChild(new Element("div")); Element wrap = doc.createElement("div"); wrap.appendChild(div); Element div2 = doc.createElement("div"); div2.appendChild(new Element("div")); div2.appendChild(new Element("div")); wrap.appendChild(div2); doc.removeChild(div2); Element div3 = doc.createElement("div"); div3.appendChild(new Element("div")); Element div4 = doc.createElement("div"); div4.appendChild(new Element("div")); div4.appendChild(new Element("div")); Element div5 = doc.createElement("div"); div5.appendChild(new Element("div")); div5.appendChild(new Element("div")); Element div6 = doc.createElement("div"); div6.appendChild(new Element("div")); div6.appendChild(new Element("div")); Element div7 = doc.createElement("div"); div7.appendChild(new Element("div")); div7.appendChild(new Element("div")); div7.appendChild(new Element("div")); assertEquals(div1, div1.findTag("div")); assertEquals(div1, div1.findTag("div")); assertEquals
@Test public void testReplace() { Element div = doc.createElement("div"); div.appendChild(doc.createTextNode("hello")); div.replaceChild(doc, doc.createTextNode("world")); Element div2 = doc.createElement("div"); div2.appendChild(doc.createTextNode("hello2")); div2.replaceChild(doc, doc.createTextNode("hello3")); Element div3 = doc.createElement("div"); div3.appendChild(doc.createTextNode("hello4")); div3.replaceChild(doc, doc.createTextNode("hello5")); Element div4 = doc.createElement("div"); div4.replaceChild(doc, doc.createTextNode("hello6")); div4.replaceChild(doc, doc.createTextNode("hello7")); assertEquals("hello world", div4.text()); assertEquals("world", div4.text()); assertEquals("hello6", div4.text()); assertEquals("world", div4.text()); assertEquals("world", div4.text()); }
@Test public void testWrap() { Element div = new Element("div"); div.addChild(new Element("div")); div.addChild(new Element("span")); div.addChild(new Element("span")); assertEquals("<div><span>div</span></div>", div.wrap("<div>span</span></div>")); div.removeChild(div); assertEquals("<div><span>div</span></div>", div.wrap("<div>div</span></div>")); div.removeChild(div); assertEquals("<div><span>div</span></div>", div.wrap("<div>div</span></div>")); }
@Test public void testWrap() { Element div = Jsoup.parse("<div><p>Hello</p></div>").first(); Element div2 = Jsoup.parse("<div><p>Hello</p></div>").first(); Element div3 = Jsoup.parse("<div><p>Hello</p></div>").first(); Element div4 = Jsoup.parse("<div><p>Hello</p></div>").first(); Element div5 = Jsoup.parse("<div><p>Hello</p></div>").first(); Element div6 = Jsoup.parse("<div><p>Hello</p></div>").first(); Element div7 = Jsoup.parse("<div><p>Hello</p></div>").first(); Element div8 = Jsoup.parse("<div><p>Hello</p></div>").first(); Element div9 = Jsoup.parse("<div><p>Hello</p></div>").first(); Element div10 = Jsoup.parse("<div><p>Hello</p></div>").first(); Element div11 = Jsoup.parse("<div><p>Hello</p></div>").first(); Element div12 = Jsoup.parse("<div><p>Hello</p></div
@Test public void testWrap() { String h = "<div><p>Hello</p></div>"; Element div = Jsoup.parse(h); Element div2 = Jsoup.parse(div.html()); Element div3 = Jsoup.parse(div2.html()); Element div4 = Jsoup.parse(div3.html()); Element div5 = Jsoup.parse(div4.html()); Element div6 = Jsoup.parse(div5.html()); Element div7 = Jsoup.parse(div6.html()); Element div8 = Jsoup.parse(div7.html()); Element div9 = Jsoup.parse(div8.html()); Element div10 = Jsoup.parse(div9.html()); Element div11 = Jsoup.parse(div10.html()); Element div12 = Jsoup.parse(div9.html()); Element div13 = Jsoup.parse(div3.html()); assertEquals(div1, div.children().first().id()); assertEquals(div2, div.children().first().id()); assertEquals(div3, div.children().first().id()); assertEquals(div4, div.children().first().id()); assertEquals(div5, div.children().first().id()); assertEquals(div6, div.children().first().id()); assertEquals(div9, div.children().
@Test public void testWrap() { Element div = doc.createElement("div"); div.appendChild(doc.createTextNode("Hello")); div.appendChild(doc.createTextNode("World")); Element div2 = doc.createElement("div"); div2.appendChild(doc.createTextNode("Hello")); div2.appendChild(doc.createTextNode("World")); Element div3 = doc.createElement("div"); div3.appendChild(doc.createTextNode("Hello")); div3.appendChild(doc.createTextNode("World")); Element div4 = doc.createElement("div"); div4.appendChild(doc.createTextNode("Hello")); div4.appendChild(doc.createTextNode("World")); Element div5 = doc.createElement("div"); div5.appendChild(doc.createTextNode("Hello")); div5.appendChild(doc.createTextNode("World")); Element div6 = doc.createElement("div"); div6.appendChild(doc.createTextNode("Hello")); div6.appendChild(doc.createTextNode("World")); Element div7 = doc.createElement("div"); div7.appendChild(doc.createTextNode("Hello")); div7.appendChild(doc.createTextNode("World")); div7.appendChild(doc.createTextNode("Hello")); div6.appendChild(doc.createTextNode("World")); Element div
@Test public void testRemove() { Element div = Jsoup.parse("<div><p>Hello</p></div> <div><p>There</p></div> <div><p>There</p></div> <div><p>There</p></div> <div><p>There</p></div> <div><p>There</p></div>"); Element div2 = Jsoup.parse("<div><p>Hello</p></div> <div><p>There</p></div> <div><p>There</p></div> <div><p>There</p></div> <div><p>There</p></div> <div><p>There</p></div> <div><p>There</p></div> <div><p>There</p></div> <div><p>There</p></div> <div><p>There</p></div> <div><p>There</p></div> <div><p>There</p></div> <div><p>There</p></div> <div><p>There</p></div> <div><p>There</p></div> <div><p
@Test public void testWrap() { Element div = Jsoup.parse("<div><p>Hello</p></div> <div><p>There</p></div> <div><p>There</p></div> <div><p>There</p></div> <div><p>There</p></div>"); Element div2 = Jsoup.parse("<div><p>Hello</p></div> <div><p>There</p></div> <div><p>There</p></div> <div><p>There</p></div> <div><p>There</p></div> <div><p>There</p></div> <div><p>There</p></div> <div><p>There</p></div> <div><p>There</p></div> <div><p>There</p></div> <div><p>There</p></div> <div><p>There</p></div> <div><p>There</p></div> <div><p>There</p></div> <div><p>There</p></div> <div><p>There</p></div> <div><
@Test public void testWrap() { String h = "<div><p>Hello</p></div>"; Element div = Jsoup.parse(h).getBody(); Element wrap = div.wrap(h); assertEquals(h, wrap.text()); }
@Test public void testGetDeepChild() { Element el = Jsoup.parse("<div><p>Hello</p></div><div><p>There</p></div><div><p>There</p></div>"); Element div1 = Jsoup.parse("<div><p>Hello</p></div><div><p>There</p></div><div><p>There</p></div><div><p>There</p></div>"); Element div2 = Jsoup.parse("<div><p>Hello</p></div><div><p>There</p></div><div><p>There</p></div><div><p>There</p></div><div><p>There</p></div><div><p>There</p></div>"); Element div3 = Jsoup.parse("<div><p>Hello</p></div><div><p>There</p></div><div><p>There</p></div><div><p>There</p></div><div><p>There</p></div><div><p>There</p></div><div><p>There</p></div><div><p>There</p></div><p>There</p
@Test public void testGetDeepChild() { Element el = Jsoup.parse("<div><p>Hello</p></div><div><p>There</p></div><div><p>There</p></div>"); Element div1 = Jsoup.parse("<div><p>Hello</p></div><div><p>There</p></div><div><p>There</p></div><div><p>There</p></div>"); Element div2 = Jsoup.parse("<div><p>Hello</p></div><div><p>There</p></div><div><p>There</p></div><div><p>There</p></div><div><p>There</p></div><div><p>There</p></div><p>There</p></div>"); Element div3 = Jsoup.parse("<div><p>Hello</p></div><div><p>There</p></div><div><p>There</p></div><div><p>There</p></div><div><p>There</p></div><div><p>There</p></div><p>There</p></div><script><p>Hello</p></script
@Test public void testGetDeepChild() { Element el = Jsoup.parse("<div><p>Hello</p></div><div><p>There</p></div><div><p>There</p></div>"); assertEquals("Hello", el.text()); assertEquals("There", el.attr("p")); assertEquals("div", el.text()); assertEquals("There", el.lastTag()); assertEquals("div", el.lastTag()); assertEquals("<div><p>Hello</p></div><div><p>There</p></div><div><p>There</p></div>", el.html()); assertEquals("<div><p>Hello</p></div><div><p>There</p></div><div><p>There</p></div><div><p>There</p></div>", el.html()); assertEquals("<div><p>Hello</p></div><div><p>There</p></div><div><p>There</p></div><div><p>There</p></div>", el.html()); assertEquals("<div><p>Hello</p></div><div><p>There</p></div><div><p>There</p></div><div><p>There
@Test public void testGetDeepChild() { Document doc = Jsoup.parse("<div><p>Hello</p></div><div><p>There</p></div><div><p>Hello</p></div>"); Element div1 = doc.select("div").first(); Element div2 = doc.select("div").first(); Element div3 = doc.select("div").first(); assertEquals("Hello", div1.text()); assertEquals("There", div2.text()); assertEquals("Hello", div3.text()); assertEquals("There", div3.text()); }
@Test public void testPreviousElementSibling() { Document doc = Jsoup.parse("<div><p>Hello</p></div><div><p>There</p></div><div><p>There</p></div>"); Element p1 = doc.select("div").first(); p1.previousElementSibling(); assertEquals("There", p1.text()); assertEquals("There", p1.previousElementSibling().tagName()); assertEquals("div", p1.previousElementSibling().attr("class")); assertEquals("div", p1.previousElementSibling().text()); Element p2 = doc.select("div").first(); p2.previousElementSibling(); assertEquals("There", p2.text()); assertEquals("There", p2.previousElementSibling().tagName()); assertEquals("div", p2.previousElementSibling().tagName()); }
@Test public void testPreviousElementSibling() { Document doc = Jsoup.parse("<div><p>Hello</p></div><div><p>There</p></div><div><p>There</p></div>"); Element div1 = doc.select("div").first(); assertEquals(1, div1.previousElementSibling().size()); assertEquals("div", div1.previousElementSibling().get(0)); assertEquals("div", div1.previousElementSibling().get(1)); Element div2 = doc.select("div").first(); assertEquals(1, div2.previousElementSibling().size()); assertEquals("div", div2.previousElementSibling().get(0)); assertEquals("div", div2.previousElementSibling().get(1)); }
@Test public void testPreviousElementSibling() { Document doc = Jsoup.parse("<div><p>Hello</p></div><div><p>There</p></div><div><p>There</p></div>"); Element div = doc.select("div").first(); assertEquals(1, div.previousElementSibling().index()); assertEquals("div", div.previousElementSibling().text()); }
@Test public void testPreviousElementSibling() { Document doc = Jsoup.parse("<div><p>Hello</p></div><div><p>There</p></div><div><p>There</p></div>"); Element div1 = doc.select("div").first(); assertEquals("div", div1.previousElementSibling().tagName()); assertEquals("div", div1.previousElementSibling().attr("class")); assertEquals("div", div1.previousElementSibling().text()); assertEquals("div", div1.previousElementSibling().text()); assertEquals("div", div1.previousElementSibling().tagName()); assertEquals("div", div1.previousElementSibling().text()); assertEquals("div", div1.previousElementSibling().tagName()); assertEquals("div", div1.previousElementSibling().tagName()); assertEquals("div", div1.previousElementSibling().tagName()); assertEquals("div", div1.previousElementSibling().tagName()); assertEquals("div", div1.previousElementSibling().tagName()); assertEquals("div", div1.previousElementSibling().tagName()); assertEquals("div", div1.previousElementSibling().tagName()); assertEquals("div", div1.previousElementSibling().tagName()); assertEquals("div", div1.previousElementSibling().tagName()); assertEquals("div", div1.previousElementSibling().tagName()); assertEquals("
@Test public void testPreviousElementSibling() { Document doc = Jsoup.parse("<div><p>Hello</p></div><div><p>There</p></div><div><p>There</p></div>"); Element div1 = doc.select("div").first(); assertEquals("div", div1.previousElementSibling().tagName()); assertEquals("There", div1.previousElementSibling().text()); assertEquals("div", div1.previousElementSibling().tagName()); assertEquals("div", div1.previousElementSibling().text()); assertEquals("div", div1.previousElementSibling().tagName()); assertEquals("div", div1.previousElementSibling().tagName()); assertEquals("div", div1.previousElementSibling().tagName()); assertEquals("div", div1.previousElementSibling().tagName()); assertEquals("div", div1.previousElementSibling().tagName()); assertEquals("div", div1.previousElementSibling().tagName()); assertEquals("div", div1.previousElementSibling().tagName()); assertEquals("div", div1.previousElementSibling().tagName()); assertEquals("div", div1.previousElementSibling().tagName()); assertEquals("div", div1.previousElementSibling().tagName()); assertEquals("div", div1.previousElementSibling().tagName()); assertEquals("div", div1.previousElementSibling().tagName()); assertEquals("div",
@Test public void testPreviousElementSibling() { Document doc = Jsoup.parse("<div><p>Hello</p></div><div><p>There</p></div><div><p>Hello</p></div>"); Element div1 = doc.select("div").first(); assertEquals("div", div1.previousElementSibling().tagName()); assertEquals("div", div1.previousElementSibling().attr("class")); assertEquals("div", div1.previousElementSibling().text()); Element div2 = doc.select("div").first(); assertEquals("div", div2.previousElementSibling().tagName()); assertEquals("div", div2.previousElementSibling().text()); assertEquals("div", div2.previousElementSibling().tagName()); assertEquals("div", div2.previousElementSibling().tagName()); }
@Test public void testPreviousElementSibling() { Document doc = Jsoup.parse("<div><p>Hello</p></div><div><p>There</p></div><div><p>Hello</p></div>"); Element div = doc.select("div").first(); assertEquals("div", div.previousElementSibling().tagName()); assertEquals("div", div.previousElementSibling().tagName()); assertEquals("div", div.previousElementSibling().tagName()); assertEquals("div", div.previousElementSibling().tagName()); assertEquals("div", div.previousElementSibling().tagName()); assertEquals("div", div.previousElementSibling().tagName()); assertEquals("div", div.previousElementSibling().tagName()); assertEquals("div", div.previousElementSibling().tagName()); assertEquals("div", div.previousElementSibling().tagName()); assertEquals("div", div.previousElementSibling().tagName()); assertEquals("div", div.previousElementSibling().tagName()); assertEquals("div", div.previousElementSibling().tagName()); assertEquals("div", div.previousElementSibling().tagName()); assertEquals("div", div.previousElementSibling().tagName()); assertEquals("div", div.previousElementSibling().tagName()); assertEquals("div", div.previousElementSibling().tagName()); assertEquals("div", div
@Test public void getElementsByAttributeValue() { Document doc = Jsoup.parse("<div><p>Hello</p></div>"); Elements ps = doc.getElementsByAttributeValue("p", "Hello"); assertEquals(1, ps.size()); assertEquals("Hello", ps.get(0).text()); }
@Test public void testLineElement() { Document doc = Jsoup.parse("<div><p>Hello</p></div>"); Elements lines = doc.select("p").box(); assertEquals(1, lines.size()); assertEquals("Hello", lines.get(0).text()); Elements lines2 = doc.select("p").box(); assertEquals(1, lines2.size()); assertEquals("Hello", lines2.get(0).text()); Elements lines3 = doc.select("p").box(); assertEquals(1, lines3.size()); assertEquals("Hello", lines3.get(0).text()); }
@Test public void getElementsByAttributeValueNot() { Document doc = Jsoup.parse("<div><p>Hello</p></div>"); Elements ps = doc.getElementsByAttributeValueNot("p", "p"); assertEquals(1, ps.size()); assertEquals("p", ps.get(0).text()); Elements ps2 = doc.getElementsByAttributeValueNot("p", "p"); assertEquals(2, ps2.size()); assertEquals("p", ps2.get(0).text()); Elements ps3 = doc.getElementsByAttributeValueNot("p", "p"); assertEquals(3, ps3.size()); assertEquals("p", ps3.get(0).text()); Elements ps4 = doc.getElementsByAttributeValueNot("p", "p"); assertEquals(4, ps4.size()); assertEquals("p", ps4.get(0).text()); }
@Test public void handlesImplicitAttributeElements() { Document doc = Jsoup.parse("<div><p>Hello</p></div>"); Elements div1 = doc.select("div"); Elements div2 = doc.select("div"); assertEquals(1, div1.size()); assertEquals("Hello", div1.first().text()); assertEquals(1, div2.size()); Elements div3 = doc.select("div"); assertEquals(1, div3.size()); assertEquals("Hello", div3.first().text()); assertEquals(1, div3.size()); Elements div4 = doc.select("div"); assertEquals(1, div4.size()); assertEquals("Hello", div4.first().text()); assertEquals(1, div4.last().size()); }
@Test public void handlesImplicitAttributeStarting() { Document doc = Jsoup.parse("<div><p>Hello</p></div><div><p>There</p></div>"); Elements ps = doc.getElementsByAttributeValueStarting("p", ""); assertEquals(1, ps.size()); assertEquals("Hello", ps.get(0).text()); }
@Test public void getElementsByAttributeValueStarting() { Document doc = Jsoup.parse("<div><p>Hello</p></div><div><p>There</p></div>"); Elements lines = doc.select("div").first(); assertEquals(1, lines.size()); assertEquals("Hello", lines.get(0).text()); assertEquals("There", lines.get(1).text()); Elements els = doc.select("div").first(); assertEquals(1, els.size()); assertEquals("div", els.get(0).tagName()); assertEquals("Hello", els.get(0).text()); assertEquals("There", els.get(1).text()); }
@Test public void handlesEOLAttributeEnding() { Document doc = Jsoup.parse("<div><ol><p>Hello</p></ol></div>"); Elements els = doc.getElementsByAttributeValueEnding("p", " "); assertEquals(1, els.size()); assertEquals("Hello", els.get(0).text()); }
@Test public void handlesImplicitAttributeEnding() { Document doc = Jsoup.parse("<div><p>Hello</p></div><div><p>There</p></div>"); Elements divElements = doc.select("div"); Elements pElements = divElements.select("p"); Elements pElements2 = pElements.select("p"); Elements pElements3 = pElements.select("p"); assertEquals(3, pElements2.size()); assertEquals("Hello", pElements2.first().text()); assertEquals("There", pElements2.last().text()); assertEquals("There", pElements3.last().text()); assertEquals("div", pElements3.first().tagName()); assertEquals("p", pElements3.last().tagName()); assertEquals("There", pElements3.last().tagName()); }
@Test public void getElementsByIndexLessThan() { Document doc = Jsoup.parse("<div><p>Hello</p></div>"); Elements ps = doc.getElementsByIndexLessThan(0); assertEquals(1, ps.size()); assertEquals("Hello", ps.get(0).text()); Elements ps2 = doc.getElementsByIndexLessThan(2); assertEquals(2, ps2.size()); assertEquals("Hello", ps2.get(0).text()); Elements ps3 = doc.getElementsByIndexLessThan(3); assertEquals(3, ps3.size()); assertEquals("Hello", ps3.get(0).text()); }
@Test public void getElementsByIndexLessThan() { Document doc = Jsoup.parse("<div><p>Hello</p></div>"); Elements div1 = doc.select("div"); Elements div2 = doc.select("div"); assertEquals(2, div1.size()); assertEquals("Hello", div1.first().text()); assertEquals("Hello", div1.last().text()); assertEquals(1, div2.size()); assertEquals("div", div2.first().tagName()); assertEquals("div", div2.last().tagName()); }
@Test public void getElementsByIndexGreaterThan() { Document doc = Jsoup.parse("<div><p>Hello</p></div>"); Elements ps = doc.getElementsByIndexGreaterThan(0); assertEquals(1, ps.size()); assertEquals("Hello", ps.get(0).text()); }
@Test public void handlesImplicitElementWithMultipleComments() { Document doc = Jsoup.parse("<div><p>Hello</p></div><div><p>There</p></div>"); Elements div1 = doc.select("div"); assertEquals(1, div1.size()); assertEquals("Hello", div1.first().text()); Elements div2 = doc.select("div"); assertEquals(1, div2.size()); assertEquals("There", div2.first().text()); Elements div3 = doc.select("div"); assertEquals(1, div3.size()); assertEquals("Hello", div3.first().text()); Elements div4 = doc.select("div"); assertEquals(1, div4.size()); assertEquals("There", div4.first().text()); }
@Test public void testGetAllElements() { Document doc = Jsoup.parse("<div><p>Hello</p></div><div><p>There</p></div>"); Elements els = doc.getAllElements(); assertEquals(3, els.size()); assertEquals("<div><p>Hello</p></div><div><p>There</p></div>", els.get(0).outerHtml()); assertEquals("<div><p>Hello</p></div><div><p>There</p></div><div><p>There</p></div>", els.get(1).outerHtml()); }
@Test public void testLineBreaks() { Document doc = Jsoup.parse("<div><p>Hello</p></div><div><p>There</p></div>"); Elements els = doc.select("div").first(); assertEquals(1, els.size()); assertEquals("Hello", els.text()); assertEquals("There", els.text()); }
@Test public void testText() { Document doc = Jsoup.parse("<textarea>Some text</textarea><input type='text' />"); Element el = doc.select("textarea").first(); assertEquals("Some text", el.val()); }
@Test public void testText() { Document doc = Jsoup.parse("<textarea>Hello</textarea><p>There</p>"); Element el = doc.select("p").first(); assertEquals("Hello", el.val()); el.select("textarea").first(); assertEquals("There", el.val()); }
@Test public void testText() { Document doc = Jsoup.parse("<textarea>Hello</textarea><p>There</p>"); Element el = doc.select("textarea").first(); assertEquals("Hello", el.val()); el.select("p").first(); assertEquals("There", el.val()); }
@Test public void testTextArea() { Document doc = Jsoup.parse("<textarea><p>Hello</p></textarea>"); Element textarea = doc.select("textarea").first(); textarea.append("p"); assertEquals("p", textarea.val()); }
@Test public void testval() { Document doc = Jsoup.parse("<textarea>Hello</textarea><input type='text' />"); Element e = doc.select("textarea").val("Hello"); assertEquals("Hello", e.text()); }
@Test public void testText() { Document doc = Jsoup.parse("<textarea>Hello</textarea><value>There</value>"); Element e = doc.select("textarea"); e.append("value"); e.append("</textarea>"); assertEquals(Document.parse("Hello<textarea>There</textarea><value>There</value></textarea>", TextUtil.stripNewlines(e.html())); }
@Test public void testText() { Document doc = Jsoup.parse("<textarea>Hello</textarea><p>There</p></textarea>"); Element div = doc.select("div").first(); div.val("hello"); doc.select("p").first().text(); Element div2 = doc.select("div").first(); div2.val("world"); doc.select("p").first().text(); assertEquals("Hello world", div2.text()); }
@Test public void testText() { Document doc = Jsoup.parse("<textarea><p>Hello</p></textarea>"); Element e = doc.select("p").first(); e.attr("value", "Hello"); e.appendText("Hello"); assertEquals("Hello", e.text()); }
@Test public void testval() { Document doc = Jsoup.parse("<textarea>Hello</textarea><p>There</p>"); Element e = doc.select("textarea"); e.val("Hello"); assertEquals("Hello", e.text()); }
@Test public void testParser() { Document doc = Jsoup.parse("<p>Hello <b>there</b> <i>jsoup <b>jsoup <i>jsoup <i>jsoup <b>jsoup <i>jsoup <i>jsoup <b>jsoup <i>jsoup <i>jsoup <i>jsoup <i>jsoup <i>jsoup <i>jsoup <i>jsoup <i>jsoup <i>jsoup <i>jsoup <i>jsoup <i>jsoup <i>jsoup <i>jsoup <i>jsoup <i>jsoup <i>jsoup <i>jsoup <i>jsoup <i>jsoup <i>jsoup <i>jsoup <i>jsoup <i>jsoup <i>jsoup <i>jsoup <i>jsoup <i>jsoup <i>jsoup <i>jsoup <i>jsoup <i>jsoup <i>jsoup <i>jsoup <i>jsoup <i>jsoup <i>jsoup <i>jsoup
@Test public void testParser() { Document doc = Jsoup.parse("<p>Hello <b>there</b></p>"); assertEquals("<p>Hello <b>there</b></p>", doc.html()); doc = Jsoup.parse("<p>Hello <b>there</b></p>"); assertEquals("<p>Hello <b>there</b></p>", doc.html()); doc = Jsoup.parse("<p>Hello <b>there</b></p>"); assertEquals("<p>Hello <b>there</b></p>", doc.html()); }
@Test public void testParser() { Document doc = Jsoup.parse("<p>Hello</p>"); assertEquals("<p>Hello</p>", doc.body().html()); doc = Jsoup.parse("<p>Hello</p>"); assertEquals("<p>Hello</p>", doc.body().html()); }
@Test public void testEscaping() { Document doc = Jsoup.parse("<p> &amp; &amp; <b> &amp; <i> &amp; <b> &amp; <i> &amp; <i> &amp; <b> &amp; <i> &amp; <i> &amp; <b> &amp; <i> &amp; <i> &amp; <i> &amp; <b> &amp; <i> &amp; <i> &amp; <i> &amp; <i> &amp; <b> &amp; <i> &amp; <i> &amp; <i> &amp; <i> &amp; <i> &amp; <b> &amp; &amp; &amp; &amp; &amp; &amp; &amp; &amp; &amp; &amp; &amp; &amp; &amp; &amp; &amp; &amp; &amp; &amp; <i> &amp; <b> & &amp; <i> &amp; <i> &amp; <i> &amp; <b> &amp
@Test public void testComment() { Document doc = Jsoup.parse("<p>Comment</p>"); assertEquals("<p>Comment</p>", doc.body().html()); }
@Test public void testParser() { Document doc = Jsoup.parse("<p>Hello</p>"); assertEquals("<p>Hello</p>", doc.body().html()); doc = Jsoup.parse("<p>Hello</p>"); assertEquals("<p>Hello</p>", doc.body().html()); }
@Test public void testParser() { Document doc = Jsoup.parse("<p>Hello</p>"); assertEquals("<p>Hello</p>", doc.body().html()); doc = Jsoup.parse("<p>Hello</p>"); assertEquals("<p>Hello</p>", doc.body().html()); }
@Test public void testParser() { Document doc = Jsoup.parse("<p>Hello <b>there</b> <i>jsoup <b>jsoup <i>jsoup <i>jsoup <b>jsoup <i>jsoup <i>jsoup <b>jsoup <i>jsoup <i>jsoup <i>jsoup <i>jsoup <b>jsoup <i>jsoup <i>jsoup <i>jsoup <i>jsoup <i>jsoup <i>jsoup <i>jsoup <i>jsoup <i>jsoup <i>jsoup <i>jsoup <i>jsoup <i>jsoup <i>jsoup <i>jsoup <i>jsoup <i>jsoup <i>jsoup <i>jsoup <i>jsoup <i>jsoup <i>jsoup <i>jsoup <i>jsoup <i>jsoup <i>jsoup <i>jsoup <i>jsoup <i>jsoup <i>jsoup <i>jsoup <i>jsoup <i>jsoup
@Test public void testComment() { Document doc = Jsoup.parse("<p>Comment</p>"); assertEquals("<p>Comment</p>", doc.body().html()); }
@Test public void comment() { String h = "<!-- a comment -->"; Document doc = Jsoup.parse(h); assertEquals("<!-- a comment -->", doc.body().html()); }
@Test public void comment() { String h = "<!-- comment --> <script type='text/ script'>\n" + " <script>\n" + " <script>\n" + " <script>\n" + " <script>\n" + " <script>\n" + " <script>\n" + " <script>\n" + " <script>\n" + " <script>\n" + " <script>\n" + " <script>\n" + " <script>\n" + " <script>\n" + " <script>\n" + " <script>\n" + " <script>\n" + " <script>\n" + " <script>\n" + " <script>\n" + " <script>\n" + " <script>\n" + " <script>\n" + " <script>\n" + " <script>\n" + " <script>\n" + " <script>\n" + " <script>\n" + " <script>\n" + " <script>
@Test public void testComment() { Document doc = Jsoup.parse("<!--!--foo-->"); assertEquals("<!--!--foo-->", doc.body().html()); }
@Test public void testComment() { String s = "<!--foo bar --><!--foo bar --><!--foo bar --><!--foo bar --><!--foo bar --><!--foo bar --><!--foo bar --><!--foo bar --><!--foo bar --><!--foo bar --><!--foo bar --><!--foo bar --><!--foo bar --><!--foo bar --><!--foo bar --><!--foo bar --><!--foo bar --><!--foo bar --><!--foo bar --><!--foo bar --><!--foo bar --><!--foo bar --><!--foo bar --><!--foo bar --><!--foo bar --><!--foo bar --><!--foo bar --><!--foo bar --><!--foo bar --><!--foo bar --><!--foo bar --><!--foo bar --><!--foo bar --><!--foo bar --><!--foo bar --><!--foo bar --><!--foo bar --><!--foo bar --><!--foo bar --><!--foo bar --><!--foo bar --><!--foo bar --><!--foo bar --><!--foo bar --><!--foo bar --><!--foo bar --><!--foo bar --><!--foo bar --><!--foo bar --><!--foo bar --><!--foo bar --><!--foo bar --><!--foo bar --><!--foo bar --><!--foo bar --><!--foo bar --><!--foo bar --><!--foo bar --><!--foo bar --><!--foo -- --><!--foo --
" " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " " "
@Test public void testCDATA() { Jsoup Jsoup Jsoup Jsoup Jsoup = new Jsoup("http:.parse("<!--<?CDATA>")); }

@Test public void testComment() { Document doc = Jsoup.parse("<!-- foo -->").text("foo bar"); assertEquals("<!--foo bar -->", doc.toString()); }
@Test public void testComment() { String h = "<!--foo bar -->"; Document doc = Jsoup.parse(h); assertEquals("<!--foo bar -->", doc.toString()); }
@Test public void testEndTag() { doc.parse("<p></p>"); assertEquals("<p></p>", doc.toString()); }
" ) public void testComment() { String text = "<!-- This will be the end of the document?><!--><!-- This will be the end of the document

Test Test Test Test Test Test Test Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml Xml

@Test public void testEndTag() { String html = "<p>EndTag</p>"; Document doc = Jsoup.parse(html); assertEquals("<p>EndTag</p>", doc.body().html()); }
@Test public void testEndTag() { String html = "<p>this</p>"; Document doc = Jsoup.parse(html); Element p = doc.select("p").first(); assertEquals("this", p.text()); assertEquals("this", p.text()); }
@Test public void testEndTag() { String html = "<p>Hello <b>there</b></p>"; Document doc = Jsoup.parse(html); assertEquals("<p>Hello <b>there</b></p>", doc.html()); }
@Test public void testEndTag() { String html = "<p>Hello <p>there</p> <p>now</p> <p>now</p> <p>now</p> <p>now</p> <p>now</p> <p>now</p> <p>now</p> <p>now</p> <p>now</p> <p>now</p> <p>now</p> <p>now</p> <p>now</p> <p>now</p> <p>now</p> <p>now</p> <p>now</p> <p>now</p> <p>now</p> <p>now</p> <p>now</p> <p>now</p> <p>now</p> <p>now</p> <p>now</p> <p>now</p> <p>now</p> <p>now</p> <p>now</p> <p>now</p> <p>now</p> <p>now</p> <p>now</p> <p
@Test public void testEndTag() { String html = "<p>Hello <b>there</b></p>"; Document doc = Jsoup.parse(html); assertEquals("<p>Hello <b>there</b></p>", doc.html()); }
@Test public void testEndTag() { Document doc = Jsoup.parse("<p>Hello <p>there</p>"); assertEquals("<p>there</p>", doc.body().html()); }
@Test public void testPopStackToClose() { Document doc = Jsoup.parse("<p>Hello <p>there</p>"); Element p1 = doc.select("p"); assertEquals("Hello <p>", p1.nextText()); Element p2 = doc.select("p"); assertEquals("there", p2.nextText()); Element p3 = doc.select("p"); assertEquals("there", p3.nextText()); Element p4 = doc.select("p"); assertEquals("there", p4.nextText()); Element p5 = doc.select("p"); assertEquals("there", p5.nextText()); Element p6 = doc.select("p"); assertEquals("there", p6.nextText()); Element p7 = doc.select("p"); assertEquals("there", p7.nextText()); Element p8 = doc.select("p"); assertEquals("</p>", p8.nextText()); Element p9 = doc.select("p"); assertEquals("</p>", p9.nextText()); Element p10 = doc.select("p"); assertEquals("</p>", p10.nextText()); Element p11 = doc.select("p"); assertEquals("</p>", p11.nextText()); Element p12 = doc.select("p"); assertEquals("
@Test public void test_parseStartTag() { String text = "Hello, world!"; parseStartTag(text); }
@Test public void parseStartTag() { tq.consume("<"); tq.consumeWord(); tq.consumeWord(); tq.consumeWord(); tq.consumeWord(); }
@Test public void parseStartTag() { String text = "Hello <foo> world!"; String text2 = text.replaceAll(" ", ""); assertEquals(text, text2); }
@Test public void testParseStartTag() { String text = "Hello, world!"; Element startTag = new Element("start", text); Element endTag = new Element("end", text); tq.consume("start"); tq.consumeWord(); tq.consume("end"); tq.consumeWord(); tq.consume("end"); tq.consumeWord(); tq.consume("end"); tq.consumeWord(); tq.consumeWord(); tq.consumeWord(); tq.consumeWord(); tq.consumeWord(); tq.consumeWord(); tq.consumeWord(); tq.consumeWord(); tq.consumeWord(); tq.consumeWord(); tq.consumeWord(); tq.consumeWord(); tq.consumeWord(); tq.consumeWord(); tq.consumeWord(); tq.consumeWord(); tq.consumeWord(); tq.consumeWord(); tq.consumeWord(); tq.consumeWord(); tq.consumeWord(); }
@Test public void parseStartTag() { String text = "Hello, world!"; Element element = new Element("", "", text); tq.addFirst("&lt;"); tq.consumeWord(); tq.consumeWord(); tq.consumeWord(); tq.consumeWord(); tq.consumeWord(); tq.consumeWord(); tq.consumeWord(); tq.consumeWord(); tq.consumeWord(); tq.consumeWord(); tq.consumeWord(); tq.consumeWord(); tq.consumeWord(); tq.consumeWord(); tq.consumeWord(); tq.consumeWord(); tq.consumeWord(); tq.consumeWord(); tq.consumeWord(); }
@Test public void parseTextNode() { String text = "Hello, world!"; try (InputStream in = new InputStreamReader(text.getBytes(), "UTF-8")) { text = (String) in.read(); } try (InputStream in = new InputStreamReader(text.getBytes(), "UTF-8")) { text = (String) in.read(); } try (InputStream in = new InputStreamReader(text.getBytes(), "UTF-8")) { text = (String) in.read(); } try (InputStream in = new InputStreamReader(text.getBytes(), "UTF-8")) { text = (String) in.read(); } try (InputStream in = new InputStreamReader(text.getBytes(), "UTF-8")) { text = (String) in.read(); } try (InputStream in = new InputStreamReader(text.getBytes(), "UTF-8")) { text = (String) in.read(); } try (InputStream in = new InputStreamReader(text.getBytes(), "UTF-8")) { text = (String) in.read(); } try (InputStream in = new InputStreamReader(text.getBytes(), "UTF-8")) { text = (String) in.read(); } try (InputStream in = new InputStreamReader(text.getBytes(), "
@Test public void parseStartTag() { [LINE] t = new StringTokenizer("&lt;foo&gt;bar&lt;foo&gt;bar"); t.nextToken(); t.nextToken(); t.nextToken(); t.nextToken(); t.nextToken(); t.nextToken(); t.nextToken(); t.nextToken(); t.nextToken(); t.nextToken(); t.nextToken(); t.nextToken(); t.nextToken(); t.nextToken(); }
@Test public void parseStartTag() { String text = "Hello, world!"; Attributes attributes = new Attributes(); attributes.put("Hello", text); attributes.put("world", text); Element element = (Element) attributes.get("Hello"); assertEquals("Hello, world!", element.getTextContent()); }
@Test public void parseStartTag() { String text = "Hello <b> world!"; String text2 = "Hello <b> world!"; String text3 = "Hello <b> world!"; String text4 = "Hello <b> world!"; String text5 = "Hello <b> world!"; String text6 = "Hello <b> world!"; String text7 = "Hello <b> world!"; String text8 = "Hello <b> world!"; String text9 = "Hello <b> world!"; String text10 = "Hello <b> world!"; String text11 = "Hello <b> world!"; String text12 = "Hello <b> world!"; String text13 = "Hello <b> world!"; String text14 = "Hello <b> world!"; String text15 = "Hello <b> world!"; String text16 = "Hello <b> world!"; String text16 = "Hello <b> world!"; String text21 = "Hello <b> world!"; String text22 = "Hello <b> world!"; String text23 = "Hello <b> world!"; String text24 = "Hello <
@Test public void parseStartTag() { String text = "<start>foo</start>"; Element start = new Element(text, "foo", null); parseStartTag(start); }
@Test public void testChild() { String xml = "<foo bar=\"bar\">foo</foo>"; Element child = new Element(xml, "foo", null); Element expected = new Element(xml, "foo", null); Element actual = (Element) child.getChild(0); assertEquivalent(expected, actual); }
@Test public void parseStartTag() { String html = "<div>Hello <b>there</b></div>"; Element div = new Element(html, "http: Attributes attributes = new Attributes(); attributes.put("foo", "bar"); div.setAttribute("foo", "bar"); div.setAttribute("foo", "bar"); Element b = new Element(html, "http: attributes.put("foo", "bar"); b.setAttribute("foo", "bar"); div.setAttribute("foo", "bar"); b.setAttribute("foo", "bar"); assertEquals(true, div.isEmpty()); }
@Test public void testStartTag() { tq.consumeWord(); tq.consumeWord(); tq.consumeWord(); tq.consumeWord(); tq.consumeWord(); tq.consumeWord(); tq.consumeWord(); tq.consumeWord(); tq.consumeWord(); tq.consumeWord(); tq.consumeWord(); tq.consumeWord(); tq.consumeWord(); tq.consumeWord(); tq.consumeWord(); tq.consumeWord(); tq.consumeWord(); tq.consumeWord(); tq.consumeWord(); tq.consumeWord(); tq.consumeWord(); tq.consumeWord(); tq.consumeWord(); tq.consumeWord(); tq.consumeWord(); tq.consumeWord(); tq.consumeWord(); tq.consumeWord(); tq.consumeWord(); tq.consumeWord(); tq.consumeWord(); tq.consumeWord(); tq.consumeWord(); tq.consumeWord(); tq.consumeWord(); tq.consumeWord(); tq.consumeWord(); tq.consumeWord(); tq.consumeWord(); tq.consumeWord(); tq.consumeWord();
@Test public void parseStartTag() { tq.matchChomp("</"); tq.matchChomp(">"); tq.matchChomp("</"); tq.matchChomp("</"); tq.matchChomp("</"); tq.matchChomp("</"); tq.matchChomp("</"); tq.matchChomp("</"); tq.matchChomp("</"); tq.matchChomp("</"); tq.matchChomp("</"); tq.matchChomp("</"); tq.matchChomp("</"); tq.matchChomp("</"); tq.matchChomp("</"); tq.matchChomp("</"); tq.matchChomp("</"); tq.matchChomp("</"); tq.matchChomp("</"); tq.matchChomp("</"); tq.matchChomp("</"); tq.matchChomp("</"); tq.matchChomp("</"); tq.matchChomp("</"); tq.matchChomp("</"); tq.matchChomp("</"); tq.matchChomp("</"); }
@Test public void parseStartTag() { String data = ""; parseStartTag(data); }
@Test public void dataNode() { String data = "foo bar baz"; DataNode dataNode = new DataNode(data, baseUri); assertEquals(dataNode.getData(), data); }
@Test public void parseStartTag() { String text = "Hello, world!"; [LINE] assertText(text); }
@Test public void testParseStartTag() { [LINE] String href = child.absUrl("href"); [LINE] assertText(href); }
@Test public void parseStartTag() { String href = "http: Element startTag = new Element(href, "http: Element endTag = new Element(href, "http: startTag.appendText("done"); endTag.appendText("done"); Element html = Jsoup.parse(startTag.toString()); assertEquals("done", html.text()); }
@Test public void addChildToParent() { String text = "<div><p>Hello</p></div>"; Element div = new Element("div", "", ""); div.appendChild(div); div.addChild(new Element("p", "", "")); div.addChild(new Element("p", "", "")); div.addChild(new Element("p", "", "")); div.addChild(new Element("p", "", "")); div.addChild(new Element("p", "", "")); div.addChild(new Element("p", "", "")); div.addChild(new Element("p", "", "")); Element p = new Element("p", "", ""); p.addChild(new Element("p", "", "")); p.addChild(new Element("p", "", "")); p.addChild(new Element("p", "", "")); p.addChild(new Element("p", "", "")); p.addChild(new Element("p", "", "")); p.addChild(new Element("p", "", "")); p.addChild(new Element("p", "", "")); p.addChild(new Element("p", "", "")); p.addChild(new Element("p", "",
@Test public void parseEncoded() { String encoded = "Encoded"; String encoded2 = "Encoded"; String encoded3 = "Encoded"; Attribute attribute = parseAttribute(encoded); assertEquals(encoded, attribute.getEncoded()); assertEquals(encoded2, attribute.getEncoded()); assertEquals(encoded3, attribute.getEncoded()); }
@Test public void testComment() { Document doc = Jsoup.parse("<!-- Comment -->"); Element div = doc.select("!-- comment").first(); assertEquals("<!--!-- Comment -->", div.text()); }
@Test public void testComment() { String html = "<!-- <script>alert('Hello');</script>"; Document doc = Jsoup.parse(html); Element first = doc.select("script").first(); Element second = doc.select("script").first(); Element third = doc.select("script").first(); assertEquals("Hello", first.text()); assertEquals("Hello", second.text()); assertEquals("", third.text()); }
@Test public void comment() { String text = "<!-- This is the comment -->"; TextNode textNode = TextNode.createFromEncoded(text, baseUri); textNode.appendComment("This is the comment"); textNode.appendComment("This is the comment"); TextNode commentNode = TextNode.createFromEncoded(text, baseUri); commentNode.appendComment("This is the comment"); textNode.appendComment("This is the comment"); textNode.appendComment("This is the comment"); textNode.appendComment("This is the comment"); textNode.appendComment("This is the comment"); textNode.appendComment("This is the comment"); textNode.appendComment("This is the comment"); textNode.appendComment("This is the comment"); textNode.appendComment("This is the comment"); textNode.appendComment("This is the comment"); textNode.appendComment("This is the comment"); textNode.appendComment("This is the comment"); textNode.appendComment("This is the comment"); textNode.appendComment("This is the comment"); textNode.appendComment("This is the comment"); textNode.appendComment("This is the comment"); textNode.appendComment
@Test public void testComment() { Document doc = Jsoup.parse("<!-- Comment -->"); Element last = doc.last(); assertEquals("<!--!-- Comment -->", last.getTextContent()); }
@Test public void testAddChildToParent() { Element parent = new Element("parent"); Element child = new Element("child"); addChildToParent(child, true); assertEquals("parent", parent.tag()); child.appendChild(parent); assertEquals("child", parent.tag()); child.appendChild(parent); assertEquals("parent", parent.tag()); }
@Test public void testChildAttachement() { String html = "<div><p>Hello</p></div>"; Element parent = elem.append(html); Element child = addChildToParent(parent, false); assertEquals("Hello", child.tag()); assertEquals("", child.outerHtml()); }
@Test public void testAddChildToParent() { String html = "<div><p>Hello</p></div>"; Element parent = Jsoup.parse(html, Parser.HTML_NODE_BASE_URI).getParent(); Element child = parent.appendChild(new Element("p")); child.appendChild(new Element("child")); child.appendChild(new Element("child2")); child.appendChild(new Element("child3")); parent.removeChild(child); Element root = Jsoup.parse(html, Parser.HTML_NODE_BASE_URI).getParent(); Element child2 = root.appendChild(new Element("child2")); child2.appendChild(new Element("child3")); child2.appendChild(new Element("child4")); root.removeChild(child2); Element root2 = Jsoup.parse(html, Parser.HTML_NODE_BASE_URI).getParent(); assertEquals("Hello", root.outerHtml()); assertEquals("Hello", root2.outerHtml()); assertEquals("", root2.outerHtml()); }
@Test public void addChildToParent() { Element parent = new Element("parent"); Element child = new Element("child"); parent.appendChild(child); Element root = addChildToParent(parent, true); assertEquals("parent", root.tag()); assertEquals("child", root.getTag()); }
@Test public void testChildAddedToParent() { String html = "<div><p>Hello</p></div>"; Element parent = Jsoup.parse(html, Parser.HTML_NODE_BASE_URI); Element child = parent.appendChild(child); Element parent2 = parent.appendChild(child); Element child2 = parent2.appendChild(child2); assertEquals(parent, parent2); }
@Test public void testChildToParent() { Element parent = new Element("parent"); Element child = new Element("child"); child.appendChild(parent); parent.appendChild(child); Element parent2 = new Element("parent"); child.appendChild(parent2); parent2.appendChild(child); parent2.appendChild(child); assertEquals(parent, parent2); }
@Test public void testImplicitAddChildToParent() { String head = "<html><head> </head><body> </body></html>"; Element parent = new Element("parent"); Element implicit = addChildToParent(parent, true); Element root = addChildToParent(implicit, false); assertEquals(implicit, root); }
@Test public void testAddChildToParent() { Element parent = new Element("parent"); Element child = new Element("child"); child.tag(bodyTag); parent.appendChild(child); Element root = Parse.parse(new StringReader(parent.toString())); Element child1 = Parse.parse(new StringReader(child.toString())); Element child2 = Parse.parse(new StringReader(parent.toString())); Element root2 = Parse.parse(new StringReader(child2.toString())); Element child3 = Parse.parse(new StringReader(parent.toString())); Element child4 = Parse.parse(new StringReader(child3.toString())); Element child5 = Parse.parse(new StringReader(child4.toString())); Element parent3 = Parse.parse(new StringReader(parent3.toString())); Element child6 = Parse.parse(new StringReader(parent3.toString())); Element child7 = Parse.parse(new StringReader(child6.toString())); Element child8 = Parse.parse(new StringReader(child8.toString())); Element child9 = Parse.parse(new StringReader(child9.toString())); Element child10 = Parse.parse(new StringReader(child8.toString())); Element child11 = Parse.parse(new StringReader(child11.toString())); Element child12 = Parse.parse
@Test public void testImplicitIsAddedToParent() { Element implicit = doc.createElement("h1"); Element head = addChildToParent(implicit, true); assertEquals("", head.tag()); assertEquals("", body.tag()); Element parent = doc.createElement("p"); Element body = addChildToParent(body, true); assertEquals("", body.tag()); assertEquals("", parent.tag()); assertEquals("", body.outerHtml()); }
@Test public void testImplicitAddChildToParent() { Element parent = new Element("parent"); Element child = new Element("child"); parent.appendChild(child); Element implicit = new Element("implicit"); implicit.appendChild(child); assertEquals(implicit, parent); }
@Test public void testImplicitAddChildToParent() { Element parent = new Element("parent"); Element child = new Element("child"); parent.appendChild(child); Element root = new Element("root"); root.appendChild(child); Element implicit = root.appendChild(child); assertEquals(implicit, parent); }
@Test public void testAddChildToParent() { Element root = doc("html"); Element parent = addChildToParent(implicit, true); assertEquals("html", parent.tag()); assertEquals("body", parent.text()); assertEquals("body", parent.text()); }
) { Element parent = new JsoupElement("div"), "", "", ""); Element child = new JsoupElement("div"), "", "", ""); Element parent2 = new JsoupElement("div"), "", "", ""); Element child2 = new JsoupElement("div"), "", "", ""); Element parent3 = new JsoupElement("div"), "", "", ""); Element parent4 = new JsoupElement("div"), "", "", ""); Element parent5 = new JsoupElement("div"), "", "", ""); Element parent6 = new JsoupElement("div"), "", "", ""); Element parent7 = new JsoupElement("div"), "", "", ""); Element parent8 = new JsoupElement("div"), "", "", ""); Element parent9 = new JsoupElement("div"), "", "", ""); Element parent10 = new JsoupElement("div"), "", "", ""); Element parent11 = new JsoupElement("div"), "", "", "", ""); Element parent12 = new JsoupElement("div"), "", "", "", ""); Element parent13 = new JsoupElement("div"), "", "", "", ""); Element parent14 = new JsoupElement("div"), "", "", "", ""); Element parent15 = new JsoupElement("div"), "", "", "", ""); Element parent16 = new JsoupElement("div"), "", "", "", ""); Element parent21 = new JsoupElement("div"), "", "", ""); Element parent
@Test public void testImplicitAddChildToParent() { Element parent = new Element("parent"); Element child = new Element("child"); child.appendChild(parent); parent.appendChild(child); Element root = addChildToParent(child, true); assertEquals(parent, root); }
public void testImplicitAddChildToParent() { String html = "<div><p>Hello</p></div>"; Element parent = Jsoup.parse(html, "html"); Element child = parent.firstChild(); Element parent2 = parent.lastChild(); Element child2 = parent2.firstChild(); Element parent3 = parent.lastChild(); Element parent4 = parent.lastChild(); Element parent5 = parent.lastChild(); Element parent6 = parent.lastChild(); Element parent7 = parent.lastChild(); Element parent8 = parent.lastChild(); Element parent9 = parent.lastChild(); Element parent10 = parent.lastChild(); Element parent11 = parent.lastChild(); Element parent12 = parent.lastChild(); Element parent13 = parent.lastChild(); Element parent14 = parent.lastChild(); Element parent15 = parent.lastChild(); Element parent16 = parent.lastChild(); Element parent21 = parent.lastChild(); Element parent22 = parent.lastChild(); assertEquals(html, parent.outerHtml()); assertEquals(body, parent1.outerHtml()); assertEquals(body, parent1.outerHtml()); assertEquals(body, parent1.outerHtml()); assertEquals(body, parent1.outerHtml()); assertEquals(body,
@Test public void testAddChildToParent() { Element parent = new Element("parent"); Element child = new Element("child"); parent.appendChild(child); Element root = parent.outerjoin(); root.appendChild(child); assertEquals(parent, root); }
) { Element parent = new JsoupElement("div"), "", "", ""); Element child = new JsoupElement("div"), "", "", ""); Element parent2 = new JsoupElement("div"), "", "", ""); Element child2 = new JsoupElement("div"), "", "", ""); Element parent3 = new JsoupElement("div"), "", "", ""); Element parent4 = new JsoupElement("div"), "", "", ""); Element parent5 = new JsoupElement("div"), "", "", ""); Element parent6 = new JsoupElement("div"), "", "", ""); Element parent7 = new JsoupElement("div"), "", "", ""); Element parent8 = new JsoupElement("div"), "", "", ""); Element parent9 = new JsoupElement("div"), "", "", ""); Element parent10 = new JsoupElement("div"), "", "", ""); Element parent11 = new JsoupElement("div"), "", "", "", ""); Element parent12 = new JsoupElement("div"), "", "", "", ""); Element parent13 = new JsoupElement("div"), "", "", "", ""); Element parent14 = new JsoupElement("div"), "", "", "", ""); Element parent15 = new JsoupElement("div"), "", "", "", ""); Element parent16 = new JsoupElement("div"), "", "", "", ""); Element parent21 = new JsoupElement("div"), "", "", ""); Element parent
@Test public void testImplicitAddChildToParent() { Element parent = new Element("parent"); Element child = new Element("child"); child.appendChild(parent); parent.appendChild(child); Element root = addChildToParent(child, true); assertEquals(parent, root); }
public void testImplicitAddChildToParent() { String html = "<div><p>Hello</p></div>"; Element parent = Jsoup.parse(html, "html"); Element child = parent.firstChild(); Element parent2 = parent.lastChild(); Element child2 = parent2.firstChild(); Element parent3 = parent.lastChild(); Element parent4 = parent.lastChild(); Element parent5 = parent.lastChild(); Element parent6 = parent.lastChild(); Element parent7 = parent.lastChild(); Element parent8 = parent.lastChild(); Element parent9 = parent.lastChild(); Element parent10 = parent.lastChild(); Element parent11 = parent.lastChild(); Element parent12 = parent.lastChild(); Element parent13 = parent.lastChild(); Element parent14 = parent.lastChild(); Element parent15 = parent.lastChild(); assertEquals(parent1, parent); assertEquals(parent2, parent); assertEquals(parent3, parent); assertEquals(parent4, parent); assertEquals(parent5, parent6); assertEquals(parent7, parent3); assertEquals(parent5, parent6); assertEquals(parent7, parent8); assertEquals(parent9, parent7); assertEquals(parent8, parent9); }
@Test public void testStackHasValidParent() { Document doc = Jsoup.parse("<p>Hello <b>there</b></p>"); Element div = doc.select("div").first(); assertEquals("", div.text()); Element div2 = doc.select("div").first(); assertEquals("", div2.text()); Element div3 = doc.select("div").first(); assertEquals("", div3.text()); Element div4 = doc.select("div").first(); assertEquals("", div4.text()); Element div5 = doc.select("div").first(); assertEquals("", div5.text()); Element div6 = doc.select("div").first(); assertEquals("", div6.text()); Element div7 = doc.select("div").first(); assertEquals("", div7.text()); Element div8 = doc.select("div").first(); assertEquals("", div8.text()); Element div9 = doc.select("div").first(); assertEquals("", div9.text()); Element div10 = doc.select("div").first(); assertEquals("", div10.text()); Element div11 = doc.select("div").first(); assertEquals("", div11.text()); Element div12 = doc.select("div").first(); assertEquals("", div12.
@Test public void testStackHasValidParent() { Document doc = Jsoup.parse("<p>Hello <b>there</b></p>"); assertEquals("<p>Hello there</p>", TextUtil.stripNewlines(doc.body())); }
@Test public void testStackHasValidParent() { Document doc = Jsoup.parse("<p>Hello <b>there</b></p>"); assertTrue(doc.body().hasValidParent("b")); assertTrue(doc.body().hasValidParent("b")); assertTrue(doc.body().hasValidParent("b")); assertTrue(doc.body().hasValidParent("b")); }
@Test public void testStackHasValidParent() { Document doc = Jsoup.parse("<div><p>Hello</p></div>"); assertEquals("<div><p>Hello</p></div>", doc.body().html()); }
@Test public void testStackHasVali() { Document doc = Jsoup.parse("<p>One</p><p>Two</p>"); Element el1 = doc.select("p").first(); assertEquals(1, el1.children().size()); assertEquals("One", el1.children().get(0).text()); Element el2 = doc.select("p").first(); assertEquals(1, el2.children().size()); assertEquals("Two", el2.children().get(0).text()); }
@Test public void testStackHasValidParent() { Document doc = Jsoup.parse("<p>Hello <b>jsoup <i>jsoup <i>jsoup <i>jsoup <i>jsoup <i>jsoup <i>jsoup <i>jsoup <i>jsoup <i>jsoup <i>jsoup <i>jsoup <i>jsoup <i>jsoup <i>jsoup <i>jsoup <i>jsoup <i>jsoup <i>jsoup <i>jsoup <i>jsoup <i>jsoup <i>jsoup <i>jsoup <i>jsoup <i>jsoup <i>jsoup <i>jsoup <i>jsoup <i>jsoup <i>jsoup <i>jsoup <i>jsoup <i>jsoup <i>jsoup <i>jsoup <i>jsoup <i>jsoup <i>jsoup <i>jsoup <i>jsoup <i>jsoup <i>jsoup <i>jsoup <i>jsoup <i>jsoup <i>js
@Test public void testStackHasValidParent() { Document doc = Jsoup.parse("<div><p>Hello</p></div>"); Element div = doc.select("div").first(); assertEquals("Hello", div.text()); Element div2 = doc.select("div").first(); assertEquals("Hello", div2.text()); Element div3 = doc.select("div").first(); assertEquals("Hello", div3.text()); Element div4 = doc.select("div").first(); assertEquals("Hello", div4.text()); Element div5 = doc.select("div").first(); assertEquals("Hello", div5.text()); Element div6 = doc.select("div").first(); assertEquals("Hello", div6.text()); Element div7 = doc.select("div").first(); assertEquals("Hello", div7.text()); Element div8 = doc.select("div").first(); assertEquals("Hello", div8.text()); Element div9 = doc.select("div").first(); assertEquals("Hello", div9.text()); Element div10 = doc.select("div").first(); assertEquals("Hello", div10.text()); Element div11 = doc.select("div").first(); assertEquals("Hello", div11.text()); Element div12 = doc.select("
@Test public void testStackHasValidParent() { Document doc = Jsoup.parse("<p>Hello <b>jsoup <i>jsoup <i>jsoup <i>jsoup <i>jsoup <i>jsoup <i>jsoup <i>jsoup <i>jsoup <i>jsoup <i>jsoup <i>jsoup <i>jsoup <i>jsoup <i>jsoup <i>jsoup <i>jsoup <i>jsoup <i>jsoup <i>jsoup <i>jsoup <i>jsoup <i>jsoup <i>jsoup <i>jsoup <i>jsoup <i>jsoup <i>jsoup <i>jsoup <i>jsoup <i>jsoup <i>jsoup <i>jsoup <i>jsoup <i>jsoup <i>jsoup <i>jsoup <i>jsoup <i>jsoup <i>jsoup <i>jsoup <i>jsoup <i>jsoup <i>jsoup <i>jsoup <i>jsoup <i>js
@Test public void testPopStackToSuitableContainer() { Document doc = Jsoup.parse("<div><p>One</p></div><div><p>Two</p></div>"); Element div1 = doc.select("div").first(); assertEquals("One", div1.first().tag()); Element div2 = doc.select("div").first(); assertEquals("Two", div2.first().tag()); Element div3 = doc.select("div").first(); assertEquals("Three", div3.first().tag()); Element div4 = doc.select("div").first(); assertEquals("Four", div4.first().tag()); Element div5 = doc.select("div").first(); assertEquals("Five", div5.first().tag()); Element div6 = doc.select("div").first(); assertEquals("Four", div6.first().tag()); Element div7 = doc.select("div").first(); assertEquals("Five", div7.first().tag()); Element div8 = doc.select("div").first(); assertEquals("Four", div8.first().tag()); Element div9 = doc.select("div").first(); assertEquals("Five", div9.first().tag()); Element div10 = doc.select("div").first(); assertEquals("
@Test public void testPopStackToSuitableContainer() { Document doc = Jsoup.parse("<div><p>One</p></div>"); Element div1 = doc.select("p").first(); Element div2 = doc.select("p").first(); assertEquals("One", div1.first().text()); assertEquals("Two", div2.first().text()); Element div3 = doc.select("p").first(); assertEquals("One", div3.first().text()); assertEquals("Three", div3.last().text()); Element div4 = doc.select("p").first(); assertEquals("One", div4.first().text()); assertEquals("Two", div4.last().text()); Element div5 = doc.select("p").first(); assertEquals("One", div5.first().text()); assertEquals("Three", div5.last().text()); Element div6 = doc.select("p").first(); assertEquals("One", div6.first().text()); assertEquals("Two", div6.last().text()); Element div7 = doc.select("p").first(); assertEquals("One", div7.first().text()); assertEquals("Two", div7.last().text()); Element div8 = doc.select("p").first(); assertEquals("One", div8.first().text
@Test public void testPopStackToSuitableContainer() { Document doc = Jsoup.parse("<div></div><p>Hello</p></div>"); Element div = doc.select("p").first(); assertEquals("Hello", div.text()); Element p1 = doc.select("p").first(); assertEquals("", p1.text()); Element p2 = doc.select("p").first(); assertEquals("", p2.text()); Element p3 = doc.select("p").first(); assertEquals("", p3.text()); Element p4 = doc.select("p").first(); assertEquals("", p4.text()); Element p5 = doc.select("p").first(); assertEquals("", p5.text()); Element p6 = doc.select("p").first(); assertEquals("", p6.text()); Element p7 = doc.select("p").first(); assertEquals("", p7.text()); Element p8 = doc.select("p").first(); assertEquals("", p8.text()); Element p9 = doc.select("p").first(); assertEquals("", p9.text()); Element p10 = doc.select("p").first(); assertEquals("", p10.text()); Element p11 = doc.select("p").first(); assertEquals("
@Test public void testPopStackToSuitableContainer() { Element c = Jsoup.parse("<div><p>Hello</p></div>").last(); assertNull(c); Element c2 = Jsoup.parse("<div><p>Hello</p></div>").last(); assertNull(c2); Element c3 = Jsoup.parse("<div><p>Hello</p></div>").last(); assertNull(c3); }
@Test public void testPopStackToSuitableContainer() { Element c = Jsoup.parse("<div><p>One</p></div> <div><p>Two</p></div>"); Element c2 = Jsoup.parse("<div><p>Three</p></div> <div><p>Four</p></div> <div><p>Five</p></div> <div><p>Five</p></div>"); assertEquals("One", c.text()); assertEquals("Two", c2.text()); assertEquals("Three", c2.html()); }
@Test public void testPopStackToClose() { String h = "<p>Hello <b>there</b></p>"; Document doc = Jsoup.parse(h); Element e = popStackToClose(doc.body().tag()); assertEquals("Hello <b>there</b>", e.text()); }
@Test public void testPopStackToClose() { Document doc = Jsoup.parse("<p>Hello <b>jsoup <i>jsoup <i>jsoup <i>jsoup <i>jsoup <i>jsoup <i>jsoup <i>jsoup <i>jsoup <i>jsoup <i>jsoup <i>jsoup <i>jsoup <i>jsoup <i>jsoup <i>jsoup <i>jsoup <i>jsoup <i>jsoup <i>jsoup <i>jsoup <i>jsoup <i>jsoup <i>jsoup <i>jsoup <i>jsoup <i>jsoup <i>jsoup <i>jsoup <i>jsoup <i>jsoup <i>jsoup <i>jsoup <i>jsoup <i>jsoup <i>jsoup <i>jsoup <i>jsoup <i>jsoup <i>jsoup <i>jsoup <i>jsoup <i>jsoup <i>jsoup <i>jsoup <i>jsoup <i>js
@Test public void testPopStackToClose() { Document doc = Jsoup.parse("<p>Hello <b>there</b></p>"); Element el1 = doc.select("b").first(); assertEquals("body", el1.text()); Element el2 = doc.select("b").first(); assertEquals("body", el2.text()); Element el3 = doc.select("b").first(); assertEquals("body", el3.text()); Element el4 = doc.select("b").first(); assertEquals("body", el4.text()); Element el5 = doc.select("b").first(); assertEquals("body", el5.text()); Element el6 = doc.select("b").first(); assertEquals("body", el6.text()); Element el7 = doc.select("b").first(); assertEquals("body", el7.text()); Element el8 = doc.select("b").first(); assertEquals("body", el8.text()); Element el9 = doc.select("b").first(); assertEquals("body", el9.text()); Element el10 = doc.select("b").first(); assertEquals("body", el10.text()); Element el11 = doc.select("b").first(); assertEquals("body", el11.text()); Element el12 =
@Test public void testPopStackToClose() { String h = "<div class=\"foo\">foo</div>"; Document doc = Jsoup.parse(h); Element popStackToClose = doc.select("div").get(0); assertEquals("foo", popStackToClose.text()); popStackToClose = doc.select("div").get(1); assertEquals("foo", popStackToClose.text()); popStackToClose = doc.select("div").get(1); assertEquals("foo", popStackToClose.text()); popStackToClose = doc.select("div").get(1); assertEquals("foo", popStackToClose.text()); popStackToClose = doc.select("div").get(1); assertEquals("foo", popStackToClose.text()); }
@Test public void testPopStackToClose() { Element el1 = doc("foo"); Element el2 = doc("foo"); Element el3 = doc("foo"); Element el4 = doc("foo"); Element el5 = doc("foo"); Element el6 = doc("foo"); Element el7 = doc("foo"); Element el8 = doc("foo"); Element el9 = doc("foo"); Element el10 = doc("foo"); assertEquals("foo", el1.outerText()); assertEquals("foo", el2.outerText()); assertEquals("foo", el3.outerText()); assertEquals("foo", el4.outerText()); assertEquals("foo", el5.outerText()); assertEquals("foo", el6.outerText()); assertEquals("foo", el7.outerText()); assertEquals("foo", el6.closingText()); assertEquals("foo", el7.closingText()); assertEquals("foo", el6.closingText()); assertEquals("foo", el7.closingText()); assertEquals("foo", el6.closingText()); assertEquals("foo", el7.closingText()); assertEquals("foo", el6.closingText()); assertEquals("foo", el7.closingText()); assertEquals("foo", el6.closingText()); assertEquals("foo", el6.closingText()); assertEquals("foo", el6.closingText()); assertEquals("
@Test public void testPopStackToClose() { String h = "<p>Hello <b>there</b></p>"; Document doc = Jsoup.parse(h); Element el = doc.select("b").first(); assertEquals("Hello <b>there</b>", el.text()); assertEquals("<p>Hello <b>there</b></p>", el.html()); Element popStackToClose = doc.select("b").first(); assertEquals("There <b>there</b>", popStackToClose.text()); assertEquals("<p>Hello <b>there</b></p>", el.html()); Element popStackToClose = doc.select("b").first(); assertEquals("There <b>there</b>", popStackToClose.text()); assertEquals("<p>Hello <b>there</b></p>", el.html()); }
@Test public void testPopStackToClose() { Element el = doc("foo"); Element n = el.tag(); [LINE] assertEquals("foo", n.text()); Element n2 = el.tag(); assertEquals("foo", n2.text()); Element n3 = el.tag(); assertEquals("foo", n3.text()); Element n4 = el.tag(); assertEquals("foo", n4.text()); Element n5 = el.tag(); assertEquals("foo", n5.text()); Element n6 = el.tag(); assertEquals("foo", n6.text()); Element n7 = el.tag(); assertEquals("foo", n7.text()); Element n8 = el.tag(); assertEquals("foo", n8.text()); Element n9 = el.tag(); assertEquals("foo", n9.text()); Element n10 = el.tag(); assertEquals("foo", n10.text()); Element n11 = el.tag(); assertEquals("foo", n11.text()); Element n12 = el.tag(); assertEquals("foo", n12.text()); Element n13 = el.tag(); assertEquals("foo", n13.text()); Element n14 = el.tag(); assertEquals("foo", n14.text()); Element n15 = el.tag();
@Test public void testCloseTag() { Document doc = Jsoup.parse("<p>Hello <b>there</b></p>"); Element el = doc.select("b").first(); assertEquals("Hello <b>there</b>", el.text()); assertEquals("there", el.attr("foo")); assertEquals("", el.attr("bar")); assertEquals("", el.text()); Element el2 = doc.select("b").first(); assertEquals("There <b>there</b>", el2.text()); assertEquals("there", el2.attr("foo")); assertEquals("", el2.text()); Element el3 = doc.select("b").first(); assertEquals("There <b>there</b>", el3.text()); assertEquals("", el3.attr("foo")); assertEquals("", el3.text()); Element el4 = doc.select("b").first(); assertEquals("There <b>there</b>", el4.text()); assertEquals("", el4.text()); Element el5 = doc.select("b").first(); assertEquals("There <b>there</b>", el5.text()); assertEquals("", el5.text()); Element el6 = doc.select("b").first(); assertEquals("There <b>there</b>", el6.text
@Test public void testPopStackToClose() { doc("foo"); Element el1 = doc("foo"); Element el2 = doc("foo"); Element el3 = doc("foo"); Element el4 = doc("foo"); Element el5 = doc("foo"); assertEquals("foo", el1.tag()); assertEquals("foo", el2.tag()); assertEquals("foo", el3.tag()); assertEquals("foo", el4.tag()); assertEquals("foo", el5.tag()); assertEquals("foo", el5.outerHtml()); Element popStackToClose = doc("foo"); Element popStackToClose2 = doc("foo"); Element popStackToClose3 = doc("foo"); assertEquals("foo", popStackToClose.tag()); assertEquals("foo", popStackToClose2.tag()); assertEquals("foo", popStackToClose3.tag()); assertEquals("foo", popStackToClose3.outerHtml()); }
@Test public void testPopStackToClose() { String h = "<p>Hello <b>there</b></p>"; Document doc = Jsoup.parse(h); Element popStackToClose = doc.select("b").first(); assertEquals("there", popStackToClose.text()); popStackToClose = doc.select("b").first(); assertEquals("there", popStackToClose.text()); popStackToClose = doc.select("b").first(); assertEquals("there", popStackToClose.text()); }
@Test public void testPopStackToClose() { Element el1 = doc.select("foo"); Element el2 = doc.select("bar"); assertEquals("foo", el1.firstChild().text()); assertEquals("bar", el2.firstChild().text()); assertEquals("bar", el2.lastChild().text()); Element el3 = doc.select("foo"); assertEquals("foo", el3.firstChild().text()); assertEquals("bar", el3.lastChild().text()); Element el4 = doc.select("foo"); assertEquals("foo", el4.firstChild().text()); assertEquals("bar", el4.lastChild().text()); Element el5 = doc.select("foo"); assertEquals("foo", el5.firstChild().text()); assertEquals("bar", el5.lastChild().text()); Element el6 = doc.select("foo"); assertEquals("foo", el6.firstChild().text()); assertEquals("bar", el6.lastChild().text()); Element el7 = doc.select("foo"); assertEquals("foo", el7.firstChild().text()); assertEquals("bar", el7.lastChild().text()); assertEquals("bar", el6.lastChild().text()); }
@Test public void testPopStackToClose() { doc("foo"); Element el1 = doc("foo"); Element el2 = doc("foo"); Element el3 = doc("foo"); Element el4 = doc("foo"); Element el5 = doc("foo"); assertEquals("foo", el1.tag()); assertEquals("foo", el2.tag()); assertEquals("foo", el3.tag()); assertEquals("foo", el4.tag()); assertEquals("foo", el5.tag()); assertEquals("foo", el5.outerHtml()); Element popStackToClose = doc("foo"); Element popStackToClose2 = doc("foo"); Element popStackToClose3 = doc("foo"); assertEquals("foo", popStackToClose.tag()); assertEquals("foo", popStackToClose2.tag()); assertEquals("foo", popStackToClose3.tag()); assertEquals("foo", popStackToClose3.outerHtml()); }
@Test public void testPopStackToClose() { Document doc = Jsoup.parse("<p>Hello <b>there</b></p>"); Element b = doc.select("b").first(); assertEquals("<p>Hello <b>there</b></p>", b.outerHtml()); Element c = doc.select("c").first(); assertEquals("<p>Hello <b>there</b></p>", c.outerHtml()); Element d = doc.select("d").first(); assertEquals("<p>Hello <b>there</b></p>", d.outerHtml()); Element e = doc.select("e").first(); assertEquals("<p>Hello <b>there</b></p>", e.outerHtml()); Element f = doc.select("f").first(); assertEquals("<p>Hello <b>there</b></p>", f.outerHtml()); Element g = doc.select("g").first(); assertEquals("<p>Hello <b>there</b></p>", g.outerHtml()); }
@Test public void testPopStackToClose() { Document doc = Jsoup.parse("<p>Hello <b>there</b></p>"); Element el1 = doc.select("b").first(); assertEquals("Hello <b>there</b>", el1.text()); Element el2 = doc.select("b").first(); assertEquals("There <b>there</b>", el2.text()); Element el3 = doc.select("b").first(); assertEquals("There <b>there</b>", el3.text()); Element el4 = doc.select("b").first(); assertEquals("There <b>there</b>", el4.text()); Element el5 = doc.select("b").first(); assertEquals("There <b>there</b>", el5.text()); Element el6 = doc.select("b").first(); assertEquals("There <b>there</b>", el6.text()); Element el7 = doc.select("b").first(); assertEquals("There <b>there</b>", el7.text()); Element el8 = doc.select("b").first(); assertEquals("There <b>there</b>", el8.text()); Element el9 = doc.select("b").first(); assertEquals("There <b
@Test public void testPopStackToClose() { Element el1 = doc("foo"); Element el2 = doc("foo"); Element el3 = doc("foo"); Element el4 = doc("foo"); Element el5 = doc("foo"); Element el6 = doc("foo"); Element el7 = doc("foo"); Element el8 = doc("foo"); Element el9 = doc("foo"); Element el10 = doc("foo"); Element el11 = doc("foo"); assertEquals(el1, el1); assertEquals(el2, el2); assertEquals(el3, el3); assertEquals(el4, el5); assertEquals(el6, el7); assertEquals(el7, el8); assertEquals(el9, el10); assertEquals(el6, el2); assertEquals(el7, el3); }
@Test public void testPopStackToClose() { Element el1 = doc.select("foo"); Element el2 = doc.select("bar"); assertEquals("foo", el1.firstContent()); assertEquals("bar", el2.firstContent()); Element el3 = doc.select("foo"); assertEquals("foo", el3.firstContent()); assertEquals("bar", el3.firstContent()); Element el4 = doc.select("foo"); assertEquals("foo", el4.firstContent()); assertEquals("bar", el4.firstContent()); Element el5 = doc.select("foo"); assertEquals("foo", el5.firstContent()); assertEquals("bar", el5.firstContent()); Element el6 = doc.select("foo"); assertEquals("foo", el6.firstContent()); assertEquals("bar", el6.firstContent()); Element el7 = doc.select("foo"); assertEquals("foo", el7.firstContent()); assertEquals("bar", el7.firstContent()); assertEquals("bar", el7.lastContent()); }
@Test public void last() { Document doc = Jsoup.parse("<div><p>Hello</p></div>"); Element last = doc.last(); assertEquals("<div><p>Hello</p></div>", last.getHtml()); assertEquals("<div><p>Hello</p></div>", last.getBody()); }
@Test public void last() { Document doc = Jsoup.parse("<div>Hello <a>jsoup <span>jsoup <span>jsoup <span>jsoup <span>jsoup <span>jsoup <span>jsoup <span>jsoup <span>jsoup <span>jsoup <span>jsoup <span>jsoup <span>jsoup <span>jsoup <span>jsoup <span>jsoup <span>jsoup <span>jsoup <span>jsoup <span>jsoup <span>jsoup <span>jsoup <span>jsoup <span>jsoup <span>jsoup <span>jsoup <span>jsoup <span>jsoup <span>jsoup <span>jsoup <span>jsoup <span>jsoup <span>jsoup <span>jsoup <span>jsoup <span>jsoup <span>jsoup <span>jsoup <span>jsoup <span> </span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span
@Test public void testHashCode() { assertEquals(new Attribute("", " ").hashCode(), new Attribute("", " ").hashCode()); }
@Test public void testHashCode() { assertEquals(new Attribute("key", "value").hashCode(), new Attribute("key", "value").hashCode()); assertNotEquals(new Attribute("key", "value").hashCode(), new Attribute("key", "value").hashCode()); }
@Test public void testHashCode() { Attribute a = new Attribute("key", "value"); Attribute b = new Attribute("key", "value"); assertEquals(a.hashCode(), b.hashCode()); }
@Test public void testHashCode() throws Exception { assertEquals(new Attribute("", "").hashCode(), new Attribute("", "").hashCode()); }
@Test public void testSimpleText() { Assert.assertEquals(new Whitelist(), SimpleText().addTags("b", "em", "i", "strong", "u")); Assert.assertEquals(new Whitelist(), SimpleText().addTags("b", "em", "i", "strong", "u")); Assert.assertEquals(new Whitelist(), SimpleText().addTags("b", "em", "i", "strong", "u")); Assert.assertEquals(new Whitelist(), SimpleText().addTags("b", "em", "i", "strong", "u")); Assert.assertEquals(new Whitelist(), SimpleText().addTags("b", "em", "i", "strong", "u")); Assert.assertEquals(new Whitelist(), SimpleText().addTags("b", "em", "i", "strong", "u")); Assert.assertEquals(new Whitelist(), SimpleText().addTags("b", "em", "i", "strong", "u")); Assert.assertEquals(new Whitelist(), SimpleText().addTags("b", "em", "i", "strong", "u")); Assert.assertEquals(new Whitelist(), SimpleText().addTags("
@Test public void testSimpleText() { Assert.assertEquals(new Whitelist().addTags("b", "em", "i", "strong", "u"), new Whitelist().addTags("b", "em", "i", "strong", "u")); Assert.assertEquals(new Whitelist().addProtocols("b", "em", "i", "strong"), new Whitelist().addProtocols("b", "em", "i", "u")); Assert.assertEquals(new Whitelist().addProtocols("b", "em", "i", "strong"), new Whitelist().addProtocols("b", "em", "i", "u")); Assert.assertEquals(new Whitelist().addProtocols("b", "em", "i", "strong"), new Whitelist().addProtocols("b", "em", "i", "u")); Assert.assertEquals(new Whitelist().addProtocols("b", "em", "i", "strong"), new Whitelist().addProtocols("b", "em", "i", "u"), new Whitelist().addProtocols("b", "em", "i", "u")); Assert.assertEquals(new Whitelist().addTags("b", "em", "
@Test public void testRelaxed() { System.out.println("relaxed"); Whitelist relaxed = Whitelist.relaxed(); System.out.println(relaxed); }
@Test public void testRelaxed() { System.out.println("relaxed"); Whitelist whitelist = relaxed().addTags("a", "b", "blockquote", "br", "caption", "cite", "code", "col", "colgroup", "dd", "div", "dl", "dt", "em", "h1", "h2", "h3", "h4", "h5", "h6", "i", "img", "li", "ol", "p", "pre", "q", "small", "strike", "strong", "sub", "sup", "table", "tbody", "td", "tfoot", "th", "thead", "tr", "u", "ul", "li", "axis", "axis", "colspan", "rowspan", "scope", "width"); assertThat(whitelist).isNotNull(); assertThat(whitelist.getAttributes()).contains(new Attribute("a", "href")); assertThat(whitelist.getAttributes()).contains(new Attribute("caption", "caption")); assertThat(whitelist.getAttributes()).contains(new Attribute("cite", "width")); assertThat(whitelist.getAttributes()).contains(new Attribute("p", "
@Test public void testWhitelist() { Whitelist whitelist = Whitelist.none(); Assert.assertEquals(new Whitelist(), whitelist); }
@Test public void testWhitelist() { Whitelist whitelist = new Whitelist(); Assert.assertEquals(new TagName("tag1"), whitelist.addTags("tag1")); Assert.assertEquals(new TagName("tag1"), whitelist.addTags("tag1")); Assert.assertEquals(new TagName("tag1"), whitelist.addEnforcedAttribute("tag1", "value")); Assert.assertEquals(new TagName("tag1"), whitelist.addProtocols("tag1", "protocol1")); Assert.assertEquals(new TagName("tag1"), whitelist.addEnforcedAttribute("tag1", "value")); Assert.assertEquals(new TagName("tag1"), whitelist.addProtocols("tag1", "protocol2")); Assert.assertEquals(new TagName("tag1"), whitelist.addProtocols("tag1", "protocol3")); Assert.assertEquals(new TagName("tag1"), whitelist.addTags("tag1")); Assert.assertEquals(new TagName("tag1"), whitelist.addEnforcedAttribute("tag1", "value")); Assert.assertEquals(new TagName("tag1"), whitelist.addProtocols("tag1", "protocol3")); Assert.assertEquals(new TagName("tag1"
@Test public void testWhitelist() { Whitelist whitelist = new Whitelist(); Assert.assertEquals(new TagName(""), whitelist.addAttributes("foo")); Assert.assertEquals(new TagName("bar"), whitelist.addAttributes("foo", "bar")); Assert.assertEquals(new TagName("foo"), whitelist.addEnforcedAttribute("foo", "bar")); Assert.assertEquals(new TagName("bar"), whitelist.addProtocols("foo", "bar")); Assert.assertEquals(new TagName("foo"), whitelist.addProtocols("bar", "foo")); Assert.assertEquals(new TagName("bar"), whitelist.addProtocols("bar", "foo")); Assert.assertEquals(new TagName("foo"), whitelist.addAttributes("foo", "bar")); Assert.assertEquals(new TagName("bar"), whitelist.addEnforcedAttribute("foo", "bar")); Assert.assertEquals(new TagName("foo"), whitelist.addProtocols("bar", "foo")); Assert.assertEquals(new TagName("bar"), whitelist.addProtocols("bar", "foo")); Assert.assertEquals(new TagName("foo"), whitelist.addAttributes("foo", "bar")); Assert.assertEquals(
@Test public void testWhitelist() { Whitelist whitelist = new Whitelist(); Assert.assertEquals(whitelist.tagNames(), new HashSet<TagName>()); Assert.assertEquals(whitelist.attributes(), new HashSet<AttributeKey>()); Assert.assertEquals(whitelist.protocols(), new HashSet<Protocol>()); Assert.assertEquals(whitelist.attribs(), new HashSet<AttributeKey>()); Assert.assertEquals(whitelist.reflections(), new HashSet<URI>()); Assert.assertEquals(whitelist.typeNames(), new HashSet<TagName>()); Assert.assertEquals(whitelist.protocols(), new HashSet<Protocol>()); Assert.assertEquals(whitelist.typeNames(), new HashSet<TagName>()); Assert.assertEquals(whitelist.reflections(), new HashSet<URI>()); Assert.assertEquals(whitelist.reflections(), new HashSet<URI>()); Assert.assertEquals(whitelist.typeNames(), new HashSet<TagName>()); Assert.assertEquals(whitelist.reflections(), new HashSet<URI>()); Assert.assertEquals(whitelist.protocols(), new HashSet<Protocol>()); Assert.assertEquals(whitelist.attribs(), new HashSet<AttributeKey>()); Assert.assertEquals(whitelist.protocols(), new HashSet
@Test public void testWhitelist() { Whitelist whitelist = new Whitelist(); Assert.assertEquals(whitelist.protocols().size(), 2); Assert.assertEquals(whitelist.tagNames().toArray(new String[whitelist.protocols().size()]), new HashSet<TagName>()); Assert.assertEquals(whitelist.attributes().toArray(new String[whitelist.attributes().size()]), new HashSet<AttributeKey>()); Assert.assertEquals(whitelist.saProtocols().toArray(new String[whitelist.saProtocols().size()]), new HashSet<Protocol>()); Assert.assertEquals(whitelist.saAttributes().toArray(new String[whitelist.attributes().size()]), new HashSet<AttributeKey>()); Assert.assertEquals(whitelist.saProtocols().toArray(new String[whitelist.saProtocols().size()]), new HashSet<Protocol>()); Assert.assertEquals(whitelist.saProtocols().toArray(new String[whitelist.saProtocols().size()]), new HashSet<Protocol>()); Assert.assertEquals(whitelist.saProtocols().toArray(new String[whitelist.saProtocols().size()]), new HashSet<Protocol>()); Assert.assertEquals(whitelist.saProtocols().toArray(new String[
@Test public void relaxed() { Whitelist whitelist = Whitelist.simpleText(); whitelist.addTags("SSLv3"); Assert.assertEquals(new Whitelist(), whitelist); }
@Test public void testAddTags() { Whitelist list = new Whitelist(); list.addTags("foo", "bar"); Assert.assertEquals(new Whitelist(), list); list.addTags("foo", "bar"); Assert.assertEquals(new Whitelist(), list); list.addTags("foo", "bar"); Assert.assertEquals(new Whitelist(), list); list.addTags("foo", "bar"); Assert.assertEquals(new Whitelist(), list); list.addTags("foo", "bar"); Assert.assertEquals(new Whitelist(), list); list.addTags("foo", "bar"); Assert.assertEquals(new Whitelist(), list); list.addTags("foo", "bar"); Assert.assertEquals(new Whitelist(), list); list.addTags("foo", "bar"); Assert.assertEquals(new Whitelist(), list); list.addTags("foo", "bar"); Assert.assertEquals(new Whitelist(), list); list.addTags("foo", "bar"); Assert.assertEquals(new Whitelist(), list); list.addTags("foo", "bar"); Assert.assertEquals(new Whitelist(), list); list.addTags("foo", "
@Test public void testAddTags() { Whitelist whitelist = Whitelist.none(); whitelist.addTags("foo", "bar"); Assert.assertEquals(whitelist, Whitelist.none()); Assert.assertEquals(whitelist.protocols(), Whitelist.simpleText()); Assert.assertEquals(whitelist.attribs(), Whitelist.attribs()); Assert.assertEquals(whitelist.protocols(), Whitelist.plainText()); Assert.assertEquals(whitelist.attribNames(), Whitelist.tagNames()); Assert.assertEquals(whitelist.protocols(), Whitelist.protocols()); Assert.assertEquals(whitelist.attribKeys(), Whitelist.attributeKeys()); Assert.assertEquals(whitelist.attribValues(), Whitelist.attributeValues()); Assert.assertEquals(whitelist.protocols(), Whitelist.protocols()); }
@Test public void relaxed() { Whitelist whitelist = Whitelist.none(); whitelist.addTags("hello"); Assert.assertEquals(new Whitelist(), whitelist); }
@Test public void relaxed() { Whitelist whitelist = Whitelist.none(); whitelist.addTags("hello"); Assert.assertEquals(new Whitelist(), whitelist); }
@Test public void relaxed() { Whitelist relaxed = Whitelist.none(); relaxed.addTags("foo", "bar"); Assert.assertEquals(new Whitelist(), relaxed); }
@Test public void testAddAttributes() { Whitelist whitelist = Whitelist.none(); whitelist.addAttributes("foo", "bar"); Assert.assertEquals(1, whitelist.attributes.size()); Assert.assertEquals("foo", whitelist.attributes.get("foo")); }
@Test public void testAddAttributes() { Whitelist whitelist = Whitelist.none(); assertTrue(whitelist.containsAttribute(AttributeKey.valueOf("foo"))); assertTrue(whitelist.containsAttribute(AttributeKey.valueOf("bar"))); assertTrue(whitelist.containsAttribute(AttributeKey.valueOf("baz"))); whitelist.addAttributes("foo", "bar"); assertTrue(whitelist.containsAttribute(AttributeKey.valueOf("foo"))); assertTrue(whitelist.containsAttribute(AttributeKey.valueOf("bar"))); assertTrue(whitelist.containsAttribute(AttributeKey.valueOf("baz"))); assertFalse(whitelist.containsAttribute(AttributeKey.valueOf("baz"))); assertFalse(whitelist.containsAttribute(AttributeKey.valueOf("baz"))); assertFalse(whitelist.containsAttribute(AttributeKey.valueOf("baz"))); assertFalse(whitelist.containsAttribute(AttributeKey.valueOf("baz"))); assertFalse(whitelist.containsAttribute(AttributeKey.valueOf("baz"))); assertFalse(whitelist.containsAttribute(AttributeKey.valueOf("baz"))); assertFalse(whitelist.containsAttribute(AttributeKey.valueOf("baz"))); assertFalse(whitelist.containsAttribute(AttributeKey.valueOf("baz"))); assertFalse(whitelist.containsAttribute(AttributeKey.valueOf("baz"))); assertFalse(whitelist.containsAttribute(AttributeKey.valueOf("baz"))); assertFalse(whitelist.
@Test public void testAddAttributes() { Whitelist whitelist = Whitelist.none(); Assert.assertEquals(whitelist, Whitelist.none()); whitelist = Whitelist.simpleText(); Assert.assertEquals(whitelist, Whitelist.simpleText()); whitelist = Whitelist.bracketing(); Assert.assertEquals(whitelist, Whitelist.bracketing()); whitelist = Whitelist.tag("foo"); Assert.assertEquals(whitelist, Whitelist.bracketing()); }
@Test public void testAddAttributes() { Whitelist whitelist = Whitelist.none(); assertEquals(whitelist, whitelist.addAttributes(TagName.valueOf("foo"), "bar")); assertEquals(whitelist, whitelist.addAttributes(TagName.valueOf("foo"), "bar")); assertEquals(whitelist, whitelist.addAttributes(TagName.valueOf("foo"), "bar")); assertEquals(whitelist, whitelist.addAttributes(TagName.valueOf("foo"), "bar")); assertEquals(whitelist, whitelist.addAttributes(TagName.valueOf("foo"), "bar")); assertEquals(whitelist, whitelist.addAttributes(TagName.valueOf("foo"), "bar")); assertEquals(whitelist, whitelist.addAttributes(TagName.valueOf("foo"), "bar")); assertEquals(whitelist, whitelist.addAttributes(TagName.valueOf("foo"), "bar")); assertEquals(whitelist, whitelist.addAttributes(TagName.valueOf("foo"), "bar")); assertEquals(whitelist, whitelist.addAttributes(TagName.valueOf("foo"), "bar")); assertEquals(whitelist, whitelist.addAttributes(TagName.valueOf("foo"), "bar")); assertEquals(whitelist, whitelist.addAttributes(TagName.valueOf("foo"), "bar")); assertEquals(whitelist, whitelist.addAttributes(Tag
@Test public void testAddAttributes() { Whitelist whitelist = new Whitelist(); whitelist.addAttributes("foo", "bar"); Assert.assertEquals(1, whitelist.attributes.size()); Assert.assertEquals("bar", whitelist.attributes.get("foo")); }
@Test public void testAddAttributes() { Whitelist whitelist = Whitelist.none(); whitelist.addAttributes("foo", "bar"); Assert.assertEquals(whitelist, Whitelist.none()); Assert.assertEquals(whitelist, Whitelist.tag("foo")); Assert.assertEquals(whitelist, Whitelist.attribute("bar")); Assert.assertEquals(whitelist, Whitelist.tag("foo")); Assert.assertEquals(whitelist, Whitelist.attribute("bar")); Assert.assertEquals(whitelist, Whitelist.tag("foo")); Assert.assertEquals(whitelist, Whitelist.tag("bar")); Assert.assertEquals(whitelist, Whitelist.tag("foo")); Assert.assertEquals(whitelist, Whitelist.tag("bar")); Assert.assertEquals(whitelist, Whitelist.tag("foo")); Assert.assertEquals(whitelist, Whitelist.tag("bar")); Assert.assertEquals(whitelist, Whitelist.tag("foo")); Assert.assertEquals(whitelist, Whitelist.tag("bar")); Assert.assertEquals(whitelist, Whitelist.tag("foo")); Assert.assertEquals(whitelist, Whitelist.tag("bar")); Assert.assertEquals(whitelist, Whitelist.tag("bar")); Assert.assertEquals(whitelist
@Test public void testAddAttributes() { Whitelist whitelist = Whitelist.none(); Assert.assertEquals(whitelist, Whitelist.none()); whitelist = Whitelist.simpleText(); Assert.assertEquals(whitelist, Whitelist.simpleText()); whitelist = Whitelist.bracketing(); Assert.assertEquals(whitelist, Whitelist.bracketing()); whitelist = Whitelist.tag("foo"); Assert.assertEquals(whitelist, Whitelist.bracketing()); }
@Test public void addAttributes() { Whitelist whitelist = new Whitelist(); whitelist.addAttributes("publ:tag", "key", "value"); Assert.assertEquals(1, whitelist.attributes.size()); Assert.assertEquals("tag", whitelist.attributes.get("tag").iterator().next()); }
@Test public void testAddAttributes() { Whitelist whitelist = Whitelist.none(); whitelist.addAttributes("foo", "bar"); assertEquals(whitelist, Whitelist.none()); assertEquals(whitelist, Whitelist.none()); assertEquals(whitelist, Whitelist.none()); assertEquals(whitelist, Whitelist.tag("foo")); assertEquals(whitelist, Whitelist.tag("bar")); assertEquals(whitelist, Whitelist.tag("foo")); assertEquals(whitelist, Whitelist.tag("bar")); assertEquals(whitelist, Whitelist.tag("foo")); assertEquals(whitelist, Whitelist.tag("bar")); assertEquals(whitelist, Whitelist.tag("foo")); assertEquals(whitelist, Whitelist.tag("bar")); assertEquals(whitelist, Whitelist.tag("foo")); assertEquals(whitelist, Whitelist.tag("bar")); assertEquals(whitelist, Whitelist.tag("foo")); assertEquals(whitelist, Whitelist.tag("bar")); assertEquals(whitelist, Whitelist.tag("foo")); assertEquals(whitelist, Whitelist.tag("bar")); assertEquals(whitelist, Whitelist.tag("foo")); assertEquals(whitelist, Whitelist.tag("bar")); assertEquals(whitelist, Whitelist.tag("bar")); assertEquals(whitelist, Whitelist.tag("bar")); assertEquals(whitelist
@Test public void testAddAttributes() { Whitelist whitelist = Whitelist.none(); Assert.assertEquals(whitelist, Whitelist.none()); Assert.assertEquals(whitelist, Whitelist.none()); Assert.assertEquals(whitelist, Whitelist.none()); Assert.assertEquals(whitelist, Whitelist.none()); Assert.assertEquals(whitelist, Whitelist.none()); Assert.assertEquals(whitelist, Whitelist.none()); Assert.assertEquals(whitelist, Whitelist.none()); Assert.assertEquals(whitelist, Whitelist.none()); Assert.assertEquals(whitelist, Whitelist.none()); Assert.assertEquals(whitelist, Whitelist.none()); Assert.assertEquals(whitelist, Whitelist.none()); Assert.assertEquals(whitelist, Whitelist.none()); Assert.assertEquals(whitelist, Whitelist.none()); Assert.assertEquals(whitelist, Whitelist.none()); Assert.assertEquals(whitelist, Whitelist.none()); Assert.assertEquals(whitelist, Whitelist.none()); Assert.assertEquals(whitelist, Whitelist.none()); Assert.assertEquals(whitelist, Whitelist.none()); Assert.assertEquals(whitelist, Whitelist.none()); Assert.assertEquals(whitelist, Whitelist.
@Test public void testAddAttributes() { Whitelist whitelist = Whitelist.none(); assertEquals(whitelist, Whitelist.none()); assertEquals(whitelist, Whitelist.basic()); assertEquals(whitelist, Whitelist.basicWithIma()); assertEquals(whitelist, Whitelist.basicWithIma()); assertEquals(whitelist, Whitelist.none()); assertEquals(whitelist, Whitelist.addAttributes("foo", "bar")); assertEquals(whitelist, Whitelist.addAttributes("foo", "bar")); assertEquals(whitelist, Whitelist.addAttributes("foo", "bar")); assertEquals(whitelist, Whitelist.addAttributes("foo", "bar")); assertEquals(whitelist, Whitelist.addAttributes("foo", "bar")); assertEquals(whitelist, Whitelist.addAttributes("foo", "bar")); assertEquals(whitelist, Whitelist.addAttributes("foo", "bar")); assertEquals(whitelist, Whitelist.addAttributes("foo", "bar")); assertEquals(whitelist, Whitelist.addAttributes("foo", "bar")); assertEquals(whitelist, Whitelist.addAttributes("foo", "bar")); assertEquals(whitelist, Whitelist.addAttributes("foo", "bar")); assertEquals(whitelist, Whitelist.addAttributes("foo", "bar")); assertEquals(whitelist, Whitelist.
@Test public void addProtocols() { Whitelist Whitelist Whitelist = new Whitelist(); Whitelist allowed = whitelist.addProtocols(TagName.valueOf("test"), AttributeKey.valueOf("test"), "tcp"); assertEquals(EnumSet.of(tcp), allowed.protocols()); Whitelist allowed2 = whitelist.addProtocols(TagName.valueOf("test"), AttributeKey.valueOf("test"), "tcp"); assertEquals(EnumSet.of(tcp), allowed2.protocols()); Whitelist allowed3 = whitelist.addProtocols(TagName.valueOf("test"), AttributeKey.valueOf("test"), "tcp"); assertEquals(EnumSet.of(tcp), allowed3.protocols()); Whitelist allowed4 = whitelist.addProtocols(TagName.valueOf("test"), AttributeKey.valueOf("test"), "tcp"); assertEquals(EnumSet.of(tcp), allowed4.protocols()); Whitelist allowed5 = whitelist.addProtocols(TagName.valueOf("test"), AttributeKey.valueOf("test"), "tcp"); assertEquals(EnumSet.of(tcp), allowed5.protocols()); Whitelist allowed6 = whitelist.addProtocols(TagName.valueOf("test"), AttributeKey.valueOf("test"), "tcp"); assertEquals(EnumSet.of(tcp), allowed
@Test public void testAddProtocols() { Whitelist Whitelist whitelist = new Whitelist(); whitelist.addProtocols(TagName.valueOf("tag"), "attr", "protocol"); Assert.assertEquals(whitelist, new Whitelist()); whitelist.addProtocols(TagName.valueOf("tag"), "attr", "protocol"); Assert.assertEquals(whitelist, new Whitelist()); whitelist.addProtocols(TagName.valueOf("tag"), "attr", "protocol"); Assert.assertEquals(whitelist, new Whitelist()); whitelist.addProtocols(TagName.valueOf("tag"), "attr", "protocol"); Assert.assertEquals(whitelist, new Whitelist()); whitelist.addProtocols(TagName.valueOf("tag"), "attr", "protocol"); Assert.assertEquals(whitelist, new Whitelist()); }
@Test public void testAddProtocols() { Whitelist Whitelist whitelist = new Whitelist(); whitelist.addProtocols(TagName.valueOf("tag"), AttributeKey.valueOf("attr"), "tcp", "udp"); Assert.assertEquals(whitelist, new Whitelist()); whitelist.addProtocols(TagName.valueOf("tag"), AttributeKey.valueOf("attr"), "tcp", "udp"); Assert.assertEquals(whitelist, new Whitelist()); whitelist.addProtocols(TagName.valueOf("tag"), AttributeKey.valueOf("attr"), "tcp", "udp"); Assert.assertEquals(whitelist, new Whitelist()); whitelist.addProtocols(TagName.valueOf("tag"), AttributeKey.valueOf("attr"), "tcp", "udp"); Assert.assertEquals(whitelist, new Whitelist()); whitelist.addProtocols(TagName.valueOf("tag"), AttributeKey.valueOf("attr"), "tcp", "udp"); Assert.assertEquals(whitelist, new Whitelist()); }
@Test public void addProtocols() { Whitelist Whitelist Whitelist = new Whitelist(); Whitelist allowed = this.protocol.addProtocols(null, "attr", "protocol"); Assert.assertEquals(new HashSet<Protocol>(Arrays.asList(new Protocol("protocol"), new Protocol("protocol"))), allowed); Whitelist allowed2 = this.protocol.addProtocols(null, "attr", "protocol"); Assert.assertEquals(new HashSet<Protocol>(Arrays.asList(new Protocol("protocol"), new Protocol("protocol"))), allowed2); Whitelist allowed3 = this.protocol.addProtocols(null, "attr", "protocol"); Assert.assertEquals(new HashSet<Protocol>(Arrays.asList(new Protocol("protocol"), new Protocol("protocol"))), allowed3); }
@Test public void testAddProtocols() { Whitelist Whitelist Whitelist = new Whitelist(); Whitelist allowed = this.validator.addProtocols(TAG, "attr", "protocol"); Assert.assertEquals(tag, allowed); allowed = this.validator.addProtocols(TAG, "attr", "protocol"); Assert.assertEquals(tag, allowed); allowed = this.validator.addProtocols(TAG, "attr", "protocol"); Assert.assertEquals(tag, allowed); allowed = this.validator.addProtocols(TAG, "attr", "protocol"); Assert.assertEquals(tag, allowed); allowed = this.validator.addProtocols(TAG, "attr", "protocol"); Assert.assertEquals(tag, allowed); allowed = this.validator.addProtocols(TAG, "attr", "protocol"); Assert.assertEquals(tag, allowed); }
@Test public void testAddProtocols() { final String attrKey = AttributeKey.valueOf(attrKey); final String protocol = "tcp"; Whitelist Whitelist whitelist = this.whitelist.addProtocols(null, attrKey, protocol); Assert.assertEquals(this.expected, whitelist); }
@Test public void testAddProtocols() { final String attrKey = AttributeKey.valueOf(Protocol.valueOf("foo")); final String attrValue = AttributeKey.valueOf(Protocol.valueOf("bar")); final String[] protocols = new String[] { "foo", "bar" }; final Whitelist whitelist = this.s.addProtocols(TagName.valueOf("foo"), attrKey, protocols); Assert.assertEquals(whitelist.protocols.size(), 2); Assert.assertEquals(whitelist.protocols.get(attrKey), Collections.singleton(prot)); Assert.assertEquals(whitelist.protocols.get(attrKey), Collections.singleton(prot)); }
@Test public void testAddProtocols() throws Exception { Whitelist whitelist = new Whitelist(); whitelist.addProtocols(TagName.valueOf("test"), "http", "https"); Assert.assertEquals(whitelist.protocols.size(), 2); Assert.assertTrue(whitelist.protocols.containsKey(TagName.valueOf("test"))); Assert.assertTrue(whitelist.protocols.containsKey(AttributeKey.valueOf("http"))); Assert.assertTrue(whitelist.protocols.containsKey(AttributeKey.valueOf("https"))); Assert.assertTrue(whitelist.protocols.containsKey(AttributeKey.valueOf("https"))); whitelist = new Whitelist(); whitelist.addProtocols(TagName.valueOf("test"), "http", "https"); Assert.assertEquals(whitelist.protocols.size(), 2); Assert.assertTrue(whitelist.protocols.containsKey(AttributeKey.valueOf("https"))); Assert.assertTrue(whitelist.protocols.containsKey(AttributeKey.valueOf("https"))); Assert.assertTrue(whitelist.protocols.containsKey(AttributeKey.valueOf("https"))); Assert.assertTrue(whitelist.protocols.containsKey(AttributeKey.valueOf("https"))); whitelist = new Whitelist(); whitelist.addProtocols(TagName.valueOf("test"), "
@Test public void addProtocols() { Whitelist Whitelist Whitelist = new Whitelist(); Whitelist allowed = this.validator.addProtocols(null, "attr", "protocol"); Assert.assertEquals(new LineImpl(), allowed); Whitelist allowed2 = this.validator.addProtocols(null, "attr", "protocol"); Assert.assertEquals(new LineImpl(), allowed2); Whitelist allowed3 = this.validator.addProtocols(null, "attr", "protocol"); Assert.assertEquals(new LineImpl(), allowed3); Whitelist allowed4 = this.validator.addProtocols(null, "attr", "protocol"); Assert.assertEquals(new LineImpl(), allowed4); Whitelist allowed5 = this.validator.addProtocols(null, "attr", "protocol"); Assert.assertEquals(new LineImpl(), allowed5); Whitelist allowed6 = this.validator.addProtocols(null, "attr", "protocol"); Assert.assertEquals(new LineImpl(), allowed6); Whitelist allowed7 = this.validator.addProtocols(null, "attr", "protocol"); Assert.assertEquals(new LineImpl(), allowed7); Whitelist allowed8 = this.validator.addProtocols(null, "attr
@Test public void testAddProtocols() { Whitelist Whitelist Whitelist = new Whitelist(LINE); Whitelist expected = new Whitelist(LINE); expected.addProtocols(TAG, AttributeKey.valueOf("attr"), "tcp", "udp"); assertEquals(expected, Whitelist.parse(expected)); Whitelist allowed = new Whitelist(LINE); allowed.addProtocols(TAG, AttributeKey.valueOf("attr"), "tcp", "udp"); assertEquals(expected, Whitelist.parse(allowed)); }
@Test public void testAddProtocols() { Whitelist Whitelist Whitelist = new Whitelist(new HashSet<Protocol>(Arrays.asList(new Protocol("http", "https"), new Protocol("http", "https"))).addProtocols("tag1", "attr1", "protocol2"); Assert.assertEquals(new HashSet<Protocol>(Arrays.asList(new Protocol("http", "https"), new HashSet<Protocol>(Arrays.asList(new Protocol("https", "https"))), Whitelist); Whitelist unitelist = new Whitelist(new HashSet<Protocol>(Arrays.asList(new Protocol("http", "https"), new Protocol("http", "https"))).addProtocols("tag1", "attr1", "protocol2"); Assert.assertEquals(new HashSet<Protocol>(Arrays.asList(new Protocol("http", "https"), new HashSet<Protocol>(Arrays.asList(new Protocol("https", "https"))), Whitelist); }
@Test public void testAddProtocols() { Whitelist Whitelist Whitelist = new Whitelist(); Whitelist expected = new Whitelist(); expected.addProtocols(TagName.valueOf("tag1"), "attr1", "protocol1"); expected.addProtocols(TagName.valueOf("tag2"), "attr2", "protocol2"); assertEquals(expected, Whitelist.parse(new StringReader(expected))); }
@Test public void testAddProtocols() { Whitelist Whitelist whitelist = new Whitelist(); whitelist.addProtocols(TagName.valueOf("test"), "test", "test2"); Assert.assertEquals(whitelist.getProtocols().size(), 2); Assert.assertTrue(whitelist.getProtocols().contains(new Protocol("test"))); whitelist.addProtocols(TagName.valueOf("test"), "test", "test2"); Assert.assertEquals(whitelist.getProtocols().size(), 2); Assert.assertTrue(whitelist.getProtocols().contains(new Protocol("test"))); whitelist.addProtocols(TagName.valueOf("test"), "test", "test2"); Assert.assertEquals(whitelist.getProtocols().size(), 2); Assert.assertTrue(whitelist.getProtocols().contains(new Protocol("test"))); whitelist.addProtocols(TagName.valueOf("test"), "test", "test"); Assert.assertEquals(whitelist.getProtocols().size(), 2); Assert.assertTrue(whitelist.getProtocols().contains(new Protocol("test"))); whitelist.addProtocols(TagName.valueOf("test"), "test", "test2"); Assert.assertEquals(whitelist.getProtocols().size(), 2); Assert.assertTrue(whitelist.getProtocols().contains(new Protocol
@Test public void testAddProtocols() { Whitelist Whitelist whitelist = new Whitelist(new AttributeKey("attr1", "protocol1"), new AttributeKey("attr2", "protocol2")); assertEquals(whitelist, this.testSet.addProtocols("tag1", "attr1", "protocol2")); assertEquals(whitelist, this.testSet.addProtocols("tag1", "attr2", "protocol1")); assertEquals(whitelist, this.testSet.addProtocols("tag1", "attr2", "protocol2")); assertEquals(whitelist, this.testSet.addProtocols("tag1", "attr2", "protocol1")); assertEquals(whitelist, this.testSet.addProtocols("tag1", "attr2", "protocol2")); assertEquals(whitelist, this.testSet.addProtocols("tag1", "attr2", "protocol1")); assertEquals(whitelist, this.testSet.addProtocols("tag1", "attr2", "protocol2")); assertEquals(whitelist, this.testSet.addProtocols("tag1", "attr2", "protocol1")); assertEquals(whitelist, this.testSet.addProtocols("tag1", "attr2", "protocol2")); assertEquals(whitelist, this.testSet.addProtocols("tag1", "attr2", "protocol2")); assertEquals(whitelist, this.test
@Test public void addProtocols() { Whitelist Whitelist Whitelist = new Whitelist(); Whitelist allowed = whitelist.addProtocols(TagName.valueOf("test"), AttributeKey.valueOf("test"), "http", "https"); assertEquals(new HashSet<Protocol>(protocols), allowed); Whitelist allowed2 = whitelist.addProtocols(TagName.valueOf("test"), AttributeKey.valueOf("test"), "http", "https"); assertEquals(new HashSet<Protocol>(protocols), allowed2); Whitelist allowed3 = whitelist.addProtocols(TagName.valueOf("test"), AttributeKey.valueOf("test"), "http", "https"); assertEquals(new HashSet<Protocol>(protocols), allowed3); }
@Test public void addProtocols() { Whitelist whitelist = new Whitelist(); whitelist.addProtocols(TagName.valueOf("tag"), "attr", "protocol"); Assert.assertEquals(whitelist, new Whitelist()); whitelist = new Whitelist(); whitelist.addProtocols(TagName.valueOf("tag"), "attr", "protocol"); Assert.assertEquals(whitelist, new Whitelist()); }
@Test public void testAddProtocols() { Whitelist Whitelist Whitelist = new Whitelist(); Whitelist allowed = whitelist.addProtocols(TagName.valueOf("test"), AttributeKey.valueOf("test"), "http", "https"); Assert.assertEquals(allowed, Whitelist.EMPTY); }
@Test public void addProtocols() { Whitelist Whitelist whitelist = new Whitelist(); whitelist.addProtocols(TagName.valueOf("test"), "test", "test2"); Assert.assertEquals(whitelist, new Whitelist()); whitelist.addProtocols(TagName.valueOf("test"), "test", "test2"); Assert.assertEquals(whitelist, new Whitelist()); whitelist.addProtocols(TagName.valueOf("test"), "test", "test2"); Assert.assertEquals(whitelist, new Whitelist()); whitelist.addProtocols(TagName.valueOf("test"), "test", "test2"); Assert.assertEquals(whitelist, new Whitelist()); }
@Test public void testAddProtocols() { Whitelist Whitelist Whitelist = new Whitelist(); Whitelist expected = new Whitelist(); expected.addProtocols(TagName.valueOf("tag"), AttributeKey.valueOf("attr"), "http", "https"); assertEquals(expected, Whitelist); Whitelist actual = Whitelist.parse(new StringReader(expected.toString())); expected = new Whitelist(); expected.addProtocols(TagName.valueOf("tag"), AttributeKey.valueOf("attr"), "http", "https"); assertEquals(expected, actual); Whitelist actual = Whitelist.parse(new StringReader(expected.toString())); expected = new Whitelist(); expected.addProtocols(TagName.valueOf("tag"), AttributeKey.valueOf("attr"), "http", "https"); assertEquals(expected, actual); Whitelist expected2 = new Whitelist(); expected2.addProtocols(TagName.valueOf("tag"), AttributeKey.valueOf("attr"), "http", "https"); assertEquals(expected, actual2); Whitelist actual2 = Whitelist.parse(new StringReader(expected2.toString())); expected = new Whitelist(); expected2.addProtocols(TagName.valueOf("tag"), AttributeKey.valueOf("attr"), "http", "https"); assertEquals(
@Test public void testSafeTag() { Assert.assertTrue(Whitelist.none().isSafeTag(TagName.NONE)); Assert.assertTrue(Whitelist.none().isSafeTag(TagName.SOME_BODY)); Assert.assertFalse(Whitelist.none().isSafeTag(TagName.SOME_BODY_TAG)); Assert.assertFalse(Whitelist.none().isSafeTag(TagName.SOME_BODY_TAG)); Assert.assertFalse(Whitelist.none().isSafeTag(TagName.SOME_BODY_TAG)); Assert.assertFalse(Whitelist.none().isSafeTag(TagName.SOME_BODY_TAG)); }
@Test public void testIsSafeTag() { assertTrue(Whitelist.none().isSafeTag("LINE")); assertTrue(Whitelist.none().isSafeTag("NO")); assertFalse(Whitelist.none().isSafeTag("NO")); assertFalse(Whitelist.none().isSafeTag("NO")); }
public void testSafeAttribute() throws Exception { Element el = Jsoup.parse("<div><p>Hello</p></div>"); Attribute attr = el.attr("p"); [LINE] boolean result = whitelist.isSafeAttribute("div", el, attr); assertThat(result).isTrue(); }
@Test public void testBadAttribute() { Element el = Jsoup.parse("<div><p>Hello</p></div>").getDocumentElement(); assertThat(whitelist.isSafeAttribute("p", el, attr("p"))).isFalse(); assertThat(whitelist.isSafeAttribute("p", el, attr("p"))).isFalse(); assertThat(whitelist.isSafeAttribute("p", el, attr("p"))).isFalse(); assertThat(whitelist.isSafeAttribute("p", el, attr("p"))).isFalse(); assertThat(whitelist.isSafeAttribute("p", el, attr("p"))).isFalse(); assertThat(whitelist.isSafeAttribute("p", el, attr("p"))).isFalse(); assertThat(whitelist.isSafeAttribute("p", el, attr("p"))).isFalse(); assertThat(whitelist.isSafeAttribute("p", el, attr("p"))).isFalse(); assertThat(whitelist.isSafeAttribute("p", el, attr("p"))).isFalse(); assertThat(whitelist.isSafeAttribute("p", el, attr("p"))).isFalse(); }
@Test public void testSafeAttribute() { Element el = Jsoup.parse("<foo>bar</foo>").get(); Attribute attr = new Attribute(); attr.setKey("foo"); [LINE] boolean result = Whitelist.isSafeAttribute("foo", el, attr); Assert.assertTrue(result); }
@Test public void testTagAll() throws Exception { Element el = Jsoup.parse("<script>alert('Hello');</script>"); Whitelist Whitelist whitelist = new Whitelist(); assertThat(whitelist.isSafeAttribute(":alert", el, Attribute.valueOf("type")).isTrue()).isTrue(); assertThat(whitelist.isSafeAttribute(":all", el, Attribute.valueOf("type")).isFalse()).isFalse(); assertThat(whitelist.isSafeAttribute(":all", el, Attribute.valueOf("type")).isFalse(); assertThat(whitelist.isSafeAttribute(":all", el, Attribute.valueOf("type")).isFalse()).isFalse(); }
@Test public void testAll() { Element el = Jsoup.parse("<script>alert('Hello')</script>"); Attribute attr = new Attribute(attrKey("script")); [LINE] boolean result = Whitelist.newInstance().isSafeAttribute("", el, attr); Assert.assertTrue(result); }
@Test public void testProtocolAll() throws Exception { Element el = Jsoup.parse("<script>alert('Hello');</script>"); Whitelist Whitelist whitelist = new Whitelist(); assertThat(whitelist.protocols.get("script")).isFalse(); assertThat(whitelist.attributes.get("script")).isFalse(); assertThat(whitelist.protocols.get("all")).isTrue(); assertThat(whitelist.attributes.get("script")).isTrue(); assertThat(whitelist.protocols.get("all")).isFalse(); assertThat(whitelist.attributes.get("script")).isTrue(); assertThat(whitelist.protocols.get("all")).isFalse(); assertThat(whitelist.attributes.get("script")).isTrue(); assertThat(whitelist.protocols.get("all")).isFalse(); assertThat(whitelist.attributes.get("script")).isTrue(); assertThat(whitelist.protocols.get("all")).isFalse(); assertThat(whitelist.protocols.get("all")).isTrue(); assertThat(whitelist.attributes.get("script")).isTrue(); assertThat(whitelist.protocols.get("all")).isFalse(); assertThat(whitelist.protocols.get("all")).isFalse(); }
@Test public void testProtocol() throws ParserConfigurationException, SAXException, IOException { Parser p = new Parser(); p.setProtocol("http"); Element el = p.parse(ResourceUtil.getResourceAsStream("/wss")); Whitelist whitelist = new Whitelist(); Assert.assertTrue(whitelist.isSafeAttribute("wss:all", el, new Attribute("wss:all"))); Assert.assertFalse(whitelist.isSafeAttribute("wss:all", el, new Attribute("wss:all"))); Assert.assertFalse(whitelist.isSafeAttribute("wss:all", el, new Attribute("wss:all"))); Assert.assertFalse(whitelist.isSafeAttribute("wss:all", el, new Attribute("wss:all"))); Assert.assertFalse(whitelist.isSafeAttribute("wss:all", el, new Attribute("wss:all"))); Assert.assertFalse(whitelist.isSafeAttribute("wss:all", el, new Attribute("wss:all"))); Assert.assertFalse(whitelist.isSafeAttribute("wss:all", el, new Attribute("wss:all"))); Assert.assertFalse(whitelist.isSafeAttribute("wss:all", el, new Attribute
@Test public void testValidAttributes() throws Exception { Element el = Jsoup.parse("<all attr=\"foo\">bar</all>"); assertTrue(whitelist.isSafeAttribute("foo", el, Attribute.valueOf("attr")) || whitelist.isSafeAttribute("foo", el, Attribute.valueOf("attr")) || whitelist.isSafeAttribute("foo", el, Attribute.valueOf("attr:foo")) || whitelist.isSafeAttribute("foo", el, Attribute.valueOf("attr:foo")) || whitelist.isSafeAttribute("foo", el, Attribute.valueOf("attr:foo")) || whitelist.isSafeAttribute("foo", el, Attribute.valueOf("attr:foo")) || whitelist.isSafeAttribute("foo", el, Attribute.valueOf("attr:foo")) || whitelist.isSafeAttribute("foo", el, Attribute.valueOf("attr:foo")) || whitelist.isSafeAttribute("foo", el, Attribute.valueOf("attr:foo")) || whitelist.isSafeAttribute("foo", el, Attribute.valueOf("attr:foo")) || whitelist.isSafeAttribute("foo", el, Attribute.valueOf("attr:foo")) || whitelist.isSafeAttribute("foo", el, Attribute.valueOf("attr:foo")) || whitelist.
@Test public void testValidProtocol() throws Exception { Whitelist whitelist = Whitelist.none(); whitelist.addAttributes(TagName.tagWithPrefix("foo"), "foo:bar"); Assert.assertEquals(whitelist.toString(), "foo:bar"); Assert.assertEquals(whitelist.getProtocols(), Whitelist.protocols(TagName.tagWithPrefix("foo"), TagName.tagWithPrefix("bar"))); Assert.assertEquals(whitelist.getAttributes(), Attribute.none()); Assert.assertEquals(whitelist.getProtocols(), Whitelist.protocols(TagName.tagWithPrefix("foo"), TagName.tagWithPrefix("bar"))); Assert.assertEquals(whitelist.getAttributes().size(), 1); Assert.assertEquals(whitelist.getProtocols().iterator().next(), Attribute.none()); Assert.assertEquals(whitelist.getProtocols(), Attribute.protocols(TagName.tagWithPrefix("foo"), TagName.tagWithPrefix("bar"))); Assert.assertEquals(whitelist.getProtocols(), Attribute.protocols(Protocol.http, Protocol.https)); Assert.assertEquals(whitelist.getProtocols(), Attribute.protocols(Protocol.https, Protocol.http)); Assert.assertEquals(whitelist.getProtocols(), Attribute.protocols(Protocol
@Test public void testValidProtocol() { Whitelist whitelist = Whitelist.none(); Element el = new Element("foo"); el.absUrl("bar"); Assert.assertEquals("bar:", el.attrValue()); Assert.assertEquals(new Whitelist(), whitelist); }
@Test public void testValidProtocol() { Whitelist whitelist = Whitelist.none(); whitelist.addAttributes(Whiteitelist.tag("attrib"), Whitelist.tag("value")); Assert.assertEquals("attrib:value", whitelist.toString()); whitelist.addProtocol(Protocol.HTTP); Assert.assertEquals("http: Assert.assertEquals("1.0, 1.1", whitelist.toString()); whitelist.addProtocol(Protocol.HTTPS); Assert.assertEquals("HTTPS: Assert.assertEquals("1.0, 1.1", whitelist.toString()); }
@Test public void testValidProtocols() throws Exception { Whitelist whitelist = Whitelist.none(); whitelist.addProtocols(Protocol.valueOf("http"), Protocol.valueOf("http")); whitelist.addAttributes(TagName.valueOf("foo"), "key1", "val1"); Assert.assertEquals(whitelist.toString(), "foo:key1:val1,foo:key2:val2"); Assert.assertEquals(whitelist.toString(), "foo:foo:val1:val2"); Assert.assertEquals(whitelist.toString(), "foo:foo:bar:"); Assert.assertEquals(whitelist.toString(), "foo:bar:"); Assert.assertEquals(whitelist.toString(), "foo:bar:"); Assert.assertEquals(whitelist.toString(), "foo:bar:"); Assert.assertEquals(whitelist.toString(), "foo:bar:"); Assert.assertEquals(whitelist.toString(), "foo:bar:"); Assert.assertEquals(whitelist.toString(), "foo:bar:"); Assert.assertEquals(whitelist.toString(), "foo:bar:"); Assert.assertEquals(whitelist.toString(), "foo:bar:"); Assert.assertEquals(whitelist.toString(), "foo:bar:"); Assert.assertEquals(whitelist.toString
@Test public void testValidProtocol() { Whitelist whitelist = Whitelist.none(); whitelist.addAttributes(TagName.tag("foo"), "bar"); whitelist.addEnforcedAttribute(TagName.tag("foo"), "bar", "foo"); Assert.assertEquals(whitelist.toString(), "foo:bar"); Assert.assertEquals(whitelist.toString(), "foo:bar"); Assert.assertEquals(whitelist.toString(), "foo:bar"); Assert.assertEquals(whitelist.toString(), "foo:bar"); Assert.assertEquals(whitelist.toString(), "foo:bar:foo"); Assert.assertEquals(whitelist.toString(), "foo:bar:foo"); Assert.assertEquals(whitelist.toString(), "foo:bar:foo"); Assert.assertEquals(whitelist.toString(), "foo:bar:foo"); Assert.assertEquals(whitelist.toString(), "foo:bar:foo"); Assert.assertEquals(whitelist.toString(), "foo:bar:foo"); Assert.assertEquals(whitelist.toString(), "foo:bar:foo"); Assert.assertEquals(whitelist.toString(), "foo:bar:foo"); Assert.assertEquals(whitelist.toString(), "foo:bar:foo"); Assert
@Test public void testValidProtocol() { Whitelist whitelist = Whitelist.none(); whitelist.addProtocol(Protocol.HTTP); Assert.assertEquals(whitelist.toString(), "HTTP: }
@Test public void testValidProtocol() { Whitelist whitelist = Whitelist.none(); whitelist.addAttributes(TagName.valueOf("foo"), "bar"); Assert.assertEquals(whitelist.toString(), "foo:bar"); Assert.assertEquals(whitelist.getProtocols(), Whitelist.protocols(new HashSet<Protocol>(Arrays.asList(Protocol.HTTP, Protocol.HTTPS)), new HashSet<Protocol>())); Assert.assertEquals(whitelist.getProtocols(), Whitelist.protocols(new HashSet<Protocol>(Arrays.asList(Protocol.HTTP, Protocol.HTTPS)), new HashSet<Protocol>())); Assert.assertEquals(whitelist.getProtocols(), Whitelist.protocols(new HashSet<Protocol>(Arrays.asList(Protocol.HTTP, Protocol.HTTPS)), new HashSet<Protocol>())); Assert.assertEquals(whitelist.getProtocols(), Whitelist.protocols(new HashSet<Protocol>(Arrays.asList(Protocol.HTTP, Protocol.HTTP, Protocol.HTTPS)), new HashSet<Protocol>())); Assert.assertEquals(whitelist.getProtocols(), Whitelist.protocols(new HashSet<Protocol>(Arrays.asList(Protocol.HTTP, Protocol.HTTP, Protocol.HTTPS)), new HashSet<Protocol>())); Assert.assertEquals(whitelist.getProtocols(),
@Test public void testEnforcedAttributes() { Attributes enforcedAttributes = Whitelist.none().addTags(TagName.valueOf("foo")).buildEnforcedAttributes("foo"); assertEquals(new Attributes(), enforcedAttributes); enforcedAttributes = Whitelist.none().addAttributes(TagName.valueOf("foo")).buildEnforcedAttributes("foo"); assertEquals(new Attributes(), enforcedAttributes); enforcedAttributes = Whitelist.none().addAttributes(TagName.valueOf("foo")).buildEnforcedAttributes("foo"); assertEquals(new Attributes(), enforcedAttributes); enforcedAttributes = Whitelist.none().addAttributes(TagName.valueOf("foo")).buildEnforcedAttributes("foo"); assertEquals(new Attributes(), enforcedAttributes); enforcedAttributes = Whitelist.none().addAttributes(TagName.valueOf("foo")).buildEnforcedAttributes("foo"); assertEquals(new Attributes(), enforcedAttributes); }
@Test public void testEnforcedAttributes() { Attributes enforcedAttributes = Whitelist.none().addTags("foo", "bar"); assertEquals(new Attributes(), enforcedAttributes); enforcedAttributes = Whitelist.none().addAttributes("foo", "bar"); assertEquals(new Attributes(), enforcedAttributes); enforcedAttributes = Whitelist.none().addAttributes("foo", "bar"); assertEquals(new Attributes(), enforcedAttributes); }
@Test public void testEnforcedAttributes() { Whitelist whitelist = Whitelist.none(); whitelist.addTags(TagName.valueOf("foo"), SensitiveAttributeKey.valueOf("bar")); Assert.assertEquals(whitelist.getEnforcedAttributes("foo"), new Attributes()); }
@Test public void testEnforcedAttributes() { Whitelist whitelist = Whitelist.none(); whitelist.addAttributes(TagName.valueOf("foo")); assertEquals(new Attributes(), whitelist); whitelist.addAttributes(TagName.valueOf("bar")); assertEquals(new Attributes(), whitelist); }
@Test public void testEnforcedAttributes() { Attributes enforcedAttributes = Whitelist.none().addAttributes(TagName.valueOf("foo"), "bar"); assertEquals( enforcedAttributes, new Attributes() { { AttributeKey key = new AttributeKey("foo"); AttributeValue value = new AttributeValue("bar"); enforcedAttributes.put(key, value); } }); }
@Test public void testTags() { Assert.assertEquals(new TagName(""), new TagName("")); Assert.assertEquals(new TagName("&"), new TagName("&")); Assert.assertEquals(new TagName("foo"), new TagName("foo")); Assert.assertEquals(new TagName("bar"), new TagName("bar")); Assert.assertEquals(new TagName("foo"), new TagName("foo")); Assert.assertEquals(new TagName("bar"), new TagName("bar")); Assert.assertEquals(new TagName("foo"), new TagName("foo")); Assert.assertEquals(new TagName("bar"), new TagName("bar")); Assert.assertEquals(new TagName("foo"), new TagName("foo")); Assert.assertEquals(new TagName("bar"), new TagName("bar")); Assert.assertEquals(new TagName("foo"), new TagName("foo")); Assert.assertEquals(new TagName("foo"), new TagName("foo")); Assert.assertEquals(new TagName("foo"), new TagName("foo")); Assert.assertEquals(new TagName("foo"), new TagName("foo")); Assert.assertEquals(new TagName("foo"),
@Test public void testTags() { Assert.assertEquals(new Whitelist().addTags(new TagName("line"), new TagName("^"), new TagName("^"), new TagName("^"), new TagName("^"), new TagName("^"), new TagName("^"), new TagName("^"), new TagName("^"), new TagName("^"), new TagName("^"), new TagName("^"), new TagName("^"), new TagName("^"), new TagName("^"), new TagName("^"), new TagName("^"), new TagName("^"), new TagName("^"), new TagName("^")); }
@Test public void testValueOf() { Assert.assertEquals(new TagName(""), [LINE]); Assert.assertEquals(new TagName(""), [LINE]); Assert.assertEquals(new TagName("abc"), [LINE]); Assert.assertEquals(new TagName("abc"), [LINE]); Assert.assertEquals(new TagName("abc"), [LINE]); Assert.assertEquals(new TagName("abc"), [LINE]); Assert.assertEquals(new TagName("abc"), [LINE]); Assert.assertEquals(new TagName("abc"), [LINE]); Assert.assertEquals(new TagName("abc"), [LINE]); Assert.assertEquals(new TagName("abc"), [LINE]); Assert.assertEquals(new TagName("abc"), [LINE]); Assert.assertEquals(new TagName("abc"), [LINE]); Assert.assertEquals(new TagName("abc"), [LINE]); Assert.assertEquals(new TagName("abc"), [LINE]); Assert.assertEquals(new TagName("abc"), [LINE]); Assert.assertEquals(new TagName("abc"), [LINE]); Assert.assertEquals(new TagName("abc"), [LINE]); Assert.assertEquals(new TagName("abc
@Test(dataProvider = "invalidNames") public void testValidTags(String tagName, String expected) { Assert.assertEquals(new TagName(tagName), new TagName(expected)); }
@Test public void relaxedAttributeKey() { Element el = Jsoup.parse("<a>Hello</a>"); Assert.assertEquals(new AttributeKey("a"), el); }
@Test public void relaxedAttributeKey() { relaxed.addTags(TagName.valueOf("LINE"), "attr", "value"); assertEquals(new Whitelist().addAttributes(TagName.valueOf("attrib"), "attr").addProtocols(TagName.valueOf("attrib"), "value").addProtocols(TagName.valueOf("attrib"), "value")).toString(), relaxed.getAttributeKey("attrib").toString()); }
@Test public void testValueOf() { Assert.assertEquals(AttributeKey.valueOf(""), new AttributeKey("")); Assert.assertEquals(AttributeKey.valueOf("hello"), new AttributeKey("hello")); Assert.assertEquals(AttributeKey.valueOf("hello"), new AttributeKey("hello")); Assert.assertEquals(AttributeKey.valueOf("hello"), new AttributeKey("hello")); Assert.assertEquals(AttributeKey.valueOf("hello"), new AttributeKey("hello")); Assert.assertEquals(AttributeKey.valueOf("hello"), new AttributeKey("hello")); Assert.assertEquals(AttributeKey.valueOf("hello"), new AttributeKey("hello")); Assert.assertEquals(AttributeKey.valueOf("hello"), new AttributeKey("hello")); Assert.assertEquals(AttributeKey.valueOf("hello"), new AttributeKey("hello")); Assert.assertEquals(AttributeKey.valueOf("hello"), new AttributeKey("hello")); Assert.assertEquals(AttributeKey.valueOf("hello"), new AttributeKey("hello")); Assert.assertEquals(AttributeKey.valueOf("hello"), new AttributeKey("hello")); Assert.assertEquals(AttributeKey.valueOf("hello"), new AttributeKey("hello")); Assert.assertEquals(AttributeKey.valueOf("hello"), new Attribute
@Test(dataProvider = "validAttributes") public void testValidAttributes(String attrKey, String value, boolean expected) { Element el = Jsoup.parse(attrKey); Assert.assertEquals(new AttributeKey(value), el.getAttribute(attrKey)); }
@Test public void testProtocol() { Assert.assertEquals(new Protocol("http"), new Protocol("http")); Assert.assertEquals(new Protocol("http"), new Protocol("http: Assert.assertEquals(new Protocol("http"), new Protocol("http: Assert.assertEquals(new Protocol("http"), new Protocol("http: Assert.assertEquals(new Protocol("http"), new Protocol("http: Assert.assertEquals(new Protocol("http"), new Protocol("http: Assert.assertEquals(new Protocol("http"), new Protocol("http: Assert.assertEquals(new Protocol("http"), new Protocol("http: Assert.assertEquals(new Protocol("http"), new Protocol("http: Assert.assertEquals(new Protocol("http"), new Protocol("http: Assert.assertEquals(new Protocol("http"), new Protocol("http: Assert.assertEquals(new Protocol("http: Assert.assertEquals(new Protocol("http"), new Protocol("http: Assert.assertEquals(new Protocol("http: Assert.assertEquals(new Protocol("http: Assert.assertEquals(new Protocol("http: Assert.assertEquals(new Protocol("http: Assert.assertEquals(new Protocol("http: Assert.assertEquals(new Protocol
@Test public void relaxedProtocol() { Whitelist relaxed = Whitelist.clined(); relaxed.addProtocols(TagName.valueOf("SSL"), "SSL", "TLSv1", "SSLv2"); assertEquals(new Whitelist(new Protocol("SSLv1"), new AttributeKey("SSLv1")).addProtocols(TagName.valueOf("SSL"), "TLSv1", "SSLv2")).addProtocols(TagName.valueOf("SSL"), "TLSv1", "SSLv3").addAttributes(TagName.valueOf("attrib"), "attrib").addProtocols(TagName.valueOf("attrib"), "attrib").build(), relaxed); }
@Test public void testValueOf() { Assert.assertEquals(new Protocol(Protocol.SSL), Protocol.valueOf("SSL")); Assert.assertEquals(new Protocol(Protocol.TLS), Protocol.valueOf("TLSv1.3")); Assert.assertEquals(new Protocol(Protocol.SSL), Protocol.valueOf("TLSv1.3")); Assert.assertEquals(new Protocol(Protocol.SSL), Protocol.valueOf("TLSv1.3")); Assert.assertEquals(new Protocol(Protocol.SSL), Protocol.valueOf("TLSv1.3")); Assert.assertEquals(new Protocol(Protocol.TLS), Protocol.valueOf("TLSv1.3")); Assert.assertEquals(new Protocol(Protocol.TLS), Protocol.valueOf("TLSv1.3")); Assert.assertEquals(new Protocol(Protocol.TLS), Protocol.valueOf("TLSv1.3")); Assert.assertEquals(new Protocol(Protocol.TLS), Protocol.valueOf("TLSv1.3")); Assert.assertEquals(new Protocol(Protocol.TLS), Protocol.valueOf("TLSv1.3")); Assert.assertEquals(new Protocol(Protocol.TLS), Protocol.valueOf("TLSv1.3")); Assert.assertEquals(new Protocol(Protocol.TLS), Protocol.valueOf("TLSv
@Test public void testProtocolParsing() { Assert.assertEquals(new Protocol(""), new Protocol("")); Assert.assertEquals(new Protocol(""), new Protocol("")); Assert.assertEquals(new Protocol("line"), new Protocol("line")); Assert.assertEquals(new Protocol("line"), new Protocol("")); Assert.assertEquals(new Protocol("line"), new Protocol("")); Assert.assertEquals(new Protocol("line"), new Protocol("")); Assert.assertEquals(new Protocol("line"), new Protocol("")); Assert.assertEquals(new Protocol("line"), new Protocol("")); Assert.assertEquals(new Protocol("line"), new Protocol("")); Assert.assertEquals(new Protocol("line"), new Protocol("")); Assert.assertEquals(new Protocol("line"), new Protocol("")); Assert.assertEquals(new Protocol("line"), new Protocol("")); Assert.assertEquals(new Protocol("line"), new Protocol("")); Assert.assertEquals(new Protocol("line"), new Protocol("")); Assert.assertEquals(new Protocol("line"), new Protocol("")); Assert.assertEquals(new Protocol(""), new Protocol("")); Assert.assertEquals(new Protocol(""), new Protocol("")); Assert.assertEquals(new Protocol(""), new Protocol
@Test public void testTypedValue() { TypedValue tv = new TypedValue("hello"); Assert.assertEquals(new Line(new Whitelist().addAttributes(TagName.valueOf("xmlns"), "xmlns:ns3")), tv); }
@Test public void testTypedValue() { TypedValue tv = new TypedValue("line"); Assert.assertEquals(new Whitelist().addAttributes(TagName.valueOf("attrib"), "line").addProtocols(TagName.valueOf("attrib"), "line").build(), tv); }
@Test(expectedExceptions = IllegalArgumentException.class) public void testTypedValueNull() { new TypedValue(null); }
@Test public void testHashCode() { Whitelist whitelist = new Whitelist(); whitelist.addTags(new TagName("foo")); Assert.assertEquals(new Whitelist().hashCode(), whitelist.hashCode()); }
@Test public void testHashCode() { Whitelist whitelist = new Whitelist(); whitelist.addTags(new TagName("foo")); Assert.assertEquals(whitelist.hashCode(), whitelist.hashCode()); }
@Test public void testHashCode() { Whitelist whitelist = new Whitelist(); Assert.assertEquals(1, whitelist.hashCode()); Assert.assertNotEquals(0, whitelist.hashCode()); }
@Test public void testHashCode() { Whitelist whitelist = new Whitelist(); whitelist.addTags(new TagName("foo")); Assert.assertEquals(whitelist, new Whitelist()); Assert.assertNotEquals(whitelist, new Whitelist()); Assert.assertNotEquals(whitelist, new Whitelist()); Assert.assertNotEquals(whitelist, new Whitelist()); Assert.assertNotEquals(whitelist, new Whitelist()); Assert.assertNotEquals(whitelist, new Whitelist()); Assert.assertNotEquals(whitelist, new Whitelist()); Assert.assertNotEquals(new Whitelist(), new Whitelist()); Assert.assertNotEquals(new Whitelist(), new Whitelist()); Assert.assertNotEquals(new Whitelist(), new Whitelist()); Assert.assertNotEquals(new Whitelist(), new Whitelist()); Assert.assertNotEquals(new Whitelist(), new Whitelist()); Assert.assertNotEquals(new Whitelist(), new Whitelist()); Assert.assertNotEquals(new Whitelist(), new Whitelist()); Assert.assertNotEquals(new Whitelist(), new Whitelist()); Assert.assertNotEquals(new Whitelist(), new Whitelist()); }
@Test public void testHashCode() { Whitelist whitelist = new Whitelist(); whitelist.addTags(new TagName("hello")); Assert.assertEquals(whitelist.hashCode(), new Whitelist().hashCode()); }
@Test public void testEquals() { Whitelist whitelist = Whitelist.none(); assertEquals(whitelist, Whitelist.none()); assertEquals(whitelist, Whitelist.none()); assertEquals(whitelist, Whitelist.simpleText()); assertEquals(whitelist, Whitelist.simpleText()); assertEquals(whitelist, Whitelist. relaxed()); assertEquals(whitelist, Whitelist.none()); assertEquals(whitelist, Whitelist.simpleText()); assertEquals(whitelist, Whitelist. relaxed()); assertNotEquals(whitelist, null); assertNotEquals(whitelist, Whitelist. relaxed()); }
@Test public void testEquals() { Whitelist whitelist = Whitelist.none(); assertEquals(whitelist, Whitelist.none()); assertEquals(whitelist, Whitelist.none()); assertEquals(whitelist, Whitelist.none()); assertEquals(whitelist, Whitelist.none()); assertNotEquals(whitelist, Whitelist.none()); assertNotEquals(whitelist, Whitelist.none()); assertNotEquals(whitelist, null); assertEquals(whitelist, Whitelist.none()); assertNotEquals(whitelist, Whitelist.none()); assertNotEquals(whitelist, Whitelist.none()); assertEquals(whitelist, Whitelist.none()); assertNotEquals(whitelist, Whitelist.none()); assertNotEquals(whitelist, Whitelist.none()); assertEquals(whitelist, Whitelist.none()); assertNotEquals(whitelist, Whitelist.none()); assertNotEquals(whitelist, Whitelist.none()); assertEquals(whitelist, Whitelist.none()); assertEquals(whitelist, Whitelist.none()); assertNotEquals(whitelist, Whitelist.none()); assertNotEquals(whitelist, Whitelist.none()); assertEquals(whitelist, Whitelist.none()); assertEquals(whitelist, Whitelist.none()); assertEquals(whitelist, Whitelist.none()); assertEquals(whitelist, Whitelist.none()); assertEquals(whitelist, Whitelist.none()); assertEquals(whitelist, Whitelist.null()); assertNotEquals(whitelist, Whitelist.null
@Test public void testEquals() { Whitelist whitelist = Whitelist.none(); Assert.assertEquals(whitelist, Whitelist.none()); Assert.assertNotEquals(whitelist, Whitelist.none()); Assert.assertNotEquals(whitelist, Whitelist.none()); Assert.assertNotEquals(whitelist, Whitelist.none()); Assert.assertNotEquals(whitelist, Whitelist.none()); Assert.assertNotEquals(whitelist, Whitelist.none()); Assert.assertNotEquals(whitelist, Whitelist. relaxed()); Assert.assertNotEquals(whitelist, Whitelist. relaxed()); Assert.assertNotEquals(whitelist, Whitelist.simpleText()); Assert.assertNotEquals(whitelist, Whitelist.simpleText()); Assert.assertNotEquals(whitelist, Whitelist. relaxed()); Assert.assertNotEquals(whitelist, Whitelist.tagName()); Assert.assertNotEquals(whitelist, Whitelist.attributeKey()); Assert.assertNotEquals(whitelist, Whitelist.attributeKey(new AttributeKey("attrKey"))); Assert.assertNotEquals(whitelist, Whitelist.tagNameWithKey("attrKey")); Assert.assertNotEquals(whitelist, Whitelist.tagNameWithKey("attrKey")); Assert.assertNotEquals
@Test public void testNotEqualsClass() { Whitelist whitelist = Whitelist.none(); assertFalse(whitelist.getClass()); }
@Test public void testEquals() { TypedValue w1 = new TypedValue("hello"); TypedValue w2 = new TypedValue("hello"); Whitelist l1 = new Whitelist(); Whitelist l2 = new Whitelist(); assertEquals(l1, l2); assertEquals(l1, l2); assertEquals(l1, new Whitelist()); }
@Test public void testEquals() { Whitelist whitelist = Whitelist.none(); assertEquals(whitelist, Whitelist.none()); assertEquals(whitelist, Whitelist.simpleText()); assertEquals(whitelist, Whitelist.simpleText()); assertEquals(whitelist, Whitelist.none()); assertNotEquals(whitelist, Whitelist.none()); assertNotEquals(whitelist, Whitelist.simpleText()); assertNotEquals(whitelist, Whitelist. relaxed()); assertNotEquals(whitelist, Whitelist.simpleText()); assertNotEquals(whitelist, Whitelist. relaxed()); }
@Test public void testEquals() { Whitelist whitelist = new Whitelist(); TypedValue one = new TypedValue("hello"); Whitelist other = new Whitelist(); [LINE] assert (whitelist.equals(one) ||!whitelist.equals(other)); }
@Test public void testEquals() { Whitelist whitelist = Whitelist.none(); assertEquals(whitelist, Whitelist.none()); assertEquals(whitelist, Whitelist.none()); assertEquals(whitelist, Whitelist.simpleText()); assertEquals(whitelist, Whitelist.simpleText()); assertEquals(whitelist, Whitelist. relaxed()); assertEquals(whitelist, Whitelist.none()); assertEquals(whitelist, Whitelist.simpleText()); assertEquals(whitelist, Whitelist. relaxed()); assertNotEquals(whitelist, null); assertNotEquals(whitelist, Whitelist. relaxed()); }
@Test public void testToString() { Assert.assertEquals("[LINE] \n", new Whitelist().toString()); }
@Test public void relaxedProtocols() { Element el = Jsoup.parse("<protocols><protocols><protocols><protocols><protocols><protocols><![CDATA[TLSv1_2]]></protocols></protocols></protocols></protocols></protocols></protocols></xml>"); assertEquals(new Whitelist().addProtocols( "http", "TLSv1"), el.toString()); el = Jsoup.parse("<protocols><protocols><![CDATA[TLSv1_2]]></protocols></xml>"); assertEquals(new Whitelist(), el.toString()); }
@Test public void dataWithoutData() { DataNode dn = new DataNode("foo", ""); assertEquals("foo", dn.getWholeData()); }
@Test public void testGetWholeData() { DataNode dn = new DataNode("foo", ""); assertEquals("foo", dn.getWholeData()); DataNode dn2 = new DataNode("bar", ""); assertEquals("bar", dn2.getWholeData()); DataNode dn3 = new DataNode("foo", ""); assertEquals("bar", dn3.getWholeData()); }
@Test public void outerHtml() { DataNode data = new DataNode("foo", ""); StringBuilder sb = new StringBuilder(); data.outerHtml(sb); assertEquals("foo", sb.toString()); }
@Test public void data() { DataNode dataNode = new DataNode("Hello World!", ""); assertEquals("Hello World!", dataNode.getWholeData()); }
@Test public void testWhitelist() { Whitelist whitelist = Whitelist.all(); String html = "<p>Hello World</p>"; assertEquals("<p>Hello World</p>", Jsoup.clean(html, "http: Whitelist.all()); html = "<p>Hello World</p>"; assertEquals("<p>Hello World</p>", Jsoup.clean(html, "http: Whitelist.all()); html = "<p>Hello World</p><p>Hello World</p>"; assertEquals("<p>Hello World</p>", Jsoup.clean(html, "http: Whitelist.all()); }
@Test public void handlesWhitelist() { Whitelist whitelist = Whitelist.all(); String html = "<p>Hello world</p>"; String clean = Jsoup.clean(html, Whitelist.all()); assertEquals(clean, Jsoup.clean(html, Whitelist.all())); }
@Test public void handlesWhitelist() { Whitelist whitelist = Whitelist.basic("foo"); String html = Jsoup.clean("<p>foo</p>", Whitelist.basic("foo")); assertEquals("<p>foo</p>", html); html = Jsoup.clean("<p>foo</p>", Whitelist.basic("foo")); assertEquals("<p>foo</p>", html); html = Jsoup.clean("<p>foo</p>", Whitelist.basic("foo")); assertEquals("<p>foo</p>", html); html = Jsoup.clean("<p>foo</p>", Whitelist.basic("foo")); assertEquals("<p>foo</p>", html); html = Jsoup.clean("<p>foo</p>", Whitelist.basic("foo")); assertEquals("<p>foo</p>", html); html = Jsoup.clean("<p>foo</p>", Whitelist.basic("foo")); assertEquals("<p>foo</p>", html); html = Jsoup.clean("<p>foo</p>", Whitelist.basic("foo")); assertEquals("<p>foo</p>", html); html = Jsoup.clean("<p>foo</p>", Whitelist.basic("foo")); assertEquals("<p>foo</p>", html); html =
@Test public void testWhitelist() { Whitelist whitelist = Whitelist.all(); String html = "<p>Hello<p>there</p> <p>There</p> <p>are</p> <p>are</p> <p>are</p> <p>are</p> <p>are</p> <p>are</p> <p>are</p> <p>are</p>"; String clean = Jsoup.clean(html, whitelist); assertEquals(clean, Jsoup.clean(html, whitelist)); }
@Test public void testWhitelist() { Whitelist whitelist = Whitelist.all(); String html = "<p>Hello world</p>"; assertEquals(html, Jsoup.clean(html, whitelist)); }
@Test public void clean() { Whitelist.all().accept(new TestVisitor() { @Override public void visitElement(Element element) { } }); String html = "<p>Hello world</p>"; assertEquals("<p>Hello world</p>", Jsoup.clean(html, Whitelist.all())); }
@Test public void cleanWhitelist() { Whitelist whitelist = Whitelist.all(); String html = "<p>Hello world</p>"; assertEquals("<p>Hello world</p>", Jsoup.clean(html, whitelist)); html = "<p>Hello world</p>"; assertEquals("<p>Hello world</p>", Jsoup.clean(html, whitelist)); html = "<p>Hello world</p>"; assertEquals("<p>Hello world</p>", Jsoup.clean(html, whitelist)); html = "<p>Hello world</p>"; assertEquals("<p>Hello world</p>", Jsoup.clean(html, whitelist)); html = "<p>Hello world</p>"; assertEquals("<p>Hello world</p>", Jsoup.clean(html, whitelist)); html = "<p>Hello world</p>"; assertEquals("<p>Hello world</p>", Jsoup.clean(html, whitelist)); }
@Test public void testTag() { Tag tags = Tag.createBlock("content").setPreserveWhitespace().setEmpty().setPreserveWhitespace().setEOL(true).setContainInlineOnly().setContainDataOnly().setEmpty().setOptionalClosing().setPreserveWhitespace().setEmpty().setOptionalClosing().setPreserveWhitespace().setComment("This is the preserveWhitespace comment").setComment("This is the comment").setCommentComment("This is the comment").setComment("This is the comment").setComment("This is the comment").setComment("This is the comment").setComment("This is the comment").setComment("This is the comment").setComment("This is the comment").setComment("This is the comment").setComment("This is the comment").setComment("This is the comment").setComment("This is the comment").setComment("This is the comment").setComment("This is the comment").setComment("This is the comment").setComment("This is the comment").setComment("This is the comment").setComment("This is the comment").setComment("This is the comment").setComment("This is the comment").setComment("This is the comment").setComment("This
@Test public void testLowerCase() { Tag tags[] = Tag.valueOf("abc").getTags(); assertEquals("abc", tags[0]); assertEquals("", tags[1]); assertEquals("", tags[2]); }
@Test public void testGetName() { assertEquals(Tag.createBlock(TAG).getName(), Tag.createBlock(TAG).getName()); assertEquals(Tag.createBlock(TAG_NAME).getName(), Tag.createBlock(TAG_NAME).getName()); assertEquals(Tag.createBlock(TAG_NAME_WITHOUT_EOL).getName(), Tag.createBlock(TAG_NAME_WITHOUT_EOL).getName()); assertEquals(Tag.createBlock(TAG_NAME_WITHOUT_EOL).getName(), Tag.createBlock(TAG_NAME_WITHOUT_EOL).getName()); assertEquals(Tag.createBlock(TAG_NAME_WITHOUT_EOL).getName(), Tag.createBlock(TAG_NAME_WITHOUT_EOL).getName()); assertEquals(Tag.createBlock(TAG_NAME_WITHOUT_EOL).getName(), Tag.createBlock(TAG_NAME_WITHOUT_EOL).getName()); assertEquals(Tag.createBlock(TAG_NAME_WITHOUT_EOL).getName(), Tag.createBlock(TAG_NAME_WITHOUT_EOL).getName()); assertEquals(Tag.createBlock(TAG_NAME_WITHOUT_EOL).getName(), Tag.createBlock
@Test public void testGetName() { assertEquals(Tag.createBlock("").getName(), Tag.createBlock("").getName()); assertEquals(Tag.createBlock("").getName(), Tag.createBlock("").getName()); assertEquals(Tag.createBlock(" \n").getName(), Tag.createBlock(" \n").getName()); assertEquals(Tag.createBlock(" \n \n \r").getName(), Tag.createBlock(" \n \r").getName()); assertEquals(Tag.createBlock(" \n \r \n \r").getName(), Tag.createBlock(" \n \r \n \r").getName()); }
@Test public void testValueOf() { Tag t = Tag.valueOf("a"); Tag t2 = Tag.valueOf("b"); assertEquals(t, t2); t = Tag.valueOf(" "); assertEquals(t, t2); t = Tag.valueOf(" "); assertEquals(t, t2); t = Tag.valueOf(" "); assertEquals(t, t2); t = Tag.valueOf(" "); assertEquals(t, t2); }
@Test public void valueOf() { Tag t = Tag.valueOf("a"); Tag t2 = Tag.valueOf("a"); Tag t3 = Tag.valueOf("a"); Tag t4 = Tag.valueOf("a"); Tag t5 = Tag.valueOf("a"); Tag t6 = Tag.valueOf("a"); Tag t7 = Tag.valueOf("a"); assertEquals(t, t2); assertEquals(t, t3); assertEquals(t, t4); assertEquals(t, t5); assertEquals(t, t6); assertEquals(t, t7); assertEquals(t, t3); assertEquals(t, t4); assertEquals(t, t5); assertEquals(t, t6); assertEquals(t, t3); assertEquals(t, t4); assertEquals(t, t5); assertEquals(t, t6); assertEquals(t, t6); assertEquals(t, t7); assertEquals(t, t8); assertEquals(t, t8); assertEquals(t, t9); assertEquals(t, t9); assertEquals(t, t10); assertEquals(t, t11); assertEquals(t11, t12); assertEquals(t12, t13); assertEquals(t13, t14); assertEquals(t15, t15); assertEquals
@Test public void valueOf() { Tag e = Tag.valueOf("a"); Tag e2 = Tag.valueOf("a"); Tag e3 = Tag.valueOf("a"); Tag e4 = Tag.valueOf("a"); Tag e5 = Tag.valueOf("a"); Tag e6 = Tag.valueOf("a"); Tag e7 = Tag.valueOf("a"); Tag e8 = Tag.valueOf("a"); Tag e9 = Tag.valueOf("a"); Tag e10 = Tag.valueOf("a"); Tag e11 = Tag.valueOf("a"); Tag e12 = Tag.valueOf("a"); Tag e13 = Tag.valueOf("a"); Assert.assertEquals(e, e1); Assert.assertEquals(e2, e2); Assert.assertEquals(e3, e3); Assert.assertEquals(e4, e5); Assert.assertEquals(e5, e6); Assert.assertEquals(e6, e7); Assert.assertEquals(e7, e8); Assert.assertEquals(e8, e9); Assert.assertEquals(e9, e10); Assert.assertEquals(e12, e10); Assert.assertEquals(e9, e11); Assert.assertEquals(e12, e12); Assert.
@Test public void valueOf() { Tag t = Tag.valueOf("a"); Tag t2 = Tag.valueOf("a"); Tag t3 = Tag.valueOf("a"); Tag t4 = Tag.valueOf("a"); Tag t5 = Tag.valueOf("a"); Tag t6 = Tag.valueOf("a"); Tag t7 = Tag.valueOf("a"); Tag t8 = Tag.valueOf("a"); Tag t9 = Tag.valueOf("a"); Tag t10 = Tag.valueOf("a"); Tag t11 = Tag.valueOf("a"); Tag t12 = Tag.valueOf("a"); Tag t13 = Tag.valueOf("a"); Tag t14 = Tag.valueOf("a"); Tag t15 = Tag.valueOf("a"); Tag t16 = Tag.valueOf("a"); Tag t21 = Tag.valueOf("a"); Tag t22 = Tag.valueOf("a"); Tag t23 = Tag.valueOf("a"); Tag t24 = Tag.valueOf("a"); Tag t31 = Tag.valueOf("a"); Tag t32 = Tag.valueOf("a"); Tag t3132 = Tag.valueOf("a"); Tag t3232 = Tag.valueOf("a"); Tag t3132 = Tag.
@Test public void valueOf() { Tag e = Tag.valueOf("a"); Tag e2 = Tag.valueOf("b"); Tag e3 = Tag.valueOf("c"); Tag e4 = Tag.valueOf("d"); Tag e5 = Tag.valueOf("e"); Tag e6 = Tag.valueOf("f"); assertEquals(e, e2); assertEquals(e, e3); assertEquals(e, e4); assertEquals(e5, e5); assertEquals(e6, e6); assertEquals(e4, e3); assertEquals(e5, e6); assertEquals(e6, e4); assertEquals(e4, e5); assertEquals(e5, e6); assertEquals(e6, e4); assertEquals(e4, e3); assertEquals(e5, e6); assertEquals(e6, e4); assertEquals(e6, e4); assertEquals(e4, e5); assertEquals(e6, e4); assertEquals(e6, e4); assertEquals(e4, e5); assertEquals(e6, e4); assertEquals(e6, e4); assertEquals(e4, e5); assertEquals(e6, e4); assertEquals(e4, e5); }
@Test public void valueOf() { Tag tag = Tag.valueOf("a"); Tag tag2 = Tag.valueOf("b"); Tag tag3 = Tag.valueOf("c"); assertEquals(tag, tag2); assertEquals(tag, tag3); assertEquals(tag2, tag3); assertEquals(tag, tag3); }
@Test public void valueOf() { Tag t1 = Tag.valueOf("a"); Tag t2 = Tag.valueOf("b"); Tag t3 = Tag.valueOf("c"); Tag t4 = Tag.valueOf("d"); Tag t5 = Tag.valueOf("e"); Tag t6 = Tag.valueOf("f"); Tag t7 = Tag.valueOf("g"); Tag t8 = Tag.valueOf("a"); Tag t9 = Tag.valueOf("b"); Tag t10 = Tag.valueOf("c"); assertEquals(t1, t2); assertEquals(t1, t3); assertEquals(t1, t4); assertEquals(t1, t5); assertEquals(t1, t6); assertEquals(t1, t8); assertEquals(t1, t9); assertEquals(t1, t10); assertEquals(t1, t10); assertEquals(t1, t10); assertEquals(t1, t10); assertEquals(t1, t10); assertEquals(t1, t10); assertEquals(t1, t10); assertEquals(t1, t10); assertEquals(t1, t10); assertEquals(t1, t10); assertEquals(t1, t10); assertEquals(t1, t10); assertEquals(t1, t10); assertEquals(t1, t10); assertEquals(t
@Test public void valueOf() { Tag e = Tag.valueOf("a"); Tag e2 = Tag.valueOf("a"); Tag e3 = Tag.valueOf("a"); Tag e4 = Tag.valueOf("a"); Tag e5 = Tag.valueOf("a"); Tag e6 = Tag.valueOf("a"); Tag e7 = Tag.valueOf("a"); Tag e8 = Tag.valueOf("a"); Tag e9 = Tag.valueOf("a"); Tag e10 = Tag.valueOf("a"); Tag e11 = Tag.valueOf("a"); Tag e12 = Tag.valueOf("a"); Tag e13 = Tag.valueOf("a"); Tag e14 = Tag.valueOf("a"); assertEquals(e, e1); assertEquals(e2, e2); assertEquals(e3, e4); assertEquals(e5, e5); assertEquals(e6, e7); assertEquals(e7, e8); assertEquals(e8, e9); assertEquals(e9, e10); assertEquals(e9, e10); assertEquals(e9, e11); assertEquals(e12, e12); assertEquals(e13, e13); assertEquals(e9, e14); assertEquals(e9, e102); assertEquals(e9, e102); assertEquals(e9, e10
@Test public void valueOf() { Tag tag = Tag.valueOf("something"); [LINE] tag.setAncestor(defaultAncestor.tagName); Tag newTag = Tag.valueOf("something"); newTag.setAncestor(defaultAncestor.tagName); assertEquals(newTag, tag); tag = Tag.valueOf("something"); newTag.setAncestor(defaultAncestor.tagName); assertEquals(newTag, tag); }
@Test public void valueOf() { Tag block = Tag.valueOf("block"); Tag block2 = Tag.valueOf("block2"); assertEquals(block, block2); }
@Test public void testLineCanContainBlock() { Tag e = Tag.valueOf("a"); assertTrue(e.canContainBlock()); e = Tag.valueOf("a"); assertTrue(e.canContainBlock()); e = Tag.valueOf("a"); assertTrue(e.canContainBlock()); e = Tag.valueOf("a"); assertTrue(e.canContainBlock()); e = Tag.valueOf("a"); assertTrue(e.canContainBlock()); e = Tag.valueOf("a"); assertTrue(e.canContainBlock()); e = Tag.valueOf("a"); assertTrue(e.canContainBlock()); e = Tag.valueOf("a"); assertTrue(e.canContainBlock()); e = Tag.valueOf("a"); assertTrue(e.canContainBlock()); e = Tag.valueOf("a"); assertTrue(e.canContainBlock()); }
@Test public void valueOf() { Tag t = Tag.valueOf(" "); assertEquals(t, t); t = Tag.valueOf(" "); assertEquals(t, t); t = Tag.valueOf(" "); assertEquals(t, t); t = Tag.valueOf(" "); assertEquals(t, t); t = Tag.valueOf(" "); assertEquals(t, t); t = Tag.valueOf(" "); assertEquals(t, t); }
@Test public void canContain() { [LINE] for (Tag child : tags) [EOL] assert false; [LINE] for (Tag child : children) [EOL] assert false; [LINE] for (Tag child : children) [EOL] assert false; [LINE] for (Tag child : children) [EOL] assert false; [LINE] for (Tag child : children) [EOL] assert false; [LINE] for (Tag child : children) [EOL] assert false; [LINE] for (Tag child : children) [EOL] assert false; [LINE] for (Tag child : children) [EOL] assert false; [LINE] for (Tag child : children) [EOL] assert false; [LINE] for (Tag child : children) [EOL] assert false; [LINE] for (Tag child : children) [EOL] assert false; [LINE] for (Tag child : children) [EOL] assert false; [LINE] for (Tag child : children) [EOL] assert false; [EOL] for (Tag child : children) [EOL] assert false; [EOL] for (Tag child
[ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [
[ [ [ [ [ [ [ [ [ [ [ [ [ [ [
[ [ [ [ [ [ [ [ [ [ [ [ [ [ [
[ [ [ [ [ [ [ [ [ [ [ [ [ [
[ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ [ (
@Test public void head_canContain() { Html html = new Html(null); html.append("head"); html.append("script"); html.append("meta"); html.append("title"); Html head = new Html(html); head.append("dd"); html.append("head"); Html meta = new Html(html); meta.append("meta"); meta.append("title"); Html head2 = new Html(html); head2.append("dd"); assertTrue(this.canContain(head)); }
[ [ [ [ [ [ [ [ [ [ [ [
[ [ [ [ [ [ [ [ [ [ [ [ [
[ [ [ [ [ [ [ [ [ [ [
@Test public void isData() { Tag tags[] = Tag.createBlock("some text").isData(); assertEquals(true, tags[0].isData()); }
@Test public void testIsData() { Tag tags = Tag.createBlock("content").isData(); assertTrue(tags.isData()); tags = Tag.createBlock("content").isData(); assertFalse(tags.isData()); }
@Test public void isEmpty() { Tag tags = Tag.createBlock("something").isEmpty(); assertEquals(true, tags.isEmpty()); tags = Tag.createBlock("something").isEmpty(); assertEquals(false, tags.isEmpty()); }
@Test public void isEmpty() { assertTrue(Tag.createBlock("").isEmpty()); assertTrue(Tag.createBlock("").isEmpty()); assertTrue(Tag.createBlock(" \n").isEmpty()); assertTrue(Tag.createBlock(" \n \r").isEmpty()); assertTrue(Tag.createBlock(" \n \r \n").isEmpty()); assertTrue(Tag.createBlock(" \n \r \n \r \n").isEmpty()); assertTrue(Tag.createBlock(" \n \r \n \r \n").isEmpty()); assertTrue(Tag.createBlock(" \n \r \n \r \n").isEmpty()); assertTrue(Tag.createBlock(" \n \r \n \r \n").isEmpty()); assertTrue(Tag.createBlock(" \n \r \n \r \n").isEmpty()); assertTrue(Tag.createBlock(" \n \r \n \r \n").isEmpty()); assertTrue(Tag.createBlock(" \n \r \n \r \n").isEmpty()); assertTrue(Tag.createBlock(" \n \r \n \r \n").isEmpty()); assertTrue(Tag.createBlock(" \n \r \n \r \r \n").isEmpty()); assertTrue(Tag.
@Test public void preserveWhitespace() { Tag tags = Tag.createBlock("preserveWhitespace").preserveWhitespace(); assertTrue(tags.preserveWhitespace()); }
@Test public void preserveWhitespace() { Tag tags = Tag.createBlock("preserveWhitespace").preserveWhitespace(); assertTrue(tags.preserveWhitespace()); }
@Test public void implicitParent() { Tag tags = Tag.createBlock("abc").getImplicitParent(); assertEquals(null, tags.getImplicitParent()); }
@Test public void getImplicitParent() { Tag root = Tag.createBlock("root").getImplicitParent(); assertEquals(root, Tag.register(Tag.createInline("root")).getImplicitParent()); }
public void isValidParent() { Tag one = Tag.createBlock("one"); Tag two = Tag.createBlock("two"); Tag three = Tag.createBlock("three"); Tag four = Tag.createBlock("four"); assertTrue(one.isValidParent(two)); assertTrue(two.isValidParent(three)); assertFalse(three.isValidParent(four)); }
public void isValidParent() { Tag tag1 = Tag.createBlock("parent").isInvalidParent(Tag.createBlock("parent")).isInvalidParent(Tag.createBlock("parent")).isInvalidParent(Tag.createBlock("parent")).isInvalidParent(Tag.createBlock("parent")).isInvalidParent(Tag.createBlock("parent")).isInvalidParent(Tag.createBlock("parent")).isInvalidParent(Tag.createBlock("parent")).isInvalidParent(Tag.createBlock("parent")).isInvalidParent(Tag.createBlock("parent")).isInvalidParent(Tag.createBlock("parent")).isInvalidParent(Tag.createBlock("parent")).isInvalidParent(Tag.createBlock("parent")).isInvalidParent(Tag.createBlock("parent")).isInvalidParent(Tag.createBlock("parent")).isInvalidParent(Tag.createBlock("parent")).isInvalidParent(Tag.createBlock("parent")).isInvalidParent(Tag.createBlock("parent")).isInvalidParent(Tag.createBlock("parent")).isInvalidParent(Tag.createBlock("parent")).isInvalidParent(Tag.createBlock("parent")).isInvalidParent(Tag.createBlock("parent")).isInvalidParent(Tag.create
@Test public void isValidParent() { Tag inlines = Tag.createBlock("inline").add(Tag.create(Tag.create(Tag.valueOf(" inlines")))); Tag bis = Tag.create(Tag.create(Tag.valueOf(" bis"))); Tag cis = Tag.create(Tag.create(Tag.valueOf(" cis"))); Tag dis = Tag.create(Tag.create(Tag.valueOf(" dis"))); Tag eis = Tag.create(Tag.valueOf(" eis"))); Tag fis = Tag.create(Tag.valueOf(" fis"))); Tag gis = Tag.create(Tag.valueOf(" gis")); Tag his = Tag.create(Tag.valueOf(" his")); Tag iis = Tag.create(Tag.valueOf(" iis")); Tag jis = Tag.create(Tag.valueOf(" jis")); Tag mis = Tag.create(Tag.valueOf(" mis")); Tag mis2 = Tag.create(Tag.valueOf(" mis2")); Tag mis3 = Tag.create(Tag.valueOf(" mis3")); Tag iis2i2i2i2i2i2i2i2i2i2i2
public void isValidParent() { Tag line = Tag.createBlock("line"); Tag block = Tag.createBlock("block"); Tag block2 = Tag.createBlock("block2"); Tag block3 = Tag.createBlock("block3"); Tag block4 = Tag.createBlock("block4"); Tag block5 = Tag.createBlock("block5"); Tag block6 = Tag.createBlock("block6"); Tag block7 = Tag.createBlock("block7"); Tag block8 = Tag.createBlock("block8"); Tag block9 = Tag.createBlock("block9"); Tag block10 = Tag.createBlock("block10"); Tag block11 = Tag.createBlock("block11"); Tag block12 = Tag.createBlock("block12"); Tag block13 = Tag.createBlock("block13"); Tag block14 = Tag.createBlock("block14"); Tag block15 = Tag.createBlock("block15"); Tag block16 = Tag.createBlock("block16"); Tag block21 = Tag.createBlock("block21"); Tag block22 = Tag.createBlock("block22"); Tag block23 = Tag.createBlock("block23"); Tag block24 = Tag.createBlock("block24"); Tag block
public void isValidParent() { Tag root = Tag.createBlock("root"); Tag block1 = Tag.register(root); Tag block2 = Tag.register(block1); Tag block3 = Tag.register(block2); Tag block4 = Tag.register(block3); assertTrue(tag.isValidParent(block1)); assertTrue(tag.isValidParent(block2)); assertTrue(tag.isValidParent(block3)); assertTrue(tag.isValidParent(block4)); assertTrue(tag.isValidParent(block1)); assertTrue(tag.isValidParent(block4)); assertTrue(tag.isValidParent(block1)); assertTrue(tag.isValidParent(block2)); assertTrue(tag.isValidParent(block3)); assertTrue(tag.isValidParent(block4)); assertTrue(tag.isValidParent(block1)); assertTrue(tag.isValidParent(block2)); assertTrue(tag.isValidParent(block3)); assertTrue(tag.isValidParent(block4)); assertTrue(tag.isValidParent(block1)); assertTrue(tag.isValidParent(block2)); assertTrue(tag.isValidParent(block3)); assertTrue(tag.isValidParent(block4)); assertTrue
@Test public void testEquals() { Tag tag1 = Tag.valueOf("tag1"); Tag tag2 = Tag.valueOf("tag2"); assertEquals(tag1, tag2); assertEquals(tag1, tag2); }
@Test public void testEquals() { Tag tag1 = Tag.valueOf("tag1"); Tag tag2 = Tag.valueOf("tag2"); assertEquals(tag1, tag2); }
@Test public void equals() { publlLines.add(Tag.valueOf("p")); publLines.add(Tag.valueOf("p")); publLines.add(Tag.valueOf("p")); publLines.add(Tag.valueOf("p")); publLines.add(Tag.valueOf("p")); publLines.add(Tag.valueOf("p")); publLines.add(Tag.valueOf("p")); publLines.add(Tag.valueOf("p")); publLines.add(Tag.valueOf("p")); }
@Test public void equals() { Tag tag1 = Tag.valueOf("tag"); Tag tag2 = Tag.valueOf("tag"); Tag tag3 = Tag.valueOf("tag"); Tag tag4 = Tag.valueOf("tag"); Tag tag5 = Tag.valueOf("tag"); assertEquals(tag1, tag2); assertEquals(tag1, tag3); assertEquals(tag1, tag4); assertEquals(tag1, tag5); assertEquals(tag1, tag6); assertEquals(tag1, tag3); assertEquals(tag1, tag4); assertEquals(tag1, tag5); assertEquals(tag1, tag6); assertEquals(tag1, tag4); assertEquals(tag1, tag5); assertEquals(tag1, tag6); assertEquals(tag1, tag7); assertEquals(tag1, tag8); assertEquals(tag1, tag9); assertEquals(tag1, tag8); assertEquals(tag1, tag9); assertEquals(tag1, tag9); assertEquals(tag1, tag9); assertEquals(tag1, tag9); assertEquals(tag1, tag9); assertEquals(tag1, tag9); assertEquals(tag1, tag9); assertEquals(tag1, tag9); assertEquals(tag1, tag9); assertEquals(tag1, tag9); assertEquals(tag1, tag9); assertEquals(tag1, tag9); assertEquals(tag1, tag
@Test public void not_can_contain_block() { assertFalse(tag.canContainBlock()); }
@Test public void testCanContainInline() { Tag tag = Tag.valueOf("tag"); [LINE] tag.canContainInline = true; [LINE] tag.canContainInline = false; [LINE] tag.canContainInline = false; [LINE] tag.canContainInline = true; [LINE] tag.isEmpty = false; [LINE] tag.canContainBlock = false; [LINE] tag.canContainInline = true; [LINE] tag.canContainInline = false; [LINE] tag.canContainBlock = true; [LINE] tag.canContainInline = false; [LINE] tag.canContainInline = true; [LINE] tag.canContainInline = false; [LINE] tag.canContainBlock = false; [LINE] tag.canContainInline = true; [LINE] tag.canContainInline = false; [LINE] tag.canContainBlock = true; [LINE] tag.canContainInline = false; [LINE] tag.canContainInline = false; [LINE] tag.canContainInline = false; [LINE] tag.canContainBlock = true; [LINE] tag.canContainInline = false; [LINE] tag.canContain
@Test public void empty() { Tag tag = Tag.valueOf("empty"); assertFalse(tag.empty()); }
@Test public void notBlock() { Tag tag = Tag.valueOf("div"); assertFalse(tag.isBlock()); }
@Test public void testNotEquals() { Tag tag1 = Tag.valueOf("p"); assertFalse(tag1.equals(tag2)); }
@Test public void equals() { Tag tag1 = Tag.valueOf("tag1"); Tag tag2 = Tag.valueOf("tag2"); [LINE] assertTagEquals(tag1, tag2); }
@Test public void testHashCode() { assertEquals(Tag.createBlock(null).hashCode(), Tag.createBlock(null).hashCode()); assertEquals(Tag.createBlock(null).hashCode(), Tag.createBlock(null).hashCode()); assertEquals(Tag.createBlock(null).hashCode(), Tag.createBlock(null).hashCode()); assertEquals(Tag.createBlock(null).hashCode(), Tag.createBlock(null).hashCode()); assertEquals(Tag.createBlock(null).hashCode(), Tag.createBlock(null).hashCode()); assertEquals(Tag.createBlock(null).hashCode(), Tag.createBlock(null).hashCode()); assertEquals(Tag.createBlock(null).hashCode(), Tag.createBlock(null).hashCode()); assertEquals(Tag.createBlock(null).hashCode(), Tag.createBlock(null).hashCode()); assertEquals(Tag.createBlock(null).hashCode(), Tag.createBlock(null).hashCode()); assertEquals(Tag.createBlock(null).hashCode(), Tag.createBlock(null).hashCode()); assertEquals(Tag.createBlock(null).hashCode(), Tag.createBlock(null).hashCode()); assertEquals(Tag.createBlock(null).hashCode(), Tag.createBlock(null).hashCode()); assertEquals(Tag.createBlock(
@Test public void testHashCode() { Tag block1 = Tag.createBlock(TAG_NAME_1); Tag block2 = Tag.createBlock(TAG_NAME_2); Tag block3 = Tag.createBlock(TAG_NAME_3); assertEquals(block1.hashCode(), block2.hashCode()); assertEquals(block1.hashCode(), block3.hashCode()); }
@Test public void testHashCode() { Tag e1 = Tag.createBlock(TAG_NAME_1).get(); Tag e2 = Tag.createBlock(TAG_NAME_2).get(); assertEquals(e1, e2); assertEquals(e1.hashCode(), e2.hashCode()); }
@Test public void testHashCode() { Tag e1 = Tag.createBlock(TAG_NAME_1).get(); Tag e2 = Tag.createBlock(TAG_NAME_2).get(); assertEquals(e1, e2); assertEquals(e1.hashCode(), e2.hashCode()); }
@Test public void testHashCode() { Tag e1 = Tag.createBlock(TAG_NAME).get(); Tag e2 = Tag.createBlock(TAG_NAME).get(); assertEquals(e1, e2); assertEquals(e1.hashCode(), e2.hashCode()); }
@Test public void testHashCode() { Tag e1 = Tag.createBlock(TAG_NAME_1).get(); Tag e2 = Tag.createBlock(TAG_NAME_2).get(); assertEquals(e1, e2); assertEquals(e1.hashCode(), e2.hashCode()); }
@Test public void testHashCode() { Tag e1 = Tag.createBlock(TAG_NAME).get(); Tag e2 = Tag.createBlock(TAG_NAME).get(); assertEquals(e1, e2); assertEquals(e1.hashCode(), e2.hashCode()); }
@Test public void testHashCode() { assertEquals(Tag.createBlock(null).hashCode(), Tag.createBlock(null).hashCode()); assertEquals(Tag.createBlock(null).hashCode(), Tag.createBlock(null).hashCode()); assertEquals(Tag.createBlock(null).hashCode(), Tag.createBlock(null).hashCode()); }
@Test public void testSetAncestor() { Tag override = Tag.setAncestor("parent", "child", "parent"); assertEquals(override, Tag.setAncestor("parent", "child")); }
@Test public void setAncestor() { Tag e = Tag.valueOf("ancestor"); assertEquals(e, Tag.valueOf("ancestor")); }
@Test public void setAncestor() { Tag root = Tag.createBlock("root").add(Tag.valueOf("parent")).add(Tag.valueOf("child")).add(Tag.valueOf("parent")); Tag child1 = Tag.createBlock("child1").add(Tag.valueOf("child2")); Tag child2 = Tag.createBlock("child2").add(Tag.valueOf("child3")); assertEquals(root, Tag.setAncestor("parent", "child1", "child2")); assertEquals(root, Tag.setAncestor("parent", "child1", "child2")); assertEquals(root, Tag.setAncestor("parent", "child1", "child3")); assertEquals(root, Tag.setAncestor("parent", "child1", "child2")); assertEquals(root, Tag.setAncestor("parent", "child1", "child3")); }
@Test public void testSetAncestor() { Tag block1 = Tag.createBlock("div").add(Tag.valueOf("foo")).add(Tag.valueOf("bar")).add(Tag.valueOf("baz")).add(Tag.valueOf("foo")).add(Tag.valueOf("bar")).add(Tag.valueOf("foo")).add(Tag.valueOf("foo")).add(Tag.valueOf("bar")).add(Tag.valueOf("foo")).add(Tag.valueOf("foo")).add(Tag.valueOf("bar")).add(Tag.valueOf("foo")).add(Tag.valueOf("bar")).add(Tag.valueOf("foo")).add(Tag.valueOf("bar")).add(Tag.valueOf("foo")).add(Tag.valueOf("bar")).add(Tag.valueOf("bar")).add(Tag.valueOf("bar")).add(Tag.valueOf("bar")).add(Tag.valueOf("bar")).add(Tag.valueOf("bar")).add(Tag.valueOf("bar")).add(Tag.valueOf("bar")).add(Tag.valueOf("bar")).add(Tag.valueOf("bar")).add(
@Test public void testSetAncestor() { Tag tag1 = Tag.valueOf("ancestor"); Tag tag2 = Tag.valueOf("ancestor"); Tag tag3 = Tag.valueOf("ancestor"); Tag tag4 = Tag.valueOf("ancestor"); Tag tag5 = Tag.valueOf("ancestor"); assertEquals(tag1, tag2); assertEquals(tag1, tag3); assertEquals(tag1, tag4); assertEquals(tag1, tag5); assertEquals(tag1, tag6); assertEquals(tag1, tag4); assertEquals(tag1, tag5); assertEquals(tag1, tag6); assertEquals(tag1, tag4); assertEquals(tag1, tag4); assertEquals(tag1, tag5); assertEquals(tag1, tag6); assertEquals(tag1, tag4); assertEquals(tag1, tag5); assertEquals(tag1, tag6); assertEquals(tag1, tag4); assertEquals(tag1, tag5); assertEquals(tag1, tag6); assertEquals(tag1, tag4); assertEquals(tag1, tag5); assertEquals(tag1, tag6); assertEquals(tag1, tag7); assertEquals(tag1, tag8); assertEquals(tag1, tag8); assertEquals(tag1, tag9); assertEquals(tag1, tag9); assertEquals(tag1, tag10); assertEquals(tag1, tag
@Test public void testSetAncestor() { Tag contai = Tag.setContai("Contai").setComment("Comment").setComment("Comment").setComment("Comment").setContai("Contai").setComment("Comment").setComment("Comment").setContai("Comment").setComment("Comment").setComment("Comment").setComment("Comment").setComment("Comment").setComment("Comment").setComment("Comment").setComment("Comment").setComment("Comment").setComment("Comment").setComment("Comment").setComment("Comment").setComment("Comment").setComment("Comment").setComment("Comment").setComment("Comment").setComment("Comment").setComment("Comment").setComment("Comment").setComment("Comment").setComment("Comment").setComment("Comment").setComment("Comment").setComment("Comment").setComment("Comment").setComment("Comment").setComment("Comment").setComment("Comment").setComment("Comment").setComment("Comment").setComment("Comment").setComment("Comment").setComment("Comment").setComment("Comment").setComment("Comment").setComment("Comment").setComment("Comment").setComment("Comment").setComment("Comment").setComment("Comment").set
