@Test public void testVisitor() throws Exception { String json = "[\"foo\"]"; JsonSerializationVisitor visitor = new JsonSerializationVisitor(null, true, null, null, null); visitor.start(node); visitor.startVisitingObject(node); visitor.start(null); visitor.start(node); visitor.start(null); visitor.start(node); visitor.startVisitingObject(node); visitor.start(null); visitor.start(null); visitor.start(null); visitor.start(null); visitor.start(null); visitor.start(null); visitor.start(null); visitor.start(null); visitor.start(null); visitor.start(null); visitor.start(null); visitor.start(null); visitor.start(null); visitor.start(null); visitor.start(null); visitor.start(null); visitor.start(null); visitor.start(null); visitor.start(null); visitor.start(null); visitor.start(null); visitor.start(null); visitor.start(null); visitor.start(null); visitor.start(null); visitor.start(null); visitor.start(null); visitor.start(null);
@Test public void testJsonSerializationVisitor() throws Exception { String json = "{\"a\":1,\"b\":2,\"c\":3}"; JsonSerializationVisitor visitor = new JsonSerializationVisitor(ObjectNavigatorFactory.getFactory(), true, mock(ParameterizedTypeHandlerMap.class), new JsonSerializationContext(), null); visitor.start(node); visitor.end(node); assertEquals("{\"a\":1,\"b\":2,\"c\":3}", json); }
@Test public void testJsonSerializationVisitor() throws Exception { String json = "{\"foo\":null,\"bar\":null}"; JsonSerializationVisitor visitor = new JsonSerializationVisitor(null, true, mock(ParameterizedTypeHandlerMap.class), context, null); visitor.start(node); visitor.startVisitingObject(node); visitor.start(node); visitor.start(node); visitor.start(node); visitor.start(node); visitor.start(node); visitor.start(node); visitor.start(node); visitor.start(node); visitor.start(node); visitor.start(node); visitor.start(node); visitor.start(node); visitor.start(node); visitor.end(node); visitor.end(node); assertEquals(null, visitor.getTarget()); assertEquals(null, visitor.getTarget()); assertEquals(null, visitor.getTarget()); assertEquals(null, visitor.getTarget()); assertEquals(null, visitor.getTarget()); }
@Test public void testJsonSerializationVisitor() throws Exception { String json = "{\"a\":1,\"b\":2,\"c\":3}"; JsonSerializer<List<String>> f1 = mock(JsonSerializer.class); when(f1.getType()).thenReturn(List.class); when(f1.get()).thenReturn(Arrays.asList("a", "b")); when(f1.get()).thenReturn(Arrays.asList("c", "d")); when(f1.get()).thenReturn(Arrays.asList("a", "b")); when(f1.get()).thenReturn(Arrays.asList("c", "d")); when(f1.get()).thenReturn(Arrays.asList("a", "b")); when(f1.get()).thenReturn(Arrays.asList("a", "b")); when(f1.get()).thenReturn(Arrays.asList("a", "b")); when(f1.get()).thenReturn(Arrays.asList("a", "b")); when(f1.get()).thenReturn(Arrays.asList("a", "b")); when(f1.get()).thenReturn(Arrays.asList("a", "b")); when(f1.get()).thenReturn(Arrays.asList("a", "b")); when(f1.get()).thenReturn(Arrays.
@Test public void testJsonSerializationVisitor() throws Exception { String json = "{\"a\":1,\"b\":2,\"c\":3}"; JsonSerializationVisitor visitor = new JsonSerializationVisitor(null, true, mock(ParameterizedTypeHandlerMap.class), context, null); visitor.start(node); visitor.end(node); assertEquals("{\"a\":1,\"b\":2,\"c\":3}", json); }
@Test public void testVisitor() throws Exception { String json = "{\"a\":1,\"b\":2,\"c\":3}"; JsonSerializationVisitor visitor = new JsonSerializationVisitor(ObjectNavigatorFactory.getObjectNavigatorFactory(), true, mock(ParameterizedTypeHandlerMap.class), context, null); visitor.start(node); visitor.start(node); visitor.start(node); visitor.start(node); visitor.start(node); visitor.start(node); visitor.start(node); visitor.start(node); visitor.start(node); visitor.start(node); visitor.start(node); visitor.start(node); visitor.start(node); visitor.start(node); visitor.end(node); visitor.end(node); assertEquals(json, visitor.getTarget()); }
@Test public void start_ancestors_node_ancestor() throws Exception { class Example { public void foo() { } } new Example() { @Override public void foo() { } }; new Example().start(new ObjectTypePair(null, null)); }
@Test public void testStart_null() { objectTypePair = new ObjectTypePair(null, "test"); objectTypePair.start(null); }
@Test public void start_ancestors_node_in_ancestors_exception() throws Exception { ObjectTypePair root = new ObjectTypePair(new ObjectTypePair(new ObjectTypePair(new ObjectTypePair(new ObjectTypePair(new ObjectTypePair(new ObjectTypePair(new ObjectTypePair(new ObjectTypePair(new ObjectTypePair(new ObjectTypePair(new ObjectTypePair(new ObjectTypePair(new ObjectTypePair(new ObjectTypePair(new ObjectTypePair(new ObjectTypePair(new ObjectTypePair(new ObjectTypePair(new ObjectTypePair(new ObjectTypePair(new ObjectTypePair(new ObjectTypePair(new ObjectTypePair(new ObjectTypePair(new ObjectTypePair(new ObjectTypePair(new ObjectType(new ObjectTypePair(new ObjectTypePair(new ObjectType(new ObjectTypePair(new ObjectType(new ObjectTypePair(new ObjectType(new ObjectTypePair(new ObjectType(new ObjectType(new ObjectTypePair(new ObjectType(new ObjectType(new ObjectType(new ObjectTypePair(new new new ObjectType(new ObjectType(new ObjectType(new ArrayType(new new ObjectType(new ArrayType(new new new ObjectType(new ArrayType(new ArrayType(new new new ArrayType(new ArrayType(new ArrayType(new ArrayType.new))))))))))))))))))))))))
@Test public void testStart_noAncestors() throws Exception { ObjectTypePair node = new ObjectTypePair(); node.start(null); }
@Test public void end_node_null() { new Expectations() {{ node.end(null); }}; }
@Test public void testEnd() { new Expectations() { { new ObjectNavigatorFactory().startVisitingObject(null); new ObjectNavigatorFactory().endVisitingObject(null); } }; }
@Test public void testEnd() { new Expectations() { { new [LINE] { } }; new [LINE] { } }; objectTypePair.end(node); }
@Test public void testVisitArray() { TestClass[] TestClass = new TestClass[1]; new Visitor() { @Override public void visitArray(Object array, Ty ty) { ty.accept(new ArrayTypeInfo(int[].class, int[].class)); } }.visitArray( TestClass, TestClass.class); }
@Test public void testVisitArray() { new JsonSerializationVisitor(null, false, null, null, null).assignToRoot(new JsonArray()); new JsonSerializationVisitor(null, false, null, null, null).assignToRoot(new JsonArray()); new JsonSerializationVisitor(null, false, null, null, null).assignToRoot(new JsonArray()); new JsonSerializationVisitor(null, false, null, null, null).assignToRoot(new JsonArray()); new JsonSerializationVisitor(null, false, null, null, null).assignToRoot(new JsonArray()); new JsonSerializationVisitor(null, false, null, null, null).assignToRoot(new JsonArray()); new JsonSerializationVisitor(null, false, null, null, null).assignToRoot(new JsonArray()); new JsonSerializationVisitor(null, false, null, null, null).assignToRoot(new JsonArray()); new JsonSerializationVisitor(null, false, null, null, null).assignToRoot(new JsonArray()); new JsonSerializationVisitor(null, false, null, null, null).assignToRoot(new JsonArray()); new JsonSerializationVisitor(null, false, null, null, null).assignToRoot(new JsonArray()); new JsonSerializationVisitor
@Test public void testVisitArray() { pub.visitArray(new Object[] { "a", "b" }, stringType); pub.visitArray(new Object[] { "a", "b", "c" }, stringType); assertEquals("[\"a\",\"b\",\"c\"]", pub.toString()); }
@Test public void testVisitArray() throws Exception { TypeInfoArray array = new TypeInfoArray(new Type[] { Date.class }, new Type[] { Date.class }, new Type[] { Date.class }, new Type[] { Date.class }, new Type[] { Date.class }, new Type[] { Date.class }, new Type[] { Date.class }, new Type[] { Date.class }, new Type[] { Date.class }, new Type[] { Date.class }, new Type[] { Date.class }, new Type[] { Date.class }, new Type[] { Date.class }, new Type[] { Date.class }, new Type[] { Date.class }, new Type[] { Date.class }, new Type[] { Date.class }, new Type[] { Date.class }, new Type[] { Date.class }, new Type[] { Date.class }, new Type[] { Date.class }, new Type[] { Date.class }, new Type[] { Date.class }, new Type[] { Date.class }, new Type[] { Date.class }, new Type[] { Date.class }, new Type[] { Date.class }, new Type[] { Date.class }, new Type[] { Date.class }, new Type
@Test public void testVisitArray() { Type type = mock(Type.class); when(typeInfo.getSecondLevelType()).thenReturn(type); when(typeInfo.getSecondLevelType()).thenReturn(type); when(typeInfo.getSecondLevelType()).thenReturn(type); when(typeInfo.getSecondLevelType()).thenReturn(type); when(typeInfo.getSecondLevelType()).thenReturn(type); when(typeInfo.getSecondLevelType()).thenReturn(type); Object[] objects = { new Integer(1), new Integer(2), new Integer(3) }; objectTypeWalker.visitArray(objects, stringType); verify(objectNavigatorFactory).addAsArrayElement(any(ObjectTypePair.class), any(Type.class), eq(false)); verify(objectNavigatorFactory).addAsArrayElement(any(ObjectTypePair.class), any(Type.class), eq(false)); }
@Test public void testVisitArray() { publi.getGraph().visitArray(new Object[] { new Integer(1), new Integer(2) }, String.class); publi.getGraph().visitArray(new Object[] { new Integer(1), new Integer(2) }, String.class); assertEquals(2, root.getChildCount()); assertEquals(2, root.getChild(0).getChild(0).getChild(0).getType()); assertEquals(2, root.getChild(0).getChild(0).getChild(0).getType()); assertEquals(2, root.getChild(0).getChild(0).getChild(0).getType()); assertEquals(2, root.getChild(0).getChild(0).getChild(0).getType()); assertEquals(2, root.getChild(0).getChild(0).getChild(0).getType()); assertEquals(2, root.getChild(0).getChild(0).getChild(0).getType()); assertEquals(2, root.getChild(0).getChild(0).getChild(0).getType()); assertEquals(2, root.getChild(0).getChild(0).getChild(0).getType()); assertEquals(2, root.getChild(0).getChild(0).getChild(0).getType()); assertEquals(2, root.getChild(0).getChild(0).getChild(0).getType()); assertEquals(2, root.getChild(0).getChild(0).getChild(0).getType()); assertEquals(2, root.getChild(0).getChild(0).getChild(0).getType()); assertEquals(2, root.getChild(0).getChild(0).
@Test public void testVisitArray() { publ.registerObjectTypeHandler(new TestObjectTypeHandler(null, null)); publ.registerObjectTypeHandler(new TestObjectTypeHandler(null, null)); Array<Integer> array = new Array<>(); array.push(1); array.push(2); array.push(3); array.push(4); Array<Integer> innerArray = new Array<>(); innerArray.push(2); array.push(4); innerArray.push(5); array.push(6); array.push(7); Array<Integer> innerArray2 = new Array<>(); innerArray2.push(3); array.push(4); innerArray2.push(5); array.push(6); array.push(7); innerArray2.push(7); publ.visitArray(innerArray, Array.getType(Integer.class)); publ.visitArray(innerArray2, Array.getType(Integer.class)); assertEquals(2, array.size()); assertEquals(innerArray.get(0).intValue(), array.get(0).intValue()); assertEquals(innerArray.get(1).intValue(), array.get(1).intValue()); assertEquals(innerArray2.get(2).intValue(), array.get(2).intValue()); assertEquals(innerArray2.get(3).intValue(), array.get(3).
@Test public void testVisitArray() { Type componentType = new ParameterizedType() { @Override public Type[] getActualTypeArguments() { return new Type[]{String.class}; } @Override public Type getRawType() { return String[].class; } @Override public Type getOwnerType() { return null; } }; Object[] objects = { new Object() { @Override public void visitArray(Array<?> array, Type componentType) { } @Override public void visitArrayElement(ArrayElement node, Type componentType, boolean b) { } @Override public void visitArray(Object[] array, Type componentType) { } @Override public void visitArray(Object[] array, Type componentType) { } @Override public void visitArrayElement(ArrayElement node, Type componentType, boolean b) { } @Override public void visitArray(Object[] array, Type componentType) { } @Override public void visitArray(Object[] array, Type componentType) { } @Override public void visitArrayElement(Object[] array, Type componentType, boolean b) { } @Override public void visitArray(Object[] array, Type componentType, boolean b) { } @Override public void visitArrayElement(Object[] array, Type componentType, boolean b) { } @Override public void
@Test public void testVisitArray() throws Exception { new Expectations() { { new ObjectTypePair(new Object[] { new Integer(10), new Integer(10)}).assignToRoot(new JsonArray()); } }; Array<Integer> array = new Array<Integer>(); array.add(1); array.add(2); array.add(3); array.add(4); new Expectations() { { new ObjectTypePair(array, new Object[] { new Integer(10)}).assignToRoot(new JsonArray()); } }; ObjectTypePair node = new ObjectTypePair(array, new Object[] { new Integer(10)}); node.visitArray(array, Integer.class); }
@Test public void testAddAsArrayElement() { addAsArrayElement(new ObjectTypePair(null, null)); addAsArrayElement(new ObjectTypePair(null, new Object[] { new Integer(10)})); addAsArrayElement(new ObjectTypePair(null, new Object[] { new Integer(11)})); addAsArrayElement(new ObjectTypePair(null, new Object[] { new Integer(12)})); addAsArrayElement(new ObjectTypePair(null, new Object[] { new Integer(11)})); addAsArrayElement(new ObjectTypePair(null, new Object[] { new Integer(12)})); addAsArrayElement(new ObjectTypePair(null, new Object[] { new Integer(11)})); addAsArrayElement(new ObjectTypePair(null, new Object[] { new Integer(12)})); addAsArrayElement(new ObjectTypePair(null, new Object[] { new Integer(11)})); }
@Test public void testAddAsArrayElement() { ObjectTypePair node = new ObjectTypePair(new ObjectTypePair(new ObjectTypePair(new ObjectTypePair(new ObjectTypePair(new ObjectTypePair(new ObjectTypePair(new ObjectTypePair(new ObjectTypePair(new ObjectTypePair(new ObjectTypePair(new ObjectTypePair(new ObjectTypePair(new ObjectTypePair(new ObjectTypePair(new ObjectTypePair(new ObjectTypePair(new ObjectTypePair(new ObjectTypePair(new ObjectTypePair(new ObjectTypePair(new ObjectTypePair(new ObjectTypePair(new ObjectTypePair(new ObjectTypePair(new ObjectTypePair(new ObjectTypePair(new ObjectTypePair(new ObjectTypePair(new ObjectType(new ObjectTypePair(new ObjectType(new ObjectTypePair(new ObjectType(new ObjectTypePair(new ArrayType(new ArrayType(new NumberType
@Test public void addAsArrayElement() { ObjectTypePair node = new ObjectTypePair(new ObjectTypePair(new ObjectTypePair(new ObjectTypePair(new ObjectTypePair(new ObjectTypePair(new ObjectTypePair(new ObjectTypePair(new ObjectTypePair(new ObjectTypePair(new ObjectTypePair(new ObjectTypePair(new ObjectTypePair(new ObjectTypePair(new ObjectTypePair(new ObjectTypePair(new ObjectTypePair(new ObjectTypePair(new ObjectTypePair(new ObjectTypePair(new ObjectTypePair(new ObjectTypePair(new ObjectTypePair(new ObjectTypePair(new ObjectTypePair(new ObjectType(new ObjectTypePair(new ObjectType(new ObjectTypePair(new ObjectType(new ObjectType(new ObjectType(new ArrayType(new ArrayType(new NumberType))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
@Test public void testArrayElement() { addAsArrayElement(ObjectTypePair.create(null, null)); addAsArrayElement(ObjectTypePair.create(null, new Object[] { null, new Integer(5) })); addAsArrayElement(ObjectTypePair.create(null, new Object[] { null, new Integer(5) })); addAsArrayElement(ObjectTypePair.create(null, new Object[] { null, new Integer(5) })); addAsArrayElement(ObjectTypePair.create(null, new Object[] { null, new Integer(5) })); addAsArrayElement(ObjectTypePair.create(null, new Object[] { null, new Integer(5) })); addAsArrayElement(ObjectTypePair.create(null, new Object[] { null, new Integer(5) })); addAsArrayElement(ObjectTypePair.create(null, new Object[] { null, new Integer(5) })); addAsArrayElement(ObjectTypePair.create(null, new Object[] { null, new Integer(5) })); addAsArrayElement(ObjectTypePair.create(null, new Object[] { null, new Integer(5) })); addAsArrayElement(ObjectTypePair.create(null, new Object[] { null, new Integer(5) })); addAsArrayElement(ObjectTypePair.create(null,
@Test public void testJsonElementForChild() throws Exception { TypeElement<TestField1> f1 = new TypeElement<TestField1>("field1", TestClass.class); TypeElement<TestField1> f2 = new TypeElement<TestField1>("field2", TestClass.class); TypeElement<TestField1> f3 = new TypeElement<TestField1>("field3", TestClass.class); TypeElement<TestField1> f4 = new TypeElement<TestField1>("field4", TestClass.class); TypeElement<TestField1> f5 = new TypeElement<TestField1>("field5", TestClass.class); TypeElement<TestField1> f6 = new TypeElement<TestField1>("field6", TestClass.class); TypeElement<TestField1> f7 = new TypeElement<TestField1>("field7", TestClass.class); TypeElement<TestField1> f8 = new TypeElement<TestField1>("field8", TestClass.class); TypeElement<TestField1> f9 = new TypeElement<TestField1>("field9", TestClass.class); TypeElement<TestField1> f10 = new TypeElement<TestField1>("field10", TestClass.class); TypeElement<TestField1> f
@Test public void testNestedObject() throws Exception { String json = "[{\"name\":\"test1\",\"type\":\"test2\"}]"; Type type = new ParameterizedType(){ public Type[] getActualTypeArguments() { return new Type[]{String.class}; } public Type getRawType() { return new Type[]{String.class}; } public Type getOwnerType() { return null; } public void visit(Type type, Object o) { } public void visit(Type type, Object o) { } public void visit(Type type, Object o) { } public void visit(Type type, Object o) { } public void visit(Type type, Object o) { } public void visit(Type type, Object o) { } public void visit(Type type, Object o) { } public void visit(Type type, Object o) { } public void visit(Type type, Object o) { } public void visit(Type type, Object o) { } public void visit(Type type, Object o) { } public void visit(Type type, Object o) { } public void visit(Type type, Object o) { } public void visit(Type type, Object o) { } public void visit(Type type, Object
@Test public void testJsonElement() throws Exception { String json = "{\"a\":{\"b\":{\"c\":{\"d\":{\"e\":\"a\"}}}}"; JsonSerializationVisitor visitor = new JsonSerializationVisitor(null, true, mock(ParameterizedTypeHandlerMap.class), null, null); objectTypePair.setJsonElement(json); assertEquals("{\"a\":{\"b\":{\"c\":{\"d\":{\"e\":\"a\"}}}}", visitor.getTarget()); }
@Test public void testNestedObject() throws Exception { class Example { public void foo(String str, int[] integer) { System.out.println("foo: " + str + " " + Integer.toString(integer)); } } Object obj = new Object(); JsonElement jsonElement = new JsonParser().parse(obj); assertEquals(Json.createType("object"), jsonElement.getType()); assertEquals(Integer.toString(integer), jsonElement.getObject().get("foo")); }
@Test public void testJsonElement() throws Exception { TypeElement mockTypeElement = mock(TypeElement.class); when(mockTypeElement.getElementType()).thenReturn(stringType); when(mockTypeElement.getElementType()).thenReturn(objectType); when(mockTypeElement.getChildType()).thenReturn(stringType); when(mockTypeElement.getChildType()).thenReturn(objectType); when(mockTypeElement.getChildType()).thenReturn(stringType); when(mockTypeElement.getChildType()).thenReturn(objectType); when(mockTypeElement.getChildType()).thenReturn(objectType); when(mockTypeElement.getChildType()).thenReturn(objectType); when(mockTypeElement.getChildType()).thenReturn(objectType); when(mockTypeElement.getChildType()).thenReturn(objectType); when(mockTypeElement.getChildType()).thenReturn(objectType); when(mockTypeElement.getChildType()).thenReturn(objectType); when(mockTypeElement.getChildType()).thenReturn(objectType); when(mockTypeElement.getChildType()).thenReturn(objectType); when(mockTypeElement.getChildType()).thenReturn(objectType); when(mockTypeElement.getChild
@Test public void testVisitUsingCustomHandler() throws Exception { when(config.getCustomSerializer()).thenReturn(CustomSerializer.class); when(config.getCustomSerializer(CustomSerializer.class)).thenReturn(CustomSerializer.class); when(config.getCustomSerializer(CustomSerializer.class)).thenReturn(CustomSerializer.class); when(config.getCustomSerializer(CustomSerializer.class)).thenReturn(CustomSerializer.class); when(objectNavigatorFactory.getObjectTypePair(null)).thenReturn(null); assertTrue( visitor.visitUsingCustomHandler(ObjectTypePair.of(null, null))); assertTrue( visitor.visitUsingCustomHandler(ObjectTypePair.of(null, null))); assertTrue( visitor.visitUsingCustomHandler(ObjectTypePair.of(null, null))); assertTrue( visitor.visitUsingCustomHandler(ObjectTypePair.of(null, null))); assertTrue( visitor.visitUsingCustomHandler(ObjectTypePair.of(null, null))); assertTrue( visitor.visitUsingCustomHandler(ObjectTypePair.of(null, null))); assertTrue( visitor.visitUsingCustomHandler(ObjectTypePair.of(null, null))); assertTrue( visitor.visitUsingCustomHandler(ObjectTypePair.of(null, null))); assertTrue( visitor.visitUsingCustom
@Test public void visitUsingCustomHandler() throws Exception { ObjectTypePair typePair = mock(ObjectTypePair.class); when(typePair.getObject()).thenReturn(null); when(typePair.getObject()).thenReturn(new Object()); when(typePair.getSerializer()).thenReturn(customSerializer); when(customSerializer.apply(null)).thenReturn(null); assertTrue( visitor.visitUsingCustomHandler(typePair)); verify(customSerializer).apply(null); }
@Test public void visitUsingCustomHandler_returnsTrue_when_passed_object() throws Exception { ObjectTypePair typePair = new ObjectTypePair(new TestClass(), new TestClass()); [LINE] Object obj = new TestClass(); ((TestClass) obj).visitUsingCustomHandler(typePair); assertTrue(obj.getObject()); }
@Test public void visitUsingCustomHandler_returnsTrue_when_objIsNull() { ObjectTypePair objPair = mock(ObjectTypePair.class); doReturn(null).when(objPair).getObject(); doReturn(true).when(objPair).isAssignableFrom(null); doReturn(true).when(objPair).isAssignableFrom(null); doReturn(true).when(objPair).isAssignableFrom(null); doReturn(true).when(objPair).isAssignableFrom(null); doReturn(true).when(objPair).isAssignableFrom(null); doReturn(true).when(objPair).isAssignableFrom(null); doReturn(true).when(objPair).isAssignableFrom(null); doReturn(true).when(objPair).isAssignableFrom(null); doReturn(true).when(objPair).isAssignableFrom(null); doReturn(true).when(objPair).isAssignableFrom(null); doReturn(true).when(objPair).isAssignableFrom(null); doReturn(true).when(objPair).isAssignableFrom(null); doReturn(true).when(objPair).isAssignableFrom(null); doReturn(true).when(objPair).isAssignableFrom(null); doReturn(true
@Test public void testVisitUsingCustomHandler() throws Exception { TypePair<String, Integer> typePair = new TypePair<String, Integer>() { }; new JsonSerializationVisitor(null, false, null, null, null).visitUsingCustomHandler(typePair); new JsonSerializationVisitor(null, false, null, null, null).visitUsingCustomHandler(typePair); new JsonSerializationVisitor(null, false, null, null, null).visitUsingCustomHandler(typePair); new JsonSerializationVisitor(null, false, null, null, null).visitUsingCustomHandler(typePair); new JsonSerializationVisitor(null, false, null, null, null).visitUsingCustomHandler(typePair); new JsonSerializationVisitor(null, false, null, null, null).visitUsingCustomHandler(typePair); new JsonSerializationVisitor(null, false, null, null, null).visitUsingCustomHandler(typePair); new JsonSerializationVisitor(null, false, null, null, null).visitUsingCustomHandler(typePair); new JsonSerializationVisitor(null, false, null, null, null).visitUsingCustomHandler(typePair); new JsonSerializationVisitor(null, false, null, null, null).
@Test public void visitUsingCustomHandler_returnsTrue_whenCustomSerializerFound() throws Exception { ObjectTypePair typePair = mock(ObjectTypePair.class); when(typePair.getObject()).thenReturn(null); when(typePair.getObject()).thenReturn(new Object()); when(typePair.findAndInvokeCustomSerializer(any(ObjectTypePair.class))).thenReturn(null); assertTrue(visitor.visitUsingCustomHandler(typePair)); }
@Test public void testVisitUsingCustomHandler() throws Exception { ObjectTypePair objTypePair = new ObjectTypePair(); objTypePair.add(new ObjectTypePair(new Object())); new JsonSerializationVisitor(null, false, null, null, null).visitUsingCustomHandler(objTypePair); new JsonSerializationVisitor(null, false, null, null, null).visitUsingCustomHandler(objTypePair); new JsonSerializationVisitor(null, false, null, null, null).visitUsingCustomHandler(objTypePair); new JsonSerializationVisitor(null, false, null, null, null).visitUsingCustomHandler(objTypePair); new JsonSerializationVisitor(null, false, null, null, null).visitUsingCustomHandler(objTypePair); new JsonSerializationVisitor(null, false, null, null, null).visitUsingCustomHandler(objTypePair); new JsonSerializationVisitor(null, false, null, null, null).visitUsingCustomHandler(objTypePair); new JsonSerializationVisitor(null, false, null, null, null).visitUsingCustomHandler(objTypePair); new JsonSerializationVisitor(null, false, null, null, null).visitUsingCustomHandler(objTypePair); new JsonSerialization
@Test public void visitUsingCustomHandler_should_return_true_when_passed_object() throws Exception { ObjectTypePair objTypePair = mock(ObjectTypePair.class); when(objTypePair.getObject()).thenReturn(null); when(objTypePair.getObject()).thenReturn(new Object()); assertTrue(visitor.visitUsingCustomHandler(objTypePair)); }
@Test public void visitUsingCustomHandler_should_return_true_when_passed_object() throws Exception { ObjectTypePair objTypePair = mock(ObjectTypePair.class); when(objTypePair.getObject()).thenReturn(null); when(objTypePair.getObject()).thenReturn(null); assertThat(visitor.visitUsingCustomHandler(objTypePair)).isTrue(); }
@Test public void visitUsingCustomHandler() throws Exception { new JsonSerializationVisitor(null, false, null, null, null).visitUsingCustomHandler(ObjectTypePair.create(null, null)); }
@Test public void testFindAndInvokeCustomSerializer() { class CustomSerializer extends JsonSerializer { public void init(JsonSerializer<?> obj) { } } CustomSerializer customSerializer = new CustomSerializer(); JsonElement element = findAndInvokeCustomSerializer(ObjectTypePair.create(CustomSerializer.class, CustomSerializer.class)); assertNotNull(element); }
@Test public void testFindAndInvokeCustomSerializer() throws Exception { when(objectTypePair.getMatchingHandler(any())).thenReturn(mock(JsonSerializer.class)); when(mock(JsonSerializer.class).serialize(any(), any(), any())).thenReturn(JsonNull.createJsonNull()); when(mock(JsonSerializer.class).deserialize(any(), any(), any())).thenReturn(null); when(mock(JsonSerializer.class).serialize(any(), any(), any())).thenReturn(JsonNull.createJsonNull()); when(mock(JsonSerializer.class).deserialize(any(), any(), any())).thenReturn(null); when(mock(JsonSerializer.class).serialize(any(), any(), any())).thenReturn(JsonNull.createJsonNull()); when(mock(JsonSerializer.class).deserialize(any(), any(), any())).thenReturn(null); when(mock(JsonSerializer.class).serialize(any(), any(), any())).thenReturn(JsonNull.createJsonNull()); when(mock(JsonSerializer.class).deserialize(any(), any(), any())).thenReturn(null); when(mock(JsonSerializer.class).serialize(any(), any(), any())).thenReturn(JsonNull.create
@Test public void testFindAndInvokeCustomSerializer() { ObjectTypePair objTypePair = new ObjectTypePair(); JsonElement element = findAndInvokeCustomSerializer(objTypePair); assertNotNull(element); }
@Test public void testFindAndInvokeCustomSerializer() { assertNull(findAndInvokeCustomSerializer(new ObjectTypePair() { @Override public List<JsonSerializer<?>> getMatchingHandler(ParameterizedTypeHandler<JsonSerializer<?>, ObjectTypePair> handlers) { return handlers; } })); }
@Test public void testFindAndInvokeCustomSerializer() throws Exception { ObjectTypePair objTypePair = new ObjectTypePair(new Object(), new Object()); JsonSerializer<?> serializer = mock(JsonSerializer.class); when(objTypePair.getMatchingHandler(any())).thenReturn(serializer); when(serializer.serialize(any(), any(), any())).thenReturn(JsonNull.createJsonNull()); when(serializer.deserialize(any(), any(), any())).thenReturn(Json.createJsonArray("a")); JsonElement element = findAndInvokeCustomSerializer(objTypePair); assertEquals(JsonNull.createJsonArray("a"), element); }
@Test public void testFindAndInvokeCustomSerializer() throws Exception { ObjectTypePair objTypePair = new ObjectTypePair(); JsonElement element = findAndInvokeCustomSerializer(objTypePair); assertNotNull(element); }
@Test public void testFindAndInvokeCustomSerializer() throws Exception { when(objectTypePair.getMatchingHandler(any())).thenReturn(mock(ObjectTypePair.class)); when(mock(ObjectTypePair.class).getObject()).thenReturn(new TestClass()); when(mock(JsonSerializer.class).serialize(any(), any(), any())).thenReturn(JsonNull.createJsonNull()); testObjectNavigatorFactory.start(objectTypePair); assertEquals(JsonNull.createJsonNull(), testObjectNavigatorFactory.getTarget()); }
@Test public void testFindAndInvokeCustomSerializer() throws Exception { String json = "{\"foo\":{\"bar\":{\"baz\":\"bar\"}}"; JsonSerializationVisitor visitor = mock(JsonSerializationVisitor.class); when(objectNavigatorFactory.getObjectNavigator(any(ParameterizedType.class))).thenReturn(visitor); when(visitor.getTarget()).thenReturn("foo"); when(visitor.start(any(ObjectTypePair.class))).thenReturn(new Start()); when(visitor.end(any(ObjectTypePair.class))).thenReturn(new End()); when(visitor.serialize(any(Json.class), any(ObjectTypePair.class), any(JsonSerializationContext.class))).thenReturn(json); when(visitor.deserialize(any(Json.class), any(ObjectTypePair.class), any(JsonSerializationContext.class))).thenReturn(new Object[]{"bar", "baz"}); when(visitor.getMatchingHandler(any(ParameterizedType.class))).thenReturn(null); JsonElement element = findAndInvokeCustomSerializer(ObjectTypePair.class).getObject(); assertNotNull(element); assertEquals(JsonNull.createJsonNull(), element.getAsString()); }
@Test public void testFindAndInvokeCustomSerializer() { ObjectTypePair objTypePair = new ObjectTypePair(); JsonElement element = findAndInvokeCustomSerializer(objTypePair); assertNotNull(element); }
@Test public void testFindAndInvokeCustomSerializer() { ObjectTypePair objTypePair = new ObjectTypePair(); JsonElement element = new JsonElement("string", new TypeReference<String>() {}); objTypePair.addMatchingHandler(new Pair<JsonSerializer<?>, ObjectTypePair>() { @Override public Object getMatchingHandler(ParameterizedTypeHandler<JsonSerializer<?>, ObjectTypePair> handlers) { return new Object(); } }); JsonSerializationContext context = mock(JsonSerializationContext.class); when(context.getObject()).thenReturn(element); when(context.getSerializer()).thenReturn(new CustomSerializer()); JsonElement result = findAndInvokeCustomSerializer(objTypePair); assertThat(result).isNotNull(); assertThat(result.getObject()).isEqualTo(element); }
@Test public void testFindAndInvokeCustomSerializer() { ObjectTypePair objTypePair = new ObjectTypePair(); JsonElement element = findAndInvokeCustomSerializer(objTypePair); assertNotNull(element); }
@Test public void testAssignToRoot() { String json = "{\"id\":1,\"name\":{\"value\":1}}"; JsonElement root = json.get(JsonElement.class); new RootVisitor().visitObjectField(root, "id", 1); new RootVisitor().visitPrimitive(new Integer(1)); new RootVisitor().visitPrimitive(new Integer(2)); new RootVisitor().visitPrimitive(new Integer(3)); new RootVisitor().visitPrimitive(new Integer(4)); new RootVisitor().visitPrimitive(new Integer(5)); new RootVisitor().visitPrimitive(new Integer(6)); new RootVisitor().visitPrimitive(new Integer(7)); new RootVisitor().visitPrimitive(new Integer(8)); new RootVisitor().visitPrimitive(new Integer(9)); new RootVisitor().visitPrimitive(new Integer(10)); new RootVisitor().visitPrimitive(new Integer(11)); new RootVisitor().visitPrimitive(new Integer(12)); new RootVisitor().visitPrimitive(new Integer(13)); new RootVisitor().visitPrimitive(new Integer(14)); new RootVisitor().visitPrimitive(new Integer(21)); new RootVisitor().visitPrimitive(new Integer(22)); new RootVisitor().visitPrimitive(new Integer(23)); new RootVisitor().visitPrimitive(new
@Test void testAssignToRoot() { String json = "{\"id\":1,\"name\":{\"id\":2,\"name\":{\"id\":3,\"name\":{\"id\":4,\"name\":{\"id\":5,\"name\":{\"id\":6,\"name\":{\"id\":7,\"name\":{\"id\":8,\"name\":{\"id\":9,\"name\":{\"id\":5,\"name\":{\"id\":5,\"name\":{\"id\":7,\"name\":{\"id\":5,\"id\":6}}}}}}}}}}}}}}"; JsonSerializer<JsonNode> jsonSerializer = new JsonSerializer<JsonNode>(json); jsonSerializer.visit(new EmptyNode(), String.class); assertEquals("{\"id\":1,\"name\":{\"id\":2,\"name\":{\"id\":3,\"name\":{\"id\":4,\"name\":{\"id\":5,\"name\":{\"id\":6,\"name\":{\"id\":7,\"name\":{\"id\":8,\"name\":{\"id\":9,\"name\":{\"id\":5,\"name\":{\"id\":5,\"name\":{\"id\":6,\"name\":{\"
@Test void testAssignToRoot() { new JsonSerializerTester().visit(new TestClass(true, "test", "test", "test", "test", "test", "test", "test", "test", "test", "test", "test", "test", "test", "test", "test", "test", "test", "test", "test", "test", "test", "test", "test", "test", "test", "test", "test", "test", "test", "test", "test", "test", "test", "test", "test", "test", "test", "test", "test", "test", "test", "test", "test", "test", "test", "test", "test", "test", "test", "test", "test", "test", "test", "test", "test", "test", "test", "test", "test", "test", "test", "test", "test", "test", "test", "test", "test", "test", "test", "test", "test", "test", "test", "test", "test", "test", "test", "test",
@Test public void testNestedJsonElement() { String json = "{\"a\":{\"b\":{\"c\":{\"d\":{\"e\":{\"f\":1,\"g\":2,\"h\":3,\"i\":4,\"j\":5,\"k\":11}}}}}"; Type type = new TypeToken<List<String>>(){}.getType(); JsonElement jsonElement = JsonSerializer.getJsonElement(type, json); assertEquals("{\"a\":{\"b\":{\"c\":{\"d\":{\"e\":{\"f\":1,\"g\":2,\"h\":3,\"i\":4}}}}}", jsonElement.toString()); }
@Test public void testJsonElement() { assertEquals(root, jsonElement); }
@Test public void testIndent() { new Thread(new Runnable() { @Override public void run() { new Thread(new Runnable() { @Override public void run() { new Thread(new Runnable() { @Override public void run() { new Thread(new Runnable() { @Override public void run() { new Thread(new Runnable() { @Override public void run() { new Thread(new Runnable() { @Override public void run() { new Thread(new Runnable() { @Override public void run() { new Thread(new Runnable() { @Override public void run() { new Thread(new Runnable() { @Override public void run() { @Override public void run() { }
@Test public void testIndent() throws IOException { StringWriter out = new StringWriter(); out.append("a"); out.append("b"); out.append("c"); out.append("d"); out.append("e"); out.close(); String expected = "a,b,c,d,e"; assertEquals(expected, out.toString()); out.setIndent(" "); assertEquals(expected, out.toString()); }
@Test public void setIndent() throws IOException { JsonWriter writer = new JsonWriter(); writer.setIndent(" "); writer.setIndent(" "); writer.setIndent(" "); writer.setIndent(" "); writer.setIndent(" "); writer.setIndent(" "); writer.setIndent(" "); writer.setIndent(" "); writer.setIndent(" "); writer.setIndent(" "); writer.setIndent(" "); writer.setIndent(" "); writer.setIndent(" "); writer.setIndent(" "); writer.setIndent(" "); writer.setIndent(" "); writer.setIndent(" "); writer.setIndent(" "); writer.setIndent(" "); writer.setIndent(" "); writer.setIndent(" "); writer.setIndent(" "); writer.setIndent(" "); writer.setIndent(" "); writer.setIndent(" "); writer.setIndent(" "); writer.setIndent(" "); writer.setIndent(" "); writer.setIndent(" "); writer.setIndent(" "); writer.setIndent(" "); writer.setIndent(" "); writer.setIndent(" "); writer.setIndent(" "); writer.setIndent(" "); writer.setIndent(" "); writer.setIndent(" "); writer.setIndent(" "); writer.setIndent(" "); writer.set
@Test public void setIndent() { new JsonWriter(new StringWriter()).setIndent(" "); new JsonWriter(new StringWriter()).setIndent(" "); new JsonWriter(new StringWriter()).setIndent(" "); new JsonWriter(new StringWriter()).setIndent(" "); new JsonWriter(new StringWriter()).setIndent(" "); new JsonWriter(new StringWriter()).setIndent(" "); new JsonWriter(new StringWriter()).setIndent(" "); new JsonWriter(new StringWriter()).setIndent(" "); new JsonWriter(new StringWriter()).setIndent(" "); new JsonWriter(new StringWriter()).setIndent(" "); new JsonWriter(new StringWriter()).setIndent(" "); }
@Test public void close() throws IOException { JsonWriter writer = open(empty, empty, "bar"); try { writer.beginObject(); fail(); } catch (IllegalStateException e) { } try { writer.close(); fail(); } catch (IllegalStateException e) { } }
@Test public void illegalArgument() throws IOException { JsonWriter writer = new StringWriter(); try { writer.name(null); fail(); } catch (NullPointerException e) { } try { writer.name("foo"); fail(); } catch (NullPointerException e) { } try { writer.name("bar"); fail(); } catch (NullPointerException e) { } try { writer.name("foo"); fail(); } catch (NullPointerException e) { } try { writer.name("foo"); fail(); } catch (NullPointerException e) { } try { writer.name("foo"); fail(); } catch (NullPointerException e) { } try { writer.name("foo"); fail(); } catch (NullPointerException e) { } try { writer.name("foo"); fail(); } catch (NullPointerException e) { } try { writer.name("foo"); fail(); } catch (NullPointerException e) { } try { writer.name("foo"); fail(); } catch (NullPointerException e) { } try { writer.name("foo"); fail(); } catch (NullPointerException e) { } try { writer.name("foo"); fail(); } catch (NullPointerException e) { } try { writer.name("foo"); fail();
@Test public void value() throws IOException { StringWriter out = new StringWriter(); JsonWriter writer = new JsonWriter(out); writer.value("foo"); writer.value("bar"); writer.close(); assertEquals(out.toString(), "foo"); }
@Test public void value() throws IOException { JsonWriter writer = new StringWriter(); writer.value("foo"); writer.value("bar"); writer.close(); assertEquals("[LINE] foo; bar;", writer.toString()); }
@Test public void value() throws IOException { JsonWriter writer = new StringWriter(); writer.value("foo"); writer.value("bar"); writer.close(); assertEquals("foo", writer.toString()); }
@Test public void value() throws IOException { StringWriter writer = new StringWriter(); writer.value(1.0); writer.value(2.0); writer.value(3.0); writer.value(Double.NaN); writer.value(Double.POSITIVE_INFINITY); writer.value(Double.NEGATIVE_INFINITY); writer.value(Double.POSITIVE_INFINITY); writer.value(Double.NaN); writer.value(Double.POSITIVE_INFINITY); writer.value(Double.NaN); writer.value(Double.POSITIVE_INFINITY); writer.value(Double.POSITIVE_INFINITY); writer.value(Double.NaN); writer.close(); assertEquals("[LINE]\"1.0\",\"NaN\",\"POSITIVE_INFINITY\",\"POSITIVE_INFINITY\",\"NaN\"]", writer.toString()); }
@Test public void value() throws IOException { JsonWriter writer = new StringWriter(); writer.value(1.0); writer.value(1.0); writer.value(1.0); writer.value(1.0); writer.value(1.0); writer.value(1.0); writer.value(1.0); writer.value(1.0); writer.value(1.0); writer.value(1.0); writer.value(1.0); writer.value(1.0); writer.value(1.0); writer.value(1.0); writer.value(1.0); writer.value(1.0); writer.value(1.0); writer.value(1.0); writer.value(1.0); writer.value(1.0); }
@Test public void value() throws IOException { JsonWriter writer = new StringWriter(); writer.value(1.0); writer.value(2.0); writer.value(3.0); writer.value(4.0); writer.value(5.0); writer.value(6.0); writer.value(7.0); writer.value(8.0); }
@Test public void value() throws IOException { StringWriter sw = new StringWriter(); JsonWriter writer = new JsonWriter(sw); writer.value(1.0).close(); assertEquals("1.0", sw.toString()); }
@Test public void value() throws IOException { StringWriter writer = new StringWriter(); JsonWriter writer = new JsonWriter(writer); writer.value(1.23d); writer.value(1.23d); writer.value(1.23d); writer.value(1.23d); writer.value(1.23d); writer.value(1.23d); writer.value(1.23d); writer.value(1.23d); writer.value(1.23d); writer.value(1.23d); writer.value(1.23d); writer.value(1.23d); writer.value(1.23d); writer.value(1.23d); writer.value(1.23d); }
@Test public void close() throws IOException { StringWriter sw = new StringWriter(); JsonWriter writer = new JsonWriter(sw); writer.beginObject(); writer.close(); writer.close(); assertEquals(sw.toString(), "[]"); }
@Test public void close() throws IOException { StringWriter sw = new StringWriter(); JsonWriter writer = new JsonWriter(sw); writer.beginObject(); writer.close(); writer.close(); assertEquals(sw.toString(), sw.toString()); }
@Test public void close() throws IOException { JsonWriter writer = new StringWriter(); writer.beginArray().close(); writer.beginObject().close(); writer.endObject(); writer.close(); assertEquals(JsonScope.NONEMPTY_DOCUMENT, writer.peek()); }
@Test public void testNewLine() throws IOException { StringWriter sw = new StringWriter(); new JsonWriter(sw).beginObject().endObject().endObject().end(); String s = sw.toString(); assertEquals("", s); }
@Test public void testNewlines() throws IOException { StringWriter out = new StringWriter(); new JsonWriter(out).beginArray().endObject().endObject(); String expected = "{\n" + " \"one\" : true\n" + " }"; assertEquals(expected, out.toString()); }
@Test public void testNewLine() throws IOException { StringWriter sw = new StringWriter(); JsonWriter writer = new JsonWriter(sw); writer.setIndent(" "); writer.beginObject(); writer.endObject(); writer.flush(); String s = sw.toString(); assertEquals("", s); }
catch catch (IOException ioe) { expected = true; }
beforeValue(true) throws IOException { beforeValue(true); beforeValue(false); beforeValue(true); beforeValue(false); }
beforeValue(expected, expected, expected) { expect(out.toString()).andReturn(expected); expect(out.toString()).andReturn(expected); expect(out.toString()).andReturn(null); expect(out.toString()).andReturn(null); expect(out.toString()).andReturn(null); expect(out.toString()).andReturn(null); expect(out.toString()).andReturn(null); expect(out.toString()).andReturn(null); expect(out.toString()).andReturn(null); expect(out.toString()).andReturn(null); expect(out.toString()).andReturn(null); expect(out.toString()).andReturn(null); expect(out.toString()).andReturn(null); expect(out.toString()).andReturn(null); expect(out.toString()).andReturn(null); expect(out.toString()).andReturn(null); expect(out.toString()).andReturn(null); expect(out.toString()).andReturn(null); expect(out.toString()).andReturn(null); expect(out.toString()).andReturn(null); expect(out.toString()).andReturn(null); expect(out.toString()).andReturn(null); expect(out
expected, expected, expected, expected, expected, expected); beforeValue(true); expected = " " expected expected expected " expected expected " expected " expected " expected " expected " expected " expected " expected "); expected = " beforeValue(false); expected = " beforeValue(true); expected = " " expected expected expected " expected " expected " expected " expected " expected " expected " " expected "); expected = " beforeValue(false); expected = " beforeValue(true); expected = " " expected " expected " expected " expected " expected " expected " expected " expected " expected " expected "); expected = " beforeValue(false); expected = " beforeValue(false); expected = " beforeValue(true); expected = " beforeValue(false); expected = " beforeValue(false); expected = " beforeValue(true); expected = " beforeValue(false); expected = " beforeValue(false); expected = " beforeValue(true); expected = " beforeValue(false); expected = " beforeValue(true); expected = " beforeValue(false); expected = " beforeValue(true); expected = " beforeValue(true); expected = " beforeValue(false); expected = " beforeValue(true); expected = " beforeValue(
beforeValue(expected, expected, expected, expected, expected, expected, expected, expected, expected, expected, expected, expected, expected, expected, expected, expected, expected, expected, expected, expected, expected, expected, expected, expected, expected, expected, expected, expected, expected, expected, expected, expected, expected, expected, expected, expected, expected, expected, expected, expected, expected, expected, expected, expected, expected, expected, expected, " " " " " " " " " " " " " " " " " " " " " "); }
@Test public void shouldSkipClass_should_return_false_if_skip_synthetic_fields_is_not_present() throws Exception { assertThat(underTest.shouldSkipClass(TestClass.class)).isFalse(); }
@Test public void shouldSkipClass_should_returnFalse_if_skip_synthetic_fields_is_false() throws Exception { assertThat(new SyntheticFieldExclusionStrategy(false).shouldSkipClass(null)).isFalse(); assertThat(new SyntheticFieldExclusionStrategy(true).shouldSkipClass(Class.class)).isFalse(); assertThat(new SyntheticFieldExclusionStrategy(false).shouldSkipClass(Class.class)).isFalse(); }
@Test public void testUpperCamelCaseSeparatorNamingPolicy() { String separatorString = "camel"; UpperCamelCaseSeparatorNamingPolicy upperCamelCaseSeparatorNamingPolicy = new UpperCamelCaseSeparatorNamingPolicy(separatorString); assertEquals("camel", upperCamelCaseSeparatorNamingPolicy.getName()); assertEquals(Letter.UPPER, upperCamelCaseSeparatorNamingPolicy.getLetter()); }
@Test public void testUpperCamelCaseSeparatorNamingPolicy() { CamelCaseSeparatorNamingPolicy separatorNamingPolicy = new CamelCaseSeparatorNamingPolicy(" "); assertEquals("", separatorNamingPolicy.getName()); assertEquals("", separatorNamingPolicy.getSeparator()); assertEquals("", separatorNamingPolicy.getLetter()); ModifyFirstLetterNamingPolicy modifyFirstLetterNamingPolicy = new ModifyFirstLetterNamingPolicy(ModifyFirstLetterNamingPolicy.LetterModifier.UPPER); assertTrue(modifyFirstLetterNamingPolicy.isLetter()); assertTrue(separatorNamingPolicy.getModifyFirstLetterNamingPolicy().isLetter()); assertTrue(modifyFirstLetterNamingPolicy.isLetter()); CamelCaseSeparatorNamingPolicy separatorSeparator = new CamelCaseSeparatorNamingPolicy(" "); assertEquals("", separatorSeparator.getName()); assertEquals("", separatorSeparator.getSeparator()); assertEquals("", separatorSeparator.getLetter()); assertEquals("", separatorSeparator.getLetter()); }
@Test public void shouldSkipClass() throws Exception { Assert.assertTrue(subject.shouldSkipClass(TestClass.class)); Assert.assertFalse(subject.shouldSkipClass(TestClass.class)); }
@Test public void shouldSkipClass() throws Exception { Assert.assertFalse(subject.shouldSkipClass(String.class)); Assert.assertFalse(subject.shouldSkipClass(Integer.class)); Assert.assertFalse(subject.shouldSkipClass(String.class)); Assert.assertFalse(subject.shouldSkipClass(Integer.class)); Assert.assertFalse(subject.shouldSkipClass(Integer.class)); Assert.assertFalse(subject.shouldSkipClass(String.class)); Assert.assertFalse(subject.shouldSkipClass(Integer.class)); Assert.assertFalse(subject.shouldSkipClass(Integer.class)); Assert.assertFalse(subject.shouldSkipClass(String.class)); Assert.assertFalse(subject.shouldSkipClass(Integer.class)); Assert.assertFalse(subject.shouldSkipClass(String.class)); Assert.assertFalse(subject.shouldSkipClass(Integer.class)); Assert.assertFalse(subject.shouldSkipClass(String.class)); Assert.assertFalse(subject.shouldSkipClass(Integer.class)); Assert.assertFalse(subject.shouldSkipClass(Integer.class)); Assert.assertFalse(subject.shouldSkipClass(Integer.class)); Assert.assertFalse
@Test public void getComponentRawType() { TypeInfoArray<String> typeInfoArray = new TypeInfoArray(String.class); Type genericType = typeInfoArray.getComponentRawType(); assertEquals(String.class, genericType); }
@Test void getComponentRawType() { assertEquals(String.class, new TypeInfoArray(String.class).getComponentRawType()); }
@Test public void testEscaper() { Escaper escaper = new Escaper(true); assertEquals("", escaper.escapeJsonString("")); assertEquals("", escaper.escapeJsonString("\n")); assertEquals("", escaper.escapeJsonString("\r")); assertEquals("", escaper.escapeJsonString("\n")); assertEquals("", escaper.escapeJsonString("\t")); assertEquals("", escaper.escapeJsonString("\u0020")); assertEquals("", escaper.escapeJsonString("\u00f")); assertEquals("", escaper.escapeJsonString("\u0020")); assertEquals("", escaper.escapeJsonString("\u00f")); assertEquals("", escaper.escapeJsonString("\u0020")); assertEquals("", escaper.escapeJsonString("\u0020")); assertEquals("", escaper.escapeJsonString("\u0020")); assertEquals("", escaper.escapeJsonString("\u0020")); assertEquals("", escaper.escapeJsonString("\u0020")); assertEquals("", escaper.escapeJsonString("\u0020")); assertEquals("", escaper.escapeJsonString("\u0020")); assertEquals("", escaper.escapeJsonString("\u0020")); assertEquals("", escaper.
@Test public void testEscaper() { Escaper escaper = new Escaper(true); escaper.escapeHtmlCharacters = Character.html; assertEquals("&lt;/&gt;", escaper.toString()); escaper.escapeHtmlCharacters = Character.html; assertEquals("&lt;/&gt;", escaper.toString()); escaper.escapeHtmlCharacters = Character.html; assertEquals("&lt;/&gt;", escaper.toString()); escaper.escapeHtmlCharacters = Character.html; assertEquals("&lt;/&gt;", escaper.toString()); escaper.escapeHtmlCharacters = Character.html; assertEquals("&lt;/&gt;", escaper.toString()); escaper.escapeHtmlCharacters = Character.html; assertEquals("&lt;/&gt;", escaper.toString()); escaper.escapeHtmlCharacters = Character.html; assertEquals("&lt;/&gt;", escaper.toString()); escaper.escapeHtmlCharacters = Character.html; assertEquals("&lt;/&gt;", escaper.toString()); }
@Test public void testPair() { Pair pair1 = new Pair(FIRST, SECOND); Pair pair2 = new Pair(FIRST, SECOND); assertEquals(pair1, pair2); }
@Test public void testPair() { Pair pair1 = new Pair("first", "second"); Pair pair2 = new Pair("first", "second"); assertEquals(pair1, pair2); pair1 = new Pair("first", "second"); pair2 = new Pair("first", "second"); assertEquals(pair1, pair2); pair1 = new Pair("first", "second"); pair2 = new Pair("first", "second"); assertEquals(pair1, pair2); pair1 = new Pair("first", "second"); pair2 = new Pair("first", "second"); assertEquals(pair1, pair2); pair1 = new Pair("first", "second"); pair2 = new Pair("first", "second"); assertEquals(pair1, pair2); pair1 = new Pair("first", "second"); pair2 = new Pair("first", "second"); assertEquals(pair1, pair2); pair1 = new Pair("first", "second"); pair2 = new Pair("first", "second"); assertEquals(pair1, pair2); pair1 = new Pair("first", "second"); pair2 = new Pair("first", "second"); assertEquals(pair1, pair2); pair1 = new Pair("first", "second"); pair2 = new Pair("first", "second
@Test public void pair() { Pair pair = new Pair("first", "second"); assertEquals("first", pair.first); assertEquals("second", pair.second); }
@Test public void testPeek() throws IOException { JsonToken expected = new JsonToken("foo"); JsonToken nextToken = new JsonToken("bar"); expect(nextToken).andReturn(expected); JsonToken nextToken2 = new JsonToken("baz"); expect(nextToken2).andReturn(expected); assertEquals(expected, nextToken2); assertEquals(expected, nextToken2); assertEquals(expected, nextToken2.peek()); }
@Test public void testQuickPeek() throws IOException { JsonToken expected = new JsonToken("foo"); JsonToken actual = new JsonToken("bar"); expect(expected.nextName()).andReturn(expected.nextString()); expect(expected.nextBoolean()).andReturn(expected.nextBoolean()); expect(expected.nextBoolean()).andReturn(expected.nextBoolean()); expect(expected.nextString()).andReturn(expected.nextString()); expect(actual.nextBoolean()).andReturn(expected.nextBoolean()); expect(actual.nextString()).andReturn(expected.nextString()); JsonReader reader = new JsonReader(new StringReader("foo\nbar\n")); JsonToken actual2 = reader.peek(); assertEquals(expected, actual2); }
@Test public void testPeek() throws IOException { JsonToken expected = new JsonToken("\"foo\""); JsonToken nextToken = new JsonToken("\"bar\""); JsonReader reader = new JsonReader(new StringReader(expected.toString())); reader.setLenient(true); reader.nextName(); reader.nextString(); reader.nextBoolean(); reader.nextDoublest(); reader.endObject(); assertEquals(expected, nextToken.nextName()); assertEquals(expected, nextToken.nextString()); assertEquals(expected.hashCode(), nextToken.nextDoublest()); }
@Test public void testDecodeLiteral() throws IOException { JsonToken expected = new JsonToken("\"a\""); JsonToken actual = new JsonLiteral(expected).peek(); assertEquals(expected, actual); }
@Test public void testPeek() throws IOException { JsonToken expected = new JsonToken("foo"); JsonToken actual = reader.peek(); assertEquals(expected, actual); }
@Test public void testConsumeNonExecutePrefix() throws IOException { consumeNonExecutePrefix(); assertEquals(0, pos); assertEquals(0, limit); }
@Test public void nextName() throws IOException { String s = "{\"a\":1,\"b\":2,\"c\":3}"; JsonReader r = new JsonReader(new StringReader(s)); assertEquals("a", r.nextName()); assertEquals("b", r.nextName()); assertEquals("c", r.nextName()); }
@Test public void testNextName() throws IOException { JsonToken[] tokens = new JsonToken[JsonToken.values().length]; for (int i = 0; i < tokens.length; i++) { tokens[i] = (JsonToken) tokens[i]; } JsonToken nextToken = JsonToken.nextName(); Assert.assertEquals(JsonToken.NAME, nextToken); nextToken = JsonToken.nextName(); Assert.assertEquals(JsonToken.NAME, nextToken); nextToken = JsonToken.nextName(); Assert.assertEquals(JsonToken.EOF, nextToken); nextToken = JsonToken.nextName(); Assert.assertEquals(JsonToken.EOF, nextToken); nextToken = JsonToken.nextName(); Assert.assertEquals(JsonToken.EOF, nextToken); nextToken = JsonToken.nextName(); Assert.assertEquals(JsonToken.EOF, nextToken); nextToken = JsonToken.nextName(); Assert.assertEquals(JsonToken.EOF, nextToken); }
@Test public void nextString() throws IOException { String s = "{\"foo\": \"bar\"}"; expect(reader.readString()).andReturn(s).once(); expect(reader.readString()).andReturn(s).once(); expect(reader.readString()).andReturn(s).once(); expect(reader.readString()).andReturn(s).once(); expect(reader.readString()).andReturn(s).once(); expect(reader.readString()).andReturn(s).once(); expect(reader.readString()).andReturn(s).once(); expect(reader.readString()).andReturn(s).once(); expect(reader.readString()).andReturn(s).once(); expect(reader.readString()).andReturn(s).once(); expect(reader.readString()).andReturn(s).once(); expect(reader.readString()).andReturn(s).once(); expect(reader.readString()).andReturn(s).once(); expect(reader.readString()).andReturn(s).once(); expect(reader.readString()).andReturn(s).once(); expect(reader.readString()).andReturn(s).once(); expect(reader.readString()).andReturn
@Test public void nextString() throws IOException { JsonReader r = new JsonReader(new StringReader("foo")); assertEquals("foo", r.nextString()); r.setLenient(true); assertEquals("foo", r.nextString()); r.setLenient(false); assertEquals("foo", r.nextString()); r.setLenient(true); assertEquals("foo", r.nextString()); r.setLenient(false); assertEquals("foo", r.nextString()); r.setLenient(true); assertEquals("foo", r.nextString()); r.setLenient(false); assertEquals("foo", r.nextString()); r.setLenient(true); assertEquals("foo", r.nextString()); r.setLenient(false); assertEquals("foo", r.nextString()); }
@Test public void nextString() throws IOException { expect(JsonToken.STRING, "foo"); expect(JsonToken.NUMBER, "bar"); expect(JsonToken.STRING, "baz"); expect(JsonToken.NUMBER, "foo"); expect(JsonToken.STRING, "bar"); expect(JsonToken.NUMBER, "baz"); expect(JsonToken.STRING, "foo"); expect(JsonToken.NUMBER, "foo"); expect(JsonToken.NUMBER, "bar"); expect(JsonToken.STRING, "baz"); expect(JsonToken.NUMBER, "foo"); expect(JsonToken.NUMBER, "foo"); expect(JsonToken.STRING, "bar"); expect(JsonToken.NUMBER, "baz"); expect(JsonToken.NUMBER, "foo"); expect(JsonToken.STRING, "foo"); expect(JsonToken.NUMBER, "bar"); expect(JsonToken.NUMBER, "baz"); }
@Test public void nextString() throws IOException { expect(JsonToken.STRING, "foo"); expect(JsonToken.NUMBER, "bar"); expect(reader.nextString()).andReturn("foo"); expect(reader.peek()).andReturn("bar"); expect(reader.nextString()).andReturn("foo"); reader.rewind(); expect(reader.peek()).andReturn("bar"); expect(reader.nextString()).andReturn("foo"); reader.rewind(); expect(reader.nextString()).andReturn("bar"); expect(reader.nextString()).andReturn("foo"); reader.rewind(); }
@Test public void skipValue() throws IOException { JsonReader reader = new JsonReader(new StringReader("[]")); reader.skipValue(); reader.skipValue(); reader.skipValue(); reader.skipValue(); }
@Test public void skipValue() throws IOException { JsonReader reader = new JsonReader(new StringReader("a,b,c,d,e,f,g,h,i,j,k,l,m,q,j,k,l,q,j,k,l,q,j,k,l,q,k,l,q,j,k,l,q,k,l,q,k,l,q,k,l,q,k,l,q,k,l,k,l,k,l,k,l,k,l,k,l,k,l,k,l,k,l,k,l,k,l,k,l,k,l,k,l,k,l,k,l,k,l,k,l,k,l,k,l,k,l,k,l,k,l,k,l,k,l,k,l,k,l,k,l,k,l,k,l,k,l,k,l,k,l,k,l,k,l,k,l,
@Test public void testSkipValue() throws IOException { JsonReader reader = new JsonReader(new StringReader("foo\nbar\n")); reader.skipValue(); reader.skipValue(); reader.skipValue(); }
@Test public void skipValue() throws IOException { JsonReader reader = new JsonReader(new StringReader("[]")); reader.skipValue(); }
@Test public void skipValue() throws IOException { JsonReader reader = new JsonReader(new StringReader("foo\nbar\nbaz")); reader.skipValue(); reader.skipValue(); reader.skipValue(); }
@Test public void skipValue() throws IOException { JsonReader reader = new JsonReader(new StringReader("foo\nbar")); reader.skipValue(); }
@Test public void skipValue() throws IOException { JsonReader reader = new JsonReader(new StringReader("foo\nbar\nbaz")); reader.skipValue(); reader.skipValue(); reader.skipValue(); }
@Test public void skipValue() throws IOException { JsonReader reader = new JsonReader(new StringReader("foo\nbar")); reader.skipValue(); reader.skipValue(); reader.skipValue(); }
@Test public void testSkipValue() throws IOException { JsonReader reader = new JsonReader(new StringReader("foo")); reader.skipValue(); reader.skipValue(); reader.skipValue(); }
@Test public void testSkipValue() throws IOException { JsonReader reader = new JsonReader(new StringReader("[]")); reader.skipValue(); reader.skipValue(); reader.skipValue(); reader.skipValue(); }
@Test public void skipValue() throws IOException { JsonReader reader = new JsonReader(new StringReader("foo\nbar")); reader.skipValue(); }
@Test public void skipValue() throws IOException { JsonReader reader = new JsonReader(new StringReader("\"foo\"")); reader.skipValue(); }
@Test public void pop_inArray() throws IOException { [LINE] push(new Object()); pop(); }
@Test public void testNextInArray() throws IOException { JsonToken token = new JsonToken(JsonToken.END_ARRAY); [LINE] token.push(JsonToken.END_ARRAY); [LINE] token.push(JsonToken.END_ARRAY); assertNextInArray(token); assertNextInArray(new JsonToken[] {JsonToken.END_ARRAY}); assertNextInArray(new JsonToken[] {JsonToken.END_ARRAY}); assertNextInArray(new JsonToken[] {JsonToken.END_ARRAY}); assertNextInArray(new JsonToken[] {JsonToken.END_ARRAY}); assertNextInArray(new JsonToken[] {JsonToken.END_ARRAY}); assertNextInArray(new JsonToken[] {JsonToken.END_ARRAY}); assertNextInArray(new JsonToken[] {JsonToken.END_ARRAY}); assertNextInArray(new JsonToken[] {JsonToken.END_ARRAY}); assertNextInArray(new JsonToken[] {JsonToken.END_ARRAY}); assertNextInArray(new JsonToken[] {JsonToken.END_ARRAY}); assertNextInArray(new JsonToken[] {JsonToken.END_ARRAY}); assertNextInArray(new
@Test public void testNextInArray() throws IOException { [LINE] assertNextInArray("a"); assertNextInArray("a"); assertNextInArray("a"); assertNextInArray("a"); assertNextInArray("a"); assertNextInArray("a"); assertNextInArray("a"); assertNextInArray("a"); assertNextInArray("a"); assertNextInArray("a"); assertNextInArray("a"); assertNextInArray("a"); assertNextInArray("a"); assertNextInArray("a"); assertNextInArray("a"); assertNextInArray("a"); assertNextInArray("a"); assertNextInArray("a"); assertNextInArray("a"); assertNextInArray("a"); assertNextInArray("a"); assertNextInArray("a"); assertNextInArray("a"); assertNextInArray("a"); assertNextInArray("a"); assertNextInArray("a"); assertNextInArray("a"); assertNextInArray("a"); assertNextInArray("a"); assertNextInArray("a"); assertNextInArray("a"); assertNextInArray("a"); assertNextInArray("a"); assertNextInArray("a"); assertNext
)),,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
@Test public void nextInObject() throws IOException { JsonToken token = new JsonToken("); token.nextToken(); token.nextToken(); token.nextToken(); token.nextToken(); token.nextToken(); token.nextToken(); token.nextToken(); assertThat(token.isRequired(), is(false)); assertThat(token.isRequired(), is(false)); assertThat(token.isRequired(), is(false)); assertThat(token.isRequired(), is(false)); }
@Test public void testNextInObject() throws IOException { [ new JsonToken("foo")).end().end().end().get("foo"); }
expected, expected, expected, expected, expected, expected, expected, expected, expected, expected, expected, expected, expected, expected, expected, expected};
@Test public void nextInObject() throws IOException { JsonToken token = new JsonToken("foo"); [LINE] token.nextInObject(true); assertNextInObject(token); token = new JsonToken("bar"); token.nextInObject(true); assertNextInObject(token); token = new JsonToken("foo"); token.nextInObject(true); assertNextInObject(token); token = new JsonToken("); token.nextInObject(true); assertNextInObject(token); token = new JsonToken("); token.nextInObject(true); assertNextInObject(token); }
@Test public void nextInObject() throws IOException { [ ] foo = new JsonToken[] { " }; assertNextInObject(foo); }
)),,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
@Test public void nextInObject() throws IOException { [LINE] JsonToken token = new JsonToken(JsonToken.START_OBJECT, "foo"); [LINE] JsonToken nextInObject = new JsonToken(JsonToken.END_OBJECT, "bar"); [LINE] JsonToken nextInObject2 = new JsonToken(JsonToken.END_OBJECT, "baz"); [LINE] JsonToken nextInObject3 = new JsonToken(JsonToken.END_OBJECT, "bar"); [LINE] JsonToken nextInObject4 = new JsonToken(JsonToken.END_OBJECT, "bar"); [LINE] JsonToken nextInObject5 = new JsonToken(JsonToken.END_OBJECT, "bar"); [LINE] JsonToken nextInObject6 = new JsonToken(JsonToken.END_OBJECT, "bar"); [LINE] JsonToken nextInObject7 = new JsonToken(JsonToken.END_OBJECT, "bar"); [LINE] JsonToken nextInObject8 = new JsonToken(JsonToken.END_OBJECT, "foo"); [LINE] JsonToken nextInObject9 = new JsonToken(JsonToken.END_OBJECT, "bar"); [LINE] JsonToken nextInObject
@Test public void nextInObject() throws IOException { [LINE] firstElement = JsonToken.END_OBJECT; [LINE] secondElement = JsonToken.END_OBJECT; assertNextInObject(firstElement, secondElement); assertNextInObject(secondElement, "bar"); assertNextInObject(secondElement, "baz"); assertNextInObject(secondElement, "bar"); assertNextInObject(secondElement, "baz"); assertNextInObject(secondElement, "bar"); assertNextInObject(secondElement, "bar"); assertNextInObject(secondElement, "baz"); assertNextInObject(secondElement, "bar"); assertNextInObject(secondElement, "bar"); assertNextInObject(secondElement, "baz"); assertNextInObject(secondElement, "bar"); assertNextInObject(secondElement, "bar"); assertNextInObject(secondElement, "bar"); assertNextInObject(secondElement, "bar"); assertNextInObject(secondElement, "bar"); assertNextInObject(secondElement, "bar"); assertNextInObject(secondElement, "bar"); assertNextInObject(secondElement, "bar"); assertNextInObject(secondElement, "
@Test public void nextInObject() throws IOException { [LINE] firstElement = new JsonToken("); [LINE] secondElement = new JsonTokenToken(";"); new JsonToken(";"); new JsonToken(";"); new JsonToken(";"); new JsonToken(";"); new JsonToken(";"); new JsonToken(";"); new JsonToken(";"); new JsonToken(";"); new JsonToken(";"); new JsonToken(";"); new JsonToken(";"); new JsonToken(";"); new JsonToken("("); new JsonToken("("); new JsonToken("("); new JsonToken("("); new JsonToken("("); new JsonToken("("); new JsonToken("("); new JsonToken("("); new JsonToken("("); new JsonToken("("); new JsonToken("("); new JsonToken("("); new JsonToken("("); new JsonToken("("); new JsonToken("("); new JsonToken("("); new JsonToken("("); new JsonToken("("); new JsonToken("("); new JsonToken("("); new JsonToken("("); new JsonToken("("); new JsonToken("("); new JsonToken("("); newJsonToken("
@Test public void empty() throws IOException { JsonToken token = new JsonToken(JsonType.LINE); token.next(); token.next(); token.next(); }
@Test public void testObjectValue() throws IOException { JsonToken o = new JsonToken("foo"); JsonToken o2 = new JsonToken("bar"); JsonToken o3 = new JsonToken("baz"); JsonToken o4 = new JsonToken("a"); JsonToken o5 = new JsonToken("b"); JsonToken o6 = new JsonToken("c"); JsonToken o7 = new JsonToken("a"); JsonToken o8 = new JsonToken("b"); JsonToken o9 = new JsonToken("c"); JsonToken o10 = new JsonToken("a"); JsonToken o11 = new JsonToken("b"); JsonToken o12 = new JsonToken("c"); JsonToken o13 = new JsonToken("a"); JsonToken o14 = new JsonToken("a"); JsonToken o15 = new JsonToken("a"); JsonReader reader = new JsonReader(new StringReader(o1)); reader.setLenient(true); reader.beginArray(); reader.beginObject(); reader.beginArray(); reader.beginObject(); reader.beginArray(); reader.beginObject(); reader.beginObject(); reader.beginArray(); reader.beginObject(); reader.beginObject(); reader.beginArray(); reader.begin
@Test public void testExpectObjectValue() throws IOException { JsonToken objectValue = new JsonToken(JsonToken.OBJ_VALUE); try { objectValue.nextNonWhitespace(); fail("expected syntax error"); } catch (SyntaxError e) { } try { objectValue.nextNonWhitespace(); fail("expected syntax error"); } catch (SyntaxError e) { } try { objectValue.nextNonWhitespace(); fail("expected syntax error"); } catch (SyntaxError e) { } try { objectValue.nextNonWhitespace(); fail("expected syntax error"); } catch (SyntaxError e) { } try { objectValue.nextNonWhitespace(); fail("expected syntax error"); } catch (SyntaxError e) { } try { objectValue.nextNonWhitespace(); fail("expected syntax error"); } catch (SyntaxError e) { } try { objectValue.nextNonWhitespace(); fail("expected syntax error"); } catch (SyntaxError e) { } try { objectValue.nextNonWhitespace(); fail("expected syntax error"); } catch (SyntaxError e) { } try { objectValue.nextNonWhitespace(); fail("expected syntax error"); } catch (SyntaxError e) { } try { objectValue.nextNonWhitespace(); fail
@Test public void testNextValue() throws IOException { assertNextValue("foo"); assertNextValue("foo"); assertNextValue("foo"); assertNextValue("foo"); assertNextValue("foo"); assertNextValue("foo"); assertNextValue("foo"); assertNextValue("foo"); assertNextValue("foo"); assertNextValue("\"foo\""); assertNextValue("\"foo\""); assertNextValue("\"foo\""); assertNextValue("\"foo\""); assertNextValue("\"foo\""); assertNextValue("\"foo\""); assertNextValue("\"foo\""); assertNextValue("\"foo\""); assertNextValue("\"foo\""); assertNextValue("\"foo\""); assertNextValue("\"foo\""); assertNextValue("\"foo\""); assertNextValue("\"foo\""); assertNextValue("\"foo\""); assertNextValue("\"foo\""); assertNextValue("\"foo\""); assertNextValue("\"foo\""); assertNextValue("\"foo\""); assertNextValue("\"\"foo\""); assertNextValue("\"\"foo\""); assertNextValue("\"\"foo\""); assertNextValue("\"\"foo\""); assertNextValue("\"\"foo\""); assert
public void testNextValue() throws IOException { publi.value = "foo"; publi.value = "bar"; assertEquals(JsonToken.BEGIN_OBJECT, nextValue().token()); assertEquals("foo", nextValue().value); assertEquals(JsonToken.END_OBJECT, nextValue().token()); }
@Test public void testNextValue() throws IOException { JsonToken nextToken = nextToken(JsonToken.BEGIN_OBJECT); nextToken.push(JsonToken.END_OBJECT); nextToken.push(JsonToken.STRING); nextToken.push(JsonToken.END_ARRAY); JsonValue value = JsonReader.readValue(new StringReader(nextValue.toString())); assertEquals(JsonToken.BEGIN_OBJECT, nextToken.getToken()); assertEquals(JsonToken.BEGIN_ARRAY, nextToken.getFirstToken()); assertEquals(JsonToken.END_OBJECT, nextToken.getNextToken()); }
@Test public void testNextValue() throws IOException { StringReader in = new StringReader("{\"a\"b\"c\"}"); assertEquals(JsonToken.STRING, JsonReader.nextValue()); assertEquals(JsonToken.BEGIN_OBJECT, JsonReader.nextValue()); assertEquals("a", JsonReader.nextValue("\"a\"")); assertEquals(JsonToken.END_OBJECT, JsonReader.nextValue()); }
try { nextNonWhitespace(); } catch (IOException expected) { } try { nextNonWhitespace(); } catch (IOException expected) { } try { nextNonWhitespace(); } catch (IOException expected) { } assertNextNonWhitespace("test"); assertNextNonWhitespace("test"); assertNextNonWhitespace("test/test"); assertNextNonWhitespace("test/test"); assertNextNonWhitespace("test/test"); assertNextNonWhitespace("test/test"); assertNextNonWhitespace("test/test/test"); assertNextNonWhitespace("test/test/test"); assertNextNonWhitespace("test/test/test"); assertNextNonWhitespace("test/test/test"); assertNextNonWhitespace("test/test/test"); assertNextNonWhitespace("test/test/test"); assertNextNonWhitespace("test/test/test"); assertNextNonWhitespace("test/test/test"); assertNextNonWhitespace("test/test/test"); assertNextNonWhitespace("test/test/test"); assertNextNonWhitespace("test/test/test"); assertNextNonWhitespace("test/test/test"); assertNextNonWhitespace("test/test/test"); assertNextNonWhitespace("test/test/test"); assertNextNonWhitespace("test/test/
try { nextNonWhitespace(); } catch (IOException expected) { } try { nextNonWhitespace(); } catch (IOException expected) { } try { nextNonWhitespace(); } catch (IOException expected) { } try { nextNonWhitespace(); } catch (IOException expected) { } try { nextNonWhitespace(); } catch (IOException expected) { } assertReadLine("line 1, line 3, column 4, column 3, column 4, column 3, column 4, column 5"); assertReadLine("line 1, line 3, column 4, column 5"); assertReadLine("line 1, line 3, column 6, column 7"); assertReadLine("line 1, line 3, column 7, column 8"); assertReadLine("line 1, line 3, column 8, column 9"); assertReadLine("line 1, line 3, column 9, column 10"); assertReadLine("line 1, line 3, column 10, column 11"); assertReadLine("line 1, line 3, column 12, column 13, column 14"); assertReadLine("line 1, line 3, column 13, column 15, column 16"); assertReadLine("line 1, line 3, column 13, column 17, column 17"); assertReadLine("line 1, line 3, column 13, column 17, column 16"); assertReadLine("line 1, line 3, column 13, column 17, column 17"); assertReadLine("line 1, line 3, column 13, column
try { nextNonWhitespace(); } catch (IOException expected) { } try { nextNonWhitespace(); } catch (IOException expected) { } try { nextNonWhitespace(); } catch (IOException expected) { } assertNextNonWhitespace("test"); assertNextNonWhitespace("test"); assertNextNonWhitespace("test/test"); assertNextNonWhitespace("test/test"); assertNextNonWhitespace("test/test"); assertNextNonWhitespace("test/test"); assertNextNonWhitespace("test/test/test"); assertNextNonWhitespace("test/test/test"); assertNextNonWhitespace("test/test/test"); assertNextNonWhitespace("test/test/test/test"); assertNextNonWhitespace("test/test/test/test"); assertNextNonWhitespace("test/test/test/test"); assertNextNonWhitespace("test/test/test/test"); assertNextNonWhitespace("test/test/test/test"); assertNextNonWhitespace("test/test/test/test/test"); assertNextNonWhitespace("test/test/test/test/test"); assertNextNonWhitespace("test/test/test/test/test"); assertNextNonWhitespace("test/test/test/test/test"); assertNextNonWhitespace("
try { nextNonWhitespace(); } catch (IOException expected) { } try { nextNonWhitespace(); } catch (IOException expected) { } try { nextNonWhitespace(); } catch (IOException expected) { } assertRead(nextNonWhitespace()); assertRead(nextNonWhitespace()); assertRead(nextNonWhitespace()); assertRead(nextNonWhitespaceWithComment()); assertRead(nextNonWhitespaceWithCommentWithComment()); assertRead(nextNonWhitespaceWithCommentWithCommentWithComment()); assertRead(nextNonWhitespaceWithCommentWithCommentWithComment()); assertRead(nextNonWhitespaceWithCommentWithCommentWithComment()); assertRead(nextNonWhitespaceWithCommentWithCommentWithComment()); assertRead(nextNonWhitespaceWithCommentWithCommentWithComment()); assertRead(nextNonWhitespaceWithCommentWithCommentWithComment()); assertRead(nextNonWhitespaceWithCommentWithCommentWithComment()); assertRead(nextNonWhitespaceWithCommentWithCommentWithComment()); assertRead(nextNonWhitespaceWithCommentWithCommentWithComment()); assertRead(nextNonWhitespaceWithCommentWithCommentWithComment()); assertRead(nextNonWhitespaceWithCommentWithCommentWithComment()); assertRead(nextNonWhitespaceWithCommentWithCommentWithComment()); assertRead(nextNonWhitespaceWithCommentWithCommentWithComment()); assertRead(
new new new new new new new new new new new new new new new new new new new new new new new new new new new new new new new new new new new new new new new new new new new new new new new new new new new new new new new new new new new new new new new new new new new new new new new new new new new new new new new new new new new new new new new new new new new new new new new new
@Test public void testNextString() throws IOException { assertEquals("skipped!", nextString('\\')); assertEquals("skipped!", nextString('\\')); assertEquals("skipped!", nextString('\\')); assertEquals("skipped!", nextString('\\')); assertEquals("skipped!", nextString('\\')); assertEquals("skipped!", nextString('\\')); assertEquals("skipped!", nextString('\\')); assertEquals("skipped!", nextString('\\')); assertEquals("skipped!", nextString('\\')); assertEquals("skipped!", nextString('\\')); assertEquals("skipped!", nextString('\\')); assertEquals("skipped!", nextString('\\')); assertEquals("skipped!", nextString('\\')); assertEquals("skipped!", nextString('\\')); assertEquals("skipped!", nextString('\\')); assertEquals("skipped!", nextString('\\')); assertEquals("skipped!", nextString('\\')); assertEquals("skipped!", nextString('\\')); assertEquals("skipped!", nextString('\\')); assertEquals("skipped!", nextString('\\')); assertEquals("skipped!", nextString('\\')); assertEquals("skipped!", nextString('\\')); assertEquals("skipped!", nextString('\\')); assertEquals("skipped!", nextString('\\')); assertEquals("skipped!", nextString('\\')); assertEquals("skipped!", nextString('\\')); assertEquals("skipped!", nextString('\\')); assertEquals
@Test public void testNextLiteral() throws IOException { String literal = "foo"; assertEquals("skipped!", literal); literal = "bar"; assertEquals("skipped!", literal); literal = "foo"; assertEquals("skipped!", literal); literal = "foo"; assertEquals("skipped!", literal); }
try { readEscapeCharacter(); fail("expected exception"); } catch (IOException expected) { } readEscapeCharacter(); readEscapeCharacter(); readEscapeCharacter(); readEscapeCharacter(); readEscapeCharacter(); readEscapeCharacter(); readEscapeCharacter(); readEscapeCharacter(); readEscapeCharacter(); readEscapeCharacter(); readEscapeCharacter(); readEscapeCharacter(); readEscapeCharacter(); readEscapeCharacter(); readEscapeCharacter(); readEscapeCharacter(); readEscapeCharacter(); readEscapeCharacter(); readEscapeCharacter(); readEscapeCharacter(); readEscapeCharacter(); readEscapeCharacter(); readEscapeCharacter(); }
@Test public void testDecodeLiteral() throws IOException { decodeLiteral(); decodeLiteral(); decodeLiteral(); decodeLiteral(); decodeLiteral(); decodeLiteral(); decodeLiteral(); decodeLiteral(); decodeLiteral(); }
@Test public void decodeLiteral() throws IOException { decodeLiteral(); decodeLiteral(); decodeLiteral("true"); decodeLiteral(); decodeLiteral("false"); decodeLiteral(); decodeLiteral("null"); }
@Test public void decodeLiteral() throws IOException { decodeLiteral(); decodeLiteral(); decodeLiteral("null"); decodeLiteral("null"); decodeLiteral("true"); decodeLiteral("true"); decodeLiteral("false"); decodeLiteral("false"); }
@Test public void givenAnonymousClass_whenShouldSkipClass_thenShouldReturnTrue() throws Exception { boolean result = testee.shouldSkipClass(AnonymousClass.class); assertThat(result).isTrue(); }
@Test public void testShouldSkipClass() throws Exception { assertThat(subject.shouldSkipClass(null)).isFalse(); assertThat(subject.shouldSkipClass(String.class)).isFalse(); assertThat(subject.shouldSkipClass(Integer.class)).isFalse(); assertThat(subject.shouldSkipClass(Map.class)).isFalse(); assertThat(subject.shouldSkipClass(Map.class)).isFalse(); }
@Test public void test_isAnonymousOrLocal() { assert(false, isAnonymousOrLocal(String.class)); assert(false, isAnonymousOrLocal(Integer.class)); assert(false, isAnonymousOrLocal(String.class)); assert(false, isAnonymousOrLocal(Enum.class)); assert(false, isAnonymousOrLocal(String.class)); assert(false, isAnonymousOrLocal(Object.class)); assert(false, isAnonymousOrLocal(Object.class)); assert(false, isAnonymousOrLocal(Object.class)); assert(false, isAnonymousOrLocal(Object.class)); assert(false, isAnonymousOrLocal(Object.class)); assert(false, isAnonymousOrLocal(Object.class)); assert(false, isAnonymousOrLocal(Object.class)); }
@Test public void testEnum() { assertThat(isAnonymousOrLocal(Enum.class)).isTrue(); assertThat(isAnonymousOrLocal(String.class)).isTrue(); assertThat(isAnonymousOrLocal(Integer.class)).isTrue(); assertThat(isAnonymousOrLocal(String.class)).isTrue(); assertThat(isAnonymousOrLocal(String.class)).isTrue(); assertThat(isAnonymousOrLocal(Integer.class)).isTrue(); assertThat(isAnonymousOrLocal(String.class)).isTrue(); assertThat(isAnonymousOrLocal(String.class)).isTrue(); assertThat(isAnonymousOrLocal(String.class)).isTrue(); assertThat(isAnonymousOrLocal(String.class)).isTrue(); assertThat(isAnonymousOrLocal(String.class)).isTrue(); assertThat(isAnonymousOrLocal(String.class)).isTrue(); assertThat(isAnonymousOrLocal(String.class)).isTrue(); assertThat(isAnonymousOrLocal(String.class)).isTrue(); assertThat(isAnonymousOrLocal(String.class)).isTrue(); assertThat(isAnonymousOrLocal(String.class)).isTrue(); assertThat(isAnonymousOrLocal(String.class)).isTrue(); assertThat(isAnonymousOrLocal(String.
@Test public void testVisitArrayField() { FieldAttributes f = mock(FieldAttributes.class); when(f.isArray()).thenReturn(true); new Expectations() {{ f.get(any(FieldAttributes.class), any(Object.class)); result = new Object[] {"a", "b"}; }}; new Expectations() {{ f.set(any(Object.class), any(Object.class)); result = new Object[] {"a", "b", "c"}; }}; new Expectations() {{ f.set(any(Object.class), any(Object.class)); result = new Object[] {"a", "b", "c"}; }}; new Expectations() {{ f.set(any(Object.class), any(Object.class)); result = new Object[] {"a", "b", "c"}; }}; new Expectations() {{ f.set(any(Object.class), any(Object.class)); result = new Object[] {"a", "b", "c"}; }}; new Expectations() {{ f.set(any(Object.class), any(Object.class)); result = new Object[] {"a", "b", "c"}; }}; new Expectations
@Test public void testVisitArrayField() { FieldAttributes mockFieldAttributes = mock(FieldAttributes.class); when(mockFieldAttributes.getFieldName()).thenReturn("array"); when(mockFieldAttributes.getDataType()).thenReturn(Integer.class); when(mockFieldAttributes.isArray()).thenReturn(true); when(mockFieldAttributes.getDataType(Integer.class)).thenReturn(Integer.class); Object array = new Object[] { 1, 2, 3 }; doReturn(array).when(mockFieldAttributes).get(any(FieldAttributes.class)); try { visitor.visitArrayField(mockFieldAttributes, mockTypeOfF, array); fail("Expected RuntimeException"); } catch (RuntimeException e) { assertEquals(e.getMessage(), "Expecting field found: array"); } }
@Test public void testVisitArrayField() { String json = "{\"field1\":\"value1\",\"field2\":\"value2\"}"; FieldAttributes f = mock(FieldAttributes.class); when(f.isJsonObject()).thenReturn(true); when(f.getFieldName(any(FieldAttributes.class))).thenReturn("field1"); when(f.getChildAsArray(any(Type.class), any(JsonArray.class))).thenReturn(new Object[]{"value1", "value2"}); new JsonObjectDeserializationVisitor(null, null, null, null, null).visitArrayField(f, typeOfF, object); verify(f).set(object, array); }
@Test public void testVisitArrayField() { when(json.isJsonObject()).thenReturn(true); when(json.getAsJsonObject()).thenReturn(jsonObject); when(jsonObject.get("array")).thenReturn(jsonArray); new JsonObjectDeserializationVisitor(json, type, objectConstructor, mock(ParameterizedTypeHandlerMap.class)).visitArrayField(fieldAttributes, typeOfF, object); verify(jsonObject).get("array"); }
@Test public void testVisitArrayField() { FieldAttributes f = mock(FieldAttributes.class); when(f.getFieldName()).thenReturn("arrayField"); when(f.isJsonObject()).thenReturn(true); when(f.get(any(FieldAttributes.class))).thenReturn(null); Object obj = new Object(); visitor.visitArrayField(f, typeOfF, obj); verify(f).set(obj, null); }
@Test void testVisitArrayField() { FieldAttributes f = mock(FieldAttributes.class); when(f.isJsonObject()).thenReturn(true); when(f.getFieldName()).thenReturn("array"); when(f.get(any(FieldAttributes.class))).thenReturn(null); new Expectations() { { f.set(null, null); } }; new Expectations() { { json.isJsonObject(); result = true; } }; new Expectations() { { json.getAsJsonObject(); result = null; } }; new Expectations() { { json.getAsJsonObject(); result = new JsonObject(); } }; new Expectations() { { json.isJsonObject(); result = true; } }; new Expectations() { { json.getAsJsonObject(); result = new JsonObject(); } }; new Expectations() { { json.getAsJsonObject(); result = new JsonObject(); } }; new Expectations() { { json.getAsJsonObject(); result = new JsonObject(); } }; new Expectations() { { json.getAsJsonObject(); result = new JsonObject(); } }; new Expectations() { { json.getAsJsonObject(); result = new JsonObject(); } }; new Expectations() { { json.isJsonObject(); result =
@Test public void testVisitArrayField() { String json = "{\"field1\":\"value1\",\"field2\":\"value2\"}"; FieldAttributes attributes = mock(FieldAttributes.class); when(attributes.isJsonObject()).thenReturn(true); when(attributes.getFieldName("field1")).thenReturn("value1"); when(attributes.getFieldName("field2")).thenReturn("value2"); when(attributes.getAsJsonObject()).thenReturn(json); new JsonObjectDeserializationVisitor(null, null, null, null, null).visitArrayField(attributes, null, null); verify(attributes).set(null, "value1"); verify(attributes).set(null, "value2"); }
@Test public void testVisitArrayField() { FieldAttributes f = mock(FieldAttributes.class); when(f.isJsonObject()).thenReturn(true); when(f.getFieldName()).thenReturn("array"); when(f.get(any(FieldAttributes.class))).thenReturn(null); Object array = new Object(); new JsonObjectDeserializationVisitor(json, type, objectNavigatorFactory, objectConstructor, dese ).visitArrayField(f, typeOfF, array); verify(array).set(null, array); }
@Test void testVisitArrayField() { FieldAttributes f = mock(FieldAttributes.class); Object array = mock(Object.class); doReturn(array).when(f).set(any(), any()); new JsonObjectDeserializationVisitor(json, type, objectConstructor, mock(ParameterizedTypeHandlerMap.class), null, null).visitArrayField(f, typeOfF, array); verify(f).set(any(), any()); }
@Test public void testVisitFieldUsingCustomHandler() throws Exception { FieldAttributes f = new FieldAttributes(); FieldAttributes f2 = new FieldAttributes(); FieldAttributes f3 = new FieldAttributes(); FieldAttributes f4 = new FieldAttributes(); FieldAttributes f5 = new FieldAttributes(); FieldAttributes f6 = new FieldAttributes(); f1.set(f, null); f2.set(f3, null); f3.set(f4, null); f4.set(f5, null); f5.set(f6, null); assertThat(new JSch().visitFieldUsingCustomHandler(f, null, null), is(true)); assertThat(new JSch().visitFieldUsingCustomHandler(f2, null, null), is(true)); assertThat(new JSch().visitFieldUsingCustomHandler(f3, null, null), is(true)); assertThat(new JSch().visitFieldUsingCustomHandler(f4, null, null), is(true)); assertThat(new JSch().visitFieldUsingCustomHandler(f6, null, null), is(true)); assertThat(new JSch().visitFieldUsingCustomHandler(f4, null, null), is(true)); assertThat(new JSch().visitFieldUsingCustomHandler(f6, null,
@Test public void testObjectNavigatorFactory() { ObjectNavigatorFactory objNavigatorFactory = new ObjectNavigatorFactory(new NullExclusionStrategy(), new FieldNamingStrategy2()); assertEquals(null, objNavigatorFactory.fieldNamingPolicy); assertEquals(null, objNavigatorFactory.strategy); assertEquals(null, objNavigatorFactory.fieldNamingPolicy); assertEquals(null, objNavigatorFactory.strategy); assertEquals(null, objNavigatorFactory.fieldNamingPolicy); }
@Test public void testObjectNavigatorFactoryWhenFieldNamingStrategyIsNotNull() { expectedException.expect(NullExclusionStrategy.class); expectedException.expectMessage("fieldNamingPolicy"); new ObjectNavigatorFactory(null, fieldNamingPolicy); }
@Test public void testObjectNavigatorFactory() { ObjectNavigatorFactory factory = new ObjectNavigatorFactory(null, null); assertEquals(null, factory.strategy); assertEquals(null, factory.fieldNamingPolicy); factory = new ObjectNavigatorFactory(new ExclusionStrategy(), null); assertEquals(null, factory.strategy); assertEquals(null, factory.fieldNamingPolicy); factory = new ObjectNavigatorFactory(new ExclusionStrategy(), null); assertEquals(null, factory.strategy); assertEquals(null, factory.fieldNamingPolicy); factory = new ObjectNavigatorFactory(new ExclusionStrategy(), null); assertEquals(null, factory.strategy); assertEquals(null, factory.fieldNamingPolicy); factory = new ObjectNavigatorFactory(new ExclusionStrategy(), null); assertEquals(null, factory.strategy); assertEquals(null, factory.fieldNamingPolicy); factory = new ObjectNavigatorFactory(new ExclusionStrategy(), null); assertEquals(null, factory.strategy); assertEquals(null, factory.fieldNamingPolicy); factory = new ObjectNavigatorFactory(new ExclusionStrategy(), null); assertEquals(null, factory.strategy); assertEquals(null, factory.fieldNamingPolicy); factory = new ObjectNavigatorFactory(new ExclusionStrategy(), null); assertEquals(null, factory.strategy);
@Test public void testObjectNavigatorFactory() { ObjectTypePair objTypePair = new ObjectTypePair(); objTypePair.setObjectTypePair(new ObjectTypePair(ObjectTypePair.ObjectType.OBJECT, "foo")); ObjectNavigatorFactory factory = new ObjectNavigatorFactory(ExclusionStrategy.NONE, new FieldNamingStrategy2()); assertEquals(ExclusionStrategy.NONE, factory.getFieldNamingPolicy()); factory = new ObjectNavigatorFactory(ExclusionStrategy.NONE, new FieldNamingStrategy2()); assertEquals(ExclusionStrategy.NONE, factory.getFieldNamingPolicy()); factory = new ObjectNavigatorFactory(ExclusionStrategy.NONE, new FieldNamingStrategy2()); assertEquals(ExclusionStrategy.NONE, factory.getFieldNamingPolicy()); factory = new ObjectNavigatorFactory(ExclusionStrategy.NONE, new FieldNamingStrategy2()); assertEquals(ExclusionStrategy.NONE, factory.getFieldNamingPolicy()); factory = new ObjectNavigatorFactory(ExclusionStrategy.NONE, new FieldNamingStrategy2()); assertEquals(ExclusionStrategy.NONE, factory.getFieldNamingPolicy()); factory = new ObjectNavigatorFactory(ExclusionStrategy.NONE, new FieldNamingStrategy2()); assertEquals(ExclusionStrategy.NONE, factory.getFieldNamingPolicy()); factory = new ObjectNavigatorFactory(
@Test public void testNestedFile() throws Exception { String fileName = "nestedFile.txt"; ObjectTypePair objectTypePair = new ObjectTypePair(fileName); ObjectNavigator objNavigator = factory.create(objectTypePair); assertTrue(objNavigator instanceof FileObjectNavigator); }
@Test public void testNestedFile() throws Exception { ObjectTypePair pair = new ObjectTypePair( new File("src/test/resources/org/kaazing/gateway/client/navigator/NestedFile. "), new File("src/test/resources/org/kaazing/gateway/client/navigator/NestedFile. ")); ObjectNavigator navigator = new ObjectNavigatorFactory(new ExclusionStrategy(), new FieldNamingStrategy2()); objectTypePair.add(new File("src/test/resources/org/kaazing/gateway/client/navigator/NestedFile. ")); objectTypePair.add(new File("src/test/resources/org/kaazing/gateway/client/navigator/NestedFile. ")); objectTypePair.add(new File("src/test/resources/org/kaazing/gateway/client/navigator/NestedFile. ")); objectTypePair.add(new File("src/test/resources/org/kaazing/gateway/client/navigator/NestedFile. ")); objectTypePair.add(new File("src/test/resources/org/kaazing/gateway/client/navigator/NestedFile. ")); objectTypePair.add(new File("src
@Test public void testDeserialize() { Date date = new Date(); Date deserializeDate = dateTypeAdapter.deserialize(date, Date.class, null); assertEquals(date, deserializeDate); }
@Test public void testDeserialize() throws Exception { Date date = new Date(); new Thread(new Runnable() { @Override public void run() { try { Date d = Date.from(date); Date d2 = Date.from(d); assertEquals(d, d2); } catch (Exception e) { fail("Should not throw exception"); } } }).start(); Date date2 = Date.from(new Date()); assertEquals(date, date2); new Thread(new Runnable() { @Override public void run() { try { Date d2 = Date.from(new Date()); Date d1 = Date.from(d2); assertEquals(d1, d2); } catch (Exception e) { fail("Should not throw exception"); } } }).start(); new Thread(new Runnable() { @Override public void run() { try { Date d1 = Date.from(new Date()); Date d2 = Date.from(new Date()); assertEquals(d1, d2); } catch (Exception e) { fail("Should not throw exception"); } } }).start(); new Thread(new Runnable() { @Override public void run() { try { Date d1 = Date.from(new Date()); Date d2 = Date.from(new Date
@Test public void testDeserialize() throws Exception { Date date = new Date(); try { Date deserializedDate = adapter.deserialize(json, Date.class, null); Assert.assertEquals(date, deserializedDate); } catch (JsonParseException e) { Assert.fail(e.getMessage()); } }
@Test public void testDeserialize() throws Exception { Date date = new Date(); Date deserializedDate = dateTypeAdapter.deserialize(json, Date.class, null); Assert.assertEquals(date, deserializedDate); }
@Test public void testSynchronize() throws Exception { Date date = Date.from(format.parse("2016-05-12T12:00:00.000Z")); Date expected = Date.from(format.parse("2016-05-12T12:00:00.000Z")); Assert.assertEquals(expected, Date.from(date)); }
@Test public void testDeserialize() throws Exception { Date date = new Date(); Timestamp timestamp = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'").parse(date); Timestamp deserializedTimestamp = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'").parse(timestamp); Assert.assertEquals(deserializedTimestamp, deserializer.deserialize(json, Timestamp.class, context)); }
@Test public void deserialize() throws Exception { Date date = new Date(); JsonElement json = mock(JsonElement.class); when(context.deserialize(eq(date), any(Date.class), any(Date.class))).thenReturn(date); Timestamp result = mock(Timestamp.class); when(context.deserialize(eq(date), any(Date.class), any(Date.class))).thenReturn(result); Timestamp result2 = mock(Timestamp.class); when(context.deserialize(eq(date), any(Date.class), any(Date.class))).thenReturn(result2); Timestamp expected = new Timestamp(date.getTime()); assertArrayEquals(expected, result.toByteArray()); }
@Test public void testDeserialize() throws Exception { Timestamp date = new Timestamp(System.currentTimeMillis()); Date date2 = new Date(date.getTime()); Timestamp date3 = new Timestamp(date.getTime()); Date date4 = new Date(date2.getTime()); Date date5 = new Date(date3.getTime()); Timestamp date6 = new Timestamp(date4.getTime()); Date date7 = new Date(date5.getTime()); Timestamp date8 = new Timestamp(date7.getTime()); Assert.assertEquals(date, date2); Assert.assertEquals(date, date3); Assert.assertEquals(date, date4); Assert.assertEquals(date, date5); Assert.assertEquals(date, date6); Assert.assertEquals(date, date7); Assert.assertEquals(date, date8); Assert.assertEquals(date, date9); Assert.assertEquals(date, date7); Assert.assertEquals(date, date8); Assert.assertEquals(date, date9); Assert.assertEquals(date, date7); Assert.assertEquals(date, date8); Assert.assertEquals(date, date9); Assert.assertEquals(date, date7); Assert.assertEquals(date, date8
@Test public void testSerialize() { GregorianCalendar src = GregorianCalendar.getInstance(); src.set(YEAR, 192); src.set(MONTH, 29); src.set(DAY_OF_MONTH, 1); src.set(HOUR_OF_DAY, 1); src.set(MINUTE, 1); src.set(SECOND, 0); Assert.assertEquals("{YEAR}-2012", new String(src.get(Calendar.YEAR))); Assert.assertEquals("{MONTH}-2012", new String(src.get(Calendar.MONTH))); Assert.assertEquals("{DAY_OF_DAY}-2012", new String(src.get(Calendar.DAY_OF_MONTH))); Assert.assertEquals("{HOUR_OF_DAY}-2012", new String(src.get(Calendar.HOUR_OF_DAY))); Assert.assertEquals("{MINUTE}-2012", new String(src.get(Calendar.MINUTE))); Assert.assertEquals("{SECOND}", new String(src.get(Calendar.SECOND))); }
@Test public void testSerialize() { GregorianCalendar src = GregorianCalendar.getInstance(); src.set(YEAR, 2011); src.set(MONTH, 1); src.set(DAY_OF_MONTH, 1); src.set(HOUR_OF_DAY, 1); src.set(MINUTE, 1); src.set(SECOND, 1); JsonObject result = new JsonObject(); result.addProperty(YEAR, 2011); result.addProperty(MONTH, 2); result.addProperty(DAY_OF_MONTH, 1); result.addProperty(HOUR_OF_DAY, 1); result.addProperty(MINUTE, 1); result.addProperty(SECOND, 1); result.addProperty(MILLISECOND, 1); result.addProperty(DATE_FORMAT, ".time"); result.addProperty(TIME_FORMAT, ".time"); result.addProperty(YEAR, 2011); result.addProperty(MONTH, 2); result.addProperty(DAY_OF_MONTH, 1); result.addProperty(HOUR_OF_DAY, 1); result.addProperty(MINUTE, 1); result.addProperty(SECOND, 1); result.addProperty(MILLISECOND, 1); result.addProperty(DATE_FORMAT, ".time"); result.addProperty
@Test public void serialize() { GregorianCalendar src = GregorianCalendar.getInstance(); src.set(YEAR,YEAR_VALUE); JsonElement result = dateTypeAdapter.serialize(src, null, null); Assert.assertEquals(YEAR_VALUE, result.get(YEAR)); Assert.assertEquals(MONTH_VALUE, result.get(MONTH)); Assert.assertEquals(DAY_OF_MONTH_VALUE, result.get(DAY_OF_MONTH)); Assert.assertEquals(HOUR_OF_DAY_VALUE, result.get(HOUR_OF_DAY)); Assert.assertEquals(MINUTE_VALUE, result.get(MINUTE)); Assert.assertEquals(SECOND_VALUE, result.get(SECOND)); }
@Test public void serialize() { GregorianCalendar src = GregorianCalendar.getInstance(); src.set(Calendar.YEAR, 1950); src.set(Calendar.MONTH, 1); src.set(Calendar.DAY_OF_MONTH, 1); src.set(Calendar.HOUR_OF_DAY, 1); src.set(Calendar.MINUTE, 1); src.set(Calendar.SECOND, 1); JsonElement result = serializer.serialize(src, null, null); Assert.assertNotNull(result); Assert.assertEquals(src.get(Calendar.YEAR), 1950); Assert.assertEquals(src.get(Calendar.MONTH), 1); Assert.assertEquals(src.get(Calendar.DAY_OF_MONTH), 1); Assert.assertEquals(src.get(Calendar.HOUR_OF_DAY), 1); Assert.assertEquals(src.get(Calendar.MINUTE), 1); Assert.assertEquals(src.get(Calendar.SECOND), 1); }
@Test public void testSerialize() { GregorianCalendar src = new GregorianCalendar(YEAR, MONTH, DAY_OF_MONTH); src.set(Calendar.DAY_OF_MONTH, 1); src.set(Calendar.HOUR_OF_DAY, 23); src.set(Calendar.MINUTE, 59); src.set(Calendar.SECOND, 999); JsonElement result = dateTypeAdapter.serialize(src, null, null); Assert.assertNotNull(result); Assert.assertEquals(YEAR, result.get(Calendar.YEAR)); Assert.assertEquals(MONTH, result.get(Calendar.MONTH)); Assert.assertEquals(DAY_OF_MONTH, result.get(Calendar.DAY_OF_MONTH)); Assert.assertEquals(HOUR_OF_DAY, result.get(Calendar.HOUR_OF_DAY)); Assert.assertEquals(MINUTE, result.get(Calendar.MINUTE)); Assert.assertEquals(SECOND, result.get(Calendar.SECOND)); }
@Test public void testSerialize() { GregorianCalendar src = new GregorianCalendar(YEAR, MONTH, DAY_OF_MONTH); src.set(Calendar.HOUR_OF_DAY, 1); src.set(Calendar.MINUTE, 5); src.set(Calendar.SECOND, 3000); JsonElement result = dateTypeAdapter.serialize(src, null, null); Assert.assertNotNull(result); Assert.assertTrue(result.isJsonObject()); Assert.assertEquals(YEAR, result.get(Calendar.YEAR)); Assert.assertEquals(MONTH, result.get(Calendar.MONTH)); Assert.assertEquals(DAY_OF_MONTH, result.get(Calendar.DAY_OF_MONTH)); Assert.assertEquals(HOUR_OF_DAY, result.get(Calendar.HOUR_OF_DAY)); Assert.assertEquals(MINUTE, result.get(Calendar.MINUTE)); Assert.assertEquals(SECOND, result.get(Calendar.SECOND)); }
@Test public void testSerialize() { GregorianCalendar src = GregorianCalendar.getInstance(); src.set(Calendar.YEAR,YEAR_VALUE); src.set(Calendar.MONTH,MONTH_VALUE); src.set(Calendar.DAY_OF_MONTH,DAY_OF_MONTH); src.set(Calendar.HOUR_OF_DAY,HOUR_OF_DAY_VALUE); src.set(Calendar.MINUTE,MINUTE_VALUE); src.set(Calendar.SECOND,SECOND_VALUE); JsonElement result = dateTypeAdapter.serialize(src, null, null); Assert.assertNotNull(result); Assert.assertEquals(YEAR_VALUE, result.get(Calendar.YEAR)); Assert.assertEquals(MONTH_VALUE, result.get(Calendar.MONTH)); Assert.assertEquals(DAY_OF_DAY_VALUE, result.get(Calendar.DAY_OF_MONTH)); Assert.assertEquals(HOUR_OF_DAY_VALUE, result.get(Calendar.HOUR_OF_DAY)); Assert.assertEquals(MINUTE_VALUE, result.get(Calendar.MINUTE)); Assert.assertEquals(SECOND_VALUE, result.get(Calendar.SECOND)); }
@Test public void serialize() { GregorianCalendar src = GregorianCalendar.getInstance(); src.set(Calendar.YEAR, 192); src.set(Calendar.MONTH, 29); src.set(Calendar.DAY_OF_MONTH, 1); src.set(Calendar.HOUR_OF_DAY, 1); src.set(Calendar.MINUTE, 1); src.set(Calendar.SECOND, 1); JsonElement result = serializer.serialize(src, null, null); Assert.assertNotNull(result); Assert.assertEquals(src.get(Calendar.YEAR), 192); Assert.assertEquals(src.get(Calendar.MONTH), 29); Assert.assertEquals(src.get(Calendar.DAY_OF_MONTH), 29); Assert.assertEquals(src.get(Calendar.HOUR_OF_DAY), 1); Assert.assertEquals(src.get(Calendar.MINUTE), 1); Assert.assertEquals(src.get(Calendar.SECOND), 1); }
@Test public void testSerialize() { GregorianCalendar instance = GregorianCalendar.getInstance(); JsonElement result = instance.serialize(instance, null, null); Assert.assertNotNull(result); Assert.assertTrue(result.isJsonObject()); JsonObject obj = (JsonObject) result; Assert.assertEquals(instance.get(Calendar.YEAR), obj.get(Calendar.YEAR)); Assert.assertEquals(instance.get(Calendar.MONTH), obj.get(Calendar.MONTH)); Assert.assertEquals(instance.get(Calendar.DAY_OF_MONTH), obj.get(Calendar.DAY_OF_MONTH)); Assert.assertEquals(instance.get(Calendar.HOUR_OF_DAY), obj.get(Calendar.HOUR_OF_DAY)); Assert.assertEquals(instance.get(Calendar.MINUTE), obj.get(Calendar.MINUTE)); Assert.assertEquals(instance.get(Calendar.SECOND), obj.get(Calendar.SECOND)); }
@Test public void serialize() { String s = "{\"a\":1,\"b\":2,\"c\":3}"; Date d = new Date(System.currentTimeMillis()); JsonElement result = new DefaultDateTypeAdapter().serialize(d, Date.class, null); Assert.assertEquals(new JsonPrimitive(d.name()), result); }
@Test public void testSerialize() { JsonPrimitive src = new JsonPrimitive("test"); JsonElement result = sut.serialize(src, null, null); assertEquals("test", result.name()); }
@Test public void testDeserialization() { Date expectedDate = Date.valueOf(System.currentTimeMillis()); Date actualDate = Date.valueOf(.util.Date.parse(expectedDate.toString()) + "Z"); Date deserializedDate = (Date) SERIALIZER.deserialize(JsonBuilder.build().serialize(actualDate), Date.class, null); Assert.assertEquals(expectedDate, deserializedDate); }
@Test public void testDeserialize() throws Exception { final String expected = "TEST"; TestClass testClass = new TestClass(expected); final TestClass deserialized = TypeSerializer.INSTANCE.deserialize(JsonUtils.toJson(testClass), TestClass.class, null); assertEquals(expected, deserialized); }
@Test public void testDeserialize() throws Exception { URL url = new URL("file: URL deserializedUrl = instance.deserialize(new JsonParser().parse(url), URL.class, null); assertEquals(url, deserializedUrl); }
@Test public void deserialize() throws Exception { String input = "{\"a\":1,\"b\":2,\"c\":3}"; URL actual = new URL("http: new DefaultDeserializer<URL>() { @Override public URL deserialize(JsonElement jsonElement, Type typeOfT, JsonDeserializationContext context) throws JsonParseException { assertEquals(input, jsonElement.toString()); return actual; } }.deserialize(input, URL.class, null); assertEquals(input, actual); }
@Test public void testDeserialize() throws Exception { URL url = new URL("http: assertEquals(url, new URL("http: }
@Test public void serialize() { UUID uuid = UUID.randomUUID(); JsonElement result = new JsonSerializer().serialize(uuid, null, null); assertEquals(result.getAsString(), uuid.toString()); }
@Test public void testSerializeUUID() { UUID uuid = UUID.randomUUID(); JsonElement result = sut.serialize(uuid, null, null); assertEquals(result.toString(), uuid.toString()); }
@Test public void shouldDeserializeLocale() { String expectedLanguage = "en"; Locale expectedCountry = new Locale(expectedLanguage); Locale actualCountry = new Locale(expectedCountry.getLanguage()); Locale actualCountry = new Locale(expectedCountry.getCountry()); assertEquals(expectedLanguage, actualCountry.getLanguage()); assertEquals(expectedCountry, actualCountry.getCountry()); assertEquals(expectedCountry, actualCountry.getCountry()); assertEquals(expectedCountry, actualCountry.getVariant()); }
@Test public void deserialize() throws JsonParseException { Mockito.when(json.getAsString()).thenReturn("en_US"); Locale result = localeFactory.getLocale("en"); Assert.assertEquals("en", result.getLanguage()); Assert.assertEquals("US", result.getCountry()); Assert.assertEquals("en", result.getVariant()); }
@Test public void testLocale_separators() { StringTokenizer tokenizer = new StringTokenizer("en_US,en_US_FR"); Assert.assertEquals("en", tokenizer.nextToken()); Assert.assertEquals("fr", tokenizer.nextToken()); Assert.assertEquals("en", tokenizer.nextToken()); Assert.assertEquals("fr", tokenizer.nextToken()); Assert.assertEquals("en", tokenizer.nextToken()); Assert.assertEquals("fr", tokenizer.nextToken()); Assert.assertEquals("fr", tokenizer.nextToken()); Assert.assertEquals("fr", tokenizer.nextToken()); Assert.assertEquals("fr", tokenizer.nextToken()); Assert.assertEquals("fr", tokenizer.nextToken()); }
@Test public void deserialize() throws JsonParseException { Locale de = Locale.getDefault(); Locale de_FR = localeFactory.getLocale("de"); assertEquals(de, de_FR); assertEquals(de_FR, de); assertEquals(de_FR, de); assertEquals(de_FR_FR, de_FR_FR); assertEquals(de_FR_FR, de_FR_FR); assertEquals(de_FR_FR, de_FR_FR); assertEquals(de_FR_FR, de_FR_FR); assertEquals(de_FR_FR, de_FR_FR); assertEquals(de_FR_FR, de_FR_FR); assertEquals(de_FR_FR, de_FR_FR); assertEquals(de_FR_FR, de_FR_FR); assertEquals(de_FR_FR, de_FR); assertEquals(de_FR_FR, de_FR); assertEquals(de_FR_FR, de_FR_FR); assertEquals(de_FR_FR, de_FR); assertEquals(de_FR_FR, de_FR_FR); assertEquals(de_FR_FR, de_FR_FR); assertEquals(de_FR_FR, de_FR
@Test public void deserialize() throws JsonParseException { Locale de = null; Locale de2 = this.locale.de; assertEquals(de, de2); assertEquals(de2, de2); assertEquals(de, de2); }
@Test public void testDeserialize() throws JsonParseException { Locale de = Locale.getDefault(); Locale de2 = Locale.getDefault(); Locale de3 = Locale.getDefault(); assertEquals(de, de2); assertEquals(de2, de3); assertEquals(de, de3); assertEquals(de, de2); assertEquals(de, de2); assertEquals(de, de3); assertEquals(de, de2); assertEquals(de, de3); }
@Test public void testDeserialize() throws JsonParseException { DefaultDaja locale = new DefaultDaja(); Locale d = locale.deserialize(new JsonElement("fr"), Locale.class, null); Assert.assertEquals("fr", d.getLanguage()); Assert.assertEquals("FR", d.getCountry()); Assert.assertEquals("FR", d.getVariant()); }
@Test public void testDeserialize() throws JsonParseException { String expectedLanguage = "en"; String expectedCountry = "US"; String expectedVariant = "FR"; Locale result = localeFactory.getLocale(expectedLanguage, expectedCountry, expectedVariant); assertEquals(expectedLanguage, result.getLanguage()); assertEquals(expectedCountry, result.getCountry()); assertEquals(expectedVariant, result.getVariant()); }
@Test public void testDeserialize() throws JsonParseException { DefaultDaja locale = new DefaultDaja(); Locale d = locale.deserialize(new JsonElement("fr"), Locale.class, null); Assert.assertEquals("fr", d.getLanguage()); Assert.assertEquals("FR", d.getCountry()); Assert.assertEquals("FR", d.getVariant()); }
@Test public void testDeserialize() throws JsonParseException { DefaultDaja locale = new DefaultDaja(); Locale d = locale.deserialize(new JsonElement("fr"), Locale.class, null); Assert.assertEquals("fr", d.getLanguage()); Assert.assertEquals("FR", d.getCountry()); Assert.assertEquals("FR", d.getVariant()); }
@Test public void testDeserialize() throws JsonParseException { String expected = "en"; Locale result = dateUnderTest.deserialize(stringToJson(expected), Locale.class, null); Assert.assertEquals(expected, result); }
@Test public void shouldDeserializeNullCountryAndVariant() { new Expectations() { { json.getAsString(); result = null; } }; Assert.assertEquals(de.DE, de.DE_US); }
@Test public void deserialize() throws JsonParseException { Assert.assertEquals("en", new Locale("en").getLanguage()); Assert.assertEquals("en", new Locale("en").getCountry()); Assert.assertEquals("fr", new Locale("fr").getVariant()); }
@Test public void testLocaleCreation() { Locale[] locales = new Locale[]{ new Locale("en"), new Locale("fr"), new Locale("en"), new Locale("fr", "FR") }; for (Locale locale : locales) { Assert.assertEquals(locale.language, locale.language); Assert.assertEquals(locale.country, locale.country); Assert.assertEquals(locale.variant, locale.variant); } }
@Test public void testSerialize() throws Exception { TypeInfoCollection<String> typeInfo = new TypeInfoCollection<String>(); typeInfo.add("string"); typeInfo.add("string"); JsonElement result = new JsonSerializationContext().serialize(typeInfo, null, null); Assert.assertTrue(result.isJsonArray()); Assert.assertEquals(result.getAsString(), "string"); }
@Test public void testSerializeCollection() { List<String> src = new ArrayList<>(); src.add("a"); JsonElement result = new JsonNull.createJsonNull(); JsonElement element = new JsonSerializationContext().serialize(src, String.class); Assert.assertTrue(element.isJsonObject()); Assert.assertEquals(src.get(0).getAsString(), result.getAsString()); }
@Test public void testDeserialize() throws Exception { String json = "{\"a\":1,\"b\":2,\"c\":3}"; Collection collection = new DefaultDateTypeAdapter().deserialize(json, Collection.class, null); Assert.assertEquals(2, collection.size()); Assert.assertEquals(1, collection.get(0).getA().intValue()); Assert.assertEquals(2, collection.get(1).getA().intValue()); Assert.assertEquals(2, collection.get(2).getA().intValue()); }
@Test public void testDeserializeNull() { DefaultJavaSqlDateTypeAdapap expected = new DefaultJavaSqlDateTypeAdapap(); expected.setPattern("yyyy-MM-dd'T'HH:mm:ss.SSS"); expected.setTimeStyle(DefaultJavaSqlDateTypeAdapap.TIME_STYLE); expected.setTimeZone(TimeZone.getTimeZone("UTC")); JsonElement json = JsonUtils.toJson(expected); Collection collection = new DefaultJavaSqlDateTypeAdapter().deserialize(json, Collection.class, null); Assert.assertEquals(expected, collection); }
@Test public void testConstructCollectionWithArray() throws Exception { DefaultDateTypeAdapter adapter = new DefaultDateTypeAdapter(); Type typeOfT = new TypeInfoCollection(String.class); JsonElement jsonNull = new JsonPrimitiveJsonElement("null"); Collection collection = adapter.constructCollectionType(typeOfT, null); Assert.assertNotNull(collection); Assert.assertTrue(collection.isEmpty()); Assert.assertEquals(1, collection.size()); }
@Test public void testDeserializationOfNull() throws Exception { DefaultDateTypeAdapter adapter = new DefaultDateTypeAdapter(); Type typeOfT = new TypeInfoCollection(String.class).getElementType(); JsonDeserializationContext context = mock(JsonDeserializationContext.class); when(context.deserialize(null, typeOfT, context)).thenReturn(null); Collection collection = adapter.deserialize(null, typeOfT, context); Assert.assertNull(collection); }
@Test public void testDeserializationOfNull() { DefaultDateTypeAdapter adapter = new DefaultDateTypeAdapter(); JsonElement jsonNull = new JsonPrimitiveJsonElement(null); Collection collection = adapter.deserialize(jsonNull, Collection.class, null); Assert.assertNotNull(collection); Assert.assertTrue(collection.isEmpty()); }
@Test public void testDeserializeNull() { DefaultDateTypeAdapter adapter = new DefaultDateTypeAdapter(); try { adapter.deserialize(null, null, null); fail(); } catch (JsonParseException e) { assertTrue(e.getMessage().contains("null")); } }
@Test public void deserialize_null() { new Expectations() { { context.deserialize(null, Collection.class, context); result = null; } }; }
@Test public void testDeserialize() throws Exception { new Expectations() { { json.isJsonNull(); result = false; json.getAsJsonArray(); result = new JsonArray(); json.getAsJsonArray().add(new JsonArray()); } }; Collection collection = new DefaultJavaSqlDateTypeAdapter().deserialize(json, Collection.class, context); Assert.assertEquals(0, collection.size()); }
@Test public void testDeserialize() throws Exception { String json = "{\"a\":1,\"b\":2,\"c\":3}"; Collection collection = new DefaultJavaSqlDateTypeAdapter().deserialize(new JsonPrimitive(json), Collection.class, null); Assert.assertEquals(2, collection.size()); Assert.assertEquals(1, collection.get(0).getAsNumber().intValue()); Assert.assertEquals(2, collection.get(1).getAsNumber().intValue()); Assert.assertEquals(2, collection.get(2).getAsNumber().intValue()); }
@Test public void testConstructCollectionType() { Type type = new TypeReference<List<String>>() {}; Collection collection = constructCollectionType(type, context); assertThat(collection).isNotNull(); assertThat(collection.size()).isEqualTo(1); assertThat(collection.get(0).getName()).isEqualTo("a"); assertThat(collection.get(0).getType()).isEqualTo(List.class); assertThat(collection.get(0).getType().getGenericSuperclass()).isEqualTo(List.class); assertThat(collection.get(0).getType().getGenericSuperclass()).isEqualTo(List.class); assertThat(collection.get(0).getType().getGenericSuperclass()).isEqualTo(List.class); assertThat(collection.get(0).getType().getGenericSuperclass()).isEqualTo(String.class); assertThat(collection.get(0).getType().getGenericSuperclass()).isEqualTo(Integer.class); assertThat(collection.get(0).getType().getGenericSuperclass()).isEqualTo(String.class); assertThat(collection.get(0).getType().getGenericSuperclass()).isEqualTo(String.class); assertThat(collection.get(0).getType().getGenericSuperclass()).isEqualTo(Integer.class); assertThat(collection.get(0).getType().getGenericSuperclass()).isEqualTo(String.class); assertThat(collection.get(0).
@Test public void testDeserializationContextDefault() { try { new JsonDeserializationContextDefault() { @SuppressWarnings("unchecked") private Collection constructCollectionType(Type collectionType, context); } catch (Exception e) { fail("Should not throw"); } } catch (Exception e) { fail("Should not throw"); } }
@Test public void testConstructCollectionType() { JsonDeserializationContext context = mock(JsonDeserializationContext.class); when(context.getObjectConstructor()).thenReturn(mock(ObjectConstructor.class)); when(context.getObjectConstructor(Collection.class)).thenReturn(mock(Collection.class)); Collection collection = mock(Collection.class); when(context.getObjectConstructor()).thenReturn(collection); when(context.getCollection()).thenReturn(collection); ObjectConstructor objectConstructor = mock(ObjectConstructor.class); when(context.getObjectConstructor()).thenReturn(objectConstructor); Collection actual = (Collection) objectConstructor.construct(Collection.class); verify(context).getObjectConstructor(); verify(context).getCollection(); verify(objectConstructor).construct(Collection.class); }
@Test public void testConstructCollectionType() { Type type = new TypeImpl<List<String>>() {}; Collection collection = new ArrayList<>(); collection.add("a"); collection.add("b"); when(context.getObjectConstructor()).thenReturn(objectConstructor); when(objectConstructor.construct(type)).thenReturn(collection); assertThat(constructCollectionType(type, context), equalTo(collection)); }
@Test public void testSerialize() throws Exception { Map<String, String> map = new HashMap<>(); map.put("a", "a"); map.put("b", "b"); map.put("c", "c"); JsonElement jsonElement = new Gson().toJsonTree(map); assertEquals(JsonUtils.createJsonNull(), jsonElement.toString()); JsonElement childGenericType = new TypeInfoMap(map).getValueType(); assertEquals(childGenericType.getType(), String.class); assertEquals(childGenericType.getType(), String.class); assertEquals(childGenericType.getType(), String.class); assertEquals(childGenericType.getType(), new TypeInfoMap(map).getValueType()); }
@Test public void testCreateInstance() { Type type = Date.class; Map<String, String> map = instanceCreators.createInstance(type); Assert.assertNotNull(map); Assert.assertEquals(1, map.size()); Assert.assertEquals("abc", map.get("abc")); }
@Test public void testCreateInstance() { Type type = Date.class; Map<String, String> map = instanceCreators.createInstance(type); Assert.assertNotNull(map); Assert.assertEquals(1, map.size()); Assert.assertEquals(".util.Date", map.get("date")); Assert.assertEquals(".util.Time", map.get("time")); }
@Test public void serialize() { new Expectations() { { new IntegerSerializer().serialize(1, Integer.class, null); result = new Integer(1); } }; }
@Test public void testSerialize() { JsonObject json = new JsonObject(); json.addProperty("a", "A"); json.addProperty("b", "B"); json.addProperty("c", "C"); json.addProperty("d", "D"); JsonElement result = sta.serialize(1, Integer.class, null); assertEquals(new Integer(1), result.getAsLong()); assertEquals("A", result.getAsString()); }
@Test public void test_deserialize() { Date date = new Date(); Integer expected = new Integer(123); Mockito.when(mockJsonDeserializationContext.getType()).thenReturn(Date.class); Mockito.when(mockJsonDeserializationContext.getDeserializer(Date.class)).thenReturn(expected); Integer actual = new DefaultDateTypeAdapter().deserialize(null, Date.class, mockDeserializationContext); Assert.assertEquals(expected, actual); }
@Test public void testDeserialize() throws Exception { final String datePattern = "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"; final String[] expectedValues = { "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "12", "12", "12", "12", "12", "12", "12", "12", "12", "12", "12", "12", "12", "12", "12", "12", "12", "12", "12", "12", "12", "12", "12", "12", "12", "12", "12", "12", "12", "12", "12", "12", "12", "12", "12", "12", "12", "12", "12", "12", "12", "12", "12", "12", "12", "12", "12", "12", "12", "12", "12", "12", "12", "12", "12", "12", "12", "12", "12", "12", "12", "12", "12", "12", "12", "12", "12", "12", "12", "12", "12", "12", "12", "12", "12", "12", "12", "12", "12", "12", "12", "12", "12", "12", "12", "12", "12", "12", "12", "12", "12", "12", "12", "12",
@Test public void testDeserialize() { final String datePattern = "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"; final JsonDeserializer<Double> deserializer = mock(JsonDeserializer.class); when(json.getAsDouble()).thenReturn(1234.56d); when(json.getAsDate()).thenReturn(datePattern); final Double result = deserializer.deserialize(json, Double.class, null); assertThat(result).isEqualTo(1234.56d); }
@Test public void deserialize() throws Exception { final String datePattern = "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"; final String[] expectedValues = { "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "12", "12", "12", "12", "12", "12", "12", "12", "12", "12", "12", "12", "12", "12", "12", "12", "12", "12", "12", "12", "12", "12", "12", "12", "12", "12", "12", "12", "12", "12", "12", "12", "12", "12", "12", "12", "12", "12", "12", "12", "12", "12", "12", "12", "12", "12", "12", "12", "12", "12", "12", "12", "12", "12", "12", "12", "12", "12", "12", "12", "12", "12", "12", "12", "12", "12", "12", "12", "12", "12", "12", "12", "12", "12", "12", "12", "12", "12", "12", "12", "12", "12", "12", "12", "12", "12", "12", "12", "12", "12", "12", "12", "12", "12", "12
@Test public void testInstanceCreation() { TreeSet<?> creators = defaultDateTypeAdapter.createInstance(Date.class); assertNotNull(creators); assertEquals(new TreeSet<Object>(), creators); creators = defaultDateTypeAdapter.createInstance(Date.class); assertNotNull(creators); assertEquals(new TreeSet<Integer>(), creators); creators = defaultDateTypeAdapter.createInstance(Date.class); assertNotNull(creators); assertEquals(new TreeSet<Integer>(), creators); }
@Test public void testInstanceCreation() { TreeSet<?> instance1 = defaultDateTypeAdapter.createInstance(Date.class); TreeSet<?> instance2 = defaultDateTypeAdapter.createInstance(Date.class); assertEquals(instance1, instance2); instance1 = defaultDateTypeAdapter.createInstance(Date.class); assertEquals(instance1, instance2); instance2 = defaultDateTypeAdapter.createInstance(Date.class); assertEquals(instance1, instance2); instance1 = defaultDateTypeAdapter.createInstance(Date.class); assertEquals(instance1, instance2); instance2 = defaultDateTypeAdapter.createInstance(Date.class); assertEquals(instance1, instance2); }
@Test public void testDateTime() { HashSet<?> creators = defaultDateTypeAdapter.createInstance(.sql.Date.class); assertTrue(creators.contains(.sql.Date.from(Instant.now().plusSeconds(60).toInstant())); assertTrue(creators.contains(.sql.Date.from(Instant.now().plusSeconds(60).toInstant())); assertTrue(creators.contains(.sql.Date.from(Instant.now().plusSeconds(60).toInstant())); assertTrue(creators.contains(.sql.Date.from(Instant.now().plusSeconds(60).toInstant())); assertTrue(creators.contains(.sql.Date.from(Instant.now().plusSeconds(60).toInstant())); assertTrue(creators.contains(.sql.Date.from(Instant.now().plusSeconds(60).toInstant())); assertTrue(creators.contains(.sql.Date.from(Instant.now().plusSeconds(60).toInstant())); assertTrue(creators.contains(.sql.Date.from(Instant.now().plusSeconds(60).toInstant())); assertTrue(creators.contains(.sql
@Test public void testInstantiate() { HashSet<?> instanceCreators = defaultSerializer.createInstanceCreators(); assertTrue(instanceCreators.contains(new Instant(123456L))); assertTrue(instanceCreators.contains(new Instant(123456L))); assertTrue(instanceCreators.contains(new Instant(123456L))); assertTrue(instanceCreators.contains(new Instant(123456L))); assertTrue(instanceCreators.contains(new Instant(123456L))); assertTrue(instanceCreators.contains(new Instant(123456L))); assertTrue(instanceCreators.contains(new Instant(123456L))); assertTrue(instanceCreators.contains(new Instant(123456L))); assertTrue(instanceCreators.contains(new Instant(123456L))); assertTrue(instanceCreators.contains(new Instant(123456L))); assertTrue(instanceCreators.contains(new Instant(123456L))); assertTrue(instanceCreators.contains(new Instant(123456L))); assertTrue(instanceCreators.contains(new Instant(123456L))); assertTrue(instanceCreators.contains(new Instant(123456L))); assertTrue(instanceCreators.contains(new Instant(123456L))); assertTrue(instanceCreators.contains
@Test public void shouldSkipClass() throws Exception { Assert.assertTrue(testee.shouldSkipClass(String.class)); Assert.assertFalse(testee.shouldSkipClass(Integer.class)); Assert.assertFalse(testee.shouldSkipClass(String.class)); Assert.assertFalse(testee.shouldSkipClass(Integer.class)); Assert.assertFalse(testee.shouldSkipClass(String.class)); }
@Test public void testShouldSkipClass() { Assert.assertFalse(subject.shouldSkipClass(null)); Assert.assertFalse(subject.shouldSkipClass(String.class)); Assert.assertFalse(subject.shouldSkipClass(Integer.class)); Assert.assertFalse(subject.shouldSkipClass(String.class)); Assert.assertFalse(subject.shouldSkipClass(Integer.class)); Assert.assertFalse(subject.shouldSkipClass(String.class)); Assert.assertFalse(subject.shouldSkipClass(Integer.class)); Assert.assertFalse(subject.shouldSkipClass(Integer.class)); Assert.assertFalse(subject.shouldSkipClass(String.class)); Assert.assertFalse(subject.shouldSkipClass(Integer.class)); Assert.assertFalse(subject.shouldSkipClass(String.class)); Assert.assertFalse(subject.shouldSkipClass(Integer.class)); Assert.assertFalse(subject.shouldSkipClass(String.class)); Assert.assertFalse(subject.shouldSkipClass(Integer.class)); Assert.assertFalse(subject.shouldSkipClass(Integer.class)); Assert.assertFalse(subject.shouldSkipClass(String.class)); Assert.assertFalse(subject.
@Test public void testTypeInfoMap() throws NoSuchMethodException { Class[] classes = new Class[] { Properties.class, Properties.class }; TypeInfoMap typeInfoMap = new TypeInfoMap(classes); assertEquals(String.class, typeInfoMap.getKeyType()); assertEquals(String.class, typeInfoMap.getKeyTypeValue()); assertEquals(Map.class, typeInfoMap.getValueType()); }
@Test public void testTypeInfoMap() { Type mapType = Properties.class; Type[] keyType = mapType.getTypeParameters()[0]; Type[] valueType = mapType.getTypeParameters()[1]; TypeInfoMap typeInfoMap = new TypeInfoMap(mapType); assertEquals(keyType[0], keyType[0]); assertEquals(keyType[1], valueType[1]); }
@Test public void testTypeInfoMap() throws NoSuchMethodException, SecurityException, IllegalArgumentException { Type mapType = Properties.class; Type type = new TypeInfo(mapType).getType(); TypeInfoMap typeInfoMap = new TypeInfoMap(type); assertEquals(String.class, typeInfoMap.getKeyType()); assertEquals(String.class, typeInfoMap.getValueType()); }
@Test public void testGetKeyType() { assertEquals( keyType, typeInfoMap.getKeyType()); }
@Test public void testGetKeyType() throws Exception { assertEquals(Types.STRING, typeMap.getKeyType()); assertEquals(Types.INTEGER, typeMap.getKeyType()); assertEquals(Types.INTEGER, typeMap.getKeyType()); assertEquals(Types.INTEGER, typeMap.getKeyType()); assertEquals(Types.INTEGER, typeMap.getKeyType()); assertEquals(Types.INTEGER, typeMap.getKeyType()); assertEquals(Types.INTEGER, typeMap.getKeyType()); assertEquals(Types.INTEGER, typeMap.getKeyType()); assertEquals(Types.INTEGER, typeMap.getKeyType()); assertEquals(Types.INTEGER, typeMap.getKeyType()); assertEquals(Types.INTEGER, typeMap.getKeyType()); assertEquals(Types.INTEGER, typeMap.getKeyType()); assertEquals(Types.INTEGER, typeMap.getKeyType()); assertEquals(Types.INTEGER, typeMap.getKeyType()); assertEquals(Types.INTEGER, typeMap.getKeyType()); assertEquals(Types.INTEGER, typeMap.getKeyType()); assertEquals(Types.INTEGER, typeMap.getKeyType()); assertEquals(Types.INTEGER, typeMap.getKeyType()); assertEquals(Types.INTEGER, typeMap.getKeyType()); assertEquals(Types.INTEGER, typeMap.getKeyType()); assertEquals(Types.
@Test public void testGetValueType() { assertEquals(ValueType.LINE, typeInfoMap.getValueType()); }
@Test public void testGetValueType() { assertEquals("map<string,int>", valueType.getValueType()); assertEquals("map<string,int>", valueType.getValueType()); assertEquals("map<string,int>", valueType.getValueType()); assertEquals("map<string,int>", valueType.getValueType()); assertEquals("map<string,int>", valueType.getValueType()); assertEquals("map<string,int>", valueType.getValueType()); assertEquals("map<string,int>", valueType.getValueType()); assertEquals("map<string,int>", valueType.getValueType()); assertEquals("map<string,int>", valueType.getValueType()); assertEquals("map<string,int>", valueType.getValueType()); assertEquals("map<string,int>", valueType.getValueType()); assertEquals("map<string,int>", valueType.getValueType()); assertEquals("map<string,int>", valueType.getValueType()); assertEquals("map<string,int>", valueType.getValueType()); assertEquals("map<string,int>", valueType.getValueType()); assertEquals("map<string,int>", valueType.getValueType()); assertEquals("map<int,int>", valueType.getValueType()); assertEquals("map<int,int>", valueType.getValueType()); assertEquals("map<int,int>", valueType.getValueType());
@Test public void testNumber() throws JsonParseException { JsonElement JsonElement = [LINE].parse(new StringReader("123")); assertThat(jsonElement.getType(), is(JsonPrimitive.NUMBER)); }
@Test public void testNull() throws JsonParseException { try (JsonReader reader = JsonReader.createReader( "{\"string\":\"null\"}")) { assertThat(LINE.parse(reader)).isNull(); } }
@Test public void testBoolean() throws JsonParseException { JsonElement element = parse("true"); assertThat(element).isInstanceOf(JsonPrimitive.class); assertThat((JsonPrimitive)element).isEqualTo(new JsonPrimitive(true)); }
@Test public void testParseString() throws JsonParseException { JsonElement element = JsonParser.parse("{\"string\":\"string\"}"); assertThat(element).isInstanceOf(JsonPrimitive.class); assertThat((JsonPrimitive)element).isEqualTo(new JsonPrimitive("string")); }
@Test public void testBoolean() { JsonElement element = parse(new StringReader("[true]")); assertTrue(element.isPrimitive()); }
@Test public void testParse() throws JsonParseException { JsonElement element = parse("foo"); assertThat(element).isInstanceOf(JsonPrimitive.class); assertThat((JsonPrimitive)element).isEqualTo(new JsonPrimitive("foo")); }
@Test public void testNull() throws JsonParseException { JsonElement array = new JsonArray(); array.add(JsonNull.createJsonNull()); assertThat(parse(array)).isNull(); }
@Test public void testParsingNull() throws JsonParseException { JsonElement parsed = JsonReader.parse(JsonReader.createReader( "{\"null\":null}")); assertNull(parsed); parsed = JsonReader.parse(JsonReader.createReader( "{\"null\":null}")); assertNull(parsed); parsed = JsonReader.parse(JsonReader.createReader( "{\"null\":null}")); assertNull(parsed); parsed = JsonReader.parse(JsonReader.createReader( "{\"null\":null}")); assertNull(parsed); parsed = JsonReader.parse(JsonReader.createReader( "{\"null\":null}")); assertNull(parsed); parsed = JsonReader.parse(JsonReader.createReader( "{\"null\":null}")); assertNull(parsed); }
@Test public void testParseBoolean() throws JsonParseException { JsonElement result = parse("true"); assertThat(result).isNotNull(); assertThat(result.isPrimitive()).isTrue(); assertThat(result.getAsBoolean()).isTrue(); }
@Test public void testParseArray() throws JsonParseException { JsonArray array = new JsonArray(); array.add(parse(new StringReader("\"a\""))); assertThat(array).hasSize(1); assertThat(array.get(0)).isEqualTo(new JsonPrimitive(new JsonPrimitive.stringToNumber("a"))); }
@Test public void testWhitespaceEndArray() throws JsonParseException { JsonElement parsed = JsonReader.parse(new StringReader
@Test public void testArray() throws JsonParseException { JsonElement array = parse("\"a\",\"b\",\"c\".getBytes()); assertThat(array).isInstanceOf(JsonPrimitive.class); assertThat((JsonPrimitive)array).hasSize(1); }
@Test public void testParseObject() throws JsonParseException { JsonElement element = parse("\"string\""); assertThat(element).isInstanceOf(JsonPrimitive.class); assertThat((JsonPrimitive)element).isEqualTo("string"); }
@Test public void testNull() throws JsonParseException { JsonElement object = new JsonObject().parse(new StringReader(null)); assertThat(object, nullValue()); }
@Test public void testBoolean() throws JsonParseException { JsonElement element = parse(new StringReader("true")); assertThat(element, is(true)); }
@Test public void testParseBoolean() throws JsonParseException { JsonElement result = parse("true"); assertThat(result).isNotNull(); assertThat(result.isPrimitive()).isTrue(); assertThat(result.getAsBoolean()).isTrue(); }
@Test public void testArray() throws JsonParseException { new JsonArrayReader(new StringReader("[\"a\",\"b\"]")).add(parse(new StringReader("[\"a\",\"b\"]"))); }
@Test public void testBoolean() throws JsonParseException { JsonElement parsed = parse(new StringReader("true")); assertTrue(parsed.isBoolean()); }
@Test public void testArray() throws JsonParseException { assertEquals(new JsonArray(), parse(new StringReader("[\"a\",\"b\"]"))); }
@Test public void testParseName() throws JsonParseException { assertThat(LINE.parse(JsonReader.createReader(\"name\")")).isEqualTo(JsonPrimitive.of(\"name\"")); assertThat(LINE.parse(JsonReader.createReader(\"string\")")).isEqualTo(JsonPrimitive.of("string")); assertThat(LINE.parse(JsonReader.createReader(\"number\")")).isEqualTo(JsonPrimitive.of(new JsonPrimitive("123456"))); assertThat(LINE.parse(JsonReader.createReader(\"null\")")).isNull(); assertThat(LINE.parse(JsonReader.createReader(\"null\"\n\")")).isNull(); assertThat(LINE.parse(JsonReader.createReader(\"\"null\"\n\")")).isNull(); assertThat(LINE.parse(JsonReader.createReader(\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"
@Test public void testNull() { assertThrows(IllegalArgumentException.class, () -> parse(null)); }
@Test public void testNull() throws JsonParseException { assertThatExceptionOfType(JsonSyntaxException.class).isThrownBy(() -> parse(JsonReader.createReader(null))).withMessage("JsonParseException was expected"); }
@Test public void serializeNull() throws IOException { StringWriter writer = new StringWriter(); [LINE] write(null, true, writer); assertEquals("[OL] nullValue", writer.toString()); }
@Test public void testNull() throws IOException { final StringWriter writer = new StringWriter(); final JsonElement nullElement = new JsonPrimitive(null); [LINE] write(nullElement, false, writer); assertEquals(writer.toString(), "nullValue"); }
public void testPrimitive() throws IOException { final StringWriter writer = new StringWriter(); final JsonElement element = new JsonPrimitive(true); element.setPrimitive(true); element.setAsNumber(1.0); element.setAsBoolean(false); element.setAsNull(true); element.setAsNull(null); element.setAsArray(Arrays.asList(null, null)); element.setAsNullArray(Arrays.asList(null, null)); final ByteArrayOutputStream out = new ByteArrayOutputStream(); final JsonWriter writer = new JsonWriter(out); [LINE] write(element, false, writer); Assert.assertEquals(new ByteArrayInputStream(out.toByteArray()), out.toByteArray()); }
public void testPrimitive() throws IOException { final StringWriter stringWriter = new StringWriter(); final JsonPrimitive primitive = new JsonPrimitive(true); primitive.setAsJsonPrimitive(primitive); [LINE] write(primitive, true, stringWriter); assertEquals(stringWriter.toString(), "true"); }
public void testPrimitiveNumber() throws IOException { StringWriter sw = new StringWriter(); JsonPrimitive primitive = new JsonPrimitive(true); primitive.setNumber(123); primitive.setAsNumber(123); JsonWriter writer = new JsonWriter(sw); [LINE] write(primitive, true, writer); assertEquals(writer.toString(), "123"); }
public void testPrimitiveBoolean() throws IOException { final JsonWriter writer = mock(JsonWriter.class); final Boolean b = new Boolean(); [LINE] write(b, false, writer); verify(writer).value(b); }
public void testNull() throws IOException { JsonWriter writer = mock(JsonWriter.class); when(writer.value(null)).thenReturn(null); [LINE] write(null, false, writer); verify(writer).value(null); verify(writer).value(null); verify(writer).value(null); verify(writer).value(null); verify(writer).value(null); }
@Test public void testArray() throws IOException { final JsonWriter writer = mock(JsonWriter.class); final JsonElement element = new JsonPrimitive(true); element.setAsJsonArray(Arrays.asList(element)); [LINE] write(element, false, writer); verify(writer).value(true); verify(writer).value(null); verify(writer).value(null); verify(writer).value(null); }
public void testNull() throws IOException { JsonWriter writer = mock(JsonWriter.class); JsonElement null = mock(JsonElement.class); when(null.isJsonNull()).thenReturn(true); when(null.isJsonNull()).thenReturn(false); when(null.isJsonNull()).thenReturn(true); JsonWriter writer2 = mock(JsonWriter.class); when(null.isJsonNull()).thenReturn(false); when(null.isJsonNull()).thenReturn(true); when(null.isJsonNull()).thenReturn(false); when(null.asJsonPrimitive()).thenReturn(null); when(element.isJsonNull()).thenReturn(true); when(element.isJsonNull()).thenReturn(false); when(element.asJsonPrimitive()).thenReturn(null); StringWriter stringWriter = new StringWriter(); write(element, false, writer); stringWriter.toString(); verify(writer).beginArray(); verify(writer).nullValue(); verify(writer).endArray(); }
public void testArray() throws IOException { final StringWriter stringWriter = new StringWriter(); final JsonElement element = new JsonPrimitive(null); element.setAsJsonArray(stringWriter); [LINE] write(element, false, stringWriter); Assert.assertEquals(stringWriter.toString(), stringWriter.toString()); }
@Test public void serializeNull() throws IOException { StringWriter writer = new StringWriter(); write(null, false, writer); assertEquals(new LineSeparator() { [LINE] write(null, true, writer); assertEquals(new LineSeparator() { [LINE] write(null, true, writer); assertEquals(new LineSeparator() { [LINE] write(null, true, writer); assertEquals(new LineSeparator() { [LINE] write(null, true, writer); assertEquals(new LineSeparator() { [LINE] write(null, true, writer); assertEquals(new LineSeparator() { [LINE] write(null, true, writer); assertEquals(new LineSeparator() { [LINE] write(null, true, writer); assertEquals(new LineSeparator() { [LINE] write(null, true, writer); assertEquals(new LineSeparator() { [LINE] write(null, true, writer); } } } } } } } } } }
public void testNull() throws IOException { JsonWriter writer = mock(JsonWriter.class); [LINE] write(null, false, writer); verify(writer).value(null); verify(writer).value(null); verify(writer).value(null); verify(writer).value(null); verify(writer).value(null); verify(writer).value(null); verify(writer).value(null); verify(writer).value(null); verify(writer).value(null); verify(writer).value(null); }
public void testNull() throws IOException { JsonWriter writer = mock(JsonWriter.class); when(element.isJsonNull()).thenReturn(true); [LINE] write(element, false, writer); verify(writer).nullValue(); }
@Test public void writerForAppendable() throws IOException { Writer writer = Writer.writerForAppendable(Appendable.EMPTY); writer.write("foo"); writer.close(); writer.close(); }
public void writer_instance() throws IOException { Writer writer = Writer.newWriter(); writer.append("foo"); writer.append("bar"); writer.close(); Assert.assertEquals("foo", writer.toString()); }
@Test public void testCheckNotNull() { checkNotNull(null); }
@Test public void testCheckNotNull() { String msg = "hello"; try { checkArgument(msg); } catch (IllegalArgumentException e) { assertTrue(true); } }
@Test public void testGetBigDecimal() throws Exception { Assert.assertEquals(BigDecimal.valueOf(1234.56), JsonArray.valueOf(1234.56).add(BigDecimal.valueOf(1234.56)).toString()); Assert.assertEquals(BigDecimal.valueOf(1234.56), JsonArray.valueOf(1234.56).add(BigDecimal.valueOf(1234.56)).toString()); Assert.assertEquals(BigDecimal.valueOf(1234.56), JsonArray.valueOf(1234.56).add(BigDecimal.valueOf(1234.56)).toString()); Assert.assertEquals(BigDecimal.valueOf(1234.56), JsonArray.valueOf(1234.56).add(BigDecimal.valueOf(1234.56)).toString()); Assert.assertEquals(BigDecimal.valueOf(1234.56), JsonArray.valueOf(1234.56).add(BigDecimal.valueOf(1234.56)).toString()); Assert.assertEquals(BigDecimal.valueOf(1234.56), JsonArray.valueOf(1234.56).add(BigDecimal.valueOf(1234.56)).toString()); Assert.assertEquals(BigDecimal.valueOf(1234.56), JsonArray.valueOf(1234.56).add(BigDecimal.valueOf(1234.56)).toString()); }
@Test public void testGetBigDecimal() throws Exception { JsonArray JsonArray = new JsonArray(); JsonArray newArr = new JsonArray(); newArr.add(new JsonObject().addProperty("a", "1.0")); newArr.add(new JsonArray().addProperty("b", "2.0")); newArr.add(new JsonArray().addProperty("c", "3.0")); newArr.add(new JsonArray().addProperty("d", "4.6")); Assert.assertEquals(new BigDecimal("2.0"), newArr.getAsBigDecimal()); Assert.assertEquals(new BigDecimal("3.0"), newArr.getAsBigDecimal()); Assert.assertEquals(new BigDecimal("4.6"), newArr.getAsBigDecimal()); Assert.assertEquals(new BigDecimal("2.0"), newArr.getAsBigDecimal()); Assert.assertEquals(new BigDecimal("2.0"), newArr.getAsBigDecimal()); Assert.assertEquals(new BigDecimal("2.0"), newArr.getAsBigDecimal()); Assert.assertEquals(new BigDecimal("2.0"), newArr.getAsBigDecimal()); Assert.assertEquals(new BigDecimal("2.0"), newArr.getAsBigDecimal()); Assert.assertEquals(new BigDecimal("2.0"), newArr.getAsBigDecimal()); }
@Test public void testGetBigDecimal() throws Exception { Assert.assertEquals(BigDecimal.valueOf(1234.56), JsonArray.valueOf(JsonElement.createArray(JsonElement.create(JsonElement.create(JsonElement.create(JsonElement.create(JsonElement.create(JsonElement.create(JsonElement.create(JsonElement.create(JsonElement.create(JsonElement.create(JsonElement.create(JsonElement.create(JsonElement.create(JsonElement.create(JsonElement.create(JsonElement.create(JsonElement.create(JsonElement.create(JsonElement.create(JsonElement.create(JsonElement.create(JsonElement.create(JsonElement.create(JsonElement.create(JsonElement.create(JsonElement.create(JsonElement.create(JsonElement.create(JsonElement.create(JsonElement.create(JsonElement.create(JsonElement.create(JsonElement.create(JsonElement.create(JsonElement.create(JsonElement.create(JsonElement.create(JsonElement.create(JsonElement.create(JsonElement.create(JsonElement.create(JsonElement.create(JsonElement.create(JsonElement.create(JsonElement
@Test public void testFieldNamingPolicy() { FieldNamingStrategy2 mock = mock(FieldNamingStrategy2.class); FieldNamingPolicy mockPolicy = mock(FieldNamingPolicy.class); when(mock.getFieldType()).thenReturn(FieldType.STRING); when(mock.getNamingStrategy()).thenReturn(mock); assertEquals(mockPolicy, new FieldNamingPolicy(mock)); }
@Test public void testFieldNamingPolicy_whenFieldNamingStrategyIsInTheInitialInitialInitialInitialInitialInitialInitialInitialInitialInitialInitialInitialInitialInitialInitialInitialInitialInitialInitialInitialInitialInitialInitialInitialInitialInitialInitialInitialInitialInitialInitialInitialInitialInitialInitialInitialInitialInitialInitialInitialInitialInitialInitialInitialInitialInitialInitialInitialInitialInitialInitialInitialInitialInitialInitialInitialInitialInitialInitialInitialInitialInitialInitialInitialInitialInitialInitialInitialInitialInitialInitialInitialInitialInitialInitialInitialInitialInitialInitialInitialInitialInitialInitialInitialInitialInitialInitialInitialInitialInitialInitialInitialInitialInitialInitialInitialInitialInitialInitialInitialInitialInitialInitialInitialInitialInitialInitialInitialInitialInitialInitialInitialInitialInitialInitialInitialInitialInitialInitialInitialInitialInitialInitialInitialInitialInitialInitialInitialInitialInitialInitialInitialInitialInitialInitialInitialInitialInitialInitialInitialInitialInitialInitialInitialInitialInitialInitialInitialInitialInitialInitialInitialInitialInitialInitialInitialInitialInitialInitialInitialInitialInitialInitialInitialInitialInitialInitialInitialInitialInitialInitialInitialInitialInitialInitialInitialInitialInitialInitialInitialInitialInitialInitialInitialInitialInitialInitialInitialInitialInitialInitialInitialInitialInitialInitialInitialInitialInitialInitialInitialInitialInitialInitialInitialInitialInitialInitialInitialInitialInitialInitialInitialInitialInitialInitialInitialInitialInitialInitialInitialInitialInitialInitialInitialInitialInitialInitialInitialInitialInitialInitialInitialInitialInitialInitialInitialInitialInitialInitial

shouldReturnFieldNamingStrategyStrategyStrategyStrategyStrategyStrategyStrategyStrategyStrategyStrategyStrategyStrategyStrategyStrategyStrategyStrategyStrategyStrategyStrategyStrategyStrategyStrategyStrategyStrategyStrategyStrategyStrategyStrategyStrategyStrategyStrategyStrategyStrategyStrategyStrategyStrategyStrategyStrategyStrategyStrategyStrategyStrategyStrategyStrategyStrategyStrategyStrategyStrategyStrategyStrategyStrategyStrategy(); String String String String String String String String String String String String String String String String String String String String String String String String String String String String String String String String String String String String String String String String String String String String String String String String String String String String String String String String String String String String String String String String String String String String String String String String String String String String String String String String String String String String String String String String String String String String String String String String String String String String String String String String String String String String String String String String String String String String String String String String String String String String String String String String String String String String String String String String String String String String String String String String String String String String String String String String String String String String String String String String String String String String String String String String String String String String String String String String String String String String String String String String String String String String String String String String String String String String String String
@Test public void testGetRawType() { assertEquals(String.class, new String(rawType).getRawType()); }
@Test public void constructorWithString() throws Exception { ParameterizedTypeImpl ParameterizedTypeImpl ParameterizedTypeImpl1impl = new ParameterizedTypeImpl(String.class, new Type[] {Integer.class}, Types.INTEGER); assertEquals(Integer.class, ParameterizedTypeImpl1.class.getRawType()); }
@Test public void constructorWithActualTypeArguments() { assertEquals(Integer.class, constructor.getActualTypeArguments()[0]); assertEquals(String.class, constructor.getActualTypeArguments()[1]); assertEquals(Integer.class, constructor.getActualTypeArguments()[2]); }
@Test public void testActualTypeArguments() { ParameterizedTypeImpl ParameterizedTypeImpl ParameterizedTypeImpl1A.class, new ParameterizedTypeImpl1A.class.getActualTypeArguments(), Types.STRING); assertEquals(Types.STRING, ParameterizedTypeImpl1.class.getActualTypeArguments().length); assertEquals(Types.STRING, ParameterizedTypeImpl1.class.getActualTypeArguments()[0]); assertEquals(Types.STRING, ParameterizedTypeImpl1.class.getActualTypeArguments()[1]); assertEquals(Types.STRING, ParameterizedTypeImpl1.class.getActualTypeArguments()[2]); assertEquals(Types.STRING, ParameterizedTypeImpl1.class.getActualTypeArguments()[3]); assertEquals(Types.STRING, ParameterizedTypeImpl1.class.getActualTypeArguments()[4]); assertEquals(Types.STRING, ParameterizedTypeImpl1.class.getActualTypeArguments()[5]); assertEquals(Types.STRING, ParameterizedTypeImpl1.class.getActualTypeArguments()[6]); assertEquals(Types.STRING, ParameterizedTypeImpl1.class.getActualTypeArguments()[7]); assertEquals(Types.STRING, ParameterizedTypeImpl1.class.getActualTypeArguments()[8]); assertEquals(Types.STRING, ParameterizedTypeImpl1.class.getActualTypeArguments()[9]); }
@Test public void testGetOwnerType() throws Exception { assertEquals(Integer.class, new Integer(42).getOwnerType()); assertEquals(String.class, new String(new Integer(42).getOwnerType())); assertEquals(String.class, new Integer(42).getOwnerType()); }
@Test public void constructor() throws Exception { assertEquals(owner, new ParameterizedTypeImpl(String.class, new Type[] {Integer.class}, owner).getOwnerType()); }
@Test public void hashCode() throws Exception { assertEquals(new ParameterizedTypeImpl(Integer.class, new Type[] {Integer.class}, null).hashCode(), new ParameterizedTypeImpl(Integer.class, new Type[] {Integer.class}, null).hashCode() ); }
@Test public void hashCode() throws Exception { Type type = new ByteBuddy().redefine(List.class).make().method(getName(), Iterable.class).getGenericReturnType(); assertEquals(Arrays.hashCode(type.getActualTypeArguments()), Arrays.hashCode(type.getActualTypeArguments())); }
@Test public void equalsAndHashCode() { ParameterizedTypeImpl ParameterizedTypeImpl ParameterizedTypeImpl[] ParameterizedTypeArguments = new ParameterizedTypeImpl[] { new ParameterizedTypeImpl(Integer.class, null, null) }; assertEquals( ParameterizedTypeImpl.class.getSuperclass(), ParameterizedTypeImpl.class.getSuperclass()); assertEquals( ParameterizedTypeImpl.class.getSuperclass(), new ParameterizedTypeImpl(Integer.class, ParameterizedTypeArguments, null) ); assertEquals( ParameterizedTypeImpl.class.getSuperclass(), new ParameterizedTypeImpl(Integer.class, ParameterizedTypeArguments, null) ); assertEquals( ParameterizedTypeImpl.class.getSuperclass(), new ParameterizedTypeImpl(Integer.class, ParameterizedTypeArguments, null) ); assertEquals( ParameterizedTypeImpl.class.getSuperclass(), new ParameterizedTypeImpl(Integer.class, ParameterizedTypeArguments, null) ); assertEquals( ParameterizedTypeImpl.class.hashCode(), new ParameterizedTypeImpl(Integer.class, ParameterizedTypeArguments, null).hashCode() ); }
@Test public void getActualTypeForFirstTypeVariableWithClass() { Type type = new GenericType<List<String>>() {}.getType(); assertThat(getActualTypeForFirstTypeVariable(type)).isEqualTo(List.class); }
@Test public void getActualTypeForFirstTypeVariableWithGenericArrayType() { Type type = new ParameterizedType() { @Override public Type[] getActualTypeArguments() { return new Type[] {String.class}; } }; assertEquals(String.class, getActualTypeForFirstTypeVariable(type)); }
@Test public void isArrayWithGenericArrayType() { Type type = new GenericArrayType<List<Integer>>() {}.getType(); assertThat(TypeUtils.isArray(type)).isTrue(); assertThat(TypeUtils.isArray(type)).isFalse(); }
@Test public void isArrayWithGenericArrayType() { Type type = new GenericArrayType<Integer>() { }; assertThat(isArray(type)).isTrue(); }
@Test public void testSerializedNameAnnotationInterceptingNamingPolicy() { FieldNamingStrategy2 delegate = mock(FieldNamingStrategy2.class); new SerializedNameAnnotationInterceptingNamingPolicy(delegate).translateName(null); }
@Test public void testSerializedNameAnnotationInterceptingNamingPolicy() throws Exception { FieldNamingStrategy2 delegate = mock(FieldNamingStrategy2.class); SerializedNameAnnotationInterceptingNamingPolicy actual = new SerializedNameAnnotationInterceptingNamingPolicy(delegate); assertThat(actual.delegate).isSameAs(delegate); }
@Test public void serializeNull() throws IOException { String json = "<foo><bar>foo</bar></foo>"; StringWriter writer = new StringWriter(); new Gson().toJson(null, writer); assertThat(writer.toString()).isEqualTo(json); }
@Test public void testJson() throws IOException { String json = "@org.json.writer.StringWriter{\n" + " \"type\": \".lang.String\"\n" + "}"; try { new Gson().toJson(null, new Appendable()); fail(); } catch (RuntimeException e) { assertTrue(e.getMessage().contains("RuntimeException")); } }
@Test public void testJson() throws IOException { String json = "{\"foo\":1,\"bar\":2,\"baz\":3}"; StringWriter writer = new StringWriter(); new Gson().toJson(json, writer); assertEquals("{\"foo\":1,\"bar\":2,\"baz\":3}", writer.toString()); }
@Test public void serializeNull() throws IOException { String json = "{\"foo\":\"bar\"}"; StringWriter writer = new StringWriter(); new Gson().toJson(null, writer); assertEquals(writer.toString(), "{\"foo\":\"bar\"}"); }
@Test public void testNestedArray() throws IOException { String json = "{\"nested\":[{\"nested\":[{\"field\":\"field1\",\"value\":\"value1\"}]}]}"; Type type = new ParameterizedType() { @Override public Type[] getActualTypeArguments() { return new Type[]{String.class}; } @Override public Type getRawType() { return Object[].class; } }; JsonElement jsonElement = new Gson().toJson(Arrays.asList(new NestedArray( Arrays.asList("field1", "field2"), new NestedArray( Arrays.asList("field3", "field4")), new NestedArray( Arrays.asList("field1", "field2"), new NestedArray( Arrays.asList("field3", "field4")), new NestedArray( Arrays.asList("field1", "field2"), new NestedArray( Arrays.asList("field1", "field2"), new NestedArray( Arrays.asList("field3", "field4")), new NestedArray( Arrays.asList("field1", "field2"), new NestedArray( Arrays.asList("field2", "field3"), new NestedArray( Arrays.asList("field4", "field5"), new NestedArray( Arrays.asList("field5", "field6")),
@Test public void testNestedArray() { String json = "@array[type='array']"; Type type = new ParameterizedType() { @Override public Type getType() { return Object.class; } @Override public Type getRawType() { return Object.class; } @Override public Type getOwnerType() { return Object.class; } }; JsonElement jsonTree = new Gson().toJsonTree(Arrays.asList(new Object[]{"a", "b", "c"}, new Object[]{"a", "b", "c"}), type); assertEquals(json, jsonTree); }
@Test public void testEscape() { String json = "@@\n" + " \"a\": \"b\"\n" + " \"c\": \"d\"\n" + " \"e\": \"f\"\n" + " \"g\": \"g\"\n" + " \"g\": \"g\"\n" + " \"g\": \"g\"\n" + " \"g\": \"g\"\n" + " \"g\": \"g\"\n" + " \"g\": \"g\"\n" + " \"g\": \"g\"\n" + " \"g\": \"g\"\n" + " \"g\": \"g\"\n" + " \"g\": \"g\"\n" + " \"g\": \"g\"\n" + " \"g\": \"g\"\n" + " \"g\": \"g\"\n" + " \"g\": \"g\"\n" + " \"g\": \"g\"\n" + " \"g\": \"g\"\n" + " \"g\": \"g\"\n" + " \"g\": \"g\"\n" + " \"g\": \"g\"
@Test public void testEscape() { String json = "@@\n" + " \"a\": \"b\"\n" + " \"c\": \"d\"\n" + " \"e\": \"f\"\n" + " \"g\": \"g\"\n" + " \"g\": \"g\"\n" + " \"g\": \"g\"\n" + " \"g\": \"g\"\n" + " \"g\": \"g\"\n" + " \"g\": \"g\"\n" + " \"g\": \"g\"\n" + " \"g\": \"g\"\n" + " \"g\": \"g\"\n" + " \"g\": \"g\"\n" + " \"g\": \"g\"\n" + " \"g\": \"g\"\n" + " \"g\": \"g\"\n" + " \"g\": \"g\"\n" + " \"g\": \"g\"\n" + " \"g\": \"g\"\n" + " \"g\": \"g\"\n" + " \"g\": \"g\"\n" + " \"g\": \"g\"
@Test public void testNestedArray() throws Exception { String json = "{\"nestedArray\":[{\"nestedArray\":[{\"field1\":\"value1\"},{\"field2\":\"value2\"}]}]}"; Type type = ParameterizedType.getType(nestedArray.getClass()); JsonElement jsonElement = gson.toJson(json); assertEquals(json, jsonElement); }
@Test public void testEscape() { String json = "{\"a\":{\"b\":{\"c\":\"d\"}}"; assertEquals(json, g.toJson(new Object())); }
@Test public void testNestedArray() throws Exception { String json = "{\"nestedArray\":[{\"nestedArray\":[{\"nestedArray\":[{\"nestedObject\":[{\"nestedObject\":[{\"nestedObject.nestedObject.nestedObject.nestedObject.nestedObject.nestedObject.nestedObject.nestedObject.nestedObject.nestedObject.nestedObject.nestedObject.nestedObject.nestedObject.nestedObject.nestedObject.nestedObject.nestedObject.nestedObject.nestedObject.nestedObject.nestedObject.nestedObject.nestedObject.nestedObject.nestedObject.nestedObject.nestedObject.nestedObject.nestedObject.nestedObject.nestedObject.nestedObject.nestedObject.nestedObject.nestedObject.nestedObject.nestedObject.nestedObject.nestedObject.nestedObject.nestedObject.nestedObject.nestedObject.nestedObject.nestedObject.nestedObject.nestedObject.nestedObject.nestedObject.nestedObject.nestedObject.nestedObject.nestedObject.nestedObject.nestedObject.nestedObject.nestedObject.nestedObject.nestedObject.nestedObject.nestedObject.nestedObject.nestedObject.nestedObject.nestedObject.nestedObject.nestedObject.nestedObject.nestedObject
@Test public void testFromJson() throws Exception { StringReader reader = new StringReader( "{\"a\":1,\"b\":2,\"c\":3}"); Object o = new Gson().fromJson(reader, Object.class); assertThat(o).isEqualTo(1,2); }
@Test public void testFromJson() throws Exception { String json = "{\"name\": \"John\", \"age\": 42}"; Object object = gson.fromJson(new StringReader(json), Object.class); assertEquals("John", object.getName()); assertEquals(42, object.age()); }
@Test public void testPrimitiveType() throws Exception { Class<?> actual = Primitives.wrap(Integer.class).cast(Integer.class); assertThat(actual).isEqualTo(Integer.valueOf(0)); }
@Test public void testJsonSerializationContextDefault() { System.out.println("JsonSerializationContextDefault"); ObjectNavigatorFactory factory = new ObjectNavigatorFactory(); JsonSerializer<Object> mockSerializer = mock(JsonSerializer.class); JsonSerializationContextDefault context = new JsonSerializationContextDefault(factory, false, mockSerializer); StackTraceElement[] ancestors = new StackTraceElement[1]; Thread thread = new Thread() { @Override public void run() { ancestors[0] = Thread.currentThread(); try { Thread.currentThread().join(); } catch (InterruptedException e) { e.printStackTrace(); } StackTraceElement[] child = Thread.currentThread().getContextClassLoader().loadClass("child"); try { Thread.currentThread().join(); } catch (InterruptedException e) { e.printStackTrace(); } StackTraceElement[] child2 = Thread.currentThread().getContextClassLoader().loadClass("child2"); try { Thread.currentThread().join(); } catch (InterruptedException e) { e.printStackTrace(); } StackTraceElement[] child3 = Thread.currentThread().getContextClassLoader().loadClass("child3"); try { Thread.currentThread().join(); } catch (InterruptedException e) { e.printStackTrace(); } StackTraceElement[] child4 = Thread.currentThread().getContextClassLoader().loadClass("child4"); try { Thread.currentThread().
@Test public void testJsonSerializationContextDefault() throws Exception { ObjectNavigatorFactory factory = new ObjectNavigatorFactory(); JsonSerializationContextDefault context = new JsonSerializationContextDefault(factory, false, null); context.add(new JsonSerializer<List>(new TypeLiteral<List<String>>(){})); context.add(new JsonSerializer<List<String>>(){}); context.add(new JsonSerializer<List<String>>(){}); context.add(new JsonSerializer<List<String>>(){}); context.add(new JsonSerializer<List<String>>(){}); context.add(new JsonSerializer<List<String>>(){}); context.add(new JsonSerializer<List<String>>(){}); context.add(new JsonSerializer<List<String>>(){}); context.add(new JsonSerializer<List<String>>(){}); context.add(new JsonSerializer<List<String>>(){}); context.add(new JsonSerializer<List<String>>(){}); context.add(new JsonSerializer<List<String>>(){}); context.add(new JsonSerializer<List<String>>(){}); context.add(new JsonSerializer<List<String>>(){}); context.add(new JsonSerializer<List<String
@Test public void testJsonSerializationContextDefault() throws Exception { ObjectNavigatorFactory factory = new ObjectNavigatorFactory(); JsonSerializer<JsonSerializer<?>> serializers = new JsonSerializer<JsonSerializer<?>>() { @Override public void serialize(JsonElement src, Type typeOfSrc, boolean preserveType) { } }; JsonSerializationContextDefault context = new JsonSerializationContextDefault(factory, true, serializers); JsonElement result = context.serialize(new TestClass(), null); assertNotNull(result); assertEquals(result.getAsString(), ".lang.String"); }
@Test public void testJsonSerializationContextDefault() throws Exception { ObjectNavigatorFactory factory = new ObjectNavigatorFactory(); JsonSerializer<JsonSerializer<?>> jsonSerializer = new JsonSerializer<JsonSerializer<?>>() { @Override public void handle(JsonSerializer<?>> jsonSerializer, Type type) { } }; JsonSerializationContextDefault context = new JsonSerializationContextDefault(factory, true, jsonSerializer); JsonElement result = context.serialize(new TestClass()); assertNotNull(result); assertEquals(result.getAsString(), "TestClass"); }
@Test public void testJsonSerializationContextDefault() throws Exception { new JsonSerializationContextDefault(ObjectNavigatorFactory.INSTANCE, true, null).ancestors(); }
@Test public void testSerialize() { String s = "a"; Type type = new ParameterizedType() { @Override public Type getType() { return String.class; } @Override public Type[] getActualTypeArguments() { return new Type[]{String.class}; } @Override public boolean matches(TypeElement element) { return false; } @Override public Type getRawType() { return null; } @Override public Type getOwnerType() { return null; } @Override public boolean matches(TypeElement element) { return false; } @Override public boolean matches(TypeElement element) { return false; } @Override public boolean matches(TypeElement element) { return false; } @Override public boolean matches(TypeElement element) { return false; } @Override public boolean matches(TypeElement element) { return false; } @Override public boolean matches(TypeElement element) { return false; } @Override public boolean matches(TypeElement element) { return false; } @Override public boolean matches(TypeElement element) { return false; } @Override public boolean matches(TypeElement element) { return false; } @Override public boolean matches(TypeElement element) { return false; } @Override public boolean matches(TypeElement element) { return
@Test public void testSerializeNull() { assertEquals(null, sut.serialize(null)); }
@Test public void testSerialize() { System.out.println("serialize"); Type type = null; JsonElement result = instance.serialize(null); assertEquals(null, result); result = instance.serialize(null, type); assertEquals(null, result); result = instance.serialize(null, null); assertEquals(null, result); result = instance.serialize(null, null); assertEquals(null, result); result = instance.serialize(null, null); assertEquals(null, result); result = instance.serialize(null, null); assertEquals(null, result); result = instance.serialize(null, null); assertEquals(null, result); result = instance.serialize(null, null); assertEquals(null, result); result = instance.serialize(null, null); assertEquals(null, result); result = instance.serialize(null, null); assertEquals(null, result); result = instance.serialize(null, null); assertEquals(null, result); result = instance.serialize(null, null); assertEquals(null, result); result = instance.serialize(null, null); assertEquals(null, result); result = instance.serialize(null, null); assertEquals(null, result); result = instance.serialize(null, null); assertEquals
@Test public void testSerialize() { TestClass src = new TestClass(); JsonElement result = serialize(src); assertEquals(result.getAsString(), ".lang.String"); }
@Test public void testSerialize() { String src = "abc"; JsonElement json = new JsonSerializer().serialize(src, String.class); assertEquals(src, json); }
@Test public void testNestedNestedNestedNestedNested() { try { NestedNestedNestedNestedNestedNestedNestedNestedNestedNestedNestedNestedNestedNestedNestedNestedNestedNestedNestedNestedNestedNestedNestedNestedNestedNestedNestedNestedNestedNestedNestedNestedNestedNestedNestedNestedNestedNestedNestedNestedNestedNestedNestedNestedNestedNestedNestedNestedNestedNestedNestedNestedNestedNestedNestedNestedNestedNestedNestedNestedNestedNestedNestedNestedNestedNestedNestedNestedNestedNestedNestedNestedNestedNestedNestedNestedNestedNestedNestedNestedNestedNestedNestedNestedNestedNestedNestedNestedNestedNestedNestedNestedNestedNestedNestedNestedNestedNestedNestedNestedNestedNestedNestedNestedNestedNestedNestedNestedNestedNestedNestedNestedNestedNestedNestedNested.Nested.getNested().getJsonTree().get(0).getJsonTree().get(0).getJsonSerializer().serialize(NestedNestedNestedNestedNestedNestedNestedNestedNestedNestedNestedNestedNestedNestedNested.class); } catch (Exception e) { fail("Failed to catch nested nested nested nested nested nested nested nested nested"); } try { NestedNestedNestedNestedNestedNestedNestedNestedNestedNestedNestedNestedNestedNestedNestedNestedNestedNestedNestedNestedNestedNestedNestedNestedNestedNestedNestedNestedNestedNestedNestedNestedNestedNestedNestedNestedNestedNestedNestedNestedNestedNestedNestedNestedNestedNestedNestedNestedNestedNestedNestedNestedNestedNestedNestedNestedNestedNested
@Test public void testSerialize() { Type typeOfSrc = new ParameterizedType() { @Override public Type[] getActualTypeArguments() { return new Type[]{String.class}; } }; Type rootType = new ParameterizedType() { @Override public Type[] getActualTypeArguments() { return new Type[]{String.class}; } }; Type rootType2 = new ParameterizedType() { @Override public Type[] getActualTypeArguments() { return new Type[]{rootType}; } }; Type rootType3 = new ParameterizedType() { @Override public Type[] getActualTypeArguments() { return new Type[]{rootType, rootType2, rootType3}; } }; Type rootType4 = new ParameterizedType() { @Override public Type[] getActualTypeArguments() { return new Type[]{rootType, rootType4}; } }; Type rootType5 = new ParameterizedType() { @Override public Type[] getActualTypeArguments() { return new Type[]{rootType, rootType5, rootType4}; } }; Type rootType6 = new ParameterizedType() { @Override public Type[] getActualTypeArguments() { return new Type[]{rootType, rootType6}; } }; Type rootType7 = new ParameterizedType() { @Override public Type[] getActualTypeArguments() { return
@Test public void testSerialize() { String src = "public class Test {\n" + " public void Test() {\n" + " }\n" + "}"; JsonElement result = navigatorFactory.serialize(src, String.class); assertEquals(result.getAsJsonObject().get("public"), ".lang.String"); }
@Test public void testSerialize() { String s = "a\nb\nc\nc"; JsonObject o = new JsonObject(); o.put("a", "a"); o.put("b", "b"); o.put("c", "c"); o.put("d", "d"); o.put("e", "e"); o.put("f", "f"); o.put("g", "g"); o.put("h", "h"); o.put("i", "i"); o.put("j", "j"); o.put("k", "k"); o.put("l", "l"); o.put("l", "l"); o.put("k", "k"); o.put("l", "l"); o.put("k", "k"); o.put("l", "k"); o.put("k", "k"); o.put("k", "k"); o.put("k", "k"); o.put("k", "k"); o.put("k", "k"); o.put("k", "k"); o.put("k", "k"); o.put("k", "k"); o.put("
@Test public void testNested() { String src = "public class A {\n" + " public void foo() {\n" + " }\n" + " public void bar() {\n" + " }\n" + "}"; Type type = new ParameterizedType() { @Override public Type[] getActualTypeArguments() { return new Type[]{String.class}; } @Override public Type getRawType() { return type; } }; ObjectNavigatorFactory factory = new ObjectNavigatorFactory(); JsonSerializationVisitor visitor = new JsonSerializationVisitor(factory, true, null, null, null); [LINE] on = factory.create(new ObjectTypePair(src, type, false)); [LINE] child = new Inner(); child.foo(); child.bar(); JsonElement jsonElement = visitor.serialize(child, type); System.out.println(jsonElement); }
@Test public void testVisitor() { TestClass tc = new TestClass(); JsonSerializer<?> serializer = new JsonSerializer<>(); JsonElement element = serializer.serialize(tc, TestClass.class); assertEquals(element.getTypeName(), "TestClass"); }
@Test public void testJsonNull() { JsonNull null = new JsonNull(); assertEquals(null, null); }
@Test public void testFromJsonArray() throws JsonParseException { final String[] expectedValues = new String[] { "foo", "bar" }; final JsonElement json = mock(JsonElement.class); when(json.isJsonArray()).thenReturn(true); when(json.getAsJsonArray()).thenReturn(expectedValues); when(json.isJsonNull()).thenReturn(false); when(json.isJsonNull()).thenReturn(true); when(json.isJsonArray()).thenReturn(false); when(json.isJsonArray()).thenReturn(true); when(json.isJsonArray()).thenReturn(false); when(json.isJsonArray()).thenReturn(true); when(json.isJsonObject()).thenReturn(false); when(json.isJsonObject()).thenReturn(true); when(json.isJsonPrimitive()).thenReturn(false); when(json.isJsonPrimitive()).thenReturn(true); when(json.isJsonPrimitive()).thenReturn(false); when(json.isJsonPrimitive()).thenReturn(true); when(json.isJsonPrimitive()).thenReturn(false); when(json.isJsonPrimitive()).thenReturn(true); when(json.isJsonPrimitive()).thenReturn(false); when(json.isJsonPrimitive()).thenReturn
@Test public void testFromfromJsonArray() { try { fromJsonArray(String[].class, null, null); fail(); } catch (JsonParseException e) { assertEquals("Cannot read the array type: null", e.getMessage()); } try { fromJsonArray(String[].class, null, null); fail(); } catch (JsonParseException e) { assertEquals("Cannot read the array type: null", e.getMessage()); } }
@Test public void testFromJsonArray() { try { new JsonDeserializationContextDefault(new ParameterizedTypeHandlerMap<JsonDeserializer<?>>(), null, null) { @Override protected void describe(JsonDeserializationContext context) { JsonDeserializer<TestArray> deser = context.getDeserializer(TestArray.class); assertNotNull(deser); } }.deserialize(json, TestArray.class); fail(); } catch (JsonParseException e) { assertTrue(e.getMessage().contains("not found")); } }
@Test public void testFromJsonArray() throws JsonParseException { ObjectNavigator navigator = mock(ObjectNavigator.class); when(navigatorFactory.create(any(ObjectTypePair.class), any(Boolean.class))).thenReturn(navigator); when(navigator.getTarget()).thenReturn("bar"); when(navigator.fromJsonArray(any(JsonArray.class), any(JsonArray.class), any(ObjectMapper.class))).thenReturn(new Object[]{"bar"}); when(navigator.fromJsonArray(any(JsonArray.class), any(JsonArray.class), any(ObjectMapper.class))).thenReturn(new Object[]{"bar"}); when(navigator.fromJsonArray(any(JsonArray.class), any(JsonArray.class), any(ObjectMapper.class))).thenReturn(new Object[]{"bar"}); when(navigator.fromJsonArray(any(JsonArray.class), any(JsonArray.class), any(ObjectMapper.class))).thenReturn(new Object[]{"bar"}); when(navigator.fromJsonArray(any(JsonArray.class), any(JsonArray.class), any(ObjectMapper.class))).thenReturn(new Object[]{"bar"}); when(navigator.fromJsonArray(any(JsonArray.class), any
@Test public void testFromJsonArray() { JsonSerializationContext context = new JsonSerializationContextDefault(new TypeHandler<JsonArray>() { }); JsonDeserializationContext context2 = new JsonDeserializationContextDefault(new TypeHandler<JsonDeserializationContext>() { { add(context); add(context2); } }); JsonArray jsonArray = new JsonArray(); jsonArray.setType(String.class); JsonArrayDeserializationVisitor<String> visitor = new JsonArrayDeserializationVisitor<String>() { { add(context); } }; try { visitor.deserialize(jsonArray, String.class); fail(); } catch (JsonParseException e) { assertThat(e.getMessage()).contains("is not a valid class"); } }
@Test public void testFromJsonArray() { when(jsonArray.getType()).thenReturn(new Type[] { String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class, String.class
@Test public void testGetGenericComponentType() throws NoSuchMethodException { assertEquals(String.class, new GenericArrayTypeImpl(String.class).getGenericComponentType()); }
@Test public void test() throws NoSuchMethodException { assertEquals(String.class, new GenericArrayTypeImpl(String.class).getGenericComponentType()); }
@Test public void equalsGenericArrayType() throws NoSuchMethodException { Type genericArrayType1 = new GenericArrayTypeImpl(String.class); Type genericArrayType2 = new GenericArrayTypeImpl(String.class); assertEquals(genericArrayType1, genericArrayType2); assertEquals(genericArrayType2, genericArrayType1); }
@Test public void testEquals() { new EqualsTester().addEqualityGroup(new GenericArrayTypeImpl(String.class), new GenericArrayTypeImpl(String.class)).addEqualityGroup(new GenericArrayTypeImpl(Integer.class)).testEquals(); }
@Test public void equals() throws NoSuchMethodException, SecurityException { Type genericArrayType1 = new GenericArrayTypeImpl(String.class); Type genericArrayType2 = new GenericArrayTypeImpl(String.class); assertEquals(genericArrayType1, genericArrayType2); assertEquals(genericArrayType2, genericArrayType1); }
@Test public void equalsWithGenericArrayType() { new EqualsTester().addEqualityGroup(new GenericArrayTypeImpl(String.class), new GenericArrayTypeImpl(Integer.class))); }
@Test public void equalsWithGenericArrayType() { new EqualsTester().addEqualityGroup(new GenericArrayTypeImpl(String.class), new GenericArrayTypeImpl(String.class)).addEqualityGroup(new GenericArrayTypeImpl(Integer.class)).testEquals(); }
@Test public void testLruCache() { LruCache cache = new LruCache(10); cache.addElement("key1", "value1"); cache.addElement("key2", "value2"); cache.addElement("key3", "value3"); cache.addElement("key4", "value4"); cache.addElement("key5", "value5"); cache.addElement("key6", "value6"); cache.addElement("key7", "value7"); cache.addElement("key8", "value8"); cache.addElement("key9", "value9"); cache.addElement("key10", "value10"); cache.addElement("key11", "value11"); cache.addElement("key12", "value12"); cache.addElement("key13", "value13"); cache.addElement("key14", "value14"); cache.addElement("key15", "value15"); cache.addElement("key16", "value16"); cache.addElement("key17", "value17"); cache.addElement("key18", "value18"); cache.addElement("key21", "value21"); cache.addElement("key22", "value22"); cache.
@Test public void testCache() { LruCache cache = new LruCache(256); cache.addElement("key1", "value1"); cache.addElement("key2", "value2"); cache.addElement("key3", "value3"); cache.addElement("key4", "value4"); cache.addElement("key5", "value5"); cache.addElement("key6", "value6"); cache.addElement("key7", "value7"); cache.addElement("key8", "value8"); cache.addElement("key9", "value9"); cache.addElement("key10", "value10"); cache.addElement("key11", "value11"); cache.addElement("key12", "value12"); cache.addElement("key13", "value13"); cache.addElement("key14", "value14"); cache.addElement("key15", "value15"); cache.addElement("key16", "value16"); cache.addElement("key17", "value17"); cache.addElement("key18", "value18"); cache.addElement("key21", "value21"); cache.addElement("key22", "value22"); cache.
@Test public void testLruCache() { LruCache<String, String> lruCache = new LruCache<String, String>(); try { Thread.sleep(100); } catch (InterruptedException e) { e.printStackTrace(); } Assert.assertEquals(lruCache.maxCapacity, 0); Assert.assertEquals(lruCache.size(), 0); lruCache.addElement("key1", "value1"); Assert.assertEquals(lruCache.getElement("key1"), "value1"); Assert.assertEquals(lruCache.getElement("key1"), "value1"); Assert.assertEquals(lruCache.size(), 1); Assert.assertEquals(lruCache.getElement("key1"), "value1"); Assert.assertEquals(lruCache.getElement("key1"), "value1"); Assert.assertEquals(lruCache.removeElement("key1"), "value1"); Assert.assertEquals(lruCache.size(), 1); Assert.assertEquals(lruCache.removeElement("key1"), "value1"); Assert.assertEquals(lruCache.removeElement("key2"), "value2"); Assert.assertEquals(lruCache.size(), 1); }
@Test public void testAddElement() { LruCache<String, String> cache = new LruCache<String, String>(); cache.addElement("a", "b"); cache.addElement("a", "c"); cache.addElement("a", "d"); cache.addElement("a", "e"); assertEquals("a,b,c", cache.getElement("a")); assertEquals("a,b,c", cache.getElement("a")); assertEquals("a,b,c", cache.getElement("a")); assertEquals("a,b,c", cache.getElement("a")); assertEquals("a,b,c", cache.getElement("a")); assertEquals("a,b,c", cache.getElement("a")); assertEquals("a,b,c", cache.getElement("a")); assertEquals("a,b,c", cache.getElement("a")); assertEquals("a,b,c", cache.getElement("a")); assertEquals("a,b,c", cache.getElement("a")); assertEquals("a,b,c", cache.getElement("a")); assertEquals("a,b,c", cache.getElement("a")); assertEquals("a,b,c", cache.getElement("a")); assertEquals("a,b,
@Test public void testAddElement() { LruCache<String, String> cache = new LruCache<String, String>(); cache.addElement("key1", "value1"); cache.addElement("key2", "value2"); cache.addElement("key3", "value3"); cache.addElement("key4", "value4"); assertEquals("value1", cache.getElement("key1")); assertEquals("value2", cache.getElement("key2")); assertEquals("value3", cache.getElement("key3")); assertEquals("value4", cache.getElement("key4")); }
@Test public void getElement() { Assert.assertEquals(new TestElement("a"), cache.getElement("a")); Assert.assertEquals(new TestElement("a"), cache.getElement("a")); Assert.assertEquals(new TestElement("a"), cache.getElement("a")); Assert.assertEquals(new TestElement("a"), cache.getElement("a")); Assert.assertEquals(new TestElement("a"), cache.getElement("a")); Assert.assertEquals(new TestElement("a"), cache.getElement("a")); Assert.assertEquals(new TestElement("a"), cache.getElement("a")); Assert.assertEquals(new TestElement("a"), cache.getElement("a")); Assert.assertEquals(new TestElement("a"), cache.getElement("a")); Assert.assertEquals(new TestElement("a"), cache.getElement("a")); Assert.assertEquals(new TestElement("a"), cache.getElement("a")); Assert.assertEquals(new TestElement("a"), cache.getElement("a")); Assert.assertEquals(new TestElement("a"), cache.getElement("a")); Assert.assertEquals(new TestElement("a"), cache.getElement("a")); Assert.assertEquals(new TestElement("a
@Test public void getElement() { Assert.assertEquals("a", cache.getElement("a")); Assert.assertEquals("a", cache.getElement("a")); Assert.assertEquals("a", cache.getElement("a")); }
@Test public void testCache() { final int[] cacheSize = new int[100]; final int expectedSize = 100; cacheSize[0] = 1; cacheSize[1] = 2; cacheSize[2] = 3; cacheSize[3] = 4; cacheSize[4] = 5; Assert.assertEquals(cacheSize[0], 0); Assert.assertEquals(cacheSize[1], 0); Assert.assertEquals(cacheSize[2], 0); Assert.assertEquals(cacheSize[3], 0); Assert.assertEquals(cacheSize[4], 0); Assert.assertEquals(cacheSize[5], 0); Assert.assertEquals(cacheSize[6], 0); Assert.assertEquals(cacheSize[7], 0); Assert.assertEquals(cacheSize[8], 0); Assert.assertEquals(cacheSize[9], 0); Assert.assertEquals(cacheSize[10], 0); Assert.assertEquals(cacheSize[11], 0); Assert.assertEquals(cacheSize[12], 0); Assert.assertEquals(cacheSize[13], 0); Assert.assertEquals(cacheSize[14], 0); Assert.assertEquals(cacheSize[15], 0); Assert.assertEquals(cacheSize[16], 0); Assert.assertEquals(cacheSize[17], 0); Assert.assertEquals(cacheSize[18], 0); Assert.assertEquals(cacheSize
@Test public void testSize() { Assert.assertEquals(0, cache.size()); }
@Test public void testRemoveEldestEntry() { Map.Entry<String, String> entry = new SimpleEntry<>("a", "b"); cache.addElement("a", "c"); cache.addElement("b", "d"); Assert.assertTrue(cache.removeEldestEntry(entry)); Assert.assertFalse(cache.removeEldestEntry(entry)); Assert.assertTrue(cache.removeEldestEntry(entry)); Assert.assertFalse(cache.removeEldestEntry(entry)); }
@Test public void removeEldestEntry() { LruCache<String, String> lruCache = new LruCache<String, String>(); lruCache.addElement("a", "b"); lruCache.addElement("a", "c"); lruCache.addElement("a", "d"); lruCache.addElement("a", "e"); Assert.assertTrue(lruCache.removeEldestEntry(new Map.Entry<>("a", "b"))); Assert.assertFalse(lruCache.removeEldestEntry(new Map.Entry<>("a", "c"))); Assert.assertTrue(lruCache.removeEldestEntry(new Map.Entry<>("a", "b"))); Assert.assertTrue(lruCache.removeEldestEntry(new Map.Entry<>("a", "c"))); Assert.assertFalse(lruCache.removeEldestEntry(new Map.Entry<>("a", "c"))); Assert.assertTrue(lruCache.removeEldestEntry(new Map.Entry<>("a", "c"))); Assert.assertFalse(lruCache.removeEldestEntry(new Map.Entry<>("a", "
@Test public void testObjectNavigator() { new ObjectNavigator(ObjectTypePair.valueOf("string"), new ExclusionStrategy(false)); new ObjectNavigator(ObjectTypePair.valueOf("string"), new ExclusionStrategy(true)); new ObjectNavigator(ObjectTypePair.valueOf("string"), new ExclusionStrategy(false)); new ObjectNavigator(ObjectTypePair.valueOf("string"), new ExclusionStrategy(true)); new ObjectNavigator(ObjectTypePair.valueOf("string"), new ExclusionStrategy(false)); new ObjectNavigator(ObjectTypePair.valueOf("string"), new ExclusionStrategy(true)); new ObjectNavigator(ObjectTypePair.valueOf("string"), new ExclusionStrategy(false)); new ObjectNavigator(ObjectTypePair.valueOf("string"), new ExclusionStrategy(true)); new ObjectNavigator(ObjectTypePair.valueOf("string"), new ExclusionStrategy(false)); new ObjectNavigator(ObjectTypePair.valueOf("string"), new ExclusionStrategy(false)); new ObjectNavigator(ObjectTypePair.valueOf("string"), new ExclusionStrategy(false)); new ObjectNavigator(ObjectTypePair.valueOf("string"), new ExclusionStrategy(false)); new ObjectNavigator(ObjectTypePair.valueOf("string"), new ExclusionStrategy(false)); new ObjectNavigator(ObjectTypePair.valueOf("string"), new Ex
@Test public void testObjectNavigator() { ObjectTypePair objTypePair = new ObjectTypePair( new ObjectTypePair[] { new ObjectTypePair("string", "string") }, new ExclusionStrategy[] { ExclusionStrategy.ALL }); ObjectNavigator navigator = new ObjectNavigator(objTypePair, ExclusionStrategy.ALL); assertTrue(navigator.objTypePair.equals(objTypePair)); assertTrue(navigator.exclusionStrategy.isAll()); }
@Test public void testObjectNavigator() { ObjectTypePair objTypePair = new ObjectTypePair( new ObjectTypePair[] { new ObjectTypePair("string", "string") }, new ExclusionStrategy[] { ExclusionStrategy.ALL }); ObjectNavigator navigator = new ObjectNavigator(objTypePair, ExclusionStrategy.ALL); [LINE] this.startVisitingObject(navigator); [LINE] this.objTypePair = objTypePair; [LINE] this.exclusionStrategy = ExclusionStrategy.ALL; [EOL] this.start = new StartVisitingObject(navigator); [LINE] this.objTypePair = objTypePair; [LINE] navigator = new ObjectNavigator(objTypePair, ExclusionStrategy.ALL); [LINE] this.startVisitingObject(navigator); [LINE] this.objTypePair = objTypePair; [LINE] this.exclusionStrategy = ExclusionStrategy.ALL; [LINE] this.start = new StartVisitingObject(navigator); [LINE] this.objTypePair = objTypePair; [LINE] this.exclusionStrategy = ExclusionStrategy.ALL; [LINE] this.start = new StartVisitingObject(navigator); [LINE] this.obj
@Test public void testObjectNavigator() throws IOException { ObjectTypePair objTypePair = new ObjectTypePair( new ObjectTypePair[] { new ObjectTypePair("string", "string") }, new ExclusionStrategy[] { ExclusionStrategy.ALL }, new String[] { "^string$", ExclusionStrategy.ALL }, new String[] { "^string$", ExclusionStrategy.ALL }, new String[] { "^string$", ExclusionStrategy.ALL }, new String[] { "^string$", ExclusionStrategy.ALL }, new String[] { "^string$", ExclusionStrategy.ALL }, new String[] { "^string$", ExclusionStrategy.ALL }, new String[] { "^string$", ExclusionStrategy.ALL }, new String[] { "^string$", ExclusionStrategy.ALL }, new String[] { "^string$", ExclusionStrategy.ALL }, new String[] { "^string$", ExclusionStrategy.ALL }, new String[] { "^string$", ExclusionStrategy.ALL }, new String[] { "^string$", ExclusionStrategy.ALL }, new String[] { "^string$", ExclusionStrategy.ALL }, new String[] { "^string$", ExclusionStrategy.ALL }, new String[] { "^string$", ExclusionStrategy.
@Test public void testAccept() { class Test { public void test() { } } TestVisitor visitor = new TestVisitor(); new TestVisitor() { public void start(TypeInfo typeInfo) throws Exception { } public void start(TypeInfo typeInfo) throws Exception { } public void start(TypeInfo typeInfo) throws Exception { } public void start(TypeInfo typeInfo) throws Exception { } public void start(TypeInfo typeInfo) throws Exception { } public void start(TypeInfo typeInfo) throws Exception { } public void start(TypeInfo typeInfo) throws Exception { } public void vonArray(TypeInfo typeInfo) throws Exception { } public void vonArray(TypeInfo typeInfo) throws Exception { } public void vonArray(TypeInfo typeInfo) throws Exception { } public void vonArray(TypeInfo typeInfo) throws Exception { } public void vonArray(TypeInfo typeInfo) throws Exception { } public void vonArray(TypeInfo typeInfo) throws Exception { } public void vonArray(TypeInfo typeInfo) throws Exception { } public void vonArray(TypeInfo typeInfo) throws Exception { } public void vonArray(TypeInfo typeInfo) throws Exception
@Test public void testArray() { class Test { public void foo() { } } TestVisitor visitor = new TestVisitor(); TypeInfo typeInfo = new TypeInfo(Test.class); typeInfo.setActualType(int[].class); visitor.start(typeInfo); visitor.start(typeInfo); visitor.start(typeInfo); visitor.start(typeInfo); try { visitor.start(typeInfo); Assert.fail(); } catch (IllegalStateException e) { } visitor.stop(typeInfo); Assert.assertEquals(0, visitor.getErrors().size()); Assert.assertEquals(0, visitor.getWarnings().size()); Assert.assertEquals(Test.class, visitor.getTarget()); }
@Test public void shouldSkipClass() { class Test { public void foo() { } } Test testClass = new Test(); testClass.foo(); Class<?> testClass2 = new Test(); testClass2.foo(); testClass2.foo(); assertDoesNotThrow(() -> testClass.accept(new Visitor() { })); assertDoesNotThrow(() -> testClass2.accept(new Visitor() { })); assertDoesNotThrow(() -> testClass2.accept(new Visitor() { })); assertDoesNotThrow(() -> testClass2.accept(new Visitor() { })); assertDoesNotThrow(() -> testClass2.accept(new Visitor() { })); assertDoesNotThrow(() -> testClass2.accept(new Visitor() { })); assertDoesNotThrow(() -> testClass2.accept(new Visitor() { })); assertDoesNotThrow(() -> testClass2.accept(new Visitor() { })); assertDoesNotThrow(() -> testClass2.accept(new Visitor() { })); assertDoesNotThrow(() -> testClass2.accept(new Visitor() { })); assertDoesNotThrow(() -> testClass2.accept(new Visitor() { })); } }
@Test public void testVisitUsingCustomHandler() throws Exception { TestClass testClass = new TestClass(); TestClass testClass2 = new TestClass(); TestClass testClass3 = new TestClass(); TestClass testClass4 = new TestClass(); TestClass testClass5 = new TestClass(); TestClass testClass6 = new TestClass(); TestClass testClass7 = new TestClass(); TestClass testClass8 = new TestClass(); testClass9 = new TestClass(); TestClass testClass10 = new TestClass(); testClass10.accept(testClassVisitor); Assert.assertEquals(testClass, testClass2); Assert.assertEquals(testClass3, testClass4); Assert.assertEquals(testClass5, testClass6); Assert.assertEquals(testClass6, testClass7); Assert.assertEquals(testClass9, testClass8); testClass1.accept(testClassVisitor); Assert.assertEquals(testClass1, testClass2); Assert.assertEquals(testClass8, testClass3); testClass1.accept(testClassVisitor); Assert.assertEquals(testClass9, testClass4); Assert.assertEquals(testClass5, testClass6); Assert.assertEquals(testClass8, testClass7); Assert.assertEquals(testClass9, testClass8); testClass1.accept(testClassVisitor); Assert.assertEquals(testClass9, testClass8); Assert.assertEquals(testClass10, testClass8); }
@Test public void testVisitUsingCustomHandler() { class Test { public void test() { } } Test testClass = new Test(); TestClass testClass1 = new Test(); testClass1.accept(new Visitor() { @Override public void start(ClassInfo typeInfo) { } @Override public void visitUsingCustomHandler(ClassInfo typeInfo) { } }); Assert.assertEquals("class Test { public void test() { } }", testClass1.getClass().getName()); }
@Test public void generateNonExecutableJson() { new GsonBuilder().generateNonExecutableJson().build(); }
@Test public void generateNonExecutableJson_with_default_field_naming_strategy_is_set() throws IOException { String json = "{\"field\":{\"name\":\"value\"}}"; new GsonBuilder().setPrettyPrinting(true).generateNonExecutableJson().toJson(json); assertTrue(new File(tempFolder.getRoot().getPath()).exists()); }
@Test public void generateNonExecutableJson() throws IOException { String json = "{\n" + " \"type\": \"test\",\n" + " \"name\": \"test\",\n" + " \"fields\": [\n" + " {\n" + " \"type\": \"test\",\n" + " \"name\": \"test\",\n" + " \"fields\": [\n" + " {\n" + " \"type\": \"test\",\n" + " \"name\": \"test\"\n" + " },\n" + " {\n" + " \"type\": \"test\",\n" + " \"name\": \"test\",\n" + " \"fields\": [\n" + " {\n" + " \"type\": \"test\",\n" + " \"name\": \"test\"\n" + " }\n" + " ]\n" + " }\n" + " ]\n" + " }\n" + " ]\n" + "}"; new GsonBuilder().setPrettyPrinting(true).create(); String actual = new Gson().toJson(json); assertEquals(json, actual
@Test public void test_setSerializationPolicy() { new GsonBuilder().setLongSerializationPolicy(NamingPolicy.DEFAULT).setExclusionVersionsAfter(IGNORE_VERSIONS_AFTER).setCodeFieldNamingStrategy(CodeFieldNamingStrategy2.DEFAULT).setCodeFieldNamingStrategy(CodeFieldNamingStrategy2.DEFAULT).setExclusionVersionsAfter(IGNORE_VERSIONS_AFTER).setCodeFieldNamingStrategy(CodeFieldNamingStrategy2.DEFAULT).setCodeFieldNamingStrategy(CodeFieldNamingStrategy2.DEFAULT).setExclusionVersionsAfter(IGNORE_VERSIONS_AFTER).build(); }
@Test public void test_setSerializationPolicy() throws IOException { String json = "{\"class\":\"org.apache.tomeo.client.Test\", \"long_serialization_policy\": \"custom_long_serialization_policy\", \"nested_field_naming_strategy\": \"custom_field_naming_strategy\", \"nested_field_naming_strategy\": \"custom_field_naming_strategy\", \"nested_field_naming_strategy\": \"custom_field_naming_strategy\", \"nested_field_naming_strategy\": \"custom_field_naming_strategy\", \"nested_field_naming_strategy\": \"custom_field_naming_strategy\", \"nested_field_naming_strategy\": \"custom_field_naming_strategy\", \"nested_field_naming_strategy\": \"custom_field_naming_strategy\", \"nested_field_naming_strategy\": \"custom_field_naming_strategy\", \"nested_field_naming_strategy\": \"custom_field_naming_strategy\", \"nested_field_naming_strategy\": \"custom_field_naming_strategy\", \"nested_field_naming_strategy\": \"custom_field_naming_strategy\", \"nested_field_naming_strategy\":
@Test public void test_setLongSerializationPolicy() { String json = "{\"fieldNamingStrategy\": \"org.apache.tomeo.util.Date\", \"fieldNamingStrategy2\": \"org.apache.tomeo.util.Date\", \"fieldNamingStrategy\": \"org.apache.tomeo.util.Date\"}"; LongSerializationPolicy serializationPolicy = new LongSerializationPolicy() { @Override public long read(FieldNamingStrategy<?> fieldNamingStrategy) { return ".util.Date"; } @Override public long read(FieldNamingStrategy<?> fieldNamingStrategy) { return ".util.Date"; } }; new GsonBuilder().setLongSerializationPolicy(serializationPolicy); String actual = new Gson().toJson(json); assertEquals(json, actual); }
@Test public void setFieldNamingPolicy() { FieldNamingPolicy namingPolicy = Mockito.mock(FieldNamingPolicy.class); Mockito.when(namingPolicy.getFieldNamingPolicy()).thenReturn(NamingStrategy.DEFAULT); new GsonBuilder().setFieldNamingPolicy(namingPolicy); }
@Test public void testNamingConventionFieldNamingPolicy() { FieldNamingPolicy namingPolicy = Mockito.mock(FieldNamingPolicy.class); Mockito.when(namingPolicy.getFieldType()).thenReturn(FieldType.STRING); Mockito.when(fieldNamingStrategy2.getFieldType()).thenReturn(FieldType.STRING); new GsonBuilder().setFieldNamingStrategy(namingPolicy).setExclusionStrategies(exclusionStrategy); new GsonBuilder().setFieldNamingStrategy(fieldNamingStrategy2).setExclusionStrategies(exclusionStrategy); new GsonBuilder().setFieldNamingStrategy(fieldNamingStrategy2).setExclusionStrategies(exclusionStrategy); }
@Test public void testNamingStrategy() { FieldNamingStrategyMock mockStrategy = new FieldNamingStrategyMock(); new Expectations() { { mockStrategy.setNamingStrategy(Mockito.any(FieldNamingStrategy.class)); result = mockStrategy; } }; new Expectations() { { mockStrategy.setNamingStrategy(Mockito.any(FieldNamingStrategy.class)); result = mockStrategy; } }; new Expectations() { { mockStrategy.setNamingStrategy(Mockito.any(FieldNamingStrategy.class)); result = mockStrategy; } }; new GsonBuilder().setFieldNamingStrategy(mockStrategy); new GsonBuilder().setFieldNamingStrategy(mockStrategy); }
@Test public void testNamingStrategy() { FieldNamingStrategy2 namingStrategy = Mockito.mock(FieldNamingStrategy2.class); Mockito.when(fieldNamingStrategy.getName()).thenReturn("field"); Mockito.when(fieldNamingStrategy.getNamingStrategy()).thenReturn(namingStrategy); GsonBuilder builder = new GsonBuilder(); builder.setFieldNamingStrategy(namingStrategy); Gson gson = builder.build(); FieldNamingStrategy2 adapter = gson.getFieldNamingStrategy(); Assert.assertEquals(namingStrategy, adapter.getNamingStrategy()); }
@Test public void testNamingStrategy_with_default_naming_strategy() { FieldNamingStrategy2 fieldNamingStrategy = FieldNamingStrategy2.DEFAULT; new GsonBuilder().setFieldNamingStrategy(fieldNamingStrategy); }
@Test public void testNamingStrategy() throws IOException { String json = "{\n" + " \"name\": \"Test\",\n" + " \"type\": \"Test\",\n" + " \"enum\": \"TestEnum\",\n" + " \"enumField\": \"TestEnumField\",\n" + " \"enumField\": \"TestEnumField\",\n" + " \"enumField\": \"TestEnumField\",\n" + " \"enumField\": \"TestEnumField\",\n" + " \"enumField\": \"TestEnumField\",\n" + " \"enumField\": \"TestEnumField\",\n" + " \"enumField\": \"TestEnumField\",\n" + " \"enumField\": \"TestEnumField\",\n" + " \"enumField\": \"TestEnumField\",\n" + " \"enumField\": \"TestEnumField\",\n" + " \"enumField\": \"TestEnumField\",\n" + " \"enumField\": \"TestEnumField\",\n" + " \"enumField\": \"TestEnumField\",\n" + " \"enumField\": \"TestEnumField\",\n" + " \"enumField\": \"
@Test public void testNamingStrategy() throws IOException { String json = "{\n" + " \"name\": \"Test\",\n" + " \"type\": \"Test\",\n" + " \"name\": \"Test\",\n" + " \"type\": \"Test\",\n" + " \"name\": \"Test\",\n" + " \"type\": \"Test\",\n" + " \"name\": \"Test\",\n" + " \"type\": \"Test\",\n" + " \"type\": \"Test\",\n" + " \"name\": \"Test\",\n" + " \"type\": \"Test\",\n" + " \"name\": \"Test\",\n" + " \"type\": \"Test\",\n" + " \"type\": \"Test\",\n" + " \"name\": \"Test\",\n" + " \"type\": \"Test\",\n" + " \"name\": \"Test\",\n" + " \"type\": \"Test\",\n" + " \"name\": \"Test\",\n" + " \"type\": \"Test\",\n" + " \"name\": \"Test\"\n" + " }"; ClassPathResource
@Test public void isValidSince() { assertFalse(isValidSince(Since.of(1000))); assertFalse(isValidSince(Since.of(1000))); assertFalse(isValidSince(Since.of(1000L, Until.of(1000)))); assertFalse(isValidSince(Since.of(1000L, Until.of(1000)))); assertFalse(isValidSince(Since.of(1000L, Until.of(1000)))); assertFalse(isValidSince(Since.of(1000L, Until.of(1000L, Until.of(1000)))); assertFalse(isValidSince(Since.of(1000L, Until.of(1000L, Until.of(1000L)))); assertFalse(isValidSince(Since.of(1000L, Until.of(1000L, Until.of(1000L, Until.of(1000L))))); assertFalse(isValidSince(Since.of(1000L, Until.of(1000L, Until.of(1000L, Until.of(1000L))))); assertFalse(isValidSince(null)); assertFalse(isValidSince(null)); assertFalse(isValidSince(null, Until.of(1000L, null)); assertFalse(is
@Test public void testHasModifier() throws NoSuchFieldException { FieldAttributes f = new FieldAttributes(Test.class, Test.class.getDeclaredField("a")); Assert.assertTrue(f.hasModifier(0)); Assert.assertFalse(f.hasModifier(1)); Assert.assertFalse(f.hasModifier(2)); Assert.assertFalse(f.hasModifier(3)); Assert.assertFalse(f.hasModifier(4)); Assert.assertFalse(f.hasModifier(5)); Assert.assertFalse(f.hasModifier(6)); Assert.assertFalse(f.hasModifier(7)); Assert.assertFalse(f.hasModifier(8)); Assert.assertFalse(f.hasModifier(9)); Assert.assertFalse(f.hasModifier(10)); Assert.assertFalse(f.hasModifier(11)); Assert.assertFalse(f.hasModifier(12)); Assert.assertFalse(f.hasModifier(13)); Assert.assertFalse(f.hasModifier(14)); Assert.assertFalse(f.hasModifier(15)); Assert.assertFalse(f.hasModifier(16)); Assert.assertFalse(f.hasModifier(17)); Assert.assertFalse(f.hasModifier(18)); Assert.assertFalse(
@Test public void testHasModifier() { assertTrue(fieldAttributes.hasModifier(0)); assertFalse(fieldAttributes.hasModifier(1)); }
@Test public void testJsonPrimitive() { JsonPrimitive number = new JsonPrimitive(42); assertEquals(1, number.getAsBoolean()); assertEquals(42l, number.getAsNumber()); }
@Test public void testEscaping() throws IOException { JsonPrimitive number = new JsonPrimitive(true); number.setValue("abc"); assertEquals(1, number.getAsInt()); }
@Test public void isNumber() { JsonPrimitive bool = new JsonPrimitive(true); Assert.assertEquals(true, bool.isNumber()); Assert.assertEquals(true, bool.isNumber()); Assert.assertEquals(true, bool.isNumber()); Assert.assertEquals(true, new JsonPrimitive(false).isNumber()); Assert.assertEquals(false, new JsonPrimitive(true).isNumber()); Assert.assertEquals(false, new JsonPrimitive(false).isNumber()); Assert.assertEquals(false, new JsonPrimitive(true).isNumber()); Assert.assertEquals(false, new JsonPrimitive(false).isNumber()); Assert.assertEquals(false, new JsonPrimitive(true).isNumber()); Assert.assertEquals(false, new JsonPrimitive(false).isNumber()); Assert.assertEquals(false, new JsonPrimitive(true).isNumber()); Assert.assertEquals(false, new JsonPrimitive(false).isNumber()); Assert.assertEquals(false, new JsonPrimitive(false).isNumber()); Assert.assertEquals(false, new JsonPrimitive(false).isNumber()); Assert.assertEquals(false, new JsonPrimitive(false).isNumber()); Assert.assertEquals(false, new Json
@Test public void testIsNumber() { Assert.assertTrue(new JsonPrimitive(true).isNumber()); Assert.assertFalse(new JsonPrimitive(false).isNumber()); Assert.assertFalse(new JsonPrimitive("").isNumber()); Assert.assertTrue(new JsonPrimitive("abc").isNumber()); Assert.assertFalse(new JsonPrimitive("abc").isNumber()); Assert.assertFalse(new JsonPrimitive("abc").isNumber()); Assert.assertFalse(new JsonPrimitive("abc").isNumber()); Assert.assertFalse(new JsonPrimitive("abc").isNumber()); Assert.assertFalse(new JsonPrimitive("abc").isNumber()); Assert.assertFalse(new JsonPrimitive("abc").isNumber()); Assert.assertFalse(new JsonPrimitive("abc").isNumber()); }
@Test public void testStringToNumber() { assertEquals(Long.MIN_VALUE, stringToNumber("-1")); assertEquals(Long.MAX_VALUE, stringToNumber("-1")); assertEquals(new BigDecimal("1"), stringToNumber("1")); assertEquals(new BigDecimal("1"), stringToNumber("1")); assertEquals(new BigDecimal("1"), stringToNumber("1")); assertEquals(new BigDecimal("1"), stringToNumber("1")); assertEquals(new BigDecimal("1"), stringToNumber("1")); assertEquals(new BigDecimal("1"), stringToNumber("1")); assertEquals(new BigDecimal("1"), stringToNumber("1")); assertEquals(new BigDecimal("1"), stringToNumber("1")); assertEquals(new BigDecimal("1"), stringToNumber("1")); assertEquals(new BigDecimal("1"), stringToNumber("1")); assertEquals(new BigDecimal("1"), stringToNumber("1")); assertEquals(new BigDecimal("1"), stringToNumber("1")); assertEquals(new BigDecimal("1"), stringToNumber("1")); assertEquals(new BigDecimal("1"), stringToNumber("1")); assertEquals(new BigDecimal("1"), stringToNumber("1")); assertEquals(new BigDecimal("1"), stringToNumber("1")); assertEquals(new BigDecimal("1"), stringToNumber("1")); assertEquals(new BigDecimal("1"), stringToNumber("1")); assertEquals(new BigDecimal
@Test public void testGetAsString() throws Exception { JsonPrimitive bool = new JsonPrimitive(true); Assert.assertEquals("true", bool.getAsString()); Assert.assertEquals("true", bool.getAsString()); Assert.assertEquals("false", bool.getAsString()); Assert.assertEquals("false", bool.getAsString()); Assert.assertEquals("false", bool.getAsString()); }
@Test public void testGetAsString() throws Exception { JsonPrimitive bool = new JsonPrimitive(true); Assert.assertEquals("true", bool.getAsString()); bool = new JsonPrimitive(false); Assert.assertEquals("false", bool.getAsString()); bool = new JsonPrimitive(true); Assert.assertEquals("true", bool.getAsString()); bool = new JsonPrimitive(false); Assert.assertEquals("false", bool.getAsString()); }
@Test public void testGetAsString() throws Exception { JsonPrimitive bool = new JsonPrimitive(true); Assert.assertEquals(true, bool.isBoolean()); Assert.assertEquals("true", bool.getAsString()); bool = new JsonPrimitive(false); Assert.assertEquals(false, bool.isBoolean()); Assert.assertEquals("false", bool.getAsString()); bool = new JsonPrimitive(true); Assert.assertEquals(true, bool.isBoolean()); Assert.assertEquals("true", bool.getAsString()); bool = new JsonPrimitive(true); Assert.assertEquals(true, bool.isBoolean()); Assert.assertEquals("true", bool.getAsString()); }
@Test public void testGetAsString() { JsonPrimitive bool = new JsonPrimitive(true); Assert.assertEquals("true", bool.getAsString()); bool = new JsonPrimitive(false); Assert.assertEquals("false", bool.getAsString()); bool = new JsonPrimitive(true); Assert.assertEquals("true", bool.getAsString()); }
@Test public void testGetAsString() { JsonPrimitive bool = new JsonPrimitive(true); Assert.assertEquals("true", bool.getAsString()); Boolean bool2 = new JsonPrimitive(false); Assert.assertEquals("false", bool2.getAsString()); Boolean bool3 = new JsonPrimitive(true); Assert.assertEquals("true", bool3.getAsString()); Boolean bool4 = new JsonPrimitive(false); Assert.assertEquals("false", bool4.getAsString()); }
@Test public void testGetAsString() { Assert.assertEquals("true", new JsonPrimitive(true).getAsString()); Assert.assertEquals("true", new JsonPrimitive(true).getAsString()); Assert.assertEquals("false", new JsonPrimitive(false).getAsString()); Assert.assertEquals("false", new JsonPrimitive(false).getAsString()); Assert.assertEquals("false", new JsonPrimitive(false).getAsString()); Assert.assertEquals("false", new JsonPrimitive(false).getAsString()); Assert.assertEquals("false", new JsonPrimitive(false).getAsString()); Assert.assertEquals("false", new JsonPrimitive(false).getAsString()); Assert.assertEquals("false", new JsonPrimitive(false).getAsString()); Assert.assertEquals("false", new JsonPrimitive(false).getAsString()); }
@Test public void testGetAsDouble() throws Exception { JsonPrimitive number = new JsonPrimitive(true); number.setValue(true); Assert.assertEquals(true, number.getAsDouble(), 0); number.setValue(false); Assert.assertEquals(false, number.getAsDouble(), 0); number.setValue(BigDecimal.ONE); Assert.assertEquals(BigDecimal.ONE, number.getBigDecimal(), 0); number.setValue(BigDecimal.TEN); Assert.assertEquals(BigDecimal.ONE, number.getBigDecimal(), 0); number.setValue(BigDecimal.TEN); Assert.assertEquals(BigDecimal.ONE, number.getBigDecimal(), 0); number.setValue(BigDecimal.TEN); Assert.assertEquals(BigDecimal.TEN, number.getBigDecimal(), 0); }
@Test public void testGetAsDouble() throws Exception { JsonPrimitive bool = new JsonPrimitive(true); bool.setAsBooleanWrapper(true); Assert.assertTrue(bool.isNumber()); bool.setAsDouble(1.0); Assert.assertTrue(bool.isNumber()); bool.setAsDouble(BigDecimal.ONE); Assert.assertTrue(bool.isNumber()); }
@Test public void testGetBigDecimal() throws Exception { JsonPrimitive number = new JsonPrimitive(true); BigDecimal result = number.getAsBigDecimal(); Assert.assertEquals(BigDecimal.valueOf(true), result); }
@Test public void testGetAsBigDecimal() { JsonPrimitive number = new JsonPrimitive(true); BigDecimal result = number.getAsBigDecimal(); Assert.assertEquals(BigDecimal.valueOf(true), result); }
@Test public void testGetInt() throws Exception { JsonPrimitive number = new JsonPrimitive(true); number.setValue(true); assertEquals(true, number.getAsInt()); number.setValue(false); assertEquals(false, number.getAsInt()); number.setValue(Integer.MAX_VALUE); assertEquals(Integer.MAX_VALUE, number.getAsInt()); }
@Test public void testGetAsInt() throws Exception { JsonPrimitive bool = new JsonPrimitive(true); bool.setBooleanWrapper(true); int i = 0; while (bool.isNumber()) { i++; try { Thread.sleep(100); } catch (InterruptedException e) { } } assertEquals(i, bool.getAsInt()); }
@Test public void testGetAsObject() { JsonPrimitive number = new JsonPrimitive(true); assertEquals(true, number.getAsBooleanWrapper()); assertEquals(true, number.isNumber()); assertEquals(true, number.isBoolean()); assertEquals(true, number.isLongWrapper()); assertEquals(true, number.isNumber()); assertEquals(true, number.isBoolean()); assertEquals(true, number.isLong()); assertEquals(true, number.isString()); assertEquals(true, number.isBigDecimal()); assertEquals(true, number.isLong()); assertEquals(true, number.isNumber()); assertEquals(true, number.isBoolean()); assertEquals(true, number.isBoolean()); assertEquals(true, number.isNumber()); assertEquals(true, number.isBigDecimal()); assertEquals(true, number.isLong()); assertEquals(true, number.isBoolean()); assertEquals(true, number.isNumber()); assertEquals(true, number.isBooleanWrapper()); assertEquals(true, number.isBoolean()); assertEquals(true, number.isNumber()); assertEquals(true, number.isBoolean()); assertEquals(true, number.isLong()); assertEquals(true, number.isBoolean()); assertEquals(true, number.isBooleanWrapper()); assertEquals(true, number.
@Test public void testGetAsObject() { assertEquals("[LINE] \"true\"", new JsonPrimitive(true).getAsString()); assertEquals("[LINE] \"false\"", new JsonPrimitive(false).getAsString()); assertEquals("[LINE] \"false\"", new JsonPrimitive(false).getAsString()); assertEquals("[LINE] \"false\"", new JsonPrimitive(false).getAsString()); assertEquals("[LINE] \"false\"", new JsonPrimitive(false).getAsString()); assertEquals("[LINE] \"false\"", new JsonPrimitive(false).getAsString()); assertEquals("[LINE] \"false\"", new JsonPrimitive(false).getAsString()); assertEquals("[LINE] \"false\"", new JsonPrimitive(false).getAsString()); assertEquals("[LINE] \"false\"", new JsonPrimitive(false).getAsString()); assertEquals("[LINE] \"false\"", new JsonPrimitive(false).getAsString()); assertEquals("[LINE] \"false\"", new JsonPrimitive(false).getAsString()); assertEquals("[LINE] \"false\"", new JsonPrimitive(false).getAsString()); assertEquals("[LINE] \"false\"", new JsonPrimitive(false).getAsString()); assertEquals("[LINE] \"false\"", new JsonPrimitive(false).getAsString()); assertEquals("[LINE] \"false\"",
@Test public void testGetAsObject() { JsonPrimitive number = new JsonPrimitive(true); assertEquals(true, number.getAsBooleanWrapper()); assertEquals(true, number.isNumber()); assertEquals(true, number.isLongWrapper()); assertEquals(true, number.isBoolean()); assertEquals(true, number.isNumber()); assertEquals(true, number.isString()); assertEquals(true, number.isBigDecimal()); assertEquals(true, number.isLong()); assertEquals(true, number.isNumber()); assertEquals(true, number.isBooleanWrapper()); assertEquals(true, number.isBoolean()); assertEquals(true, number.isNumber()); assertEquals(true, number.isString()); assertEquals(true, number.getAsDouble()); assertEquals(true, number.isBigDecimal()); assertEquals(true, number.isFlolof()); assertEquals(true, number.getAsBase64()); assertEquals(true, number.isNumber()); assertEquals(true, number.isBooleanWrapper()); assertEquals(true, number.isBoolean()); assertEquals(true, number.isNumber()); assertEquals(true, number.isLong()); assertEquals(true, number.isBoolean()); assertEquals(true, number.isBooleanWrapper()); assertEquals(true, number.isBoolean
@Test public void testIsPrimitiveOrString() { JsonPrimitive booleanWrapper = new JsonPrimitive(true); Assert.assertTrue(isPrimitiveOrString(booleanWrapper)); booleanWrapper = new JsonPrimitive(false); Assert.assertFalse(isPrimitiveOrString(booleanWrapper)); booleanWrapper = new JsonPrimitive(false); Assert.assertFalse(isPrimitiveOrString(booleanWrapper)); booleanWrapper = new JsonPrimitive(true); Assert.assertTrue(isPrimitiveOrString(booleanWrapper)); booleanWrapper = new JsonPrimitive(false); Assert.assertFalse(isPrimitiveOrString(booleanWrapper)); }
@Test public void testLongSerializationPolicy() { LongSerializationPolicy policy = new LongSerializationPolicy(Strategy.LONG); assertEquals(Long.valueOf(123), policy.serialize(123L)); assertEquals(Long.valueOf(123), policy.serialize(123L)); assertEquals(Long.valueOf(123), policy.serialize(123L)); assertEquals(Long.valueOf(123), policy.serialize(123L)); assertEquals(Long.valueOf(123), policy.serialize(123L)); assertEquals(Long.valueOf(123), policy.serialize(123L)); assertEquals(Long.valueOf(123), policy.serialize(123L)); assertEquals(Long.valueOf(123), policy.serialize(123L)); assertEquals(Long.valueOf(123), policy.serialize(123L)); assertEquals(Long.valueOf(123), policy.serialize(123L)); assertEquals(Long.valueOf(123), policy.serialize(123L)); assertEquals(Long.valueOf(123), policy.serialize(123L)); assertEquals(Long.valueOf(123), policy.serialize(123L)); assertEquals(Long.valueOf(123), policy.serialize(123L)); assertEquals(Long.valueOf(123), policy.serialize(123L)); assertEquals(Long.valueOf(
@Test public void testLongSerializationPolicy() { LongSerializationPolicy policy = LongSerializationPolicy.strategy(); assertThat(policy.strategy(), is(Strategy.EOL)); assertThat(policy.serialize(123L), is(123L)); assertThat(policy.serialize(123L), is(123L)); assertThat(policy.deserialize(123L), is(123L)); assertThat(policy.deserialize(123L), is(123L)); assertThat(policy.deserialize(123L), is(123L)); assertThat(policy.deserialize(123L), is(123L)); assertThat(policy.deserialize(123L), is(123L)); assertThat(policy.deserialize(123L), is(123L)); assertThat(policy.deserialize(123L), is(123L)); assertThat(policy.deserialize(123L), is(123L)); assertThat(policy.deserialize(123L), is(123L)); assertThat(policy.deserialize(123L), is(123L)); assertThat(policy.deserialize(123L), is(123L)); assertThat(policy.deserialize(123L), is(123L)); assertThat(policy.deserialize(123L), is(123L)); assertThat(policy.deserialize(123L), is(
@Test public void serialize_long() { Long value = 1L; JsonElement result = new LongSerializationPolicy.Strategy().serialize(value); assertThat(result).isNotNull(); assertThat(result.isJsonPrimitive()).isTrue(); }
@Test public void serialize() { Long value = 1L; JsonElement result = LongSerializationPolicy.DEFAULT.serialize(value); assertThat(result).isNotNull(); assertThat(result.isJsonPrimitive()).isTrue(); assertThat(result.getAsJsonPrimitive()).isEqualTo(value); }
@Test public void shouldSkipClass() throws Exception { Assert.assertTrue(testee.shouldSkipClass(String.class)); Assert.assertFalse(testee.shouldSkipClass(Integer.class)); Assert.assertFalse(testee.shouldSkipClass(String.class)); Assert.assertFalse(testee.shouldSkipClass(Integer.class)); Assert.assertFalse(testee.shouldSkipClass(String.class)); }
@Test public void testShouldSkipClass() { Assert.assertFalse(subject.shouldSkipClass(null)); Assert.assertFalse(subject.shouldSkipClass(String.class)); Assert.assertFalse(subject.shouldSkipClass(Integer.class)); Assert.assertFalse(subject.shouldSkipClass(String.class)); Assert.assertFalse(subject.shouldSkipClass(Integer.class)); Assert.assertFalse(subject.shouldSkipClass(String.class)); Assert.assertFalse(subject.shouldSkipClass(Integer.class)); Assert.assertFalse(subject.shouldSkipClass(Integer.class)); Assert.assertFalse(subject.shouldSkipClass(String.class)); Assert.assertFalse(subject.shouldSkipClass(Integer.class)); Assert.assertFalse(subject.shouldSkipClass(String.class)); Assert.assertFalse(subject.shouldSkipClass(Integer.class)); Assert.assertFalse(subject.shouldSkipClass(String.class)); Assert.assertFalse(subject.shouldSkipClass(Integer.class)); Assert.assertFalse(subject.shouldSkipClass(Integer.class)); Assert.assertFalse(subject.shouldSkipClass(String.class)); Assert.assertFalse(subject.
@Test public void testIsJsonArray() { new AssertTester(new String[] { "[\"a\",\"b\"]", "[\"a\",\"b\"]", "[\"a\",\"b\"]", "[\"a\",\"b\"]", "[\"a\",\"b\"]", "[\"a\",\"b\"]", "[\"a\",\"b\"]", "[\"a\",\"b\"]", "[\"a\",\"b\"]", "[\"a\",\"b\"]", "[\"a\",\"b\"]", "[\"a\",\"b\"]", "[\"a\",\"b\"]", "[\"a\",\"b\"]", "[\"a\",\"b\"]", "[\"a\",\"b\"]", "[\"a\",\"b\"]", "[\"a\",\"b\"]", "[\"a\",\"b\"]", "[\"a\",\"b\"]", "[\"a\",\"b\"]", "[\"a\",\"b\"]", "[\"a\",\"b\"]", "[\"a\",\"b\"]", "[\"a\",\"b\"]", "[\"a\",\"b\"]", "[\"a\",\"b\"]", "[\"a\",\"b\"]", "[\"a\",\"b\"]", "[\"a\",\"b\
@Test public void testIsJsonArray() throws IOException { Assert.assertTrue(new JsonArray("[\"a\",\"b\"]").isJsonArray()); Assert.assertFalse(new JsonArray("[\"a\",\"b\"]").isJsonArray()); Assert.assertTrue(new JsonArray("[\"a\",\"b\"]").isJsonArray()); Assert.assertFalse(new JsonArray("[\"a\",\"b\"]").isJsonArray()); Assert.assertFalse(new JsonArray("[\"a\",\"b\"]").isJsonArray()); Assert.assertFalse(new JsonArray("[\"a\",\"b\"]").isJsonArray()); Assert.assertFalse(new JsonArray("[\"a\",\"b\"]").isJsonArray()); Assert.assertFalse(new JsonArray("[\"a\",\"b\"]").isJsonArray()); Assert.assertFalse(new JsonArray("[\"a\",\"b\"]").isJsonArray()); }
@Test public void testIsJsonObject() { new AssertTester(new String[] { "a", "b", "c" }, new String[] { "a", "b", "c" }, new String[] { "a", "b", "c" }, new String[] { "a", "b", "c" }, new String[] { "a", "b", "c" }, new String[] { "a", "b", "c" }, new String[] { "a", "b", "c" }, new String[] { "a", "b", "c" }, new String[] { "a", "b", "c" }, new String[] { "a", "b", "c" }, new String[] { "a", "b", "c" }, new String[] { "a", "b", "c" }, new String[] { "a", "b", "c" }, new String[] { "a", "b", "c" }, new String[] { "a", "b", "c" }, new String[] { "a", "b", "c" }, new String[] { "a", "b", "c" }, new String[] { "
@Test public void testIsJsonObject() { Assert.assertTrue(new JsonObject("[\"one\",\"two\"]").isJsonObject()); Assert.assertFalse(new JsonObject("[\"one\",\"two\"]").isJsonObject()); Assert.assertFalse(new JsonObject("[\"one\",\"two\"]").isJsonObject()); Assert.assertFalse(new JsonObject("[\"one\",\"two\"]").isJsonObject()); Assert.assertFalse(new JsonObject("[\"one\",\"two\"]").isJsonObject()); Assert.assertFalse(new JsonObject("[\"one\",\"two\"]").isJsonObject()); Assert.assertFalse(new JsonObject("[\"one\",\"two\"]").isJsonObject()); Assert.assertFalse(new JsonObject("[\"one\",\"two\"]").isJsonObject()); Assert.assertFalse(new JsonObject("[\"one\",\"two\"]").isJsonObject()); Assert.assertFalse(new JsonObject("[\"one\",\"two\"]").isJsonObject()); Assert.assertFalse(new JsonObject("[\"one\",\"two\"]").isJsonObject()); Assert.assertFalse(new JsonObject("[\"one\",\"two\"]").isJsonObject()); Assert.assertFalse(new JsonObject("[\"one\",\"two\"]").isJsonObject()); Assert.assertFalse(new JsonObject("[\"one\",\"two\
@Test public void testIsJsonPrimitive() { new AssertTester().addRule(new AssertTester().addRule(new AssertTester().addRule(new AssertTester().addRule(new AssertTester().addRule(new AssertTester().addRule(new AssertTester().addRule(new AssertTester().addRule(new AssertTester().addRule(new AssertTester().addRule(new AssertTester().addRule(new AssertTester().addRule(new AssertTester().addRule(new AssertTester().addRule(new AssertTester().addRule(new AssertTester().testEquals(); }
@Test public void testIsJsonPrimitive() throws IOException { String s = "{\"a\":1,\"b\":2,\"c\":null}"; Assert.assertTrue(s.contains(\"a\"b\"")); Assert.assertTrue(s.contains(\"c\"")); Assert.assertTrue(s.contains(\"\"\"")); Assert.assertTrue(s.contains(\"\"\"")); Assert.assertTrue(s.contains(\"\"\"")); Assert.assertTrue(s.contains(\"\"\"\"")); Assert.assertTrue(s.contains(\"\"\"\"")); Assert.assertTrue(s.contains(\"\"\"\"\"")); Assert.assertTrue(s.contains(\"\"\"\"\"")); Assert.assertTrue(s.contains(\"\"\"\"\"")); Assert.assertTrue(s.contains(\"\"\"\"")); Assert.assertTrue(s.contains(\"\"\"\"")); Assert.assertTrue(s.contains(\"\"\"\"")); Assert.assertTrue(s.contains(\"\"\"\"")); Assert.assertTrue(s.contains(\"\"\"\"")); Assert.assertTrue(s.contains(\"\"\"\"")); Assert.
@Test public void testIsJsonNull() { new AssertTester(new String[] { null }, new AssertTester(new String[] { null }, new AssertTester(new String[] { null }))); Assert.assertFalse(new AssertTester(new String[] { null }, new AssertTester(new String[] { null }))); Assert.assertTrue(new AssertTester(new String[] { null }, new AssertTester(new String[] { null }))); Assert.assertFalse(new AssertTester(new String[] { null }, new AssertTester(new String[] { null }))); Assert.assertFalse(new AssertTester(new String[] { null }, new AssertTester(new String[] { null }))); Assert.assertFalse(new AssertTester(new String[] { null }, new AssertTester(new String[] { null }))); Assert.assertFalse(new AssertTester(new String[] { null }, new AssertTester(new String[] { null }))); Assert.assertTrue(new AssertTester(new String[] { null }, new AssertTester(new String[] { null }))); Assert.assertFalse(new AssertTester(new String[] { null }, new AssertTester(new String[] { null }))); Assert.assertFalse(new Assert
@Test public void testIsJsonNull() throws IOException { JsonNull null = new JsonNull(); Assert.assertTrue(null.isJsonNull()); Assert.assertFalse(null.isJsonNull()); Assert.assertTrue(null.isJsonNull()); Assert.assertFalse(null.isJsonNull()); Assert.assertFalse(null.isJsonNull()); Assert.assertFalse(null.isJsonNull()); }
@Test public void testGetAsJsonArray() { new AssertThrows(IllegalStateException.class, () -> new JsonArray("[\"a\",\"b\"]").getAsJsonArray()); new AssertThrows(IllegalStateException.class, () -> new JsonArray("[\"a\",\"b\"]").getAsJsonArray()); new AssertThrows(IllegalStateException.class, () -> new JsonArray("[\"a\",\"b\"]").getAsJsonArray()); new AssertThrows(IllegalStateException.class, () -> new JsonArray("[\"a\",\"b\"]").getAsJsonArray()); new AssertThrows(IllegalStateException.class, () -> new JsonArray("[\"a\",\"b\"]").getAsJsonArray()); new AssertThrows(IllegalStateException.class, () -> new JsonArray("[\"a\",\"b\"]").getAsJsonArray()); new AssertThrows(IllegalStateException.class, () -> new JsonArray("[\"a\",\"b\"]").getAsJsonArray()); new AssertThrows(IllegalStateException.class, () -> new JsonArray("[\"a\",\"b\"]").getAsJsonArray()); new AssertThrows(IllegalStateException.class, () -> new JsonArray("[\"a\",\"b\"]").getAsJsonArray()); new AssertThrows(IllegalStateException.class, () ->
@Test public void testGetAsJsonArray() { new AssertThrows(IllegalStateException.class, () -> { JsonArray array = new JsonArray(); array.add(new JsonObject().add("a")); array.add(new JsonArray().add(new JsonObject().add("b"))); array.add(new JsonArray().add(new JsonObject().add("c"))); new Assert.assertTrue(array.isJsonArray()); new Assert.assertTrue(array.isJsonArray()); new Assert.assertTrue(array.isJsonArray()); new Assert.assertTrue(array.isJsonArray()); new Assert.assertTrue(array.isJsonArray()); new Assert.assertTrue(array.isJsonArray()); new Assert.assertTrue(array.isJsonArray()); new Assert.assertTrue(array.isJsonArray()); new Assert.assertTrue(array.isJsonArray()); new Assert.assertTrue(array.isJsonArray()); new Assert.assertTrue(array.isJsonArray()); new Assert.assertTrue(array.isJsonArray()); new Assert.assertTrue(array.isJsonArray()); new Assert.assertTrue(array.isJsonArray()); new Assert.assertTrue(array.isJsonArray()); new Assert.assert
@Test public void testGetJsonArray() { JsonArray array = new JsonArray(); array.add(new JsonObject().add("a")); array.add(new JsonObject().add("b")); array.add(new JsonObject().add("c")); Assert.assertEquals(array, array.getAsJsonArray()); }
@Test public void testGetAsJsonPrimitive() { Assert.assertEquals(new JsonPrimitive(true), new Integer(2)); Assert.assertEquals(new JsonPrimitive(false), new Float(2f)); Assert.assertEquals(new JsonPrimitive(true), new BigDecimal(2f)); Assert.assertEquals(new JsonPrimitive(true), new Boolean(2f)); Assert.assertEquals(new JsonPrimitive(true), new Boolean(2f)); Assert.assertEquals(new JsonPrimitive(true), new Boolean(2f)); Assert.assertEquals(new JsonNull(), new JsonArray().getAsJsonPrimitive()); Assert.assertEquals(new JsonPrimitive(true), new JsonArray().getAsJsonPrimitive()); Assert.assertEquals(new JsonNull(), new JsonArray().getAsJsonPrimitive()); Assert.assertEquals(new JsonPrimitive(true), new JsonArray().getAsJsonPrimitive()); Assert.assertEquals(new JsonPrimitive(true), new JsonArray().getAsJsonPrimitive()); Assert.assertEquals(new JsonPrimitive(true), new JsonArray().getAsJsonPrimitive()); Assert.assertEquals(new JsonPrimitive(true), new JsonArray().getAsJsonPrimitive()); Assert.assertEquals(new JsonPrimitive(true), new JsonArray().getAsJsonPrimitive()); Assert.
@Test public void testIfPrimitive() { new AssertThrows(IllegalStateException.class, () -> { new AssertThrows(IllegalStateException.class, () -> { new AssertThrows(IllegalStateException.class, () -> { new AssertThrows(IllegalStateException.class, () -> { new AssertThrows(IllegalStateException.class, () -> { new AssertThrows(IllegalStateException.class, () -> { new AssertThrows(IllegalStateException.class, () -> { new AssertThrows(IllegalStateException.class, () -> { new AssertThrows(IllegalStateException.class, () -> { new AssertThrows(IllegalStateException.class, () -> { { new AssertThrows(IllegalStateException.class, () -> { { new AssertThrows(IllegalStateException.class, () -> { { new AssertThrows(IllegalStateException.class, () -> { { @Override public void checkEquals(IllegalStateException e -> { { Assert.class, () -> { new Assert.assertEquals(IllegalStateException.class, () -> { new Assert.assertEquals(IllegalStateException.class, () -> { new Assert.assertEquals(IllegalStateException.class, () -> { new Assert.assertEquals(IllegalStateException.class, () -> { } @Override public void testErrorCode (EOL
@Test public void testGetAsJsonPrimitive() { JsonPrimitive result = new JsonPrimitive(new byte[] { 1, 2, 3 }); assertEquals(result, new JsonArray(new JsonArray(new JsonObject(new JsonObject(new JsonObject(new JsonObject(new JsonObject(new JsonObject(new JsonObject(new JsonObject(new JsonObject(new JsonObject(new JsonObject(new JsonObject(new JsonObject(new JsonObject(new JsonObject(new JsonObject(new JsonObject(new JsonObject(new JsonObject(new JsonObject(new JsonObject(new JsonObject(new JsonObject(new JsonObject(new JsonObject(new JsonObject(new JsonObject(new JsonObject(new JsonObject(new JsonObject(new JsonObject(new JsonObject(new JsonObject(new JsonObject(new JsonObject(new JsonObject(new JsonArray(new JsonObject(new JsonObject(new JsonObject(new JsonObject(new JsonObject(new JsonObject(new JsonArray(new JsonObject(new JsonObject(new JsonObject(new JsonObject(new JsonArray(new JsonObject(new JsonObject(new JsonObject(new JsonObject(new JsonObject(new JsonArray(new JsonObject(new JsonObject(new JsonObject(new JsonObject(new JsonObject(new JsonObject(new JsonObject(new JsonObject(new JsonObject(new JsonObject(new JsonObject(new JsonObject(new JsonObject(new JsonObject(new JsonObject(new JsonObject(new JsonObject(new JsonObject(
@Test public void testObjectAndTypePair() { new ObjectTypePair(new Object(), null, false).hashCode(); new ObjectTypePair(new Object(), null, true).hashCode(); new ObjectTypePair(new Object(), null, true).hashCode(); new ObjectTypePair(new Object(), null, true).hashCode(); new ObjectTypePair(new Object(), null, true).hashCode(); new ObjectTypePair(new Object(), null, true).hashCode(); new ObjectTypePair(new Object(), null, true).hashCode(); new ObjectTypePair(new Object(), null, true).hashCode(); new ObjectTypePair(new Object(), null, true).hashCode(); new ObjectTypePair(new Object(), null, true).hashCode(); new ObjectTypePair(new Object(), null, true).hashCode(); new ObjectTypePair(new Object(), null, true).hashCode(); new ObjectTypePair(new Object(), null, true).hashCode(); new ObjectTypePair(new Object(), null, true).hashCode(); new ObjectTypePair(new Object(), null, true).hashCode(); new ObjectTypePair(new Object(), null, true).hashCode(); new ObjectTypePair(new Object(), null, true).hashCode(); new ObjectTypePair(new Object(), null, true).hashCode(); }
@Test public void testObjectAndTypePair() { ObjectTypePair pair = new ObjectTypePair(new Object(), null, false); assertEquals(pair.obj, null); pair = new ObjectTypePair(new Object(), null, true); assertEquals(pair.obj, null); pair = new ObjectTypePair(new Object(), null, true); assertEquals(pair.obj, null); pair = new ObjectTypePair(new Object(), null, true); assertEquals(pair.obj, null); }
@Test public void testObjectTypePair() { Type type = new ParameterizedTypeHandler() { @Override public Type getType() { return String.class; } @Override public Type[] getActualTypeArguments() { return new Type[0]; } @Override public Type getOwnerType() { return null; } @Override public void describeTo(Description description) { } }; ObjectTypePair pair = new ObjectTypePair(new Object(), type, false); assertEquals(pair.getType(), String.class); assertEquals(pair.getPreserveType(), false); pair = new ObjectTypePair(new Object(), type, true); assertEquals(pair.getType(), String.class); assertEquals(pair.getPreserveType(), true); pair = new ObjectTypePair(new Object(), type, true); assertEquals(pair.getType(), String.class); assertEquals(pair.getPreserveType(), true); pair = new ObjectTypePair(new Object(), type, true); assertEquals(pair.getType(), String.class); assertEquals(pair.getPreserveType(), true); }
public void testObjectTypePair() { ObjectTypePair pair; pair = new ObjectTypePair(new Object(), null, false); assertEquals(pair.obj, null); pair = new ObjectTypePair(new Object(), null, true); assertEquals(pair.obj, null); pair = new ObjectTypePair(new Object(), null, true); assertEquals(pair.obj, null); pair = new ObjectTypePair(new Object(), null, true); assertEquals(pair.obj, null); }
@Test public void testGetObject() { assertEquals("foo", objectTypePair.getObject()); }
@Test public void testGetObject() { assertEquals(obj, objectTypePair.getObject()); }
@Test public void testGetType() { assertEquals(".lang.String", objectTypePair.getType()); assertEquals(".lang.Integer", objectTypePair.getType()); assertEquals(".lang.Integer", objectTypePair.getType()); assertEquals(".lang.Integer", objectTypePair.getType()); assertEquals(".lang.Integer", objectTypePair.getType()); assertEquals(".lang.Integer", objectTypePair.getType()); assertEquals(".lang.Integer", objectTypePair.getType()); assertEquals(".lang.Integer", objectTypePair.getType()); assertEquals(".lang.Integer", objectTypePair.getType()); assertEquals(".lang.Integer", objectTypePair.getType()); assertEquals(".lang.Integer", objectTypePair.getType()); assertEquals(".lang.Integer", objectTypePair.getType()); assertEquals(".lang.Integer", objectTypePair.getType()); assertEquals(".lang.Integer", objectTypePair.getType()); assertEquals(".lang.Integer", objectTypePair.getType()); assertEquals(".lang.Integer", objectTypePair.getType()); assertEquals(".lang.Integer", objectTypePair.getType()); assertEquals(".lang.Integer", objectTypePair.getType()); assertEquals(".lang.Integer", objectTypePair.getType());
@Test public void testObjectType() { assertEquals(".lang.String", new ObjectTypePair(null, String.class, false).getType()); assertEquals(".lang.String", new ObjectTypePair(null, String.class, true).getType()); assertEquals(".lang.Integer", new ObjectTypePair(null, Integer.class, true).getType()); assertEquals(".lang.Integer", new ObjectTypePair(null, Integer.class, true).getType()); assertEquals(".lang.Integer", new ObjectTypePair(null, Integer.class, true).getType()); assertEquals(".lang.Integer", new ObjectTypePair(null, Integer.class, true).getType()); assertEquals(".lang.Integer", new ObjectTypePair(null, Integer.class, true).getType()); assertEquals(".lang.Integer", new ObjectTypePair(null, Integer.class, true).getType()); assertEquals(".lang.Integer", new ObjectTypePair(null, Integer.class, true).getType()); assertEquals(".lang.Integer", new ObjectTypePair(null, Integer.class, true).getType()); assertEquals(".lang.Integer", new ObjectTypePair(null, String.class, true).getType()); assertEquals(".lang
@Test public void testToString() { new ObjectTypePair(new Object(), Type.OBJECT, false).toString(); }
@Test public void testToString() { new ObjectTypePair(new Object(), Type.OBJECT, true).toString(); }
@Test public void testGetMatchingHandler_obj_type_preserve_type() { TypeHandlerMap<Object, ObjectTypePair> handlers = new ParameterizedTypeHandlerMap<Object, ObjectTypePair>(null, null, false); Pair<HANDLER, ObjectTypePair> matchingHandler = getMatchingHandler(handlers); assertEquals(null, matchingHandler.getFirst()); assertEquals(null, matchingHandler.getSecond()); }
@Test public void testGetMatchingHandler() throws Exception { Type type = new Type("test"); ParameterizedTypeHandlerMap<HANDLER> map = new ParameterizedTypeHandlerMap<HANDLER>(type, null); Pair<HANDLER, ObjectTypePair> matchingHandler = getMatchingHandler(map); assertEquals(null, matchingHandler.getFirst()); assertEquals(null, matchingHandler.getSecond()); }
@Test public void getMatchingHandler() throws Exception { new Expectations() { { getObject(); result = null; } }; Pair<HANDLER, ObjectTypePair> matcher = getMatchingHandler(null); ObjectTypePair found = null; for (ParameterizedTypeHandlerMap<HANDLER> map : mupers.entrySet()) { Pair<HANDLER, ObjectTypePair> pair = mapper.getMatchingHandler(map); found = pair; } Assert.assertEquals(HANDLER, found.getHandlerFor(null).getHandler()); Assert.assertEquals(HANDLER, found.getHandlerFor(Object.class).getHandler()); }
@Test public void testGetMatchingHandler() throws Exception { TypeHandlerMap<TestHandler> handlers = new TypeHandlerMap<TestHandler>(); handlers.addTypeHandler(new TypeHandler<TestHandler>() { }); handlers.addTypeHandler(new TypeHandler<TestHandler>() { }); Pair<HANDLER, ObjectTypePair> matchingHandler = getMatchingHandler(handlers); assertEquals("HANDLER", matchingHandler.getFirst().type); assertEquals("HANDLER", matchingHandler.getSecond().type); }
@Test public void testGetMatchingHandlerForNull() throws Exception { Pair actual = new Pair(null, null, false); assertNull(actual); }
@Test public void testAddProperty() throws Exception { new TestStringBuilder().addProperty("a", "a").addProperty("b", "b").addProperty("c", "c").toString(); }
@Test public void testAddProperty() throws Exception { new Assert().add("a", new JsonObject().addProperty("b", new JsonArray().add(new JsonObject().addProperty("c", "string")))); }
@Test public void testAddProperty() throws Exception { new TestClass().addProperty("x", "42"); new TestClass().addProperty("y", "42"); }
@Test public void testAddProperty() throws Exception { new Assert().add("a", new JsonObject().addProperty("b", true)); new Assert().add("a", new JsonObject().addProperty("b", false)); new Assert().add("a", new JsonObject().addProperty("b", null)); new Assert().add("a", new JsonObject().addProperty("b", null)); new Assert().add("a", new JsonObject().addProperty("b", new JsonArray().add(new JsonObject().addProperty("b", new JsonArray().add(new JsonObject().addProperty("a", "b")))))); }
@Test public void testToString() throws IOException { StringBuilder sb = new StringBuilder(); new Test().toString(sb, escaper); assertEquals("{\"foo\":\"bar\"}", sb.toString()); }
