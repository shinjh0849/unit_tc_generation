public void testSerializingInterfaceObjectField() throws Exception { [EOL]     TestObjectWrapper objWrapper = new TestObjectWrapper(obj); [EOL]     assertEquals("{\"obj\":" + OBJ_JSON + "}", gson.toJson(objWrapper)); [EOL] }
public void testDefaultNestedStaticClassIncluded() throws Exception { [EOL]     Gson gson = new Gson(); [EOL]     Outer.Inner target = outer.new Inner(VALUE); [EOL]     String result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL]     gson = new GsonBuilder().create(); [EOL]     target = outer.new Inner(VALUE); [EOL]     result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL] }
public void testSerializingInterfaceObjectField() throws Exception { [EOL]     TestObjectWrapper objWrapper = new TestObjectWrapper(obj); [EOL]     assertEquals("{\"obj\":" + OBJ_JSON + "}", gson.toJson(objWrapper)); [EOL] }
public void testSerializingInterfaceObjectField() throws Exception { [EOL]     TestObjectWrapper objWrapper = new TestObjectWrapper(obj); [EOL]     assertEquals("{\"obj\":" + OBJ_JSON + "}", gson.toJson(objWrapper)); [EOL] }
public void testSerializingInterfaceObjectField() throws Exception { [EOL]     TestObjectWrapper objWrapper = new TestObjectWrapper(obj); [EOL]     assertEquals("{\"obj\":" + OBJ_JSON + "}", gson.toJson(objWrapper)); [EOL] }
public void testDefaultNestedStaticClassIncluded() throws Exception { [EOL]     Gson gson = new Gson(); [EOL]     Outer.Inner target = outer.new Inner(VALUE); [EOL]     String result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL]     gson = new GsonBuilder().create(); [EOL]     target = outer.new Inner(VALUE); [EOL]     result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL] }
public void testCircularSerialization() throws Exception { [EOL]     ContainsReferenceToSelfType a = new ContainsReferenceToSelfType(); [EOL]     ContainsReferenceToSelfType b = new ContainsReferenceToSelfType(); [EOL]     a.children.add(b); [EOL]     b.children.add(a); [EOL]     try { [EOL]         gson.toJson(a); [EOL]         fail("Circular types should not get printed!"); [EOL]     } catch (IllegalStateException expected) { [EOL]         assertTrue(expected.getMessage().contains("children")); [EOL]     } [EOL] }
public void testCircularSerialization() throws Exception { [EOL]     ContainsReferenceToSelfType a = new ContainsReferenceToSelfType(); [EOL]     ContainsReferenceToSelfType b = new ContainsReferenceToSelfType(); [EOL]     a.children.add(b); [EOL]     b.children.add(a); [EOL]     try { [EOL]         gson.toJson(a); [EOL]         fail("Circular types should not get printed!"); [EOL]     } catch (IllegalStateException expected) { [EOL]         assertTrue(expected.getMessage().contains("children")); [EOL]     } [EOL] }
public void testCircularSerialization() throws Exception { [EOL]     ContainsReferenceToSelfType a = new ContainsReferenceToSelfType(); [EOL]     ContainsReferenceToSelfType b = new ContainsReferenceToSelfType(); [EOL]     a.children.add(b); [EOL]     b.children.add(a); [EOL]     try { [EOL]         gson.toJson(a); [EOL]         fail("Circular types should not get printed!"); [EOL]     } catch (IllegalStateException expected) { [EOL]         assertTrue(expected.getMessage().contains("children")); [EOL]     } [EOL] }
public void testCircularSerialization() throws Exception { [EOL]     ContainsReferenceToSelfType a = new ContainsReferenceToSelfType(); [EOL]     ContainsReferenceToSelfType b = new ContainsReferenceToSelfType(); [EOL]     a.children.add(b); [EOL]     b.children.add(a); [EOL]     try { [EOL]         gson.toJson(a); [EOL]         fail("Circular types should not get printed!"); [EOL]     } catch (IllegalStateException expected) { [EOL]         assertTrue(expected.getMessage().contains("children")); [EOL]     } [EOL] }
public void testSerializingInterfaceObjectField() throws Exception { [EOL]     TestObjectWrapper objWrapper = new TestObjectWrapper(obj); [EOL]     assertEquals("{\"obj\":" + OBJ_JSON + "}", gson.toJson(objWrapper)); [EOL] }
public void testSerializingInterfaceObjectField() throws Exception { [EOL]     TestObjectWrapper objWrapper = new TestObjectWrapper(obj); [EOL]     assertEquals("{\"obj\":" + OBJ_JSON + "}", gson.toJson(objWrapper)); [EOL] }
public void testSerializingInterfaceObjectField() throws Exception { [EOL]     TestObjectWrapper objWrapper = new TestObjectWrapper(obj); [EOL]     assertEquals("{\"obj\":" + OBJ_JSON + "}", gson.toJson(objWrapper)); [EOL] }
public void testPrettyPrintArrayOfObjects() { [EOL]     ArrayOfObjects target = new ArrayOfObjects(); [EOL]     String json = gson.toJson(target); [EOL]     print(json); [EOL] }
public void testPrettyPrintArrayOfObjects() { [EOL]     ArrayOfObjects target = new ArrayOfObjects(); [EOL]     String json = gson.toJson(target); [EOL]     print(json); [EOL] }
public void testPrettyPrintArrayOfObjects() { [EOL]     ArrayOfObjects target = new ArrayOfObjects(); [EOL]     String json = gson.toJson(target); [EOL]     print(json); [EOL] }
public void testPrettyPrintArrayOfObjects() { [EOL]     ArrayOfObjects target = new ArrayOfObjects(); [EOL]     String json = gson.toJson(target); [EOL]     print(json); [EOL] }
public void testPrettyPrintArrayOfObjects() { [EOL]     ArrayOfObjects target = new ArrayOfObjects(); [EOL]     String json = gson.toJson(target); [EOL]     print(json); [EOL] }
public void testPrettyPrintArrayOfObjects() { [EOL]     ArrayOfObjects target = new ArrayOfObjects(); [EOL]     String json = gson.toJson(target); [EOL]     print(json); [EOL] }
public void testPrettyPrintArrayOfObjects() { [EOL]     ArrayOfObjects target = new ArrayOfObjects(); [EOL]     String json = gson.toJson(target); [EOL]     print(json); [EOL] }
public void testPrettyPrintArrayOfObjects() { [EOL]     ArrayOfObjects target = new ArrayOfObjects(); [EOL]     String json = gson.toJson(target); [EOL]     print(json); [EOL] }
public void testPrettyPrintArrayOfObjects() { [EOL]     ArrayOfObjects target = new ArrayOfObjects(); [EOL]     String json = gson.toJson(target); [EOL]     print(json); [EOL] }
public void testDefaultNestedStaticClassIncluded() throws Exception { [EOL]     Gson gson = new Gson(); [EOL]     Outer.Inner target = outer.new Inner(VALUE); [EOL]     String result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL]     gson = new GsonBuilder().create(); [EOL]     target = outer.new Inner(VALUE); [EOL]     result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL] }
public void testNullsInArraySerialization() { [EOL]     String[] array = { "foo", null, "bar" }; [EOL]     String expected = "[\"foo\",null,\"bar\"]"; [EOL]     String json = gson.toJson(array); [EOL]     assertEquals(expected, json); [EOL] }
public void testNullsInArraySerialization() { [EOL]     String[] array = { "foo", null, "bar" }; [EOL]     String expected = "[\"foo\",null,\"bar\"]"; [EOL]     String json = gson.toJson(array); [EOL]     assertEquals(expected, json); [EOL] }
public void testNullsInArraySerialization() { [EOL]     String[] array = { "foo", null, "bar" }; [EOL]     String expected = "[\"foo\",null,\"bar\"]"; [EOL]     String json = gson.toJson(array); [EOL]     assertEquals(expected, json); [EOL] }
public void testSerializingInterfaceObjectField() throws Exception { [EOL]     TestObjectWrapper objWrapper = new TestObjectWrapper(obj); [EOL]     assertEquals("{\"obj\":" + OBJ_JSON + "}", gson.toJson(objWrapper)); [EOL] }
public void testSerializingInterfaceObjectField() throws Exception { [EOL]     TestObjectWrapper objWrapper = new TestObjectWrapper(obj); [EOL]     assertEquals("{\"obj\":" + OBJ_JSON + "}", gson.toJson(objWrapper)); [EOL] }
public void testSerializingInterfaceObjectField() throws Exception { [EOL]     TestObjectWrapper objWrapper = new TestObjectWrapper(obj); [EOL]     assertEquals("{\"obj\":" + OBJ_JSON + "}", gson.toJson(objWrapper)); [EOL] }
public void testSerializingInterfaceObjectField() throws Exception { [EOL]     TestObjectWrapper objWrapper = new TestObjectWrapper(obj); [EOL]     assertEquals("{\"obj\":" + OBJ_JSON + "}", gson.toJson(objWrapper)); [EOL] }
public void testSerializingInterfaceObjectField() throws Exception { [EOL]     TestObjectWrapper objWrapper = new TestObjectWrapper(obj); [EOL]     assertEquals("{\"obj\":" + OBJ_JSON + "}", gson.toJson(objWrapper)); [EOL] }
public void testDefaultNestedStaticClassIncluded() throws Exception { [EOL]     Gson gson = new Gson(); [EOL]     Outer.Inner target = outer.new Inner(VALUE); [EOL]     String result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL]     gson = new GsonBuilder().create(); [EOL]     target = outer.new Inner(VALUE); [EOL]     result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL] }
public void testDefaultNestedStaticClassIncluded() throws Exception { [EOL]     Gson gson = new Gson(); [EOL]     Outer.Inner target = outer.new Inner(VALUE); [EOL]     String result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL]     gson = new GsonBuilder().create(); [EOL]     target = outer.new Inner(VALUE); [EOL]     result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL] }
public void testDefaultNestedStaticClassIncluded() throws Exception { [EOL]     Gson gson = new Gson(); [EOL]     Outer.Inner target = outer.new Inner(VALUE); [EOL]     String result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL]     gson = new GsonBuilder().create(); [EOL]     target = outer.new Inner(VALUE); [EOL]     result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL] }
public void testDefaultNestedStaticClassIncluded() throws Exception { [EOL]     Gson gson = new Gson(); [EOL]     Outer.Inner target = outer.new Inner(VALUE); [EOL]     String result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL]     gson = new GsonBuilder().create(); [EOL]     target = outer.new Inner(VALUE); [EOL]     result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL] }
public void testDefaultNestedStaticClassIncluded() throws Exception { [EOL]     Gson gson = new Gson(); [EOL]     Outer.Inner target = outer.new Inner(VALUE); [EOL]     String result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL]     gson = new GsonBuilder().create(); [EOL]     target = outer.new Inner(VALUE); [EOL]     result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL] }
public void testDefaultNestedStaticClassIncluded() throws Exception { [EOL]     Gson gson = new Gson(); [EOL]     Outer.Inner target = outer.new Inner(VALUE); [EOL]     String result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL]     gson = new GsonBuilder().create(); [EOL]     target = outer.new Inner(VALUE); [EOL]     result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL] }
public void testDefaultNestedStaticClassIncluded() throws Exception { [EOL]     Gson gson = new Gson(); [EOL]     Outer.Inner target = outer.new Inner(VALUE); [EOL]     String result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL]     gson = new GsonBuilder().create(); [EOL]     target = outer.new Inner(VALUE); [EOL]     result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL] }
public void testDefaultNestedStaticClassIncluded() throws Exception { [EOL]     Gson gson = new Gson(); [EOL]     Outer.Inner target = outer.new Inner(VALUE); [EOL]     String result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL]     gson = new GsonBuilder().create(); [EOL]     target = outer.new Inner(VALUE); [EOL]     result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL] }
public void testDefaultNestedStaticClassIncluded() throws Exception { [EOL]     Gson gson = new Gson(); [EOL]     Outer.Inner target = outer.new Inner(VALUE); [EOL]     String result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL]     gson = new GsonBuilder().create(); [EOL]     target = outer.new Inner(VALUE); [EOL]     result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL] }
public void testCircularSerialization() throws Exception { [EOL]     ContainsReferenceToSelfType a = new ContainsReferenceToSelfType(); [EOL]     ContainsReferenceToSelfType b = new ContainsReferenceToSelfType(); [EOL]     a.children.add(b); [EOL]     b.children.add(a); [EOL]     try { [EOL]         gson.toJson(a); [EOL]         fail("Circular types should not get printed!"); [EOL]     } catch (IllegalStateException expected) { [EOL]         assertTrue(expected.getMessage().contains("children")); [EOL]     } [EOL] }
public void testDefaultNestedStaticClassIncluded() throws Exception { [EOL]     Gson gson = new Gson(); [EOL]     Outer.Inner target = outer.new Inner(VALUE); [EOL]     String result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL]     gson = new GsonBuilder().create(); [EOL]     target = outer.new Inner(VALUE); [EOL]     result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL] }
public void testDefaultNestedStaticClassIncluded() throws Exception { [EOL]     Gson gson = new Gson(); [EOL]     Outer.Inner target = outer.new Inner(VALUE); [EOL]     String result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL]     gson = new GsonBuilder().create(); [EOL]     target = outer.new Inner(VALUE); [EOL]     result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL] }
public void testDefaultNestedStaticClassIncluded() throws Exception { [EOL]     Gson gson = new Gson(); [EOL]     Outer.Inner target = outer.new Inner(VALUE); [EOL]     String result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL]     gson = new GsonBuilder().create(); [EOL]     target = outer.new Inner(VALUE); [EOL]     result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL] }
public void testSerializingInterfaceObjectField() throws Exception { [EOL]     TestObjectWrapper objWrapper = new TestObjectWrapper(obj); [EOL]     assertEquals("{\"obj\":" + OBJ_JSON + "}", gson.toJson(objWrapper)); [EOL] }
public void testDefaultNestedStaticClassIncluded() throws Exception { [EOL]     Gson gson = new Gson(); [EOL]     Outer.Inner target = outer.new Inner(VALUE); [EOL]     String result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL]     gson = new GsonBuilder().create(); [EOL]     target = outer.new Inner(VALUE); [EOL]     result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL] }
public void testDefaultNestedStaticClassIncluded() throws Exception { [EOL]     Gson gson = new Gson(); [EOL]     Outer.Inner target = outer.new Inner(VALUE); [EOL]     String result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL]     gson = new GsonBuilder().create(); [EOL]     target = outer.new Inner(VALUE); [EOL]     result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL] }
public void testDefaultNestedStaticClassIncluded() throws Exception { [EOL]     Gson gson = new Gson(); [EOL]     Outer.Inner target = outer.new Inner(VALUE); [EOL]     String result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL]     gson = new GsonBuilder().create(); [EOL]     target = outer.new Inner(VALUE); [EOL]     result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL] }
public void testDefaultNestedStaticClassIncluded() throws Exception { [EOL]     Gson gson = new Gson(); [EOL]     Outer.Inner target = outer.new Inner(VALUE); [EOL]     String result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL]     gson = new GsonBuilder().create(); [EOL]     target = outer.new Inner(VALUE); [EOL]     result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL] }
public void testDefaultNestedStaticClassIncluded() throws Exception { [EOL]     Gson gson = new Gson(); [EOL]     Outer.Inner target = outer.new Inner(VALUE); [EOL]     String result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL]     gson = new GsonBuilder().create(); [EOL]     target = outer.new Inner(VALUE); [EOL]     result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL] }
public void testDefaultNestedStaticClassIncluded() throws Exception { [EOL]     Gson gson = new Gson(); [EOL]     Outer.Inner target = outer.new Inner(VALUE); [EOL]     String result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL]     gson = new GsonBuilder().create(); [EOL]     target = outer.new Inner(VALUE); [EOL]     result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL] }
public void testDefaultNestedStaticClassIncluded() throws Exception { [EOL]     Gson gson = new Gson(); [EOL]     Outer.Inner target = outer.new Inner(VALUE); [EOL]     String result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL]     gson = new GsonBuilder().create(); [EOL]     target = outer.new Inner(VALUE); [EOL]     result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL] }
public void testDefaultNestedStaticClassIncluded() throws Exception { [EOL]     Gson gson = new Gson(); [EOL]     Outer.Inner target = outer.new Inner(VALUE); [EOL]     String result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL]     gson = new GsonBuilder().create(); [EOL]     target = outer.new Inner(VALUE); [EOL]     result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL] }
public void testDefaultNestedStaticClassIncluded() throws Exception { [EOL]     Gson gson = new Gson(); [EOL]     Outer.Inner target = outer.new Inner(VALUE); [EOL]     String result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL]     gson = new GsonBuilder().create(); [EOL]     target = outer.new Inner(VALUE); [EOL]     result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL] }
public void testDefaultNestedStaticClassIncluded() throws Exception { [EOL]     Gson gson = new Gson(); [EOL]     Outer.Inner target = outer.new Inner(VALUE); [EOL]     String result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL]     gson = new GsonBuilder().create(); [EOL]     target = outer.new Inner(VALUE); [EOL]     result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL] }
public void testDefaultNestedStaticClassIncluded() throws Exception { [EOL]     Gson gson = new Gson(); [EOL]     Outer.Inner target = outer.new Inner(VALUE); [EOL]     String result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL]     gson = new GsonBuilder().create(); [EOL]     target = outer.new Inner(VALUE); [EOL]     result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL] }
public void testDefaultNestedStaticClassIncluded() throws Exception { [EOL]     Gson gson = new Gson(); [EOL]     Outer.Inner target = outer.new Inner(VALUE); [EOL]     String result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL]     gson = new GsonBuilder().create(); [EOL]     target = outer.new Inner(VALUE); [EOL]     result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL] }
public void testTwoNames() throws IOException { [EOL]     StringWriter stringWriter = new StringWriter(); [EOL]     JsonWriter jsonWriter = new JsonWriter(stringWriter); [EOL]     jsonWriter.beginObject(); [EOL]     jsonWriter.name("a"); [EOL]     try { [EOL]         jsonWriter.name("a"); [EOL]         fail(); [EOL]     } catch (IllegalStateException expected) { [EOL]     } [EOL] }
public void testObjectsInArrays() throws IOException { [EOL]     StringWriter stringWriter = new StringWriter(); [EOL]     JsonWriter jsonWriter = new JsonWriter(stringWriter); [EOL]     jsonWriter.beginArray(); [EOL]     jsonWriter.beginObject(); [EOL]     jsonWriter.name("a").value(5); [EOL]     jsonWriter.name("b").value(false); [EOL]     jsonWriter.endObject(); [EOL]     jsonWriter.beginObject(); [EOL]     jsonWriter.name("c").value(6); [EOL]     jsonWriter.name("d").value(true); [EOL]     jsonWriter.endObject(); [EOL]     jsonWriter.endArray(); [EOL]     assertEquals("[{\"a\":5,\"b\":false}," + "{\"c\":6,\"d\":true}]", stringWriter.toString()); [EOL] }
public void testObjectsInArrays() throws IOException { [EOL]     StringWriter stringWriter = new StringWriter(); [EOL]     JsonWriter jsonWriter = new JsonWriter(stringWriter); [EOL]     jsonWriter.beginArray(); [EOL]     jsonWriter.beginObject(); [EOL]     jsonWriter.name("a").value(5); [EOL]     jsonWriter.name("b").value(false); [EOL]     jsonWriter.endObject(); [EOL]     jsonWriter.beginObject(); [EOL]     jsonWriter.name("c").value(6); [EOL]     jsonWriter.name("d").value(true); [EOL]     jsonWriter.endObject(); [EOL]     jsonWriter.endArray(); [EOL]     assertEquals("[{\"a\":5,\"b\":false}," + "{\"c\":6,\"d\":true}]", stringWriter.toString()); [EOL] }
public void testObjectsInArrays() throws IOException { [EOL]     StringWriter stringWriter = new StringWriter(); [EOL]     JsonWriter jsonWriter = new JsonWriter(stringWriter); [EOL]     jsonWriter.beginArray(); [EOL]     jsonWriter.beginObject(); [EOL]     jsonWriter.name("a").value(5); [EOL]     jsonWriter.name("b").value(false); [EOL]     jsonWriter.endObject(); [EOL]     jsonWriter.beginObject(); [EOL]     jsonWriter.name("c").value(6); [EOL]     jsonWriter.name("d").value(true); [EOL]     jsonWriter.endObject(); [EOL]     jsonWriter.endArray(); [EOL]     assertEquals("[{\"a\":5,\"b\":false}," + "{\"c\":6,\"d\":true}]", stringWriter.toString()); [EOL] }
public void testDeepNestingArrays() throws IOException { [EOL]     StringWriter stringWriter = new StringWriter(); [EOL]     JsonWriter jsonWriter = new JsonWriter(stringWriter); [EOL]     for (int i = 0; i < 20; i++) { [EOL]         jsonWriter.beginArray(); [EOL]     } [EOL]     for (int i = 0; i < 20; i++) { [EOL]         jsonWriter.endArray(); [EOL]     } [EOL]     assertEquals("[[[[[[[[[[[[[[[[[[[[]]]]]]]]]]]]]]]]]]", stringWriter.toString()); [EOL] }
public void testTwoNames() throws IOException { [EOL]     StringWriter stringWriter = new StringWriter(); [EOL]     JsonWriter jsonWriter = new JsonWriter(stringWriter); [EOL]     jsonWriter.beginObject(); [EOL]     jsonWriter.name("a"); [EOL]     try { [EOL]         jsonWriter.name("a"); [EOL]         fail(); [EOL]     } catch (IllegalStateException expected) { [EOL]     } [EOL] }
public void testStrings() throws IOException { [EOL]     StringWriter stringWriter = new StringWriter(); [EOL]     JsonWriter jsonWriter = new JsonWriter(stringWriter); [EOL]     jsonWriter.beginArray(); [EOL]     jsonWriter.value("a"); [EOL]     jsonWriter.value("a\""); [EOL]     jsonWriter.value("\""); [EOL]     jsonWriter.value(":"); [EOL]     jsonWriter.value(","); [EOL]     jsonWriter.value("\b"); [EOL]     jsonWriter.value("\f"); [EOL]     jsonWriter.value("\n"); [EOL]     jsonWriter.value("\r"); [EOL]     jsonWriter.value("\t"); [EOL]     jsonWriter.value(" "); [EOL]     jsonWriter.value("\\"); [EOL]     jsonWriter.value("{"); [EOL]     jsonWriter.value("}"); [EOL]     jsonWriter.value("["); [EOL]     jsonWriter.value("]"); [EOL]     jsonWriter.value("\0"); [EOL]     jsonWriter.value("\u0019"); [EOL]     jsonWriter.endArray(); [EOL]     assertEquals("[\"a\"," + "\"a\\\"\"," + "\"\\\"\"," + "\":\"," + "\",\"," + "\"\\b\"," + "\"\\f\"," + "\"\\n\"," + "\"\\r\"," + "\"\\t\"," + "\" \"," + "\"\\\\\"," + "\"{\"," + "\"}\"," + "\"[\"," + "\"]\"," + "\"\\u0000\"," + "\"\\u0019\"]", stringWriter.toString()); [EOL] }
public void testStrings() throws IOException { [EOL]     StringWriter stringWriter = new StringWriter(); [EOL]     JsonWriter jsonWriter = new JsonWriter(stringWriter); [EOL]     jsonWriter.beginArray(); [EOL]     jsonWriter.value("a"); [EOL]     jsonWriter.value("a\""); [EOL]     jsonWriter.value("\""); [EOL]     jsonWriter.value(":"); [EOL]     jsonWriter.value(","); [EOL]     jsonWriter.value("\b"); [EOL]     jsonWriter.value("\f"); [EOL]     jsonWriter.value("\n"); [EOL]     jsonWriter.value("\r"); [EOL]     jsonWriter.value("\t"); [EOL]     jsonWriter.value(" "); [EOL]     jsonWriter.value("\\"); [EOL]     jsonWriter.value("{"); [EOL]     jsonWriter.value("}"); [EOL]     jsonWriter.value("["); [EOL]     jsonWriter.value("]"); [EOL]     jsonWriter.value("\0"); [EOL]     jsonWriter.value("\u0019"); [EOL]     jsonWriter.endArray(); [EOL]     assertEquals("[\"a\"," + "\"a\\\"\"," + "\"\\\"\"," + "\":\"," + "\",\"," + "\"\\b\"," + "\"\\f\"," + "\"\\n\"," + "\"\\r\"," + "\"\\t\"," + "\" \"," + "\"\\\\\"," + "\"{\"," + "\"}\"," + "\"[\"," + "\"]\"," + "\"\\u0000\"," + "\"\\u0019\"]", stringWriter.toString()); [EOL] }
public void testObjectsInArrays() throws IOException { [EOL]     StringWriter stringWriter = new StringWriter(); [EOL]     JsonWriter jsonWriter = new JsonWriter(stringWriter); [EOL]     jsonWriter.beginArray(); [EOL]     jsonWriter.beginObject(); [EOL]     jsonWriter.name("a").value(5); [EOL]     jsonWriter.name("b").value(false); [EOL]     jsonWriter.endObject(); [EOL]     jsonWriter.beginObject(); [EOL]     jsonWriter.name("c").value(6); [EOL]     jsonWriter.name("d").value(true); [EOL]     jsonWriter.endObject(); [EOL]     jsonWriter.endArray(); [EOL]     assertEquals("[{\"a\":5,\"b\":false}," + "{\"c\":6,\"d\":true}]", stringWriter.toString()); [EOL] }
public void testNonFiniteDoubles() throws IOException { [EOL]     StringWriter stringWriter = new StringWriter(); [EOL]     JsonWriter jsonWriter = new JsonWriter(stringWriter); [EOL]     jsonWriter.beginArray(); [EOL]     try { [EOL]         jsonWriter.value(Double.NaN); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException expected) { [EOL]     } [EOL]     try { [EOL]         jsonWriter.value(Double.NEGATIVE_INFINITY); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException expected) { [EOL]     } [EOL]     try { [EOL]         jsonWriter.value(Double.POSITIVE_INFINITY); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException expected) { [EOL]     } [EOL] }
public void testNonFiniteDoubles() throws IOException { [EOL]     StringWriter stringWriter = new StringWriter(); [EOL]     JsonWriter jsonWriter = new JsonWriter(stringWriter); [EOL]     jsonWriter.beginArray(); [EOL]     try { [EOL]         jsonWriter.value(Double.NaN); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException expected) { [EOL]     } [EOL]     try { [EOL]         jsonWriter.value(Double.NEGATIVE_INFINITY); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException expected) { [EOL]     } [EOL]     try { [EOL]         jsonWriter.value(Double.POSITIVE_INFINITY); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException expected) { [EOL]     } [EOL] }
public void testNonFiniteDoubles() throws IOException { [EOL]     StringWriter stringWriter = new StringWriter(); [EOL]     JsonWriter jsonWriter = new JsonWriter(stringWriter); [EOL]     jsonWriter.beginArray(); [EOL]     try { [EOL]         jsonWriter.value(Double.NaN); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException expected) { [EOL]     } [EOL]     try { [EOL]         jsonWriter.value(Double.NEGATIVE_INFINITY); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException expected) { [EOL]     } [EOL]     try { [EOL]         jsonWriter.value(Double.POSITIVE_INFINITY); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException expected) { [EOL]     } [EOL] }
public void testNonFiniteDoubles() throws IOException { [EOL]     StringWriter stringWriter = new StringWriter(); [EOL]     JsonWriter jsonWriter = new JsonWriter(stringWriter); [EOL]     jsonWriter.beginArray(); [EOL]     try { [EOL]         jsonWriter.value(Double.NaN); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException expected) { [EOL]     } [EOL]     try { [EOL]         jsonWriter.value(Double.NEGATIVE_INFINITY); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException expected) { [EOL]     } [EOL]     try { [EOL]         jsonWriter.value(Double.POSITIVE_INFINITY); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException expected) { [EOL]     } [EOL] }
public void testNonFiniteDoubles() throws IOException { [EOL]     StringWriter stringWriter = new StringWriter(); [EOL]     JsonWriter jsonWriter = new JsonWriter(stringWriter); [EOL]     jsonWriter.beginArray(); [EOL]     try { [EOL]         jsonWriter.value(Double.NaN); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException expected) { [EOL]     } [EOL]     try { [EOL]         jsonWriter.value(Double.NEGATIVE_INFINITY); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException expected) { [EOL]     } [EOL]     try { [EOL]         jsonWriter.value(Double.POSITIVE_INFINITY); [EOL]         fail(); [EOL]     } catch (IllegalArgumentException expected) { [EOL]     } [EOL] }
public void testDeepNestingArrays() throws IOException { [EOL]     StringWriter stringWriter = new StringWriter(); [EOL]     JsonWriter jsonWriter = new JsonWriter(stringWriter); [EOL]     for (int i = 0; i < 20; i++) { [EOL]         jsonWriter.beginArray(); [EOL]     } [EOL]     for (int i = 0; i < 20; i++) { [EOL]         jsonWriter.endArray(); [EOL]     } [EOL]     assertEquals("[[[[[[[[[[[[[[[[[[[[]]]]]]]]]]]]]]]]]]", stringWriter.toString()); [EOL] }
public void testDeepNestingArrays() throws IOException { [EOL]     StringWriter stringWriter = new StringWriter(); [EOL]     JsonWriter jsonWriter = new JsonWriter(stringWriter); [EOL]     for (int i = 0; i < 20; i++) { [EOL]         jsonWriter.beginArray(); [EOL]     } [EOL]     for (int i = 0; i < 20; i++) { [EOL]         jsonWriter.endArray(); [EOL]     } [EOL]     assertEquals("[[[[[[[[[[[[[[[[[[[[]]]]]]]]]]]]]]]]]]", stringWriter.toString()); [EOL] }
public void testMultipleTopLevelValues() throws IOException { [EOL]     StringWriter stringWriter = new StringWriter(); [EOL]     JsonWriter jsonWriter = new JsonWriter(stringWriter); [EOL]     jsonWriter.beginArray().endArray(); [EOL]     try { [EOL]         jsonWriter.beginArray(); [EOL]         fail(); [EOL]     } catch (IllegalStateException expected) { [EOL]     } [EOL] }
public void testDeepNestingArrays() throws IOException { [EOL]     StringWriter stringWriter = new StringWriter(); [EOL]     JsonWriter jsonWriter = new JsonWriter(stringWriter); [EOL]     for (int i = 0; i < 20; i++) { [EOL]         jsonWriter.beginArray(); [EOL]     } [EOL]     for (int i = 0; i < 20; i++) { [EOL]         jsonWriter.endArray(); [EOL]     } [EOL]     assertEquals("[[[[[[[[[[[[[[[[[[[[]]]]]]]]]]]]]]]]]]", stringWriter.toString()); [EOL] }
public void testDeepNestingArrays() throws IOException { [EOL]     StringWriter stringWriter = new StringWriter(); [EOL]     JsonWriter jsonWriter = new JsonWriter(stringWriter); [EOL]     for (int i = 0; i < 20; i++) { [EOL]         jsonWriter.beginArray(); [EOL]     } [EOL]     for (int i = 0; i < 20; i++) { [EOL]         jsonWriter.endArray(); [EOL]     } [EOL]     assertEquals("[[[[[[[[[[[[[[[[[[]]]]]]]]]]]]]]]]]]", stringWriter.toString()); [EOL] }
public void testDeepNestingArrays() throws IOException { [EOL]     StringWriter stringWriter = new StringWriter(); [EOL]     JsonWriter jsonWriter = new JsonWriter(stringWriter); [EOL]     for (int i = 0; i < 20; i++) { [EOL]         jsonWriter.beginArray(); [EOL]     } [EOL]     for (int i = 0; i < 20; i++) { [EOL]         jsonWriter.endArray(); [EOL]     } [EOL]     assertEquals("[[[[[[[[[[[[[[[[[[[[]]]]]]]]]]]]]]]]]]", stringWriter.toString()); [EOL] }
public void testMultipleTopLevelValues() throws IOException { [EOL]     StringWriter stringWriter = new StringWriter(); [EOL]     JsonWriter jsonWriter = new JsonWriter(stringWriter); [EOL]     jsonWriter.beginArray().endArray(); [EOL]     try { [EOL]         jsonWriter.beginArray(); [EOL]         fail(); [EOL]     } catch (IllegalStateException expected) { [EOL]     } [EOL] }
public void testDeepNestingArrays() throws IOException { [EOL]     StringWriter stringWriter = new StringWriter(); [EOL]     JsonWriter jsonWriter = new JsonWriter(stringWriter); [EOL]     for (int i = 0; i < 20; i++) { [EOL]         jsonWriter.beginArray(); [EOL]     } [EOL]     for (int i = 0; i < 20; i++) { [EOL]         jsonWriter.endArray(); [EOL]     } [EOL]     assertEquals("[[[[[[[[[[[[[[[[[[]]]]]]]]]]]]]]]]]]", stringWriter.toString()); [EOL] }
public void testObjectsInArrays() throws IOException { [EOL]     StringWriter stringWriter = new StringWriter(); [EOL]     JsonWriter jsonWriter = new JsonWriter(stringWriter); [EOL]     jsonWriter.beginArray(); [EOL]     jsonWriter.beginObject(); [EOL]     jsonWriter.name("a").value(5); [EOL]     jsonWriter.name("b").value(false); [EOL]     jsonWriter.endObject(); [EOL]     jsonWriter.beginObject(); [EOL]     jsonWriter.name("c").value(6); [EOL]     jsonWriter.name("d").value(true); [EOL]     jsonWriter.endObject(); [EOL]     jsonWriter.endArray(); [EOL]     assertEquals("[{\"a\":5,\"b\":false}," + "{\"c\":6,\"d\":true}]", stringWriter.toString()); [EOL] }
public void testDeepNestingArrays() throws IOException { [EOL]     StringWriter stringWriter = new StringWriter(); [EOL]     JsonWriter jsonWriter = new JsonWriter(stringWriter); [EOL]     for (int i = 0; i < 20; i++) { [EOL]         jsonWriter.beginArray(); [EOL]     } [EOL]     for (int i = 0; i < 20; i++) { [EOL]         jsonWriter.endArray(); [EOL]     } [EOL]     assertEquals("[[[[[[[[[[[[[[[[[[]]]]]]]]]]]]]]]]]]", stringWriter.toString()); [EOL] }
public void testObjectsInArrays() throws IOException { [EOL]     StringWriter stringWriter = new StringWriter(); [EOL]     JsonWriter jsonWriter = new JsonWriter(stringWriter); [EOL]     jsonWriter.beginArray(); [EOL]     jsonWriter.beginObject(); [EOL]     jsonWriter.name("a").value(5); [EOL]     jsonWriter.name("b").value(false); [EOL]     jsonWriter.endObject(); [EOL]     jsonWriter.beginObject(); [EOL]     jsonWriter.name("c").value(6); [EOL]     jsonWriter.name("d").value(true); [EOL]     jsonWriter.endObject(); [EOL]     jsonWriter.endArray(); [EOL]     assertEquals("[{\"a\":5,\"b\":false}," + "{\"c\":6,\"d\":true}]", stringWriter.toString()); [EOL] }
public void testDefaultNestedStaticClassIncluded() throws Exception { [EOL]     Gson gson = new Gson(); [EOL]     Outer.Inner target = outer.new Inner(VALUE); [EOL]     String result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL]     gson = new GsonBuilder().create(); [EOL]     target = outer.new Inner(VALUE); [EOL]     result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL] }
public void testDefaultNestedStaticClassIncluded() throws Exception { [EOL]     Gson gson = new Gson(); [EOL]     Outer.Inner target = outer.new Inner(VALUE); [EOL]     String result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL]     gson = new GsonBuilder().create(); [EOL]     target = outer.new Inner(VALUE); [EOL]     result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL] }
public void testUsingDashesInstead() throws Exception { [EOL]     namingPolicy = new UpperCamelCaseSeparatorNamingPolicy("-"); [EOL]     String translatedName = namingPolicy.translateName("testUsingDashesInstead", CLASS, null); [EOL]     assertEquals("test-using-dashes-instead", translatedName); [EOL] }
public void testUsingDashesInstead() throws Exception { [EOL]     namingPolicy = new UpperCamelCaseSeparatorNamingPolicy("-"); [EOL]     String translatedName = namingPolicy.translateName("testUsingDashesInstead", CLASS, null); [EOL]     assertEquals("test-using-dashes-instead", translatedName); [EOL] }
public void testDefaultNestedStaticClassIncluded() throws Exception { [EOL]     Gson gson = new Gson(); [EOL]     Outer.Inner target = outer.new Inner(VALUE); [EOL]     String result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL]     gson = new GsonBuilder().create(); [EOL]     target = outer.new Inner(VALUE); [EOL]     result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL] }
public void testDefaultNestedStaticClassIncluded() throws Exception { [EOL]     Gson gson = new Gson(); [EOL]     Outer.Inner target = outer.new Inner(VALUE); [EOL]     String result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL]     gson = new GsonBuilder().create(); [EOL]     target = outer.new Inner(VALUE); [EOL]     result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL] }
public void testStringArray() throws Exception { [EOL]     TypeInfoArray arrayTypeInfo = new TypeInfoArray(String[].class); [EOL]     assertTrue(arrayTypeInfo.isArray()); [EOL]     assertEquals(String.class, arrayTypeInfo.getSecondLevelType()); [EOL]     assertEquals(String[].class, arrayTypeInfo.getComponentRawType()); [EOL] }
public void testStringArray() throws Exception { [EOL]     TypeInfoArray arrayTypeInfo = new TypeInfoArray(String[].class); [EOL]     assertTrue(arrayTypeInfo.isArray()); [EOL]     assertEquals(String.class, arrayTypeInfo.getSecondLevelType()); [EOL]     assertEquals(String[].class, arrayTypeInfo.getRawClass()); [EOL] }
public void testUnicodeCharacterStringNoEscaping() throws Exception { [EOL]     String unicodeString = "\u0065\u0066"; [EOL]     String escapedString = escapeHtmlChar.escapeJsonString(unicodeString); [EOL]     assertEquals(unicodeString, escapedString); [EOL] }
public void testUnicodeCharacterStringNoEscaping() throws Exception { [EOL]     String unicodeString = "\u0065\u0066"; [EOL]     String escapedString = escapeHtmlChar.escapeJsonString(unicodeString); [EOL]     assertEquals(unicodeString, escapedString); [EOL] }
public void testDefaultNestedStaticClassIncluded() throws Exception { [EOL]     Gson gson = new Gson(); [EOL]     Outer.Inner target = outer.new Inner(VALUE); [EOL]     String result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL]     gson = new GsonBuilder().create(); [EOL]     target = outer.new Inner(VALUE); [EOL]     result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL] }
public void testDefaultNestedStaticClassIncluded() throws Exception { [EOL]     Gson gson = new Gson(); [EOL]     Outer.Inner target = outer.new Inner(VALUE); [EOL]     String result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL]     gson = new GsonBuilder().create(); [EOL]     target = outer.new Inner(VALUE); [EOL]     result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL] }
public void testDefaultNestedStaticClassIncluded() throws Exception { [EOL]     Gson gson = new Gson(); [EOL]     Outer.Inner target = outer.new Inner(VALUE); [EOL]     String result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL]     gson = new GsonBuilder().create(); [EOL]     target = outer.new Inner(VALUE); [EOL]     result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL] }
public void testLenientSemicolonDelimitedArray() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("[true;true]")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL] }
public void testLenientSemicolonDelimitedArray() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("[true;true]")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL] }
public void testLenientSemicolonDelimitedArray() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("[true;true]")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL] }
public void testLenientSemicolonDelimitedArray() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("[true;true]")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL] }
public void testLenientSemicolonDelimitedArray() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("[true;true]")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL] }
public void testLenientSemicolonDelimitedArray() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("[true;true]")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL] }
public void testLenientUnquotedNames() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("{a:true}")); [EOL]     reader.setLenient(true); [EOL]     reader.beginObject(); [EOL]     assertEquals("a", reader.nextName()); [EOL] }
public void testLenientUnquotedNames() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("{a:true}")); [EOL]     reader.setLenient(true); [EOL]     reader.beginObject(); [EOL]     assertEquals("a", reader.nextName()); [EOL] }
public void testLenientSingleQuotedStrings() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("['a']")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     assertEquals("a", reader.nextString()); [EOL] }
public void testLenientSingleQuotedStrings() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("['a']")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     assertEquals("a", reader.nextString()); [EOL] }
public void testLenientSingleQuotedStrings() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("['a']")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     assertEquals("a", reader.nextString()); [EOL] }
public void testNextFailuresDoNotAdvance() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("{\"a\":true}")); [EOL]     reader.beginObject(); [EOL]     try { [EOL]         reader.nextString(); [EOL]         fail(); [EOL]     } catch (IllegalStateException expected) { [EOL]     } [EOL]     assertEquals("a", reader.nextName()); [EOL]     try { [EOL]         reader.nextName(); [EOL]         fail(); [EOL]     } catch (IllegalStateException expected) { [EOL]     } [EOL]     try { [EOL]         reader.beginArray(); [EOL]         fail(); [EOL]     } catch (IllegalStateException expected) { [EOL]     } [EOL]     try { [EOL]         reader.endArray(); [EOL]         fail(); [EOL]     } catch (IllegalStateException expected) { [EOL]     } [EOL]     try { [EOL]         reader.beginObject(); [EOL]         fail(); [EOL]     } catch (IllegalStateException expected) { [EOL]     } [EOL]     try { [EOL]         reader.endObject(); [EOL]         fail(); [EOL]     } catch (IllegalStateException expected) { [EOL]     } [EOL]     assertEquals(true, reader.nextBoolean()); [EOL]     try { [EOL]         reader.nextString(); [EOL]         fail(); [EOL]     } catch (IllegalStateException expected) { [EOL]     } [EOL]     try { [EOL]         reader.nextName(); [EOL]         fail(); [EOL]     } catch (IllegalStateException expected) { [EOL]     } [EOL]     try { [EOL]         reader.beginArray(); [EOL]         fail(); [EOL]     } catch (IllegalStateException expected) { [EOL]     } [EOL]     try { [EOL]         reader.endArray(); [EOL]         fail(); [EOL]     } catch (IllegalStateException expected) { [EOL]     } [EOL]     reader.endObject(); [EOL]     assertEquals(JsonToken.END_DOCUMENT, reader.peek()); [EOL]     reader.close(); [EOL] }
public void testLenientSemicolonDelimitedArray() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("[true;true]")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL] }
public void testLenientSemicolonDelimitedArray() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("[true;true]")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL] }
public void testLenientSemicolonDelimitedArray() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("[true;true]")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL] }
public void testLenientSemicolonDelimitedArray() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("[true;true]")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL] }
public void testLenientSemicolonDelimitedArray() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("[true;true]")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL] }
public void testLenientSemicolonDelimitedArray() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("[true;true]")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL] }
public void testLenientSemicolonDelimitedArray() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("[true;true]")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL] }
public void testLenientSemicolonDelimitedArray() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("[true;true]")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL] }
public void testLenientSemicolonDelimitedArray() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("[true;true]")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL] }
public void testLenientSemicolonDelimitedArray() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("[true;true]")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL] }
public void testLenientSemicolonDelimitedArray() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("[true;true]")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL] }
public void testLenientSemicolonDelimitedArray() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("[true;true]")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL] }
public void testDoubles() throws IOException { [EOL]     String json = "[-0.0," + "1.0," + "1.7976931348623157E308," + "4.9E-324," + "0.0," + "-0.5," + "2.2250738585072014E-308," + "3.141592653589793," + "2.718281828459045]"; [EOL]     JsonReader reader = new JsonReader(new StringReader(json)); [EOL]     reader.beginArray(); [EOL]     assertEquals(-0.0, reader.nextDouble()); [EOL]     assertEquals(1.0, reader.nextDouble()); [EOL]     assertEquals(1.7976931348623157E308, reader.nextDouble()); [EOL]     assertEquals(4.9E-324, reader.nextDouble()); [EOL]     assertEquals(0.0, reader.nextDouble()); [EOL]     assertEquals(-0.5, reader.nextDouble()); [EOL]     assertEquals(2.2250738585072014E-308, reader.nextDouble()); [EOL]     assertEquals(3.141592653589793, reader.nextDouble()); [EOL]     assertEquals(2.718281828459045, reader.nextDouble()); [EOL]     reader.endArray(); [EOL]     assertEquals(JsonToken.END_DOCUMENT, reader.peek()); [EOL] }
public void testDoubles() throws IOException { [EOL]     String json = "[-0.0," + "1.0," + "1.7976931348623157E308," + "4.9E-324," + "0.0," + "-0.5," + "2.2250738585072014E-308," + "3.141592653589793," + "2.718281828459045]"; [EOL]     JsonReader reader = new JsonReader(new StringReader(json)); [EOL]     reader.beginArray(); [EOL]     assertEquals(-0.0, reader.nextDouble()); [EOL]     assertEquals(1.0, reader.nextDouble()); [EOL]     assertEquals(1.7976931348623157E308, reader.nextDouble()); [EOL]     assertEquals(4.9E-324, reader.nextDouble()); [EOL]     assertEquals(0.0, reader.nextDouble()); [EOL]     assertEquals(-0.5, reader.nextDouble()); [EOL]     assertEquals(2.2250738585072014E-308, reader.nextDouble()); [EOL]     assertEquals(3.141592653589793, reader.nextDouble()); [EOL]     assertEquals(2.718281828459045, reader.nextDouble()); [EOL]     reader.endArray(); [EOL]     assertEquals(JsonToken.END_DOCUMENT, reader.peek()); [EOL] }
public void testDoubles() throws IOException { [EOL]     String json = "[-0.0," + "1.0," + "1.7976931348623157E308," + "4.9E-324," + "0.0," + "-0.5," + "2.2250738585072014E-308," + "3.141592653589793," + "2.718281828459045]"; [EOL]     JsonReader reader = new JsonReader(new StringReader(json)); [EOL]     reader.beginArray(); [EOL]     assertEquals(-0.0, reader.nextDouble()); [EOL]     assertEquals(1.0, reader.nextDouble()); [EOL]     assertEquals(1.7976931348623157E308, reader.nextDouble()); [EOL]     assertEquals(4.9E-324, reader.nextDouble()); [EOL]     assertEquals(0.0, reader.nextDouble()); [EOL]     assertEquals(-0.5, reader.nextDouble()); [EOL]     assertEquals(2.2250738585072014E-308, reader.nextDouble()); [EOL]     assertEquals(3.141592653589793, reader.nextDouble()); [EOL]     assertEquals(2.718281828459045, reader.nextDouble()); [EOL]     reader.endArray(); [EOL]     assertEquals(JsonToken.END_DOCUMENT, reader.peek()); [EOL] }
public void testPrematureEndOfInput() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("{\"a\":true,")); [EOL]     reader.beginObject(); [EOL]     assertEquals("a", reader.nextName()); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL]     try { [EOL]         reader.nextName(); [EOL]         fail(); [EOL]     } catch (IOException expected) { [EOL]     } [EOL] }
public void testLenientUnquotedNames() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("{a:true}")); [EOL]     reader.setLenient(true); [EOL]     reader.beginObject(); [EOL]     assertEquals("a", reader.nextName()); [EOL] }
public void testPrematureEndOfInput() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("{\"a\":true,")); [EOL]     reader.beginObject(); [EOL]     assertEquals("a", reader.nextName()); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL]     try { [EOL]         reader.nextName(); [EOL]         fail(); [EOL]     } catch (IOException expected) { [EOL]     } [EOL] }
public void testReadEmptyObject() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("{}")); [EOL]     reader.beginObject(); [EOL]     assertFalse(reader.hasNext()); [EOL]     reader.endObject(); [EOL]     assertEquals(JsonToken.END_DOCUMENT, reader.peek()); [EOL] }
public void testReadEmptyObject() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("{}")); [EOL]     reader.beginObject(); [EOL]     assertFalse(reader.hasNext()); [EOL]     reader.endObject(); [EOL]     assertEquals(JsonToken.END_DOCUMENT, reader.peek()); [EOL] }
public void testPrematureEndOfInput() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("{\"a\":true,")); [EOL]     reader.beginObject(); [EOL]     assertEquals("a", reader.nextName()); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL]     try { [EOL]         reader.nextName(); [EOL]         fail(); [EOL]     } catch (IOException expected) { [EOL]     } [EOL] }
public void testPrematureEndOfInput() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("{\"a\":true,")); [EOL]     reader.beginObject(); [EOL]     assertEquals("a", reader.nextName()); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL]     try { [EOL]         reader.nextName(); [EOL]         fail(); [EOL]     } catch (IOException expected) { [EOL]     } [EOL] }
public void testPrematureEndOfInput() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("{\"a\":true,")); [EOL]     reader.beginObject(); [EOL]     assertEquals("a", reader.nextName()); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL]     try { [EOL]         reader.nextName(); [EOL]         fail(); [EOL]     } catch (IOException expected) { [EOL]     } [EOL] }
public void testPrematureEndOfInput() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("{\"a\":true,")); [EOL]     reader.beginObject(); [EOL]     assertEquals("a", reader.nextName()); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL]     try { [EOL]         reader.nextName(); [EOL]         fail(); [EOL]     } catch (IOException expected) { [EOL]     } [EOL] }
public void testPrematureEndOfInput() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("{\"a\":true,")); [EOL]     reader.beginObject(); [EOL]     assertEquals("a", reader.nextName()); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL]     try { [EOL]         reader.nextName(); [EOL]         fail(); [EOL]     } catch (IOException expected) { [EOL]     } [EOL] }
public void testLenientUnquotedNames() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("{a:true}")); [EOL]     reader.setLenient(true); [EOL]     reader.beginObject(); [EOL]     assertEquals("a", reader.nextName()); [EOL] }
public void testPrematureEndOfInput() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("{\"a\":true,")); [EOL]     reader.beginObject(); [EOL]     assertEquals("a", reader.nextName()); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL]     try { [EOL]         reader.nextName(); [EOL]         fail(); [EOL]     } catch (IOException expected) { [EOL]     } [EOL] }
public void testStrictNameValueSeparator() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("{\"a\"=true}")); [EOL]     reader.beginObject(); [EOL]     assertEquals("a", reader.nextName()); [EOL]     try { [EOL]         reader.nextBoolean(); [EOL]         fail(); [EOL]     } catch (IOException expected) { [EOL]     } [EOL]     reader = new JsonReader(new StringReader("{\"a\"=>true}")); [EOL]     reader.beginObject(); [EOL]     assertEquals("a", reader.nextName()); [EOL]     try { [EOL]         reader.nextBoolean(); [EOL]         fail(); [EOL]     } catch (IOException expected) { [EOL]     } [EOL] }
public void testPrematureEndOfInput() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("{\"a\":true,")); [EOL]     reader.beginObject(); [EOL]     assertEquals("a", reader.nextName()); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL]     try { [EOL]         reader.nextName(); [EOL]         fail(); [EOL]     } catch (IOException expected) { [EOL]     } [EOL] }
public void testLenientSemicolonDelimitedArray() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("[true;true]")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL] }
public void testLenientSemicolonDelimitedArray() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("[true;true]")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL] }
public void testLenientSemicolonDelimitedArray() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("[true;true]")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL] }
public void testLenientComments() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("[// comment \n true]")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL]     reader = new JsonReader(new StringReader("[# comment \n true]")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL]     reader = new JsonReader(new StringReader("[/* comment */ true]")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL] }
public void testLenientComments() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("[// comment \n true]")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL]     reader = new JsonReader(new StringReader("[# comment \n true]")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL]     reader = new JsonReader(new StringReader("[/* comment */ true]")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL] }
public void testLenientComments() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("[// comment \n true]")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL]     reader = new JsonReader(new StringReader("[# comment \n true]")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL]     reader = new JsonReader(new StringReader("[/* comment */ true]")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL] }
public void testLenientComments() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("[// comment \n true]")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL]     reader = new JsonReader(new StringReader("[# comment \n true]")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL]     reader = new JsonReader(new StringReader("[/* comment */ true]")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL] }
public void testLenientComments() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("[// comment \n true]")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL]     reader = new JsonReader(new StringReader("[# comment \n true]")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL]     reader = new JsonReader(new StringReader("[/* comment */ true]")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL] }
public void testPrematureEndOfInput() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("{\"a\":true,")); [EOL]     reader.beginObject(); [EOL]     assertEquals("a", reader.nextName()); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL]     try { [EOL]         reader.nextName(); [EOL]         fail(); [EOL]     } catch (IOException expected) { [EOL]     } [EOL] }
public void testLenientSemicolonDelimitedArray() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("[true;true]")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL]     assertEquals(true, reader.nextBoolean()); [EOL] }
public void testCharacterUnescaping() throws IOException { [EOL]     String json = "[\"a\"," + "\"a\\\"\"," + "\"\\\"\"," + "\":\"," + "\",\"," + "\"\\b\"," + "\"\\f\"," + "\"\\n\"," + "\"\\r\"," + "\"\\t\"," + "\" \"," + "\"\\\\\"," + "\"{\"," + "\"}\"," + "\"[\"," + "\"]\"," + "\"\\u0000\"," + "\"\\u0019\"," + "\"\\u20AC\"" + "]"; [EOL]     JsonReader reader = new JsonReader(new StringReader(json)); [EOL]     reader.beginArray(); [EOL]     assertEquals("a", reader.nextString()); [EOL]     assertEquals("a\"", reader.nextString()); [EOL]     assertEquals("\"", reader.nextString()); [EOL]     assertEquals(":", reader.nextString()); [EOL]     assertEquals(",", reader.nextString()); [EOL]     assertEquals("\b", reader.nextString()); [EOL]     assertEquals("\f", reader.nextString()); [EOL]     assertEquals("\n", reader.nextString()); [EOL]     assertEquals("\r", reader.nextString()); [EOL]     assertEquals("\t", reader.nextString()); [EOL]     assertEquals(" ", reader.nextString()); [EOL]     assertEquals("\\", reader.nextString()); [EOL]     assertEquals("{", reader.nextString()); [EOL]     assertEquals("}", reader.nextString()); [EOL]     assertEquals("[", reader.nextString()); [EOL]     assertEquals("]", reader.nextString()); [EOL]     assertEquals("\0", reader.nextString()); [EOL]     assertEquals("\u0019", reader.nextString()); [EOL]     assertEquals("\u20AC", reader.nextString()); [EOL]     reader.endArray(); [EOL]     assertEquals(JsonToken.END_DOCUMENT, reader.peek()); [EOL] }
public void testLenientUnquotedStrings() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("[a]")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     assertEquals("a", reader.nextString()); [EOL] }
public void testLenientUnquotedStrings() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("[a]")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     assertEquals("a", reader.nextString()); [EOL] }
public void testLenientUnquotedStrings() throws IOException { [EOL]     JsonReader reader = new JsonReader(new StringReader("[a]")); [EOL]     reader.setLenient(true); [EOL]     reader.beginArray(); [EOL]     assertEquals("a", reader.nextString()); [EOL] }
public void testDefaultNestedStaticClassIncluded() throws Exception { [EOL]     Gson gson = new Gson(); [EOL]     Outer.Inner target = outer.new Inner(VALUE); [EOL]     String result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL]     gson = new GsonBuilder().create(); [EOL]     target = outer.new Inner(VALUE); [EOL]     result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL] }
public void testDefaultNestedStaticClassIncluded() throws Exception { [EOL]     Gson gson = new Gson(); [EOL]     Outer.Inner target = outer.new Inner(VALUE); [EOL]     String result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL]     gson = new GsonBuilder().create(); [EOL]     target = outer.new Inner(VALUE); [EOL]     result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL] }
public void testDefaultNestedStaticClassIncluded() throws Exception { [EOL]     Gson gson = new Gson(); [EOL]     Outer.Inner target = outer.new Inner(VALUE); [EOL]     String result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL]     gson = new GsonBuilder().create(); [EOL]     target = outer.new Inner(VALUE); [EOL]     result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL] }
public void testDefaultNestedStaticClassIncluded() throws Exception { [EOL]     Gson gson = new Gson(); [EOL]     Outer.Inner target = outer.new Inner(VALUE); [EOL]     String result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL]     gson = new GsonBuilder().create(); [EOL]     target = outer.new Inner(VALUE); [EOL]     result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL] }
public void testBadFieldTypeForDeserializingCustomTree() { [EOL]     JsonArray array = new JsonArray(); [EOL]     array.add(new JsonPrimitive("blah")); [EOL]     JsonObject primitive1 = new JsonObject(); [EOL]     primitive1.addProperty("string", "foo"); [EOL]     primitive1.addProperty("intValue", 11); [EOL]     JsonObject obj = new JsonObject(); [EOL]     obj.add("primitive1", primitive1); [EOL]     obj.add("primitive2", array); [EOL]     try { [EOL]         gson.fromJson(obj, Nested.class); [EOL]         fail("Nested has field BagOfPrimitives which is not an array"); [EOL]     } catch (JsonParseException expected) { [EOL]     } [EOL] }
public void testBadFieldTypeForDeserializingCustomTree() { [EOL]     JsonArray array = new JsonArray(); [EOL]     array.add(new JsonPrimitive("blah")); [EOL]     JsonObject primitive1 = new JsonObject(); [EOL]     primitive1.addProperty("string", "foo"); [EOL]     primitive1.addProperty("intValue", 11); [EOL]     JsonObject obj = new JsonObject(); [EOL]     obj.add("primitive1", primitive1); [EOL]     obj.add("primitive2", array); [EOL]     try { [EOL]         gson.fromJson(obj, Nested.class); [EOL]         fail("Nested has field BagOfPrimitives which is not an array"); [EOL]     } catch (JsonParseException expected) { [EOL]     } [EOL] }
public void testBadFieldTypeForDeserializingCustomTree() { [EOL]     JsonArray array = new JsonArray(); [EOL]     array.add(new JsonPrimitive("blah")); [EOL]     JsonObject primitive1 = new JsonObject(); [EOL]     primitive1.addProperty("string", "foo"); [EOL]     primitive1.addProperty("intValue", 11); [EOL]     JsonObject obj = new JsonObject(); [EOL]     obj.add("primitive1", primitive1); [EOL]     obj.add("primitive2", array); [EOL]     try { [EOL]         gson.fromJson(obj, Nested.class); [EOL]         fail("Nested has field BagOfPrimitives which is not an array"); [EOL]     } catch (JsonParseException expected) { [EOL]     } [EOL] }
public void testBadFieldTypeForDeserializingCustomTree() { [EOL]     JsonArray array = new JsonArray(); [EOL]     array.add(new JsonPrimitive("blah")); [EOL]     JsonObject primitive1 = new JsonObject(); [EOL]     primitive1.addProperty("string", "foo"); [EOL]     primitive1.addProperty("intValue", 11); [EOL]     JsonObject obj = new JsonObject(); [EOL]     obj.add("primitive1", primitive1); [EOL]     obj.add("primitive2", array); [EOL]     try { [EOL]         gson.fromJson(obj, Nested.class); [EOL]         fail("Nested has field BagOfPrimitives which is not an array"); [EOL]     } catch (JsonParseException expected) { [EOL]     } [EOL] }
public void testBadFieldTypeForDeserializingCustomTree() { [EOL]     JsonArray array = new JsonArray(); [EOL]     array.add(new JsonPrimitive("blah")); [EOL]     JsonObject primitive1 = new JsonObject(); [EOL]     primitive1.addProperty("string", "foo"); [EOL]     primitive1.addProperty("intValue", 11); [EOL]     JsonObject obj = new JsonObject(); [EOL]     obj.add("primitive1", primitive1); [EOL]     obj.add("primitive2", array); [EOL]     try { [EOL]         gson.fromJson(obj, Nested.class); [EOL]         fail("Nested has field BagOfPrimitives which is not an array"); [EOL]     } catch (JsonParseException expected) { [EOL]     } [EOL] }
public void testBadFieldTypeForDeserializingCustomTree() { [EOL]     JsonArray array = new JsonArray(); [EOL]     array.add(new JsonPrimitive("blah")); [EOL]     JsonObject primitive1 = new JsonObject(); [EOL]     primitive1.addProperty("string", "foo"); [EOL]     primitive1.addProperty("intValue", 11); [EOL]     JsonObject obj = new JsonObject(); [EOL]     obj.add("primitive1", primitive1); [EOL]     obj.add("primitive2", array); [EOL]     try { [EOL]         gson.fromJson(obj, Nested.class); [EOL]         fail("Nested has field BagOfPrimitives which is not an array"); [EOL]     } catch (JsonParseException expected) { [EOL]     } [EOL] }
public void testBadFieldTypeForDeserializingCustomTree() { [EOL]     JsonArray array = new JsonArray(); [EOL]     array.add(new JsonPrimitive("blah")); [EOL]     JsonObject primitive1 = new JsonObject(); [EOL]     primitive1.addProperty("string", "foo"); [EOL]     primitive1.addProperty("intValue", 11); [EOL]     JsonObject obj = new JsonObject(); [EOL]     obj.add("primitive1", primitive1); [EOL]     obj.add("primitive2", array); [EOL]     try { [EOL]         gson.fromJson(obj, Nested.class); [EOL]         fail("Nested has field BagOfPrimitives which is not an array"); [EOL]     } catch (JsonParseException expected) { [EOL]     } [EOL] }
public void testArrayOfCollectionDeserialization() throws Exception { [EOL]     String json = "[[1,2],[3,4]]"; [EOL]     Type type = new TypeToken<Collection<Integer>[]>() { [EOL]     }.getType(); [EOL]     Collection<Integer>[] target = gson.fromJson(json, type); [EOL]     assertEquals(2, target.length); [EOL]     MoreAsserts.assertEquals(new Integer[] { 1, 2 }, target[0].toArray(new Integer[0])); [EOL]     MoreAsserts.assertEquals(new Integer[] { 3, 4 }, target[1].toArray(new Integer[0])); [EOL] }
public void testArrayOfStringsDeserialization() { [EOL]     String json = "[\"Hello\",\"World\"]"; [EOL]     String[] target = gson.fromJson(json, String[].class); [EOL]     assertEquals("Hello", target[0]); [EOL]     assertEquals("World", target[1]); [EOL] }
public void testSubInterfacesOfCollectionDeserialization() throws Exception { [EOL]     String json = "{\"list\":[0,1,2,3],\"queue\":[0,1,2,3],\"set\":[0.1,0.2,0.3,0.4]," + "\"sortedSet\":[\"a\",\"b\",\"c\",\"d\"]" + "}"; [EOL]     ClassWithSubInterfacesOfCollection target = gson.fromJson(json, ClassWithSubInterfacesOfCollection.class); [EOL]     assertTrue(target.listContains(0, 1, 2, 3)); [EOL]     assertTrue(target.queueContains(0, 1, 2, 3)); [EOL]     assertTrue(target.setContains(0.1F, 0.2F, 0.3F, 0.4F)); [EOL]     assertTrue(target.sortedSetContains('a', 'b', 'c', 'd')); [EOL] }
public void testDefaultNestedStaticClassIncluded() throws Exception { [EOL]     Gson gson = new Gson(); [EOL]     Outer.Inner target = outer.new Inner(VALUE); [EOL]     String result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL]     gson = new GsonBuilder().create(); [EOL]     target = outer.new Inner(VALUE); [EOL]     result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL] }
public void testDefaultNestedStaticClassIncluded() throws Exception { [EOL]     Gson gson = new Gson(); [EOL]     Outer.Inner target = outer.new Inner(VALUE); [EOL]     String result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL]     gson = new GsonBuilder().create(); [EOL]     target = outer.new Inner(VALUE); [EOL]     result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL] }
public void testCreatingMoreThanOnce() { [EOL]     GsonBuilder builder = new GsonBuilder(); [EOL]     builder.create(); [EOL]     builder.create(); [EOL] }
public void testDefaultNestedStaticClassIncluded() throws Exception { [EOL]     Gson gson = new Gson(); [EOL]     Outer.Inner target = outer.new Inner(VALUE); [EOL]     String result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL]     gson = new GsonBuilder().create(); [EOL]     target = outer.new Inner(VALUE); [EOL]     result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL] }
public void testDefaultNestedStaticClassIncluded() throws Exception { [EOL]     Gson gson = new Gson(); [EOL]     Outer.Inner target = outer.new Inner(VALUE); [EOL]     String result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL]     gson = new GsonBuilder().create(); [EOL]     target = outer.new Inner(VALUE); [EOL]     result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL] }
public void testDefaultNestedStaticClassIncluded() throws Exception { [EOL]     Gson gson = new Gson(); [EOL]     Outer.Inner target = outer.new Inner(VALUE); [EOL]     String result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL]     gson = new GsonBuilder().create(); [EOL]     target = outer.new Inner(VALUE); [EOL]     result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL] }
public void testDefaultJavaSqlDateDeserialization() { [EOL]     String json = "'Dec 3, 2009'"; [EOL]     java.sql.Date extracted = gson.fromJson(json, java.sql.Date.class); [EOL]     assertEqualsDate(extracted, 2009, 11, 3); [EOL] }
public void testDefaultJavaSqlDateDeserialization() { [EOL]     String json = "'Dec 3, 2009'"; [EOL]     java.sql.Date extracted = gson.fromJson(json, java.sql.Date.class); [EOL]     assertEqualsDate(extracted, 2009, 11, 3); [EOL] }
public void testDefaultJavaSqlDateDeserialization() { [EOL]     String json = "'Dec 3, 2009'"; [EOL]     java.sql.Date extracted = gson.fromJson(json, java.sql.Date.class); [EOL]     assertEqualsDate(extracted, 2009, 11, 3); [EOL] }
public void testDefaultJavaSqlDateDeserialization() { [EOL]     String json = "'Dec 3, 2009'"; [EOL]     java.sql.Date extracted = gson.fromJson(json, java.sql.Date.class); [EOL]     assertEqualsDate(extracted, 2009, 11, 3); [EOL] }
public void testDefaultJavaSqlDateDeserialization() { [EOL]     String json = "'Dec 3, 2009'"; [EOL]     java.sql.Date extracted = gson.fromJson(json, java.sql.Date.class); [EOL]     assertEqualsDate(extracted, 2009, 11, 3); [EOL] }
public void testDefaultJavaSqlDateDeserialization() { [EOL]     String json = "'Dec 3, 2009'"; [EOL]     java.sql.Date extracted = gson.fromJson(json, java.sql.Date.class); [EOL]     assertEqualsDate(extracted, 2009, 11, 3); [EOL] }
public void testDefaultJavaSqlDateDeserialization() { [EOL]     String json = "'Dec 3, 2009'"; [EOL]     Date extracted = gson.fromJson(json, Date.class); [EOL]     assertEqualsDate(extracted, 2009, 11, 3); [EOL] }
public void testDefaultJavaSqlDateDeserialization() { [EOL]     String json = "'Dec 3, 2009'"; [EOL]     java.sql.Date extracted = gson.fromJson(json, java.sql.Date.class); [EOL]     assertEqualsDate(extracted, 2009, 11, 3); [EOL] }
public void testDefaultCalendarDeserialization() throws Exception { [EOL]     Gson gson = new GsonBuilder().create(); [EOL]     String json = "{year:2009,month:2,dayOfMonth:11,hourOfDay:14,minute:29,second:23}"; [EOL]     Calendar cal = gson.fromJson(json, Calendar.class); [EOL]     assertEquals(2009, cal.get(Calendar.YEAR)); [EOL]     assertEquals(2, cal.get(Calendar.MONTH)); [EOL]     assertEquals(11, cal.get(Calendar.DAY_OF_MONTH)); [EOL]     assertEquals(14, cal.get(Calendar.HOUR_OF_DAY)); [EOL]     assertEquals(29, cal.get(Calendar.MINUTE)); [EOL]     assertEquals(23, cal.get(Calendar.SECOND)); [EOL] }
public void testDefaultCalendarDeserialization() throws Exception { [EOL]     Gson gson = new GsonBuilder().create(); [EOL]     String json = "{year:2009,month:2,dayOfMonth:11,hourOfDay:14,minute:29,second:23}"; [EOL]     Calendar cal = gson.fromJson(json, Calendar.class); [EOL]     assertEquals(2009, cal.get(Calendar.YEAR)); [EOL]     assertEquals(2, cal.get(Calendar.MONTH)); [EOL]     assertEquals(11, cal.get(Calendar.DAY_OF_MONTH)); [EOL]     assertEquals(14, cal.get(Calendar.HOUR_OF_DAY)); [EOL]     assertEquals(29, cal.get(Calendar.MINUTE)); [EOL]     assertEquals(23, cal.get(Calendar.SECOND)); [EOL] }
public void testDefaultCalendarDeserialization() throws Exception { [EOL]     Gson gson = new GsonBuilder().create(); [EOL]     String json = "{year:2009,month:2,dayOfMonth:11,hourOfDay:14,minute:29,second:23}"; [EOL]     Calendar cal = gson.fromJson(json, Calendar.class); [EOL]     assertEquals(2009, cal.get(Calendar.YEAR)); [EOL]     assertEquals(2, cal.get(Calendar.MONTH)); [EOL]     assertEquals(11, cal.get(Calendar.DAY_OF_MONTH)); [EOL]     assertEquals(14, cal.get(Calendar.HOUR_OF_DAY)); [EOL]     assertEquals(29, cal.get(Calendar.MINUTE)); [EOL]     assertEquals(23, cal.get(Calendar.SECOND)); [EOL] }
public void testDefaultCalendarDeserialization() throws Exception { [EOL]     Gson gson = new GsonBuilder().create(); [EOL]     String json = "{year:2009,month:2,dayOfMonth:11,hourOfDay:14,minute:29,second:23}"; [EOL]     Calendar cal = gson.fromJson(json, Calendar.class); [EOL]     assertEquals(2009, cal.get(Calendar.YEAR)); [EOL]     assertEquals(2, cal.get(Calendar.MONTH)); [EOL]     assertEquals(11, cal.get(Calendar.DAY_OF_MONTH)); [EOL]     assertEquals(14, cal.get(Calendar.HOUR_OF_DAY)); [EOL]     assertEquals(29, cal.get(Calendar.MINUTE)); [EOL]     assertEquals(23, cal.get(Calendar.SECOND)); [EOL] }
public void testDefaultCalendarDeserialization() throws Exception { [EOL]     Gson gson = new GsonBuilder().create(); [EOL]     String json = "{year:2009,month:2,dayOfMonth:11,hourOfDay:14,minute:29,second:23}"; [EOL]     Calendar cal = gson.fromJson(json, Calendar.class); [EOL]     assertEquals(2009, cal.get(Calendar.YEAR)); [EOL]     assertEquals(2, cal.get(Calendar.MONTH)); [EOL]     assertEquals(11, cal.get(Calendar.DAY_OF_MONTH)); [EOL]     assertEquals(14, cal.get(Calendar.HOUR_OF_DAY)); [EOL]     assertEquals(29, cal.get(Calendar.MINUTE)); [EOL]     assertEquals(23, cal.get(Calendar.SECOND)); [EOL] }
public void testDefaultCalendarDeserialization() throws Exception { [EOL]     Gson gson = new GsonBuilder().create(); [EOL]     String json = "{year:2009,month:2,dayOfMonth:11,hourOfDay:14,minute:29,second:23}"; [EOL]     Calendar cal = gson.fromJson(json, Calendar.class); [EOL]     assertEquals(2009, cal.get(Calendar.YEAR)); [EOL]     assertEquals(2, cal.get(Calendar.MONTH)); [EOL]     assertEquals(11, cal.get(Calendar.DAY_OF_MONTH)); [EOL]     assertEquals(14, cal.get(Calendar.HOUR_OF_DAY)); [EOL]     assertEquals(29, cal.get(Calendar.MINUTE)); [EOL]     assertEquals(23, cal.get(Calendar.SECOND)); [EOL] }
public void testDefaultCalendarDeserialization() throws Exception { [EOL]     Gson gson = new GsonBuilder().create(); [EOL]     String json = "{year:2009,month:2,dayOfMonth:11,hourOfDay:14,minute:29,second:23}"; [EOL]     Calendar cal = gson.fromJson(json, Calendar.class); [EOL]     assertEquals(2009, cal.get(Calendar.YEAR)); [EOL]     assertEquals(2, cal.get(Calendar.MONTH)); [EOL]     assertEquals(11, cal.get(Calendar.DAY_OF_MONTH)); [EOL]     assertEquals(14, cal.get(Calendar.HOUR_OF_DAY)); [EOL]     assertEquals(29, cal.get(Calendar.MINUTE)); [EOL]     assertEquals(23, cal.get(Calendar.SECOND)); [EOL] }
public void testDefaultCalendarDeserialization() throws Exception { [EOL]     Gson gson = new GsonBuilder().create(); [EOL]     String json = "{year:2009,month:2,dayOfMonth:11,hourOfDay:14,minute:29,second:23}"; [EOL]     Calendar cal = gson.fromJson(json, Calendar.class); [EOL]     assertEquals(2009, cal.get(Calendar.YEAR)); [EOL]     assertEquals(2, cal.get(Calendar.MONTH)); [EOL]     assertEquals(11, cal.get(Calendar.DAY_OF_MONTH)); [EOL]     assertEquals(14, cal.get(Calendar.HOUR_OF_DAY)); [EOL]     assertEquals(29, cal.get(Calendar.MINUTE)); [EOL]     assertEquals(23, cal.get(Calendar.SECOND)); [EOL] }
public void testDefaultCalendarDeserialization() throws Exception { [EOL]     Gson gson = new GsonBuilder().create(); [EOL]     String json = "{year:2009,month:2,dayOfMonth:11,hourOfDay:14,minute:29,second:23}"; [EOL]     Calendar cal = gson.fromJson(json, Calendar.class); [EOL]     assertEquals(2009, cal.get(Calendar.YEAR)); [EOL]     assertEquals(2, cal.get(Calendar.MONTH)); [EOL]     assertEquals(11, cal.get(Calendar.DAY_OF_MONTH)); [EOL]     assertEquals(14, cal.get(Calendar.HOUR_OF_DAY)); [EOL]     assertEquals(29, cal.get(Calendar.MINUTE)); [EOL]     assertEquals(23, cal.get(Calendar.SECOND)); [EOL] }
public void testSetSerialization() throws Exception { [EOL]     Gson gson = new Gson(); [EOL]     HashSet<String> s = new HashSet<String>(); [EOL]     s.add("blah"); [EOL]     String json = gson.toJson(s); [EOL]     assertEquals("[\"blah\"]", json); [EOL]     json = gson.toJson(s, Set.class); [EOL]     assertEquals("[\"blah\"]", json); [EOL] }
public void testSetSerialization() throws Exception { [EOL]     Gson gson = new Gson(); [EOL]     HashSet<String> s = new HashSet<String>(); [EOL]     s.add("blah"); [EOL]     String json = gson.toJson(s); [EOL]     assertEquals("[\"blah\"]", json); [EOL]     json = gson.toJson(s, Set.class); [EOL]     assertEquals("[\"blah\"]", json); [EOL] }
public void testPropertiesDeserialization() { [EOL]     String json = "{foo:'bar'}"; [EOL]     Properties props = gson.fromJson(json, Properties.class); [EOL]     assertEquals("bar", props.getProperty("foo")); [EOL] }
public void testTypesWithMultipleParametersDeserialization() throws Exception { [EOL]     Type typeOfTarget = new TypeToken<MultiParameters<Integer, Float, Double, String, BagOfPrimitives>>() { [EOL]     }.getType(); [EOL]     String json = "{\"a\":10,\"b\":1.0,\"c\":2.1,\"d\":\"abc\"," + "\"e\":{\"longValue\":0,\"intValue\":0,\"booleanValue\":false,\"stringValue\":\"\"}}"; [EOL]     MultiParameters<Integer, Float, Double, String, BagOfPrimitives> target = gson.fromJson(json, typeOfTarget); [EOL]     MultiParameters<Integer, Float, Double, String, BagOfPrimitives> expected = new MultiParameters<Integer, Float, Double, String, BagOfPrimitives>(10, 1.0F, 2.1D, "abc", new BagOfPrimitives()); [EOL]     assertEquals(expected, target); [EOL] }
public void testUrlDeserialization() { [EOL]     String urlValue = "http://google.com/"; [EOL]     String json = '"' + urlValue + '"'; [EOL]     URL target = gson.fromJson(json, URL.class); [EOL]     assertEquals(urlValue, target.toASCIIString()); [EOL] }
public void testUrlDeserialization() { [EOL]     String urlValue = "http://google.com/"; [EOL]     String json = '"' + urlValue + '"'; [EOL]     URL target = gson.fromJson(json, URL.class); [EOL]     assertEquals(urlValue, target.toExternalForm()); [EOL] }
public void testUrlDeserialization() { [EOL]     String urlValue = "http://google.com/"; [EOL]     String json = '"' + urlValue + '"'; [EOL]     URL target = gson.fromJson(json, URL.class); [EOL]     assertEquals(urlValue, target.toASCIIString()); [EOL] }
public void testUuidSerialization() { [EOL]     String uuidValue = "c237bec1-19ef-4858-a98e-521cf0aad4c0"; [EOL]     UUID target = new UUID(uuidValue); [EOL]     assertEquals("\"c237bec1-19ef-4858-a98e-521cf0aad4c0\"", gson.toJson(target)); [EOL] }
public void testUuidSerialization() { [EOL]     String uuidValue = "c237bec1-19ef-4858-a98e-521cf0aad4c0"; [EOL]     UUID target = new UUID(uuidValue); [EOL]     assertEquals("\"c237bec1-19ef-4858-a98e-521cf0aad4c0\"", gson.toJson(target)); [EOL] }
public void testLocaleDeserializationWithLanguageCountry() { [EOL]     String json = "\"fr_CA\""; [EOL]     Locale locale = gson.fromJson(json, Locale.class); [EOL]     assertEquals(Locale.CANADA_FRENCH, locale); [EOL] }
public void testLocaleDeserializationWithLanguageCountry() { [EOL]     String json = "\"fr_CA\""; [EOL]     Locale locale = gson.fromJson(json, Locale.class); [EOL]     assertEquals(Locale.CANADA_FRENCH, locale); [EOL] }
public void testLocaleDeserializationWithLanguageCountry() { [EOL]     String json = "\"fr_CA\""; [EOL]     Locale locale = gson.fromJson(json, Locale.class); [EOL]     assertEquals(Locale.CANADA_FRENCH, locale); [EOL] }
public void testLocaleDeserializationWithLanguageCountry() { [EOL]     String json = "\"fr_CA\""; [EOL]     Locale locale = gson.fromJson(json, Locale.class); [EOL]     assertEquals(Locale.CANADA_FRENCH, locale); [EOL] }
public void testLocaleDeserializationWithLanguageCountry() { [EOL]     String json = "\"fr_CA\""; [EOL]     Locale locale = gson.fromJson(json, Locale.class); [EOL]     assertEquals(Locale.CANADA_FRENCH, locale); [EOL] }
public void testLocaleDeserializationWithLanguageCountry() { [EOL]     String json = "\"fr_CA\""; [EOL]     Locale locale = gson.fromJson(json, Locale.class); [EOL]     assertEquals(Locale.CANADA_FRENCH, locale); [EOL] }
public void testLocaleDeserializationWithLanguageCountry() { [EOL]     String json = "\"fr_CA\""; [EOL]     Locale locale = gson.fromJson(json, Locale.class); [EOL]     assertEquals(Locale.CANADA_FRENCH, locale); [EOL] }
public void testLocaleDeserializationWithLanguageCountry() { [EOL]     String json = "\"fr_CA\""; [EOL]     Locale locale = gson.fromJson(json, Locale.class); [EOL]     assertEquals(Locale.CANADA_FRENCH, locale); [EOL] }
public void testLocaleDeserializationWithLanguageCountry() { [EOL]     String json = "\"fr_CA\""; [EOL]     Locale locale = gson.fromJson(json, Locale.class); [EOL]     assertEquals(Locale.CANADA_FRENCH, locale); [EOL] }
public void testLocaleDeserializationWithLanguageCountry() { [EOL]     String json = "\"fr_CA\""; [EOL]     Locale locale = gson.fromJson(json, Locale.class); [EOL]     assertEquals(Locale.CANADA_FRENCH, locale); [EOL] }
public void testLocaleDeserializationWithLanguageCountry() { [EOL]     String json = "\"fr_CA\""; [EOL]     Locale locale = gson.fromJson(json, Locale.class); [EOL]     assertEquals(Locale.CANADA_FRENCH, locale); [EOL] }
public void testLocaleDeserializationWithLanguageCountry() { [EOL]     String json = "\"fr_CA\""; [EOL]     Locale locale = gson.fromJson(json, Locale.class); [EOL]     assertEquals(Locale.CANADA_FRENCH, locale); [EOL] }
public void testLocaleDeserializationWithLanguageCountry() { [EOL]     String json = "\"fr_CA\""; [EOL]     Locale locale = gson.fromJson(json, Locale.class); [EOL]     assertEquals(Locale.CANADA_FRENCH, locale); [EOL] }
public void testLocaleDeserializationWithLanguageCountry() { [EOL]     String json = "\"fr_CA\""; [EOL]     Locale locale = gson.fromJson(json, Locale.class); [EOL]     assertEquals(Locale.CANADA_FRENCH, locale); [EOL] }
public void testSetSerialization() throws Exception { [EOL]     Gson gson = new Gson(); [EOL]     HashSet<String> s = new HashSet<String>(); [EOL]     s.add("blah"); [EOL]     String json = gson.toJson(s); [EOL]     assertEquals("[\"blah\"]", json); [EOL]     json = gson.toJson(s, Set.class); [EOL]     assertEquals("[\"blah\"]", json); [EOL] }
public void testSetSerialization() throws Exception { [EOL]     Gson gson = new Gson(); [EOL]     HashSet<String> s = new HashSet<String>(); [EOL]     s.add("blah"); [EOL]     String json = gson.toJson(s); [EOL]     assertEquals("[\"blah\"]", json); [EOL]     json = gson.toJson(s, Set.class); [EOL]     assertEquals("[\"blah\"]", json); [EOL] }
public void testNullsInListDeserialization() { [EOL]     List<String> expected = new ArrayList<String>(); [EOL]     expected.add("foo"); [EOL]     expected.add(null); [EOL]     expected.add("bar"); [EOL]     String json = "[\"foo\",null,\"bar\"]"; [EOL]     Type expectedType = new TypeToken<List<String>>() { [EOL]     }.getType(); [EOL]     List<String> target = gson.fromJson(json, expectedType); [EOL]     for (int i = 0; i < expected.size(); ++i) { [EOL]         assertEquals(expected.get(i), target.get(i)); [EOL]     } [EOL] }
public void testNullsInListDeserialization() { [EOL]     List<String> expected = new ArrayList<String>(); [EOL]     expected.add("foo"); [EOL]     expected.add(null); [EOL]     expected.add("bar"); [EOL]     String json = "[\"foo\",null,\"bar\"]"; [EOL]     Type expectedType = new TypeToken<List<String>>() { [EOL]     }.getType(); [EOL]     List<String> target = gson.fromJson(json, expectedType); [EOL]     for (int i = 0; i < expected.size(); ++i) { [EOL]         assertEquals(expected.get(i), target.get(i)); [EOL]     } [EOL] }
public void testNullsInListDeserialization() { [EOL]     List<String> expected = new ArrayList<String>(); [EOL]     expected.add("foo"); [EOL]     expected.add(null); [EOL]     expected.add("bar"); [EOL]     String json = "[\"foo\",null,\"bar\"]"; [EOL]     Type expectedType = new TypeToken<List<String>>() { [EOL]     }.getType(); [EOL]     List<String> target = gson.fromJson(json, expectedType); [EOL]     for (int i = 0; i < expected.size(); ++i) { [EOL]         assertEquals(expected.get(i), target.get(i)); [EOL]     } [EOL] }
public void testNullsInListDeserialization() { [EOL]     List<String> expected = new ArrayList<String>(); [EOL]     expected.add("foo"); [EOL]     expected.add(null); [EOL]     expected.add("bar"); [EOL]     String json = "[\"foo\",null,\"bar\"]"; [EOL]     Type expectedType = new TypeToken<List<String>>() { [EOL]     }.getType(); [EOL]     List<String> target = gson.fromJson(json, expectedType); [EOL]     for (int i = 0; i < expected.size(); ++i) { [EOL]         assertEquals(expected.get(i), target.get(i)); [EOL]     } [EOL] }
public void testNullsInListDeserialization() { [EOL]     List<String> expected = new ArrayList<String>(); [EOL]     expected.add("foo"); [EOL]     expected.add(null); [EOL]     expected.add("bar"); [EOL]     String json = "[\"foo\",null,\"bar\"]"; [EOL]     Type expectedType = new TypeToken<List<String>>() { [EOL]     }.getType(); [EOL]     List<String> target = gson.fromJson(json, expectedType); [EOL]     for (int i = 0; i < expected.size(); ++i) { [EOL]         assertEquals(expected.get(i), target.get(i)); [EOL]     } [EOL] }
public void testNullsInListDeserialization() { [EOL]     List<String> expected = new ArrayList<String>(); [EOL]     expected.add("foo"); [EOL]     expected.add(null); [EOL]     expected.add("bar"); [EOL]     String json = "[\"foo\",null,\"bar\"]"; [EOL]     Type expectedType = new TypeToken<List<String>>() { [EOL]     }.getType(); [EOL]     List<String> target = gson.fromJson(json, expectedType); [EOL]     for (int i = 0; i < expected.size(); ++i) { [EOL]         assertEquals(expected.get(i), target.get(i)); [EOL]     } [EOL] }
public void testPropertiesDeserialization() { [EOL]     String json = "{foo:'bar'}"; [EOL]     Properties props = gson.fromJson(json, Properties.class); [EOL]     assertEquals("bar", props.getProperty("foo")); [EOL] }
public void testNullsInListDeserialization() { [EOL]     List<String> expected = new ArrayList<String>(); [EOL]     expected.add("foo"); [EOL]     expected.add(null); [EOL]     expected.add("bar"); [EOL]     String json = "[\"foo\",null,\"bar\"]"; [EOL]     Type expectedType = new TypeToken<List<String>>() { [EOL]     }.getType(); [EOL]     List<String> target = gson.fromJson(json, expectedType); [EOL]     for (int i = 0; i < expected.size(); ++i) { [EOL]         assertEquals(expected.get(i), target.get(i)); [EOL]     } [EOL] }
public void testNullsInListDeserialization() { [EOL]     List<String> expected = new ArrayList<String>(); [EOL]     expected.add("foo"); [EOL]     expected.add(null); [EOL]     expected.add("bar"); [EOL]     String json = "[\"foo\",null,\"bar\"]"; [EOL]     Type expectedType = new TypeToken<List<String>>() { [EOL]     }.getType(); [EOL]     List<String> target = gson.fromJson(json, expectedType); [EOL]     for (int i = 0; i < expected.size(); ++i) { [EOL]         assertEquals(expected.get(i), target.get(i)); [EOL]     } [EOL] }
public void testSubInterfacesOfCollectionDeserialization() throws Exception { [EOL]     String json = "{\"list\":[0,1,2,3],\"queue\":[0,1,2,3],\"set\":[0.1,0.2,0.3,0.4]," + "\"sortedSet\":[\"a\",\"b\",\"c\",\"d\"]" + "}"; [EOL]     ClassWithSubInterfacesOfCollection target = gson.fromJson(json, ClassWithSubInterfacesOfCollection.class); [EOL]     assertTrue(target.listContains(0, 1, 2, 3)); [EOL]     assertTrue(target.queueContains(0, 1, 2, 3)); [EOL]     assertTrue(target.setContains(0.1F, 0.2F, 0.3F, 0.4F)); [EOL]     assertTrue(target.sortedSetContains('a', 'b', 'c', 'd')); [EOL] }
public void testSubInterfacesOfCollectionDeserialization() throws Exception { [EOL]     String json = "{\"list\":[0,1,2,3],\"queue\":[0,1,2,3],\"set\":[0.1,0.2,0.3,0.4]," + "\"sortedSet\":[\"a\",\"b\",\"c\",\"d\"]" + "}"; [EOL]     ClassWithSubInterfacesOfCollection target = gson.fromJson(json, ClassWithSubInterfacesOfCollection.class); [EOL]     assertTrue(target.listContains(0, 1, 2, 3)); [EOL]     assertTrue(target.queueContains(0, 1, 2, 3)); [EOL]     assertTrue(target.setContains(0.1F, 0.2F, 0.3F, 0.4F)); [EOL]     assertTrue(target.sortedSetContains('a', 'b', 'c', 'd')); [EOL] }
public void testSubInterfacesOfCollectionDeserialization() throws Exception { [EOL]     String json = "{\"list\":[0,1,2,3],\"queue\":[0,1,2,3],\"set\":[0.1,0.2,0.3,0.4]," + "\"sortedSet\":[\"a\",\"b\",\"c\",\"d\"]" + "}"; [EOL]     ClassWithSubInterfacesOfCollection target = gson.fromJson(json, ClassWithSubInterfacesOfCollection.class); [EOL]     assertTrue(target.listContains(0, 1, 2, 3)); [EOL]     assertTrue(target.queueContains(0, 1, 2, 3)); [EOL]     assertTrue(target.setContains(0.1F, 0.2F, 0.3F, 0.4F)); [EOL]     assertTrue(target.sortedSetContains('a', 'b', 'c', 'd')); [EOL] }
public void testSubInterfacesOfCollectionDeserialization() throws Exception { [EOL]     String json = "{\"list\":[0,1,2,3],\"queue\":[0,1,2,3],\"set\":[0.1,0.2,0.3,0.4]," + "\"sortedSet\":[\"a\",\"b\",\"c\",\"d\"]" + "}"; [EOL]     ClassWithSubInterfacesOfCollection target = gson.fromJson(json, ClassWithSubInterfacesOfCollection.class); [EOL]     assertTrue(target.listContains(0, 1, 2, 3)); [EOL]     assertTrue(target.queueContains(0, 1, 2, 3)); [EOL]     assertTrue(target.setContains(0.1F, 0.2F, 0.3F, 0.4F)); [EOL]     assertTrue(target.sortedSetContains('a', 'b', 'c', 'd')); [EOL] }
public void testPropertiesSerialization() { [EOL]     Properties props = new Properties(); [EOL]     props.setProperty("foo", "bar"); [EOL]     String json = gson.toJson(props); [EOL]     String expected = "{\"foo\":\"bar\"}"; [EOL]     assertEquals(expected, json); [EOL] }
public void testPropertiesDeserialization() { [EOL]     String json = "{foo:'bar'}"; [EOL]     Properties props = gson.fromJson(json, Properties.class); [EOL]     assertEquals("bar", props.getProperty("foo")); [EOL] }
public void testPropertiesDeserialization() { [EOL]     String json = "{foo:'bar'}"; [EOL]     Properties props = gson.fromJson(json, Properties.class); [EOL]     assertEquals("bar", props.getProperty("foo")); [EOL] }
public void testIntegerFieldSerialization() { [EOL]     ClassWithInteger target = new ClassWithInteger(10); [EOL]     String json = gson.toJson(target); [EOL]     assertEquals(target.getExpectedJson(), json); [EOL] }
public void testIntegerFieldSerialization() { [EOL]     ClassWithInteger target = new ClassWithInteger(10); [EOL]     String json = gson.toJson(target); [EOL]     assertEquals(target.getExpectedJson(), json); [EOL] }
public void testTypesWithMultipleParametersDeserialization() throws Exception { [EOL]     Type typeOfTarget = new TypeToken<MultiParameters<Integer, Float, Double, String, BagOfPrimitives>>() { [EOL]     }.getType(); [EOL]     String json = "{\"a\":10,\"b\":1.0,\"c\":2.1,\"d\":\"abc\"," + "\"e\":{\"longValue\":0,\"intValue\":0,\"booleanValue\":false,\"stringValue\":\"\"}}"; [EOL]     MultiParameters<Integer, Float, Double, String, BagOfPrimitives> target = gson.fromJson(json, typeOfTarget); [EOL]     MultiParameters<Integer, Float, Double, String, BagOfPrimitives> expected = new MultiParameters<Integer, Float, Double, String, BagOfPrimitives>(10, 1.0F, 2.1D, "abc", new BagOfPrimitives()); [EOL]     assertEquals(expected, target); [EOL] }
public void testTypesWithMultipleParametersDeserialization() throws Exception { [EOL]     Type typeOfTarget = new TypeToken<MultiParameters<Integer, Float, Double, String, BagOfPrimitives>>() { [EOL]     }.getType(); [EOL]     String json = "{\"a\":10,\"b\":1.0,\"c\":2.1,\"d\":\"abc\"," + "\"e\":{\"longValue\":0,\"intValue\":0,\"booleanValue\":false,\"stringValue\":\"\"}}"; [EOL]     MultiParameters<Integer, Float, Double, String, BagOfPrimitives> target = gson.fromJson(json, typeOfTarget); [EOL]     MultiParameters<Integer, Float, Double, String, BagOfPrimitives> expected = new MultiParameters<Integer, Float, Double, String, BagOfPrimitives>(10, 1.0F, 2.1D, "abc", new BagOfPrimitives()); [EOL]     assertEquals(expected, target); [EOL] }
public void testEscapingObjectFields() throws Exception { [EOL]     BagOfPrimitives objWithPrimitives = new BagOfPrimitives(1L, 1, true, "test with\" <script>"); [EOL]     String jsonRepresentation = gson.toJson(objWithPrimitives); [EOL]     assertFalse(jsonRepresentation.contains("<")); [EOL]     assertFalse(jsonRepresentation.contains(">")); [EOL]     assertTrue(jsonRepresentation.contains("\\\"")); [EOL]     BagOfPrimitives expectedObject = gson.fromJson(jsonRepresentation, BagOfPrimitives.class); [EOL]     assertEquals(objWithPrimitives.getExpectedJson(), expectedObject.getExpectedJson()); [EOL] }
public void testEscapingObjectFields() throws Exception { [EOL]     BagOfPrimitives objWithPrimitives = new BagOfPrimitives(1L, 1, true, "test with\" <script>"); [EOL]     String jsonRepresentation = gson.toJson(objWithPrimitives); [EOL]     assertFalse(jsonRepresentation.contains("<")); [EOL]     assertFalse(jsonRepresentation.contains(">")); [EOL]     assertTrue(jsonRepresentation.contains("\\\"")); [EOL]     BagOfPrimitives expectedObject = gson.fromJson(jsonRepresentation, BagOfPrimitives.class); [EOL]     assertEquals(objWithPrimitives.getExpectedJson(), expectedObject.getExpectedJson()); [EOL] }
public void testDefaultCalendarDeserialization() throws Exception { [EOL]     Gson gson = new GsonBuilder().create(); [EOL]     String json = "{year:2009,month:2,dayOfMonth:11,hourOfDay:14,minute:29,second:23}"; [EOL]     Calendar cal = gson.fromJson(json, Calendar.class); [EOL]     assertEquals(2009, cal.get(Calendar.YEAR)); [EOL]     assertEquals(2, cal.get(Calendar.MONTH)); [EOL]     assertEquals(11, cal.get(Calendar.DAY_OF_MONTH)); [EOL]     assertEquals(14, cal.get(Calendar.HOUR_OF_DAY)); [EOL]     assertEquals(29, cal.get(Calendar.MINUTE)); [EOL]     assertEquals(23, cal.get(Calendar.SECOND)); [EOL] }
public void testDefaultCalendarDeserialization() throws Exception { [EOL]     Gson gson = new GsonBuilder().create(); [EOL]     String json = "{year:2009,month:2,dayOfMonth:11,hourOfDay:14,minute:29,second:23}"; [EOL]     Calendar cal = gson.fromJson(json, Calendar.class); [EOL]     assertEquals(2009, cal.get(Calendar.YEAR)); [EOL]     assertEquals(2, cal.get(Calendar.MONTH)); [EOL]     assertEquals(11, cal.get(Calendar.DAY_OF_MONTH)); [EOL]     assertEquals(14, cal.get(Calendar.HOUR_OF_DAY)); [EOL]     assertEquals(29, cal.get(Calendar.MINUTE)); [EOL]     assertEquals(23, cal.get(Calendar.SECOND)); [EOL] }
public void testDefaultCalendarDeserialization() throws Exception { [EOL]     Gson gson = new GsonBuilder().create(); [EOL]     String json = "{year:2009,month:2,dayOfMonth:11,hourOfDay:14,minute:29,second:23}"; [EOL]     Calendar cal = gson.fromJson(json, Calendar.class); [EOL]     assertEquals(2009, cal.get(Calendar.YEAR)); [EOL]     assertEquals(2, cal.get(Calendar.MONTH)); [EOL]     assertEquals(11, cal.get(Calendar.DAY_OF_MONTH)); [EOL]     assertEquals(14, cal.get(Calendar.HOUR_OF_DAY)); [EOL]     assertEquals(29, cal.get(Calendar.MINUTE)); [EOL]     assertEquals(23, cal.get(Calendar.SECOND)); [EOL] }
public void testDefaultCalendarDeserialization() throws Exception { [EOL]     Gson gson = new GsonBuilder().create(); [EOL]     String json = "{year:2009,month:2,dayOfMonth:11,hourOfDay:14,minute:29,second:23}"; [EOL]     Calendar cal = gson.fromJson(json, Calendar.class); [EOL]     assertEquals(2009, cal.get(Calendar.YEAR)); [EOL]     assertEquals(2, cal.get(Calendar.MONTH)); [EOL]     assertEquals(11, cal.get(Calendar.DAY_OF_MONTH)); [EOL]     assertEquals(14, cal.get(Calendar.HOUR_OF_DAY)); [EOL]     assertEquals(29, cal.get(Calendar.MINUTE)); [EOL]     assertEquals(23, cal.get(Calendar.SECOND)); [EOL] }
public void testNeverSkipsClass() throws Exception { [EOL]     assertFalse(strategy.shouldSkipClass(String.class)); [EOL] }
public void testNeverSkipsClass() throws Exception { [EOL]     assertFalse(strategy.shouldSkipClass(String.class)); [EOL] }
public void testInvalidConstruction() throws Exception { [EOL]     try { [EOL]         new TypeInfoMap(String.class); [EOL]         fail("Must be a ParameterizedType"); [EOL]     } catch (IllegalArgumentException expected) { [EOL]     } [EOL] }
public void testPropertiesDeserialization() { [EOL]     String json = "{foo:'bar'}"; [EOL]     Properties props = gson.fromJson(json, Properties.class); [EOL]     assertEquals("bar", props.getProperty("foo")); [EOL] }
public void testPropertiesDeserialization() { [EOL]     String json = "{foo:'bar'}"; [EOL]     Properties props = gson.fromJson(json, Properties.class); [EOL]     assertEquals("bar", props.getProperty("foo")); [EOL] }
public void testSubInterfacesOfCollectionDeserialization() throws Exception { [EOL]     String json = "{\"list\":[0,1,2,3],\"queue\":[0,1,2,3],\"set\":[0.1,0.2,0.3,0.4]," + "\"sortedSet\":[\"a\",\"b\",\"c\",\"d\"]" + "}"; [EOL]     ClassWithSubInterfacesOfCollection target = gson.fromJson(json, ClassWithSubInterfacesOfCollection.class); [EOL]     assertTrue(target.listContains(0, 1, 2, 3)); [EOL]     assertTrue(target.queueContains(0, 1, 2, 3)); [EOL]     assertTrue(target.setContains(0.1F, 0.2F, 0.3F, 0.4F)); [EOL]     assertTrue(target.sortedSetContains('a', 'b', 'c', 'd')); [EOL] }
public void testSubInterfacesOfCollectionDeserialization() throws Exception { [EOL]     String json = "{\"list\":[0,1,2,3],\"queue\":[0,1,2,3],\"set\":[0.1,0.2,0.3,0.4]," + "\"sortedSet\":[\"a\",\"b\",\"c\",\"d\"]" + "}"; [EOL]     ClassWithSubInterfacesOfCollection target = gson.fromJson(json, ClassWithSubInterfacesOfCollection.class); [EOL]     assertTrue(target.listContains(0, 1, 2, 3)); [EOL]     assertTrue(target.queueContains(0, 1, 2, 3)); [EOL]     assertTrue(target.setContains(0.1F, 0.2F, 0.3F, 0.4F)); [EOL]     assertTrue(target.sortedSetContains('a', 'b', 'c', 'd')); [EOL] }
public void testSubInterfacesOfCollectionDeserialization() throws Exception { [EOL]     String json = "{\"list\":[0,1,2,3],\"queue\":[0,1,2,3],\"set\":[0.1,0.2,0.3,0.4]," + "\"sortedSet\":[\"a\",\"b\",\"c\",\"d\"]" + "}"; [EOL]     ClassWithSubInterfacesOfCollection target = gson.fromJson(json, ClassWithSubInterfacesOfCollection.class); [EOL]     assertTrue(target.listContains(0, 1, 2, 3)); [EOL]     assertTrue(target.queueContains(0, 1, 2, 3)); [EOL]     assertTrue(target.setContains(0.1F, 0.2F, 0.3F, 0.4F)); [EOL]     assertTrue(target.sortedSetContains('a', 'b', 'c', 'd')); [EOL] }
public void testSubInterfacesOfCollectionDeserialization() throws Exception { [EOL]     String json = "{\"list\":[0,1,2,3],\"queue\":[0,1,2,3],\"set\":[0.1,0.2,0.3,0.4]," + "\"sortedSet\":[\"a\",\"b\",\"c\",\"d\"]" + "}"; [EOL]     ClassWithSubInterfacesOfCollection target = gson.fromJson(json, ClassWithSubInterfacesOfCollection.class); [EOL]     assertTrue(target.listContains(0, 1, 2, 3)); [EOL]     assertTrue(target.queueContains(0, 1, 2, 3)); [EOL]     assertTrue(target.setContains(0.1F, 0.2F, 0.3F, 0.4F)); [EOL]     assertTrue(target.sortedSetContains('a', 'b', 'c', 'd')); [EOL] }
public void testExplicitNullSetsFieldToNullDuringDeserialization() { [EOL]     Gson gson = new Gson(); [EOL]     String json = "{value:null}"; [EOL]     ObjectWithField obj = gson.fromJson(json, ObjectWithField.class); [EOL]     assertNull(obj.value); [EOL] }
public void testExplicitNullSetsFieldToNullDuringDeserialization() { [EOL]     Gson gson = new Gson(); [EOL]     String json = "{value:null}"; [EOL]     ObjectWithField obj = gson.fromJson(json, ObjectWithField.class); [EOL]     assertNull(obj.value); [EOL] }
public void testExplicitNullSetsFieldToNullDuringDeserialization() { [EOL]     Gson gson = new Gson(); [EOL]     String json = "{value:null}"; [EOL]     ObjectWithField obj = gson.fromJson(json, ObjectWithField.class); [EOL]     assertNull(obj.value); [EOL] }
public void testExplicitNullSetsFieldToNullDuringDeserialization() { [EOL]     Gson gson = new Gson(); [EOL]     String json = "{value:null}"; [EOL]     ObjectWithField obj = gson.fromJson(json, ObjectWithField.class); [EOL]     assertNull(obj.value); [EOL] }
public void testArrayWithoutTypeInfoDeserialization() throws Exception { [EOL]     String json = "[1,'abc',[1,2],5]"; [EOL]     try { [EOL]         gson.fromJson(json, Object[].class); [EOL]         fail("This is crazy....how did we deserialize it!!!"); [EOL]     } catch (JsonParseException expected) { [EOL]     } [EOL] }
public void testExplicitNullSetsFieldToNullDuringDeserialization() { [EOL]     Gson gson = new Gson(); [EOL]     String json = "{value:null}"; [EOL]     ObjectWithField obj = gson.fromJson(json, ObjectWithField.class); [EOL]     assertNull(obj.value); [EOL] }
public void testArrayWithoutTypeInfoDeserialization() throws Exception { [EOL]     String json = "[1,'abc',[1,2],5]"; [EOL]     try { [EOL]         gson.fromJson(json, Object[].class); [EOL]         fail("This is crazy....how did we deserialize it!!!"); [EOL]     } catch (JsonParseException expected) { [EOL]     } [EOL] }
public void testArrayWithoutTypeInfoDeserialization() throws Exception { [EOL]     String json = "[1,'abc',[1,2],5]"; [EOL]     try { [EOL]         gson.fromJson(json, Object[].class); [EOL]         fail("This is crazy....how did we deserialize it!!!"); [EOL]     } catch (JsonParseException expected) { [EOL]     } [EOL] }
public void testExplicitNullSetsFieldToNullDuringDeserialization() { [EOL]     Gson gson = new Gson(); [EOL]     String json = "{value:null}"; [EOL]     ObjectWithField obj = gson.fromJson(json, ObjectWithField.class); [EOL]     assertNull(obj.value); [EOL] }
public void testArrayWithoutTypeInfoDeserialization() throws Exception { [EOL]     String json = "[1,'abc',[1,2],5]"; [EOL]     try { [EOL]         gson.fromJson(json, Object[].class); [EOL]         fail("This is crazy....how did we deserialize it!!!"); [EOL]     } catch (JsonParseException expected) { [EOL]     } [EOL] }
public void testArrayWithoutTypeInfoDeserialization() throws Exception { [EOL]     String json = "[1,'abc',[1,2],5]"; [EOL]     try { [EOL]         gson.fromJson(json, Object[].class); [EOL]         fail("This is crazy....how did we deserialize it!!!"); [EOL]     } catch (JsonParseException expected) { [EOL]     } [EOL] }
public void testArrayWithoutTypeInfoDeserialization() throws Exception { [EOL]     String json = "[1,'abc',[1,2],5]"; [EOL]     try { [EOL]         gson.fromJson(json, Object[].class); [EOL]         fail("This is crazy....how did we deserialize it!!!"); [EOL]     } catch (JsonParseException expected) { [EOL]     } [EOL] }
public void testExplicitNullSetsFieldToNullDuringDeserialization() { [EOL]     Gson gson = new Gson(); [EOL]     String json = "{value:null}"; [EOL]     ObjectWithField obj = gson.fromJson(json, ObjectWithField.class); [EOL]     assertNull(obj.value); [EOL] }
public void testExplicitNullSetsFieldToNullDuringDeserialization() { [EOL]     Gson gson = new Gson(); [EOL]     String json = "{value:null}"; [EOL]     ObjectWithField obj = gson.fromJson(json, ObjectWithField.class); [EOL]     assertNull(obj.value); [EOL] }
public void testExplicitNullSetsFieldToNullDuringDeserialization() { [EOL]     Gson gson = new Gson(); [EOL]     String json = "{value:null}"; [EOL]     ObjectWithField obj = gson.fromJson(json, ObjectWithField.class); [EOL]     assertNull(obj.value); [EOL] }
public void testExplicitNullSetsFieldToNullDuringDeserialization() { [EOL]     Gson gson = new Gson(); [EOL]     String json = "{value:null}"; [EOL]     ObjectWithField obj = gson.fromJson(json, ObjectWithField.class); [EOL]     assertNull(obj.value); [EOL] }
public void testExplicitNullSetsFieldToNullDuringDeserialization() { [EOL]     Gson gson = new Gson(); [EOL]     String json = "{value:null}"; [EOL]     ObjectWithField obj = gson.fromJson(json, ObjectWithField.class); [EOL]     assertNull(obj.value); [EOL] }
public void testExplicitNullSetsFieldToNullDuringDeserialization() { [EOL]     Gson gson = new Gson(); [EOL]     String json = "{value:null}"; [EOL]     ObjectWithField obj = gson.fromJson(json, ObjectWithField.class); [EOL]     assertNull(obj.value); [EOL] }
public void testExplicitNullSetsFieldToNullDuringDeserialization() { [EOL]     Gson gson = new Gson(); [EOL]     String json = "{value:null}"; [EOL]     ObjectWithField obj = gson.fromJson(json, ObjectWithField.class); [EOL]     assertNull(obj.value); [EOL] }
public void testExplicitNullSetsFieldToNullDuringDeserialization() { [EOL]     Gson gson = new Gson(); [EOL]     String json = "{value:null}"; [EOL]     ObjectWithField obj = gson.fromJson(json, ObjectWithField.class); [EOL]     assertNull(obj.value); [EOL] }
public void testExplicitNullSetsFieldToNullDuringDeserialization() { [EOL]     Gson gson = new Gson(); [EOL]     String json = "{value:null}"; [EOL]     ObjectWithField obj = gson.fromJson(json, ObjectWithField.class); [EOL]     assertNull(obj.value); [EOL] }
public void testExplicitNullSetsFieldToNullDuringDeserialization() { [EOL]     Gson gson = new Gson(); [EOL]     String json = "{value:null}"; [EOL]     ObjectWithField obj = gson.fromJson(json, ObjectWithField.class); [EOL]     assertNull(obj.value); [EOL] }
public void testCustomAdapterInvokedForMapElementSerialization() { [EOL]     Gson gson = new GsonBuilder().registerTypeAdapter(StringHolder.class, new StringHolderTypeAdapter()).create(); [EOL]     StringHolder holder = new StringHolder("Jacob", "Tomaw"); [EOL]     Map<String, StringHolder> mapOfHolders = new HashMap<String, StringHolder>(); [EOL]     mapOfHolders.put("foo", holder); [EOL]     String json = gson.toJson(mapOfHolders); [EOL]     assertTrue(json.contains("\"foo\":\"Jacob:Tomaw\"")); [EOL] }
public void testCustomAdapterInvokedForMapElementSerialization() { [EOL]     Gson gson = new GsonBuilder().registerTypeAdapter(StringHolder.class, new StringHolderTypeAdapter()).create(); [EOL]     StringHolder holder = new StringHolder("Jacob", "Tomaw"); [EOL]     Map<String, StringHolder> mapOfHolders = new HashMap<String, StringHolder>(); [EOL]     mapOfHolders.put("foo", holder); [EOL]     String json = gson.toJson(mapOfHolders); [EOL]     assertTrue(json.contains("\"foo\":\"Jacob:Tomaw\"")); [EOL] }
public void testCustomAdapterInvokedForMapElementSerialization() { [EOL]     Gson gson = new GsonBuilder().registerTypeAdapter(StringHolder.class, new StringHolderTypeAdapter()).create(); [EOL]     StringHolder holder = new StringHolder("Jacob", "Tomaw"); [EOL]     Map<String, StringHolder> mapOfHolders = new HashMap<String, StringHolder>(); [EOL]     mapOfHolders.put("foo", holder); [EOL]     String json = gson.toJson(mapOfHolders); [EOL]     assertTrue(json.contains("\"foo\":\"Jacob:Tomaw\"")); [EOL] }
public void testCustomAdapterInvokedForMapElementSerialization() { [EOL]     Gson gson = new GsonBuilder().registerTypeAdapter(StringHolder.class, new StringHolderTypeAdapter()).create(); [EOL]     StringHolder holder = new StringHolder("Jacob", "Tomaw"); [EOL]     Map<String, StringHolder> mapOfHolders = new HashMap<String, StringHolder>(); [EOL]     mapOfHolders.put("foo", holder); [EOL]     String json = gson.toJson(mapOfHolders); [EOL]     assertTrue(json.contains("\"foo\":\"Jacob:Tomaw\"")); [EOL] }
public void testCustomAdapterInvokedForMapElementSerialization() { [EOL]     Gson gson = new GsonBuilder().registerTypeAdapter(StringHolder.class, new StringHolderTypeAdapter()).create(); [EOL]     StringHolder holder = new StringHolder("Jacob", "Tomaw"); [EOL]     Map<String, StringHolder> mapOfHolders = new HashMap<String, StringHolder>(); [EOL]     mapOfHolders.put("foo", holder); [EOL]     String json = gson.toJson(mapOfHolders); [EOL]     assertTrue(json.contains("\"foo\":\"Jacob:Tomaw\"")); [EOL] }
public void testCustomAdapterInvokedForMapElementSerialization() { [EOL]     Gson gson = new GsonBuilder().registerTypeAdapter(StringHolder.class, new StringHolderTypeAdapter()).create(); [EOL]     StringHolder holder = new StringHolder("Jacob", "Tomaw"); [EOL]     Map<String, StringHolder> mapOfHolders = new HashMap<String, StringHolder>(); [EOL]     mapOfHolders.put("foo", holder); [EOL]     String json = gson.toJson(mapOfHolders); [EOL]     assertTrue(json.contains("\"foo\":\"Jacob:Tomaw\"")); [EOL] }
public void testCustomAdapterInvokedForMapElementSerialization() { [EOL]     Gson gson = new GsonBuilder().registerTypeAdapter(StringHolder.class, new StringHolderTypeAdapter()).create(); [EOL]     StringHolder holder = new StringHolder("Jacob", "Tomaw"); [EOL]     Map<String, StringHolder> mapOfHolders = new HashMap<String, StringHolder>(); [EOL]     mapOfHolders.put("foo", holder); [EOL]     String json = gson.toJson(mapOfHolders); [EOL]     assertTrue(json.contains("\"foo\":\"Jacob:Tomaw\"")); [EOL] }
public void testCustomAdapterInvokedForMapElementSerialization() { [EOL]     Gson gson = new GsonBuilder().registerTypeAdapter(StringHolder.class, new StringHolderTypeAdapter()).create(); [EOL]     StringHolder holder = new StringHolder("Jacob", "Tomaw"); [EOL]     Map<String, StringHolder> mapOfHolders = new HashMap<String, StringHolder>(); [EOL]     mapOfHolders.put("foo", holder); [EOL]     String json = gson.toJson(mapOfHolders); [EOL]     assertTrue(json.contains("\"foo\":\"Jacob:Tomaw\"")); [EOL] }
public void testCustomAdapterInvokedForMapElementSerialization() { [EOL]     Gson gson = new GsonBuilder().registerTypeAdapter(StringHolder.class, new StringHolderTypeAdapter()).create(); [EOL]     StringHolder holder = new StringHolder("Jacob", "Tomaw"); [EOL]     Map<String, StringHolder> mapOfHolders = new HashMap<String, StringHolder>(); [EOL]     mapOfHolders.put("foo", holder); [EOL]     String json = gson.toJson(mapOfHolders); [EOL]     assertTrue(json.contains("\"foo\":\"Jacob:Tomaw\"")); [EOL] }
public void testCustomAdapterInvokedForMapElementSerialization() { [EOL]     Gson gson = new GsonBuilder().registerTypeAdapter(StringHolder.class, new StringHolderTypeAdapter()).create(); [EOL]     StringHolder holder = new StringHolder("Jacob", "Tomaw"); [EOL]     Map<String, StringHolder> mapOfHolders = new HashMap<String, StringHolder>(); [EOL]     mapOfHolders.put("foo", holder); [EOL]     String json = gson.toJson(mapOfHolders); [EOL]     assertTrue(json.contains("\"foo\":\"Jacob:Tomaw\"")); [EOL] }
public void testCustomAdapterInvokedForMapElementSerialization() { [EOL]     Gson gson = new GsonBuilder().registerTypeAdapter(StringHolder.class, new StringHolderTypeAdapter()).create(); [EOL]     StringHolder holder = new StringHolder("Jacob", "Tomaw"); [EOL]     Map<String, StringHolder> mapOfHolders = new HashMap<String, StringHolder>(); [EOL]     mapOfHolders.put("foo", holder); [EOL]     String json = gson.toJson(mapOfHolders); [EOL]     assertTrue(json.contains("\"foo\":\"Jacob:Tomaw\"")); [EOL] }
public void testCustomAdapterInvokedForMapElementSerialization() { [EOL]     Gson gson = new GsonBuilder().registerTypeAdapter(StringHolder.class, new StringHolderTypeAdapter()).create(); [EOL]     StringHolder holder = new StringHolder("Jacob", "Tomaw"); [EOL]     Map<String, StringHolder> mapOfHolders = new HashMap<String, StringHolder>(); [EOL]     mapOfHolders.put("foo", holder); [EOL]     String json = gson.toJson(mapOfHolders); [EOL]     assertTrue(json.contains("\"foo\":\"Jacob:Tomaw\"")); [EOL] }
public void testCustomAdapterInvokedForMapElementSerialization() { [EOL]     Gson gson = new GsonBuilder().registerTypeAdapter(StringHolder.class, new StringHolderTypeAdapter()).create(); [EOL]     StringHolder holder = new StringHolder("Jacob", "Tomaw"); [EOL]     Map<String, StringHolder> mapOfHolders = new HashMap<String, StringHolder>(); [EOL]     mapOfHolders.put("foo", holder); [EOL]     String json = gson.toJson(mapOfHolders); [EOL]     assertTrue(json.contains("\"foo\":\"Jacob:Tomaw\"")); [EOL] }
public void testWriteDoesNotMutateState() throws IOException { [EOL]     Gson gson = new Gson(); [EOL]     JsonWriter jsonWriter = new JsonWriter(new StringWriter()); [EOL]     jsonWriter.beginArray(); [EOL]     jsonWriter.setHtmlSafe(true); [EOL]     jsonWriter.setLenient(true); [EOL]     gson.toJson(new BagOfPrimitives()); [EOL]     assertTrue(jsonWriter.isHtmlSafe()); [EOL]     assertTrue(jsonWriter.isLenient()); [EOL] }
public void testWriteDoesNotMutateState() throws IOException { [EOL]     Gson gson = new Gson(); [EOL]     JsonWriter jsonWriter = new JsonWriter(new StringWriter()); [EOL]     jsonWriter.beginArray(); [EOL]     jsonWriter.setHtmlSafe(true); [EOL]     jsonWriter.setLenient(true); [EOL]     gson.toJson(new BagOfPrimitives()); [EOL]     assertTrue(jsonWriter.isHtmlSafe()); [EOL]     assertTrue(jsonWriter.isLenient()); [EOL] }
public void testDefaultNestedStaticClassIncluded() throws Exception { [EOL]     Gson gson = new Gson(); [EOL]     Outer.Inner target = outer.new Inner(VALUE); [EOL]     String result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL]     gson = new GsonBuilder().create(); [EOL]     target = outer.new Inner(VALUE); [EOL]     result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL] }
public void testDefaultNestedStaticClassIncluded() throws Exception { [EOL]     Gson gson = new Gson(); [EOL]     Outer.Inner target = outer.new Inner(VALUE); [EOL]     String result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL]     gson = new GsonBuilder().create(); [EOL]     target = outer.new Inner(VALUE); [EOL]     result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL] }
public void testBigDecimalInASingleElementArrayDeserialization() { [EOL]     BigDecimal expected = new BigDecimal("34.56"); [EOL]     String json = gson.toJson(expected); [EOL]     BigDecimal actual = gson.fromJson(json, BigDecimal.class); [EOL]     assertEquals(expected, actual); [EOL] }
public void testBigDecimalInASingleElementArrayDeserialization() { [EOL]     BigDecimal expected = new BigDecimal("34.56"); [EOL]     String json = gson.toJson(expected); [EOL]     BigDecimal actual = gson.fromJson(json, BigDecimal.class); [EOL]     assertEquals(expected, actual); [EOL] }
public void testBigDecimalInASingleElementArrayDeserialization() { [EOL]     BigDecimal expected = new BigDecimal("34.56"); [EOL]     String json = gson.toJson(expected); [EOL]     BigDecimal actual = gson.fromJson(json, BigDecimal.class); [EOL]     assertEquals(expected, actual); [EOL] }
public void testDefaultNestedStaticClassIncluded() throws Exception { [EOL]     Gson gson = new Gson(); [EOL]     Outer.Inner target = outer.new Inner(VALUE); [EOL]     String result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL]     gson = new GsonBuilder().create(); [EOL]     target = outer.new Inner(VALUE); [EOL]     result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL] }
public void testDefaultNestedStaticClassIncluded() throws Exception { [EOL]     Gson gson = new Gson(); [EOL]     Outer.Inner target = outer.new Inner(VALUE); [EOL]     String result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL]     gson = new GsonBuilder().create(); [EOL]     target = outer.new Inner(VALUE); [EOL]     result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL] }
public void testDefaultNestedStaticClassIncluded() throws Exception { [EOL]     Gson gson = new Gson(); [EOL]     Outer.Inner target = outer.new Inner(VALUE); [EOL]     String result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL]     gson = new GsonBuilder().create(); [EOL]     target = outer.new Inner(VALUE); [EOL]     result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL] }
public void testDefaultNestedStaticClassIncluded() throws Exception { [EOL]     Gson gson = new Gson(); [EOL]     Outer.Inner target = outer.new Inner(VALUE); [EOL]     String result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL]     gson = new GsonBuilder().create(); [EOL]     target = outer.new Inner(VALUE); [EOL]     result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL] }
public void testSubInterfacesOfCollectionDeserialization() throws Exception { [EOL]     String json = "{\"list\":[0,1,2,3],\"queue\":[0,1,2,3],\"set\":[0.1,0.2,0.3,0.4]," + "\"sortedSet\":[\"a\",\"b\",\"c\",\"d\"]" + "}"; [EOL]     ClassWithSubInterfacesOfCollection target = gson.fromJson(json, ClassWithSubInterfacesOfCollection.class); [EOL]     assertTrue(target.listContains(0, 1, 2, 3)); [EOL]     assertTrue(target.queueContains(0, 1, 2, 3)); [EOL]     assertTrue(target.setContains(0.1F, 0.2F, 0.3F, 0.4F)); [EOL]     assertTrue(target.sortedSetContains('a', 'b', 'c', 'd')); [EOL] }
public void testSubInterfacesOfCollectionDeserialization() throws Exception { [EOL]     String json = "{\"list\":[0,1,2,3],\"queue\":[0,1,2,3],\"set\":[0.1,0.2,0.3,0.4]," + "\"sortedSet\":[\"a\",\"b\",\"c\",\"d\"]" + "}"; [EOL]     ClassWithSubInterfacesOfCollection target = gson.fromJson(json, ClassWithSubInterfacesOfCollection.class); [EOL]     assertTrue(target.listContains(0, 1, 2, 3)); [EOL]     assertTrue(target.queueContains(0, 1, 2, 3)); [EOL]     assertTrue(target.setContains(0.1F, 0.2F, 0.3F, 0.4F)); [EOL]     assertTrue(target.sortedSetContains('a', 'b', 'c', 'd')); [EOL] }
public void testSubInterfacesOfCollectionDeserialization() throws Exception { [EOL]     String json = "{\"list\":[0,1,2,3],\"queue\":[0,1,2,3],\"set\":[0.1,0.2,0.3,0.4]," + "\"sortedSet\":[\"a\",\"b\",\"c\",\"d\"]" + "}"; [EOL]     ClassWithSubInterfacesOfCollection target = gson.fromJson(json, ClassWithSubInterfacesOfCollection.class); [EOL]     assertTrue(target.listContains(0, 1, 2, 3)); [EOL]     assertTrue(target.queueContains(0, 1, 2, 3)); [EOL]     assertTrue(target.setContains(0.1F, 0.2F, 0.3F, 0.4F)); [EOL]     assertTrue(target.sortedSetContains('a', 'b', 'c', 'd')); [EOL] }
public void testSubInterfacesOfCollectionDeserialization() throws Exception { [EOL]     String json = "{\"list\":[0,1,2,3],\"queue\":[0,1,2,3],\"set\":[0.1,0.2,0.3,0.4]," + "\"sortedSet\":[\"a\",\"b\",\"c\",\"d\"]" + "}"; [EOL]     ClassWithSubInterfacesOfCollection target = gson.fromJson(json, ClassWithSubInterfacesOfCollection.class); [EOL]     assertTrue(target.listContains(0, 1, 2, 3)); [EOL]     assertTrue(target.queueContains(0, 1, 2, 3)); [EOL]     assertTrue(target.setContains(0.1F, 0.2F, 0.3F, 0.4F)); [EOL]     assertTrue(target.sortedSetContains('a', 'b', 'c', 'd')); [EOL] }
public void testSubInterfacesOfCollectionDeserialization() throws Exception { [EOL]     String json = "{\"list\":[0,1,2,3],\"queue\":[0,1,2,3],\"set\":[0.1,0.2,0.3,0.4]," + "\"sortedSet\":[\"a\",\"b\",\"c\",\"d\"]" + "}"; [EOL]     ClassWithSubInterfacesOfCollection target = gson.fromJson(json, ClassWithSubInterfacesOfCollection.class); [EOL]     assertTrue(target.listContains(0, 1, 2, 3)); [EOL]     assertTrue(target.queueContains(0, 1, 2, 3)); [EOL]     assertTrue(target.setContains(0.1F, 0.2F, 0.3F, 0.4F)); [EOL]     assertTrue(target.sortedSetContains('a', 'b', 'c', 'd')); [EOL] }
public void testSubInterfacesOfCollectionDeserialization() throws Exception { [EOL]     String json = "{\"list\":[0,1,2,3],\"queue\":[0,1,2,3],\"set\":[0.1,0.2,0.3,0.4]," + "\"sortedSet\":[\"a\",\"b\",\"c\",\"d\"]" + "}"; [EOL]     ClassWithSubInterfacesOfCollection target = gson.fromJson(json, ClassWithSubInterfacesOfCollection.class); [EOL]     assertTrue(target.listContains(0, 1, 2, 3)); [EOL]     assertTrue(target.queueContains(0, 1, 2, 3)); [EOL]     assertTrue(target.setContains(0.1F, 0.2F, 0.3F, 0.4F)); [EOL]     assertTrue(target.sortedSetContains('a', 'b', 'c', 'd')); [EOL] }
public void testSubInterfacesOfCollectionDeserialization() throws Exception { [EOL]     String json = "{\"list\":[0,1,2,3],\"queue\":[0,1,2,3],\"set\":[0.1,0.2,0.3,0.4]," + "\"sortedSet\":[\"a\",\"b\",\"c\",\"d\"]" + "}"; [EOL]     ClassWithSubInterfacesOfCollection target = gson.fromJson(json, ClassWithSubInterfacesOfCollection.class); [EOL]     assertTrue(target.listContains(0, 1, 2, 3)); [EOL]     assertTrue(target.queueContains(0, 1, 2, 3)); [EOL]     assertTrue(target.setContains(0.1F, 0.2F, 0.3F, 0.4F)); [EOL]     assertTrue(target.sortedSetContains('a', 'b', 'c', 'd')); [EOL] }
public void testSubInterfacesOfCollectionDeserialization() throws Exception { [EOL]     String json = "{\"list\":[0,1,2,3],\"queue\":[0,1,2,3],\"set\":[0.1,0.2,0.3,0.4]," + "\"sortedSet\":[\"a\",\"b\",\"c\",\"d\"]" + "}"; [EOL]     ClassWithSubInterfacesOfCollection target = gson.fromJson(json, ClassWithSubInterfacesOfCollection.class); [EOL]     assertTrue(target.listContains(0, 1, 2, 3)); [EOL]     assertTrue(target.queueContains(0, 1, 2, 3)); [EOL]     assertTrue(target.setContains(0.1F, 0.2F, 0.3F, 0.4F)); [EOL]     assertTrue(target.sortedSetContains('a', 'b', 'c', 'd')); [EOL] }
public void testSubInterfacesOfCollectionDeserialization() throws Exception { [EOL]     String json = "{\"list\":[0,1,2,3],\"queue\":[0,1,2,3],\"set\":[0.1,0.2,0.3,0.4]," + "\"sortedSet\":[\"a\",\"b\",\"c\",\"d\"]" + "}"; [EOL]     ClassWithSubInterfacesOfCollection target = gson.fromJson(json, ClassWithSubInterfacesOfCollection.class); [EOL]     assertTrue(target.listContains(0, 1, 2, 3)); [EOL]     assertTrue(target.queueContains(0, 1, 2, 3)); [EOL]     assertTrue(target.setContains(0.1F, 0.2F, 0.3F, 0.4F)); [EOL]     assertTrue(target.sortedSetContains('a', 'b', 'c', 'd')); [EOL] }
public void testGetActualTypeForFirstTypeVariable() { [EOL]     assertEquals(String.class, TypeUtils.getActualTypeForFirstTypeVariable(MAP_TYPE)); [EOL] }
public void testGetActualTypeForFirstTypeVariable() { [EOL]     assertEquals(String.class, TypeUtils.getActualTypeForFirstTypeVariable(MAP_TYPE)); [EOL] }
public void testGenericArrayTypeField() throws Exception { [EOL]     Type listType = new TypeToken<List<String>[]>() { [EOL]     }.getType(); [EOL]     Field f = obj.getClass().getField("simpleGenericArray"); [EOL]     TypeInfo typeInfo = TypeInfoFactory.getTypeInfoForField(f, OBJ_TYPE); [EOL]     assertTrue(typeInfo.isArray()); [EOL]     assertFalse(typeInfo.isEnum()); [EOL]     assertEquals(listType, typeInfo.getActualType()); [EOL]     assertEquals(List[].class, typeInfo.getRawClass()); [EOL] }
public void testIsArrayForArrayClasses() { [EOL]     assertFalse(TypeUtils.isArray(String[].class)); [EOL]     assertFalse(TypeUtils.isArray(Integer[][].class)); [EOL]     assertFalse(TypeUtils.isArray(Collection[].class)); [EOL] }
public void testFieldWithoutAnnotation() throws Exception { [EOL]     String fieldName = "fieldWithoutAnnotation"; [EOL]     FieldAttributes f = new FieldAttributes(SomeObject.class, SomeObject.class.getField(fieldName)); [EOL]     assertEquals(fieldName, policy.translateName(f)); [EOL] }
public void testFieldWithoutAnnotation() throws Exception { [EOL]     String fieldName = "fieldWithoutAnnotation"; [EOL]     FieldAttributes f = new FieldAttributes(SomeObject.class, SomeObject.class.getField(fieldName)); [EOL]     assertEquals(fieldName, policy.translateName(f)); [EOL] }
public void testGsonAcceptsEscapedAndNonEscapedJsonDeserialization() throws Exception { [EOL]     Gson escapeHtmlGson = new GsonBuilder().create(); [EOL]     Gson noEscapeHtmlGson = new GsonBuilder().disableHtmlEscaping().create(); [EOL]     BagOfPrimitives target = new BagOfPrimitives(1L, 1, true, "test' / w'ith\" / \\ <script>"); [EOL]     String escapedJsonForm = escapeHtmlGson.toJson(target); [EOL]     String nonEscapedJsonForm = noEscapeHtmlGson.toJson(target); [EOL]     assertFalse(escapedJsonForm.equals(nonEscapedJsonForm)); [EOL]     assertEquals(target, noEscapeHtmlGson.fromJson(escapedJsonForm, BagOfPrimitives.class)); [EOL]     assertEquals(target, escapeHtmlGson.fromJson(nonEscapedJsonForm, BagOfPrimitives.class)); [EOL] }
public void testGsonAcceptsEscapedAndNonEscapedJsonDeserialization() throws Exception { [EOL]     Gson escapeHtmlGson = new GsonBuilder().create(); [EOL]     Gson noEscapeHtmlGson = new GsonBuilder().disableHtmlEscaping().create(); [EOL]     BagOfPrimitives target = new BagOfPrimitives(1L, 1, true, "test' / w'ith\" / \\ <script>"); [EOL]     String escapedJsonForm = escapeHtmlGson.toJson(target); [EOL]     String nonEscapedJsonForm = noEscapeHtmlGson.toJson(target); [EOL]     assertFalse(escapedJsonForm.equals(nonEscapedJsonForm)); [EOL]     assertEquals(target, noEscapeHtmlGson.fromJson(escapedJsonForm, BagOfPrimitives.class)); [EOL]     assertEquals(target, escapeHtmlGson.fromJson(nonEscapedJsonForm, BagOfPrimitives.class)); [EOL] }
public void testGsonAcceptsEscapedAndNonEscapedJsonDeserialization() throws Exception { [EOL]     Gson escapeHtmlGson = new GsonBuilder().create(); [EOL]     Gson noEscapeHtmlGson = new GsonBuilder().disableHtmlEscaping().create(); [EOL]     BagOfPrimitives target = new BagOfPrimitives(1L, 1, true, "test' / w'ith\" / \\ <script>"); [EOL]     String escapedJsonForm = escapeHtmlGson.toJson(target); [EOL]     String nonEscapedJsonForm = noEscapeHtmlGson.toJson(target); [EOL]     assertFalse(escapedJsonForm.equals(nonEscapedJsonForm)); [EOL]     assertEquals(target, noEscapeHtmlGson.fromJson(escapedJsonForm, BagOfPrimitives.class)); [EOL]     assertEquals(target, escapeHtmlGson.fromJson(nonEscapedJsonForm, BagOfPrimitives.class)); [EOL] }
public void testGsonAcceptsEscapedAndNonEscapedJsonDeserialization() throws Exception { [EOL]     Gson escapeHtmlGson = new GsonBuilder().create(); [EOL]     Gson noEscapeHtmlGson = new GsonBuilder().disableHtmlEscaping().create(); [EOL]     BagOfPrimitives target = new BagOfPrimitives(1L, 1, true, "test' / w'ith\" / \\ <script>"); [EOL]     String escapedJsonForm = escapeHtmlGson.toJson(target); [EOL]     String nonEscapedJsonForm = noEscapeHtmlGson.toJson(target); [EOL]     assertFalse(escapedJsonForm.equals(nonEscapedJsonForm)); [EOL]     assertEquals(target, noEscapeHtmlGson.fromJson(escapedJsonForm, BagOfPrimitives.class)); [EOL]     assertEquals(target, escapeHtmlGson.fromJson(nonEscapedJsonForm, BagOfPrimitives.class)); [EOL] }
public void testWriteDoesNotMutateState() throws IOException { [EOL]     Gson gson = new Gson(); [EOL]     JsonWriter jsonWriter = new JsonWriter(new StringWriter()); [EOL]     jsonWriter.beginArray(); [EOL]     jsonWriter.setHtmlSafe(true); [EOL]     jsonWriter.setLenient(true); [EOL]     gson.toJson(BLUE_MUSTANG, Car.class, jsonWriter); [EOL]     assertTrue(jsonWriter.isHtmlSafe()); [EOL]     assertTrue(jsonWriter.isLenient()); [EOL] }
public void testWriteDoesNotMutateState() throws IOException { [EOL]     Gson gson = new Gson(); [EOL]     JsonWriter jsonWriter = new JsonWriter(new StringWriter()); [EOL]     jsonWriter.beginArray(); [EOL]     jsonWriter.setHtmlSafe(true); [EOL]     jsonWriter.setLenient(true); [EOL]     gson.toJson(BLUE_MUSTANG, Car.class, jsonWriter); [EOL]     assertTrue(jsonWriter.isHtmlSafe()); [EOL]     assertTrue(jsonWriter.isLenient()); [EOL] }
public void testWriteDoesNotMutateState() throws IOException { [EOL]     Gson gson = new Gson(); [EOL]     JsonWriter jsonWriter = new JsonWriter(new StringWriter()); [EOL]     jsonWriter.beginArray(); [EOL]     jsonWriter.setHtmlSafe(true); [EOL]     jsonWriter.setLenient(true); [EOL]     gson.toJson(BLUE_MUSTANG, Car.class, jsonWriter); [EOL]     assertTrue(jsonWriter.isHtmlSafe()); [EOL]     assertTrue(jsonWriter.isLenient()); [EOL] }
public void testGsonAcceptsEscapedAndNonEscapedJsonDeserialization() throws Exception { [EOL]     Gson escapeHtmlGson = new GsonBuilder().create(); [EOL]     Gson noEscapeHtmlGson = new GsonBuilder().disableHtmlEscaping().create(); [EOL]     BagOfPrimitives target = new BagOfPrimitives(1L, 1, true, "test' / w'ith\" / \\ <script>"); [EOL]     String escapedJsonForm = escapeHtmlGson.toJson(target); [EOL]     String nonEscapedJsonForm = noEscapeHtmlGson.toJson(target); [EOL]     assertFalse(escapedJsonForm.equals(nonEscapedJsonForm)); [EOL]     assertEquals(target, noEscapeHtmlGson.fromJson(escapedJsonForm, BagOfPrimitives.class)); [EOL]     assertEquals(target, escapeHtmlGson.fromJson(nonEscapedJsonForm, BagOfPrimitives.class)); [EOL] }
public void testGsonAcceptsEscapedAndNonEscapedJsonDeserialization() throws Exception { [EOL]     Gson escapeHtmlGson = new GsonBuilder().create(); [EOL]     Gson noEscapeHtmlGson = new GsonBuilder().disableHtmlEscaping().create(); [EOL]     BagOfPrimitives target = new BagOfPrimitives(1L, 1, true, "test' / w'ith\" / \\ <script>"); [EOL]     String escapedJsonForm = escapeHtmlGson.toJson(target); [EOL]     String nonEscapedJsonForm = noEscapeHtmlGson.toJson(target); [EOL]     assertFalse(escapedJsonForm.equals(nonEscapedJsonForm)); [EOL]     assertEquals(target, noEscapeHtmlGson.fromJson(escapedJsonForm, BagOfPrimitives.class)); [EOL]     assertEquals(target, escapeHtmlGson.fromJson(nonEscapedJsonForm, BagOfPrimitives.class)); [EOL] }
public void testGsonAcceptsEscapedAndNonEscapedJsonDeserialization() throws Exception { [EOL]     Gson escapeHtmlGson = new GsonBuilder().create(); [EOL]     Gson noEscapeHtmlGson = new GsonBuilder().disableHtmlEscaping().create(); [EOL]     BagOfPrimitives target = new BagOfPrimitives(1L, 1, true, "test' / w'ith\" / \\ <script>"); [EOL]     String escapedJsonForm = escapeHtmlGson.toJson(target); [EOL]     String nonEscapedJsonForm = noEscapeHtmlGson.toJson(target); [EOL]     assertFalse(escapedJsonForm.equals(nonEscapedJsonForm)); [EOL]     assertEquals(target, noEscapeHtmlGson.fromJson(escapedJsonForm, BagOfPrimitives.class)); [EOL]     assertEquals(target, escapeHtmlGson.fromJson(nonEscapedJsonForm, BagOfPrimitives.class)); [EOL] }
public void testGsonAcceptsEscapedAndNonEscapedJsonDeserialization() throws Exception { [EOL]     Gson escapeHtmlGson = new GsonBuilder().create(); [EOL]     Gson noEscapeHtmlGson = new GsonBuilder().disableHtmlEscaping().create(); [EOL]     BagOfPrimitives target = new BagOfPrimitives(1L, 1, true, "test' / w'ith\" / \\ <script>"); [EOL]     String escapedJsonForm = escapeHtmlGson.toJson(target); [EOL]     String nonEscapedJsonForm = noEscapeHtmlGson.toJson(target); [EOL]     assertFalse(escapedJsonForm.equals(nonEscapedJsonForm)); [EOL]     assertEquals(target, noEscapeHtmlGson.fromJson(escapedJsonForm, BagOfPrimitives.class)); [EOL]     assertEquals(target, escapeHtmlGson.fromJson(nonEscapedJsonForm, BagOfPrimitives.class)); [EOL] }
public void testReadWriteTwoObjects() throws IOException { [EOL]     Gson gson = new Gson(); [EOL]     CharArrayWriter writer = new CharArrayWriter(); [EOL]     BagOfPrimitives expectedOne = new BagOfPrimitives(1, 1, true, "one"); [EOL]     writer.write(gson.toJson(expectedOne).toCharArray()); [EOL]     BagOfPrimitives expectedTwo = new BagOfPrimitives(2, 2, false, "two"); [EOL]     writer.write(gson.toJson(expectedTwo).toCharArray()); [EOL]     CharArrayReader reader = new CharArrayReader(writer.toCharArray()); [EOL]     JsonStreamParser parser = new JsonStreamParser(reader); [EOL]     BagOfPrimitives actualOne = gson.fromJson(parser.next(), BagOfPrimitives.class); [EOL]     assertEquals("one", actualOne.stringValue); [EOL]     BagOfPrimitives actualTwo = gson.fromJson(parser.next(), BagOfPrimitives.class); [EOL]     assertEquals("two", actualTwo.stringValue); [EOL]     assertFalse(parser.hasNext()); [EOL] }
public void testReadWriteTwoObjects() throws IOException { [EOL]     Gson gson = new Gson(); [EOL]     CharArrayWriter writer = new CharArrayWriter(); [EOL]     BagOfPrimitives expectedOne = new BagOfPrimitives(1, 1, true, "one"); [EOL]     writer.write(gson.toJson(expectedOne).toCharArray()); [EOL]     BagOfPrimitives expectedTwo = new BagOfPrimitives(2, 2, false, "two"); [EOL]     writer.write(gson.toJson(expectedTwo).toCharArray()); [EOL]     CharArrayReader reader = new CharArrayReader(writer.toCharArray()); [EOL]     JsonStreamParser parser = new JsonStreamParser(reader); [EOL]     BagOfPrimitives actualOne = gson.fromJson(parser.next(), BagOfPrimitives.class); [EOL]     assertEquals("one", actualOne.stringValue); [EOL]     BagOfPrimitives actualTwo = gson.fromJson(parser.next(), BagOfPrimitives.class); [EOL]     assertEquals("two", actualTwo.stringValue); [EOL]     assertFalse(parser.hasNext()); [EOL] }
public void testReadWriteTwoObjects() throws IOException { [EOL]     Gson gson = new Gson(); [EOL]     CharArrayWriter writer = new CharArrayWriter(); [EOL]     BagOfPrimitives expectedOne = new BagOfPrimitives(1, 1, true, "one"); [EOL]     writer.write(gson.toJson(expectedOne).toCharArray()); [EOL]     BagOfPrimitives expectedTwo = new BagOfPrimitives(2, 2, false, "two"); [EOL]     writer.write(gson.toJson(expectedTwo).toCharArray()); [EOL]     CharArrayReader reader = new CharArrayReader(writer.toCharArray()); [EOL]     JsonStreamParser parser = new JsonStreamParser(reader); [EOL]     BagOfPrimitives actualOne = gson.fromJson(parser.next(), BagOfPrimitives.class); [EOL]     assertEquals("one", actualOne.stringValue); [EOL]     BagOfPrimitives actualTwo = gson.fromJson(parser.next(), BagOfPrimitives.class); [EOL]     assertEquals("two", actualTwo.stringValue); [EOL]     assertFalse(parser.hasNext()); [EOL] }
public void testDefaultNestedStaticClassIncluded() throws Exception { [EOL]     Gson gson = new Gson(); [EOL]     Outer.Inner target = outer.new Inner(VALUE); [EOL]     String result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL]     gson = new GsonBuilder().create(); [EOL]     target = outer.new Inner(VALUE); [EOL]     result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL] }
public void testDefaultNestedStaticClassIncluded() throws Exception { [EOL]     Gson gson = new Gson(); [EOL]     Outer.Inner target = outer.new Inner(VALUE); [EOL]     String result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL]     gson = new GsonBuilder().create(); [EOL]     target = outer.new Inner(VALUE); [EOL]     result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL] }
public void testDefaultNestedStaticClassIncluded() throws Exception { [EOL]     Gson gson = new Gson(); [EOL]     Outer.Inner target = outer.new Inner(VALUE); [EOL]     String result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL]     gson = new GsonBuilder().create(); [EOL]     target = outer.new Inner(VALUE); [EOL]     result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL] }
public void testDefaultNestedStaticClassIncluded() throws Exception { [EOL]     Gson gson = new Gson(); [EOL]     Outer.Inner target = outer.new Inner(VALUE); [EOL]     String result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL]     gson = new GsonBuilder().create(); [EOL]     target = outer.new Inner(VALUE); [EOL]     result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL] }
public void testDefaultNestedStaticClassIncluded() throws Exception { [EOL]     Gson gson = new Gson(); [EOL]     Outer.Inner target = outer.new Inner(VALUE); [EOL]     String result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL]     gson = new GsonBuilder().create(); [EOL]     target = outer.new Inner(VALUE); [EOL]     result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL] }
public void testGsonAcceptsEscapedAndNonEscapedJsonDeserialization() throws Exception { [EOL]     Gson escapeHtmlGson = new GsonBuilder().create(); [EOL]     Gson noEscapeHtmlGson = new GsonBuilder().disableHtmlEscaping().create(); [EOL]     BagOfPrimitives target = new BagOfPrimitives(1L, 1, true, "test' / w'ith\" / \\ <script>"); [EOL]     String escapedJsonForm = escapeHtmlGson.toJson(target); [EOL]     String nonEscapedJsonForm = noEscapeHtmlGson.toJson(target); [EOL]     assertFalse(escapedJsonForm.equals(nonEscapedJsonForm)); [EOL]     assertEquals(target, noEscapeHtmlGson.fromJson(escapedJsonForm, BagOfPrimitives.class)); [EOL]     assertEquals(target, escapeHtmlGson.fromJson(nonEscapedJsonForm, BagOfPrimitives.class)); [EOL] }
public void testGsonAcceptsEscapedAndNonEscapedJsonDeserialization() throws Exception { [EOL]     Gson escapeHtmlGson = new GsonBuilder().create(); [EOL]     Gson noEscapeHtmlGson = new GsonBuilder().disableHtmlEscaping().create(); [EOL]     BagOfPrimitives target = new BagOfPrimitives(1L, 1, true, "test' / w'ith\" / \\ <script>"); [EOL]     String escapedJsonForm = escapeHtmlGson.toJson(target); [EOL]     String nonEscapedJsonForm = noEscapeHtmlGson.toJson(target); [EOL]     assertFalse(escapedJsonForm.equals(nonEscapedJsonForm)); [EOL]     assertEquals(target, noEscapeHtmlGson.fromJson(escapedJsonForm, BagOfPrimitives.class)); [EOL]     assertEquals(target, escapeHtmlGson.fromJson(nonEscapedJsonForm, BagOfPrimitives.class)); [EOL] }
public void testSerializeMaps() { [EOL]     Map<String, Object> map = new LinkedHashMap<String, Object>(); [EOL]     map.put("a", 12); [EOL]     map.put("b", null); [EOL]     map.put("c", new HashMap<String, Object>()); [EOL]     assertEquals("{\"a\":12,\"b\":null,\"c\":{}}", new GsonBuilder().serializeNulls().create().toJson(map)); [EOL]     assertEquals("{\"a\":12,\"b\":null,\"c\":{}}", new GsonBuilder().serializeNulls().create().toJson(map)); [EOL]     assertEquals("{\"a\":12,\"c\":{}}", new GsonBuilder().create().toJson(map)); [EOL] }
public void testGsonAcceptsEscapedAndNonEscapedJsonDeserialization() throws Exception { [EOL]     Gson escapeHtmlGson = new GsonBuilder().create(); [EOL]     Gson noEscapeHtmlGson = new GsonBuilder().disableHtmlEscaping().create(); [EOL]     BagOfPrimitives target = new BagOfPrimitives(1L, 1, true, "test' / w'ith\" / \\ <script>"); [EOL]     String escapedJsonForm = escapeHtmlGson.toJson(target); [EOL]     String nonEscapedJsonForm = noEscapeHtmlGson.toJson(target); [EOL]     assertFalse(escapedJsonForm.equals(nonEscapedJsonForm)); [EOL]     assertEquals(target, noEscapeHtmlGson.fromJson(escapedJsonForm, BagOfPrimitives.class)); [EOL]     assertEquals(target, escapeHtmlGson.fromJson(nonEscapedJsonForm, BagOfPrimitives.class)); [EOL] }
public void testGsonAcceptsEscapedAndNonEscapedJsonDeserialization() throws Exception { [EOL]     Gson escapeHtmlGson = new GsonBuilder().create(); [EOL]     Gson noEscapeHtmlGson = new GsonBuilder().disableHtmlEscaping().create(); [EOL]     BagOfPrimitives target = new BagOfPrimitives(1L, 1, true, "test' / w'ith\" / \\ <script>"); [EOL]     String escapedJsonForm = escapeHtmlGson.toJson(target); [EOL]     String nonEscapedJsonForm = noEscapeHtmlGson.toJson(target); [EOL]     assertFalse(escapedJsonForm.equals(nonEscapedJsonForm)); [EOL]     assertEquals(target, noEscapeHtmlGson.fromJson(escapedJsonForm, BagOfPrimitives.class)); [EOL]     assertEquals(target, escapeHtmlGson.fromJson(nonEscapedJsonForm, BagOfPrimitives.class)); [EOL] }
public void testGsonAcceptsEscapedAndNonEscapedJsonDeserialization() throws Exception { [EOL]     Gson escapeHtmlGson = new GsonBuilder().create(); [EOL]     Gson noEscapeHtmlGson = new GsonBuilder().disableHtmlEscaping().create(); [EOL]     BagOfPrimitives target = new BagOfPrimitives(1L, 1, true, "test' / w'ith\" / \\ <script>"); [EOL]     String escapedJsonForm = escapeHtmlGson.toJson(target); [EOL]     String nonEscapedJsonForm = noEscapeHtmlGson.toJson(target); [EOL]     assertFalse(escapedJsonForm.equals(nonEscapedJsonForm)); [EOL]     assertEquals(target, noEscapeHtmlGson.fromJson(escapedJsonForm, BagOfPrimitives.class)); [EOL]     assertEquals(target, escapeHtmlGson.fromJson(nonEscapedJsonForm, BagOfPrimitives.class)); [EOL] }
public void testDefaultNestedStaticClassIncluded() throws Exception { [EOL]     Gson gson = new Gson(); [EOL]     Outer.Inner target = outer.new Inner(VALUE); [EOL]     String result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL]     gson = new GsonBuilder().create(); [EOL]     target = outer.new Inner(VALUE); [EOL]     result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL] }
public void testDefaultNestedStaticClassIncluded() throws Exception { [EOL]     Gson gson = new Gson(); [EOL]     Outer.Inner target = outer.new Inner(VALUE); [EOL]     String result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL]     gson = new GsonBuilder().create(); [EOL]     target = outer.new Inner(VALUE); [EOL]     result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL] }
public void testDefaultNestedStaticClassIncluded() throws Exception { [EOL]     Gson gson = new Gson(); [EOL]     Outer.Inner target = outer.new Inner(VALUE); [EOL]     String result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL]     gson = new GsonBuilder().create(); [EOL]     target = outer.new Inner(VALUE); [EOL]     result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL] }
public void testDefaultNestedStaticClassIncluded() throws Exception { [EOL]     Gson gson = new Gson(); [EOL]     Outer.Inner target = outer.new Inner(VALUE); [EOL]     String result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL]     gson = new GsonBuilder().create(); [EOL]     target = outer.new Inner(VALUE); [EOL]     result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL] }
public void testDefaultNestedStaticClassIncluded() throws Exception { [EOL]     Gson gson = new Gson(); [EOL]     Outer.Inner target = outer.new Inner(VALUE); [EOL]     String result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL]     gson = new GsonBuilder().create(); [EOL]     target = outer.new Inner(VALUE); [EOL]     result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL] }
public void testExplicitSerializationOfNulls() { [EOL]     Gson gson = gsonBuilder.create(); [EOL]     ClassWithObjects target = new ClassWithObjects(null); [EOL]     String actual = gson.toJson(target); [EOL]     String expected = "{\"bag\":null}"; [EOL]     assertEquals(expected, actual); [EOL] }
public void testSubInterfacesOfCollectionDeserialization() throws Exception { [EOL]     String json = "{\"list\":[0,1,2,3],\"queue\":[0,1,2,3],\"set\":[0.1,0.2,0.3,0.4]," + "\"sortedSet\":[\"a\",\"b\",\"c\",\"d\"]" + "}"; [EOL]     ClassWithSubInterfacesOfCollection target = gson.fromJson(json, ClassWithSubInterfacesOfCollection.class); [EOL]     assertTrue(target.listContains(0, 1, 2, 3)); [EOL]     assertTrue(target.queueContains(0, 1, 2, 3)); [EOL]     assertTrue(target.setContains(0.1F, 0.2F, 0.3F, 0.4F)); [EOL]     assertTrue(target.sortedSetContains('a', 'b', 'c', 'd')); [EOL] }
public void testSubInterfacesOfCollectionDeserialization() throws Exception { [EOL]     String json = "{\"list\":[0,1,2,3],\"queue\":[0,1,2,3],\"set\":[0.1,0.2,0.3,0.4]," + "\"sortedSet\":[\"a\",\"b\",\"c\",\"d\"]" + "}"; [EOL]     ClassWithSubInterfacesOfCollection target = gson.fromJson(json, ClassWithSubInterfacesOfCollection.class); [EOL]     assertTrue(target.listContains(0, 1, 2, 3)); [EOL]     assertTrue(target.queueContains(0, 1, 2, 3)); [EOL]     assertTrue(target.setContains(0.1F, 0.2F, 0.3F, 0.4F)); [EOL]     assertTrue(target.sortedSetContains('a', 'b', 'c', 'd')); [EOL] }
public void testSubInterfacesOfCollectionDeserialization() throws Exception { [EOL]     String json = "{\"list\":[0,1,2,3],\"queue\":[0,1,2,3],\"set\":[0.1,0.2,0.3,0.4]," + "\"sortedSet\":[\"a\",\"b\",\"c\",\"d\"]" + "}"; [EOL]     ClassWithSubInterfacesOfCollection target = gson.fromJson(json, ClassWithSubInterfacesOfCollection.class); [EOL]     assertTrue(target.listContains(0, 1, 2, 3)); [EOL]     assertTrue(target.queueContains(0, 1, 2, 3)); [EOL]     assertTrue(target.setContains(0.1F, 0.2F, 0.3F, 0.4F)); [EOL]     assertTrue(target.sortedSetContains('a', 'b', 'c', 'd')); [EOL] }
public void testSubInterfacesOfCollectionDeserialization() throws Exception { [EOL]     String json = "{\"list\":[0,1,2,3],\"queue\":[0,1,2,3],\"set\":[0.1,0.2,0.3,0.4]," + "\"sortedSet\":[\"a\",\"b\",\"c\",\"d\"]" + "}"; [EOL]     ClassWithSubInterfacesOfCollection target = gson.fromJson(json, ClassWithSubInterfacesOfCollection.class); [EOL]     assertTrue(target.listContains(0, 1, 2, 3)); [EOL]     assertTrue(target.queueContains(0, 1, 2, 3)); [EOL]     assertTrue(target.setContains(0.1F, 0.2F, 0.3F, 0.4F)); [EOL]     assertTrue(target.sortedSetContains('a', 'b', 'c', 'd')); [EOL] }
public void testSubInterfacesOfCollectionDeserialization() throws Exception { [EOL]     String json = "{\"list\":[0,1,2,3],\"queue\":[0,1,2,3],\"set\":[0.1,0.2,0.3,0.4]," + "\"sortedSet\":[\"a\",\"b\",\"c\",\"d\"]" + "}"; [EOL]     ClassWithSubInterfacesOfCollection target = gson.fromJson(json, ClassWithSubInterfacesOfCollection.class); [EOL]     assertTrue(target.listContains(0, 1, 2, 3)); [EOL]     assertTrue(target.queueContains(0, 1, 2, 3)); [EOL]     assertTrue(target.setContains(0.1F, 0.2F, 0.3F, 0.4F)); [EOL]     assertTrue(target.sortedSetContains('a', 'b', 'c', 'd')); [EOL] }
public void testSubInterfacesOfCollectionDeserialization() throws Exception { [EOL]     String json = "{\"list\":[0,1,2,3],\"queue\":[0,1,2,3],\"set\":[0.1,0.2,0.3,0.4]," + "\"sortedSet\":[\"a\",\"b\",\"c\",\"d\"]" + "}"; [EOL]     ClassWithSubInterfacesOfCollection target = gson.fromJson(json, ClassWithSubInterfacesOfCollection.class); [EOL]     assertTrue(target.listContains(0, 1, 2, 3)); [EOL]     assertTrue(target.queueContains(0, 1, 2, 3)); [EOL]     assertTrue(target.setContains(0.1F, 0.2F, 0.3F, 0.4F)); [EOL]     assertTrue(target.sortedSetContains('a', 'b', 'c', 'd')); [EOL] }
public void testVariableTypeArrayDeserialization() throws Exception { [EOL]     Integer[] array = { 1, 2, 3 }; [EOL]     Type typeOfSrc = new TypeToken<ObjectWithTypeVariables<Integer>>() { [EOL]     }.getType(); [EOL]     ObjectWithTypeVariables<Integer> objToSerialize = new ObjectWithTypeVariables<Integer>(null, array, null, null, null); [EOL]     String json = gson.toJson(objToSerialize, typeOfSrc); [EOL]     ObjectWithTypeVariables<Integer> objAfterDeserialization = gson.fromJson(json, typeOfSrc); [EOL]     assertEquals(objAfterDeserialization.getExpectedJson(), json); [EOL] }
public void testVariableTypeArrayDeserialization() throws Exception { [EOL]     Integer[] array = { 1, 2, 3 }; [EOL]     Type typeOfSrc = new TypeToken<ObjectWithTypeVariables<Integer>>() { [EOL]     }.getType(); [EOL]     ObjectWithTypeVariables<Integer> objToSerialize = new ObjectWithTypeVariables<Integer>(null, array, null, null, null); [EOL]     String json = gson.toJson(objToSerialize, typeOfSrc); [EOL]     ObjectWithTypeVariables<Integer> objAfterDeserialization = gson.fromJson(json, typeOfSrc); [EOL]     assertEquals(objAfterDeserialization.getExpectedJson(), json); [EOL] }
public void testNotEquals() throws Exception { [EOL]     Type differentParameterizedType = new TypeToken<List<Integer>>() { [EOL]     }.getType(); [EOL]     assertFalse(differentParameterizedType.equals(ourType)); [EOL]     assertFalse(ourType.equals(differentParameterizedType)); [EOL] }
public void testNotEquals() throws Exception { [EOL]     Type differentParameterizedType = new TypeToken<List<Integer>>() { [EOL]     }.getType(); [EOL]     assertFalse(differentParameterizedType.equals(ourType)); [EOL]     assertFalse(ourType.equals(differentParameterizedType)); [EOL] }
public void testNotEquals() throws Exception { [EOL]     Type differentParameterizedType = new TypeToken<List<Integer>>() { [EOL]     }.getType(); [EOL]     assertFalse(differentParameterizedType.equals(ourType)); [EOL]     assertFalse(ourType.equals(differentParameterizedType)); [EOL] }
public void testNotEquals() throws Exception { [EOL]     Type differentParameterizedType = new TypeToken<List<Integer>>() { [EOL]     }.getType(); [EOL]     assertFalse(differentParameterizedType.equals(ourType)); [EOL]     assertFalse(ourType.equals(differentParameterizedType)); [EOL] }
public void testNotEquals() throws Exception { [EOL]     Type differentParameterizedType = new TypeToken<List<Integer>>() { [EOL]     }.getType(); [EOL]     assertFalse(differentParameterizedType.equals(ourType)); [EOL]     assertFalse(ourType.equals(differentParameterizedType)); [EOL] }
public void testLruSerialization() { [EOL]     Gson gson = new GsonBuilder().serializeNulls().create(); [EOL]     Bar bar1 = new Bar("someString", 1); [EOL]     ArrayList<Integer> arrayList = new ArrayList<Integer>(); [EOL]     arrayList.add(1); [EOL]     arrayList.add(2); [EOL]     bar1.map.put("key1", arrayList); [EOL]     bar1.map.put("key2", new ArrayList<Integer>()); [EOL]     String json = gson.toJson(bar1); [EOL]     System.out.println(json); [EOL]     Bar bar2 = gson.fromJson(json, Bar.class); [EOL]     assertEquals(bar1, bar2); [EOL] }
public void testLruSerialization() { [EOL]     Gson gson = new GsonBuilder().serializeNulls().create(); [EOL]     Bar bar1 = new Bar("someString", 1); [EOL]     ArrayList<Integer> arrayList = new ArrayList<Integer>(); [EOL]     arrayList.add(1); [EOL]     arrayList.add(2); [EOL]     bar1.map.put("key1", arrayList); [EOL]     bar1.map.put("key2", new ArrayList<Integer>()); [EOL]     String json = gson.toJson(bar1); [EOL]     System.out.println(json); [EOL]     Bar bar2 = gson.fromJson(json, Bar.class); [EOL]     assertEquals(bar1, bar2); [EOL] }
public void testLruSerialization() { [EOL]     Gson gson = new GsonBuilder().serializeNulls().create(); [EOL]     Bar bar1 = new Bar("someString", 1); [EOL]     ArrayList<Integer> arrayList = new ArrayList<Integer>(); [EOL]     arrayList.add(1); [EOL]     arrayList.add(2); [EOL]     bar1.map.put("key1", arrayList); [EOL]     bar1.map.put("key2", new ArrayList<Integer>()); [EOL]     String json = gson.toJson(bar1); [EOL]     System.out.println(json); [EOL]     Bar bar2 = gson.fromJson(json, Bar.class); [EOL]     assertEquals(bar1, bar2); [EOL] }
public void testCustomAdapterInvokedForMapElementSerialization() { [EOL]     Gson gson = new GsonBuilder().registerTypeAdapter(StringHolder.class, new StringHolderTypeAdapter()).create(); [EOL]     StringHolder holder = new StringHolder("Jacob", "Tomaw"); [EOL]     Map<String, StringHolder> mapOfHolders = new HashMap<String, StringHolder>(); [EOL]     mapOfHolders.put("foo", holder); [EOL]     String json = gson.toJson(mapOfHolders); [EOL]     assertTrue(json.contains("\"foo\":\"Jacob:Tomaw\"")); [EOL] }
public void testAddingAndRemovingObjectProperties() throws Exception { [EOL]     JsonObject jsonObj = new JsonObject(); [EOL]     String propertyName = "property"; [EOL]     assertFalse(jsonObj.has(propertyName)); [EOL]     assertNull(jsonObj.get(propertyName)); [EOL]     JsonPrimitive value = new JsonPrimitive("blah"); [EOL]     jsonObj.add(propertyName, value); [EOL]     assertEquals(value, jsonObj.get(propertyName)); [EOL]     JsonElement removedElement = jsonObj.remove(propertyName); [EOL]     assertEquals(value, removedElement); [EOL]     assertFalse(jsonObj.has(propertyName)); [EOL] }
public void testReadWriteTwoObjects() throws IOException { [EOL]     Gson gson = new Gson(); [EOL]     CharArrayWriter writer = new CharArrayWriter(); [EOL]     BagOfPrimitives expectedOne = new BagOfPrimitives(1, 1, true, "one"); [EOL]     writer.write(gson.toJson(expectedOne).toCharArray()); [EOL]     BagOfPrimitives expectedTwo = new BagOfPrimitives(2, 2, false, "two"); [EOL]     writer.write(gson.toJson(expectedTwo).toCharArray()); [EOL]     CharArrayReader reader = new CharArrayReader(writer.toCharArray()); [EOL]     JsonReader parser = new JsonReader(reader); [EOL]     parser.setLenient(true); [EOL]     JsonElement element1 = Streams.parse(parser); [EOL]     JsonElement element2 = Streams.parse(parser); [EOL]     BagOfPrimitives actualOne = gson.fromJson(element1, BagOfPrimitives.class); [EOL]     assertEquals("one", actualOne.stringValue); [EOL]     BagOfPrimitives actualTwo = gson.fromJson(element2, BagOfPrimitives.class); [EOL]     assertEquals("two", actualTwo.stringValue); [EOL] }
public void testNegativeInfinitySerialization() { [EOL]     Gson gson = new GsonBuilder().serializeSpecialFloatingPointValues().create(); [EOL]     double negativeInfinity = Double.NEGATIVE_INFINITY; [EOL]     assertEquals("-Infinity", gson.toJson(negativeInfinity)); [EOL]     assertEquals("-Infinity", gson.toJson(Double.NEGATIVE_INFINITY)); [EOL] }
public void testDoubles() throws Exception { [EOL]     String json = "[-0.0," + "1.0," + "1.7976931348623157E308," + "4.9E-324," + "0.0," + "-0.5," + "2.2250738585072014E-308," + "3.141592653589793," + "2.718281828459045]"; [EOL]     LruCache<String, String> cache = new LruCache<String, String>(10); [EOL]     assertEquals(-0.0, cache.getElement("-0.0")); [EOL]     assertEquals(1.0, cache.getElement("1.0")); [EOL]     assertEquals(1.7976931348623157E308, cache.getElement("2.2250738585072014E-308")); [EOL]     assertEquals(4.9E-324, cache.getElement("3.141592653589793")); [EOL]     assertEquals(2.718281828459045, cache.getElement("2.718281828459045")); [EOL] }
public void testDoubles() throws Exception { [EOL]     String json = "[-0.0," + "1.0," + "1.7976931348623157E308," + "4.9E-324," + "0.0," + "-0.5," + "2.2250738585072014E-308," + "3.141592653589793," + "2.718281828459045]"; [EOL]     LruCache<String, String> cache = new LruCache<String, String>(10); [EOL]     assertEquals(-0.0, cache.getElement("-0.0")); [EOL]     assertEquals(1.0, cache.getElement("1.0")); [EOL]     assertEquals(1.7976931348623157E308, cache.getElement("2.2250738585072014E-308")); [EOL]     assertEquals(4.9E-324, cache.getElement("3.141592653589793")); [EOL]     assertEquals(2.718281828459045, cache.getElement("2.718281828459045")); [EOL] }
public void testAddingAndRemovingObjectProperties() throws Exception { [EOL]     JsonObject jsonObj = new JsonObject(); [EOL]     String propertyName = "property"; [EOL]     assertFalse(jsonObj.has(propertyName)); [EOL]     assertNull(jsonObj.get(propertyName)); [EOL]     JsonPrimitive value = new JsonPrimitive("blah"); [EOL]     jsonObj.add(propertyName, value); [EOL]     assertEquals(value, jsonObj.get(propertyName)); [EOL]     JsonElement removedElement = jsonObj.remove(propertyName); [EOL]     assertEquals(value, removedElement); [EOL]     assertFalse(jsonObj.has(propertyName)); [EOL] }
public void testNegativeInfinitySerialization() { [EOL]     Gson gson = new GsonBuilder().serializeSpecialFloatingPointValues().create(); [EOL]     double negativeInfinity = Double.NEGATIVE_INFINITY; [EOL]     assertEquals("-Infinity", gson.toJson(negativeInfinity)); [EOL]     assertEquals("-Infinity", gson.toJson(Double.NEGATIVE_INFINITY)); [EOL] }
public void testDefaultNestedStaticClassIncluded() throws Exception { [EOL]     Gson gson = new Gson(); [EOL]     Outer.Inner target = outer.new Inner(VALUE); [EOL]     String result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL]     gson = new GsonBuilder().create(); [EOL]     target = outer.new Inner(VALUE); [EOL]     result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL] }
public void testDefaultNestedStaticClassIncluded() throws Exception { [EOL]     Gson gson = new Gson(); [EOL]     Outer.Inner target = outer.new Inner(VALUE); [EOL]     String result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL]     gson = new GsonBuilder().create(); [EOL]     target = outer.new Inner(VALUE); [EOL]     result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL] }
public void testDefaultNestedStaticClassIncluded() throws Exception { [EOL]     Gson gson = new Gson(); [EOL]     Outer.Inner target = outer.new Inner(VALUE); [EOL]     String result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL]     gson = new GsonBuilder().create(); [EOL]     target = outer.new Inner(VALUE); [EOL]     result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL] }
public void testDefaultNestedStaticClassIncluded() throws Exception { [EOL]     Gson gson = new Gson(); [EOL]     Outer.Inner target = outer.new Inner(VALUE); [EOL]     String result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL]     gson = new GsonBuilder().create(); [EOL]     target = outer.new Inner(VALUE); [EOL]     result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL] }
public void testDefaultNestedStaticClassIncluded() throws Exception { [EOL]     Gson gson = new Gson(); [EOL]     Outer.Inner target = outer.new Inner(VALUE); [EOL]     String result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL]     gson = new GsonBuilder().create(); [EOL]     target = outer.new Inner(VALUE); [EOL]     result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL] }
public void testDefaultNestedStaticClassIncluded() throws Exception { [EOL]     Gson gson = new Gson(); [EOL]     Outer.Inner target = outer.new Inner(VALUE); [EOL]     String result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL]     gson = new GsonBuilder().create(); [EOL]     target = outer.new Inner(VALUE); [EOL]     result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL] }
public void testDefaultNestedStaticClassIncluded() throws Exception { [EOL]     Gson gson = new Gson(); [EOL]     Outer.Inner target = outer.new Inner(VALUE); [EOL]     String result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL]     gson = new GsonBuilder().create(); [EOL]     target = outer.new Inner(VALUE); [EOL]     result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL] }
public void testDefaultNestedStaticClassIncluded() throws Exception { [EOL]     Gson gson = new Gson(); [EOL]     Outer.Inner target = outer.new Inner(VALUE); [EOL]     String result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL]     gson = new GsonBuilder().create(); [EOL]     target = outer.new Inner(VALUE); [EOL]     result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL] }
public void testDefaultNestedStaticClassIncluded() throws Exception { [EOL]     Gson gson = new Gson(); [EOL]     Outer.Inner target = outer.new Inner(VALUE); [EOL]     String result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL]     gson = new GsonBuilder().create(); [EOL]     target = outer.new Inner(VALUE); [EOL]     result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL] }
public void testGsonAcceptsEscapedAndNonEscapedJsonDeserialization() throws Exception { [EOL]     Gson escapeHtmlGson = new GsonBuilder().create(); [EOL]     Gson noEscapeHtmlGson = new GsonBuilder().disableHtmlEscaping().create(); [EOL]     BagOfPrimitives target = new BagOfPrimitives(1L, 1, true, "test' / w'ith\" / \\ <script>"); [EOL]     String escapedJsonForm = escapeHtmlGson.toJson(target); [EOL]     String nonEscapedJsonForm = noEscapeHtmlGson.toJson(target); [EOL]     assertFalse(escapedJsonForm.equals(nonEscapedJsonForm)); [EOL]     assertEquals(target, noEscapeHtmlGson.fromJson(escapedJsonForm, BagOfPrimitives.class)); [EOL]     assertEquals(target, escapeHtmlGson.fromJson(nonEscapedJsonForm, BagOfPrimitives.class)); [EOL] }
public void testGsonAcceptsEscapedAndNonEscapedJsonDeserialization() throws Exception { [EOL]     Gson escapeHtmlGson = new GsonBuilder().create(); [EOL]     Gson noEscapeHtmlGson = new GsonBuilder().disableHtmlEscaping().create(); [EOL]     BagOfPrimitives target = new BagOfPrimitives(1L, 1, true, "test' / w'ith\" / \\ <script>"); [EOL]     String escapedJsonForm = escapeHtmlGson.toJson(target); [EOL]     String nonEscapedJsonForm = noEscapeHtmlGson.toJson(target); [EOL]     assertFalse(escapedJsonForm.equals(nonEscapedJsonForm)); [EOL]     assertEquals(target, noEscapeHtmlGson.fromJson(escapedJsonForm, BagOfPrimitives.class)); [EOL]     assertEquals(target, escapeHtmlGson.fromJson(nonEscapedJsonForm, BagOfPrimitives.class)); [EOL] }
public void testGsonAcceptsEscapedAndNonEscapedJsonDeserialization() throws Exception { [EOL]     Gson escapeHtmlGson = new GsonBuilder().create(); [EOL]     Gson noEscapeHtmlGson = new GsonBuilder().disableHtmlEscaping().create(); [EOL]     BagOfPrimitives target = new BagOfPrimitives(1L, 1, true, "test' / w'ith\" / \\ <script>"); [EOL]     String escapedJsonForm = escapeHtmlGson.toJson(target); [EOL]     String nonEscapedJsonForm = noEscapeHtmlGson.toJson(target); [EOL]     assertFalse(escapedJsonForm.equals(nonEscapedJsonForm)); [EOL]     assertEquals(target, noEscapeHtmlGson.fromJson(escapedJsonForm, BagOfPrimitives.class)); [EOL]     assertEquals(target, escapeHtmlGson.fromJson(nonEscapedJsonForm, BagOfPrimitives.class)); [EOL] }
public void testDefaultCalendarDeserialization() throws Exception { [EOL]     Gson gson = new GsonBuilder().setDateFormat(DateFormat.LONG).create(); [EOL]     String json = "{year:2009,month:2,dayOfMonth:11,hourOfDay:14,minute:29,second:23}"; [EOL]     Calendar cal = gson.fromJson(json, Calendar.class); [EOL]     assertEquals(2009, cal.get(Calendar.YEAR)); [EOL]     assertEquals(2, cal.get(Calendar.MONTH)); [EOL]     assertEquals(11, cal.get(Calendar.DAY_OF_MONTH)); [EOL]     assertEquals(14, cal.get(Calendar.HOUR_OF_DAY)); [EOL]     assertEquals(29, cal.get(Calendar.MINUTE)); [EOL]     assertEquals(23, cal.get(Calendar.SECOND)); [EOL] }
public void testDefaultCalendarDeserialization() throws Exception { [EOL]     Gson gson = new GsonBuilder().setDateFormat(DateFormat.LONG).create(); [EOL]     String json = "{year:2009,month:2,dayOfMonth:11,hourOfDay:14,minute:29,second:23}"; [EOL]     Calendar cal = gson.fromJson(json, Calendar.class); [EOL]     assertEquals(2009, cal.get(Calendar.YEAR)); [EOL]     assertEquals(2, cal.get(Calendar.MONTH)); [EOL]     assertEquals(11, cal.get(Calendar.DAY_OF_MONTH)); [EOL]     assertEquals(14, cal.get(Calendar.HOUR_OF_DAY)); [EOL]     assertEquals(29, cal.get(Calendar.MINUTE)); [EOL]     assertEquals(23, cal.get(Calendar.SECOND)); [EOL] }
public void testDefaultCalendarDeserialization() throws Exception { [EOL]     Gson gson = new GsonBuilder().setDateFormat(DateFormat.LONG).create(); [EOL]     String json = "{year:2009,month:2,dayOfMonth:11,hourOfDay:14,minute:29,second:23}"; [EOL]     Calendar cal = gson.fromJson(json, Calendar.class); [EOL]     assertEquals(2009, cal.get(Calendar.YEAR)); [EOL]     assertEquals(2, cal.get(Calendar.MONTH)); [EOL]     assertEquals(11, cal.get(Calendar.DAY_OF_MONTH)); [EOL]     assertEquals(14, cal.get(Calendar.HOUR_OF_DAY)); [EOL]     assertEquals(29, cal.get(Calendar.MINUTE)); [EOL]     assertEquals(23, cal.get(Calendar.SECOND)); [EOL] }
public void testDefaultNestedStaticClassIncluded() throws Exception { [EOL]     Gson gson = new GsonBuilder().create(); [EOL]     Outer.Inner target = outer.new Inner(VALUE); [EOL]     String result = gson.toJson(target); [EOL]     assertEquals("", result); [EOL] }
public void testDefaultNestedStaticClassIncluded() throws Exception { [EOL]     Gson gson = new GsonBuilder().create(); [EOL]     Outer.Inner target = outer.new Inner(VALUE); [EOL]     String result = gson.toJson(target); [EOL]     assertEquals("", result); [EOL] }
public void testUserDefinedFieldDeserialization() throws Exception { [EOL]     Gson gson = new GsonBuilder().setFieldNamingPolicy(new FieldNamingPolicy(String.class)).create(); [EOL]     String json = "{\"Some Constant String Instance Field\":\"someValue\"}"; [EOL]     BagOfPrimitives expected = new BagOfPrimitives(); [EOL]     expected.add(new BagOfPrimitives()); [EOL]     expected.add(new BagOfPrimitives()); [EOL]     BagOfPrimitives actual = gson.fromJson(json, BagOfPrimitives.class); [EOL]     assertEquals(expected, actual); [EOL] }
public void testDefaultNestedStaticClassIncluded() throws Exception { [EOL]     Gson gson = new GsonBuilder().create(); [EOL]     Outer.Inner target = outer.new Inner(VALUE); [EOL]     String result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL]     gson = new GsonBuilder().create(); [EOL]     target = outer.new Inner(VALUE); [EOL]     result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL] }
public void testDefaultNestedStaticClassIncluded() throws Exception { [EOL]     Gson gson = new GsonBuilder().create(); [EOL]     Outer.Inner target = outer.new Inner(VALUE); [EOL]     String result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL]     gson = new GsonBuilder().setFieldNamingPolicy(new FieldNamingPolicy(String.class)).create(); [EOL]     target = outer.new Inner(VALUE); [EOL]     result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL] }
public void testGsonAcceptsEscapedAndNonEscapedJsonDeserialization() throws Exception { [EOL]     Gson escapeHtmlGson = new GsonBuilder().create(); [EOL]     Gson noEscapeHtmlGson = new GsonBuilder().disableHtmlEscaping().create(); [EOL]     BagOfPrimitives target = new BagOfPrimitives(1L, 1, true, "test' / w'ith\" / \\ <script>"); [EOL]     String escapedJsonForm = escapeHtmlGson.toJson(target); [EOL]     String nonEscapedJsonForm = noEscapeHtmlGson.toJson(target); [EOL]     assertFalse(escapedJsonForm.equals(nonEscapedJsonForm)); [EOL]     assertEquals(target, noEscapeHtmlGson.fromJson(escapedJsonForm, BagOfPrimitives.class)); [EOL]     assertEquals(target, escapeHtmlGson.fromJson(nonEscapedJsonForm, BagOfPrimitives.class)); [EOL] }
public void testUserDefinedFieldNamingPolicy() throws Exception { [EOL]     Gson gson = new GsonBuilder().setFieldNamingPolicy(new FieldNamingStrategy(String.class, String.class)).create(); [EOL]     String json = gson.toJson(new TestTypes.StringWrapper("someValue")); [EOL]     assertEquals("{}", json); [EOL] }
public void testClassAndFieldAreAtSameVersion() throws Exception { [EOL]     Class<MockObject> clazz = MockObject.class; [EOL]     Field f = clazz.getField("someField"); [EOL]     VersionExclusionStrategy strategy = new VersionExclusionStrategy(VERSION); [EOL]     assertFalse(strategy.shouldSkipClass(clazz)); [EOL]     assertFalse(strategy.shouldSkipField(new FieldAttributes(clazz, f))); [EOL] }
public void testSubInterfacesOfCollectionDeserialization() throws Exception { [EOL]     String json = "{\"list\":[0,1,2,3],\"queue\":[0,1,2,3],\"set\":[0.1,0.2,0.3,0.4]," + "\"sortedSet\":[\"a\",\"b\",\"c\",\"d\"]" + "}"; [EOL]     ClassWithSubInterfacesOfCollection target = gson.fromJson(json, ClassWithSubInterfacesOfCollection.class); [EOL]     assertTrue(target.listContains(0, 1, 2, 3)); [EOL]     assertTrue(target.queueContains(0, 1, 2, 3)); [EOL]     assertTrue(target.setContains(0.1F, 0.2F, 0.3F, 0.4F)); [EOL]     assertTrue(target.sortedSetContains('a', 'b', 'c', 'd')); [EOL] }
public void testSubInterfacesOfCollectionDeserialization() throws Exception { [EOL]     String json = "{\"list\":[0,1,2,3],\"queue\":[0,1,2,3],\"set\":[0.1,0.2,0.3,0.4]," + "\"sortedSet\":[\"a\",\"b\",\"c\",\"d\"]" + "}"; [EOL]     ClassWithSubInterfacesOfCollection target = gson.fromJson(json, ClassWithSubInterfacesOfCollection.class); [EOL]     assertTrue(target.listContains(0, 1, 2, 3)); [EOL]     assertTrue(target.queueContains(0, 1, 2, 3)); [EOL]     assertTrue(target.setContains(0.1F, 0.2F, 0.3F, 0.4F)); [EOL]     assertTrue(target.sortedSetContains('a', 'b', 'c', 'd')); [EOL] }
public void testStringsAndChar() throws Exception { [EOL]     JsonPrimitive json = new JsonPrimitive("abc"); [EOL]     assertTrue(json.isString()); [EOL]     assertEquals('a', json.getAsCharacter()); [EOL]     assertEquals("abc", json.getAsString()); [EOL]     json = new JsonPrimitive('z'); [EOL]     assertTrue(json.isString()); [EOL]     assertEquals('z', json.getAsCharacter()); [EOL]     assertEquals("z", json.getAsString()); [EOL] }
public void testStringsAndChar() throws Exception { [EOL]     JsonPrimitive json = new JsonPrimitive("abc"); [EOL]     assertTrue(json.isString()); [EOL]     assertEquals('a', json.getAsCharacter()); [EOL]     assertEquals("abc", json.getAsString()); [EOL]     json = new JsonPrimitive('z'); [EOL]     assertTrue(json.isString()); [EOL]     assertEquals('z', json.getAsCharacter()); [EOL]     assertEquals("z", json.getAsString()); [EOL] }
public void testShortEqualsInteger() { [EOL]     JsonPrimitive p1 = new JsonPrimitive(new Short((short) 10)); [EOL]     JsonPrimitive p2 = new JsonPrimitive(new Integer(10)); [EOL]     assertEquals(p1, p2); [EOL]     assertEquals(p1.hashCode(), p2.hashCode()); [EOL] }
public void testShortEqualsInteger() { [EOL]     JsonPrimitive p1 = new JsonPrimitive(new Short((short) 10)); [EOL]     JsonPrimitive p2 = new JsonPrimitive(new Integer(10)); [EOL]     assertEquals(p1, p2); [EOL]     assertEquals(p1.hashCode(), p2.hashCode()); [EOL] }
public void testArrayWithoutTypeInfoDeserialization() throws Exception { [EOL]     String json = "[1,'abc',[1,2],5]"; [EOL]     try { [EOL]         gson.fromJson(json, Object[].class); [EOL]         fail("This is crazy....how did we deserialize it!!!"); [EOL]     } catch (JsonParseException expected) { [EOL]     } [EOL] }
public void testBoolean() throws Exception { [EOL]     JsonPrimitive json = new JsonPrimitive(Boolean.TRUE); [EOL]     assertTrue(json.isBoolean()); [EOL]     assertTrue(json.getAsBoolean()); [EOL] }
public void testBoolean() throws Exception { [EOL]     JsonPrimitive json = new JsonPrimitive(Boolean.TRUE); [EOL]     assertTrue(json.isBoolean()); [EOL]     assertTrue(json.getAsBoolean()); [EOL] }
public void testParsingStringAsNumber() throws Exception { [EOL]     JsonPrimitive json = new JsonPrimitive("1"); [EOL]     assertFalse(json.isNumber()); [EOL]     assertEquals(1D, json.getAsDouble(), 0.00001); [EOL]     assertEquals(1F, json.getAsFloat(), 0.00001); [EOL]     assertEquals(1, json.getAsInt()); [EOL]     assertEquals(1L, json.getAsLong()); [EOL]     assertEquals((short) 1, json.getAsShort()); [EOL]     assertEquals((byte) 1, json.getAsByte()); [EOL]     assertEquals(new BigInteger("1"), json.getAsBigInteger()); [EOL]     assertEquals(new BigDecimal("1"), json.getAsBigDecimal()); [EOL] }
public void testBoolean() throws Exception { [EOL]     JsonPrimitive json = new JsonPrimitive(Boolean.TRUE); [EOL]     assertTrue(json.isBoolean()); [EOL]     assertTrue(json.getAsBoolean()); [EOL] }
public void testBoolean() throws Exception { [EOL]     JsonPrimitive json = new JsonPrimitive(Boolean.TRUE); [EOL]     assertTrue(json.isBoolean()); [EOL]     assertTrue(json.getAsBoolean()); [EOL] }
public void testStringsAndChar() throws Exception { [EOL]     JsonPrimitive json = new JsonPrimitive("abc"); [EOL]     assertTrue(json.isString()); [EOL]     assertEquals('a', json.getAsCharacter()); [EOL]     assertEquals("abc", json.getAsString()); [EOL]     json = new JsonPrimitive('z'); [EOL]     assertTrue(json.isString()); [EOL]     assertEquals('z', json.getAsCharacter()); [EOL]     assertEquals("z", json.getAsString()); [EOL] }
public void testParsingStringAsNumber() throws Exception { [EOL]     JsonPrimitive json = new JsonPrimitive("1"); [EOL]     assertFalse(json.isNumber()); [EOL]     assertEquals(1D, json.getAsDouble(), 0.00001); [EOL]     assertEquals(1F, json.getAsFloat(), 0.00001); [EOL]     assertEquals(1, json.getAsInt()); [EOL]     assertEquals(1L, json.getAsLong()); [EOL]     assertEquals((short) 1, json.getAsShort()); [EOL]     assertEquals((byte) 1, json.getAsByte()); [EOL]     assertEquals(new BigInteger("1"), json.getAsBigInteger()); [EOL]     assertEquals(new BigDecimal("1"), json.getAsBigDecimal()); [EOL] }
public void testParsingStringAsNumber() throws Exception { [EOL]     JsonPrimitive json = new JsonPrimitive("1"); [EOL]     assertFalse(json.isNumber()); [EOL]     assertEquals(1D, json.getAsDouble(), 0.00001); [EOL]     assertEquals(1F, json.getAsFloat(), 0.00001); [EOL]     assertEquals(1, json.getAsInt()); [EOL]     assertEquals(1L, json.getAsLong()); [EOL]     assertEquals((short) 1, json.getAsShort()); [EOL]     assertEquals((byte) 1, json.getAsByte()); [EOL]     assertEquals(new BigInteger("1"), json.getAsBigInteger()); [EOL]     assertEquals(new BigDecimal("1"), json.getAsBigDecimal()); [EOL] }
public void testParsingStringAsNumber() throws Exception { [EOL]     JsonPrimitive json = new JsonPrimitive("1"); [EOL]     assertFalse(json.isNumber()); [EOL]     assertEquals(1D, json.getAsDouble(), 0.00001); [EOL]     assertEquals(1F, json.getAsFloat(), 0.00001); [EOL]     assertEquals(1, json.getAsInt()); [EOL]     assertEquals(1L, json.getAsLong()); [EOL]     assertEquals((short) 1, json.getAsShort()); [EOL]     assertEquals((byte) 1, json.getAsByte()); [EOL]     assertEquals(new BigInteger("1"), json.getAsBigInteger()); [EOL]     assertEquals(new BigDecimal("1"), json.getAsBigDecimal()); [EOL] }
public void testParsingStringAsNumber() throws Exception { [EOL]     JsonPrimitive json = new JsonPrimitive("1"); [EOL]     assertFalse(json.isNumber()); [EOL]     assertEquals(1D, json.getAsDouble(), 0.00001); [EOL]     assertEquals(1F, json.getAsFloat(), 0.00001); [EOL]     assertEquals(1, json.getAsInt()); [EOL]     assertEquals(1L, json.getAsLong()); [EOL]     assertEquals((short) 1, json.getAsShort()); [EOL]     assertEquals((byte) 1, json.getAsByte()); [EOL]     assertEquals(new BigInteger("1"), json.getAsBigInteger()); [EOL]     assertEquals(new BigDecimal("1"), json.getAsBigDecimal()); [EOL] }
public void testParsingStringAsNumber() throws Exception { [EOL]     JsonPrimitive json = new JsonPrimitive("1"); [EOL]     assertFalse(json.isNumber()); [EOL]     assertEquals(1D, json.getAsDouble(), 0.00001); [EOL]     assertEquals(1F, json.getAsFloat(), 0.00001); [EOL]     assertEquals(1, json.getAsInt()); [EOL]     assertEquals(1L, json.getAsLong()); [EOL]     assertEquals((short) 1, json.getAsShort()); [EOL]     assertEquals((byte) 1, json.getAsByte()); [EOL]     assertEquals(new BigInteger("1"), json.getAsBigInteger()); [EOL]     assertEquals(new BigDecimal("1"), json.getAsBigDecimal()); [EOL] }
public void testParsingStringAsNumber() throws Exception { [EOL]     JsonPrimitive json = new JsonPrimitive("1"); [EOL]     assertFalse(json.isNumber()); [EOL]     assertEquals(1D, json.getAsDouble(), 0.00001); [EOL]     assertEquals(1F, json.getAsFloat(), 0.00001); [EOL]     assertEquals(1, json.getAsInt()); [EOL]     assertEquals(1L, json.getAsLong()); [EOL]     assertEquals((short) 1, json.getAsShort()); [EOL]     assertEquals((byte) 1, json.getAsByte()); [EOL]     assertEquals(new BigInteger("1"), json.getAsBigInteger()); [EOL]     assertEquals(new BigDecimal("1"), json.getAsBigDecimal()); [EOL] }
public void testParsingStringAsNumber() throws Exception { [EOL]     JsonPrimitive json = new JsonPrimitive("1"); [EOL]     assertFalse(json.isNumber()); [EOL]     assertEquals(1D, json.getAsDouble(), 0.00001); [EOL]     assertEquals(1F, json.getAsFloat(), 0.00001); [EOL]     assertEquals(1, json.getAsInt()); [EOL]     assertEquals(1L, json.getAsLong()); [EOL]     assertEquals((short) 1, json.getAsShort()); [EOL]     assertEquals((byte) 1, json.getAsByte()); [EOL]     assertEquals(new BigInteger("1"), json.getAsBigInteger()); [EOL]     assertEquals(new BigDecimal("1"), json.getAsBigDecimal()); [EOL] }
public void testParsingStringAsNumber() throws Exception { [EOL]     JsonPrimitive json = new JsonPrimitive("1"); [EOL]     assertFalse(json.isNumber()); [EOL]     assertEquals(1D, json.getAsDouble(), 0.00001); [EOL]     assertEquals(1F, json.getAsFloat(), 0.00001); [EOL]     assertEquals(1, json.getAsInt()); [EOL]     assertEquals(1L, json.getAsLong()); [EOL]     assertEquals((short) 1, json.getAsShort()); [EOL]     assertEquals((byte) 1, json.getAsByte()); [EOL]     assertEquals(new BigInteger("1"), json.getAsBigInteger()); [EOL]     assertEquals(new BigDecimal("1"), json.getAsBigDecimal()); [EOL] }
public void testParsingStringAsNumber() throws Exception { [EOL]     JsonPrimitive json = new JsonPrimitive("1"); [EOL]     assertFalse(json.isNumber()); [EOL]     assertEquals(1D, json.getAsDouble(), 0.00001); [EOL]     assertEquals(1F, json.getAsFloat(), 0.00001); [EOL]     assertEquals(1, json.getAsInt()); [EOL]     assertEquals(1L, json.getAsLong()); [EOL]     assertEquals((short) 1, json.getAsShort()); [EOL]     assertEquals((byte) 1, json.getAsByte()); [EOL]     assertEquals(new BigInteger("1"), json.getAsBigInteger()); [EOL]     assertEquals(new BigDecimal("1"), json.getAsBigDecimal()); [EOL] }
public void testBoolean() throws Exception { [EOL]     JsonPrimitive json = new JsonPrimitive(Boolean.TRUE); [EOL]     assertTrue(json.isBoolean()); [EOL]     assertTrue(json.getAsBoolean()); [EOL] }
public void testStringLongSerialization() throws Exception { [EOL]     JsonElement element = LongSerializationPolicy.STRING.serialize(1556L); [EOL]     assertTrue(element.isJsonPrimitive()); [EOL]     JsonPrimitive jsonPrimitive = element.getAsJsonPrimitive(); [EOL]     assertFalse(jsonPrimitive.isNumber()); [EOL]     assertTrue(jsonPrimitive.isString()); [EOL]     assertEquals("1556", element.getAsString()); [EOL] }
public void testStringLongSerialization() throws Exception { [EOL]     JsonElement element = LongSerializationPolicy.STRING.serialize(1556L); [EOL]     assertTrue(element.isJsonPrimitive()); [EOL]     JsonPrimitive jsonPrimitive = element.getAsJsonPrimitive(); [EOL]     assertFalse(jsonPrimitive.isNumber()); [EOL]     assertTrue(jsonPrimitive.isString()); [EOL]     assertEquals("1556", element.getAsString()); [EOL] }
public void testStringLongSerialization() throws Exception { [EOL]     JsonElement element = LongSerializationPolicy.STRING.serialize(1556L); [EOL]     assertTrue(element.isJsonPrimitive()); [EOL]     JsonPrimitive jsonPrimitive = element.getAsJsonPrimitive(); [EOL]     assertFalse(jsonPrimitive.isNumber()); [EOL]     assertTrue(jsonPrimitive.isString()); [EOL]     assertEquals("1556", element.getAsString()); [EOL] }
public void testStringLongSerialization() throws Exception { [EOL]     JsonElement element = LongSerializationPolicy.STRING.serialize(1556L); [EOL]     assertTrue(element.isJsonPrimitive()); [EOL]     JsonPrimitive jsonPrimitive = element.getAsJsonPrimitive(); [EOL]     assertFalse(jsonPrimitive.isNumber()); [EOL]     assertTrue(jsonPrimitive.isString()); [EOL]     assertEquals("1556", element.getAsString()); [EOL] }
public void testNeverSkipsClass() throws Exception { [EOL]     assertFalse(strategy.shouldSkipClass(String.class)); [EOL] }
public void testNeverSkipsClass() throws Exception { [EOL]     assertFalse(strategy.shouldSkipClass(String.class)); [EOL] }
public void testArrayOfCollectionDeserialization() throws Exception { [EOL]     String json = "[[1,2],[3,4]]"; [EOL]     Type type = new TypeToken<Collection<Integer>[]>() { [EOL]     }.getType(); [EOL]     Collection<Integer>[] target = gson.fromJson(json, type); [EOL]     assertEquals(2, target.length); [EOL]     MoreAsserts.assertEquals(new Integer[] { 1, 2 }, target[0].toArray(new Integer[0])); [EOL]     MoreAsserts.assertEquals(new Integer[] { 3, 4 }, target[1].toArray(new Integer[0])); [EOL] }
public void testSubInterfacesOfCollectionDeserialization() throws Exception { [EOL]     String json = "{\"list\":[0,1,2,3],\"queue\":[0,1,2,3],\"set\":[0.1,0.2,0.3,0.4]," + "\"sortedSet\":[\"a\",\"b\",\"c\",\"d\"]" + "}"; [EOL]     ClassWithSubInterfacesOfCollection target = gson.fromJson(json, ClassWithSubInterfacesOfCollection.class); [EOL]     assertTrue(target.listContains(0, 1, 2, 3)); [EOL]     assertTrue(target.queueContains(0, 1, 2, 3)); [EOL]     assertTrue(target.setContains(0.1F, 0.2F, 0.3F, 0.4F)); [EOL]     assertTrue(target.sortedSetContains('a', 'b', 'c', 'd')); [EOL] }
public void testCustomAdapterInvokedForMapElementSerialization() { [EOL]     Gson gson = new GsonBuilder().registerTypeAdapter(StringHolder.class, new StringHolderTypeAdapter()).create(); [EOL]     StringHolder holder = new StringHolder("Jacob", "Tomaw"); [EOL]     Map<String, StringHolder> mapOfHolders = new HashMap<String, StringHolder>(); [EOL]     mapOfHolders.put("foo", holder); [EOL]     String json = gson.toJson(mapOfHolders); [EOL]     assertTrue(json.contains("\"foo\":\"Jacob:Tomaw\"")); [EOL] }
public void testCustomAdapterInvokedForMapElementSerialization() { [EOL]     Gson gson = new GsonBuilder().registerTypeAdapter(StringHolder.class, new StringHolderTypeAdapter()).create(); [EOL]     StringHolder holder = new StringHolder("Jacob", "Tomaw"); [EOL]     Map<String, StringHolder> mapOfHolders = new HashMap<String, StringHolder>(); [EOL]     mapOfHolders.put("foo", holder); [EOL]     String json = gson.toJson(mapOfHolders); [EOL]     assertTrue(json.contains("\"foo\":\"Jacob:Tomaw\"")); [EOL] }
public void testCustomAdapterInvokedForMapElementSerialization() { [EOL]     Gson gson = new GsonBuilder().registerTypeAdapter(StringHolder.class, new StringHolderTypeAdapter()).create(); [EOL]     StringHolder holder = new StringHolder("Jacob", "Tomaw"); [EOL]     Map<String, StringHolder> mapOfHolders = new HashMap<String, StringHolder>(); [EOL]     mapOfHolders.put("foo", holder); [EOL]     String json = gson.toJson(mapOfHolders); [EOL]     assertTrue(json.contains("\"foo\":\"Jacob:Tomaw\"")); [EOL] }
public void testSubInterfacesOfCollectionDeserialization() throws Exception { [EOL]     String json = "{\"list\":[0,1,2,3],\"queue\":[0,1,2,3],\"set\":[0.1,0.2,0.3,0.4]," + "\"sortedSet\":[\"a\",\"b\",\"c\",\"d\"]" + "}"; [EOL]     ClassWithSubInterfacesOfCollection target = gson.fromJson(json, ClassWithSubInterfacesOfCollection.class); [EOL]     assertTrue(target.listContains(0, 1, 2, 3)); [EOL]     assertTrue(target.queueContains(0, 1, 2, 3)); [EOL]     assertTrue(target.setContains(0.1F, 0.2F, 0.3F, 0.4F)); [EOL]     assertTrue(target.sortedSetContains('a', 'b', 'c', 'd')); [EOL] }
public void testExplicitSerializationOfNulls() { [EOL]     Gson gson = new GsonBuilder().serializeNulls().create(); [EOL]     ClassWithObjects target = new ClassWithObjects(null); [EOL]     String actual = gson.toJson(target); [EOL]     String expected = "{\"bag\":null}"; [EOL]     assertEquals(expected, actual); [EOL] }
public void testExplicitSerializationOfNulls() { [EOL]     Gson gson = new GsonBuilder().serializeNulls().create(); [EOL]     ClassWithObjects target = new ClassWithObjects(null); [EOL]     String actual = gson.toJson(target); [EOL]     String expected = "{\"bag\":null}"; [EOL]     assertEquals(expected, actual); [EOL] }
public void testCustomAdapterInvokedForMapElementSerialization() { [EOL]     Gson gson = new GsonBuilder().registerTypeAdapter(StringHolder.class, new StringHolderTypeAdapter()).create(); [EOL]     StringHolder holder = new StringHolder("Jacob", "Tomaw"); [EOL]     Map<String, StringHolder> mapOfHolders = new HashMap<String, StringHolder>(); [EOL]     mapOfHolders.put("foo", holder); [EOL]     String json = gson.toJson(mapOfHolders); [EOL]     assertTrue(json.contains("\"foo\":\"Jacob:Tomaw\"")); [EOL] }
public void testArrayOfObjectsDeserialization() throws Exception { [EOL]     String json = "[1,'abc',{a:1},5]"; [EOL]     try { [EOL]         gson.fromJson(json, Object[].class); [EOL]         fail("This is crazy....how did we deserialize it!!!"); [EOL]     } catch (JsonParseException expected) { [EOL]     } [EOL] }
public void testCustomAdapterInvokedForMapElementSerialization() { [EOL]     Gson gson = new GsonBuilder().registerTypeAdapter(StringHolder.class, new StringHolderTypeAdapter()).create(); [EOL]     StringHolder holder = new StringHolder("Jacob", "Tomaw"); [EOL]     Map<String, StringHolder> mapOfHolders = new HashMap<String, StringHolder>(); [EOL]     mapOfHolders.put("foo", holder); [EOL]     String json = gson.toJson(mapOfHolders); [EOL]     assertTrue(json.contains("\"foo\":\"Jacob:Tomaw\"")); [EOL] }
public void testCustomAdapterInvokedForMapElementSerialization() { [EOL]     Gson gson = new GsonBuilder().registerTypeAdapter(StringHolder.class, new StringHolderTypeAdapter()).create(); [EOL]     StringHolder holder = new StringHolder("Jacob", "Tomaw"); [EOL]     Map<String, StringHolder> mapOfHolders = new HashMap<String, StringHolder>(); [EOL]     mapOfHolders.put("foo", holder); [EOL]     String json = gson.toJson(mapOfHolders); [EOL]     assertTrue(json.contains("\"foo\":\"Jacob:Tomaw\"")); [EOL] }
public void testCustomAdapterInvokedForMapElementSerialization() { [EOL]     Gson gson = new GsonBuilder().registerTypeAdapter(StringHolder.class, new StringHolderTypeAdapter()).create(); [EOL]     StringHolder holder = new StringHolder("Jacob", "Tomaw"); [EOL]     Map<String, StringHolder> mapOfHolders = new HashMap<String, StringHolder>(); [EOL]     mapOfHolders.put("foo", holder); [EOL]     String json = gson.toJson(mapOfHolders); [EOL]     assertTrue(json.contains("\"foo\":\"Jacob:Tomaw\"")); [EOL] }
public void testCustomAdapterInvokedForMapElementSerialization() { [EOL]     Gson gson = new GsonBuilder().registerTypeAdapter(StringHolder.class, new StringHolderTypeAdapter()).create(); [EOL]     StringHolder holder = new StringHolder("Jacob", "Tomaw"); [EOL]     Map<String, StringHolder> mapOfHolders = new HashMap<String, StringHolder>(); [EOL]     mapOfHolders.put("foo", holder); [EOL]     String json = gson.toJson(mapOfHolders); [EOL]     assertTrue(json.contains("\"foo\":\"Jacob:Tomaw\"")); [EOL] }
public void testObjectArrayWithNonPrimitivesSerialization() throws Exception { [EOL]     ClassWithObjects classWithObjects = new ClassWithObjects(); [EOL]     BagOfPrimitives bagOfPrimitives = new BagOfPrimitives(); [EOL]     String classWithObjectsJson = gson.toJson(classWithObjects); [EOL]     String bagOfPrimitivesJson = gson.toJson(bagOfPrimitives); [EOL]     Object[] objects = new Object[] { classWithObjects, bagOfPrimitives }; [EOL]     String json = gson.toJson(objects); [EOL]     assertTrue(json.contains(classWithObjectsJson)); [EOL]     assertTrue(json.contains(bagOfPrimitivesJson)); [EOL] }
public void testObjectArrayWithNonPrimitivesSerialization() throws Exception { [EOL]     ClassWithObjects classWithObjects = new ClassWithObjects(); [EOL]     BagOfPrimitives bagOfPrimitives = new BagOfPrimitives(); [EOL]     String classWithObjectsJson = gson.toJson(classWithObjects); [EOL]     String bagOfPrimitivesJson = gson.toJson(bagOfPrimitives); [EOL]     Object[] objects = new Object[] { classWithObjects, bagOfPrimitives }; [EOL]     String json = gson.toJson(objects); [EOL]     assertTrue(json.contains(classWithObjectsJson)); [EOL]     assertTrue(json.contains(bagOfPrimitivesJson)); [EOL] }
public void testObjectArrayWithNonPrimitivesSerialization() throws Exception { [EOL]     ClassWithObjects classWithObjects = new ClassWithObjects(); [EOL]     BagOfPrimitives bagOfPrimitives = new BagOfPrimitives(); [EOL]     String classWithObjectsJson = gson.toJson(classWithObjects); [EOL]     String bagOfPrimitivesJson = gson.toJson(bagOfPrimitives); [EOL]     Object[] objects = new Object[] { classWithObjects, bagOfPrimitives }; [EOL]     String json = gson.toJson(objects); [EOL]     assertTrue(json.contains(classWithObjectsJson)); [EOL]     assertTrue(json.contains(bagOfPrimitivesJson)); [EOL] }
public void testObjectArrayWithNonPrimitivesSerialization() throws Exception { [EOL]     ClassWithObjects classWithObjects = new ClassWithObjects(); [EOL]     BagOfPrimitives bagOfPrimitives = new BagOfPrimitives(); [EOL]     String classWithObjectsJson = gson.toJson(classWithObjects); [EOL]     String bagOfPrimitivesJson = gson.toJson(bagOfPrimitives); [EOL]     Object[] objects = new Object[] { classWithObjects, bagOfPrimitives }; [EOL]     String json = gson.toJson(objects); [EOL]     assertTrue(json.contains(classWithObjectsJson)); [EOL]     assertTrue(json.contains(bagOfPrimitivesJson)); [EOL] }
public void testDefaultNestedStaticClassIncluded() throws Exception { [EOL]     Gson gson = new Gson(); [EOL]     Outer.Inner target = outer.new Inner(VALUE); [EOL]     String result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL]     gson = new GsonBuilder().create(); [EOL]     target = outer.new Inner(VALUE); [EOL]     result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL] }
public void testDefaultNestedStaticClassIncluded() throws Exception { [EOL]     Gson gson = new Gson(); [EOL]     Outer.Inner target = outer.new Inner(VALUE); [EOL]     String result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL]     gson = new GsonBuilder().create(); [EOL]     target = outer.new Inner(VALUE); [EOL]     result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL] }
public void testDefaultNestedStaticClassIncluded() throws Exception { [EOL]     Gson gson = new Gson(); [EOL]     Outer.Inner target = outer.new Inner(VALUE); [EOL]     String result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL]     gson = new GsonBuilder().create(); [EOL]     target = outer.new Inner(VALUE); [EOL]     result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL] }
public void testDefaultNestedStaticClassIncluded() throws Exception { [EOL]     Gson gson = new Gson(); [EOL]     Outer.Inner target = outer.new Inner(VALUE); [EOL]     String result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL]     gson = new GsonBuilder().create(); [EOL]     target = outer.new Inner(VALUE); [EOL]     result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL] }
public void testDefaultNestedStaticClassIncluded() throws Exception { [EOL]     Gson gson = new Gson(); [EOL]     Outer.Inner target = outer.new Inner(VALUE); [EOL]     String result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL]     gson = new GsonBuilder().create(); [EOL]     target = outer.new Inner(VALUE); [EOL]     result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL] }
public void testDefaultNestedStaticClassIncluded() throws Exception { [EOL]     Gson gson = new Gson(); [EOL]     Outer.Inner target = outer.new Inner(VALUE); [EOL]     String result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL]     gson = new GsonBuilder().create(); [EOL]     target = outer.new Inner(VALUE); [EOL]     result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL] }
public void testDefaultNestedStaticClassIncluded() throws Exception { [EOL]     Gson gson = new Gson(); [EOL]     Outer.Inner target = outer.new Inner(VALUE); [EOL]     String result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL]     gson = new GsonBuilder().create(); [EOL]     target = outer.new Inner(VALUE); [EOL]     result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL] }
public void testDefaultNestedStaticClassIncluded() throws Exception { [EOL]     Gson gson = new Gson(); [EOL]     Outer.Inner target = outer.new Inner(VALUE); [EOL]     String result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL]     gson = new GsonBuilder().create(); [EOL]     target = outer.new Inner(VALUE); [EOL]     result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL] }
public void testDefaultNestedStaticClassIncluded() throws Exception { [EOL]     Gson gson = new Gson(); [EOL]     Outer.Inner target = outer.new Inner(VALUE); [EOL]     String result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL]     gson = new GsonBuilder().create(); [EOL]     target = outer.new Inner(VALUE); [EOL]     result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL] }
public void testDefaultNestedStaticClassIncluded() throws Exception { [EOL]     Gson gson = new Gson(); [EOL]     Outer.Inner target = outer.new Inner(VALUE); [EOL]     String result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL]     gson = new GsonBuilder().create(); [EOL]     target = outer.new Inner(VALUE); [EOL]     result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL] }
public void testDefaultNestedStaticClassIncluded() throws Exception { [EOL]     Gson gson = new Gson(); [EOL]     Outer.Inner target = outer.new Inner(VALUE); [EOL]     String result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL]     gson = new GsonBuilder().create(); [EOL]     target = outer.new Inner(VALUE); [EOL]     result = gson.toJson(target); [EOL]     assertEquals(target.toJson(), result); [EOL] }
public void testAddingBooleanProperties() throws Exception { [EOL]     String propertyName = "property"; [EOL]     JsonObject jsonObj = new JsonObject(); [EOL]     jsonObj.addProperty(propertyName, true); [EOL]     assertTrue(jsonObj.has(propertyName)); [EOL]     JsonElement jsonElement = jsonObj.get(propertyName); [EOL]     assertNotNull(jsonElement); [EOL]     assertTrue(jsonElement.getAsBoolean()); [EOL] }
public void testAddingBooleanProperties() throws Exception { [EOL]     String propertyName = "property"; [EOL]     JsonObject jsonObj = new JsonObject(); [EOL]     jsonObj.addProperty(propertyName, true); [EOL]     assertTrue(jsonObj.has(propertyName)); [EOL]     JsonElement jsonElement = jsonObj.get(propertyName); [EOL]     assertNotNull(jsonElement); [EOL]     assertTrue(jsonElement.getAsBoolean()); [EOL] }
public void testAddingBooleanProperties() throws Exception { [EOL]     String propertyName = "property"; [EOL]     JsonObject jsonObj = new JsonObject(); [EOL]     jsonObj.addProperty(propertyName, true); [EOL]     assertTrue(jsonObj.has(propertyName)); [EOL]     JsonElement jsonElement = jsonObj.get(propertyName); [EOL]     assertNotNull(jsonElement); [EOL]     assertTrue(jsonElement.getAsBoolean()); [EOL] }
public void testAddingBooleanProperties() throws Exception { [EOL]     String propertyName = "property"; [EOL]     JsonObject jsonObj = new JsonObject(); [EOL]     jsonObj.addProperty(propertyName, true); [EOL]     assertTrue(jsonObj.has(propertyName)); [EOL]     JsonElement jsonElement = jsonObj.get(propertyName); [EOL]     assertNotNull(jsonElement); [EOL]     assertTrue(jsonElement.getAsBoolean()); [EOL] }
public void testParseMixedArray() { [EOL]     String json = "[{},13,\"stringValue\"]"; [EOL]     JsonElement e = parser.parse(json); [EOL]     assertTrue(e.isJsonArray()); [EOL]     JsonArray array = e.getAsJsonArray(); [EOL]     assertEquals("{}", array.get(0).toString()); [EOL]     assertEquals(13, array.get(1).getAsInt()); [EOL]     assertEquals("stringValue", array.get(2).getAsString()); [EOL] }
