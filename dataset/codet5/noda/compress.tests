@Test public void testGzipCompressorOutputStream() throws Exception { ByteArrayOutputStream baos = new ByteArrayOutputStream(); GzipCompressorOutputStream compressor = new GzipCompressorOutputStream(baos); compressor.write(1); compressor.write(2); compressor.close(); byte[] bytes = baos.toByteArray(); Assert.assertEquals(new Integer(1), new Integer(bytes[0]).intValue()); Assert.assertEquals(new Integer(2), new Integer(bytes[1]).intValue()); Assert.assertEquals(new Integer(3), new Integer(bytes[2]).intValue()); Assert.assertEquals(new Integer(4), new Integer(bytes[3]).intValue()); Assert.assertEquals(
@Test public void testGzipCompressorOutputStream() throws Exception { ByteArrayOutputStream outputStream = new ByteArrayOutputStream(); GzipCompressorOutputStream compressor = new GzipCompressorOutputStream(outputStream); compressor.write(1); compressor.write(2); compressor.close(); byte[] bytes = outputStream.toByteArray(); Assert.assertEquals(new Integer(1), new Integer(bytes[0]).intValue()); Assert.assertEquals(new Integer(2), new Integer(bytes[1]).intValue()); Assert.assertEquals(new Integer(3), new Integer(bytes[2]).intValue()); Assert.assertEquals(new Integer(4), new Integer(bytes[3]).intValue()); Assert.assertEquals(
@Test public void testWrite() throws IOException { ByteArrayOutputStream outputStream = new ByteArrayOutputStream(); GZIPCompressorOutputStream compressor = new GZIPCompressorOutputStream(outputStream); int[] data = new int[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16}; int[] expected = new int[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16}; int[] actual = new int[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15
@Test public void testWrite() throws IOException { ByteArrayOutputStream outputStream = new ByteArrayOutputStream(); GZIPCompressorOutputStream compressor = new GZIPCompressorOutputStream(outputStream); compressor.write(1); compressor.write(2); compressor.write(3); Assert.assertEquals("1\\n2\\n3\\n", new String(outputStream.toByteArray())); }
@Test public void close() throws IOException { GzipCompressorOutputStream testStream = new GzipCompressorOutputStream(new ByteArrayOutputStream()); testStream.close(); testStream.close(); testStream.close(); testStream.close(); }
@Test public void testClose() throws IOException { GzipCompressorOutputStream testStream = new GzipCompressorOutputStream(new ByteArrayOutputStream()); testStream.close(); testStream.close(); }
@Test public void testClone() { ZipLong l1 = new ZipLong(1); ZipLong l2 = (ZipLong) l1.clone(); assertEquals(l1.value, l2.value); }
@Test public void testClone() { ZipLong l1 = new ZipLong(1); ZipLong l2 = (ZipLong) l1.clone(); assertEquals(l1.value, l2.value); }
@Test public void testClone() { ZipLong l1 = new ZipLong(1); ZipLong l2 = (ZipLong) l1.clone(); assertEquals(l1.value, l2.value); }
@Test public void testZipShort() { byte[] bytes = new byte[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
@Test public void testZipShort() { byte[] bytes = new byte[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
@Test public void testGetBytes() { ZipShort l = new ZipShort(1); byte[] bytes = l.getBytes(); assertArrayEquals(l.value, 1); assertArrayEquals(l.bytes, l.getBytes()); l = new ZipShort(256); bytes = l.getBytes(); assertArrayEquals(l.value, 256); assertArrayEquals(l.bytes, l.getBytes(256)); l = new ZipShort(256); bytes = l.getBytes(256); assertArrayEquals(l.value, 256); assertArrayEquals(l.bytes, l.getBytes(256)); }
@Test public void testGetBytes() { System.out.println("getBytes"); ZipShort instance = new ZipShort(1); byte[] expResult = new byte[2]; byte[] result = instance.getBytes(1); assertArrayEquals(expResult, result); instance = new ZipShort(2); expResult = new byte[2]; result = instance.getBytes(2); assertArrayEquals(expResult, result); instance = new ZipShort(3); expResult = new byte[2]; result = instance.getBytes(3); assertArrayEquals(expResult, result); instance = new ZipShort(4); expResult = new byte[2]; result = instance.getBytes
@Test public void testGetBytes() { ZipShort l = new ZipShort(Short.MAX_VALUE); byte[] bytes = l.getBytes(); assertArrayEquals(new byte[] { (byte) (Short.MAX_VALUE << 2), (byte) (Short.MAX_VALUE << 1), (byte) (Short.MAX_VALUE << 2), (byte) (Short.MAX_VALUE << 1), (byte) (Short.MAX_VALUE << 2), (byte) (Short.MAX_VALUE << 2) }, bytes); }
@Test public void testGetBytes() throws Exception { ZipShort z = new ZipShort(Short.MAX_VALUE); byte[] bytes = z.getBytes(); assertArrayEquals(new byte[] { (byte) 0x00, (byte) 0x00, (byte) 0x00 }, bytes); z = new ZipShort(Short.MIN_VALUE); bytes = z.getBytes(); assertArrayEquals(new byte[] { (byte) 0x00, (byte) 0x00, (byte) 0x00 }, bytes); z = new ZipShort(Short.MAX_VALUE, 0); bytes = z.getBytes(); assertArrayEquals(new byte[] { (byte) 0
@Test public void testGetBytes() { ZipShort l = new ZipShort(1); byte[] bytes = l.getBytes(); assertArrayEquals(l.value, 1); assertArrayEquals(l.bytes, bytes); l = new ZipShort(2); bytes = l.getBytes(); assertArrayEquals(l.value, 2); assertArrayEquals(l.bytes, bytes); l = new ZipShort(3); bytes = l.getBytes(); assertArrayEquals(l.value, 3); assertArrayEquals(l.bytes, bytes); l = new ZipShort(4); bytes = l.getBytes(); assertArrayEquals(l.value, 4); assertArrayEquals(l
@Test public void testCreateArchiveInputStream() throws Exception { final ArchiveInputStream is = new TarArchiveInputStream(new ByteArrayInputStream(new byte[] {1, 2, 3})).createArchiveInputStream("tar", new ByteArrayInputStream(new byte[] {1, 2, 3})); assertTrue(is instanceof TarArchiveInputStream); }
@Test public void testZipArchive() throws Exception { File zipFile = null; try { zipFile = new ZipFile("src/test/resources/testzip.zip"); } catch (IOException e) { e.printStackTrace(); } try { zipFile = new ZipFile("src/test/resources/testzip.zip"); } catch (IOException e) { e.printStackTrace(); } try { zipFile = new ZipFile("src/test/resources/testzip.zip"); } catch (IOException e) { e.printStackTrace(); } try { zipFile = new ZipFile("src/test/resources/testzip.zip"); } catch (IOException e) { e.printStackTrace(); } try { zipFile = new ZipFile("src
@Test public void testZipArchive() throws Exception { File zipFile = null; try { zipFile = new ZipFile(zipFile); } catch (IOException e) { e.printStackTrace(); } try { zipFile = new ZipFile(zipFile, "UTF-8"); } catch (IOException e) { e.printStackTrace(); } try { zipFile = new ZipFile(zipFile, "UTF-8"); } catch (IOException e) { e.printStackTrace(); } try { zipFile = new ZipFile(zipFile, "UTF-8"); } catch (IOException e) { e.printStackTrace(); } try { zipFile = new ZipFile(zipFile, "UTF-8"); } catch (IOException e) { e.print
@Test public void testZipArchive() throws Exception { File zipFile = null; try { zipFile = new ZipFile(zipFile); } catch (IOException e) { e.printStackTrace(); } try { zipFile = new ZipFile(zipFile); } catch (IOException e) { e.printStackTrace(); } try { zipFile = new ZipFile(zipFile, "UTF-8"); } catch (IOException e) { e.printStackTrace(); } try { zipFile = new ZipFile(zipFile, "UTF-8"); } catch (IOException e) { e.printStackTrace(); } try { zipFile = new ZipFile(zipFile, "UTF-8"); } catch (IOException e) { e.printStackTrace(); } }
@Test public void testZipArchive() throws Exception { File zipFile = null; try { zipFile = new ZipFile(zipFile); } catch (IOException e) { e.printStackTrace(); } try { zipFile = new ZipFile(zipFile); } catch (IOException e) { e.printStackTrace(); } try { zipFile = new ZipFile(zipFile, "UTF-8"); } catch (IOException e) { e.printStackTrace(); } try { zipFile = new ZipFile(zipFile, "UTF-8"); } catch (IOException e) { e.printStackTrace(); } try { zipFile = new ZipFile(zipFile, "UTF-8"); } catch (IOException e) { e.printStackTrace(); } }
@Test public void testZipArchive() throws Exception { File zipFile = null; try { zipFile = new ZipFile("testzip.zip"); } catch (IOException e) { e.printStackTrace(); } try { zipFile = new ZipFile("testzip.zip"); } catch (IOException e) { e.printStackTrace(); } try { zipFile = new ZipFile("testzip.zip"); } catch (IOException e) { e.printStackTrace(); } try { zipFile = new ZipFile("testzip.zip"); } catch (IOException e) { e.printStackTrace(); } try { zipFile = new ZipFile("testzip.zip"); } catch (IOException e) { e.printStackTrace(); } ZipArchiveEntry ze = zipFile.
@Test public void testZipArchive() throws Exception { File zipFile = null; try { zipFile = new ZipFile(zipFile); } catch (IOException e) { e.printStackTrace(); } try { zipFile = new ZipFile(zipFile, "UTF-8"); } catch (IOException e) { e.printStackTrace(); } try { zipFile = new ZipFile(zipFile, "UTF-8"); } catch (IOException e) { e.printStackTrace(); } try { zipFile = new ZipFile(zipFile, "UTF-8"); } catch (IOException e) { e.printStackTrace(); } try { zipFile = new ZipFile(zipFile, "UTF-8"); } catch (IOException e) { e.print
@Test public void testZipArchive() throws Exception { File zipFile = new File("src/test/resources/ziptest.zip"); ZipArchiveEntry ze = new ZipArchiveEntry(zipFile); String encoding = "UTF-8"; boolean useUnicodeExtraFields = false; try { ZipUtil.zipArchive(zipFile, encoding, useUnicodeExtraFields); } catch (IOException e) { e.printStackTrace(); } ZipArchiveEntry[] entries = zipFile.getEntries(); assertEquals(1, entries.length); assertEquals(1, entries[0].getHashSize()); assertEquals(1, entries[0].getWordSize()); assertEquals(1, entries[0].getSize()); assertEquals
@Test public void testZipArchive() throws Exception { File zipFile = null; try { zipFile = new ZipFile("src/test/resources/zip/test.zip"); } catch (IOException e) { e.printStackTrace(); } try { zipFile = new ZipFile("src/test/resources/zip/test.zip"); } catch (IOException e) { e.printStackTrace(); } try { zipFile = new ZipFile("src/test/resources/zip/test.zip"); } catch (IOException e) { e.printStackTrace(); } try { zipFile = new ZipFile("src/test/resources/zip/test.zip"); } catch (IOException e) { e.printStackTrace(); } try { zipFile =
@Test public void testZipArchive() throws Exception { File zipFile = null; try { zipFile = new ZipFile(zipFile); } catch (IOException e) { e.printStackTrace(); } try { zipFile = new ZipFile(zipFile, "UTF-8"); } catch (IOException e) { e.printStackTrace(); } try { zipFile = new ZipFile(zipFile, "UTF-8"); } catch (IOException e) { e.printStackTrace(); } try { zipFile = new ZipFile(zipFile, "UTF-8"); } catch (IOException e) { e.printStackTrace(); } try { zipFile = new ZipFile(zipFile, "UTF-8"); } catch (IOException e) { e.print
@Test public void testZipArchive() throws Exception { File zipFile = null; try { zipFile = new ZipFile(zipFile); } catch (IOException e) { e.printStackTrace(); } try { zipFile = new ZipFile(zipFile, "UTF-8"); } catch (IOException e) { e.printStackTrace(); } try { zipFile = new ZipFile(zipFile, "UTF-8"); } catch (IOException e) { e.printStackTrace(); } try { zipFile = new ZipFile(zipFile, "UTF-8"); } catch (IOException e) { e.printStackTrace(); } try { zipFile = new ZipFile(zipFile, "UTF-8"); } catch (IOException e) { e.print
@Test public void testZipArchive() throws Exception { File zipFile = null; try { zipFile = new ZipFile(zipFile); } catch (IOException e) { e.printStackTrace(); } try { zipFile = new ZipFile(zipFile); } catch (IOException e) { e.printStackTrace(); } try { zipFile = new ZipFile(zipFile, "UTF-8"); } catch (IOException e) { e.printStackTrace(); } try { zipFile = new ZipFile(zipFile, "UTF-8"); } catch (IOException e) { e.printStackTrace(); } try { zipFile = new ZipFile(zipFile, "UTF-8"); } catch (IOException e) { e.printStackTrace(); } }
@Test public void testZipArchive() throws Exception { File f = new File("src/test/resources/testzip.zip"); File f2 = new File("src/test/resources/testzip2.zip"); File f3 = new File("src/test/resources/testzip3.zip"); File f4 = new File("src/test/resources/testzip4.zip"); File f5 = new File("src/test/resources/testzip5.zip"); File f6 = new File("src/test/resources/testzip6.zip"); File f7 = new File("src/test/resources/testzip7.zip"); File f8 = new File
@Test public void testZipArchive() throws Exception { File f = null; try { f = new File("src/test/resources/testzip.zip"); } catch (IOException e) { e.printStackTrace(); fail(); } try { f = new File("src/test/resources/testzip.zip"); } catch (IOException e) { e.printStackTrace(); fail(); } try { f = new File("src/test/resources/testzip.zip"); } catch (IOException e) { e.printStackTrace(); fail(); } try { f = new File("src/test/resources/testzip.zip"); } catch (IOException e) { e.printStackTrace(); fail(); }
@Test public void testCloseQuietly() throws IOException { File f = null; try { f = File.createTempFile("test", ".zip"); f.deleteOnExit(); } catch (IOException e) { e.printStackTrace(); } try { f = File.createTempFile("test", ".zip"); f.deleteOnExit(); } catch (IOException e) { e.printStackTrace(); } try { f = File.createTempFile("test", ".zip"); f.deleteOnExit(); } catch (IOException e) { e.printStackTrace(); } try { f = File.createTempFile("test", ".zip"); f.deleteOnExit(); } catch (IOException e) { e.printStackTrace(); }
@Test public void testCloseQuietly() throws Exception { File f = File.createTempFile("test", ".zip"); try { f.deleteOnExit(); ZipArchiveEntry ze = new ZipArchiveEntry(new File(f.getAbsolutePath())); ze.setName("test"); ze.setSize(1024); ze.setCentralDir(new File(f.getAbsolutePath())); Zip.closeQuietly(ze); } finally { f.delete(); } f = File.createTempFile("test", ".zip"); try { f.deleteOnExit(); Zip.closeQuietly(f); } catch (IOException e) { e.printStackTrace(); } f = File.createTempFile("test",
@Test public void testCloseQuietly() throws IOException { File f = new File("target/test.zip"); try { f.createNewFile(); ZipArchiveEntry ze = new ZipArchiveEntry(f.getParentFile()); ze.setName("test.txt"); ze.setSize(1024); ze.setContent(new FileInputStream(f)); try { Zip.closeQuietly(ze); } catch (ZipException e) { Assert.fail(e.getMessage()); } } finally { f.delete(); } f = new File("target/test.zip"); try { f.createNewFile(); ZipArchiveEntry ze = new ZipArchiveEntry(f.getParentFile()); ze.setName("
@Test public void testCloseQuietly() throws IOException { File f = File.createTempFile("test", ".zip"); try { f.deleteOnExit(); ZipArchiveEntry ze = new ZipArchiveEntry(new File(f.getAbsolutePath())); ze.setName("test"); ze.setSize(1024); ze.setContent(new FileInputStream(f)); Zip.closeQuietly(ze); } finally { f.delete(); } f = File.createTempFile("test", ".zip"); try { f.deleteOnExit(); Zip.closeQuietly(ze); } catch (IOException e) { e.printStackTrace(); } f = File.createTempFile("test", ".zip"); f.setName
@Test public void testGetEntries() { try { Enumeration e1 = zip.getEntries(); Enumeration e2 = zip.getEntries(); assertTrue(e1.hasMoreElements()); assertTrue(e2.hasMoreElements()); assertTrue(e1.hasMoreElements()); assertTrue(e2.hasMoreElements()); Enumeration e3 = zip.getEntries(); assertTrue(e3.hasMoreElements()); assertTrue(e3.hasMoreElements()); assertTrue(e3.hasMoreElements()); assertTrue(e3.hasMoreElements()); assertTrue(e3.hasMoreElements()); assertTrue(e3.hasMoreElements()); assertTrue(e3.hasMoreElements());
@Test public void testGetEntries() { try { ZipArchiveEntry ze = new ZipArchiveEntry(this.getClass().getResourceAsStream("/test.zip")); ze.addEntry("foo", "bar"); ze.addEntry("baz", "baz"); Enumeration e = ze.getEntries(); assertEquals("foo", e.nextElement()); assertEquals("bar", e.nextElement()); e = ze.getEntries(); assertEquals("baz", e.nextElement()); assertEquals("baz", e.nextElement()); e = ze.getEntries(); assertEquals("foo", e.nextElement()); assertEquals("baz", e.nextElement()); e = ze.get
@Test public void populateFromCentralDirectory() throws IOException { HttpServletRequest request = mock(HttpServletRequest.class); HttpServletResponse response = mock(HttpServletResponse.class); HttpSession session = mock(HttpSession.class); HttpSessionFactory sessionFactory = mock(HttpSessionFactory.class); when(request.getSession(anyBoolean())).thenReturn(session); when(response.getSession(anyBoolean())).thenReturn(sessionFactory); when(response.getSession(anyBoolean())).thenReturn(session); when(sessionFactory.getHttpSession(anyBoolean())).thenReturn(request); when(request.getScheme()).thenReturn("http"); when(request.getServerName()).thenReturn("localhost
@Test public void populateFromCentralDirectory() throws IOException { HttpServletRequest request = mock(HttpServletRequest.class); HttpServletResponse response = mock(HttpServletResponse.class); HttpSession session = mock(HttpSession.class); HttpSessionFactory sessionFactory = mock(HttpSessionFactory.class); when(request.getSession(anyBoolean())).thenReturn(session); when(response.getSession(anyBoolean())).thenReturn(sessionFactory); when(response.getSession(anyBoolean())).thenReturn(session); when(sessionFactory.getHttpSession(anyString())).thenReturn(request); when(request.getScheme()).thenReturn("http"); when(request.getServerName()).thenReturn("localhost
@Test public void populateFromCentralDirectory() throws IOException { HttpServletRequest request = EasyMock.createMock(HttpServletRequest.class); HttpServletResponse response = EasyMock.createMock(HttpServletResponse.class); HttpServletResponse response2 = EasyMock.createMock(HttpServletResponse.class); HttpServletRequest request3 = EasyMock.createMock(HttpServletRequest.class); HttpServletResponse response4 = EasyMock.createMock(HttpServletResponse.class); HttpServletRequest request5 = EasyMock.createMock(HttpServletRequest.class); HttpServletResponse response6 = EasyMock.createMock(HttpServletResponse.class); HttpServletRequest request7 = EasyMock.createMock(HttpServletRequest.class); HttpServletResponse response8 = EasyMock.createMock(HttpServletResponse.class); HttpServletResponse response
@Test public void populateFromCentralDirectory() throws IOException { HttpServletRequest request = EasyMock.createMock(HttpServletRequest.class); HttpServletResponse response = EasyMock.createMock(HttpServletResponse.class); HttpServletResponse response2 = EasyMock.createMock(HttpServletResponse.class); HttpServletRequest request3 = EasyMock.createMock(HttpServletRequest.class); HttpServletResponse response4 = EasyMock.createMock(HttpServletResponse.class); HttpServletRequest request5 = EasyMock.createMock(HttpServletRequest.class); HttpServletResponse response6 = EasyMock.createMock(HttpServletResponse.class); HttpServletRequest request7 = EasyMock.createMock(HttpServletRequest.class); HttpServletResponse response8 = EasyMock.createMock(HttpServletResponse.class); HttpServletResponse response
@Test public void populateFromCentralDirectory() throws IOException { HttpServletRequest request = EasyMock.createMock(HttpServletRequest.class); HttpServletResponse response = EasyMock.createMock(HttpServletResponse.class); HttpServletResponse response2 = EasyMock.createMock(HttpServletResponse.class); HttpServletRequest request3 = EasyMock.createMock(HttpServletRequest.class); HttpServletResponse response4 = EasyMock.createMock(HttpServletResponse.class); HttpServletRequest request5 = EasyMock.createMock(HttpServletRequest.class); HttpServletResponse response6 = EasyMock.createMock(HttpServletResponse.class); HttpServletRequest request7 = EasyMock.createMock(HttpServletRequest.class); HttpServletResponse response8 = EasyMock.createMock(HttpServletResponse.class); HttpServletResponse response
@Test public void populateFromCentralDirectory() throws IOException { HttpServletRequest request = createMock(HttpServletRequest.class); HttpServletResponse response = createMock(HttpServletResponse.class); HttpSession session = createMock(HttpSession.class); expect(request.getSession(false)).andReturn(session); expect(session.getAttribute(isA(HttpAttribute.class))).andReturn(null); expect(request.getAttribute(isA(HttpAttribute.class))).andReturn(null); expect(response.getAttribute(isA(HttpAttribute.class))).andReturn(null); expect(response.getAttribute(isA(HttpAttribute.class))).andReturn(null); expect(response
@Test public void populateFromCentralDirectory() throws IOException { HttpServletRequest request = EasyMock.createMock(HttpServletRequest.class); HttpServletResponse response = EasyMock.createMock(HttpServletResponse.class); HttpServletResponse response2 = EasyMock.createMock(HttpServletResponse.class); HttpServletRequest request3 = EasyMock.createMock(HttpServletRequest.class); HttpServletResponse response4 = EasyMock.createMock(HttpServletResponse.class); HttpServletRequest request5 = EasyMock.createMock(HttpServletRequest.class); HttpServletResponse response6 = EasyMock.createMock(HttpServletResponse.class); HttpServletRequest request7 = EasyMock.createMock(HttpServletRequest.class); HttpServletResponse response8 = EasyMock.createMock(HttpServletResponse.class); HttpServletResponse response
@Test public void populateFromCentralDirectory() throws IOException { HttpServletRequest request = mock(HttpServletRequest.class); when(request.getScheme()).thenReturn("http"); HttpServletResponse response = mock(HttpServletResponse.class); CloseableHttpClient httpClient = mock(CloseableHttpClient.class); CloseableHttpClient closeableHttpClient = mock(CloseableHttpClient.class); when(httpClient.execute(any(HttpGet.class))).thenReturn(response); when(response.getStatusLine()).thenReturn(new BasicStatusLine(HttpVersion.HTTP_1_1, 200, "OK", "")); when(response.getStatusLine()).thenReturn(new BasicStatusLine(HttpVersion.HTTP_1
@Test public void populateFromCentralDirectory() throws IOException { HttpServletRequest request = createMock(HttpServletRequest.class); HttpServletResponse response = createMock(HttpServletResponse.class); HttpServletResponse response2 = createMock(HttpServletResponse.class); HttpServletRequest request3 = createMock(HttpServletRequest.class); HttpServletResponse response4 = createMock(HttpServletResponse.class); HttpServletRequest request5 = createMock(HttpServletRequest.class); HttpServletResponse response6 = createMock(HttpServletResponse.class); HttpServletRequest request7 = createMock(HttpServletRequest.class); HttpServletResponse response8 = createMock(HttpServletResponse.class); HttpSession session = createMock(HttpSession.class); HttpSession session2 = createMock(HttpSession.class); HttpSession session3 = createMock
@Test public void populateFromCentralDirectory() throws IOException { HttpServletRequest request = EasyMock.createMock(HttpServletRequest.class); HttpServletResponse response = EasyMock.createMock(HttpServletResponse.class); HttpServletResponse response2 = EasyMock.createMock(HttpServletResponse.class); HttpServletRequest request3 = EasyMock.createMock(HttpServletRequest.class); HttpServletResponse response4 = EasyMock.createMock(HttpServletResponse.class); HttpServletRequest request5 = EasyMock.createMock(HttpServletRequest.class); HttpServletResponse response6 = EasyMock.createMock(HttpServletResponse.class); HttpServletRequest request7 = EasyMock.createMock(HttpServletRequest.class); HttpServletResponse response8 = EasyMock.createMock(HttpServletResponse.class); HttpServletResponse response
@Test public void populateFromCentralDirectory() throws IOException { HttpServletRequest request = createMock(HttpServletRequest.class); HttpServletResponse response = createMock(HttpServletResponse.class); HttpSession session = createMock(HttpSession.class); expect(request.getSession(false)).andReturn(session); expect(session.getAttribute(isA(HttpAttribute.class))).andReturn(null); expect(request.getAttribute(isA(HttpAttribute.class))).andReturn(null); expect(response.getAttribute(isA(HttpAttribute.class))).andReturn(null); expect(response.getAttribute(isA(HttpAttribute.class))).andReturn(null); expect(response
@Test public void populateFromCentralDirectory() throws IOException { HttpServletRequest request = EasyMock.createMock(HttpServletRequest.class); HttpServletResponse response = EasyMock.createMock(HttpServletResponse.class); HttpServletResponse response2 = EasyMock.createMock(HttpServletResponse.class); HttpServletRequest request3 = EasyMock.createMock(HttpServletRequest.class); HttpServletResponse response4 = EasyMock.createMock(HttpServletResponse.class); HttpServletRequest request5 = EasyMock.createMock(HttpServletRequest.class); HttpServletResponse response6 = EasyMock.createMock(HttpServletResponse.class); HttpServletRequest request7 = EasyMock.createMock(HttpServletRequest.class); HttpServletResponse response8 = EasyMock.createMock(HttpServletResponse.class); HttpServletResponse response
@Test public void populateFromCentralDirectory() throws IOException { HttpServletRequest request = EasyMock.createMock(HttpServletRequest.class); HttpServletResponse response = EasyMock.createMock(HttpServletResponse.class); HttpServletResponse response2 = EasyMock.createMock(HttpServletResponse.class); HttpServletRequest request3 = EasyMock.createMock(HttpServletRequest.class); HttpServletResponse response4 = EasyMock.createMock(HttpServletResponse.class); HttpServletRequest request5 = EasyMock.createMock(HttpServletRequest.class); HttpServletResponse response6 = EasyMock.createMock(HttpServletResponse.class); HttpServletRequest request7 = EasyMock.createMock(HttpServletRequest.class); HttpServletResponse response8 = EasyMock.createMock(HttpServletResponse.class); HttpServletResponse response
@Test public void populateFromCentralDirectory() throws IOException { HttpServletRequest request = mock(HttpServletRequest.class); HttpServletResponse response = mock(HttpServletResponse.class); HttpSession session = mock(HttpSession.class); HttpSessionFactory sessionFactory = mock(HttpSessionFactory.class); when(request.getSession(anyBoolean())).thenReturn(session); when(session.getAttribute(HttpSession.REQUEST)).thenReturn(request); when(request.getSessionFactory()).thenReturn(sessionFactory); when(request.getServerName()).thenReturn("localhost"); when(request.getScheme()).thenReturn("http"); when(request.getServerName()).thenReturn("localhost"); when(request.
@Test public void populateFromCentralDirectory() throws IOException { HttpServletRequest request = EasyMock.createMock(HttpServletRequest.class); HttpServletResponse response = EasyMock.createMock(HttpServletResponse.class); HttpServletResponse response2 = EasyMock.createMock(HttpServletResponse.class); HttpServletRequest request3 = EasyMock.createMock(HttpServletRequest.class); HttpServletResponse response4 = EasyMock.createMock(HttpServletResponse.class); HttpServletRequest request5 = EasyMock.createMock(HttpServletRequest.class); HttpServletResponse response6 = EasyMock.createMock(HttpServletResponse.class); HttpServletRequest request7 = EasyMock.createMock(HttpServletRequest.class); HttpServletResponse response8 = EasyMock.createMock(HttpServletResponse.class); HttpServletResponse response
@Test public void populateFromCentralDirectory() throws IOException { HttpServletRequest request = Mockito.mock(HttpServletRequest.class); HttpServletResponse response = Mockito.mock(HttpServletResponse.class); HttpServletResponse response2 = Mockito.mock(HttpServletResponse.class); HttpServletResponse response3 = Mockito.mock(HttpServletResponse.class); HttpServletResponse response4 = Mockito.mock(HttpServletResponse.class); HttpServletRequest request5 = Mockito.mock(HttpServletRequest.class); HttpServletResponse response5 = Mockito.mock(HttpServletResponse.class); HttpServletResponse response6 = Mockito.mock(HttpServletResponse.class); Mockito.when(request.getRequestURI()).thenReturn("http: Mockito.when(response.get
@Test public void populateFromCentralDirectory() throws IOException { HttpServletRequest request = Mockito.mock(HttpServletRequest.class); HttpServletResponse response = Mockito.mock(HttpServletResponse.class); HttpServletResponse response2 = Mockito.mock(HttpServletResponse.class); HttpServletResponse response3 = Mockito.mock(HttpServletResponse.class); HttpServletRequest request4 = Mockito.mock(HttpServletRequest.class); HttpServletResponse response5 = Mockito.mock(HttpServletResponse.class); HttpServletResponse response6 = Mockito.mock(HttpServletResponse.class); HttpServletRequest request7 = Mockito.mock(HttpServletRequest.class); HttpServletResponse response8 = Mockito.mock(HttpServletResponse.class); HttpServletResponse response9 = Mockito.mock(HttpServletResponse
@Test public void populateFromCentralDirectory() throws IOException { HttpServletRequest request = mock(HttpServletRequest.class); HttpServletResponse response = mock(HttpServletResponse.class); HttpSession session = mock(HttpSession.class); HttpSessionFactory sessionFactory = mock(HttpSessionFactory.class); when(request.getSession(anyBoolean())).thenReturn(session); when(response.getSession(anyBoolean())).thenReturn(sessionFactory); when(response.getSession(anyBoolean())).thenReturn(session); when(sessionFactory.getHttpSession(anyBoolean())).thenReturn(request); when(request.getScheme()).thenReturn("http"); when(request.getServerName()).thenReturn("localhost
@Test public void populateFromCentralDirectory() throws IOException { HttpServletRequest request = EasyMock.createMock(HttpServletRequest.class); HttpServletResponse response = EasyMock.createMock(HttpServletResponse.class); HttpServletResponse response2 = EasyMock.createMock(HttpServletResponse.class); HttpServletRequest request3 = EasyMock.createMock(HttpServletRequest.class); HttpServletResponse response4 = EasyMock.createMock(HttpServletResponse.class); HttpServletRequest request5 = EasyMock.createMock(HttpServletRequest.class); HttpServletResponse response6 = EasyMock.createMock(HttpServletResponse.class); HttpServletRequest request7 = EasyMock.createMock(HttpServletRequest.class); HttpServletResponse response8 = EasyMock.createMock(HttpServletResponse.class); HttpServletResponse response
@Test public void populateFromCentralDirectory() throws IOException { HttpServletRequest request = mock(HttpServletRequest.class); HttpServletResponse response = mock(HttpServletResponse.class); HttpSession session = mock(HttpSession.class); HttpSessionFactory sessionFactory = mock(HttpSessionFactory.class); when(request.getSession(anyBoolean())).thenReturn(session); when(response.getSession(anyBoolean())).thenReturn(sessionFactory); when(response.getSession(anyBoolean())).thenReturn(session); when(request.getScheme()).thenReturn("http"); when(request.getServerName()).thenReturn("localhost"); when(request.getServerPort()).thenReturn(8080); when(
@Test public void populateFromCentralDirectory() throws IOException { HttpServletRequest request = EasyMock.createMock(HttpServletRequest.class); HttpServletResponse response = EasyMock.createMock(HttpServletResponse.class); HttpServletResponse response2 = EasyMock.createMock(HttpServletResponse.class); HttpServletRequest request3 = EasyMock.createMock(HttpServletRequest.class); HttpServletResponse response4 = EasyMock.createMock(HttpServletResponse.class); HttpServletRequest request5 = EasyMock.createMock(HttpServletRequest.class); HttpServletResponse response6 = EasyMock.createMock(HttpServletResponse.class); HttpServletRequest request7 = EasyMock.createMock(HttpServletRequest.class); HttpServletResponse response8 = EasyMock.createMock(HttpServletResponse.class); HttpServletResponse response
@Test public void populateFromCentralDirectory() throws IOException { HttpServletRequest request = mock(HttpServletRequest.class); HttpServletResponse response = mock(HttpServletResponse.class); HttpSession session = mock(HttpSession.class); HttpSessionFactory sessionFactory = mock(HttpSessionFactory.class); when(request.getSession(anyBoolean())).thenReturn(session); when(response.getSession(anyBoolean())).thenReturn(sessionFactory); when(response.getSession(anyBoolean())).thenReturn(session); when(sessionFactory.getHttpSession(anyBoolean())).thenReturn(request); when(request.getScheme()).thenReturn("http"); when(request.getServerName()).thenReturn("localhost
@Test public void populateFromCentralDirectory() throws IOException { HttpServletRequest request = EasyMock.createMock(HttpServletRequest.class); HttpServletResponse response = EasyMock.createMock(HttpServletResponse.class); HttpServletResponse response2 = EasyMock.createMock(HttpServletResponse.class); HttpServletRequest request3 = EasyMock.createMock(HttpServletRequest.class); HttpServletResponse response4 = EasyMock.createMock(HttpServletResponse.class); HttpServletRequest request5 = EasyMock.createMock(HttpServletRequest.class); HttpServletResponse response6 = EasyMock.createMock(HttpServletResponse.class); HttpServletRequest request7 = EasyMock.createMock(HttpServletRequest.class); HttpServletResponse response8 = EasyMock.createMock(HttpServletResponse.class); HttpServletResponse response
@Test public void populateFromCentralDirectory() throws IOException { HttpServletRequest request = mock(HttpServletRequest.class); when(request.getScheme()).thenReturn("http"); when(request.getServerName()).thenReturn("localhost"); HttpServletResponse response = mock(HttpServletResponse.class); CloseableHttpClient httpClient = mock(CloseableHttpClient.class); CloseableHttpClient closeableHttpClient = mock(CloseableHttpClient.class); when(httpClient.execute(any(HttpGet.class), any(HttpContext.class))).thenReturn(response); when(response.getStatusLine()).thenReturn(mock(HttpStatusLine.class)); when(response.getStatusLine()).thenReturn(mock(HttpStatus
@Test public void populateFromCentralDirectory() throws IOException { HttpServletRequest request = Mockito.mock(HttpServletRequest.class); HttpServletResponse response = Mockito.mock(HttpServletResponse.class); HttpServletResponse response2 = Mockito.mock(HttpServletResponse.class); HttpServletResponse response3 = Mockito.mock(HttpServletResponse.class); HttpServletRequest request4 = Mockito.mock(HttpServletRequest.class); HttpServletResponse response5 = Mockito.mock(HttpServletResponse.class); HttpServletResponse response6 = Mockito.mock(HttpServletResponse.class); HttpServletRequest request7 = Mockito.mock(HttpServletRequest.class); HttpServletResponse response8 = Mockito.mock(HttpServletResponse.class); HttpServletResponse response9 = Mockito.mock(HttpServletResponse
@Test public void populateFromCentralDirectory() throws IOException { HttpServletRequest request = EasyMock.createMock(HttpServletRequest.class); HttpServletResponse response = EasyMock.createMock(HttpServletResponse.class); HttpServletResponse response2 = EasyMock.createMock(HttpServletResponse.class); HttpServletRequest request3 = EasyMock.createMock(HttpServletRequest.class); HttpServletResponse response4 = EasyMock.createMock(HttpServletResponse.class); HttpServletRequest request5 = EasyMock.createMock(HttpServletRequest.class); HttpServletResponse response6 = EasyMock.createMock(HttpServletResponse.class); HttpServletRequest request7 = EasyMock.createMock(HttpServletRequest.class); HttpServletResponse response8 = EasyMock.createMock(HttpServletResponse.class); HttpServletResponse response
@Test public void populateFromCentralDirectory() throws IOException { HttpServletRequest request = EasyMock.createMock(HttpServletRequest.class); HttpServletResponse response = EasyMock.createMock(HttpServletResponse.class); HttpServletResponse response2 = EasyMock.createMock(HttpServletResponse.class); HttpServletRequest request3 = EasyMock.createMock(HttpServletRequest.class); HttpServletResponse response4 = EasyMock.createMock(HttpServletResponse.class); HttpServletRequest request5 = EasyMock.createMock(HttpServletRequest.class); HttpServletResponse response6 = EasyMock.createMock(HttpServletResponse.class); HttpServletRequest request7 = EasyMock.createMock(HttpServletRequest.class); HttpServletResponse response8 = EasyMock.createMock(HttpServletResponse.class); HttpServletResponse response
@Test public void populateFromCentralDirectory() throws IOException { HttpServletRequest request = EasyMock.createMock(HttpServletRequest.class); HttpServletResponse response = EasyMock.createMock(HttpServletResponse.class); HttpServletResponse response2 = EasyMock.createMock(HttpServletResponse.class); HttpServletRequest request3 = EasyMock.createMock(HttpServletRequest.class); HttpServletResponse response4 = EasyMock.createMock(HttpServletResponse.class); HttpServletRequest request5 = EasyMock.createMock(HttpServletRequest.class); HttpServletResponse response6 = EasyMock.createMock(HttpServletResponse.class); HttpServletRequest request7 = EasyMock.createMock(HttpServletRequest.class); HttpServletResponse response8 = EasyMock.createMock(HttpServletResponse.class); HttpServletResponse response
@Test public void populateFromCentralDirectory() throws IOException { HttpServletRequest request = EasyMock.createMock(HttpServletRequest.class); HttpServletResponse response = EasyMock.createMock(HttpServletResponse.class); HttpServletResponse response2 = EasyMock.createMock(HttpServletResponse.class); HttpServletRequest request3 = EasyMock.createMock(HttpServletRequest.class); HttpServletResponse response4 = EasyMock.createMock(HttpServletResponse.class); HttpServletRequest request5 = EasyMock.createMock(HttpServletRequest.class); HttpServletResponse response6 = EasyMock.createMock(HttpServletResponse.class); HttpServletRequest request7 = EasyMock.createMock(HttpServletRequest.class); HttpServletResponse response8 = EasyMock.createMock(HttpServletResponse.class); HttpServletResponse response
@Test public void populateFromCentralDirectory() throws IOException { HttpServletRequest request = EasyMock.createMock(HttpServletRequest.class); HttpServletResponse response = EasyMock.createMock(HttpServletResponse.class); HttpServletResponse response2 = EasyMock.createMock(HttpServletResponse.class); HttpServletRequest request3 = EasyMock.createMock(HttpServletRequest.class); HttpServletResponse response4 = EasyMock.createMock(HttpServletResponse.class); HttpServletRequest request5 = EasyMock.createMock(HttpServletRequest.class); HttpServletResponse response6 = EasyMock.createMock(HttpServletResponse.class); HttpServletRequest request7 = EasyMock.createMock(HttpServletRequest.class); HttpServletResponse response8 = EasyMock.createMock(HttpServletResponse.class); HttpServletResponse response
@Test public void populateFromCentralDirectory() throws IOException { HttpServletRequest request = mock(HttpServletRequest.class); HttpServletResponse response = mock(HttpServletResponse.class); HttpSession session = mock(HttpSession.class); HttpSessionFactory sessionFactory = mock(HttpSessionFactory.class); when(request.getSession(anyBoolean())).thenReturn(session); when(session.getAttribute(HttpSession.REQUEST)).thenReturn(request); when(request.getSessionFactory()).thenReturn(sessionFactory); when(request.getServerName()).thenReturn("localhost"); when(request.getScheme()).thenReturn("http"); when(request.getServerName()).thenReturn("localhost"); when(request.
@Test public void populateFromCentralDirectory() throws IOException { HttpServletRequest request = EasyMock.createMock(HttpServletRequest.class); HttpServletResponse response = EasyMock.createMock(HttpServletResponse.class); HttpServletResponse response2 = EasyMock.createMock(HttpServletResponse.class); HttpServletRequest request3 = EasyMock.createMock(HttpServletRequest.class); HttpServletResponse response4 = EasyMock.createMock(HttpServletResponse.class); HttpServletRequest request5 = EasyMock.createMock(HttpServletRequest.class); HttpServletResponse response6 = EasyMock.createMock(HttpServletResponse.class); HttpServletRequest request7 = EasyMock.createMock(HttpServletRequest.class); HttpServletResponse response8 = EasyMock.createMock(HttpServletResponse.class); HttpServletResponse response
@Test public void populateFromCentralDirectory() throws IOException { HttpServletRequest request = mock(HttpServletRequest.class); HttpServletResponse response = mock(HttpServletResponse.class); HttpSession session = mock(HttpSession.class); HttpSessionFactory sessionFactory = mock(HttpSessionFactory.class); when(request.getSession(anyBoolean())).thenReturn(session); when(response.getSession(anyBoolean())).thenReturn(sessionFactory); when(response.getSession(anyBoolean())).thenReturn(session); when(sessionFactory.getHttpSession(anyBoolean())).thenReturn(request); when(request.getScheme()).thenReturn("http"); when(request.getServerName()).thenReturn("localhost
@Test public void populateFromCentralDirectory() throws IOException { HttpServletRequest request = EasyMock.createMock(HttpServletRequest.class); HttpServletResponse response = EasyMock.createMock(HttpServletResponse.class); HttpServletResponse response2 = EasyMock.createMock(HttpServletResponse.class); HttpServletRequest request3 = EasyMock.createMock(HttpServletRequest.class); HttpServletResponse response4 = EasyMock.createMock(HttpServletResponse.class); HttpServletRequest request5 = EasyMock.createMock(HttpServletRequest.class); HttpServletResponse response6 = EasyMock.createMock(HttpServletResponse.class); HttpServletRequest request7 = EasyMock.createMock(HttpServletRequest.class); HttpServletResponse response8 = EasyMock.createMock(HttpServletResponse.class); HttpServletResponse response
@Test public void populateFromCentralDirectory() throws IOException { HttpServletRequest request = EasyMock.createMock(HttpServletRequest.class); HttpServletResponse response = EasyMock.createMock(HttpServletResponse.class); HttpServletResponse response2 = EasyMock.createMock(HttpServletResponse.class); HttpServletRequest request3 = EasyMock.createMock(HttpServletRequest.class); HttpServletResponse response4 = EasyMock.createMock(HttpServletResponse.class); HttpServletRequest request5 = EasyMock.createMock(HttpServletRequest.class); HttpServletResponse response6 = EasyMock.createMock(HttpServletResponse.class); HttpServletRequest request7 = EasyMock.createMock(HttpServletRequest.class); HttpServletResponse response8 = EasyMock.createMock(HttpServletResponse.class); HttpServletResponse response
@Test public void populateFromCentralDirectory() throws IOException { HttpServletRequest request = EasyMock.createMock(HttpServletRequest.class); HttpServletResponse response = EasyMock.createMock(HttpServletResponse.class); HttpServletResponse response2 = EasyMock.createMock(HttpServletResponse.class); HttpServletRequest request3 = EasyMock.createMock(HttpServletRequest.class); HttpServletResponse response4 = EasyMock.createMock(HttpServletResponse.class); HttpServletRequest request5 = EasyMock.createMock(HttpServletRequest.class); HttpServletResponse response6 = EasyMock.createMock(HttpServletResponse.class); HttpServletRequest request7 = EasyMock.createMock(HttpServletRequest.class); HttpServletResponse response8 = EasyMock.createMock(HttpServletResponse.class); HttpServletResponse response
@Test public void populateFromCentralDirectory() throws IOException { HttpServletRequest request = EasyMock.createMock(HttpServletRequest.class); HttpServletResponse response = EasyMock.createMock(HttpServletResponse.class); HttpServletResponse response2 = EasyMock.createMock(HttpServletResponse.class); HttpServletRequest request3 = EasyMock.createMock(HttpServletRequest.class); HttpServletResponse response4 = EasyMock.createMock(HttpServletResponse.class); HttpServletRequest request5 = EasyMock.createMock(HttpServletRequest.class); HttpServletResponse response6 = EasyMock.createMock(HttpServletResponse.class); HttpServletRequest request7 = EasyMock.createMock(HttpServletRequest.class); HttpServletResponse response8 = EasyMock.createMock(HttpServletResponse.class); HttpServletResponse response
@Test public void populateFromCentralDirectory() throws IOException { HttpServletRequest request = EasyMock.createMock(HttpServletRequest.class); HttpServletResponse response = EasyMock.createMock(HttpServletResponse.class); HttpServletResponse response2 = EasyMock.createMock(HttpServletResponse.class); HttpServletRequest request3 = EasyMock.createMock(HttpServletRequest.class); HttpServletResponse response4 = EasyMock.createMock(HttpServletResponse.class); HttpServletRequest request5 = EasyMock.createMock(HttpServletRequest.class); HttpServletResponse response6 = EasyMock.createMock(HttpServletResponse.class); HttpServletRequest request7 = EasyMock.createMock(HttpServletRequest.class); HttpServletResponse response8 = EasyMock.createMock(HttpServletResponse.class); HttpServletResponse response
@Test public void populateFromCentralDirectory() throws IOException { HttpServletRequest request = EasyMock.createMock(HttpServletRequest.class); HttpServletResponse response = EasyMock.createMock(HttpServletResponse.class); HttpServletResponse response2 = EasyMock.createMock(HttpServletResponse.class); HttpServletRequest request3 = EasyMock.createMock(HttpServletRequest.class); HttpServletResponse response4 = EasyMock.createMock(HttpServletResponse.class); HttpServletRequest request5 = EasyMock.createMock(HttpServletRequest.class); HttpServletResponse response6 = EasyMock.createMock(HttpServletResponse.class); HttpServletRequest request7 = EasyMock.createMock(HttpServletRequest.class); HttpServletResponse response8 = EasyMock.createMock(HttpServletResponse.class); HttpServletResponse response
@Test public void populateFromCentralDirectory() throws IOException { HttpServletRequest request = EasyMock.createMock(HttpServletRequest.class); HttpServletResponse response = EasyMock.createMock(HttpServletResponse.class); HttpServletResponse response2 = EasyMock.createMock(HttpServletResponse.class); HttpServletRequest request3 = EasyMock.createMock(HttpServletRequest.class); HttpServletResponse response4 = EasyMock.createMock(HttpServletResponse.class); HttpServletRequest request5 = EasyMock.createMock(HttpServletRequest.class); HttpServletResponse response6 = EasyMock.createMock(HttpServletResponse.class); HttpServletRequest request7 = EasyMock.createMock(HttpServletRequest.class); HttpServletResponse response8 = EasyMock.createMock(HttpServletResponse.class); HttpServletResponse response
@Test public void populateFromCentralDirectory() throws IOException { HttpServletRequest request = EasyMock.createMock(HttpServletRequest.class); HttpServletResponse response = EasyMock.createMock(HttpServletResponse.class); HttpServletResponse response2 = EasyMock.createMock(HttpServletResponse.class); HttpServletRequest request3 = EasyMock.createMock(HttpServletRequest.class); HttpServletResponse response4 = EasyMock.createMock(HttpServletResponse.class); HttpServletRequest request5 = EasyMock.createMock(HttpServletRequest.class); HttpServletResponse response6 = EasyMock.createMock(HttpServletResponse.class); HttpServletRequest request7 = EasyMock.createMock(HttpServletRequest.class); HttpServletResponse response8 = EasyMock.createMock(HttpServletResponse.class); HttpServletResponse response
@Test public void populateFromCentralDirectory() throws IOException { HttpServletRequest request = mock(HttpServletRequest.class); HttpServletResponse response = mock(HttpServletResponse.class); HttpSession session = mock(HttpSession.class); HttpSessionFactory sessionFactory = mock(HttpSessionFactory.class); when(request.getSession(anyBoolean())).thenReturn(session); when(response.getSession(anyBoolean())).thenReturn(sessionFactory); when(response.getSession(anyBoolean())).thenReturn(session); when(request.getScheme()).thenReturn("http"); when(request.getServerName()).thenReturn("localhost"); when(request.getServerPort()).thenReturn(8080); when(
@Test public void populateFromCentralDirectory() throws IOException { HttpServletRequest request = EasyMock.createMock(HttpServletRequest.class); HttpServletResponse response = EasyMock.createMock(HttpServletResponse.class); HttpServletResponse response2 = EasyMock.createMock(HttpServletResponse.class); HttpServletRequest request3 = EasyMock.createMock(HttpServletRequest.class); HttpServletResponse response4 = EasyMock.createMock(HttpServletResponse.class); HttpServletRequest request5 = EasyMock.createMock(HttpServletRequest.class); HttpServletResponse response6 = EasyMock.createMock(HttpServletResponse.class); HttpServletRequest request7 = EasyMock.createMock(HttpServletRequest.class); HttpServletResponse response8 = EasyMock.createMock(HttpServletResponse.class); HttpServletResponse response
@Test public void populateFromCentralDirectory() throws IOException { HttpServletRequest request = EasyMock.createMock(HttpServletRequest.class); HttpServletResponse response = EasyMock.createMock(HttpServletResponse.class); HttpServletResponse response2 = EasyMock.createMock(HttpServletResponse.class); HttpServletRequest request3 = EasyMock.createMock(HttpServletRequest.class); HttpServletResponse response4 = EasyMock.createMock(HttpServletResponse.class); HttpServletRequest request5 = EasyMock.createMock(HttpServletRequest.class); HttpServletResponse response6 = EasyMock.createMock(HttpServletResponse.class); HttpServletRequest request7 = EasyMock.createMock(HttpServletRequest.class); HttpServletResponse response8 = EasyMock.createMock(HttpServletResponse.class); HttpServletResponse response
@Test public void populateFromCentralDirectory() throws IOException { HttpServletRequest request = createMock(HttpServletRequest.class); HttpServletResponse response = createMock(HttpServletResponse.class); HttpSession session = createMock(HttpSession.class); expect(request.getSession(false)).andReturn(session); expect(session.getAttribute(isA(HttpAttribute.class))).andReturn(null); expect(request.getAttribute(isA(HttpAttribute.class))).andReturn(null); expect(response.getAttribute(isA(HttpAttribute.class))).andReturn(null); expect(response.getAttribute(isA(HttpAttribute.class))).andReturn(null); expect(response
@Test public void populateFromCentralDirectory() throws IOException { HttpServletRequest mockHttpServletRequest = mock(HttpServletRequest.class); HttpServletResponse mockHttpServletResponse = mock(HttpServletResponse.class); HttpServletResponse mockHttpServletResponse2 = mock(HttpServletResponse.class); HttpServletRequest mockHttpServletRequest3 = mock(HttpServletRequest.class); HttpServletResponse mockHttpServletResponse4 = mock(HttpServletResponse.class); HttpServletRequest mockHttpServletRequest5 = mock(HttpServletRequest.class); HttpServletResponse mockHttpServletResponse6 = mock(HttpServletResponse.class); HttpServletResponse mockHttpServletResponse7 = mock(HttpServletResponse.class); HttpServletRequest mockHttpServletRequest8 = mock(HttpServletRequest.class); HttpServletResponse mockHttpServletResponse8 = mock(HttpServletResponse.class); when(mockHttpServletRequest.get
@Test public void populateFromCentralDirectory() throws IOException { HttpServletRequest request = createMock(HttpServletRequest.class); HttpServletResponse response = createMock(HttpServletResponse.class); HttpServletResponse response2 = createMock(HttpServletResponse.class); HttpServletRequest request3 = createMock(HttpServletRequest.class); HttpServletResponse response4 = createMock(HttpServletResponse.class); HttpServletRequest request5 = createMock(HttpServletRequest.class); HttpServletResponse response6 = createMock(HttpServletResponse.class); HttpServletRequest request7 = createMock(HttpServletRequest.class); HttpServletResponse response8 = createMock(HttpServletResponse.class); HttpServletRequest request9 = createMock(HttpServletRequest.class); HttpServletResponse response9 = createMock(HttpServletResponse.class); ServletContext context = createMock
@Test public void populateFromCentralDirectory() throws IOException { HttpServletRequest request = mock(HttpServletRequest.class); when(request.getScheme()).thenReturn("http"); HttpServletResponse response = mock(HttpServletResponse.class); CloseableHttpClient httpClient = mock(CloseableHttpClient.class); CloseableHttpClient closeableHttpClient = mock(CloseableHttpClient.class); when(httpClient.execute(any(HttpGet.class))).thenReturn(response); when(response.getStatusLine()).thenReturn(new BasicStatusLine(HttpVersion.HTTP_1_1, HttpStatus.SC_OK, "")); when(response.getStatusLine()).thenReturn(new BasicStatusLine(HttpVersion.HTTP_
@Test public void populateFromCentralDirectory() throws IOException { HttpServletRequest request = createMock(HttpServletRequest.class); HttpServletResponse response = createMock(HttpServletResponse.class); HttpServletResponse response2 = createMock(HttpServletResponse.class); HttpServletRequest request3 = createMock(HttpServletRequest.class); HttpServletResponse response4 = createMock(HttpServletResponse.class); HttpServletRequest request5 = createMock(HttpServletRequest.class); HttpServletResponse response6 = createMock(HttpServletResponse.class); HttpServletRequest request7 = createMock(HttpServletRequest.class); HttpServletResponse response8 = createMock(HttpServletResponse.class); HttpSession session = createMock(HttpSession.class); HttpSession session2 = createMock(HttpSession.class); HttpSession session3 = createMock
@Test public void populateFromCentralDirectory() throws IOException { HttpServletRequest request = createMock(HttpServletRequest.class); HttpServletResponse response = createMock(HttpServletResponse.class); HttpServletResponse response2 = createMock(HttpServletResponse.class); HttpServletRequest request3 = createMock(HttpServletRequest.class); HttpServletResponse response4 = createMock(HttpServletResponse.class); HttpServletRequest request5 = createMock(HttpServletRequest.class); HttpServletResponse response6 = createMock(HttpServletResponse.class); HttpServletRequest request7 = createMock(HttpServletRequest.class); HttpServletResponse response8 = createMock(HttpServletResponse.class); HttpServletRequest request9 = createMock(HttpServletRequest.class); HttpServletResponse response9 = createMock(HttpServletResponse.class); HttpServletRequest request10 = create
@Test public void populateFromCentralDirectory() throws IOException { HttpServletRequest request = mock(HttpServletRequest.class); HttpServletResponse response = mock(HttpServletResponse.class); HttpSession session = mock(HttpSession.class); HttpSessionFactory sessionFactory = mock(HttpSessionFactory.class); when(request.getSession(anyBoolean())).thenReturn(session); when(response.getSession(anyBoolean())).thenReturn(sessionFactory); when(response.getSession(anyBoolean())).thenReturn(session); when(sessionFactory.getHttpSession(anyBoolean())).thenReturn(request); when(request.getScheme()).thenReturn("http"); when(request.getServerName()).thenReturn("localhost
@Test public void populateFromCentralDirectory() throws IOException { HttpServletRequest request = mock(HttpServletRequest.class); when(request.getScheme()).thenReturn("http"); HttpServletResponse response = mock(HttpServletResponse.class); HttpSession httpSession = mock(HttpSession.class); when(httpSession.getAttribute("httpSession")).thenReturn(httpSession); HttpEntity httpEntity = mock(HttpEntity.class); when(httpSession.getAttribute("httpEntity")).thenReturn(httpEntity); HttpEntity httpEntity2 = mock(HttpEntity.class); when(httpSession.getAttribute("httpEntity2")).thenReturn(httpEntity2); HttpEntity httpEntity3 = mock(HttpEntity
@Test public void populateFromCentralDirectory() throws IOException { HttpServletRequest request = Mockito.mock(HttpServletRequest.class); HttpServletResponse response = Mockito.mock(HttpServletResponse.class); HttpServletResponse response2 = Mockito.mock(HttpServletResponse.class); HttpServletResponse response3 = Mockito.mock(HttpServletResponse.class); HttpServletRequest request4 = Mockito.mock(HttpServletRequest.class); HttpServletResponse response5 = Mockito.mock(HttpServletResponse.class); HttpServletResponse response6 = Mockito.mock(HttpServletResponse.class); HttpServletRequest request7 = Mockito.mock(HttpServletRequest.class); HttpServletResponse response8 = Mockito.mock(HttpServletResponse.class); HttpServletResponse response9 = Mockito.mock(HttpServletResponse
@Test public void populateFromCentralDirectory() throws IOException { HttpServletRequest request = mock(HttpServletRequest.class); HttpServletResponse response = mock(HttpServletResponse.class); HttpSession session = mock(HttpSession.class); HttpSessionFactory sessionFactory = mock(HttpSessionFactory.class); when(request.getSession(anyBoolean())).thenReturn(session); when(response.getSession(anyBoolean())).thenReturn(sessionFactory); when(response.getSession(anyBoolean())).thenReturn(session); when(sessionFactory.getHttpSession(anyBoolean())).thenReturn(request); when(request.getScheme()).thenReturn("http"); when(request.getServerName()).thenReturn("localhost
@Test public void populateFromCentralDirectory() throws IOException { HttpServletRequest request = createMock(HttpServletRequest.class); HttpServletResponse response = createMock(HttpServletResponse.class); HttpSession session = createMock(HttpSession.class); expect(request.getSession(false)).andReturn(session); expect(session.getAttribute(isA(HttpAttribute.class))).andReturn(null); expect(request.getAttribute(isA(HttpAttribute.class))).andReturn(null); expect(response.getAttribute(isA(HttpAttribute.class))).andReturn(null); expect(response.getAttribute(isA(HttpAttribute.class))).andReturn(null); expect(response
@Test public void populateFromCentralDirectory() throws IOException { HttpServletRequest request = createMock(HttpServletRequest.class); HttpServletResponse response = createMock(HttpServletResponse.class); HttpServletResponse response2 = createMock(HttpServletResponse.class); HttpServletRequest request3 = createMock(HttpServletRequest.class); HttpServletResponse response4 = createMock(HttpServletResponse.class); HttpServletRequest request5 = createMock(HttpServletRequest.class); HttpServletResponse response6 = createMock(HttpServletResponse.class); HttpServletRequest request7 = createMock(HttpServletRequest.class); HttpServletResponse response8 = createMock(HttpServletResponse.class); HttpServletRequest request9 = createMock(HttpServletRequest.class); HttpServletResponse response9 = createMock(HttpServletResponse.class); HttpServletRequest request10 = create
@Test public void populateFromCentralDirectory() throws IOException { HttpServletRequest request = createMock(HttpServletRequest.class); HttpServletResponse response = createMock(HttpServletResponse.class); HttpSession session = createMock(HttpSession.class); expect(request.getSession(false)).andReturn(session); expect(session.getAttribute(isA(HttpAttribute.class))).andReturn(null); expect(request.getAttribute(isA(HttpAttribute.class))).andReturn(null); expect(response.getAttribute(isA(HttpAttribute.class))).andReturn(null); expect(response.getAttribute(isA(HttpAttribute.class))).andReturn(null); expect(response
@Test public void populateFromCentralDirectory() throws IOException { HttpServletRequest request = EasyMock.createMock(HttpServletRequest.class); HttpServletResponse response = EasyMock.createMock(HttpServletResponse.class); HttpServletResponse response2 = EasyMock.createMock(HttpServletResponse.class); HttpServletRequest request3 = EasyMock.createMock(HttpServletRequest.class); HttpServletResponse response4 = EasyMock.createMock(HttpServletResponse.class); HttpServletRequest request5 = EasyMock.createMock(HttpServletRequest.class); HttpServletResponse response6 = EasyMock.createMock(HttpServletResponse.class); HttpServletRequest request7 = EasyMock.createMock(HttpServletRequest.class); HttpServletResponse response8 = EasyMock.createMock(HttpServletResponse.class); HttpServletResponse response
@Test public void populateFromCentralDirectory() throws IOException { HttpServletRequest request = createMock(HttpServletRequest.class); HttpServletResponse response = createMock(HttpServletResponse.class); HttpServletResponse response2 = createMock(HttpServletResponse.class); HttpServletRequest request3 = createMock(HttpServletRequest.class); HttpServletResponse response4 = createMock(HttpServletResponse.class); HttpServletRequest request5 = createMock(HttpServletRequest.class); HttpServletResponse response6 = createMock(HttpServletResponse.class); HttpServletRequest request7 = createMock(HttpServletRequest.class); HttpServletResponse response8 = createMock(HttpServletResponse.class); HttpServletRequest request9 = createMock(HttpServletRequest.class); HttpServletResponse response9 = createMock(HttpServletResponse.class); HttpServletRequest request10 = create
@Test public void populateFromCentralDirectory() throws IOException { HttpServletRequest request = EasyMock.createMock(HttpServletRequest.class); HttpServletResponse response = EasyMock.createMock(HttpServletResponse.class); HttpServletResponse response2 = EasyMock.createMock(HttpServletResponse.class); HttpServletRequest request3 = EasyMock.createMock(HttpServletRequest.class); HttpServletResponse response4 = EasyMock.createMock(HttpServletResponse.class); HttpServletRequest request5 = EasyMock.createMock(HttpServletRequest.class); HttpServletResponse response6 = EasyMock.createMock(HttpServletResponse.class); HttpServletRequest request7 = EasyMock.createMock(HttpServletRequest.class); HttpServletResponse response8 = EasyMock.createMock(HttpServletResponse.class); HttpServletResponse response
@Test public void positionAtCentralDirectory() throws Exception { try { Method method = positionAtCentralDirectory.getClass().getDeclaredMethod("positionAtCentralDirectory"); method.setAccessible(true); method.invoke(new PositionAtCentralDirectory(), null); } catch (Exception e) { Assert.fail(e.getMessage()); } }
@Test public void positionAtCentralDirectory() throws Exception { final File cdir = Files.createTempDir(); try { final File cdir1 = new File(cdir, "cdir1"); cdir1.mkdirs(); final File cdir2 = new File(cdir, "cdir2"); cdir2.mkdirs(); final File cdir3 = new File(cdir, "cdir3"); cdir3.mkdirs(); final File cdir4 = new File(cdir, "cdir4"); cdir4.mkdirs(); final File cdir5 = new File(cdir, "cdir5"); cdir5.mkdirs(); final File
@Test public void positionAtCentralDirectory() throws Exception { final Path archivePath = Paths.get(getClass().getResource("test.zip").toURI()); try { final ZipOutputStream zos = new ZipOutputStream(archivePath); zos.putNextEntry(new ZipEntry("test.txt")); zos.closeEntry(); zos.putNextEntry(new ZipEntry("test.txt")); zos.closeEntry(); zos.putNextEntry(new ZipEntry("test.txt")); zos.closeEntry(); zos.putNextEntry(new ZipEntry("test.txt")); zos.closeEntry(); zos.putNextEntry(new ZipEntry("test.txt")
@Test public void testPositionAtCentralDirectory() throws IOException { final File cdir = Files.createTempDir(); try { final File cdir1 = new File(cdir, "cdir1"); cdir1.mkdirs(); final File cdir2 = new File(cdir, "cdir2"); cdir2.mkdirs(); final File cdir3 = new File(cdir, "cdir3"); cdir3.mkdirs(); final File cdir4 = new File(cdir, "cdir4"); cdir4.mkdirs(); final File cdir5 = new File(cdir, "cdir5"); cdir5.mkdirs(); final
@Test public void positionAtCentralDirectory() throws Exception { final Path archivePath = Paths.get(getClass().getResource("test.zip").toURI()); try (ZipOutputStream zos = new ZipOutputStream(archivePath)) { zos.putNextEntry(new ZipEntry("test.txt")); zos.putNextEntry(new ZipEntry("test2.txt")); zos.putNextEntry(new ZipEntry("test3.txt")); zos.putNextEntry(new ZipEntry("test4.txt")); zos.putNextEntry(new ZipEntry("test5.txt")); zos.putNextEntry(new ZipEntry("test6.txt")); zos.
@Test void positionAtCentralDirectory() throws IOException { final Path archivePath = Paths.get(getClass().getResource("test.zip").toURI()); try { final Path archivePath2 = Paths.get(getClass().getResource("test2.zip").toURI()); final Path archivePath3 = Paths.get(getClass().getResource("test3.zip").toURI()); final Path archivePath4 = Paths.get(getClass().getResource("test4.zip").toURI()); final Path archivePath5 = Paths.get(getClass().getResource("test5.zip").toURI()); final Path archivePath6 = Paths.get(getClass().getResource("
@Test public void positionAtCentralDirectory() throws IOException { final File file = new File(this.getClass().getResource("test.zip").getFile()); try { final ZipArchiveOutputStream out = ZipArchiveOutputStream.createOutputStream(file); out.write(\'a\'); out.write(\'b\'); out.write(\'c\'); out.write(\'d\'); out.write(\'e\'); out.write(\'f\'); out.write(\'a\'); out.write(\'b\'); out.write(\'c\'); out.write(\'d\'); out.write(\'e\'); out.write(\'f\'); out.write(\'c\'); out.write(\'e\'); out
@Test public void positionAtCentralDirectory() throws Exception { final Path archivePath = Paths.get(getClass().getResource("test.zip").toURI()); try { final ZipOutputStream zos = new ZipOutputStream(archivePath); zos.putNextEntry(new ZipEntry("test.txt")); zos.closeEntry(); zos.putNextEntry(new ZipEntry("test.txt")); zos.putNextEntry(new ZipEntry("test.txt")); zos.closeEntry(); zos.putNextEntry(new ZipEntry("test.txt")); zos.closeEntry(); zos.putNextEntry(new ZipEntry("test.txt")); zos.closeEntry
@Test public void positionAtCentralDirectory() throws Exception { final Path archivePath = Paths.get(getClass().getResource("test.zip").toURI()); try { final ZipOutputStream zos = new ZipOutputStream(archivePath); zos.putNextEntry(new ZipEntry("test.txt")); zos.putNextEntry(new ZipEntry("test2.txt")); zos.putNextEntry(new ZipEntry("test3.txt")); zos.putNextEntry(new ZipEntry("test4.txt")); zos.putNextEntry(new ZipEntry("test5.txt")); zos.putNextEntry(new ZipEntry("test6.txt")); zos.
@Test public void positionAtCentralDirectory() throws IOException { final Path archivePath = Paths.get(getClass().getResource("test.zip").toURI()); try { final ZipOutputStream zos = new ZipOutputStream(archivePath); zos.putNextEntry(new ZipEntry("test")); zos.putNextEntry(new ZipEntry("test2")); zos.putNextEntry(new ZipEntry("test3")); zos.putNextEntry(new ZipEntry("test4")); zos.putNextEntry(new ZipEntry("test5")); zos.putNextEntry(new ZipEntry("test6")); zos.putNextEntry(new ZipEntry("test7")); z
@Test public void positionAtCentralDirectory() throws Exception { final Path archivePath = Paths.get(getClass().getResource("test.zip").toURI()); try { final ZipOutputStream zos = new ZipOutputStream(archivePath); zos.putNextEntry(new ZipEntry("test.txt")); zos.closeEntry(); zos.putNextEntry(new ZipEntry("test.txt")); zos.putNextEntry(new ZipEntry("test.txt")); zos.closeEntry(); zos.putNextEntry(new ZipEntry("test.txt")); zos.closeEntry(); zos.putNextEntry(new ZipEntry("test.txt")); zos.closeEntry
@Test public void positionAtCentralDirectory() throws IOException { final Path archivePath = Paths.get(getClass().getResource("test.zip").toURI()); try { final ZipOutputStream zos = new ZipOutputStream(archivePath); zos.putNextEntry(new ZipEntry("test")); zos.putNextEntry(new ZipEntry("test2")); zos.putNextEntry(new ZipEntry("test3")); zos.putNextEntry(new ZipEntry("test4")); zos.putNextEntry(new ZipEntry("test5")); zos.putNextEntry(new ZipEntry("test6")); zos.putNextEntry(new ZipEntry("test7")); z
@Test public void positionAtCentralDirectory() throws Exception { final Path archivePath = Paths.get(getClass().getResource("test.zip").toURI()); try { final ZipOutputStream zos = new ZipOutputStream(archivePath); zos.putNextEntry(new ZipEntry("test.txt")); zos.closeEntry(); zos.putNextEntry(new ZipEntry("test.txt")); zos.putNextEntry(new ZipEntry("test.txt")); zos.closeEntry(); zos.putNextEntry(new ZipEntry("test.txt")); zos.closeEntry(); zos.putNextEntry(new ZipEntry("test.txt")); zos.closeEntry
@Test public void positionAtCentralDirectory() throws IOException { final Path archivePath = Paths.get(getClass().getResource("test.zip").toURI()); try (ZipOutputStream zos = new ZipOutputStream(archivePath)) { zos.putNextEntry(new ZipEntry("test.txt")); zos.putNextEntry(new ZipEntry("test2.txt")); zos.putNextEntry(new ZipEntry("test3.txt")); zos.putNextEntry(new ZipEntry("test4.txt")); zos.putNextEntry(new ZipEntry("test5.txt")); zos.putNextEntry(new ZipEntry("test6.txt")); zos.
@Test public void positionAtCentralDirectory() throws Exception { final Path archivePath = Paths.get(getClass().getResource("test.zip").toURI()); try { final ZipOutputStream zos = new ZipOutputStream(archivePath); zos.putNextEntry(new ZipEntry("test.txt")); zos.closeEntry(); zos.putNextEntry(new ZipEntry("test.txt")); zos.putNextEntry(new ZipEntry("test.txt")); zos.closeEntry(); zos.putNextEntry(new ZipEntry("test.txt")); zos.closeEntry(); zos.putNextEntry(new ZipEntry("test.txt")); zos.closeEntry
@Test public void positionAtCentralDirectory() throws IOException { final Path archivePath = Paths.get(getClass().getResource("test.zip").toURI()); try { final ZipOutputStream zos = new ZipOutputStream(archivePath); zos.putNextEntry(new ZipEntry("test")); zos.putNextEntry(new ZipEntry("test2")); zos.putNextEntry(new ZipEntry("test3")); zos.putNextEntry(new ZipEntry("test4")); zos.putNextEntry(new ZipEntry("test5")); zos.putNextEntry(new ZipEntry("test6")); zos.putNextEntry(new ZipEntry("test7")); z
@Test public void positionAtCentralDirectory() throws Exception { final File cdir = Files.createTempDir(); try { final File cdir1 = new File(cdir, "cdir1"); cdir1.mkdirs(); final File cdir2 = new File(cdir, "cdir2"); cdir2.mkdirs(); final File cdir3 = new File(cdir, "cdir3"); cdir3.mkdirs(); final File cdir4 = new File(cdir, "cdir4"); cdir4.mkdirs(); final File cdir5 = new File(cdir, "cdir5"); cdir5.mkdirs(); final File
@Test public void positionAtCentralDirectory() throws IOException { final Path archivePath = Paths.get(getClass().getResource("test.zip").toURI()); try { final ZipOutputStream zos = new ZipOutputStream(archivePath); zos.putNextEntry(new ZipEntry("test.txt")); zos.closeEntry(); zos.putNextEntry(new ZipEntry("test.txt")); zos.putNextEntry(new ZipEntry("test.txt")); zos.closeEntry(); zos.putNextEntry(new ZipEntry("test.txt")); zos.closeEntry(); zos.putNextEntry(new ZipEntry("test.txt")); zos.closeEntry
@Test public void positionAtCentralDirectory() throws IOException { final File cdir = Files.createTempDir(); try { final File cdir1 = new File(cdir, "cdir1"); cdir1.mkdirs(); final File cdir2 = new File(cdir, "cdir2"); cdir2.mkdirs(); final File cdir3 = new File(cdir, "cdir3"); cdir3.mkdirs(); final File cdir4 = new File(cdir, "cdir4"); cdir4.mkdirs(); final File cdir5 = new File(cdir, "cdir5"); cdir5.mkdirs(); final File
@Test public void positionAtCentralDirectory() throws IOException { final Path archivePath = Paths.get(getClass().getResource("test.zip").toURI()); try (ZipOutputStream zos = new ZipOutputStream(archivePath)) { zos.putNextEntry(new ZipEntry("test.txt")); zos.putNextEntry(new ZipEntry("test.txt")); zos.putNextEntry(new ZipEntry("test.txt")); zos.putNextEntry(new ZipEntry("test.txt")); zos.putNextEntry(new ZipEntry("test.txt")); zos.putNextEntry(new ZipEntry("test.txt")); zos.putNextEntry(new
@Test public void positionAtCentralDirectory() throws IOException { final Path tempArchive = Files.createTempDirectory(this.getClass().getSimpleName() + ".zip"); try (ZipOutputStream zos = new ZipOutputStream(Files.newOutputStream(tempArchive))) { zos.putNextEntry(new ZipEntry("test")); zos.putNextEntry(new ZipEntry("test2")); zos.putNextEntry(new ZipEntry("test3")); zos.putNextEntry(new ZipEntry("test4")); zos.putNextEntry(new ZipEntry("test5")); zos.putNextEntry(new ZipEntry("test6")); zos.putNextEntry(new
@Test void positionAtCentralDirectory() throws IOException { final Path archivePath = Paths.get(getClass().getResource("test.zip").toURI()); try (ZipOutputStream zos = new ZipOutputStream(archivePath)) { zos.putNextEntry(new ZipEntry("test.txt")); zos.putNextEntry(new ZipEntry("test2.txt")); zos.putNextEntry(new ZipEntry("test3.txt")); zos.putNextEntry(new ZipEntry("test4.txt")); zos.putNextEntry(new ZipEntry("test5.txt")); zos.putNextEntry(new ZipEntry("test6.txt")); zos.put
@Test public void positionAtCentralDirectory() throws Exception { final Path archivePath = Paths.get(getClass().getResource("test.zip").toURI()); try (ZipOutputStream zos = new ZipOutputStream(archivePath)) { zos.putNextEntry(new ZipEntry("test.txt")); zos.putNextEntry(new ZipEntry("test.txt")); zos.putNextEntry(new ZipEntry("test.txt")); zos.putNextEntry(new ZipEntry("test.txt")); zos.putNextEntry(new ZipEntry("test.txt")); zos.putNextEntry(new ZipEntry("test.txt")); zos.putNextEntry(new
@Test public void resolveLocalFileHeaderData() throws Exception { File f1 = new File("src/test/resources/test.zip"); File f2 = new File("src/test/resources/test2.zip"); File f3 = new File("src/test/resources/test3.zip"); File f4 = new File("src/test/resources/test4.zip"); File f5 = new File("src/test/resources/test5.zip"); File f6 = new File("src/test/resources/test6.zip"); File f7 = new File("src/test/resources/test7.zip"); File f8 = new File("src/test
@Test public void testResolveLocalFileHeaderData() throws Exception { HttpServletRequest request = createNiceMock(HttpServletRequest.class); HttpServletResponse response = createNiceMock(HttpServletResponse.class); HttpSession session = createNiceMock(HttpSession.class); expect(request.getSession(false)).andReturn(session).anyTimes(); expect(request.getAttribute(isA(String.class))).andReturn("foo").anyTimes(); expect(request.getAttribute(isA(String.class))).andReturn("bar").anyTimes(); expect(request.getAttribute(isA(String.class))).andReturn("baz").anyTimes(); expect(request.getAttribute(
@Test public void testResolveLocalFileHeaderData() throws Exception { HttpServletRequest request = createMock(HttpServletRequest.class); HttpServletResponse response = createMock(HttpServletResponse.class); HttpSession session = createMock(HttpSession.class); Map<String, HttpSession> sessionMap = new HashMap<String, HttpSession>(); HttpServletRequest request1 = createMock(HttpServletRequest.class); HttpSession session2 = createMock(HttpServletRequest.class); HttpSession session3 = createMock(HttpServletRequest.class); Map<String, HttpSession> sessionMap1 = new HashMap<String, HttpSession>(); HttpSession session2 = createMock(HttpServletRequest.class); HttpSession session3 = createMock(HttpServletRequest.class); sessionMap1.put("
@Test public void testResolveLocalFileHeaderData() throws Exception { HttpServletRequest request = createNiceMock(HttpServletRequest.class); HttpServletResponse response = createNiceMock(HttpServletResponse.class); HttpSession session = createNiceMock(HttpSession.class); expect(request.getSession(false)).andReturn(session).anyTimes(); expect(request.getAttribute(isA(String.class))).andReturn("foo").anyTimes(); expect(request.getAttribute(isA(String.class))).andReturn("bar").anyTimes(); expect(request.getAttribute(isA(String.class))).andReturn("baz").anyTimes(); expect(request.getAttribute(
@Test public void testResolveLocalFileHeaderData() throws Exception { final File f1 = new File(getClass().getResource("zip1.txt").getFile()); final File f2 = new File(getClass().getResource("zip2.txt").getFile()); final File f3 = new File(getClass().getResource("zip3.txt").getFile()); final File f4 = new File(getClass().getResource("zip4.txt").getFile()); final File f5 = new File(getClass().getResource("zip5.txt").getFile()); final File f6 = new File(getClass().getResource("zip6.txt").getFile()); final File f7 = new File(
@Test public void resolveLocalFileHeaderData() throws Exception { HttpServletRequest request = createNiceMock(HttpServletRequest.class); HttpServletResponse response = createNiceMock(HttpServletResponse.class); HttpSession session = createNiceMock(HttpSession.class); expect(request.getSession(false)).andReturn(session).anyTimes(); expect(request.getAttribute(isA(String.class))).andReturn("foo").anyTimes(); expect(request.getAttribute(isA(String.class))).andReturn("bar").anyTimes(); expect(request.getAttribute(isA(String.class))).andReturn("baz").anyTimes(); expect(request.getAttribute(is
@Test public void testResolveLocalFileHeaderData() throws Exception { File f = new File("src/test/resources/testResolveLocalFileHeaderData.zip"); assertTrue(f.exists()); File f2 = new File("src/test/resources/testResolveLocalFileHeaderData2.zip"); File f3 = new File("src/test/resources/testResolveLocalFileHeaderData3.zip"); assertTrue(f2.exists()); File f4 = new File("src/test/resources/testResolveLocalFileHeaderData4.zip"); assertTrue(f3.exists()); File f5 = new File("src/test/resources/testResolveLocalFileHeaderData5.
@Test public void testResolveLocalFileHeaderData() throws Exception { final File f1 = new File("src/test/resources/test.zip"); final File f2 = new File("src/test/resources/test2.zip"); final File f3 = new File("src/test/resources/test3.zip"); final File f4 = new File("src/test/resources/test4.zip"); final File f5 = new File("src/test/resources/test5.zip"); final File f6 = new File("src/test/resources/test6.zip"); final File f7 = new File("src/test/resources/test7.zip"); final Zip
@Test public void testResolveLocalFileHeaderData() throws Exception { File f1 = new File("src/test/resources/zip1.zip"); File f2 = new File("src/test/resources/zip2.zip"); File f3 = new File("src/test/resources/zip3.zip"); File f4 = new File("src/test/resources/zip4.zip"); File f5 = new File("src/test/resources/zip5.zip"); File f6 = new File("src/test/resources/zip6.zip"); assertTrue(f1.exists()); assertTrue(f2.exists()); assertTrue(f3.exists()); assertTrue
@Test public void testResolveLocalFileHeaderData() throws Exception { File f = new File("src/test/resources/testResolveLocalFileHeaderData.zip"); assertTrue(f.exists()); File f2 = new File("src/test/resources/testResolveLocalFileHeaderData2.zip"); assertTrue(f2.exists()); File f3 = new File("src/test/resources/testResolveLocalFileHeaderData3.zip"); assertTrue(f3.exists()); File f4 = new File("src/test/resources/testResolveLocalFileHeaderData4.zip"); assertTrue(f4.exists()); File f5 = new File("src/test/resources/
@Test public void testResolveLocalFileHeaderData() throws Exception { File f1 = new File("src/test/resources/zip1.zip"); File f2 = new File("src/test/resources/zip2.zip"); File f3 = new File("src/test/resources/zip3.zip"); File f4 = new File("src/test/resources/zip4.zip"); File f5 = new File("src/test/resources/zip5.zip"); File f6 = new File("src/test/resources/zip6.zip"); assertTrue(f1.exists()); assertTrue(f2.exists()); assertTrue(f3.exists()); assertTrue
@Test public void testResolveLocalFileHeaderData() throws Exception { File f1 = new File("src/test/resources/data.zip"); File f2 = new File("src/test/resources/data.txt"); File f3 = new File("src/test/resources/data2.txt"); File f4 = new File("src/test/resources/data3.txt"); File f5 = new File("src/test/resources/data4.txt"); File f6 = new File("src/test/resources/data5.txt"); File f7 = new File("src/test/resources/data7.txt"); File f8 = new File("src/test
@Test public void resolveLocalFileHeaderData() throws Exception { HttpServletRequest request = createMock(HttpServletRequest.class); HttpServletResponse response = createMock(HttpServletResponse.class); HttpSession session = createMock(HttpSession.class); Map<String, HttpSession> sessionMap = new HashMap<String, HttpSession>(); HttpSession session1 = createMock(HttpSession.class); HttpSession session2 = createMock(HttpSession.class); HttpSession session3 = createMock(HttpSession.class); Map<String, HttpSession> sessionMap1 = new HashMap<String, HttpSession>(); sessionMap1.put("foo", session1); sessionMap1.put("bar", session2); sessionMap1.put("baz",
@Test public void resolveLocalFileHeaderData() throws Exception { File f1 = new File(getClass().getResource("zip1.zip").getFile()); File f2 = new File(getClass().getResource("zip2.zip").getFile()); File f3 = new File(getClass().getResource("zip3.zip").getFile()); File f4 = new File(getClass().getResource("zip4.zip").getFile()); File f5 = new File(getClass().getResource("zip5.zip").getFile()); File f6 = new File(getClass().getResource("zip6.zip").getFile()); File f7 = new File(getClass().getResource("zip7
@Test public void testResolveLocalFileHeaderData() throws Exception { File f1 = new File(getClass().getResource("zip1.zip").getFile()); File f2 = new File(getClass().getResource("zip2.zip").getFile()); File f3 = new File(getClass().getResource("zip3.zip").getFile()); File f4 = new File(getClass().getResource("zip4.zip").getFile()); File f5 = new File(getClass().getResource("zip5.zip").getFile()); File f6 = new File(getClass().getResource("zip6.zip").getFile()); File f7 = new File(getClass().getResource("zip
@Test public void testResolveLocalFileHeaderData() throws Exception { File f1 = new File(getClass().getResource("zip1.txt").getFile()); File f2 = new File(getClass().getResource("zip2.txt").getFile()); File f3 = new File(getClass().getResource("zip3.txt").getFile()); File f4 = new File(getClass().getResource("zip4.txt").getFile()); File f5 = new File(getClass().getResource("zip5.txt").getFile()); File f6 = new File(getClass().getResource("zip6.txt").getFile()); File f7 = new File(getClass().getResource("zip
@Test public void testResolveLocalFileHeaderData() throws Exception { File f = new File("src/test/resources/testResolveLocalFileHeaderData.zip"); assertTrue(f.exists()); File f2 = new File("src/test/resources/testResolveLocalFileHeaderData2.zip"); assertTrue(f2.exists()); File f3 = new File("src/test/resources/testResolveLocalFileHeaderData3.zip"); assertTrue(f3.exists()); File f4 = new File("src/test/resources/testResolveLocalFileHeaderData4.zip"); assertTrue(f4.exists()); File f5 = new File("src/test/resources/
@Test public void testResolveLocalFileHeaderData() throws Exception { HttpServletRequest request = createNiceMock(HttpServletRequest.class); HttpServletResponse response = createNiceMock(HttpServletResponse.class); HttpSession session = createNiceMock(HttpSession.class); expect(request.getSession(false)).andReturn(session).anyTimes(); expect(request.getAttribute(isA(String.class))).andReturn("foo").anyTimes(); expect(request.getAttribute(isA(String.class))).andReturn("bar").anyTimes(); expect(request.getAttribute(isA(String.class))).andReturn("baz").anyTimes(); expect(request.getAttribute(
@Test public void testResolveLocalFileHeaderData() throws Exception { File f1 = new File("src/test/resources/zip1.zip"); File f2 = new File("src/test/resources/zip2.zip"); File f3 = new File("src/test/resources/zip3.zip"); File f4 = new File("src/test/resources/zip4.zip"); File f5 = new File("src/test/resources/zip5.zip"); File f6 = new File("src/test/resources/zip6.zip"); assertTrue(f1.exists()); assertTrue(f2.exists()); assertTrue(f3.exists()); assertTrue
@Test public void testResolveLocalFileHeaderData() throws Exception { HttpServletRequest request = createMock(HttpServletRequest.class); HttpServletResponse response = createMock(HttpServletResponse.class); HttpSession session = createMock(HttpSession.class); Map<String, HttpSession> headers = new HashMap<String, HttpSession>(); HttpServletRequest request1 = createMock(HttpServletRequest.class); HttpSession session2 = createMock(HttpServletRequest.class); HttpSession session3 = createMock(HttpServletRequest.class); headers.put("User-Agent", "Mozilla/5.0 (compatible; Mozilla/5.0 (compatible; Mozilla/5.0 (compatible; Mozilla/5.0 (compatible;
@Test public void resolveLocalFileHeaderData() throws Exception { HttpServletRequest request = createMock(HttpServletRequest.class); HttpServletResponse response = createMock(HttpServletResponse.class); HttpSession session = createMock(HttpSession.class); Map<String, HttpSession> sessionMap = new HashMap<String, HttpSession>(); HttpServletRequest request1 = createMock(HttpServletRequest.class); HttpSession session2 = createMock(HttpServletRequest.class); HttpSession session3 = createMock(HttpServletRequest.class); Map<String, HttpSession> request4 = new HashMap<String, HttpSession>(); HttpServletRequest request5 = createMock(HttpServletRequest.class); HttpServletRequest request6 = createMock(HttpServletRequest.class); HttpSession session7 = createMock(Http
@Test public void testResolveLocalFileHeaderData() throws Exception { File f1 = new File(getClass().getResource("zip1.txt").getFile()); File f2 = new File(getClass().getResource("zip2.txt").getFile()); File f3 = new File(getClass().getResource("zip3.txt").getFile()); File f4 = new File(getClass().getResource("zip4.txt").getFile()); File f5 = new File(getClass().getResource("zip5.txt").getFile()); File f6 = new File(getClass().getResource("zip6.txt").getFile()); File f7 = new File(getClass().getResource("zip
@Test public void testAbstractUnicodeExtraField() { System.out.println("testAbstractUnicodeExtraField"); AbstractUnicodeExtraField unicodeExtraField = new AbstractUnicodeExtraFieldImpl(); assertEquals(0, unicodeExtraField.nameCRC32); assertEquals(0, unicodeExtraField.nameCRC32); assertEquals(0, unicodeExtraField.bytes.length); assertEquals(0, unicodeExtraField.bytes[0]); assertEquals(0, unicodeExtraField.bytes[1]); assertEquals(0, unicodeExtraField.bytes[2]); assertEquals(0, unicodeExtraField.bytes[3]); assertEquals(0, unicodeExtraField.bytes[4]); assertEquals(0, unicode
@Test public void testGetUnicodeNameData() { AbstractUnicodeExtraField unicodeExtraField = new UnicodeExtraField("ABC", new byte[0], 0, 0); byte[] unicodeNameData = "ABC".getBytes("UTF-8"); unicodeExtraField.setUnicodeNameData(unicodeNameData); assertEquals("ABC", new String(unicodeExtraField.getUnicodeNameData(), "UTF-8")); assertEquals("ABC", new String(unicodeExtraField.getUnicodeNameData(), "UTF-8")); assertEquals("ABC", new String(unicodeExtraField.getUnicodeNameData(), "UTF-8")); assertEquals("ABC", new String(unicodeExtraField.getUnicodeName
@Test public void testParseFromCentralDirectoryData() throws IOException, ZipException { AbstractUnicodeExtraField unicodeField = new UnicodeExtraField("Test", new byte[0], 0, 0); unicodeField.parseFromCentralDirectoryData(new byte[0], 0, 0); assertEquals(UnicodeExtraField.nameCRC32(), unicodeField.nameCRC32()); assertArrayEquals(new byte[0], unicodeField.unicodeName); assertArrayEquals(new byte[0], unicodeField.data); }
@Test public void testParseFromCentralDirectoryData() throws IOException, ZipException { AbstractUnicodeExtraField unicodeExtraField = new UnicodeExtraField("test", new byte[0], 0, 0); unicodeExtraField.parseFromCentralDirectoryData("test".getBytes("UTF-8"), 0, "test".getBytes("UTF-8").length); assertEquals(UnicodeExtraField.nameCRC32(), unicodeExtraField.nameCRC32()); assertArrayEquals("test".getBytes("UTF-8"), unicodeExtraField.unicodeName); assertArrayEquals("test".getBytes("UTF-8"), unicodeExtraField.data); }
@Test public void testParseFromCentralDirectoryData() throws IOException, ZipException { AbstractUnicodeExtraField unicodeExtraField = new UnicodeExtraField("Test", new byte[0], 0, 0); byte[] unicodeName = "Test".getBytes("UTF-8"); unicodeExtraField.setUnicodeName(unicodeName); byte[] unicodeData = "Test".getBytes("UTF-8"); unicodeExtraField.parseFromCentralDirectoryData(unicodeData, 0, unicodeName.length); assertEquals(UnicodeExtraField.nameCRC32(), unicodeExtraField.nameCRC32()); assertArrayEquals(unicodeData, unicodeExtraField.unicodeName); }
@Test public void testGetUnicodeName() { AbstractUnicodeExtraField unicodeExtraField = new UnicodeExtraField("test", new byte[0], 0, 0); byte[] unicodeName = "test".getBytes("UTF-8"); unicodeExtraField.setUnicodeName(unicodeName); assertEquals(unicodeName[0], "test".getBytes("UTF-8")[0]); assertEquals(unicodeName[1], "test".getBytes("UTF-8")[1]); assertEquals(unicodeName[2], "test".getBytes("UTF-8")[2]); assertEquals(unicodeName[3], "test".getBytes("UTF-8")[3]); }
@Test public void testParseFromCentralDirectoryData() throws IOException, ZipException { AbstractUnicodeExtraField unicodeExtraField = new UnicodeExtraField("ABC", new byte[0], 0, 0); unicodeExtraField.parseFromCentralDirectoryData(new byte[0], 0, 0); assertEquals("ABC", new String(unicodeExtraField.unicodeName, "UTF-8")); assertEquals("ABC", new String(unicodeExtraField.unicodeName, "UTF-8")); assertEquals("ABC", new String(unicodeExtraField.dataData, "UTF-8")); }
@Test public void testAssembleData() { System.out.println("assembleData"); AbstractUnicodeExtraField instance = new AbstractUnicodeExtraField("test", null); instance.setNameCRC32(nameCRC32); instance.setUnicodeName(unicodeName); instance.setUnicodeName(unicodeName); instance.parseFromCentralDirectoryData(buffer, 0, buffer.length); assertEquals("test", instance.getText()); assertEquals(nameCRC32, instance.getNameCRC32()); assertEquals(unicodeName, instance.getUnicodeName()); assertEquals(bytes[0], instance.getData()); assertEquals(bytes[1], instance.getUnicodeNameLength()); assertEquals(bytes[2
@Test public void testAssembleData() { System.out.println("assembleData"); AbstractUnicodeExtraField instance = new AbstractUnicodeExtraFieldImpl("test", null); instance.setUnicodeName(null); instance.setNameCRC32(nameCRC32); instance.setUnicodeName(unicodeName); instance.parseFromCentralDirectoryData(buffer, 0, buffer.length); assertEquals("test", instance.getText()); assertEquals(nameCRC32, instance.nameCRC32()); assertArrayEquals(unicodeName, instance.unicodeName); assertArrayEquals(ZipLong.getBytes(nameCRC32), instance.data); assertEquals(0x01, instance.nameCRC32()); assert
@Test public void testAssembleData() { TestUnicodeExtraField unicodeExtraField = new TestUnicodeExtraField(); unicodeExtraField.setNameCRC32(nameCRC32); unicodeExtraField.setUnicodeName(unicodeName); byte[] data = unicodeExtraField.getUnicodeName(); byte[] expectedData = new byte[] { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x20
@Test public void testAssembleData() { TestUnicodeExtraField unicodeExtraField = new TestUnicodeExtraField(); unicodeExtraField.setNameCRC32(UnicodeExtraField.nameCRC32); unicodeExtraField.setUnicodeName(new byte[] { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x10 }); byte[] bytes = { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x10, 0x08, 0x09, 0x
@Test public void testAssembleData() { System.out.println("assembleData"); AbstractUnicodeExtraField instance = new AbstractUnicodeExtraFieldImpl(); instance.setNameCRC32(nameCRC32); instance.setUnicodeName(unicodeName); instance.setUnicodeName(unicodeName); instance.parseFromCentralDirectoryData(buffer, 0, buffer.length); assertEquals(ZipLong.getBytes(nameCRC32), new String(instance.getUnicodeNameData())); assertEquals(ZipLong.getBytes(unicodeNameCRC32), new String(instance.getUnicodeNameData())); assertEquals(ZipLong.getBytes(centralDirectoryData), new String(instance.getC
@Test public void testAssembleData() { System.out.println("assembleData"); AbstractUnicodeExtraField instance = new AbstractUnicodeExtraFieldImpl(); instance.setUnicodeName(new byte[] { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08 }); instance.setUnicodeName(new byte[] { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08 }); instance.setUnicodeName(new byte[] { 0x01, 0x02, 0x03, 0x04, 0x05, 0x
@Test public void testGetNameCRC32() { System.out.println("getNameCRC32"); AbstractUnicodeExtraField instance = new AbstractUnicodeExtraField("Test", new byte[0]); long result = instance.getNameCRC32(); assertEquals(0, result); instance.setNameCRC32(1); result = instance.getNameCRC32(); assertEquals(1, result); instance.setNameCRC32(2); result = instance.getNameCRC32(); assertEquals(2, result); instance.setNameCRC32(3); result = instance.getNameCRC32(); assertEquals(3, result); instance.setNameCRC32(4); result = instance.getNameCRC32(); assertEquals(
@Test public void testGetNameCRC32() { System.out.println("getNameCRC32"); AbstractUnicodeExtraField instance = new AbstractUnicodeExtraFieldImpl(); instance.setNameCRC32(0x01020304); long expResult = 0x01020304; long result = instance.getNameCRC32(); assertEquals(expResult, result); }
@Test public void testGetUnicodeName() { System.out.println("getUnicodeName"); AbstractUnicodeExtraField instance = new AbstractUnicodeExtraFieldImpl(); instance.setUnicodeName(testData); byte[] result = instance.getUnicodeName(); assertNotNull(result); assertEquals(testData.length, result.length); for (int i = 0; i < testData.length; i++) { assertEquals(testData[i], result[i]); } }
@Test public void testGetUnicodeName() { System.out.println("getUnicodeName"); AbstractUnicodeExtraField instance = new AbstractUnicodeExtraFieldImpl(); instance.setUnicodeName(null); byte[] expResult = null; byte[] result = instance.getUnicodeName(); assertArrayEquals(expResult, result); }
@Test public void testGetCentralDirectoryData() { System.out.println("getCentralDirectoryData"); AbstractUnicodeExtraField instance = new AbstractUnicodeExtraField("test", null); byte[] expResult = "test".getBytes(); byte[] result = instance.getCentralDirectoryData(); assertArrayEquals(expResult, result); }
@Test public void testGetCentralDirectoryData() { System.out.println("getCentralDirectoryData"); AbstractUnicodeExtraField instance = new AbstractUnicodeExtraField("test", null); byte[] expResult = null; byte[] result = instance.getCentralDirectoryData(); assertArrayEquals(expResult, result); }
@Test public void testGetCentralDirectoryData() { System.out.println("getCentralDirectoryData"); AbstractUnicodeExtraField instance = new AbstractUnicodeExtraField("test", null); instance.assembleData(); byte[] expResult = "test".getBytes(); byte[] result = instance.getCentralDirectoryData(); assertArrayEquals(expResult, result); }
@Test public void testGetCentralDirectoryData() { System.out.println("getCentralDirectoryData"); AbstractUnicodeExtraField instance = new AbstractUnicodeExtraField("test", new byte[0]); byte[] result = instance.getCentralDirectoryData(); assertNotNull(result); assertEquals(0, result.length); instance.setUnicodeName(new byte[0]); result = instance.getCentralDirectoryData(); assertNotNull(result); assertEquals(0, result.length); instance.setUnicodeName(new byte[0]); result = instance.getCentralDirectoryData(); assertNotNull(result); assertEquals(0, result.length); instance.setUnicodeName(new byte[0]); result
@Test public void testGetCentralDirectoryLength() { System.out.println("getCentralDirectoryLength"); AbstractUnicodeExtraFieldUnicode instance = new AbstractUnicodeExtraFieldUnicode(); ZipShort expResult = new ZipShort(5); ZipShort result = instance.getCentralDirectoryLength(); assertEquals(expResult, result); }
@Test public void testGetCentralDirectoryLength() { System.out.println("getCentralDirectoryLength"); AbstractUnicodeExtraField instance = new AbstractUnicodeExtraFieldImpl(); ZipShort expResult = new ZipShort(3); ZipShort result = instance.getCentralDirectoryLength(); assertEquals(expResult, result); }
@Test public void testGetCentralDirectoryLength() { System.out.println("getCentralDirectoryLength"); AbstractUnicodeExtraField instance = new AbstractUnicodeExtraFieldImpl("test", null); ZipShort expResult = new ZipShort(5); ZipShort result = instance.getCentralDirectoryLength(); assertEquals(expResult, result); }
@Test public void testGetCentralDirectoryLength() { System.out.println("getCentralDirectoryLength"); AbstractUnicodeExtraFieldUnicode instance = new AbstractUnicodeExtraFieldUnicode(); ZipShort expResult = new ZipShort(5); ZipShort result = instance.getCentralDirectoryLength(); assertEquals(expResult, result); }
@Test public void testGetLocalFileDataData() { System.out.println("getLocalFileDataData"); AbstractUnicodeExtraField instance = new UnicodeExtraField("test", new byte[0]); byte[] expResult = "test".getBytes(); byte[] result = instance.getLocalFileDataData(); assertArrayEquals(expResult, result); }
@Test public void testGetLocalFileDataData() { System.out.println("getLocalFileDataData"); AbstractUnicodeExtraField instance = new AbstractUnicodeExtraField("test", new byte[0]); byte[] expResult = new byte[]{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
@Test public void testGetLocalNameLength() { System.out.println("getLocalNameLength"); AbstractUnicodeExtraField instance = new AbstractUnicodeExtraFieldImpl(); ZipShort expResult = null; ZipShort result = instance.getLocalNameDataLength(); assertEquals(expResult, result); }
@Test public void testGetLocalFileDataLength() { System.out.println("getLocalFileDataLength"); AbstractUnicodeExtraField instance = new AbstractUnicodeExtraFieldImpl(); ZipShort expResult = ZipShort.EMPTY; ZipShort result = instance.getLocalFileDataLength(); assertEquals(expResult, result); }
@Test public void testParseFromLocalFileData() { System.out.println("parseFromLocalFileData"); AbstractUnicodeExtraField instance = new AbstractUnicodeExtraFieldImpl(); instance.parseFromLocalFileData(testData, 0, testData.length()); }
@Test public void testParseFromLocalFileData() { System.out.println("parseFromLocalFileData"); AbstractUnicodeExtraField instance = new AbstractUnicodeExtraFieldImpl(); byte[] buffer = new byte[5]; instance.parseFromLocalFileData(buffer, 0, buffer.length); }
@Test public void testParseFromLocalFileData() { System.out.println("parseFromLocalFileData"); AbstractUnicodeExtraField instance = new AbstractUnicodeExtraFieldImpl(); instance.parseFromLocalFileData(testData, 0, testData.length); }
@Test public void testParseFromLocalFileData() { System.out.println("parseFromLocalFileData"); AbstractUnicodeExtraField instance = new AbstractUnicodeExtraFieldImpl(); byte[] buffer = new byte[5]; instance.parseFromLocalFileData(buffer, 0, buffer.length); }
@Test public void testParseFromLocalFileData() { System.out.println("parseFromLocalFileData"); AbstractUnicodeExtraField instance = new AbstractUnicodeExtraFieldImpl(); instance.parseFromLocalFileData(null, 0, 0); }
@Test public void testParseFromLocalFileData() { System.out.println("parseFromLocalFileData"); AbstractUnicodeExtraField instance = new AbstractUnicodeExtraFieldImpl(); instance.parseFromLocalFileData(null, 0, 0); }
@Test public void testParseFromLocalFileData() { System.out.println("parseFromLocalFileData"); AbstractUnicodeExtraField instance = new AbstractUnicodeExtraFieldImpl(); instance.parseFromLocalFileData(testData, 0, testData.length); }
@Test public void testParseFromLocalFileData() { System.out.println("parseFromLocalFileData"); AbstractUnicodeExtraField instance = new AbstractUnicodeExtraFieldImpl(); byte[] buffer = new byte[5]; instance.parseFromLocalFileData(buffer, 0, buffer.length); }
@Test public void testParseFromCentralDirectoryData() { System.out.println("parseFromCentralDirectoryData"); byte[] buffer = null; int offset = 0; int length = 0; AbstractUnicodeExtraField instance = new AbstractUnicodeExtraFieldImpl(); instance.parseFromCentralDirectoryData(buffer, offset, length); }
@Test public void testParseFromLocalFileData() { System.out.println("parseFromLocalFileData"); byte[] buffer = new byte[0]; AbstractUnicodeExtraField instance = new AbstractUnicodeExtraFieldImpl(); instance.parseFromCentralDirectoryData(buffer, 0, 0); }
@Test public void testRemoveExtraField() { ZipExtraField[] ft = new ZipExtraField[1]; ft[0] = new ZipExtraField(); ft[0].setName("name"); ft[0].setExtra(ft); ft[1] = new ZipExtraField(); ft[1].setName("name"); ft[1].setExtra(ft); ft[2] = new ZipExtraField(); ft[2].setName("name"); ft[2].setExtra(ft); ft[3] = new ZipExtraField(); ft[3].setName("name"); ft[3].setExtra(ft); ft[4] = new ZipExtraField(); ft[4
@Test public void testRemoveExtraField() { ZipExtraField[] ft = new ZipExtraField[1]; ft[0] = new ZipExtraField(); ft[0].setName("name"); ft[0].setExtra(ft); ft[1] = new ZipExtraField(); ft[1].setName("name"); ft[1].setExtra(ft); ft[2] = new ZipExtraField(); ft[2].setName("name"); ft[2].setExtra(ft); ft[3] = new ZipExtraField(); ft[3].setName("name"); ft[3].setExtra(ft); ft[4] = new ZipExtraField(); ft[4
@Test public void testRemoveExtraField() { ZipExtraField[] ft = new ZipExtraField[1]; ft[0] = new ZipExtraField(); ft[0].setName("name"); ft[0].setExtra(ft); ft[1] = new ZipExtraField(); ft[1].setName("name"); ft[1].setExtra(ft); ft[2] = new ZipExtraField(); ft[2].setName("name"); ft[2].setExtra(ft); ft[3] = new ZipExtraField(); ft[3].setName("name"); ft[3].setExtra(ft); ft[4] = new ZipExtraField(); ft[4
@Test public void testRemoveExtraField() { try { ZipArchiveEntry ze = new ZipArchiveEntry(); ze.addExtraField(new ZipExtraField[0]); ze.addExtraField(new ZipExtraField[1]); ze.addExtraField(new ZipExtraField[2]); try { ze.addExtraField(ZipExtraField.ZipExtraField.ZipExtraField.ZipExtraField.ZipExtraField.ZipExtraField.ZipExtraField.ZipExtraField.ZipExtraField.ZipExtraField.ZipExtraField.ZipExtraField.ZipExtraField.ZipExtraField.ZipExtraField.ZipExtraField.ZipExtraField.ZipExtraField.ZipExtraField.ZipExtraField
@Test public void testRemoveExtraField() { try { ZipArchiveEntry ze = new ZipArchiveEntry(); ze.setName("test"); ze.setExtra(new byte[] {1, 2, 3, 4}); ze.addExtraField(new byte[] {5, 6, 7, 8}); ze.addExtraField(new byte[] {9, 10, 11, 12}); ze.setExtraFields(new ZipExtraField[] {1, 2, 3, 4}); try { ze.removeExtraField(ZipShort.ZIP_UNDEFINED); fail("Expected java.lang.NoSuchElementException"); } catch (java.lang.NoSuchElementException e) { } } catch (Exception e) {
@Test public void testFallbackZipEncoding() throws Exception { FallbackZipEncoding zipEncoding = new FallbackZipEncoding(); assertFalse(zipEncoding.canEncode("foobar")); assertFalse(zipEncoding.canEncode("foobar")); assertEquals("foobar", zipEncoding.decode("foobar".getBytes(Charsets.UTF_8))); zipEncoding.encode("foobar"); assertEquals("foobar", zipEncoding.decode("foobar".getBytes(Charsets.UTF_8))); zipEncoding.decode("foobar".getBytes(Charsets.UTF_8)); assertEquals("foobar", zipEncoding.decode("foobar".getBytes
@Test public void testFallbackZipEncoding() throws Exception { FallbackZipEncoding zipEncoding = new FallbackZipEncoding(); assertFalse(zipEncoding.canEncode("foobar")); assertFalse(zipEncoding.canEncode("foobar")); assertEquals("foobar", zipEncoding.decode("foobar".getBytes(Charsets.UTF_8))); zipEncoding.encode("foobar"); assertEquals("foobar", zipEncoding.decode("foobar".getBytes(Charsets.UTF_8))); zipEncoding.decode("foobar".getBytes(Charsets.UTF_8)); assertEquals("foobar", zipEncoding.decode("foobar".getBytes
@Test public void testAdjustLong() { assertEquals(0, adjustToLong(0)); assertEquals(1, adjustToLong(1)); assertEquals(2, adjustToLong(2)); assertEquals(Long.MAX_VALUE, adjustToLong(Long.MAX_VALUE)); assertEquals(Long.MIN_VALUE, adjustToLong(Long.MIN_VALUE)); assertEquals(Long.MAX_VALUE, adjustToLong(-1)); assertEquals(Long.MAX_VALUE, adjustToLong(Long.MAX_VALUE)); assertEquals(Long.MIN_VALUE, adjustToLong(Long.MIN_VALUE)); assertEquals(Long.MAX_VALUE, adjustToLong(Long.MAX_VALUE)); assertEquals(Long.
@Test public void adjustLong() { assertEquals(0, adjustToLong(0)); assertEquals(1, adjustToLong(1)); assertEquals(2, adjustToLong(2)); assertEquals(Long.MAX_VALUE, adjustToLong(Long.MAX_VALUE)); assertEquals(Long.MIN_VALUE, adjustToLong(Long.MIN_VALUE)); assertEquals(Long.MAX_VALUE, adjustToLong(-1)); assertEquals(Long.MAX_VALUE, adjustToLong(Long.MAX_VALUE)); assertEquals(Long.MIN_VALUE, adjustToLong(Long.MIN_VALUE)); assertEquals(Long.MAX_VALUE, adjustToLong(Long.MAX_VALUE)); }
@Test public void adjustLong() { assertEquals(2 * (long) Integer.MAX_VALUE + 2, adjustToLong(0)); assertEquals(2 * (long) Integer.MAX_VALUE + 2, adjustToLong(-1)); assertEquals(2 * (long) Integer.MAX_VALUE + 2, adjustToLong(2)); assertEquals(2 * (long) Integer.MAX_VALUE + 2, adjustToLong(Long.MAX_VALUE)); assertEquals(2 * (long) Integer.MAX_VALUE + 2, adjustToLong(Long.MAX_VALUE)); assertEquals(2 * (long) Integer.MAX_VALUE + 2, adjustToLong(Long.MAX_VALUE)); assertEquals
@Test public void testAdjustToLong() { assertEquals(0, adjustToLong(0)); assertEquals(1, adjustToLong(1)); assertEquals(2, adjustToLong(2)); assertEquals(Long.MAX_VALUE, adjustToLong(Long.MAX_VALUE)); assertEquals(Long.MIN_VALUE, adjustToLong(Long.MIN_VALUE)); assertEquals(Long.MAX_VALUE, adjustToLong(-1)); assertEquals(Long.MAX_VALUE, adjustToLong(Long.MAX_VALUE)); assertEquals(Long.MIN_VALUE, adjustToLong(Long.MIN_VALUE)); assertEquals(Long.MAX_VALUE, adjustToLong(Long.MAX_VALUE)); assertEquals(Long.
@Test public void testSetHeaderId() { byte[] data = new byte[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x
@Test public void testSetHeaderId() { byte[] data = new byte[] { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x26, 0x25, 0x26, 0x26, 0x26, 0x
@Test public void testGetHeaderId() { byte[] data = new byte[] { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x20, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x26, 0x26, 0x25, 0x26, 0x26, 0x26, 0x
@Test public void testGetHeaderId() { byte[] data = new byte[] { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x20, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x26, 0x26, 0x25, 0x26, 0x26, 0x26, 0x
@Test public void testSetLocalFileDataData() { byte[] data = new byte[] { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x26, 0x25, 0x26, 0x26, 0x26,
@Test public void testSetLocalFileDataData() { byte[] data = new byte[] { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x0E, 0x0F, 0x0F, 0x0E, 0x0F, 0x0F, 0x0E, 0x0F, 0x0F, 0x0E, 0x0F, 0x0
@Test public void testGetLocalNameDataLength() { assertEquals(zipShort.valueOf(localFileData.length), zipObj.getLocalNameDataLength()); }
@Test public void testGetTxtLength() { ZipShort length = zipShort.getLocalNameDataLength(); assertEquals(localDataLength, length); }
@Test public void testGetLocalFileDataData() { byte[] localFileData = instance.getLocalFileDataData(); assertEquals(localFileData.length, 4); assertEquals(zipShort.valueOf((byte) 0x00), (byte) 0x00); assertEquals(zipShort.valueOf((byte) 0x01), (byte) 0x01); assertEquals(zipShort.valueOf((byte) 0x02), (byte) 0x02); assertEquals(zipShort.valueOf((byte) 0x03), (byte) 0x03); assertEquals(zipShort.valueOf((byte) 0x04), (byte) 0x04); assertEquals
@Test public void testLineCopy() { byte[] line = line.getLocalFileDataData(); byte[] copy = copy(line); assertEquals(line.length, copy.length); assertEquals(zipShort.valueOf((byte) 2), copy[0]); assertEquals(zipShort.valueOf((byte) 3), copy[1]); assertEquals(zipShort.valueOf((byte) 4), copy[2]); assertEquals(zipShort.valueOf((byte) 5), copy[3]); assertEquals(zipShort.valueOf((byte) 6), copy[4]); assertEquals(zipShort.valueOf((byte) 7), copy[5]); assertEquals(zipShort.
@Test public void testCopy() { byte[] to = new byte[] { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x20, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x26, 0x26, 0x25, 0x26, 0x26, 0x26, 0x26,
@Test public void testCopy() { byte[] to = new byte[] { 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x0E, 0x0F, 0x0F, 0x0E, 0x0F, 0x0E, 0x0F, 0x0E, 0x0F, 0x0E, 0x0F, 0x0E, 0x0F, 0
@Test public void testCopy() { byte[] to = new byte[] { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x20, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x26, 0x26, 0x25, 0x26, 0x26, 0x26, 0x26,
@Test public void testCopy() { byte[] to = new byte[] { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x26, 0x25, 0x26, 0x26, 0x26, 0x26,
@Test public void testCopy() { byte[] to = new byte[] { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x26, 0x25, 0x26, 0x26, 0x26, 0x26,
@Test public void testGzipCompressorInputStream() throws Exception { InputStream in = this.getClass().getClassLoader().getResourceAsStream("test.gz"); GzipCompressorInputStream compressor = new GzipCompressorInputStream(in); byte[] bytes = new byte[1024]; int read; while ((read = compressor.read()) != -1) { bytes[read] = (byte) read; } Assert.assertEquals(1024, bytes[0]); Assert.assertEquals(-1, bytes[1]); Assert.assertEquals(-1, bytes[2]); Assert.assertEquals(-1, bytes[3]); Assert.assertEquals(-1, bytes[4]); Assert.assertEquals(-1, bytes[
@Test public void testGzipCompressorInputStream() throws IOException { try (GZIPCompressorInputStream gzipCompressorInputStream = new GzipCompressorInputStream(new GZIPInputStream( new GZIPInputStream( new GZIPInputStream( new GZIPInputStream( new GZIPInputStream( new GZIPInputStream( new GZIPInputStream( new GZIPInputStream( new GZIPInputStream( new GZIPInputStream( new GZIPInputStream( new GZIPInputStream( new GZIPInputStream( new GZIPInputStream( new GZIPInputStream( new GZIPInputStream( new GZIPInputStream( new GZIPInputStream( new GZIPInputStream( new GZIPInputStream( new GZIPInputStream( new GZIPInputStream( new GZIPInputStream( new GZIPInputStream( new GZIPInputStream( new GZIPInputStream( new GZIPInputStream( new GZIPInputStream( new GZIPInputStream( new
@Test public void read() throws IOException { ByteArrayOutputStream out = new ByteArrayOutputStream(); GZIPOutputStream gzStream = new GZIPOutputStream(out); GZIPInputStream in = new GZIPInputStream(gzStream); ByteArrayOutputStream in2 = new ByteArrayOutputStream(); int i; while ((i = in2.read()) != -1) { out.write(i); } byte[] outArray = out.toByteArray(); Assert.assertArrayEquals(outArray, outArray); }
@Test public void read() throws IOException { ByteArrayOutputStream baos = new ByteArrayOutputStream(); GZIPOutputStream out = new GZIPOutputStream(baos); out.write(data); out.close(); GZIPInputStream in = new GZIPInputStream(new GZIPInputStream(baos.toByteArray())); in.close(); GzipCompressorInputStream sut = new GzipCompressorInputStream(in); int i; while ((i = sut.read()) != -1) { Assert.assertEquals(data[i++], i); } }
@Test public void testGetHeaderId() { System.out.println("getHeaderId"); ZipShort expResult = null; ZipShort result = instance.getHeaderId(); assertEquals(expResult, result); }
@Test public void testHeaderId() { ZipShort headerId = new ZipShort(0x756E); System.out.println(headerId); assertEquals(0x756E, headerId.shortValue()); assertEquals(0x00, headerId.shortValue()); assertEquals(0x00, headerId.shortValue()); assertEquals(0x00, headerId.shortValue()); assertEquals(0x00, headerId.shortValue()); assertEquals(0x00, headerId.shortValue()); assertEquals(0x00, headerId.shortValue()); assertEquals(0x00, headerId.shortValue()); assertEquals(0x00, headerId
@Test public void testGetCentralDirectoryLength() { System.out.println("getCentralDirectoryLength"); ZipShort expResult = null; ZipShort result = instance.getCentralDirectoryLength(); assertEquals(expResult, result); }
@Test public void testGetCentralDirectoryLength() { }
@Test public void testGetCentralDirectoryData() { try { byte[] data = mTestFile.getCentralDirectoryData(); assertNotNull(data); } catch (ZipException ex) { ex.printStackTrace(); fail(ex.getMessage()); } }
@Test public void testGetCentralDirectoryData() { byte[] data = new byte[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
@Test public void testSimpleEncodingHolder() { SimpleEncodingHolder encodingHolder = new SimpleEncodingHolder(new char[0]); System.out.println(encodingHolder); }
@Test public void testSimpleEncodingHolder() { SimpleEncodingHolder encodingHolder = new SimpleEncodingHolder(new char[0]); System.out.println(encodingHolder); }
@Test public void testGetEncoding() throws IOException { SimpleEncodingHolder decoder=new SimpleEncodingHolder(new char[] { \'a\', \'b\', \'c\' }); SimpleEncodingHolder decoder2=new SimpleEncodingHolder(new char[] { \'a\', \'b\', \'c\' }); SimpleEncodingHolder decoder3=new SimpleEncodingHolder(new char[] { \'a\', \'b\', \'c\' }); SimpleEncodingHolder decoder4=new SimpleEncodingHolder(new char[] { \'a\', \'b\', \'c\' }); SimpleEncodingHolder decoder5=new SimpleEncodingHolder(new char[] { \'a\', \'b\', \'c\' }); SimpleEncodingHolder decoder6=new SimpleEncodingHolder(new char
@Test public void testJarArchiveEntry() { try { new JarArchiveEntry(null); fail("NullPointerException expected"); } catch (NullPointerException e) { } try { new JarArchiveEntry(""); fail("NullPointerException expected"); } catch (NullPointerException e) { } try { new JarArchiveEntry("test"); fail("NullPointerException expected"); } catch (NullPointerException e) { } try { new JarArchiveEntry("test"); fail("NullPointerException expected"); } catch (NullPointerException e) { } try { new JarArchiveEntry("test"); fail("NullPointerException expected"); } catch (NullPointerException e) { } try { new JarArchiveEntry("test"); fail("NullPointerException expected"); } catch (Null
@Test public void testJarArchiveEntry() { String name = "test.jar"; try { JarArchiveEntry entry = new JarArchiveEntry(name); assertEquals(name, entry.getName()); assertTrue(entry.getManifestAttributes().isEmpty()); assertTrue(entry.getCertificates().isEmpty()); assertTrue(entry.getCertificates().isEmpty()); assertTrue(entry.getCertificates().isEmpty()); } catch (ZipException e) { e.printStackTrace(); fail(e.getMessage()); } catch (Exception e) { e.printStackTrace(); fail(e.getMessage()); } }
@Test public void testRegister() { try { ZipExtraField[] data = new ZipExtraField[4]; data[0] = new ZipExtraField(ZipShort.valueOf((short) 0)); data[1] = new ZipExtraField(ZipShort.valueOf((short) 1)); data[2] = new ZipExtraField(ZipShort.valueOf((short) 2)); data[3] = new ZipExtraField(ZipShort.valueOf((short) 3)); data[4] = new ZipExtraField(ZipShort.valueOf((short) 4)); data[5] = new ZipExtraField(ZipShort.valueOf((short) 5)); data[6] =
@Test public void testRegister() { try { ZipExtraField[] data = new ZipExtraField[4]; data[0] = new ZipExtraField(ZipShort.valueOf((short) 0)); data[1] = new ZipExtraField(ZipShort.valueOf((short) 1)); data[2] = new ZipExtraField(ZipShort.valueOf((short) 2)); data[3] = new ZipExtraField(ZipShort.valueOf((short) 3)); data[4] = new ZipExtraField(ZipShort.valueOf((short) 4)); data[5] = new ZipExtraField(ZipShort.valueOf((short) 5)); data[6] =
@Test public void testRegister() throws Exception { ZipExtraField[] data = new ZipExtraField[4]; data[0] = new ZipExtraField(ZipShort.valueOf((short) 0)); data[1] = new ZipExtraField(ZipShort.valueOf((short) 1)); data[2] = new ZipExtraField(ZipShort.valueOf((short) 2)); data[3] = new ZipExtraField(ZipShort.valueOf((short) 3)); data[4] = new ZipExtraField(ZipShort.valueOf((short) 4)); data[5] = new ZipExtraField(ZipShort.valueOf((short) 5)); data[6] =
@Test public void testRegister() { try { ZipExtraField[] data = new ZipExtraField[4]; data[0] = new ZipExtraField(ZipShort.valueOf((short) 0)); data[1] = new ZipExtraField(ZipShort.valueOf((short) 1)); data[2] = new ZipExtraField(ZipShort.valueOf((short) 2)); data[3] = new ZipExtraField(ZipShort.valueOf((short) 3)); data[4] = new ZipExtraField(ZipShort.valueOf((short) 4)); data[5] = new ZipExtraField(ZipShort.valueOf((short) 5)); data[6] =
@Test public void testMergeLocalFileDataData() throws Exception { System.out.println("mergeLocalFileDataData"); ZipExtraField[] data = new ZipExtraField[]{ new ZipExtraField(ZipShort.valueOf("1")), new ZipExtraField(ZipShort.valueOf("2")), new ZipExtraField(ZipShort.valueOf("3")), new ZipExtraField(ZipShort.valueOf("4")), new ZipExtraField(ZipShort.valueOf("5")), new ZipExtraField(ZipShort.valueOf("6")), new ZipExtraField(ZipShort.valueOf("7")), new ZipExtraField(ZipShort.valueOf("8
@Test public void testMergeLocalFileDataData() throws Exception { System.out.println("mergeLocalFileDataData"); ZipExtraField[] data = new ZipExtraField[]{ new ZipExtraField(ZipShort.valueOf("1")), new ZipExtraField(ZipShort.valueOf("2")), new ZipExtraField(ZipShort.valueOf("3")), new ZipExtraField(ZipShort.valueOf("4")), new ZipExtraField(ZipShort.valueOf("5")), new ZipExtraField(ZipShort.valueOf("6")), new ZipExtraField(ZipShort.valueOf("7")), new ZipExtraField(ZipShort.valueOf("8
@Test public void testMergeLocalFileDataData() throws Exception { System.out.println("mergeLocalFileDataData"); ZipExtraField[] data = new ZipExtraField[]{ new ZipExtraField(ZipShort.valueOf("1")), new ZipExtraField(ZipShort.valueOf("2")), new ZipExtraField(ZipShort.valueOf("3")), new ZipExtraField(ZipShort.valueOf("4")), new ZipExtraField(ZipShort.valueOf("5")), new ZipExtraField(ZipShort.valueOf("6")), new ZipExtraField(ZipShort.valueOf("7")), new ZipExtraField(ZipShort.valueOf("8
@Test public void testMergeLocalFileDataData() throws Exception { ZipExtraField[] data = new ZipExtraField[4]; data[0] = new ZipExtraField(ZipShort.valueOf((short) 0)); data[1] = new ZipExtraField(ZipShort.valueOf((short) 1)); data[2] = new ZipExtraField(ZipShort.valueOf((short) 2)); data[3] = new ZipExtraField(ZipShort.valueOf((short) 3)); data[4] = new ZipExtraField(ZipShort.valueOf((short) 4)); data[5] = new ZipExtraField(ZipShort.valueOf((short) 5)); data
@Test public void testMergeLocalFileDataData() throws Exception { System.out.println("mergeLocalFileDataData"); ZipExtraField[] data = new ZipExtraField[]{ new ZipExtraField(ZipShort.valueOf("1")), new ZipExtraField(ZipShort.valueOf("2")), new ZipExtraField(ZipShort.valueOf("3")), new ZipExtraField(ZipShort.valueOf("4")), new ZipExtraField(ZipShort.valueOf("5")), new ZipExtraField(ZipShort.valueOf("6")), new ZipExtraField(ZipShort.valueOf("7")), new ZipExtraField(ZipShort.valueOf("8
@Test public void testMergeLocalFileDataData() throws Exception { System.out.println("mergeLocalFileDataData"); ZipExtraField[] data = new ZipExtraField[]{ new ZipExtraField(ZipShort.valueOf("1")), new ZipExtraField(ZipShort.valueOf("2")), new ZipExtraField(ZipShort.valueOf("3")), new ZipExtraField(ZipShort.valueOf("4")), new ZipExtraField(ZipShort.valueOf("5")), new ZipExtraField(ZipShort.valueOf("6")), new ZipExtraField(ZipShort.valueOf("7")), new ZipExtraField(ZipShort.valueOf("8
@Test public void testMergeLocalFileDataData() throws Exception { System.out.println("mergeLocalFileDataData"); ZipExtraField[] data = new ZipExtraField[]{ new ZipExtraField(ZipShort.valueOf("1")), new ZipExtraField(ZipShort.valueOf("2")), new ZipExtraField(ZipShort.valueOf("3")), new ZipExtraField(ZipShort.valueOf("4")), new ZipExtraField(ZipShort.valueOf("5")), new ZipExtraField(ZipShort.valueOf("6")), new ZipExtraField(ZipShort.valueOf("7")), new ZipExtraField(ZipShort.valueOf("8
@Test public void testMergeLocalFileDataData() throws Exception { System.out.println("mergeLocalFileDataData"); ZipExtraField[] data = new ZipExtraField[]{ new ZipExtraField(ZipShort.valueOf("0")), new ZipExtraField(ZipShort.valueOf("1")), new ZipExtraField(ZipShort.valueOf("2")), new ZipExtraField(ZipShort.valueOf("3")), new ZipExtraField(ZipShort.valueOf("4")), new ZipExtraField(ZipShort.valueOf("5")), new ZipExtraField(ZipShort.valueOf("6")), new ZipExtraField(ZipShort.valueOf("7
@Test public void testMergeLocalFileDataData() throws Exception { ZipExtraField[] data = new ZipExtraField[4]; data[0] = new ZipExtraField(ZipShort.valueOf((short) 0)); data[1] = new ZipExtraField(ZipShort.valueOf((short) 1)); data[2] = new ZipExtraField(ZipShort.valueOf((short) 2)); data[3] = new ZipExtraField(ZipShort.valueOf((short) 3)); data[4] = new ZipExtraField(ZipShort.valueOf((short) 4)); data[5] = new ZipExtraField(ZipShort.valueOf((short) 5)); data
@Test public void testMergeLocalFileDataData() throws Exception { System.out.println("mergeLocalFileDataData"); ZipExtraField[] data = new ZipExtraField[4]; data[0] = new ZipExtraField(); data[1] = new ZipExtraField(); data[2] = new ZipExtraField(); data[3] = new ZipExtraField(); data[4] = new ZipExtraField(); data[5] = new ZipExtraField(); data[6] = new ZipExtraField(); data[7] = new ZipExtraField(); data[8] = new ZipExtraField(); data[9] = new ZipExtraField(); data[10] = new ZipExtraField
@Test public void testMergeLocalFileDataData() throws Exception { System.out.println("mergeLocalFileDataData"); ZipExtraField[] data = new ZipExtraField[]{ new ZipExtraField(ZipShort.valueOf("1")), new ZipExtraField(ZipShort.valueOf("2")), new ZipExtraField(ZipShort.valueOf("3")), new ZipExtraField(ZipShort.valueOf("4")), new ZipExtraField(ZipShort.valueOf("5")), new ZipExtraField(ZipShort.valueOf("6")), new ZipExtraField(ZipShort.valueOf("7")), new ZipExtraField(ZipShort.valueOf("8
@Test public void testMergeLocalFileDataData() throws Exception { System.out.println("mergeLocalFileDataData"); ZipExtraField[] data = new ZipExtraField[]{ new ZipExtraField(ZipShort.valueOf("1")), new ZipExtraField(ZipShort.valueOf("2")), new ZipExtraField(ZipShort.valueOf("3")), new ZipExtraField(ZipShort.valueOf("4")), new ZipExtraField(ZipShort.valueOf("5")), new ZipExtraField(ZipShort.valueOf("6")), new ZipExtraField(ZipShort.valueOf("7")), new ZipExtraField(ZipShort.valueOf("8
@Test public void testMergeLocalFileDataData() throws Exception { System.out.println("mergeLocalFileDataData"); ZipExtraField[] data = new ZipExtraField[]{ new ZipExtraField(ZipShort.valueOf("1")), new ZipExtraField(ZipShort.valueOf("2")), new ZipExtraField(ZipShort.valueOf("3")), new ZipExtraField(ZipShort.valueOf("4")), new ZipExtraField(ZipShort.valueOf("5")), new ZipExtraField(ZipShort.valueOf("6")), new ZipExtraField(ZipShort.valueOf("7")), new ZipExtraField(ZipShort.valueOf("8
@Test public void testMergeCentralDirectoryData() throws Exception { System.out.println("mergeCentralDirectoryData"); ZipExtraField[] data = new ZipExtraField[]{ new ZipExtraField(ZipShort.valueOf("1")), new ZipExtraField(ZipShort.valueOf("2")), new ZipExtraField(ZipShort.valueOf("3")), new ZipExtraField(ZipShort.valueOf("4")), new ZipExtraField(ZipShort.valueOf("5")), new ZipExtraField(ZipShort.valueOf("6")), new ZipExtraField(ZipShort.valueOf("7")), new ZipExtraField(ZipShort.valueOf("8
@Test public void testMergeCentralDirectoryData() throws Exception { System.out.println("mergeCentralDirectoryData"); ZipExtraField[] data = new ZipExtraField[]{ new ZipExtraField(ZipShort.valueOf("1")), new ZipExtraField(ZipShort.valueOf("2")), new ZipExtraField(ZipShort.valueOf("3")), new ZipExtraField(ZipShort.valueOf("4")), new ZipExtraField(ZipShort.valueOf("5")), new ZipExtraField(ZipShort.valueOf("6")), new ZipExtraField(ZipShort.valueOf("7")), new ZipExtraField(ZipShort.valueOf("8
@Test public void testMergeCentralDirectoryData() throws Exception { System.out.println("mergeCentralDirectoryData"); ZipExtraField[] data = new ZipExtraField[]{ new ZipExtraField(ZipShort.valueOf("1")), new ZipExtraField(ZipShort.valueOf("2")), new ZipExtraField(ZipShort.valueOf("3")), new ZipExtraField(ZipShort.valueOf("4")), new ZipExtraField(ZipShort.valueOf("5")), new ZipExtraField(ZipShort.valueOf("6")), new ZipExtraField(ZipShort.valueOf("7")), new ZipExtraField(ZipShort.valueOf("8
@Test public void testMergeCentralDirectoryData() throws Exception { }
@Test public void testMergeCentralDirectoryData() throws Exception { System.out.println("mergeCentralDirectoryData"); ZipExtraField[] data = new ZipExtraField[]{ new ZipExtraField(ZipShort.valueOf("1")), new ZipExtraField(ZipShort.valueOf("2")), new ZipExtraField(ZipShort.valueOf("3")), new ZipExtraField(ZipShort.valueOf("4")), new ZipExtraField(ZipShort.valueOf("5")), new ZipExtraField(ZipShort.valueOf("6")), new ZipExtraField(ZipShort.valueOf("7")), new ZipExtraField(ZipShort.valueOf("8
@Test public void testMergeCentralDirectoryData() throws Exception { System.out.println("mergeCentralDirectoryData"); ZipExtraField[] data = new ZipExtraField[]{ new ZipExtraField(ZipShort.valueOf("1")), new ZipExtraField(ZipShort.valueOf("2")), new ZipExtraField(ZipShort.valueOf("3")), new ZipExtraField(ZipShort.valueOf("4")), new ZipExtraField(ZipShort.valueOf("5")), new ZipExtraField(ZipShort.valueOf("6")), new ZipExtraField(ZipShort.valueOf("7")), new ZipExtraField(ZipShort.valueOf("8
@Test public void testMergeCentralDirectoryData() throws Exception { System.out.println("mergeCentralDirectoryData"); ZipExtraField[] data = new ZipExtraField[]{ new ZipExtraField(ZipShort.valueOf("1")), new ZipExtraField(ZipShort.valueOf("2")), new ZipExtraField(ZipShort.valueOf("3")), new ZipExtraField(ZipShort.valueOf("4")), new ZipExtraField(ZipShort.valueOf("5")), new ZipExtraField(ZipShort.valueOf("6")), new ZipExtraField(ZipShort.valueOf("7")), new ZipExtraField(ZipShort.valueOf("8
@Test public void testMergeCentralDirectoryData() throws Exception { }
@Test public void testMergeCentralDirectoryData() throws Exception { System.out.println("mergeCentralDirectoryData"); ZipExtraField[] data = new ZipExtraField[4]; data[0] = new ZipExtraField(); data[1] = new ZipExtraField(); data[2] = new ZipExtraField(); data[3] = new ZipExtraField(); data[4] = new ZipExtraField(); data[5] = new ZipExtraField(); data[6] = new ZipExtraField(); data[7] = new ZipExtraField(); data[8] = new ZipExtraField(); data[9] = new ZipExtraField(); data[10] = new ZipExtraField
@Test public void testMergeCentralDirectoryData() throws Exception { System.out.println("mergeCentralDirectoryData"); ZipExtraField[] data = new ZipExtraField[4]; data[0] = new ZipExtraField(); data[1] = new ZipExtraField(); data[2] = new ZipExtraField(); data[3] = new ZipExtraField(); data[4] = new ZipExtraField(); data[5] = new ZipExtraField(); data[6] = new ZipExtraField(); data[7] = new ZipExtraField(); data[8] = new ZipExtraField(); data[9] = new ZipExtraField(); data[10] = new ZipExtraField
@Test public void testMergeCentralDirectoryData() throws Exception { System.out.println("mergeCentralDirectoryData"); ZipExtraField[] data = new ZipExtraField[]{ new ZipExtraField(ZipShort.valueOf("1")), new ZipExtraField(ZipShort.valueOf("2")), new ZipExtraField(ZipShort.valueOf("3")), new ZipExtraField(ZipShort.valueOf("4")), new ZipExtraField(ZipShort.valueOf("5")), new ZipExtraField(ZipShort.valueOf("6")), new ZipExtraField(ZipShort.valueOf("7")), new ZipExtraField(ZipShort.valueOf("8
@Test public void testMergeCentralDirectoryData() throws Exception { System.out.println("mergeCentralDirectoryData"); ZipExtraField[] data = new ZipExtraField[]{ new ZipExtraField(ZipShort.valueOf("1")), new ZipExtraField(ZipShort.valueOf("2")), new ZipExtraField(ZipShort.valueOf("3")), new ZipExtraField(ZipShort.valueOf("4")), new ZipExtraField(ZipShort.valueOf("5")), new ZipExtraField(ZipShort.valueOf("6")), new ZipExtraField(ZipShort.valueOf("7")), new ZipExtraField(ZipShort.valueOf("8
@Test public void testMergeCentralDirectoryData() throws Exception { System.out.println("mergeCentralDirectoryData"); ZipExtraField[] data = new ZipExtraField[]{ new ZipExtraField(ZipShort.valueOf("0")), new ZipExtraField(ZipShort.valueOf("1")), new ZipExtraField(ZipShort.valueOf("2")), new ZipExtraField(ZipShort.valueOf("3")), new ZipExtraField(ZipShort.valueOf("4")), new ZipExtraField(ZipShort.valueOf("5")), new ZipExtraField(ZipShort.valueOf("6")), new ZipExtraField(ZipShort.valueOf("7
@Test public void testSimple8BitChar() { Simple8BitChar p = new Simple8BitChar((byte)0, \'\\0\'); assertEquals(p.decodeByte((byte)0), \'\\0\'); assertEquals(p.decodeByte((byte)\'\\0\'), \'\\0\'); assertEquals(p.decodeByte((byte)\'\\0\'), \'\\0\'); assertEquals(p.decodeHighChar((char)\'\\0\'), \'\\0\'); assertEquals(p.decodeHighChar((char)\'\\0\'), \'\\0\'); assertEquals(p.decodeHighChar((char)\'\\0\'), \'
@Test public void testSimple8BitChar() { Simple8BitChar p = new Simple8BitChar((byte) 0, \'\\0\'); assertEquals(p.decodeByte((byte) 0), \'\\0\'); assertEquals(p.decodeByte((byte) \'\\0\'), \'\\0\'); assertEquals(p.decodeByte((byte) \'\\0\'), \'\\0\'); assertEquals(p.decodeByte((byte) \'\\0\'), \'\\0\'); assertEquals(p.decodeByte((byte) \'\\0\'), \'\\0\'); assertEquals(p.decodeByte((byte) \'\\0\'), \'\\0\'
@Test public void testSimple8BitChar() { Simple8BitChar c = new Simple8BitChar((byte) 0, \'\\0\'); assertEquals(c.decodeByte((byte) 0), \'\\0\'); assertEquals(c.decodeByte((byte) \'\\0\'), \'\\0\'); assertEquals(c.decodeByte((byte) \'\\0\'), \'\\0\'); assertEquals(c.decodeByte((byte) \'\\0\'), \'\\0\'); assertEquals(c.decodeByte((byte) \'\\0\'), \'\\0\'); assertEquals(c.decodeByte((byte) \'\\0\'), \'\\0\'
@Test public void testCompareTo() { Simple8BitChar c1 = new Simple8BitChar((byte) 0, 'a'); Simple8BitChar c2 = new Simple8BitChar((byte) 0, 'b'); Simple8BitZipEncoding cp1 = new Simple8BitZipEncoding(new char[] { 'a', 'b', 'c' }); Simple8BitZipEncoding cp2 = new Simple8BitZipEncoding(new char[] { 'a', 'b', 'c' }); Simple8BitZipEncoding cp3 = new Simple8BitZipEncoding(new char[] { 'a', 'b', 'c' }); Simple8BitZipEncoding cp4 = new Simple8Bit
@Test public void testCompareTo() { Simple8BitChar a = new Simple8BitChar(1, 'a'); Simple8BitChar b = new Simple8BitChar(1, 'b'); Simple8BitChar c = new Simple8BitChar(1, 'c'); Simple8BitChar d = new Simple8BitChar(1, 'd'); Simple8BitChar e = new Simple8BitChar(1, 'e'); Simple8BitChar f = new Simple8BitChar(1, 'f'); Simple8BitChar g = new Simple8BitChar(1, 'g'); Simple8BitChar h = new Simple8BitChar(1, 'h'); Simple8Bit
@Test public void testCompareTo() { Simple8BitChar a = new Simple8BitChar((byte) 0, 'a'); Simple8BitChar b = new Simple8BitChar((byte) 0, 'b'); Simple8BitZipEncoding z = new Simple8BitZipEncoding(new char[] { 'a', 'b' }); Simple8BitChar c = new Simple8BitChar((byte) 0, 'c'); Simple8BitChar d = new Simple8BitChar((byte) 0, 'd'); Simple8BitChar e = new Simple8BitChar((byte) 0, 'e'); Simple8BitChar f = new Simple8BitChar((byte) 0, 'f');
@Test public void testSimple8BitZipEncoding() { Simple8BitZipEncoding encoding = new Simple8BitZipEncoding(new char[] { 'a', 'b', 'c' }); System.out.println(encoding.decode(new byte[] { 'a', 'b', 'c' })); System.out.println(new Simple8BitZipEncoding(new char[] { 'a', 'b', 'c' }).decode(new byte[] { 'a', 'b', 'c' })); System.out.println(new Simple8BitZipEncoding(new char[] { 'a', 'b', 'c' }).decode(new byte[] { 'a', '
@Test public void testSimple8BitZipEncoding() throws IOException { Simple8BitZipEncoding zipEncoding = new Simple8BitZipEncoding(new char[] { \'a\', \'b\', \'c\', \'d\', \'e\', \'f\', \'g\', \'h\', \'i\', \'j\', \'k\', \'l\', \'m\', \'n\', \'o\', \'o\' }); ByteBuffer bb = encode(zipEncoding); System.out.println(bb); }
@Test public void testSimple8BitZipEncoding() throws IOException { Simple8BitZipEncoding encoding = new Simple8BitZipEncoding(new char[] { 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'o', 'r', 's' }); System.out.println(encoding.decode(new byte[] { 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'l', 'm', 'o', 'r', 's' })); System.out.println(
@Test public void testSimple8BitZipEncoding() { Simple8BitZipEncoding zipEncoding = new Simple8BitZipEncoding(new char[]{\'a\', \'b\', \'c\', \'d\', \'e\', \'f\', \'g\', \'h\', \'i\', \'j\', \'k\'}); System.out.println(zipEncoding.encode(new byte[]{\'a\', \'b\', \'c\', \'d\', \'e\', \'f\', \'g\', \'h\', \'i\', \'j\', \'k\'})); System.out.println(zipEncoding.decode(new byte[]{\'a\', \'b\', \'c\', \'d\', \'e\', \'f\',
@Test public void testSimple8BitZipEncoding() throws IOException { Simple8BitZipEncoding zipEncoding = new Simple8BitZipEncoding(new char[] { 'a', 'b', 'c' }); System.out.println(zipEncoding.decode(new byte[] { 'a', 'b', 'c' })); System.out.println(new Simple8BitZipEncoding(new char[] { 'a', 'b', 'c' }).decode(new byte[] { 'a', 'b', 'c' })); System.out.println(new Simple8BitZipEncoding(new char[] { 'a', 'b', 'c' }).decode(new byte[] {
@Test public void testSimple8BitZipEncoding() throws IOException { Simple8BitZipEncoding encoding = new Simple8BitZipEncoding(new char[] { 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'o', 'r', 's' }); System.out.println(encoding.decode(new byte[] { 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'l', 'm', 'o', 'r', 's' })); System.out.println(
@Test public void testSimple8BitZipEncoding() throws IOException { Simple8BitZipEncoding zipEncoding = new Simple8BitZipEncoding(new char[]{\'a\', \'b\', \'c\', \'d\', \'e\', \'f\', \'g\', \'h\', \'i\', \'j\', \'k\', \'l\', \'m\', \'n\', \'o\', \'p\', \'q\', \'r\', \'s\', \'t\'}); ByteBuffer bb = encode(zipEncoding); Assert.assertArrayEquals(new byte[]{\'a\', \'b\', \'c\', \'d\', \'e\', \'f\', \'g\', \'h\', \'i\', \'j\', \'k\', \'l\',
@Test public void testDecodeByte() { Simple8BitChar c = new Simple8BitChar((byte) 0, \'a\'); assertEquals(\'a\', c.decodeByte((byte) 0)); assertEquals(\'b\', c.decodeByte((byte) \'b\')); assertEquals(\'\\0\', c.decodeByte((byte) \'\\0\')); assertEquals(\'\\0\', c.decodeByte((byte) \'\\0\')); assertEquals(\'\\0\', c.decodeByte((byte) \'\\0\')); assertEquals(\'\\0\', c.decodeByte((byte) \'\\0\')); assertEquals(\'\\0\', c.decodeByte((byte) \'\\0\'
@Test public void testDecodeByte() { Simple8BitChar c = new Simple8BitChar((byte) 0, \'\\0\'); assertEquals(\'\\0\', c.decodeByte((byte) 0)); assertEquals(\'\\0\', c.decodeByte((byte) \'\\0\')); assertEquals(\'\\0\', c.decodeByte((byte) \'\\0\')); assertEquals(\'\\0\', c.decodeByte((byte) \'\\0\')); assertEquals(\'\\0\', c.decodeByte((byte) \'\\0\')); assertEquals(\'\\0\', c.decodeByte((byte) \'\\0\')); assertEquals(\'\\0\', c.decodeByte((byte)
@Test public void testDecodeByte() { Simple8BitChar p = new Simple8BitChar((byte) 0, 'a'); assertEquals(p.decodeByte((byte) 'a'), 'a'); assertEquals(p.decodeByte((byte) 'b'), 'b'); assertEquals(p.decodeByte((byte) 'c'), 'c'); assertEquals(p.decodeByte((byte) 'd'), 'd'); assertEquals(p.decodeByte((byte) 'e'), 'e'); assertEquals(p.decodeByte((byte) 'f'), 'f'); assertEquals(p.decodeByte((byte) 'g'), 'g'); assertEquals(p.decodeByte((
@Test public void decodeByte() { Simple8BitChar c = new Simple8BitChar((byte) 0, \'a\'); assertEquals(c.decodeByte((byte) 0), \'a\'); assertEquals(c.decodeByte((byte) \'b\'), \'b\'); assertEquals(c.decodeByte((byte) \'c\'), \'c\'); assertEquals(c.decodeByte((byte) \'\\0\'), \'\\0\'); assertEquals(c.decodeByte((byte) \'\\0\'), \'\\0\'); assertEquals(c.decodeByte((byte) \'\\0\'), \'\\0\'); assertEquals(c.decodeByte((
@Test public void testCanEncodeChar() { Simple8BitChar p = new Simple8BitChar(0, 'a'); assertTrue(p.canEncodeChar('\\0')); assertTrue(p.canEncodeChar('\\0')); assertTrue(p.canEncodeChar('\\0')); assertTrue(p.canEncodeChar('\\0')); assertTrue(p.canEncodeChar('\\0')); assertTrue(p.canEncodeChar('\\0')); assertTrue(p.canEncodeChar('\\0')); assertTrue(p.canEncodeChar('\\0')); assertTrue(p.canEncodeChar('\\0')); assertTrue(p
@Test public void testCanEncodeChar() { Simple8BitChar p = new Simple8BitChar(0, 'a'); assertTrue(p.canEncodeChar('a')); assertTrue(p.canEncodeChar('\\0')); assertTrue(p.canEncodeChar('\\0')); assertTrue(p.canEncodeChar('\\0')); assertTrue(p.canEncodeChar('\\0')); assertTrue(p.canEncodeChar('\\0')); assertTrue(p.canEncodeChar('\\0')); assertTrue(p.canEncodeChar('\\0')); assertTrue(p.canEncodeChar('\\0')); assertTrue(p.
@Test public void testCanEncodeChar() { Simple8BitChar p = new Simple8BitChar(0, 'a'); assertTrue(p.canEncodeChar('a')); assertTrue(p.canEncodeChar('\\0')); assertTrue(p.canEncodeChar('\\0')); assertTrue(p.canEncodeChar('\\0')); assertTrue(p.canEncodeChar('\\0')); assertTrue(p.canEncodeChar('\\0')); assertTrue(p.canEncodeChar('\\0')); assertTrue(p.canEncodeChar('\\0')); assertTrue(p.canEncodeChar('\\0')); assertTrue(p.
@Test public void testCanEncodeChar() { Simple8BitChar p = new Simple8BitChar(0, 'a'); assertTrue(p.canEncodeChar('a')); assertTrue(p.canEncodeChar('\\0')); assertTrue(p.canEncodeChar('\\0')); assertTrue(p.canEncodeChar('\\0')); assertTrue(p.canEncodeChar('\\0')); assertTrue(p.canEncodeChar('\\0')); assertTrue(p.canEncodeChar('\\0')); assertTrue(p.canEncodeChar('\\0')); assertTrue(p.canEncodeChar('\\0')); assertTrue(p.
@Test public void testCanEncodeChar() { Simple8BitChar p = new Simple8BitChar(0, 'a'); assertTrue(p.canEncodeChar('a')); assertTrue(p.canEncodeChar('\\0')); assertTrue(p.canEncodeChar('\\0')); assertTrue(p.canEncodeChar('\\0')); assertTrue(p.canEncodeChar('\\0')); assertTrue(p.canEncodeChar('\\0')); assertTrue(p.canEncodeChar('\\0')); assertTrue(p.canEncodeChar('\\0')); assertTrue(p.canEncodeChar('\\0')); assertTrue(p.
@Test public void testPushEncodedChar() { Simple8BitChar[] lines = new Simple8BitChar[] { Simple8BitChar.encode(\'a\'), Simple8BitChar.encode(\'b\'), Simple8BitChar.encode(\'c\'), Simple8BitChar.encode(\'d\'), Simple8BitChar.encode(\'e\'), Simple8BitChar.encode(\'f\'), Simple8BitChar.encode(\'\\0\'), Simple8BitChar.encode(\'\\0\'), Simple8BitChar.encode(\'\\0\'), Simple8BitChar.encode(\'\\0\'), Simple8BitChar.encode(\'\\0\'), Simple8BitChar.encode(\'\\0
@Test public void testPushEncodedChar() { Simple8BitChar p = new Simple8BitChar(0, 'a'); ByteBuffer bb = ByteBuffer.allocate(8); p.pushEncodedChar(bb, 'a'); Assert.assertEquals(0, bb.position()); Assert.assertEquals('a', bb.get(0)); Assert.assertEquals('a', bb.get(1)); Assert.assertEquals('a', bb.get(2)); Assert.assertEquals('a', bb.get(3)); Assert.assertEquals('a', bb.get(4)); Assert.assertEquals('a', bb.get(5)); Assert.assertEquals('a', bb.get(6
@Test public void testPushEncodedChar() { Simple8BitChar ch = new Simple8BitChar(\'a\', \'b\'); ByteBuffer bb = ByteBuffer.allocate(8); ch.pushEncodedChar(bb, \'a\'); Assert.assertEquals(\'a\', bb.get()); Assert.assertEquals(\'b\', bb.get()); ch.pushEncodedChar(bb, \'c\'); Assert.assertEquals(\'c\', bb.get()); Assert.assertEquals(\'a\', bb.get()); ch.pushEncodedChar(bb, \'c\'); Assert.assertEquals(\'c\', bb.get()); Assert.assertEquals(\'c\', bb.get()); ch.pushEncodedChar(bb, \'
@Test public void testPushEncodedChar() { Simple8BitChar p = new Simple8BitChar(0, 'a'); ByteBuffer bb = ByteBuffer.allocate(8); p.pushEncodedChar(bb, 'a'); assertEquals('a', bb.get(0)); assertEquals('a', bb.get(1)); assertEquals('a', bb.get(2)); assertEquals('a', bb.get(3)); assertEquals('a', bb.get(4)); assertEquals('a', bb.get(5)); assertEquals('a', bb.get(6)); assertEquals('a', bb.get(7)); assertEquals('a', bb.get(8)); }
@Test public void testPushEncodedChar() { Simple8BitChar p = new Simple8BitChar(1, 'a'); ByteBuffer bb = ByteBuffer.allocate(4); p.pushEncodedChar(bb, 'a'); Assert.assertEquals(1, bb.position()); Assert.assertEquals('a', bb.get(0)); Assert.assertEquals('a', bb.get(1)); Assert.assertEquals('a', bb.get(2)); Assert.assertEquals('a', bb.get(3)); Assert.assertEquals('a', bb.get(4)); Assert.assertEquals('a', bb.get(5)); Assert.assertEquals('a', bb.get(6
@Test public void testPushEncodedChar() { Simple8BitChar ch = new Simple8BitChar(\'a\', \'b\'); ByteBuffer bb = ByteBuffer.allocate(10); ch.pushEncodedChar(bb, \'a\'); Assert.assertEquals(\'a\', bb.get()); ch.pushEncodedChar(bb, \'b\'); Assert.assertEquals(\'b\', bb.get()); ch.pushEncodedChar(bb, \'c\'); Assert.assertEquals(\'c\', bb.get()); ch.pushEncodedChar(bb, \'\\0\'); Assert.assertEquals(\'\\0\', bb.get()); ch.pushEncodedChar(bb, \'\\0\'); Assert.assertEquals
@Test public void testPushEncodedChar() { Simple8BitChar p = new Simple8BitChar(0, 'a'); ByteBuffer bb = ByteBuffer.allocate(8); p.pushEncodedChar(bb, 'a'); assertEquals('a', bb.get(0)); assertEquals('a', bb.get(1)); assertEquals('a', bb.get(2)); assertEquals('a', bb.get(3)); assertEquals('a', bb.get(4)); assertEquals('a', bb.get(5)); assertEquals('a', bb.get(6)); assertEquals('a', bb.get(7)); assertEquals('a', bb.get(8)); }
@Test public void testPushEncodedChar() { Simple8BitChar p = new Simple8BitChar(0, 'a'); ByteBuffer bb = ByteBuffer.allocate(8); p.pushEncodedChar(bb, 'a'); assertEquals('a', bb.get(0)); assertEquals('a', bb.get(1)); assertEquals('a', bb.get(2)); assertEquals('a', bb.get(3)); assertEquals('a', bb.get(4)); assertEquals('a', bb.get(5)); assertEquals('a', bb.get(6)); assertEquals('a', bb.get(7)); assertEquals('a', bb.get(8)); }
@Test public void testPushEncodedChar() { Simple8BitChar p = new Simple8BitChar(0, 'a'); ByteBuffer bb = ByteBuffer.allocate(8); p.pushEncodedChar(bb, 'a'); assertEquals('a', bb.get(0)); assertEquals('a', bb.get(1)); assertEquals('a', bb.get(2)); assertEquals('a', bb.get(3)); assertEquals('a', bb.get(4)); assertEquals('a', bb.get(5)); assertEquals('a', bb.get(6)); assertEquals('a', bb.get(7)); assertEquals('a', bb.get(8)); }
@Test public void testEncodeHighChar() { Simple8BitChar br = Simple8BitChar.encodeHighChar(\'\\0\'); System.out.println(br.encode("\\0")); System.out.println(br.encode("\\0")); System.out.println(br.encode("\\0")); System.out.println(br.encode("\\0")); System.out.println(br.encode("\\0")); System.out.println(br.encode("\\0")); System.out.println(br.encode("\\0")); System.out.println(br.encode("\\0")); System.out.println(br
@Test public void testEncodeHighChar() { Simple8BitChar p1 = new Simple8BitChar(0, '1'); Simple8BitChar p2 = new Simple8BitChar(1, '2'); Simple8BitChar p3 = new Simple8BitChar(2, '3'); Simple8BitChar p4 = new Simple8BitChar(3, '4'); Simple8BitChar p5 = new Simple8BitChar(4, '5'); Simple8BitChar p6 = new Simple8BitChar(5, '6'); Simple8BitChar p7 = new Simple8BitChar(6, '7'); Simple8BitChar p8 = new Simple8BitChar
@Test public void testEncodeHighChar() { Simple8BitChar[] ps = new Simple8BitChar[1]; ps[0] = Simple8BitChar.encodeHighChar(\'a\'); ps[1] = Simple8BitChar.encodeHighChar(\'b\'); Simple8BitChar[] ps2 = new Simple8BitChar[1]; ps2[0] = Simple8BitChar.encodeHighChar(\'a\'); ps2[1] = Simple8BitChar.encodeHighChar(\'b\'); Simple8BitChar[] ps3 = new Simple8BitChar[1]; ps3[0] = Simple8BitChar.encodeHighChar(\'c\'); ps3[
@Test public void runTest() { Simple8BitChar[] ps = new Simple8BitChar[] { Simple8BitChar.encodeHighChar(\'\\0\'), Simple8BitChar.encodeHighChar(\'\\0\'), Simple8BitChar.encodeHighChar(\'\\0\'), Simple8BitChar.encodeHighChar(\'\\0\'), Simple8BitChar.encodeHighChar(\'\\0\'), Simple8BitChar.encodeHighChar(\'\\0\'), Simple8BitChar.encodeHighChar(\'\\0\'), Simple8BitChar.encodeHighChar(\'\\0\'), Simple8BitChar.encodeHighChar(\'\\0\'), Simple8BitChar.encodeHighChar(\'
@Test public void test_encode_high_char() { Simple8BitChar br = new Simple8BitChar(\'a\', \'b\'); br.encode("ab"); assertEquals("ab", br.decode("ab")); br = new Simple8BitChar(\'a\', \'b\'); br.encode("ab"); assertEquals("ab", br.decode("ab")); br = new Simple8BitChar(\'a\', \'b\'); br.encode("ab"); assertEquals("ab", br.decode("ab")); br = new Simple8BitChar(\'a\', \'b\'); br.encode("ab"); assertEquals("ab", br.decode("ab")); br = new
@Test public void testLine() { Simple8BitChar[] lines = { Simple8BitChar.encodeHighChar(\'\\0\'), Simple8BitChar.encodeHighChar(\'\\0\'), Simple8BitChar.encodeHighChar(\'\\0\'), Simple8BitChar.encodeHighChar(\'\\0\'), Simple8BitChar.encodeHighChar(\'\\0\'), Simple8BitChar.encodeHighChar(\'\\0\'), Simple8BitChar.encodeHighChar(\'\\0\'), Simple8BitChar.encodeHighChar(\'\\0\'), Simple8BitChar.encodeHighChar(\'\\0\'), Simple8BitChar.encodeHighChar(\'\\0\'), Simple8
@Test public void testEncodeHighChar() { Simple8BitChar m1 = new Simple8BitChar(0, '1'); Simple8BitChar m2 = new Simple8BitChar(1, '2'); Simple8BitChar m3 = new Simple8BitChar(2, '3'); Simple8BitChar m4 = new Simple8BitChar(3, '4'); Simple8BitChar m5 = new Simple8BitChar(4, '5'); Simple8BitChar m6 = new Simple8BitChar(5, '6'); Simple8BitChar m7 = new Simple8BitChar(6, '7'); Simple8BitChar m8 = new Simple8BitChar
@Test public void testEncodeHighChar() { Simple8BitChar m1 = new Simple8BitChar(0, 'a'); Simple8BitChar m2 = new Simple8BitChar(1, 'b'); Simple8BitChar m3 = new Simple8BitChar(2, 'c'); Simple8BitChar m4 = new Simple8BitChar(3, 'd'); Simple8BitChar m5 = new Simple8BitChar(4, 'e'); Simple8BitChar m6 = new Simple8BitChar(5, 'f'); Simple8BitChar m7 = new Simple8BitChar(6, 'g'); Simple8BitChar m8 = new Simple8BitChar
@Test public void testEncodeHighChar() { Simple8BitChar m1 = new Simple8BitChar(0, '1'); Simple8BitChar m2 = new Simple8BitChar(1, '2'); Simple8BitChar m3 = new Simple8BitChar(2, '3'); Simple8BitChar m4 = new Simple8BitChar(3, '4'); Simple8BitChar m5 = new Simple8BitChar(4, '5'); Simple8BitChar m6 = new Simple8BitChar(5, '6'); Simple8BitChar m7 = new Simple8BitChar(6, '7'); Simple8BitChar m8 = new Simple8BitChar
@Test public void testEncodeHighChar() { Simple8BitChar p1 = new Simple8BitChar(0, '1'); Simple8BitChar p2 = new Simple8BitChar(1, '2'); Simple8BitChar p3 = new Simple8BitChar(2, '3'); Simple8BitChar p4 = new Simple8BitChar(3, '4'); Simple8BitChar p5 = new Simple8BitChar(4, '5'); Simple8BitChar p6 = new Simple8BitChar(5, '6'); Simple8BitChar p7 = new Simple8BitChar(6, '7'); Simple8BitChar p8 = new Simple8BitChar
@Test public void testEncodeHighChar() { Simple8BitChar p1 = new Simple8BitChar(0, '1'); Simple8BitChar p2 = new Simple8BitChar(1, '2'); Simple8BitChar p3 = new Simple8BitChar(2, '3'); Simple8BitChar p4 = new Simple8BitChar(3, '4'); Simple8BitChar p5 = new Simple8BitChar(4, '5'); Simple8BitChar p6 = new Simple8BitChar(5, '6'); Simple8BitChar p7 = new Simple8BitChar(6, '7'); Simple8BitChar p8 = new Simple8BitChar
@Test public void testReverseMapping() { Simple8BitChar[] reverseMapping = new Simple8BitChar[] { Simple8BitChar.encodeHighChar(\'\\0\'), Simple8BitChar.encodeHighChar(\'\\0\'), Simple8BitChar.encodeHighChar(\'\\0\'), Simple8BitChar.encodeHighChar(\'\\0\'), Simple8BitChar.encodeHighChar(\'\\0\'), Simple8BitChar.encodeHighChar(\'\\0\'), Simple8BitChar.encodeHighChar(\'\\0\'), Simple8BitChar.encodeHighChar(\'\\0\'), Simple8BitChar.encodeHighChar(\'\\0\'), Simple8BitChar.encodeHigh
@Test public void testLine() { Simple8BitChar[] lines = { Simple8BitChar.encodeHighChar(\'\\0\'), Simple8BitChar.encodeHighChar(\'\\0\'), Simple8BitChar.encodeHighChar(\'\\0\'), Simple8BitChar.encodeHighChar(\'\\0\'), Simple8BitChar.encodeHighChar(\'\\0\'), Simple8BitChar.encodeHighChar(\'\\0\'), Simple8BitChar.encodeHighChar(\'\\0\'), Simple8BitChar.encodeHighChar(\'\\0\'), Simple8BitChar.encodeHighChar(\'\\0\'), Simple8BitChar.encodeHighChar(\'\\0\'), Simple8
@Test public void testEncodeHighChar() { Simple8BitChar p1 = new Simple8BitChar(0, 'a'); Simple8BitChar p2 = new Simple8BitChar(1, 'b'); Simple8BitChar p3 = new Simple8BitChar(2, 'c'); Simple8BitChar p4 = new Simple8BitChar(3, 'd'); Simple8BitChar p5 = new Simple8BitChar(4, 'e'); Simple8BitChar p6 = new Simple8BitChar(5, 'f'); Simple8BitChar p7 = new Simple8BitChar(6, 'g'); Simple8BitChar p8 = new Simple8BitChar
@Test public void testEncodeHighChar() { Simple8BitChar p1 = new Simple8BitChar(0, '1'); Simple8BitChar p2 = new Simple8BitChar(1, '2'); Simple8BitChar p3 = new Simple8BitChar(2, '3'); Simple8BitChar p4 = new Simple8BitChar(3, '4'); Simple8BitChar p5 = new Simple8BitChar(4, '5'); Simple8BitChar p6 = new Simple8BitChar(5, '6'); Simple8BitChar p7 = new Simple8BitChar(6, '7'); Simple8BitChar p8 = new Simple8BitChar
@Test public void testCanEncode() { Simple8BitChar c = Simple8BitChar.decodeByte((byte) 0, \'\\0\'); Simple8BitZipEncoding sc = new Simple8BitZipEncoding(c.getHighChars(), c.getCharacter(\'\\0\')); assertTrue(sc.canEncode("\\0")); assertTrue(sc.canEncode("\\1")); assertTrue(sc.canEncode("\\2")); assertTrue(sc.canEncode("\\3")); assertTrue(sc.canEncode("\\4")); assertTrue(sc.canEncode("\\5")); assertTrue(sc.canEncode("\\6")); assertTrue(
@Test public void testCanEncode() { Simple8BitChar p = new Simple8BitChar(\'a\', \'a\'); assertTrue(p.canEncode("a")); assertTrue(p.canEncode("b")); assertTrue(p.canEncode("c")); assertTrue(p.canEncode("d")); assertTrue(p.canEncode("e")); assertTrue(p.canEncode("f")); assertTrue(p.canEncode("g")); assertTrue(p.canEncode("h")); assertTrue(p.canEncode("i")); assertTrue(p.canEncode("j")); assertTrue(p.canEncode("k"));
@Test public void testCanEncode() { Simple8BitChar p = new Simple8BitChar(0, 'a'); Assert.assertTrue(p.canEncode("abc")); Assert.assertTrue(p.canEncode("abcd")); Assert.assertFalse(p.canEncode("")); Assert.assertFalse(p.canEncode("\\n")); Assert.assertFalse(p.canEncode("\\r")); Assert.assertFalse(p.canEncode("\\n")); Assert.assertFalse(p.canEncode("\\r")); Assert.assertFalse(p.canEncode("\\r\\n")); Assert.assertFalse(p.canEncode("\\
@Test public void testCanEncode() { Simple8BitChar p = new Simple8BitChar(0, 'a'); assertTrue(p.canEncode("a")); assertTrue(p.canEncode("b")); assertTrue(p.canEncode("c")); assertTrue(p.canEncode("d")); assertTrue(p.canEncode("e")); assertTrue(p.canEncode("f")); assertTrue(p.canEncode("g")); assertTrue(p.canEncode("h")); assertTrue(p.canEncode("i")); assertTrue(p.canEncode("j")); assertTrue(p.canEncode("k")); assert
@Test public void testCanEncode() { Simple8BitChar p = new Simple8BitChar(\'a\', \'b\'); assertTrue(p.canEncode("a")); assertTrue(p.canEncode("b")); assertTrue(p.canEncode("c")); assertTrue(p.canEncode("d")); assertTrue(p.canEncode("e")); assertTrue(p.canEncode("f")); assertTrue(p.canEncode("g")); assertTrue(p.canEncode("h")); assertTrue(p.canEncode("i")); assertTrue(p.canEncode("j")); assertTrue(p.canEncode("k"));
@Test public void testCanEncode() { Simple8BitChar p = new Simple8BitChar(\'a\', \'b\'); assertTrue(p.canEncode("a")); assertTrue(p.canEncode("b")); assertTrue(p.canEncode("c")); assertTrue(p.canEncode("d")); assertTrue(p.canEncode("e")); assertTrue(p.canEncode("f")); assertTrue(p.canEncode("g")); assertTrue(p.canEncode("h")); assertTrue(p.canEncode("i")); assertTrue(p.canEncode("j")); assertTrue(p.canEncode("k"));
@Test(expected = NullPointerException.class) public void encodeNull() { Simple8BitChar c = new Simple8BitChar(\'a\', \'b\'); c.encode(null); }
@Test public void testEncode() throws Exception { System.out.println("encode"); Simple8BitChar c = new Simple8BitChar(\'a\', \'b\'); c.encode("abcd"); assertEquals("abcd", Simple8BitZipEncoding.decodeByte((byte) 0, \'a\')); assertEquals("abcd", Simple8BitZipEncoding.decodeByte((byte) 0, \'b\')); assertEquals("abcd", Simple8BitZipEncoding.decodeByte((byte) 0, \'c\')); assertEquals("abcd", Simple8BitZipEncoding.decodeByte((byte) 0, \'d\')); assertEquals("abcd", Simple8BitZipEncoding.decode
@Test public void testEncode() { Simple8BitChar f = new Simple8BitChar(\'a\', \'b\'); System.out.println(f.encode("a")); System.out.println(f.encode("b")); System.out.println(f.encode("c")); System.out.println(f.encode("d")); System.out.println(f.encode("e")); System.out.println(f.encode("f")); System.out.println(f.encode("g")); System.out.println(f.encode("h")); System.out.println(f.encode("i")); System.out.println
@Test public void testEncode() throws Exception { Simple8BitChar tc = new Simple8BitChar(\'a\', \'b\'); System.out.println(tc.encode("a")); System.out.println(tc.encode("b")); System.out.println(tc.encode("c")); System.out.println(tc.encode("d")); System.out.println(tc.encode("e")); System.out.println(tc.encode("f")); System.out.println(tc.encode("g")); System.out.println(tc.encode("h")); System.out.println(tc.encode("i")); System.out
@Test public void encodeTest() { Simple8BitChar c = new Simple8BitChar(\'a\', \'b\'); Simple8BitZipEncoding sc = new Simple8BitZipEncoding(c.getHighChars()); ByteBuffer bb = c.encode("abc"); assertEquals("abc", new String(bb.array())); assertEquals(\'a\', c.decodeByte((byte) 0)); assertEquals(\'b\', c.decodeByte((byte) 1)); assertEquals(\'c\', c.decodeByte((byte) 2)); assertEquals(\'d\', c.decodeByte((byte) 3)); }
@Test public void testEncode() throws Exception { Simple8BitChar c = new Simple8BitChar(\'a\', \'b\'); Simple8BitZipEncoding sc = new Simple8BitZipEncoding(c.getHighChars()); ByteBuffer bb = sc.encode("abc"); System.out.println(bb); assertEquals("abc", new String(bb.array())); }
@Test public void testEncode() throws Exception { Simple8BitChar f = new Simple8BitChar(\'a\', \'b\'); System.out.println(f.encode("a")); System.out.println(f.encode("b")); System.out.println(f.encode("c")); System.out.println(f.encode("d")); System.out.println(f.encode("e")); System.out.println(f.encode("f")); System.out.println(f.encode("g")); System.out.println(f.encode("h")); System.out.println(f.encode("i")); System.out
@Test public void testEncode() { Simple8BitChar c = new Simple8BitChar(\'a\', \'b\'); Simple8BitZipEncoding zipEncoding = new Simple8BitZipEncoding(c.getHighChars()); ByteBuffer bb = zipEncoding.encode("abc"); System.out.println(bb); assertEquals(\'a\', bb.get()); assertEquals(\'b\', bb.get()); }
@Test public void encodeTest() { Simple8BitChar c = new Simple8BitChar(\'a\', \'b\'); Simple8BitZipEncoding sc = new Simple8BitZipEncoding(c.getHighChars()); ByteBuffer bb = c.encode("abc"); assertEquals("abc", new String(bb.array())); assertEquals(\'a\', c.decodeByte((byte) 0)); assertEquals(\'b\', c.decodeByte((byte) 1)); assertEquals(\'c\', c.decodeByte((byte) 2)); assertEquals(\'d\', c.decodeByte((byte) 3)); }
@Test public void encodeTest() { Simple8BitChar c = new Simple8BitChar(\'a\', \'b\'); Simple8BitZipEncoding sc = new Simple8BitZipEncoding(c.getHighChars()); ByteBuffer bb = c.encode("abc"); assertEquals("abc", new String(bb.array())); assertEquals(\'a\', c.decodeByte((byte) 0)); assertEquals(\'b\', c.decodeByte((byte) 0)); assertEquals(\'c\', c.decodeByte((byte) 0)); }
@Test public void encodeTest() { Simple8BitChar c = new Simple8BitChar(\'a\', \'b\'); Simple8BitZipEncoding sc = new Simple8BitZipEncoding(c.getHighChars()); ByteBuffer bb = c.encode("abc"); assertEquals("abc", new String(bb.array(), "UTF-8")); assertEquals(\'a\', c.decodeByte((byte) 0)); assertEquals(\'b\', c.decodeByte((byte) 0)); assertEquals(\'c\', c.decodeByte((byte) 0)); assertEquals(\'a\', c.decodeByte((byte) 0)); assertEquals(\'b\', c.decodeByte((byte) 0)); assertEquals(\'c\',
@Test(expected = NullPointerException.class) public void testDecodeNull() throws Exception { Simple8BitChar c = new Simple8BitChar((byte) 0, \'\\0\'); Simple8BitZipEncoding cs = new Simple8BitZipEncoding(c.getHighChars()); cs.decode(null); }
@Test public void testDecode() throws Exception { Simple8BitChar p = new Simple8BitChar((byte) 0, \'a\'); Simple8BitZipEncoding ch = new Simple8BitZipEncoding(p.getHighChars()); ch.pushEncodedChar(ByteBuffer.wrap(new byte[]{\'a\', \'b\', \'c\'}), \'a\'); ch.pushEncodedChar(ByteBuffer.wrap(new byte[]{\'b\', \'c\', \'d\'}), \'b\'); ch.pushEncodedChar(ByteBuffer.wrap(new byte[]{\'d\', \'e\'}), \'e\'); ch.pushEncodedChar(ByteBuffer.wrap(new byte[]{
@Test public void testDecode() throws IOException { Simple8BitChar p = new Simple8BitChar((byte) 0, \'a\'); Simple8BitZipEncoding ch = new Simple8BitZipEncoding(new char[] { \'a\', \'b\', \'c\' }); ch.decode(new byte[] { \'a\', \'b\', \'c\' }); ch.decode(new byte[] { \'a\', \'b\', \'c\' }); ch.decode(new byte[] { \'a\', \'b\', \'c\' }); ch.decode(new byte[] { \'a\', \'b\', \'c\' }); ch.decode(new byte[] { \'a\', \'b\', \'c\' });
@Test public void testDecode() throws IOException { Simple8BitChar p = new Simple8BitChar((byte) 0, \'a\'); Simple8BitZipEncoding ch = new Simple8BitZipEncoding(new char[] { 'a', 'b', 'c' }); ch.pushEncodedChar(ByteBuffer.wrap(new byte[] { 'a', 'b', 'c' }), \'a\'); ch.pushEncodedChar(ByteBuffer.wrap(new byte[] { 'a', 'b', 'c' }), \'b\'); ch.pushEncodedChar(ByteBuffer.wrap(new byte[] { 'a', 'b', 'c' }), \'c\'); ch.push
@Test(expected = NullPointerException.class) public void decodeNull() throws IOException { Simple8BitChar p = new Simple8BitChar((byte) 0, \'\\0\'); p.decode(null); }
@Test public void getNextArEntry() throws IOException { final Path dir = Files.createTempDirectory("dir"); dir.toFile().deleteOnExit(); final Path dir2 = Files.createTempDirectory("dir2"); dir2.toFile().deleteOnExit(); final Path dir3 = Files.createTempDirectory("dir3"); dir3.toFile().deleteOnExit(); final Path dir4 = Files.createTempDirectory("dir4"); dir4.toFile().deleteOnExit(); final Path dir5 = Files.createTempDirectory("dir5"); dir5.toFile().deleteOnExit(); final Path dir6 = Files.createTempDirectory("dir6"); dir6.toFile().
@Test public void getNextArEntry() throws IOException { final Path dir = Files.createTempDirectory("dir"); dir.toFile().deleteOnExit(); final Path dir2 = Files.createTempDirectory("dir2"); dir2.toFile().deleteOnExit(); final Path dir3 = Files.createTempDirectory("dir3"); dir3.toFile().deleteOnExit(); final Path dir4 = Files.createTempDirectory("dir4"); dir4.toFile().deleteOnExit(); final Path dir5 = Files.createTempDirectory("dir5"); dir5.toFile().deleteOnExit(); final Path dir6 = Files.createTempDirectory("dir6"); dir6.toFile().
@Test public void getNextArEntry() throws IOException { final Path dir = Files.createTempDirectory("dir"); dir.toFile().deleteOnExit(); final Path dir2 = Files.createTempDirectory("dir2"); dir2.toFile().deleteOnExit(); final Path dir3 = Files.createTempDirectory("dir3"); dir3.toFile().deleteOnExit(); final Path dir4 = Files.createTempDirectory("dir4"); dir4.toFile().deleteOnExit(); final Path dir5 = Files.createTempDirectory("dir5"); dir5.toFile().deleteOnExit(); final Path dir6 = Files.createTempDirectory("dir6"); dir6.toFile().
@Test public void getNextArEntry() throws IOException { final Path dir = Paths.get(System.getProperty("user.dir"), "dir"); final Path dir2 = Paths.get(dir, "dir2"); final Path dir3 = Paths.get(dir, "dir3"); final Path dir4 = Paths.get(dir, "dir4"); final Path dir5 = Paths.get(dir, "dir5"); final Path dir6 = Paths.get(dir, "dir6"); final Path dir7 = Paths.get(dir, "dir7"); final Path dir8 = Paths.get(dir, "dir8"); final Path dir9 = Paths.get(dir,
@Test public void getNextArEntry() throws IOException { final Path dir = Paths.get(System.getProperty("user.dir"), "dir"); final Path dir2 = Paths.get(dir, "dir2"); final Path dir3 = Paths.get(dir, "dir3"); final Path dir4 = Paths.get(dir, "dir4"); final Path dir5 = Paths.get(dir, "dir5"); final Path dir6 = Paths.get(dir, "dir6"); final Path dir7 = Paths.get(dir, "dir7"); final Path dir8 = Paths.get(dir, "dir8"); final Path dir9 = Paths.get(dir,
@Test public void getNextArEntry() throws IOException { final Path dir = Paths.get(System.getProperty("user.dir"), "dir"); final Path dir2 = Paths.get(dir, "dir2"); final Path dir3 = Paths.get(dir, "dir3"); final Path dir4 = Paths.get(dir, "dir4"); final Path dir5 = Paths.get(dir, "dir5"); final Path dir6 = Paths.get(dir, "dir6"); final Path dir7 = Paths.get(dir, "dir7"); final Path dir8 = Paths.get(dir, "dir8"); final Path dir9 = Paths.get(dir,
@Test public void getNextArEntry() throws IOException { final Path dir = Files.createTempDirectory("dir"); final Path subdir = Files.createTempDirectory(dir, "subdir"); final Path subdir2 = Files.createTempDirectory(dir, "subdir2"); final Path subdir3 = Files.createTempDirectory(dir, "subdir3"); final Path subdir4 = Files.createTempDirectory(dir, "subdir4"); final Path subdir5 = Files.createTempDirectory(dir, "subdir5"); final Path subdir6 = Files.createTempDirectory(dir, "subdir6"); final Path subdir7 = Files.createTempDirectory(dir
@Test public void getNextArEntry() throws IOException { final Path dir = Paths.get(System.getProperty("user.dir"), "dir"); final Path dir2 = Paths.get(dir, "dir2"); final Path dir3 = Paths.get(dir, "dir3"); final Path dir4 = Paths.get(dir, "dir4"); final Path dir5 = Paths.get(dir, "dir5"); final Path dir6 = Paths.get(dir, "dir6"); final Path dir7 = Paths.get(dir, "dir7"); final Path dir8 = Paths.get(dir, "dir8"); final Path dir9 = Paths.get(dir,
@Test public void getNextArEntry() throws IOException { final Path dir = Files.createTempDirectory("dir"); final Path file = dir.resolve("test.txt"); Files.write(file, "test".getBytes(Charsets.UTF_8)); final Path dir2 = dir.resolve("test2.txt"); Files.write(file2, "test".getBytes(Charsets.UTF_8)); final Path dir3 = dir.resolve("test3.txt"); Files.write(dir3, "test".getBytes(Charsets.UTF_8)); final Path dir4 = dir.resolve("test4.txt"); Files.write(dir4, "test".getBytes(Charsets.
@Test public void getNextArEntry() throws IOException { final Path dir = Files.createTempDirectory("dir"); try { dir.toFile().deleteOnExit(); final Path dir2 = Files.createTempDirectory("dir2"); dir2.toFile().deleteOnExit(); final Path dir3 = Files.createTempDirectory("dir3"); dir3.toFile().deleteOnExit(); final Path dir4 = Files.createTempDirectory("dir4"); dir4.toFile().deleteOnExit(); final Path dir5 = Files.createTempDirectory("dir5"); dir5.toFile().deleteOnExit(); final Path dir6 = Files.createTempDirectory("dir6"); dir6.to
@Test public void getNextArEntry() throws IOException { final Path dir = Files.createTempDirectory("dir"); final Path file = dir.resolve("file"); Files.write(file, "test".getBytes()); final Path dir2 = Files.createTempDirectory("dir2"); Files.write(dir2, "test".getBytes()); final Path dir3 = Files.createTempDirectory("dir3"); Files.write(dir3, "test".getBytes()); final Path dir4 = Files.createTempDirectory("dir4"); Files.write(dir4, "test".getBytes()); final Path dir5 = Files.createTempDirectory("dir5"); Files.write(dir5, "
@Test public void getNextArEntry() throws IOException { final Path dir = Paths.get(System.getProperty("user.dir"), "dir"); final Path dir2 = Paths.get(dir, "dir2"); final Path dir3 = Paths.get(dir, "dir3"); final Path dir4 = Paths.get(dir, "dir4"); final Path dir5 = Paths.get(dir, "dir5"); final Path dir6 = Paths.get(dir, "dir6"); final Path dir7 = Paths.get(dir, "dir7"); final Path dir8 = Paths.get(dir, "dir8"); final Path dir9 = Paths.get(dir,
@Test public void getNextArEntry() throws IOException { final Path dir = Paths.get(System.getProperty("user.dir"), "dir"); final Path dir2 = Paths.get(dir, "dir2"); final Path dir3 = Paths.get(dir, "dir3"); final Path dir4 = Paths.get(dir, "dir4"); final Path dir5 = Paths.get(dir, "dir5"); final Path dir6 = Paths.get(dir, "dir6"); final Path dir7 = Paths.get(dir, "dir7"); final Path dir8 = Paths.get(dir, "dir8"); final Path dir9 = Paths.get(dir,
@Test public void getNextArEntry() throws IOException { final Path dir = Paths.get(System.getProperty("user.dir"), "dir"); final Path dir2 = Paths.get(dir, "dir2"); final Path dir3 = Paths.get(dir, "dir3"); final Path dir4 = Paths.get(dir, "dir4"); final Path dir5 = Paths.get(dir, "dir5"); final Path dir6 = Paths.get(dir, "dir6"); final Path dir7 = Paths.get(dir, "dir7"); final Path dir8 = Paths.get(dir, "dir8"); final Path dir9 = Paths.get(dir,
@Test public void getNextArEntry() throws IOException { final Path dir = Files.createTempDirectory("dir"); final Path file = dir.resolve("file"); Files.write(file.toFile(), "test".getBytes()); final Path dir2 = Files.createTempDirectory("dir2"); Files.write(dir2.toFile(), "test".getBytes()); final Path dir3 = Files.createTempDirectory("dir3"); Files.write(dir3.toFile(), "test".getBytes()); final Path dir4 = Files.createTempDirectory("dir4"); Files.write(dir4.toFile(), "test".getBytes()); final Path dir5 = Files.createTempDirectory
@Test public void getNextArEntry() throws IOException { final Path dir = Paths.get(System.getProperty("user.dir"), "dir"); final Path file = dir.resolve("test.txt"); Files.write(file, "test".getBytes()); final Path dir2 = dir.resolve("dir2"); Files.write(file2, "test".getBytes()); final Path dir3 = dir.resolve("dir3"); Files.write(dir3, "test".getBytes()); final Path dir4 = dir.resolve("dir4"); Files.write(dir4, "test".getBytes()); final Path dir5 = dir.resolve("dir5"); Files.write(dir
@Test public void getNextArEntry() throws IOException { final Path dir = Files.createTempDirectory("test-get-next-ar-entry"); dir.toFile().deleteOnExit(); final Path dir2 = Files.createTempDirectory("test-get-next-ar-entry"); dir2.toFile().deleteOnExit(); final Path dir3 = Files.createTempDirectory("test-get-next-ar-entry"); dir3.toFile().deleteOnExit(); final Path dir4 = Files.createTempDirectory("test-get-next-ar-entry"); dir4.toFile().deleteOnExit(); final Path dir5 = Files.createTempDirectory("test-get-
@Test public void getNextArEntry() throws IOException { final Path dir = Files.createTempDirectory("test-getNextArEntry"); dir.toFile().deleteOnExit(); final Path dir2 = Files.createTempDirectory("test-getNextArEntry"); dir2.toFile().deleteOnExit(); final Path dir3 = Files.createTempDirectory("test-getNextArEntry"); dir3.toFile().deleteOnExit(); final Path dir4 = Files.createTempDirectory("test-getNextArEntry"); dir4.toFile().deleteOnExit(); final Path dir5 = Files.createTempDirectory("test-getNextArEntry"); dir5.toFile().deleteOnExit
@Test public void getNextArEntry() throws IOException { final Path dir = Files.createTempDirectory("dir"); dir.toFile().deleteOnExit(); final Path dir2 = Files.createTempDirectory("dir2"); dir2.toFile().deleteOnExit(); final Path dir3 = Files.createTempDirectory("dir3"); dir3.toFile().deleteOnExit(); final Path dir4 = Files.createTempDirectory("dir4"); dir4.toFile().deleteOnExit(); final Path dir5 = Files.createTempDirectory("dir5"); dir5.toFile().deleteOnExit(); final Path dir6 = Files.createTempDirectory("dir6"); dir6.toFile().
@Test public void getNextArEntry() throws IOException { final Path dir = Files.createTempDirectory("test-getNextArEntry"); dir.toFile().deleteOnExit(); final Path dir2 = Files.createTempDirectory("test-getNextArEntry"); dir2.toFile().deleteOnExit(); final Path dir3 = Files.createTempDirectory("test-getNextArEntry"); dir3.toFile().deleteOnExit(); final Path dir4 = Files.createTempDirectory("test-getNextArEntry"); dir4.toFile().deleteOnExit(); final Path dir5 = Files.createTempDirectory("test-getNextArEntry"); dir5.toFile().deleteOnExit
@Test public void getNextArEntry() throws IOException { final Path dir = Files.createTempDirectory("test-getNextArEntry"); dir.toFile().deleteOnExit(); final Path dir2 = Files.createTempDirectory("test-getNextArEntry"); dir2.toFile().deleteOnExit(); final Path dir3 = Files.createTempDirectory("test-getNextArEntry"); dir3.toFile().deleteOnExit(); final Path dir4 = Files.createTempDirectory("test-getNextArEntry"); dir4.toFile().deleteOnExit(); final Path dir5 = Files.createTempDirectory("test-getNextArEntry"); dir5.toFile().deleteOnExit
@Test public void getNextArEntry() throws IOException { final Path dir = Files.createTempDirectory("test-getNextArEntry"); dir.toFile().deleteOnExit(); final Path dir2 = Files.createTempDirectory("test-getNextArEntry"); dir2.toFile().deleteOnExit(); final Path dir3 = Files.createTempDirectory("test-getNextArEntry"); dir3.toFile().deleteOnExit(); final Path dir4 = Files.createTempDirectory("test-getNextArEntry"); dir4.toFile().deleteOnExit(); final Path dir5 = Files.createTempDirectory("test-getNextArEntry"); dir5.toFile().deleteOnExit
@Test public void getNextArEntry() throws IOException { final Path dir = Paths.get(System.getProperty("user.dir"), "dir"); final Path dir2 = Paths.get(dir, "dir2"); final Path dir3 = Paths.get(dir, "dir3"); final Path dir4 = Paths.get(dir, "dir4"); final Path dir5 = Paths.get(dir, "dir5"); final Path dir6 = Paths.get(dir, "dir6"); final Path dir7 = Paths.get(dir, "dir7"); final Path dir8 = Paths.get(dir, "dir8"); final Path dir9 = Paths.get(dir,
@Test public void getNextArEntry() throws IOException { final Path dir = Paths.get(System.getProperty("user.dir"), "dir"); final Path dir2 = Paths.get(dir, "dir2"); final Path dir3 = Paths.get(dir, "dir3"); final Path dir4 = Paths.get(dir, "dir4"); final Path dir5 = Paths.get(dir, "dir5"); final Path dir6 = Paths.get(dir, "dir6"); final Path dir7 = Paths.get(dir, "dir7"); final Path dir8 = Paths.get(dir, "dir8"); final Path dir9 = Paths.get(dir,
@Test public void getNextArEntry() throws IOException { final Path dir = Paths.get(System.getProperty("user.dir"), "dir"); final Path dir2 = Paths.get(dir, "dir2"); final Path dir3 = Paths.get(dir, "dir3"); final Path dir4 = Paths.get(dir, "dir4"); final Path dir5 = Paths.get(dir, "dir5"); final Path dir6 = Paths.get(dir, "dir6"); final Path dir7 = Paths.get(dir, "dir7"); final Path dir8 = Paths.get(dir, "dir8"); final Path dir9 = Paths.get(dir,
@Test public void getNextArEntry() throws IOException { final Path dir = Paths.get(System.getProperty("user.dir"), "dir"); final Path dir2 = Paths.get(dir, "dir2"); final Path dir3 = Paths.get(dir, "dir3"); final Path dir4 = Paths.get(dir, "dir4"); final Path dir5 = Paths.get(dir, "dir5"); final Path dir6 = Paths.get(dir, "dir6"); final Path dir7 = Paths.get(dir, "dir7"); final Path dir8 = Paths.get(dir, "dir8"); final Path dir9 = Paths.get(dir,
@Test public void getNextArEntry() throws IOException { final Path dir = Files.createTempDirectory("dir"); final Path subdir = Files.createTempDirectory(dir, "subdir"); final Path subdir2 = Files.createTempDirectory(dir, "subdir2"); final Path subdir3 = Files.createTempDirectory(dir, "subdir3"); final Path subdir4 = Files.createTempDirectory(dir, "subdir4"); final Path subdir5 = Files.createTempDirectory(dir, "subdir5"); final Path subdir6 = Files.createTempDirectory(dir, "subdir6"); final Path subdir7 = Files.createTempDirectory(dir
@Test public void getNextArEntry() throws IOException { final Path dir = Paths.get(System.getProperty("user.dir"), "dir"); final Path dir2 = Paths.get(dir, "dir2"); final Path dir3 = Paths.get(dir, "dir3"); final Path dir4 = Paths.get(dir, "dir4"); final Path dir5 = Paths.get(dir, "dir5"); final Path dir6 = Paths.get(dir, "dir6"); final Path dir7 = Paths.get(dir, "dir7"); final Path dir8 = Paths.get(dir, "dir8"); final Path dir9 = Paths.get(dir,
@Test public void getNextArEntry() throws IOException { final Path dir = Paths.get(System.getProperty("user.dir"), "dir"); final String name = dir.toString().toLowerCase(); final String length = dir.toString().toLowerCase().toLowerCase().toLowerCase().toLowerCase().toLowerCase().toLowerCase().toLowerCase().toLowerCase().toLowerCase().toLowerCase().toLowerCase().toLowerCase().toLowerCase().toLowerCase().toLowerCase().toLowerCase().toLowerCase().toLowerCase().toLowerCase().toLowerCase(); final Path dir2 = dir.resolve("dir2"); final Path dir3 = dir2.resolve("dir3"); final Path dir4 = dir.resolve("dir4");
@Test public void testGetNextEntry() { try { final File f = new File("src/test/resources/archive.zip"); final ArchiveEntry e1 = f.createNewFile(); final ArchiveEntry e2 = f.createNewFile(); final ArchiveEntry e3 = f.createNewFile(); final ArchiveEntry e4 = f.createNewFile(); assertEquals(e1, e1.getNextArEntry()); assertEquals(e2, e2.getNextArEntry()); assertEquals(e3, e3.getNextArEntry()); assertEquals(e4, e4.getNextArEntry()); f.delete(); } catch (IOException e) { e.printStackTrace
@Test public void testGetNextArEntry() throws Exception { ArArchiveEntry e1 = a.getNextArEntry(); assertTrue(e1.read() == -1); e1 = a.getNextArEntry(); assertTrue(e1.read() == -1); e1 = a.getNextArEntry(); assertTrue(e1.read() == -1); e1 = a.getNextArEntry(); assertTrue(e1.read() == -1); e1 = a.getNextArEntry(); assertTrue(e1.read() == -1); e1 = a.getNextArEntry(); assertTrue(e1.read() == -1);
@Test public void testRead() throws Exception { final File f1 = File.createTempFile("test", ".txt"); final File f2 = File.createTempFile("test", ".txt"); final File f3 = File.createTempFile("test", ".txt"); final File f4 = File.createTempFile("test", ".txt"); final File f5 = File.createTempFile("test", ".txt"); final File f6 = File.createTempFile("test", ".txt"); final File f7 = File.createTempFile("test", ".txt"); f1.deleteOnExit(); f2.deleteOnExit(); f3.deleteOnExit(); f4.deleteOnExit(); f5.deleteOn
@Test public void testRead() throws Exception { final File f1 = File.createTempFile("test", ".txt"); final File f2 = File.createTempFile("test", ".txt"); final File f3 = File.createTempFile("test", ".txt"); final File f4 = File.createTempFile("test", ".txt"); final File f5 = File.createTempFile("test", ".txt"); final File f6 = File.createTempFile("test", ".txt"); final File f7 = File.createTempFile("test", ".txt"); f1.deleteOnExit(); f2.deleteOnExit(); f3.deleteOnExit(); f4.deleteOnExit(); f5.deleteOn
@Test public void testRead() throws Exception { final File f1 = File.createTempFile("test", ".txt"); final File f2 = File.createTempFile("test", ".txt"); final File f3 = File.createTempFile("test", ".txt"); final File f4 = File.createTempFile("test", ".txt"); final File f5 = File.createTempFile("test", ".txt"); final File f6 = File.createTempFile("test", ".txt"); final File f7 = File.createTempFile("test", ".txt"); f1.deleteOnExit(); f2.deleteOnExit(); f3.deleteOnExit(); f4.deleteOnExit(); f5.deleteOn
@Test public void testRead() throws Exception { final File f = new File("src/test/resources/file1.txt"); final File f2 = new File("src/test/resources/file2.txt"); final File f3 = new File("src/test/resources/file3.txt"); final File f4 = new File("src/test/resources/file4.txt"); final File f5 = new File("src/test/resources/file5.txt"); final File f6 = new File("src/test/resources/file6.txt"); final File f7 = new File("src/test/resources/file7.txt"); final File f8 = new
@Test public void testRead() throws Exception { final File f = new File("src/test/resources/file1.txt"); final File f2 = new File("src/test/resources/file2.txt"); final File f3 = new File("src/test/resources/file3.txt"); final File f4 = new File("src/test/resources/file4.txt"); final File f5 = new File("src/test/resources/file5.txt"); final File f6 = new File("src/test/resources/file6.txt"); final File f7 = new File("src/test/resources/file7.txt"); final File f8 = new
@Test public void testRead() throws Exception { final File f = File.createTempFile("test", ".txt"); final File f1 = File.createTempFile("test", ".txt"); final File f2 = File.createTempFile("test", ".txt"); final File f3 = File.createTempFile("test", ".txt"); f1.deleteOnExit(); f2.deleteOnExit(); f3.deleteOnExit(); final File f4 = File.createTempFile("test", ".txt"); final File f5 = File.createTempFile("test", ".txt"); f5.deleteOnExit(); final File f6 = File.createTempFile("test", ".txt"); f6.deleteOnExit
@Test public void testRead() throws Exception { final File f = File.createTempFile("test", ".txt"); f.deleteOnExit(); final File f2 = File.createTempFile("test", ".txt"); f2.deleteOnExit(); final File f3 = File.createTempFile("test", ".txt"); f3.deleteOnExit(); final File f4 = File.createTempFile("test", ".txt"); f4.deleteOnExit(); final File f5 = File.createTempFile("test", ".txt"); f5.deleteOnExit(); final File f6 = File.createTempFile("test", ".txt"); f6.deleteOnExit(); final File f7 = File.create
@Test public void testCreateCompressorInputStream() throws IOException, CompressorException { CompressorInputStream in = new CompressorHelper().createCompressorInputStream("test", new ByteArrayInputStream("test".getBytes())); Assert.assertTrue(in instanceof GzipCompressorInputStream); in = new CompressorHelper().createCompressorInputStream("test", new ByteArrayInputStream("test".getBytes())); Assert.assertTrue(in instanceof BZip2CompressorInputStream); in = new CompressorHelper().createCompressorInputStream("test", new ByteArrayInputStream("test".getBytes())); Assert.assertTrue(in instanceof BZip2CompressorInputStream); in = new CompressorHelper().createCompressorInputStream("test", new ByteArrayInputStream("test".
@Test public void testCreateCompressorInputStream() throws IOException, CompressorException { CompressorInputStream in = null; try { in = new GZIPCompressorInputStream() { private static final long serialVersionUID = 1L; @Override public CompressorInputStream createCompressorInputStream(final String name, final InputStream in) throws CompressorException { return this.testCompressorInputStream; } }; Assert.assertNotNull(in); in.close(); CompressorInputStream out = null; try { out = new GZIPCompressorInputStream() { @Override public CompressorInputStream createCompressorInputStream(final String name, final InputStream in) throws CompressorException { return this.testCompressorInputStream; } }; Assert.assertNotNull(
@Test public void testCreateCompressorInputStream() throws IOException, CompressorException { String s = "test"; InputStream in = new ByteArrayInputStream(s.getBytes()); CompressorInputStream ls = new CompressorHelper().createCompressorInputStream(s, in); Assert.assertNotNull(ls); Assert.assertTrue(ls instanceof GzipCompressorInputStream); ls = new CompressorHelper().createCompressorInputStream("test", in); Assert.assertNotNull(ls); Assert.assertTrue(ls instanceof BZip2CompressorInputStream); ls = new CompressorHelper().createCompressorInputStream("test", in); Assert.assertNotNull(ls); Assert.assertTrue(ls instanceof BZip2CompressorInputStream); ls =
@Test public void testCreateCompressorInputStream() throws IOException, CompressorException { CompressorInputStream is = new CompressorHelper().createCompressorInputStream("test", new ByteArrayInputStream("test".getBytes())); Assert.assertTrue(is instanceof GzipCompressorInputStream); is = new CompressorHelper().createCompressorInputStream("test", new ByteArrayInputStream("test".getBytes())); Assert.assertTrue(is instanceof BZip2CompressorInputStream); is = new CompressorHelper().createCompressorInputStream("test", new ByteArrayInputStream("test".getBytes())); Assert.assertTrue(is instanceof BZip2CompressorInputStream); is = new CompressorHelper().createCompressorInputStream("test", new ByteArrayInputStream("test".
@Test public void testCreateCompressorInputStream() throws IOException, CompressorException { CompressorInputStream in = mock(CompressorInputStream.class); InputStream in2 = mock(InputStream.class); when(in.read(any(byte[].class), anyInt(), anyInt())).thenReturn(-1); when(in2.read(any(byte[].class), anyInt(), anyInt())).thenReturn(-1); when(in.read(any(byte[].class), anyInt(), anyInt())).thenReturn(-1); when(in2.read(any(byte[].class), anyInt(), anyInt())).thenReturn(-1); Assert.assertNotNull(new
@Test public void testCreateCompressorOutputStream() throws Exception { CompressorOutputStream zos = null; try { zos = new CompressorOutputStream() { @Override public CompressorOutputStream createCompressorOutputStream(String name, OutputStream out) throws CompressorException { return this.test.createCompressorOutputStream(name, out); } }; Assert.assertNotNull(zos); zos.close(); zos = new CompressorOutputStream() { @Override public CompressorOutputStream createCompressorOutputStream(String name, OutputStream out) throws CompressorException { return this.test.createCompressorOutputStream(name, out); } }; Assert.assertNotNull(zos); zos.close(); zos.
@Test public void testCreateCompressorOutputStream() throws Exception { CompressorOutputStream out = null; try { out = new CompressorOutputStream() { public CompressorOutputStream createCompressorOutputStream(String name, OutputStream out) throws CompressorException { return this.test.createCompressorOutputStream(name, out); } }; Assert.fail(); } catch (CompressorException e) { Assert.assertEquals("Compressor: " + name + " not found.", e.getMessage()); } try { out = new CompressorOutputStream() { public CompressorOutputStream createCompressorOutputStream(String name, OutputStream out) throws CompressorException { Assert.assertEquals("Compressor: " + name + " not found."
@Test public void testCreateCompressorOutputStream() throws IOException, CompressorException { CompressorOutputStream out = null; try { out = new CompressorOutputStream() { @Override public void write(byte[] bytes) throws IOException { bytes[0] = 0; } @Override public void write(byte[] bytes) throws IOException { bytes[1] = 0; } @Override public void write(byte[] bytes) throws IOException { bytes[2] = 0; } @Override public void write(byte[] bytes) throws IOException { bytes[3] = 0; } @Override public void write(byte[] bytes) throws IOException { bytes[4] = 0; } @Override public void write(byte[] bytes
@Test public void testCreateCompressorOutputStream() throws Exception { CompressorOutputStream outStream = new CompressorHelper().createCompressorOutputStream("test", new ByteArrayOutputStream()); Assert.assertTrue(outStream instanceof GzipCompressorOutputStream); outStream = new CompressorHelper().createCompressorOutputStream("test", new ByteArrayOutputStream()); Assert.assertTrue(outStream instanceof BZip2CompressorOutputStream); outStream = new CompressorHelper().createCompressorOutputStream("test", new ByteArrayOutputStream()); Assert.assertTrue(outStream instanceof BZip2CompressorOutputStream); outStream = new CompressorHelper().createCompressorOutputStream("test", new ByteArrayOutputStream()); Assert.assertTrue(outStream instanceof GzipCompressorOutputStream); outStream = new CompressorHelper().create
@Test public void testCreateCompressorOutputStream() throws Exception { CompressorOutputStream out = null; try { out = new GzipCompressorOutputStream(new ByteArrayOutputStream()); } catch (CompressorException e) { e.printStackTrace(); Assert.fail(); } try { out.write(\'a\'); Assert.fail(); } catch (CompressorException e) { Assert.assertEquals("Compressor: a not found.", e.getMessage()); } out = new GzipCompressorOutputStream(new ByteArrayOutputStream()); try { out.write(\'b\'); Assert.fail(); } catch (CompressorException e) { Assert.assertEquals("Compressor: bzip2 not found.", e.getMessage()); } out = new
@Test public void testUnicodePathExtraField() { UnicodePathExtraField unicodePathExtraField = new UnicodePathExtraField(); assertEquals(0x7075, unicodePathExtraField.getHeaderId().getByteValue()); assertEquals(0x7075, unicodePathExtraField.getHeaderId().getShortValue()); assertEquals(0x7075, unicodePathExtraField.getUPathId().getShortValue()); assertEquals(0x7075, unicodePathExtraField.getHeaderId().getShortValue()); assertEquals(0x7075, unicodePathExtraField.getUPathId().getShortValue()); assertEquals(0x7075, unicodePathExtraField.getHeader
@Test public void testUnicodePathExtraField() { String name = "test"; byte[] bytes = new byte[0]; UnicodePathExtraField instance = new UnicodePathExtraField(name, bytes); assertEquals(name, instance.getName()); assertEquals(0x7075, instance.getHeaderId().getByteValue()); assertEquals(0x7075, instance.getHeaderId().getShortValue()); assertEquals(0x7075, instance.getUPathId().getByteValue()); assertEquals(0x7075, instance.getUPathId().getShortValue()); assertEquals(0x7075, instance.getUPathId().getShortValue()); assertEquals(0
@Test public void testUnicodePathExtraField() { String name = "test"; byte[] bytes = new byte[4]; UnicodePathExtraField instance = new UnicodePathExtraField(name, bytes); assertEquals(name, instance.getName()); assertEquals(0x7075, instance.getHeaderId().getByteValue()); assertEquals(0x7075, instance.getHeaderId().getShortValue()); assertEquals(0x7075, instance.getUPathId().getByteValue()); assertEquals(0x7075, instance.getUPathId().getShortValue()); assertEquals(0x7075, instance.getUPathId().getShortValue()); assertEquals(0
@Test public void testGetHeaderId() throws Exception { UnicodePathExtraField f = new UnicodePathExtraField(); assertEquals(new ZipShort(0x7075), f.getHeaderId()); }
@Test public void testGetHeaderId() throws Exception { UnicodePathExtraField instance = new UnicodePathExtraField(); ZipShort expResult = new ZipShort(0x7075); ZipShort result = instance.getHeaderId(); assertEquals(expResult, result); }
