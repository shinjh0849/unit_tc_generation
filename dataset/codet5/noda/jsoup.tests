@Test [EOL] public void handlesBaseTags() { [EOL]     String h = "<a href=1>#</a><base href='/2/'><a href='3'>#</a><base href='http://bar'><a href=4>#</a>"; [EOL]     Document doc = Jsoup.parse(h, "http://foo/"); [EOL]     assertEquals("http://bar", doc.baseUri()); [EOL]     Elements anchors = doc.getElementsByTag("a"); [EOL]     assertEquals(3, anchors.size()); [EOL]     assertEquals("http://foo/", anchors.get(0).baseUri()); [EOL]     assertEquals("http://foo/2/", anchors.get(1).baseUri()); [EOL]     assertEquals("http://bar", anchors.get(2).baseUri()); [EOL]     assertEquals("http://foo/1", anchors.get(0).absUrl("href")); [EOL]     assertEquals("http://foo/2/3", anchors.get(1).absUrl("href")); [EOL]     assertEquals("http://bar/4", anchors.get(2).absUrl("href")); [EOL] }
@Test [EOL] public void handlesBaseTags() { [EOL]     String h = "<a href=1>#</a><base href='/2/'><a href='3'>#</a><base href='http://bar'><a href=4>#</a>"; [EOL]     Document doc = Jsoup.parse(h, "http://foo/"); [EOL]     assertEquals("http://bar", doc.baseUri()); [EOL]     Elements anchors = doc.getElementsByTag("a"); [EOL]     assertEquals(3, anchors.size()); [EOL]     assertEquals("http://foo/", anchors.get(0).baseUri()); [EOL]     assertEquals("http://foo/2/", anchors.get(1).baseUri()); [EOL]     assertEquals("http://bar", anchors.get(2).baseUri()); [EOL]     assertEquals("http://foo/1", anchors.get(0).absUrl("href")); [EOL]     assertEquals("http://foo/2/3", anchors.get(1).absUrl("href")); [EOL]     assertEquals("http://bar/4", anchors.get(2).absUrl("href")); [EOL] }
@Test [EOL] public void handlesBaseTags() { [EOL]     String h = "<a href=1>#</a><base href='/2/'><a href='3'>#</a><base href='http://bar'><a href=4>#</a>"; [EOL]     Document doc = Jsoup.parse(h, "http://foo/"); [EOL]     assertEquals("http://bar", doc.baseUri()); [EOL]     Elements anchors = doc.getElementsByTag("a"); [EOL]     assertEquals(3, anchors.size()); [EOL]     assertEquals("http://foo/", anchors.get(0).baseUri()); [EOL]     assertEquals("http://foo/2/", anchors.get(1).baseUri()); [EOL]     assertEquals("http://bar", anchors.get(2).baseUri()); [EOL]     assertEquals("http://foo/1", anchors.get(0).absUrl("href")); [EOL]     assertEquals("http://foo/2/3", anchors.get(1).absUrl("href")); [EOL]     assertEquals("http://bar/4", anchors.get(2).absUrl("href")); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse("<p>One</p><p>Two</p><p>Three</p>"); [EOL]     Elements ps = doc.select("p"); [EOL]     ps.prepend("<b>Bold</b>").append("<i>Ital</i>"); [EOL]     assertEquals("<p><b>Bold</b>Two<i>Ital</i></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html("<span>Gone</span>"); [EOL]     assertEquals("<p><span>Gone</span></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void handlesBaseTags() { [EOL]     String h = "<a href=1>#</a><base href='/2/'><a href='3'>#</a><base href='http://bar'><a href=4>#</a>"; [EOL]     Document doc = Jsoup.parse(h, "http://foo/"); [EOL]     assertEquals("http://bar", doc.baseUri()); [EOL]     Elements anchors = doc.getElementsByTag("a"); [EOL]     assertEquals(3, anchors.size()); [EOL]     assertEquals("http://foo/", anchors.get(0).baseUri()); [EOL]     assertEquals("http://foo/2/", anchors.get(1).baseUri()); [EOL]     assertEquals("http://bar", anchors.get(2).baseUri()); [EOL]     assertEquals("http://foo/1", anchors.get(0).absUrl("href")); [EOL]     assertEquals("http://foo/2/3", anchors.get(1).absUrl("href")); [EOL]     assertEquals("http://bar/4", anchors.get(2).absUrl("href")); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse("<p>One</p><p>Two</p><p>Three</p>"); [EOL]     Elements ps = doc.select("p"); [EOL]     ps.prepend("<b>Bold</b>").append("<i>Ital</i>"); [EOL]     assertEquals("<p><b>Bold</b>Two<i>Ital</i></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html("<span>Gone</span>"); [EOL]     assertEquals("<p><span>Gone</span></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void handlesBaseTags() { [EOL]     String h = "<a href=1>#</a><base href='/2/'><a href='3'>#</a><base href='http://bar'><a href=4>#</a>"; [EOL]     Document doc = Jsoup.parse(h, "http://foo/"); [EOL]     assertEquals("http://bar", doc.baseUri()); [EOL]     Elements anchors = doc.getElementsByTag("a"); [EOL]     assertEquals(3, anchors.size()); [EOL]     assertEquals("http://foo/", anchors.get(0).baseUri()); [EOL]     assertEquals("http://foo/2/", anchors.get(1).baseUri()); [EOL]     assertEquals("http://bar", anchors.get(2).baseUri()); [EOL]     assertEquals("http://foo/1", anchors.get(0).absUrl("href")); [EOL]     assertEquals("http://foo/2/3", anchors.get(1).absUrl("href")); [EOL]     assertEquals("http://bar/4", anchors.get(2).absUrl("href")); [EOL] }
@Test [EOL] public void handlesBaseTags() { [EOL]     String h = "<a href=1>#</a><base href='/2/'><a href='3'>#</a><base href='http://bar'><a href=4>#</a>"; [EOL]     Document doc = Jsoup.parse(h, "http://foo/"); [EOL]     assertEquals("http://bar", doc.baseUri()); [EOL]     Elements anchors = doc.getElementsByTag("a"); [EOL]     assertEquals(3, anchors.size()); [EOL]     assertEquals("http://foo/", anchors.get(0).baseUri()); [EOL]     assertEquals("http://foo/2/", anchors.get(1).baseUri()); [EOL]     assertEquals("http://bar", anchors.get(2).baseUri()); [EOL]     assertEquals("http://foo/1", anchors.get(0).absUrl("href")); [EOL]     assertEquals("http://foo/2/3", anchors.get(1).absUrl("href")); [EOL]     assertEquals("http://bar/4", anchors.get(2).absUrl("href")); [EOL] }
@Test [EOL] public void handlesAbsPrefix() { [EOL]     Document doc = Jsoup.parse("<a href=/foo>Hello</a>", "http://jsoup.org/"); [EOL]     Element a = doc.select("a").first(); [EOL]     assertEquals("/foo", a.attr("href")); [EOL]     assertEquals("http://jsoup.org/foo", a.attr("abs:href")); [EOL]     assertFalse(a.hasAttr("abs:href")); [EOL] }
@Test [EOL] public void handlesAbsPrefix() { [EOL]     Document doc = Jsoup.parse("<a href=/foo>Hello</a>", "http://jsoup.org/"); [EOL]     Element a = doc.select("a").first(); [EOL]     assertEquals("/foo", a.attr("href")); [EOL]     assertEquals("http://jsoup.org/foo", a.attr("abs:href")); [EOL]     assertFalse(a.hasAttr("abs:href")); [EOL] }
@Test [EOL] public void handlesAbsPrefix() { [EOL]     Document doc = Jsoup.parse("<a href=/foo>Hello</a>", "http://jsoup.org/"); [EOL]     Element a = doc.select("a").first(); [EOL]     assertEquals("/foo", a.attr("href")); [EOL]     assertEquals("http://jsoup.org/foo", a.attr("abs:href")); [EOL]     assertFalse(a.hasAttr("abs:href")); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse("<p>One</p><p>Two</p><p>Three</p>"); [EOL]     Elements ps = doc.select("p"); [EOL]     ps.prepend("<b>Bold</b>").append("<i>Ital</i>"); [EOL]     assertEquals("<p><b>Bold</b>Two<i>Ital</i></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html("<span>Gone</span>"); [EOL]     assertEquals("<p><span>Gone</span></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse("<p>One</p><p>Two</p><p>Three</p>"); [EOL]     Elements ps = doc.select("p"); [EOL]     ps.prepend("<b>Bold</b>").append("<i>Ital</i>"); [EOL]     assertEquals("<p><b>Bold</b>Two<i>Ital</i></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html("<span>Gone</span>"); [EOL]     assertEquals("<p><span>Gone</span></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse("<p>One</p><p>Two</p><p>Three</p>"); [EOL]     Elements ps = doc.select("p"); [EOL]     ps.prepend("<b>Bold</b>").append("<i>Ital</i>"); [EOL]     assertEquals("<p><b>Bold</b>Two<i>Ital</i></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html("<span>Gone</span>"); [EOL]     assertEquals("<p><span>Gone</span></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse("<p>One</p><p>Two</p><p>Three</p>"); [EOL]     Elements ps = doc.select("p"); [EOL]     ps.prepend("<b>Bold</b>").append("<i>Ital</i>"); [EOL]     assertEquals("<p><b>Bold</b>Two<i>Ital</i></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html("<span>Gone</span>"); [EOL]     assertEquals("<p><span>Gone</span></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse("<p>One</p><p>Two</p><p>Three</p>"); [EOL]     Elements ps = doc.select("p"); [EOL]     ps.prepend("<b>Bold</b>").append("<i>Ital</i>"); [EOL]     assertEquals("<p><b>Bold</b>Two<i>Ital</i></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html("<span>Gone</span>"); [EOL]     assertEquals("<p><span>Gone</span></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse("<p>One</p><p>Two</p><p>Three</p>"); [EOL]     Elements ps = doc.select("p"); [EOL]     ps.prepend("<b>Bold</b>").append("<i>Ital</i>"); [EOL]     assertEquals("<p><b>Bold</b>Two<i>Ital</i></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html("<span>Gone</span>"); [EOL]     assertEquals("<p><span>Gone</span></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse("<p>One</p><p>Two</p><p>Three</p>"); [EOL]     Elements ps = doc.select("p"); [EOL]     ps.prepend("<b>Bold</b>").append("<i>Ital</i>"); [EOL]     assertEquals("<p><b>Bold</b>Two<i>Ital</i></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html("<span>Gone</span>"); [EOL]     assertEquals("<p><span>Gone</span></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void testReplace() { [EOL]     Document doc = Jsoup.parse("<p>One <span>two</span> three</p>"); [EOL]     Element p = doc.select("p").first(); [EOL]     Element insert = doc.createElement("em").text("foo"); [EOL]     p.childNode(1).replaceWith(insert); [EOL]     assertEquals("One <em>foo</em> three", p.html()); [EOL] }
@Test [EOL] public void testReplace() { [EOL]     Document doc = Jsoup.parse("<p>One <span>two</span> three</p>"); [EOL]     Element p = doc.select("p").first(); [EOL]     Element insert = doc.createElement("em").text("foo"); [EOL]     p.childNode(1).replaceWith(insert); [EOL]     assertEquals("One <em>foo</em> three", p.html()); [EOL] }
@Test [EOL] public void testReplace() { [EOL]     Document doc = Jsoup.parse("<p>One <span>two</span> three</p>"); [EOL]     Element p = doc.select("p").first(); [EOL]     Element insert = doc.createElement("em").text("foo"); [EOL]     p.childNode(1).replaceWith(insert); [EOL]     assertEquals("One <em>foo</em> three", p.html()); [EOL] }
@Test [EOL] public void testReplace() { [EOL]     Document doc = Jsoup.parse("<p>One <span>two</span> three</p>"); [EOL]     Element p = doc.select("p").first(); [EOL]     Element insert = doc.createElement("em").text("foo"); [EOL]     p.childNode(1).replaceWith(insert); [EOL]     assertEquals("One <em>foo</em> three", p.html()); [EOL] }
@Test [EOL] public void testReplace() { [EOL]     Document doc = Jsoup.parse("<p>One <span>two</span> three</p>"); [EOL]     Element p = doc.select("p").first(); [EOL]     Element insert = doc.createElement("em").text("foo"); [EOL]     p.childNode(1).replaceWith(insert); [EOL]     assertEquals("One <em>foo</em> three", p.html()); [EOL] }
@Test [EOL] public void testReplace() { [EOL]     Document doc = Jsoup.parse("<p>One <span>two</span> three</p>"); [EOL]     Element p = doc.select("p").first(); [EOL]     Element insert = doc.createElement("em").text("foo"); [EOL]     p.childNode(1).replaceWith(insert); [EOL]     assertEquals("One <em>foo</em> three", p.html()); [EOL] }
@Test [EOL] public void testOuterHtml() { [EOL]     Document doc = Jsoup.parse("<div title='Tags &amp;c.'><img src=foo.png><p><!-- comment -->Hello<p>there"); [EOL]     assertEquals("<html><head></head><body><div title=\"Tags &amp;c.\"><img src=\"foo.png\" /><p><!-- comment -->Hello</p><p>there</p></div></body></html>", TextUtil.stripNewlines(doc.outerHtml())); [EOL] }
@Test [EOL] public void testOuterHtml() { [EOL]     Document doc = Jsoup.parse("<div title='Tags &amp;c.'><img src=foo.png><p><!-- comment -->Hello<p>there"); [EOL]     assertEquals("<html><head></head><body><div title=\"Tags &amp;c.\"><img src=\"foo.png\" /><p><!-- comment -->Hello</p><p>there</p></div></body></html>", TextUtil.stripNewlines(doc.outerHtml())); [EOL] }
@Test [EOL] public void testOuterHtml() { [EOL]     Document doc = Jsoup.parse("<div title='Tags &amp;c.'><img src=foo.png><p><!-- comment -->Hello<p>there"); [EOL]     assertEquals("<html><head></head><body><div title=\"Tags &amp;c.\"><img src=\"foo.png\" /><p><!-- comment -->Hello</p><p>there</p></div></body></html>", TextUtil.stripNewlines(doc.outerHtml())); [EOL] }
@Test [EOL] public void testOuterHtml() { [EOL]     Document doc = Jsoup.parse("<div title='Tags &amp;c.'><img src=foo.png><p><!-- comment -->Hello<p>there"); [EOL]     assertEquals("<html><head></head><body><div title=\"Tags &amp;c.\"><img src=\"foo.png\" /><p><!-- comment -->Hello</p><p>there</p></div></body></html>", TextUtil.stripNewlines(doc.outerHtml())); [EOL] }
@Test [EOL] public void testReplace() { [EOL]     Document doc = Jsoup.parse("<p>One <span>two</span> three</p>"); [EOL]     Element p = doc.select("p").first(); [EOL]     Element insert = doc.createElement("em").text("foo"); [EOL]     p.childNode(1).replaceWith(insert); [EOL]     assertEquals("One <em>foo</em> three", p.html()); [EOL] }
@Test [EOL] public void testReplace() { [EOL]     Document doc = Jsoup.parse("<p>One <span>two</span> three</p>"); [EOL]     Element p = doc.select("p").first(); [EOL]     Element insert = doc.createElement("em").text("foo"); [EOL]     p.childNode(1).replaceWith(insert); [EOL]     assertEquals("One <em>foo</em> three", p.html()); [EOL] }
@Test [EOL] public void testReplace() { [EOL]     Document doc = Jsoup.parse("<p>One <span>two</span> three</p>"); [EOL]     Element p = doc.select("p").first(); [EOL]     Element insert = doc.createElement("em").text("foo"); [EOL]     p.childNode(1).replaceWith(insert); [EOL]     assertEquals("One <em>foo</em> three", p.html()); [EOL] }
@Test [EOL] public void testReplace() { [EOL]     Document doc = Jsoup.parse("<p>One <span>two</span> three</p>"); [EOL]     Element p = doc.select("p").first(); [EOL]     Element insert = doc.createElement("em").text("foo"); [EOL]     p.childNode(1).replaceWith(insert); [EOL]     assertEquals("One <em>foo</em> three", p.html()); [EOL] }
@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile("/htmltests/google-ipod.html"); [EOL]     Document doc = Jsoup.parse(in, "UTF-8", "http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10"); [EOL]     assertEquals("ipod - Google Search", doc.title()); [EOL]     Elements results = doc.select("h3.r > a"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals("http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA", results.get(0).attr("href")); [EOL]     assertEquals("http://www.apple.com/itunes/", results.get(1).attr("href")); [EOL] }
@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile("/htmltests/google-ipod.html"); [EOL]     Document doc = Jsoup.parse(in, "UTF-8", "http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10"); [EOL]     assertEquals("ipod - Google Search", doc.title()); [EOL]     Elements results = doc.select("h3.r > a"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals("http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA", results.get(0).attr("href")); [EOL]     assertEquals("http://www.apple.com/itunes/", results.get(1).attr("href")); [EOL] }
@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile("/htmltests/google-ipod.html"); [EOL]     Document doc = Jsoup.parse(in, "UTF-8", "http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10"); [EOL]     assertEquals("ipod - Google Search", doc.title()); [EOL]     Elements results = doc.select("h3.r > a"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals("http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA", results.get(0).attr("href")); [EOL]     assertEquals("http://www.apple.com/itunes/", results.get(1).attr("href")); [EOL] }
@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile("/htmltests/google-ipod.html"); [EOL]     Document doc = Jsoup.parse(in, "UTF-8", "http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10"); [EOL]     assertEquals("ipod - Google Search", doc.title()); [EOL]     Elements results = doc.select("h3.r > a"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals("http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA", results.get(0).attr("href")); [EOL]     assertEquals("http://www.apple.com/itunes/", results.get(1).attr("href")); [EOL] }
@Test [EOL] public void val() { [EOL]     Document doc = Jsoup.parse("<div><p>Hello</p></div><div><p>There</p></div>"); [EOL]     Elements divs = doc.select("div"); [EOL]     assertEquals("Hello", divs.val()); [EOL]     assertEquals("There", divs.last().val()); [EOL] }
@Test [EOL] public void val() { [EOL]     Document doc = Jsoup.parse("<div><p>Hello</p></div><div><p>There</p></div>"); [EOL]     Elements divs = doc.select("div"); [EOL]     assertEquals("Hello", divs.val()); [EOL]     assertEquals("There", divs.last().val()); [EOL] }
@Test [EOL] public void val() { [EOL]     Document doc = Jsoup.parse("<div><p>Hello</p></div><div><p>There</p></div>"); [EOL]     Elements divs = doc.select("div"); [EOL]     assertEquals("Hello", divs.val()); [EOL]     assertEquals("There", divs.last().val()); [EOL] }
@Test [EOL] public void attributes() { [EOL]     String h = "<p title=foo><p title=bar><p class=foo><p class=bar>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements withTitle = doc.select("p[title]"); [EOL]     assertEquals(2, withTitle.size()); [EOL]     assertTrue(withTitle.hasAttr("title")); [EOL]     assertFalse(withTitle.hasAttr("class")); [EOL]     assertEquals("foo", withTitle.attr("title")); [EOL]     withTitle.val("bar"); [EOL]     assertEquals(2, withTitle.size()); [EOL]     assertEquals(0, doc.select("p[title]").size()); [EOL]     Elements ps = doc.select("p").attr("style", "classy"); [EOL]     assertEquals(4, ps.size()); [EOL]     assertEquals("classy", ps.last().attr("style")); [EOL]     assertEquals("bar", ps.last().attr("class")); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse("<p>One</p><p>Two</p><p>Three</p>"); [EOL]     Elements ps = doc.select("p"); [EOL]     ps.prepend("<b>Bold</b>").append("<i>Ital</i>"); [EOL]     assertEquals("<p><b>Bold</b>Two<i>Ital</i></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html("<span>Gone</span>"); [EOL]     assertEquals("<p><span>Gone</span></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse("<p>One</p><p>Two</p><p>Three</p>"); [EOL]     Elements ps = doc.select("p"); [EOL]     ps.prepend("<b>Bold</b>").append("<i>Ital</i>"); [EOL]     assertEquals("<p><b>Bold</b>Two<i>Ital</i></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html("<span>Gone</span>"); [EOL]     assertEquals("<p><span>Gone</span></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse("<p>One</p><p>Two</p><p>Three</p>"); [EOL]     Elements ps = doc.select("p"); [EOL]     ps.prepend("<b>Bold</b>").append("<i>Ital</i>"); [EOL]     assertEquals("<p><b>Bold</b>Two<i>Ital</i></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html("<span>Gone</span>"); [EOL]     assertEquals("<p><span>Gone</span></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void hasText() { [EOL]     Document doc = Jsoup.parse("<div><p>Hello</p></div><div><p></p></div>"); [EOL]     Elements divs = doc.select("div"); [EOL]     assertTrue(divs.hasText()); [EOL]     assertTrue(divs.first().hasText()); [EOL]     assertFalse(divs.last().hasText()); [EOL] }
@Test [EOL] public void hasText() { [EOL]     Document doc = Jsoup.parse("<div><p>Hello</p><p></p></div><div><p></p></div>"); [EOL]     Elements divs = doc.select("div"); [EOL]     assertTrue(divs.hasText()); [EOL]     assertTrue(divs.first().hasText()); [EOL]     assertFalse(divs.last().hasText()); [EOL] }
@Test [EOL] public void hasText() { [EOL]     Document doc = Jsoup.parse("<div><p>Hello</p><p></p></div><div><p></p></div>"); [EOL]     Elements divs = doc.select("div"); [EOL]     assertTrue(divs.hasText()); [EOL]     assertTrue(divs.first().hasText()); [EOL]     assertFalse(divs.last().hasText()); [EOL] }
@Test [EOL] public void hasText() { [EOL]     Document doc = Jsoup.parse("<div><p>Hello</p></div><div><p></p></div>"); [EOL]     Elements divs = doc.select("div"); [EOL]     assertTrue(divs.hasText()); [EOL]     assertTrue(divs.first().hasText()); [EOL]     assertFalse(divs.last().hasText()); [EOL] }
@Test [EOL] public void hasText() { [EOL]     Document doc = Jsoup.parse("<div><p>Hello</p></div><div><p></p></div>"); [EOL]     Elements divs = doc.select("div"); [EOL]     assertTrue(divs.hasText()); [EOL]     assertTrue(divs.first().hasText()); [EOL]     assertFalse(divs.last().hasText()); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse("<p>One</p><p>Two</p><p>Three</p>"); [EOL]     Elements ps = doc.select("p"); [EOL]     ps.prepend("<b>Bold</b>").append("<i>Ital</i>"); [EOL]     assertEquals("<p><b>Bold</b>Two<i>Ital</i></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html("<span>Gone</span>"); [EOL]     assertEquals("<p><span>Gone</span></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse("<p>One</p><p>Two</p><p>Three</p>"); [EOL]     Elements ps = doc.select("p"); [EOL]     ps.prepend("<b>Bold</b>").append("<i>Ital</i>"); [EOL]     assertEquals("<p><b>Bold</b>Two<i>Ital</i></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html("<span>Gone</span>"); [EOL]     assertEquals("<p><span>Gone</span></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse("<p>One</p><p>Two</p><p>Three</p>"); [EOL]     Elements ps = doc.select("p"); [EOL]     ps.prepend("<b>Bold</b>").append("<i>Ital</i>"); [EOL]     assertEquals("<p><b>Bold</b>Two<i>Ital</i></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html("<span>Gone</span>"); [EOL]     assertEquals("<p><span>Gone</span></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse("<p>One</p><p>Two</p><p>Three</p>"); [EOL]     Elements ps = doc.select("p"); [EOL]     ps.prepend("<b>Bold</b>").append("<i>Ital</i>"); [EOL]     assertEquals("<p><b>Bold</b>Two<i>Ital</i></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html("<span>Gone</span>"); [EOL]     assertEquals("<p><span>Gone</span></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse("<p>One</p><p>Two</p><p>Three</p>"); [EOL]     Elements ps = doc.select("p"); [EOL]     ps.prepend("<b>Bold</b>").append("<i>Ital</i>"); [EOL]     assertEquals("<p><b>Bold</b>Two<i>Ital</i></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html("<span>Gone</span>"); [EOL]     assertEquals("<p><span>Gone</span></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse("<p>One</p><p>Two</p><p>Three</p>"); [EOL]     Elements ps = doc.select("p"); [EOL]     ps.prepend("<b>Bold</b>").append("<i>Ital</i>"); [EOL]     assertEquals("<p><b>Bold</b>Two<i>Ital</i></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html("<span>Gone</span>"); [EOL]     assertEquals("<p><span>Gone</span></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse("<p>One</p><p>Two</p><p>Three</p>"); [EOL]     Elements ps = doc.select("p"); [EOL]     ps.prepend("<b>Bold</b>").append("<i>Ital</i>"); [EOL]     assertEquals("<p><b>Bold</b>Two<i>Ital</i></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html("<span>Gone</span>"); [EOL]     assertEquals("<p><span>Gone</span></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void testNewsHomepage() throws IOException { [EOL]     File in = getFile("/htmltests/news-com-au-home.html"); [EOL]     Document doc = Jsoup.parse(in, "UTF-8", "http://www.news.com.au/"); [EOL]     assertEquals("News.com.au | News from Australia and around the world online | NewsComAu", doc.title()); [EOL]     assertEquals("Brace yourself for Metro meltdown", doc.select(".id1225817868581 h4").text().trim()); [EOL]     Element a = doc.select("a[href=/entertainment/horoscopes]").first(); [EOL]     assertEquals("/entertainment/horoscopes", a.attr("href")); [EOL]     assertEquals("http://www.news.com.au/entertainment/horoscopes", a.attr("abs:href")); [EOL]     Element hs = doc.select("a[href*=naughty-corners-are-a-bad-idea]").first(); [EOL]     assertEquals("http://www.heraldsun.com.au/news/naughty-corners-are-a-bad-idea-for-kids/story-e6frf7jo-1225817899003", hs.attr("href")); [EOL]     assertEquals(hs.attr("href"), hs.attr("abs:href")); [EOL] }
@Test [EOL] public void testNewsHomepage() throws IOException { [EOL]     File in = getFile("/htmltests/news-com-au-home.html"); [EOL]     Document doc = Jsoup.parse(in, "UTF-8", "http://www.news.com.au/"); [EOL]     assertEquals("News.com.au | News from Australia and around the world online | NewsComAu", doc.title()); [EOL]     assertEquals("Brace yourself for Metro meltdown", doc.select(".id1225817868581 h4").text().trim()); [EOL]     Element a = doc.select("a[href=/entertainment/horoscopes]").first(); [EOL]     assertEquals("/entertainment/horoscopes", a.attr("href")); [EOL]     assertEquals("http://www.news.com.au/entertainment/horoscopes", a.attr("abs:href")); [EOL]     Element hs = doc.select("a[href*=naughty-corners-are-a-bad-idea]").first(); [EOL]     assertEquals("http://www.heraldsun.com.au/news/naughty-corners-are-a-bad-idea-for-kids/story-e6frf7jo-1225817899003", hs.attr("href")); [EOL]     assertEquals(hs.attr("href"), hs.attr("abs:href")); [EOL] }
@Test [EOL] public void testNewsHomepage() throws IOException { [EOL]     File in = getFile("/htmltests/news-com-au-home.html"); [EOL]     Document doc = Jsoup.parse(in, "UTF-8", "http://www.news.com.au/"); [EOL]     assertEquals("News.com.au | News from Australia and around the world online | NewsComAu", doc.title()); [EOL]     assertEquals("Brace yourself for Metro meltdown", doc.select(".id1225817868581 h4").text().trim()); [EOL]     Element a = doc.select("a[href=/entertainment/horoscopes]").first(); [EOL]     assertEquals("/entertainment/horoscopes", a.attr("href")); [EOL]     assertEquals("http://www.news.com.au/entertainment/horoscopes", a.attr("abs:href")); [EOL]     Element hs = doc.select("a[href*=naughty-corners-are-a-bad-idea]").first(); [EOL]     assertEquals("http://www.heraldsun.com.au/news/naughty-corners-are-a-bad-idea-for-kids/story-e6frf7jo-1225817899003", hs.attr("href")); [EOL]     assertEquals(hs.attr("href"), hs.attr("abs:href")); [EOL] }
@Test [EOL] public void testNewsHomepage() throws IOException { [EOL]     File in = getFile("/htmltests/news-com-au-home.html"); [EOL]     Document doc = Jsoup.parse(in, "UTF-8", "http://www.news.com.au/"); [EOL]     assertEquals("News.com.au | News from Australia and around the world online | NewsComAu", doc.title()); [EOL]     assertEquals("Brace yourself for Metro meltdown", doc.select(".id1225817868581 h4").text().trim()); [EOL]     Element a = doc.select("a[href=/entertainment/horoscopes]").first(); [EOL]     assertEquals("/entertainment/horoscopes", a.attr("href")); [EOL]     assertEquals("http://www.news.com.au/entertainment/horoscopes", a.attr("abs:href")); [EOL]     Element hs = doc.select("a[href*=naughty-corners-are-a-bad-idea]").first(); [EOL]     assertEquals("http://www.heraldsun.com.au/news/naughty-corners-are-a-bad-idea-for-kids/story-e6frf7jo-1225817899003", hs.attr("href")); [EOL]     assertEquals(hs.attr("href"), hs.attr("abs:href")); [EOL] }
@Test [EOL] public void testNewsHomepage() throws IOException { [EOL]     File in = getFile("/htmltests/news-com-au-home.html"); [EOL]     Document doc = Jsoup.parse(in, "UTF-8", "http://www.news.com.au/"); [EOL]     assertEquals("News.com.au | News from Australia and around the world online | NewsComAu", doc.title()); [EOL]     assertEquals("Brace yourself for Metro meltdown", doc.select(".id1225817868581 h4").text().trim()); [EOL]     Element a = doc.select("a[href=/entertainment/horoscopes]").first(); [EOL]     assertEquals("/entertainment/horoscopes", a.attr("href")); [EOL]     assertEquals("http://www.news.com.au/entertainment/horoscopes", a.attr("abs:href")); [EOL]     Element hs = doc.select("a[href*=naughty-corners-are-a-bad-idea]").first(); [EOL]     assertEquals("http://www.heraldsun.com.au/news/naughty-corners-are-a-bad-idea-for-kids/story-e6frf7jo-1225817899003", hs.attr("href")); [EOL]     assertEquals(hs.attr("href"), hs.attr("abs:href")); [EOL] }
@Test [EOL] public void testNewsHomepage() throws IOException { [EOL]     File in = getFile("/htmltests/news-com-au-home.html"); [EOL]     Document doc = Jsoup.parse(in, "UTF-8", "http://www.news.com.au/"); [EOL]     assertEquals("News.com.au | News from Australia and around the world online | NewsComAu", doc.title()); [EOL]     assertEquals("Brace yourself for Metro meltdown", doc.select(".id1225817868581 h4").text().trim()); [EOL]     Element a = doc.select("a[href=/entertainment/horoscopes]").first(); [EOL]     assertEquals("/entertainment/horoscopes", a.attr("href")); [EOL]     assertEquals("http://www.news.com.au/entertainment/horoscopes", a.attr("abs:href")); [EOL]     Element hs = doc.select("a[href*=naughty-corners-are-a-bad-idea]").first(); [EOL]     assertEquals("http://www.heraldsun.com.au/news/naughty-corners-are-a-bad-idea-for-kids/story-e6frf7jo-1225817899003", hs.attr("href")); [EOL]     assertEquals(hs.attr("href"), hs.attr("abs:href")); [EOL] }
@Test [EOL] public void testNewsHomepage() throws IOException { [EOL]     File in = getFile("/htmltests/news-com-au-home.html"); [EOL]     Document doc = Jsoup.parse(in, "UTF-8", "http://www.news.com.au/"); [EOL]     assertEquals("News.com.au | News from Australia and around the world online | NewsComAu", doc.title()); [EOL]     assertEquals("Brace yourself for Metro meltdown", doc.select(".id1225817868581 h4").text().trim()); [EOL]     Element a = doc.select("a[href=/entertainment/horoscopes]").first(); [EOL]     assertEquals("/entertainment/horoscopes", a.attr("href")); [EOL]     assertEquals("http://www.news.com.au/entertainment/horoscopes", a.attr("abs:href")); [EOL]     Element hs = doc.select("a[href*=naughty-corners-are-a-bad-idea]").first(); [EOL]     assertEquals("http://www.heraldsun.com.au/news/naughty-corners-are-a-bad-idea-for-kids/story-e6frf7jo-1225817899003", hs.attr("href")); [EOL]     assertEquals(hs.attr("href"), hs.attr("abs:href")); [EOL] }
@Test [EOL] public void testNewsHomepage() throws IOException { [EOL]     File in = getFile("/htmltests/news-com-au-home.html"); [EOL]     Document doc = Jsoup.parse(in, "UTF-8", "http://www.news.com.au/"); [EOL]     assertEquals("News.com.au | News from Australia and around the world online | NewsComAu", doc.title()); [EOL]     assertEquals("Brace yourself for Metro meltdown", doc.select(".id1225817868581 h4").text().trim()); [EOL]     Element a = doc.select("a[href=/entertainment/horoscopes]").first(); [EOL]     assertEquals("/entertainment/horoscopes", a.attr("href")); [EOL]     assertEquals("http://www.news.com.au/entertainment/horoscopes", a.attr("abs:href")); [EOL]     Element hs = doc.select("a[href*=naughty-corners-are-a-bad-idea]").first(); [EOL]     assertEquals("http://www.heraldsun.com.au/news/naughty-corners-are-a-bad-idea-for-kids/story-e6frf7jo-1225817899003", hs.attr("href")); [EOL]     assertEquals(hs.attr("href"), hs.attr("abs:href")); [EOL] }
@Test [EOL] public void testNewsHomepage() throws IOException { [EOL]     File in = getFile("/htmltests/news-com-au-home.html"); [EOL]     Document doc = Jsoup.parse(in, "UTF-8", "http://www.news.com.au/"); [EOL]     assertEquals("News.com.au | News from Australia and around the world online | NewsComAu", doc.title()); [EOL]     assertEquals("Brace yourself for Metro meltdown", doc.select(".id1225817868581 h4").text().trim()); [EOL]     Element a = doc.select("a[href=/entertainment/horoscopes]").first(); [EOL]     assertEquals("/entertainment/horoscopes", a.attr("href")); [EOL]     assertEquals("http://www.news.com.au/entertainment/horoscopes", a.attr("abs:href")); [EOL]     Element hs = doc.select("a[href*=naughty-corners-are-a-bad-idea]").first(); [EOL]     assertEquals("http://www.heraldsun.com.au/news/naughty-corners-are-a-bad-idea-for-kids/story-e6frf7jo-1225817899003", hs.attr("href")); [EOL]     assertEquals(hs.attr("href"), hs.attr("abs:href")); [EOL] }
@Test [EOL] public void testNewsHomepage() throws IOException { [EOL]     File in = getFile("/htmltests/news-com-au-home.html"); [EOL]     Document doc = Jsoup.parse(in, "UTF-8", "http://www.news.com.au/"); [EOL]     assertEquals("News.com.au | News from Australia and around the world online | NewsComAu", doc.title()); [EOL]     assertEquals("Brace yourself for Metro meltdown", doc.select(".id1225817868581 h4").text().trim()); [EOL]     Element a = doc.select("a[href=/entertainment/horoscopes]").first(); [EOL]     assertEquals("/entertainment/horoscopes", a.attr("href")); [EOL]     assertEquals("http://www.news.com.au/entertainment/horoscopes", a.attr("abs:href")); [EOL]     Element hs = doc.select("a[href*=naughty-corners-are-a-bad-idea]").first(); [EOL]     assertEquals("http://www.heraldsun.com.au/news/naughty-corners-are-a-bad-idea-for-kids/story-e6frf7jo-1225817899003", hs.attr("href")); [EOL]     assertEquals(hs.attr("href"), hs.attr("abs:href")); [EOL] }
@Test [EOL] public void testNewsHomepage() throws IOException { [EOL]     File in = getFile("/htmltests/news-com-au-home.html"); [EOL]     Document doc = Jsoup.parse(in, "UTF-8", "http://www.news.com.au/"); [EOL]     assertEquals("News.com.au | News from Australia and around the world online | NewsComAu", doc.title()); [EOL]     assertEquals("Brace yourself for Metro meltdown", doc.select(".id1225817868581 h4").text().trim()); [EOL]     Element a = doc.select("a[href=/entertainment/horoscopes]").first(); [EOL]     assertEquals("/entertainment/horoscopes", a.attr("href")); [EOL]     assertEquals("http://www.news.com.au/entertainment/horoscopes", a.attr("abs:href")); [EOL]     Element hs = doc.select("a[href*=naughty-corners-are-a-bad-idea]").first(); [EOL]     assertEquals("http://www.heraldsun.com.au/news/naughty-corners-are-a-bad-idea-for-kids/story-e6frf7jo-1225817899003", hs.attr("href")); [EOL]     assertEquals(hs.attr("href"), hs.attr("abs:href")); [EOL] }
@Test [EOL] public void testNewsHomepage() throws IOException { [EOL]     File in = getFile("/htmltests/news-com-au-home.html"); [EOL]     Document doc = Jsoup.parse(in, "UTF-8", "http://www.news.com.au/"); [EOL]     assertEquals("News.com.au | News from Australia and around the world online | NewsComAu", doc.title()); [EOL]     assertEquals("Brace yourself for Metro meltdown", doc.select(".id1225817868581 h4").text().trim()); [EOL]     Element a = doc.select("a[href=/entertainment/horoscopes]").first(); [EOL]     assertEquals("/entertainment/horoscopes", a.attr("href")); [EOL]     assertEquals("http://www.news.com.au/entertainment/horoscopes", a.attr("abs:href")); [EOL]     Element hs = doc.select("a[href*=naughty-corners-are-a-bad-idea]").first(); [EOL]     assertEquals("http://www.heraldsun.com.au/news/naughty-corners-are-a-bad-idea-for-kids/story-e6frf7jo-1225817899003", hs.attr("href")); [EOL]     assertEquals(hs.attr("href"), hs.attr("abs:href")); [EOL] }
@Test [EOL] public void testPseudoEquals() { [EOL]     Document doc = Jsoup.parse("<div><p>One</p><p>Two</p><p>Three</>p></div><div><p>Four</p>"); [EOL]     Elements ps = doc.select("div p:eq(0)"); [EOL]     assertEquals(2, ps.size()); [EOL]     assertEquals("One", ps.get(0).text()); [EOL]     assertEquals("Four", ps.get(1).text()); [EOL]     Elements ps2 = doc.select("div:eq(0) p:eq(0)"); [EOL]     assertEquals(1, ps2.size()); [EOL]     assertEquals("One", ps2.get(0).text()); [EOL]     assertEquals("p", ps2.get(0).tagName()); [EOL] }
@Test [EOL] public void testPseudoEquals() { [EOL]     Document doc = Jsoup.parse("<div><p>One</p><p>Two</p><p>Three</>p></div><div><p>Four</p>"); [EOL]     Elements ps = doc.select("div p:eq(0)"); [EOL]     assertEquals(2, ps.size()); [EOL]     assertEquals("One", ps.get(0).text()); [EOL]     assertEquals("Four", ps.get(1).text()); [EOL]     Elements ps2 = doc.select("div:eq(0) p:eq(0)"); [EOL]     assertEquals(1, ps2.size()); [EOL]     assertEquals("One", ps2.get(0).text()); [EOL]     assertEquals("p", ps2.get(0).tagName()); [EOL] }
@Test [EOL] public void testPseudoEquals() { [EOL]     Document doc = Jsoup.parse("<div><p>One</p><p>Two</p><p>Three</>p></div><div><p>Four</p>"); [EOL]     Elements ps = doc.select("div p:eq(0)"); [EOL]     assertEquals(2, ps.size()); [EOL]     assertEquals("One", ps.get(0).text()); [EOL]     assertEquals("Four", ps.get(1).text()); [EOL]     Elements ps2 = doc.select("div:eq(0) p:eq(0)"); [EOL]     assertEquals(1, ps2.size()); [EOL]     assertEquals("One", ps2.get(0).text()); [EOL]     assertEquals("p", ps2.get(0).tagName()); [EOL] }
@Test [EOL] public void testPseudoEquals() { [EOL]     Document doc = Jsoup.parse("<div><p>One</p><p>Two</p><p>Three</>p></div><div><p>Four</p>"); [EOL]     Elements ps = doc.select("div p:eq(0)"); [EOL]     assertEquals(2, ps.size()); [EOL]     assertEquals("One", ps.get(0).text()); [EOL]     assertEquals("Four", ps.get(1).text()); [EOL]     Elements ps2 = doc.select("div:eq(0) p:eq(0)"); [EOL]     assertEquals(1, ps2.size()); [EOL]     assertEquals("One", ps2.get(0).text()); [EOL]     assertEquals("p", ps2.get(0).tagName()); [EOL] }
@Test [EOL] public void testPseudoEquals() { [EOL]     Document doc = Jsoup.parse("<div><p>One</p><p>Two</p><p>Three</>p></div><div><p>Four</p>"); [EOL]     Elements ps = doc.select("div p:eq(0)"); [EOL]     assertEquals(2, ps.size()); [EOL]     assertEquals("One", ps.get(0).text()); [EOL]     assertEquals("Four", ps.get(1).text()); [EOL]     Elements ps2 = doc.select("div:eq(0) p:eq(0)"); [EOL]     assertEquals(1, ps2.size()); [EOL]     assertEquals("One", ps2.get(0).text()); [EOL]     assertEquals("p", ps2.get(0).tagName()); [EOL] }
@Test [EOL] public void testPseudoEquals() { [EOL]     Document doc = Jsoup.parse("<div><p>One</p><p>Two</p><p>Three</>p></div><div><p>Four</p>"); [EOL]     Elements ps = doc.select("div p:eq(0)"); [EOL]     assertEquals(2, ps.size()); [EOL]     assertEquals("One", ps.get(0).text()); [EOL]     assertEquals("Four", ps.get(1).text()); [EOL]     Elements ps2 = doc.select("div:eq(0) p:eq(0)"); [EOL]     assertEquals(1, ps2.size()); [EOL]     assertEquals("One", ps2.get(0).text()); [EOL]     assertEquals("p", ps2.get(0).tagName()); [EOL] }
@Test [EOL] public void testPseudoEquals() { [EOL]     Document doc = Jsoup.parse("<div><p>One</p><p>Two</p><p>Three</>p></div><div><p>Four</p>"); [EOL]     Elements ps = doc.select("div p:eq(0)"); [EOL]     assertEquals(2, ps.size()); [EOL]     assertEquals("One", ps.get(0).text()); [EOL]     assertEquals("Four", ps.get(1).text()); [EOL]     Elements ps2 = doc.select("div:eq(0) p:eq(0)"); [EOL]     assertEquals(1, ps2.size()); [EOL]     assertEquals("One", ps2.get(0).text()); [EOL]     assertEquals("p", ps2.get(0).tagName()); [EOL] }
@Test [EOL] public void testPseudoEquals() { [EOL]     Document doc = Jsoup.parse("<div><p>One</p><p>Two</p><p>Three</>p></div><div><p>Four</p>"); [EOL]     Elements ps = doc.select("div p:eq(0)"); [EOL]     assertEquals(2, ps.size()); [EOL]     assertEquals("One", ps.get(0).text()); [EOL]     assertEquals("Four", ps.get(1).text()); [EOL]     Elements ps2 = doc.select("div:eq(0) p:eq(0)"); [EOL]     assertEquals(1, ps2.size()); [EOL]     assertEquals("One", ps2.get(0).text()); [EOL]     assertEquals("p", ps2.get(0).tagName()); [EOL] }
@Test [EOL] public void testPseudoEquals() { [EOL]     Document doc = Jsoup.parse("<div><p>One</p><p>Two</p><p>Three</>p></div><div><p>Four</p>"); [EOL]     Elements ps = doc.select("div p:eq(0)"); [EOL]     assertEquals(2, ps.size()); [EOL]     assertEquals("One", ps.get(0).text()); [EOL]     assertEquals("Four", ps.get(1).text()); [EOL]     Elements ps2 = doc.select("div:eq(0) p:eq(0)"); [EOL]     assertEquals(1, ps2.size()); [EOL]     assertEquals("One", ps2.get(0).text()); [EOL]     assertEquals("p", ps2.get(0).tagName()); [EOL] }
@Test [EOL] public void testPseudoEquals() { [EOL]     Document doc = Jsoup.parse("<div><p>One</p><p>Two</p><p>Three</>p></div><div><p>Four</p>"); [EOL]     Elements ps = doc.select("div p:eq(0)"); [EOL]     assertEquals(2, ps.size()); [EOL]     assertEquals("One", ps.get(0).text()); [EOL]     assertEquals("Four", ps.get(1).text()); [EOL]     Elements ps2 = doc.select("div:eq(0) p:eq(0)"); [EOL]     assertEquals(1, ps2.size()); [EOL]     assertEquals("One", ps2.get(0).text()); [EOL]     assertEquals("p", ps2.get(0).tagName()); [EOL] }
@Test [EOL] public void basicBehaviourTest() { [EOL]     String h = "<div><p><a href='javascript:sendAllMoney()'>Dodgy</a> <A HREF='HTTP://nice.com'>Nice</p><blockquote>Hello</blockquote>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basic()); [EOL]     assertEquals("<p><a rel=\"nofollow\">Dodgy</a> <a href=\"http://nice.com\" rel=\"nofollow\">Nice</a></p><blockquote>Hello</blockquote>", TextUtil.stripNewlines(cleanHtml)); [EOL] }
@Test [EOL] public void basicBehaviourTest() { [EOL]     String h = "<div><p><a href='javascript:sendAllMoney()'>Dodgy</a> <A HREF='HTTP://nice.com'>Nice</p><blockquote>Hello</blockquote>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basic()); [EOL]     assertEquals("<p><a rel=\"nofollow\">Dodgy</a> <a href=\"http://nice.com\" rel=\"nofollow\">Nice</a></p><blockquote>Hello</blockquote>", TextUtil.stripNewlines(cleanHtml)); [EOL] }
@Test [EOL] public void basicBehaviourTest() { [EOL]     String h = "<div><p><a href='javascript:sendAllMoney()'>Dodgy</a> <A HREF='HTTP://nice.com'>Nice</p><blockquote>Hello</blockquote>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basic()); [EOL]     assertEquals("<p><a rel=\"nofollow\">Dodgy</a> <a href=\"http://nice.com\" rel=\"nofollow\">Nice</a></p><blockquote>Hello</blockquote>", TextUtil.stripNewlines(cleanHtml)); [EOL] }
@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile("/htmltests/google-ipod.html"); [EOL]     Document doc = Jsoup.parse(in, "UTF-8", "http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10"); [EOL]     assertEquals("ipod - Google Search", doc.title()); [EOL]     Elements results = doc.select("h3.r > a"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals("http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA", results.get(0).attr("href")); [EOL]     assertEquals("http://www.apple.com/itunes/", results.get(1).attr("href")); [EOL] }
@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile("/htmltests/google-ipod.html"); [EOL]     Document doc = Jsoup.parse(in, "UTF-8", "http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10"); [EOL]     assertEquals("ipod - Google Search", doc.title()); [EOL]     Elements results = doc.select("h3.r > a"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals("http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA", results.get(0).attr("href")); [EOL]     assertEquals("http://www.apple.com/itunes/", results.get(1).attr("href")); [EOL] }
@Test [EOL] public void basicBehaviourTest() { [EOL]     String h = "<div><p><a href='javascript:sendAllMoney()'>Dodgy</a> <A HREF='HTTP://nice.com'>Nice</p><blockquote>Hello</blockquote>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basic()); [EOL]     assertEquals("<p><a rel=\"nofollow\">Dodgy</a> <a href=\"http://nice.com\" rel=\"nofollow\">Nice</a></p><blockquote>Hello</blockquote>", TextUtil.stripNewlines(cleanHtml)); [EOL] }
@Test [EOL] public void basicBehaviourTest() { [EOL]     String h = "<div><p><a href='javascript:sendAllMoney()'>Dodgy</a> <A HREF='HTTP://nice.com'>Nice</p><blockquote>Hello</blockquote>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basic()); [EOL]     assertEquals("<p><a rel=\"nofollow\">Dodgy</a> <a href=\"http://nice.com\" rel=\"nofollow\">Nice</a></p><blockquote>Hello</blockquote>", TextUtil.stripNewlines(cleanHtml)); [EOL] }
@Test [EOL] public void basicBehaviourTest() { [EOL]     String h = "<div><p><a href='javascript:sendAllMoney()'>Dodgy</a> <A HREF='HTTP://nice.com'>Nice</p><blockquote>Hello</blockquote>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basic()); [EOL]     assertEquals("<p><a rel=\"nofollow\">Dodgy</a> <a href=\"http://nice.com\" rel=\"nofollow\">Nice</a></p><blockquote>Hello</blockquote>", TextUtil.stripNewlines(cleanHtml)); [EOL] }
@Test [EOL] public void basicBehaviourTest() { [EOL]     String h = "<div><p><a href='javascript:sendAllMoney()'>Dodgy</a> <A HREF='HTTP://nice.com'>Nice</p><blockquote>Hello</blockquote>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basic()); [EOL]     assertEquals("<p><a rel=\"nofollow\">Dodgy</a> <a href=\"http://nice.com\" rel=\"nofollow\">Nice</a></p><blockquote>Hello</blockquote>", TextUtil.stripNewlines(cleanHtml)); [EOL] }
@Test [EOL] public void basicBehaviourTest() { [EOL]     String h = "<div><p><a href='javascript:sendAllMoney()'>Dodgy</a> <A HREF='HTTP://nice.com'>Nice</p><blockquote>Hello</blockquote>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basic()); [EOL]     assertEquals("<p><a rel=\"nofollow\">Dodgy</a> <a href=\"http://nice.com\" rel=\"nofollow\">Nice</a></p><blockquote>Hello</blockquote>", TextUtil.stripNewlines(cleanHtml)); [EOL] }
@Test [EOL] public void basicBehaviourTest() { [EOL]     String h = "<div><p><a href='javascript:sendAllMoney()'>Dodgy</a> <A HREF='HTTP://nice.com'>Nice</p><blockquote>Hello</blockquote>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basic()); [EOL]     assertEquals("<p><a rel=\"nofollow\">Dodgy</a> <a href=\"http://nice.com\" rel=\"nofollow\">Nice</a></p><blockquote>Hello</blockquote>", TextUtil.stripNewlines(cleanHtml)); [EOL] }
@Test [EOL] public void basicBehaviourTest() { [EOL]     String h = "<div><p><a href='javascript:sendAllMoney()'>Dodgy</a> <A HREF='HTTP://nice.com'>Nice</p><blockquote>Hello</blockquote>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basic()); [EOL]     assertEquals("<p><a rel=\"nofollow\">Dodgy</a> <a href=\"http://nice.com\" rel=\"nofollow\">Nice</a></p><blockquote>Hello</blockquote>", TextUtil.stripNewlines(cleanHtml)); [EOL] }
@Test [EOL] public void basicBehaviourTest() { [EOL]     String h = "<div><p><a href='javascript:sendAllMoney()'>Dodgy</a> <A HREF='HTTP://nice.com'>Nice</p><blockquote>Hello</blockquote>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basic()); [EOL]     assertEquals("<p><a rel=\"nofollow\">Dodgy</a> <a href=\"http://nice.com\" rel=\"nofollow\">Nice</a></p><blockquote>Hello</blockquote>", TextUtil.stripNewlines(cleanHtml)); [EOL] }
@Test [EOL] public void basicBehaviourTest() { [EOL]     String h = "<div><p><a href='javascript:sendAllMoney()'>Dodgy</a> <A HREF='HTTP://nice.com'>Nice</p><blockquote>Hello</blockquote>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basic()); [EOL]     assertEquals("<p><a rel=\"nofollow\">Dodgy</a> <a href=\"http://nice.com\" rel=\"nofollow\">Nice</a></p><blockquote>Hello</blockquote>", TextUtil.stripNewlines(cleanHtml)); [EOL] }
@Test [EOL] public void basicBehaviourTest() { [EOL]     String h = "<div><p><a href='javascript:sendAllMoney()'>Dodgy</a> <A HREF='HTTP://nice.com'>Nice</p><blockquote>Hello</blockquote>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basic()); [EOL]     assertEquals("<p><a rel=\"nofollow\">Dodgy</a> <a href=\"http://nice.com\" rel=\"nofollow\">Nice</a></p><blockquote>Hello</blockquote>", TextUtil.stripNewlines(cleanHtml)); [EOL] }
@Test [EOL] public void basicBehaviourTest() { [EOL]     String h = "<div><p><a href='javascript:sendAllMoney()'>Dodgy</a> <A HREF='HTTP://nice.com'>Nice</p><blockquote>Hello</blockquote>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basic()); [EOL]     assertEquals("<p><a rel=\"nofollow\">Dodgy</a> <a href=\"http://nice.com\" rel=\"nofollow\">Nice</a></p><blockquote>Hello</blockquote>", TextUtil.stripNewlines(cleanHtml)); [EOL] }
@Test [EOL] public void basicBehaviourTest() { [EOL]     String h = "<div><p><a href='javascript:sendAllMoney()'>Dodgy</a> <A HREF='HTTP://nice.com'>Nice</p><blockquote>Hello</blockquote>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basic()); [EOL]     assertEquals("<p><a rel=\"nofollow\">Dodgy</a> <a href=\"http://nice.com\" rel=\"nofollow\">Nice</a></p><blockquote>Hello</blockquote>", TextUtil.stripNewlines(cleanHtml)); [EOL] }
@Test [EOL] public void basicBehaviourTest() { [EOL]     String h = "<div><p><a href='javascript:sendAllMoney()'>Dodgy</a> <A HREF='HTTP://nice.com'>Nice</p><blockquote>Hello</blockquote>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basic()); [EOL]     assertEquals("<p><a rel=\"nofollow\">Dodgy</a> <a href=\"http://nice.com\" rel=\"nofollow\">Nice</a></p><blockquote>Hello</blockquote>", TextUtil.stripNewlines(cleanHtml)); [EOL] }
@Test [EOL] public void basicBehaviourTest() { [EOL]     String h = "<div><p><a href='javascript:sendAllMoney()'>Dodgy</a> <A HREF='HTTP://nice.com'>Nice</p><blockquote>Hello</blockquote>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basic()); [EOL]     assertEquals("<p><a rel=\"nofollow\">Dodgy</a> <a href=\"http://nice.com\" rel=\"nofollow\">Nice</a></p><blockquote>Hello</blockquote>", TextUtil.stripNewlines(cleanHtml)); [EOL] }
@Test [EOL] public void basicBehaviourTest() { [EOL]     String h = "<div><p><a href='javascript:sendAllMoney()'>Dodgy</a> <A HREF='HTTP://nice.com'>Nice</p><blockquote>Hello</blockquote>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basic()); [EOL]     assertEquals("<p><a rel=\"nofollow\">Dodgy</a> <a href=\"http://nice.com\" rel=\"nofollow\">Nice</a></p><blockquote>Hello</blockquote>", TextUtil.stripNewlines(cleanHtml)); [EOL] }
@Test [EOL] public void basicBehaviourTest() { [EOL]     String h = "<div><p><a href='javascript:sendAllMoney()'>Dodgy</a> <A HREF='HTTP://nice.com'>Nice</p><blockquote>Hello</blockquote>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basic()); [EOL]     assertEquals("<p><a rel=\"nofollow\">Dodgy</a> <a href=\"http://nice.com\" rel=\"nofollow\">Nice</a></p><blockquote>Hello</blockquote>", TextUtil.stripNewlines(cleanHtml)); [EOL] }
@Test [EOL] public void basicBehaviourTest() { [EOL]     String h = "<div><p><a href='javascript:sendAllMoney()'>Dodgy</a> <A HREF='HTTP://nice.com'>Nice</p><blockquote>Hello</blockquote>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basic()); [EOL]     assertEquals("<p><a rel=\"nofollow\">Dodgy</a> <a href=\"http://nice.com\" rel=\"nofollow\">Nice</a></p><blockquote>Hello</blockquote>", TextUtil.stripNewlines(cleanHtml)); [EOL] }
@Test [EOL] public void basicBehaviourTest() { [EOL]     String h = "<div><p><a href='javascript:sendAllMoney()'>Dodgy</a> <A HREF='HTTP://nice.com'>Nice</p><blockquote>Hello</blockquote>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basic()); [EOL]     assertEquals("<p><a rel=\"nofollow\">Dodgy</a> <a href=\"http://nice.com\" rel=\"nofollow\">Nice</a></p><blockquote>Hello</blockquote>", TextUtil.stripNewlines(cleanHtml)); [EOL] }
@Test [EOL] public void basicBehaviourTest() { [EOL]     String h = "<div><p><a href='javascript:sendAllMoney()'>Dodgy</a> <A HREF='HTTP://nice.com'>Nice</p><blockquote>Hello</blockquote>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basic()); [EOL]     assertEquals("<p><a rel=\"nofollow\">Dodgy</a> <a href=\"http://nice.com\" rel=\"nofollow\">Nice</a></p><blockquote>Hello</blockquote>", TextUtil.stripNewlines(cleanHtml)); [EOL] }
@Test [EOL] public void basicBehaviourTest() { [EOL]     String h = "<div><p><a href='javascript:sendAllMoney()'>Dodgy</a> <A HREF='HTTP://nice.com'>Nice</p><blockquote>Hello</blockquote>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basic()); [EOL]     assertEquals("<p><a rel=\"nofollow\">Dodgy</a> <a href=\"http://nice.com\" rel=\"nofollow\">Nice</a></p><blockquote>Hello</blockquote>", TextUtil.stripNewlines(cleanHtml)); [EOL] }
@Test [EOL] public void basicBehaviourTest() { [EOL]     String h = "<div><p><a href='javascript:sendAllMoney()'>Dodgy</a> <A HREF='HTTP://nice.com'>Nice</p><blockquote>Hello</blockquote>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basic()); [EOL]     assertEquals("<p><a rel=\"nofollow\">Dodgy</a> <a href=\"http://nice.com\" rel=\"nofollow\">Nice</a></p><blockquote>Hello</blockquote>", TextUtil.stripNewlines(cleanHtml)); [EOL] }
@Test [EOL] public void basicBehaviourTest() { [EOL]     String h = "<div><p><a href='javascript:sendAllMoney()'>Dodgy</a> <A HREF='HTTP://nice.com'>Nice</p><blockquote>Hello</blockquote>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basic()); [EOL]     assertEquals("<p><a rel=\"nofollow\">Dodgy</a> <a href=\"http://nice.com\" rel=\"nofollow\">Nice</a></p><blockquote>Hello</blockquote>", TextUtil.stripNewlines(cleanHtml)); [EOL] }
@Test [EOL] public void basicBehaviourTest() { [EOL]     String h = "<div><p><a href='javascript:sendAllMoney()'>Dodgy</a> <A HREF='HTTP://nice.com'>Nice</p><blockquote>Hello</blockquote>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basic()); [EOL]     assertEquals("<p><a rel=\"nofollow\">Dodgy</a> <a href=\"http://nice.com\" rel=\"nofollow\">Nice</a></p><blockquote>Hello</blockquote>", TextUtil.stripNewlines(cleanHtml)); [EOL] }
@Test [EOL] public void basicBehaviourTest() { [EOL]     String h = "<div><p><a href='javascript:sendAllMoney()'>Dodgy</a> <A HREF='HTTP://nice.com'>Nice</p><blockquote>Hello</blockquote>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basic()); [EOL]     assertEquals("<p><a rel=\"nofollow\">Dodgy</a> <a href=\"http://nice.com\" rel=\"nofollow\">Nice</a></p><blockquote>Hello</blockquote>", TextUtil.stripNewlines(cleanHtml)); [EOL] }
@Test [EOL] public void basicBehaviourTest() { [EOL]     String h = "<div><p><a href='javascript:sendAllMoney()'>Dodgy</a> <A HREF='HTTP://nice.com'>Nice</p><blockquote>Hello</blockquote>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basic()); [EOL]     assertEquals("<p><a rel=\"nofollow\">Dodgy</a> <a href=\"http://nice.com\" rel=\"nofollow\">Nice</a></p><blockquote>Hello</blockquote>", TextUtil.stripNewlines(cleanHtml)); [EOL] }
@Test [EOL] public void basicBehaviourTest() { [EOL]     String h = "<div><p><a href='javascript:sendAllMoney()'>Dodgy</a> <A HREF='HTTP://nice.com'>Nice</p><blockquote>Hello</blockquote>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basic()); [EOL]     assertEquals("<p><a rel=\"nofollow\">Dodgy</a> <a href=\"http://nice.com\" rel=\"nofollow\">Nice</a></p><blockquote>Hello</blockquote>", TextUtil.stripNewlines(cleanHtml)); [EOL] }
@Test [EOL] public void basicBehaviourTest() { [EOL]     String h = "<div><p><a href='javascript:sendAllMoney()'>Dodgy</a> <A HREF='HTTP://nice.com'>Nice</p><blockquote>Hello</blockquote>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basic()); [EOL]     assertEquals("<p><a rel=\"nofollow\">Dodgy</a> <a href=\"http://nice.com\" rel=\"nofollow\">Nice</a></p><blockquote>Hello</blockquote>", TextUtil.stripNewlines(cleanHtml)); [EOL] }
@Test [EOL] public void basicBehaviourTest() { [EOL]     String h = "<div><p><a href='javascript:sendAllMoney()'>Dodgy</a> <A HREF='HTTP://nice.com'>Nice</p><blockquote>Hello</blockquote>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basic()); [EOL]     assertEquals("<p><a rel=\"nofollow\">Dodgy</a> <a href=\"http://nice.com\" rel=\"nofollow\">Nice</a></p><blockquote>Hello</blockquote>", TextUtil.stripNewlines(cleanHtml)); [EOL] }
@Test [EOL] public void basicBehaviourTest() { [EOL]     String h = "<div><p><a href='javascript:sendAllMoney()'>Dodgy</a> <A HREF='HTTP://nice.com'>Nice</p><blockquote>Hello</blockquote>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basic()); [EOL]     assertEquals("<p><a rel=\"nofollow\">Dodgy</a> <a href=\"http://nice.com\" rel=\"nofollow\">Nice</a></p><blockquote>Hello</blockquote>", TextUtil.stripNewlines(cleanHtml)); [EOL] }
@Test [EOL] public void basicBehaviourTest() { [EOL]     String h = "<div><p><a href='javascript:sendAllMoney()'>Dodgy</a> <A HREF='HTTP://nice.com'>Nice</p><blockquote>Hello</blockquote>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basic()); [EOL]     assertEquals("<p><a rel=\"nofollow\">Dodgy</a> <a href=\"http://nice.com\" rel=\"nofollow\">Nice</a></p><blockquote>Hello</blockquote>", TextUtil.stripNewlines(cleanHtml)); [EOL] }
@Test [EOL] public void basicBehaviourTest() { [EOL]     String h = "<div><p><a href='javascript:sendAllMoney()'>Dodgy</a> <A HREF='HTTP://nice.com'>Nice</p><blockquote>Hello</blockquote>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basic()); [EOL]     assertEquals("<p><a rel=\"nofollow\">Dodgy</a> <a href=\"http://nice.com\" rel=\"nofollow\">Nice</a></p><blockquote>Hello</blockquote>", TextUtil.stripNewlines(cleanHtml)); [EOL] }
@Test [EOL] public void basicBehaviourTest() { [EOL]     String h = "<div><p><a href='javascript:sendAllMoney()'>Dodgy</a> <A HREF='HTTP://nice.com'>Nice</p><blockquote>Hello</blockquote>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basic()); [EOL]     assertEquals("<p><a rel=\"nofollow\">Dodgy</a> <a href=\"http://nice.com\" rel=\"nofollow\">Nice</a></p><blockquote>Hello</blockquote>", TextUtil.stripNewlines(cleanHtml)); [EOL] }
@Test [EOL] public void basicBehaviourTest() { [EOL]     String h = "<div><p><a href='javascript:sendAllMoney()'>Dodgy</a> <A HREF='HTTP://nice.com'>Nice</p><blockquote>Hello</blockquote>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basic()); [EOL]     assertEquals("<p><a rel=\"nofollow\">Dodgy</a> <a href=\"http://nice.com\" rel=\"nofollow\">Nice</a></p><blockquote>Hello</blockquote>", TextUtil.stripNewlines(cleanHtml)); [EOL] }
@Test [EOL] public void basicBehaviourTest() { [EOL]     String h = "<div><p><a href='javascript:sendAllMoney()'>Dodgy</a> <A HREF='HTTP://nice.com'>Nice</p><blockquote>Hello</blockquote>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basic()); [EOL]     assertEquals("<p><a rel=\"nofollow\">Dodgy</a> <a href=\"http://nice.com\" rel=\"nofollow\">Nice</a></p><blockquote>Hello</blockquote>", TextUtil.stripNewlines(cleanHtml)); [EOL] }
@Test [EOL] public void basicBehaviourTest() { [EOL]     String h = "<div><p><a href='javascript:sendAllMoney()'>Dodgy</a> <A HREF='HTTP://nice.com'>Nice</p><blockquote>Hello</blockquote>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basic()); [EOL]     assertEquals("<p><a rel=\"nofollow\">Dodgy</a> <a href=\"http://nice.com\" rel=\"nofollow\">Nice</a></p><blockquote>Hello</blockquote>", TextUtil.stripNewlines(cleanHtml)); [EOL] }
@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile("/htmltests/google-ipod.html"); [EOL]     Document doc = Jsoup.parse(in, "UTF-8", "http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10"); [EOL]     assertEquals("ipod - Google Search", doc.title()); [EOL]     Elements results = doc.select("h3.r > a"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals("http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA", results.get(0).attr("href")); [EOL]     assertEquals("http://www.apple.com/itunes/", results.get(1).attr("href")); [EOL] }
@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile("/htmltests/google-ipod.html"); [EOL]     Document doc = Jsoup.parse(in, "UTF-8", "http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10"); [EOL]     assertEquals("ipod - Google Search", doc.title()); [EOL]     Elements results = doc.select("h3.r > a"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals("http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA", results.get(0).attr("href")); [EOL]     assertEquals("http://www.apple.com/itunes/", results.get(1).attr("href")); [EOL] }
@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile("/htmltests/google-ipod.html"); [EOL]     Document doc = Jsoup.parse(in, "UTF-8", "http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10"); [EOL]     assertEquals("ipod - Google Search", doc.title()); [EOL]     Elements results = doc.select("h3.r > a"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals("http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA", results.get(0).attr("href")); [EOL]     assertEquals("http://www.apple.com/itunes/", results.get(1).attr("href")); [EOL] }
@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile("/htmltests/google-ipod.html"); [EOL]     Document doc = Jsoup.parse(in, "UTF-8", "http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10"); [EOL]     assertEquals("ipod - Google Search", doc.title()); [EOL]     Elements results = doc.select("h3.r > a"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals("http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA", results.get(0).attr("href")); [EOL]     assertEquals("http://www.apple.com/itunes/", results.get(1).attr("href")); [EOL] }
@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile("/htmltests/google-ipod.html"); [EOL]     Document doc = Jsoup.parse(in, "UTF-8", "http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10"); [EOL]     assertEquals("ipod - Google Search", doc.title()); [EOL]     Elements results = doc.select("h3.r > a"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals("http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA", results.get(0).attr("href")); [EOL]     assertEquals("http://www.apple.com/itunes/", results.get(1).attr("href")); [EOL] }
@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile("/htmltests/google-ipod.html"); [EOL]     Document doc = Jsoup.parse(in, "UTF-8", "http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10"); [EOL]     assertEquals("ipod - Google Search", doc.title()); [EOL]     Elements results = doc.select("h3.r > a"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals("http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA", results.get(0).attr("href")); [EOL]     assertEquals("http://www.apple.com/itunes/", results.get(1).attr("href")); [EOL] }
@Test [EOL] public void parentChildStar() { [EOL]     String h = "<div id=1><p>Hello<p><b>there</b></p></div><div id=2><span>Hi</span></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements divChilds = doc.select("div > *"); [EOL]     assertEquals(3, divChilds.size()); [EOL]     assertEquals("p", divChilds.get(0).tagName()); [EOL]     assertEquals("p", divChilds.get(1).tagName()); [EOL]     assertEquals("span", divChilds.get(2).tagName()); [EOL] }
@Test [EOL] public void parentChildStar() { [EOL]     String h = "<div id=1><p>Hello<p><b>there</b></p></div><div id=2><span>Hi</span></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements divChilds = doc.select("div > *"); [EOL]     assertEquals(3, divChilds.size()); [EOL]     assertEquals("p", divChilds.get(0).tagName()); [EOL]     assertEquals("p", divChilds.get(1).tagName()); [EOL]     assertEquals("span", divChilds.get(2).tagName()); [EOL] }
@Test [EOL] public void parentChildStar() { [EOL]     String h = "<div id=1><p>Hello<p><b>there</b></p></div><div id=2><span>Hi</span></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements divChilds = doc.select("div > *"); [EOL]     assertEquals(3, divChilds.size()); [EOL]     assertEquals("p", divChilds.get(0).tagName()); [EOL]     assertEquals("p", divChilds.get(1).tagName()); [EOL]     assertEquals("span", divChilds.get(2).tagName()); [EOL] }
@Test [EOL] public void parentChildStar() { [EOL]     String h = "<div id=1><p>Hello<p><b>there</b></p></div><div id=2><span>Hi</span></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements divChilds = doc.select("div > *"); [EOL]     assertEquals(3, divChilds.size()); [EOL]     assertEquals("p", divChilds.get(0).tagName()); [EOL]     assertEquals("p", divChilds.get(1).tagName()); [EOL]     assertEquals("span", divChilds.get(2).tagName()); [EOL] }
@Test [EOL] public void testPseudoEquals() { [EOL]     Document doc = Jsoup.parse("<div><p>One</p><p>Two</p><p>Three</>p></div><div><p>Four</p>"); [EOL]     Elements ps = doc.select("div p:eq(0)"); [EOL]     assertEquals(2, ps.size()); [EOL]     assertEquals("One", ps.get(0).text()); [EOL]     assertEquals("Four", ps.get(1).text()); [EOL]     Elements ps2 = doc.select("div:eq(0) p:eq(0)"); [EOL]     assertEquals(1, ps2.size()); [EOL]     assertEquals("One", ps2.get(0).text()); [EOL]     assertEquals("p", ps2.get(0).tagName()); [EOL] }
@Test [EOL] public void parentChildStar() { [EOL]     String h = "<div id=1><p>Hello<p><b>there</b></p></div><div id=2><span>Hi</span></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements divChilds = doc.select("div > *"); [EOL]     assertEquals(3, divChilds.size()); [EOL]     assertEquals("p", divChilds.get(0).tagName()); [EOL]     assertEquals("p", divChilds.get(1).tagName()); [EOL]     assertEquals("span", divChilds.get(2).tagName()); [EOL] }
@Test [EOL] public void testPseudoEquals() { [EOL]     Document doc = Jsoup.parse("<div><p>One</p><p>Two</p><p>Three</>p></div><div><p>Four</p>"); [EOL]     Elements ps = doc.select("div p:eq(0)"); [EOL]     assertEquals(2, ps.size()); [EOL]     assertEquals("One", ps.get(0).text()); [EOL]     assertEquals("Four", ps.get(1).text()); [EOL]     Elements ps2 = doc.select("div:eq(0) p:eq(0)"); [EOL]     assertEquals(1, ps2.size()); [EOL]     assertEquals("One", ps2.get(0).text()); [EOL]     assertEquals("p", ps2.get(0).tagName()); [EOL] }
@Test [EOL] public void and() { [EOL]     String h = "<div id=1 class='foo bar' title=bar name=qux><p class=foo title=bar>Hello</p></div"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements div = doc.select("div.foo"); [EOL]     assertEquals(1, div.size()); [EOL]     assertEquals("div", div.first().tagName()); [EOL]     Elements p = doc.select("div .foo"); [EOL]     assertEquals(1, p.size()); [EOL]     assertEquals("p", p.first().tagName()); [EOL]     Elements div2 = doc.select("div#1.foo.bar[title=bar][name=qux]"); [EOL]     assertEquals(1, div2.size()); [EOL]     assertEquals("div", div2.first().tagName()); [EOL]     Elements p2 = doc.select("div *.foo"); [EOL]     assertEquals(1, p2.size()); [EOL]     assertEquals("p", p2.first().tagName()); [EOL] }
@Test [EOL] public void and() { [EOL]     String h = "<div id=1 class='foo bar' title=bar name=qux><p class=foo title=bar>Hello</p></div"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements div = doc.select("div.foo"); [EOL]     assertEquals(1, div.size()); [EOL]     assertEquals("div", div.first().tagName()); [EOL]     Elements p = doc.select("div .foo"); [EOL]     assertEquals(1, p.size()); [EOL]     assertEquals("p", p.first().tagName()); [EOL]     Elements div2 = doc.select("div#1.foo.bar[title=bar][name=qux]"); [EOL]     assertEquals(1, div2.size()); [EOL]     assertEquals("div", div2.first().tagName()); [EOL]     Elements p2 = doc.select("div *.foo"); [EOL]     assertEquals(1, p2.size()); [EOL]     assertEquals("p", p2.first().tagName()); [EOL] }
@Test [EOL] public void and() { [EOL]     String h = "<div id=1 class='foo bar' title=bar name=qux><p class=foo title=bar>Hello</p></div"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements div = doc.select("div.foo"); [EOL]     assertEquals(1, div.size()); [EOL]     assertEquals("div", div.first().tagName()); [EOL]     Elements p = doc.select("div .foo"); [EOL]     assertEquals(1, p.size()); [EOL]     assertEquals("p", p.first().tagName()); [EOL]     Elements div2 = doc.select("div#1.foo.bar[title=bar][name=qux]"); [EOL]     assertEquals(1, div2.size()); [EOL]     assertEquals("div", div2.first().tagName()); [EOL]     Elements p2 = doc.select("div *.foo"); [EOL]     assertEquals(1, p2.size()); [EOL]     assertEquals("p", p2.first().tagName()); [EOL] }
@Test [EOL] public void and() { [EOL]     String h = "<div id=1 class='foo bar' title=bar name=qux><p class=foo title=bar>Hello</p></div"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements div = doc.select("div.foo"); [EOL]     assertEquals(1, div.size()); [EOL]     assertEquals("div", div.first().tagName()); [EOL]     Elements p = doc.select("div .foo"); [EOL]     assertEquals(1, p.size()); [EOL]     assertEquals("p", p.first().tagName()); [EOL]     Elements div2 = doc.select("div#1.foo.bar[title=bar][name=qux]"); [EOL]     assertEquals(1, div2.size()); [EOL]     assertEquals("div", div2.first().tagName()); [EOL]     Elements p2 = doc.select("div *.foo"); [EOL]     assertEquals(1, p2.size()); [EOL]     assertEquals("p", p2.first().tagName()); [EOL] }
@Test [EOL] public void and() { [EOL]     String h = "<div id=1 class='foo bar' title=bar name=qux><p class=foo title=bar>Hello</p></div"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements div = doc.select("div.foo"); [EOL]     assertEquals(1, div.size()); [EOL]     assertEquals("div", div.first().tagName()); [EOL]     Elements p = doc.select("div .foo"); [EOL]     assertEquals(1, p.size()); [EOL]     assertEquals("p", p.first().tagName()); [EOL]     Elements div2 = doc.select("div#1.foo.bar[title=bar][name=qux]"); [EOL]     assertEquals(1, div2.size()); [EOL]     assertEquals("div", div2.first().tagName()); [EOL]     Elements p2 = doc.select("div *.foo"); [EOL]     assertEquals(1, p2.size()); [EOL]     assertEquals("p", p2.first().tagName()); [EOL] }
@Test [EOL] public void and() { [EOL]     String h = "<div id=1 class='foo bar' title=bar name=qux><p class=foo title=bar>Hello</p></div"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements div = doc.select("div.foo"); [EOL]     assertEquals(1, div.size()); [EOL]     assertEquals("div", div.first().tagName()); [EOL]     Elements p = doc.select("div .foo"); [EOL]     assertEquals(1, p.size()); [EOL]     assertEquals("p", p.first().tagName()); [EOL]     Elements div2 = doc.select("div#1.foo.bar[title=bar][name=qux]"); [EOL]     assertEquals(1, div2.size()); [EOL]     assertEquals("div", div2.first().tagName()); [EOL]     Elements p2 = doc.select("div *.foo"); [EOL]     assertEquals(1, p2.size()); [EOL]     assertEquals("p", p2.first().tagName()); [EOL] }
@Test [EOL] public void and() { [EOL]     String h = "<div id=1 class='foo bar' title=bar name=qux><p class=foo title=bar>Hello</p></div"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements div = doc.select("div.foo"); [EOL]     assertEquals(1, div.size()); [EOL]     assertEquals("div", div.first().tagName()); [EOL]     Elements p = doc.select("div .foo"); [EOL]     assertEquals(1, p.size()); [EOL]     assertEquals("p", p.first().tagName()); [EOL]     Elements div2 = doc.select("div#1.foo.bar[title=bar][name=qux]"); [EOL]     assertEquals(1, div2.size()); [EOL]     assertEquals("div", div2.first().tagName()); [EOL]     Elements p2 = doc.select("div *.foo"); [EOL]     assertEquals(1, p2.size()); [EOL]     assertEquals("p", p2.first().tagName()); [EOL] }
@Test [EOL] public void and() { [EOL]     String h = "<div id=1 class='foo bar' title=bar name=qux><p class=foo title=bar>Hello</p></div"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements div = doc.select("div.foo"); [EOL]     assertEquals(1, div.size()); [EOL]     assertEquals("div", div.first().tagName()); [EOL]     Elements p = doc.select("div .foo"); [EOL]     assertEquals(1, p.size()); [EOL]     assertEquals("p", p.first().tagName()); [EOL]     Elements div2 = doc.select("div#1.foo.bar[title=bar][name=qux]"); [EOL]     assertEquals(1, div2.size()); [EOL]     assertEquals("div", div2.first().tagName()); [EOL]     Elements p2 = doc.select("div *.foo"); [EOL]     assertEquals(1, p2.size()); [EOL]     assertEquals("p", p2.first().tagName()); [EOL] }
@Test [EOL] public void testPseudoEquals() { [EOL]     Document doc = Jsoup.parse("<div><p>One</p><p>Two</p><p>Three</>p></div><div><p>Four</p>"); [EOL]     Elements ps = doc.select("div p:eq(0)"); [EOL]     assertEquals(2, ps.size()); [EOL]     assertEquals("One", ps.get(0).text()); [EOL]     assertEquals("Four", ps.get(1).text()); [EOL]     Elements ps2 = doc.select("div:eq(0) p:eq(0)"); [EOL]     assertEquals(1, ps2.size()); [EOL]     assertEquals("One", ps2.get(0).text()); [EOL]     assertEquals("p", ps2.get(0).tagName()); [EOL] }
@Test [EOL] public void testPseudoEquals() { [EOL]     Document doc = Jsoup.parse("<div><p>One</p><p>Two</p><p>Three</>p></div><div><p>Four</p>"); [EOL]     Elements ps = doc.select("div p:eq(0)"); [EOL]     assertEquals(2, ps.size()); [EOL]     assertEquals("One", ps.get(0).text()); [EOL]     assertEquals("Four", ps.get(1).text()); [EOL]     Elements ps2 = doc.select("div:eq(0) p:eq(0)"); [EOL]     assertEquals(1, ps2.size()); [EOL]     assertEquals("One", ps2.get(0).text()); [EOL]     assertEquals("p", ps2.get(0).tagName()); [EOL] }
@Test [EOL] public void testPseudoEquals() { [EOL]     Document doc = Jsoup.parse("<div><p>One</p><p>Two</p><p>Three</>p></div><div><p>Four</p>"); [EOL]     Elements ps = doc.select("div p:eq(0)"); [EOL]     assertEquals(2, ps.size()); [EOL]     assertEquals("One", ps.get(0).text()); [EOL]     assertEquals("Four", ps.get(1).text()); [EOL]     Elements ps2 = doc.select("div:eq(0) p:eq(0)"); [EOL]     assertEquals(1, ps2.size()); [EOL]     assertEquals("One", ps2.get(0).text()); [EOL]     assertEquals("p", ps2.get(0).tagName()); [EOL] }
@Test [EOL] public void testPseudoEquals() { [EOL]     Document doc = Jsoup.parse("<div><p>One</p><p>Two</p><p>Three</>p></div><div><p>Four</p>"); [EOL]     Elements ps = doc.select("div p:eq(0)"); [EOL]     assertEquals(2, ps.size()); [EOL]     assertEquals("One", ps.get(0).text()); [EOL]     assertEquals("Four", ps.get(1).text()); [EOL]     Elements ps2 = doc.select("div:eq(0) p:eq(0)"); [EOL]     assertEquals(1, ps2.size()); [EOL]     assertEquals("One", ps2.get(0).text()); [EOL]     assertEquals("p", ps2.get(0).tagName()); [EOL] }
@Test [EOL] public void testPseudoEquals() { [EOL]     Document doc = Jsoup.parse("<div><p>One</p><p>Two</p><p>Three</>p></div><div><p>Four</p>"); [EOL]     Elements ps = doc.select("div p:eq(0)"); [EOL]     assertEquals(2, ps.size()); [EOL]     assertEquals("One", ps.get(0).text()); [EOL]     assertEquals("Four", ps.get(1).text()); [EOL]     Elements ps2 = doc.select("div:eq(0) p:eq(0)"); [EOL]     assertEquals(1, ps2.size()); [EOL]     assertEquals("One", ps2.get(0).text()); [EOL]     assertEquals("p", ps2.get(0).tagName()); [EOL] }
@Test [EOL] public void testPseudoEquals() { [EOL]     Document doc = Jsoup.parse("<div><p>One</p><p>Two</p><p>Three</>p></div><div><p>Four</p>"); [EOL]     Elements ps = doc.select("div p:eq(0)"); [EOL]     assertEquals(2, ps.size()); [EOL]     assertEquals("One", ps.get(0).text()); [EOL]     assertEquals("Four", ps.get(1).text()); [EOL]     Elements ps2 = doc.select("div:eq(0) p:eq(0)"); [EOL]     assertEquals(1, ps2.size()); [EOL]     assertEquals("One", ps2.get(0).text()); [EOL]     assertEquals("p", ps2.get(0).tagName()); [EOL] }
@Test [EOL] public void testPseudoEquals() { [EOL]     Document doc = Jsoup.parse("<div><p>One</p><p>Two</p><p>Three</>p></div><div><p>Four</p>"); [EOL]     Elements ps = doc.select("div p:eq(0)"); [EOL]     assertEquals(2, ps.size()); [EOL]     assertEquals("One", ps.get(0).text()); [EOL]     assertEquals("Four", ps.get(1).text()); [EOL]     Elements ps2 = doc.select("div:eq(0) p:eq(0)"); [EOL]     assertEquals(1, ps2.size()); [EOL]     assertEquals("One", ps2.get(0).text()); [EOL]     assertEquals("p", ps2.get(0).tagName()); [EOL] }
@Test [EOL] public void testPseudoEquals() { [EOL]     Document doc = Jsoup.parse("<div><p>One</p><p>Two</p><p>Three</>p></div><div><p>Four</p>"); [EOL]     Elements ps = doc.select("div p:eq(0)"); [EOL]     assertEquals(2, ps.size()); [EOL]     assertEquals("One", ps.get(0).text()); [EOL]     assertEquals("Four", ps.get(1).text()); [EOL]     Elements ps2 = doc.select("div:eq(0) p:eq(0)"); [EOL]     assertEquals(1, ps2.size()); [EOL]     assertEquals("One", ps2.get(0).text()); [EOL]     assertEquals("p", ps2.get(0).tagName()); [EOL] }
@Test [EOL] public void testPseudoEquals() { [EOL]     Document doc = Jsoup.parse("<div><p>One</p><p>Two</p><p>Three</>p></div><div><p>Four</p>"); [EOL]     Elements ps = doc.select("div p:eq(0)"); [EOL]     assertEquals(2, ps.size()); [EOL]     assertEquals("One", ps.get(0).text()); [EOL]     assertEquals("Four", ps.get(1).text()); [EOL]     Elements ps2 = doc.select("div:eq(0) p:eq(0)"); [EOL]     assertEquals(1, ps2.size()); [EOL]     assertEquals("One", ps2.get(0).text()); [EOL]     assertEquals("p", ps2.get(0).tagName()); [EOL] }
@Test [EOL] public void parentChildStar() { [EOL]     String h = "<div id=1><p>Hello<p><b>there</b></p></div><div id=2><span>Hi</span></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements divChilds = doc.select("div > *"); [EOL]     assertEquals(3, divChilds.size()); [EOL]     assertEquals("p", divChilds.get(0).tagName()); [EOL]     assertEquals("p", divChilds.get(1).tagName()); [EOL]     assertEquals("span", divChilds.get(2).tagName()); [EOL] }
@Test [EOL] public void parentChildStar() { [EOL]     String h = "<div id=1><p>Hello<p><b>there</b></p></div><div id=2><span>Hi</span></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements divChilds = doc.select("div > *"); [EOL]     assertEquals(3, divChilds.size()); [EOL]     assertEquals("p", divChilds.get(0).tagName()); [EOL]     assertEquals("p", divChilds.get(1).tagName()); [EOL]     assertEquals("span", divChilds.get(2).tagName()); [EOL] }
@Test [EOL] public void parentChildStar() { [EOL]     String h = "<div id=1><p>Hello<p><b>there</b></p></div><div id=2><span>Hi</span></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements divChilds = doc.select("div > *"); [EOL]     assertEquals(3, divChilds.size()); [EOL]     assertEquals("p", divChilds.get(0).tagName()); [EOL]     assertEquals("p", divChilds.get(1).tagName()); [EOL]     assertEquals("span", divChilds.get(2).tagName()); [EOL] }
@Test [EOL] public void parentChildStar() { [EOL]     String h = "<div id=1><p>Hello<p><b>there</b></p></div><div id=2><span>Hi</span></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements divChilds = doc.select("div > *"); [EOL]     assertEquals(3, divChilds.size()); [EOL]     assertEquals("p", divChilds.get(0).tagName()); [EOL]     assertEquals("p", divChilds.get(1).tagName()); [EOL]     assertEquals("span", divChilds.get(2).tagName()); [EOL] }
@Test [EOL] public void parentChildStar() { [EOL]     String h = "<div id=1><p>Hello<p><b>there</b></p></div><div id=2><span>Hi</span></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements divChilds = doc.select("div > *"); [EOL]     assertEquals(3, divChilds.size()); [EOL]     assertEquals("p", divChilds.get(0).tagName()); [EOL]     assertEquals("p", divChilds.get(1).tagName()); [EOL]     assertEquals("span", divChilds.get(2).tagName()); [EOL] }
@Test [EOL] public void parentChildStar() { [EOL]     String h = "<div id=1><p>Hello<p><b>there</b></p></div><div id=2><span>Hi</span></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements divChilds = doc.select("div > *"); [EOL]     assertEquals(3, divChilds.size()); [EOL]     assertEquals("p", divChilds.get(0).tagName()); [EOL]     assertEquals("p", divChilds.get(1).tagName()); [EOL]     assertEquals("span", divChilds.get(2).tagName()); [EOL] }
@Test [EOL] public void parentChildStar() { [EOL]     String h = "<div id=1><p>Hello<p><b>there</b></p></div><div id=2><span>Hi</span></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements divChilds = doc.select("div > *"); [EOL]     assertEquals(3, divChilds.size()); [EOL]     assertEquals("p", divChilds.get(0).tagName()); [EOL]     assertEquals("p", divChilds.get(1).tagName()); [EOL]     assertEquals("span", divChilds.get(2).tagName()); [EOL] }
@Test [EOL] public void parentChildStar() { [EOL]     String h = "<div id=1><p>Hello<p><b>there</b></p></div><div id=2><span>Hi</span></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements divChilds = doc.select("div > *"); [EOL]     assertEquals(3, divChilds.size()); [EOL]     assertEquals("p", divChilds.get(0).tagName()); [EOL]     assertEquals("p", divChilds.get(1).tagName()); [EOL]     assertEquals("span", divChilds.get(2).tagName()); [EOL] }
@Test [EOL] public void parentChildStar() { [EOL]     String h = "<div id=1><p>Hello<p><b>there</b></p></div><div id=2><span>Hi</span></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements divChilds = doc.select("div > *"); [EOL]     assertEquals(3, divChilds.size()); [EOL]     assertEquals("p", divChilds.get(0).tagName()); [EOL]     assertEquals("p", divChilds.get(1).tagName()); [EOL]     assertEquals("span", divChilds.get(2).tagName()); [EOL] }
@Test [EOL] public void parentChildStar() { [EOL]     String h = "<div id=1><p>Hello<p><b>there</b></p></div><div id=2><span>Hi</span></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements divChilds = doc.select("div > *"); [EOL]     assertEquals(3, divChilds.size()); [EOL]     assertEquals("p", divChilds.get(0).tagName()); [EOL]     assertEquals("p", divChilds.get(1).tagName()); [EOL]     assertEquals("span", divChilds.get(2).tagName()); [EOL] }
@Test [EOL] public void testNewsHomepage() throws IOException { [EOL]     File in = getFile("/htmltests/news-com-au-home.html"); [EOL]     Document doc = Jsoup.parse(in, "UTF-8", "http://www.news.com.au/"); [EOL]     assertEquals("News.com.au | News from Australia and around the world online | NewsComAu", doc.title()); [EOL]     assertEquals("Brace yourself for Metro meltdown", doc.select(".id1225817868581 h4").text().trim()); [EOL]     Element a = doc.select("a[href=/entertainment/horoscopes]").first(); [EOL]     assertEquals("/entertainment/horoscopes", a.attr("href")); [EOL]     assertEquals("http://www.news.com.au/entertainment/horoscopes", a.attr("abs:href")); [EOL]     Element hs = doc.select("a[href*=naughty-corners-are-a-bad-idea]").first(); [EOL]     assertEquals("http://www.heraldsun.com.au/news/naughty-corners-are-a-bad-idea-for-kids/story-e6frf7jo-1225817899003", hs.attr("href")); [EOL]     assertEquals(hs.attr("href"), hs.attr("abs:href")); [EOL] }
@Test [EOL] public void testNewsHomepage() throws IOException { [EOL]     File in = getFile("/htmltests/news-com-au-home.html"); [EOL]     Document doc = Jsoup.parse(in, "UTF-8", "http://www.news.com.au/"); [EOL]     assertEquals("News.com.au | News from Australia and around the world online | NewsComAu", doc.title()); [EOL]     assertEquals("Brace yourself for Metro meltdown", doc.select(".id1225817868581 h4").text().trim()); [EOL]     Element a = doc.select("a[href=/entertainment/horoscopes]").first(); [EOL]     assertEquals("/entertainment/horoscopes", a.attr("href")); [EOL]     assertEquals("http://www.news.com.au/entertainment/horoscopes", a.attr("abs:href")); [EOL]     Element hs = doc.select("a[href*=naughty-corners-are-a-bad-idea]").first(); [EOL]     assertEquals("http://www.heraldsun.com.au/news/naughty-corners-are-a-bad-idea-for-kids/story-e6frf7jo-1225817899003", hs.attr("href")); [EOL]     assertEquals(hs.attr("href"), hs.attr("abs:href")); [EOL] }
@Test [EOL] public void testNewsHomepage() throws IOException { [EOL]     File in = getFile("/htmltests/news-com-au-home.html"); [EOL]     Document doc = Jsoup.parse(in, "UTF-8", "http://www.news.com.au/"); [EOL]     assertEquals("News.com.au | News from Australia and around the world online | NewsComAu", doc.title()); [EOL]     assertEquals("Brace yourself for Metro meltdown", doc.select(".id1225817868581 h4").text().trim()); [EOL]     Element a = doc.select("a[href=/entertainment/horoscopes]").first(); [EOL]     assertEquals("/entertainment/horoscopes", a.attr("href")); [EOL]     assertEquals("http://www.news.com.au/entertainment/horoscopes", a.attr("abs:href")); [EOL]     Element hs = doc.select("a[href*=naughty-corners-are-a-bad-idea]").first(); [EOL]     assertEquals("http://www.heraldsun.com.au/news/naughty-corners-are-a-bad-idea-for-kids/story-e6frf7jo-1225817899003", hs.attr("href")); [EOL]     assertEquals(hs.attr("href"), hs.attr("abs:href")); [EOL] }
@Test [EOL] public void testNewsHomepage() throws IOException { [EOL]     File in = getFile("/htmltests/news-com-au-home.html"); [EOL]     Document doc = Jsoup.parse(in, "UTF-8", "http://www.news.com.au/"); [EOL]     assertEquals("News.com.au | News from Australia and around the world online | NewsComAu", doc.title()); [EOL]     assertEquals("Brace yourself for Metro meltdown", doc.select(".id1225817868581 h4").text().trim()); [EOL]     Element a = doc.select("a[href=/entertainment/horoscopes]").first(); [EOL]     assertEquals("/entertainment/horoscopes", a.attr("href")); [EOL]     assertEquals("http://www.news.com.au/entertainment/horoscopes", a.attr("abs:href")); [EOL]     Element hs = doc.select("a[href*=naughty-corners-are-a-bad-idea]").first(); [EOL]     assertEquals("http://www.heraldsun.com.au/news/naughty-corners-are-a-bad-idea-for-kids/story-e6frf7jo-1225817899003", hs.attr("href")); [EOL]     assertEquals(hs.attr("href"), hs.attr("abs:href")); [EOL] }
@Test [EOL] public void testOuterHtml() { [EOL]     Document doc = Jsoup.parse("<div title='Tags &amp;c.'><img src=foo.png><p><!-- comment -->Hello<p>there"); [EOL]     assertEquals("<html><head></head><body><div title=\"Tags &amp;c.\"><img src=\"foo.png\" /><p><!-- comment -->Hello</p><p>there</p></div></body></html>", TextUtil.stripNewlines(doc.outerHtml())); [EOL] }
@Test [EOL] public void testNewsHomepage() throws IOException { [EOL]     File in = getFile("/htmltests/news-com-au-home.html"); [EOL]     Document doc = Jsoup.parse(in, "UTF-8", "http://www.news.com.au/"); [EOL]     assertEquals("News.com.au | News from Australia and around the world online | NewsComAu", doc.title()); [EOL]     assertEquals("Brace yourself for Metro meltdown", doc.select(".id1225817868581 h4").text().trim()); [EOL]     Element a = doc.select("a[href=/entertainment/horoscopes]").first(); [EOL]     assertEquals("/entertainment/horoscopes", a.attr("href")); [EOL]     assertEquals("http://www.news.com.au/entertainment/horoscopes", a.attr("abs:href")); [EOL]     Element hs = doc.select("a[href*=naughty-corners-are-a-bad-idea]").first(); [EOL]     assertEquals("http://www.heraldsun.com.au/news/naughty-corners-are-a-bad-idea-for-kids/story-e6frf7jo-1225817899003", hs.attr("href")); [EOL]     assertEquals(hs.attr("href"), hs.attr("abs:href")); [EOL] }
@Test [EOL] public void testNewsHomepage() throws IOException { [EOL]     File in = getFile("/htmltests/news-com-au-home.html"); [EOL]     Document doc = Jsoup.parse(in, "UTF-8", "http://www.news.com.au/"); [EOL]     assertEquals("News.com.au | News from Australia and around the world online | NewsComAu", doc.title()); [EOL]     assertEquals("Brace yourself for Metro meltdown", doc.select(".id1225817868581 h4").text().trim()); [EOL]     Element a = doc.select("a[href=/entertainment/horoscopes]").first(); [EOL]     assertEquals("/entertainment/horoscopes", a.attr("href")); [EOL]     assertEquals("http://www.news.com.au/entertainment/horoscopes", a.attr("abs:href")); [EOL]     Element hs = doc.select("a[href*=naughty-corners-are-a-bad-idea]").first(); [EOL]     assertEquals("http://www.heraldsun.com.au/news/naughty-corners-are-a-bad-idea-for-kids/story-e6frf7jo-1225817899003", hs.attr("href")); [EOL]     assertEquals(hs.attr("href"), hs.attr("abs:href")); [EOL] }
@Test [EOL] public void testNewsHomepage() throws IOException { [EOL]     File in = getFile("/htmltests/news-com-au-home.html"); [EOL]     Document doc = Jsoup.parse(in, "UTF-8", "http://www.news.com.au/"); [EOL]     assertEquals("News.com.au | News from Australia and around the world online | NewsComAu", doc.title()); [EOL]     assertEquals("Brace yourself for Metro meltdown", doc.select(".id1225817868581 h4").text().trim()); [EOL]     Element a = doc.select("a[href=/entertainment/horoscopes]").first(); [EOL]     assertEquals("/entertainment/horoscopes", a.attr("href")); [EOL]     assertEquals("http://www.news.com.au/entertainment/horoscopes", a.attr("abs:href")); [EOL]     Element hs = doc.select("a[href*=naughty-corners-are-a-bad-idea]").first(); [EOL]     assertEquals("http://www.heraldsun.com.au/news/naughty-corners-are-a-bad-idea-for-kids/story-e6frf7jo-1225817899003", hs.attr("href")); [EOL]     assertEquals(hs.attr("href"), hs.attr("abs:href")); [EOL] }
@Test [EOL] public void testNewsHomepage() throws IOException { [EOL]     File in = getFile("/htmltests/news-com-au-home.html"); [EOL]     Document doc = Jsoup.parse(in, "UTF-8", "http://www.news.com.au/"); [EOL]     assertEquals("News.com.au | News from Australia and around the world online | NewsComAu", doc.title()); [EOL]     assertEquals("Brace yourself for Metro meltdown", doc.select(".id1225817868581 h4").text().trim()); [EOL]     Element a = doc.select("a[href=/entertainment/horoscopes]").first(); [EOL]     assertEquals("/entertainment/horoscopes", a.attr("href")); [EOL]     assertEquals("http://www.news.com.au/entertainment/horoscopes", a.attr("abs:href")); [EOL]     Element hs = doc.select("a[href*=naughty-corners-are-a-bad-idea]").first(); [EOL]     assertEquals("http://www.heraldsun.com.au/news/naughty-corners-are-a-bad-idea-for-kids/story-e6frf7jo-1225817899003", hs.attr("href")); [EOL]     assertEquals(hs.attr("href"), hs.attr("abs:href")); [EOL] }
@Test [EOL] public void testNewsHomepage() throws IOException { [EOL]     File in = getFile("/htmltests/news-com-au-home.html"); [EOL]     Document doc = Jsoup.parse(in, "UTF-8", "http://www.news.com.au/"); [EOL]     assertEquals("News.com.au | News from Australia and around the world online | NewsComAu", doc.title()); [EOL]     assertEquals("Brace yourself for Metro meltdown", doc.select(".id1225817868581 h4").text().trim()); [EOL]     Element a = doc.select("a[href=/entertainment/horoscopes]").first(); [EOL]     assertEquals("/entertainment/horoscopes", a.attr("href")); [EOL]     assertEquals("http://www.news.com.au/entertainment/horoscopes", a.attr("abs:href")); [EOL]     Element hs = doc.select("a[href*=naughty-corners-are-a-bad-idea]").first(); [EOL]     assertEquals("http://www.heraldsun.com.au/news/naughty-corners-are-a-bad-idea-for-kids/story-e6frf7jo-1225817899003", hs.attr("href")); [EOL]     assertEquals(hs.attr("href"), hs.attr("abs:href")); [EOL] }
@Test [EOL] public void testIsValid() { [EOL]     String ok = "<p>Test <b><a href='http://example.com/'>OK</a></b></p>"; [EOL]     String nok1 = "<p><script></script>Not <b>OK</b></p>"; [EOL]     String nok2 = "<p align=right>Test Not <b>OK</b></p>"; [EOL]     assertTrue(Jsoup.isValid(ok, Whitelist.basic())); [EOL]     assertFalse(Jsoup.isValid(nok1, Whitelist.basic())); [EOL]     assertFalse(Jsoup.isValid(nok2, Whitelist.basic())); [EOL] }
@Test [EOL] public void testNewsHomepage() throws IOException { [EOL]     File in = getFile("/htmltests/news-com-au-home.html"); [EOL]     Document doc = Jsoup.parse(in, "UTF-8", "http://www.news.com.au/"); [EOL]     assertEquals("News.com.au | News from Australia and around the world online | NewsComAu", doc.title()); [EOL]     assertEquals("Brace yourself for Metro meltdown", doc.select(".id1225817868581 h4").text().trim()); [EOL]     Element a = doc.select("a[href=/entertainment/horoscopes]").first(); [EOL]     assertEquals("/entertainment/horoscopes", a.attr("href")); [EOL]     assertEquals("http://www.news.com.au/entertainment/horoscopes", a.attr("abs:href")); [EOL]     Element hs = doc.select("a[href*=naughty-corners-are-a-bad-idea]").first(); [EOL]     assertEquals("http://www.heraldsun.com.au/news/naughty-corners-are-a-bad-idea-for-kids/story-e6frf7jo-1225817899003", hs.attr("href")); [EOL]     assertEquals(hs.attr("href"), hs.attr("abs:href")); [EOL] }
@Test [EOL] public void handlesUnknownInlineTags() { [EOL]     String h = "<p><cust>Test</cust></p><p><cust><cust>Test</cust></cust></p>"; [EOL]     Document doc = Jsoup.parseBodyFragment(h); [EOL]     String out = doc.body().html(); [EOL]     assertEquals(h, TextUtil.stripNewlines(out)); [EOL] }
@Test [EOL] public void handlesUnknownInlineTags() { [EOL]     String h = "<p><cust>Test</cust></p><p><cust><cust>Test</cust></cust></p>"; [EOL]     Document doc = Jsoup.parseBodyFragment(h); [EOL]     String out = doc.body().html(); [EOL]     assertEquals(h, TextUtil.stripNewlines(out)); [EOL] }
@Test [EOL] public void handlesUnknownInlineTags() { [EOL]     String h = "<p><cust>Test</cust></p><p><cust><cust>Test</cust></cust></p>"; [EOL]     Document doc = Jsoup.parseBodyFragment(h); [EOL]     String out = doc.body().html(); [EOL]     assertEquals(h, TextUtil.stripNewlines(out)); [EOL] }
@Test [EOL] public void handlesUnknownInlineTags() { [EOL]     String h = "<p><cust>Test</cust></p><p><cust><cust>Test</cust></cust></p>"; [EOL]     Document doc = Jsoup.parseBodyFragment(h); [EOL]     String out = doc.body().html(); [EOL]     assertEquals(h, TextUtil.stripNewlines(out)); [EOL] }
@Test [EOL] public void handlesUnknownInlineTags() { [EOL]     String h = "<p><cust>Test</cust></p><p><cust><cust>Test</cust></cust></p>"; [EOL]     Document doc = Jsoup.parseBodyFragment(h); [EOL]     String out = doc.body().html(); [EOL]     assertEquals(h, TextUtil.stripNewlines(out)); [EOL] }
@Test [EOL] public void handlesUnknownInlineTags() { [EOL]     String h = "<p><cust>Test</cust></p><p><cust><cust>Test</cust></cust></p>"; [EOL]     Document doc = Jsoup.parseBodyFragment(h); [EOL]     String out = doc.body().html(); [EOL]     assertEquals(h, TextUtil.stripNewlines(out)); [EOL] }
@Test [EOL] public void testNewsHomepage() throws IOException { [EOL]     File in = getFile("/htmltests/news-com-au-home.html"); [EOL]     Document doc = Jsoup.parse(in, "UTF-8", "http://www.news.com.au/"); [EOL]     assertEquals("News.com.au | News from Australia and around the world online | NewsComAu", doc.title()); [EOL]     assertEquals("Brace yourself for Metro meltdown", doc.select(".id1225817868581 h4").text().trim()); [EOL]     Element a = doc.select("a[href=/entertainment/horoscopes]").first(); [EOL]     assertEquals("/entertainment/horoscopes", a.attr("href")); [EOL]     assertEquals("http://www.news.com.au/entertainment/horoscopes", a.attr("abs:href")); [EOL]     Element hs = doc.select("a[href*=naughty-corners-are-a-bad-idea]").first(); [EOL]     assertEquals("http://www.heraldsun.com.au/news/naughty-corners-are-a-bad-idea-for-kids/story-e6frf7jo-1225817899003", hs.attr("href")); [EOL]     assertEquals(hs.attr("href"), hs.attr("abs:href")); [EOL] }
@Test [EOL] public void testNewsHomepage() throws IOException { [EOL]     File in = getFile("/htmltests/news-com-au-home.html"); [EOL]     Document doc = Jsoup.parse(in, "UTF-8", "http://www.news.com.au/"); [EOL]     assertEquals("News.com.au | News from Australia and around the world online | NewsComAu", doc.title()); [EOL]     assertEquals("Brace yourself for Metro meltdown", doc.select(".id1225817868581 h4").text().trim()); [EOL]     Element a = doc.select("a[href=/entertainment/horoscopes]").first(); [EOL]     assertEquals("/entertainment/horoscopes", a.attr("href")); [EOL]     assertEquals("http://www.news.com.au/entertainment/horoscopes", a.attr("abs:href")); [EOL]     Element hs = doc.select("a[href*=naughty-corners-are-a-bad-idea]").first(); [EOL]     assertEquals("http://www.heraldsun.com.au/news/naughty-corners-are-a-bad-idea-for-kids/story-e6frf7jo-1225817899003", hs.attr("href")); [EOL]     assertEquals(hs.attr("href"), hs.attr("abs:href")); [EOL] }
@Test [EOL] public void testNewsHomepage() throws IOException { [EOL]     File in = getFile("/htmltests/news-com-au-home.html"); [EOL]     Document doc = Jsoup.parse(in, "UTF-8", "http://www.news.com.au/"); [EOL]     assertEquals("News.com.au | News from Australia and around the world online | NewsComAu", doc.title()); [EOL]     assertEquals("Brace yourself for Metro meltdown", doc.select(".id1225817868581 h4").text().trim()); [EOL]     Element a = doc.select("a[href=/entertainment/horoscopes]").first(); [EOL]     assertEquals("/entertainment/horoscopes", a.attr("href")); [EOL]     assertEquals("http://www.news.com.au/entertainment/horoscopes", a.attr("abs:href")); [EOL]     Element hs = doc.select("a[href*=naughty-corners-are-a-bad-idea]").first(); [EOL]     assertEquals("http://www.heraldsun.com.au/news/naughty-corners-are-a-bad-idea-for-kids/story-e6frf7jo-1225817899003", hs.attr("href")); [EOL]     assertEquals(hs.attr("href"), hs.attr("abs:href")); [EOL] }
@Test [EOL] public void testNewsHomepage() throws IOException { [EOL]     File in = getFile("/htmltests/news-com-au-home.html"); [EOL]     Document doc = Jsoup.parse(in, "UTF-8", "http://www.news.com.au/"); [EOL]     assertEquals("News.com.au | News from Australia and around the world online | NewsComAu", doc.title()); [EOL]     assertEquals("Brace yourself for Metro meltdown", doc.select(".id1225817868581 h4").text().trim()); [EOL]     Element a = doc.select("a[href=/entertainment/horoscopes]").first(); [EOL]     assertEquals("/entertainment/horoscopes", a.attr("href")); [EOL]     assertEquals("http://www.news.com.au/entertainment/horoscopes", a.attr("abs:href")); [EOL]     Element hs = doc.select("a[href*=naughty-corners-are-a-bad-idea]").first(); [EOL]     assertEquals("http://www.heraldsun.com.au/news/naughty-corners-are-a-bad-idea-for-kids/story-e6frf7jo-1225817899003", hs.attr("href")); [EOL]     assertEquals(hs.attr("href"), hs.attr("abs:href")); [EOL] }
@Test [EOL] public void testNewsHomepage() throws IOException { [EOL]     File in = getFile("/htmltests/news-com-au-home.html"); [EOL]     Document doc = Jsoup.parse(in, "UTF-8", "http://www.news.com.au/"); [EOL]     assertEquals("News.com.au | News from Australia and around the world online | NewsComAu", doc.title()); [EOL]     assertEquals("Brace yourself for Metro meltdown", doc.select(".id1225817868581 h4").text().trim()); [EOL]     Element a = doc.select("a[href=/entertainment/horoscopes]").first(); [EOL]     assertEquals("/entertainment/horoscopes", a.attr("href")); [EOL]     assertEquals("http://www.news.com.au/entertainment/horoscopes", a.attr("abs:href")); [EOL]     Element hs = doc.select("a[href*=naughty-corners-are-a-bad-idea]").first(); [EOL]     assertEquals("http://www.heraldsun.com.au/news/naughty-corners-are-a-bad-idea-for-kids/story-e6frf7jo-1225817899003", hs.attr("href")); [EOL]     assertEquals(hs.attr("href"), hs.attr("abs:href")); [EOL] }
@Test [EOL] public void testNewsHomepage() throws IOException { [EOL]     File in = getFile("/htmltests/news-com-au-home.html"); [EOL]     Document doc = Jsoup.parse(in, "UTF-8", "http://www.news.com.au/"); [EOL]     assertEquals("News.com.au | News from Australia and around the world online | NewsComAu", doc.title()); [EOL]     assertEquals("Brace yourself for Metro meltdown", doc.select(".id1225817868581 h4").text().trim()); [EOL]     Element a = doc.select("a[href=/entertainment/horoscopes]").first(); [EOL]     assertEquals("/entertainment/horoscopes", a.attr("href")); [EOL]     assertEquals("http://www.news.com.au/entertainment/horoscopes", a.attr("abs:href")); [EOL]     Element hs = doc.select("a[href*=naughty-corners-are-a-bad-idea]").first(); [EOL]     assertEquals("http://www.heraldsun.com.au/news/naughty-corners-are-a-bad-idea-for-kids/story-e6frf7jo-1225817899003", hs.attr("href")); [EOL]     assertEquals(hs.attr("href"), hs.attr("abs:href")); [EOL] }
@Test [EOL] public void attributes() { [EOL]     String h = "<p title=foo><p title=bar><p class=foo><p class=bar>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements withTitle = doc.select("p[title]"); [EOL]     assertEquals(2, withTitle.size()); [EOL]     assertTrue(withTitle.hasAttr("title")); [EOL]     assertFalse(withTitle.hasAttr("class")); [EOL]     assertEquals("foo", withTitle.attr("title")); [EOL]     withTitle.removeAttr("title"); [EOL]     assertEquals(2, withTitle.size()); [EOL]     assertEquals(0, doc.select("p[title]").size()); [EOL]     Elements ps = doc.select("p").attr("style", "classy"); [EOL]     assertEquals(4, ps.size()); [EOL]     assertEquals("classy", ps.last().attr("style")); [EOL]     assertEquals("bar", ps.last().attr("class")); [EOL] }
@Test [EOL] public void attributes() { [EOL]     String h = "<p title=foo><p title=bar><p class=foo><p class=bar>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements withTitle = doc.select("p[title]"); [EOL]     assertEquals(2, withTitle.size()); [EOL]     assertTrue(withTitle.hasAttr("title")); [EOL]     assertFalse(withTitle.hasAttr("class")); [EOL]     assertEquals("foo", withTitle.attr("title")); [EOL]     withTitle.removeAttr("title"); [EOL]     assertEquals(2, withTitle.size()); [EOL]     assertEquals(0, doc.select("p[title]").size()); [EOL]     Elements ps = doc.select("p").attr("style", "classy"); [EOL]     assertEquals(4, ps.size()); [EOL]     assertEquals("classy", ps.last().attr("style")); [EOL]     assertEquals("bar", ps.last().attr("class")); [EOL] }
@Test [EOL] public void attributes() { [EOL]     String h = "<p title=foo><p title=bar><p class=foo><p class=bar>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements withTitle = doc.select("p[title]"); [EOL]     assertEquals(2, withTitle.size()); [EOL]     assertTrue(withTitle.hasAttr("title")); [EOL]     assertFalse(withTitle.hasAttr("class")); [EOL]     assertEquals("foo", withTitle.attr("title")); [EOL]     withTitle.removeAttr("title"); [EOL]     assertEquals(2, withTitle.size()); [EOL]     assertEquals(0, doc.select("p[title]").size()); [EOL]     Elements ps = doc.select("p").attr("style", "classy"); [EOL]     assertEquals(4, ps.size()); [EOL]     assertEquals("classy", ps.last().attr("style")); [EOL]     assertEquals("bar", ps.last().attr("class")); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse("<p>One</p><p>Two</p><p>Three</p>"); [EOL]     Elements ps = doc.select("p"); [EOL]     ps.prepend("<b>Bold</b>").append("<i>Ital</i>"); [EOL]     assertEquals("<p><b>Bold</b>Two<i>Ital</i></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html("<span>Gone</span>"); [EOL]     assertEquals("<p><span>Gone</span></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse("<p>One</p><p>Two</p><p>Three</p>"); [EOL]     Elements ps = doc.select("p"); [EOL]     ps.prepend("<b>Bold</b>").append("<i>Ital</i>"); [EOL]     assertEquals("<p><b>Bold</b>Two<i>Ital</i></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html("<span>Gone</span>"); [EOL]     assertEquals("<p><span>Gone</span></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse("<p>One</p><p>Two</p><p>Three</p>"); [EOL]     Elements ps = doc.select("p"); [EOL]     ps.prepend("<b>Bold</b>").append("<i>Ital</i>"); [EOL]     assertEquals("<p><b>Bold</b>Two<i>Ital</i></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html("<span>Gone</span>"); [EOL]     assertEquals("<p><span>Gone</span></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse("<p>One</p><p>Two</p><p>Three</p>"); [EOL]     Elements ps = doc.select("p"); [EOL]     ps.prepend("<b>Bold</b>").append("<i>Ital</i>"); [EOL]     assertEquals("<p><b>Bold</b>Two<i>Ital</i></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html("<span>Gone</span>"); [EOL]     assertEquals("<p><span>Gone</span></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse("<p>One</p><p>Two</p><p>Three</p>"); [EOL]     Elements ps = doc.select("p"); [EOL]     ps.prepend("<b>Bold</b>").append("<i>Ital</i>"); [EOL]     assertEquals("<p><b>Bold</b>Two<i>Ital</i></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html("<span>Gone</span>"); [EOL]     assertEquals("<p><span>Gone</span></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse("<p>One</p><p>Two</p><p>Three</p>"); [EOL]     Elements ps = doc.select("p"); [EOL]     ps.prepend("<b>Bold</b>").append("<i>Ital</i>"); [EOL]     assertEquals("<p><b>Bold</b>Two<i>Ital</i></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html("<span>Gone</span>"); [EOL]     assertEquals("<p><span>Gone</span></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse("<p>One</p><p>Two</p><p>Three</p>"); [EOL]     Elements ps = doc.select("p"); [EOL]     ps.prepend("<b>Bold</b>").append("<i>Ital</i>"); [EOL]     assertEquals("<p><b>Bold</b>Two<i>Ital</i></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html("<span>Gone</span>"); [EOL]     assertEquals("<p><span>Gone</span></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse("<p>One</p><p>Two</p><p>Three</p>"); [EOL]     Elements ps = doc.select("p"); [EOL]     ps.prepend("<b>Bold</b>").append("<i>Ital</i>"); [EOL]     assertEquals("<p><b>Bold</b>Two<i>Ital</i></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html("<span>Gone</span>"); [EOL]     assertEquals("<p><span>Gone</span></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse("<p>One</p><p>Two</p><p>Three</p>"); [EOL]     Elements ps = doc.select("p"); [EOL]     ps.prepend("<b>Bold</b>").append("<i>Ital</i>"); [EOL]     assertEquals("<p><b>Bold</b>Two<i>Ital</i></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html("<span>Gone</span>"); [EOL]     assertEquals("<p><span>Gone</span></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse("<p>One</p><p>Two</p><p>Three</p>"); [EOL]     Elements ps = doc.select("p"); [EOL]     ps.prepend("<b>Bold</b>").append("<i>Ital</i>"); [EOL]     assertEquals("<p><b>Bold</b>Two<i>Ital</i></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html("<span>Gone</span>"); [EOL]     assertEquals("<p><span>Gone</span></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse("<p>One</p><p>Two</p><p>Three</p>"); [EOL]     Elements ps = doc.select("p"); [EOL]     ps.prepend("<b>Bold</b>").append("<i>Ital</i>"); [EOL]     assertEquals("<p><b>Bold</b>Two<i>Ital</i></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html("<span>Gone</span>"); [EOL]     assertEquals("<p><span>Gone</span></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse("<p>One</p><p>Two</p><p>Three</p>"); [EOL]     Elements ps = doc.select("p"); [EOL]     ps.prepend("<b>Bold</b>").append("<i>Ital</i>"); [EOL]     assertEquals("<p><b>Bold</b>Two<i>Ital</i></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html("<span>Gone</span>"); [EOL]     assertEquals("<p><span>Gone</span></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse("<p>One</p><p>Two</p><p>Three</p>"); [EOL]     Elements ps = doc.select("p"); [EOL]     ps.prepend("<b>Bold</b>").append("<i>Ital</i>"); [EOL]     assertEquals("<p><b>Bold</b>Two<i>Ital</i></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html("<span>Gone</span>"); [EOL]     assertEquals("<p><span>Gone</span></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse("<p>One</p><p>Two</p><p>Three</p>"); [EOL]     Elements ps = doc.select("p"); [EOL]     ps.prepend("<b>Bold</b>").append("<i>Ital</i>"); [EOL]     assertEquals("<p><b>Bold</b>Two<i>Ital</i></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html("<span>Gone</span>"); [EOL]     assertEquals("<p><span>Gone</span></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse("<p>One</p><p>Two</p><p>Three</p>"); [EOL]     Elements ps = doc.select("p"); [EOL]     ps.prepend("<b>Bold</b>").append("<i>Ital</i>"); [EOL]     assertEquals("<p><b>Bold</b>Two<i>Ital</i></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html("<span>Gone</span>"); [EOL]     assertEquals("<p><span>Gone</span></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse("<p>One</p><p>Two</p><p>Three</p>"); [EOL]     Elements ps = doc.select("p"); [EOL]     ps.prepend("<b>Bold</b>").append("<i>Ital</i>"); [EOL]     assertEquals("<p><b>Bold</b>Two<i>Ital</i></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html("<span>Gone</span>"); [EOL]     assertEquals("<p><span>Gone</span></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse("<p>One</p><p>Two</p><p>Three</p>"); [EOL]     Elements ps = doc.select("p"); [EOL]     ps.prepend("<b>Bold</b>").append("<i>Ital</i>"); [EOL]     assertEquals("<p><b>Bold</b>Two<i>Ital</i></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html("<span>Gone</span>"); [EOL]     assertEquals("<p><span>Gone</span></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse("<p>One</p><p>Two</p><p>Three</p>"); [EOL]     Elements ps = doc.select("p"); [EOL]     ps.prepend("<b>Bold</b>").append("<i>Ital</i>"); [EOL]     assertEquals("<p><b>Bold</b>Two<i>Ital</i></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html("<span>Gone</span>"); [EOL]     assertEquals("<p><span>Gone</span></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse("<p>One</p><p>Two</p><p>Three</p>"); [EOL]     Elements ps = doc.select("p"); [EOL]     ps.prepend("<b>Bold</b>").append("<i>Ital</i>"); [EOL]     assertEquals("<p><b>Bold</b>Two<i>Ital</i></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html("<span>Gone</span>"); [EOL]     assertEquals("<p><span>Gone</span></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse("<p>One</p><p>Two</p><p>Three</p>"); [EOL]     Elements ps = doc.select("p"); [EOL]     ps.prepend("<b>Bold</b>").append("<i>Ital</i>"); [EOL]     assertEquals("<p><b>Bold</b>Two<i>Ital</i></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html("<span>Gone</span>"); [EOL]     assertEquals("<p><span>Gone</span></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse("<p>One</p><p>Two</p><p>Three</p>"); [EOL]     Elements ps = doc.select("p"); [EOL]     ps.prepend("<b>Bold</b>").append("<i>Ital</i>"); [EOL]     assertEquals("<p><b>Bold</b>Two<i>Ital</i></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html("<span>Gone</span>"); [EOL]     assertEquals("<p><span>Gone</span></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void testWrap() { [EOL]     Document doc = Jsoup.parse("<div><p>Hello</p><p>There</p></div>"); [EOL]     Element p = doc.select("p").first(); [EOL]     p.wrap("<div class='head'></div>"); [EOL]     assertEquals("<div><div class=\"head\"><div class=\"foo\" /></div><p>Hello</p></div><p>There</p></div>", TextUtil.stripNewlines(doc.body().html())); [EOL]     Element ret = p.wrap("<div><div class=foo></div><p>What?</p></div>"); [EOL]     assertEquals("<div><div class=\"head\"><div class=\"foo\" /></div><p>Hello</p></div><p>What?</p></div><p>There</p></div><p>What?</p></div>", TextUtil.stripNewlines(doc.body().html())); [EOL]     assertEquals(ret, p); [EOL] }
@Test [EOL] public void testWrap() { [EOL]     Document doc = Jsoup.parse("<div><p>Hello</p><p>There</p></div>"); [EOL]     Element p = doc.select("p").first(); [EOL]     p.wrap("<div class='head'></div>"); [EOL]     assertEquals("<div><div class=\"head\"><div><div class=\"foo\" /></div><p>Hello</p></div></div><p>There</p></div>", TextUtil.stripNewlines(doc.body().html())); [EOL]     Element ret = p.wrap("<div><div class=foo></div><p>What?</p></div>"); [EOL]     assertEquals("<div><div class=\"head\"><div><div class=\"foo\" /></div><p>Hello</p></div><p>What?</p></div><p>There</p></div></div><p>What?</p></div>", TextUtil.stripNewlines(doc.body().html())); [EOL]     assertEquals(ret, p); [EOL] }
@Test [EOL] public void testWrap() { [EOL]     Document doc = Jsoup.parse("<div><p>Hello</p><p>There</p></div>"); [EOL]     Element p = doc.select("p").first(); [EOL]     p.wrap("<div class='head'></div>"); [EOL]     assertEquals("<div><div class=\"head\"><div><div class=\"foo\" /></div><p>Hello</p></div></div><p>There</p></div>", TextUtil.stripNewlines(doc.body().html())); [EOL]     Element ret = p.wrap("<div><div class=foo></div><p>What?</p></div>"); [EOL]     assertEquals("<div><div class=\"head\"><div><div class=\"foo\" /></div><p>Hello</p></div><p>What?</p></div><p>There</p></div></div><p>What?</p></div>", TextUtil.stripNewlines(doc.body().html())); [EOL]     assertEquals(ret, p); [EOL] }
@Test [EOL] public void testWrap() { [EOL]     Document doc = Jsoup.parse("<div><p>Hello</p><p>There</p></div>"); [EOL]     Element p = doc.select("p").first(); [EOL]     p.wrap("<div class='head'></div>"); [EOL]     assertEquals("<div><div class=\"head\"><div><div class=\"foo\" /></div><p>Hello</p></div></div><p>There</p></div>", TextUtil.stripNewlines(doc.body().html())); [EOL]     Element ret = p.wrap("<div><div class=foo></div><p>What?</p></div>"); [EOL]     assertEquals("<div><div class=\"head\"><div><div class=\"foo\" /></div><p>Hello</p></div><p>What?</p></div><p>There</p></div></div><p>What?</p></div>", TextUtil.stripNewlines(doc.body().html())); [EOL]     assertEquals(ret, p); [EOL] }
@Test [EOL] public void testPreviousElementSibling() { [EOL]     Document doc = Jsoup.parse("<div><p>Hello<p id=1>there<p>this<p>is<p>an<p id=last>element</div>"); [EOL]     Element p = doc.getElementById("1"); [EOL]     assertEquals("there", p.text()); [EOL]     assertEquals("Hello", p.previousElementSibling().text()); [EOL]     assertEquals("this", p.nextElementSibling().text()); [EOL]     assertEquals("Hello", p.firstElementSibling().text()); [EOL]     assertEquals("element", p.lastElementSibling().text()); [EOL] }
@Test [EOL] public void testGetSiblings() { [EOL]     Document doc = Jsoup.parse("<div><p>Hello<p id=1>there<p>this<p>is<p>an<p id=last>element</div>"); [EOL]     Element p = doc.getElementById("1"); [EOL]     assertEquals("there", p.text()); [EOL]     assertEquals("Hello", p.previousElementSibling().text()); [EOL]     assertEquals("this", p.nextElementSibling().text()); [EOL]     assertEquals("Hello", p.firstElementSibling().text()); [EOL]     assertEquals("element", p.lastElementSibling().text()); [EOL] }
@Test [EOL] public void testPreviousElementSibling() { [EOL]     Document doc = Jsoup.parse("<div><p>Hello<p id=1>there<p>this<p>is<p>an<p id=last>element</div>"); [EOL]     Element p = doc.getElementById("1"); [EOL]     assertEquals("there", p.text()); [EOL]     assertEquals("Hello", p.previousElementSibling().text()); [EOL]     assertEquals("this", p.nextElementSibling().text()); [EOL]     assertEquals("Hello", p.firstElementSibling().text()); [EOL]     assertEquals("element", p.lastElementSibling().text()); [EOL] }
@Test [EOL] public void testPreviousElementSibling() { [EOL]     Document doc = Jsoup.parse("<div><p>Hello<p id=1>there<p>this<p>is<p>an<p id=last>element</div>"); [EOL]     Element p = doc.getElementById("1"); [EOL]     assertEquals("there", p.text()); [EOL]     assertEquals("Hello", p.previousElementSibling().text()); [EOL]     assertEquals("this", p.nextElementSibling().text()); [EOL]     assertEquals("Hello", p.firstElementSibling().text()); [EOL]     assertEquals("element", p.lastElementSibling().text()); [EOL] }
@Test [EOL] public void testPreviousElementSibling() { [EOL]     Document doc = Jsoup.parse("<div><p>Hello<p id=1>there<p>this<p>is<p>an<p id=last>element</div>"); [EOL]     Element p = doc.getElementById("1"); [EOL]     assertEquals("there", p.text()); [EOL]     assertEquals("Hello", p.previousElementSibling().text()); [EOL]     assertEquals("this", p.nextElementSibling().text()); [EOL]     assertEquals("Hello", p.firstElementSibling().text()); [EOL]     assertEquals("element", p.lastElementSibling().text()); [EOL] }
@Test [EOL] public void testGetSiblings() { [EOL]     Document doc = Jsoup.parse("<div><p>Hello<p id=1>there<p>this<p>is<p>an<p id=last>element</div>"); [EOL]     Element p = doc.getElementById("1"); [EOL]     assertEquals("there", p.text()); [EOL]     assertEquals("Hello", p.previousElementSibling().text()); [EOL]     assertEquals("this", p.nextElementSibling().text()); [EOL]     assertEquals("Hello", p.firstElementSibling().text()); [EOL]     assertEquals("element", p.lastElementSibling().text()); [EOL] }
@Test [EOL] public void testGetSiblings() { [EOL]     Document doc = Jsoup.parse("<div><p>Hello<p id=1>there<p>this<p>is<p>an<p id=last>element</div>"); [EOL]     Element p = doc.getElementById("1"); [EOL]     assertEquals("there", p.text()); [EOL]     assertEquals("Hello", p.previousElementSibling().text()); [EOL]     assertEquals("this", p.nextElementSibling().text()); [EOL]     assertEquals("Hello", p.firstElementSibling().text()); [EOL]     assertEquals("element", p.lastElementSibling().text()); [EOL] }
@Test [EOL] public void testNewsHomepage() throws IOException { [EOL]     File in = getFile("/htmltests/news-com-au-home.html"); [EOL]     Document doc = Jsoup.parse(in, "UTF-8", "http://www.news.com.au/"); [EOL]     assertEquals("News.com.au | News from Australia and around the world online | NewsComAu", doc.title()); [EOL]     assertEquals("Brace yourself for Metro meltdown", doc.select(".id1225817868581 h4").text().trim()); [EOL]     Element a = doc.select("a[href=/entertainment/horoscopes]").first(); [EOL]     assertEquals("/entertainment/horoscopes", a.attr("href")); [EOL]     assertEquals("http://www.news.com.au/entertainment/horoscopes", a.attr("abs:href")); [EOL]     Element hs = doc.select("a[href*=naughty-corners-are-a-bad-idea]").first(); [EOL]     assertEquals("http://www.heraldsun.com.au/news/naughty-corners-are-a-bad-idea-for-kids/story-e6frf7jo-1225817899003", hs.attr("href")); [EOL]     assertEquals(hs.attr("href"), hs.attr("abs:href")); [EOL] }
@Test [EOL] public void testNewsHomepage() throws IOException { [EOL]     File in = getFile("/htmltests/news-com-au-home.html"); [EOL]     Document doc = Jsoup.parse(in, "UTF-8", "http://www.news.com.au/"); [EOL]     assertEquals("News.com.au | News from Australia and around the world online | NewsComAu", doc.title()); [EOL]     assertEquals("Brace yourself for Metro meltdown", doc.select(".id1225817868581 h4").text().trim()); [EOL]     Element a = doc.select("a[href=/entertainment/horoscopes]").first(); [EOL]     assertEquals("/entertainment/horoscopes", a.attr("href")); [EOL]     assertEquals("http://www.news.com.au/entertainment/horoscopes", a.attr("abs:href")); [EOL]     Element hs = doc.select("a[href*=naughty-corners-are-a-bad-idea]").first(); [EOL]     assertEquals("http://www.heraldsun.com.au/news/naughty-corners-are-a-bad-idea-for-kids/story-e6frf7jo-1225817899003", hs.attr("href")); [EOL]     assertEquals(hs.attr("href"), hs.attr("abs:href")); [EOL] }
@Test [EOL] public void testNewsHomepage() throws IOException { [EOL]     File in = getFile("/htmltests/news-com-au-home.html"); [EOL]     Document doc = Jsoup.parse(in, "UTF-8", "http://www.news.com.au/"); [EOL]     assertEquals("News.com.au | News from Australia and around the world online | NewsComAu", doc.title()); [EOL]     assertEquals("Brace yourself for Metro meltdown", doc.select(".id1225817868581 h4").text().trim()); [EOL]     Element a = doc.select("a[href=/entertainment/horoscopes]").first(); [EOL]     assertEquals("/entertainment/horoscopes", a.attr("href")); [EOL]     assertEquals("http://www.news.com.au/entertainment/horoscopes", a.attr("abs:href")); [EOL]     Element hs = doc.select("a[href*=naughty-corners-are-a-bad-idea]").first(); [EOL]     assertEquals("http://www.heraldsun.com.au/news/naughty-corners-are-a-bad-idea-for-kids/story-e6frf7jo-1225817899003", hs.attr("href")); [EOL]     assertEquals(hs.attr("href"), hs.attr("abs:href")); [EOL] }
@Test [EOL] public void testNewsHomepage() throws IOException { [EOL]     File in = getFile("/htmltests/news-com-au-home.html"); [EOL]     Document doc = Jsoup.parse(in, "UTF-8", "http://www.news.com.au/"); [EOL]     assertEquals("News.com.au | News from Australia and around the world online | NewsComAu", doc.title()); [EOL]     assertEquals("Brace yourself for Metro meltdown", doc.select(".id1225817868581 h4").text().trim()); [EOL]     Element a = doc.select("a[href=/entertainment/horoscopes]").first(); [EOL]     assertEquals("/entertainment/horoscopes", a.attr("href")); [EOL]     assertEquals("http://www.news.com.au/entertainment/horoscopes", a.attr("abs:href")); [EOL]     Element hs = doc.select("a[href*=naughty-corners-are-a-bad-idea]").first(); [EOL]     assertEquals("http://www.heraldsun.com.au/news/naughty-corners-are-a-bad-idea-for-kids/story-e6frf7jo-1225817899003", hs.attr("href")); [EOL]     assertEquals(hs.attr("href"), hs.attr("abs:href")); [EOL] }
@Test [EOL] public void testNewsHomepage() throws IOException { [EOL]     File in = getFile("/htmltests/news-com-au-home.html"); [EOL]     Document doc = Jsoup.parse(in, "UTF-8", "http://www.news.com.au/"); [EOL]     assertEquals("News.com.au | News from Australia and around the world online | NewsComAu", doc.title()); [EOL]     assertEquals("Brace yourself for Metro meltdown", doc.select(".id1225817868581 h4").text().trim()); [EOL]     Element a = doc.select("a[href=/entertainment/horoscopes]").first(); [EOL]     assertEquals("/entertainment/horoscopes", a.attr("href")); [EOL]     assertEquals("http://www.news.com.au/entertainment/horoscopes", a.attr("abs:href")); [EOL]     Element hs = doc.select("a[href*=naughty-corners-are-a-bad-idea]").first(); [EOL]     assertEquals("http://www.heraldsun.com.au/news/naughty-corners-are-a-bad-idea-for-kids/story-e6frf7jo-1225817899003", hs.attr("href")); [EOL]     assertEquals(hs.attr("href"), hs.attr("abs:href")); [EOL] }
@Test [EOL] public void testNewsHomepage() throws IOException { [EOL]     File in = getFile("/htmltests/news-com-au-home.html"); [EOL]     Document doc = Jsoup.parse(in, "UTF-8", "http://www.news.com.au/"); [EOL]     assertEquals("News.com.au | News from Australia and around the world online | NewsComAu", doc.title()); [EOL]     assertEquals("Brace yourself for Metro meltdown", doc.select(".id1225817868581 h4").text().trim()); [EOL]     Element a = doc.select("a[href=/entertainment/horoscopes]").first(); [EOL]     assertEquals("/entertainment/horoscopes", a.attr("href")); [EOL]     assertEquals("http://www.news.com.au/entertainment/horoscopes", a.attr("abs:href")); [EOL]     Element hs = doc.select("a[href*=naughty-corners-are-a-bad-idea]").first(); [EOL]     assertEquals("http://www.heraldsun.com.au/news/naughty-corners-are-a-bad-idea-for-kids/story-e6frf7jo-1225817899003", hs.attr("href")); [EOL]     assertEquals(hs.attr("href"), hs.attr("abs:href")); [EOL] }
@Test [EOL] public void testNewsHomepage() throws IOException { [EOL]     File in = getFile("/htmltests/news-com-au-home.html"); [EOL]     Document doc = Jsoup.parse(in, "UTF-8", "http://www.news.com.au/"); [EOL]     assertEquals("News.com.au | News from Australia and around the world online | NewsComAu", doc.title()); [EOL]     assertEquals("Brace yourself for Metro meltdown", doc.select(".id1225817868581 h4").text().trim()); [EOL]     Element a = doc.select("a[href=/entertainment/horoscopes]").first(); [EOL]     assertEquals("/entertainment/horoscopes", a.attr("href")); [EOL]     assertEquals("http://www.news.com.au/entertainment/horoscopes", a.attr("abs:href")); [EOL]     Element hs = doc.select("a[href*=naughty-corners-are-a-bad-idea]").first(); [EOL]     assertEquals("http://www.heraldsun.com.au/news/naughty-corners-are-a-bad-idea-for-kids/story-e6frf7jo-1225817899003", hs.attr("href")); [EOL]     assertEquals(hs.attr("href"), hs.attr("abs:href")); [EOL] }
@Test [EOL] public void testNewsHomepage() throws IOException { [EOL]     File in = getFile("/htmltests/news-com-au-home.html"); [EOL]     Document doc = Jsoup.parse(in, "UTF-8", "http://www.news.com.au/"); [EOL]     assertEquals("News.com.au | News from Australia and around the world online | NewsComAu", doc.title()); [EOL]     assertEquals("Brace yourself for Metro meltdown", doc.select(".id1225817868581 h4").text().trim()); [EOL]     Element a = doc.select("a[href=/entertainment/horoscopes]").first(); [EOL]     assertEquals("/entertainment/horoscopes", a.attr("href")); [EOL]     assertEquals("http://www.news.com.au/entertainment/horoscopes", a.attr("abs:href")); [EOL]     Element hs = doc.select("a[href*=naughty-corners-are-a-bad-idea]").first(); [EOL]     assertEquals("http://www.heraldsun.com.au/news/naughty-corners-are-a-bad-idea-for-kids/story-e6frf7jo-1225817899003", hs.attr("href")); [EOL]     assertEquals(hs.attr("href"), hs.attr("abs:href")); [EOL] }
@Test [EOL] public void testPseudoEquals() { [EOL]     Document doc = Jsoup.parse("<div><p>One</p><p>Two</p><p>Three</>p></div><div><p>Four</p>"); [EOL]     Elements ps = doc.select("div p:eq(0)"); [EOL]     assertEquals(2, ps.size()); [EOL]     assertEquals("One", ps.get(0).text()); [EOL]     assertEquals("Four", ps.get(1).text()); [EOL]     Elements ps2 = doc.select("div:eq(0) p:eq(0)"); [EOL]     assertEquals(1, ps2.size()); [EOL]     assertEquals("One", ps2.get(0).text()); [EOL]     assertEquals("p", ps2.get(0).tagName()); [EOL] }
@Test [EOL] public void testPseudoEquals() { [EOL]     Document doc = Jsoup.parse("<div><p>One</p><p>Two</p><p>Three</>p></div><div><p>Four</p>"); [EOL]     Elements ps = doc.select("div p:eq(0)"); [EOL]     assertEquals(2, ps.size()); [EOL]     assertEquals("One", ps.get(0).text()); [EOL]     assertEquals("Four", ps.get(1).text()); [EOL]     Elements ps2 = doc.select("div:eq(0) p:eq(0)"); [EOL]     assertEquals(1, ps2.size()); [EOL]     assertEquals("One", ps2.get(0).text()); [EOL]     assertEquals("p", ps2.get(0).tagName()); [EOL] }
@Test [EOL] public void testPseudoEquals() { [EOL]     Document doc = Jsoup.parse("<div><p>One</p><p>Two</p><p>Three</>p></div><div><p>Four</p>"); [EOL]     Elements ps = doc.select("div p:eq(0)"); [EOL]     assertEquals(2, ps.size()); [EOL]     assertEquals("One", ps.get(0).text()); [EOL]     assertEquals("Four", ps.get(1).text()); [EOL]     Elements ps2 = doc.select("div:eq(0) p:eq(0)"); [EOL]     assertEquals(1, ps2.size()); [EOL]     assertEquals("One", ps2.get(0).text()); [EOL]     assertEquals("p", ps2.get(0).tagName()); [EOL] }
@Test [EOL] public void testPseudoEquals() { [EOL]     Document doc = Jsoup.parse("<div><p>One</p><p>Two</p><p>Three</>p></div><div><p>Four</p>"); [EOL]     Elements ps = doc.select("div p:eq(0)"); [EOL]     assertEquals(2, ps.size()); [EOL]     assertEquals("One", ps.get(0).text()); [EOL]     assertEquals("Four", ps.get(1).text()); [EOL]     Elements ps2 = doc.select("div:eq(0) p:eq(0)"); [EOL]     assertEquals(1, ps2.size()); [EOL]     assertEquals("One", ps2.get(0).text()); [EOL]     assertEquals("p", ps2.get(0).tagName()); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse("<p>One</p><p>Two</p><p>Three</p>"); [EOL]     Elements ps = doc.select("p"); [EOL]     ps.prepend("<b>Bold</b>").append("<i>Ital</i>"); [EOL]     assertEquals("<p><b>Bold</b>Two<i>Ital</i></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html("<span>Gone</span>"); [EOL]     assertEquals("<p><span>Gone</span></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void setHtml() { [EOL]     Document doc = Jsoup.parse("<p>One</p><p>Two</p><p>Three</p>"); [EOL]     Elements ps = doc.select("p"); [EOL]     ps.prepend("<b>Bold</b>").append("<i>Ital</i>"); [EOL]     assertEquals("<p><b>Bold</b>Two<i>Ital</i></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html("<span>Gone</span>"); [EOL]     assertEquals("<p><span>Gone</span></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void testSetHtml() { [EOL]     Document doc = Jsoup.parse("<p>One</p><p>Two</p><p>Three</p>"); [EOL]     Elements ps = doc.select("p"); [EOL]     ps.prepend("<b>Bold</b>").append("<i>Ital</i>"); [EOL]     assertEquals("<p><b>Bold</b>Two<i>Ital</i></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html("<span>Gone</span>"); [EOL]     assertEquals("<p><span>Gone</span></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void testSetHtml() { [EOL]     Document doc = Jsoup.parse("<p>One</p><p>Two</p><p>Three</p>"); [EOL]     Elements ps = doc.select("p"); [EOL]     ps.prepend("<b>Bold</b>").append("<i>Ital</i>"); [EOL]     assertEquals("<p><b>Bold</b>Two<i>Ital</i></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html("<span>Gone</span>"); [EOL]     assertEquals("<p><span>Gone</span></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void testSetText() { [EOL]     String h = "<div id=1>Hello <p>there <b>now</b></p></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals("Hello there now", doc.text()); [EOL]     assertEquals("there now", doc.select("p").get(0).text()); [EOL]     Element div = doc.getElementById("1").text("Gone"); [EOL]     assertEquals("Gone", div.text()); [EOL]     assertEquals(0, doc.select("p").size()); [EOL] }
@Test [EOL] public void testSetHtml() { [EOL]     Document doc = Jsoup.parse("<p>One</p><p>Two</p><p>Three</p>"); [EOL]     Elements ps = doc.select("p"); [EOL]     ps.prepend("<b>Bold</b>").append("<i>Ital</i>"); [EOL]     assertEquals("<p><b>Bold</b>Two<i>Ital</i></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html("<span>Gone</span>"); [EOL]     assertEquals("<p><span>Gone</span></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void testSetText() { [EOL]     String h = "<div id=1>Hello <p>there <b>now</b></p></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals("Hello there now", doc.text()); [EOL]     assertEquals("there now", doc.select("p").get(0).text()); [EOL]     Element div = doc.getElementById("1").text("Gone"); [EOL]     assertEquals("Gone", div.text()); [EOL]     assertEquals(0, doc.select("p").size()); [EOL] }
@Test [EOL] public void testSetText() { [EOL]     String h = "<div id=1>Hello <p>there <b>now</b></p></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals("Hello there now", doc.text()); [EOL]     assertEquals("there now", doc.select("p").get(0).text()); [EOL]     Element div = doc.getElementById("1").text("Gone"); [EOL]     assertEquals("Gone", div.text()); [EOL]     assertEquals(0, doc.select("p").size()); [EOL] }
@Test [EOL] public void testSetText() { [EOL]     String h = "<div id=1>Hello <p>there <b>now</b></p></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals("Hello there now", doc.text()); [EOL]     assertEquals("there now", doc.select("p").get(0).text()); [EOL]     Element div = doc.getElementById("1").text("Gone"); [EOL]     assertEquals("Gone", div.text()); [EOL]     assertEquals(0, doc.select("p").size()); [EOL] }
@Test [EOL] public void testSetHtml() { [EOL]     Document doc = Jsoup.parse("<p>One</p><p>Two</p><p>Three</p>"); [EOL]     Elements ps = doc.select("p"); [EOL]     ps.prepend("<b>Bold</b>").append("<i>Ital</i>"); [EOL]     assertEquals("<p><b>Bold</b>Two<i>Ital</i></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL]     ps.html("<span>Gone</span>"); [EOL]     assertEquals("<p><span>Gone</span></p>", TextUtil.stripNewlines(ps.get(1).outerHtml())); [EOL] }
@Test [EOL] public void testSetText() { [EOL]     String h = "<div id=1>Hello <p>there <b>now</b></p></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals("Hello there now", doc.text()); [EOL]     assertEquals("there now", doc.select("p").get(0).text()); [EOL]     Element div = doc.getElementById("1").text("Gone"); [EOL]     assertEquals("Gone", div.text()); [EOL]     assertEquals(0, doc.select("p").size()); [EOL] }
@Test [EOL] public void handlesUnknownInlineTags() { [EOL]     String h = "<p><cust>Test</cust></p><p><cust><cust>Test</cust></cust></p>"; [EOL]     Document doc = Jsoup.parseBodyFragment(h); [EOL]     String out = doc.body().html(); [EOL]     assertEquals(h, TextUtil.stripNewlines(out)); [EOL] }
@Test [EOL] public void handlesUnknownInlineTags() { [EOL]     String h = "<p><cust>Test</cust></p><p><cust><cust>Test</cust></cust></p>"; [EOL]     Document doc = Jsoup.parseBodyFragment(h); [EOL]     String out = doc.body().html(); [EOL]     assertEquals(h, TextUtil.stripNewlines(out)); [EOL] }
@Test [EOL] public void handlesUnknownInlineTags() { [EOL]     String h = "<p><cust>Test</cust></p><p><cust><cust>Test</cust></cust></p>"; [EOL]     Document doc = Jsoup.parseBodyFragment(h); [EOL]     String out = doc.body().html(); [EOL]     assertEquals(h, TextUtil.stripNewlines(out)); [EOL] }
@Test [EOL] public void handlesUnknownInlineTags() { [EOL]     String h = "<p><cust>Test</cust></p><p><cust><cust>Test</cust></cust></p>"; [EOL]     Document doc = Jsoup.parseBodyFragment(h); [EOL]     String out = doc.body().html(); [EOL]     assertEquals(h, TextUtil.stripNewlines(out)); [EOL] }
@Test [EOL] public void handlesUnknownInlineTags() { [EOL]     String h = "<p><cust>Test</cust></p><p><cust><cust>Test</cust></cust></p>"; [EOL]     Document doc = Jsoup.parseBodyFragment(h); [EOL]     String out = doc.body().html(); [EOL]     assertEquals(h, TextUtil.stripNewlines(out)); [EOL] }
@Test [EOL] public void handlesUnknownInlineTags() { [EOL]     String h = "<p><cust>Test</cust></p><p><cust><cust>Test</cust></cust></p>"; [EOL]     Document doc = Jsoup.parseBodyFragment(h); [EOL]     String out = doc.body().html(); [EOL]     assertEquals(h, TextUtil.stripNewlines(out)); [EOL] }
@Test [EOL] public void handlesUnknownInlineTags() { [EOL]     String h = "<p><cust>Test</cust></p><p><cust><cust>Test</cust></cust></p>"; [EOL]     Document doc = Jsoup.parseBodyFragment(h); [EOL]     String out = doc.body().html(); [EOL]     assertEquals(h, TextUtil.stripNewlines(out)); [EOL] }
@Test [EOL] public void handlesUnknownInlineTags() { [EOL]     String h = "<p><cust>Test</cust></p><p><cust><cust>Test</cust></cust></p>"; [EOL]     Document doc = Jsoup.parseBodyFragment(h); [EOL]     String out = doc.body().html(); [EOL]     assertEquals(h, TextUtil.stripNewlines(out)); [EOL] }
@Test [EOL] public void handlesUnknownInlineTags() { [EOL]     String h = "<p><cust>Test</cust></p><p><cust><cust>Test</cust></cust></p>"; [EOL]     Document doc = Jsoup.parseBodyFragment(h); [EOL]     String out = doc.body().html(); [EOL]     assertEquals(h, TextUtil.stripNewlines(out)); [EOL] }
@Test [EOL] public void handlesUnknownInlineTags() { [EOL]     String h = "<p><cust>Test</cust></p><p><cust><cust>Test</cust></cust></p>"; [EOL]     Document doc = Jsoup.parseBodyFragment(h); [EOL]     String out = doc.body().html(); [EOL]     assertEquals(h, TextUtil.stripNewlines(out)); [EOL] }
@Test [EOL] public void handlesUnknownInlineTags() { [EOL]     String h = "<p><cust>Test</cust></p><p><cust><cust>Test</cust></cust></p>"; [EOL]     Document doc = Jsoup.parseBodyFragment(h); [EOL]     String out = doc.body().html(); [EOL]     assertEquals(h, TextUtil.stripNewlines(out)); [EOL] }
@Test [EOL] public void handlesUnknownInlineTags() { [EOL]     String h = "<p><cust>Test</cust></p><p><cust><cust>Test</cust></cust></p>"; [EOL]     Document doc = Jsoup.parseBodyFragment(h); [EOL]     String out = doc.body().html(); [EOL]     assertEquals(h, TextUtil.stripNewlines(out)); [EOL] }
@Test [EOL] public void handlesUnknownTags() { [EOL]     String h = "<div><foo title=bar>Hello<foo title=qux>there</foo></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements foos = doc.select("foo"); [EOL]     assertEquals(2, foos.size()); [EOL]     assertEquals("bar", foos.first().attr("title")); [EOL]     assertEquals("qux", foos.last().attr("title")); [EOL]     assertEquals("there", foos.last().text()); [EOL] }
@Test [EOL] public void handlesUnknownTags() { [EOL]     String h = "<div><foo title=bar>Hello<foo title=qux>there</foo></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements foos = doc.select("foo"); [EOL]     assertEquals(2, foos.size()); [EOL]     assertEquals("bar", foos.first().attr("title")); [EOL]     assertEquals("qux", foos.last().attr("title")); [EOL]     assertEquals("there", foos.last().text()); [EOL] }
@Test [EOL] public void handlesUnknownTags() { [EOL]     String h = "<div><foo title=bar>Hello<foo title=qux>there</foo></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements foos = doc.select("foo"); [EOL]     assertEquals(2, foos.size()); [EOL]     assertEquals("bar", foos.first().attr("title")); [EOL]     assertEquals("qux", foos.last().attr("title")); [EOL]     assertEquals("there", foos.last().text()); [EOL] }
@Test [EOL] public void handlesUnknownTags() { [EOL]     String h = "<div><foo title=bar>Hello<foo title=qux>there</foo></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements foos = doc.select("foo"); [EOL]     assertEquals(2, foos.size()); [EOL]     assertEquals("bar", foos.first().attr("title")); [EOL]     assertEquals("qux", foos.last().attr("title")); [EOL]     assertEquals("there", foos.last().text()); [EOL] }
@Test [EOL] public void handlesUnknownTags() { [EOL]     String h = "<div><foo title=bar>Hello<foo title=qux>there</foo></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements foos = doc.select("foo"); [EOL]     assertEquals(2, foos.size()); [EOL]     assertEquals("bar", foos.first().attr("title")); [EOL]     assertEquals("qux", foos.last().attr("title")); [EOL]     assertEquals("there", foos.last().text()); [EOL] }
@Test [EOL] public void handlesUnknownTags() { [EOL]     String h = "<div><foo title=bar>Hello<foo title=qux>there</foo></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements foos = doc.select("foo"); [EOL]     assertEquals(2, foos.size()); [EOL]     assertEquals("bar", foos.first().attr("title")); [EOL]     assertEquals("qux", foos.last().attr("title")); [EOL]     assertEquals("there", foos.last().text()); [EOL] }
@Test [EOL] public void handlesUnknownTags() { [EOL]     String h = "<div><foo title=bar>Hello<foo title=qux>there</foo></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements foos = doc.select("foo"); [EOL]     assertEquals(2, foos.size()); [EOL]     assertEquals("bar", foos.first().attr("title")); [EOL]     assertEquals("qux", foos.last().attr("title")); [EOL]     assertEquals("there", foos.last().text()); [EOL] }
@Test [EOL] public void handlesUnknownTags() { [EOL]     String h = "<div><foo title=bar>Hello<foo title=qux>there</foo></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements foos = doc.select("foo"); [EOL]     assertEquals(2, foos.size()); [EOL]     assertEquals("bar", foos.first().attr("title")); [EOL]     assertEquals("qux", foos.last().attr("title")); [EOL]     assertEquals("there", foos.last().text()); [EOL] }
@Test [EOL] public void handlesUnknownTags() { [EOL]     String h = "<div><foo title=bar>Hello<foo title=qux>there</foo></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements foos = doc.select("foo"); [EOL]     assertEquals(2, foos.size()); [EOL]     assertEquals("bar", foos.first().attr("title")); [EOL]     assertEquals("qux", foos.last().attr("title")); [EOL]     assertEquals("there", foos.last().text()); [EOL] }
@Test [EOL] public void handlesUnknownTags() { [EOL]     String h = "<div><foo title=bar>Hello<foo title=qux>there</foo></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements foos = doc.select("foo"); [EOL]     assertEquals(2, foos.size()); [EOL]     assertEquals("bar", foos.first().attr("title")); [EOL]     assertEquals("qux", foos.last().attr("title")); [EOL]     assertEquals("there", foos.last().text()); [EOL] }
@Test [EOL] public void parsesUnterminatedComments() { [EOL]     String html = "<p>Hello<!-- <tr><td>"; [EOL]     Document doc = Jsoup.parse(html); [EOL]     Element p = doc.getElementsByTag("p").get(0); [EOL]     assertEquals("Hello", p.text()); [EOL]     TextNode text = (TextNode) p.childNode(0); [EOL]     assertEquals("Hello", text.getWholeText()); [EOL]     Comment comment = (Comment) p.childNode(1); [EOL]     assertEquals(" <tr><td>", comment.getData()); [EOL] }
@Test [EOL] public void handlesUnknownTags() { [EOL]     String h = "<div><foo title=bar>Hello<foo title=qux>there</foo></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements foos = doc.select("foo"); [EOL]     assertEquals(2, foos.size()); [EOL]     assertEquals("bar", foos.first().attr("title")); [EOL]     assertEquals("qux", foos.last().attr("title")); [EOL]     assertEquals("there", foos.last().text()); [EOL] }
@Test [EOL] public void handlesUnknownTags() { [EOL]     String h = "<div><foo title=bar>Hello<foo title=qux>there</foo></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements foos = doc.select("foo"); [EOL]     assertEquals(2, foos.size()); [EOL]     assertEquals("bar", foos.first().attr("title")); [EOL]     assertEquals("qux", foos.last().attr("title")); [EOL]     assertEquals("there", foos.last().text()); [EOL] }
@Test [EOL] public void handlesUnknownTags() { [EOL]     String h = "<div><foo title=bar>Hello<foo title=qux>there</foo></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements foos = doc.select("foo"); [EOL]     assertEquals(2, foos.size()); [EOL]     assertEquals("bar", foos.first().attr("title")); [EOL]     assertEquals("qux", foos.last().attr("title")); [EOL]     assertEquals("there", foos.last().text()); [EOL] }
@Test [EOL] public void handlesUnknownTags() { [EOL]     String h = "<div><foo title=bar>Hello<foo title=qux>there</foo></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements foos = doc.select("foo"); [EOL]     assertEquals(2, foos.size()); [EOL]     assertEquals("bar", foos.first().attr("title")); [EOL]     assertEquals("qux", foos.last().attr("title")); [EOL]     assertEquals("there", foos.last().text()); [EOL] }
@Test [EOL] public void handlesUnknownTags() { [EOL]     String h = "<div><foo title=bar>Hello<foo title=qux>there</foo></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements foos = doc.select("foo"); [EOL]     assertEquals(2, foos.size()); [EOL]     assertEquals("bar", foos.first().attr("title")); [EOL]     assertEquals("qux", foos.last().attr("title")); [EOL]     assertEquals("there", foos.last().text()); [EOL] }
@Test [EOL] public void handlesUnknownTags() { [EOL]     String h = "<div><foo title=bar>Hello<foo title=qux>there</foo></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements foos = doc.select("foo"); [EOL]     assertEquals(2, foos.size()); [EOL]     assertEquals("bar", foos.first().attr("title")); [EOL]     assertEquals("qux", foos.last().attr("title")); [EOL]     assertEquals("there", foos.last().text()); [EOL] }
@Test [EOL] public void handlesUnknownTags() { [EOL]     String h = "<div><foo title=bar>Hello<foo title=qux>there</foo></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements foos = doc.select("foo"); [EOL]     assertEquals(2, foos.size()); [EOL]     assertEquals("bar", foos.first().attr("title")); [EOL]     assertEquals("qux", foos.last().attr("title")); [EOL]     assertEquals("there", foos.last().text()); [EOL] }
@Test [EOL] public void handlesUnknownTags() { [EOL]     String h = "<div><foo title=bar>Hello<foo title=qux>there</foo></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements foos = doc.select("foo"); [EOL]     assertEquals(2, foos.size()); [EOL]     assertEquals("bar", foos.first().attr("title")); [EOL]     assertEquals("qux", foos.last().attr("title")); [EOL]     assertEquals("there", foos.last().text()); [EOL] }
@Test [EOL] public void handlesUnknownTags() { [EOL]     String h = "<div><foo title=bar>Hello<foo title=qux>there</foo></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements foos = doc.select("foo"); [EOL]     assertEquals(2, foos.size()); [EOL]     assertEquals("bar", foos.first().attr("title")); [EOL]     assertEquals("qux", foos.last().attr("title")); [EOL]     assertEquals("there", foos.last().text()); [EOL] }
@Test [EOL] public void handlesUnknownTags() { [EOL]     String h = "<div><foo title=bar>Hello<foo title=qux>there</foo></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements foos = doc.select("foo"); [EOL]     assertEquals(2, foos.size()); [EOL]     assertEquals("bar", foos.first().attr("title")); [EOL]     assertEquals("qux", foos.last().attr("title")); [EOL]     assertEquals("there", foos.last().text()); [EOL] }
@Test [EOL] public void handlesTextArea() { [EOL]     Document doc = Jsoup.parse("<textarea>Hello</textarea>"); [EOL]     Elements els = doc.select("textarea"); [EOL]     assertEquals("Hello", els.text()); [EOL]     assertEquals("Hello", els.val()); [EOL] }
@Test [EOL] public void handlesUnknownTags() { [EOL]     String h = "<div><foo title=bar>Hello<foo title=qux>there</foo></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements foos = doc.select("foo"); [EOL]     assertEquals(2, foos.size()); [EOL]     assertEquals("bar", foos.first().attr("title")); [EOL]     assertEquals("qux", foos.last().attr("title")); [EOL]     assertEquals("there", foos.last().text()); [EOL] }
@Test [EOL] public void handlesUnknownTags() { [EOL]     String h = "<div><foo title=bar>Hello<foo title=qux>there</foo></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements foos = doc.select("foo"); [EOL]     assertEquals(2, foos.size()); [EOL]     assertEquals("bar", foos.first().attr("title")); [EOL]     assertEquals("qux", foos.last().attr("title")); [EOL]     assertEquals("there", foos.last().text()); [EOL] }
@Test [EOL] public void handlesUnknownTags() { [EOL]     String h = "<div><foo title=bar>Hello<foo title=qux>there</foo></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements foos = doc.select("foo"); [EOL]     assertEquals(2, foos.size()); [EOL]     assertEquals("bar", foos.first().attr("title")); [EOL]     assertEquals("qux", foos.last().attr("title")); [EOL]     assertEquals("there", foos.last().text()); [EOL] }
@Test [EOL] public void handlesUnknownTags() { [EOL]     String h = "<div><foo title=bar>Hello<foo title=qux>there</foo></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements foos = doc.select("foo"); [EOL]     assertEquals(2, foos.size()); [EOL]     assertEquals("bar", foos.first().attr("title")); [EOL]     assertEquals("qux", foos.last().attr("title")); [EOL]     assertEquals("there", foos.last().text()); [EOL] }
@Test [EOL] public void handlesUnknownTags() { [EOL]     String h = "<div><foo title=bar>Hello<foo title=qux>there</foo></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements foos = doc.select("foo"); [EOL]     assertEquals(2, foos.size()); [EOL]     assertEquals("bar", foos.first().attr("title")); [EOL]     assertEquals("qux", foos.last().attr("title")); [EOL]     assertEquals("there", foos.last().text()); [EOL] }
@Test [EOL] public void handlesUnknownTags() { [EOL]     String h = "<div><foo title=bar>Hello<foo title=qux>there</foo></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements foos = doc.select("foo"); [EOL]     assertEquals(2, foos.size()); [EOL]     assertEquals("bar", foos.first().attr("title")); [EOL]     assertEquals("qux", foos.last().attr("title")); [EOL]     assertEquals("there", foos.last().text()); [EOL] }
@Test [EOL] public void handlesBaseTags() { [EOL]     String h = "<a href=1>#</a><base href='/2/'><a href='3'>#</a><base href='http://bar'><a href=4>#</a>"; [EOL]     Document doc = Jsoup.parse(h, "http://foo/"); [EOL]     assertEquals("http://bar", doc.baseUri()); [EOL]     Elements anchors = doc.getElementsByTag("a"); [EOL]     assertEquals(3, anchors.size()); [EOL]     assertEquals("http://foo/", anchors.get(0).baseUri()); [EOL]     assertEquals("http://foo/2/", anchors.get(1).baseUri()); [EOL]     assertEquals("http://bar", anchors.get(2).baseUri()); [EOL]     assertEquals("http://foo/1", anchors.get(0).absUrl("href")); [EOL]     assertEquals("http://foo/2/3", anchors.get(1).absUrl("href")); [EOL]     assertEquals("http://bar/4", anchors.get(2).absUrl("href")); [EOL] }
@Test [EOL] public void handlesUnknownTags() { [EOL]     String h = "<div><foo title=bar>Hello<foo title=qux>there</foo></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements foos = doc.select("foo"); [EOL]     assertEquals(2, foos.size()); [EOL]     assertEquals("bar", foos.first().attr("title")); [EOL]     assertEquals("qux", foos.last().attr("title")); [EOL]     assertEquals("there", foos.last().text()); [EOL] }
@Test [EOL] public void handlesUnknownTags() { [EOL]     String h = "<div><foo title=bar>Hello<foo title=qux>there</foo></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements foos = doc.select("foo"); [EOL]     assertEquals(2, foos.size()); [EOL]     assertEquals("bar", foos.first().attr("title")); [EOL]     assertEquals("qux", foos.last().attr("title")); [EOL]     assertEquals("there", foos.last().text()); [EOL] }
@Test [EOL] public void handlesUnknownTags() { [EOL]     String h = "<div><foo title=bar>Hello<foo title=qux>there</foo></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements foos = doc.select("foo"); [EOL]     assertEquals(2, foos.size()); [EOL]     assertEquals("bar", foos.first().attr("title")); [EOL]     assertEquals("qux", foos.last().attr("title")); [EOL]     assertEquals("there", foos.last().text()); [EOL] }
@Test [EOL] public void handlesTextArea() { [EOL]     Document doc = Jsoup.parse("<textarea>Hello</textarea>"); [EOL]     Elements els = doc.select("textarea"); [EOL]     assertEquals("Hello", els.text()); [EOL]     assertEquals("Hello", els.val()); [EOL] }
@Test [EOL] public void handlesTextArea() { [EOL]     Document doc = Jsoup.parse("<textarea>Hello</textarea>"); [EOL]     Elements els = doc.select("textarea"); [EOL]     assertEquals("Hello", els.text()); [EOL]     assertEquals("Hello", els.val()); [EOL] }
@Test [EOL] public void handlesBaseTags() { [EOL]     String h = "<a href=1>#</a><base href='/2/'><a href='3'>#</a><base href='http://bar'><a href=4>#</a>"; [EOL]     Document doc = Jsoup.parse(h, "http://foo/"); [EOL]     assertEquals("http://bar", doc.baseUri()); [EOL]     Elements anchors = doc.getElementsByTag("a"); [EOL]     assertEquals(3, anchors.size()); [EOL]     assertEquals("http://foo/", anchors.get(0).baseUri()); [EOL]     assertEquals("http://foo/2/", anchors.get(1).baseUri()); [EOL]     assertEquals("http://bar", anchors.get(2).baseUri()); [EOL]     assertEquals("http://foo/1", anchors.get(0).absUrl("href")); [EOL]     assertEquals("http://foo/2/3", anchors.get(1).absUrl("href")); [EOL]     assertEquals("http://bar/4", anchors.get(2).absUrl("href")); [EOL] }
@Test [EOL] public void handlesBaseTags() { [EOL]     String h = "<a href=1>#</a><base href='/2/'><a href='3'>#</a><base href='http://bar'><a href=4>#</a>"; [EOL]     Document doc = Jsoup.parse(h, "http://foo/"); [EOL]     assertEquals("http://bar", doc.baseUri()); [EOL]     Elements anchors = doc.getElementsByTag("a"); [EOL]     assertEquals(3, anchors.size()); [EOL]     assertEquals("http://foo/", anchors.get(0).baseUri()); [EOL]     assertEquals("http://foo/2/", anchors.get(1).baseUri()); [EOL]     assertEquals("http://bar", anchors.get(2).baseUri()); [EOL]     assertEquals("http://foo/1", anchors.get(0).absUrl("href")); [EOL]     assertEquals("http://foo/2/3", anchors.get(1).absUrl("href")); [EOL]     assertEquals("http://bar/4", anchors.get(2).absUrl("href")); [EOL] }
@Test [EOL] public void handlesBaseTags() { [EOL]     String h = "<a href=1>#</a><base href='/2/'><a href='3'>#</a><base href='http://bar'><a href=4>#</a>"; [EOL]     Document doc = Jsoup.parse(h, "http://foo/"); [EOL]     assertEquals("http://bar", doc.baseUri()); [EOL]     Elements anchors = doc.getElementsByTag("a"); [EOL]     assertEquals(3, anchors.size()); [EOL]     assertEquals("http://foo/", anchors.get(0).baseUri()); [EOL]     assertEquals("http://foo/2/", anchors.get(1).baseUri()); [EOL]     assertEquals("http://bar", anchors.get(2).baseUri()); [EOL]     assertEquals("http://foo/1", anchors.get(0).absUrl("href")); [EOL]     assertEquals("http://foo/2/3", anchors.get(1).absUrl("href")); [EOL]     assertEquals("http://bar/4", anchors.get(2).absUrl("href")); [EOL] }
@Test [EOL] public void handlesUnknownTags() { [EOL]     String h = "<div><foo title=bar>Hello<foo title=qux>there</foo></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements foos = doc.select("foo"); [EOL]     assertEquals(2, foos.size()); [EOL]     assertEquals("bar", foos.first().attr("title")); [EOL]     assertEquals("qux", foos.last().attr("title")); [EOL]     assertEquals("there", foos.last().text()); [EOL] }
@Test [EOL] public void handlesUnknownTags() { [EOL]     String h = "<div><foo title=bar>Hello<foo title=qux>there</foo></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements foos = doc.select("foo"); [EOL]     assertEquals(2, foos.size()); [EOL]     assertEquals("bar", foos.first().attr("title")); [EOL]     assertEquals("qux", foos.last().attr("title")); [EOL]     assertEquals("there", foos.last().text()); [EOL] }
@Test [EOL] public void handlesUnknownInlineTags() { [EOL]     String h = "<p><cust>Test</cust></p><p><cust><cust>Test</cust></cust></p>"; [EOL]     Document doc = Jsoup.parseBodyFragment(h); [EOL]     String out = doc.body().html(); [EOL]     assertEquals(h, TextUtil.stripNewlines(out)); [EOL] }
@Test [EOL] public void handlesUnknownInlineTags() { [EOL]     String h = "<p><cust>Test</cust></p><p><cust><cust>Test</cust></cust></p>"; [EOL]     Document doc = Jsoup.parseBodyFragment(h); [EOL]     String out = doc.body().html(); [EOL]     assertEquals(h, TextUtil.stripNewlines(out)); [EOL] }
@Test [EOL] public void handlesUnknownInlineTags() { [EOL]     String h = "<p><cust>Test</cust></p><p><cust><cust>Test</cust></cust></p>"; [EOL]     Document doc = Jsoup.parseBodyFragment(h); [EOL]     String out = doc.body().html(); [EOL]     assertEquals(h, TextUtil.stripNewlines(out)); [EOL] }
@Test [EOL] public void handlesUnknownInlineTags() { [EOL]     String h = "<p><cust>Test</cust></p><p><cust><cust>Test</cust></cust></p>"; [EOL]     Document doc = Jsoup.parseBodyFragment(h); [EOL]     String out = doc.body().html(); [EOL]     assertEquals(h, TextUtil.stripNewlines(out)); [EOL] }
@Test [EOL] public void handlesUnknownInlineTags() { [EOL]     String h = "<p><cust>Test</cust></p><p><cust><cust>Test</cust></cust></p>"; [EOL]     Document doc = Jsoup.parseBodyFragment(h); [EOL]     String out = doc.body().html(); [EOL]     assertEquals(h, TextUtil.stripNewlines(out)); [EOL] }
@Test [EOL] public void handlesUnknownInlineTags() { [EOL]     String h = "<p><cust>Test</cust></p><p><cust><cust>Test</cust></cust></p>"; [EOL]     Document doc = Jsoup.parseBodyFragment(h); [EOL]     String out = doc.body().html(); [EOL]     assertEquals(h, TextUtil.stripNewlines(out)); [EOL] }
@Test [EOL] public void handlesUnknownInlineTags() { [EOL]     String h = "<p><cust>Test</cust></p><p><cust><cust>Test</cust></cust></p>"; [EOL]     Document doc = Jsoup.parseBodyFragment(h); [EOL]     String out = doc.body().html(); [EOL]     assertEquals(h, TextUtil.stripNewlines(out)); [EOL] }
@Test [EOL] public void handlesUnknownTags() { [EOL]     String h = "<div><foo title=bar>Hello<foo title=qux>there</foo></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements foos = doc.select("foo"); [EOL]     assertEquals(2, foos.size()); [EOL]     assertEquals("bar", foos.first().attr("title")); [EOL]     assertEquals("qux", foos.last().attr("title")); [EOL]     assertEquals("there", foos.last().text()); [EOL] }
@Test [EOL] public void handlesUnknownTags() { [EOL]     String h = "<div><foo title=bar>Hello<foo title=qux>there</foo></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements foos = doc.select("foo"); [EOL]     assertEquals(2, foos.size()); [EOL]     assertEquals("bar", foos.first().attr("title")); [EOL]     assertEquals("qux", foos.last().attr("title")); [EOL]     assertEquals("there", foos.last().text()); [EOL] }
@Test [EOL] public void handlesUnknownInlineTags() { [EOL]     String h = "<p><cust>Test</cust></p><p><cust><cust>Test</cust></cust></p>"; [EOL]     Document doc = Jsoup.parseBodyFragment(h); [EOL]     String out = doc.body().html(); [EOL]     assertEquals(h, TextUtil.stripNewlines(out)); [EOL] }
@Test [EOL] public void handlesUnknownInlineTags() { [EOL]     String h = "<p><cust>Test</cust></p><p><cust><cust>Test</cust></cust></p>"; [EOL]     Document doc = Jsoup.parseBodyFragment(h); [EOL]     String out = doc.body().html(); [EOL]     assertEquals(h, TextUtil.stripNewlines(out)); [EOL] }
@Test [EOL] public void handlesUnknownInlineTags() { [EOL]     String h = "<p><cust>Test</cust></p><p><cust><cust>Test</cust></cust></p>"; [EOL]     Document doc = Jsoup.parseBodyFragment(h); [EOL]     String out = doc.body().html(); [EOL]     assertEquals(h, TextUtil.stripNewlines(out)); [EOL] }
@Test [EOL] public void handlesUnknownInlineTags() { [EOL]     String h = "<p><cust>Test</cust></p><p><cust><cust>Test</cust></cust></p>"; [EOL]     Document doc = Jsoup.parseBodyFragment(h); [EOL]     String out = doc.body().html(); [EOL]     assertEquals(h, TextUtil.stripNewlines(out)); [EOL] }
@Test [EOL] public void handlesUnknownInlineTags() { [EOL]     String h = "<p><cust>Test</cust></p><p><cust><cust>Test</cust></cust></p>"; [EOL]     Document doc = Jsoup.parseBodyFragment(h); [EOL]     String out = doc.body().html(); [EOL]     assertEquals(h, TextUtil.stripNewlines(out)); [EOL] }
@Test [EOL] public void handlesUnknownInlineTags() { [EOL]     String h = "<p><cust>Test</cust></p><p><cust><cust>Test</cust></cust></p>"; [EOL]     Document doc = Jsoup.parseBodyFragment(h); [EOL]     String out = doc.body().html(); [EOL]     assertEquals(h, TextUtil.stripNewlines(out)); [EOL] }
@Test [EOL] public void handlesUnknownInlineTags() { [EOL]     String h = "<p><cust>Test</cust></p><p><cust><cust>Test</cust></cust></p>"; [EOL]     Document doc = Jsoup.parseBodyFragment(h); [EOL]     String out = doc.body().html(); [EOL]     assertEquals(h, TextUtil.stripNewlines(out)); [EOL] }
@Test [EOL] public void handlesUnknownInlineTags() { [EOL]     String h = "<p><cust>Test</cust></p><p><cust><cust>Test</cust></cust></p>"; [EOL]     Document doc = Jsoup.parseBodyFragment(h); [EOL]     String out = doc.body().html(); [EOL]     assertEquals(h, TextUtil.stripNewlines(out)); [EOL] }
@Test [EOL] public void handlesUnknownInlineTags() { [EOL]     String h = "<p><cust>Test</cust></p><p><cust><cust>Test</cust></cust></p>"; [EOL]     Document doc = Jsoup.parseBodyFragment(h); [EOL]     String out = doc.body().html(); [EOL]     assertEquals(h, TextUtil.stripNewlines(out)); [EOL] }
@Test [EOL] public void handlesUnknownInlineTags() { [EOL]     String h = "<p><cust>Test</cust></p><p><cust><cust>Test</cust></cust></p>"; [EOL]     Document doc = Jsoup.parseBodyFragment(h); [EOL]     String out = doc.body().html(); [EOL]     assertEquals(h, TextUtil.stripNewlines(out)); [EOL] }
@Test [EOL] public void handlesUnknownInlineTags() { [EOL]     String h = "<p><cust>Test</cust></p><p><cust><cust>Test</cust></cust></p>"; [EOL]     Document doc = Jsoup.parseBodyFragment(h); [EOL]     String out = doc.body().html(); [EOL]     assertEquals(h, TextUtil.stripNewlines(out)); [EOL] }
@Test [EOL] public void handlesUnknownInlineTags() { [EOL]     String h = "<p><cust>Test</cust></p><p><cust><cust>Test</cust></cust></p>"; [EOL]     Document doc = Jsoup.parseBodyFragment(h); [EOL]     String out = doc.body().html(); [EOL]     assertEquals(h, TextUtil.stripNewlines(out)); [EOL] }
@Test [EOL] public void handlesUnknownInlineTags() { [EOL]     String h = "<p><cust>Test</cust></p><p><cust><cust>Test</cust></cust></p>"; [EOL]     Document doc = Jsoup.parseBodyFragment(h); [EOL]     String out = doc.body().html(); [EOL]     assertEquals(h, TextUtil.stripNewlines(out)); [EOL] }
@Test [EOL] public void handlesUnknownInlineTags() { [EOL]     String h = "<p><cust>Test</cust></p><p><cust><cust>Test</cust></cust></p>"; [EOL]     Document doc = Jsoup.parseBodyFragment(h); [EOL]     String out = doc.body().html(); [EOL]     assertEquals(h, TextUtil.stripNewlines(out)); [EOL] }
@Test [EOL] public void handlesUnknownTags() { [EOL]     String h = "<div><foo title=bar>Hello<foo title=qux>there</foo></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements foos = doc.select("foo"); [EOL]     assertEquals(2, foos.size()); [EOL]     assertEquals("bar", foos.first().attr("title")); [EOL]     assertEquals("qux", foos.last().attr("title")); [EOL]     assertEquals("there", foos.last().text()); [EOL] }
@Test [EOL] public void handlesUnknownTags() { [EOL]     String h = "<div><foo title=bar>Hello<foo title=qux>there</foo></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements foos = doc.select("foo"); [EOL]     assertEquals(2, foos.size()); [EOL]     assertEquals("bar", foos.first().attr("title")); [EOL]     assertEquals("qux", foos.last().attr("title")); [EOL]     assertEquals("there", foos.last().text()); [EOL] }
@Test [EOL] public void handlesUnknownTags() { [EOL]     String h = "<div><foo title=bar>Hello<foo title=qux>there</foo></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements foos = doc.select("foo"); [EOL]     assertEquals(2, foos.size()); [EOL]     assertEquals("bar", foos.first().attr("title")); [EOL]     assertEquals("qux", foos.last().attr("title")); [EOL]     assertEquals("there", foos.last().text()); [EOL] }
@Test [EOL] public void handlesUnknownTags() { [EOL]     String h = "<div><foo title=bar>Hello<foo title=qux>there</foo></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements foos = doc.select("foo"); [EOL]     assertEquals(2, foos.size()); [EOL]     assertEquals("bar", foos.first().attr("title")); [EOL]     assertEquals("qux", foos.last().attr("title")); [EOL]     assertEquals("there", foos.last().text()); [EOL] }
@Test [EOL] public void handlesUnknownTags() { [EOL]     String h = "<div><foo title=bar>Hello<foo title=qux>there</foo></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements foos = doc.select("foo"); [EOL]     assertEquals(2, foos.size()); [EOL]     assertEquals("bar", foos.first().attr("title")); [EOL]     assertEquals("qux", foos.last().attr("title")); [EOL]     assertEquals("there", foos.last().text()); [EOL] }
@Test [EOL] public void handlesUnknownTags() { [EOL]     String h = "<div><foo title=bar>Hello<foo title=qux>there</foo></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements foos = doc.select("foo"); [EOL]     assertEquals(2, foos.size()); [EOL]     assertEquals("bar", foos.first().attr("title")); [EOL]     assertEquals("qux", foos.last().attr("title")); [EOL]     assertEquals("there", foos.last().text()); [EOL] }
@Test [EOL] public void handlesUnknownTags() { [EOL]     String h = "<div><foo title=bar>Hello<foo title=qux>there</foo></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements foos = doc.select("foo"); [EOL]     assertEquals(2, foos.size()); [EOL]     assertEquals("bar", foos.first().attr("title")); [EOL]     assertEquals("qux", foos.last().attr("title")); [EOL]     assertEquals("there", foos.last().text()); [EOL] }
@Test [EOL] public void handlesUnknownTags() { [EOL]     String h = "<div><foo title=bar>Hello<foo title=qux>there</foo></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements foos = doc.select("foo"); [EOL]     assertEquals(2, foos.size()); [EOL]     assertEquals("bar", foos.first().attr("title")); [EOL]     assertEquals("qux", foos.last().attr("title")); [EOL]     assertEquals("there", foos.last().text()); [EOL] }
@Test [EOL] public void handlesUnknownInlineTags() { [EOL]     String h = "<p><cust>Test</cust></p><p><cust><cust>Test</cust></cust></p>"; [EOL]     Document doc = Jsoup.parseBodyFragment(h); [EOL]     String out = doc.body().html(); [EOL]     assertEquals(h, TextUtil.stripNewlines(out)); [EOL] }
@Test [EOL] public void handlesUnknownTags() { [EOL]     String h = "<div><foo title=bar>Hello<foo title=qux>there</foo></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements foos = doc.select("foo"); [EOL]     assertEquals(2, foos.size()); [EOL]     assertEquals("bar", foos.first().attr("title")); [EOL]     assertEquals("qux", foos.last().attr("title")); [EOL]     assertEquals("there", foos.last().text()); [EOL] }
@Test [EOL] public void handlesUnknownTags() { [EOL]     String h = "<div><foo title=bar>Hello<foo title=qux>there</foo></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements foos = doc.select("foo"); [EOL]     assertEquals(2, foos.size()); [EOL]     assertEquals("bar", foos.first().attr("title")); [EOL]     assertEquals("qux", foos.last().attr("title")); [EOL]     assertEquals("there", foos.last().text()); [EOL] }
@Test [EOL] public void handlesUnknownTags() { [EOL]     String h = "<div><foo title=bar>Hello<foo title=qux>there</foo></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements foos = doc.select("foo"); [EOL]     assertEquals(2, foos.size()); [EOL]     assertEquals("bar", foos.first().attr("title")); [EOL]     assertEquals("qux", foos.last().attr("title")); [EOL]     assertEquals("there", foos.last().text()); [EOL] }
@Test [EOL] public void handlesUnknownTags() { [EOL]     String h = "<div><foo title=bar>Hello<foo title=qux>there</foo></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements foos = doc.select("foo"); [EOL]     assertEquals(2, foos.size()); [EOL]     assertEquals("bar", foos.first().attr("title")); [EOL]     assertEquals("qux", foos.last().attr("title")); [EOL]     assertEquals("there", foos.last().text()); [EOL] }
@Test [EOL] public void handlesUnknownTags() { [EOL]     String h = "<div><foo title=bar>Hello<foo title=qux>there</foo></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements foos = doc.select("foo"); [EOL]     assertEquals(2, foos.size()); [EOL]     assertEquals("bar", foos.first().attr("title")); [EOL]     assertEquals("qux", foos.last().attr("title")); [EOL]     assertEquals("there", foos.last().text()); [EOL] }
@Test [EOL] public void handlesUnknownTags() { [EOL]     String h = "<div><foo title=bar>Hello<foo title=qux>there</foo></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements foos = doc.select("foo"); [EOL]     assertEquals(2, foos.size()); [EOL]     assertEquals("bar", foos.first().attr("title")); [EOL]     assertEquals("qux", foos.last().attr("title")); [EOL]     assertEquals("there", foos.last().text()); [EOL] }
@Test [EOL] public void handlesUnknownTags() { [EOL]     String h = "<div><foo title=bar>Hello<foo title=qux>there</foo></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements foos = doc.select("foo"); [EOL]     assertEquals(2, foos.size()); [EOL]     assertEquals("bar", foos.first().attr("title")); [EOL]     assertEquals("qux", foos.last().attr("title")); [EOL]     assertEquals("there", foos.last().text()); [EOL] }
@Test [EOL] public void handlesUnknownTags() { [EOL]     String h = "<div><foo title=bar>Hello<foo title=qux>there</foo></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements foos = doc.select("foo"); [EOL]     assertEquals(2, foos.size()); [EOL]     assertEquals("bar", foos.first().attr("title")); [EOL]     assertEquals("qux", foos.last().attr("title")); [EOL]     assertEquals("there", foos.last().text()); [EOL] }
@Test [EOL] public void handlesUnknownTags() { [EOL]     String h = "<div><foo title=bar>Hello<foo title=qux>there</foo></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements foos = doc.select("foo"); [EOL]     assertEquals(2, foos.size()); [EOL]     assertEquals("bar", foos.first().attr("title")); [EOL]     assertEquals("qux", foos.last().attr("title")); [EOL]     assertEquals("there", foos.last().text()); [EOL] }
@Test [EOL] public void handlesUnknownTags() { [EOL]     String h = "<div><foo title=bar>Hello<foo title=qux>there</foo></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements foos = doc.select("foo"); [EOL]     assertEquals(2, foos.size()); [EOL]     assertEquals("bar", foos.first().attr("title")); [EOL]     assertEquals("qux", foos.last().attr("title")); [EOL]     assertEquals("there", foos.last().text()); [EOL] }
@Test [EOL] public void handlesUnknownTags() { [EOL]     String h = "<div><foo title=bar>Hello<foo title=qux>there</foo></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements foos = doc.select("foo"); [EOL]     assertEquals(2, foos.size()); [EOL]     assertEquals("bar", foos.first().attr("title")); [EOL]     assertEquals("qux", foos.last().attr("title")); [EOL]     assertEquals("there", foos.last().text()); [EOL] }
@Test [EOL] public void handlesUnknownTags() { [EOL]     String h = "<div><foo title=bar>Hello<foo title=qux>there</foo></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements foos = doc.select("foo"); [EOL]     assertEquals(2, foos.size()); [EOL]     assertEquals("bar", foos.first().attr("title")); [EOL]     assertEquals("qux", foos.last().attr("title")); [EOL]     assertEquals("there", foos.last().text()); [EOL] }
@Test [EOL] public void handlesUnknownTags() { [EOL]     String h = "<div><foo title=bar>Hello<foo title=qux>there</foo></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements foos = doc.select("foo"); [EOL]     assertEquals(2, foos.size()); [EOL]     assertEquals("bar", foos.first().attr("title")); [EOL]     assertEquals("qux", foos.last().attr("title")); [EOL]     assertEquals("there", foos.last().text()); [EOL] }
@Test [EOL] public void handlesUnknownTags() { [EOL]     String h = "<div><foo title=bar>Hello<foo title=qux>there</foo></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements foos = doc.select("foo"); [EOL]     assertEquals(2, foos.size()); [EOL]     assertEquals("bar", foos.first().attr("title")); [EOL]     assertEquals("qux", foos.last().attr("title")); [EOL]     assertEquals("there", foos.last().text()); [EOL] }
@Test [EOL] public void handlesUnknownTags() { [EOL]     String h = "<div><foo title=bar>Hello<foo title=qux>there</foo></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements foos = doc.select("foo"); [EOL]     assertEquals(2, foos.size()); [EOL]     assertEquals("bar", foos.first().attr("title")); [EOL]     assertEquals("qux", foos.last().attr("title")); [EOL]     assertEquals("there", foos.last().text()); [EOL] }
@Test [EOL] public void handlesUnknownTags() { [EOL]     String h = "<div><foo title=bar>Hello<foo title=qux>there</foo></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements foos = doc.select("foo"); [EOL]     assertEquals(2, foos.size()); [EOL]     assertEquals("bar", foos.first().attr("title")); [EOL]     assertEquals("qux", foos.last().attr("title")); [EOL]     assertEquals("there", foos.last().text()); [EOL] }
@Test [EOL] public void handlesUnknownTags() { [EOL]     String h = "<div><foo title=bar>Hello<foo title=qux>there</foo></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements foos = doc.select("foo"); [EOL]     assertEquals(2, foos.size()); [EOL]     assertEquals("bar", foos.first().attr("title")); [EOL]     assertEquals("qux", foos.last().attr("title")); [EOL]     assertEquals("there", foos.last().text()); [EOL] }
@Test [EOL] public void handlesUnknownTags() { [EOL]     String h = "<div><foo title=bar>Hello<foo title=qux>there</foo></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements foos = doc.select("foo"); [EOL]     assertEquals(2, foos.size()); [EOL]     assertEquals("bar", foos.first().attr("title")); [EOL]     assertEquals("qux", foos.last().attr("title")); [EOL]     assertEquals("there", foos.last().text()); [EOL] }
@Test [EOL] public void handlesUnknownTags() { [EOL]     String h = "<div><foo title=bar>Hello<foo title=qux>there</foo></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements foos = doc.select("foo"); [EOL]     assertEquals(2, foos.size()); [EOL]     assertEquals("bar", foos.first().attr("title")); [EOL]     assertEquals("qux", foos.last().attr("title")); [EOL]     assertEquals("there", foos.last().text()); [EOL] }
@Test [EOL] public void handlesUnknownTags() { [EOL]     String h = "<div><foo title=bar>Hello<foo title=qux>there</foo></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements foos = doc.select("foo"); [EOL]     assertEquals(2, foos.size()); [EOL]     assertEquals("bar", foos.first().attr("title")); [EOL]     assertEquals("qux", foos.last().attr("title")); [EOL]     assertEquals("there", foos.last().text()); [EOL] }
@Test [EOL] public void parsesUnterminatedComments() { [EOL]     String html = "<p>Hello<!-- <tr><td>"; [EOL]     Document doc = Jsoup.parse(html); [EOL]     Element p = doc.getElementsByTag("p").get(0); [EOL]     assertEquals("Hello", p.text()); [EOL]     TextNode text = (TextNode) p.childNode(0); [EOL]     assertEquals("Hello", text.getWholeText()); [EOL]     Comment comment = (Comment) p.childNode(1); [EOL]     assertEquals(" <tr><td>", comment.getData()); [EOL] }
@Test [EOL] public void handlesUnknownInlineTags() { [EOL]     String h = "<p><cust>Test</cust></p><p><cust><cust>Test</cust></cust></p>"; [EOL]     Document doc = Jsoup.parseBodyFragment(h); [EOL]     String out = doc.body().html(); [EOL]     assertEquals(h, TextUtil.stripNewlines(out)); [EOL] }
@Test [EOL] public void parsesUnterminatedAttribute() { [EOL]     String h1 = "<p id=\"foo"; [EOL]     Document doc = Jsoup.parse(h1); [EOL]     Element p = doc.getElementById("foo"); [EOL]     assertNotNull(p); [EOL]     assertEquals("p", p.tagName()); [EOL] }
@Test [EOL] public void parsesUnterminatedAttribute() { [EOL]     String h1 = "<p id=\"foo"; [EOL]     Document doc = Jsoup.parse(h1); [EOL]     Element p = doc.getElementById("foo"); [EOL]     assertNotNull(p); [EOL]     assertEquals("p", p.tagName()); [EOL] }
@Test [EOL] public void parsesUnterminatedAttribute() { [EOL]     String h1 = "<p id=\"foo"; [EOL]     Document doc = Jsoup.parse(h1); [EOL]     Element p = doc.getElementById("foo"); [EOL]     assertNotNull(p); [EOL]     assertEquals("p", p.tagName()); [EOL] }
@Test [EOL] public void parsesUnterminatedAttribute() { [EOL]     String h1 = "<p id=\"foo"; [EOL]     Document doc = Jsoup.parse(h1); [EOL]     Element p = doc.getElementById("foo"); [EOL]     assertNotNull(p); [EOL]     assertEquals("p", p.tagName()); [EOL] }
@Test [EOL] public void basicBehaviourTest() { [EOL]     String h = "<div><p><a href='javascript:sendAllMoney()'>Dodgy</a> <A HREF='HTTP://nice.com'>Nice</p><blockquote>Hello</blockquote>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basic()); [EOL]     assertEquals("<p><a rel=\"nofollow\">Dodgy</a> <a href=\"http://nice.com\" rel=\"nofollow\">Nice</a></p><blockquote>Hello</blockquote>", TextUtil.stripNewlines(cleanHtml)); [EOL] }
@Test [EOL] public void basicBehaviourTest() { [EOL]     String h = "<div><p><a href='javascript:sendAllMoney()'>Dodgy</a> <A HREF='HTTP://nice.com'>Nice</p><blockquote>Hello</blockquote>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basic()); [EOL]     assertEquals("<p><a rel=\"nofollow\">Dodgy</a> <a href=\"http://nice.com\" rel=\"nofollow\">Nice</a></p><blockquote>Hello</blockquote>", TextUtil.stripNewlines(cleanHtml)); [EOL] }
@Test [EOL] public void basicBehaviourTest() { [EOL]     String h = "<div><p><a href='javascript:sendAllMoney()'>Dodgy</a> <A HREF='HTTP://nice.com'>Nice</p><blockquote>Hello</blockquote>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basic()); [EOL]     assertEquals("<p><a rel=\"nofollow\">Dodgy</a> <a href=\"http://nice.com\" rel=\"nofollow\">Nice</a></p><blockquote>Hello</blockquote>", TextUtil.stripNewlines(cleanHtml)); [EOL] }
@Test [EOL] public void basicBehaviourTest() { [EOL]     String h = "<div><p><a href='javascript:sendAllMoney()'>Dodgy</a> <A HREF='HTTP://nice.com'>Nice</p><blockquote>Hello</blockquote>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basic()); [EOL]     assertEquals("<p><a rel=\"nofollow\">Dodgy</a> <a href=\"http://nice.com\" rel=\"nofollow\">Nice</a></p><blockquote>Hello</blockquote>", TextUtil.stripNewlines(cleanHtml)); [EOL] }
@Test [EOL] public void basicBehaviourTest() { [EOL]     String h = "<div><p><a href='javascript:sendAllMoney()'>Dodgy</a> <A HREF='HTTP://nice.com'>Nice</p><blockquote>Hello</blockquote>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basic()); [EOL]     assertEquals("<p><a rel=\"nofollow\">Dodgy</a> <a href=\"http://nice.com\" rel=\"nofollow\">Nice</a></p><blockquote>Hello</blockquote>", TextUtil.stripNewlines(cleanHtml)); [EOL] }
@Test [EOL] public void basicBehaviourTest() { [EOL]     String h = "<div><p><a href='javascript:sendAllMoney()'>Dodgy</a> <A HREF='HTTP://nice.com'>Nice</p><blockquote>Hello</blockquote>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basic()); [EOL]     assertEquals("<p><a rel=\"nofollow\">Dodgy</a> <a href=\"http://nice.com\" rel=\"nofollow\">Nice</a></p><blockquote>Hello</blockquote>", TextUtil.stripNewlines(cleanHtml)); [EOL] }
@Test [EOL] public void basicBehaviourTest() { [EOL]     String h = "<div><p><a href='javascript:sendAllMoney()'>Dodgy</a> <A HREF='HTTP://nice.com'>Nice</p><blockquote>Hello</blockquote>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basic()); [EOL]     assertEquals("<p><a rel=\"nofollow\">Dodgy</a> <a href=\"http://nice.com\" rel=\"nofollow\">Nice</a></p><blockquote>Hello</blockquote>", TextUtil.stripNewlines(cleanHtml)); [EOL] }
@Test [EOL] public void basicBehaviourTest() { [EOL]     String h = "<div><p><a href='javascript:sendAllMoney()'>Dodgy</a> <A HREF='HTTP://nice.com'>Nice</p><blockquote>Hello</blockquote>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basic()); [EOL]     assertEquals("<p><a rel=\"nofollow\">Dodgy</a> <a href=\"http://nice.com\" rel=\"nofollow\">Nice</a></p><blockquote>Hello</blockquote>", TextUtil.stripNewlines(cleanHtml)); [EOL] }
@Test [EOL] public void basicBehaviourTest() { [EOL]     String h = "<div><p><a href='javascript:sendAllMoney()'>Dodgy</a> <A HREF='HTTP://nice.com'>Nice</p><blockquote>Hello</blockquote>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basic()); [EOL]     assertEquals("<p><a rel=\"nofollow\">Dodgy</a> <a href=\"http://nice.com\" rel=\"nofollow\">Nice</a></p><blockquote>Hello</blockquote>", TextUtil.stripNewlines(cleanHtml)); [EOL] }
@Test [EOL] public void basicBehaviourTest() { [EOL]     String h = "<div><p><a href='javascript:sendAllMoney()'>Dodgy</a> <A HREF='HTTP://nice.com'>Nice</p><blockquote>Hello</blockquote>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basic()); [EOL]     assertEquals("<p><a rel=\"nofollow\">Dodgy</a> <a href=\"http://nice.com\" rel=\"nofollow\">Nice</a></p><blockquote>Hello</blockquote>", TextUtil.stripNewlines(cleanHtml)); [EOL] }
@Test [EOL] public void basicBehaviourTest() { [EOL]     String h = "<div><p><a href='javascript:sendAllMoney()'>Dodgy</a> <A HREF='HTTP://nice.com'>Nice</p><blockquote>Hello</blockquote>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basic()); [EOL]     assertEquals("<p><a rel=\"nofollow\">Dodgy</a> <a href=\"http://nice.com\" rel=\"nofollow\">Nice</a></p><blockquote>Hello</blockquote>", TextUtil.stripNewlines(cleanHtml)); [EOL] }
@Test [EOL] public void basicBehaviourTest() { [EOL]     String h = "<div><p><a href='javascript:sendAllMoney()'>Dodgy</a> <A HREF='HTTP://nice.com'>Nice</p><blockquote>Hello</blockquote>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basic()); [EOL]     assertEquals("<p><a rel=\"nofollow\">Dodgy</a> <a href=\"http://nice.com\" rel=\"nofollow\">Nice</a></p><blockquote>Hello</blockquote>", TextUtil.stripNewlines(cleanHtml)); [EOL] }
@Test [EOL] public void basicBehaviourTest() { [EOL]     String h = "<div><p><a href='javascript:sendAllMoney()'>Dodgy</a> <A HREF='HTTP://nice.com'>Nice</p><blockquote>Hello</blockquote>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basic()); [EOL]     assertEquals("<p><a rel=\"nofollow\">Dodgy</a> <a href=\"http://nice.com\" rel=\"nofollow\">Nice</a></p><blockquote>Hello</blockquote>", TextUtil.stripNewlines(cleanHtml)); [EOL] }
@Test [EOL] public void basicBehaviourTest() { [EOL]     String h = "<div><p><a href='javascript:sendAllMoney()'>Dodgy</a> <A HREF='HTTP://nice.com'>Nice</p><blockquote>Hello</blockquote>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basic()); [EOL]     assertEquals("<p><a rel=\"nofollow\">Dodgy</a> <a href=\"http://nice.com\" rel=\"nofollow\">Nice</a></p><blockquote>Hello</blockquote>", TextUtil.stripNewlines(cleanHtml)); [EOL] }
@Test [EOL] public void basicBehaviourTest() { [EOL]     String h = "<div><p><a href='javascript:sendAllMoney()'>Dodgy</a> <A HREF='HTTP://nice.com'>Nice</p><blockquote>Hello</blockquote>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basic()); [EOL]     assertEquals("<p><a rel=\"nofollow\">Dodgy</a> <a href=\"http://nice.com\" rel=\"nofollow\">Nice</a></p><blockquote>Hello</blockquote>", TextUtil.stripNewlines(cleanHtml)); [EOL] }
@Test [EOL] public void basicBehaviourTest() { [EOL]     String h = "<div><p><a href='javascript:sendAllMoney()'>Dodgy</a> <A HREF='HTTP://nice.com'>Nice</p><blockquote>Hello</blockquote>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basic()); [EOL]     assertEquals("<p><a rel=\"nofollow\">Dodgy</a> <a href=\"http://nice.com\" rel=\"nofollow\">Nice</a></p><blockquote>Hello</blockquote>", TextUtil.stripNewlines(cleanHtml)); [EOL] }
@Test [EOL] public void basicBehaviourTest() { [EOL]     String h = "<div><p><a href='javascript:sendAllMoney()'>Dodgy</a> <A HREF='HTTP://nice.com'>Nice</p><blockquote>Hello</blockquote>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basic()); [EOL]     assertEquals("<p><a rel=\"nofollow\">Dodgy</a> <a href=\"http://nice.com\" rel=\"nofollow\">Nice</a></p><blockquote>Hello</blockquote>", TextUtil.stripNewlines(cleanHtml)); [EOL] }
@Test [EOL] public void basicBehaviourTest() { [EOL]     String h = "<div><p><a href='javascript:sendAllMoney()'>Dodgy</a> <A HREF='HTTP://nice.com'>Nice</p><blockquote>Hello</blockquote>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basic()); [EOL]     assertEquals("<p><a rel=\"nofollow\">Dodgy</a> <a href=\"http://nice.com\" rel=\"nofollow\">Nice</a></p><blockquote>Hello</blockquote>", TextUtil.stripNewlines(cleanHtml)); [EOL] }
@Test [EOL] public void basicBehaviourTest() { [EOL]     String h = "<div><p><a href='javascript:sendAllMoney()'>Dodgy</a> <A HREF='HTTP://nice.com'>Nice</p><blockquote>Hello</blockquote>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basic()); [EOL]     assertEquals("<p><a rel=\"nofollow\">Dodgy</a> <a href=\"http://nice.com\" rel=\"nofollow\">Nice</a></p><blockquote>Hello</blockquote>", TextUtil.stripNewlines(cleanHtml)); [EOL] }
@Test [EOL] public void basicBehaviourTest() { [EOL]     String h = "<div><p><a href='javascript:sendAllMoney()'>Dodgy</a> <A HREF='HTTP://nice.com'>Nice</p><blockquote>Hello</blockquote>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basic()); [EOL]     assertEquals("<p><a rel=\"nofollow\">Dodgy</a> <a href=\"http://nice.com\" rel=\"nofollow\">Nice</a></p><blockquote>Hello</blockquote>", TextUtil.stripNewlines(cleanHtml)); [EOL] }
@Test [EOL] public void basicBehaviourTest() { [EOL]     String h = "<div><p><a href='javascript:sendAllMoney()'>Dodgy</a> <A HREF='HTTP://nice.com'>Nice</p><blockquote>Hello</blockquote>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basic()); [EOL]     assertEquals("<p><a rel=\"nofollow\">Dodgy</a> <a href=\"http://nice.com\" rel=\"nofollow\">Nice</a></p><blockquote>Hello</blockquote>", TextUtil.stripNewlines(cleanHtml)); [EOL] }
@Test [EOL] public void basicBehaviourTest() { [EOL]     String h = "<div><p><a href='javascript:sendAllMoney()'>Dodgy</a> <A HREF='HTTP://nice.com'>Nice</p><blockquote>Hello</blockquote>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basic()); [EOL]     assertEquals("<p><a rel=\"nofollow\">Dodgy</a> <a href=\"http://nice.com\" rel=\"nofollow\">Nice</a></p><blockquote>Hello</blockquote>", TextUtil.stripNewlines(cleanHtml)); [EOL] }
@Test [EOL] public void basicBehaviourTest() { [EOL]     String h = "<div><p><a href='javascript:sendAllMoney()'>Dodgy</a> <A HREF='HTTP://nice.com'>Nice</p><blockquote>Hello</blockquote>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basic()); [EOL]     assertEquals("<p><a rel=\"nofollow\">Dodgy</a> <a href=\"http://nice.com\" rel=\"nofollow\">Nice</a></p><blockquote>Hello</blockquote>", TextUtil.stripNewlines(cleanHtml)); [EOL] }
@Test [EOL] public void basicBehaviourTest() { [EOL]     String h = "<div><p><a href='javascript:sendAllMoney()'>Dodgy</a> <A HREF='HTTP://nice.com'>Nice</p><blockquote>Hello</blockquote>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basic()); [EOL]     assertEquals("<p><a rel=\"nofollow\">Dodgy</a> <a href=\"http://nice.com\" rel=\"nofollow\">Nice</a></p><blockquote>Hello</blockquote>", TextUtil.stripNewlines(cleanHtml)); [EOL] }
@Test [EOL] public void basicBehaviourTest() { [EOL]     String h = "<div><p><a href='javascript:sendAllMoney()'>Dodgy</a> <A HREF='HTTP://nice.com'>Nice</p><blockquote>Hello</blockquote>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basic()); [EOL]     assertEquals("<p><a rel=\"nofollow\">Dodgy</a> <a href=\"http://nice.com\" rel=\"nofollow\">Nice</a></p><blockquote>Hello</blockquote>", TextUtil.stripNewlines(cleanHtml)); [EOL] }
@Test [EOL] public void basicBehaviourTest() { [EOL]     String h = "<div><p><a href='javascript:sendAllMoney()'>Dodgy</a> <A HREF='HTTP://nice.com'>Nice</p><blockquote>Hello</blockquote>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basic()); [EOL]     assertEquals("<p><a rel=\"nofollow\">Dodgy</a> <a href=\"http://nice.com\" rel=\"nofollow\">Nice</a></p><blockquote>Hello</blockquote>", TextUtil.stripNewlines(cleanHtml)); [EOL] }
@Test [EOL] public void basicBehaviourTest() { [EOL]     String h = "<div><p><a href='javascript:sendAllMoney()'>Dodgy</a> <A HREF='HTTP://nice.com'>Nice</p><blockquote>Hello</blockquote>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basic()); [EOL]     assertEquals("<p><a rel=\"nofollow\">Dodgy</a> <a href=\"http://nice.com\" rel=\"nofollow\">Nice</a></p><blockquote>Hello</blockquote>", TextUtil.stripNewlines(cleanHtml)); [EOL] }
@Test [EOL] public void basicBehaviourTest() { [EOL]     String h = "<div><p><a href='javascript:sendAllMoney()'>Dodgy</a> <A HREF='HTTP://nice.com'>Nice</p><blockquote>Hello</blockquote>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basic()); [EOL]     assertEquals("<p><a rel=\"nofollow\">Dodgy</a> <a href=\"http://nice.com\" rel=\"nofollow\">Nice</a></p><blockquote>Hello</blockquote>", TextUtil.stripNewlines(cleanHtml)); [EOL] }
@Test [EOL] public void basicBehaviourTest() { [EOL]     String h = "<div><p><a href='javascript:sendAllMoney()'>Dodgy</a> <A HREF='HTTP://nice.com'>Nice</p><blockquote>Hello</blockquote>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basic()); [EOL]     assertEquals("<p><a rel=\"nofollow\">Dodgy</a> <a href=\"http://nice.com\" rel=\"nofollow\">Nice</a></p><blockquote>Hello</blockquote>", TextUtil.stripNewlines(cleanHtml)); [EOL] }
@Test [EOL] public void basicBehaviourTest() { [EOL]     String h = "<div><p><a href='javascript:sendAllMoney()'>Dodgy</a> <A HREF='HTTP://nice.com'>Nice</p><blockquote>Hello</blockquote>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basic()); [EOL]     assertEquals("<p><a rel=\"nofollow\">Dodgy</a> <a href=\"http://nice.com\" rel=\"nofollow\">Nice</a></p><blockquote>Hello</blockquote>", TextUtil.stripNewlines(cleanHtml)); [EOL] }
@Test [EOL] public void basicBehaviourTest() { [EOL]     String h = "<div><p><a href='javascript:sendAllMoney()'>Dodgy</a> <A HREF='HTTP://nice.com'>Nice</p><blockquote>Hello</blockquote>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basic()); [EOL]     assertEquals("<p><a rel=\"nofollow\">Dodgy</a> <a href=\"http://nice.com\" rel=\"nofollow\">Nice</a></p><blockquote>Hello</blockquote>", TextUtil.stripNewlines(cleanHtml)); [EOL] }
@Test [EOL] public void basicBehaviourTest() { [EOL]     String h = "<div><p><a href='javascript:sendAllMoney()'>Dodgy</a> <A HREF='HTTP://nice.com'>Nice</p><blockquote>Hello</blockquote>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basic()); [EOL]     assertEquals("<p><a rel=\"nofollow\">Dodgy</a> <a href=\"http://nice.com\" rel=\"nofollow\">Nice</a></p><blockquote>Hello</blockquote>", TextUtil.stripNewlines(cleanHtml)); [EOL] }
@Test [EOL] public void basicBehaviourTest() { [EOL]     String h = "<div><p><a href='javascript:sendAllMoney()'>Dodgy</a> <A HREF='HTTP://nice.com'>Nice</p><blockquote>Hello</blockquote>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basic()); [EOL]     assertEquals("<p><a rel=\"nofollow\">Dodgy</a> <a href=\"http://nice.com\" rel=\"nofollow\">Nice</a></p><blockquote>Hello</blockquote>", TextUtil.stripNewlines(cleanHtml)); [EOL] }
@Test [EOL] public void basicBehaviourTest() { [EOL]     String h = "<div><p><a href='javascript:sendAllMoney()'>Dodgy</a> <A HREF='HTTP://nice.com'>Nice</p><blockquote>Hello</blockquote>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basic()); [EOL]     assertEquals("<p><a rel=\"nofollow\">Dodgy</a> <a href=\"http://nice.com\" rel=\"nofollow\">Nice</a></p><blockquote>Hello</blockquote>", TextUtil.stripNewlines(cleanHtml)); [EOL] }
@Test [EOL] public void basicBehaviourTest() { [EOL]     String h = "<div><p><a href='javascript:sendAllMoney()'>Dodgy</a> <A HREF='HTTP://nice.com'>Nice</p><blockquote>Hello</blockquote>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basic()); [EOL]     assertEquals("<p><a rel=\"nofollow\">Dodgy</a> <a href=\"http://nice.com\" rel=\"nofollow\">Nice</a></p><blockquote>Hello</blockquote>", TextUtil.stripNewlines(cleanHtml)); [EOL] }
@Test [EOL] public void basicBehaviourTest() { [EOL]     String h = "<div><p><a href='javascript:sendAllMoney()'>Dodgy</a> <A HREF='HTTP://nice.com'>Nice</p><blockquote>Hello</blockquote>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basic()); [EOL]     assertEquals("<p><a rel=\"nofollow\">Dodgy</a> <a href=\"http://nice.com\" rel=\"nofollow\">Nice</a></p><blockquote>Hello</blockquote>", TextUtil.stripNewlines(cleanHtml)); [EOL] }
@Test [EOL] public void basicBehaviourTest() { [EOL]     String h = "<div><p><a href='javascript:sendAllMoney()'>Dodgy</a> <A HREF='HTTP://nice.com'>Nice</p><blockquote>Hello</blockquote>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basic()); [EOL]     assertEquals("<p><a rel=\"nofollow\">Dodgy</a> <a href=\"http://nice.com\" rel=\"nofollow\">Nice</a></p><blockquote>Hello</blockquote>", TextUtil.stripNewlines(cleanHtml)); [EOL] }
@Test [EOL] public void basicBehaviourTest() { [EOL]     String h = "<div><p><a href='javascript:sendAllMoney()'>Dodgy</a> <A HREF='HTTP://nice.com'>Nice</p><blockquote>Hello</blockquote>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basic()); [EOL]     assertEquals("<p><a rel=\"nofollow\">Dodgy</a> <a href=\"http://nice.com\" rel=\"nofollow\">Nice</a></p><blockquote>Hello</blockquote>", TextUtil.stripNewlines(cleanHtml)); [EOL] }
@Test [EOL] public void basicBehaviourTest() { [EOL]     String h = "<div><p><a href='javascript:sendAllMoney()'>Dodgy</a> <A HREF='HTTP://nice.com'>Nice</p><blockquote>Hello</blockquote>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basic()); [EOL]     assertEquals("<p><a rel=\"nofollow\">Dodgy</a> <a href=\"http://nice.com\" rel=\"nofollow\">Nice</a></p><blockquote>Hello</blockquote>", TextUtil.stripNewlines(cleanHtml)); [EOL] }
@Test [EOL] public void basicBehaviourTest() { [EOL]     String h = "<div><p><a href='javascript:sendAllMoney()'>Dodgy</a> <A HREF='HTTP://nice.com'>Nice</p><blockquote>Hello</blockquote>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basic()); [EOL]     assertEquals("<p><a rel=\"nofollow\">Dodgy</a> <a href=\"http://nice.com\" rel=\"nofollow\">Nice</a></p><blockquote>Hello</blockquote>", TextUtil.stripNewlines(cleanHtml)); [EOL] }
@Test [EOL] public void basicBehaviourTest() { [EOL]     String h = "<div><p><a href='javascript:sendAllMoney()'>Dodgy</a> <A HREF='HTTP://nice.com'>Nice</p><blockquote>Hello</blockquote>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basic()); [EOL]     assertEquals("<p><a rel=\"nofollow\">Dodgy</a> <a href=\"http://nice.com\" rel=\"nofollow\">Nice</a></p><blockquote>Hello</blockquote>", TextUtil.stripNewlines(cleanHtml)); [EOL] }
@Test [EOL] public void basicBehaviourTest() { [EOL]     String h = "<div><p><a href='javascript:sendAllMoney()'>Dodgy</a> <A HREF='HTTP://nice.com'>Nice</p><blockquote>Hello</blockquote>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basic()); [EOL]     assertEquals("<p><a rel=\"nofollow\">Dodgy</a> <a href=\"http://nice.com\" rel=\"nofollow\">Nice</a></p><blockquote>Hello</blockquote>", TextUtil.stripNewlines(cleanHtml)); [EOL] }
@Test [EOL] public void basicBehaviourTest() { [EOL]     String h = "<div><p><a href='javascript:sendAllMoney()'>Dodgy</a> <A HREF='HTTP://nice.com'>Nice</p><blockquote>Hello</blockquote>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basic()); [EOL]     assertEquals("<p><a rel=\"nofollow\">Dodgy</a> <a href=\"http://nice.com\" rel=\"nofollow\">Nice</a></p><blockquote>Hello</blockquote>", TextUtil.stripNewlines(cleanHtml)); [EOL] }
@Test [EOL] public void basicBehaviourTest() { [EOL]     String h = "<div><p><a href='javascript:sendAllMoney()'>Dodgy</a> <A HREF='HTTP://nice.com'>Nice</p><blockquote>Hello</blockquote>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basic()); [EOL]     assertEquals("<p><a rel=\"nofollow\">Dodgy</a> <a href=\"http://nice.com\" rel=\"nofollow\">Nice</a></p><blockquote>Hello</blockquote>", TextUtil.stripNewlines(cleanHtml)); [EOL] }
@Test [EOL] public void basicBehaviourTest() { [EOL]     String h = "<div><p><a href='javascript:sendAllMoney()'>Dodgy</a> <A HREF='HTTP://nice.com'>Nice</p><blockquote>Hello</blockquote>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basic()); [EOL]     assertEquals("<p><a rel=\"nofollow\">Dodgy</a> <a href=\"http://nice.com\" rel=\"nofollow\">Nice</a></p><blockquote>Hello</blockquote>", TextUtil.stripNewlines(cleanHtml)); [EOL] }
@Test [EOL] public void isSafeTagTest() { [EOL]     String h = "<div><p><a href='javascript:sendAllMoney()'>Dodgy</a> <A HREF='HTTP://nice.com'>Nice</p><blockquote>Hello</blockquote>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basic()); [EOL]     assertEquals("<p><a rel=\"nofollow\">Dodgy</a> <a href=\"http://nice.com\" rel=\"nofollow\">Nice</a></p><blockquote>Hello</blockquote>", TextUtil.stripNewlines(cleanHtml)); [EOL] }
@Test [EOL] public void basicBehaviourTest() { [EOL]     String h = "<div><p><a href='javascript:sendAllMoney()'>Dodgy</a> <A HREF='HTTP://nice.com'>Nice</p><blockquote>Hello</blockquote>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basic()); [EOL]     assertEquals("<p><a rel=\"nofollow\">Dodgy</a> <a href=\"http://nice.com\" rel=\"nofollow\">Nice</a></p><blockquote>Hello</blockquote>", TextUtil.stripNewlines(cleanHtml)); [EOL] }
@Test [EOL] public void testIsValid() { [EOL]     String ok = "<p>Test <b><a href='http://example.com/'>OK</a></b></p>"; [EOL]     String nok1 = "<p><script></script>Not <b>OK</b></p>"; [EOL]     String nok2 = "<p align=right>Test Not <b>OK</b></p>"; [EOL]     assertTrue(Jsoup.isValid(ok, Whitelist.basic())); [EOL]     assertFalse(Jsoup.isValid(nok1, Whitelist.basic())); [EOL]     assertFalse(Jsoup.isValid(nok2, Whitelist.basic())); [EOL] }
@Test [EOL] public void testIsValid() { [EOL]     String ok = "<p>Test <b><a href='http://example.com/'>OK</a></b></p>"; [EOL]     String nok1 = "<p><script></script>Not <b>OK</b></p>"; [EOL]     String nok2 = "<p align=right>Test Not <b>OK</b></p>"; [EOL]     assertTrue(Jsoup.isValid(ok, Whitelist.basic())); [EOL]     assertFalse(Jsoup.isValid(nok1, Whitelist.basic())); [EOL]     assertFalse(Jsoup.isValid(nok2, Whitelist.basic())); [EOL] }
@Test [EOL] public void testIsValid() { [EOL]     String ok = "<p>Test <b><a href='http://example.com/'>OK</a></b></p>"; [EOL]     String nok1 = "<p><script></script>Not <b>OK</b></p>"; [EOL]     String nok2 = "<p align=right>Test Not <b>OK</b></p>"; [EOL]     assertTrue(Jsoup.isValid(ok, Whitelist.basic())); [EOL]     assertFalse(Jsoup.isValid(nok1, Whitelist.basic())); [EOL]     assertFalse(Jsoup.isValid(nok2, Whitelist.basic())); [EOL] }
@Test [EOL] public void testIsValid() { [EOL]     String ok = "<p>Test <b><a href='http://example.com/'>OK</a></b></p>"; [EOL]     String nok1 = "<p><script></script>Not <b>OK</b></p>"; [EOL]     String nok2 = "<p align=right>Test Not <b>OK</b></p>"; [EOL]     assertTrue(Jsoup.isValid(ok, Whitelist.basic())); [EOL]     assertFalse(Jsoup.isValid(nok1, Whitelist.basic())); [EOL]     assertFalse(Jsoup.isValid(nok2, Whitelist.basic())); [EOL] }
@Test [EOL] public void testIsValid() { [EOL]     String ok = "<p>Test <b><a href='http://example.com/'>OK</a></b></p>"; [EOL]     String nok1 = "<p><script></script>Not <b>OK</b></p>"; [EOL]     String nok2 = "<p align=right>Test Not <b>OK</b></p>"; [EOL]     assertTrue(Jsoup.isValid(ok, Whitelist.basic())); [EOL]     assertFalse(Jsoup.isValid(nok1, Whitelist.basic())); [EOL]     assertFalse(Jsoup.isValid(nok2, Whitelist.basic())); [EOL] }
@Test [EOL] public void testIsValid() { [EOL]     String ok = "<p>Test <b><a href='http://example.com/'>OK</a></b></p>"; [EOL]     String nok1 = "<p><script></script>Not <b>OK</b></p>"; [EOL]     String nok2 = "<p align=right>Test Not <b>OK</b></p>"; [EOL]     assertTrue(Jsoup.isValid(ok, Whitelist.basic())); [EOL]     assertFalse(Jsoup.isValid(nok1, Whitelist.basic())); [EOL]     assertFalse(Jsoup.isValid(nok2, Whitelist.basic())); [EOL] }
@Test [EOL] public void testIsValid() { [EOL]     String ok = "<p>Test <b><a href='http://example.com/'>OK</a></b></p>"; [EOL]     String nok1 = "<p><script></script>Not <b>OK</b></p>"; [EOL]     String nok2 = "<p align=right>Test Not <b>OK</b></p>"; [EOL]     assertTrue(Jsoup.isValid(ok, Whitelist.basic())); [EOL]     assertFalse(Jsoup.isValid(nok1, Whitelist.basic())); [EOL]     assertFalse(Jsoup.isValid(nok2, Whitelist.basic())); [EOL] }
@Test [EOL] public void testIsValid() { [EOL]     String ok = "<p>Test <b><a href='http://example.com/'>OK</a></b></p>"; [EOL]     String nok1 = "<p><script></script>Not <b>OK</b></p>"; [EOL]     String nok2 = "<p align=right>Test Not <b>OK</b></p>"; [EOL]     assertTrue(Jsoup.isValid(ok, Whitelist.basic())); [EOL]     assertFalse(Jsoup.isValid(nok1, Whitelist.basic())); [EOL]     assertFalse(Jsoup.isValid(nok2, Whitelist.basic())); [EOL] }
@Test [EOL] public void basicBehaviourTest() { [EOL]     String h = "<div><p><a href='javascript:sendAllMoney()'>Dodgy</a> <A HREF='HTTP://nice.com'>Nice</p><blockquote>Hello</blockquote>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basic()); [EOL]     assertEquals("<p><a rel=\"nofollow\">Dodgy</a> <a href=\"http://nice.com\" rel=\"nofollow\">Nice</a></p><blockquote>Hello</blockquote>", TextUtil.stripNewlines(cleanHtml)); [EOL] }
@Test [EOL] public void basicBehaviourTest() { [EOL]     String h = "<div><p><a href='javascript:sendAllMoney()'>Dodgy</a> <A HREF='HTTP://nice.com'>Nice</p><blockquote>Hello</blockquote>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basic()); [EOL]     assertEquals("<p><a rel=\"nofollow\">Dodgy</a> <a href=\"http://nice.com\" rel=\"nofollow\">Nice</a></p><blockquote>Hello</blockquote>", TextUtil.stripNewlines(cleanHtml)); [EOL] }
@Test [EOL] public void basicBehaviourTest() { [EOL]     String h = "<div><p><a href='javascript:sendAllMoney()'>Dodgy</a> <A HREF='HTTP://nice.com'>Nice</p><blockquote>Hello</blockquote>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basic()); [EOL]     assertEquals("<p><a rel=\"nofollow\">Dodgy</a> <a href=\"http://nice.com\" rel=\"nofollow\">Nice</a></p><blockquote>Hello</blockquote>", TextUtil.stripNewlines(cleanHtml)); [EOL] }
@Test [EOL] public void basicBehaviourTest() { [EOL]     String h = "<div><p><a href='javascript:sendAllMoney()'>Dodgy</a> <A HREF='HTTP://nice.com'>Nice</p><blockquote>Hello</blockquote>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basic()); [EOL]     assertEquals("<p><a rel=\"nofollow\">Dodgy</a> <a href=\"http://nice.com\" rel=\"nofollow\">Nice</a></p><blockquote>Hello</blockquote>", TextUtil.stripNewlines(cleanHtml)); [EOL] }
@Test [EOL] public void basicBehaviourTest() { [EOL]     String h = "<div><p><a href='javascript:sendAllMoney()'>Dodgy</a> <A HREF='HTTP://nice.com'>Nice</p><blockquote>Hello</blockquote>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basic()); [EOL]     assertEquals("<p><a rel=\"nofollow\">Dodgy</a> <a href=\"http://nice.com\" rel=\"nofollow\">Nice</a></p><blockquote>Hello</blockquote>", TextUtil.stripNewlines(cleanHtml)); [EOL] }
@Test [EOL] public void basicBehaviourTest() { [EOL]     String h = "<div><p><a href='javascript:sendAllMoney()'>Dodgy</a> <A HREF='HTTP://nice.com'>Nice</p><blockquote>Hello</blockquote>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basic()); [EOL]     assertEquals("<p><a rel=\"nofollow\">Dodgy</a> <a href=\"http://nice.com\" rel=\"nofollow\">Nice</a></p><blockquote>Hello</blockquote>", TextUtil.stripNewlines(cleanHtml)); [EOL] }
@Test [EOL] public void basicBehaviourTest() { [EOL]     String h = "<div><p><a href='javascript:sendAllMoney()'>Dodgy</a> <A HREF='HTTP://nice.com'>Nice</p><blockquote>Hello</blockquote>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basic()); [EOL]     assertEquals("<p><a rel=\"nofollow\">Dodgy</a> <a href=\"http://nice.com\" rel=\"nofollow\">Nice</a></p><blockquote>Hello</blockquote>", TextUtil.stripNewlines(cleanHtml)); [EOL] }
@Test [EOL] public void basicBehaviourTest() { [EOL]     String h = "<div><p><a href='javascript:sendAllMoney()'>Dodgy</a> <A HREF='HTTP://nice.com'>Nice</p><blockquote>Hello</blockquote>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basic()); [EOL]     assertEquals("<p><a rel=\"nofollow\">Dodgy</a> <a href=\"http://nice.com\" rel=\"nofollow\">Nice</a></p><blockquote>Hello</blockquote>", TextUtil.stripNewlines(cleanHtml)); [EOL] }
@Test [EOL] public void basicBehaviourTest() { [EOL]     String h = "<div><p><a href='javascript:sendAllMoney()'>Dodgy</a> <A HREF='HTTP://nice.com'>Nice</p><blockquote>Hello</blockquote>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basic()); [EOL]     assertEquals("<p><a rel=\"nofollow\">Dodgy</a> <a href=\"http://nice.com\" rel=\"nofollow\">Nice</a></p><blockquote>Hello</blockquote>", TextUtil.stripNewlines(cleanHtml)); [EOL] }
@Test [EOL] public void basicBehaviourTest() { [EOL]     String h = "<div><p><a href='javascript:sendAllMoney()'>Dodgy</a> <A HREF='HTTP://nice.com'>Nice</p><blockquote>Hello</blockquote>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basic()); [EOL]     assertEquals("<p><a rel=\"nofollow\">Dodgy</a> <a href=\"http://nice.com\" rel=\"nofollow\">Nice</a></p><blockquote>Hello</blockquote>", TextUtil.stripNewlines(cleanHtml)); [EOL] }
@Test [EOL] public void basicBehaviourTest() { [EOL]     String h = "<div><p><a href='javascript:sendAllMoney()'>Dodgy</a> <A HREF='HTTP://nice.com'>Nice</p><blockquote>Hello</blockquote>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basic()); [EOL]     assertEquals("<p><a rel=\"nofollow\">Dodgy</a> <a href=\"http://nice.com\" rel=\"nofollow\">Nice</a></p><blockquote>Hello</blockquote>", TextUtil.stripNewlines(cleanHtml)); [EOL] }
@Test [EOL] public void basicBehaviourTest() { [EOL]     String h = "<div><p><a href='javascript:sendAllMoney()'>Dodgy</a> <A HREF='HTTP://nice.com'>Nice</p><blockquote>Hello</blockquote>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basic()); [EOL]     assertEquals("<p><a rel=\"nofollow\">Dodgy</a> <a href=\"http://nice.com\" rel=\"nofollow\">Nice</a></p><blockquote>Hello</blockquote>", TextUtil.stripNewlines(cleanHtml)); [EOL] }
@Test [EOL] public void basicBehaviourTest() { [EOL]     String h = "<div><p><a href='javascript:sendAllMoney()'>Dodgy</a> <A HREF='HTTP://nice.com'>Nice</p><blockquote>Hello</blockquote>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basic()); [EOL]     assertEquals("<p><a rel=\"nofollow\">Dodgy</a> <a href=\"http://nice.com\" rel=\"nofollow\">Nice</a></p><blockquote>Hello</blockquote>", TextUtil.stripNewlines(cleanHtml)); [EOL] }
@Test [EOL] public void basicBehaviourTest() { [EOL]     String h = "<div><p><a href='javascript:sendAllMoney()'>Dodgy</a> <A HREF='HTTP://nice.com'>Nice</p><blockquote>Hello</blockquote>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basic()); [EOL]     assertEquals("<p><a rel=\"nofollow\">Dodgy</a> <a href=\"http://nice.com\" rel=\"nofollow\">Nice</a></p><blockquote>Hello</blockquote>", TextUtil.stripNewlines(cleanHtml)); [EOL] }
@Test [EOL] public void basicBehaviourTest() { [EOL]     String h = "<div><p><a href='javascript:sendAllMoney()'>Dodgy</a> <A HREF='HTTP://nice.com'>Nice</p><blockquote>Hello</blockquote>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basic()); [EOL]     assertEquals("<p><a rel=\"nofollow\">Dodgy</a> <a href=\"http://nice.com\" rel=\"nofollow\">Nice</a></p><blockquote>Hello</blockquote>", TextUtil.stripNewlines(cleanHtml)); [EOL] }
@Test [EOL] public void basicBehaviourTest() { [EOL]     String h = "<div><p><a href='javascript:sendAllMoney()'>Dodgy</a> <A HREF='HTTP://nice.com'>Nice</p><blockquote>Hello</blockquote>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basic()); [EOL]     assertEquals("<p><a rel=\"nofollow\">Dodgy</a> <a href=\"http://nice.com\" rel=\"nofollow\">Nice</a></p><blockquote>Hello</blockquote>", TextUtil.stripNewlines(cleanHtml)); [EOL] }
@Test [EOL] public void basicBehaviourTest() { [EOL]     String h = "<div><p><a href='javascript:sendAllMoney()'>Dodgy</a> <A HREF='HTTP://nice.com'>Nice</p><blockquote>Hello</blockquote>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basic()); [EOL]     assertEquals("<p><a rel=\"nofollow\">Dodgy</a> <a href=\"http://nice.com\" rel=\"nofollow\">Nice</a></p><blockquote>Hello</blockquote>", TextUtil.stripNewlines(cleanHtml)); [EOL] }
@Test [EOL] public void basicBehaviourTest() { [EOL]     String h = "<div><p><a href='javascript:sendAllMoney()'>Dodgy</a> <A HREF='HTTP://nice.com'>Nice</p><blockquote>Hello</blockquote>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basic()); [EOL]     assertEquals("<p><a rel=\"nofollow\">Dodgy</a> <a href=\"http://nice.com\" rel=\"nofollow\">Nice</a></p><blockquote>Hello</blockquote>", TextUtil.stripNewlines(cleanHtml)); [EOL] }
@Test [EOL] public void basicBehaviourTest() { [EOL]     String h = "<div><p><a href='javascript:sendAllMoney()'>Dodgy</a> <A HREF='HTTP://nice.com'>Nice</p><blockquote>Hello</blockquote>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basic()); [EOL]     assertEquals("<p><a rel=\"nofollow\">Dodgy</a> <a href=\"http://nice.com\" rel=\"nofollow\">Nice</a></p><blockquote>Hello</blockquote>", TextUtil.stripNewlines(cleanHtml)); [EOL] }
@Test [EOL] public void basicBehaviourTest() { [EOL]     String h = "<div><p><a href='javascript:sendAllMoney()'>Dodgy</a> <A HREF='HTTP://nice.com'>Nice</p><blockquote>Hello</blockquote>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basic()); [EOL]     assertEquals("<p><a rel=\"nofollow\">Dodgy</a> <a href=\"http://nice.com\" rel=\"nofollow\">Nice</a></p><blockquote>Hello</blockquote>", TextUtil.stripNewlines(cleanHtml)); [EOL] }
@Test [EOL] public void basicBehaviourTest() { [EOL]     String h = "<div><p><a href='javascript:sendAllMoney()'>Dodgy</a> <A HREF='HTTP://nice.com'>Nice</p><blockquote>Hello</blockquote>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basic()); [EOL]     assertEquals("<p><a rel=\"nofollow\">Dodgy</a> <a href=\"http://nice.com\" rel=\"nofollow\">Nice</a></p><blockquote>Hello</blockquote>", TextUtil.stripNewlines(cleanHtml)); [EOL] }
@Test [EOL] public void basicBehaviourTest() { [EOL]     String h = "<div><p><a href='javascript:sendAllMoney()'>Dodgy</a> <A HREF='HTTP://nice.com'>Nice</p><blockquote>Hello</blockquote>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basic()); [EOL]     assertEquals("<p><a rel=\"nofollow\">Dodgy</a> <a href=\"http://nice.com\" rel=\"nofollow\">Nice</a></p><blockquote>Hello</blockquote>", TextUtil.stripNewlines(cleanHtml)); [EOL] }
@Test [EOL] public void basicBehaviourTest() { [EOL]     String h = "<div><p><a href='javascript:sendAllMoney()'>Dodgy</a> <A HREF='HTTP://nice.com'>Nice</p><blockquote>Hello</blockquote>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basic()); [EOL]     assertEquals("<p><a rel=\"nofollow\">Dodgy</a> <a href=\"http://nice.com\" rel=\"nofollow\">Nice</a></p><blockquote>Hello</blockquote>", TextUtil.stripNewlines(cleanHtml)); [EOL] }
@Test [EOL] public void basicBehaviourTest() { [EOL]     String h = "<div><p><a href='javascript:sendAllMoney()'>Dodgy</a> <A HREF='HTTP://nice.com'>Nice</p><blockquote>Hello</blockquote>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basic()); [EOL]     assertEquals("<p><a rel=\"nofollow\">Dodgy</a> <a href=\"http://nice.com\" rel=\"nofollow\">Nice</a></p><blockquote>Hello</blockquote>", TextUtil.stripNewlines(cleanHtml)); [EOL] }
@Test [EOL] public void basicBehaviourTest() { [EOL]     String h = "<div><p><a href='javascript:sendAllMoney()'>Dodgy</a> <A HREF='HTTP://nice.com'>Nice</p><blockquote>Hello</blockquote>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basic()); [EOL]     assertEquals("<p><a rel=\"nofollow\">Dodgy</a> <a href=\"http://nice.com\" rel=\"nofollow\">Nice</a></p><blockquote>Hello</blockquote>", TextUtil.stripNewlines(cleanHtml)); [EOL] }
@Test [EOL] public void basicBehaviourTest() { [EOL]     String h = "<div><p><a href='javascript:sendAllMoney()'>Dodgy</a> <A HREF='HTTP://nice.com'>Nice</p><blockquote>Hello</blockquote>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basic()); [EOL]     assertEquals("<p><a rel=\"nofollow\">Dodgy</a> <a href=\"http://nice.com\" rel=\"nofollow\">Nice</a></p><blockquote>Hello</blockquote>", TextUtil.stripNewlines(cleanHtml)); [EOL] }
@Test [EOL] public void basicBehaviourTest() { [EOL]     String h = "<div><p><a href='javascript:sendAllMoney()'>Dodgy</a> <A HREF='HTTP://nice.com'>Nice</p><blockquote>Hello</blockquote>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basic()); [EOL]     assertEquals("<p><a rel=\"nofollow\">Dodgy</a> <a href=\"http://nice.com\" rel=\"nofollow\">Nice</a></p><blockquote>Hello</blockquote>", TextUtil.stripNewlines(cleanHtml)); [EOL] }
@Test [EOL] public void basicBehaviourTest() { [EOL]     String h = "<div><p><a href='javascript:sendAllMoney()'>Dodgy</a> <A HREF='HTTP://nice.com'>Nice</p><blockquote>Hello</blockquote>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basic()); [EOL]     assertEquals("<p><a rel=\"nofollow\">Dodgy</a> <a href=\"http://nice.com\" rel=\"nofollow\">Nice</a></p><blockquote>Hello</blockquote>", TextUtil.stripNewlines(cleanHtml)); [EOL] }
@Test [EOL] public void basicBehaviourTest() { [EOL]     String h = "<div><p><a href='javascript:sendAllMoney()'>Dodgy</a> <A HREF='HTTP://nice.com'>Nice</p><blockquote>Hello</blockquote>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basic()); [EOL]     assertEquals("<p><a rel=\"nofollow\">Dodgy</a> <a href=\"http://nice.com\" rel=\"nofollow\">Nice</a></p><blockquote>Hello</blockquote>", TextUtil.stripNewlines(cleanHtml)); [EOL] }
@Test [EOL] public void basicBehaviourTest() { [EOL]     String h = "<div><p><a href='javascript:sendAllMoney()'>Dodgy</a> <A HREF='HTTP://nice.com'>Nice</p><blockquote>Hello</blockquote>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basic()); [EOL]     assertEquals("<p><a rel=\"nofollow\">Dodgy</a> <a href=\"http://nice.com\" rel=\"nofollow\">Nice</a></p><blockquote>Hello</blockquote>", TextUtil.stripNewlines(cleanHtml)); [EOL] }
@Test [EOL] public void basicBehaviourTest() { [EOL]     String h = "<div><p><a href='javascript:sendAllMoney()'>Dodgy</a> <A HREF='HTTP://nice.com'>Nice</p><blockquote>Hello</blockquote>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basic()); [EOL]     assertEquals("<p><a rel=\"nofollow\">Dodgy</a> <a href=\"http://nice.com\" rel=\"nofollow\">Nice</a></p><blockquote>Hello</blockquote>", TextUtil.stripNewlines(cleanHtml)); [EOL] }
@Test [EOL] public void basicBehaviourTest() { [EOL]     String h = "<div><p><a href='javascript:sendAllMoney()'>Dodgy</a> <A HREF='HTTP://nice.com'>Nice</p><blockquote>Hello</blockquote>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basic()); [EOL]     assertEquals("<p><a rel=\"nofollow\">Dodgy</a> <a href=\"http://nice.com\" rel=\"nofollow\">Nice</a></p><blockquote>Hello</blockquote>", TextUtil.stripNewlines(cleanHtml)); [EOL] }
@Test [EOL] public void basicBehaviourTest() { [EOL]     String h = "<div><p><a href='javascript:sendAllMoney()'>Dodgy</a> <A HREF='HTTP://nice.com'>Nice</p><blockquote>Hello</blockquote>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basic()); [EOL]     assertEquals("<p><a rel=\"nofollow\">Dodgy</a> <a href=\"http://nice.com\" rel=\"nofollow\">Nice</a></p><blockquote>Hello</blockquote>", TextUtil.stripNewlines(cleanHtml)); [EOL] }
@Test [EOL] public void basicBehaviourTest() { [EOL]     String h = "<div><p><a href='javascript:sendAllMoney()'>Dodgy</a> <A HREF='HTTP://nice.com'>Nice</p><blockquote>Hello</blockquote>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basic()); [EOL]     assertEquals("<p><a rel=\"nofollow\">Dodgy</a> <a href=\"http://nice.com\" rel=\"nofollow\">Nice</a></p><blockquote>Hello</blockquote>", TextUtil.stripNewlines(cleanHtml)); [EOL] }
@Test [EOL] public void basicBehaviourTest() { [EOL]     String h = "<div><p><a href='javascript:sendAllMoney()'>Dodgy</a> <A HREF='HTTP://nice.com'>Nice</p><blockquote>Hello</blockquote>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basic()); [EOL]     assertEquals("<p><a rel=\"nofollow\">Dodgy</a> <a href=\"http://nice.com\" rel=\"nofollow\">Nice</a></p><blockquote>Hello</blockquote>", TextUtil.stripNewlines(cleanHtml)); [EOL] }
@Test [EOL] public void basicBehaviourTest() { [EOL]     String h = "<div><p><a href='javascript:sendAllMoney()'>Dodgy</a> <A HREF='HTTP://nice.com'>Nice</p><blockquote>Hello</blockquote>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basic()); [EOL]     assertEquals("<p><a rel=\"nofollow\">Dodgy</a> <a href=\"http://nice.com\" rel=\"nofollow\">Nice</a></p><blockquote>Hello</blockquote>", TextUtil.stripNewlines(cleanHtml)); [EOL] }
@Test [EOL] public void basicBehaviourTest() { [EOL]     String h = "<div><p><a href='javascript:sendAllMoney()'>Dodgy</a> <A HREF='HTTP://nice.com'>Nice</p><blockquote>Hello</blockquote>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basic()); [EOL]     assertEquals("<p><a rel=\"nofollow\">Dodgy</a> <a href=\"http://nice.com\" rel=\"nofollow\">Nice</a></p><blockquote>Hello</blockquote>", TextUtil.stripNewlines(cleanHtml)); [EOL] }
@Test [EOL] public void basicBehaviourTest() { [EOL]     String h = "<div><p><a href='javascript:sendAllMoney()'>Dodgy</a> <A HREF='HTTP://nice.com'>Nice</p><blockquote>Hello</blockquote>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basic()); [EOL]     assertEquals("<p><a rel=\"nofollow\">Dodgy</a> <a href=\"http://nice.com\" rel=\"nofollow\">Nice</a></p><blockquote>Hello</blockquote>", TextUtil.stripNewlines(cleanHtml)); [EOL] }
@Test [EOL] public void basicBehaviourTest() { [EOL]     String h = "<div><p><a href='javascript:sendAllMoney()'>Dodgy</a> <A HREF='HTTP://nice.com'>Nice</p><blockquote>Hello</blockquote>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basic()); [EOL]     assertEquals("<p><a rel=\"nofollow\">Dodgy</a> <a href=\"http://nice.com\" rel=\"nofollow\">Nice</a></p><blockquote>Hello</blockquote>", TextUtil.stripNewlines(cleanHtml)); [EOL] }
@Test [EOL] public void basicBehaviourTest() { [EOL]     String h = "<div><p><a href='javascript:sendAllMoney()'>Dodgy</a> <A HREF='HTTP://nice.com'>Nice</p><blockquote>Hello</blockquote>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basic()); [EOL]     assertEquals("<p><a rel=\"nofollow\">Dodgy</a> <a href=\"http://nice.com\" rel=\"nofollow\">Nice</a></p><blockquote>Hello</blockquote>", TextUtil.stripNewlines(cleanHtml)); [EOL] }
@Test [EOL] public void basicBehaviourTest() { [EOL]     String h = "<div><p><a href='javascript:sendAllMoney()'>Dodgy</a> <A HREF='HTTP://nice.com'>Nice</p><blockquote>Hello</blockquote>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basic()); [EOL]     assertEquals("<p><a rel=\"nofollow\">Dodgy</a> <a href=\"http://nice.com\" rel=\"nofollow\">Nice</a></p><blockquote>Hello</blockquote>", TextUtil.stripNewlines(cleanHtml)); [EOL] }
@Test [EOL] public void basicBehaviourTest() { [EOL]     String h = "<div><p><a href='javascript:sendAllMoney()'>Dodgy</a> <A HREF='HTTP://nice.com'>Nice</p><blockquote>Hello</blockquote>"; [EOL]     String cleanHtml = Jsoup.clean(h, Whitelist.basic()); [EOL]     assertEquals("<p><a rel=\"nofollow\">Dodgy</a> <a href=\"http://nice.com\" rel=\"nofollow\">Nice</a></p><blockquote>Hello</blockquote>", TextUtil.stripNewlines(cleanHtml)); [EOL] }
@Test [EOL] public void testSmhBizArticle() throws IOException { [EOL]     File in = getFile("/htmltests/smh-biz-article-1.html"); [EOL]     Document doc = Jsoup.parse(in, "UTF-8", "http://www.smh.com.au/business/the-boards-next-fear-the-female-quota-20100106-lteq.html"); [EOL]     assertEquals("The board’s next fear: the female quota", doc.title()); [EOL]     assertEquals("en", doc.select("html").attr("xml:lang")); [EOL]     Elements articleBody = doc.select(".articleBody > *"); [EOL]     assertEquals(17, articleBody.size()); [EOL] }
@Test [EOL] public void testSmhBizArticle() throws IOException { [EOL]     File in = getFile("/htmltests/smh-biz-article-1.html"); [EOL]     Document doc = Jsoup.parse(in, "UTF-8", "http://www.smh.com.au/business/the-boards-next-fear-the-female-quota-20100106-lteq.html"); [EOL]     assertEquals("The board’s next fear: the female quota", doc.title()); [EOL]     assertEquals("en", doc.select("html").attr("xml:lang")); [EOL]     Elements articleBody = doc.select(".articleBody > *"); [EOL]     assertEquals(17, articleBody.size()); [EOL] }
@Test [EOL] public void testOuterHtml() { [EOL]     Document doc = Jsoup.parse("<div title='Tags &amp;c.'><img src=foo.png><p><!-- comment -->Hello<p>there"); [EOL]     assertEquals("<html><head></head><body><div title=\"Tags &amp;c.\"><img src=\"foo.png\" /><p><!-- comment -->Hello</p><p>there</p></div></body></html>", TextUtil.stripNewlines(doc.outerHtml())); [EOL] }
@Test [EOL] public void testOuterHtml() { [EOL]     Document doc = Jsoup.parse("<div title='Tags &amp;c.'><img src=foo.png><p><!-- comment -->Hello<p>there"); [EOL]     assertEquals("<html><head></head><body><div title=\"Tags &amp;c.\"><img src=\"foo.png\" /><p><!-- comment -->Hello</p><p>there</p></div></body></html>", TextUtil.stripNewlines(doc.outerHtml())); [EOL] }
@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile("/htmltests/google-ipod.html"); [EOL]     Document doc = Jsoup.parse(in, "UTF-8", "http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10"); [EOL]     assertEquals("ipod - Google Search", doc.title()); [EOL]     Elements results = doc.select("h3.r > a"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals("http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA", results.get(0).attr("href")); [EOL]     assertEquals("http://www.apple.com/itunes/", results.get(1).attr("href")); [EOL] }
@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile("/htmltests/google-ipod.html"); [EOL]     Document doc = Jsoup.parse(in, "UTF-8", "http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10"); [EOL]     assertEquals("ipod - Google Search", doc.title()); [EOL]     Elements results = doc.select("h3.r > a"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals("http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA", results.get(0).attr("href")); [EOL]     assertEquals("http://www.apple.com/itunes/", results.get(1).attr("href")); [EOL] }
@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile("/htmltests/google-ipod.html"); [EOL]     Document doc = Jsoup.parse(in, "UTF-8", "http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10"); [EOL]     assertEquals("ipod - Google Search", doc.title()); [EOL]     Elements results = doc.select("h3.r > a"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals("http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA", results.get(0).attr("href")); [EOL]     assertEquals("http://www.apple.com/itunes/", results.get(1).attr("href")); [EOL] }
@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile("/htmltests/google-ipod.html"); [EOL]     Document doc = Jsoup.parse(in, "UTF-8", "http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10"); [EOL]     assertEquals("ipod - Google Search", doc.title()); [EOL]     Elements results = doc.select("h3.r > a"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals("http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA", results.get(0).attr("href")); [EOL]     assertEquals("http://www.apple.com/itunes/", results.get(1).attr("href")); [EOL] }
@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile("/htmltests/google-ipod.html"); [EOL]     Document doc = Jsoup.parse(in, "UTF-8", "http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10"); [EOL]     assertEquals("ipod - Google Search", doc.title()); [EOL]     Elements results = doc.select("h3.r > a"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals("http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA", results.get(0).attr("href")); [EOL]     assertEquals("http://www.apple.com/itunes/", results.get(1).attr("href")); [EOL] }
@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile("/htmltests/google-ipod.html"); [EOL]     Document doc = Jsoup.parse(in, "UTF-8", "http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10"); [EOL]     assertEquals("ipod - Google Search", doc.title()); [EOL]     Elements results = doc.select("h3.r > a"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals("http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA", results.get(0).attr("href")); [EOL]     assertEquals("http://www.apple.com/itunes/", results.get(1).attr("href")); [EOL] }
@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile("/htmltests/google-ipod.html"); [EOL]     Document doc = Jsoup.parse(in, "UTF-8", "http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10"); [EOL]     assertEquals("ipod - Google Search", doc.title()); [EOL]     Elements results = doc.select("h3.r > a"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals("http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA", results.get(0).attr("href")); [EOL]     assertEquals("http://www.apple.com/itunes/", results.get(1).attr("href")); [EOL] }
@Test [EOL] public void divSemantics() { [EOL]     Tag div = Tag.valueOf("div"); [EOL]     Tag p = Tag.valueOf("p"); [EOL]     assertTrue(div.canContain(div)); [EOL]     assertTrue(div.canContain(p)); [EOL] }
@Test [EOL] public void divSemantics() { [EOL]     Tag div = Tag.valueOf("div"); [EOL]     Tag p = Tag.valueOf("p"); [EOL]     assertTrue(div.canContain(div)); [EOL]     assertTrue(div.canContain(p)); [EOL] }
@Test [EOL] public void divSemantics() { [EOL]     Tag div = Tag.valueOf("div"); [EOL]     Tag p = Tag.valueOf("p"); [EOL]     assertTrue(div.canContain(div)); [EOL]     assertTrue(div.canContain(p)); [EOL] }
@Test [EOL] public void divSemantics() { [EOL]     Tag div = Tag.valueOf("div"); [EOL]     Tag p = Tag.valueOf("p"); [EOL]     assertTrue(div.canContain(div)); [EOL]     assertTrue(div.canContain(p)); [EOL] }
@Test [EOL] public void handlesUnknownTags() { [EOL]     String h = "<div><foo title=bar>Hello<foo title=qux>there</foo></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements foos = doc.select("foo"); [EOL]     assertEquals(2, foos.size()); [EOL]     assertEquals("bar", foos.first().attr("title")); [EOL]     assertEquals("qux", foos.last().attr("title")); [EOL]     assertEquals("there", foos.last().text()); [EOL] }
@Test [EOL] public void divSemantics() { [EOL]     Tag div = Tag.valueOf("div"); [EOL]     Tag p = Tag.valueOf("p"); [EOL]     assertTrue(div.canContain(div)); [EOL]     assertTrue(div.canContain(p)); [EOL] }
@Test [EOL] public void divSemantics() { [EOL]     Tag div = Tag.valueOf("div"); [EOL]     Tag p = Tag.valueOf("p"); [EOL]     assertTrue(div.canContain(div)); [EOL]     assertTrue(div.canContain(p)); [EOL] }
@Test [EOL] public void divSemantics() { [EOL]     Tag div = Tag.valueOf("div"); [EOL]     Tag p = Tag.valueOf("p"); [EOL]     assertTrue(div.canContain(div)); [EOL]     assertTrue(div.canContain(p)); [EOL] }
@Test [EOL] public void divSemantics() { [EOL]     Tag div = Tag.valueOf("div"); [EOL]     Tag p = Tag.valueOf("p"); [EOL]     assertTrue(div.canContain(div)); [EOL]     assertTrue(div.canContain(p)); [EOL] }
@Test [EOL] public void divSemantics() { [EOL]     Tag div = Tag.valueOf("div"); [EOL]     Tag p = Tag.valueOf("p"); [EOL]     assertTrue(div.canContain(div)); [EOL]     assertTrue(div.canContain(p)); [EOL] }
@Test [EOL] public void divSemantics() { [EOL]     Tag div = Tag.valueOf("div"); [EOL]     Tag p = Tag.valueOf("p"); [EOL]     assertTrue(div.canContain(div)); [EOL]     assertTrue(div.canContain(p)); [EOL] }
@Test [EOL] public void divSemantics() { [EOL]     Tag div = Tag.valueOf("div"); [EOL]     Tag p = Tag.valueOf("p"); [EOL]     assertTrue(div.canContain(div)); [EOL]     assertTrue(div.canContain(p)); [EOL] }
@Test [EOL] public void divSemantics() { [EOL]     Tag div = Tag.valueOf("div"); [EOL]     Tag p = Tag.valueOf("p"); [EOL]     assertTrue(div.canContain(div)); [EOL]     assertTrue(div.canContain(p)); [EOL] }
@Test [EOL] public void divSemantics() { [EOL]     Tag div = Tag.valueOf("div"); [EOL]     Tag p = Tag.valueOf("p"); [EOL]     assertTrue(div.canContain(div)); [EOL]     assertTrue(div.canContain(p)); [EOL] }
@Test [EOL] public void handlesUnknownTags() { [EOL]     String h = "<div><foo title=bar>Hello<foo title=qux>there</foo></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements foos = doc.select("foo"); [EOL]     assertEquals(2, foos.size()); [EOL]     assertEquals("bar", foos.first().attr("title")); [EOL]     assertEquals("qux", foos.last().attr("title")); [EOL]     assertEquals("there", foos.last().text()); [EOL] }
@Test [EOL] public void divSemantics() { [EOL]     Tag div = Tag.valueOf("div"); [EOL]     Tag p = Tag.valueOf("p"); [EOL]     assertTrue(div.canContain(div)); [EOL]     assertTrue(div.canContain(p)); [EOL] }
@Test [EOL] public void handlesUnclosedDefinitionLists() { [EOL]     String h = "<dt>Foo<dd>Bar<dt>Qux<dd>Zug"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals(4, doc.body().getElementsByTag("dl").first().children().size()); [EOL]     Elements dts = doc.select("dt"); [EOL]     assertEquals(2, dts.size()); [EOL]     assertEquals("Zug", dts.get(1).nextElementSibling().text()); [EOL] }
@Test [EOL] public void handlesUnclosedDefinitionLists() { [EOL]     String h = "<dt>Foo<dd>Bar<dt>Qux<dd>Zug"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals(4, doc.body().getElementsByTag("dl").first().children().size()); [EOL]     Elements dts = doc.select("dt"); [EOL]     assertEquals(2, dts.size()); [EOL]     assertEquals("Zug", dts.get(1).nextElementSibling().text()); [EOL] }
@Test [EOL] public void handlesUnclosedDefinitionLists() { [EOL]     String h = "<dt>Foo<dd>Bar<dt>Qux<dd>Zug"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals(4, doc.body().getElementsByTag("dl").first().children().size()); [EOL]     Elements dts = doc.select("dt"); [EOL]     assertEquals(2, dts.size()); [EOL]     assertEquals("Zug", dts.get(1).nextElementSibling().text()); [EOL] }
@Test [EOL] public void handlesUnclosedDefinitionLists() { [EOL]     String h = "<dt>Foo<dd>Bar<dt>Qux<dd>Zug"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals(4, doc.body().getElementsByTag("dl").first().children().size()); [EOL]     Elements dts = doc.select("dt"); [EOL]     assertEquals(2, dts.size()); [EOL]     assertEquals("Zug", dts.get(1).nextElementSibling().text()); [EOL] }
@Test [EOL] public void handlesUnclosedDefinitionLists() { [EOL]     String h = "<dt>Foo<dd>Bar<dt>Qux<dd>Zug"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals(4, doc.body().getElementsByTag("dl").first().children().size()); [EOL]     Elements dts = doc.select("dt"); [EOL]     assertEquals(2, dts.size()); [EOL]     assertEquals("Zug", dts.get(1).nextElementSibling().text()); [EOL] }
@Test [EOL] public void handlesUnclosedDefinitionLists() { [EOL]     String h = "<dt>Foo<dd>Bar<dt>Qux<dd>Zug"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals(4, doc.body().getElementsByTag("dl").first().children().size()); [EOL]     Elements dts = doc.select("dt"); [EOL]     assertEquals(2, dts.size()); [EOL]     assertEquals("Zug", dts.get(1).nextElementSibling().text()); [EOL] }
@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile("/htmltests/google-ipod.html"); [EOL]     Document doc = Jsoup.parse(in, "UTF-8", "http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10"); [EOL]     assertEquals("ipod - Google Search", doc.title()); [EOL]     Elements results = doc.select("h3.r > a"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals("http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA", results.get(0).attr("href")); [EOL]     assertEquals("http://www.apple.com/itunes/", results.get(1).attr("href")); [EOL] }
@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile("/htmltests/google-ipod.html"); [EOL]     Document doc = Jsoup.parse(in, "UTF-8", "http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10"); [EOL]     assertEquals("ipod - Google Search", doc.title()); [EOL]     Elements results = doc.select("h3.r > a"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals("http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA", results.get(0).attr("href")); [EOL]     assertEquals("http://www.apple.com/itunes/", results.get(1).attr("href")); [EOL] }
@Test [EOL] public void testGoogleSearchIpod() throws IOException { [EOL]     File in = getFile("/htmltests/google-ipod.html"); [EOL]     Document doc = Jsoup.parse(in, "UTF-8", "http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10"); [EOL]     assertEquals("ipod - Google Search", doc.title()); [EOL]     Elements results = doc.select("h3.r > a"); [EOL]     assertEquals(12, results.size()); [EOL]     assertEquals("http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA", results.get(0).attr("href")); [EOL]     assertEquals("http://www.apple.com/itunes/", results.get(1).attr("href")); [EOL] }
@Test [EOL] public void handlesUnclosedDefinitionLists() { [EOL]     String h = "<dt>Foo<dd>Bar<dt>Qux<dd>Zug"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     assertEquals(4, doc.body().getElementsByTag("dl").first().children().size()); [EOL]     Elements dts = doc.select("dt"); [EOL]     assertEquals(2, dts.size()); [EOL]     assertEquals("Zug", dts.get(1).nextElementSibling().text()); [EOL] }
@Test [EOL] public void handlesUnknownTags() { [EOL]     String h = "<div><foo title=bar>Hello<foo title=qux>there</foo></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements foos = doc.select("foo"); [EOL]     assertEquals(2, foos.size()); [EOL]     assertEquals("bar", foos.first().attr("title")); [EOL]     assertEquals("qux", foos.last().attr("title")); [EOL]     assertEquals("there", foos.last().text()); [EOL] }
@Test [EOL] public void handlesUnknownTags() { [EOL]     String h = "<div><foo title=bar>Hello<foo title=qux>there</foo></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements foos = doc.select("foo"); [EOL]     assertEquals(2, foos.size()); [EOL]     assertEquals("bar", foos.first().attr("title")); [EOL]     assertEquals("qux", foos.last().attr("title")); [EOL]     assertEquals("there", foos.last().text()); [EOL] }
@Test [EOL] public void divSemantics() { [EOL]     Tag div = Tag.valueOf("div"); [EOL]     Tag p = Tag.valueOf("p"); [EOL]     assertTrue(div.canContain(div)); [EOL]     assertTrue(div.canContain(p)); [EOL] }
@Test [EOL] public void divSemantics() { [EOL]     Tag div = Tag.valueOf("div"); [EOL]     Tag p = Tag.valueOf("p"); [EOL]     assertTrue(div.canContain(div)); [EOL]     assertTrue(div.canContain(p)); [EOL] }
@Test [EOL] public void divSemantics() { [EOL]     Tag div = Tag.valueOf("div"); [EOL]     Tag p = Tag.valueOf("p"); [EOL]     assertTrue(div.canContain(div)); [EOL]     assertTrue(div.canContain(p)); [EOL] }
@Test [EOL] public void divSemantics() { [EOL]     Tag div = Tag.valueOf("div"); [EOL]     Tag p = Tag.valueOf("p"); [EOL]     assertTrue(div.canContain(div)); [EOL]     assertTrue(div.canContain(p)); [EOL] }
@Test [EOL] public void handlesUnknownInlineTags() { [EOL]     String h = "<p><cust>Test</cust></p><p><cust><cust>Test</cust></cust></p>"; [EOL]     Document doc = Jsoup.parseBodyFragment(h); [EOL]     String out = doc.body().html(); [EOL]     assertEquals(h, TextUtil.stripNewlines(out)); [EOL] }
@Test [EOL] public void divSemantics() { [EOL]     Tag div = Tag.valueOf("div"); [EOL]     Tag p = Tag.valueOf("p"); [EOL]     assertTrue(div.canContain(div)); [EOL]     assertTrue(div.canContain(p)); [EOL] }
@Test [EOL] public void handlesUnknownTags() { [EOL]     String h = "<div><foo title=bar>Hello<foo title=qux>there</foo></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements foos = doc.select("foo"); [EOL]     assertEquals(2, foos.size()); [EOL]     assertEquals("bar", foos.first().attr("title")); [EOL]     assertEquals("qux", foos.last().attr("title")); [EOL]     assertEquals("there", foos.last().text()); [EOL] }
@Test [EOL] public void handlesUnknownTags() { [EOL]     String h = "<div><foo title=bar>Hello<foo title=qux>there</foo></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements foos = doc.select("foo"); [EOL]     assertEquals(2, foos.size()); [EOL]     assertEquals("bar", foos.first().attr("title")); [EOL]     assertEquals("qux", foos.last().attr("title")); [EOL]     assertEquals("there", foos.last().text()); [EOL] }
@Test [EOL] public void handlesUnknownTags() { [EOL]     String h = "<div><foo title=bar>Hello<foo title=qux>there</foo></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements foos = doc.select("foo"); [EOL]     assertEquals(2, foos.size()); [EOL]     assertEquals("bar", foos.first().attr("title")); [EOL]     assertEquals("qux", foos.last().attr("title")); [EOL]     assertEquals("there", foos.last().text()); [EOL] }
@Test [EOL] public void handlesUnknownTags() { [EOL]     String h = "<div><foo title=bar>Hello<foo title=qux>there</foo></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements foos = doc.select("foo"); [EOL]     assertEquals(2, foos.size()); [EOL]     assertEquals("bar", foos.first().attr("title")); [EOL]     assertEquals("qux", foos.last().attr("title")); [EOL]     assertEquals("there", foos.last().text()); [EOL] }
@Test [EOL] public void handlesUnknownTags() { [EOL]     String h = "<div><foo title=bar>Hello<foo title=qux>there</foo></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements foos = doc.select("foo"); [EOL]     assertEquals(2, foos.size()); [EOL]     assertEquals("bar", foos.first().attr("title")); [EOL]     assertEquals("qux", foos.last().attr("title")); [EOL]     assertEquals("there", foos.last().text()); [EOL] }
@Test [EOL] public void handlesUnknownTags() { [EOL]     String h = "<div><foo title=bar>Hello<foo title=qux>there</foo></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements foos = doc.select("foo"); [EOL]     assertEquals(2, foos.size()); [EOL]     assertEquals("bar", foos.first().attr("title")); [EOL]     assertEquals("qux", foos.last().attr("title")); [EOL]     assertEquals("there", foos.last().text()); [EOL] }
@Test [EOL] public void handlesUnknownTags() { [EOL]     String h = "<div><foo title=bar>Hello<foo title=qux>there</foo></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements foos = doc.select("foo"); [EOL]     assertEquals(2, foos.size()); [EOL]     assertEquals("bar", foos.first().attr("title")); [EOL]     assertEquals("qux", foos.last().attr("title")); [EOL]     assertEquals("there", foos.last().text()); [EOL] }
@Test [EOL] public void handlesUnknownTags() { [EOL]     String h = "<div><foo title=bar>Hello<foo title=qux>there</foo></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements foos = doc.select("foo"); [EOL]     assertEquals(2, foos.size()); [EOL]     assertEquals("bar", foos.first().attr("title")); [EOL]     assertEquals("qux", foos.last().attr("title")); [EOL]     assertEquals("there", foos.last().text()); [EOL] }
@Test [EOL] public void handlesUnknownTags() { [EOL]     String h = "<div><foo title=bar>Hello<foo title=qux>there</foo></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements foos = doc.select("foo"); [EOL]     assertEquals(2, foos.size()); [EOL]     assertEquals("bar", foos.first().attr("title")); [EOL]     assertEquals("qux", foos.last().attr("title")); [EOL]     assertEquals("there", foos.last().text()); [EOL] }
@Test [EOL] public void handlesUnknownTags() { [EOL]     String h = "<div><foo title=bar>Hello<foo title=qux>there</foo></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements foos = doc.select("foo"); [EOL]     assertEquals(2, foos.size()); [EOL]     assertEquals("bar", foos.first().attr("title")); [EOL]     assertEquals("qux", foos.last().attr("title")); [EOL]     assertEquals("there", foos.last().text()); [EOL] }
@Test [EOL] public void handlesUnknownTags() { [EOL]     String h = "<div><foo title=bar>Hello<foo title=qux>there</foo></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements foos = doc.select("foo"); [EOL]     assertEquals(2, foos.size()); [EOL]     assertEquals("bar", foos.first().attr("title")); [EOL]     assertEquals("qux", foos.last().attr("title")); [EOL]     assertEquals("there", foos.last().text()); [EOL] }
@Test [EOL] public void handlesUnknownTags() { [EOL]     String h = "<div><foo title=bar>Hello<foo title=qux>there</foo></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements foos = doc.select("foo"); [EOL]     assertEquals(2, foos.size()); [EOL]     assertEquals("bar", foos.first().attr("title")); [EOL]     assertEquals("qux", foos.last().attr("title")); [EOL]     assertEquals("there", foos.last().text()); [EOL] }
@Test [EOL] public void handlesUnknownTags() { [EOL]     String h = "<div><foo title=bar>Hello<foo title=qux>there</foo></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements foos = doc.select("foo"); [EOL]     assertEquals(2, foos.size()); [EOL]     assertEquals("bar", foos.first().attr("title")); [EOL]     assertEquals("qux", foos.last().attr("title")); [EOL]     assertEquals("there", foos.last().text()); [EOL] }
@Test [EOL] public void handlesUnknownTags() { [EOL]     String h = "<div><foo title=bar>Hello<foo title=qux>there</foo></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements foos = doc.select("foo"); [EOL]     assertEquals(2, foos.size()); [EOL]     assertEquals("bar", foos.first().attr("title")); [EOL]     assertEquals("qux", foos.last().attr("title")); [EOL]     assertEquals("there", foos.last().text()); [EOL] }
@Test [EOL] public void handlesUnknownTags() { [EOL]     String h = "<div><foo title=bar>Hello<foo title=qux>there</foo></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements foos = doc.select("foo"); [EOL]     assertEquals(2, foos.size()); [EOL]     assertEquals("bar", foos.first().attr("title")); [EOL]     assertEquals("qux", foos.last().attr("title")); [EOL]     assertEquals("there", foos.last().text()); [EOL] }
@Test [EOL] public void handlesUnknownTags() { [EOL]     String h = "<div><foo title=bar>Hello<foo title=qux>there</foo></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements foos = doc.select("foo"); [EOL]     assertEquals(2, foos.size()); [EOL]     assertEquals("bar", foos.first().attr("title")); [EOL]     assertEquals("qux", foos.last().attr("title")); [EOL]     assertEquals("there", foos.last().text()); [EOL] }
@Test [EOL] public void handlesUnknownTags() { [EOL]     String h = "<div><foo title=bar>Hello<foo title=qux>there</foo></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements foos = doc.select("foo"); [EOL]     assertEquals(2, foos.size()); [EOL]     assertEquals("bar", foos.first().attr("title")); [EOL]     assertEquals("qux", foos.last().attr("title")); [EOL]     assertEquals("there", foos.last().text()); [EOL] }
@Test [EOL] public void handlesUnknownTags() { [EOL]     String h = "<div><foo title=bar>Hello<foo title=qux>there</foo></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements foos = doc.select("foo"); [EOL]     assertEquals(2, foos.size()); [EOL]     assertEquals("bar", foos.first().attr("title")); [EOL]     assertEquals("qux", foos.last().attr("title")); [EOL]     assertEquals("there", foos.last().text()); [EOL] }
@Test [EOL] public void handlesUnknownTags() { [EOL]     String h = "<div><foo title=bar>Hello<foo title=qux>there</foo></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements foos = doc.select("foo"); [EOL]     assertEquals(2, foos.size()); [EOL]     assertEquals("bar", foos.first().attr("title")); [EOL]     assertEquals("qux", foos.last().attr("title")); [EOL]     assertEquals("there", foos.last().text()); [EOL] }
@Test [EOL] public void handlesUnknownTags() { [EOL]     String h = "<div><foo title=bar>Hello<foo title=qux>there</foo></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements foos = doc.select("foo"); [EOL]     assertEquals(2, foos.size()); [EOL]     assertEquals("bar", foos.first().attr("title")); [EOL]     assertEquals("qux", foos.last().attr("title")); [EOL]     assertEquals("there", foos.last().text()); [EOL] }
@Test [EOL] public void handlesUnknownTags() { [EOL]     String h = "<div><foo title=bar>Hello<foo title=qux>there</foo></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements foos = doc.select("foo"); [EOL]     assertEquals(2, foos.size()); [EOL]     assertEquals("bar", foos.first().attr("title")); [EOL]     assertEquals("qux", foos.last().attr("title")); [EOL]     assertEquals("there", foos.last().text()); [EOL] }
@Test [EOL] public void handlesUnknownTags() { [EOL]     String h = "<div><foo title=bar>Hello<foo title=qux>there</foo></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements foos = doc.select("foo"); [EOL]     assertEquals(2, foos.size()); [EOL]     assertEquals("bar", foos.first().attr("title")); [EOL]     assertEquals("qux", foos.last().attr("title")); [EOL]     assertEquals("there", foos.last().text()); [EOL] }
@Test [EOL] public void handlesUnknownTags() { [EOL]     String h = "<div><foo title=bar>Hello<foo title=qux>there</foo></div>"; [EOL]     Document doc = Jsoup.parse(h); [EOL]     Elements foos = doc.select("foo"); [EOL]     assertEquals(2, foos.size()); [EOL]     assertEquals("bar", foos.first().attr("title")); [EOL]     assertEquals("qux", foos.last().attr("title")); [EOL]     assertEquals("there", foos.last().text()); [EOL] }
@Test [EOL] public void divSemantics() { [EOL]     Tag div = Tag.valueOf("div"); [EOL]     Tag p = Tag.valueOf("p"); [EOL]     assertTrue(div.canContain(div)); [EOL]     assertTrue(div.canContain(p)); [EOL] }
@Test [EOL] public void divSemantics() { [EOL]     Tag div = Tag.valueOf("div"); [EOL]     Tag p = Tag.valueOf("p"); [EOL]     assertTrue(div.canContain(div)); [EOL]     assertTrue(div.canContain(p)); [EOL] }
@Test [EOL] public void divSemantics() { [EOL]     Tag div = Tag.valueOf("div"); [EOL]     Tag p = Tag.valueOf("p"); [EOL]     assertTrue(div.canContain(div)); [EOL]     assertTrue(div.canContain(p)); [EOL] }
@Test [EOL] public void divSemantics() { [EOL]     Tag div = Tag.valueOf("div"); [EOL]     Tag p = Tag.valueOf("p"); [EOL]     assertTrue(div.canContain(div)); [EOL]     assertTrue(div.canContain(p)); [EOL] }
@Test [EOL] public void divSemantics() { [EOL]     Tag div = Tag.valueOf("div"); [EOL]     Tag p = Tag.valueOf("p"); [EOL]     assertTrue(div.canContain(div)); [EOL]     assertTrue(div.canContain(p)); [EOL] }
@Test [EOL] public void divSemantics() { [EOL]     Tag div = Tag.valueOf("div"); [EOL]     Tag p = Tag.valueOf("p"); [EOL]     assertTrue(div.canContain(div)); [EOL]     assertTrue(div.canContain(p)); [EOL] }
