@Test public void testJsonSerializationVisitor() throws Exception { ObjectNavigatorFactory factory = Mockito.mock(ObjectNavigatorFactory.class); @SuppressWarnings("unchecked") ParameterizedTypeHandlerMap<JsonSerializer<?>> serializers = Mockito.mock(ParameterizedTypeHandlerMap.class); @SuppressWarnings("unchecked") JsonSerializationContext context = Mockito.mock(JsonSerializationContext.class); MemoryRefStack ancestors = Mockito.mock(MemoryRefStack.class); Mockito.when(ancestors.getMemoryRefStack()).thenReturn(ancestors); Mockito.when(factory.createObjectNavigatorFactory(null)).thenReturn(factory); JsonSerializationVisitor visitor = new JsonSerializationVisitor(factory, true,
@Test public void testJsonSerializationVisitor() throws Exception { @SuppressWarnings("unchecked") ObjectNavigatorFactory factory = Mockito.mock(ObjectNavigatorFactory.class); @SuppressWarnings("rawtypes") ParameterizedTypeHandlerMap<JsonSerializer<?>> serializers = Mockito.mock(ParameterizedTypeHandlerMap.class); @SuppressWarnings("unchecked") ParameterizedTypeHandler<JsonSerializer<?>> context = Mockito.mock(ParameterizedTypeHandler.class); MemoryRefStack ancestors = new MemoryRefStack(); ObjectNavigatorFactory factory = Mockito.mock(ObjectNavigatorFactory.class); JsonSerializationVisitor visitor = new JsonSerializationVisitor(factory, true, serializers, new JsonSerializationContext(), ancestors); Mockito.when(factory.createObjectNavigator(
@Test public void testJsonSerializationVisitor() throws Exception { ObjectNavigatorFactory factory = mock(ObjectNavigatorFactory.class); @SuppressWarnings("unchecked") ParameterizedTypeHandlerMap<JsonSerializer<?>> serializers = mock(ParameterizedTypeHandlerMap.class); @SuppressWarnings("unchecked") JsonSerializationContext context = mock(JsonSerializationContext.class); MemoryRefStack ancestors = mock(MemoryRefStack.class); @SuppressWarnings("unchecked") JsonSerializer<Object> serializer1 = mock(JsonSerializer.class); @SuppressWarnings("unchecked") JsonSerializer<Object> serializer2 = mock(JsonSerializer.class); @SuppressWarnings("unchecked") JsonSerializer<Object> serializer3 = mock(JsonSerializer.class); when(serializer
@Test public void testJsonSerializationVisitor() throws Exception { ObjectNavigatorFactory factory = mock(ObjectNavigatorFactory.class); @SuppressWarnings("unchecked") ParameterizedTypeHandlerMap<JsonSerializer<?>> serializers = mock(ParameterizedTypeHandlerMap.class); @SuppressWarnings("unchecked") JsonSerializationContext context = mock(JsonSerializationContext.class); MemoryRefStack ancestors = mock(MemoryRefStack.class); @SuppressWarnings("unchecked") JsonSerializer<Object> serializer1 = mock(JsonSerializer.class); @SuppressWarnings("unchecked") JsonSerializer<Object> serializer2 = mock(JsonSerializer.class); @SuppressWarnings("unchecked") JsonSerializer<Object> serializer3 = mock(JsonSerializer.class); when(serializer
@Test public void testJsonSerializationVisitor() throws Exception { @SuppressWarnings("unchecked") ObjectNavigatorFactory factory = mock(ObjectNavigatorFactory.class); ParameterizedTypeHandlerMap<JsonSerializer<?>> serializers = mock(ParameterizedTypeHandlerMap.class); @SuppressWarnings("unchecked") ParameterizedTypeHandler<JsonSerializer<?>> context = mock(ParameterizedTypeHandler.class); MemoryRefStack ancestors = mock(MemoryRefStack.class); @SuppressWarnings("unchecked") JsonSerializer<Object> serializer = mock(JsonSerializer.class); JsonSerializationContext context = mock(JsonSerializationContext.class); JsonSerializationVisitor visitor = new JsonSerializationVisitor(factory, true, serializers, context, ancestors); FieldAttributes f = mock(FieldAttributes.
@Test public void testJsonSerializationVisitor() throws Exception { ObjectNavigatorFactory factory = mock(ObjectNavigatorFactory.class); @SuppressWarnings("unchecked") ParameterizedTypeHandlerMap<JsonSerializer<?>> serializers = mock(ParameterizedTypeHandlerMap.class); @SuppressWarnings("unchecked") JsonSerializationContext context = mock(JsonSerializationContext.class); MemoryRefStack ancestors = mock(MemoryRefStack.class); @SuppressWarnings("unchecked") JsonSerializer<Object> serializer = mock(JsonSerializer.class); when(serializer.getClass()).thenReturn(Object.class); when(ancestors.getMemoryRefStack()).thenReturn(ancestors); JsonSerializationVisitor visitor = new JsonSerializationVisitor(factory, true,
@Test(expected = CircularReferenceException.class) public void testStart_CircularReferenceException() { final ObjectTypePair pair = new ObjectTypePair("com.linkedin.test.TestClass", "testClass"); final JsonObject child = new JsonObject(); child.addProperty("field1", "value1"); child.addProperty("field2", "value2"); child.addProperty("field3", "value3"); final JsonObject child2 = new JsonObject(); child2.addProperty("field1", "value1"); child2.addProperty("field2", "value2"); child2.addProperty("field3", "value3"); child2.addProperty("field4", "value4");
@Test(expected = CircularReferenceException.class) public void testStart_CircularReferenceException() { System.out.println("start"); ObjectTypePair node = null; instance.start(node); }
@Test(expected = CircularReferenceException.class) public void testStart_CircularReferenceException() { System.out.println("startCircularReferenceException"); ObjectTypePair node = new ObjectTypePair("marko", "test"); instance.start(node); instance.start(node); }
@Test(expected = CircularReferenceException.class) public void testStart_CircularReferenceException() { System.out.println("startCircularReferenceException"); ObjectTypePair node = new ObjectTypePair("marko", "test"); instance.start(node); instance.start(node); }
@Test public void testEnd() { JsonObject obj = new JsonObject(); obj.addProperty("one", "one"); obj.addProperty("two", "two"); obj.addProperty("three", "three"); obj.addProperty("four", "four"); JsonObject nested = new JsonObject(); nested.addProperty("one", "one"); nested.addProperty("two", "two"); nested.addProperty("three", "three"); obj.addProperty("four", nested); obj.addProperty("five", "two"); obj.addProperty("six", "two"); obj.addProperty("seven", "two"); obj.addProperty("eight", "two
@Test public void testEnd_nullNode() { JsonObject node = new JsonObject(); node.addProperty("field1", "value1"); node.addProperty("field2", "value2"); instance.end(null); assertNull(instance.getJsonElement().getAsJsonObject().get("field1")); assertNull(instance.getJsonElement().getAsJsonObject().get("field2")); instance.end(null); assertNull(instance.getJsonElement().getAsJsonObject().get("field1")); assertNull(instance.getJsonElement().getAsJsonObject().get("field2")); assertNull(instance.getJsonElement().getAsJsonObject().get("field3"));
@Test public void testEnd_nullNode() { try { new JsonSerializationVisitor(null, false, null, null, new MemoryRefStack()).end(null); fail(); } catch (NullPointerException expected) { } }
@Test public void testVisitArray() throws Exception { String expectedResult = "[\\n" + " {\\n" + " \\"type\\": \\"array\\",\\n" + " \\"items\\": [\\n" + " {\\n" + " \\"type\\": \\"string\\",\\n" + " \\"value\\": \\"string\\"\\n" + " }\\n" + " ]\\n" + " },\\n" + " {\\n" + " \\"type\\": \\"array\\",\\n" + " \\"items\\": [\\n" + " {\\n" + " \\"type\\
@Test public void testAssignToRoot() throws Exception { String expected = "{\\n" + " \\"type\\": \\"array\\",\\n" + " \\"children\\": [\\n" + " {\\n" + " \\"type\\": \\"string\\",\\n" + " \\"value\\": \\"string\\"\\n" + " },\\n" + " {\\n" + " \\"type\\": \\"string\\",\\n" + " \\"value\\": \\"string\\",\\n" + " \\"value\\": \\"string\\"\\n" + " }\\n" + " ]\\n"
@Test public void testVisitArray() throws Exception { String expectedResult = "[\\n" + " {\\n" + " \\"a\\": 1,\\n" + " \\"b\\": 2,\\n" + " \\"c\\": 3,\\n" + " \\"d\\": 4,\\n" + " \\"e\\": 5,\\n" + " \\"f\\": 6\\n" + " },\\n" + " {\\n" + " \\"a\\": 1,\\n" + " \\"b\\": 2,\\n" + " \\"c\\": 3,\\n" + " \\"
@Test public void testVisitArray() throws Exception { String expectedResult = "[\\n" + " {\\n" + " \\"type\\": \\"array\\",\\n" + " \\"children\\": [\\n" + " {\\n" + " \\"type\\": \\"string\\",\\n" + " \\"value\\": \\"string\\"\\n" + " }\\n" + " ]\\n" + " },\\n" + " {\\n" + " \\"type\\": \\"array\\",\\n" + " \\"children\\": [\\n" + " {\\n" + " \\"type\\
@Test public void testVisitArray() throws Exception { String expectedResult = "[\\n" + " {\\n" + " \\"type\\": \\"array\\",\\n" + " \\"children\\": [\\n" + " {\\n" + " \\"type\\": \\"string\\",\\n" + " \\"value\\": \\"string\\"\\n" + " }\\n" + " ]\\n" + " },\\n" + " {\\n" + " \\"type\\": \\"array\\",\\n" + " \\"children\\": [\\n" + " {\\n" + " \\"type\\
@Test public void testVisitArray() throws Exception { String expectedResult = "[\\n" + " {\\n" + " \\"type\\": \\"array\\",\\n" + " \\"children\\": [\\n" + " {\\n" + " \\"type\\": \\"string\\",\\n" + " \\"value\\": \\"string\\"\\n" + " }\\n" + " ]\\n" + " },\\n" + " {\\n" + " \\"type\\": \\"array\\",\\n" + " \\"children\\": [\\n" + " {\\n" + " \\"type\\
@Test public void testVisitArray() throws Exception { String expectedResult = "[\\n" + " {\\n" + " \\"a\\": 1,\\n" + " \\"b\\": 2,\\n" + " \\"c\\": 3,\\n" + " \\"d\\": 4,\\n" + " \\"e\\": 5,\\n" + " \\"f\\": 6\\n" + " },\\n" + " {\\n" + " \\"a\\": 1,\\n" + " \\"b\\": 2,\\n" + " \\"c\\": 3,\\n" + " \\"
@Test public void testVisitArray() throws Exception { String expectedResult = "[\\n" + " {\\n" + " \\"type\\": \\"array\\",\\n" + " \\"items\\": [\\n" + " {\\n" + " \\"type\\": \\"string\\",\\n" + " \\"value\\": \\"string\\"\\n" + " }\\n" + " ]\\n" + " },\\n" + " {\\n" + " \\"type\\": \\"array\\",\\n" + " \\"items\\": [\\n" + " {\\n" + " \\"type\\
@Test public void testAddAsArrayElement() throws Exception { String testData = "{\\n" + " \\"type\\": \\"array\\",\\n" + " \\"children\\": [\\n" + " {\\n" + " \\"type\\": \\"string\\",\\n" + " \\"value\\": \\"string\\"\\n" + " },\\n" + " {\\n" + " \\"type\\": \\"string\\",\\n" + " \\"value\\": \\"string\\",\\n" + " \\"value\\": \\"string\\"\\n" + " }\\n" + " ]\\n
@Test public void testAddAsArrayElement() throws Exception { String json = "{\\n" + " \\"type\\": \\"array\\",\\n" + " \\"children\\": [\\n" + " {\\n" + " \\"type\\": \\"string\\"\\n" + " },\\n" + " {\\n" + " \\"type\\": \\"string\\",\\n" + " \\"children\\": [\\n" + " {\\n" + " \\"type\\": \\"string\\"\\n" + " }\\n" + " ]\\n" + " }\\n" + " ]\\n" +
@Test public void testAddAsArrayElement() throws Exception { String json = "{\\n" + " \\"array\\": [\\n" + " {\\n" + " \\"field1\\": \\"string\\",\\n" + " \\"field2\\": \\"string\\",\\n" + " \\"field3\\": \\"string\\"\\n" + " },\\n" + " {\\n" + " \\"field1\\": \\"string\\",\\n" + " \\"field2\\": \\"string\\",\\n" + " \\"field3\\": \\"string\\"\\n" + " }\\n"
@Test public void testAddAsArrayElement() throws Exception { String testData = "{\\n" + " \\"array\\": [\\n" + " {\\n" + " \\"firstName\\": \\"John\\",\\n" + " \\"lastName\\": \\"Smith\\"\\n" + " },\\n" + " {\\n" + " \\"firstName\\": \\"John\\",\\n" + " \\"lastName\\": \\"Smith\\"\\n" + " },\\n" + " {\\n" + " \\"firstName\\": \\"John\\",\\n" + " \\"
@Test public void testAddAsArrayElement() throws Exception { JsonElement root = gson.fromJson("{\\n" + " \\"type\\": \\"array\\",\\n" + " \\"children\\": [\\n" + " {\\n" + " \\"type\\": \\"string\\",\\n" + " \\"name\\": \\"string\\"\\n" + " },\\n" + " {\\n" + " \\"type\\": \\"boolean\\",\\n" + " \\"name\\": \\"boolean\\",\\n" + " \\"value\\": true\\n" + " },\\n" + " {\\
@Test public void testGetJsonElementForChild() throws Exception { String json = "{\\n" + " \\"type\\": \\"string\\",\\n" + " \\"array\\": [\\n" + " {\\n" + " \\"name\\": \\"string\\",\\n" + " \\"type\\": \\"string\\"\\n" + " },\\n" + " {\\n" + " \\"name\\": \\"string\\",\\n" + " \\"type\\": \\"string\\"\\n" + " },\\n" + " {\\n" + " \\"name\\": \\"string\\",\\
@Test public void testGetJsonElementForChild() { JsonObject obj = new JsonObject(); obj.addProperty("field1", "value1"); obj.addProperty("field2", "value2"); obj.addProperty("field3", "value3"); obj.addProperty("field4", "value4"); obj.addProperty("field5", "value5"); obj.addProperty("field6", "value6"); obj.addProperty("field7", "value7"); obj.addProperty("field8", "value8"); obj.addProperty("field9", "value9"); obj.addProperty("field10", "value10"); obj.addProperty("field11", "value
@Test public void testGetJsonElementForChild() throws Exception { String json = "{\\n" + " \\"array\\": [\\n" + " {\\n" + " \\"firstName\\": \\"John\\",\\n" + " \\"lastName\\": \\"Smith\\"\\n" + " },\\n" + " {\\n" + " \\"firstName\\": \\"John\\",\\n" + " \\"lastName\\": \\"Smith\\"\\n" + " },\\n" + " {\\n" + " \\"firstName\\": \\"John\\",\\n" + " \\
@Test public void testGetJsonElementForChild() { JsonObject child = new JsonObject(); child.addProperty("field1", "value1"); child.addProperty("field2", "value2"); child.addProperty("field3", "value3"); child.addProperty("field4", "value4"); child.addProperty("field5", "value5"); JsonObject child2 = new JsonObject(); child2.addProperty("field1", "value1"); child2.addProperty("field2", "value2"); child2.addProperty("field3", "value3"); child2.addProperty("field4", "value4"); child2.addProperty("field5", "value
@Test public void testGetJsonElementForChild() throws Exception { String json = "{\\n" + " \\"array\\": [\\n" + " {\\n" + " \\"firstName\\": \\"John\\",\\n" + " \\"lastName\\": \\"Smith\\"\\n" + " },\\n" + " {\\n" + " \\"firstName\\": \\"John\\",\\n" + " \\"lastName\\": \\"Smith\\"\\n" + " },\\n" + " {\\n" + " \\"firstName\\": \\"John\\",\\n" + " \\
@Test public void testVisitUsingCustomHandler() throws Exception { String json = "{\\n" + " \\"type\\": \\"array\\",\\n" + " \\"children\\": [\\n" + " {\\n" + " \\"type\\": \\"string\\",\\n" + " \\"name\\": \\"string\\",\\n" + " \\"value\\": \\"string\\"\\n" + " },\\n" + " {\\n" + " \\"type\\": \\"string\\",\\n" + " \\"name\\": \\"string\\",\\n" + " \\"value\\": \\"string
@Test public void testVisitUsingCustomHandler() throws Exception { String json = "{\\n" + " \\"type\\": \\"array\\",\\n" + " \\"children\\": [\\n" + " {\\n" + " \\"type\\": \\"string\\",\\n" + " \\"name\\": \\"string\\",\\n" + " \\"value\\": \\"string\\"\\n" + " },\\n" + " {\\n" + " \\"type\\": \\"string\\",\\n" + " \\"name\\": \\"string\\",\\n" + " \\"value\\": \\"string
@Test public void testVisitUsingCustomHandler() throws Exception { String json = "{\\n" + " \\"type\\": \\"array\\",\\n" + " \\"children\\": [\\n" + " {\\n" + " \\"type\\": \\"string\\",\\n" + " \\"name\\": \\"string\\",\\n" + " \\"value\\": \\"string\\"\\n" + " },\\n" + " {\\n" + " \\"type\\": \\"string\\",\\n" + " \\"name\\": \\"string\\",\\n" + " \\"value\\": \\"string
@Test public void testVisitUsingCustomHandler() throws Exception { String json = "{\\n" + " \\"type\\": \\"array\\",\\n" + " \\"children\\": [\\n" + " {\\n" + " \\"type\\": \\"string\\",\\n" + " \\"name\\": \\"string\\",\\n" + " \\"value\\": \\"string\\"\\n" + " },\\n" + " {\\n" + " \\"type\\": \\"string\\",\\n" + " \\"name\\": \\"string\\",\\n" + " \\"value\\": \\"string
@Test public void testVisitUsingCustomHandler() throws Exception { String json = "{\\n" + " \\"type\\": \\"array\\",\\n" + " \\"children\\": [\\n" + " {\\n" + " \\"type\\": \\"string\\",\\n" + " \\"name\\": \\"string\\",\\n" + " \\"value\\": \\"string\\"\\n" + " },\\n" + " {\\n" + " \\"type\\": \\"string\\",\\n" + " \\"name\\": \\"string\\",\\n" + " \\"value\\": \\"string
@Test public void testVisitUsingCustomHandler() throws Exception { String json = "{\\n" + " \\"type\\": \\"array\\",\\n" + " \\"children\\": [\\n" + " {\\n" + " \\"type\\": \\"string\\",\\n" + " \\"name\\": \\"string\\",\\n" + " \\"value\\": \\"string\\"\\n" + " },\\n" + " {\\n" + " \\"type\\": \\"string\\",\\n" + " \\"name\\": \\"string\\",\\n" + " \\"value\\": \\"string
@Test public void testAssignToRoot() throws Exception { String json = "{\\n" + " \\"type\\": \\"array\\",\\n" + " \\"children\\": [\\n" + " {\\n" + " \\"type\\": \\"string\\",\\n" + " \\"name\\": \\"string\\",\\n" + " \\"value\\": \\"string\\"\\n" + " },\\n" + " {\\n" + " \\"type\\": \\"string\\",\\n" + " \\"name\\": \\"string\\",\\n" + " \\"value\\": \\"string\\"
@Test public void testVisitUsingCustomHandler() throws Exception { String json = "{\\n" + " \\"type\\": \\"array\\",\\n" + " \\"children\\": [\\n" + " {\\n" + " \\"type\\": \\"string\\",\\n" + " \\"name\\": \\"string\\",\\n" + " \\"value\\": \\"string\\"\\n" + " },\\n" + " {\\n" + " \\"type\\": \\"string\\",\\n" + " \\"name\\": \\"string\\",\\n" + " \\"value\\": \\"string
@Test public void testVisitUsingCustomHandler() throws Exception { String json = "{\\n" + " \\"type\\": \\"array\\",\\n" + " \\"children\\": [\\n" + " {\\n" + " \\"type\\": \\"string\\",\\n" + " \\"name\\": \\"string\\",\\n" + " \\"value\\": \\"string\\"\\n" + " },\\n" + " {\\n" + " \\"type\\": \\"string\\",\\n" + " \\"name\\": \\"string\\",\\n" + " \\"value\\": \\"string
@Test(expected=DetailedException.class) public void testVisitUsingCustomHandler() throws Exception { JsonObject obj = new JsonObject(); obj.addProperty("one", "one"); obj.addProperty("two", "two"); obj.addProperty("three", "three"); obj.addProperty("four", "four"); obj.addProperty("five", "five"); obj.addProperty("six", "six"); obj.addProperty("eight", "eight"); obj.addProperty("nine", "nine"); obj.addProperty("nine2", "nine2"); obj.addProperty("nine3", "nine3"); obj.
@Test public void testFindAndInvokeCustomSerializer() throws Exception { FieldAttributes f = mock(FieldAttributes.class); when(f.getType()).thenReturn(String.class); when(f.getName()).thenReturn("field1"); FieldAttributes f2 = mock(FieldAttributes.class); when(f2.getType()).thenReturn(String.class); when(f2.getName()).thenReturn("field2"); FieldAttributes f3 = mock(FieldAttributes.class); when(f3.getType()).thenReturn(String.class); when(f3.getName()).thenReturn("field3"); FieldAttributes f4 = mock(FieldAttributes.class
@Test public void testFindAndInvokeCustomSerializer() throws Exception { JsonSerializer<TestClass> customSerializer = new JsonSerializer<TestClass>() { @Override public void serialize(Object obj, Type type, JsonSerializationContext context) { super.serialize(obj, type, context); } @Override public void end(ObjectTypePair node) { } @Override public void start(ObjectTypePair node) { } @Override public void end(ObjectTypePair node) { } @Override public void start(ObjectTypePair node) { } @Override public void end(ObjectTypePair node) { } @Override public void start(ObjectTypePair node) { } @Override public void end(ObjectTypePair node) { } @Override public
@Test public void testFindAndInvokeCustomSerializer() throws Exception { FieldAttributes f = mock(FieldAttributes.class); when(f.getType()).thenReturn(new SimpleParameterizedType(String.class, String.class)); when(f.getName()).thenReturn("field1"); FieldAttributes f2 = mock(FieldAttributes.class); when(f2.getType()).thenReturn(new SimpleParameterizedType(String.class, String.class)); when(f2.getName()).thenReturn("field2"); FieldAttributes f3 = mock(FieldAttributes.class); when(f3.getType()).thenReturn(new SimpleParameterizedType(String.class, String.
@Test public void testFindAndInvokeCustomSerializer() throws Exception { FieldAttributes f = mock(FieldAttributes.class); when(f.getType()).thenReturn(String.class); when(f.getName()).thenReturn("field1"); FieldAttributes f2 = mock(FieldAttributes.class); when(f2.getType()).thenReturn(String.class); when(f2.getName()).thenReturn("field2"); FieldAttributes f3 = mock(FieldAttributes.class); when(f3.getType()).thenReturn(String.class); when(f3.getName()).thenReturn("field3"); FieldAttributes f4 = mock(FieldAttributes.class
@Test public void testFindAndInvokeCustomSerializer() throws Exception { FieldAttributes f = mock(FieldAttributes.class); Type type = mock(Type.class); when(f.getType()).thenReturn(type); when(f.getName()).thenReturn("field1"); FieldAttributes f2 = mock(FieldAttributes.class); when(f2.getType()).thenReturn(type); when(f2.getName()).thenReturn("field2"); FieldAttributes f3 = mock(FieldAttributes.class); when(f3.getType()).thenReturn(type); FieldAttributes f4 = mock(FieldAttributes.class); when(f4.getType()).then
@Test public void testFindAndInvokeCustomSerializer() throws Exception { }
@Test public void testFindAndInvokeCustomSerializer() throws Exception { when(field1.getFieldType()).thenReturn(FieldType.STRING); when(field2.getFieldType()).thenReturn(FieldType.STRING); when(field3.getFieldType()).thenReturn(FieldType.STRING); when(serializer1.serialize(any(Object.class), any(Type.class), any(JsonSerializationContext.class))).thenReturn(null); when(serializer2.serialize(any(Object.class), any(Type.class), any(JsonSerializationContext.class))).thenReturn(null); when(serializer3.serialize(any(Object.class), any(Type.class), any
@Test public void testFindAndInvokeCustomSerializer() throws Exception { FieldAttributes f = mock(FieldAttributes.class); Type type = mock(Type.class); when(f.getType()).thenReturn(type); when(f.getName()).thenReturn("field1"); FieldAttributes f2 = mock(FieldAttributes.class); when(f2.getType()).thenReturn(type); when(f2.getName()).thenReturn("field2"); FieldAttributes f3 = mock(FieldAttributes.class); when(f3.getType()).thenReturn(type); FieldAttributes f4 = mock(FieldAttributes.class); when(f4.getType()).then
@Test public void testFindAndInvokeCustomSerializer() throws Exception { FieldAttributes f = mock(FieldAttributes.class); Type type = mock(Type.class); when(f.getType()).thenReturn(type); when(f.getName()).thenReturn("field1"); FieldAttributes f2 = mock(FieldAttributes.class); when(f2.getType()).thenReturn(type); when(f2.getName()).thenReturn("field2"); FieldAttributes f3 = mock(FieldAttributes.class); when(f3.getType()).thenReturn(type); FieldAttributes f4 = mock(FieldAttributes.class); when(f4.getType()).then
@Test public void testFindAndInvokeCustomSerializer() throws Exception { FieldAttributes f = mock(FieldAttributes.class); Type type = mock(Type.class); when(f.getType()).thenReturn(type); when(f.getName()).thenReturn("field1"); FieldAttributes f2 = mock(FieldAttributes.class); when(f2.getType()).thenReturn(type); when(f2.getName()).thenReturn("field2"); FieldAttributes f3 = mock(FieldAttributes.class); when(f3.getType()).thenReturn(type); FieldAttributes f4 = mock(FieldAttributes.class); when(f4.getType()).then
@Test public void testFindAndInvokeCustomSerializer() throws Exception { }
@Test public void testAssignToRoot() throws Exception { String testData = "{\\n" + " \\"root\\": {\\n" + " \\"children\\": [\\n" + " {\\n" + " \\"child\\": {\\n" + " \\"type\\": \\"string\\",\\n" + " \\"value\\": \\"string\\"\\n" + " }\\n" + " ]\\n" + " },\\n" + " {\\n" + " \\"child\\": {\\n" + " \\"type\\": \\"string\\",\\n" + " \\"value\\": \\"string
@Test public void testAssignToRoot() { JsonObject root = new JsonObject(); root.addProperty("one", "one"); root.addProperty("two", "two"); root.addProperty("three", "three"); root.addProperty("four", "four"); root.addProperty("five", "five"); root.addProperty("six", "six"); root.addProperty("eight", "eight"); root.addProperty("nine", "nine"); root.addProperty("nine2", "nine2"); root.addProperty("nine3", "nine3"); root.addProperty("nine4", "nine4");
@Test(expected = NullPointerException.class) public void testAssignToRoot_NullElement() { try { new JsonSerializationVisitor(null, false, null, null, new MemoryRefStack()).assignToRoot(null); } catch (NullPointerException e) { assertTrue(e.getMessage().contains("newRoot")); throw e; } }
@Test public void testGetJsonElement() { System.out.println("getJsonElement"); JsonElement result = instance.getJsonElement(); assertNotNull(result); assertEquals(result.getAsJsonObject().get("firstName").getAsString(), "John"); assertEquals(result.getAsJsonObject().get("lastName").getAsString(), "Smith"); assertEquals(result.getAsJsonObject().getAsJsonObject().getAsJsonObject().getAsJsonObject().getAsJsonObject().getAsJsonObject().getAsJsonObject().getAsJsonObject().getAsJsonObject().getAsJsonObject().getAsJsonObject().getAsJsonObject().getAsJsonObject().getAsJsonObject().getAsJsonObject().getAsJsonObject().getAsJsonObject().
@Test public void testGetJsonElement() { System.out.println("getJsonElement"); instance = new JsonSerializationVisitor(null, false, null, null, null); assertSame(instance.getJsonElement(), instance.getJsonElement()); instance = new JsonSerializationVisitor(null, true, null, null, null); assertSame(instance.getJsonElement(), instance.getJsonElement()); instance = new JsonSerializationVisitor(null, true, null, null, null); assertSame(instance.getJsonElement(), instance.getJsonElement()); instance = new JsonSerializationVisitor(null, true, null, null, null); assertSame(instance.getJsonElement(), instance.getJsonElement());
@Test public void setIndent() throws Exception { JsonWriter out = new JsonWriter(new StringWriter()); out.name("name").value("value"); out.setIndent("\\t"); assertEquals("{\\"name\\":\\"value\\"}", out.toString()); out.setIndent("\\t"); assertEquals("{\\"name\\":\\"name\\",\\"value\\":\\"value\\"}", out.toString()); out.setIndent("\\t"); assertEquals("{\\"name\\":\\"name\\",\\"value\\":\\"value\\"}", out.toString()); out.setIndent("\\t"); assertEquals("{\\"name\\":\\"name\\",\\"value\\":\\"value
@Test public void testIndent() throws Exception { JsonWriter out = new JsonWriter(new StringWriter()); out.setIndent(" "); JsonWriter w = new JsonWriter(out); w.setIndent("\\t"); w.setIndent("\\t\\t"); w.setIndent("\\t\\t\\t"); w.setIndent("\\t\\t\\t"); w.setIndent("\\t\\t\\t"); w.beginObject(); w.value("1.0"); w.endObject(); w.endObject(); w.beginObject(); w.value("2.0"); w.value("3.0"); w.endObject(); w.endObject(); w.
@Test public void testIndent() throws Exception { JsonWriter out = new JsonWriter(new StringWriter()); out.setIndent(" "); JsonWriter w = new JsonWriter(out); w.setIndent(" "); w.setIndent("\\t"); w.setIndent("\\t\\t"); w.setIndent("\\t\\t"); w.beginObject(); w.value("foo"); w.endObject(); w.close(); assertEquals("{\\"foo\\":\\"foo\\"}", out.toString()); }
@Test public void setIndent() throws Exception { JsonWriter out = new JsonWriter(new StringWriter()); out.setIndent("\\t"); assertEquals("\\t", out.toString()); out.setIndent("\\t"); assertEquals("\\t", out.toString()); out.setIndent("\\t"); assertEquals("\\t", out.toString()); out.setIndent("\\t"); assertEquals("\\t", out.toString()); }
@Test public void close() throws Exception { JsonWriter out = new JsonWriter(new StringWriter()); JsonScope empty = new JsonScope(); empty.name("name").value("value"); empty.close(); assertEquals("{\\"name\\":\\"value\\"}", out.toString()); out.close(); assertEquals("{\\"name\\":\\"name\\",\\"value\\":\\"value\\"}", out.toString()); out.close(); assertEquals("{\\"name\\":\\"name\\",\\"value\\":\\"value\\"}", out.toString()); out.close(); assertEquals("{\\"name\\":\\"name\\",\\"value\\":\\"value\\"}", out.toString()); }
@Test(expected=NullPointerException.class) public void nullName() throws Exception { JsonWriter w = new JsonWriter(); w.name(null); }
@Test public void nullValue() throws Exception { JsonWriter value = new JsonWriter().value(null); assertEquals("null", value.toString()); value = new JsonWriter().value(null); assertEquals("null", value.toString()); value = new JsonWriter().value(null); assertEquals("null", value.toString()); value = new JsonWriter().value(1); assertEquals("1", value.toString()); value = new JsonWriter().value(2); assertEquals("2", value.toString()); value = new JsonWriter().value(3); assertEquals("3", value.toString()); value = new JsonWriter().value(4); assertEquals("4", value.toString()); value = new
@Test public void nullValue() throws Exception { JsonWriter out = new JsonWriter(); new JsonWriter(out).value(null); assertEquals("null", out.toString()); }
@Test public void nullValue() throws Exception { JsonWriter out = new JsonWriter(); out.name("name").value(null); assertEquals("{\\"name\\":null}", out.toString()); }
@Test(expected=IllegalArgumentException.class) public void doubleNaN() throws IOException { new JsonWriter().value(Double.NaN); }
@Test(expected=IllegalArgumentException.class) public void doubleNaNs() throws Exception { JsonWriter writer = new JsonWriter().name("test").value(Double.NaN); writer.beginObject(); writer.value(Double.NaN); }
@Test(expected=IllegalArgumentException.class) public void testDoubleNaNs() throws Exception { new JsonWriter().beforeValue(Double.NaN); }
@Test(expected=IllegalArgumentException.class) public void doubleNaNs() throws Exception { new JsonWriter(new StringWriter()).value(Double.NaN); }
@Test(expected=IllegalArgumentException.class) public void doubleNaN() throws IOException { new JsonWriter().value(Double.NaN); }
@Test public void close() throws Exception { StringWriter out = new StringWriter(); JsonWriter w = new JsonWriter(out); w.beginObject().name("name").value("value"); w.close(); w.close(); assertEquals("{\\"name\\":\\"value\\"}", out.toString()); }
@Test public void emptyDocument() throws Exception { StringWriter out = new StringWriter(); JsonWriter w = new JsonWriter(out); w.close(); assertEquals("{}", out.toString()); }
@Test public void emptyDocument() throws Exception { JsonWriter out = new JsonWriter(); JsonScope scope = new JsonScope(); scope.beginObject(); scope.name("name").value("value"); scope.endObject(); assertEquals("{\\"name\\":\\"value\\"}", out.toString()); }
@Test public void newline() throws Exception { JsonWriter out = new JsonWriter(); out.beginObject(); out.name("name").value("value"); out.endObject(); assertEquals("{\\"name\\":\\"value\\"}", out.toString()); out.endObject(); assertEquals("{\\"name\\":\\"name\\",\\"value\\":\\"value\\"}", out.toString()); out.endObject(); assertEquals("{\\"name\\":\\"name\\",\\"value\\":\\"value\\"}", out.toString()); out.endObject(); assertEquals("{\\"name\\":\\"name\\",\\"value\\":\\"value\\"}", out.toString()); }
@Test public void newline() throws Exception { JsonWriter out = new JsonWriter(new StringWriter()); out.name("name").value("value"); assertEquals("{\\"name\\":\\"value\\"}", out.toString()); out.endObject(); assertEquals("{\\"name\\":\\"name\\",\\"value\\":\\"value\\"}", out.toString()); out.beginObject(); assertEquals("{\\"name\\":\\"name\\",\\"value\\":\\"value\\"}", out.toString()); out.endObject(); assertEquals("{\\"name\\":\\"name\\",\\"value\\":\\"value\\"}", out.toString()); }
@Test public void newline() throws Exception { JsonWriter out = new JsonWriter(new StringWriter()); out.name("name").value("value"); assertEquals("{\\"name\\":\\"value\\"}", out.toString()); out.endObject(); assertEquals("{\\"name\\":\\"name\\",\\"value\\":\\"value\\"}", out.toString()); out.beginObject(); assertEquals("{\\"name\\":\\"name\\",\\"value\\":\\"value\\"}", out.toString()); out.endObject(); assertEquals("{\\"name\\":\\"name\\",\\"value\\":\\"value\\"}", out.toString()); }
@Test(expected=IllegalStateException.class) public void testBeforeValue() throws Exception { new JsonWriter(new StringWriter()).beginObject(); new JsonWriter(new StringWriter()).beginObject(); new JsonWriter(new StringWriter()).beginObject(); new JsonWriter(new StringWriter()).endObject(); new JsonWriter(new StringWriter()).beginObject(); new JsonWriter(new StringWriter()).endObject(); new JsonWriter(new StringWriter()).endObject(); }
@Test public void testBeforeValue() throws Exception { JsonWriter out = new JsonWriter(new StringWriter()); out.beginObject().name("foo").value("bar").beginObject().value("baz").endObject(); assertEquals("{\\"foo\\":\\"bar\\",\\"baz\\":\\"baz\\"}", out.toString()); out.close(); out = new JsonWriter(new StringWriter()); out.beginObject().name("foo").value("bar").beginObject().endObject(); assertEquals("{\\"foo\\":\\"bar\\",\\"baz\\":\\"baz\\"}", out.toString()); }
@Test(expected = IllegalStateException.class) public void testBeforeValue() throws Exception { new JsonWriter(new StringWriter()).beginObject(); new JsonWriter(new StringWriter()).name("a").value("b"); new JsonWriter(new StringWriter()).beginObject(); new JsonWriter(new StringWriter()).name("c").value("d"); new JsonWriter(new StringWriter()).endObject(); new JsonWriter(new StringWriter()).beginObject(); new JsonWriter(new StringWriter()).endObject(); new JsonWriter(new StringWriter()).endObject(); }
@Test(expected = IllegalStateException.class) public void testBeforeValue() throws Exception { new JsonWriter(new StringWriter()).beginObject(); new JsonWriter(new StringWriter()).setName("a"); new JsonWriter(new StringWriter()).setName("b"); new JsonWriter(new StringWriter()).setName("c"); new JsonWriter(new StringWriter()).setName("d"); new JsonWriter(new StringWriter()).setName("e"); new JsonWriter(new StringWriter()).setName("f"); new JsonWriter(new StringWriter()).setName("g"); new JsonWriter(new StringWriter()).setName("h"); new JsonWriter(new StringWriter()).setName("i").setValue
@Test(expected=IllegalStateException.class) public void testBeforeValue() throws Exception { JsonWriter out = new JsonWriter(); out.beginObject(); out.name("foo"); out.value("bar"); out.endObject(); }
@Test public void testShouldSkipClass() throws Exception { SyntheticFieldExclusionStrategy sut = new SyntheticFieldExclusionStrategy(true); Assert.assertFalse(sut.shouldSkipClass(Object.class)); }
@Test public void shouldSkipClass() throws Exception { SyntheticFieldExclusionStrategy sut = new SyntheticFieldExclusionStrategy(true); Assert.assertFalse(sut.shouldSkipClass(Object.class)); }
@Test public void upperCamelCaseSeparatorNamingPolicy() { UpperCamelCaseSeparatorNamingPolicy decimalSeparatorNamingPolicy = new UpperCamelCaseSeparatorNamingPolicy("-"); assertEquals("-", decimalSeparatorNamingPolicy.getSeparator()); assertEquals("-", decimalSeparatorNamingPolicy.getSeparatorString()); assertEquals(ModifyFirstLetterNamingPolicy.LetterModifier.UPPER, decimalSeparatorNamingPolicy.getModifyFirstLetterNamingPolicy()); decimalSeparatorNamingPolicy = new UpperCamelCaseSeparatorNamingPolicy("-"); assertEquals("-", decimalSeparatorNamingPolicy.getSeparator()); assertEquals("-", decimalSeparatorNamingPolicy.getSeparatorString()); assertEquals(ModifyFirstLetterNamingPolicy.LetterModifier.UPPER, decimalSeparatorNamingPolicy.getModifyFirstLetterNaming
@Test public void testCamelCaseSeparatorNamingPolicy() { final CamelCaseSeparatorNamingPolicy camelCaseSeparatorNamingPolicy = new CamelCaseSeparatorNamingPolicy("|"); assertEquals(camelCaseSeparatorNamingPolicy.getSeparatorString(), "|"); assertEquals(camelCaseSeparatorNamingPolicy.getClass(), CamelCaseSeparatorNamingPolicy.class); assertEquals(camelCaseSeparatorNamingPolicy.ModifyFirstLetterNamingPolicy.LetterModifier.UPPER, camelCaseSeparatorNamingPolicy.ModifyFirstLetterNamingPolicy.LetterModifier.UPPER); camelCaseSeparatorNamingPolicy = new UpperCamelCaseSeparatorNamingPolicy("|"); assertEquals(camelCaseSeparatorNamingPolicy.getSeparatorString(), "|"); assertEquals(camelCaseSeparatorNamingPolicy.getClass
@Test public void testShouldSkipClass() { ModifierBasedExclusionStrategy strat = new ModifierBasedExclusionStrategy(0, -3); Assert.assertFalse(strat.shouldSkipClass(Object.class)); Assert.assertFalse(strat.shouldSkipClass(String.class)); Assert.assertFalse(strat.shouldSkipClass(String[].class)); Assert.assertFalse(strat.shouldSkipClass(String[][].class)); Assert.assertFalse(strat.shouldSkipClass(String[][].class)); Assert.assertFalse(strat.shouldSkipClass(String[][].class)); Assert.assertFalse(strat.shouldSkipClass(String[][
@Test public void testClassSkip() { ModifierBasedExclusionStrategy s = new ModifierBasedExclusionStrategy(); Assert.assertFalse(s.shouldSkipClass(Object.class)); Assert.assertFalse(s.shouldSkipClass(String.class)); Assert.assertFalse(s.shouldSkipClass(String[].class)); Assert.assertFalse(s.shouldSkipClass(String[][].class)); Assert.assertFalse(s.shouldSkipClass(String[][].class)); Assert.assertFalse(s.shouldSkipClass(String[][].class)); Assert.assertFalse(s.shouldSkipClass(String[][].class)); Assert.assertFalse(s.shouldSkipClass(
@Test public void component_raw_type() { Type stringType = new TypeToken<String>() {}.getType(); Type stringType2 = new TypeToken<String>() {}.getType(); Type stringType3 = new TypeToken<String>() {}.getType(); Type[] types = new Type[] { stringType, stringType2, stringType3 }; Type[] componentTypes = new Type[] { stringType, stringType3 }; for (Type componentType : componentTypes) { TypeInfoArray info = new TypeInfoArray(componentType); Class<?> componentRawType = info.getComponentRawType(); assertEquals(String.class, componentRawType); } }
@Test public void component_raw_type() { Type stringType = new TypeToken<String>() {}.getType(); Type stringType2 = new TypeToken<String>() {}.getType(); assertEquals(String.class, TypeInfoArray.extractSecondLevelType(stringType, String.class)); assertEquals(String.class, TypeInfoArray.extractSecondLevelType(stringType2, String.class)); Type stringType3 = new TypeToken<String>() {}.getType(); assertEquals(String.class, TypeInfoArray.extractSecondLevelType(stringType3, String.class)); assertEquals(String.class, TypeInfoArray.extractSecondLevelType(stringType3, String.
@Test public void testEscaper() throws Exception { assertEquals("\\n", new Escaper(true).escapeJsonString("")); assertEquals("\\n", new Escaper(false).escapeJsonString("\\n")); assertEquals("\\n", new Escaper(true).escapeJsonString("\\n")); assertEquals("\\n", new Escaper(false).escapeJsonString("\\n")); assertEquals("\\n", new Escaper(true).escapeJsonString("\\n")); assertEquals("\\n", new Escaper(false).escapeJsonString("\\n")); assertEquals("\\n", new Escaper(true).
@Test public void shouldEscapeHtmlCharacters() throws Exception { assertEquals("\\n", new Escaper(true).escapeJsonString("\\n")); assertEquals("\\n", new Escaper(false).escapeJsonString("\\n")); assertEquals("\\n", new Escaper(true).escapeJsonString("\\n")); assertEquals("\\n", new Escaper(false).escapeJsonString("\\n")); assertEquals("\\n", new Escaper(true).escapeJsonString("\\n")); assertEquals("\\n", new Escaper(false).escapeJsonString("\\n")); assertEquals("\\n", new Escaper
@Test public void pair() { String[] lines = new String[]{"a", "b", "c", "d", "e"}; Pair<String, String> pair = new Pair<>("a", "b"); assertEquals("a", pair.first); assertEquals("b", pair.second); assertEquals("c", pair.first); assertEquals("d", pair.second); assertArrayEquals(lines, pair.toString().split("\\n")); }
@Test public void pair() { Pair<String, String> pair = new Pair<String, String>("a", "b"); assertEquals("a", pair.first); assertEquals("b", pair.second); assertEquals("\\n", pair.toString()); pair = new Pair<String, String>("a", "b"); assertEquals("a", pair.first); assertEquals("b", pair.second); assertEquals("\\n", pair.toString()); pair = new Pair<String, String>("a", "b"); assertEquals("a", pair.first); assertEquals("b", pair.second); assertEquals("\\n", pair.toString()); pair = new Pair<String
@Test public void pair() { Pair<String, String> pair1 = new Pair<String, String>("a", "b"); assertEquals("a", pair1.first); assertEquals("b", pair1.second); pair1 = new Pair<String, String>("a", "b"); assertEquals("a", pair1.first); assertEquals("b", pair1.second); pair1 = new Pair<String, String>("a", "b"); assertEquals("a", pair1.first); assertEquals("b", pair1.second); pair1 = new Pair<String, String>("a", "b"); assertEquals("a", pair1.first); assert
@Test public void peek() throws IOException { for (JsonToken token: JsonToken.values()) { JsonReader reader = new JsonReader(new StringReader(token.toString())); JsonToken peek = reader.peek(); assertEquals(token, peek.nextToken()); } assertEquals(JsonToken.VALUE_STRING, peek.peek().nextString()); assertEquals(JsonToken.VALUE_NUMBER, peek.peek().nextDouble(), 0.0); assertEquals(JsonToken.VALUE_STRING, peek.peek().nextString()); assertEquals(JsonToken.VALUE_NUMBER, peek.peek().nextDouble(), 0.0); assertEquals(JsonToken.VALUE_NUMBER, peek.
@Test public void simple() throws IOException { JsonReader reader = new JsonReader(new StringReader("{\\"a\\":1}")); JsonToken token = reader.peek(); assertEquals(JsonToken.START_OBJECT, token); assertEquals("a", token.getName()); assertEquals(1, token.getLength()); assertEquals(1, token.getBeginNumber()); assertEquals(1, token.getLength()); assertEquals(1, token.getBeginNumber()); assertEquals(1, token.getEndNumber()); assertEquals(1, token.getBeginNumber()); assertEquals(1, token.getEndNumber()); assertEquals(1, token.getBeginNumber()); assertEquals(1,
@Test public void testPeek() throws IOException { JsonReader reader = new JsonReader(new StringReader("{\\"a\\":1}")); assertEquals(JsonToken.START_OBJECT, reader.peek()); assertEquals("a", reader.peek().nextString()); assertEquals(1, reader.peek().nextInt()); assertEquals(2, reader.peek().nextInt()); assertEquals(3, reader.peek().nextInt()); assertEquals(4, reader.peek().nextInt()); assertEquals(5, reader.peek().nextInt()); assertEquals(6, reader.peek().nextInt()); assertEquals(7, reader.peek().nextInt());
@Test public void testDecodeLiteral() throws IOException { for (JsonToken token: JsonToken.values()) { assertEquals(token.getType(), decodeLiteral().peek().getType()); assertEquals(token.getType(), decodeLiteral().peek().getType()); assertEquals(token.getType(), decodeLiteral().peek().getType()); assertEquals(token.getType(), decodeLiteral().peek().getType()); assertEquals(token.getType(), decodeLiteral().peek().getType()); assertEquals(token.getType(), decodeLiteral().peek().getType()); assertEquals(token.getType(), decodeLiteral().peek().getType()); assertEquals(token.get
@Test public void testPeek() throws IOException { JsonReader reader = new JsonReader(new StringReader("{\\"a\\":1}")); JsonToken token = reader.peek(); assertEquals(JsonToken.START_OBJECT, token); token = reader.peek(); assertEquals(JsonToken.START_OBJECT, token); token = reader.peek(); assertEquals(JsonToken.END_OBJECT, token); token = reader.peek(); assertEquals(JsonToken.START_OBJECT, token); token = reader.peek(); assertEquals(JsonToken.END_OBJECT, token); token = reader.peek(); assertEquals(JsonToken.END_OBJECT, token); }
@Test public void testConsumeNonExecutePrefix() throws IOException { JsonReader reader = new JsonReader(new StringReader("{\\"a\\":1, \\"b\\":2}")); assertEquals("{\\"a\\":1, \\"b\\":2}", reader.nextString()); assertEquals("{\\"a\\":1, \\"b\\":2}", reader.nextString()); reader = new JsonReader(new StringReader("{\\"a\\":1, \\"b\\":2}")); assertEquals("{\\"a\\":1, \\"b\\":2}", reader.nextString()); assertEquals("{\\"a\\":1, \\"b\\":2
@Test public void testNextName() throws IOException { assertEquals("a", JsonReader.readName("a")); assertEquals("b", JsonReader.readName("b")); assertEquals("c", JsonReader.readName("c")); assertEquals("d", JsonReader.readName("d")); assertEquals("e", JsonReader.readName("e")); assertEquals("f", JsonReader.readName("f")); assertEquals("g", JsonReader.readName("g")); assertEquals("h", JsonReader.readName("h")); assertEquals("i", JsonReader.readName("i")); assertEquals("j", JsonReader.readName("
@Test public void testName() throws IOException { String json = "{\\"a\\":1, \\"b\\":2, \\"c\\":3}"; JsonReader reader = new JsonReader(new StringReader(json)); assertEquals("a", reader.nextName()); assertEquals("1", reader.nextName()); assertEquals(2, reader.peekStack().size()); assertEquals("a", reader.peekStack().peek().nextString()); assertEquals("b", reader.peek().nextString()); assertEquals(3, reader.peekStack().size()); assertEquals("c", reader.peek().nextString()); assertEquals(4, reader.peekStack().
@Test public void testNextString() throws IOException { for (String s : STRINGS) { assertEquals(s, s.nextString()); } for (String s : STRINGS) { assertEquals(s, s.nextString()); } for (String s : STRINGS) { assertEquals(s, s.nextString()); } for (String s : STRINGS) { assertEquals(s, s.nextString()); } for (String s : STRINGS) { assertEquals(s, s.nextString()); } for (String s : STRINGS) { assertEquals(s, s.nextString()); } for (String s : STRINGS) { assertEquals(s, s.next
@Test public void testNextString() throws IOException { JsonReader reader = new JsonReader(new StringReader("\\"hello\\"")); assertEquals("hello", reader.peek().nextString()); assertEquals("hello", reader.peek().nextString(\'\\\'\')); assertEquals("hello", reader.peek().nextString(\'\\\'\')); assertEquals("hello", reader.peek().nextString(\'\\\'\')); assertEquals("hello", reader.peek().nextString(\'\\\'\')); assertEquals("hello", reader.peek().nextString(\'\\\'\')); assertEquals("hello", reader.peek().nextString(\'\\\'\')); assertEquals("hello", reader
@Test public void testString() throws IOException { JsonReader reader = new JsonReader(new StringReader("\\"a\\"")); assertEquals("a", reader.nextString()); assertEquals("a", reader.nextString()); assertEquals("b", reader.nextString()); assertEquals("c", reader.nextString()); assertEquals("d", reader.nextString()); assertEquals("e", reader.nextString()); assertEquals("f", reader.nextString()); assertEquals("g", reader.nextString()); assertEquals("h", reader.nextString()); assertEquals("i", reader.nextString()); assertEquals("j", reader.nextString()); assertEquals("k", reader.nextString()); assertEquals
@Test(expected=IllegalStateException.class) public void testNextString() throws IOException { JsonReader reader = new JsonReader(new StringReader("{\\"foo\\": \\"bar\\"}")); reader.beginObject(); reader.nextString(); }
@Test public void testSkipValue() throws IOException { String json = "{\\"a\\":1, \\"b\\":2, \\"c\\":3}"; JsonReader reader = new JsonReader(new StringReader(json)); reader.beginObject(); reader.skipValue(); reader.endObject(); assertEquals("{\\"a\\":1, \\"b\\":2, \\"c\\":3}", reader.toString()); reader.endObject(); assertEquals("{\\"a\\":1, \\"b\\":2}", reader.toString()); reader.beginObject(); reader.skipValue(); reader.endObject(); assertEquals("{\\"a\\":1, \\"b
@Test public void testSkipValue() throws IOException { String json = "{\\"a\\":1, \\"b\\":2, \\"c\\":3}"; JsonReader reader = new JsonReader(new StringReader(json)); assertEquals("{\\"a\\":1, \\"b\\":2, \\"c\\":3}", reader.nextString()); reader.skipValue(); assertEquals("{\\"a\\":1, \\"b\\":2, \\"c\\":3}", reader.nextString()); reader.skipValue(); assertEquals("{\\"a\\":1, \\"b\\":2, \\"c\\":3}", reader.nextString
@Test public void testSkipValue() throws IOException { String json = "{\\"a\\":1, \\"b\\":2, \\"c\\":3}"; JsonReader reader = new JsonReader(new StringReader(json)); assertEquals("{\\"a\\":1, \\"b\\":2, \\"c\\":3}", reader.nextString()); reader.skipValue(); assertEquals("{\\"a\\":1, \\"b\\":2, \\"c\\":3}", reader.nextString()); reader.skipValue(); assertEquals("{\\"a\\":1, \\"b\\":2, \\"c\\":3}", reader.nextString
@Test public void testSkipValue() throws IOException { String json = "{\\"a\\":1, \\"b\\":2, \\"c\\":3}"; JsonReader reader = new JsonReader(new StringReader(json)); assertEquals("{\\"a\\":1, \\"b\\":2, \\"c\\":3}", reader.nextString()); reader.skipValue(); assertEquals("{\\"a\\":1, \\"b\\":2, \\"c\\":3}", reader.nextString()); reader.skipValue(); assertEquals("{\\"a\\":1, \\"b\\":2, \\"c\\":3}", reader.nextString
@Test public void testSkipValue() throws IOException { String json = "{\\"a\\":1, \\"b\\":2, \\"c\\":3}"; JsonReader reader = new JsonReader(new StringReader(json)); assertEquals("{\\"a\\":1, \\"b\\":2, \\"c\\":3}", reader.nextString()); reader.skipValue(); assertEquals("{\\"a\\":1, \\"b\\":2, \\"c\\":3}", reader.nextString()); reader.skipValue(); assertEquals("{\\"a\\":1, \\"b\\":2, \\"c\\":3}", reader.nextString
@Test public void testSkipValue() throws IOException { String json = "{\\"a\\":1, \\"b\\":2}"; JsonReader reader = new JsonReader(new StringReader(json)); JsonToken token = reader.beginObject(); assertEquals("a", token.nextString()); token = reader.beginObject(); assertEquals("1", token.nextString()); token = reader.beginObject(); assertEquals("b", token.nextString()); token = reader.beginObject(); assertEquals("2", token.nextString()); token = reader.beginObject(); assertEquals("1", token.nextString()); token = reader.beginObject(); assertEquals("2", token.nextString()); token = reader
@Test public void testSkipValue() throws IOException { JsonReader reader = new JsonReader(new StringReader("{\\"a\\":1, \\"b\\":2}")); assertEquals("{\\"a\\":1,\\"b\\":2}", reader.nextString()); assertEquals("{\\"a\\":1,\\"b\\":2}", reader.nextString()); assertEquals("{\\"a\\":1,\\"b\\":2}", reader.nextString()); assertEquals("{\\"a\\":1,\\"b\\":2}", reader.nextString()); assertEquals("{\\"a\\":1,\\"b\\":2}", reader.nextString()); assert
@Test public void testSkipValue() throws IOException { JsonReader reader = new JsonReader(new StringReader("{\\"a\\":1}")); assertEquals("{\\"a\\":1}", reader.nextString()); reader.skipValue(); assertEquals("{\\"a\\":1}", reader.nextString()); reader.skipValue(); assertEquals("{\\"a\\":1}", reader.nextString()); reader.skipValue(); assertEquals("{\\"a\\":1}", reader.nextString()); reader.skipValue(); assertEquals("{\\"a\\":1}", reader.nextString()); reader.skipValue(); assertEquals("{\\"a\\":1}", reader.
@Test public void testSkipValue() throws IOException { JsonReader reader = new JsonReader(new StringReader("[\\"a\\", \\"b\\", \\"c\\"]")); assertEquals("[\\"a\\", \\"b\\", \\"c\\"]", reader.nextString()); assertEquals("[\\"a\\", \\"b\\", \\"c\\"]", reader.nextString()); assertEquals("[\\"a\\", \\"b\\", \\"c\\"]", reader.nextString()); assertEquals("[\\"a\\", \\"b\\", \\"c\\"]", reader.nextString()); assertEquals("[\\"a\\", \\"b\\", \\
@Test public void testSkipValue() throws IOException { String json = "{\\"a\\":1, \\"b\\":2, \\"c\\":3}"; JsonReader reader = new JsonReader(new StringReader(json)); assertEquals("{\\"a\\":1, \\"b\\":2, \\"c\\":3}", reader.nextString()); reader.skipValue(); assertEquals("{\\"a\\":1, \\"b\\":2, \\"c\\":3}", reader.nextString()); reader.skipValue(); assertEquals("{\\"a\\":1, \\"b\\":2, \\"c\\":3}", reader.nextString
@Test public void testSkipValue() throws IOException { String json = "{\\"a\\":1, \\"b\\":2, \\"c\\":3}"; JsonReader reader = new JsonReader(new StringReader(json)); assertEquals("{\\"a\\":1, \\"b\\":2, \\"c\\":3}", reader.nextString()); assertEquals("{\\"a\\":1, \\"b\\":2, \\"c\\":3}", reader.nextString()); assertEquals("{\\"a\\":1, \\"b\\":2, \\"c\\":3}", reader.nextString()); assertEquals("{\\"a\\":1
@Test public void testSkipValue() throws IOException { String json = "{\\"a\\":1, \\"b\\":2, \\"c\\":3}"; JsonReader reader = new JsonReader(new StringReader(json)); assertEquals("{\\"a\\":1, \\"b\\":2, \\"c\\":3}", reader.nextString()); reader.skipValue(); assertEquals("{\\"a\\":1, \\"b\\":2, \\"c\\":3}", reader.nextString()); reader.skipValue(); assertEquals("{\\"a\\":1, \\"b\\":2, \\"c\\":3}", reader.nextString
@Test public void testNextInArray() throws Exception { JsonReader reader = new JsonReader(new StringReader("[\\"one\\",\\"two\\",\\"three\\"]")); assertEquals("one", reader.nextString()); assertEquals("two", reader.nextString()); assertEquals("three", reader.nextString()); reader = new JsonReader(new StringReader("[\\"one\\",\\"two\\",\\"three\\"]")); assertEquals("one", reader.nextString()); assertEquals("two", reader.nextString()); assertEquals("three", reader.nextString()); reader = new JsonReader(new StringReader("[\\"one\\",\\"two\\",\\"three\\"]"));
@Test public void testNextInArray() throws Exception { JsonReader reader = new JsonReader(new StringReader("[\\"one\\",\\"two\\",\\"three\\"]")); JsonToken token = reader.beginObject(); assertEquals("one", token.nextString()); assertEquals("two", token.nextString()); assertEquals("three", token.nextString()); token = reader.beginObject(); assertEquals("one", token.nextString()); assertEquals("two", token.nextString()); assertEquals("three", token.nextString()); token = reader.beginObject(); assertEquals("one", token.nextString()); assertEquals("two", token.nextString()); assertEquals("three",
@Test public void testNextInArray() throws Exception { JsonReader reader = new JsonReader(new StringReader("[\\"one\\",\\"two\\",\\"three\\"]")); JsonToken token = reader.beginArray(); assertEquals("one", token.nextString()); assertEquals("two", token.nextString()); assertEquals("three", token.nextString()); token = reader.beginArray(); assertEquals("one", token.nextString()); assertEquals("two", token.nextString()); assertEquals("three", token.nextString()); token = reader.beginArray(); assertEquals("one", token.nextString()); assertEquals("two", token.nextString()); assertEquals("three",
@Test public void testNextInObject() throws Exception { JsonReader reader = new JsonReader(new StringReader("{\\n" + " \\"a\\": {\\n" + " \\"b\\": {\\n" + " \\"c\\": {\\n" + " \\"d\\": {\\n" + " \\"e\\": {\\n" + " \\"f\\": \\"g\\"\\n" + " }\\n" + " }\\n" + " }\\n" + " }\\n" + " }\\n" + " }")); JsonWriter writer = new JsonWriter(reader); writer.beginObject(); writer.
@Test public void testNextInObject() throws Exception { JsonReader reader = new JsonReader(new StringReader("{\\n" + " \\"a\\": {\\n" + " \\"b\\": {\\n" + " \\"c\\": {\\n" + " \\"d\\": [\\n" + " \\"e\\",\\n" + " \\"f\\",\\n" + " \\"g\\",\\n" + " \\"h\\",\\n" + " \\"i\\",\\n" + " \\"j\\",\\n" + " \\"k\\",\\n" + " \\"l\\",
@Test public void testNextInObject() throws Exception { JsonReader reader = new JsonReader(new StringReader("{\\n" + " \\"a\\": {\\n" + " \\"b\\": {\\n" + " \\"c\\": {\\n" + " \\"d\\": {\\n" + " \\"e\\": {\\n" + " \\"f\\": \\"g\\"\\n" + " }\\n" + " }\\n" + " }\\n" + " }\\n" + " }\\n" + " }")); JsonWriter writer = new JsonWriter(reader); writer.beginObject(); writer.
@Test public void testNextInObject() throws Exception { JsonReader reader = new JsonReader(new StringReader("{\\n" + " \\"a\\": {\\n" + " \\"b\\": {\\n" + " \\"c\\": {\\n" + " \\"d\\": [\\n" + " \\"e\\",\\n" + " \\"f\\",\\n" + " \\"g\\",\\n" + " \\"h\\",\\n" + " \\"i\\",\\n" + " \\"j\\",\\n" + " \\"k\\",\\n" + " \\"l\\",
@Test public void testNextInObject() throws Exception { JsonReader reader = new JsonReader(new StringReader("{\\n" + " \\"a\\": {\\n" + " \\"b\\": {\\n" + " \\"c\\": {\\n" + " \\"d\\": [\\n" + " \\"e\\",\\n" + " \\"f\\",\\n" + " \\"g\\",\\n" + " \\"h\\",\\n" + " \\"i\\",\\n" + " \\"j\\",\\n" + " \\"k\\",\\n" + " \\"l\\",
@Test public void testNextInObject() throws Exception { JsonReader reader = new JsonReader(new StringReader("{\\n" + " \\"a\\": {\\n" + " \\"b\\": {\\n" + " \\"c\\": {\\n" + " \\"d\\": [\\n" + " \\"e\\",\\n" + " \\"f\\",\\n" + " \\"g\\",\\n" + " \\"h\\",\\n" + " \\"i\\",\\n" + " \\"j\\",\\n" + " \\"k\\",\\n" + " \\"l\\",
@Test public void testNextInObject() throws Exception { JsonReader reader = new JsonReader(new StringReader("{\\n" + " \\"a\\": {\\n" + " \\"b\\": {\\n" + " \\"c\\": {\\n" + " \\"d\\": {\\n" + " \\"e\\": {\\n" + " \\"f\\": \\"g\\"\\n" + " }\\n" + " }\\n" + " }\\n" + " }\\n" + " }\\n" + " }")); JsonWriter writer = new JsonWriter(reader); writer.beginObject(); writer.
@Test public void testNextInObject() throws Exception { JsonReader reader = new JsonReader(new StringReader("{\\n" + " \\"a\\": {\\n" + " \\"b\\": {\\n" + " \\"c\\": {\\n" + " \\"d\\": [\\n" + " \\"e\\",\\n" + " \\"f\\",\\n" + " \\"g\\",\\n" + " \\"h\\",\\n" + " \\"i\\",\\n" + " \\"j\\",\\n" + " \\"k\\",\\n" + " \\"l\\",
@Test public void testSwitch() throws IOException { JsonReader reader = new JsonReader(new StringReader("{\\n" + " \\"a\\": {\\n" + " \\"b\\": {\\n" + " \\"c\\": {\\n" + " \\"d\\": {\\n" + " \\"e\\": {\\n" + " \\"b\\": {\\n" + " \\"c\\": {\\n" + " \\"d\\": {\\n" + " \\"e\\": {\\n" + " \\"b\\": {\\n" + " \\"c\\": {\\n" + "
@Test public void testNextInObject() throws Exception { JsonReader reader = new JsonReader(new StringReader("{\\n" + " \\"a\\": {\\n" + " \\"b\\": {\\n" + " \\"c\\": {\\n" + " \\"d\\": [\\n" + " \\"e\\",\\n" + " \\"f\\",\\n" + " \\"g\\",\\n" + " \\"h\\",\\n" + " \\"i\\",\\n" + " \\"j\\",\\n" + " \\"k\\",\\n" + " \\"l\\",
@Test public void testCheckLenient() throws IOException { JsonReader reader = new JsonReader(new StringReader("{\\n" + " \\"a\\": {\\n" + " \\"b\\": {\\n" + " \\"c\\": {\\n" + " \\"d\\": {\\n" + " \\"e\\": {\\n" + " \\"f\\": \\"g\\"\\n" + " }\\n" + " }\\n" + " }\\n" + " }\\n" + " }\\n" + " }")); JsonWriter writer = new JsonWriter(reader); writer.beginObject(); writer.
@Test public void objectValue() throws IOException { assertEquals("{\\"a\\":1}", objectValue("a").toString()); assertEquals("{\\"a\\":1}", objectValue("a").toString()); assertEquals("{\\"a\\":1}", objectValue("a").toString()); assertEquals("{\\"a\\":1}", objectValue("a").toString()); assertEquals("{\\"a\\":1}", objectValue("a").toString()); assertEquals("{\\"a\\":1}", objectValue("a").toString()); assertEquals("{\\"a\\":1}", objectValue("a").toString()); assertEquals("{\\"a\\":1}", object
@Test(expected = IllegalStateException.class) public void testObjectValue() throws IOException { JsonReader reader = new JsonReader(new StringReader("{\\"a\\":1}")); reader.beginObject(); reader.nextObject(); reader.endObject(); }
@Test public void testNextValue() throws IOException { JsonReader reader = new JsonReader(new StringReader("{\\"foo\\":\\"bar\\"}")); assertEquals("{\\"foo\\":\\"bar\\"}", reader.nextValue().toString()); assertEquals("{\\"foo\\":\\"bar\\"}", reader.nextValue().toString()); assertEquals("{\\"foo\\":\\"bar\\"}", reader.nextValue().toString()); assertEquals("{\\"foo\\":\\"bar\\"}", reader.nextValue().toString()); assertEquals("{\\"foo\\":\\"bar\\"}", reader.nextValue().toString()); assertEquals("{\\"foo\\":\\"bar\\"}", reader.next
@Test public void testValue() throws IOException { assertEquals("{\\"foo\\":\\"bar\\"}", parse("{\\"foo\\":\\"bar\\"}").nextString()); assertEquals("{\\"foo\\":\\"bar\\"}", parse("{\\"foo\\":\\"bar\\"}").nextString()); assertEquals("{\\"foo\\":\\"bar\\"}", parse("{\\"foo\\":\\"bar\\"}").nextString()); assertEquals("{\\"foo\\":\\"bar\\"}", parse("{\\"foo\\":\\"bar\\"}").nextString()); assertEquals("{\\"foo\\":\\"bar\\"}", parse("{\\"foo\\":\\"bar\\"}").next
@Test public void testNextValue() throws IOException { JsonReader reader = new JsonReader(new StringReader("{\\"foo\\":\\"bar\\"}")); assertEquals("{\\"foo\\":\\"bar\\"}", reader.nextValue().toString()); assertEquals("{\\"foo\\":\\"bar\\"}", reader.nextValue().toString()); assertEquals("{\\"foo\\":\\"bar\\"}", reader.nextValue().toString()); assertEquals("{\\"foo\\":\\"bar\\"}", reader.nextValue().toString()); assertEquals("{\\"foo\\":\\"bar\\"}", reader.nextValue().toString()); assertEquals("{\\"foo\\":\\"bar\\"}", reader.next
@Test public void testNextValue() throws IOException { JsonReader reader = new JsonReader(new StringReader("{\\"foo\\":\\"bar\\"}")); assertEquals("{\\"foo\\":\\"bar\\"}", reader.nextValue().toString()); assertEquals("{\\"foo\\":\\"bar\\"}", reader.nextValue().toString()); assertEquals("{\\"foo\\":\\"bar\\"}", reader.nextValue().toString()); assertEquals("{\\"foo\\":\\"bar\\"}", reader.nextValue().toString()); assertEquals("{\\"foo\\":\\"bar\\"}", reader.nextValue().toString()); assertEquals("{\\"foo\\":\\"bar\\"}", reader.next
@Test public void testNextNonWhitespace() throws Exception { JsonReader reader = new JsonReader(new StringReader("{\\n" + " \\"a\\": 1,\\n" + " \\"b\\": 2,\\n" + " \\"c\\": 3,\\n" + " \\"d\\": 4,\\n" + " \\"e\\": 5,\\n" + " \\"f\\": 6,\\n" + " \\"g\\": 7,\\n" + " \\"h\\": 8,\\n" + " \\"i\\": 9,\\n" + " \\"j\\": 14,\\n" +
@Test public void testNextNonWhitespace() throws Exception { String json = "{\\n" + " \\"a\\": 1,\\n" + " \\"b\\": 2,\\n" + " \\"c\\": 3,\\n" + " \\"d\\": 4,\\n" + " \\"e\\": 5,\\n" + " \\"f\\": 6,\\n" + " \\"g\\": 7,\\n" + " \\"h\\": 8,\\n" + " \\"i\\": 9,\\n" + " \\"j\\": 14,\\n" + " \\"k\\": 15,
@Test public void testNextNonWhitespace() throws Exception { JsonReader reader = new JsonReader(new StringReader("{\\n" + " \\"a\\": \\"b\\",\\n" + " \\"c\\": \\"d\\",\\n" + " \\"d\\": \\"e\\",\\n" + " \\"e\\": \\"f\\",\\n" + " \\"f\\": \\"g\\",\\n" + " \\"g\\": \\"h\\",\\n" + " \\"h\\": \\"i\\",\\n" + " \\"i\\": \\"j\\",\\n" +
@Test public void testNextNonWhitespace() throws Exception { JsonReader reader = new JsonReader(new StringReader("{\\n" + " \\"a\\": \\"b\\",\\n" + " \\"c\\": \\"d\\",\\n" + " \\"d\\": \\"e\\",\\n" + " \\"e\\": \\"f\\",\\n" + " \\"f\\": \\"g\\",\\n" + " \\"g\\": \\"h\\",\\n" + " \\"h\\": \\"i\\",\\n" + " \\"i\\": \\"j\\",\\n" +
@Test public void testNextNonWhitespace() throws Exception { JsonReader reader = new JsonReader(new InputStreamReader(JsonTest.class.getResourceAsStream("test1.txt"))); reader.beginObject(); reader.beginObject(); reader.beginObject(); reader.beginObject(); reader.beginObject(); reader.beginObject(); reader.beginObject(); reader.beginObject(); reader.beginObject(); reader.endObject(); reader.endObject(); reader.endObject(); reader.endObject(); JsonReader.Reader reader2 = new JsonReader(new InputStreamReader(JsonTest.class.getResourceAsStream("test2.txt"))); reader2.beginObject(); reader2.beginObject(); reader2
@Test public void testSkipString() throws Exception { String json = "{\\n" + " \\"a\\": {\\n" + " \\"b\\": {\\n" + " \\"c\\": {\\n" + " \\"d\\": [\\n" + " \\"e\\",\\n" + " \\"f\\",\\n" + " \\"g\\",\\n" + " \\"h\\",\\n" + " \\"i\\",\\n" + " \\"j\\",\\n" + " \\"k\\",\\n" + " \\"l\\",\\n" + " \\"j\\
@Test public void testNextLiteral() throws Exception { JsonReader reader = new JsonReader(new InputStreamReader(JsonTest.class.getResourceAsStream("test.json"))); assertEquals("skipped!", reader.nextLiteral()); reader.beginObject(); assertEquals("", reader.nextLiteral()); reader.endObject(); assertEquals("skipped!", reader.nextLiteral()); reader.endObject(); assertEquals("skipped!", reader.nextLiteral()); reader.endObject(); assertEquals("skipped!", reader.nextLiteral()); reader.endObject(); assertEquals("skipped!", reader.nextLiteral()); reader.endObject(); assertEquals("skipped!", reader.nextLiteral()); reader.endObject(); assert
@Test public void readEscapeCharacter() throws IOException { JsonReader reader = new JsonReader(new StringReader("\\\\t")); reader.beginObject(); assertEquals(\'t\', reader.nextString()); assertEquals(\'\\t\', reader.nextString()); assertEquals(\'b\', reader.nextString()); assertEquals(\'b\', reader.nextString()); assertEquals(\'n\', reader.nextString()); assertEquals(\'r\', reader.nextString()); assertEquals(\'f\', reader.nextString()); assertEquals(\'\\n\', reader.nextString()); assertEquals(\'\\r\', reader.nextString()); assertEquals(\'\\f\', reader.nextString()); assertEquals(\'\\n\', reader.nextString()); assertEquals
@Test public void testDecodeLiteral() throws IOException { String value = "true"; JsonReader reader = new JsonReader(new StringReader(value)); assertEquals("true", reader.nextString()); assertEquals("", reader.nextString()); assertEquals(value, reader.nextString()); assertEquals(value, reader.nextString()); assertEquals(value, reader.nextString()); assertEquals(value, reader.nextString()); assertEquals(value, reader.nextString()); assertEquals(value, reader.nextString()); assertEquals(value, reader.nextString()); assertEquals(value, reader.nextString()); assertEquals(value, reader.nextString()); assertEquals(value, reader.nextString
@Test public void testDecodeLiteral() throws IOException { String value = "null"; JsonReader reader = new JsonReader(new StringReader(value)); assertEquals("null", reader.nextString()); assertEquals("", reader.nextString()); assertEquals(value, reader.nextString()); assertEquals(value, reader.nextString()); assertEquals(value, reader.nextString()); assertEquals(value, reader.nextString()); assertEquals(value, reader.nextString()); assertEquals(value, reader.nextString()); assertEquals(value, reader.nextString()); assertEquals(value, reader.nextString()); assertEquals(value, reader.nextString()); assertEquals(value, reader.nextString
@Test public void testDecodeLiteral() throws IOException { String value = "true"; JsonReader reader = new JsonReader(new StringReader(value)); assertEquals(value, reader.nextString()); assertEquals("true", reader.nextString()); assertEquals(value, reader.nextString()); assertEquals(value, reader.nextString()); assertEquals(value, reader.nextString()); assertEquals(value, reader.nextString()); assertEquals(value, reader.nextString()); assertEquals(value, reader.nextString()); assertEquals(value, reader.nextString()); assertEquals(value, reader.nextString()); assertEquals(value, reader.nextString()); assertEquals(value, reader.next
@Test public void testSkipClass() { Assert.assertTrue(test.shouldSkipClass(Object.class)); Assert.assertTrue(test2.shouldSkipClass(Object.class)); Assert.assertTrue(test3.shouldSkipClass(Object.class)); Assert.assertTrue(test4.shouldSkipClass(Object.class)); Assert.assertTrue(test5.shouldSkipClass(Object.class)); Assert.assertTrue(test6.shouldSkipClass(Object.class)); Assert.assertTrue(test7.shouldSkipClass(Object.class)); Assert.assertTrue(test8.shouldSkipClass(Object.class)); Assert.assertTrue(test9.shouldSkipClass(
@Test public void testSkipClass() { Assert.assertTrue(testClass.shouldSkipClass(TestClass.class)); Assert.assertTrue(testClass.shouldSkipClass(TestClass2.class)); Assert.assertTrue(testClass.shouldSkipClass(TestClass3.class)); Assert.assertTrue(testClass.shouldSkipClass(TestClass4.class)); Assert.assertTrue(testClass.shouldSkipClass(TestClass5.class)); Assert.assertTrue(testClass.shouldSkipClass(TestClass6.class)); Assert.assertTrue(testClass.shouldSkipClass(TestClass7.class)); Assert.assertTrue(testClass.shouldSkipClass(TestClass
@Test public void testIsAnonymousOrLocal() throws Exception { Method m = Object.class.getDeclaredMethod("isAnonymousOrLocal", Class.class); m.setAccessible(true); m.invoke(null, Object.class); m.invoke(null, Object.class); m.invoke(null, Object.class); m.invoke(null, Object.class); m.invoke(null, Object.class); m.invoke(null, Object.class); m.invoke(null, Object.class); m.invoke(null, Object.class); m.invoke(null, Object.class); m.invoke(null, Object.class); m.invoke(null, Object.
@Test public void testIsAnonymousOrLocal() { boolean result = instance.isAnonymousOrLocal(Enum.class); Assert.assertFalse(result); result = instance.isAnonymousOrLocal(List.class); Assert.assertTrue(result); result = instance.isAnonymousOrLocal(List.class); Assert.assertFalse(result); result = instance.isAnonymousOrLocal(List.class); Assert.assertTrue(result); result = instance.isAnonymousOrLocal(List.class); Assert.assertFalse(result); result = instance.isAnonymousOrLocal(List.class); Assert.assertTrue(result); result = instance.isAnonymousOrLocal(List.class); Assert.assert
@Test public void testVisitArrayField() throws Exception { Mockito.when(json.isJsonObject()).thenReturn(true); Mockito.when(json.getAsJsonObject()).thenReturn(jsonObject); Mockito.when(jsonObject.get("myField1")).thenReturn(jsonObject); Mockito.when(jsonObject.get("myField2")).thenReturn(jsonObject); Mockito.when(jsonObject.get("myField3")).thenReturn(jsonObject); Mockito.when(jsonObject.get("myField4")).thenReturn(jsonObject); Mockito.when(jsonObject.get("myField5")).thenReturn(
@Test public void testVisitArrayField() throws Exception { Mockito.when(json.isJsonObject()).thenReturn(true); Mockito.when(json.getAsJsonObject()).thenReturn(jsonObject); Mockito.when(jsonObject.get("myField1")).thenReturn(jsonObject); Mockito.when(jsonObject.get("myField2")).thenReturn(jsonObject); Mockito.when(jsonObject.get("myField3")).thenReturn(jsonObject); Mockito.when(jsonObject.get("myField4")).thenReturn(jsonObject); Mockito.when(jsonObject.get("myField5")).thenReturn(
@Test public void testVisitArrayField() throws Exception { Mockito.when(json.isJsonObject()).thenReturn(true); Mockito.when(json.getAsJsonObject()).thenReturn(jsonObject); Mockito.when(jsonObject.get("array")).thenReturn(jsonArray); Mockito.when(jsonObject.get("array2")).thenReturn(jsonArray2); Mockito.when(jsonObject.get("array3")).thenReturn(jsonArray3); Mockito.when(jsonObject.get("array4")).thenReturn(jsonArray4); Mockito.when(jsonObject.get("array5")).thenReturn(jsonArray5
@Test public void testVisitArrayField() throws Exception { JsonObject j = new JsonObject(); j.addProperty("field1", "value1"); j.addProperty("field2", "value2"); j.addProperty("field3", "value3"); j.addProperty("field4", "value4"); j.addProperty("field5", "value5"); j.addProperty("field6", "value6"); j.addProperty("field7", "value7"); j.addProperty("field8", "value8"); j.addProperty("field9", "value9"); j.addProperty("field10", "value10"); j.addProperty("field11", "value
@Test public void testNestedArrayField() throws Exception { String expected = "[\\n" + " {\\n" + " \\"a\\": [\\n" + " {\\n" + " \\"b\\": [\\n" + " \\"c\\",\\n" + " \\"d\\",\\n" + " \\"e\\",\\n" + " \\"f\\",\\n" + " \\"g\\",\\n" + " \\"h\\",\\n" + " \\"i\\",\\n" + " \\"j\\",\\n" + " \\"k\\",\\n" + " \\"l
@Test public void testArrayField() throws Exception { String expected = "[\\n" + " {\\n" + " \\"a\\": [\\n" + " {\\n" + " \\"b\\": [\\n" + " \\"c\\",\\n" + " \\"d\\",\\n" + " \\"e\\",\\n" + " \\"f\\",\\n" + " \\"g\\",\\n" + " \\"h\\",\\n" + " \\"i\\",\\n" + " \\"j\\",\\n" + " \\"k\\",\\n" + " \\"l\\
@Test public void testVisitArrayField() throws Exception { Mockito.when(json.isJsonObject()).thenReturn(true); Mockito.when(json.getAsJsonObject()).thenReturn(jsonObject); Mockito.when(jsonObject.get("myField1")).thenReturn(jsonObject); Mockito.when(jsonObject.get("myField2")).thenReturn(jsonObject); Mockito.when(jsonObject.get("myField3")).thenReturn(jsonObject); Mockito.when(jsonObject.get("myField4")).thenReturn(jsonObject); Mockito.when(jsonObject.get("myField5")).thenReturn(
@Test public void testVisitArrayField() throws Exception { String expected = "[\\n" + " {\\n" + " \\"type\\": \\"string\\"\\n" + " },\\n" + " {\\n" + " \\"type\\": \\"string\\"\\n" + " },\\n" + " {\\n" + " \\"type\\": \\"string\\"\\n" + " },\\n" + " {\\n" + " \\"type\\": \\"string\\"\\n" + " },\\n" + " {\\n" + " \\"type\\": \\"string\\"\\n" + " },\\n
@Test public void testNestedArrayField() throws Exception { String expected = "[\\n" + " {\\n" + " \\"a\\": [\\n" + " \\"b\\",\\n" + " \\"c\\",\\n" + " \\"d\\",\\n" + " \\"e\\",\\n" + " \\"f\\",\\n" + " \\"g\\",\\n" + " \\"h\\",\\n" + " \\"i\\",\\n" + " \\"j\\",\\n" + " \\"k\\",\\n" + " \\"l\\",\\n" + "
@Test public void testGetFieldValueUsingCustomHandler() throws Exception { String jsonStr = "{\\n" + " \\"object\\" : {\\n" + " \\"field1\\" : {\\n" + " \\"type\\" : \\"string\\"\\n" + " },\\n" + " \\"field2\\" : {\\n" + " \\"type\\" : \\"int\\"\\n" + " },\\n" + " \\"field3\\" : {\\n" + " \\"type\\" : \\"string\\"\\n" + " },\\n" + " \\"field4\\" : {\\n" + " \\"type\\" :
@Test public void testObjectNavigatorFactory() { ObjectNavigatorFactory inspectorFactory = new ObjectNavigatorFactory(null, FieldNamingStrategy2.DEFAULT); inspectorFactory.create(ObjectTypePair.of("FOO", "BAR")); inspectorFactory.create(ObjectTypePair.of("FOO", "BAR")); inspectorFactory.create(ObjectTypePair.of("FOO", "BAR")); inspectorFactory.create(ObjectTypePair.of("FOO", "BAR")); inspectorFactory.create(ObjectTypePair.of("FOO", "BAR")); inspectorFactory.create(ObjectTypePair.of("FOO", "BAR")); inspectorFactory.create(ObjectTypePair.of("FOO", "BAR")
@Test public void testObjectNavigatorFactory() { ObjectNavigatorFactory inspector = new ObjectNavigatorFactory(null, FieldNamingStrategy2.DEFAULT); assertNull(inspector.create(ObjectTypePair.of("x", "y"))); inspector.create(ObjectTypePair.of("x", "y")); assertNotNull(inspector.create(ObjectTypePair.of("x", "y"))); assertNull(inspector.create(ObjectTypePair.of("x", "y"))); inspector.create(ObjectTypePair.of("y", "z")); assertNotNull(inspector.create(ObjectTypePair.of("x", "y"))); assertNull(inspector.create(ObjectTypePair.
@Test public void testObjectNavigatorFactory() { ObjectNavigatorFactory factory = new ObjectNavigatorFactory(null, null); ObjectNavigator objectNavigator = factory.create(ObjectTypePair.of("x", "y")); assertNotNull(objectNavigator); assertSame(objectNavigator, factory.create(ObjectTypePair.of("x", "y"))); objectNavigator = factory.create(ObjectTypePair.of("x", "y")); assertNotNull(objectNavigator); assertSame(objectNavigator, factory.create(ObjectTypePair.of("x", "y"))); objectNavigator = factory.create(ObjectTypePair.of("x", "y")); assertNotNull(objectNavigator); assertSame(objectNavigator, factory.create
@Test public void testObjectNavigatorFactory() { ObjectNavigatorFactory inspectorFactory = new ObjectNavigatorFactory(null, null); assertEquals(null, inspectorFactory.getFieldNamingPolicy()); assertEquals(null, inspectorFactory.getStrategy()); assertEquals(null, inspectorFactory.create(ObjectTypePair.of("x", "y"))); assertEquals(null, inspectorFactory.create(ObjectTypePair.of("x", "y"))); assertEquals(null, inspectorFactory.create(ObjectTypePair.of("x", "y"))); assertEquals(null, inspectorFactory.create(ObjectTypePair.of("x", "y"))); assertEquals(null, inspectorFactory.create(ObjectType
@Test public void testCreate() { ObjectNavigator objectNavigator = new ObjectNavigatorFactory(null, null).create(null); assertNotNull(objectNavigator); }
@Test public void testCreate() { ObjectNavigator objectNavigator = new ObjectNavigatorFactory(null, null).create(objTypePair); assertNotNull(objectNavigator); }
@Test(expected = JsonParseException.class) public void testDateDeserialization() throws Exception { Calendar calendar = Calendar.getInstance(); calendar.set(Calendar.HOUR_OF_DAY, 0); calendar.set(Calendar.MINUTE, 0); calendar.set(Calendar.SECOND, 0); calendar.set(Calendar.MILLISECOND, 0); Date date = new Date(calendar.getTimeInMillis()); Calendar calendar2 = Calendar.getInstance(); calendar2.setTimeInMillis(calendar.getTimeInMillis()); calendar2.set(Calendar.HOUR_OF_DAY, 0); calendar2.set(Calendar.MINUTE, 0); calendar2.set(Calendar.SECOND, 0); calendar2.set
@Test(expected = JsonParseException.class) public void testDateParsing() throws Exception { Calendar calendar = Calendar.getInstance(); calendar.set(Calendar.HOUR_OF_DAY, 0); calendar.set(Calendar.MINUTE, 0); calendar.set(Calendar.SECOND, 0); calendar.set(Calendar.MILLISECOND, 0); Date date = new Date(calendar.getTimeInMillis()); Calendar calendar2 = Calendar.getInstance(); calendar2.setTimeInMillis(calendar.getTimeInMillis()); calendar2.set(Calendar.HOUR_OF_DAY, 0); calendar2.set(Calendar.MINUTE, 0); calendar2.set(Calendar.SECOND, 0); calendar2.set(
@Test(expected = JsonParseException.class) public void testDateDeserialization() throws Exception { Calendar calendar = Calendar.getInstance(); calendar.set(Calendar.HOUR_OF_DAY, 0); calendar.set(Calendar.MINUTE, 0); calendar.set(Calendar.SECOND, 0); calendar.set(Calendar.MILLISECOND, 0); Date date = new Date(calendar.getTimeInMillis()); Calendar calendar2 = Calendar.getInstance(); calendar2.setTimeInMillis(calendar.getTimeInMillis()); calendar2.set(Calendar.HOUR_OF_DAY, 0); calendar2.set(Calendar.MINUTE, 0); calendar2.set(Calendar.SECOND, 0); calendar2.set
@Test(expected = JsonParseException.class) public void testDateParsing() throws Exception { Calendar calendar = Calendar.getInstance(); calendar.set(Calendar.HOUR_OF_DAY, 0); calendar.set(Calendar.MINUTE, 0); calendar.set(Calendar.SECOND, 0); calendar.set(Calendar.MILLISECOND, 0); Date date = new Date(calendar.getTimeInMillis()); Calendar calendar2 = Calendar.getInstance(); calendar2.setTimeInMillis(calendar.getTimeInMillis()); calendar2.set(Calendar.HOUR_OF_DAY, 0); calendar2.set(Calendar.MINUTE, 0); calendar2.set(Calendar.SECOND, 0); calendar2.set(
@Test(expected = JsonParseException.class) public void testDateParsing() { Calendar calendar = Calendar.getInstance(); calendar.set(Calendar.HOUR_OF_DAY, 0); calendar.set(Calendar.MINUTE, 0); calendar.set(Calendar.SECOND, 0); calendar.set(Calendar.MILLISECOND, 0); Calendar calendar2 = Calendar.getInstance(); calendar2.set(Calendar.HOUR_OF_DAY, 0); calendar2.set(Calendar.MINUTE, 0); calendar2.set(Calendar.SECOND, 0); Calendar calendar3 = Calendar.getInstance(); calendar3.set(Calendar.HOUR_OF_DAY, 0); calendar3.set(Calendar.MINUTE
@Test public void testDateDeserialization() throws Exception { Calendar calendar = Calendar.getInstance(); calendar.set(Calendar.HOUR_OF_DAY, 0); calendar.set(Calendar.MINUTE, 0); calendar.set(Calendar.SECOND, 0); calendar.set(Calendar.MILLISECOND, 0); java.sql.Date date = new java.sql.Date(calendar.getTimeInMillis()); assertEquals(date.getTime(), adapter.deserialize(date, java.sql.Date.class, context).getTime()); assertEquals(date.getTime(), adapter.deserialize(date, java.sql.Date.class, context).getTime()); }
@Test public void testDateTypeAdapter() { Calendar calendar = Calendar.getInstance(); calendar.set(Calendar.HOUR_OF_DAY, 0); calendar.set(Calendar.MINUTE, 0); calendar.set(Calendar.SECOND, 0); calendar.set(Calendar.MILLISECOND, 0); java.sql.Date date = new java.sql.Date(calendar.getTimeInMillis()); assertEquals(date, adapter.deserialize(date, Date.class, context)); }
@Test public void testDateSerialization() { Calendar calendar = Calendar.getInstance(); calendar.set(Calendar.HOUR_OF_DAY, 0); calendar.set(Calendar.MINUTE, 0); calendar.set(Calendar.SECOND, 0); calendar.set(Calendar.MILLISECOND, 0); java.sql.Date date = new java.sql.Date(calendar.getTime()); assertEquals(date, new Timestamp(date.getTime()).deserialize(date, java.sql.Date.class)); }
@Test public void testDateSerialization() { Calendar c = Calendar.getInstance(); c.set(Calendar.YEAR, 2014); c.set(Calendar.MONTH, 11); c.set(Calendar.DAY_OF_MONTH, 11); c.set(Calendar.HOUR_OF_DAY, 11); c.set(Calendar.MINUTE, 11); c.set(Calendar.SECOND, 11); c.set(Calendar.MILLISECOND, 11); Calendar d = Calendar.getInstance(); d.setTimeInMillis(c.getTimeInMillis()); d.set(Calendar.YEAR, 2014); d.set(Calendar.MONTH, 11); d.set(Calendar.DAY_OF_MONTH,
@Test public void testDateSerialization() { Calendar cal = Calendar.getInstance(); cal.set(Calendar.YEAR, 2010); cal.set(Calendar.MONTH, Calendar.JULY); cal.set(Calendar.DAY_OF_MONTH, 12); cal.set(Calendar.HOUR_OF_DAY, 23); cal.set(Calendar.MINUTE, 59); cal.set(Calendar.SECOND, 59); Calendar cal2 = Calendar.getInstance(); cal2.set(Calendar.YEAR, 2010); cal2.set(Calendar.MONTH, Calendar.JULY); cal2.set(Calendar.DAY_OF_MONTH, 23); cal2.set(Calendar.HOUR_
@Test public void testDateSerialization() { Calendar c = Calendar.getInstance(); c.set(Calendar.YEAR, 2014); c.set(Calendar.MONTH, Calendar.JULY); c.set(Calendar.DAY_OF_MONTH, 12); c.set(Calendar.HOUR_OF_DAY, 23); c.set(Calendar.MINUTE, 59); c.set(Calendar.SECOND, 59); java.sql.Date d = new java.sql.Date(c.getTimeInMillis()); d.setTime(d); JsonElement json = adapter.serialize(d, java.sql.Date.class, null); System.out.println(json.toString()); }
@Test public void testDateSerialization() { Calendar c = Calendar.getInstance(); c.set(Calendar.YEAR, 2014); c.set(Calendar.MONTH, Calendar.JULY); c.set(Calendar.DAY_OF_MONTH, 12); c.set(Calendar.HOUR_OF_DAY, 23); c.set(Calendar.MINUTE, 59); c.set(Calendar.SECOND, 59); java.sql.Date d = new java.sql.Date(c.getTimeInMillis()); d.setTime(d); JsonElement json = adapter.serialize(d, java.sql.Date.class, null); System.out.println(json.toString()); }
@Test public void testDateSerialization() { Calendar c = Calendar.getInstance(); c.set(Calendar.YEAR, 2014); c.set(Calendar.MONTH, Calendar.JULY); c.set(Calendar.DAY_OF_MONTH, 12); c.set(Calendar.HOUR_OF_DAY, 23); c.set(Calendar.MINUTE, 59); c.set(Calendar.SECOND, 59); java.sql.Date date = new java.sql.Date(c.getTimeInMillis()); JsonElement json = dateAdapter.serialize(date, java.sql.Date.class, null); System.out.println(json.toString()); }
@Test public void testDateSerialization() { Calendar calendar = Calendar.getInstance(); calendar.set(Calendar.HOUR_OF_DAY, 1); calendar.set(Calendar.DAY_OF_MONTH, 1); calendar.set(Calendar.HOUR_OF_DAY, 1); calendar.set(Calendar.MINUTE, 1); calendar.set(Calendar.SECOND, 1); Calendar calendar2 = Calendar.getInstance(); calendar2.set(Calendar.HOUR_OF_DAY, 1); calendar2.set(Calendar.DAY_OF_MONTH, 1); calendar2.set(Calendar.HOUR_OF_DAY, 1); calendar2.set(Calendar.MINUTE, 1); calendar2.set
@Test public void testDateSerialization() { Calendar c = Calendar.getInstance(); c.set(Calendar.YEAR, 2014); c.set(Calendar.MONTH, 11); c.set(Calendar.DAY_OF_MONTH, 11); c.set(Calendar.HOUR_OF_DAY, 11); c.set(Calendar.MINUTE, 11); c.set(Calendar.SECOND, 11); java.sql.Date date = new java.sql.Date(c.getTimeInMillis()); JsonElement json = adapter.serialize(date, java.sql.Date.class, null); System.out.println(json.toString()); }
@Test public void testDateSerialization() { Calendar cal = Calendar.getInstance(); cal.set(Calendar.HOUR_OF_DAY, 0); cal.set(Calendar.MINUTE, 0); cal.set(Calendar.SECOND, 0); Calendar cal2 = Calendar.getInstance(); cal2.set(Calendar.HOUR_OF_DAY, 0); cal2.set(Calendar.MINUTE, 0); cal2.set(Calendar.SECOND, 0); Calendar cal3 = Calendar.getInstance(); cal3.set(Calendar.HOUR_OF_DAY, 0); cal3.set(Calendar.MINUTE, 0); cal3.set(Calendar.SECOND, 0); Calendar cal4 = Calendar
@Test public void testDateSerialization() { Calendar cal = Calendar.getInstance(); cal.set(Calendar.YEAR, 2010); cal.set(Calendar.MONTH, Calendar.JULY); cal.set(Calendar.DAY_OF_MONTH, 12); cal.set(Calendar.HOUR_OF_DAY, 23); cal.set(Calendar.MINUTE, 59); cal.set(Calendar.SECOND, 59); Calendar cal2 = Calendar.getInstance(); cal2.set(Calendar.YEAR, 2010); cal2.set(Calendar.MONTH, Calendar.JULY); cal2.set(Calendar.DAY_OF_MONTH, 23); cal2.set(Calendar.HOUR_
@Test public void testDateSerialization() { Calendar calendar = Calendar.getInstance(); calendar.set(Calendar.HOUR_OF_DAY, 0); calendar.set(Calendar.MINUTE, 0); calendar.set(Calendar.SECOND, 0); calendar.set(Calendar.MILLISECOND, 0); java.sql.Date date = new java.sql.Date(calendar.getTimeInMillis()); JsonElement json = dateTypeAdapter.serialize(date, java.sql.Date.class, null); Assert.assertEquals(date, json.getAsJsonObject().get("date")); }
@Test public void testDateSerialization() { Calendar cal = Calendar.getInstance(); cal.set(Calendar.HOUR_OF_DAY, 0); cal.set(Calendar.MINUTE, 0); cal.set(Calendar.SECOND, 0); Calendar cal2 = Calendar.getInstance(); cal2.set(Calendar.HOUR_OF_DAY, 0); cal2.set(Calendar.MINUTE, 0); cal2.set(Calendar.SECOND, 0); Calendar cal3 = Calendar.getInstance(); cal3.set(Calendar.HOUR_OF_DAY, 0); cal3.set(Calendar.MINUTE, 0); cal3.set(Calendar.SECOND, 0); cal3.set(
@Test public void testDateDeserialization() throws Exception { Calendar calendar = Calendar.getInstance(); calendar.set(Calendar.HOUR_OF_DAY, 0); calendar.set(Calendar.MINUTE, 0); calendar.set(Calendar.SECOND, 0); calendar.set(Calendar.MILLISECOND, 0); java.sql.Date date = new java.sql.Date(calendar.getTimeInMillis()); assertEquals(date, new DefaultDateTypeAdapter().deserialize(date, java.sql.Date.class, null)); assertEquals(date, new DefaultDateTypeAdapter().deserialize(date, java.sql.Date.class, null)); assertEquals(date, new DefaultDateTypeAdapter().deserialize(
@Test public void testDateDeserialization() { Calendar c = Calendar.getInstance(); c.set(Calendar.HOUR_OF_DAY, 0); c.set(Calendar.MINUTE, 0); c.set(Calendar.SECOND, 0); c.set(Calendar.MILLISECOND, 0); java.sql.Date date = new java.sql.Date(c.getTimeInMillis()); Assert.assertEquals(date, new Date(date.getTimeInMillis()).getTime()); Assert.assertEquals(date, new Date(date.getTimeInMillis()).getTime()); Assert.assertEquals(date, new Date(date.getTimeInMillis()).getTime()); Assert.assertEquals(
@Test public void testDateDeserialization() throws Exception { Calendar calendar = Calendar.getInstance(); calendar.set(Calendar.HOUR_OF_DAY, 0); calendar.set(Calendar.MINUTE, 0); calendar.set(Calendar.SECOND, 0); calendar.set(Calendar.MILLISECOND, 0); java.sql.Date date = new java.sql.Date(); date.setTimeInMillis(calendar.getTimeInMillis()); date.add(Calendar.HOUR_OF_DAY, 1); date.add(Calendar.MINUTE, 1); java.sql.Date date2 = new java.sql.Date(); date2.setTimeInMillis(calendar.getTimeInMillis()); date2.add(
@Test(expected = JsonParseException.class) public void testDateDeserialization() throws Exception { Calendar calendar = Calendar.getInstance(); calendar.set(Calendar.HOUR_OF_DAY, 0); calendar.set(Calendar.MINUTE, 0); calendar.set(Calendar.SECOND, 0); calendar.setTimeZone(TimeZone.getTimeZone("GMT")); Date date = calendar.getTime(); Date deserializedDate = dateAdapter.deserialize(date, Date.class, null); Assert.assertEquals(date, deserializedDate); Assert.assertEquals(calendar.get(Calendar.HOUR_OF_DAY), date); Assert.assertEquals(calendar.get(Calendar.MINUTE), date.get(Calendar.
@Test(expected = JsonParseException.class) public void testMalformedUrl() { Calendar c = Calendar.getInstance(); c.set(Calendar.HOUR_OF_DAY, 0); c.set(Calendar.MINUTE, 0); c.set(Calendar.SECOND, 0); c.set(Calendar.MILLISECOND, 0); java.sql.Date d = new java.sql.Date(c.getTimeInMillis()); d.setTimeInMillis(d.getTimeInMillis()); d.add(Calendar.HOUR_OF_DAY, 0); d.add(Calendar.MINUTE, 0); d.add(Calendar.SECOND, 0); d.add(Calendar.MILLISECOND, 0); d
@Test public void testDateSerialization() { Calendar calendar = Calendar.getInstance(); calendar.set(Calendar.HOUR_OF_DAY, 0); calendar.set(Calendar.MINUTE, 0); calendar.set(Calendar.SECOND, 0); calendar.set(Calendar.MILLISECOND, 0); java.sql.Date date = java.sql.Date.valueOf(calendar.getTimeInMillis()); java.sql.Date date2 = java.sql.Date.valueOf(date.getTimeInMillis()); java.sql.Date date3 = java.sql.Date.valueOf(date2.getTimeInMillis()); java.sql.Date date4 = java.sql.Date.valueOf(
@Test public void testDateSerialization() { Calendar cal = Calendar.getInstance(); cal.set(Calendar.HOUR_OF_DAY, 0); cal.set(Calendar.MINUTE, 0); cal.set(Calendar.SECOND, 0); Calendar cal2 = Calendar.getInstance(); cal2.set(Calendar.HOUR_OF_DAY, 0); cal2.set(Calendar.MINUTE, 0); cal2.set(Calendar.SECOND, 0); Calendar cal3 = Calendar.getInstance(); cal3.set(Calendar.HOUR_OF_DAY, 0); cal3.set(Calendar.MINUTE, 0); cal3.set(Calendar.SECOND, 0); cal3.set(
@Test(expected = JsonParseException.class) public void testInvalidLocale() throws JsonParseException { String str = "en_US"; JsonParser parser = new JsonParser(); JsonElement json = parser.parse(str); Type type = null; JsonDeserializationContext context = null; new DefaultTimeSerializer().deserialize(json, type, context); }
@Test(dataProvider = "localeProvider") public void testLocale(String locale, String expectedLocale) throws JsonParseException { String json = "{\\"language\\": \\"" + locale + "\\"," + "\\"country\\": \\"" + expectedLocale + "\\"," + "\\"variant\\": \\"" + expectedVariant + "\\"}"; Locale de = adapter.deserialize(new JsonParser().parse(json), null, null); Assert.assertEquals(expectedLocale, de); de = adapter.deserialize(new JsonParser().parse(json), null, null); Assert.assertEquals(expectedLocale, de); de = adapter.deserialize(new JsonParser().parse(json), null, null); Assert.assertEquals(
@Test(expected = JsonParseException.class) public void testDateDeserialization() throws JsonParseException { JsonParser parser = new JsonParser(); JsonElement json = parser.parse(new File("src/test/resources/testDateDeserialization.json")); Calendar calendar = Calendar.getInstance(); calendar.setTime(new Date(calendar.getTimeInMillis())); calendar.setTimeZone(TimeZone.getTimeZone("GMT")); calendar.set(Calendar.MILLISECOND, 0); Date deserialized = calendar.deserialize(json, null, null); Assert.assertNotNull(deserialized); Assert.assertEquals(calendar.getTime(), deserialized); Assert.assertEquals(calendar.getTimeZone(), deserialized.getTimeZone
@Test(expected = JsonParseException.class) public void testDateDeserialization() throws JsonParseException { Calendar calendar = Calendar.getInstance(); calendar.setTimeZone(TimeZone.getTimeZone("GMT")); calendar.set(Calendar.HOUR_OF_DAY, 0); calendar.set(Calendar.MINUTE, 0); calendar.set(Calendar.SECOND, 0); calendar.set(Calendar.MILLISECOND, 0); Date date = calendar.getTime(); String localeStr = "en_US"; String langStr = "en"; String countryStr = "us"; String variantStr = "us"; String langStr = "en_US"; String countryStr = "us"; String variantStr = "us";
@Test(expected = JsonParseException.class) public void testDateDeserialization() throws JsonParseException { final Calendar calendar = Calendar.getInstance(); calendar.setTimeZone(TimeZone.getTimeZone("GMT")); calendar.set(Calendar.HOUR_OF_DAY, 0); calendar.set(Calendar.MINUTE, 0); calendar.set(Calendar.SECOND, 0); calendar.set(Calendar.MILLISECOND, 0); calendar.setTimeZone(TimeZone.getTimeZone("GMT")); calendar.set(Calendar.MILLISECOND, 0); Date date = calendar.getTime(); String locale = "en_US"; String country = "us"; String variant = "us"; String localeStr = "en_US
@Test(expected = JsonParseException.class) public void testDateParsing() throws JsonParseException { Calendar calendar = Calendar.getInstance(); calendar.setTimeZone(TimeZone.getTimeZone("GMT")); calendar.set(Calendar.HOUR_OF_DAY, 0); calendar.set(Calendar.MINUTE, 0); calendar.set(Calendar.SECOND, 0); calendar.set(Calendar.MILLISECOND, 0); Date date = calendar.getTime(); String locale = "en_US"; String country = "us"; String variant = "en_US"; String json = "{\\"date\\":\\"" + date + "\\",\\"country\\":\\"" + country + "\\",\\"variant\\":\\""
@Test(expected = JsonParseException.class) public void testDateDeserialization() throws JsonParseException { JsonParser parser = new JsonParser(); JsonElement json = parser.parse(new File("src/test/resources/testDateDeserialization.json")); Calendar calendar = Calendar.getInstance(); calendar.setTime(new Date(calendar.getTimeInMillis())); calendar.setTimeZone(TimeZone.getTimeZone("GMT")); calendar.add(Calendar.DAY_OF_MONTH, 1); calendar.add(Calendar.HOUR_OF_DAY, 1); calendar.add(Calendar.MINUTE, 1); calendar.add(Calendar.SECOND, 1); calendar.add(Calendar.MILLISECOND, 1);
@Test(expected = JsonParseException.class) public void testDateDeserialization() throws JsonParseException { Calendar calendar = Calendar.getInstance(); calendar.setTimeZone(TimeZone.getTimeZone("GMT")); String dateStr = calendar.getTime().toString(); String dateStr2 = calendar.getTime().toString(); String dateStr3 = calendar.getTime().toString(); String dateStr4 = calendar.getTime().toString(); String dateStr5 = calendar.getTime().toString(); String dateStr6 = calendar.getTime().toString(); String dateStr7 = calendar.getTime().toString(); String dateStr8 = calendar.getTime().toString(); String dateStr9 = calendar.getTime().toString
@Test(expected = JsonParseException.class) public void testDateDeserialization() throws JsonParseException { JsonParser parser = new JsonParser(); JsonElement json = parser.parse(new File("src/test/resources/testDateDeserialization.json")); Calendar calendar = Calendar.getInstance(); calendar.setTime(new Date(calendar.getTimeInMillis())); calendar.setTimeZone(TimeZone.getTimeZone("GMT")); calendar.add(Calendar.DAY_OF_MONTH, 1); calendar.add(Calendar.HOUR_OF_DAY, 1); calendar.add(Calendar.MINUTE, 1); calendar.add(Calendar.SECOND, 1); calendar.add(Calendar.MILLISECOND, 1);
@Test(expected = JsonParseException.class) public void testDateDeserialization() throws JsonParseException { JsonParser parser = new JsonParser(); JsonElement json = parser.parse(new File("src/test/resources/testDateDeserialization.json")); Calendar calendar = Calendar.getInstance(); calendar.setTime(new Date(calendar.getTimeInMillis())); calendar.setTimeZone(TimeZone.getTimeZone("GMT")); calendar.add(Calendar.DAY_OF_MONTH, 1); calendar.add(Calendar.HOUR_OF_DAY, 1); calendar.add(Calendar.MINUTE, 1); calendar.add(Calendar.SECOND, 1); calendar.add(Calendar.MILLISECOND, 1);
@Test(expected = JsonParseException.class) public void testDateDeserialization() throws JsonParseException { String str = "{ \\"date\\" : \\"2000-01-01T00:00:00.000Z\\", \\"country\\" : \\"€\\", \\"variant\\" : \\"€\\", \\"language\\" : \\"€\\", \\"country\\" : \\"€\\", \\"variant\\" : \\"€\\", \\"variant\\" : \\"€\\", \\"language\\" : \\"€\\", \\"country\\" : \\"€\\", \\"variant\\"
@Test(expected = JsonParseException.class) public void testDateDeserialization() throws JsonParseException { Calendar calendar = Calendar.getInstance(); calendar.setTimeZone(TimeZone.getTimeZone("GMT")); String strDate = calendar.getTime().toString(); String strDate2 = calendar.getTime().toString(); String strDate3 = calendar.getTime().toString(); Calendar calendar2 = Calendar.getInstance(); calendar2.setTimeZone(TimeZone.getTimeZone("GMT")); calendar2.set(Calendar.HOUR_OF_DAY, 0); calendar2.set(Calendar.MINUTE, 0); calendar2.set(Calendar.SECOND, 0); calendar2.set(Calendar.MILLISECOND, 0
@Test(expected = JsonParseException.class) public void testDateDeserialization() throws JsonParseException { Calendar calendar = Calendar.getInstance(); calendar.setTimeZone(TimeZone.getTimeZone("GMT")); String strDate = String.valueOf(calendar.getTimeInMillis()); String strDate2 = String.valueOf(calendar.getTimeInMillis()); String strDate3 = String.valueOf(calendar.getTimeInMillis()); String strDate4 = String.valueOf(calendar.getTimeInMillis()); String strDate5 = String.valueOf(calendar.getTimeInMillis()); String strDate6 = String.valueOf(calendar.getTimeInMillis()); String strDate7 = String.valueOf(calendar
@Test(expected = JsonParseException.class) public void testDeserialize() throws JsonParseException { String jsonStr = "{\\"language\\":\\"en\\",\\"country\\":\\"us\\",\\"variant\\":\\"en_US\\"}"; String localeStr = "{\\"language\\":\\"en\\",\\"country\\":\\"us\\",\\"variant\\":\\"en_US\\"}"; String localeStr2 = "{\\"language\\":\\"en\\",\\"country\\":\\"us\\",\\"variant\\":\\"en_US\\"}"; String jsonStr3 = "{\\"language\\":\\"en\\",\\"country\\":\\"us\\",\\"variant\\":\\"en_US\\"}"
@Test public void testDate() { Calendar cal = Calendar.getInstance(); cal.set(2010, 0, 1, 0, 0, 0); cal.set(Calendar.MILLISECOND, 0); Calendar cal2 = Calendar.getInstance(); cal2.set(2010, 0, 1, 0, 0); cal2.set(Calendar.MILLISECOND, 0); Calendar cal3 = Calendar.getInstance(); cal3.set(2010, 0, 1, 0, 0); cal3.set(Calendar.MILLISECOND, 0); Calendar cal4 = Calendar.getInstance(); cal4.set(2010, 0, 1, 0, 0); cal4.set(
@Test public void testDateSerialization() { Calendar cal = Calendar.getInstance(); cal.set(2010, 0, 1, 0, 0); cal.set(Calendar.MILLISECOND, 0); Calendar cal2 = Calendar.getInstance(); cal2.set(2010, 0, 1, 0, 0); cal2.set(Calendar.MILLISECOND, 0); Calendar cal3 = Calendar.getInstance(); cal3.set(2010, 0, 1, 0, 0); cal3.set(Calendar.MILLISECOND, 0); Calendar cal4 = Calendar.getInstance(); cal4.set(2010, 0, 1, 0, 0); cal4.set(Calendar
@Test(expected = JsonParseException.class) public void testDateDeserialization() throws Exception { String line = "{\\n" + " \\"year\\": \\"2000\\",\\n" + " \\"month\\": \\"01\\",\\n" + " \\"day\\": \\"01\\",\\n" + " \\"hour\\": \\"01\\",\\n" + " \\"minute\\": \\"01\\",\\n" + " \\"second\\": \\"01\\",\\n" + " \\"third\\": \\"01\\",\\n" + " \\"fourth\\": \\"01\\",\\
@Test public void testDateTypeAdapter() { Calendar calendar = Calendar.getInstance(); calendar.setTimeZone(TimeZone.getTimeZone("UTC")); calendar.set(Calendar.HOUR_OF_DAY, 0); calendar.set(Calendar.MINUTE, 0); calendar.set(Calendar.SECOND, 0); calendar.set(Calendar.MILLISECOND, 0); Calendar calendar2 = Calendar.getInstance(); calendar2.setTimeZone(TimeZone.getTimeZone("UTC")); calendar2.set(Calendar.HOUR_OF_DAY, 0); calendar2.set(Calendar.MINUTE, 0); calendar2.set(Calendar.SECOND, 0); calendar2.set(Calendar.MILLISECOND, 0);
@Test(expected = JsonParseException.class) public void testNullCollection() throws Exception { String json = "{\\n" + " \\"data\\": [\\n" + " {\\n" + " \\"type\\": \\"array\\",\\n" + " \\"items\\": [\\n" + " {\\n" + " \\"type\\": \\"string\\"\\n" + " },\\n" + " {\\n" + " \\"type\\": \\"string\\"\\n" + " },\\n" + " {\\n" + " \\"type\\": \\"array\\",\\n" + " \\"items\\
@Test public void testDateTypeAdapter() { Calendar calendar = Calendar.getInstance(); calendar.setTimeZone(TimeZone.getTimeZone("UTC")); calendar.set(Calendar.HOUR_OF_DAY, 0); calendar.set(Calendar.MINUTE, 0); calendar.set(Calendar.SECOND, 0); calendar.set(Calendar.MILLISECOND, 0); Calendar calendar2 = Calendar.getInstance(); calendar2.setTimeZone(TimeZone.getTimeZone("UTC")); calendar2.set(Calendar.HOUR_OF_DAY, 0); calendar2.set(Calendar.MINUTE, 0); calendar2.set(Calendar.SECOND, 0); calendar2.set(Calendar.MILLISECOND, 0);
@Test(expected = JsonParseException.class) public void testNullCollection() { String json = "{\\n" + " \\"children\\": [\\n" + " {\\n" + " \\"type\\": \\"collection\\",\\n" + " \\"value\\": null\\n" + " },\\n" + " {\\n" + " \\"type\\": \\"collection\\",\\n" + " \\"value\\": 1\\n" + " },\\n" + " {\\n" + " \\"type\\": \\"collection\\",\\n" + " \\"value\\": 2\\n" + " },\\n
@Test public void testDateTypeAdapter() { Calendar calendar = Calendar.getInstance(); calendar.setTimeZone(TimeZone.getTimeZone("UTC")); calendar.set(Calendar.HOUR_OF_DAY, 0); calendar.set(Calendar.MINUTE, 0); calendar.set(Calendar.SECOND, 0); calendar.set(Calendar.MILLISECOND, 0); Calendar calendar2 = Calendar.getInstance(); calendar2.setTimeZone(TimeZone.getTimeZone("UTC")); calendar2.set(Calendar.HOUR_OF_DAY, 0); calendar2.set(Calendar.MINUTE, 0); calendar2.set(Calendar.SECOND, 0); calendar2.set(Calendar.MILLISECOND, 0);
@Test(expected = JsonParseException.class) public void testNull() throws JsonParseException { String line = "{\\n" + " \\"year\\": \\"2000\\",\\n" + " \\"month\\": \\"01\\",\\n" + " \\"day\\": \\"01\\",\\n" + " \\"hour\\": \\"01\\",\\n" + " \\"minute\\": \\"01\\",\\n" + " \\"second\\": \\"01\\",\\n" + " \\"third\\": \\"01\\",\\n" + " \\"fourth\\": \\"01\\",\\n
@Test(expected = JsonParseException.class) public void testNull() throws JsonParseException { String line = "{\\n" + " \\"date\\": null,\\n" + " \\"time\\": null,\\n" + " \\"children\\": [\\n" + " {\\n" + " \\"date\\": null,\\n" + " \\"time\\": null,\\n" + " \\"children\\": [\\n" + " {\\n" + " \\"date\\": null,\\n" + " \\"time\\": null,\\n" + " \\"children\\": [\\n" + " {\\n
@Test(expected = JsonParseException.class) public void testDateDeserialization() throws Exception { String json = "{\\n" + " \\"year\\": \\"2010\\",\\n" + " \\"month\\": \\"01\\",\\n" + " \\"day\\": \\"01\\",\\n" + " \\"hour\\": \\"01\\",\\n" + " \\"minute\\": \\"01\\",\\n" + " \\"second\\": \\"01\\",\\n" + " \\"third\\": \\"01\\",\\n" + " \\"fourth\\": \\"01\\",
@Test public void testConstructCollectionType() { Set<String> expected = new HashSet<String>(); expected.addAll(Arrays.asList("a", "b", "c")); expected.addAll(Arrays.asList("a", "b", "c")); expected.addAll(Arrays.asList("a", "b", "c")); expected.addAll(Arrays.asList("a", "b", "c")); expected.addAll(Arrays.asList("a", "b", "c")); expected.addAll(Arrays.asList("a", "b", "c")); expected.addAll(Arrays.asList("a",
@Test public void testDateTypeAdapter() { Calendar c = Calendar.getInstance(); c.set(Calendar.HOUR_OF_DAY, 0); c.set(Calendar.MINUTE, 0); c.set(Calendar.SECOND, 0); c.set(Calendar.MILLISECOND, 0); java.sql.Date date = new java.sql.Date(c.getTimeInMillis()); java.sql.Date date2 = (java.sql.Date) dateAdapter.deserialize(date, java.sql.Date.class, context); Assert.assertEquals(date, date2); }
@Test public void testDateTypeAdapter() { Calendar cal = Calendar.getInstance(); cal.set(Calendar.HOUR_OF_DAY, 0); cal.set(Calendar.MINUTE, 0); cal.set(Calendar.SECOND, 0); Calendar cal2 = Calendar.getInstance(); cal2.set(Calendar.HOUR_OF_DAY, 0); cal2.set(Calendar.MINUTE, 0); cal2.set(Calendar.SECOND, 0); Calendar cal3 = Calendar.getInstance(); cal3.set(Calendar.HOUR_OF_DAY, 0); cal3.set(Calendar.MINUTE, 0); cal3.set(Calendar.SECOND, 0); Calendar cal4 =
@Test public void testDateTypeAdapter() { Calendar cal = Calendar.getInstance(); cal.set(Calendar.HOUR_OF_DAY, 0); cal.set(Calendar.MINUTE, 0); cal.set(Calendar.SECOND, 0); Calendar cal2 = Calendar.getInstance(); cal2.set(Calendar.HOUR_OF_DAY, 0); cal2.set(Calendar.MINUTE, 0); cal2.set(Calendar.SECOND, 0); Calendar cal3 = Calendar.getInstance(); cal3.set(Calendar.HOUR_OF_DAY, 0); cal3.set(Calendar.MINUTE, 0); cal3.set(Calendar.SECOND, 0); Calendar cal4 =
@Test public void testDate() { Calendar calendar = Calendar.getInstance(); calendar.set(Calendar.HOUR_OF_DAY, 0); calendar.set(Calendar.MINUTE, 0); calendar.set(Calendar.SECOND, 0); calendar.set(Calendar.MILLISECOND, 0); Calendar calendar2 = Calendar.getInstance(); calendar2.setTimeInMillis(calendar.getTimeInMillis()); calendar2.set(Calendar.MILLISECOND, 0); Calendar calendar3 = Calendar.getInstance(); calendar3.setTimeInMillis(calendar.getTimeInMillis()); calendar3.set(Calendar.HOUR_OF_DAY, 0); calendar3.set(Calendar.MINUTE, 0); calendar3.set(
@Test public void testDateTypeAdapter() { String[][] lines = new String[][] { new String[] {"yyyy-MM-dd", "yyyy-MM-dd"}, new String[] {"yyyy-MM-dd", "yyyy-MM-dd"}, new String[] {"yyyy-MM-dd", "yyyy-MM-dd"}, new String[] {"yyyy-MM-dd", "yyyy-MM-dd"}, new String[] {"yyyy-MM-dd", "yyyy-MM-dd"}, new String[] {"yyyy-MM-dd", "yyyy-MM-dd"}, new String[] {"yyyy-MM-dd", "yyyy-MM-dd"},
@Test public void testDateTypeAdapter() { assertEquals(0, DateTypeAdapter.INSTANCE.createInstance(Date.class).size()); assertEquals(0, DateTypeAdapter.INSTANCE.createInstance(java.sql.Date.class).size()); assertEquals(0, DateTypeAdapter.INSTANCE.createInstance(java.sql.Time.class).size()); assertEquals(0, DateTypeAdapter.INSTANCE.createInstance(java.sql.Time.class).size()); assertEquals(0, DateTypeAdapter.INSTANCE.createInstance(java.sql.Time.class).size()); assertEquals(0, DateTypeAdapter.INSTANCE.createInstance(java.sql.Time.class).
@Test public void testDateSerialization() { Calendar cal = Calendar.getInstance(); cal.set(Calendar.HOUR_OF_DAY, 0); cal.set(Calendar.MINUTE, 0); cal.set(Calendar.SECOND, 0); Calendar cal2 = Calendar.getInstance(); cal2.set(Calendar.HOUR_OF_DAY, 0); cal2.set(Calendar.MINUTE, 0); cal2.set(Calendar.SECOND, 0); Calendar cal3 = Calendar.getInstance(); cal3.set(Calendar.HOUR_OF_DAY, 0); cal3.set(Calendar.MINUTE, 0); cal3.set(Calendar.SECOND, 0); cal3.set(
@Test public void testDateSerialization() { Calendar cal = Calendar.getInstance(); cal.set(Calendar.HOUR_OF_DAY, 0); cal.set(Calendar.MINUTE, 0); cal.set(Calendar.SECOND, 0); Calendar cal2 = Calendar.getInstance(); cal2.set(Calendar.HOUR_OF_DAY, 0); cal2.set(Calendar.MINUTE, 0); cal2.set(Calendar.SECOND, 0); Calendar cal3 = Calendar.getInstance(); cal3.set(Calendar.HOUR_OF_DAY, 0); cal3.set(Calendar.MINUTE, 0); cal3.set(Calendar.SECOND, 0); cal3.set(
@Test public void testDateDeserialization() throws Exception { Calendar calendar = Calendar.getInstance(); calendar.set(Calendar.HOUR_OF_DAY, 0); calendar.set(Calendar.MINUTE, 0); calendar.set(Calendar.SECOND, 0); calendar.set(Calendar.MILLISECOND, 0); java.sql.Date date = new java.sql.Date(calendar.getTimeInMillis()); assertEquals(date.getTime(), new DefaultDateTypeAdapter().deserialize(date, java.sql.Date.class, null).getTime()); assertEquals(date.getTime(), new DefaultDateTypeAdapter().deserialize(date, java.sql.Date.class, null).getTime()); }
@Test public void testDateTypeAdapter() throws Exception { Calendar cal = Calendar.getInstance(); cal.set(Calendar.HOUR_OF_DAY, 0); cal.set(Calendar.MINUTE, 0); cal.set(Calendar.SECOND, 0); Calendar cal2 = Calendar.getInstance(); cal2.set(Calendar.HOUR_OF_DAY, 0); cal2.set(Calendar.MINUTE, 0); cal2.set(Calendar.SECOND, 0); Calendar cal3 = Calendar.getInstance(); cal3.set(Calendar.HOUR_OF_DAY, 0); cal3.set(Calendar.MINUTE, 0); cal3.set(Calendar.SECOND, 0); cal3
@Test public void testDateDeserialization() throws Exception { Calendar cal = Calendar.getInstance(); cal.set(Calendar.HOUR_OF_DAY, 0); cal.set(Calendar.MINUTE, 0); cal.set(Calendar.SECOND, 0); Calendar cal2 = Calendar.getInstance(); cal2.set(Calendar.HOUR_OF_DAY, 0); cal2.set(Calendar.MINUTE, 0); cal2.set(Calendar.SECOND, 0); Calendar cal3 = Calendar.getInstance(); cal3.set(Calendar.HOUR_OF_DAY, 0); cal3.set(Calendar.MINUTE, 0); cal3.set(Calendar.SECOND, 0); cal3
@Test public void testDateTypeAdapter() throws Exception { Calendar cal = Calendar.getInstance(); cal.set(Calendar.HOUR_OF_DAY, 0); cal.set(Calendar.MINUTE, 0); cal.set(Calendar.SECOND, 0); Calendar cal2 = Calendar.getInstance(); cal2.set(Calendar.HOUR_OF_DAY, 0); cal2.set(Calendar.MINUTE, 0); cal2.set(Calendar.SECOND, 0); Calendar cal3 = Calendar.getInstance(); cal3.set(Calendar.HOUR_OF_DAY, 0); cal3.set(Calendar.MINUTE, 0); cal3.set(Calendar.SECOND, 0); cal3
@Test public void testDateTypeAdapter() { Set<?> instances = new DefaultDateTypeAdapter().createInstance(Date.class); Assert.assertEquals(2, instances.size()); Assert.assertEquals(new java.sql.Date(0), instances.get(0)); Assert.assertEquals(new java.sql.Time(0), instances.get(1)); instances = new DefaultDateTypeAdapter().createInstance(Time.class); Assert.assertEquals(2, instances.size()); Assert.assertEquals(new java.sql.Time(0), instances.get(0)); Assert.assertEquals(new java.sql.Time(1), instances.get(1)); }
@Test public void testDateTypeAdapter() { Calendar cal = Calendar.getInstance(); cal.set(2010, 0, 1, 0, 0, 0); Calendar cal2 = Calendar.getInstance(); cal2.set(2010, 0, 1, 0, 0); Calendar cal3 = Calendar.getInstance(); cal3.set(2010, 0, 1, 0, 0); Calendar cal4 = Calendar.getInstance(); cal4.set(2010, 0, 1, 0, 0); Calendar cal5 = Calendar.getInstance(); cal5.set(2010, 0, 1, 0, 0); Calendar cal6 = Calendar.getInstance(); cal6.set
@Test public void testDateTypeAdapter() { Set<?> instances = new DefaultDateTypeAdapter().createInstance(Date.class); Assert.assertEquals(1, instances.size()); Assert.assertEquals(Date.class, instances.iterator().next().getClass()); instances = new DefaultDateTypeAdapter().createInstance(Time.class); Assert.assertEquals(1, instances.size()); Assert.assertEquals(Time.class, instances.iterator().next().getClass()); instances = new DefaultDateTypeAdapter().createInstance(Time.class); Assert.assertEquals(1, instances.size()); Assert.assertEquals(Time.class, instances.iterator().next().getClass()); }
@Test public void testDateTypeAdapter() { Calendar cal = Calendar.getInstance(); cal.set(Calendar.HOUR_OF_DAY, 0); cal.set(Calendar.MINUTE, 0); cal.set(Calendar.SECOND, 0); Calendar cal2 = Calendar.getInstance(); cal2.set(Calendar.HOUR_OF_DAY, 0); cal2.set(Calendar.MINUTE, 0); cal2.set(Calendar.SECOND, 0); Calendar cal3 = Calendar.getInstance(); cal3.set(Calendar.HOUR_OF_DAY, 0); cal3.set(Calendar.MINUTE, 0); cal3.set(Calendar.SECOND, 0); Calendar cal4 =
@Test public void testClassSkip() { boolean result = instance.shouldSkipClass(Object.class); Assert.assertTrue(result); }
@Test public void testClassSkip() { Assert.assertFalse(classA.shouldSkipClass(String.class)); Assert.assertFalse(classB.shouldSkipClass(String.class)); Assert.assertFalse(classC.shouldSkipClass(String.class)); Assert.assertFalse(classD.shouldSkipClass(String.class)); Assert.assertFalse(classE.shouldSkipClass(String.class)); Assert.assertFalse(classF.shouldSkipClass(String.class)); Assert.assertFalse(classA.shouldSkipClass(String.class)); Assert.assertFalse(classB.shouldSkipClass(String.class)); Assert.assertFalse(classC.shouldSkipClass
@Test public void testTypeInfoMap() throws Exception { String[][] tests = new String[][] { new String[] {"a", "b", "c"}, new String[] {"a", "b", "c"}, new String[] {"a", "b", "c"}, new String[] {"a", "b", "c"}, new String[] {"a", "b", "c"}, new String[] {"a", "b", "c"}, new String[] {"a", "b", "c"}, new String[] {"a", "b", "c"}, new String[] {"a", "b", "c"}, new String[] {"a", "b
@Test public void testTypeInfoMap() throws Exception { Type[] types = new Type[] {String.class, Integer.class, String.class}; Type[] expectedTypes = new Type[] {String.class, Integer.class, String.class}; for (Type type : types) { TypeInfoMap fileInfoMap = new TypeInfoMap(type); assertEquals(type.getActualTypeArguments()[0], fileInfoMap.getKeyType()); assertEquals(type.getActualTypeArguments()[1], fileInfoMap.getValueType()); } }
@Test public void testTypeInfoMap() throws Exception { Type[] types = new Type[] {String.class, Integer.class, String.class}; for (Type type : types) { TypeInfoMap fileInfoMap = new TypeInfoMap(type); assertEquals(type.getActualTypeArguments()[0], fileInfoMap.getKeyType()); assertEquals(type.getActualTypeArguments()[1], fileInfoMap.getValueType()); TypeInfoMap fileInfoMap2 = new TypeInfoMap(type); assertEquals(type.getActualTypeArguments()[0], fileInfoMap2.getKeyType()); assertEquals(type.getActualTypeArguments()[1], fileInfoMap2.getValueType()); TypeInfoMap fileInfoMap3
@Test public void getKeyType() { Type keyType = new Type("keyType", "String"); Type keyType2 = new Type("keyType2", "String"); Type keyType3 = new Type("keyType3", "String"); Type keyType4 = new Type("keyType4", "String"); Type keyType5 = new Type("keyType5", "String"); assertEquals(keyType, new TypeInfoMap(keyType2).getKeyType()); assertEquals(keyType2, new TypeInfoMap(keyType3).getKeyType()); assertEquals(keyType3, new TypeInfoMap(keyType4).getKeyType()); assertEquals(keyType4, new TypeInfoMap(keyType5).
@Test public void getKeyType() { Type[] keys = new Type[3]; keys[0] = new Type("string", Type.STRING); keys[1] = new Type("integer", Type.INTEGER); keys[2] = new Type("string", Type.STRING); Type[] expectedKeys = new Type[3]; expectedKeys[0] = new Type("string", Type.STRING); expectedKeys[1] = new Type("integer", Type.INTEGER); expectedKeys[2] = new Type("string", Type.STRING); Type[] expectedValues = new Type[3]; expectedValues[0] = new Type("string", Type.STRING); expectedValues[1] = new Type("
@Test public void getValueType_A$() throws Exception { Type actual = new TypeInfoMap<String>(null).getValueType(); assertEquals(Type.STRING, actual); }
@Test public void getValueType_A$() throws Exception { Type actual = new TypeInfoMap(null).getValueType(); Type expected = null; assertThat(actual, is(equalTo(expected))); }
@Test public void testParse() throws JsonParseException { String json = "{\\n" + " \\"a\\": 1,\\n" + " \\"b\\": 2,\\n" + " \\"c\\": 3,\\n" + " \\"d\\": 4,\\n" + " \\"e\\": 5,\\n" + " \\"f\\": 6,\\n" + " \\"g\\": 7,\\n" + " \\"h\\": [\\n" + " {\\n" + " \\"a\\": 1,\\n" + " \\"b\\": 2,\\n" + " \\"c
@Test public void testParse() throws Exception { String json = "{\\n" + " \\"a\\": {\\n" + " \\"b\\": 1\\n" + " },\\n" + " {\\n" + " \\"b\\": 2\\n" + " },\\n" + " {\\n" + " \\"b\\": 3\\n" + " },\\n" + " {\\n" + " \\"b\\": 4\\n" + " },\\n" + " {\\n" + " \\"b\\": 5\\n" + " },\\n" + " {\\n" + " \\"b
@Test public void testParse() throws Exception { String json = "{\\n" + " \\"a\\": {\\n" + " \\"b\\": 1,\\n" + " \\"c\\": 2,\\n" + " \\"d\\": 3,\\n" + " \\"e\\": 4,\\n" + " \\"f\\": 5,\\n" + " \\"g\\": 6,\\n" + " \\"h\\": 7,\\n" + " \\"i\\": 8,\\n" + " \\"j\\": 9,\\n" + " \\"k\\": 14,\\n"
@Test public void testParse() throws Exception { final String json = "{\\n" + " \\"a\\": {\\n" + " \\"b\\": {\\n" + " \\"c\\": {\\n" + " \\"d\\": {\\n" + " \\"e\\": {\\n" + " \\"f\\": \\"g\\"\\n" + " }\\n" + " }\\n" + " }\\n" + " }\\n" + " }\\n" + "}"; JsonReader reader = new JsonReader(new StringReader(json)); JsonElement jsonElement = AppendableWriter.parse(reader); Assert.assert
@Test public void testParse() throws Exception { String json = "{\\n" + " \\"a\\": {\\n" + " \\"b\\": 1\\n" + " },\\n" + " {\\n" + " \\"b\\": 2\\n" + " },\\n" + " {\\n" + " \\"b\\": 3\\n" + " },\\n" + " {\\n" + " \\"b\\": 4\\n" + " },\\n" + " {\\n" + " \\"b\\": 5\\n" + " },\\n" + " {\\n" + " \\"b
@Test public void testParse() throws Exception { String json = "{\\n" + " \\"a\\": [\\n" + " {\\n" + " \\"b\\": 1\\n" + " },\\n" + " {\\n" + " \\"b\\": 2\\n" + " },\\n" + " {\\n" + " \\"b\\": 3\\n" + " },\\n" + " {\\n" + " \\"b\\": 4\\n" + " },\\n" + " {\\n" + " \\"b\\": 5\\n" + " },\\n" + " {\\n
@Test public void testParse() throws Exception { String json = "{\\n" + " \\"a\\": [\\n" + " {\\n" + " \\"b\\": 1\\n" + " },\\n" + " {\\n" + " \\"b\\": 2\\n" + " },\\n" + " {\\n" + " \\"b\\": 3\\n" + " },\\n" + " {\\n" + " \\"b\\": 4\\n" + " },\\n" + " {\\n" + " \\"b\\": 5\\n" + " },\\n" + " {\\n
@Test public void testParse() throws Exception { String json = "{\\n" + " \\"a\\": {\\n" + " \\"b\\": 1\\n" + " },\\n" + " {\\n" + " \\"b\\": 2\\n" + " },\\n" + " {\\n" + " \\"b\\": 3\\n" + " },\\n" + " {\\n" + " \\"b\\": 4\\n" + " },\\n" + " {\\n" + " \\"b\\": 5\\n" + " },\\n" + " {\\n" + " \\"b
@Test public void testParse() throws Exception { String json = "{\\n" + " \\"a\\": {\\n" + " \\"b\\": {\\n" + " \\"c\\": {\\n" + " \\"d\\": {\\n" + " \\"e\\": {\\n" + " \\"b\\": {\\n" + " \\"c\\": {\\n" + " \\"d\\": {\\n" + " \\"e\\": {\\n" + " \\"b\\": {\\n" + " \\"c\\": {\\n" + " \\"d\\": {\\n
@Test public void testParse() throws Exception { String json = "{\\n" + " \\"a\\": [\\n" + " {\\n" + " \\"b\\": 1\\n" + " },\\n" + " {\\n" + " \\"b\\": 2\\n" + " },\\n" + " {\\n" + " \\"b\\": 3\\n" + " },\\n" + " {\\n" + " \\"b\\": 4\\n" + " },\\n" + " {\\n" + " \\"b\\": 5\\n" + " },\\n" + " {\\n
@Test public void testParse() throws Exception { String json = "{\\n" + " \\"a\\": {\\n" + " \\"b\\": 1,\\n" + " \\"c\\": 2,\\n" + " \\"d\\": 3,\\n" + " \\"e\\": 4,\\n" + " \\"f\\": 5,\\n" + " \\"g\\": 6,\\n" + " \\"h\\": 7,\\n" + " \\"i\\": 8,\\n" + " \\"j\\": 9,\\n" + " \\"k\\": 14,\\n"
@Test public void testParse() throws Exception { final String json = "{\\n" + " \\"a\\": [\\n" + " {\\n" + " \\"b\\": 1\\n" + " },\\n" + " {\\n" + " \\"b\\": 2\\n" + " },\\n" + " {\\n" + " \\"b\\": 3\\n" + " },\\n" + " {\\n" + " \\"b\\": 4\\n" + " },\\n" + " {\\n" + " \\"b\\": 5\\n" + " },\\n" + " {\\
@Test public void testParse() throws Exception { String json = "{\\n" + " \\"a\\": {\\n" + " \\"b\\": 1,\\n" + " \\"c\\": 2,\\n" + " \\"d\\": 3,\\n" + " \\"e\\": 4,\\n" + " \\"f\\": 5,\\n" + " \\"g\\": 6,\\n" + " \\"h\\": 7,\\n" + " \\"i\\": 8,\\n" + " \\"j\\": 9,\\n" + " \\"k\\": 14,\\n"
@Test public void testParse() throws Exception { String json = "{\\n" + " \\"a\\": {\\n" + " \\"b\\": 1\\n" + " },\\n" + " {\\n" + " \\"b\\": 2\\n" + " },\\n" + " {\\n" + " \\"b\\": 3\\n" + " },\\n" + " {\\n" + " \\"b\\": 4\\n" + " },\\n" + " {\\n" + " \\"b\\": 5\\n" + " },\\n" + " {\\n" + " \\"b
@Test public void testParse() throws Exception { String json = "{\\n" + " \\"a\\": {\\n" + " \\"b\\": 1,\\n" + " \\"c\\": 2,\\n" + " \\"d\\": 3,\\n" + " \\"e\\": 4,\\n" + " \\"f\\": 5,\\n" + " \\"g\\": 6,\\n" + " \\"h\\": 7,\\n" + " \\"i\\": 8,\\n" + " \\"j\\": 9,\\n" + " \\"k\\": 14,\\n"
@Test public void testParse() throws Exception { String json = "{\\n" + " \\"a\\": {\\n" + " \\"b\\": {\\n" + " \\"c\\": {\\n" + " \\"d\\": {\\n" + " \\"e\\": {\\n" + " \\"b\\": {\\n" + " \\"c\\": {\\n" + " \\"d\\": {\\n" + " \\"e\\": {\\n" + " \\"b\\": {\\n" + " \\"c\\": {\\n" + " \\"d\\": {\\n
@Test public void testParse() { String json = "{\\n" + " \\"a\\": {\\n" + " \\"b\\": 1,\\n" + " \\"c\\": 2,\\n" + " \\"d\\": 3,\\n" + " \\"e\\": 4,\\n" + " \\"f\\": 5,\\n" + " \\"g\\": 6,\\n" + " \\"h\\": 7,\\n" + " \\"i\\": 8,\\n" + " \\"j\\": 9,\\n" + " \\"k\\": 14,\\n" + "
@Test public void testParse() throws Exception { String json = "{\\n" + " \\"a\\": {\\n" + " \\"b\\": 1\\n" + " },\\n" + " {\\n" + " \\"b\\": 2\\n" + " },\\n" + " {\\n" + " \\"b\\": 3\\n" + " },\\n" + " {\\n" + " \\"b\\": 4\\n" + " },\\n" + " {\\n" + " \\"b\\": 5\\n" + " },\\n" + " {\\n" + " \\"b
@Test public void testParse() throws Exception { String json = "{\\n" + " \\"a\\": {\\n" + " \\"b\\": 1\\n" + " },\\n" + " {\\n" + " \\"b\\": 2\\n" + " },\\n" + " {\\n" + " \\"b\\": 3\\n" + " },\\n" + " {\\n" + " \\"b\\": 4\\n" + " },\\n" + " {\\n" + " \\"b\\": 5\\n" + " },\\n" + " {\\n" + " \\"b
@Test public void testParse() throws Exception { String json = "{\\n" + " \\"a\\": {\\n" + " \\"b\\": 1,\\n" + " \\"c\\": 2,\\n" + " \\"d\\": 3,\\n" + " \\"e\\": 4,\\n" + " \\"f\\": 5,\\n" + " \\"g\\": 6,\\n" + " \\"h\\": 7,\\n" + " \\"i\\": 8,\\n" + " \\"j\\": 9,\\n" + " \\"k\\": 14,\\n"
@Test public void testParse() throws Exception { String json = "{\\n" + " \\"a\\": {\\n" + " \\"b\\": 1\\n" + " },\\n" + " {\\n" + " \\"b\\": 2\\n" + " },\\n" + " {\\n" + " \\"b\\": 3\\n" + " },\\n" + " {\\n" + " \\"b\\": 4\\n" + " },\\n" + " {\\n" + " \\"b\\": 5\\n" + " },\\n" + " {\\n" + " \\"b
@Test public void testParse() throws Exception { String json = "{\\n" + " \\"a\\": {\\n" + " \\"b\\": 1,\\n" + " \\"c\\": 2,\\n" + " \\"d\\": 3,\\n" + " \\"e\\": 4,\\n" + " \\"f\\": 5,\\n" + " \\"g\\": 6,\\n" + " \\"h\\": 7,\\n" + " \\"i\\": 8,\\n" + " \\"j\\": 9,\\n" + " \\"k\\": 14,\\n"
@Test(expected = IllegalArgumentException.class) public void write_null() throws Exception { JsonWriter writer = new JsonWriter(); AppendableWriter.write(null, false, writer); }
@Test(expected = IllegalArgumentException.class) public void writeNull() throws Exception { JsonWriter writer = new JsonWriter(); AppendableWriter.write(null, false, writer); }
@Test(expected=IllegalArgumentException.class) public void writeNull() throws Exception { JsonWriter writer = new JsonWriter(); AppendableWriter.write(null, false, writer); }
@Test(expected=IllegalArgumentException.class) public void write_null() throws Exception { JsonWriter writer = new JsonWriter(); AppendableWriter.write(null, false, writer); }
@Test(expected=IllegalArgumentException.class) public void write_null() throws Exception { JsonWriter writer = new JsonWriter(); AppendableWriter.write(null, false, writer); }
@Test(expected=IllegalArgumentException.class) public void write_null() throws Exception { JsonWriter writer = new JsonWriter(); AppendableWriter.write(null, false, writer); }
@Test(expected=IllegalArgumentException.class) public void write_null() throws Exception { JsonWriter writer = new JsonWriter(); AppendableWriter.write(null, false, writer); }
@Test(expected=IllegalArgumentException.class) public void writeNull() throws Exception { JsonWriter writer = new JsonWriter(); AppendableWriter.write(null, false, writer); }
@Test(expected=IllegalArgumentException.class) public void write_null() throws Exception { JsonWriter writer = new JsonWriter(); AppendableWriter.write(null, false, writer); }
@Test(expected = IllegalArgumentException.class) public void writeNull() throws Exception { JsonWriter writer = new JsonWriter(); AppendableWriter.write(null, false, writer); }
@Test public void write() throws Exception { String s = "{\\n" + " \\"a\\": [\\n" + " {\\n" + " \\"b\\": [\\n" + " {\\n" + " \\"c\\": [\\n" + " \\"d\\",\\n" + " \\"e\\",\\n" + " \\"f\\",\\n" + " \\"g\\",\\n" + " \\"h\\",\\n" + " \\"i\\",\\n" + " \\"j\\",\\n" + " \\"k\\",\\n" + " \\"l\\",
@Test public void write() throws Exception { String s = "{\\n" + " \\"a\\": [\\n" + " {\\n" + " \\"b\\": [\\n" + " {\\n" + " \\"c\\": [\\n" + " \\"d\\",\\n" + " \\"e\\",\\n" + " \\"f\\",\\n" + " \\"g\\",\\n" + " \\"h\\",\\n" + " \\"i\\",\\n" + " \\"j\\",\\n" + " \\"k\\",\\n" + " \\"l\\",
@Test(expected=IllegalArgumentException.class) public void write_null() throws Exception { JsonWriter writer = new JsonWriter(); AppendableWriter.write(null, false, writer); }
@Test public void testWriterForAppendable() { StringWriter sw = new StringWriter(); Writer writer = WriterForAppendable.writerForAppendable(sw); assertSame(sw, writer); }
@Test public void testWriterForAppendable() throws IOException { StringWriter sw = new StringWriter(); Writer writer = AppendableWriter.writerForAppendable(sw); assertSame(sw, writer); }
@Test public void nullCheckNotNull() throws Exception { try { checkNotNull(null); } catch (NullPointerException e) { return; } fail(); }
@Test public void nullCheckNotNull() throws Exception { thrown.expect(NullPointerException.class); thrown.expectMessage("object must not be null"); checkNotNull(null); }
@Test(expected = IllegalStateException.class) public void testGetAsBigDecimal() { JsonArray array = new JsonArray(); array.add(new JsonObject().addProperty("a", "1").addProperty("b", "2")); array.add(new JsonObject().addProperty("c", "3").addProperty("d", "4")); array.add(new JsonObject().addProperty("e", "5").addProperty("f", "6")); array.add(new JsonObject().addProperty("g", "7").addProperty("h", "8")); array.add(new JsonObject().addProperty("i", "9").addProperty("j", "10")); array.add(new
@Test public void testGetAsBigDecimal() { JsonElement a = new JsonElement(); a.add("a"); JsonElement b = new JsonElement(); b.add("b"); b.add("c"); a.add(b); b.add("d"); b.add("e"); b.add("f"); b.add("g"); b.add("h"); b.add("i"); b.add("j"); b.add("k"); b.add("l"); b.add("j"); b.add("k"); b.add("l"); b.add("i"); b.add("j"); b.add("k"); b.add("l"); b.add("j");
@Test public void testGetAsBigDecimal() { JsonElement one = gson.fromJson("{\\"a\\":1}", JsonElement.class); JsonElement two = gson.fromJson("{\\"a\\":2}", JsonElement.class); JsonElement three = gson.fromJson("{\\"a\\":3}", JsonElement.class); JsonElement four = gson.fromJson("{\\"a\\":4}", JsonElement.class); JsonElement five = gson.fromJson("{\\"a\\":5}", JsonElement.class); assertEquals(1.0, one.getAsBigDecimal().doubleValue(), 0.0); assertEquals(2.0, two.getAsBigDecimal().doubleValue(), 0.
@Test public void testFieldNamingPolicy() { final FieldNamingStrategy2 namingPolicy = FieldNamingStrategy2.LOWER_CASE; final String line = FieldNamingPolicy.class.getSimpleName() + "\\n" + FieldNamingPolicy.class.getSimpleName() + "\\n" + FieldNamingPolicy.class.getSimpleName() + "\\n" + FieldNamingPolicy.class.getSimpleName() + "\\n" + FieldNamingPolicy.class.getSimpleName() + "\\n" + FieldNamingPolicy.class.getSimpleName() + "\\n" + FieldNamingPolicy.class.getSimpleName() + "\\n" + FieldNamingPolicy.class.getSimpleName() + "\\
@Test public void testFieldNamingPolicy() { final FieldNamingStrategy2 strategy = FieldNamingStrategy2.LOWER_CASE_WITH_UNDERSCORES; final FieldNamingPolicy fieldNamingPolicy = FieldNamingPolicy.getFieldNamingPolicy(strategy); assertEquals(strategy, fieldNamingPolicy.getNamingStrategy2()); assertEquals(FieldNamingStrategy2.LOWER_CASE_WITH_UNDERSCORES, fieldNamingPolicy.getFieldNamingPolicy()); }
@Test public void testGetFieldNamingPolicy() { FieldNamingStrategy2 expected = new FieldNamingStrategy2(); FieldNamingStrategy2 actual = fieldNamingPolicy().getFieldNamingPolicy(); assertEquals(expected, actual); }
@Test public void testGetFieldNamingPolicy() { final FieldNamingStrategy2 expected = new FieldNamingStrategy2(); final FieldNamingStrategy2 actual = FieldNamingPolicy.getFieldNamingPolicy(); assertEquals(expected, actual); }
@Test public void getRawType() { Type type = new ParameterizedTypeImpl(String.class, null, null).getRawType(); assertEquals(String.class, type); }
@Test public void getRawType() { Type type = new ParameterizedTypeImpl(String.class, null, null).getRawType(); assertEquals(String.class, type); }
@Test public void getActualTypeArguments() { Type[] actualTypeArguments = new Type[]{String.class, Integer.class}; Type[] expected = new Type[]{String.class, Integer.class}; assertArrayEquals(expected, new ParameterizedTypeImpl(String.class, actualTypeArguments, null).getActualTypeArguments()); }
@Test public void getActualTypeArguments() { ParameterizedTypeImpl type = new ParameterizedTypeImpl(String.class, new Type[] {String.class}, null); assertArrayEquals(new Type[] {String.class}, type.getActualTypeArguments()); type = new ParameterizedTypeImpl(Integer.class, new Type[] {Integer.class}, null); assertArrayEquals(new Type[] {Integer.class}, type.getActualTypeArguments()); type = new ParameterizedTypeImpl(Date.class, new Type[] {Date.class}, null); assertArrayEquals(new Type[] {Date.class}, type.getActualTypeArguments()); type = new ParameterizedTypeImpl(Date.class, new Type[] {Date.class}, null); assertArrayEquals(
@Test public void getOwnerType() { Type type = new ParameterizedTypeImpl(String.class, null, null).getOwnerType(); assertEquals(String.class, type); }
@Test public void getOwnerType() { ParameterizedTypeImpl type = new ParameterizedTypeImpl(String.class, null, Types.STRING); assertEquals(Types.STRING, type.getOwnerType()); }
@Test public void equals_same() { ParameterizedType p1 = new ParameterizedTypeImpl(String.class, new Type[] {String.class}, new Type[] {String.class}); ParameterizedType p2 = new ParameterizedTypeImpl(String.class, new Type[] {String.class}, new Type[] {String.class}); assertEquals(p1, p2); assertEquals(p1.hashCode(), p2.hashCode()); }
@Test public void testHashCode() { ParameterizedTypeImpl type1 = new ParameterizedTypeImpl(String.class, new Type[] {String.class}, null); ParameterizedTypeImpl type2 = new ParameterizedTypeImpl(Integer.class, new Type[] {Integer.class}, null); ParameterizedTypeImpl type3 = new ParameterizedTypeImpl(Date.class, new Type[] {Date.class}, null); assertEquals(type1.hashCode(), type2.hashCode()); assertNotEquals(type1.hashCode(), type3.hashCode()); }
@Test public void testHashCode() { ParameterizedTypeImpl type1 = new ParameterizedTypeImpl(String.class, new Type[] {String.class}, new Type[] {Integer.class}); ParameterizedTypeImpl type2 = new ParameterizedTypeImpl(String.class, new Type[] {Integer.class}, new Type[] {Integer.class}); assertEquals(type1.hashCode(), type2.hashCode()); }
@Test public void getActualTypeForFirstTypeVariable() { assertEquals(Object.class, TypeUtils.getActualTypeForFirstTypeVariable(String.class)); assertEquals(Object.class, TypeUtils.getActualTypeForFirstTypeVariable(Integer.class)); assertEquals(Object.class, TypeUtils.getActualTypeForFirstTypeVariable(String[].class)); assertEquals(String.class, TypeUtils.getActualTypeForFirstTypeVariable(String[].class)); assertEquals(Integer.class, TypeUtils.getActualTypeForFirstTypeVariable(Integer[].class)); assertEquals(String.class, TypeUtils.getActualTypeForFirstTypeVariable(String[].class));
@Test public void getActualTypeForFirstTypeVariable() { assertEquals(Object.class, TypeUtils.getActualTypeForFirstTypeVariable(String.class)); assertEquals(Object.class, TypeUtils.getActualTypeForFirstTypeVariable(Integer.class)); assertEquals(Object.class, TypeUtils.getActualTypeForFirstTypeVariable(String[].class)); assertEquals(Object.class, TypeUtils.getActualTypeForFirstTypeVariable(Integer[].class)); assertEquals(String.class, TypeUtils.getActualTypeForFirstTypeVariable(String[][].class)); assertEquals(String.class, TypeUtils.getActualTypeForFirstTypeVariable(String[][].
@Test public void testIsArray() { assertFalse(TypeUtils.isArray(null)); assertFalse(TypeUtils.isArray(String.class)); assertFalse(TypeUtils.isArray(Integer.class)); assertFalse(TypeUtils.isArray(String[].class)); assertFalse(TypeUtils.isArray(Integer[].class)); assertFalse(TypeUtils.isArray(String[][].class)); assertFalse(TypeUtils.isArray(String[][].class)); assertFalse(TypeUtils.isArray(String[][].class)); assertFalse(TypeUtils.isArray(String[][].class)); assertFalse(TypeUtils.isArray(String[][].class
@Test public void isArray() { assertFalse(TypeUtils.isArray(null)); assertFalse(TypeUtils.isArray(String.class)); assertFalse(TypeUtils.isArray(Integer.class)); assertFalse(TypeUtils.isArray(String[].class)); assertFalse(TypeUtils.isArray(String[][].class)); assertFalse(TypeUtils.isArray(String[][].class)); assertTrue(TypeUtils.isArray(String[][].class)); assertTrue(TypeUtils.isArray(String[][].class)); assertTrue(TypeUtils.isArray(String[][].class)); assertTrue(TypeUtils.isArray(String[][].class));
@Test public void testSerializedNameAnnotationInterceptingNamingPolicy() { new SerializedNameAnnotationInterceptingNamingPolicy(new FieldNamingStrategy2() { @Override public String translateName(FieldAttributes f) { return null; } @Override public boolean validateName(FieldAttributes f) { return false; } @Override public boolean validateName(String s) { return false; } @Override public boolean validateName(String s) { return false; } @Override public boolean validateName(String s) { return false; } @Override public boolean validateName(String s) { return false; } @Override public boolean validateName(String s) { return false; } @Override public boolean validateName(String s) {
@Test public void testSerializedNameAnnotationInterceptingNamingPolicy() { SerializedNameAnnotationInterceptingNamingPolicy namingPolicy = new SerializedNameAnnotationInterceptingNamingPolicy(new FieldNamingStrategy2() { @Override public String translateName(FieldAttributes attrs) { return attrs.getKey(); } @Override public boolean isCaseSensitive() { return false; } @Override public boolean isCaseSensitive() { return false; } @Override public boolean isCaseSensitive() { return false; } @Override public boolean isCaseSensitive() { return false; } @Override public boolean isCaseSensitive() { return false; } @Override public boolean isCaseSensitive() { return false; } @Override public boolean isCaseSensitive() { return false
@Test public void testPrettyPrinting() throws Exception { GsonBuilder builder = new GsonBuilder(); final StringWriter writer = new StringWriter(); builder.setPrettyPrinting(true); builder.toJson(null, writer); Assert.assertEquals("null", writer.toString()); builder.setPrettyPrinting(false); builder.toJson(null, writer); Assert.assertEquals("false", writer.toString()); builder.setPrettyPrinting(true); builder.toJson(null, writer); Assert.assertEquals("true", writer.toString()); builder.setPrettyPrinting(true); builder.toJson(null, writer); Assert.assertEquals("true", writer.toString()); }
@Test public void testPrettyPrinting() throws Exception { GsonBuilder builder = new GsonBuilder(); final StringWriter writer = new StringWriter(); builder.setPrettyPrinting(true); builder.toJson(null, writer); Assert.assertEquals("null", writer.toString()); builder.setPrettyPrinting(false); builder.toJson(null, writer); Assert.assertEquals("false", writer.toString()); builder.setPrettyPrinting(true); builder.toJson(null, writer); Assert.assertEquals("true", writer.toString()); builder.setPrettyPrinting(true); builder.toJson(null, writer); Assert.assertEquals("true", writer.toString()); }
@Test public void testPrettyPrinting() throws Exception { GsonBuilder builder = new GsonBuilder(); final StringWriter writer = new StringWriter(); builder.setPrettyPrinting(true); builder.toJson(null, writer); Assert.assertEquals("null", writer.toString()); builder.setPrettyPrinting(false); builder.toJson(null, writer); Assert.assertEquals("false", writer.toString()); builder.setPrettyPrinting(true); builder.toJson(null, writer); Assert.assertEquals("true", writer.toString()); builder.setPrettyPrinting(true); builder.toJson(null, writer); Assert.assertEquals("true", writer.toString()); }
@Test public void testPrettyPrinting() throws Exception { GsonBuilder builder = new GsonBuilder(); final StringWriter writer = new StringWriter(); builder.setPrettyPrinting(true); builder.toJson(null, writer); Assert.assertEquals("null", writer.toString()); builder.setPrettyPrinting(false); builder.toJson(null, writer); Assert.assertEquals("false", writer.toString()); builder.setPrettyPrinting(true); builder.toJson(null, writer); Assert.assertEquals("true", writer.toString()); builder.setPrettyPrinting(true); builder.toJson(null, writer); Assert.assertEquals("true", writer.toString()); }
@Test public void testPrettyPrinting() { Gson gson = new GsonBuilder().withPrettyPrinting().build(); StringWriter writer = new StringWriter(); String json = gson.toJson("{\\"a\\":\\"b\\",\\"c\\":\\"d\\"}"); Assert.assertEquals("{\\"a\\":\\"b\\",\\"c\\":\\"d\\"}", writer.toString()); json = gson.toJson("{\\"a\\":\\"b\\",\\"c\\":\\"d\\"}"); Assert.assertEquals("{\\"a\\":\\"b\\",\\"c\\":\\"d\\"}", writer.toString()); json = gson.toJson("{\\"a\\":\\"
@Test(expected = JsonParseException.class) public void testError2() throws Exception { GsonBuilder builder = new GsonBuilder(); builder.addFieldNamingStrategy(FieldNamingStrategy.DEFAULT_ANONYMOUS_FIELD_EXCLUSION_STRATEGY) .addFieldNamingStrategy(FieldNamingStrategy.DEFAULT_SYNTHETIC_FIELD_EXCLUSION_STRATEGY) .addFieldNamingStrategy(FieldNamingStrategy.DEFAULT_JSON_ARRAY_FIELD_EXCLUSION_STRATEGY) .addFieldNamingStrategy(FieldNamingStrategy.DEFAULT_JSON_ARRAY_FIELD_EXCLUSION_STRATEGY) .addFieldNamingStrategy(FieldNamingStrategy.DEFAULT_
@Test(expected = JsonParseException.class) public void testNullValue() throws Exception { GsonBuilder builder = new GsonBuilder(); builder.addFieldNamingStrategy(FieldNamingStrategy.DEFAULT_ANONYMOUS_FIELD_EXCLUSION_STRATEGY) .addFieldNamingStrategy(FieldNamingStrategy.DEFAULT_SYNTHETIC_FIELD_EXCLUSION_STRATEGY) .addFieldNamingStrategy(FieldNamingStrategy.DEFAULT_JSON_FIELD_EXCLUSION_STRATEGY) .addFieldNamingStrategy(FieldNamingStrategy.DEFAULT_JSON_ARRAY_FIELD_EXCLUSION_STRATEGY) .addFieldNamingStrategy(FieldNamingStrategy.DEFAULT_JSON_
@Test(expected=JsonParseException.class) public void testNullPointerException() { try { gson.toJson(null); } catch (JsonParseException e) { assertTrue(e.getCause() instanceof NullPointerException); throw e; } }
@Test(expected = JsonParseException.class) public void testNullPointerException() throws Exception { try { gson.toJson(null); } catch (JsonParseException e) { assertTrue(e.getCause() instanceof NullPointerException); throw e; } }
@Test(expected = JsonParseException.class) public void testNullPointerException() throws Exception { try { gson.toJson(null); } catch (JsonParseException e) { assertTrue(e.getCause() instanceof NullPointerException); throw e; } }
@Test(expected = JsonParseException.class) public void testNullPointerException() { try { gson.toJson(null); } catch (JsonParseException e) { assertTrue(e.getCause() instanceof NullPointerException); throw e; } }
@Test(expected = JsonParseException.class) public void testEmptyArray() throws JsonParseException { try (JsonReader reader = new JsonReader(getClass().getClassLoader().getResourceAsStream("emptyArray.json"))) { new Gson().fromJson(reader, List.class); } }
@Test(expected = JsonParseException.class) public void testEmptyJsonString() throws JsonParseException { GsonBuilder builder = new GsonBuilder(); builder.addFieldNamingStrategy(FieldNamingStrategy.LOWER_CASE_WITH_UNDERSCORES); builder.addFieldNamingStrategy(FieldNamingStrategy.LOWER_CASE_WITH_UNDERSCORES); builder.addFieldNamingStrategy(FieldNamingStrategy.LOWER_CASE_WITH_UNDERSCORES); builder.addFieldNamingStrategy(FieldNamingStrategy.LOWER_CASE_WITH_UNDERSCORES); builder.addFieldNamingStrategy(FieldNamingStrategy.LOWER_CASE_WITH_UNDERSCORES); builder.build().fromJson("", String.class); }
@Test(expected = JsonParseException.class) public void testEmptyJsonString() throws JsonParseException { GsonBuilder builder = new GsonBuilder(); builder.addFieldNamingStrategy(FieldNamingStrategy.DEFAULT_ANONYMOUS_CLASS_EXCLUSION_STRATEGY) .addFieldNamingStrategy(FieldNamingStrategy.DEFAULT_JSON_FIELD_NAME_STRATEGY) .addFieldNamingStrategy(FieldNamingStrategy.DEFAULT_JSON_ARRAY_FIELD_NAME_STRATEGY) .addFieldNamingStrategy(FieldNamingStrategy.DEFAULT_JSON_ARRAY_FIELD_NAME_STRATEGY) .addFieldNamingStrategy(FieldNamingStrategy.DEFAULT_JSON_ARRAY_FIELD_NAME_STRATEGY)
@Test public void testJsonSerializationContextDefault() throws Exception { ObjectNavigatorFactory factory = Mockito.mock(ObjectNavigatorFactory.class); Mockito.when(factory.createObjectNavigator(Mockito.any(Class.class), Mockito.any(Type.class), Mockito.anyBoolean(), Mockito.any(ParameterizedTypeHandlerMap.class))).thenReturn(factory); SimpleTypeFactory typeFactory = new SimpleTypeFactory(); ParameterizedTypeHandlerMap<JsonSerializer<?>> serializers = new ParameterizedTypeHandlerMap<JsonSerializer<?>>(); JsonSerializer<String> stringSerializer = new JsonSerializer<String>() { @Override public String serialize(Object obj, Type typeOfSrc) { return "string"; }
@Test public void testJsonSerializationContextDefault() { ObjectNavigatorFactory factory = Mockito.mock(ObjectNavigatorFactory.class); ParameterizedTypeHandlerMap<JsonSerializer<?>> serializers = new ParameterizedTypeHandlerMap<JsonSerializer<?>>() { @Override public ParameterizedTypeHandler<JsonSerializer<?>> serialize(Object obj, Type typeOfSrc, boolean preserveType) { return null; } @Override public ParameterizedTypeHandler<JsonSerializer<?>> serialize(Object obj, Type typeOfSrc, boolean preserveType) { return null; } @Override public ParameterizedTypeHandler<JsonSerializer<?>> serialize(Object obj, Type typeOfSrc, boolean preserveType) { return null; } @Override public ParameterizedTypeHandler<JsonSerializer<?>> serialize(Object obj, Type
@Test public void testJsonSerializationContextDefault() throws Exception { ObjectNavigatorFactory factory = Mockito.mock(ObjectNavigatorFactory.class); Mockito.when(factory.createObjectNavigator(Mockito.any(Class.class), Mockito.any(Class.class), Mockito.anyBoolean(), Mockito.any(Class.class), Mockito.any(Class.class), Mockito.any(Class.class), Mockito.any(Class.class), Mockito.any(Class.class), Mockito.any(Class.class))).thenAnswer(new Answer<ObjectNavigatorFactory>() { @Override public ObjectNavigatorFactory answer(InvocationOnMock invocation) throws Throwable { return
@Test public void testJsonSerializationContextDefault() { ObjectNavigatorFactory factory = Mockito.mock(ObjectNavigatorFactory.class); ParameterizedTypeHandlerMap<JsonSerializer<?>> serializers = new ParameterizedTypeHandlerMap<JsonSerializer<?>>() { @Override public ParameterizedTypeHandler<JsonSerializer<?>> serialize(Object obj, Type typeOfSrc, boolean preserveType) { return null; } @Override public ParameterizedTypeHandler<JsonSerializer<?>> serialize(Object obj, Type typeOfSrc, boolean preserveType) { return null; } @Override public ParameterizedTypeHandler<JsonSerializer<?>> serialize(Object obj, Type typeOfSrc, boolean preserveType) { return null; } @Override public ParameterizedTypeHandler<JsonSerializer<?>> serialize(Object obj, Type
@Test public void testJsonSerializationContextDefault() { ObjectNavigatorFactory factory = mock(ObjectNavigatorFactory.class); ParameterizedTypeHandlerMap<JsonSerializer<?>> serializers = new ParameterizedTypeHandlerMap<JsonSerializer<?>>() { @Override public ParameterizedTypeHandler<JsonSerializer<?>> serialize(Object obj, Type typeOfSrc, boolean preserveType) { return null; } @Override public ParameterizedTypeHandler<JsonSerializer<?>> serialize(Object obj, Type typeOfSrc, boolean preserveType) { return null; } @Override public ParameterizedTypeHandler<JsonSerializer<?>> serialize(Object obj, Type typeOfSrc, boolean preserveType) { return null; } @Override public ParameterizedTypeHandler<JsonSerializer<?>> serialize(Object obj, Type typeOfSrc,
@Test(dataProvider = "serializeDP") public void testSerialize(Object obj, String path) throws Exception { Map<String, Object> objMap = new HashMap<String, Object>(); objMap.put("key1", "value1"); objMap.put("key2", "value2"); objMap.put("key3", "value3"); objMap.put("key4", "value4"); objMap.put("key5", "value5"); objMap.put("key6", "value6"); Map<String, Object> objMap2 = new HashMap<String, Object>(); objMap2.put("key1", "value1"); objMap2.
@Test(dataProvider = "serializeDP") public void testSerialize(Object obj, Type typeOfSrc, boolean preserveType) throws Exception { Map<String, Object> objMap = new HashMap<String, Object>(); objMap.put("key1", "value1"); objMap.put("key2", "value2"); objMap.put("key3", "value3"); objMap.put("key4", "value4"); objMap.put("key5", "value5"); objMap.put("key6", "value6"); objMap.put("key7", "value7"); objMap.put("key8", "value8"); objMap.put("key
@Test(dataProvider = "serializeDP") public void testSerialize(Object obj, Type typeOfSrc, boolean preserveType) throws Exception { Map<String, Object> objMap = new HashMap<String, Object>(); objMap.put("key1", "value1"); objMap.put("key2", "value2"); objMap.put("key3", "value3"); objMap.put("key4", "value4"); objMap.put("key5", "value5"); objMap.put("key6", "value6"); objMap.put("key7", "value7"); objMap.put("key8", "value8"); objMap.put("key
@Test(dataProvider = "serializeDataProvider") public void testSerialize(Object obj, String expectedResult) { JsonObject result = instance.serialize(obj); Assert.assertEquals(result.getAsJsonObject().get("name").getAsString(), expectedResult); JsonObject result2 = instance.serialize(null); Assert.assertEquals(result2.getAsJsonObject().get("name").getAsString(), expectedResult); JsonObject result3 = instance.serialize(new Object()); Assert.assertEquals(result3.getAsJsonObject().get("name").getAsString(), expectedResult); JsonObject result4 = instance.serialize(new Object()); Assert.assertEquals(result4.getAsJsonObject().get("name").getAsString(),
@Test public void testMap() { Map<String, Object> map = new HashMap<String, Object>(); map.put("key1", "value1"); map.put("key2", "value2"); map.put("key3", "value3"); Map<String, Object> expectedMap = new HashMap<String, Object>(); expectedMap.put("key1", "value1"); expectedMap.put("key2", "value2"); expectedMap.put("key3", "value3"); expectedMap.put("key4", "value4"); expectedMap.put("key5", "value5"); expectedMap.put("key6", "value6"); Map<
@Test(dataProvider = "serializeDP") public void testSerialize(Object obj, Type typeOfSrc, boolean preserveType) throws Exception { String result = serializer.serialize(obj, typeOfSrc, preserveType).toString(); assertTrue(result, result.contains("\\n")); assertTrue(result, result.contains("\\n")); assertTrue(result, result.contains("\\n")); assertTrue(result, result.contains("\\n")); assertTrue(result, result.contains("\\n")); assertTrue(result, result.contains("\\n")); assertTrue(result, result.contains("\\n")); assertTrue(result, result.contains("\\n
@Test(dataProvider = "serializeDataProvider") public void serialize(Object obj, Type typeOfSrc, boolean preserveType) throws Exception { String expectedResult = "{\\n" + " \\"a\\": 1,\\n" + " \\"b\\": 2,\\n" + " \\"c\\": 3,\\n" + " \\"d\\": 4,\\n" + " \\"e\\": 5,\\n" + " \\"f\\": 6,\\n" + " \\"g\\": 7,\\n" + " \\"h\\": 8,\\n" + " \\"i\\": 9,\\n" + " \\"
@Test(expected = NullPointerException.class) public void serialize_A$Object$Type_NULL_PRESERVE_TYPE() throws Exception { MockObjectNavigatorFactory factory = new MockObjectNavigatorFactory(); JsonSerializationContextDefault target = new JsonSerializationContextDefault(factory, true, null); ObjectNavigator objNavigator = factory.create(new ObjectTypePair(null, null, true)); objNavigator.serialize(new Object(), null, true); }
@Test(dataProvider = "serializeDataProvider") public void serialize(Object obj, Type typeOfSrc, boolean preserveType, String expectedResult) { assertEquals(expectedResult, instance.serialize(obj, typeOfSrc, preserveType)); }
@Test(expected = NullPointerException.class) public void serialize_A$Object$Type_NULL() throws Exception { try { new JsonSerializationContextDefault(factory, true, null).serialize(null, null, true); } catch (NullPointerException e) { assertThat(e.getMessage(),equalTo("obj cannot be null")); throw e; } }
@Test(expected = NullPointerException.class) public void serialize_A$Object$Type_NULL() throws Exception { try { new JsonSerializationContextDefault(factory, true, null).serialize(null, null, true); } catch (NullPointerException e) { assertThat(e.getMessage(), is("Parameter type cannot be null")); throw e; } }
@Test public void testJsonNull() throws Exception { String[][] lines = new String[][] { new String[] {"a", "b", "c"}, new String[] {"d", "e", "f"}, new String[] {"g", "h", "i", "j", "k"}, new String[] {"h", "i", "j", "k"}, new String[] {"h", "i", "j", "k"}, new String[] {"h", "i", "j", "k"}, new String[] {"h", "i", "j", "k"}, new String[] {"h", "i", "j", "k"},
@Test(expected = JsonParseException.class) public void testNullArray() throws Exception { JsonPrimitive jsonPrimitive = mock(JsonPrimitive.class); when(jsonPrimitive.getAsJsonPrimitive()).thenReturn(jsonPrimitive); JsonDeserializationContextDefault parser = new JsonDeserializationContextDefault(navigatorFactory, null, objectConstructor); parser.deserialize(jsonPrimitive, null); }
@Test public void testFromJsonArray() throws Exception { String json = "[\\n" + " {\\n" + " \\"firstName\\": \\"John\\",\\n" + " \\"lastName\\": \\"Smith\\"\\n" + " },\\n" + " {\\n" + " \\"firstName\\": \\"John\\",\\n" + " \\"lastName\\": \\"Smith\\"\\n" + " },\\n" + " {\\n" + " \\"firstName\\": \\"John\\",\\n" + " \\"lastName\\": \\"Smith\\"\\n"
@Test public void testFromJsonArray() throws Exception { String json = "[\\n" + " {\\n" + " \\"a\\": [\\n" + " \\"b\\",\\n" + " \\"c\\",\\n" + " \\"d\\",\\n" + " \\"e\\",\\n" + " \\"f\\",\\n" + " \\"g\\",\\n" + " \\"h\\",\\n" + " \\"i\\",\\n" + " \\"j\\",\\n" + " \\"k\\",\\n" + " \\"l\\",\\n" + "
@Test public void testFromJsonArray() throws Exception { String json = "[\\n" + " {\\n" + " \\"firstName\\": \\"John\\",\\n" + " \\"lastName\\": \\"Smith\\"\\n" + " },\\n" + " {\\n" + " \\"firstName\\": \\"John\\",\\n" + " \\"lastName\\": \\"Smith\\"\\n" + " },\\n" + " {\\n" + " \\"firstName\\": \\"John\\",\\n" + " \\"lastName\\": \\"Smith\\"\\n"
@Test public void testFromJsonObjectArray() throws Exception { String expectedString = "[\\n" + " {\\n" + " \\"firstName\\": \\"John\\",\\n" + " \\"lastName\\": \\"Smith\\"\\n" + " },\\n" + " {\\n" + " \\"firstName\\": \\"John\\",\\n" + " \\"lastName\\": \\"Smith\\"\\n" + " },\\n" + " {\\n" + " \\"firstName\\": \\"John\\",\\n" + " \\"lastName\\": \\"Smith\\"\\n
@Test public void testFromJsonArray() throws Exception { String json = "[\\n" + " {\\n" + " \\"a\\": [\\n" + " \\"b\\",\\n" + " \\"c\\",\\n" + " \\"d\\",\\n" + " \\"e\\",\\n" + " \\"f\\",\\n" + " \\"g\\",\\n" + " \\"h\\",\\n" + " \\"i\\",\\n" + " \\"j\\",\\n" + " \\"k\\",\\n" + " \\"l\\",\\n" + "
@Test public void testGetGenericComponentType_1() throws Exception { GenericArrayTypeImpl fixture = new GenericArrayTypeImpl(new Type("java.lang.String")); Type result = fixture.getGenericComponentType(); assertNotNull(result); }
@Test public void testGetGenericComponentType() { System.out.println("getGenericComponentType"); GenericArrayTypeImpl instance = new GenericArrayTypeImpl(String.class); Type expResult = String.class; Type result = instance.getGenericComponentType(); assertEquals(expResult, result); }
@Test public void equals() { new EqualsTester() .addEqualityGroup(new Object()) .addEqualityGroup(new GenericArrayTypeImpl(String.class)) .addEqualityGroup(new GenericArrayTypeImpl(Integer.class)) .testEquals(); }
@Test public void equals() { new EqualsTester() .addEqualityGroup(new GenericArrayTypeImpl(String.class), new GenericArrayTypeImpl(String.class)) .addEqualityGroup(new GenericArrayTypeImpl(List.class)) .addEqualityGroup(new GenericArrayTypeImpl(Map.class)) .addEqualityGroup(new GenericArrayTypeImpl(Map.class)) .testEquals(); }
@Test public void equals() { new EqualsTester() .addEqualityGroup(new GenericArrayTypeImpl(String.class), new GenericArrayTypeImpl(String.class)) .addEqualityGroup(new GenericArrayTypeImpl(List.class), new GenericArrayTypeImpl(List.class)) .addEqualityGroup(new GenericArrayTypeImpl(Map.class)) .addEqualityGroup(new GenericArrayTypeImpl(Map.class)) .testEquals(); }
@Test public void equals() { new EqualsTester() .addEqualityGroup(new GenericArrayTypeImpl(String.class), new GenericArrayTypeImpl(String.class)) .addEqualityGroup(new GenericArrayTypeImpl(Integer.class), new GenericArrayTypeImpl(Integer.class)) .addEqualityGroup(new GenericArrayTypeImpl(Date.class)) .addEqualityGroup(new GenericArrayTypeImpl(Date.class)) .testEquals(); }
@Test public void equals() { new EqualsTester() .addEqualityGroup(new GenericArrayTypeImpl(String.class), new GenericArrayTypeImpl(String.class)) .addEqualityGroup(new GenericArrayTypeImpl(Integer.class)) .addEqualityGroup(new GenericArrayTypeImpl(List.class)) .addEqualityGroup(new GenericArrayTypeImpl(Map.class)) .testEquals(); }
@Test public void testLruCache() { LruCache<String, String> lruCache = new LruCache<String, String>(3); lruCache.addElement("a", "a"); lruCache.addElement("b", "b"); lruCache.addElement("c", "c"); lruCache.addElement("d", "d"); lruCache.addElement("e", "e"); assertEquals(3, lruCache.size()); assertEquals("a", lruCache.getElement("a")); assertEquals("b", lruCache.getElement("b")); assertEquals("c", lruCache.getElement("c")); assert
@Test public void testLruCache() { LruCache<String, String> cache = new LruCache<String, String>(3); cache.addElement("key1", "value1"); cache.addElement("key2", "value2"); cache.addElement("key3", "value3"); cache.addElement("key4", "value4"); assertEquals(3, cache.size()); assertEquals("value1", cache.getElement("key1")); assertEquals("value2", cache.getElement("key2")); assertEquals("value3", cache.getElement("key3")); assertEquals("value4", cache.getElement("key4")); cache.clear
@Test public void testLruCache() { LruCache<String, String> cache = new LruCache<String, String>(3); cache.addElement("a", "a"); cache.addElement("b", "b"); cache.addElement("c", "c"); assertEquals("a", cache.getElement("a")); assertEquals("b", cache.getElement("b")); assertEquals("c", cache.getElement("c")); assertEquals("d", cache.getElement("d")); cache.clear(); assertEquals("a", cache.getElement("a")); assertEquals("b", cache.getElement("b")); assertEquals("c", cache.getElement("c
@Test public void testAddElement() { LruCache<String, String> cache = new LruCache<String, String>(1); cache.addElement("a", "b"); assertEquals("b", cache.getElement("a")); cache.addElement("a", "c"); assertEquals("c", cache.getElement("a")); cache.addElement("a", "d"); assertEquals("d", cache.getElement("a")); cache.addElement("a", "e"); assertEquals("e", cache.getElement("a")); cache.addElement("a", "f"); assertEquals("f", cache.getElement("a")); cache.addElement("a",
@Test public void testAddElement() { LruCache<String, String> cache = new LruCache<String, String>(3); cache.addElement("a", "a"); cache.addElement("b", "b"); assertEquals("a", cache.getElement("a")); assertEquals("b", cache.getElement("b")); cache.addElement("c", "c"); assertEquals("c", cache.getElement("c")); cache.addElement("d", "d"); assertEquals("d", cache.getElement("d")); cache.addElement("e", "e"); assertEquals("e", cache.getElement("e")); assertEquals("e", cache.
@Test public void testGetElement() { LruCache<String, String> cache = new LruCache<String, String>(3); cache.addElement("a", "a"); cache.addElement("b", "b"); cache.addElement("c", "c"); assertEquals("a", cache.getElement("a")); assertEquals("b", cache.getElement("b")); assertEquals("c", cache.getElement("c")); }
@Test public void testGetElement() { LruCache<String, String> cache = new LruCache<String, String>(3); cache.addElement("A", "A"); cache.addElement("B", "B"); cache.addElement("C", "C"); assertEquals("A", cache.getElement("A")); assertEquals("B", cache.getElement("B")); assertEquals("C", cache.getElement("C")); assertNull(cache.getElement("D")); }
@Test public void testSize() { LruCache<String, String> cache = new LruCache<String, String>(0); assertEquals(0, cache.size()); cache.addElement("a", "a"); assertEquals(1, cache.size()); cache.addElement("b", "b"); assertEquals(2, cache.size()); cache.addElement("c", "c"); assertEquals(3, cache.size()); cache.addElement("d", "d"); assertEquals(4, cache.size()); cache.addElement("e", "e"); assertEquals(5, cache.size()); cache.addElement("f", "f"); assertEquals(6
@Test public void testSize() { LruCache<String, String> cache = new LruCache<String, String>(1); assertEquals(0, cache.size()); cache.addElement("key1", "value1"); assertEquals(1, cache.size()); cache.addElement("key2", "value2"); assertEquals(2, cache.size()); cache.addElement("key3", "value3"); assertEquals(3, cache.size()); cache.addElement("key4", "value4"); assertEquals(4, cache.size()); cache.addElement("key5", "value5"); assertEquals(5, cache.size()); cache.addElement
@Test public void testRemoveEldestEntry() { LruCache<String, String> cache = new LruCache<String, String>(3); cache.addElement("key1", "value1"); cache.addElement("key2", "value2"); cache.addElement("key3", "value3"); cache.addElement("key4", "value4"); assertEquals(3, cache.size()); assertEquals("value1", cache.getElement("key1")); assertEquals("value2", cache.getElement("key2")); assertEquals("value3", cache.getElement("key3")); assertEquals("value4", cache.removeEldestEntry(new
@Test public void testRemoveEldestEntry() { LruCache<String, String> cache = new LruCache<String, String>(3); cache.addElement("key1", "value1"); cache.addElement("key2", "value2"); cache.addElement("key3", "value3"); cache.addElement("key4", "value4"); assertEquals(3, cache.size()); assertEquals("value1", cache.getElement("key1")); assertEquals("value2", cache.getElement("key2")); assertEquals("value3", cache.getElement("key3")); assertEquals("value4", cache.removeEldestEntry(new
@Test public void testObjectNavigator() { ObjectNavigator navigator = new ObjectNavigator(this.objTypePair, this.exclusionStrategy); assertEquals(this.objTypePair, navigator.getObjectTypePair()); assertEquals(this.exclusionStrategy, navigator.getExclusionStrategy()); navigator.start(this.objTypePair); assertEquals(this.objTypePair, navigator.getObjectTypePair()); assertEquals(this.exclusionStrategy, navigator.getExclusionStrategy()); navigator.end(this.objTypePair); assertEquals(this.objTypePair, navigator.getObjectTypePair()); assertEquals(this.exclusionStrategy, navigator.getExclusionStrategy()); }
@Test public void testObjectNavigator() throws Exception { ObjectNavigator navigator = new ObjectNavigator(this.objTypePair, new ExclusionStrategy() { @Override public void start(ObjectTypePair node) { } @Override public void end(ObjectTypePair node) { } @Override public void start(ObjectTypePair node) { } @Override public void end(ObjectTypePair node) { } @Override public void start(ObjectTypePair node) { } @Override public void end(ObjectTypePair node) { } @Override public void end(ObjectTypePair node) { } @Override public void start(ObjectTypePair node) { } @Override public void end(ObjectTypePair node) { } @Override public void end(ObjectTypePair node
@Test public void testObjectNavigator() throws Exception { ObjectNavigator navigator = new ObjectNavigator(this.objTypePair, new ExclusionStrategy() { @Override public void start(ObjectTypePair node) { } @Override public void end(ObjectTypePair node) { } @Override public void start(ObjectTypePair node) { } @Override public void end(ObjectTypePair node) { } @Override public void start(ObjectTypePair node) { } @Override public void end(ObjectTypePair node) { } @Override public void end(ObjectTypePair node) { } @Override public void start(ObjectTypePair node) { } @Override public void end(ObjectTypePair node) { } @Override public void end(ObjectTypePair node
@Test public void testObjectNavigator() throws Exception { ObjectNavigator navigator = new ObjectNavigator(this.objTypePair, new ExclusionStrategy() { @Override public void start(ObjectTypePair node) { } @Override public void end(ObjectTypePair node) { } @Override public void start(ObjectTypePair node) { } @Override public void end(ObjectTypePair node) { } @Override public void start(ObjectTypePair node) { } @Override public void end(ObjectTypePair node) { } @Override public void end(ObjectTypePair node) { } @Override public void start(ObjectTypePair node) { } @Override public void end(ObjectTypePair node) { } @Override public void end(ObjectTypePair node
@Test public void testAccept() throws Exception { ObjectCursor cursor = mock(ObjectCursor.class); when(cursor.next()).thenReturn(null).thenReturn(null).thenReturn(null).thenReturn(null).thenReturn(null).thenReturn(null).thenReturn(null).thenReturn(null).thenReturn(null).thenReturn(null).thenReturn(null).thenReturn(null).thenReturn(null).thenReturn(null).thenReturn(null).thenReturn(null).thenReturn(null).thenReturn(null).thenReturn(null).thenReturn(null).thenReturn(null).thenReturn(null).thenReturn(null).thenReturn(null).
@Test public void basicTest() throws Exception { ObjectCursor cursor = mock(ObjectCursor.class); when(cursor.moveToFirst()).thenReturn(true, true, false); when(cursor.moveToFirst()).thenReturn(true, true, true); when(cursor.moveToFirst()).thenReturn(true, true, true); when(cursor.moveToFirst()).thenReturn(true, true, true); ObjectCursor cursor2 = mock(ObjectCursor.class); when(cursor.moveToFirst()).thenReturn(true, true, true); when(cursor2.moveToFirst()).thenReturn(true, true, true); when(cursor2.move
@Test public void testSkipCustomHandlers() throws Exception { ExclusionStrategy exclusionStrategy = new ExclusionStrategy() { @Override public boolean shouldSkipClass(Class<?> clazz) { return true; } @Override public boolean shouldSkipClass(Class<?> clazz) { return true; } @Override public boolean shouldSkipClass(Class<?> clazz) { return true; } @Override public boolean shouldSkipClass(Class<?> clazz) { return true; } }; ObjectNavigator objectNavigator = new ObjectNavigator(new ObjectTypePair(Integer.class, Integer.class), exclusionStrategy); objectNavigator.accept(new Visitor() { @Override public void start(ObjectTypePair node) { } @Override public void end
@Test public void testAccept() throws Exception { ObjectCursor cursor = mock(ObjectCursor.class); when(cursor.next()).thenReturn(null).thenReturn(null).thenReturn(null).thenReturn(null).thenReturn(null).thenReturn(null).thenReturn(null).thenReturn(null).thenReturn(null).thenReturn(null).thenReturn(null).thenReturn(null).thenReturn(null).thenReturn(null).thenReturn(null).thenReturn(null).thenReturn(null).thenReturn(null).thenReturn(null).thenReturn(null).thenReturn(null).thenReturn(null).thenReturn(null).thenReturn(null).
@Test public void testAccept() { ObjectCursor cursor = mock(ObjectCursor.class); when(cursor.next()).thenReturn(null).thenReturn(null).thenReturn(null).thenReturn(null).thenReturn(null).thenReturn(null).thenReturn(null).thenReturn(null).thenReturn(null).thenReturn(null).thenReturn(null).thenReturn(null).thenReturn(null).thenReturn(null).thenReturn(null).thenReturn(null).thenReturn(null).thenReturn(null).thenReturn(null).thenReturn(null).thenReturn(null).thenReturn(null).thenReturn(null).thenReturn(null).thenReturn
@Test public void testGenerateNonExecutableJson() { GsonBuilder builder = new GsonBuilder(); builder.addTypeAdapter(String.class, new JsonSerializer<String>() { @Override public String serialize(String value) { return value; } }); builder.setVersion(0); builder.generateNonExecutableJson().add(new JsonSerializer<String>() { @Override public String serialize(String value) { return value; } @Override public String toJson(String value) { return null; } }); JsonSerializer<String> serializer = builder.create().registerTypeAdapter(String.class, new JsonSerializer<String>() { @Override public String toJson(String value) { return value; } }); String
@Test public void testGenerateNonExecutableJson() { GsonBuilder builder = new GsonBuilder(); builder.generateNonExecutableJson(); String json = "{\\n" + " \\"a\\": 1,\\n" + " \\"b\\": 2,\\n" + " \\"c\\": 3,\\n" + " \\"d\\": 4,\\n" + " \\"e\\": 5,\\n" + " \\"f\\": 6,\\n" + " \\"g\\": 7,\\n" + " \\"h\\": 8,\\n" + " \\"i\\": 9,\\n" + " \\"j\\":
@Test public void testGenerateNonExecutableJson() { GsonBuilder builder = new GsonBuilder(); builder.generateNonExecutableJson(); String json = "{\\n" + " \\"a\\": 1,\\n" + " \\"b\\": 2,\\n" + " \\"c\\": 3,\\n" + " \\"d\\": 4,\\n" + " \\"e\\": 5,\\n" + " \\"f\\": 6,\\n" + " \\"g\\": 7,\\n" + " \\"h\\": 8,\\n" + " \\"i\\": 9,\\n" + " \\"j\\":
@Test public void testLongSerializationPolicy() { Set<LongSerializationPolicy> longSerializationPolicies = new HashSet<>(); longSerializationPolicies.add(LongSerializationPolicy.READ_WRITE); longSerializationPolicies.add(LongSerializationPolicy.READ_WRITE); GsonBuilder builder = new GsonBuilder(); builder.setLongSerializationPolicy(longSerializationPolicies); testRoundTrip(builder); }
@Test public void testLongSerializationPolicy() { Set<LongSerializationPolicy> longSerializationPolicies = new HashSet<>(); longSerializationPolicies.add(LongSerializationPolicy.STRICT); GsonBuilder builder = new GsonBuilder(); builder.setLongSerializationPolicy(longSerializationPolicies); assertEquals(longSerializationPolicies, builder.longSerializationPolicy); builder.setLongSerializationPolicy(null); assertEquals(null, builder.longSerializationPolicy); builder.setLongSerializationPolicy(LongSerializationPolicy.STRICT); assertEquals(LongSerializationPolicy.STRICT, builder.longSerializationPolicy); builder.setLongSerializationPolicy(LongSerializationPolicy.STRICT); assertEquals(LongSerializationPolicy.STRICT, builder.longSerializationPolicy); }
@Test public void testLongSerializationPolicy() { Set<LongSerializationPolicy> longSerializationPolicies = new HashSet<>(); longSerializationPolicies.add(LongSerializationPolicy.READ_WRITE); longSerializationPolicies.add(LongSerializationPolicy.READ_WRITE); GsonBuilder builder = new GsonBuilder(); builder.setLongSerializationPolicy(longSerializationPolicies); testRoundTrip(builder); }
@Test public void testCustomFieldNamingPolicy() { FieldNamingPolicy customNamingConvention = new FieldNamingPolicy() { @Override public FieldNamingPolicy getFieldNamingPolicy() { return new FieldNamingPolicy() { @Override public boolean isSupported() { return true; } @Override public boolean isSupported() { return false; } @Override public boolean isSupported2() { return false; } @Override public boolean isSupported3() { return false; } @Override public boolean isSupported4() { return false; } @Override public boolean isSupported5() { return false; } @Override public boolean isSupported6() { return false; } @Override public boolean isSupported7() { return false; } @Override public boolean
@Test public void testCustomFieldNamingPolicy() { FieldNamingPolicy customNamingPolicy = new FieldNamingPolicy() { @Override public Class<? extends Annotation> annotationType() { return null; } @Override public FieldNamingPolicy getFieldNamingPolicy() { return customNamingPolicy; } }; Mockito.when(customNamingPolicy.getFieldNamingPolicy()).thenReturn(customNamingPolicy); GsonBuilder builder = new GsonBuilder(); builder.setFieldNamingPolicy(customNamingPolicy); FieldNamingStrategy strategy = builder.build(); assertEquals(customNamingPolicy, strategy.getFieldNamingPolicy()); }
@Test public void testFieldNamingStrategy() { test(new GsonBuilder() .addFieldNamingStrategy(new FieldNamingStrategy2(Optional.empty(), Optional.empty())) .addFieldNamingStrategy(new FieldNamingStrategy2(Optional.empty(), Optional.empty())) .addFieldNamingStrategy(new FieldNamingStrategy2(Optional.empty(), Optional.empty())) .addFieldNamingStrategy(new FieldNamingStrategy2(Optional.empty(), Optional.empty())) .addFieldNamingStrategy(new FieldNamingStrategy2(Optional.empty(), Optional.empty())) .addFieldNamingStrategy(new FieldNamingStrategy2(Optional.empty(), Optional.empty())) .build()); }
@Test public void testCustomFieldNaming() { FieldNamingStrategy2 fieldNamingStrategy = new FieldNamingStrategy2Adapter(fieldNamingStrategy) .addFieldNamingStrategy(new FieldNamingStrategy2Adapter(fieldNamingStrategy)) .addFieldNamingStrategy(new FieldNamingStrategy2Adapter(fieldNamingStrategy)) .addFieldNamingStrategy(new FieldNamingStrategy2Adapter(fieldNamingStrategy)) .addFieldNamingStrategy(new FieldNamingStrategy2Adapter(fieldNamingStrategy)) .addFieldNamingStrategy(new FieldNamingStrategy2Adapter(fieldNamingStrategy)) .addFieldNamingStrategy(new FieldNamingStrategy2Adapter(fieldNamingStrategy)) .addFieldNamingStrategy(new FieldNamingStrategy2Adapter(fieldNamingStrategy))
@Test public void testNullFieldNamingStrategy() { FieldNamingStrategy2 fieldNamingStrategy = null; GsonBuilder builder = new GsonBuilder(); builder.setFieldNamingStrategy(fieldNamingStrategy); testRoundTrip(builder); }
@Test public void testFieldNamingPolicy() { FieldNamingStrategy2 fieldNamingStrategy = new FieldNamingStrategy2() { @Override public Class<? extends Annotation> annotationType() { return null; } @Override public Class<? extends Annotation> annotationType() { return null; } @Override public Class<? extends Annotation> annotationType() { return null; } }; GsonBuilder builder = new GsonBuilder(); builder.setFieldNamingStrategy(fieldNamingStrategy); FieldNamingStrategy2 fieldNamingStrategy2 = new FieldNamingStrategy2() { @Override public Class<? extends Annotation> annotationType() { return null; } @Override public Class<? extends Annotation> annotationType() { return null; } @Override public Class<? extends Annotation> annotationType() {
@Test public void testFieldNamingStrategy() { FieldNamingStrategy2 fieldNamingStrategy = new FieldNamingStrategy2() { @Override public Class<? extends Annotation> annotationType() { return null; } @Override public Class<? extends Annotation> annotationType() { return null; } @Override public boolean supports(Class<?> clazz) { return false; } @Override public boolean include(Class<?> clazz) { return false; } @Override public boolean include(Class<?> clazz) { return false; } @Override public Class<? extends Annotation> annotationType() { return null; } @Override public boolean include(Class<?> clazz) { return false; } @Override public boolean include(Class<?> clazz) { return false
@Test public void testIsValidSince() throws Exception { Method method = getClass().getDeclaredMethod("isValidSince",Since.class); method.setAccessible(true);Since since = newSince(0, 0); Assert.assertFalse(method.invoke(null, since)); Assert.assertFalse(method.invoke(null, since)); Assert.assertFalse(method.invoke(null, since)); Assert.assertFalse(method.invoke(null, since)); Assert.assertFalse(method.invoke(null, null));Since until = newSince(0, 1); Assert.assertTrue(method.invoke(null, until)); Assert.assertTrue(method.invoke(null, until)); Assert.assert
@Test public void testHasModifier() { FieldAttributes f = new FieldAttributes(Foo.class, Foo.class.getDeclaredField("bar")); assertTrue(f.hasModifier(Modifier.PUBLIC)); assertTrue(f.hasModifier(Modifier.PRIVATE)); assertFalse(f.hasModifier(Modifier.PUBLIC)); }
@Test public void testHasModifier() { FieldAttributes attrs = new FieldAttributes(Foo.class, Foo.class.getDeclaredField("bar")); assertTrue(attrs.hasModifier(Modifier.PUBLIC)); assertTrue(attrs.hasModifier(Modifier.PRIVATE)); assertFalse(attrs.hasModifier(Modifier.PUBLIC)); }
@Test public void testJsonPrimitive() throws Exception { JsonPrimitive primitive = new JsonPrimitive(null); Assert.assertEquals("null", primitive.getAsString()); Assert.assertEquals(null, primitive.getAsBoolean()); Assert.assertEquals(null, primitive.getAsByte()); Assert.assertEquals(null, primitive.getAsShort()); Assert.assertEquals(null, primitive.getAsInteger()); Assert.assertEquals(null, primitive.getAsLong()); Assert.assertEquals(null, primitive.getAsCharacter()); Assert.assertEquals(null, primitive.toString()); primitive = new JsonPrimitive("string"); Assert.assertEquals("string", primitive.getAsString()); Assert.assertEquals("string
@Test public void testSetValue() throws Exception { String s = "Hello"; JsonPrimitive p = new JsonPrimitive(s); p.setValue(s); Assert.assertEquals(s, p.getAsString()); Assert.assertEquals(s, p.getAsBoolean()); Assert.assertEquals(s, p.getAsByte()); Assert.assertEquals(s, p.getAsShort()); Assert.assertEquals(s, p.getAsInteger()); Assert.assertEquals(s, p.getAsLong()); Assert.assertEquals(s, p.getAsCharacter()); Assert.assertEquals(s, p.toString()); }
@Test public void testIsNumber() { assertTrue(new JsonPrimitive("0").isNumber()); assertTrue(new JsonPrimitive("1").isNumber()); assertTrue(new JsonPrimitive("2").isNumber()); assertTrue(new JsonPrimitive("3").isNumber()); assertTrue(new JsonPrimitive("4").isNumber()); assertTrue(new JsonPrimitive("5").isNumber()); assertTrue(new JsonPrimitive("6").isNumber()); assertTrue(new JsonPrimitive("7").isNumber()); assertTrue(new JsonPrimitive("8").isNumber()); assertTrue(new JsonPrimitive("9").isNumber()); assertTrue(new JsonPrimitive("10").isNumber()); assertTrue(new JsonPrimitive("
@Test public void testIsNumber() { assertTrue(new JsonPrimitive("0").isNumber()); assertTrue(new JsonPrimitive("1").isNumber()); assertTrue(new JsonPrimitive("2").isNumber()); assertTrue(new JsonPrimitive("3").isNumber()); assertTrue(new JsonPrimitive("4").isNumber()); assertTrue(new JsonPrimitive("5").isNumber()); assertTrue(new JsonPrimitive("6").isNumber()); assertTrue(new JsonPrimitive("7").isNumber()); assertTrue(new JsonPrimitive("8").isNumber()); assertTrue(new JsonPrimitive("9").isNumber()); assertTrue(new JsonPrimitive("10").isNumber()); assertTrue(new JsonPrimitive("
@Test public void stringToNumber() { Number number = stringToNumber("123"); Assert.assertEquals(123L, number.longValue()); Assert.assertEquals(123.0, number.getAsDouble(), 0.0); Assert.assertEquals(123.0, number.getAsBoolean(), 0.0); Assert.assertEquals(123.0, number.getAsByte(), 0.0); Assert.assertEquals(123.0, number.getAsShort(), 0.0); Assert.assertEquals(123.0, number.getAsInteger(), 0.0); Assert.assertEquals(123.0, number.getAsLong(), 0.0); Assert.assertEquals(
@Test public void testGetAsString() { String s = "1\\n2\\n3\\n4"; String expected = "1\\n2\\n3\\n4"; assertEquals(expected, new JsonPrimitive(s).getAsString()); s = "1\\n2\\n3\\n4"; assertEquals(expected, new JsonPrimitive(s).getAsString()); s = "1\\n2\\n3\\n4"; assertEquals(expected, new JsonPrimitive(s).getAsString()); s = "1\\n2\\n3\\n4"; assertEquals(expected, new JsonPrimitive(s).getAsString()); s = "1\\n2\\n3\\
@Test public void testGetAsString() { String s = "1\\n2\\n3\\n4"; String expected = "1\\n2\\n3\\n4"; String actual = JsonPrimitive.stringToNumber(s).getAsString(); assertEquals(expected, actual); s = "1\\n2\\n3\\n4"; expected = "1\\n2\\n3\\n4"; actual = JsonPrimitive.stringToNumber(s).getAsString(); assertEquals(expected, actual); s = "1\\n2\\n3\\n4"; expected = "1\\n2\\n3\\n4"; actual = JsonPrimitive.stringToNumber(s
@Test public void testGetAsString() { assertEquals("1", new JsonPrimitive("1").getAsString()); assertEquals("1.1", new JsonPrimitive("1.1").getAsString()); assertEquals("1.1", new JsonPrimitive("1.1").getAsString()); assertEquals("1.1", new JsonPrimitive("1.1").getAsString()); assertEquals("1.1", new JsonPrimitive("1.1").getAsString()); assertEquals("1.1", new JsonPrimitive("1.1").getAsString()); assertEquals("1.1", new JsonPrimitive("1.1").getAsString()); assertEquals("1.1", new JsonPrimitive("1.1").getAsString
@Test public void testGetAsString() { JsonPrimitive bool = new JsonPrimitive(true); assertEquals("true", bool.getAsString()); JsonPrimitive bool2 = new JsonPrimitive("true"); assertEquals("true", bool2.getAsString()); JsonPrimitive bool3 = new JsonPrimitive("true"); assertEquals("true", bool3.getAsString()); JsonPrimitive bool4 = new JsonPrimitive("true"); assertEquals("true", bool4.getAsString()); JsonPrimitive bool5 = new JsonPrimitive("true"); assertEquals("true", bool5.getAsString()); JsonPrimitive bool6 = new JsonPrimitive("false"); assertEquals("false", bool6.getAsString()); JsonPrimitive bool7 = new JsonPrimitive("
@Test public void testAsString() { JsonPrimitive bool = new JsonPrimitive(true); assertEquals("true", bool.getAsString()); JsonPrimitive bool2 = new JsonPrimitive("true"); assertEquals("true", bool2.getAsString()); JsonPrimitive bool3 = new JsonPrimitive("true"); assertEquals("true", bool3.getAsString()); JsonPrimitive bool4 = new JsonPrimitive("true"); assertEquals("true", bool4.getAsString()); JsonPrimitive bool5 = new JsonPrimitive("true"); assertEquals("true", bool5.getAsString()); JsonPrimitive bool6 = new JsonPrimitive("true"); assertEquals("true", bool6.getAsString()); JsonPrimitive bool7 = new JsonPrimitive("true
@Test public void testGetAsString() { String s = "1\\n2\\n3\\n4"; String s2 = "1\\n2\\n3\\n4"; String s3 = "1\\n2\\n3\\n4"; String s4 = "1\\n2\\n3\\n4"; String s5 = "1\\n2\\n3\\n4"; String s6 = "1\\n2\\n3\\n4"; String s7 = "1\\n2\\n3\\n4"; String s8 = "1\\n2\\n3\\n4"; String s9 = "1\\n2\\n3
@Test public void testGetAsDouble() { String[][] lines=new String[][]{ {"1.1", "2.1"}, {"1.1", "2.1"}, {"1.1", "2.1"}, {"1.1", "2.1"}, {"1.1", "2.1"}, {"1.1", "2.1"}, {"1.1", "2.1"}, {"1.1", "2.1"}, {"1.1", "2.1"}, {"1.1", "2.1"}, {"1.1", "2.1"}, {"1.1", "
@Test public void testDoubleLine() throws JsonParseException, JsonMappingException, IOException { String[][] lines = new String[][] { { "1.1", "1.1" }, { "1.1", "1.1" }, { "1.1", "1.1" }, { "1.1", "1.1" }, { "1.1", "1.1" }, { "1.1", "1.1" }, { "1.1", "1.1" }, { "1.1", "1.1" }, { "1.1", "1.1" }, { "1.1", "1.1
@Test public void testGetAsBigDecimal() { String[][] lines = new String[][] { new String[] {"1.1", "2.2", "3.3"}, new String[] {"1.1", "2.2", "3.3"}, new String[] {"1.1", "2.2", "3.3"} }; BigDecimal[] expected = new BigDecimal[] { new BigDecimal("1.1"), new BigDecimal("2.2"), new BigDecimal("3.3"), }; for (int i=0; i<lines.length; i++) { assertEquals(expected[i], lines[i].getAsBigDecimal()); } }
@Test public void testGetAsBigDecimal() { assertEquals(new BigDecimal("1.234"), new JsonPrimitive("1.234").getAsBigDecimal()); assertEquals(new BigDecimal("1.234"), new JsonPrimitive("1.234").getAsBigDecimal()); assertEquals(new BigDecimal("1.234"), new JsonPrimitive("1.234").getAsBigDecimal()); assertEquals(new BigDecimal("1.234"), new JsonPrimitive("1.234").getAsBigDecimal()); assertEquals(new BigDecimal("1.234"), new JsonPrimitive("1.234").getAsBigDecimal()); assertEquals(new BigDecimal("1.234"), new JsonPrimitive("1.234").getAsBigDecimal());
@Test public void testGetInt() { String[][] lines = new String[][] { new String[]{"1", "2"}, new String[]{"3", "4"}, new String[]{"5", "6"}, new String[]{"7", "8"}, new String[]{"9", "10"}, }; for (int i = 0; i < lines.length; i++) { int expected = i; assertEquals(expected, lines[i].getAsInt()); } }
@Test public void testGetAsInt() { assertEquals(1, JsonPrimitive.parseInt("1").getAsInt()); assertEquals(2, JsonPrimitive.parseInt("2").getAsInt()); assertEquals(3, JsonPrimitive.parseInt("3").getAsInt()); assertEquals(4, JsonPrimitive.parseInt("4").getAsInt()); assertEquals(5, JsonPrimitive.parseInt("5").getAsInt()); assertEquals(6, JsonPrimitive.parseInt("6").getAsInt()); assertEquals(7, JsonPrimitive.parseInt("7").getAsInt()); assertEquals(8, JsonPrimitive.parseInt("8").getAsInt()); assertEquals(9, JsonPrimitive.parseInt("
@Test public void testGetAsObject() { String[][] lines=new String[][] { {"1", "2", "3"}, {"1", "2", "3"}, {"1", "2", "3"}, {"1", "2", "3"}, {"1", "2", "3"}, {"1", "2", "3"}, {"1", "2", "3"}, {"1", "2", "3"}, {"1", "2", "3"}, {"1", "2", "3"}, {"1", "2", "3"}, {"1", "2", "3"}, {"1", "2",
@Test public void testGetAsObject() throws JsonProcessingException { String json = "{\\n" + " \\"a\\": 1,\\n" + " \\"b\\": 2,\\n" + " \\"c\\": 3,\\n" + " \\"d\\": 4,\\n" + " \\"e\\": 5,\\n" + " \\"f\\": 6,\\n" + " \\"g\\": 7,\\n" + " \\"h\\": 10,\\n" + " \\"i\\": 11,\\n" + " \\"j\\": 12,\\n" + " \\"k\\": 13
@Test public void testGetAsObject() { String[][] data = new String[][] { new String[] {"a", "b", "c"}, new String[] {"a", "b", "c"}, new String[] {"a", "b", "c"}, new String[] {"a", "b", "c"}, new String[] {"a", "b", "c"}, new String[] {"a", "b", "c"}, new String[] {"a", "b", "c"}, new String[] {"a", "b", "c"}, new String[] {"a", "b", "c"}, new String[] {"a", "b",
@Test public void primitiveOrString() { String s = "Hello, world!"; JsonPrimitive p = new JsonPrimitive("Hello, world!"); boolean b = p.isPrimitiveOrString(s); System.out.println(b); Assert.assertTrue(b); Assert.assertEquals(s, p.getAsString()); Assert.assertEquals(b, p.getAsBoolean()); Assert.assertEquals(b, p.getAsByte()); Assert.assertEquals(b, p.getAsShort()); Assert.assertEquals(b, p.getAsInteger()); Assert.assertEquals(b, p.getAsByte()); Assert.assertEquals(b, p.getAsCharacter());
@Test public void testLongSerializationPolicy() { String[] lines = new String[]{ " longSerializationPolicy(" + LongSerializationPolicy.Strategy.EOL + "1" + LongSerializationPolicy.Strategy.EOL + "2" + LongSerializationPolicy.Strategy.EOL + "3" + LongSerializationPolicy.Strategy.EOL + "4" + LongSerializationPolicy.Strategy.EOL + "5" + LongSerializationPolicy.Strategy.EOL + "6" + LongSerializationPolicy.Strategy.EOL + "7" + LongSerializationPolicy.Strategy.EOL + "8" + LongSerializationPolicy.Strategy.EOL + "9" + LongSerializationPolicy.Strategy.EOL + "10" + LongSerializationPolicy.
@Test public void testLongSerializationPolicy() { strategy = LongSerializationPolicy.Strategy.LINE; assertEquals(Long.valueOf(1), strategy.serialize(1L).getAsLong()); assertEquals(Long.valueOf(2), strategy.serialize(2L).getAsLong()); assertEquals(Long.valueOf(3), strategy.serialize(3L).getAsLong()); assertEquals(Long.valueOf(4), strategy.serialize(4L).getAsLong()); assertEquals(Long.valueOf(5), strategy.serialize(5L).getAsLong()); assertEquals(Long.valueOf(6), strategy.serialize(6L).getAsLong()); assertEquals
@Test public void roundtrip() { assertJsonEquals(new Long(1), new LongSerializationPolicy.Strategy(LongSerializationPolicy.Strategy.LINE).serialize(1L).toString()); assertJsonEquals(new Long(2), new LongSerializationPolicy.Strategy(LongSerializationPolicy.Strategy.LINE).serialize(2L).toString()); assertJsonEquals(new Long(3), new LongSerializationPolicy.Strategy(LongSerializationPolicy.Strategy.LINE).serialize(3L).toString()); assertJsonEquals(new Long(4), new LongSerializationPolicy.Strategy(LongSerializationPolicy.Strategy.LINE).serialize(4L).toString()); assertJsonEquals(new Long(5), new LongSerializationPolicy.Strategy(
@Test public void roundtrip() { assertJsonEquals(LongSerializationPolicy.Strategy.ROUNDtrip, LongSerializationPolicy.Strategy.ROUNDtrip.serialize(1L)); assertJsonEquals(LongSerializationPolicy.Strategy.ROUNDtrip, LongSerializationPolicy.Strategy.ROUNDtrip.serialize(2L)); assertJsonEquals(LongSerializationPolicy.Strategy.ROUNDtrip, LongSerializationPolicy.Strategy.ROUNDtrip.serialize(3L)); assertJsonEquals(LongSerializationPolicy.Strategy.ROUNDtrip, LongSerializationPolicy.Strategy.ROUNDtrip.serialize(4L)); assertJsonEquals(LongSerializationPolicy.Strategy.ROUNDtrip, LongSerializationPolicy.Strategy.ROUNDtrip.serialize(5L)); assertJsonEquals(Long
@Test public void testClassSkip() { boolean result = instance.shouldSkipClass(Object.class); Assert.assertTrue(result); }
@Test public void testClassSkip() { Assert.assertFalse(classA.shouldSkipClass(String.class)); Assert.assertFalse(classB.shouldSkipClass(String.class)); Assert.assertFalse(classC.shouldSkipClass(String.class)); Assert.assertFalse(classD.shouldSkipClass(String.class)); Assert.assertFalse(classE.shouldSkipClass(String.class)); Assert.assertFalse(classF.shouldSkipClass(String.class)); Assert.assertFalse(classA.shouldSkipClass(String.class)); Assert.assertFalse(classB.shouldSkipClass(String.class)); Assert.assertFalse(classC.shouldSkipClass
@Test public void testIsJsonArray() { JsonArray array = new JsonArray(); assertTrue(array.isJsonArray()); array.setAsJsonArray(true); assertTrue(array.isJsonArray()); array.setAsJsonArray(false); assertFalse(array.isJsonArray()); }
@Test public void testIsJsonArray() throws Exception { assertTrue("isJsonArray()", new JsonArray().isJsonArray()); assertTrue("isJsonArray()", new JsonPrimitive().isJsonArray()); assertTrue("isJsonArray()", new JsonNull().isJsonArray()); assertTrue("isJsonArray()", new JsonPrimitive().isJsonArray()); assertTrue("isJsonArray()", new JsonPrimitive().isJsonArray()); assertTrue("isJsonArray()", new JsonPrimitive().isJsonArray()); assertFalse("isJsonArray()", new JsonPrimitive().isJsonArray()); assertFalse("isJsonArray()", new JsonPrimitive().isJsonArray()); assertFalse("isJsonArray()", new
@Test public void testIsJsonObject() { JsonObject obj = new JsonObject(); assertTrue(obj.isJsonObject()); obj.setAsJsonArray(new JsonArray()); assertTrue(obj.isJsonObject()); obj.setAsJsonNull(new JsonNull()); assertFalse(obj.isJsonObject()); }
@Test public void testIsJsonObject() { JsonObject obj = new JsonObject() { @Override public void put(String key, String value) { } @Override public void put(String key, String value) { } }; assertTrue(obj.isJsonObject()); JsonObject obj2 = new JsonObject() { @Override public void put(String key, String value) { } @Override public void put(String key, String value) { } }; assertTrue(obj2.isJsonObject()); JsonObject obj3 = new JsonObject() { @Override public void put(String key, String value) { } @Override public void put(String key, String value) { } }; assertFalse(obj3.isJsonObject());
@Test public void testIsJsonPrimitive() { assertFalse(new Gson().toJsonPrimitive(null).isJsonPrimitive()); assertFalse(new Gson().toJsonPrimitive(JsonPrimitive.NULL).isJsonPrimitive()); assertTrue(new Gson().toJsonPrimitive(JsonPrimitive.STRING).isJsonPrimitive()); assertTrue(new Gson().toJsonPrimitive(JsonNull.INSTANCE).isJsonPrimitive()); }
@Test public void testIsJsonPrimitive() { assertTrue(new JsonPrimitive().isJsonPrimitive()); assertFalse(new JsonPrimitive().isJsonPrimitive()); }
@Test public void testIsJsonNull() { assertFalse(new JsonNull().isJsonNull()); }
@Test public void testIsJsonNull() { assertTrue("isJsonNull()", new JsonNull().isJsonNull()); assertFalse("isJsonNull()", new JsonArray().isJsonNull()); assertFalse("isJsonNull()", new JsonPrimitive().isJsonNull()); assertFalse("isJsonNull()", new JsonPrimitive().isJsonNull()); }
@Test public void testGetAsJsonArray() { JsonArray array = new JsonArray(); try { array.getAsJsonArray(); fail("Expected IllegalStateException"); } catch (IllegalStateException e) { } try { array.getAsJsonArray(); fail("Expected IllegalStateException"); } catch (IllegalStateException e) { } try { array.getAsJsonArray(); fail("Expected IllegalStateException"); } catch (IllegalStateException e) { } try { array.getAsJsonArray(); fail("Expected IllegalStateException"); } catch (IllegalStateException e) { } try { array.getAsJsonArray(); fail("Expected IllegalStateException"); } catch (IllegalStateException e) { } try { array.getAsJsonArray(); fail("Expected IllegalStateException"); } catch
@Test public void testGetAsJsonArray() throws Exception { JsonPrimitive jsonPrimitive = new JsonPrimitive(); JsonNull jsonNull = new JsonNull(); JsonArray array = new JsonArray(); array.setJsonPrimitive(jsonPrimitive); array.setJsonNull(jsonNull); array.setAsJsonArray(jsonArray); assertEquals(jsonPrimitive, array.getAsJsonArray().getJsonPrimitive()); assertEquals(jsonNull, array.getAsJsonArray().getJsonNull()); try { array.getAsJsonArray(); fail("Expected IllegalStateException"); } catch (IllegalStateException e) { } try { array.getAsJsonArray(); fail("Expected IllegalStateException"); } catch (IllegalStateException e) { } }
@Test public void testGetAsJsonArray() { JsonArray array = new JsonArray(); try { array.getAsJsonArray(); fail("Expected IllegalStateException"); } catch (IllegalStateException e) { } try { array.getAsJsonArray(); fail("Expected IllegalStateException"); } catch (IllegalStateException e) { } try { array.getAsJsonArray(); fail("Expected IllegalStateException"); } catch (IllegalStateException e) { } try { array.getAsJsonArray(); fail("Expected IllegalStateException"); } catch (IllegalStateException e) { } try { array.getAsJsonArray(); fail("Expected IllegalStateException"); } catch (IllegalStateException e) { } try { array.getAsJsonArray(); fail("Expected IllegalStateException"); } catch
@Test public void testGetAsJsonPrimitive() throws Exception { JsonPrimitive primitive = new JsonPrimitive() { @Override public boolean isJsonPrimitive() { return true; } @Override public JsonPrimitive getAsJsonPrimitive() { return primitive; } }; JsonPrimitive result = primitive.getAsJsonPrimitive(); assertEquals(primitive, result); }
@Test public void testGetAsJsonPrimitive() throws Exception { JsonPrimitive primitive = new JsonPrimitive() { @Override public boolean isJsonPrimitive() { return true; } @Override public boolean isJsonNull() { return false; } @Override public JsonPrimitive getAsJsonPrimitive() { return primitive; } }; JsonPrimitive result = new JsonPrimitive() { @Override public boolean isJsonPrimitive() { return true; } @Override public JsonNull getAsJsonNull() { return null; } }; try { result.getAsJsonPrimitive(); fail("Expected IllegalStateException"); } catch (IllegalStateException e) { } try { result.getAsJsonPrimitive(); fail("Expected IllegalStateException"); } catch (IllegalStateException e) { } try { result
@Test public void testGetAsJsonPrimitive() { JsonPrimitive primitive = new JsonPrimitive(); try { primitive.getAsJsonPrimitive(); fail("Expected IllegalStateException"); } catch (IllegalStateException e) { } try { primitive.getAsJsonPrimitive(); fail("Expected IllegalStateException"); } catch (IllegalStateException e) { } try { primitive.getAsJsonPrimitive(); fail("Expected IllegalStateException"); } catch (IllegalStateException e) { } try { primitive.getAsJsonPrimitive(); fail("Expected IllegalStateException"); } catch (IllegalStateException e) { } try { primitive.getAsJsonPrimitive(); fail("Expected IllegalStateException"); } catch (IllegalStateException e) { } }
@Test public void testObjectTypePair() { Object obj = new Object(); ObjectTypePair pair = new ObjectTypePair(obj, ObjectType.STRING, true); assertEquals(ObjectType.STRING, pair.getObject()); assertEquals(ObjectType.STRING, pair.getType()); assertTrue(pair.isPreserveType()); }
@Test(dataProvider = "types") public void testObjectTypePair(Object obj, Type type, boolean preserveType) { ObjectTypePair pair = new ObjectTypePair(obj, type, preserveType); assertEquals(pair.obj, obj); assertEquals(pair.type, type); assertEquals(pair.preserveType, preserveType); }
@Test(dataProvider = "types") public void testObjectTypePair(Object obj, Type type, boolean preserveType) { ObjectTypePair pair = new ObjectTypePair(obj, type, preserveType); assertEquals(pair.getObject(), obj); assertEquals(pair.getType(), type); assertEquals(pair.isPreserveType(), preserveType); }
@Test(dataProvider = "types") public void testObjectTypePair(Object obj, Type type, boolean preserveType) { ObjectTypePair pair = new ObjectTypePair(obj, type, preserveType); assertEquals(pair.getObject(), obj); assertEquals(pair.getType(), type); assertEquals(pair.isPreserveType(), preserveType); }
@Test(expected = java.lang.NullPointerException.class) public void null_getObject() { final ObjectTypePair pair = new ObjectTypePair(null, ObjectType.STRING, true); pair.getObject(); }
@Test(expected = java.lang.NullPointerException.class) public void getObject_A$() throws Exception { ObjectTypePair target = new ObjectTypePair(null, null, false); Object actual = target.getObject(); }
@Test public void simple_type() { final ObjectTypePair pair = new ObjectTypePair("Hello", String.class, true); assertEquals(pair.getType(), String.class); }
@Test public void simple_types() { final ObjectTypePair pair = new ObjectTypePair("Hello", String.class, true); assertEquals(pair.getType(), String.class); }
@Test public void string_representation() { var cp = new ObjectTypePair("Hello", String.class, true); assertEquals("preserveType: true, type: java.lang.String, obj: Hello", cp.toString()); }
@Test public void toString_returns_expected_string() { ObjectTypePair pair = new ObjectTypePair("Hello", String.class, true); assertEquals("preserveType: false, type: java.lang.String, obj: Hello", pair.toString()); }
@Test public void simpleParameterizedTypeHandlerMap() { StringCaseHandlerMap<String> stringCaseHandlerMap = new StringCaseHandlerMap(); ObjectTypePair stringType = new ObjectTypePair("Hello", String.class, true); stringCaseHandlerMap.addHandlerFor(stringType, stringType); StringCaseHandlerMap<String> stringCaseHandlerMap2 = new StringCaseHandlerMap(); stringCaseHandlerMap2.addHandlerFor(stringType, stringType); stringCaseHandlerMap2.addHandlerFor(stringType, stringType); StringCaseHandlerMap<String> stringCaseHandlerMap3 = new StringCaseHandlerMap(); stringCaseHandlerMap3.addHandlerFor(stringType, stringType); string
@Test public void matchingHandler() { List<TestType> types = new ArrayList<TestType>(); types.add(new TestType("Foo", "Bar")); types.add(new TestType("Bar", "Baz")); List<TestType> types2 = new ArrayList<TestType>(); types2.add(new TestType("Foo", "Bar")); types2.add(new TestType("Bar", "Baz")); types2.add(new TestType("Bar", "Baz")); List<TestType> types3 = new ArrayList<TestType>(); types3.add(new TestType("Bar", "Baz")); types3
@Test public void getMatchingHandler() { Map<ParameterizedTypeHandlerMap<String>> handlerMap = new HashMap<ParameterizedTypeHandlerMap<String>>(); ObjectTypePair p1 = new ObjectTypePair("aaa", String.class, true); ObjectTypePair p2 = new ObjectTypePair("bbb", String.class, true); ObjectTypePair p3 = new ObjectTypePair("ccc", String.class, true); handlerMap.put(p1, p2); handlerMap.put(p2, p3); Pair<String, ObjectTypePair> matchingHandler = p1.getMatchingHandler(handlerMap); assertEquals(p1, matchingHandler.first); assertEquals(p2, matchingHandler.second
@Test public void matchingHandler() { List<TestType> types = new ArrayList<TestType>(); types.add(new TestType("A", "B")); types.add(new TestType("C", "D")); types.add(new TestType("E", "F")); types.add(new TestType("G", "H")); List<TestType> types2 = new ArrayList<TestType>(); types2.add(new TestType("A", "B")); types2.add(new TestType("C", "D")); types2.add(new TestType("E", "F")); List<TestType> types3 = new ArrayList
@Test public void matchingHandler() { List<TestType> types = new ArrayList<TestType>(); types.add(new TestType("A", "B")); types.add(new TestType("C", "D")); types.add(new TestType("E", "F")); List<TestType> types2 = new ArrayList<TestType>(); types2.add(new TestType("A", "B")); types2.add(new TestType("C", "D")); types2.add(new TestType("E", "F")); List<TestType> types3 = new ArrayList<TestType>(); types3.add(new TestType("
@Test public void testAddProperty() { m.addProperty("name", "value"); m.addProperty("name2", "value2"); m.addProperty("name3", "value3"); m.addProperty("name4", "value4"); m.addProperty("name5", "value5"); m.addProperty("name6", "value6"); Assert.assertEquals("{\\"name\\":\\"value\\",\\"name2\\":\\"value2\\",\\"name3\\":\\"value3\\",\\"name4\\":\\"value4\\",\\"name5\\":\\"value5\\",\\"name6\\":\\"value6\\"}", m.toString());
@Test public void testAdd() { final JsonElement value = new Gson().fromJson("{\\"value\\":\\"test\\"}", JsonElement.class); mElement.add("value", value); Assert.assertEquals("{\\"value\\":\\"test\\"}", mElement.toString()); mElement.add("value", value); Assert.assertEquals("{\\"value\\":\\"test\\"}", mElement.toString()); mElement.add("value", value); Assert.assertEquals("{\\"value\\":\\"test\\"}", mElement.toString()); mElement.add("value", value); Assert.assertEquals("{\\"value\\":\\"test\\"}", mElement.toString());
@Test public void testAddProperty() { final JsonElement value = new Gson().fromJson("{\\"value\\": \\"test\\"}", JsonElement.class); m_line.addMember("member", value); m_line.addMember("member2", value); m_line.addMember("member3", value); m_line.addMember("member4", value); m_line.addMember("member5", value); m_line.addMember("member6", value); m_line.addMember("member7", value); m_line.addMember("member8", value); m_line.addMember("member9", value); m_line.addMember("
@Test public void testAdd() { final JsonElement value = new Gson().fromJson("{\\"value\\":\\"test\\"}", JsonElement.class); mElement.add("value", value); Assert.assertEquals("{\\"value\\":\\"test\\"}", mElement.toString()); mElement.add("value", value); Assert.assertEquals("{\\"value\\":\\"test\\"}", mElement.toString()); mElement.add("value", value); Assert.assertEquals("{\\"value\\":\\"test\\"}", mElement.toString()); mElement.add("value", value); Assert.assertEquals("{\\"value\\":\\"test\\"}", mElement.toString());
@Test public void toStringTest() throws IOException { final String sb = "{\\n" + " \\"properties\\": {\\n" + " \\"prop1\\": \\"value1\\",\\n" + " \\"prop2\\": \\"value2\\",\\n" + " \\"prop3\\": \\"value3\\"\\n" + " },\\n" + " \\"members\\": {\\n" + " \\"prop1\\": \\"value1\\",\\n" + " \\"prop2\\": \\"value2\\",\\n" + " \\"prop3\\": \\"value3\\"\\n" + "
