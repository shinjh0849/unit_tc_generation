@Test public void testVersion() { assertEquals(PackageVersion.VERSION, new ParserBase(ctxt, 0).version()); assertEquals(PackageVersion.VERSION, new ParserBase(ctxt, 1).version()); assertEquals(PackageVersion.VERSION, new ParserBase(ctxt, 2).version()); assertEquals(PackageVersion.VERSION, new ParserBase(ctxt, 3).version()); assertEquals(PackageVersion.VERSION, new ParserBase(ctxt, 4).version()); assertEquals(PackageVersion.VERSION, new ParserBase(ctxt, 5).version()); assertEquals(PackageVersion.VERSION, new ParserBase(ctxt, 6).version()); assertEquals(PackageVersion.VERSION, new ParserBase(ctxt,
@Test public void testVersion() throws Exception { assertEquals(PackageVersion.VERSION, ParserBase.VERSION.version()); }
@Test public void testParsingContext() throws IOException, JsonParseException { JsonReadContext ctx = ParserBase.INSTANCE.getParsingContext(); for (JsonToken token : ctx.getTokens()) { String name = token.getTokenName(); String tokenText = token.getTokenText(); ctx.addToken(name, tokenText); } assertEquals("Unexpected number of tokens", 2, ctx.getNumberTokens().size()); for (JsonToken token : ctx.getNumberTokens()) { String name = token.getTokenName(); String tokenText = token.getTokenText(); ctx.addToken(name, tokenText); } assertEquals("Unexpected number of tokens", 2, ctx.getNumberTokens().size
@Test public void testParsingContext() throws IOException, JsonParseException { JsonReadContext ctx = ParserBase.INSTANCE.getParsingContext(); for (JsonToken token : ctx.getTokens()) { assertEquals(token.getTokenName(), token.getTokenName()); assertEquals(token.getTokenLineNr(), token.getTokenLineNr()); assertEquals(token.getTokenColumnNr(), token.getTokenColumnNr()); } }
@Test public void testGetTokenLocation() throws Exception { JsonLocation location = ParserBase.json.getTokenLocation(); assertEquals(0, location.getTokenLineNr()); assertEquals(0, location.getTokenCharacterNr()); assertEquals(0, location.getCurrentLineNr()); assertEquals(0, location.getColumnNr()); assertFalse(location.hasNext()); try { location.nextToken(); fail(); } catch (JsonParseException e) { } try { location.nextToken(); fail(); } catch (JsonParseException e) { } try { location.nextToken(); fail(); } catch (JsonParseException e) { } try { location.nextToken(); fail(); } catch (JsonParseException
@Test public void testGetTokenLocation() throws IOException, JsonParseException { JsonLocation tokenLocation = ParserUtils.createJsonLocation(_ctxt, 0); assertEquals(0, tokenLocation.getTokenLineNr()); assertEquals(0, tokenLocation.getTokenColumnNr()); JsonLocation tokenLocation1 = ParserUtils.createJsonLocation(_ctxt, 1); assertEquals(1, tokenLocation1.getTokenLineNr()); assertEquals(1, tokenLocation1.getTokenColumnNr()); JsonLocation tokenLocation2 = ParserUtils.createJsonLocation(_ctxt, 2); assertEquals(2, tokenLocation2.getTokenLineNr()); assertEquals(2, tokenLocation2.getTokenColumnNr()); }
@Test public void testGetEmbeddedObject() throws IOException, JsonParseException { assertNull(parser.getEmbeddedObject()); }
@Test public void testGetEmbeddedObject() throws IOException, JsonParseException { assertNull(parser.getEmbeddedObject()); }
@Test public void testGetTokenCharacterOffset() { assertEquals(0, ParserBase.getTokenCharacterOffset()); try { ParserBase.getTokenCharacterOffset(null); fail(); } catch (NullPointerException e) { } try { ParserBase.getTokenCharacterOffset(128); fail(); } catch (NullPointerException e) { } try { ParserBase.getTokenCharacterOffset(128); fail(); } catch (NullPointerException e) { } try { ParserBase.getTokenCharacterOffset(128); fail(); } catch (NullPointerException e) { } try { ParserBase.getTokenCharacterOffset(128); fail(); } catch (NullPointerException e) { } try { ParserBase.getTokenCharacterOffset
@Test public void testGetTokenLineNr() { assertEquals(0, ParserBase.getTokenLineNr(ctxt, 0)); assertEquals(1, ParserBase.getTokenLineNr(ctxt, 1)); assertEquals(2, ParserBase.getTokenLineNr(ctxt, 2)); assertEquals(3, ParserBase.getTokenLineNr(ctxt, 3)); assertEquals(4, ParserBase.getTokenLineNr(ctxt, 4)); assertEquals(5, ParserBase.getTokenLineNr(ctxt, 5)); assertEquals(6, ParserBase.getTokenLineNr(ctxt, 6)); assertEquals(7, ParserBase.getTokenLineNr(ctxt, 7)); }
@Test public void testGetTokenColumnNr() { assertEquals(0, ParserBase.getTokenColumnNr(ParserBase.ParserContext.EMPTY, 0)); assertEquals(1, ParserBase.getTokenColumnNr(ParserBase.ParserContext.EMPTY, 1)); assertEquals(2, ParserBase.getTokenColumnNr(ParserBase.ParserContext.EMPTY, 2)); assertEquals(3, ParserBase.getTokenColumnNr(ParserBase.ParserContext.EMPTY, 3)); assertEquals(4, ParserBase.getTokenColumnNr(ParserBase.ParserContext.EMPTY, 4)); assertEquals(5, ParserBase.getTokenColumnNr(ParserBase.ParserContext.EMPTY, 5
@Test public void testGetTokenColumnNr() throws IOException { assertEquals(0, ParserBase.getTokenColumnNr(ctxt, 0)); assertEquals(1, ParserBase.getTokenColumnNr(ctxt, 1)); assertEquals(2, ParserBase.getTokenColumnNr(ctxt, 2)); assertEquals(3, ParserBase.getTokenColumnNr(ctxt, 3)); assertEquals(4, ParserBase.getTokenColumnNr(ctxt, 4)); assertEquals(5, ParserBase.getTokenColumnNr(ctxt, 5)); assertEquals(6, ParserBase.getTokenColumnNr(ctxt, 6)); assertEquals(7, ParserBase.getTokenColumnNr(ctxt, 7
@Test public void testGetTokenColumnNr() { assertEquals(0, ParserBase.getTokenColumnNr(ctxt, 0, 0)); assertEquals(1, ParserBase.getTokenColumnNr(ctxt, 1, 0)); assertEquals(2, ParserBase.getTokenColumnNr(ctxt, 2, 0)); assertEquals(3, ParserBase.getTokenColumnNr(ctxt, 3, 0)); assertEquals(4, ParserBase.getTokenColumnNr(ctxt, 4, 0)); assertEquals(5, ParserBase.getTokenColumnNr(ctxt, 5, 0)); assertEquals(6, ParserBase.getTokenColumnNr(ctxt, 6, 0)); assertEquals(7
@Test public void testLoadMoreGuaranteed() throws IOException { final JsonParserFactory factory = new JsonParserFactory(); final JsonParser parser = factory.createParser(factory.createJsonParser(factory.createJsonParser(factory.createJsonParser(factory.createJsonParser(factory.createJsonGenerator(factory.createJsonGenerator(factory.createJsonGenerator(factory.createJsonGenerator(factory.createJsonGenerator(factory.createJsonGenerator(factory.createJsonGenerator(factory.createJsonGenerator(factory.createJsonGenerator(factory.createJsonGenerator(factory.createJsonGenerator(factory.createJsonGenerator(factory.createJsonGenerator(factory.createJsonGenerator(factory.createJsonGenerator(
@Test public void testLoadMoreGuaranteed() throws IOException, JsonParseException { assertFalse(parser.loadMoreGuaranteed()); parser.setLoadMoreGuaranteed(true); assertTrue(parser.loadMoreGuaranteed()); parser.setLoadMoreGuaranteed(false); assertFalse(parser.loadMoreGuaranteed()); parser.setLoadMoreGuaranteed(true); assertFalse(parser.loadMoreGuaranteed()); parser.setLoadMoreGuaranteed(false); assertFalse(parser.loadMoreGuaranteed()); }
@Test public void test_handleEOF() throws IOException, JsonParseException { ParserBase sf = new ParserBase(ctxt, 0) { @Override public boolean loadMore() throws IOException, JsonParseException { return true; } @Override public JsonLocation getTokenLocation() { return new JsonLocation(); } @Override public int getTextLineNr() { return 0; } @Override public int getTokenColumnNr() { return 0; } @Override public boolean inRoot() { return false; } }; sf._closeInput(); try { sf._handleEOF(); fail("Expected JsonParseException"); } catch (JsonParseException e) { } sf._closeInput(); try { sf._handleEOF(); fail("Expected JsonParseException"); } catch (
@Test(expectedExceptions = JsonParseException.class) public void testInvalidEndMarker() throws IOException, JsonParseException { ParserBase sf = new ParserBase(ctxt, 0) { @Override public boolean loadMore() throws IOException { throw new IOException(); } @Override public JsonLocation getTokenLocation() { return new JsonLocation(); } @Override public boolean inRoot() { return true; } }; sf._getParsingContext().setEndMarker(JsonToken.END_MARKER); sf._handleEOF(); }
@Test(expected=JsonParseException.class) public void testInvalidEndMarker() throws IOException, JsonParseException { ParserBase d = new ParserBase(ctxt, 0) { @Override public boolean loadMore() throws IOException { return true; } @Override public JsonLocation getTokenLocation() { return new JsonLocation(); } @Override public int getTextLineNr() { return 0; } @Override public int getTextColumnNr() { return 0; } @Override public boolean inRoot() { return false; } @Override public boolean loadMore() throws IOException { return false; } @Override public JsonLocation getCurrentLocation() { return new JsonLocation(); } @Override public boolean inRoot() { return false; } }; d._
@Test(expected=JsonParseException.class) public void testGetNumberValue() throws IOException, JsonParseException { ParserBase<TestClass> p = new TestParserBase<TestClass>(null); p.getNumberValue(); }
@Test(expected=JsonParseException.class) public void testGetNumberValue() throws IOException, JsonParseException { ParserBase<TestClass> p = new TestParserBase<TestClass>(null); p.getNumberValue(); }
@Test(expected=JsonParseException.class) public void testGetNumberValue() throws IOException, JsonParseException { ParserBase<TestClass> p = new TestParserBase<TestClass>(null); p.getNumberValue(); }
@Test(expected=JsonParseException.class) public void testGetNumberValue() throws IOException, JsonParseException { ParserBase<TestClass> p = new TestParserBase<TestClass>(null); p.getNumberValue(); }
@Test(expected=JsonParseException.class) public void testGetNumberValue() throws IOException, JsonParseException { ParserBase<TestClass> p = new TestParserBase<TestClass>(null); p.getNumberValue(); }
@Test public void testParseNumericValue() throws IOException, JsonParseException { final Charset charset = Charset.forName("UTF-8"); final Charset charset1 = Charset.forName("UTF-16"); final Charset charset2 = Charset.forName("UTF-16"); final Charset charset3 = Charset.forName("UTF-16"); final Charset charset4 = Charset.forName("UTF-16"); final Charset charset5 = Charset.forName("UTF-16"); final Charset charset6 = Charset.forName("UTF-16"); final Charset charset7 = Charset.forName("UTF-16"); final Charset charset8 = Charset.forName("UTF-16"); final Charset charset9 = Charset.for
@Test public void test_parseNumericValue() throws IOException, JsonParseException { final DecimalFormatSymbols syms = DecimalFormatSymbols.getInstance(); for (int i = 0; i < 1000; i++) { final DecimalFormatSymbols syms1 = syms.getInstance(Locale.US); for (int j = 0; j < 1000; j++) { final DecimalFormatSymbols syms2 = syms1.getInstance(Locale.US); for (int j = 0; j < 1000; j++) { final DecimalFormatSymbols syms3 = syms2.getInstance(Locale.US); for (int j = 0; j < 1000; j++) { final DecimalFormatSymbols syms4 = syms3.getInstance(Locale.US); for (
@Test public void test_parseNumericValue() throws IOException, JsonParseException { final Charset charset = Charset.forName("UTF-8"); final Charset charset1 = Charset.forName("UTF-16"); final Charset charset2 = Charset.forName("UTF-16"); final Charset charset3 = Charset.forName("UTF-16"); final Charset charset4 = Charset.forName("UTF-16"); final Charset charset5 = Charset.forName("UTF-16"); final Charset charset6 = Charset.forName("UTF-16"); final Charset charset7 = Charset.forName("UTF-16"); final Charset charset8 = Charset.forName("UTF-16"); final Charset charset9 = Charset.
@Test public void test_parseNumericValue() throws IOException, JsonParseException { final DecimalFormatSymbols syms = DecimalFormatSymbols.getInstance(); for (int i = 0; i < 1000; i++) { final DecimalFormatSymbols syms1 = syms.getInstance(Locale.US); for (int j = 0; j < 1000; j++) { final DecimalFormatSymbols syms2 = syms1.getInstance(Locale.US); for (int j = 0; j < 1000; j++) { final DecimalFormatSymbols syms3 = syms2.getInstance(Locale.US); for (int j = 0; j < 1000; j++) { final DecimalFormatSymbols syms4 = syms3.getInstance(Locale.US); for (
@Test public void test_parseNumericValue() throws IOException, JsonParseException { final Charset charset = Charset.forName("UTF-8"); final Charset charset1 = Charset.forName("UTF-16"); final Charset charset2 = Charset.forName("UTF-16"); final Charset charset3 = Charset.forName("UTF-16"); final Charset charset4 = Charset.forName("UTF-16"); final Charset charset5 = Charset.forName("UTF-16"); final Charset charset6 = Charset.forName("UTF-16"); final Charset charset7 = Charset.forName("UTF-16"); final Charset charset8 = Charset.forName("UTF-16"); final Charset charset9 = Charset.
@Test public void test_parseNumericValue() throws IOException, JsonParseException { final Charset charset = Charset.forName("UTF-8"); final Charset charset1 = Charset.forName("UTF-16"); final Charset charset2 = Charset.forName("UTF-16"); final Charset charset3 = Charset.forName("UTF-16"); final Charset charset4 = Charset.forName("UTF-16"); final Charset charset5 = Charset.forName("UTF-16"); final Charset charset6 = Charset.forName("UTF-16"); final Charset charset7 = Charset.forName("UTF-16"); final Charset charset8 = Charset.forName("UTF-16"); final Charset charset9 = Charset.
@Test public void test_parseNumericValue() throws IOException { final Charset charset = Charset.forName("UTF-8"); final Charset charset1 = Charset.forName("UTF-16"); final Charset charset2 = Charset.forName("UTF-16"); final Charset charset3 = Charset.forName("UTF-16"); final Charset charset4 = Charset.forName("UTF-16"); final Charset charset5 = Charset.forName("UTF-16"); final Charset charset6 = Charset.forName("UTF-16"); final Charset charset7 = Charset.forName("UTF-16"); final Charset charset8 = Charset.forName("UTF-16"); final Charset charset9 = Charset.forName("
@Test public void test_parseNumericValue() throws IOException, JsonParseException { final Charset charset = Charset.forName("UTF-8"); final Charset charset1 = Charset.forName("UTF-16"); final Charset charset2 = Charset.forName("UTF-16"); final Charset charset3 = Charset.forName("UTF-16"); final Charset charset4 = Charset.forName("UTF-16"); final Charset charset5 = Charset.forName("UTF-16"); final Charset charset6 = Charset.forName("UTF-16"); final Charset charset7 = Charset.forName("UTF-16"); final Charset charset8 = Charset.forName("UTF-16"); final Charset charset9 = Charset.
@Test public void test_parseNumericValue() throws IOException, JsonParseException { final Charset charset = Charset.forName("UTF-8"); final Charset charset1 = Charset.forName("UTF-16"); final Charset charset2 = Charset.forName("UTF-16"); final Charset charset3 = Charset.forName("UTF-16"); final Charset charset4 = Charset.forName("UTF-16"); final Charset charset5 = Charset.forName("UTF-16"); final Charset charset6 = Charset.forName("UTF-16"); final Charset charset7 = Charset.forName("UTF-16"); final Charset charset8 = Charset.forName("UTF-16"); final Charset charset9 = Charset.
@Test public void test_parseNumericValue() throws IOException, JsonParseException { final Charset charset = Charset.forName("UTF-8"); final Charset charset1 = Charset.forName("UTF-16"); final Charset charset2 = Charset.forName("UTF-16"); final Charset charset3 = Charset.forName("UTF-16"); final Charset charset4 = Charset.forName("UTF-16"); final Charset charset5 = Charset.forName("UTF-16"); final Charset charset6 = Charset.forName("UTF-16"); final Charset charset7 = Charset.forName("UTF-16"); final Charset charset8 = Charset.forName("UTF-16"); final Charset charset9 = Charset.
@Test public void test_parseNumericValue() throws IOException { final Charset charset = Charset.forName("UTF-8"); final Charset charset1 = Charset.forName("UTF-16"); final Charset charset2 = Charset.forName("UTF-16"); final Charset charset3 = Charset.forName("UTF-16"); final Charset charset4 = Charset.forName("UTF-16"); final Charset charset5 = Charset.forName("UTF-16"); final Charset charset6 = Charset.forName("UTF-16"); final Charset charset7 = Charset.forName("UTF-16"); final Charset charset8 = Charset.forName("UTF-16"); final Charset charset9 = Charset.forName("
@Test public void test_parseNumericValue() throws IOException, JsonParseException { final Charset charset = Charset.forName("UTF-8"); final Charset charset1 = Charset.forName("UTF-16"); final Charset charset2 = Charset.forName("UTF-16"); final Charset charset3 = Charset.forName("UTF-16"); final Charset charset4 = Charset.forName("UTF-16"); final Charset charset5 = Charset.forName("UTF-16"); final Charset charset6 = Charset.forName("UTF-16"); final Charset charset7 = Charset.forName("UTF-16"); final Charset charset8 = Charset.forName("UTF-16"); final Charset charset9 = Charset.
@Test public void testConvertNumberToInt() throws IOException, JsonParseException { ParserBase p = new TestParserBase(); p.setText("1"); p.setNumTypesValid(1); p.convertNumberToInt(); assertEquals("1", p.getText()); p.setNumTypesValid(1 << 2); p.convertNumberToInt(); assertEquals("1", p.getText()); p.setNumTypesValid(1 << 3); p.convertNumberToInt(); assertEquals("1", p.getText()); p.setNumTypesValid(1 << 4); p.convertNumberToInt(); assertEquals("1", p.getText()); p.setNumTypesValid(1 << 5);
@Test public void testConvertNumberToInt() throws IOException, JsonParseException { ParserBase p = new TestParserBase(); p.setText("foo"); p.setNumTypesValid & ParserBase.NF_DOUBLE; p.convertNumberToInt(); assertEquals("foo", p.getText()); p.setNumTypesValid & ParserBase.NF_DOUBLE; p.convertNumberToInt(); assertEquals("foo", p.getText()); p.setNumTypesValid & ParserBase.NF_BIGINT; p.convertNumberToInt(); assertEquals("foo", p.getText()); p.setNumTypesValid & ParserBase.NF_BIGDECIMAL; p.convertNumberToInt(); assertEquals("foo",
@Test public void testConvertNumberToInt() throws IOException, JsonParseException { ParserBase p = new TestParserBase(); p.setText("1"); p.convertNumberToInt(); assertEquals("1", p.getText()); p.setText("2"); p.convertNumberToInt(); assertEquals("2", p.getText()); p.setText("3"); p.convertNumberToInt(); assertEquals("3", p.getText()); p.setText("4"); p.convertNumberToInt(); assertEquals("4", p.getText()); p.setText("5"); p.convertNumberToInt(); assertEquals("5", p.getText()); p.setText("6"); p.
@Test public void testConvertNumberToInt() throws IOException, JsonParseException { ParserBase<TestClass> p = new TestParserBase<TestClass>(null); p.setText("1"); p.convertNumberToInt(); assertEquals("1", p.getText()); p.setText("2"); p.convertNumberToInt(); assertEquals("2", p.getText()); p.setText("3"); p.convertNumberToInt(); assertEquals("3", p.getText()); p.setText("4"); p.convertNumberToInt(); assertEquals("4", p.getText()); p.setText("5"); p.convertNumberToInt(); assertEquals("5", p.getText
@Test public void testConvertNumberToInt() throws IOException, JsonParseException { ParserBase p = new TestParserBase(); p.setText("1"); p.convertNumberToInt(); assertEquals("1", p.getText()); p.setText("2"); p.convertNumberToInt(); assertEquals("2", p.getText()); p.setText("3"); p.convertNumberToInt(); assertEquals("3", p.getText()); p.setText("4"); p.convertNumberToInt(); assertEquals("4", p.getText()); p.setText("5"); p.convertNumberToInt(); assertEquals("5", p.getText()); p.setText("6"); p.
@Test public void testConvertNumberToLong() throws IOException, JsonParseException { ParserBase p = new ParserBase() { @Override public boolean loadMore() throws IOException, JsonParseException { return false; } @Override public JsonReadContext getTokenLocation() throws IOException, JsonParseException { return null; } @Override public int getTokenColumnNr() { return 0; } @Override public boolean loadMore() throws IOException, JsonParseException { return false; } @Override public JsonReadContext getTokenLocation() throws IOException, JsonParseException { return null; } @Override public boolean loadMore() throws IOException, JsonParseException { return false; } @Override public JsonReadContext getTokenLocation() throws IOException, JsonParseException { return null; } @Override public
@Test public void testConvertNumberToLong() throws IOException, JsonParseException { ParserBase p = new TestParserBase(); p.setNumTypesValid(ParserBase.NUM_TYPES_VALID | ParserBase.NUM_BIGINT); p.convertNumberToLong(); assertEquals(p.getNumTypesValid(), ParserBase.NUM_TYPES_VALID); p.setNumTypesValid(ParserBase.NUM_BIGINT + 1); p.convertNumberToLong(); assertEquals(p.getNumTypesValid(), ParserBase.NUM_TYPES_VALID); p.setNumTypesValid(ParserBase.NUM_BIGINT); p.convertNumberToLong(); assertEquals(p.getNumTypesValid(), ParserBase
@Test(expected=JsonParseException.class) public void testReportInvalidNumber() throws IOException, JsonParseException { Parser parser = new Parser() { @Override public void loadMore() throws IOException { throw new IOException(); } @Override public void _finishString() throws IOException, JsonParseException { throw new IOException(); } }; parser._parseNumberValue(123); }
@Test public void testReportInvalidNumber() throws IOException, JsonParseException { ParserBase j = new ParserBase(ctxt, 0); j._reportInvalidNumber("foo"); j._reportInvalidNumber("bar"); j._reportInvalidNumber("baz"); j.close(); }
@Test public void testReportOverflowLong() throws IOException, JsonParseException { final JsonParserFactory factory = new JsonParserFactory(); final Parser parser = factory.createParser(factory.createJsonParser(factory.createJsonParser(factory.createJsonParser(factory.createJsonParser(factory.createJsonGenerator(factory.createJsonGenerator(factory.createJsonGenerator(factory.createJsonGenerator(factory.createJsonGenerator(factory.createJsonGenerator(factory.createJsonGenerator(factory.createJsonGenerator(factory.createJsonGenerator(factory.createJsonGenerator(factory.createJsonGenerator(factory.createJsonGenerator(factory.createJsonGenerator(factory.createJsonGenerator(factory.createJsonGenerator
@Test public void testNumericValue() throws IOException, JsonParseException { ParserBase p = new ParserBase(ctxt, Parser.Version.JSON); p._parseNumericValue(Integer.MAX_VALUE); p._reportLongValue(Long.MIN_VALUE); p._reportLongValue(Long.MAX_VALUE); p._reportFloatValue(Float.MAX_VALUE); p._reportFloatValue(Float.MIN_VALUE); p._reportFloatValue(Float.MAX_VALUE); p._reportFloatValue(Float.MIN_VALUE); p._reportFloatValue(Float.MAX_VALUE); p._reportFloatValue(Float.MIN_VALUE); p._reportFloatValue(Float.MAX_
@Test public void testHasMoreBytes() throws Exception { Std data = new Std(new byte[] {0x01, 0x02, 0x03}, 0, 3); assertTrue(data.hasMoreBytes()); data.reset(); assertTrue(data.hasMoreBytes()); data.reset(); assertTrue(data.hasMoreBytes()); data.reset(); assertFalse(data.hasMoreBytes()); data.reset(); assertFalse(data.hasMoreBytes()); data.reset(); assertFalse(data.hasMoreBytes()); }
@Test public void testAllocByteBuffer() { System.out.println("allocByteBuffer"); ByteBufferType type = ByteBufferType.ANY; byte[] result = ByteBufferType.INSTANCE.allocByteBuffer(type); assertEquals(0, result.length); result = ByteBufferType.INSTANCE.allocByteBuffer(ByteBufferType.ANY); assertEquals(0, result.length); result = ByteBufferType.INSTANCE.allocByteBuffer(ByteBufferType.ANY); assertEquals(0, result.length); result = ByteBufferType.INSTANCE.allocByteBuffer(ByteBufferType.ANY); assertEquals(0, result.length); result = ByteBufferType.INSTANCE.allocByteBuffer(ByteBufferType.ANY); assertEquals(0, result.length); result =
@Test public void testBalloc() throws Exception { testBalloc(ByteBufferType.BALANCER, 0); testBalloc(ByteBufferType.BALANCER, 1); testBalloc(ByteBufferType.BALANCER, 2); testBalloc(ByteBufferType.BALANCER, 3); testBalloc(ByteBufferType.BALANCER, 4); testBalloc(ByteBufferType.BALANCER, 5); testBalloc(ByteBufferType.BALANCER, 6); testBalloc(ByteBufferType.BALANCER, 7); testBalloc(ByteBufferType.BALANCER, 8); testB
@Test public void testBalloc() { byte[] balloc = ByteBufferType.BALANCER.balloc(1024); Assert.assertEquals(1024, balloc.length); balloc = ByteBufferType.BALANCER.balloc(1024); Assert.assertEquals(1024, balloc.length); balloc = ByteBufferType.BALANCER.balloc(1024); Assert.assertEquals(1024, balloc.length); balloc = ByteBufferType.BALANCER.balloc(1024); Assert.assertEquals(1024, balloc.length); balloc = ByteBufferType.BALANCER.b
@Test public void testValueOf() throws IllegalArgumentException { Base64Variant variant = Base64Variant.valueOf("test"); assertEquals("test", variant.getDataType()); assertEquals("test", variant.getPath()); assertEquals("test", variant.getData()); assertEquals(0, variant.getLength()); variant = Base64Variant.valueOf("test2"); assertEquals("test", variant.getDataType()); assertEquals("test2", variant.getPath()); assertEquals(0, variant.getLength()); variant = Base64Variant.valueOf("test3"); assertEquals("test3", variant.getDataType()); assertEquals("test3", variant.getData()); assertEquals(0, variant
@Test public void testValueOf() { Base64Variant variant = Base64Variant.valueOf("test"); assertEquals("test", variant.getScheme()); assertEquals("test", variant.getName()); assertEquals("test", variant.getPath()); assertTrue(variant.getMIME().isPresent()); assertTrue(variant.getMIME().get().contains("test")); assertTrue(variant.getMIME().get().contains("test2")); assertTrue(variant.getMIME().get().contains("test3")); assertTrue(variant.getMIME().get().contains("test4")); assertTrue(variant.getMIME().get().contains("test5")); assertTrue(variant.get
@Test public void testValueOf() { Base64Variant variant = Base64Variant.valueOf("test"); assertEquals("test", variant.getScheme()); assertEquals("test", variant.getName()); assertEquals("test", variant.getPath()); assertEquals(Optional.empty(), variant.getMime()); assertEquals(Optional.empty(), variant.getPath2()); assertEquals(Optional.empty(), variant.getPath3()); assertEquals(Optional.empty(), variant.getPath4()); variant = Base64Variant.valueOf(null); assertEquals("test", variant.getScheme()); assertEquals("test", variant.getName()); assertEquals("test", variant.getPath()); assertEquals(Optional.
@Test public void testValueOf() { Base64Variant variant = Base64Variant.valueOf("test"); assertEquals("test", variant.getScheme()); assertEquals("test", variant.getName()); assertEquals("test", variant.getPath()); assertEquals(Optional.empty(), variant.getMime()); assertEquals(Optional.empty(), variant.getMime_no_linefeeds()); assertEquals(Optional.empty(), variant.get MODIFIED_FOR_URL()); assertEquals(Optional.of(Base64Variant.MIME), variant); variant = Base64Variant.valueOf(null); assertEquals("test", variant.getScheme()); assertEquals("test", variant.getName()); assertEquals("test
@Test public void testValueOf() { Base64Variant base64Variant = Base64Variant.valueOf("test"); assertEquals("test", base64Variant.getDataType()); assertEquals("test", base64Variant.getData()); Base64Variant base64Variant2 = Base64Variant.valueOf("test2"); assertEquals("test", base64Variant2.getDataType()); assertEquals("test2", base64Variant2.getData()); Base64Variant base64Variant3 = Base64Variant.valueOf("test3"); assertEquals("test3", base64Variant3.getDataType()); assertEquals("test3", base64Variant3.getData()); Base64Variant base64Variant4 =
@Test public void outputInt() { final int value = Integer.MIN_VALUE; final char[] buffer = new char[1]; final int offset = 0; final int actual = outputInt(value, buffer, offset); assertEquals(value, actual); }
@Test public void outputInt() { final int value = Integer.MIN_VALUE; final char[] buffer = new char[1]; final int offset = 0; final int actual = outputInt(value, buffer, offset); assertEquals(value, actual); assertEquals(0, offset); buffer[0] = -1; actual = outputInt(value, buffer, offset); assertEquals(-1, offset); assertEquals(value, actual); buffer[0] = -1; actual = outputInt(value, buffer, offset); assertEquals(-1, offset); assertEquals(value, actual); buffer[0] = -1; actual = outputInt(value, buffer, offset); assertEquals
@Test public void testOutputLeadingTriplet() { assertEquals(0, outputLeadingTriplet(0, 0, 0)); assertEquals(1, outputLeadingTriplet(1, 1, 0)); assertEquals(2, outputLeadingTriplet(2, 2, 0)); assertEquals(3, outputLeadingTriplet(3, 3, 0)); assertEquals(4, outputLeadingTriplet(4, 4, 0)); assertEquals(5, outputLeadingTriplet(5, 5, 0)); assertEquals(6, outputLeadingTriplet(6, 6, 0)); assertEquals(7, outputLeadingTriplet(7, 7, 0)); assertEquals(8, outputLeadingTriplet
@Test public void testOutputLeadingTriplet() { assertEquals(0, outputLeadingTriplet(0, 0, 0)); assertEquals(1, outputLeadingTriplet(1, 1, 0)); assertEquals(2, outputLeadingTriplet(2, 2, 0)); assertEquals(3, outputLeadingTriplet(3, 3, 0)); assertEquals(4, outputLeadingTriplet(4, 4, 0)); assertEquals(5, outputLeadingTriplet(5, 5, 0)); assertEquals(6, outputLeadingTriplet(6, 6, 0)); assertEquals(7, outputLeadingTriplet(7, 7, 0)); assertEquals(8, outputLeadingTriplet
@Test public void testReset() { ByteArrayBuilder b = new ByteArrayBuilder(); b.write(new byte[] { 0x01, 0x02 }); b.write(new byte[] { 0x03, 0x04 }); b.write(new byte[] { 0x05, 0x06 }); b.write(new byte[] { 0x07, 0x08 }); b.write(new byte[] { 0x08, 0x09 }); b.write(new byte[] { 0x0A, 0x0B, 0x0C }); b.write(new byte[] { 0x0D, 0x0E, 0x0F }); b.write(new byte
@Test public void testToByteArray() { ByteArrayBuilder b1 = new ByteArrayBuilder(); b1.append(1); b1.append(2); b1.append(3); b1.append(4); b1.append(5); b1.append(6); b1.append(7); b1.append(8); b1.append(9); b1.append(10); b1.append(11); b1.append(12); b1.append(13); b1.append(14); b1.append(15); b1.append(16); b1.append(17); b1.append(18); b1.append
@Test public void testToByteArray() { ByteArrayBuilder b1 = new ByteArrayBuilder(); b1.append(1); b1.append(2); b1.append(3); b1.append(4); b1.append(5); b1.append(6); b1.append(7); b1.append(8); b1.append(9); ByteArrayBuilder b2 = new ByteArrayBuilder(); b2.append(1); b2.append(2); b2.append(3); b2.append(4); b2.append(5); b2.append(6); b2.append(7); b2.append(8); b2
@Test public void testToByteArray() { ByteArrayBuilder b1 = new ByteArrayBuilder(); b1.append(1); b1.append(2); b1.append(3); b1.append(4); b1.append(5); b1.append(6); b1.append(7); b1.append(8); b1.append(9); b1.append(10); b1.append(11); b1.append(12); b1.append(13); b1.append(14); b1.append(15); b1.append(16); b1.append(17); b1.append(18); b1.append
@Test public void testToByteArray() { ByteArrayBuilder b1 = new ByteArrayBuilder(1024); b1.append(1); b1.append(2); b1.append(3); b1.append(4); b1.append(5); b1.append(6); b1.append(7); b1.append(8); b1.append(9); b1.flush(); b1.close(); ByteArrayBuilder b2 = new ByteArrayBuilder(1024); b2.append(1); b2.append(2); b2.append(3); b2.append(4); b2.append(5); b2.append(6);
@Test public void testFinishCurrentSegment() { testFinishCurrentSegment(0, 0); testFinishCurrentSegment(1, 0); testFinishCurrentSegment(2, 0); testFinishCurrentSegment(3, 0); testFinishCurrentSegment(4, 0); testFinishCurrentSegment(5, 0); testFinishCurrentSegment(6, 0); testFinishCurrentSegment(7, 0); testFinishCurrentSegment(8, 0); testFinishCurrentSegment(9, 0); testFinishCurrentSegment(10, 0); testFinishCurrentSegment(11, 0); testFinishCurrentSegment(12, 0); testFinishCurrentSegment(13, 0); testFinishCurrentSegment(14, 0); testFinishCurrent
@Test public void testFinishCurrentSegment() { testFinishCurrentSegment(0, 0); testFinishCurrentSegment(1, 0); testFinishCurrentSegment(2, 0); testFinishCurrentSegment(3, 0); testFinishCurrentSegment(4, 0); testFinishCurrentSegment(5, 0); testFinishCurrentSegment(6, 0); testFinishCurrentSegment(7, 0); testFinishCurrentSegment(8, 0); testFinishCurrentSegment(9, 0); testFinishCurrentSegment(10, 0); testFinishCurrentSegment(11, 0); testFinishCurrentSegment(12, 0); testFinishCurrentSegment(13, 0); testFinishCurrentSegment(14, 0); testFinishCurrent
@Test public void testFinishCurrentSegment() { testFinishCurrentSegment(0, 0); testFinishCurrentSegment(1, 0); testFinishCurrentSegment(2, 0); testFinishCurrentSegment(3, 0); testFinishCurrentSegment(4, 0); testFinishCurrentSegment(5, 0); testFinishCurrentSegment(6, 0); testFinishCurrentSegment(7, 0); testFinishCurrentSegment(8, 0); testFinishCurrentSegment(9, 0); testFinishCurrentSegment(10, 0); testFinishCurrentSegment(11, 0); testFinishCurrentSegment(12, 0); testFinishCurrentSegment(13, 0); testFinishCurrentSegment(14, 0); testFinishCurrent
@Test public void testGetCurrentSegment() { testGetCurrentSegment(0, 0); testGetCurrentSegment(1, 0); testGetCurrentSegment(2, 0); testGetCurrentSegment(3, 0); testGetCurrentSegment(4, 0); testGetCurrentSegment(5, 0); testGetCurrentSegment(6, 0); testGetCurrentSegment(7, 0); testGetCurrentSegment(8, 0); testGetCurrentSegment(9, 0); testGetCurrentSegment(10, 0); testGetCurrentSegment(11, 0); testGetCurrentSegment(12, 0); testGetCurrentSegment(13, 0); testGetCurrentSegment(14, 0); testGetCurrent
@Test public void testGetCurrentSegment() { testGetCurrentSegment(0, 0); testGetCurrentSegment(1, 0); testGetCurrentSegment(2, 0); testGetCurrentSegment(3, 0); testGetCurrentSegment(4, 0); testGetCurrentSegment(5, 0); testGetCurrentSegment(6, 0); testGetCurrentSegment(7, 0); testGetCurrentSegment(8, 0); testGetCurrentSegment(9, 0); testGetCurrentSegment(10, 0); testGetCurrentSegment(11, 0); testGetCurrentSegment(12, 0); testGetCurrentSegment(13, 0); testGetCurrentSegment(14, 0); testGetCurrent
@Test public void testSetCurrentSegmentLength() { ByteArrayBuilder b = new ByteArrayBuilder(); b.setCurrentSegmentLength(1); assertEquals(1, b.getCurrentSegmentLength()); b.setCurrentSegmentLength(2); assertEquals(2, b.getCurrentSegmentLength()); b.setCurrentSegmentLength(3); assertEquals(3, b.getCurrentSegmentLength()); b.setCurrentSegmentLength(4); assertEquals(4, b.getCurrentSegmentLength()); b.setCurrentSegmentLength(5); assertEquals(5, b.getCurrentSegmentLength()); b.setCurrentSegmentLength(6); assertEquals(6, b.getCurrentSegmentLength()); b.set
@Test public void testSetCurrentSegmentLength() throws Exception { testSetCurrentSegmentLength(0); testSetCurrentSegmentLength(1); testSetCurrentSegmentLength(2); testSetCurrentSegmentLength(3); testSetCurrentSegmentLength(4); testSetCurrentSegmentLength(5); testSetCurrentSegmentLength(6); testSetCurrentSegmentLength(7); testSetCurrentSegmentLength(8); testSetCurrentSegmentLength(9); }
@Test public void testGetCurrentSegmentLength() { testGetCurrentSegmentLength(0, 0); testGetCurrentSegmentLength(1, 0); testGetCurrentSegmentLength(2, 0); testGetCurrentSegmentLength(3, 0); testGetCurrentSegmentLength(4, 0); testGetCurrentSegmentLength(5, 0); testGetCurrentSegmentLength(6, 0); testGetCurrentSegmentLength(7, 0); testGetCurrentSegmentLength(8, 0); testGetCurrentSegmentLength(9, 0); testGetCurrentSegmentLength(10, 0); testGetCurrentSegmentLength(11, 0); testGetCurrentSegmentLength(12, 0); testGetCurrentSegmentLength(13
@Test public void testGetCurrentSegmentLength() { testGetCurrentSegmentLength(0, 0); testGetCurrentSegmentLength(1, 0); testGetCurrentSegmentLength(2, 0); testGetCurrentSegmentLength(3, 0); testGetCurrentSegmentLength(4, 0); testGetCurrentSegmentLength(5, 0); testGetCurrentSegmentLength(6, 0); testGetCurrentSegmentLength(7, 0); testGetCurrentSegmentLength(8, 0); testGetCurrentSegmentLength(9, 0); testGetCurrentSegmentLength(10, 0); testGetCurrentSegmentLength(11, 0); testGetCurrentSegmentLength(12, 0); testGetCurrentSegmentLength(13
@Test public void test_allocMore() { class TestCase { public void run() { _allocMore(); } } List<TestCase> testCases = new ArrayList<TestCase>(); testCases.add(new TestCase("_allocMore", 0)); testCases.add(new TestCase("_allocMore", 1)); testCases.add(new TestCase("_allocMore", 2)); testCases.add(new TestCase("_allocMore", 3)); testCases.add(new TestCase("_allocMore", 4)); testCases.add(new TestCase("_allocMore", 5)); testCases.add(new TestCase("_allocMore", 6)); testCases.
@Test public void test_allocMore() { ByteArrayBuilder b1 = BufferRecycler.INSTANCE; ByteArrayBuilder b2 = BufferRecycler.INSTANCE; ByteArrayBuilder b3 = BufferRecycler.INSTANCE; b1._allocMore(); b2._allocMore(); b3._allocMore(); b1._allocMore(); b2._allocMore(); b3._allocMore(); b1._allocMore(); b2._allocMore(); b3._allocMore(); b2._allocMore(); b3._allocMore(); }
@Test public void test_allocMore() { ByteArrayBuilder b = ByteArrayBuilder.create(1024); b._allocMore(); b._allocMore(); b._allocMore(); b._allocMore(); b._allocMore(); b._allocMore(); b._allocMore(); b._allocMore(); b._allocMore(); b._allocMore(); b._allocMore(); b._allocMore(); b._allocMore(); b._allocMore(); b._allocMore(); b._allocMore(); }
@Test public void test_allocMore() { ByteArrayBuilder b1 = BufferRecycler.INSTANCE; ByteArrayBuilder b2 = BufferRecycler.INSTANCE; ByteArrayBuilder b3 = BufferRecycler.INSTANCE; b1._allocMore(); b2._allocMore(); b3._allocMore(); b1._allocMore(); b2._allocMore(); b3._allocMore(); b1._allocMore(); b2._allocMore(); b3._allocMore(); b2._allocMore(); b3._allocMore(); }
@Test public void test_allocMore() { ByteArrayBuilder b1 = BufferRecycler.INSTANCE; ByteArrayBuilder b2 = BufferRecycler.INSTANCE; ByteArrayBuilder b3 = BufferRecycler.INSTANCE; b1._allocMore(); b2._allocMore(); b3._allocMore(); b1._allocMore(); b2._allocMore(); b3._allocMore(); b1._allocMore(); b2._allocMore(); b3._allocMore(); b2._allocMore(); b3._allocMore(); }
@Test public void test_allocMore() { test_allocMore(0, 0, 0); test_allocMore(1, 0, 0); test_allocMore(2, 0, 0); test_allocMore(3, 0, 0); test_allocMore(4, 0, 0); test_allocMore(5, 0, 0); test_allocMore(6, 0, 0); test_allocMore(7, 0, 0); test_allocMore(8, 0, 0); test_allocMore(9, 0, 0); test_allocMore(10, 0, 0); test_allocMore(20, 0, 0); test_allocMore(30
@Test public void test_allocMore() { ByteArrayBuilder b1 = BufferRecycler.INSTANCE; ByteArrayBuilder b2 = BufferRecycler.INSTANCE; ByteArrayBuilder b3 = BufferRecycler.INSTANCE; b1._allocMore(); b2._allocMore(); b3._allocMore(); b1._allocMore(); b2._allocMore(); b3._allocMore(); b1._allocMore(); b2._allocMore(); b3._allocMore(); b1._allocMore(); b2._allocMore(); b3._allocMore(); b3._allocMore(); b1._allocMore(); b2._allocMore(); b2._allocMore(); b3._allocMore(); b3._
@Test public void parseInt() { Assert.assertEquals(0, Integer.parseInt("0")); Assert.assertEquals(1, Integer.parseInt("1")); Assert.assertEquals(2, Integer.parseInt("2")); Assert.assertEquals(3, Integer.parseInt("3")); Assert.assertEquals(4, Integer.parseInt("4")); Assert.assertEquals(5, Integer.parseInt("5")); Assert.assertEquals(6, Integer.parseInt("6")); Assert.assertEquals(7, Integer.parseInt("7")); Assert.assertEquals(8, Integer.parseInt("8")); Assert.assertEquals(9
@Test public void parseInt() { Assert.assertEquals(0, Integer.parseInt("0")); Assert.assertEquals(1, Integer.parseInt("1")); Assert.assertEquals(2, Integer.parseInt("2")); Assert.assertEquals(3, Integer.parseInt("3")); Assert.assertEquals(4, Integer.parseInt("4")); Assert.assertEquals(5, Integer.parseInt("5")); Assert.assertEquals(6, Integer.parseInt("6")); Assert.assertEquals(7, Integer.parseInt("7")); Assert.assertEquals(8, Integer.parseInt("8")); Assert.assertEquals(9
@Test public void parseInt() { Assert.assertEquals(0, Integer.parseInt("0")); Assert.assertEquals(1, Integer.parseInt("1")); Assert.assertEquals(2, Integer.parseInt("2")); Assert.assertEquals(3, Integer.parseInt("3")); Assert.assertEquals(4, Integer.parseInt("4")); Assert.assertEquals(5, Integer.parseInt("5")); Assert.assertEquals(6, Integer.parseInt("6")); Assert.assertEquals(7, Integer.parseInt("7")); Assert.assertEquals(8, Integer.parseInt("8")); Assert.assertEquals(9
@Test public void parseInt() { Assert.assertEquals(0, Integer.parseInt("0")); Assert.assertEquals(1, Integer.parseInt("1")); Assert.assertEquals(2, Integer.parseInt("2")); Assert.assertEquals(3, Integer.parseInt("3")); Assert.assertEquals(4, Integer.parseInt("4")); Assert.assertEquals(5, Integer.parseInt("5")); Assert.assertEquals(6, Integer.parseInt("6")); Assert.assertEquals(7, Integer.parseInt("7")); Assert.assertEquals(8, Integer.parseInt("8")); Assert.assertEquals(9
@Test public void parseInt() { Assert.assertEquals(0, Integer.parseInt("0")); Assert.assertEquals(1, Integer.parseInt("1")); Assert.assertEquals(2, Integer.parseInt("2")); Assert.assertEquals(3, Integer.parseInt("3")); Assert.assertEquals(4, Integer.parseInt("4")); Assert.assertEquals(5, Integer.parseInt("5")); Assert.assertEquals(6, Integer.parseInt("6")); Assert.assertEquals(7, Integer.parseInt("7")); Assert.assertEquals(8, Integer.parseInt("8")); Assert.assertEquals(9
@Test public void parseInt() { Assert.assertEquals(0, Integer.parseInt("0")); Assert.assertEquals(1, Integer.parseInt("1")); Assert.assertEquals(2, Integer.parseInt("2")); Assert.assertEquals(3, Integer.parseInt("3")); Assert.assertEquals(4, Integer.parseInt("4")); Assert.assertEquals(5, Integer.parseInt("5")); Assert.assertEquals(6, Integer.parseInt("6")); Assert.assertEquals(7, Integer.parseInt("7")); Assert.assertEquals(8, Integer.parseInt("8")); Assert.assertEquals(9
@Test public void parseInt() { Assert.assertEquals(0, Integer.parseInt("0")); Assert.assertEquals(1, Integer.parseInt("1")); Assert.assertEquals(2, Integer.parseInt("2")); Assert.assertEquals(3, Integer.parseInt("3")); Assert.assertEquals(4, Integer.parseInt("4")); Assert.assertEquals(5, Integer.parseInt("5")); Assert.assertEquals(6, Integer.parseInt("6")); Assert.assertEquals(7, Integer.parseInt("7")); Assert.assertEquals(8, Integer.parseInt("8")); Assert.assertEquals(9
@Test public void parseInt() { Assert.assertEquals(0, Integer.parseInt("0")); Assert.assertEquals(1, Integer.parseInt("1")); Assert.assertEquals(2, Integer.parseInt("2")); Assert.assertEquals(3, Integer.parseInt("3")); Assert.assertEquals(4, Integer.parseInt("4")); Assert.assertEquals(5, Integer.parseInt("5")); Assert.assertEquals(6, Integer.parseInt("6")); Assert.assertEquals(7, Integer.parseInt("7")); Assert.assertEquals(8, Integer.parseInt("8")); Assert.assertEquals(9
@Test public void parseInt() { Assert.assertEquals(0, Integer.parseInt("0")); Assert.assertEquals(1, Integer.parseInt("1")); Assert.assertEquals(2, Integer.parseInt("2")); Assert.assertEquals(3, Integer.parseInt("3")); Assert.assertEquals(4, Integer.parseInt("4")); Assert.assertEquals(5, Integer.parseInt("5")); Assert.assertEquals(6, Integer.parseInt("6")); Assert.assertEquals(7, Integer.parseInt("7")); Assert.assertEquals(8, Integer.parseInt("8")); Assert.assertEquals(9
@Test public void parseInt() { Assert.assertEquals(0, Integer.parseInt("0")); Assert.assertEquals(1, Integer.parseInt("1")); Assert.assertEquals(2, Integer.parseInt("2")); Assert.assertEquals(3, Integer.parseInt("3")); Assert.assertEquals(4, Integer.parseInt("4")); Assert.assertEquals(5, Integer.parseInt("5")); Assert.assertEquals(6, Integer.parseInt("6")); Assert.assertEquals(7, Integer.parseInt("7")); Assert.assertEquals(8, Integer.parseInt("8")); Assert.assertEquals(9
@Test public void parseInt() { Assert.assertEquals(0, Integer.parseInt("0")); Assert.assertEquals(1, Integer.parseInt("1")); Assert.assertEquals(2, Integer.parseInt("2")); Assert.assertEquals(3, Integer.parseInt("3")); Assert.assertEquals(4, Integer.parseInt("4")); Assert.assertEquals(5, Integer.parseInt("5")); Assert.assertEquals(6, Integer.parseInt("6")); Assert.assertEquals(7, Integer.parseInt("7")); Assert.assertEquals(8, Integer.parseInt("8")); Assert.assertEquals(9
@Test public void parseInt() { Assert.assertEquals(0, Integer.parseInt("0")); Assert.assertEquals(1, Integer.parseInt("1")); Assert.assertEquals(2, Integer.parseInt("2")); Assert.assertEquals(3, Integer.parseInt("3")); Assert.assertEquals(4, Integer.parseInt("4")); Assert.assertEquals(5, Integer.parseInt("5")); Assert.assertEquals(6, Integer.parseInt("6")); Assert.assertEquals(7, Integer.parseInt("7")); Assert.assertEquals(8, Integer.parseInt("8")); Assert.assertEquals(9
@Test public void parseInt() { Assert.assertEquals(0, Integer.parseInt("0")); Assert.assertEquals(1, Integer.parseInt("1")); Assert.assertEquals(2, Integer.parseInt("2")); Assert.assertEquals(3, Integer.parseInt("3")); Assert.assertEquals(4, Integer.parseInt("4")); Assert.assertEquals(5, Integer.parseInt("5")); Assert.assertEquals(6, Integer.parseInt("6")); Assert.assertEquals(7, Integer.parseInt("7")); Assert.assertEquals(8, Integer.parseInt("8")); Assert.assertEquals(9
@Test public void parseInt() { Assert.assertEquals(0, Integer.parseInt("0")); Assert.assertEquals(1, Integer.parseInt("1")); Assert.assertEquals(2, Integer.parseInt("2")); Assert.assertEquals(3, Integer.parseInt("3")); Assert.assertEquals(4, Integer.parseInt("4")); Assert.assertEquals(5, Integer.parseInt("5")); Assert.assertEquals(6, Integer.parseInt("6")); Assert.assertEquals(7, Integer.parseInt("7")); Assert.assertEquals(8, Integer.parseInt("8")); Assert.assertEquals(9
@Test public void parseInt() { Assert.assertEquals(0, Integer.parseInt("0")); Assert.assertEquals(1, Integer.parseInt("1")); Assert.assertEquals(2, Integer.parseInt("2")); Assert.assertEquals(3, Integer.parseInt("3")); Assert.assertEquals(4, Integer.parseInt("4")); Assert.assertEquals(5, Integer.parseInt("5")); Assert.assertEquals(6, Integer.parseInt("6")); Assert.assertEquals(7, Integer.parseInt("7")); Assert.assertEquals(8, Integer.parseInt("8")); Assert.assertEquals(9
@Test public void parseInt() { Assert.assertEquals(1, Integer.parseInt("1")); Assert.assertEquals(-1, Integer.parseInt("-1")); Assert.assertEquals(1, Integer.parseInt("1")); Assert.assertEquals(1, Integer.parseInt("1")); Assert.assertEquals(1, Integer.parseInt("1")); Assert.assertEquals(-1, Integer.parseInt("-1")); Assert.assertEquals(-1, Integer.parseInt("-1")); Assert.assertEquals(1, Integer.parseInt("1")); Assert.assertEquals(1, Integer.parseInt("1")); Assert.assert
@Test public void parseInt() { assertEquals(Integer.valueOf(0), parseInt("0")); assertEquals(Integer.valueOf(1), parseInt("1")); assertEquals(Integer.valueOf(2), parseInt("2")); assertEquals(Integer.valueOf(3), parseInt("3")); assertEquals(Integer.valueOf(4), parseInt("4")); assertEquals(Integer.valueOf(5), parseInt("5")); assertEquals(Integer.valueOf(6), parseInt("6")); assertEquals(Integer.valueOf(7), parseInt("7")); assertEquals(Integer.valueOf(8), parseInt("8")); assertEquals(Integer.value
@Test public void parseInt() { assertEquals(Integer.valueOf(0), parseInt("0")); assertEquals(Integer.valueOf(1), parseInt("1")); assertEquals(Integer.valueOf(2), parseInt("2")); assertEquals(Integer.valueOf(3), parseInt("3")); assertEquals(Integer.valueOf(4), parseInt("4")); assertEquals(Integer.valueOf(5), parseInt("5")); assertEquals(Integer.valueOf(6), parseInt("6")); assertEquals(Integer.valueOf(7), parseInt("7")); assertEquals(Integer.valueOf(8), parseInt("8")); assertEquals(Integer.value
@Test public void parseInt() { assertEquals(Integer.valueOf(0), parseInt("0")); assertEquals(Integer.valueOf(1), parseInt("1")); assertEquals(Integer.valueOf(2), parseInt("2")); assertEquals(Integer.valueOf(3), parseInt("3")); assertEquals(Integer.valueOf(4), parseInt("4")); assertEquals(Integer.valueOf(5), parseInt("5")); assertEquals(Integer.valueOf(6), parseInt("6")); assertEquals(Integer.valueOf(7), parseInt("7")); assertEquals(Integer.valueOf(8), parseInt("8")); assertEquals(Integer.value
@Test public void parseInt() { assertEquals(Integer.valueOf(0), parseInt("0")); assertEquals(Integer.valueOf(1), parseInt("1")); assertEquals(Integer.valueOf(2), parseInt("2")); assertEquals(Integer.valueOf(3), parseInt("3")); assertEquals(Integer.valueOf(4), parseInt("4")); assertEquals(Integer.valueOf(5), parseInt("5")); assertEquals(Integer.valueOf(6), parseInt("6")); assertEquals(Integer.valueOf(7), parseInt("7")); assertEquals(Integer.valueOf(8), parseInt("8")); assertEquals(Integer.value
@Test public void parseInt() { Assert.assertEquals(1, Integer.parseInt("1")); Assert.assertEquals(-1, Integer.parseInt("-1")); Assert.assertEquals(1, Integer.parseInt("1")); Assert.assertEquals(1, Integer.parseInt("1")); Assert.assertEquals(-1, Integer.parseInt("-1")); Assert.assertEquals(1, Integer.parseInt("1")); Assert.assertEquals(-1, Integer.parseInt("-1")); Assert.assertEquals(1, Integer.parseInt("1")); Assert.assertEquals(1, Integer.parseInt("1")); Assert.assert
@Test public void parseInt() { Assert.assertEquals(1, Integer.parseInt("1")); Assert.assertEquals(-1, Integer.parseInt("-1")); Assert.assertEquals(1, Integer.parseInt("1")); Assert.assertEquals(1, Integer.parseInt("1-1")); Assert.assertEquals(1, Integer.parseInt("1")); Assert.assertEquals(1, Integer.parseInt("1")); Assert.assertEquals(-1, Integer.parseInt("-1")); Assert.assertEquals(-1, Integer.parseInt("-1")); Assert.assertEquals(1, Integer.parseInt("1")); Assert
@Test public void parseInt() { assertEquals(Integer.valueOf(0), parseInt("0")); assertEquals(Integer.valueOf(1), parseInt("1")); assertEquals(Integer.valueOf(2), parseInt("2")); assertEquals(Integer.valueOf(3), parseInt("3")); assertEquals(Integer.valueOf(4), parseInt("4")); assertEquals(Integer.valueOf(5), parseInt("5")); assertEquals(Integer.valueOf(6), parseInt("6")); assertEquals(Integer.valueOf(7), parseInt("7")); assertEquals(Integer.valueOf(8), parseInt("8")); assertEquals(Integer.value
@Test public void parseInt() { assertEquals(Integer.valueOf(0), parseInt("0")); assertEquals(Integer.valueOf(1), parseInt("1")); assertEquals(Integer.valueOf(2), parseInt("2")); assertEquals(Integer.valueOf(3), parseInt("3")); assertEquals(Integer.valueOf(4), parseInt("4")); assertEquals(Integer.valueOf(5), parseInt("5")); assertEquals(Integer.valueOf(6), parseInt("6")); assertEquals(Integer.valueOf(7), parseInt("7")); assertEquals(Integer.valueOf(8), parseInt("8")); assertEquals(Integer.value
@Test public void parseInt() { assertEquals(Integer.valueOf(0), parseInt("0")); assertEquals(Integer.valueOf(1), parseInt("1")); assertEquals(Integer.valueOf(2), parseInt("2")); assertEquals(Integer.valueOf(3), parseInt("3")); assertEquals(Integer.valueOf(4), parseInt("4")); assertEquals(Integer.valueOf(5), parseInt("5")); assertEquals(Integer.valueOf(6), parseInt("6")); assertEquals(Integer.valueOf(7), parseInt("7")); assertEquals(Integer.valueOf(8), parseInt("8")); assertEquals(Integer.value
@Test public void parseInt() { assertEquals(Integer.valueOf(0), parseInt("0")); assertEquals(Integer.valueOf(1), parseInt("1")); assertEquals(Integer.valueOf(2), parseInt("2")); assertEquals(Integer.valueOf(3), parseInt("3")); assertEquals(Integer.valueOf(4), parseInt("4")); assertEquals(Integer.valueOf(5), parseInt("5")); assertEquals(Integer.valueOf(6), parseInt("6")); assertEquals(Integer.valueOf(7), parseInt("7")); assertEquals(Integer.valueOf(8), parseInt("8")); assertEquals(Integer.value
@Test public void parseInt() { assertEquals(Integer.valueOf(0), parseInt("0")); assertEquals(Integer.valueOf(1), parseInt("1")); assertEquals(Integer.valueOf(2), parseInt("2")); assertEquals(Integer.valueOf(3), parseInt("3")); assertEquals(Integer.valueOf(4), parseInt("4")); assertEquals(Integer.valueOf(5), parseInt("5")); assertEquals(Integer.valueOf(6), parseInt("6")); assertEquals(Integer.valueOf(7), parseInt("7")); assertEquals(Integer.valueOf(8), parseInt("8")); assertEquals(Integer.value
@Test public void parseInt() { assertEquals(Integer.valueOf(0), parseInt("0")); assertEquals(Integer.valueOf(1), parseInt("1")); assertEquals(Integer.valueOf(2), parseInt("2")); assertEquals(Integer.valueOf(3), parseInt("3")); assertEquals(Integer.valueOf(4), parseInt("4")); assertEquals(Integer.valueOf(5), parseInt("5")); assertEquals(Integer.valueOf(6), parseInt("6")); assertEquals(Integer.valueOf(7), parseInt("7")); assertEquals(Integer.valueOf(8), parseInt("8")); assertEquals(Integer.value
@Test public void parseInt() { assertEquals(Integer.valueOf(0), parseInt("0")); assertEquals(Integer.valueOf(1), parseInt("1")); assertEquals(Integer.valueOf(2), parseInt("2")); assertEquals(Integer.valueOf(3), parseInt("3")); assertEquals(Integer.valueOf(4), parseInt("4")); assertEquals(Integer.valueOf(5), parseInt("5")); assertEquals(Integer.valueOf(6), parseInt("6")); assertEquals(Integer.valueOf(7), parseInt("7")); assertEquals(Integer.valueOf(8), parseInt("8")); assertEquals(Integer.value
@Test public void parseInt() { assertEquals(Integer.valueOf(0), parseInt("0")); assertEquals(Integer.valueOf(1), parseInt("1")); assertEquals(Integer.valueOf(2), parseInt("2")); assertEquals(Integer.valueOf(3), parseInt("3")); assertEquals(Integer.valueOf(4), parseInt("4")); assertEquals(Integer.valueOf(5), parseInt("5")); assertEquals(Integer.valueOf(6), parseInt("6")); assertEquals(Integer.valueOf(7), parseInt("7")); assertEquals(Integer.valueOf(8), parseInt("8")); assertEquals(Integer.value
@Test public void parseInt() { assertEquals(Integer.valueOf(0), parseInt("0")); assertEquals(Integer.valueOf(1), parseInt("1")); assertEquals(Integer.valueOf(2), parseInt("2")); assertEquals(Integer.valueOf(3), parseInt("3")); assertEquals(Integer.valueOf(4), parseInt("4")); assertEquals(Integer.valueOf(5), parseInt("5")); assertEquals(Integer.valueOf(6), parseInt("6")); assertEquals(Integer.valueOf(7), parseInt("7")); assertEquals(Integer.valueOf(8), parseInt("8")); assertEquals(Integer.value
@Test public void parseInt() { assertEquals(Integer.valueOf(0), parseInt("0")); assertEquals(Integer.valueOf(1), parseInt("1")); assertEquals(Integer.valueOf(2), parseInt("2")); assertEquals(Integer.valueOf(3), parseInt("3")); assertEquals(Integer.valueOf(4), parseInt("4")); assertEquals(Integer.valueOf(5), parseInt("5")); assertEquals(Integer.valueOf(6), parseInt("6")); assertEquals(Integer.valueOf(7), parseInt("7")); assertEquals(Integer.valueOf(8), parseInt("8")); assertEquals(Integer.value
@Test public void parseInt() { assertEquals(Integer.valueOf(0), parseInt("0")); assertEquals(Integer.valueOf(1), parseInt("1")); assertEquals(Integer.valueOf(2), parseInt("2")); assertEquals(Integer.valueOf(3), parseInt("3")); assertEquals(Integer.valueOf(4), parseInt("4")); assertEquals(Integer.valueOf(5), parseInt("5")); assertEquals(Integer.valueOf(6), parseInt("6")); assertEquals(Integer.valueOf(7), parseInt("7")); assertEquals(Integer.valueOf(8), parseInt("8")); assertEquals(Integer.value
@Test public void parseInt() { assertEquals(Integer.valueOf(0), parseInt("0")); assertEquals(Integer.valueOf(1), parseInt("1")); assertEquals(Integer.valueOf(2), parseInt("2")); assertEquals(Integer.valueOf(3), parseInt("3")); assertEquals(Integer.valueOf(4), parseInt("4")); assertEquals(Integer.valueOf(5), parseInt("5")); assertEquals(Integer.valueOf(6), parseInt("6")); assertEquals(Integer.valueOf(7), parseInt("7")); assertEquals(Integer.valueOf(8), parseInt("8")); assertEquals(Integer.value
@Test public void parseInt() { assertEquals(Integer.valueOf(0), parseInt("0")); assertEquals(Integer.valueOf(1), parseInt("1")); assertEquals(Integer.valueOf(2), parseInt("2")); assertEquals(Integer.valueOf(3), parseInt("3")); assertEquals(Integer.valueOf(4), parseInt("4")); assertEquals(Integer.valueOf(5), parseInt("5")); assertEquals(Integer.valueOf(6), parseInt("6")); assertEquals(Integer.valueOf(7), parseInt("7")); assertEquals(Integer.valueOf(8), parseInt("8")); assertEquals(Integer.value
@Test public void parseInt() { assertEquals(Integer.valueOf(0), parseInt("0")); assertEquals(Integer.valueOf(1), parseInt("1")); assertEquals(Integer.valueOf(2), parseInt("2")); assertEquals(Integer.valueOf(3), parseInt("3")); assertEquals(Integer.valueOf(4), parseInt("4")); assertEquals(Integer.valueOf(5), parseInt("5")); assertEquals(Integer.valueOf(6), parseInt("6")); assertEquals(Integer.valueOf(7), parseInt("7")); assertEquals(Integer.valueOf(8), parseInt("8")); assertEquals(Integer.value
@Test public void parseInt() { assertEquals(Integer.valueOf(0), parseInt("0")); assertEquals(Integer.valueOf(1), parseInt("1")); assertEquals(Integer.valueOf(2), parseInt("2")); assertEquals(Integer.valueOf(3), parseInt("3")); assertEquals(Integer.valueOf(4), parseInt("4")); assertEquals(Integer.valueOf(5), parseInt("5")); assertEquals(Integer.valueOf(6), parseInt("6")); assertEquals(Integer.valueOf(7), parseInt("7")); assertEquals(Integer.valueOf(8), parseInt("8")); assertEquals(Integer.value
@Test public void parseInt() { assertEquals(1, Integer.parseInt("1")); assertEquals(-1, Integer.parseInt("-1")); assertEquals(1, Integer.parseInt("1")); assertEquals(1, Integer.parseInt("1")); assertEquals(1, Integer.parseInt("1")); assertEquals(-1, Integer.parseInt("-1")); assertEquals(-1, Integer.parseInt("-1")); assertEquals(1, Integer.parseInt("1")); assertEquals(1, Integer.parseInt("1")); assertEquals(1, Integer.parseInt("1")); assertEquals(1, Integer.parse
@Test public void parseInt() { assertEquals(Integer.valueOf(0), parseInt("0")); assertEquals(Integer.valueOf(1), parseInt("1")); assertEquals(Integer.valueOf(2), parseInt("2")); assertEquals(Integer.valueOf(3), parseInt("3")); assertEquals(Integer.valueOf(4), parseInt("4")); assertEquals(Integer.valueOf(5), parseInt("5")); assertEquals(Integer.valueOf(6), parseInt("6")); assertEquals(Integer.valueOf(7), parseInt("7")); assertEquals(Integer.valueOf(8), parseInt("8")); assertEquals(Integer.value
@Test public void parseInt() { assertEquals(Integer.valueOf(0), parseInt("0")); assertEquals(Integer.valueOf(1), parseInt("1")); assertEquals(Integer.valueOf(2), parseInt("2")); assertEquals(Integer.valueOf(3), parseInt("3")); assertEquals(Integer.valueOf(4), parseInt("4")); assertEquals(Integer.valueOf(5), parseInt("5")); assertEquals(Integer.valueOf(6), parseInt("6")); assertEquals(Integer.valueOf(7), parseInt("7")); assertEquals(Integer.valueOf(8), parseInt("8")); assertEquals(Integer.value
@Test public void parseInt() { assertEquals(Integer.valueOf(0), parseInt("0")); assertEquals(Integer.valueOf(1), parseInt("1")); assertEquals(Integer.valueOf(2), parseInt("2")); assertEquals(Integer.valueOf(3), parseInt("3")); assertEquals(Integer.valueOf(4), parseInt("4")); assertEquals(Integer.valueOf(5), parseInt("5")); assertEquals(Integer.valueOf(6), parseInt("6")); assertEquals(Integer.valueOf(7), parseInt("7")); assertEquals(Integer.valueOf(8), parseInt("8")); assertEquals(Integer.value
@Test public void parseInt() { assertEquals(Integer.valueOf(0), parseInt("0")); assertEquals(Integer.valueOf(1), parseInt("1")); assertEquals(Integer.valueOf(2), parseInt("2")); assertEquals(Integer.valueOf(3), parseInt("3")); assertEquals(Integer.valueOf(4), parseInt("4")); assertEquals(Integer.valueOf(5), parseInt("5")); assertEquals(Integer.valueOf(6), parseInt("6")); assertEquals(Integer.valueOf(7), parseInt("7")); assertEquals(Integer.valueOf(8), parseInt("8")); assertEquals(Integer.value
@Test public void testParseLong() { String str1 = "123456789"; long value = parseLong(str1); Assert.assertEquals(123456789, value); str1 = "1234567890"; value = parseLong(str1); Assert.assertEquals(1234567890, value); str1 = "123456789012345"; value = parseLong(str1); Assert.assertEquals(123456789012345, value); str1 = "123456789012345"; value = parseLong(str1); Assert.assertEquals(123456789012345, value); str1 = "123456789012345"; value = parseLong(str1); Assert.assertEquals(
@Test public void testParseLong() { String str1 = "123456789"; long value = parseLong(str1); assertEquals(123456789, value); str1 = "1234567890"; value = parseLong(str1); assertEquals(1234567890, value); str1 = "123456789012345"; value = parseLong(str1); assertEquals(123456789012345, value); str1 = "123456789012345"; value = parseLong(str1); assertEquals(123456789012345, value); str1 = "123456789012345"; value = parseLong(str1); assertEquals(123456789012345, value); }
@Test public void testParseLong() { String str1 = "123456789"; System.out.println(parseLong(str1)); String str2 = "1234567890"; System.out.println(parseLong(str2)); str1 = "1234567890"; System.out.println(parseLong(str1)); str2 = "1234567890"; System.out.println(parseLong(str2)); str1 = "1234567890"; System.out.println(parseLong(str1)); str2 = "1234567890"; System.out.println(parseLong(str2)); str1 = "1234567890"; System.out.println(parseLong(str
@Test public void testParseLong() { String str1 = "1"; String str2 = "1.1"; String str3 = "1.1"; String str4 = "1.1"; String str5 = "1.1"; String str6 = "1.1"; String str7 = "1.1"; String str8 = "1.1"; String str9 = "1.1"; String str10 = "1.1"; String str11 = "1.1"; String str12 = "1.1"; String str13 = "1.1"; String str14 = "1.1"; String str15 = "1.1"; String str16 = "1
@Test public void testParseLongRange() { try { Assert.assertTrue(InLongRange.inLongRange("1", false)); Assert.assertTrue(InLongRange.inLongRange("1", true)); Assert.assertTrue(InLongRange.inLongRange("1", false)); Assert.assertTrue(InLongRange.inLongRange("1", true)); Assert.assertTrue(InLongRange.inLongRange("1", false)); Assert.assertTrue(InLongRange.inLongRange("1", true)); Assert.assertTrue(InLongRange.inLongRange("1", false)); Assert.assertTrue(InLongRange.inLongRange("1", true));
@Test public void testParseLongRange() { try { Assert.assertTrue(InLongRange.inLongRange("1", false)); Assert.assertTrue(InLongRange.inLongRange("1", true)); Assert.assertTrue(InLongRange.inLongRange("1", false)); Assert.assertTrue(InLongRange.inLongRange("1", true)); Assert.assertTrue(InLongRange.inLongRange("1", true)); Assert.assertTrue(InLongRange.inLongRange("1", false)); Assert.assertTrue(InLongRange.inLongRange("1", true)); Assert.assertTrue(InLongRange.inLongRange("1", false));
@Test public void testInLongRange() { try { Assert.assertTrue(InLongRange.inLongRange("1", false)); Assert.assertTrue(InLongRange.inLongRange("1", true)); Assert.assertTrue(InLongRange.inLongRange("1", false)); Assert.assertTrue(InLongRange.inLongRange("1", true)); Assert.assertTrue(InLongRange.inLongRange("1", true)); Assert.assertTrue(InLongRange.inLongRange("1", false)); Assert.assertTrue(InLongRange.inLongRange("1", true)); Assert.assertTrue(InLongRange.inLongRange("1", false));
@Test public void testInLongRange() { try { Assert.assertTrue(InLongRange.inLongRange("1", false)); Assert.assertTrue(InLongRange.inLongRange("1", true)); Assert.assertTrue(InLongRange.inLongRange("1", false)); Assert.assertTrue(InLongRange.inLongRange("1", true)); Assert.assertTrue(InLongRange.inLongRange("1", false)); Assert.assertTrue(InLongRange.inLongRange("1", true)); Assert.assertTrue(InLongRange.inLongRange("1", false)); Assert.assertTrue(InLongRange.inLongRange("1", true));
@Test public void testGetCodec() throws IOException { String json = "{\\"a\\":1, \\"b\\":2, \\"c\\":3, \\"d\\":4}"; String expected = "{\\"a\\":1, \\"b\\":2, \\"c\\":3, \\"d\\":4}"; for (int i = 0; i < json.length(); i++) { JsonObject obj = new JsonObject(); obj.addProperty("a", "1"); obj.addProperty("b", "2"); obj.addProperty("c", "3"); obj.addProperty("d", 4); obj.addProperty("e", 5); obj.add
@Test public void testGetCodec() throws IOException { String json = "{\\"a\\":1, \\"b\\":2, \\"c\\":3, \\"d\\":4}"; String expected = "{\\"a\\":1, \\"b\\":2, \\"c\\":3, \\"d\\":4}"; for (int i = 0; i < json.length(); i++) { JsonObject obj = new JsonObject(); obj.addProperty("a", "1"); obj.addProperty("b", "2"); obj.addProperty("c", "3"); obj.addProperty("d", 4); obj.addProperty("e", 5); obj.add
@Test public void testReleaseBuffered() throws IOException { ByteArrayOutputStream out = new ByteArrayOutputStream(); final JsonParserFactory factory = new JsonParserFactory(); final JsonParser parser = factory.createParser(new ByteArrayInputStream("{\\"test\\": \\"test\\"}".getBytes())); parser.setInputSource(new ByteArrayInputStream("{\\"test\\": \\"test\\"}".getBytes())); parser.setInputSource(new ByteArrayInputStream("{\\"test\\": \\"test\\"}".getBytes())); parser.setInputSource(new ByteArrayInputStream("{\\"test\\": \\"test\\"}".getBytes())); parser.setInputSource(new ByteArrayInputStream("{\\"test\\": \\"test\\"}".
@Test public void testReleaseBuffered() throws IOException { ByteArrayOutputStream out = new ByteArrayOutputStream(); JsonParserFactory factory = new JsonParserFactory(); JSONParser j = factory.createParser(new ByteArrayInputStream( "{\\"test\\":\\"test\\"}".getBytes())); j.setInputSource(new ByteArrayInputStream("{\\"test\\":\\"test\\"}".getBytes())); j.setInputSource(new ByteArrayInputStream("{\\"test\\":\\"test\\"}".getBytes())); j.setInputSource(new ByteArrayInputStream("{\\"test\\":\\"test\\"}".getBytes())); j.setInputSource(new ByteArrayInputStream("{\\"test\\":\\"test\\"}".getBytes())); j.set
@Test public void testReleaseBuffered() throws IOException { ByteArrayOutputStream out = new ByteArrayOutputStream(); JsonParser parser = new JsonParser(null, 0, new ByteArrayInputStream("{\\"foo\\":\\"bar\\"}".getBytes()), new ObjectCodec(), new BytesToNameCanonicalizer(), new byte[0], 0, 0, true); parser.setInputSource(new ByteArrayInputStream("{\\"foo\\":\\"bar\\"}".getBytes())); parser.setInputSource(new ByteArrayInputStream("{\\"foo\\":\\"baz\\"}".getBytes())); parser.setInputSource(new ByteArrayInputStream("{\\"foo\\":\\"baz\\"}".getBytes())); parser.setInputSource(new ByteArrayInputStream("
@Test public void testReleaseBuffered() throws IOException { ByteArrayOutputStream out = new ByteArrayOutputStream(); JsonParserFactory factory = new JsonParserFactory(); JsonParser parser = factory.createParser(new ByteArrayInputStream("{\\"foo\\":\\"bar\\"}".getBytes())); parser.setInputSource(new ByteArrayInputStream("{\\"foo\\":\\"bar\\"}".getBytes())); parser.setInputSource(new ByteArrayInputStream("{\\"foo\\":\\"baz\\"}".getBytes())); parser.setInputSource(new ByteArrayInputStream("{\\"foo\\":\\"baz\\"}".getBytes())); parser.setInputSource(new ByteArrayInputStream("{\\"foo\\":\\"baz\\"}".getBytes()));
@Test public void testReleaseBuffered() throws IOException { ByteArrayOutputStream out = new ByteArrayOutputStream(); UTF8StreamJsonParser parser = new UTF8StreamJsonParser(null, 0, new ByteArrayInputStream("{\\"foo\\":\\"bar\\"}".getBytes()), new JsonCodec(), new BytesToNameCanonicalizer(), new byte[0], 0, 0, true); parser.setInputSource(new ByteArrayInputStream("{\\"foo\\":\\"bar\\"}".getBytes())); parser.setInputSource(new ByteArrayInputStream("{\\"foo\\":\\"baz\\"}".getBytes())); assertEquals("{\\"foo\\":\\"bar\\"}", new String(out.toByteArray(), StandardCharsets.UTF_8));
@Test public void testReleaseBuffered() throws IOException { ByteArrayOutputStream out = new ByteArrayOutputStream(); JsonParserFactory factory = new JsonParserFactory(); JSONParser j = factory.createParser(new ByteArrayInputStream( "{\\"test\\":\\"test\\"}".getBytes())); j.setInputSource(new ByteArrayInputStream("{\\"test\\":\\"test\\"}".getBytes())); j.setInputSource(new ByteArrayInputStream("{\\"test\\":\\"test\\"}".getBytes())); j.setInputSource(new ByteArrayInputStream("{\\"test\\":\\"test\\"}".getBytes())); j.setInputSource(new ByteArrayInputStream("{\\"test\\":\\"test\\"}".getBytes())); j.set
@Test public void testGetText2() throws IOException, JsonParseException { final JsonParserFactory factory = new JsonParserFactory(); final JsonParser parser = factory.createParser(new StringReader("{ \\"foo\\": \\"bar\\" }")); assertEquals("{ \\"foo\\": \\"bar\\" }", parser.getText2(JsonToken.VALUE_STRING)); assertEquals("{\\"foo\\": \\"bar\\" }", parser.getText2(JsonToken.VALUE_NUMBER_INT)); assertEquals("{\\"foo\\": \\"bar\\" }", parser.getText2(JsonToken.VALUE_NUMBER_FLOAT)); assertEquals("{\\"foo\\": \\"
@Test public void testGetTextCharacters() throws Exception { ObjectCodec c = new ObjectCodec(); c.setCodec(c); InputStream in = getClass().getClassLoader().getResourceAsStream("test.json"); String text = new String(IOUtils.toByteArray(in), Charsets.UTF_8); String text2 = new String(IOUtils.toByteArray(in), Charsets.UTF_8); String text3 = new String(IOUtils.toByteArray(in), Charsets.UTF_8); String text4 = new String(IOUtils.toByteArray(in), Charsets.UTF_8); String text5 = new String(IOUtils.toByteArray(in), Charsets.
@Test public void testGetTextLength() throws IOException, JsonParseException { final JsonParserFactory factory = new JsonParserFactory(); final InputStream is = getClass().getResourceAsStream("test.json"); final JsonParser parser = factory.createParser(is, new ByteArrayInputStream(new byte[0])); final JsonParser.Token token = parser.nextToken(); assertEquals(0, token.getTextLength()); token = parser.nextToken(); assertEquals(0, token.getTextLength()); token = parser.nextToken(); assertEquals(0, token.getTextLength()); token = parser.nextToken(); assertEquals(0, token.getTextLength()); token = parser.nextToken(); assertEquals(
@Test public void testGetTextOffset() throws IOException, JsonParseException { JsonParser j = new JsonParser(null, 0, null, new byte[0], 0, 0, false); j.nextToken(); j.getTextOffset(); assertEquals("Unexpected text offset", 0, j.getTextOffset()); j.nextToken(); j.getTextOffset(); assertEquals("Unexpected text offset", 0, j.getTextOffset()); j.nextToken(); j.getTextOffset(); assertEquals("Unexpected text offset", 0, j.getTextOffset()); j.nextToken(); j.getTextOffset(); assertEquals("Unexpected text offset", 0, j.getTextOffset()); j.nextToken
@Test(expected=JsonParseException.class) public void test_nextTokenNotInObject_INT_3() throws JsonParseException, IOException { JsonParser<Integer> jsonParser = new JsonParser<Integer>(new IOContext(), 0, null, new ObjectCodec(), null); jsonParser._nextTokenNotInObject(JsonParser.INT_3); }
@Test(expected = JsonParseException.class) public void test_nextTokenNotInObject_INT_3() throws JsonParseException, IOException { JsonParser<Integer> jsonParser = new JsonParser<Integer>(new IOContext(), 0, null); jsonParser._nextTokenNotInObject(JsonParser.INT_3); }
@Test(expected = JsonParseException.class) public void test_nextTokenNotInObject() throws JsonParseException, IOException { JsonParserFactory factory = new JsonParserFactory(); ObjectCodec codec = new ObjectCodec(); InputStream in = new ByteArrayInputStream("{\\"foo\\":\\"bar\\"}".getBytes()); JsonParser parser = factory.createParser(new ByteArrayInputStream(in.getBytes())); parser._nextTokenNotInObject(JsonParser.INT_VALUE); }
@Test(expected=JsonParseException.class) public void test_reportUnexpectedChar_INT_3() throws JsonParseException, IOException { JsonParser<Integer> jsonParser = new JsonParser<Integer>(new IOContext(), 0, null); jsonParser._nextTokenNotInObject(JsonParser.INT_3); }
@Test(expected = JsonParseException.class) public void test_nextTokenNotInObject_INT_3() throws JsonParseException, IOException { JsonParser<Integer> jsonParser = new JsonParser<Integer>(new IOContext(), 0, null, new ObjectCodec(), null); jsonParser._nextTokenNotInObject(JsonParser.INT_3); }
@Test public void testValidateNoLeadingZeroes() throws IOException { final Charset charset = Charset.forName("UTF-8"); final String json = "{\\n" + " \\"test\\": {\\n" + " \\"test1\\": 1,\\n" + " \\"test2\\": 2,\\n" + " \\"test3\\": 3,\\n" + " \\"test4\\": 4,\\n" + " \\"test5\\": 5,\\n" + " \\"test6\\": 6,\\n" + " \\"test7\\": 7,\\n" + " \\"test8\\": 8,\\
@Test(expected = JsonParseException.class) public void testValidateNoLeadingZeroes() throws IOException { final Charset charset = Charset.forName("UTF-8"); final String json = "{\\n" + " \\"test\\": {\\n" + " \\"test1\\": 1,\\n" + " \\"test2\\": 2,\\n" + " \\"test3\\": 3,\\n" + " \\"test4\\": 4,\\n" + " \\"test5\\": 5,\\n" + " \\"test6\\": 6,\\n" + " \\"test7\\": 7,\\n" + " \\
@Test public void test_verifyNoLeadingZeroes() throws IOException { final Charset charset = Charset.forName("UTF-8"); final InputStream in = getClass().getClassLoader().getResourceAsStream("test.json"); final Charset charset1 = Charset.forName("UTF-8"); final InputStream in2 = getClass().getClassLoader().getResourceAsStream("test2.json"); final Charset charset2 = Charset.forName("UTF-8"); final InputStream in3 = getClass().getClassLoader().getResourceAsStream("test3.json"); final Charset charset3 = Charset.forName("UTF-8"); final InputStream in4 = getClass().getClassLoader().getResourceAsStream("test4.json"); final Charset charset4
@Test public void test_verifyNoLeadingZeroes() throws IOException { final Charset charset = Charset.forName("UTF-8"); final String json = "{\\n" + " \\"test\\": {\\n" + " \\"test1\\": 1,\\n" + " \\"test2\\": 2,\\n" + " \\"test3\\": 3,\\n" + " \\"test4\\": 4,\\n" + " \\"test5\\": 5,\\n" + " \\"test6\\": 6,\\n" + " \\"test7\\": 7,\\n" + " \\"test8\\": 8,
@Test public void testVerifyNoLeadingZeroes() throws IOException { final Charset charset = Charset.forName("UTF-8"); final InputStream in = getClass().getResourceAsStream("test-test-1.txt"); final Charset charset2 = Charset.forName("UTF-8"); final Charset charset3 = Charset.forName("UTF-8"); final InputStream in2 = getClass().getResourceAsStream("test-test-2.txt"); final Charset charset4 = Charset.forName("UTF-8"); final InputStream in3 = getClass().getResourceAsStream("test-test-3.txt"); final Charset charset5 = Charset.forName("UTF-8"); final InputStream in4 = getClass().getResource
@Test(expected = JsonParseException.class) public void testVerifyNoLeadingZeroes() throws IOException { final JsonParserFactory factory = new JsonParserFactory(); final JsonParser parser = factory.getParser(new ByteArrayInputStream("{\\"test\\":1}".getBytes())); parser.setInputSource(new ByteArrayInputStream("{\\"test\\":1}".getBytes())); parser.setInputSource(new ByteArrayInputStream("{\\"test\\":2}".getBytes())); parser.setInputSource(new ByteArrayInputStream("{\\"test\\":3}".getBytes())); parser.setInputSource(new ByteArrayInputStream("{\\"test\\":4}".getBytes())); parser.setInputSource(
@Test public void testValidateNoLeadingZeroes() throws IOException { final Charset charset = Charset.forName("UTF-8"); final Charset charset1 = Charset.forName("UTF-8"); final Charset charset2 = Charset.forName("UTF-8"); final Charset charset3 = Charset.forName("UTF-8"); final Charset charset4 = Charset.forName("UTF-8"); final Charset charset5 = Charset.forName("UTF-8"); final Charset charset6 = Charset.forName("UTF-8"); final Charset charset7 = Charset.forName("UTF-8"); final Charset charset8 = Charset.forName("UTF-8"); final Charset charset9 = Charset.forName
@Test(expected = JsonParseException.class) public void testVerifyNoLeadingZeroes() throws IOException { final JsonParserFactory factory = new JsonParserFactory(); final JsonParser parser = factory.createParser(new ByteArrayInputStream("{\\"test\\":1}".getBytes())); parser.setInputSource(new ByteArrayInputStream("{\\"test\\":1}".getBytes())); parser.getText("test"); }
@Test public void testVerifyNoLeadingZeroes() throws IOException { final Charset charset = Charset.forName("UTF-8"); final InputStream in = getClass().getResourceAsStream("test-test-1.txt"); final Charset charset2 = Charset.forName("UTF-8"); final Charset charset3 = Charset.forName("UTF-8"); final InputStream in2 = getClass().getResourceAsStream("test-test-2.txt"); final Charset charset4 = Charset.forName("UTF-8"); final InputStream in3 = getClass().getResourceAsStream("test-test-3.txt"); final Charset charset5 = Charset.forName("UTF-8"); final InputStream in4 = getClass().getResource
@Test(expected = JsonParseException.class) public void test_verifyNoLeadingZeroes() throws JsonParseException, IOException { final JsonParserFactory factory = new JsonParserFactory(); final JsonParser parser = factory.getParser(new ByteArrayInputStream("{\\"test\\":1}".getBytes())); final JsonObject json = new JsonObject(); json.addProperty("test", 1); json.addProperty("test", 2); json.addProperty("test", 3); parser.setInputSource(new ByteArrayInputStream("{\\"test\\":1,\\"test\\":2}".getBytes())); parser.setInputSource(new ByteArrayInputStream("{\\"test\\":3,\\"test\\":4}".getBytes
@Test public void test_verifyNoLeadingZeroes() throws IOException { final Charset charset = Charset.forName("UTF-8"); final String json = "{\\n" + " \\"test\\": {\\n" + " \\"test1\\": 1,\\n" + " \\"test2\\": 2,\\n" + " \\"test3\\": 3,\\n" + " \\"test4\\": 4,\\n" + " \\"test5\\": 5,\\n" + " \\"test6\\": 6,\\n" + " \\"test7\\": 7,\\n" + " \\"test8\\": 8,
@Test(expected = JsonParseException.class) public void testParseMediumFieldNameInvalid() throws IOException, JsonParseException { final int[] code = new int[] {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
@Test public void parseMediumFieldName() throws IOException, JsonParseException { final int[] code = new int[] {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
@Test public void parseLongFieldName() throws IOException, JsonParseException { final Name[] names = { new Name("abc"), new Name("abc", "abc"), new Name("abc", "abc"), new Name("abc", "abc"), new Name("abc", "abc"), new Name("abc", "abc"), new Name("abc", "abc"), new Name("abc", "abc"), new Name("abc", "abc"), new Name("abc", "abc"), new Name("abc", "abc"), new Name("abc", "abc"), new Name("abc", "abc"), new Name("abc", "abc"), new Name("abc", "
@Test(expected = JsonParseException.class) public void parseLongFieldNameInvalid() throws IOException, JsonParseException { int length = 0; long t0 = System.nanoTime(); long t1 = System.nanoTime() - t0; long t2 = System.nanoTime() - t1; long t3 = System.nanoTime() - t2; long t4 = System.nanoTime() - t3; long t5 = System.nanoTime() - t4; Map<String, Object> map = new HashMap<String, Object>(); map.put("t1", t1); map.put("t2", t2); map.put("t
@Test public void parseLongFieldName() throws IOException, JsonParseException { final Name[] names = { new Name("", "foo"), new Name("", "foo"), new Name("", "foo"), new Name("foo", "foo"), new Name("foo", "foo"), new Name("foo", "foo"), new Name("foo", "foo"), new Name("foo", "foo"), new Name("foo", "foo"), new Name("foo", "foo"), new Name("foo", "foo"), new Name("foo", "foo"), new Name("foo", "foo"), new Name("foo", "foo"), new Name("foo", "
@Test public void parseLongFieldName() throws IOException, JsonParseException { final Name[] names = { new Name("", "foo"), new Name("", "foo"), new Name("", "foo"), new Name("", "foo"), new Name("foo", "foo"), new Name("foo", "foo"), new Name("foo", "foo"), new Name("foo", "foo"), new Name("foo", "foo"), new Name("foo", "foo"), new Name("foo", "foo"), new Name("foo", "foo"), new Name("foo", "foo"), new Name("foo", "foo"), new Name("foo", "foo
@Test public void parseLongFieldName() throws IOException, JsonParseException { final Name[] names = new Name[] { new Name("1"), new Name("2"), new Name("3"), new Name("4"), new Name("5"), new Name("6"), new Name("7"), new Name("8"), new Name("9"), new Name("10"), new Name("11"), new Name("12"), new Name("13"), new Name("14"), new Name("15"), new Name("16"), new Name("17"), new Name("18"), new Name("19"), new Name("20"), new Name("21"),
@Test public void parseLongFieldName() throws IOException, JsonParseException { final Name[] names = { new Name("abc"), new Name("abc", "abc"), new Name("abc", "abc"), new Name("abc", "abc"), new Name("abc", "abc"), new Name("abc", "abc"), new Name("abc", "abc"), new Name("abc", "abc"), new Name("abc", "abc"), new Name("abc", "abc"), new Name("abc", "abc"), new Name("abc", "abc"), new Name("abc", "abc"), new Name("abc", "abc"), new Name("abc", "
@Test(expected = JsonParseException.class) public void parseLongFieldNameInvalid() throws IOException, JsonParseException { int length = 0; long t0 = System.nanoTime(); long t1 = System.nanoTime() - t0; long t2 = System.nanoTime() - t1; long t3 = System.nanoTime() - t2; long t4 = System.nanoTime() - t3; long t5 = System.nanoTime() - t4; Map<String, Object> map = new HashMap<String, Object>(); map.put("t1", t1); map.put("t2", t2); map.put("t
@Test public void parseLongFieldName() throws IOException, JsonParseException { final Name[] names = { new Name("", "foo"), new Name("", "foo"), new Name("", "foo"), new Name("foo", "foo"), new Name("foo", "foo"), new Name("foo", "foo"), new Name("foo", "foo"), new Name("foo", "foo"), new Name("foo", "foo"), new Name("foo", "foo"), new Name("foo", "foo"), new Name("foo", "foo"), new Name("foo", "foo"), new Name("foo", "foo"), new Name("foo", "
@Test public void parseLongFieldName() throws IOException, JsonParseException { final Name[] names = { new Name("", "foo"), new Name("", "foo"), new Name("", "foo"), new Name("", "foo"), new Name("foo", "foo"), new Name("foo", "foo"), new Name("foo", "foo"), new Name("foo", "foo"), new Name("foo", "foo"), new Name("foo", "foo"), new Name("foo", "foo"), new Name("foo", "foo"), new Name("foo", "foo"), new Name("foo", "foo"), new Name("foo", "foo
@Test public void parseLongFieldName() throws IOException, JsonParseException { final Name[] names = { new Name("", "foo"), new Name("", "foo"), new Name("", "foo"), new Name("foo", "foo"), new Name("foo", "foo"), new Name("foo", "foo"), new Name("foo", "foo"), new Name("foo", "foo"), new Name("foo", "foo"), new Name("foo", "foo"), new Name("foo", "foo"), new Name("foo", "foo"), new Name("foo", "foo"), new Name("foo", "foo"), new Name("foo", "
@Test public void parseLongFieldName() throws IOException, JsonParseException { final Name[] names = { new Name("abc"), new Name("abc", "abc"), new Name("abc", "abc"), new Name("abc", "abc"), new Name("abc", "abc"), new Name("abc", "abc"), new Name("abc", "abc"), new Name("abc", "abc"), new Name("abc", "abc"), new Name("abc", "abc"), new Name("abc", "abc"), new Name("abc", "abc"), new Name("abc", "abc"), new Name("abc", "abc"), new Name("abc", "
@Test(expected = JsonParseException.class) public void parseLongFieldNameInvalid() throws IOException, JsonParseException { int length = 0; long t0 = System.nanoTime(); long t1 = System.nanoTime() - t0; long t2 = System.nanoTime() - t1; long t3 = System.nanoTime() - t2; long t4 = System.nanoTime() - t3; long t5 = System.nanoTime() - t4; Map<String, Object> map = new HashMap<String, Object>(); map.put("t1", t1); map.put("t2", t2); map.put("t
@Test public void parseLongFieldName() throws IOException, JsonParseException { final Name[] names = { new Name("", "foo"), new Name("", "foo"), new Name("", "foo"), new Name("foo", "foo"), new Name("foo", "foo"), new Name("foo", "foo"), new Name("foo", "foo"), new Name("foo", "foo"), new Name("foo", "foo"), new Name("foo", "foo"), new Name("foo", "foo"), new Name("foo", "foo"), new Name("foo", "foo"), new Name("foo", "foo"), new Name("foo", "
@Test public void parseLongFieldName() throws IOException, JsonParseException { final Name[] names = { new Name("", "foo"), new Name("", "foo"), new Name("", "foo"), new Name("foo", "foo"), new Name("foo", "foo"), new Name("foo", "foo"), new Name("foo", "foo"), new Name("foo", "foo"), new Name("foo", "foo"), new Name("foo", "foo"), new Name("foo", "foo"), new Name("foo", "foo"), new Name("foo", "foo"), new Name("foo", "foo"), new Name("foo", "
@Test public void parseLongFieldName() throws Exception { final Name[] names = { new Name("1"), new Name("2"), new Name("3"), new Name("4"), new Name("5"), new Name("6"), new Name("7"), new Name("8"), new Name("9"), new Name("10"), new Name("11"), new Name("12"), new Name("13"), new Name("14"), new Name("15"), new Name("16"), new Name("17"), new Name("18"), new Name("19"), new Name("20"), new Name("21"), new Name("22"),
@Test public void parseLongFieldName() throws IOException, JsonParseException { final Name[] names = { new Name("", "foo"), new Name("", "foo"), new Name("foo", "foo"), new Name("foo", "foo"), new Name("foo", "foo"), new Name("foo", "foo"), new Name("foo", "foo"), new Name("foo", "foo"), new Name("foo", "foo"), new Name("foo", "foo"), new Name("foo", "foo"), new Name("foo", "foo"), new Name("foo", "foo"), new Name("foo", "foo"), new Name("foo",
@Test public void parseLongFieldName() throws IOException, JsonParseException { final Name[] names = { new Name("abc"), new Name("abc", "abc"), new Name("abc", "abc"), new Name("abc", "abc"), new Name("abc", "abc"), new Name("abc", "abc"), new Name("abc", "abc"), new Name("abc", "abc"), new Name("abc", "abc"), new Name("abc", "abc"), new Name("abc", "abc"), new Name("abc", "abc"), new Name("abc", "abc"), new Name("abc", "abc"), new Name("abc", "
@Test(expected = JsonParseException.class) public void addName() throws JsonParseException { String text = "{\\n" + " \\"data\\": {\\n" + " \\"data\\": {\\n" + " \\"data\\": {\\n" + " \\"data\\": {\\n" + " \\"data\\": {\\n" + " \\"data\\": {\\n" + " \\"data\\": {\\n" + " \\"data\\": {\\n" + " \\"data\\": {\\n" + " \\"data\\": {\\n" + " \\"data\\": {\\n" +
@Test public void addName() throws JsonParseException { String text = "{\\n" + " \\"name\\": {\\n" + " \\"type\\": \\"string\\"\\n" + " },\\n" + " {\\n" + " \\"type\\": \\"string\\"\\n" + " },\\n" + " {\\n" + " \\"type\\": \\"string\\"\\n" + " },\\n" + " {\\n" + " \\"type\\": \\"string\\"\\n" + " },\\n" + " {\\n" + " \\"type\\": \\"string\\"\\n" +
@Test(expected = JsonParseException.class) public void addName() throws JsonParseException { String text = "{\\n" + " \\"data\\": {\\n" + " \\"data\\": {\\n" + " \\"data\\": {\\n" + " \\"data\\": {\\n" + " \\"data\\": {\\n" + " \\"data\\": {\\n" + " \\"data\\": {\\n" + " \\"data\\": {\\n" + " \\"data\\": {\\n" + " \\"data\\": {\\n" + " \\"data\\": {\\n" +
@Test(expected = JsonParseException.class) public void addName() throws JsonParseException { String text = "{\\n" + " \\"data\\": {\\n" + " \\"data\\": {\\n" + " \\"data\\": {\\n" + " \\"data\\": {\\n" + " \\"data\\": {\\n" + " \\"data\\": {\\n" + " \\"data\\": {\\n" + " \\"data\\": {\\n" + " \\"data\\": {\\n" + " \\"data\\": {\\n" + " \\"data\\": {\\n" +
@Test public void addName() throws JsonParseException { String text = "{\\n" + " \\"name\\": {\\n" + " \\"type\\": \\"string\\"\\n" + " },\\n" + " {\\n" + " \\"type\\": \\"string\\"\\n" + " },\\n" + " {\\n" + " \\"type\\": \\"string\\"\\n" + " },\\n" + " {\\n" + " \\"type\\": \\"string\\"\\n" + " },\\n" + " {\\n" + " \\"type\\": \\"string\\"\\n" +
@Test(expected = JsonParseException.class) public void addName() throws JsonParseException { String line = "{\\n" + " \\"data\\": {\\n" + " \\"type\\": \\"string\\"\\n" + " },\\n" + " \\"data\\": {\\n" + " \\"type\\": \\"string\\"\\n" + " },\\n" + " \\"data\\": {\\n" + " \\"type\\": \\"string\\"\\n" + " },\\n" + " \\"data\\": {\\n" + " \\"type\\": \\"string\\"\\n" + " },\\
@Test(expected = JsonParseException.class) public void addName() throws JsonParseException { String text = "{\\n" + " \\"data\\": {\\n" + " \\"data\\": {\\n" + " \\"data\\": {\\n" + " \\"data\\": {\\n" + " \\"data\\": {\\n" + " \\"data\\": {\\n" + " \\"data\\": {\\n" + " \\"data\\": {\\n" + " \\"data\\": {\\n" + " \\"data\\": {\\n" + " \\"data\\": {\\n" +
@Test public void addName() throws JsonParseException { String text = "{\\n" + " \\"data\\": {\\n" + " \\"data\\": {\\n" + " \\"data\\": {\\n" + " \\"data\\": {\\n" + " \\"data\\": {\\n" + " \\"data\\": {\\n" + " \\"data\\": {\\n" + " \\"data\\": {\\n" + " \\"data\\": {\\n" + " \\"data\\": {\\n" + " \\"data\\": {\\n" + " \\"data\\": {\\
@Test public void addName() throws JsonParseException { String line = "{\\n" + " \\"name\\": {\\n" + " \\"type\\": \\"string\\"\\n" + " },\\n" + " \\"name2\\": {\\n" + " \\"type\\": \\"string\\"\\n" + " },\\n" + " \\"name3\\": {\\n" + " \\"type\\": \\"string\\"\\n" + " },\\n" + " \\"name4\\": {\\n" + " \\"type\\": \\"string\\"\\n" + " },\\n" + " \\
@Test public void addName() throws JsonParseException { String text = "{\\n" + " \\"data\\": {\\n" + " \\"data\\": {\\n" + " \\"data\\": {\\n" + " \\"data\\": {\\n" + " \\"data\\": {\\n" + " \\"data\\": {\\n" + " \\"data\\": {\\n" + " \\"data\\": {\\n" + " \\"data\\": {\\n" + " \\"data\\": {\\n" + " \\"data\\": {\\n" + " \\"data\\": {\\
@Test public void addName() throws JsonParseException { String json = "{\\n" + " \\"name\\": {\\n" + " \\"q\\": 1,\\n" + " \\"q\\": 2,\\n" + " \\"q\\": 3,\\n" + " \\"q\\": 4,\\n" + " \\"q\\": 5,\\n" + " \\"q\\": 6,\\n" + " \\"q\\": 7,\\n" + " \\"q\\": 8,\\n" + " \\"q\\": 9,\\n" + " \\"q\\": 10,\\n
@Test public void addName() throws JsonParseException { String line = "{\\n" + " \\"data\\": {\\n" + " \\"data\\": {\\n" + " \\"data\\": {\\n" + " \\"data\\": {\\n" + " \\"data\\": {\\n" + " \\"data\\": {\\n" + " \\"data\\": {\\n" + " \\"data\\": {\\n" + " \\"data\\": {\\n" + " \\"data\\": {\\n" + " \\"data\\": {\\n" + " \\"data\\": {\\
@Test public void addName() throws JsonParseException { String text = "{\\n" + " \\"data\\": {\\n" + " \\"data\\": {\\n" + " \\"data\\": {\\n" + " \\"data\\": {\\n" + " \\"data\\": {\\n" + " \\"data\\": {\\n" + " \\"data\\": {\\n" + " \\"data\\": {\\n" + " \\"data\\": {\\n" + " \\"data\\": {\\n" + " \\"data\\": {\\n" + " \\"data\\": {\\
@Test public void addName() throws JsonParseException { String json = "{\\n" + " \\"name\\": {\\n" + " \\"type\\": \\"string\\"\\n" + " },\\n" + " \\"name2\\": {\\n" + " \\"type\\": \\"string\\"\\n" + " },\\n" + " \\"name3\\": {\\n" + " \\"type\\": \\"string\\"\\n" + " },\\n" + " \\"name4\\": {\\n" + " \\"type\\": \\"string\\"\\n" + " },\\n" + " \\
@Test public void addName() throws JsonParseException { String text = "{\\n" + " \\"data\\": {\\n" + " \\"data\\": {\\n" + " \\"data\\": {\\n" + " \\"data\\": {\\n" + " \\"data\\": {\\n" + " \\"data\\": {\\n" + " \\"data\\": {\\n" + " \\"data\\": {\\n" + " \\"data\\": {\\n" + " \\"data\\": {\\n" + " \\"data\\": {\\n" + " \\"data\\": {\\
@Test(expected = JsonParseException.class) public void addName() throws JsonParseException { String line = "{\\n" + " \\"data\\": {\\n" + " \\"type\\": \\"string\\"\\n" + " },\\n" + " \\"data\\": {\\n" + " \\"type\\": \\"string\\"\\n" + " },\\n" + " \\"data\\": {\\n" + " \\"type\\": \\"string\\"\\n" + " },\\n" + " \\"data\\": {\\n" + " \\"type\\": \\"string\\"\\n" + " },\\
@Test public void addName() throws JsonParseException { String text = "{\\n" + " \\"data\\": {\\n" + " \\"data\\": {\\n" + " \\"data\\": {\\n" + " \\"data\\": {\\n" + " \\"data\\": {\\n" + " \\"data\\": {\\n" + " \\"data\\": {\\n" + " \\"data\\": {\\n" + " \\"data\\": {\\n" + " \\"data\\": {\\n" + " \\"data\\": {\\n" + " \\"data\\": {\\
@Test public void addName() throws JsonParseException { String json = "{\\n" + " \\"name\\": {\\n" + " \\"q\\": 1,\\n" + " \\"q\\": 2,\\n" + " \\"q\\": 3,\\n" + " \\"q\\": 4,\\n" + " \\"q\\": 5,\\n" + " \\"q\\": 6,\\n" + " \\"q\\": 7,\\n" + " \\"q\\": 8,\\n" + " \\"q\\": 9,\\n" + " \\"q\\": 10,\\n
@Test public void addName() throws JsonParseException { String line = "{\\n" + " \\"data\\": {\\n" + " \\"data\\": {\\n" + " \\"data\\": {\\n" + " \\"data\\": {\\n" + " \\"data\\": {\\n" + " \\"data\\": {\\n" + " \\"data\\": {\\n" + " \\"data\\": {\\n" + " \\"data\\": {\\n" + " \\"data\\": {\\n" + " \\"data\\": {\\n" + " \\"data\\": {\\
@Test public void addName() throws JsonParseException { String text = "{\\n" + " \\"data\\": {\\n" + " \\"data\\": {\\n" + " \\"data\\": {\\n" + " \\"data\\": {\\n" + " \\"data\\": {\\n" + " \\"data\\": {\\n" + " \\"data\\": {\\n" + " \\"data\\": {\\n" + " \\"data\\": {\\n" + " \\"data\\": {\\n" + " \\"data\\": {\\n" + " \\"data\\": {\\
@Test public void addName() throws JsonParseException { String json = "{\\n" + " \\"name\\": {\\n" + " \\"type\\": \\"string\\"\\n" + " },\\n" + " \\"name2\\": {\\n" + " \\"type\\": \\"string\\"\\n" + " },\\n" + " \\"name3\\": {\\n" + " \\"type\\": \\"string\\"\\n" + " },\\n" + " \\"name4\\": {\\n" + " \\"type\\": \\"string\\"\\n" + " },\\n" + " \\
@Test public void addName() throws JsonParseException { String json = "{\\n" + " \\"data\\": {\\n" + " \\"name\\": {\\n" + " \\"type\\": \\"string\\"\\n" + " },\\n" + " \\"data\\": {\\n" + " \\"type\\": \\"string\\"\\n" + " },\\n" + " \\"data\\": {\\n" + " \\"type\\": \\"string\\"\\n" + " },\\n" + " \\"data\\": {\\n" + " \\"type\\": \\"string\\"\\n" +
@Test public void addName() throws JsonParseException { String text = "{\\n" + " \\"name\\": {\\n" + " \\"q\\": 1,\\n" + " \\"q\\": 2,\\n" + " \\"q\\": 3,\\n" + " \\"q\\": 4,\\n" + " \\"q\\": 5,\\n" + " \\"q\\": 6,\\n" + " \\"q\\": 7,\\n" + " \\"q\\": 8,\\n" + " \\"q\\": 9,\\n" + " \\"q\\": 10,\\n
@Test(expected = JsonParseException.class) public void test_finishString2() throws JsonParseException, IOException { final String data = "{\\n" + " \\"a\\": {\\n" + " \\"b\\": {\\n" + " \\"c\\": {\\n" + " \\"d\\": {\\n" + " \\"e\\": {\\n" + " \\"b\\": {\\n" + " \\"c\\": {\\n" + " \\"d\\": {\\n" + " \\"e\\": {\\n" + " \\"b\\": {\\n" + " \\"c\\
@Test(expected = JsonParseException.class) public void test_finishString2() throws JsonParseException, IOException { final String data = "{\\n" + " \\"a\\": {\\n" + " \\"b\\": {\\n" + " \\"c\\": {\\n" + " \\"d\\": {\\n" + " \\"e\\": {\\n" + " \\"b\\": {\\n" + " \\"c\\": {\\n" + " \\"d\\": {\\n" + " \\"e\\": {\\n" + " \\"b\\": {\\n" + " \\"c\\
@Test(expected = JsonParseException.class) public void test_finishString2() throws JsonParseException, IOException { final String data = "{\\n" + " \\"a\\": {\\n" + " \\"b\\": {\\n" + " \\"c\\": {\\n" + " \\"d\\": {\\n" + " \\"e\\": {\\n" + " \\"b\\": {\\n" + " \\"c\\": {\\n" + " \\"d\\": {\\n" + " \\"e\\": {\\n" + " \\"b\\": {\\n" + " \\"c\\
@Test(expected = JsonParseException.class) public void test_finishString2() throws JsonParseException, IOException { final String data = "{\\n" + " \\"a\\": {\\n" + " \\"b\\": {\\n" + " \\"c\\": {\\n" + " \\"d\\": {\\n" + " \\"e\\": {\\n" + " \\"b\\": {\\n" + " \\"c\\": {\\n" + " \\"d\\": {\\n" + " \\"e\\": {\\n" + " \\"b\\": {\\n" + " \\"c\\
@Test(expected = JsonParseException.class) public void test_finishString2() throws JsonParseException, IOException { final ByteString data = ByteString.copyFromUtf8(new byte[] { \'a\', \'b\', \'c\' }); final ByteString data2 = ByteString.copyFromUtf8(new byte[] { \'a\', \'b\', \'c\' }); final ByteString data3 = ByteString.copyFromUtf8(new byte[] { \'a\', \'b\', \'c\' }); final ByteString data4 = ByteString.copyFromUtf8(new byte[] { \'a\', \'b\', \'c\' }); final ByteString data5 = ByteString.copyFromUtf8(new byte[] { \'a\', \'b
@Test(expected = JsonParseException.class) public void _finishString2() throws JsonParseException, IOException { final ByteString data = ByteString.copyFromUtf8(new byte[] { \'\\n\', \'\\t\' }); final ByteString data2 = ByteString.copyFromUtf8(new byte[] { \'\\n\', \'\\t\' }); final ByteString data3 = ByteString.copyFromUtf8(new byte[] { \'\\n\', \'\\t\' }); final ByteString data4 = ByteString.copyFromUtf8(new byte[] { \'\\n\', \'\\t\' }); final ByteString data5 = ByteString.copyFromUtf8(new byte[] { \'\\n\', \'\\t\' }); final
@Test(expected = JsonParseException.class) public void test_finishString2() throws JsonParseException, IOException { final String data = "{\\n" + " \\"a\\": {\\n" + " \\"b\\": {\\n" + " \\"c\\": {\\n" + " \\"d\\": [\\n" + " \\"e\\",\\n" + " \\"f\\",\\n" + " \\"g\\",\\n" + " \\"h\\",\\n" + " \\"i\\",\\n" + " \\"j\\",\\n" + " \\"k\\",\\n" + "
@Test(expected = JsonParseException.class) public void test_finishString2() throws JsonParseException, IOException { final String data = "{\\n" + " \\"a\\": {\\n" + " \\"b\\": {\\n" + " \\"c\\": {\\n" + " \\"d\\": {\\n" + " \\"e\\": {\\n" + " \\"b\\": {\\n" + " \\"c\\": {\\n" + " \\"d\\": {\\n" + " \\"e\\": {\\n" + " \\"b\\": {\\n" + " \\"c\\
@Test(expected = JsonParseException.class) public void test_finishString2() throws JsonParseException, IOException { final String data = "{\\n" + " \\"a\\": \\"b\\",\\n" + " \\"c\\": [\\n" + " \\"d\\",\\n" + " \\"e\\",\\n" + " \\"f\\",\\n" + " \\"g\\",\\n" + " \\"h\\",\\n" + " \\"i\\",\\n" + " \\"j\\",\\n" + " \\"k\\",\\n" + " \\"l\\",\\n"
@Test(expected = JsonParseException.class) public void test_finishString2() throws JsonParseException, IOException { final String data = "{\\n" + " \\"a\\": {\\n" + " \\"b\\": {\\n" + " \\"c\\": {\\n" + " \\"d\\": [\\n" + " \\"e\\",\\n" + " \\"f\\",\\n" + " \\"g\\",\\n" + " \\"h\\",\\n" + " \\"i\\",\\n" + " \\"j\\",\\n" + " \\"k\\",\\n" + "
@Test(expected = JsonParseException.class) public void test_finishString2() throws JsonParseException, IOException { final String data = "{\\n" + " \\"a\\": {\\n" + " \\"b\\": {\\n" + " \\"c\\": {\\n" + " \\"d\\": {\\n" + " \\"e\\": {\\n" + " \\"b\\": {\\n" + " \\"c\\": {\\n" + " \\"d\\": {\\n" + " \\"e\\": {\\n" + " \\"b\\": {\\n" + " \\"c\\
@Test(expected = JsonParseException.class) public void test_finishString2() throws JsonParseException, IOException { final byte[] data = new byte[] { \'a\', \'b\', \'c\' }; final byte[] data2 = new byte[] { \'a\', \'b\', \'c\' }; final byte[] data3 = new byte[] { \'a\', \'b\', \'c\' }; final byte[] data4 = new byte[] { \'a\', \'b\', \'c\' }; final byte[] data5 = new byte[] { \'a\', \'b\', \'c\' }; final byte[] data6 = new byte[] { \'a\', \'b\', \'c\' }
@Test(expected = JsonParseException.class) public void test_finishString2() throws JsonParseException, IOException { final String data = "{\\n" + " \\"a\\": {\\n" + " \\"b\\": {\\n" + " \\"c\\": {\\n" + " \\"d\\": {\\n" + " \\"e\\": {\\n" + " \\"b\\": {\\n" + " \\"c\\": {\\n" + " \\"d\\": {\\n" + " \\"e\\": {\\n" + " \\"b\\": {\\n" + " \\"c\\
@Test(expected = JsonParseException.class) public void test_finishString2() throws JsonParseException, IOException { final String data = "{\\n" + " \\"a\\": \\"b\\",\\n" + " \\"c\\": [\\n" + " \\"d\\",\\n" + " \\"e\\",\\n" + " \\"f\\",\\n" + " \\"g\\",\\n" + " \\"h\\",\\n" + " \\"i\\",\\n" + " \\"j\\",\\n" + " \\"k\\",\\n" + " \\"l\\",\\n"
@Test(expected = JsonParseException.class) public void test_finishString2() throws JsonParseException, IOException { final String data = "{\\n" + " \\"a\\": {\\n" + " \\"b\\": {\\n" + " \\"c\\": {\\n" + " \\"d\\": [\\n" + " \\"e\\",\\n" + " \\"f\\",\\n" + " \\"g\\",\\n" + " \\"h\\",\\n" + " \\"i\\",\\n" + " \\"j\\",\\n" + " \\"k\\",\\n" + "
@Test(expected = JsonParseException.class) public void test_double_quote_infinity() throws IOException { final Charset charset = Charset.forName("UTF-8"); final String json = "{\\"a\\":1, \\"b\\":2}"; final ByteArrayInputStream in = new ByteArrayInputStream(json.getBytes(charset)); final JsonParserFactory factory = new JsonParserFactory(); final JsonParser parser = factory.createParser(new ByteArrayInputStream(json.getBytes(charset))); parser.nextToken(); parser.nextToken(); parser.nextToken(); parser.nextToken(); parser.nextToken(); parser.nextToken(); }
@Test(expected = JsonParseException.class) public void test_double_quote_infinity() throws JsonParseException, IOException { JsonParser parser = new JsonParser(); parser._setFeature(Feature.ALLOW_SINGLE_QUOTES, true); parser._setFeature(Feature.ALLOW_NON_NUMERIC_NUMBERS, true); parser._setFeature(Feature.ALLOW_NON_NUMERIC_NUMBERS, true); parser._handleUnexpectedValue(\'+\'); }
@Test public void testSkipWSOrEnd() throws IOException, JsonParseException { String json = "{\\n" + " \\"test\\": {\\n" + " \\"foo\\": \\"bar\\"\\n" + " },\\n" + " \\"test2\\": {\\n" + " \\"foo\\": \\"bar\\"\\n" + " },\\n" + " \\"test3\\": {\\n" + " \\"foo\\": \\"bar\\"\\n" + " },\\n" + " \\"test4\\": {\\n" + " \\"foo\\": \\"bar\\"\\n" + " },\\
@Test public void testSkipWSOrEnd() throws IOException, JsonParseException { final Charset charset = Charset.forName("UTF-8"); final InputStream in = getClass().getClassLoader().getResourceAsStream("test_skip_ws_or_end.txt"); final Charset charset2 = Charset.forName("UTF-8"); final InputStream in2 = getClass().getClassLoader().getResourceAsStream("test_skip_ws_or_end2.txt"); final Charset charset3 = Charset.forName("UTF-8"); final InputStream in3 = getClass().getClassLoader().getResourceAsStream("test_skip_ws_or_end3.txt"); final Charset charset4 = Charset.forName("UTF-
@Test public void testSkipWSOrEnd() throws IOException { String json = "{\\n" + " \\"foo\\": \\"bar\\",\\n" + " \\"baz\\": \\"baz\\"\\n" + "}"; JSONObject j = new JSONObject(json); j.put("foo", "bar"); j.put("baz", "baz"); JSONObject l = j.getJSONObject("_skipWSOrEnd"); assertEquals("foo", l.getString("foo")); assertEquals("bar", l.getString("baz")); assertEquals("baz", l.getString("baz")); assertEquals("baz", l.get
@Test public void test_skipComment() throws IOException { Utf8StreamJsonParser jlp = new Utf8StreamJsonParser(null, 0, null, new byte[0], 0, 0, false); jlp._setInputSource(new ByteArrayInputStream(new byte[0])); jlp._skipComment(); Assert.assertEquals("Unexpected number of comments", 0, jlp.getNumComments()); jlp._skipComment(); Assert.assertEquals("Unexpected number of comments", 0, jlp.getNumComments()); jlp._skipComment(); Assert.assertEquals("Unexpected number of comments", 0, jlp.getNumComments()); jlp._skipComment(); Assert.assertEquals("
@Test public void testSkipComment() throws IOException { final JsonParserFactory factory = new JsonParserFactory(); final JsonParser parser = factory.createParser(new ByteArrayInputStream(_testString.getBytes())); parser._setInputSource(new ByteArrayInputStream(_testString.getBytes())); final List<String> comments = new ArrayList<String>(); for (Feature f : Feature.values()) { comments.add(f.getName()); } for (String comment : comments) { parser._setInputSource(new ByteArrayInputStream(comment.getBytes())); } for (String comment : comments) { parser._setInputSource(new ByteArrayInputStream(comment.getBytes())); } parser._setInputSource(new ByteArrayInputStream(_test
@Test public void testSkipComment() throws IOException { final JsonParserFactory factory = new JsonParserFactory(); final InputStream is = getClass().getResourceAsStream("test-comments.txt"); final JsonParser parser = factory.createParser(is, getClass().getResourceAsStream("test-comments.txt")); assertTrue(parser._loadToHaveAtLeast(0)); parser._skipComment(); assertTrue(parser._loadToHaveAtLeast(0)); assertEquals("", parser._getText()); parser._skipCppComment(); assertTrue(parser._loadToHaveAtLeast(0)); assertEquals("", parser._getText()); parser._skipCppComment(); assertTrue(parser._loadToHaveAtLeast(0));
@Test public void testSkipComment() throws IOException { final JsonParserFactory factory = new JsonParserFactory(); final InputStream is = getClass().getResourceAsStream("/test-comments.json"); final JsonParser parser = factory.createParser(is, new ByteArrayInputStream(StringUtils.toUtf8(is).getBytes(StandardCharsets.UTF_8))); for (int i = 0; i < 10; i++) { parser._setInputSource(new ByteArrayInputStream(StringUtils.toUtf8(is).getBytes(StandardCharsets.UTF_8))); parser._skipComment(); } parser._setInputSource(new ByteArrayInputStream(StringUtils.toUtf8(is).getBytes(StandardCharsets.UTF
@Test public void testSkipComment() throws IOException { Utf8StreamJsonParser j = new Utf8StreamJsonParser(null, 0, null, new byte[0], 0, 0, false); j.setInputSource(new ByteArrayInputStream(_testString.getBytes())); j.setCodec(ObjectCodec.UTF8_STRING_MARSHALLER); j.setCodec(ObjectCodec.UTF8_STRING_MARSHALLER); j._skipComment(); j.setInputSource(new ByteArrayInputStream(_testString.getBytes())); j.setCodec(ObjectCodec.UTF8_STRING_MARSHALLER); j.setCodec(ObjectCodec.UTF8_STRING_
@Test public void testSkipCppComment() throws IOException { final JsonParserFactory factory = new JsonParserFactory(); final JsonParser parser = factory.createParser(new ByteArrayInputStream(_testString.getBytes())); parser._setInputSource(new ByteArrayInputStream(_testString.getBytes())); final int skip = 0; while (parser._loadMore()) { try { parser._skipCppComment(); } catch (JsonParseException e) { skip++; } } assertEquals(1, skip); assertEquals(_testString.getBytes(), _testString.getBytes()); }
@Test public void testSkipComment() throws IOException { Utf8StreamJsonParser p = new Utf8StreamJsonParser(null, 0, null, new byte[0], 0, 0, false); p._skipComment(); assertEquals("", p._getText()); p._skipComment(); assertEquals("", p._getText()); p._skipComment(); assertEquals("", p._getText()); p._skipComment(); assertEquals("", p._getText()); p._skipComment(); assertEquals("", p._getText()); p._skipComment(); assertEquals("", p._getText()); p._skipComment(); assertEquals("", p._getText()); p._skipComment(); assert
@Test public void testSkipCComment() throws IOException { Utf8StreamJsonParser jlp = new Utf8StreamJsonParser(null, 0, new ByteArrayInputStream(new byte[0]), null, null); jlp._setInputSource(new ByteArrayInputStream(new byte[0])); jlp._skipCComment(); Assert.assertEquals("Unexpected number of comments", 0, jlp.getNumComments()); jlp._skipCComment(); Assert.assertEquals("Unexpected number of comments", 0, jlp.getNumComments()); jlp._skipCComment(); Assert.assertEquals("Unexpected number of comments", 0, jlp.getNumComments()); jlp._skipCComment(); Assert
@Test public void test_skipCComment() throws IOException { final String json = "{\\n" + " \\"test\\": {\\n" + " \\"test2\\": {\\n" + " \\"test3\\": {\\n" + " \\"test4\\": {\\n" + " \\"test5\\": {\\n" + " \\"test6\\": {\\n" + " \\"test7\\": {\\n" + " \\"test8\\": {\\n" + " \\"test9\\": {\\n" + " \\"test10\\": {\\n" + " \\"test11\\":
@Test public void testSkipCComment() throws Exception { ObjectCodec c = new ObjectCodec(); c.setCodec(c); InputStream is = getClass().getResourceAsStream("test_skip_c_comment.json"); UTF8StreamJsonParser parser = new UTF8StreamJsonParser(new IOContext(), 0, is, c.getCodec(), new BytesToNameCanonicalizer(), new byte[]{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
@Test public void test_skipCComment() throws IOException { final InputStream in = getClass().getResourceAsStream("test_skip_c_comment.json"); final UTF8StreamJsonParser parser = new UTF8StreamJsonParser(new IOContext(), 0, in, new BytesToNameCanonicalizer(), new byte[0], 0, 0, false); final ObjectCodec c = new ObjectCodec(); c.setCodec(c); final byte[] out = new byte[1024]; final InputStream in2 = new ByteArrayInputStream(out); final UTF8StreamJsonParser parser2 = new UTF8StreamJsonParser(new IOContext(), 0, in2, new BytesToNameCanonicalizer(), out2, 0,
@Test public void testSkipCComment() throws IOException { final InputStream is = getClass().getResourceAsStream("test_skip_c_comment.json"); final UTF8StreamJsonParser parser = new UTF8StreamJsonParser(new IOContext(), 0, is, new BytesToNameCanonicalizer(), is.getBytes(), 0, is.available(), false); final byte[] out = new byte[1024]; final Random r = new Random(); for (int i = 0; i < 1024; i++) { for (int j = 0; j < 1024; j++) { out[i] = r.nextInt(1024); } parser.setInputSource(new ByteArrayInputStream(out));
@Test public void test_skipCComment() throws IOException { final InputStream is = getClass().getResourceAsStream("test_skip_c_comment.json"); final UTF8StreamJsonParser parser = new UTF8StreamJsonParser(new IOContext(), 0, is, new BytesToNameCanonicalizer(), is.getBytes(), 0, is.available(), false); final byte[] buffer = new byte[1024]; for (int i = 0; i < buffer.length; i++) { buffer[i] = (byte) i; } for (int i = 0; i < buffer.length; i++) { buffer[i] = (byte) i; } parser.setInputSource(buffer
@Test public void test_skipCComment() throws IOException { final InputStream is = getClass().getResourceAsStream("test_skip_c_comment.json"); final UTF8StreamJsonParser parser = new UTF8StreamJsonParser(new IOContext(), 0, is, new BytesToNameCanonicalizer(), is.getBytes(), 0, is.available(), false); final ObjectCodec c = parser.getCodec(); final byte[] bytes = new byte[1024]; for (int i = 0; i < bytes.length; i++) { bytes[i] = (byte) i; } for (int i = 0; i < bytes.length; i++) { bytes[i] = (byte)
@Test public void testSkipCComment() throws IOException { final InputStream is = getClass().getResourceAsStream("test_c_comment.json"); final UTF8StreamJsonParser parser = new UTF8StreamJsonParser(new IOContext(), 0, is, new BytesToNameCanonicalizer(), is.getBytes(), 0, is.available(), false); final ObjectCodec c = new ObjectCodec(); c.setNameCanonicalizer(new BytesToNameCanonicalizer() { @Override public byte[] encode(byte[] b) throws IOException { return b; } @Override public byte[] decode(byte[] b) throws IOException { return b; } @Override public byte[] decode(byte[] b) throws IOException { return
@Test public void testSkipCComment() throws Exception { ObjectCodec c = new ObjectCodec(); c.setCodec(c); InputStream is = getClass().getResourceAsStream("test.json"); UTF8StreamJsonParser parser = new UTF8StreamJsonParser(new IOContext(), 0, is, c.getCodec(), new BytesToNameCanonicalizer(), new byte[] {0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x
@Test public void test_skipCComment() throws IOException { final Charset charset = Charset.forName("UTF-8"); final InputStream in = getClass().getResourceAsStream("test_skip_c_comment.json"); final ObjectCodec c = new ObjectCodec(); c.setCharset(charset); final UTF8StreamJsonParser parser = new UTF8StreamJsonParser(new IOContext(), 0, in, c, new BytesToNameCanonicalizer(), new byte[]{0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x10, 0x11, 0x12, 0x
@Test public void testSkipCComment() throws IOException { final InputStream is = getClass().getResourceAsStream("test_skip_c_comment.json"); final UTF8StreamJsonParser parser = new UTF8StreamJsonParser(new IOContext(), 0, is, new BytesToNameCanonicalizer(), is.getBytes(), 0, is.available(), false); final ObjectCodec c = new SimpleObjectCodec(); final byte[] bytes = new byte[1024]; for (int i = 0; i < bytes.length; i++) { bytes[i] = (byte) i; } parser._setCodec(c); for (int i = 0; i < bytes.length; i++) { final byte
@Test public void test_skipCComment() throws IOException { final InputStream is = getClass().getResourceAsStream("test_skip_c_comment.json"); final UTF8StreamJsonParser parser = new UTF8StreamJsonParser(new IOContext(), 0, is, new BytesToNameCanonicalizer(), is.getBytes(), 0, is.available(), false); final ObjectCodec c = parser.getCodec(); final byte[] bytes = new byte[1024]; for (int i = 0; i < bytes.length; i++) { bytes[i] = (byte) i; } parser.setInputSource(bytes); for (int i = 0; i < bytes.length; i++) {
@Test public void test_skipCComment() throws IOException { final InputStream is = getClass().getResourceAsStream("test_skip_c_comment.json"); final UTF8StreamJsonParser parser = new UTF8StreamJsonParser(new IOContext(), 0, is, new BytesToNameCanonicalizer(), new byte[0], 0, 0, false); final ObjectCodec c = new ObjectCodec(); c.setCodec(c); final byte[] buffer = new byte[1024]; for (int i = 0; i < buffer.length; i++) { buffer[i] = (byte) i; } for (int i = 0; i < buffer.length; i++) { buffer[i]
@Test public void test_skipCComment() throws IOException { final InputStream is = getClass().getResourceAsStream("test_skip_c_comment.json"); final UTF8StreamJsonParser parser = new UTF8StreamJsonParser(new IOContext(), 0, is, new BytesToNameCanonicalizer(), is.getBytes(), 0, is.available(), false); final byte[] buffer = new byte[1024]; final ObjectCodec c = new ObjectCodec(); c.setCodec(c); final InputStream is2 = getClass().getResourceAsStream("test_skip_c_comment2.json"); final ObjectCodec c2 = new ObjectCodec(); c2.setCodec(c2); final byte[] buffer
@Test public void test_skipCComment() throws IOException { final InputStream is = getClass().getResourceAsStream("test_skip_c_comment.json"); final UTF8StreamJsonParser parser = new UTF8StreamJsonParser(new IOContext(), 0, is, new BytesToNameCanonicalizer(), is.getBytes(), 0, is.available(), false); final byte[] buffer = new byte[1024]; for (int i = 0; i < buffer.length; i++) { buffer[i] = (byte) i; } for (int i = 0; i < buffer.length; i++) { buffer[i] = (byte) i; } parser.setInputSource(buffer
@Test public void test_skipCComment() throws IOException { final InputStream is = getClass().getResourceAsStream("test_skip_c_comment.json"); final UTF8StreamJsonParser parser = new UTF8StreamJsonParser(new IOContext(), 0, is, new BytesToNameCanonicalizer(), is.getBytes(), 0, is.available(), false); final byte[] buffer = new byte[1024]; final Random random = new Random(); for (int i = 0; i < 1024; i++) { buffer[i] = random.nextBytes(); } parser._setInputSource(new ByteArrayInputStream(buffer)); for (int i = 0; i < 1024; i++) { final byte
@Test public void test_skipCComment() throws IOException { final InputStream is = getClass().getResourceAsStream("test_skip_c_comment.json"); final UTF8StreamJsonParser parser = new UTF8StreamJsonParser(new IOContext(), 0, is, new BytesToNameCanonicalizer(), is.getBytes(), 0, is.available(), false); final byte[] buffer = new byte[1024]; for (int i = 0; i < buffer.length; i++) { buffer[i] = (byte) i; } for (int i = 0; i < buffer.length; i++) { buffer[i] = (byte) i; } parser.setInputSource(buffer
@Test public void test_skipCppComment() throws IOException { ObjectCodec c = new ObjectCodec(); c.setCodec(c); InputStream is = getClass().getResourceAsStream("test_skip_cpp_comment.json"); UTF8StreamJsonParser parser = new UTF8StreamJsonParser(new IOContext(), 0, is, c.getCodec(), new BytesToNameCanonicalizer(), new byte[0], 0, is.available(), true); for (int i = 0; i < CharTypes.getInputCodeComment().length; i++) { for (int j = 0; j < CharTypes.getInputCodeComment().length; j++) { String s = CharTypes.getInput
@Test public void test_skipCppComment() throws IOException { final InputStream is = getClass().getResourceAsStream("test_skip_cpp_comment.json"); final UTF8StreamJsonParser parser = new UTF8StreamJsonParser(new IOContext(), 0, is, new BytesToNameCanonicalizer(), is.getBytes(), 0, is.available(), true); final byte[] buffer = new byte[1024]; for (int i = 0; i < buffer.length; i++) { buffer[i] = (byte) i; } for (int i = 0; i < buffer.length; i++) { buffer[i] = (byte) i; } parser.setInputSource
@Test public void testSkipCppComment() throws IOException { final String json = "{\\n" + " \\"test\\": {\\n" + " \\"test2\\": {\\n" + " \\"test3\\": {\\n" + " \\"test4\\": {\\n" + " \\"test5\\": {\\n" + " \\"test6\\": {\\n" + " \\"test7\\": {\\n" + " \\"test8\\": {\\n" + " \\"test9\\": {\\n" + " \\"test10\\": {\\n" + " \\"test11\\":
@Test public void test_skipCppComment() throws IOException { final InputStream is = getClass().getResourceAsStream("test_skip_cpp_comment.json"); final UTF8StreamJsonParser parser = new UTF8StreamJsonParser(new IOContext(), 0, is, new BytesToNameCanonicalizer(), is.getBytes(), 0, is.available(), true); final byte[] buffer = new byte[1024]; for (int i = 0; i < buffer.length; i++) { buffer[i] = (byte) i; } for (int i = 0; i < buffer.length; i++) { buffer[i] = (byte) i; } parser.setInputSource
@Test public void test_skipCppComment() throws IOException { final InputStream is = getClass().getResourceAsStream("test_skip_cpp_comment.json"); final UTF8StreamJsonParser parser = new UTF8StreamJsonParser(new IOContext(), 0, is, new BytesToNameCanonicalizer(), is.getBytes(), 0, is.available(), true); final ObjectCodec c = new ObjectCodec(); final JsonParser.Builder builder = new JsonParser.Builder(); builder.setCodec(c); final byte[] bytes = builder.build().getBinaryValue().getBytes(); final String text = new String(bytes, Charsets.UTF_8); final JsonToken t = new JsonToken(
@Test public void test_skipCppComment() throws IOException { final InputStream is = getClass().getResourceAsStream("test_skip_cpp_comment.json"); final UTF8StreamJsonParser parser = new UTF8StreamJsonParser(new IOContext(), 0, is, new BytesToNameCanonicalizer(), is.getBytes(), 0, is.available(), true); final String text = new String(IOUtils.toByteArray(is), Charsets.UTF_8); parser._setInputSource(new ByteArrayInputStream(text.getBytes())); final String text2 = new String(IOUtils.toByteArray(is), Charsets.UTF_8); final String text3 = new String(IOUtils
@Test public void test_skipCppComment() throws IOException { InputStream is = getClass().getResourceAsStream("test_skip_cpp_comment.json"); ObjectCodec c = new ObjectCodec(); c.setCodec(c); String text = "{\\n" + " \\"test\\": {\\n" + " \\"test2\\": {\\n" + " \\"test3\\": {\\n" + " \\"test4\\": {\\n" + " \\"test5\\": {\\n" + " \\"test6\\": {\\n" + " \\"test7\\": {\\n" + " \\"test8\\": {
@Test public void test_skipCppComment() throws IOException { InputStream is = getClass().getResourceAsStream("test_skip_cpp_comment.json"); UTF8StreamJsonParser parser = new UTF8StreamJsonParser(new IOContext(), 0, is, new BytesToNameCanonicalizer(), is.getBytes(), 0, is.available(), true); for (int i = 0; i < Byte.SIZE; i++) { String text = new String(Character.toChars(i), Charsets.UTF_8); byte[] bytes = text.getBytes(Charset.forName("UTF-8")); parser.setInputSource(new ByteArrayInputStream(bytes)); try { parser.loadMore
@Test public void test_skipCppComment() throws IOException { final InputStream is = getClass().getResourceAsStream("test_skip_cpp_comment.json"); final Charset charset = Charset.forName("UTF-8"); final JsonParser parser = new JsonParser(new IOContext(), 0, is, new BytesToNameCanonicalizer(), is.getBytes(), 0, is.available(), false); final String text = new String(IOUtils.toByteArray(is), Charset.forName("UTF-8")); final String text2 = new String(IOUtils.toByteArray(is), Charset.forName("UTF-8")); final String text3 = new String(IOUtils.to
@Test public void test_skipCppComment() throws IOException { final String json = "{\\n" + " \\"test\\": {\\n" + " \\"test2\\": {\\n" + " \\"test3\\": {\\n" + " \\"test4\\": {\\n" + " \\"test5\\": {\\n" + " \\"test6\\": {\\n" + " \\"test7\\": {\\n" + " \\"test8\\": {\\n" + " \\"test9\\": {\\n" + " \\"test10\\": {\\n" + " \\"test11\\
@Test(expected = JsonParseException.class) public void _decodeEscaped_invalid() throws Exception { ObjectCodec codec = ObjectCodecFactory.getDefaultCodec(); InputStream in = new ByteArrayInputStream(new byte[0]); UTF8StreamJsonParser parser = new UTF8StreamJsonParser(new IOContext(), 0, in, codec, new BytesToNameCanonicalizer(), new byte[0], 0, 0, false); parser._decodeEscaped(); }
@Test(expected = JsonParseException.class) public void test_decodeEscaped_invalid() throws JsonParseException, IOException { ObjectCodec codec = ObjectCodecFactory.getDefaultCodec(); InputStream in = new ByteArrayInputStream("{\\n".getBytes(StandardCharsets.UTF_8)); UTF8StreamJsonParser parser = new UTF8StreamJsonParser(new IOContext(), 0, in, codec, new BytesToNameCanonicalizer(), new byte[0], null); parser._decodeEscaped(0); }
@Test(expected = JsonParseException.class) public void test_decodeEscaped_invalid() throws JsonParseException, IOException { ObjectCodec codec = ObjectCodecFactory.getDefaultCodec(); InputStream is = new ByteArrayInputStream("{\\n".getBytes(StandardCharsets.UTF_8)); UTF8StreamJsonParser parser = new UTF8StreamJsonParser(new IOContext(), 0, is, codec, new BytesToNameCanonicalizer(), new byte[0], 0, 0, 0); parser._decodeEscaped(); }
@Test public void test_decodeEscaped() throws JsonParseException, IOException { final Charset charset = Charset.forName("UTF-8"); final InputStream is = getClass().getResourceAsStream("test-utf8.txt"); final Charset charset1 = Charset.forName("UTF-8"); final Charset charset2 = Charset.forName("UTF-8"); final Charset charset3 = Charset.forName("UTF-8"); final Charset charset4 = Charset.forName("UTF-8"); final Charset charset5 = Charset.forName("UTF-8"); final Charset charset6 = Charset.forName("UTF-8"); final Charset charset7 = Charset.forName("UTF-8"); final Charset charset8 =
@Test public void test_decodeEscaped() throws JsonParseException, IOException { final Charset charset = Charset.forName("UTF-8"); final InputStream in = new ByteArrayInputStream("{\\n".getBytes(charset)); final Charset charset1 = Charset.forName("UTF-8"); final Charset charset2 = Charset.forName("UTF-8"); final Charset charset3 = Charset.forName("UTF-8"); final Charset charset4 = Charset.forName("UTF-8"); final Charset charset5 = Charset.forName("UTF-8"); final Charset charset6 = Charset.forName("UTF-8"); final Charset charset7 = Charset.forName("UTF-8"); final Charset charset8 = Charset
@Test(expected = JsonParseException.class) public void _decodeEscaped_Invalid() throws Exception { ObjectCodec codec = ObjectCodecFactory.getDefaultCodec(); InputStream in = new ByteArrayInputStream(new byte[0]); UTF8StreamJsonParser parser = new UTF8StreamJsonParser(new IOContext(), 0, in, codec, new BytesToNameCanonicalizer(), new byte[0], 0, 0, 0); parser._decodeEscaped(); }
@Test public void test_decodeEscaped() throws JsonParseException, IOException { final Charset charset = Charset.forName("UTF-8"); final InputStream is = getClass().getResourceAsStream("/test.json"); final Charset charset1 = Charset.forName("UTF-8"); final Charset charset2 = Charset.forName("UTF-8"); final Charset charset3 = Charset.forName("UTF-8"); final Charset charset4 = Charset.forName("UTF-8"); final Charset charset5 = Charset.forName("UTF-8"); final Charset charset6 = Charset.forName("UTF-8"); final Charset charset7 = Charset.forName("UTF-8"); final Charset charset8 = Charset.
@Test(expected = JsonParseException.class) public void _decodeEscaped() throws JsonParseException, IOException { ObjectCodec codec = ObjectCodecFactory.getDefaultCodec(); InputStream is = new ByteArrayInputStream(new byte[0]); UTF8StreamJsonParser parser = new UTF8StreamJsonParser(new IOContext(), 0, is, codec, new BytesToNameCanonicalizer(), new byte[0], 0, 0, 0); parser._decodeEscaped(); }
@Test public void test_decodeEscaped() throws JsonParseException, IOException { final Charset charset = Charset.forName("UTF-8"); final InputStream in = new ByteArrayInputStream("{\\n".getBytes(charset)); final Charset charset1 = Charset.forName("UTF-8"); final Charset charset2 = Charset.forName("UTF-8"); final Charset charset3 = Charset.forName("UTF-8"); final Charset charset4 = Charset.forName("UTF-8"); final Charset charset5 = Charset.forName("UTF-8"); final Charset charset6 = Charset.forName("UTF-8"); final Charset charset7 = Charset.forName("UTF-8"); final Charset charset8 = Charset
@Test(expected = JsonParseException.class) public void _decodeEscaped_Invalid() throws Exception { ObjectCodec codec = ObjectCodecFactory.getDefaultCodec(); InputStream in = new ByteArrayInputStream(new byte[0]); UTF8StreamJsonParser parser = new UTF8StreamJsonParser(new IOContext(), 0, in, codec, new BytesToNameCanonicalizer(), new byte[0], 0, 0, 0); parser._decodeEscaped(); }
@Test public void test_decodeEscaped() throws JsonParseException, IOException { final Charset charset = Charset.forName("UTF-8"); final InputStream is = getClass().getResourceAsStream("/test.json"); final Charset charset1 = Charset.forName("UTF-8"); final Charset charset2 = Charset.forName("UTF-8"); final Charset charset3 = Charset.forName("UTF-8"); final Charset charset4 = Charset.forName("UTF-8"); final Charset charset5 = Charset.forName("UTF-8"); final Charset charset6 = Charset.forName("UTF-8"); final Charset charset7 = Charset.forName("UTF-8"); final Charset charset8 = Charset.
@Test(expected = JsonParseException.class) public void _decodeEscaped_Invalid() throws Exception { ObjectCodec codec = ObjectCodecFactory.getDefaultCodec(); InputStream in = new ByteArrayInputStream(new byte[0]); UTF8StreamJsonParser parser = new UTF8StreamJsonParser(new IOContext(), 0, in, codec, new BytesToNameCanonicalizer(), new byte[0], 0, 0, 0); parser._decodeEscaped(); }
@Test public void test_decodeEscaped() throws JsonParseException, IOException { final Charset charset = Charset.forName("UTF-8"); final InputStream is = getClass().getResourceAsStream("/test.json"); final Charset charset1 = Charset.forName("UTF-8"); final Charset charset2 = Charset.forName("UTF-8"); final Charset charset3 = Charset.forName("UTF-8"); final Charset charset4 = Charset.forName("UTF-8"); final Charset charset5 = Charset.forName("UTF-8"); final Charset charset6 = Charset.forName("UTF-8"); final Charset charset7 = Charset.forName("UTF-8"); final Charset charset8 = Charset.
@Test(expected = JsonParseException.class) public void _decodeEscaped() throws JsonParseException, IOException { ObjectCodec codec = ObjectCodecFactory.getDefaultCodec(); InputStream is = new ByteArrayInputStream(new byte[0]); UTF8StreamJsonParser parser = new UTF8StreamJsonParser(new IOContext(), 0, is, codec, new BytesToNameCanonicalizer(), new byte[0], 0, 0, 0); parser._decodeEscaped(); }
@Test public void test_decodeEscaped() throws JsonParseException, IOException { final Charset charset = Charset.forName("UTF-8"); final InputStream is = getClass().getResourceAsStream("/test.json"); final Charset charset1 = Charset.forName("UTF-8"); final Charset charset2 = Charset.forName("UTF-8"); final Charset charset3 = Charset.forName("UTF-8"); final Charset charset4 = Charset.forName("UTF-8"); final Charset charset5 = Charset.forName("UTF-8"); final Charset charset6 = Charset.forName("UTF-8"); final Charset charset7 = Charset.forName("UTF-8"); final Charset charset8 = Charset.
@Test(expected = JsonParseException.class) public void _decodeEscaped_Invalid() throws Exception { ObjectCodec codec = ObjectCodecFactory.getDefaultCodec(); InputStream in = new ByteArrayInputStream(new byte[0]); UTF8StreamJsonParser parser = new UTF8StreamJsonParser(new IOContext(), 0, in, codec, new BytesToNameCanonicalizer(), new byte[0], 0, 0, 0); parser._decodeEscaped(); }
@Test(expected = JsonParseException.class) public void _decodeEscaped_Invalid() throws Exception { ObjectCodec codec = ObjectCodecFactory.getDefaultCodec(); InputStream in = new ByteArrayInputStream(new byte[0]); UTF8StreamJsonParser parser = new UTF8StreamJsonParser(new IOContext(), 0, in, codec, new BytesToNameCanonicalizer(), new byte[0], 0, 0, 0); parser._decodeEscaped(); }
@Test public void test_decodeEscaped() throws JsonParseException, IOException { final Charset charset = Charset.forName("UTF-8"); final InputStream is = getClass().getResourceAsStream("/test.json"); final Charset charset1 = Charset.forName("UTF-8"); final Charset charset2 = Charset.forName("UTF-8"); final Charset charset3 = Charset.forName("UTF-8"); final Charset charset4 = Charset.forName("UTF-8"); final Charset charset5 = Charset.forName("UTF-8"); final Charset charset6 = Charset.forName("UTF-8"); final Charset charset7 = Charset.forName("UTF-8"); final Charset charset8 = Charset.
@Test public void test_decodeEscaped() throws Exception { final Charset utf8 = Charset.forName("UTF-8"); final Charset utf8b = Charset.forName("UTF-8"); final Charset utf16 = Charset.forName("UTF-16"); final Charset utf16b = Charset.forName("UTF-16b"); final Charset utf16c = Charset.forName("UTF-16c"); final Charset utf16c2 = Charset.forName("UTF-16c2"); final Charset utf16c3 = Charset.forName("UTF-16c3"); final Charset utf16c4 = Charset.forName("UTF-16c4"); final Charset utf16c5 =
@Test(expected = JsonParseException.class) public void _decodeEscaped_invalid() throws Exception { ObjectCodec codec = ObjectCodecFactory.getDefaultCodec(); InputStream in = new ByteArrayInputStream(new byte[0]); UTF8StreamJsonParser parser = new UTF8StreamJsonParser(new IOContext(), 0, in, codec, new BytesToNameCanonicalizer(), new byte[0], 0, 0, false); parser._decodeEscaped(); }
@Test(expected = JsonParseException.class) public void _decodeEscaped_invalid() throws Exception { ObjectCodec codec = ObjectCodecFactory.getDefaultCodec(); InputStream in = new ByteArrayInputStream(new byte[0]); UTF8StreamJsonParser parser = new UTF8StreamJsonParser(new IOContext(), 0, in, codec, new BytesToNameCanonicalizer(), new byte[0], 0, 0, 0); parser._decodeEscaped(); }
@Test(expected = JsonParseException.class) public void _decodeEscaped_Invalid() throws JsonParseException, IOException { ObjectCodec codec = ObjectCodecFactory.getDefaultCodec(); InputStream in = new ByteArrayInputStream("{\\n".getBytes()); UTF8StreamJsonParser parser = new UTF8StreamJsonParser(new IOContext(), 0, in, codec, new BytesToNameCanonicalizer(), null); parser._decodeEscaped(); }
@Test(expected = JsonParseException.class) public void test_decodeEscaped_invalid() throws JsonParseException, IOException { ObjectCodec codec = ObjectCodecFactory.getDefaultCodec(); InputStream in = new ByteArrayInputStream("{\\n".getBytes(StandardCharsets.UTF_8)); UTF8StreamJsonParser parser = new UTF8StreamJsonParser(new IOContext(), 0, in, codec, new BytesToNameCanonicalizer(), new byte[0], null); parser._decodeEscaped(0); }
@Test(expected = JsonParseException.class) public void test_decodeEscaped_invalid() throws JsonParseException, IOException { ObjectCodec codec = ObjectCodecFactory.getDefaultCodec(); InputStream is = new ByteArrayInputStream("{\\n".getBytes(StandardCharsets.UTF_8)); UTF8StreamJsonParser parser = new UTF8StreamJsonParser(new IOContext(), 0, is, codec, new BytesToNameCanonicalizer(), new byte[0], 0, 0, 0); parser._decodeEscaped(); }
@Test public void test_decodeEscaped() throws JsonParseException, IOException { final Charset charset = Charset.forName("UTF-8"); final InputStream is = getClass().getResourceAsStream("test-utf8.txt"); final Charset charset1 = Charset.forName("UTF-8"); final Charset charset2 = Charset.forName("UTF-8"); final Charset charset3 = Charset.forName("UTF-8"); final Charset charset4 = Charset.forName("UTF-8"); final Charset charset5 = Charset.forName("UTF-8"); final Charset charset6 = Charset.forName("UTF-8"); final Charset charset7 = Charset.forName("UTF-8"); final Charset charset8 =
@Test(expected = JsonParseException.class) public void test_decodeEscaped_invalid() throws JsonParseException, IOException { ObjectCodec codec = ObjectCodecFactory.getDefaultCodec(); InputStream in = new ByteArrayInputStream(new byte[0]); UTF8StreamJsonParser parser = new UTF8StreamJsonParser(new IOContext(), 0, in, codec, new BytesToNameCanonicalizer(), new byte[0], null); parser._decodeEscaped(); }
@Test(expected = JsonParseException.class) public void test_decodeEscaped_invalid() throws JsonParseException, IOException { ObjectCodec codec = ObjectCodecFactory.getDefaultCodec(); InputStream in = new ByteArrayInputStream(new byte[0]); UTF8StreamJsonParser parser = new UTF8StreamJsonParser(new IOContext(), 0, in, codec, new BytesToNameCanonicalizer(), new byte[0], 0, 0); parser._decodeEscaped(0); }
@Test public void test_decodeEscaped() throws JsonParseException, IOException { final Charset charset = Charset.forName("UTF-8"); final InputStream is = getClass().getResourceAsStream("/test.json"); final Charset charset1 = Charset.forName("UTF-8"); final Charset charset2 = Charset.forName("UTF-8"); final Charset charset3 = Charset.forName("UTF-8"); final Charset charset4 = Charset.forName("UTF-8"); final Charset charset5 = Charset.forName("UTF-8"); final Charset charset6 = Charset.forName("UTF-8"); final Charset charset7 = Charset.forName("UTF-8"); final Charset charset8 = Charset.
@Test public void test_decodeEscaped() throws JsonParseException, IOException { final Charset charset = Charset.forName("UTF-8"); final InputStream is = getClass().getResourceAsStream("/test.json"); final Charset charset1 = Charset.forName("UTF-8"); final Charset charset2 = Charset.forName("UTF-8"); final Charset charset3 = Charset.forName("UTF-8"); final Charset charset4 = Charset.forName("UTF-8"); final Charset charset5 = Charset.forName("UTF-8"); final Charset charset6 = Charset.forName("UTF-8"); final Charset charset7 = Charset.forName("UTF-8"); final Charset charset8 = Charset.
@Test public void testDecodeUtf8_2() throws IOException, JsonParseException { String test = "{\\"a\\":1, \\"b\\":2, \\"c\\":3, \\"d\\":4}"; String expected = "{\\"a\\":1, \\"b\\":2, \\"c\\":3, \\"d\\":4}"; for (int i = 0; i < test.length(); i++) { JSONObject j = new JSONObject(test[i]); j.put("a", "1"); j.put("b", "2"); j.put("c", "3"); j.put("d", 4); j.put("e",
@Test public void testDecodeUtf8_2() throws IOException, JsonParseException { String json = "{\\"test\\":\\"a\\",\\"test2\\":\\"b\\",\\"test3\\":\\"c\\",\\"test4\\":\\"d\\",\\"test5\\":\\"e\\",\\"test6\\":\\"f\\",\\"test7\\":\\"g\\",\\"test8\\":\\"h\\",\\"test9\\":\\"i\\",\\"test10\\":1,\\"test11\\":2,\\"test12\\":3,\\"test13\\":4,\\"test14\\":5,\\"test21\\":6,\\"test22\\":
@Test public void test_decodeUtf8_2() throws IOException, JsonParseException { String json = "{\\"a\\":1, \\"b\\":2, \\"c\\":3}"; InputStream in = new ByteArrayInputStream(json.getBytes()); UTF8StreamJsonParser parser = new UTF8StreamJsonParser(new MockIOContext(), 0, in, new BytesToNameCanonicalizer(), json.getBytes(), 0, json.length(), true); for (int i = 0; i < json.length(); i++) { assertEquals(json.get(i), parser._decodeUtf8_2((char) i)); } }
@Test public void testDecodeUtf8_2() throws IOException, JsonParseException { String test = "{\\"a\\":1, \\"b\\":2, \\"c\\":3}"; InputStream in = new ByteArrayInputStream(test.getBytes()); UTF8StreamJsonParser jsl = new UTF8StreamJsonParser(null, 0, in, new BytesToNameCanonicalizer(), new byte[0], 0, 0, true); jsl.setInputSource(in); for (int i = 0; i < test.length(); i++) { jsl.nextToken(); } jsl.setInputSource(in); for (int i = 0; i < test.length(); i++)
@Test public void testDecodeUtf8_2() throws IOException, JsonParseException { InputStream is = getClass().getResourceAsStream("test-utf8.txt"); UTF8StreamJsonParser jsl = new UTF8StreamJsonParser(new MockIOContext(), 0, is, new BytesToNameCanonicalizer(), new byte[0], 0, 0, false); jsl.setInputSource(is); for (int i = 0; i < 10; i++) { jsl.nextToken(); } jsl.setInputSource(is); for (int i = 0; i < 10; i++) { jsl.nextToken(); } jsl.setInputSource(is); jsl.set
@Test public void testDecodeUtf8_2() throws IOException, JsonParseException { String test = "{\\"a\\":1, \\"b\\":2, \\"c\\":3}"; String expected = "{\\"a\\":1, \\"b\\":2, \\"c\\":3}"; String json = "{\\"a\\":1, \\"b\\":2, \\"c\\":3}"; InputStream is = new ByteArrayInputStream(json.getBytes(Charset.forName("UTF8"))); UTF8StreamJsonParser parser = new UTF8StreamJsonParser(null, 0, is, null, new ByteArrayInputStream(json.getBytes(Charset.forName("
@Test public void test_decodeUtf8_3() throws IOException, JsonParseException { JSONObject j = new JSONObject(); j.put("foo", "bar"); j.put("bar", "baz"); j.put("baz", "qux"); JSONObject l = new JSONObject(); l.put("foo", "bar"); l.put("bar", "baz"); _decodeUtf8_3(l.getJSONObject("foo").getInt(0)); assertEquals("bar", _decodeUtf8_3(l.getJSONObject("bar").getInt(0))); assertEquals("baz", _decodeUtf8_3(l.getJSONObject("baz").get
@Test public void test_decodeUtf8_3() throws IOException, JsonParseException { Utf8StreamJsonParser p = new Utf8StreamJsonParser( new MockIOContext(), 0, new ByteArrayInputStream("{\\"test\\":\\"test\\"}".getBytes()), new BytesToNameCanonicalizer(), new byte[] {}, 0, 0, true); p._setInputSource(new ByteArrayInputStream("{\\"test\\":\\"test\\"}".getBytes())); assertEquals("test", p._getText()); p._setInputSource(new ByteArrayInputStream("{\\"test\\":\\"test\\"}".getBytes())); assertEquals("test", p._getText()); p._setInputSource(new
@Test public void test_decodeUtf8_3() throws IOException { InputStream is = getClass().getResourceAsStream("test_utf8_3.txt"); UTF8StreamJsonParser parser = new UTF8StreamJsonParser(new MockIOContext(), 0, is, new BytesToNameCanonicalizer(), new byte[0], new ObjectCodec(), new BytesToNameCanonicalizer(), new byte[0], 0, is.available(), true); for (int i = 0; i < 10; i++) { String s = new String(IOUtils.toByteArray(is), "UTF-8"); parser.setInputSource(new ByteArrayInputStream(s.getBytes())); for (int j = 0; j
@Test public void test_decodeUtf8_3() throws IOException, JsonParseException { Utf8StreamJsonParser p = new Utf8StreamJsonParser(null, 0, new ByteArrayInputStream("{\\"test\\":\\"test\\"}".getBytes()), null, null); p.setInputSource(new ByteArrayInputStream("{\\"test\\":\\"test\\"}".getBytes())); assertEquals("test", p.getText()); p.setInputSource(new ByteArrayInputStream("{\\"test\\":\\"test\\"}".getBytes())); assertEquals("test", p.getText()); p.setInputSource(new ByteArrayInputStream("{\\"test\\":\\"test\\"}".getBytes()));
@Test public void test_decodeUtf8_3() throws IOException { InputStream is = getClass().getResourceAsStream("test_utf8_3.txt"); UTF8StreamJsonParser p = new UTF8StreamJsonParser(new MockIOContext(), 0, is, new BytesToNameCanonicalizer(), new byte[0], new ObjectCodec(), new BytesToNameCanonicalizer(), new byte[0], 0, is.available(), true); p._setInputSource(is); p._decodeUtf8_3(1); p._decodeUtf8_3(2); p._decodeUtf8_3(3); p._decodeUtf8_3(4); p._decodeUtf8_3(
@Test public void test_decodeUtf8_3() throws IOException { Utf8StreamJsonParser p = new Utf8StreamJsonParser(new MockIOContext(), 0, new ByteArrayInputStream("{\\"test\\":\\"test\\"}".getBytes()), new ObjectCodec(), new BytesToNameCanonicalizer(), new byte[0], 0, 0, false); p.setInputSource(new ByteArrayInputStream("{\\"test\\":\\"test\\"}".getBytes())); assertEquals("test", p.getText()); p.setInputSource(new ByteArrayInputStream("{\\"test\\":\\"test\\"}".getBytes())); assertEquals("test", p.getText()); p.setInputSource
@Test public void test_decodeUtf8_3() throws IOException, JsonParseException { final TestIOContext ctxt = new TestIOContext(); final InputStream is = getClass().getResourceAsStream("test-utf8.txt"); final JsonParser parser = new JsonParser(ctxt, 0, is, new BytesToNameCanonicalizer(), new byte[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 36, 37, 38, 39, 40,
@Test public void test_decodeUtf8_3() throws IOException, JsonParseException { Utf8StreamJsonParser p = new Utf8StreamJsonParser( new MockIOContext(), 0, new ByteArrayInputStream("{\\"test\\":\\"test\\"}".getBytes()), new BytesToNameCanonicalizer(), new byte[] {}, 0, 0, true); p._setInputSource(new ByteArrayInputStream("{\\"test\\":\\"test\\"}".getBytes())); assertEquals("test", p._getText()); p._setInputSource(new ByteArrayInputStream("{\\"test\\":\\"test\\"}".getBytes())); assertEquals("test", p._getText()); p._setInputSource(new
@Test public void test_decodeUtf8_3() throws IOException { InputStream is = getClass().getResourceAsStream("test_utf8_3.txt"); UTF8StreamJsonParser parser = new UTF8StreamJsonParser(new MockIOContext(), 0, is, new BytesToNameCanonicalizer(), new byte[0], new ObjectCodec(), new BytesToNameCanonicalizer(), new byte[0], 0, is.available(), true); for (int i = 0; i < 10; i++) { String s = new String(IOUtils.toByteArray(is), "UTF-8"); parser.setInputSource(new ByteArrayInputStream(s.getBytes())); for (int j = 0; j
@Test public void testDecodeUtf8_3() throws IOException { InputStream is = getClass().getResourceAsStream("test-utf8.txt"); UTF8StreamJsonParser p = new UTF8StreamJsonParser(new MockIOContext(), 0, is, new BytesToNameCanonicalizer(), new byte[0], new ObjectCodec(), new BytesToNameCanonicalizer(), new byte[0], 0, 0, true); p._setInputSource(is); p._decodeUtf8_3(1); p._decodeUtf8_3(2); p._decodeUtf8_3(3); p._decodeUtf8_3(4); p._decodeUtf8_3(5); p._decode
@Test public void test_decodeUtf8_3() throws IOException { Utf8StreamJsonParser p = new Utf8StreamJsonParser(new MockIOContext(), 0, new ByteArrayInputStream("{\\"test\\":\\"test\\"}".getBytes()), new ObjectCodec(), new BytesToNameCanonicalizer(), new byte[0], 0, 0, false); p.setInputSource(new ByteArrayInputStream("{\\"test\\":\\"test\\"}".getBytes())); assertEquals("test", p.getText()); p.setInputSource(new ByteArrayInputStream("{\\"test\\":\\"test\\"}".getBytes())); assertEquals("test", p.getText()); p.setInputSource
@Test public void test_decodeUtf8_3() throws IOException, JsonParseException { final JsonParserFactory factory = new JsonParserFactory(); final InputStream is = getClass().getResourceAsStream("test-utf8.txt"); final InputStream is2 = getClass().getResourceAsStream("test-utf8.txt"); final InputStream is3 = getClass().getResourceAsStream("test-utf8.txt"); final InputStream is4 = getClass().getResourceAsStream("test-utf8.txt"); final UTF8StreamJsonParser parser = new UTF8StreamJsonParser(null, 0, is, null, new BytesToNameCanonicalizer(), new byte[0], 0, is.available(), true); final String text = parser
@Test public void test_decodeUtf8_3() throws IOException { InputStream is = getClass().getResourceAsStream("test_utf8_3.txt"); UTF8StreamJsonParser parser = new UTF8StreamJsonParser(new MockIOContext(), 0, is, new BytesToNameCanonicalizer(), new byte[0], new ObjectCodec(), new BytesToNameCanonicalizer(), new byte[0], 0, is.available(), true); TestCase.assertEquals("test", parser._decodeUtf8_3(0)[0]); Assert.assertEquals("", parser._decodeUtf8_3(1)[0]); Assert.assertEquals("", parser._decodeUtf8_3(2)[0]);
@Test(expected = JsonParseException.class) public void testDecodeUtf8_3fast() throws IOException, JsonParseException { String json = "{\\n" + " \\"test\\": {\\n" + " \\"foo\\": \\"bar\\"\\n" + " },\\n" + " \\"test2\\": {\\n" + " \\"foo\\": \\"bar\\"\\n" + " },\\n" + " \\"test3\\": {\\n" + " \\"foo\\": \\"bar\\"\\n" + " },\\n" + " \\"test4\\": {\\n" + " \\"foo\\": \\
@Test public void testDecodeUtf8_3fast() throws IOException, JsonParseException { String json = "{\\"a\\":1, \\"b\\":2, \\"c\\":3}"; String expected = "{\\"a\\":1, \\"b\\":2, \\"c\\":3}"; InputStream is = new ByteArrayInputStream(json.getBytes(Charset.forName("UTF-8"))); UTF8StreamJsonParser p = new UTF8StreamJsonParser(null, 0, is, new BytesToNameCanonicalizer(), new byte[0], 0, 0, false); p.setInputSource(is); ByteArrayOutputStream out = new ByteArrayOutputStream(); p.getBinaryValue(
@Test public void testDecodeUtf8_3fast() throws IOException, JsonParseException { String json = "{\\"a\\":1, \\"b\\":2, \\"c\\":3}"; InputStream is = new ByteArrayInputStream(json.getBytes(Charset.forName("UTF-8"))); UTF8StreamJsonParser parser = new UTF8StreamJsonParser(null, 0, is, new BytesToNameCanonicalizer(), json.getBytes(Charset.forName("UTF-8")), 0, 0, true); ByteArrayOutputStream out = new ByteArrayOutputStream(); parser._decodeUtf8_3fast(1); String val = new String(out.toByteArray(), Charset.forName("UTF-
@Test public void testDecodeUtf8_3fast() throws IOException, JsonParseException { String json = "{\\"a\\":1, \\"b\\":2, \\"c\\":3}"; InputStream is = new ByteArrayInputStream(json.getBytes(Charset.forName("UTF-8"))); UTF8StreamJsonParser p = new UTF8StreamJsonParser(null, 0, is, new BytesToNameCanonicalizer(), json.getBytes(Charset.forName("UTF-8")), 0, 0, true); ByteArrayOutputStream out = new ByteArrayOutputStream(); p.getInputSource().putBytes("a".getBytes(Charset.forName("UTF-8")), out); p.get
@Test public void testDecodeUtf8_3fast() throws IOException, JsonParseException { String json = "{\\"a\\":1, \\"b\\":2, \\"c\\":3}"; InputStream is = new ByteArrayInputStream(json.getBytes(Charset.forName("UTF-8"))); UTF8StreamJsonParser p = new UTF8StreamJsonParser(null, 0, is, new BytesToNameCanonicalizer(), json.getBytes(Charset.forName("UTF-8")), 0, 0, true); assertEquals("{\\"a\\":1, \\"b\\":2, \\"c\\":3}", p._decodeUtf8_3fast(0
@Test public void testDecodeUtf8_3fast() throws IOException, JsonParseException { String json = "{\\"a\\":1, \\"b\\":2, \\"c\\":3}"; InputStream is = new ByteArrayInputStream(json.getBytes(Charset.forName("UTF-8"))); UTF8StreamJsonParser p = new UTF8StreamJsonParser(null, 0, is, new BytesToNameCanonicalizer(), json.getBytes(Charset.forName("UTF-8")), 0, 0, true); ByteArrayOutputStream out = new ByteArrayOutputStream(); p.getInputSource().putBytes("a".getBytes(Charset.forName("UTF-8")), out); p.get
@Test public void testDecodeUtf8_3fast() throws IOException, JsonParseException { String json = "{\\"a\\":1, \\"b\\":2, \\"c\\":3}"; InputStream is = new ByteArrayInputStream(json.getBytes(Charset.forName("UTF-8"))); UTF8StreamJsonParser p = new UTF8StreamJsonParser(null, 0, is, new BytesToNameCanonicalizer(), json.getBytes(Charset.forName("UTF-8")), 0, 0, true); ByteArrayOutputStream out = new ByteArrayOutputStream(); p.getInputSource().putBytes("a".getBytes(Charset.forName("UTF-8")), out); p.get
@Test public void testDecodeUtf8_3fast() throws IOException, JsonParseException { String json = "{\\"a\\":1, \\"b\\":2, \\"c\\":3}"; InputStream is = new ByteArrayInputStream(json.getBytes(Charset.forName("UTF-8"))); UTF8StreamJsonParser p = new UTF8StreamJsonParser(null, 0, is, new BytesToNameCanonicalizer(), json.getBytes(Charset.forName("UTF-8")), 0, 0, true); p.setInputSource(is); ByteArrayOutputStream out = new ByteArrayOutputStream(); p.getBinaryValue(new Base64VariantImpl(), out); assertEquals(1, out.
@Test(expected = JsonParseException.class) public void testDecodeUtf8_3fast() throws IOException { InputStream is = getClass().getResourceAsStream("test-utf8.txt"); UTF8StreamJsonParser jsl = new UTF8StreamJsonParser(null, 0, is, new BytesToNameCanonicalizer(), new byte[0], 0, 0, false); jsl.getText(); }
@Test public void testSkipCR() throws IOException { for (int i = 0; i < 10; i++) { JSONObject j = new JSONObject(String.valueOf(i)); j.put("key1", "value1"); j.put("key2", "value2"); j.put("key3", "value3"); j.put("key4", "value4"); j.put("key5", "value5"); j.put("key6", "value6"); j.put("key7", "value7"); j.put("key8", "value8"); j.put("key9", "value9"); j.put("key10", "value10");
@Test public void testUTF8StreamJsonParser() throws IOException, JsonParseException { String json = "{\\"a\\":\\"b\\",\\"b\\":\\"c\\",\\"c\\":\\"d\\",\\"d\\":\\"e\\",\\"e\\":\\"f\\",\\"f\\":\\"g\\",\\"g\\":\\"h\\",\\"h\\":\\"i\\",\\"i\\":\\"j\\",\\"j\\":\\"k\\",\\"k\\":\\"l\\",\\"l\\":\\"l\\",\\"i\\":\\"j\\",\\"j\\":\\"k\\",\\"k\\":\\"l\\",\\"l\\":\\"l\\
@Test public void testSkipCR() throws IOException { for (int i = 0; i < 10; i++) { JSONObject j = new JSONObject(); j.put("k1", "v1"); j.put("k2", "v2"); j.put("k3", "v3"); j.put("k4", "v4"); j.put("k5", "v5"); j.put("k6", "v6"); j.put("k7", "v7"); j.put("k8", "v8"); j.put("k9", "v9"); j.put("k10", "v10"); j.put("k11",
@Test public void testSkipCR() throws IOException { for (int i = 0; i < 10; i++) { JSONObject j = new JSONObject(String.valueOf(i)); j.put("key1", "value1"); j.put("key2", "value2"); j.put("key3", "value3"); j.put("key4", "value4"); j.put("key5", "value5"); j.put("key6", "value6"); j.put("key7", "value7"); j.put("key8", "value8"); j.put("key9", "value9"); j.put("key10", "value10");
@Test public void testSkipCR() throws IOException { for (int i = 0; i < 10; i++) { JSONObject j = new JSONObject(String.valueOf(i)); j.put("key1", "value1"); j.put("key2", "value2"); j.put("key3", "value3"); j.put("key4", "value4"); j.put("key5", "value5"); j.put("key6", "value6"); j.put("key7", "value7"); j.put("key8", "value8"); j.put("key9", "value9"); j.put("key10", "value10");
@Test public void testGrowArrayBy() { int[] arr1 = null; int[] arr2 = null; int[] arr3 = null; int[] arr4 = null; int[] arr5 = null; int[] arr6 = null; int[] arr7 = null; int[] arr8 = null; int[] arr9 = null; int[] arr10 = null; int[] arr11 = null; int[] arr12 = null; int[] arr13 = null; int[] arr21 = null; int[] arr22 = null; int[] arr23 = null; int[] arr31 = null; int[] arr32 = null; int[] arr33 = null; int[] arr31 =
@Test public void testGrowArrayByNull() throws IOException { int[] arr1 = null; int[] arr2 = null; int[] arr3 = null; int[] arr4 = null; int[] arr5 = null; int[] arr6 = null; int[] arr7 = null; int[] arr8 = null; int[] arr9 = null; int[] arr10 = null; int[] arr11 = null; int[] arr12 = null; int[] arr13 = null; int[] arr21 = null; int[] arr22 = null; int[] arr23 = null; int[] arr31 = null; int[] arr32 = null; int[] arr33 = null; int[]
@Test public void testGrowArrayBy() throws IOException { int[] arr1 = {1, 2, 3, 4, 5, 6, 7, 8, 9}; int[] arr2 = {1, 2, 3, 4, 5, 6, 7, 8, 9}; int[] arr3 = {1, 2, 3, 4, 5, 6, 7, 8, 9}; int[] arr4 = {1, 2, 3, 4, 5, 6, 7, 8, 9}; int[] arr5 = {1, 2, 3, 4, 5, 6, 7, 8, 9}; int[] arr6 = {1, 2, 3, 4, 5,
@Test public void testIOContext() { String[][] tests = new String[][] { new String[] { "a", "b", "c" }, new String[] { "d", "e", "f" }, new String[] { "a", "b", "c", "d", "e", "f" }, new String[] { "a", "b", "c", "d", "e", "f" }, new String[] { "a", "b", "c", "d", "e", "f" }, new String[] { "a", "b", "c", "d", "e", "f" }, new String[] { "a",
@Test public void testIOContext() { BufferRecycler br = BufferRecycler.fixed(); try { IOContext ctx1 = new IOContext(br, new Object(), true); assertSame(br, ctx1.getBufferRecycler()); assertSame(br, ctx1.getBufferRecycler()); IOContext ctx2 = new IOContext(br, new Object(), false); assertSame(br, ctx2.getBufferRecycler()); assertSame(br, ctx2.getBufferRecycler()); assertSame(br, ctx2.getBufferRecycler()); } catch (Throwable t) { System.out.println(t.getMessage()); t.printStackTrace(); fail(t.getMessage()); }
@Test public void testIOContext() { BufferRecycler br = BufferRecycler.fixed(); Object sourceRef = new Object(); IOContext ctx = new IOContext(br, sourceRef, true); assertEquals(true, ctx.isResourceManaged()); assertSame(br, ctx.getBufferRecycler()); assertSame(sourceRef, ctx.getSourceReference()); assertSame(br, ctx.getBufferRecycler()); assertSame(sourceRef, ctx.getSourceReference()); assertSame(br, ctx.getBufferRecycler()); assertSame(sourceRef, ctx.getSourceReference()); assertSame(true, ctx.isResourceManaged()); assertSame(br, ctx.getBufferRecycler());
@Test public void testIOContext() throws IOException { ClassPathResource resource = new ClassPathResource("test.json"); ClassPathResource resource2 = new ClassPathResource("test2.json"); ClassPathResource resource3 = new ClassPathResource("test3.json"); ClassPathResource resource4 = new ClassPathResource("test4.json"); ClassPathResource resource5 = new ClassPathResource("test5.json"); assertTrue(resource.isResourceManaged()); assertTrue(resource2.isResourceManaged()); assertTrue(resource3.isResourceManaged()); assertTrue(resource4.isResourceManaged()); assertTrue(resource5.isResourceManaged()); assertTrue(resource6.isResourceManaged());
@Test public void testAllocReadIOBuffer() { byte[] buf = new byte[] { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
@Test public void testAllocReadIOBuffer() throws JsonParseException, JsonMappingException, IOException { BufferRecycler br = mock(BufferRecycler.class); when(br.allocByteBuffer(any(ByteBufferRecycler.ByteBufferType.class))).thenReturn(new byte[0]) .thenReturn(new byte[0]) .thenReturn(new byte[0]) .thenReturn(new byte[0]) .thenReturn(new byte[0]) .thenReturn(new byte[0]) .thenReturn(new byte[0]) .thenReturn(new byte[0]) .thenReturn(new byte[0]) .thenReturn(new byte[0]) .thenReturn(new byte[
@Test public void testAllocReadIOBuffer() { BufferRecycler br = mock(BufferRecycler.class); when(br.allocByteBuffer(BufferRecycler.ByteBufferType.READ_IO_BUFFER)).thenReturn(new byte[0]) .thenReturn(new byte[0]) .thenReturn(new byte[0]) .thenReturn(new byte[0]) .thenReturn(new byte[0]) .thenReturn(new byte[0]) .thenReturn(new byte[0]) .thenReturn(new byte[0]) .thenReturn(new byte[0]) .thenReturn(new byte[0]) .thenReturn(new byte[0]) .thenReturn(new
@Test public void testAllocWriteEncodingBuffer() { JsonEncoding enc = new JsonEncoding(); enc.setEncoding(JsonEncoding.EncodingType.UTF8); byte[] buf = enc.allocWriteEncodingBuffer(); Assert.assertNotNull(buf); Assert.assertEquals(1, buf.length); byte[] buf2 = enc.allocWriteEncodingBuffer(); Assert.assertNotNull(buf2); Assert.assertEquals(2, buf2.length); byte[] buf3 = enc.allocWriteEncodingBuffer(); Assert.assertNotNull(buf3); Assert.assertEquals(3, buf3.length); byte[] buf4 = enc.allocWriteEncodingBuffer(); Assert.assertNotNull(buf4); Assert.
@Test public void testAllocWriteEncodingBuffer() { JsonContext ctx = new JsonContext(null, null, false); try { byte[] buf = ctx._allocWriteEncodingBuffer(); Assert.assertEquals(0, buf.length); } catch (JsonDataException e) { Assert.fail(e.getMessage()); } try { byte[] buf = ctx._allocWriteEncodingBuffer(); Assert.assertEquals(0, buf.length); } catch (JsonDataException e) { Assert.fail(e.getMessage()); } try { byte[] buf = ctx._allocWriteEncodingBuffer(); Assert.assertEquals(0, buf.length); } catch (JsonDataException e) { Assert.fail(e.getMessage()); }
@Test public void testAllocWriteEncodingBuffer() { BufferRecycler br = mock(BufferRecycler.class); when(br.allocByteBuffer(BufferRecycler.ByteBufferType.WRITE_ENCODING_BUFFER)).thenReturn(new byte[0]) .thenReturn(new byte[0]) .thenReturn(new byte[0]) .thenReturn(new byte[0]) .thenReturn(new byte[0]) .thenReturn(new byte[0]) .thenReturn(new byte[0]) .thenReturn(new byte[0]) .thenReturn(new byte[0]) .thenReturn(new byte[0]) .thenReturn(new byte[0]) .thenReturn(new
@Test public void testAllocTokenBuffer() { char[] tokenCBuffer = null; try { tokenCBuffer = allocTokenBuffer(); } catch (NullPointerException e) { Assert.fail("allocTokenBuffer should not be null"); } char[] buf = allocTokenBuffer(); try { char[] buf2 = allocTokenBuffer(); } catch (NullPointerException e) { Assert.fail("allocTokenBuffer should not be null"); } char[] buf3 = allocTokenBuffer(); try { char[] buf4 = allocTokenBuffer(); } catch (NullPointerException e) { Assert.fail("allocTokenBuffer should not be null"); } char[] buf5 = allocTokenBuffer(); try { char[] buf6 = allocToken
@Test public void testAllocTokenBuffer() { char[] tokenCBuffer = new char[0]; char[] tokenCBuffer1 = new char[0]; char[] tokenCBuffer2 = new char[0]; char[] tokenCBuffer3 = new char[0]; char[] tokenCBuffer4 = new char[0]; char[] tokenCBuffer5 = new char[0]; char[] tokenCBuffer6 = new char[0]; char[] tokenCBuffer7 = new char[0]; char[] tokenCBuffer8 = new char[0]; char[] tokenCBuffer9 = new char[0]; char[] tokenCBuffer10 = new char[0]; char[] tokenCBuffer11 =
@Test public void testAllocTokenBuffer() { BufferRecycler br = mock(BufferRecycler.class); when(br.allocCharBuffer(BufferRecycler.CharBufferType.TOKEN_BUFFER)).thenReturn(new char[0]) .thenReturn(new char[0]) .thenReturn(new char[0]) .thenReturn(new char[0]) .thenReturn(new char[0]) .thenReturn(new char[0]) .thenReturn(new char[0]) .thenReturn(new char[0]) .thenReturn(new char[0]) .thenReturn(new char[0]) .thenReturn(new char[0]) .thenReturn(new char
@Test public void testAllocConcatBuffer() { char[] buf = str.allocConcatBuffer(); Assert.assertEquals(0, buf.length); char[] buf2 = str.allocConcatBuffer(); Assert.assertEquals(0, buf2.length); char[] buf3 = str.allocConcatBuffer(); Assert.assertEquals(0, buf3.length); char[] buf4 = str.allocConcatBuffer(); Assert.assertEquals(0, buf4.length); char[] buf5 = str.allocConcatBuffer(); Assert.assertEquals(0, buf5.length); char[] buf6 = str.allocConcatBuffer(); Assert.assertEquals(0, buf6.length); char[]
@Test public void testAllocConcatBuffer() { char[] buf = new char[2]; char[] buf2 = new char[2]; char[] buf3 = new char[2]; char[] buf4 = new char[2]; char[] buf5 = new char[2]; char[] buf6 = new char[2]; char[] buf7 = new char[2]; char[] buf8 = new char[2]; char[] buf9 = new char[2]; char[] buf10 = new char[2]; char[] buf11 = new char[2]; char[] buf12 = new char[2]; char[] buf13 = new char[2]; char[] buf21 = new char[2
@Test public void testAllocConcatBuffer() { BufferRecycler br = mock(BufferRecycler.class); when(br.allocCharBuffer(BufferRecycler.CharBufferType.CONCAT_BUFFER)).thenReturn(new char[0]) .thenReturn(new char[0]) .thenReturn(new char[0]) .thenReturn(new char[0]) .thenReturn(new char[0]) .thenReturn(new char[0]) .thenReturn(new char[0]) .thenReturn(new char[0]) .thenReturn(new char[0]) .thenReturn(new char[0]) .thenReturn(new char[0]) .thenReturn(new
@Test public void testAllocNameCopyBuffer() { char[] buf = str.allocNameCopyBuffer(10); Assert.assertEquals(10, buf.length); char[] buf2 = str.allocNameCopyBuffer(10); Assert.assertEquals(10, buf2.length); char[] buf3 = str.allocNameCopyBuffer(10); Assert.assertEquals(10, buf3.length); char[] buf4 = str.allocNameCopyBuffer(10); Assert.assertEquals(10, buf4.length); char[] buf5 = str.allocNameCopyBuffer(10); Assert.assertEquals(10, buf5.length); char[] buf6 = str.allocName
@Test public void testAllocNameCopyBuffer() { char[] buf = new char[2]; char[] buf2 = new char[2]; char[] buf3 = new char[2]; char[] buf4 = new char[2]; char[] buf5 = new char[2]; char[] buf6 = new char[2]; char[] buf7 = new char[2]; char[] buf8 = new char[2]; char[] buf9 = new char[2]; char[] buf10 = new char[2]; char[] buf11 = new char[2]; char[] buf12 = new char[2]; char[] buf13 = new char[2]; char[] buf21 = new char[
@Test public void testAllocNameCopyBuffer() { BufferRecycler br = mock(BufferRecycler.class); when(br.allocCharBuffer(BufferRecycler.CharBufferType.NAME_COPY_BUFFER, 0)).thenReturn(new char[0]); when(br.allocCharBuffer(BufferRecycler.CharBufferType.NAME_COPY_BUFFER, 0)).thenReturn(new char[0]); when(br.allocCharBuffer(BufferRecycler.CharBufferType.NAME_COPY_BUFFER, 0)).thenReturn(new char[0]); when(br.allocCharBuffer(BufferRecycler.CharBufferType.NAME_COPY_BUFFER, 0)).
@Test public void testReleaseReadIOBuffer() { byte[] buf = new byte[4]; buf[0] = \'a\'; buf[1] = \'b\'; buf[2] = \'c\'; buf[3] = \'d\'; buf[4] = \'e\'; try { this.ctx.releaseReadIOBuffer(buf); } catch (IOException e) { Assert.fail(e.getMessage()); } finally { buf[0] = \'a\'; buf[1] = \'b\'; buf[2] = \'c\'; } try { this.ctx.releaseReadIOBuffer(null); } catch (IOException e) { Assert.fail(
@Test public void testReleaseReadIOBuffer() { TextBuffer buf = new TextBuffer(); try { buf.releaseReadIOBuffer(null); fail("Should not be able to release a null buffer"); } catch (NullPointerException e) { } try { buf.releaseReadIOBuffer(new byte[0]); fail("Should not be able to release a null buffer"); } catch (NullPointerException e) { } try { buf.releaseReadIOBuffer(null); fail("Should not be able to release a null buffer"); } catch (NullPointerException e) { } try { buf.releaseReadIOBuffer(new byte[0]); fail("Should not be able to release a null buffer"); } catch (Null
@Test public void testReleaseReadIOBuffer() { TextBuffer buf = new TextBuffer(); try { BufferRecycler.releaseByteBuffer(BufferRecycler.ByteBufferType.READ_IO_BUFFER, buf); } catch (BufferRecyclerException e) { e.printStackTrace(); fail(e.getMessage()); } try { BufferRecycler.releaseByteBuffer(BufferRecycler.ByteBufferType.READ_IO_BUFFER, buf); } catch (BufferRecyclerException e) { e.printStackTrace(); fail(e.getMessage()); } try { BufferRecycler.releaseByteBuffer(BufferRecycler.ByteBufferType.READ_IO_BUFFER, buf); } catch (BufferRecyclerException e) { e.print
@Test public void testReleaseWriteEncodingBuffer() { JsonEncoding enc = new JsonEncoding(); enc.setEncoding(JsonEncoding.UTF8); byte[] buf = enc.allocWriteEncodingBuffer(); byte[] buf2 = enc.allocWriteEncodingBuffer(); byte[] buf3 = enc.allocConcatBuffer(); byte[] buf4 = enc.allocTokenBuffer(); char[] buf5 = enc.nameCopyBuffer(); char[] buf6 = enc.nameCopyBuffer(); char[] buf7 = enc.nameCopyBuffer(); char[] buf8 = enc.nameCopyBuffer(); char[] buf9 = enc.nameCopyBuffer(); char[] buf10 = enc.nameCopyBuffer(); char[] buf11 = enc.
@Test public void testReleaseWriteEncodingBuffer() { TextBuffer buf = new TextBuffer(); try { buf.releaseWriteEncodingBuffer(null); fail("Should not be able to release a null buffer"); } catch (NullPointerException e) { } try { buf.releaseWriteEncodingBuffer(new byte[0]); fail("Should not be able to release a null buffer"); } catch (NullPointerException e) { } try { buf.releaseWriteEncodingBuffer(null); fail("Should not be able to release a null buffer"); } catch (NullPointerException e) { } try { buf.releaseWriteEncodingBuffer(new byte[0]); fail("Should not be able to release a null buffer"); } catch (Null
@Test public void testReleaseWriteEncodingBuffer() { TextBuffer buf = new TextBuffer(); try { buf._verifyRelease(null, null); fail("Should not be able to release a null buffer"); } catch (NullPointerException e) { } try { buf.release(null); fail("Should not be able to release a null buffer"); } catch (NullPointerException e) { } try { buf.release(null); fail("Should not be able to release a null buffer"); } catch (NullPointerException e) { } try { buf.release(null); fail("Should not be able to release a null buffer"); } catch (NullPointerException e) { } }
@Test public void testReleaseTokenBuffer() { char[] buf = new char[0]; char[] buf2 = new char[0]; char[] buf3 = new char[0]; char[] buf4 = new char[0]; char[] buf5 = new char[0]; char[] buf6 = new char[0]; char[] buf7 = new char[0]; char[] buf8 = new char[0]; char[] buf9 = new char[0]; char[] buf10 = new char[0]; char[] buf11 = new char[0]; char[] buf12 = new char[0]; char[] buf13 = new char[0]; char[] buf21 = new char[0
@Test public void testReleaseTokenBuffer() { TextBuffer buf = new TextBuffer(); char[] token = new char[0]; char[] token2 = new char[0]; char[] token3 = new char[0]; char[] token4 = new char[0]; char[] token5 = new char[0]; char[] token6 = new char[0]; char[] token7 = new char[0]; char[] token8 = new char[0]; char[] token9 = new char[0]; char[] token10 = new char[0]; char[] token11 = new char[0]; char[] token12 = new char[0]; char[] token13 = new char[0]; char
@Test public void test_verifyRelease() { TextBuffer buf = new TextBuffer(); char[] token = new char[0]; char[] token2 = new char[0]; char[] token3 = new char[0]; char[] token4 = new char[0]; char[] token5 = new char[0]; char[] token6 = new char[0]; char[] token7 = new char[0]; char[] token8 = new char[0]; char[] token9 = new char[0]; char[] token10 = new char[0]; char[] token11 = new char[0]; char[] token12 = new char[0]; char[] token13 = new char[0]; char
@Test public void testReleaseConcatBuffer() { char[] buf = new char[0]; char[] buf2 = new char[0]; char[] buf3 = new char[0]; char[] buf4 = new char[0]; char[] buf5 = new char[0]; char[] buf6 = new char[0]; char[] buf7 = new char[0]; char[] buf8 = new char[0]; char[] buf9 = new char[0]; char[] buf10 = new char[0]; char[] buf11 = new char[0]; char[] buf12 = new char[0]; char[] buf13 = new char[0]; char[] buf21 = new char[0
@Test public void testReleaseConcatBuffer() { char[] buf = new char[2]; char[] buf2 = new char[2]; char[] buf3 = new char[2]; char[] buf4 = new char[2]; char[] buf5 = new char[2]; char[] buf6 = new char[2]; char[] buf7 = new char[2]; char[] buf8 = new char[2]; char[] buf9 = new char[2]; char[] buf10 = new char[2]; char[] buf11 = new char[2]; char[] buf12 = new char[2]; char[] buf13 = new char[2]; char[] buf21 = new char[2
@Test public void test_verifyRelease() { TextBuffer buf = new TextBuffer(); char[] bufChars = new char[2]; char[] bufChars2 = new char[2]; char[] bufChars3 = new char[2]; char[] bufChars4 = new char[2]; char[] bufChars5 = new char[2]; char[] bufChars6 = new char[2]; char[] bufChars7 = new char[2]; char[] bufChars8 = new char[2]; char[] bufChars9 = new char[2]; char[] bufChars10 = new char[2]; char[] bufChars11 = new char[2]; char[] bufChars12 = new char[2
@Test public void testReleaseNameCopyBuffer() { char[] buf = new char[0]; char[] buf2 = new char[0]; char[] buf3 = new char[0]; char[] buf4 = new char[0]; char[] buf5 = new char[0]; char[] buf6 = new char[0]; char[] buf7 = new char[0]; char[] buf8 = new char[0]; char[] buf9 = new char[0]; char[] buf10 = new char[0]; char[] buf11 = new char[0]; char[] buf12 = new char[0]; char[] buf13 = new char[0]; char[] buf21 = new char[
@Test public void testReleaseNameCopyBuffer() { char[] buf = new char[3]; buf[0] = 'a'; buf[1] = 'b'; buf[2] = 'c'; char[] buf2 = new char[3]; buf2[0] = 'd'; buf2[1] = 'e'; buf2[2] = 'f'; char[] buf3 = new char[3]; buf3[0] = 'g'; buf3[1] = 'h'; buf3[2] = 'i'; buf3[3] = 'j'; buf3[4] = 'l'; buf3[5] = 'o'; buf3[
@Test public void testVerifyRelease() { TextBuffer buf = new TextBuffer(); char[] bufChars = new char[2]; char[] bufChars2 = new char[2]; char[] bufChars3 = new char[2]; char[] bufChars4 = new char[2]; char[] bufChars5 = new char[2]; char[] bufChars6 = new char[2]; char[] bufChars7 = new char[2]; char[] bufChars8 = new char[2]; char[] bufChars9 = new char[2]; char[] bufChars10 = new char[2]; char[] bufChars11 = new char[2]; char[] bufChars12 = new char[2];
@Test public void test_verifyAlloc() { Object src=new Object(); try { _verifyAlloc(src); } catch (IllegalStateException e) { Assert.assertEquals("Trying to call same allocXxx() method second time", e.getMessage()); } src.toString(); try { _verifyAlloc(null); } catch (IllegalStateException e) { Assert.assertEquals("Trying to call same allocXxx() method second time", e.getMessage()); } src.toString(); try { _verifyAlloc(src); } catch (IllegalStateException e) { Assert.assertEquals("Trying to call same allocXxx() method second time", e.getMessage()); } src.toString(); try { _verifyAlloc(
@Test public void testAlloc() { BufferRecycler br = BufferRecycler.INSTANCE; TextBuffer buffer = new TextBuffer(); try { br._verifyAlloc(null); } catch (IllegalStateException e) { Assert.assertEquals("Trying to call same allocXxx() method second time", e.getMessage()); } try { br._verifyAlloc(new Object()); } catch (IllegalStateException e) { Assert.assertEquals("Trying to call same allocXxx() method second time", e.getMessage()); } try { br._verifyAlloc(new Object()); } catch (IllegalStateException e) { Assert.assertEquals("Trying to call same allocXxx() method second time", e.getMessage()); } }
@Test(expected=IllegalStateException.class) public void testAlloc2() { TextBuffer buf = new TextBuffer(); try { buf._verifyAlloc(buf); } catch (IllegalStateException e) { Assert.assertEquals("Trying to call same allocXxx() method second time", e.getMessage()); throw e; } }
@Test public void test_verifyRelease() { Object src=new Object(); try { _verifyRelease(null, src); } catch (IllegalArgumentException e) { Assert.assertTrue(true); } try { _verifyRelease(new Object(), src); } catch (IllegalArgumentException e) { Assert.assertTrue(true); } try { _verifyRelease(new Object(), src); } catch (IllegalArgumentException e) { Assert.assertTrue(true); } try { _verifyRelease(new Object(), src); } catch (IllegalArgumentException e) { Assert.assertTrue(true); } try { _verifyRelease(new Object(), src); } catch (IllegalArgumentException e) { Assert.assertTrue(true); } }
@Test public void test_verifyRelease() { Object src=new Object(); try { ctx._verifyRelease(null, src); } catch (IllegalArgumentException e) { Assert.assertEquals("Trying to release buffer not owned by the context", e.getMessage()); } try { ctx._verifyRelease(new Object(), src); } catch (IllegalArgumentException e) { Assert.assertEquals("Trying to release buffer not owned by the context", e.getMessage()); } try { ctx._verifyRelease(new Object(), src); } catch (IllegalArgumentException e) { Assert.assertEquals("Trying to release buffer not owned by the context", e.getMessage()); } }
@Test public void testVerifyRelease() { Object src=new Object(); IOContext ctx=new IOContext(BufferRecycler.fixed(), src, true); try { ctx._verifyRelease(null, src); fail("Expected IllegalArgumentException"); } catch (IllegalArgumentException e) { } try { ctx._verifyRelease(new Object(), src); fail("Expected IllegalArgumentException"); } catch (IllegalArgumentException e) { } try { ctx._verifyRelease(new Object(), src); fail("Expected IllegalArgumentException"); } catch (IllegalArgumentException e) { } try { ctx._verifyRelease(new Object(), src); fail("Expected IllegalArgumentException"); } catch (IllegalArgumentException e) { } try { ctx._verifyRelease(new Object(), src); fail("Expected IllegalArgumentException
@Test public void testSimple() throws IOException { DataFormatDetector d = new DataFormatDetector(); ByteArrayOutputStream baos = new ByteArrayOutputStream(); try (DataFormatWriter writer = new DataOutputStream(baos)) { writer.write("{\\n" + " \\"a\\": 1,\\n" + " \\"b\\": 2,\\n" + " \\"c\\": 3,\\n" + " \\"d\\": 4,\\n" + " \\"e\\": 5,\\n" + " \\"f\\": 6,\\n" + " \\"g\\": 7,\\n" + " \\"h\\": 8,\\n" + " \\"
@Test public void testReadValueAsTree() throws IOException, JsonParseException { String json = "{\\n" + " \\"a\\": 1,\\n" + " \\"b\\": 2,\\n" + " \\"c\\": 3,\\n" + " \\"d\\": 4,\\n" + " \\"e\\": 5\\n" + "}"; String expected = "{\\n" + " \\"a\\": 1,\\n" + " \\"b\\": 2,\\n" + " \\"c\\": 3,\\n" + " \\"d\\": 4,\\n" + " \\"e\\": 5
@Test public void testReadValueAsTree() throws IOException, JsonParseException { String json = "{\\"a\\":1, \\"b\\":2, \\"c\\":3}"; String expected = "{\\"a\\":1, \\"b\\":2, \\"c\\":3, \\"d\\":4}"; JsonParser parser = new JsonParserFactory().createParser(json); SimpleNode node = parser.readValueAsTree(); assertEquals(expected, node.get("a").asText()); assertEquals(2, node.get("b").asInt()); assertEquals(3, node.get("c").asInt()); assertEquals(4, node.get
@Test public void testReadValueAsTree() throws IOException, JsonParseException { String json = "{\\"a\\":1, \\"b\\":2, \\"c\\":3}"; String expected = "{\\"a\\":1, \\"b\\":2, \\"c\\":3}"; JsonParserFactory factory = new JsonParserFactory(); JsonParser parser = factory.createParser(json); SimpleNode node = (SimpleNode) parser.nextValueAsTree(); assertEquals(expected, node.get("a").asText()); assertEquals(2, node.get("b").asInt()); assertEquals(3, node.get("c").asInt()); }
@Test public void testReadValueAsTree() throws IOException, JsonParseException { JsonParserFactory factory = new JsonParserFactory(); JsonParser parser = factory.createParser("{\\"a\\":1, \\"b\\":2}"); ObjectNode root = parser.readValueAsTree(); assertNotNull(root); assertEquals(1, root.getChildren().size()); assertEquals(2, root.getChildren().get(0).getChildren().size()); assertEquals(1, root.getChildren().get(1).getChildren().size()); assertEquals(2, root.getChildren().get(2).getChildren().size()); }
@Test public void testJsonGeneratorImpl() throws IOException { ObjectCodec codec = ObjectCodec.getDefaultCodec(); JsonGeneratorFactory factory = new JsonGeneratorFactory(); JsonGeneratorImpl jgen = (JsonGeneratorImpl) factory.createGenerator(); jgen.writeStringField("a", "1"); jgen.writeStringField("b", "2"); jgen.writeStringField("c", "3"); jgen.writeStringField("d", "4"); jgen.writeStringField("e", "5"); jgen.writeStringField("f", "6"); jgen.writeStringField("g", "7"); jgen.writeStringField("h", "8"); jgen.
@Test public void testJsonGeneratorImpl() throws IOException { ObjectCodec codec = ObjectCodec.JSON_CODEC; JsonContext ctxt = new JsonContextImpl(); JsonGeneratorImpl jgen = new JsonGeneratorImpl(ctxt, 0, codec); jgen.setHighestNonEscapedChar(\'\\\'\'); jgen.writeStringField("a", "a"); jgen.writeStringField("b", "b"); jgen.writeStringField("c", "c"); jgen.writeStringField("d", "d"); jgen.writeStringField("e", "e"); jgen.writeStringField("f", "f"); jgen.writeStringField("g", "g");
@Test public void testJsonGeneratorImpl() throws IOException { ObjectCodec codec = ObjectCodec.JSON_CODEC; JsonContext ctxt = new JsonContextImpl(); JsonGeneratorImpl jgen = new JsonGeneratorImpl(ctxt, 0, codec); jgen.writeStringField("a", "a"); jgen.writeStringField("b", "b"); jgen.writeStringField("c", "c"); jgen.writeStringField("d", "d"); jgen.writeStringField("e", "e"); jgen.writeStringField("f", "f"); jgen.writeStringField("g", "g"); jgen.writeStringField("h", "h"); jgen
@Test public void testJsonGeneratorImpl() throws Exception { final JsonGeneratorFactory factory = new JsonGeneratorFactory(); final JsonGeneratorImpl generator = (JsonGeneratorImpl) factory.createGenerator(); generator.writeStringField("a", "a"); generator.writeStringField("b", "b"); generator.writeStringField("c", "c"); generator.writeStringField("d", "d"); generator.writeStringField("e", "e"); generator.writeStringField("f", "f"); generator.writeStringField("g", "g"); generator.writeStringField("h", "h"); generator.writeStringField("i", "i"); generator.writeStringField("j", "j
@Test public void testVersion() { assertEquals(VersionUtil.versionFor(JsonGeneratorImpl.class), new JsonGeneratorImpl(null, 0, ObjectCodec.DEFAULT_CODEC).version()); assertEquals(VersionUtil.versionFor(JsonGeneratorImpl.class), new JsonGeneratorImpl(null, 0, ObjectCodec.DEFAULT_CODEC).version()); assertEquals(VersionUtil.versionFor(JsonGeneratorImpl.class), new JsonGeneratorImpl(null, 0, ObjectCodec.DEFAULT_CODEC).version()); assertEquals(VersionUtil.versionFor(JsonGeneratorImpl.class), new JsonGeneratorImpl(null, 0, ObjectCodec.DEFAULT_CODEC).version()); }
@Test public void testVersion() { assertEquals(VersionUtil.versionFor(JsonGeneratorImpl.class).version(), VersionUtil.versionFor(JsonGeneratorImpl.class).version()); assertEquals(VersionUtil.versionFor(JsonGeneratorImpl.class).version(), VersionUtil.versionFor(JsonGeneratorImpl.class).version()); assertEquals(VersionUtil.versionFor(JsonGeneratorImpl.class).version(), VersionUtil.versionFor(JsonGeneratorImpl.class).version()); assertEquals(VersionUtil.versionFor(JsonGeneratorImpl.class).version(), VersionUtil.versionFor(JsonGeneratorImpl.class).version()); assertEquals(VersionUtil.versionFor(JsonGeneratorImpl.class).version
@Test public void testResetWithShared() { TextBuffer buffer = new TextBuffer(BufferRecycler.INSTANCE); buffer.append("abc", 0, 1); buffer.append("def", 0, 2); buffer.resetWithShared("abc".toCharArray(), 0, 2); assertEquals("abc", buffer.contentsAsString()); assertEquals("def", buffer.getTextBuffer().toString()); }
@Test public void testResetWithShared() { TextBuffer textBuffer = new TextBuffer(BufferRecycler.INSTANCE); textBuffer.append("abc", 0, 1); textBuffer.append("abcd", 0, 2); textBuffer.append("\\n", 0, 3); textBuffer.append("\\n", 0, 4); textBuffer.append("\\n", 0, 5); textBuffer.append("\\n", 0, 6); textBuffer.append("\\n", 0, 7); textBuffer.append("\\n", 0, 8); textBuffer.append("\\n", 0, 9); textBuffer.append("\\n", 0, 10); textBuffer.append
@Test public void testResetWithShared() { TextBuffer textBuffer = new TextBuffer(BufferRecycler.INSTANCE); textBuffer.append("abc", 0, 1); textBuffer.append("def", 0, 2); textBuffer.append("\\n", 0, 3); textBuffer.append("\\n", 0, 4); textBuffer.append("\\n", 0, 5); textBuffer.append("\\n", 0, 6); textBuffer.append("\\n", 0, 7); textBuffer.append("\\n", 0, 8); textBuffer.append("\\n", 0, 9); textBuffer.append("\\n", 0, 10); textBuffer.append("
@Test public void testResetWithShared() { TextBuffer textBuffer = new TextBuffer(BufferRecycler.INSTANCE); textBuffer.append("abcd".toCharArray(), 0, 1); textBuffer.resetWithShared("abcd".toCharArray(), 0, 1); assertEquals("abcd", textBuffer.contentsAsString()); textBuffer.resetWithShared("abcd".toCharArray(), 0, 1); assertEquals("", textBuffer.contentsAsString()); textBuffer.resetWithShared("abcd".toCharArray(), 0, 1); assertEquals("", textBuffer.contentsAsString()); textBuffer.resetWithShared("abcd".toCharArray(), 0, 1); assertEquals("", textBuffer.contents
@Test public void testResetWithShared() { TextBuffer textBuffer = new TextBuffer(BufferRecycler.INSTANCE); textBuffer.append("abc", 0, 1); textBuffer.append("def", 0, 2); textBuffer.append("ghi", 0, 3); textBuffer.append("jklm", 0, 4); textBuffer.resetWithShared("abcd".toCharArray(), 0, 4); textBuffer.resetWithShared("abcd".toCharArray(), 0, 4); textBuffer.resetWithShared("abcd".toCharArray(), 0, 4); textBuffer.resetWithShared("abcd".toCharArray(), 0, 4); textBuffer.resetWithShared("ab
@Test public void testResetWithShared() { TextBuffer textBuffer = new TextBuffer(BufferRecycler.INSTANCE); textBuffer.append("abc", 0, 1); textBuffer.append("def", 0, 2); textBuffer.append("ghi", 0, 3); textBuffer.append("jklm", 0, 4); textBuffer.resetWithShared("abcd".toCharArray(), 0, 4); textBuffer.resetWithShared("abcd".toCharArray(), 0, 4); textBuffer.resetWithShared("abcd".toCharArray(), 0, 4); textBuffer.resetWithShared("abcd".toCharArray(), 0, 4); textBuffer.resetWithShared("ab
@Test public void testResetWithShared() { TextBuffer buffer = new TextBuffer(BufferRecycler.INSTANCE); buffer.append("abc", 0, 1); assertEquals("abc", buffer.contentsAsString()); assertEquals(0, buffer.getTextOffset()); assertEquals(1, buffer.getCurrentSize()); buffer.resetWithShared("abc".toCharArray(), 0, 1); assertEquals("abc", buffer.contentsAsString()); assertEquals(0, buffer.getTextOffset()); assertEquals(1, buffer.getCurrentSize()); assertEquals(0, buffer.getSegments().size()); }
@Test public void testClearSegments() { TextBuffer buffer = new TextBuffer(BufferRecycler.DEFAULT); buffer.append("abc", 0, 1); buffer.append("def", 0, 2); buffer.append("ghi", 0, 3); buffer.append("jklm", 0, 4); buffer.append("klmn", 0, 5); assertEquals("abc", buffer.contentsAsString()); assertEquals("", buffer.getTextBuffer().toString()); assertEquals(0, buffer.getCurrentSegment().length); assertEquals("", buffer.getCurrentSegment()[0]); assertEquals("def", buffer.getCurrentSegment()[1]); assertEquals("ghi", buffer.get
@Test public void testResetWithCopy() { TextBuffer textBuffer = new TextBuffer(BufferRecycler.INSTANCE); textBuffer.append("abc", 0, 1); textBuffer.append("def", 0, 2); textBuffer.append("\\n", 0, 3); textBuffer.append("\\n", 0, 4); textBuffer.append("\\n", 0, 5); textBuffer.append("\\n", 0, 6); textBuffer.append("\\n", 0, 7); textBuffer.append("\\n", 0, 8); textBuffer.append("\\n", 0, 9); textBuffer.append("\\n", 0, 10); textBuffer.append("
@Test public void testResetWithCopy() { TextBuffer textBuffer = new TextBuffer(BufferRecycler.INSTANCE); textBuffer.append("abc", 0, 1); textBuffer.append("def", 0, 2); textBuffer.append("\\n", 0, 3); textBuffer.append("\\n", 0, 4); textBuffer.append("\\n", 0, 5); textBuffer.append("\\n", 0, 6); textBuffer.append("\\n", 0, 7); textBuffer.append("\\n", 0, 8); textBuffer.append("\\n", 0, 9); textBuffer.append("\\n", 0, 10); textBuffer.append("
@Test public void testResetWithCopy() { TextBuffer buffer = new TextBuffer(BufferRecycler.INSTANCE); buffer.append("abc", 0, 1); buffer.append("def", 0, 2); assertEquals("abc", new String(buffer.getTextBuffer())); assertEquals("def", new String(buffer.getCurrentSegment())); buffer.resetWithCopy("abc".toCharArray(), 0, 2); assertEquals("abc", new String(buffer.getTextBuffer())); assertEquals("def", new String(buffer.getCurrentSegment())); buffer.resetWithCopy("abc".toCharArray(), 0, 2); assertEquals("abc", new String(buffer.getTextBuffer()
@Test public void testResetWithCopy() { TextBuffer textBuffer = new TextBuffer(BufferRecycler.INSTANCE); textBuffer.append("abc", 0, 1); textBuffer.append("def", 0, 2); textBuffer.append("\\n", 0, 3); textBuffer.append("\\n", 0, 4); textBuffer.append("\\n", 0, 5); textBuffer.append("\\n", 0, 6); textBuffer.append("\\n", 0, 7); textBuffer.append("\\n", 0, 8); textBuffer.append("\\n", 0, 9); textBuffer.append("\\n", 0, 10); textBuffer.append("
@Test public void testResetWithCopy() { TextBuffer textBuffer = new TextBuffer(BufferRecycler.INSTANCE); textBuffer.append("abc", 0, 1); textBuffer.append("def", 0, 2); textBuffer.append("\\n", 0, 3); textBuffer.append("\\n", 0, 4); textBuffer.append("\\n", 0, 5); textBuffer.append("\\n", 0, 6); textBuffer.append("\\n", 0, 7); textBuffer.append("\\n", 0, 8); textBuffer.append("\\n", 0, 9); textBuffer.append("\\n", 0, 10); textBuffer.append("
@Test public void testResetWithCopy() { TextBuffer textBuffer = new TextBuffer(BufferRecycler.INSTANCE); textBuffer.append("abc", 0, 1); textBuffer.append("def", 0, 2); textBuffer.append("\\n", 0, 3); textBuffer.append("\\n", 0, 4); textBuffer.append("\\n", 0, 5); textBuffer.append("\\n", 0, 6); textBuffer.append("\\n", 0, 7); textBuffer.append("\\n", 0, 8); textBuffer.append("\\n", 0, 9); textBuffer.append("\\n", 0, 10); textBuffer.append("
@Test public void testResetWithCopy() { TextBuffer textBuffer = new TextBuffer(BufferRecycler.INSTANCE); textBuffer.append("abc", 0, 1); textBuffer.append("def", 0, 2); textBuffer.append("\\n", 0, 3); textBuffer.append("\\n", 0, 4); textBuffer.append("\\n", 0, 5); textBuffer.append("\\n", 0, 6); textBuffer.append("\\n", 0, 7); textBuffer.append("\\n", 0, 8); textBuffer.append("\\n", 0, 9); textBuffer.append("\\n", 0, 10); textBuffer.append("
@Test public void testResetWithCopy() { TextBuffer textBuffer = new TextBuffer(BufferRecycler.INSTANCE); textBuffer.append("abc", 0, 1); textBuffer.append("def", 0, 2); textBuffer.append("\\n", 0, 3); textBuffer.append("\\n", 0, 4); textBuffer.append("\\n", 0, 5); textBuffer.append("\\n", 0, 6); textBuffer.append("\\n", 0, 7); textBuffer.append("\\n", 0, 8); textBuffer.append("\\n", 0, 9); textBuffer.append("\\n", 0, 10); textBuffer.append("
@Test public void testResetWithCopy() { TextBuffer textBuffer = new TextBuffer(BufferRecycler.INSTANCE); textBuffer.append("abc", 0, 1); textBuffer.append("def", 0, 2); textBuffer.append("\\n", 0, 3); textBuffer.append("\\n", 0, 4); textBuffer.append("\\n", 0, 5); textBuffer.append("\\n", 0, 6); textBuffer.append("\\n", 0, 7); textBuffer.append("\\n", 0, 8); textBuffer.append("\\n", 0, 9); textBuffer.append("\\n", 0, 10); textBuffer.append("
@Test public void testResetWithCopy() { TextBuffer textBuffer = new TextBuffer(BufferRecycler.INSTANCE); textBuffer.append("abc", 0, 1); textBuffer.append("def", 0, 2); textBuffer.append("\\n", 0, 3); textBuffer.append("\\n", 0, 4); textBuffer.append("\\n", 0, 5); textBuffer.append("\\n", 0, 6); textBuffer.append("\\n", 0, 7); textBuffer.append("\\n", 0, 8); textBuffer.append("\\n", 0, 9); textBuffer.append("\\n", 0, 10); textBuffer.append("
@Test public void testAppend() { TextBuffer buffer = new TextBuffer(BufferRecycler.INSTANCE); buffer.append("abc", 0, 2); assertEquals("abc", buffer.contentsAsString()); assertEquals(0, buffer.getTextOffset()); assertEquals(2, buffer.getCurrentLength()); buffer.append("abcd", 0, 2); assertEquals("abcd", buffer.contentsAsString()); assertEquals(0, buffer.getTextOffset()); assertEquals(2, buffer.getCurrentLength()); buffer.append("abcd", 0, 2); assertEquals("abcd", buffer.contentsAsString()); assertEquals(0, buffer.getTextOffset()); assertEquals(2, buffer.
@Test public void testClearSegments() { TextBuffer buffer = new TextBuffer(BufferRecycler.DEFAULT); buffer.append("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ", 0, 10); buffer.append("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ", 0, 10); buffer.append("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ", 0, 10); buffer.append("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ", 0, 10); buffer
@Test public void testClearSegments() { TextBuffer buffer = new TextBuffer(BufferRecycler.INSTANCE); buffer.clearSegments(); assertEquals("", buffer.contentsAsString()); assertEquals("", buffer.getTextBuffer().toString()); assertEquals(0, buffer.currentSize()); assertEquals(0, buffer.getCurrentSize()); assertFalse(buffer.hasSegments()); }
@Test public void testClearSegments() { TextBuffer buffer = new TextBuffer(BufferRecycler.DEFAULT); buffer.append("abc", 0, 1); buffer.append("def", 0, 2); buffer.append("ghi", 0, 3); buffer.append("jklm", 0, 4); buffer.append("klmn", 0, 5); buffer.clearSegments(); assertEquals("", buffer.contentsAsString()); assertEquals("", buffer.getTextString()); assertEquals(0, buffer.getCurrentSize()); assertEquals(0, buffer.getCurrentLength()); assertEquals(0, buffer.getSegments().size()); assertArrayEquals(new char[0], buffer.getSegments
@Test public void testClearSegments() { TextBuffer buffer = new TextBuffer(BufferRecycler.INSTANCE); buffer.clearSegments(); assertEquals("", buffer.contentsAsString()); assertEquals("", buffer.getTextBuffer().toString()); assertEquals(0, buffer.currentSize()); assertEquals(0, buffer.getCurrentSize()); assertTrue(buffer.hasSegments()); assertArrayEquals(new char[0], buffer.getCurrentSegment()); assertArrayEquals(new char[0], buffer.getCurrentSegment()); }
@Test public void testGetTextBuffer() { TextBuffer buf = new TextBuffer(BufferRecycler.INSTANCE); assertEquals("", new String(buf.getTextBuffer(), Charsets.UTF_8)); assertEquals("", new String(buf.getTextBuffer(), Charsets.UTF_8)); assertEquals("", new String(buf.getTextBuffer(), Charsets.UTF_8)); buf.append("test"); assertEquals("test", new String(buf.getTextBuffer(), Charsets.UTF_8)); assertEquals("test", new String(buf.getTextBuffer(), Charsets.UTF_8)); assertEquals("test", new String(buf.getTextBuffer(), Charsets
@Test public void testContentsAsString() { TextBuffer buf = new TextBuffer(BufferRecycler.DEFAULT); assertEquals("", buf.contentsAsString()); buf.resetWithString("foo"); assertEquals("foo", buf.contentsAsString()); buf.resetWithString("bar"); assertEquals("bar", buf.contentsAsString()); buf.resetWithString("baz"); assertEquals("baz", buf.contentsAsString()); buf.resetWithString("foo"); assertEquals("foo", buf.contentsAsString()); buf.resetWithString("bar"); assertEquals("bar", buf.contentsAsString()); buf.resetWithString("baz"); assertEquals("bar", buf.contentsAsString()); buf.resetWithString
@Test public void testContentsAsString() { TextBuffer buf = new TextBuffer(BufferRecycler.DEFAULT); assertEquals("", buf.contentsAsString()); buf.resetWithString("foo"); assertEquals("foo", buf.contentsAsString()); buf.resetWithString("bar"); assertEquals("bar", buf.contentsAsString()); buf.resetWithString("baz"); assertEquals("baz", buf.contentsAsString()); buf.resetWithString("foo"); assertEquals("foo", buf.contentsAsString()); buf.resetWithString("bar"); assertEquals("bar", buf.contentsAsString()); buf.resetWithString("baz"); assertEquals("bar", buf.contentsAsString()); buf.resetWithString
@Test public void testString() { TextBuffer buf = new TextBuffer(BufferRecycler.DEFAULT); assertEquals("", buf.contentsAsString()); assertEquals("", buf.contentsAsString()); buf.resetWithString("foo"); assertEquals("foo", buf.contentsAsString()); assertEquals("foo", buf.contentsAsString()); buf.resetWithString("bar"); assertEquals("bar", buf.contentsAsString()); assertEquals("bar", buf.contentsAsString()); buf.resetWithString("baz"); assertEquals("baz", buf.contentsAsString()); assertEquals("bar", buf.contentsAsString()); assertEquals("baz", buf.contentsAsString()); }
@Test public void testContentsAsString() { TextBuffer buf = new TextBuffer(BufferRecycler.DEFAULT); assertEquals("", buf.contentsAsString()); buf.resetWithString("foo"); assertEquals("foo", buf.contentsAsString()); buf.resetWithString("bar"); assertEquals("bar", buf.contentsAsString()); buf.resetWithString("baz"); assertEquals("baz", buf.contentsAsString()); buf.resetWithString("foo"); assertEquals("foo", buf.contentsAsString()); buf.resetWithString("bar"); assertEquals("bar", buf.contentsAsString()); buf.resetWithString("baz"); assertEquals("bar", buf.contentsAsString()); buf.resetWithString
@Test public void testContentsAsString() { TextBuffer buf = new TextBuffer(BufferRecycler.DEFAULT); assertEquals("", buf.contentsAsString()); buf.resetWithString("foo"); assertEquals("foo", buf.contentsAsString()); buf.resetWithString("bar"); assertEquals("bar", buf.contentsAsString()); buf.resetWithString("baz"); assertEquals("baz", buf.contentsAsString()); buf.resetWithString("foo"); assertEquals("foo", buf.contentsAsString()); buf.resetWithString("bar"); assertEquals("bar", buf.contentsAsString()); buf.resetWithString("baz"); assertEquals("bar", buf.contentsAsString()); buf.resetWithString
@Test public void testContentsAsString() { TextBuffer buf = new TextBuffer(BufferRecycler.DEFAULT); assertEquals("", buf.contentsAsString()); buf.resetWithString("foo"); assertEquals("foo", buf.contentsAsString()); buf.resetWithString("bar"); assertEquals("bar", buf.contentsAsString()); buf.resetWithString("baz"); assertEquals("baz", buf.contentsAsString()); buf.resetWithString("foo"); assertEquals("foo", buf.contentsAsString()); buf.resetWithString("bar"); assertEquals("bar", buf.contentsAsString()); buf.resetWithString("baz"); assertEquals("bar", buf.contentsAsString()); buf.resetWithString
@Test public void testToString() { TextBuffer buf = new TextBuffer(BufferRecycler.DEFAULT); assertEquals("", buf.contentsAsString()); buf.resetWithString("foo"); assertEquals("foo", buf.contentsAsString()); buf.resetWithString("bar"); assertEquals("bar", buf.contentsAsString()); buf.resetWithString("baz"); assertEquals("baz", buf.contentsAsString()); buf.resetWithString("foo"); assertEquals("foo", buf.contentsAsString()); buf.resetWithString("bar"); assertEquals("bar", buf.contentsAsString()); buf.resetWithString("baz"); assertEquals("bar", buf.contentsAsString()); buf.resetWithString("
@Test public void testContentsAsString() { TextBuffer buf = new TextBuffer(BufferRecycler.DEFAULT); assertNull(buf.getTextBuffer()); assertEquals("", buf.contentsAsString()); buf.clearSegments(); assertEquals("", buf.contentsAsString()); assertEquals("", buf.getTextBuffer()); assertEquals(0, buf.getSegments().size()); assertEquals(0, buf.getSegments().get(0).getTextOffset()); assertEquals(0, buf.getSegments().get(0).getTextLength()); assertEquals(0, buf.getSegments().get(0).getTextOffset()); assertEquals(0, buf.getSegments().get(0).getTextLength
@Test public void testContentsAsString() { TextBuffer buf = new TextBuffer(BufferRecycler.DEFAULT); assertEquals("", buf.contentsAsString()); buf.resetWithString("foo"); assertEquals("foo", buf.contentsAsString()); buf.resetWithString("bar"); assertEquals("bar", buf.contentsAsString()); buf.resetWithString("baz"); assertEquals("baz", buf.contentsAsString()); buf.resetWithString("foo"); assertEquals("foo", buf.contentsAsString()); buf.resetWithString("bar"); assertEquals("bar", buf.contentsAsString()); buf.resetWithString("baz"); assertEquals("bar", buf.contentsAsString()); buf.resetWithString
@Test public void testContentsAsString() { TextBuffer buf = new TextBuffer(BufferRecycler.DEFAULT); assertEquals("", buf.contentsAsString()); buf.resetWithString("Hello"); assertEquals("Hello", buf.contentsAsString()); buf.resetWithString("World"); assertEquals("", buf.contentsAsString()); buf.resetWithString("Hello"); assertEquals("Hello", buf.contentsAsString()); buf.resetWithString("World"); assertEquals("", buf.contentsAsString()); }
@Test public void testContentsAsString() { TextBuffer buffer = new TextBuffer(BufferRecycler.DEFAULT); buffer.append(new char[]{\'a\', \'b\', \'c\', \'d\'}); buffer.append(new char[]{\'a\', \'b\', \'c\', \'d\'}); buffer.append(new char[]{\'a\', \'b\', \'c\', \'d\'}); buffer.append(new char[]{\'a\', \'b\', \'c\', \'d\'}); buffer.append(new char[]{\'a\', \'b\', \'c\', \'d\'}); buffer.append(new char[]{\'a\', \'b\', \'c\', \'d\'
@Test public void testContentsAsString() { TextBuffer buffer = new TextBuffer(BufferRecycler.DEFAULT); buffer.append(new char[]{\'a\', \'b\', \'c\', \'d\'}); buffer.append(new char[]{\'a\', \'b\', \'c\', \'d\'}); buffer.append(new char[]{\'a\', \'b\', \'c\', \'d\'}); buffer.append(new char[]{\'a\', \'b\', \'c\', \'d\'}); buffer.append(new char[]{\'a\', \'b\', \'c\', \'d\'}); buffer.append(new char[]{\'a\', \'b\', \'c\', \'d\'
@Test public void testContentsAsString() { TextBuffer buf = new TextBuffer(BufferRecycler.DEFAULT); assertEquals("", buf.contentsAsString()); buf.resetWithString("foo"); assertEquals("foo", buf.contentsAsString()); buf.resetWithString("bar"); assertEquals("bar", buf.contentsAsString()); buf.resetWithString("baz"); assertEquals("baz", buf.contentsAsString()); buf.resetWithString("foo"); assertEquals("foo", buf.contentsAsString()); buf.resetWithString("bar"); assertEquals("bar", buf.contentsAsString()); buf.resetWithString("baz"); assertEquals("bar", buf.contentsAsString()); buf.resetWithString
@Test public void testAppend() { final TextBuffer buf = new TextBuffer(BufferRecycler.DEFAULT); buf.append("abc", 0, 1); assertEquals("abc", buf.contentsAsString()); assertEquals(0, buf.getCurrentLength()); buf.append("abcd", 0, 2); assertEquals("abcd", buf.contentsAsString()); assertEquals(2, buf.getCurrentLength()); buf.append("abcd", 0, 3); assertEquals("abcd", buf.contentsAsString()); assertEquals(3, buf.getCurrentLength()); buf.append("abcd", 0, 4); assertEquals("abcd", buf.contentsAsString()); assertEquals(4, buf
@Test public void testToString() { TextBuffer buffer = new TextBuffer(BufferRecycler.DEFAULT); buffer.append("test", 0, 1); assertEquals("test", buffer.contentsAsString()); buffer.append("test", 0, 2); assertEquals("test", buffer.contentsAsString()); buffer.append("test", 0, 3); assertEquals("test", buffer.contentsAsString()); buffer.append("test", 0, 4); assertEquals("test", buffer.contentsAsString()); buffer.append("test", 0, 5); assertEquals("test", buffer.contentsAsString()); buffer.append("test", 0, 6); assertEquals("test", buffer.contentsAsString()); buffer.append("test",
@Test public void testAppend() { final TextBuffer buf = new TextBuffer(BufferRecycler.DEFAULT); buf.append("abc", 0, 2); assertEquals("abc", buf.contentsAsString()); assertEquals(0, buf.getCurrentLength()); buf.append("abcd", 0, 2); assertEquals("abcd", buf.contentsAsString()); assertEquals(2, buf.getCurrentLength()); buf.append("abcd", 0, 2); assertEquals("abcd", buf.contentsAsString()); assertEquals(2, buf.getCurrentLength()); buf.append("abcd", 0, 2); assertEquals("abcd", buf.contentsAsString()); assertEquals(2, buf
@Test public void testAppend() { final TextBuffer buf = new TextBuffer(BufferRecycler.DEFAULT); buf.append("abc", 0, 2); assertEquals("abc", buf.contentsAsString()); assertEquals(0, buf.getCurrentLength()); buf.append("abcd", 0, 2); assertEquals("abcd", buf.contentsAsString()); assertEquals(2, buf.getCurrentLength()); buf.append("abcd", 0, 2); assertEquals("abcd", buf.contentsAsString()); assertEquals(2, buf.getCurrentLength()); buf.append("abcd", 0, 2); assertEquals("abcd", buf.contentsAsString()); assertEquals(2, buf
@Test public void testAppend() { final TextBuffer buf = new TextBuffer(BufferRecycler.DEFAULT); buf.append("abc", 0, 1); assertEquals("abc", buf.contentsAsString()); assertEquals(0, buf.getCurrentLength()); buf.append("abc", 0, 2); assertEquals("abc", buf.contentsAsString()); assertEquals(0, buf.getCurrentLength()); buf.append("abc", 0, 3); assertEquals("abc", buf.contentsAsString()); assertEquals(0, buf.getCurrentLength()); buf.append("abc", 0, 4); assertEquals("abc", buf.contentsAsString()); assertEquals(0, buf.getCurrentLength()); buf
@Test public void testAppend() { final TextBuffer buf = new TextBuffer(BufferRecycler.DEFAULT); buf.append("abc", 0, 1); assertEquals("abc", buf.contentsAsString()); assertEquals(0, buf.getCurrentLength()); buf.append("abcd", 0, 2); assertEquals("abcd", buf.contentsAsString()); assertEquals(2, buf.getCurrentLength()); buf.append("abcd", 0, 3); assertEquals("abcd", buf.contentsAsString()); assertEquals(3, buf.getCurrentLength()); buf.append("abcd", 0, 4); assertEquals("abcd", buf.contentsAsString()); assertEquals(4, buf
@Test public void testAppend() { final TextBuffer buf = new TextBuffer(BufferRecycler.DEFAULT); buf.append("test", 0, 1); assertEquals("test", new String(buf.getTextBuffer())); buf.append("test", 0, 2); assertEquals("test", new String(buf.getTextBuffer())); buf.append("test", 0, 3); assertEquals("test", new String(buf.getTextBuffer())); buf.append("test", 0, 4); assertEquals("test", new String(buf.getTextBuffer())); buf.append("test", 0, 5); assertEquals("test", new String(buf.getTextBuffer()));
@Test public void testToString() { TextBuffer buffer = new TextBuffer(BufferRecycler.DEFAULT); buffer.append("test", 0, 1); assertEquals("test", buffer.contentsAsString()); buffer.append("test", 0, 2); assertEquals("test", buffer.contentsAsString()); buffer.append("test", 0, 3); assertEquals("test", buffer.contentsAsString()); buffer.append("test", 0, 4); assertEquals("test", buffer.contentsAsString()); buffer.append("test", 0, 5); assertEquals("test", buffer.contentsAsString()); buffer.append("test", 0, 6); assertEquals("test", buffer.contentsAsString()); buffer.append("test",
@Test public void testAppend() { final TextBuffer buffer = new TextBuffer(BufferRecycler.DEFAULT); buffer.getTextBuffer().append("test", 0, 1); buffer.getTextBuffer().append("test", 0, 2); buffer.getTextBuffer().append("test", 0, 3); buffer.getTextBuffer().append("test", 0, 4); buffer.getTextBuffer().append("test", 0, 5); buffer.getTextBuffer().append("test", 0, 6); buffer.getTextBuffer().append("test", 0, 7); buffer.getTextBuffer().append("test", 0, 8); buffer.getTextBuffer().append("test", 0, 9
@Test public void testAppend() { final TextBuffer buf = new TextBuffer(BufferRecycler.DEFAULT); buf.append("abc", 0, 1); assertEquals("abc", buf.contentsAsString()); assertEquals(0, buf.getCurrentLength()); buf.append("abcd", 0, 2); assertEquals("abcd", buf.contentsAsString()); assertEquals(2, buf.getCurrentLength()); buf.append("abcd", 0, 3); assertEquals("abcd", buf.contentsAsString()); assertEquals(3, buf.getCurrentLength()); buf.append("abcd", 0, 4); assertEquals("abcd", buf.contentsAsString()); assertEquals(4, buf
@Test public void testAppend() { final TextBuffer buf = new TextBuffer(BufferRecycler.DEFAULT); buf.append("abc", 0, 2); assertEquals("abc", buf.contentsAsString()); assertEquals(0, buf.getCurrentLength()); buf.append("abcd", 0, 2); assertEquals("abcd", buf.contentsAsString()); assertEquals(2, buf.getCurrentLength()); buf.append("abcd", 0, 2); assertEquals("abcd", buf.contentsAsString()); assertEquals(2, buf.getCurrentLength()); buf.append("abcd", 0, 2); assertEquals("abcd", buf.contentsAsString()); assertEquals(2, buf
@Test public void testAppend() { TextBuffer buffer = new TextBuffer(BufferRecycler.DEFAULT); buffer.append("abc", 0, 1); assertEquals("abc", buffer.contentsAsString()); buffer.append("abcd", 0, 2); assertEquals("abcd", buffer.contentsAsString()); buffer.append("abcd", 0, 3); assertEquals("abcd", buffer.contentsAsString()); buffer.append("abcd", 0, 4); assertEquals("abcd", buffer.contentsAsString()); buffer.append("abcd", 0, 5); assertEquals("abcd", buffer.contentsAsString()); buffer.append("abcd", 0, 6); assertEquals("abcd", buffer
@Test public void testUnshare() { final TextBuffer buf = new TextBuffer(BufferRecycler.DEFAULT); buf.append("test", 0, 1); assertEquals("test", buf.contentsAsString()); assertEquals(0, buf.getTextOffset()); assertEquals(1, buf.getCurrentLength()); buf.append("test", 0, 2); assertEquals("test", buf.contentsAsString()); assertEquals(2, buf.getCurrentLength()); buf.append("test", 0, 3); assertEquals("test", buf.contentsAsString()); assertEquals(3, buf.getCurrentLength()); buf.append("test", 0, 4); assertEquals("test", buf.contentsAsString());
@Test public void testAppend() { final TextBuffer buf = new TextBuffer(BufferRecycler.DEFAULT); buf.append("test", 0, 1); assertEquals("test", buf.contentsAsString()); assertEquals(0, buf.getTextOffset()); assertEquals(1, buf.getCurrentLength()); buf.append("test", 0, 2); assertEquals("test", buf.contentsAsString()); assertEquals(2, buf.getCurrentLength()); buf.append("test", 0, 3); assertEquals("test", buf.contentsAsString()); assertEquals(3, buf.getCurrentLength()); buf.append("test", 0, 4); assertEquals("test", buf.contentsAsString()); assert
@Test public void testGetChars() { final TextBuffer buffer = new TextBuffer(BufferRecycler.DEFAULT); buffer.append("test", 0, 1); assertEquals("test", buffer.contentsAsString()); buffer.append("test", 0, 2); assertEquals("test", buffer.contentsAsString()); buffer.append("test", 0, 3); assertEquals("test", buffer.contentsAsString()); buffer.append("test", 0, 4); assertEquals("test", buffer.contentsAsString()); buffer.append("test", 0, 5); assertEquals("test", buffer.contentsAsString()); buffer.append("test", 0, 6); assertEquals("test", buffer.contentsAsString()); buffer.append("
@Test public void testAppend() { final TextBuffer buf = new TextBuffer(BufferRecycler.DEFAULT); buf.append("", 0, 0); assertEquals("", buf.contentsAsString()); assertEquals(0, buf.getTextOffset()); assertEquals(0, buf.getCurrentLength()); buf.append("", 0, 0); assertEquals("", buf.contentsAsString()); assertEquals(0, buf.getTextOffset()); assertEquals(0, buf.getCurrentLength()); buf.append("", 0, 0); assertEquals("", buf.contentsAsString()); assertEquals(0, buf.getTextOffset()); assertEquals(0, buf.getCurrentLength()); buf.append("",
@Test public void testAppend() { final TextBuffer buffer = new TextBuffer(BufferRecycler.DEFAULT); buffer.append("test", 0, 1); assertEquals("test", buffer.contentsAsString()); buffer.append("test", 0, 2); assertEquals("test", buffer.contentsAsString()); buffer.append("test", 0, 3); assertEquals("test", buffer.contentsAsString()); buffer.append("test", 0, 4); assertEquals("test", buffer.contentsAsString()); buffer.append("test", 0, 5); assertEquals("test", buffer.contentsAsString()); buffer.append("test", 0, 6); assertEquals("test", buffer.contentsAsString()); buffer.append("test
@Test public void testAppend() { final TextBuffer buf = new TextBuffer(BufferRecycler.DEFAULT); buf.append("test", 0, 1); assertEquals("test", buf.contentsAsString()); assertEquals(0, buf.getTextOffset()); assertEquals(1, buf.getCurrentLength()); buf.append("", 0, 0); assertEquals("", buf.contentsAsString()); assertEquals(0, buf.getTextOffset()); assertEquals(1, buf.getCurrentLength()); buf.append("test", 0, 1); assertEquals("test", buf.contentsAsString()); assertEquals(1, buf.getCurrentLength()); assertEquals(1, buf.getCurrentSegment().length
@Test public void testAppend() { final TextBuffer buffer = new TextBuffer(BufferRecycler.DEFAULT); buffer.append("test", 0, 1); assertEquals("test", buffer.contentsAsString()); buffer.append("test", 0, 2); assertEquals("test", buffer.contentsAsString()); buffer.append("test", 0, 3); assertEquals("test", buffer.contentsAsString()); buffer.append("test", 0, 4); assertEquals("test", buffer.contentsAsString()); buffer.append("test", 0, 5); assertEquals("test", buffer.contentsAsString()); buffer.append("test", 0, 6); assertEquals("test", buffer.contentsAsString()); buffer.append("test
@Test public void testAppend() { final TextBuffer buffer = new TextBuffer(BufferRecycler.DEFAULT); buffer.append("test", 0, 1); assertEquals("test", buffer.contentsAsString()); buffer.append("test", 0, 2); assertEquals("test", buffer.contentsAsString()); buffer.append("test", 0, 3); assertEquals("test", buffer.contentsAsString()); buffer.append("test", 0, 4); assertEquals("test", buffer.contentsAsString()); buffer.append("test", 0, 5); assertEquals("test", buffer.contentsAsString()); buffer.append("test", 0, 6); assertEquals("test", buffer.contentsAsString()); buffer.append("test
@Test public void testGetChars() { final TextBuffer buffer = new TextBuffer(BufferRecycler.DEFAULT); buffer.append("", 0, 0); assertEquals("", buffer.contentsAsString()); buffer.append("", 0, 0); assertEquals("", buffer.contentsAsString()); buffer.append("", 0, 0); assertEquals("", buffer.contentsAsString()); buffer.append("", 0, 0); assertEquals("", buffer.contentsAsString()); buffer.append("", 0, 0); assertEquals("", buffer.contentsAsString()); buffer.append("", 0, 0); assertEquals("", buffer.contentsAsString()); buffer.append("", 0, 0); assertEquals("", buffer.contents
@Test public void testAppend() { final TextBuffer buffer = new TextBuffer(BufferRecycler.DEFAULT); buffer.append("test", 0, 1); assertEquals("test", buffer.contentsAsString()); buffer.append("test", 0, 2); assertEquals("test", buffer.contentsAsString()); buffer.append("test", 0, 3); assertEquals("test", buffer.contentsAsString()); buffer.append("test", 0, 4); assertEquals("test", buffer.contentsAsString()); buffer.append("test", 0, 5); assertEquals("test", buffer.contentsAsString()); buffer.append("test", 0, 6); assertEquals("test", buffer.contentsAsString()); buffer.append("test
@Test public void testAppend() { final TextBuffer buffer = new TextBuffer(BufferRecycler.DEFAULT); buffer.append("test", 0, 1); assertEquals("test", buffer.contentsAsString()); buffer.append("test", 0, 2); assertEquals("test", buffer.contentsAsString()); buffer.append("test", 0, 3); assertEquals("test", buffer.contentsAsString()); buffer.append("test", 0, 4); assertEquals("test", buffer.contentsAsString()); buffer.append("test", 0, 5); assertEquals("test", buffer.contentsAsString()); buffer.append("test", 0, 6); assertEquals("test", buffer.contentsAsString()); buffer.append("test
@Test public void testAppend() { final TextBuffer buffer = new TextBuffer(BufferRecycler.DEFAULT); buffer.append("test", 0, 1); assertEquals("test", buffer.contentsAsString()); buffer.append("test", 0, 2); assertEquals("test", buffer.contentsAsString()); buffer.append("test", 0, 3); assertEquals("test", buffer.contentsAsString()); buffer.append("test", 0, 4); assertEquals("test", buffer.contentsAsString()); buffer.append("test", 0, 5); assertEquals("test", buffer.contentsAsString()); buffer.append("test", 0, 6); assertEquals("test", buffer.contentsAsString()); buffer.append("test
@Test public void testAppend() { final TextBuffer buffer = new TextBuffer(BufferRecycler.DEFAULT); buffer.append("", 0, 0); assertEquals("", buffer.contentsAsString()); buffer.append("", 0, 0); assertEquals("", buffer.contentsAsString()); buffer.append("", 0, 0); assertEquals("", buffer.contentsAsString()); buffer.append("", 0, 0); assertEquals("", buffer.contentsAsString()); buffer.append("", 0, 0); assertEquals("", buffer.contentsAsString()); buffer.append("", 0, 0); assertEquals("", buffer.contentsAsString()); buffer.append("", 0, 0); assertEquals("", buffer.contentsAsString
@Test public void testGetCurrentSegment() { TextBuffer buffer = new TextBuffer(BufferRecycler.INSTANCE); buffer.append("abc", 0, 1); buffer.append("def", 0, 2); buffer.append("ghij", 0, 3); buffer.append("klmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ", 0, 4); buffer.append("klmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ", 0, 5); buffer.append("klmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ", 0, 6); buffer.append("klmnopqrst
@Test public void testGetCurrentSegment() { TextBuffer buffer = new TextBuffer(BufferRecycler.INSTANCE); buffer.append("abc", 0, 1); assertEquals("abc", new String(buffer.getCurrentSegment())); buffer.append("def", 0, 2); assertEquals("def", new String(buffer.getCurrentSegment())); buffer.append("ghi", 0, 3); assertEquals("ghi", new String(buffer.getCurrentSegment())); buffer.append("jklm", 0, 4); assertEquals("jklm", new String(buffer.getCurrentSegment())); }
@Test public void testGetCurrentSegment() { TextBuffer buffer = new TextBuffer(BufferRecycler.INSTANCE); buffer.append("abc", 0, 1); assertEquals("abc", new String(buffer.getCurrentSegment())); buffer.append("def", 0, 2); assertEquals("def", new String(buffer.getCurrentSegment())); buffer.append("ghi", 0, 3); assertEquals("ghi", new String(buffer.getCurrentSegment())); buffer.append("jklm", 0, 4); assertEquals("jklm", new String(buffer.getCurrentSegment())); }
@Test public void testGetCurrentSegment() { TextBuffer buffer = new TextBuffer(BufferRecycler.INSTANCE); buffer.append("abc", 0, 1); assertEquals("abc", new String(buffer.getCurrentSegment())); buffer.append("def", 0, 2); assertEquals("def", new String(buffer.getCurrentSegment())); buffer.append("ghi", 0, 3); assertEquals("ghi", new String(buffer.getCurrentSegment())); buffer.append("jklm", 0, 4); assertEquals("jklm", new String(buffer.getCurrentSegment())); }
@Test public void testGetCurrentSegment() { TextBuffer textBuffer = new TextBuffer(BufferRecycler.INSTANCE); textBuffer.append("abc", 0, 1); textBuffer.append("def", 0, 2); textBuffer.append("ghij", 0, 3); textBuffer.append("klmnopqrstuvwxyz", 0, 4); textBuffer.append("klmnopqrstuvwxyz", 0, 5); textBuffer.append("klmnopqrstuvwxyz", 0, 6); textBuffer.append("klmnopqrstuvwxyz", 0, 7); textBuffer.append("klmnopqrstuvwxyz", 0, 8); textBuffer.append
@Test public void testGetCurrentSegment() { TextBuffer buffer = new TextBuffer(BufferRecycler.INSTANCE); buffer.append("abc", 0, 1); assertEquals("abc", new String(buffer.getCurrentSegment())); buffer.append("def", 0, 2); assertEquals("def", new String(buffer.getCurrentSegment())); buffer.append("ghi", 0, 3); assertEquals("ghi", new String(buffer.getCurrentSegment())); buffer.append("jklm", 0, 4); assertEquals("jklm", new String(buffer.getCurrentSegment())); }
@Test public void testGetCurrentSegmentSize() { TextBuffer buf = new TextBuffer(new BufferRecycler(0)); assertEquals(0, buf.getCurrentSegmentSize()); for (int i = 0; i < 10; i++) { buf.append("foo", 0, i); } assertEquals(10, buf.getCurrentSegmentSize()); buf.append("bar", 0, 10); assertEquals(10, buf.getCurrentSegmentSize()); buf.append("baz", 0, 10); assertEquals(10, buf.getCurrentSegmentSize()); }
@Test public void testGetCurrentSegmentSize() { TextBuffer buf = new TextBuffer(BufferRecycler.INSTANCE); assertEquals(0, buf.getCurrentSegmentSize()); for (int i = 0; i < 10; i++) { buf.append("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ", 0, 10); } assertEquals(10, buf.getCurrentSegmentSize()); for (int i = 0; i < 10; i++) { buf.append("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ", 0, 10); } assertEquals(10, buf.
@Test public void testExpand() { TextBuffer buffer = new TextBuffer(BufferRecycler.INSTANCE); buffer.append("abc", 0, 1); buffer.append("def", 0, 2); buffer.append("ghi", 0, 3); buffer.append("hij", 0, 4); buffer.append("klmnopqrstuvwxyz", 0, 5); buffer.append("klmnopqrstuvwxyz", 0, 6); buffer.append("klmnopqrstuvwxyz", 0, 7); buffer.append("klmnopqrstuvwxyz", 0, 8); buffer.append("klmnopqrstuvwxyz", 0, 9); buffer.append("
@Test public void testExpand() { TextBuffer buffer = new TextBuffer(BufferRecycler.INSTANCE); buffer.append("abc", 0, 1); assertEquals("abc", buffer.contentsAsString()); buffer.append("def", 0, 2); assertEquals("abc", buffer.contentsAsString()); buffer.append("def", 0, 3); assertEquals("def", buffer.contentsAsString()); buffer.append("def", 0, 4); assertEquals("def", buffer.contentsAsString()); buffer.append("def", 0, 5); assertEquals("def", buffer.contentsAsString()); buffer.append("def", 0, 6); assertEquals("def", buffer.contentsAsString()); }
@Test public void testExpand() { TextBuffer buffer = new TextBuffer(BufferRecycler.INSTANCE); buffer.append("abc", 0, 1); buffer.append("def", 0, 2); buffer.append("\\n", 0, 3); buffer.append("\\n", 0, 4); buffer.append("\\n", 0, 5); buffer.append("\\n", 0, 6); buffer.append("\\n", 0, 7); buffer.append("\\n", 0, 8); buffer.append("\\n", 0, 9); buffer.append("\\n", 0, 10); buffer.append("\\n", 0, 11); buffer.append("\\n",
@Test public void testExpand() { TextBuffer buffer = new TextBuffer(BufferRecycler.INSTANCE); buffer.append("abc", 0, 1); assertEquals("abc", buffer.contentsAsString()); assertEquals(0, buffer.getCurrentLength()); buffer.append("def", 0, 2); assertEquals("def", buffer.contentsAsString()); assertEquals(0, buffer.getCurrentLength()); buffer.append("def", 0, 3); assertEquals("def", buffer.contentsAsString()); assertEquals(0, buffer.getCurrentLength()); buffer.append("def", 0, 4); assertEquals("def", buffer.contentsAsString()); assertEquals(0, buffer.getCurrentLength()); buffer.
@Test public void testExpand() { TextBuffer buffer = new TextBuffer(BufferRecycler.INSTANCE); buffer.append("abc", 0, 1); assertEquals("abc", buffer.contentsAsString()); buffer.append("def", 0, 2); assertEquals("abc", buffer.contentsAsString()); buffer.append("def", 0, 3); assertEquals("def", buffer.contentsAsString()); buffer.append("def", 0, 4); assertEquals("def", buffer.contentsAsString()); buffer.append("def", 0, 5); assertEquals("def", buffer.contentsAsString()); buffer.append("def", 0, 6); assertEquals("def", buffer.contentsAsString()); }
@Test public void testExpand() { TextBuffer buffer = new TextBuffer(BufferRecycler.INSTANCE); buffer.append("foo", 0, 1); buffer.append("bar", 0, 2); buffer.append("baz", 0, 3); assertEquals("foo", buffer.contentsAsString()); assertEquals(0, buffer.getCurrentLength()); assertEquals(1, buffer.getCurrentSegment().length); assertEquals("bar", buffer.getCurrentSegment()[0]); assertEquals(2, buffer.getCurrentSegment().length); assertEquals("baz", buffer.getCurrentSegment()[1]); assertEquals(3, buffer.getCurrentSegment().length); assertEquals("baz",
@Test public void testExpand() { TextBuffer buffer = new TextBuffer(BufferRecycler.INSTANCE); buffer.append("abc", 0, 1); assertEquals("abc", buffer.contentsAsString()); buffer.append("def", 0, 2); assertEquals("abc", buffer.contentsAsString()); buffer.append("def", 0, 3); assertEquals("def", buffer.contentsAsString()); buffer.append("def", 0, 4); assertEquals("def", buffer.contentsAsString()); buffer.append("def", 0, 5); assertEquals("def", buffer.contentsAsString()); buffer.append("def", 0, 6); assertEquals("def", buffer.contentsAsString()); }
@Test public void testExpand() { TextBuffer buffer = new TextBuffer(BufferRecycler.INSTANCE); buffer.append("abc", 0, 1); assertEquals("abc", buffer.contentsAsString()); assertEquals(0, buffer.getCurrentLength()); buffer.append("def", 0, 2); assertEquals("def", buffer.contentsAsString()); assertEquals(0, buffer.getCurrentLength()); buffer.append("def", 0, 3); assertEquals("def", buffer.contentsAsString()); assertEquals(0, buffer.getCurrentLength()); buffer.append("def", 0, 4); assertEquals("def", buffer.contentsAsString()); assertEquals(0, buffer.getCurrentLength()); buffer.
@Test public void testExpand() { TextBuffer textBuffer = new TextBuffer(BufferRecycler.INSTANCE); textBuffer.append("abc", 0, 1); textBuffer.append("def", 0, 2); textBuffer.append("\\n", 0, 3); textBuffer.append("\\n", 0, 4); textBuffer.append("\\n", 0, 5); textBuffer.append("\\n", 0, 6); textBuffer.append("\\n", 0, 7); textBuffer.append("\\n", 0, 8); textBuffer.append("\\n", 0, 9); textBuffer.append("\\n", 0, 10); textBuffer.append("\\n
@Test public void testExpand() { TextBuffer textBuffer = new TextBuffer(BufferRecycler.INSTANCE); textBuffer.append("abc", 0, 1); textBuffer.append("def", 0, 2); textBuffer.append("\\n", 0, 3); textBuffer.append("\\n", 0, 4); textBuffer.append("\\n", 0, 5); textBuffer.append("\\n", 0, 6); textBuffer.append("\\n", 0, 7); textBuffer.append("\\n", 0, 8); textBuffer.append("\\n", 0, 9); textBuffer.append("\\n", 0, 10); textBuffer.append("\\n
@Test public void testExpand() { TextBuffer textBuffer = new TextBuffer(BufferRecycler.INSTANCE); textBuffer.append("abc", 0, 1); textBuffer.append("def", 0, 2); textBuffer.append("\\n", 0, 3); textBuffer.append("\\n\\n", 0, 4); textBuffer.append("\\n\\n", 0, 5); textBuffer.append("\\n\\n", 0, 6); textBuffer.append("\\n\\n", 0, 7); textBuffer.append("\\n\\n", 0, 8); textBuffer.append("\\n\\n", 0, 9); textBuffer.append("\\n
@Test public void testExpand() { TextBuffer buffer = new TextBuffer(BufferRecycler.INSTANCE); buffer.append("abc", 0, 1); assertEquals("abc", buffer.contentsAsString()); assertEquals(0, buffer.getCurrentLength()); buffer.append("def", 0, 2); assertEquals("def", buffer.contentsAsString()); assertEquals(0, buffer.getCurrentLength()); buffer.append("def", 0, 3); assertEquals("def", buffer.contentsAsString()); assertEquals(0, buffer.getCurrentLength()); buffer.append("def", 0, 4); assertEquals("def", buffer.contentsAsString()); assertEquals(0, buffer.getCurrentLength()); buffer.
@Test public void testExpand() { TextBuffer buffer = new TextBuffer(BufferRecycler.DEFAULT); buffer.append("abc", 0, 1); assertEquals("abc", buffer.contentsAsString()); assertEquals(0, buffer.getCurrentLength()); buffer.append("def", 0, 2); assertEquals("def", buffer.contentsAsString()); assertEquals(1, buffer.getCurrentLength()); assertEquals(2, buffer.getCurrentSegment().length); assertEquals("abc", buffer.getCurrentSegment()[0]); assertEquals("def", buffer.getCurrentSegment()[1]); }
@Test public void testBuildResultArray() { final TextBuffer buffer = new TextBuffer(BufferRecycler.DEFAULT); final TextBuffer.Builder builder = new TextBuffer.Builder(); builder.appendString("test"); builder.appendString("test2"); builder.appendString("test3"); builder.appendString("test4"); builder.appendString("test5"); builder.appendString("test6"); builder.appendString("test7"); builder.appendString("test8"); builder.appendString("test9"); builder.appendString("test10"); builder.appendString("test11"); builder.appendString("test12"); builder.appendString("test13"); builder.appendString("test14
@Test public void testGeneratorBase() throws IOException { ObjectCodec codec = ObjectCodec.forClass(String.class); TestGenerator generator = new TestGenerator(); generator.setOutputContext(new JsonWriteContext() { @Override public void writeRootContext(JsonWriteContext ctx) throws IOException, JsonGenerationException { } @Override public int getFeatureMask() { return 0; } @Override public JsonWriteContext createRootContext() { return ctx; } @Override public void writeFieldName(String name) throws IOException, JsonGenerationException { } @Override public void writeRawValue(String value) throws IOException, JsonGenerationException { } @Override public void writeTree(JsonParser jp) throws IOException, JsonGenerationException {
@Test public void testWriteRawValue() throws IOException { ByteArrayOutputStream out = new ByteArrayOutputStream(); ObjectCodec codec = new ObjectCodec() { @Override public void writeObject(JsonParser jp) throws IOException, JsonGenerationException, JsonProcessingException { out.write(jp); } }; ObjectCodec codec2 = new ObjectCodec() { @Override public void writeObject(JsonParser jp) throws IOException, JsonGenerationException, JsonProcessingException { out.write(jp); } }; ObjectCodec codec3 = new ObjectCodec() { @Override public void writeObject(JsonParser jp) throws IOException, JsonGenerationException, JsonProcessingException { out.write(jp); } }; TestGenerator gen = new TestGenerator(1, codec
@Test public void testWriteRawValue() throws IOException { ObjectCodec codec = new ObjectCodec() { @Override public void writeTree(JsonParser jp) { } @Override public void writeFieldName(String name) { } @Override public void writeStringValue(String value) { } @Override public void writeBinary(Base64Variant b64Variant, InputStream value, int offset, int len) { } @Override public int getLength() { return 0; } }; TestGenerator gen = new TestGenerator(Feature.WRITE_NUMBERS_AS_STRINGS, codec); gen.writeString("test"); assertEquals("test", gen.getOutputContext().get(Feature.WRITE_NUMBERS_AS_STRING
@Test public void testWriteRawValue() throws IOException { MockGenerator gen = new MockGenerator(Feature.WRITE_NUMBERS_AS_STRINGS, ObjectCodec.DEFAULT_CODEC); gen.setOutputContext(new JsonWriteContext() { @Override public JsonWriteContext createRootContext() { return new JsonWriteContext(); } @Override public int features() { return 0; } @Override public JsonWriteContext createRootContext() { return new JsonWriteContext(); } @Override public void writeFieldName(String name) throws IOException, JsonGenerationException { } @Override public void writeRawValue(String value) throws IOException, JsonGenerationException { } @Override public void writeTree(JsonParser jp) throws
@Test public void testWriteRawValue() throws IOException { ObjectCodec codec = new ObjectCodec() { @Override public void writeFieldName(String name) { super.writeFieldName(name); } @Override public void writeBinary(Base64Variant b64Variant, InputStream value, int offset, int len) { super.writeBinary(b64Variant, value, offset, len); } @Override public void writeTree(JsonParser jp) throws IOException, JsonGenerationException, JsonProcessingException { super.writeTree(jp); } }; JsonGenerationContext ctx = new JsonGenerationContext(); ctx.setUseDefaultPrettyPrinter(true); ctx.setEnabled(Feature.WRITE_NUMBERS_AS_STRINGS,
@Test public void testWriteRawValue() throws IOException { MockGenerator generator = new MockGenerator(Feature.WRITE_NUMBERS_AS_STRINGS, ObjectCodec.DEFAULT_CODEC); generator.writeString("a"); generator.writeString("b"); generator.writeString("c"); assertEquals("{\\"a\\":\\"b\\",\\"b\\":\\"c\\"}", new String(_cfgValueAsString)); assertEquals("{\\"a\\":\\"b\\",\\"c\\":\\"c\\"}", new String(_cfgValueAsString)); assertEquals("{\\"a\\":\\"b\\",\\"c\\":\\"c\\"}", new String(_cfgValueAsString)); assertEquals("
@Test public void testDisabled() { assertFalse(new GeneratorBase(0, new ObjectCodec()).isEnabled(Feature.DISABLED)); }
@Test public void testDisable() throws Exception { Feature f1 = Feature.JSON_OBJECT; Feature f2 = Feature.JSON_OBJECT; assertFalse(GeneratorBase.enable(f1).disable(f2).isEnabled(f1)); assertFalse(GeneratorBase.disable(f1).disable(f2).isEnabled(f2)); assertTrue(GeneratorBase.disable(f1).disable(f2).isEnabled(f2)); assertTrue(GeneratorBase.disable(f1).disable(f2).isEnabled(f2)); assertTrue(GeneratorBase.disable(f1).disable(f2).isEnabled(f2)); assertTrue(GeneratorBase.disable(
@Test public void testGetOutputContext() { JsonWriteContext ctx = generator.getOutputContext(); assertEquals(0, ctx.getNumFields()); ctx.writeString("test"); assertEquals(1, ctx.getNumFields()); ctx.writeString("a"); assertEquals(2, ctx.getNumFields()); ctx.writeString("b"); assertEquals(3, ctx.getNumFields()); ctx.writeString("c"); assertEquals(4, ctx.getNumFields()); ctx.writeString("d"); assertEquals(5, ctx.getNumFields()); ctx.writeString("e"); assertEquals(6, ctx.getNumFields()); }
@Test public void testGetOutputContext() { JsonWriteContext ctx1 = generator.getOutputContext(); JsonWriteContext ctx2 = generator.getOutputContext(); assertSame(ctx1, ctx2); }
@Test public void testClose() throws IOException { final GeneratorBase[] lines = new GeneratorBase[2]; for (int i = 0; i < lines.length; i++) { lines[i] = new Generator() { @Override public void flush() throws IOException, JsonGenerationException { } @Override public void close() throws IOException, JsonGenerationException { } }; } for (int i = 0; i < lines.length; i++) { lines[i].close(); } assertEquals(0, lines[0].isClosed()); assertEquals(0, lines[1].isClosed()); }
@Test public void testClose() throws IOException { class TestGenerator extends GeneratorBase { private static final long serialVersionUID = 1L; @Override public void close() throws IOException { super.close(); } @Override public void flush() throws IOException, JsonGenerationException { } @Override public void close() throws IOException, JsonGenerationException { } } TestGenerator testGenerator = new TestGenerator(); assertFalse(testGenerator._closed); assertTrue(testGenerator._closed); testGenerator.close(); assertTrue(testGenerator._closed); assertTrue(testGenerator.closed); }
@Test public void testWriteStartArray() throws IOException { UTF8JsonGenerator generator = new UTF8JsonGenerator(new IOContext(), 3, ObjectCodec.DEFAULT, new ByteArrayOutputStream()); generator.writeStartArray(); generator.writeStartObject(); generator.writeStartArray(); generator.writeEndObject(); generator.writeEndArray(); String json = new String(out.toByteArray(), Charsets.UTF_8); assertEquals("[\\n" + " {\\n" + " \\"a\\": 1,\\n" + " \\"b\\": 2,\\n" + " \\"c\\": 3,\\n" + " \\"d\\": 4,\\n" +
@Test public void testWriteStartArray() throws IOException { UTF8JsonGenerator generator = new UTF8JsonGenerator(new IOContext(), 3, ObjectCodec.DEFAULT, new ByteArrayOutputStream()); generator._writeStartArray(); generator._writeStartObject(); generator._writeStartArray(); generator._writeEndObject(); generator._writeEndArray(); String json = new String(out.toByteArray(), Charsets.UTF_8); Assert.assertEquals("{\\"a\\":1,\\"b\\":2}", json); }
@Test public void testWriteStartArray() throws IOException { UTF8JsonGenerator generator = new UTF8JsonGenerator(new IOContext(), 3, ObjectCodec.DEFAULT, new ByteArrayOutputStream()); generator._writeStartArray(); generator._writeStartObject(); generator._writeStartArray(); generator._writeEndObject(); generator.writeEndArray(); String json = new String(out.toByteArray(), Charsets.UTF_8); Assert.assertEquals("[\\"a\\",\\"b\\",\\"c\\"]", json); }
@Test public void testWriteStartArray() throws IOException { UTF8JsonGenerator generator = new UTF8JsonGenerator(new IOContext(), 3, ObjectCodec.DEFAULT, new ByteArrayOutputStream()); generator._writeStartArray(); generator._writeStartObject(); generator._writeStartArray(); generator._writeEndObject(); generator._writeEndArray(); String json = new String(out.toByteArray(), Charsets.UTF_8); Assert.assertEquals("[\\n" + " {\\n" + " \\"a\\": 1,\\n" + " \\"b\\": 2,\\n" + " \\"c\\": 3,\\n" + " \\"d\\": 4,\\n
@Test public void testWriteStartArray() throws IOException { UTF8JsonGenerator generator = new UTF8JsonGenerator(new IOContext(), 3, ObjectCodec.DEFAULT, new ByteArrayOutputStream()); generator.writeStartArray(); generator.writeEndArray(); generator.writeEndObject(); generator.writeEndArray(); generator.writeEndObject(); }
@Test public void testWriteStartArray() throws IOException { UTF8JsonGenerator generator = new UTF8JsonGenerator(new IOContext(), 3, ObjectCodec.DEFAULT, new ByteArrayOutputStream()); generator._writeStartArray(); generator._writeStartObject(); generator._writeStartArray(); generator._writeEndObject(); generator._writeEndArray(); String json = new String(out.toByteArray(), Charsets.UTF_8); Assert.assertEquals("[\\"a\\",\\"b\\",\\"c\\"]", json); }
@Test public void testWriteEndArray() throws IOException, JsonGenerationException { final ObjectMapper mapper = new ObjectMapper(); final IIOContext ctxt = mock(IIOContext.class); when(ctxt.getTypeDesc()).thenReturn((Class) String.class); when(ctxt.inArray()).thenReturn(true); final ByteArrayOutputStream out = new ByteArrayOutputStream(); final UTF8JsonGenerator generator = new UTF8JsonGenerator(ctxt, 0, ObjectCodec.DEFAULT, out, new byte[0], 0, true); generator.writeStartArray(); generator.writeEndArray(); generator.writeEndObject(); generator.writeEndArray(); generator.writeEndObject(); generator.writeEndArray(); generator.writeEnd
@Test public void testWriteEndArray() throws Exception { IOContext ctxt = mock(IOContext.class); when(ctxt.getTypeDesc()).thenReturn(String.class); when(ctxt.inArray()).thenReturn(true); ByteArrayOutputStream out = new ByteArrayOutputStream(); UTF8JsonGenerator generator = new UTF8JsonGenerator(ctxt, 0, ObjectCodec.DEFAULT, out, new byte[0], 0, true); generator.writeStartArray(); generator.writeEndArray(); generator.writeEndObject(); generator.writeEndArray(); generator.writeEndObject(); generator.writeEndArray(); generator.writeEndObject(); generator.writeEndArray(); generator.writeEndObject(); generator.writeEnd
@Test public void testWriteEndArray() throws Exception { IOContext ctxt = mock(IOContext.class); when(ctxt.inArray()).thenReturn(true); when(ctxt.getTypeDesc()).thenReturn(String.class); ByteArrayOutputStream out = new ByteArrayOutputStream(); UTF8JsonGenerator generator = new UTF8JsonGenerator(ctxt, 0, ObjectCodec.DEFAULT, out, new byte[0], 0, 0); generator.writeStartArray(); generator.writeEndArray(); generator.writeEndObject(); generator.writeEndArray(); generator.writeEndObject(); generator.writeEndArray(); generator.writeEndObject(); generator.writeEndArray(); generator.writeEndObject(); generator.writeEnd
@Test public void testWriteEndArray() throws IOException, JsonGenerationException { IOContext ctxt = new IOContextImpl(); ObjectCodec codec = ObjectCodec.DEFAULT; ByteArrayOutputStream out = new ByteArrayOutputStream(); UTF8JsonGenerator generator = new UTF8JsonGenerator(ctxt, 0, codec, out, new byte[0], 0, true); generator.writeStartObject(); generator.writeEndArray(); generator.writeEndObject(); generator.writeEndArray(); generator.writeEndObject(); generator.flush(); String str = new String(out.toByteArray(), Charsets.UTF_8); Assert.assertEquals("{\\"a\\":1,\\"b\\":2}", str); }
@Test public void testWriteEndArray() throws IOException, JsonGenerationException { final ObjectMapper mapper = new ObjectMapper(); final IIOContext ctxt = mock(IIOContext.class); when(ctxt.getTypeDesc()).thenReturn((Class) String.class); when(ctxt.inArray()).thenReturn(true); final ByteArrayOutputStream out = new ByteArrayOutputStream(); final UTF8JsonGenerator generator = new UTF8JsonGenerator(ctxt, 0, ObjectCodec.DEFAULT_JSON_CODEC, out, new byte[0], 0, true); generator.writeStartArray(); generator.writeEndArray(); generator.writeEndObject(); generator.writeEndArray(); generator.writeEndObject(); generator.writeEndArray
@Test public void testWriteEndArray() throws IOException, JsonGenerationException { final IOContext ctxt = new IOContextImpl(); final ByteArrayOutputStream out = new ByteArrayOutputStream(); final UTF8JsonGenerator generator = new UTF8JsonGenerator(ctxt, 0, ObjectCodec.DEFAULT_ENCODING, out); generator.writeStartArray(); generator.writeEndObject(); generator.writeEndArray(); generator.writeEndObject(); generator.writeEndArray(); generator.writeEndObject(); generator.flush(); String str = new String(out.toByteArray(), Charsets.UTF_8); Assert.assertEquals("[\\n" + " {\\n" + " \\"a\\": 1,\\n" + " \\"
@Test public void testWriteString() throws Exception { final ByteArrayOutputStream out = new ByteArrayOutputStream(); final UTF8JsonGenerator generator = new UTF8JsonGenerator(new IOContext(), 3, ObjectCodec.getDefaultCodec(), out); generator.writeString(TEST_STRING); generator.writeString(TEST_STRING); generator.writeString(TEST_STRING); generator.writeString(TEST_STRING); generator.writeString(TEST_STRING); generator.writeString(TEST_STRING); generator.writeString(TEST_STRING); generator.writeString(TEST_STRING); generator.writeString(TEST_STRING); generator.writeString(TEST_STRING); generator.writeString(TEST_STRING); generator.write
@Test public void testWriteString() throws Exception { final ByteArrayOutputStream out = new ByteArrayOutputStream(); UTF8JsonGenerator generator = new UTF8JsonGenerator(null, 0, ObjectCodec.DEFAULT_ENCODING, out); generator.writeString(TEST_STRING); generator.writeString(TEST_STRING); generator.writeString(TEST_STRING); generator.writeString(TEST_STRING); generator.writeString(TEST_STRING); generator.writeString(TEST_STRING); generator.writeString(TEST_STRING); generator.writeString(TEST_STRING); generator.writeString(TEST_STRING); generator.writeString(TEST_STRING); generator.writeString(TEST_STRING); generator.writeString(TEST
@Test public void testLongString() throws IOException { String testStr = "123456789"; _writeLongString(testStr); assertEquals("{\\"a\\":123456789,\\"b\\":123456789,\\"c\\":123456789}", _testStr); _writeLongString(testStr, 0, 3); assertEquals("{\\"a\\":123456789,\\"b\\":123456789,\\"c\\":123456789}", _testStr); _writeLongString(testStr, 2, 3); assertEquals("{\\"a\\":123456789,\\"b\\":123456789,\\"c\\":123456789}", _testStr); _writeLongString(testStr
@Test public void testLongString() throws IOException { String test = "123456789"; _testWriter.writeLongString(test); _testWriter.writeLongString(test); testWriter.writeLongString(test); testWriter.writeLongString(test); testWriter.writeLongString(test); testWriter.writeLongString(test); testWriter.writeLongString(test); testWriter.writeLongString(test); testWriter.writeLongString(test); testWriter.writeLongString(test); testWriter.writeLongString(test); testWriter.writeLongString(test); testWriter.writeLongString(test); testWriter.writeLongString(test); testWriter
@Test public void testLongString() throws IOException, JsonGenerationException { ObjectCodec codec = new ObjectCodec(); JSONWriter writer = new JSONWriter(codec); for (int i = 0; i < 10; i++) { writer.writeObject(String.valueOf(i)); } String str = new String(writer.getOutputTarget()); _testWriteLongString(str, 0, str.length()); _testWriteLongString(str, 1, str.length()); _testWriteLongString(str, 2, str.length()); _testWriteLongString(str, 3, str.length()); _testWriteLongString(str, 4, str.length()); _testWriteLongString(
@Test public void testStringList() throws IOException { List<String> testStrings = Arrays.asList("a", "b", "c", "d", "e", "f", "g", "h", "i", "j"); for (String testString : testStrings) { _testWriteString(testString); } _testWriteString(Arrays.asList("a", "b", "c", "d", "e", "f", "g", "h", "i", "j")); _testWriteString(Arrays.asList("a", "b", "c", "d", "e", "f", "g", "h", "i", "
@Test public void testLongString() throws IOException { String test = "123456789"; _testWriter.writeLongString(test); _testWriter.writeLongString(test); testWriter.writeLongString(test); testWriter.writeLongString(test); testWriter.writeLongString(test); testWriter.writeLongString(test); testWriter.writeLongString(test); testWriter.writeLongString(test); testWriter.writeLongString(test); testWriter.writeLongString(test); testWriter.writeLongString(test); testWriter.writeLongString(test); testWriter.writeLongString(test); testWriter.writeLongString(test); testWriter
@Test public void testLongString() throws IOException, JsonGenerationException { ObjectCodec codec = new ObjectCodec(); JSONWriter writer = new JSONWriter(codec); for (int i = 0; i < 10; i++) { writer.writeObject(String.valueOf(i)); } String str = new String(writer.getOutputTarget()); _testWriteLongString(str, 0, str.length()); _testWriteLongString(str, 1, str.length()); _testWriteLongString(str, 2, str.length()); _testWriteLongString(str, 3, str.length()); _testWriteLongString(str, 4, str.length()); _testWriteLongString(
@Test public void testWriteRawUTF8String() throws IOException { ObjectCodec codec = ObjectCodecFactory.getObjectCodec(true); URL url = getClass().getResource("test.json"); String text = new String(Files.readAllBytes(Paths.get(url.toURI())), Charset.forName("UTF-8")); byte[] bytes = text.getBytes("UTF-8"); UTF8JsonGenerator generator = new UTF8JsonGenerator(new IOContext(), features, codec, new ByteArrayOutputStream()); generator.writeRawUTF8String(bytes, 0, bytes.length); generator.writeString(text.getBytes("UTF-8")); generator.writeRawUTF8String(bytes
@Test public void testWriteRawUTF8String() throws IOException, JsonGenerationException { ObjectCodec codec = new ObjectCodec() { @Override public ObjectCodec codec() { return new ObjectCodec() { @Override public void codec() { super.codec(); } @Override public void codec() { super.codec(); } @Override public void writeBytes(byte[] bytes, int offset, int length) throws IOException, JsonGenerationException { bytes[0] = 0; } @Override public void writeLongString(String text) throws IOException, JsonGenerationException { bytes[1] = text; } @Override public void writeObject(Object obj) throws IOException, JsonGenerationException { bytes[2] = obj; }
@Test public void testWriteRawUTF8String() throws IOException { TestUTF8JsonGenerator generator = new TestUTF8JsonGenerator(ctxt, 0, ObjectCodec.DEFAULT_ENCODING, new ByteArrayOutputStream()); generator._outputTail = 0; generator._writeString(TEST_STRING); generator._writeString(TEST_STRING_2); generator._writeString(TEST_STRING_3); generator._writeString(TEST_STRING_4); generator._writeString(TEST_STRING_5); generator._writeString(TEST_STRING_6); generator._writeString(TEST_STRING_7); generator._writeString(TEST_STRING_8); generator._writeString(TEST_STRING_9); generator._
@Test public void testWriteRawUTF8String() throws Exception { TestUTF8JsonGenerator generator = new TestUTF8JsonGenerator(ctxt, 0, ObjectCodec.DEFAULT_ENCODING, new ByteArrayOutputStream()); generator._writeString(TEST_STRING); generator._writeString(TEST_STRING_2); generator._writeString(TEST_STRING_3); generator._writeString(TEST_STRING_4); generator._writeString(TEST_STRING_5); generator._writeString(TEST_STRING_6); generator._writeString(TEST_STRING_7); generator._writeString(TEST_STRING_8); generator._writeString(TEST_STRING_9); generator._writeString(TEST_STRING_
@Test public void testWriteStringArray() throws IOException { String[] text = {"a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "o", "n", "o", "n", "o", "n", "o", "n", "o", "n", "o", "n", "o", "n", "o", "n", "o", "n", "o", "n", "o", "n", "o", "n", "o", "n", "o", "n", "o",
@Test public void testWriteRawUTF8String() throws IOException { TestUTF8JsonGenerator generator = new TestUTF8JsonGenerator(ctxt, 0, ObjectCodec.DEFAULT_ENCODING, new ByteArrayOutputStream()); generator._outputTail = 0; generator._writeString(TEST_STRING); generator._writeString(TEST_STRING_2); generator._writeString(TEST_STRING_3); generator._writeString(TEST_STRING_4); generator._writeString(TEST_STRING_5); generator._writeString(TEST_STRING_6); generator._writeString(TEST_STRING_7); generator._writeString(TEST_STRING_8); generator._writeString(TEST_STRING_9); generator._
@Test public void testWriteRawUTF8String() throws Exception { TestUTF8JsonGenerator generator = new TestUTF8JsonGenerator(ctxt, 0, ObjectCodec.DEFAULT_ENCODING, new ByteArrayOutputStream()); generator._writeString(TEST_STRING); generator._writeString(TEST_STRING_2); generator._writeString(TEST_STRING_3); generator._writeString(TEST_STRING_4); generator._writeString(TEST_STRING_5); generator._writeString(TEST_STRING_6); generator._writeString(TEST_STRING_7); generator._writeString(TEST_STRING_8); generator._writeString(TEST_STRING_9); generator._writeString(TEST_STRING_
@Test public void test_verifyValueWrite() throws IOException, JsonGenerationException { IOContext ctxt = new IOContext(); ObjectCodec codec = new ObjectCodec(); ByteArrayOutputStream out = new ByteArrayOutputStream(); UTF8JsonGenerator generator = new UTF8JsonGenerator(ctxt, 0, codec, out, null, 0, false); generator.writeFieldName("test"); generator.writeFieldName("test2"); generator.writeFieldName("test3"); generator.writeFieldName("test4"); generator.writeFieldName("test5"); generator.writeFieldName("test6"); generator.writeFieldName("test7"); generator.writeFieldName("test8"); generator.writeFieldName("test9"); generator.writeFieldName("test10"); generator.writeFieldName
@Test public void test_verifyValueWrite() throws IOException { IOContext ctxt = new IOContext(); ObjectCodec codec = new ObjectCodec(); ByteArrayOutputStream out = new ByteArrayOutputStream(); UTF8JsonGenerator generator = new UTF8JsonGenerator(ctxt, 3, codec, out); generator.writeFieldName("test"); generator.writeFieldName("test2"); generator.writeFieldName("test3"); generator.writeFieldName("test4"); generator.writeFieldName("test5"); generator.writeFieldName("test6"); generator.writeFieldName("test7"); generator.writeFieldName("test8"); generator.writeFieldName("test9"); generator.writeFieldName("test10"); generator.writeFieldName("test11"); generator.writeFieldName("test
@Test public void test_verifyValueWrite() throws IOException { IOContext ctxt = new IOContext(); ObjectCodec codec = new ObjectCodec(); ByteArrayOutputStream out = new ByteArrayOutputStream(); UTF8JsonGenerator generator = new UTF8JsonGenerator(ctxt, 3, codec, out); generator.writeFieldName("test"); generator.writeFieldName("test2"); generator.writeFieldName("test3"); generator.writeFieldName("test4"); generator.writeFieldName("test5"); generator.writeFieldName("test6"); generator.writeFieldName("test7"); generator.writeFieldName("test8"); generator.writeFieldName("test9"); generator.writeFieldName("test10"); generator.writeFieldName("test11"); generator.writeFieldName("test
@Test public void testWriteOfArray() throws IOException { IOContext ctxt = new IOContext() { @Override public boolean isInArray() { return true; } @Override public boolean isInObject() { return true; } @Override public boolean isInObject2() { return true; } @Override public boolean isInObject3() { return true; } @Override public boolean isInObject4() { return true; } @Override public boolean isInObject5() { return true; } @Override public boolean isInObject6() { return true; } @Override public boolean isInObject4() { return true; } @Override public boolean isInObject5() { return true; } @Override public boolean isInObject6() { return true;
@Test public void testWriteBytes() throws IOException { for (int i = 0; i < MAX_BYTES_TO_BUFFER; i++) { byte[] bytes = new byte[MAX_BYTES_TO_BUFFER]; for (int j = 0; j < MAX_BYTES_TO_BUFFER; j++) { bytes[j] = (byte) i; } _testWriteBytes(bytes, 0, MAX_BYTES_TO_BUFFER); _testWriteBytes(bytes, 0, MAX_BYTES_TO_BUFFER + 1); _testWriteBytes(bytes, 0, MAX_BYTES_TO_BUFFER + 2); _testWriteBytes(bytes, 0, MAX_BYTES_TO_BUFFER
@Test public void testWriteStringArray() throws IOException { String[] expected = new String[]{"a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "o", "n", "o", "n", "o", "n", "o", "n", "o", "n", "o", "n", "o", "n", "o", "n", "o", "n", "o", "n", "o", "n", "o", "n", "o", "n", "o", "n
@Test public void testWriteStringArray() throws IOException { String[] names = {"a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l"}; for (String name : names) { _testWriteStringArray(name); } _testWriteStringArray(Arrays.asList("a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l")); _testWriteStringArray(Arrays.asList("a", "b", "c", "d", "e", "f", "g",
@Test public void testWriteStringArray() throws IOException { String[] expected = new String[]{"a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "l", "o", "o", "o", "o", "o", "o", "o", "o", "o", "o", "o", "o", "o", "o", "o", "o", "o", "o", "o", "o", "o", "o", "o", "o", "o", "o", "o", "o", "o", "o
@Test public void testWriteStringArray() throws IOException { String[] expected = new String[]{"a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "o", "n", "o", "n", "o", "n", "o", "n", "o", "n", "o", "n", "o", "n", "o", "n", "o", "n", "o", "n", "o", "n", "o", "n", "o", "n", "o", "n
@Test public void testWriteBytes() throws IOException { ObjectCodec codec = new ObjectCodec() { @Override public ObjectCodec codec() { return new ObjectCodec() { @Override public void codec() { super.codec(); } @Override public void codec() { super.codec(); } @Override public void codec() { super.codec(); } @Override public void writeFieldName(String name) { super.writeFieldName(name); } @Override public void writeLongString(String text) { super.writeLongString(text); } @Override public void writeRawUTF8String(String text, int offset, int length) { super.writeRawUTF8String(text, offset, length); } @Override public
@Test public void testWriteArrayOfStrings() throws IOException { String[] expected = new String[]{"a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "l", "o", "o", "o", "o", "o", "o", "o", "o", "o", "o", "o", "o", "o", "o", "o", "o", "o", "o", "o", "o", "o", "o", "o", "o", "o", "o", "o", "o", "o", "
@Test public void testWriteStringArray() throws IOException { String[] expected = new String[]{"a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "l", "o", "o", "o", "o", "o", "o", "o", "o", "o", "o", "o", "o", "o", "o", "o", "o", "o", "o", "o", "o", "o", "o", "o", "o", "o", "o", "o", "o", "o", "o
@Test public void testStringSegments() throws IOException { ObjectCodec codec = new ObjectCodec(); JSONWriter writer = new JSONWriter(codec); String[] segments = new String[]{"a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l"}; for (String segment : segments) { writer.writeObject(segment); } writer.close(); ObjectCodec codec2 = new JSONCodec(codec); String[] segments2 = new String[]{"a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "
@Test public void testStringSegments() throws IOException, JsonGenerationException { String[] segments = {"a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "o", "o", "o", "o", "o", "o", "o", "o", "o", "o", "o", "o", "o", "o", "o", "o", "o", "o", "o", "o", "o", "o", "o", "o", "o", "o", "o", "o",
@Test public void testInRoot() { JsonStreamContext context = JsonStreamContext.createContext(); context.setType(JsonStreamContext.TYPE_ROOT); assertFalse(context.inRoot()); context.setType(JsonStreamContext.TYPE_ARRAY); assertTrue(context.inRoot()); context.setType(JsonStreamContext.TYPE_OBJECT); assertTrue(context.inRoot()); context.setType(JsonStreamContext.TYPE_ARRAY); assertTrue(context.inRoot()); context.setType(JsonStreamContext.TYPE_OBJECT); assertTrue(context.inRoot()); context.setType(JsonStreamContext.TYPE_ROOT); assertTrue(context.inRoot()); context
@Test public void testGetCurrentIndex() { JsonStreamContext context = JsonStreamContext.createContext(); assertEquals(0, context.getCurrentIndex()); context.setCurrentIndex(1); assertEquals(1, context.getCurrentIndex()); context.setCurrentIndex(2); assertEquals(2, context.getCurrentIndex()); context.setCurrentIndex(3); assertEquals(3, context.getCurrentIndex()); context.setCurrentIndex(4); assertEquals(4, context.getCurrentIndex()); context.setCurrentIndex(5); assertEquals(5, context.getCurrentIndex()); context.setCurrentIndex(6); assertEquals(6, context.getCurrentIndex()); context
@Test public void testGetCurrentIndex() { JsonStreamContext ctx = JsonStreamContext.getInstance(); assertEquals(0, ctx.getCurrentIndex()); ctx.setIndex(1); assertEquals(1, ctx.getCurrentIndex()); ctx.setIndex(2); assertEquals(2, ctx.getCurrentIndex()); ctx.setIndex(3); assertEquals(3, ctx.getCurrentIndex()); }
@Test public void testNoMatch() throws IOException { Assert.assertFalse(hasJSONFormat(new MockInputAccessor("\\n"))); Assert.assertFalse(hasJSONFormat(new MockInputAccessor("\\n"))); Assert.assertFalse(hasJSONFormat(new MockInputAccessor("\\n"))); Assert.assertFalse(hasJSONFormat(new MockInputAccessor("\\n"))); Assert.assertFalse(hasJSONFormat(new MockInputAccessor("\\n"))); Assert.assertFalse(hasJSONFormat(new MockInputAccessor("\\n"))); Assert.assertFalse(hasJSONFormat(new MockInputAccessor("\\n"))); Assert.assertFalse
@Test public void testJsonFormat() throws IOException { MockInputAccessor acc = new MockInputAccessor(); acc.setByteOrder(ByteOrder.LITTLE_ENDIAN); MatchStrength result = MatchStrength.hasJSONFormat(acc); assertEquals(MatchStrength.INCONCLUSIVE, result); acc.setByteOrder(ByteOrder.LITTLE_ENDIAN); result = MatchStrength.hasJSONFormat(acc); assertEquals(MatchStrength.INCONCLUSIVE, result); acc.setByteOrder(ByteOrder.LITTLE_ENDIAN); result = MatchStrength.hasJSONFormat(acc); assertEquals(MatchStrength.INCONCLUSIVE, result); acc.setByteOrder(ByteOrder
@Test public void testNoMatch() throws IOException { MockInputAccessor acc = new MockInputAccessor(); acc.setByteOrder(ByteOrder.BIG_ENDIAN); MatchStrength result = MatchStrength.hasJSONFormat(acc); assertEquals("No match", MatchStrength.NO_MATCH, result); acc.setByteOrder(ByteOrder.LITTLE_ENDIAN); result = MatchStrength.hasJSONFormat(acc); assertEquals("No match", MatchStrength.NO_MATCH, result); acc.setByteOrder(ByteOrder.BIG_ENDIAN); result = MatchStrength.hasJSONFormat(acc); assertEquals("No match", MatchStrength.NO_MATCH, result); acc.setByteOrder(
@Test public void testJsonFormat() throws IOException { Assert.assertEquals(MatchStrength.INCONCLUSIVE, MatchGood.hasJSONFormat(new MockInputAccessor("\\n"))); Assert.assertEquals(MatchStrength.INCONCLUSIVE, MatchGood.hasJSONFormat(new MockInputAccessor("\\n"))); Assert.assertEquals(MatchStrength.INCONCLUSIVE, MatchGood.hasJSONFormat(new MockInputAccessor("\\n"))); Assert.assertEquals(MatchStrength.INCONCLUSIVE, MatchGood.hasJSONFormat(new MockInputAccessor("\\n"))); Assert.assertEquals(MatchStrength.INCONCLUSIVE, MatchGood.has
@Test public void testJSONFormat() throws IOException { Assert.assertTrue(MatchStrength.hasJSONFormat(new MockInputAccessor("\\n")) instanceof MatchStrength); Assert.assertTrue(MatchStrength.hasJSONFormat(new MockInputAccessor("\\n")) instanceof MatchStrength); Assert.assertTrue(MatchStrength.hasJSONFormat(new MockInputAccessor("\\n")) instanceof MatchStrength); Assert.assertTrue(MatchStrength.hasJSONFormat(new MockInputAccessor("\\n")) instanceof MatchStrength); Assert.assertTrue(MatchStrength.hasJSONFormat(new MockInputAccessor("\\n")) instanceof MatchStrength); Assert.assertTrue(MatchStrength.hasJSONFormat(
@Test public void testJsonFormat() throws IOException { MockInputAccessor acc = new MockInputAccessor(); acc.setByteOrder(ByteOrder.BIG_ENDIAN); MatchStrength result = MatchStrength.hasJSONFormat(acc); assertEquals(MatchStrength.INCONCLUSIVE, result); acc.setByteOrder(ByteOrder.LITTLE_ENDIAN); result = MatchStrength.hasJSONFormat(acc); assertEquals(MatchStrength.INCONCLUSIVE, result); acc.setByteOrder(ByteOrder.LITTLE_ENDIAN); result = MatchStrength.hasJSONFormat(acc); assertEquals(MatchStrength.INCONCLUSIVE, result); acc.setByteOrder(ByteOrder.BIG
@Test public void testJSONFormat() throws IOException { MockInputAccessor acc = new MockInputAccessor("{\\"a\\":1}"); assertEquals(MatchStrength.INCONCLUSIVE, MatchUtils.hasJSONFormat(acc));acc.setByteOrder(ByteOrder.BIG_ENDIAN); assertEquals(MatchStrength.INCONCLUSIVE, MatchUtils.hasJSONFormat(acc));acc.setByteOrder(ByteOrder.LITTLE_ENDIAN); assertEquals(MatchStrength.INCONCLUSIVE, MatchUtils.hasJSONFormat(acc));acc.setByteOrder(ByteOrder.BIG_ENDIAN); assertEquals(MatchStrength.INCONCLUSIVE, MatchUtils.hasJSONFormat(
@Test public void testJSONFormat() throws IOException { Assert.assertTrue(MatchStrength.hasJSONFormat(new MockInputAccessor("\\n")) instanceof MatchStrength); Assert.assertTrue(MatchStrength.hasJSONFormat(new MockInputAccessor("\\n")) instanceof MatchStrength); Assert.assertTrue(MatchStrength.hasJSONFormat(new MockInputAccessor("\\n")) instanceof MatchStrength); Assert.assertTrue(MatchStrength.hasJSONFormat(new MockInputAccessor("\\n")) instanceof MatchStrength); Assert.assertTrue(MatchStrength.hasJSONFormat(new MockInputAccessor("\\n")) instanceof MatchStrength); Assert.assertTrue(MatchStrength.hasJSONFormat(
@Test public void testJsonFormat() throws IOException { MockInputAccessor acc = new MockInputAccessor(); acc.setByteOrder(ByteOrder.LITTLE_ENDIAN); MatchStrength result = MatchStrength.hasJSONFormat(acc); assertEquals(MatchStrength.INCONCLUSIVE, result); acc.setByteOrder(ByteOrder.LITTLE_ENDIAN); result = MatchStrength.hasJSONFormat(acc); assertEquals(MatchStrength.INCONCLUSIVE, result); acc.setByteOrder(ByteOrder.LITTLE_ENDIAN); result = MatchStrength.hasJSONFormat(acc); assertEquals(MatchStrength.INCONCLUSIVE, result); acc.setByteOrder(ByteOrder
@Test public void testJsonFormat() throws IOException { Assert.assertTrue(MatchStrength.hasJSONFormat(new MockInputAccessor("\\n")) instanceof MatchStrength); Assert.assertTrue(MatchStrength.hasJSONFormat(new MockInputAccessor("\\n")) instanceof MatchStrength); Assert.assertTrue(MatchStrength.hasJSONFormat(new MockInputAccessor("\\n")) instanceof MatchStrength); Assert.assertTrue(MatchStrength.hasJSONFormat(new MockInputAccessor("\\n")) instanceof MatchStrength); Assert.assertTrue(MatchStrength.hasJSONFormat(new MockInputAccessor("\\n")) instanceof MatchStrength); Assert.assertTrue(MatchStrength.hasJSONFormat(
@Test public void testJsonFormat() throws IOException { MockInputAccessor acc = new MockInputAccessor(); acc.setByteOrder(ByteOrder.BIG_ENDIAN); MatchStrength result = MatchStrength.hasJSONFormat(acc); assertEquals(MatchStrength.INCONCLUSIVE, result); acc.setByteOrder(ByteOrder.LITTLE_ENDIAN); result = MatchStrength.hasJSONFormat(acc); assertEquals(MatchStrength.INCONCLUSIVE, result); acc.setByteOrder(ByteOrder.LITTLE_ENDIAN); result = MatchStrength.hasJSONFormat(acc); assertEquals(MatchStrength.INCONCLUSIVE, result); acc.setByteOrder(ByteOrder.BIG
@Test public void testJsonFormat() throws IOException { MockInputAccessor acc = new MockInputAccessor(); acc.setByteOrder(ByteOrder.LITTLE_ENDIAN); MatchStrength result = MatchStrength.hasJSONFormat(acc); assertEquals(MatchStrength.INCONCLUSIVE, result); acc.setByteOrder(ByteOrder.LITTLE_ENDIAN); result = MatchStrength.hasJSONFormat(acc); assertEquals(MatchStrength.INCONCLUSIVE, result); acc.setByteOrder(ByteOrder.LITTLE_ENDIAN); result = MatchStrength.hasJSONFormat(acc); assertEquals(MatchStrength.INCONCLUSIVE, result); acc.setByteOrder(ByteOrder
@Test public void testNoMatch() throws IOException { MockInputAccessor acc = new MockInputAccessor(); acc.setByteOrder(ByteOrder.BIG_ENDIAN); MatchStrength result = MatchStrength.hasJSONFormat(acc); assertEquals(MatchStrength.NO_MATCH, result); acc.setByteOrder(ByteOrder.BIG_ENDIAN); result = MatchStrength.hasJSONFormat(acc); assertEquals(MatchStrength.NO_MATCH, result); acc.setByteOrder(ByteOrder.BIG_ENDIAN); result = MatchStrength.hasJSONFormat(acc); assertEquals(MatchStrength.NO_MATCH, result); acc.setByteOrder(ByteOrder.BIG_ENDIAN); result = MatchStrength
@Test public void testSkipSpace() throws IOException { String s = "{\\n" + " \\"type\\" : \\"string\\",\\n" + " \\"name\\" : \\"test\\",\\n" + " \\"fields\\" : [\\n" + " {\\n" + " \\"name\\" : \\"string\\",\\n" + " \\"type\\" : \\"string\\"\\n" + " },\\n" + " {\\n" + " \\"name\\" : \\"string\\",\\n" + " \\"type\\" : \\"string\\"\\n" + " },\\n" + " {\\n" +
@Test public void testSkipSpace() throws IOException { ObjectMapper mapper = new ObjectMapper(); String json = "{\\"a\\":1, \\"b\\":2, \\"c\\":3, \\"d\\":4, \\"e\\":5, \\"f\\":6}"; String expected = "{\\"a\\":1, \\"b\\":2, \\"c\\":3, \\"d\\":4, \\"e\\":5, \\"f\\":6}"; ObjectMapper mapper = new ObjectMapper(); InputAccessor acc = mapper.readValue(json, InputAccessor.class); MatchStrength matchStrength = MatchStrength.hasJSONFormat(acc); Assert.assert
@Test public void testSkipSpace() throws IOException { String s = "{\\"a\\":1, \\"b\\":2, \\"c\\":3, \\"d\\":4, \\"e\\":5, \\"f\\":6}"; ObjectMapper mapper = new ObjectMapper(); InputAccessor acc = mapper.readValue(s, InputAccessor.class); MatchStrength matchStrength = MatchStrength.hasJSONFormat(acc); Assert.assertEquals(4, matchStrength.getLength()); Assert.assertEquals(1, matchStrength.getLength()); Assert.assertEquals(1, matchStrength.getLength()); Assert.assertEquals(1, matchStrength.getLength()); Assert.assert
@Test public void testSkipSpace() throws IOException { ObjectMapper mapper = new ObjectMapper(); mapper.setSerializationInclusion(JsonInclude.Include.NON_NULL); String s = "{\\n" + " \\"a\\": {\\n" + " \\"b\\": {\\n" + " \\"c\\": {\\n" + " \\"d\\": \\"e\\"\\n" + " }\\n" + " }\\n" + " }\\n" + "}"; String expected = "{\\n" + " \\"a\\": {\\n" + " \\"b\\": {\\n" + " \\"c\\": {\\n"
@Test public void testSkipSpace() throws IOException { String s = "{\\"a\\":1, \\"b\\":2, \\"c\\":3, \\"d\\":4, \\"e\\":5, \\"f\\":6}"; String expected = "{\\"a\\":1, \\"b\\":2, \\"c\\":3, \\"d\\":4, \\"e\\":5, \\"f\\":6}"; ObjectMapper mapper = new ObjectMapper(); InputAccessor acc = mapper.readValue(s, InputAccessor.class); MatchStrength matchStrength = MatchStrength.hasJSONFormat(acc); Assert.assertEquals(matchStrength.get
@Test public void testSkipSpace() throws IOException { String s = "{\\n" + " \\"a\\": 1,\\n" + " \\"b\\": 2,\\n" + " \\"c\\": 3,\\n" + " \\"d\\": 4,\\n" + " \\"e\\": 5,\\n" + " \\"f\\": 6,\\n" + " \\"g\\": 7,\\n" + " \\"h\\": 8,\\n" + " \\"i\\": 9,\\n" + " \\"j\\": 14,\\n" + " \\"k\\": 15,\\
@Test public void testSkipSpace() throws IOException { String s = "{\\n" + " \\"a\\": {\\n" + " \\"b\\": {\\n" + " \\"c\\": {\\n" + " \\"d\\": [\\n" + " \\"e\\",\\n" + " \\"f\\",\\n" + " \\"g\\",\\n" + " \\"h\\",\\n" + " \\"i\\",\\n" + " \\"j\\",\\n" + " \\"k\\",\\n" + " \\"l\\",\\n" + " \\"m\\
@Test public void testSkipSpace() throws IOException, JsonParseException { String s = "{\\"a\\":1, \\"b\\":2, \\"c\\":3, \\"d\\":4, \\"e\\":5, \\"f\\":6}"; String expected = "{\\"a\\":1, \\"b\\":2, \\"c\\":3, \\"d\\":4, \\"e\\":5, \\"f\\":6}"; ObjectMapper mapper = new ObjectMapper(); InputAccessor acc = mapper.readValue(s, InputAccessor.class); MatchStrength matchStrength = MatchStrength.hasJSONFormat(acc); Assert.assertEquals(expected
@Test public void testSkipSpace() throws IOException { String s = "{\\n" + " \\"a\\": {\\n" + " \\"b\\": {\\n" + " \\"c\\": {\\n" + " \\"d\\": {\\n" + " \\"e\\": {\\n" + " \\"f\\": \\"g\\"\\n" + " }\\n" + " }\\n" + " }\\n" + " }\\n" + " }\\n" + "}"; ObjectMapper mapper = new ObjectMapper(); InputAccessor acc = mapper.readValue(s, InputAccessor.class); MatchStrength matchStrength = Match
@Test public void testSkipSpace() throws IOException { String s = "{\\n" + " \\"a\\": {\\n" + " \\"b\\": {\\n" + " \\"c\\": {\\n" + " \\"d\\": [\\n" + " \\"e\\",\\n" + " \\"f\\",\\n" + " \\"g\\",\\n" + " \\"h\\",\\n" + " \\"i\\",\\n" + " \\"j\\",\\n" + " \\"k\\",\\n" + " \\"l\\",\\n" + " \\"m\\
@Test public void testSkipSpace() throws IOException { String s = "{\\n" + " \\"a\\": 1,\\n" + " \\"b\\": 2,\\n" + " \\"c\\": 3,\\n" + " \\"d\\": 4,\\n" + " \\"e\\": 5,\\n" + " \\"f\\": 6,\\n" + " \\"g\\": 7,\\n" + " \\"h\\": 8,\\n" + " \\"i\\": 9,\\n" + " \\"j\\": 14,\\n" + " \\"k\\": 15,\\
@Test public void testGetMask() { assertEquals(0, f.getMask()); }
@Test public void testJsonGeneration() throws IOException { JsonGenerator gen = new JsonGenerator() { @Override public void writeFieldName(String name) throws IOException, JsonGenerationException { super.writeFieldName(name); } @Override public void writeFieldName(String name) throws IOException, JsonGenerationException { super.writeFieldName(name); } @Override public void writeObject(Object obj) throws IOException, JsonGenerationException { super.writeObject(obj); } }; try { gen.writeFieldName(null); fail(); } catch (NullPointerException e) { } }
@Test public void base64Variant() { Base64Variant variant = new Base64Variant("name", "http: Assert.assertEquals("name", variant.getName()); Assert.assertEquals("http: variant = new Base64Variant("name", "http: Assert.assertEquals("name", variant.getName()); Assert.assertEquals("http: variant = new Base64Variant("name", "http: Assert.assertEquals("name", variant.getName()); Assert.assertEquals("http: variant = new Base64Variant("name", "http: Assert.assertEquals("name", variant.getName()); Assert.assertEquals("http: variant = new Base64Variant("name", "http: Assert.assertEquals
@Test public void testBase64Variant() { Base64Variant variant = new Base64Variant("test", "test1", true, \' \', 3); variant.setName("test"); variant.setUsesPadding(true); variant.setPaddingChar(\'\\0\'); variant.setMaxLineLength(3); variant.encodeBase64Chunk(new StringBuilder(), 1); variant.encodeBase64Chunk(new StringBuilder(), 2); variant.encodeBase64Chunk(new StringBuilder(), 3); variant.encodeBase64Chunk(new StringBuilder(), 4); variant.encodeBase64Chunk(new StringBuilder(), 5); variant.encodeBase64Chunk(new StringBuilder(), 6); variant.encodeBase64Chunk(new StringBuilder
@Test public void testBase64Variant() { Base64Variant variant = new Base64Variant("name", "http: Assert.assertEquals("http: variant.getUrl()); variant = new Base64Variant("name", "http: Assert.assertEquals("http: variant.getUrl()); variant = new Base64Variant("name", "http: Assert.assertEquals("http: variant.getUrl()); variant = new Base64Variant("name", "http: Assert.assertEquals("http: variant.getUrl()); variant = new Base64Variant("name", "http: Assert.assertEquals("http: variant.getUrl()); variant = new Base64Variant("name", "http: Assert.assert
@Test public void testBase64Variant() { Base64Variant variant = new Base64Variant("name", "http: Assert.assertEquals("name", variant.getName()); Assert.assertEquals("http: variant = new Base64Variant("name", "http: Assert.assertEquals("name", variant.getName()); Assert.assertEquals("http: variant = new Base64Variant("name", "http: Assert.assertEquals("name", variant.getName()); Assert.assertEquals("http: variant = new Base64Variant("name", "http: Assert.assertEquals("name", variant.getName()); Assert.assertEquals("http: variant = new Base64Variant("name", "http: Assert.assert
@Test public void testBase64Variant() { Base64Variant variant = new Base64Variant("name", "http: Assert.assertEquals("http: variant.getUrl()); variant = new Base64Variant("name", "http: Assert.assertEquals("http: variant.getUrl()); variant = new Base64Variant("name", "http: Assert.assertEquals("http: variant.getUrl()); variant = new Base64Variant("name", "http: Assert.assertEquals("http: variant.getUrl()); variant = new Base64Variant("name", "http: Assert.assertEquals("http: variant.getUrl()); variant = new Base64Variant("name", "http: Assert.assert
@Test public void base64Characters() { Base64Variant variant = new Base64Variant("name", "http: Assert.assertEquals("http: variant.getUrl()); variant = new Base64Variant("name", "http: Assert.assertEquals("http: variant.getUrl()); variant = new Base64Variant("name", "http: Assert.assertEquals("http: variant.getUrl()); variant = new Base64Variant("name", "http: Assert.assertEquals("http: variant.getUrl()); variant = new Base64Variant("name", "http: Assert.assertEquals("http: variant.getUrl()); variant = new Base64Variant("name", "http: Assert.assertEquals
@Test public void base64Characters() { Base64Variant variant = new Base64Variant("name", "http: Assert.assertEquals("http: variant.getUrl()); variant = new Base64Variant("name", "http: Assert.assertEquals("http: variant.getUrl()); variant = new Base64Variant("name", "http: Assert.assertEquals("http: variant.getUrl()); variant = new Base64Variant("name", "http: Assert.assertEquals("http: variant.getUrl()); variant = new Base64Variant("name", "http: Assert.assertEquals("http: variant.getUrl()); variant = new Base64Variant("name", "http: Assert.assertEquals
@Test public void base64Characters() { Base64Variant variant = new Base64Variant("name", "http: Assert.assertEquals("http: variant.getUrl()); variant = new Base64Variant("name", "http: Assert.assertEquals("http: variant.getUrl()); variant = new Base64Variant("name", "http: Assert.assertEquals("http: variant.getUrl()); variant = new Base64Variant("name", "http: Assert.assertEquals("http: variant.getUrl()); variant = new Base64Variant("name", "http: Assert.assertEquals("http: variant.getUrl()); variant = new Base64Variant("name", "http: Assert.assertEquals
@Test public void base64Characters() { Base64Variant variant = new Base64Variant("name", "http: Assert.assertEquals(variant.getName(), "http: Assert.assertEquals(variant.getBase64Alphabet(), "http: Assert.assertEquals(variant.getUsesPadding(), true); Assert.assertEquals(variant.getPaddingChar(), \'\\0\'); Assert.assertEquals(variant.getMaxLineLength(), 1); Assert.assertEquals(variant.getMinMaxLineLength(), 1); Assert.assertEquals(variant.getMinMaxLineLength(), 1); }
@Test(expected = IllegalArgumentException.class) public void invalidAlphabetLength() { Base64Variant variant = new Base64Variant("name", "foobar", true, \' \', 3); variant.getUploader().getChars(0, 3, variant.getUploader().getPADDINGChar()); variant.getUploader().getChars(0, 3, variant.getUploader().getPADDINGChar()); variant.getUploader().getChars(0, 3, variant.getUploader().getPADDINGChar()); }
@Test public void testBase64Variant() { Base64Variant variant = new Base64Variant("name", "http: Assert.assertEquals("http: variant.getUrl()); variant = new Base64Variant("name", "http: Assert.assertEquals("http: variant.getUrl()); variant = new Base64Variant("name", "http: Assert.assertEquals("http: variant.getUrl()); variant = new Base64Variant("name", "http: Assert.assertEquals("http: variant.getUrl()); variant = new Base64Variant("name", "http: Assert.assertEquals("http: variant.getUrl()); variant = new Base64Variant("name", "http: Assert.assert
@Test public void base64Characters() { Base64Variant variant = new Base64Variant("name", "http: Assert.assertEquals(variant.getUrl(), "http: variant = new Base64Variant("name", "http: Assert.assertEquals(variant.getUrl(), "http: variant = new Base64Variant("name", "http: Assert.assertEquals(variant.getUrl(), "http: variant = new Base64Variant("name", "http: Assert.assertEquals(variant.getUrl(), "http: variant = new Base64Variant("name", "http: Assert.assertEquals(variant.getUrl(), "http: variant = new Base64Variant("name", "http
@Test public void testBase64Variant() { Base64Variant variant = new Base64Variant("name", "http: Assert.assertEquals("http: variant.getUrl()); variant = new Base64Variant("name", "http: Assert.assertEquals("http: variant.getUrl()); variant = new Base64Variant("name", "http: Assert.assertEquals("http: variant.getUrl()); variant = new Base64Variant("name", "http: Assert.assertEquals("http: variant.getUrl()); variant = new Base64Variant("name", "http: Assert.assertEquals("http: variant.getUrl()); variant = new Base64Variant("name", "http: Assert.assert
@Test public void base64Characters() { Base64Variant variant = new Base64Variant("name", "http: Assert.assertEquals("http: variant.getUrl()); variant = new Base64Variant("name", "http: Assert.assertEquals("http: variant.getUrl()); variant = new Base64Variant("name", "http: Assert.assertEquals("http: variant.getUrl()); variant = new Base64Variant("name", "http: Assert.assertEquals("http: variant.getUrl()); variant = new Base64Variant("name", "http: Assert.assertEquals("http: variant.getUrl()); variant = new Base64Variant("name", "http: Assert.assertEquals
@Test public void base64Characters() { Base64Variant variant = new Base64Variant("name", "http: Assert.assertEquals("http: variant.getUrl()); variant = new Base64Variant("name", "http: Assert.assertEquals("http: variant.getUrl()); variant = new Base64Variant("name", "http: Assert.assertEquals("http: variant.getUrl()); variant = new Base64Variant("name", "http: Assert.assertEquals("http: variant.getUrl()); variant = new Base64Variant("name", "http: Assert.assertEquals("http: variant.getUrl()); variant = new Base64Variant("name", "http: Assert.assertEquals
@Test public void testBase64Variant() { Base64Variant variant = new Base64Variant(new Base64Variant("variant1", "UTF-8", true, \'\\0\', 5), "variant1", 5); System.out.println("variant1: " + variant.toString()); System.out.println("variant1: " + variant.toString()); System.out.println("variant1: " + variant.toString()); System.out.println("variant1: " + variant.toString()); System.out.println("variant1: " + variant.toString()); System.out.println("variant1: " + variant.toString()); System.out.println("variant1: " +
@Test public void testBase64Variant() { Base64Variant variant = new Base64Variant("test", "test", true, \'\\0\', 1); variant._reportBase64(0, 0); variant._reportBase64(1, 0); variant._reportBase64(2, 0); variant._reportBase64(3, 0); variant._reportBase64(4, 0); variant._reportBase64(5, 0); variant._reportBase64(6, 0); variant._reportBase64(7, 0); variant._reportBase64(8, 0); variant._reportBase64(9, 0); variant._reportBase64(10, 0); variant._reportBase64
@Test public void testBase64Variant() { Base64Variant variant = new Base64Variant(new Base64Variant("name", "http: Assert.assertEquals("name", variant.getName()); Assert.assertEquals("http: variant = new Base64Variant(new Base64Variant("name", "http: Assert.assertEquals("name", variant.getName()); Assert.assertEquals("http: variant = new Base64Variant(new Base64Variant("name", "http: Assert.assertEquals("name", variant.getName()); Assert.assertEquals("http: variant = new Base64Variant(new Base64Variant("name", "http: Assert.assertEquals("name", variant.getName()); Assert.
@Test public void testBase64Variant() { Base64Variant variant = new Base64Variant(new Base64Variant("variant1"), "variant1", true, \'\\n\', 1); variant.readResolve(); Assert.assertEquals("variant1", variant.getName()); Assert.assertEquals(true, variant.usesPadding()); Assert.assertEquals(\'\\n\', variant.getPaddingChar()); variant.readResolve(); Assert.assertEquals("variant1", variant.getName()); Assert.assertEquals(true, variant.usesPadding()); Assert.assertEquals(\'\\n\', variant.getPaddingChar()); variant.readResolve(); Assert.assertEquals("variant1", variant.getName()); Assert.assertEquals
@Test public void testBase64Variant() { Base64Variant variant = new Base64Variant(new Base64Variant("variant1"), "variant1", true, \' \', 1); variant.encodeBase64Chunk(0, new byte[0], 0); variant.encodeBase64Chunk(1, new byte[0], 1); variant.encodeBase64Chunk(2, new byte[0], 2); variant.encodeBase64Chunk(3, new byte[0], 3); variant.encodeBase64Chunk(4, new byte[0], 4); variant.encodeBase64Chunk(5, new byte[0], 5); variant.encodeBase64Chunk(6, new byte[
@Test public void testBase64Variant() { Base64Variant variant = new Base64Variant(new Base64Variant("test", "test", true, \' \', 1), "test", false, \' \', 1); variant.encodeBase64Chunk(0, new byte[0], 0); variant.encodeBase64Chunk(1, new byte[0], 1); variant.encodeBase64Chunk(2, new byte[0], 2); variant.encodeBase64Chunk(3, new byte[0], 3); variant.encodeBase64Chunk(4, new byte[0], 4); variant.encodeBase64Chunk(5, new byte[0], 5); variant.encodeBase64
@Test public void testBase64Variant() { Base64Variant variant = new Base64Variant(new Base64Variant("name", "http: Assert.assertEquals("name", variant.getName()); Assert.assertEquals("http: variant = new Base64Variant(new Base64Variant("name", "http: Assert.assertEquals("name", variant.getName()); Assert.assertEquals("http: variant = new Base64Variant(new Base64Variant("name", "http: Assert.assertEquals("name", variant.getName()); Assert.assertEquals("http: variant = new Base64Variant(new Base64Variant("name", "http: Assert.assertEquals("name", variant.getName()); Assert.
@Test public void testBase64Variant() { Base64Variant variant = new Base64Variant(new Base64Variant("variant", "test", true, \' \', 3), "test", true, \' \', 3); variant.encodeBase64Chunk(0, new byte[0], 0); variant.encodeBase64Chunk(1, new byte[0], 1); variant.encodeBase64Chunk(2, new byte[0], 2); variant.encodeBase64Chunk(3, new byte[0], 3); variant.encodeBase64Chunk(4, new byte[0], 4); variant.encodeBase64Chunk(5, new byte[0], 5); variant.encodeBase64
@Test public void testBase64Variant() { Base64Variant variant = new Base64Variant(new Base64Variant("name", "http: Assert.assertEquals("http: variant.toString()); variant = new Base64Variant(new Base64Variant("name", "http: Assert.assertEquals("http: variant.toString()); variant = new Base64Variant(new Base64Variant("name", "http: Assert.assertEquals("http: variant.toString()); variant = new Base64Variant(new Base64Variant("name", "http: Assert.assertEquals("http: variant.toString()); variant = new Base64Variant(new Base64Variant("name", "http: Assert.assertEquals("http
@Test public void testBase64Variant() { Base64Variant variant = new Base64Variant(new Base64Variant("variant1"), "variant1", true, \' \', 1); variant.encodeBase64Chunk(0, new byte[0], 0); variant.encodeBase64Chunk(1, new byte[0], 1); variant.encodeBase64Chunk(2, new byte[0], 2); variant.encodeBase64Chunk(3, new byte[0], 3); variant.encodeBase64Chunk(4, new byte[0], 4); variant.encodeBase64Chunk(5, new byte[0], 5); variant.encodeBase64Chunk(6, new byte[
@Test public void testBase64Variant() { Base64Variant variant = new Base64Variant(new Base64Variant("name", "http: Assert.assertEquals("name", variant.getName()); Assert.assertEquals("http: variant = new Base64Variant(new Base64Variant("name", "http: Assert.assertEquals("name", variant.getName()); Assert.assertEquals("http: variant = new Base64Variant(new Base64Variant("name", "http: Assert.assertEquals("name", variant.getName()); Assert.assertEquals("http: variant = new Base64Variant(new Base64Variant("name", "http: Assert.assertEquals("name", variant.getName()); Assert.
@Test public void testBase64Variant() { Base64Variant variant = new Base64Variant(new Base64Variant("name", "http: Assert.assertEquals("name", variant.getName()); Assert.assertEquals("http: variant = new Base64Variant(new Base64Variant("name", "http: Assert.assertEquals("name", variant.getName()); Assert.assertEquals("http: variant = new Base64Variant(new Base64Variant("name", "http: Assert.assertEquals("name", variant.getName()); Assert.assertEquals("http: variant = new Base64Variant(new Base64Variant("name", "http: Assert.assertEquals("name", variant.getName()); Assert.
@Test public void testBase64Variant() { Base64Variant variant = new Base64Variant(new Base64Variant("name", "http: Assert.assertEquals("name", variant.getName()); Assert.assertEquals("http: variant = new Base64Variant(new Base64Variant("name", "http: Assert.assertEquals("name", variant.getName()); Assert.assertEquals("http: variant = new Base64Variant(new Base64Variant("name", "http: Assert.assertEquals("name", variant.getName()); Assert.assertEquals("http: variant = new Base64Variant(new Base64Variant("name", "http: Assert.assertEquals("name", variant.getName()); Assert.
@Test public void testResolve() { for (String[] line : BASE64_LINES) { System.out.println(line[0]); for (String s : line) { System.out.println(s); } for (String s : BASE64_LINES) { System.out.println(s); } for (String s : BASE64_LINES) { System.out.println(s); } for (String s : BASE64_LINES) { System.out.println(s); } for (String s : BASE64_LINES) { System.out.println(s); } for (String s : BASE64_LINES) { System.out.
@Test(expected = IllegalArgumentException.class) public void testParseEmptyName() { Base64Variant v = new Base64Variant("", "", true, \'\\0\', 0); v.readResolve(); }
@Test public void testGetName() { Base64Variant variant = new Base64Variant("test", "test", true, \'\\0\', 0); assertEquals("test", variant.getName()); variant = new Base64Variant("test1", "test1", true, \'\\0\', 0); assertEquals("test1", variant.getName()); variant = new Base64Variant("test2", "test2", true, \'\\0\', 0); assertEquals("test2", variant.getName()); variant = new Base64Variant("test3", "test3", true, \'\\0\', 0); assertEquals("test3", variant.getName()); }
@Test public void testUsesPadding() { Base64Variant v = new Base64Variant("test", "test", true, \'\\0\', 0); Assert.assertTrue(v.usesPadding()); v = new Base64Variant("test", "test", false, \'\\0\', 0); Assert.assertFalse(v.usesPadding()); v = new Base64Variant("test", "test", true, \'\\0\', 0); Assert.assertTrue(v.usesPadding()); v = new Base64Variant("test", "test", false, \'\\0\', 0); Assert.assertFalse(v.usesPadding()); v = new Base64Variant("test", "test", true, \'\\
@Test public void testUsesPaddingChar() { Base64Variant v = new Base64Variant("test", "test", true, \'\\0\', 0); assertFalse(v.usesPaddingChar(\'\\0\')); assertFalse(v.usesPaddingChar(\'\\0\')); assertTrue(v.usesPaddingChar(\'\\0\')); assertTrue(v.usesPaddingChar(\'\\0\')); assertTrue(v.usesPaddingChar(\'\\0\')); assertTrue(v.usesPaddingChar(\'\\0\')); assertTrue(v.usesPaddingChar(\'\\0\')); assertTrue(v.usesPaddingChar(\'\\0\')); assertTrue(v.usesPaddingChar(\'\\0
@Test public void testGetPaddingChar() { Base64Variant v = new Base64Variant("test", "test", true, \'\\0\', 0); assertEquals(\'\\0\', v.getPaddingChar()); v = new Base64Variant("test2", "test2", true, \'\\0\', 0); assertEquals(\'\\0\', v.getPaddingChar()); v = new Base64Variant("test3", "test3", true, \'\\0\', 0); assertEquals(\'\\0\', v.getPaddingChar()); v = new Base64Variant("test4", "test4", true, \'\\0\', 0); assertEquals(\'\\0\', v.getPaddingChar()); v
@Test public void testGetPaddingByte() { Base64Variant v = new Base64Variant("test", "test", true, \'\\0\', 0); assertEquals(0, v.getPaddingByte()); v.decodeBase64Byte((byte) \'1\'); assertEquals(1, v.getPaddingByte()); v.decodeBase64Byte((byte) \'2\'); assertEquals(2, v.getPaddingByte()); v.decodeBase64Byte((byte) \'3\'); assertEquals(3, v.getPaddingByte()); v.decodeBase64Byte((byte) \'4\'); assertEquals(4, v.getPaddingByte()); v.decodeBase64Byte((byte
@Test public void testGetMaxLineLength() { Base64Variant v = new Base64Variant(null, null, true, \'\\0\', 0); assertEquals(0, v.getMaxLineLength()); v.setMaxLineLength(100); assertEquals(100, v.getMaxLineLength()); v.setMaxLineLength(200); assertEquals(200, v.getMaxLineLength()); v.setMaxLineLength(300); assertEquals(300, v.getMaxLineLength()); v.setMaxLineLength(400); assertEquals(400, v.getMaxLineLength()); v.setMaxLineLength(500); assertEquals(500, v.getMaxLine
@Test public void testToString() { Base64Variant variant = new Base64Variant("MyName", "MyBase64Alphabet", true, \' \', 1); assertEquals("MyName", variant.getName()); assertEquals("MyBase64Alphabet", variant.base64Alphabet); assertEquals(true, variant.usesPadding()); assertEquals(\'\\0\', variant.paddingChar); assertEquals(0, variant.maxLineLength); assertEquals(0, variant.toString().length()); variant = new Base64Variant("MyName", "MyBase64Alphabet", true, \' \', 1); assertEquals("MyName", variant.getName()); assertEquals("MyBase64Alphabet", variant.base64Alphabet);
@Test public void testToString() { Base64Variant variant = new Base64Variant("MyName", "MyBase64Alphabet", true, \'\\0\', 1); variant.name = "MyName"; variant.base64Alphabet = "MyBase64Alphabet"; variant.maxLineLength = 1; variant.toString(); variant = new Base64Variant("MyName", "MyBase64Alphabet", true, \'\\0\', 1); variant.name = "MyName"; variant.base64Alphabet = "MyBase64Alphabet"; variant.maxLineLength = 1; variant.toString(); variant = new Base64Variant("MyName", "MyBase64Alphabet", true, \'\\0\', 1); variant
@Test public void testGetCodec() throws IOException { ObjectCodec codec = new ObjectCodec() { private static final long serialVersionUID = 1L; @Override public ObjectCodec getCodec() { return new ObjectCodec() { private static final long serialVersionUID = 1L; @Override public void setCodec(ObjectCodec codec) { super.setCodec(codec); } @Override public int getLength() { return 0; } @Override public int getLength() { return 0; } @Override public int getLength() { return 0; } @Override public int getLength() { return 0; } @Override public int getLength() { return 0; } @Override public int getLength() { return 0; } @Override public int getLength() { return 0
@Test public void testGetCodec() throws IOException { ObjectCodec codec = new ObjectCodec() { private static final long serialVersionUID = 1L; @Override public ObjectCodec getCodec() { return new ObjectCodec() { private static final long serialVersionUID = 1L; @Override public void setCodec(ObjectCodec codec) { super.setCodec(codec); } @Override public int getLength() { return 0; } @Override public int getLength() { return 0; } @Override public int getLength() { return 0; } @Override public int getLength() { return 0; } @Override public int getLength() { return 0; } @Override public int getLength() { return 0; } @Override public int getLength() { return 0
@Test(expected = JsonParseException.class) public void testValidateNoLeadingZeroes() throws IOException { ReaderBasedJsonParser jp = new ReaderBasedJsonParser(null, 0, new StringReader("{\\"test\\": \\"test\\"}"), new ObjectCodec(), new CharsToNameCanonicalizer()); jp.setInputSource(new StringReader("{\\"test\\": \\"test\\"}")); jp.getParsedJson(); }
@Test(expected = JsonParseException.class) public void testVerifyNoLeadingZeroes() throws JsonParseException, IOException { final JsonParserFactory factory = new JsonParserFactory(); final InputStream in = getClass().getResourceAsStream("test-number-leading-zeroes.json"); final ReaderBasedJsonParser parser = new ReaderBasedJsonParser(new DefaultIOContext(), 0, new StringReader(in), new ObjectCodec(), new CharsToNameCanonicalizer()); final JsonObject json = new JsonObject(); json.addProperty("test", "1"); json.addProperty("test", "2"); json.addProperty("test", "3"); json.addProperty("test", "4"); json.addProperty("test", "
@Test(expected = JsonParseException.class) public void testVerifyNoLeadingZeroes() throws IOException { ReaderBasedJsonParser jp = new ReaderBasedJsonParser(null, 0, new StringReader("{\\"test\\":1}"), new ObjectCodec(), new CharsToNameCanonicalizer()); jp.setInputSource(new ByteArrayInputStream("{\\"test\\":1}".getBytes())); jp.setReadBufferSize(0); jp.getReadByte(0); jp.getReadByte(1); jp.getReadByte(2); jp.getReadByte(3); jp.getReadByte(4); jp.getReadByte(5); }
@Test(expected = JsonParseException.class) public void testVerifyNoLeadingZeroes() throws IOException { ReaderBasedJsonParser jp = new ReaderBasedJsonParser(null, 0, new StringReader("{\\"test\\":1}"), new ObjectCodec(), new CharsToNameCanonicalizer()); jp.setInputSource(new ByteArrayInputStream("{\\"test\\":1}".getBytes())); jp.setReadBufferSize(0); jp.getReadByte(0); jp.getReadByte(1); jp.getReadByte(2); jp.getReadByte(3); jp.getReadByte(4); jp.getReadByte(5); }
@Test(expected = JsonParseException.class) public void testVerifyNoLeadingZeroes() throws IOException { ReaderBasedJsonParser jp = new ReaderBasedJsonParser(null, 0, new StringReader("{\\"test\\":1}"), new ObjectCodec(), new CharsToNameCanonicalizer()); jp.setInputSource(new ByteArrayInputStream("{\\"test\\":1}".getBytes())); jp.setReadBufferSize(0); jp.getReadByte(0); jp.getReadByte(1); jp.getReadByte(2); jp.getReadByte(3); jp.getReadByte(4); jp.getReadByte(5); }
@Test(expected = JsonParseException.class) public void testVerifyNoLeadingZeroes() throws IOException { ReaderBasedJsonParser j = new ReaderBasedJsonParser(null, 0, new StringReader("{\\"test\\":\\"test\\"}"), new ObjectCodec(), new CharsToNameCanonicalizer()); j.setInputSource(new ByteArrayInputStream("{\\"test\\":\\"test\\"}".getBytes())); j.getInputSource().append(\'\\n\'); j.getInputSource().append(\'\\n\'); j.getInputSource().append(\'\\n\'); j.getInputSource().append(\'\\n\'); j.getInputSource().append(\'\\n\'); j.get
@Test(expected = JsonParseException.class) public void testVerifyNoLeadingZeroes() throws IOException { ReaderBasedJsonParser j = new ReaderBasedJsonParser(null, 0, new StringReader("{\\"test\\": \\"test\\"}"), new ObjectCodec(), new CharsToNameCanonicalizer()); j.setInputSource(new StringReader("{\\"test\\": \\"test\\"}")); j.getParsedJson(); }
@Test(expected = JsonParseException.class) public void testVerifyNoLeadingZeroes() throws IOException { ReaderBasedJsonParser jp = new ReaderBasedJsonParser(null, 0, new StringReader("{\\"test\\":1}"), new ObjectCodec(), new CharsToNameCanonicalizer()); jp.setInputSource(new ByteArrayInputStream("{\\"test\\":1}".getBytes())); jp.setReadBufferSize(0); jp.getReadByte(0); jp.getReadByte(1); jp.getReadByte(2); jp.getReadByte(3); jp.getReadByte(4); jp.getReadByte(5); }
@Test(expected = JsonParseException.class) public void testVerifyNoLeadingZeroes() throws IOException { ReaderBasedJsonParser j = new ReaderBasedJsonParser(null, 0, new StringReader("{\\"test\\":\\"test\\"}"), new ObjectCodec(), new CharsToNameCanonicalizer()); j.setInputSource(new StringReader("{\\"test\\":\\"test\\"}")); j.getParsedJson(); }
@Test public void test_verifyNoLeadingZeroes() throws IOException { final JsonParserFactory factory = new JsonParserFactory(); final InputStream is = getClass().getResourceAsStream("test_verifyNoLeadingZeroes.json"); final InputStream is2 = getClass().getResourceAsStream("test_verifyNoLeadingZeroes2.json"); final InputStream is3 = getClass().getResourceAsStream("test_verifyNoLeadingZeroes3.json"); final InputStream is4 = getClass().getResourceAsStream("test_verifyNoLeadingZeroes4.json"); final InputStream is5 = getClass().getResourceAsStream("test_verifyNoLeadingZeroes5.json"); final InputStream is6 = getClass().getResourceAsStream("test_verify
@Test(expected = JsonParseException.class) public void testVerifyNoLeadingZeroes() throws IOException { ReaderBasedJsonParser parser = new ReaderBasedJsonParser(null, 0, new StringReader("{\\"test\\":\\"test\\"}"), new ObjectCodec(), new CharsToNameCanonicalizer()); parser.setInputSource(new ByteArrayInputStream("{\\"test\\":\\"test\\"}".getBytes())); assertEquals(\'{\', parser.getNextChar("test")); parser.setInputSource(new ByteArrayInputStream("{\\"test\\":\\"test\\"}".getBytes())); assertEquals(\'{\', parser.getNextChar("test")); parser.setInputSource(new ByteArrayInputStream("{\\"test
@Test(expected = JsonParseException.class) public void invalidUnusualFieldName() throws IOException, JsonParseException { final String str = new MyClass()._handleUnusualFieldName(-1); }
@Test public void test_finishString() throws IOException, JsonParseException { final MockIOContext ctxt = new MockIOContext(); final ReaderBasedJsonParser jp = new ReaderBasedJsonParser(ctxt, 0, new StringReader("{\\"test\\":\\"test\\"}"), new ObjectCodec(), new CharsToNameCanonicalizerImpl()); jp._inputPtr = 0; jp._inputEnd = 4; jp._finishString(); assertEquals("{\\"test\\":\\"test\\"}", jp._getTextAsString()); jp._inputPtr = 4; jp._inputEnd = 5; jp._finishString(); assertEquals("{\\"test\\":\\"test\\"}", jp
@Test public void test_text() throws IOException, JsonParseException { final JsonParserFactory factory = new JsonParserFactory(); final ObjectMapper mapper = factory.createObjectMapper(); final InputStream is = getClass().getResourceAsStream("test.json"); final JsonParser parser = factory.createParser(is, new InputStreamReader(is, StandardCharsets.UTF_8)); final JsonObject json = new JsonObject(); json.addProperty("key", "value"); json.addProperty("key2", "value2"); json.addProperty("key3", "value3"); json.addProperty("key4", "value4"); json.addProperty("key5", "value5"); json.addProperty("key6", "value6
@Test public void test_finishString() throws IOException, JsonParseException { final MockIOContext ctxt = new MockIOContext(); final ReaderBasedJsonParser parser = new ReaderBasedJsonParser(ctxt, 0, new StringReader("{\\"a\\":1,\\"b\\":2}"), new ObjectCodec(), new CharsToNameCanonicalizer()); final ByteArrayOutputStream out = new ByteArrayOutputStream(); final JsonParser.Writer w = new JsonParser.Writer(out); w.beginObject(); w.writeString("a"); w.writeString("b"); w.endObject(); w.beginObject(); w.writeString("c"); w.writeString("d"); w.writeString("e"); w.writeString("
@Test public void test_finishString() throws IOException, JsonParseException { final JsonParserFactory factory = new JsonParserFactory(); final ObjectMapper mapper = factory.createObjectMapper(); final InputStream in = getClass().getClassLoader().getResourceAsStream("test.json"); final JsonParser reader = factory.createParser(in); final InputStream out = getClass().getClassLoader().getResourceAsStream("test.json"); final JsonParser out2 = factory.createParser(out); final JsonParser out3 = factory.createParser(in2); final JsonParser out4 = factory.createParser(out3); final JsonParser out5 = factory.createParser(in4); final JsonParser out6 = factory.createParser(
@Test(timeout=60000) public void test_finishString2() throws IOException, JsonParseException { String json = "{\\"a\\":1, \\"b\\":2, \\"c\\":3, \\"d\\":4, \\"e\\":5, \\"f\\":6}"; JSONObject obj = new JSONObject(json); obj.put("a", 1); obj.put("b", 2); obj.put("c", 3); obj.put("d", 4); try { obj.put("e", 5); } catch (JsonParseException e) { e.printStackTrace(); } try { obj.put("f", 6); } catch (JsonParseException e
@Test(expected=JsonParseException.class) public void testString2() throws IOException, JsonParseException { ReaderBasedJsonParser p = new ReaderBasedJsonParser(null, 0, new StringReader("{\\"a\\":1}"), new ObjectCodec(), new CharsToNameCanonicalizer()); p._textBuffer.clear(); p._textBuffer.append(\'a\'); p._textBuffer.append(\'b\'); p._textBuffer.append(\'c\'); p._textBuffer.append(\'d\'); p._textBuffer.append(\'e\'); p._textBuffer.append(\'f\'); p._textBuffer.append(\'\\n\'); p._textBuffer.append(\'\\n\'
@Test public void test_string2() throws IOException, JsonParseException { String json = "{\\"a\\":1, \\"b\\":2, \\"c\\":3}"; ReaderBasedJsonParser p = new ReaderBasedJsonParser(null, 0, new StringReader(json), new ObjectCodec(), new CharsToNameCanonicalizer()); p._textBuffer.clear(); p._textBuffer.put(0, \'a\'); p._textBuffer.put(1, \'b\'); p._textBuffer.put(2, \'c\'); p._textBuffer.put(3, \'d\'); p._textBuffer.put(4, \'e\'); p._textBuffer
@Test public void test_string2() throws IOException, JsonParseException { String json = "{\\"a\\":1, \\"b\\":2, \\"c\\":3}"; InputStream in = new ByteArrayInputStream(json.getBytes()); ReaderBasedJsonParser parser = new ReaderBasedJsonParser(null, 0, new StringReader(in), new ObjectCodec(), new CharsToNameCanonicalizer()); for (int i = 0; i < json.length(); i++) { assertEquals(json.get(i), parser._getText2(new JsonToken(i))); } }
@Test(expected=JsonParseException.class) public void testString2() throws IOException, JsonParseException { ReaderBasedJsonParser parser = new ReaderBasedJsonParser(null, 0, new StringReader("{\\"a\\":\\"b\\",\\"c\\":\\"d\\"}"), new ObjectCodec(), new CharsToNameCanonicalizer()); parser._getText(); }
@Test(expected=JsonParseException.class) public void testString2() throws IOException, JsonParseException { ReaderBasedJsonParser parser = new ReaderBasedJsonParser(null, 0, new StringReader("{\\"a\\":\\"b\\",\\"c\\":\\"d\\"}"), new ObjectCodec(), new CharsToNameCanonicalizer()); parser._textBuffer.clear(); assertEquals("{\\"a\\":\\"b\\",\\"c\\":\\"d\\"}", parser._getText()); parser._textBuffer.clear(); assertEquals("{\\"a\\":\\"b\\",\\"c\\":\\"d\\"}", parser._getText()); parser._textBuffer.clear(); assertEquals("{\\"
@Test public void test_string2() throws IOException, JsonParseException { String json = "{\\"a\\":1, \\"b\\":2, \\"c\\":3, \\"d\\":4}"; ReaderBasedJsonParser parser = new ReaderBasedJsonParser(null, 0, new StringReader(json), new ObjectCodec(), new CharsToNameCanonicalizer()); String out = parser._finishString2(); assertEquals("{\\"a\\":1, \\"b\\":2, \\"c\\":3}", out); out = parser._finishString2(); assertEquals("{\\"a\\":1, \\"b\\":2, \\"c\\":3}",
@Test(expected=JsonParseException.class) public void testString2() throws IOException, JsonParseException { ReaderBasedJsonParser parser = new ReaderBasedJsonParser(null, 0, new StringReader("{\\"foo\\":\\"bar\\"}"), new ObjectCodec(), new CharsToNameCanonicalizer()); parser._getText2(); }
@Test(expected=JsonParseException.class) public void testString2() throws IOException, JsonParseException { ReaderBasedJsonParser parser = new ReaderBasedJsonParser(null, 0, new StringReader("{\\"foo\\":\\"bar\\"}"), new ObjectCodec(), new CharsToNameCanonicalizer()); parser._getText2(); }
@Test(expected=JsonParseException.class) public void testString2() throws IOException, JsonParseException { ReaderBasedJsonParser parser = new ReaderBasedJsonParser(null, 0, new StringReader("{\\"foo\\":\\"bar\\"}"), new ObjectCodec(), new CharsToNameCanonicalizer()); parser._getText(); }
@Test(expected=JsonParseException.class) public void testString2() throws IOException, JsonParseException { ReaderBasedJsonParser parser = new ReaderBasedJsonParser(null, 0, new StringReader("{\\"foo\\":\\"bar\\"}"), new ObjectCodec(), new CharsToNameCanonicalizer()); parser._getText2(); }
@Test(expected=JsonParseException.class) public void testString2() throws IOException, JsonParseException { ReaderBasedJsonParser parser = new ReaderBasedJsonParser(null, 0, new StringReader("{\\"foo\\":\\"bar\\"}"), new ObjectCodec(), new CharsToNameCanonicalizer()); parser._getText2(); }
@Test(expected=JsonParseException.class) public void test_throwUnquotedSpace3() throws IOException, JsonParseException { ReaderBasedJsonParser p = new ReaderBasedJsonParser(null, 0, new StringReader("{\\"test\\":\\"test\\"}"), new ObjectCodec(), new CharsToNameCanonicalizer()); p._throwString2(); }
@Test public void testSkipWSOrEnd() throws IOException, JsonParseException { String json = "{\\"test\\":1,\\"test2\\":2,\\"test3\\":3,\\"test4\\":4,\\"test5\\":5,\\"test6\\":6,\\"test7\\":7,\\"test8\\":8,\\"test9\\":9,\\"test10\\":10,\\"test11\\":11,\\"test12\\":12,\\"test13\\":13,\\"test14\\":14,\\"test15\\":15,\\"test16\\":16,\\"test17\\":17,\\"test18\\":18,\\"test19
@Test public void testSkipComment() throws IOException, JsonParseException { ReaderBasedJsonParser p = new ReaderBasedJsonParser(null, 0, new StringReader(""), new ObjectCodec(), CharsToNameCanonicalizer.getDefault()); p._skipComment(); assertEquals("", p._getText()); p._skipCppComment(); assertEquals("", p._getText()); p._skipCppComment(); assertEquals("", p._getText()); p._skipCppComment(); assertEquals("", p._getText()); p._skipCppComment(); assertEquals("", p._getText()); p._skipCppComment(); assertEquals("", p._getText()); p._skipCppComment
@Test public void testSkipComment() throws IOException { ReaderBasedJsonParser p = new ReaderBasedJsonParser(null, 0, new StringReader("/test"), new ObjectCodec(), CharsToNameCanonicalizer.getDefault()); p._skipComment(); assertEquals(\'/\', p._getText()); p._skipCppComment(); assertEquals(\'/\', p._getText()); p._skipCppComment(); assertEquals(\'/\', p._getText()); p._skipCppComment(); assertEquals(\'/\', p._getText()); p._skipCppComment(); assertEquals(\'/\', p._getText()); p._skipCppComment(); assertEquals(\'/\', p._getText()); p
@Test public void testSkipComment() throws IOException { ReaderBasedJsonParser p = new ReaderBasedJsonParser(null, 0, new StringReader("/test"), new ObjectCodec(), CharsToNameCanonicalizer.getDefault()); p._skipComment(); assertEquals("/test", p._getText()); p._skipCppComment(); assertEquals("/test", p._getText()); p._skipCppComment(); assertEquals("/test", p._getText()); p._skipCppComment(); assertEquals("/test", p._getText()); p._skipCppComment(); assertEquals("/test", p._getText()); p._skipCppComment(); assertEquals("/test",
@Test public void testSkipCppComment() throws IOException, JsonParseException { ReaderBasedJsonParser p = new ReaderBasedJsonParser(null, 0, new StringReader("abc"), new ObjectCodec(), CharsToNameCanonicalizer.getDefault()); p._skipCppComment(); assertEquals("abc", p._getText()); p._skipCppComment().getText(); assertEquals("abc", p._getText()); p._skipCppComment().getText(); assertEquals("abc", p._getText()); p._skipCppComment().getText(); assertEquals("abc", p._getText()); p._skipCppComment().getText(); assertEquals("abc", p._getText());
@Test public void testSkipComment() throws IOException, JsonParseException { ReaderBasedJsonParser p = new ReaderBasedJsonParser(null, 0, new StringReader(""), new ObjectCodec(), CharsToNameCanonicalizer.DEFAULT); p._skipComment(); assertEquals("", p._getText()); p._skipCppComment(); assertEquals("/*", p._getText()); p._skipCppComment(); assertEquals("/*", p._getText()); p._skipCppComment(); assertEquals("/*", p._getText()); p._skipCppComment(); assertEquals("/*", p._getText()); p._skipCppComment(); assertEquals("/*", p._getText()); p._
@Test public void testSkipCComment() throws IOException, JsonParseException { ReaderBasedJsonParser p = new ReaderBasedJsonParser(null, 0, new StringReader("abc"), new ObjectCodec(), new CharsToNameCanonicalizer()); p._skipCComment(); assertEquals("abc", p._getText()); p._skipCComment().getText(); assertEquals("abc", p._getText()); p._skipCComment().getText(); assertEquals("abc", p._getText()); p._skipCComment().getText(); assertEquals("abc", p._getText()); p._skipCComment().getText(); assertEquals("abc", p._getText()); p._skipCComment().getText
@Test public void test_skipCComment() throws IOException { final String json = "{\\n" + " \\"test\\" : {\\n" + " \\"test2\\" : {\\n" + " \\"test3\\" : {\\n" + " \\"test4\\" : {\\n" + " \\"test5\\" : {\\n" + " \\"test6\\" : {\\n" + " \\"test7\\" : {\\n" + " \\"test8\\" : {\\n" + " \\"test9\\" : {\\n" + " \\"test10\\" : {\\n" + " \\"test11\\" :
@Test public void test_skipCComment() throws IOException { final String json = "{\\n" + " \\"test\\": {\\n" + " \\"test1\\": 1,\\n" + " \\"test2\\": 2,\\n" + " \\"test3\\": 3,\\n" + " \\"test4\\": 4,\\n" + " \\"test5\\": 5,\\n" + " \\"test6\\": 6,\\n" + " \\"test7\\": 7,\\n" + " \\"test8\\": 8,\\n" + " \\"test9\\": 9,\\n
@Test public void testSkipCComment() throws IOException { final String json = "{\\n" + " \\"test\\": [\\n" + " {\\n" + " \\"test1\\": 1,\\n" + " \\"test2\\": 2,\\n" + " \\"test3\\": 3,\\n" + " \\"test4\\": 4,\\n" + " \\"test5\\": 5,\\n" + " \\"test6\\": 6,\\n" + " \\"test7\\": 7,\\n" + " \\"test8\\": 8,\\n" + " \\"test9\\
@Test public void test_skipCComment() throws IOException { final String json = "{\\n" + " \\"test\\" : {\\n" + " \\"test2\\" : {\\n" + " \\"test3\\" : {\\n" + " \\"test4\\" : {\\n" + " \\"test5\\" : {\\n" + " \\"test6\\" : {\\n" + " \\"test7\\" : {\\n" + " \\"test8\\" : {\\n" + " \\"test9\\" : {\\n" + " \\"test10\\" : {\\n" + " \\"test11\\" :
@Test public void test_skipCComment() throws IOException { final String json = "{\\n" + " \\"test\\": {\\n" + " \\"test2\\": {\\n" + " \\"test3\\": 1,\\n" + " \\"test4\\": 2,\\n" + " \\"test5\\": 3,\\n" + " \\"test6\\": 4,\\n" + " \\"test7\\": 5,\\n" + " \\"test8\\": 6,\\n" + " \\"test9\\": 7,\\n" + " \\"test10\\": 8,\\n"
@Test public void test_skipCComment() throws IOException { final String json = "{\\n" + " \\"test\\" : {\\n" + " \\"test2\\" : {\\n" + " \\"test3\\" : {\\n" + " \\"test4\\" : {\\n" + " \\"test5\\" : {\\n" + " \\"test6\\" : {\\n" + " \\"test7\\" : {\\n" + " \\"test8\\" : {\\n" + " \\"test9\\" : {\\n" + " \\"test10\\" : {\\n" + " \\"test11\\" :
@Test public void test_skipCComment() throws IOException { final String json = "{\\n" + " \\"test\\" : {\\n" + " \\"test2\\" : {\\n" + " \\"test3\\" : {\\n" + " \\"test4\\" : {\\n" + " \\"test5\\" : {\\n" + " \\"test6\\" : {\\n" + " \\"test7\\" : {\\n" + " \\"test8\\" : {\\n" + " \\"test9\\" : {\\n" + " \\"test10\\" : {\\n" + " \\"test11\\" :
@Test public void test_skipCComment() throws IOException { final String json = "{\\n" + " \\"test\\" : {\\n" + " \\"test2\\" : {\\n" + " \\"test3\\" : {\\n" + " \\"test4\\" : {\\n" + " \\"test5\\" : {\\n" + " \\"test6\\" : {\\n" + " \\"test7\\" : {\\n" + " \\"test8\\" : {\\n" + " \\"test9\\" : {\\n" + " \\"test10\\" : {\\n" + " \\"test11\\" :
@Test public void test_skipCComment() throws IOException { ReaderBasedJsonParser j = new ReaderBasedJsonParser(null, 0, new StringReader(""), new ObjectCodec(), new CharsToNameCanonicalizer()); j.getInputSource(); j._skipCComment(); j.getInputSource(); j.getInputSource(); j.getInputSource(); j.getInputSource(); j.getInputSource(); j.getInputSource(); j.getInputSource(); j.getInputSource(); j.getInputSource(); j.getInputSource(); j.getInputSource(); j.getInputSource(); j.getInputSource(); j.getInputSource(); j.getInputSource(); j
@Test public void test_skipCComment() throws IOException { final String json = "{\\n" + " \\"test\\": {\\n" + " \\"test1\\": 1,\\n" + " \\"test2\\": 2,\\n" + " \\"test3\\": 3,\\n" + " \\"test4\\": 4,\\n" + " \\"test5\\": 5,\\n" + " \\"test6\\": 6,\\n" + " \\"test7\\": 7,\\n" + " \\"test8\\": 8,\\n" + " \\"test9\\": 9,\\n
@Test public void test_skipCComment() throws IOException { final String json = "{\\n" + " \\"test\\": [\\n" + " {\\n" + " \\"test1\\": 1,\\n" + " \\"test2\\": 2,\\n" + " \\"test3\\": 3,\\n" + " \\"test4\\": 4,\\n" + " \\"test5\\": 5,\\n" + " \\"test6\\": 6,\\n" + " \\"test7\\": 7,\\n" + " \\"test8\\": 8,\\n" + " \\"test9
@Test public void test_skipCComment() throws IOException { final String json = "{\\n" + " \\"test\\" : {\\n" + " \\"test2\\" : {\\n" + " \\"test3\\" : {\\n" + " \\"test4\\" : {\\n" + " \\"test5\\" : {\\n" + " \\"test6\\" : {\\n" + " \\"test7\\" : {\\n" + " \\"test8\\" : {\\n" + " \\"test9\\" : {\\n" + " \\"test10\\" : {\\n" + " \\"test11\\" :
@Test public void test_skipCComment() throws IOException { final String json = "{\\n" + " \\"test\\": {\\n" + " \\"test1\\": 1,\\n" + " \\"test2\\": 2,\\n" + " \\"test3\\": 3,\\n" + " \\"test4\\": 4,\\n" + " \\"test5\\": 5,\\n" + " \\"test6\\": 6,\\n" + " \\"test7\\": 7,\\n" + " \\"test8\\": 8,\\n" + " \\"test9\\": 9,\\n
@Test public void testSkipCppComment() throws IOException, JsonParseException { String line = "{\\n" + " \\"test\\": [\\n" + " {\\n" + " \\"test1\\": 1,\\n" + " \\"test2\\": 2,\\n" + " \\"test3\\": 3,\\n" + " \\"test4\\": 4,\\n" + " \\"test5\\": 5,\\n" + " \\"test6\\": 6,\\n" + " \\"test7\\": 7,\\n" + " \\"test8\\": 8,\\n" + " \\"
@Test public void testSkipCppComment() throws IOException, JsonParseException { ReaderBasedJsonParser jp = new ReaderBasedJsonParser(new MockIOContext(), 0, new StringReader("{\\"test\\": \\"test\\"}"), new ObjectCodec(), new CharsToNameCanonicalizerImpl()); jp._setInputSource(new StringReader("{\\"test\\": \\"test\\"}")); jp._skipCppComment(); assertEquals("{\\"test\\":\\"test\\"}", jp._getText()); jp._skipCppComment(); assertEquals("{\\"test\\":\\"test\\"}", jp._getText()); jp._skipCppComment(); assertEquals("
@Test public void testSkipCppComment() throws IOException, JsonParseException { ReaderBasedJsonParser jp = new ReaderBasedJsonParser(new MockIOContext(), 0, new StringReader("{\\"test\\": \\"test\\"}"), new ObjectCodec(), new CharsToNameCanonicalizerImpl()); jp._getInputSource(); jp._skipCppComment(); jp._getInputSource(); jp._getInputSource(); jp._getInputSource(); jp._skipCppComment(); jp._getInputSource(); jp._getInputSource(); jp._getInputSource(); jp._skipCppComment(); jp._getInputSource(); jp._getInputSource
@Test public void testSkipCppComment() throws IOException, JsonParseException { ReaderBasedJsonParser p = new ReaderBasedJsonParser(new MockIOContext(), 0, new StringReader(""), new ObjectCodec(), new CharsToNameCanonicalizerImpl()); p._skipCppComment(); assertEquals("", p._getText()); p._skipCppComment(1); assertEquals("", p._getText()); p._skipCppComment(2); assertEquals("", p._getText()); p._skipCppComment(3); assertEquals("", p._getText()); p._skipCppComment(4); assertEquals("", p._getText()); p._skipCppComment(5
@Test public void testSkipCppComment() throws IOException, JsonParseException { ReaderBasedJsonParser jp = new ReaderBasedJsonParser(new MockIOContext(), 0, new StringReader(""), new ObjectCodec(), new CharsToNameCanonicalizerImpl()); jp._skipCppComment(); jp._getInputSource(); jp._getInputSource(); jp._getInputSource(); jp._skipCppComment(); jp._getInputSource(); jp._getInputSource(); jp._getInputSource(); jp._getInputSource(); jp._getInputSource(); jp._skipCppComment(); jp._getInputSource(); jp._getInputSource(); j
@Test public void testSkipCppComment() throws IOException, JsonParseException { ReaderBasedJsonParser jp = new ReaderBasedJsonParser(new MockIOContext(), 0, new StringReader("{\\"test\\": \\"test\\"}"), new ObjectCodec(), new CharsToNameCanonicalizerImpl()); jp._skipCppComment(); assertEquals("test", jp._getText()); jp._skipCppComment(); assertEquals("test", jp._getText()); jp._skipCppComment(); assertEquals("test", jp._getText()); jp._skipCppComment(); assertEquals("test", jp._getText()); jp._skipCppComment(); assertEquals
@Test public void testSkipCppComment() throws IOException, JsonParseException { ReaderBasedJsonParser jlp = new ReaderBasedJsonParser(new MockIOContext(), 0, new StringReader("{\\"test\\": \\"test\\"}"), new ObjectCodec(), new CharsToNameCanonicalizerImpl()); jlp._skipCppComment(); jlp._getText(); jlp._getText(); jlp._skipCppComment(); jlp._getText(); jlp._getText(); jlp._skipCppComment(); jlp._getText(); jlp._skipCppComment(); jlp._getText(); jlp._getText(); jlp._skipCppComment(); jlp._get
@Test public void testWriterBasedJsonGenerator() throws IOException, JsonGenerationException { WriterBasedJsonGenerator generator = new WriterBasedJsonGenerator(ctxt, 1, ObjectCodec.DEFAULT_CODEC, w); generator.writeFieldName("foo"); generator.writeFieldName("bar"); generator.writeString("baz"); assertEquals("{\\"foo\\":\\"baz\\",\\"bar\\":\\"baz\\"}", w.toString()); generator.writeEndObject(); assertEquals("{\\"foo\\":\\"bar\\",\\"baz\\":\\"baz\\"}", w.toString()); }
@Test public void testWriterBasedJsonGeneration() throws IOException, JsonGenerationException { final StringWriter w = new StringWriter(); final IIOContext ctxt = Mockito.mock(IIOContext.class); Mockito.when(ctxt.allocConcatBuffer()).thenReturn(w); final ObjectCodec codec = new ObjectCodec(); final WriterBasedJsonGenerator generator = new WriterBasedJsonGenerator(ctxt, 1, codec, w); generator.writeStartObject(); generator.writeString("abc"); generator.writeString("def"); generator.writeString("ghi"); generator.writeString("jkl"); generator.writeString(1); generator.writeString(2); generator.writeString(3); generator.write
@Test public void testWriterBasedJsonGeneration() throws IOException { StringWriter w = new StringWriter(); WriterBasedJsonGenerator generator = new WriterBasedJsonGenerator(ctxt, 1, ObjectCodec.DEFAULT, w); generator.writeFieldName("foo"); generator.writeString("bar"); generator.writeString("baz"); assertEquals("{\\"foo\\":\\"bar\\",\\"baz\\":\\"baz\\"}", w.toString()); w.reset(); generator.writeFieldName("foo"); generator.writeString("bar"); generator.writeString("baz"); assertEquals("{\\"foo\\":\\"bar\\",\\"baz\\":\\"baz\\"}", w.toString()); w.reset();
@Test public void testWriterBasedJsonGeneration() throws IOException, JsonGenerationException { final StringWriter w = new StringWriter(); final IIOContext ctxt = Mockito.mock(IIOContext.class); Mockito.when(ctxt.allocConcatBuffer()).thenReturn(new WriterBasedJsonGenerator(ctxt, 0, ObjectCodec.DEFAULT_CODEC, w)); WriterBasedJsonGenerator generator = new WriterBasedJsonGenerator(ctxt, 0, ObjectCodec.DEFAULT_CODEC, w); generator.writeStartObject(); generator.writeString("string1"); generator.writeString("string2"); generator.writeString("string3"); generator.writeString("string4"); generator.writeString("string5");
@Test public void testWriterBasedJsonGeneration() throws IOException, JsonGenerationException { final StringWriter w = new StringWriter(); final IIOContext ctxt = Mockito.mock(IIOContext.class); Mockito.when(ctxt.allocConcatBuffer()).thenReturn(w); final WriterBasedJsonGenerator generator = new WriterBasedJsonGenerator(ctxt, 0, ObjectCodec.DEFAULT_JSON_CODEC, w); generator.writeStartObject(); generator.writeString(TEST_STRING); generator.writeString(TEST_STRING, 0, TEST_STRING.length()); generator.writeString(TEST_STRING, 0, TEST_STRING.length()); generator.writeString(TEST_STRING, 0, TEST
@Test public void testWriteEndObject() throws Exception { StringWriter w = new StringWriter(); IIOContext ctxt = Mockito.mock(IIOContext.class); Mockito.when(ctxt.inObject()).thenReturn(true); Mockito.when(ctxt.getTypeDesc()).thenReturn(Object.class); WriterBasedJsonGenerator generator = new WriterBasedJsonGenerator(ctxt, 0, ObjectCodec.DEFAULT, w); generator._writeStartObject(); generator._writeEndObject(); Assert.assertEquals("{\\"a\\":1}", w.toString()); }
@Test public void testClose() throws IOException { IIOContext ctxt = Mockito.mock(IIOContext.class); Mockito.when(ctxt.inArray()).thenReturn(true); Mockito.when(ctxt.inObject()).thenReturn(true); Mockito.when(ctxt.getOutputContext()).thenReturn(ctxt); WriterBasedJsonGenerator generator = new WriterBasedJsonGenerator(ctxt, 0, ObjectCodec.DEFAULT, null); generator.setOutputContext(ctxt); generator.close(); Mockito.verify(ctxt, Mockito.times(1)).inArray(); Mockito.verify(ctxt, Mockito.times(1)).inObject(); Mockito
@Test public void testClose() throws IOException { IIOContext ctxt = Mockito.mock(IIOContext.class); Mockito.when(ctxt.inArray()).thenReturn(true); Mockito.when(ctxt.inObject()).thenReturn(true); Mockito.when(ctxt.isResourceManaged()).thenReturn(true); WriterBasedJsonGenerator generator = new WriterBasedJsonGenerator(ctxt, 0, ObjectCodec.DEFAULT, new StringWriter()); generator.setOutputContext(ctxt); generator.writeFieldName("test1"); generator.writeString("test2"); generator.writeString("test3"); generator.writeString("test4"); generator.writeString("test5"); generator
@Test public void testClose() throws IOException { IIOContext ctxt = Mockito.mock(IIOContext.class); Mockito.when(ctxt.inArray()).thenReturn(true); Mockito.when(ctxt.inObject()).thenReturn(true); Mockito.when(ctxt.isResourceManaged()).thenReturn(true); WriterBasedJsonGenerator generator = new WriterBasedJsonGenerator(ctxt, 0, ObjectCodec.DEFAULT, new StringWriter()); generator.setOutputContext(ctxt); generator.writeFieldName("foo"); generator.writeString("bar"); generator.writeString("baz"); generator.close(); generator.close(); }
@Test public void testClose() throws IOException { IIOContext ctxt = Mockito.mock(IIOContext.class); Mockito.when(ctxt.inArray()).thenReturn(true); Mockito.when(ctxt.inObject()).thenReturn(true); Mockito.when(ctxt.isResourceManaged()).thenReturn(true); WriterBasedJsonGenerator generator = new WriterBasedJsonGenerator(ctxt, 0, ObjectCodec.DEFAULT, new StringWriter()); generator.setOutputContext(ctxt); generator.writeFieldName("foo"); generator.writeString("bar"); generator.writeString("baz"); generator.close(); generator.close(); }
@Test public void testClose() throws IOException { JsonStreamContext ctxt = new JsonStreamContext() { @Override public boolean isInArray() { return true; } @Override public boolean isInObject() { return true; } @Override public boolean isInObject2() { return true; } @Override public boolean isInObject3() { return true; } @Override public boolean isInObject4() { return true; } @Override public boolean isInObject5() { return true; } @Override public boolean isInObject6() { return true; } @Override public boolean isInObject4() { return true; } @Override public boolean isInObject5() { return true; } @Override public boolean isInObject6() { return true;
@Test public void testWriteArray() throws IOException { IIOContext ctxt = new IIOContext() { @Override public boolean isInResourceManaged() { return true; } @Override public InputStream getInputStream() { return null; } @Override public InputStream getInputStream() { return null; } @Override public boolean isInResourceManaged() { return true; } @Override public boolean isInResourceManaged() { return true; } @Override public InputStream getInputStream() { return null; } @Override public boolean isInResourceManaged() { return true; } @Override public InputStream getInputStream() { return null; } @Override public boolean isInResourceManaged() { return true; } @Override public InputStream getInputStream() { return null; } @Override public InputStream getInputStream()
@Test public void testClose() throws IOException { IIOContext ctxt = Mockito.mock(IIOContext.class); Mockito.when(ctxt.inObject()).thenReturn(true); Mockito.when(ctxt.inArray()).thenReturn(true); Mockito.when(ctxt.inObject()).thenReturn(false); WriterBasedJsonGenerator generator = new WriterBasedJsonGenerator(ctxt, 0, ObjectCodec.DEFAULT, null); generator.setOutputContext(ctxt); generator.writeFieldName("foo"); generator.writeString("bar"); generator.writeString("baz"); generator.close(); generator.close(); }
@Test public void testClose() throws IOException { IIOContext ctxt = Mockito.mock(IIOContext.class); Mockito.when(ctxt.inArray()).thenReturn(true); Mockito.when(ctxt.inObject()).thenReturn(true); Mockito.when(ctxt.getOutputContext()).thenReturn(ctxt); WriterBasedJsonGenerator generator = new WriterBasedJsonGenerator(ctxt, 0, ObjectCodec.DEFAULT, null); generator.setOutputContext(ctxt); generator.close(); generator.close(); }
@Test public void testFlushBuffer() throws IOException { IIOContext ctxt = Mockito.mock(IIOContext.class); Mockito.when(ctxt.inArray()).thenReturn(true); Mockito.when(ctxt.inObject()).thenReturn(true); Mockito.when(ctxt.getOutputContext()).thenReturn(ctxt); WriterBasedJsonGenerator generator = new WriterBasedJsonGenerator(ctxt, 0, ObjectCodec.DEFAULT, new StringWriter()); generator._flushBuffer(); generator._flushBuffer(); generator._flushBuffer(); generator._flushBuffer(); generator.close(); }
@Test public void testClose() throws IOException { Writer w = new StringWriter(); w.writeObject("foo"); w.writeObject("bar"); w.writeObject("baz"); w.flush(); assertEquals("{\\"foo\\":\\"bar\\",\\"baz\\":\\"baz\\"}", w.toString()); w.close(); assertEquals("{\\"foo\\":\\"bar\\",\\"baz\\":\\"baz\\"}", w.toString()); w.close(); assertEquals("{\\"foo\\":\\"bar\\",\\"baz\\":\\"baz\\"}", w.toString()); }
@Test public void testAutoCloseTarget() throws IOException { IIOContext ctxt = new IIOContext() { @Override public boolean isResourceManaged() { return true; } @Override public boolean isResourceManaged() { return true; } }; Writer w = new StringWriter(); SimpleIOContext ctxt2 = new SimpleIOContext() { @Override public boolean isResourceManaged() { return true; } @Override public boolean isResourceManaged() { return true; } }; ctxt2.setFeature(Feature.AUTO_CLOSE_TARGET, true); ctxt2.setFeature(Feature.FLUSH_PASSED_TO_STREAM, true); WriterBasedJsonGenerator generator = new WriterBasedJsonGenerator(ctxt2
@Test public void testClose() throws IOException { Writer w = new StringWriter(); w.writeObject("foo"); w.writeObject("bar"); w.writeObject("baz"); w.close(); assertEquals("{\\"foo\\":\\"bar\\",\\"baz\\":\\"baz\\"}", w.toString()); w.close(); assertEquals("{\\"foo\\":\\"bar\\",\\"baz\\":\\"baz\\"}", w.toString()); w.close(); assertEquals("{\\"foo\\":\\"bar\\",\\"baz\\":\\"baz\\"}", w.toString()); }
@Test public void testWriteFieldName() throws IOException { StringWriter w = new StringWriter(); IIOContext ctxt = Mockito.mock(IIOContext.class); Mockito.when(ctxt.inArray()).thenReturn(true); Mockito.when(ctxt.inObject()).thenReturn(true); Mockito.when(ctxt.getOutputContext()).thenReturn(ctxt); Mockito.when(ctxt.inObject()).thenReturn(false); WriterBasedJsonGenerator generator = new WriterBasedJsonGenerator(ctxt, 0, ObjectCodec.DEFAULT, w); generator.writeFieldName("foo"); generator.writeFieldName("bar"); generator.writeFieldName("baz"); generator.writeFieldName("
@Test public void testFlush() throws IOException { Writer w = new StringWriter(); w.write("foo"); w.write("bar"); w.write("baz"); w.flush(); assertEquals("{\\"foo\\":\\"bar\\",\\"baz\\":\\"baz\\"}", w.toString()); w.close(); assertEquals("{\\"foo\\":\\"bar\\",\\"baz\\":\\"baz\\"}", w.toString()); w.close(); assertEquals("{\\"foo\\":\\"bar\\",\\"baz\\":\\"baz\\"}", w.toString()); }
@Test public void testReleaseBuffers() throws IOException { IIOContext ctxt = Mockito.mock(IIOContext.class); Mockito.when(ctxt.inArray()).thenReturn(true); Mockito.when(ctxt.inObject()).thenReturn(true); Mockito.when(ctxt.isResourceManaged()).thenReturn(true); WriterBasedJsonGenerator generator = new WriterBasedJsonGenerator(ctxt, 0, ObjectCodec.DEFAULT, null); generator.setOutputContext(ctxt); generator._releaseBuffers(); generator.close(); }
@Test public void test_releaseBuffers() throws IOException, JsonGenerationException { final IIOContext ctxt = Mockito.mock(IIOContext.class); final Writer w = Mockito.mock(Writer.class); Mockito.when(ctxt.getOutputBuffer()).thenReturn(null); Mockito.doAnswer(new Answer<Void>() { @Override public Void answer(InvocationOnMock invocation) throws Throwable { ObjectCodec codec = (ObjectCodec) invocation.getArguments()[0]; WriterBasedJsonGenerator generator = new WriterBasedJsonGenerator(ctxt, 0, codec, w); return null; } }).when(ctxt).releaseConcatBuffer(Mockito.any(char[].
@Test public void test_releaseBuffers() throws IOException { StringWriter w = new StringWriter(); IIOContext ctxt = Mockito.mock(IIOContext.class); Mockito.when(ctxt.getOutputBuffer()).thenReturn(null); WriterBasedJsonGenerator generator = new WriterBasedJsonGenerator(ctxt, 0, ObjectCodec.DEFAULT_JSON_CODEC, w); generator._releaseBuffers(); assertEquals("", w.toString()); }
@Test public void test_releaseBuffers() throws IOException, JsonGenerationException { final IIOContext ctxt = Mockito.mock(IIOContext.class); final Writer w = Mockito.mock(Writer.class); Mockito.doAnswer(new Answer<Void>() { @Override public Void answer(InvocationOnMock invocation) throws Throwable { ((char[]) invocation.getArguments()[0]).release(); return null; } }).when(ctxt).releaseConcatBuffer(Mockito.any(char[].class)); WriterBasedJsonGenerator generator = new WriterBasedJsonGenerator(ctxt, 0, ObjectCodec.DEFAULT_JSON_CODEC, w); generator._releaseBuffers(); generator.write
@Test public void test_releaseBuffers() throws IOException, JsonGenerationException { final IIOContext ctxt = Mockito.mock(IIOContext.class); final Writer w = Mockito.mock(Writer.class); Mockito.doAnswer(new Answer<Void>() { @Override public Void answer(InvocationOnMock invocation) throws Throwable { ((WriterBasedJsonGenerator) invocation.getArguments()[0]).releaseBuffers(); return null; } }).when(ctxt).releaseConcatBuffer(Mockito.any(char[].class)); WriterBasedJsonGenerator generator = new WriterBasedJsonGenerator(ctxt, 0, ObjectCodec.DEFAULT_JSON_CODEC, w); generator._releaseBuffers();
@Test public void test_releaseBuffers() throws IOException, JsonGenerationException { final IIOContext ctxt = Mockito.mock(IIOContext.class); Mockito.when(ctxt.releaseConcatBuffer(Mockito.any(char[].class))).thenAnswer(new Answer<Void>() { @Override public Void answer(InvocationOnMock invocation) throws Throwable { char[] buf = (char[]) invocation.getArguments()[0]; assertEquals(0, buf.length); return null; } }); WriterBasedJsonGenerator generator = new WriterBasedJsonGenerator(ctxt, 0, ObjectCodec.DEFAULT, new StringWriter()); generator._releaseBuffers(); generator._getOutputTarget(); generator._getOutput
@Test public void test_prependOrWriteCharacterEscape() throws Exception { String str = _prependOrWriteCharacterEscape(CharacterEscapes.ESCAPE_CUSTOM, \'\\\\\'); assertEquals("\'\\\\\'", str); str = _prependOrWriteCharacterEscape(CharacterEscapes.ESCAPE_CUSTOM, \'\\\\\'); assertEquals("\'\\\\\'", str); str = _prependOrWriteCharacterEscape(CharacterEscapes.ESCAPE_CUSTOM, \'\\\\\'); assertEquals("\'\\\\\'", str); str = _prependOrWriteCharacterEscape(CharacterEscapes.ESCAPE_CUSTOM, \'\\\\\'); assertEquals("\'\\\\\'", str); str = _prependOrWriteCharacterEscape(CharacterEscapes.ESCAPE_CUSTOM,
@Test public void test_prependOrWriteCharacterEscape() throws Exception { String str = _prependOrWriteCharacterEscape(CharacterEscapes.ESCAPE_CUSTOM, \'\\\\\'); assertEquals("\'\\\\\'", str); str = _prependOrWriteCharacterEscape(CharacterEscapes.ESCAPE_CUSTOM, \'\\\\\'); assertEquals("\'\\\\\'", str); str = _prependOrWriteCharacterEscape(CharacterEscapes.ESCAPE_CUSTOM, \'\\\\\'); assertEquals("\'\\\\\'", str); str = _prependOrWriteCharacterEscape(CharacterEscapes.ESCAPE_CUSTOM, \'\\\\\'); assertEquals("\'\\\\\'", str); str = _prependOrWriteCharacterEscape(CharacterEscapes.ESCAPE_CUSTOM,
@Test public void test_flushBuffer() throws IOException { _flushBuffer(); assertEquals("{\\"a\\":\\"b\\"}", _writer.toString()); _flushBuffer(); assertEquals("{\\"a\\":\\"b\\"}", _writer.toString()); _flushBuffer(); assertEquals("{\\"a\\":\\"b\\"}", _writer.toString()); _flushBuffer(); assertEquals("{\\"a\\":\\"b\\"}", _writer.toString()); _flushBuffer(); assertEquals("{\\"a\\":\\"b\\"}", _writer.toString()); _flushBuffer(); assertEquals("{\\"a\\":\\"b\\"}", _writer.toString()); _flushBuffer();
@Test public void test_flushBuffer() throws IOException { StringWriter w = new StringWriter(); WriterBasedJsonGenerator generator = new WriterBasedJsonGenerator(new DefaultIOContext(), ObjectCodec.DEFAULT, w); generator._flushBuffer(); assertEquals("{\\"foo\\":\\"bar\\"}", w.toString()); }
@Test public void test_flushBuffer() throws IOException { StringWriter w = new StringWriter(); WriterBasedJsonGenerator generator = new WriterBasedJsonGenerator(new DefaultIOContext(), ObjectCodec.DEFAULT, w); generator._flushBuffer(); assertEquals("", w.toString()); }
@Test public void testGetInputCodeUtf8() { assertArrayEquals(new int[] { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
@Test public void testGetInputCodeComment() { assertArrayEquals(new int[]{\'#\', \'#\', \'#\', \'#\', \'#\', \'#\', \'#\', \'#\', \'#\', \'#\', \'#\', \'#\', \'#\', \'#\', \'#\', \'#\', \'#\', \'#\', \'#\', \'#\', \'#\', \'#\', \'#\', \'#\', \'#\', \'#\', \'#\', \'#\', \'#\', \'#\', \'#\', \'#\', \'#\', \'#\', \'#\', \'#\', \'#\', \'#\', \'#\', \'#\', \'#\', \'#\', \'#\',
@Test public void testCharToHex() { assertEquals(0x00, charToHex(0x00)); assertEquals(0x01, charToHex(0x01)); assertEquals(0x02, charToHex(0x02)); assertEquals(0x03, charToHex(0x03)); assertEquals(0x04, charToHex(0x04)); assertEquals(0x05, charToHex(0x05)); assertEquals(0x06, charToHex(0x06)); assertEquals(0x07, charToHex(0x07)); assertEquals(0x08, charToHex(0x08)); assertEquals(
@Test public void testCharToHex() { assertEquals(0, charToHex(0)); assertEquals(1, charToHex(1)); assertEquals(2, charToHex(2)); assertEquals(3, charToHex(3)); assertEquals(4, charToHex(4)); assertEquals(5, charToHex(5)); assertEquals(6, charToHex(6)); assertEquals(7, charToHex(7)); assertEquals(8, charToHex(8)); assertEquals(9, charToHex(9)); assertEquals(10, charToHex(10)); assertEquals(11, charToHex(11)); assertEquals(12, char
@Test public void testQuoteAsString() { String text = "Hello, world!"; String expected = "Hello, world!"; String actual = new String(testee.quoteAsString(text)); assertEquals(expected, actual); text = "Hello, world!"; expected = new String(testee.quoteAsString(text)); assertEquals(expected, actual); text = "Hello, world!"; expected = new String(testee.quoteAsString(text)); assertEquals(expected, actual); text = "Hello, world!"; expected = new String(testee.quoteAsString(text)); assertEquals(expected, actual); text = "Hello, world!"; expected = new String(testee.
@Test public void testQuoteAsString() { final Charset charset = Charset.forName("UTF-8"); final Charset charset1 = Charset.forName("UTF-16"); final Charset charset2 = Charset.forName("UTF-16"); final Charset charset3 = Charset.forName("UTF-16"); final Charset charset4 = Charset.forName("UTF-16"); final Charset charset5 = Charset.forName("UTF-16"); final Charset charset6 = Charset.forName("UTF-16"); final Charset charset7 = Charset.forName("UTF-16"); final Charset charset8 = Charset.forName("UTF-16"); final Charset charset9 = Charset.forName("UTF-16");
@Test public void testQuoteAsString() { final Charset charset = Charset.forName("UTF-8"); final Charset charset1 = Charset.forName("UTF-16"); final Charset charset2 = Charset.forName("UTF-16"); final Charset charset3 = Charset.forName("UTF-16"); final Charset charset4 = Charset.forName("UTF-16"); final Charset charset5 = Charset.forName("UTF-16"); final Charset charset6 = Charset.forName("UTF-16"); final Charset charset7 = Charset.forName("UTF-16"); final Charset charset8 = Charset.forName("UTF-16"); final Charset charset9 = Charset.forName("UTF-16");
@Test public void test() { final Line line = new Line(); assertEquals("", new String(line.quoteAsString("a"))); assertEquals("a", new String(line.quoteAsString("a"))); assertEquals("a", new String(line.quoteAsString("a"))); assertEquals("a", new String(line.quoteAsString("a"))); assertEquals("a", new String(line.quoteAsString("a"))); assertEquals("a", new String(line.quoteAsString("a"))); assertEquals("a", new String(line.quoteAsString("a"))); assertEquals("a", new String(line.quoteAsString("a"))
@Test public void testQuoteAsUTF8() throws Exception { String text = "Hello, world!"; byte[] bytes = new ByteBuilder().append(text).append(\'\\0\').append(\'\\0\').append(\'\\0\').append(\'\\0\').append(\'\\0\').append(\'\\0\').append(\'\\0\').append(\'\\0\').append(\'\\0\').append(\'\\0\').append(\'\\0\').append(\'\\0\').append(\'\\0\').append(\'\\0\').append(\'\\0\').append(\'\\0\').append(\'\\0\').append(\'\\0\').append(\'\\0\').
@Test public void testQuoteAsUTF8() throws Exception { final ByteArrayBuilder byteBuilder = new ByteArrayBuilder(null); byteBuilder.append(\'\\0\'); byteBuilder.append(\'\\0\'); byteBuilder.append(\'\\0\'); byteBuilder.append(\'\\0\'); byteBuilder.append(\'\\0\'); byteBuilder.append(\'\\0\'); byteBuilder.append(\'\\0\'); byteBuilder.append(\'\\0\'); byteBuilder.append(\'\\0\'); byteBuilder.append(\'\\0\'); byteBuilder.append(\'\\0\'); byteBuilder.append(\'\\0\'); byteBuilder.append(\'\\0\'); byteBuilder.append(\'\\
@Test public void testQuoteAsUTF8() throws Exception { final String text = "this is a test"; final byte[] bytes = text.quoteAsUTF8(text); Assert.assertEquals(1, bytes.length); Assert.assertEquals("this is a test", new String(bytes, StandardCharsets.UTF_8)); final byte[] bytes2 = text.quoteAsUTF8(text2); Assert.assertEquals(2, bytes2.length); Assert.assertEquals("this is a test", new String(bytes2, StandardCharsets.UTF_8)); final byte[] bytes3 = text2.quoteAsUTF8(text3); Assert.assertEquals(3, bytes3.length);
@Test public void testQuoteAsUTF8() throws Exception { String text = "test\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t
@Test public void testQuoteAsUTF8() throws Exception { String text = "test\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t
@Test public void testQuoteAsUTF8() throws Exception { String text = "this is a test"; String expected = "this is a test"; String actual = new String(test.quoteAsUTF8(text)); assertEquals(expected, actual); text = "this is a test"; expected = "this is a test"; actual = new String(test.quoteAsUTF8(text)); assertEquals(expected, actual); text = "this is a test"; expected = "this is a test"; actual = new String(test.quoteAsUTF8(text)); assertEquals(expected, actual); text = "this is a test"; expected = "this is a test"; actual = new String(
@Test public void testQuoteAsUTF8() throws Exception { String text = "this is a test"; String expected = "this is a test"; String actual = new String(test.quoteAsUTF8(text)); assertEquals(expected, actual); text = "this is a test"; expected = "this is a test"; actual = new String(test.quoteAsUTF8(text)); assertEquals(expected, actual); text = "this is a test"; expected = "this is a test"; actual = new String(test.quoteAsUTF8(text)); assertEquals(expected, actual); text = "this is a test"; expected = "this is a test"; actual = new String(
@Test public void testQuoteAsUTF8() throws Exception { String text = "this is a test"; String expected = "this is a test"; String actual = new String(test.quoteAsUTF8(text)); Assert.assertEquals(expected, actual); text = "this is a test"; expected = "this is a test"; actual = new String(test.quoteAsUTF8(text)); Assert.assertEquals(expected, actual); text = "this is a test"; expected = "this is a test"; actual = new String(test.quoteAsUTF8(text)); Assert.assertEquals(expected, actual); text = "this is a test"; expected = "this is a test
@Test public void testQuoteAsUTF8() throws Exception { final String text = "a b c"; final byte[] bytes = text.quoteAsUTF8(text); Assert.assertTrue(Arrays.equals(bytes, new byte[] { \'a\', \'b\', \'c\' })); final byte[] bytes2 = text.quoteAsUTF8(text2); Assert.assertTrue(Arrays.equals(bytes2, new byte[] { \'a\', \'b\', \'c\' })); final byte[] bytes3 = text2.quoteAsUTF8(text3); Assert.assertTrue(Arrays.equals(bytes3, new byte[] { \'a\', \'b\', \'c\' }
@Test public void testQuoteAsUTF8() throws Exception { final String text = "a b c"; final byte[] bytes = text.quoteAsUTF8(text); assertTrue(Arrays.equals(bytes, new byte[] { \'a\', \'b\', \'c\' })); final byte[] bytes2 = text.quoteAsUTF8(text2); assertTrue(Arrays.equals(bytes2, new byte[] { \'a\', \'b\', \'c\' })); final byte[] bytes3 = text2.quoteAsUTF8(text3); assertTrue(Arrays.equals(bytes3, new byte[] { \'a\', \'b\', \'c\' })); final byte[] bytes4
@Test public void testQuoteAsUTF8() throws Exception { final String text = "a b c"; final byte[] bytes = text.quoteAsUTF8(text); Assert.assertTrue(Arrays.equals(bytes, new byte[] { \'a\', \'b\', \'c\' })); final byte[] bytes2 = text.quoteAsUTF8(text2); Assert.assertTrue(Arrays.equals(bytes2, new byte[] { \'a\', \'b\', \'c\' })); final byte[] bytes3 = text2.quoteAsUTF8(text3); Assert.assertTrue(Arrays.equals(bytes3, new byte[] { \'a\', \'b\', \'c\' }
@Test public void testQuoteAsUTF8() throws Exception { final String text = "This is a test"; final byte[] bytes = text.quoteAsUTF8(text); Assert.assertEquals("This is a test", new String(bytes, StandardCharsets.UTF_8)); final byte[] bytes2 = text.quoteAsUTF8(text2); Assert.assertEquals("This is a test", new String(bytes2, StandardCharsets.UTF_8)); final byte[] bytes3 = text2.quoteAsUTF8(text3); Assert.assertEquals("This is a test", new String(bytes3, StandardCharsets.UTF_8)); final byte[] bytes4 = text2.quoteAsUTF8
@Test public void testQuoteAsUTF8() throws Exception { String text = "this is a test"; String expected = "this is a test"; String actual = new String(test.quoteAsUTF8(text)); Assert.assertEquals(expected, actual); text = "this is a test"; expected = "this is a test"; actual = new String(test.quoteAsUTF8(text)); Assert.assertEquals(expected, actual); text = "this is a test"; expected = "this is a test"; actual = new String(test.quoteAsUTF8(text)); Assert.assertEquals(expected, actual); text = "this is a test"; expected = "this is a test
@Test public void testQuoteAsUTF8() throws Exception { String text = "中文"; String text2 = "中文"; String text3 = "中文"; String text4 = "中文"; String text5 = "中文"; String text6 = "中文"; String text7 = "中文"; String text8 = "中文"; String text9 = "中文"; String text10 = "中文"; String text11 = "中文"; String text12 =
@Test public void testQuoteAsUTF8() throws Exception { final String text = "abcd"; final byte[] data = text.quoteAsUTF8(text); final byte[] data2 = text.quoteAsUTF8(text); final byte[] data3 = text.quoteAsUTF8(text); final byte[] data4 = text.quoteAsUTF8(text); final byte[] data5 = text.quoteAsUTF8(text); final byte[] data6 = text.quoteAsUTF8(text); final byte[] data7 = text.quoteAsUTF8(text); final byte[] data8 = text.quoteAsUTF8(text); final byte[] data9 = text.
@Test public void testQuoteAsUTF8() throws Exception { final String text = "This is a test"; final byte[] bytes = text.quoteAsUTF8(text); Assert.assertEquals("This is a test", new String(bytes)); final byte[] bytes2 = text.quoteAsUTF8(text2); Assert.assertEquals("This is a test", new String(bytes2)); final byte[] bytes3 = text2.quoteAsUTF8(text3); Assert.assertEquals("This is a test", new String(bytes3)); final byte[] bytes4 = text2.quoteAsUTF8(text4); Assert.assertEquals("This is a test", new String(bytes
@Test public void testQuoteAsUTF8() throws Exception { final String text = "abc\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n"; final String expected = "abc\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n
@Test public void testQuoteAsUTF8() throws Exception { final String text = "This is a test"; final String text2 = "This is a test2"; final String text3 = "This is a test3"; final String text4 = "This is a test4"; final String text5 = "This is a test5"; final String text6 = "This is a test6"; final String text7 = "This is a test7"; final String text8 = "This is a test8"; final String text9 = "This is a test9"; final String text10 = "This is a test10"; final String text11 = "This is a test10"; final String text12 =
@Test public void testQuoteAsUTF8() throws Exception { final String text = "This is a test"; final byte[] bytes = text.quoteAsUTF8(text); Assert.assertEquals("This is a test", new String(bytes)); final byte[] bytes2 = text.quoteAsUTF8(text2); Assert.assertEquals("This is a test", new String(bytes2)); final byte[] bytes3 = text2.quoteAsUTF8(text3); Assert.assertEquals("This is a test", new String(bytes3)); final byte[] bytes4 = text2.quoteAsUTF8(text4); Assert.assertEquals("This is a test", new String(bytes
@Test public void testQuoteAsUTF8() throws Exception { String text = "this is a test"; String expected = "this is a test"; String actual = new String(test.quoteAsUTF8(text)); Assert.assertEquals(expected, actual); text = "this is a test"; expected = "this is a test"; actual = new String(test.quoteAsUTF8(text)); Assert.assertEquals(expected, actual); text = "this is a test"; expected = "this is a test"; actual = new String(test.quoteAsUTF8(text)); Assert.assertEquals(expected, actual); text = "this is a test"; expected = "this is a test
@Test public void testQuoteAsUTF8() throws Exception { final String text = "hello world"; final byte[] data = text.quoteAsUTF8(text); final byte[] data2 = text.quoteAsUTF8(text); final byte[] data3 = text.quoteAsUTF8(text); final byte[] data4 = text.quoteAsUTF8(text); final byte[] data5 = text.quoteAsUTF8(text); final byte[] data6 = text.quoteAsUTF8(text); final byte[] data7 = text.quoteAsUTF8(text); final byte[] data8 = text.quoteAsUTF8(text); final byte[] data9 = text.
@Test public void testQuoteAsUTF8() throws Exception { String text = "中文"; String text2 = "中文"; String text3 = "中文"; String text4 = "中文"; String text5 = "中文"; String text6 = "中文"; String text7 = "中文"; String text8 = "中文"; String text9 = "中文"; String text10 = "中文"; String text11 = "中文"; String text12 =
@Test public void testQuoteAsUTF8() throws Exception { String text = "This is a test"; byte[] bytes = text.quoteAsUTF8(text); Assert.assertTrue(Arrays.equals(text.getBytes(Charsets.UTF_8), bytes)); text = "This is a test"; bytes = text.quoteAsUTF8(text); Assert.assertTrue(Arrays.equals(text.getBytes(Charsets.UTF_8), bytes)); text = "This is a test"; bytes = text.quoteAsUTF8(text); Assert.assertTrue(Arrays.equals(text.getBytes(Charsets.UTF_8), bytes)); text = "This is a test"; bytes
@Test public void testQuoteAsUTF8() throws Exception { String text = "This is a test"; String expected = "This is a test"; String actual = new String(test.quoteAsUTF8(text)); assertEquals(expected, actual); text = "This is a test"; expected = "This is a test"; actual = new String(test.quoteAsUTF8(text)); assertEquals(expected, actual); text = "This is a test"; expected = "This is a test"; actual = new String(test.quoteAsUTF8(text)); assertEquals(expected, actual); text = "This is a test"; expected = "This is a test"; actual = new String(
@Test public void testQuoteAsUTF8() throws Exception { String text = "this is a test"; String expected = "this is a test"; String actual = new String(test.quoteAsUTF8(text)); Assert.assertEquals(expected, actual); text = "this is a test"; expected = "this is a test"; actual = new String(test.quoteAsUTF8(text)); Assert.assertEquals(expected, actual); text = "this is a test"; expected = "this is a test"; actual = new String(test.quoteAsUTF8(text)); Assert.assertEquals(expected, actual); text = "this is a test"; expected = "this is a test
@Test public void testQuoteAsUTF8() throws Exception { String text = "hello world"; byte[] bytes = text.quoteAsUTF8(text); Assert.assertEquals("hello world", new String(bytes)); bytes = text.quoteAsUTF8(text.substring(1)); Assert.assertEquals("hello world", new String(bytes)); bytes = text.quoteAsUTF8(text.substring(2)); Assert.assertEquals("hello world", new String(bytes)); bytes = text.quoteAsUTF8(text.substring(3)); Assert.assertEquals("hello world", new String(bytes)); bytes = text.quoteAsUTF8(text.substring(4)); Assert.assert
@Test public void testQuoteAsUTF8() throws Exception { final String text = "a b c"; final byte[] bytes = text.quoteAsUTF8(text); assertTrue(Arrays.equals(bytes, new byte[] { \'a\', \'b\', \'c\' })); final byte[] bytes2 = text.quoteAsUTF8(text2); assertTrue(Arrays.equals(bytes2, new byte[] { \'a\', \'b\', \'c\' })); final byte[] bytes3 = text2.quoteAsUTF8(text3); assertTrue(Arrays.equals(bytes3, new byte[] { \'a\', \'b\', \'c\' })); final byte[] bytes4
@Test public void testQuoteAsUTF8() throws Exception { assertEquals("", new String(test.quoteAsUTF8(""))); assertEquals("a", new String(test.quoteAsUTF8("a"))); assertEquals("ab", new String(test.quoteAsUTF8("ab"))); assertEquals("ab", new String(test.quoteAsUTF8("ab"))); assertEquals("ab", new String(test.quoteAsUTF8("ab"))); assertEquals("ab", new String(test.quoteAsUTF8("ab"))); assertEquals("ab", new String(test.quoteAsUTF8("ab"))); assertEquals("ab
@Test public void testQuoteAsUTF8() throws Exception { final String text = "This is a test"; final byte[] data = text.quoteAsUTF8(text); final byte[] data2 = text.quoteAsUTF8(text2); final byte[] data3 = text2.quoteAsUTF8(text3); final byte[] data4 = text2.quoteAsUTF8(text4); final byte[] data5 = text2.quoteAsUTF8(text5); final byte[] data6 = text2.quoteAsUTF8(text6); final byte[] data7 = text2.quoteAsUTF8(text7); final byte[] data8 = text2.quote
@Test public void testQuoteAsUTF8() throws Exception { String text = "中文"; String text2 = "中文"; String text3 = "中文"; String text4 = "中文"; String text5 = "中文"; String text6 = "中文"; String text7 = "中文"; String text8 = "中文"; String text9 = "中文"; String text10 = "中文"; String text11 = "中文"; String text12 =
@Test public void testQuoteAsUTF8() { Assert.assertEquals("", new String(test.quoteAsUTF8(""))); Assert.assertEquals("a", new String(test.quoteAsUTF8("a"))); Assert.assertEquals("ab", new String(test.quoteAsUTF8("ab"))); Assert.assertEquals("ab", new String(test.quoteAsUTF8("ab"))); Assert.assertEquals("ab", new String(test.quoteAsUTF8("ab"))); Assert.assertEquals("ab", new String(test.quoteAsUTF8("ab"))); Assert.assertEquals("ab", new String(test.quote
@Test public void testQuoteAsUTF8() throws Exception { final String text = "This is a test"; final byte[] data = text.quoteAsUTF8(text); final byte[] data2 = text.quoteAsUTF8(text2); final byte[] data3 = text2.quoteAsUTF8(text3); final byte[] data4 = text2.quoteAsUTF8(text4); final byte[] data5 = text2.quoteAsUTF8(text5); final byte[] data6 = text2.quoteAsUTF8(text6); final byte[] data7 = text2.quoteAsUTF8(text7); final byte[] data8 = text2.quote
@Test public void testQuoteAsUTF8() throws Exception { final String text = "This is a test"; final byte[] bytes = text.quoteAsUTF8(text); Assert.assertEquals("This is a test", new String(bytes)); final byte[] bytes2 = text.quoteAsUTF8(text2); Assert.assertEquals("This is a test", new String(bytes2)); final byte[] bytes3 = text2.quoteAsUTF8(text3); Assert.assertEquals("This is a test", new String(bytes3)); final byte[] bytes4 = text2.quoteAsUTF8(text4); Assert.assertEquals("This is a test", new String(bytes
@Test public void testQuoteAsUTF8() throws Exception { String text = "this is a test"; String expected = "this is a test"; String actual = new String(test.quoteAsUTF8(text)); Assert.assertEquals(expected, actual); text = "this is a test"; expected = "this is a test"; actual = new String(test.quoteAsUTF8(text)); Assert.assertEquals(expected, actual); text = "this is a test"; expected = "this is a test"; actual = new String(test.quoteAsUTF8(text)); Assert.assertEquals(expected, actual); text = "this is a test"; expected = "this is a test
@Test public void testQuoteAsUTF8() throws Exception { final String text = "hello world"; final byte[] data = text.quoteAsUTF8(text); final byte[] data2 = text.quoteAsUTF8(text); final byte[] data3 = text.quoteAsUTF8(text); final byte[] data4 = text.quoteAsUTF8(text); final byte[] data5 = text.quoteAsUTF8(text); final byte[] data6 = text.quoteAsUTF8(text); final byte[] data7 = text.quoteAsUTF8(text); final byte[] data8 = text.quoteAsUTF8(text); final byte[] data9 = text.
@Test public void testQuoteAsUTF8() throws Exception { final String text = "This is a test"; final byte[] data = text.quoteAsUTF8(text); final byte[] data2 = text.quoteAsUTF8(text); final byte[] data3 = text.quoteAsUTF8(text); final byte[] data4 = text.quoteAsUTF8(text); final byte[] data5 = text.quoteAsUTF8(text); final byte[] data6 = text.quoteAsUTF8(text); final byte[] data7 = text.quoteAsUTF8(text); final byte[] data8 = text.quoteAsUTF8(text); final byte[] data9 =
@Test public void testQuoteAsUTF8() throws Exception { String text = "中文"; String text2 = "中文"; String text3 = "中文"; String text4 = "中文"; String text5 = "中文"; String text6 = "中文"; String text7 = "中文"; String text8 = "中文"; String text9 = "中文"; String text10 = "中文"; String text11 = "中文"; String text12 =
@Test public void testQuoteAsUTF8() throws Exception { final String text = "This is a test"; final byte[] bytes = text.quoteAsUTF8(text); Assert.assertEquals("This is a test", new String(bytes)); final byte[] bytes2 = text.quoteAsUTF8(text2); Assert.assertEquals("This is a test", new String(bytes2)); final byte[] bytes3 = text2.quoteAsUTF8(text3); Assert.assertEquals("This is a test", new String(bytes3)); final byte[] bytes4 = text2.quoteAsUTF8(text4); Assert.assertEquals("This is a test", new String(bytes
@Test public void testQuoteAsUTF8() throws Exception { String text = "this is a test"; String expected = "this is a test"; String actual = new String(test.quoteAsUTF8(text)); Assert.assertEquals(expected, actual); text = "this is a test"; expected = "this is a test"; actual = new String(test.quoteAsUTF8(text)); Assert.assertEquals(expected, actual); text = "this is a test"; expected = "this is a test"; actual = new String(test.quoteAsUTF8(text)); Assert.assertEquals(expected, actual); text = "this is a test"; expected = "this is a test
@Test public void testQuoteAsUTF8() throws Exception { final String text = "hello world"; final byte[] data = text.quoteAsUTF8(text); final byte[] data2 = text.quoteAsUTF8(text); final byte[] data3 = text.quoteAsUTF8(text); final byte[] data4 = text.quoteAsUTF8(text); final byte[] data5 = text.quoteAsUTF8(text); final byte[] data6 = text.quoteAsUTF8(text); final byte[] data7 = text.quoteAsUTF8(text); final byte[] data8 = text.quoteAsUTF8(text); final byte[] data9 = text.
@Test public void testQuoteAsUTF8() throws Exception { final String text = "abc\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n"; final String expected = "abc\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n
@Test public void testQuoteAsUTF8() throws Exception { final String text = "Hello, world!"; final byte[] bytes = classUnderTest.quoteAsUTF8(text); Assert.assertEquals(1, bytes.length); Assert.assertEquals("Hello, world!", new String(bytes, StandardCharsets.UTF_8)); bytes = classUnderTest.quoteAsUTF8(text); Assert.assertEquals(1, bytes.length); Assert.assertEquals("Hello, world!", new String(bytes, StandardCharsets.UTF_8)); bytes = classUnderTest.quoteAsUTF8(text); Assert.assertEquals(1, bytes.length); Assert.assertEquals("Hello, world
@Test public void test_append_byte_escape() { String expected = "foo\\n" + "bar\\n" + "baz\\n" + "zoo\\n" + "zoo\\n" + "zoo\\n" + "zoo\\n" + "zoo\\n" + "zoo\\n" + "zoo\\n" + "zoo\\n" + "zoo\\n" + "zoo\\n" + "zoo\\n" + "zoo\\n" + "zoo\\n" + "zoo\\n" + "zoo\\n" + "zoo\\n" + "
@Test public void test_append_byte_escape() { final ByteArrayBuilder b1 = new ByteArrayBuilder(); final ByteArrayBuilder b2 = new ByteArrayBuilder(); final int ptr = 0; b1.setCurrentSegmentLength(ptr); b1.append(\'a\'); b1.append(\'b\'); b1.append(\'c\'); b2.append(\'a\'); b2.append(\'b\'); b2.append(\'c\'); b2.append(\'a\'); b2.append(\'b\'); b2.append(\'c\'); b2.append(\'a\'); b2.append(\'a\'); b2.append(\'b\'); b2.
@Test public void test_append_byte_escape() { final ByteArrayBuilder b1 = new ByteArrayBuilder(); final ByteArrayBuilder b2 = new ByteArrayBuilder(); final ByteArrayBuilder b3 = new ByteArrayBuilder(); b1.append(JsonStringEncoder.INT_BACKSLASH); b1.append(JsonStringEncoder.INT_U); b1.append(JsonStringEncoder.INT_0); b1.append(JsonStringEncoder.INT_0); b2.append(JsonStringEncoder.INT_0); b2.append(JsonStringEncoder.INT_0); b3.append(JsonStringEncoder.INT_0); b3.append(JsonStringEncoder.INT_0);
@Test public void test_append_byte_escape() { JsonStringEncoder encoder = new JsonStringEncoder(); ByteArrayBuilder b = new ByteArrayBuilder(); int ptr = 0; int actual = encoder._appendByteEscape(-1, -1, b, ptr); Assert.assertEquals(0, actual); ptr++; actual = encoder._appendByteEscape(0, -1, b, ptr); Assert.assertEquals(0, actual); ptr++; actual = encoder._appendByteEscape(-1, -1, b, ptr); Assert.assertEquals(0, actual); ptr++; actual = encoder._appendByteEscape(-1, -1, b, ptr); Assert.assertEquals(0,
@Test public void test_appendByteEscape() { final ByteArrayBuilder b1 = new ByteArrayBuilder(); final ByteArrayBuilder b2 = new ByteArrayBuilder(); try { b1.append(0); b2.append(0); b1.append(1); b2.append(2); b2.append(3); b2.append(4); b2.append(5); b2.append(6); b2.append(7); b2.append(8); b2.append(9); b2.append(10); b2.append(11); b2.append(12); b2.append(13); b2.append(14); b2.
@Test public void test_append_byte_escape() { String expected = "[\\n" + " {\\n" + " \'\\n" + " \'\\n" + " \'\\n" + " \'\\n" + " \'\\n" + " \'\\n" + " \'\\n" + " \'\\n" + " \'\\n" + " \'\\n" + " \'\\n" + " \'\\n" + " \'\\n" + " \'\\n" + " \'\\n" + " \'\\n" + " \'\\n" + " \'\\n" + " \'\\n" + " \'\\n" + "
@Test public void test_append_byte_escape() { ByteArrayBuilder b1 = new ByteArrayBuilder(); b1.append(\'\\0\'); b1.append(\'\\0\'); b1.append(\'\\0\'); b1.append(\'\\0\'); ByteArrayBuilder b2 = new ByteArrayBuilder(); b2.append(\'\\0\'); b2.append(\'\\0\'); b2.append(\'\\0\'); b2.append(\'\\0\'); b2.append(\'\\0\'); b2.append(\'\\0\'); b2.append(\'\\0\'); b2.append(\'\\0\'); b2.append(\'\\0\');
@Test public void test_append_byte_escape() { ByteArrayBuilder b1 = new ByteArrayBuilder(); b1.append(\'\\0\'); b1.append(\'\\0\'); b1.append(\'\\0\'); b1.append(\'\\0\'); ByteArrayBuilder b2 = new ByteArrayBuilder(); b2.append(\'\\0\'); b2.append(\'\\0\'); b2.append(\'\\0\'); b2.append(\'\\0\'); b2.append(\'\\0\'); b2.append(\'\\0\'); b2.append(\'\\0\'); b2.append(\'\\0\'); b2.append(\'\\0\');
@Test public void test_appendByteEscape() { final ByteArrayBuilder b1 = new ByteArrayBuilder(); final ByteArrayBuilder b2 = new ByteArrayBuilder(); final ByteArrayBuilder b3 = new ByteArrayBuilder(); b1.append(JsonStringEncoder.HEX_BYTES[0]).append(JsonStringEncoder.HEX_BYTES[1]).append(JsonStringEncoder.HEX_BYTES[2]).append(JsonStringEncoder.HEX_BYTES[3]).append(JsonStringEncoder.HEX_BYTES[4]).append(JsonStringEncoder.HEX_BYTES[5]).append(JsonStringEncoder.HEX_BYTES[6]).append(JsonStringEncoder.HEX_BYTES[7]).
@Test public void test_append_byte_escape() { final ByteArrayBuilder b1 = new ByteArrayBuilder(); b1.append(JsonStringEncoder.HEX_BYTES[0]).append(JsonStringEncoder.HEX_BYTES[1]).append(JsonStringEncoder.HEX_BYTES[2]).append(JsonStringEncoder.HEX_BYTES[3]).append(JsonStringEncoder.HEX_BYTES[4]).append(JsonStringEncoder.HEX_BYTES[5]).append(JsonStringEncoder.HEX_BYTES[6]).append(JsonStringEncoder.HEX_BYTES[7]).append(JsonStringEncoder.HEX_BYTES[8]).append(JsonStringEncoder
@Test public void test_append_byte_escape() { ByteArrayBuilder b1 = new ByteArrayBuilder(); b1.append(\'\\0\'); b1.append(\'\\0\'); b1.append(\'\\0\'); b1.append(\'\\0\'); ByteArrayBuilder b2 = new ByteArrayBuilder(); b2.append(\'\\0\'); b2.append(\'\\0\'); b2.append(\'\\0\'); b2.append(\'\\0\'); b2.append(\'\\0\'); b2.append(\'\\0\'); b2.append(\'\\0\'); b2.append(\'\\0\'); b2.append(\'\\0\');
@Test public void test_append_byte_escape() { final ByteArrayBuilder b1 = new ByteArrayBuilder(); b1.append(\'a\'); b1.append(\'b\'); b1.append(\'c\'); b1.append(\'d\'); b1.append(\'e\'); final ByteArrayBuilder b2 = new ByteArrayBuilder(); b2.append(\'a\'); b2.append(\'b\'); b2.append(\'c\'); b2.append(\'d\'); b2.append(\'e\'); final ByteArrayBuilder b3 = new ByteArrayBuilder(); b3.append(\'a\'); b3.append(\'b\'); b3.append(\'c\'); b
@Test public void testHasCurrentToken() throws IOException, JsonParseException { assertFalse(parser.hasCurrentToken()); parser.nextToken(); assertTrue(parser.hasCurrentToken()); assertEquals(JsonToken.VALUE_NULL, parser.getCurrentToken()); assertFalse(parser.hasCurrentToken()); parser.nextToken(); assertTrue(parser.hasCurrentToken()); assertEquals(JsonToken.VALUE_NULL, parser.getCurrentToken()); assertFalse(parser.hasCurrentToken()); }
@Test public void testHasCurrentToken() throws IOException, JsonParseException { assertFalse(parser._hasCurrentToken()); assertTrue(parser._hasCurrentToken()); assertEquals(JsonToken.VALUE_STRING, parser._getCurrentToken()); assertTrue(parser._hasCurrentToken()); assertEquals(JsonToken.VALUE_STRING, parser._getCurrentToken()); assertTrue(parser._hasCurrentToken()); assertEquals(JsonToken.VALUE_NUMBER, parser._getCurrentToken()); assertTrue(parser._hasCurrentToken()); assertEquals(JsonToken.VALUE_NUMBER, parser._getCurrentToken()); assertTrue(parser._hasCurrentToken()); assertEquals(JsonToken.VALUE_NUMBER, parser._getCurrentToken
@Test public void testClearCurrentToken() throws IOException, JsonParseException { ParserMinimalBase parser = new ParserMinimalBaseImpl(); Field field = parser.getClass().getDeclaredField("_curToken"); field.setAccessible(true); field.set(parser, token); parser.clearCurrentToken(); assertNull(parser.getCurrentToken()); field.set(parser, null); parser.clearCurrentToken(); assertNull(parser.getLastClearedToken()); field.set(parser, token); parser.clearCurrentToken(); assertNull(parser.getLastClearedToken()); field.set(parser, token); parser.clearCurrentToken(); assertNull(parser.getLastClearedToken
@Test public void testClearCurrentToken() throws IOException, JsonParseException { ParserMinimalBase f = new ParserMinimalBaseImpl(); Field f1 = f.getClass().getDeclaredField("_currToken"); f1.setAccessible(true); f1.set(f, JsonToken.START_OBJECT); assertEquals(JsonToken.VALUE_NULL, f1.getCurrentToken()); f1.clearCurrentToken(); assertNull(f1.getCurrentToken()); assertEquals(JsonToken.VALUE_NULL, f1.getCurrentToken()); f1.clearCurrentToken(); assertNull(f1.getCurrentToken()); assertEquals(JsonToken.VALUE_NULL, f1.get
@Test public void testClearCurrentToken() throws IOException, JsonParseException { ParserMinimalBase f = new ParserMinimalBaseImpl(); Field f1 = f.getClass().getDeclaredField("currentToken"); f1.setAccessible(true); Field f2 = f.getClass().getDeclaredField("lastClearedToken"); f2.setAccessible(true); assertNull(f2.get(f1)); assertNull(f2.get(f2)); f2.clearCurrentToken(); assertNull(f2.get(f1)); assertNull(f2.get(f2)); f2.clearCurrentToken(); assertNull(f2.get(f1)); assert
@Test public void testClearCurrentToken() throws IOException, JsonParseException { ParserMinimalBase f = new ParserMinimalBaseImpl(); Field f1 = f.getClass().getDeclaredField("currentToken"); f1.setAccessible(true); Field f2 = f.getClass().getDeclaredField("lastClearedToken"); f2.setAccessible(true); assertNull(f2.get(f1)); assertNull(f2.get(f2)); f1.clearCurrentToken(); assertNull(f2.get(f1)); assertNull(f2.get(f2)); f2.clearCurrentToken(); assertNull(f2.get(f1)); assert
@Test public void testReportUnexpectedChar() throws IOException, JsonParseException { MatrixCursor cursor = new MatrixCursor(new String[]{"foo", "bar"}); cursor.addRow(new Object[]{"foo", "bar"}); cursor.addRow(new Object[]{"foo", "bar"}); cursor.addRow(new Object[]{"foo", "bar"}); List<String> expected = new ArrayList<String>(); expected.add("foo"); expected.add("bar"); expected.add("foo"); expected.add("bar"); expected.add("foo"); expected.add("bar"); List<String> actual = new ArrayList<String>(); for (int i = 0
@Test public void testUnexpectedChar() throws IOException, JsonParseException { ParserMinimalBase parser = new ParserMinimalBase() { @Override public int getLength() { return 0; } @Override public int getTextLength() { return 0; } @Override public int getTextLength() { return 0; } @Override public JsonToken nextToken() throws IOException, JsonParseException { return null; } }; List<JsonToken> tokens = new ArrayList<JsonToken>(); for (int i = 0; i < 10; i++) { tokens.add(parser._nextToken()); } for (int i = 0; i < 10; i++) { tokens.add(parser._nextToken()); } for (int i =
@Test public void testReportUnexpectedChar() throws IOException, JsonParseException { ParserMinimalBase parser = new ParserMinimalBase() { @Override public int getLength() { return 0; } @Override public char[] getTextCharacters() { return new char[0]; } @Override public int getTextLength() { return 0; } @Override public JsonToken nextToken() throws IOException, JsonParseException { return null; } @Override public JsonToken nextToken() throws IOException, JsonParseException { return null; } @Override public JsonToken nextToken() throws IOException, JsonParseException { return null; } @Override public int getLength() { return 0; } @Override public JsonToken nextToken() throws IOException, JsonParseException { return null; } };
@Test public void testReportUnexpectedChar() throws IOException, JsonParseException { ParserMinimalBase parser = new ParserMinimalBase() { @Override public int getLength() { return 0; } @Override public char[] getTextCharacters() { return new char[0]; } @Override public int getTextLength() { return 0; } @Override public JsonToken nextToken() throws IOException, JsonParseException { return null; } @Override public JsonToken nextToken() throws IOException, JsonParseException { return null; } @Override public JsonToken nextToken() throws IOException, JsonParseException { return null; } @Override public int getLength() { return 0; } @Override public JsonToken nextToken() throws IOException, JsonParseException { return null; } };
@Test public void testReportError() throws IOException, JsonParseException { JsonParser parser = new JsonParser(new ParserMinimalBase() { @Override public int getLength() { return 0; } @Override public int getTextLength() { return 0; } @Override public int getLength() { return 0; } @Override public JsonToken nextToken() throws IOException, JsonParseException { throw new IOException(); } @Override public JsonToken nextToken() throws IOException, JsonParseException { throw new IOException(); } @Override public JsonToken nextToken() throws IOException, JsonParseException { throw new IOException(); } @Override public int getLength() { return 0; } @Override public JsonToken nextToken() throws IOException, JsonParseException { throw new IOException(); } }); Json
@Test public void testReportInvalidEOF() throws IOException, JsonParseException { String json = "{\\"foo\\": \\"bar\\"}"; JsonParser parser = new JsonParser(new StringReader(json)); parser._reportInvalidEOF("foo"); parser._reportInvalidEOF("bar"); }
@Test public void testReportInvalidEOF() throws IOException, JsonParseException { String json = "{\\"foo\\": \\"bar\\"}"; JsonParser parser = new JsonParser(new StringReader(json)); try { parser._reportInvalidEOF("foo"); fail(); } catch (JsonParseException e) { assertEquals("Unexpected end-of-input \\"foo\\"", e.getMessage()); } }
@Test public void testThrowUnquotedSpace() throws IOException, JsonParseException { ParserMinimalBase parser = new ParserMinimalBase() { @Override public JsonToken nextToken(JsonToken token) throws IOException, JsonParseException { return token.nextToken(); } }; List<String> expected = new ArrayList<String>(); expected.add("abc"); expected.add("def"); expected.add("\\n"); expected.add("\\n"); expected.add("\\n"); expected.add("\\n"); expected.add("\\n"); expected.add("abc\\n"); expected.add("def\\n"); expected.add("\\n"); expected.add("\\n"); expected.add("
@Test public void testValidateUnquotedCharacter() throws IOException, JsonParseException { ParserMinimalBase parser = new ParserMinimalBaseImpl(Feature.ALLOW_UNQUOTED_CONTROL_CHARS, 0); try { parser._validateUnquotedCharacter(\'a\'); fail("Expected JsonParseException"); } catch (JsonParseException e) { } try { parser._validateUnquotedCharacter(\'\\\\\'); fail("Expected JsonParseException"); } catch (JsonParseException e) { } try { parser._validateUnquotedCharacter(\'\\\\\'); fail("Expected JsonParseException"); } catch (JsonParseException e) { } try { parser._validateUnquotedCharacter(\'\\\\\'); fail("Expected JsonParseException"); } catch (JsonParseException e
@Test public void testValidateUnquotedSpace() throws IOException, JsonParseException { ParserMinimalBase parser = new ParserMinimalBase() { @Override protected void _validateUnquotedSpace(int i, String ctxtDesc) throws IOException, JsonParseException { Assert.assertEquals("Illegal unquoted character (" + _getCharDesc(i) + "): has to be escaped using backslash to be included in " + ctxtDesc, i, ctxtDesc); } @Override protected void _reportError(String msg) throws IOException, JsonParseException { Assert.assertEquals("Illegal unquoted character (" + _getCharDesc(i) + "): has to be escaped using backslash to be included in " + ctxtDesc, msg
@Test public void testValidateUnquotedSpace() throws IOException, JsonParseException { ParserMinimalBase parser = new ParserMinimalBase() { @Override protected void _validateUnquotedSpace(int i, String ctxtDesc) throws IOException, JsonParseException { Assert.assertEquals("Illegal unquoted character ("+i+"): has to be escaped using backslash to be included in "+ctxtDesc); } @Override protected void _throwUnquotedSpace(int i, String ctxtDesc) throws IOException, JsonParseException { Assert.assertEquals("Illegal unquoted character ("+i+"): has to be escaped using backslash to be included in "+ctxtDesc); } }; for (Feature f : Feature.values()) { parser.set
@Test public void testThrowUnquotedSpace() throws IOException, JsonParseException { ParserMinimalBase parser = new ParserMinimalBase() { @Override protected String _getCharDesc(char c) throws IOException, JsonParseException { return c.charValue(); } }; List<String> errors = new ArrayList<String>(); parser._throwUnquotedSpace(0, "foo bar"); Assert.assertEquals(0, errors.size()); parser._throwUnquotedSpace(1, "foo bar"); Assert.assertEquals(1, errors.size()); Assert.assertEquals("Illegal unquoted character (foo bar): has to be escaped using backslash to be included in foo bar", errors.get(0));
@Test public void testGetCharDesc() { for (int ch = 0; ch < 256; ch++) { String desc = ParserMinimal._getCharDesc(ch); String expected = "(" + ch + " / " + Integer.toHexString(ch) + ")"; assertEquals(expected, desc); } }
@Test public void testGetCharDesc() throws IOException, JsonParseException { ParserMinimalBase parser = new ParserMinimalBase() { @Override public JsonParser nextToken() { return new JsonParser() { @Override public JsonToken nextToken() { return new JsonToken(); } @Override public JsonToken nextToken() { return new JsonToken(); } @Override public JsonToken nextToken() { return new JsonToken(); } @Override public JsonToken nextToken() { return new JsonToken(); } @Override public JsonToken nextToken() { return new JsonToken(); } @Override public JsonToken nextToken() { return new JsonToken(); } @Override public JsonToken nextToken() { return new JsonToken(); } @Override public JsonToken nextToken() {
@Test public void testISOControlCharacters() throws IOException, JsonParseException { ParserMinimalBase parser = new ParserMinimalBase() { @Override public JsonParser nextToken() { return new JsonParser() { @Override public JsonToken nextToken() { return new JsonToken(); } @Override public JsonToken nextToken() { return new JsonToken(); } @Override public JsonToken nextToken() { return new JsonToken(); } @Override public JsonToken nextToken() { return new JsonToken(); } @Override public JsonToken nextToken() { return new JsonToken(); } @Override public JsonToken nextToken() { return new JsonToken(); } @Override public JsonToken nextToken() { return new JsonToken(); } @Override public JsonToken nextToken() {
@Test public void testGetCharDesc() throws IOException, JsonParseException { ParserMinimalBase parser = new ParserMinimalBase() { @Override public JsonParser nextToken() { return new JsonParser() { @Override public JsonToken nextToken() { return new JsonToken(); } @Override public JsonToken nextToken() { return new JsonToken(); } @Override public JsonToken nextToken() { return new JsonToken(); } @Override public JsonToken nextToken() { return new JsonToken(); } @Override public JsonToken nextToken() { return new JsonToken(); } @Override public JsonToken nextToken() { return new JsonToken(); } @Override public JsonToken nextToken() { return new JsonToken(); } @Override public JsonToken nextToken() {
@Test public void testGetCharDesc() throws IOException, JsonParseException { ParserMinimalBase parser = new ParserMinimalBase() { @Override public JsonToken nextToken() { return new JsonToken("foo"); } @Override public JsonToken nextToken() { return new JsonToken("bar"); } @Override public JsonToken nextToken() { return new JsonToken("baz"); } @Override public JsonToken nextToken() { return new JsonToken("qux"); } @Override public JsonToken nextToken() { return new JsonToken("foo"); } @Override public JsonToken nextToken() { return new JsonToken("bar"); } @Override public JsonToken nextToken() { return new JsonToken("baz"); } @Override public void close()
@Test public void testGetCharDesc() throws IOException, JsonParseException { ParserMinimalBase parser = new ParserMinimalBase() { @Override public JsonParser nextToken() { return new JsonParser() { @Override public JsonToken nextToken() { return new JsonToken("foo"); } @Override public JsonToken nextToken() { return new JsonToken("bar"); } @Override public JsonToken nextToken() { return new JsonToken("baz"); } @Override public JsonToken nextToken() { return new JsonToken("qux"); } @Override public JsonToken nextToken() { return new JsonToken("foo"); } @Override public JsonToken nextToken() { return new JsonToken("bar"); } @Override public JsonToken nextToken() {
@Test public void testJsonWriteContext() { JsonWriteContext root = JsonWriteContext.createRootContext(); JsonWriteContext child = JsonWriteContext.createChildObjectContext(); JsonWriteContext child2 = JsonWriteContext.createChildArrayContext(); JsonWriteContext child3 = JsonWriteContext.createChildObjectContext(); JsonWriteContext child4 = JsonWriteContext.createChildObjectContext(); JsonWriteContext child5 = JsonWriteContext.createChildArrayContext(); JsonWriteContext child6 = JsonWriteContext.createChildObjectContext(); JsonWriteContext child7 = JsonWriteContext.createChildObjectContext(); JsonWriteContext child8 = JsonWriteContext.createChildArrayContext(); JsonWriteContext child9 =
@Test public void testSuper() { JsonWriteContext parent = JsonWriteContext.createRootContext(); JsonWriteContext child = JsonWriteContext.createChildObjectContext(); JsonWriteContext child2 = JsonWriteContext.createChildArrayContext(); JsonWriteContext child3 = JsonWriteContext.createChildObjectContext(); JsonWriteContext child4 = JsonWriteContext.createChildObjectContext(); JsonWriteContext child5 = JsonWriteContext.createChildArrayContext(); JsonWriteContext child6 = JsonWriteContext.createChildObjectContext(); JsonWriteContext child7 = JsonWriteContext.createChildObjectContext(); JsonWriteContext child8 = JsonWriteContext.createChildArrayContext(); JsonWriteContext child9 = JsonWrite
@Test public void testJsonWriteContext() { JsonWriteContext parent = JsonWriteContext.createRootContext(); JsonWriteContext child = JsonWriteContext.createChildObjectContext(); JsonWriteContext child2 = JsonWriteContext.createChildArrayContext(); JsonWriteContext child3 = JsonWriteContext.createChildObjectContext(); JsonWriteContext child4 = JsonWriteContext.createChildObjectContext(); JsonWriteContext child5 = JsonWriteContext.createChildArrayContext(); JsonWriteContext child6 = JsonWriteContext.createChildObjectContext(); JsonWriteContext child7 = JsonWriteContext.createChildObjectContext(); JsonWriteContext child8 = JsonWriteContext.createChildArrayContext(); JsonWriteContext child9 =
@Test public void testJsonWriteContext() { JsonWriteContext root = JsonWriteContext.createRootContext(); JsonWriteContext child = root.createChildObjectContext(); JsonWriteContext child2 = root.createChildArrayContext(); JsonWriteContext child3 = root.createChildObjectContext(); JsonWriteContext child4 = root.createChildObjectContext(); JsonWriteContext child5 = root.createChildArrayContext(); JsonWriteContext child6 = root.createChildObjectContext(); JsonWriteContext child7 = root.createChildObjectContext(); JsonWriteContext child8 = root.createChildArrayContext(); JsonWriteContext child9 = root.createChildObjectContext(); JsonWriteContext child10 = root.create
@Test public void testJsonWriteContext() { JsonWriteContext parent = JsonWriteContext.createRootContext(); JsonWriteContext child = JsonWriteContext.createChildObjectContext(); JsonWriteContext child2 = JsonWriteContext.createChildArrayContext(); JsonWriteContext child3 = JsonWriteContext.createChildObjectContext(); JsonWriteContext child4 = JsonWriteContext.createChildObjectContext(); JsonWriteContext child5 = JsonWriteContext.createChildArrayContext(); JsonWriteContext child6 = JsonWriteContext.createChildObjectContext(); JsonWriteContext child7 = JsonWriteContext.createChildObjectContext(); JsonWriteContext child8 = JsonWriteContext.createChildArrayContext(); JsonWriteContext child9 =
@Test public void testCreateRootContext() { JsonWriteContext rootContext = JsonWriteContext.createRootContext(); assertThat(rootContext.getType(), equalTo(JsonWriteContext.TYPE_ROOT)); assertThat(rootContext.getCurrentName(), equalTo("root")); assertThat(rootContext.hasValue(), equalTo(false)); assertThat(rootContext.hasParent(), equalTo(false)); }
@Test public void testCreateRootContext() { JsonWriteContext root = JsonWriteContext.createRootContext(); assertThat(root.getType(), equalTo(JsonWriteContext.TYPE_ROOT)); assertThat(root.hasValue(), equalTo(false)); assertThat(root.hasParent(), equalTo(false)); }
@Test public void testCopy() throws Exception { JsonFactory f = Json.createFactory(); f.createArrayBuilder().add(1).add(2).add(3).add(4).add(5).add(6).add(7).add(8).add(9).add(10).add(11).add(12).add(13).add(14).add(15).add(16).add(17).add(18).add(19).add(20).add(21).add(22).add(23).add(24).add(25).add(26).add(27).add(27).add(26).add(27).add(26
@Test public void testCopy() throws Exception { JsonFactory f = Json.createFactory(); f.createParser("{\\"a\\":1}").nextToken(); f.createParser("{\\"a\\":2}").nextToken(); f.createParser("{\\"a\\":3}").nextToken(); f.createParser("{\\"a\\":4}").nextToken(); f.createParser("{\\"a\\":5}").nextToken(); f.createParser("{\\"a\\":6}").nextToken(); f.createParser("{\\"a\\":7}").nextToken(); f.createParser("{\\"a\\":8}").nextToken(); f
@Test public void testCopy() throws Exception { JsonFactory f = Json.createFactory(); f.addProperty("a", "1"); f.addProperty("b", "2"); f.addProperty("c", "3"); f.addProperty("d", "4"); f.addProperty("e", "5"); assertEquals("{\\"a\\":1,\\"b\\":2,\\"c\\":3,\\"d\\":4}", f.readResolve()); assertEquals("{\\"a\\":1,\\"b\\":2,\\"c\\":3,\\"d\\":4}", f.createParser("{\\"a\\":1}").toString()); assert
@Test(expected=IllegalStateException.class) public void testCheckInvalidCopy2() throws Exception { Feature f = new JsonFactory().createFeatureBuilder("testing").build(); f._checkInvalidCopy(String.class); f._checkInvalidCopy(String[].class); f._checkInvalidCopy(String[][].class); f._checkInvalidCopy(String[][].class); f._checkInvalidCopy(String[][].class); f._checkInvalidCopy(String[][].class); }
@Test(expected=IllegalStateException.class) public void testInvalidCopy() throws Exception { Feature f = Feature.builder().build(); f._checkInvalidCopy(String.class); f._checkInvalidCopy(String.class); }
@Test public void testGetFormatName() { JsonFactory f = new JsonFactory() { @Override public String getFormatName() { return "JSON"; } }; assertEquals("JSON", f.getFormatName()); f = new JsonFactory() { @Override public String getFormatName() { return null; } }; assertNull(f.getFormatName()); f = new JsonFactory() { @Override public String getFormatName() { return "JSON"; } }; assertEquals("JSON", f.getFormatName()); f = new JsonFactory() { @Override public String getFormatName() { return null; } }; assertEquals("JSON", f.getFormatName()); }
@Test public void testGetFormatName() { JsonFactory f = new JsonFactory() { @Override public String getFormatName() { return "json"; } }; assertEquals("json", f.getFormatName()); }
@Test public void testGetFormatName() { JsonFactory f = new JsonFactory(); assertEquals(JsonFactory.FORMAT_NAME_JSON, f.getFormatName()); }
@Test public void testJsonNumberMatch() throws IOException { JsonFactory f = new JsonFactory(); JsonParser parser = new JsonParser(f); List<Integer> list = new ArrayList<Integer>(); for (int i = 0; i < 10; i++) { list.add(i); parser.nextToken(); } List<Integer> list2 = new ArrayList<Integer>(); for (Integer i = 0; i < 10; i++) { list2.add(i); } List<Integer> list3 = new ArrayList<Integer>(); for (Integer i : list) { list3.add(i); } List<Integer> list4 = new ArrayList<Integer>(); list4.
@Test public void testJsonNumberMatch() throws Exception { JsonFactory f = new JsonFactory(); InputAccessor acc = new MockInputAccessor("{\\"a\\":1}"); MatchStrength ret = f.hasFormat(acc); assertEquals(MatchStrength.MatchType.JSON_NUMBER, ret.getType()); acc = new MockInputAccessor("{\\"a\\":1}"); ret = f.hasFormat(acc); assertEquals(MatchStrength.MatchType.JSON_NUMBER, ret.getType()); acc = new MockInputAccessor("{\\"a\\":1}"); ret = f.hasFormat(acc); assertEquals(MatchStrength.MatchType.JSON_NUMBER, ret.get
@Test public void testJsonParser() throws Exception { JsonParser parser = new JsonParser(new StringReader("{\\"a\\":1, \\"b\\":2, \\"c\\":3}")); Map<String, String> map = new LinkedHashMap<String, String>(); map.put("a", "1"); map.put("b", "2"); map.put("c", "3"); parser.nextToken(); assertEquals("{\\"a\\":1, \\"b\\":2, \\"c\\":3}", parser.toString()); assertEquals("{\\"a\\":1, \\"b\\":2, \\"c\\":3}", parser.
@Test public void testBasic() throws Exception { JsonParser parser = new JsonParser(); InputAccessor acc = parser.getInputAccessor("{\\"a\\":1,\\"b\\":2}"); MatchStrength ret = new MatchStrength.Builder(parser).build().hasJSONFormat(acc); assertTrue(ret.hasFormat(acc)); }
@Test public void testBasic() throws IOException { JsonParser parser = new JsonParserFactory().createParser(new StringReader("{\\"a\\":1}")); String s = parser.nextToken(); assertTrue(s.contains("1")); assertTrue(s.contains("2")); assertTrue(s.contains("3")); assertTrue(s.contains("4")); assertTrue(s.contains("5")); assertTrue(s.contains("6")); assertTrue(s.contains("7")); assertTrue(s.contains("8")); assertTrue(s.contains("9")); assertTrue(s.contains("10")); assertTrue(s.contains("
@Test public void testVersion() throws Exception { assertEquals(PackageVersion.VERSION, new Feature(true).version().getPackageVersion()); assertEquals(PackageVersion.VERSION, new Feature(false).version().getPackageVersion()); assertEquals(PackageVersion.VERSION, new Feature(true).version().getPackageVersion()); assertEquals(PackageVersion.VERSION, new Feature(false).version().getPackageVersion()); assertEquals(PackageVersion.VERSION, new Feature(true).version().getPackageVersion()); assertEquals(PackageVersion.VERSION, new Feature(true).version().getPackageVersion()); assertEquals(PackageVersion.VERSION, new Feature(false).version().getPackageVersion()); }
@Test public void testVersion() throws Exception { assertEquals(PackageVersion.VERSION, new JsonFactory().version()); }
@Test public void testEnable() throws Exception { JsonParser.Feature f = JsonParser.Feature.VALUE_NUMBER; f.enable(f); assertEquals(1, f.getMask()); }
@Test public void test() throws Exception { JsonParserFactory f = new JsonParserFactory(); f.enable(JsonParser.Feature.VALUE_NUMBER); f.enable(JsonParser.Feature.VALUE_NUMBER); f.enable(JsonParser.Feature.VALUE_NUMBER); f.enable(JsonParser.Feature.VALUE_NUMBER); f.enable(JsonParser.Feature.VALUE_NUMBER); f.enable(JsonParser.Feature.VALUE_NUMBER); f.enable(JsonParser.Feature.VALUE_NUMBER); f.enable(JsonParser.Feature.VALUE_NUMBER); f.enable(JsonParser.Feature.VALUE_NUMBER); f.enable(JsonParser.Feature.VALUE_NUMBER
@Test public void testDisable() throws Exception { JsonParser.Feature f = JsonParser.Feature.VALUE_NUMBER; f.enable(f); assertEquals(1, f.getMask()); }
@Test public void testIsEnabled() throws Exception { JsonParser.Feature f; f = JsonParser.Feature.VALUE_NUMBER; assertTrue(Feature.INSTANCE.isEnabled(f)); f = JsonParser.Feature.VALUE_NUMBER; assertFalse(Feature.INSTANCE.isEnabled(f)); f = JsonParser.Feature.VALUE_NUMBER; assertTrue(Feature.INSTANCE.isEnabled(f)); f = JsonParser.Feature.VALUE_NUMBER; assertTrue(Feature.INSTANCE.isEnabled(f)); f = JsonParser.Feature.VALUE_NUMBER; assertTrue(Feature.INSTANCE.isEnabled(f)); f = JsonParser.Feature.VALUE_NUMBER; assertTrue(Feature.
@Test public void testDisabled() throws Exception { JsonParser.Feature f = JsonParser.Feature.VALUE_NUMBER; assertFalse(f.getMask() & Feature.LINE); assertFalse(f.isEnabled(f)); f.setMask(1); assertFalse(f.getMask() & Feature.LINE); assertFalse(f.isEnabled(f)); }
@Test public void testConfigure() throws Exception { JsonFactory f = new JsonFactory().configure(JsonGeneratorFeature.class, true); f.configure(JsonGeneratorFeature.class, false); }
@Test public void testDisable() throws Exception { JsonParser parser = new JsonParserFactory().createParser("{\\"a\\":1, \\"b\\":2}"); parser.nextToken(); assertFalse(parser.hasNext()); parser.nextToken(); assertTrue(parser.hasNext()); parser.nextToken(); assertFalse(parser.hasNext()); parser.nextToken(); assertTrue(parser.hasNext()); parser.nextToken(); assertFalse(parser.hasNext()); }
@Test public void testEnable() throws Exception { JsonFactory f = new JsonFactory().enable(JsonGeneratorFeature.VALUE_NUMBER); f.enable(JsonGeneratorFeature.VALUE_NUMBER); assertSame(f, f.getFeature(JsonGeneratorFeature.VALUE_NUMBER)); }
@Test public void testJsonLine() throws Exception { JsonFactory f = new JsonFactory(); f.enable(JsonFactory.Feature.JSON_LINE); f.enable(JsonFactory.Feature.JSON_LINE); f.enable(JsonFactory.Feature.JSON_LINE); f.enable(JsonFactory.Feature.JSON_LINE); f.enable(JsonFactory.Feature.JSON_LINE); f.disable(JsonFactory.Feature.JSON_LINE); assertEquals("[\\n" + " {\\n" + " \\"a\\": 1,\\n" + " \\"b\\": 2,\\n" + " \\"c\\": 3,\\n" + "
@Test public void testDisable() throws Exception { JsonFactory f = new JsonFactory().enable(JsonFactory.Feature.VALUE_STRING); f.enable(JsonFactory.Feature.BOOLEAN); f.enable(JsonFactory.Feature.STRING); f.enable(JsonFactory.Feature.NUMBER); f.disable(JsonFactory.Feature.STRING); }
@Test public void testDisable() throws Exception { JsonParser.Feature f = JsonParser.Feature.VALUE_NUMBER; f.disable(f); assertEquals("{\\"test\\":1}", new String(factory.readResolve(), Charset.forName("UTF-8"))); f.disable(JsonParser.Feature.VALUE_NUMBER); assertEquals("{\\"test\\":1}", new String(factory.readResolve(), Charset.forName("UTF-8"))); f.disable(JsonParser.Feature.VALUE_NUMBER); assertEquals("{\\"test\\":1}", new String(factory.readResolve(), Charset.forName("UTF-8"))); }
@Test public void testDisabled() throws Exception { JsonFactory f = new JsonFactory(); f.disable(JsonGeneratorFeature.disable(JsonGeneratorFeature.disable(JsonGeneratorFeature.disable(JsonGeneratorFeature.disable(JsonGeneratorFeature.disable(JsonGeneratorFeature.disable(JsonGeneratorFeature.disable(JsonGeneratorFeature.disable(JsonGeneratorFeature.disable(JsonGeneratorFeature.disable(JsonGeneratorFeature.disable(JsonGeneratorFeature.disable(JsonGeneratorFeature.disable(JsonGeneratorFeature.disable(JsonGeneratorFeature.disable(JsonGeneratorFeature.disable(JsonGeneratorFeature.disable(JsonGeneratorFeature.disable(JsonGeneratorFeature.disable(JsonGeneratorFeature.disable(JsonGeneratorFeature.disable(
@Test public void testDisable() throws Exception { JsonFactory f = new JsonFactory(); f.enable(JsonFactory.Feature.VALUE_NUMBER); f.disable(JsonFactory.Feature.VALUE_NUMBER); assertEquals(1, f.getMask()); f.disable(JsonFactory.Feature.VALUE_NUMBER); assertEquals(1, f.getMask()); f.enable(JsonFactory.Feature.VALUE_NUMBER); f.disable(JsonFactory.Feature.VALUE_NUMBER); assertEquals(1, f.getMask()); f.enable(JsonFactory.Feature.VALUE_NUMBER); f.disable(JsonFactory.Feature.VALUE_NUMBER); assertEquals(1, f.getMask
@Test public void testIsEnabled() throws Exception { JsonFactory f = new JsonFactory(); f.enable(JsonGeneratorFeature.MAX_VALUE); assertTrue(f.isEnabled(JsonGeneratorFeature.MAX_VALUE)); f.disable(JsonGeneratorFeature.MAX_VALUE); assertFalse(f.isEnabled(JsonGeneratorFeature.MAX_VALUE)); f.enable(JsonGeneratorFeature.MAX_VALUE); assertTrue(f.isEnabled(JsonGeneratorFeature.MAX_VALUE)); f.disable(JsonGeneratorFeature.MAX_VALUE); assertFalse(f.isEnabled(JsonGeneratorFeature.MAX_VALUE)); }
@Test public void testLineMask() throws Exception { JsonFactory f = new JsonFactory(); f.setMask(JsonGenerator.Feature.LINE); assertTrue(f.getMask() & JsonGenerator.Feature.LINE); assertFalse(f.getMask() & JsonGenerator.Feature.LINE); f.setMask(JsonGenerator.Feature.LINE); assertTrue(f.getMask() & JsonGenerator.Feature.LINE); assertFalse(f.getMask() & JsonGenerator.Feature.LINE); f.setMask(JsonGenerator.Feature.LINE); assertTrue(f.getMask() & JsonGenerator.Feature.LINE); assertFalse(f.getMask() & JsonGenerator.Feature
@Test public void testName2() { Name2 name2 = new Name2("name2", 1, 2, 3); assertEquals("name2", name2.mName); assertEquals(1, name2.mQuad1); assertEquals(2, name2.mQuad2); }
@Test public void testName() { Name2 hello = new Name2("hello", 123, 456, 789); assertEquals("hello", hello.mName); assertEquals(123, hello.mQuad1); assertEquals(456, hello.mQuad2); hello = new Name2("hello", 123, 456, 789); assertEquals("hello", hello.mName); assertEquals(123, hello.mQuad1); assertEquals(789, hello.mQuad2); hello = new Name2("hello", 123, 456, 789); assertEquals("hello", hello.mName); assertEquals(123, hello.mQuad1); assertEquals(
@Test public void testName2() { Name2 name2 = new Name2("name", 42, 1, 2); assertEquals("name", name2.mName); assertEquals(42, name2.mQuad1); assertEquals(1, name2.mQuad2); }
@Test public void testName2() { Name2 name2 = new Name2("name", 42, 12, 13); assertEquals("name", name2.mQuad1); assertEquals("name", name2.mQuad2); assertEquals(12, name2.mQuad1); assertEquals(13, name2.mQuad2); Name2 name3 = new Name2("name", 42, 12, 13); assertEquals("name", name3.mQuad1); assertEquals(12, name3.mQuad2); assertEquals(13, name3.mQuad1); assertEquals(13, name3.mQuad2); }
