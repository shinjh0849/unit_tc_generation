@Test public void testBaseUri() { Document doc = Jsoup.parse("<div><p>Hello</p><p>There</p></div>"); Element p = doc.select("p").first(); assertEquals("<p>Hello</p><p>There</p>", TextUtil.stripNewlines(p.html())); assertEquals("<p>Hello there</p>", TextUtil.stripNewlines(doc.body().html())); p = doc.select("p").first(); assertEquals("<p>Hello there</p><p>There</p>", TextUtil.stripNewlines(p.html())); assertEquals("<p>
@Test public void testBaseUri() { Document doc = Jsoup.parse("<div><a href=\'one\'>One</a><a href=\'two\'>Two</a></div>"); Element a = doc.select("a").first(); assertEquals("one", a.baseUri()); assertEquals("one", a.attr("href")); assertEquals("two", a.attr("a")); Element b = doc.select("b").first(); assertEquals("two", b.baseUri()); assertEquals("one", b.attr("href")); assertEquals("two", b.attr("a")); Element c = doc.select("c").first(); assertEquals("
@Test public void testBaseUri() { Document doc = Jsoup.parse("<div><p>Hello</p><p>There</p></div>"); Element p = doc.select("p").first(); assertEquals("<p>Hello</p><p>There</p>", TextUtil.stripNewlines(p.html())); p = doc.select("p").first(); assertEquals("<p>Hello</p><p>There</p>", TextUtil.stripNewlines(p.html())); p = doc.select("p").first(); assertEquals("<p>Hello</p><p>There</p>", TextUtil.stripNewlines
@Test public void childNodes() { Document doc = Jsoup.parse("<div><p>One</p><p>Two</p><p>Three</>p></div>"); Element div = doc.select("div").first(); assertEquals("one", div.text()); assertEquals("two", div.childNode(0).text()); assertEquals("three", div.childNode(1).text()); assertEquals("four", div.childNode(2).text()); div.removeChild(div.childNode(0)); assertEquals("one", div.childNode(0).text()); assertEquals("two", div.childNode(1).text()); assertEquals("
@Test public void testBaseUri() { Document doc = Jsoup.parse("<a href=\'1\'>One</a>", "http: Element a1 = doc.select("a").first(); assertEquals("1", a1.baseUri()); assertEquals("http: Element a2 = doc.select("a").get(1); assertEquals("1", a2.baseUri()); assertEquals("http: Element a3 = doc.select("a").get(2); assertEquals("1", a3.baseUri()); assertEquals("http: Element a4 = doc.select("a").get(3); assertEquals("1", a4.baseUri()); assertEquals
@Test public void testBaseUri() { Document doc = Jsoup.parse("<div><p>One</p><p>Two</p><p>Three</p></div>"); Element p = doc.select("p").first(); assertEquals("p", p.baseUri()); assertEquals("<p>One</p><p>Two</p><p>Three</p>", TextUtil.stripNewlines(p.outerHtml())); p = doc.select("p").first(); assertEquals("p", p.baseUri()); assertEquals("<p>One</p><p>Two</p><p>Three</p>", TextUtil.stripNewlines
@Test public void testBaseUri() { Document doc = Jsoup.parse("<a href=\'one\'>One</a> <a href=\'two\'>Two</a>", "http: Element a1 = doc.select("a").first(); assertEquals("http: assertEquals("http: assertEquals("one", a1.baseUri()); Element a2 = doc.select("a").get(1); assertEquals("http: assertEquals("http: assertEquals("one", a2.baseUri()); Element a3 = doc.select("a").get(2); assertEquals("http: assertEquals("http: assertEquals("one", a3.baseUri()); }
@Test public void testLineBreaks() { TextNode one = new TextNode("one"); TextNode two = new TextNode("two"); TextNode three = new TextNode("three"); TextNode four = new TextNode("four"); TextNode five = new TextNode("five"); TextNode six = new TextNode("six"); TextNode seven = new TextNode("seven"); TextNode eight = new TextNode("eight"); TextNode nine = new TextNode("nine"); TextNode nine2 = new TextNode("nine2"); TextNode nine3 = new TextNode("nine3"); TextNode nine4 = new TextNode("nine
@Test public void testAttribute() { Document doc = Jsoup.parse("<p>One<p>Two<p>Three"); Element p1 = doc.select("p").first(); assertEquals("one", p1.attr("id")); assertEquals("two", p1.attr("id")); assertEquals("three", p1.attr("class")); Element p2 = doc.select("p").get(1); assertEquals("one", p2.attr("id")); assertEquals("two", p2.attr("class")); assertEquals("three", p2.attr("class")); assertEquals("one two three", p2.attr("
@Test public void testAttributes() { Document doc = Jsoup.parse("<p id=1>Hello <b>there</b> now</p>"); Element p = doc.select("p").first(); assertEquals("1", p.id()); assertEquals("Hello there", p.text()); p = doc.select("p").get(1); assertEquals("1", p.id()); assertEquals("Hello there", p.text()); p = doc.select("p").get(2); assertEquals("1", p.id()); assertEquals("Hello there", p.text()); p = doc.select("p").get(3); assertEquals("3", p.id
@Test public void testAttributes() { Document doc = Jsoup.parse("<p>One<p>Two<p>Three</p>Four</p>"); Element p1 = doc.select("p").first(); assertEquals("one", p1.attr("id")); assertEquals("two", p1.attr("name")); assertEquals("three", p1.attr("style")); Element p2 = doc.select("p").first(); assertEquals("one", p2.attr("id")); assertEquals("two", p2.attr("style")); assertEquals("three", p2.attr("style")); assertEquals("four",
@Test public void testChildNode() { Document doc = Jsoup.parse("<div><p>One<p>Two<p>Three</div><p>Four</p></div>"); Element p = doc.select("p").first(); Node child = p.childNode(0); assertEquals("One", child.text()); assertEquals("Two", child.childNode(1).text()); assertEquals("Three", child.childNode(2).text()); assertEquals("Four", child.childNode(3).text()); assertEquals("Five", child.childNode(4).text()); }
@Test public void testChildNode() { Document doc = Jsoup.parse("<p>One\\ntwo\\nthree\\nfour\\nfive\\nseven"); Element p = doc.select("p").first(); Node child = p.childNode(0); assertEquals("one", child.text()); assertEquals("two", child.text()); assertEquals("three", child.childNode(1).text()); assertEquals("four", child.childNode(2).text()); assertEquals("five", child.childNode(3).text()); assertEquals("seven", child.childNode(4).text()); assertEquals("seven", child.
@Test public void testParent() { Document doc = Jsoup.parse("<p>One<p>Two"); Element p = doc.select("p").first(); Node parent = p.parent(); assertNull(parent); assertEquals(doc, p.parent()); assertEquals(doc, doc.select("p").first()); assertNull(doc.select("p").last()); assertNull(doc.select("p").last().parent()); assertEquals(doc, doc.select("p").last().parent()); assertEquals(doc, doc.select("p").last().parent()); assertEquals(doc, doc.select("p").last().parent()); assertEquals(doc, doc.select
@Test public void testParent() { Document doc = Jsoup.parse("<div><p>Hello</p></div><div><p>There</p></div>"); Element div = doc.select("div").first(); assertTrue(doc.select("p").first().parent() == null); assertTrue(doc.select("div").last().parent() == null); assertTrue(doc.select("p").last().parent() == doc); assertTrue(doc.select("p").last().parent() == doc); assertTrue(doc.select("p").last().parent() == null); }
@Test public void setParentNode() { Document doc = Jsoup.parse("<div><p>Hello</p></div><div><p>There</p></div>"); Element div = doc.select("div").first(); div.setParentNode(doc.select("p").first()); assertEquals(doc.select("div").first(), div); assertNull(doc.select("p").last()); }
@Test public void setParentNode() { Document doc = Jsoup.parse("<div><p>Hello</p></div><div><p>There</p></div>"); Element div = doc.select("div").first(); TextNode tn = (TextNode) div.childNode(0); assertEquals("Hello", tn.text()); assertNull(div.parent()); assertEquals(0, div.childCount()); assertEquals(1, div.childNodes().size()); assertEquals(0, div.childNode(0).index()); assertEquals(0, div.childNode(1).index()); assertEquals(1, div.childNodes().size()); assertEquals(0, div
@Test public void testSetParentNode() { Document doc = Jsoup.parse("<div><p>Hello</p></div><div><p>There</p></div>"); Element div = doc.select("div").first(); TextNode tn = (TextNode) div.childNode(0); assertEquals("Hello", tn.text()); assertEquals("There", div.parentNode().text()); assertEquals(0, div.childNode(0).index()); assertEquals(0, div.childNode(1).index()); assertEquals(1, div.childNode(2).index()); assertEquals(1, div.childNode(3).index()); assertEquals(1,
@Test public void testRemoveChild() { Document doc = Jsoup.parse("<div><p>One</p><p>Two</p><p>Three</p></div>"); Element p1 = doc.select("p").first(); Node p2 = doc.select("p").get(1); Node p3 = doc.select("p").get(2); Node p4 = doc.select("p").get(3); Node p5 = doc.select("p").get(4); Node p6 = doc.select("p").get(5); p1.removeChild(p2); p2.removeChild(p3); p3.removeChild(
@Test public void addChild() { Document doc = Jsoup.parse("<div><p>One</p><p>Two</p><p>Three</p></div>"); Element p1 = doc.select("p").first(); Node p2 = doc.select("p").get(1); Node p3 = doc.select("p").get(2); Node p4 = doc.select("p").get(3); Node p5 = doc.select("p").get(4); Node p6 = doc.select("p").get(5); Node p7 = doc.select("p").get(6); Node p8 = doc.select("p").get(
@Test public void testAddChild() { Document doc = Jsoup.parse("<div><p>One</p><p>Two</p><p>Three</p></div>"); Element p1 = doc.select("p").first(); Node p2 = doc.select("p").get(1); Node p3 = doc.select("p").get(2); Node p4 = doc.select("p").get(3); Node p5 = doc.select("p").get(4); Node p6 = doc.select("p").get(5); assertNull(p1.parentNode()); assertNull(p2.parentNode()); assertNull(p3.
@Test public void testAddChild() { Document doc = Jsoup.parse("<div><p>One</p><p>Two</p><p>Three</p></div>"); Element p1 = doc.select("p").first(); Node p2 = doc.select("p").get(1); Node p3 = doc.select("p").get(2); Node p4 = doc.select("p").get(3); Node p5 = doc.select("p").get(4); Node p6 = doc.select("p").get(5); Node p7 = doc.select("p").get(6); Node p8 = doc.select("p").
@Test public void testAddChild() { Document doc = Jsoup.parse("<div><p>One</p><p>Two</p><p>Three</p></div>"); Element p1 = doc.select("p").first(); Node p2 = doc.select("p").get(1); Node p3 = doc.select("p").get(2); Node p4 = doc.select("p").get(3); Node p5 = doc.select("p").get(4); Node p6 = doc.select("p").get(5); Node p7 = doc.select("p").get(6); List<Node> childNodes = p1.child
@Test public void testAddChild() { Document doc = Jsoup.parse("<div><p>One</p><p>Two</p><p>Three</p></div>"); Element p1 = doc.select("p").first(); Node p2 = doc.select("p").get(1); Node p3 = doc.select("p").get(2); Node p4 = doc.select("p").get(3); Node p5 = doc.select("p").get(4); Node p6 = doc.select("p").get(5); Node p7 = doc.select("p").get(6); Node p8 = doc.select("p").
@Test public void testOuterHtml() { Document doc = Jsoup.parse("<div><p>Hello</p></div><div><p>There</p></div>"); Element div = doc.select("div").first(); assertEquals("<div><p>Hello</p></div><div><p>There</p></div>", TextUtil.stripNewlines(div.outerHtml())); }
@Test public void testOuterHtml() { Document doc = Jsoup.parse("<div><p>Hello</p></div><div><p>There</p></div>"); Element div = doc.select("div").first(); assertEquals("<div><p>Hello</p></div><div><p>There</p></div>", TextUtil.stripNewlines(div.outerHtml())); }
@Test public void testOuterHtml() { Document doc = Jsoup.parse("<div><p>Hello</p></div><div><p>There</p></div>"); Element div = doc.select("div").first(); TextNode textNode = (TextNode) div.childNode(0); TextNode textNode2 = (TextNode) div.childNode(1); TextNode textNode3 = (TextNode) textNode.childNode(2); TextNode textNode4 = (TextNode) textNode.childNode(3); TextNode textNode5 = (TextNode) textNode.childNode(4); TextNode textNode6 = (TextNode) textNode.childNode(
@Test public void testOuterHtml() { Document doc = Jsoup.parse("<div><p>Hello</p></div><div><p>There</p></div>"); Element div = doc.select("div").first(); assertEquals("<div><p>Hello</p></div><div><p>There</p></div>", TextUtil.stripNewlines(div.outerHtml())); }
@Test public void testHashCode() { Document doc = Jsoup.parse("<div><p>Hello</p></div><div><p>There</p></div>"); Element div1 = doc.select("div").first(); Element div2 = doc.select("div").first(); assertEquals(0, div1.hashCode()); assertEquals(0, div2.hashCode()); Element div3 = doc.select("div").first(); assertEquals(0, div3.hashCode()); Element div4 = doc.select("div").first(); assertEquals(0, div4.hashCode()); }
@Test public void testHashCode() { Document doc = Jsoup.parse("<div><p>Hello</p></div><div><p>There</p></div>"); Element div1 = doc.select("div").first(); Element div2 = doc.select("div").first(); assertEquals(0, div1.hashCode()); assertEquals(0, div2.hashCode()); Element div3 = doc.select("div").first(); assertEquals(1, div3.hashCode()); assertEquals(1, div3.hashCode()); Element div4 = doc.select("div").first(); assertEquals(1, div4.hashCode()); assertEquals(1, div
@Test public void testHashCode() { Document doc = Jsoup.parse("<div><p>Hello"); Element p1 = doc.select("p").first(); Element p2 = doc.select("p").get(1); Element p3 = doc.select("p").get(2); assertEquals(p1.hashCode(), p2.hashCode()); assertEquals(p1.hashCode(), p3.hashCode()); assertEquals(doc.select("p").first().hashCode(), p1.hashCode()); assertEquals(doc.select("p").first().hashCode(), p2.hashCode()); assertEquals(doc.select("p").first().hashCode(),
@Test public void testHashCode() { Document doc = Jsoup.parse("<div><p>Hello</p></div><div><p>There</p></div>"); Element div1 = doc.select("div").first(); Element div2 = doc.select("div").first(); assertEquals(0, div1.hashCode()); assertEquals(0, div2.hashCode()); Element div3 = doc.select("div").first(); assertEquals(0, div3.hashCode()); assertEquals(0, div3.hashCode()); Element div4 = doc.select("div").first(); assertEquals(0, div4.hashCode()); assertEquals(0, div
@Test public void testXmlDeclaration() { XmlDeclaration d = new XmlDeclaration("<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>", "", false); assertEquals("<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>", d.getWholeDeclaration()); d = new XmlDeclaration("<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>", "", false); assertEquals("<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>", d.getWholeDeclaration()); d = new XmlDeclaration("<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?
@Test public void testXmlDeclaration() { XmlDeclaration d = new XmlDeclaration("<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>", "http: assertEquals("<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>", d.getWholeDeclaration()); d = new XmlDeclaration("<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>", "http: assertEquals("<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>", d.getWholeDeclaration()); d = new XmlDeclaration("<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?
@Test public void xmlDeclaration() { XmlDeclaration declaration = new XmlDeclaration("<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>", "", false); assertEquals("<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>", declaration.getWholeDeclaration()); assertEquals("<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>", declaration.toString()); }
@Test public void xmlDeclaration() { XmlDeclaration d = new XmlDeclaration("<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>", "", false); assertEquals("<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>", d.getWholeDeclaration()); d = new XmlDeclaration("<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>", "", true); assertEquals("<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>", d.getWholeDeclaration()); d = new XmlDeclaration("<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>"
@Test public void val() { Document doc = Jsoup.parse("<input value=\'one\' /><textarea>two</textarea>"); Elements els = doc.select("textarea"); assertEquals(3, els.size()); assertEquals("one", els.val()); assertEquals("two", els.last().val()); els.val("three"); assertEquals("three", els.val()); assertEquals("three", els.last().val()); assertEquals("three", els.first().val()); assertEquals("three", els.last().val()); els.val("four"); assertEquals("four", els.first().val()); assertEquals("four", els
@Test public void val() { Document doc = Jsoup.parse("<input value=\'one\' /><textarea>two</textarea>"); Elements els = doc.select("textarea"); assertEquals(3, els.size()); assertEquals("one", els.val()); assertEquals("two", els.last().val()); els.val("three"); assertEquals("three", els.val()); assertEquals("three", els.last().val()); assertEquals("three", els.first().val()); assertEquals("three", els.last().val()); els.val("four"); assertEquals("four", els.first().val()); assertEquals("four", els
@Test public void val() { Document doc = Jsoup.parse("<input value=\'one\' /><textarea>two</textarea>"); Elements els = doc.select("textarea"); assertEquals(3, els.size()); assertEquals("one", els.val()); assertEquals("two", els.last().val()); els.val("three"); assertEquals("three", els.val()); assertEquals("three", els.last().val()); assertEquals("three", els.first().val()); assertEquals("three", els.last().val()); els.val("four"); assertEquals("four", els.first().val()); assertEquals("four", els
@Test public void val() { String h = "<input value=\'one\' /><textarea>two</textarea>"; Document doc = Jsoup.parse(h); doc.select("textarea").val("three").val("four"); assertEquals("one", doc.select("textarea").get(0).text()); assertEquals("two", doc.select("textarea").get(1).text()); assertEquals("three", doc.select("textarea").get(2).text()); assertEquals("four", doc.select("textarea").get(3).text()); }
@Test public void val() { Document doc = Jsoup.parse("<input value=\'one\' /><textarea>two</textarea>"); doc.select("textarea").val("three"); assertEquals("three", doc.select("textarea").get(0).text()); assertEquals("two", doc.select("textarea").get(1).text()); assertEquals("three", doc.select("textarea").get(2).text()); }
@Test public void val() { Document doc = Jsoup.parse("<input value=\'one\' /><textarea>two</textarea>"); doc.select("textarea").val("three"); assertEquals("one", doc.select("textarea").get(0).val()); assertEquals("three", doc.select("textarea").get(1).val()); assertEquals("two", doc.select("textarea").get(2).val()); assertEquals("three", doc.select("textarea").get(3).val()); }
@Test public void val() { Document doc = Jsoup.parse("<input value=\'one\' /><textarea>two</textarea>"); doc.select("textarea").val("three"); assertEquals("one", doc.select("textarea").get(0).text()); assertEquals("two", doc.select("textarea").get(1).text()); assertEquals("three", doc.select("textarea").get(2).text()); }
@Test public void hasText() { Document doc = Jsoup.parse("<div><p>Hello</p></div><div><p>There</p></div>"); Elements divs = doc.select("div"); assertTrue(divs.hasText()); assertFalse(doc.select("div + div").hasText()); }
@Test public void hasText() { Document doc = Jsoup.parse("<div><p>Hello <b>there</b></p> jsoup <p>now!</p></div>"); Elements divs = doc.select("div"); assertTrue(divs.hasText()); assertFalse(doc.select("p").hasText()); }
@Test public void hasText() { Document doc = Jsoup.parse("<div><p>Hello <b>there</b></p> jsoup <p>now!</p></div><div><p>now!</p></div>"); Elements divs = doc.select("div"); assertTrue(divs.hasText()); assertFalse(doc.select("p").hasText()); }
@Test public void hasText() { Document doc = Jsoup.parse("<div><p>Hello <b>there</b></p> jsoup <p>now!</p></div>"); Elements divs = doc.select("div"); assertTrue(divs.hasText()); assertFalse(doc.select("p").hasText()); }
@Test public void hasText() { Document doc = Jsoup.parse("<div><p>Hello <b>there</b></p> jsoup <p>now!</p></div>"); Elements divs = doc.select("div"); assertTrue(divs.hasText()); assertFalse(doc.select("p").hasText()); }
@Test public void select() { Document doc = Jsoup.parse("<div><p>One</p><p>Two</p><p>Three</>p></div><div><p>Four</p>"); Elements ps = doc.select("p:eq(0)"); assertEquals(3, ps.size()); assertEquals("One", ps.get(0).text()); assertEquals("Two", ps.get(1).text()); assertEquals("Three", ps.get(2).text()); }
@Test public void select() { Document doc = Jsoup.parse("<div><p>One</p><p>Two</p><p>Three</>p></div><div><p>Four</p>"); Elements ps = doc.select("p"); assertEquals(3, ps.size()); assertEquals("One", ps.get(0).text()); assertEquals("Two", ps.get(1).text()); assertEquals("Three", ps.get(2).text()); }
@Test public void is() { String h = "<p>Hello<p title=foo>there<p>world"; Document doc = Jsoup.parse(h); Elements ps = doc.select("p"); assertTrue(ps.is("[title=foo]")); assertFalse(ps.is("[title=bar]")); }
@Test public void is() { Document doc = Jsoup.parse("<div><p>Hello <b>there</b></p> jsoup <p>now!</p></div><div><p>now!</p></div>"); Elements ps = doc.select("p"); assertEquals(2, ps.size()); assertEquals("Hello ", ps.get(0).text()); assertEquals("there", ps.get(1).text()); }
@Test public void is() { Document doc = Jsoup.parse("<div><p>Hello <b>there</b></p> jsoup <p>now!</p></div><div><p>now!</p></div>"); Elements ps = doc.select("p"); assertEquals(2, ps.size()); assertTrue(ps.is("p")); assertTrue(ps.is("b")); assertTrue(ps.is("p")); assertFalse(ps.is("p")); }
@Test public void last() { Document doc = Jsoup.parse("<div><p>Hello</p></div><div><p>There</p></div>"); Element p = doc.select("p").last(); assertEquals("Hello", p.text()); assertEquals("There", p.text()); }
@Test public void last() { String h = "<p>Hello<p>there<p>world"; Document doc = Jsoup.parse(h); Element p = doc.select("p").last(); assertEquals("there", p.text()); assertNull(doc.select("p").last()); }
@Test public void AttributeWithValueNot() { Element element = mock(Element.class); when(element.getAttribute("foo")).thenReturn("bar"); AttributeWithValueNot attr = new AttributeWithValueNot("foo", "bar"); assertEquals(2, attr.size()); assertEquals("bar", attr.getKey()); assertEquals("bar", attr.getValue()); attr = new AttributeWithValueNot("foo", "bar"); assertEquals(2, attr.size()); assertEquals("bar", attr.getKey()); assertEquals("bar", attr.getValue()); }
@Test public void testAttributeWithValueNot() { Element e = mock(Element.class); when(e.getId()).thenReturn("test"); AttributeWithValueNot attr = new AttributeWithValueNot("key", "value"); assertTrue(attr.matches(e)); attr = new AttributeWithValueNot("key", "value2"); assertTrue(attr.matches(e)); attr = new AttributeWithValueNot("key", "value"); assertTrue(attr.matches(e)); }
@Test public void testMatchesElement() throws Exception { Element e1 = doc.createElement("foo"); Element e2 = doc.createElement("bar"); assertTrue(evaluator.matches(e1)); assertFalse(evaluator.matches(e2)); e1.setAttribute("foo", "bar"); assertFalse(evaluator.matches(e1)); e2.setAttribute("foo", "bar"); assertTrue(evaluator.matches(e1)); assertTrue(evaluator.matches(e2)); }
@Test public void testMatchesElement() throws Exception { Element e = doc.createElement("foo"); assertTrue(evaluator.matches(e)); e = doc.createElement("bar"); assertFalse(evaluator.matches(e)); e = doc.createElement("foo"); assertTrue(evaluator.matches(e)); e = doc.createElement("foo"); assertTrue(evaluator.matches(e)); e = doc.createElement("bar"); assertTrue(evaluator.matches(e)); e = doc.createElement("foo"); assertTrue(evaluator.matches(e)); e = doc.createElement("foo"); assertTrue(evaluator.matches(e)); e = doc
@Test public void AttributeWithValueStarting() { Element e = mock(Element.class); when(e.getTagName()).thenReturn("test"); AttributeWithValueStarting attr = new AttributeWithValueStarting("key", "value"); assertEquals(2, attr.length); assertEquals("key", attr.getKey()); assertEquals("value", attr.getValue()); attr = new AttributeWithValueStarting("key", "value1"); assertEquals(2, attr.length); assertEquals("key", attr.getKey()); assertEquals("value1", attr.getValue()); attr = new AttributeWithValueStarting("key", "value2"); assertEquals(2, attr.length); assertEquals("key",
@Test public void testAttributeWithValueStarting() { Element e = mock(Element.class); when(e.getId()).thenReturn("test"); AttributeWithValueStarting a = new AttributeWithValueStarting("foo", "bar"); AttributeWithValueStarting b = new AttributeWithValueStarting("foo", "baz"); verify(e, times(1)).getId(); verify(e, times(1)).Attribute(eq("foo"), anyString()); verify(e, times(1)).Attribute(eq("bar"), anyString()); verify(e, times(1)).Attribute(eq("baz"), anyString()); verifyNoMoreInteractions(e); }
@Test public void testMatchesElement() throws Exception { Element e1 = doc.createElement("foo"); Element e2 = doc.createElement("bar"); assertTrue(evaluator.matches(e1)); assertFalse(evaluator.matches(e2)); e1.setAttribute("foo", "bar"); assertTrue(evaluator.matches(e1)); e2.setAttribute("foo", "bar"); assertTrue(evaluator.matches(e2)); }
@Test public void testAttributes() throws Exception { Element e = doc.createElement("foo"); assertTrue(Evaluator.matches(e)); e.setAttribute("foo", "bar"); assertTrue(Evaluator.matches(e)); e.setAttribute("foo", "baz"); assertTrue(Evaluator.matches(e)); e.setAttribute("foo", "bar"); assertTrue(Evaluator.matches(e)); e.setAttribute("foo", "baz"); assertTrue(Evaluator.matches(e)); e.setAttribute("foo", "bar"); assertTrue(Evaluator.matches(e)); e.setAttribute("foo", "baz"); assertTrue(Evaluator.matches(e)); }
@Test public void AttributeWithValueEnding() { Element e = doc.createElement("test"); e.setAttribute("key", "value"); assertArrayEquals(new String[]{"key=\\"value\\"", "key2=\\"value2\\"", "key3=\\"value3\\"", "key4=\\"value4\\"", "key5=\\"value5\\"", "key6=\\"value6\\"", "key7=\\"value7\\"", "key8=\\"value8\\"", "key9=\\"value9\\"", "key10=\\"value10\\"", "key11=\\"value11\\"", "key12=\\"value12\\"", "key13=
@Test public void testAttributeWithValueEnding() { Element e = doc.createElement("test"); e.setAttribute("key", "value"); assertArrayEquals(new String[]{"key=\\"value\\"", "key2=\\"value2\\"", "key3=\\"value3\\"", "key4=\\"value4\\"", "key5=\\"value5\\"", "key6=\\"value6\\"", "key7=\\"value7\\"", "key8=\\"value8\\"", "key9=\\"value9\\"", "key10=\\"value10\\"", "key11=\\"value11\\"", "key12=\\"value12\\"", "key13
@Test public void testMatchesElement() throws Exception { Element e1 = doc.createElement("foo"); Element e2 = doc.createElement("bar"); assertTrue(evaluator.matches(e1)); assertFalse(evaluator.matches(e2)); e1.setAttribute("foo", "bar"); assertTrue(evaluator.matches(e1)); e2.setAttribute("foo", "bar"); assertTrue(evaluator.matches(e2)); }
@Test public void testAttribute() throws Exception { Element e = doc.createElement("foo"); assertTrue(evaluator.matches(e)); e.setAttribute("foo", "bar"); assertTrue(evaluator.matches(e)); e.setAttribute("foo", "baz"); assertTrue(evaluator.matches(e)); }
@Test public void testIndexLessThan() { for (int i = 0; i < 10; i++) { Element e = new Element("tag" + i); e.setAttribute("key" + i, "value" + i); } Element e2 = new Element("tag" + i); e2.setAttribute("key" + i, "value" + i); e2.setAttribute("key" + i, "value" + i); Element e3 = new Element("tag" + i); e3.setAttribute("key" + i, "value" + i); e3.setAttribute("key" + i, "value" + i); Element e4 = new
@Test public void testIndexLessThan() { Element e1 = new Element("foo"); Element e2 = new Element("bar"); e1.setAttribute("key", "value"); e2.setAttribute("key2", "value2"); e1.setAttribute("key3", "value3"); e2.setAttribute("key4", "value4"); e2.setAttribute("key5", "value5"); Element e3 = new Element("foo"); e3.setAttribute("key", "value"); e3.setAttribute("key6", "value6"); e3.setAttribute("key7", "value7"); e3.setAttribute("key8", "value8
@Test public void testElementMatches() { Element e = doc.createElement("foo"); assertTrue(evaluator.matches(e)); e = doc.createElementNS("foo", "bar"); assertTrue(evaluator.matches(e)); e = doc.createElementNS("foo", "baz"); assertTrue(evaluator.matches(e)); e = doc.createElementNS("foo", "bar"); assertTrue(evaluator.matches(e)); e = doc.createElementNS("foo", "baz"); assertTrue(evaluator.matches(e)); e = doc.createElementNS("foo", "bar"); assertTrue(evaluator.matches(e)); e =
@Test public void testMatches() { Element e = doc.createElement("foo"); assertTrue(Evaluator.matches(e)); e.appendChild(doc.createElement("bar")); assertTrue(Evaluator.matches(e)); e.appendChild(doc.createElement("baz")); assertTrue(Evaluator.matches(e)); e.appendChild(doc.createElement("foo")); assertTrue(Evaluator.matches(e)); e.appendChild(doc.createElement("bar")); assertTrue(Evaluator.matches(e)); e.appendChild(doc.createElement("baz")); assertTrue(Evaluator.matches(e)); e.appendChild(doc.createElement
@Test public void testIndexGreaterThan() { Document doc = Jsoup.parse("<title>Test</title>"); Element title = doc.createElement("title"); title.setAttribute("id", "test"); title.setAttribute("value", "1"); doc.appendChild(title); Element button = doc.createElement("button"); button.setAttribute("id", "test"); button.setAttribute("value", "2"); Element button2 = doc.createElement("button"); button2.setAttribute("id", "test2"); button2.setAttribute("value", "3"); Element button3 = doc.createElement("button"); button3.setAttribute("id", "test
@Test public void testIndexGreaterThan() { Element e1 = new Element("foo"); Element e2 = new Element("bar"); e1.setAttribute("key", "value"); e2.setAttribute("key2", "value2"); e1.setAttribute("key3", "value3"); e2.setAttribute("key4", "value4"); e2.setAttribute("key5", "value5"); Element e3 = new Element("foo"); e3.setAttribute("key", "value"); e3.setAttribute("key6", "value6"); e3.setAttribute("key7", "value7"); e3.setAttribute("key8", "value8
@Test public void testAttributes() throws Exception { Element e1 = doc.createElement("foo"); Element e2 = doc.createElement("bar"); Element e3 = doc.createElement("baz"); assertTrue(evaluator.matches(e1)); assertTrue(evaluator.matches(e2)); assertTrue(evaluator.matches(e3)); assertFalse(evaluator.matches(e1)); }
@Test public void testMatchesElement() { Element e = doc.createElement("foo"); assertTrue(Evaluator.matches(e)); e.appendChild(doc.createElement("bar")); assertFalse(Evaluator.matches(e)); e.appendChild(doc.createElement("foo")); assertFalse(Evaluator.matches(e)); e.appendChild(doc.createElement("bar")); assertTrue(Evaluator.matches(e)); e.appendChild(doc.createElement("foo")); assertTrue(Evaluator.matches(e)); e.appendChild(doc.createElement("bar")); assertTrue(Evaluator.matches(e)); e.appendChild(doc.createElement("
@Test public void testIndexEvaluator() throws Exception { assertEquals(0, Evaluator.IndexEvaluator(0).getIndex()); assertEquals(1, Evaluator.IndexEvaluator(1).getIndex()); assertEquals(2, Evaluator.IndexEvaluator(2).getIndex()); assertEquals(3, Evaluator.IndexEvaluator(3).getIndex()); assertEquals(4, Evaluator.IndexEvaluator(4).getIndex()); assertEquals(5, Evaluator.IndexEvaluator(5).getIndex()); assertEquals(6, Evaluator.IndexEvaluator(6).getIndex()); assertEquals(7, Evaluator.IndexEvaluator(7).getIndex()); assertEquals(8, Evaluator.IndexEvaluator(8).getIndex()); assertEquals
@Test public void testIndexEvaluator() throws Exception { assertEquals(0, Evaluator.IndexEvaluator(0).index); assertEquals(1, Evaluator.IndexEvaluator(1).index); assertEquals(2, Evaluator.IndexEvaluator(2).index); assertEquals(3, Evaluator.IndexEvaluator(3).index); assertEquals(4, Evaluator.IndexEvaluator(4).index); assertEquals(5, Evaluator.IndexEvaluator(5).index); assertEquals(6, Evaluator.IndexEvaluator(6).index); assertEquals(7, Evaluator.IndexEvaluator(7).index); assertEquals(8, Evaluator.IndexEvaluator(8).index); assertEquals(9, Evaluator.IndexEvaluator(9
@Test public void testWhitelist() { Whitelist whitelist = new Whitelist(); whitelist.addBlacklisted("a"); whitelist.addBlacklisted("b"); whitelist.addBlacklisted("c"); whitelist.addBlacklisted("d"); Document doc = Jsoup.parse("<p>This is a test</p>"); Whitelist clean = new Whitelist(); clean.addBlacklisted("a"); clean.addBlacklisted("b"); clean.addBlacklisted("c"); assertEquals("This is a test", TextUtil.stripNewlines(clean.clean(doc))); assertEquals("d", TextUtil.stripNewlines(clean.clean(doc.getDocumentElement())); }
@Test public void testWhitelist() { Whitelist whitelist = new Whitelist(); whitelist.addElement("line"); whitelist.addElement("a"); whitelist.addElement("b"); whitelist.addElement("c"); whitelist.addElement("d"); Document doc = Jsoup.parse("<div><p>Hello</p><b>there</b></div><p>now!</p></div>"); Whitelist clean = new Whitelist(); clean.addWhitelist(whitelist); assertEquals(2, clean.getWhitelist().numAttribsDiscarded()); assertEquals("Hello", clean.getWhitelist().getAttribute("a")); assertEquals("there", clean.getWhitelist().getAttribute("b")
@Test public void testWhitelist() { Whitelist whitelist = new Whitelist(); whitelist.addElement(Tag.valueOf("script"), "script"); whitelist.addElement(Tag.valueOf("script"), "script"); whitelist.addElement(Tag.valueOf("script"), "script"); Whitelist clean = new Whitelist(); clean.addElement(Tag.valueOf("script"), "script"); clean.addElement(Tag.valueOf("script"), "script"); assertEquals("script", clean.clean(Tag.valueOf("script"))); assertEquals("script", clean.clean(Tag.valueOf("script"))); assertEquals("script", clean.clean
@Test public void testRemoveAttributes() { String h = "<div><p><a href=\'/foo\'>Test</a></p></div>"; String cleanHtml = Jsoup.clean(h, Whitelist.basic().removeAttributes("a")); assertEquals("<p><a href=\\"/foo\\">Test</a></p></div>", TextUtil.stripNewlines(cleanHtml)); }
@Test public void testClean() { String h = "<div><p><a href=\'http: String cleanHtml = Jsoup.clean(h, Whitelist.basic().url("http: assertEquals("<p><a href=\\"http: h = "<div><p><a href=\\"http: cleanHtml = Jsoup.clean(h, Whitelist.basic().url("http: assertEquals("<p><a href=\\"http: h = "<div><p><a href=\\"http: cleanHtml = Jsoup.clean(h, Whitelist.basic().url("http: assertEquals("<p><a href=\\"http: h = "<div
@Test public void testClean() { String h = "<div><p><a href=\'http: String cleanHtml = Jsoup.clean(h, Whitelist.basic().url("http: assertEquals("<p><a href=\\"http: TextUtil.stripNewlines(cleanHtml)); h = "<div><p><a href=\\"http: cleanHtml = Jsoup.clean(h, Whitelist.basic().url("http: assertEquals("<p><a href=\\"http: TextUtil.stripNewlines(cleanHtml)); h = "<div><p><a href=\\"http: cleanHtml = Jsoup.clean(h, Whitelist.basic().
@Test public void testCopySafeNodes() { String h = "<div><p><b>Hello</b></p><p><b>there</b></p></div>"; String cleanHtml = Jsoup.clean(h, Whitelist.basic()); assertEquals("<p><b>Hello</b></p><p><b>there</b></p></div>", TextUtil.stripNewlines(cleanHtml)); }
@Test public void testClean() { String h = "<div><p><a href=\'http: String cleanHtml = Jsoup.clean(h, Whitelist.basic().url("http: assertEquals("<p><a href=\\"http: h = "<div><p><a href=\\"http: cleanHtml = Jsoup.clean(h, Whitelist.basic().url("http: assertEquals("<p><a href=\\"http: h = "<div><p><a href=\\"http: cleanHtml = Jsoup.clean(h, Whitelist.basic().url("http: assertEquals("<p><a href=\\"http: h = "<div
@Test public void testCopySafeNodes() throws Exception { Whitelist whitelist = new Whitelist() { @Override public boolean isSafeTag(String tagName) { if (tagName.equals("safe")) { return true; } return false; } @Override public boolean isSafeTag(String tagName) { if (tagName.equals("object")) { return true; } return false; } @Override public boolean isSafeTag(String tagName) { if (tagName.equals("object")) { return true; } return false; } @Override public boolean isSafeTag(String tagName) { if (tagName.equals("object")) { return true; } return false; } @Override public
@Test public void testCopySafeNodes() throws Exception { Whitelist whitelist = new Whitelist() { @Override public boolean isSafeTag(String tagName) { if (tagName.equals("safe")) { return true; } return false; } @Override public boolean isSafeTag(String tagName) { if (tagName.equals("object")) { return true; } return false; } @Override public boolean isSafeTag(String tagName) { if (tagName.equals("object")) { return true; } return false; } @Override public boolean isSafeTag(String tagName) { if (tagName.equals("object")) { return true; } return false; } @Override public
@Test public void testCopySafeNodes() throws Exception { Whitelist whitelist = new Whitelist() { @Override public boolean isSafeTag(String tagName) { if (tagName.equals("safe")) { return true; } return false; } @Override public boolean isSafeTag(String tagName) { if (tagName.equals("object")) { return true; } return false; } @Override public boolean isSafeTag(String tagName) { if (tagName.equals("object")) { return true; } return false; } @Override public boolean isSafeTag(String tagName) { if (tagName.equals("object")) { return true; } return false; } @Override public
@Test public void testCopySafeNodes() throws Exception { Whitelist whitelist = new Whitelist() { @Override public boolean isSafeTag(String tagName) { if (tagName.equals("safe")) { return true; } return false; } @Override public boolean isSafeTag(String tagName) { if (tagName.equals("object")) { return true; } return false; } @Override public boolean isSafeTag(String tagName) { if (tagName.equals("object")) { return true; } return false; } @Override public boolean isSafeTag(String tagName) { if (tagName.equals("object")) { return true; } return false; } @Override public
@Test public void testCopySafeNodes() throws Exception { Whitelist whitelist = new Whitelist() { @Override public boolean isSafeTag(String tagName) { if (tagName.equals("safe")) { return true; } return false; } @Override public boolean isSafeTag(String tagName) { if (tagName.equals("object")) { return true; } return false; } @Override public boolean isSafeTag(String tagName) { if (tagName.equals("object")) { return true; } return false; } @Override public boolean isSafeTag(String tagName) { if (tagName.equals("object")) { return true; } return false; } @Override public
@Test public void testCopySafeNodes() throws Exception { Whitelist whitelist = new Whitelist() { @Override public boolean isSafeTag(String tagName) { if (tagName.equals("safe")) { return true; } return false; } @Override public boolean isSafeTag(String tagName) { if (tagName.equals("object")) { return true; } return false; } @Override public boolean isSafeTag(String tagName) { if (tagName.equals("object")) { return true; } return false; } @Override public boolean isSafeTag(String tagName) { if (tagName.equals("object")) { return true; } return false; } @Override public
@Test public void testCopySafeNodes() throws Exception { Whitelist whitelist = new Whitelist() { @Override public boolean isSafeTag(String tagName) { if (tagName.equals("safe")) { return true; } return false; } @Override public boolean isSafeTag(String tagName) { if (tagName.equals("foo")) { return true; } return false; } @Override public boolean isSafeTag(String tagName) { if (tagName.equals("bar")) { return true; } return false; } @Override public boolean isSafeTag(String tagName) { if (tagName.equals("baz")) { return true; } return false; } @Override
@Test public void testCopySafeNodes() throws Exception { Whitelist whitelist = new Whitelist() { @Override public boolean isSafeTag(String tagName) { if (tagName.equals("safe")) { return true; } return false; } @Override public boolean isSafeTag(String tagName) { if (tagName.equals("object")) { return true; } return false; } @Override public boolean isSafeTag(String tagName) { if (tagName.equals("object")) { return true; } return false; } @Override public boolean isSafeTag(String tagName) { if (tagName.equals("object")) { return true; } return false; } @Override public
@Test public void testCopySafeNodes() throws Exception { Whitelist whitelist = new Whitelist() { @Override public boolean isSafeTag(String tagName) { if (tagName.equals("safe")) { return true; } return false; } @Override public boolean isSafeTag(String tagName) { if (tagName.equals("object")) { return true; } return false; } @Override public boolean isSafeTag(String tagName) { if (tagName.equals("object")) { return true; } return false; } @Override public boolean isSafeTag(String tagName) { if (tagName.equals("object")) { return true; } return false; } @Override public
@Test public void testCopySafeNodes() throws Exception { Whitelist whitelist = new Whitelist() { @Override public boolean isSafeTag(String tagName) { return tagName.equals("safe"); } @Override public boolean isSafeTag(String tagName) { return tagName.equals("tag1"); } @Override public boolean isSafeTag(String tagName) { return tagName.equals("tag2"); } }; Whitelist copySafe = new Whitelist() { @Override public boolean isSafeTag(String tagName) { return tagName.equals("safe"); } @Override public boolean isSafeTag(String tagName) { return tagName.equals("tag3"); } @Override public boolean isSafeTag(String tagName) {
@Test public void testCopySafeNodes() throws Exception { Whitelist whitelist = new Whitelist() { @Override public boolean isSafeTag(String tagName) { if (tagName.equals("safe")) { return true; } return false; } @Override public boolean isSafeTag(String tagName) { if (tagName.equals("text")) { return true; } return false; } @Override public boolean isSafeTag(String tagName) { if (tagName.equals("object")) { return true; } return false; } @Override public boolean isSafeTag(String tagName) { if (tagName.equals("object")) { return true; } return false; } @Override public
@Test public void testCopySafeNodes() throws Exception { Whitelist whitelist = new Whitelist() { @Override public boolean isSafeTag(String tagName) { if (tagName.equals("safe")) { return true; } return false; } @Override public boolean isSafeTag(String tagName) { if (tagName.equals("object")) { return true; } return false; } @Override public boolean isSafeTag(String tagName) { if (tagName.equals("object")) { return true; } return false; } @Override public boolean isSafeTag(String tagName) { if (tagName.equals("object")) { return true; } return false; } @Override public
@Test public void testCopySafeNodes() throws Exception { Whitelist whitelist = new Whitelist() { @Override public boolean isSafeTag(String tagName) { return tagName.equals("safe"); } @Override public boolean isSafeTag(String tagName) { return tagName.equals("tag1"); } @Override public boolean isSafeTag(String tagName) { return tagName.equals("tag2"); } }; Whitelist copySafe = new Whitelist() { @Override public boolean isSafeTag(String tagName) { return tagName.equals("safe"); } @Override public boolean isSafeTag(String tagName) { return tagName.equals("tag3"); } @Override public boolean isSafeTag(String tagName) {
@Test public void testCopySafeNodes() throws Exception { Whitelist whitelist = new Whitelist() { @Override public boolean isSafeTag(String tagName) { return tagName.equals("safe"); } @Override public boolean isSafeTag(String tagName) { return tagName.equals("html"); } @Override public boolean isSafeTag(String tagName) { return tagName.equals("head"); } }; String html = "<html><head></head><body></body></html>"; Document doc = Jsoup.parse(html); Element bodyEl = doc.getDocumentElement(); Element headEl = bodyEl.appendChild(doc.createElement("body")); Element head = bodyEl.appendChild(
@Test public void testCopySafeNodes() throws Exception { Whitelist whitelist = new Whitelist() { @Override public boolean isSafeTag(String tagName) { if (tagName.equals("text")) { return true; } return false; } @Override public boolean isSafeTag(String tagName) { if (tagName.equals("object")) { return true; } return false; } @Override public boolean isSafeTag(String tagName) { if (tagName.equals("object")) { return true; } return false; } @Override public boolean isSafeTag(String tagName) { if (tagName.equals("object")) { return true; } return false; } @Override public
@Test public void testCopySafeNodes() throws Exception { Whitelist whitelist = new Whitelist() { @Override public boolean isSafeTag(String tagName) { if (tagName.equals("safe")) { return true; } return false; } @Override public boolean isSafeTag(String tagName) { if (tagName.equals("object")) { return true; } return false; } @Override public boolean isSafeTag(String tagName) { if (tagName.equals("object")) { return true; } return false; } @Override public boolean isSafeTag(String tagName) { if (tagName.equals("object")) { return true; } return false; } @Override public
@Test public void testCopySafeNodes() throws Exception { Whitelist whitelist = new Whitelist() { @Override public boolean isSafeTag(String tagName) { if (tagName.equals("safe")) { return true; } return false; } @Override public boolean isSafeTag(String tagName) { if (tagName.equals("object")) { return true; } return false; } @Override public boolean isSafeTag(String tagName) { if (tagName.equals("object")) { return true; } return false; } @Override public boolean isSafeTag(String tagName) { if (tagName.equals("object")) { return true; } return false; } @Override public
@Test public void createSafeElement() { Whitelist whitelist = new Whitelist() { @Override public boolean isSafeAttribute(String tagName, Element sourceEl, Attribute sourceAttr) { return true; } @Override public boolean isSafeAttribute(String tagName, Element sourceEl, Attribute sourceAttr) { return false; } @Override public Attributes getAttributes(String tagName, Element sourceEl, Attribute sourceAttr) { return null; } @Override public boolean isSafeAttribute(String tagName, Element sourceEl, Attribute sourceAttr) { return false; } @Override public boolean isSafeAttribute(String tagName, Element sourceEl, Attribute sourceAttr) { return false; } @Override public boolean isSafeAttribute(String tagName, Element
@Test public void createSafeElement() { Whitelist whitelist = new Whitelist() { @Override public boolean isSafeAttribute(String tagName, Element sourceEl, Attribute sourceAttr) { return true; } @Override public boolean isSafeAttribute(String tagName, Element sourceEl, Attribute sourceAttr) { return false; } @Override public Attributes getAttributes(String tagName, Element sourceEl, Attribute sourceAttr) { return null; } @Override public boolean isEnforcedAttributes(String tagName, Element sourceEl, Attribute sourceAttr) { return false; } @Override public boolean isValid(Document doc) { return false; } @Override public boolean isValid(Document doc) { return false; } @Override public void clean(Document
@Test public void testCreateSafeElement() { Whitelist whitelist = new Whitelist() { @Override public boolean isSafeAttribute(String tagName, Element sourceEl, Attribute sourceAttr) { return true; } @Override public Attributes getEnforcedAttributes(String tagName, Element sourceEl, Attribute sourceAttr) { return new Attributes(); } @Override public boolean isSafeAttribute(String tagName, Element sourceEl, Attribute sourceAttr) { return true; } @Override public boolean isSafeAttribute(String tagName, Element sourceEl, Attribute sourceAttr) { return true; } @Override public boolean isSafeAttribute(String tagName, Element sourceEl, Attribute sourceAttr) { return true; } @Override public boolean isSafeAttribute
@Test public void testCopySafeNodes() { Whitelist whitelist = new Whitelist() { @Override public boolean isSafeAttribute(String tagName, Element sourceEl, Attribute sourceAttr) { return true; } @Override public boolean isSafeAttribute(String tagName, Element sourceEl, Attribute sourceAttr) { return false; } @Override public Attributes getAttributes(String tagName, Element sourceEl, Attribute sourceAttr) { return null; } @Override public boolean isEnforcedAttributes(String tagName, Element sourceEl, Attribute sourceAttr) { return false; } @Override public boolean isValid(Document doc) { return false; } @Override public boolean isValid(Document doc) { return false; } @Override public void clean(
@Test public void createSafeElement() { Whitelist whitelist = new Whitelist() { @Override public boolean isSafeAttribute(String tagName, Element sourceEl, Attribute sourceAttr) { return true; } @Override public boolean isSafeAttribute(String tagName, Element sourceEl, Attribute sourceAttr) { return false; } @Override public Attributes getAttributes(String tagName, Element sourceEl, Attribute sourceAttr) { return null; } @Override public boolean isEnforcedAttributes(String tagName, Element sourceEl, Attribute sourceAttr) { return false; } @Override public boolean isValid(Document doc) { return false; } @Override public boolean isValid(Document doc) { return false; } @Override public void clean(Document
@Test public void createSafeElement() { Whitelist whitelist = new Whitelist() { @Override public boolean isSafeAttribute(String tagName, Element sourceEl, Attribute sourceAttr) { return true; } @Override public Attributes getEnforcedAttributes(String tagName, Element sourceEl, Attribute sourceAttr) { return new Attributes(); } @Override public boolean isSafeAttribute(String tagName, Element sourceEl, Attribute sourceAttr) { return true; } @Override public boolean isSafeAttribute(String tagName, Element sourceEl, Attribute sourceAttr) { return true; } @Override public boolean isSafeAttribute(String tagName, Element sourceEl, Attribute sourceAttr) { return true; } @Override public boolean isSafeAttribute(
@Test public void createSafeElement() { Whitelist whitelist = new Whitelist() { @Override public boolean isSafeAttribute(String tagName, Element sourceEl, Attribute sourceAttr) { return true; } @Override public Attributes getEnforcedAttributes(String tagName, Element sourceEl, Attribute sourceAttr) { return new Attributes(); } @Override public boolean isSafeAttribute(String tagName, Element sourceEl, Attribute sourceAttr) { return true; } @Override public boolean isSafeAttribute(String tagName, Element sourceEl, Attribute sourceAttr) { return true; } @Override public boolean isSafeAttribute(String tagName, Element sourceEl, Attribute sourceAttr) { return true; } @Override public boolean isSafeAttribute(
@Test public void createSafeElement() { Whitelist whitelist = new Whitelist() { @Override public boolean isSafeAttribute(String tagName, Element sourceEl, Attribute sourceAttr) { return true; } @Override public boolean isSafeAttribute(String tagName, Element sourceEl, Attribute sourceAttr) { return false; } @Override public boolean isSafeAttribute(String tagName, Element sourceEl, Attribute sourceAttr) { return false; } @Override public boolean isSafeAttribute(String tagName, Element sourceEl, Attribute sourceAttr) { return true; } @Override public boolean isSafeAttribute(String tagName, Element sourceEl, Attribute sourceAttr) { return false; } @Override public Attributes getAttributes() { return new Attributes
@Test public void createSafeElement() { Whitelist whitelist = new Whitelist() { @Override public boolean isSafeAttribute(String tagName, Element sourceEl, Attribute sourceAttr) { return true; } @Override public boolean isSafeAttribute(String tagName, Element sourceEl, Attribute sourceAttr) { return false; } @Override public Attributes getAttributes(String tagName, Element sourceEl, Attribute sourceAttr) { return null; } @Override public boolean isEnforcedAttributes(String tagName, Element sourceEl, Attribute sourceAttr) { return false; } @Override public boolean isValid(Document doc) { return false; } @Override public boolean isValid(Document doc) { return false; } @Override public void clean(Document
@Test public void testCopySafeNodes() { Whitelist whitelist = new Whitelist() { @Override public boolean isSafeAttribute(String tagName, Element sourceEl, Attribute sourceAttr) { return true; } @Override public Attributes enforcedAttributes(String tagName, Element sourceEl, Attribute sourceAttr) { return new Attributes(); } @Override public boolean isSafeAttribute(String tagName, Element sourceEl, Attribute sourceAttr) { return true; } @Override public Attributes enforcedAttributes(String tagName, Element sourceEl, Attribute sourceAttr) { return new Attributes(); } @Override public boolean isSafeAttribute(String tagName, Element sourceEl, Attribute sourceAttr) { return true; } @Override public boolean isSafeAttribute
@Test public void createSafeElement() { Whitelist whitelist = new Whitelist() { @Override public boolean isSafeAttribute(String tagName, Element sourceEl, Attribute sourceAttr) { return true; } @Override public Attributes getEnforcedAttributes(String tagName, Element sourceEl, Attribute sourceAttr) { return new Attributes(); } @Override public boolean isSafeAttribute(String tagName, Element sourceEl, Attribute sourceAttr) { return true; } @Override public boolean isSafeAttribute(String tagName, Element sourceEl, Attribute sourceAttr) { return true; } @Override public boolean isSafeAttribute(String tagName, Element sourceEl, Attribute sourceAttr) { return true; } @Override public boolean isSafeAttribute(
@Test public void createSafeElement() { Whitelist whitelist = new Whitelist() { @Override public boolean isSafeAttribute(String tagName, Element sourceElement, Attribute sourceAttr) { return true; } @Override public boolean isSafeAttribute(String tagName, Element sourceElement, Attribute sourceAttr) { return false; } @Override public Attributes getAttributes(String tagName, Element sourceElement, Attribute sourceAttr) { return null; } @Override public boolean isEnforcedAttributes(String tagName, Element sourceElement, Attribute sourceAttr) { return false; } @Override public boolean isValid(Document doc) { return false; } @Override public boolean isValid(Document doc) { return false; } @Override public void clean(Document
@Test public void testElementMeta() throws Exception { Whitelist whitelist = new Whitelist() .addAttributes("foo", "bar", "baz"); Element el = XmlUtil.parse(XML); ElementMeta meta = new ElementMeta(el, 0); assertEquals(0, meta.numAttribsDiscarded); assertEquals(0, meta.isValid(doc)); assertEquals(0, meta.copySafeNodes(doc, el).size()); assertEquals(1, meta.isValid(doc)); assertEquals(1, meta.copySafeNodes(doc, el).size()); assertEquals(2, meta.isValid(doc)); assertEquals(2, meta.copySafeNodes(doc, el).
@Test public void testElementMeta() { Whitelist whitelist = new Whitelist() .addAttributes("foo", "bar", "baz"); Element el = Jsoup.parse("<p>This is a test</p>"); ElementMeta elMeta = new ElementMeta(el, 0); assertEquals("This is a test", elMeta.isValid(doc)); assertEquals("baz", elMeta.clean(doc, doc.createElement("p"))); elMeta = new ElementMeta(el, 1); assertEquals("This is a test", elMeta.isValid(doc, doc.createElement("p"))); assertEquals("baz", elMeta.clean(doc,
@Test public void testElementMeta() { Whitelist whitelist = new Whitelist() .addAttributes("foo", "bar", "baz"); Element el = Jsoup.parse("<p>This is a test</p>"); ElementMeta dom = new ElementMeta(el, 0); assertTrue(dom.isValid(new Element("p"))); assertTrue(dom.isValid(new Element("baz"))); assertTrue(dom.isValid(new Element("baz"))); assertTrue(dom.isValid(new Element("baz"))); assertTrue(dom.isValid(new Element("baz"))); assertTrue(dom.isValid(new Element("baz
@Test public void addFirst() { TokenQueue tq = new TokenQueue("One two three four"); tq.addFirst(\' \'); String data = tq.toString(); assertEquals("One two three four", data); }
@Test public void addFirst() { TokenQueue tq = new TokenQueue("One Two Three"); tq.consumeWord(); tq.addFirst("One"); tq.addFirst("Two"); tq.addFirst("Three"); String data = tq.toString(); assertEquals("One Two Three", data); }
@Test public void addFirst() { TokenQueue tq = new TokenQueue("One Two Three"); tq.consumeWord(); tq.addFirst("One"); tq.addFirst("Two"); tq.addFirst("Three"); String data = tq.toString(); assertEquals("One Two Three", data); }
@Test public void addFirst() { TokenQueue tq = new TokenQueue("One Two Three"); tq.consumeWord(); tq.addFirst("One"); tq.consumeWord(); String data = tq.toString(); assertEquals("One Two Three", data); }
@Test public void addFirst() { TokenQueue tq = new TokenQueue("One Two Three"); tq.consumeWord(); tq.consumeWord(); tq.addFirst("One"); tq.addFirst("Two"); tq.consumeWord(); String data = tq.toString(); assertEquals("One Two Three", data); }
@Test public void addFirst() { TokenQueue tq = new TokenQueue("One Two Three"); tq.consumeWord(); tq.addFirst("One"); tq.addFirst("Two"); tq.addFirst("Three"); String data = tq.toString(); assertEquals("One Two Three", data); }
@Test public void combinator() { Document doc = Jsoup.parse("<div><p>One</p><p>Two</p><p>Three</p></div><div><p>Four</p>"); Elements ps = doc.select("p:gt(0)"); assertEquals(3, ps.size()); assertEquals("Two", ps.get(0).text()); assertEquals("Three", ps.get(1).text()); assertEquals("Four", ps.get(2).text()); }
@Test public void combinator() { Document doc = Jsoup.parse("<div><p>One</p><p>Two</p><p>Three</p></div><div><p>Four</p>"); Elements ps = doc.select("p:gt(0)"); assertEquals(3, ps.size()); assertEquals("Two", ps.get(0).text()); assertEquals("Three", ps.get(1).text()); assertEquals("Four", ps.get(2).text()); }
@Test public void combinator() { Document doc = Jsoup.parse("<div><p>One</p><p>Two</p><p>Three</p><p>Four</p>"); Elements ps = doc.select("p:gt(0)"); assertEquals(3, ps.size()); assertEquals("One", ps.get(0).tagName()); assertEquals("Two", ps.get(1).tagName()); assertEquals("Three", ps.get(2).tagName()); assertEquals("Four", ps.get(3).tagName()); }
@Test public void findElements() { Document doc = Jsoup.parse("<div><p>Hello <b>there</b></p> jsoup <p>now!</p></div>"); Elements ps = doc.select("p"); assertEquals(2, ps.size()); assertEquals("Hello ", ps.get(0).text()); assertEquals("there", ps.get(1).text()); }
@Test public void findElements() { Document doc = Jsoup.parse("<div><p>One</p><p>Two</p><p>Three</p></div><div><p>Four</p>"); Elements ps = doc.select("p:lt(2)"); assertEquals(3, ps.size()); Elements ps2 = ps.select("p:gt(2)"); assertEquals(2, ps2.size()); assertEquals("Two", ps2.get(0).text()); assertEquals("Three", ps2.get(1).text()); assertEquals("Four", ps2.get(2).text()); }
@Test public void findElements() { Document doc = Jsoup.parse("<div><p>One</p><p>Two</p><p>Three</p></div>"); Elements ps = doc.select("p:gt(0)"); assertEquals(2, ps.size()); Elements ps2 = ps.select("p:lt(0)"); assertEquals(1, ps2.size()); assertEquals("Two", ps2.get(0).text()); assertEquals("Three", ps2.get(1).text()); }
@Test public void findElements() { Document doc = Jsoup.parse("<div><p>One</p><p>Two</p><p>Three</p></div><div><p>Four</p>"); Elements ps = doc.select("p:gt(0)"); assertEquals(2, ps.size()); Elements ps2 = ps.select("p:lt(0)"); assertEquals(1, ps2.size()); assertEquals("Two", ps2.get(0).text()); assertEquals("Three", ps2.get(1).text()); }
@Test public void byAttribute() { Document doc = Jsoup.parse("<p id=1>Hello <b>there</b> now</p>"); Elements ps = doc.select("p"); assertEquals(2, ps.size()); assertEquals("1", ps.get(0).id()); assertEquals("2", ps.get(1).id()); }
@Test public void byAttribute() { Document doc = Jsoup.parse("<p id=1>Hello <b>there</b> now</p>"); Elements ps = doc.select("p").byAttribute(); assertEquals(2, ps.size()); assertEquals("1", ps.get(0).id()); assertEquals("2", ps.get(1).id()); }
@Test public void byAttribute() { Document doc = Jsoup.parse("<p id=1>Hello <b>there</b> now</p>"); Elements ps = doc.select("p"); assertEquals(2, ps.size()); assertEquals("1", ps.get(0).id()); assertEquals("2", ps.get(1).id()); }
@Test public void byAttribute() { Document doc = Jsoup.parse("<p id=1>Hello <b>there</b> now</p>"); Elements ps = doc.select("p").byAttribute(); assertEquals(2, ps.size()); assertEquals("1", ps.get(0).id()); assertEquals("2", ps.get(1).id()); }
@Test public void byAttribute() { Document doc = Jsoup.parse("<p id=1>Hello <b>there</b> now</p>"); Elements ps = doc.select("p"); assertEquals(2, ps.size()); assertEquals("1", ps.get(0).id()); assertEquals("2", ps.get(1).id()); }
@Test public void byAttribute() { Document doc = Jsoup.parse("<p id=1>Hello <b>there</b> now</p>"); Elements ps = doc.select("p").byAttribute(); assertEquals(2, ps.size()); assertEquals("1", ps.get(0).id()); assertEquals("2", ps.get(1).id()); }
@Test public void byAttribute() { Document doc = Jsoup.parse("<p id=1>Hello <b>there</b> now</p>"); Elements ps = doc.select("p"); assertEquals(2, ps.size()); assertEquals("1", ps.get(0).id()); assertEquals("2", ps.get(1).id()); }
@Test public void byAttribute() { Document doc = Jsoup.parse("<p id=1>Hello <b>there</b> now</p>"); Elements ps = doc.select("p").byAttribute(); assertEquals(2, ps.size()); assertEquals("1", ps.get(0).id()); assertEquals("2", ps.get(1).id()); }
@Test public void indexLessThan() { String h = "<ol><li>One<li>Two<li>Three</ol>"; Document doc = Jsoup.parse(h); assertEquals("<ol><li>One</li><li>Two</li><li>Three</li></ol>", doc.select("ol > li").indexLessThan().toString()); assertEquals("<ol><li>One</li><li>Two</li><li>Three</li></ol>", TextUtil.stripNewlines(doc.body().html())); }
@Test public void indexLessThan() { Document doc = Jsoup.parse("<div><p>One</p><p>Two</p><p>Three</p></div><div><p>Four</p>"); Elements ps = doc.select("p:eq(0)"); assertEquals(3, ps.size()); assertEquals("One", ps.get(0).text()); assertEquals("Four", ps.get(1).text()); assertEquals("Five", ps.get(2).text()); }
@Test public void indexGreaterThan() { String h = "<ol><li>One<li>Two<li>Three</ol>"; Document doc = Jsoup.parse(h); assertEquals("<ol><li>One</li><li>Two</li><li>Three</li></ol>", doc.select("ol > li").indexGreaterThan().toString()); assertEquals("<ol><li>One</li><li>Two</li><li>Three</li></ol>", TextUtil.stripNewlines(doc.body().html())); }
@Test public void indexGreaterThan() { Document doc = Jsoup.parse("<div><p>1</p><p>2</p></div><div><p>3</p>"); Elements ps = doc.select("p:gt(0)"); assertEquals(3, ps.size()); assertEquals("1", ps.get(0).text()); assertEquals("2", ps.get(1).text()); assertEquals("3", ps.get(2).text()); }
@Test public void consumeIndex() { Document doc = Jsoup.parse("<div><p>One</p><p>Two</p><p>Three</p></div><div><p>Four</p>"); Elements ps = doc.select("p:eq(0)"); assertEquals(3, ps.size()); assertEquals("One", ps.get(0).text()); assertEquals("Four", ps.get(1).text()); assertEquals("Five", ps.get(2).text()); assertEquals("Seven", ps.get(3).text()); assertEquals("Seven", ps.get(4).text()); }
@Test public void consumeIndex() { Document doc = Jsoup.parse("<div><p>One</p>...<p>Two</p>...<p>Three</p>"); Elements ps = doc.select("p:eq(0)"); assertEquals(3, ps.size()); assertEquals("One", ps.get(0).text()); assertEquals("Two", ps.get(1).text()); assertEquals("Three", ps.get(2).text()); }
@Test public void consumeIndex() { Document doc = Jsoup.parse("<div><p>One</p><p>Two</p><p>Three</p></div><div><p>Four</p>"); Elements ps = doc.select("p:eq(0)"); assertEquals(3, ps.size()); assertEquals("One", ps.get(0).text()); assertEquals("Two", ps.get(1).text()); assertEquals("Three", ps.get(2).text()); assertEquals("Four", ps.get(3).text()); }
@Test public void consumeIndex() { Document doc = Jsoup.parse("<div><p>One</p><p>Two</p><p>Three</p></div>"); Elements ps = doc.select("p:eq(0)"); assertEquals(1, ps.size()); assertEquals("One", ps.get(0).text()); assertEquals("Two", ps.get(1).text()); assertEquals("Three", ps.get(2).text()); }
@Test public void consumeIndex() { Document doc = Jsoup.parse("<div><p>One</p><p>Two</p><p>Three</p></div><div><p>Four</p>"); Elements ps = doc.select("p:eq(0)"); assertEquals(1, ps.size()); assertEquals("One", ps.get(0).text()); assertEquals("Four", ps.get(1).text()); assertEquals("Five", ps.get(2).text()); assertEquals("Seven", ps.get(3).text()); assertEquals("Seven", ps.get(4).text()); }
@Test public void filterForAdjacentSiblings() { Document doc = Jsoup.parse("<div><span>One</span><span>Two</span><span>Three</span></div>"); Elements siblings = doc.select("span > span"); assertEquals(3, siblings.size()); assertEquals("One", siblings.get(0).text()); assertEquals("Two", siblings.get(1).text()); assertEquals("Three", siblings.get(2).text()); }
@Test public void testFilterForAdjacentSiblings() { Document doc = Jsoup.parse("<div><span>One</span><span>Two</span><span>Three</span></div>"); Elements els = doc.select("span > span"); assertEquals(3, els.size()); assertEquals("One", els.get(0).text()); assertEquals("Two", els.get(1).text()); assertEquals("Three", els.get(2).text()); }
@Test public void filterForAdjacentSiblings() { Document doc = Jsoup.parse("<div><span>One</span><span>Two</span><span>Three</span></div>"); Elements els = doc.select("span"); assertEquals(3, els.size()); assertEquals("One", els.get(0).text()); assertEquals("Two", els.get(1).text()); assertEquals("Three", els.get(2).text()); }
@Test public void filterForAdjacentSiblings() { Document doc = Jsoup.parse("<div><span>One</span><span>Two</span><span>Three</span></div>"); Elements els = doc.select("span"); assertEquals(3, els.size()); assertEquals("One", els.get(0).text()); assertEquals("Two", els.get(1).text()); assertEquals("Three", els.get(2).text()); }
@Test public void testFilterForAdjacentSiblings() { Document doc = Jsoup.parse("<div><span>One</span><span>Two</span><span>Three</span></div>"); Elements els = doc.select("span > span"); assertEquals(3, els.size()); assertEquals("One", els.get(0).text()); assertEquals("Two", els.get(1).text()); assertEquals("Three", els.get(2).text()); els = doc.select("span > span"); assertEquals(3, els.size()); assertEquals("One", els.get(0).text()); assertEquals("Two", els.get(1).text
@Test public void testFilterForAdjacentSiblings() { Document doc = Jsoup.parse("<div><span>One</span><span>Two</span><span>Three</span></div>"); Elements els = doc.select("span"); assertEquals(3, els.size()); assertEquals("One", els.get(0).text()); assertEquals("Two", els.get(1).text()); assertEquals("Three", els.get(2).text()); }
@Test public void testFilterForAdjacentSiblings() { Document doc = Jsoup.parse("<div><span>One</span><span>Two</span><span>Three</span></div>"); Elements els = doc.select("span > span"); assertEquals(3, els.size()); assertEquals("One", els.get(0).text()); assertEquals("Two", els.get(1).text()); assertEquals("Three", els.get(2).text()); els = doc.select("span > span"); assertEquals(3, els.size()); assertEquals("One", els.get(0).text()); assertEquals("Two", els.get(1).text
@Test public void testFilterForAdjacentSiblings() { Document doc = Jsoup.parse("<div><span>One</span><span>Two</span><span>Three</span></div>"); Elements siblings = doc.select("span > span"); assertEquals(3, siblings.size()); assertEquals("One", siblings.get(0).text()); assertEquals("Two", siblings.get(1).text()); assertEquals("Three", siblings.get(2).text()); }
@Test public void testFilterForAdjacentSiblings() { Document doc = Jsoup.parse("<div><span>One</span><span>Two</span><span>Three</span></div>"); Elements els = doc.select("span"); assertEquals(3, els.size()); assertEquals("One", els.get(0).text()); assertEquals("Two", els.get(1).text()); assertEquals("Three", els.get(2).text()); Elements siblings = els.filterForAdjacentSiblings(null, null); assertEquals(3, siblings.size()); assertEquals("Two", siblings.get(0).text()); assertEquals("Three", siblings.get(
@Test public void testFilterForAdjacentSiblings() { Document doc = Jsoup.parse("<div><span>One</span><span>Two</span><span>Three</span></div>"); Elements siblings = doc.select("span > span"); assertEquals(3, siblings.size()); assertEquals("One", siblings.get(0).text()); assertEquals("Two", siblings.get(1).text()); assertEquals("Three", siblings.get(2).text()); }
@Test public void testParagraphs() { Document doc = Jsoup.parse("<p>Hello\\nthere</p>"); Element p = doc.select("p").first(); TextNode tn = (TextNode) p.childNode(0); TextNode tn2 = (TextNode) tn.childNode(1); TextNode tn3 = (TextNode) tn2.childNode(2); TextNode tn4 = (TextNode) tn3.childNode(3); TextNode tn5 = (TextNode) tn5.childNode(4); TextNode tn6 = (TextNode) tn6.childNode(5); TextNode tn7 = (TextNode) tn7.childNode(6
@Test public void testTextNode() { TextNode one = TextNode.createTextNode("one"); TextNode two = TextNode.createTextNode("two"); TextNode three = TextNode.createTextNode("three"); TextNode four = TextNode.createTextNode("four"); TextNode five = TextNode.createTextNode("five"); TextNode six = TextNode.createTextNode("six"); TextNode seven = TextNode.createTextNode("seven"); TextNode eight = TextNode.createTextNode("eight"); TextNode nine = TextNode.createTextNode("nine"); TextNode nine2 = TextNode.createTextNode("
@Test public void testParagraphs() { Document doc = Jsoup.parse("<p>Hello\\nthere</p>"); Element p = doc.select("p").first(); TextNode tn = (TextNode) p.childNode(0); TextNode tn2 = (TextNode) tn.childNode(1); TextNode tn3 = (TextNode) tn2.childNode(2); TextNode tn4 = (TextNode) tn3.childNode(3); TextNode tn5 = (TextNode) tn5.childNode(4); TextNode tn6 = (TextNode) tn6.childNode(5); TextNode tn7 = (TextNode) tn7.childNode(6
@Test public void text() { String text = "<p>Hello there.</p>"; String expected = "<p>Hello there.</p>"; assertEquals(expected, TextUtil.stripNewlines(text)); text = "<p>Hello there.</p>"; expected = "<p>Hello there.</p>"; assertEquals(expected, TextUtil.stripNewlines(text)); text = "<p>Hello there.</p>"; expected = "<p>Hello there.</p>"; assertEquals(expected, TextUtil.stripNewlines(text)); text = "<p>Hello there.</p>"; expected = "<p>Hello there.</p>"; assertEquals(expected, TextUtil.strip
@Test public void testOuterHtml() { String text = "<div><p>Hello there</p></div>"; String expected = "<div><p>Hello there</p></div>"; assertEquals(expected, TextUtil.stripNewlines(text)); }
@Test public void text() { Document doc = Jsoup.parse("<div>Hello there</div>"); Element div = doc.select("div").first(); TextNode tn = (TextNode) div.childNode(0); tn.text("there!"); assertEquals("Hello there!", tn.getWholeText()); }
@Test public void text() { TextNode one = new TextNode("one", ""); TextNode two = new TextNode("two", ""); TextNode three = new TextNode("three", ""); TextNode four = new TextNode("four", ""); TextNode five = new TextNode("five", ""); TextNode six = new TextNode("six", ""); TextNode seven = new TextNode("seven", ""); TextNode eight = new TextNode("eight", ""); TextNode nine = new TextNode("nine", ""); TextNode nine2 = new TextNode("nine2", ""); TextNode nine3 = new Text
@Test public void text() { TextNode one = new TextNode("one", ""); TextNode two = new TextNode("two", ""); TextNode three = new TextNode("three", ""); TextNode four = new TextNode("four", ""); TextNode five = new TextNode("five", ""); TextNode six = new TextNode("six", ""); TextNode seven = new TextNode("seven", ""); TextNode eight = new TextNode("eight", ""); TextNode nine = new TextNode("nine", ""); TextNode nine2 = new TextNode("nine2", ""); TextNode nine3 = new Text
@Test public void testGetWholeText() { TextNode one = new TextNode("one", ""); TextNode two = new TextNode("two", ""); TextNode three = new TextNode("three", ""); TextNode four = new TextNode("four", ""); assertEquals("one", one.getWholeText()); assertEquals("two", two.getWholeText()); assertEquals("three", three.getWholeText()); assertEquals("four", four.getWholeText()); }
@Test public void testGetWholeText() { TextNode one = new TextNode("one", ""); TextNode two = new TextNode("two", ""); TextNode three = new TextNode("three", ""); TextNode four = new TextNode("four", ""); TextNode five = new TextNode("five", ""); TextNode six = new TextNode("six", ""); TextNode seven = new TextNode("seven", ""); assertEquals("one", one.getWholeText()); assertEquals("two", two.getWholeText()); assertEquals("three", three.getWholeText()); assertEquals("four", four.getWh
@Test public void isBlank() { TextNode one = new TextNode("one", ""); TextNode two = new TextNode("two", ""); TextNode three = new TextNode("three", ""); TextNode four = new TextNode("four", ""); TextNode five = new TextNode("five", ""); assertTrue(one.isBlank()); assertTrue(two.isBlank()); assertTrue(three.isBlank()); assertFalse(four.isBlank()); assertFalse(five.isBlank()); }
@Test public void testIsBlank() { TextNode one = new TextNode("one", ""); TextNode two = new TextNode("two", ""); TextNode three = new TextNode("three", ""); TextNode four = new TextNode("four", ""); TextNode five = new TextNode("five", ""); assertFalse(one.isBlank()); assertFalse(two.isBlank()); assertFalse(three.isBlank()); assertFalse(four.isBlank()); assertFalse(five.isBlank()); assertTrue(one.isBlank()); assertTrue(two.isBlank()); assertTrue(three.isBlank()); assertTrue(five.isBlank
@Test public void testOuterHtml() { final String text = "<div><p>Hello <b>there</b>!</p></div>"; final StringBuilder accum = new StringBuilder(); TextNode tn = new TextNode(text, "http: tn.outerHtml(accum); assertEquals(text, tn.text()); accum.clear(); TextNode tn2 = new TextNode(text, "http: tn2.outerHtml(accum); assertEquals(text, tn2.text()); accum.clear(); TextNode tn3 = new TextNode(text, "http: tn3.outerHtml(accum); assertEquals(text, tn3.text()); accum.clear();
@Test public void testOuterHtml() { Document doc = Jsoup.parse("<div><p>Hello there</p></div>"); TextNode tn = doc.select("div").first(); tn.outerHtml(new StringBuilder()); assertEquals("Hello there", tn.getWholeText()); }
@Test public void testOuterHtml() { Document doc = Jsoup.parse("<div><p>Hello there</p></div>"); Element div = doc.select("div").first(); TextNode tn = (TextNode) div.childNode(0); tn.outerHtml(new StringBuilder()); assertEquals("Hello there", tn.getWholeText()); }
@Test public void testOuterHtml() { Document doc = Jsoup.parse("<div><p>Hello there</p></div>"); Element div = doc.select("div").first(); TextNode tn = (TextNode) div.childNode(0); tn.outerHtml(new StringBuilder()); assertEquals("Hello there", tn.getWholeText()); }
@Test public void testOuterHtml() { Document doc = Jsoup.parse("<div><p>Hello there</p></div>"); Element div = doc.select("div").first(); TextNode tn = (TextNode) div.childNode(0); tn.outerHtml(new StringBuilder()); assertEquals("Hello there", tn.getWholeText()); }
@Test public void testOuterHtml() { final String text = "<div><p>Hello there</p></div>"; final StringBuilder accum = new StringBuilder(); TextNode tn = new TextNode(text, "http: tn.outerHtml(accum); assertEquals("<html><head></head><body><div>Hello there</div></body></html>", accum.toString()); accum.setLength(0); tn.outerHtml(accum); assertEquals("<html><head></head><body><div>Hello there</div></body></html>", accum.toString()); accum.setLength(0); tn.outerHtml(accum); assertEquals("<html><head></
@Test public void testCreateFromEncoded() { TextNode one = TextEscapeUtils.createFromEncoded("one", ""); TextNode two = TextEscapeUtils.createFromEncoded("two", ""); TextNode three = TextEscapeUtils.createFromEncoded("three", ""); TextNode four = TextEscapeUtils.createFromEncoded("four", ""); TextNode five = TextEscapeUtils.createFromEncoded("five", ""); TextNode six = TextEscapeUtils.createFromEncoded("six", ""); TextNode seven = TextEscapeUtils.createFromEncoded("seven", ""); assertEquals("one", one.text()); assertEquals("two", two.text()); assertEquals
@Test public void testCreateFromEncoded() { String test = "Hello <b>there</b>!"; TextNode tn = TextEscapeUtils.createFromEncoded(test, "http: TextNode tn2 = TextEscapeUtils.createFromEncoded(test, "http: TextNode tn3 = TextEscapeUtils.createFromEncoded(test, "http: TextNode tn4 = TextEscapeUtils.createFromEncoded(test, "http: TextNode tn5 = TextEscapeUtils.createFromEncoded(test, "http: TextNode tn6 = TextEscapeUtils.createFromEncoded(test, "http: TextNode tn7 = TextEscapeUtils.createFromEncoded(test, "http
@Test public void testCreateFromEncoded() { Document doc = Jsoup.parse("<div>Hello there</div>"); Element div = doc.select("div").first(); TextNode tn = TextNode.createFromEncoded("Hello there", ""); assertEquals("Hello there", tn.text()); assertEquals("Hello there", div.text()); }
@Test public void testNormaliseWhitespace() { String text = "Hello there"; String expected = "Hello there"; String actual = normaliseWhitespace(text); assertEquals(expected, actual); text = "Hello there"; expected = "Hello there"; actual = normaliseWhitespace(text); assertEquals(expected, actual); text = "Hello there\\n"; expected = "Hello there"; actual = normaliseWhitespace(text); assertEquals(expected, actual); }
@Test public void testNormaliseWhitespace() { String[][] tests = new String[][] { new String[] {"Line 1", "Line 2", "Line 3", "Line 4", "Line 5", "Line 6", "Line 7", "Line 8", "Line 9"}, new String[] {"Line 1", "Line 2", "Line 3", "Line 4", "Line 5", "Line 6", "Line 7", "Line 8", "Line 9"}, new String[] {"Line 1", "Line 2", "Line 3", "Line 4", "Line 5", "Line 6", "Line 7", "Line 8", "Line 9"}, new String[] {"Line 1
@Test public void testNormaliseWhitespace() { String text = "Hello there!"; String expected = "Hello there!"; String actual = normaliseWhitespace(text); assertEquals(expected, actual); text = "Hello there!"; expected = "Hello there!"; actual = normaliseWhitespace(text); assertEquals(expected, actual); text = "Hello there!"; expected = "Hello there!"; actual = normaliseWhitespace(text); assertEquals(expected, actual); text = "Hello there!"; expected = "Hello there!"; actual = normaliseWhitespace(text); assertEquals(expected, actual); text = "Hello there!"; expected = "Hello there!"; actual = normaliseWhitespace(text); assertEquals
@Test public void testAttr() { Document doc = Jsoup.parse("<div><p id=1>Hello</p><p id=2>There</p></div>"); Element p = doc.select("p").get(1); assertEquals("1", p.attr("id", "1")); assertEquals("2", p.attr("id", "2")); assertEquals("1", p.attr("id", "3")); assertEquals("2", p.attr("id", "4")); assertEquals("3", p.attr("id", "5")); assertEquals("4", p.attr("id", "6")); assertEquals("5
@Test public void attr() { Document doc = Jsoup.parse("<div id=1><p>Hello</p></div><div id=2><p>There</p></div>"); Element div1 = doc.select("div").first(); Element div2 = doc.select("div").get(1); assertEquals("1", div1.attr("id")); assertEquals("2", div2.attr("id")); div1.attr("id", "1"); div2.attr("id", "2"); assertEquals("1", div1.attr("id")); assertEquals("2", div2.attr("id")); div1.attr("id
@Test public void testAttr() { Document doc = Jsoup.parse("<div id=1><p>Hello</p></div><div id=2><p>There</p></div>"); Element div = doc.getElementById("1"); div.attr("id", "2"); assertEquals("1", div.attr("id")); assertEquals("2", div.attr("id")); div.attr("id", "3"); assertEquals("3", div.attr("id")); div.attr("id", "4"); assertEquals("4", div.attr("id")); div.attr("id", "5"); assertEquals("5", div.attr("id
@Test public void testChild() { Document doc = Jsoup.parse("<div><p>Hello</p><p>There</p></div>"); Element p = doc.select("p").first(); assertTrue(0 == p.child(0).index); assertTrue(1 == p.child(1).index); assertTrue(2 == p.child(2).index); assertTrue(3 == p.child(3).index); assertTrue(4 == p.child(4).index); assertTrue(5 == p.child(5).index); assertTrue(6 == p.child(6).index); assertTrue(7 == p.child(7).
@Test public void testChild() { Document doc = Jsoup.parse("<div><p>Hello\\nthere</p></div>"); Element p = doc.select("p").first(); assertTrue(p.children().get(0) == doc.select("p").get(1)); assertTrue(p.child(0).children().get(1) == doc.select("p").get(1)); assertTrue(p.child(1).children().get(0) == doc.select("p").get(1)); }
@Test public void testPrependElement() { Document doc = Jsoup.parse("<div id=1><p>Hello</p></div>"); Element div = doc.getElementById("1"); div.prependElement("p").text("Before"); assertEquals("Before", div.child(0).text()); assertEquals("Hello", div.child(1).text()); }
@Test public void testPrependElement() { Document doc = Jsoup.parse("<div><p>Hello\\nthere</p></div>"); Element p = doc.select("p").first(); assertEquals("Hello", p.text()); assertEquals("there", p.child(0).text()); assertEquals("there", p.child(1).text()); }
@Test public void testPrependElement() { Document doc = Jsoup.parse("<div id=1><p>Hello</p></div>"); Element div = doc.getElementById("1"); div.prependChild(div).text("Before"); assertEquals("Before", div.child(0).text()); assertEquals("Hello", div.child(1).text()); }
@Test public void testPrependElement() { Document doc = Jsoup.parse("<div id=1><p>Hello</p></div>"); Element div = doc.getElementById("1"); div.prependElement("p").text("Before"); assertEquals("Before", div.child(0).text()); assertEquals("Hello", div.child(1).text()); }
@Test public void testWrap() { Document doc = Jsoup.parse("<div><p>Hello\\nthere</p></div>"); Element p = doc.select("p").first(); Element w = p.wrap("<div><p>now!</p></div>"); assertEquals("<div><p>Hello\\nthere</p></div>", TextUtil.stripNewlines(doc.body().html())); w.append("<p>now!</p></div>"); assertEquals("<div><p>now!</p></div>", TextUtil.stripNewlines(doc.body().html())); }
@Test public void testWrap() { final String html = "<div><p>Hello <b>there</b></p> jsoup <p>now!</p></div>"; Element div = doc.select("div").first(); div.wrap(html).append("<div>"); assertEquals("<div><p>Hello <b>there</b></p> jsoup <p>now!</p></div>", TextUtil.stripNewlines(div.html())); div.append("<p>now!</p></div>"); assertEquals("<div><p>Hello <b>there</b></p> jsoup <p>now
@Test public void testWrap() { Document doc = Jsoup.parse("<div><p>Hello\\nthere</p></div>"); Element div = doc.select("div").first(); div.wrap("<div>one</div><div>two</div>").append("<p>Three</p>"); assertEquals("<div><div>one</div><div>two</div><p>Three</p></div>", TextUtil.stripNewlines(doc.body().html())); }
@Test public void testWrap() { Document doc = Jsoup.parse("<div><p>Hello</p></div><div><p>There</p></div>"); Element div = doc.select("div").first(); div.wrap("<div>one</div><div>two</div>"); assertEquals("<div><div>one</div><div>two</div><p>Hello</p></div><p>There</p></div>", TextUtil.stripNewlines(doc.body().html())); div.append("<p>Three</p><!-- four -->"); assertEquals("<div><div>one</div><div>two
@Test public void testWrap() { Element a = new Element(Tag.valueOf("a"), ""); Element b = new Element(Tag.valueOf("b"), ""); a.append("<div><p>Hello</p></div>"); b.append("<p>There</p>"); Element c = new Element(Tag.valueOf("c"), ""); c.append("<span>jsoup</span>"); c.append("<span>jsoup</span>"); Element d = new Element(Tag.valueOf("d"), ""); d.append("<p>What?</p>"); d.append("<span>
@Test public void testWrap() { Element a = new Element(Tag.valueOf("a"), ""); Element b = new Element(Tag.valueOf("b"), ""); a.append("<div><p>Hello</p></div>"); b.append("<p>There</p>"); Element c = new Element(Tag.valueOf("c"), ""); c.append("<span>jsoup</span>"); c.append("<span>jsoup</span>"); Element d = new Element(Tag.valueOf("d"), ""); d.append("<p>What?</p>"); d.append("<span>
@Test public void testWrap() { Element el = new Element(Tag.valueOf("div"), ""); Element el2 = new Element(Tag.valueOf("div"), ""); Element el3 = new Element(Tag.valueOf("div"), ""); Element el4 = new Element(Tag.valueOf("div"), ""); Element el5 = new Element(Tag.valueOf("div"), ""); Element el6 = new Element(Tag.valueOf("div"), ""); Element el7 = new Element(Tag.valueOf("div"), ""); el.append("<div>"); el.append("<div>"); el.append("<div
@Test public void testWrap() { final Document doc = Jsoup.parse("<div><p>Hello</p></div><div><p>There</p></div>"); Element div = doc.select("div").first(); div.wrap("<div>one</div><div>two</div>"); assertEquals("<div><div>one</div><div>two</div><p>Hello</p></div><p>There</p></div>", TextUtil.stripNewlines(doc.body().html())); div.append("<p>Three</p><!-- four -->"); assertEquals("<div><div>one</div><div>
@Test public void testWrap() { Element el = new Element(Tag.valueOf("div"), ""); Element el2 = new Element(Tag.valueOf("div"), ""); Element el3 = new Element(Tag.valueOf("div"), ""); el.append("<div>"); el.append("<span>one</span>"); el.append("<span>two</span>"); el.append("<span>three</span>"); Element el4 = new Element(Tag.valueOf("div"), ""); el4.append("<span>four</span>"); el4.append("<span>five</span>");
@Test public void testWrap() { Document doc = Jsoup.parse("<div><p>Hello\\nthere</p></div>"); Element div = doc.select("div").first(); div.wrap("<div>one</div><div>two</div>").append("<p>Three</p>"); assertEquals("<div><div>one</div><div>two</div><p>Three</p></div>", TextUtil.stripNewlines(doc.body().html())); Element div2 = doc.select("div").get(1); assertEquals("<div><div>one</div><div>two</div><p>Three</
@Test public void testWrap() { Element a = new Element(Tag.valueOf("a"), ""); Element b = new Element(Tag.valueOf("b"), ""); a.append("<div>one</div><div>two</div>"); b.append("<span>three</span>"); Element c = new Element(Tag.valueOf("c"), ""); c.append("<span>four</span>"); c.append("<span>five</span>"); Element d = new Element(Tag.valueOf("d"), ""); d.append("<span>five</span>"); d.append("<span
@Test public void testWrap() { Element a = new Element(Tag.valueOf("a"), ""); Element b = new Element(Tag.valueOf("b"), ""); Element c = new Element(Tag.valueOf("c"), ""); a.append("<div><p>Hello <span>jsoup <span>users</span></span></p></div>"); b.append("<div><p>Good.</p></div>"); c.append("<span>jsoup <span>users</span></span></p></div>"); assertEquals("<div><p>Hello <span>jsoup <span>users</span></
@Test public void testWrap() { Document doc = Jsoup.parse("<div><p>Hello\\nthere</p></div>"); Element div = doc.select("div").first(); div.wrap("<div>one</div><div>two</div>").append("<p>Three</p>"); assertEquals("<div><div>one</div><div>two</div><p>Three</p></div>", TextUtil.stripNewlines(doc.body().html())); assertEquals("<div><div>one</div><div>two</div><p>Three</p></div>", TextUtil.stripNewlines(doc.
@Test public void testWrap() { final String html = "<div><p>Hello <b>there</b>!</p></div>"; Element div = new Element(Tag.valueOf("div"), ""); div.appendChild(new Element(Tag.valueOf("p"), "")); div.appendChild(new Element(Tag.valueOf("b"), "")); div.appendChild(new Element(Tag.valueOf("p"), "")); Element div2 = new Element(Tag.valueOf("div"), ""); div2.appendChild(new Element(Tag.valueOf("p"), "")); div2.appendChild(new Element(Tag
@Test public void testWrap() { Document doc = Jsoup.parse("<div><p>Hello\\nthere</p></div>"); Element p = doc.select("p").first(); Element w = p.wrap("<div><p>now!</p></div>"); assertEquals("<div><p>Hello\\nthere</p></div>", TextUtil.stripNewlines(doc.body().html())); w.append("<p>now!</p></div>"); assertEquals("<div><p>now!</p></div>", TextUtil.stripNewlines(doc.body().html())); w.append("<p>now
@Test public void getDeepChild() { Document doc = Jsoup.parse("<div><p>One</p><p>Two</p><p>Three</>p></div>"); Element el1 = doc.select("p").first(); Element el2 = doc.select("p").get(1); Element el3 = doc.select("p").get(2); Element el4 = doc.select("p").get(3); Element el5 = doc.select("p").get(4); Element el6 = doc.select("p").get(5); Element el7 = doc.select("p").get(6); Element el8 = doc.select("p
@Test public void testGetDeepChild() { Document doc = Jsoup.parse("<div><p>Hello</p><p>There</p></div>"); Element el = doc.select("p").first(); List<Element> children = el.children(); assertEquals(2, children.size()); assertEquals("Hello", children.get(0).text()); assertEquals("There", children.get(1).text()); el = doc.select("p").get(1); children = el.children(); assertEquals(2, children.size()); assertEquals("Hello", children.get(0).text()); assertEquals("There", children.get(1).text()); }
@Test public void testGetDeepChild() { Document doc = Jsoup.parse("<div><p>Hello</p><p>There</p></div>"); Element el = doc.select("p").first(); assertEquals("Hello", el.text()); assertEquals("There", el.child(0).text()); Element el2 = doc.select("p").get(1); assertEquals("Hello there", el2.text()); assertEquals("There", el2.child(0).text()); Element el3 = doc.select("p").get(2); assertEquals("Hello there", el3.text()); assertEquals("There", el3.child(0).text());
@Test public void getDeepChild() { Document doc = Jsoup.parse("<div><p>Hello</p><p>There</p></div>"); Element el = doc.select("p").first(); assertEquals("Hello", el.text()); Element el2 = doc.select("p").get(1); assertEquals("There", el2.text()); Element el3 = doc.select("p").get(2); assertEquals("There", el3.text()); Element el4 = doc.select("p").get(3); assertEquals("Hello", el4.text()); Element el5 = doc.select("p").get(4); assertEquals("There", el
@Test public void testPreviousElementSibling() { Document doc = Jsoup.parse("<div><p>One</p><p>Two</p><p>Three</p></div>"); Element p1 = doc.select("p").first(); Element p2 = doc.select("p").get(1); Element p3 = doc.select("p").get(2); Element p4 = doc.select("p").get(3); Element p5 = doc.select("p").get(4); Element p6 = doc.select("p").get(5); Element p7 = doc.select("p").get(6); Element p8 = doc.select("p
@Test public void testPreviousElementSibling() { Document doc = Jsoup.parse("<div><p>Hello</p><p>There</p></div>"); Element p1 = doc.select("p").first(); Element p2 = doc.select("p").get(1); Element p3 = doc.select("p").get(2); Element p4 = doc.select("p").get(3); Element p5 = doc.select("p").get(4); Element p6 = doc.select("p").get(5); assertNull(p1.previousElementSibling()); assertNull(p2.previousElementSibling()); assertNull(p3.previousElementSibling
@Test public void testPreviousElementSibling() { Document doc = Jsoup.parse("<div><p>One</p><p>Two</p><p>Three</p></div>"); Element p1 = doc.select("p").first(); Element p2 = doc.select("p").get(1); Element p3 = doc.select("p").get(2); Element p4 = doc.select("p").get(3); Element p5 = doc.select("p").get(4); assertNull(p1.previousElementSibling()); assertNull(p2.previousElementSibling()); assertNull(p3.previousElementSibling()); assertNull(p4.previous
@Test public void testPreviousElementSibling() { Document doc = Jsoup.parse("<div><p>One</p><p>Two</p><p>Three</p></div>"); Element p1 = doc.select("p").first(); Element p2 = doc.select("p").get(1); Element p3 = doc.select("p").get(2); Element p4 = doc.select("p").get(3); Element p5 = doc.select("p").get(4); assertNull(p1.previousElementSibling()); assertNull(p2.previousElementSibling()); assertNull(p3.previousElementSibling()); assertNull(p4.previous
@Test public void testPreviousElementSibling() { Document doc = Jsoup.parse("<div><p>One</p><p>Two</p><p>Three</p></div>"); Element p1 = doc.select("p").first(); Element p2 = doc.select("p").get(1); Element p3 = doc.select("p").get(2); Element p4 = doc.select("p").get(3); Element p5 = doc.select("p").get(4); assertNull(p1.previousElementSibling()); assertNull(p2.previousElementSibling()); assertNull(p3.previousElementSibling()); assertNull(p4.previous
@Test public void testPreviousElementSibling() { Document doc = Jsoup.parse("<div><p>Hello</p><p>There</p></div>"); Element p1 = doc.select("p").first(); Element p2 = doc.select("p").get(1); Element p3 = doc.select("p").get(2); Element p4 = doc.select("p").get(3); Element p5 = doc.select("p").get(4); Element p6 = doc.select("p").get(5); assertNull(p1.previousElementSibling()); assertNull(p2.previousElementSibling()); assertNull(p3.previousElementSibling
@Test public void testPreviousElementSibling() { Document doc = Jsoup.parse("<div><p>Hello</p><p>There</p></div>"); Element p1 = doc.select("p").first(); Element p2 = doc.select("p").get(1); Element p3 = doc.select("p").get(2); Element p4 = doc.select("p").get(3); Element p5 = doc.select("p").get(4); Element p6 = doc.select("p").get(5); assertNull(p1.previousElementSibling()); assertNull(p2.previousElementSibling()); assertNull(p3.previousElementSibling
@Test public void testGetElementsByAttributeValue() { Document doc = Jsoup.parse("<div><p>Hello</p><p>There</p></div>"); Elements ps = doc.getElementsByAttributeValue("p", "Hello"); assertEquals(2, ps.size()); assertEquals("Hello", ps.get(0).text()); assertEquals("There", ps.get(1).text()); }
@Test public void collect() { Document doc = Jsoup.parse("<div><p>One</p><p>Two</p><p>Three</p></div>"); Elements ps = doc.select("p"); assertEquals(3, ps.size()); assertEquals("One", ps.get(0).text()); assertEquals("Two", ps.get(1).text()); assertEquals("Three", ps.get(2).text()); }
@Test public void testGetElementsByAttributeValueNot() { Document doc = Jsoup.parse("<div><p>One</p><p>Two</p><p>Three</p></div>"); Elements ps = doc.getElementsByAttributeValueNot("p", "one"); assertEquals(2, ps.size()); assertEquals("One", ps.get(0).text()); assertEquals("Two", ps.get(1).text()); }
@Test public void collect() { Document doc = Jsoup.parse("<div><p>One</p><p>Two</p><p>Three</p></div>"); Elements ps = doc.select("p"); assertEquals(3, ps.size()); assertEquals("One", ps.get(0).text()); assertEquals("Two", ps.get(1).text()); assertEquals("Three", ps.get(2).text()); }
@Test public void getElementsByAttributeValueStarting() { String h = "<p>Hello<p title=foo>there<p>world"; Document doc = Jsoup.parse(h); Elements ps = doc.getElementsByAttributeValueStarting("p", "http: assertEquals(1, ps.size()); assertEquals("there", ps.get(0).text()); }
@Test public void collect() { Document doc = Jsoup.parse("<div><p>One</p><p>Two</p><p>Three</p></div>"); Elements ps = doc.select("p"); assertEquals(3, ps.size()); assertEquals("One", ps.get(0).text()); assertEquals("Two", ps.get(1).text()); assertEquals("Three", ps.get(2).text()); }
@Test public void testGetElementsByAttributeValueEnding() { Document doc = Jsoup.parse("<div><p>One</p>...<p>Two</p>...<p>Three</p>"); Elements ps = doc.getElementsByAttributeValueEnding("p", ".."); assertEquals(2, ps.size()); assertEquals("One", ps.get(0).text()); assertEquals("Two", ps.get(1).text()); assertEquals("Three", ps.get(2).text()); }
@Test public void collect() { Document doc = Jsoup.parse("<div><p>One</p><p>Two</p><p>Three</>p></div>"); Elements ps = doc.select("p"); assertEquals(3, ps.size()); assertEquals("One", ps.get(0).text()); assertEquals("Two", ps.get(1).text()); assertEquals("Three", ps.get(2).text()); }
@Test public void testGetElementsByIndexLessThan() { Document doc = Jsoup.parse("<div><p>One</p><p>Two</p><p>Three</p></div>"); Elements ps = doc.select("p"); assertTrue(0 == ps.getElementsByIndexLessThan(0).size()); assertTrue(1 == ps.getElementsByIndexLessThan(1).size()); assertTrue(2 == ps.getElementsByIndexLessThan(2).size()); assertTrue(3 == ps.getElementsByIndexLessThan(3).size()); }
@Test public void testCollect() { Document doc = Jsoup.parse("<div><p>One</p><p>Two</p><p>Three</>p></div>"); Elements ps = doc.select("p"); assertEquals(2, ps.size()); assertEquals("One", ps.get(0).text()); assertEquals("Two", ps.get(1).text()); assertEquals("Three", ps.get(2).text()); }
@Test public void testGetElementsByIndexGreaterThan() { Document doc = Jsoup.parse("<div><p>One</p><p>Two</p><p>Three</p></div>"); Elements ps = doc.select("p"); assertTrue(0 == ps.getElementsByIndexGreaterThan(0).size()); assertTrue(1 == ps.getElementsByIndexGreaterThan(1).size()); assertTrue(2 == ps.getElementsByIndexGreaterThan(2).size()); assertTrue(3 == ps.getElementsByIndexGreaterThan(3).size()); }
@Test public void testCollect() { Document doc = Jsoup.parse("<div><p>One</p><p>Two</p><p>Three</>p></div>"); Elements ps = doc.select("p"); assertEquals(2, ps.size()); assertEquals("One", ps.get(0).text()); assertEquals("Two", ps.get(1).text()); assertEquals("Three", ps.get(2).text()); }
@Test public void testGetAllElements() { Document doc = Jsoup.parse("<div><p>One</p><p>Two</p><p>Three</>p></div>"); Elements els = doc.select("p").getAllElements(); assertEquals(3, els.size()); assertEquals("One", els.get(0).text()); assertEquals("Two", els.get(1).text()); assertEquals("Three", els.get(2).text()); }
@Test public void testGetAllElements() { Document doc = Jsoup.parse("<div><p>One</p><p>Two</p><p>Three</>p></div>"); Elements els = doc.select("p"); assertEquals(3, els.size()); assertEquals("One", els.get(0).text()); assertEquals("Two", els.get(1).text()); assertEquals("Three", els.get(2).text()); els = doc.select("p"); assertEquals(3, els.size()); assertEquals("One", els.get(0).text()); assertEquals("Two", els.get(1).text()); assertEquals("Three",
@Test public void val() { Document doc = Jsoup.parse("<div><input type=\'text\' /></div>"); Element div = doc.select("div").first(); div.val("one"); assertEquals("one", div.value()); div.val("two"); assertEquals("two", div.value()); div.val("three"); assertEquals("three", div.value()); div.val("four"); assertEquals("four", div.value()); }
@Test public void val() { Document doc = Jsoup.parse("<div><p>Hello\\nthere</p></div>"); Element div = doc.select("div").first(); div.val("one"); assertEquals("one", div.val()); div.val("two"); assertEquals("two", div.val()); div.val("three"); assertEquals("three", div.val()); }
@Test public void val() { Document doc = Jsoup.parse("<div><p>Hello\\nthere</p></div>"); Element div = doc.select("div").first(); div.val("one"); assertEquals("one", div.val()); div.val("two"); assertEquals("two", div.val()); div.val("three"); assertEquals("three", div.val()); }
@Test public void val() { Document doc = Jsoup.parse("<div><p>Hello\\nthere</p></div>"); Element div = doc.select("div").first(); div.val("one"); assertEquals("one", div.value()); div.val("two"); assertEquals("two", div.value()); div.val("three"); assertEquals("three", div.value()); }
@Test public void testVal() { Document doc = Jsoup.parse("<div val=\'one\'></div><div val=\'two\'></div>"); Element div = doc.select("div").first(); div.val("three"); assertEquals("one", div.val("one")); assertEquals("two", div.val("two")); assertEquals("three", div.val("three")); assertEquals("three", div.val("four")); assertEquals("<div val=\'one\'></div><div val=\'two\'></div>", TextUtil.stripNewlines(div.html())); }
@Test public void val() { Document doc = Jsoup.parse("<div><p>Hello\\nthere</p></div>"); Element div = doc.select("div").first(); div.val("one"); assertEquals("one", div.text()); div.val("two"); assertEquals("two", div.text()); div.val("three"); assertEquals("three", div.text()); }
@Test public void val() { Document doc = Jsoup.parse("<div><p>Hello\\nthere</p></div>"); Element div = doc.select("div").first(); div.val("one"); assertEquals("one", div.text()); div.val("two"); assertEquals("two", div.text()); div.val("three"); assertEquals("three", div.text()); }
@Test public void val() { Document doc = Jsoup.parse("<div val=\'one\'></div><div val=\'two\'></div>"); Element div = doc.select("div").first(); div.val("three"); assertEquals("one", div.val("one")); assertEquals("two", div.val("two")); assertEquals("three", div.val("three")); div.val("four"); assertEquals("four", div.val("four")); assertEquals("two", div.val("two")); assertEquals("three", div.val("three")); assertEquals("four", div.val("f
@Test public void val() { Document doc = Jsoup.parse("<div val=\'one\'></div><div val=\'two\'></div>"); Element div = doc.select("div").first(); div.val("one"); assertEquals("one", div.val("one")); assertEquals("two", div.val("two")); div.val("three"); assertEquals("three", div.val("three")); assertEquals("three", div.val("four")); }
@Test public void testParse() { Document doc = Jsoup.parse("<html><head></head><body><p>Hello</p></body></html>"); assertEquals("<html><head></head><body><p>Hello</p></body></html>", TextUtil.stripNewlines(doc.html())); assertEquals("<html><head></head><body><p>Hello</p></body></html>", TextUtil.stripNewlines(doc.body().html())); assertEquals("<html><head></head><body><p>Hello</p></body></html>", TextUtil.stripNewlines(doc.body().html())); assertEquals
@Test public void testParse() { String html = "<html><head></head><body><p>Hello</p></body></html>"; Document doc = Jsoup.parse(html, "http: assertEquals("<html><head></head><body><p>Hello</p></body></html>", TextUtil.stripNewlines(doc.html())); doc = Jsoup.parse(html, "http: assertEquals("<html><head></head><body><p>Hello</p></body></html>", TextUtil.stripNewlines(doc.html())); doc = Jsoup.parse(html, "http: assertEquals("<html><head
@Test public void testParse() { String html = "<html><head><title>First!</title></head><body><p>Second!</p></body></html>"; Document doc = Jsoup.parse(html, "http: assertEquals("<html><head><title>First!</title></head><body><p>Second!</p></body></html>", TextUtil.stripNewlines(doc.html())); doc = Jsoup.parse(html, "http: assertEquals("<html><head><title>First!</title></head><body><p>Second!</p></body></html>", TextUtil.stripNewlines(doc
@Test public void testParse() { Document doc = Jsoup.parse("<html><head></head><body><p>Hello</p></body></html>"); assertEquals("<html><head></head><body><p>Hello</p></body></html>", TextUtil.stripNewlines(doc.html())); Document doc2 = Jsoup.parse("<html><head></head><body><p>Hello</p></body></html>"); assertEquals("<html><head></head><body><p>Hello</p></body></html>", TextUtil.stripNewlines(doc2.html())); Document doc3 = Jsoup.parse("
@Test public void testTokenQueue() { Document doc = Jsoup.parse("&lt; &gt; &amp; &quot; &apos; &times;"); assertEquals("&lt; &gt; &amp; &quot; &apos; &times;" , doc.select("#tq").first().text()); assertEquals("&lt; &gt; &amp; &quot; &apos; &times;", doc.select("#tq").first().text()); assertEquals("&lt; &gt; &amp; &quot; &apos; &times;", doc.select("#tq").first().text()); assertEquals("&lt
@Test public void testParse() { String html = "<html><head><title>First!</title></head><body><p>Second!</p></body></html>"; Document doc = Jsoup.parse(html, "http: assertEquals("<html><head><title>First!</title></head><body><p>Second!</p></body></html>", TextUtil.stripNewlines(doc.html())); doc = Jsoup.parse(html, "http: assertEquals("<html><head><title>First!</title></head><body><p>Second!</p></body></html>", TextUtil.stripNewlines(doc
@Test public void testParse() { Document doc = Jsoup.parse("<html><head></head><body><p>Hello</p></body></html>"); assertEquals("<html><head></head><body><p>Hello</p></body></html>", TextUtil.stripNewlines(doc.html())); doc = Jsoup.parse("<html><head></head><body><p>Hello</p></body></html>"); assertEquals("<html><head></head><body><p>Hello</p></body></html>", TextUtil.stripNewlines(doc.html())); doc = Jsoup.parse("<html><head></
@Test public void testParse() { String html = "<html><head></head><body><p>Hello</p></body></html>"; Document doc = Jsoup.parse(html); assertEquals("<html><head></head><body><p>Hello</p></body></html>", TextUtil.stripNewlines(doc.html())); doc = Jsoup.parse("<html><head></head><body><p>Hello</p></body></html>"); assertEquals("<html><head></head><body><p>Hello</p></body></html>", TextUtil.stripNewlines(doc.html())); doc = Jsoup.parse("
@Test public void testParse() { Document doc = Jsoup.parse("<html><head></head><body><p>Hello</p></body></html>"); assertEquals("<html><head></head><body><p>Hello</p></body></html>", TextUtil.stripNewlines(doc.html())); Document doc2 = Jsoup.parse("<html><head></head><body><p>Hello</p></body></html>"); assertEquals("<html><head></head><body><p>Hello</p></body></html>", TextUtil.stripNewlines(doc2.html())); Document doc3 = Jsoup.parse("
@Test public void parsesComments() { String h = "<!DOCTYPE html><html><head><title>First!</title></head><body><p>First post! <img src=\\"foo.png\\" /></p></body></html>"; Document doc = Jsoup.parse(h); assertEquals("<!DOCTYPE html><html><head><title>First!</title></head><body><p>First post! <img src=\\"foo.png\\" /></p></body></html>", TextUtil.stripNewlines(doc.html())); }
@Test public void parsesComments() { String html = "<html><head><title>First!</title></head><body><p>First post! <img src=\\"foo.png\\" /></p></body></html>"; Document doc = Jsoup.parse(html); assertEquals("<html><head><title>First!</title></head><body><p>First post! <img src=\\"foo.png\\" /></p></body></html>", TextUtil.stripNewlines(doc.html())); }
@Test public void parsesComments() { String h = "<!DOCTYPE html><html><head><title>First!</title></head><body><p>Second!</p></body></html>"; Document doc = Jsoup.parse(h); assertEquals("<!DOCTYPE html><html><head><title>First!</title></head><body><p>Second!</p></body></html>", TextUtil.stripNewlines(doc.html())); assertEquals("<!DOCTYPE html><html><head><title>First!</title></head><body><p>Third!</p></body></html>", TextUtil.stripNewlines(doc.html())); }
@Test public void testParse() { String html = "<html><head></head><body><p>Hello</p></body></html>"; Document doc = Jsoup.parse(html); assertEquals("<html><head></head><body><p>Hello</p></body></html>", TextUtil.stripNewlines(doc.html())); doc = Jsoup.parse("<html><head></head><body><p>Hello</p></body></html>"); assertEquals("<html><head></head><body><p>Hello</p></body></html>", TextUtil.stripNewlines(doc.html())); doc = Jsoup.parse("
@Test public void testParse() { String html = "<html><head></head><body><p>Hello</p></body></html>"; Document doc = Jsoup.parse(html); assertEquals("<html><head></head><body><p>Hello</p></body></html>", TextUtil.stripNewlines(doc.html())); doc = Jsoup.parse("<html><head></head><body><p>Hello</p></body></html>"); assertEquals("<html><head></head><body><p>Hello</p></body></html>", TextUtil.stripNewlines(doc.html())); doc = Jsoup.parse("
@Test public void testParse() { String html = "<html><head><title>Title</title></head><body><p>Hello</p></body></html>"; Document doc = Jsoup.parse(html); assertEquals("html", doc.head().html()); assertEquals("body", doc.body().html()); assertEquals("p", doc.child(0).tagName()); assertEquals("Hello", doc.child(1).tagName()); assertEquals("p", doc.child(2).tagName()); assertEquals("Hello", doc.child(3).tagName()); }
@Test public void testParse() { String html = "<html><head><title>Title</title><body>Body</body></html>"; Document doc = Jsoup.parse(html, "http: assertEquals("Title", doc.head().text()); assertEquals("Body", doc.body().text()); html = "<html><head><title>Title2</title><body>Body2</body></html>"; doc = Jsoup.parse(html, "http: assertEquals("Title2", doc.head().text()); assertEquals("Body2", doc.body().text()); html = "<html><head><title>Title3</title><body>Body3</body
@Test public void testParse() { String html = "<html><head></head><body><p>Hello</p></body></html>"; Document doc = Jsoup.parse(html); assertEquals("html", doc.head().html()); assertEquals("body", doc.body().html()); assertEquals("p", doc.child(0).tagName()); assertEquals("Hello", doc.child(1).tagName()); assertEquals("p", doc.child(2).tagName()); assertEquals("body", doc.child(3).tagName()); assertEquals("p", doc.child(4).tagName()); assertEquals("Hello", doc.child(5).tagName());
@Test public void testParse() { String html = "<html><head>One</head><body>Two</body></html>"; Document doc = Jsoup.parse(html); assertEquals("One", doc.head().text()); assertEquals("Two", doc.body().text()); html = "<html><head>One</head><body>Three</body></html>"; doc = Jsoup.parse(html); assertEquals("One", doc.head().text()); assertEquals("Two", doc.body().text()); html = "<html><head>One</head><body>Three</body></html>"; doc = Jsoup.parse(html); assertEquals("One
@Test public void testParse() { String html = "<html><head></head><body><p>Hello</p></body></html>"; Document doc = Jsoup.parse(html); assertEquals("<html><head></head><body><p>Hello</p></body></html>", TextUtil.stripNewlines(doc.html())); doc = Jsoup.parse("<html><head></head><body><p>Hello</p></body></html>"); assertEquals("<html><head></head><body><p>Hello</p></body></html>", TextUtil.stripNewlines(doc.html())); doc = Jsoup.parse("
@Test public void testParse() { String html = "<html><head>One</head><body>Two</body></html>"; Document doc = Jsoup.parse(html); assertEquals("One", doc.head().text()); assertEquals("Two", doc.body().text()); html = "<html><head>One</head><body>Three</body></html>"; doc = Jsoup.parse(html); assertEquals("One", doc.head().text()); assertEquals("Two", doc.body().text()); html = "<html><head>One</head><body>Three</body></html>"; doc = Jsoup.parse(html); assertEquals("One
@Test public void testParse() { String html = "<html><head><title>Title</title><body>Body</body></html>"; Document doc = Jsoup.parse(html); assertEquals("html", doc.head().html()); assertEquals("body", doc.body().html()); assertEquals("body", doc.body().html()); }
@Test public void testParseTextNode() { String html = "<html><head></head><body><p>Hello</p></body></html>"; Document doc = Jsoup.parse(html); assertEquals("<html><head></head><body><p>Hello</p></body></html>", TextUtil.stripNewlines(doc.html())); doc = Jsoup.parse(html, "http: assertEquals("<html><head></head><body><p>Hello</p></body></html>", TextUtil.stripNewlines(doc.html())); doc = Jsoup.parse(html, "http: assertEquals("<html><head></head
@Test public void testParse() { String html = "<html><head></head><body><p>Hello</p></body></html>"; Document doc = Jsoup.parse(html); assertEquals("<html><head></head><body><p>Hello</p></body></html>", TextUtil.stripNewlines(doc.html())); doc = Jsoup.parse("<html><head></head><body><p>Hello</p></body></html>"); assertEquals("<html><head></head><body><p>Hello</p></body></html>", TextUtil.stripNewlines(doc.html())); doc = Jsoup.parse("
@Test public void testParseEndTag() { String h = "<html><head><title>Hello</title></head><body><p>There</p></body></html>"; Document doc = Jsoup.parse(h); Element head = doc.select("head").first(); Element body = doc.select("body").first(); assertEquals("Hello", head.text()); assertEquals("There", body.text()); }
@Test public void testParseEndTag() { String h = "<html><head><title>Hello</title></head><body><p>There</p></body></html>"; Document doc = Jsoup.parse(h); Element head = doc.head(); Element body = doc.body(); List<Element> tags = head.children(); assertEquals(1, tags.size()); assertEquals("Hello", tags.get(0).attr("title")); assertEquals("There", tags.get(1).attr("title")); assertEquals("There", tags.get(2).attr("title")); assertEquals("There", tags.get(3).attr("title")); }
@Test public void testParseEndTag() { String h = "<html><head><title>Hello</title></head><body><p>There</p></body></html>"; Document doc = Jsoup.parse(h); Element head = doc.head(); assertEquals("head", head.tagName()); assertEquals("body", head.text()); Element body = doc.body(); assertEquals("html", body.tagName()); assertEquals("<html><head><title>Hello</title></head><body><p>There</p></body></html>", TextUtil.stripNewlines(body.html())); }
@Test public void testParseEndTag() { String h = "<html><head><title>Hello</title></head><body><p>There</p></body></html>"; Document doc = Jsoup.parseBodyFragment(h); Element head = doc.head(); Element body = doc.body(); List<Element> tags = head.children(); assertEquals(1, tags.size()); assertEquals("Hello", tags.get(0).attr("title")); assertEquals("There", tags.get(1).attr("title")); assertEquals("There", tags.get(2).attr("title")); assertEquals("There", tags.get(3).attr("title"));
@Test public void testParseEndTag() { Document doc = Jsoup.parse("<html><head></head><body><p>Hello</p></body></html>"); assertEquals("<html><head></head><body><p>Hello</p></body></html>", TextUtil.stripNewlines(doc.html())); Document doc2 = Jsoup.parse("<html><head></head><body><p>Hello</p></body></html>"); assertEquals("<html><head></head><body><p>Hello</p></body></html>", TextUtil.stripNewlines(doc2.html())); Document doc3 = Jsoup.parse
@Test public void testParseEndTag() { String h = "<html><head><title>Hello</title></head><body><p>There</p></body></html>"; Document doc = Jsoup.parse(h); Element head = doc.select("head").first(); Element body = doc.select("body").first(); assertEquals("Hello", head.text()); assertEquals("There", body.text()); }
@Test public void testParseEndTag() { Document doc = Jsoup.parse("<div>One</div><div>Two</div>"); Element div = doc.getElementById("one"); assertEquals("One", div.text()); Element div2 = doc.getElementById("two"); assertEquals("Two", div2.text()); Element div3 = doc.getElementById("three"); assertEquals("Three", div3.text()); Element div4 = doc.getElementById("four"); assertEquals("Four", div4.text()); Element div5 = doc.getElementById("five"); assertEquals("Three", div5.text()); Element div6 = doc.getElementById("six"); assertEquals("
@Test public void parseStartTag() { String html = "<html><head></head><body><p>Hello there</p></body></html>"; Document doc = Jsoup.parse(html, "http: Assert.assertEquals("Hello there", doc.head()); doc = Jsoup.parse(html, "http: Assert.assertEquals("Hello there", doc.head()); doc = Jsoup.parse(html, "http: Assert.assertEquals("Hello there", doc.head()); doc = Jsoup.parse(html, "http: Assert.assertEquals("Hello there", doc.head()); doc = Jsoup.parse(html, "http: Assert.
@Test public void parseStartTag() { String html = "<html><head></head><body><p>Hello there</p></body></html>"; Document doc = Jsoup.parse(html, "http: Assert.assertEquals("Hello there", doc.head().text()); doc = Jsoup.parse(html, "http: Assert.assertEquals("Hello there", doc.head().text()); doc = Jsoup.parse(html, "http: Assert.assertEquals("Hello there", doc.head().text()); doc = Jsoup.parse(html, "http: Assert.assertEquals("Hello there", doc.head().text()); doc = Jsoup.parse
@Test public void parseStartTag() { String html = "<html><head></head><body><p>Hello there</p></body></html>"; Document doc = Jsoup.parse(html, "http: Assert.assertEquals("Hello there", doc.head()); doc = Jsoup.parse(html, "http: Assert.assertEquals("Hello there", doc.head()); doc = Jsoup.parse(html, "http: Assert.assertEquals("Hello there", doc.head()); doc = Jsoup.parse(html, "http: Assert.assertEquals("Hello there", doc.head()); doc = Jsoup.parse(html, "http: Assert.
@Test public void parseStartTag() { doGet("http: doGet("http: doGet("http: doGet("http: doGet("http: doGet("http: doGet("http: doGet("http: doGet("http: doGet("http: doGet("http: doGet("http: doGet("http: doGet("http: doGet("http: }
@Test public void parseStartTag() { String html = "<html><head></head><body><p>Hello world</p></body></html>"; Document doc = Jsoup.parse(html); assertEquals("html", doc.head().tagName()); assertEquals("body", doc.body().tagName()); assertEquals(0, doc.children().size()); assertEquals(0, doc.children().get(0).children().size()); assertEquals(1, doc.children().get(0).children().size()); assertEquals("p", doc.children().get(0).children().get(0).tagName()); assertEquals("Hello world", doc.children().get(0).
@Test public void parseStartTag() { String html = "<html><head></head><body><p>Hello there</p></body></html>"; Document doc = Jsoup.parse(html, "http: Assert.assertEquals("Hello there", doc.head().text()); doc = Jsoup.parse(html, "http: Assert.assertEquals("Hello there", doc.head().text()); doc = Jsoup.parse(html, "http: Assert.assertEquals("Hello there", doc.head().text()); doc = Jsoup.parse(html, "http: Assert.assertEquals("Hello there", doc.head().text()); doc = Jsoup.parse
@Test public void parseStartTag() { String html = "<html><head></head><body><p>Hello there</p></body></html>"; Document doc = Jsoup.parse(html, "http: Assert.assertEquals("Hello there", doc.head().text()); doc = Jsoup.parse(html, "http: Assert.assertEquals("Hello there", doc.head().text()); doc = Jsoup.parse(html, "http: Assert.assertEquals("Hello there", doc.head().text()); doc = Jsoup.parse(html, "http: Assert.assertEquals("Hello there", doc.head().text()); doc = Jsoup.parse
@Test public void parseStartTag() { String html = "<html><head></head><body><p>Hello there</p></body></html>"; Document doc = Jsoup.parse(html); assertEquals("html", doc.head()); assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assert
@Test public void parseStartTag() { final String html = "<html><head></head><body><p>Hello world</p></body></html>"; StaxParser parser = new StaxParser("<html><head></head><body><p>Hello world</p></body></html>"); StaxUtils.test(parser, html, "<html><head></head><body><p>Hello world</p></body></html>"); StaxUtils.test(parser, html, "<html><head></head><body><p>Hello world</p></body></html>"); StaxUtils.test(parser, html, "<html><head></head><body><p>Hello
@Test public void parseStartTag() { String html = "<html><head></head><body><p>Hello there</p></body></html>"; Document doc = Jsoup.parse(html, "http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals
@Test public void parseStartTag() { String html = "<html><head></head><body><p>Hello there</p></body></html>"; Document doc = Jsoup.parse(html); assertEquals("html", doc.head().tagName()); assertEquals("http: assertEquals("http: assertEquals("Hello there", doc.body().html()); }
@Test public void parseStartTag() { RenderedImage img = new RenderedImage(); RenderedImage img1 = new RenderedImage(); RenderedImage img2 = new RenderedImage(); RenderedImage img3 = new RenderedImage(); RenderedImage img4 = new RenderedImage(); RenderedImage img5 = new RenderedImage(); RenderedImage img6 = new RenderedImage(); RenderedImage img7 = new RenderedImage(); img1.setImage(img2); img2.setImage(img3); img3.setImage(img4); img4.setImage(img5); img5.setImage(img6); img1.setImage(img7
@Test public void parseStartTag() { doGet("http: doGet("http: doGet("http: doGet("http: doGet("http: doGet("http: doGet("http: doGet("http: doGet("http: doGet("http: doGet("http: doGet("http: doGet("http: }
@Test public void parseStartTag() { String html = "<html><head></head><body><p>Hello there</p></body></html>"; Document doc = Jsoup.parse(html, "http: Assert.assertEquals("Hello there", doc.head()); doc = Jsoup.parse(html, "http: Assert.assertEquals("Hello there", doc.head()); doc = Jsoup.parse(html, "http: Assert.assertEquals("Hello there", doc.head()); doc = Jsoup.parse(html, "http: Assert.assertEquals("Hello there", doc.head()); doc = Jsoup.parse(html, "http: Assert.
@Test public void parseStartTag() { String html = "<html><head></head><body><p>Hello there</p></body></html>"; Document doc = Jsoup.parse(html, "http: Assert.assertEquals("Hello there", doc.head()); doc = Jsoup.parse(html, "http: Assert.assertEquals("Hello there", doc.head()); doc = Jsoup.parse(html, "http: Assert.assertEquals("Hello there", doc.head()); doc = Jsoup.parse(html, "http: Assert.assertEquals("Hello there", doc.head()); doc = Jsoup.parse(html, "http: Assert.
@Test public void parseStartTag() { final Charset charset = Charset.forName("UTF-8"); final String html = "<html><head></head><body><p>Hello there</p></body></html>"; final Charset charset1 = Charset.forName("UTF-8"); final String charset2 = Charset.forName("UTF-8"); final String html3 = "<html><head><meta http-equiv=\\"Content-Type\\" content=\\"text/html; charset=UTF-8\\">Hello there</meta></head><body><p>Hello there</p></body></html>"; final Charset charset2 = Charset.forName("UTF-8"); final String html4
@Test public void parseStartTag() { String html = "<html><head></head><body><p>Hello world</p></body></html>"; Document doc = Parser.parse(html); assertEquals("html", doc.head().tagName()); assertEquals("body", doc.body().tagName()); assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: }
@Test public void parseStartTag() { String html = "<a href=\'/foo\'>One</a> <a href=\'/bar\'>Two</a> Three</a>"; Document doc = Jsoup.parse(html, "http: Assert.assertEquals("/foo", doc.baseUri()); doc = Jsoup.parse(html, "http: Assert.assertEquals("http: doc = Jsoup.parse(html, "http: Assert.assertEquals("http: doc = Jsoup.parse(html, "http: Assert.assertEquals("http: doc = Jsoup.parse(html, "http: Assert.assertEquals("http:
@Test public void parseStartTag() { Style style = new Style("color:red"); Style style1 = new Style("color:green"); Style style2 = new Style("color:blue"); Style style3 = new Style("color:red"); Style style4 = new Style("color:green"); Style style5 = new Style("color:red"); Style style6 = new Style("color:green"); Style style7 = new Style("color:red"); Style style8 = new Style("color:green"); Style style9 = new Style("color:red"); Style style10 = new Style("color:red"); Style style11 = new Style("color:red"); Style style12 = new Style("color:
@Test public void addChildToParent() { String html = "<html><head></head><body><p>Hello there</p></body></html>"; Document doc = Jsoup.parse(html); Element p = doc.select("p").first(); assertEquals("Hello there", p.text()); p = doc.select("p").first(); assertEquals("Hello there", p.text()); p = doc.select("p").first(); assertEquals("Hello there", p.text()); p = doc.select("p").first(); assertEquals("Hello there", p.text()); p = doc.select("p").first(); assertEquals("Hello there", p.text()); p = doc
@Test public void testParseAttribute() { Document doc = Jsoup.parse("<p>Hello</p><p>There</p>"); assertEquals("Hello", doc.select("p").first().text()); assertEquals("There", doc.select("p").get(0).text()); assertEquals("There", doc.select("p").get(1).text()); assertEquals("There", doc.select("p").get(2).text()); assertEquals("There", doc.select("p").get(3).text()); assertEquals("There", doc.select("p").get(4).text()); assertEquals("There", doc.select("p").get(5).text
@Test public void testParseTextNode() { String h = "<html><head><title>Hello</title></head><body><p>There</p></body></html>"; Document doc = Jsoup.parse(h); Element head = doc.select("head").first(); assertEquals("Hello", head.text()); assertEquals("There", head.attr("title")); Element body = doc.select("body").first(); assertEquals("There", body.attr("title")); assertEquals("There", body.attr("body")); Element p = doc.select("p").first(); assertEquals("Hello", p.text()); assertEquals("There", p.attr("body"));
@Test public void testParseTextNode() { String h = "<html><head><title>Hello</title></head><body><p>There</p></body></html>"; Document doc = Jsoup.parse(h); Element head = doc.select("head").first(); Element body = doc.select("body").first(); assertEquals("Hello", head.text()); assertEquals("There", body.text()); Element p = head.child(0); assertEquals("p", p.child(0).tagName()); TextNode textNode = (TextNode) p.child(0); assertEquals("Hello there", textNode.getWholeText()); assertEquals("There", textNode.
@Test public void parsesTextNodes() { Document doc = Jsoup.parse("<div><p>Hello</p><p>There</p></div>"); assertEquals("Hello There", doc.select("p").first().text()); assertEquals("Hello there", doc.select("p").first().text()); assertEquals("Hello there", doc.select("p").last().text()); assertEquals("Hello there", doc.select("p").last().text()); assertEquals("Hello there", doc.select("p").last().text()); assertEquals("Hello there", doc.select("p").last().text()); assertEquals("Hello there", doc.select("p").last().text());
@Test public void testParseTextNode() { Document doc = Jsoup.parse("<p>Hello <b>there</b> now</p>"); assertEquals("Hello <b>there</b> now", TextUtil.stripNewlines(doc.body().html())); Element p = doc.select("p").first(); assertEquals("Hello <b>there</b> now", TextUtil.stripNewlines(p.childNode(0).text())); p = doc.select("p").last(); assertEquals("Hello <b>there</b> now", TextUtil.stripNewlines(p.childNode(0).text())); TextUtil.stripNewlines
@Test public void addChildToParent() { String html = "<html><head><title>First!</title></head><body><p>Second!</p></body></html>"; Document doc = Jsoup.parse(html); Element child1 = doc.select("p").first(); Element child2 = doc.select("p").get(1); Element child3 = doc.select("p").get(2); Element child4 = doc.select("p").get(3); Element child5 = doc.select("p").get(4); Element child6 = doc.select("p").get(5); Element child7 = doc.select("p").get(6); assert
@Test public void addChildToParent() { Document doc = Jsoup.parse( "<div><p>Hello</p><p>There</p></div>"); Element p = doc.getElementById("p"); assertEquals("Hello", p.text()); Element child = (Element) p.childNode(0); assertEquals("There", child.text()); Element child2 = (Element) child.childNode(1); assertEquals("There", child2.text()); Element child3 = (Element) child2.childNode(2); assertEquals("Hello", child3.text()); Element child4 = (Element) child3.childNode(4); assertEquals("There", child4.
@Test public void addChildToParent() { String html = "<html><head><title>First!</title></head><body><p>Second!</p></body></html>"; Document doc = Jsoup.parse(html); Element child1 = doc.select("p").first(); Element child2 = doc.select("p").get(1); Element child3 = doc.select("p").get(2); Element child4 = doc.select("p").get(3); Element child5 = doc.select("p").get(4); assertEquals("First!", child1.tagName()); assertEquals("Second!", child2.tagName()); assertEquals("p",
@Test public void addChildToParent() { String html = "<html><head><title>First!</title></head><body><p>Second!</p></body></html>"; Document doc = Jsoup.parse(html); Element child1 = doc.select("p").first(); Element child2 = doc.select("p").get(1); Element child3 = doc.select("p").get(2); Element child4 = doc.select("p").get(3); Element child5 = doc.select("p").get(4); assertEquals("First!", child1.tagName()); assertEquals("Second!", child2.tagName()); assertEquals("p",
@Test public void addChildToParent() { String html = "<html><head><title>First!</title></head><body><p>Second!</p></body></html>"; Document doc = Jsoup.parse(html); Element child1 = doc.select("p").first(); Element child2 = doc.select("p").get(1); Element child3 = doc.select("p").get(2); Element child4 = doc.select("p").get(3); Element child5 = doc.select("p").get(4); assertEquals("First!", child1.tagName()); assertEquals("Second!", child2.tagName()); assertEquals("p",
@Test public void addChildToParent() { String html = "<html><head><title>First!</title></head><body><p>Second!</p></body></html>"; Document doc = Jsoup.parse(html); Element child1 = doc.select("p").first(); Element child2 = doc.select("p").get(1); Element child3 = doc.select("p").get(2); Element child4 = doc.select("p").get(3); Element child5 = doc.select("p").get(4); assertEquals("First!", child1.tagName()); assertEquals("Second!", child2.tagName()); assertEquals("p",
@Test public void addChildToParent() { String html = "<html><head><title>First!</title></head><body><p>Second!</p></body></html>"; Document doc = Jsoup.parse(html); Element child1 = doc.select("p").first(); Element child2 = doc.select("p").get(1); Element child3 = doc.select("p").get(2); Element child4 = doc.select("p").get(3); Element child5 = doc.select("p").get(4); assertEquals("First!", child1.tagName()); assertEquals("Second!", child2.tagName()); assertEquals("p",
@Test public void addChildToParent() { String html = "<html><head><title>First!</title></head><body><p>Second!</p></body></html>"; Document doc = Jsoup.parse(html, "http: Element head = doc.getElementsByTag("head").get(0); Element body = doc.getElementsByTag("body").get(0); Element child1 = doc.getElementsByTag("child1").get(0); Element child2 = doc.getElementsByTag("child2").get(0); Element child3 = doc.getElementsByTag("child3").get(0); Element child4 = doc.getElementsByTag("child4").
@Test public void addChildToParent() { String html = "<html><head><title>First!</title></head><body><p>First post!</p></body></html>"; Document doc = Jsoup.parse(html); Element head = doc.head(); Element child = doc.body().child(0); assertEquals("HEAD", head.tagName()); assertEquals("First!", head.attr("title")); assertEquals("First post!", head.attr("body")); Element child2 = doc.body().child(1); assertEquals("HEAD", child2.tagName()); assertEquals("First post!", child2.attr("title")); assertEquals("
@Test public void addChildToParent() { String html = "<html><head><title>First!</title></head><body><p>Second!</p></body></html>"; Document doc = Jsoup.parse(html, "http: Element head = doc.getElementsByTag("head").get(0); Element child = doc.getElementsByTag("body").get(0); Element child2 = doc.getElementsByTag("p").get(1); Element child3 = doc.getElementsByTag("p").get(2); Element child4 = doc.getElementsByTag("p").get(3); Element child5 = doc.getElementsByTag("p").get(4);
@Test public void addChildToParent() { String html = "<html><head><title>First!</title></head><body><p>Second!</p></body></html>"; Document doc = Jsoup.parse(html); Element child1 = doc.select("p").first(); Element child2 = doc.select("p").get(1); Element child3 = doc.select("p").get(2); Element child4 = doc.select("p").get(3); Element child5 = doc.select("p").get(4); assertEquals("First!", child1.tagName()); assertEquals("Second!", child2.tagName()); assertEquals("p",
@Test public void addChildToParent() { Document doc = Jsoup.parse( "<div><p>Hello</p><p>There</p></div>"); Element p = doc.getElementById("p"); assertEquals("Hello", p.text()); Element child = (Element) p.childNode(0); assertEquals("There", child.text()); Element child2 = (Element) child.childNode(1); assertEquals("There", child2.text()); Element child3 = (Element) child2.childNode(2); assertEquals("Hello", child3.text()); Element child4 = (Element) child3.childNode(4); assertEquals("There", child4.
@Test public void addChildToParent() { String html = "<html><head><title>First!</title></head><body><p>Second!</p></body></html>"; Document doc = Jsoup.parse(html); Element child1 = doc.select("p").first(); Element child2 = doc.select("p").get(1); Element child3 = doc.select("p").get(2); Element child4 = doc.select("p").get(3); Element child5 = doc.select("p").get(4); assertEquals("First!", child1.tagName()); assertEquals("Second!", child2.tagName()); assertEquals("p",
@Test public void addChildToParent() { String html = "<html><head><title>First!</title></head><body><p>Second!</p></body></html>"; Document doc = Jsoup.parse(html); Element child1 = doc.select("p").first(); Element child2 = doc.select("p").get(1); Element child3 = doc.select("p").get(2); Element child4 = doc.select("p").get(3); Element child5 = doc.select("p").get(4); assertEquals("First!", child1.tagName()); assertEquals("Second!", child2.tagName()); assertEquals("p",
@Test public void addChildToParent() { String html = "<html><head><title>First!</title></head><body><p>Second!</p></body></html>"; Document doc = Jsoup.parse(html); Element child1 = doc.select("p").first(); Element child2 = doc.select("p").get(1); Element child3 = doc.select("p").get(2); Element child4 = doc.select("p").get(3); Element child5 = doc.select("p").get(4); assertEquals("First!", child1.tagName()); assertEquals("Second!", child2.tagName()); assertEquals("p",
@Test public void addChildToParent() { String html = "<html><head><title>First!</title></head><body><p>Second!</p></body></html>"; Document doc = Jsoup.parse(html, "http: Element head = doc.getElementsByTag("head").get(0); Element child = doc.getElementsByTag("body").get(0); Element child2 = doc.getElementsByTag("p").get(1); Element child3 = doc.getElementsByTag("p").get(2); Element child4 = doc.getElementsByTag("p").get(3); Element child5 = doc.getElementsByTag("p").get(4);
@Test public void addChildToParent() { String html = "<html><head><title>First!</title></head><body><p>Second!</p></body></html>"; Document doc = Jsoup.parse(html); Element child1 = doc.select("p").first(); Element child2 = doc.select("p").get(1); Element child3 = doc.select("p").get(2); Element child4 = doc.select("p").get(3); Element child5 = doc.select("p").get(4); assertEquals("First!", child1.tagName()); assertEquals("Second!", child2.tagName()); assertEquals("p",
@Test public void addChildToParent() { String html = "<html><head><title>First!</title></head><body><p>Second!</p></body></html>"; Document doc = Jsoup.parse(html); Element child1 = doc.select("p").first(); Element child2 = doc.select("p").get(1); Element child3 = doc.select("p").get(2); Element child4 = doc.select("p").get(3); Element child5 = doc.select("p").get(4); assertEquals("First!", child1.tagName()); assertEquals("Second!", child2.tagName()); assertEquals("p",
@Test public void addChildToParent() { String html = "<html><head><title>First!</title></head><body><p>Second!</p></body></html>"; Document doc = Jsoup.parse(html, "http: Element head = doc.getElementsByTag("head").get(0); Element child = doc.getElementsByTag("body").get(0); Element child2 = doc.getElementsByTag("p").get(1); Element child3 = doc.getElementsByTag("p").get(2); Element child4 = doc.getElementsByTag("p").get(3); Element child5 = doc.getElementsByTag("p").get(4);
@Test public void testStackHasValidParent() { String html = "<html><head></head><body><p>Hello</p></body></html>"; Document doc = Jsoup.parse(html); Element head = doc.getElementsByTag("head").get(0); Element body = doc.getElementsByTag("body").get(0); Element child = doc.getElementsByTag("child").get(0); assertTrue(head.isValidParent(body)); assertTrue(body.isValidParent(child)); Element child2 = doc.getElementsByTag("child").get(1); assertTrue(child2.isValidParent(body)); assertTrue(child2.isValidParent(child));
@Test public void testStackHasValidParent() { String html = "<html><head></head><body><p>Hello</p></body></html>"; Document doc = Jsoup.parse(html); Element head = doc.head(); Element body = doc.body(); Element child = head.child(0); Element child2 = child.child(1); assertTrue(doc.stack().size() == 3); assertTrue(doc.stack().contains(head)); assertTrue(doc.stack().contains(body)); assertTrue(doc.stack().contains(child2)); assertTrue(doc.stack().contains(child2)); assertTrue(doc.stack().contains(child2));
@Test public void testStackHasValidParent() { Document doc = Jsoup.parse("&lt; &gt; &amp; &quot; &apos; &times;"); assertTrue(doc.stackHasValidParent(Tag.valueOf("div"))); assertTrue(doc.stackHasValidParent(Tag.valueOf("div"))); assertTrue(doc.stackHasValidParent(Tag.valueOf("span"))); assertTrue(doc.stackHasValidParent(Tag.valueOf("span"))); assertTrue(doc.stackHasValidParent(Tag.valueOf("span"))); assertTrue(doc.stackHasValidParent(Tag.value
@Test public void parsesSimpleTextNodes() { Document doc = Jsoup.parse("<html><head></head><body><p>Hello</p></body></html>"); assertEquals("<html><head></head><body><p>Hello</p></body></html>", TextUtil.stripNewlines(doc.html())); assertEquals("<html><head></head><body><p>Hello</p></body></html>", TextUtil.stripNewlines(doc.body().html())); assertEquals("<html><head></head><body><p>Hello</p></body></html>", TextUtil.stripNewlines(doc.html())); assertEquals
@Test public void testStackHasValidParent() { String html = "<html><head></head><body><p>Hello</p></body></html>"; Document doc = Jsoup.parse(html); Element head = doc.head(); Element body = doc.body(); Element child = head.child(0); Element child2 = child.child(1); Element child3 = child.child(2); assertTrue(doc.stack().size() == 3); assertTrue(doc.stack().contains(head)); assertTrue(doc.stack().contains(body)); assertTrue(doc.stack().contains(child2)); assertTrue(doc.stack().contains(child3)); assertTrue
@Test public void testStackHasValidParent() { Document doc = Jsoup.parse("&lt; &gt; &amp; &quot; &apos; &times;"); Element el = doc.select("div").first(); assertEquals("&lt; &gt; &amp; &quot; &apos; &times;" , el.text()); assertTrue(doc.stackHasValidParent(doc.select("div"))); assertTrue(doc.stackHasValidParent(doc.select("span"))); assertTrue(doc.stackHasValidParent(doc.select("span"))); assertTrue(doc.stackHasValidParent(doc.select("span"
@Test public void testStackHasValidParent() { String html = "<html><head></head><body><p>Hello</p></body></html>"; Document doc = Jsoup.parse(html); Element head = doc.select("head").first(); Element body = doc.select("body").first(); assertTrue(head.isValidParent(body)); assertTrue(body.isValidParent(head)); Element child = doc.select("child").first(); assertTrue(child.isValidParent(head)); assertTrue(child.isValidParent(body)); Element child2 = doc.select("child").first(); assertTrue(child2.isValidParent(child)); assertTrue(child2.isValid
@Test public void testStackHasValidParent() { Document doc = Jsoup.parse("<div><p>Hello</p><p>There</p></div>"); assertTrue(doc.stackHasValidParent(Tag.valueOf("p"))); assertTrue(doc.stackHasValidParent(Tag.valueOf("p"))); assertTrue(doc.stackHasValidParent(Tag.valueOf("p"))); assertTrue(doc.stackHasValidParent(Tag.valueOf("p"))); assertTrue(doc.stackHasValidParent(Tag.valueOf("p"))); assertTrue(doc.stackHasValidParent(Tag.valueOf("
@Test public void testPopStackToSuitableContainer() { Document doc = Jsoup.parse("<div>one</div><div>two</div><div>three</div>"); Element div1 = doc.getElementById("one"); Element div2 = doc.getElementById("two"); Element div3 = doc.getElementById("three"); assertEquals("<div>one</div><div>two</div><div>three</div>", TextUtil.stripNewlines(div1.html())); assertEquals("<div>one</div><div>two</div><div>three</div>", TextUtil.stripNewlines(div2.html()));
@Test public void testPopStackToSuitableContainer() { Document doc = Jsoup.parse("<div>one</div><div>two</div><div>three</div>"); Element div1 = doc.getElementById("one"); Element div2 = doc.getElementById("two"); Element div3 = doc.getElementById("three"); assertEquals("<div>one</div><div>two</div><div>three</div><div>four</div>", TextUtil.stripNewlines(div1.html())); assertEquals("<div>one</div><div>two</div><div>three</div><div>four</div>"
@Test public void testPopStackToSuitableContainer() { String html = "<html><head><title>Title</title></head><body><p>Text</p></body></html>"; Document doc = Jsoup.parse(html); Element head = doc.head(); Element body = doc.body(); Element child = head.child(0); Element child2 = child.child(1); Element child3 = child2.child(0); Element child4 = child3.child(0); Element child5 = child4.child(0); Element child6 = child5.child(0); Element child7 = child7.child(0); Element child8 = child8.
@Test public void testPopStackToSuitableContainer() { String html = "<html><head></head><body><p>Hello</p></body></html>"; Document doc = Jsoup.parse(html); Element head = doc.head(); Element body = doc.body(); Element child = doc.child(0); Element child2 = doc.child(1); Element child3 = doc.child(2); Element child4 = doc.child(3); Element child5 = doc.child(4); Element child6 = doc.child(5); Element child7 = doc.child(6); Element child8 = doc.child(7); Element child9 = doc.child(
@Test public void testPopStackToSuitableContainer() { Document doc = Jsoup.parse("<div>One</div><div>Two</div>"); Element div = doc.getElementById("one"); assertEquals("One", div.text()); Element div2 = doc.getElementById("two"); assertEquals("Two", div2.text()); Element div3 = doc.getElementById("three"); assertEquals("Three", div3.text()); Element div4 = doc.getElementById("four"); assertEquals("Two", div4.text()); Element div5 = doc.getElementById("five"); assertEquals("Three", div5.text()); Element div6 = doc.getElementById("six");
@Test public void testPopStackToClose() { Document doc = Jsoup.parse("&lt; &gt; &amp; &quot; &apos; &times;"); assertEquals("&lt; &gt; &amp; &quot; &apos; &times;", doc.select("div").first().text()); assertEquals("&lt; &gt; &amp; &quot; &apos; &times;", doc.select("div").first().text()); assertEquals("&lt; &gt; &amp; &quot; &apos; &times;", doc.select("div").first().text()); assertEquals("&lt; &gt;
@Test public void testPopStackToClose() { Document doc = Jsoup.parse("&lt; &gt; &amp; &quot; &apos; &times;"); assertEquals("&lt; &gt; &amp; &quot; &apos; &times;", TextUtil.stripNewlines(doc.html())); doc = Jsoup.parse("&lt; &gt; &amp; &quot; &apos; &times;"); assertEquals("&lt; &gt; &amp; &quot; &apos; &times;", TextUtil.stripNewlines(doc.html())); doc = Jsoup.parse("&lt
@Test public void testPopStackToClose() { Document doc = Jsoup.parse("&lt; &gt; &amp; &quot; &apos; &times;"); assertEquals("&lt; &gt; &amp; &quot; &apos; &times;" , doc.select("div").first().text()); assertEquals("&lt; &gt; &amp; &quot; &apos; &times;", doc.select("div").first().text()); assertEquals("&lt; &gt; &amp; &quot; &apos; &times;", doc.select("div").first().text()); assertEquals("&lt; &gt;
@Test public void testPopStackToClose() { Document doc = Jsoup.parse("&lt; &gt; &amp; &quot; &apos; &times;"); assertEquals("&lt; &gt; &amp; &quot; &apos; &times;", TextUtil.stripNewlines(doc.html())); doc = Jsoup.parse("&lt; &gt; &amp; &quot; &apos; &times;"); assertEquals("&lt; &gt; &amp; &quot; &apos; &times;", TextUtil.stripNewlines(doc.html())); doc = Jsoup.parse("&lt
@Test public void testPopStackToClose() { Document doc = Jsoup.parse("&lt; &gt; &amp; &quot; &apos; &times;"); assertEquals("&lt; &gt; &amp; &quot; &apos; &times;", TextUtil.stripNewlines(doc.html())); doc = Jsoup.parse("&lt; &gt; &amp; &quot; &apos; &times;"); assertEquals("&lt; &gt; &amp; &quot; &apos; &times;", TextUtil.stripNewlines(doc.html())); doc = Jsoup.parse("&lt
@Test public void testPopStackToClose() { Document doc = Jsoup.parse("&lt; &gt; &amp; &quot; &apos; &times;"); assertEquals("&lt; &gt; &amp; &quot; &apos; &times;" , doc.select("div").first().outerHtml()); assertEquals("&lt; &gt; &amp; &quot; &apos; &times;", doc.select("div").first().outerHtml()); assertEquals("&lt; &gt; &amp; &quot; &apos; &times;", doc.select("div").first().outerHtml()); assertEquals("&lt;
@Test public void testPopStackToClose() { Document doc = Jsoup.parse("&lt; &gt; &amp; &quot; &apos; &times;"); assertEquals("&lt; &gt; &amp; &quot; &apos; &times;", TextUtil.stripNewlines(doc.html())); doc = Jsoup.parse("&lt; &gt; &amp; &quot; &apos; &times;"); assertEquals("&lt; &gt; &amp; &quot; &apos; &times;", TextUtil.stripNewlines(doc.html())); doc = Jsoup.parse("&lt
@Test public void testPopStackToClose() { Document doc = Jsoup.parse("&lt; &gt; &amp; &quot; &apos; &times;"); assertEquals("&lt; &gt; &amp; &quot; &apos; &times;", doc.body().html()); doc = Jsoup.parse("&lt; &gt; &amp; &quot; &apos; &times;"); assertEquals("&lt; &gt; &amp; &quot; &apos; &times;", doc.body().html()); doc = Jsoup.parse("&lt; &gt; &amp; &quot; &ap
@Test public void testPopStackToClose() { Document doc = Jsoup.parse("&lt; &gt; &amp; &quot; &apos; &times;"); assertEquals("&lt; &gt; &amp; &quot; &apos; &times;", TextUtil.stripNewlines(doc.html())); doc = Jsoup.parse("&lt; &gt; &amp; &quot; &apos; &times;"); assertEquals("&lt; &gt; &amp; &quot; &apos; &times;", TextUtil.stripNewlines(doc.html())); doc = Jsoup.parse("&lt
@Test public void testPopStackToClose() { Document doc = Jsoup.parse("&lt; &gt; &amp; &quot; &apos; &times;"); assertEquals("&lt; &gt; &amp; &quot; &apos; &times;", TextUtil.stripNewlines(doc.html())); doc = Jsoup.parse("&lt; &gt; &amp; &quot; &apos; &times;"); assertEquals("&lt; &gt; &amp; &quot; &apos; &times;", TextUtil.stripNewlines(doc.html())); doc = Jsoup.parse("&lt
@Test public void testPopStackToClose() { Document doc = Jsoup.parse("&lt; &gt; &amp; &quot; &apos; &times;"); assertEquals("&lt; &gt; &amp; &quot; &apos; &times;", doc.select("div").first().text()); assertEquals("&lt; &gt; &amp; &quot; &apos; &times;", doc.select("div").first().text()); assertEquals("&lt; &gt; &amp; &quot; &apos; &times;", doc.select("div").first().text()); assertEquals("&lt; &gt;
@Test public void testPopStackToClose() { Document doc = Jsoup.parse("&lt; &gt; &amp; &quot; &apos; &times;"); assertEquals("&lt; &gt; &amp; &quot; &apos; &times;", TextUtil.stripNewlines(doc.html())); doc = Jsoup.parse("&lt; &gt; &amp; &quot; &apos; &times;"); assertEquals("&lt; &gt; &amp; &quot; &apos; &times;", TextUtil.stripNewlines(doc.html())); doc = Jsoup.parse("&lt
@Test public void testPopStackToClose() { Document doc = Jsoup.parse("&lt; &gt; &amp; &quot; &apos; &times;"); assertEquals("&lt; &gt; &amp; &quot; &apos; &times;", TextUtil.stripNewlines(doc.html())); doc = Jsoup.parse("&lt; &gt; &amp; &quot; &apos; &times;"); assertEquals("&lt; &gt; &amp; &quot; &apos; &times;", TextUtil.stripNewlines(doc.html())); doc = Jsoup.parse("&lt
@Test public void testPopStackToClose() { Document doc = Jsoup.parse("&lt; &gt; &amp; &quot; &apos; &times;"); assertEquals("&lt; &gt; &amp; &quot; &apos; &times;" , doc.select("div").first().text()); assertEquals("&lt; &gt; &amp; &quot; &apos; &times;", doc.select("div").first().text()); assertEquals("&lt; &gt; &amp; &quot; &apos; &times;", doc.select("div").first().text()); assertEquals("&lt; &gt;
@Test public void testPopStackToClose() { Document doc = Jsoup.parse("&lt; &gt; &amp; &quot; &apos; &times;"); assertEquals("&lt; &gt; &amp; &quot; &apos; &times;", TextUtil.stripNewlines(doc.html())); doc = Jsoup.parse("&lt; &gt; &amp; &quot; &apos; &times;"); assertEquals("&lt; &gt; &amp; &quot; &apos; &times;", TextUtil.stripNewlines(doc.html())); doc = Jsoup.parse("&lt
@Test public void testPopStackToClose() { Document doc = Jsoup.parse("&lt; &gt; &amp; &quot; &apos; &times;"); assertEquals("&lt; &gt; &amp; &quot; &apos; &times;" , doc.select("div").first().text()); assertEquals("&lt; &gt; &amp; &quot; &apos; &times;", doc.select("div").first().text()); assertEquals("&lt; &gt; &amp; &quot; &apos; &times;", doc.select("div").first().text()); assertEquals("&lt; &gt;
@Test public void last() { Document doc = Jsoup.parse("<html><head></head><body><p>Hello</p></body></html>"); assertEquals("<html><head></head><body><p>Hello</p></body></html>", TextUtil.stripNewlines(doc.html())); Element last = doc.last(); assertEquals("<html><head></head><body><p>Hello</p></body></html>", TextUtil.stripNewlines(last.html())); }
@Test public void last() { Document doc = Jsoup.parse("<html><head><title>Title</title></head><body><p>One</p><p>Two</p></body></html>"); assertEquals("<html><head><title>Title</title></head><body><p>One</p><p>Two</p></body></html>", TextUtil.stripNewlines(doc.html())); assertEquals("<html><head><title>Title</title></head><body><p>One</p><p>Two</p></body></html>", TextUtil.stripNewlines(doc.html())); assertEquals("<html><
@Test public void testHashCode() { Set<String> keys = new HashSet<String>(); keys.add("key1"); keys.add("key2"); keys.add("key3"); Set<String> values = new HashSet<String>(); values.add("value1"); values.add("value2"); values.add("value3"); Set<String> expectedKeys = new HashSet<String>(); expectedKeys.add("key1"); expectedKeys.add("key2"); expectedKeys.add("key3"); Set<String> expectedValues = new HashSet<String>(); expectedValues.add("value1"); expectedValues.add("value2"); expectedValues.add("value3");
@Test public void hash() { Attribute a = new Attribute("key", "value"); Attribute b = new Attribute("key", "value"); assertEquals(a.hashCode(), b.hashCode()); }
@Test public void hash() { Attribute a = new Attribute("key", "value"); Attribute b = new Attribute("key", "value"); assertEquals(a.hashCode(), b.hashCode()); }
@Test public void testHashCode() { Set<String> keys = new HashSet<String>(); keys.add("key1"); keys.add("key2"); keys.add("key3"); Set<String> values = new HashSet<String>(); values.add("value1"); values.add("value2"); values.add("value3"); Set<String> expectedKeys = new HashSet<String>(); expectedKeys.add("key1"); expectedKeys.add("key2"); expectedKeys.add("key3"); Set<String> expectedValues = new HashSet<String>(); expectedValues.add("value1"); expectedValues.add("value2"); expectedValues.add("value3");
@Test public void simpleText() { Whitelist wh = simpleText(); assertThat(wh.isTag("b")).isTrue(); assertThat(wh.isTag("em")).isTrue(); assertThat(wh.isTag("i")).isTrue(); assertThat(wh.isTag("strong")).isTrue(); assertThat(wh.isTag("em")).isTrue(); assertThat(wh.isTag("strong")).isTrue(); assertThat(wh.isTag("em")).isTrue(); assertThat(wh.isTag("strong")).isTrue(); assertThat(wh.isTag("em")).isTrue(); assertThat(wh.isTag
@Test public void simpleText() throws Exception { Whitelist whos = Whitelist.simpleText().addTags("b", "em", "i", "strong", "u"); Whitelist whos2 = whos.addTags("b", "em", "i", "strong", "u"); assertThat(whs).isEqualTo(whos2); Whitelist whos3 = whos.addTags("b", "em", "i", "strong", "u"); assertThat(whs).isEqualTo(who3); Whitelist whos4 = whos.addTags("b", "em", "i", "strong", "u"); assertThat(
@Test public void relaxed() { Whitelist w = Whitelist.relaxed(); assertThat(w).hasAttributes("a", "b", "blockquote", "br", "caption", "cite", "code", "col", "colgroup", "dd", "div", "dl", "dt", "em", "h1", "h2", "h3", "h4", "h5", "h6", "i", "img", "li", "ol", "sup", "sup", "table", "tbody", "td", "tr", "u", "ul"); }
@Test public void relaxed() { Whitelist w = Whitelist.relaxed(); assertThat(w).hasAttributes("a", "b", "blockquote", "br", "caption", "cite", "code", "col", "colgroup", "dd", "div", "dl", "dt", "em", "h1", "h2", "h3", "h4", "h5", "h6", "i", "img", "li", "ol", "sup", "sup", "table", "tbody", "td", "tr", "u", "ul"); }
@Test public void Whitelist() { Whitelist wh = Whitelist.basic(); assertTrue(wh.tagNames.isEmpty()); assertTrue(wh.attributes.isEmpty()); assertTrue(wh.enforcedAttributes.isEmpty()); assertTrue(wh.protocols.isEmpty()); Whitelist ws = Whitelist.basicWithImages(); assertTrue(ws.tagNames.isEmpty()); assertTrue(ws.attributes.isEmpty()); Whitelist ws2 = Whitelist.basicWithImages(); assertTrue(ws2.tagNames.isEmpty()); assertTrue(ws2.attributes.isEmpty()); assertTrue(ws2.enforcedAttributes.isEmpty()); assertTrue(ws2.protocols.
@Test public void testTags() { Whitelist w = Whitelist.basic(); w.addTags("foo", "bar"); w.addTags("baz", "qux"); assertTrue(w.isTag("foo")); assertTrue(w.isTag("bar")); assertTrue(w.isTag("baz")); assertTrue(w.isTag("qux")); assertTrue(w.isTag("baz")); assertTrue(w.isTag("qux")); assertTrue(w.isTag("baz")); assertTrue(w.isTag("foo")); assertTrue(w.isTag("baz")); assertTrue(w
@Test public void testTags() { Whitelist wh = Whitelist.basic().addTags("foo", "bar"); assertTrue(wh.isTag("foo")); assertTrue(wh.isTag("bar")); assertTrue(wh.isTag("baz")); assertTrue(wh.isTag("baz")); }
@Test public void testWhitelist() { Whitelist w = Whitelist.basic(); w.addTags("foo", "bar", "baz"); w.addEnforcedAttribute("foo", "bar", "baz"); w.addEnforcedAttribute("baz", "qux", "quux"); assertTrue(w.isTag("foo")); assertTrue(w.isEnforcedAttribute("foo", "bar", "baz")); assertTrue(w.isTag("baz")); assertTrue(w.isEnforcedAttribute("baz", "qux", "quux")); assertTrue(w.isTag("baz")); assertTrue(w.is
@Test public void protocols() { Whitelist protocols = Whitelist.basic() .addTags("foo") .addAttributes("bar", "baz", "qux") .addEnforcedAttribute("foo", "baz", "qux") .addProtocols("foo", "baz", "qux"); assertTrue(protocols.isTag("foo")); assertTrue(protocols.isTag("bar")); assertTrue(protocols.isTag("baz")); assertTrue(protocols.isEnforcedAttribute("foo", "baz", "qux")); assertTrue(protocols.isEnforcedAttribute("foo", "baz", "qux")); assertTrue(protocols.is
@Test public void testAddTags() { Whitelist tags = Whitelist.basic().addTags("foo", "bar"); assertEquals(2, tags.tagNames().size()); assertTrue(tags.tagNames().contains(TagName.valueOf("foo"))); assertTrue(tags.tagNames().contains(TagName.valueOf("bar"))); }
@Test public void testAddTags() { Whitelist tags = Whitelist.basic(); tags.addTags("foo", "bar"); assertEquals(2, tags.tagNames.size()); assertTrue(tags.tagNames.contains(TagName.valueOf("foo"))); assertTrue(tags.tagNames.contains(TagName.valueOf("bar"))); }
@Test public void testAddTags() { Whitelist tags = Whitelist.basic(); tags.addTags("foo", "bar"); assertEquals(2, tags.tagNames().size()); assertTrue(tags.tagNames().contains(TagName.valueOf("foo"))); assertTrue(tags.tagNames().contains(TagName.valueOf("bar"))); }
@Test public void addTags() { Whitelist tags = Whitelist.basic(); tags.addTags("foo", "bar"); assertEquals(2, tags.tagNames.size()); assertTrue(tags.tagNames.contains(TagName.valueOf("foo"))); assertTrue(tags.tagNames.contains(TagName.valueOf("bar"))); Whitelist tags2 = tags.addTags("foo", "bar"); assertEquals(2, tags2.tagNames.size()); assertTrue(tags2.tagNames.contains(TagName.valueOf("foo"))); assertTrue(tags2.tagNames.contains(TagName.valueOf("bar"))); Whitelist tags
@Test public void addTags() { Whitelist tags = Whitelist.basic(); tags.addTags("foo", "bar"); assertEquals(2, tags.tagNames.size()); assertTrue(tags.tagNames.contains(TagName.valueOf("foo"))); assertTrue(tags.tagNames.contains(TagName.valueOf("bar"))); assertTrue(tags.tagNames.contains(TagName.valueOf("baz"))); }
@Test public void addTags() { Whitelist tags = Whitelist.basic().addTags("foo", "bar"); assertEquals(2, tags.tagNames().size()); assertTrue(tags.tagNames().contains(TagName.valueOf("foo"))); assertTrue(tags.tagNames().contains(TagName.valueOf("bar"))); }
@Test public void addAttributes() { Whitelist w = Whitelist.basic().addAttributes("foo", "bar", "baz"); assertTrue(w.isTag("foo")); assertTrue(w.isTag("bar")); assertTrue(w.isTag("baz")); assertTrue(w.attributes.containsKey("foo")); assertTrue(w.attributes.containsKey("baz")); assertTrue(w.attributes.get("foo") instanceof Set); Set<AttributeKey> set = w.attributes.get("foo"); assertEquals(2, set.size()); assertTrue(set.contains("bar")); assertTrue(set.contains("baz")
@Test public void addAttributes() { Whitelist wh = new Whitelist().addAttributes("foo", "bar", "baz"); assertTrue(wh.isTag("foo")); assertTrue(wh.isTag("bar")); assertTrue(wh.isTag("baz")); assertTrue(wh.attributes.containsKey("foo")); assertTrue(wh.attributes.containsKey("baz")); assertTrue(wh.attributes.containsKey("baz")); Whitelist copy = Whitelist.copy(); copy.addAttributes("foo", "bar", "baz"); assertTrue(copy.isTag("foo")); assertTrue(copy.isTag("bar"));
@Test public void addAttributes() { Whitelist wh = new Whitelist().addAttributes("foo", "bar", "baz"); assertTrue(wh.isTag("foo")); assertTrue(wh.isTag("bar")); assertTrue(wh.isTag("baz")); assertTrue(wh.attributes.containsKey("foo")); assertTrue(wh.attributes.containsKey("baz")); assertTrue(wh.attributes.containsKey("baz")); Whitelist copy = Whitelist.copy(); copy.addAttributes("foo", "bar", "baz"); assertTrue(copy.isTag("foo")); assertTrue(copy.isTag("bar"));
@Test public void addAttributes() { Whitelist w = TagName.basic().addAttributes("foo", "bar", "baz"); assertTrue(w.isTag("foo")); assertTrue(w.isTag("bar")); assertTrue(w.isTag("baz")); assertTrue(w.attributes.containsKey("foo")); assertTrue(w.attributes.containsKey("baz")); assertTrue(w.attributes.get("foo") instanceof Set); Set<AttributeKey> set = w.attributes.get("foo"); assertTrue(set.contains(AttributeKey.valueOf("bar"))); assertTrue(set.contains(AttributeKey.valueOf
@Test public void addAttributes() { Whitelist whl = Whitelist.basic(); whl.addAttributes("foo", "bar", "baz"); assertEquals(2, whl.attributes.size()); assertTrue(whl.attributes.containsKey("foo")); assertTrue(whl.attributes.containsKey("bar")); assertTrue(whl.attributes.containsKey("baz")); Whitelist whl2 = Whitelist.basic(); whl2.addAttributes("foo", "bar", "baz"); assertEquals(2, whl2.attributes.size()); assertTrue(whl2.attributes.containsKey("foo")); assertTrue(whl
@Test public void addAttributes() { Whitelist whl = Whitelist.basic(); whl.addAttributes("foo", "bar", "baz"); assertEquals(2, whl.attributes.size()); assertTrue(whl.attributes.containsKey("foo")); assertTrue(whl.attributes.containsKey("bar")); assertTrue(whl.attributes.containsKey("baz")); Whitelist wl = whl.addAttributes("foo", "bar", "baz"); assertEquals(2, wl.attributes.size()); assertTrue(wl.attributes.containsKey("foo")); assertTrue(wl.attributes.containsKey("bar"));
@Test public void addAttributes() { Whitelist whl = Whitelist.basic(); whl.addAttributes("foo", "bar", "baz"); assertEquals(2, whl.attributes.size()); assertTrue(whl.attributes.containsKey("foo")); assertTrue(whl.attributes.containsKey("bar")); assertTrue(whl.attributes.containsKey("baz")); Whitelist whl2 = whl.addAttributes("foo", "bar", "baz"); assertEquals(2, whl2.attributes.size()); assertTrue(whl2.attributes.containsKey("foo")); assertTrue(whl2.attributes.containsKey
@Test public void addAttributes() { Whitelist whl = Whitelist.basic(); whl.addAttributes("foo", "bar", "baz"); assertEquals(2, whl.attributes.size()); assertTrue(whl.attributes.containsKey("foo")); assertTrue(whl.attributes.containsKey("bar")); assertTrue(whl.attributes.containsKey("baz")); Whitelist wl = whl.addAttributes("foo", "bar", "baz"); assertEquals(2, wl.attributes.size()); assertTrue(wl.attributes.containsKey("foo")); assertTrue(wl.attributes.containsKey("bar"));
@Test public void addAttributes() { Whitelist whos = Whitelist.basic().addTags("foo"); Whitelist whos2 = Whitelist.basic().addAttributes("foo", "bar"); Whitelist whos3 = Whitelist.basic().addAttributes("foo", "bar", "baz"); assertEquals(whl, whos2); assertEquals(whl, whos3); Whitelist whos4 = Whitelist.basic().addAttributes("foo", "bar", "baz"); Whitelist whos5 = Whitelist.basic().addAttributes("foo", "bar", "baz"); assertEquals(whl, whos4); assertEquals(whl, who
@Test public void addAttributes() { Whitelist w = Whitelist.basic(); w.addTags("foo"); w.addAttributes("bar", "baz"); assertEquals(2, w.attributes.size()); assertTrue(w.attributes.containsKey("foo")); assertTrue(w.attributes.containsKey("bar")); assertTrue(w.attributes.containsKey("baz")); }
@Test public void addAttributes() { Whitelist w = Whitelist.basic(); w.addAttributes("foo", "bar", "baz"); assertEquals(2, w.attributes.size()); assertTrue(w.attributes.containsKey("foo")); assertTrue(w.attributes.containsKey("bar")); assertTrue(w.attributes.containsKey("baz")); w.addAttributes("foo", "bar", "baz"); assertEquals(2, w.attributes.size()); assertTrue(w.attributes.containsKey("foo")); assertTrue(w.attributes.containsKey("bar")); assertTrue(w.attributes.containsKey("baz")); assert
@Test public void addProtocols() { Whitelist w = Whitelist.basic().addProtocols("foo", "bar", "baz"); assertTrue(w.isTag("foo")); assertTrue(w.isTag("bar")); assertTrue(w.isAttribute("baz", "baz")); assertTrue(w.isAttribute("baz", "baz")); assertTrue(w.protocols.containsKey("baz")); assertTrue(w.protocols.containsKey("baz")); assertTrue(w.protocols.containsKey("baz")); assertTrue(w.protocols.containsKey("baz")); assertTrue(w.protocols.containsKey
@Test public void addProtocols() { Whitelist w = Whitelist.basic(); w.addProtocols("foo", "bar", "baz"); assertTrue(w.protocols.containsKey("foo")); assertTrue(w.protocols.containsKey("bar")); assertTrue(w.protocols.containsKey("baz")); Whitelist w2 = w.addProtocols("foo", "bar", "baz", "baz"); assertTrue(w2.protocols.containsKey("foo")); assertTrue(w2.protocols.containsKey("baz")); assertTrue(w2.protocols.containsKey("baz")); assertTrue(w2.protocols.containsKey
@Test public void addProtocols() { Whitelist w = Whitelist.basic(); w.addProtocols("foo", "bar", "baz"); assertTrue(w.protocols.containsKey("foo")); assertTrue(w.protocols.containsKey("bar")); assertTrue(w.protocols.containsKey("baz")); Whitelist w2 = w.addProtocols("foo", "bar", "baz", "baz"); assertTrue(w2.protocols.containsKey("foo")); assertTrue(w2.protocols.containsKey("baz")); assertTrue(w2.protocols.containsKey("baz")); assertTrue(w2.protocols.containsKey
@Test public void addProtocols() { Whitelist w = Whitelist.basic(); w.addProtocols("foo", "bar", "baz"); assertTrue(w.protocols.containsKey("foo")); assertTrue(w.protocols.containsKey("bar")); assertTrue(w.protocols.containsKey("baz")); Whitelist w2 = w.addProtocols("foo", "bar", "baz", "baz"); assertTrue(w2.protocols.containsKey("foo")); assertTrue(w2.protocols.containsKey("baz")); assertTrue(w2.protocols.containsKey("baz")); assertTrue(w2.protocols.containsKey
@Test public void addProtocols() { Whitelist w = Whitelist.basic(); w.addProtocols("foo", "bar", "baz"); assertTrue(w.protocols.containsKey("foo")); assertTrue(w.protocols.containsKey("bar")); assertTrue(w.protocols.containsKey("baz")); Whitelist w2 = w.addProtocols("foo", "bar", "baz", "baz"); assertTrue(w2.protocols.containsKey("foo")); assertTrue(w2.protocols.containsKey("bar")); assertTrue(w2.protocols.containsKey("baz")); assertTrue(w2.protocols.containsKey("
@Test public void addProtocols() { Whitelist w = Whitelist.basic(); w.addProtocols("foo", "bar", "http"); w.addProtocols("foo", "bar", "http", "http"); assertTrue(w.protocols.containsKey("foo")); assertTrue(w.protocols.containsKey("bar")); assertTrue(w.protocols.containsKey("http")); assertTrue(w.protocols.containsKey("http: assertTrue(w.protocols.containsKey("http: assertTrue(w.protocols.containsKey("http: assertTrue(w.protocols.containsKey("http: assertTrue(w.protocols.containsKey("http: assertTrue(
@Test public void addProtocols() { Whitelist w = Whitelist.basic(); w.addProtocols("foo", "bar", "http"); assertTrue(w.protocols.containsKey("foo")); assertTrue(w.protocols.get("foo").contains(Protocol.http)); w.addProtocols("foo", "bar", "http", "http"); assertTrue(w.protocols.containsKey("foo")); assertTrue(w.protocols.get("bar").contains(Protocol.http)); w.addProtocols("foo", "bar", "http", "http"); assertTrue(w.protocols.containsKey("foo")); assertTrue(w.protocols.get("foo").contains(
@Test public void addProtocols() { Whitelist w = Whitelist.basic(); w.addProtocols("foo", "bar", "http"); w.addProtocols("foo", "bar", "http", "http"); assertTrue(w.protocols.contains(TagName.valueOf("foo"))); assertTrue(w.protocols.contains(TagName.valueOf("bar"))); assertTrue(w.protocols.contains(TagName.valueOf("http"))); assertTrue(w.protocols.contains(TagName.valueOf("http"))); assertTrue(w.protocols.contains(TagName.valueOf("http"))); assertTrue(w.protocols.
@Test public void addProtocols() { Whitelist w = Whitelist.basic(); w.addProtocols("foo", "bar", "baz"); assertTrue(w.protocols.containsKey("foo")); assertTrue(w.protocols.containsKey("bar")); assertTrue(w.protocols.containsKey("baz")); Whitelist w2 = w.addProtocols("foo", "bar", "baz", "baz"); assertTrue(w2.protocols.containsKey("foo")); assertTrue(w2.protocols.containsKey("bar")); assertTrue(w2.protocols.containsKey("baz")); assertTrue(w2.protocols.containsKey("
@Test public void addProtocols() { Whitelist w = Whitelist.basic(); w.addProtocols("foo", "bar", "http"); w.addProtocols("foo", "bar", "http", "http"); assertTrue(w.protocols.containsKey("foo")); assertTrue(w.protocols.containsKey("bar")); assertTrue(w.protocols.containsKey("http")); assertTrue(w.protocols.containsKey("http: assertTrue(w.protocols.containsKey("http: assertTrue(w.protocols.containsKey("http: assertTrue(w.protocols.containsKey("http: assertTrue(w.protocols.containsKey("http: assertTrue(
@Test public void addProtocols() { Whitelist w = Whitelist.basic(); w.addProtocols("foo", "bar", "http"); w.addProtocols("foo", "bar", "http", "http"); assertTrue(w.protocols.containsKey("foo")); assertTrue(w.protocols.containsKey("bar")); assertTrue(w.protocols.containsKey("http")); assertTrue(w.protocols.containsKey("http: assertTrue(w.protocols.containsKey("http: assertTrue(w.protocols.containsKey("http: assertTrue(w.protocols.containsKey("http: assertTrue(w.protocols.containsKey("http: assertTrue(
@Test public void addProtocols() { Whitelist w = Whitelist.basic(); w.addProtocols("foo", "bar", "http"); w.addProtocols("foo", "bar", "http", "http"); assertTrue(w.protocols.containsKey("foo")); assertTrue(w.protocols.containsKey("bar")); assertTrue(w.protocols.containsKey("http")); assertTrue(w.protocols.containsKey("http: assertTrue(w.protocols.containsKey("http: assertTrue(w.protocols.containsKey("http: assertTrue(w.protocols.containsKey("http: assertTrue(w.protocols.containsKey("http: assertTrue(
@Test public void addProtocols() { Whitelist w = Whitelist.basic(); w.addProtocols("foo", "bar", "baz"); assertTrue(w.protocols.contains(TagName.valueOf("foo"))); assertTrue(w.protocols.contains(TagName.valueOf("bar"))); assertTrue(w.protocols.contains(TagName.valueOf("baz"))); assertTrue(w.protocols.contains(TagName.valueOf("baz"))); assertTrue(w.protocols.contains(TagName.valueOf("foo"))); assertTrue(w.protocols.contains(TagName.valueOf("baz")));
@Test public void addProtocols() { Whitelist w = Whitelist.basic(); w.addProtocols("foo", "bar", "http"); w.addProtocols("foo", "bar", "http", "http"); assertTrue(w.protocols.containsKey("foo")); assertTrue(w.protocols.containsKey("bar")); assertTrue(w.protocols.containsKey("http")); assertTrue(w.protocols.containsKey("http: assertTrue(w.protocols.containsKey("http: assertTrue(w.protocols.containsKey("http: assertTrue(w.protocols.containsKey("http: assertTrue(w.protocols.containsKey("http: assertTrue(
@Test public void addProtocols() { Whitelist w = Whitelist.basic(); w.addProtocols("foo", "bar", "baz"); assertTrue(w.protocols.containsKey("foo")); assertTrue(w.protocols.containsKey("bar")); assertTrue(w.protocols.containsKey("baz")); Whitelist w2 = w.addProtocols("foo", "bar", "baz", "baz"); assertTrue(w2.protocols.containsKey("foo")); assertTrue(w2.protocols.containsKey("baz")); assertTrue(w2.protocols.containsKey("baz")); assertTrue(w2.protocols.containsKey
@Test public void addProtocols() { Whitelist w = Whitelist.basic(); w.addProtocols("foo", "bar", "baz"); assertTrue(w.protocols.containsKey("foo")); assertTrue(w.protocols.containsKey("bar")); assertTrue(w.protocols.containsKey("baz")); Whitelist w2 = w.addProtocols("foo", "bar", "baz", "baz"); assertTrue(w2.protocols.containsKey("foo")); assertTrue(w2.protocols.containsKey("baz")); assertTrue(w2.protocols.containsKey("baz")); assertTrue(w2.protocols.containsKey
@Test public void addProtocols() { Whitelist w = Whitelist.basic(); w.addProtocols("foo", "bar", "http"); w.addProtocols("foo", "bar", "http", "http"); assertTrue(w.protocols.containsKey("foo")); assertTrue(w.protocols.containsKey("bar")); assertTrue(w.protocols.containsKey("http")); assertTrue(w.protocols.containsKey("http: assertTrue(w.protocols.containsKey("http: assertTrue(w.protocols.containsKey("http: assertTrue(w.protocols.containsKey("http: assertTrue(w.protocols.containsKey("http: assertTrue(
@Test public void addProtocols() { Whitelist w = Whitelist.basic(); w.addProtocols("foo", "bar", "http"); w.addProtocols("foo", "baz", "http"); w.addProtocols("foo", "bar", "http"); w.addProtocols("foo", "baz", "http"); w.addProtocols("foo", "bar", "http"); w.addProtocols("foo", "baz", "http"); assertTrue(w.protocols.contains(TagName.valueOf("foo"))); assertTrue(w.protocols.contains(TagName.valueOf("bar"))); assertTrue(w.protocols.contains(TagName.
@Test public void addProtocols() { Whitelist w = Whitelist.basic(); w.addProtocols("foo", "bar", "http"); w.addProtocols("foo", "bar", "http", "http"); assertTrue(w.protocols.containsKey("foo")); assertTrue(w.protocols.containsKey("bar")); assertTrue(w.protocols.containsKey("http")); assertTrue(w.protocols.containsKey("http: assertTrue(w.protocols.containsKey("http: assertTrue(w.protocols.containsKey("http: assertTrue(w.protocols.containsKey("http: assertTrue(w.protocols.containsKey("http: assertTrue(
@Test public void isSafeTag() throws Exception { Whitelist tags = Whitelist.basic().addTags("foo", "bar"); assertTrue(tags.isSafeTag("foo")); assertTrue(tags.isSafeTag("bar")); assertFalse(tags.isSafeTag("baz")); }
@Test public void testIsSafeTag() throws Exception { Whitelist wh = Whitelist.basic(); assertTrue(wh.isSafeTag("a")); assertTrue(wh.isSafeTag("b")); assertTrue(wh.isSafeTag("c")); assertTrue(wh.isSafeTag("d")); assertTrue(wh.isSafeTag("e")); assertTrue(wh.isSafeTag("f")); assertTrue(wh.isSafeTag("g")); assertTrue(wh.isSafeTag("h")); assertTrue(wh.isSafeTag("i")); assertTrue(wh.isSafeTag("j")); assertTrue(wh.isSafe
@Test public void isSafeAttribute() throws Exception { Element el = Mockito.mock(Element.class); Attribute attr = Mockito.mock(Attribute.class); Mockito.when(attr.getKey()).thenReturn("foo"); Mockito.when(attr.getValue()).thenReturn("bar"); assertTrue(TagName.valueOf("foo").isSafeAttribute("foo", el, attr)); assertTrue(TagName.valueOf("bar").isSafeAttribute("foo", el, attr)); assertTrue(TagName.valueOf("baz").isSafeAttribute("foo", el, attr)); assertTrue(TagName.valueOf("baz").isSafeAttribute("foo",
@Test public void isSafeAttribute() throws Exception { Whitelist whl = Whitelist.basic(); Element el = Mockito.mock(Element.class); Attribute attr = Mockito.mock(Attribute.class); Mockito.when(attr.getKey()).thenReturn("foo"); Mockito.when(attr.getValue()).thenReturn("bar"); assertTrue(whl.isSafeTag("foo", el, attr)); assertTrue(whl.isSafeAttribute("foo", el, attr)); assertTrue(whl.isSafeAttribute("foo", el, attr)); assertTrue(whl.isSafeAttribute("foo", el, attr)); assertTrue(whl.isSafe
@Test public void isSafeAttribute() throws Exception { Whitelist whl = Whitelist.basic(); TagName tagName = TagName.valueOf("test"); Element el = Mockito.mock(Element.class); Attribute attr = Mockito.mock(Attribute.class); Mockito.when(attr.getKey()).thenReturn("test"); Mockito.when(attr.getValue()).thenReturn("1"); assertTrue(whl.isSafeTag(tagName, el, attr)); assertTrue(whl.isSafeAttribute(tagName, el, attr)); assertTrue(whl.isSafeAttribute(tagName, el, attr)); assertTrue(whl.isSafeAttribute
@Test public void isSafeAttribute() throws Exception { Whitelist w = Whitelist.basic(); w.addTags("foo"); w.addAttributes("foo", "bar", "baz"); w.addProtocols("foo", "bar", "baz"); assertTrue(w.isSafeTag("foo")); assertTrue(w.isSafeAttribute("bar", w.getElement("foo"), w.createAttribute("baz"))); assertTrue(w.isSafeAttribute("foo", w.getElement("foo"), w.createAttribute("baz"))); assertTrue(w.isSafeAttribute("foo", w.getElement("foo"), w.createAttribute("baz
@Test public void isSafeAttribute() throws Exception { Whitelist w = Whitelist.basic(); w.addTags("foo"); w.addAttributes("foo", "bar", "baz"); w.addProtocols("foo", "bar", "baz"); assertTrue(w.isSafeTag("foo")); assertTrue(w.isSafeAttribute("bar", w.getElement("foo"), w.createAttribute("baz"))); assertTrue(w.isSafeAttribute("foo", w.getElement("foo"), w.createAttribute("baz"))); assertTrue(w.isSafeAttribute("foo", w.getElement("foo"), w.createAttribute("baz
@Test public void isSafeAttribute() throws Exception { Whitelist protocols = Whitelist.basic().addTags("foo").addAttributes("foo", "bar", "baz").addProtocols("foo", "bar", "baz"); Element el = Mockito.mock(Element.class); Attribute attr = Mockito.mock(Attribute.class); Mockito.when(attr.getKey()).thenReturn("baz"); Mockito.when(attr.getValue()).thenReturn("baz"); assertTrue(protocols.isSafeTag("foo")); assertTrue(protocols.isSafeAttribute("bar", el, attr)); assertTrue(protocols.isSafeAttribute("baz", el, attr
@Test public void isSafeAttribute() throws Exception { Whitelist w = Whitelist.basic(); w.addTags("foo"); w.addAttributes("foo", "bar", "baz"); w.addProtocols("foo", "bar", "baz"); assertTrue(w.isSafeTag("foo")); assertTrue(w.isSafeAttribute("bar", w.createElement("foo"), w.createAttribute("baz"))); assertTrue(w.isSafeAttribute("foo", w.createElement("foo"), w.createAttribute("baz"))); assertTrue(w.isSafeAttribute("foo", w.createElement("foo"), w.createAttribute
@Test public void simpleText() throws Exception { Whitelist commands = Whitelist.simpleText(); commands.addTags("foo"); commands.addAttributes("foo", "bar", "baz"); commands.addProtocols("foo", "bar", "baz"); assertTrue(commands.isSafeTag("foo")); assertTrue(commands.isSafeAttribute("foo", null, new Attribute("bar", "baz"))); assertTrue(commands.isSafeAttribute("foo", null, new Attribute("baz", "foo"))); assertTrue(commands.isSafeTag("foo", "bar", new Attribute("baz", "foo"))); assertTrue(commands.isSafeAttribute
@Test public void testTestValidProtocol() { Whitelist protocols = Whitelist.basic().addTags("foo", "bar", "baz").addEnforcedAttribute("foo", "bar", "baz").addProtocols("foo", "bar", "baz"); Element el = ElementFactory.createDiv(); attr.setKey("foo"); attr.setValue("baz"); assertTrue(protocols.testValidProtocol(el, attr, Sets.newHashSet(Protocol.valueOf("baz"), Protocol.valueOf("baz")))); assertTrue(protocols.testValidProtocol(el, attr, Sets.newHashSet(Protocol.valueOf("foo"), Protocol.valueOf
@Test public void testTestValidProtocol() throws Exception { Whitelist protocols = Whitelist.basic(); protocols.addTags("foo", "bar", "baz"); protocols.addEnforcedAttribute("foo", "bar", "baz"); assertTrue(protocols.testValidProtocol("foo", "bar", "baz")); assertTrue(protocols.testValidProtocol("foo", "baz", "baz")); assertTrue(protocols.testValidProtocol("foo", "baz", "baz")); assertFalse(protocols.testValidProtocol("foo", "bar", "baz")); assertFalse(protocols.testValidProtocol("foo", "bar", "baz"));
@Test public void testTestValidProtocol() { Whitelist w = Whitelist.basic(); w.addTags("foo", "bar", "baz"); w.addEnforcedAttribute("foo", "bar", "baz"); w.addProtocols("foo", "bar", "baz"); assertTrue(test(w, "foo", "bar", "baz")); assertTrue(test(w, "foo", "bar", "baz")); assertTrue(test(w, "foo", "bar", "baz")); assertTrue(test(w, "foo", "bar", "baz")); assertTrue(test(w, "foo", "bar",
@Test public void testTestValidProtocol() { Whitelist protocols = Whitelist.basic(); protocols.addTags("foo", "bar"); protocols.addEnforcedAttribute("foo", "bar", "123"); protocols.addEnforcedAttribute("baz", "baz", "123"); assertTrue(protocols.testValidProtocol("foo", "bar", "123")); assertTrue(protocols.testValidProtocol("foo", "baz", "123")); assertTrue(protocols.testValidProtocol("foo", "baz", "123")); assertTrue(protocols.testValidProtocol("foo", "baz", "123")); assertTrue(protocols.testValidProtocol("foo", "
@Test public void testTestValidProtocol() { Whitelist w = Whitelist.basic(); w.addTags("foo", "bar"); w.addEnforcedAttribute("foo", "bar", "baz"); w.addProtocols("foo", "bar", "baz"); assertTrue(w.testValidProtocol(XmlUtil.parse("<foo><bar>baz</bar></foo>"), new Attribute("bar", "baz"), ImmutableSet.<Protocol> of())); assertTrue(w.testValidProtocol(XmlUtil.parse("<foo><bar>baz</bar></foo>"), new Attribute("bar", "baz"), ImmutableSet.<Protocol> of())); assert
@Test public void testTestValidProtocol() { Whitelist w = Whitelist.basic(); w.addTags("foo", "bar", "baz"); w.addEnforcedAttribute("foo", "bar", "baz"); w.addProtocols("foo", "bar", "baz"); assertTrue(w.testValidProtocol(XmlUtil.parse("<foo>foo</foo>"), new Attribute("bar", "baz"), ImmutableSet.<Protocol>of())); assertTrue(w.testValidProtocol(XmlUtil.parse("<foo>foo</foo>"), new Attribute("bar", "baz"), ImmutableSet.<Protocol>of())); assertTrue(w.testValid
@Test public void testTestValidProtocol() { Whitelist w = Whitelist.basic(); w.addTags("foo", "bar", "baz"); w.addEnforcedAttribute("foo", "bar", "baz"); w.addProtocols("foo", "bar", "baz"); assertTrue(w.testValidProtocol(XmlUtil.parse("<foo><bar>baz</bar></foo>"), new Attribute("bar", "baz"), ImmutableSet.<Protocol>of())); assertTrue(w.testValidProtocol(XmlUtil.parse("<foo><bar>baz</bar></foo>"), new Attribute("bar", "baz"), ImmutableSet.<Protocol>
@Test public void getEnforcedAttributes() { Whitelist w = Whitelist.basic(); w.addTags("foo", "bar", "baz"); w.addEnforcedAttributes("foo", "bar", "baz"); Attributes attrs = w.getEnforcedAttributes("foo"); assertEquals(2, attrs.size()); assertEquals("bar", attrs.get("bar")); assertEquals("baz", attrs.get("baz")); }
@Test public void getEnforcedAttributes() { Whitelist w = Whitelist.basic(); w.addTags("foo"); w.addEnforcedAttribute("bar", "baz", "baz"); w.addEnforcedAttribute("baz", "qux", "quux"); Attributes attrs = w.getEnforcedAttributes("foo"); assertEquals(2, attrs.size()); assertEquals("baz", attrs.get("bar")); assertEquals("qux", attrs.get("baz")); }
@Test public void enforcedAttributes() { Whitelist w = Whitelist.basic(); w.addTags("foo"); w.addEnforcedAttribute("bar", "baz", "baz"); w.addEnforcedAttribute("baz", "qux", "quux"); w.addEnforcedAttribute("foo", "bar", "baz"); w.addEnforcedAttribute("baz", "qux", "quux"); Attributes attrs = w.getEnforcedAttributes("foo"); assertEquals(3, attrs.size()); assertEquals("bar", attrs.get("bar")); assertEquals("baz", attrs.get("baz")); assertEquals("qux", attrs
@Test public void enforcedAttributes() { Whitelist w = Whitelist.basic(); w.addTags("foo"); w.addEnforcedAttribute("bar", "baz", "baz"); w.addEnforcedAttribute("baz", "qux", "quux"); w.addEnforcedAttribute("foo", "bar", "baz"); w.addEnforcedAttribute("baz", "qux", "quux"); Attributes attrs = w.getEnforcedAttributes("foo"); assertEquals(2, attrs.size()); assertEquals("baz", attrs.get("bar")); assertEquals("qux", attrs.get("baz")); }
@Test public void getEnforcedAttributes() { Whitelist w = Whitelist.basic(); w.addTags("foo"); w.addEnforcedAttribute("bar", "baz", "baz"); w.addEnforcedAttribute("baz", "qux", "quux"); Attributes attrs = w.getEnforcedAttributes("foo"); assertEquals(2, attrs.size()); assertEquals("baz", attrs.get("bar")); assertEquals("qux", attrs.get("baz")); }
@Test public void tagName() { Whitelist Whitelist = TagName.valueOf("http: assert Whitelist.simpleText() .addTags("foo", "bar") .addTags("baz", "qux") .addAttributes("foo", "baz", "qux") .addAttributes("bar", "baz", "qux") .addProtocols("foo", "bar", "baz", "qux"); Whitelist expected = Whitelist.simpleText() .addTags("foo", "bar") .addAttributes("baz", "qux", "baz") .addProtocol("foo", "bar", "qux"); assertEquals(expected, Whitelist.
@Test public void tagName() { Whitelist Whitelist = TagName.valueOf("http: assertThat( Whitelist.simpleText() .addTags("foo", "bar") .addTags("baz", "qux") .addAttributes("foo", "baz", "qux") .addAttributes("bar", "baz", "qux") .addProtocols("foo", "bar", "baz", "qux") .addTags("foo", "baz", "qux") .addAttributes("bar", "baz", "qux") .addProtocol("foo", "bar", "baz", "qux") .addProtocol("baz", "
@Test public void testValueOf() { assertThat(TagName.valueOf("http: assertThat(TagName.valueOf("http: assertThat(TagName.valueOf("http: assertThat(TagName.valueOf("http: assertThat(TagName.valueOf("http: assertThat(TagName.valueOf("http: assertThat(TagName.valueOf("http: assertThat(TagName.valueOf("http: assertThat(TagName.valueOf("http: assertThat(TagName.valueOf("http: assertThat(TagName.valueOf("http: assertThat(TagName.valueOf("http: assertThat(TagName.valueOf("http: assertThat(TagName.valueOf("http
@Test public void valueOf() { assertThat(TagName.valueOf("http: assertThat(TagName.valueOf("http: assertThat(TagName.valueOf("http: assertThat(TagName.valueOf("http: assertThat(TagName.valueOf("http: assertThat(TagName.valueOf("http: assertThat(TagName.valueOf("http: assertThat(TagName.valueOf("http: assertThat(TagName.valueOf("http: assertThat(TagName.valueOf("http: assertThat(TagName.valueOf("http: assertThat(TagName.valueOf("http: assertThat(TagName.valueOf("http: assertThat(TagName.valueOf("http: assert
@Test public void AttributeKey() throws Exception { Whitelist whos = AttributeKey.valueOf("http: Whitelist names = whos.whitelist(); assertEquals(3, names.size()); assertTrue(names.containsTag("http")); assertTrue(names.containsTag("http: assertTrue(names.containsTag("http: assertTrue(names.containsTag("http: assertTrue(names.containsTag("http: assertTrue(names.containsTag("http: assertTrue(names.containsTag("http: assertTrue(names.containsTag("http: assertTrue(names.containsTag("http: assertTrue(names.containsTag("http: assertTrue(names.
@Test public void testKey() throws Exception { Whitelist wh = Whitelist.basic(); assertTrue(wh.isTag("a")); assertTrue(wh.isTag("b")); assertTrue(wh.isTag("c")); assertTrue(wh.isAttributes("a", "b", "c")); assertTrue(wh.isEnforcedAttribute("a", "b", "c")); assertTrue(wh.isEnforcedAttributes("c", "d", "d")); Whitelist ws = wh.addTags("a", "b", "c"); assertTrue(ws.isTag("a")); assertTrue(ws.isTag("b")); assertTrue
@Test public void testValueOf() { Whitelist who = Whitelist.valueOf("http: assertEquals("http: Whitelist noTags = Whitelist.valueOf("http: assertEquals("http: Whitelist noAttributes = Whitelist.valueOf("http: assertEquals("http: Whitelist noAttributes2 = Whitelist.valueOf("http: assertEquals("http: Whitelist noAttributes3 = Whitelist.valueOf("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("
@Test public void valueOf() { Whitelist who = Whitelist.valueOf("http: assertThat(who.isTag("foo"), is(true)); assertThat(who.attributes().get(TagName.valueOf("http: assertThat(who.attributes().get(TagName.valueOf("http: assertThat(who.isTag("foo"), is(true)); assertThat(who.attributes().get(TagName.valueOf("http: assertThat(who.isTag("foo"), is(true)); assertThat(who.attributes().get(TagName.valueOf("http: assertThat(who.isTag("foo"),
@Test public void testProtocol() { Whitelist protocols = Whitelist.basic() .addTags("foo") .addEnforcedAttribute("bar", "baz", "qux") .addProtocols("foo", "baz", "qux"); assertEquals(2, protocols.size()); assertEquals("foo", protocols.get(0).toString()); assertEquals("bar", protocols.get(1).toString()); assertEquals("baz", protocols.get(2).toString()); }
@Test public void testProtocol() { Whitelist protocols = Whitelist.valueOf("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("
@Test public void testValueOf() { Whitelist protocols = Whitelist.valueOf("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals
@Test public void valueOf() { Whitelist protocols = Whitelist.valueOf("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http
@Test public void testTypedValue() { assertThat(TypedValue.valueOf("http: assertThat(TypedValue.valueOf("http: assertThat(TypedValue.valueOf("http: assertThat(TypedValue.valueOf("http: assertThat(TypedValue.valueOf("http: assertThat(TypedValue.valueOf("http: assertThat(TypedValue.valueOf("http: assertThat(TypedValue.valueOf("http: assertThat(TypedValue.valueOf("http: assertThat(TypedValue.valueOf("http: assertThat(TypedValue.valueOf("http: assertThat(TypedValue.valueOf("http: assertThat(TypedValue.value
@Test(expected = IllegalArgumentException.class) public void null() { new TypedValue(null); }
@Test public void testTypedValue() { Whitelist who = new Whitelist().addTags("foo", "bar", "baz"); Whitelist who2 = new Whitelist().addTags("foo", "bar", "baz"); Whitelist who3 = new Whitelist().addTags("foo", "bar", "baz"); assertThat(who.isTag("foo")).isTrue(); assertThat(who.isTag("bar")).isTrue(); assertThat(who.isTag("baz")).isTrue(); assertThat(who2.isTag("baz")).isTrue(); assertThat(who3.isTag("foo")).is
@Test public void testHashCode() { Whitelist bs1 = Whitelist.valueOf("http: Whitelist bs2 = Whitelist.valueOf("http: Whitelist bs3 = Whitelist.valueOf("http: assertEquals(bs1.hashCode(), bs2.hashCode()); assertNotEquals(bs1.hashCode(), bs3.hashCode()); }
@Test public void testHashCode() { Whitelist bs1 = Whitelist.valueOf("http: Whitelist bs2 = Whitelist.valueOf("http: Whitelist bs3 = Whitelist.valueOf("http: Whitelist bs4 = Whitelist.valueOf("http: assertEquals(bs1.hashCode(), bs2.hashCode()); assertNotEquals(bs1.hashCode(), bs3.hashCode()); assertNotEquals(bs1.hashCode(), bs4.hashCode()); }
@Test public void testHashCode() { Whitelist bs1 = Whitelist.valueOf("http: Whitelist bs2 = Whitelist.valueOf("http: Whitelist bs3 = Whitelist.valueOf("http: Whitelist bs4 = Whitelist.valueOf("http: assertEquals(bs1.hashCode(), bs2.hashCode()); assertNotEquals(bs1.hashCode(), bs3.hashCode()); assertNotEquals(bs1.hashCode(), bs4.hashCode()); }
@Test public void testHashCode() { Whitelist who = Whitelist.basic(); Whitelist who2 = Whitelist.basic(); assertEquals(who.hashCode(), who2.hashCode()); Whitelist who3 = Whitelist.basicWithImages(); assertEquals(who.hashCode(), who3.hashCode()); Whitelist who4 = Whitelist.basicWithImages(); assertEquals(who.hashCode(), who4.hashCode()); Whitelist who5 = Whitelist.basicWithImages(); assertEquals(who.hashCode(), who5.hashCode()); Whitelist who6 = Whitelist.basicWithImages(); assertEquals(who.hashCode(), who6.hash
@Test public void testHashCode() { Whitelist bs1 = Whitelist.valueOf("http: Whitelist bs2 = Whitelist.valueOf("http: Whitelist bs3 = Whitelist.valueOf("http: Whitelist bs4 = Whitelist.valueOf("http: assertEquals(bs1.hashCode(), bs2.hashCode()); assertNotEquals(bs1.hashCode(), bs3.hashCode()); assertNotEquals(bs1.hashCode(), bs4.hashCode()); }
@Test public void equals() { Whitelist whos = Whitelist.basic(); Whitelist whos2 = Whitelist.basic(); assertEquals(whos, whos2); Whitelist whos3 = Whitelist.basic(); assertNotEquals(whos, null); assertNotEquals(whos2, whos3); Whitelist whos4 = Whitelist.basic(); assertEquals(whos, who4); Whitelist whos5 = Whitelist.basic(); assertEquals(whos, who5); }
@Test public void equals() { Whitelist whos = Whitelist.basic(); Whitelist whos2 = Whitelist.basic(); whos2.addTags("foo"); whos2.addAttributes("bar", "baz", "qux"); Whitelist whos3 = Whitelist.basicWithImages(); whos3.addTags("foo"); whos3.addAttributes("bar", "baz", "qux"); Whitelist whos4 = Whitelist.basicWithImages(); whos4.addTags("foo"); whos4.addAttributes("bar", "baz", "qux"); Whitelist whos5 = Whitelist.basicWithImages(); assertEquals(
@Test public void equals() { Whitelist whos = Whitelist.basic(); Whitelist whos1 = whos.addTags("foo"); Whitelist whos2 = whos.addTags("bar"); Whitelist whos3 = whos.addAttributes("baz", "baz", "baz"); Whitelist whos4 = whos.addProtocols("foo", "bar", "baz"); assertEquals(whl, whos1); assertEquals(whl, whos2); assertEquals(whl, whos3); assertEquals(whl, whos4); }
@Test public void equals() { Whitelist whos = Whitelist.basic(); Whitelist whos2 = Whitelist.basic(); whos2.addTags("foo"); whos2.addAttributes("bar", "baz", "qux"); Whitelist whos3 = Whitelist.basicWithImages(); whos3.addTags("foo"); whos3.addAttributes("bar", "baz", "qux"); Whitelist whos4 = Whitelist.basicWithImages(); whos4.addTags("foo"); whos4.addAttributes("bar", "baz", "qux"); Whitelist whos5 = Whitelist.basicWithImages(); assertEquals(
@Test public void equals() { assertTrue(Tags.valueOf("http: assertTrue(Tags.valueOf("http: assertTrue(Tags.valueOf("http: assertTrue(Tags.valueOf("http: assertTrue(Tags.valueOf("http: assertTrue(Tags.valueOf("http: assertTrue(Tags.valueOf("http: assertTrue(Tags.valueOf("http: assertTrue(Tags.valueOf("http: assertTrue(Tags.valueOf("http: assertTrue(Tags.valueOf("http: assertTrue(Tags.valueOf("http: assertTrue(Tags.valueOf("http: assertTrue(Tags.valueOf("http: assert
@Test public void equals() { Whitelist w = Whitelist.basic(); assertTrue(w.equals(w)); assertTrue(w.equals(new TypedValue("http: assertTrue(w.equals(new TypedValue("http: assertTrue(w.equals(new TypedValue("http: assertTrue(w.equals(new TypedValue("http: assertTrue(w.equals(new TypedValue("http: assertTrue(w.equals(new TypedValue("http: assertTrue(w.equals(new TypedValue("http: assertTrue(w.equals(new TypedValue("http: assertTrue(w.equals(new TypedValue("http: assertTrue(w.equals
@Test public void equals() { Whitelist whos = Whitelist.basic(); Whitelist whos2 = Whitelist.basic(); assertEquals(whos, whos2); Whitelist whos3 = Whitelist.basic(); assertNotEquals(whos, null); assertNotEquals(whos2, whos3); Whitelist whos4 = Whitelist.basic(); assertEquals(whos, who4); Whitelist whos5 = Whitelist.basic(); assertEquals(whos, who5); }
@Test public void equals() { Whitelist whos = Whitelist.basic(); Whitelist whos2 = Whitelist.basic(); assertEquals(whos, whos2); Whitelist whos3 = Whitelist.basic(); assertNotEquals(whos, null); assertNotEquals(whos, new Object()); assertNotEquals(whos, whos3); Whitelist whos4 = Whitelist.basic(); assertEquals(whos, who4); Whitelist whos5 = Whitelist.basic(); assertEquals(whos, who5); }
@Test public void testToString() { Whitelist who = Whitelist.valueOf("http: assertEquals("http: who = Whitelist.valueOf("http: assertEquals("http: who = Whitelist.valueOf("http: assertEquals("http: who = Whitelist.valueOf("http: assertEquals("http: who = Whitelist.valueOf("http: assertEquals("http: who = Whitelist.valueOf("http: assertEquals("http: who = Whitelist.valueOf("http: assertEquals("http: who = Whitelist.valueOf("http: assertEquals("http: who = Whitelist.valueOf("http: assertEquals("http: who = Wh
@Test public void testToString() { Whitelist protocols = Whitelist.valueOf("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("http: assertEquals("
@Test public void testMultiLine() { Document doc = Jsoup.parse("<div><p>One</p><p>Two</p><p>Three</p></div>"); Elements els = doc.select("*"); assertEquals(3, els.size()); assertEquals("One", els.get(0).getWholeData()); assertEquals("Two", els.get(1).getWholeData()); assertEquals("Three", els.get(2).getWholeData()); }
@Test public void testWholeData() { Document doc = Jsoup.parse("<div>One</div><div>Two</div><p>Three</p>"); Elements divs = doc.select("div"); assertEquals(3, divs.size()); assertEquals("One", divs.get(0).getWholeData()); assertEquals("Two", divs.get(1).getWholeData()); assertEquals("Three", divs.get(2).getWholeData()); }
@Test public void testOuterHtml() { final StringBuilder accum = new StringBuilder(); DataNode dataNode = new DataNode("hello world", ""); dataNode.outerHtml(accumulator); assertEquals("hello world", accum.toString()); }
@Test public void testOuterHtml() { DataNode d = new DataNode("<div>One</div><div>Two</div>", ""); StringBuilder accum = new StringBuilder(); d.outerHtml(accumulo); assertEquals("<div>One</div><div>Two</div>", accum.toString()); accum = new StringBuilder(); d.outerHtml(accumulo); assertEquals("<div>One</div><div>Two</div>", accum.toString()); accum = new StringBuilder(); d.outerHtml(accumulo); assertEquals("<div>One</div><div>Two</div>", accum.toString()); accum = new StringBuilder(); d.outerHtml
@Test public void testClean() { String html = "<html><head><script></script><noscript></noscript></head><body><p>Hello world</p></body></html>"; Whitelist whitelist = new Whitelist(); whitelist.add(new Whitelist.Tag("script")); String cleanHtml = Jsoup.clean(html, "http: assertEquals("<html><head></head><body><p>Hello world</p></body></html>", cleanHtml); Whitelist cleanWhitelist = new Whitelist(); cleanWhitelist.add(new Whitelist.Tag("script")); cleanWhitelist.add(new Whitelist.Tag("noscript")); assertEquals("<html
@Test public void handlesFrames() { String h = "<html><head><script></script><noscript></noscript></head><body><p>Hello</p></body></html>"; Document doc = Jsoup.parse(h); assertEquals("Hello", doc.select("noscript").first().text()); assertEquals("Hello", doc.select("p").first().text()); assertEquals("Hello", doc.select("p").last().text()); assertEquals("<html><head><script></script><noscript></noscript></head><body><p>Hello</p></body></html>", TextUtil.stripNewlines(doc.html())); }
@Test public void handlesFrames() { String h = "<html><head><script></script><noscript></noscript></head><body><p>Hello</p></body></html>"; String cleanHtml = Jsoup.clean(h, Whitelist.basic()); assertEquals("<html><head><script></script><noscript></noscript></head><body><p>Hello</p></body></html>", TextUtil.stripNewlines(cleanHtml)); }
@Test public void handlesFrames() { String h = "<html><head><script></script><noscript></noscript></head><body><p>Hello</p></body></html>"; String cleanHtml = Jsoup.clean(h, Whitelist.basic()); assertEquals("<html><head><script></script><noscript></noscript></head><body><p>Hello</p></body></html>", TextUtil.stripNewlines(cleanHtml)); }
@Test public void handlesFrames() { String h = "<html><head><script></script><noscript></noscript></head><body><p>Hello</p></body></html>"; String cleanHtml = Jsoup.clean(h, Whitelist.basic()); assertEquals("<html><head><script></script><noscript></noscript></head><body><p>Hello</p></body></html>", TextUtil.stripNewlines(cleanHtml)); assertEquals("<html><head><script></script><noscript></noscript></head><body><p>Hello</p></body></html>", TextUtil.stripNewlines(cleanHtml)); }
@Test public void testClean() { String html = "<html><head><script></script><noscript></noscript></head><body><p>Hello world</p></body></html>"; Whitelist whitelist = new Whitelist() .addAttributes("script", "http: String cleanHtml = Jsoup.clean(html, whitelist); assertEquals("<html><head></head><body><p>Hello world</p></body></html>", cleanHtml); Whitelist cleanWhitelist = new Whitelist() .addAttributes("script", "http: cleanHtml = Jsoup.clean(html, cleanWhitelist); assertEquals("<html><head></head><body><p>Hello world
@Test public void handlesFrames() { String h = "<html><head><script></script><noscript></noscript></head><body><p>Hello</p></body></html>"; String cleanHtml = Jsoup.clean(h, Whitelist.basic()); assertEquals("Hello", cleanHtml); }
@Test public void testTag() { Tag p1 = Tag.valueOf("p"); Tag p2 = Tag.valueOf("p"); assertEquals(p1, p2); }
@Test public void testGetTagName() { Tag p = Tag.valueOf("p"); assertEquals("p", p.getName()); assertEquals("p", p.getTagName()); }
@Test public void getName() { Tag p1 = Tag.valueOf("p"); assertEquals("p", p1.getName()); }
@Test public void getName() { Tag p = Tag.valueOf("p"); assertEquals("p", p.getName()); }
@Test public void valueOf() { Tag p1 = Tag.valueOf("p"); Tag p2 = Tag.valueOf("p"); assertEquals(p1, p2); }
@Test public void valueOf() { Tag p1 = Tag.valueOf("p"); Tag p2 = Tag.valueOf("p"); assertEquals(p1, p2); }
@Test public void valueOf() { Tag p1 = Tag.valueOf("p"); Tag p2 = Tag.valueOf("p"); assertEquals(p1, p2); }
@Test public void valueOf() { Tag p1 = Tag.valueOf("p"); Tag p2 = Tag.valueOf("p"); assertEquals(p1, p2); }
@Test public void valueOf() { Tag p1 = Tag.valueOf("p"); Tag p2 = Tag.valueOf("p"); assertEquals(p1, p2); }
@Test public void valueOf() { Tag p1 = Tag.valueOf("p"); Tag p2 = Tag.valueOf("p"); assertEquals(p1, p2); }
@Test public void valueOf() { Tag p1 = Tag.valueOf("p"); Tag p2 = Tag.valueOf("p"); assertEquals(p1, p2); }
@Test public void valueOf() { Tag p1 = Tag.valueOf("p"); Tag p2 = Tag.valueOf("p"); assertEquals(p1, p2); }
@Test public void valueOf() { Tag p1 = Tag.valueOf("p"); Tag p2 = Tag.valueOf("p"); assertEquals(p1, p2); }
@Test public void valueOf() { Tag p1 = Tag.valueOf("p"); Tag p2 = Tag.valueOf("p"); assertEquals(p1, p2); }
@Test public void valueOf() { Tag p1 = Tag.valueOf("p"); Tag p2 = Tag.valueOf("p"); assertEquals(p1, p2); }
@Test public void valueOf() { Tag p1 = Tag.valueOf("p"); Tag p2 = Tag.valueOf("p"); assertEquals(p1, p2); }
@Test public void canContain() { Tag p1 = Tag.valueOf("p"); Tag p2 = Tag.valueOf("p"); Tag p3 = Tag.valueOf("p"); Tag p4 = Tag.valueOf("p"); Tag p5 = Tag.valueOf("p"); Tag p6 = Tag.valueOf("p"); assertTrue(p1.canContain(p1)); assertTrue(p1.canContain(p2)); assertTrue(p1.canContain(p3)); assertTrue(p1.canContain(p4)); assertTrue(p1.canContain(p5)); assertFalse(p1.canContain(p6)); assertFalse
@Test public void canContain() { Tag a = Tag.valueOf("a"); Tag b = Tag.valueOf("b"); Tag c = Tag.valueOf("c"); assertFalse(a.canContain(b)); assertFalse(b.canContain(a)); assertFalse(c.canContain(b)); assertTrue(a.canContain(a)); assertTrue(b.canContain(b)); assertTrue(c.canContain(c)); }
@Test public void canContain() { Tag p1 = Tag.valueOf("p"); Tag p2 = Tag.valueOf("p"); Tag p3 = Tag.valueOf("p"); Tag p4 = Tag.valueOf("p"); Tag p5 = Tag.valueOf("p"); Tag p6 = Tag.valueOf("p"); assertTrue(p1.canContain(p1)); assertTrue(p1.canContain(p2)); assertTrue(p1.canContain(p3)); assertTrue(p1.canContain(p4)); assertTrue(p1.canContain(p5)); assertFalse(p1.canContain(p6)); assertFalse
@Test public void canContain() { Tag p1 = Tag.valueOf("p"); Tag p2 = Tag.valueOf("p"); Tag p3 = Tag.valueOf("p"); Tag p4 = Tag.valueOf("p"); assertFalse(p1.canContain(p2)); assertFalse(p1.canContain(p3)); assertFalse(p1.canContain(p4)); assertTrue(p1.canContain(p1)); assertTrue(p1.canContain(p2)); assertTrue(p1.canContain(p3)); assertTrue(p1.canContain(p4)); }
@Test public void canContain() { Tag p1 = Tag.valueOf("p"); Tag p2 = Tag.valueOf("p"); Tag p3 = Tag.valueOf("p"); Tag p4 = Tag.valueOf("p"); Tag p5 = Tag.valueOf("p"); Tag p6 = Tag.valueOf("p"); assertTrue(p1.canContain(p1)); assertTrue(p1.canContain(p2)); assertTrue(p1.canContain(p3)); assertTrue(p1.canContain(p4)); assertTrue(p1.canContain(p5)); assertFalse(p1.canContain(p6)); assertFalse
@Test public void canContain() { Tag p1 = Tag.valueOf("p"); Tag p2 = Tag.valueOf("p"); Tag p3 = Tag.valueOf("p"); Tag p4 = Tag.valueOf("p"); Tag p5 = Tag.valueOf("p"); Tag p6 = Tag.valueOf("p"); assertTrue(p1.canContain(p1)); assertTrue(p1.canContain(p2)); assertTrue(p1.canContain(p3)); assertTrue(p1.canContain(p4)); assertTrue(p1.canContain(p5)); assertFalse(p1.canContain(p6)); assertFalse
@Test public void canContain() { Tag head = Tag.valueOf("head"); Tag body = Tag.valueOf("body"); assertFalse(head.canContain(body)); assertTrue(body.canContain(head)); assertTrue(body.canContain(body)); assertFalse(body.canContain(body)); }
@Test public void canContain() { Tag d1 = Tag.valueOf("d1"); Tag d2 = Tag.valueOf("d2"); Tag d3 = Tag.valueOf("d3"); Tag d4 = Tag.valueOf("d4"); Tag d5 = Tag.valueOf("d5"); assertTrue(d1.canContain(d1)); assertTrue(d1.canContain(d2)); assertTrue(d1.canContain(d3)); assertTrue(d1.canContain(d4)); assertTrue(d1.canContain(d5)); assertFalse(d1.canContain(d6)); assertFalse(d1.canContain
@Test public void canContain() { Tag d1 = Tag.valueOf("d1"); Tag d2 = Tag.valueOf("d2"); Tag d3 = Tag.valueOf("d3"); Tag d4 = Tag.valueOf("d4"); Tag d5 = Tag.valueOf("d5"); Tag d6 = Tag.valueOf("d6"); assertTrue(d1.canContain(d1)); assertTrue(d1.canContain(d2)); assertTrue(d1.canContain(d3)); assertTrue(d1.canContain(d4)); assertTrue(d1.canContain(d5)); assertFalse(d1.canContain
@Test public void canContain() { Tag p1 = Tag.valueOf("p"); Tag p2 = Tag.valueOf("p"); Tag p3 = Tag.valueOf("p"); Tag p4 = Tag.valueOf("p"); Tag p5 = Tag.valueOf("p"); assertTrue(p1.canContain(p1)); assertTrue(p1.canContain(p2)); assertTrue(p1.canContain(p3)); assertTrue(p1.canContain(p4)); assertTrue(p2.canContain(p1)); assertTrue(p2.canContain(p2)); assertTrue(p2.canContain(p3)); assert
@Test public void isData() { Tag a = Tag.valueOf("a"); Tag b = Tag.valueOf("b"); assertTrue(a.isData()); assertTrue(b.isData()); assertFalse(a.isData()); }
@Test public void isData() { Tag a = Tag.valueOf("a"); Tag b = Tag.valueOf("b"); assertFalse(a.isData()); assertFalse(b.isData()); assertTrue(a.isData()); }
@Test public void isEmpty() { Tag empty = new Tag.Builder().build(); assertTrue(empty.isEmpty()); }
@Test public void isEmpty() { Tag empty = Tag.valueOf("empty"); assertTrue(empty.isEmpty()); }
@Test public void preserveWhitespace() { Tag p1 = new Tag("p"); Tag p2 = new Tag("p"); assertFalse(p1.preserveWhitespace()); assertFalse(p2.preserveWhitespace()); p1.setPreserveWhitespace(true); assertTrue(p1.preserveWhitespace()); assertTrue(p2.preserveWhitespace()); p2.setPreserveWhitespace(false); assertFalse(p1.preserveWhitespace()); assertFalse(p2.preserveWhitespace()); }
@Test public void preserveWhitespace() { Tag p1 = Tag.valueOf("p"); Tag p2 = Tag.valueOf("p"); assertFalse(p1.preserveWhitespace()); assertFalse(p2.preserveWhitespace()); p1.setPreserveWhitespace(true); assertTrue(p1.preserveWhitespace()); assertTrue(p2.preserveWhitespace()); p2.setPreserveWhitespace(false); assertFalse(p1.preserveWhitespace()); assertFalse(p2.preserveWhitespace()); }
@Test public void getImplicitParent() { Tag p1 = new Tag("p"); Tag p2 = new Tag("p"); Tag p3 = new Tag("p"); Tag p4 = new Tag("p"); assertNull(p1.getImplicitParent()); assertNull(p2.getImplicitParent()); assertNull(p3.getImplicitParent()); assertNull(p4.getImplicitParent()); }
@Test public void testGetImplicitParent() { Tag p1 = Tag.valueOf("p"); Tag p2 = Tag.valueOf("p"); Tag p3 = Tag.valueOf("p"); assertNull(p1.getImplicitParent()); assertNull(p2.getImplicitParent()); assertNull(p3.getImplicitParent()); }
@Test public void testIsValidParent() { Tag p1=new Tag("p"); Tag p2=new Tag("p"); Tag p3=new Tag("p"); Tag p4=new Tag("p"); Tag p5=new Tag("p"); Tag p6=new Tag("p"); Tag p7=new Tag("p"); Tag p8=new Tag("p"); Tag p9=new Tag("p"); Tag p10=new Tag("p", "10"); Tag p11=new Tag("p", "11"); Tag p12=new Tag("p", "12"); Tag p13=new Tag("p", "13"); Tag p21=new Tag("p", "
@Test public void isValidParent() { Tag p1 = Tag.valueOf("p"); Tag p2 = Tag.valueOf("p"); Tag p3 = Tag.valueOf("p"); Tag p4 = Tag.valueOf("p"); Tag p5 = Tag.valueOf("p"); Tag p6 = Tag.valueOf("p"); Tag p7 = Tag.valueOf("p"); Tag p8 = Tag.valueOf("p"); Tag p9 = Tag.valueOf("p"); Tag p10 = Tag.valueOf("p"); Tag p11 = Tag.valueOf("p"); Tag p12 = Tag.valueOf("p"); Tag p13 = Tag.valueOf
@Test public void testIsValidParent() { Tag p1 = Tag.valueOf("p"); Tag p2 = Tag.valueOf("p"); Tag p3 = Tag.valueOf("p"); Tag p4 = Tag.valueOf("p"); Tag p5 = Tag.valueOf("p"); Tag p6 = Tag.valueOf("p"); Tag p7 = Tag.valueOf("p"); assertTrue(p1.isValidParent(p1)); assertTrue(p1.isValidParent(p2)); assertTrue(p1.isValidParent(p3)); assertTrue(p1.isValidParent(p4)); assertTrue(p1.isValidParent(p5)); assertTrue
@Test public void isValidParent() { Tag p1=new Tag("p"); Tag p2=new Tag("p"); Tag p3=new Tag("p"); Tag p4=new Tag("p"); Tag p5=new Tag("p"); Tag p6=new Tag("p"); Tag p7=new Tag("p"); Tag p8=new Tag("p"); Tag p9=new Tag("p"); Tag p10=new Tag("p", "10"); Tag p11=new Tag("p", "11"); Tag p12=new Tag("p", "12"); Tag p13=new Tag("p", "13"); Tag p21=new Tag("p", "21
@Test public void isValidParent() { Tag p1=new Tag("p"); Tag p2=new Tag("p"); Tag p3=new Tag("p"); Tag p4=new Tag("p"); Tag p5=new Tag("p"); Tag p6=new Tag("p"); Tag p7=new Tag("p"); Tag p8=new Tag("p"); Tag p9=new Tag("p"); Tag p10=new Tag("p", "10"); Tag p11=new Tag("p", "11"); Tag p12=new Tag("p", "12"); Tag p13=new Tag("p", "13"); Tag p21=new Tag("p", "21
@Test public void equals() { Tag p1 = Tag.valueOf("p"); Tag p2 = Tag.valueOf("p"); Tag p3 = Tag.valueOf("p"); Tag p4 = Tag.valueOf("p"); Tag p5 = Tag.valueOf("p"); Tag p6 = Tag.valueOf("p"); Tag p7 = Tag.valueOf("p"); assertEquals(p1, p1); assertEquals(p1, p2); assertEquals(p1, p3); assertEquals(p1, p4); assertEquals(p1, p5); assertEquals(p1, p6); assertEquals(p1, p7); assert
@Test public void equals() { Tag p1 = Tag.valueOf("p"); Tag p2 = Tag.valueOf("p"); Tag p3 = Tag.valueOf("p"); Tag p4 = Tag.valueOf("p"); Tag p5 = Tag.valueOf("p"); Tag p6 = Tag.valueOf("p"); Tag p7 = Tag.valueOf("p"); Tag p8 = Tag.valueOf("p"); Tag p9 = Tag.valueOf("p"); assertEquals(p1, p1); assertEquals(p1, p2); assertEquals(p1, p3); assertEquals(p1, p4); assertEquals(p1,
@Test public void equals() { Tag p1 = Tag.valueOf("p"); Tag p2 = Tag.valueOf("p"); Tag p3 = Tag.valueOf("p"); Tag p4 = Tag.valueOf("p"); Tag p5 = Tag.valueOf("p"); Tag p6 = Tag.valueOf("p"); Tag p7 = Tag.valueOf("p"); Tag p8 = Tag.valueOf("p"); Tag p9 = Tag.valueOf("p"); assertEquals(p1, p1); assertEquals(p1, p2); assertEquals(p1, p3); assertEquals(p1, p4); assertEquals(p1,
@Test public void equals() { Tag p1 = Tag.createBlock("p"); Tag p2 = Tag.createBlock("p"); Tag p3 = Tag.createBlock("p"); Tag p4 = Tag.createBlock("p"); Tag p5 = Tag.createBlock("p"); Tag p6 = Tag.createBlock("p"); assertEquals(p1, p1); assertEquals(p1, p2); assertEquals(p1, p3); assertNotEquals(p1, p4); assertNotEquals(p1, null); assertNotEquals(p1, ""); assertNotEquals(p1, p5); assertEquals(p1, p6); assert
@Test public void equals() { Tag p1 = Tag.createBlock("p"); Tag p2 = Tag.createBlock("p"); Tag p3 = Tag.createBlock("p"); Tag p4 = Tag.createBlock("p"); Tag p5 = Tag.createBlock("p"); Tag p6 = Tag.createBlock("p"); assertTrue(p1.equals(p1)); assertTrue(p1.equals(p2)); assertTrue(p1.equals(p3)); assertTrue(p1.equals(p4)); assertTrue(p2.equals(p1)); assertTrue(p2.equals(p3)); assertTrue(p3.equals(p
@Test public void equals() { Tag p1 = Tag.createBlock("p"); Tag p2 = Tag.createBlock("p"); Tag p3 = Tag.createBlock("p"); Tag p4 = Tag.createBlock("p"); Tag p5 = Tag.createBlock("p"); Tag p6 = Tag.createBlock("p"); Tag p7 = Tag.createBlock("p"); Tag p8 = Tag.createBlock("p"); assertEquals(p1, p2); assertEquals(p1, p3); assertEquals(p1, p4); assertEquals(p1, p5); assertEquals(p1, p6); assertEquals(p1, p7
@Test public void equals() { Tag p1 = Tag.valueOf("p"); Tag p2 = Tag.valueOf("p"); Tag p3 = Tag.valueOf("p"); Tag p4 = Tag.valueOf("p"); Tag p5 = Tag.valueOf("p"); Tag p6 = Tag.valueOf("p"); Tag p7 = Tag.valueOf("p"); Tag p8 = Tag.valueOf("p"); Tag p9 = Tag.valueOf("p"); assertEquals(p1, p1); assertEquals(p1, p2); assertEquals(p1, p3); assertEquals(p1, p4); assertEquals(p1,
@Test public void equals() { Tag p1 = Tag.createBlock("p"); Tag p2 = Tag.createBlock("p"); Tag p3 = Tag.createBlock("p"); Tag p4 = Tag.createBlock("p"); Tag p5 = Tag.createBlock("p"); assertTrue(p1.equals(p1)); assertTrue(p1.equals(p2)); assertTrue(p1.equals(p3)); assertTrue(p1.equals(p4)); assertFalse(p1.equals(p5)); assertFalse(p2.equals(p3)); assertFalse(p3.equals(p4)); assertFalse(p4.equals(p
@Test public void equals() { Tag p1 = Tag.valueOf("p"); Tag p2 = Tag.valueOf("p"); Tag p3 = Tag.valueOf("p"); Tag p4 = Tag.valueOf("p"); Tag p5 = Tag.valueOf("p"); Tag p6 = Tag.valueOf("p"); Tag p7 = Tag.valueOf("p"); Tag p8 = Tag.valueOf("p"); Tag p9 = Tag.valueOf("p"); assertEquals(p1, p1); assertEquals(p1, p2); assertEquals(p1, p3); assertEquals(p1, p4); assertEquals(p1,
@Test public void equals() { Tag p1 = Tag.valueOf("p"); Tag p2 = Tag.valueOf("p"); Tag p3 = Tag.valueOf("p"); Tag p4 = Tag.valueOf("p"); Tag p5 = Tag.valueOf("p"); Tag p6 = Tag.valueOf("p"); Tag p7 = Tag.valueOf("p"); Tag p8 = Tag.valueOf("p"); Tag p9 = Tag.valueOf("p"); Tag p10 = Tag.valueOf("p"); Tag p11 = Tag.valueOf("p11"); Tag p12 = Tag.valueOf("p12"); Tag p13 = Tag.value
@Test public void testHashCode() { Tag p1 = Tag.valueOf("p"); Tag p2 = Tag.valueOf("p"); Tag p3 = Tag.valueOf("p"); assertEquals(p1.hashCode(), p2.hashCode()); assertEquals(p1.hashCode(), p3.hashCode()); }
@Test public void testHashCode() { Tag p1 = Tag.valueOf("p"); Tag p2 = Tag.valueOf("p"); Tag p3 = Tag.valueOf("p"); assertEquals(p1.hashCode(), p2.hashCode()); assertEquals(p1.hashCode(), p3.hashCode()); }
@Test public void testHashCode() { Tag p1 = Tag.valueOf("p"); Tag p2 = Tag.valueOf("p"); Tag p3 = Tag.valueOf("p"); assertEquals(p1.hashCode(), p2.hashCode()); assertEquals(p1.hashCode(), p3.hashCode()); }
@Test public void testHashCode() { Tag p1 = Tag.valueOf("p"); Tag p2 = Tag.valueOf("p"); Tag p3 = Tag.valueOf("p"); assertEquals(p1.hashCode(), p2.hashCode()); assertEquals(p1.hashCode(), p3.hashCode()); }
@Test public void testHashCode() { Tag p1 = Tag.valueOf("p"); Tag p2 = Tag.valueOf("p"); Tag p3 = Tag.valueOf("p"); assertEquals(p1.hashCode(), p2.hashCode()); assertEquals(p1.hashCode(), p3.hashCode()); }
@Test public void testHashCode() { Tag p1 = Tag.valueOf("p"); Tag p2 = Tag.valueOf("p"); Tag p3 = Tag.valueOf("p"); assertEquals(p1.hashCode(), p2.hashCode()); assertEquals(p1.hashCode(), p3.hashCode()); }
@Test public void testHashCode() { Tag p1 = Tag.valueOf("p"); Tag p2 = Tag.valueOf("p"); Tag p3 = Tag.valueOf("p"); assertEquals(p1.hashCode(), p2.hashCode()); assertEquals(p1.hashCode(), p3.hashCode()); }
@Test public void testHashCode() { Tag p1 = Tag.valueOf("p"); Tag p2 = Tag.valueOf("p"); Tag p3 = Tag.valueOf("p"); assertEquals(p1.hashCode(), p2.hashCode()); assertEquals(p1.hashCode(), p3.hashCode()); }
@Test public void setAncestor() { Tag a = Tag.valueOf("a"); Tag b = Tag.valueOf("b"); Tag c = Tag.valueOf("c"); List<Tag> ancestors = new ArrayList<Tag>(); ancestors.add(a); ancestors.add(b); ancestors.add(c); List<Tag> expected = new ArrayList<Tag>(); expected.add(a); expected.add(b); expected.add(c); assertEquals(expected, a.setAncestor("a", "b", "c")); assertEquals(expected, a.setAncestor("a", "b", "c")); assertEquals(expected, a.setAncestor("a",
@Test public void setAncestor() { Tag p1 = Tag.valueOf("p"); Tag p2 = Tag.valueOf("p"); Tag p3 = Tag.valueOf("p"); Tag p4 = Tag.valueOf("p"); Tag p5 = Tag.valueOf("p"); List<Tag> tags = new ArrayList<Tag>(); tags.add(p1); tags.add(p2); tags.add(p3); tags.add(p4); Map<String, Tag> map = new HashMap<String, Tag>(); map.put("p", p1); map.put("p2", p2); map.put("p3", p3);
@Test public void setAncestor() { Tag p1 = Tag.valueOf("p"); Tag p2 = Tag.valueOf("p"); Tag p3 = Tag.valueOf("p"); Tag p4 = Tag.valueOf("p"); List<Tag> ancestors = new ArrayList<Tag>(); ancestors.add(p1); ancestors.add(p2); ancestors.add(p3); ancestors.add(p4); List<Tag> ancestors2 = new ArrayList<Tag>(); ancestors2.add(p1); ancestors2.add(p2); ancestors2.add(p3); ancestors2.add(p4); List<Tag> ancestors3 = new ArrayList<Tag
@Test public void setAncestor() { Tag p1 = Tag.valueOf("p"); Tag p2 = Tag.valueOf("p"); Tag p3 = Tag.valueOf("p"); Tag p4 = Tag.valueOf("p"); List<Tag> tags = new ArrayList<Tag>(); tags.add(p1); tags.add(p2); tags.add(p3); tags.add(p4); p1.setAncestor("p"); p2.setAncestor("p"); p3.setAncestor("p"); p4.setAncestor("p"); p1.setAncestor("p"); p2.setAncestor("p"); p3.setAncestor("p");
@Test public void setAncestor() { Tag p1 = Tag.valueOf("p"); Tag p2 = Tag.valueOf("p"); Tag p3 = Tag.valueOf("p"); Tag p4 = Tag.valueOf("p"); List<Tag> ancestors = new ArrayList<Tag>(); ancestors.add(p1); ancestors.add(p2); ancestors.add(p3); ancestors.add(p4); List<Tag> ancestors2 = new ArrayList<Tag>(); ancestors2.add(p1); ancestors2.add(p2); ancestors2.add(p3); ancestors2.add(p4); List<Tag> ancestors3 = new ArrayList<Tag
@Test public void setAncestor() { Tag p1 = Tag.valueOf("p"); Tag p2 = Tag.valueOf("p"); Tag p3 = Tag.valueOf("p"); Tag p4 = Tag.valueOf("p"); Tag p5 = Tag.valueOf("p"); assertEquals(p1, p2); assertEquals(p1, p3); assertEquals(p1, p4); assertEquals(p1, p5); Tag p6 = Tag.valueOf("p"); Tag p7 = Tag.valueOf("p"); assertEquals(p1, p2); assertEquals(p1, p3); assertEquals(p1, p4);
